"use strict";(self.webpackChunkwebpack_setup=self.webpackChunkwebpack_setup||[]).push([[57],{678:(e,t,s)=>{s.d(t,{pt:()=>d,W_:()=>n,tl:()=>o});var i=s(433),a=s(185);function r(e,t,s,i){return e.params.createElements&&Object.keys(i).forEach((r=>{if(!s[r]&&!0===s.auto){let n=(0,a.e)(e.el,`.${i[r]}`)[0];n||(n=(0,a.c)("div",i[r]),n.className=i[r],e.el.append(n)),s[r]=n,t[r]=n}})),s}function n(e){let{swiper:t,extendParams:s,on:i,emit:n}=e;function l(e){let s;return e&&"string"==typeof e&&t.isElement&&(s=t.el.querySelector(e),s)?s:(e&&("string"==typeof e&&(s=[...document.querySelectorAll(e)]),t.params.uniqueNavElements&&"string"==typeof e&&s&&s.length>1&&1===t.el.querySelectorAll(e).length?s=t.el.querySelector(e):s&&1===s.length&&(s=s[0])),e&&!s?e:s)}function o(e,s){const i=t.params.navigation;(e=(0,a.m)(e)).forEach((e=>{e&&(e.classList[s?"add":"remove"](...i.disabledClass.split(" ")),"BUTTON"===e.tagName&&(e.disabled=s),t.params.watchOverflow&&t.enabled&&e.classList[t.isLocked?"add":"remove"](i.lockClass))}))}function d(){const{nextEl:e,prevEl:s}=t.navigation;if(t.params.loop)return o(s,!1),void o(e,!1);o(s,t.isBeginning&&!t.params.rewind),o(e,t.isEnd&&!t.params.rewind)}function c(e){e.preventDefault(),(!t.isBeginning||t.params.loop||t.params.rewind)&&(t.slidePrev(),n("navigationPrev"))}function p(e){e.preventDefault(),(!t.isEnd||t.params.loop||t.params.rewind)&&(t.slideNext(),n("navigationNext"))}function u(){const e=t.params.navigation;if(t.params.navigation=r(t,t.originalParams.navigation,t.params.navigation,{nextEl:"swiper-button-next",prevEl:"swiper-button-prev"}),!e.nextEl&&!e.prevEl)return;let s=l(e.nextEl),i=l(e.prevEl);Object.assign(t.navigation,{nextEl:s,prevEl:i}),s=(0,a.m)(s),i=(0,a.m)(i);const n=(s,i)=>{s&&s.addEventListener("click","next"===i?p:c),!t.enabled&&s&&s.classList.add(...e.lockClass.split(" "))};s.forEach((e=>n(e,"next"))),i.forEach((e=>n(e,"prev")))}function m(){let{nextEl:e,prevEl:s}=t.navigation;e=(0,a.m)(e),s=(0,a.m)(s);const i=(e,s)=>{e.removeEventListener("click","next"===s?p:c),e.classList.remove(...t.params.navigation.disabledClass.split(" "))};e.forEach((e=>i(e,"next"))),s.forEach((e=>i(e,"prev")))}s({navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock",navigationDisabledClass:"swiper-navigation-disabled"}}),t.navigation={nextEl:null,prevEl:null},i("init",(()=>{!1===t.params.navigation.enabled?f():(u(),d())})),i("toEdge fromEdge lock unlock",(()=>{d()})),i("destroy",(()=>{m()})),i("enable disable",(()=>{let{nextEl:e,prevEl:s}=t.navigation;e=(0,a.m)(e),s=(0,a.m)(s),t.enabled?d():[...e,...s].filter((e=>!!e)).forEach((e=>e.classList.add(t.params.navigation.lockClass)))})),i("click",((e,s)=>{let{nextEl:i,prevEl:r}=t.navigation;i=(0,a.m)(i),r=(0,a.m)(r);const l=s.target;let o=r.includes(l)||i.includes(l);if(t.isElement&&!o){const e=s.path||s.composedPath&&s.composedPath();e&&(o=e.find((e=>i.includes(e)||r.includes(e))))}if(t.params.navigation.hideOnClick&&!o){if(t.pagination&&t.params.pagination&&t.params.pagination.clickable&&(t.pagination.el===l||t.pagination.el.contains(l)))return;let e;i.length?e=i[0].classList.contains(t.params.navigation.hiddenClass):r.length&&(e=r[0].classList.contains(t.params.navigation.hiddenClass)),n(!0===e?"navigationShow":"navigationHide"),[...i,...r].filter((e=>!!e)).forEach((e=>e.classList.toggle(t.params.navigation.hiddenClass)))}}));const f=()=>{t.el.classList.add(...t.params.navigation.navigationDisabledClass.split(" ")),m()};Object.assign(t.navigation,{enable:()=>{t.el.classList.remove(...t.params.navigation.navigationDisabledClass.split(" ")),u(),d()},disable:f,update:d,init:u,destroy:m})}function l(e){return void 0===e&&(e=""),`.${e.trim().replace(/([\.:!+\/])/g,"\\$1").replace(/ /g,".")}`}function o(e){let{swiper:t,extendParams:s,on:i,emit:n}=e;const o="swiper-pagination";let d;s({pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:e=>e,formatFractionTotal:e=>e,bulletClass:`${o}-bullet`,bulletActiveClass:`${o}-bullet-active`,modifierClass:`${o}-`,currentClass:`${o}-current`,totalClass:`${o}-total`,hiddenClass:`${o}-hidden`,progressbarFillClass:`${o}-progressbar-fill`,progressbarOppositeClass:`${o}-progressbar-opposite`,clickableClass:`${o}-clickable`,lockClass:`${o}-lock`,horizontalClass:`${o}-horizontal`,verticalClass:`${o}-vertical`,paginationDisabledClass:`${o}-disabled`}}),t.pagination={el:null,bullets:[]};let c=0;function p(){return!t.params.pagination.el||!t.pagination.el||Array.isArray(t.pagination.el)&&0===t.pagination.el.length}function u(e,s){const{bulletActiveClass:i}=t.params.pagination;e&&(e=e[("prev"===s?"previous":"next")+"ElementSibling"])&&(e.classList.add(`${i}-${s}`),(e=e[("prev"===s?"previous":"next")+"ElementSibling"])&&e.classList.add(`${i}-${s}-${s}`))}function m(e){const s=e.target.closest(l(t.params.pagination.bulletClass));if(!s)return;e.preventDefault();const i=(0,a.h)(s)*t.params.slidesPerGroup;if(t.params.loop){if(t.realIndex===i)return;t.slideToLoop(i)}else t.slideTo(i)}function f(){const e=t.rtl,s=t.params.pagination;if(p())return;let i,r,o=t.pagination.el;o=(0,a.m)(o);const m=t.virtual&&t.params.virtual.enabled?t.virtual.slides.length:t.slides.length,f=t.params.loop?Math.ceil(m/t.params.slidesPerGroup):t.snapGrid.length;if(t.params.loop?(r=t.previousRealIndex||0,i=t.params.slidesPerGroup>1?Math.floor(t.realIndex/t.params.slidesPerGroup):t.realIndex):void 0!==t.snapIndex?(i=t.snapIndex,r=t.previousSnapIndex):(r=t.previousIndex||0,i=t.activeIndex||0),"bullets"===s.type&&t.pagination.bullets&&t.pagination.bullets.length>0){const n=t.pagination.bullets;let l,p,m;if(s.dynamicBullets&&(d=(0,a.f)(n[0],t.isHorizontal()?"width":"height",!0),o.forEach((e=>{e.style[t.isHorizontal()?"width":"height"]=d*(s.dynamicMainBullets+4)+"px"})),s.dynamicMainBullets>1&&void 0!==r&&(c+=i-(r||0),c>s.dynamicMainBullets-1?c=s.dynamicMainBullets-1:c<0&&(c=0)),l=Math.max(i-c,0),p=l+(Math.min(n.length,s.dynamicMainBullets)-1),m=(p+l)/2),n.forEach((e=>{const t=[...["","-next","-next-next","-prev","-prev-prev","-main"].map((e=>`${s.bulletActiveClass}${e}`))].map((e=>"string"==typeof e&&e.includes(" ")?e.split(" "):e)).flat();e.classList.remove(...t)})),o.length>1)n.forEach((e=>{const r=(0,a.h)(e);r===i?e.classList.add(...s.bulletActiveClass.split(" ")):t.isElement&&e.setAttribute("part","bullet"),s.dynamicBullets&&(r>=l&&r<=p&&e.classList.add(...`${s.bulletActiveClass}-main`.split(" ")),r===l&&u(e,"prev"),r===p&&u(e,"next"))}));else{const e=n[i];if(e&&e.classList.add(...s.bulletActiveClass.split(" ")),t.isElement&&n.forEach(((e,t)=>{e.setAttribute("part",t===i?"bullet-active":"bullet")})),s.dynamicBullets){const e=n[l],t=n[p];for(let e=l;e<=p;e+=1)n[e]&&n[e].classList.add(...`${s.bulletActiveClass}-main`.split(" "));u(e,"prev"),u(t,"next")}}if(s.dynamicBullets){const i=Math.min(n.length,s.dynamicMainBullets+4),a=(d*i-d)/2-m*d,r=e?"right":"left";n.forEach((e=>{e.style[t.isHorizontal()?r:"top"]=`${a}px`}))}}o.forEach(((e,a)=>{if("fraction"===s.type&&(e.querySelectorAll(l(s.currentClass)).forEach((e=>{e.textContent=s.formatFractionCurrent(i+1)})),e.querySelectorAll(l(s.totalClass)).forEach((e=>{e.textContent=s.formatFractionTotal(f)}))),"progressbar"===s.type){let a;a=s.progressbarOpposite?t.isHorizontal()?"vertical":"horizontal":t.isHorizontal()?"horizontal":"vertical";const r=(i+1)/f;let n=1,o=1;"horizontal"===a?n=r:o=r,e.querySelectorAll(l(s.progressbarFillClass)).forEach((e=>{e.style.transform=`translate3d(0,0,0) scaleX(${n}) scaleY(${o})`,e.style.transitionDuration=`${t.params.speed}ms`}))}"custom"===s.type&&s.renderCustom?(e.innerHTML=s.renderCustom(t,i+1,f),0===a&&n("paginationRender",e)):(0===a&&n("paginationRender",e),n("paginationUpdate",e)),t.params.watchOverflow&&t.enabled&&e.classList[t.isLocked?"add":"remove"](s.lockClass)}))}function h(){const e=t.params.pagination;if(p())return;const s=t.virtual&&t.params.virtual.enabled?t.virtual.slides.length:t.grid&&t.params.grid.rows>1?t.slides.length/Math.ceil(t.params.grid.rows):t.slides.length;let i=t.pagination.el;i=(0,a.m)(i);let r="";if("bullets"===e.type){let i=t.params.loop?Math.ceil(s/t.params.slidesPerGroup):t.snapGrid.length;t.params.freeMode&&t.params.freeMode.enabled&&i>s&&(i=s);for(let s=0;s<i;s+=1)e.renderBullet?r+=e.renderBullet.call(t,s,e.bulletClass):r+=`<${e.bulletElement} ${t.isElement?'part="bullet"':""} class="${e.bulletClass}"></${e.bulletElement}>`}"fraction"===e.type&&(r=e.renderFraction?e.renderFraction.call(t,e.currentClass,e.totalClass):`<span class="${e.currentClass}"></span> / <span class="${e.totalClass}"></span>`),"progressbar"===e.type&&(r=e.renderProgressbar?e.renderProgressbar.call(t,e.progressbarFillClass):`<span class="${e.progressbarFillClass}"></span>`),t.pagination.bullets=[],i.forEach((s=>{"custom"!==e.type&&(s.innerHTML=r||""),"bullets"===e.type&&t.pagination.bullets.push(...s.querySelectorAll(l(e.bulletClass)))})),"custom"!==e.type&&n("paginationRender",i[0])}function g(){t.params.pagination=r(t,t.originalParams.pagination,t.params.pagination,{el:"swiper-pagination"});const e=t.params.pagination;if(!e.el)return;let s;"string"==typeof e.el&&t.isElement&&(s=t.el.querySelector(e.el)),s||"string"!=typeof e.el||(s=[...document.querySelectorAll(e.el)]),s||(s=e.el),s&&0!==s.length&&(t.params.uniqueNavElements&&"string"==typeof e.el&&Array.isArray(s)&&s.length>1&&(s=[...t.el.querySelectorAll(e.el)],s.length>1&&(s=s.filter((e=>(0,a.a)(e,".swiper")[0]===t.el))[0])),Array.isArray(s)&&1===s.length&&(s=s[0]),Object.assign(t.pagination,{el:s}),s=(0,a.m)(s),s.forEach((s=>{"bullets"===e.type&&e.clickable&&s.classList.add(...(e.clickableClass||"").split(" ")),s.classList.add(e.modifierClass+e.type),s.classList.add(t.isHorizontal()?e.horizontalClass:e.verticalClass),"bullets"===e.type&&e.dynamicBullets&&(s.classList.add(`${e.modifierClass}${e.type}-dynamic`),c=0,e.dynamicMainBullets<1&&(e.dynamicMainBullets=1)),"progressbar"===e.type&&e.progressbarOpposite&&s.classList.add(e.progressbarOppositeClass),e.clickable&&s.addEventListener("click",m),t.enabled||s.classList.add(e.lockClass)})))}function v(){const e=t.params.pagination;if(p())return;let s=t.pagination.el;s&&(s=(0,a.m)(s),s.forEach((s=>{s.classList.remove(e.hiddenClass),s.classList.remove(e.modifierClass+e.type),s.classList.remove(t.isHorizontal()?e.horizontalClass:e.verticalClass),e.clickable&&(s.classList.remove(...(e.clickableClass||"").split(" ")),s.removeEventListener("click",m))}))),t.pagination.bullets&&t.pagination.bullets.forEach((t=>t.classList.remove(...e.bulletActiveClass.split(" "))))}i("changeDirection",(()=>{if(!t.pagination||!t.pagination.el)return;const e=t.params.pagination;let{el:s}=t.pagination;s=(0,a.m)(s),s.forEach((s=>{s.classList.remove(e.horizontalClass,e.verticalClass),s.classList.add(t.isHorizontal()?e.horizontalClass:e.verticalClass)}))})),i("init",(()=>{!1===t.params.pagination.enabled?w():(g(),h(),f())})),i("activeIndexChange",(()=>{void 0===t.snapIndex&&f()})),i("snapIndexChange",(()=>{f()})),i("snapGridLengthChange",(()=>{h(),f()})),i("destroy",(()=>{v()})),i("enable disable",(()=>{let{el:e}=t.pagination;e&&(e=(0,a.m)(e),e.forEach((e=>e.classList[t.enabled?"remove":"add"](t.params.pagination.lockClass))))})),i("lock unlock",(()=>{f()})),i("click",((e,s)=>{const i=s.target,r=(0,a.m)(t.pagination.el);if(t.params.pagination.el&&t.params.pagination.hideOnClick&&r&&r.length>0&&!i.classList.contains(t.params.pagination.bulletClass)){if(t.navigation&&(t.navigation.nextEl&&i===t.navigation.nextEl||t.navigation.prevEl&&i===t.navigation.prevEl))return;const e=r[0].classList.contains(t.params.pagination.hiddenClass);n(!0===e?"paginationShow":"paginationHide"),r.forEach((e=>e.classList.toggle(t.params.pagination.hiddenClass)))}}));const w=()=>{t.el.classList.add(t.params.pagination.paginationDisabledClass);let{el:e}=t.pagination;e&&(e=(0,a.m)(e),e.forEach((e=>e.classList.add(t.params.pagination.paginationDisabledClass)))),v()};Object.assign(t.pagination,{enable:()=>{t.el.classList.remove(t.params.pagination.paginationDisabledClass);let{el:e}=t.pagination;e&&(e=(0,a.m)(e),e.forEach((e=>e.classList.remove(t.params.pagination.paginationDisabledClass)))),g(),h(),f()},disable:w,render:h,update:f,init:g,destroy:v})}function d(e){let t,s,{swiper:a,extendParams:r,on:n,emit:l,params:o}=e;a.autoplay={running:!1,paused:!1,timeLeft:0},r({autoplay:{enabled:!1,delay:3e3,waitForTransition:!0,disableOnInteraction:!1,stopOnLastSlide:!1,reverseDirection:!1,pauseOnMouseEnter:!1}});let d,c,p,u,m,f,h,g,v=o&&o.autoplay?o.autoplay.delay:3e3,w=o&&o.autoplay?o.autoplay.delay:3e3,b=(new Date).getTime();function y(e){a&&!a.destroyed&&a.wrapperEl&&e.target===a.wrapperEl&&(a.wrapperEl.removeEventListener("transitionend",y),g||e.detail&&e.detail.bySwiperTouchMove||M())}const T=()=>{if(a.destroyed||!a.autoplay.running)return;a.autoplay.paused?c=!0:c&&(w=d,c=!1);const e=a.autoplay.paused?d:b+w-(new Date).getTime();a.autoplay.timeLeft=e,l("autoplayTimeLeft",e,e/v),s=requestAnimationFrame((()=>{T()}))},S=e=>{if(a.destroyed||!a.autoplay.running)return;cancelAnimationFrame(s),T();let i=void 0===e?a.params.autoplay.delay:e;v=a.params.autoplay.delay,w=a.params.autoplay.delay;const r=(()=>{let e;if(e=a.virtual&&a.params.virtual.enabled?a.slides.filter((e=>e.classList.contains("swiper-slide-active")))[0]:a.slides[a.activeIndex],!e)return;return parseInt(e.getAttribute("data-swiper-autoplay"),10)})();!Number.isNaN(r)&&r>0&&void 0===e&&(i=r,v=r,w=r),d=i;const n=a.params.speed,o=()=>{a&&!a.destroyed&&(a.params.autoplay.reverseDirection?!a.isBeginning||a.params.loop||a.params.rewind?(a.slidePrev(n,!0,!0),l("autoplay")):a.params.autoplay.stopOnLastSlide||(a.slideTo(a.slides.length-1,n,!0,!0),l("autoplay")):!a.isEnd||a.params.loop||a.params.rewind?(a.slideNext(n,!0,!0),l("autoplay")):a.params.autoplay.stopOnLastSlide||(a.slideTo(0,n,!0,!0),l("autoplay")),a.params.cssMode&&(b=(new Date).getTime(),requestAnimationFrame((()=>{S()}))))};return i>0?(clearTimeout(t),t=setTimeout((()=>{o()}),i)):requestAnimationFrame((()=>{o()})),i},E=()=>{b=(new Date).getTime(),a.autoplay.running=!0,S(),l("autoplayStart")},x=()=>{a.autoplay.running=!1,clearTimeout(t),cancelAnimationFrame(s),l("autoplayStop")},C=(e,s)=>{if(a.destroyed||!a.autoplay.running)return;clearTimeout(t),e||(h=!0);const i=()=>{l("autoplayPause"),a.params.autoplay.waitForTransition?a.wrapperEl.addEventListener("transitionend",y):M()};if(a.autoplay.paused=!0,s)return f&&(d=a.params.autoplay.delay),f=!1,void i();const r=d||a.params.autoplay.delay;d=r-((new Date).getTime()-b),a.isEnd&&d<0&&!a.params.loop||(d<0&&(d=0),i())},M=()=>{a.isEnd&&d<0&&!a.params.loop||a.destroyed||!a.autoplay.running||(b=(new Date).getTime(),h?(h=!1,S(d)):S(),a.autoplay.paused=!1,l("autoplayResume"))},P=()=>{if(a.destroyed||!a.autoplay.running)return;const e=(0,i.g)();"hidden"===e.visibilityState&&(h=!0,C(!0)),"visible"===e.visibilityState&&M()},L=e=>{"mouse"===e.pointerType&&(h=!0,g=!0,a.animating||a.autoplay.paused||C(!0))},k=e=>{"mouse"===e.pointerType&&(g=!1,a.autoplay.paused&&M())};n("init",(()=>{a.params.autoplay.enabled&&(a.params.autoplay.pauseOnMouseEnter&&(a.el.addEventListener("pointerenter",L),a.el.addEventListener("pointerleave",k)),(0,i.g)().addEventListener("visibilitychange",P),E())})),n("destroy",(()=>{a.el&&"string"!=typeof a.el&&(a.el.removeEventListener("pointerenter",L),a.el.removeEventListener("pointerleave",k)),(0,i.g)().removeEventListener("visibilitychange",P),a.autoplay.running&&x()})),n("_freeModeStaticRelease",(()=>{(u||h)&&M()})),n("_freeModeNoMomentumRelease",(()=>{a.params.autoplay.disableOnInteraction?x():C(!0,!0)})),n("beforeTransitionStart",((e,t,s)=>{!a.destroyed&&a.autoplay.running&&(s||!a.params.autoplay.disableOnInteraction?C(!0,!0):x())})),n("sliderFirstMove",(()=>{!a.destroyed&&a.autoplay.running&&(a.params.autoplay.disableOnInteraction?x():(p=!0,u=!1,h=!1,m=setTimeout((()=>{h=!0,u=!0,C(!0)}),200)))})),n("touchEnd",(()=>{if(!a.destroyed&&a.autoplay.running&&p){if(clearTimeout(m),clearTimeout(t),a.params.autoplay.disableOnInteraction)return u=!1,void(p=!1);u&&a.params.cssMode&&M(),u=!1,p=!1}})),n("slideChange",(()=>{!a.destroyed&&a.autoplay.running&&(f=!0)})),Object.assign(a.autoplay,{start:E,stop:x,pause:C,resume:M})}},433:(e,t,s)=>{function i(e){return null!==e&&"object"==typeof e&&"constructor"in e&&e.constructor===Object}function a(e,t){void 0===e&&(e={}),void 0===t&&(t={}),Object.keys(t).forEach((s=>{void 0===e[s]?e[s]=t[s]:i(t[s])&&i(e[s])&&Object.keys(t[s]).length>0&&a(e[s],t[s])}))}s.d(t,{a:()=>o,g:()=>n});const r={body:{},addEventListener(){},removeEventListener(){},activeElement:{blur(){},nodeName:""},querySelector:()=>null,querySelectorAll:()=>[],getElementById:()=>null,createEvent:()=>({initEvent(){}}),createElement:()=>({children:[],childNodes:[],style:{},setAttribute(){},getElementsByTagName:()=>[]}),createElementNS:()=>({}),importNode:()=>null,location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};function n(){const e="undefined"!=typeof document?document:{};return a(e,r),e}const l={document:r,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState(){},pushState(){},go(){},back(){}},CustomEvent:function(){return this},addEventListener(){},removeEventListener(){},getComputedStyle:()=>({getPropertyValue:()=>""}),Image(){},Date(){},screen:{},setTimeout(){},clearTimeout(){},matchMedia:()=>({}),requestAnimationFrame:e=>"undefined"==typeof setTimeout?(e(),null):setTimeout(e,0),cancelAnimationFrame(e){"undefined"!=typeof setTimeout&&clearTimeout(e)}};function o(){const e="undefined"!=typeof window?window:{};return a(e,l),e}},185:(e,t,s)=>{s.d(t,{a:()=>b,c:()=>f,d:()=>n,e:()=>u,f:()=>y,h:()=>w,j:()=>l,m:()=>T,n:()=>r,o:()=>v,p:()=>g,q:()=>h,r:()=>p,s:()=>c,t:()=>m,u:()=>d,v:()=>a});var i=s(433);function a(e){const t=e;Object.keys(t).forEach((e=>{try{t[e]=null}catch(e){}try{delete t[e]}catch(e){}}))}function r(e,t){return void 0===t&&(t=0),setTimeout(e,t)}function n(){return Date.now()}function l(e,t){void 0===t&&(t="x");const s=(0,i.a)();let a,r,n;const l=function(e){const t=(0,i.a)();let s;return t.getComputedStyle&&(s=t.getComputedStyle(e,null)),!s&&e.currentStyle&&(s=e.currentStyle),s||(s=e.style),s}(e);return s.WebKitCSSMatrix?(r=l.transform||l.webkitTransform,r.split(",").length>6&&(r=r.split(", ").map((e=>e.replace(",","."))).join(", ")),n=new s.WebKitCSSMatrix("none"===r?"":r)):(n=l.MozTransform||l.OTransform||l.MsTransform||l.msTransform||l.transform||l.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,"),a=n.toString().split(",")),"x"===t&&(r=s.WebKitCSSMatrix?n.m41:16===a.length?parseFloat(a[12]):parseFloat(a[4])),"y"===t&&(r=s.WebKitCSSMatrix?n.m42:16===a.length?parseFloat(a[13]):parseFloat(a[5])),r||0}function o(e){return"object"==typeof e&&null!==e&&e.constructor&&"Object"===Object.prototype.toString.call(e).slice(8,-1)}function d(){const e=Object(arguments.length<=0?void 0:arguments[0]),t=["__proto__","constructor","prototype"];for(let i=1;i<arguments.length;i+=1){const a=i<0||arguments.length<=i?void 0:arguments[i];if(null!=a&&(s=a,!("undefined"!=typeof window&&void 0!==window.HTMLElement?s instanceof HTMLElement:s&&(1===s.nodeType||11===s.nodeType)))){const s=Object.keys(Object(a)).filter((e=>t.indexOf(e)<0));for(let t=0,i=s.length;t<i;t+=1){const i=s[t],r=Object.getOwnPropertyDescriptor(a,i);void 0!==r&&r.enumerable&&(o(e[i])&&o(a[i])?a[i].__swiper__?e[i]=a[i]:d(e[i],a[i]):!o(e[i])&&o(a[i])?(e[i]={},a[i].__swiper__?e[i]=a[i]:d(e[i],a[i])):e[i]=a[i])}}}var s;return e}function c(e,t,s){e.style.setProperty(t,s)}function p(e){let{swiper:t,targetPosition:s,side:a}=e;const r=(0,i.a)(),n=-t.translate;let l,o=null;const d=t.params.speed;t.wrapperEl.style.scrollSnapType="none",r.cancelAnimationFrame(t.cssModeFrameID);const c=s>n?"next":"prev",p=(e,t)=>"next"===c&&e>=t||"prev"===c&&e<=t,u=()=>{l=(new Date).getTime(),null===o&&(o=l);const e=Math.max(Math.min((l-o)/d,1),0),i=.5-Math.cos(e*Math.PI)/2;let c=n+i*(s-n);if(p(c,s)&&(c=s),t.wrapperEl.scrollTo({[a]:c}),p(c,s))return t.wrapperEl.style.overflow="hidden",t.wrapperEl.style.scrollSnapType="",setTimeout((()=>{t.wrapperEl.style.overflow="",t.wrapperEl.scrollTo({[a]:c})})),void r.cancelAnimationFrame(t.cssModeFrameID);t.cssModeFrameID=r.requestAnimationFrame(u)};u()}function u(e,t){return void 0===t&&(t=""),[...e.children].filter((e=>e.matches(t)))}function m(e){try{return void console.warn(e)}catch(e){}}function f(e,t){void 0===t&&(t=[]);const s=document.createElement(e);return s.classList.add(...Array.isArray(t)?t:function(e){return void 0===e&&(e=""),e.trim().split(" ").filter((e=>!!e.trim()))}(t)),s}function h(e,t){const s=[];for(;e.previousElementSibling;){const i=e.previousElementSibling;t?i.matches(t)&&s.push(i):s.push(i),e=i}return s}function g(e,t){const s=[];for(;e.nextElementSibling;){const i=e.nextElementSibling;t?i.matches(t)&&s.push(i):s.push(i),e=i}return s}function v(e,t){return(0,i.a)().getComputedStyle(e,null).getPropertyValue(t)}function w(e){let t,s=e;if(s){for(t=0;null!==(s=s.previousSibling);)1===s.nodeType&&(t+=1);return t}}function b(e,t){const s=[];let i=e.parentElement;for(;i;)t?i.matches(t)&&s.push(i):s.push(i),i=i.parentElement;return s}function y(e,t,s){const a=(0,i.a)();return s?e["width"===t?"offsetWidth":"offsetHeight"]+parseFloat(a.getComputedStyle(e,null).getPropertyValue("width"===t?"margin-right":"margin-top"))+parseFloat(a.getComputedStyle(e,null).getPropertyValue("width"===t?"margin-left":"margin-bottom")):e.offsetWidth}function T(e){return(Array.isArray(e)?e:[e]).filter((e=>!!e))}},652:(e,t,s)=>{s.d(t,{Z:()=>$});var i=s(433),a=s(185);let r,n,l;function o(){return r||(r=function(){const e=(0,i.a)(),t=(0,i.g)();return{smoothScroll:t.documentElement&&t.documentElement.style&&"scrollBehavior"in t.documentElement.style,touch:!!("ontouchstart"in e||e.DocumentTouch&&t instanceof e.DocumentTouch)}}()),r}function d(e){return void 0===e&&(e={}),n||(n=function(e){let{userAgent:t}=void 0===e?{}:e;const s=o(),a=(0,i.a)(),r=a.navigator.platform,n=t||a.navigator.userAgent,l={ios:!1,android:!1},d=a.screen.width,c=a.screen.height,p=n.match(/(Android);?[\s\/]+([\d.]+)?/);let u=n.match(/(iPad).*OS\s([\d_]+)/);const m=n.match(/(iPod)(.*OS\s([\d_]+))?/),f=!u&&n.match(/(iPhone\sOS|iOS)\s([\d_]+)/),h="Win32"===r;let g="MacIntel"===r;return!u&&g&&s.touch&&["1024x1366","1366x1024","834x1194","1194x834","834x1112","1112x834","768x1024","1024x768","820x1180","1180x820","810x1080","1080x810"].indexOf(`${d}x${c}`)>=0&&(u=n.match(/(Version)\/([\d.]+)/),u||(u=[0,1,"13_0_0"]),g=!1),p&&!h&&(l.os="android",l.android=!0),(u||f||m)&&(l.os="ios",l.ios=!0),l}(e)),n}function c(){return l||(l=function(){const e=(0,i.a)(),t=d();let s=!1;function a(){const t=e.navigator.userAgent.toLowerCase();return t.indexOf("safari")>=0&&t.indexOf("chrome")<0&&t.indexOf("android")<0}if(a()){const t=String(e.navigator.userAgent);if(t.includes("Version/")){const[e,i]=t.split("Version/")[1].split(" ")[0].split(".").map((e=>Number(e)));s=e<16||16===e&&i<2}}const r=/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(e.navigator.userAgent),n=a();return{isSafari:s||n,needPerspectiveFix:s,need3dFix:n||r&&t.ios,isWebView:r}}()),l}var p={on(e,t,s){const i=this;if(!i.eventsListeners||i.destroyed)return i;if("function"!=typeof t)return i;const a=s?"unshift":"push";return e.split(" ").forEach((e=>{i.eventsListeners[e]||(i.eventsListeners[e]=[]),i.eventsListeners[e][a](t)})),i},once(e,t,s){const i=this;if(!i.eventsListeners||i.destroyed)return i;if("function"!=typeof t)return i;function a(){i.off(e,a),a.__emitterProxy&&delete a.__emitterProxy;for(var s=arguments.length,r=new Array(s),n=0;n<s;n++)r[n]=arguments[n];t.apply(i,r)}return a.__emitterProxy=t,i.on(e,a,s)},onAny(e,t){const s=this;if(!s.eventsListeners||s.destroyed)return s;if("function"!=typeof e)return s;const i=t?"unshift":"push";return s.eventsAnyListeners.indexOf(e)<0&&s.eventsAnyListeners[i](e),s},offAny(e){const t=this;if(!t.eventsListeners||t.destroyed)return t;if(!t.eventsAnyListeners)return t;const s=t.eventsAnyListeners.indexOf(e);return s>=0&&t.eventsAnyListeners.splice(s,1),t},off(e,t){const s=this;return!s.eventsListeners||s.destroyed?s:s.eventsListeners?(e.split(" ").forEach((e=>{void 0===t?s.eventsListeners[e]=[]:s.eventsListeners[e]&&s.eventsListeners[e].forEach(((i,a)=>{(i===t||i.__emitterProxy&&i.__emitterProxy===t)&&s.eventsListeners[e].splice(a,1)}))})),s):s},emit(){const e=this;if(!e.eventsListeners||e.destroyed)return e;if(!e.eventsListeners)return e;let t,s,i;for(var a=arguments.length,r=new Array(a),n=0;n<a;n++)r[n]=arguments[n];"string"==typeof r[0]||Array.isArray(r[0])?(t=r[0],s=r.slice(1,r.length),i=e):(t=r[0].events,s=r[0].data,i=r[0].context||e),s.unshift(i);return(Array.isArray(t)?t:t.split(" ")).forEach((t=>{e.eventsAnyListeners&&e.eventsAnyListeners.length&&e.eventsAnyListeners.forEach((e=>{e.apply(i,[t,...s])})),e.eventsListeners&&e.eventsListeners[t]&&e.eventsListeners[t].forEach((e=>{e.apply(i,s)}))})),e}};const u=(e,t,s)=>{t&&!e.classList.contains(s)?e.classList.add(s):!t&&e.classList.contains(s)&&e.classList.remove(s)};const m=(e,t,s)=>{t&&!e.classList.contains(s)?e.classList.add(s):!t&&e.classList.contains(s)&&e.classList.remove(s)};const f=(e,t)=>{if(!e||e.destroyed||!e.params)return;const s=t.closest(e.isElement?"swiper-slide":`.${e.params.slideClass}`);if(s){let t=s.querySelector(`.${e.params.lazyPreloaderClass}`);!t&&e.isElement&&(s.shadowRoot?t=s.shadowRoot.querySelector(`.${e.params.lazyPreloaderClass}`):requestAnimationFrame((()=>{s.shadowRoot&&(t=s.shadowRoot.querySelector(`.${e.params.lazyPreloaderClass}`),t&&t.remove())}))),t&&t.remove()}},h=(e,t)=>{if(!e.slides[t])return;const s=e.slides[t].querySelector('[loading="lazy"]');s&&s.removeAttribute("loading")},g=e=>{if(!e||e.destroyed||!e.params)return;let t=e.params.lazyPreloadPrevNext;const s=e.slides.length;if(!s||!t||t<0)return;t=Math.min(t,s);const i="auto"===e.params.slidesPerView?e.slidesPerViewDynamic():Math.ceil(e.params.slidesPerView),a=e.activeIndex;if(e.params.grid&&e.params.grid.rows>1){const s=a,r=[s-t];return r.push(...Array.from({length:t}).map(((e,t)=>s+i+t))),void e.slides.forEach(((t,s)=>{r.includes(t.column)&&h(e,s)}))}const r=a+i-1;if(e.params.rewind||e.params.loop)for(let i=a-t;i<=r+t;i+=1){const t=(i%s+s)%s;(t<a||t>r)&&h(e,t)}else for(let i=Math.max(a-t,0);i<=Math.min(r+t,s-1);i+=1)i!==a&&(i>r||i<a)&&h(e,i)};var v={updateSize:function(){const e=this;let t,s;const i=e.el;t=void 0!==e.params.width&&null!==e.params.width?e.params.width:i.clientWidth,s=void 0!==e.params.height&&null!==e.params.height?e.params.height:i.clientHeight,0===t&&e.isHorizontal()||0===s&&e.isVertical()||(t=t-parseInt((0,a.o)(i,"padding-left")||0,10)-parseInt((0,a.o)(i,"padding-right")||0,10),s=s-parseInt((0,a.o)(i,"padding-top")||0,10)-parseInt((0,a.o)(i,"padding-bottom")||0,10),Number.isNaN(t)&&(t=0),Number.isNaN(s)&&(s=0),Object.assign(e,{width:t,height:s,size:e.isHorizontal()?t:s}))},updateSlides:function(){const e=this;function t(t,s){return parseFloat(t.getPropertyValue(e.getDirectionLabel(s))||0)}const s=e.params,{wrapperEl:i,slidesEl:r,size:n,rtlTranslate:l,wrongRTL:o}=e,d=e.virtual&&s.virtual.enabled,c=d?e.virtual.slides.length:e.slides.length,p=(0,a.e)(r,`.${e.params.slideClass}, swiper-slide`),u=d?e.virtual.slides.length:p.length;let m=[];const f=[],h=[];let g=s.slidesOffsetBefore;"function"==typeof g&&(g=s.slidesOffsetBefore.call(e));let v=s.slidesOffsetAfter;"function"==typeof v&&(v=s.slidesOffsetAfter.call(e));const w=e.snapGrid.length,b=e.slidesGrid.length;let y=s.spaceBetween,T=-g,S=0,E=0;if(void 0===n)return;"string"==typeof y&&y.indexOf("%")>=0?y=parseFloat(y.replace("%",""))/100*n:"string"==typeof y&&(y=parseFloat(y)),e.virtualSize=-y,p.forEach((e=>{l?e.style.marginLeft="":e.style.marginRight="",e.style.marginBottom="",e.style.marginTop=""})),s.centeredSlides&&s.cssMode&&((0,a.s)(i,"--swiper-centered-offset-before",""),(0,a.s)(i,"--swiper-centered-offset-after",""));const x=s.grid&&s.grid.rows>1&&e.grid;let C;x?e.grid.initSlides(p):e.grid&&e.grid.unsetSlides();const M="auto"===s.slidesPerView&&s.breakpoints&&Object.keys(s.breakpoints).filter((e=>void 0!==s.breakpoints[e].slidesPerView)).length>0;for(let i=0;i<u;i+=1){let r;if(C=0,p[i]&&(r=p[i]),x&&e.grid.updateSlide(i,r,p),!p[i]||"none"!==(0,a.o)(r,"display")){if("auto"===s.slidesPerView){M&&(p[i].style[e.getDirectionLabel("width")]="");const n=getComputedStyle(r),l=r.style.transform,o=r.style.webkitTransform;if(l&&(r.style.transform="none"),o&&(r.style.webkitTransform="none"),s.roundLengths)C=e.isHorizontal()?(0,a.f)(r,"width",!0):(0,a.f)(r,"height",!0);else{const e=t(n,"width"),s=t(n,"padding-left"),i=t(n,"padding-right"),a=t(n,"margin-left"),l=t(n,"margin-right"),o=n.getPropertyValue("box-sizing");if(o&&"border-box"===o)C=e+a+l;else{const{clientWidth:t,offsetWidth:n}=r;C=e+s+i+a+l+(n-t)}}l&&(r.style.transform=l),o&&(r.style.webkitTransform=o),s.roundLengths&&(C=Math.floor(C))}else C=(n-(s.slidesPerView-1)*y)/s.slidesPerView,s.roundLengths&&(C=Math.floor(C)),p[i]&&(p[i].style[e.getDirectionLabel("width")]=`${C}px`);p[i]&&(p[i].swiperSlideSize=C),h.push(C),s.centeredSlides?(T=T+C/2+S/2+y,0===S&&0!==i&&(T=T-n/2-y),0===i&&(T=T-n/2-y),Math.abs(T)<.001&&(T=0),s.roundLengths&&(T=Math.floor(T)),E%s.slidesPerGroup==0&&m.push(T),f.push(T)):(s.roundLengths&&(T=Math.floor(T)),(E-Math.min(e.params.slidesPerGroupSkip,E))%e.params.slidesPerGroup==0&&m.push(T),f.push(T),T=T+C+y),e.virtualSize+=C+y,S=C,E+=1}}if(e.virtualSize=Math.max(e.virtualSize,n)+v,l&&o&&("slide"===s.effect||"coverflow"===s.effect)&&(i.style.width=`${e.virtualSize+y}px`),s.setWrapperSize&&(i.style[e.getDirectionLabel("width")]=`${e.virtualSize+y}px`),x&&e.grid.updateWrapperSize(C,m),!s.centeredSlides){const t=[];for(let i=0;i<m.length;i+=1){let a=m[i];s.roundLengths&&(a=Math.floor(a)),m[i]<=e.virtualSize-n&&t.push(a)}m=t,Math.floor(e.virtualSize-n)-Math.floor(m[m.length-1])>1&&m.push(e.virtualSize-n)}if(d&&s.loop){const t=h[0]+y;if(s.slidesPerGroup>1){const i=Math.ceil((e.virtual.slidesBefore+e.virtual.slidesAfter)/s.slidesPerGroup),a=t*s.slidesPerGroup;for(let e=0;e<i;e+=1)m.push(m[m.length-1]+a)}for(let i=0;i<e.virtual.slidesBefore+e.virtual.slidesAfter;i+=1)1===s.slidesPerGroup&&m.push(m[m.length-1]+t),f.push(f[f.length-1]+t),e.virtualSize+=t}if(0===m.length&&(m=[0]),0!==y){const t=e.isHorizontal()&&l?"marginLeft":e.getDirectionLabel("marginRight");p.filter(((e,t)=>!(s.cssMode&&!s.loop)||t!==p.length-1)).forEach((e=>{e.style[t]=`${y}px`}))}if(s.centeredSlides&&s.centeredSlidesBounds){let e=0;h.forEach((t=>{e+=t+(y||0)})),e-=y;const t=e-n;m=m.map((e=>e<=0?-g:e>t?t+v:e))}if(s.centerInsufficientSlides){let e=0;h.forEach((t=>{e+=t+(y||0)})),e-=y;const t=(s.slidesOffsetBefore||0)+(s.slidesOffsetAfter||0);if(e+t<n){const s=(n-e-t)/2;m.forEach(((e,t)=>{m[t]=e-s})),f.forEach(((e,t)=>{f[t]=e+s}))}}if(Object.assign(e,{slides:p,snapGrid:m,slidesGrid:f,slidesSizesGrid:h}),s.centeredSlides&&s.cssMode&&!s.centeredSlidesBounds){(0,a.s)(i,"--swiper-centered-offset-before",-m[0]+"px"),(0,a.s)(i,"--swiper-centered-offset-after",e.size/2-h[h.length-1]/2+"px");const t=-e.snapGrid[0],s=-e.slidesGrid[0];e.snapGrid=e.snapGrid.map((e=>e+t)),e.slidesGrid=e.slidesGrid.map((e=>e+s))}if(u!==c&&e.emit("slidesLengthChange"),m.length!==w&&(e.params.watchOverflow&&e.checkOverflow(),e.emit("snapGridLengthChange")),f.length!==b&&e.emit("slidesGridLengthChange"),s.watchSlidesProgress&&e.updateSlidesOffset(),e.emit("slidesUpdated"),!(d||s.cssMode||"slide"!==s.effect&&"fade"!==s.effect)){const t=`${s.containerModifierClass}backface-hidden`,i=e.el.classList.contains(t);u<=s.maxBackfaceHiddenSlides?i||e.el.classList.add(t):i&&e.el.classList.remove(t)}},updateAutoHeight:function(e){const t=this,s=[],i=t.virtual&&t.params.virtual.enabled;let a,r=0;"number"==typeof e?t.setTransition(e):!0===e&&t.setTransition(t.params.speed);const n=e=>i?t.slides[t.getSlideIndexByData(e)]:t.slides[e];if("auto"!==t.params.slidesPerView&&t.params.slidesPerView>1)if(t.params.centeredSlides)(t.visibleSlides||[]).forEach((e=>{s.push(e)}));else for(a=0;a<Math.ceil(t.params.slidesPerView);a+=1){const e=t.activeIndex+a;if(e>t.slides.length&&!i)break;s.push(n(e))}else s.push(n(t.activeIndex));for(a=0;a<s.length;a+=1)if(void 0!==s[a]){const e=s[a].offsetHeight;r=e>r?e:r}(r||0===r)&&(t.wrapperEl.style.height=`${r}px`)},updateSlidesOffset:function(){const e=this,t=e.slides,s=e.isElement?e.isHorizontal()?e.wrapperEl.offsetLeft:e.wrapperEl.offsetTop:0;for(let i=0;i<t.length;i+=1)t[i].swiperSlideOffset=(e.isHorizontal()?t[i].offsetLeft:t[i].offsetTop)-s-e.cssOverflowAdjustment()},updateSlidesProgress:function(e){void 0===e&&(e=this&&this.translate||0);const t=this,s=t.params,{slides:i,rtlTranslate:a,snapGrid:r}=t;if(0===i.length)return;void 0===i[0].swiperSlideOffset&&t.updateSlidesOffset();let n=-e;a&&(n=e),t.visibleSlidesIndexes=[],t.visibleSlides=[];let l=s.spaceBetween;"string"==typeof l&&l.indexOf("%")>=0?l=parseFloat(l.replace("%",""))/100*t.size:"string"==typeof l&&(l=parseFloat(l));for(let e=0;e<i.length;e+=1){const o=i[e];let d=o.swiperSlideOffset;s.cssMode&&s.centeredSlides&&(d-=i[0].swiperSlideOffset);const c=(n+(s.centeredSlides?t.minTranslate():0)-d)/(o.swiperSlideSize+l),p=(n-r[0]+(s.centeredSlides?t.minTranslate():0)-d)/(o.swiperSlideSize+l),m=-(n-d),f=m+t.slidesSizesGrid[e],h=m>=0&&m<=t.size-t.slidesSizesGrid[e],g=m>=0&&m<t.size-1||f>1&&f<=t.size||m<=0&&f>=t.size;g&&(t.visibleSlides.push(o),t.visibleSlidesIndexes.push(e)),u(o,g,s.slideVisibleClass),u(o,h,s.slideFullyVisibleClass),o.progress=a?-c:c,o.originalProgress=a?-p:p}},updateProgress:function(e){const t=this;if(void 0===e){const s=t.rtlTranslate?-1:1;e=t&&t.translate&&t.translate*s||0}const s=t.params,i=t.maxTranslate()-t.minTranslate();let{progress:a,isBeginning:r,isEnd:n,progressLoop:l}=t;const o=r,d=n;if(0===i)a=0,r=!0,n=!0;else{a=(e-t.minTranslate())/i;const s=Math.abs(e-t.minTranslate())<1,l=Math.abs(e-t.maxTranslate())<1;r=s||a<=0,n=l||a>=1,s&&(a=0),l&&(a=1)}if(s.loop){const s=t.getSlideIndexByData(0),i=t.getSlideIndexByData(t.slides.length-1),a=t.slidesGrid[s],r=t.slidesGrid[i],n=t.slidesGrid[t.slidesGrid.length-1],o=Math.abs(e);l=o>=a?(o-a)/n:(o+n-r)/n,l>1&&(l-=1)}Object.assign(t,{progress:a,progressLoop:l,isBeginning:r,isEnd:n}),(s.watchSlidesProgress||s.centeredSlides&&s.autoHeight)&&t.updateSlidesProgress(e),r&&!o&&t.emit("reachBeginning toEdge"),n&&!d&&t.emit("reachEnd toEdge"),(o&&!r||d&&!n)&&t.emit("fromEdge"),t.emit("progress",a)},updateSlidesClasses:function(){const e=this,{slides:t,params:s,slidesEl:i,activeIndex:r}=e,n=e.virtual&&s.virtual.enabled,l=e.grid&&s.grid&&s.grid.rows>1,o=e=>(0,a.e)(i,`.${s.slideClass}${e}, swiper-slide${e}`)[0];let d,c,p;if(n)if(s.loop){let t=r-e.virtual.slidesBefore;t<0&&(t=e.virtual.slides.length+t),t>=e.virtual.slides.length&&(t-=e.virtual.slides.length),d=o(`[data-swiper-slide-index="${t}"]`)}else d=o(`[data-swiper-slide-index="${r}"]`);else l?(d=t.filter((e=>e.column===r))[0],p=t.filter((e=>e.column===r+1))[0],c=t.filter((e=>e.column===r-1))[0]):d=t[r];d&&(l||(p=(0,a.p)(d,`.${s.slideClass}, swiper-slide`)[0],s.loop&&!p&&(p=t[0]),c=(0,a.q)(d,`.${s.slideClass}, swiper-slide`)[0],s.loop&&0===!c&&(c=t[t.length-1]))),t.forEach((e=>{m(e,e===d,s.slideActiveClass),m(e,e===p,s.slideNextClass),m(e,e===c,s.slidePrevClass)})),e.emitSlidesClasses()},updateActiveIndex:function(e){const t=this,s=t.rtlTranslate?t.translate:-t.translate,{snapGrid:i,params:a,activeIndex:r,realIndex:n,snapIndex:l}=t;let o,d=e;const c=e=>{let s=e-t.virtual.slidesBefore;return s<0&&(s=t.virtual.slides.length+s),s>=t.virtual.slides.length&&(s-=t.virtual.slides.length),s};if(void 0===d&&(d=function(e){const{slidesGrid:t,params:s}=e,i=e.rtlTranslate?e.translate:-e.translate;let a;for(let e=0;e<t.length;e+=1)void 0!==t[e+1]?i>=t[e]&&i<t[e+1]-(t[e+1]-t[e])/2?a=e:i>=t[e]&&i<t[e+1]&&(a=e+1):i>=t[e]&&(a=e);return s.normalizeSlideIndex&&(a<0||void 0===a)&&(a=0),a}(t)),i.indexOf(s)>=0)o=i.indexOf(s);else{const e=Math.min(a.slidesPerGroupSkip,d);o=e+Math.floor((d-e)/a.slidesPerGroup)}if(o>=i.length&&(o=i.length-1),d===r&&!t.params.loop)return void(o!==l&&(t.snapIndex=o,t.emit("snapIndexChange")));if(d===r&&t.params.loop&&t.virtual&&t.params.virtual.enabled)return void(t.realIndex=c(d));const p=t.grid&&a.grid&&a.grid.rows>1;let u;if(t.virtual&&a.virtual.enabled&&a.loop)u=c(d);else if(p){const e=t.slides.filter((e=>e.column===d))[0];let s=parseInt(e.getAttribute("data-swiper-slide-index"),10);Number.isNaN(s)&&(s=Math.max(t.slides.indexOf(e),0)),u=Math.floor(s/a.grid.rows)}else if(t.slides[d]){const e=t.slides[d].getAttribute("data-swiper-slide-index");u=e?parseInt(e,10):d}else u=d;Object.assign(t,{previousSnapIndex:l,snapIndex:o,previousRealIndex:n,realIndex:u,previousIndex:r,activeIndex:d}),t.initialized&&g(t),t.emit("activeIndexChange"),t.emit("snapIndexChange"),(t.initialized||t.params.runCallbacksOnInit)&&(n!==u&&t.emit("realIndexChange"),t.emit("slideChange"))},updateClickedSlide:function(e,t){const s=this,i=s.params;let a=e.closest(`.${i.slideClass}, swiper-slide`);!a&&s.isElement&&t&&t.length>1&&t.includes(e)&&[...t.slice(t.indexOf(e)+1,t.length)].forEach((e=>{!a&&e.matches&&e.matches(`.${i.slideClass}, swiper-slide`)&&(a=e)}));let r,n=!1;if(a)for(let e=0;e<s.slides.length;e+=1)if(s.slides[e]===a){n=!0,r=e;break}if(!a||!n)return s.clickedSlide=void 0,void(s.clickedIndex=void 0);s.clickedSlide=a,s.virtual&&s.params.virtual.enabled?s.clickedIndex=parseInt(a.getAttribute("data-swiper-slide-index"),10):s.clickedIndex=r,i.slideToClickedSlide&&void 0!==s.clickedIndex&&s.clickedIndex!==s.activeIndex&&s.slideToClickedSlide()}};var w={getTranslate:function(e){void 0===e&&(e=this.isHorizontal()?"x":"y");const{params:t,rtlTranslate:s,translate:i,wrapperEl:r}=this;if(t.virtualTranslate)return s?-i:i;if(t.cssMode)return i;let n=(0,a.j)(r,e);return n+=this.cssOverflowAdjustment(),s&&(n=-n),n||0},setTranslate:function(e,t){const s=this,{rtlTranslate:i,params:a,wrapperEl:r,progress:n}=s;let l,o=0,d=0;s.isHorizontal()?o=i?-e:e:d=e,a.roundLengths&&(o=Math.floor(o),d=Math.floor(d)),s.previousTranslate=s.translate,s.translate=s.isHorizontal()?o:d,a.cssMode?r[s.isHorizontal()?"scrollLeft":"scrollTop"]=s.isHorizontal()?-o:-d:a.virtualTranslate||(s.isHorizontal()?o-=s.cssOverflowAdjustment():d-=s.cssOverflowAdjustment(),r.style.transform=`translate3d(${o}px, ${d}px, 0px)`);const c=s.maxTranslate()-s.minTranslate();l=0===c?0:(e-s.minTranslate())/c,l!==n&&s.updateProgress(e),s.emit("setTranslate",s.translate,t)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]},translateTo:function(e,t,s,i,r){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===s&&(s=!0),void 0===i&&(i=!0);const n=this,{params:l,wrapperEl:o}=n;if(n.animating&&l.preventInteractionOnTransition)return!1;const d=n.minTranslate(),c=n.maxTranslate();let p;if(p=i&&e>d?d:i&&e<c?c:e,n.updateProgress(p),l.cssMode){const e=n.isHorizontal();if(0===t)o[e?"scrollLeft":"scrollTop"]=-p;else{if(!n.support.smoothScroll)return(0,a.r)({swiper:n,targetPosition:-p,side:e?"left":"top"}),!0;o.scrollTo({[e?"left":"top"]:-p,behavior:"smooth"})}return!0}return 0===t?(n.setTransition(0),n.setTranslate(p),s&&(n.emit("beforeTransitionStart",t,r),n.emit("transitionEnd"))):(n.setTransition(t),n.setTranslate(p),s&&(n.emit("beforeTransitionStart",t,r),n.emit("transitionStart")),n.animating||(n.animating=!0,n.onTranslateToWrapperTransitionEnd||(n.onTranslateToWrapperTransitionEnd=function(e){n&&!n.destroyed&&e.target===this&&(n.wrapperEl.removeEventListener("transitionend",n.onTranslateToWrapperTransitionEnd),n.onTranslateToWrapperTransitionEnd=null,delete n.onTranslateToWrapperTransitionEnd,n.animating=!1,s&&n.emit("transitionEnd"))}),n.wrapperEl.addEventListener("transitionend",n.onTranslateToWrapperTransitionEnd))),!0}};function b(e){let{swiper:t,runCallbacks:s,direction:i,step:a}=e;const{activeIndex:r,previousIndex:n}=t;let l=i;if(l||(l=r>n?"next":r<n?"prev":"reset"),t.emit(`transition${a}`),s&&r!==n){if("reset"===l)return void t.emit(`slideResetTransition${a}`);t.emit(`slideChangeTransition${a}`),"next"===l?t.emit(`slideNextTransition${a}`):t.emit(`slidePrevTransition${a}`)}}var y={slideTo:function(e,t,s,i,r){void 0===e&&(e=0),void 0===s&&(s=!0),"string"==typeof e&&(e=parseInt(e,10));const n=this;let l=e;l<0&&(l=0);const{params:o,snapGrid:d,slidesGrid:c,previousIndex:p,activeIndex:u,rtlTranslate:m,wrapperEl:f,enabled:h}=n;if(!h&&!i&&!r||n.destroyed||n.animating&&o.preventInteractionOnTransition)return!1;void 0===t&&(t=n.params.speed);const g=Math.min(n.params.slidesPerGroupSkip,l);let v=g+Math.floor((l-g)/n.params.slidesPerGroup);v>=d.length&&(v=d.length-1);const w=-d[v];if(o.normalizeSlideIndex)for(let e=0;e<c.length;e+=1){const t=-Math.floor(100*w),s=Math.floor(100*c[e]),i=Math.floor(100*c[e+1]);void 0!==c[e+1]?t>=s&&t<i-(i-s)/2?l=e:t>=s&&t<i&&(l=e+1):t>=s&&(l=e)}if(n.initialized&&l!==u){if(!n.allowSlideNext&&(m?w>n.translate&&w>n.minTranslate():w<n.translate&&w<n.minTranslate()))return!1;if(!n.allowSlidePrev&&w>n.translate&&w>n.maxTranslate()&&(u||0)!==l)return!1}let b;if(l!==(p||0)&&s&&n.emit("beforeSlideChangeStart"),n.updateProgress(w),b=l>u?"next":l<u?"prev":"reset",m&&-w===n.translate||!m&&w===n.translate)return n.updateActiveIndex(l),o.autoHeight&&n.updateAutoHeight(),n.updateSlidesClasses(),"slide"!==o.effect&&n.setTranslate(w),"reset"!==b&&(n.transitionStart(s,b),n.transitionEnd(s,b)),!1;if(o.cssMode){const e=n.isHorizontal(),s=m?w:-w;if(0===t){const t=n.virtual&&n.params.virtual.enabled;t&&(n.wrapperEl.style.scrollSnapType="none",n._immediateVirtual=!0),t&&!n._cssModeVirtualInitialSet&&n.params.initialSlide>0?(n._cssModeVirtualInitialSet=!0,requestAnimationFrame((()=>{f[e?"scrollLeft":"scrollTop"]=s}))):f[e?"scrollLeft":"scrollTop"]=s,t&&requestAnimationFrame((()=>{n.wrapperEl.style.scrollSnapType="",n._immediateVirtual=!1}))}else{if(!n.support.smoothScroll)return(0,a.r)({swiper:n,targetPosition:s,side:e?"left":"top"}),!0;f.scrollTo({[e?"left":"top"]:s,behavior:"smooth"})}return!0}return n.setTransition(t),n.setTranslate(w),n.updateActiveIndex(l),n.updateSlidesClasses(),n.emit("beforeTransitionStart",t,i),n.transitionStart(s,b),0===t?n.transitionEnd(s,b):n.animating||(n.animating=!0,n.onSlideToWrapperTransitionEnd||(n.onSlideToWrapperTransitionEnd=function(e){n&&!n.destroyed&&e.target===this&&(n.wrapperEl.removeEventListener("transitionend",n.onSlideToWrapperTransitionEnd),n.onSlideToWrapperTransitionEnd=null,delete n.onSlideToWrapperTransitionEnd,n.transitionEnd(s,b))}),n.wrapperEl.addEventListener("transitionend",n.onSlideToWrapperTransitionEnd)),!0},slideToLoop:function(e,t,s,i){if(void 0===e&&(e=0),void 0===s&&(s=!0),"string"==typeof e){e=parseInt(e,10)}const a=this;if(a.destroyed)return;void 0===t&&(t=a.params.speed);const r=a.grid&&a.params.grid&&a.params.grid.rows>1;let n=e;if(a.params.loop)if(a.virtual&&a.params.virtual.enabled)n+=a.virtual.slidesBefore;else{let e;if(r){const t=n*a.params.grid.rows;e=a.slides.filter((e=>1*e.getAttribute("data-swiper-slide-index")===t))[0].column}else e=a.getSlideIndexByData(n);const t=r?Math.ceil(a.slides.length/a.params.grid.rows):a.slides.length,{centeredSlides:s}=a.params;let l=a.params.slidesPerView;"auto"===l?l=a.slidesPerViewDynamic():(l=Math.ceil(parseFloat(a.params.slidesPerView,10)),s&&l%2==0&&(l+=1));let o=t-e<l;if(s&&(o=o||e<Math.ceil(l/2)),i&&s&&"auto"!==a.params.slidesPerView&&!r&&(o=!1),o){const i=s?e<a.activeIndex?"prev":"next":e-a.activeIndex-1<a.params.slidesPerView?"next":"prev";a.loopFix({direction:i,slideTo:!0,activeSlideIndex:"next"===i?e+1:e-t+1,slideRealIndex:"next"===i?a.realIndex:void 0})}if(r){const e=n*a.params.grid.rows;n=a.slides.filter((t=>1*t.getAttribute("data-swiper-slide-index")===e))[0].column}else n=a.getSlideIndexByData(n)}return requestAnimationFrame((()=>{a.slideTo(n,t,s,i)})),a},slideNext:function(e,t,s){void 0===t&&(t=!0);const i=this,{enabled:a,params:r,animating:n}=i;if(!a||i.destroyed)return i;void 0===e&&(e=i.params.speed);let l=r.slidesPerGroup;"auto"===r.slidesPerView&&1===r.slidesPerGroup&&r.slidesPerGroupAuto&&(l=Math.max(i.slidesPerViewDynamic("current",!0),1));const o=i.activeIndex<r.slidesPerGroupSkip?1:l,d=i.virtual&&r.virtual.enabled;if(r.loop){if(n&&!d&&r.loopPreventsSliding)return!1;if(i.loopFix({direction:"next"}),i._clientLeft=i.wrapperEl.clientLeft,i.activeIndex===i.slides.length-1&&r.cssMode)return requestAnimationFrame((()=>{i.slideTo(i.activeIndex+o,e,t,s)})),!0}return r.rewind&&i.isEnd?i.slideTo(0,e,t,s):i.slideTo(i.activeIndex+o,e,t,s)},slidePrev:function(e,t,s){void 0===t&&(t=!0);const i=this,{params:a,snapGrid:r,slidesGrid:n,rtlTranslate:l,enabled:o,animating:d}=i;if(!o||i.destroyed)return i;void 0===e&&(e=i.params.speed);const c=i.virtual&&a.virtual.enabled;if(a.loop){if(d&&!c&&a.loopPreventsSliding)return!1;i.loopFix({direction:"prev"}),i._clientLeft=i.wrapperEl.clientLeft}function p(e){return e<0?-Math.floor(Math.abs(e)):Math.floor(e)}const u=p(l?i.translate:-i.translate),m=r.map((e=>p(e)));let f=r[m.indexOf(u)-1];if(void 0===f&&a.cssMode){let e;r.forEach(((t,s)=>{u>=t&&(e=s)})),void 0!==e&&(f=r[e>0?e-1:e])}let h=0;if(void 0!==f&&(h=n.indexOf(f),h<0&&(h=i.activeIndex-1),"auto"===a.slidesPerView&&1===a.slidesPerGroup&&a.slidesPerGroupAuto&&(h=h-i.slidesPerViewDynamic("previous",!0)+1,h=Math.max(h,0))),a.rewind&&i.isBeginning){const a=i.params.virtual&&i.params.virtual.enabled&&i.virtual?i.virtual.slides.length-1:i.slides.length-1;return i.slideTo(a,e,t,s)}return a.loop&&0===i.activeIndex&&a.cssMode?(requestAnimationFrame((()=>{i.slideTo(h,e,t,s)})),!0):i.slideTo(h,e,t,s)},slideReset:function(e,t,s){void 0===t&&(t=!0);const i=this;if(!i.destroyed)return void 0===e&&(e=i.params.speed),i.slideTo(i.activeIndex,e,t,s)},slideToClosest:function(e,t,s,i){void 0===t&&(t=!0),void 0===i&&(i=.5);const a=this;if(a.destroyed)return;void 0===e&&(e=a.params.speed);let r=a.activeIndex;const n=Math.min(a.params.slidesPerGroupSkip,r),l=n+Math.floor((r-n)/a.params.slidesPerGroup),o=a.rtlTranslate?a.translate:-a.translate;if(o>=a.snapGrid[l]){const e=a.snapGrid[l];o-e>(a.snapGrid[l+1]-e)*i&&(r+=a.params.slidesPerGroup)}else{const e=a.snapGrid[l-1];o-e<=(a.snapGrid[l]-e)*i&&(r-=a.params.slidesPerGroup)}return r=Math.max(r,0),r=Math.min(r,a.slidesGrid.length-1),a.slideTo(r,e,t,s)},slideToClickedSlide:function(){const e=this;if(e.destroyed)return;const{params:t,slidesEl:s}=e,i="auto"===t.slidesPerView?e.slidesPerViewDynamic():t.slidesPerView;let r,n=e.clickedIndex;const l=e.isElement?"swiper-slide":`.${t.slideClass}`;if(t.loop){if(e.animating)return;r=parseInt(e.clickedSlide.getAttribute("data-swiper-slide-index"),10),t.centeredSlides?n<e.loopedSlides-i/2||n>e.slides.length-e.loopedSlides+i/2?(e.loopFix(),n=e.getSlideIndex((0,a.e)(s,`${l}[data-swiper-slide-index="${r}"]`)[0]),(0,a.n)((()=>{e.slideTo(n)}))):e.slideTo(n):n>e.slides.length-i?(e.loopFix(),n=e.getSlideIndex((0,a.e)(s,`${l}[data-swiper-slide-index="${r}"]`)[0]),(0,a.n)((()=>{e.slideTo(n)}))):e.slideTo(n)}else e.slideTo(n)}};var T={loopCreate:function(e){const t=this,{params:s,slidesEl:i}=t;if(!s.loop||t.virtual&&t.params.virtual.enabled)return;const r=()=>{(0,a.e)(i,`.${s.slideClass}, swiper-slide`).forEach(((e,t)=>{e.setAttribute("data-swiper-slide-index",t)}))},n=t.grid&&s.grid&&s.grid.rows>1,l=s.slidesPerGroup*(n?s.grid.rows:1),o=t.slides.length%l!=0,d=n&&t.slides.length%s.grid.rows!=0,c=e=>{for(let i=0;i<e;i+=1){const e=t.isElement?(0,a.c)("swiper-slide",[s.slideBlankClass]):(0,a.c)("div",[s.slideClass,s.slideBlankClass]);t.slidesEl.append(e)}};if(o){if(s.loopAddBlankSlides){c(l-t.slides.length%l),t.recalcSlides(),t.updateSlides()}else(0,a.t)("Swiper Loop Warning: The number of slides is not even to slidesPerGroup, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)");r()}else if(d){if(s.loopAddBlankSlides){c(s.grid.rows-t.slides.length%s.grid.rows),t.recalcSlides(),t.updateSlides()}else(0,a.t)("Swiper Loop Warning: The number of slides is not even to grid.rows, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)");r()}else r();t.loopFix({slideRealIndex:e,direction:s.centeredSlides?void 0:"next"})},loopFix:function(e){let{slideRealIndex:t,slideTo:s=!0,direction:i,setTranslate:r,activeSlideIndex:n,byController:l,byMousewheel:o}=void 0===e?{}:e;const d=this;if(!d.params.loop)return;d.emit("beforeLoopFix");const{slides:c,allowSlidePrev:p,allowSlideNext:u,slidesEl:m,params:f}=d,{centeredSlides:h}=f;if(d.allowSlidePrev=!0,d.allowSlideNext=!0,d.virtual&&f.virtual.enabled)return s&&(f.centeredSlides||0!==d.snapIndex?f.centeredSlides&&d.snapIndex<f.slidesPerView?d.slideTo(d.virtual.slides.length+d.snapIndex,0,!1,!0):d.snapIndex===d.snapGrid.length-1&&d.slideTo(d.virtual.slidesBefore,0,!1,!0):d.slideTo(d.virtual.slides.length,0,!1,!0)),d.allowSlidePrev=p,d.allowSlideNext=u,void d.emit("loopFix");let g=f.slidesPerView;"auto"===g?g=d.slidesPerViewDynamic():(g=Math.ceil(parseFloat(f.slidesPerView,10)),h&&g%2==0&&(g+=1));const v=f.slidesPerGroupAuto?g:f.slidesPerGroup;let w=v;w%v!=0&&(w+=v-w%v),w+=f.loopAdditionalSlides,d.loopedSlides=w;const b=d.grid&&f.grid&&f.grid.rows>1;c.length<g+w?(0,a.t)("Swiper Loop Warning: The number of slides is not enough for loop mode, it will be disabled and not function properly. You need to add more slides (or make duplicates) or lower the values of slidesPerView and slidesPerGroup parameters"):b&&"row"===f.grid.fill&&(0,a.t)("Swiper Loop Warning: Loop mode is not compatible with grid.fill = `row`");const y=[],T=[];let S=d.activeIndex;void 0===n?n=d.getSlideIndex(c.filter((e=>e.classList.contains(f.slideActiveClass)))[0]):S=n;const E="next"===i||!i,x="prev"===i||!i;let C=0,M=0;const P=b?Math.ceil(c.length/f.grid.rows):c.length,L=(b?c[n].column:n)+(h&&void 0===r?-g/2+.5:0);if(L<w){C=Math.max(w-L,v);for(let e=0;e<w-L;e+=1){const t=e-Math.floor(e/P)*P;if(b){const e=P-t-1;for(let t=c.length-1;t>=0;t-=1)c[t].column===e&&y.push(t)}else y.push(P-t-1)}}else if(L+g>P-w){M=Math.max(L-(P-2*w),v);for(let e=0;e<M;e+=1){const t=e-Math.floor(e/P)*P;b?c.forEach(((e,s)=>{e.column===t&&T.push(s)})):T.push(t)}}if(d.__preventObserver__=!0,requestAnimationFrame((()=>{d.__preventObserver__=!1})),x&&y.forEach((e=>{c[e].swiperLoopMoveDOM=!0,m.prepend(c[e]),c[e].swiperLoopMoveDOM=!1})),E&&T.forEach((e=>{c[e].swiperLoopMoveDOM=!0,m.append(c[e]),c[e].swiperLoopMoveDOM=!1})),d.recalcSlides(),"auto"===f.slidesPerView?d.updateSlides():b&&(y.length>0&&x||T.length>0&&E)&&d.slides.forEach(((e,t)=>{d.grid.updateSlide(t,e,d.slides)})),f.watchSlidesProgress&&d.updateSlidesOffset(),s)if(y.length>0&&x){if(void 0===t){const e=d.slidesGrid[S],t=d.slidesGrid[S+C]-e;o?d.setTranslate(d.translate-t):(d.slideTo(S+Math.ceil(C),0,!1,!0),r&&(d.touchEventsData.startTranslate=d.touchEventsData.startTranslate-t,d.touchEventsData.currentTranslate=d.touchEventsData.currentTranslate-t))}else if(r){const e=b?y.length/f.grid.rows:y.length;d.slideTo(d.activeIndex+e,0,!1,!0),d.touchEventsData.currentTranslate=d.translate}}else if(T.length>0&&E)if(void 0===t){const e=d.slidesGrid[S],t=d.slidesGrid[S-M]-e;o?d.setTranslate(d.translate-t):(d.slideTo(S-M,0,!1,!0),r&&(d.touchEventsData.startTranslate=d.touchEventsData.startTranslate-t,d.touchEventsData.currentTranslate=d.touchEventsData.currentTranslate-t))}else{const e=b?T.length/f.grid.rows:T.length;d.slideTo(d.activeIndex-e,0,!1,!0)}if(d.allowSlidePrev=p,d.allowSlideNext=u,d.controller&&d.controller.control&&!l){const e={slideRealIndex:t,direction:i,setTranslate:r,activeSlideIndex:n,byController:!0};Array.isArray(d.controller.control)?d.controller.control.forEach((t=>{!t.destroyed&&t.params.loop&&t.loopFix({...e,slideTo:t.params.slidesPerView===f.slidesPerView&&s})})):d.controller.control instanceof d.constructor&&d.controller.control.params.loop&&d.controller.control.loopFix({...e,slideTo:d.controller.control.params.slidesPerView===f.slidesPerView&&s})}d.emit("loopFix")},loopDestroy:function(){const e=this,{params:t,slidesEl:s}=e;if(!t.loop||e.virtual&&e.params.virtual.enabled)return;e.recalcSlides();const i=[];e.slides.forEach((e=>{const t=void 0===e.swiperSlideIndex?1*e.getAttribute("data-swiper-slide-index"):e.swiperSlideIndex;i[t]=e})),e.slides.forEach((e=>{e.removeAttribute("data-swiper-slide-index")})),i.forEach((e=>{s.append(e)})),e.recalcSlides(),e.slideTo(e.realIndex,0)}};function S(e,t,s){const a=(0,i.a)(),{params:r}=e,n=r.edgeSwipeDetection,l=r.edgeSwipeThreshold;return!n||!(s<=l||s>=a.innerWidth-l)||"prevent"===n&&(t.preventDefault(),!0)}function E(e){const t=this,s=(0,i.g)();let r=e;r.originalEvent&&(r=r.originalEvent);const n=t.touchEventsData;if("pointerdown"===r.type){if(null!==n.pointerId&&n.pointerId!==r.pointerId)return;n.pointerId=r.pointerId}else"touchstart"===r.type&&1===r.targetTouches.length&&(n.touchId=r.targetTouches[0].identifier);if("touchstart"===r.type)return void S(t,r,r.targetTouches[0].pageX);const{params:l,touches:o,enabled:d}=t;if(!d)return;if(!l.simulateTouch&&"mouse"===r.pointerType)return;if(t.animating&&l.preventInteractionOnTransition)return;!t.animating&&l.cssMode&&l.loop&&t.loopFix();let c=r.target;if("wrapper"===l.touchEventsTarget&&!t.wrapperEl.contains(c))return;if("which"in r&&3===r.which)return;if("button"in r&&r.button>0)return;if(n.isTouched&&n.isMoved)return;const p=!!l.noSwipingClass&&""!==l.noSwipingClass,u=r.composedPath?r.composedPath():r.path;p&&r.target&&r.target.shadowRoot&&u&&(c=u[0]);const m=l.noSwipingSelector?l.noSwipingSelector:`.${l.noSwipingClass}`,f=!(!r.target||!r.target.shadowRoot);if(l.noSwiping&&(f?function(e,t){return void 0===t&&(t=this),function t(s){if(!s||s===(0,i.g)()||s===(0,i.a)())return null;s.assignedSlot&&(s=s.assignedSlot);const a=s.closest(e);return a||s.getRootNode?a||t(s.getRootNode().host):null}(t)}(m,c):c.closest(m)))return void(t.allowClick=!0);if(l.swipeHandler&&!c.closest(l.swipeHandler))return;o.currentX=r.pageX,o.currentY=r.pageY;const h=o.currentX,g=o.currentY;if(!S(t,r,h))return;Object.assign(n,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),o.startX=h,o.startY=g,n.touchStartTime=(0,a.d)(),t.allowClick=!0,t.updateSize(),t.swipeDirection=void 0,l.threshold>0&&(n.allowThresholdMove=!1);let v=!0;c.matches(n.focusableElements)&&(v=!1,"SELECT"===c.nodeName&&(n.isTouched=!1)),s.activeElement&&s.activeElement.matches(n.focusableElements)&&s.activeElement!==c&&s.activeElement.blur();const w=v&&t.allowTouchMove&&l.touchStartPreventDefault;!l.touchStartForcePreventDefault&&!w||c.isContentEditable||r.preventDefault(),l.freeMode&&l.freeMode.enabled&&t.freeMode&&t.animating&&!l.cssMode&&t.freeMode.onTouchStart(),t.emit("touchStart",r)}function x(e){const t=(0,i.g)(),s=this,r=s.touchEventsData,{params:n,touches:l,rtlTranslate:o,enabled:d}=s;if(!d)return;if(!n.simulateTouch&&"mouse"===e.pointerType)return;let c,p=e;if(p.originalEvent&&(p=p.originalEvent),"pointermove"===p.type){if(null!==r.touchId)return;if(p.pointerId!==r.pointerId)return}if("touchmove"===p.type){if(c=[...p.changedTouches].filter((e=>e.identifier===r.touchId))[0],!c||c.identifier!==r.touchId)return}else c=p;if(!r.isTouched)return void(r.startMoving&&r.isScrolling&&s.emit("touchMoveOpposite",p));const u=c.pageX,m=c.pageY;if(p.preventedByNestedSwiper)return l.startX=u,void(l.startY=m);if(!s.allowTouchMove)return p.target.matches(r.focusableElements)||(s.allowClick=!1),void(r.isTouched&&(Object.assign(l,{startX:u,startY:m,currentX:u,currentY:m}),r.touchStartTime=(0,a.d)()));if(n.touchReleaseOnEdges&&!n.loop)if(s.isVertical()){if(m<l.startY&&s.translate<=s.maxTranslate()||m>l.startY&&s.translate>=s.minTranslate())return r.isTouched=!1,void(r.isMoved=!1)}else if(u<l.startX&&s.translate<=s.maxTranslate()||u>l.startX&&s.translate>=s.minTranslate())return;if(t.activeElement&&p.target===t.activeElement&&p.target.matches(r.focusableElements))return r.isMoved=!0,void(s.allowClick=!1);r.allowTouchCallbacks&&s.emit("touchMove",p),l.previousX=l.currentX,l.previousY=l.currentY,l.currentX=u,l.currentY=m;const f=l.currentX-l.startX,h=l.currentY-l.startY;if(s.params.threshold&&Math.sqrt(f**2+h**2)<s.params.threshold)return;if(void 0===r.isScrolling){let e;s.isHorizontal()&&l.currentY===l.startY||s.isVertical()&&l.currentX===l.startX?r.isScrolling=!1:f*f+h*h>=25&&(e=180*Math.atan2(Math.abs(h),Math.abs(f))/Math.PI,r.isScrolling=s.isHorizontal()?e>n.touchAngle:90-e>n.touchAngle)}if(r.isScrolling&&s.emit("touchMoveOpposite",p),void 0===r.startMoving&&(l.currentX===l.startX&&l.currentY===l.startY||(r.startMoving=!0)),r.isScrolling||"touchmove"===p.type&&r.preventTouchMoveFromPointerMove)return void(r.isTouched=!1);if(!r.startMoving)return;s.allowClick=!1,!n.cssMode&&p.cancelable&&p.preventDefault(),n.touchMoveStopPropagation&&!n.nested&&p.stopPropagation();let g=s.isHorizontal()?f:h,v=s.isHorizontal()?l.currentX-l.previousX:l.currentY-l.previousY;n.oneWayMovement&&(g=Math.abs(g)*(o?1:-1),v=Math.abs(v)*(o?1:-1)),l.diff=g,g*=n.touchRatio,o&&(g=-g,v=-v);const w=s.touchesDirection;s.swipeDirection=g>0?"prev":"next",s.touchesDirection=v>0?"prev":"next";const b=s.params.loop&&!n.cssMode,y="next"===s.touchesDirection&&s.allowSlideNext||"prev"===s.touchesDirection&&s.allowSlidePrev;if(!r.isMoved){if(b&&y&&s.loopFix({direction:s.swipeDirection}),r.startTranslate=s.getTranslate(),s.setTransition(0),s.animating){const e=new window.CustomEvent("transitionend",{bubbles:!0,cancelable:!0,detail:{bySwiperTouchMove:!0}});s.wrapperEl.dispatchEvent(e)}r.allowMomentumBounce=!1,!n.grabCursor||!0!==s.allowSlideNext&&!0!==s.allowSlidePrev||s.setGrabCursor(!0),s.emit("sliderFirstMove",p)}if((new Date).getTime(),r.isMoved&&r.allowThresholdMove&&w!==s.touchesDirection&&b&&y&&Math.abs(g)>=1)return Object.assign(l,{startX:u,startY:m,currentX:u,currentY:m,startTranslate:r.currentTranslate}),r.loopSwapReset=!0,void(r.startTranslate=r.currentTranslate);s.emit("sliderMove",p),r.isMoved=!0,r.currentTranslate=g+r.startTranslate;let T=!0,S=n.resistanceRatio;if(n.touchReleaseOnEdges&&(S=0),g>0?(b&&y&&r.allowThresholdMove&&r.currentTranslate>(n.centeredSlides?s.minTranslate()-s.slidesSizesGrid[s.activeIndex+1]:s.minTranslate())&&s.loopFix({direction:"prev",setTranslate:!0,activeSlideIndex:0}),r.currentTranslate>s.minTranslate()&&(T=!1,n.resistance&&(r.currentTranslate=s.minTranslate()-1+(-s.minTranslate()+r.startTranslate+g)**S))):g<0&&(b&&y&&r.allowThresholdMove&&r.currentTranslate<(n.centeredSlides?s.maxTranslate()+s.slidesSizesGrid[s.slidesSizesGrid.length-1]:s.maxTranslate())&&s.loopFix({direction:"next",setTranslate:!0,activeSlideIndex:s.slides.length-("auto"===n.slidesPerView?s.slidesPerViewDynamic():Math.ceil(parseFloat(n.slidesPerView,10)))}),r.currentTranslate<s.maxTranslate()&&(T=!1,n.resistance&&(r.currentTranslate=s.maxTranslate()+1-(s.maxTranslate()-r.startTranslate-g)**S))),T&&(p.preventedByNestedSwiper=!0),!s.allowSlideNext&&"next"===s.swipeDirection&&r.currentTranslate<r.startTranslate&&(r.currentTranslate=r.startTranslate),!s.allowSlidePrev&&"prev"===s.swipeDirection&&r.currentTranslate>r.startTranslate&&(r.currentTranslate=r.startTranslate),s.allowSlidePrev||s.allowSlideNext||(r.currentTranslate=r.startTranslate),n.threshold>0){if(!(Math.abs(g)>n.threshold||r.allowThresholdMove))return void(r.currentTranslate=r.startTranslate);if(!r.allowThresholdMove)return r.allowThresholdMove=!0,l.startX=l.currentX,l.startY=l.currentY,r.currentTranslate=r.startTranslate,void(l.diff=s.isHorizontal()?l.currentX-l.startX:l.currentY-l.startY)}n.followFinger&&!n.cssMode&&((n.freeMode&&n.freeMode.enabled&&s.freeMode||n.watchSlidesProgress)&&(s.updateActiveIndex(),s.updateSlidesClasses()),n.freeMode&&n.freeMode.enabled&&s.freeMode&&s.freeMode.onTouchMove(),s.updateProgress(r.currentTranslate),s.setTranslate(r.currentTranslate))}function C(e){const t=this,s=t.touchEventsData;let i,r=e;r.originalEvent&&(r=r.originalEvent);if("touchend"===r.type||"touchcancel"===r.type){if(i=[...r.changedTouches].filter((e=>e.identifier===s.touchId))[0],!i||i.identifier!==s.touchId)return}else{if(null!==s.touchId)return;if(r.pointerId!==s.pointerId)return;i=r}if(["pointercancel","pointerout","pointerleave","contextmenu"].includes(r.type)){if(!(["pointercancel","contextmenu"].includes(r.type)&&(t.browser.isSafari||t.browser.isWebView)))return}s.pointerId=null,s.touchId=null;const{params:n,touches:l,rtlTranslate:o,slidesGrid:d,enabled:c}=t;if(!c)return;if(!n.simulateTouch&&"mouse"===r.pointerType)return;if(s.allowTouchCallbacks&&t.emit("touchEnd",r),s.allowTouchCallbacks=!1,!s.isTouched)return s.isMoved&&n.grabCursor&&t.setGrabCursor(!1),s.isMoved=!1,void(s.startMoving=!1);n.grabCursor&&s.isMoved&&s.isTouched&&(!0===t.allowSlideNext||!0===t.allowSlidePrev)&&t.setGrabCursor(!1);const p=(0,a.d)(),u=p-s.touchStartTime;if(t.allowClick){const e=r.path||r.composedPath&&r.composedPath();t.updateClickedSlide(e&&e[0]||r.target,e),t.emit("tap click",r),u<300&&p-s.lastClickTime<300&&t.emit("doubleTap doubleClick",r)}if(s.lastClickTime=(0,a.d)(),(0,a.n)((()=>{t.destroyed||(t.allowClick=!0)})),!s.isTouched||!s.isMoved||!t.swipeDirection||0===l.diff&&!s.loopSwapReset||s.currentTranslate===s.startTranslate&&!s.loopSwapReset)return s.isTouched=!1,s.isMoved=!1,void(s.startMoving=!1);let m;if(s.isTouched=!1,s.isMoved=!1,s.startMoving=!1,m=n.followFinger?o?t.translate:-t.translate:-s.currentTranslate,n.cssMode)return;if(n.freeMode&&n.freeMode.enabled)return void t.freeMode.onTouchEnd({currentPos:m});const f=m>=-t.maxTranslate()&&!t.params.loop;let h=0,g=t.slidesSizesGrid[0];for(let e=0;e<d.length;e+=e<n.slidesPerGroupSkip?1:n.slidesPerGroup){const t=e<n.slidesPerGroupSkip-1?1:n.slidesPerGroup;void 0!==d[e+t]?(f||m>=d[e]&&m<d[e+t])&&(h=e,g=d[e+t]-d[e]):(f||m>=d[e])&&(h=e,g=d[d.length-1]-d[d.length-2])}let v=null,w=null;n.rewind&&(t.isBeginning?w=n.virtual&&n.virtual.enabled&&t.virtual?t.virtual.slides.length-1:t.slides.length-1:t.isEnd&&(v=0));const b=(m-d[h])/g,y=h<n.slidesPerGroupSkip-1?1:n.slidesPerGroup;if(u>n.longSwipesMs){if(!n.longSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&(b>=n.longSwipesRatio?t.slideTo(n.rewind&&t.isEnd?v:h+y):t.slideTo(h)),"prev"===t.swipeDirection&&(b>1-n.longSwipesRatio?t.slideTo(h+y):null!==w&&b<0&&Math.abs(b)>n.longSwipesRatio?t.slideTo(w):t.slideTo(h))}else{if(!n.shortSwipes)return void t.slideTo(t.activeIndex);t.navigation&&(r.target===t.navigation.nextEl||r.target===t.navigation.prevEl)?r.target===t.navigation.nextEl?t.slideTo(h+y):t.slideTo(h):("next"===t.swipeDirection&&t.slideTo(null!==v?v:h+y),"prev"===t.swipeDirection&&t.slideTo(null!==w?w:h))}}function M(){const e=this,{params:t,el:s}=e;if(s&&0===s.offsetWidth)return;t.breakpoints&&e.setBreakpoint();const{allowSlideNext:i,allowSlidePrev:a,snapGrid:r}=e,n=e.virtual&&e.params.virtual.enabled;e.allowSlideNext=!0,e.allowSlidePrev=!0,e.updateSize(),e.updateSlides(),e.updateSlidesClasses();const l=n&&t.loop;!("auto"===t.slidesPerView||t.slidesPerView>1)||!e.isEnd||e.isBeginning||e.params.centeredSlides||l?e.params.loop&&!n?e.slideToLoop(e.realIndex,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0):e.slideTo(e.slides.length-1,0,!1,!0),e.autoplay&&e.autoplay.running&&e.autoplay.paused&&(clearTimeout(e.autoplay.resizeTimeout),e.autoplay.resizeTimeout=setTimeout((()=>{e.autoplay&&e.autoplay.running&&e.autoplay.paused&&e.autoplay.resume()}),500)),e.allowSlidePrev=a,e.allowSlideNext=i,e.params.watchOverflow&&r!==e.snapGrid&&e.checkOverflow()}function P(e){const t=this;t.enabled&&(t.allowClick||(t.params.preventClicks&&e.preventDefault(),t.params.preventClicksPropagation&&t.animating&&(e.stopPropagation(),e.stopImmediatePropagation())))}function L(){const e=this,{wrapperEl:t,rtlTranslate:s,enabled:i}=e;if(!i)return;let a;e.previousTranslate=e.translate,e.isHorizontal()?e.translate=-t.scrollLeft:e.translate=-t.scrollTop,0===e.translate&&(e.translate=0),e.updateActiveIndex(),e.updateSlidesClasses();const r=e.maxTranslate()-e.minTranslate();a=0===r?0:(e.translate-e.minTranslate())/r,a!==e.progress&&e.updateProgress(s?-e.translate:e.translate),e.emit("setTranslate",e.translate,!1)}function k(e){const t=this;f(t,e.target),t.params.cssMode||"auto"!==t.params.slidesPerView&&!t.params.autoHeight||t.update()}function I(){const e=this;e.documentTouchHandlerProceeded||(e.documentTouchHandlerProceeded=!0,e.params.touchReleaseOnEdges&&(e.el.style.touchAction="auto"))}const O=(e,t)=>{const s=(0,i.g)(),{params:a,el:r,wrapperEl:n,device:l}=e,o=!!a.nested,d="on"===t?"addEventListener":"removeEventListener",c=t;r&&"string"!=typeof r&&(s[d]("touchstart",e.onDocumentTouchStart,{passive:!1,capture:o}),r[d]("touchstart",e.onTouchStart,{passive:!1}),r[d]("pointerdown",e.onTouchStart,{passive:!1}),s[d]("touchmove",e.onTouchMove,{passive:!1,capture:o}),s[d]("pointermove",e.onTouchMove,{passive:!1,capture:o}),s[d]("touchend",e.onTouchEnd,{passive:!0}),s[d]("pointerup",e.onTouchEnd,{passive:!0}),s[d]("pointercancel",e.onTouchEnd,{passive:!0}),s[d]("touchcancel",e.onTouchEnd,{passive:!0}),s[d]("pointerout",e.onTouchEnd,{passive:!0}),s[d]("pointerleave",e.onTouchEnd,{passive:!0}),s[d]("contextmenu",e.onTouchEnd,{passive:!0}),(a.preventClicks||a.preventClicksPropagation)&&r[d]("click",e.onClick,!0),a.cssMode&&n[d]("scroll",e.onScroll),a.updateOnWindowResize?e[c](l.ios||l.android?"resize orientationchange observerUpdate":"resize observerUpdate",M,!0):e[c]("observerUpdate",M,!0),r[d]("load",e.onLoad,{capture:!0}))};const A=(e,t)=>e.grid&&t.grid&&t.grid.rows>1;var z={init:!0,direction:"horizontal",oneWayMovement:!1,swiperElementNodeName:"SWIPER-CONTAINER",touchEventsTarget:"wrapper",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,resizeObserver:!0,nested:!1,createElements:!1,eventsPrefix:"swiper",enabled:!0,focusableElements:"input, select, option, textarea, button, video, label",width:null,height:null,preventInteractionOnTransition:!1,userAgent:null,url:null,edgeSwipeDetection:!1,edgeSwipeThreshold:20,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,breakpointsBase:"window",spaceBetween:0,slidesPerView:1,slidesPerGroup:1,slidesPerGroupSkip:0,slidesPerGroupAuto:!1,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!0,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:5,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,loop:!1,loopAddBlankSlides:!0,loopAdditionalSlides:0,loopPreventsSliding:!0,rewind:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,maxBackfaceHiddenSlides:10,containerModifierClass:"swiper-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-blank",slideActiveClass:"swiper-slide-active",slideVisibleClass:"swiper-slide-visible",slideFullyVisibleClass:"swiper-slide-fully-visible",slideNextClass:"swiper-slide-next",slidePrevClass:"swiper-slide-prev",wrapperClass:"swiper-wrapper",lazyPreloaderClass:"swiper-lazy-preloader",lazyPreloadPrevNext:0,runCallbacksOnInit:!0,_emitClasses:!1};function D(e,t){return function(s){void 0===s&&(s={});const i=Object.keys(s)[0],r=s[i];"object"==typeof r&&null!==r?(!0===e[i]&&(e[i]={enabled:!0}),"navigation"===i&&e[i]&&e[i].enabled&&!e[i].prevEl&&!e[i].nextEl&&(e[i].auto=!0),["pagination","scrollbar"].indexOf(i)>=0&&e[i]&&e[i].enabled&&!e[i].el&&(e[i].auto=!0),i in e&&"enabled"in r?("object"!=typeof e[i]||"enabled"in e[i]||(e[i].enabled=!0),e[i]||(e[i]={enabled:!1}),(0,a.u)(t,s)):(0,a.u)(t,s)):(0,a.u)(t,s)}}const G={eventsEmitter:p,update:v,translate:w,transition:{setTransition:function(e,t){const s=this;s.params.cssMode||(s.wrapperEl.style.transitionDuration=`${e}ms`,s.wrapperEl.style.transitionDelay=0===e?"0ms":""),s.emit("setTransition",e,t)},transitionStart:function(e,t){void 0===e&&(e=!0);const s=this,{params:i}=s;i.cssMode||(i.autoHeight&&s.updateAutoHeight(),b({swiper:s,runCallbacks:e,direction:t,step:"Start"}))},transitionEnd:function(e,t){void 0===e&&(e=!0);const s=this,{params:i}=s;s.animating=!1,i.cssMode||(s.setTransition(0),b({swiper:s,runCallbacks:e,direction:t,step:"End"}))}},slide:y,loop:T,grabCursor:{setGrabCursor:function(e){const t=this;if(!t.params.simulateTouch||t.params.watchOverflow&&t.isLocked||t.params.cssMode)return;const s="container"===t.params.touchEventsTarget?t.el:t.wrapperEl;t.isElement&&(t.__preventObserver__=!0),s.style.cursor="move",s.style.cursor=e?"grabbing":"grab",t.isElement&&requestAnimationFrame((()=>{t.__preventObserver__=!1}))},unsetGrabCursor:function(){const e=this;e.params.watchOverflow&&e.isLocked||e.params.cssMode||(e.isElement&&(e.__preventObserver__=!0),e["container"===e.params.touchEventsTarget?"el":"wrapperEl"].style.cursor="",e.isElement&&requestAnimationFrame((()=>{e.__preventObserver__=!1})))}},events:{attachEvents:function(){const e=this,{params:t}=e;e.onTouchStart=E.bind(e),e.onTouchMove=x.bind(e),e.onTouchEnd=C.bind(e),e.onDocumentTouchStart=I.bind(e),t.cssMode&&(e.onScroll=L.bind(e)),e.onClick=P.bind(e),e.onLoad=k.bind(e),O(e,"on")},detachEvents:function(){O(this,"off")}},breakpoints:{setBreakpoint:function(){const e=this,{realIndex:t,initialized:s,params:i,el:r}=e,n=i.breakpoints;if(!n||n&&0===Object.keys(n).length)return;const l=e.getBreakpoint(n,e.params.breakpointsBase,e.el);if(!l||e.currentBreakpoint===l)return;const o=(l in n?n[l]:void 0)||e.originalParams,d=A(e,i),c=A(e,o),p=e.params.grabCursor,u=o.grabCursor,m=i.enabled;d&&!c?(r.classList.remove(`${i.containerModifierClass}grid`,`${i.containerModifierClass}grid-column`),e.emitContainerClasses()):!d&&c&&(r.classList.add(`${i.containerModifierClass}grid`),(o.grid.fill&&"column"===o.grid.fill||!o.grid.fill&&"column"===i.grid.fill)&&r.classList.add(`${i.containerModifierClass}grid-column`),e.emitContainerClasses()),p&&!u?e.unsetGrabCursor():!p&&u&&e.setGrabCursor(),["navigation","pagination","scrollbar"].forEach((t=>{if(void 0===o[t])return;const s=i[t]&&i[t].enabled,a=o[t]&&o[t].enabled;s&&!a&&e[t].disable(),!s&&a&&e[t].enable()}));const f=o.direction&&o.direction!==i.direction,h=i.loop&&(o.slidesPerView!==i.slidesPerView||f),g=i.loop;f&&s&&e.changeDirection(),(0,a.u)(e.params,o);const v=e.params.enabled,w=e.params.loop;Object.assign(e,{allowTouchMove:e.params.allowTouchMove,allowSlideNext:e.params.allowSlideNext,allowSlidePrev:e.params.allowSlidePrev}),m&&!v?e.disable():!m&&v&&e.enable(),e.currentBreakpoint=l,e.emit("_beforeBreakpoint",o),s&&(h?(e.loopDestroy(),e.loopCreate(t),e.updateSlides()):!g&&w?(e.loopCreate(t),e.updateSlides()):g&&!w&&e.loopDestroy()),e.emit("breakpoint",o)},getBreakpoint:function(e,t,s){if(void 0===t&&(t="window"),!e||"container"===t&&!s)return;let a=!1;const r=(0,i.a)(),n="window"===t?r.innerHeight:s.clientHeight,l=Object.keys(e).map((e=>{if("string"==typeof e&&0===e.indexOf("@")){const t=parseFloat(e.substr(1));return{value:n*t,point:e}}return{value:e,point:e}}));l.sort(((e,t)=>parseInt(e.value,10)-parseInt(t.value,10)));for(let e=0;e<l.length;e+=1){const{point:i,value:n}=l[e];"window"===t?r.matchMedia(`(min-width: ${n}px)`).matches&&(a=i):n<=s.clientWidth&&(a=i)}return a||"max"}},checkOverflow:{checkOverflow:function(){const e=this,{isLocked:t,params:s}=e,{slidesOffsetBefore:i}=s;if(i){const t=e.slides.length-1,s=e.slidesGrid[t]+e.slidesSizesGrid[t]+2*i;e.isLocked=e.size>s}else e.isLocked=1===e.snapGrid.length;!0===s.allowSlideNext&&(e.allowSlideNext=!e.isLocked),!0===s.allowSlidePrev&&(e.allowSlidePrev=!e.isLocked),t&&t!==e.isLocked&&(e.isEnd=!1),t!==e.isLocked&&e.emit(e.isLocked?"lock":"unlock")}},classes:{addClasses:function(){const e=this,{classNames:t,params:s,rtl:i,el:a,device:r}=e,n=function(e,t){const s=[];return e.forEach((e=>{"object"==typeof e?Object.keys(e).forEach((i=>{e[i]&&s.push(t+i)})):"string"==typeof e&&s.push(t+e)})),s}(["initialized",s.direction,{"free-mode":e.params.freeMode&&s.freeMode.enabled},{autoheight:s.autoHeight},{rtl:i},{grid:s.grid&&s.grid.rows>1},{"grid-column":s.grid&&s.grid.rows>1&&"column"===s.grid.fill},{android:r.android},{ios:r.ios},{"css-mode":s.cssMode},{centered:s.cssMode&&s.centeredSlides},{"watch-progress":s.watchSlidesProgress}],s.containerModifierClass);t.push(...n),a.classList.add(...t),e.emitContainerClasses()},removeClasses:function(){const{el:e,classNames:t}=this;e&&"string"!=typeof e&&(e.classList.remove(...t),this.emitContainerClasses())}}},_={};class ${constructor(){let e,t;for(var s=arguments.length,r=new Array(s),n=0;n<s;n++)r[n]=arguments[n];1===r.length&&r[0].constructor&&"Object"===Object.prototype.toString.call(r[0]).slice(8,-1)?t=r[0]:[e,t]=r,t||(t={}),t=(0,a.u)({},t),e&&!t.el&&(t.el=e);const l=(0,i.g)();if(t.el&&"string"==typeof t.el&&l.querySelectorAll(t.el).length>1){const e=[];return l.querySelectorAll(t.el).forEach((s=>{const i=(0,a.u)({},t,{el:s});e.push(new $(i))})),e}const p=this;p.__swiper__=!0,p.support=o(),p.device=d({userAgent:t.userAgent}),p.browser=c(),p.eventsListeners={},p.eventsAnyListeners=[],p.modules=[...p.__modules__],t.modules&&Array.isArray(t.modules)&&p.modules.push(...t.modules);const u={};p.modules.forEach((e=>{e({params:t,swiper:p,extendParams:D(t,u),on:p.on.bind(p),once:p.once.bind(p),off:p.off.bind(p),emit:p.emit.bind(p)})}));const m=(0,a.u)({},z,u);return p.params=(0,a.u)({},m,_,t),p.originalParams=(0,a.u)({},p.params),p.passedParams=(0,a.u)({},t),p.params&&p.params.on&&Object.keys(p.params.on).forEach((e=>{p.on(e,p.params.on[e])})),p.params&&p.params.onAny&&p.onAny(p.params.onAny),Object.assign(p,{enabled:p.params.enabled,el:e,classNames:[],slides:[],slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:()=>"horizontal"===p.params.direction,isVertical:()=>"vertical"===p.params.direction,activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,cssOverflowAdjustment(){return Math.trunc(this.translate/2**23)*2**23},allowSlideNext:p.params.allowSlideNext,allowSlidePrev:p.params.allowSlidePrev,touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,focusableElements:p.params.focusableElements,lastClickTime:0,clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,startMoving:void 0,pointerId:null,touchId:null},allowClick:!0,allowTouchMove:p.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),p.emit("_swiper"),p.params.init&&p.init(),p}getDirectionLabel(e){return this.isHorizontal()?e:{width:"height","margin-top":"margin-left","margin-bottom ":"margin-right","margin-left":"margin-top","margin-right":"margin-bottom","padding-left":"padding-top","padding-right":"padding-bottom",marginRight:"marginBottom"}[e]}getSlideIndex(e){const{slidesEl:t,params:s}=this,i=(0,a.e)(t,`.${s.slideClass}, swiper-slide`),r=(0,a.h)(i[0]);return(0,a.h)(e)-r}getSlideIndexByData(e){return this.getSlideIndex(this.slides.filter((t=>1*t.getAttribute("data-swiper-slide-index")===e))[0])}recalcSlides(){const{slidesEl:e,params:t}=this;this.slides=(0,a.e)(e,`.${t.slideClass}, swiper-slide`)}enable(){const e=this;e.enabled||(e.enabled=!0,e.params.grabCursor&&e.setGrabCursor(),e.emit("enable"))}disable(){const e=this;e.enabled&&(e.enabled=!1,e.params.grabCursor&&e.unsetGrabCursor(),e.emit("disable"))}setProgress(e,t){const s=this;e=Math.min(Math.max(e,0),1);const i=s.minTranslate(),a=(s.maxTranslate()-i)*e+i;s.translateTo(a,void 0===t?0:t),s.updateActiveIndex(),s.updateSlidesClasses()}emitContainerClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const t=e.el.className.split(" ").filter((t=>0===t.indexOf("swiper")||0===t.indexOf(e.params.containerModifierClass)));e.emit("_containerClasses",t.join(" "))}getSlideClasses(e){const t=this;return t.destroyed?"":e.className.split(" ").filter((e=>0===e.indexOf("swiper-slide")||0===e.indexOf(t.params.slideClass))).join(" ")}emitSlidesClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const t=[];e.slides.forEach((s=>{const i=e.getSlideClasses(s);t.push({slideEl:s,classNames:i}),e.emit("_slideClass",s,i)})),e.emit("_slideClasses",t)}slidesPerViewDynamic(e,t){void 0===e&&(e="current"),void 0===t&&(t=!1);const{params:s,slides:i,slidesGrid:a,slidesSizesGrid:r,size:n,activeIndex:l}=this;let o=1;if("number"==typeof s.slidesPerView)return s.slidesPerView;if(s.centeredSlides){let e,t=i[l]?Math.ceil(i[l].swiperSlideSize):0;for(let s=l+1;s<i.length;s+=1)i[s]&&!e&&(t+=Math.ceil(i[s].swiperSlideSize),o+=1,t>n&&(e=!0));for(let s=l-1;s>=0;s-=1)i[s]&&!e&&(t+=i[s].swiperSlideSize,o+=1,t>n&&(e=!0))}else if("current"===e)for(let e=l+1;e<i.length;e+=1){(t?a[e]+r[e]-a[l]<n:a[e]-a[l]<n)&&(o+=1)}else for(let e=l-1;e>=0;e-=1){a[l]-a[e]<n&&(o+=1)}return o}update(){const e=this;if(!e||e.destroyed)return;const{snapGrid:t,params:s}=e;function i(){const t=e.rtlTranslate?-1*e.translate:e.translate,s=Math.min(Math.max(t,e.maxTranslate()),e.minTranslate());e.setTranslate(s),e.updateActiveIndex(),e.updateSlidesClasses()}let a;if(s.breakpoints&&e.setBreakpoint(),[...e.el.querySelectorAll('[loading="lazy"]')].forEach((t=>{t.complete&&f(e,t)})),e.updateSize(),e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),s.freeMode&&s.freeMode.enabled&&!s.cssMode)i(),s.autoHeight&&e.updateAutoHeight();else{if(("auto"===s.slidesPerView||s.slidesPerView>1)&&e.isEnd&&!s.centeredSlides){const t=e.virtual&&s.virtual.enabled?e.virtual.slides:e.slides;a=e.slideTo(t.length-1,0,!1,!0)}else a=e.slideTo(e.activeIndex,0,!1,!0);a||i()}s.watchOverflow&&t!==e.snapGrid&&e.checkOverflow(),e.emit("update")}changeDirection(e,t){void 0===t&&(t=!0);const s=this,i=s.params.direction;return e||(e="horizontal"===i?"vertical":"horizontal"),e===i||"horizontal"!==e&&"vertical"!==e||(s.el.classList.remove(`${s.params.containerModifierClass}${i}`),s.el.classList.add(`${s.params.containerModifierClass}${e}`),s.emitContainerClasses(),s.params.direction=e,s.slides.forEach((t=>{"vertical"===e?t.style.width="":t.style.height=""})),s.emit("changeDirection"),t&&s.update()),s}changeLanguageDirection(e){const t=this;t.rtl&&"rtl"===e||!t.rtl&&"ltr"===e||(t.rtl="rtl"===e,t.rtlTranslate="horizontal"===t.params.direction&&t.rtl,t.rtl?(t.el.classList.add(`${t.params.containerModifierClass}rtl`),t.el.dir="rtl"):(t.el.classList.remove(`${t.params.containerModifierClass}rtl`),t.el.dir="ltr"),t.update())}mount(e){const t=this;if(t.mounted)return!0;let s=e||t.params.el;if("string"==typeof s&&(s=document.querySelector(s)),!s)return!1;s.swiper=t,s.parentNode&&s.parentNode.host&&s.parentNode.host.nodeName===t.params.swiperElementNodeName.toUpperCase()&&(t.isElement=!0);const i=()=>`.${(t.params.wrapperClass||"").trim().split(" ").join(".")}`;let r=(()=>{if(s&&s.shadowRoot&&s.shadowRoot.querySelector){return s.shadowRoot.querySelector(i())}return(0,a.e)(s,i())[0]})();return!r&&t.params.createElements&&(r=(0,a.c)("div",t.params.wrapperClass),s.append(r),(0,a.e)(s,`.${t.params.slideClass}`).forEach((e=>{r.append(e)}))),Object.assign(t,{el:s,wrapperEl:r,slidesEl:t.isElement&&!s.parentNode.host.slideSlots?s.parentNode.host:r,hostEl:t.isElement?s.parentNode.host:s,mounted:!0,rtl:"rtl"===s.dir.toLowerCase()||"rtl"===(0,a.o)(s,"direction"),rtlTranslate:"horizontal"===t.params.direction&&("rtl"===s.dir.toLowerCase()||"rtl"===(0,a.o)(s,"direction")),wrongRTL:"-webkit-box"===(0,a.o)(r,"display")}),!0}init(e){const t=this;if(t.initialized)return t;if(!1===t.mount(e))return t;t.emit("beforeInit"),t.params.breakpoints&&t.setBreakpoint(),t.addClasses(),t.updateSize(),t.updateSlides(),t.params.watchOverflow&&t.checkOverflow(),t.params.grabCursor&&t.enabled&&t.setGrabCursor(),t.params.loop&&t.virtual&&t.params.virtual.enabled?t.slideTo(t.params.initialSlide+t.virtual.slidesBefore,0,t.params.runCallbacksOnInit,!1,!0):t.slideTo(t.params.initialSlide,0,t.params.runCallbacksOnInit,!1,!0),t.params.loop&&t.loopCreate(),t.attachEvents();const s=[...t.el.querySelectorAll('[loading="lazy"]')];return t.isElement&&s.push(...t.hostEl.querySelectorAll('[loading="lazy"]')),s.forEach((e=>{e.complete?f(t,e):e.addEventListener("load",(e=>{f(t,e.target)}))})),g(t),t.initialized=!0,g(t),t.emit("init"),t.emit("afterInit"),t}destroy(e,t){void 0===e&&(e=!0),void 0===t&&(t=!0);const s=this,{params:i,el:r,wrapperEl:n,slides:l}=s;return void 0===s.params||s.destroyed||(s.emit("beforeDestroy"),s.initialized=!1,s.detachEvents(),i.loop&&s.loopDestroy(),t&&(s.removeClasses(),r&&"string"!=typeof r&&r.removeAttribute("style"),n&&n.removeAttribute("style"),l&&l.length&&l.forEach((e=>{e.classList.remove(i.slideVisibleClass,i.slideFullyVisibleClass,i.slideActiveClass,i.slideNextClass,i.slidePrevClass),e.removeAttribute("style"),e.removeAttribute("data-swiper-slide-index")}))),s.emit("destroy"),Object.keys(s.eventsListeners).forEach((e=>{s.off(e)})),!1!==e&&(s.el&&"string"!=typeof s.el&&(s.el.swiper=null),(0,a.v)(s)),s.destroyed=!0),null}static extendDefaults(e){(0,a.u)(_,e)}static get extendedDefaults(){return _}static get defaults(){return z}static installModule(e){$.prototype.__modules__||($.prototype.__modules__=[]);const t=$.prototype.__modules__;"function"==typeof e&&t.indexOf(e)<0&&t.push(e)}static use(e){return Array.isArray(e)?(e.forEach((e=>$.installModule(e))),$):($.installModule(e),$)}}Object.keys(G).forEach((e=>{Object.keys(G[e]).forEach((t=>{$.prototype[t]=G[e][t]}))})),$.use([function(e){let{swiper:t,on:s,emit:a}=e;const r=(0,i.a)();let n=null,l=null;const o=()=>{t&&!t.destroyed&&t.initialized&&(a("beforeResize"),a("resize"))},d=()=>{t&&!t.destroyed&&t.initialized&&a("orientationchange")};s("init",(()=>{t.params.resizeObserver&&void 0!==r.ResizeObserver?t&&!t.destroyed&&t.initialized&&(n=new ResizeObserver((e=>{l=r.requestAnimationFrame((()=>{const{width:s,height:i}=t;let a=s,r=i;e.forEach((e=>{let{contentBoxSize:s,contentRect:i,target:n}=e;n&&n!==t.el||(a=i?i.width:(s[0]||s).inlineSize,r=i?i.height:(s[0]||s).blockSize)})),a===s&&r===i||o()}))})),n.observe(t.el)):(r.addEventListener("resize",o),r.addEventListener("orientationchange",d))})),s("destroy",(()=>{l&&r.cancelAnimationFrame(l),n&&n.unobserve&&t.el&&(n.unobserve(t.el),n=null),r.removeEventListener("resize",o),r.removeEventListener("orientationchange",d)}))},function(e){let{swiper:t,extendParams:s,on:r,emit:n}=e;const l=[],o=(0,i.a)(),d=function(e,s){void 0===s&&(s={});const i=new(o.MutationObserver||o.WebkitMutationObserver)((e=>{if(t.__preventObserver__)return;if(1===e.length)return void n("observerUpdate",e[0]);const s=function(){n("observerUpdate",e[0])};o.requestAnimationFrame?o.requestAnimationFrame(s):o.setTimeout(s,0)}));i.observe(e,{attributes:void 0===s.attributes||s.attributes,childList:void 0===s.childList||s.childList,characterData:void 0===s.characterData||s.characterData}),l.push(i)};s({observer:!1,observeParents:!1,observeSlideChildren:!1}),r("init",(()=>{if(t.params.observer){if(t.params.observeParents){const e=(0,a.a)(t.hostEl);for(let t=0;t<e.length;t+=1)d(e[t])}d(t.hostEl,{childList:t.params.observeSlideChildren}),d(t.wrapperEl,{attributes:!1})}})),r("destroy",(()=>{l.forEach((e=>{e.disconnect()})),l.splice(0,l.length)}))}])}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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TixFQUFRTSxVQUNyRUMsbUJBQWdELElBQTFCUCxFQUFRTyxlQUF1Q1AsRUFBUU8sZ0JBRS9FVCxFQUFVM3dCLEtBQUs4dkIsRUFDakIsRUF5QkFyNkIsRUFBYSxDQUNYcTZCLFVBQVUsRUFDVnVCLGdCQUFnQixFQUNoQkMsc0JBQXNCLElBRXhCNTdCLEVBQUcsUUE3QlUsS0FDWCxHQUFLbkIsRUFBT0UsT0FBT3E3QixTQUFuQixDQUNBLEdBQUl2N0IsRUFBT0UsT0FBTzQ4QixlQUFnQixDQUNoQyxNQUFNRSxHQUFtQixPQUFlaDlCLEVBQU80NkIsUUFDL0MsSUFBSyxJQUFJM3dCLEVBQUksRUFBR0EsRUFBSSt5QixFQUFpQnA3QixPQUFRcUksR0FBSyxFQUNoRG95QixFQUFPVyxFQUFpQi95QixHQUU1QixDQUVBb3lCLEVBQU9yOEIsRUFBTzQ2QixPQUFRLENBQ3BCZ0MsVUFBVzU4QixFQUFPRSxPQUFPNjhCLHVCQUkzQlYsRUFBT3I4QixFQUFPc04sVUFBVyxDQUN2QnF2QixZQUFZLEdBZHFCLENBZWpDLElBY0p4N0IsRUFBRyxXQVphLEtBQ2RpN0IsRUFBVTc3QixTQUFRZzdCLElBQ2hCQSxFQUFTMEIsWUFBWSxJQUV2QmIsRUFBVTdmLE9BQU8sRUFBRzZmLEVBQVV4NkIsT0FBTyxHQVN6QyxHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2VicGFjay1zZXR1cC8uL25vZGVfbW9kdWxlcy9zd2lwZXIvc2hhcmVkL2NyZWF0ZS1lbGVtZW50LWlmLW5vdC1kZWZpbmVkLm1qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXNldHVwLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9tb2R1bGVzL25hdmlnYXRpb24ubWpzIiwid2VicGFjazovL3dlYnBhY2stc2V0dXAvLi9ub2RlX21vZHVsZXMvc3dpcGVyL3NoYXJlZC9jbGFzc2VzLXRvLXNlbGVjdG9yLm1qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXNldHVwLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9tb2R1bGVzL3BhZ2luYXRpb24ubWpzIiwid2VicGFjazovL3dlYnBhY2stc2V0dXAvLi9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvYXV0b3BsYXkubWpzIiwid2VicGFjazovL3dlYnBhY2stc2V0dXAvLi9ub2RlX21vZHVsZXMvc3dpcGVyL3NoYXJlZC9zc3Itd2luZG93LmVzbS5tanMiLCJ3ZWJwYWNrOi8vd2VicGFjay1zZXR1cC8uL25vZGVfbW9kdWxlcy9zd2lwZXIvc2hhcmVkL3V0aWxzLm1qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXNldHVwLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9zaGFyZWQvc3dpcGVyLWNvcmUubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGUgYXMgZWxlbWVudENoaWxkcmVuLCBjIGFzIGNyZWF0ZUVsZW1lbnQgfSBmcm9tICcuL3V0aWxzLm1qcyc7XG5cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnRJZk5vdERlZmluZWQoc3dpcGVyLCBvcmlnaW5hbFBhcmFtcywgcGFyYW1zLCBjaGVja1Byb3BzKSB7XG4gIGlmIChzd2lwZXIucGFyYW1zLmNyZWF0ZUVsZW1lbnRzKSB7XG4gICAgT2JqZWN0LmtleXMoY2hlY2tQcm9wcykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgaWYgKCFwYXJhbXNba2V5XSAmJiBwYXJhbXMuYXV0byA9PT0gdHJ1ZSkge1xuICAgICAgICBsZXQgZWxlbWVudCA9IGVsZW1lbnRDaGlsZHJlbihzd2lwZXIuZWwsIGAuJHtjaGVja1Byb3BzW2tleV19YClbMF07XG4gICAgICAgIGlmICghZWxlbWVudCkge1xuICAgICAgICAgIGVsZW1lbnQgPSBjcmVhdGVFbGVtZW50KCdkaXYnLCBjaGVja1Byb3BzW2tleV0pO1xuICAgICAgICAgIGVsZW1lbnQuY2xhc3NOYW1lID0gY2hlY2tQcm9wc1trZXldO1xuICAgICAgICAgIHN3aXBlci5lbC5hcHBlbmQoZWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgICAgcGFyYW1zW2tleV0gPSBlbGVtZW50O1xuICAgICAgICBvcmlnaW5hbFBhcmFtc1trZXldID0gZWxlbWVudDtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICByZXR1cm4gcGFyYW1zO1xufVxuXG5leHBvcnQgeyBjcmVhdGVFbGVtZW50SWZOb3REZWZpbmVkIGFzIGMgfTtcbiIsImltcG9ydCB7IGMgYXMgY3JlYXRlRWxlbWVudElmTm90RGVmaW5lZCB9IGZyb20gJy4uL3NoYXJlZC9jcmVhdGUtZWxlbWVudC1pZi1ub3QtZGVmaW5lZC5tanMnO1xuaW1wb3J0IHsgbSBhcyBtYWtlRWxlbWVudHNBcnJheSB9IGZyb20gJy4uL3NoYXJlZC91dGlscy5tanMnO1xuXG5mdW5jdGlvbiBOYXZpZ2F0aW9uKF9yZWYpIHtcbiAgbGV0IHtcbiAgICBzd2lwZXIsXG4gICAgZXh0ZW5kUGFyYW1zLFxuICAgIG9uLFxuICAgIGVtaXRcbiAgfSA9IF9yZWY7XG4gIGV4dGVuZFBhcmFtcyh7XG4gICAgbmF2aWdhdGlvbjoge1xuICAgICAgbmV4dEVsOiBudWxsLFxuICAgICAgcHJldkVsOiBudWxsLFxuICAgICAgaGlkZU9uQ2xpY2s6IGZhbHNlLFxuICAgICAgZGlzYWJsZWRDbGFzczogJ3N3aXBlci1idXR0b24tZGlzYWJsZWQnLFxuICAgICAgaGlkZGVuQ2xhc3M6ICdzd2lwZXItYnV0dG9uLWhpZGRlbicsXG4gICAgICBsb2NrQ2xhc3M6ICdzd2lwZXItYnV0dG9uLWxvY2snLFxuICAgICAgbmF2aWdhdGlvbkRpc2FibGVkQ2xhc3M6ICdzd2lwZXItbmF2aWdhdGlvbi1kaXNhYmxlZCdcbiAgICB9XG4gIH0pO1xuICBzd2lwZXIubmF2aWdhdGlvbiA9IHtcbiAgICBuZXh0RWw6IG51bGwsXG4gICAgcHJldkVsOiBudWxsXG4gIH07XG4gIGZ1bmN0aW9uIGdldEVsKGVsKSB7XG4gICAgbGV0IHJlcztcbiAgICBpZiAoZWwgJiYgdHlwZW9mIGVsID09PSAnc3RyaW5nJyAmJiBzd2lwZXIuaXNFbGVtZW50KSB7XG4gICAgICByZXMgPSBzd2lwZXIuZWwucXVlcnlTZWxlY3RvcihlbCk7XG4gICAgICBpZiAocmVzKSByZXR1cm4gcmVzO1xuICAgIH1cbiAgICBpZiAoZWwpIHtcbiAgICAgIGlmICh0eXBlb2YgZWwgPT09ICdzdHJpbmcnKSByZXMgPSBbLi4uZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChlbCldO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMudW5pcXVlTmF2RWxlbWVudHMgJiYgdHlwZW9mIGVsID09PSAnc3RyaW5nJyAmJiByZXMgJiYgcmVzLmxlbmd0aCA+IDEgJiYgc3dpcGVyLmVsLnF1ZXJ5U2VsZWN0b3JBbGwoZWwpLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICByZXMgPSBzd2lwZXIuZWwucXVlcnlTZWxlY3RvcihlbCk7XG4gICAgICB9IGVsc2UgaWYgKHJlcyAmJiByZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJlcyA9IHJlc1swXTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGVsICYmICFyZXMpIHJldHVybiBlbDtcbiAgICAvLyBpZiAoQXJyYXkuaXNBcnJheShyZXMpICYmIHJlcy5sZW5ndGggPT09IDEpIHJlcyA9IHJlc1swXTtcbiAgICByZXR1cm4gcmVzO1xuICB9XG4gIGZ1bmN0aW9uIHRvZ2dsZUVsKGVsLCBkaXNhYmxlZCkge1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbjtcbiAgICBlbCA9IG1ha2VFbGVtZW50c0FycmF5KGVsKTtcbiAgICBlbC5mb3JFYWNoKHN1YkVsID0+IHtcbiAgICAgIGlmIChzdWJFbCkge1xuICAgICAgICBzdWJFbC5jbGFzc0xpc3RbZGlzYWJsZWQgPyAnYWRkJyA6ICdyZW1vdmUnXSguLi5wYXJhbXMuZGlzYWJsZWRDbGFzcy5zcGxpdCgnICcpKTtcbiAgICAgICAgaWYgKHN1YkVsLnRhZ05hbWUgPT09ICdCVVRUT04nKSBzdWJFbC5kaXNhYmxlZCA9IGRpc2FibGVkO1xuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHN3aXBlci5lbmFibGVkKSB7XG4gICAgICAgICAgc3ViRWwuY2xhc3NMaXN0W3N3aXBlci5pc0xvY2tlZCA/ICdhZGQnIDogJ3JlbW92ZSddKHBhcmFtcy5sb2NrQ2xhc3MpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgIC8vIFVwZGF0ZSBOYXZpZ2F0aW9uIEJ1dHRvbnNcbiAgICBjb25zdCB7XG4gICAgICBuZXh0RWwsXG4gICAgICBwcmV2RWxcbiAgICB9ID0gc3dpcGVyLm5hdmlnYXRpb247XG4gICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgdG9nZ2xlRWwocHJldkVsLCBmYWxzZSk7XG4gICAgICB0b2dnbGVFbChuZXh0RWwsIGZhbHNlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdG9nZ2xlRWwocHJldkVsLCBzd2lwZXIuaXNCZWdpbm5pbmcgJiYgIXN3aXBlci5wYXJhbXMucmV3aW5kKTtcbiAgICB0b2dnbGVFbChuZXh0RWwsIHN3aXBlci5pc0VuZCAmJiAhc3dpcGVyLnBhcmFtcy5yZXdpbmQpO1xuICB9XG4gIGZ1bmN0aW9uIG9uUHJldkNsaWNrKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgaWYgKHN3aXBlci5pc0JlZ2lubmluZyAmJiAhc3dpcGVyLnBhcmFtcy5sb29wICYmICFzd2lwZXIucGFyYW1zLnJld2luZCkgcmV0dXJuO1xuICAgIHN3aXBlci5zbGlkZVByZXYoKTtcbiAgICBlbWl0KCduYXZpZ2F0aW9uUHJldicpO1xuICB9XG4gIGZ1bmN0aW9uIG9uTmV4dENsaWNrKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgaWYgKHN3aXBlci5pc0VuZCAmJiAhc3dpcGVyLnBhcmFtcy5sb29wICYmICFzd2lwZXIucGFyYW1zLnJld2luZCkgcmV0dXJuO1xuICAgIHN3aXBlci5zbGlkZU5leHQoKTtcbiAgICBlbWl0KCduYXZpZ2F0aW9uTmV4dCcpO1xuICB9XG4gIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uO1xuICAgIHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbiA9IGNyZWF0ZUVsZW1lbnRJZk5vdERlZmluZWQoc3dpcGVyLCBzd2lwZXIub3JpZ2luYWxQYXJhbXMubmF2aWdhdGlvbiwgc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLCB7XG4gICAgICBuZXh0RWw6ICdzd2lwZXItYnV0dG9uLW5leHQnLFxuICAgICAgcHJldkVsOiAnc3dpcGVyLWJ1dHRvbi1wcmV2J1xuICAgIH0pO1xuICAgIGlmICghKHBhcmFtcy5uZXh0RWwgfHwgcGFyYW1zLnByZXZFbCkpIHJldHVybjtcbiAgICBsZXQgbmV4dEVsID0gZ2V0RWwocGFyYW1zLm5leHRFbCk7XG4gICAgbGV0IHByZXZFbCA9IGdldEVsKHBhcmFtcy5wcmV2RWwpO1xuICAgIE9iamVjdC5hc3NpZ24oc3dpcGVyLm5hdmlnYXRpb24sIHtcbiAgICAgIG5leHRFbCxcbiAgICAgIHByZXZFbFxuICAgIH0pO1xuICAgIG5leHRFbCA9IG1ha2VFbGVtZW50c0FycmF5KG5leHRFbCk7XG4gICAgcHJldkVsID0gbWFrZUVsZW1lbnRzQXJyYXkocHJldkVsKTtcbiAgICBjb25zdCBpbml0QnV0dG9uID0gKGVsLCBkaXIpID0+IHtcbiAgICAgIGlmIChlbCkge1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGRpciA9PT0gJ25leHQnID8gb25OZXh0Q2xpY2sgOiBvblByZXZDbGljayk7XG4gICAgICB9XG4gICAgICBpZiAoIXN3aXBlci5lbmFibGVkICYmIGVsKSB7XG4gICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoLi4ucGFyYW1zLmxvY2tDbGFzcy5zcGxpdCgnICcpKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIG5leHRFbC5mb3JFYWNoKGVsID0+IGluaXRCdXR0b24oZWwsICduZXh0JykpO1xuICAgIHByZXZFbC5mb3JFYWNoKGVsID0+IGluaXRCdXR0b24oZWwsICdwcmV2JykpO1xuICB9XG4gIGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgbGV0IHtcbiAgICAgIG5leHRFbCxcbiAgICAgIHByZXZFbFxuICAgIH0gPSBzd2lwZXIubmF2aWdhdGlvbjtcbiAgICBuZXh0RWwgPSBtYWtlRWxlbWVudHNBcnJheShuZXh0RWwpO1xuICAgIHByZXZFbCA9IG1ha2VFbGVtZW50c0FycmF5KHByZXZFbCk7XG4gICAgY29uc3QgZGVzdHJveUJ1dHRvbiA9IChlbCwgZGlyKSA9PiB7XG4gICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIGRpciA9PT0gJ25leHQnID8gb25OZXh0Q2xpY2sgOiBvblByZXZDbGljayk7XG4gICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKC4uLnN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5kaXNhYmxlZENsYXNzLnNwbGl0KCcgJykpO1xuICAgIH07XG4gICAgbmV4dEVsLmZvckVhY2goZWwgPT4gZGVzdHJveUJ1dHRvbihlbCwgJ25leHQnKSk7XG4gICAgcHJldkVsLmZvckVhY2goZWwgPT4gZGVzdHJveUJ1dHRvbihlbCwgJ3ByZXYnKSk7XG4gIH1cbiAgb24oJ2luaXQnLCAoKSA9PiB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5lbmFibGVkID09PSBmYWxzZSkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICBkaXNhYmxlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGluaXQoKTtcbiAgICAgIHVwZGF0ZSgpO1xuICAgIH1cbiAgfSk7XG4gIG9uKCd0b0VkZ2UgZnJvbUVkZ2UgbG9jayB1bmxvY2snLCAoKSA9PiB7XG4gICAgdXBkYXRlKCk7XG4gIH0pO1xuICBvbignZGVzdHJveScsICgpID0+IHtcbiAgICBkZXN0cm95KCk7XG4gIH0pO1xuICBvbignZW5hYmxlIGRpc2FibGUnLCAoKSA9PiB7XG4gICAgbGV0IHtcbiAgICAgIG5leHRFbCxcbiAgICAgIHByZXZFbFxuICAgIH0gPSBzd2lwZXIubmF2aWdhdGlvbjtcbiAgICBuZXh0RWwgPSBtYWtlRWxlbWVudHNBcnJheShuZXh0RWwpO1xuICAgIHByZXZFbCA9IG1ha2VFbGVtZW50c0FycmF5KHByZXZFbCk7XG4gICAgaWYgKHN3aXBlci5lbmFibGVkKSB7XG4gICAgICB1cGRhdGUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgWy4uLm5leHRFbCwgLi4ucHJldkVsXS5maWx0ZXIoZWwgPT4gISFlbCkuZm9yRWFjaChlbCA9PiBlbC5jbGFzc0xpc3QuYWRkKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5sb2NrQ2xhc3MpKTtcbiAgfSk7XG4gIG9uKCdjbGljaycsIChfcywgZSkgPT4ge1xuICAgIGxldCB7XG4gICAgICBuZXh0RWwsXG4gICAgICBwcmV2RWxcbiAgICB9ID0gc3dpcGVyLm5hdmlnYXRpb247XG4gICAgbmV4dEVsID0gbWFrZUVsZW1lbnRzQXJyYXkobmV4dEVsKTtcbiAgICBwcmV2RWwgPSBtYWtlRWxlbWVudHNBcnJheShwcmV2RWwpO1xuICAgIGNvbnN0IHRhcmdldEVsID0gZS50YXJnZXQ7XG4gICAgbGV0IHRhcmdldElzQnV0dG9uID0gcHJldkVsLmluY2x1ZGVzKHRhcmdldEVsKSB8fCBuZXh0RWwuaW5jbHVkZXModGFyZ2V0RWwpO1xuICAgIGlmIChzd2lwZXIuaXNFbGVtZW50ICYmICF0YXJnZXRJc0J1dHRvbikge1xuICAgICAgY29uc3QgcGF0aCA9IGUucGF0aCB8fCBlLmNvbXBvc2VkUGF0aCAmJiBlLmNvbXBvc2VkUGF0aCgpO1xuICAgICAgaWYgKHBhdGgpIHtcbiAgICAgICAgdGFyZ2V0SXNCdXR0b24gPSBwYXRoLmZpbmQocGF0aEVsID0+IG5leHRFbC5pbmNsdWRlcyhwYXRoRWwpIHx8IHByZXZFbC5pbmNsdWRlcyhwYXRoRWwpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5oaWRlT25DbGljayAmJiAhdGFyZ2V0SXNCdXR0b24pIHtcbiAgICAgIGlmIChzd2lwZXIucGFnaW5hdGlvbiAmJiBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24gJiYgc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmNsaWNrYWJsZSAmJiAoc3dpcGVyLnBhZ2luYXRpb24uZWwgPT09IHRhcmdldEVsIHx8IHN3aXBlci5wYWdpbmF0aW9uLmVsLmNvbnRhaW5zKHRhcmdldEVsKSkpIHJldHVybjtcbiAgICAgIGxldCBpc0hpZGRlbjtcbiAgICAgIGlmIChuZXh0RWwubGVuZ3RoKSB7XG4gICAgICAgIGlzSGlkZGVuID0gbmV4dEVsWzBdLmNsYXNzTGlzdC5jb250YWlucyhzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uaGlkZGVuQ2xhc3MpO1xuICAgICAgfSBlbHNlIGlmIChwcmV2RWwubGVuZ3RoKSB7XG4gICAgICAgIGlzSGlkZGVuID0gcHJldkVsWzBdLmNsYXNzTGlzdC5jb250YWlucyhzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uaGlkZGVuQ2xhc3MpO1xuICAgICAgfVxuICAgICAgaWYgKGlzSGlkZGVuID09PSB0cnVlKSB7XG4gICAgICAgIGVtaXQoJ25hdmlnYXRpb25TaG93Jyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbWl0KCduYXZpZ2F0aW9uSGlkZScpO1xuICAgICAgfVxuICAgICAgWy4uLm5leHRFbCwgLi4ucHJldkVsXS5maWx0ZXIoZWwgPT4gISFlbCkuZm9yRWFjaChlbCA9PiBlbC5jbGFzc0xpc3QudG9nZ2xlKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5oaWRkZW5DbGFzcykpO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGVuYWJsZSA9ICgpID0+IHtcbiAgICBzd2lwZXIuZWwuY2xhc3NMaXN0LnJlbW92ZSguLi5zd2lwZXIucGFyYW1zLm5hdmlnYXRpb24ubmF2aWdhdGlvbkRpc2FibGVkQ2xhc3Muc3BsaXQoJyAnKSk7XG4gICAgaW5pdCgpO1xuICAgIHVwZGF0ZSgpO1xuICB9O1xuICBjb25zdCBkaXNhYmxlID0gKCkgPT4ge1xuICAgIHN3aXBlci5lbC5jbGFzc0xpc3QuYWRkKC4uLnN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5uYXZpZ2F0aW9uRGlzYWJsZWRDbGFzcy5zcGxpdCgnICcpKTtcbiAgICBkZXN0cm95KCk7XG4gIH07XG4gIE9iamVjdC5hc3NpZ24oc3dpcGVyLm5hdmlnYXRpb24sIHtcbiAgICBlbmFibGUsXG4gICAgZGlzYWJsZSxcbiAgICB1cGRhdGUsXG4gICAgaW5pdCxcbiAgICBkZXN0cm95XG4gIH0pO1xufVxuXG5leHBvcnQgeyBOYXZpZ2F0aW9uIGFzIGRlZmF1bHQgfTtcbiIsImZ1bmN0aW9uIGNsYXNzZXNUb1NlbGVjdG9yKGNsYXNzZXMpIHtcbiAgaWYgKGNsYXNzZXMgPT09IHZvaWQgMCkge1xuICAgIGNsYXNzZXMgPSAnJztcbiAgfVxuICByZXR1cm4gYC4ke2NsYXNzZXMudHJpbSgpLnJlcGxhY2UoLyhbXFwuOiErXFwvXSkvZywgJ1xcXFwkMScpIC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgLnJlcGxhY2UoLyAvZywgJy4nKX1gO1xufVxuXG5leHBvcnQgeyBjbGFzc2VzVG9TZWxlY3RvciBhcyBjIH07XG4iLCJpbXBvcnQgeyBjIGFzIGNsYXNzZXNUb1NlbGVjdG9yIH0gZnJvbSAnLi4vc2hhcmVkL2NsYXNzZXMtdG8tc2VsZWN0b3IubWpzJztcbmltcG9ydCB7IGMgYXMgY3JlYXRlRWxlbWVudElmTm90RGVmaW5lZCB9IGZyb20gJy4uL3NoYXJlZC9jcmVhdGUtZWxlbWVudC1pZi1ub3QtZGVmaW5lZC5tanMnO1xuaW1wb3J0IHsgbSBhcyBtYWtlRWxlbWVudHNBcnJheSwgZiBhcyBlbGVtZW50T3V0ZXJTaXplLCBoIGFzIGVsZW1lbnRJbmRleCwgYSBhcyBlbGVtZW50UGFyZW50cyB9IGZyb20gJy4uL3NoYXJlZC91dGlscy5tanMnO1xuXG5mdW5jdGlvbiBQYWdpbmF0aW9uKF9yZWYpIHtcbiAgbGV0IHtcbiAgICBzd2lwZXIsXG4gICAgZXh0ZW5kUGFyYW1zLFxuICAgIG9uLFxuICAgIGVtaXRcbiAgfSA9IF9yZWY7XG4gIGNvbnN0IHBmeCA9ICdzd2lwZXItcGFnaW5hdGlvbic7XG4gIGV4dGVuZFBhcmFtcyh7XG4gICAgcGFnaW5hdGlvbjoge1xuICAgICAgZWw6IG51bGwsXG4gICAgICBidWxsZXRFbGVtZW50OiAnc3BhbicsXG4gICAgICBjbGlja2FibGU6IGZhbHNlLFxuICAgICAgaGlkZU9uQ2xpY2s6IGZhbHNlLFxuICAgICAgcmVuZGVyQnVsbGV0OiBudWxsLFxuICAgICAgcmVuZGVyUHJvZ3Jlc3NiYXI6IG51bGwsXG4gICAgICByZW5kZXJGcmFjdGlvbjogbnVsbCxcbiAgICAgIHJlbmRlckN1c3RvbTogbnVsbCxcbiAgICAgIHByb2dyZXNzYmFyT3Bwb3NpdGU6IGZhbHNlLFxuICAgICAgdHlwZTogJ2J1bGxldHMnLFxuICAgICAgLy8gJ2J1bGxldHMnIG9yICdwcm9ncmVzc2Jhcicgb3IgJ2ZyYWN0aW9uJyBvciAnY3VzdG9tJ1xuICAgICAgZHluYW1pY0J1bGxldHM6IGZhbHNlLFxuICAgICAgZHluYW1pY01haW5CdWxsZXRzOiAxLFxuICAgICAgZm9ybWF0RnJhY3Rpb25DdXJyZW50OiBudW1iZXIgPT4gbnVtYmVyLFxuICAgICAgZm9ybWF0RnJhY3Rpb25Ub3RhbDogbnVtYmVyID0+IG51bWJlcixcbiAgICAgIGJ1bGxldENsYXNzOiBgJHtwZnh9LWJ1bGxldGAsXG4gICAgICBidWxsZXRBY3RpdmVDbGFzczogYCR7cGZ4fS1idWxsZXQtYWN0aXZlYCxcbiAgICAgIG1vZGlmaWVyQ2xhc3M6IGAke3BmeH0tYCxcbiAgICAgIGN1cnJlbnRDbGFzczogYCR7cGZ4fS1jdXJyZW50YCxcbiAgICAgIHRvdGFsQ2xhc3M6IGAke3BmeH0tdG90YWxgLFxuICAgICAgaGlkZGVuQ2xhc3M6IGAke3BmeH0taGlkZGVuYCxcbiAgICAgIHByb2dyZXNzYmFyRmlsbENsYXNzOiBgJHtwZnh9LXByb2dyZXNzYmFyLWZpbGxgLFxuICAgICAgcHJvZ3Jlc3NiYXJPcHBvc2l0ZUNsYXNzOiBgJHtwZnh9LXByb2dyZXNzYmFyLW9wcG9zaXRlYCxcbiAgICAgIGNsaWNrYWJsZUNsYXNzOiBgJHtwZnh9LWNsaWNrYWJsZWAsXG4gICAgICBsb2NrQ2xhc3M6IGAke3BmeH0tbG9ja2AsXG4gICAgICBob3Jpem9udGFsQ2xhc3M6IGAke3BmeH0taG9yaXpvbnRhbGAsXG4gICAgICB2ZXJ0aWNhbENsYXNzOiBgJHtwZnh9LXZlcnRpY2FsYCxcbiAgICAgIHBhZ2luYXRpb25EaXNhYmxlZENsYXNzOiBgJHtwZnh9LWRpc2FibGVkYFxuICAgIH1cbiAgfSk7XG4gIHN3aXBlci5wYWdpbmF0aW9uID0ge1xuICAgIGVsOiBudWxsLFxuICAgIGJ1bGxldHM6IFtdXG4gIH07XG4gIGxldCBidWxsZXRTaXplO1xuICBsZXQgZHluYW1pY0J1bGxldEluZGV4ID0gMDtcbiAgZnVuY3Rpb24gaXNQYWdpbmF0aW9uRGlzYWJsZWQoKSB7XG4gICAgcmV0dXJuICFzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uZWwgfHwgIXN3aXBlci5wYWdpbmF0aW9uLmVsIHx8IEFycmF5LmlzQXJyYXkoc3dpcGVyLnBhZ2luYXRpb24uZWwpICYmIHN3aXBlci5wYWdpbmF0aW9uLmVsLmxlbmd0aCA9PT0gMDtcbiAgfVxuICBmdW5jdGlvbiBzZXRTaWRlQnVsbGV0cyhidWxsZXRFbCwgcG9zaXRpb24pIHtcbiAgICBjb25zdCB7XG4gICAgICBidWxsZXRBY3RpdmVDbGFzc1xuICAgIH0gPSBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb247XG4gICAgaWYgKCFidWxsZXRFbCkgcmV0dXJuO1xuICAgIGJ1bGxldEVsID0gYnVsbGV0RWxbYCR7cG9zaXRpb24gPT09ICdwcmV2JyA/ICdwcmV2aW91cycgOiAnbmV4dCd9RWxlbWVudFNpYmxpbmdgXTtcbiAgICBpZiAoYnVsbGV0RWwpIHtcbiAgICAgIGJ1bGxldEVsLmNsYXNzTGlzdC5hZGQoYCR7YnVsbGV0QWN0aXZlQ2xhc3N9LSR7cG9zaXRpb259YCk7XG4gICAgICBidWxsZXRFbCA9IGJ1bGxldEVsW2Ake3Bvc2l0aW9uID09PSAncHJldicgPyAncHJldmlvdXMnIDogJ25leHQnfUVsZW1lbnRTaWJsaW5nYF07XG4gICAgICBpZiAoYnVsbGV0RWwpIHtcbiAgICAgICAgYnVsbGV0RWwuY2xhc3NMaXN0LmFkZChgJHtidWxsZXRBY3RpdmVDbGFzc30tJHtwb3NpdGlvbn0tJHtwb3NpdGlvbn1gKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gb25CdWxsZXRDbGljayhlKSB7XG4gICAgY29uc3QgYnVsbGV0RWwgPSBlLnRhcmdldC5jbG9zZXN0KGNsYXNzZXNUb1NlbGVjdG9yKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5idWxsZXRDbGFzcykpO1xuICAgIGlmICghYnVsbGV0RWwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGNvbnN0IGluZGV4ID0gZWxlbWVudEluZGV4KGJ1bGxldEVsKSAqIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgaWYgKHN3aXBlci5yZWFsSW5kZXggPT09IGluZGV4KSByZXR1cm47XG4gICAgICBzd2lwZXIuc2xpZGVUb0xvb3AoaW5kZXgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhpbmRleCk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICAvLyBSZW5kZXIgfHwgVXBkYXRlIFBhZ2luYXRpb24gYnVsbGV0cy9pdGVtc1xuICAgIGNvbnN0IHJ0bCA9IHN3aXBlci5ydGw7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uO1xuICAgIGlmIChpc1BhZ2luYXRpb25EaXNhYmxlZCgpKSByZXR1cm47XG4gICAgbGV0IGVsID0gc3dpcGVyLnBhZ2luYXRpb24uZWw7XG4gICAgZWwgPSBtYWtlRWxlbWVudHNBcnJheShlbCk7XG4gICAgLy8gQ3VycmVudC9Ub3RhbFxuICAgIGxldCBjdXJyZW50O1xuICAgIGxldCBwcmV2aW91c0luZGV4O1xuICAgIGNvbnN0IHNsaWRlc0xlbmd0aCA9IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCA6IHN3aXBlci5zbGlkZXMubGVuZ3RoO1xuICAgIGNvbnN0IHRvdGFsID0gc3dpcGVyLnBhcmFtcy5sb29wID8gTWF0aC5jZWlsKHNsaWRlc0xlbmd0aCAvIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXApIDogc3dpcGVyLnNuYXBHcmlkLmxlbmd0aDtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICBwcmV2aW91c0luZGV4ID0gc3dpcGVyLnByZXZpb3VzUmVhbEluZGV4IHx8IDA7XG4gICAgICBjdXJyZW50ID0gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCA+IDEgPyBNYXRoLmZsb29yKHN3aXBlci5yZWFsSW5kZXggLyBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwKSA6IHN3aXBlci5yZWFsSW5kZXg7XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygc3dpcGVyLnNuYXBJbmRleCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGN1cnJlbnQgPSBzd2lwZXIuc25hcEluZGV4O1xuICAgICAgcHJldmlvdXNJbmRleCA9IHN3aXBlci5wcmV2aW91c1NuYXBJbmRleDtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJldmlvdXNJbmRleCA9IHN3aXBlci5wcmV2aW91c0luZGV4IHx8IDA7XG4gICAgICBjdXJyZW50ID0gc3dpcGVyLmFjdGl2ZUluZGV4IHx8IDA7XG4gICAgfVxuICAgIC8vIFR5cGVzXG4gICAgaWYgKHBhcmFtcy50eXBlID09PSAnYnVsbGV0cycgJiYgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cyAmJiBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IGJ1bGxldHMgPSBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzO1xuICAgICAgbGV0IGZpcnN0SW5kZXg7XG4gICAgICBsZXQgbGFzdEluZGV4O1xuICAgICAgbGV0IG1pZEluZGV4O1xuICAgICAgaWYgKHBhcmFtcy5keW5hbWljQnVsbGV0cykge1xuICAgICAgICBidWxsZXRTaXplID0gZWxlbWVudE91dGVyU2l6ZShidWxsZXRzWzBdLCBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnd2lkdGgnIDogJ2hlaWdodCcsIHRydWUpO1xuICAgICAgICBlbC5mb3JFYWNoKHN1YkVsID0+IHtcbiAgICAgICAgICBzdWJFbC5zdHlsZVtzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnd2lkdGgnIDogJ2hlaWdodCddID0gYCR7YnVsbGV0U2l6ZSAqIChwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzICsgNCl9cHhgO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMgPiAxICYmIHByZXZpb3VzSW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGR5bmFtaWNCdWxsZXRJbmRleCArPSBjdXJyZW50IC0gKHByZXZpb3VzSW5kZXggfHwgMCk7XG4gICAgICAgICAgaWYgKGR5bmFtaWNCdWxsZXRJbmRleCA+IHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMgLSAxKSB7XG4gICAgICAgICAgICBkeW5hbWljQnVsbGV0SW5kZXggPSBwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzIC0gMTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGR5bmFtaWNCdWxsZXRJbmRleCA8IDApIHtcbiAgICAgICAgICAgIGR5bmFtaWNCdWxsZXRJbmRleCA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZpcnN0SW5kZXggPSBNYXRoLm1heChjdXJyZW50IC0gZHluYW1pY0J1bGxldEluZGV4LCAwKTtcbiAgICAgICAgbGFzdEluZGV4ID0gZmlyc3RJbmRleCArIChNYXRoLm1pbihidWxsZXRzLmxlbmd0aCwgcGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cykgLSAxKTtcbiAgICAgICAgbWlkSW5kZXggPSAobGFzdEluZGV4ICsgZmlyc3RJbmRleCkgLyAyO1xuICAgICAgfVxuICAgICAgYnVsbGV0cy5mb3JFYWNoKGJ1bGxldEVsID0+IHtcbiAgICAgICAgY29uc3QgY2xhc3Nlc1RvUmVtb3ZlID0gWy4uLlsnJywgJy1uZXh0JywgJy1uZXh0LW5leHQnLCAnLXByZXYnLCAnLXByZXYtcHJldicsICctbWFpbiddLm1hcChzdWZmaXggPT4gYCR7cGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzfSR7c3VmZml4fWApXS5tYXAocyA9PiB0eXBlb2YgcyA9PT0gJ3N0cmluZycgJiYgcy5pbmNsdWRlcygnICcpID8gcy5zcGxpdCgnICcpIDogcykuZmxhdCgpO1xuICAgICAgICBidWxsZXRFbC5jbGFzc0xpc3QucmVtb3ZlKC4uLmNsYXNzZXNUb1JlbW92ZSk7XG4gICAgICB9KTtcbiAgICAgIGlmIChlbC5sZW5ndGggPiAxKSB7XG4gICAgICAgIGJ1bGxldHMuZm9yRWFjaChidWxsZXQgPT4ge1xuICAgICAgICAgIGNvbnN0IGJ1bGxldEluZGV4ID0gZWxlbWVudEluZGV4KGJ1bGxldCk7XG4gICAgICAgICAgaWYgKGJ1bGxldEluZGV4ID09PSBjdXJyZW50KSB7XG4gICAgICAgICAgICBidWxsZXQuY2xhc3NMaXN0LmFkZCguLi5wYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3Muc3BsaXQoJyAnKSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChzd2lwZXIuaXNFbGVtZW50KSB7XG4gICAgICAgICAgICBidWxsZXQuc2V0QXR0cmlidXRlKCdwYXJ0JywgJ2J1bGxldCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocGFyYW1zLmR5bmFtaWNCdWxsZXRzKSB7XG4gICAgICAgICAgICBpZiAoYnVsbGV0SW5kZXggPj0gZmlyc3RJbmRleCAmJiBidWxsZXRJbmRleCA8PSBsYXN0SW5kZXgpIHtcbiAgICAgICAgICAgICAgYnVsbGV0LmNsYXNzTGlzdC5hZGQoLi4uYCR7cGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzfS1tYWluYC5zcGxpdCgnICcpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChidWxsZXRJbmRleCA9PT0gZmlyc3RJbmRleCkge1xuICAgICAgICAgICAgICBzZXRTaWRlQnVsbGV0cyhidWxsZXQsICdwcmV2Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYnVsbGV0SW5kZXggPT09IGxhc3RJbmRleCkge1xuICAgICAgICAgICAgICBzZXRTaWRlQnVsbGV0cyhidWxsZXQsICduZXh0Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGJ1bGxldCA9IGJ1bGxldHNbY3VycmVudF07XG4gICAgICAgIGlmIChidWxsZXQpIHtcbiAgICAgICAgICBidWxsZXQuY2xhc3NMaXN0LmFkZCguLi5wYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3Muc3BsaXQoJyAnKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN3aXBlci5pc0VsZW1lbnQpIHtcbiAgICAgICAgICBidWxsZXRzLmZvckVhY2goKGJ1bGxldEVsLCBidWxsZXRJbmRleCkgPT4ge1xuICAgICAgICAgICAgYnVsbGV0RWwuc2V0QXR0cmlidXRlKCdwYXJ0JywgYnVsbGV0SW5kZXggPT09IGN1cnJlbnQgPyAnYnVsbGV0LWFjdGl2ZScgOiAnYnVsbGV0Jyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcmFtcy5keW5hbWljQnVsbGV0cykge1xuICAgICAgICAgIGNvbnN0IGZpcnN0RGlzcGxheWVkQnVsbGV0ID0gYnVsbGV0c1tmaXJzdEluZGV4XTtcbiAgICAgICAgICBjb25zdCBsYXN0RGlzcGxheWVkQnVsbGV0ID0gYnVsbGV0c1tsYXN0SW5kZXhdO1xuICAgICAgICAgIGZvciAobGV0IGkgPSBmaXJzdEluZGV4OyBpIDw9IGxhc3RJbmRleDsgaSArPSAxKSB7XG4gICAgICAgICAgICBpZiAoYnVsbGV0c1tpXSkge1xuICAgICAgICAgICAgICBidWxsZXRzW2ldLmNsYXNzTGlzdC5hZGQoLi4uYCR7cGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzfS1tYWluYC5zcGxpdCgnICcpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgc2V0U2lkZUJ1bGxldHMoZmlyc3REaXNwbGF5ZWRCdWxsZXQsICdwcmV2Jyk7XG4gICAgICAgICAgc2V0U2lkZUJ1bGxldHMobGFzdERpc3BsYXllZEJ1bGxldCwgJ25leHQnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHBhcmFtcy5keW5hbWljQnVsbGV0cykge1xuICAgICAgICBjb25zdCBkeW5hbWljQnVsbGV0c0xlbmd0aCA9IE1hdGgubWluKGJ1bGxldHMubGVuZ3RoLCBwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzICsgNCk7XG4gICAgICAgIGNvbnN0IGJ1bGxldHNPZmZzZXQgPSAoYnVsbGV0U2l6ZSAqIGR5bmFtaWNCdWxsZXRzTGVuZ3RoIC0gYnVsbGV0U2l6ZSkgLyAyIC0gbWlkSW5kZXggKiBidWxsZXRTaXplO1xuICAgICAgICBjb25zdCBvZmZzZXRQcm9wID0gcnRsID8gJ3JpZ2h0JyA6ICdsZWZ0JztcbiAgICAgICAgYnVsbGV0cy5mb3JFYWNoKGJ1bGxldCA9PiB7XG4gICAgICAgICAgYnVsbGV0LnN0eWxlW3N3aXBlci5pc0hvcml6b250YWwoKSA/IG9mZnNldFByb3AgOiAndG9wJ10gPSBgJHtidWxsZXRzT2Zmc2V0fXB4YDtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIGVsLmZvckVhY2goKHN1YkVsLCBzdWJFbEluZGV4KSA9PiB7XG4gICAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdmcmFjdGlvbicpIHtcbiAgICAgICAgc3ViRWwucXVlcnlTZWxlY3RvckFsbChjbGFzc2VzVG9TZWxlY3RvcihwYXJhbXMuY3VycmVudENsYXNzKSkuZm9yRWFjaChmcmFjdGlvbkVsID0+IHtcbiAgICAgICAgICBmcmFjdGlvbkVsLnRleHRDb250ZW50ID0gcGFyYW1zLmZvcm1hdEZyYWN0aW9uQ3VycmVudChjdXJyZW50ICsgMSk7XG4gICAgICAgIH0pO1xuICAgICAgICBzdWJFbC5xdWVyeVNlbGVjdG9yQWxsKGNsYXNzZXNUb1NlbGVjdG9yKHBhcmFtcy50b3RhbENsYXNzKSkuZm9yRWFjaCh0b3RhbEVsID0+IHtcbiAgICAgICAgICB0b3RhbEVsLnRleHRDb250ZW50ID0gcGFyYW1zLmZvcm1hdEZyYWN0aW9uVG90YWwodG90YWwpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ3Byb2dyZXNzYmFyJykge1xuICAgICAgICBsZXQgcHJvZ3Jlc3NiYXJEaXJlY3Rpb247XG4gICAgICAgIGlmIChwYXJhbXMucHJvZ3Jlc3NiYXJPcHBvc2l0ZSkge1xuICAgICAgICAgIHByb2dyZXNzYmFyRGlyZWN0aW9uID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ3ZlcnRpY2FsJyA6ICdob3Jpem9udGFsJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcm9ncmVzc2JhckRpcmVjdGlvbiA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/ICdob3Jpem9udGFsJyA6ICd2ZXJ0aWNhbCc7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2NhbGUgPSAoY3VycmVudCArIDEpIC8gdG90YWw7XG4gICAgICAgIGxldCBzY2FsZVggPSAxO1xuICAgICAgICBsZXQgc2NhbGVZID0gMTtcbiAgICAgICAgaWYgKHByb2dyZXNzYmFyRGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgICAgICBzY2FsZVggPSBzY2FsZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzY2FsZVkgPSBzY2FsZTtcbiAgICAgICAgfVxuICAgICAgICBzdWJFbC5xdWVyeVNlbGVjdG9yQWxsKGNsYXNzZXNUb1NlbGVjdG9yKHBhcmFtcy5wcm9ncmVzc2JhckZpbGxDbGFzcykpLmZvckVhY2gocHJvZ3Jlc3NFbCA9PiB7XG4gICAgICAgICAgcHJvZ3Jlc3NFbC5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlM2QoMCwwLDApIHNjYWxlWCgke3NjYWxlWH0pIHNjYWxlWSgke3NjYWxlWX0pYDtcbiAgICAgICAgICBwcm9ncmVzc0VsLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IGAke3N3aXBlci5wYXJhbXMuc3BlZWR9bXNgO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2N1c3RvbScgJiYgcGFyYW1zLnJlbmRlckN1c3RvbSkge1xuICAgICAgICBzdWJFbC5pbm5lckhUTUwgPSBwYXJhbXMucmVuZGVyQ3VzdG9tKHN3aXBlciwgY3VycmVudCArIDEsIHRvdGFsKTtcbiAgICAgICAgaWYgKHN1YkVsSW5kZXggPT09IDApIGVtaXQoJ3BhZ2luYXRpb25SZW5kZXInLCBzdWJFbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoc3ViRWxJbmRleCA9PT0gMCkgZW1pdCgncGFnaW5hdGlvblJlbmRlcicsIHN1YkVsKTtcbiAgICAgICAgZW1pdCgncGFnaW5hdGlvblVwZGF0ZScsIHN1YkVsKTtcbiAgICAgIH1cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc3dpcGVyLmVuYWJsZWQpIHtcbiAgICAgICAgc3ViRWwuY2xhc3NMaXN0W3N3aXBlci5pc0xvY2tlZCA/ICdhZGQnIDogJ3JlbW92ZSddKHBhcmFtcy5sb2NrQ2xhc3MpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAvLyBSZW5kZXIgQ29udGFpbmVyXG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uO1xuICAgIGlmIChpc1BhZ2luYXRpb25EaXNhYmxlZCgpKSByZXR1cm47XG4gICAgY29uc3Qgc2xpZGVzTGVuZ3RoID0gc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQgPyBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoIDogc3dpcGVyLmdyaWQgJiYgc3dpcGVyLnBhcmFtcy5ncmlkLnJvd3MgPiAxID8gc3dpcGVyLnNsaWRlcy5sZW5ndGggLyBNYXRoLmNlaWwoc3dpcGVyLnBhcmFtcy5ncmlkLnJvd3MpIDogc3dpcGVyLnNsaWRlcy5sZW5ndGg7XG4gICAgbGV0IGVsID0gc3dpcGVyLnBhZ2luYXRpb24uZWw7XG4gICAgZWwgPSBtYWtlRWxlbWVudHNBcnJheShlbCk7XG4gICAgbGV0IHBhZ2luYXRpb25IVE1MID0gJyc7XG4gICAgaWYgKHBhcmFtcy50eXBlID09PSAnYnVsbGV0cycpIHtcbiAgICAgIGxldCBudW1iZXJPZkJ1bGxldHMgPSBzd2lwZXIucGFyYW1zLmxvb3AgPyBNYXRoLmNlaWwoc2xpZGVzTGVuZ3RoIC8gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCkgOiBzd2lwZXIuc25hcEdyaWQubGVuZ3RoO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZnJlZU1vZGUgJiYgc3dpcGVyLnBhcmFtcy5mcmVlTW9kZS5lbmFibGVkICYmIG51bWJlck9mQnVsbGV0cyA+IHNsaWRlc0xlbmd0aCkge1xuICAgICAgICBudW1iZXJPZkJ1bGxldHMgPSBzbGlkZXNMZW5ndGg7XG4gICAgICB9XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bWJlck9mQnVsbGV0czsgaSArPSAxKSB7XG4gICAgICAgIGlmIChwYXJhbXMucmVuZGVyQnVsbGV0KSB7XG4gICAgICAgICAgcGFnaW5hdGlvbkhUTUwgKz0gcGFyYW1zLnJlbmRlckJ1bGxldC5jYWxsKHN3aXBlciwgaSwgcGFyYW1zLmJ1bGxldENsYXNzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBwcmV0dGllci1pZ25vcmVcbiAgICAgICAgICBwYWdpbmF0aW9uSFRNTCArPSBgPCR7cGFyYW1zLmJ1bGxldEVsZW1lbnR9ICR7c3dpcGVyLmlzRWxlbWVudCA/ICdwYXJ0PVwiYnVsbGV0XCInIDogJyd9IGNsYXNzPVwiJHtwYXJhbXMuYnVsbGV0Q2xhc3N9XCI+PC8ke3BhcmFtcy5idWxsZXRFbGVtZW50fT5gO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2ZyYWN0aW9uJykge1xuICAgICAgaWYgKHBhcmFtcy5yZW5kZXJGcmFjdGlvbikge1xuICAgICAgICBwYWdpbmF0aW9uSFRNTCA9IHBhcmFtcy5yZW5kZXJGcmFjdGlvbi5jYWxsKHN3aXBlciwgcGFyYW1zLmN1cnJlbnRDbGFzcywgcGFyYW1zLnRvdGFsQ2xhc3MpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFnaW5hdGlvbkhUTUwgPSBgPHNwYW4gY2xhc3M9XCIke3BhcmFtcy5jdXJyZW50Q2xhc3N9XCI+PC9zcGFuPmAgKyAnIC8gJyArIGA8c3BhbiBjbGFzcz1cIiR7cGFyYW1zLnRvdGFsQ2xhc3N9XCI+PC9zcGFuPmA7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ3Byb2dyZXNzYmFyJykge1xuICAgICAgaWYgKHBhcmFtcy5yZW5kZXJQcm9ncmVzc2Jhcikge1xuICAgICAgICBwYWdpbmF0aW9uSFRNTCA9IHBhcmFtcy5yZW5kZXJQcm9ncmVzc2Jhci5jYWxsKHN3aXBlciwgcGFyYW1zLnByb2dyZXNzYmFyRmlsbENsYXNzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhZ2luYXRpb25IVE1MID0gYDxzcGFuIGNsYXNzPVwiJHtwYXJhbXMucHJvZ3Jlc3NiYXJGaWxsQ2xhc3N9XCI+PC9zcGFuPmA7XG4gICAgICB9XG4gICAgfVxuICAgIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMgPSBbXTtcbiAgICBlbC5mb3JFYWNoKHN1YkVsID0+IHtcbiAgICAgIGlmIChwYXJhbXMudHlwZSAhPT0gJ2N1c3RvbScpIHtcbiAgICAgICAgc3ViRWwuaW5uZXJIVE1MID0gcGFnaW5hdGlvbkhUTUwgfHwgJyc7XG4gICAgICB9XG4gICAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdidWxsZXRzJykge1xuICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzLnB1c2goLi4uc3ViRWwucXVlcnlTZWxlY3RvckFsbChjbGFzc2VzVG9TZWxlY3RvcihwYXJhbXMuYnVsbGV0Q2xhc3MpKSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKHBhcmFtcy50eXBlICE9PSAnY3VzdG9tJykge1xuICAgICAgZW1pdCgncGFnaW5hdGlvblJlbmRlcicsIGVsWzBdKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24gPSBjcmVhdGVFbGVtZW50SWZOb3REZWZpbmVkKHN3aXBlciwgc3dpcGVyLm9yaWdpbmFsUGFyYW1zLnBhZ2luYXRpb24sIHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbiwge1xuICAgICAgZWw6ICdzd2lwZXItcGFnaW5hdGlvbidcbiAgICB9KTtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb247XG4gICAgaWYgKCFwYXJhbXMuZWwpIHJldHVybjtcbiAgICBsZXQgZWw7XG4gICAgaWYgKHR5cGVvZiBwYXJhbXMuZWwgPT09ICdzdHJpbmcnICYmIHN3aXBlci5pc0VsZW1lbnQpIHtcbiAgICAgIGVsID0gc3dpcGVyLmVsLnF1ZXJ5U2VsZWN0b3IocGFyYW1zLmVsKTtcbiAgICB9XG4gICAgaWYgKCFlbCAmJiB0eXBlb2YgcGFyYW1zLmVsID09PSAnc3RyaW5nJykge1xuICAgICAgZWwgPSBbLi4uZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChwYXJhbXMuZWwpXTtcbiAgICB9XG4gICAgaWYgKCFlbCkge1xuICAgICAgZWwgPSBwYXJhbXMuZWw7XG4gICAgfVxuICAgIGlmICghZWwgfHwgZWwubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgaWYgKHN3aXBlci5wYXJhbXMudW5pcXVlTmF2RWxlbWVudHMgJiYgdHlwZW9mIHBhcmFtcy5lbCA9PT0gJ3N0cmluZycgJiYgQXJyYXkuaXNBcnJheShlbCkgJiYgZWwubGVuZ3RoID4gMSkge1xuICAgICAgZWwgPSBbLi4uc3dpcGVyLmVsLnF1ZXJ5U2VsZWN0b3JBbGwocGFyYW1zLmVsKV07XG4gICAgICAvLyBjaGVjayBpZiBpdCBiZWxvbmdzIHRvIGFub3RoZXIgbmVzdGVkIFN3aXBlclxuICAgICAgaWYgKGVsLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZWwgPSBlbC5maWx0ZXIoc3ViRWwgPT4ge1xuICAgICAgICAgIGlmIChlbGVtZW50UGFyZW50cyhzdWJFbCwgJy5zd2lwZXInKVswXSAhPT0gc3dpcGVyLmVsKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0pWzBdO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheShlbCkgJiYgZWwubGVuZ3RoID09PSAxKSBlbCA9IGVsWzBdO1xuICAgIE9iamVjdC5hc3NpZ24oc3dpcGVyLnBhZ2luYXRpb24sIHtcbiAgICAgIGVsXG4gICAgfSk7XG4gICAgZWwgPSBtYWtlRWxlbWVudHNBcnJheShlbCk7XG4gICAgZWwuZm9yRWFjaChzdWJFbCA9PiB7XG4gICAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdidWxsZXRzJyAmJiBwYXJhbXMuY2xpY2thYmxlKSB7XG4gICAgICAgIHN1YkVsLmNsYXNzTGlzdC5hZGQoLi4uKHBhcmFtcy5jbGlja2FibGVDbGFzcyB8fCAnJykuc3BsaXQoJyAnKSk7XG4gICAgICB9XG4gICAgICBzdWJFbC5jbGFzc0xpc3QuYWRkKHBhcmFtcy5tb2RpZmllckNsYXNzICsgcGFyYW1zLnR5cGUpO1xuICAgICAgc3ViRWwuY2xhc3NMaXN0LmFkZChzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBwYXJhbXMuaG9yaXpvbnRhbENsYXNzIDogcGFyYW1zLnZlcnRpY2FsQ2xhc3MpO1xuICAgICAgaWYgKHBhcmFtcy50eXBlID09PSAnYnVsbGV0cycgJiYgcGFyYW1zLmR5bmFtaWNCdWxsZXRzKSB7XG4gICAgICAgIHN1YkVsLmNsYXNzTGlzdC5hZGQoYCR7cGFyYW1zLm1vZGlmaWVyQ2xhc3N9JHtwYXJhbXMudHlwZX0tZHluYW1pY2ApO1xuICAgICAgICBkeW5hbWljQnVsbGV0SW5kZXggPSAwO1xuICAgICAgICBpZiAocGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyA8IDEpIHtcbiAgICAgICAgICBwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzID0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHBhcmFtcy50eXBlID09PSAncHJvZ3Jlc3NiYXInICYmIHBhcmFtcy5wcm9ncmVzc2Jhck9wcG9zaXRlKSB7XG4gICAgICAgIHN1YkVsLmNsYXNzTGlzdC5hZGQocGFyYW1zLnByb2dyZXNzYmFyT3Bwb3NpdGVDbGFzcyk7XG4gICAgICB9XG4gICAgICBpZiAocGFyYW1zLmNsaWNrYWJsZSkge1xuICAgICAgICBzdWJFbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIG9uQnVsbGV0Q2xpY2spO1xuICAgICAgfVxuICAgICAgaWYgKCFzd2lwZXIuZW5hYmxlZCkge1xuICAgICAgICBzdWJFbC5jbGFzc0xpc3QuYWRkKHBhcmFtcy5sb2NrQ2xhc3MpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uO1xuICAgIGlmIChpc1BhZ2luYXRpb25EaXNhYmxlZCgpKSByZXR1cm47XG4gICAgbGV0IGVsID0gc3dpcGVyLnBhZ2luYXRpb24uZWw7XG4gICAgaWYgKGVsKSB7XG4gICAgICBlbCA9IG1ha2VFbGVtZW50c0FycmF5KGVsKTtcbiAgICAgIGVsLmZvckVhY2goc3ViRWwgPT4ge1xuICAgICAgICBzdWJFbC5jbGFzc0xpc3QucmVtb3ZlKHBhcmFtcy5oaWRkZW5DbGFzcyk7XG4gICAgICAgIHN1YkVsLmNsYXNzTGlzdC5yZW1vdmUocGFyYW1zLm1vZGlmaWVyQ2xhc3MgKyBwYXJhbXMudHlwZSk7XG4gICAgICAgIHN1YkVsLmNsYXNzTGlzdC5yZW1vdmUoc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gcGFyYW1zLmhvcml6b250YWxDbGFzcyA6IHBhcmFtcy52ZXJ0aWNhbENsYXNzKTtcbiAgICAgICAgaWYgKHBhcmFtcy5jbGlja2FibGUpIHtcbiAgICAgICAgICBzdWJFbC5jbGFzc0xpc3QucmVtb3ZlKC4uLihwYXJhbXMuY2xpY2thYmxlQ2xhc3MgfHwgJycpLnNwbGl0KCcgJykpO1xuICAgICAgICAgIHN1YkVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25CdWxsZXRDbGljayk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cykgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cy5mb3JFYWNoKHN1YkVsID0+IHN1YkVsLmNsYXNzTGlzdC5yZW1vdmUoLi4ucGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzLnNwbGl0KCcgJykpKTtcbiAgfVxuICBvbignY2hhbmdlRGlyZWN0aW9uJywgKCkgPT4ge1xuICAgIGlmICghc3dpcGVyLnBhZ2luYXRpb24gfHwgIXN3aXBlci5wYWdpbmF0aW9uLmVsKSByZXR1cm47XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uO1xuICAgIGxldCB7XG4gICAgICBlbFxuICAgIH0gPSBzd2lwZXIucGFnaW5hdGlvbjtcbiAgICBlbCA9IG1ha2VFbGVtZW50c0FycmF5KGVsKTtcbiAgICBlbC5mb3JFYWNoKHN1YkVsID0+IHtcbiAgICAgIHN1YkVsLmNsYXNzTGlzdC5yZW1vdmUocGFyYW1zLmhvcml6b250YWxDbGFzcywgcGFyYW1zLnZlcnRpY2FsQ2xhc3MpO1xuICAgICAgc3ViRWwuY2xhc3NMaXN0LmFkZChzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBwYXJhbXMuaG9yaXpvbnRhbENsYXNzIDogcGFyYW1zLnZlcnRpY2FsQ2xhc3MpO1xuICAgIH0pO1xuICB9KTtcbiAgb24oJ2luaXQnLCAoKSA9PiB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5lbmFibGVkID09PSBmYWxzZSkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICBkaXNhYmxlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGluaXQoKTtcbiAgICAgIHJlbmRlcigpO1xuICAgICAgdXBkYXRlKCk7XG4gICAgfVxuICB9KTtcbiAgb24oJ2FjdGl2ZUluZGV4Q2hhbmdlJywgKCkgPT4ge1xuICAgIGlmICh0eXBlb2Ygc3dpcGVyLnNuYXBJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHVwZGF0ZSgpO1xuICAgIH1cbiAgfSk7XG4gIG9uKCdzbmFwSW5kZXhDaGFuZ2UnLCAoKSA9PiB7XG4gICAgdXBkYXRlKCk7XG4gIH0pO1xuICBvbignc25hcEdyaWRMZW5ndGhDaGFuZ2UnLCAoKSA9PiB7XG4gICAgcmVuZGVyKCk7XG4gICAgdXBkYXRlKCk7XG4gIH0pO1xuICBvbignZGVzdHJveScsICgpID0+IHtcbiAgICBkZXN0cm95KCk7XG4gIH0pO1xuICBvbignZW5hYmxlIGRpc2FibGUnLCAoKSA9PiB7XG4gICAgbGV0IHtcbiAgICAgIGVsXG4gICAgfSA9IHN3aXBlci5wYWdpbmF0aW9uO1xuICAgIGlmIChlbCkge1xuICAgICAgZWwgPSBtYWtlRWxlbWVudHNBcnJheShlbCk7XG4gICAgICBlbC5mb3JFYWNoKHN1YkVsID0+IHN1YkVsLmNsYXNzTGlzdFtzd2lwZXIuZW5hYmxlZCA/ICdyZW1vdmUnIDogJ2FkZCddKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5sb2NrQ2xhc3MpKTtcbiAgICB9XG4gIH0pO1xuICBvbignbG9jayB1bmxvY2snLCAoKSA9PiB7XG4gICAgdXBkYXRlKCk7XG4gIH0pO1xuICBvbignY2xpY2snLCAoX3MsIGUpID0+IHtcbiAgICBjb25zdCB0YXJnZXRFbCA9IGUudGFyZ2V0O1xuICAgIGNvbnN0IGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoc3dpcGVyLnBhZ2luYXRpb24uZWwpO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uZWwgJiYgc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmhpZGVPbkNsaWNrICYmIGVsICYmIGVsLmxlbmd0aCA+IDAgJiYgIXRhcmdldEVsLmNsYXNzTGlzdC5jb250YWlucyhzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uYnVsbGV0Q2xhc3MpKSB7XG4gICAgICBpZiAoc3dpcGVyLm5hdmlnYXRpb24gJiYgKHN3aXBlci5uYXZpZ2F0aW9uLm5leHRFbCAmJiB0YXJnZXRFbCA9PT0gc3dpcGVyLm5hdmlnYXRpb24ubmV4dEVsIHx8IHN3aXBlci5uYXZpZ2F0aW9uLnByZXZFbCAmJiB0YXJnZXRFbCA9PT0gc3dpcGVyLm5hdmlnYXRpb24ucHJldkVsKSkgcmV0dXJuO1xuICAgICAgY29uc3QgaXNIaWRkZW4gPSBlbFswXS5jbGFzc0xpc3QuY29udGFpbnMoc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmhpZGRlbkNsYXNzKTtcbiAgICAgIGlmIChpc0hpZGRlbiA9PT0gdHJ1ZSkge1xuICAgICAgICBlbWl0KCdwYWdpbmF0aW9uU2hvdycpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZW1pdCgncGFnaW5hdGlvbkhpZGUnKTtcbiAgICAgIH1cbiAgICAgIGVsLmZvckVhY2goc3ViRWwgPT4gc3ViRWwuY2xhc3NMaXN0LnRvZ2dsZShzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uaGlkZGVuQ2xhc3MpKTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBlbmFibGUgPSAoKSA9PiB7XG4gICAgc3dpcGVyLmVsLmNsYXNzTGlzdC5yZW1vdmUoc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLnBhZ2luYXRpb25EaXNhYmxlZENsYXNzKTtcbiAgICBsZXQge1xuICAgICAgZWxcbiAgICB9ID0gc3dpcGVyLnBhZ2luYXRpb247XG4gICAgaWYgKGVsKSB7XG4gICAgICBlbCA9IG1ha2VFbGVtZW50c0FycmF5KGVsKTtcbiAgICAgIGVsLmZvckVhY2goc3ViRWwgPT4gc3ViRWwuY2xhc3NMaXN0LnJlbW92ZShzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24ucGFnaW5hdGlvbkRpc2FibGVkQ2xhc3MpKTtcbiAgICB9XG4gICAgaW5pdCgpO1xuICAgIHJlbmRlcigpO1xuICAgIHVwZGF0ZSgpO1xuICB9O1xuICBjb25zdCBkaXNhYmxlID0gKCkgPT4ge1xuICAgIHN3aXBlci5lbC5jbGFzc0xpc3QuYWRkKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5wYWdpbmF0aW9uRGlzYWJsZWRDbGFzcyk7XG4gICAgbGV0IHtcbiAgICAgIGVsXG4gICAgfSA9IHN3aXBlci5wYWdpbmF0aW9uO1xuICAgIGlmIChlbCkge1xuICAgICAgZWwgPSBtYWtlRWxlbWVudHNBcnJheShlbCk7XG4gICAgICBlbC5mb3JFYWNoKHN1YkVsID0+IHN1YkVsLmNsYXNzTGlzdC5hZGQoc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLnBhZ2luYXRpb25EaXNhYmxlZENsYXNzKSk7XG4gICAgfVxuICAgIGRlc3Ryb3koKTtcbiAgfTtcbiAgT2JqZWN0LmFzc2lnbihzd2lwZXIucGFnaW5hdGlvbiwge1xuICAgIGVuYWJsZSxcbiAgICBkaXNhYmxlLFxuICAgIHJlbmRlcixcbiAgICB1cGRhdGUsXG4gICAgaW5pdCxcbiAgICBkZXN0cm95XG4gIH0pO1xufVxuXG5leHBvcnQgeyBQYWdpbmF0aW9uIGFzIGRlZmF1bHQgfTtcbiIsImltcG9ydCB7IGcgYXMgZ2V0RG9jdW1lbnQgfSBmcm9tICcuLi9zaGFyZWQvc3NyLXdpbmRvdy5lc20ubWpzJztcblxuLyogZXNsaW50IG5vLXVuZGVyc2NvcmUtZGFuZ2xlOiBcIm9mZlwiICovXG4vKiBlc2xpbnQgbm8tdXNlLWJlZm9yZS1kZWZpbmU6IFwib2ZmXCIgKi9cbmZ1bmN0aW9uIEF1dG9wbGF5KF9yZWYpIHtcbiAgbGV0IHtcbiAgICBzd2lwZXIsXG4gICAgZXh0ZW5kUGFyYW1zLFxuICAgIG9uLFxuICAgIGVtaXQsXG4gICAgcGFyYW1zXG4gIH0gPSBfcmVmO1xuICBzd2lwZXIuYXV0b3BsYXkgPSB7XG4gICAgcnVubmluZzogZmFsc2UsXG4gICAgcGF1c2VkOiBmYWxzZSxcbiAgICB0aW1lTGVmdDogMFxuICB9O1xuICBleHRlbmRQYXJhbXMoe1xuICAgIGF1dG9wbGF5OiB7XG4gICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgIGRlbGF5OiAzMDAwLFxuICAgICAgd2FpdEZvclRyYW5zaXRpb246IHRydWUsXG4gICAgICBkaXNhYmxlT25JbnRlcmFjdGlvbjogZmFsc2UsXG4gICAgICBzdG9wT25MYXN0U2xpZGU6IGZhbHNlLFxuICAgICAgcmV2ZXJzZURpcmVjdGlvbjogZmFsc2UsXG4gICAgICBwYXVzZU9uTW91c2VFbnRlcjogZmFsc2VcbiAgICB9XG4gIH0pO1xuICBsZXQgdGltZW91dDtcbiAgbGV0IHJhZjtcbiAgbGV0IGF1dG9wbGF5RGVsYXlUb3RhbCA9IHBhcmFtcyAmJiBwYXJhbXMuYXV0b3BsYXkgPyBwYXJhbXMuYXV0b3BsYXkuZGVsYXkgOiAzMDAwO1xuICBsZXQgYXV0b3BsYXlEZWxheUN1cnJlbnQgPSBwYXJhbXMgJiYgcGFyYW1zLmF1dG9wbGF5ID8gcGFyYW1zLmF1dG9wbGF5LmRlbGF5IDogMzAwMDtcbiAgbGV0IGF1dG9wbGF5VGltZUxlZnQ7XG4gIGxldCBhdXRvcGxheVN0YXJ0VGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICBsZXQgd2FzUGF1c2VkO1xuICBsZXQgaXNUb3VjaGVkO1xuICBsZXQgcGF1c2VkQnlUb3VjaDtcbiAgbGV0IHRvdWNoU3RhcnRUaW1lb3V0O1xuICBsZXQgc2xpZGVDaGFuZ2VkO1xuICBsZXQgcGF1c2VkQnlJbnRlcmFjdGlvbjtcbiAgbGV0IHBhdXNlZEJ5UG9pbnRlckVudGVyO1xuICBmdW5jdGlvbiBvblRyYW5zaXRpb25FbmQoZSkge1xuICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQgfHwgIXN3aXBlci53cmFwcGVyRWwpIHJldHVybjtcbiAgICBpZiAoZS50YXJnZXQgIT09IHN3aXBlci53cmFwcGVyRWwpIHJldHVybjtcbiAgICBzd2lwZXIud3JhcHBlckVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBvblRyYW5zaXRpb25FbmQpO1xuICAgIGlmIChwYXVzZWRCeVBvaW50ZXJFbnRlciB8fCBlLmRldGFpbCAmJiBlLmRldGFpbC5ieVN3aXBlclRvdWNoTW92ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXN1bWUoKTtcbiAgfVxuICBjb25zdCBjYWxjVGltZUxlZnQgPSAoKSA9PiB7XG4gICAgaWYgKHN3aXBlci5kZXN0cm95ZWQgfHwgIXN3aXBlci5hdXRvcGxheS5ydW5uaW5nKSByZXR1cm47XG4gICAgaWYgKHN3aXBlci5hdXRvcGxheS5wYXVzZWQpIHtcbiAgICAgIHdhc1BhdXNlZCA9IHRydWU7XG4gICAgfSBlbHNlIGlmICh3YXNQYXVzZWQpIHtcbiAgICAgIGF1dG9wbGF5RGVsYXlDdXJyZW50ID0gYXV0b3BsYXlUaW1lTGVmdDtcbiAgICAgIHdhc1BhdXNlZCA9IGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCB0aW1lTGVmdCA9IHN3aXBlci5hdXRvcGxheS5wYXVzZWQgPyBhdXRvcGxheVRpbWVMZWZ0IDogYXV0b3BsYXlTdGFydFRpbWUgKyBhdXRvcGxheURlbGF5Q3VycmVudCAtIG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgIHN3aXBlci5hdXRvcGxheS50aW1lTGVmdCA9IHRpbWVMZWZ0O1xuICAgIGVtaXQoJ2F1dG9wbGF5VGltZUxlZnQnLCB0aW1lTGVmdCwgdGltZUxlZnQgLyBhdXRvcGxheURlbGF5VG90YWwpO1xuICAgIHJhZiA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICBjYWxjVGltZUxlZnQoKTtcbiAgICB9KTtcbiAgfTtcbiAgY29uc3QgZ2V0U2xpZGVEZWxheSA9ICgpID0+IHtcbiAgICBsZXQgYWN0aXZlU2xpZGVFbDtcbiAgICBpZiAoc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpIHtcbiAgICAgIGFjdGl2ZVNsaWRlRWwgPSBzd2lwZXIuc2xpZGVzLmZpbHRlcihzbGlkZUVsID0+IHNsaWRlRWwuY2xhc3NMaXN0LmNvbnRhaW5zKCdzd2lwZXItc2xpZGUtYWN0aXZlJykpWzBdO1xuICAgIH0gZWxzZSB7XG4gICAgICBhY3RpdmVTbGlkZUVsID0gc3dpcGVyLnNsaWRlc1tzd2lwZXIuYWN0aXZlSW5kZXhdO1xuICAgIH1cbiAgICBpZiAoIWFjdGl2ZVNsaWRlRWwpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgY29uc3QgY3VycmVudFNsaWRlRGVsYXkgPSBwYXJzZUludChhY3RpdmVTbGlkZUVsLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItYXV0b3BsYXknKSwgMTApO1xuICAgIHJldHVybiBjdXJyZW50U2xpZGVEZWxheTtcbiAgfTtcbiAgY29uc3QgcnVuID0gZGVsYXlGb3JjZSA9PiB7XG4gICAgaWYgKHN3aXBlci5kZXN0cm95ZWQgfHwgIXN3aXBlci5hdXRvcGxheS5ydW5uaW5nKSByZXR1cm47XG4gICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUocmFmKTtcbiAgICBjYWxjVGltZUxlZnQoKTtcbiAgICBsZXQgZGVsYXkgPSB0eXBlb2YgZGVsYXlGb3JjZSA9PT0gJ3VuZGVmaW5lZCcgPyBzd2lwZXIucGFyYW1zLmF1dG9wbGF5LmRlbGF5IDogZGVsYXlGb3JjZTtcbiAgICBhdXRvcGxheURlbGF5VG90YWwgPSBzd2lwZXIucGFyYW1zLmF1dG9wbGF5LmRlbGF5O1xuICAgIGF1dG9wbGF5RGVsYXlDdXJyZW50ID0gc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5kZWxheTtcbiAgICBjb25zdCBjdXJyZW50U2xpZGVEZWxheSA9IGdldFNsaWRlRGVsYXkoKTtcbiAgICBpZiAoIU51bWJlci5pc05hTihjdXJyZW50U2xpZGVEZWxheSkgJiYgY3VycmVudFNsaWRlRGVsYXkgPiAwICYmIHR5cGVvZiBkZWxheUZvcmNlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgZGVsYXkgPSBjdXJyZW50U2xpZGVEZWxheTtcbiAgICAgIGF1dG9wbGF5RGVsYXlUb3RhbCA9IGN1cnJlbnRTbGlkZURlbGF5O1xuICAgICAgYXV0b3BsYXlEZWxheUN1cnJlbnQgPSBjdXJyZW50U2xpZGVEZWxheTtcbiAgICB9XG4gICAgYXV0b3BsYXlUaW1lTGVmdCA9IGRlbGF5O1xuICAgIGNvbnN0IHNwZWVkID0gc3dpcGVyLnBhcmFtcy5zcGVlZDtcbiAgICBjb25zdCBwcm9jZWVkID0gKCkgPT4ge1xuICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuYXV0b3BsYXkucmV2ZXJzZURpcmVjdGlvbikge1xuICAgICAgICBpZiAoIXN3aXBlci5pc0JlZ2lubmluZyB8fCBzd2lwZXIucGFyYW1zLmxvb3AgfHwgc3dpcGVyLnBhcmFtcy5yZXdpbmQpIHtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVQcmV2KHNwZWVkLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgICBlbWl0KCdhdXRvcGxheScpO1xuICAgICAgICB9IGVsc2UgaWYgKCFzd2lwZXIucGFyYW1zLmF1dG9wbGF5LnN0b3BPbkxhc3RTbGlkZSkge1xuICAgICAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gMSwgc3BlZWQsIHRydWUsIHRydWUpO1xuICAgICAgICAgIGVtaXQoJ2F1dG9wbGF5Jyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghc3dpcGVyLmlzRW5kIHx8IHN3aXBlci5wYXJhbXMubG9vcCB8fCBzd2lwZXIucGFyYW1zLnJld2luZCkge1xuICAgICAgICAgIHN3aXBlci5zbGlkZU5leHQoc3BlZWQsIHRydWUsIHRydWUpO1xuICAgICAgICAgIGVtaXQoJ2F1dG9wbGF5Jyk7XG4gICAgICAgIH0gZWxzZSBpZiAoIXN3aXBlci5wYXJhbXMuYXV0b3BsYXkuc3RvcE9uTGFzdFNsaWRlKSB7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlVG8oMCwgc3BlZWQsIHRydWUsIHRydWUpO1xuICAgICAgICAgIGVtaXQoJ2F1dG9wbGF5Jyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgICAgYXV0b3BsYXlTdGFydFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICBydW4oKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBpZiAoZGVsYXkgPiAwKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICB0aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHByb2NlZWQoKTtcbiAgICAgIH0sIGRlbGF5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgcHJvY2VlZCgpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgcmV0dXJuIGRlbGF5O1xuICB9O1xuICBjb25zdCBzdGFydCA9ICgpID0+IHtcbiAgICBhdXRvcGxheVN0YXJ0VGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgIHN3aXBlci5hdXRvcGxheS5ydW5uaW5nID0gdHJ1ZTtcbiAgICBydW4oKTtcbiAgICBlbWl0KCdhdXRvcGxheVN0YXJ0Jyk7XG4gIH07XG4gIGNvbnN0IHN0b3AgPSAoKSA9PiB7XG4gICAgc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcgPSBmYWxzZTtcbiAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUocmFmKTtcbiAgICBlbWl0KCdhdXRvcGxheVN0b3AnKTtcbiAgfTtcbiAgY29uc3QgcGF1c2UgPSAoaW50ZXJuYWwsIHJlc2V0KSA9PiB7XG4gICAgaWYgKHN3aXBlci5kZXN0cm95ZWQgfHwgIXN3aXBlci5hdXRvcGxheS5ydW5uaW5nKSByZXR1cm47XG4gICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgIGlmICghaW50ZXJuYWwpIHtcbiAgICAgIHBhdXNlZEJ5SW50ZXJhY3Rpb24gPSB0cnVlO1xuICAgIH1cbiAgICBjb25zdCBwcm9jZWVkID0gKCkgPT4ge1xuICAgICAgZW1pdCgnYXV0b3BsYXlQYXVzZScpO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuYXV0b3BsYXkud2FpdEZvclRyYW5zaXRpb24pIHtcbiAgICAgICAgc3dpcGVyLndyYXBwZXJFbC5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgb25UcmFuc2l0aW9uRW5kKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VtZSgpO1xuICAgICAgfVxuICAgIH07XG4gICAgc3dpcGVyLmF1dG9wbGF5LnBhdXNlZCA9IHRydWU7XG4gICAgaWYgKHJlc2V0KSB7XG4gICAgICBpZiAoc2xpZGVDaGFuZ2VkKSB7XG4gICAgICAgIGF1dG9wbGF5VGltZUxlZnQgPSBzd2lwZXIucGFyYW1zLmF1dG9wbGF5LmRlbGF5O1xuICAgICAgfVxuICAgICAgc2xpZGVDaGFuZ2VkID0gZmFsc2U7XG4gICAgICBwcm9jZWVkKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGRlbGF5ID0gYXV0b3BsYXlUaW1lTGVmdCB8fCBzd2lwZXIucGFyYW1zLmF1dG9wbGF5LmRlbGF5O1xuICAgIGF1dG9wbGF5VGltZUxlZnQgPSBkZWxheSAtIChuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIGF1dG9wbGF5U3RhcnRUaW1lKTtcbiAgICBpZiAoc3dpcGVyLmlzRW5kICYmIGF1dG9wbGF5VGltZUxlZnQgPCAwICYmICFzd2lwZXIucGFyYW1zLmxvb3ApIHJldHVybjtcbiAgICBpZiAoYXV0b3BsYXlUaW1lTGVmdCA8IDApIGF1dG9wbGF5VGltZUxlZnQgPSAwO1xuICAgIHByb2NlZWQoKTtcbiAgfTtcbiAgY29uc3QgcmVzdW1lID0gKCkgPT4ge1xuICAgIGlmIChzd2lwZXIuaXNFbmQgJiYgYXV0b3BsYXlUaW1lTGVmdCA8IDAgJiYgIXN3aXBlci5wYXJhbXMubG9vcCB8fCBzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIuYXV0b3BsYXkucnVubmluZykgcmV0dXJuO1xuICAgIGF1dG9wbGF5U3RhcnRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgaWYgKHBhdXNlZEJ5SW50ZXJhY3Rpb24pIHtcbiAgICAgIHBhdXNlZEJ5SW50ZXJhY3Rpb24gPSBmYWxzZTtcbiAgICAgIHJ1bihhdXRvcGxheVRpbWVMZWZ0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcnVuKCk7XG4gICAgfVxuICAgIHN3aXBlci5hdXRvcGxheS5wYXVzZWQgPSBmYWxzZTtcbiAgICBlbWl0KCdhdXRvcGxheVJlc3VtZScpO1xuICB9O1xuICBjb25zdCBvblZpc2liaWxpdHlDaGFuZ2UgPSAoKSA9PiB7XG4gICAgaWYgKHN3aXBlci5kZXN0cm95ZWQgfHwgIXN3aXBlci5hdXRvcGxheS5ydW5uaW5nKSByZXR1cm47XG4gICAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICAgIGlmIChkb2N1bWVudC52aXNpYmlsaXR5U3RhdGUgPT09ICdoaWRkZW4nKSB7XG4gICAgICBwYXVzZWRCeUludGVyYWN0aW9uID0gdHJ1ZTtcbiAgICAgIHBhdXNlKHRydWUpO1xuICAgIH1cbiAgICBpZiAoZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlID09PSAndmlzaWJsZScpIHtcbiAgICAgIHJlc3VtZSgpO1xuICAgIH1cbiAgfTtcbiAgY29uc3Qgb25Qb2ludGVyRW50ZXIgPSBlID0+IHtcbiAgICBpZiAoZS5wb2ludGVyVHlwZSAhPT0gJ21vdXNlJykgcmV0dXJuO1xuICAgIHBhdXNlZEJ5SW50ZXJhY3Rpb24gPSB0cnVlO1xuICAgIHBhdXNlZEJ5UG9pbnRlckVudGVyID0gdHJ1ZTtcbiAgICBpZiAoc3dpcGVyLmFuaW1hdGluZyB8fCBzd2lwZXIuYXV0b3BsYXkucGF1c2VkKSByZXR1cm47XG4gICAgcGF1c2UodHJ1ZSk7XG4gIH07XG4gIGNvbnN0IG9uUG9pbnRlckxlYXZlID0gZSA9PiB7XG4gICAgaWYgKGUucG9pbnRlclR5cGUgIT09ICdtb3VzZScpIHJldHVybjtcbiAgICBwYXVzZWRCeVBvaW50ZXJFbnRlciA9IGZhbHNlO1xuICAgIGlmIChzd2lwZXIuYXV0b3BsYXkucGF1c2VkKSB7XG4gICAgICByZXN1bWUoKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IGF0dGFjaE1vdXNlRXZlbnRzID0gKCkgPT4ge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmF1dG9wbGF5LnBhdXNlT25Nb3VzZUVudGVyKSB7XG4gICAgICBzd2lwZXIuZWwuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcmVudGVyJywgb25Qb2ludGVyRW50ZXIpO1xuICAgICAgc3dpcGVyLmVsLmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJsZWF2ZScsIG9uUG9pbnRlckxlYXZlKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IGRldGFjaE1vdXNlRXZlbnRzID0gKCkgPT4ge1xuICAgIGlmIChzd2lwZXIuZWwgJiYgdHlwZW9mIHN3aXBlci5lbCAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHN3aXBlci5lbC5yZW1vdmVFdmVudExpc3RlbmVyKCdwb2ludGVyZW50ZXInLCBvblBvaW50ZXJFbnRlcik7XG4gICAgICBzd2lwZXIuZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9pbnRlcmxlYXZlJywgb25Qb2ludGVyTGVhdmUpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgYXR0YWNoRG9jdW1lbnRFdmVudHMgPSAoKSA9PiB7XG4gICAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnLCBvblZpc2liaWxpdHlDaGFuZ2UpO1xuICB9O1xuICBjb25zdCBkZXRhY2hEb2N1bWVudEV2ZW50cyA9ICgpID0+IHtcbiAgICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndmlzaWJpbGl0eWNoYW5nZScsIG9uVmlzaWJpbGl0eUNoYW5nZSk7XG4gIH07XG4gIG9uKCdpbml0JywgKCkgPT4ge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmF1dG9wbGF5LmVuYWJsZWQpIHtcbiAgICAgIGF0dGFjaE1vdXNlRXZlbnRzKCk7XG4gICAgICBhdHRhY2hEb2N1bWVudEV2ZW50cygpO1xuICAgICAgc3RhcnQoKTtcbiAgICB9XG4gIH0pO1xuICBvbignZGVzdHJveScsICgpID0+IHtcbiAgICBkZXRhY2hNb3VzZUV2ZW50cygpO1xuICAgIGRldGFjaERvY3VtZW50RXZlbnRzKCk7XG4gICAgaWYgKHN3aXBlci5hdXRvcGxheS5ydW5uaW5nKSB7XG4gICAgICBzdG9wKCk7XG4gICAgfVxuICB9KTtcbiAgb24oJ19mcmVlTW9kZVN0YXRpY1JlbGVhc2UnLCAoKSA9PiB7XG4gICAgaWYgKHBhdXNlZEJ5VG91Y2ggfHwgcGF1c2VkQnlJbnRlcmFjdGlvbikge1xuICAgICAgcmVzdW1lKCk7XG4gICAgfVxuICB9KTtcbiAgb24oJ19mcmVlTW9kZU5vTW9tZW50dW1SZWxlYXNlJywgKCkgPT4ge1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5kaXNhYmxlT25JbnRlcmFjdGlvbikge1xuICAgICAgcGF1c2UodHJ1ZSwgdHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0b3AoKTtcbiAgICB9XG4gIH0pO1xuICBvbignYmVmb3JlVHJhbnNpdGlvblN0YXJ0JywgKF9zLCBzcGVlZCwgaW50ZXJuYWwpID0+IHtcbiAgICBpZiAoc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcpIHJldHVybjtcbiAgICBpZiAoaW50ZXJuYWwgfHwgIXN3aXBlci5wYXJhbXMuYXV0b3BsYXkuZGlzYWJsZU9uSW50ZXJhY3Rpb24pIHtcbiAgICAgIHBhdXNlKHRydWUsIHRydWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdG9wKCk7XG4gICAgfVxuICB9KTtcbiAgb24oJ3NsaWRlckZpcnN0TW92ZScsICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcpIHJldHVybjtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5kaXNhYmxlT25JbnRlcmFjdGlvbikge1xuICAgICAgc3RvcCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpc1RvdWNoZWQgPSB0cnVlO1xuICAgIHBhdXNlZEJ5VG91Y2ggPSBmYWxzZTtcbiAgICBwYXVzZWRCeUludGVyYWN0aW9uID0gZmFsc2U7XG4gICAgdG91Y2hTdGFydFRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHBhdXNlZEJ5SW50ZXJhY3Rpb24gPSB0cnVlO1xuICAgICAgcGF1c2VkQnlUb3VjaCA9IHRydWU7XG4gICAgICBwYXVzZSh0cnVlKTtcbiAgICB9LCAyMDApO1xuICB9KTtcbiAgb24oJ3RvdWNoRW5kJywgKCkgPT4ge1xuICAgIGlmIChzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIuYXV0b3BsYXkucnVubmluZyB8fCAhaXNUb3VjaGVkKSByZXR1cm47XG4gICAgY2xlYXJUaW1lb3V0KHRvdWNoU3RhcnRUaW1lb3V0KTtcbiAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuYXV0b3BsYXkuZGlzYWJsZU9uSW50ZXJhY3Rpb24pIHtcbiAgICAgIHBhdXNlZEJ5VG91Y2ggPSBmYWxzZTtcbiAgICAgIGlzVG91Y2hlZCA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAocGF1c2VkQnlUb3VjaCAmJiBzd2lwZXIucGFyYW1zLmNzc01vZGUpIHJlc3VtZSgpO1xuICAgIHBhdXNlZEJ5VG91Y2ggPSBmYWxzZTtcbiAgICBpc1RvdWNoZWQgPSBmYWxzZTtcbiAgfSk7XG4gIG9uKCdzbGlkZUNoYW5nZScsICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcpIHJldHVybjtcbiAgICBzbGlkZUNoYW5nZWQgPSB0cnVlO1xuICB9KTtcbiAgT2JqZWN0LmFzc2lnbihzd2lwZXIuYXV0b3BsYXksIHtcbiAgICBzdGFydCxcbiAgICBzdG9wLFxuICAgIHBhdXNlLFxuICAgIHJlc3VtZVxuICB9KTtcbn1cblxuZXhwb3J0IHsgQXV0b3BsYXkgYXMgZGVmYXVsdCB9O1xuIiwiLyoqXG4gKiBTU1IgV2luZG93IDQuMC4yXG4gKiBCZXR0ZXIgaGFuZGxpbmcgZm9yIHdpbmRvdyBvYmplY3QgaW4gU1NSIGVudmlyb25tZW50XG4gKiBodHRwczovL2dpdGh1Yi5jb20vbm9saW1pdHM0d2ViL3Nzci13aW5kb3dcbiAqXG4gKiBDb3B5cmlnaHQgMjAyMSwgVmxhZGltaXIgS2hhcmxhbXBpZGlcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciBNSVRcbiAqXG4gKiBSZWxlYXNlZCBvbjogRGVjZW1iZXIgMTMsIDIwMjFcbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tcGFyYW0tcmVhc3NpZ24gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KG9iaikge1xuICByZXR1cm4gb2JqICE9PSBudWxsICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmICdjb25zdHJ1Y3RvcicgaW4gb2JqICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0O1xufVxuZnVuY3Rpb24gZXh0ZW5kKHRhcmdldCwgc3JjKSB7XG4gIGlmICh0YXJnZXQgPT09IHZvaWQgMCkge1xuICAgIHRhcmdldCA9IHt9O1xuICB9XG4gIGlmIChzcmMgPT09IHZvaWQgMCkge1xuICAgIHNyYyA9IHt9O1xuICB9XG4gIE9iamVjdC5rZXlzKHNyYykuZm9yRWFjaChrZXkgPT4ge1xuICAgIGlmICh0eXBlb2YgdGFyZ2V0W2tleV0gPT09ICd1bmRlZmluZWQnKSB0YXJnZXRba2V5XSA9IHNyY1trZXldO2Vsc2UgaWYgKGlzT2JqZWN0KHNyY1trZXldKSAmJiBpc09iamVjdCh0YXJnZXRba2V5XSkgJiYgT2JqZWN0LmtleXMoc3JjW2tleV0pLmxlbmd0aCA+IDApIHtcbiAgICAgIGV4dGVuZCh0YXJnZXRba2V5XSwgc3JjW2tleV0pO1xuICAgIH1cbiAgfSk7XG59XG5jb25zdCBzc3JEb2N1bWVudCA9IHtcbiAgYm9keToge30sXG4gIGFkZEV2ZW50TGlzdGVuZXIoKSB7fSxcbiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcigpIHt9LFxuICBhY3RpdmVFbGVtZW50OiB7XG4gICAgYmx1cigpIHt9LFxuICAgIG5vZGVOYW1lOiAnJ1xuICB9LFxuICBxdWVyeVNlbGVjdG9yKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9LFxuICBxdWVyeVNlbGVjdG9yQWxsKCkge1xuICAgIHJldHVybiBbXTtcbiAgfSxcbiAgZ2V0RWxlbWVudEJ5SWQoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG4gIGNyZWF0ZUV2ZW50KCkge1xuICAgIHJldHVybiB7XG4gICAgICBpbml0RXZlbnQoKSB7fVxuICAgIH07XG4gIH0sXG4gIGNyZWF0ZUVsZW1lbnQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNoaWxkcmVuOiBbXSxcbiAgICAgIGNoaWxkTm9kZXM6IFtdLFxuICAgICAgc3R5bGU6IHt9LFxuICAgICAgc2V0QXR0cmlidXRlKCkge30sXG4gICAgICBnZXRFbGVtZW50c0J5VGFnTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgIH07XG4gIH0sXG4gIGNyZWF0ZUVsZW1lbnROUygpIHtcbiAgICByZXR1cm4ge307XG4gIH0sXG4gIGltcG9ydE5vZGUoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG4gIGxvY2F0aW9uOiB7XG4gICAgaGFzaDogJycsXG4gICAgaG9zdDogJycsXG4gICAgaG9zdG5hbWU6ICcnLFxuICAgIGhyZWY6ICcnLFxuICAgIG9yaWdpbjogJycsXG4gICAgcGF0aG5hbWU6ICcnLFxuICAgIHByb3RvY29sOiAnJyxcbiAgICBzZWFyY2g6ICcnXG4gIH1cbn07XG5mdW5jdGlvbiBnZXREb2N1bWVudCgpIHtcbiAgY29uc3QgZG9jID0gdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyA/IGRvY3VtZW50IDoge307XG4gIGV4dGVuZChkb2MsIHNzckRvY3VtZW50KTtcbiAgcmV0dXJuIGRvYztcbn1cbmNvbnN0IHNzcldpbmRvdyA9IHtcbiAgZG9jdW1lbnQ6IHNzckRvY3VtZW50LFxuICBuYXZpZ2F0b3I6IHtcbiAgICB1c2VyQWdlbnQ6ICcnXG4gIH0sXG4gIGxvY2F0aW9uOiB7XG4gICAgaGFzaDogJycsXG4gICAgaG9zdDogJycsXG4gICAgaG9zdG5hbWU6ICcnLFxuICAgIGhyZWY6ICcnLFxuICAgIG9yaWdpbjogJycsXG4gICAgcGF0aG5hbWU6ICcnLFxuICAgIHByb3RvY29sOiAnJyxcbiAgICBzZWFyY2g6ICcnXG4gIH0sXG4gIGhpc3Rvcnk6IHtcbiAgICByZXBsYWNlU3RhdGUoKSB7fSxcbiAgICBwdXNoU3RhdGUoKSB7fSxcbiAgICBnbygpIHt9LFxuICAgIGJhY2soKSB7fVxuICB9LFxuICBDdXN0b21FdmVudDogZnVuY3Rpb24gQ3VzdG9tRXZlbnQoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIGFkZEV2ZW50TGlzdGVuZXIoKSB7fSxcbiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcigpIHt9LFxuICBnZXRDb21wdXRlZFN0eWxlKCkge1xuICAgIHJldHVybiB7XG4gICAgICBnZXRQcm9wZXJ0eVZhbHVlKCkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG4gICAgfTtcbiAgfSxcbiAgSW1hZ2UoKSB7fSxcbiAgRGF0ZSgpIHt9LFxuICBzY3JlZW46IHt9LFxuICBzZXRUaW1lb3V0KCkge30sXG4gIGNsZWFyVGltZW91dCgpIHt9LFxuICBtYXRjaE1lZGlhKCkge1xuICAgIHJldHVybiB7fTtcbiAgfSxcbiAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGNhbGxiYWNrKSB7XG4gICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgY2FsbGJhY2soKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gc2V0VGltZW91dChjYWxsYmFjaywgMCk7XG4gIH0sXG4gIGNhbmNlbEFuaW1hdGlvbkZyYW1lKGlkKSB7XG4gICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjbGVhclRpbWVvdXQoaWQpO1xuICB9XG59O1xuZnVuY3Rpb24gZ2V0V2luZG93KCkge1xuICBjb25zdCB3aW4gPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHt9O1xuICBleHRlbmQod2luLCBzc3JXaW5kb3cpO1xuICByZXR1cm4gd2luO1xufVxuXG5leHBvcnQgeyBnZXRXaW5kb3cgYXMgYSwgZ2V0RG9jdW1lbnQgYXMgZyB9O1xuIiwiaW1wb3J0IHsgYSBhcyBnZXRXaW5kb3csIGcgYXMgZ2V0RG9jdW1lbnQgfSBmcm9tICcuL3Nzci13aW5kb3cuZXNtLm1qcyc7XG5cbmZ1bmN0aW9uIGNsYXNzZXNUb1Rva2VucyhjbGFzc2VzKSB7XG4gIGlmIChjbGFzc2VzID09PSB2b2lkIDApIHtcbiAgICBjbGFzc2VzID0gJyc7XG4gIH1cbiAgcmV0dXJuIGNsYXNzZXMudHJpbSgpLnNwbGl0KCcgJykuZmlsdGVyKGMgPT4gISFjLnRyaW0oKSk7XG59XG5cbmZ1bmN0aW9uIGRlbGV0ZVByb3BzKG9iaikge1xuICBjb25zdCBvYmplY3QgPSBvYmo7XG4gIE9iamVjdC5rZXlzKG9iamVjdCkuZm9yRWFjaChrZXkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBvYmplY3Rba2V5XSA9IG51bGw7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gbm8gZ2V0dGVyIGZvciBvYmplY3RcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIGRlbGV0ZSBvYmplY3Rba2V5XTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBzb21ldGhpbmcgZ290IHdyb25nXG4gICAgfVxuICB9KTtcbn1cbmZ1bmN0aW9uIG5leHRUaWNrKGNhbGxiYWNrLCBkZWxheSkge1xuICBpZiAoZGVsYXkgPT09IHZvaWQgMCkge1xuICAgIGRlbGF5ID0gMDtcbiAgfVxuICByZXR1cm4gc2V0VGltZW91dChjYWxsYmFjaywgZGVsYXkpO1xufVxuZnVuY3Rpb24gbm93KCkge1xuICByZXR1cm4gRGF0ZS5ub3coKTtcbn1cbmZ1bmN0aW9uIGdldENvbXB1dGVkU3R5bGUoZWwpIHtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGxldCBzdHlsZTtcbiAgaWYgKHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKSB7XG4gICAgc3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCwgbnVsbCk7XG4gIH1cbiAgaWYgKCFzdHlsZSAmJiBlbC5jdXJyZW50U3R5bGUpIHtcbiAgICBzdHlsZSA9IGVsLmN1cnJlbnRTdHlsZTtcbiAgfVxuICBpZiAoIXN0eWxlKSB7XG4gICAgc3R5bGUgPSBlbC5zdHlsZTtcbiAgfVxuICByZXR1cm4gc3R5bGU7XG59XG5mdW5jdGlvbiBnZXRUcmFuc2xhdGUoZWwsIGF4aXMpIHtcbiAgaWYgKGF4aXMgPT09IHZvaWQgMCkge1xuICAgIGF4aXMgPSAneCc7XG4gIH1cbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGxldCBtYXRyaXg7XG4gIGxldCBjdXJUcmFuc2Zvcm07XG4gIGxldCB0cmFuc2Zvcm1NYXRyaXg7XG4gIGNvbnN0IGN1clN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShlbCk7XG4gIGlmICh3aW5kb3cuV2ViS2l0Q1NTTWF0cml4KSB7XG4gICAgY3VyVHJhbnNmb3JtID0gY3VyU3R5bGUudHJhbnNmb3JtIHx8IGN1clN0eWxlLndlYmtpdFRyYW5zZm9ybTtcbiAgICBpZiAoY3VyVHJhbnNmb3JtLnNwbGl0KCcsJykubGVuZ3RoID4gNikge1xuICAgICAgY3VyVHJhbnNmb3JtID0gY3VyVHJhbnNmb3JtLnNwbGl0KCcsICcpLm1hcChhID0+IGEucmVwbGFjZSgnLCcsICcuJykpLmpvaW4oJywgJyk7XG4gICAgfVxuICAgIC8vIFNvbWUgb2xkIHZlcnNpb25zIG9mIFdlYmtpdCBjaG9rZSB3aGVuICdub25lJyBpcyBwYXNzZWQ7IHBhc3NcbiAgICAvLyBlbXB0eSBzdHJpbmcgaW5zdGVhZCBpbiB0aGlzIGNhc2VcbiAgICB0cmFuc2Zvcm1NYXRyaXggPSBuZXcgd2luZG93LldlYktpdENTU01hdHJpeChjdXJUcmFuc2Zvcm0gPT09ICdub25lJyA/ICcnIDogY3VyVHJhbnNmb3JtKTtcbiAgfSBlbHNlIHtcbiAgICB0cmFuc2Zvcm1NYXRyaXggPSBjdXJTdHlsZS5Nb3pUcmFuc2Zvcm0gfHwgY3VyU3R5bGUuT1RyYW5zZm9ybSB8fCBjdXJTdHlsZS5Nc1RyYW5zZm9ybSB8fCBjdXJTdHlsZS5tc1RyYW5zZm9ybSB8fCBjdXJTdHlsZS50cmFuc2Zvcm0gfHwgY3VyU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgndHJhbnNmb3JtJykucmVwbGFjZSgndHJhbnNsYXRlKCcsICdtYXRyaXgoMSwgMCwgMCwgMSwnKTtcbiAgICBtYXRyaXggPSB0cmFuc2Zvcm1NYXRyaXgudG9TdHJpbmcoKS5zcGxpdCgnLCcpO1xuICB9XG4gIGlmIChheGlzID09PSAneCcpIHtcbiAgICAvLyBMYXRlc3QgQ2hyb21lIGFuZCB3ZWJraXRzIEZpeFxuICAgIGlmICh3aW5kb3cuV2ViS2l0Q1NTTWF0cml4KSBjdXJUcmFuc2Zvcm0gPSB0cmFuc2Zvcm1NYXRyaXgubTQxO1xuICAgIC8vIENyYXp5IElFMTAgTWF0cml4XG4gICAgZWxzZSBpZiAobWF0cml4Lmxlbmd0aCA9PT0gMTYpIGN1clRyYW5zZm9ybSA9IHBhcnNlRmxvYXQobWF0cml4WzEyXSk7XG4gICAgLy8gTm9ybWFsIEJyb3dzZXJzXG4gICAgZWxzZSBjdXJUcmFuc2Zvcm0gPSBwYXJzZUZsb2F0KG1hdHJpeFs0XSk7XG4gIH1cbiAgaWYgKGF4aXMgPT09ICd5Jykge1xuICAgIC8vIExhdGVzdCBDaHJvbWUgYW5kIHdlYmtpdHMgRml4XG4gICAgaWYgKHdpbmRvdy5XZWJLaXRDU1NNYXRyaXgpIGN1clRyYW5zZm9ybSA9IHRyYW5zZm9ybU1hdHJpeC5tNDI7XG4gICAgLy8gQ3JhenkgSUUxMCBNYXRyaXhcbiAgICBlbHNlIGlmIChtYXRyaXgubGVuZ3RoID09PSAxNikgY3VyVHJhbnNmb3JtID0gcGFyc2VGbG9hdChtYXRyaXhbMTNdKTtcbiAgICAvLyBOb3JtYWwgQnJvd3NlcnNcbiAgICBlbHNlIGN1clRyYW5zZm9ybSA9IHBhcnNlRmxvYXQobWF0cml4WzVdKTtcbiAgfVxuICByZXR1cm4gY3VyVHJhbnNmb3JtIHx8IDA7XG59XG5mdW5jdGlvbiBpc09iamVjdChvKSB7XG4gIHJldHVybiB0eXBlb2YgbyA9PT0gJ29iamVjdCcgJiYgbyAhPT0gbnVsbCAmJiBvLmNvbnN0cnVjdG9yICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSkgPT09ICdPYmplY3QnO1xufVxuZnVuY3Rpb24gaXNOb2RlKG5vZGUpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LkhUTUxFbGVtZW50ICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBub2RlIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQ7XG4gIH1cbiAgcmV0dXJuIG5vZGUgJiYgKG5vZGUubm9kZVR5cGUgPT09IDEgfHwgbm9kZS5ub2RlVHlwZSA9PT0gMTEpO1xufVxuZnVuY3Rpb24gZXh0ZW5kKCkge1xuICBjb25zdCB0byA9IE9iamVjdChhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF0pO1xuICBjb25zdCBub0V4dGVuZCA9IFsnX19wcm90b19fJywgJ2NvbnN0cnVjdG9yJywgJ3Byb3RvdHlwZSddO1xuICBmb3IgKGxldCBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGNvbnN0IG5leHRTb3VyY2UgPSBpIDwgMCB8fCBhcmd1bWVudHMubGVuZ3RoIDw9IGkgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbaV07XG4gICAgaWYgKG5leHRTb3VyY2UgIT09IHVuZGVmaW5lZCAmJiBuZXh0U291cmNlICE9PSBudWxsICYmICFpc05vZGUobmV4dFNvdXJjZSkpIHtcbiAgICAgIGNvbnN0IGtleXNBcnJheSA9IE9iamVjdC5rZXlzKE9iamVjdChuZXh0U291cmNlKSkuZmlsdGVyKGtleSA9PiBub0V4dGVuZC5pbmRleE9mKGtleSkgPCAwKTtcbiAgICAgIGZvciAobGV0IG5leHRJbmRleCA9IDAsIGxlbiA9IGtleXNBcnJheS5sZW5ndGg7IG5leHRJbmRleCA8IGxlbjsgbmV4dEluZGV4ICs9IDEpIHtcbiAgICAgICAgY29uc3QgbmV4dEtleSA9IGtleXNBcnJheVtuZXh0SW5kZXhdO1xuICAgICAgICBjb25zdCBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihuZXh0U291cmNlLCBuZXh0S2V5KTtcbiAgICAgICAgaWYgKGRlc2MgIT09IHVuZGVmaW5lZCAmJiBkZXNjLmVudW1lcmFibGUpIHtcbiAgICAgICAgICBpZiAoaXNPYmplY3QodG9bbmV4dEtleV0pICYmIGlzT2JqZWN0KG5leHRTb3VyY2VbbmV4dEtleV0pKSB7XG4gICAgICAgICAgICBpZiAobmV4dFNvdXJjZVtuZXh0S2V5XS5fX3N3aXBlcl9fKSB7XG4gICAgICAgICAgICAgIHRvW25leHRLZXldID0gbmV4dFNvdXJjZVtuZXh0S2V5XTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGV4dGVuZCh0b1tuZXh0S2V5XSwgbmV4dFNvdXJjZVtuZXh0S2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmICghaXNPYmplY3QodG9bbmV4dEtleV0pICYmIGlzT2JqZWN0KG5leHRTb3VyY2VbbmV4dEtleV0pKSB7XG4gICAgICAgICAgICB0b1tuZXh0S2V5XSA9IHt9O1xuICAgICAgICAgICAgaWYgKG5leHRTb3VyY2VbbmV4dEtleV0uX19zd2lwZXJfXykge1xuICAgICAgICAgICAgICB0b1tuZXh0S2V5XSA9IG5leHRTb3VyY2VbbmV4dEtleV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBleHRlbmQodG9bbmV4dEtleV0sIG5leHRTb3VyY2VbbmV4dEtleV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0b1tuZXh0S2V5XSA9IG5leHRTb3VyY2VbbmV4dEtleV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB0bztcbn1cbmZ1bmN0aW9uIHNldENTU1Byb3BlcnR5KGVsLCB2YXJOYW1lLCB2YXJWYWx1ZSkge1xuICBlbC5zdHlsZS5zZXRQcm9wZXJ0eSh2YXJOYW1lLCB2YXJWYWx1ZSk7XG59XG5mdW5jdGlvbiBhbmltYXRlQ1NTTW9kZVNjcm9sbChfcmVmKSB7XG4gIGxldCB7XG4gICAgc3dpcGVyLFxuICAgIHRhcmdldFBvc2l0aW9uLFxuICAgIHNpZGVcbiAgfSA9IF9yZWY7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBjb25zdCBzdGFydFBvc2l0aW9uID0gLXN3aXBlci50cmFuc2xhdGU7XG4gIGxldCBzdGFydFRpbWUgPSBudWxsO1xuICBsZXQgdGltZTtcbiAgY29uc3QgZHVyYXRpb24gPSBzd2lwZXIucGFyYW1zLnNwZWVkO1xuICBzd2lwZXIud3JhcHBlckVsLnN0eWxlLnNjcm9sbFNuYXBUeXBlID0gJ25vbmUnO1xuICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUoc3dpcGVyLmNzc01vZGVGcmFtZUlEKTtcbiAgY29uc3QgZGlyID0gdGFyZ2V0UG9zaXRpb24gPiBzdGFydFBvc2l0aW9uID8gJ25leHQnIDogJ3ByZXYnO1xuICBjb25zdCBpc091dE9mQm91bmQgPSAoY3VycmVudCwgdGFyZ2V0KSA9PiB7XG4gICAgcmV0dXJuIGRpciA9PT0gJ25leHQnICYmIGN1cnJlbnQgPj0gdGFyZ2V0IHx8IGRpciA9PT0gJ3ByZXYnICYmIGN1cnJlbnQgPD0gdGFyZ2V0O1xuICB9O1xuICBjb25zdCBhbmltYXRlID0gKCkgPT4ge1xuICAgIHRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICBpZiAoc3RhcnRUaW1lID09PSBudWxsKSB7XG4gICAgICBzdGFydFRpbWUgPSB0aW1lO1xuICAgIH1cbiAgICBjb25zdCBwcm9ncmVzcyA9IE1hdGgubWF4KE1hdGgubWluKCh0aW1lIC0gc3RhcnRUaW1lKSAvIGR1cmF0aW9uLCAxKSwgMCk7XG4gICAgY29uc3QgZWFzZVByb2dyZXNzID0gMC41IC0gTWF0aC5jb3MocHJvZ3Jlc3MgKiBNYXRoLlBJKSAvIDI7XG4gICAgbGV0IGN1cnJlbnRQb3NpdGlvbiA9IHN0YXJ0UG9zaXRpb24gKyBlYXNlUHJvZ3Jlc3MgKiAodGFyZ2V0UG9zaXRpb24gLSBzdGFydFBvc2l0aW9uKTtcbiAgICBpZiAoaXNPdXRPZkJvdW5kKGN1cnJlbnRQb3NpdGlvbiwgdGFyZ2V0UG9zaXRpb24pKSB7XG4gICAgICBjdXJyZW50UG9zaXRpb24gPSB0YXJnZXRQb3NpdGlvbjtcbiAgICB9XG4gICAgc3dpcGVyLndyYXBwZXJFbC5zY3JvbGxUbyh7XG4gICAgICBbc2lkZV06IGN1cnJlbnRQb3NpdGlvblxuICAgIH0pO1xuICAgIGlmIChpc091dE9mQm91bmQoY3VycmVudFBvc2l0aW9uLCB0YXJnZXRQb3NpdGlvbikpIHtcbiAgICAgIHN3aXBlci53cmFwcGVyRWwuc3R5bGUub3ZlcmZsb3cgPSAnaGlkZGVuJztcbiAgICAgIHN3aXBlci53cmFwcGVyRWwuc3R5bGUuc2Nyb2xsU25hcFR5cGUgPSAnJztcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBzd2lwZXIud3JhcHBlckVsLnN0eWxlLm92ZXJmbG93ID0gJyc7XG4gICAgICAgIHN3aXBlci53cmFwcGVyRWwuc2Nyb2xsVG8oe1xuICAgICAgICAgIFtzaWRlXTogY3VycmVudFBvc2l0aW9uXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUoc3dpcGVyLmNzc01vZGVGcmFtZUlEKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc3dpcGVyLmNzc01vZGVGcmFtZUlEID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShhbmltYXRlKTtcbiAgfTtcbiAgYW5pbWF0ZSgpO1xufVxuZnVuY3Rpb24gZ2V0U2xpZGVUcmFuc2Zvcm1FbChzbGlkZUVsKSB7XG4gIHJldHVybiBzbGlkZUVsLnF1ZXJ5U2VsZWN0b3IoJy5zd2lwZXItc2xpZGUtdHJhbnNmb3JtJykgfHwgc2xpZGVFbC5zaGFkb3dSb290ICYmIHNsaWRlRWwuc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKCcuc3dpcGVyLXNsaWRlLXRyYW5zZm9ybScpIHx8IHNsaWRlRWw7XG59XG5mdW5jdGlvbiBlbGVtZW50Q2hpbGRyZW4oZWxlbWVudCwgc2VsZWN0b3IpIHtcbiAgaWYgKHNlbGVjdG9yID09PSB2b2lkIDApIHtcbiAgICBzZWxlY3RvciA9ICcnO1xuICB9XG4gIHJldHVybiBbLi4uZWxlbWVudC5jaGlsZHJlbl0uZmlsdGVyKGVsID0+IGVsLm1hdGNoZXMoc2VsZWN0b3IpKTtcbn1cbmZ1bmN0aW9uIHNob3dXYXJuaW5nKHRleHQpIHtcbiAgdHJ5IHtcbiAgICBjb25zb2xlLndhcm4odGV4dCk7XG4gICAgcmV0dXJuO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBlcnJcbiAgfVxufVxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudCh0YWcsIGNsYXNzZXMpIHtcbiAgaWYgKGNsYXNzZXMgPT09IHZvaWQgMCkge1xuICAgIGNsYXNzZXMgPSBbXTtcbiAgfVxuICBjb25zdCBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnKTtcbiAgZWwuY2xhc3NMaXN0LmFkZCguLi4oQXJyYXkuaXNBcnJheShjbGFzc2VzKSA/IGNsYXNzZXMgOiBjbGFzc2VzVG9Ub2tlbnMoY2xhc3NlcykpKTtcbiAgcmV0dXJuIGVsO1xufVxuZnVuY3Rpb24gZWxlbWVudE9mZnNldChlbCkge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICBjb25zdCBib3ggPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgY29uc3QgYm9keSA9IGRvY3VtZW50LmJvZHk7XG4gIGNvbnN0IGNsaWVudFRvcCA9IGVsLmNsaWVudFRvcCB8fCBib2R5LmNsaWVudFRvcCB8fCAwO1xuICBjb25zdCBjbGllbnRMZWZ0ID0gZWwuY2xpZW50TGVmdCB8fCBib2R5LmNsaWVudExlZnQgfHwgMDtcbiAgY29uc3Qgc2Nyb2xsVG9wID0gZWwgPT09IHdpbmRvdyA/IHdpbmRvdy5zY3JvbGxZIDogZWwuc2Nyb2xsVG9wO1xuICBjb25zdCBzY3JvbGxMZWZ0ID0gZWwgPT09IHdpbmRvdyA/IHdpbmRvdy5zY3JvbGxYIDogZWwuc2Nyb2xsTGVmdDtcbiAgcmV0dXJuIHtcbiAgICB0b3A6IGJveC50b3AgKyBzY3JvbGxUb3AgLSBjbGllbnRUb3AsXG4gICAgbGVmdDogYm94LmxlZnQgKyBzY3JvbGxMZWZ0IC0gY2xpZW50TGVmdFxuICB9O1xufVxuZnVuY3Rpb24gZWxlbWVudFByZXZBbGwoZWwsIHNlbGVjdG9yKSB7XG4gIGNvbnN0IHByZXZFbHMgPSBbXTtcbiAgd2hpbGUgKGVsLnByZXZpb3VzRWxlbWVudFNpYmxpbmcpIHtcbiAgICBjb25zdCBwcmV2ID0gZWwucHJldmlvdXNFbGVtZW50U2libGluZzsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgaWYgKHByZXYubWF0Y2hlcyhzZWxlY3RvcikpIHByZXZFbHMucHVzaChwcmV2KTtcbiAgICB9IGVsc2UgcHJldkVscy5wdXNoKHByZXYpO1xuICAgIGVsID0gcHJldjtcbiAgfVxuICByZXR1cm4gcHJldkVscztcbn1cbmZ1bmN0aW9uIGVsZW1lbnROZXh0QWxsKGVsLCBzZWxlY3Rvcikge1xuICBjb25zdCBuZXh0RWxzID0gW107XG4gIHdoaWxlIChlbC5uZXh0RWxlbWVudFNpYmxpbmcpIHtcbiAgICBjb25zdCBuZXh0ID0gZWwubmV4dEVsZW1lbnRTaWJsaW5nOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICBpZiAobmV4dC5tYXRjaGVzKHNlbGVjdG9yKSkgbmV4dEVscy5wdXNoKG5leHQpO1xuICAgIH0gZWxzZSBuZXh0RWxzLnB1c2gobmV4dCk7XG4gICAgZWwgPSBuZXh0O1xuICB9XG4gIHJldHVybiBuZXh0RWxzO1xufVxuZnVuY3Rpb24gZWxlbWVudFN0eWxlKGVsLCBwcm9wKSB7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICByZXR1cm4gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwsIG51bGwpLmdldFByb3BlcnR5VmFsdWUocHJvcCk7XG59XG5mdW5jdGlvbiBlbGVtZW50SW5kZXgoZWwpIHtcbiAgbGV0IGNoaWxkID0gZWw7XG4gIGxldCBpO1xuICBpZiAoY2hpbGQpIHtcbiAgICBpID0gMDtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICB3aGlsZSAoKGNoaWxkID0gY2hpbGQucHJldmlvdXNTaWJsaW5nKSAhPT0gbnVsbCkge1xuICAgICAgaWYgKGNoaWxkLm5vZGVUeXBlID09PSAxKSBpICs9IDE7XG4gICAgfVxuICAgIHJldHVybiBpO1xuICB9XG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5mdW5jdGlvbiBlbGVtZW50UGFyZW50cyhlbCwgc2VsZWN0b3IpIHtcbiAgY29uc3QgcGFyZW50cyA9IFtdOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gIGxldCBwYXJlbnQgPSBlbC5wYXJlbnRFbGVtZW50OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gIHdoaWxlIChwYXJlbnQpIHtcbiAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgIGlmIChwYXJlbnQubWF0Y2hlcyhzZWxlY3RvcikpIHBhcmVudHMucHVzaChwYXJlbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXJlbnRzLnB1c2gocGFyZW50KTtcbiAgICB9XG4gICAgcGFyZW50ID0gcGFyZW50LnBhcmVudEVsZW1lbnQ7XG4gIH1cbiAgcmV0dXJuIHBhcmVudHM7XG59XG5mdW5jdGlvbiBlbGVtZW50VHJhbnNpdGlvbkVuZChlbCwgY2FsbGJhY2spIHtcbiAgZnVuY3Rpb24gZmlyZUNhbGxCYWNrKGUpIHtcbiAgICBpZiAoZS50YXJnZXQgIT09IGVsKSByZXR1cm47XG4gICAgY2FsbGJhY2suY2FsbChlbCwgZSk7XG4gICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIGZpcmVDYWxsQmFjayk7XG4gIH1cbiAgaWYgKGNhbGxiYWNrKSB7XG4gICAgZWwuYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIGZpcmVDYWxsQmFjayk7XG4gIH1cbn1cbmZ1bmN0aW9uIGVsZW1lbnRPdXRlclNpemUoZWwsIHNpemUsIGluY2x1ZGVNYXJnaW5zKSB7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBpZiAoaW5jbHVkZU1hcmdpbnMpIHtcbiAgICByZXR1cm4gZWxbc2l6ZSA9PT0gJ3dpZHRoJyA/ICdvZmZzZXRXaWR0aCcgOiAnb2Zmc2V0SGVpZ2h0J10gKyBwYXJzZUZsb2F0KHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKHNpemUgPT09ICd3aWR0aCcgPyAnbWFyZ2luLXJpZ2h0JyA6ICdtYXJnaW4tdG9wJykpICsgcGFyc2VGbG9hdCh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZShzaXplID09PSAnd2lkdGgnID8gJ21hcmdpbi1sZWZ0JyA6ICdtYXJnaW4tYm90dG9tJykpO1xuICB9XG4gIHJldHVybiBlbC5vZmZzZXRXaWR0aDtcbn1cbmZ1bmN0aW9uIG1ha2VFbGVtZW50c0FycmF5KGVsKSB7XG4gIHJldHVybiAoQXJyYXkuaXNBcnJheShlbCkgPyBlbCA6IFtlbF0pLmZpbHRlcihlID0+ICEhZSk7XG59XG5cbmV4cG9ydCB7IGVsZW1lbnRQYXJlbnRzIGFzIGEsIGVsZW1lbnRPZmZzZXQgYXMgYiwgY3JlYXRlRWxlbWVudCBhcyBjLCBub3cgYXMgZCwgZWxlbWVudENoaWxkcmVuIGFzIGUsIGVsZW1lbnRPdXRlclNpemUgYXMgZiwgZ2V0U2xpZGVUcmFuc2Zvcm1FbCBhcyBnLCBlbGVtZW50SW5kZXggYXMgaCwgY2xhc3Nlc1RvVG9rZW5zIGFzIGksIGdldFRyYW5zbGF0ZSBhcyBqLCBlbGVtZW50VHJhbnNpdGlvbkVuZCBhcyBrLCBpc09iamVjdCBhcyBsLCBtYWtlRWxlbWVudHNBcnJheSBhcyBtLCBuZXh0VGljayBhcyBuLCBlbGVtZW50U3R5bGUgYXMgbywgZWxlbWVudE5leHRBbGwgYXMgcCwgZWxlbWVudFByZXZBbGwgYXMgcSwgYW5pbWF0ZUNTU01vZGVTY3JvbGwgYXMgciwgc2V0Q1NTUHJvcGVydHkgYXMgcywgc2hvd1dhcm5pbmcgYXMgdCwgZXh0ZW5kIGFzIHUsIGRlbGV0ZVByb3BzIGFzIHYgfTtcbiIsImltcG9ydCB7IGEgYXMgZ2V0V2luZG93LCBnIGFzIGdldERvY3VtZW50IH0gZnJvbSAnLi9zc3Itd2luZG93LmVzbS5tanMnO1xuaW1wb3J0IHsgYSBhcyBlbGVtZW50UGFyZW50cywgbyBhcyBlbGVtZW50U3R5bGUsIGUgYXMgZWxlbWVudENoaWxkcmVuLCBzIGFzIHNldENTU1Byb3BlcnR5LCBmIGFzIGVsZW1lbnRPdXRlclNpemUsIHAgYXMgZWxlbWVudE5leHRBbGwsIHEgYXMgZWxlbWVudFByZXZBbGwsIGogYXMgZ2V0VHJhbnNsYXRlLCByIGFzIGFuaW1hdGVDU1NNb2RlU2Nyb2xsLCBuIGFzIG5leHRUaWNrLCB0IGFzIHNob3dXYXJuaW5nLCBjIGFzIGNyZWF0ZUVsZW1lbnQsIGQgYXMgbm93LCB1IGFzIGV4dGVuZCwgaCBhcyBlbGVtZW50SW5kZXgsIHYgYXMgZGVsZXRlUHJvcHMgfSBmcm9tICcuL3V0aWxzLm1qcyc7XG5cbmxldCBzdXBwb3J0O1xuZnVuY3Rpb24gY2FsY1N1cHBvcnQoKSB7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gIHJldHVybiB7XG4gICAgc21vb3RoU2Nyb2xsOiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlICYmICdzY3JvbGxCZWhhdmlvcicgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLFxuICAgIHRvdWNoOiAhISgnb250b3VjaHN0YXJ0JyBpbiB3aW5kb3cgfHwgd2luZG93LkRvY3VtZW50VG91Y2ggJiYgZG9jdW1lbnQgaW5zdGFuY2VvZiB3aW5kb3cuRG9jdW1lbnRUb3VjaClcbiAgfTtcbn1cbmZ1bmN0aW9uIGdldFN1cHBvcnQoKSB7XG4gIGlmICghc3VwcG9ydCkge1xuICAgIHN1cHBvcnQgPSBjYWxjU3VwcG9ydCgpO1xuICB9XG4gIHJldHVybiBzdXBwb3J0O1xufVxuXG5sZXQgZGV2aWNlQ2FjaGVkO1xuZnVuY3Rpb24gY2FsY0RldmljZShfdGVtcCkge1xuICBsZXQge1xuICAgIHVzZXJBZ2VudFxuICB9ID0gX3RlbXAgPT09IHZvaWQgMCA/IHt9IDogX3RlbXA7XG4gIGNvbnN0IHN1cHBvcnQgPSBnZXRTdXBwb3J0KCk7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBjb25zdCBwbGF0Zm9ybSA9IHdpbmRvdy5uYXZpZ2F0b3IucGxhdGZvcm07XG4gIGNvbnN0IHVhID0gdXNlckFnZW50IHx8IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuICBjb25zdCBkZXZpY2UgPSB7XG4gICAgaW9zOiBmYWxzZSxcbiAgICBhbmRyb2lkOiBmYWxzZVxuICB9O1xuICBjb25zdCBzY3JlZW5XaWR0aCA9IHdpbmRvdy5zY3JlZW4ud2lkdGg7XG4gIGNvbnN0IHNjcmVlbkhlaWdodCA9IHdpbmRvdy5zY3JlZW4uaGVpZ2h0O1xuICBjb25zdCBhbmRyb2lkID0gdWEubWF0Y2goLyhBbmRyb2lkKTs/W1xcc1xcL10rKFtcXGQuXSspPy8pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gIGxldCBpcGFkID0gdWEubWF0Y2goLyhpUGFkKS4qT1NcXHMoW1xcZF9dKykvKTtcbiAgY29uc3QgaXBvZCA9IHVhLm1hdGNoKC8oaVBvZCkoLipPU1xccyhbXFxkX10rKSk/Lyk7XG4gIGNvbnN0IGlwaG9uZSA9ICFpcGFkICYmIHVhLm1hdGNoKC8oaVBob25lXFxzT1N8aU9TKVxccyhbXFxkX10rKS8pO1xuICBjb25zdCB3aW5kb3dzID0gcGxhdGZvcm0gPT09ICdXaW4zMic7XG4gIGxldCBtYWNvcyA9IHBsYXRmb3JtID09PSAnTWFjSW50ZWwnO1xuXG4gIC8vIGlQYWRPcyAxMyBmaXhcbiAgY29uc3QgaVBhZFNjcmVlbnMgPSBbJzEwMjR4MTM2NicsICcxMzY2eDEwMjQnLCAnODM0eDExOTQnLCAnMTE5NHg4MzQnLCAnODM0eDExMTInLCAnMTExMng4MzQnLCAnNzY4eDEwMjQnLCAnMTAyNHg3NjgnLCAnODIweDExODAnLCAnMTE4MHg4MjAnLCAnODEweDEwODAnLCAnMTA4MHg4MTAnXTtcbiAgaWYgKCFpcGFkICYmIG1hY29zICYmIHN1cHBvcnQudG91Y2ggJiYgaVBhZFNjcmVlbnMuaW5kZXhPZihgJHtzY3JlZW5XaWR0aH14JHtzY3JlZW5IZWlnaHR9YCkgPj0gMCkge1xuICAgIGlwYWQgPSB1YS5tYXRjaCgvKFZlcnNpb24pXFwvKFtcXGQuXSspLyk7XG4gICAgaWYgKCFpcGFkKSBpcGFkID0gWzAsIDEsICcxM18wXzAnXTtcbiAgICBtYWNvcyA9IGZhbHNlO1xuICB9XG5cbiAgLy8gQW5kcm9pZFxuICBpZiAoYW5kcm9pZCAmJiAhd2luZG93cykge1xuICAgIGRldmljZS5vcyA9ICdhbmRyb2lkJztcbiAgICBkZXZpY2UuYW5kcm9pZCA9IHRydWU7XG4gIH1cbiAgaWYgKGlwYWQgfHwgaXBob25lIHx8IGlwb2QpIHtcbiAgICBkZXZpY2Uub3MgPSAnaW9zJztcbiAgICBkZXZpY2UuaW9zID0gdHJ1ZTtcbiAgfVxuXG4gIC8vIEV4cG9ydCBvYmplY3RcbiAgcmV0dXJuIGRldmljZTtcbn1cbmZ1bmN0aW9uIGdldERldmljZShvdmVycmlkZXMpIHtcbiAgaWYgKG92ZXJyaWRlcyA9PT0gdm9pZCAwKSB7XG4gICAgb3ZlcnJpZGVzID0ge307XG4gIH1cbiAgaWYgKCFkZXZpY2VDYWNoZWQpIHtcbiAgICBkZXZpY2VDYWNoZWQgPSBjYWxjRGV2aWNlKG92ZXJyaWRlcyk7XG4gIH1cbiAgcmV0dXJuIGRldmljZUNhY2hlZDtcbn1cblxubGV0IGJyb3dzZXI7XG5mdW5jdGlvbiBjYWxjQnJvd3NlcigpIHtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGNvbnN0IGRldmljZSA9IGdldERldmljZSgpO1xuICBsZXQgbmVlZFBlcnNwZWN0aXZlRml4ID0gZmFsc2U7XG4gIGZ1bmN0aW9uIGlzU2FmYXJpKCkge1xuICAgIGNvbnN0IHVhID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKTtcbiAgICByZXR1cm4gdWEuaW5kZXhPZignc2FmYXJpJykgPj0gMCAmJiB1YS5pbmRleE9mKCdjaHJvbWUnKSA8IDAgJiYgdWEuaW5kZXhPZignYW5kcm9pZCcpIDwgMDtcbiAgfVxuICBpZiAoaXNTYWZhcmkoKSkge1xuICAgIGNvbnN0IHVhID0gU3RyaW5nKHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgICBpZiAodWEuaW5jbHVkZXMoJ1ZlcnNpb24vJykpIHtcbiAgICAgIGNvbnN0IFttYWpvciwgbWlub3JdID0gdWEuc3BsaXQoJ1ZlcnNpb24vJylbMV0uc3BsaXQoJyAnKVswXS5zcGxpdCgnLicpLm1hcChudW0gPT4gTnVtYmVyKG51bSkpO1xuICAgICAgbmVlZFBlcnNwZWN0aXZlRml4ID0gbWFqb3IgPCAxNiB8fCBtYWpvciA9PT0gMTYgJiYgbWlub3IgPCAyO1xuICAgIH1cbiAgfVxuICBjb25zdCBpc1dlYlZpZXcgPSAvKGlQaG9uZXxpUG9kfGlQYWQpLipBcHBsZVdlYktpdCg/IS4qU2FmYXJpKS9pLnRlc3Qod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpO1xuICBjb25zdCBpc1NhZmFyaUJyb3dzZXIgPSBpc1NhZmFyaSgpO1xuICBjb25zdCBuZWVkM2RGaXggPSBpc1NhZmFyaUJyb3dzZXIgfHwgaXNXZWJWaWV3ICYmIGRldmljZS5pb3M7XG4gIHJldHVybiB7XG4gICAgaXNTYWZhcmk6IG5lZWRQZXJzcGVjdGl2ZUZpeCB8fCBpc1NhZmFyaUJyb3dzZXIsXG4gICAgbmVlZFBlcnNwZWN0aXZlRml4LFxuICAgIG5lZWQzZEZpeCxcbiAgICBpc1dlYlZpZXdcbiAgfTtcbn1cbmZ1bmN0aW9uIGdldEJyb3dzZXIoKSB7XG4gIGlmICghYnJvd3Nlcikge1xuICAgIGJyb3dzZXIgPSBjYWxjQnJvd3NlcigpO1xuICB9XG4gIHJldHVybiBicm93c2VyO1xufVxuXG5mdW5jdGlvbiBSZXNpemUoX3JlZikge1xuICBsZXQge1xuICAgIHN3aXBlcixcbiAgICBvbixcbiAgICBlbWl0XG4gIH0gPSBfcmVmO1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgbGV0IG9ic2VydmVyID0gbnVsbDtcbiAgbGV0IGFuaW1hdGlvbkZyYW1lID0gbnVsbDtcbiAgY29uc3QgcmVzaXplSGFuZGxlciA9ICgpID0+IHtcbiAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIuaW5pdGlhbGl6ZWQpIHJldHVybjtcbiAgICBlbWl0KCdiZWZvcmVSZXNpemUnKTtcbiAgICBlbWl0KCdyZXNpemUnKTtcbiAgfTtcbiAgY29uc3QgY3JlYXRlT2JzZXJ2ZXIgPSAoKSA9PiB7XG4gICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLmluaXRpYWxpemVkKSByZXR1cm47XG4gICAgb2JzZXJ2ZXIgPSBuZXcgUmVzaXplT2JzZXJ2ZXIoZW50cmllcyA9PiB7XG4gICAgICBhbmltYXRpb25GcmFtZSA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgd2lkdGgsXG4gICAgICAgICAgaGVpZ2h0XG4gICAgICAgIH0gPSBzd2lwZXI7XG4gICAgICAgIGxldCBuZXdXaWR0aCA9IHdpZHRoO1xuICAgICAgICBsZXQgbmV3SGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgICBlbnRyaWVzLmZvckVhY2goX3JlZjIgPT4ge1xuICAgICAgICAgIGxldCB7XG4gICAgICAgICAgICBjb250ZW50Qm94U2l6ZSxcbiAgICAgICAgICAgIGNvbnRlbnRSZWN0LFxuICAgICAgICAgICAgdGFyZ2V0XG4gICAgICAgICAgfSA9IF9yZWYyO1xuICAgICAgICAgIGlmICh0YXJnZXQgJiYgdGFyZ2V0ICE9PSBzd2lwZXIuZWwpIHJldHVybjtcbiAgICAgICAgICBuZXdXaWR0aCA9IGNvbnRlbnRSZWN0ID8gY29udGVudFJlY3Qud2lkdGggOiAoY29udGVudEJveFNpemVbMF0gfHwgY29udGVudEJveFNpemUpLmlubGluZVNpemU7XG4gICAgICAgICAgbmV3SGVpZ2h0ID0gY29udGVudFJlY3QgPyBjb250ZW50UmVjdC5oZWlnaHQgOiAoY29udGVudEJveFNpemVbMF0gfHwgY29udGVudEJveFNpemUpLmJsb2NrU2l6ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChuZXdXaWR0aCAhPT0gd2lkdGggfHwgbmV3SGVpZ2h0ICE9PSBoZWlnaHQpIHtcbiAgICAgICAgICByZXNpemVIYW5kbGVyKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIG9ic2VydmVyLm9ic2VydmUoc3dpcGVyLmVsKTtcbiAgfTtcbiAgY29uc3QgcmVtb3ZlT2JzZXJ2ZXIgPSAoKSA9PiB7XG4gICAgaWYgKGFuaW1hdGlvbkZyYW1lKSB7XG4gICAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUoYW5pbWF0aW9uRnJhbWUpO1xuICAgIH1cbiAgICBpZiAob2JzZXJ2ZXIgJiYgb2JzZXJ2ZXIudW5vYnNlcnZlICYmIHN3aXBlci5lbCkge1xuICAgICAgb2JzZXJ2ZXIudW5vYnNlcnZlKHN3aXBlci5lbCk7XG4gICAgICBvYnNlcnZlciA9IG51bGw7XG4gICAgfVxuICB9O1xuICBjb25zdCBvcmllbnRhdGlvbkNoYW5nZUhhbmRsZXIgPSAoKSA9PiB7XG4gICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLmluaXRpYWxpemVkKSByZXR1cm47XG4gICAgZW1pdCgnb3JpZW50YXRpb25jaGFuZ2UnKTtcbiAgfTtcbiAgb24oJ2luaXQnLCAoKSA9PiB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMucmVzaXplT2JzZXJ2ZXIgJiYgdHlwZW9mIHdpbmRvdy5SZXNpemVPYnNlcnZlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNyZWF0ZU9ic2VydmVyKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCByZXNpemVIYW5kbGVyKTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignb3JpZW50YXRpb25jaGFuZ2UnLCBvcmllbnRhdGlvbkNoYW5nZUhhbmRsZXIpO1xuICB9KTtcbiAgb24oJ2Rlc3Ryb3knLCAoKSA9PiB7XG4gICAgcmVtb3ZlT2JzZXJ2ZXIoKTtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgcmVzaXplSGFuZGxlcik7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ29yaWVudGF0aW9uY2hhbmdlJywgb3JpZW50YXRpb25DaGFuZ2VIYW5kbGVyKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIE9ic2VydmVyKF9yZWYpIHtcbiAgbGV0IHtcbiAgICBzd2lwZXIsXG4gICAgZXh0ZW5kUGFyYW1zLFxuICAgIG9uLFxuICAgIGVtaXRcbiAgfSA9IF9yZWY7XG4gIGNvbnN0IG9ic2VydmVycyA9IFtdO1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgY29uc3QgYXR0YWNoID0gZnVuY3Rpb24gKHRhcmdldCwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG4gICAgY29uc3QgT2JzZXJ2ZXJGdW5jID0gd2luZG93Lk11dGF0aW9uT2JzZXJ2ZXIgfHwgd2luZG93LldlYmtpdE11dGF0aW9uT2JzZXJ2ZXI7XG4gICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgT2JzZXJ2ZXJGdW5jKG11dGF0aW9ucyA9PiB7XG4gICAgICAvLyBUaGUgb2JzZXJ2ZXJVcGRhdGUgZXZlbnQgc2hvdWxkIG9ubHkgYmUgdHJpZ2dlcmVkXG4gICAgICAvLyBvbmNlIGRlc3BpdGUgdGhlIG51bWJlciBvZiBtdXRhdGlvbnMuICBBZGRpdGlvbmFsXG4gICAgICAvLyB0cmlnZ2VycyBhcmUgcmVkdW5kYW50IGFuZCBhcmUgdmVyeSBjb3N0bHlcbiAgICAgIGlmIChzd2lwZXIuX19wcmV2ZW50T2JzZXJ2ZXJfXykgcmV0dXJuO1xuICAgICAgaWYgKG11dGF0aW9ucy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgZW1pdCgnb2JzZXJ2ZXJVcGRhdGUnLCBtdXRhdGlvbnNbMF0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCBvYnNlcnZlclVwZGF0ZSA9IGZ1bmN0aW9uIG9ic2VydmVyVXBkYXRlKCkge1xuICAgICAgICBlbWl0KCdvYnNlcnZlclVwZGF0ZScsIG11dGF0aW9uc1swXSk7XG4gICAgICB9O1xuICAgICAgaWYgKHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUpIHtcbiAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShvYnNlcnZlclVwZGF0ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3aW5kb3cuc2V0VGltZW91dChvYnNlcnZlclVwZGF0ZSwgMCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgb2JzZXJ2ZXIub2JzZXJ2ZSh0YXJnZXQsIHtcbiAgICAgIGF0dHJpYnV0ZXM6IHR5cGVvZiBvcHRpb25zLmF0dHJpYnV0ZXMgPT09ICd1bmRlZmluZWQnID8gdHJ1ZSA6IG9wdGlvbnMuYXR0cmlidXRlcyxcbiAgICAgIGNoaWxkTGlzdDogdHlwZW9mIG9wdGlvbnMuY2hpbGRMaXN0ID09PSAndW5kZWZpbmVkJyA/IHRydWUgOiBvcHRpb25zLmNoaWxkTGlzdCxcbiAgICAgIGNoYXJhY3RlckRhdGE6IHR5cGVvZiBvcHRpb25zLmNoYXJhY3RlckRhdGEgPT09ICd1bmRlZmluZWQnID8gdHJ1ZSA6IG9wdGlvbnMuY2hhcmFjdGVyRGF0YVxuICAgIH0pO1xuICAgIG9ic2VydmVycy5wdXNoKG9ic2VydmVyKTtcbiAgfTtcbiAgY29uc3QgaW5pdCA9ICgpID0+IHtcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMub2JzZXJ2ZXIpIHJldHVybjtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5vYnNlcnZlUGFyZW50cykge1xuICAgICAgY29uc3QgY29udGFpbmVyUGFyZW50cyA9IGVsZW1lbnRQYXJlbnRzKHN3aXBlci5ob3N0RWwpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb250YWluZXJQYXJlbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGF0dGFjaChjb250YWluZXJQYXJlbnRzW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gT2JzZXJ2ZSBjb250YWluZXJcbiAgICBhdHRhY2goc3dpcGVyLmhvc3RFbCwge1xuICAgICAgY2hpbGRMaXN0OiBzd2lwZXIucGFyYW1zLm9ic2VydmVTbGlkZUNoaWxkcmVuXG4gICAgfSk7XG5cbiAgICAvLyBPYnNlcnZlIHdyYXBwZXJcbiAgICBhdHRhY2goc3dpcGVyLndyYXBwZXJFbCwge1xuICAgICAgYXR0cmlidXRlczogZmFsc2VcbiAgICB9KTtcbiAgfTtcbiAgY29uc3QgZGVzdHJveSA9ICgpID0+IHtcbiAgICBvYnNlcnZlcnMuZm9yRWFjaChvYnNlcnZlciA9PiB7XG4gICAgICBvYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgfSk7XG4gICAgb2JzZXJ2ZXJzLnNwbGljZSgwLCBvYnNlcnZlcnMubGVuZ3RoKTtcbiAgfTtcbiAgZXh0ZW5kUGFyYW1zKHtcbiAgICBvYnNlcnZlcjogZmFsc2UsXG4gICAgb2JzZXJ2ZVBhcmVudHM6IGZhbHNlLFxuICAgIG9ic2VydmVTbGlkZUNoaWxkcmVuOiBmYWxzZVxuICB9KTtcbiAgb24oJ2luaXQnLCBpbml0KTtcbiAgb24oJ2Rlc3Ryb3knLCBkZXN0cm95KTtcbn1cblxuLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZXJzY29yZS1kYW5nbGUgKi9cblxudmFyIGV2ZW50c0VtaXR0ZXIgPSB7XG4gIG9uKGV2ZW50cywgaGFuZGxlciwgcHJpb3JpdHkpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBpZiAoIXNlbGYuZXZlbnRzTGlzdGVuZXJzIHx8IHNlbGYuZGVzdHJveWVkKSByZXR1cm4gc2VsZjtcbiAgICBpZiAodHlwZW9mIGhhbmRsZXIgIT09ICdmdW5jdGlvbicpIHJldHVybiBzZWxmO1xuICAgIGNvbnN0IG1ldGhvZCA9IHByaW9yaXR5ID8gJ3Vuc2hpZnQnIDogJ3B1c2gnO1xuICAgIGV2ZW50cy5zcGxpdCgnICcpLmZvckVhY2goZXZlbnQgPT4ge1xuICAgICAgaWYgKCFzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0pIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XSA9IFtdO1xuICAgICAgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdW21ldGhvZF0oaGFuZGxlcik7XG4gICAgfSk7XG4gICAgcmV0dXJuIHNlbGY7XG4gIH0sXG4gIG9uY2UoZXZlbnRzLCBoYW5kbGVyLCBwcmlvcml0eSkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnMgfHwgc2VsZi5kZXN0cm95ZWQpIHJldHVybiBzZWxmO1xuICAgIGlmICh0eXBlb2YgaGFuZGxlciAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHNlbGY7XG4gICAgZnVuY3Rpb24gb25jZUhhbmRsZXIoKSB7XG4gICAgICBzZWxmLm9mZihldmVudHMsIG9uY2VIYW5kbGVyKTtcbiAgICAgIGlmIChvbmNlSGFuZGxlci5fX2VtaXR0ZXJQcm94eSkge1xuICAgICAgICBkZWxldGUgb25jZUhhbmRsZXIuX19lbWl0dGVyUHJveHk7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cbiAgICAgIGhhbmRsZXIuYXBwbHkoc2VsZiwgYXJncyk7XG4gICAgfVxuICAgIG9uY2VIYW5kbGVyLl9fZW1pdHRlclByb3h5ID0gaGFuZGxlcjtcbiAgICByZXR1cm4gc2VsZi5vbihldmVudHMsIG9uY2VIYW5kbGVyLCBwcmlvcml0eSk7XG4gIH0sXG4gIG9uQW55KGhhbmRsZXIsIHByaW9yaXR5KSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgaWYgKCFzZWxmLmV2ZW50c0xpc3RlbmVycyB8fCBzZWxmLmRlc3Ryb3llZCkgcmV0dXJuIHNlbGY7XG4gICAgaWYgKHR5cGVvZiBoYW5kbGVyICE9PSAnZnVuY3Rpb24nKSByZXR1cm4gc2VsZjtcbiAgICBjb25zdCBtZXRob2QgPSBwcmlvcml0eSA/ICd1bnNoaWZ0JyA6ICdwdXNoJztcbiAgICBpZiAoc2VsZi5ldmVudHNBbnlMaXN0ZW5lcnMuaW5kZXhPZihoYW5kbGVyKSA8IDApIHtcbiAgICAgIHNlbGYuZXZlbnRzQW55TGlzdGVuZXJzW21ldGhvZF0oaGFuZGxlcik7XG4gICAgfVxuICAgIHJldHVybiBzZWxmO1xuICB9LFxuICBvZmZBbnkoaGFuZGxlcikge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnMgfHwgc2VsZi5kZXN0cm95ZWQpIHJldHVybiBzZWxmO1xuICAgIGlmICghc2VsZi5ldmVudHNBbnlMaXN0ZW5lcnMpIHJldHVybiBzZWxmO1xuICAgIGNvbnN0IGluZGV4ID0gc2VsZi5ldmVudHNBbnlMaXN0ZW5lcnMuaW5kZXhPZihoYW5kbGVyKTtcbiAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgc2VsZi5ldmVudHNBbnlMaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG4gICAgcmV0dXJuIHNlbGY7XG4gIH0sXG4gIG9mZihldmVudHMsIGhhbmRsZXIpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBpZiAoIXNlbGYuZXZlbnRzTGlzdGVuZXJzIHx8IHNlbGYuZGVzdHJveWVkKSByZXR1cm4gc2VsZjtcbiAgICBpZiAoIXNlbGYuZXZlbnRzTGlzdGVuZXJzKSByZXR1cm4gc2VsZjtcbiAgICBldmVudHMuc3BsaXQoJyAnKS5mb3JFYWNoKGV2ZW50ID0+IHtcbiAgICAgIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdID0gW107XG4gICAgICB9IGVsc2UgaWYgKHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XSkge1xuICAgICAgICBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0uZm9yRWFjaCgoZXZlbnRIYW5kbGVyLCBpbmRleCkgPT4ge1xuICAgICAgICAgIGlmIChldmVudEhhbmRsZXIgPT09IGhhbmRsZXIgfHwgZXZlbnRIYW5kbGVyLl9fZW1pdHRlclByb3h5ICYmIGV2ZW50SGFuZGxlci5fX2VtaXR0ZXJQcm94eSA9PT0gaGFuZGxlcikge1xuICAgICAgICAgICAgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gc2VsZjtcbiAgfSxcbiAgZW1pdCgpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBpZiAoIXNlbGYuZXZlbnRzTGlzdGVuZXJzIHx8IHNlbGYuZGVzdHJveWVkKSByZXR1cm4gc2VsZjtcbiAgICBpZiAoIXNlbGYuZXZlbnRzTGlzdGVuZXJzKSByZXR1cm4gc2VsZjtcbiAgICBsZXQgZXZlbnRzO1xuICAgIGxldCBkYXRhO1xuICAgIGxldCBjb250ZXh0O1xuICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGFyZ3NbMF0gPT09ICdzdHJpbmcnIHx8IEFycmF5LmlzQXJyYXkoYXJnc1swXSkpIHtcbiAgICAgIGV2ZW50cyA9IGFyZ3NbMF07XG4gICAgICBkYXRhID0gYXJncy5zbGljZSgxLCBhcmdzLmxlbmd0aCk7XG4gICAgICBjb250ZXh0ID0gc2VsZjtcbiAgICB9IGVsc2Uge1xuICAgICAgZXZlbnRzID0gYXJnc1swXS5ldmVudHM7XG4gICAgICBkYXRhID0gYXJnc1swXS5kYXRhO1xuICAgICAgY29udGV4dCA9IGFyZ3NbMF0uY29udGV4dCB8fCBzZWxmO1xuICAgIH1cbiAgICBkYXRhLnVuc2hpZnQoY29udGV4dCk7XG4gICAgY29uc3QgZXZlbnRzQXJyYXkgPSBBcnJheS5pc0FycmF5KGV2ZW50cykgPyBldmVudHMgOiBldmVudHMuc3BsaXQoJyAnKTtcbiAgICBldmVudHNBcnJheS5mb3JFYWNoKGV2ZW50ID0+IHtcbiAgICAgIGlmIChzZWxmLmV2ZW50c0FueUxpc3RlbmVycyAmJiBzZWxmLmV2ZW50c0FueUxpc3RlbmVycy5sZW5ndGgpIHtcbiAgICAgICAgc2VsZi5ldmVudHNBbnlMaXN0ZW5lcnMuZm9yRWFjaChldmVudEhhbmRsZXIgPT4ge1xuICAgICAgICAgIGV2ZW50SGFuZGxlci5hcHBseShjb250ZXh0LCBbZXZlbnQsIC4uLmRhdGFdKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAoc2VsZi5ldmVudHNMaXN0ZW5lcnMgJiYgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdKSB7XG4gICAgICAgIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XS5mb3JFYWNoKGV2ZW50SGFuZGxlciA9PiB7XG4gICAgICAgICAgZXZlbnRIYW5kbGVyLmFwcGx5KGNvbnRleHQsIGRhdGEpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gc2VsZjtcbiAgfVxufTtcblxuZnVuY3Rpb24gdXBkYXRlU2l6ZSgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgbGV0IHdpZHRoO1xuICBsZXQgaGVpZ2h0O1xuICBjb25zdCBlbCA9IHN3aXBlci5lbDtcbiAgaWYgKHR5cGVvZiBzd2lwZXIucGFyYW1zLndpZHRoICE9PSAndW5kZWZpbmVkJyAmJiBzd2lwZXIucGFyYW1zLndpZHRoICE9PSBudWxsKSB7XG4gICAgd2lkdGggPSBzd2lwZXIucGFyYW1zLndpZHRoO1xuICB9IGVsc2Uge1xuICAgIHdpZHRoID0gZWwuY2xpZW50V2lkdGg7XG4gIH1cbiAgaWYgKHR5cGVvZiBzd2lwZXIucGFyYW1zLmhlaWdodCAhPT0gJ3VuZGVmaW5lZCcgJiYgc3dpcGVyLnBhcmFtcy5oZWlnaHQgIT09IG51bGwpIHtcbiAgICBoZWlnaHQgPSBzd2lwZXIucGFyYW1zLmhlaWdodDtcbiAgfSBlbHNlIHtcbiAgICBoZWlnaHQgPSBlbC5jbGllbnRIZWlnaHQ7XG4gIH1cbiAgaWYgKHdpZHRoID09PSAwICYmIHN3aXBlci5pc0hvcml6b250YWwoKSB8fCBoZWlnaHQgPT09IDAgJiYgc3dpcGVyLmlzVmVydGljYWwoKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIFN1YnRyYWN0IHBhZGRpbmdzXG4gIHdpZHRoID0gd2lkdGggLSBwYXJzZUludChlbGVtZW50U3R5bGUoZWwsICdwYWRkaW5nLWxlZnQnKSB8fCAwLCAxMCkgLSBwYXJzZUludChlbGVtZW50U3R5bGUoZWwsICdwYWRkaW5nLXJpZ2h0JykgfHwgMCwgMTApO1xuICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChlbGVtZW50U3R5bGUoZWwsICdwYWRkaW5nLXRvcCcpIHx8IDAsIDEwKSAtIHBhcnNlSW50KGVsZW1lbnRTdHlsZShlbCwgJ3BhZGRpbmctYm90dG9tJykgfHwgMCwgMTApO1xuICBpZiAoTnVtYmVyLmlzTmFOKHdpZHRoKSkgd2lkdGggPSAwO1xuICBpZiAoTnVtYmVyLmlzTmFOKGhlaWdodCkpIGhlaWdodCA9IDA7XG4gIE9iamVjdC5hc3NpZ24oc3dpcGVyLCB7XG4gICAgd2lkdGgsXG4gICAgaGVpZ2h0LFxuICAgIHNpemU6IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHdpZHRoIDogaGVpZ2h0XG4gIH0pO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVTbGlkZXMoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGZ1bmN0aW9uIGdldERpcmVjdGlvblByb3BlcnR5VmFsdWUobm9kZSwgbGFiZWwpIHtcbiAgICByZXR1cm4gcGFyc2VGbG9hdChub2RlLmdldFByb3BlcnR5VmFsdWUoc3dpcGVyLmdldERpcmVjdGlvbkxhYmVsKGxhYmVsKSkgfHwgMCk7XG4gIH1cbiAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcbiAgY29uc3Qge1xuICAgIHdyYXBwZXJFbCxcbiAgICBzbGlkZXNFbCxcbiAgICBzaXplOiBzd2lwZXJTaXplLFxuICAgIHJ0bFRyYW5zbGF0ZTogcnRsLFxuICAgIHdyb25nUlRMXG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IGlzVmlydHVhbCA9IHN3aXBlci52aXJ0dWFsICYmIHBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG4gIGNvbnN0IHByZXZpb3VzU2xpZGVzTGVuZ3RoID0gaXNWaXJ0dWFsID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCA6IHN3aXBlci5zbGlkZXMubGVuZ3RoO1xuICBjb25zdCBzbGlkZXMgPSBlbGVtZW50Q2hpbGRyZW4oc2xpZGVzRWwsIGAuJHtzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKTtcbiAgY29uc3Qgc2xpZGVzTGVuZ3RoID0gaXNWaXJ0dWFsID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCA6IHNsaWRlcy5sZW5ndGg7XG4gIGxldCBzbmFwR3JpZCA9IFtdO1xuICBjb25zdCBzbGlkZXNHcmlkID0gW107XG4gIGNvbnN0IHNsaWRlc1NpemVzR3JpZCA9IFtdO1xuICBsZXQgb2Zmc2V0QmVmb3JlID0gcGFyYW1zLnNsaWRlc09mZnNldEJlZm9yZTtcbiAgaWYgKHR5cGVvZiBvZmZzZXRCZWZvcmUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBvZmZzZXRCZWZvcmUgPSBwYXJhbXMuc2xpZGVzT2Zmc2V0QmVmb3JlLmNhbGwoc3dpcGVyKTtcbiAgfVxuICBsZXQgb2Zmc2V0QWZ0ZXIgPSBwYXJhbXMuc2xpZGVzT2Zmc2V0QWZ0ZXI7XG4gIGlmICh0eXBlb2Ygb2Zmc2V0QWZ0ZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICBvZmZzZXRBZnRlciA9IHBhcmFtcy5zbGlkZXNPZmZzZXRBZnRlci5jYWxsKHN3aXBlcik7XG4gIH1cbiAgY29uc3QgcHJldmlvdXNTbmFwR3JpZExlbmd0aCA9IHN3aXBlci5zbmFwR3JpZC5sZW5ndGg7XG4gIGNvbnN0IHByZXZpb3VzU2xpZGVzR3JpZExlbmd0aCA9IHN3aXBlci5zbGlkZXNHcmlkLmxlbmd0aDtcbiAgbGV0IHNwYWNlQmV0d2VlbiA9IHBhcmFtcy5zcGFjZUJldHdlZW47XG4gIGxldCBzbGlkZVBvc2l0aW9uID0gLW9mZnNldEJlZm9yZTtcbiAgbGV0IHByZXZTbGlkZVNpemUgPSAwO1xuICBsZXQgaW5kZXggPSAwO1xuICBpZiAodHlwZW9mIHN3aXBlclNpemUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICh0eXBlb2Ygc3BhY2VCZXR3ZWVuID09PSAnc3RyaW5nJyAmJiBzcGFjZUJldHdlZW4uaW5kZXhPZignJScpID49IDApIHtcbiAgICBzcGFjZUJldHdlZW4gPSBwYXJzZUZsb2F0KHNwYWNlQmV0d2Vlbi5yZXBsYWNlKCclJywgJycpKSAvIDEwMCAqIHN3aXBlclNpemU7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHNwYWNlQmV0d2VlbiA9PT0gJ3N0cmluZycpIHtcbiAgICBzcGFjZUJldHdlZW4gPSBwYXJzZUZsb2F0KHNwYWNlQmV0d2Vlbik7XG4gIH1cbiAgc3dpcGVyLnZpcnR1YWxTaXplID0gLXNwYWNlQmV0d2VlbjtcblxuICAvLyByZXNldCBtYXJnaW5zXG4gIHNsaWRlcy5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgIGlmIChydGwpIHtcbiAgICAgIHNsaWRlRWwuc3R5bGUubWFyZ2luTGVmdCA9ICcnO1xuICAgIH0gZWxzZSB7XG4gICAgICBzbGlkZUVsLnN0eWxlLm1hcmdpblJpZ2h0ID0gJyc7XG4gICAgfVxuICAgIHNsaWRlRWwuc3R5bGUubWFyZ2luQm90dG9tID0gJyc7XG4gICAgc2xpZGVFbC5zdHlsZS5tYXJnaW5Ub3AgPSAnJztcbiAgfSk7XG5cbiAgLy8gcmVzZXQgY3NzTW9kZSBvZmZzZXRzXG4gIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMgJiYgcGFyYW1zLmNzc01vZGUpIHtcbiAgICBzZXRDU1NQcm9wZXJ0eSh3cmFwcGVyRWwsICctLXN3aXBlci1jZW50ZXJlZC1vZmZzZXQtYmVmb3JlJywgJycpO1xuICAgIHNldENTU1Byb3BlcnR5KHdyYXBwZXJFbCwgJy0tc3dpcGVyLWNlbnRlcmVkLW9mZnNldC1hZnRlcicsICcnKTtcbiAgfVxuICBjb25zdCBncmlkRW5hYmxlZCA9IHBhcmFtcy5ncmlkICYmIHBhcmFtcy5ncmlkLnJvd3MgPiAxICYmIHN3aXBlci5ncmlkO1xuICBpZiAoZ3JpZEVuYWJsZWQpIHtcbiAgICBzd2lwZXIuZ3JpZC5pbml0U2xpZGVzKHNsaWRlcyk7XG4gIH0gZWxzZSBpZiAoc3dpcGVyLmdyaWQpIHtcbiAgICBzd2lwZXIuZ3JpZC51bnNldFNsaWRlcygpO1xuICB9XG5cbiAgLy8gQ2FsYyBzbGlkZXNcbiAgbGV0IHNsaWRlU2l6ZTtcbiAgY29uc3Qgc2hvdWxkUmVzZXRTbGlkZVNpemUgPSBwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nICYmIHBhcmFtcy5icmVha3BvaW50cyAmJiBPYmplY3Qua2V5cyhwYXJhbXMuYnJlYWtwb2ludHMpLmZpbHRlcihrZXkgPT4ge1xuICAgIHJldHVybiB0eXBlb2YgcGFyYW1zLmJyZWFrcG9pbnRzW2tleV0uc2xpZGVzUGVyVmlldyAhPT0gJ3VuZGVmaW5lZCc7XG4gIH0pLmxlbmd0aCA+IDA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzTGVuZ3RoOyBpICs9IDEpIHtcbiAgICBzbGlkZVNpemUgPSAwO1xuICAgIGxldCBzbGlkZTtcbiAgICBpZiAoc2xpZGVzW2ldKSBzbGlkZSA9IHNsaWRlc1tpXTtcbiAgICBpZiAoZ3JpZEVuYWJsZWQpIHtcbiAgICAgIHN3aXBlci5ncmlkLnVwZGF0ZVNsaWRlKGksIHNsaWRlLCBzbGlkZXMpO1xuICAgIH1cbiAgICBpZiAoc2xpZGVzW2ldICYmIGVsZW1lbnRTdHlsZShzbGlkZSwgJ2Rpc3BsYXknKSA9PT0gJ25vbmUnKSBjb250aW51ZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gICAgaWYgKHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycpIHtcbiAgICAgIGlmIChzaG91bGRSZXNldFNsaWRlU2l6ZSkge1xuICAgICAgICBzbGlkZXNbaV0uc3R5bGVbc3dpcGVyLmdldERpcmVjdGlvbkxhYmVsKCd3aWR0aCcpXSA9IGBgO1xuICAgICAgfVxuICAgICAgY29uc3Qgc2xpZGVTdHlsZXMgPSBnZXRDb21wdXRlZFN0eWxlKHNsaWRlKTtcbiAgICAgIGNvbnN0IGN1cnJlbnRUcmFuc2Zvcm0gPSBzbGlkZS5zdHlsZS50cmFuc2Zvcm07XG4gICAgICBjb25zdCBjdXJyZW50V2ViS2l0VHJhbnNmb3JtID0gc2xpZGUuc3R5bGUud2Via2l0VHJhbnNmb3JtO1xuICAgICAgaWYgKGN1cnJlbnRUcmFuc2Zvcm0pIHtcbiAgICAgICAgc2xpZGUuc3R5bGUudHJhbnNmb3JtID0gJ25vbmUnO1xuICAgICAgfVxuICAgICAgaWYgKGN1cnJlbnRXZWJLaXRUcmFuc2Zvcm0pIHtcbiAgICAgICAgc2xpZGUuc3R5bGUud2Via2l0VHJhbnNmb3JtID0gJ25vbmUnO1xuICAgICAgfVxuICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHtcbiAgICAgICAgc2xpZGVTaXplID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gZWxlbWVudE91dGVyU2l6ZShzbGlkZSwgJ3dpZHRoJywgdHJ1ZSkgOiBlbGVtZW50T3V0ZXJTaXplKHNsaWRlLCAnaGVpZ2h0JywgdHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgY29uc3Qgd2lkdGggPSBnZXREaXJlY3Rpb25Qcm9wZXJ0eVZhbHVlKHNsaWRlU3R5bGVzLCAnd2lkdGgnKTtcbiAgICAgICAgY29uc3QgcGFkZGluZ0xlZnQgPSBnZXREaXJlY3Rpb25Qcm9wZXJ0eVZhbHVlKHNsaWRlU3R5bGVzLCAncGFkZGluZy1sZWZ0Jyk7XG4gICAgICAgIGNvbnN0IHBhZGRpbmdSaWdodCA9IGdldERpcmVjdGlvblByb3BlcnR5VmFsdWUoc2xpZGVTdHlsZXMsICdwYWRkaW5nLXJpZ2h0Jyk7XG4gICAgICAgIGNvbnN0IG1hcmdpbkxlZnQgPSBnZXREaXJlY3Rpb25Qcm9wZXJ0eVZhbHVlKHNsaWRlU3R5bGVzLCAnbWFyZ2luLWxlZnQnKTtcbiAgICAgICAgY29uc3QgbWFyZ2luUmlnaHQgPSBnZXREaXJlY3Rpb25Qcm9wZXJ0eVZhbHVlKHNsaWRlU3R5bGVzLCAnbWFyZ2luLXJpZ2h0Jyk7XG4gICAgICAgIGNvbnN0IGJveFNpemluZyA9IHNsaWRlU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ2JveC1zaXppbmcnKTtcbiAgICAgICAgaWYgKGJveFNpemluZyAmJiBib3hTaXppbmcgPT09ICdib3JkZXItYm94Jykge1xuICAgICAgICAgIHNsaWRlU2l6ZSA9IHdpZHRoICsgbWFyZ2luTGVmdCArIG1hcmdpblJpZ2h0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIGNsaWVudFdpZHRoLFxuICAgICAgICAgICAgb2Zmc2V0V2lkdGhcbiAgICAgICAgICB9ID0gc2xpZGU7XG4gICAgICAgICAgc2xpZGVTaXplID0gd2lkdGggKyBwYWRkaW5nTGVmdCArIHBhZGRpbmdSaWdodCArIG1hcmdpbkxlZnQgKyBtYXJnaW5SaWdodCArIChvZmZzZXRXaWR0aCAtIGNsaWVudFdpZHRoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGN1cnJlbnRUcmFuc2Zvcm0pIHtcbiAgICAgICAgc2xpZGUuc3R5bGUudHJhbnNmb3JtID0gY3VycmVudFRyYW5zZm9ybTtcbiAgICAgIH1cbiAgICAgIGlmIChjdXJyZW50V2ViS2l0VHJhbnNmb3JtKSB7XG4gICAgICAgIHNsaWRlLnN0eWxlLndlYmtpdFRyYW5zZm9ybSA9IGN1cnJlbnRXZWJLaXRUcmFuc2Zvcm07XG4gICAgICB9XG4gICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykgc2xpZGVTaXplID0gTWF0aC5mbG9vcihzbGlkZVNpemUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzbGlkZVNpemUgPSAoc3dpcGVyU2l6ZSAtIChwYXJhbXMuc2xpZGVzUGVyVmlldyAtIDEpICogc3BhY2VCZXR3ZWVuKSAvIHBhcmFtcy5zbGlkZXNQZXJWaWV3O1xuICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHNsaWRlU2l6ZSA9IE1hdGguZmxvb3Ioc2xpZGVTaXplKTtcbiAgICAgIGlmIChzbGlkZXNbaV0pIHtcbiAgICAgICAgc2xpZGVzW2ldLnN0eWxlW3N3aXBlci5nZXREaXJlY3Rpb25MYWJlbCgnd2lkdGgnKV0gPSBgJHtzbGlkZVNpemV9cHhgO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoc2xpZGVzW2ldKSB7XG4gICAgICBzbGlkZXNbaV0uc3dpcGVyU2xpZGVTaXplID0gc2xpZGVTaXplO1xuICAgIH1cbiAgICBzbGlkZXNTaXplc0dyaWQucHVzaChzbGlkZVNpemUpO1xuICAgIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgIHNsaWRlUG9zaXRpb24gPSBzbGlkZVBvc2l0aW9uICsgc2xpZGVTaXplIC8gMiArIHByZXZTbGlkZVNpemUgLyAyICsgc3BhY2VCZXR3ZWVuO1xuICAgICAgaWYgKHByZXZTbGlkZVNpemUgPT09IDAgJiYgaSAhPT0gMCkgc2xpZGVQb3NpdGlvbiA9IHNsaWRlUG9zaXRpb24gLSBzd2lwZXJTaXplIC8gMiAtIHNwYWNlQmV0d2VlbjtcbiAgICAgIGlmIChpID09PSAwKSBzbGlkZVBvc2l0aW9uID0gc2xpZGVQb3NpdGlvbiAtIHN3aXBlclNpemUgLyAyIC0gc3BhY2VCZXR3ZWVuO1xuICAgICAgaWYgKE1hdGguYWJzKHNsaWRlUG9zaXRpb24pIDwgMSAvIDEwMDApIHNsaWRlUG9zaXRpb24gPSAwO1xuICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHNsaWRlUG9zaXRpb24gPSBNYXRoLmZsb29yKHNsaWRlUG9zaXRpb24pO1xuICAgICAgaWYgKGluZGV4ICUgcGFyYW1zLnNsaWRlc1Blckdyb3VwID09PSAwKSBzbmFwR3JpZC5wdXNoKHNsaWRlUG9zaXRpb24pO1xuICAgICAgc2xpZGVzR3JpZC5wdXNoKHNsaWRlUG9zaXRpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykgc2xpZGVQb3NpdGlvbiA9IE1hdGguZmxvb3Ioc2xpZGVQb3NpdGlvbik7XG4gICAgICBpZiAoKGluZGV4IC0gTWF0aC5taW4oc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAsIGluZGV4KSkgJSBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwID09PSAwKSBzbmFwR3JpZC5wdXNoKHNsaWRlUG9zaXRpb24pO1xuICAgICAgc2xpZGVzR3JpZC5wdXNoKHNsaWRlUG9zaXRpb24pO1xuICAgICAgc2xpZGVQb3NpdGlvbiA9IHNsaWRlUG9zaXRpb24gKyBzbGlkZVNpemUgKyBzcGFjZUJldHdlZW47XG4gICAgfVxuICAgIHN3aXBlci52aXJ0dWFsU2l6ZSArPSBzbGlkZVNpemUgKyBzcGFjZUJldHdlZW47XG4gICAgcHJldlNsaWRlU2l6ZSA9IHNsaWRlU2l6ZTtcbiAgICBpbmRleCArPSAxO1xuICB9XG4gIHN3aXBlci52aXJ0dWFsU2l6ZSA9IE1hdGgubWF4KHN3aXBlci52aXJ0dWFsU2l6ZSwgc3dpcGVyU2l6ZSkgKyBvZmZzZXRBZnRlcjtcbiAgaWYgKHJ0bCAmJiB3cm9uZ1JUTCAmJiAocGFyYW1zLmVmZmVjdCA9PT0gJ3NsaWRlJyB8fCBwYXJhbXMuZWZmZWN0ID09PSAnY292ZXJmbG93JykpIHtcbiAgICB3cmFwcGVyRWwuc3R5bGUud2lkdGggPSBgJHtzd2lwZXIudmlydHVhbFNpemUgKyBzcGFjZUJldHdlZW59cHhgO1xuICB9XG4gIGlmIChwYXJhbXMuc2V0V3JhcHBlclNpemUpIHtcbiAgICB3cmFwcGVyRWwuc3R5bGVbc3dpcGVyLmdldERpcmVjdGlvbkxhYmVsKCd3aWR0aCcpXSA9IGAke3N3aXBlci52aXJ0dWFsU2l6ZSArIHNwYWNlQmV0d2Vlbn1weGA7XG4gIH1cbiAgaWYgKGdyaWRFbmFibGVkKSB7XG4gICAgc3dpcGVyLmdyaWQudXBkYXRlV3JhcHBlclNpemUoc2xpZGVTaXplLCBzbmFwR3JpZCk7XG4gIH1cblxuICAvLyBSZW1vdmUgbGFzdCBncmlkIGVsZW1lbnRzIGRlcGVuZGluZyBvbiB3aWR0aFxuICBpZiAoIXBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgIGNvbnN0IG5ld1NsaWRlc0dyaWQgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNuYXBHcmlkLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBsZXQgc2xpZGVzR3JpZEl0ZW0gPSBzbmFwR3JpZFtpXTtcbiAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSBzbGlkZXNHcmlkSXRlbSA9IE1hdGguZmxvb3Ioc2xpZGVzR3JpZEl0ZW0pO1xuICAgICAgaWYgKHNuYXBHcmlkW2ldIDw9IHN3aXBlci52aXJ0dWFsU2l6ZSAtIHN3aXBlclNpemUpIHtcbiAgICAgICAgbmV3U2xpZGVzR3JpZC5wdXNoKHNsaWRlc0dyaWRJdGVtKTtcbiAgICAgIH1cbiAgICB9XG4gICAgc25hcEdyaWQgPSBuZXdTbGlkZXNHcmlkO1xuICAgIGlmIChNYXRoLmZsb29yKHN3aXBlci52aXJ0dWFsU2l6ZSAtIHN3aXBlclNpemUpIC0gTWF0aC5mbG9vcihzbmFwR3JpZFtzbmFwR3JpZC5sZW5ndGggLSAxXSkgPiAxKSB7XG4gICAgICBzbmFwR3JpZC5wdXNoKHN3aXBlci52aXJ0dWFsU2l6ZSAtIHN3aXBlclNpemUpO1xuICAgIH1cbiAgfVxuICBpZiAoaXNWaXJ0dWFsICYmIHBhcmFtcy5sb29wKSB7XG4gICAgY29uc3Qgc2l6ZSA9IHNsaWRlc1NpemVzR3JpZFswXSArIHNwYWNlQmV0d2VlbjtcbiAgICBpZiAocGFyYW1zLnNsaWRlc1Blckdyb3VwID4gMSkge1xuICAgICAgY29uc3QgZ3JvdXBzID0gTWF0aC5jZWlsKChzd2lwZXIudmlydHVhbC5zbGlkZXNCZWZvcmUgKyBzd2lwZXIudmlydHVhbC5zbGlkZXNBZnRlcikgLyBwYXJhbXMuc2xpZGVzUGVyR3JvdXApO1xuICAgICAgY29uc3QgZ3JvdXBTaXplID0gc2l6ZSAqIHBhcmFtcy5zbGlkZXNQZXJHcm91cDtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZ3JvdXBzOyBpICs9IDEpIHtcbiAgICAgICAgc25hcEdyaWQucHVzaChzbmFwR3JpZFtzbmFwR3JpZC5sZW5ndGggLSAxXSArIGdyb3VwU2l6ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3dpcGVyLnZpcnR1YWwuc2xpZGVzQmVmb3JlICsgc3dpcGVyLnZpcnR1YWwuc2xpZGVzQWZ0ZXI7IGkgKz0gMSkge1xuICAgICAgaWYgKHBhcmFtcy5zbGlkZXNQZXJHcm91cCA9PT0gMSkge1xuICAgICAgICBzbmFwR3JpZC5wdXNoKHNuYXBHcmlkW3NuYXBHcmlkLmxlbmd0aCAtIDFdICsgc2l6ZSk7XG4gICAgICB9XG4gICAgICBzbGlkZXNHcmlkLnB1c2goc2xpZGVzR3JpZFtzbGlkZXNHcmlkLmxlbmd0aCAtIDFdICsgc2l6ZSk7XG4gICAgICBzd2lwZXIudmlydHVhbFNpemUgKz0gc2l6ZTtcbiAgICB9XG4gIH1cbiAgaWYgKHNuYXBHcmlkLmxlbmd0aCA9PT0gMCkgc25hcEdyaWQgPSBbMF07XG4gIGlmIChzcGFjZUJldHdlZW4gIT09IDApIHtcbiAgICBjb25zdCBrZXkgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgJiYgcnRsID8gJ21hcmdpbkxlZnQnIDogc3dpcGVyLmdldERpcmVjdGlvbkxhYmVsKCdtYXJnaW5SaWdodCcpO1xuICAgIHNsaWRlcy5maWx0ZXIoKF8sIHNsaWRlSW5kZXgpID0+IHtcbiAgICAgIGlmICghcGFyYW1zLmNzc01vZGUgfHwgcGFyYW1zLmxvb3ApIHJldHVybiB0cnVlO1xuICAgICAgaWYgKHNsaWRlSW5kZXggPT09IHNsaWRlcy5sZW5ndGggLSAxKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pLmZvckVhY2goc2xpZGVFbCA9PiB7XG4gICAgICBzbGlkZUVsLnN0eWxlW2tleV0gPSBgJHtzcGFjZUJldHdlZW59cHhgO1xuICAgIH0pO1xuICB9XG4gIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMgJiYgcGFyYW1zLmNlbnRlcmVkU2xpZGVzQm91bmRzKSB7XG4gICAgbGV0IGFsbFNsaWRlc1NpemUgPSAwO1xuICAgIHNsaWRlc1NpemVzR3JpZC5mb3JFYWNoKHNsaWRlU2l6ZVZhbHVlID0+IHtcbiAgICAgIGFsbFNsaWRlc1NpemUgKz0gc2xpZGVTaXplVmFsdWUgKyAoc3BhY2VCZXR3ZWVuIHx8IDApO1xuICAgIH0pO1xuICAgIGFsbFNsaWRlc1NpemUgLT0gc3BhY2VCZXR3ZWVuO1xuICAgIGNvbnN0IG1heFNuYXAgPSBhbGxTbGlkZXNTaXplIC0gc3dpcGVyU2l6ZTtcbiAgICBzbmFwR3JpZCA9IHNuYXBHcmlkLm1hcChzbmFwID0+IHtcbiAgICAgIGlmIChzbmFwIDw9IDApIHJldHVybiAtb2Zmc2V0QmVmb3JlO1xuICAgICAgaWYgKHNuYXAgPiBtYXhTbmFwKSByZXR1cm4gbWF4U25hcCArIG9mZnNldEFmdGVyO1xuICAgICAgcmV0dXJuIHNuYXA7XG4gICAgfSk7XG4gIH1cbiAgaWYgKHBhcmFtcy5jZW50ZXJJbnN1ZmZpY2llbnRTbGlkZXMpIHtcbiAgICBsZXQgYWxsU2xpZGVzU2l6ZSA9IDA7XG4gICAgc2xpZGVzU2l6ZXNHcmlkLmZvckVhY2goc2xpZGVTaXplVmFsdWUgPT4ge1xuICAgICAgYWxsU2xpZGVzU2l6ZSArPSBzbGlkZVNpemVWYWx1ZSArIChzcGFjZUJldHdlZW4gfHwgMCk7XG4gICAgfSk7XG4gICAgYWxsU2xpZGVzU2l6ZSAtPSBzcGFjZUJldHdlZW47XG4gICAgY29uc3Qgb2Zmc2V0U2l6ZSA9IChwYXJhbXMuc2xpZGVzT2Zmc2V0QmVmb3JlIHx8IDApICsgKHBhcmFtcy5zbGlkZXNPZmZzZXRBZnRlciB8fCAwKTtcbiAgICBpZiAoYWxsU2xpZGVzU2l6ZSArIG9mZnNldFNpemUgPCBzd2lwZXJTaXplKSB7XG4gICAgICBjb25zdCBhbGxTbGlkZXNPZmZzZXQgPSAoc3dpcGVyU2l6ZSAtIGFsbFNsaWRlc1NpemUgLSBvZmZzZXRTaXplKSAvIDI7XG4gICAgICBzbmFwR3JpZC5mb3JFYWNoKChzbmFwLCBzbmFwSW5kZXgpID0+IHtcbiAgICAgICAgc25hcEdyaWRbc25hcEluZGV4XSA9IHNuYXAgLSBhbGxTbGlkZXNPZmZzZXQ7XG4gICAgICB9KTtcbiAgICAgIHNsaWRlc0dyaWQuZm9yRWFjaCgoc25hcCwgc25hcEluZGV4KSA9PiB7XG4gICAgICAgIHNsaWRlc0dyaWRbc25hcEluZGV4XSA9IHNuYXAgKyBhbGxTbGlkZXNPZmZzZXQ7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgT2JqZWN0LmFzc2lnbihzd2lwZXIsIHtcbiAgICBzbGlkZXMsXG4gICAgc25hcEdyaWQsXG4gICAgc2xpZGVzR3JpZCxcbiAgICBzbGlkZXNTaXplc0dyaWRcbiAgfSk7XG4gIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMgJiYgcGFyYW1zLmNzc01vZGUgJiYgIXBhcmFtcy5jZW50ZXJlZFNsaWRlc0JvdW5kcykge1xuICAgIHNldENTU1Byb3BlcnR5KHdyYXBwZXJFbCwgJy0tc3dpcGVyLWNlbnRlcmVkLW9mZnNldC1iZWZvcmUnLCBgJHstc25hcEdyaWRbMF19cHhgKTtcbiAgICBzZXRDU1NQcm9wZXJ0eSh3cmFwcGVyRWwsICctLXN3aXBlci1jZW50ZXJlZC1vZmZzZXQtYWZ0ZXInLCBgJHtzd2lwZXIuc2l6ZSAvIDIgLSBzbGlkZXNTaXplc0dyaWRbc2xpZGVzU2l6ZXNHcmlkLmxlbmd0aCAtIDFdIC8gMn1weGApO1xuICAgIGNvbnN0IGFkZFRvU25hcEdyaWQgPSAtc3dpcGVyLnNuYXBHcmlkWzBdO1xuICAgIGNvbnN0IGFkZFRvU2xpZGVzR3JpZCA9IC1zd2lwZXIuc2xpZGVzR3JpZFswXTtcbiAgICBzd2lwZXIuc25hcEdyaWQgPSBzd2lwZXIuc25hcEdyaWQubWFwKHYgPT4gdiArIGFkZFRvU25hcEdyaWQpO1xuICAgIHN3aXBlci5zbGlkZXNHcmlkID0gc3dpcGVyLnNsaWRlc0dyaWQubWFwKHYgPT4gdiArIGFkZFRvU2xpZGVzR3JpZCk7XG4gIH1cbiAgaWYgKHNsaWRlc0xlbmd0aCAhPT0gcHJldmlvdXNTbGlkZXNMZW5ndGgpIHtcbiAgICBzd2lwZXIuZW1pdCgnc2xpZGVzTGVuZ3RoQ2hhbmdlJyk7XG4gIH1cbiAgaWYgKHNuYXBHcmlkLmxlbmd0aCAhPT0gcHJldmlvdXNTbmFwR3JpZExlbmd0aCkge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cpIHN3aXBlci5jaGVja092ZXJmbG93KCk7XG4gICAgc3dpcGVyLmVtaXQoJ3NuYXBHcmlkTGVuZ3RoQ2hhbmdlJyk7XG4gIH1cbiAgaWYgKHNsaWRlc0dyaWQubGVuZ3RoICE9PSBwcmV2aW91c1NsaWRlc0dyaWRMZW5ndGgpIHtcbiAgICBzd2lwZXIuZW1pdCgnc2xpZGVzR3JpZExlbmd0aENoYW5nZScpO1xuICB9XG4gIGlmIChwYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcykge1xuICAgIHN3aXBlci51cGRhdGVTbGlkZXNPZmZzZXQoKTtcbiAgfVxuICBzd2lwZXIuZW1pdCgnc2xpZGVzVXBkYXRlZCcpO1xuICBpZiAoIWlzVmlydHVhbCAmJiAhcGFyYW1zLmNzc01vZGUgJiYgKHBhcmFtcy5lZmZlY3QgPT09ICdzbGlkZScgfHwgcGFyYW1zLmVmZmVjdCA9PT0gJ2ZhZGUnKSkge1xuICAgIGNvbnN0IGJhY2tGYWNlSGlkZGVuQ2xhc3MgPSBgJHtwYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc31iYWNrZmFjZS1oaWRkZW5gO1xuICAgIGNvbnN0IGhhc0NsYXNzQmFja2ZhY2VDbGFzc0FkZGVkID0gc3dpcGVyLmVsLmNsYXNzTGlzdC5jb250YWlucyhiYWNrRmFjZUhpZGRlbkNsYXNzKTtcbiAgICBpZiAoc2xpZGVzTGVuZ3RoIDw9IHBhcmFtcy5tYXhCYWNrZmFjZUhpZGRlblNsaWRlcykge1xuICAgICAgaWYgKCFoYXNDbGFzc0JhY2tmYWNlQ2xhc3NBZGRlZCkgc3dpcGVyLmVsLmNsYXNzTGlzdC5hZGQoYmFja0ZhY2VIaWRkZW5DbGFzcyk7XG4gICAgfSBlbHNlIGlmIChoYXNDbGFzc0JhY2tmYWNlQ2xhc3NBZGRlZCkge1xuICAgICAgc3dpcGVyLmVsLmNsYXNzTGlzdC5yZW1vdmUoYmFja0ZhY2VIaWRkZW5DbGFzcyk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUF1dG9IZWlnaHQoc3BlZWQpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgYWN0aXZlU2xpZGVzID0gW107XG4gIGNvbnN0IGlzVmlydHVhbCA9IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkO1xuICBsZXQgbmV3SGVpZ2h0ID0gMDtcbiAgbGV0IGk7XG4gIGlmICh0eXBlb2Ygc3BlZWQgPT09ICdudW1iZXInKSB7XG4gICAgc3dpcGVyLnNldFRyYW5zaXRpb24oc3BlZWQpO1xuICB9IGVsc2UgaWYgKHNwZWVkID09PSB0cnVlKSB7XG4gICAgc3dpcGVyLnNldFRyYW5zaXRpb24oc3dpcGVyLnBhcmFtcy5zcGVlZCk7XG4gIH1cbiAgY29uc3QgZ2V0U2xpZGVCeUluZGV4ID0gaW5kZXggPT4ge1xuICAgIGlmIChpc1ZpcnR1YWwpIHtcbiAgICAgIHJldHVybiBzd2lwZXIuc2xpZGVzW3N3aXBlci5nZXRTbGlkZUluZGV4QnlEYXRhKGluZGV4KV07XG4gICAgfVxuICAgIHJldHVybiBzd2lwZXIuc2xpZGVzW2luZGV4XTtcbiAgfTtcbiAgLy8gRmluZCBzbGlkZXMgY3VycmVudGx5IGluIHZpZXdcbiAgaWYgKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyAhPT0gJ2F1dG8nICYmIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyA+IDEpIHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgKHN3aXBlci52aXNpYmxlU2xpZGVzIHx8IFtdKS5mb3JFYWNoKHNsaWRlID0+IHtcbiAgICAgICAgYWN0aXZlU2xpZGVzLnB1c2goc2xpZGUpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBNYXRoLmNlaWwoc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3KTsgaSArPSAxKSB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4ICsgaTtcbiAgICAgICAgaWYgKGluZGV4ID4gc3dpcGVyLnNsaWRlcy5sZW5ndGggJiYgIWlzVmlydHVhbCkgYnJlYWs7XG4gICAgICAgIGFjdGl2ZVNsaWRlcy5wdXNoKGdldFNsaWRlQnlJbmRleChpbmRleCkpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBhY3RpdmVTbGlkZXMucHVzaChnZXRTbGlkZUJ5SW5kZXgoc3dpcGVyLmFjdGl2ZUluZGV4KSk7XG4gIH1cblxuICAvLyBGaW5kIG5ldyBoZWlnaHQgZnJvbSBoaWdoZXN0IHNsaWRlIGluIHZpZXdcbiAgZm9yIChpID0gMDsgaSA8IGFjdGl2ZVNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmICh0eXBlb2YgYWN0aXZlU2xpZGVzW2ldICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc3QgaGVpZ2h0ID0gYWN0aXZlU2xpZGVzW2ldLm9mZnNldEhlaWdodDtcbiAgICAgIG5ld0hlaWdodCA9IGhlaWdodCA+IG5ld0hlaWdodCA/IGhlaWdodCA6IG5ld0hlaWdodDtcbiAgICB9XG4gIH1cblxuICAvLyBVcGRhdGUgSGVpZ2h0XG4gIGlmIChuZXdIZWlnaHQgfHwgbmV3SGVpZ2h0ID09PSAwKSBzd2lwZXIud3JhcHBlckVsLnN0eWxlLmhlaWdodCA9IGAke25ld0hlaWdodH1weGA7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZVNsaWRlc09mZnNldCgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qgc2xpZGVzID0gc3dpcGVyLnNsaWRlcztcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gIGNvbnN0IG1pbnVzT2Zmc2V0ID0gc3dpcGVyLmlzRWxlbWVudCA/IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHN3aXBlci53cmFwcGVyRWwub2Zmc2V0TGVmdCA6IHN3aXBlci53cmFwcGVyRWwub2Zmc2V0VG9wIDogMDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBzbGlkZXNbaV0uc3dpcGVyU2xpZGVPZmZzZXQgPSAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gc2xpZGVzW2ldLm9mZnNldExlZnQgOiBzbGlkZXNbaV0ub2Zmc2V0VG9wKSAtIG1pbnVzT2Zmc2V0IC0gc3dpcGVyLmNzc092ZXJmbG93QWRqdXN0bWVudCgpO1xuICB9XG59XG5cbmNvbnN0IHRvZ2dsZVNsaWRlQ2xhc3NlcyQxID0gKHNsaWRlRWwsIGNvbmRpdGlvbiwgY2xhc3NOYW1lKSA9PiB7XG4gIGlmIChjb25kaXRpb24gJiYgIXNsaWRlRWwuY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzTmFtZSkpIHtcbiAgICBzbGlkZUVsLmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtcbiAgfSBlbHNlIGlmICghY29uZGl0aW9uICYmIHNsaWRlRWwuY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzTmFtZSkpIHtcbiAgICBzbGlkZUVsLmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTtcbiAgfVxufTtcbmZ1bmN0aW9uIHVwZGF0ZVNsaWRlc1Byb2dyZXNzKHRyYW5zbGF0ZSkge1xuICBpZiAodHJhbnNsYXRlID09PSB2b2lkIDApIHtcbiAgICB0cmFuc2xhdGUgPSB0aGlzICYmIHRoaXMudHJhbnNsYXRlIHx8IDA7XG4gIH1cbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcbiAgY29uc3Qge1xuICAgIHNsaWRlcyxcbiAgICBydGxUcmFuc2xhdGU6IHJ0bCxcbiAgICBzbmFwR3JpZFxuICB9ID0gc3dpcGVyO1xuICBpZiAoc2xpZGVzLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICBpZiAodHlwZW9mIHNsaWRlc1swXS5zd2lwZXJTbGlkZU9mZnNldCA9PT0gJ3VuZGVmaW5lZCcpIHN3aXBlci51cGRhdGVTbGlkZXNPZmZzZXQoKTtcbiAgbGV0IG9mZnNldENlbnRlciA9IC10cmFuc2xhdGU7XG4gIGlmIChydGwpIG9mZnNldENlbnRlciA9IHRyYW5zbGF0ZTtcbiAgc3dpcGVyLnZpc2libGVTbGlkZXNJbmRleGVzID0gW107XG4gIHN3aXBlci52aXNpYmxlU2xpZGVzID0gW107XG4gIGxldCBzcGFjZUJldHdlZW4gPSBwYXJhbXMuc3BhY2VCZXR3ZWVuO1xuICBpZiAodHlwZW9mIHNwYWNlQmV0d2VlbiA9PT0gJ3N0cmluZycgJiYgc3BhY2VCZXR3ZWVuLmluZGV4T2YoJyUnKSA+PSAwKSB7XG4gICAgc3BhY2VCZXR3ZWVuID0gcGFyc2VGbG9hdChzcGFjZUJldHdlZW4ucmVwbGFjZSgnJScsICcnKSkgLyAxMDAgKiBzd2lwZXIuc2l6ZTtcbiAgfSBlbHNlIGlmICh0eXBlb2Ygc3BhY2VCZXR3ZWVuID09PSAnc3RyaW5nJykge1xuICAgIHNwYWNlQmV0d2VlbiA9IHBhcnNlRmxvYXQoc3BhY2VCZXR3ZWVuKTtcbiAgfVxuICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGNvbnN0IHNsaWRlID0gc2xpZGVzW2ldO1xuICAgIGxldCBzbGlkZU9mZnNldCA9IHNsaWRlLnN3aXBlclNsaWRlT2Zmc2V0O1xuICAgIGlmIChwYXJhbXMuY3NzTW9kZSAmJiBwYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgIHNsaWRlT2Zmc2V0IC09IHNsaWRlc1swXS5zd2lwZXJTbGlkZU9mZnNldDtcbiAgICB9XG4gICAgY29uc3Qgc2xpZGVQcm9ncmVzcyA9IChvZmZzZXRDZW50ZXIgKyAocGFyYW1zLmNlbnRlcmVkU2xpZGVzID8gc3dpcGVyLm1pblRyYW5zbGF0ZSgpIDogMCkgLSBzbGlkZU9mZnNldCkgLyAoc2xpZGUuc3dpcGVyU2xpZGVTaXplICsgc3BhY2VCZXR3ZWVuKTtcbiAgICBjb25zdCBvcmlnaW5hbFNsaWRlUHJvZ3Jlc3MgPSAob2Zmc2V0Q2VudGVyIC0gc25hcEdyaWRbMF0gKyAocGFyYW1zLmNlbnRlcmVkU2xpZGVzID8gc3dpcGVyLm1pblRyYW5zbGF0ZSgpIDogMCkgLSBzbGlkZU9mZnNldCkgLyAoc2xpZGUuc3dpcGVyU2xpZGVTaXplICsgc3BhY2VCZXR3ZWVuKTtcbiAgICBjb25zdCBzbGlkZUJlZm9yZSA9IC0ob2Zmc2V0Q2VudGVyIC0gc2xpZGVPZmZzZXQpO1xuICAgIGNvbnN0IHNsaWRlQWZ0ZXIgPSBzbGlkZUJlZm9yZSArIHN3aXBlci5zbGlkZXNTaXplc0dyaWRbaV07XG4gICAgY29uc3QgaXNGdWxseVZpc2libGUgPSBzbGlkZUJlZm9yZSA+PSAwICYmIHNsaWRlQmVmb3JlIDw9IHN3aXBlci5zaXplIC0gc3dpcGVyLnNsaWRlc1NpemVzR3JpZFtpXTtcbiAgICBjb25zdCBpc1Zpc2libGUgPSBzbGlkZUJlZm9yZSA+PSAwICYmIHNsaWRlQmVmb3JlIDwgc3dpcGVyLnNpemUgLSAxIHx8IHNsaWRlQWZ0ZXIgPiAxICYmIHNsaWRlQWZ0ZXIgPD0gc3dpcGVyLnNpemUgfHwgc2xpZGVCZWZvcmUgPD0gMCAmJiBzbGlkZUFmdGVyID49IHN3aXBlci5zaXplO1xuICAgIGlmIChpc1Zpc2libGUpIHtcbiAgICAgIHN3aXBlci52aXNpYmxlU2xpZGVzLnB1c2goc2xpZGUpO1xuICAgICAgc3dpcGVyLnZpc2libGVTbGlkZXNJbmRleGVzLnB1c2goaSk7XG4gICAgfVxuICAgIHRvZ2dsZVNsaWRlQ2xhc3NlcyQxKHNsaWRlLCBpc1Zpc2libGUsIHBhcmFtcy5zbGlkZVZpc2libGVDbGFzcyk7XG4gICAgdG9nZ2xlU2xpZGVDbGFzc2VzJDEoc2xpZGUsIGlzRnVsbHlWaXNpYmxlLCBwYXJhbXMuc2xpZGVGdWxseVZpc2libGVDbGFzcyk7XG4gICAgc2xpZGUucHJvZ3Jlc3MgPSBydGwgPyAtc2xpZGVQcm9ncmVzcyA6IHNsaWRlUHJvZ3Jlc3M7XG4gICAgc2xpZGUub3JpZ2luYWxQcm9ncmVzcyA9IHJ0bCA/IC1vcmlnaW5hbFNsaWRlUHJvZ3Jlc3MgOiBvcmlnaW5hbFNsaWRlUHJvZ3Jlc3M7XG4gIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlUHJvZ3Jlc3ModHJhbnNsYXRlKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGlmICh0eXBlb2YgdHJhbnNsYXRlID09PSAndW5kZWZpbmVkJykge1xuICAgIGNvbnN0IG11bHRpcGxpZXIgPSBzd2lwZXIucnRsVHJhbnNsYXRlID8gLTEgOiAxO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgIHRyYW5zbGF0ZSA9IHN3aXBlciAmJiBzd2lwZXIudHJhbnNsYXRlICYmIHN3aXBlci50cmFuc2xhdGUgKiBtdWx0aXBsaWVyIHx8IDA7XG4gIH1cbiAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcbiAgY29uc3QgdHJhbnNsYXRlc0RpZmYgPSBzd2lwZXIubWF4VHJhbnNsYXRlKCkgLSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG4gIGxldCB7XG4gICAgcHJvZ3Jlc3MsXG4gICAgaXNCZWdpbm5pbmcsXG4gICAgaXNFbmQsXG4gICAgcHJvZ3Jlc3NMb29wXG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IHdhc0JlZ2lubmluZyA9IGlzQmVnaW5uaW5nO1xuICBjb25zdCB3YXNFbmQgPSBpc0VuZDtcbiAgaWYgKHRyYW5zbGF0ZXNEaWZmID09PSAwKSB7XG4gICAgcHJvZ3Jlc3MgPSAwO1xuICAgIGlzQmVnaW5uaW5nID0gdHJ1ZTtcbiAgICBpc0VuZCA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgcHJvZ3Jlc3MgPSAodHJhbnNsYXRlIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSAvIHRyYW5zbGF0ZXNEaWZmO1xuICAgIGNvbnN0IGlzQmVnaW5uaW5nUm91bmRlZCA9IE1hdGguYWJzKHRyYW5zbGF0ZSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKSkgPCAxO1xuICAgIGNvbnN0IGlzRW5kUm91bmRlZCA9IE1hdGguYWJzKHRyYW5zbGF0ZSAtIHN3aXBlci5tYXhUcmFuc2xhdGUoKSkgPCAxO1xuICAgIGlzQmVnaW5uaW5nID0gaXNCZWdpbm5pbmdSb3VuZGVkIHx8IHByb2dyZXNzIDw9IDA7XG4gICAgaXNFbmQgPSBpc0VuZFJvdW5kZWQgfHwgcHJvZ3Jlc3MgPj0gMTtcbiAgICBpZiAoaXNCZWdpbm5pbmdSb3VuZGVkKSBwcm9ncmVzcyA9IDA7XG4gICAgaWYgKGlzRW5kUm91bmRlZCkgcHJvZ3Jlc3MgPSAxO1xuICB9XG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIGNvbnN0IGZpcnN0U2xpZGVJbmRleCA9IHN3aXBlci5nZXRTbGlkZUluZGV4QnlEYXRhKDApO1xuICAgIGNvbnN0IGxhc3RTbGlkZUluZGV4ID0gc3dpcGVyLmdldFNsaWRlSW5kZXhCeURhdGEoc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxKTtcbiAgICBjb25zdCBmaXJzdFNsaWRlVHJhbnNsYXRlID0gc3dpcGVyLnNsaWRlc0dyaWRbZmlyc3RTbGlkZUluZGV4XTtcbiAgICBjb25zdCBsYXN0U2xpZGVUcmFuc2xhdGUgPSBzd2lwZXIuc2xpZGVzR3JpZFtsYXN0U2xpZGVJbmRleF07XG4gICAgY29uc3QgdHJhbnNsYXRlTWF4ID0gc3dpcGVyLnNsaWRlc0dyaWRbc3dpcGVyLnNsaWRlc0dyaWQubGVuZ3RoIC0gMV07XG4gICAgY29uc3QgdHJhbnNsYXRlQWJzID0gTWF0aC5hYnModHJhbnNsYXRlKTtcbiAgICBpZiAodHJhbnNsYXRlQWJzID49IGZpcnN0U2xpZGVUcmFuc2xhdGUpIHtcbiAgICAgIHByb2dyZXNzTG9vcCA9ICh0cmFuc2xhdGVBYnMgLSBmaXJzdFNsaWRlVHJhbnNsYXRlKSAvIHRyYW5zbGF0ZU1heDtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvZ3Jlc3NMb29wID0gKHRyYW5zbGF0ZUFicyArIHRyYW5zbGF0ZU1heCAtIGxhc3RTbGlkZVRyYW5zbGF0ZSkgLyB0cmFuc2xhdGVNYXg7XG4gICAgfVxuICAgIGlmIChwcm9ncmVzc0xvb3AgPiAxKSBwcm9ncmVzc0xvb3AgLT0gMTtcbiAgfVxuICBPYmplY3QuYXNzaWduKHN3aXBlciwge1xuICAgIHByb2dyZXNzLFxuICAgIHByb2dyZXNzTG9vcCxcbiAgICBpc0JlZ2lubmluZyxcbiAgICBpc0VuZFxuICB9KTtcbiAgaWYgKHBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzIHx8IHBhcmFtcy5jZW50ZXJlZFNsaWRlcyAmJiBwYXJhbXMuYXV0b0hlaWdodCkgc3dpcGVyLnVwZGF0ZVNsaWRlc1Byb2dyZXNzKHRyYW5zbGF0ZSk7XG4gIGlmIChpc0JlZ2lubmluZyAmJiAhd2FzQmVnaW5uaW5nKSB7XG4gICAgc3dpcGVyLmVtaXQoJ3JlYWNoQmVnaW5uaW5nIHRvRWRnZScpO1xuICB9XG4gIGlmIChpc0VuZCAmJiAhd2FzRW5kKSB7XG4gICAgc3dpcGVyLmVtaXQoJ3JlYWNoRW5kIHRvRWRnZScpO1xuICB9XG4gIGlmICh3YXNCZWdpbm5pbmcgJiYgIWlzQmVnaW5uaW5nIHx8IHdhc0VuZCAmJiAhaXNFbmQpIHtcbiAgICBzd2lwZXIuZW1pdCgnZnJvbUVkZ2UnKTtcbiAgfVxuICBzd2lwZXIuZW1pdCgncHJvZ3Jlc3MnLCBwcm9ncmVzcyk7XG59XG5cbmNvbnN0IHRvZ2dsZVNsaWRlQ2xhc3NlcyA9IChzbGlkZUVsLCBjb25kaXRpb24sIGNsYXNzTmFtZSkgPT4ge1xuICBpZiAoY29uZGl0aW9uICYmICFzbGlkZUVsLmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpKSB7XG4gICAgc2xpZGVFbC5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7XG4gIH0gZWxzZSBpZiAoIWNvbmRpdGlvbiAmJiBzbGlkZUVsLmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpKSB7XG4gICAgc2xpZGVFbC5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZSk7XG4gIH1cbn07XG5mdW5jdGlvbiB1cGRhdGVTbGlkZXNDbGFzc2VzKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgc2xpZGVzLFxuICAgIHBhcmFtcyxcbiAgICBzbGlkZXNFbCxcbiAgICBhY3RpdmVJbmRleFxuICB9ID0gc3dpcGVyO1xuICBjb25zdCBpc1ZpcnR1YWwgPSBzd2lwZXIudmlydHVhbCAmJiBwYXJhbXMudmlydHVhbC5lbmFibGVkO1xuICBjb25zdCBncmlkRW5hYmxlZCA9IHN3aXBlci5ncmlkICYmIHBhcmFtcy5ncmlkICYmIHBhcmFtcy5ncmlkLnJvd3MgPiAxO1xuICBjb25zdCBnZXRGaWx0ZXJlZFNsaWRlID0gc2VsZWN0b3IgPT4ge1xuICAgIHJldHVybiBlbGVtZW50Q2hpbGRyZW4oc2xpZGVzRWwsIGAuJHtwYXJhbXMuc2xpZGVDbGFzc30ke3NlbGVjdG9yfSwgc3dpcGVyLXNsaWRlJHtzZWxlY3Rvcn1gKVswXTtcbiAgfTtcbiAgbGV0IGFjdGl2ZVNsaWRlO1xuICBsZXQgcHJldlNsaWRlO1xuICBsZXQgbmV4dFNsaWRlO1xuICBpZiAoaXNWaXJ0dWFsKSB7XG4gICAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgICBsZXQgc2xpZGVJbmRleCA9IGFjdGl2ZUluZGV4IC0gc3dpcGVyLnZpcnR1YWwuc2xpZGVzQmVmb3JlO1xuICAgICAgaWYgKHNsaWRlSW5kZXggPCAwKSBzbGlkZUluZGV4ID0gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCArIHNsaWRlSW5kZXg7XG4gICAgICBpZiAoc2xpZGVJbmRleCA+PSBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoKSBzbGlkZUluZGV4IC09IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGg7XG4gICAgICBhY3RpdmVTbGlkZSA9IGdldEZpbHRlcmVkU2xpZGUoYFtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7c2xpZGVJbmRleH1cIl1gKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWN0aXZlU2xpZGUgPSBnZXRGaWx0ZXJlZFNsaWRlKGBbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke2FjdGl2ZUluZGV4fVwiXWApO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoZ3JpZEVuYWJsZWQpIHtcbiAgICAgIGFjdGl2ZVNsaWRlID0gc2xpZGVzLmZpbHRlcihzbGlkZUVsID0+IHNsaWRlRWwuY29sdW1uID09PSBhY3RpdmVJbmRleClbMF07XG4gICAgICBuZXh0U2xpZGUgPSBzbGlkZXMuZmlsdGVyKHNsaWRlRWwgPT4gc2xpZGVFbC5jb2x1bW4gPT09IGFjdGl2ZUluZGV4ICsgMSlbMF07XG4gICAgICBwcmV2U2xpZGUgPSBzbGlkZXMuZmlsdGVyKHNsaWRlRWwgPT4gc2xpZGVFbC5jb2x1bW4gPT09IGFjdGl2ZUluZGV4IC0gMSlbMF07XG4gICAgfSBlbHNlIHtcbiAgICAgIGFjdGl2ZVNsaWRlID0gc2xpZGVzW2FjdGl2ZUluZGV4XTtcbiAgICB9XG4gIH1cbiAgaWYgKGFjdGl2ZVNsaWRlKSB7XG4gICAgaWYgKCFncmlkRW5hYmxlZCkge1xuICAgICAgLy8gTmV4dCBTbGlkZVxuICAgICAgbmV4dFNsaWRlID0gZWxlbWVudE5leHRBbGwoYWN0aXZlU2xpZGUsIGAuJHtwYXJhbXMuc2xpZGVDbGFzc30sIHN3aXBlci1zbGlkZWApWzBdO1xuICAgICAgaWYgKHBhcmFtcy5sb29wICYmICFuZXh0U2xpZGUpIHtcbiAgICAgICAgbmV4dFNsaWRlID0gc2xpZGVzWzBdO1xuICAgICAgfVxuXG4gICAgICAvLyBQcmV2IFNsaWRlXG4gICAgICBwcmV2U2xpZGUgPSBlbGVtZW50UHJldkFsbChhY3RpdmVTbGlkZSwgYC4ke3BhcmFtcy5zbGlkZUNsYXNzfSwgc3dpcGVyLXNsaWRlYClbMF07XG4gICAgICBpZiAocGFyYW1zLmxvb3AgJiYgIXByZXZTbGlkZSA9PT0gMCkge1xuICAgICAgICBwcmV2U2xpZGUgPSBzbGlkZXNbc2xpZGVzLmxlbmd0aCAtIDFdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBzbGlkZXMuZm9yRWFjaChzbGlkZUVsID0+IHtcbiAgICB0b2dnbGVTbGlkZUNsYXNzZXMoc2xpZGVFbCwgc2xpZGVFbCA9PT0gYWN0aXZlU2xpZGUsIHBhcmFtcy5zbGlkZUFjdGl2ZUNsYXNzKTtcbiAgICB0b2dnbGVTbGlkZUNsYXNzZXMoc2xpZGVFbCwgc2xpZGVFbCA9PT0gbmV4dFNsaWRlLCBwYXJhbXMuc2xpZGVOZXh0Q2xhc3MpO1xuICAgIHRvZ2dsZVNsaWRlQ2xhc3NlcyhzbGlkZUVsLCBzbGlkZUVsID09PSBwcmV2U2xpZGUsIHBhcmFtcy5zbGlkZVByZXZDbGFzcyk7XG4gIH0pO1xuICBzd2lwZXIuZW1pdFNsaWRlc0NsYXNzZXMoKTtcbn1cblxuY29uc3QgcHJvY2Vzc0xhenlQcmVsb2FkZXIgPSAoc3dpcGVyLCBpbWFnZUVsKSA9PiB7XG4gIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQgfHwgIXN3aXBlci5wYXJhbXMpIHJldHVybjtcbiAgY29uc3Qgc2xpZGVTZWxlY3RvciA9ICgpID0+IHN3aXBlci5pc0VsZW1lbnQgPyBgc3dpcGVyLXNsaWRlYCA6IGAuJHtzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3N9YDtcbiAgY29uc3Qgc2xpZGVFbCA9IGltYWdlRWwuY2xvc2VzdChzbGlkZVNlbGVjdG9yKCkpO1xuICBpZiAoc2xpZGVFbCkge1xuICAgIGxldCBsYXp5RWwgPSBzbGlkZUVsLnF1ZXJ5U2VsZWN0b3IoYC4ke3N3aXBlci5wYXJhbXMubGF6eVByZWxvYWRlckNsYXNzfWApO1xuICAgIGlmICghbGF6eUVsICYmIHN3aXBlci5pc0VsZW1lbnQpIHtcbiAgICAgIGlmIChzbGlkZUVsLnNoYWRvd1Jvb3QpIHtcbiAgICAgICAgbGF6eUVsID0gc2xpZGVFbC5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoYC4ke3N3aXBlci5wYXJhbXMubGF6eVByZWxvYWRlckNsYXNzfWApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gaW5pdCBsYXRlclxuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgIGlmIChzbGlkZUVsLnNoYWRvd1Jvb3QpIHtcbiAgICAgICAgICAgIGxhenlFbCA9IHNsaWRlRWwuc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKGAuJHtzd2lwZXIucGFyYW1zLmxhenlQcmVsb2FkZXJDbGFzc31gKTtcbiAgICAgICAgICAgIGlmIChsYXp5RWwpIGxhenlFbC5yZW1vdmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAobGF6eUVsKSBsYXp5RWwucmVtb3ZlKCk7XG4gIH1cbn07XG5jb25zdCB1bmxhenkgPSAoc3dpcGVyLCBpbmRleCkgPT4ge1xuICBpZiAoIXN3aXBlci5zbGlkZXNbaW5kZXhdKSByZXR1cm47XG4gIGNvbnN0IGltYWdlRWwgPSBzd2lwZXIuc2xpZGVzW2luZGV4XS5xdWVyeVNlbGVjdG9yKCdbbG9hZGluZz1cImxhenlcIl0nKTtcbiAgaWYgKGltYWdlRWwpIGltYWdlRWwucmVtb3ZlQXR0cmlidXRlKCdsb2FkaW5nJyk7XG59O1xuY29uc3QgcHJlbG9hZCA9IHN3aXBlciA9PiB7XG4gIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQgfHwgIXN3aXBlci5wYXJhbXMpIHJldHVybjtcbiAgbGV0IGFtb3VudCA9IHN3aXBlci5wYXJhbXMubGF6eVByZWxvYWRQcmV2TmV4dDtcbiAgY29uc3QgbGVuID0gc3dpcGVyLnNsaWRlcy5sZW5ndGg7XG4gIGlmICghbGVuIHx8ICFhbW91bnQgfHwgYW1vdW50IDwgMCkgcmV0dXJuO1xuICBhbW91bnQgPSBNYXRoLm1pbihhbW91bnQsIGxlbik7XG4gIGNvbnN0IHNsaWRlc1BlclZpZXcgPSBzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyA/IHN3aXBlci5zbGlkZXNQZXJWaWV3RHluYW1pYygpIDogTWF0aC5jZWlsKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyk7XG4gIGNvbnN0IGFjdGl2ZUluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4O1xuICBpZiAoc3dpcGVyLnBhcmFtcy5ncmlkICYmIHN3aXBlci5wYXJhbXMuZ3JpZC5yb3dzID4gMSkge1xuICAgIGNvbnN0IGFjdGl2ZUNvbHVtbiA9IGFjdGl2ZUluZGV4O1xuICAgIGNvbnN0IHByZWxvYWRDb2x1bW5zID0gW2FjdGl2ZUNvbHVtbiAtIGFtb3VudF07XG4gICAgcHJlbG9hZENvbHVtbnMucHVzaCguLi5BcnJheS5mcm9tKHtcbiAgICAgIGxlbmd0aDogYW1vdW50XG4gICAgfSkubWFwKChfLCBpKSA9PiB7XG4gICAgICByZXR1cm4gYWN0aXZlQ29sdW1uICsgc2xpZGVzUGVyVmlldyArIGk7XG4gICAgfSkpO1xuICAgIHN3aXBlci5zbGlkZXMuZm9yRWFjaCgoc2xpZGVFbCwgaSkgPT4ge1xuICAgICAgaWYgKHByZWxvYWRDb2x1bW5zLmluY2x1ZGVzKHNsaWRlRWwuY29sdW1uKSkgdW5sYXp5KHN3aXBlciwgaSk7XG4gICAgfSk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IHNsaWRlSW5kZXhMYXN0SW5WaWV3ID0gYWN0aXZlSW5kZXggKyBzbGlkZXNQZXJWaWV3IC0gMTtcbiAgaWYgKHN3aXBlci5wYXJhbXMucmV3aW5kIHx8IHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgIGZvciAobGV0IGkgPSBhY3RpdmVJbmRleCAtIGFtb3VudDsgaSA8PSBzbGlkZUluZGV4TGFzdEluVmlldyArIGFtb3VudDsgaSArPSAxKSB7XG4gICAgICBjb25zdCByZWFsSW5kZXggPSAoaSAlIGxlbiArIGxlbikgJSBsZW47XG4gICAgICBpZiAocmVhbEluZGV4IDwgYWN0aXZlSW5kZXggfHwgcmVhbEluZGV4ID4gc2xpZGVJbmRleExhc3RJblZpZXcpIHVubGF6eShzd2lwZXIsIHJlYWxJbmRleCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGZvciAobGV0IGkgPSBNYXRoLm1heChhY3RpdmVJbmRleCAtIGFtb3VudCwgMCk7IGkgPD0gTWF0aC5taW4oc2xpZGVJbmRleExhc3RJblZpZXcgKyBhbW91bnQsIGxlbiAtIDEpOyBpICs9IDEpIHtcbiAgICAgIGlmIChpICE9PSBhY3RpdmVJbmRleCAmJiAoaSA+IHNsaWRlSW5kZXhMYXN0SW5WaWV3IHx8IGkgPCBhY3RpdmVJbmRleCkpIHtcbiAgICAgICAgdW5sYXp5KHN3aXBlciwgaSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBnZXRBY3RpdmVJbmRleEJ5VHJhbnNsYXRlKHN3aXBlcikge1xuICBjb25zdCB7XG4gICAgc2xpZGVzR3JpZCxcbiAgICBwYXJhbXNcbiAgfSA9IHN3aXBlcjtcbiAgY29uc3QgdHJhbnNsYXRlID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZSA/IHN3aXBlci50cmFuc2xhdGUgOiAtc3dpcGVyLnRyYW5zbGF0ZTtcbiAgbGV0IGFjdGl2ZUluZGV4O1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlc0dyaWQubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAodHlwZW9mIHNsaWRlc0dyaWRbaSArIDFdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgaWYgKHRyYW5zbGF0ZSA+PSBzbGlkZXNHcmlkW2ldICYmIHRyYW5zbGF0ZSA8IHNsaWRlc0dyaWRbaSArIDFdIC0gKHNsaWRlc0dyaWRbaSArIDFdIC0gc2xpZGVzR3JpZFtpXSkgLyAyKSB7XG4gICAgICAgIGFjdGl2ZUluZGV4ID0gaTtcbiAgICAgIH0gZWxzZSBpZiAodHJhbnNsYXRlID49IHNsaWRlc0dyaWRbaV0gJiYgdHJhbnNsYXRlIDwgc2xpZGVzR3JpZFtpICsgMV0pIHtcbiAgICAgICAgYWN0aXZlSW5kZXggPSBpICsgMTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRyYW5zbGF0ZSA+PSBzbGlkZXNHcmlkW2ldKSB7XG4gICAgICBhY3RpdmVJbmRleCA9IGk7XG4gICAgfVxuICB9XG4gIC8vIE5vcm1hbGl6ZSBzbGlkZUluZGV4XG4gIGlmIChwYXJhbXMubm9ybWFsaXplU2xpZGVJbmRleCkge1xuICAgIGlmIChhY3RpdmVJbmRleCA8IDAgfHwgdHlwZW9mIGFjdGl2ZUluZGV4ID09PSAndW5kZWZpbmVkJykgYWN0aXZlSW5kZXggPSAwO1xuICB9XG4gIHJldHVybiBhY3RpdmVJbmRleDtcbn1cbmZ1bmN0aW9uIHVwZGF0ZUFjdGl2ZUluZGV4KG5ld0FjdGl2ZUluZGV4KSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHRyYW5zbGF0ZSA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyBzd2lwZXIudHJhbnNsYXRlIDogLXN3aXBlci50cmFuc2xhdGU7XG4gIGNvbnN0IHtcbiAgICBzbmFwR3JpZCxcbiAgICBwYXJhbXMsXG4gICAgYWN0aXZlSW5kZXg6IHByZXZpb3VzSW5kZXgsXG4gICAgcmVhbEluZGV4OiBwcmV2aW91c1JlYWxJbmRleCxcbiAgICBzbmFwSW5kZXg6IHByZXZpb3VzU25hcEluZGV4XG4gIH0gPSBzd2lwZXI7XG4gIGxldCBhY3RpdmVJbmRleCA9IG5ld0FjdGl2ZUluZGV4O1xuICBsZXQgc25hcEluZGV4O1xuICBjb25zdCBnZXRWaXJ0dWFsUmVhbEluZGV4ID0gYUluZGV4ID0+IHtcbiAgICBsZXQgcmVhbEluZGV4ID0gYUluZGV4IC0gc3dpcGVyLnZpcnR1YWwuc2xpZGVzQmVmb3JlO1xuICAgIGlmIChyZWFsSW5kZXggPCAwKSB7XG4gICAgICByZWFsSW5kZXggPSBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoICsgcmVhbEluZGV4O1xuICAgIH1cbiAgICBpZiAocmVhbEluZGV4ID49IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGgpIHtcbiAgICAgIHJlYWxJbmRleCAtPSBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoO1xuICAgIH1cbiAgICByZXR1cm4gcmVhbEluZGV4O1xuICB9O1xuICBpZiAodHlwZW9mIGFjdGl2ZUluZGV4ID09PSAndW5kZWZpbmVkJykge1xuICAgIGFjdGl2ZUluZGV4ID0gZ2V0QWN0aXZlSW5kZXhCeVRyYW5zbGF0ZShzd2lwZXIpO1xuICB9XG4gIGlmIChzbmFwR3JpZC5pbmRleE9mKHRyYW5zbGF0ZSkgPj0gMCkge1xuICAgIHNuYXBJbmRleCA9IHNuYXBHcmlkLmluZGV4T2YodHJhbnNsYXRlKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBza2lwID0gTWF0aC5taW4ocGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCwgYWN0aXZlSW5kZXgpO1xuICAgIHNuYXBJbmRleCA9IHNraXAgKyBNYXRoLmZsb29yKChhY3RpdmVJbmRleCAtIHNraXApIC8gcGFyYW1zLnNsaWRlc1Blckdyb3VwKTtcbiAgfVxuICBpZiAoc25hcEluZGV4ID49IHNuYXBHcmlkLmxlbmd0aCkgc25hcEluZGV4ID0gc25hcEdyaWQubGVuZ3RoIC0gMTtcbiAgaWYgKGFjdGl2ZUluZGV4ID09PSBwcmV2aW91c0luZGV4ICYmICFzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICBpZiAoc25hcEluZGV4ICE9PSBwcmV2aW91c1NuYXBJbmRleCkge1xuICAgICAgc3dpcGVyLnNuYXBJbmRleCA9IHNuYXBJbmRleDtcbiAgICAgIHN3aXBlci5lbWl0KCdzbmFwSW5kZXhDaGFuZ2UnKTtcbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChhY3RpdmVJbmRleCA9PT0gcHJldmlvdXNJbmRleCAmJiBzd2lwZXIucGFyYW1zLmxvb3AgJiYgc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpIHtcbiAgICBzd2lwZXIucmVhbEluZGV4ID0gZ2V0VmlydHVhbFJlYWxJbmRleChhY3RpdmVJbmRleCk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IGdyaWRFbmFibGVkID0gc3dpcGVyLmdyaWQgJiYgcGFyYW1zLmdyaWQgJiYgcGFyYW1zLmdyaWQucm93cyA+IDE7XG5cbiAgLy8gR2V0IHJlYWwgaW5kZXhcbiAgbGV0IHJlYWxJbmRleDtcbiAgaWYgKHN3aXBlci52aXJ0dWFsICYmIHBhcmFtcy52aXJ0dWFsLmVuYWJsZWQgJiYgcGFyYW1zLmxvb3ApIHtcbiAgICByZWFsSW5kZXggPSBnZXRWaXJ0dWFsUmVhbEluZGV4KGFjdGl2ZUluZGV4KTtcbiAgfSBlbHNlIGlmIChncmlkRW5hYmxlZCkge1xuICAgIGNvbnN0IGZpcnN0U2xpZGVJbkNvbHVtbiA9IHN3aXBlci5zbGlkZXMuZmlsdGVyKHNsaWRlRWwgPT4gc2xpZGVFbC5jb2x1bW4gPT09IGFjdGl2ZUluZGV4KVswXTtcbiAgICBsZXQgYWN0aXZlU2xpZGVJbmRleCA9IHBhcnNlSW50KGZpcnN0U2xpZGVJbkNvbHVtbi5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JyksIDEwKTtcbiAgICBpZiAoTnVtYmVyLmlzTmFOKGFjdGl2ZVNsaWRlSW5kZXgpKSB7XG4gICAgICBhY3RpdmVTbGlkZUluZGV4ID0gTWF0aC5tYXgoc3dpcGVyLnNsaWRlcy5pbmRleE9mKGZpcnN0U2xpZGVJbkNvbHVtbiksIDApO1xuICAgIH1cbiAgICByZWFsSW5kZXggPSBNYXRoLmZsb29yKGFjdGl2ZVNsaWRlSW5kZXggLyBwYXJhbXMuZ3JpZC5yb3dzKTtcbiAgfSBlbHNlIGlmIChzd2lwZXIuc2xpZGVzW2FjdGl2ZUluZGV4XSkge1xuICAgIGNvbnN0IHNsaWRlSW5kZXggPSBzd2lwZXIuc2xpZGVzW2FjdGl2ZUluZGV4XS5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4Jyk7XG4gICAgaWYgKHNsaWRlSW5kZXgpIHtcbiAgICAgIHJlYWxJbmRleCA9IHBhcnNlSW50KHNsaWRlSW5kZXgsIDEwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVhbEluZGV4ID0gYWN0aXZlSW5kZXg7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJlYWxJbmRleCA9IGFjdGl2ZUluZGV4O1xuICB9XG4gIE9iamVjdC5hc3NpZ24oc3dpcGVyLCB7XG4gICAgcHJldmlvdXNTbmFwSW5kZXgsXG4gICAgc25hcEluZGV4LFxuICAgIHByZXZpb3VzUmVhbEluZGV4LFxuICAgIHJlYWxJbmRleCxcbiAgICBwcmV2aW91c0luZGV4LFxuICAgIGFjdGl2ZUluZGV4XG4gIH0pO1xuICBpZiAoc3dpcGVyLmluaXRpYWxpemVkKSB7XG4gICAgcHJlbG9hZChzd2lwZXIpO1xuICB9XG4gIHN3aXBlci5lbWl0KCdhY3RpdmVJbmRleENoYW5nZScpO1xuICBzd2lwZXIuZW1pdCgnc25hcEluZGV4Q2hhbmdlJyk7XG4gIGlmIChzd2lwZXIuaW5pdGlhbGl6ZWQgfHwgc3dpcGVyLnBhcmFtcy5ydW5DYWxsYmFja3NPbkluaXQpIHtcbiAgICBpZiAocHJldmlvdXNSZWFsSW5kZXggIT09IHJlYWxJbmRleCkge1xuICAgICAgc3dpcGVyLmVtaXQoJ3JlYWxJbmRleENoYW5nZScpO1xuICAgIH1cbiAgICBzd2lwZXIuZW1pdCgnc2xpZGVDaGFuZ2UnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB1cGRhdGVDbGlja2VkU2xpZGUoZWwsIHBhdGgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcbiAgbGV0IHNsaWRlID0gZWwuY2xvc2VzdChgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKTtcbiAgaWYgKCFzbGlkZSAmJiBzd2lwZXIuaXNFbGVtZW50ICYmIHBhdGggJiYgcGF0aC5sZW5ndGggPiAxICYmIHBhdGguaW5jbHVkZXMoZWwpKSB7XG4gICAgWy4uLnBhdGguc2xpY2UocGF0aC5pbmRleE9mKGVsKSArIDEsIHBhdGgubGVuZ3RoKV0uZm9yRWFjaChwYXRoRWwgPT4ge1xuICAgICAgaWYgKCFzbGlkZSAmJiBwYXRoRWwubWF0Y2hlcyAmJiBwYXRoRWwubWF0Y2hlcyhgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKSkge1xuICAgICAgICBzbGlkZSA9IHBhdGhFbDtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBsZXQgc2xpZGVGb3VuZCA9IGZhbHNlO1xuICBsZXQgc2xpZGVJbmRleDtcbiAgaWYgKHNsaWRlKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzd2lwZXIuc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpZiAoc3dpcGVyLnNsaWRlc1tpXSA9PT0gc2xpZGUpIHtcbiAgICAgICAgc2xpZGVGb3VuZCA9IHRydWU7XG4gICAgICAgIHNsaWRlSW5kZXggPSBpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKHNsaWRlICYmIHNsaWRlRm91bmQpIHtcbiAgICBzd2lwZXIuY2xpY2tlZFNsaWRlID0gc2xpZGU7XG4gICAgaWYgKHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkKSB7XG4gICAgICBzd2lwZXIuY2xpY2tlZEluZGV4ID0gcGFyc2VJbnQoc2xpZGUuZ2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpLCAxMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5jbGlja2VkSW5kZXggPSBzbGlkZUluZGV4O1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBzd2lwZXIuY2xpY2tlZFNsaWRlID0gdW5kZWZpbmVkO1xuICAgIHN3aXBlci5jbGlja2VkSW5kZXggPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwYXJhbXMuc2xpZGVUb0NsaWNrZWRTbGlkZSAmJiBzd2lwZXIuY2xpY2tlZEluZGV4ICE9PSB1bmRlZmluZWQgJiYgc3dpcGVyLmNsaWNrZWRJbmRleCAhPT0gc3dpcGVyLmFjdGl2ZUluZGV4KSB7XG4gICAgc3dpcGVyLnNsaWRlVG9DbGlja2VkU2xpZGUoKTtcbiAgfVxufVxuXG52YXIgdXBkYXRlID0ge1xuICB1cGRhdGVTaXplLFxuICB1cGRhdGVTbGlkZXMsXG4gIHVwZGF0ZUF1dG9IZWlnaHQsXG4gIHVwZGF0ZVNsaWRlc09mZnNldCxcbiAgdXBkYXRlU2xpZGVzUHJvZ3Jlc3MsXG4gIHVwZGF0ZVByb2dyZXNzLFxuICB1cGRhdGVTbGlkZXNDbGFzc2VzLFxuICB1cGRhdGVBY3RpdmVJbmRleCxcbiAgdXBkYXRlQ2xpY2tlZFNsaWRlXG59O1xuXG5mdW5jdGlvbiBnZXRTd2lwZXJUcmFuc2xhdGUoYXhpcykge1xuICBpZiAoYXhpcyA9PT0gdm9pZCAwKSB7XG4gICAgYXhpcyA9IHRoaXMuaXNIb3Jpem9udGFsKCkgPyAneCcgOiAneSc7XG4gIH1cbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICBydGxUcmFuc2xhdGU6IHJ0bCxcbiAgICB0cmFuc2xhdGUsXG4gICAgd3JhcHBlckVsXG4gIH0gPSBzd2lwZXI7XG4gIGlmIChwYXJhbXMudmlydHVhbFRyYW5zbGF0ZSkge1xuICAgIHJldHVybiBydGwgPyAtdHJhbnNsYXRlIDogdHJhbnNsYXRlO1xuICB9XG4gIGlmIChwYXJhbXMuY3NzTW9kZSkge1xuICAgIHJldHVybiB0cmFuc2xhdGU7XG4gIH1cbiAgbGV0IGN1cnJlbnRUcmFuc2xhdGUgPSBnZXRUcmFuc2xhdGUod3JhcHBlckVsLCBheGlzKTtcbiAgY3VycmVudFRyYW5zbGF0ZSArPSBzd2lwZXIuY3NzT3ZlcmZsb3dBZGp1c3RtZW50KCk7XG4gIGlmIChydGwpIGN1cnJlbnRUcmFuc2xhdGUgPSAtY3VycmVudFRyYW5zbGF0ZTtcbiAgcmV0dXJuIGN1cnJlbnRUcmFuc2xhdGUgfHwgMDtcbn1cblxuZnVuY3Rpb24gc2V0VHJhbnNsYXRlKHRyYW5zbGF0ZSwgYnlDb250cm9sbGVyKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBydGxUcmFuc2xhdGU6IHJ0bCxcbiAgICBwYXJhbXMsXG4gICAgd3JhcHBlckVsLFxuICAgIHByb2dyZXNzXG4gIH0gPSBzd2lwZXI7XG4gIGxldCB4ID0gMDtcbiAgbGV0IHkgPSAwO1xuICBjb25zdCB6ID0gMDtcbiAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgIHggPSBydGwgPyAtdHJhbnNsYXRlIDogdHJhbnNsYXRlO1xuICB9IGVsc2Uge1xuICAgIHkgPSB0cmFuc2xhdGU7XG4gIH1cbiAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHtcbiAgICB4ID0gTWF0aC5mbG9vcih4KTtcbiAgICB5ID0gTWF0aC5mbG9vcih5KTtcbiAgfVxuICBzd2lwZXIucHJldmlvdXNUcmFuc2xhdGUgPSBzd2lwZXIudHJhbnNsYXRlO1xuICBzd2lwZXIudHJhbnNsYXRlID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8geCA6IHk7XG4gIGlmIChwYXJhbXMuY3NzTW9kZSkge1xuICAgIHdyYXBwZXJFbFtzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnc2Nyb2xsTGVmdCcgOiAnc2Nyb2xsVG9wJ10gPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAteCA6IC15O1xuICB9IGVsc2UgaWYgKCFwYXJhbXMudmlydHVhbFRyYW5zbGF0ZSkge1xuICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgIHggLT0gc3dpcGVyLmNzc092ZXJmbG93QWRqdXN0bWVudCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB5IC09IHN3aXBlci5jc3NPdmVyZmxvd0FkanVzdG1lbnQoKTtcbiAgICB9XG4gICAgd3JhcHBlckVsLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUzZCgke3h9cHgsICR7eX1weCwgJHt6fXB4KWA7XG4gIH1cblxuICAvLyBDaGVjayBpZiB3ZSBuZWVkIHRvIHVwZGF0ZSBwcm9ncmVzc1xuICBsZXQgbmV3UHJvZ3Jlc3M7XG4gIGNvbnN0IHRyYW5zbGF0ZXNEaWZmID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpO1xuICBpZiAodHJhbnNsYXRlc0RpZmYgPT09IDApIHtcbiAgICBuZXdQcm9ncmVzcyA9IDA7XG4gIH0gZWxzZSB7XG4gICAgbmV3UHJvZ3Jlc3MgPSAodHJhbnNsYXRlIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSAvIHRyYW5zbGF0ZXNEaWZmO1xuICB9XG4gIGlmIChuZXdQcm9ncmVzcyAhPT0gcHJvZ3Jlc3MpIHtcbiAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3ModHJhbnNsYXRlKTtcbiAgfVxuICBzd2lwZXIuZW1pdCgnc2V0VHJhbnNsYXRlJywgc3dpcGVyLnRyYW5zbGF0ZSwgYnlDb250cm9sbGVyKTtcbn1cblxuZnVuY3Rpb24gbWluVHJhbnNsYXRlKCkge1xuICByZXR1cm4gLXRoaXMuc25hcEdyaWRbMF07XG59XG5cbmZ1bmN0aW9uIG1heFRyYW5zbGF0ZSgpIHtcbiAgcmV0dXJuIC10aGlzLnNuYXBHcmlkW3RoaXMuc25hcEdyaWQubGVuZ3RoIC0gMV07XG59XG5cbmZ1bmN0aW9uIHRyYW5zbGF0ZVRvKHRyYW5zbGF0ZSwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgdHJhbnNsYXRlQm91bmRzLCBpbnRlcm5hbCkge1xuICBpZiAodHJhbnNsYXRlID09PSB2b2lkIDApIHtcbiAgICB0cmFuc2xhdGUgPSAwO1xuICB9XG4gIGlmIChzcGVlZCA9PT0gdm9pZCAwKSB7XG4gICAgc3BlZWQgPSB0aGlzLnBhcmFtcy5zcGVlZDtcbiAgfVxuICBpZiAocnVuQ2FsbGJhY2tzID09PSB2b2lkIDApIHtcbiAgICBydW5DYWxsYmFja3MgPSB0cnVlO1xuICB9XG4gIGlmICh0cmFuc2xhdGVCb3VuZHMgPT09IHZvaWQgMCkge1xuICAgIHRyYW5zbGF0ZUJvdW5kcyA9IHRydWU7XG4gIH1cbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICB3cmFwcGVyRWxcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKHN3aXBlci5hbmltYXRpbmcgJiYgcGFyYW1zLnByZXZlbnRJbnRlcmFjdGlvbk9uVHJhbnNpdGlvbikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBjb25zdCBtaW5UcmFuc2xhdGUgPSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG4gIGNvbnN0IG1heFRyYW5zbGF0ZSA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKTtcbiAgbGV0IG5ld1RyYW5zbGF0ZTtcbiAgaWYgKHRyYW5zbGF0ZUJvdW5kcyAmJiB0cmFuc2xhdGUgPiBtaW5UcmFuc2xhdGUpIG5ld1RyYW5zbGF0ZSA9IG1pblRyYW5zbGF0ZTtlbHNlIGlmICh0cmFuc2xhdGVCb3VuZHMgJiYgdHJhbnNsYXRlIDwgbWF4VHJhbnNsYXRlKSBuZXdUcmFuc2xhdGUgPSBtYXhUcmFuc2xhdGU7ZWxzZSBuZXdUcmFuc2xhdGUgPSB0cmFuc2xhdGU7XG5cbiAgLy8gVXBkYXRlIHByb2dyZXNzXG4gIHN3aXBlci51cGRhdGVQcm9ncmVzcyhuZXdUcmFuc2xhdGUpO1xuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICBjb25zdCBpc0ggPSBzd2lwZXIuaXNIb3Jpem9udGFsKCk7XG4gICAgaWYgKHNwZWVkID09PSAwKSB7XG4gICAgICB3cmFwcGVyRWxbaXNIID8gJ3Njcm9sbExlZnQnIDogJ3Njcm9sbFRvcCddID0gLW5ld1RyYW5zbGF0ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFzd2lwZXIuc3VwcG9ydC5zbW9vdGhTY3JvbGwpIHtcbiAgICAgICAgYW5pbWF0ZUNTU01vZGVTY3JvbGwoe1xuICAgICAgICAgIHN3aXBlcixcbiAgICAgICAgICB0YXJnZXRQb3NpdGlvbjogLW5ld1RyYW5zbGF0ZSxcbiAgICAgICAgICBzaWRlOiBpc0ggPyAnbGVmdCcgOiAndG9wJ1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB3cmFwcGVyRWwuc2Nyb2xsVG8oe1xuICAgICAgICBbaXNIID8gJ2xlZnQnIDogJ3RvcCddOiAtbmV3VHJhbnNsYXRlLFxuICAgICAgICBiZWhhdmlvcjogJ3Ntb290aCdcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAoc3BlZWQgPT09IDApIHtcbiAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbigwKTtcbiAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKG5ld1RyYW5zbGF0ZSk7XG4gICAgaWYgKHJ1bkNhbGxiYWNrcykge1xuICAgICAgc3dpcGVyLmVtaXQoJ2JlZm9yZVRyYW5zaXRpb25TdGFydCcsIHNwZWVkLCBpbnRlcm5hbCk7XG4gICAgICBzd2lwZXIuZW1pdCgndHJhbnNpdGlvbkVuZCcpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihzcGVlZCk7XG4gICAgc3dpcGVyLnNldFRyYW5zbGF0ZShuZXdUcmFuc2xhdGUpO1xuICAgIGlmIChydW5DYWxsYmFja3MpIHtcbiAgICAgIHN3aXBlci5lbWl0KCdiZWZvcmVUcmFuc2l0aW9uU3RhcnQnLCBzcGVlZCwgaW50ZXJuYWwpO1xuICAgICAgc3dpcGVyLmVtaXQoJ3RyYW5zaXRpb25TdGFydCcpO1xuICAgIH1cbiAgICBpZiAoIXN3aXBlci5hbmltYXRpbmcpIHtcbiAgICAgIHN3aXBlci5hbmltYXRpbmcgPSB0cnVlO1xuICAgICAgaWYgKCFzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKSB7XG4gICAgICAgIHN3aXBlci5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQgPSBmdW5jdGlvbiB0cmFuc2l0aW9uRW5kKGUpIHtcbiAgICAgICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XG4gICAgICAgICAgaWYgKGUudGFyZ2V0ICE9PSB0aGlzKSByZXR1cm47XG4gICAgICAgICAgc3dpcGVyLndyYXBwZXJFbC5yZW1vdmVFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCk7XG4gICAgICAgICAgc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCA9IG51bGw7XG4gICAgICAgICAgZGVsZXRlIHN3aXBlci5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQ7XG4gICAgICAgICAgc3dpcGVyLmFuaW1hdGluZyA9IGZhbHNlO1xuICAgICAgICAgIGlmIChydW5DYWxsYmFja3MpIHtcbiAgICAgICAgICAgIHN3aXBlci5lbWl0KCd0cmFuc2l0aW9uRW5kJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgc3dpcGVyLndyYXBwZXJFbC5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG52YXIgdHJhbnNsYXRlID0ge1xuICBnZXRUcmFuc2xhdGU6IGdldFN3aXBlclRyYW5zbGF0ZSxcbiAgc2V0VHJhbnNsYXRlLFxuICBtaW5UcmFuc2xhdGUsXG4gIG1heFRyYW5zbGF0ZSxcbiAgdHJhbnNsYXRlVG9cbn07XG5cbmZ1bmN0aW9uIHNldFRyYW5zaXRpb24oZHVyYXRpb24sIGJ5Q29udHJvbGxlcikge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBpZiAoIXN3aXBlci5wYXJhbXMuY3NzTW9kZSkge1xuICAgIHN3aXBlci53cmFwcGVyRWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gYCR7ZHVyYXRpb259bXNgO1xuICAgIHN3aXBlci53cmFwcGVyRWwuc3R5bGUudHJhbnNpdGlvbkRlbGF5ID0gZHVyYXRpb24gPT09IDAgPyBgMG1zYCA6ICcnO1xuICB9XG4gIHN3aXBlci5lbWl0KCdzZXRUcmFuc2l0aW9uJywgZHVyYXRpb24sIGJ5Q29udHJvbGxlcik7XG59XG5cbmZ1bmN0aW9uIHRyYW5zaXRpb25FbWl0KF9yZWYpIHtcbiAgbGV0IHtcbiAgICBzd2lwZXIsXG4gICAgcnVuQ2FsbGJhY2tzLFxuICAgIGRpcmVjdGlvbixcbiAgICBzdGVwXG4gIH0gPSBfcmVmO1xuICBjb25zdCB7XG4gICAgYWN0aXZlSW5kZXgsXG4gICAgcHJldmlvdXNJbmRleFxuICB9ID0gc3dpcGVyO1xuICBsZXQgZGlyID0gZGlyZWN0aW9uO1xuICBpZiAoIWRpcikge1xuICAgIGlmIChhY3RpdmVJbmRleCA+IHByZXZpb3VzSW5kZXgpIGRpciA9ICduZXh0JztlbHNlIGlmIChhY3RpdmVJbmRleCA8IHByZXZpb3VzSW5kZXgpIGRpciA9ICdwcmV2JztlbHNlIGRpciA9ICdyZXNldCc7XG4gIH1cbiAgc3dpcGVyLmVtaXQoYHRyYW5zaXRpb24ke3N0ZXB9YCk7XG4gIGlmIChydW5DYWxsYmFja3MgJiYgYWN0aXZlSW5kZXggIT09IHByZXZpb3VzSW5kZXgpIHtcbiAgICBpZiAoZGlyID09PSAncmVzZXQnKSB7XG4gICAgICBzd2lwZXIuZW1pdChgc2xpZGVSZXNldFRyYW5zaXRpb24ke3N0ZXB9YCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHN3aXBlci5lbWl0KGBzbGlkZUNoYW5nZVRyYW5zaXRpb24ke3N0ZXB9YCk7XG4gICAgaWYgKGRpciA9PT0gJ25leHQnKSB7XG4gICAgICBzd2lwZXIuZW1pdChgc2xpZGVOZXh0VHJhbnNpdGlvbiR7c3RlcH1gKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLmVtaXQoYHNsaWRlUHJldlRyYW5zaXRpb24ke3N0ZXB9YCk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHRyYW5zaXRpb25TdGFydChydW5DYWxsYmFja3MsIGRpcmVjdGlvbikge1xuICBpZiAocnVuQ2FsbGJhY2tzID09PSB2b2lkIDApIHtcbiAgICBydW5DYWxsYmFja3MgPSB0cnVlO1xuICB9XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXNcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSByZXR1cm47XG4gIGlmIChwYXJhbXMuYXV0b0hlaWdodCkge1xuICAgIHN3aXBlci51cGRhdGVBdXRvSGVpZ2h0KCk7XG4gIH1cbiAgdHJhbnNpdGlvbkVtaXQoe1xuICAgIHN3aXBlcixcbiAgICBydW5DYWxsYmFja3MsXG4gICAgZGlyZWN0aW9uLFxuICAgIHN0ZXA6ICdTdGFydCdcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHRyYW5zaXRpb25FbmQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pIHtcbiAgaWYgKHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwKSB7XG4gICAgcnVuQ2FsbGJhY2tzID0gdHJ1ZTtcbiAgfVxuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcGFyYW1zXG4gIH0gPSBzd2lwZXI7XG4gIHN3aXBlci5hbmltYXRpbmcgPSBmYWxzZTtcbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSByZXR1cm47XG4gIHN3aXBlci5zZXRUcmFuc2l0aW9uKDApO1xuICB0cmFuc2l0aW9uRW1pdCh7XG4gICAgc3dpcGVyLFxuICAgIHJ1bkNhbGxiYWNrcyxcbiAgICBkaXJlY3Rpb24sXG4gICAgc3RlcDogJ0VuZCdcbiAgfSk7XG59XG5cbnZhciB0cmFuc2l0aW9uID0ge1xuICBzZXRUcmFuc2l0aW9uLFxuICB0cmFuc2l0aW9uU3RhcnQsXG4gIHRyYW5zaXRpb25FbmRcbn07XG5cbmZ1bmN0aW9uIHNsaWRlVG8oaW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsLCBpbml0aWFsKSB7XG4gIGlmIChpbmRleCA9PT0gdm9pZCAwKSB7XG4gICAgaW5kZXggPSAwO1xuICB9XG4gIGlmIChydW5DYWxsYmFja3MgPT09IHZvaWQgMCkge1xuICAgIHJ1bkNhbGxiYWNrcyA9IHRydWU7XG4gIH1cbiAgaWYgKHR5cGVvZiBpbmRleCA9PT0gJ3N0cmluZycpIHtcbiAgICBpbmRleCA9IHBhcnNlSW50KGluZGV4LCAxMCk7XG4gIH1cbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgbGV0IHNsaWRlSW5kZXggPSBpbmRleDtcbiAgaWYgKHNsaWRlSW5kZXggPCAwKSBzbGlkZUluZGV4ID0gMDtcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICBzbmFwR3JpZCxcbiAgICBzbGlkZXNHcmlkLFxuICAgIHByZXZpb3VzSW5kZXgsXG4gICAgYWN0aXZlSW5kZXgsXG4gICAgcnRsVHJhbnNsYXRlOiBydGwsXG4gICAgd3JhcHBlckVsLFxuICAgIGVuYWJsZWRcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKCFlbmFibGVkICYmICFpbnRlcm5hbCAmJiAhaW5pdGlhbCB8fCBzd2lwZXIuZGVzdHJveWVkIHx8IHN3aXBlci5hbmltYXRpbmcgJiYgcGFyYW1zLnByZXZlbnRJbnRlcmFjdGlvbk9uVHJhbnNpdGlvbikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAodHlwZW9mIHNwZWVkID09PSAndW5kZWZpbmVkJykge1xuICAgIHNwZWVkID0gc3dpcGVyLnBhcmFtcy5zcGVlZDtcbiAgfVxuICBjb25zdCBza2lwID0gTWF0aC5taW4oc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAsIHNsaWRlSW5kZXgpO1xuICBsZXQgc25hcEluZGV4ID0gc2tpcCArIE1hdGguZmxvb3IoKHNsaWRlSW5kZXggLSBza2lwKSAvIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXApO1xuICBpZiAoc25hcEluZGV4ID49IHNuYXBHcmlkLmxlbmd0aCkgc25hcEluZGV4ID0gc25hcEdyaWQubGVuZ3RoIC0gMTtcbiAgY29uc3QgdHJhbnNsYXRlID0gLXNuYXBHcmlkW3NuYXBJbmRleF07XG4gIC8vIE5vcm1hbGl6ZSBzbGlkZUluZGV4XG4gIGlmIChwYXJhbXMubm9ybWFsaXplU2xpZGVJbmRleCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzR3JpZC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgY29uc3Qgbm9ybWFsaXplZFRyYW5zbGF0ZSA9IC1NYXRoLmZsb29yKHRyYW5zbGF0ZSAqIDEwMCk7XG4gICAgICBjb25zdCBub3JtYWxpemVkR3JpZCA9IE1hdGguZmxvb3Ioc2xpZGVzR3JpZFtpXSAqIDEwMCk7XG4gICAgICBjb25zdCBub3JtYWxpemVkR3JpZE5leHQgPSBNYXRoLmZsb29yKHNsaWRlc0dyaWRbaSArIDFdICogMTAwKTtcbiAgICAgIGlmICh0eXBlb2Ygc2xpZGVzR3JpZFtpICsgMV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGlmIChub3JtYWxpemVkVHJhbnNsYXRlID49IG5vcm1hbGl6ZWRHcmlkICYmIG5vcm1hbGl6ZWRUcmFuc2xhdGUgPCBub3JtYWxpemVkR3JpZE5leHQgLSAobm9ybWFsaXplZEdyaWROZXh0IC0gbm9ybWFsaXplZEdyaWQpIC8gMikge1xuICAgICAgICAgIHNsaWRlSW5kZXggPSBpO1xuICAgICAgICB9IGVsc2UgaWYgKG5vcm1hbGl6ZWRUcmFuc2xhdGUgPj0gbm9ybWFsaXplZEdyaWQgJiYgbm9ybWFsaXplZFRyYW5zbGF0ZSA8IG5vcm1hbGl6ZWRHcmlkTmV4dCkge1xuICAgICAgICAgIHNsaWRlSW5kZXggPSBpICsgMTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChub3JtYWxpemVkVHJhbnNsYXRlID49IG5vcm1hbGl6ZWRHcmlkKSB7XG4gICAgICAgIHNsaWRlSW5kZXggPSBpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvLyBEaXJlY3Rpb25zIGxvY2tzXG4gIGlmIChzd2lwZXIuaW5pdGlhbGl6ZWQgJiYgc2xpZGVJbmRleCAhPT0gYWN0aXZlSW5kZXgpIHtcbiAgICBpZiAoIXN3aXBlci5hbGxvd1NsaWRlTmV4dCAmJiAocnRsID8gdHJhbnNsYXRlID4gc3dpcGVyLnRyYW5zbGF0ZSAmJiB0cmFuc2xhdGUgPiBzd2lwZXIubWluVHJhbnNsYXRlKCkgOiB0cmFuc2xhdGUgPCBzd2lwZXIudHJhbnNsYXRlICYmIHRyYW5zbGF0ZSA8IHN3aXBlci5taW5UcmFuc2xhdGUoKSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZVByZXYgJiYgdHJhbnNsYXRlID4gc3dpcGVyLnRyYW5zbGF0ZSAmJiB0cmFuc2xhdGUgPiBzd2lwZXIubWF4VHJhbnNsYXRlKCkpIHtcbiAgICAgIGlmICgoYWN0aXZlSW5kZXggfHwgMCkgIT09IHNsaWRlSW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoc2xpZGVJbmRleCAhPT0gKHByZXZpb3VzSW5kZXggfHwgMCkgJiYgcnVuQ2FsbGJhY2tzKSB7XG4gICAgc3dpcGVyLmVtaXQoJ2JlZm9yZVNsaWRlQ2hhbmdlU3RhcnQnKTtcbiAgfVxuXG4gIC8vIFVwZGF0ZSBwcm9ncmVzc1xuICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3ModHJhbnNsYXRlKTtcbiAgbGV0IGRpcmVjdGlvbjtcbiAgaWYgKHNsaWRlSW5kZXggPiBhY3RpdmVJbmRleCkgZGlyZWN0aW9uID0gJ25leHQnO2Vsc2UgaWYgKHNsaWRlSW5kZXggPCBhY3RpdmVJbmRleCkgZGlyZWN0aW9uID0gJ3ByZXYnO2Vsc2UgZGlyZWN0aW9uID0gJ3Jlc2V0JztcblxuICAvLyBVcGRhdGUgSW5kZXhcbiAgaWYgKHJ0bCAmJiAtdHJhbnNsYXRlID09PSBzd2lwZXIudHJhbnNsYXRlIHx8ICFydGwgJiYgdHJhbnNsYXRlID09PSBzd2lwZXIudHJhbnNsYXRlKSB7XG4gICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KHNsaWRlSW5kZXgpO1xuICAgIC8vIFVwZGF0ZSBIZWlnaHRcbiAgICBpZiAocGFyYW1zLmF1dG9IZWlnaHQpIHtcbiAgICAgIHN3aXBlci51cGRhdGVBdXRvSGVpZ2h0KCk7XG4gICAgfVxuICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gICAgaWYgKHBhcmFtcy5lZmZlY3QgIT09ICdzbGlkZScpIHtcbiAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUodHJhbnNsYXRlKTtcbiAgICB9XG4gICAgaWYgKGRpcmVjdGlvbiAhPT0gJ3Jlc2V0Jykge1xuICAgICAgc3dpcGVyLnRyYW5zaXRpb25TdGFydChydW5DYWxsYmFja3MsIGRpcmVjdGlvbik7XG4gICAgICBzd2lwZXIudHJhbnNpdGlvbkVuZChydW5DYWxsYmFja3MsIGRpcmVjdGlvbik7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICBjb25zdCBpc0ggPSBzd2lwZXIuaXNIb3Jpem9udGFsKCk7XG4gICAgY29uc3QgdCA9IHJ0bCA/IHRyYW5zbGF0ZSA6IC10cmFuc2xhdGU7XG4gICAgaWYgKHNwZWVkID09PSAwKSB7XG4gICAgICBjb25zdCBpc1ZpcnR1YWwgPSBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZDtcbiAgICAgIGlmIChpc1ZpcnR1YWwpIHtcbiAgICAgICAgc3dpcGVyLndyYXBwZXJFbC5zdHlsZS5zY3JvbGxTbmFwVHlwZSA9ICdub25lJztcbiAgICAgICAgc3dpcGVyLl9pbW1lZGlhdGVWaXJ0dWFsID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1ZpcnR1YWwgJiYgIXN3aXBlci5fY3NzTW9kZVZpcnR1YWxJbml0aWFsU2V0ICYmIHN3aXBlci5wYXJhbXMuaW5pdGlhbFNsaWRlID4gMCkge1xuICAgICAgICBzd2lwZXIuX2Nzc01vZGVWaXJ0dWFsSW5pdGlhbFNldCA9IHRydWU7XG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgd3JhcHBlckVsW2lzSCA/ICdzY3JvbGxMZWZ0JyA6ICdzY3JvbGxUb3AnXSA9IHQ7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd3JhcHBlckVsW2lzSCA/ICdzY3JvbGxMZWZ0JyA6ICdzY3JvbGxUb3AnXSA9IHQ7XG4gICAgICB9XG4gICAgICBpZiAoaXNWaXJ0dWFsKSB7XG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgc3dpcGVyLndyYXBwZXJFbC5zdHlsZS5zY3JvbGxTbmFwVHlwZSA9ICcnO1xuICAgICAgICAgIHN3aXBlci5faW1tZWRpYXRlVmlydHVhbCA9IGZhbHNlO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFzd2lwZXIuc3VwcG9ydC5zbW9vdGhTY3JvbGwpIHtcbiAgICAgICAgYW5pbWF0ZUNTU01vZGVTY3JvbGwoe1xuICAgICAgICAgIHN3aXBlcixcbiAgICAgICAgICB0YXJnZXRQb3NpdGlvbjogdCxcbiAgICAgICAgICBzaWRlOiBpc0ggPyAnbGVmdCcgOiAndG9wJ1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB3cmFwcGVyRWwuc2Nyb2xsVG8oe1xuICAgICAgICBbaXNIID8gJ2xlZnQnIDogJ3RvcCddOiB0LFxuICAgICAgICBiZWhhdmlvcjogJ3Ntb290aCdcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBzd2lwZXIuc2V0VHJhbnNpdGlvbihzcGVlZCk7XG4gIHN3aXBlci5zZXRUcmFuc2xhdGUodHJhbnNsYXRlKTtcbiAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KHNsaWRlSW5kZXgpO1xuICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICBzd2lwZXIuZW1pdCgnYmVmb3JlVHJhbnNpdGlvblN0YXJ0Jywgc3BlZWQsIGludGVybmFsKTtcbiAgc3dpcGVyLnRyYW5zaXRpb25TdGFydChydW5DYWxsYmFja3MsIGRpcmVjdGlvbik7XG4gIGlmIChzcGVlZCA9PT0gMCkge1xuICAgIHN3aXBlci50cmFuc2l0aW9uRW5kKHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKTtcbiAgfSBlbHNlIGlmICghc3dpcGVyLmFuaW1hdGluZykge1xuICAgIHN3aXBlci5hbmltYXRpbmcgPSB0cnVlO1xuICAgIGlmICghc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKSB7XG4gICAgICBzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQgPSBmdW5jdGlvbiB0cmFuc2l0aW9uRW5kKGUpIHtcbiAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgICAgICBpZiAoZS50YXJnZXQgIT09IHRoaXMpIHJldHVybjtcbiAgICAgICAgc3dpcGVyLndyYXBwZXJFbC5yZW1vdmVFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTtcbiAgICAgICAgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kID0gbnVsbDtcbiAgICAgICAgZGVsZXRlIHN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZDtcbiAgICAgICAgc3dpcGVyLnRyYW5zaXRpb25FbmQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pO1xuICAgICAgfTtcbiAgICB9XG4gICAgc3dpcGVyLndyYXBwZXJFbC5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gc2xpZGVUb0xvb3AoaW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKSB7XG4gIGlmIChpbmRleCA9PT0gdm9pZCAwKSB7XG4gICAgaW5kZXggPSAwO1xuICB9XG4gIGlmIChydW5DYWxsYmFja3MgPT09IHZvaWQgMCkge1xuICAgIHJ1bkNhbGxiYWNrcyA9IHRydWU7XG4gIH1cbiAgaWYgKHR5cGVvZiBpbmRleCA9PT0gJ3N0cmluZycpIHtcbiAgICBjb25zdCBpbmRleEFzTnVtYmVyID0gcGFyc2VJbnQoaW5kZXgsIDEwKTtcbiAgICBpbmRleCA9IGluZGV4QXNOdW1iZXI7XG4gIH1cbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgaWYgKHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgaWYgKHR5cGVvZiBzcGVlZCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBzcGVlZCA9IHN3aXBlci5wYXJhbXMuc3BlZWQ7XG4gIH1cbiAgY29uc3QgZ3JpZEVuYWJsZWQgPSBzd2lwZXIuZ3JpZCAmJiBzd2lwZXIucGFyYW1zLmdyaWQgJiYgc3dpcGVyLnBhcmFtcy5ncmlkLnJvd3MgPiAxO1xuICBsZXQgbmV3SW5kZXggPSBpbmRleDtcbiAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgIGlmIChzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICBuZXdJbmRleCA9IG5ld0luZGV4ICsgc3dpcGVyLnZpcnR1YWwuc2xpZGVzQmVmb3JlO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgdGFyZ2V0U2xpZGVJbmRleDtcbiAgICAgIGlmIChncmlkRW5hYmxlZCkge1xuICAgICAgICBjb25zdCBzbGlkZUluZGV4ID0gbmV3SW5kZXggKiBzd2lwZXIucGFyYW1zLmdyaWQucm93cztcbiAgICAgICAgdGFyZ2V0U2xpZGVJbmRleCA9IHN3aXBlci5zbGlkZXMuZmlsdGVyKHNsaWRlRWwgPT4gc2xpZGVFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JykgKiAxID09PSBzbGlkZUluZGV4KVswXS5jb2x1bW47XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0YXJnZXRTbGlkZUluZGV4ID0gc3dpcGVyLmdldFNsaWRlSW5kZXhCeURhdGEobmV3SW5kZXgpO1xuICAgICAgfVxuICAgICAgY29uc3QgY29scyA9IGdyaWRFbmFibGVkID8gTWF0aC5jZWlsKHN3aXBlci5zbGlkZXMubGVuZ3RoIC8gc3dpcGVyLnBhcmFtcy5ncmlkLnJvd3MpIDogc3dpcGVyLnNsaWRlcy5sZW5ndGg7XG4gICAgICBjb25zdCB7XG4gICAgICAgIGNlbnRlcmVkU2xpZGVzXG4gICAgICB9ID0gc3dpcGVyLnBhcmFtcztcbiAgICAgIGxldCBzbGlkZXNQZXJWaWV3ID0gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3O1xuICAgICAgaWYgKHNsaWRlc1BlclZpZXcgPT09ICdhdXRvJykge1xuICAgICAgICBzbGlkZXNQZXJWaWV3ID0gc3dpcGVyLnNsaWRlc1BlclZpZXdEeW5hbWljKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzbGlkZXNQZXJWaWV3ID0gTWF0aC5jZWlsKHBhcnNlRmxvYXQoc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3LCAxMCkpO1xuICAgICAgICBpZiAoY2VudGVyZWRTbGlkZXMgJiYgc2xpZGVzUGVyVmlldyAlIDIgPT09IDApIHtcbiAgICAgICAgICBzbGlkZXNQZXJWaWV3ID0gc2xpZGVzUGVyVmlldyArIDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxldCBuZWVkTG9vcEZpeCA9IGNvbHMgLSB0YXJnZXRTbGlkZUluZGV4IDwgc2xpZGVzUGVyVmlldztcbiAgICAgIGlmIChjZW50ZXJlZFNsaWRlcykge1xuICAgICAgICBuZWVkTG9vcEZpeCA9IG5lZWRMb29wRml4IHx8IHRhcmdldFNsaWRlSW5kZXggPCBNYXRoLmNlaWwoc2xpZGVzUGVyVmlldyAvIDIpO1xuICAgICAgfVxuICAgICAgaWYgKGludGVybmFsICYmIGNlbnRlcmVkU2xpZGVzICYmIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyAhPT0gJ2F1dG8nICYmICFncmlkRW5hYmxlZCkge1xuICAgICAgICBuZWVkTG9vcEZpeCA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKG5lZWRMb29wRml4KSB7XG4gICAgICAgIGNvbnN0IGRpcmVjdGlvbiA9IGNlbnRlcmVkU2xpZGVzID8gdGFyZ2V0U2xpZGVJbmRleCA8IHN3aXBlci5hY3RpdmVJbmRleCA/ICdwcmV2JyA6ICduZXh0JyA6IHRhcmdldFNsaWRlSW5kZXggLSBzd2lwZXIuYWN0aXZlSW5kZXggLSAxIDwgc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ID8gJ25leHQnIDogJ3ByZXYnO1xuICAgICAgICBzd2lwZXIubG9vcEZpeCh7XG4gICAgICAgICAgZGlyZWN0aW9uLFxuICAgICAgICAgIHNsaWRlVG86IHRydWUsXG4gICAgICAgICAgYWN0aXZlU2xpZGVJbmRleDogZGlyZWN0aW9uID09PSAnbmV4dCcgPyB0YXJnZXRTbGlkZUluZGV4ICsgMSA6IHRhcmdldFNsaWRlSW5kZXggLSBjb2xzICsgMSxcbiAgICAgICAgICBzbGlkZVJlYWxJbmRleDogZGlyZWN0aW9uID09PSAnbmV4dCcgPyBzd2lwZXIucmVhbEluZGV4IDogdW5kZWZpbmVkXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKGdyaWRFbmFibGVkKSB7XG4gICAgICAgIGNvbnN0IHNsaWRlSW5kZXggPSBuZXdJbmRleCAqIHN3aXBlci5wYXJhbXMuZ3JpZC5yb3dzO1xuICAgICAgICBuZXdJbmRleCA9IHN3aXBlci5zbGlkZXMuZmlsdGVyKHNsaWRlRWwgPT4gc2xpZGVFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JykgKiAxID09PSBzbGlkZUluZGV4KVswXS5jb2x1bW47XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXdJbmRleCA9IHN3aXBlci5nZXRTbGlkZUluZGV4QnlEYXRhKG5ld0luZGV4KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICBzd2lwZXIuc2xpZGVUbyhuZXdJbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xuICB9KTtcbiAgcmV0dXJuIHN3aXBlcjtcbn1cblxuLyogZXNsaW50IG5vLXVudXNlZC12YXJzOiBcIm9mZlwiICovXG5mdW5jdGlvbiBzbGlkZU5leHQoc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpIHtcbiAgaWYgKHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwKSB7XG4gICAgcnVuQ2FsbGJhY2tzID0gdHJ1ZTtcbiAgfVxuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgZW5hYmxlZCxcbiAgICBwYXJhbXMsXG4gICAgYW5pbWF0aW5nXG4gIH0gPSBzd2lwZXI7XG4gIGlmICghZW5hYmxlZCB8fCBzd2lwZXIuZGVzdHJveWVkKSByZXR1cm4gc3dpcGVyO1xuICBpZiAodHlwZW9mIHNwZWVkID09PSAndW5kZWZpbmVkJykge1xuICAgIHNwZWVkID0gc3dpcGVyLnBhcmFtcy5zcGVlZDtcbiAgfVxuICBsZXQgcGVyR3JvdXAgPSBwYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG4gIGlmIChwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nICYmIHBhcmFtcy5zbGlkZXNQZXJHcm91cCA9PT0gMSAmJiBwYXJhbXMuc2xpZGVzUGVyR3JvdXBBdXRvKSB7XG4gICAgcGVyR3JvdXAgPSBNYXRoLm1heChzd2lwZXIuc2xpZGVzUGVyVmlld0R5bmFtaWMoJ2N1cnJlbnQnLCB0cnVlKSwgMSk7XG4gIH1cbiAgY29uc3QgaW5jcmVtZW50ID0gc3dpcGVyLmFjdGl2ZUluZGV4IDwgcGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCA/IDEgOiBwZXJHcm91cDtcbiAgY29uc3QgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgcGFyYW1zLnZpcnR1YWwuZW5hYmxlZDtcbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgaWYgKGFuaW1hdGluZyAmJiAhaXNWaXJ0dWFsICYmIHBhcmFtcy5sb29wUHJldmVudHNTbGlkaW5nKSByZXR1cm4gZmFsc2U7XG4gICAgc3dpcGVyLmxvb3BGaXgoe1xuICAgICAgZGlyZWN0aW9uOiAnbmV4dCdcbiAgICB9KTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICBzd2lwZXIuX2NsaWVudExlZnQgPSBzd2lwZXIud3JhcHBlckVsLmNsaWVudExlZnQ7XG4gICAgaWYgKHN3aXBlci5hY3RpdmVJbmRleCA9PT0gc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxICYmIHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXggKyBpbmNyZW1lbnQsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIGlmIChwYXJhbXMucmV3aW5kICYmIHN3aXBlci5pc0VuZCkge1xuICAgIHJldHVybiBzd2lwZXIuc2xpZGVUbygwLCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG4gIH1cbiAgcmV0dXJuIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCArIGluY3JlbWVudCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xufVxuXG4vKiBlc2xpbnQgbm8tdW51c2VkLXZhcnM6IFwib2ZmXCIgKi9cbmZ1bmN0aW9uIHNsaWRlUHJldihzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCkge1xuICBpZiAocnVuQ2FsbGJhY2tzID09PSB2b2lkIDApIHtcbiAgICBydW5DYWxsYmFja3MgPSB0cnVlO1xuICB9XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgc25hcEdyaWQsXG4gICAgc2xpZGVzR3JpZCxcbiAgICBydGxUcmFuc2xhdGUsXG4gICAgZW5hYmxlZCxcbiAgICBhbmltYXRpbmdcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKCFlbmFibGVkIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybiBzd2lwZXI7XG4gIGlmICh0eXBlb2Ygc3BlZWQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgc3BlZWQgPSBzd2lwZXIucGFyYW1zLnNwZWVkO1xuICB9XG4gIGNvbnN0IGlzVmlydHVhbCA9IHN3aXBlci52aXJ0dWFsICYmIHBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIGlmIChhbmltYXRpbmcgJiYgIWlzVmlydHVhbCAmJiBwYXJhbXMubG9vcFByZXZlbnRzU2xpZGluZykgcmV0dXJuIGZhbHNlO1xuICAgIHN3aXBlci5sb29wRml4KHtcbiAgICAgIGRpcmVjdGlvbjogJ3ByZXYnXG4gICAgfSk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgc3dpcGVyLl9jbGllbnRMZWZ0ID0gc3dpcGVyLndyYXBwZXJFbC5jbGllbnRMZWZ0O1xuICB9XG4gIGNvbnN0IHRyYW5zbGF0ZSA9IHJ0bFRyYW5zbGF0ZSA/IHN3aXBlci50cmFuc2xhdGUgOiAtc3dpcGVyLnRyYW5zbGF0ZTtcbiAgZnVuY3Rpb24gbm9ybWFsaXplKHZhbCkge1xuICAgIGlmICh2YWwgPCAwKSByZXR1cm4gLU1hdGguZmxvb3IoTWF0aC5hYnModmFsKSk7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IodmFsKTtcbiAgfVxuICBjb25zdCBub3JtYWxpemVkVHJhbnNsYXRlID0gbm9ybWFsaXplKHRyYW5zbGF0ZSk7XG4gIGNvbnN0IG5vcm1hbGl6ZWRTbmFwR3JpZCA9IHNuYXBHcmlkLm1hcCh2YWwgPT4gbm9ybWFsaXplKHZhbCkpO1xuICBsZXQgcHJldlNuYXAgPSBzbmFwR3JpZFtub3JtYWxpemVkU25hcEdyaWQuaW5kZXhPZihub3JtYWxpemVkVHJhbnNsYXRlKSAtIDFdO1xuICBpZiAodHlwZW9mIHByZXZTbmFwID09PSAndW5kZWZpbmVkJyAmJiBwYXJhbXMuY3NzTW9kZSkge1xuICAgIGxldCBwcmV2U25hcEluZGV4O1xuICAgIHNuYXBHcmlkLmZvckVhY2goKHNuYXAsIHNuYXBJbmRleCkgPT4ge1xuICAgICAgaWYgKG5vcm1hbGl6ZWRUcmFuc2xhdGUgPj0gc25hcCkge1xuICAgICAgICAvLyBwcmV2U25hcCA9IHNuYXA7XG4gICAgICAgIHByZXZTbmFwSW5kZXggPSBzbmFwSW5kZXg7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKHR5cGVvZiBwcmV2U25hcEluZGV4ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcHJldlNuYXAgPSBzbmFwR3JpZFtwcmV2U25hcEluZGV4ID4gMCA/IHByZXZTbmFwSW5kZXggLSAxIDogcHJldlNuYXBJbmRleF07XG4gICAgfVxuICB9XG4gIGxldCBwcmV2SW5kZXggPSAwO1xuICBpZiAodHlwZW9mIHByZXZTbmFwICE9PSAndW5kZWZpbmVkJykge1xuICAgIHByZXZJbmRleCA9IHNsaWRlc0dyaWQuaW5kZXhPZihwcmV2U25hcCk7XG4gICAgaWYgKHByZXZJbmRleCA8IDApIHByZXZJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleCAtIDE7XG4gICAgaWYgKHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgJiYgcGFyYW1zLnNsaWRlc1Blckdyb3VwID09PSAxICYmIHBhcmFtcy5zbGlkZXNQZXJHcm91cEF1dG8pIHtcbiAgICAgIHByZXZJbmRleCA9IHByZXZJbmRleCAtIHN3aXBlci5zbGlkZXNQZXJWaWV3RHluYW1pYygncHJldmlvdXMnLCB0cnVlKSArIDE7XG4gICAgICBwcmV2SW5kZXggPSBNYXRoLm1heChwcmV2SW5kZXgsIDApO1xuICAgIH1cbiAgfVxuICBpZiAocGFyYW1zLnJld2luZCAmJiBzd2lwZXIuaXNCZWdpbm5pbmcpIHtcbiAgICBjb25zdCBsYXN0SW5kZXggPSBzd2lwZXIucGFyYW1zLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQgJiYgc3dpcGVyLnZpcnR1YWwgPyBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoIC0gMSA6IHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gMTtcbiAgICByZXR1cm4gc3dpcGVyLnNsaWRlVG8obGFzdEluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG4gIH0gZWxzZSBpZiAocGFyYW1zLmxvb3AgJiYgc3dpcGVyLmFjdGl2ZUluZGV4ID09PSAwICYmIHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHByZXZJbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xuICAgIH0pO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBzd2lwZXIuc2xpZGVUbyhwcmV2SW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbn1cblxuLyogZXNsaW50IG5vLXVudXNlZC12YXJzOiBcIm9mZlwiICovXG5mdW5jdGlvbiBzbGlkZVJlc2V0KHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKSB7XG4gIGlmIChydW5DYWxsYmFja3MgPT09IHZvaWQgMCkge1xuICAgIHJ1bkNhbGxiYWNrcyA9IHRydWU7XG4gIH1cbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgaWYgKHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgaWYgKHR5cGVvZiBzcGVlZCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBzcGVlZCA9IHN3aXBlci5wYXJhbXMuc3BlZWQ7XG4gIH1cbiAgcmV0dXJuIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xufVxuXG4vKiBlc2xpbnQgbm8tdW51c2VkLXZhcnM6IFwib2ZmXCIgKi9cbmZ1bmN0aW9uIHNsaWRlVG9DbG9zZXN0KHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsLCB0aHJlc2hvbGQpIHtcbiAgaWYgKHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwKSB7XG4gICAgcnVuQ2FsbGJhY2tzID0gdHJ1ZTtcbiAgfVxuICBpZiAodGhyZXNob2xkID09PSB2b2lkIDApIHtcbiAgICB0aHJlc2hvbGQgPSAwLjU7XG4gIH1cbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgaWYgKHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgaWYgKHR5cGVvZiBzcGVlZCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBzcGVlZCA9IHN3aXBlci5wYXJhbXMuc3BlZWQ7XG4gIH1cbiAgbGV0IGluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4O1xuICBjb25zdCBza2lwID0gTWF0aC5taW4oc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAsIGluZGV4KTtcbiAgY29uc3Qgc25hcEluZGV4ID0gc2tpcCArIE1hdGguZmxvb3IoKGluZGV4IC0gc2tpcCkgLyBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwKTtcbiAgY29uc3QgdHJhbnNsYXRlID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZSA/IHN3aXBlci50cmFuc2xhdGUgOiAtc3dpcGVyLnRyYW5zbGF0ZTtcbiAgaWYgKHRyYW5zbGF0ZSA+PSBzd2lwZXIuc25hcEdyaWRbc25hcEluZGV4XSkge1xuICAgIC8vIFRoZSBjdXJyZW50IHRyYW5zbGF0ZSBpcyBvbiBvciBhZnRlciB0aGUgY3VycmVudCBzbmFwIGluZGV4LCBzbyB0aGUgY2hvaWNlXG4gICAgLy8gaXMgYmV0d2VlbiB0aGUgY3VycmVudCBpbmRleCBhbmQgdGhlIG9uZSBhZnRlciBpdC5cbiAgICBjb25zdCBjdXJyZW50U25hcCA9IHN3aXBlci5zbmFwR3JpZFtzbmFwSW5kZXhdO1xuICAgIGNvbnN0IG5leHRTbmFwID0gc3dpcGVyLnNuYXBHcmlkW3NuYXBJbmRleCArIDFdO1xuICAgIGlmICh0cmFuc2xhdGUgLSBjdXJyZW50U25hcCA+IChuZXh0U25hcCAtIGN1cnJlbnRTbmFwKSAqIHRocmVzaG9sZCkge1xuICAgICAgaW5kZXggKz0gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gVGhlIGN1cnJlbnQgdHJhbnNsYXRlIGlzIGJlZm9yZSB0aGUgY3VycmVudCBzbmFwIGluZGV4LCBzbyB0aGUgY2hvaWNlXG4gICAgLy8gaXMgYmV0d2VlbiB0aGUgY3VycmVudCBpbmRleCBhbmQgdGhlIG9uZSBiZWZvcmUgaXQuXG4gICAgY29uc3QgcHJldlNuYXAgPSBzd2lwZXIuc25hcEdyaWRbc25hcEluZGV4IC0gMV07XG4gICAgY29uc3QgY3VycmVudFNuYXAgPSBzd2lwZXIuc25hcEdyaWRbc25hcEluZGV4XTtcbiAgICBpZiAodHJhbnNsYXRlIC0gcHJldlNuYXAgPD0gKGN1cnJlbnRTbmFwIC0gcHJldlNuYXApICogdGhyZXNob2xkKSB7XG4gICAgICBpbmRleCAtPSBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuICAgIH1cbiAgfVxuICBpbmRleCA9IE1hdGgubWF4KGluZGV4LCAwKTtcbiAgaW5kZXggPSBNYXRoLm1pbihpbmRleCwgc3dpcGVyLnNsaWRlc0dyaWQubGVuZ3RoIC0gMSk7XG4gIHJldHVybiBzd2lwZXIuc2xpZGVUbyhpbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xufVxuXG5mdW5jdGlvbiBzbGlkZVRvQ2xpY2tlZFNsaWRlKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBpZiAoc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgIHNsaWRlc0VsXG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IHNsaWRlc1BlclZpZXcgPSBwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nID8gc3dpcGVyLnNsaWRlc1BlclZpZXdEeW5hbWljKCkgOiBwYXJhbXMuc2xpZGVzUGVyVmlldztcbiAgbGV0IHNsaWRlVG9JbmRleCA9IHN3aXBlci5jbGlja2VkSW5kZXg7XG4gIGxldCByZWFsSW5kZXg7XG4gIGNvbnN0IHNsaWRlU2VsZWN0b3IgPSBzd2lwZXIuaXNFbGVtZW50ID8gYHN3aXBlci1zbGlkZWAgOiBgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9YDtcbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgaWYgKHN3aXBlci5hbmltYXRpbmcpIHJldHVybjtcbiAgICByZWFsSW5kZXggPSBwYXJzZUludChzd2lwZXIuY2xpY2tlZFNsaWRlLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSwgMTApO1xuICAgIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgIGlmIChzbGlkZVRvSW5kZXggPCBzd2lwZXIubG9vcGVkU2xpZGVzIC0gc2xpZGVzUGVyVmlldyAvIDIgfHwgc2xpZGVUb0luZGV4ID4gc3dpcGVyLnNsaWRlcy5sZW5ndGggLSBzd2lwZXIubG9vcGVkU2xpZGVzICsgc2xpZGVzUGVyVmlldyAvIDIpIHtcbiAgICAgICAgc3dpcGVyLmxvb3BGaXgoKTtcbiAgICAgICAgc2xpZGVUb0luZGV4ID0gc3dpcGVyLmdldFNsaWRlSW5kZXgoZWxlbWVudENoaWxkcmVuKHNsaWRlc0VsLCBgJHtzbGlkZVNlbGVjdG9yfVtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7cmVhbEluZGV4fVwiXWApWzBdKTtcbiAgICAgICAgbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICAgIHN3aXBlci5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc2xpZGVUb0luZGV4KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHNsaWRlVG9JbmRleCA+IHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gc2xpZGVzUGVyVmlldykge1xuICAgICAgc3dpcGVyLmxvb3BGaXgoKTtcbiAgICAgIHNsaWRlVG9JbmRleCA9IHN3aXBlci5nZXRTbGlkZUluZGV4KGVsZW1lbnRDaGlsZHJlbihzbGlkZXNFbCwgYCR7c2xpZGVTZWxlY3Rvcn1bZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke3JlYWxJbmRleH1cIl1gKVswXSk7XG4gICAgICBuZXh0VGljaygoKSA9PiB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc2xpZGVUb0luZGV4KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyLnNsaWRlVG8oc2xpZGVUb0luZGV4KTtcbiAgfVxufVxuXG52YXIgc2xpZGUgPSB7XG4gIHNsaWRlVG8sXG4gIHNsaWRlVG9Mb29wLFxuICBzbGlkZU5leHQsXG4gIHNsaWRlUHJldixcbiAgc2xpZGVSZXNldCxcbiAgc2xpZGVUb0Nsb3Nlc3QsXG4gIHNsaWRlVG9DbGlja2VkU2xpZGVcbn07XG5cbmZ1bmN0aW9uIGxvb3BDcmVhdGUoc2xpZGVSZWFsSW5kZXgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICBzbGlkZXNFbFxuICB9ID0gc3dpcGVyO1xuICBpZiAoIXBhcmFtcy5sb29wIHx8IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkKSByZXR1cm47XG4gIGNvbnN0IGluaXRTbGlkZXMgPSAoKSA9PiB7XG4gICAgY29uc3Qgc2xpZGVzID0gZWxlbWVudENoaWxkcmVuKHNsaWRlc0VsLCBgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKTtcbiAgICBzbGlkZXMuZm9yRWFjaCgoZWwsIGluZGV4KSA9PiB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JywgaW5kZXgpO1xuICAgIH0pO1xuICB9O1xuICBjb25zdCBncmlkRW5hYmxlZCA9IHN3aXBlci5ncmlkICYmIHBhcmFtcy5ncmlkICYmIHBhcmFtcy5ncmlkLnJvd3MgPiAxO1xuICBjb25zdCBzbGlkZXNQZXJHcm91cCA9IHBhcmFtcy5zbGlkZXNQZXJHcm91cCAqIChncmlkRW5hYmxlZCA/IHBhcmFtcy5ncmlkLnJvd3MgOiAxKTtcbiAgY29uc3Qgc2hvdWxkRmlsbEdyb3VwID0gc3dpcGVyLnNsaWRlcy5sZW5ndGggJSBzbGlkZXNQZXJHcm91cCAhPT0gMDtcbiAgY29uc3Qgc2hvdWxkRmlsbEdyaWQgPSBncmlkRW5hYmxlZCAmJiBzd2lwZXIuc2xpZGVzLmxlbmd0aCAlIHBhcmFtcy5ncmlkLnJvd3MgIT09IDA7XG4gIGNvbnN0IGFkZEJsYW5rU2xpZGVzID0gYW1vdW50T2ZTbGlkZXMgPT4ge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYW1vdW50T2ZTbGlkZXM7IGkgKz0gMSkge1xuICAgICAgY29uc3Qgc2xpZGVFbCA9IHN3aXBlci5pc0VsZW1lbnQgPyBjcmVhdGVFbGVtZW50KCdzd2lwZXItc2xpZGUnLCBbcGFyYW1zLnNsaWRlQmxhbmtDbGFzc10pIDogY3JlYXRlRWxlbWVudCgnZGl2JywgW3BhcmFtcy5zbGlkZUNsYXNzLCBwYXJhbXMuc2xpZGVCbGFua0NsYXNzXSk7XG4gICAgICBzd2lwZXIuc2xpZGVzRWwuYXBwZW5kKHNsaWRlRWwpO1xuICAgIH1cbiAgfTtcbiAgaWYgKHNob3VsZEZpbGxHcm91cCkge1xuICAgIGlmIChwYXJhbXMubG9vcEFkZEJsYW5rU2xpZGVzKSB7XG4gICAgICBjb25zdCBzbGlkZXNUb0FkZCA9IHNsaWRlc1Blckdyb3VwIC0gc3dpcGVyLnNsaWRlcy5sZW5ndGggJSBzbGlkZXNQZXJHcm91cDtcbiAgICAgIGFkZEJsYW5rU2xpZGVzKHNsaWRlc1RvQWRkKTtcbiAgICAgIHN3aXBlci5yZWNhbGNTbGlkZXMoKTtcbiAgICAgIHN3aXBlci51cGRhdGVTbGlkZXMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2hvd1dhcm5pbmcoJ1N3aXBlciBMb29wIFdhcm5pbmc6IFRoZSBudW1iZXIgb2Ygc2xpZGVzIGlzIG5vdCBldmVuIHRvIHNsaWRlc1Blckdyb3VwLCBsb29wIG1vZGUgbWF5IG5vdCBmdW5jdGlvbiBwcm9wZXJseS4gWW91IG5lZWQgdG8gYWRkIG1vcmUgc2xpZGVzIChvciBtYWtlIGR1cGxpY2F0ZXMsIG9yIGVtcHR5IHNsaWRlcyknKTtcbiAgICB9XG4gICAgaW5pdFNsaWRlcygpO1xuICB9IGVsc2UgaWYgKHNob3VsZEZpbGxHcmlkKSB7XG4gICAgaWYgKHBhcmFtcy5sb29wQWRkQmxhbmtTbGlkZXMpIHtcbiAgICAgIGNvbnN0IHNsaWRlc1RvQWRkID0gcGFyYW1zLmdyaWQucm93cyAtIHN3aXBlci5zbGlkZXMubGVuZ3RoICUgcGFyYW1zLmdyaWQucm93cztcbiAgICAgIGFkZEJsYW5rU2xpZGVzKHNsaWRlc1RvQWRkKTtcbiAgICAgIHN3aXBlci5yZWNhbGNTbGlkZXMoKTtcbiAgICAgIHN3aXBlci51cGRhdGVTbGlkZXMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2hvd1dhcm5pbmcoJ1N3aXBlciBMb29wIFdhcm5pbmc6IFRoZSBudW1iZXIgb2Ygc2xpZGVzIGlzIG5vdCBldmVuIHRvIGdyaWQucm93cywgbG9vcCBtb2RlIG1heSBub3QgZnVuY3Rpb24gcHJvcGVybHkuIFlvdSBuZWVkIHRvIGFkZCBtb3JlIHNsaWRlcyAob3IgbWFrZSBkdXBsaWNhdGVzLCBvciBlbXB0eSBzbGlkZXMpJyk7XG4gICAgfVxuICAgIGluaXRTbGlkZXMoKTtcbiAgfSBlbHNlIHtcbiAgICBpbml0U2xpZGVzKCk7XG4gIH1cbiAgc3dpcGVyLmxvb3BGaXgoe1xuICAgIHNsaWRlUmVhbEluZGV4LFxuICAgIGRpcmVjdGlvbjogcGFyYW1zLmNlbnRlcmVkU2xpZGVzID8gdW5kZWZpbmVkIDogJ25leHQnXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBsb29wRml4KF90ZW1wKSB7XG4gIGxldCB7XG4gICAgc2xpZGVSZWFsSW5kZXgsXG4gICAgc2xpZGVUbyA9IHRydWUsXG4gICAgZGlyZWN0aW9uLFxuICAgIHNldFRyYW5zbGF0ZSxcbiAgICBhY3RpdmVTbGlkZUluZGV4LFxuICAgIGJ5Q29udHJvbGxlcixcbiAgICBieU1vdXNld2hlZWxcbiAgfSA9IF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wO1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBpZiAoIXN3aXBlci5wYXJhbXMubG9vcCkgcmV0dXJuO1xuICBzd2lwZXIuZW1pdCgnYmVmb3JlTG9vcEZpeCcpO1xuICBjb25zdCB7XG4gICAgc2xpZGVzLFxuICAgIGFsbG93U2xpZGVQcmV2LFxuICAgIGFsbG93U2xpZGVOZXh0LFxuICAgIHNsaWRlc0VsLFxuICAgIHBhcmFtc1xuICB9ID0gc3dpcGVyO1xuICBjb25zdCB7XG4gICAgY2VudGVyZWRTbGlkZXNcbiAgfSA9IHBhcmFtcztcbiAgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID0gdHJ1ZTtcbiAgc3dpcGVyLmFsbG93U2xpZGVOZXh0ID0gdHJ1ZTtcbiAgaWYgKHN3aXBlci52aXJ0dWFsICYmIHBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpIHtcbiAgICBpZiAoc2xpZGVUbykge1xuICAgICAgaWYgKCFwYXJhbXMuY2VudGVyZWRTbGlkZXMgJiYgc3dpcGVyLnNuYXBJbmRleCA9PT0gMCkge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoLCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICB9IGVsc2UgaWYgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcyAmJiBzd2lwZXIuc25hcEluZGV4IDwgcGFyYW1zLnNsaWRlc1BlclZpZXcpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCArIHN3aXBlci5zbmFwSW5kZXgsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICAgIH0gZWxzZSBpZiAoc3dpcGVyLnNuYXBJbmRleCA9PT0gc3dpcGVyLnNuYXBHcmlkLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnZpcnR1YWwuc2xpZGVzQmVmb3JlLCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHN3aXBlci5hbGxvd1NsaWRlUHJldiA9IGFsbG93U2xpZGVQcmV2O1xuICAgIHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9IGFsbG93U2xpZGVOZXh0O1xuICAgIHN3aXBlci5lbWl0KCdsb29wRml4Jyk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGxldCBzbGlkZXNQZXJWaWV3ID0gcGFyYW1zLnNsaWRlc1BlclZpZXc7XG4gIGlmIChzbGlkZXNQZXJWaWV3ID09PSAnYXV0bycpIHtcbiAgICBzbGlkZXNQZXJWaWV3ID0gc3dpcGVyLnNsaWRlc1BlclZpZXdEeW5hbWljKCk7XG4gIH0gZWxzZSB7XG4gICAgc2xpZGVzUGVyVmlldyA9IE1hdGguY2VpbChwYXJzZUZsb2F0KHBhcmFtcy5zbGlkZXNQZXJWaWV3LCAxMCkpO1xuICAgIGlmIChjZW50ZXJlZFNsaWRlcyAmJiBzbGlkZXNQZXJWaWV3ICUgMiA9PT0gMCkge1xuICAgICAgc2xpZGVzUGVyVmlldyA9IHNsaWRlc1BlclZpZXcgKyAxO1xuICAgIH1cbiAgfVxuICBjb25zdCBzbGlkZXNQZXJHcm91cCA9IHBhcmFtcy5zbGlkZXNQZXJHcm91cEF1dG8gPyBzbGlkZXNQZXJWaWV3IDogcGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuICBsZXQgbG9vcGVkU2xpZGVzID0gc2xpZGVzUGVyR3JvdXA7XG4gIGlmIChsb29wZWRTbGlkZXMgJSBzbGlkZXNQZXJHcm91cCAhPT0gMCkge1xuICAgIGxvb3BlZFNsaWRlcyArPSBzbGlkZXNQZXJHcm91cCAtIGxvb3BlZFNsaWRlcyAlIHNsaWRlc1Blckdyb3VwO1xuICB9XG4gIGxvb3BlZFNsaWRlcyArPSBwYXJhbXMubG9vcEFkZGl0aW9uYWxTbGlkZXM7XG4gIHN3aXBlci5sb29wZWRTbGlkZXMgPSBsb29wZWRTbGlkZXM7XG4gIGNvbnN0IGdyaWRFbmFibGVkID0gc3dpcGVyLmdyaWQgJiYgcGFyYW1zLmdyaWQgJiYgcGFyYW1zLmdyaWQucm93cyA+IDE7XG4gIGlmIChzbGlkZXMubGVuZ3RoIDwgc2xpZGVzUGVyVmlldyArIGxvb3BlZFNsaWRlcykge1xuICAgIHNob3dXYXJuaW5nKCdTd2lwZXIgTG9vcCBXYXJuaW5nOiBUaGUgbnVtYmVyIG9mIHNsaWRlcyBpcyBub3QgZW5vdWdoIGZvciBsb29wIG1vZGUsIGl0IHdpbGwgYmUgZGlzYWJsZWQgYW5kIG5vdCBmdW5jdGlvbiBwcm9wZXJseS4gWW91IG5lZWQgdG8gYWRkIG1vcmUgc2xpZGVzIChvciBtYWtlIGR1cGxpY2F0ZXMpIG9yIGxvd2VyIHRoZSB2YWx1ZXMgb2Ygc2xpZGVzUGVyVmlldyBhbmQgc2xpZGVzUGVyR3JvdXAgcGFyYW1ldGVycycpO1xuICB9IGVsc2UgaWYgKGdyaWRFbmFibGVkICYmIHBhcmFtcy5ncmlkLmZpbGwgPT09ICdyb3cnKSB7XG4gICAgc2hvd1dhcm5pbmcoJ1N3aXBlciBMb29wIFdhcm5pbmc6IExvb3AgbW9kZSBpcyBub3QgY29tcGF0aWJsZSB3aXRoIGdyaWQuZmlsbCA9IGByb3dgJyk7XG4gIH1cbiAgY29uc3QgcHJlcGVuZFNsaWRlc0luZGV4ZXMgPSBbXTtcbiAgY29uc3QgYXBwZW5kU2xpZGVzSW5kZXhlcyA9IFtdO1xuICBsZXQgYWN0aXZlSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG4gIGlmICh0eXBlb2YgYWN0aXZlU2xpZGVJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBhY3RpdmVTbGlkZUluZGV4ID0gc3dpcGVyLmdldFNsaWRlSW5kZXgoc2xpZGVzLmZpbHRlcihlbCA9PiBlbC5jbGFzc0xpc3QuY29udGFpbnMocGFyYW1zLnNsaWRlQWN0aXZlQ2xhc3MpKVswXSk7XG4gIH0gZWxzZSB7XG4gICAgYWN0aXZlSW5kZXggPSBhY3RpdmVTbGlkZUluZGV4O1xuICB9XG4gIGNvbnN0IGlzTmV4dCA9IGRpcmVjdGlvbiA9PT0gJ25leHQnIHx8ICFkaXJlY3Rpb247XG4gIGNvbnN0IGlzUHJldiA9IGRpcmVjdGlvbiA9PT0gJ3ByZXYnIHx8ICFkaXJlY3Rpb247XG4gIGxldCBzbGlkZXNQcmVwZW5kZWQgPSAwO1xuICBsZXQgc2xpZGVzQXBwZW5kZWQgPSAwO1xuICBjb25zdCBjb2xzID0gZ3JpZEVuYWJsZWQgPyBNYXRoLmNlaWwoc2xpZGVzLmxlbmd0aCAvIHBhcmFtcy5ncmlkLnJvd3MpIDogc2xpZGVzLmxlbmd0aDtcbiAgY29uc3QgYWN0aXZlQ29sSW5kZXggPSBncmlkRW5hYmxlZCA/IHNsaWRlc1thY3RpdmVTbGlkZUluZGV4XS5jb2x1bW4gOiBhY3RpdmVTbGlkZUluZGV4O1xuICBjb25zdCBhY3RpdmVDb2xJbmRleFdpdGhTaGlmdCA9IGFjdGl2ZUNvbEluZGV4ICsgKGNlbnRlcmVkU2xpZGVzICYmIHR5cGVvZiBzZXRUcmFuc2xhdGUgPT09ICd1bmRlZmluZWQnID8gLXNsaWRlc1BlclZpZXcgLyAyICsgMC41IDogMCk7XG4gIC8vIHByZXBlbmQgbGFzdCBzbGlkZXMgYmVmb3JlIHN0YXJ0XG4gIGlmIChhY3RpdmVDb2xJbmRleFdpdGhTaGlmdCA8IGxvb3BlZFNsaWRlcykge1xuICAgIHNsaWRlc1ByZXBlbmRlZCA9IE1hdGgubWF4KGxvb3BlZFNsaWRlcyAtIGFjdGl2ZUNvbEluZGV4V2l0aFNoaWZ0LCBzbGlkZXNQZXJHcm91cCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsb29wZWRTbGlkZXMgLSBhY3RpdmVDb2xJbmRleFdpdGhTaGlmdDsgaSArPSAxKSB7XG4gICAgICBjb25zdCBpbmRleCA9IGkgLSBNYXRoLmZsb29yKGkgLyBjb2xzKSAqIGNvbHM7XG4gICAgICBpZiAoZ3JpZEVuYWJsZWQpIHtcbiAgICAgICAgY29uc3QgY29sSW5kZXhUb1ByZXBlbmQgPSBjb2xzIC0gaW5kZXggLSAxO1xuICAgICAgICBmb3IgKGxldCBpID0gc2xpZGVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaSAtPSAxKSB7XG4gICAgICAgICAgaWYgKHNsaWRlc1tpXS5jb2x1bW4gPT09IGNvbEluZGV4VG9QcmVwZW5kKSBwcmVwZW5kU2xpZGVzSW5kZXhlcy5wdXNoKGkpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHNsaWRlcy5mb3JFYWNoKChzbGlkZSwgc2xpZGVJbmRleCkgPT4ge1xuICAgICAgICAvLyAgIGlmIChzbGlkZS5jb2x1bW4gPT09IGNvbEluZGV4VG9QcmVwZW5kKSBwcmVwZW5kU2xpZGVzSW5kZXhlcy5wdXNoKHNsaWRlSW5kZXgpO1xuICAgICAgICAvLyB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByZXBlbmRTbGlkZXNJbmRleGVzLnB1c2goY29scyAtIGluZGV4IC0gMSk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKGFjdGl2ZUNvbEluZGV4V2l0aFNoaWZ0ICsgc2xpZGVzUGVyVmlldyA+IGNvbHMgLSBsb29wZWRTbGlkZXMpIHtcbiAgICBzbGlkZXNBcHBlbmRlZCA9IE1hdGgubWF4KGFjdGl2ZUNvbEluZGV4V2l0aFNoaWZ0IC0gKGNvbHMgLSBsb29wZWRTbGlkZXMgKiAyKSwgc2xpZGVzUGVyR3JvdXApO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzQXBwZW5kZWQ7IGkgKz0gMSkge1xuICAgICAgY29uc3QgaW5kZXggPSBpIC0gTWF0aC5mbG9vcihpIC8gY29scykgKiBjb2xzO1xuICAgICAgaWYgKGdyaWRFbmFibGVkKSB7XG4gICAgICAgIHNsaWRlcy5mb3JFYWNoKChzbGlkZSwgc2xpZGVJbmRleCkgPT4ge1xuICAgICAgICAgIGlmIChzbGlkZS5jb2x1bW4gPT09IGluZGV4KSBhcHBlbmRTbGlkZXNJbmRleGVzLnB1c2goc2xpZGVJbmRleCk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXBwZW5kU2xpZGVzSW5kZXhlcy5wdXNoKGluZGV4KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgc3dpcGVyLl9fcHJldmVudE9ic2VydmVyX18gPSB0cnVlO1xuICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgIHN3aXBlci5fX3ByZXZlbnRPYnNlcnZlcl9fID0gZmFsc2U7XG4gIH0pO1xuICBpZiAoaXNQcmV2KSB7XG4gICAgcHJlcGVuZFNsaWRlc0luZGV4ZXMuZm9yRWFjaChpbmRleCA9PiB7XG4gICAgICBzbGlkZXNbaW5kZXhdLnN3aXBlckxvb3BNb3ZlRE9NID0gdHJ1ZTtcbiAgICAgIHNsaWRlc0VsLnByZXBlbmQoc2xpZGVzW2luZGV4XSk7XG4gICAgICBzbGlkZXNbaW5kZXhdLnN3aXBlckxvb3BNb3ZlRE9NID0gZmFsc2U7XG4gICAgfSk7XG4gIH1cbiAgaWYgKGlzTmV4dCkge1xuICAgIGFwcGVuZFNsaWRlc0luZGV4ZXMuZm9yRWFjaChpbmRleCA9PiB7XG4gICAgICBzbGlkZXNbaW5kZXhdLnN3aXBlckxvb3BNb3ZlRE9NID0gdHJ1ZTtcbiAgICAgIHNsaWRlc0VsLmFwcGVuZChzbGlkZXNbaW5kZXhdKTtcbiAgICAgIHNsaWRlc1tpbmRleF0uc3dpcGVyTG9vcE1vdmVET00gPSBmYWxzZTtcbiAgICB9KTtcbiAgfVxuICBzd2lwZXIucmVjYWxjU2xpZGVzKCk7XG4gIGlmIChwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nKSB7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlcygpO1xuICB9IGVsc2UgaWYgKGdyaWRFbmFibGVkICYmIChwcmVwZW5kU2xpZGVzSW5kZXhlcy5sZW5ndGggPiAwICYmIGlzUHJldiB8fCBhcHBlbmRTbGlkZXNJbmRleGVzLmxlbmd0aCA+IDAgJiYgaXNOZXh0KSkge1xuICAgIHN3aXBlci5zbGlkZXMuZm9yRWFjaCgoc2xpZGUsIHNsaWRlSW5kZXgpID0+IHtcbiAgICAgIHN3aXBlci5ncmlkLnVwZGF0ZVNsaWRlKHNsaWRlSW5kZXgsIHNsaWRlLCBzd2lwZXIuc2xpZGVzKTtcbiAgICB9KTtcbiAgfVxuICBpZiAocGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MpIHtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzT2Zmc2V0KCk7XG4gIH1cbiAgaWYgKHNsaWRlVG8pIHtcbiAgICBpZiAocHJlcGVuZFNsaWRlc0luZGV4ZXMubGVuZ3RoID4gMCAmJiBpc1ByZXYpIHtcbiAgICAgIGlmICh0eXBlb2Ygc2xpZGVSZWFsSW5kZXggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRTbGlkZVRyYW5zbGF0ZSA9IHN3aXBlci5zbGlkZXNHcmlkW2FjdGl2ZUluZGV4XTtcbiAgICAgICAgY29uc3QgbmV3U2xpZGVUcmFuc2xhdGUgPSBzd2lwZXIuc2xpZGVzR3JpZFthY3RpdmVJbmRleCArIHNsaWRlc1ByZXBlbmRlZF07XG4gICAgICAgIGNvbnN0IGRpZmYgPSBuZXdTbGlkZVRyYW5zbGF0ZSAtIGN1cnJlbnRTbGlkZVRyYW5zbGF0ZTtcbiAgICAgICAgaWYgKGJ5TW91c2V3aGVlbCkge1xuICAgICAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUoc3dpcGVyLnRyYW5zbGF0ZSAtIGRpZmYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN3aXBlci5zbGlkZVRvKGFjdGl2ZUluZGV4ICsgTWF0aC5jZWlsKHNsaWRlc1ByZXBlbmRlZCksIDAsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgICBpZiAoc2V0VHJhbnNsYXRlKSB7XG4gICAgICAgICAgICBzd2lwZXIudG91Y2hFdmVudHNEYXRhLnN0YXJ0VHJhbnNsYXRlID0gc3dpcGVyLnRvdWNoRXZlbnRzRGF0YS5zdGFydFRyYW5zbGF0ZSAtIGRpZmY7XG4gICAgICAgICAgICBzd2lwZXIudG91Y2hFdmVudHNEYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBzd2lwZXIudG91Y2hFdmVudHNEYXRhLmN1cnJlbnRUcmFuc2xhdGUgLSBkaWZmO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHNldFRyYW5zbGF0ZSkge1xuICAgICAgICAgIGNvbnN0IHNoaWZ0ID0gZ3JpZEVuYWJsZWQgPyBwcmVwZW5kU2xpZGVzSW5kZXhlcy5sZW5ndGggLyBwYXJhbXMuZ3JpZC5yb3dzIDogcHJlcGVuZFNsaWRlc0luZGV4ZXMubGVuZ3RoO1xuICAgICAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCArIHNoaWZ0LCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgICAgc3dpcGVyLnRvdWNoRXZlbnRzRGF0YS5jdXJyZW50VHJhbnNsYXRlID0gc3dpcGVyLnRyYW5zbGF0ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYXBwZW5kU2xpZGVzSW5kZXhlcy5sZW5ndGggPiAwICYmIGlzTmV4dCkge1xuICAgICAgaWYgKHR5cGVvZiBzbGlkZVJlYWxJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY29uc3QgY3VycmVudFNsaWRlVHJhbnNsYXRlID0gc3dpcGVyLnNsaWRlc0dyaWRbYWN0aXZlSW5kZXhdO1xuICAgICAgICBjb25zdCBuZXdTbGlkZVRyYW5zbGF0ZSA9IHN3aXBlci5zbGlkZXNHcmlkW2FjdGl2ZUluZGV4IC0gc2xpZGVzQXBwZW5kZWRdO1xuICAgICAgICBjb25zdCBkaWZmID0gbmV3U2xpZGVUcmFuc2xhdGUgLSBjdXJyZW50U2xpZGVUcmFuc2xhdGU7XG4gICAgICAgIGlmIChieU1vdXNld2hlZWwpIHtcbiAgICAgICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKHN3aXBlci50cmFuc2xhdGUgLSBkaWZmKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhhY3RpdmVJbmRleCAtIHNsaWRlc0FwcGVuZGVkLCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgICAgaWYgKHNldFRyYW5zbGF0ZSkge1xuICAgICAgICAgICAgc3dpcGVyLnRvdWNoRXZlbnRzRGF0YS5zdGFydFRyYW5zbGF0ZSA9IHN3aXBlci50b3VjaEV2ZW50c0RhdGEuc3RhcnRUcmFuc2xhdGUgLSBkaWZmO1xuICAgICAgICAgICAgc3dpcGVyLnRvdWNoRXZlbnRzRGF0YS5jdXJyZW50VHJhbnNsYXRlID0gc3dpcGVyLnRvdWNoRXZlbnRzRGF0YS5jdXJyZW50VHJhbnNsYXRlIC0gZGlmZjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHNoaWZ0ID0gZ3JpZEVuYWJsZWQgPyBhcHBlbmRTbGlkZXNJbmRleGVzLmxlbmd0aCAvIHBhcmFtcy5ncmlkLnJvd3MgOiBhcHBlbmRTbGlkZXNJbmRleGVzLmxlbmd0aDtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4IC0gc2hpZnQsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID0gYWxsb3dTbGlkZVByZXY7XG4gIHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9IGFsbG93U2xpZGVOZXh0O1xuICBpZiAoc3dpcGVyLmNvbnRyb2xsZXIgJiYgc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbCAmJiAhYnlDb250cm9sbGVyKSB7XG4gICAgY29uc3QgbG9vcFBhcmFtcyA9IHtcbiAgICAgIHNsaWRlUmVhbEluZGV4LFxuICAgICAgZGlyZWN0aW9uLFxuICAgICAgc2V0VHJhbnNsYXRlLFxuICAgICAgYWN0aXZlU2xpZGVJbmRleCxcbiAgICAgIGJ5Q29udHJvbGxlcjogdHJ1ZVxuICAgIH07XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbCkpIHtcbiAgICAgIHN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wuZm9yRWFjaChjID0+IHtcbiAgICAgICAgaWYgKCFjLmRlc3Ryb3llZCAmJiBjLnBhcmFtcy5sb29wKSBjLmxvb3BGaXgoe1xuICAgICAgICAgIC4uLmxvb3BQYXJhbXMsXG4gICAgICAgICAgc2xpZGVUbzogYy5wYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gcGFyYW1zLnNsaWRlc1BlclZpZXcgPyBzbGlkZVRvIDogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wgaW5zdGFuY2VvZiBzd2lwZXIuY29uc3RydWN0b3IgJiYgc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbC5wYXJhbXMubG9vcCkge1xuICAgICAgc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbC5sb29wRml4KHtcbiAgICAgICAgLi4ubG9vcFBhcmFtcyxcbiAgICAgICAgc2xpZGVUbzogc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbC5wYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gcGFyYW1zLnNsaWRlc1BlclZpZXcgPyBzbGlkZVRvIDogZmFsc2VcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBzd2lwZXIuZW1pdCgnbG9vcEZpeCcpO1xufVxuXG5mdW5jdGlvbiBsb29wRGVzdHJveSgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICBzbGlkZXNFbFxuICB9ID0gc3dpcGVyO1xuICBpZiAoIXBhcmFtcy5sb29wIHx8IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkKSByZXR1cm47XG4gIHN3aXBlci5yZWNhbGNTbGlkZXMoKTtcbiAgY29uc3QgbmV3U2xpZGVzT3JkZXIgPSBbXTtcbiAgc3dpcGVyLnNsaWRlcy5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgIGNvbnN0IGluZGV4ID0gdHlwZW9mIHNsaWRlRWwuc3dpcGVyU2xpZGVJbmRleCA9PT0gJ3VuZGVmaW5lZCcgPyBzbGlkZUVsLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSAqIDEgOiBzbGlkZUVsLnN3aXBlclNsaWRlSW5kZXg7XG4gICAgbmV3U2xpZGVzT3JkZXJbaW5kZXhdID0gc2xpZGVFbDtcbiAgfSk7XG4gIHN3aXBlci5zbGlkZXMuZm9yRWFjaChzbGlkZUVsID0+IHtcbiAgICBzbGlkZUVsLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKTtcbiAgfSk7XG4gIG5ld1NsaWRlc09yZGVyLmZvckVhY2goc2xpZGVFbCA9PiB7XG4gICAgc2xpZGVzRWwuYXBwZW5kKHNsaWRlRWwpO1xuICB9KTtcbiAgc3dpcGVyLnJlY2FsY1NsaWRlcygpO1xuICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIucmVhbEluZGV4LCAwKTtcbn1cblxudmFyIGxvb3AgPSB7XG4gIGxvb3BDcmVhdGUsXG4gIGxvb3BGaXgsXG4gIGxvb3BEZXN0cm95XG59O1xuXG5mdW5jdGlvbiBzZXRHcmFiQ3Vyc29yKG1vdmluZykge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBpZiAoIXN3aXBlci5wYXJhbXMuc2ltdWxhdGVUb3VjaCB8fCBzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc3dpcGVyLmlzTG9ja2VkIHx8IHN3aXBlci5wYXJhbXMuY3NzTW9kZSkgcmV0dXJuO1xuICBjb25zdCBlbCA9IHN3aXBlci5wYXJhbXMudG91Y2hFdmVudHNUYXJnZXQgPT09ICdjb250YWluZXInID8gc3dpcGVyLmVsIDogc3dpcGVyLndyYXBwZXJFbDtcbiAgaWYgKHN3aXBlci5pc0VsZW1lbnQpIHtcbiAgICBzd2lwZXIuX19wcmV2ZW50T2JzZXJ2ZXJfXyA9IHRydWU7XG4gIH1cbiAgZWwuc3R5bGUuY3Vyc29yID0gJ21vdmUnO1xuICBlbC5zdHlsZS5jdXJzb3IgPSBtb3ZpbmcgPyAnZ3JhYmJpbmcnIDogJ2dyYWInO1xuICBpZiAoc3dpcGVyLmlzRWxlbWVudCkge1xuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICBzd2lwZXIuX19wcmV2ZW50T2JzZXJ2ZXJfXyA9IGZhbHNlO1xuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVuc2V0R3JhYkN1cnNvcigpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgaWYgKHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzd2lwZXIuaXNMb2NrZWQgfHwgc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChzd2lwZXIuaXNFbGVtZW50KSB7XG4gICAgc3dpcGVyLl9fcHJldmVudE9ic2VydmVyX18gPSB0cnVlO1xuICB9XG4gIHN3aXBlcltzd2lwZXIucGFyYW1zLnRvdWNoRXZlbnRzVGFyZ2V0ID09PSAnY29udGFpbmVyJyA/ICdlbCcgOiAnd3JhcHBlckVsJ10uc3R5bGUuY3Vyc29yID0gJyc7XG4gIGlmIChzd2lwZXIuaXNFbGVtZW50KSB7XG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgIHN3aXBlci5fX3ByZXZlbnRPYnNlcnZlcl9fID0gZmFsc2U7XG4gICAgfSk7XG4gIH1cbn1cblxudmFyIGdyYWJDdXJzb3IgPSB7XG4gIHNldEdyYWJDdXJzb3IsXG4gIHVuc2V0R3JhYkN1cnNvclxufTtcblxuLy8gTW9kaWZpZWQgZnJvbSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy81NDUyMDU1NC9jdXN0b20tZWxlbWVudC1nZXRyb290bm9kZS1jbG9zZXN0LWZ1bmN0aW9uLWNyb3NzaW5nLW11bHRpcGxlLXBhcmVudC1zaGFkb3dkXG5mdW5jdGlvbiBjbG9zZXN0RWxlbWVudChzZWxlY3RvciwgYmFzZSkge1xuICBpZiAoYmFzZSA9PT0gdm9pZCAwKSB7XG4gICAgYmFzZSA9IHRoaXM7XG4gIH1cbiAgZnVuY3Rpb24gX19jbG9zZXN0RnJvbShlbCkge1xuICAgIGlmICghZWwgfHwgZWwgPT09IGdldERvY3VtZW50KCkgfHwgZWwgPT09IGdldFdpbmRvdygpKSByZXR1cm4gbnVsbDtcbiAgICBpZiAoZWwuYXNzaWduZWRTbG90KSBlbCA9IGVsLmFzc2lnbmVkU2xvdDtcbiAgICBjb25zdCBmb3VuZCA9IGVsLmNsb3Nlc3Qoc2VsZWN0b3IpO1xuICAgIGlmICghZm91bmQgJiYgIWVsLmdldFJvb3ROb2RlKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGZvdW5kIHx8IF9fY2xvc2VzdEZyb20oZWwuZ2V0Um9vdE5vZGUoKS5ob3N0KTtcbiAgfVxuICByZXR1cm4gX19jbG9zZXN0RnJvbShiYXNlKTtcbn1cbmZ1bmN0aW9uIHByZXZlbnRFZGdlU3dpcGUoc3dpcGVyLCBldmVudCwgc3RhcnRYKSB7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBjb25zdCB7XG4gICAgcGFyYW1zXG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IGVkZ2VTd2lwZURldGVjdGlvbiA9IHBhcmFtcy5lZGdlU3dpcGVEZXRlY3Rpb247XG4gIGNvbnN0IGVkZ2VTd2lwZVRocmVzaG9sZCA9IHBhcmFtcy5lZGdlU3dpcGVUaHJlc2hvbGQ7XG4gIGlmIChlZGdlU3dpcGVEZXRlY3Rpb24gJiYgKHN0YXJ0WCA8PSBlZGdlU3dpcGVUaHJlc2hvbGQgfHwgc3RhcnRYID49IHdpbmRvdy5pbm5lcldpZHRoIC0gZWRnZVN3aXBlVGhyZXNob2xkKSkge1xuICAgIGlmIChlZGdlU3dpcGVEZXRlY3Rpb24gPT09ICdwcmV2ZW50Jykge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5mdW5jdGlvbiBvblRvdWNoU3RhcnQoZXZlbnQpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICBsZXQgZSA9IGV2ZW50O1xuICBpZiAoZS5vcmlnaW5hbEV2ZW50KSBlID0gZS5vcmlnaW5hbEV2ZW50O1xuICBjb25zdCBkYXRhID0gc3dpcGVyLnRvdWNoRXZlbnRzRGF0YTtcbiAgaWYgKGUudHlwZSA9PT0gJ3BvaW50ZXJkb3duJykge1xuICAgIGlmIChkYXRhLnBvaW50ZXJJZCAhPT0gbnVsbCAmJiBkYXRhLnBvaW50ZXJJZCAhPT0gZS5wb2ludGVySWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZGF0YS5wb2ludGVySWQgPSBlLnBvaW50ZXJJZDtcbiAgfSBlbHNlIGlmIChlLnR5cGUgPT09ICd0b3VjaHN0YXJ0JyAmJiBlLnRhcmdldFRvdWNoZXMubGVuZ3RoID09PSAxKSB7XG4gICAgZGF0YS50b3VjaElkID0gZS50YXJnZXRUb3VjaGVzWzBdLmlkZW50aWZpZXI7XG4gIH1cbiAgaWYgKGUudHlwZSA9PT0gJ3RvdWNoc3RhcnQnKSB7XG4gICAgLy8gZG9uJ3QgcHJvY2VlZCB0b3VjaCBldmVudFxuICAgIHByZXZlbnRFZGdlU3dpcGUoc3dpcGVyLCBlLCBlLnRhcmdldFRvdWNoZXNbMF0ucGFnZVgpO1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgIHRvdWNoZXMsXG4gICAgZW5hYmxlZFxuICB9ID0gc3dpcGVyO1xuICBpZiAoIWVuYWJsZWQpIHJldHVybjtcbiAgaWYgKCFwYXJhbXMuc2ltdWxhdGVUb3VjaCAmJiBlLnBvaW50ZXJUeXBlID09PSAnbW91c2UnKSByZXR1cm47XG4gIGlmIChzd2lwZXIuYW5pbWF0aW5nICYmIHBhcmFtcy5wcmV2ZW50SW50ZXJhY3Rpb25PblRyYW5zaXRpb24pIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKCFzd2lwZXIuYW5pbWF0aW5nICYmIHBhcmFtcy5jc3NNb2RlICYmIHBhcmFtcy5sb29wKSB7XG4gICAgc3dpcGVyLmxvb3BGaXgoKTtcbiAgfVxuICBsZXQgdGFyZ2V0RWwgPSBlLnRhcmdldDtcbiAgaWYgKHBhcmFtcy50b3VjaEV2ZW50c1RhcmdldCA9PT0gJ3dyYXBwZXInKSB7XG4gICAgaWYgKCFzd2lwZXIud3JhcHBlckVsLmNvbnRhaW5zKHRhcmdldEVsKSkgcmV0dXJuO1xuICB9XG4gIGlmICgnd2hpY2gnIGluIGUgJiYgZS53aGljaCA9PT0gMykgcmV0dXJuO1xuICBpZiAoJ2J1dHRvbicgaW4gZSAmJiBlLmJ1dHRvbiA+IDApIHJldHVybjtcbiAgaWYgKGRhdGEuaXNUb3VjaGVkICYmIGRhdGEuaXNNb3ZlZCkgcmV0dXJuO1xuXG4gIC8vIGNoYW5nZSB0YXJnZXQgZWwgZm9yIHNoYWRvdyByb290IGNvbXBvbmVudFxuICBjb25zdCBzd2lwaW5nQ2xhc3NIYXNWYWx1ZSA9ICEhcGFyYW1zLm5vU3dpcGluZ0NsYXNzICYmIHBhcmFtcy5ub1N3aXBpbmdDbGFzcyAhPT0gJyc7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBjb25zdCBldmVudFBhdGggPSBlLmNvbXBvc2VkUGF0aCA/IGUuY29tcG9zZWRQYXRoKCkgOiBlLnBhdGg7XG4gIGlmIChzd2lwaW5nQ2xhc3NIYXNWYWx1ZSAmJiBlLnRhcmdldCAmJiBlLnRhcmdldC5zaGFkb3dSb290ICYmIGV2ZW50UGF0aCkge1xuICAgIHRhcmdldEVsID0gZXZlbnRQYXRoWzBdO1xuICB9XG4gIGNvbnN0IG5vU3dpcGluZ1NlbGVjdG9yID0gcGFyYW1zLm5vU3dpcGluZ1NlbGVjdG9yID8gcGFyYW1zLm5vU3dpcGluZ1NlbGVjdG9yIDogYC4ke3BhcmFtcy5ub1N3aXBpbmdDbGFzc31gO1xuICBjb25zdCBpc1RhcmdldFNoYWRvdyA9ICEhKGUudGFyZ2V0ICYmIGUudGFyZ2V0LnNoYWRvd1Jvb3QpO1xuXG4gIC8vIHVzZSBjbG9zZXN0RWxlbWVudCBmb3Igc2hhZG93IHJvb3QgZWxlbWVudCB0byBnZXQgdGhlIGFjdHVhbCBjbG9zZXN0IGZvciBuZXN0ZWQgc2hhZG93IHJvb3QgZWxlbWVudFxuICBpZiAocGFyYW1zLm5vU3dpcGluZyAmJiAoaXNUYXJnZXRTaGFkb3cgPyBjbG9zZXN0RWxlbWVudChub1N3aXBpbmdTZWxlY3RvciwgdGFyZ2V0RWwpIDogdGFyZ2V0RWwuY2xvc2VzdChub1N3aXBpbmdTZWxlY3RvcikpKSB7XG4gICAgc3dpcGVyLmFsbG93Q2xpY2sgPSB0cnVlO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocGFyYW1zLnN3aXBlSGFuZGxlcikge1xuICAgIGlmICghdGFyZ2V0RWwuY2xvc2VzdChwYXJhbXMuc3dpcGVIYW5kbGVyKSkgcmV0dXJuO1xuICB9XG4gIHRvdWNoZXMuY3VycmVudFggPSBlLnBhZ2VYO1xuICB0b3VjaGVzLmN1cnJlbnRZID0gZS5wYWdlWTtcbiAgY29uc3Qgc3RhcnRYID0gdG91Y2hlcy5jdXJyZW50WDtcbiAgY29uc3Qgc3RhcnRZID0gdG91Y2hlcy5jdXJyZW50WTtcblxuICAvLyBEbyBOT1Qgc3RhcnQgaWYgaU9TIGVkZ2Ugc3dpcGUgaXMgZGV0ZWN0ZWQuIE90aGVyd2lzZSBpT1MgYXBwIGNhbm5vdCBzd2lwZS10by1nby1iYWNrIGFueW1vcmVcblxuICBpZiAoIXByZXZlbnRFZGdlU3dpcGUoc3dpcGVyLCBlLCBzdGFydFgpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIE9iamVjdC5hc3NpZ24oZGF0YSwge1xuICAgIGlzVG91Y2hlZDogdHJ1ZSxcbiAgICBpc01vdmVkOiBmYWxzZSxcbiAgICBhbGxvd1RvdWNoQ2FsbGJhY2tzOiB0cnVlLFxuICAgIGlzU2Nyb2xsaW5nOiB1bmRlZmluZWQsXG4gICAgc3RhcnRNb3Zpbmc6IHVuZGVmaW5lZFxuICB9KTtcbiAgdG91Y2hlcy5zdGFydFggPSBzdGFydFg7XG4gIHRvdWNoZXMuc3RhcnRZID0gc3RhcnRZO1xuICBkYXRhLnRvdWNoU3RhcnRUaW1lID0gbm93KCk7XG4gIHN3aXBlci5hbGxvd0NsaWNrID0gdHJ1ZTtcbiAgc3dpcGVyLnVwZGF0ZVNpemUoKTtcbiAgc3dpcGVyLnN3aXBlRGlyZWN0aW9uID0gdW5kZWZpbmVkO1xuICBpZiAocGFyYW1zLnRocmVzaG9sZCA+IDApIGRhdGEuYWxsb3dUaHJlc2hvbGRNb3ZlID0gZmFsc2U7XG4gIGxldCBwcmV2ZW50RGVmYXVsdCA9IHRydWU7XG4gIGlmICh0YXJnZXRFbC5tYXRjaGVzKGRhdGEuZm9jdXNhYmxlRWxlbWVudHMpKSB7XG4gICAgcHJldmVudERlZmF1bHQgPSBmYWxzZTtcbiAgICBpZiAodGFyZ2V0RWwubm9kZU5hbWUgPT09ICdTRUxFQ1QnKSB7XG4gICAgICBkYXRhLmlzVG91Y2hlZCA9IGZhbHNlO1xuICAgIH1cbiAgfVxuICBpZiAoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiBkb2N1bWVudC5hY3RpdmVFbGVtZW50Lm1hdGNoZXMoZGF0YS5mb2N1c2FibGVFbGVtZW50cykgJiYgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAhPT0gdGFyZ2V0RWwpIHtcbiAgICBkb2N1bWVudC5hY3RpdmVFbGVtZW50LmJsdXIoKTtcbiAgfVxuICBjb25zdCBzaG91bGRQcmV2ZW50RGVmYXVsdCA9IHByZXZlbnREZWZhdWx0ICYmIHN3aXBlci5hbGxvd1RvdWNoTW92ZSAmJiBwYXJhbXMudG91Y2hTdGFydFByZXZlbnREZWZhdWx0O1xuICBpZiAoKHBhcmFtcy50b3VjaFN0YXJ0Rm9yY2VQcmV2ZW50RGVmYXVsdCB8fCBzaG91bGRQcmV2ZW50RGVmYXVsdCkgJiYgIXRhcmdldEVsLmlzQ29udGVudEVkaXRhYmxlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICB9XG4gIGlmIChwYXJhbXMuZnJlZU1vZGUgJiYgcGFyYW1zLmZyZWVNb2RlLmVuYWJsZWQgJiYgc3dpcGVyLmZyZWVNb2RlICYmIHN3aXBlci5hbmltYXRpbmcgJiYgIXBhcmFtcy5jc3NNb2RlKSB7XG4gICAgc3dpcGVyLmZyZWVNb2RlLm9uVG91Y2hTdGFydCgpO1xuICB9XG4gIHN3aXBlci5lbWl0KCd0b3VjaFN0YXJ0JywgZSk7XG59XG5cbmZ1bmN0aW9uIG9uVG91Y2hNb3ZlKGV2ZW50KSB7XG4gIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgZGF0YSA9IHN3aXBlci50b3VjaEV2ZW50c0RhdGE7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgdG91Y2hlcyxcbiAgICBydGxUcmFuc2xhdGU6IHJ0bCxcbiAgICBlbmFibGVkXG4gIH0gPSBzd2lwZXI7XG4gIGlmICghZW5hYmxlZCkgcmV0dXJuO1xuICBpZiAoIXBhcmFtcy5zaW11bGF0ZVRvdWNoICYmIGV2ZW50LnBvaW50ZXJUeXBlID09PSAnbW91c2UnKSByZXR1cm47XG4gIGxldCBlID0gZXZlbnQ7XG4gIGlmIChlLm9yaWdpbmFsRXZlbnQpIGUgPSBlLm9yaWdpbmFsRXZlbnQ7XG4gIGlmIChlLnR5cGUgPT09ICdwb2ludGVybW92ZScpIHtcbiAgICBpZiAoZGF0YS50b3VjaElkICE9PSBudWxsKSByZXR1cm47IC8vIHJldHVybiBmcm9tIHBvaW50ZXIgaWYgd2UgdXNlIHRvdWNoXG4gICAgY29uc3QgaWQgPSBlLnBvaW50ZXJJZDtcbiAgICBpZiAoaWQgIT09IGRhdGEucG9pbnRlcklkKSByZXR1cm47XG4gIH1cbiAgbGV0IHRhcmdldFRvdWNoO1xuICBpZiAoZS50eXBlID09PSAndG91Y2htb3ZlJykge1xuICAgIHRhcmdldFRvdWNoID0gWy4uLmUuY2hhbmdlZFRvdWNoZXNdLmZpbHRlcih0ID0+IHQuaWRlbnRpZmllciA9PT0gZGF0YS50b3VjaElkKVswXTtcbiAgICBpZiAoIXRhcmdldFRvdWNoIHx8IHRhcmdldFRvdWNoLmlkZW50aWZpZXIgIT09IGRhdGEudG91Y2hJZCkgcmV0dXJuO1xuICB9IGVsc2Uge1xuICAgIHRhcmdldFRvdWNoID0gZTtcbiAgfVxuICBpZiAoIWRhdGEuaXNUb3VjaGVkKSB7XG4gICAgaWYgKGRhdGEuc3RhcnRNb3ZpbmcgJiYgZGF0YS5pc1Njcm9sbGluZykge1xuICAgICAgc3dpcGVyLmVtaXQoJ3RvdWNoTW92ZU9wcG9zaXRlJywgZSk7XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBwYWdlWCA9IHRhcmdldFRvdWNoLnBhZ2VYO1xuICBjb25zdCBwYWdlWSA9IHRhcmdldFRvdWNoLnBhZ2VZO1xuICBpZiAoZS5wcmV2ZW50ZWRCeU5lc3RlZFN3aXBlcikge1xuICAgIHRvdWNoZXMuc3RhcnRYID0gcGFnZVg7XG4gICAgdG91Y2hlcy5zdGFydFkgPSBwYWdlWTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKCFzd2lwZXIuYWxsb3dUb3VjaE1vdmUpIHtcbiAgICBpZiAoIWUudGFyZ2V0Lm1hdGNoZXMoZGF0YS5mb2N1c2FibGVFbGVtZW50cykpIHtcbiAgICAgIHN3aXBlci5hbGxvd0NsaWNrID0gZmFsc2U7XG4gICAgfVxuICAgIGlmIChkYXRhLmlzVG91Y2hlZCkge1xuICAgICAgT2JqZWN0LmFzc2lnbih0b3VjaGVzLCB7XG4gICAgICAgIHN0YXJ0WDogcGFnZVgsXG4gICAgICAgIHN0YXJ0WTogcGFnZVksXG4gICAgICAgIGN1cnJlbnRYOiBwYWdlWCxcbiAgICAgICAgY3VycmVudFk6IHBhZ2VZXG4gICAgICB9KTtcbiAgICAgIGRhdGEudG91Y2hTdGFydFRpbWUgPSBub3coKTtcbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwYXJhbXMudG91Y2hSZWxlYXNlT25FZGdlcyAmJiAhcGFyYW1zLmxvb3ApIHtcbiAgICBpZiAoc3dpcGVyLmlzVmVydGljYWwoKSkge1xuICAgICAgLy8gVmVydGljYWxcbiAgICAgIGlmIChwYWdlWSA8IHRvdWNoZXMuc3RhcnRZICYmIHN3aXBlci50cmFuc2xhdGUgPD0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpIHx8IHBhZ2VZID4gdG91Y2hlcy5zdGFydFkgJiYgc3dpcGVyLnRyYW5zbGF0ZSA+PSBzd2lwZXIubWluVHJhbnNsYXRlKCkpIHtcbiAgICAgICAgZGF0YS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICAgICAgZGF0YS5pc01vdmVkID0gZmFsc2U7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHBhZ2VYIDwgdG91Y2hlcy5zdGFydFggJiYgc3dpcGVyLnRyYW5zbGF0ZSA8PSBzd2lwZXIubWF4VHJhbnNsYXRlKCkgfHwgcGFnZVggPiB0b3VjaGVzLnN0YXJ0WCAmJiBzd2lwZXIudHJhbnNsYXRlID49IHN3aXBlci5taW5UcmFuc2xhdGUoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuICBpZiAoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkge1xuICAgIGlmIChlLnRhcmdldCA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiBlLnRhcmdldC5tYXRjaGVzKGRhdGEuZm9jdXNhYmxlRWxlbWVudHMpKSB7XG4gICAgICBkYXRhLmlzTW92ZWQgPSB0cnVlO1xuICAgICAgc3dpcGVyLmFsbG93Q2xpY2sgPSBmYWxzZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbiAgaWYgKGRhdGEuYWxsb3dUb3VjaENhbGxiYWNrcykge1xuICAgIHN3aXBlci5lbWl0KCd0b3VjaE1vdmUnLCBlKTtcbiAgfVxuICB0b3VjaGVzLnByZXZpb3VzWCA9IHRvdWNoZXMuY3VycmVudFg7XG4gIHRvdWNoZXMucHJldmlvdXNZID0gdG91Y2hlcy5jdXJyZW50WTtcbiAgdG91Y2hlcy5jdXJyZW50WCA9IHBhZ2VYO1xuICB0b3VjaGVzLmN1cnJlbnRZID0gcGFnZVk7XG4gIGNvbnN0IGRpZmZYID0gdG91Y2hlcy5jdXJyZW50WCAtIHRvdWNoZXMuc3RhcnRYO1xuICBjb25zdCBkaWZmWSA9IHRvdWNoZXMuY3VycmVudFkgLSB0b3VjaGVzLnN0YXJ0WTtcbiAgaWYgKHN3aXBlci5wYXJhbXMudGhyZXNob2xkICYmIE1hdGguc3FydChkaWZmWCAqKiAyICsgZGlmZlkgKiogMikgPCBzd2lwZXIucGFyYW1zLnRocmVzaG9sZCkgcmV0dXJuO1xuICBpZiAodHlwZW9mIGRhdGEuaXNTY3JvbGxpbmcgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgbGV0IHRvdWNoQW5nbGU7XG4gICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSAmJiB0b3VjaGVzLmN1cnJlbnRZID09PSB0b3VjaGVzLnN0YXJ0WSB8fCBzd2lwZXIuaXNWZXJ0aWNhbCgpICYmIHRvdWNoZXMuY3VycmVudFggPT09IHRvdWNoZXMuc3RhcnRYKSB7XG4gICAgICBkYXRhLmlzU2Nyb2xsaW5nID0gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgaWYgKGRpZmZYICogZGlmZlggKyBkaWZmWSAqIGRpZmZZID49IDI1KSB7XG4gICAgICAgIHRvdWNoQW5nbGUgPSBNYXRoLmF0YW4yKE1hdGguYWJzKGRpZmZZKSwgTWF0aC5hYnMoZGlmZlgpKSAqIDE4MCAvIE1hdGguUEk7XG4gICAgICAgIGRhdGEuaXNTY3JvbGxpbmcgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyB0b3VjaEFuZ2xlID4gcGFyYW1zLnRvdWNoQW5nbGUgOiA5MCAtIHRvdWNoQW5nbGUgPiBwYXJhbXMudG91Y2hBbmdsZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKGRhdGEuaXNTY3JvbGxpbmcpIHtcbiAgICBzd2lwZXIuZW1pdCgndG91Y2hNb3ZlT3Bwb3NpdGUnLCBlKTtcbiAgfVxuICBpZiAodHlwZW9mIGRhdGEuc3RhcnRNb3ZpbmcgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKHRvdWNoZXMuY3VycmVudFggIT09IHRvdWNoZXMuc3RhcnRYIHx8IHRvdWNoZXMuY3VycmVudFkgIT09IHRvdWNoZXMuc3RhcnRZKSB7XG4gICAgICBkYXRhLnN0YXJ0TW92aW5nID0gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgaWYgKGRhdGEuaXNTY3JvbGxpbmcgfHwgZS50eXBlID09PSAndG91Y2htb3ZlJyAmJiBkYXRhLnByZXZlbnRUb3VjaE1vdmVGcm9tUG9pbnRlck1vdmUpIHtcbiAgICBkYXRhLmlzVG91Y2hlZCA9IGZhbHNlO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoIWRhdGEuc3RhcnRNb3ZpbmcpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgc3dpcGVyLmFsbG93Q2xpY2sgPSBmYWxzZTtcbiAgaWYgKCFwYXJhbXMuY3NzTW9kZSAmJiBlLmNhbmNlbGFibGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gIH1cbiAgaWYgKHBhcmFtcy50b3VjaE1vdmVTdG9wUHJvcGFnYXRpb24gJiYgIXBhcmFtcy5uZXN0ZWQpIHtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICB9XG4gIGxldCBkaWZmID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gZGlmZlggOiBkaWZmWTtcbiAgbGV0IHRvdWNoZXNEaWZmID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gdG91Y2hlcy5jdXJyZW50WCAtIHRvdWNoZXMucHJldmlvdXNYIDogdG91Y2hlcy5jdXJyZW50WSAtIHRvdWNoZXMucHJldmlvdXNZO1xuICBpZiAocGFyYW1zLm9uZVdheU1vdmVtZW50KSB7XG4gICAgZGlmZiA9IE1hdGguYWJzKGRpZmYpICogKHJ0bCA/IDEgOiAtMSk7XG4gICAgdG91Y2hlc0RpZmYgPSBNYXRoLmFicyh0b3VjaGVzRGlmZikgKiAocnRsID8gMSA6IC0xKTtcbiAgfVxuICB0b3VjaGVzLmRpZmYgPSBkaWZmO1xuICBkaWZmICo9IHBhcmFtcy50b3VjaFJhdGlvO1xuICBpZiAocnRsKSB7XG4gICAgZGlmZiA9IC1kaWZmO1xuICAgIHRvdWNoZXNEaWZmID0gLXRvdWNoZXNEaWZmO1xuICB9XG4gIGNvbnN0IHByZXZUb3VjaGVzRGlyZWN0aW9uID0gc3dpcGVyLnRvdWNoZXNEaXJlY3Rpb247XG4gIHN3aXBlci5zd2lwZURpcmVjdGlvbiA9IGRpZmYgPiAwID8gJ3ByZXYnIDogJ25leHQnO1xuICBzd2lwZXIudG91Y2hlc0RpcmVjdGlvbiA9IHRvdWNoZXNEaWZmID4gMCA/ICdwcmV2JyA6ICduZXh0JztcbiAgY29uc3QgaXNMb29wID0gc3dpcGVyLnBhcmFtcy5sb29wICYmICFwYXJhbXMuY3NzTW9kZTtcbiAgY29uc3QgYWxsb3dMb29wRml4ID0gc3dpcGVyLnRvdWNoZXNEaXJlY3Rpb24gPT09ICduZXh0JyAmJiBzd2lwZXIuYWxsb3dTbGlkZU5leHQgfHwgc3dpcGVyLnRvdWNoZXNEaXJlY3Rpb24gPT09ICdwcmV2JyAmJiBzd2lwZXIuYWxsb3dTbGlkZVByZXY7XG4gIGlmICghZGF0YS5pc01vdmVkKSB7XG4gICAgaWYgKGlzTG9vcCAmJiBhbGxvd0xvb3BGaXgpIHtcbiAgICAgIHN3aXBlci5sb29wRml4KHtcbiAgICAgICAgZGlyZWN0aW9uOiBzd2lwZXIuc3dpcGVEaXJlY3Rpb25cbiAgICAgIH0pO1xuICAgIH1cbiAgICBkYXRhLnN0YXJ0VHJhbnNsYXRlID0gc3dpcGVyLmdldFRyYW5zbGF0ZSgpO1xuICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKDApO1xuICAgIGlmIChzd2lwZXIuYW5pbWF0aW5nKSB7XG4gICAgICBjb25zdCBldnQgPSBuZXcgd2luZG93LkN1c3RvbUV2ZW50KCd0cmFuc2l0aW9uZW5kJywge1xuICAgICAgICBidWJibGVzOiB0cnVlLFxuICAgICAgICBjYW5jZWxhYmxlOiB0cnVlLFxuICAgICAgICBkZXRhaWw6IHtcbiAgICAgICAgICBieVN3aXBlclRvdWNoTW92ZTogdHJ1ZVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHN3aXBlci53cmFwcGVyRWwuZGlzcGF0Y2hFdmVudChldnQpO1xuICAgIH1cbiAgICBkYXRhLmFsbG93TW9tZW50dW1Cb3VuY2UgPSBmYWxzZTtcbiAgICAvLyBHcmFiIEN1cnNvclxuICAgIGlmIChwYXJhbXMuZ3JhYkN1cnNvciAmJiAoc3dpcGVyLmFsbG93U2xpZGVOZXh0ID09PSB0cnVlIHx8IHN3aXBlci5hbGxvd1NsaWRlUHJldiA9PT0gdHJ1ZSkpIHtcbiAgICAgIHN3aXBlci5zZXRHcmFiQ3Vyc29yKHRydWUpO1xuICAgIH1cbiAgICBzd2lwZXIuZW1pdCgnc2xpZGVyRmlyc3RNb3ZlJywgZSk7XG4gIH1cbiAgbGV0IGxvb3BGaXhlZDtcbiAgbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gIGlmIChkYXRhLmlzTW92ZWQgJiYgZGF0YS5hbGxvd1RocmVzaG9sZE1vdmUgJiYgcHJldlRvdWNoZXNEaXJlY3Rpb24gIT09IHN3aXBlci50b3VjaGVzRGlyZWN0aW9uICYmIGlzTG9vcCAmJiBhbGxvd0xvb3BGaXggJiYgTWF0aC5hYnMoZGlmZikgPj0gMSkge1xuICAgIE9iamVjdC5hc3NpZ24odG91Y2hlcywge1xuICAgICAgc3RhcnRYOiBwYWdlWCxcbiAgICAgIHN0YXJ0WTogcGFnZVksXG4gICAgICBjdXJyZW50WDogcGFnZVgsXG4gICAgICBjdXJyZW50WTogcGFnZVksXG4gICAgICBzdGFydFRyYW5zbGF0ZTogZGF0YS5jdXJyZW50VHJhbnNsYXRlXG4gICAgfSk7XG4gICAgZGF0YS5sb29wU3dhcFJlc2V0ID0gdHJ1ZTtcbiAgICBkYXRhLnN0YXJ0VHJhbnNsYXRlID0gZGF0YS5jdXJyZW50VHJhbnNsYXRlO1xuICAgIHJldHVybjtcbiAgfVxuICBzd2lwZXIuZW1pdCgnc2xpZGVyTW92ZScsIGUpO1xuICBkYXRhLmlzTW92ZWQgPSB0cnVlO1xuICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBkaWZmICsgZGF0YS5zdGFydFRyYW5zbGF0ZTtcbiAgbGV0IGRpc2FibGVQYXJlbnRTd2lwZXIgPSB0cnVlO1xuICBsZXQgcmVzaXN0YW5jZVJhdGlvID0gcGFyYW1zLnJlc2lzdGFuY2VSYXRpbztcbiAgaWYgKHBhcmFtcy50b3VjaFJlbGVhc2VPbkVkZ2VzKSB7XG4gICAgcmVzaXN0YW5jZVJhdGlvID0gMDtcbiAgfVxuICBpZiAoZGlmZiA+IDApIHtcbiAgICBpZiAoaXNMb29wICYmIGFsbG93TG9vcEZpeCAmJiAhbG9vcEZpeGVkICYmIGRhdGEuYWxsb3dUaHJlc2hvbGRNb3ZlICYmIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA+IChwYXJhbXMuY2VudGVyZWRTbGlkZXMgPyBzd2lwZXIubWluVHJhbnNsYXRlKCkgLSBzd2lwZXIuc2xpZGVzU2l6ZXNHcmlkW3N3aXBlci5hY3RpdmVJbmRleCArIDFdIDogc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSkge1xuICAgICAgc3dpcGVyLmxvb3BGaXgoe1xuICAgICAgICBkaXJlY3Rpb246ICdwcmV2JyxcbiAgICAgICAgc2V0VHJhbnNsYXRlOiB0cnVlLFxuICAgICAgICBhY3RpdmVTbGlkZUluZGV4OiAwXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGRhdGEuY3VycmVudFRyYW5zbGF0ZSA+IHN3aXBlci5taW5UcmFuc2xhdGUoKSkge1xuICAgICAgZGlzYWJsZVBhcmVudFN3aXBlciA9IGZhbHNlO1xuICAgICAgaWYgKHBhcmFtcy5yZXNpc3RhbmNlKSB7XG4gICAgICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IHN3aXBlci5taW5UcmFuc2xhdGUoKSAtIDEgKyAoLXN3aXBlci5taW5UcmFuc2xhdGUoKSArIGRhdGEuc3RhcnRUcmFuc2xhdGUgKyBkaWZmKSAqKiByZXNpc3RhbmNlUmF0aW87XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKGRpZmYgPCAwKSB7XG4gICAgaWYgKGlzTG9vcCAmJiBhbGxvd0xvb3BGaXggJiYgIWxvb3BGaXhlZCAmJiBkYXRhLmFsbG93VGhyZXNob2xkTW92ZSAmJiBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPCAocGFyYW1zLmNlbnRlcmVkU2xpZGVzID8gc3dpcGVyLm1heFRyYW5zbGF0ZSgpICsgc3dpcGVyLnNsaWRlc1NpemVzR3JpZFtzd2lwZXIuc2xpZGVzU2l6ZXNHcmlkLmxlbmd0aCAtIDFdIDogc3dpcGVyLm1heFRyYW5zbGF0ZSgpKSkge1xuICAgICAgc3dpcGVyLmxvb3BGaXgoe1xuICAgICAgICBkaXJlY3Rpb246ICduZXh0JyxcbiAgICAgICAgc2V0VHJhbnNsYXRlOiB0cnVlLFxuICAgICAgICBhY3RpdmVTbGlkZUluZGV4OiBzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIChwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nID8gc3dpcGVyLnNsaWRlc1BlclZpZXdEeW5hbWljKCkgOiBNYXRoLmNlaWwocGFyc2VGbG9hdChwYXJhbXMuc2xpZGVzUGVyVmlldywgMTApKSlcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoZGF0YS5jdXJyZW50VHJhbnNsYXRlIDwgc3dpcGVyLm1heFRyYW5zbGF0ZSgpKSB7XG4gICAgICBkaXNhYmxlUGFyZW50U3dpcGVyID0gZmFsc2U7XG4gICAgICBpZiAocGFyYW1zLnJlc2lzdGFuY2UpIHtcbiAgICAgICAgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpICsgMSAtIChzd2lwZXIubWF4VHJhbnNsYXRlKCkgLSBkYXRhLnN0YXJ0VHJhbnNsYXRlIC0gZGlmZikgKiogcmVzaXN0YW5jZVJhdGlvO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoZGlzYWJsZVBhcmVudFN3aXBlcikge1xuICAgIGUucHJldmVudGVkQnlOZXN0ZWRTd2lwZXIgPSB0cnVlO1xuICB9XG5cbiAgLy8gRGlyZWN0aW9ucyBsb2Nrc1xuICBpZiAoIXN3aXBlci5hbGxvd1NsaWRlTmV4dCAmJiBzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPT09ICduZXh0JyAmJiBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPCBkYXRhLnN0YXJ0VHJhbnNsYXRlKSB7XG4gICAgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gZGF0YS5zdGFydFRyYW5zbGF0ZTtcbiAgfVxuICBpZiAoIXN3aXBlci5hbGxvd1NsaWRlUHJldiAmJiBzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPT09ICdwcmV2JyAmJiBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPiBkYXRhLnN0YXJ0VHJhbnNsYXRlKSB7XG4gICAgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gZGF0YS5zdGFydFRyYW5zbGF0ZTtcbiAgfVxuICBpZiAoIXN3aXBlci5hbGxvd1NsaWRlUHJldiAmJiAhc3dpcGVyLmFsbG93U2xpZGVOZXh0KSB7XG4gICAgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gZGF0YS5zdGFydFRyYW5zbGF0ZTtcbiAgfVxuXG4gIC8vIFRocmVzaG9sZFxuICBpZiAocGFyYW1zLnRocmVzaG9sZCA+IDApIHtcbiAgICBpZiAoTWF0aC5hYnMoZGlmZikgPiBwYXJhbXMudGhyZXNob2xkIHx8IGRhdGEuYWxsb3dUaHJlc2hvbGRNb3ZlKSB7XG4gICAgICBpZiAoIWRhdGEuYWxsb3dUaHJlc2hvbGRNb3ZlKSB7XG4gICAgICAgIGRhdGEuYWxsb3dUaHJlc2hvbGRNb3ZlID0gdHJ1ZTtcbiAgICAgICAgdG91Y2hlcy5zdGFydFggPSB0b3VjaGVzLmN1cnJlbnRYO1xuICAgICAgICB0b3VjaGVzLnN0YXJ0WSA9IHRvdWNoZXMuY3VycmVudFk7XG4gICAgICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gICAgICAgIHRvdWNoZXMuZGlmZiA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHRvdWNoZXMuY3VycmVudFggLSB0b3VjaGVzLnN0YXJ0WCA6IHRvdWNoZXMuY3VycmVudFkgLSB0b3VjaGVzLnN0YXJ0WTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBkYXRhLnN0YXJ0VHJhbnNsYXRlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuICBpZiAoIXBhcmFtcy5mb2xsb3dGaW5nZXIgfHwgcGFyYW1zLmNzc01vZGUpIHJldHVybjtcblxuICAvLyBVcGRhdGUgYWN0aXZlIGluZGV4IGluIGZyZWUgbW9kZVxuICBpZiAocGFyYW1zLmZyZWVNb2RlICYmIHBhcmFtcy5mcmVlTW9kZS5lbmFibGVkICYmIHN3aXBlci5mcmVlTW9kZSB8fCBwYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcykge1xuICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gIH1cbiAgaWYgKHBhcmFtcy5mcmVlTW9kZSAmJiBwYXJhbXMuZnJlZU1vZGUuZW5hYmxlZCAmJiBzd2lwZXIuZnJlZU1vZGUpIHtcbiAgICBzd2lwZXIuZnJlZU1vZGUub25Ub3VjaE1vdmUoKTtcbiAgfVxuICAvLyBVcGRhdGUgcHJvZ3Jlc3NcbiAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKGRhdGEuY3VycmVudFRyYW5zbGF0ZSk7XG4gIC8vIFVwZGF0ZSB0cmFuc2xhdGVcbiAgc3dpcGVyLnNldFRyYW5zbGF0ZShkYXRhLmN1cnJlbnRUcmFuc2xhdGUpO1xufVxuXG5mdW5jdGlvbiBvblRvdWNoRW5kKGV2ZW50KSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IGRhdGEgPSBzd2lwZXIudG91Y2hFdmVudHNEYXRhO1xuICBsZXQgZSA9IGV2ZW50O1xuICBpZiAoZS5vcmlnaW5hbEV2ZW50KSBlID0gZS5vcmlnaW5hbEV2ZW50O1xuICBsZXQgdGFyZ2V0VG91Y2g7XG4gIGNvbnN0IGlzVG91Y2hFdmVudCA9IGUudHlwZSA9PT0gJ3RvdWNoZW5kJyB8fCBlLnR5cGUgPT09ICd0b3VjaGNhbmNlbCc7XG4gIGlmICghaXNUb3VjaEV2ZW50KSB7XG4gICAgaWYgKGRhdGEudG91Y2hJZCAhPT0gbnVsbCkgcmV0dXJuOyAvLyByZXR1cm4gZnJvbSBwb2ludGVyIGlmIHdlIHVzZSB0b3VjaFxuICAgIGlmIChlLnBvaW50ZXJJZCAhPT0gZGF0YS5wb2ludGVySWQpIHJldHVybjtcbiAgICB0YXJnZXRUb3VjaCA9IGU7XG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0VG91Y2ggPSBbLi4uZS5jaGFuZ2VkVG91Y2hlc10uZmlsdGVyKHQgPT4gdC5pZGVudGlmaWVyID09PSBkYXRhLnRvdWNoSWQpWzBdO1xuICAgIGlmICghdGFyZ2V0VG91Y2ggfHwgdGFyZ2V0VG91Y2guaWRlbnRpZmllciAhPT0gZGF0YS50b3VjaElkKSByZXR1cm47XG4gIH1cbiAgaWYgKFsncG9pbnRlcmNhbmNlbCcsICdwb2ludGVyb3V0JywgJ3BvaW50ZXJsZWF2ZScsICdjb250ZXh0bWVudSddLmluY2x1ZGVzKGUudHlwZSkpIHtcbiAgICBjb25zdCBwcm9jZWVkID0gWydwb2ludGVyY2FuY2VsJywgJ2NvbnRleHRtZW51J10uaW5jbHVkZXMoZS50eXBlKSAmJiAoc3dpcGVyLmJyb3dzZXIuaXNTYWZhcmkgfHwgc3dpcGVyLmJyb3dzZXIuaXNXZWJWaWV3KTtcbiAgICBpZiAoIXByb2NlZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbiAgZGF0YS5wb2ludGVySWQgPSBudWxsO1xuICBkYXRhLnRvdWNoSWQgPSBudWxsO1xuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgIHRvdWNoZXMsXG4gICAgcnRsVHJhbnNsYXRlOiBydGwsXG4gICAgc2xpZGVzR3JpZCxcbiAgICBlbmFibGVkXG4gIH0gPSBzd2lwZXI7XG4gIGlmICghZW5hYmxlZCkgcmV0dXJuO1xuICBpZiAoIXBhcmFtcy5zaW11bGF0ZVRvdWNoICYmIGUucG9pbnRlclR5cGUgPT09ICdtb3VzZScpIHJldHVybjtcbiAgaWYgKGRhdGEuYWxsb3dUb3VjaENhbGxiYWNrcykge1xuICAgIHN3aXBlci5lbWl0KCd0b3VjaEVuZCcsIGUpO1xuICB9XG4gIGRhdGEuYWxsb3dUb3VjaENhbGxiYWNrcyA9IGZhbHNlO1xuICBpZiAoIWRhdGEuaXNUb3VjaGVkKSB7XG4gICAgaWYgKGRhdGEuaXNNb3ZlZCAmJiBwYXJhbXMuZ3JhYkN1cnNvcikge1xuICAgICAgc3dpcGVyLnNldEdyYWJDdXJzb3IoZmFsc2UpO1xuICAgIH1cbiAgICBkYXRhLmlzTW92ZWQgPSBmYWxzZTtcbiAgICBkYXRhLnN0YXJ0TW92aW5nID0gZmFsc2U7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gUmV0dXJuIEdyYWIgQ3Vyc29yXG4gIGlmIChwYXJhbXMuZ3JhYkN1cnNvciAmJiBkYXRhLmlzTW92ZWQgJiYgZGF0YS5pc1RvdWNoZWQgJiYgKHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9PT0gdHJ1ZSB8fCBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPT09IHRydWUpKSB7XG4gICAgc3dpcGVyLnNldEdyYWJDdXJzb3IoZmFsc2UpO1xuICB9XG5cbiAgLy8gVGltZSBkaWZmXG4gIGNvbnN0IHRvdWNoRW5kVGltZSA9IG5vdygpO1xuICBjb25zdCB0aW1lRGlmZiA9IHRvdWNoRW5kVGltZSAtIGRhdGEudG91Y2hTdGFydFRpbWU7XG5cbiAgLy8gVGFwLCBkb3VibGVUYXAsIENsaWNrXG4gIGlmIChzd2lwZXIuYWxsb3dDbGljaykge1xuICAgIGNvbnN0IHBhdGhUcmVlID0gZS5wYXRoIHx8IGUuY29tcG9zZWRQYXRoICYmIGUuY29tcG9zZWRQYXRoKCk7XG4gICAgc3dpcGVyLnVwZGF0ZUNsaWNrZWRTbGlkZShwYXRoVHJlZSAmJiBwYXRoVHJlZVswXSB8fCBlLnRhcmdldCwgcGF0aFRyZWUpO1xuICAgIHN3aXBlci5lbWl0KCd0YXAgY2xpY2snLCBlKTtcbiAgICBpZiAodGltZURpZmYgPCAzMDAgJiYgdG91Y2hFbmRUaW1lIC0gZGF0YS5sYXN0Q2xpY2tUaW1lIDwgMzAwKSB7XG4gICAgICBzd2lwZXIuZW1pdCgnZG91YmxlVGFwIGRvdWJsZUNsaWNrJywgZSk7XG4gICAgfVxuICB9XG4gIGRhdGEubGFzdENsaWNrVGltZSA9IG5vdygpO1xuICBuZXh0VGljaygoKSA9PiB7XG4gICAgaWYgKCFzd2lwZXIuZGVzdHJveWVkKSBzd2lwZXIuYWxsb3dDbGljayA9IHRydWU7XG4gIH0pO1xuICBpZiAoIWRhdGEuaXNUb3VjaGVkIHx8ICFkYXRhLmlzTW92ZWQgfHwgIXN3aXBlci5zd2lwZURpcmVjdGlvbiB8fCB0b3VjaGVzLmRpZmYgPT09IDAgJiYgIWRhdGEubG9vcFN3YXBSZXNldCB8fCBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPT09IGRhdGEuc3RhcnRUcmFuc2xhdGUgJiYgIWRhdGEubG9vcFN3YXBSZXNldCkge1xuICAgIGRhdGEuaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgZGF0YS5pc01vdmVkID0gZmFsc2U7XG4gICAgZGF0YS5zdGFydE1vdmluZyA9IGZhbHNlO1xuICAgIHJldHVybjtcbiAgfVxuICBkYXRhLmlzVG91Y2hlZCA9IGZhbHNlO1xuICBkYXRhLmlzTW92ZWQgPSBmYWxzZTtcbiAgZGF0YS5zdGFydE1vdmluZyA9IGZhbHNlO1xuICBsZXQgY3VycmVudFBvcztcbiAgaWYgKHBhcmFtcy5mb2xsb3dGaW5nZXIpIHtcbiAgICBjdXJyZW50UG9zID0gcnRsID8gc3dpcGVyLnRyYW5zbGF0ZSA6IC1zd2lwZXIudHJhbnNsYXRlO1xuICB9IGVsc2Uge1xuICAgIGN1cnJlbnRQb3MgPSAtZGF0YS5jdXJyZW50VHJhbnNsYXRlO1xuICB9XG4gIGlmIChwYXJhbXMuY3NzTW9kZSkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocGFyYW1zLmZyZWVNb2RlICYmIHBhcmFtcy5mcmVlTW9kZS5lbmFibGVkKSB7XG4gICAgc3dpcGVyLmZyZWVNb2RlLm9uVG91Y2hFbmQoe1xuICAgICAgY3VycmVudFBvc1xuICAgIH0pO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEZpbmQgY3VycmVudCBzbGlkZVxuICBjb25zdCBzd2lwZVRvTGFzdCA9IGN1cnJlbnRQb3MgPj0gLXN3aXBlci5tYXhUcmFuc2xhdGUoKSAmJiAhc3dpcGVyLnBhcmFtcy5sb29wO1xuICBsZXQgc3RvcEluZGV4ID0gMDtcbiAgbGV0IGdyb3VwU2l6ZSA9IHN3aXBlci5zbGlkZXNTaXplc0dyaWRbMF07XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzR3JpZC5sZW5ndGg7IGkgKz0gaSA8IHBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAgPyAxIDogcGFyYW1zLnNsaWRlc1Blckdyb3VwKSB7XG4gICAgY29uc3QgaW5jcmVtZW50ID0gaSA8IHBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAgLSAxID8gMSA6IHBhcmFtcy5zbGlkZXNQZXJHcm91cDtcbiAgICBpZiAodHlwZW9mIHNsaWRlc0dyaWRbaSArIGluY3JlbWVudF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBpZiAoc3dpcGVUb0xhc3QgfHwgY3VycmVudFBvcyA+PSBzbGlkZXNHcmlkW2ldICYmIGN1cnJlbnRQb3MgPCBzbGlkZXNHcmlkW2kgKyBpbmNyZW1lbnRdKSB7XG4gICAgICAgIHN0b3BJbmRleCA9IGk7XG4gICAgICAgIGdyb3VwU2l6ZSA9IHNsaWRlc0dyaWRbaSArIGluY3JlbWVudF0gLSBzbGlkZXNHcmlkW2ldO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoc3dpcGVUb0xhc3QgfHwgY3VycmVudFBvcyA+PSBzbGlkZXNHcmlkW2ldKSB7XG4gICAgICBzdG9wSW5kZXggPSBpO1xuICAgICAgZ3JvdXBTaXplID0gc2xpZGVzR3JpZFtzbGlkZXNHcmlkLmxlbmd0aCAtIDFdIC0gc2xpZGVzR3JpZFtzbGlkZXNHcmlkLmxlbmd0aCAtIDJdO1xuICAgIH1cbiAgfVxuICBsZXQgcmV3aW5kRmlyc3RJbmRleCA9IG51bGw7XG4gIGxldCByZXdpbmRMYXN0SW5kZXggPSBudWxsO1xuICBpZiAocGFyYW1zLnJld2luZCkge1xuICAgIGlmIChzd2lwZXIuaXNCZWdpbm5pbmcpIHtcbiAgICAgIHJld2luZExhc3RJbmRleCA9IHBhcmFtcy52aXJ0dWFsICYmIHBhcmFtcy52aXJ0dWFsLmVuYWJsZWQgJiYgc3dpcGVyLnZpcnR1YWwgPyBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoIC0gMSA6IHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gMTtcbiAgICB9IGVsc2UgaWYgKHN3aXBlci5pc0VuZCkge1xuICAgICAgcmV3aW5kRmlyc3RJbmRleCA9IDA7XG4gICAgfVxuICB9XG4gIC8vIEZpbmQgY3VycmVudCBzbGlkZSBzaXplXG4gIGNvbnN0IHJhdGlvID0gKGN1cnJlbnRQb3MgLSBzbGlkZXNHcmlkW3N0b3BJbmRleF0pIC8gZ3JvdXBTaXplO1xuICBjb25zdCBpbmNyZW1lbnQgPSBzdG9wSW5kZXggPCBwYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwIC0gMSA/IDEgOiBwYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG4gIGlmICh0aW1lRGlmZiA+IHBhcmFtcy5sb25nU3dpcGVzTXMpIHtcbiAgICAvLyBMb25nIHRvdWNoZXNcbiAgICBpZiAoIXBhcmFtcy5sb25nU3dpcGVzKSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAnbmV4dCcpIHtcbiAgICAgIGlmIChyYXRpbyA+PSBwYXJhbXMubG9uZ1N3aXBlc1JhdGlvKSBzd2lwZXIuc2xpZGVUbyhwYXJhbXMucmV3aW5kICYmIHN3aXBlci5pc0VuZCA/IHJld2luZEZpcnN0SW5kZXggOiBzdG9wSW5kZXggKyBpbmNyZW1lbnQpO2Vsc2Ugc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4KTtcbiAgICB9XG4gICAgaWYgKHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ3ByZXYnKSB7XG4gICAgICBpZiAocmF0aW8gPiAxIC0gcGFyYW1zLmxvbmdTd2lwZXNSYXRpbykge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXggKyBpbmNyZW1lbnQpO1xuICAgICAgfSBlbHNlIGlmIChyZXdpbmRMYXN0SW5kZXggIT09IG51bGwgJiYgcmF0aW8gPCAwICYmIE1hdGguYWJzKHJhdGlvKSA+IHBhcmFtcy5sb25nU3dpcGVzUmF0aW8pIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8ocmV3aW5kTGFzdEluZGV4KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHN0b3BJbmRleCk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIFNob3J0IHN3aXBlc1xuICAgIGlmICghcGFyYW1zLnNob3J0U3dpcGVzKSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBpc05hdkJ1dHRvblRhcmdldCA9IHN3aXBlci5uYXZpZ2F0aW9uICYmIChlLnRhcmdldCA9PT0gc3dpcGVyLm5hdmlnYXRpb24ubmV4dEVsIHx8IGUudGFyZ2V0ID09PSBzd2lwZXIubmF2aWdhdGlvbi5wcmV2RWwpO1xuICAgIGlmICghaXNOYXZCdXR0b25UYXJnZXQpIHtcbiAgICAgIGlmIChzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPT09ICduZXh0Jykge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhyZXdpbmRGaXJzdEluZGV4ICE9PSBudWxsID8gcmV3aW5kRmlyc3RJbmRleCA6IHN0b3BJbmRleCArIGluY3JlbWVudCk7XG4gICAgICB9XG4gICAgICBpZiAoc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAncHJldicpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8ocmV3aW5kTGFzdEluZGV4ICE9PSBudWxsID8gcmV3aW5kTGFzdEluZGV4IDogc3RvcEluZGV4KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGUudGFyZ2V0ID09PSBzd2lwZXIubmF2aWdhdGlvbi5uZXh0RWwpIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHN0b3BJbmRleCArIGluY3JlbWVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHN0b3BJbmRleCk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIG9uUmVzaXplKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgIGVsXG4gIH0gPSBzd2lwZXI7XG4gIGlmIChlbCAmJiBlbC5vZmZzZXRXaWR0aCA9PT0gMCkgcmV0dXJuO1xuXG4gIC8vIEJyZWFrcG9pbnRzXG4gIGlmIChwYXJhbXMuYnJlYWtwb2ludHMpIHtcbiAgICBzd2lwZXIuc2V0QnJlYWtwb2ludCgpO1xuICB9XG5cbiAgLy8gU2F2ZSBsb2Nrc1xuICBjb25zdCB7XG4gICAgYWxsb3dTbGlkZU5leHQsXG4gICAgYWxsb3dTbGlkZVByZXYsXG4gICAgc25hcEdyaWRcbiAgfSA9IHN3aXBlcjtcbiAgY29uc3QgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG5cbiAgLy8gRGlzYWJsZSBsb2NrcyBvbiByZXNpemVcbiAgc3dpcGVyLmFsbG93U2xpZGVOZXh0ID0gdHJ1ZTtcbiAgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID0gdHJ1ZTtcbiAgc3dpcGVyLnVwZGF0ZVNpemUoKTtcbiAgc3dpcGVyLnVwZGF0ZVNsaWRlcygpO1xuICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICBjb25zdCBpc1ZpcnR1YWxMb29wID0gaXNWaXJ0dWFsICYmIHBhcmFtcy5sb29wO1xuICBpZiAoKHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgfHwgcGFyYW1zLnNsaWRlc1BlclZpZXcgPiAxKSAmJiBzd2lwZXIuaXNFbmQgJiYgIXN3aXBlci5pc0JlZ2lubmluZyAmJiAhc3dpcGVyLnBhcmFtcy5jZW50ZXJlZFNsaWRlcyAmJiAhaXNWaXJ0dWFsTG9vcCkge1xuICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gMSwgMCwgZmFsc2UsIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3AgJiYgIWlzVmlydHVhbCkge1xuICAgICAgc3dpcGVyLnNsaWRlVG9Mb29wKHN3aXBlci5yZWFsSW5kZXgsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4LCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgfVxuICB9XG4gIGlmIChzd2lwZXIuYXV0b3BsYXkgJiYgc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcgJiYgc3dpcGVyLmF1dG9wbGF5LnBhdXNlZCkge1xuICAgIGNsZWFyVGltZW91dChzd2lwZXIuYXV0b3BsYXkucmVzaXplVGltZW91dCk7XG4gICAgc3dpcGVyLmF1dG9wbGF5LnJlc2l6ZVRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGlmIChzd2lwZXIuYXV0b3BsYXkgJiYgc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcgJiYgc3dpcGVyLmF1dG9wbGF5LnBhdXNlZCkge1xuICAgICAgICBzd2lwZXIuYXV0b3BsYXkucmVzdW1lKCk7XG4gICAgICB9XG4gICAgfSwgNTAwKTtcbiAgfVxuICAvLyBSZXR1cm4gbG9ja3MgYWZ0ZXIgcmVzaXplXG4gIHN3aXBlci5hbGxvd1NsaWRlUHJldiA9IGFsbG93U2xpZGVQcmV2O1xuICBzd2lwZXIuYWxsb3dTbGlkZU5leHQgPSBhbGxvd1NsaWRlTmV4dDtcbiAgaWYgKHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzbmFwR3JpZCAhPT0gc3dpcGVyLnNuYXBHcmlkKSB7XG4gICAgc3dpcGVyLmNoZWNrT3ZlcmZsb3coKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBvbkNsaWNrKGUpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgaWYgKCFzd2lwZXIuZW5hYmxlZCkgcmV0dXJuO1xuICBpZiAoIXN3aXBlci5hbGxvd0NsaWNrKSB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMucHJldmVudENsaWNrcykgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLnByZXZlbnRDbGlja3NQcm9wYWdhdGlvbiAmJiBzd2lwZXIuYW5pbWF0aW5nKSB7XG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gb25TY3JvbGwoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICB3cmFwcGVyRWwsXG4gICAgcnRsVHJhbnNsYXRlLFxuICAgIGVuYWJsZWRcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKCFlbmFibGVkKSByZXR1cm47XG4gIHN3aXBlci5wcmV2aW91c1RyYW5zbGF0ZSA9IHN3aXBlci50cmFuc2xhdGU7XG4gIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICBzd2lwZXIudHJhbnNsYXRlID0gLXdyYXBwZXJFbC5zY3JvbGxMZWZ0O1xuICB9IGVsc2Uge1xuICAgIHN3aXBlci50cmFuc2xhdGUgPSAtd3JhcHBlckVsLnNjcm9sbFRvcDtcbiAgfVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgaWYgKHN3aXBlci50cmFuc2xhdGUgPT09IDApIHN3aXBlci50cmFuc2xhdGUgPSAwO1xuICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgbGV0IG5ld1Byb2dyZXNzO1xuICBjb25zdCB0cmFuc2xhdGVzRGlmZiA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKTtcbiAgaWYgKHRyYW5zbGF0ZXNEaWZmID09PSAwKSB7XG4gICAgbmV3UHJvZ3Jlc3MgPSAwO1xuICB9IGVsc2Uge1xuICAgIG5ld1Byb2dyZXNzID0gKHN3aXBlci50cmFuc2xhdGUgLSBzd2lwZXIubWluVHJhbnNsYXRlKCkpIC8gdHJhbnNsYXRlc0RpZmY7XG4gIH1cbiAgaWYgKG5ld1Byb2dyZXNzICE9PSBzd2lwZXIucHJvZ3Jlc3MpIHtcbiAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MocnRsVHJhbnNsYXRlID8gLXN3aXBlci50cmFuc2xhdGUgOiBzd2lwZXIudHJhbnNsYXRlKTtcbiAgfVxuICBzd2lwZXIuZW1pdCgnc2V0VHJhbnNsYXRlJywgc3dpcGVyLnRyYW5zbGF0ZSwgZmFsc2UpO1xufVxuXG5mdW5jdGlvbiBvbkxvYWQoZSkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBwcm9jZXNzTGF6eVByZWxvYWRlcihzd2lwZXIsIGUudGFyZ2V0KTtcbiAgaWYgKHN3aXBlci5wYXJhbXMuY3NzTW9kZSB8fCBzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcgIT09ICdhdXRvJyAmJiAhc3dpcGVyLnBhcmFtcy5hdXRvSGVpZ2h0KSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHN3aXBlci51cGRhdGUoKTtcbn1cblxuZnVuY3Rpb24gb25Eb2N1bWVudFRvdWNoU3RhcnQoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGlmIChzd2lwZXIuZG9jdW1lbnRUb3VjaEhhbmRsZXJQcm9jZWVkZWQpIHJldHVybjtcbiAgc3dpcGVyLmRvY3VtZW50VG91Y2hIYW5kbGVyUHJvY2VlZGVkID0gdHJ1ZTtcbiAgaWYgKHN3aXBlci5wYXJhbXMudG91Y2hSZWxlYXNlT25FZGdlcykge1xuICAgIHN3aXBlci5lbC5zdHlsZS50b3VjaEFjdGlvbiA9ICdhdXRvJztcbiAgfVxufVxuXG5jb25zdCBldmVudHMgPSAoc3dpcGVyLCBtZXRob2QpID0+IHtcbiAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgIGVsLFxuICAgIHdyYXBwZXJFbCxcbiAgICBkZXZpY2VcbiAgfSA9IHN3aXBlcjtcbiAgY29uc3QgY2FwdHVyZSA9ICEhcGFyYW1zLm5lc3RlZDtcbiAgY29uc3QgZG9tTWV0aG9kID0gbWV0aG9kID09PSAnb24nID8gJ2FkZEV2ZW50TGlzdGVuZXInIDogJ3JlbW92ZUV2ZW50TGlzdGVuZXInO1xuICBjb25zdCBzd2lwZXJNZXRob2QgPSBtZXRob2Q7XG4gIGlmICghZWwgfHwgdHlwZW9mIGVsID09PSAnc3RyaW5nJykgcmV0dXJuO1xuXG4gIC8vIFRvdWNoIEV2ZW50c1xuICBkb2N1bWVudFtkb21NZXRob2RdKCd0b3VjaHN0YXJ0Jywgc3dpcGVyLm9uRG9jdW1lbnRUb3VjaFN0YXJ0LCB7XG4gICAgcGFzc2l2ZTogZmFsc2UsXG4gICAgY2FwdHVyZVxuICB9KTtcbiAgZWxbZG9tTWV0aG9kXSgndG91Y2hzdGFydCcsIHN3aXBlci5vblRvdWNoU3RhcnQsIHtcbiAgICBwYXNzaXZlOiBmYWxzZVxuICB9KTtcbiAgZWxbZG9tTWV0aG9kXSgncG9pbnRlcmRvd24nLCBzd2lwZXIub25Ub3VjaFN0YXJ0LCB7XG4gICAgcGFzc2l2ZTogZmFsc2VcbiAgfSk7XG4gIGRvY3VtZW50W2RvbU1ldGhvZF0oJ3RvdWNobW92ZScsIHN3aXBlci5vblRvdWNoTW92ZSwge1xuICAgIHBhc3NpdmU6IGZhbHNlLFxuICAgIGNhcHR1cmVcbiAgfSk7XG4gIGRvY3VtZW50W2RvbU1ldGhvZF0oJ3BvaW50ZXJtb3ZlJywgc3dpcGVyLm9uVG91Y2hNb3ZlLCB7XG4gICAgcGFzc2l2ZTogZmFsc2UsXG4gICAgY2FwdHVyZVxuICB9KTtcbiAgZG9jdW1lbnRbZG9tTWV0aG9kXSgndG91Y2hlbmQnLCBzd2lwZXIub25Ub3VjaEVuZCwge1xuICAgIHBhc3NpdmU6IHRydWVcbiAgfSk7XG4gIGRvY3VtZW50W2RvbU1ldGhvZF0oJ3BvaW50ZXJ1cCcsIHN3aXBlci5vblRvdWNoRW5kLCB7XG4gICAgcGFzc2l2ZTogdHJ1ZVxuICB9KTtcbiAgZG9jdW1lbnRbZG9tTWV0aG9kXSgncG9pbnRlcmNhbmNlbCcsIHN3aXBlci5vblRvdWNoRW5kLCB7XG4gICAgcGFzc2l2ZTogdHJ1ZVxuICB9KTtcbiAgZG9jdW1lbnRbZG9tTWV0aG9kXSgndG91Y2hjYW5jZWwnLCBzd2lwZXIub25Ub3VjaEVuZCwge1xuICAgIHBhc3NpdmU6IHRydWVcbiAgfSk7XG4gIGRvY3VtZW50W2RvbU1ldGhvZF0oJ3BvaW50ZXJvdXQnLCBzd2lwZXIub25Ub3VjaEVuZCwge1xuICAgIHBhc3NpdmU6IHRydWVcbiAgfSk7XG4gIGRvY3VtZW50W2RvbU1ldGhvZF0oJ3BvaW50ZXJsZWF2ZScsIHN3aXBlci5vblRvdWNoRW5kLCB7XG4gICAgcGFzc2l2ZTogdHJ1ZVxuICB9KTtcbiAgZG9jdW1lbnRbZG9tTWV0aG9kXSgnY29udGV4dG1lbnUnLCBzd2lwZXIub25Ub3VjaEVuZCwge1xuICAgIHBhc3NpdmU6IHRydWVcbiAgfSk7XG5cbiAgLy8gUHJldmVudCBMaW5rcyBDbGlja3NcbiAgaWYgKHBhcmFtcy5wcmV2ZW50Q2xpY2tzIHx8IHBhcmFtcy5wcmV2ZW50Q2xpY2tzUHJvcGFnYXRpb24pIHtcbiAgICBlbFtkb21NZXRob2RdKCdjbGljaycsIHN3aXBlci5vbkNsaWNrLCB0cnVlKTtcbiAgfVxuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICB3cmFwcGVyRWxbZG9tTWV0aG9kXSgnc2Nyb2xsJywgc3dpcGVyLm9uU2Nyb2xsKTtcbiAgfVxuXG4gIC8vIFJlc2l6ZSBoYW5kbGVyXG4gIGlmIChwYXJhbXMudXBkYXRlT25XaW5kb3dSZXNpemUpIHtcbiAgICBzd2lwZXJbc3dpcGVyTWV0aG9kXShkZXZpY2UuaW9zIHx8IGRldmljZS5hbmRyb2lkID8gJ3Jlc2l6ZSBvcmllbnRhdGlvbmNoYW5nZSBvYnNlcnZlclVwZGF0ZScgOiAncmVzaXplIG9ic2VydmVyVXBkYXRlJywgb25SZXNpemUsIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIHN3aXBlcltzd2lwZXJNZXRob2RdKCdvYnNlcnZlclVwZGF0ZScsIG9uUmVzaXplLCB0cnVlKTtcbiAgfVxuXG4gIC8vIEltYWdlcyBsb2FkZXJcbiAgZWxbZG9tTWV0aG9kXSgnbG9hZCcsIHN3aXBlci5vbkxvYWQsIHtcbiAgICBjYXB0dXJlOiB0cnVlXG4gIH0pO1xufTtcbmZ1bmN0aW9uIGF0dGFjaEV2ZW50cygpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHBhcmFtc1xuICB9ID0gc3dpcGVyO1xuICBzd2lwZXIub25Ub3VjaFN0YXJ0ID0gb25Ub3VjaFN0YXJ0LmJpbmQoc3dpcGVyKTtcbiAgc3dpcGVyLm9uVG91Y2hNb3ZlID0gb25Ub3VjaE1vdmUuYmluZChzd2lwZXIpO1xuICBzd2lwZXIub25Ub3VjaEVuZCA9IG9uVG91Y2hFbmQuYmluZChzd2lwZXIpO1xuICBzd2lwZXIub25Eb2N1bWVudFRvdWNoU3RhcnQgPSBvbkRvY3VtZW50VG91Y2hTdGFydC5iaW5kKHN3aXBlcik7XG4gIGlmIChwYXJhbXMuY3NzTW9kZSkge1xuICAgIHN3aXBlci5vblNjcm9sbCA9IG9uU2Nyb2xsLmJpbmQoc3dpcGVyKTtcbiAgfVxuICBzd2lwZXIub25DbGljayA9IG9uQ2xpY2suYmluZChzd2lwZXIpO1xuICBzd2lwZXIub25Mb2FkID0gb25Mb2FkLmJpbmQoc3dpcGVyKTtcbiAgZXZlbnRzKHN3aXBlciwgJ29uJyk7XG59XG5mdW5jdGlvbiBkZXRhY2hFdmVudHMoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGV2ZW50cyhzd2lwZXIsICdvZmYnKTtcbn1cbnZhciBldmVudHMkMSA9IHtcbiAgYXR0YWNoRXZlbnRzLFxuICBkZXRhY2hFdmVudHNcbn07XG5cbmNvbnN0IGlzR3JpZEVuYWJsZWQgPSAoc3dpcGVyLCBwYXJhbXMpID0+IHtcbiAgcmV0dXJuIHN3aXBlci5ncmlkICYmIHBhcmFtcy5ncmlkICYmIHBhcmFtcy5ncmlkLnJvd3MgPiAxO1xufTtcbmZ1bmN0aW9uIHNldEJyZWFrcG9pbnQoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICByZWFsSW5kZXgsXG4gICAgaW5pdGlhbGl6ZWQsXG4gICAgcGFyYW1zLFxuICAgIGVsXG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IGJyZWFrcG9pbnRzID0gcGFyYW1zLmJyZWFrcG9pbnRzO1xuICBpZiAoIWJyZWFrcG9pbnRzIHx8IGJyZWFrcG9pbnRzICYmIE9iamVjdC5rZXlzKGJyZWFrcG9pbnRzKS5sZW5ndGggPT09IDApIHJldHVybjtcblxuICAvLyBHZXQgYnJlYWtwb2ludCBmb3Igd2luZG93IHdpZHRoIGFuZCB1cGRhdGUgcGFyYW1ldGVyc1xuICBjb25zdCBicmVha3BvaW50ID0gc3dpcGVyLmdldEJyZWFrcG9pbnQoYnJlYWtwb2ludHMsIHN3aXBlci5wYXJhbXMuYnJlYWtwb2ludHNCYXNlLCBzd2lwZXIuZWwpO1xuICBpZiAoIWJyZWFrcG9pbnQgfHwgc3dpcGVyLmN1cnJlbnRCcmVha3BvaW50ID09PSBicmVha3BvaW50KSByZXR1cm47XG4gIGNvbnN0IGJyZWFrcG9pbnRPbmx5UGFyYW1zID0gYnJlYWtwb2ludCBpbiBicmVha3BvaW50cyA/IGJyZWFrcG9pbnRzW2JyZWFrcG9pbnRdIDogdW5kZWZpbmVkO1xuICBjb25zdCBicmVha3BvaW50UGFyYW1zID0gYnJlYWtwb2ludE9ubHlQYXJhbXMgfHwgc3dpcGVyLm9yaWdpbmFsUGFyYW1zO1xuICBjb25zdCB3YXNNdWx0aVJvdyA9IGlzR3JpZEVuYWJsZWQoc3dpcGVyLCBwYXJhbXMpO1xuICBjb25zdCBpc011bHRpUm93ID0gaXNHcmlkRW5hYmxlZChzd2lwZXIsIGJyZWFrcG9pbnRQYXJhbXMpO1xuICBjb25zdCB3YXNHcmFiQ3Vyc29yID0gc3dpcGVyLnBhcmFtcy5ncmFiQ3Vyc29yO1xuICBjb25zdCBpc0dyYWJDdXJzb3IgPSBicmVha3BvaW50UGFyYW1zLmdyYWJDdXJzb3I7XG4gIGNvbnN0IHdhc0VuYWJsZWQgPSBwYXJhbXMuZW5hYmxlZDtcbiAgaWYgKHdhc011bHRpUm93ICYmICFpc011bHRpUm93KSB7XG4gICAgZWwuY2xhc3NMaXN0LnJlbW92ZShgJHtwYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc31ncmlkYCwgYCR7cGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9Z3JpZC1jb2x1bW5gKTtcbiAgICBzd2lwZXIuZW1pdENvbnRhaW5lckNsYXNzZXMoKTtcbiAgfSBlbHNlIGlmICghd2FzTXVsdGlSb3cgJiYgaXNNdWx0aVJvdykge1xuICAgIGVsLmNsYXNzTGlzdC5hZGQoYCR7cGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9Z3JpZGApO1xuICAgIGlmIChicmVha3BvaW50UGFyYW1zLmdyaWQuZmlsbCAmJiBicmVha3BvaW50UGFyYW1zLmdyaWQuZmlsbCA9PT0gJ2NvbHVtbicgfHwgIWJyZWFrcG9pbnRQYXJhbXMuZ3JpZC5maWxsICYmIHBhcmFtcy5ncmlkLmZpbGwgPT09ICdjb2x1bW4nKSB7XG4gICAgICBlbC5jbGFzc0xpc3QuYWRkKGAke3BhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfWdyaWQtY29sdW1uYCk7XG4gICAgfVxuICAgIHN3aXBlci5lbWl0Q29udGFpbmVyQ2xhc3NlcygpO1xuICB9XG4gIGlmICh3YXNHcmFiQ3Vyc29yICYmICFpc0dyYWJDdXJzb3IpIHtcbiAgICBzd2lwZXIudW5zZXRHcmFiQ3Vyc29yKCk7XG4gIH0gZWxzZSBpZiAoIXdhc0dyYWJDdXJzb3IgJiYgaXNHcmFiQ3Vyc29yKSB7XG4gICAgc3dpcGVyLnNldEdyYWJDdXJzb3IoKTtcbiAgfVxuXG4gIC8vIFRvZ2dsZSBuYXZpZ2F0aW9uLCBwYWdpbmF0aW9uLCBzY3JvbGxiYXJcbiAgWyduYXZpZ2F0aW9uJywgJ3BhZ2luYXRpb24nLCAnc2Nyb2xsYmFyJ10uZm9yRWFjaChwcm9wID0+IHtcbiAgICBpZiAodHlwZW9mIGJyZWFrcG9pbnRQYXJhbXNbcHJvcF0gPT09ICd1bmRlZmluZWQnKSByZXR1cm47XG4gICAgY29uc3Qgd2FzTW9kdWxlRW5hYmxlZCA9IHBhcmFtc1twcm9wXSAmJiBwYXJhbXNbcHJvcF0uZW5hYmxlZDtcbiAgICBjb25zdCBpc01vZHVsZUVuYWJsZWQgPSBicmVha3BvaW50UGFyYW1zW3Byb3BdICYmIGJyZWFrcG9pbnRQYXJhbXNbcHJvcF0uZW5hYmxlZDtcbiAgICBpZiAod2FzTW9kdWxlRW5hYmxlZCAmJiAhaXNNb2R1bGVFbmFibGVkKSB7XG4gICAgICBzd2lwZXJbcHJvcF0uZGlzYWJsZSgpO1xuICAgIH1cbiAgICBpZiAoIXdhc01vZHVsZUVuYWJsZWQgJiYgaXNNb2R1bGVFbmFibGVkKSB7XG4gICAgICBzd2lwZXJbcHJvcF0uZW5hYmxlKCk7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgZGlyZWN0aW9uQ2hhbmdlZCA9IGJyZWFrcG9pbnRQYXJhbXMuZGlyZWN0aW9uICYmIGJyZWFrcG9pbnRQYXJhbXMuZGlyZWN0aW9uICE9PSBwYXJhbXMuZGlyZWN0aW9uO1xuICBjb25zdCBuZWVkc1JlTG9vcCA9IHBhcmFtcy5sb29wICYmIChicmVha3BvaW50UGFyYW1zLnNsaWRlc1BlclZpZXcgIT09IHBhcmFtcy5zbGlkZXNQZXJWaWV3IHx8IGRpcmVjdGlvbkNoYW5nZWQpO1xuICBjb25zdCB3YXNMb29wID0gcGFyYW1zLmxvb3A7XG4gIGlmIChkaXJlY3Rpb25DaGFuZ2VkICYmIGluaXRpYWxpemVkKSB7XG4gICAgc3dpcGVyLmNoYW5nZURpcmVjdGlvbigpO1xuICB9XG4gIGV4dGVuZChzd2lwZXIucGFyYW1zLCBicmVha3BvaW50UGFyYW1zKTtcbiAgY29uc3QgaXNFbmFibGVkID0gc3dpcGVyLnBhcmFtcy5lbmFibGVkO1xuICBjb25zdCBoYXNMb29wID0gc3dpcGVyLnBhcmFtcy5sb29wO1xuICBPYmplY3QuYXNzaWduKHN3aXBlciwge1xuICAgIGFsbG93VG91Y2hNb3ZlOiBzd2lwZXIucGFyYW1zLmFsbG93VG91Y2hNb3ZlLFxuICAgIGFsbG93U2xpZGVOZXh0OiBzd2lwZXIucGFyYW1zLmFsbG93U2xpZGVOZXh0LFxuICAgIGFsbG93U2xpZGVQcmV2OiBzd2lwZXIucGFyYW1zLmFsbG93U2xpZGVQcmV2XG4gIH0pO1xuICBpZiAod2FzRW5hYmxlZCAmJiAhaXNFbmFibGVkKSB7XG4gICAgc3dpcGVyLmRpc2FibGUoKTtcbiAgfSBlbHNlIGlmICghd2FzRW5hYmxlZCAmJiBpc0VuYWJsZWQpIHtcbiAgICBzd2lwZXIuZW5hYmxlKCk7XG4gIH1cbiAgc3dpcGVyLmN1cnJlbnRCcmVha3BvaW50ID0gYnJlYWtwb2ludDtcbiAgc3dpcGVyLmVtaXQoJ19iZWZvcmVCcmVha3BvaW50JywgYnJlYWtwb2ludFBhcmFtcyk7XG4gIGlmIChpbml0aWFsaXplZCkge1xuICAgIGlmIChuZWVkc1JlTG9vcCkge1xuICAgICAgc3dpcGVyLmxvb3BEZXN0cm95KCk7XG4gICAgICBzd2lwZXIubG9vcENyZWF0ZShyZWFsSW5kZXgpO1xuICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlcygpO1xuICAgIH0gZWxzZSBpZiAoIXdhc0xvb3AgJiYgaGFzTG9vcCkge1xuICAgICAgc3dpcGVyLmxvb3BDcmVhdGUocmVhbEluZGV4KTtcbiAgICAgIHN3aXBlci51cGRhdGVTbGlkZXMoKTtcbiAgICB9IGVsc2UgaWYgKHdhc0xvb3AgJiYgIWhhc0xvb3ApIHtcbiAgICAgIHN3aXBlci5sb29wRGVzdHJveSgpO1xuICAgIH1cbiAgfVxuICBzd2lwZXIuZW1pdCgnYnJlYWtwb2ludCcsIGJyZWFrcG9pbnRQYXJhbXMpO1xufVxuXG5mdW5jdGlvbiBnZXRCcmVha3BvaW50KGJyZWFrcG9pbnRzLCBiYXNlLCBjb250YWluZXJFbCkge1xuICBpZiAoYmFzZSA9PT0gdm9pZCAwKSB7XG4gICAgYmFzZSA9ICd3aW5kb3cnO1xuICB9XG4gIGlmICghYnJlYWtwb2ludHMgfHwgYmFzZSA9PT0gJ2NvbnRhaW5lcicgJiYgIWNvbnRhaW5lckVsKSByZXR1cm4gdW5kZWZpbmVkO1xuICBsZXQgYnJlYWtwb2ludCA9IGZhbHNlO1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgY29uc3QgY3VycmVudEhlaWdodCA9IGJhc2UgPT09ICd3aW5kb3cnID8gd2luZG93LmlubmVySGVpZ2h0IDogY29udGFpbmVyRWwuY2xpZW50SGVpZ2h0O1xuICBjb25zdCBwb2ludHMgPSBPYmplY3Qua2V5cyhicmVha3BvaW50cykubWFwKHBvaW50ID0+IHtcbiAgICBpZiAodHlwZW9mIHBvaW50ID09PSAnc3RyaW5nJyAmJiBwb2ludC5pbmRleE9mKCdAJykgPT09IDApIHtcbiAgICAgIGNvbnN0IG1pblJhdGlvID0gcGFyc2VGbG9hdChwb2ludC5zdWJzdHIoMSkpO1xuICAgICAgY29uc3QgdmFsdWUgPSBjdXJyZW50SGVpZ2h0ICogbWluUmF0aW87XG4gICAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZSxcbiAgICAgICAgcG9pbnRcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICB2YWx1ZTogcG9pbnQsXG4gICAgICBwb2ludFxuICAgIH07XG4gIH0pO1xuICBwb2ludHMuc29ydCgoYSwgYikgPT4gcGFyc2VJbnQoYS52YWx1ZSwgMTApIC0gcGFyc2VJbnQoYi52YWx1ZSwgMTApKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb2ludHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25zdCB7XG4gICAgICBwb2ludCxcbiAgICAgIHZhbHVlXG4gICAgfSA9IHBvaW50c1tpXTtcbiAgICBpZiAoYmFzZSA9PT0gJ3dpbmRvdycpIHtcbiAgICAgIGlmICh3aW5kb3cubWF0Y2hNZWRpYShgKG1pbi13aWR0aDogJHt2YWx1ZX1weClgKS5tYXRjaGVzKSB7XG4gICAgICAgIGJyZWFrcG9pbnQgPSBwb2ludDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHZhbHVlIDw9IGNvbnRhaW5lckVsLmNsaWVudFdpZHRoKSB7XG4gICAgICBicmVha3BvaW50ID0gcG9pbnQ7XG4gICAgfVxuICB9XG4gIHJldHVybiBicmVha3BvaW50IHx8ICdtYXgnO1xufVxuXG52YXIgYnJlYWtwb2ludHMgPSB7XG4gIHNldEJyZWFrcG9pbnQsXG4gIGdldEJyZWFrcG9pbnRcbn07XG5cbmZ1bmN0aW9uIHByZXBhcmVDbGFzc2VzKGVudHJpZXMsIHByZWZpeCkge1xuICBjb25zdCByZXN1bHRDbGFzc2VzID0gW107XG4gIGVudHJpZXMuZm9yRWFjaChpdGVtID0+IHtcbiAgICBpZiAodHlwZW9mIGl0ZW0gPT09ICdvYmplY3QnKSB7XG4gICAgICBPYmplY3Qua2V5cyhpdGVtKS5mb3JFYWNoKGNsYXNzTmFtZXMgPT4ge1xuICAgICAgICBpZiAoaXRlbVtjbGFzc05hbWVzXSkge1xuICAgICAgICAgIHJlc3VsdENsYXNzZXMucHVzaChwcmVmaXggKyBjbGFzc05hbWVzKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgaXRlbSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJlc3VsdENsYXNzZXMucHVzaChwcmVmaXggKyBpdGVtKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0Q2xhc3Nlcztcbn1cbmZ1bmN0aW9uIGFkZENsYXNzZXMoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBjbGFzc05hbWVzLFxuICAgIHBhcmFtcyxcbiAgICBydGwsXG4gICAgZWwsXG4gICAgZGV2aWNlXG4gIH0gPSBzd2lwZXI7XG4gIC8vIHByZXR0aWVyLWlnbm9yZVxuICBjb25zdCBzdWZmaXhlcyA9IHByZXBhcmVDbGFzc2VzKFsnaW5pdGlhbGl6ZWQnLCBwYXJhbXMuZGlyZWN0aW9uLCB7XG4gICAgJ2ZyZWUtbW9kZSc6IHN3aXBlci5wYXJhbXMuZnJlZU1vZGUgJiYgcGFyYW1zLmZyZWVNb2RlLmVuYWJsZWRcbiAgfSwge1xuICAgICdhdXRvaGVpZ2h0JzogcGFyYW1zLmF1dG9IZWlnaHRcbiAgfSwge1xuICAgICdydGwnOiBydGxcbiAgfSwge1xuICAgICdncmlkJzogcGFyYW1zLmdyaWQgJiYgcGFyYW1zLmdyaWQucm93cyA+IDFcbiAgfSwge1xuICAgICdncmlkLWNvbHVtbic6IHBhcmFtcy5ncmlkICYmIHBhcmFtcy5ncmlkLnJvd3MgPiAxICYmIHBhcmFtcy5ncmlkLmZpbGwgPT09ICdjb2x1bW4nXG4gIH0sIHtcbiAgICAnYW5kcm9pZCc6IGRldmljZS5hbmRyb2lkXG4gIH0sIHtcbiAgICAnaW9zJzogZGV2aWNlLmlvc1xuICB9LCB7XG4gICAgJ2Nzcy1tb2RlJzogcGFyYW1zLmNzc01vZGVcbiAgfSwge1xuICAgICdjZW50ZXJlZCc6IHBhcmFtcy5jc3NNb2RlICYmIHBhcmFtcy5jZW50ZXJlZFNsaWRlc1xuICB9LCB7XG4gICAgJ3dhdGNoLXByb2dyZXNzJzogcGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3NcbiAgfV0sIHBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzKTtcbiAgY2xhc3NOYW1lcy5wdXNoKC4uLnN1ZmZpeGVzKTtcbiAgZWwuY2xhc3NMaXN0LmFkZCguLi5jbGFzc05hbWVzKTtcbiAgc3dpcGVyLmVtaXRDb250YWluZXJDbGFzc2VzKCk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUNsYXNzZXMoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBlbCxcbiAgICBjbGFzc05hbWVzXG4gIH0gPSBzd2lwZXI7XG4gIGlmICghZWwgfHwgdHlwZW9mIGVsID09PSAnc3RyaW5nJykgcmV0dXJuO1xuICBlbC5jbGFzc0xpc3QucmVtb3ZlKC4uLmNsYXNzTmFtZXMpO1xuICBzd2lwZXIuZW1pdENvbnRhaW5lckNsYXNzZXMoKTtcbn1cblxudmFyIGNsYXNzZXMgPSB7XG4gIGFkZENsYXNzZXMsXG4gIHJlbW92ZUNsYXNzZXNcbn07XG5cbmZ1bmN0aW9uIGNoZWNrT3ZlcmZsb3coKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBpc0xvY2tlZDogd2FzTG9ja2VkLFxuICAgIHBhcmFtc1xuICB9ID0gc3dpcGVyO1xuICBjb25zdCB7XG4gICAgc2xpZGVzT2Zmc2V0QmVmb3JlXG4gIH0gPSBwYXJhbXM7XG4gIGlmIChzbGlkZXNPZmZzZXRCZWZvcmUpIHtcbiAgICBjb25zdCBsYXN0U2xpZGVJbmRleCA9IHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gMTtcbiAgICBjb25zdCBsYXN0U2xpZGVSaWdodEVkZ2UgPSBzd2lwZXIuc2xpZGVzR3JpZFtsYXN0U2xpZGVJbmRleF0gKyBzd2lwZXIuc2xpZGVzU2l6ZXNHcmlkW2xhc3RTbGlkZUluZGV4XSArIHNsaWRlc09mZnNldEJlZm9yZSAqIDI7XG4gICAgc3dpcGVyLmlzTG9ja2VkID0gc3dpcGVyLnNpemUgPiBsYXN0U2xpZGVSaWdodEVkZ2U7XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyLmlzTG9ja2VkID0gc3dpcGVyLnNuYXBHcmlkLmxlbmd0aCA9PT0gMTtcbiAgfVxuICBpZiAocGFyYW1zLmFsbG93U2xpZGVOZXh0ID09PSB0cnVlKSB7XG4gICAgc3dpcGVyLmFsbG93U2xpZGVOZXh0ID0gIXN3aXBlci5pc0xvY2tlZDtcbiAgfVxuICBpZiAocGFyYW1zLmFsbG93U2xpZGVQcmV2ID09PSB0cnVlKSB7XG4gICAgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID0gIXN3aXBlci5pc0xvY2tlZDtcbiAgfVxuICBpZiAod2FzTG9ja2VkICYmIHdhc0xvY2tlZCAhPT0gc3dpcGVyLmlzTG9ja2VkKSB7XG4gICAgc3dpcGVyLmlzRW5kID0gZmFsc2U7XG4gIH1cbiAgaWYgKHdhc0xvY2tlZCAhPT0gc3dpcGVyLmlzTG9ja2VkKSB7XG4gICAgc3dpcGVyLmVtaXQoc3dpcGVyLmlzTG9ja2VkID8gJ2xvY2snIDogJ3VubG9jaycpO1xuICB9XG59XG52YXIgY2hlY2tPdmVyZmxvdyQxID0ge1xuICBjaGVja092ZXJmbG93XG59O1xuXG52YXIgZGVmYXVsdHMgPSB7XG4gIGluaXQ6IHRydWUsXG4gIGRpcmVjdGlvbjogJ2hvcml6b250YWwnLFxuICBvbmVXYXlNb3ZlbWVudDogZmFsc2UsXG4gIHN3aXBlckVsZW1lbnROb2RlTmFtZTogJ1NXSVBFUi1DT05UQUlORVInLFxuICB0b3VjaEV2ZW50c1RhcmdldDogJ3dyYXBwZXInLFxuICBpbml0aWFsU2xpZGU6IDAsXG4gIHNwZWVkOiAzMDAsXG4gIGNzc01vZGU6IGZhbHNlLFxuICB1cGRhdGVPbldpbmRvd1Jlc2l6ZTogdHJ1ZSxcbiAgcmVzaXplT2JzZXJ2ZXI6IHRydWUsXG4gIG5lc3RlZDogZmFsc2UsXG4gIGNyZWF0ZUVsZW1lbnRzOiBmYWxzZSxcbiAgZXZlbnRzUHJlZml4OiAnc3dpcGVyJyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgZm9jdXNhYmxlRWxlbWVudHM6ICdpbnB1dCwgc2VsZWN0LCBvcHRpb24sIHRleHRhcmVhLCBidXR0b24sIHZpZGVvLCBsYWJlbCcsXG4gIC8vIE92ZXJyaWRlc1xuICB3aWR0aDogbnVsbCxcbiAgaGVpZ2h0OiBudWxsLFxuICAvL1xuICBwcmV2ZW50SW50ZXJhY3Rpb25PblRyYW5zaXRpb246IGZhbHNlLFxuICAvLyBzc3JcbiAgdXNlckFnZW50OiBudWxsLFxuICB1cmw6IG51bGwsXG4gIC8vIFRvIHN1cHBvcnQgaU9TJ3Mgc3dpcGUtdG8tZ28tYmFjayBnZXN0dXJlICh3aGVuIGJlaW5nIHVzZWQgaW4tYXBwKS5cbiAgZWRnZVN3aXBlRGV0ZWN0aW9uOiBmYWxzZSxcbiAgZWRnZVN3aXBlVGhyZXNob2xkOiAyMCxcbiAgLy8gQXV0b2hlaWdodFxuICBhdXRvSGVpZ2h0OiBmYWxzZSxcbiAgLy8gU2V0IHdyYXBwZXIgd2lkdGhcbiAgc2V0V3JhcHBlclNpemU6IGZhbHNlLFxuICAvLyBWaXJ0dWFsIFRyYW5zbGF0ZVxuICB2aXJ0dWFsVHJhbnNsYXRlOiBmYWxzZSxcbiAgLy8gRWZmZWN0c1xuICBlZmZlY3Q6ICdzbGlkZScsXG4gIC8vICdzbGlkZScgb3IgJ2ZhZGUnIG9yICdjdWJlJyBvciAnY292ZXJmbG93JyBvciAnZmxpcCdcblxuICAvLyBCcmVha3BvaW50c1xuICBicmVha3BvaW50czogdW5kZWZpbmVkLFxuICBicmVha3BvaW50c0Jhc2U6ICd3aW5kb3cnLFxuICAvLyBTbGlkZXMgZ3JpZFxuICBzcGFjZUJldHdlZW46IDAsXG4gIHNsaWRlc1BlclZpZXc6IDEsXG4gIHNsaWRlc1Blckdyb3VwOiAxLFxuICBzbGlkZXNQZXJHcm91cFNraXA6IDAsXG4gIHNsaWRlc1Blckdyb3VwQXV0bzogZmFsc2UsXG4gIGNlbnRlcmVkU2xpZGVzOiBmYWxzZSxcbiAgY2VudGVyZWRTbGlkZXNCb3VuZHM6IGZhbHNlLFxuICBzbGlkZXNPZmZzZXRCZWZvcmU6IDAsXG4gIC8vIGluIHB4XG4gIHNsaWRlc09mZnNldEFmdGVyOiAwLFxuICAvLyBpbiBweFxuICBub3JtYWxpemVTbGlkZUluZGV4OiB0cnVlLFxuICBjZW50ZXJJbnN1ZmZpY2llbnRTbGlkZXM6IGZhbHNlLFxuICAvLyBEaXNhYmxlIHN3aXBlciBhbmQgaGlkZSBuYXZpZ2F0aW9uIHdoZW4gY29udGFpbmVyIG5vdCBvdmVyZmxvd1xuICB3YXRjaE92ZXJmbG93OiB0cnVlLFxuICAvLyBSb3VuZCBsZW5ndGhcbiAgcm91bmRMZW5ndGhzOiBmYWxzZSxcbiAgLy8gVG91Y2hlc1xuICB0b3VjaFJhdGlvOiAxLFxuICB0b3VjaEFuZ2xlOiA0NSxcbiAgc2ltdWxhdGVUb3VjaDogdHJ1ZSxcbiAgc2hvcnRTd2lwZXM6IHRydWUsXG4gIGxvbmdTd2lwZXM6IHRydWUsXG4gIGxvbmdTd2lwZXNSYXRpbzogMC41LFxuICBsb25nU3dpcGVzTXM6IDMwMCxcbiAgZm9sbG93RmluZ2VyOiB0cnVlLFxuICBhbGxvd1RvdWNoTW92ZTogdHJ1ZSxcbiAgdGhyZXNob2xkOiA1LFxuICB0b3VjaE1vdmVTdG9wUHJvcGFnYXRpb246IGZhbHNlLFxuICB0b3VjaFN0YXJ0UHJldmVudERlZmF1bHQ6IHRydWUsXG4gIHRvdWNoU3RhcnRGb3JjZVByZXZlbnREZWZhdWx0OiBmYWxzZSxcbiAgdG91Y2hSZWxlYXNlT25FZGdlczogZmFsc2UsXG4gIC8vIFVuaXF1ZSBOYXZpZ2F0aW9uIEVsZW1lbnRzXG4gIHVuaXF1ZU5hdkVsZW1lbnRzOiB0cnVlLFxuICAvLyBSZXNpc3RhbmNlXG4gIHJlc2lzdGFuY2U6IHRydWUsXG4gIHJlc2lzdGFuY2VSYXRpbzogMC44NSxcbiAgLy8gUHJvZ3Jlc3NcbiAgd2F0Y2hTbGlkZXNQcm9ncmVzczogZmFsc2UsXG4gIC8vIEN1cnNvclxuICBncmFiQ3Vyc29yOiBmYWxzZSxcbiAgLy8gQ2xpY2tzXG4gIHByZXZlbnRDbGlja3M6IHRydWUsXG4gIHByZXZlbnRDbGlja3NQcm9wYWdhdGlvbjogdHJ1ZSxcbiAgc2xpZGVUb0NsaWNrZWRTbGlkZTogZmFsc2UsXG4gIC8vIGxvb3BcbiAgbG9vcDogZmFsc2UsXG4gIGxvb3BBZGRCbGFua1NsaWRlczogdHJ1ZSxcbiAgbG9vcEFkZGl0aW9uYWxTbGlkZXM6IDAsXG4gIGxvb3BQcmV2ZW50c1NsaWRpbmc6IHRydWUsXG4gIC8vIHJld2luZFxuICByZXdpbmQ6IGZhbHNlLFxuICAvLyBTd2lwaW5nL25vIHN3aXBpbmdcbiAgYWxsb3dTbGlkZVByZXY6IHRydWUsXG4gIGFsbG93U2xpZGVOZXh0OiB0cnVlLFxuICBzd2lwZUhhbmRsZXI6IG51bGwsXG4gIC8vICcuc3dpcGUtaGFuZGxlcicsXG4gIG5vU3dpcGluZzogdHJ1ZSxcbiAgbm9Td2lwaW5nQ2xhc3M6ICdzd2lwZXItbm8tc3dpcGluZycsXG4gIG5vU3dpcGluZ1NlbGVjdG9yOiBudWxsLFxuICAvLyBQYXNzaXZlIExpc3RlbmVyc1xuICBwYXNzaXZlTGlzdGVuZXJzOiB0cnVlLFxuICBtYXhCYWNrZmFjZUhpZGRlblNsaWRlczogMTAsXG4gIC8vIE5TXG4gIGNvbnRhaW5lck1vZGlmaWVyQ2xhc3M6ICdzd2lwZXItJyxcbiAgLy8gTkVXXG4gIHNsaWRlQ2xhc3M6ICdzd2lwZXItc2xpZGUnLFxuICBzbGlkZUJsYW5rQ2xhc3M6ICdzd2lwZXItc2xpZGUtYmxhbmsnLFxuICBzbGlkZUFjdGl2ZUNsYXNzOiAnc3dpcGVyLXNsaWRlLWFjdGl2ZScsXG4gIHNsaWRlVmlzaWJsZUNsYXNzOiAnc3dpcGVyLXNsaWRlLXZpc2libGUnLFxuICBzbGlkZUZ1bGx5VmlzaWJsZUNsYXNzOiAnc3dpcGVyLXNsaWRlLWZ1bGx5LXZpc2libGUnLFxuICBzbGlkZU5leHRDbGFzczogJ3N3aXBlci1zbGlkZS1uZXh0JyxcbiAgc2xpZGVQcmV2Q2xhc3M6ICdzd2lwZXItc2xpZGUtcHJldicsXG4gIHdyYXBwZXJDbGFzczogJ3N3aXBlci13cmFwcGVyJyxcbiAgbGF6eVByZWxvYWRlckNsYXNzOiAnc3dpcGVyLWxhenktcHJlbG9hZGVyJyxcbiAgbGF6eVByZWxvYWRQcmV2TmV4dDogMCxcbiAgLy8gQ2FsbGJhY2tzXG4gIHJ1bkNhbGxiYWNrc09uSW5pdDogdHJ1ZSxcbiAgLy8gSW50ZXJuYWxzXG4gIF9lbWl0Q2xhc3NlczogZmFsc2Vcbn07XG5cbmZ1bmN0aW9uIG1vZHVsZUV4dGVuZFBhcmFtcyhwYXJhbXMsIGFsbE1vZHVsZXNQYXJhbXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGV4dGVuZFBhcmFtcyhvYmopIHtcbiAgICBpZiAob2JqID09PSB2b2lkIDApIHtcbiAgICAgIG9iaiA9IHt9O1xuICAgIH1cbiAgICBjb25zdCBtb2R1bGVQYXJhbU5hbWUgPSBPYmplY3Qua2V5cyhvYmopWzBdO1xuICAgIGNvbnN0IG1vZHVsZVBhcmFtcyA9IG9ialttb2R1bGVQYXJhbU5hbWVdO1xuICAgIGlmICh0eXBlb2YgbW9kdWxlUGFyYW1zICE9PSAnb2JqZWN0JyB8fCBtb2R1bGVQYXJhbXMgPT09IG51bGwpIHtcbiAgICAgIGV4dGVuZChhbGxNb2R1bGVzUGFyYW1zLCBvYmopO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAocGFyYW1zW21vZHVsZVBhcmFtTmFtZV0gPT09IHRydWUpIHtcbiAgICAgIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdID0ge1xuICAgICAgICBlbmFibGVkOiB0cnVlXG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAobW9kdWxlUGFyYW1OYW1lID09PSAnbmF2aWdhdGlvbicgJiYgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0gJiYgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0uZW5hYmxlZCAmJiAhcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0ucHJldkVsICYmICFwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXS5uZXh0RWwpIHtcbiAgICAgIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdLmF1dG8gPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoWydwYWdpbmF0aW9uJywgJ3Njcm9sbGJhciddLmluZGV4T2YobW9kdWxlUGFyYW1OYW1lKSA+PSAwICYmIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdICYmIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdLmVuYWJsZWQgJiYgIXBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdLmVsKSB7XG4gICAgICBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXS5hdXRvID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKCEobW9kdWxlUGFyYW1OYW1lIGluIHBhcmFtcyAmJiAnZW5hYmxlZCcgaW4gbW9kdWxlUGFyYW1zKSkge1xuICAgICAgZXh0ZW5kKGFsbE1vZHVsZXNQYXJhbXMsIG9iaik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0gPT09ICdvYmplY3QnICYmICEoJ2VuYWJsZWQnIGluIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdKSkge1xuICAgICAgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0uZW5hYmxlZCA9IHRydWU7XG4gICAgfVxuICAgIGlmICghcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0pIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdID0ge1xuICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICB9O1xuICAgIGV4dGVuZChhbGxNb2R1bGVzUGFyYW1zLCBvYmopO1xuICB9O1xufVxuXG4vKiBlc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246IFwib2ZmXCIgKi9cbmNvbnN0IHByb3RvdHlwZXMgPSB7XG4gIGV2ZW50c0VtaXR0ZXIsXG4gIHVwZGF0ZSxcbiAgdHJhbnNsYXRlLFxuICB0cmFuc2l0aW9uLFxuICBzbGlkZSxcbiAgbG9vcCxcbiAgZ3JhYkN1cnNvcixcbiAgZXZlbnRzOiBldmVudHMkMSxcbiAgYnJlYWtwb2ludHMsXG4gIGNoZWNrT3ZlcmZsb3c6IGNoZWNrT3ZlcmZsb3ckMSxcbiAgY2xhc3Nlc1xufTtcbmNvbnN0IGV4dGVuZGVkRGVmYXVsdHMgPSB7fTtcbmNsYXNzIFN3aXBlciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIGxldCBlbDtcbiAgICBsZXQgcGFyYW1zO1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG4gICAgaWYgKGFyZ3MubGVuZ3RoID09PSAxICYmIGFyZ3NbMF0uY29uc3RydWN0b3IgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFyZ3NbMF0pLnNsaWNlKDgsIC0xKSA9PT0gJ09iamVjdCcpIHtcbiAgICAgIHBhcmFtcyA9IGFyZ3NbMF07XG4gICAgfSBlbHNlIHtcbiAgICAgIFtlbCwgcGFyYW1zXSA9IGFyZ3M7XG4gICAgfVxuICAgIGlmICghcGFyYW1zKSBwYXJhbXMgPSB7fTtcbiAgICBwYXJhbXMgPSBleHRlbmQoe30sIHBhcmFtcyk7XG4gICAgaWYgKGVsICYmICFwYXJhbXMuZWwpIHBhcmFtcy5lbCA9IGVsO1xuICAgIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgICBpZiAocGFyYW1zLmVsICYmIHR5cGVvZiBwYXJhbXMuZWwgPT09ICdzdHJpbmcnICYmIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwocGFyYW1zLmVsKS5sZW5ndGggPiAxKSB7XG4gICAgICBjb25zdCBzd2lwZXJzID0gW107XG4gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHBhcmFtcy5lbCkuZm9yRWFjaChjb250YWluZXJFbCA9PiB7XG4gICAgICAgIGNvbnN0IG5ld1BhcmFtcyA9IGV4dGVuZCh7fSwgcGFyYW1zLCB7XG4gICAgICAgICAgZWw6IGNvbnRhaW5lckVsXG4gICAgICAgIH0pO1xuICAgICAgICBzd2lwZXJzLnB1c2gobmV3IFN3aXBlcihuZXdQYXJhbXMpKTtcbiAgICAgIH0pO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnN0cnVjdG9yLXJldHVyblxuICAgICAgcmV0dXJuIHN3aXBlcnM7XG4gICAgfVxuXG4gICAgLy8gU3dpcGVyIEluc3RhbmNlXG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBzd2lwZXIuX19zd2lwZXJfXyA9IHRydWU7XG4gICAgc3dpcGVyLnN1cHBvcnQgPSBnZXRTdXBwb3J0KCk7XG4gICAgc3dpcGVyLmRldmljZSA9IGdldERldmljZSh7XG4gICAgICB1c2VyQWdlbnQ6IHBhcmFtcy51c2VyQWdlbnRcbiAgICB9KTtcbiAgICBzd2lwZXIuYnJvd3NlciA9IGdldEJyb3dzZXIoKTtcbiAgICBzd2lwZXIuZXZlbnRzTGlzdGVuZXJzID0ge307XG4gICAgc3dpcGVyLmV2ZW50c0FueUxpc3RlbmVycyA9IFtdO1xuICAgIHN3aXBlci5tb2R1bGVzID0gWy4uLnN3aXBlci5fX21vZHVsZXNfX107XG4gICAgaWYgKHBhcmFtcy5tb2R1bGVzICYmIEFycmF5LmlzQXJyYXkocGFyYW1zLm1vZHVsZXMpKSB7XG4gICAgICBzd2lwZXIubW9kdWxlcy5wdXNoKC4uLnBhcmFtcy5tb2R1bGVzKTtcbiAgICB9XG4gICAgY29uc3QgYWxsTW9kdWxlc1BhcmFtcyA9IHt9O1xuICAgIHN3aXBlci5tb2R1bGVzLmZvckVhY2gobW9kID0+IHtcbiAgICAgIG1vZCh7XG4gICAgICAgIHBhcmFtcyxcbiAgICAgICAgc3dpcGVyLFxuICAgICAgICBleHRlbmRQYXJhbXM6IG1vZHVsZUV4dGVuZFBhcmFtcyhwYXJhbXMsIGFsbE1vZHVsZXNQYXJhbXMpLFxuICAgICAgICBvbjogc3dpcGVyLm9uLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgb25jZTogc3dpcGVyLm9uY2UuYmluZChzd2lwZXIpLFxuICAgICAgICBvZmY6IHN3aXBlci5vZmYuYmluZChzd2lwZXIpLFxuICAgICAgICBlbWl0OiBzd2lwZXIuZW1pdC5iaW5kKHN3aXBlcilcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLy8gRXh0ZW5kIGRlZmF1bHRzIHdpdGggbW9kdWxlcyBwYXJhbXNcbiAgICBjb25zdCBzd2lwZXJQYXJhbXMgPSBleHRlbmQoe30sIGRlZmF1bHRzLCBhbGxNb2R1bGVzUGFyYW1zKTtcblxuICAgIC8vIEV4dGVuZCBkZWZhdWx0cyB3aXRoIHBhc3NlZCBwYXJhbXNcbiAgICBzd2lwZXIucGFyYW1zID0gZXh0ZW5kKHt9LCBzd2lwZXJQYXJhbXMsIGV4dGVuZGVkRGVmYXVsdHMsIHBhcmFtcyk7XG4gICAgc3dpcGVyLm9yaWdpbmFsUGFyYW1zID0gZXh0ZW5kKHt9LCBzd2lwZXIucGFyYW1zKTtcbiAgICBzd2lwZXIucGFzc2VkUGFyYW1zID0gZXh0ZW5kKHt9LCBwYXJhbXMpO1xuXG4gICAgLy8gYWRkIGV2ZW50IGxpc3RlbmVyc1xuICAgIGlmIChzd2lwZXIucGFyYW1zICYmIHN3aXBlci5wYXJhbXMub24pIHtcbiAgICAgIE9iamVjdC5rZXlzKHN3aXBlci5wYXJhbXMub24pLmZvckVhY2goZXZlbnROYW1lID0+IHtcbiAgICAgICAgc3dpcGVyLm9uKGV2ZW50TmFtZSwgc3dpcGVyLnBhcmFtcy5vbltldmVudE5hbWVdKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoc3dpcGVyLnBhcmFtcyAmJiBzd2lwZXIucGFyYW1zLm9uQW55KSB7XG4gICAgICBzd2lwZXIub25Bbnkoc3dpcGVyLnBhcmFtcy5vbkFueSk7XG4gICAgfVxuXG4gICAgLy8gRXh0ZW5kIFN3aXBlclxuICAgIE9iamVjdC5hc3NpZ24oc3dpcGVyLCB7XG4gICAgICBlbmFibGVkOiBzd2lwZXIucGFyYW1zLmVuYWJsZWQsXG4gICAgICBlbCxcbiAgICAgIC8vIENsYXNzZXNcbiAgICAgIGNsYXNzTmFtZXM6IFtdLFxuICAgICAgLy8gU2xpZGVzXG4gICAgICBzbGlkZXM6IFtdLFxuICAgICAgc2xpZGVzR3JpZDogW10sXG4gICAgICBzbmFwR3JpZDogW10sXG4gICAgICBzbGlkZXNTaXplc0dyaWQ6IFtdLFxuICAgICAgLy8gaXNEaXJlY3Rpb25cbiAgICAgIGlzSG9yaXpvbnRhbCgpIHtcbiAgICAgICAgcmV0dXJuIHN3aXBlci5wYXJhbXMuZGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCc7XG4gICAgICB9LFxuICAgICAgaXNWZXJ0aWNhbCgpIHtcbiAgICAgICAgcmV0dXJuIHN3aXBlci5wYXJhbXMuZGlyZWN0aW9uID09PSAndmVydGljYWwnO1xuICAgICAgfSxcbiAgICAgIC8vIEluZGV4ZXNcbiAgICAgIGFjdGl2ZUluZGV4OiAwLFxuICAgICAgcmVhbEluZGV4OiAwLFxuICAgICAgLy9cbiAgICAgIGlzQmVnaW5uaW5nOiB0cnVlLFxuICAgICAgaXNFbmQ6IGZhbHNlLFxuICAgICAgLy8gUHJvcHNcbiAgICAgIHRyYW5zbGF0ZTogMCxcbiAgICAgIHByZXZpb3VzVHJhbnNsYXRlOiAwLFxuICAgICAgcHJvZ3Jlc3M6IDAsXG4gICAgICB2ZWxvY2l0eTogMCxcbiAgICAgIGFuaW1hdGluZzogZmFsc2UsXG4gICAgICBjc3NPdmVyZmxvd0FkanVzdG1lbnQoKSB7XG4gICAgICAgIC8vIFJldHVybnMgMCB1bmxlc3MgYHRyYW5zbGF0ZWAgaXMgPiAyKioyM1xuICAgICAgICAvLyBTaG91bGQgYmUgc3VidHJhY3RlZCBmcm9tIGNzcyB2YWx1ZXMgdG8gcHJldmVudCBvdmVyZmxvd1xuICAgICAgICByZXR1cm4gTWF0aC50cnVuYyh0aGlzLnRyYW5zbGF0ZSAvIDIgKiogMjMpICogMiAqKiAyMztcbiAgICAgIH0sXG4gICAgICAvLyBMb2Nrc1xuICAgICAgYWxsb3dTbGlkZU5leHQ6IHN3aXBlci5wYXJhbXMuYWxsb3dTbGlkZU5leHQsXG4gICAgICBhbGxvd1NsaWRlUHJldjogc3dpcGVyLnBhcmFtcy5hbGxvd1NsaWRlUHJldixcbiAgICAgIC8vIFRvdWNoIEV2ZW50c1xuICAgICAgdG91Y2hFdmVudHNEYXRhOiB7XG4gICAgICAgIGlzVG91Y2hlZDogdW5kZWZpbmVkLFxuICAgICAgICBpc01vdmVkOiB1bmRlZmluZWQsXG4gICAgICAgIGFsbG93VG91Y2hDYWxsYmFja3M6IHVuZGVmaW5lZCxcbiAgICAgICAgdG91Y2hTdGFydFRpbWU6IHVuZGVmaW5lZCxcbiAgICAgICAgaXNTY3JvbGxpbmc6IHVuZGVmaW5lZCxcbiAgICAgICAgY3VycmVudFRyYW5zbGF0ZTogdW5kZWZpbmVkLFxuICAgICAgICBzdGFydFRyYW5zbGF0ZTogdW5kZWZpbmVkLFxuICAgICAgICBhbGxvd1RocmVzaG9sZE1vdmU6IHVuZGVmaW5lZCxcbiAgICAgICAgLy8gRm9ybSBlbGVtZW50cyB0byBtYXRjaFxuICAgICAgICBmb2N1c2FibGVFbGVtZW50czogc3dpcGVyLnBhcmFtcy5mb2N1c2FibGVFbGVtZW50cyxcbiAgICAgICAgLy8gTGFzdCBjbGljayB0aW1lXG4gICAgICAgIGxhc3RDbGlja1RpbWU6IDAsXG4gICAgICAgIGNsaWNrVGltZW91dDogdW5kZWZpbmVkLFxuICAgICAgICAvLyBWZWxvY2l0aWVzXG4gICAgICAgIHZlbG9jaXRpZXM6IFtdLFxuICAgICAgICBhbGxvd01vbWVudHVtQm91bmNlOiB1bmRlZmluZWQsXG4gICAgICAgIHN0YXJ0TW92aW5nOiB1bmRlZmluZWQsXG4gICAgICAgIHBvaW50ZXJJZDogbnVsbCxcbiAgICAgICAgdG91Y2hJZDogbnVsbFxuICAgICAgfSxcbiAgICAgIC8vIENsaWNrc1xuICAgICAgYWxsb3dDbGljazogdHJ1ZSxcbiAgICAgIC8vIFRvdWNoZXNcbiAgICAgIGFsbG93VG91Y2hNb3ZlOiBzd2lwZXIucGFyYW1zLmFsbG93VG91Y2hNb3ZlLFxuICAgICAgdG91Y2hlczoge1xuICAgICAgICBzdGFydFg6IDAsXG4gICAgICAgIHN0YXJ0WTogMCxcbiAgICAgICAgY3VycmVudFg6IDAsXG4gICAgICAgIGN1cnJlbnRZOiAwLFxuICAgICAgICBkaWZmOiAwXG4gICAgICB9LFxuICAgICAgLy8gSW1hZ2VzXG4gICAgICBpbWFnZXNUb0xvYWQ6IFtdLFxuICAgICAgaW1hZ2VzTG9hZGVkOiAwXG4gICAgfSk7XG4gICAgc3dpcGVyLmVtaXQoJ19zd2lwZXInKTtcblxuICAgIC8vIEluaXRcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5pbml0KSB7XG4gICAgICBzd2lwZXIuaW5pdCgpO1xuICAgIH1cblxuICAgIC8vIFJldHVybiBhcHAgaW5zdGFuY2VcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc3RydWN0b3ItcmV0dXJuXG4gICAgcmV0dXJuIHN3aXBlcjtcbiAgfVxuICBnZXREaXJlY3Rpb25MYWJlbChwcm9wZXJ0eSkge1xuICAgIGlmICh0aGlzLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICByZXR1cm4gcHJvcGVydHk7XG4gICAgfVxuICAgIC8vIHByZXR0aWVyLWlnbm9yZVxuICAgIHJldHVybiB7XG4gICAgICAnd2lkdGgnOiAnaGVpZ2h0JyxcbiAgICAgICdtYXJnaW4tdG9wJzogJ21hcmdpbi1sZWZ0JyxcbiAgICAgICdtYXJnaW4tYm90dG9tICc6ICdtYXJnaW4tcmlnaHQnLFxuICAgICAgJ21hcmdpbi1sZWZ0JzogJ21hcmdpbi10b3AnLFxuICAgICAgJ21hcmdpbi1yaWdodCc6ICdtYXJnaW4tYm90dG9tJyxcbiAgICAgICdwYWRkaW5nLWxlZnQnOiAncGFkZGluZy10b3AnLFxuICAgICAgJ3BhZGRpbmctcmlnaHQnOiAncGFkZGluZy1ib3R0b20nLFxuICAgICAgJ21hcmdpblJpZ2h0JzogJ21hcmdpbkJvdHRvbSdcbiAgICB9W3Byb3BlcnR5XTtcbiAgfVxuICBnZXRTbGlkZUluZGV4KHNsaWRlRWwpIHtcbiAgICBjb25zdCB7XG4gICAgICBzbGlkZXNFbCxcbiAgICAgIHBhcmFtc1xuICAgIH0gPSB0aGlzO1xuICAgIGNvbnN0IHNsaWRlcyA9IGVsZW1lbnRDaGlsZHJlbihzbGlkZXNFbCwgYC4ke3BhcmFtcy5zbGlkZUNsYXNzfSwgc3dpcGVyLXNsaWRlYCk7XG4gICAgY29uc3QgZmlyc3RTbGlkZUluZGV4ID0gZWxlbWVudEluZGV4KHNsaWRlc1swXSk7XG4gICAgcmV0dXJuIGVsZW1lbnRJbmRleChzbGlkZUVsKSAtIGZpcnN0U2xpZGVJbmRleDtcbiAgfVxuICBnZXRTbGlkZUluZGV4QnlEYXRhKGluZGV4KSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U2xpZGVJbmRleCh0aGlzLnNsaWRlcy5maWx0ZXIoc2xpZGVFbCA9PiBzbGlkZUVsLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSAqIDEgPT09IGluZGV4KVswXSk7XG4gIH1cbiAgcmVjYWxjU2xpZGVzKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3Qge1xuICAgICAgc2xpZGVzRWwsXG4gICAgICBwYXJhbXNcbiAgICB9ID0gc3dpcGVyO1xuICAgIHN3aXBlci5zbGlkZXMgPSBlbGVtZW50Q2hpbGRyZW4oc2xpZGVzRWwsIGAuJHtwYXJhbXMuc2xpZGVDbGFzc30sIHN3aXBlci1zbGlkZWApO1xuICB9XG4gIGVuYWJsZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmIChzd2lwZXIuZW5hYmxlZCkgcmV0dXJuO1xuICAgIHN3aXBlci5lbmFibGVkID0gdHJ1ZTtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5ncmFiQ3Vyc29yKSB7XG4gICAgICBzd2lwZXIuc2V0R3JhYkN1cnNvcigpO1xuICAgIH1cbiAgICBzd2lwZXIuZW1pdCgnZW5hYmxlJyk7XG4gIH1cbiAgZGlzYWJsZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICghc3dpcGVyLmVuYWJsZWQpIHJldHVybjtcbiAgICBzd2lwZXIuZW5hYmxlZCA9IGZhbHNlO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmdyYWJDdXJzb3IpIHtcbiAgICAgIHN3aXBlci51bnNldEdyYWJDdXJzb3IoKTtcbiAgICB9XG4gICAgc3dpcGVyLmVtaXQoJ2Rpc2FibGUnKTtcbiAgfVxuICBzZXRQcm9ncmVzcyhwcm9ncmVzcywgc3BlZWQpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIHByb2dyZXNzID0gTWF0aC5taW4oTWF0aC5tYXgocHJvZ3Jlc3MsIDApLCAxKTtcbiAgICBjb25zdCBtaW4gPSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG4gICAgY29uc3QgbWF4ID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpO1xuICAgIGNvbnN0IGN1cnJlbnQgPSAobWF4IC0gbWluKSAqIHByb2dyZXNzICsgbWluO1xuICAgIHN3aXBlci50cmFuc2xhdGVUbyhjdXJyZW50LCB0eXBlb2Ygc3BlZWQgPT09ICd1bmRlZmluZWQnID8gMCA6IHNwZWVkKTtcbiAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICB9XG4gIGVtaXRDb250YWluZXJDbGFzc2VzKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLl9lbWl0Q2xhc3NlcyB8fCAhc3dpcGVyLmVsKSByZXR1cm47XG4gICAgY29uc3QgY2xzID0gc3dpcGVyLmVsLmNsYXNzTmFtZS5zcGxpdCgnICcpLmZpbHRlcihjbGFzc05hbWUgPT4ge1xuICAgICAgcmV0dXJuIGNsYXNzTmFtZS5pbmRleE9mKCdzd2lwZXInKSA9PT0gMCB8fCBjbGFzc05hbWUuaW5kZXhPZihzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MpID09PSAwO1xuICAgIH0pO1xuICAgIHN3aXBlci5lbWl0KCdfY29udGFpbmVyQ2xhc3NlcycsIGNscy5qb2luKCcgJykpO1xuICB9XG4gIGdldFNsaWRlQ2xhc3NlcyhzbGlkZUVsKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuICcnO1xuICAgIHJldHVybiBzbGlkZUVsLmNsYXNzTmFtZS5zcGxpdCgnICcpLmZpbHRlcihjbGFzc05hbWUgPT4ge1xuICAgICAgcmV0dXJuIGNsYXNzTmFtZS5pbmRleE9mKCdzd2lwZXItc2xpZGUnKSA9PT0gMCB8fCBjbGFzc05hbWUuaW5kZXhPZihzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3MpID09PSAwO1xuICAgIH0pLmpvaW4oJyAnKTtcbiAgfVxuICBlbWl0U2xpZGVzQ2xhc3NlcygpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5fZW1pdENsYXNzZXMgfHwgIXN3aXBlci5lbCkgcmV0dXJuO1xuICAgIGNvbnN0IHVwZGF0ZXMgPSBbXTtcbiAgICBzd2lwZXIuc2xpZGVzLmZvckVhY2goc2xpZGVFbCA9PiB7XG4gICAgICBjb25zdCBjbGFzc05hbWVzID0gc3dpcGVyLmdldFNsaWRlQ2xhc3NlcyhzbGlkZUVsKTtcbiAgICAgIHVwZGF0ZXMucHVzaCh7XG4gICAgICAgIHNsaWRlRWwsXG4gICAgICAgIGNsYXNzTmFtZXNcbiAgICAgIH0pO1xuICAgICAgc3dpcGVyLmVtaXQoJ19zbGlkZUNsYXNzJywgc2xpZGVFbCwgY2xhc3NOYW1lcyk7XG4gICAgfSk7XG4gICAgc3dpcGVyLmVtaXQoJ19zbGlkZUNsYXNzZXMnLCB1cGRhdGVzKTtcbiAgfVxuICBzbGlkZXNQZXJWaWV3RHluYW1pYyh2aWV3LCBleGFjdCkge1xuICAgIGlmICh2aWV3ID09PSB2b2lkIDApIHtcbiAgICAgIHZpZXcgPSAnY3VycmVudCc7XG4gICAgfVxuICAgIGlmIChleGFjdCA9PT0gdm9pZCAwKSB7XG4gICAgICBleGFjdCA9IGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHtcbiAgICAgIHBhcmFtcyxcbiAgICAgIHNsaWRlcyxcbiAgICAgIHNsaWRlc0dyaWQsXG4gICAgICBzbGlkZXNTaXplc0dyaWQsXG4gICAgICBzaXplOiBzd2lwZXJTaXplLFxuICAgICAgYWN0aXZlSW5kZXhcbiAgICB9ID0gc3dpcGVyO1xuICAgIGxldCBzcHYgPSAxO1xuICAgIGlmICh0eXBlb2YgcGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdudW1iZXInKSByZXR1cm4gcGFyYW1zLnNsaWRlc1BlclZpZXc7XG4gICAgaWYgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgbGV0IHNsaWRlU2l6ZSA9IHNsaWRlc1thY3RpdmVJbmRleF0gPyBNYXRoLmNlaWwoc2xpZGVzW2FjdGl2ZUluZGV4XS5zd2lwZXJTbGlkZVNpemUpIDogMDtcbiAgICAgIGxldCBicmVha0xvb3A7XG4gICAgICBmb3IgKGxldCBpID0gYWN0aXZlSW5kZXggKyAxOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmIChzbGlkZXNbaV0gJiYgIWJyZWFrTG9vcCkge1xuICAgICAgICAgIHNsaWRlU2l6ZSArPSBNYXRoLmNlaWwoc2xpZGVzW2ldLnN3aXBlclNsaWRlU2l6ZSk7XG4gICAgICAgICAgc3B2ICs9IDE7XG4gICAgICAgICAgaWYgKHNsaWRlU2l6ZSA+IHN3aXBlclNpemUpIGJyZWFrTG9vcCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZvciAobGV0IGkgPSBhY3RpdmVJbmRleCAtIDE7IGkgPj0gMDsgaSAtPSAxKSB7XG4gICAgICAgIGlmIChzbGlkZXNbaV0gJiYgIWJyZWFrTG9vcCkge1xuICAgICAgICAgIHNsaWRlU2l6ZSArPSBzbGlkZXNbaV0uc3dpcGVyU2xpZGVTaXplO1xuICAgICAgICAgIHNwdiArPSAxO1xuICAgICAgICAgIGlmIChzbGlkZVNpemUgPiBzd2lwZXJTaXplKSBicmVha0xvb3AgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgaWYgKHZpZXcgPT09ICdjdXJyZW50Jykge1xuICAgICAgICBmb3IgKGxldCBpID0gYWN0aXZlSW5kZXggKyAxOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgY29uc3Qgc2xpZGVJblZpZXcgPSBleGFjdCA/IHNsaWRlc0dyaWRbaV0gKyBzbGlkZXNTaXplc0dyaWRbaV0gLSBzbGlkZXNHcmlkW2FjdGl2ZUluZGV4XSA8IHN3aXBlclNpemUgOiBzbGlkZXNHcmlkW2ldIC0gc2xpZGVzR3JpZFthY3RpdmVJbmRleF0gPCBzd2lwZXJTaXplO1xuICAgICAgICAgIGlmIChzbGlkZUluVmlldykge1xuICAgICAgICAgICAgc3B2ICs9IDE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBwcmV2aW91c1xuICAgICAgICBmb3IgKGxldCBpID0gYWN0aXZlSW5kZXggLSAxOyBpID49IDA7IGkgLT0gMSkge1xuICAgICAgICAgIGNvbnN0IHNsaWRlSW5WaWV3ID0gc2xpZGVzR3JpZFthY3RpdmVJbmRleF0gLSBzbGlkZXNHcmlkW2ldIDwgc3dpcGVyU2l6ZTtcbiAgICAgICAgICBpZiAoc2xpZGVJblZpZXcpIHtcbiAgICAgICAgICAgIHNwdiArPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3B2O1xuICB9XG4gIHVwZGF0ZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICBjb25zdCB7XG4gICAgICBzbmFwR3JpZCxcbiAgICAgIHBhcmFtc1xuICAgIH0gPSBzd2lwZXI7XG4gICAgLy8gQnJlYWtwb2ludHNcbiAgICBpZiAocGFyYW1zLmJyZWFrcG9pbnRzKSB7XG4gICAgICBzd2lwZXIuc2V0QnJlYWtwb2ludCgpO1xuICAgIH1cbiAgICBbLi4uc3dpcGVyLmVsLnF1ZXJ5U2VsZWN0b3JBbGwoJ1tsb2FkaW5nPVwibGF6eVwiXScpXS5mb3JFYWNoKGltYWdlRWwgPT4ge1xuICAgICAgaWYgKGltYWdlRWwuY29tcGxldGUpIHtcbiAgICAgICAgcHJvY2Vzc0xhenlQcmVsb2FkZXIoc3dpcGVyLCBpbWFnZUVsKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBzd2lwZXIudXBkYXRlU2l6ZSgpO1xuICAgIHN3aXBlci51cGRhdGVTbGlkZXMoKTtcbiAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MoKTtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgIGZ1bmN0aW9uIHNldFRyYW5zbGF0ZSgpIHtcbiAgICAgIGNvbnN0IHRyYW5zbGF0ZVZhbHVlID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZSA/IHN3aXBlci50cmFuc2xhdGUgKiAtMSA6IHN3aXBlci50cmFuc2xhdGU7XG4gICAgICBjb25zdCBuZXdUcmFuc2xhdGUgPSBNYXRoLm1pbihNYXRoLm1heCh0cmFuc2xhdGVWYWx1ZSwgc3dpcGVyLm1heFRyYW5zbGF0ZSgpKSwgc3dpcGVyLm1pblRyYW5zbGF0ZSgpKTtcbiAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUobmV3VHJhbnNsYXRlKTtcbiAgICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICB9XG4gICAgbGV0IHRyYW5zbGF0ZWQ7XG4gICAgaWYgKHBhcmFtcy5mcmVlTW9kZSAmJiBwYXJhbXMuZnJlZU1vZGUuZW5hYmxlZCAmJiAhcGFyYW1zLmNzc01vZGUpIHtcbiAgICAgIHNldFRyYW5zbGF0ZSgpO1xuICAgICAgaWYgKHBhcmFtcy5hdXRvSGVpZ2h0KSB7XG4gICAgICAgIHN3aXBlci51cGRhdGVBdXRvSGVpZ2h0KCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICgocGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyB8fCBwYXJhbXMuc2xpZGVzUGVyVmlldyA+IDEpICYmIHN3aXBlci5pc0VuZCAmJiAhcGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICAgIGNvbnN0IHNsaWRlcyA9IHN3aXBlci52aXJ0dWFsICYmIHBhcmFtcy52aXJ0dWFsLmVuYWJsZWQgPyBzd2lwZXIudmlydHVhbC5zbGlkZXMgOiBzd2lwZXIuc2xpZGVzO1xuICAgICAgICB0cmFuc2xhdGVkID0gc3dpcGVyLnNsaWRlVG8oc2xpZGVzLmxlbmd0aCAtIDEsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRyYW5zbGF0ZWQgPSBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXgsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICAgIH1cbiAgICAgIGlmICghdHJhbnNsYXRlZCkge1xuICAgICAgICBzZXRUcmFuc2xhdGUoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHNuYXBHcmlkICE9PSBzd2lwZXIuc25hcEdyaWQpIHtcbiAgICAgIHN3aXBlci5jaGVja092ZXJmbG93KCk7XG4gICAgfVxuICAgIHN3aXBlci5lbWl0KCd1cGRhdGUnKTtcbiAgfVxuICBjaGFuZ2VEaXJlY3Rpb24obmV3RGlyZWN0aW9uLCBuZWVkVXBkYXRlKSB7XG4gICAgaWYgKG5lZWRVcGRhdGUgPT09IHZvaWQgMCkge1xuICAgICAgbmVlZFVwZGF0ZSA9IHRydWU7XG4gICAgfVxuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgY3VycmVudERpcmVjdGlvbiA9IHN3aXBlci5wYXJhbXMuZGlyZWN0aW9uO1xuICAgIGlmICghbmV3RGlyZWN0aW9uKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIG5ld0RpcmVjdGlvbiA9IGN1cnJlbnREaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJyA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCc7XG4gICAgfVxuICAgIGlmIChuZXdEaXJlY3Rpb24gPT09IGN1cnJlbnREaXJlY3Rpb24gfHwgbmV3RGlyZWN0aW9uICE9PSAnaG9yaXpvbnRhbCcgJiYgbmV3RGlyZWN0aW9uICE9PSAndmVydGljYWwnKSB7XG4gICAgICByZXR1cm4gc3dpcGVyO1xuICAgIH1cbiAgICBzd2lwZXIuZWwuY2xhc3NMaXN0LnJlbW92ZShgJHtzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9JHtjdXJyZW50RGlyZWN0aW9ufWApO1xuICAgIHN3aXBlci5lbC5jbGFzc0xpc3QuYWRkKGAke3N3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc30ke25ld0RpcmVjdGlvbn1gKTtcbiAgICBzd2lwZXIuZW1pdENvbnRhaW5lckNsYXNzZXMoKTtcbiAgICBzd2lwZXIucGFyYW1zLmRpcmVjdGlvbiA9IG5ld0RpcmVjdGlvbjtcbiAgICBzd2lwZXIuc2xpZGVzLmZvckVhY2goc2xpZGVFbCA9PiB7XG4gICAgICBpZiAobmV3RGlyZWN0aW9uID09PSAndmVydGljYWwnKSB7XG4gICAgICAgIHNsaWRlRWwuc3R5bGUud2lkdGggPSAnJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNsaWRlRWwuc3R5bGUuaGVpZ2h0ID0gJyc7XG4gICAgICB9XG4gICAgfSk7XG4gICAgc3dpcGVyLmVtaXQoJ2NoYW5nZURpcmVjdGlvbicpO1xuICAgIGlmIChuZWVkVXBkYXRlKSBzd2lwZXIudXBkYXRlKCk7XG4gICAgcmV0dXJuIHN3aXBlcjtcbiAgfVxuICBjaGFuZ2VMYW5ndWFnZURpcmVjdGlvbihkaXJlY3Rpb24pIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmIChzd2lwZXIucnRsICYmIGRpcmVjdGlvbiA9PT0gJ3J0bCcgfHwgIXN3aXBlci5ydGwgJiYgZGlyZWN0aW9uID09PSAnbHRyJykgcmV0dXJuO1xuICAgIHN3aXBlci5ydGwgPSBkaXJlY3Rpb24gPT09ICdydGwnO1xuICAgIHN3aXBlci5ydGxUcmFuc2xhdGUgPSBzd2lwZXIucGFyYW1zLmRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnICYmIHN3aXBlci5ydGw7XG4gICAgaWYgKHN3aXBlci5ydGwpIHtcbiAgICAgIHN3aXBlci5lbC5jbGFzc0xpc3QuYWRkKGAke3N3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc31ydGxgKTtcbiAgICAgIHN3aXBlci5lbC5kaXIgPSAncnRsJztcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLmVsLmNsYXNzTGlzdC5yZW1vdmUoYCR7c3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfXJ0bGApO1xuICAgICAgc3dpcGVyLmVsLmRpciA9ICdsdHInO1xuICAgIH1cbiAgICBzd2lwZXIudXBkYXRlKCk7XG4gIH1cbiAgbW91bnQoZWxlbWVudCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKHN3aXBlci5tb3VudGVkKSByZXR1cm4gdHJ1ZTtcblxuICAgIC8vIEZpbmQgZWxcbiAgICBsZXQgZWwgPSBlbGVtZW50IHx8IHN3aXBlci5wYXJhbXMuZWw7XG4gICAgaWYgKHR5cGVvZiBlbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlbCk7XG4gICAgfVxuICAgIGlmICghZWwpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZWwuc3dpcGVyID0gc3dpcGVyO1xuICAgIGlmIChlbC5wYXJlbnROb2RlICYmIGVsLnBhcmVudE5vZGUuaG9zdCAmJiBlbC5wYXJlbnROb2RlLmhvc3Qubm9kZU5hbWUgPT09IHN3aXBlci5wYXJhbXMuc3dpcGVyRWxlbWVudE5vZGVOYW1lLnRvVXBwZXJDYXNlKCkpIHtcbiAgICAgIHN3aXBlci5pc0VsZW1lbnQgPSB0cnVlO1xuICAgIH1cbiAgICBjb25zdCBnZXRXcmFwcGVyU2VsZWN0b3IgPSAoKSA9PiB7XG4gICAgICByZXR1cm4gYC4keyhzd2lwZXIucGFyYW1zLndyYXBwZXJDbGFzcyB8fCAnJykudHJpbSgpLnNwbGl0KCcgJykuam9pbignLicpfWA7XG4gICAgfTtcbiAgICBjb25zdCBnZXRXcmFwcGVyID0gKCkgPT4ge1xuICAgICAgaWYgKGVsICYmIGVsLnNoYWRvd1Jvb3QgJiYgZWwuc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKSB7XG4gICAgICAgIGNvbnN0IHJlcyA9IGVsLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcihnZXRXcmFwcGVyU2VsZWN0b3IoKSk7XG4gICAgICAgIC8vIENoaWxkcmVuIG5lZWRzIHRvIHJldHVybiBzbG90IGl0ZW1zXG4gICAgICAgIHJldHVybiByZXM7XG4gICAgICB9XG4gICAgICByZXR1cm4gZWxlbWVudENoaWxkcmVuKGVsLCBnZXRXcmFwcGVyU2VsZWN0b3IoKSlbMF07XG4gICAgfTtcbiAgICAvLyBGaW5kIFdyYXBwZXJcbiAgICBsZXQgd3JhcHBlckVsID0gZ2V0V3JhcHBlcigpO1xuICAgIGlmICghd3JhcHBlckVsICYmIHN3aXBlci5wYXJhbXMuY3JlYXRlRWxlbWVudHMpIHtcbiAgICAgIHdyYXBwZXJFbCA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHN3aXBlci5wYXJhbXMud3JhcHBlckNsYXNzKTtcbiAgICAgIGVsLmFwcGVuZCh3cmFwcGVyRWwpO1xuICAgICAgZWxlbWVudENoaWxkcmVuKGVsLCBgLiR7c3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzfWApLmZvckVhY2goc2xpZGVFbCA9PiB7XG4gICAgICAgIHdyYXBwZXJFbC5hcHBlbmQoc2xpZGVFbCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgT2JqZWN0LmFzc2lnbihzd2lwZXIsIHtcbiAgICAgIGVsLFxuICAgICAgd3JhcHBlckVsLFxuICAgICAgc2xpZGVzRWw6IHN3aXBlci5pc0VsZW1lbnQgJiYgIWVsLnBhcmVudE5vZGUuaG9zdC5zbGlkZVNsb3RzID8gZWwucGFyZW50Tm9kZS5ob3N0IDogd3JhcHBlckVsLFxuICAgICAgaG9zdEVsOiBzd2lwZXIuaXNFbGVtZW50ID8gZWwucGFyZW50Tm9kZS5ob3N0IDogZWwsXG4gICAgICBtb3VudGVkOiB0cnVlLFxuICAgICAgLy8gUlRMXG4gICAgICBydGw6IGVsLmRpci50b0xvd2VyQ2FzZSgpID09PSAncnRsJyB8fCBlbGVtZW50U3R5bGUoZWwsICdkaXJlY3Rpb24nKSA9PT0gJ3J0bCcsXG4gICAgICBydGxUcmFuc2xhdGU6IHN3aXBlci5wYXJhbXMuZGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcgJiYgKGVsLmRpci50b0xvd2VyQ2FzZSgpID09PSAncnRsJyB8fCBlbGVtZW50U3R5bGUoZWwsICdkaXJlY3Rpb24nKSA9PT0gJ3J0bCcpLFxuICAgICAgd3JvbmdSVEw6IGVsZW1lbnRTdHlsZSh3cmFwcGVyRWwsICdkaXNwbGF5JykgPT09ICctd2Via2l0LWJveCdcbiAgICB9KTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpbml0KGVsKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoc3dpcGVyLmluaXRpYWxpemVkKSByZXR1cm4gc3dpcGVyO1xuICAgIGNvbnN0IG1vdW50ZWQgPSBzd2lwZXIubW91bnQoZWwpO1xuICAgIGlmIChtb3VudGVkID09PSBmYWxzZSkgcmV0dXJuIHN3aXBlcjtcbiAgICBzd2lwZXIuZW1pdCgnYmVmb3JlSW5pdCcpO1xuXG4gICAgLy8gU2V0IGJyZWFrcG9pbnRcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5icmVha3BvaW50cykge1xuICAgICAgc3dpcGVyLnNldEJyZWFrcG9pbnQoKTtcbiAgICB9XG5cbiAgICAvLyBBZGQgQ2xhc3Nlc1xuICAgIHN3aXBlci5hZGRDbGFzc2VzKCk7XG5cbiAgICAvLyBVcGRhdGUgc2l6ZVxuICAgIHN3aXBlci51cGRhdGVTaXplKCk7XG5cbiAgICAvLyBVcGRhdGUgc2xpZGVzXG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlcygpO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cpIHtcbiAgICAgIHN3aXBlci5jaGVja092ZXJmbG93KCk7XG4gICAgfVxuXG4gICAgLy8gU2V0IEdyYWIgQ3Vyc29yXG4gICAgaWYgKHN3aXBlci5wYXJhbXMuZ3JhYkN1cnNvciAmJiBzd2lwZXIuZW5hYmxlZCkge1xuICAgICAgc3dpcGVyLnNldEdyYWJDdXJzb3IoKTtcbiAgICB9XG5cbiAgICAvLyBTbGlkZSBUbyBJbml0aWFsIFNsaWRlXG4gICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCAmJiBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCkge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnBhcmFtcy5pbml0aWFsU2xpZGUgKyBzd2lwZXIudmlydHVhbC5zbGlkZXNCZWZvcmUsIDAsIHN3aXBlci5wYXJhbXMucnVuQ2FsbGJhY2tzT25Jbml0LCBmYWxzZSwgdHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5wYXJhbXMuaW5pdGlhbFNsaWRlLCAwLCBzd2lwZXIucGFyYW1zLnJ1bkNhbGxiYWNrc09uSW5pdCwgZmFsc2UsIHRydWUpO1xuICAgIH1cblxuICAgIC8vIENyZWF0ZSBsb29wXG4gICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgc3dpcGVyLmxvb3BDcmVhdGUoKTtcbiAgICB9XG5cbiAgICAvLyBBdHRhY2ggZXZlbnRzXG4gICAgc3dpcGVyLmF0dGFjaEV2ZW50cygpO1xuICAgIGNvbnN0IGxhenlFbGVtZW50cyA9IFsuLi5zd2lwZXIuZWwucXVlcnlTZWxlY3RvckFsbCgnW2xvYWRpbmc9XCJsYXp5XCJdJyldO1xuICAgIGlmIChzd2lwZXIuaXNFbGVtZW50KSB7XG4gICAgICBsYXp5RWxlbWVudHMucHVzaCguLi5zd2lwZXIuaG9zdEVsLnF1ZXJ5U2VsZWN0b3JBbGwoJ1tsb2FkaW5nPVwibGF6eVwiXScpKTtcbiAgICB9XG4gICAgbGF6eUVsZW1lbnRzLmZvckVhY2goaW1hZ2VFbCA9PiB7XG4gICAgICBpZiAoaW1hZ2VFbC5jb21wbGV0ZSkge1xuICAgICAgICBwcm9jZXNzTGF6eVByZWxvYWRlcihzd2lwZXIsIGltYWdlRWwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW1hZ2VFbC5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgZSA9PiB7XG4gICAgICAgICAgcHJvY2Vzc0xhenlQcmVsb2FkZXIoc3dpcGVyLCBlLnRhcmdldCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHByZWxvYWQoc3dpcGVyKTtcblxuICAgIC8vIEluaXQgRmxhZ1xuICAgIHN3aXBlci5pbml0aWFsaXplZCA9IHRydWU7XG4gICAgcHJlbG9hZChzd2lwZXIpO1xuXG4gICAgLy8gRW1pdFxuICAgIHN3aXBlci5lbWl0KCdpbml0Jyk7XG4gICAgc3dpcGVyLmVtaXQoJ2FmdGVySW5pdCcpO1xuICAgIHJldHVybiBzd2lwZXI7XG4gIH1cbiAgZGVzdHJveShkZWxldGVJbnN0YW5jZSwgY2xlYW5TdHlsZXMpIHtcbiAgICBpZiAoZGVsZXRlSW5zdGFuY2UgPT09IHZvaWQgMCkge1xuICAgICAgZGVsZXRlSW5zdGFuY2UgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoY2xlYW5TdHlsZXMgPT09IHZvaWQgMCkge1xuICAgICAgY2xlYW5TdHlsZXMgPSB0cnVlO1xuICAgIH1cbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHtcbiAgICAgIHBhcmFtcyxcbiAgICAgIGVsLFxuICAgICAgd3JhcHBlckVsLFxuICAgICAgc2xpZGVzXG4gICAgfSA9IHN3aXBlcjtcbiAgICBpZiAodHlwZW9mIHN3aXBlci5wYXJhbXMgPT09ICd1bmRlZmluZWQnIHx8IHN3aXBlci5kZXN0cm95ZWQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBzd2lwZXIuZW1pdCgnYmVmb3JlRGVzdHJveScpO1xuXG4gICAgLy8gSW5pdCBGbGFnXG4gICAgc3dpcGVyLmluaXRpYWxpemVkID0gZmFsc2U7XG5cbiAgICAvLyBEZXRhY2ggZXZlbnRzXG4gICAgc3dpcGVyLmRldGFjaEV2ZW50cygpO1xuXG4gICAgLy8gRGVzdHJveSBsb29wXG4gICAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgICBzd2lwZXIubG9vcERlc3Ryb3koKTtcbiAgICB9XG5cbiAgICAvLyBDbGVhbnVwIHN0eWxlc1xuICAgIGlmIChjbGVhblN0eWxlcykge1xuICAgICAgc3dpcGVyLnJlbW92ZUNsYXNzZXMoKTtcbiAgICAgIGlmIChlbCAmJiB0eXBlb2YgZWwgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZSgnc3R5bGUnKTtcbiAgICAgIH1cbiAgICAgIGlmICh3cmFwcGVyRWwpIHtcbiAgICAgICAgd3JhcHBlckVsLnJlbW92ZUF0dHJpYnV0ZSgnc3R5bGUnKTtcbiAgICAgIH1cbiAgICAgIGlmIChzbGlkZXMgJiYgc2xpZGVzLmxlbmd0aCkge1xuICAgICAgICBzbGlkZXMuZm9yRWFjaChzbGlkZUVsID0+IHtcbiAgICAgICAgICBzbGlkZUVsLmNsYXNzTGlzdC5yZW1vdmUocGFyYW1zLnNsaWRlVmlzaWJsZUNsYXNzLCBwYXJhbXMuc2xpZGVGdWxseVZpc2libGVDbGFzcywgcGFyYW1zLnNsaWRlQWN0aXZlQ2xhc3MsIHBhcmFtcy5zbGlkZU5leHRDbGFzcywgcGFyYW1zLnNsaWRlUHJldkNsYXNzKTtcbiAgICAgICAgICBzbGlkZUVsLnJlbW92ZUF0dHJpYnV0ZSgnc3R5bGUnKTtcbiAgICAgICAgICBzbGlkZUVsLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIHN3aXBlci5lbWl0KCdkZXN0cm95Jyk7XG5cbiAgICAvLyBEZXRhY2ggZW1pdHRlciBldmVudHNcbiAgICBPYmplY3Qua2V5cyhzd2lwZXIuZXZlbnRzTGlzdGVuZXJzKS5mb3JFYWNoKGV2ZW50TmFtZSA9PiB7XG4gICAgICBzd2lwZXIub2ZmKGV2ZW50TmFtZSk7XG4gICAgfSk7XG4gICAgaWYgKGRlbGV0ZUluc3RhbmNlICE9PSBmYWxzZSkge1xuICAgICAgaWYgKHN3aXBlci5lbCAmJiB0eXBlb2Ygc3dpcGVyLmVsICE9PSAnc3RyaW5nJykge1xuICAgICAgICBzd2lwZXIuZWwuc3dpcGVyID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIGRlbGV0ZVByb3BzKHN3aXBlcik7XG4gICAgfVxuICAgIHN3aXBlci5kZXN0cm95ZWQgPSB0cnVlO1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHN0YXRpYyBleHRlbmREZWZhdWx0cyhuZXdEZWZhdWx0cykge1xuICAgIGV4dGVuZChleHRlbmRlZERlZmF1bHRzLCBuZXdEZWZhdWx0cyk7XG4gIH1cbiAgc3RhdGljIGdldCBleHRlbmRlZERlZmF1bHRzKCkge1xuICAgIHJldHVybiBleHRlbmRlZERlZmF1bHRzO1xuICB9XG4gIHN0YXRpYyBnZXQgZGVmYXVsdHMoKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRzO1xuICB9XG4gIHN0YXRpYyBpbnN0YWxsTW9kdWxlKG1vZCkge1xuICAgIGlmICghU3dpcGVyLnByb3RvdHlwZS5fX21vZHVsZXNfXykgU3dpcGVyLnByb3RvdHlwZS5fX21vZHVsZXNfXyA9IFtdO1xuICAgIGNvbnN0IG1vZHVsZXMgPSBTd2lwZXIucHJvdG90eXBlLl9fbW9kdWxlc19fO1xuICAgIGlmICh0eXBlb2YgbW9kID09PSAnZnVuY3Rpb24nICYmIG1vZHVsZXMuaW5kZXhPZihtb2QpIDwgMCkge1xuICAgICAgbW9kdWxlcy5wdXNoKG1vZCk7XG4gICAgfVxuICB9XG4gIHN0YXRpYyB1c2UobW9kdWxlKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkobW9kdWxlKSkge1xuICAgICAgbW9kdWxlLmZvckVhY2gobSA9PiBTd2lwZXIuaW5zdGFsbE1vZHVsZShtKSk7XG4gICAgICByZXR1cm4gU3dpcGVyO1xuICAgIH1cbiAgICBTd2lwZXIuaW5zdGFsbE1vZHVsZShtb2R1bGUpO1xuICAgIHJldHVybiBTd2lwZXI7XG4gIH1cbn1cbk9iamVjdC5rZXlzKHByb3RvdHlwZXMpLmZvckVhY2gocHJvdG90eXBlR3JvdXAgPT4ge1xuICBPYmplY3Qua2V5cyhwcm90b3R5cGVzW3Byb3RvdHlwZUdyb3VwXSkuZm9yRWFjaChwcm90b01ldGhvZCA9PiB7XG4gICAgU3dpcGVyLnByb3RvdHlwZVtwcm90b01ldGhvZF0gPSBwcm90b3R5cGVzW3Byb3RvdHlwZUdyb3VwXVtwcm90b01ldGhvZF07XG4gIH0pO1xufSk7XG5Td2lwZXIudXNlKFtSZXNpemUsIE9ic2VydmVyXSk7XG5cbmV4cG9ydCB7IFN3aXBlciBhcyBTLCBkZWZhdWx0cyBhcyBkIH07XG4iXSwibmFtZXMiOlsic3dpcGVyIiwib3JpZ2luYWxQYXJhbXMiLCJwYXJhbXMiLCJjaGVja1Byb3BzIiwiY3JlYXRlRWxlbWVudHMiLCJPYmplY3QiLCJrZXlzIiwiZm9yRWFjaCIsImtleSIsImF1dG8iLCJlbGVtZW50IiwiZSIsImVsIiwiYyIsImNsYXNzTmFtZSIsImFwcGVuZCIsIk5hdmlnYXRpb24iLCJfcmVmIiwiZXh0ZW5kUGFyYW1zIiwib24iLCJlbWl0IiwiZ2V0RWwiLCJyZXMiLCJpc0VsZW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwidW5pcXVlTmF2RWxlbWVudHMiLCJsZW5ndGgiLCJ0b2dnbGVFbCIsImRpc2FibGVkIiwibmF2aWdhdGlvbiIsIm0iLCJzdWJFbCIsImNsYXNzTGlzdCIsImRpc2FibGVkQ2xhc3MiLCJzcGxpdCIsInRhZ05hbWUiLCJ3YXRjaE92ZXJmbG93IiwiZW5hYmxlZCIsImlzTG9ja2VkIiwibG9ja0NsYXNzIiwidXBkYXRlIiwibmV4dEVsIiwicHJldkVsIiwibG9vcCIsImlzQmVnaW5uaW5nIiwicmV3aW5kIiwiaXNFbmQiLCJvblByZXZDbGljayIsInByZXZlbnREZWZhdWx0Iiwic2xpZGVQcmV2Iiwib25OZXh0Q2xpY2siLCJzbGlkZU5leHQiLCJpbml0IiwiYXNzaWduIiwiaW5pdEJ1dHRvbiIsImRpciIsImFkZEV2ZW50TGlzdGVuZXIiLCJhZGQiLCJkZXN0cm95IiwiZGVzdHJveUJ1dHRvbiIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJyZW1vdmUiLCJoaWRlT25DbGljayIsImhpZGRlbkNsYXNzIiwibmF2aWdhdGlvbkRpc2FibGVkQ2xhc3MiLCJkaXNhYmxlIiwiZmlsdGVyIiwiX3MiLCJ0YXJnZXRFbCIsInRhcmdldCIsInRhcmdldElzQnV0dG9uIiwiaW5jbHVkZXMiLCJwYXRoIiwiY29tcG9zZWRQYXRoIiwiZmluZCIsInBhdGhFbCIsInBhZ2luYXRpb24iLCJjbGlja2FibGUiLCJjb250YWlucyIsImlzSGlkZGVuIiwidG9nZ2xlIiwiZW5hYmxlIiwiY2xhc3NlcyIsInRyaW0iLCJyZXBsYWNlIiwiUGFnaW5hdGlvbiIsInBmeCIsImJ1bGxldFNpemUiLCJidWxsZXRFbGVtZW50IiwicmVuZGVyQnVsbGV0IiwicmVuZGVyUHJvZ3Jlc3NiYXIiLCJyZW5kZXJGcmFjdGlvbiIsInJlbmRlckN1c3RvbSIsInByb2dyZXNzYmFyT3Bwb3NpdGUiLCJ0eXBlIiwiZHluYW1pY0J1bGxldHMiLCJkeW5hbWljTWFpbkJ1bGxldHMiLCJmb3JtYXRGcmFjdGlvbkN1cnJlbnQiLCJudW1iZXIiLCJmb3JtYXRGcmFjdGlvblRvdGFsIiwiYnVsbGV0Q2xhc3MiLCJidWxsZXRBY3RpdmVDbGFzcyIsIm1vZGlmaWVyQ2xhc3MiLCJjdXJyZW50Q2xhc3MiLCJ0b3RhbENsYXNzIiwicHJvZ3Jlc3NiYXJGaWxsQ2xhc3MiLCJwcm9ncmVzc2Jhck9wcG9zaXRlQ2xhc3MiLCJjbGlja2FibGVDbGFzcyIsImhvcml6b250YWxDbGFzcyIsInZlcnRpY2FsQ2xhc3MiLCJwYWdpbmF0aW9uRGlzYWJsZWRDbGFzcyIsImJ1bGxldHMiLCJkeW5hbWljQnVsbGV0SW5kZXgiLCJpc1BhZ2luYXRpb25EaXNhYmxlZCIsIkFycmF5IiwiaXNBcnJheSIsInNldFNpZGVCdWxsZXRzIiwiYnVsbGV0RWwiLCJwb3NpdGlvbiIsIm9uQnVsbGV0Q2xpY2siLCJjbG9zZXN0IiwiaW5kZXgiLCJzbGlkZXNQZXJHcm91cCIsInJlYWxJbmRleCIsInNsaWRlVG9Mb29wIiwic2xpZGVUbyIsInJ0bCIsImN1cnJlbnQiLCJwcmV2aW91c0luZGV4Iiwic2xpZGVzTGVuZ3RoIiwidmlydHVhbCIsInNsaWRlcyIsInRvdGFsIiwiTWF0aCIsImNlaWwiLCJzbmFwR3JpZCIsInByZXZpb3VzUmVhbEluZGV4IiwiZmxvb3IiLCJzbmFwSW5kZXgiLCJwcmV2aW91c1NuYXBJbmRleCIsImFjdGl2ZUluZGV4IiwiZmlyc3RJbmRleCIsImxhc3RJbmRleCIsIm1pZEluZGV4IiwiaXNIb3Jpem9udGFsIiwic3R5bGUiLCJ1bmRlZmluZWQiLCJtYXgiLCJtaW4iLCJjbGFzc2VzVG9SZW1vdmUiLCJtYXAiLCJzdWZmaXgiLCJzIiwiZmxhdCIsImJ1bGxldCIsImJ1bGxldEluZGV4Iiwic2V0QXR0cmlidXRlIiwiZmlyc3REaXNwbGF5ZWRCdWxsZXQiLCJsYXN0RGlzcGxheWVkQnVsbGV0IiwiaSIsImR5bmFtaWNCdWxsZXRzTGVuZ3RoIiwiYnVsbGV0c09mZnNldCIsIm9mZnNldFByb3AiLCJzdWJFbEluZGV4IiwiZnJhY3Rpb25FbCIsInRleHRDb250ZW50IiwidG90YWxFbCIsInByb2dyZXNzYmFyRGlyZWN0aW9uIiwic2NhbGUiLCJzY2FsZVgiLCJzY2FsZVkiLCJwcm9ncmVzc0VsIiwidHJhbnNmb3JtIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwic3BlZWQiLCJpbm5lckhUTUwiLCJyZW5kZXIiLCJncmlkIiwicm93cyIsInBhZ2luYXRpb25IVE1MIiwibnVtYmVyT2ZCdWxsZXRzIiwiZnJlZU1vZGUiLCJjYWxsIiwicHVzaCIsIkF1dG9wbGF5IiwidGltZW91dCIsInJhZiIsImF1dG9wbGF5IiwicnVubmluZyIsInBhdXNlZCIsInRpbWVMZWZ0IiwiZGVsYXkiLCJ3YWl0Rm9yVHJhbnNpdGlvbiIsImRpc2FibGVPbkludGVyYWN0aW9uIiwic3RvcE9uTGFzdFNsaWRlIiwicmV2ZXJzZURpcmVjdGlvbiIsInBhdXNlT25Nb3VzZUVudGVyIiwiYXV0b3BsYXlUaW1lTGVmdCIsIndhc1BhdXNlZCIsImlzVG91Y2hlZCIsInBhdXNlZEJ5VG91Y2giLCJ0b3VjaFN0YXJ0VGltZW91dCIsInNsaWRlQ2hhbmdlZCIsInBhdXNlZEJ5SW50ZXJhY3Rpb24iLCJwYXVzZWRCeVBvaW50ZXJFbnRlciIsImF1dG9wbGF5RGVsYXlUb3RhbCIsImF1dG9wbGF5RGVsYXlDdXJyZW50IiwiYXV0b3BsYXlTdGFydFRpbWUiLCJEYXRlIiwiZ2V0VGltZSIsIm9uVHJhbnNpdGlvbkVuZCIsImRlc3Ryb3llZCIsIndyYXBwZXJFbCIsImRldGFpbCIsImJ5U3dpcGVyVG91Y2hNb3ZlIiwicmVzdW1lIiwiY2FsY1RpbWVMZWZ0IiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwicnVuIiwiZGVsYXlGb3JjZSIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwiY3VycmVudFNsaWRlRGVsYXkiLCJhY3RpdmVTbGlkZUVsIiwic2xpZGVFbCIsInBhcnNlSW50IiwiZ2V0QXR0cmlidXRlIiwiZ2V0U2xpZGVEZWxheSIsIk51bWJlciIsImlzTmFOIiwicHJvY2VlZCIsImNzc01vZGUiLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0Iiwic3RhcnQiLCJzdG9wIiwicGF1c2UiLCJpbnRlcm5hbCIsInJlc2V0Iiwib25WaXNpYmlsaXR5Q2hhbmdlIiwiZyIsInZpc2liaWxpdHlTdGF0ZSIsIm9uUG9pbnRlckVudGVyIiwicG9pbnRlclR5cGUiLCJhbmltYXRpbmciLCJvblBvaW50ZXJMZWF2ZSIsImlzT2JqZWN0Iiwib2JqIiwiY29uc3RydWN0b3IiLCJleHRlbmQiLCJzcmMiLCJzc3JEb2N1bWVudCIsImJvZHkiLCJhY3RpdmVFbGVtZW50IiwiYmx1ciIsIm5vZGVOYW1lIiwiZ2V0RWxlbWVudEJ5SWQiLCJjcmVhdGVFdmVudCIsImluaXRFdmVudCIsImNyZWF0ZUVsZW1lbnQiLCJjaGlsZHJlbiIsImNoaWxkTm9kZXMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImNyZWF0ZUVsZW1lbnROUyIsImltcG9ydE5vZGUiLCJsb2NhdGlvbiIsImhhc2giLCJob3N0IiwiaG9zdG5hbWUiLCJocmVmIiwib3JpZ2luIiwicGF0aG5hbWUiLCJwcm90b2NvbCIsInNlYXJjaCIsImdldERvY3VtZW50IiwiZG9jIiwic3NyV2luZG93IiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiaGlzdG9yeSIsInJlcGxhY2VTdGF0ZSIsInB1c2hTdGF0ZSIsImdvIiwiYmFjayIsIkN1c3RvbUV2ZW50IiwidGhpcyIsImdldENvbXB1dGVkU3R5bGUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwiSW1hZ2UiLCJzY3JlZW4iLCJtYXRjaE1lZGlhIiwiY2FsbGJhY2siLCJpZCIsImdldFdpbmRvdyIsIndpbiIsIndpbmRvdyIsImRlbGV0ZVByb3BzIiwib2JqZWN0IiwibmV4dFRpY2siLCJub3ciLCJnZXRUcmFuc2xhdGUiLCJheGlzIiwibWF0cml4IiwiY3VyVHJhbnNmb3JtIiwidHJhbnNmb3JtTWF0cml4IiwiY3VyU3R5bGUiLCJjdXJyZW50U3R5bGUiLCJXZWJLaXRDU1NNYXRyaXgiLCJ3ZWJraXRUcmFuc2Zvcm0iLCJhIiwiam9pbiIsIk1velRyYW5zZm9ybSIsIk9UcmFuc2Zvcm0iLCJNc1RyYW5zZm9ybSIsIm1zVHJhbnNmb3JtIiwidG9TdHJpbmciLCJtNDEiLCJwYXJzZUZsb2F0IiwibTQyIiwibyIsInByb3RvdHlwZSIsInNsaWNlIiwidG8iLCJhcmd1bWVudHMiLCJub0V4dGVuZCIsIm5leHRTb3VyY2UiLCJub2RlIiwiSFRNTEVsZW1lbnQiLCJub2RlVHlwZSIsImtleXNBcnJheSIsImluZGV4T2YiLCJuZXh0SW5kZXgiLCJsZW4iLCJuZXh0S2V5IiwiZGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJfX3N3aXBlcl9fIiwic2V0Q1NTUHJvcGVydHkiLCJ2YXJOYW1lIiwidmFyVmFsdWUiLCJzZXRQcm9wZXJ0eSIsImFuaW1hdGVDU1NNb2RlU2Nyb2xsIiwidGFyZ2V0UG9zaXRpb24iLCJzaWRlIiwic3RhcnRQb3NpdGlvbiIsInRyYW5zbGF0ZSIsInRpbWUiLCJzdGFydFRpbWUiLCJkdXJhdGlvbiIsInNjcm9sbFNuYXBUeXBlIiwiY3NzTW9kZUZyYW1lSUQiLCJpc091dE9mQm91bmQiLCJhbmltYXRlIiwicHJvZ3Jlc3MiLCJlYXNlUHJvZ3Jlc3MiLCJjb3MiLCJQSSIsImN1cnJlbnRQb3NpdGlvbiIsInNjcm9sbFRvIiwib3ZlcmZsb3ciLCJlbGVtZW50Q2hpbGRyZW4iLCJzZWxlY3RvciIsIm1hdGNoZXMiLCJzaG93V2FybmluZyIsInRleHQiLCJjb25zb2xlIiwid2FybiIsImVyciIsInRhZyIsImNsYXNzZXNUb1Rva2VucyIsImVsZW1lbnRQcmV2QWxsIiwicHJldkVscyIsInByZXZpb3VzRWxlbWVudFNpYmxpbmciLCJwcmV2IiwiZWxlbWVudE5leHRBbGwiLCJuZXh0RWxzIiwibmV4dEVsZW1lbnRTaWJsaW5nIiwibmV4dCIsImVsZW1lbnRTdHlsZSIsInByb3AiLCJlbGVtZW50SW5kZXgiLCJjaGlsZCIsInByZXZpb3VzU2libGluZyIsImVsZW1lbnRQYXJlbnRzIiwicGFyZW50cyIsInBhcmVudCIsInBhcmVudEVsZW1lbnQiLCJlbGVtZW50T3V0ZXJTaXplIiwic2l6ZSIsImluY2x1ZGVNYXJnaW5zIiwib2Zmc2V0V2lkdGgiLCJtYWtlRWxlbWVudHNBcnJheSIsInN1cHBvcnQiLCJkZXZpY2VDYWNoZWQiLCJicm93c2VyIiwiZ2V0U3VwcG9ydCIsInNtb290aFNjcm9sbCIsImRvY3VtZW50RWxlbWVudCIsInRvdWNoIiwiRG9jdW1lbnRUb3VjaCIsImNhbGNTdXBwb3J0IiwiZ2V0RGV2aWNlIiwib3ZlcnJpZGVzIiwiX3RlbXAiLCJwbGF0Zm9ybSIsInVhIiwiZGV2aWNlIiwiaW9zIiwiYW5kcm9pZCIsInNjcmVlbldpZHRoIiwid2lkdGgiLCJzY3JlZW5IZWlnaHQiLCJoZWlnaHQiLCJtYXRjaCIsImlwYWQiLCJpcG9kIiwiaXBob25lIiwid2luZG93cyIsIm1hY29zIiwib3MiLCJjYWxjRGV2aWNlIiwiZ2V0QnJvd3NlciIsIm5lZWRQZXJzcGVjdGl2ZUZpeCIsImlzU2FmYXJpIiwidG9Mb3dlckNhc2UiLCJTdHJpbmciLCJtYWpvciIsIm1pbm9yIiwibnVtIiwiaXNXZWJWaWV3IiwidGVzdCIsImlzU2FmYXJpQnJvd3NlciIsIm5lZWQzZEZpeCIsImNhbGNCcm93c2VyIiwiZXZlbnRzRW1pdHRlciIsImV2ZW50cyIsImhhbmRsZXIiLCJwcmlvcml0eSIsInNlbGYiLCJldmVudHNMaXN0ZW5lcnMiLCJtZXRob2QiLCJldmVudCIsIm9uY2UiLCJvbmNlSGFuZGxlciIsIm9mZiIsIl9fZW1pdHRlclByb3h5IiwiX2xlbiIsImFyZ3MiLCJfa2V5IiwiYXBwbHkiLCJvbkFueSIsImV2ZW50c0FueUxpc3RlbmVycyIsIm9mZkFueSIsInNwbGljZSIsImV2ZW50SGFuZGxlciIsImRhdGEiLCJjb250ZXh0IiwiX2xlbjIiLCJfa2V5MiIsInVuc2hpZnQiLCJ0b2dnbGVTbGlkZUNsYXNzZXMkMSIsImNvbmRpdGlvbiIsInRvZ2dsZVNsaWRlQ2xhc3NlcyIsInByb2Nlc3NMYXp5UHJlbG9hZGVyIiwiaW1hZ2VFbCIsInNsaWRlQ2xhc3MiLCJsYXp5RWwiLCJsYXp5UHJlbG9hZGVyQ2xhc3MiLCJzaGFkb3dSb290IiwidW5sYXp5IiwicmVtb3ZlQXR0cmlidXRlIiwicHJlbG9hZCIsImFtb3VudCIsImxhenlQcmVsb2FkUHJldk5leHQiLCJzbGlkZXNQZXJWaWV3Iiwic2xpZGVzUGVyVmlld0R5bmFtaWMiLCJhY3RpdmVDb2x1bW4iLCJwcmVsb2FkQ29sdW1ucyIsImZyb20iLCJfIiwiY29sdW1uIiwic2xpZGVJbmRleExhc3RJblZpZXciLCJ1cGRhdGVTaXplIiwiY2xpZW50V2lkdGgiLCJjbGllbnRIZWlnaHQiLCJpc1ZlcnRpY2FsIiwidXBkYXRlU2xpZGVzIiwiZ2V0RGlyZWN0aW9uUHJvcGVydHlWYWx1ZSIsImxhYmVsIiwiZ2V0RGlyZWN0aW9uTGFiZWwiLCJzbGlkZXNFbCIsInN3aXBlclNpemUiLCJydGxUcmFuc2xhdGUiLCJ3cm9uZ1JUTCIsImlzVmlydHVhbCIsInByZXZpb3VzU2xpZGVzTGVuZ3RoIiwic2xpZGVzR3JpZCIsInNsaWRlc1NpemVzR3JpZCIsIm9mZnNldEJlZm9yZSIsInNsaWRlc09mZnNldEJlZm9yZSIsIm9mZnNldEFmdGVyIiwic2xpZGVzT2Zmc2V0QWZ0ZXIiLCJwcmV2aW91c1NuYXBHcmlkTGVuZ3RoIiwicHJldmlvdXNTbGlkZXNHcmlkTGVuZ3RoIiwic3BhY2VCZXR3ZWVuIiwic2xpZGVQb3NpdGlvbiIsInByZXZTbGlkZVNpemUiLCJ2aXJ0dWFsU2l6ZSIsIm1hcmdpbkxlZnQiLCJtYXJnaW5SaWdodCIsIm1hcmdpbkJvdHRvbSIsIm1hcmdpblRvcCIsImNlbnRlcmVkU2xpZGVzIiwiZ3JpZEVuYWJsZWQiLCJzbGlkZVNpemUiLCJpbml0U2xpZGVzIiwidW5zZXRTbGlkZXMiLCJzaG91bGRSZXNldFNsaWRlU2l6ZSIsImJyZWFrcG9pbnRzIiwic2xpZGUiLCJ1cGRhdGVTbGlkZSIsInNsaWRlU3R5bGVzIiwiY3VycmVudFRyYW5zZm9ybSIsImN1cnJlbnRXZWJLaXRUcmFuc2Zvcm0iLCJyb3VuZExlbmd0aHMiLCJwYWRkaW5nTGVmdCIsInBhZGRpbmdSaWdodCIsImJveFNpemluZyIsInN3aXBlclNsaWRlU2l6ZSIsImFicyIsInNsaWRlc1Blckdyb3VwU2tpcCIsImVmZmVjdCIsInNldFdyYXBwZXJTaXplIiwidXBkYXRlV3JhcHBlclNpemUiLCJuZXdTbGlkZXNHcmlkIiwic2xpZGVzR3JpZEl0ZW0iLCJncm91cHMiLCJzbGlkZXNCZWZvcmUiLCJzbGlkZXNBZnRlciIsImdyb3VwU2l6ZSIsInNsaWRlSW5kZXgiLCJjZW50ZXJlZFNsaWRlc0JvdW5kcyIsImFsbFNsaWRlc1NpemUiLCJzbGlkZVNpemVWYWx1ZSIsIm1heFNuYXAiLCJzbmFwIiwiY2VudGVySW5zdWZmaWNpZW50U2xpZGVzIiwib2Zmc2V0U2l6ZSIsImFsbFNsaWRlc09mZnNldCIsImFkZFRvU25hcEdyaWQiLCJhZGRUb1NsaWRlc0dyaWQiLCJ2IiwiY2hlY2tPdmVyZmxvdyIsIndhdGNoU2xpZGVzUHJvZ3Jlc3MiLCJ1cGRhdGVTbGlkZXNPZmZzZXQiLCJiYWNrRmFjZUhpZGRlbkNsYXNzIiwiY29udGFpbmVyTW9kaWZpZXJDbGFzcyIsImhhc0NsYXNzQmFja2ZhY2VDbGFzc0FkZGVkIiwibWF4QmFja2ZhY2VIaWRkZW5TbGlkZXMiLCJ1cGRhdGVBdXRvSGVpZ2h0IiwiYWN0aXZlU2xpZGVzIiwibmV3SGVpZ2h0Iiwic2V0VHJhbnNpdGlvbiIsImdldFNsaWRlQnlJbmRleCIsImdldFNsaWRlSW5kZXhCeURhdGEiLCJ2aXNpYmxlU2xpZGVzIiwib2Zmc2V0SGVpZ2h0IiwibWludXNPZmZzZXQiLCJvZmZzZXRMZWZ0Iiwib2Zmc2V0VG9wIiwic3dpcGVyU2xpZGVPZmZzZXQiLCJjc3NPdmVyZmxvd0FkanVzdG1lbnQiLCJ1cGRhdGVTbGlkZXNQcm9ncmVzcyIsIm9mZnNldENlbnRlciIsInZpc2libGVTbGlkZXNJbmRleGVzIiwic2xpZGVPZmZzZXQiLCJzbGlkZVByb2dyZXNzIiwibWluVHJhbnNsYXRlIiwib3JpZ2luYWxTbGlkZVByb2dyZXNzIiwic2xpZGVCZWZvcmUiLCJzbGlkZUFmdGVyIiwiaXNGdWxseVZpc2libGUiLCJpc1Zpc2libGUiLCJzbGlkZVZpc2libGVDbGFzcyIsInNsaWRlRnVsbHlWaXNpYmxlQ2xhc3MiLCJvcmlnaW5hbFByb2dyZXNzIiwidXBkYXRlUHJvZ3Jlc3MiLCJtdWx0aXBsaWVyIiwidHJhbnNsYXRlc0RpZmYiLCJtYXhUcmFuc2xhdGUiLCJwcm9ncmVzc0xvb3AiLCJ3YXNCZWdpbm5pbmciLCJ3YXNFbmQiLCJpc0JlZ2lubmluZ1JvdW5kZWQiLCJpc0VuZFJvdW5kZWQiLCJmaXJzdFNsaWRlSW5kZXgiLCJsYXN0U2xpZGVJbmRleCIsImZpcnN0U2xpZGVUcmFuc2xhdGUiLCJsYXN0U2xpZGVUcmFuc2xhdGUiLCJ0cmFuc2xhdGVNYXgiLCJ0cmFuc2xhdGVBYnMiLCJhdXRvSGVpZ2h0IiwidXBkYXRlU2xpZGVzQ2xhc3NlcyIsImdldEZpbHRlcmVkU2xpZGUiLCJhY3RpdmVTbGlkZSIsInByZXZTbGlkZSIsIm5leHRTbGlkZSIsInNsaWRlQWN0aXZlQ2xhc3MiLCJzbGlkZU5leHRDbGFzcyIsInNsaWRlUHJldkNsYXNzIiwiZW1pdFNsaWRlc0NsYXNzZXMiLCJ1cGRhdGVBY3RpdmVJbmRleCIsIm5ld0FjdGl2ZUluZGV4IiwiZ2V0VmlydHVhbFJlYWxJbmRleCIsImFJbmRleCIsIm5vcm1hbGl6ZVNsaWRlSW5kZXgiLCJnZXRBY3RpdmVJbmRleEJ5VHJhbnNsYXRlIiwic2tpcCIsImZpcnN0U2xpZGVJbkNvbHVtbiIsImFjdGl2ZVNsaWRlSW5kZXgiLCJpbml0aWFsaXplZCIsInJ1bkNhbGxiYWNrc09uSW5pdCIsInVwZGF0ZUNsaWNrZWRTbGlkZSIsInNsaWRlRm91bmQiLCJjbGlja2VkU2xpZGUiLCJjbGlja2VkSW5kZXgiLCJzbGlkZVRvQ2xpY2tlZFNsaWRlIiwidmlydHVhbFRyYW5zbGF0ZSIsImN1cnJlbnRUcmFuc2xhdGUiLCJzZXRUcmFuc2xhdGUiLCJieUNvbnRyb2xsZXIiLCJuZXdQcm9ncmVzcyIsIngiLCJ5IiwicHJldmlvdXNUcmFuc2xhdGUiLCJ0cmFuc2xhdGVUbyIsInJ1bkNhbGxiYWNrcyIsInRyYW5zbGF0ZUJvdW5kcyIsInByZXZlbnRJbnRlcmFjdGlvbk9uVHJhbnNpdGlvbiIsIm5ld1RyYW5zbGF0ZSIsImlzSCIsImJlaGF2aW9yIiwib25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kIiwidHJhbnNpdGlvbkVtaXQiLCJkaXJlY3Rpb24iLCJzdGVwIiwiaW5pdGlhbCIsIm5vcm1hbGl6ZWRUcmFuc2xhdGUiLCJub3JtYWxpemVkR3JpZCIsIm5vcm1hbGl6ZWRHcmlkTmV4dCIsImFsbG93U2xpZGVOZXh0IiwiYWxsb3dTbGlkZVByZXYiLCJ0cmFuc2l0aW9uU3RhcnQiLCJ0cmFuc2l0aW9uRW5kIiwidCIsIl9pbW1lZGlhdGVWaXJ0dWFsIiwiX2Nzc01vZGVWaXJ0dWFsSW5pdGlhbFNldCIsImluaXRpYWxTbGlkZSIsIm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kIiwibmV3SW5kZXgiLCJ0YXJnZXRTbGlkZUluZGV4IiwiY29scyIsIm5lZWRMb29wRml4IiwibG9vcEZpeCIsInNsaWRlUmVhbEluZGV4IiwicGVyR3JvdXAiLCJzbGlkZXNQZXJHcm91cEF1dG8iLCJpbmNyZW1lbnQiLCJsb29wUHJldmVudHNTbGlkaW5nIiwiX2NsaWVudExlZnQiLCJjbGllbnRMZWZ0Iiwibm9ybWFsaXplIiwidmFsIiwibm9ybWFsaXplZFNuYXBHcmlkIiwicHJldlNuYXAiLCJwcmV2U25hcEluZGV4IiwicHJldkluZGV4Iiwic2xpZGVSZXNldCIsInNsaWRlVG9DbG9zZXN0IiwidGhyZXNob2xkIiwiY3VycmVudFNuYXAiLCJzbGlkZVRvSW5kZXgiLCJzbGlkZVNlbGVjdG9yIiwibG9vcGVkU2xpZGVzIiwiZ2V0U2xpZGVJbmRleCIsIm4iLCJsb29wQ3JlYXRlIiwic2hvdWxkRmlsbEdyb3VwIiwic2hvdWxkRmlsbEdyaWQiLCJhZGRCbGFua1NsaWRlcyIsImFtb3VudE9mU2xpZGVzIiwic2xpZGVCbGFua0NsYXNzIiwibG9vcEFkZEJsYW5rU2xpZGVzIiwicmVjYWxjU2xpZGVzIiwiYnlNb3VzZXdoZWVsIiwibG9vcEFkZGl0aW9uYWxTbGlkZXMiLCJmaWxsIiwicHJlcGVuZFNsaWRlc0luZGV4ZXMiLCJhcHBlbmRTbGlkZXNJbmRleGVzIiwiaXNOZXh0IiwiaXNQcmV2Iiwic2xpZGVzUHJlcGVuZGVkIiwic2xpZGVzQXBwZW5kZWQiLCJhY3RpdmVDb2xJbmRleFdpdGhTaGlmdCIsImNvbEluZGV4VG9QcmVwZW5kIiwiX19wcmV2ZW50T2JzZXJ2ZXJfXyIsInN3aXBlckxvb3BNb3ZlRE9NIiwicHJlcGVuZCIsImN1cnJlbnRTbGlkZVRyYW5zbGF0ZSIsImRpZmYiLCJ0b3VjaEV2ZW50c0RhdGEiLCJzdGFydFRyYW5zbGF0ZSIsInNoaWZ0IiwiY29udHJvbGxlciIsImNvbnRyb2wiLCJsb29wUGFyYW1zIiwibG9vcERlc3Ryb3kiLCJuZXdTbGlkZXNPcmRlciIsInN3aXBlclNsaWRlSW5kZXgiLCJwcmV2ZW50RWRnZVN3aXBlIiwic3RhcnRYIiwiZWRnZVN3aXBlRGV0ZWN0aW9uIiwiZWRnZVN3aXBlVGhyZXNob2xkIiwiaW5uZXJXaWR0aCIsIm9uVG91Y2hTdGFydCIsIm9yaWdpbmFsRXZlbnQiLCJwb2ludGVySWQiLCJ0YXJnZXRUb3VjaGVzIiwidG91Y2hJZCIsImlkZW50aWZpZXIiLCJwYWdlWCIsInRvdWNoZXMiLCJzaW11bGF0ZVRvdWNoIiwidG91Y2hFdmVudHNUYXJnZXQiLCJ3aGljaCIsImJ1dHRvbiIsImlzTW92ZWQiLCJzd2lwaW5nQ2xhc3NIYXNWYWx1ZSIsIm5vU3dpcGluZ0NsYXNzIiwiZXZlbnRQYXRoIiwibm9Td2lwaW5nU2VsZWN0b3IiLCJpc1RhcmdldFNoYWRvdyIsIm5vU3dpcGluZyIsImJhc2UiLCJfX2Nsb3Nlc3RGcm9tIiwiYXNzaWduZWRTbG90IiwiZm91bmQiLCJnZXRSb290Tm9kZSIsImNsb3Nlc3RFbGVtZW50IiwiYWxsb3dDbGljayIsInN3aXBlSGFuZGxlciIsImN1cnJlbnRYIiwiY3VycmVudFkiLCJwYWdlWSIsInN0YXJ0WSIsImFsbG93VG91Y2hDYWxsYmFja3MiLCJpc1Njcm9sbGluZyIsInN0YXJ0TW92aW5nIiwidG91Y2hTdGFydFRpbWUiLCJzd2lwZURpcmVjdGlvbiIsImFsbG93VGhyZXNob2xkTW92ZSIsImZvY3VzYWJsZUVsZW1lbnRzIiwic2hvdWxkUHJldmVudERlZmF1bHQiLCJhbGxvd1RvdWNoTW92ZSIsInRvdWNoU3RhcnRQcmV2ZW50RGVmYXVsdCIsInRvdWNoU3RhcnRGb3JjZVByZXZlbnREZWZhdWx0IiwiaXNDb250ZW50RWRpdGFibGUiLCJvblRvdWNoTW92ZSIsInRhcmdldFRvdWNoIiwiY2hhbmdlZFRvdWNoZXMiLCJwcmV2ZW50ZWRCeU5lc3RlZFN3aXBlciIsInRvdWNoUmVsZWFzZU9uRWRnZXMiLCJwcmV2aW91c1giLCJwcmV2aW91c1kiLCJkaWZmWCIsImRpZmZZIiwic3FydCIsInRvdWNoQW5nbGUiLCJhdGFuMiIsInByZXZlbnRUb3VjaE1vdmVGcm9tUG9pbnRlck1vdmUiLCJjYW5jZWxhYmxlIiwidG91Y2hNb3ZlU3RvcFByb3BhZ2F0aW9uIiwibmVzdGVkIiwic3RvcFByb3BhZ2F0aW9uIiwidG91Y2hlc0RpZmYiLCJvbmVXYXlNb3ZlbWVudCIsInRvdWNoUmF0aW8iLCJwcmV2VG91Y2hlc0RpcmVjdGlvbiIsInRvdWNoZXNEaXJlY3Rpb24iLCJpc0xvb3AiLCJhbGxvd0xvb3BGaXgiLCJldnQiLCJidWJibGVzIiwiZGlzcGF0Y2hFdmVudCIsImFsbG93TW9tZW50dW1Cb3VuY2UiLCJncmFiQ3Vyc29yIiwic2V0R3JhYkN1cnNvciIsImxvb3BTd2FwUmVzZXQiLCJkaXNhYmxlUGFyZW50U3dpcGVyIiwicmVzaXN0YW5jZVJhdGlvIiwicmVzaXN0YW5jZSIsImZvbGxvd0ZpbmdlciIsIm9uVG91Y2hFbmQiLCJ0b3VjaEVuZFRpbWUiLCJ0aW1lRGlmZiIsInBhdGhUcmVlIiwibGFzdENsaWNrVGltZSIsImN1cnJlbnRQb3MiLCJzd2lwZVRvTGFzdCIsInN0b3BJbmRleCIsInJld2luZEZpcnN0SW5kZXgiLCJyZXdpbmRMYXN0SW5kZXgiLCJyYXRpbyIsImxvbmdTd2lwZXNNcyIsImxvbmdTd2lwZXMiLCJsb25nU3dpcGVzUmF0aW8iLCJzaG9ydFN3aXBlcyIsIm9uUmVzaXplIiwic2V0QnJlYWtwb2ludCIsImlzVmlydHVhbExvb3AiLCJyZXNpemVUaW1lb3V0Iiwib25DbGljayIsInByZXZlbnRDbGlja3MiLCJwcmV2ZW50Q2xpY2tzUHJvcGFnYXRpb24iLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJvblNjcm9sbCIsInNjcm9sbExlZnQiLCJzY3JvbGxUb3AiLCJvbkxvYWQiLCJvbkRvY3VtZW50VG91Y2hTdGFydCIsImRvY3VtZW50VG91Y2hIYW5kbGVyUHJvY2VlZGVkIiwidG91Y2hBY3Rpb24iLCJjYXB0dXJlIiwiZG9tTWV0aG9kIiwic3dpcGVyTWV0aG9kIiwicGFzc2l2ZSIsInVwZGF0ZU9uV2luZG93UmVzaXplIiwiaXNHcmlkRW5hYmxlZCIsImRlZmF1bHRzIiwic3dpcGVyRWxlbWVudE5vZGVOYW1lIiwicmVzaXplT2JzZXJ2ZXIiLCJldmVudHNQcmVmaXgiLCJ1cmwiLCJicmVha3BvaW50c0Jhc2UiLCJwYXNzaXZlTGlzdGVuZXJzIiwid3JhcHBlckNsYXNzIiwiX2VtaXRDbGFzc2VzIiwibW9kdWxlRXh0ZW5kUGFyYW1zIiwiYWxsTW9kdWxlc1BhcmFtcyIsIm1vZHVsZVBhcmFtTmFtZSIsIm1vZHVsZVBhcmFtcyIsInByb3RvdHlwZXMiLCJ0cmFuc2l0aW9uIiwidHJhbnNpdGlvbkRlbGF5IiwibW92aW5nIiwiY3Vyc29yIiwidW5zZXRHcmFiQ3Vyc29yIiwiYXR0YWNoRXZlbnRzIiwiYmluZCIsImRldGFjaEV2ZW50cyIsImJyZWFrcG9pbnQiLCJnZXRCcmVha3BvaW50IiwiY3VycmVudEJyZWFrcG9pbnQiLCJicmVha3BvaW50UGFyYW1zIiwid2FzTXVsdGlSb3ciLCJpc011bHRpUm93Iiwid2FzR3JhYkN1cnNvciIsImlzR3JhYkN1cnNvciIsIndhc0VuYWJsZWQiLCJlbWl0Q29udGFpbmVyQ2xhc3NlcyIsIndhc01vZHVsZUVuYWJsZWQiLCJpc01vZHVsZUVuYWJsZWQiLCJkaXJlY3Rpb25DaGFuZ2VkIiwibmVlZHNSZUxvb3AiLCJ3YXNMb29wIiwiY2hhbmdlRGlyZWN0aW9uIiwiaXNFbmFibGVkIiwiaGFzTG9vcCIsImNvbnRhaW5lckVsIiwiY3VycmVudEhlaWdodCIsImlubmVySGVpZ2h0IiwicG9pbnRzIiwicG9pbnQiLCJtaW5SYXRpbyIsInN1YnN0ciIsInZhbHVlIiwic29ydCIsImIiLCJ3YXNMb2NrZWQiLCJsYXN0U2xpZGVSaWdodEVkZ2UiLCJhZGRDbGFzc2VzIiwiY2xhc3NOYW1lcyIsInN1ZmZpeGVzIiwiZW50cmllcyIsInByZWZpeCIsInJlc3VsdENsYXNzZXMiLCJpdGVtIiwicHJlcGFyZUNsYXNzZXMiLCJyZW1vdmVDbGFzc2VzIiwiZXh0ZW5kZWREZWZhdWx0cyIsIlN3aXBlciIsInN3aXBlcnMiLCJuZXdQYXJhbXMiLCJtb2R1bGVzIiwiX19tb2R1bGVzX18iLCJtb2QiLCJzd2lwZXJQYXJhbXMiLCJwYXNzZWRQYXJhbXMiLCJldmVudE5hbWUiLCJ2ZWxvY2l0eSIsInRydW5jIiwiY2xpY2tUaW1lb3V0IiwidmVsb2NpdGllcyIsImltYWdlc1RvTG9hZCIsImltYWdlc0xvYWRlZCIsInByb3BlcnR5Iiwic2V0UHJvZ3Jlc3MiLCJjbHMiLCJnZXRTbGlkZUNsYXNzZXMiLCJ1cGRhdGVzIiwidmlldyIsImV4YWN0Iiwic3B2IiwiYnJlYWtMb29wIiwidHJhbnNsYXRlVmFsdWUiLCJ0cmFuc2xhdGVkIiwiY29tcGxldGUiLCJuZXdEaXJlY3Rpb24iLCJuZWVkVXBkYXRlIiwiY3VycmVudERpcmVjdGlvbiIsImNoYW5nZUxhbmd1YWdlRGlyZWN0aW9uIiwibW91bnQiLCJtb3VudGVkIiwicGFyZW50Tm9kZSIsInRvVXBwZXJDYXNlIiwiZ2V0V3JhcHBlclNlbGVjdG9yIiwiZ2V0V3JhcHBlciIsInNsaWRlU2xvdHMiLCJob3N0RWwiLCJsYXp5RWxlbWVudHMiLCJkZWxldGVJbnN0YW5jZSIsImNsZWFuU3R5bGVzIiwiZXh0ZW5kRGVmYXVsdHMiLCJuZXdEZWZhdWx0cyIsImluc3RhbGxNb2R1bGUiLCJ1c2UiLCJtb2R1bGUiLCJwcm90b3R5cGVHcm91cCIsInByb3RvTWV0aG9kIiwib2JzZXJ2ZXIiLCJhbmltYXRpb25GcmFtZSIsInJlc2l6ZUhhbmRsZXIiLCJvcmllbnRhdGlvbkNoYW5nZUhhbmRsZXIiLCJSZXNpemVPYnNlcnZlciIsIm5ld1dpZHRoIiwiX3JlZjIiLCJjb250ZW50Qm94U2l6ZSIsImNvbnRlbnRSZWN0IiwiaW5saW5lU2l6ZSIsImJsb2NrU2l6ZSIsIm9ic2VydmUiLCJ1bm9ic2VydmUiLCJvYnNlcnZlcnMiLCJhdHRhY2giLCJvcHRpb25zIiwiTXV0YXRpb25PYnNlcnZlciIsIldlYmtpdE11dGF0aW9uT2JzZXJ2ZXIiLCJtdXRhdGlvbnMiLCJvYnNlcnZlclVwZGF0ZSIsImF0dHJpYnV0ZXMiLCJjaGlsZExpc3QiLCJjaGFyYWN0ZXJEYXRhIiwib2JzZXJ2ZVBhcmVudHMiLCJvYnNlcnZlU2xpZGVDaGlsZHJlbiIsImNvbnRhaW5lclBhcmVudHMiLCJkaXNjb25uZWN0Il0sInNvdXJjZVJvb3QiOiIifQ==