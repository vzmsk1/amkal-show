"use strict";(self.webpackChunkwebpack_setup=self.webpackChunkwebpack_setup||[]).push([[57],{678:(e,t,s)=>{s.d(t,{W_:()=>a,tl:()=>l});s(433);var i=s(185);function r(e,t,s,r){return e.params.createElements&&Object.keys(r).forEach((a=>{if(!s[a]&&!0===s.auto){let n=(0,i.e)(e.el,`.${r[a]}`)[0];n||(n=(0,i.c)("div",r[a]),n.className=r[a],e.el.append(n)),s[a]=n,t[a]=n}})),s}function a(e){let{swiper:t,extendParams:s,on:a,emit:n}=e;function l(e){let s;return e&&"string"==typeof e&&t.isElement&&(s=t.el.querySelector(e),s)?s:(e&&("string"==typeof e&&(s=[...document.querySelectorAll(e)]),t.params.uniqueNavElements&&"string"==typeof e&&s&&s.length>1&&1===t.el.querySelectorAll(e).length?s=t.el.querySelector(e):s&&1===s.length&&(s=s[0])),e&&!s?e:s)}function o(e,s){const r=t.params.navigation;(e=(0,i.m)(e)).forEach((e=>{e&&(e.classList[s?"add":"remove"](...r.disabledClass.split(" ")),"BUTTON"===e.tagName&&(e.disabled=s),t.params.watchOverflow&&t.enabled&&e.classList[t.isLocked?"add":"remove"](r.lockClass))}))}function d(){const{nextEl:e,prevEl:s}=t.navigation;if(t.params.loop)return o(s,!1),void o(e,!1);o(s,t.isBeginning&&!t.params.rewind),o(e,t.isEnd&&!t.params.rewind)}function c(e){e.preventDefault(),(!t.isBeginning||t.params.loop||t.params.rewind)&&(t.slidePrev(),n("navigationPrev"))}function p(e){e.preventDefault(),(!t.isEnd||t.params.loop||t.params.rewind)&&(t.slideNext(),n("navigationNext"))}function u(){const e=t.params.navigation;if(t.params.navigation=r(t,t.originalParams.navigation,t.params.navigation,{nextEl:"swiper-button-next",prevEl:"swiper-button-prev"}),!e.nextEl&&!e.prevEl)return;let s=l(e.nextEl),a=l(e.prevEl);Object.assign(t.navigation,{nextEl:s,prevEl:a}),s=(0,i.m)(s),a=(0,i.m)(a);const n=(s,i)=>{s&&s.addEventListener("click","next"===i?p:c),!t.enabled&&s&&s.classList.add(...e.lockClass.split(" "))};s.forEach((e=>n(e,"next"))),a.forEach((e=>n(e,"prev")))}function m(){let{nextEl:e,prevEl:s}=t.navigation;e=(0,i.m)(e),s=(0,i.m)(s);const r=(e,s)=>{e.removeEventListener("click","next"===s?p:c),e.classList.remove(...t.params.navigation.disabledClass.split(" "))};e.forEach((e=>r(e,"next"))),s.forEach((e=>r(e,"prev")))}s({navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock",navigationDisabledClass:"swiper-navigation-disabled"}}),t.navigation={nextEl:null,prevEl:null},a("init",(()=>{!1===t.params.navigation.enabled?f():(u(),d())})),a("toEdge fromEdge lock unlock",(()=>{d()})),a("destroy",(()=>{m()})),a("enable disable",(()=>{let{nextEl:e,prevEl:s}=t.navigation;e=(0,i.m)(e),s=(0,i.m)(s),t.enabled?d():[...e,...s].filter((e=>!!e)).forEach((e=>e.classList.add(t.params.navigation.lockClass)))})),a("click",((e,s)=>{let{nextEl:r,prevEl:a}=t.navigation;r=(0,i.m)(r),a=(0,i.m)(a);const l=s.target;let o=a.includes(l)||r.includes(l);if(t.isElement&&!o){const e=s.path||s.composedPath&&s.composedPath();e&&(o=e.find((e=>r.includes(e)||a.includes(e))))}if(t.params.navigation.hideOnClick&&!o){if(t.pagination&&t.params.pagination&&t.params.pagination.clickable&&(t.pagination.el===l||t.pagination.el.contains(l)))return;let e;r.length?e=r[0].classList.contains(t.params.navigation.hiddenClass):a.length&&(e=a[0].classList.contains(t.params.navigation.hiddenClass)),n(!0===e?"navigationShow":"navigationHide"),[...r,...a].filter((e=>!!e)).forEach((e=>e.classList.toggle(t.params.navigation.hiddenClass)))}}));const f=()=>{t.el.classList.add(...t.params.navigation.navigationDisabledClass.split(" ")),m()};Object.assign(t.navigation,{enable:()=>{t.el.classList.remove(...t.params.navigation.navigationDisabledClass.split(" ")),u(),d()},disable:f,update:d,init:u,destroy:m})}function n(e){return void 0===e&&(e=""),`.${e.trim().replace(/([\.:!+\/])/g,"\\$1").replace(/ /g,".")}`}function l(e){let{swiper:t,extendParams:s,on:a,emit:l}=e;const o="swiper-pagination";let d;s({pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:e=>e,formatFractionTotal:e=>e,bulletClass:`${o}-bullet`,bulletActiveClass:`${o}-bullet-active`,modifierClass:`${o}-`,currentClass:`${o}-current`,totalClass:`${o}-total`,hiddenClass:`${o}-hidden`,progressbarFillClass:`${o}-progressbar-fill`,progressbarOppositeClass:`${o}-progressbar-opposite`,clickableClass:`${o}-clickable`,lockClass:`${o}-lock`,horizontalClass:`${o}-horizontal`,verticalClass:`${o}-vertical`,paginationDisabledClass:`${o}-disabled`}}),t.pagination={el:null,bullets:[]};let c=0;function p(){return!t.params.pagination.el||!t.pagination.el||Array.isArray(t.pagination.el)&&0===t.pagination.el.length}function u(e,s){const{bulletActiveClass:i}=t.params.pagination;e&&(e=e[("prev"===s?"previous":"next")+"ElementSibling"])&&(e.classList.add(`${i}-${s}`),(e=e[("prev"===s?"previous":"next")+"ElementSibling"])&&e.classList.add(`${i}-${s}-${s}`))}function m(e){const s=e.target.closest(n(t.params.pagination.bulletClass));if(!s)return;e.preventDefault();const r=(0,i.h)(s)*t.params.slidesPerGroup;if(t.params.loop){if(t.realIndex===r)return;t.slideToLoop(r)}else t.slideTo(r)}function f(){const e=t.rtl,s=t.params.pagination;if(p())return;let r,a,o=t.pagination.el;o=(0,i.m)(o);const m=t.virtual&&t.params.virtual.enabled?t.virtual.slides.length:t.slides.length,f=t.params.loop?Math.ceil(m/t.params.slidesPerGroup):t.snapGrid.length;if(t.params.loop?(a=t.previousRealIndex||0,r=t.params.slidesPerGroup>1?Math.floor(t.realIndex/t.params.slidesPerGroup):t.realIndex):void 0!==t.snapIndex?(r=t.snapIndex,a=t.previousSnapIndex):(a=t.previousIndex||0,r=t.activeIndex||0),"bullets"===s.type&&t.pagination.bullets&&t.pagination.bullets.length>0){const n=t.pagination.bullets;let l,p,m;if(s.dynamicBullets&&(d=(0,i.f)(n[0],t.isHorizontal()?"width":"height",!0),o.forEach((e=>{e.style[t.isHorizontal()?"width":"height"]=d*(s.dynamicMainBullets+4)+"px"})),s.dynamicMainBullets>1&&void 0!==a&&(c+=r-(a||0),c>s.dynamicMainBullets-1?c=s.dynamicMainBullets-1:c<0&&(c=0)),l=Math.max(r-c,0),p=l+(Math.min(n.length,s.dynamicMainBullets)-1),m=(p+l)/2),n.forEach((e=>{const t=[...["","-next","-next-next","-prev","-prev-prev","-main"].map((e=>`${s.bulletActiveClass}${e}`))].map((e=>"string"==typeof e&&e.includes(" ")?e.split(" "):e)).flat();e.classList.remove(...t)})),o.length>1)n.forEach((e=>{const a=(0,i.h)(e);a===r?e.classList.add(...s.bulletActiveClass.split(" ")):t.isElement&&e.setAttribute("part","bullet"),s.dynamicBullets&&(a>=l&&a<=p&&e.classList.add(...`${s.bulletActiveClass}-main`.split(" ")),a===l&&u(e,"prev"),a===p&&u(e,"next"))}));else{const e=n[r];if(e&&e.classList.add(...s.bulletActiveClass.split(" ")),t.isElement&&n.forEach(((e,t)=>{e.setAttribute("part",t===r?"bullet-active":"bullet")})),s.dynamicBullets){const e=n[l],t=n[p];for(let e=l;e<=p;e+=1)n[e]&&n[e].classList.add(...`${s.bulletActiveClass}-main`.split(" "));u(e,"prev"),u(t,"next")}}if(s.dynamicBullets){const i=Math.min(n.length,s.dynamicMainBullets+4),r=(d*i-d)/2-m*d,a=e?"right":"left";n.forEach((e=>{e.style[t.isHorizontal()?a:"top"]=`${r}px`}))}}o.forEach(((e,i)=>{if("fraction"===s.type&&(e.querySelectorAll(n(s.currentClass)).forEach((e=>{e.textContent=s.formatFractionCurrent(r+1)})),e.querySelectorAll(n(s.totalClass)).forEach((e=>{e.textContent=s.formatFractionTotal(f)}))),"progressbar"===s.type){let i;i=s.progressbarOpposite?t.isHorizontal()?"vertical":"horizontal":t.isHorizontal()?"horizontal":"vertical";const a=(r+1)/f;let l=1,o=1;"horizontal"===i?l=a:o=a,e.querySelectorAll(n(s.progressbarFillClass)).forEach((e=>{e.style.transform=`translate3d(0,0,0) scaleX(${l}) scaleY(${o})`,e.style.transitionDuration=`${t.params.speed}ms`}))}"custom"===s.type&&s.renderCustom?(e.innerHTML=s.renderCustom(t,r+1,f),0===i&&l("paginationRender",e)):(0===i&&l("paginationRender",e),l("paginationUpdate",e)),t.params.watchOverflow&&t.enabled&&e.classList[t.isLocked?"add":"remove"](s.lockClass)}))}function h(){const e=t.params.pagination;if(p())return;const s=t.virtual&&t.params.virtual.enabled?t.virtual.slides.length:t.grid&&t.params.grid.rows>1?t.slides.length/Math.ceil(t.params.grid.rows):t.slides.length;let r=t.pagination.el;r=(0,i.m)(r);let a="";if("bullets"===e.type){let i=t.params.loop?Math.ceil(s/t.params.slidesPerGroup):t.snapGrid.length;t.params.freeMode&&t.params.freeMode.enabled&&i>s&&(i=s);for(let s=0;s<i;s+=1)e.renderBullet?a+=e.renderBullet.call(t,s,e.bulletClass):a+=`<${e.bulletElement} ${t.isElement?'part="bullet"':""} class="${e.bulletClass}"></${e.bulletElement}>`}"fraction"===e.type&&(a=e.renderFraction?e.renderFraction.call(t,e.currentClass,e.totalClass):`<span class="${e.currentClass}"></span> / <span class="${e.totalClass}"></span>`),"progressbar"===e.type&&(a=e.renderProgressbar?e.renderProgressbar.call(t,e.progressbarFillClass):`<span class="${e.progressbarFillClass}"></span>`),t.pagination.bullets=[],r.forEach((s=>{"custom"!==e.type&&(s.innerHTML=a||""),"bullets"===e.type&&t.pagination.bullets.push(...s.querySelectorAll(n(e.bulletClass)))})),"custom"!==e.type&&l("paginationRender",r[0])}function g(){t.params.pagination=r(t,t.originalParams.pagination,t.params.pagination,{el:"swiper-pagination"});const e=t.params.pagination;if(!e.el)return;let s;"string"==typeof e.el&&t.isElement&&(s=t.el.querySelector(e.el)),s||"string"!=typeof e.el||(s=[...document.querySelectorAll(e.el)]),s||(s=e.el),s&&0!==s.length&&(t.params.uniqueNavElements&&"string"==typeof e.el&&Array.isArray(s)&&s.length>1&&(s=[...t.el.querySelectorAll(e.el)],s.length>1&&(s=s.filter((e=>(0,i.a)(e,".swiper")[0]===t.el))[0])),Array.isArray(s)&&1===s.length&&(s=s[0]),Object.assign(t.pagination,{el:s}),s=(0,i.m)(s),s.forEach((s=>{"bullets"===e.type&&e.clickable&&s.classList.add(...(e.clickableClass||"").split(" ")),s.classList.add(e.modifierClass+e.type),s.classList.add(t.isHorizontal()?e.horizontalClass:e.verticalClass),"bullets"===e.type&&e.dynamicBullets&&(s.classList.add(`${e.modifierClass}${e.type}-dynamic`),c=0,e.dynamicMainBullets<1&&(e.dynamicMainBullets=1)),"progressbar"===e.type&&e.progressbarOpposite&&s.classList.add(e.progressbarOppositeClass),e.clickable&&s.addEventListener("click",m),t.enabled||s.classList.add(e.lockClass)})))}function v(){const e=t.params.pagination;if(p())return;let s=t.pagination.el;s&&(s=(0,i.m)(s),s.forEach((s=>{s.classList.remove(e.hiddenClass),s.classList.remove(e.modifierClass+e.type),s.classList.remove(t.isHorizontal()?e.horizontalClass:e.verticalClass),e.clickable&&(s.classList.remove(...(e.clickableClass||"").split(" ")),s.removeEventListener("click",m))}))),t.pagination.bullets&&t.pagination.bullets.forEach((t=>t.classList.remove(...e.bulletActiveClass.split(" "))))}a("changeDirection",(()=>{if(!t.pagination||!t.pagination.el)return;const e=t.params.pagination;let{el:s}=t.pagination;s=(0,i.m)(s),s.forEach((s=>{s.classList.remove(e.horizontalClass,e.verticalClass),s.classList.add(t.isHorizontal()?e.horizontalClass:e.verticalClass)}))})),a("init",(()=>{!1===t.params.pagination.enabled?w():(g(),h(),f())})),a("activeIndexChange",(()=>{void 0===t.snapIndex&&f()})),a("snapIndexChange",(()=>{f()})),a("snapGridLengthChange",(()=>{h(),f()})),a("destroy",(()=>{v()})),a("enable disable",(()=>{let{el:e}=t.pagination;e&&(e=(0,i.m)(e),e.forEach((e=>e.classList[t.enabled?"remove":"add"](t.params.pagination.lockClass))))})),a("lock unlock",(()=>{f()})),a("click",((e,s)=>{const r=s.target,a=(0,i.m)(t.pagination.el);if(t.params.pagination.el&&t.params.pagination.hideOnClick&&a&&a.length>0&&!r.classList.contains(t.params.pagination.bulletClass)){if(t.navigation&&(t.navigation.nextEl&&r===t.navigation.nextEl||t.navigation.prevEl&&r===t.navigation.prevEl))return;const e=a[0].classList.contains(t.params.pagination.hiddenClass);l(!0===e?"paginationShow":"paginationHide"),a.forEach((e=>e.classList.toggle(t.params.pagination.hiddenClass)))}}));const w=()=>{t.el.classList.add(t.params.pagination.paginationDisabledClass);let{el:e}=t.pagination;e&&(e=(0,i.m)(e),e.forEach((e=>e.classList.add(t.params.pagination.paginationDisabledClass)))),v()};Object.assign(t.pagination,{enable:()=>{t.el.classList.remove(t.params.pagination.paginationDisabledClass);let{el:e}=t.pagination;e&&(e=(0,i.m)(e),e.forEach((e=>e.classList.remove(t.params.pagination.paginationDisabledClass)))),g(),h(),f()},disable:w,render:h,update:f,init:g,destroy:v})}},433:(e,t,s)=>{function i(e){return null!==e&&"object"==typeof e&&"constructor"in e&&e.constructor===Object}function r(e,t){void 0===e&&(e={}),void 0===t&&(t={}),Object.keys(t).forEach((s=>{void 0===e[s]?e[s]=t[s]:i(t[s])&&i(e[s])&&Object.keys(t[s]).length>0&&r(e[s],t[s])}))}s.d(t,{a:()=>o,g:()=>n});const a={body:{},addEventListener(){},removeEventListener(){},activeElement:{blur(){},nodeName:""},querySelector:()=>null,querySelectorAll:()=>[],getElementById:()=>null,createEvent:()=>({initEvent(){}}),createElement:()=>({children:[],childNodes:[],style:{},setAttribute(){},getElementsByTagName:()=>[]}),createElementNS:()=>({}),importNode:()=>null,location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};function n(){const e="undefined"!=typeof document?document:{};return r(e,a),e}const l={document:a,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState(){},pushState(){},go(){},back(){}},CustomEvent:function(){return this},addEventListener(){},removeEventListener(){},getComputedStyle:()=>({getPropertyValue:()=>""}),Image(){},Date(){},screen:{},setTimeout(){},clearTimeout(){},matchMedia:()=>({}),requestAnimationFrame:e=>"undefined"==typeof setTimeout?(e(),null):setTimeout(e,0),cancelAnimationFrame(e){"undefined"!=typeof setTimeout&&clearTimeout(e)}};function o(){const e="undefined"!=typeof window?window:{};return r(e,l),e}},185:(e,t,s)=>{s.d(t,{a:()=>b,c:()=>f,d:()=>n,e:()=>u,f:()=>S,h:()=>w,j:()=>l,m:()=>T,n:()=>a,o:()=>v,p:()=>g,q:()=>h,r:()=>p,s:()=>c,t:()=>m,u:()=>d,v:()=>r});var i=s(433);function r(e){const t=e;Object.keys(t).forEach((e=>{try{t[e]=null}catch(e){}try{delete t[e]}catch(e){}}))}function a(e,t){return void 0===t&&(t=0),setTimeout(e,t)}function n(){return Date.now()}function l(e,t){void 0===t&&(t="x");const s=(0,i.a)();let r,a,n;const l=function(e){const t=(0,i.a)();let s;return t.getComputedStyle&&(s=t.getComputedStyle(e,null)),!s&&e.currentStyle&&(s=e.currentStyle),s||(s=e.style),s}(e);return s.WebKitCSSMatrix?(a=l.transform||l.webkitTransform,a.split(",").length>6&&(a=a.split(", ").map((e=>e.replace(",","."))).join(", ")),n=new s.WebKitCSSMatrix("none"===a?"":a)):(n=l.MozTransform||l.OTransform||l.MsTransform||l.msTransform||l.transform||l.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,"),r=n.toString().split(",")),"x"===t&&(a=s.WebKitCSSMatrix?n.m41:16===r.length?parseFloat(r[12]):parseFloat(r[4])),"y"===t&&(a=s.WebKitCSSMatrix?n.m42:16===r.length?parseFloat(r[13]):parseFloat(r[5])),a||0}function o(e){return"object"==typeof e&&null!==e&&e.constructor&&"Object"===Object.prototype.toString.call(e).slice(8,-1)}function d(){const e=Object(arguments.length<=0?void 0:arguments[0]),t=["__proto__","constructor","prototype"];for(let i=1;i<arguments.length;i+=1){const r=i<0||arguments.length<=i?void 0:arguments[i];if(null!=r&&(s=r,!("undefined"!=typeof window&&void 0!==window.HTMLElement?s instanceof HTMLElement:s&&(1===s.nodeType||11===s.nodeType)))){const s=Object.keys(Object(r)).filter((e=>t.indexOf(e)<0));for(let t=0,i=s.length;t<i;t+=1){const i=s[t],a=Object.getOwnPropertyDescriptor(r,i);void 0!==a&&a.enumerable&&(o(e[i])&&o(r[i])?r[i].__swiper__?e[i]=r[i]:d(e[i],r[i]):!o(e[i])&&o(r[i])?(e[i]={},r[i].__swiper__?e[i]=r[i]:d(e[i],r[i])):e[i]=r[i])}}}var s;return e}function c(e,t,s){e.style.setProperty(t,s)}function p(e){let{swiper:t,targetPosition:s,side:r}=e;const a=(0,i.a)(),n=-t.translate;let l,o=null;const d=t.params.speed;t.wrapperEl.style.scrollSnapType="none",a.cancelAnimationFrame(t.cssModeFrameID);const c=s>n?"next":"prev",p=(e,t)=>"next"===c&&e>=t||"prev"===c&&e<=t,u=()=>{l=(new Date).getTime(),null===o&&(o=l);const e=Math.max(Math.min((l-o)/d,1),0),i=.5-Math.cos(e*Math.PI)/2;let c=n+i*(s-n);if(p(c,s)&&(c=s),t.wrapperEl.scrollTo({[r]:c}),p(c,s))return t.wrapperEl.style.overflow="hidden",t.wrapperEl.style.scrollSnapType="",setTimeout((()=>{t.wrapperEl.style.overflow="",t.wrapperEl.scrollTo({[r]:c})})),void a.cancelAnimationFrame(t.cssModeFrameID);t.cssModeFrameID=a.requestAnimationFrame(u)};u()}function u(e,t){return void 0===t&&(t=""),[...e.children].filter((e=>e.matches(t)))}function m(e){try{return void console.warn(e)}catch(e){}}function f(e,t){void 0===t&&(t=[]);const s=document.createElement(e);return s.classList.add(...Array.isArray(t)?t:function(e){return void 0===e&&(e=""),e.trim().split(" ").filter((e=>!!e.trim()))}(t)),s}function h(e,t){const s=[];for(;e.previousElementSibling;){const i=e.previousElementSibling;t?i.matches(t)&&s.push(i):s.push(i),e=i}return s}function g(e,t){const s=[];for(;e.nextElementSibling;){const i=e.nextElementSibling;t?i.matches(t)&&s.push(i):s.push(i),e=i}return s}function v(e,t){return(0,i.a)().getComputedStyle(e,null).getPropertyValue(t)}function w(e){let t,s=e;if(s){for(t=0;null!==(s=s.previousSibling);)1===s.nodeType&&(t+=1);return t}}function b(e,t){const s=[];let i=e.parentElement;for(;i;)t?i.matches(t)&&s.push(i):s.push(i),i=i.parentElement;return s}function S(e,t,s){const r=(0,i.a)();return s?e["width"===t?"offsetWidth":"offsetHeight"]+parseFloat(r.getComputedStyle(e,null).getPropertyValue("width"===t?"margin-right":"margin-top"))+parseFloat(r.getComputedStyle(e,null).getPropertyValue("width"===t?"margin-left":"margin-bottom")):e.offsetWidth}function T(e){return(Array.isArray(e)?e:[e]).filter((e=>!!e))}},652:(e,t,s)=>{s.d(t,{Z:()=>$});var i=s(433),r=s(185);let a,n,l;function o(){return a||(a=function(){const e=(0,i.a)(),t=(0,i.g)();return{smoothScroll:t.documentElement&&t.documentElement.style&&"scrollBehavior"in t.documentElement.style,touch:!!("ontouchstart"in e||e.DocumentTouch&&t instanceof e.DocumentTouch)}}()),a}function d(e){return void 0===e&&(e={}),n||(n=function(e){let{userAgent:t}=void 0===e?{}:e;const s=o(),r=(0,i.a)(),a=r.navigator.platform,n=t||r.navigator.userAgent,l={ios:!1,android:!1},d=r.screen.width,c=r.screen.height,p=n.match(/(Android);?[\s\/]+([\d.]+)?/);let u=n.match(/(iPad).*OS\s([\d_]+)/);const m=n.match(/(iPod)(.*OS\s([\d_]+))?/),f=!u&&n.match(/(iPhone\sOS|iOS)\s([\d_]+)/),h="Win32"===a;let g="MacIntel"===a;return!u&&g&&s.touch&&["1024x1366","1366x1024","834x1194","1194x834","834x1112","1112x834","768x1024","1024x768","820x1180","1180x820","810x1080","1080x810"].indexOf(`${d}x${c}`)>=0&&(u=n.match(/(Version)\/([\d.]+)/),u||(u=[0,1,"13_0_0"]),g=!1),p&&!h&&(l.os="android",l.android=!0),(u||f||m)&&(l.os="ios",l.ios=!0),l}(e)),n}function c(){return l||(l=function(){const e=(0,i.a)(),t=d();let s=!1;function r(){const t=e.navigator.userAgent.toLowerCase();return t.indexOf("safari")>=0&&t.indexOf("chrome")<0&&t.indexOf("android")<0}if(r()){const t=String(e.navigator.userAgent);if(t.includes("Version/")){const[e,i]=t.split("Version/")[1].split(" ")[0].split(".").map((e=>Number(e)));s=e<16||16===e&&i<2}}const a=/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(e.navigator.userAgent),n=r();return{isSafari:s||n,needPerspectiveFix:s,need3dFix:n||a&&t.ios,isWebView:a}}()),l}var p={on(e,t,s){const i=this;if(!i.eventsListeners||i.destroyed)return i;if("function"!=typeof t)return i;const r=s?"unshift":"push";return e.split(" ").forEach((e=>{i.eventsListeners[e]||(i.eventsListeners[e]=[]),i.eventsListeners[e][r](t)})),i},once(e,t,s){const i=this;if(!i.eventsListeners||i.destroyed)return i;if("function"!=typeof t)return i;function r(){i.off(e,r),r.__emitterProxy&&delete r.__emitterProxy;for(var s=arguments.length,a=new Array(s),n=0;n<s;n++)a[n]=arguments[n];t.apply(i,a)}return r.__emitterProxy=t,i.on(e,r,s)},onAny(e,t){const s=this;if(!s.eventsListeners||s.destroyed)return s;if("function"!=typeof e)return s;const i=t?"unshift":"push";return s.eventsAnyListeners.indexOf(e)<0&&s.eventsAnyListeners[i](e),s},offAny(e){const t=this;if(!t.eventsListeners||t.destroyed)return t;if(!t.eventsAnyListeners)return t;const s=t.eventsAnyListeners.indexOf(e);return s>=0&&t.eventsAnyListeners.splice(s,1),t},off(e,t){const s=this;return!s.eventsListeners||s.destroyed?s:s.eventsListeners?(e.split(" ").forEach((e=>{void 0===t?s.eventsListeners[e]=[]:s.eventsListeners[e]&&s.eventsListeners[e].forEach(((i,r)=>{(i===t||i.__emitterProxy&&i.__emitterProxy===t)&&s.eventsListeners[e].splice(r,1)}))})),s):s},emit(){const e=this;if(!e.eventsListeners||e.destroyed)return e;if(!e.eventsListeners)return e;let t,s,i;for(var r=arguments.length,a=new Array(r),n=0;n<r;n++)a[n]=arguments[n];"string"==typeof a[0]||Array.isArray(a[0])?(t=a[0],s=a.slice(1,a.length),i=e):(t=a[0].events,s=a[0].data,i=a[0].context||e),s.unshift(i);return(Array.isArray(t)?t:t.split(" ")).forEach((t=>{e.eventsAnyListeners&&e.eventsAnyListeners.length&&e.eventsAnyListeners.forEach((e=>{e.apply(i,[t,...s])})),e.eventsListeners&&e.eventsListeners[t]&&e.eventsListeners[t].forEach((e=>{e.apply(i,s)}))})),e}};const u=(e,t,s)=>{t&&!e.classList.contains(s)?e.classList.add(s):!t&&e.classList.contains(s)&&e.classList.remove(s)};const m=(e,t,s)=>{t&&!e.classList.contains(s)?e.classList.add(s):!t&&e.classList.contains(s)&&e.classList.remove(s)};const f=(e,t)=>{if(!e||e.destroyed||!e.params)return;const s=t.closest(e.isElement?"swiper-slide":`.${e.params.slideClass}`);if(s){let t=s.querySelector(`.${e.params.lazyPreloaderClass}`);!t&&e.isElement&&(s.shadowRoot?t=s.shadowRoot.querySelector(`.${e.params.lazyPreloaderClass}`):requestAnimationFrame((()=>{s.shadowRoot&&(t=s.shadowRoot.querySelector(`.${e.params.lazyPreloaderClass}`),t&&t.remove())}))),t&&t.remove()}},h=(e,t)=>{if(!e.slides[t])return;const s=e.slides[t].querySelector('[loading="lazy"]');s&&s.removeAttribute("loading")},g=e=>{if(!e||e.destroyed||!e.params)return;let t=e.params.lazyPreloadPrevNext;const s=e.slides.length;if(!s||!t||t<0)return;t=Math.min(t,s);const i="auto"===e.params.slidesPerView?e.slidesPerViewDynamic():Math.ceil(e.params.slidesPerView),r=e.activeIndex;if(e.params.grid&&e.params.grid.rows>1){const s=r,a=[s-t];return a.push(...Array.from({length:t}).map(((e,t)=>s+i+t))),void e.slides.forEach(((t,s)=>{a.includes(t.column)&&h(e,s)}))}const a=r+i-1;if(e.params.rewind||e.params.loop)for(let i=r-t;i<=a+t;i+=1){const t=(i%s+s)%s;(t<r||t>a)&&h(e,t)}else for(let i=Math.max(r-t,0);i<=Math.min(a+t,s-1);i+=1)i!==r&&(i>a||i<r)&&h(e,i)};var v={updateSize:function(){const e=this;let t,s;const i=e.el;t=void 0!==e.params.width&&null!==e.params.width?e.params.width:i.clientWidth,s=void 0!==e.params.height&&null!==e.params.height?e.params.height:i.clientHeight,0===t&&e.isHorizontal()||0===s&&e.isVertical()||(t=t-parseInt((0,r.o)(i,"padding-left")||0,10)-parseInt((0,r.o)(i,"padding-right")||0,10),s=s-parseInt((0,r.o)(i,"padding-top")||0,10)-parseInt((0,r.o)(i,"padding-bottom")||0,10),Number.isNaN(t)&&(t=0),Number.isNaN(s)&&(s=0),Object.assign(e,{width:t,height:s,size:e.isHorizontal()?t:s}))},updateSlides:function(){const e=this;function t(t,s){return parseFloat(t.getPropertyValue(e.getDirectionLabel(s))||0)}const s=e.params,{wrapperEl:i,slidesEl:a,size:n,rtlTranslate:l,wrongRTL:o}=e,d=e.virtual&&s.virtual.enabled,c=d?e.virtual.slides.length:e.slides.length,p=(0,r.e)(a,`.${e.params.slideClass}, swiper-slide`),u=d?e.virtual.slides.length:p.length;let m=[];const f=[],h=[];let g=s.slidesOffsetBefore;"function"==typeof g&&(g=s.slidesOffsetBefore.call(e));let v=s.slidesOffsetAfter;"function"==typeof v&&(v=s.slidesOffsetAfter.call(e));const w=e.snapGrid.length,b=e.slidesGrid.length;let S=s.spaceBetween,T=-g,y=0,x=0;if(void 0===n)return;"string"==typeof S&&S.indexOf("%")>=0?S=parseFloat(S.replace("%",""))/100*n:"string"==typeof S&&(S=parseFloat(S)),e.virtualSize=-S,p.forEach((e=>{l?e.style.marginLeft="":e.style.marginRight="",e.style.marginBottom="",e.style.marginTop=""})),s.centeredSlides&&s.cssMode&&((0,r.s)(i,"--swiper-centered-offset-before",""),(0,r.s)(i,"--swiper-centered-offset-after",""));const E=s.grid&&s.grid.rows>1&&e.grid;let C;E?e.grid.initSlides(p):e.grid&&e.grid.unsetSlides();const M="auto"===s.slidesPerView&&s.breakpoints&&Object.keys(s.breakpoints).filter((e=>void 0!==s.breakpoints[e].slidesPerView)).length>0;for(let i=0;i<u;i+=1){let a;if(C=0,p[i]&&(a=p[i]),E&&e.grid.updateSlide(i,a,p),!p[i]||"none"!==(0,r.o)(a,"display")){if("auto"===s.slidesPerView){M&&(p[i].style[e.getDirectionLabel("width")]="");const n=getComputedStyle(a),l=a.style.transform,o=a.style.webkitTransform;if(l&&(a.style.transform="none"),o&&(a.style.webkitTransform="none"),s.roundLengths)C=e.isHorizontal()?(0,r.f)(a,"width",!0):(0,r.f)(a,"height",!0);else{const e=t(n,"width"),s=t(n,"padding-left"),i=t(n,"padding-right"),r=t(n,"margin-left"),l=t(n,"margin-right"),o=n.getPropertyValue("box-sizing");if(o&&"border-box"===o)C=e+r+l;else{const{clientWidth:t,offsetWidth:n}=a;C=e+s+i+r+l+(n-t)}}l&&(a.style.transform=l),o&&(a.style.webkitTransform=o),s.roundLengths&&(C=Math.floor(C))}else C=(n-(s.slidesPerView-1)*S)/s.slidesPerView,s.roundLengths&&(C=Math.floor(C)),p[i]&&(p[i].style[e.getDirectionLabel("width")]=`${C}px`);p[i]&&(p[i].swiperSlideSize=C),h.push(C),s.centeredSlides?(T=T+C/2+y/2+S,0===y&&0!==i&&(T=T-n/2-S),0===i&&(T=T-n/2-S),Math.abs(T)<.001&&(T=0),s.roundLengths&&(T=Math.floor(T)),x%s.slidesPerGroup==0&&m.push(T),f.push(T)):(s.roundLengths&&(T=Math.floor(T)),(x-Math.min(e.params.slidesPerGroupSkip,x))%e.params.slidesPerGroup==0&&m.push(T),f.push(T),T=T+C+S),e.virtualSize+=C+S,y=C,x+=1}}if(e.virtualSize=Math.max(e.virtualSize,n)+v,l&&o&&("slide"===s.effect||"coverflow"===s.effect)&&(i.style.width=`${e.virtualSize+S}px`),s.setWrapperSize&&(i.style[e.getDirectionLabel("width")]=`${e.virtualSize+S}px`),E&&e.grid.updateWrapperSize(C,m),!s.centeredSlides){const t=[];for(let i=0;i<m.length;i+=1){let r=m[i];s.roundLengths&&(r=Math.floor(r)),m[i]<=e.virtualSize-n&&t.push(r)}m=t,Math.floor(e.virtualSize-n)-Math.floor(m[m.length-1])>1&&m.push(e.virtualSize-n)}if(d&&s.loop){const t=h[0]+S;if(s.slidesPerGroup>1){const i=Math.ceil((e.virtual.slidesBefore+e.virtual.slidesAfter)/s.slidesPerGroup),r=t*s.slidesPerGroup;for(let e=0;e<i;e+=1)m.push(m[m.length-1]+r)}for(let i=0;i<e.virtual.slidesBefore+e.virtual.slidesAfter;i+=1)1===s.slidesPerGroup&&m.push(m[m.length-1]+t),f.push(f[f.length-1]+t),e.virtualSize+=t}if(0===m.length&&(m=[0]),0!==S){const t=e.isHorizontal()&&l?"marginLeft":e.getDirectionLabel("marginRight");p.filter(((e,t)=>!(s.cssMode&&!s.loop)||t!==p.length-1)).forEach((e=>{e.style[t]=`${S}px`}))}if(s.centeredSlides&&s.centeredSlidesBounds){let e=0;h.forEach((t=>{e+=t+(S||0)})),e-=S;const t=e-n;m=m.map((e=>e<=0?-g:e>t?t+v:e))}if(s.centerInsufficientSlides){let e=0;h.forEach((t=>{e+=t+(S||0)})),e-=S;const t=(s.slidesOffsetBefore||0)+(s.slidesOffsetAfter||0);if(e+t<n){const s=(n-e-t)/2;m.forEach(((e,t)=>{m[t]=e-s})),f.forEach(((e,t)=>{f[t]=e+s}))}}if(Object.assign(e,{slides:p,snapGrid:m,slidesGrid:f,slidesSizesGrid:h}),s.centeredSlides&&s.cssMode&&!s.centeredSlidesBounds){(0,r.s)(i,"--swiper-centered-offset-before",-m[0]+"px"),(0,r.s)(i,"--swiper-centered-offset-after",e.size/2-h[h.length-1]/2+"px");const t=-e.snapGrid[0],s=-e.slidesGrid[0];e.snapGrid=e.snapGrid.map((e=>e+t)),e.slidesGrid=e.slidesGrid.map((e=>e+s))}if(u!==c&&e.emit("slidesLengthChange"),m.length!==w&&(e.params.watchOverflow&&e.checkOverflow(),e.emit("snapGridLengthChange")),f.length!==b&&e.emit("slidesGridLengthChange"),s.watchSlidesProgress&&e.updateSlidesOffset(),e.emit("slidesUpdated"),!(d||s.cssMode||"slide"!==s.effect&&"fade"!==s.effect)){const t=`${s.containerModifierClass}backface-hidden`,i=e.el.classList.contains(t);u<=s.maxBackfaceHiddenSlides?i||e.el.classList.add(t):i&&e.el.classList.remove(t)}},updateAutoHeight:function(e){const t=this,s=[],i=t.virtual&&t.params.virtual.enabled;let r,a=0;"number"==typeof e?t.setTransition(e):!0===e&&t.setTransition(t.params.speed);const n=e=>i?t.slides[t.getSlideIndexByData(e)]:t.slides[e];if("auto"!==t.params.slidesPerView&&t.params.slidesPerView>1)if(t.params.centeredSlides)(t.visibleSlides||[]).forEach((e=>{s.push(e)}));else for(r=0;r<Math.ceil(t.params.slidesPerView);r+=1){const e=t.activeIndex+r;if(e>t.slides.length&&!i)break;s.push(n(e))}else s.push(n(t.activeIndex));for(r=0;r<s.length;r+=1)if(void 0!==s[r]){const e=s[r].offsetHeight;a=e>a?e:a}(a||0===a)&&(t.wrapperEl.style.height=`${a}px`)},updateSlidesOffset:function(){const e=this,t=e.slides,s=e.isElement?e.isHorizontal()?e.wrapperEl.offsetLeft:e.wrapperEl.offsetTop:0;for(let i=0;i<t.length;i+=1)t[i].swiperSlideOffset=(e.isHorizontal()?t[i].offsetLeft:t[i].offsetTop)-s-e.cssOverflowAdjustment()},updateSlidesProgress:function(e){void 0===e&&(e=this&&this.translate||0);const t=this,s=t.params,{slides:i,rtlTranslate:r,snapGrid:a}=t;if(0===i.length)return;void 0===i[0].swiperSlideOffset&&t.updateSlidesOffset();let n=-e;r&&(n=e),t.visibleSlidesIndexes=[],t.visibleSlides=[];let l=s.spaceBetween;"string"==typeof l&&l.indexOf("%")>=0?l=parseFloat(l.replace("%",""))/100*t.size:"string"==typeof l&&(l=parseFloat(l));for(let e=0;e<i.length;e+=1){const o=i[e];let d=o.swiperSlideOffset;s.cssMode&&s.centeredSlides&&(d-=i[0].swiperSlideOffset);const c=(n+(s.centeredSlides?t.minTranslate():0)-d)/(o.swiperSlideSize+l),p=(n-a[0]+(s.centeredSlides?t.minTranslate():0)-d)/(o.swiperSlideSize+l),m=-(n-d),f=m+t.slidesSizesGrid[e],h=m>=0&&m<=t.size-t.slidesSizesGrid[e],g=m>=0&&m<t.size-1||f>1&&f<=t.size||m<=0&&f>=t.size;g&&(t.visibleSlides.push(o),t.visibleSlidesIndexes.push(e)),u(o,g,s.slideVisibleClass),u(o,h,s.slideFullyVisibleClass),o.progress=r?-c:c,o.originalProgress=r?-p:p}},updateProgress:function(e){const t=this;if(void 0===e){const s=t.rtlTranslate?-1:1;e=t&&t.translate&&t.translate*s||0}const s=t.params,i=t.maxTranslate()-t.minTranslate();let{progress:r,isBeginning:a,isEnd:n,progressLoop:l}=t;const o=a,d=n;if(0===i)r=0,a=!0,n=!0;else{r=(e-t.minTranslate())/i;const s=Math.abs(e-t.minTranslate())<1,l=Math.abs(e-t.maxTranslate())<1;a=s||r<=0,n=l||r>=1,s&&(r=0),l&&(r=1)}if(s.loop){const s=t.getSlideIndexByData(0),i=t.getSlideIndexByData(t.slides.length-1),r=t.slidesGrid[s],a=t.slidesGrid[i],n=t.slidesGrid[t.slidesGrid.length-1],o=Math.abs(e);l=o>=r?(o-r)/n:(o+n-a)/n,l>1&&(l-=1)}Object.assign(t,{progress:r,progressLoop:l,isBeginning:a,isEnd:n}),(s.watchSlidesProgress||s.centeredSlides&&s.autoHeight)&&t.updateSlidesProgress(e),a&&!o&&t.emit("reachBeginning toEdge"),n&&!d&&t.emit("reachEnd toEdge"),(o&&!a||d&&!n)&&t.emit("fromEdge"),t.emit("progress",r)},updateSlidesClasses:function(){const e=this,{slides:t,params:s,slidesEl:i,activeIndex:a}=e,n=e.virtual&&s.virtual.enabled,l=e.grid&&s.grid&&s.grid.rows>1,o=e=>(0,r.e)(i,`.${s.slideClass}${e}, swiper-slide${e}`)[0];let d,c,p;if(n)if(s.loop){let t=a-e.virtual.slidesBefore;t<0&&(t=e.virtual.slides.length+t),t>=e.virtual.slides.length&&(t-=e.virtual.slides.length),d=o(`[data-swiper-slide-index="${t}"]`)}else d=o(`[data-swiper-slide-index="${a}"]`);else l?(d=t.filter((e=>e.column===a))[0],p=t.filter((e=>e.column===a+1))[0],c=t.filter((e=>e.column===a-1))[0]):d=t[a];d&&(l||(p=(0,r.p)(d,`.${s.slideClass}, swiper-slide`)[0],s.loop&&!p&&(p=t[0]),c=(0,r.q)(d,`.${s.slideClass}, swiper-slide`)[0],s.loop&&0===!c&&(c=t[t.length-1]))),t.forEach((e=>{m(e,e===d,s.slideActiveClass),m(e,e===p,s.slideNextClass),m(e,e===c,s.slidePrevClass)})),e.emitSlidesClasses()},updateActiveIndex:function(e){const t=this,s=t.rtlTranslate?t.translate:-t.translate,{snapGrid:i,params:r,activeIndex:a,realIndex:n,snapIndex:l}=t;let o,d=e;const c=e=>{let s=e-t.virtual.slidesBefore;return s<0&&(s=t.virtual.slides.length+s),s>=t.virtual.slides.length&&(s-=t.virtual.slides.length),s};if(void 0===d&&(d=function(e){const{slidesGrid:t,params:s}=e,i=e.rtlTranslate?e.translate:-e.translate;let r;for(let e=0;e<t.length;e+=1)void 0!==t[e+1]?i>=t[e]&&i<t[e+1]-(t[e+1]-t[e])/2?r=e:i>=t[e]&&i<t[e+1]&&(r=e+1):i>=t[e]&&(r=e);return s.normalizeSlideIndex&&(r<0||void 0===r)&&(r=0),r}(t)),i.indexOf(s)>=0)o=i.indexOf(s);else{const e=Math.min(r.slidesPerGroupSkip,d);o=e+Math.floor((d-e)/r.slidesPerGroup)}if(o>=i.length&&(o=i.length-1),d===a&&!t.params.loop)return void(o!==l&&(t.snapIndex=o,t.emit("snapIndexChange")));if(d===a&&t.params.loop&&t.virtual&&t.params.virtual.enabled)return void(t.realIndex=c(d));const p=t.grid&&r.grid&&r.grid.rows>1;let u;if(t.virtual&&r.virtual.enabled&&r.loop)u=c(d);else if(p){const e=t.slides.filter((e=>e.column===d))[0];let s=parseInt(e.getAttribute("data-swiper-slide-index"),10);Number.isNaN(s)&&(s=Math.max(t.slides.indexOf(e),0)),u=Math.floor(s/r.grid.rows)}else if(t.slides[d]){const e=t.slides[d].getAttribute("data-swiper-slide-index");u=e?parseInt(e,10):d}else u=d;Object.assign(t,{previousSnapIndex:l,snapIndex:o,previousRealIndex:n,realIndex:u,previousIndex:a,activeIndex:d}),t.initialized&&g(t),t.emit("activeIndexChange"),t.emit("snapIndexChange"),(t.initialized||t.params.runCallbacksOnInit)&&(n!==u&&t.emit("realIndexChange"),t.emit("slideChange"))},updateClickedSlide:function(e,t){const s=this,i=s.params;let r=e.closest(`.${i.slideClass}, swiper-slide`);!r&&s.isElement&&t&&t.length>1&&t.includes(e)&&[...t.slice(t.indexOf(e)+1,t.length)].forEach((e=>{!r&&e.matches&&e.matches(`.${i.slideClass}, swiper-slide`)&&(r=e)}));let a,n=!1;if(r)for(let e=0;e<s.slides.length;e+=1)if(s.slides[e]===r){n=!0,a=e;break}if(!r||!n)return s.clickedSlide=void 0,void(s.clickedIndex=void 0);s.clickedSlide=r,s.virtual&&s.params.virtual.enabled?s.clickedIndex=parseInt(r.getAttribute("data-swiper-slide-index"),10):s.clickedIndex=a,i.slideToClickedSlide&&void 0!==s.clickedIndex&&s.clickedIndex!==s.activeIndex&&s.slideToClickedSlide()}};var w={getTranslate:function(e){void 0===e&&(e=this.isHorizontal()?"x":"y");const{params:t,rtlTranslate:s,translate:i,wrapperEl:a}=this;if(t.virtualTranslate)return s?-i:i;if(t.cssMode)return i;let n=(0,r.j)(a,e);return n+=this.cssOverflowAdjustment(),s&&(n=-n),n||0},setTranslate:function(e,t){const s=this,{rtlTranslate:i,params:r,wrapperEl:a,progress:n}=s;let l,o=0,d=0;s.isHorizontal()?o=i?-e:e:d=e,r.roundLengths&&(o=Math.floor(o),d=Math.floor(d)),s.previousTranslate=s.translate,s.translate=s.isHorizontal()?o:d,r.cssMode?a[s.isHorizontal()?"scrollLeft":"scrollTop"]=s.isHorizontal()?-o:-d:r.virtualTranslate||(s.isHorizontal()?o-=s.cssOverflowAdjustment():d-=s.cssOverflowAdjustment(),a.style.transform=`translate3d(${o}px, ${d}px, 0px)`);const c=s.maxTranslate()-s.minTranslate();l=0===c?0:(e-s.minTranslate())/c,l!==n&&s.updateProgress(e),s.emit("setTranslate",s.translate,t)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]},translateTo:function(e,t,s,i,a){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===s&&(s=!0),void 0===i&&(i=!0);const n=this,{params:l,wrapperEl:o}=n;if(n.animating&&l.preventInteractionOnTransition)return!1;const d=n.minTranslate(),c=n.maxTranslate();let p;if(p=i&&e>d?d:i&&e<c?c:e,n.updateProgress(p),l.cssMode){const e=n.isHorizontal();if(0===t)o[e?"scrollLeft":"scrollTop"]=-p;else{if(!n.support.smoothScroll)return(0,r.r)({swiper:n,targetPosition:-p,side:e?"left":"top"}),!0;o.scrollTo({[e?"left":"top"]:-p,behavior:"smooth"})}return!0}return 0===t?(n.setTransition(0),n.setTranslate(p),s&&(n.emit("beforeTransitionStart",t,a),n.emit("transitionEnd"))):(n.setTransition(t),n.setTranslate(p),s&&(n.emit("beforeTransitionStart",t,a),n.emit("transitionStart")),n.animating||(n.animating=!0,n.onTranslateToWrapperTransitionEnd||(n.onTranslateToWrapperTransitionEnd=function(e){n&&!n.destroyed&&e.target===this&&(n.wrapperEl.removeEventListener("transitionend",n.onTranslateToWrapperTransitionEnd),n.onTranslateToWrapperTransitionEnd=null,delete n.onTranslateToWrapperTransitionEnd,n.animating=!1,s&&n.emit("transitionEnd"))}),n.wrapperEl.addEventListener("transitionend",n.onTranslateToWrapperTransitionEnd))),!0}};function b(e){let{swiper:t,runCallbacks:s,direction:i,step:r}=e;const{activeIndex:a,previousIndex:n}=t;let l=i;if(l||(l=a>n?"next":a<n?"prev":"reset"),t.emit(`transition${r}`),s&&a!==n){if("reset"===l)return void t.emit(`slideResetTransition${r}`);t.emit(`slideChangeTransition${r}`),"next"===l?t.emit(`slideNextTransition${r}`):t.emit(`slidePrevTransition${r}`)}}var S={slideTo:function(e,t,s,i,a){void 0===e&&(e=0),void 0===s&&(s=!0),"string"==typeof e&&(e=parseInt(e,10));const n=this;let l=e;l<0&&(l=0);const{params:o,snapGrid:d,slidesGrid:c,previousIndex:p,activeIndex:u,rtlTranslate:m,wrapperEl:f,enabled:h}=n;if(!h&&!i&&!a||n.destroyed||n.animating&&o.preventInteractionOnTransition)return!1;void 0===t&&(t=n.params.speed);const g=Math.min(n.params.slidesPerGroupSkip,l);let v=g+Math.floor((l-g)/n.params.slidesPerGroup);v>=d.length&&(v=d.length-1);const w=-d[v];if(o.normalizeSlideIndex)for(let e=0;e<c.length;e+=1){const t=-Math.floor(100*w),s=Math.floor(100*c[e]),i=Math.floor(100*c[e+1]);void 0!==c[e+1]?t>=s&&t<i-(i-s)/2?l=e:t>=s&&t<i&&(l=e+1):t>=s&&(l=e)}if(n.initialized&&l!==u){if(!n.allowSlideNext&&(m?w>n.translate&&w>n.minTranslate():w<n.translate&&w<n.minTranslate()))return!1;if(!n.allowSlidePrev&&w>n.translate&&w>n.maxTranslate()&&(u||0)!==l)return!1}let b;if(l!==(p||0)&&s&&n.emit("beforeSlideChangeStart"),n.updateProgress(w),b=l>u?"next":l<u?"prev":"reset",m&&-w===n.translate||!m&&w===n.translate)return n.updateActiveIndex(l),o.autoHeight&&n.updateAutoHeight(),n.updateSlidesClasses(),"slide"!==o.effect&&n.setTranslate(w),"reset"!==b&&(n.transitionStart(s,b),n.transitionEnd(s,b)),!1;if(o.cssMode){const e=n.isHorizontal(),s=m?w:-w;if(0===t){const t=n.virtual&&n.params.virtual.enabled;t&&(n.wrapperEl.style.scrollSnapType="none",n._immediateVirtual=!0),t&&!n._cssModeVirtualInitialSet&&n.params.initialSlide>0?(n._cssModeVirtualInitialSet=!0,requestAnimationFrame((()=>{f[e?"scrollLeft":"scrollTop"]=s}))):f[e?"scrollLeft":"scrollTop"]=s,t&&requestAnimationFrame((()=>{n.wrapperEl.style.scrollSnapType="",n._immediateVirtual=!1}))}else{if(!n.support.smoothScroll)return(0,r.r)({swiper:n,targetPosition:s,side:e?"left":"top"}),!0;f.scrollTo({[e?"left":"top"]:s,behavior:"smooth"})}return!0}return n.setTransition(t),n.setTranslate(w),n.updateActiveIndex(l),n.updateSlidesClasses(),n.emit("beforeTransitionStart",t,i),n.transitionStart(s,b),0===t?n.transitionEnd(s,b):n.animating||(n.animating=!0,n.onSlideToWrapperTransitionEnd||(n.onSlideToWrapperTransitionEnd=function(e){n&&!n.destroyed&&e.target===this&&(n.wrapperEl.removeEventListener("transitionend",n.onSlideToWrapperTransitionEnd),n.onSlideToWrapperTransitionEnd=null,delete n.onSlideToWrapperTransitionEnd,n.transitionEnd(s,b))}),n.wrapperEl.addEventListener("transitionend",n.onSlideToWrapperTransitionEnd)),!0},slideToLoop:function(e,t,s,i){if(void 0===e&&(e=0),void 0===s&&(s=!0),"string"==typeof e){e=parseInt(e,10)}const r=this;if(r.destroyed)return;void 0===t&&(t=r.params.speed);const a=r.grid&&r.params.grid&&r.params.grid.rows>1;let n=e;if(r.params.loop)if(r.virtual&&r.params.virtual.enabled)n+=r.virtual.slidesBefore;else{let e;if(a){const t=n*r.params.grid.rows;e=r.slides.filter((e=>1*e.getAttribute("data-swiper-slide-index")===t))[0].column}else e=r.getSlideIndexByData(n);const t=a?Math.ceil(r.slides.length/r.params.grid.rows):r.slides.length,{centeredSlides:s}=r.params;let l=r.params.slidesPerView;"auto"===l?l=r.slidesPerViewDynamic():(l=Math.ceil(parseFloat(r.params.slidesPerView,10)),s&&l%2==0&&(l+=1));let o=t-e<l;if(s&&(o=o||e<Math.ceil(l/2)),i&&s&&"auto"!==r.params.slidesPerView&&!a&&(o=!1),o){const i=s?e<r.activeIndex?"prev":"next":e-r.activeIndex-1<r.params.slidesPerView?"next":"prev";r.loopFix({direction:i,slideTo:!0,activeSlideIndex:"next"===i?e+1:e-t+1,slideRealIndex:"next"===i?r.realIndex:void 0})}if(a){const e=n*r.params.grid.rows;n=r.slides.filter((t=>1*t.getAttribute("data-swiper-slide-index")===e))[0].column}else n=r.getSlideIndexByData(n)}return requestAnimationFrame((()=>{r.slideTo(n,t,s,i)})),r},slideNext:function(e,t,s){void 0===t&&(t=!0);const i=this,{enabled:r,params:a,animating:n}=i;if(!r||i.destroyed)return i;void 0===e&&(e=i.params.speed);let l=a.slidesPerGroup;"auto"===a.slidesPerView&&1===a.slidesPerGroup&&a.slidesPerGroupAuto&&(l=Math.max(i.slidesPerViewDynamic("current",!0),1));const o=i.activeIndex<a.slidesPerGroupSkip?1:l,d=i.virtual&&a.virtual.enabled;if(a.loop){if(n&&!d&&a.loopPreventsSliding)return!1;if(i.loopFix({direction:"next"}),i._clientLeft=i.wrapperEl.clientLeft,i.activeIndex===i.slides.length-1&&a.cssMode)return requestAnimationFrame((()=>{i.slideTo(i.activeIndex+o,e,t,s)})),!0}return a.rewind&&i.isEnd?i.slideTo(0,e,t,s):i.slideTo(i.activeIndex+o,e,t,s)},slidePrev:function(e,t,s){void 0===t&&(t=!0);const i=this,{params:r,snapGrid:a,slidesGrid:n,rtlTranslate:l,enabled:o,animating:d}=i;if(!o||i.destroyed)return i;void 0===e&&(e=i.params.speed);const c=i.virtual&&r.virtual.enabled;if(r.loop){if(d&&!c&&r.loopPreventsSliding)return!1;i.loopFix({direction:"prev"}),i._clientLeft=i.wrapperEl.clientLeft}function p(e){return e<0?-Math.floor(Math.abs(e)):Math.floor(e)}const u=p(l?i.translate:-i.translate),m=a.map((e=>p(e)));let f=a[m.indexOf(u)-1];if(void 0===f&&r.cssMode){let e;a.forEach(((t,s)=>{u>=t&&(e=s)})),void 0!==e&&(f=a[e>0?e-1:e])}let h=0;if(void 0!==f&&(h=n.indexOf(f),h<0&&(h=i.activeIndex-1),"auto"===r.slidesPerView&&1===r.slidesPerGroup&&r.slidesPerGroupAuto&&(h=h-i.slidesPerViewDynamic("previous",!0)+1,h=Math.max(h,0))),r.rewind&&i.isBeginning){const r=i.params.virtual&&i.params.virtual.enabled&&i.virtual?i.virtual.slides.length-1:i.slides.length-1;return i.slideTo(r,e,t,s)}return r.loop&&0===i.activeIndex&&r.cssMode?(requestAnimationFrame((()=>{i.slideTo(h,e,t,s)})),!0):i.slideTo(h,e,t,s)},slideReset:function(e,t,s){void 0===t&&(t=!0);const i=this;if(!i.destroyed)return void 0===e&&(e=i.params.speed),i.slideTo(i.activeIndex,e,t,s)},slideToClosest:function(e,t,s,i){void 0===t&&(t=!0),void 0===i&&(i=.5);const r=this;if(r.destroyed)return;void 0===e&&(e=r.params.speed);let a=r.activeIndex;const n=Math.min(r.params.slidesPerGroupSkip,a),l=n+Math.floor((a-n)/r.params.slidesPerGroup),o=r.rtlTranslate?r.translate:-r.translate;if(o>=r.snapGrid[l]){const e=r.snapGrid[l];o-e>(r.snapGrid[l+1]-e)*i&&(a+=r.params.slidesPerGroup)}else{const e=r.snapGrid[l-1];o-e<=(r.snapGrid[l]-e)*i&&(a-=r.params.slidesPerGroup)}return a=Math.max(a,0),a=Math.min(a,r.slidesGrid.length-1),r.slideTo(a,e,t,s)},slideToClickedSlide:function(){const e=this;if(e.destroyed)return;const{params:t,slidesEl:s}=e,i="auto"===t.slidesPerView?e.slidesPerViewDynamic():t.slidesPerView;let a,n=e.clickedIndex;const l=e.isElement?"swiper-slide":`.${t.slideClass}`;if(t.loop){if(e.animating)return;a=parseInt(e.clickedSlide.getAttribute("data-swiper-slide-index"),10),t.centeredSlides?n<e.loopedSlides-i/2||n>e.slides.length-e.loopedSlides+i/2?(e.loopFix(),n=e.getSlideIndex((0,r.e)(s,`${l}[data-swiper-slide-index="${a}"]`)[0]),(0,r.n)((()=>{e.slideTo(n)}))):e.slideTo(n):n>e.slides.length-i?(e.loopFix(),n=e.getSlideIndex((0,r.e)(s,`${l}[data-swiper-slide-index="${a}"]`)[0]),(0,r.n)((()=>{e.slideTo(n)}))):e.slideTo(n)}else e.slideTo(n)}};var T={loopCreate:function(e){const t=this,{params:s,slidesEl:i}=t;if(!s.loop||t.virtual&&t.params.virtual.enabled)return;const a=()=>{(0,r.e)(i,`.${s.slideClass}, swiper-slide`).forEach(((e,t)=>{e.setAttribute("data-swiper-slide-index",t)}))},n=t.grid&&s.grid&&s.grid.rows>1,l=s.slidesPerGroup*(n?s.grid.rows:1),o=t.slides.length%l!=0,d=n&&t.slides.length%s.grid.rows!=0,c=e=>{for(let i=0;i<e;i+=1){const e=t.isElement?(0,r.c)("swiper-slide",[s.slideBlankClass]):(0,r.c)("div",[s.slideClass,s.slideBlankClass]);t.slidesEl.append(e)}};if(o){if(s.loopAddBlankSlides){c(l-t.slides.length%l),t.recalcSlides(),t.updateSlides()}else(0,r.t)("Swiper Loop Warning: The number of slides is not even to slidesPerGroup, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)");a()}else if(d){if(s.loopAddBlankSlides){c(s.grid.rows-t.slides.length%s.grid.rows),t.recalcSlides(),t.updateSlides()}else(0,r.t)("Swiper Loop Warning: The number of slides is not even to grid.rows, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)");a()}else a();t.loopFix({slideRealIndex:e,direction:s.centeredSlides?void 0:"next"})},loopFix:function(e){let{slideRealIndex:t,slideTo:s=!0,direction:i,setTranslate:a,activeSlideIndex:n,byController:l,byMousewheel:o}=void 0===e?{}:e;const d=this;if(!d.params.loop)return;d.emit("beforeLoopFix");const{slides:c,allowSlidePrev:p,allowSlideNext:u,slidesEl:m,params:f}=d,{centeredSlides:h}=f;if(d.allowSlidePrev=!0,d.allowSlideNext=!0,d.virtual&&f.virtual.enabled)return s&&(f.centeredSlides||0!==d.snapIndex?f.centeredSlides&&d.snapIndex<f.slidesPerView?d.slideTo(d.virtual.slides.length+d.snapIndex,0,!1,!0):d.snapIndex===d.snapGrid.length-1&&d.slideTo(d.virtual.slidesBefore,0,!1,!0):d.slideTo(d.virtual.slides.length,0,!1,!0)),d.allowSlidePrev=p,d.allowSlideNext=u,void d.emit("loopFix");let g=f.slidesPerView;"auto"===g?g=d.slidesPerViewDynamic():(g=Math.ceil(parseFloat(f.slidesPerView,10)),h&&g%2==0&&(g+=1));const v=f.slidesPerGroupAuto?g:f.slidesPerGroup;let w=v;w%v!=0&&(w+=v-w%v),w+=f.loopAdditionalSlides,d.loopedSlides=w;const b=d.grid&&f.grid&&f.grid.rows>1;c.length<g+w?(0,r.t)("Swiper Loop Warning: The number of slides is not enough for loop mode, it will be disabled and not function properly. You need to add more slides (or make duplicates) or lower the values of slidesPerView and slidesPerGroup parameters"):b&&"row"===f.grid.fill&&(0,r.t)("Swiper Loop Warning: Loop mode is not compatible with grid.fill = `row`");const S=[],T=[];let y=d.activeIndex;void 0===n?n=d.getSlideIndex(c.filter((e=>e.classList.contains(f.slideActiveClass)))[0]):y=n;const x="next"===i||!i,E="prev"===i||!i;let C=0,M=0;const P=b?Math.ceil(c.length/f.grid.rows):c.length,L=(b?c[n].column:n)+(h&&void 0===a?-g/2+.5:0);if(L<w){C=Math.max(w-L,v);for(let e=0;e<w-L;e+=1){const t=e-Math.floor(e/P)*P;if(b){const e=P-t-1;for(let t=c.length-1;t>=0;t-=1)c[t].column===e&&S.push(t)}else S.push(P-t-1)}}else if(L+g>P-w){M=Math.max(L-(P-2*w),v);for(let e=0;e<M;e+=1){const t=e-Math.floor(e/P)*P;b?c.forEach(((e,s)=>{e.column===t&&T.push(s)})):T.push(t)}}if(d.__preventObserver__=!0,requestAnimationFrame((()=>{d.__preventObserver__=!1})),E&&S.forEach((e=>{c[e].swiperLoopMoveDOM=!0,m.prepend(c[e]),c[e].swiperLoopMoveDOM=!1})),x&&T.forEach((e=>{c[e].swiperLoopMoveDOM=!0,m.append(c[e]),c[e].swiperLoopMoveDOM=!1})),d.recalcSlides(),"auto"===f.slidesPerView?d.updateSlides():b&&(S.length>0&&E||T.length>0&&x)&&d.slides.forEach(((e,t)=>{d.grid.updateSlide(t,e,d.slides)})),f.watchSlidesProgress&&d.updateSlidesOffset(),s)if(S.length>0&&E){if(void 0===t){const e=d.slidesGrid[y],t=d.slidesGrid[y+C]-e;o?d.setTranslate(d.translate-t):(d.slideTo(y+Math.ceil(C),0,!1,!0),a&&(d.touchEventsData.startTranslate=d.touchEventsData.startTranslate-t,d.touchEventsData.currentTranslate=d.touchEventsData.currentTranslate-t))}else if(a){const e=b?S.length/f.grid.rows:S.length;d.slideTo(d.activeIndex+e,0,!1,!0),d.touchEventsData.currentTranslate=d.translate}}else if(T.length>0&&x)if(void 0===t){const e=d.slidesGrid[y],t=d.slidesGrid[y-M]-e;o?d.setTranslate(d.translate-t):(d.slideTo(y-M,0,!1,!0),a&&(d.touchEventsData.startTranslate=d.touchEventsData.startTranslate-t,d.touchEventsData.currentTranslate=d.touchEventsData.currentTranslate-t))}else{const e=b?T.length/f.grid.rows:T.length;d.slideTo(d.activeIndex-e,0,!1,!0)}if(d.allowSlidePrev=p,d.allowSlideNext=u,d.controller&&d.controller.control&&!l){const e={slideRealIndex:t,direction:i,setTranslate:a,activeSlideIndex:n,byController:!0};Array.isArray(d.controller.control)?d.controller.control.forEach((t=>{!t.destroyed&&t.params.loop&&t.loopFix({...e,slideTo:t.params.slidesPerView===f.slidesPerView&&s})})):d.controller.control instanceof d.constructor&&d.controller.control.params.loop&&d.controller.control.loopFix({...e,slideTo:d.controller.control.params.slidesPerView===f.slidesPerView&&s})}d.emit("loopFix")},loopDestroy:function(){const e=this,{params:t,slidesEl:s}=e;if(!t.loop||e.virtual&&e.params.virtual.enabled)return;e.recalcSlides();const i=[];e.slides.forEach((e=>{const t=void 0===e.swiperSlideIndex?1*e.getAttribute("data-swiper-slide-index"):e.swiperSlideIndex;i[t]=e})),e.slides.forEach((e=>{e.removeAttribute("data-swiper-slide-index")})),i.forEach((e=>{s.append(e)})),e.recalcSlides(),e.slideTo(e.realIndex,0)}};function y(e,t,s){const r=(0,i.a)(),{params:a}=e,n=a.edgeSwipeDetection,l=a.edgeSwipeThreshold;return!n||!(s<=l||s>=r.innerWidth-l)||"prevent"===n&&(t.preventDefault(),!0)}function x(e){const t=this,s=(0,i.g)();let a=e;a.originalEvent&&(a=a.originalEvent);const n=t.touchEventsData;if("pointerdown"===a.type){if(null!==n.pointerId&&n.pointerId!==a.pointerId)return;n.pointerId=a.pointerId}else"touchstart"===a.type&&1===a.targetTouches.length&&(n.touchId=a.targetTouches[0].identifier);if("touchstart"===a.type)return void y(t,a,a.targetTouches[0].pageX);const{params:l,touches:o,enabled:d}=t;if(!d)return;if(!l.simulateTouch&&"mouse"===a.pointerType)return;if(t.animating&&l.preventInteractionOnTransition)return;!t.animating&&l.cssMode&&l.loop&&t.loopFix();let c=a.target;if("wrapper"===l.touchEventsTarget&&!t.wrapperEl.contains(c))return;if("which"in a&&3===a.which)return;if("button"in a&&a.button>0)return;if(n.isTouched&&n.isMoved)return;const p=!!l.noSwipingClass&&""!==l.noSwipingClass,u=a.composedPath?a.composedPath():a.path;p&&a.target&&a.target.shadowRoot&&u&&(c=u[0]);const m=l.noSwipingSelector?l.noSwipingSelector:`.${l.noSwipingClass}`,f=!(!a.target||!a.target.shadowRoot);if(l.noSwiping&&(f?function(e,t){return void 0===t&&(t=this),function t(s){if(!s||s===(0,i.g)()||s===(0,i.a)())return null;s.assignedSlot&&(s=s.assignedSlot);const r=s.closest(e);return r||s.getRootNode?r||t(s.getRootNode().host):null}(t)}(m,c):c.closest(m)))return void(t.allowClick=!0);if(l.swipeHandler&&!c.closest(l.swipeHandler))return;o.currentX=a.pageX,o.currentY=a.pageY;const h=o.currentX,g=o.currentY;if(!y(t,a,h))return;Object.assign(n,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),o.startX=h,o.startY=g,n.touchStartTime=(0,r.d)(),t.allowClick=!0,t.updateSize(),t.swipeDirection=void 0,l.threshold>0&&(n.allowThresholdMove=!1);let v=!0;c.matches(n.focusableElements)&&(v=!1,"SELECT"===c.nodeName&&(n.isTouched=!1)),s.activeElement&&s.activeElement.matches(n.focusableElements)&&s.activeElement!==c&&s.activeElement.blur();const w=v&&t.allowTouchMove&&l.touchStartPreventDefault;!l.touchStartForcePreventDefault&&!w||c.isContentEditable||a.preventDefault(),l.freeMode&&l.freeMode.enabled&&t.freeMode&&t.animating&&!l.cssMode&&t.freeMode.onTouchStart(),t.emit("touchStart",a)}function E(e){const t=(0,i.g)(),s=this,a=s.touchEventsData,{params:n,touches:l,rtlTranslate:o,enabled:d}=s;if(!d)return;if(!n.simulateTouch&&"mouse"===e.pointerType)return;let c,p=e;if(p.originalEvent&&(p=p.originalEvent),"pointermove"===p.type){if(null!==a.touchId)return;if(p.pointerId!==a.pointerId)return}if("touchmove"===p.type){if(c=[...p.changedTouches].filter((e=>e.identifier===a.touchId))[0],!c||c.identifier!==a.touchId)return}else c=p;if(!a.isTouched)return void(a.startMoving&&a.isScrolling&&s.emit("touchMoveOpposite",p));const u=c.pageX,m=c.pageY;if(p.preventedByNestedSwiper)return l.startX=u,void(l.startY=m);if(!s.allowTouchMove)return p.target.matches(a.focusableElements)||(s.allowClick=!1),void(a.isTouched&&(Object.assign(l,{startX:u,startY:m,currentX:u,currentY:m}),a.touchStartTime=(0,r.d)()));if(n.touchReleaseOnEdges&&!n.loop)if(s.isVertical()){if(m<l.startY&&s.translate<=s.maxTranslate()||m>l.startY&&s.translate>=s.minTranslate())return a.isTouched=!1,void(a.isMoved=!1)}else if(u<l.startX&&s.translate<=s.maxTranslate()||u>l.startX&&s.translate>=s.minTranslate())return;if(t.activeElement&&p.target===t.activeElement&&p.target.matches(a.focusableElements))return a.isMoved=!0,void(s.allowClick=!1);a.allowTouchCallbacks&&s.emit("touchMove",p),l.previousX=l.currentX,l.previousY=l.currentY,l.currentX=u,l.currentY=m;const f=l.currentX-l.startX,h=l.currentY-l.startY;if(s.params.threshold&&Math.sqrt(f**2+h**2)<s.params.threshold)return;if(void 0===a.isScrolling){let e;s.isHorizontal()&&l.currentY===l.startY||s.isVertical()&&l.currentX===l.startX?a.isScrolling=!1:f*f+h*h>=25&&(e=180*Math.atan2(Math.abs(h),Math.abs(f))/Math.PI,a.isScrolling=s.isHorizontal()?e>n.touchAngle:90-e>n.touchAngle)}if(a.isScrolling&&s.emit("touchMoveOpposite",p),void 0===a.startMoving&&(l.currentX===l.startX&&l.currentY===l.startY||(a.startMoving=!0)),a.isScrolling||"touchmove"===p.type&&a.preventTouchMoveFromPointerMove)return void(a.isTouched=!1);if(!a.startMoving)return;s.allowClick=!1,!n.cssMode&&p.cancelable&&p.preventDefault(),n.touchMoveStopPropagation&&!n.nested&&p.stopPropagation();let g=s.isHorizontal()?f:h,v=s.isHorizontal()?l.currentX-l.previousX:l.currentY-l.previousY;n.oneWayMovement&&(g=Math.abs(g)*(o?1:-1),v=Math.abs(v)*(o?1:-1)),l.diff=g,g*=n.touchRatio,o&&(g=-g,v=-v);const w=s.touchesDirection;s.swipeDirection=g>0?"prev":"next",s.touchesDirection=v>0?"prev":"next";const b=s.params.loop&&!n.cssMode,S="next"===s.touchesDirection&&s.allowSlideNext||"prev"===s.touchesDirection&&s.allowSlidePrev;if(!a.isMoved){if(b&&S&&s.loopFix({direction:s.swipeDirection}),a.startTranslate=s.getTranslate(),s.setTransition(0),s.animating){const e=new window.CustomEvent("transitionend",{bubbles:!0,cancelable:!0,detail:{bySwiperTouchMove:!0}});s.wrapperEl.dispatchEvent(e)}a.allowMomentumBounce=!1,!n.grabCursor||!0!==s.allowSlideNext&&!0!==s.allowSlidePrev||s.setGrabCursor(!0),s.emit("sliderFirstMove",p)}if((new Date).getTime(),a.isMoved&&a.allowThresholdMove&&w!==s.touchesDirection&&b&&S&&Math.abs(g)>=1)return Object.assign(l,{startX:u,startY:m,currentX:u,currentY:m,startTranslate:a.currentTranslate}),a.loopSwapReset=!0,void(a.startTranslate=a.currentTranslate);s.emit("sliderMove",p),a.isMoved=!0,a.currentTranslate=g+a.startTranslate;let T=!0,y=n.resistanceRatio;if(n.touchReleaseOnEdges&&(y=0),g>0?(b&&S&&a.allowThresholdMove&&a.currentTranslate>(n.centeredSlides?s.minTranslate()-s.slidesSizesGrid[s.activeIndex+1]:s.minTranslate())&&s.loopFix({direction:"prev",setTranslate:!0,activeSlideIndex:0}),a.currentTranslate>s.minTranslate()&&(T=!1,n.resistance&&(a.currentTranslate=s.minTranslate()-1+(-s.minTranslate()+a.startTranslate+g)**y))):g<0&&(b&&S&&a.allowThresholdMove&&a.currentTranslate<(n.centeredSlides?s.maxTranslate()+s.slidesSizesGrid[s.slidesSizesGrid.length-1]:s.maxTranslate())&&s.loopFix({direction:"next",setTranslate:!0,activeSlideIndex:s.slides.length-("auto"===n.slidesPerView?s.slidesPerViewDynamic():Math.ceil(parseFloat(n.slidesPerView,10)))}),a.currentTranslate<s.maxTranslate()&&(T=!1,n.resistance&&(a.currentTranslate=s.maxTranslate()+1-(s.maxTranslate()-a.startTranslate-g)**y))),T&&(p.preventedByNestedSwiper=!0),!s.allowSlideNext&&"next"===s.swipeDirection&&a.currentTranslate<a.startTranslate&&(a.currentTranslate=a.startTranslate),!s.allowSlidePrev&&"prev"===s.swipeDirection&&a.currentTranslate>a.startTranslate&&(a.currentTranslate=a.startTranslate),s.allowSlidePrev||s.allowSlideNext||(a.currentTranslate=a.startTranslate),n.threshold>0){if(!(Math.abs(g)>n.threshold||a.allowThresholdMove))return void(a.currentTranslate=a.startTranslate);if(!a.allowThresholdMove)return a.allowThresholdMove=!0,l.startX=l.currentX,l.startY=l.currentY,a.currentTranslate=a.startTranslate,void(l.diff=s.isHorizontal()?l.currentX-l.startX:l.currentY-l.startY)}n.followFinger&&!n.cssMode&&((n.freeMode&&n.freeMode.enabled&&s.freeMode||n.watchSlidesProgress)&&(s.updateActiveIndex(),s.updateSlidesClasses()),n.freeMode&&n.freeMode.enabled&&s.freeMode&&s.freeMode.onTouchMove(),s.updateProgress(a.currentTranslate),s.setTranslate(a.currentTranslate))}function C(e){const t=this,s=t.touchEventsData;let i,a=e;a.originalEvent&&(a=a.originalEvent);if("touchend"===a.type||"touchcancel"===a.type){if(i=[...a.changedTouches].filter((e=>e.identifier===s.touchId))[0],!i||i.identifier!==s.touchId)return}else{if(null!==s.touchId)return;if(a.pointerId!==s.pointerId)return;i=a}if(["pointercancel","pointerout","pointerleave","contextmenu"].includes(a.type)){if(!(["pointercancel","contextmenu"].includes(a.type)&&(t.browser.isSafari||t.browser.isWebView)))return}s.pointerId=null,s.touchId=null;const{params:n,touches:l,rtlTranslate:o,slidesGrid:d,enabled:c}=t;if(!c)return;if(!n.simulateTouch&&"mouse"===a.pointerType)return;if(s.allowTouchCallbacks&&t.emit("touchEnd",a),s.allowTouchCallbacks=!1,!s.isTouched)return s.isMoved&&n.grabCursor&&t.setGrabCursor(!1),s.isMoved=!1,void(s.startMoving=!1);n.grabCursor&&s.isMoved&&s.isTouched&&(!0===t.allowSlideNext||!0===t.allowSlidePrev)&&t.setGrabCursor(!1);const p=(0,r.d)(),u=p-s.touchStartTime;if(t.allowClick){const e=a.path||a.composedPath&&a.composedPath();t.updateClickedSlide(e&&e[0]||a.target,e),t.emit("tap click",a),u<300&&p-s.lastClickTime<300&&t.emit("doubleTap doubleClick",a)}if(s.lastClickTime=(0,r.d)(),(0,r.n)((()=>{t.destroyed||(t.allowClick=!0)})),!s.isTouched||!s.isMoved||!t.swipeDirection||0===l.diff&&!s.loopSwapReset||s.currentTranslate===s.startTranslate&&!s.loopSwapReset)return s.isTouched=!1,s.isMoved=!1,void(s.startMoving=!1);let m;if(s.isTouched=!1,s.isMoved=!1,s.startMoving=!1,m=n.followFinger?o?t.translate:-t.translate:-s.currentTranslate,n.cssMode)return;if(n.freeMode&&n.freeMode.enabled)return void t.freeMode.onTouchEnd({currentPos:m});const f=m>=-t.maxTranslate()&&!t.params.loop;let h=0,g=t.slidesSizesGrid[0];for(let e=0;e<d.length;e+=e<n.slidesPerGroupSkip?1:n.slidesPerGroup){const t=e<n.slidesPerGroupSkip-1?1:n.slidesPerGroup;void 0!==d[e+t]?(f||m>=d[e]&&m<d[e+t])&&(h=e,g=d[e+t]-d[e]):(f||m>=d[e])&&(h=e,g=d[d.length-1]-d[d.length-2])}let v=null,w=null;n.rewind&&(t.isBeginning?w=n.virtual&&n.virtual.enabled&&t.virtual?t.virtual.slides.length-1:t.slides.length-1:t.isEnd&&(v=0));const b=(m-d[h])/g,S=h<n.slidesPerGroupSkip-1?1:n.slidesPerGroup;if(u>n.longSwipesMs){if(!n.longSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&(b>=n.longSwipesRatio?t.slideTo(n.rewind&&t.isEnd?v:h+S):t.slideTo(h)),"prev"===t.swipeDirection&&(b>1-n.longSwipesRatio?t.slideTo(h+S):null!==w&&b<0&&Math.abs(b)>n.longSwipesRatio?t.slideTo(w):t.slideTo(h))}else{if(!n.shortSwipes)return void t.slideTo(t.activeIndex);t.navigation&&(a.target===t.navigation.nextEl||a.target===t.navigation.prevEl)?a.target===t.navigation.nextEl?t.slideTo(h+S):t.slideTo(h):("next"===t.swipeDirection&&t.slideTo(null!==v?v:h+S),"prev"===t.swipeDirection&&t.slideTo(null!==w?w:h))}}function M(){const e=this,{params:t,el:s}=e;if(s&&0===s.offsetWidth)return;t.breakpoints&&e.setBreakpoint();const{allowSlideNext:i,allowSlidePrev:r,snapGrid:a}=e,n=e.virtual&&e.params.virtual.enabled;e.allowSlideNext=!0,e.allowSlidePrev=!0,e.updateSize(),e.updateSlides(),e.updateSlidesClasses();const l=n&&t.loop;!("auto"===t.slidesPerView||t.slidesPerView>1)||!e.isEnd||e.isBeginning||e.params.centeredSlides||l?e.params.loop&&!n?e.slideToLoop(e.realIndex,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0):e.slideTo(e.slides.length-1,0,!1,!0),e.autoplay&&e.autoplay.running&&e.autoplay.paused&&(clearTimeout(e.autoplay.resizeTimeout),e.autoplay.resizeTimeout=setTimeout((()=>{e.autoplay&&e.autoplay.running&&e.autoplay.paused&&e.autoplay.resume()}),500)),e.allowSlidePrev=r,e.allowSlideNext=i,e.params.watchOverflow&&a!==e.snapGrid&&e.checkOverflow()}function P(e){const t=this;t.enabled&&(t.allowClick||(t.params.preventClicks&&e.preventDefault(),t.params.preventClicksPropagation&&t.animating&&(e.stopPropagation(),e.stopImmediatePropagation())))}function L(){const e=this,{wrapperEl:t,rtlTranslate:s,enabled:i}=e;if(!i)return;let r;e.previousTranslate=e.translate,e.isHorizontal()?e.translate=-t.scrollLeft:e.translate=-t.scrollTop,0===e.translate&&(e.translate=0),e.updateActiveIndex(),e.updateSlidesClasses();const a=e.maxTranslate()-e.minTranslate();r=0===a?0:(e.translate-e.minTranslate())/a,r!==e.progress&&e.updateProgress(s?-e.translate:e.translate),e.emit("setTranslate",e.translate,!1)}function k(e){const t=this;f(t,e.target),t.params.cssMode||"auto"!==t.params.slidesPerView&&!t.params.autoHeight||t.update()}function I(){const e=this;e.documentTouchHandlerProceeded||(e.documentTouchHandlerProceeded=!0,e.params.touchReleaseOnEdges&&(e.el.style.touchAction="auto"))}const A=(e,t)=>{const s=(0,i.g)(),{params:r,el:a,wrapperEl:n,device:l}=e,o=!!r.nested,d="on"===t?"addEventListener":"removeEventListener",c=t;a&&"string"!=typeof a&&(s[d]("touchstart",e.onDocumentTouchStart,{passive:!1,capture:o}),a[d]("touchstart",e.onTouchStart,{passive:!1}),a[d]("pointerdown",e.onTouchStart,{passive:!1}),s[d]("touchmove",e.onTouchMove,{passive:!1,capture:o}),s[d]("pointermove",e.onTouchMove,{passive:!1,capture:o}),s[d]("touchend",e.onTouchEnd,{passive:!0}),s[d]("pointerup",e.onTouchEnd,{passive:!0}),s[d]("pointercancel",e.onTouchEnd,{passive:!0}),s[d]("touchcancel",e.onTouchEnd,{passive:!0}),s[d]("pointerout",e.onTouchEnd,{passive:!0}),s[d]("pointerleave",e.onTouchEnd,{passive:!0}),s[d]("contextmenu",e.onTouchEnd,{passive:!0}),(r.preventClicks||r.preventClicksPropagation)&&a[d]("click",e.onClick,!0),r.cssMode&&n[d]("scroll",e.onScroll),r.updateOnWindowResize?e[c](l.ios||l.android?"resize orientationchange observerUpdate":"resize observerUpdate",M,!0):e[c]("observerUpdate",M,!0),a[d]("load",e.onLoad,{capture:!0}))};const O=(e,t)=>e.grid&&t.grid&&t.grid.rows>1;var z={init:!0,direction:"horizontal",oneWayMovement:!1,swiperElementNodeName:"SWIPER-CONTAINER",touchEventsTarget:"wrapper",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,resizeObserver:!0,nested:!1,createElements:!1,eventsPrefix:"swiper",enabled:!0,focusableElements:"input, select, option, textarea, button, video, label",width:null,height:null,preventInteractionOnTransition:!1,userAgent:null,url:null,edgeSwipeDetection:!1,edgeSwipeThreshold:20,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,breakpointsBase:"window",spaceBetween:0,slidesPerView:1,slidesPerGroup:1,slidesPerGroupSkip:0,slidesPerGroupAuto:!1,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!0,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:5,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,loop:!1,loopAddBlankSlides:!0,loopAdditionalSlides:0,loopPreventsSliding:!0,rewind:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,maxBackfaceHiddenSlides:10,containerModifierClass:"swiper-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-blank",slideActiveClass:"swiper-slide-active",slideVisibleClass:"swiper-slide-visible",slideFullyVisibleClass:"swiper-slide-fully-visible",slideNextClass:"swiper-slide-next",slidePrevClass:"swiper-slide-prev",wrapperClass:"swiper-wrapper",lazyPreloaderClass:"swiper-lazy-preloader",lazyPreloadPrevNext:0,runCallbacksOnInit:!0,_emitClasses:!1};function G(e,t){return function(s){void 0===s&&(s={});const i=Object.keys(s)[0],a=s[i];"object"==typeof a&&null!==a?(!0===e[i]&&(e[i]={enabled:!0}),"navigation"===i&&e[i]&&e[i].enabled&&!e[i].prevEl&&!e[i].nextEl&&(e[i].auto=!0),["pagination","scrollbar"].indexOf(i)>=0&&e[i]&&e[i].enabled&&!e[i].el&&(e[i].auto=!0),i in e&&"enabled"in a?("object"!=typeof e[i]||"enabled"in e[i]||(e[i].enabled=!0),e[i]||(e[i]={enabled:!1}),(0,r.u)(t,s)):(0,r.u)(t,s)):(0,r.u)(t,s)}}const D={eventsEmitter:p,update:v,translate:w,transition:{setTransition:function(e,t){const s=this;s.params.cssMode||(s.wrapperEl.style.transitionDuration=`${e}ms`,s.wrapperEl.style.transitionDelay=0===e?"0ms":""),s.emit("setTransition",e,t)},transitionStart:function(e,t){void 0===e&&(e=!0);const s=this,{params:i}=s;i.cssMode||(i.autoHeight&&s.updateAutoHeight(),b({swiper:s,runCallbacks:e,direction:t,step:"Start"}))},transitionEnd:function(e,t){void 0===e&&(e=!0);const s=this,{params:i}=s;s.animating=!1,i.cssMode||(s.setTransition(0),b({swiper:s,runCallbacks:e,direction:t,step:"End"}))}},slide:S,loop:T,grabCursor:{setGrabCursor:function(e){const t=this;if(!t.params.simulateTouch||t.params.watchOverflow&&t.isLocked||t.params.cssMode)return;const s="container"===t.params.touchEventsTarget?t.el:t.wrapperEl;t.isElement&&(t.__preventObserver__=!0),s.style.cursor="move",s.style.cursor=e?"grabbing":"grab",t.isElement&&requestAnimationFrame((()=>{t.__preventObserver__=!1}))},unsetGrabCursor:function(){const e=this;e.params.watchOverflow&&e.isLocked||e.params.cssMode||(e.isElement&&(e.__preventObserver__=!0),e["container"===e.params.touchEventsTarget?"el":"wrapperEl"].style.cursor="",e.isElement&&requestAnimationFrame((()=>{e.__preventObserver__=!1})))}},events:{attachEvents:function(){const e=this,{params:t}=e;e.onTouchStart=x.bind(e),e.onTouchMove=E.bind(e),e.onTouchEnd=C.bind(e),e.onDocumentTouchStart=I.bind(e),t.cssMode&&(e.onScroll=L.bind(e)),e.onClick=P.bind(e),e.onLoad=k.bind(e),A(e,"on")},detachEvents:function(){A(this,"off")}},breakpoints:{setBreakpoint:function(){const e=this,{realIndex:t,initialized:s,params:i,el:a}=e,n=i.breakpoints;if(!n||n&&0===Object.keys(n).length)return;const l=e.getBreakpoint(n,e.params.breakpointsBase,e.el);if(!l||e.currentBreakpoint===l)return;const o=(l in n?n[l]:void 0)||e.originalParams,d=O(e,i),c=O(e,o),p=e.params.grabCursor,u=o.grabCursor,m=i.enabled;d&&!c?(a.classList.remove(`${i.containerModifierClass}grid`,`${i.containerModifierClass}grid-column`),e.emitContainerClasses()):!d&&c&&(a.classList.add(`${i.containerModifierClass}grid`),(o.grid.fill&&"column"===o.grid.fill||!o.grid.fill&&"column"===i.grid.fill)&&a.classList.add(`${i.containerModifierClass}grid-column`),e.emitContainerClasses()),p&&!u?e.unsetGrabCursor():!p&&u&&e.setGrabCursor(),["navigation","pagination","scrollbar"].forEach((t=>{if(void 0===o[t])return;const s=i[t]&&i[t].enabled,r=o[t]&&o[t].enabled;s&&!r&&e[t].disable(),!s&&r&&e[t].enable()}));const f=o.direction&&o.direction!==i.direction,h=i.loop&&(o.slidesPerView!==i.slidesPerView||f),g=i.loop;f&&s&&e.changeDirection(),(0,r.u)(e.params,o);const v=e.params.enabled,w=e.params.loop;Object.assign(e,{allowTouchMove:e.params.allowTouchMove,allowSlideNext:e.params.allowSlideNext,allowSlidePrev:e.params.allowSlidePrev}),m&&!v?e.disable():!m&&v&&e.enable(),e.currentBreakpoint=l,e.emit("_beforeBreakpoint",o),s&&(h?(e.loopDestroy(),e.loopCreate(t),e.updateSlides()):!g&&w?(e.loopCreate(t),e.updateSlides()):g&&!w&&e.loopDestroy()),e.emit("breakpoint",o)},getBreakpoint:function(e,t,s){if(void 0===t&&(t="window"),!e||"container"===t&&!s)return;let r=!1;const a=(0,i.a)(),n="window"===t?a.innerHeight:s.clientHeight,l=Object.keys(e).map((e=>{if("string"==typeof e&&0===e.indexOf("@")){const t=parseFloat(e.substr(1));return{value:n*t,point:e}}return{value:e,point:e}}));l.sort(((e,t)=>parseInt(e.value,10)-parseInt(t.value,10)));for(let e=0;e<l.length;e+=1){const{point:i,value:n}=l[e];"window"===t?a.matchMedia(`(min-width: ${n}px)`).matches&&(r=i):n<=s.clientWidth&&(r=i)}return r||"max"}},checkOverflow:{checkOverflow:function(){const e=this,{isLocked:t,params:s}=e,{slidesOffsetBefore:i}=s;if(i){const t=e.slides.length-1,s=e.slidesGrid[t]+e.slidesSizesGrid[t]+2*i;e.isLocked=e.size>s}else e.isLocked=1===e.snapGrid.length;!0===s.allowSlideNext&&(e.allowSlideNext=!e.isLocked),!0===s.allowSlidePrev&&(e.allowSlidePrev=!e.isLocked),t&&t!==e.isLocked&&(e.isEnd=!1),t!==e.isLocked&&e.emit(e.isLocked?"lock":"unlock")}},classes:{addClasses:function(){const e=this,{classNames:t,params:s,rtl:i,el:r,device:a}=e,n=function(e,t){const s=[];return e.forEach((e=>{"object"==typeof e?Object.keys(e).forEach((i=>{e[i]&&s.push(t+i)})):"string"==typeof e&&s.push(t+e)})),s}(["initialized",s.direction,{"free-mode":e.params.freeMode&&s.freeMode.enabled},{autoheight:s.autoHeight},{rtl:i},{grid:s.grid&&s.grid.rows>1},{"grid-column":s.grid&&s.grid.rows>1&&"column"===s.grid.fill},{android:a.android},{ios:a.ios},{"css-mode":s.cssMode},{centered:s.cssMode&&s.centeredSlides},{"watch-progress":s.watchSlidesProgress}],s.containerModifierClass);t.push(...n),r.classList.add(...t),e.emitContainerClasses()},removeClasses:function(){const{el:e,classNames:t}=this;e&&"string"!=typeof e&&(e.classList.remove(...t),this.emitContainerClasses())}}},_={};class ${constructor(){let e,t;for(var s=arguments.length,a=new Array(s),n=0;n<s;n++)a[n]=arguments[n];1===a.length&&a[0].constructor&&"Object"===Object.prototype.toString.call(a[0]).slice(8,-1)?t=a[0]:[e,t]=a,t||(t={}),t=(0,r.u)({},t),e&&!t.el&&(t.el=e);const l=(0,i.g)();if(t.el&&"string"==typeof t.el&&l.querySelectorAll(t.el).length>1){const e=[];return l.querySelectorAll(t.el).forEach((s=>{const i=(0,r.u)({},t,{el:s});e.push(new $(i))})),e}const p=this;p.__swiper__=!0,p.support=o(),p.device=d({userAgent:t.userAgent}),p.browser=c(),p.eventsListeners={},p.eventsAnyListeners=[],p.modules=[...p.__modules__],t.modules&&Array.isArray(t.modules)&&p.modules.push(...t.modules);const u={};p.modules.forEach((e=>{e({params:t,swiper:p,extendParams:G(t,u),on:p.on.bind(p),once:p.once.bind(p),off:p.off.bind(p),emit:p.emit.bind(p)})}));const m=(0,r.u)({},z,u);return p.params=(0,r.u)({},m,_,t),p.originalParams=(0,r.u)({},p.params),p.passedParams=(0,r.u)({},t),p.params&&p.params.on&&Object.keys(p.params.on).forEach((e=>{p.on(e,p.params.on[e])})),p.params&&p.params.onAny&&p.onAny(p.params.onAny),Object.assign(p,{enabled:p.params.enabled,el:e,classNames:[],slides:[],slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:()=>"horizontal"===p.params.direction,isVertical:()=>"vertical"===p.params.direction,activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,cssOverflowAdjustment(){return Math.trunc(this.translate/2**23)*2**23},allowSlideNext:p.params.allowSlideNext,allowSlidePrev:p.params.allowSlidePrev,touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,focusableElements:p.params.focusableElements,lastClickTime:0,clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,startMoving:void 0,pointerId:null,touchId:null},allowClick:!0,allowTouchMove:p.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),p.emit("_swiper"),p.params.init&&p.init(),p}getDirectionLabel(e){return this.isHorizontal()?e:{width:"height","margin-top":"margin-left","margin-bottom ":"margin-right","margin-left":"margin-top","margin-right":"margin-bottom","padding-left":"padding-top","padding-right":"padding-bottom",marginRight:"marginBottom"}[e]}getSlideIndex(e){const{slidesEl:t,params:s}=this,i=(0,r.e)(t,`.${s.slideClass}, swiper-slide`),a=(0,r.h)(i[0]);return(0,r.h)(e)-a}getSlideIndexByData(e){return this.getSlideIndex(this.slides.filter((t=>1*t.getAttribute("data-swiper-slide-index")===e))[0])}recalcSlides(){const{slidesEl:e,params:t}=this;this.slides=(0,r.e)(e,`.${t.slideClass}, swiper-slide`)}enable(){const e=this;e.enabled||(e.enabled=!0,e.params.grabCursor&&e.setGrabCursor(),e.emit("enable"))}disable(){const e=this;e.enabled&&(e.enabled=!1,e.params.grabCursor&&e.unsetGrabCursor(),e.emit("disable"))}setProgress(e,t){const s=this;e=Math.min(Math.max(e,0),1);const i=s.minTranslate(),r=(s.maxTranslate()-i)*e+i;s.translateTo(r,void 0===t?0:t),s.updateActiveIndex(),s.updateSlidesClasses()}emitContainerClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const t=e.el.className.split(" ").filter((t=>0===t.indexOf("swiper")||0===t.indexOf(e.params.containerModifierClass)));e.emit("_containerClasses",t.join(" "))}getSlideClasses(e){const t=this;return t.destroyed?"":e.className.split(" ").filter((e=>0===e.indexOf("swiper-slide")||0===e.indexOf(t.params.slideClass))).join(" ")}emitSlidesClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const t=[];e.slides.forEach((s=>{const i=e.getSlideClasses(s);t.push({slideEl:s,classNames:i}),e.emit("_slideClass",s,i)})),e.emit("_slideClasses",t)}slidesPerViewDynamic(e,t){void 0===e&&(e="current"),void 0===t&&(t=!1);const{params:s,slides:i,slidesGrid:r,slidesSizesGrid:a,size:n,activeIndex:l}=this;let o=1;if("number"==typeof s.slidesPerView)return s.slidesPerView;if(s.centeredSlides){let e,t=i[l]?Math.ceil(i[l].swiperSlideSize):0;for(let s=l+1;s<i.length;s+=1)i[s]&&!e&&(t+=Math.ceil(i[s].swiperSlideSize),o+=1,t>n&&(e=!0));for(let s=l-1;s>=0;s-=1)i[s]&&!e&&(t+=i[s].swiperSlideSize,o+=1,t>n&&(e=!0))}else if("current"===e)for(let e=l+1;e<i.length;e+=1){(t?r[e]+a[e]-r[l]<n:r[e]-r[l]<n)&&(o+=1)}else for(let e=l-1;e>=0;e-=1){r[l]-r[e]<n&&(o+=1)}return o}update(){const e=this;if(!e||e.destroyed)return;const{snapGrid:t,params:s}=e;function i(){const t=e.rtlTranslate?-1*e.translate:e.translate,s=Math.min(Math.max(t,e.maxTranslate()),e.minTranslate());e.setTranslate(s),e.updateActiveIndex(),e.updateSlidesClasses()}let r;if(s.breakpoints&&e.setBreakpoint(),[...e.el.querySelectorAll('[loading="lazy"]')].forEach((t=>{t.complete&&f(e,t)})),e.updateSize(),e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),s.freeMode&&s.freeMode.enabled&&!s.cssMode)i(),s.autoHeight&&e.updateAutoHeight();else{if(("auto"===s.slidesPerView||s.slidesPerView>1)&&e.isEnd&&!s.centeredSlides){const t=e.virtual&&s.virtual.enabled?e.virtual.slides:e.slides;r=e.slideTo(t.length-1,0,!1,!0)}else r=e.slideTo(e.activeIndex,0,!1,!0);r||i()}s.watchOverflow&&t!==e.snapGrid&&e.checkOverflow(),e.emit("update")}changeDirection(e,t){void 0===t&&(t=!0);const s=this,i=s.params.direction;return e||(e="horizontal"===i?"vertical":"horizontal"),e===i||"horizontal"!==e&&"vertical"!==e||(s.el.classList.remove(`${s.params.containerModifierClass}${i}`),s.el.classList.add(`${s.params.containerModifierClass}${e}`),s.emitContainerClasses(),s.params.direction=e,s.slides.forEach((t=>{"vertical"===e?t.style.width="":t.style.height=""})),s.emit("changeDirection"),t&&s.update()),s}changeLanguageDirection(e){const t=this;t.rtl&&"rtl"===e||!t.rtl&&"ltr"===e||(t.rtl="rtl"===e,t.rtlTranslate="horizontal"===t.params.direction&&t.rtl,t.rtl?(t.el.classList.add(`${t.params.containerModifierClass}rtl`),t.el.dir="rtl"):(t.el.classList.remove(`${t.params.containerModifierClass}rtl`),t.el.dir="ltr"),t.update())}mount(e){const t=this;if(t.mounted)return!0;let s=e||t.params.el;if("string"==typeof s&&(s=document.querySelector(s)),!s)return!1;s.swiper=t,s.parentNode&&s.parentNode.host&&s.parentNode.host.nodeName===t.params.swiperElementNodeName.toUpperCase()&&(t.isElement=!0);const i=()=>`.${(t.params.wrapperClass||"").trim().split(" ").join(".")}`;let a=(()=>{if(s&&s.shadowRoot&&s.shadowRoot.querySelector){return s.shadowRoot.querySelector(i())}return(0,r.e)(s,i())[0]})();return!a&&t.params.createElements&&(a=(0,r.c)("div",t.params.wrapperClass),s.append(a),(0,r.e)(s,`.${t.params.slideClass}`).forEach((e=>{a.append(e)}))),Object.assign(t,{el:s,wrapperEl:a,slidesEl:t.isElement&&!s.parentNode.host.slideSlots?s.parentNode.host:a,hostEl:t.isElement?s.parentNode.host:s,mounted:!0,rtl:"rtl"===s.dir.toLowerCase()||"rtl"===(0,r.o)(s,"direction"),rtlTranslate:"horizontal"===t.params.direction&&("rtl"===s.dir.toLowerCase()||"rtl"===(0,r.o)(s,"direction")),wrongRTL:"-webkit-box"===(0,r.o)(a,"display")}),!0}init(e){const t=this;if(t.initialized)return t;if(!1===t.mount(e))return t;t.emit("beforeInit"),t.params.breakpoints&&t.setBreakpoint(),t.addClasses(),t.updateSize(),t.updateSlides(),t.params.watchOverflow&&t.checkOverflow(),t.params.grabCursor&&t.enabled&&t.setGrabCursor(),t.params.loop&&t.virtual&&t.params.virtual.enabled?t.slideTo(t.params.initialSlide+t.virtual.slidesBefore,0,t.params.runCallbacksOnInit,!1,!0):t.slideTo(t.params.initialSlide,0,t.params.runCallbacksOnInit,!1,!0),t.params.loop&&t.loopCreate(),t.attachEvents();const s=[...t.el.querySelectorAll('[loading="lazy"]')];return t.isElement&&s.push(...t.hostEl.querySelectorAll('[loading="lazy"]')),s.forEach((e=>{e.complete?f(t,e):e.addEventListener("load",(e=>{f(t,e.target)}))})),g(t),t.initialized=!0,g(t),t.emit("init"),t.emit("afterInit"),t}destroy(e,t){void 0===e&&(e=!0),void 0===t&&(t=!0);const s=this,{params:i,el:a,wrapperEl:n,slides:l}=s;return void 0===s.params||s.destroyed||(s.emit("beforeDestroy"),s.initialized=!1,s.detachEvents(),i.loop&&s.loopDestroy(),t&&(s.removeClasses(),a&&"string"!=typeof a&&a.removeAttribute("style"),n&&n.removeAttribute("style"),l&&l.length&&l.forEach((e=>{e.classList.remove(i.slideVisibleClass,i.slideFullyVisibleClass,i.slideActiveClass,i.slideNextClass,i.slidePrevClass),e.removeAttribute("style"),e.removeAttribute("data-swiper-slide-index")}))),s.emit("destroy"),Object.keys(s.eventsListeners).forEach((e=>{s.off(e)})),!1!==e&&(s.el&&"string"!=typeof s.el&&(s.el.swiper=null),(0,r.v)(s)),s.destroyed=!0),null}static extendDefaults(e){(0,r.u)(_,e)}static get extendedDefaults(){return _}static get defaults(){return z}static installModule(e){$.prototype.__modules__||($.prototype.__modules__=[]);const t=$.prototype.__modules__;"function"==typeof e&&t.indexOf(e)<0&&t.push(e)}static use(e){return Array.isArray(e)?(e.forEach((e=>$.installModule(e))),$):($.installModule(e),$)}}Object.keys(D).forEach((e=>{Object.keys(D[e]).forEach((t=>{$.prototype[t]=D[e][t]}))})),$.use([function(e){let{swiper:t,on:s,emit:r}=e;const a=(0,i.a)();let n=null,l=null;const o=()=>{t&&!t.destroyed&&t.initialized&&(r("beforeResize"),r("resize"))},d=()=>{t&&!t.destroyed&&t.initialized&&r("orientationchange")};s("init",(()=>{t.params.resizeObserver&&void 0!==a.ResizeObserver?t&&!t.destroyed&&t.initialized&&(n=new ResizeObserver((e=>{l=a.requestAnimationFrame((()=>{const{width:s,height:i}=t;let r=s,a=i;e.forEach((e=>{let{contentBoxSize:s,contentRect:i,target:n}=e;n&&n!==t.el||(r=i?i.width:(s[0]||s).inlineSize,a=i?i.height:(s[0]||s).blockSize)})),r===s&&a===i||o()}))})),n.observe(t.el)):(a.addEventListener("resize",o),a.addEventListener("orientationchange",d))})),s("destroy",(()=>{l&&a.cancelAnimationFrame(l),n&&n.unobserve&&t.el&&(n.unobserve(t.el),n=null),a.removeEventListener("resize",o),a.removeEventListener("orientationchange",d)}))},function(e){let{swiper:t,extendParams:s,on:a,emit:n}=e;const l=[],o=(0,i.a)(),d=function(e,s){void 0===s&&(s={});const i=new(o.MutationObserver||o.WebkitMutationObserver)((e=>{if(t.__preventObserver__)return;if(1===e.length)return void n("observerUpdate",e[0]);const s=function(){n("observerUpdate",e[0])};o.requestAnimationFrame?o.requestAnimationFrame(s):o.setTimeout(s,0)}));i.observe(e,{attributes:void 0===s.attributes||s.attributes,childList:void 0===s.childList||s.childList,characterData:void 0===s.characterData||s.characterData}),l.push(i)};s({observer:!1,observeParents:!1,observeSlideChildren:!1}),a("init",(()=>{if(t.params.observer){if(t.params.observeParents){const e=(0,r.a)(t.hostEl);for(let t=0;t<e.length;t+=1)d(e[t])}d(t.hostEl,{childList:t.params.observeSlideChildren}),d(t.wrapperEl,{attributes:!1})}})),a("destroy",(()=>{l.forEach((e=>{e.disconnect()})),l.splice(0,l.length)}))}])}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFPeTRCLE9BQVEsQ0FDcEJnQyxVQUFXejZCLEVBQU9FLE9BQU8wNkIsdUJBSTNCVixFQUFPbDZCLEVBQU93UyxVQUFXLENBQ3ZCZ29CLFlBQVksR0FkcUIsQ0FlakMsSUFjSnI1QixFQUFHLFdBWmEsS0FDZDg0QixFQUFVMTVCLFNBQVE2NEIsSUFDaEJBLEVBQVMwQixZQUFZLElBRXZCYixFQUFVNWdCLE9BQU8sRUFBRzRnQixFQUFVcjRCLE9BQU8sR0FTekMsRyIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYnBhY2stc2V0dXAvLi9ub2RlX21vZHVsZXMvc3dpcGVyL3NoYXJlZC9jcmVhdGUtZWxlbWVudC1pZi1ub3QtZGVmaW5lZC5tanMiLCJ3ZWJwYWNrOi8vd2VicGFjay1zZXR1cC8uL25vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9uYXZpZ2F0aW9uLm1qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXNldHVwLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9zaGFyZWQvY2xhc3Nlcy10by1zZWxlY3Rvci5tanMiLCJ3ZWJwYWNrOi8vd2VicGFjay1zZXR1cC8uL25vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9wYWdpbmF0aW9uLm1qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXNldHVwLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9zaGFyZWQvc3NyLXdpbmRvdy5lc20ubWpzIiwid2VicGFjazovL3dlYnBhY2stc2V0dXAvLi9ub2RlX21vZHVsZXMvc3dpcGVyL3NoYXJlZC91dGlscy5tanMiLCJ3ZWJwYWNrOi8vd2VicGFjay1zZXR1cC8uL25vZGVfbW9kdWxlcy9zd2lwZXIvc2hhcmVkL3N3aXBlci1jb3JlLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBlIGFzIGVsZW1lbnRDaGlsZHJlbiwgYyBhcyBjcmVhdGVFbGVtZW50IH0gZnJvbSAnLi91dGlscy5tanMnO1xuXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50SWZOb3REZWZpbmVkKHN3aXBlciwgb3JpZ2luYWxQYXJhbXMsIHBhcmFtcywgY2hlY2tQcm9wcykge1xuICBpZiAoc3dpcGVyLnBhcmFtcy5jcmVhdGVFbGVtZW50cykge1xuICAgIE9iamVjdC5rZXlzKGNoZWNrUHJvcHMpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgIGlmICghcGFyYW1zW2tleV0gJiYgcGFyYW1zLmF1dG8gPT09IHRydWUpIHtcbiAgICAgICAgbGV0IGVsZW1lbnQgPSBlbGVtZW50Q2hpbGRyZW4oc3dpcGVyLmVsLCBgLiR7Y2hlY2tQcm9wc1trZXldfWApWzBdO1xuICAgICAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgICAgICBlbGVtZW50ID0gY3JlYXRlRWxlbWVudCgnZGl2JywgY2hlY2tQcm9wc1trZXldKTtcbiAgICAgICAgICBlbGVtZW50LmNsYXNzTmFtZSA9IGNoZWNrUHJvcHNba2V5XTtcbiAgICAgICAgICBzd2lwZXIuZWwuYXBwZW5kKGVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIHBhcmFtc1trZXldID0gZWxlbWVudDtcbiAgICAgICAgb3JpZ2luYWxQYXJhbXNba2V5XSA9IGVsZW1lbnQ7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHBhcmFtcztcbn1cblxuZXhwb3J0IHsgY3JlYXRlRWxlbWVudElmTm90RGVmaW5lZCBhcyBjIH07XG4iLCJpbXBvcnQgeyBjIGFzIGNyZWF0ZUVsZW1lbnRJZk5vdERlZmluZWQgfSBmcm9tICcuLi9zaGFyZWQvY3JlYXRlLWVsZW1lbnQtaWYtbm90LWRlZmluZWQubWpzJztcbmltcG9ydCB7IG0gYXMgbWFrZUVsZW1lbnRzQXJyYXkgfSBmcm9tICcuLi9zaGFyZWQvdXRpbHMubWpzJztcblxuZnVuY3Rpb24gTmF2aWdhdGlvbihfcmVmKSB7XG4gIGxldCB7XG4gICAgc3dpcGVyLFxuICAgIGV4dGVuZFBhcmFtcyxcbiAgICBvbixcbiAgICBlbWl0XG4gIH0gPSBfcmVmO1xuICBleHRlbmRQYXJhbXMoe1xuICAgIG5hdmlnYXRpb246IHtcbiAgICAgIG5leHRFbDogbnVsbCxcbiAgICAgIHByZXZFbDogbnVsbCxcbiAgICAgIGhpZGVPbkNsaWNrOiBmYWxzZSxcbiAgICAgIGRpc2FibGVkQ2xhc3M6ICdzd2lwZXItYnV0dG9uLWRpc2FibGVkJyxcbiAgICAgIGhpZGRlbkNsYXNzOiAnc3dpcGVyLWJ1dHRvbi1oaWRkZW4nLFxuICAgICAgbG9ja0NsYXNzOiAnc3dpcGVyLWJ1dHRvbi1sb2NrJyxcbiAgICAgIG5hdmlnYXRpb25EaXNhYmxlZENsYXNzOiAnc3dpcGVyLW5hdmlnYXRpb24tZGlzYWJsZWQnXG4gICAgfVxuICB9KTtcbiAgc3dpcGVyLm5hdmlnYXRpb24gPSB7XG4gICAgbmV4dEVsOiBudWxsLFxuICAgIHByZXZFbDogbnVsbFxuICB9O1xuICBmdW5jdGlvbiBnZXRFbChlbCkge1xuICAgIGxldCByZXM7XG4gICAgaWYgKGVsICYmIHR5cGVvZiBlbCA9PT0gJ3N0cmluZycgJiYgc3dpcGVyLmlzRWxlbWVudCkge1xuICAgICAgcmVzID0gc3dpcGVyLmVsLnF1ZXJ5U2VsZWN0b3IoZWwpO1xuICAgICAgaWYgKHJlcykgcmV0dXJuIHJlcztcbiAgICB9XG4gICAgaWYgKGVsKSB7XG4gICAgICBpZiAodHlwZW9mIGVsID09PSAnc3RyaW5nJykgcmVzID0gWy4uLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoZWwpXTtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLnVuaXF1ZU5hdkVsZW1lbnRzICYmIHR5cGVvZiBlbCA9PT0gJ3N0cmluZycgJiYgcmVzICYmIHJlcy5sZW5ndGggPiAxICYmIHN3aXBlci5lbC5xdWVyeVNlbGVjdG9yQWxsKGVsKS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgcmVzID0gc3dpcGVyLmVsLnF1ZXJ5U2VsZWN0b3IoZWwpO1xuICAgICAgfSBlbHNlIGlmIChyZXMgJiYgcmVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICByZXMgPSByZXNbMF07XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChlbCAmJiAhcmVzKSByZXR1cm4gZWw7XG4gICAgLy8gaWYgKEFycmF5LmlzQXJyYXkocmVzKSAmJiByZXMubGVuZ3RoID09PSAxKSByZXMgPSByZXNbMF07XG4gICAgcmV0dXJuIHJlcztcbiAgfVxuICBmdW5jdGlvbiB0b2dnbGVFbChlbCwgZGlzYWJsZWQpIHtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLm5hdmlnYXRpb247XG4gICAgZWwgPSBtYWtlRWxlbWVudHNBcnJheShlbCk7XG4gICAgZWwuZm9yRWFjaChzdWJFbCA9PiB7XG4gICAgICBpZiAoc3ViRWwpIHtcbiAgICAgICAgc3ViRWwuY2xhc3NMaXN0W2Rpc2FibGVkID8gJ2FkZCcgOiAncmVtb3ZlJ10oLi4ucGFyYW1zLmRpc2FibGVkQ2xhc3Muc3BsaXQoJyAnKSk7XG4gICAgICAgIGlmIChzdWJFbC50YWdOYW1lID09PSAnQlVUVE9OJykgc3ViRWwuZGlzYWJsZWQgPSBkaXNhYmxlZDtcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzd2lwZXIuZW5hYmxlZCkge1xuICAgICAgICAgIHN1YkVsLmNsYXNzTGlzdFtzd2lwZXIuaXNMb2NrZWQgPyAnYWRkJyA6ICdyZW1vdmUnXShwYXJhbXMubG9ja0NsYXNzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICAvLyBVcGRhdGUgTmF2aWdhdGlvbiBCdXR0b25zXG4gICAgY29uc3Qge1xuICAgICAgbmV4dEVsLFxuICAgICAgcHJldkVsXG4gICAgfSA9IHN3aXBlci5uYXZpZ2F0aW9uO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgIHRvZ2dsZUVsKHByZXZFbCwgZmFsc2UpO1xuICAgICAgdG9nZ2xlRWwobmV4dEVsLCBmYWxzZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRvZ2dsZUVsKHByZXZFbCwgc3dpcGVyLmlzQmVnaW5uaW5nICYmICFzd2lwZXIucGFyYW1zLnJld2luZCk7XG4gICAgdG9nZ2xlRWwobmV4dEVsLCBzd2lwZXIuaXNFbmQgJiYgIXN3aXBlci5wYXJhbXMucmV3aW5kKTtcbiAgfVxuICBmdW5jdGlvbiBvblByZXZDbGljayhlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGlmIChzd2lwZXIuaXNCZWdpbm5pbmcgJiYgIXN3aXBlci5wYXJhbXMubG9vcCAmJiAhc3dpcGVyLnBhcmFtcy5yZXdpbmQpIHJldHVybjtcbiAgICBzd2lwZXIuc2xpZGVQcmV2KCk7XG4gICAgZW1pdCgnbmF2aWdhdGlvblByZXYnKTtcbiAgfVxuICBmdW5jdGlvbiBvbk5leHRDbGljayhlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGlmIChzd2lwZXIuaXNFbmQgJiYgIXN3aXBlci5wYXJhbXMubG9vcCAmJiAhc3dpcGVyLnBhcmFtcy5yZXdpbmQpIHJldHVybjtcbiAgICBzd2lwZXIuc2xpZGVOZXh0KCk7XG4gICAgZW1pdCgnbmF2aWdhdGlvbk5leHQnKTtcbiAgfVxuICBmdW5jdGlvbiBpbml0KCkge1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbjtcbiAgICBzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24gPSBjcmVhdGVFbGVtZW50SWZOb3REZWZpbmVkKHN3aXBlciwgc3dpcGVyLm9yaWdpbmFsUGFyYW1zLm5hdmlnYXRpb24sIHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbiwge1xuICAgICAgbmV4dEVsOiAnc3dpcGVyLWJ1dHRvbi1uZXh0JyxcbiAgICAgIHByZXZFbDogJ3N3aXBlci1idXR0b24tcHJldidcbiAgICB9KTtcbiAgICBpZiAoIShwYXJhbXMubmV4dEVsIHx8IHBhcmFtcy5wcmV2RWwpKSByZXR1cm47XG4gICAgbGV0IG5leHRFbCA9IGdldEVsKHBhcmFtcy5uZXh0RWwpO1xuICAgIGxldCBwcmV2RWwgPSBnZXRFbChwYXJhbXMucHJldkVsKTtcbiAgICBPYmplY3QuYXNzaWduKHN3aXBlci5uYXZpZ2F0aW9uLCB7XG4gICAgICBuZXh0RWwsXG4gICAgICBwcmV2RWxcbiAgICB9KTtcbiAgICBuZXh0RWwgPSBtYWtlRWxlbWVudHNBcnJheShuZXh0RWwpO1xuICAgIHByZXZFbCA9IG1ha2VFbGVtZW50c0FycmF5KHByZXZFbCk7XG4gICAgY29uc3QgaW5pdEJ1dHRvbiA9IChlbCwgZGlyKSA9PiB7XG4gICAgICBpZiAoZWwpIHtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBkaXIgPT09ICduZXh0JyA/IG9uTmV4dENsaWNrIDogb25QcmV2Q2xpY2spO1xuICAgICAgfVxuICAgICAgaWYgKCFzd2lwZXIuZW5hYmxlZCAmJiBlbCkge1xuICAgICAgICBlbC5jbGFzc0xpc3QuYWRkKC4uLnBhcmFtcy5sb2NrQ2xhc3Muc3BsaXQoJyAnKSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBuZXh0RWwuZm9yRWFjaChlbCA9PiBpbml0QnV0dG9uKGVsLCAnbmV4dCcpKTtcbiAgICBwcmV2RWwuZm9yRWFjaChlbCA9PiBpbml0QnV0dG9uKGVsLCAncHJldicpKTtcbiAgfVxuICBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIGxldCB7XG4gICAgICBuZXh0RWwsXG4gICAgICBwcmV2RWxcbiAgICB9ID0gc3dpcGVyLm5hdmlnYXRpb247XG4gICAgbmV4dEVsID0gbWFrZUVsZW1lbnRzQXJyYXkobmV4dEVsKTtcbiAgICBwcmV2RWwgPSBtYWtlRWxlbWVudHNBcnJheShwcmV2RWwpO1xuICAgIGNvbnN0IGRlc3Ryb3lCdXR0b24gPSAoZWwsIGRpcikgPT4ge1xuICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBkaXIgPT09ICduZXh0JyA/IG9uTmV4dENsaWNrIDogb25QcmV2Q2xpY2spO1xuICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZSguLi5zd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uZGlzYWJsZWRDbGFzcy5zcGxpdCgnICcpKTtcbiAgICB9O1xuICAgIG5leHRFbC5mb3JFYWNoKGVsID0+IGRlc3Ryb3lCdXR0b24oZWwsICduZXh0JykpO1xuICAgIHByZXZFbC5mb3JFYWNoKGVsID0+IGRlc3Ryb3lCdXR0b24oZWwsICdwcmV2JykpO1xuICB9XG4gIG9uKCdpbml0JywgKCkgPT4ge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uZW5hYmxlZCA9PT0gZmFsc2UpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgZGlzYWJsZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbml0KCk7XG4gICAgICB1cGRhdGUoKTtcbiAgICB9XG4gIH0pO1xuICBvbigndG9FZGdlIGZyb21FZGdlIGxvY2sgdW5sb2NrJywgKCkgPT4ge1xuICAgIHVwZGF0ZSgpO1xuICB9KTtcbiAgb24oJ2Rlc3Ryb3knLCAoKSA9PiB7XG4gICAgZGVzdHJveSgpO1xuICB9KTtcbiAgb24oJ2VuYWJsZSBkaXNhYmxlJywgKCkgPT4ge1xuICAgIGxldCB7XG4gICAgICBuZXh0RWwsXG4gICAgICBwcmV2RWxcbiAgICB9ID0gc3dpcGVyLm5hdmlnYXRpb247XG4gICAgbmV4dEVsID0gbWFrZUVsZW1lbnRzQXJyYXkobmV4dEVsKTtcbiAgICBwcmV2RWwgPSBtYWtlRWxlbWVudHNBcnJheShwcmV2RWwpO1xuICAgIGlmIChzd2lwZXIuZW5hYmxlZCkge1xuICAgICAgdXBkYXRlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIFsuLi5uZXh0RWwsIC4uLnByZXZFbF0uZmlsdGVyKGVsID0+ICEhZWwpLmZvckVhY2goZWwgPT4gZWwuY2xhc3NMaXN0LmFkZChzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24ubG9ja0NsYXNzKSk7XG4gIH0pO1xuICBvbignY2xpY2snLCAoX3MsIGUpID0+IHtcbiAgICBsZXQge1xuICAgICAgbmV4dEVsLFxuICAgICAgcHJldkVsXG4gICAgfSA9IHN3aXBlci5uYXZpZ2F0aW9uO1xuICAgIG5leHRFbCA9IG1ha2VFbGVtZW50c0FycmF5KG5leHRFbCk7XG4gICAgcHJldkVsID0gbWFrZUVsZW1lbnRzQXJyYXkocHJldkVsKTtcbiAgICBjb25zdCB0YXJnZXRFbCA9IGUudGFyZ2V0O1xuICAgIGxldCB0YXJnZXRJc0J1dHRvbiA9IHByZXZFbC5pbmNsdWRlcyh0YXJnZXRFbCkgfHwgbmV4dEVsLmluY2x1ZGVzKHRhcmdldEVsKTtcbiAgICBpZiAoc3dpcGVyLmlzRWxlbWVudCAmJiAhdGFyZ2V0SXNCdXR0b24pIHtcbiAgICAgIGNvbnN0IHBhdGggPSBlLnBhdGggfHwgZS5jb21wb3NlZFBhdGggJiYgZS5jb21wb3NlZFBhdGgoKTtcbiAgICAgIGlmIChwYXRoKSB7XG4gICAgICAgIHRhcmdldElzQnV0dG9uID0gcGF0aC5maW5kKHBhdGhFbCA9PiBuZXh0RWwuaW5jbHVkZXMocGF0aEVsKSB8fCBwcmV2RWwuaW5jbHVkZXMocGF0aEVsKSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uaGlkZU9uQ2xpY2sgJiYgIXRhcmdldElzQnV0dG9uKSB7XG4gICAgICBpZiAoc3dpcGVyLnBhZ2luYXRpb24gJiYgc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uICYmIHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5jbGlja2FibGUgJiYgKHN3aXBlci5wYWdpbmF0aW9uLmVsID09PSB0YXJnZXRFbCB8fCBzd2lwZXIucGFnaW5hdGlvbi5lbC5jb250YWlucyh0YXJnZXRFbCkpKSByZXR1cm47XG4gICAgICBsZXQgaXNIaWRkZW47XG4gICAgICBpZiAobmV4dEVsLmxlbmd0aCkge1xuICAgICAgICBpc0hpZGRlbiA9IG5leHRFbFswXS5jbGFzc0xpc3QuY29udGFpbnMoc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLmhpZGRlbkNsYXNzKTtcbiAgICAgIH0gZWxzZSBpZiAocHJldkVsLmxlbmd0aCkge1xuICAgICAgICBpc0hpZGRlbiA9IHByZXZFbFswXS5jbGFzc0xpc3QuY29udGFpbnMoc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLmhpZGRlbkNsYXNzKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0hpZGRlbiA9PT0gdHJ1ZSkge1xuICAgICAgICBlbWl0KCduYXZpZ2F0aW9uU2hvdycpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZW1pdCgnbmF2aWdhdGlvbkhpZGUnKTtcbiAgICAgIH1cbiAgICAgIFsuLi5uZXh0RWwsIC4uLnByZXZFbF0uZmlsdGVyKGVsID0+ICEhZWwpLmZvckVhY2goZWwgPT4gZWwuY2xhc3NMaXN0LnRvZ2dsZShzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uaGlkZGVuQ2xhc3MpKTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBlbmFibGUgPSAoKSA9PiB7XG4gICAgc3dpcGVyLmVsLmNsYXNzTGlzdC5yZW1vdmUoLi4uc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLm5hdmlnYXRpb25EaXNhYmxlZENsYXNzLnNwbGl0KCcgJykpO1xuICAgIGluaXQoKTtcbiAgICB1cGRhdGUoKTtcbiAgfTtcbiAgY29uc3QgZGlzYWJsZSA9ICgpID0+IHtcbiAgICBzd2lwZXIuZWwuY2xhc3NMaXN0LmFkZCguLi5zd2lwZXIucGFyYW1zLm5hdmlnYXRpb24ubmF2aWdhdGlvbkRpc2FibGVkQ2xhc3Muc3BsaXQoJyAnKSk7XG4gICAgZGVzdHJveSgpO1xuICB9O1xuICBPYmplY3QuYXNzaWduKHN3aXBlci5uYXZpZ2F0aW9uLCB7XG4gICAgZW5hYmxlLFxuICAgIGRpc2FibGUsXG4gICAgdXBkYXRlLFxuICAgIGluaXQsXG4gICAgZGVzdHJveVxuICB9KTtcbn1cblxuZXhwb3J0IHsgTmF2aWdhdGlvbiBhcyBkZWZhdWx0IH07XG4iLCJmdW5jdGlvbiBjbGFzc2VzVG9TZWxlY3RvcihjbGFzc2VzKSB7XG4gIGlmIChjbGFzc2VzID09PSB2b2lkIDApIHtcbiAgICBjbGFzc2VzID0gJyc7XG4gIH1cbiAgcmV0dXJuIGAuJHtjbGFzc2VzLnRyaW0oKS5yZXBsYWNlKC8oW1xcLjohK1xcL10pL2csICdcXFxcJDEnKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gIC5yZXBsYWNlKC8gL2csICcuJyl9YDtcbn1cblxuZXhwb3J0IHsgY2xhc3Nlc1RvU2VsZWN0b3IgYXMgYyB9O1xuIiwiaW1wb3J0IHsgYyBhcyBjbGFzc2VzVG9TZWxlY3RvciB9IGZyb20gJy4uL3NoYXJlZC9jbGFzc2VzLXRvLXNlbGVjdG9yLm1qcyc7XG5pbXBvcnQgeyBjIGFzIGNyZWF0ZUVsZW1lbnRJZk5vdERlZmluZWQgfSBmcm9tICcuLi9zaGFyZWQvY3JlYXRlLWVsZW1lbnQtaWYtbm90LWRlZmluZWQubWpzJztcbmltcG9ydCB7IG0gYXMgbWFrZUVsZW1lbnRzQXJyYXksIGYgYXMgZWxlbWVudE91dGVyU2l6ZSwgaCBhcyBlbGVtZW50SW5kZXgsIGEgYXMgZWxlbWVudFBhcmVudHMgfSBmcm9tICcuLi9zaGFyZWQvdXRpbHMubWpzJztcblxuZnVuY3Rpb24gUGFnaW5hdGlvbihfcmVmKSB7XG4gIGxldCB7XG4gICAgc3dpcGVyLFxuICAgIGV4dGVuZFBhcmFtcyxcbiAgICBvbixcbiAgICBlbWl0XG4gIH0gPSBfcmVmO1xuICBjb25zdCBwZnggPSAnc3dpcGVyLXBhZ2luYXRpb24nO1xuICBleHRlbmRQYXJhbXMoe1xuICAgIHBhZ2luYXRpb246IHtcbiAgICAgIGVsOiBudWxsLFxuICAgICAgYnVsbGV0RWxlbWVudDogJ3NwYW4nLFxuICAgICAgY2xpY2thYmxlOiBmYWxzZSxcbiAgICAgIGhpZGVPbkNsaWNrOiBmYWxzZSxcbiAgICAgIHJlbmRlckJ1bGxldDogbnVsbCxcbiAgICAgIHJlbmRlclByb2dyZXNzYmFyOiBudWxsLFxuICAgICAgcmVuZGVyRnJhY3Rpb246IG51bGwsXG4gICAgICByZW5kZXJDdXN0b206IG51bGwsXG4gICAgICBwcm9ncmVzc2Jhck9wcG9zaXRlOiBmYWxzZSxcbiAgICAgIHR5cGU6ICdidWxsZXRzJyxcbiAgICAgIC8vICdidWxsZXRzJyBvciAncHJvZ3Jlc3NiYXInIG9yICdmcmFjdGlvbicgb3IgJ2N1c3RvbSdcbiAgICAgIGR5bmFtaWNCdWxsZXRzOiBmYWxzZSxcbiAgICAgIGR5bmFtaWNNYWluQnVsbGV0czogMSxcbiAgICAgIGZvcm1hdEZyYWN0aW9uQ3VycmVudDogbnVtYmVyID0+IG51bWJlcixcbiAgICAgIGZvcm1hdEZyYWN0aW9uVG90YWw6IG51bWJlciA9PiBudW1iZXIsXG4gICAgICBidWxsZXRDbGFzczogYCR7cGZ4fS1idWxsZXRgLFxuICAgICAgYnVsbGV0QWN0aXZlQ2xhc3M6IGAke3BmeH0tYnVsbGV0LWFjdGl2ZWAsXG4gICAgICBtb2RpZmllckNsYXNzOiBgJHtwZnh9LWAsXG4gICAgICBjdXJyZW50Q2xhc3M6IGAke3BmeH0tY3VycmVudGAsXG4gICAgICB0b3RhbENsYXNzOiBgJHtwZnh9LXRvdGFsYCxcbiAgICAgIGhpZGRlbkNsYXNzOiBgJHtwZnh9LWhpZGRlbmAsXG4gICAgICBwcm9ncmVzc2JhckZpbGxDbGFzczogYCR7cGZ4fS1wcm9ncmVzc2Jhci1maWxsYCxcbiAgICAgIHByb2dyZXNzYmFyT3Bwb3NpdGVDbGFzczogYCR7cGZ4fS1wcm9ncmVzc2Jhci1vcHBvc2l0ZWAsXG4gICAgICBjbGlja2FibGVDbGFzczogYCR7cGZ4fS1jbGlja2FibGVgLFxuICAgICAgbG9ja0NsYXNzOiBgJHtwZnh9LWxvY2tgLFxuICAgICAgaG9yaXpvbnRhbENsYXNzOiBgJHtwZnh9LWhvcml6b250YWxgLFxuICAgICAgdmVydGljYWxDbGFzczogYCR7cGZ4fS12ZXJ0aWNhbGAsXG4gICAgICBwYWdpbmF0aW9uRGlzYWJsZWRDbGFzczogYCR7cGZ4fS1kaXNhYmxlZGBcbiAgICB9XG4gIH0pO1xuICBzd2lwZXIucGFnaW5hdGlvbiA9IHtcbiAgICBlbDogbnVsbCxcbiAgICBidWxsZXRzOiBbXVxuICB9O1xuICBsZXQgYnVsbGV0U2l6ZTtcbiAgbGV0IGR5bmFtaWNCdWxsZXRJbmRleCA9IDA7XG4gIGZ1bmN0aW9uIGlzUGFnaW5hdGlvbkRpc2FibGVkKCkge1xuICAgIHJldHVybiAhc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmVsIHx8ICFzd2lwZXIucGFnaW5hdGlvbi5lbCB8fCBBcnJheS5pc0FycmF5KHN3aXBlci5wYWdpbmF0aW9uLmVsKSAmJiBzd2lwZXIucGFnaW5hdGlvbi5lbC5sZW5ndGggPT09IDA7XG4gIH1cbiAgZnVuY3Rpb24gc2V0U2lkZUJ1bGxldHMoYnVsbGV0RWwsIHBvc2l0aW9uKSB7XG4gICAgY29uc3Qge1xuICAgICAgYnVsbGV0QWN0aXZlQ2xhc3NcbiAgICB9ID0gc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uO1xuICAgIGlmICghYnVsbGV0RWwpIHJldHVybjtcbiAgICBidWxsZXRFbCA9IGJ1bGxldEVsW2Ake3Bvc2l0aW9uID09PSAncHJldicgPyAncHJldmlvdXMnIDogJ25leHQnfUVsZW1lbnRTaWJsaW5nYF07XG4gICAgaWYgKGJ1bGxldEVsKSB7XG4gICAgICBidWxsZXRFbC5jbGFzc0xpc3QuYWRkKGAke2J1bGxldEFjdGl2ZUNsYXNzfS0ke3Bvc2l0aW9ufWApO1xuICAgICAgYnVsbGV0RWwgPSBidWxsZXRFbFtgJHtwb3NpdGlvbiA9PT0gJ3ByZXYnID8gJ3ByZXZpb3VzJyA6ICduZXh0J31FbGVtZW50U2libGluZ2BdO1xuICAgICAgaWYgKGJ1bGxldEVsKSB7XG4gICAgICAgIGJ1bGxldEVsLmNsYXNzTGlzdC5hZGQoYCR7YnVsbGV0QWN0aXZlQ2xhc3N9LSR7cG9zaXRpb259LSR7cG9zaXRpb259YCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIG9uQnVsbGV0Q2xpY2soZSkge1xuICAgIGNvbnN0IGJ1bGxldEVsID0gZS50YXJnZXQuY2xvc2VzdChjbGFzc2VzVG9TZWxlY3Rvcihzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uYnVsbGV0Q2xhc3MpKTtcbiAgICBpZiAoIWJ1bGxldEVsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBjb25zdCBpbmRleCA9IGVsZW1lbnRJbmRleChidWxsZXRFbCkgKiBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgIGlmIChzd2lwZXIucmVhbEluZGV4ID09PSBpbmRleCkgcmV0dXJuO1xuICAgICAgc3dpcGVyLnNsaWRlVG9Mb29wKGluZGV4KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oaW5kZXgpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgLy8gUmVuZGVyIHx8IFVwZGF0ZSBQYWdpbmF0aW9uIGJ1bGxldHMvaXRlbXNcbiAgICBjb25zdCBydGwgPSBzd2lwZXIucnRsO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbjtcbiAgICBpZiAoaXNQYWdpbmF0aW9uRGlzYWJsZWQoKSkgcmV0dXJuO1xuICAgIGxldCBlbCA9IHN3aXBlci5wYWdpbmF0aW9uLmVsO1xuICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgIC8vIEN1cnJlbnQvVG90YWxcbiAgICBsZXQgY3VycmVudDtcbiAgICBsZXQgcHJldmlvdXNJbmRleDtcbiAgICBjb25zdCBzbGlkZXNMZW5ndGggPSBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCA/IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggOiBzd2lwZXIuc2xpZGVzLmxlbmd0aDtcbiAgICBjb25zdCB0b3RhbCA9IHN3aXBlci5wYXJhbXMubG9vcCA/IE1hdGguY2VpbChzbGlkZXNMZW5ndGggLyBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwKSA6IHN3aXBlci5zbmFwR3JpZC5sZW5ndGg7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgcHJldmlvdXNJbmRleCA9IHN3aXBlci5wcmV2aW91c1JlYWxJbmRleCB8fCAwO1xuICAgICAgY3VycmVudCA9IHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXAgPiAxID8gTWF0aC5mbG9vcihzd2lwZXIucmVhbEluZGV4IC8gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCkgOiBzd2lwZXIucmVhbEluZGV4O1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHN3aXBlci5zbmFwSW5kZXggIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjdXJyZW50ID0gc3dpcGVyLnNuYXBJbmRleDtcbiAgICAgIHByZXZpb3VzSW5kZXggPSBzd2lwZXIucHJldmlvdXNTbmFwSW5kZXg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByZXZpb3VzSW5kZXggPSBzd2lwZXIucHJldmlvdXNJbmRleCB8fCAwO1xuICAgICAgY3VycmVudCA9IHN3aXBlci5hY3RpdmVJbmRleCB8fCAwO1xuICAgIH1cbiAgICAvLyBUeXBlc1xuICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2J1bGxldHMnICYmIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMgJiYgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cy5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCBidWxsZXRzID0gc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cztcbiAgICAgIGxldCBmaXJzdEluZGV4O1xuICAgICAgbGV0IGxhc3RJbmRleDtcbiAgICAgIGxldCBtaWRJbmRleDtcbiAgICAgIGlmIChwYXJhbXMuZHluYW1pY0J1bGxldHMpIHtcbiAgICAgICAgYnVsbGV0U2l6ZSA9IGVsZW1lbnRPdXRlclNpemUoYnVsbGV0c1swXSwgc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ3dpZHRoJyA6ICdoZWlnaHQnLCB0cnVlKTtcbiAgICAgICAgZWwuZm9yRWFjaChzdWJFbCA9PiB7XG4gICAgICAgICAgc3ViRWwuc3R5bGVbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ3dpZHRoJyA6ICdoZWlnaHQnXSA9IGAke2J1bGxldFNpemUgKiAocGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyArIDQpfXB4YDtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzID4gMSAmJiBwcmV2aW91c0luZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBkeW5hbWljQnVsbGV0SW5kZXggKz0gY3VycmVudCAtIChwcmV2aW91c0luZGV4IHx8IDApO1xuICAgICAgICAgIGlmIChkeW5hbWljQnVsbGV0SW5kZXggPiBwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzIC0gMSkge1xuICAgICAgICAgICAgZHluYW1pY0J1bGxldEluZGV4ID0gcGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyAtIDE7XG4gICAgICAgICAgfSBlbHNlIGlmIChkeW5hbWljQnVsbGV0SW5kZXggPCAwKSB7XG4gICAgICAgICAgICBkeW5hbWljQnVsbGV0SW5kZXggPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmaXJzdEluZGV4ID0gTWF0aC5tYXgoY3VycmVudCAtIGR5bmFtaWNCdWxsZXRJbmRleCwgMCk7XG4gICAgICAgIGxhc3RJbmRleCA9IGZpcnN0SW5kZXggKyAoTWF0aC5taW4oYnVsbGV0cy5sZW5ndGgsIHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMpIC0gMSk7XG4gICAgICAgIG1pZEluZGV4ID0gKGxhc3RJbmRleCArIGZpcnN0SW5kZXgpIC8gMjtcbiAgICAgIH1cbiAgICAgIGJ1bGxldHMuZm9yRWFjaChidWxsZXRFbCA9PiB7XG4gICAgICAgIGNvbnN0IGNsYXNzZXNUb1JlbW92ZSA9IFsuLi5bJycsICctbmV4dCcsICctbmV4dC1uZXh0JywgJy1wcmV2JywgJy1wcmV2LXByZXYnLCAnLW1haW4nXS5tYXAoc3VmZml4ID0+IGAke3BhcmFtcy5idWxsZXRBY3RpdmVDbGFzc30ke3N1ZmZpeH1gKV0ubWFwKHMgPT4gdHlwZW9mIHMgPT09ICdzdHJpbmcnICYmIHMuaW5jbHVkZXMoJyAnKSA/IHMuc3BsaXQoJyAnKSA6IHMpLmZsYXQoKTtcbiAgICAgICAgYnVsbGV0RWwuY2xhc3NMaXN0LnJlbW92ZSguLi5jbGFzc2VzVG9SZW1vdmUpO1xuICAgICAgfSk7XG4gICAgICBpZiAoZWwubGVuZ3RoID4gMSkge1xuICAgICAgICBidWxsZXRzLmZvckVhY2goYnVsbGV0ID0+IHtcbiAgICAgICAgICBjb25zdCBidWxsZXRJbmRleCA9IGVsZW1lbnRJbmRleChidWxsZXQpO1xuICAgICAgICAgIGlmIChidWxsZXRJbmRleCA9PT0gY3VycmVudCkge1xuICAgICAgICAgICAgYnVsbGV0LmNsYXNzTGlzdC5hZGQoLi4ucGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzLnNwbGl0KCcgJykpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoc3dpcGVyLmlzRWxlbWVudCkge1xuICAgICAgICAgICAgYnVsbGV0LnNldEF0dHJpYnV0ZSgncGFydCcsICdidWxsZXQnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHBhcmFtcy5keW5hbWljQnVsbGV0cykge1xuICAgICAgICAgICAgaWYgKGJ1bGxldEluZGV4ID49IGZpcnN0SW5kZXggJiYgYnVsbGV0SW5kZXggPD0gbGFzdEluZGV4KSB7XG4gICAgICAgICAgICAgIGJ1bGxldC5jbGFzc0xpc3QuYWRkKC4uLmAke3BhcmFtcy5idWxsZXRBY3RpdmVDbGFzc30tbWFpbmAuc3BsaXQoJyAnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYnVsbGV0SW5kZXggPT09IGZpcnN0SW5kZXgpIHtcbiAgICAgICAgICAgICAgc2V0U2lkZUJ1bGxldHMoYnVsbGV0LCAncHJldicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGJ1bGxldEluZGV4ID09PSBsYXN0SW5kZXgpIHtcbiAgICAgICAgICAgICAgc2V0U2lkZUJ1bGxldHMoYnVsbGV0LCAnbmV4dCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBidWxsZXQgPSBidWxsZXRzW2N1cnJlbnRdO1xuICAgICAgICBpZiAoYnVsbGV0KSB7XG4gICAgICAgICAgYnVsbGV0LmNsYXNzTGlzdC5hZGQoLi4ucGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzLnNwbGl0KCcgJykpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzd2lwZXIuaXNFbGVtZW50KSB7XG4gICAgICAgICAgYnVsbGV0cy5mb3JFYWNoKChidWxsZXRFbCwgYnVsbGV0SW5kZXgpID0+IHtcbiAgICAgICAgICAgIGJ1bGxldEVsLnNldEF0dHJpYnV0ZSgncGFydCcsIGJ1bGxldEluZGV4ID09PSBjdXJyZW50ID8gJ2J1bGxldC1hY3RpdmUnIDogJ2J1bGxldCcpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJhbXMuZHluYW1pY0J1bGxldHMpIHtcbiAgICAgICAgICBjb25zdCBmaXJzdERpc3BsYXllZEJ1bGxldCA9IGJ1bGxldHNbZmlyc3RJbmRleF07XG4gICAgICAgICAgY29uc3QgbGFzdERpc3BsYXllZEJ1bGxldCA9IGJ1bGxldHNbbGFzdEluZGV4XTtcbiAgICAgICAgICBmb3IgKGxldCBpID0gZmlyc3RJbmRleDsgaSA8PSBsYXN0SW5kZXg7IGkgKz0gMSkge1xuICAgICAgICAgICAgaWYgKGJ1bGxldHNbaV0pIHtcbiAgICAgICAgICAgICAgYnVsbGV0c1tpXS5jbGFzc0xpc3QuYWRkKC4uLmAke3BhcmFtcy5idWxsZXRBY3RpdmVDbGFzc30tbWFpbmAuc3BsaXQoJyAnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHNldFNpZGVCdWxsZXRzKGZpcnN0RGlzcGxheWVkQnVsbGV0LCAncHJldicpO1xuICAgICAgICAgIHNldFNpZGVCdWxsZXRzKGxhc3REaXNwbGF5ZWRCdWxsZXQsICduZXh0Jyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChwYXJhbXMuZHluYW1pY0J1bGxldHMpIHtcbiAgICAgICAgY29uc3QgZHluYW1pY0J1bGxldHNMZW5ndGggPSBNYXRoLm1pbihidWxsZXRzLmxlbmd0aCwgcGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyArIDQpO1xuICAgICAgICBjb25zdCBidWxsZXRzT2Zmc2V0ID0gKGJ1bGxldFNpemUgKiBkeW5hbWljQnVsbGV0c0xlbmd0aCAtIGJ1bGxldFNpemUpIC8gMiAtIG1pZEluZGV4ICogYnVsbGV0U2l6ZTtcbiAgICAgICAgY29uc3Qgb2Zmc2V0UHJvcCA9IHJ0bCA/ICdyaWdodCcgOiAnbGVmdCc7XG4gICAgICAgIGJ1bGxldHMuZm9yRWFjaChidWxsZXQgPT4ge1xuICAgICAgICAgIGJ1bGxldC5zdHlsZVtzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBvZmZzZXRQcm9wIDogJ3RvcCddID0gYCR7YnVsbGV0c09mZnNldH1weGA7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICBlbC5mb3JFYWNoKChzdWJFbCwgc3ViRWxJbmRleCkgPT4ge1xuICAgICAgaWYgKHBhcmFtcy50eXBlID09PSAnZnJhY3Rpb24nKSB7XG4gICAgICAgIHN1YkVsLnF1ZXJ5U2VsZWN0b3JBbGwoY2xhc3Nlc1RvU2VsZWN0b3IocGFyYW1zLmN1cnJlbnRDbGFzcykpLmZvckVhY2goZnJhY3Rpb25FbCA9PiB7XG4gICAgICAgICAgZnJhY3Rpb25FbC50ZXh0Q29udGVudCA9IHBhcmFtcy5mb3JtYXRGcmFjdGlvbkN1cnJlbnQoY3VycmVudCArIDEpO1xuICAgICAgICB9KTtcbiAgICAgICAgc3ViRWwucXVlcnlTZWxlY3RvckFsbChjbGFzc2VzVG9TZWxlY3RvcihwYXJhbXMudG90YWxDbGFzcykpLmZvckVhY2godG90YWxFbCA9PiB7XG4gICAgICAgICAgdG90YWxFbC50ZXh0Q29udGVudCA9IHBhcmFtcy5mb3JtYXRGcmFjdGlvblRvdGFsKHRvdGFsKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdwcm9ncmVzc2JhcicpIHtcbiAgICAgICAgbGV0IHByb2dyZXNzYmFyRGlyZWN0aW9uO1xuICAgICAgICBpZiAocGFyYW1zLnByb2dyZXNzYmFyT3Bwb3NpdGUpIHtcbiAgICAgICAgICBwcm9ncmVzc2JhckRpcmVjdGlvbiA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJvZ3Jlc3NiYXJEaXJlY3Rpb24gPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnaG9yaXpvbnRhbCcgOiAndmVydGljYWwnO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNjYWxlID0gKGN1cnJlbnQgKyAxKSAvIHRvdGFsO1xuICAgICAgICBsZXQgc2NhbGVYID0gMTtcbiAgICAgICAgbGV0IHNjYWxlWSA9IDE7XG4gICAgICAgIGlmIChwcm9ncmVzc2JhckRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnKSB7XG4gICAgICAgICAgc2NhbGVYID0gc2NhbGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2NhbGVZID0gc2NhbGU7XG4gICAgICAgIH1cbiAgICAgICAgc3ViRWwucXVlcnlTZWxlY3RvckFsbChjbGFzc2VzVG9TZWxlY3RvcihwYXJhbXMucHJvZ3Jlc3NiYXJGaWxsQ2xhc3MpKS5mb3JFYWNoKHByb2dyZXNzRWwgPT4ge1xuICAgICAgICAgIHByb2dyZXNzRWwuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNkKDAsMCwwKSBzY2FsZVgoJHtzY2FsZVh9KSBzY2FsZVkoJHtzY2FsZVl9KWA7XG4gICAgICAgICAgcHJvZ3Jlc3NFbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBgJHtzd2lwZXIucGFyYW1zLnNwZWVkfW1zYDtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdjdXN0b20nICYmIHBhcmFtcy5yZW5kZXJDdXN0b20pIHtcbiAgICAgICAgc3ViRWwuaW5uZXJIVE1MID0gcGFyYW1zLnJlbmRlckN1c3RvbShzd2lwZXIsIGN1cnJlbnQgKyAxLCB0b3RhbCk7XG4gICAgICAgIGlmIChzdWJFbEluZGV4ID09PSAwKSBlbWl0KCdwYWdpbmF0aW9uUmVuZGVyJywgc3ViRWwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHN1YkVsSW5kZXggPT09IDApIGVtaXQoJ3BhZ2luYXRpb25SZW5kZXInLCBzdWJFbCk7XG4gICAgICAgIGVtaXQoJ3BhZ2luYXRpb25VcGRhdGUnLCBzdWJFbCk7XG4gICAgICB9XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHN3aXBlci5lbmFibGVkKSB7XG4gICAgICAgIHN1YkVsLmNsYXNzTGlzdFtzd2lwZXIuaXNMb2NrZWQgPyAnYWRkJyA6ICdyZW1vdmUnXShwYXJhbXMubG9ja0NsYXNzKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgLy8gUmVuZGVyIENvbnRhaW5lclxuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbjtcbiAgICBpZiAoaXNQYWdpbmF0aW9uRGlzYWJsZWQoKSkgcmV0dXJuO1xuICAgIGNvbnN0IHNsaWRlc0xlbmd0aCA9IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCA6IHN3aXBlci5ncmlkICYmIHN3aXBlci5wYXJhbXMuZ3JpZC5yb3dzID4gMSA/IHN3aXBlci5zbGlkZXMubGVuZ3RoIC8gTWF0aC5jZWlsKHN3aXBlci5wYXJhbXMuZ3JpZC5yb3dzKSA6IHN3aXBlci5zbGlkZXMubGVuZ3RoO1xuICAgIGxldCBlbCA9IHN3aXBlci5wYWdpbmF0aW9uLmVsO1xuICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgIGxldCBwYWdpbmF0aW9uSFRNTCA9ICcnO1xuICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2J1bGxldHMnKSB7XG4gICAgICBsZXQgbnVtYmVyT2ZCdWxsZXRzID0gc3dpcGVyLnBhcmFtcy5sb29wID8gTWF0aC5jZWlsKHNsaWRlc0xlbmd0aCAvIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXApIDogc3dpcGVyLnNuYXBHcmlkLmxlbmd0aDtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmZyZWVNb2RlICYmIHN3aXBlci5wYXJhbXMuZnJlZU1vZGUuZW5hYmxlZCAmJiBudW1iZXJPZkJ1bGxldHMgPiBzbGlkZXNMZW5ndGgpIHtcbiAgICAgICAgbnVtYmVyT2ZCdWxsZXRzID0gc2xpZGVzTGVuZ3RoO1xuICAgICAgfVxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1iZXJPZkJ1bGxldHM7IGkgKz0gMSkge1xuICAgICAgICBpZiAocGFyYW1zLnJlbmRlckJ1bGxldCkge1xuICAgICAgICAgIHBhZ2luYXRpb25IVE1MICs9IHBhcmFtcy5yZW5kZXJCdWxsZXQuY2FsbChzd2lwZXIsIGksIHBhcmFtcy5idWxsZXRDbGFzcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gcHJldHRpZXItaWdub3JlXG4gICAgICAgICAgcGFnaW5hdGlvbkhUTUwgKz0gYDwke3BhcmFtcy5idWxsZXRFbGVtZW50fSAke3N3aXBlci5pc0VsZW1lbnQgPyAncGFydD1cImJ1bGxldFwiJyA6ICcnfSBjbGFzcz1cIiR7cGFyYW1zLmJ1bGxldENsYXNzfVwiPjwvJHtwYXJhbXMuYnVsbGV0RWxlbWVudH0+YDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdmcmFjdGlvbicpIHtcbiAgICAgIGlmIChwYXJhbXMucmVuZGVyRnJhY3Rpb24pIHtcbiAgICAgICAgcGFnaW5hdGlvbkhUTUwgPSBwYXJhbXMucmVuZGVyRnJhY3Rpb24uY2FsbChzd2lwZXIsIHBhcmFtcy5jdXJyZW50Q2xhc3MsIHBhcmFtcy50b3RhbENsYXNzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhZ2luYXRpb25IVE1MID0gYDxzcGFuIGNsYXNzPVwiJHtwYXJhbXMuY3VycmVudENsYXNzfVwiPjwvc3Bhbj5gICsgJyAvICcgKyBgPHNwYW4gY2xhc3M9XCIke3BhcmFtcy50b3RhbENsYXNzfVwiPjwvc3Bhbj5gO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdwcm9ncmVzc2JhcicpIHtcbiAgICAgIGlmIChwYXJhbXMucmVuZGVyUHJvZ3Jlc3NiYXIpIHtcbiAgICAgICAgcGFnaW5hdGlvbkhUTUwgPSBwYXJhbXMucmVuZGVyUHJvZ3Jlc3NiYXIuY2FsbChzd2lwZXIsIHBhcmFtcy5wcm9ncmVzc2JhckZpbGxDbGFzcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYWdpbmF0aW9uSFRNTCA9IGA8c3BhbiBjbGFzcz1cIiR7cGFyYW1zLnByb2dyZXNzYmFyRmlsbENsYXNzfVwiPjwvc3Bhbj5gO1xuICAgICAgfVxuICAgIH1cbiAgICBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzID0gW107XG4gICAgZWwuZm9yRWFjaChzdWJFbCA9PiB7XG4gICAgICBpZiAocGFyYW1zLnR5cGUgIT09ICdjdXN0b20nKSB7XG4gICAgICAgIHN1YkVsLmlubmVySFRNTCA9IHBhZ2luYXRpb25IVE1MIHx8ICcnO1xuICAgICAgfVxuICAgICAgaWYgKHBhcmFtcy50eXBlID09PSAnYnVsbGV0cycpIHtcbiAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cy5wdXNoKC4uLnN1YkVsLnF1ZXJ5U2VsZWN0b3JBbGwoY2xhc3Nlc1RvU2VsZWN0b3IocGFyYW1zLmJ1bGxldENsYXNzKSkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChwYXJhbXMudHlwZSAhPT0gJ2N1c3RvbScpIHtcbiAgICAgIGVtaXQoJ3BhZ2luYXRpb25SZW5kZXInLCBlbFswXSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uID0gY3JlYXRlRWxlbWVudElmTm90RGVmaW5lZChzd2lwZXIsIHN3aXBlci5vcmlnaW5hbFBhcmFtcy5wYWdpbmF0aW9uLCBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24sIHtcbiAgICAgIGVsOiAnc3dpcGVyLXBhZ2luYXRpb24nXG4gICAgfSk7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uO1xuICAgIGlmICghcGFyYW1zLmVsKSByZXR1cm47XG4gICAgbGV0IGVsO1xuICAgIGlmICh0eXBlb2YgcGFyYW1zLmVsID09PSAnc3RyaW5nJyAmJiBzd2lwZXIuaXNFbGVtZW50KSB7XG4gICAgICBlbCA9IHN3aXBlci5lbC5xdWVyeVNlbGVjdG9yKHBhcmFtcy5lbCk7XG4gICAgfVxuICAgIGlmICghZWwgJiYgdHlwZW9mIHBhcmFtcy5lbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVsID0gWy4uLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwocGFyYW1zLmVsKV07XG4gICAgfVxuICAgIGlmICghZWwpIHtcbiAgICAgIGVsID0gcGFyYW1zLmVsO1xuICAgIH1cbiAgICBpZiAoIWVsIHx8IGVsLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLnVuaXF1ZU5hdkVsZW1lbnRzICYmIHR5cGVvZiBwYXJhbXMuZWwgPT09ICdzdHJpbmcnICYmIEFycmF5LmlzQXJyYXkoZWwpICYmIGVsLmxlbmd0aCA+IDEpIHtcbiAgICAgIGVsID0gWy4uLnN3aXBlci5lbC5xdWVyeVNlbGVjdG9yQWxsKHBhcmFtcy5lbCldO1xuICAgICAgLy8gY2hlY2sgaWYgaXQgYmVsb25ncyB0byBhbm90aGVyIG5lc3RlZCBTd2lwZXJcbiAgICAgIGlmIChlbC5sZW5ndGggPiAxKSB7XG4gICAgICAgIGVsID0gZWwuZmlsdGVyKHN1YkVsID0+IHtcbiAgICAgICAgICBpZiAoZWxlbWVudFBhcmVudHMoc3ViRWwsICcuc3dpcGVyJylbMF0gIT09IHN3aXBlci5lbCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9KVswXTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZWwpICYmIGVsLmxlbmd0aCA9PT0gMSkgZWwgPSBlbFswXTtcbiAgICBPYmplY3QuYXNzaWduKHN3aXBlci5wYWdpbmF0aW9uLCB7XG4gICAgICBlbFxuICAgIH0pO1xuICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgIGVsLmZvckVhY2goc3ViRWwgPT4ge1xuICAgICAgaWYgKHBhcmFtcy50eXBlID09PSAnYnVsbGV0cycgJiYgcGFyYW1zLmNsaWNrYWJsZSkge1xuICAgICAgICBzdWJFbC5jbGFzc0xpc3QuYWRkKC4uLihwYXJhbXMuY2xpY2thYmxlQ2xhc3MgfHwgJycpLnNwbGl0KCcgJykpO1xuICAgICAgfVxuICAgICAgc3ViRWwuY2xhc3NMaXN0LmFkZChwYXJhbXMubW9kaWZpZXJDbGFzcyArIHBhcmFtcy50eXBlKTtcbiAgICAgIHN1YkVsLmNsYXNzTGlzdC5hZGQoc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gcGFyYW1zLmhvcml6b250YWxDbGFzcyA6IHBhcmFtcy52ZXJ0aWNhbENsYXNzKTtcbiAgICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2J1bGxldHMnICYmIHBhcmFtcy5keW5hbWljQnVsbGV0cykge1xuICAgICAgICBzdWJFbC5jbGFzc0xpc3QuYWRkKGAke3BhcmFtcy5tb2RpZmllckNsYXNzfSR7cGFyYW1zLnR5cGV9LWR5bmFtaWNgKTtcbiAgICAgICAgZHluYW1pY0J1bGxldEluZGV4ID0gMDtcbiAgICAgICAgaWYgKHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMgPCAxKSB7XG4gICAgICAgICAgcGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyA9IDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ3Byb2dyZXNzYmFyJyAmJiBwYXJhbXMucHJvZ3Jlc3NiYXJPcHBvc2l0ZSkge1xuICAgICAgICBzdWJFbC5jbGFzc0xpc3QuYWRkKHBhcmFtcy5wcm9ncmVzc2Jhck9wcG9zaXRlQ2xhc3MpO1xuICAgICAgfVxuICAgICAgaWYgKHBhcmFtcy5jbGlja2FibGUpIHtcbiAgICAgICAgc3ViRWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbkJ1bGxldENsaWNrKTtcbiAgICAgIH1cbiAgICAgIGlmICghc3dpcGVyLmVuYWJsZWQpIHtcbiAgICAgICAgc3ViRWwuY2xhc3NMaXN0LmFkZChwYXJhbXMubG9ja0NsYXNzKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbjtcbiAgICBpZiAoaXNQYWdpbmF0aW9uRGlzYWJsZWQoKSkgcmV0dXJuO1xuICAgIGxldCBlbCA9IHN3aXBlci5wYWdpbmF0aW9uLmVsO1xuICAgIGlmIChlbCkge1xuICAgICAgZWwgPSBtYWtlRWxlbWVudHNBcnJheShlbCk7XG4gICAgICBlbC5mb3JFYWNoKHN1YkVsID0+IHtcbiAgICAgICAgc3ViRWwuY2xhc3NMaXN0LnJlbW92ZShwYXJhbXMuaGlkZGVuQ2xhc3MpO1xuICAgICAgICBzdWJFbC5jbGFzc0xpc3QucmVtb3ZlKHBhcmFtcy5tb2RpZmllckNsYXNzICsgcGFyYW1zLnR5cGUpO1xuICAgICAgICBzdWJFbC5jbGFzc0xpc3QucmVtb3ZlKHN3aXBlci5pc0hvcml6b250YWwoKSA/IHBhcmFtcy5ob3Jpem9udGFsQ2xhc3MgOiBwYXJhbXMudmVydGljYWxDbGFzcyk7XG4gICAgICAgIGlmIChwYXJhbXMuY2xpY2thYmxlKSB7XG4gICAgICAgICAgc3ViRWwuY2xhc3NMaXN0LnJlbW92ZSguLi4ocGFyYW1zLmNsaWNrYWJsZUNsYXNzIHx8ICcnKS5zcGxpdCgnICcpKTtcbiAgICAgICAgICBzdWJFbC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIG9uQnVsbGV0Q2xpY2spO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMpIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMuZm9yRWFjaChzdWJFbCA9PiBzdWJFbC5jbGFzc0xpc3QucmVtb3ZlKC4uLnBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcy5zcGxpdCgnICcpKSk7XG4gIH1cbiAgb24oJ2NoYW5nZURpcmVjdGlvbicsICgpID0+IHtcbiAgICBpZiAoIXN3aXBlci5wYWdpbmF0aW9uIHx8ICFzd2lwZXIucGFnaW5hdGlvbi5lbCkgcmV0dXJuO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbjtcbiAgICBsZXQge1xuICAgICAgZWxcbiAgICB9ID0gc3dpcGVyLnBhZ2luYXRpb247XG4gICAgZWwgPSBtYWtlRWxlbWVudHNBcnJheShlbCk7XG4gICAgZWwuZm9yRWFjaChzdWJFbCA9PiB7XG4gICAgICBzdWJFbC5jbGFzc0xpc3QucmVtb3ZlKHBhcmFtcy5ob3Jpem9udGFsQ2xhc3MsIHBhcmFtcy52ZXJ0aWNhbENsYXNzKTtcbiAgICAgIHN1YkVsLmNsYXNzTGlzdC5hZGQoc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gcGFyYW1zLmhvcml6b250YWxDbGFzcyA6IHBhcmFtcy52ZXJ0aWNhbENsYXNzKTtcbiAgICB9KTtcbiAgfSk7XG4gIG9uKCdpbml0JywgKCkgPT4ge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uZW5hYmxlZCA9PT0gZmFsc2UpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgZGlzYWJsZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbml0KCk7XG4gICAgICByZW5kZXIoKTtcbiAgICAgIHVwZGF0ZSgpO1xuICAgIH1cbiAgfSk7XG4gIG9uKCdhY3RpdmVJbmRleENoYW5nZScsICgpID0+IHtcbiAgICBpZiAodHlwZW9mIHN3aXBlci5zbmFwSW5kZXggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB1cGRhdGUoKTtcbiAgICB9XG4gIH0pO1xuICBvbignc25hcEluZGV4Q2hhbmdlJywgKCkgPT4ge1xuICAgIHVwZGF0ZSgpO1xuICB9KTtcbiAgb24oJ3NuYXBHcmlkTGVuZ3RoQ2hhbmdlJywgKCkgPT4ge1xuICAgIHJlbmRlcigpO1xuICAgIHVwZGF0ZSgpO1xuICB9KTtcbiAgb24oJ2Rlc3Ryb3knLCAoKSA9PiB7XG4gICAgZGVzdHJveSgpO1xuICB9KTtcbiAgb24oJ2VuYWJsZSBkaXNhYmxlJywgKCkgPT4ge1xuICAgIGxldCB7XG4gICAgICBlbFxuICAgIH0gPSBzd2lwZXIucGFnaW5hdGlvbjtcbiAgICBpZiAoZWwpIHtcbiAgICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgICAgZWwuZm9yRWFjaChzdWJFbCA9PiBzdWJFbC5jbGFzc0xpc3Rbc3dpcGVyLmVuYWJsZWQgPyAncmVtb3ZlJyA6ICdhZGQnXShzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24ubG9ja0NsYXNzKSk7XG4gICAgfVxuICB9KTtcbiAgb24oJ2xvY2sgdW5sb2NrJywgKCkgPT4ge1xuICAgIHVwZGF0ZSgpO1xuICB9KTtcbiAgb24oJ2NsaWNrJywgKF9zLCBlKSA9PiB7XG4gICAgY29uc3QgdGFyZ2V0RWwgPSBlLnRhcmdldDtcbiAgICBjb25zdCBlbCA9IG1ha2VFbGVtZW50c0FycmF5KHN3aXBlci5wYWdpbmF0aW9uLmVsKTtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmVsICYmIHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5oaWRlT25DbGljayAmJiBlbCAmJiBlbC5sZW5ndGggPiAwICYmICF0YXJnZXRFbC5jbGFzc0xpc3QuY29udGFpbnMoc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmJ1bGxldENsYXNzKSkge1xuICAgICAgaWYgKHN3aXBlci5uYXZpZ2F0aW9uICYmIChzd2lwZXIubmF2aWdhdGlvbi5uZXh0RWwgJiYgdGFyZ2V0RWwgPT09IHN3aXBlci5uYXZpZ2F0aW9uLm5leHRFbCB8fCBzd2lwZXIubmF2aWdhdGlvbi5wcmV2RWwgJiYgdGFyZ2V0RWwgPT09IHN3aXBlci5uYXZpZ2F0aW9uLnByZXZFbCkpIHJldHVybjtcbiAgICAgIGNvbnN0IGlzSGlkZGVuID0gZWxbMF0uY2xhc3NMaXN0LmNvbnRhaW5zKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5oaWRkZW5DbGFzcyk7XG4gICAgICBpZiAoaXNIaWRkZW4gPT09IHRydWUpIHtcbiAgICAgICAgZW1pdCgncGFnaW5hdGlvblNob3cnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVtaXQoJ3BhZ2luYXRpb25IaWRlJyk7XG4gICAgICB9XG4gICAgICBlbC5mb3JFYWNoKHN1YkVsID0+IHN1YkVsLmNsYXNzTGlzdC50b2dnbGUoc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmhpZGRlbkNsYXNzKSk7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgZW5hYmxlID0gKCkgPT4ge1xuICAgIHN3aXBlci5lbC5jbGFzc0xpc3QucmVtb3ZlKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5wYWdpbmF0aW9uRGlzYWJsZWRDbGFzcyk7XG4gICAgbGV0IHtcbiAgICAgIGVsXG4gICAgfSA9IHN3aXBlci5wYWdpbmF0aW9uO1xuICAgIGlmIChlbCkge1xuICAgICAgZWwgPSBtYWtlRWxlbWVudHNBcnJheShlbCk7XG4gICAgICBlbC5mb3JFYWNoKHN1YkVsID0+IHN1YkVsLmNsYXNzTGlzdC5yZW1vdmUoc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLnBhZ2luYXRpb25EaXNhYmxlZENsYXNzKSk7XG4gICAgfVxuICAgIGluaXQoKTtcbiAgICByZW5kZXIoKTtcbiAgICB1cGRhdGUoKTtcbiAgfTtcbiAgY29uc3QgZGlzYWJsZSA9ICgpID0+IHtcbiAgICBzd2lwZXIuZWwuY2xhc3NMaXN0LmFkZChzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24ucGFnaW5hdGlvbkRpc2FibGVkQ2xhc3MpO1xuICAgIGxldCB7XG4gICAgICBlbFxuICAgIH0gPSBzd2lwZXIucGFnaW5hdGlvbjtcbiAgICBpZiAoZWwpIHtcbiAgICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgICAgZWwuZm9yRWFjaChzdWJFbCA9PiBzdWJFbC5jbGFzc0xpc3QuYWRkKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5wYWdpbmF0aW9uRGlzYWJsZWRDbGFzcykpO1xuICAgIH1cbiAgICBkZXN0cm95KCk7XG4gIH07XG4gIE9iamVjdC5hc3NpZ24oc3dpcGVyLnBhZ2luYXRpb24sIHtcbiAgICBlbmFibGUsXG4gICAgZGlzYWJsZSxcbiAgICByZW5kZXIsXG4gICAgdXBkYXRlLFxuICAgIGluaXQsXG4gICAgZGVzdHJveVxuICB9KTtcbn1cblxuZXhwb3J0IHsgUGFnaW5hdGlvbiBhcyBkZWZhdWx0IH07XG4iLCIvKipcbiAqIFNTUiBXaW5kb3cgNC4wLjJcbiAqIEJldHRlciBoYW5kbGluZyBmb3Igd2luZG93IG9iamVjdCBpbiBTU1IgZW52aXJvbm1lbnRcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2xpbWl0czR3ZWIvc3NyLXdpbmRvd1xuICpcbiAqIENvcHlyaWdodCAyMDIxLCBWbGFkaW1pciBLaGFybGFtcGlkaVxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVFxuICpcbiAqIFJlbGVhc2VkIG9uOiBEZWNlbWJlciAxMywgMjAyMVxuICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wYXJhbS1yZWFzc2lnbiAqL1xuZnVuY3Rpb24gaXNPYmplY3Qob2JqKSB7XG4gIHJldHVybiBvYmogIT09IG51bGwgJiYgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiYgJ2NvbnN0cnVjdG9yJyBpbiBvYmogJiYgb2JqLmNvbnN0cnVjdG9yID09PSBPYmplY3Q7XG59XG5mdW5jdGlvbiBleHRlbmQodGFyZ2V0LCBzcmMpIHtcbiAgaWYgKHRhcmdldCA9PT0gdm9pZCAwKSB7XG4gICAgdGFyZ2V0ID0ge307XG4gIH1cbiAgaWYgKHNyYyA9PT0gdm9pZCAwKSB7XG4gICAgc3JjID0ge307XG4gIH1cbiAgT2JqZWN0LmtleXMoc3JjKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgaWYgKHR5cGVvZiB0YXJnZXRba2V5XSA9PT0gJ3VuZGVmaW5lZCcpIHRhcmdldFtrZXldID0gc3JjW2tleV07ZWxzZSBpZiAoaXNPYmplY3Qoc3JjW2tleV0pICYmIGlzT2JqZWN0KHRhcmdldFtrZXldKSAmJiBPYmplY3Qua2V5cyhzcmNba2V5XSkubGVuZ3RoID4gMCkge1xuICAgICAgZXh0ZW5kKHRhcmdldFtrZXldLCBzcmNba2V5XSk7XG4gICAgfVxuICB9KTtcbn1cbmNvbnN0IHNzckRvY3VtZW50ID0ge1xuICBib2R5OiB7fSxcbiAgYWRkRXZlbnRMaXN0ZW5lcigpIHt9LFxuICByZW1vdmVFdmVudExpc3RlbmVyKCkge30sXG4gIGFjdGl2ZUVsZW1lbnQ6IHtcbiAgICBibHVyKCkge30sXG4gICAgbm9kZU5hbWU6ICcnXG4gIH0sXG4gIHF1ZXJ5U2VsZWN0b3IoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG4gIHF1ZXJ5U2VsZWN0b3JBbGwoKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9LFxuICBnZXRFbGVtZW50QnlJZCgpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcbiAgY3JlYXRlRXZlbnQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGluaXRFdmVudCgpIHt9XG4gICAgfTtcbiAgfSxcbiAgY3JlYXRlRWxlbWVudCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY2hpbGRyZW46IFtdLFxuICAgICAgY2hpbGROb2RlczogW10sXG4gICAgICBzdHlsZToge30sXG4gICAgICBzZXRBdHRyaWJ1dGUoKSB7fSxcbiAgICAgIGdldEVsZW1lbnRzQnlUYWdOYW1lKCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgfTtcbiAgfSxcbiAgY3JlYXRlRWxlbWVudE5TKCkge1xuICAgIHJldHVybiB7fTtcbiAgfSxcbiAgaW1wb3J0Tm9kZSgpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcbiAgbG9jYXRpb246IHtcbiAgICBoYXNoOiAnJyxcbiAgICBob3N0OiAnJyxcbiAgICBob3N0bmFtZTogJycsXG4gICAgaHJlZjogJycsXG4gICAgb3JpZ2luOiAnJyxcbiAgICBwYXRobmFtZTogJycsXG4gICAgcHJvdG9jb2w6ICcnLFxuICAgIHNlYXJjaDogJydcbiAgfVxufTtcbmZ1bmN0aW9uIGdldERvY3VtZW50KCkge1xuICBjb25zdCBkb2MgPSB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnID8gZG9jdW1lbnQgOiB7fTtcbiAgZXh0ZW5kKGRvYywgc3NyRG9jdW1lbnQpO1xuICByZXR1cm4gZG9jO1xufVxuY29uc3Qgc3NyV2luZG93ID0ge1xuICBkb2N1bWVudDogc3NyRG9jdW1lbnQsXG4gIG5hdmlnYXRvcjoge1xuICAgIHVzZXJBZ2VudDogJydcbiAgfSxcbiAgbG9jYXRpb246IHtcbiAgICBoYXNoOiAnJyxcbiAgICBob3N0OiAnJyxcbiAgICBob3N0bmFtZTogJycsXG4gICAgaHJlZjogJycsXG4gICAgb3JpZ2luOiAnJyxcbiAgICBwYXRobmFtZTogJycsXG4gICAgcHJvdG9jb2w6ICcnLFxuICAgIHNlYXJjaDogJydcbiAgfSxcbiAgaGlzdG9yeToge1xuICAgIHJlcGxhY2VTdGF0ZSgpIHt9LFxuICAgIHB1c2hTdGF0ZSgpIHt9LFxuICAgIGdvKCkge30sXG4gICAgYmFjaygpIHt9XG4gIH0sXG4gIEN1c3RvbUV2ZW50OiBmdW5jdGlvbiBDdXN0b21FdmVudCgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgYWRkRXZlbnRMaXN0ZW5lcigpIHt9LFxuICByZW1vdmVFdmVudExpc3RlbmVyKCkge30sXG4gIGdldENvbXB1dGVkU3R5bGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGdldFByb3BlcnR5VmFsdWUoKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICB9O1xuICB9LFxuICBJbWFnZSgpIHt9LFxuICBEYXRlKCkge30sXG4gIHNjcmVlbjoge30sXG4gIHNldFRpbWVvdXQoKSB7fSxcbiAgY2xlYXJUaW1lb3V0KCkge30sXG4gIG1hdGNoTWVkaWEoKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9LFxuICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoY2FsbGJhY2spIHtcbiAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjYWxsYmFjaygpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBzZXRUaW1lb3V0KGNhbGxiYWNrLCAwKTtcbiAgfSxcbiAgY2FuY2VsQW5pbWF0aW9uRnJhbWUoaWQpIHtcbiAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNsZWFyVGltZW91dChpZCk7XG4gIH1cbn07XG5mdW5jdGlvbiBnZXRXaW5kb3coKSB7XG4gIGNvbnN0IHdpbiA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDoge307XG4gIGV4dGVuZCh3aW4sIHNzcldpbmRvdyk7XG4gIHJldHVybiB3aW47XG59XG5cbmV4cG9ydCB7IGdldFdpbmRvdyBhcyBhLCBnZXREb2N1bWVudCBhcyBnIH07XG4iLCJpbXBvcnQgeyBhIGFzIGdldFdpbmRvdywgZyBhcyBnZXREb2N1bWVudCB9IGZyb20gJy4vc3NyLXdpbmRvdy5lc20ubWpzJztcblxuZnVuY3Rpb24gY2xhc3Nlc1RvVG9rZW5zKGNsYXNzZXMpIHtcbiAgaWYgKGNsYXNzZXMgPT09IHZvaWQgMCkge1xuICAgIGNsYXNzZXMgPSAnJztcbiAgfVxuICByZXR1cm4gY2xhc3Nlcy50cmltKCkuc3BsaXQoJyAnKS5maWx0ZXIoYyA9PiAhIWMudHJpbSgpKTtcbn1cblxuZnVuY3Rpb24gZGVsZXRlUHJvcHMob2JqKSB7XG4gIGNvbnN0IG9iamVjdCA9IG9iajtcbiAgT2JqZWN0LmtleXMob2JqZWN0KS5mb3JFYWNoKGtleSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIG9iamVjdFtrZXldID0gbnVsbDtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBubyBnZXR0ZXIgZm9yIG9iamVjdFxuICAgIH1cbiAgICB0cnkge1xuICAgICAgZGVsZXRlIG9iamVjdFtrZXldO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIHNvbWV0aGluZyBnb3Qgd3JvbmdcbiAgICB9XG4gIH0pO1xufVxuZnVuY3Rpb24gbmV4dFRpY2soY2FsbGJhY2ssIGRlbGF5KSB7XG4gIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7XG4gICAgZGVsYXkgPSAwO1xuICB9XG4gIHJldHVybiBzZXRUaW1lb3V0KGNhbGxiYWNrLCBkZWxheSk7XG59XG5mdW5jdGlvbiBub3coKSB7XG4gIHJldHVybiBEYXRlLm5vdygpO1xufVxuZnVuY3Rpb24gZ2V0Q29tcHV0ZWRTdHlsZShlbCkge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgbGV0IHN0eWxlO1xuICBpZiAod2luZG93LmdldENvbXB1dGVkU3R5bGUpIHtcbiAgICBzdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsLCBudWxsKTtcbiAgfVxuICBpZiAoIXN0eWxlICYmIGVsLmN1cnJlbnRTdHlsZSkge1xuICAgIHN0eWxlID0gZWwuY3VycmVudFN0eWxlO1xuICB9XG4gIGlmICghc3R5bGUpIHtcbiAgICBzdHlsZSA9IGVsLnN0eWxlO1xuICB9XG4gIHJldHVybiBzdHlsZTtcbn1cbmZ1bmN0aW9uIGdldFRyYW5zbGF0ZShlbCwgYXhpcykge1xuICBpZiAoYXhpcyA9PT0gdm9pZCAwKSB7XG4gICAgYXhpcyA9ICd4JztcbiAgfVxuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgbGV0IG1hdHJpeDtcbiAgbGV0IGN1clRyYW5zZm9ybTtcbiAgbGV0IHRyYW5zZm9ybU1hdHJpeDtcbiAgY29uc3QgY3VyU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGVsKTtcbiAgaWYgKHdpbmRvdy5XZWJLaXRDU1NNYXRyaXgpIHtcbiAgICBjdXJUcmFuc2Zvcm0gPSBjdXJTdHlsZS50cmFuc2Zvcm0gfHwgY3VyU3R5bGUud2Via2l0VHJhbnNmb3JtO1xuICAgIGlmIChjdXJUcmFuc2Zvcm0uc3BsaXQoJywnKS5sZW5ndGggPiA2KSB7XG4gICAgICBjdXJUcmFuc2Zvcm0gPSBjdXJUcmFuc2Zvcm0uc3BsaXQoJywgJykubWFwKGEgPT4gYS5yZXBsYWNlKCcsJywgJy4nKSkuam9pbignLCAnKTtcbiAgICB9XG4gICAgLy8gU29tZSBvbGQgdmVyc2lvbnMgb2YgV2Via2l0IGNob2tlIHdoZW4gJ25vbmUnIGlzIHBhc3NlZDsgcGFzc1xuICAgIC8vIGVtcHR5IHN0cmluZyBpbnN0ZWFkIGluIHRoaXMgY2FzZVxuICAgIHRyYW5zZm9ybU1hdHJpeCA9IG5ldyB3aW5kb3cuV2ViS2l0Q1NTTWF0cml4KGN1clRyYW5zZm9ybSA9PT0gJ25vbmUnID8gJycgOiBjdXJUcmFuc2Zvcm0pO1xuICB9IGVsc2Uge1xuICAgIHRyYW5zZm9ybU1hdHJpeCA9IGN1clN0eWxlLk1velRyYW5zZm9ybSB8fCBjdXJTdHlsZS5PVHJhbnNmb3JtIHx8IGN1clN0eWxlLk1zVHJhbnNmb3JtIHx8IGN1clN0eWxlLm1zVHJhbnNmb3JtIHx8IGN1clN0eWxlLnRyYW5zZm9ybSB8fCBjdXJTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCd0cmFuc2Zvcm0nKS5yZXBsYWNlKCd0cmFuc2xhdGUoJywgJ21hdHJpeCgxLCAwLCAwLCAxLCcpO1xuICAgIG1hdHJpeCA9IHRyYW5zZm9ybU1hdHJpeC50b1N0cmluZygpLnNwbGl0KCcsJyk7XG4gIH1cbiAgaWYgKGF4aXMgPT09ICd4Jykge1xuICAgIC8vIExhdGVzdCBDaHJvbWUgYW5kIHdlYmtpdHMgRml4XG4gICAgaWYgKHdpbmRvdy5XZWJLaXRDU1NNYXRyaXgpIGN1clRyYW5zZm9ybSA9IHRyYW5zZm9ybU1hdHJpeC5tNDE7XG4gICAgLy8gQ3JhenkgSUUxMCBNYXRyaXhcbiAgICBlbHNlIGlmIChtYXRyaXgubGVuZ3RoID09PSAxNikgY3VyVHJhbnNmb3JtID0gcGFyc2VGbG9hdChtYXRyaXhbMTJdKTtcbiAgICAvLyBOb3JtYWwgQnJvd3NlcnNcbiAgICBlbHNlIGN1clRyYW5zZm9ybSA9IHBhcnNlRmxvYXQobWF0cml4WzRdKTtcbiAgfVxuICBpZiAoYXhpcyA9PT0gJ3knKSB7XG4gICAgLy8gTGF0ZXN0IENocm9tZSBhbmQgd2Via2l0cyBGaXhcbiAgICBpZiAod2luZG93LldlYktpdENTU01hdHJpeCkgY3VyVHJhbnNmb3JtID0gdHJhbnNmb3JtTWF0cml4Lm00MjtcbiAgICAvLyBDcmF6eSBJRTEwIE1hdHJpeFxuICAgIGVsc2UgaWYgKG1hdHJpeC5sZW5ndGggPT09IDE2KSBjdXJUcmFuc2Zvcm0gPSBwYXJzZUZsb2F0KG1hdHJpeFsxM10pO1xuICAgIC8vIE5vcm1hbCBCcm93c2Vyc1xuICAgIGVsc2UgY3VyVHJhbnNmb3JtID0gcGFyc2VGbG9hdChtYXRyaXhbNV0pO1xuICB9XG4gIHJldHVybiBjdXJUcmFuc2Zvcm0gfHwgMDtcbn1cbmZ1bmN0aW9uIGlzT2JqZWN0KG8pIHtcbiAgcmV0dXJuIHR5cGVvZiBvID09PSAnb2JqZWN0JyAmJiBvICE9PSBudWxsICYmIG8uY29uc3RydWN0b3IgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKSA9PT0gJ09iamVjdCc7XG59XG5mdW5jdGlvbiBpc05vZGUobm9kZSkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuSFRNTEVsZW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIG5vZGUgaW5zdGFuY2VvZiBIVE1MRWxlbWVudDtcbiAgfVxuICByZXR1cm4gbm9kZSAmJiAobm9kZS5ub2RlVHlwZSA9PT0gMSB8fCBub2RlLm5vZGVUeXBlID09PSAxMSk7XG59XG5mdW5jdGlvbiBleHRlbmQoKSB7XG4gIGNvbnN0IHRvID0gT2JqZWN0KGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXSk7XG4gIGNvbnN0IG5vRXh0ZW5kID0gWydfX3Byb3RvX18nLCAnY29uc3RydWN0b3InLCAncHJvdG90eXBlJ107XG4gIGZvciAobGV0IGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgY29uc3QgbmV4dFNvdXJjZSA9IGkgPCAwIHx8IGFyZ3VtZW50cy5sZW5ndGggPD0gaSA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1tpXTtcbiAgICBpZiAobmV4dFNvdXJjZSAhPT0gdW5kZWZpbmVkICYmIG5leHRTb3VyY2UgIT09IG51bGwgJiYgIWlzTm9kZShuZXh0U291cmNlKSkge1xuICAgICAgY29uc3Qga2V5c0FycmF5ID0gT2JqZWN0LmtleXMoT2JqZWN0KG5leHRTb3VyY2UpKS5maWx0ZXIoa2V5ID0+IG5vRXh0ZW5kLmluZGV4T2Yoa2V5KSA8IDApO1xuICAgICAgZm9yIChsZXQgbmV4dEluZGV4ID0gMCwgbGVuID0ga2V5c0FycmF5Lmxlbmd0aDsgbmV4dEluZGV4IDwgbGVuOyBuZXh0SW5kZXggKz0gMSkge1xuICAgICAgICBjb25zdCBuZXh0S2V5ID0ga2V5c0FycmF5W25leHRJbmRleF07XG4gICAgICAgIGNvbnN0IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG5leHRTb3VyY2UsIG5leHRLZXkpO1xuICAgICAgICBpZiAoZGVzYyAhPT0gdW5kZWZpbmVkICYmIGRlc2MuZW51bWVyYWJsZSkge1xuICAgICAgICAgIGlmIChpc09iamVjdCh0b1tuZXh0S2V5XSkgJiYgaXNPYmplY3QobmV4dFNvdXJjZVtuZXh0S2V5XSkpIHtcbiAgICAgICAgICAgIGlmIChuZXh0U291cmNlW25leHRLZXldLl9fc3dpcGVyX18pIHtcbiAgICAgICAgICAgICAgdG9bbmV4dEtleV0gPSBuZXh0U291cmNlW25leHRLZXldO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZXh0ZW5kKHRvW25leHRLZXldLCBuZXh0U291cmNlW25leHRLZXldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKCFpc09iamVjdCh0b1tuZXh0S2V5XSkgJiYgaXNPYmplY3QobmV4dFNvdXJjZVtuZXh0S2V5XSkpIHtcbiAgICAgICAgICAgIHRvW25leHRLZXldID0ge307XG4gICAgICAgICAgICBpZiAobmV4dFNvdXJjZVtuZXh0S2V5XS5fX3N3aXBlcl9fKSB7XG4gICAgICAgICAgICAgIHRvW25leHRLZXldID0gbmV4dFNvdXJjZVtuZXh0S2V5XTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGV4dGVuZCh0b1tuZXh0S2V5XSwgbmV4dFNvdXJjZVtuZXh0S2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRvW25leHRLZXldID0gbmV4dFNvdXJjZVtuZXh0S2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRvO1xufVxuZnVuY3Rpb24gc2V0Q1NTUHJvcGVydHkoZWwsIHZhck5hbWUsIHZhclZhbHVlKSB7XG4gIGVsLnN0eWxlLnNldFByb3BlcnR5KHZhck5hbWUsIHZhclZhbHVlKTtcbn1cbmZ1bmN0aW9uIGFuaW1hdGVDU1NNb2RlU2Nyb2xsKF9yZWYpIHtcbiAgbGV0IHtcbiAgICBzd2lwZXIsXG4gICAgdGFyZ2V0UG9zaXRpb24sXG4gICAgc2lkZVxuICB9ID0gX3JlZjtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGNvbnN0IHN0YXJ0UG9zaXRpb24gPSAtc3dpcGVyLnRyYW5zbGF0ZTtcbiAgbGV0IHN0YXJ0VGltZSA9IG51bGw7XG4gIGxldCB0aW1lO1xuICBjb25zdCBkdXJhdGlvbiA9IHN3aXBlci5wYXJhbXMuc3BlZWQ7XG4gIHN3aXBlci53cmFwcGVyRWwuc3R5bGUuc2Nyb2xsU25hcFR5cGUgPSAnbm9uZSc7XG4gIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZShzd2lwZXIuY3NzTW9kZUZyYW1lSUQpO1xuICBjb25zdCBkaXIgPSB0YXJnZXRQb3NpdGlvbiA+IHN0YXJ0UG9zaXRpb24gPyAnbmV4dCcgOiAncHJldic7XG4gIGNvbnN0IGlzT3V0T2ZCb3VuZCA9IChjdXJyZW50LCB0YXJnZXQpID0+IHtcbiAgICByZXR1cm4gZGlyID09PSAnbmV4dCcgJiYgY3VycmVudCA+PSB0YXJnZXQgfHwgZGlyID09PSAncHJldicgJiYgY3VycmVudCA8PSB0YXJnZXQ7XG4gIH07XG4gIGNvbnN0IGFuaW1hdGUgPSAoKSA9PiB7XG4gICAgdGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgIGlmIChzdGFydFRpbWUgPT09IG51bGwpIHtcbiAgICAgIHN0YXJ0VGltZSA9IHRpbWU7XG4gICAgfVxuICAgIGNvbnN0IHByb2dyZXNzID0gTWF0aC5tYXgoTWF0aC5taW4oKHRpbWUgLSBzdGFydFRpbWUpIC8gZHVyYXRpb24sIDEpLCAwKTtcbiAgICBjb25zdCBlYXNlUHJvZ3Jlc3MgPSAwLjUgLSBNYXRoLmNvcyhwcm9ncmVzcyAqIE1hdGguUEkpIC8gMjtcbiAgICBsZXQgY3VycmVudFBvc2l0aW9uID0gc3RhcnRQb3NpdGlvbiArIGVhc2VQcm9ncmVzcyAqICh0YXJnZXRQb3NpdGlvbiAtIHN0YXJ0UG9zaXRpb24pO1xuICAgIGlmIChpc091dE9mQm91bmQoY3VycmVudFBvc2l0aW9uLCB0YXJnZXRQb3NpdGlvbikpIHtcbiAgICAgIGN1cnJlbnRQb3NpdGlvbiA9IHRhcmdldFBvc2l0aW9uO1xuICAgIH1cbiAgICBzd2lwZXIud3JhcHBlckVsLnNjcm9sbFRvKHtcbiAgICAgIFtzaWRlXTogY3VycmVudFBvc2l0aW9uXG4gICAgfSk7XG4gICAgaWYgKGlzT3V0T2ZCb3VuZChjdXJyZW50UG9zaXRpb24sIHRhcmdldFBvc2l0aW9uKSkge1xuICAgICAgc3dpcGVyLndyYXBwZXJFbC5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xuICAgICAgc3dpcGVyLndyYXBwZXJFbC5zdHlsZS5zY3JvbGxTbmFwVHlwZSA9ICcnO1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHN3aXBlci53cmFwcGVyRWwuc3R5bGUub3ZlcmZsb3cgPSAnJztcbiAgICAgICAgc3dpcGVyLndyYXBwZXJFbC5zY3JvbGxUbyh7XG4gICAgICAgICAgW3NpZGVdOiBjdXJyZW50UG9zaXRpb25cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZShzd2lwZXIuY3NzTW9kZUZyYW1lSUQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzd2lwZXIuY3NzTW9kZUZyYW1lSUQgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGFuaW1hdGUpO1xuICB9O1xuICBhbmltYXRlKCk7XG59XG5mdW5jdGlvbiBnZXRTbGlkZVRyYW5zZm9ybUVsKHNsaWRlRWwpIHtcbiAgcmV0dXJuIHNsaWRlRWwucXVlcnlTZWxlY3RvcignLnN3aXBlci1zbGlkZS10cmFuc2Zvcm0nKSB8fCBzbGlkZUVsLnNoYWRvd1Jvb3QgJiYgc2xpZGVFbC5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoJy5zd2lwZXItc2xpZGUtdHJhbnNmb3JtJykgfHwgc2xpZGVFbDtcbn1cbmZ1bmN0aW9uIGVsZW1lbnRDaGlsZHJlbihlbGVtZW50LCBzZWxlY3Rvcikge1xuICBpZiAoc2VsZWN0b3IgPT09IHZvaWQgMCkge1xuICAgIHNlbGVjdG9yID0gJyc7XG4gIH1cbiAgcmV0dXJuIFsuLi5lbGVtZW50LmNoaWxkcmVuXS5maWx0ZXIoZWwgPT4gZWwubWF0Y2hlcyhzZWxlY3RvcikpO1xufVxuZnVuY3Rpb24gc2hvd1dhcm5pbmcodGV4dCkge1xuICB0cnkge1xuICAgIGNvbnNvbGUud2Fybih0ZXh0KTtcbiAgICByZXR1cm47XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIGVyclxuICB9XG59XG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50KHRhZywgY2xhc3Nlcykge1xuICBpZiAoY2xhc3NlcyA9PT0gdm9pZCAwKSB7XG4gICAgY2xhc3NlcyA9IFtdO1xuICB9XG4gIGNvbnN0IGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWcpO1xuICBlbC5jbGFzc0xpc3QuYWRkKC4uLihBcnJheS5pc0FycmF5KGNsYXNzZXMpID8gY2xhc3NlcyA6IGNsYXNzZXNUb1Rva2VucyhjbGFzc2VzKSkpO1xuICByZXR1cm4gZWw7XG59XG5mdW5jdGlvbiBlbGVtZW50T2Zmc2V0KGVsKSB7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gIGNvbnN0IGJveCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICBjb25zdCBib2R5ID0gZG9jdW1lbnQuYm9keTtcbiAgY29uc3QgY2xpZW50VG9wID0gZWwuY2xpZW50VG9wIHx8IGJvZHkuY2xpZW50VG9wIHx8IDA7XG4gIGNvbnN0IGNsaWVudExlZnQgPSBlbC5jbGllbnRMZWZ0IHx8IGJvZHkuY2xpZW50TGVmdCB8fCAwO1xuICBjb25zdCBzY3JvbGxUb3AgPSBlbCA9PT0gd2luZG93ID8gd2luZG93LnNjcm9sbFkgOiBlbC5zY3JvbGxUb3A7XG4gIGNvbnN0IHNjcm9sbExlZnQgPSBlbCA9PT0gd2luZG93ID8gd2luZG93LnNjcm9sbFggOiBlbC5zY3JvbGxMZWZ0O1xuICByZXR1cm4ge1xuICAgIHRvcDogYm94LnRvcCArIHNjcm9sbFRvcCAtIGNsaWVudFRvcCxcbiAgICBsZWZ0OiBib3gubGVmdCArIHNjcm9sbExlZnQgLSBjbGllbnRMZWZ0XG4gIH07XG59XG5mdW5jdGlvbiBlbGVtZW50UHJldkFsbChlbCwgc2VsZWN0b3IpIHtcbiAgY29uc3QgcHJldkVscyA9IFtdO1xuICB3aGlsZSAoZWwucHJldmlvdXNFbGVtZW50U2libGluZykge1xuICAgIGNvbnN0IHByZXYgPSBlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICBpZiAocHJldi5tYXRjaGVzKHNlbGVjdG9yKSkgcHJldkVscy5wdXNoKHByZXYpO1xuICAgIH0gZWxzZSBwcmV2RWxzLnB1c2gocHJldik7XG4gICAgZWwgPSBwcmV2O1xuICB9XG4gIHJldHVybiBwcmV2RWxzO1xufVxuZnVuY3Rpb24gZWxlbWVudE5leHRBbGwoZWwsIHNlbGVjdG9yKSB7XG4gIGNvbnN0IG5leHRFbHMgPSBbXTtcbiAgd2hpbGUgKGVsLm5leHRFbGVtZW50U2libGluZykge1xuICAgIGNvbnN0IG5leHQgPSBlbC5uZXh0RWxlbWVudFNpYmxpbmc7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgIGlmIChuZXh0Lm1hdGNoZXMoc2VsZWN0b3IpKSBuZXh0RWxzLnB1c2gobmV4dCk7XG4gICAgfSBlbHNlIG5leHRFbHMucHVzaChuZXh0KTtcbiAgICBlbCA9IG5leHQ7XG4gIH1cbiAgcmV0dXJuIG5leHRFbHM7XG59XG5mdW5jdGlvbiBlbGVtZW50U3R5bGUoZWwsIHByb3ApIHtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIHJldHVybiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZShwcm9wKTtcbn1cbmZ1bmN0aW9uIGVsZW1lbnRJbmRleChlbCkge1xuICBsZXQgY2hpbGQgPSBlbDtcbiAgbGV0IGk7XG4gIGlmIChjaGlsZCkge1xuICAgIGkgPSAwO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgIHdoaWxlICgoY2hpbGQgPSBjaGlsZC5wcmV2aW91c1NpYmxpbmcpICE9PSBudWxsKSB7XG4gICAgICBpZiAoY2hpbGQubm9kZVR5cGUgPT09IDEpIGkgKz0gMTtcbiAgICB9XG4gICAgcmV0dXJuIGk7XG4gIH1cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cbmZ1bmN0aW9uIGVsZW1lbnRQYXJlbnRzKGVsLCBzZWxlY3Rvcikge1xuICBjb25zdCBwYXJlbnRzID0gW107IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgbGV0IHBhcmVudCA9IGVsLnBhcmVudEVsZW1lbnQ7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgd2hpbGUgKHBhcmVudCkge1xuICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgaWYgKHBhcmVudC5tYXRjaGVzKHNlbGVjdG9yKSkgcGFyZW50cy5wdXNoKHBhcmVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhcmVudHMucHVzaChwYXJlbnQpO1xuICAgIH1cbiAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50RWxlbWVudDtcbiAgfVxuICByZXR1cm4gcGFyZW50cztcbn1cbmZ1bmN0aW9uIGVsZW1lbnRUcmFuc2l0aW9uRW5kKGVsLCBjYWxsYmFjaykge1xuICBmdW5jdGlvbiBmaXJlQ2FsbEJhY2soZSkge1xuICAgIGlmIChlLnRhcmdldCAhPT0gZWwpIHJldHVybjtcbiAgICBjYWxsYmFjay5jYWxsKGVsLCBlKTtcbiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgZmlyZUNhbGxCYWNrKTtcbiAgfVxuICBpZiAoY2FsbGJhY2spIHtcbiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgZmlyZUNhbGxCYWNrKTtcbiAgfVxufVxuZnVuY3Rpb24gZWxlbWVudE91dGVyU2l6ZShlbCwgc2l6ZSwgaW5jbHVkZU1hcmdpbnMpIHtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGlmIChpbmNsdWRlTWFyZ2lucykge1xuICAgIHJldHVybiBlbFtzaXplID09PSAnd2lkdGgnID8gJ29mZnNldFdpZHRoJyA6ICdvZmZzZXRIZWlnaHQnXSArIHBhcnNlRmxvYXQod2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwsIG51bGwpLmdldFByb3BlcnR5VmFsdWUoc2l6ZSA9PT0gJ3dpZHRoJyA/ICdtYXJnaW4tcmlnaHQnIDogJ21hcmdpbi10b3AnKSkgKyBwYXJzZUZsb2F0KHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKHNpemUgPT09ICd3aWR0aCcgPyAnbWFyZ2luLWxlZnQnIDogJ21hcmdpbi1ib3R0b20nKSk7XG4gIH1cbiAgcmV0dXJuIGVsLm9mZnNldFdpZHRoO1xufVxuZnVuY3Rpb24gbWFrZUVsZW1lbnRzQXJyYXkoZWwpIHtcbiAgcmV0dXJuIChBcnJheS5pc0FycmF5KGVsKSA/IGVsIDogW2VsXSkuZmlsdGVyKGUgPT4gISFlKTtcbn1cblxuZXhwb3J0IHsgZWxlbWVudFBhcmVudHMgYXMgYSwgZWxlbWVudE9mZnNldCBhcyBiLCBjcmVhdGVFbGVtZW50IGFzIGMsIG5vdyBhcyBkLCBlbGVtZW50Q2hpbGRyZW4gYXMgZSwgZWxlbWVudE91dGVyU2l6ZSBhcyBmLCBnZXRTbGlkZVRyYW5zZm9ybUVsIGFzIGcsIGVsZW1lbnRJbmRleCBhcyBoLCBjbGFzc2VzVG9Ub2tlbnMgYXMgaSwgZ2V0VHJhbnNsYXRlIGFzIGosIGVsZW1lbnRUcmFuc2l0aW9uRW5kIGFzIGssIGlzT2JqZWN0IGFzIGwsIG1ha2VFbGVtZW50c0FycmF5IGFzIG0sIG5leHRUaWNrIGFzIG4sIGVsZW1lbnRTdHlsZSBhcyBvLCBlbGVtZW50TmV4dEFsbCBhcyBwLCBlbGVtZW50UHJldkFsbCBhcyBxLCBhbmltYXRlQ1NTTW9kZVNjcm9sbCBhcyByLCBzZXRDU1NQcm9wZXJ0eSBhcyBzLCBzaG93V2FybmluZyBhcyB0LCBleHRlbmQgYXMgdSwgZGVsZXRlUHJvcHMgYXMgdiB9O1xuIiwiaW1wb3J0IHsgYSBhcyBnZXRXaW5kb3csIGcgYXMgZ2V0RG9jdW1lbnQgfSBmcm9tICcuL3Nzci13aW5kb3cuZXNtLm1qcyc7XG5pbXBvcnQgeyBhIGFzIGVsZW1lbnRQYXJlbnRzLCBvIGFzIGVsZW1lbnRTdHlsZSwgZSBhcyBlbGVtZW50Q2hpbGRyZW4sIHMgYXMgc2V0Q1NTUHJvcGVydHksIGYgYXMgZWxlbWVudE91dGVyU2l6ZSwgcCBhcyBlbGVtZW50TmV4dEFsbCwgcSBhcyBlbGVtZW50UHJldkFsbCwgaiBhcyBnZXRUcmFuc2xhdGUsIHIgYXMgYW5pbWF0ZUNTU01vZGVTY3JvbGwsIG4gYXMgbmV4dFRpY2ssIHQgYXMgc2hvd1dhcm5pbmcsIGMgYXMgY3JlYXRlRWxlbWVudCwgZCBhcyBub3csIHUgYXMgZXh0ZW5kLCBoIGFzIGVsZW1lbnRJbmRleCwgdiBhcyBkZWxldGVQcm9wcyB9IGZyb20gJy4vdXRpbHMubWpzJztcblxubGV0IHN1cHBvcnQ7XG5mdW5jdGlvbiBjYWxjU3VwcG9ydCgpIHtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgcmV0dXJuIHtcbiAgICBzbW9vdGhTY3JvbGw6IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUgJiYgJ3Njcm9sbEJlaGF2aW9yJyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUsXG4gICAgdG91Y2g6ICEhKCdvbnRvdWNoc3RhcnQnIGluIHdpbmRvdyB8fCB3aW5kb3cuRG9jdW1lbnRUb3VjaCAmJiBkb2N1bWVudCBpbnN0YW5jZW9mIHdpbmRvdy5Eb2N1bWVudFRvdWNoKVxuICB9O1xufVxuZnVuY3Rpb24gZ2V0U3VwcG9ydCgpIHtcbiAgaWYgKCFzdXBwb3J0KSB7XG4gICAgc3VwcG9ydCA9IGNhbGNTdXBwb3J0KCk7XG4gIH1cbiAgcmV0dXJuIHN1cHBvcnQ7XG59XG5cbmxldCBkZXZpY2VDYWNoZWQ7XG5mdW5jdGlvbiBjYWxjRGV2aWNlKF90ZW1wKSB7XG4gIGxldCB7XG4gICAgdXNlckFnZW50XG4gIH0gPSBfdGVtcCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDtcbiAgY29uc3Qgc3VwcG9ydCA9IGdldFN1cHBvcnQoKTtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGNvbnN0IHBsYXRmb3JtID0gd2luZG93Lm5hdmlnYXRvci5wbGF0Zm9ybTtcbiAgY29uc3QgdWEgPSB1c2VyQWdlbnQgfHwgd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQ7XG4gIGNvbnN0IGRldmljZSA9IHtcbiAgICBpb3M6IGZhbHNlLFxuICAgIGFuZHJvaWQ6IGZhbHNlXG4gIH07XG4gIGNvbnN0IHNjcmVlbldpZHRoID0gd2luZG93LnNjcmVlbi53aWR0aDtcbiAgY29uc3Qgc2NyZWVuSGVpZ2h0ID0gd2luZG93LnNjcmVlbi5oZWlnaHQ7XG4gIGNvbnN0IGFuZHJvaWQgPSB1YS5tYXRjaCgvKEFuZHJvaWQpOz9bXFxzXFwvXSsoW1xcZC5dKyk/Lyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgbGV0IGlwYWQgPSB1YS5tYXRjaCgvKGlQYWQpLipPU1xccyhbXFxkX10rKS8pO1xuICBjb25zdCBpcG9kID0gdWEubWF0Y2goLyhpUG9kKSguKk9TXFxzKFtcXGRfXSspKT8vKTtcbiAgY29uc3QgaXBob25lID0gIWlwYWQgJiYgdWEubWF0Y2goLyhpUGhvbmVcXHNPU3xpT1MpXFxzKFtcXGRfXSspLyk7XG4gIGNvbnN0IHdpbmRvd3MgPSBwbGF0Zm9ybSA9PT0gJ1dpbjMyJztcbiAgbGV0IG1hY29zID0gcGxhdGZvcm0gPT09ICdNYWNJbnRlbCc7XG5cbiAgLy8gaVBhZE9zIDEzIGZpeFxuICBjb25zdCBpUGFkU2NyZWVucyA9IFsnMTAyNHgxMzY2JywgJzEzNjZ4MTAyNCcsICc4MzR4MTE5NCcsICcxMTk0eDgzNCcsICc4MzR4MTExMicsICcxMTEyeDgzNCcsICc3Njh4MTAyNCcsICcxMDI0eDc2OCcsICc4MjB4MTE4MCcsICcxMTgweDgyMCcsICc4MTB4MTA4MCcsICcxMDgweDgxMCddO1xuICBpZiAoIWlwYWQgJiYgbWFjb3MgJiYgc3VwcG9ydC50b3VjaCAmJiBpUGFkU2NyZWVucy5pbmRleE9mKGAke3NjcmVlbldpZHRofXgke3NjcmVlbkhlaWdodH1gKSA+PSAwKSB7XG4gICAgaXBhZCA9IHVhLm1hdGNoKC8oVmVyc2lvbilcXC8oW1xcZC5dKykvKTtcbiAgICBpZiAoIWlwYWQpIGlwYWQgPSBbMCwgMSwgJzEzXzBfMCddO1xuICAgIG1hY29zID0gZmFsc2U7XG4gIH1cblxuICAvLyBBbmRyb2lkXG4gIGlmIChhbmRyb2lkICYmICF3aW5kb3dzKSB7XG4gICAgZGV2aWNlLm9zID0gJ2FuZHJvaWQnO1xuICAgIGRldmljZS5hbmRyb2lkID0gdHJ1ZTtcbiAgfVxuICBpZiAoaXBhZCB8fCBpcGhvbmUgfHwgaXBvZCkge1xuICAgIGRldmljZS5vcyA9ICdpb3MnO1xuICAgIGRldmljZS5pb3MgPSB0cnVlO1xuICB9XG5cbiAgLy8gRXhwb3J0IG9iamVjdFxuICByZXR1cm4gZGV2aWNlO1xufVxuZnVuY3Rpb24gZ2V0RGV2aWNlKG92ZXJyaWRlcykge1xuICBpZiAob3ZlcnJpZGVzID09PSB2b2lkIDApIHtcbiAgICBvdmVycmlkZXMgPSB7fTtcbiAgfVxuICBpZiAoIWRldmljZUNhY2hlZCkge1xuICAgIGRldmljZUNhY2hlZCA9IGNhbGNEZXZpY2Uob3ZlcnJpZGVzKTtcbiAgfVxuICByZXR1cm4gZGV2aWNlQ2FjaGVkO1xufVxuXG5sZXQgYnJvd3NlcjtcbmZ1bmN0aW9uIGNhbGNCcm93c2VyKCkge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgY29uc3QgZGV2aWNlID0gZ2V0RGV2aWNlKCk7XG4gIGxldCBuZWVkUGVyc3BlY3RpdmVGaXggPSBmYWxzZTtcbiAgZnVuY3Rpb24gaXNTYWZhcmkoKSB7XG4gICAgY29uc3QgdWEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpO1xuICAgIHJldHVybiB1YS5pbmRleE9mKCdzYWZhcmknKSA+PSAwICYmIHVhLmluZGV4T2YoJ2Nocm9tZScpIDwgMCAmJiB1YS5pbmRleE9mKCdhbmRyb2lkJykgPCAwO1xuICB9XG4gIGlmIChpc1NhZmFyaSgpKSB7XG4gICAgY29uc3QgdWEgPSBTdHJpbmcod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgIGlmICh1YS5pbmNsdWRlcygnVmVyc2lvbi8nKSkge1xuICAgICAgY29uc3QgW21ham9yLCBtaW5vcl0gPSB1YS5zcGxpdCgnVmVyc2lvbi8nKVsxXS5zcGxpdCgnICcpWzBdLnNwbGl0KCcuJykubWFwKG51bSA9PiBOdW1iZXIobnVtKSk7XG4gICAgICBuZWVkUGVyc3BlY3RpdmVGaXggPSBtYWpvciA8IDE2IHx8IG1ham9yID09PSAxNiAmJiBtaW5vciA8IDI7XG4gICAgfVxuICB9XG4gIGNvbnN0IGlzV2ViVmlldyA9IC8oaVBob25lfGlQb2R8aVBhZCkuKkFwcGxlV2ViS2l0KD8hLipTYWZhcmkpL2kudGVzdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gIGNvbnN0IGlzU2FmYXJpQnJvd3NlciA9IGlzU2FmYXJpKCk7XG4gIGNvbnN0IG5lZWQzZEZpeCA9IGlzU2FmYXJpQnJvd3NlciB8fCBpc1dlYlZpZXcgJiYgZGV2aWNlLmlvcztcbiAgcmV0dXJuIHtcbiAgICBpc1NhZmFyaTogbmVlZFBlcnNwZWN0aXZlRml4IHx8IGlzU2FmYXJpQnJvd3NlcixcbiAgICBuZWVkUGVyc3BlY3RpdmVGaXgsXG4gICAgbmVlZDNkRml4LFxuICAgIGlzV2ViVmlld1xuICB9O1xufVxuZnVuY3Rpb24gZ2V0QnJvd3NlcigpIHtcbiAgaWYgKCFicm93c2VyKSB7XG4gICAgYnJvd3NlciA9IGNhbGNCcm93c2VyKCk7XG4gIH1cbiAgcmV0dXJuIGJyb3dzZXI7XG59XG5cbmZ1bmN0aW9uIFJlc2l6ZShfcmVmKSB7XG4gIGxldCB7XG4gICAgc3dpcGVyLFxuICAgIG9uLFxuICAgIGVtaXRcbiAgfSA9IF9yZWY7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBsZXQgb2JzZXJ2ZXIgPSBudWxsO1xuICBsZXQgYW5pbWF0aW9uRnJhbWUgPSBudWxsO1xuICBjb25zdCByZXNpemVIYW5kbGVyID0gKCkgPT4ge1xuICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQgfHwgIXN3aXBlci5pbml0aWFsaXplZCkgcmV0dXJuO1xuICAgIGVtaXQoJ2JlZm9yZVJlc2l6ZScpO1xuICAgIGVtaXQoJ3Jlc2l6ZScpO1xuICB9O1xuICBjb25zdCBjcmVhdGVPYnNlcnZlciA9ICgpID0+IHtcbiAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIuaW5pdGlhbGl6ZWQpIHJldHVybjtcbiAgICBvYnNlcnZlciA9IG5ldyBSZXNpemVPYnNlcnZlcihlbnRyaWVzID0+IHtcbiAgICAgIGFuaW1hdGlvbkZyYW1lID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICB3aWR0aCxcbiAgICAgICAgICBoZWlnaHRcbiAgICAgICAgfSA9IHN3aXBlcjtcbiAgICAgICAgbGV0IG5ld1dpZHRoID0gd2lkdGg7XG4gICAgICAgIGxldCBuZXdIZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgIGVudHJpZXMuZm9yRWFjaChfcmVmMiA9PiB7XG4gICAgICAgICAgbGV0IHtcbiAgICAgICAgICAgIGNvbnRlbnRCb3hTaXplLFxuICAgICAgICAgICAgY29udGVudFJlY3QsXG4gICAgICAgICAgICB0YXJnZXRcbiAgICAgICAgICB9ID0gX3JlZjI7XG4gICAgICAgICAgaWYgKHRhcmdldCAmJiB0YXJnZXQgIT09IHN3aXBlci5lbCkgcmV0dXJuO1xuICAgICAgICAgIG5ld1dpZHRoID0gY29udGVudFJlY3QgPyBjb250ZW50UmVjdC53aWR0aCA6IChjb250ZW50Qm94U2l6ZVswXSB8fCBjb250ZW50Qm94U2l6ZSkuaW5saW5lU2l6ZTtcbiAgICAgICAgICBuZXdIZWlnaHQgPSBjb250ZW50UmVjdCA/IGNvbnRlbnRSZWN0LmhlaWdodCA6IChjb250ZW50Qm94U2l6ZVswXSB8fCBjb250ZW50Qm94U2l6ZSkuYmxvY2tTaXplO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKG5ld1dpZHRoICE9PSB3aWR0aCB8fCBuZXdIZWlnaHQgIT09IGhlaWdodCkge1xuICAgICAgICAgIHJlc2l6ZUhhbmRsZXIoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgb2JzZXJ2ZXIub2JzZXJ2ZShzd2lwZXIuZWwpO1xuICB9O1xuICBjb25zdCByZW1vdmVPYnNlcnZlciA9ICgpID0+IHtcbiAgICBpZiAoYW5pbWF0aW9uRnJhbWUpIHtcbiAgICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZShhbmltYXRpb25GcmFtZSk7XG4gICAgfVxuICAgIGlmIChvYnNlcnZlciAmJiBvYnNlcnZlci51bm9ic2VydmUgJiYgc3dpcGVyLmVsKSB7XG4gICAgICBvYnNlcnZlci51bm9ic2VydmUoc3dpcGVyLmVsKTtcbiAgICAgIG9ic2VydmVyID0gbnVsbDtcbiAgICB9XG4gIH07XG4gIGNvbnN0IG9yaWVudGF0aW9uQ2hhbmdlSGFuZGxlciA9ICgpID0+IHtcbiAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIuaW5pdGlhbGl6ZWQpIHJldHVybjtcbiAgICBlbWl0KCdvcmllbnRhdGlvbmNoYW5nZScpO1xuICB9O1xuICBvbignaW5pdCcsICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5yZXNpemVPYnNlcnZlciAmJiB0eXBlb2Ygd2luZG93LlJlc2l6ZU9ic2VydmVyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY3JlYXRlT2JzZXJ2ZXIoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHJlc2l6ZUhhbmRsZXIpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdvcmllbnRhdGlvbmNoYW5nZScsIG9yaWVudGF0aW9uQ2hhbmdlSGFuZGxlcik7XG4gIH0pO1xuICBvbignZGVzdHJveScsICgpID0+IHtcbiAgICByZW1vdmVPYnNlcnZlcigpO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCByZXNpemVIYW5kbGVyKTtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignb3JpZW50YXRpb25jaGFuZ2UnLCBvcmllbnRhdGlvbkNoYW5nZUhhbmRsZXIpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gT2JzZXJ2ZXIoX3JlZikge1xuICBsZXQge1xuICAgIHN3aXBlcixcbiAgICBleHRlbmRQYXJhbXMsXG4gICAgb24sXG4gICAgZW1pdFxuICB9ID0gX3JlZjtcbiAgY29uc3Qgb2JzZXJ2ZXJzID0gW107XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBjb25zdCBhdHRhY2ggPSBmdW5jdGlvbiAodGFyZ2V0LCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cbiAgICBjb25zdCBPYnNlcnZlckZ1bmMgPSB3aW5kb3cuTXV0YXRpb25PYnNlcnZlciB8fCB3aW5kb3cuV2Via2l0TXV0YXRpb25PYnNlcnZlcjtcbiAgICBjb25zdCBvYnNlcnZlciA9IG5ldyBPYnNlcnZlckZ1bmMobXV0YXRpb25zID0+IHtcbiAgICAgIC8vIFRoZSBvYnNlcnZlclVwZGF0ZSBldmVudCBzaG91bGQgb25seSBiZSB0cmlnZ2VyZWRcbiAgICAgIC8vIG9uY2UgZGVzcGl0ZSB0aGUgbnVtYmVyIG9mIG11dGF0aW9ucy4gIEFkZGl0aW9uYWxcbiAgICAgIC8vIHRyaWdnZXJzIGFyZSByZWR1bmRhbnQgYW5kIGFyZSB2ZXJ5IGNvc3RseVxuICAgICAgaWYgKHN3aXBlci5fX3ByZXZlbnRPYnNlcnZlcl9fKSByZXR1cm47XG4gICAgICBpZiAobXV0YXRpb25zLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBlbWl0KCdvYnNlcnZlclVwZGF0ZScsIG11dGF0aW9uc1swXSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG9ic2VydmVyVXBkYXRlID0gZnVuY3Rpb24gb2JzZXJ2ZXJVcGRhdGUoKSB7XG4gICAgICAgIGVtaXQoJ29ic2VydmVyVXBkYXRlJywgbXV0YXRpb25zWzBdKTtcbiAgICAgIH07XG4gICAgICBpZiAod2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSkge1xuICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKG9ic2VydmVyVXBkYXRlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KG9ic2VydmVyVXBkYXRlLCAwKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBvYnNlcnZlci5vYnNlcnZlKHRhcmdldCwge1xuICAgICAgYXR0cmlidXRlczogdHlwZW9mIG9wdGlvbnMuYXR0cmlidXRlcyA9PT0gJ3VuZGVmaW5lZCcgPyB0cnVlIDogb3B0aW9ucy5hdHRyaWJ1dGVzLFxuICAgICAgY2hpbGRMaXN0OiB0eXBlb2Ygb3B0aW9ucy5jaGlsZExpc3QgPT09ICd1bmRlZmluZWQnID8gdHJ1ZSA6IG9wdGlvbnMuY2hpbGRMaXN0LFxuICAgICAgY2hhcmFjdGVyRGF0YTogdHlwZW9mIG9wdGlvbnMuY2hhcmFjdGVyRGF0YSA9PT0gJ3VuZGVmaW5lZCcgPyB0cnVlIDogb3B0aW9ucy5jaGFyYWN0ZXJEYXRhXG4gICAgfSk7XG4gICAgb2JzZXJ2ZXJzLnB1c2gob2JzZXJ2ZXIpO1xuICB9O1xuICBjb25zdCBpbml0ID0gKCkgPT4ge1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5vYnNlcnZlcikgcmV0dXJuO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLm9ic2VydmVQYXJlbnRzKSB7XG4gICAgICBjb25zdCBjb250YWluZXJQYXJlbnRzID0gZWxlbWVudFBhcmVudHMoc3dpcGVyLmhvc3RFbCk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbnRhaW5lclBhcmVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgYXR0YWNoKGNvbnRhaW5lclBhcmVudHNbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBPYnNlcnZlIGNvbnRhaW5lclxuICAgIGF0dGFjaChzd2lwZXIuaG9zdEVsLCB7XG4gICAgICBjaGlsZExpc3Q6IHN3aXBlci5wYXJhbXMub2JzZXJ2ZVNsaWRlQ2hpbGRyZW5cbiAgICB9KTtcblxuICAgIC8vIE9ic2VydmUgd3JhcHBlclxuICAgIGF0dGFjaChzd2lwZXIud3JhcHBlckVsLCB7XG4gICAgICBhdHRyaWJ1dGVzOiBmYWxzZVxuICAgIH0pO1xuICB9O1xuICBjb25zdCBkZXN0cm95ID0gKCkgPT4ge1xuICAgIG9ic2VydmVycy5mb3JFYWNoKG9ic2VydmVyID0+IHtcbiAgICAgIG9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICB9KTtcbiAgICBvYnNlcnZlcnMuc3BsaWNlKDAsIG9ic2VydmVycy5sZW5ndGgpO1xuICB9O1xuICBleHRlbmRQYXJhbXMoe1xuICAgIG9ic2VydmVyOiBmYWxzZSxcbiAgICBvYnNlcnZlUGFyZW50czogZmFsc2UsXG4gICAgb2JzZXJ2ZVNsaWRlQ2hpbGRyZW46IGZhbHNlXG4gIH0pO1xuICBvbignaW5pdCcsIGluaXQpO1xuICBvbignZGVzdHJveScsIGRlc3Ryb3kpO1xufVxuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlcnNjb3JlLWRhbmdsZSAqL1xuXG52YXIgZXZlbnRzRW1pdHRlciA9IHtcbiAgb24oZXZlbnRzLCBoYW5kbGVyLCBwcmlvcml0eSkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnMgfHwgc2VsZi5kZXN0cm95ZWQpIHJldHVybiBzZWxmO1xuICAgIGlmICh0eXBlb2YgaGFuZGxlciAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHNlbGY7XG4gICAgY29uc3QgbWV0aG9kID0gcHJpb3JpdHkgPyAndW5zaGlmdCcgOiAncHVzaCc7XG4gICAgZXZlbnRzLnNwbGl0KCcgJykuZm9yRWFjaChldmVudCA9PiB7XG4gICAgICBpZiAoIXNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XSkgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdID0gW107XG4gICAgICBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF1bbWV0aG9kXShoYW5kbGVyKTtcbiAgICB9KTtcbiAgICByZXR1cm4gc2VsZjtcbiAgfSxcbiAgb25jZShldmVudHMsIGhhbmRsZXIsIHByaW9yaXR5KSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgaWYgKCFzZWxmLmV2ZW50c0xpc3RlbmVycyB8fCBzZWxmLmRlc3Ryb3llZCkgcmV0dXJuIHNlbGY7XG4gICAgaWYgKHR5cGVvZiBoYW5kbGVyICE9PSAnZnVuY3Rpb24nKSByZXR1cm4gc2VsZjtcbiAgICBmdW5jdGlvbiBvbmNlSGFuZGxlcigpIHtcbiAgICAgIHNlbGYub2ZmKGV2ZW50cywgb25jZUhhbmRsZXIpO1xuICAgICAgaWYgKG9uY2VIYW5kbGVyLl9fZW1pdHRlclByb3h5KSB7XG4gICAgICAgIGRlbGV0ZSBvbmNlSGFuZGxlci5fX2VtaXR0ZXJQcm94eTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuICAgICAgaGFuZGxlci5hcHBseShzZWxmLCBhcmdzKTtcbiAgICB9XG4gICAgb25jZUhhbmRsZXIuX19lbWl0dGVyUHJveHkgPSBoYW5kbGVyO1xuICAgIHJldHVybiBzZWxmLm9uKGV2ZW50cywgb25jZUhhbmRsZXIsIHByaW9yaXR5KTtcbiAgfSxcbiAgb25BbnkoaGFuZGxlciwgcHJpb3JpdHkpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBpZiAoIXNlbGYuZXZlbnRzTGlzdGVuZXJzIHx8IHNlbGYuZGVzdHJveWVkKSByZXR1cm4gc2VsZjtcbiAgICBpZiAodHlwZW9mIGhhbmRsZXIgIT09ICdmdW5jdGlvbicpIHJldHVybiBzZWxmO1xuICAgIGNvbnN0IG1ldGhvZCA9IHByaW9yaXR5ID8gJ3Vuc2hpZnQnIDogJ3B1c2gnO1xuICAgIGlmIChzZWxmLmV2ZW50c0FueUxpc3RlbmVycy5pbmRleE9mKGhhbmRsZXIpIDwgMCkge1xuICAgICAgc2VsZi5ldmVudHNBbnlMaXN0ZW5lcnNbbWV0aG9kXShoYW5kbGVyKTtcbiAgICB9XG4gICAgcmV0dXJuIHNlbGY7XG4gIH0sXG4gIG9mZkFueShoYW5kbGVyKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgaWYgKCFzZWxmLmV2ZW50c0xpc3RlbmVycyB8fCBzZWxmLmRlc3Ryb3llZCkgcmV0dXJuIHNlbGY7XG4gICAgaWYgKCFzZWxmLmV2ZW50c0FueUxpc3RlbmVycykgcmV0dXJuIHNlbGY7XG4gICAgY29uc3QgaW5kZXggPSBzZWxmLmV2ZW50c0FueUxpc3RlbmVycy5pbmRleE9mKGhhbmRsZXIpO1xuICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICBzZWxmLmV2ZW50c0FueUxpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cbiAgICByZXR1cm4gc2VsZjtcbiAgfSxcbiAgb2ZmKGV2ZW50cywgaGFuZGxlcikge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnMgfHwgc2VsZi5kZXN0cm95ZWQpIHJldHVybiBzZWxmO1xuICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnMpIHJldHVybiBzZWxmO1xuICAgIGV2ZW50cy5zcGxpdCgnICcpLmZvckVhY2goZXZlbnQgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0gPSBbXTtcbiAgICAgIH0gZWxzZSBpZiAoc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdKSB7XG4gICAgICAgIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XS5mb3JFYWNoKChldmVudEhhbmRsZXIsIGluZGV4KSA9PiB7XG4gICAgICAgICAgaWYgKGV2ZW50SGFuZGxlciA9PT0gaGFuZGxlciB8fCBldmVudEhhbmRsZXIuX19lbWl0dGVyUHJveHkgJiYgZXZlbnRIYW5kbGVyLl9fZW1pdHRlclByb3h5ID09PSBoYW5kbGVyKSB7XG4gICAgICAgICAgICBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0uc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBzZWxmO1xuICB9LFxuICBlbWl0KCkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnMgfHwgc2VsZi5kZXN0cm95ZWQpIHJldHVybiBzZWxmO1xuICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnMpIHJldHVybiBzZWxmO1xuICAgIGxldCBldmVudHM7XG4gICAgbGV0IGRhdGE7XG4gICAgbGV0IGNvbnRleHQ7XG4gICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICBhcmdzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgfVxuICAgIGlmICh0eXBlb2YgYXJnc1swXSA9PT0gJ3N0cmluZycgfHwgQXJyYXkuaXNBcnJheShhcmdzWzBdKSkge1xuICAgICAgZXZlbnRzID0gYXJnc1swXTtcbiAgICAgIGRhdGEgPSBhcmdzLnNsaWNlKDEsIGFyZ3MubGVuZ3RoKTtcbiAgICAgIGNvbnRleHQgPSBzZWxmO1xuICAgIH0gZWxzZSB7XG4gICAgICBldmVudHMgPSBhcmdzWzBdLmV2ZW50cztcbiAgICAgIGRhdGEgPSBhcmdzWzBdLmRhdGE7XG4gICAgICBjb250ZXh0ID0gYXJnc1swXS5jb250ZXh0IHx8IHNlbGY7XG4gICAgfVxuICAgIGRhdGEudW5zaGlmdChjb250ZXh0KTtcbiAgICBjb25zdCBldmVudHNBcnJheSA9IEFycmF5LmlzQXJyYXkoZXZlbnRzKSA/IGV2ZW50cyA6IGV2ZW50cy5zcGxpdCgnICcpO1xuICAgIGV2ZW50c0FycmF5LmZvckVhY2goZXZlbnQgPT4ge1xuICAgICAgaWYgKHNlbGYuZXZlbnRzQW55TGlzdGVuZXJzICYmIHNlbGYuZXZlbnRzQW55TGlzdGVuZXJzLmxlbmd0aCkge1xuICAgICAgICBzZWxmLmV2ZW50c0FueUxpc3RlbmVycy5mb3JFYWNoKGV2ZW50SGFuZGxlciA9PiB7XG4gICAgICAgICAgZXZlbnRIYW5kbGVyLmFwcGx5KGNvbnRleHQsIFtldmVudCwgLi4uZGF0YV0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChzZWxmLmV2ZW50c0xpc3RlbmVycyAmJiBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0pIHtcbiAgICAgICAgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdLmZvckVhY2goZXZlbnRIYW5kbGVyID0+IHtcbiAgICAgICAgICBldmVudEhhbmRsZXIuYXBwbHkoY29udGV4dCwgZGF0YSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBzZWxmO1xuICB9XG59O1xuXG5mdW5jdGlvbiB1cGRhdGVTaXplKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBsZXQgd2lkdGg7XG4gIGxldCBoZWlnaHQ7XG4gIGNvbnN0IGVsID0gc3dpcGVyLmVsO1xuICBpZiAodHlwZW9mIHN3aXBlci5wYXJhbXMud2lkdGggIT09ICd1bmRlZmluZWQnICYmIHN3aXBlci5wYXJhbXMud2lkdGggIT09IG51bGwpIHtcbiAgICB3aWR0aCA9IHN3aXBlci5wYXJhbXMud2lkdGg7XG4gIH0gZWxzZSB7XG4gICAgd2lkdGggPSBlbC5jbGllbnRXaWR0aDtcbiAgfVxuICBpZiAodHlwZW9mIHN3aXBlci5wYXJhbXMuaGVpZ2h0ICE9PSAndW5kZWZpbmVkJyAmJiBzd2lwZXIucGFyYW1zLmhlaWdodCAhPT0gbnVsbCkge1xuICAgIGhlaWdodCA9IHN3aXBlci5wYXJhbXMuaGVpZ2h0O1xuICB9IGVsc2Uge1xuICAgIGhlaWdodCA9IGVsLmNsaWVudEhlaWdodDtcbiAgfVxuICBpZiAod2lkdGggPT09IDAgJiYgc3dpcGVyLmlzSG9yaXpvbnRhbCgpIHx8IGhlaWdodCA9PT0gMCAmJiBzd2lwZXIuaXNWZXJ0aWNhbCgpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gU3VidHJhY3QgcGFkZGluZ3NcbiAgd2lkdGggPSB3aWR0aCAtIHBhcnNlSW50KGVsZW1lbnRTdHlsZShlbCwgJ3BhZGRpbmctbGVmdCcpIHx8IDAsIDEwKSAtIHBhcnNlSW50KGVsZW1lbnRTdHlsZShlbCwgJ3BhZGRpbmctcmlnaHQnKSB8fCAwLCAxMCk7XG4gIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KGVsZW1lbnRTdHlsZShlbCwgJ3BhZGRpbmctdG9wJykgfHwgMCwgMTApIC0gcGFyc2VJbnQoZWxlbWVudFN0eWxlKGVsLCAncGFkZGluZy1ib3R0b20nKSB8fCAwLCAxMCk7XG4gIGlmIChOdW1iZXIuaXNOYU4od2lkdGgpKSB3aWR0aCA9IDA7XG4gIGlmIChOdW1iZXIuaXNOYU4oaGVpZ2h0KSkgaGVpZ2h0ID0gMDtcbiAgT2JqZWN0LmFzc2lnbihzd2lwZXIsIHtcbiAgICB3aWR0aCxcbiAgICBoZWlnaHQsXG4gICAgc2l6ZTogc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gd2lkdGggOiBoZWlnaHRcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZVNsaWRlcygpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgZnVuY3Rpb24gZ2V0RGlyZWN0aW9uUHJvcGVydHlWYWx1ZShub2RlLCBsYWJlbCkge1xuICAgIHJldHVybiBwYXJzZUZsb2F0KG5vZGUuZ2V0UHJvcGVydHlWYWx1ZShzd2lwZXIuZ2V0RGlyZWN0aW9uTGFiZWwobGFiZWwpKSB8fCAwKTtcbiAgfVxuICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICBjb25zdCB7XG4gICAgd3JhcHBlckVsLFxuICAgIHNsaWRlc0VsLFxuICAgIHNpemU6IHN3aXBlclNpemUsXG4gICAgcnRsVHJhbnNsYXRlOiBydGwsXG4gICAgd3JvbmdSVExcbiAgfSA9IHN3aXBlcjtcbiAgY29uc3QgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgcGFyYW1zLnZpcnR1YWwuZW5hYmxlZDtcbiAgY29uc3QgcHJldmlvdXNTbGlkZXNMZW5ndGggPSBpc1ZpcnR1YWwgPyBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoIDogc3dpcGVyLnNsaWRlcy5sZW5ndGg7XG4gIGNvbnN0IHNsaWRlcyA9IGVsZW1lbnRDaGlsZHJlbihzbGlkZXNFbCwgYC4ke3N3aXBlci5wYXJhbXMuc2xpZGVDbGFzc30sIHN3aXBlci1zbGlkZWApO1xuICBjb25zdCBzbGlkZXNMZW5ndGggPSBpc1ZpcnR1YWwgPyBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoIDogc2xpZGVzLmxlbmd0aDtcbiAgbGV0IHNuYXBHcmlkID0gW107XG4gIGNvbnN0IHNsaWRlc0dyaWQgPSBbXTtcbiAgY29uc3Qgc2xpZGVzU2l6ZXNHcmlkID0gW107XG4gIGxldCBvZmZzZXRCZWZvcmUgPSBwYXJhbXMuc2xpZGVzT2Zmc2V0QmVmb3JlO1xuICBpZiAodHlwZW9mIG9mZnNldEJlZm9yZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG9mZnNldEJlZm9yZSA9IHBhcmFtcy5zbGlkZXNPZmZzZXRCZWZvcmUuY2FsbChzd2lwZXIpO1xuICB9XG4gIGxldCBvZmZzZXRBZnRlciA9IHBhcmFtcy5zbGlkZXNPZmZzZXRBZnRlcjtcbiAgaWYgKHR5cGVvZiBvZmZzZXRBZnRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG9mZnNldEFmdGVyID0gcGFyYW1zLnNsaWRlc09mZnNldEFmdGVyLmNhbGwoc3dpcGVyKTtcbiAgfVxuICBjb25zdCBwcmV2aW91c1NuYXBHcmlkTGVuZ3RoID0gc3dpcGVyLnNuYXBHcmlkLmxlbmd0aDtcbiAgY29uc3QgcHJldmlvdXNTbGlkZXNHcmlkTGVuZ3RoID0gc3dpcGVyLnNsaWRlc0dyaWQubGVuZ3RoO1xuICBsZXQgc3BhY2VCZXR3ZWVuID0gcGFyYW1zLnNwYWNlQmV0d2VlbjtcbiAgbGV0IHNsaWRlUG9zaXRpb24gPSAtb2Zmc2V0QmVmb3JlO1xuICBsZXQgcHJldlNsaWRlU2l6ZSA9IDA7XG4gIGxldCBpbmRleCA9IDA7XG4gIGlmICh0eXBlb2Ygc3dpcGVyU2l6ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHR5cGVvZiBzcGFjZUJldHdlZW4gPT09ICdzdHJpbmcnICYmIHNwYWNlQmV0d2Vlbi5pbmRleE9mKCclJykgPj0gMCkge1xuICAgIHNwYWNlQmV0d2VlbiA9IHBhcnNlRmxvYXQoc3BhY2VCZXR3ZWVuLnJlcGxhY2UoJyUnLCAnJykpIC8gMTAwICogc3dpcGVyU2l6ZTtcbiAgfSBlbHNlIGlmICh0eXBlb2Ygc3BhY2VCZXR3ZWVuID09PSAnc3RyaW5nJykge1xuICAgIHNwYWNlQmV0d2VlbiA9IHBhcnNlRmxvYXQoc3BhY2VCZXR3ZWVuKTtcbiAgfVxuICBzd2lwZXIudmlydHVhbFNpemUgPSAtc3BhY2VCZXR3ZWVuO1xuXG4gIC8vIHJlc2V0IG1hcmdpbnNcbiAgc2xpZGVzLmZvckVhY2goc2xpZGVFbCA9PiB7XG4gICAgaWYgKHJ0bCkge1xuICAgICAgc2xpZGVFbC5zdHlsZS5tYXJnaW5MZWZ0ID0gJyc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNsaWRlRWwuc3R5bGUubWFyZ2luUmlnaHQgPSAnJztcbiAgICB9XG4gICAgc2xpZGVFbC5zdHlsZS5tYXJnaW5Cb3R0b20gPSAnJztcbiAgICBzbGlkZUVsLnN0eWxlLm1hcmdpblRvcCA9ICcnO1xuICB9KTtcblxuICAvLyByZXNldCBjc3NNb2RlIG9mZnNldHNcbiAgaWYgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcyAmJiBwYXJhbXMuY3NzTW9kZSkge1xuICAgIHNldENTU1Byb3BlcnR5KHdyYXBwZXJFbCwgJy0tc3dpcGVyLWNlbnRlcmVkLW9mZnNldC1iZWZvcmUnLCAnJyk7XG4gICAgc2V0Q1NTUHJvcGVydHkod3JhcHBlckVsLCAnLS1zd2lwZXItY2VudGVyZWQtb2Zmc2V0LWFmdGVyJywgJycpO1xuICB9XG4gIGNvbnN0IGdyaWRFbmFibGVkID0gcGFyYW1zLmdyaWQgJiYgcGFyYW1zLmdyaWQucm93cyA+IDEgJiYgc3dpcGVyLmdyaWQ7XG4gIGlmIChncmlkRW5hYmxlZCkge1xuICAgIHN3aXBlci5ncmlkLmluaXRTbGlkZXMoc2xpZGVzKTtcbiAgfSBlbHNlIGlmIChzd2lwZXIuZ3JpZCkge1xuICAgIHN3aXBlci5ncmlkLnVuc2V0U2xpZGVzKCk7XG4gIH1cblxuICAvLyBDYWxjIHNsaWRlc1xuICBsZXQgc2xpZGVTaXplO1xuICBjb25zdCBzaG91bGRSZXNldFNsaWRlU2l6ZSA9IHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgJiYgcGFyYW1zLmJyZWFrcG9pbnRzICYmIE9iamVjdC5rZXlzKHBhcmFtcy5icmVha3BvaW50cykuZmlsdGVyKGtleSA9PiB7XG4gICAgcmV0dXJuIHR5cGVvZiBwYXJhbXMuYnJlYWtwb2ludHNba2V5XS5zbGlkZXNQZXJWaWV3ICE9PSAndW5kZWZpbmVkJztcbiAgfSkubGVuZ3RoID4gMDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXNMZW5ndGg7IGkgKz0gMSkge1xuICAgIHNsaWRlU2l6ZSA9IDA7XG4gICAgbGV0IHNsaWRlO1xuICAgIGlmIChzbGlkZXNbaV0pIHNsaWRlID0gc2xpZGVzW2ldO1xuICAgIGlmIChncmlkRW5hYmxlZCkge1xuICAgICAgc3dpcGVyLmdyaWQudXBkYXRlU2xpZGUoaSwgc2xpZGUsIHNsaWRlcyk7XG4gICAgfVxuICAgIGlmIChzbGlkZXNbaV0gJiYgZWxlbWVudFN0eWxlKHNsaWRlLCAnZGlzcGxheScpID09PSAnbm9uZScpIGNvbnRpbnVlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgICBpZiAocGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJykge1xuICAgICAgaWYgKHNob3VsZFJlc2V0U2xpZGVTaXplKSB7XG4gICAgICAgIHNsaWRlc1tpXS5zdHlsZVtzd2lwZXIuZ2V0RGlyZWN0aW9uTGFiZWwoJ3dpZHRoJyldID0gYGA7XG4gICAgICB9XG4gICAgICBjb25zdCBzbGlkZVN0eWxlcyA9IGdldENvbXB1dGVkU3R5bGUoc2xpZGUpO1xuICAgICAgY29uc3QgY3VycmVudFRyYW5zZm9ybSA9IHNsaWRlLnN0eWxlLnRyYW5zZm9ybTtcbiAgICAgIGNvbnN0IGN1cnJlbnRXZWJLaXRUcmFuc2Zvcm0gPSBzbGlkZS5zdHlsZS53ZWJraXRUcmFuc2Zvcm07XG4gICAgICBpZiAoY3VycmVudFRyYW5zZm9ybSkge1xuICAgICAgICBzbGlkZS5zdHlsZS50cmFuc2Zvcm0gPSAnbm9uZSc7XG4gICAgICB9XG4gICAgICBpZiAoY3VycmVudFdlYktpdFRyYW5zZm9ybSkge1xuICAgICAgICBzbGlkZS5zdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSAnbm9uZSc7XG4gICAgICB9XG4gICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykge1xuICAgICAgICBzbGlkZVNpemUgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBlbGVtZW50T3V0ZXJTaXplKHNsaWRlLCAnd2lkdGgnLCB0cnVlKSA6IGVsZW1lbnRPdXRlclNpemUoc2xpZGUsICdoZWlnaHQnLCB0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICBjb25zdCB3aWR0aCA9IGdldERpcmVjdGlvblByb3BlcnR5VmFsdWUoc2xpZGVTdHlsZXMsICd3aWR0aCcpO1xuICAgICAgICBjb25zdCBwYWRkaW5nTGVmdCA9IGdldERpcmVjdGlvblByb3BlcnR5VmFsdWUoc2xpZGVTdHlsZXMsICdwYWRkaW5nLWxlZnQnKTtcbiAgICAgICAgY29uc3QgcGFkZGluZ1JpZ2h0ID0gZ2V0RGlyZWN0aW9uUHJvcGVydHlWYWx1ZShzbGlkZVN0eWxlcywgJ3BhZGRpbmctcmlnaHQnKTtcbiAgICAgICAgY29uc3QgbWFyZ2luTGVmdCA9IGdldERpcmVjdGlvblByb3BlcnR5VmFsdWUoc2xpZGVTdHlsZXMsICdtYXJnaW4tbGVmdCcpO1xuICAgICAgICBjb25zdCBtYXJnaW5SaWdodCA9IGdldERpcmVjdGlvblByb3BlcnR5VmFsdWUoc2xpZGVTdHlsZXMsICdtYXJnaW4tcmlnaHQnKTtcbiAgICAgICAgY29uc3QgYm94U2l6aW5nID0gc2xpZGVTdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgnYm94LXNpemluZycpO1xuICAgICAgICBpZiAoYm94U2l6aW5nICYmIGJveFNpemluZyA9PT0gJ2JvcmRlci1ib3gnKSB7XG4gICAgICAgICAgc2xpZGVTaXplID0gd2lkdGggKyBtYXJnaW5MZWZ0ICsgbWFyZ2luUmlnaHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgY2xpZW50V2lkdGgsXG4gICAgICAgICAgICBvZmZzZXRXaWR0aFxuICAgICAgICAgIH0gPSBzbGlkZTtcbiAgICAgICAgICBzbGlkZVNpemUgPSB3aWR0aCArIHBhZGRpbmdMZWZ0ICsgcGFkZGluZ1JpZ2h0ICsgbWFyZ2luTGVmdCArIG1hcmdpblJpZ2h0ICsgKG9mZnNldFdpZHRoIC0gY2xpZW50V2lkdGgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoY3VycmVudFRyYW5zZm9ybSkge1xuICAgICAgICBzbGlkZS5zdHlsZS50cmFuc2Zvcm0gPSBjdXJyZW50VHJhbnNmb3JtO1xuICAgICAgfVxuICAgICAgaWYgKGN1cnJlbnRXZWJLaXRUcmFuc2Zvcm0pIHtcbiAgICAgICAgc2xpZGUuc3R5bGUud2Via2l0VHJhbnNmb3JtID0gY3VycmVudFdlYktpdFRyYW5zZm9ybTtcbiAgICAgIH1cbiAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSBzbGlkZVNpemUgPSBNYXRoLmZsb29yKHNsaWRlU2l6ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNsaWRlU2l6ZSA9IChzd2lwZXJTaXplIC0gKHBhcmFtcy5zbGlkZXNQZXJWaWV3IC0gMSkgKiBzcGFjZUJldHdlZW4pIC8gcGFyYW1zLnNsaWRlc1BlclZpZXc7XG4gICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykgc2xpZGVTaXplID0gTWF0aC5mbG9vcihzbGlkZVNpemUpO1xuICAgICAgaWYgKHNsaWRlc1tpXSkge1xuICAgICAgICBzbGlkZXNbaV0uc3R5bGVbc3dpcGVyLmdldERpcmVjdGlvbkxhYmVsKCd3aWR0aCcpXSA9IGAke3NsaWRlU2l6ZX1weGA7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChzbGlkZXNbaV0pIHtcbiAgICAgIHNsaWRlc1tpXS5zd2lwZXJTbGlkZVNpemUgPSBzbGlkZVNpemU7XG4gICAgfVxuICAgIHNsaWRlc1NpemVzR3JpZC5wdXNoKHNsaWRlU2l6ZSk7XG4gICAgaWYgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgc2xpZGVQb3NpdGlvbiA9IHNsaWRlUG9zaXRpb24gKyBzbGlkZVNpemUgLyAyICsgcHJldlNsaWRlU2l6ZSAvIDIgKyBzcGFjZUJldHdlZW47XG4gICAgICBpZiAocHJldlNsaWRlU2l6ZSA9PT0gMCAmJiBpICE9PSAwKSBzbGlkZVBvc2l0aW9uID0gc2xpZGVQb3NpdGlvbiAtIHN3aXBlclNpemUgLyAyIC0gc3BhY2VCZXR3ZWVuO1xuICAgICAgaWYgKGkgPT09IDApIHNsaWRlUG9zaXRpb24gPSBzbGlkZVBvc2l0aW9uIC0gc3dpcGVyU2l6ZSAvIDIgLSBzcGFjZUJldHdlZW47XG4gICAgICBpZiAoTWF0aC5hYnMoc2xpZGVQb3NpdGlvbikgPCAxIC8gMTAwMCkgc2xpZGVQb3NpdGlvbiA9IDA7XG4gICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykgc2xpZGVQb3NpdGlvbiA9IE1hdGguZmxvb3Ioc2xpZGVQb3NpdGlvbik7XG4gICAgICBpZiAoaW5kZXggJSBwYXJhbXMuc2xpZGVzUGVyR3JvdXAgPT09IDApIHNuYXBHcmlkLnB1c2goc2xpZGVQb3NpdGlvbik7XG4gICAgICBzbGlkZXNHcmlkLnB1c2goc2xpZGVQb3NpdGlvbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSBzbGlkZVBvc2l0aW9uID0gTWF0aC5mbG9vcihzbGlkZVBvc2l0aW9uKTtcbiAgICAgIGlmICgoaW5kZXggLSBNYXRoLm1pbihzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCwgaW5kZXgpKSAlIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXAgPT09IDApIHNuYXBHcmlkLnB1c2goc2xpZGVQb3NpdGlvbik7XG4gICAgICBzbGlkZXNHcmlkLnB1c2goc2xpZGVQb3NpdGlvbik7XG4gICAgICBzbGlkZVBvc2l0aW9uID0gc2xpZGVQb3NpdGlvbiArIHNsaWRlU2l6ZSArIHNwYWNlQmV0d2VlbjtcbiAgICB9XG4gICAgc3dpcGVyLnZpcnR1YWxTaXplICs9IHNsaWRlU2l6ZSArIHNwYWNlQmV0d2VlbjtcbiAgICBwcmV2U2xpZGVTaXplID0gc2xpZGVTaXplO1xuICAgIGluZGV4ICs9IDE7XG4gIH1cbiAgc3dpcGVyLnZpcnR1YWxTaXplID0gTWF0aC5tYXgoc3dpcGVyLnZpcnR1YWxTaXplLCBzd2lwZXJTaXplKSArIG9mZnNldEFmdGVyO1xuICBpZiAocnRsICYmIHdyb25nUlRMICYmIChwYXJhbXMuZWZmZWN0ID09PSAnc2xpZGUnIHx8IHBhcmFtcy5lZmZlY3QgPT09ICdjb3ZlcmZsb3cnKSkge1xuICAgIHdyYXBwZXJFbC5zdHlsZS53aWR0aCA9IGAke3N3aXBlci52aXJ0dWFsU2l6ZSArIHNwYWNlQmV0d2Vlbn1weGA7XG4gIH1cbiAgaWYgKHBhcmFtcy5zZXRXcmFwcGVyU2l6ZSkge1xuICAgIHdyYXBwZXJFbC5zdHlsZVtzd2lwZXIuZ2V0RGlyZWN0aW9uTGFiZWwoJ3dpZHRoJyldID0gYCR7c3dpcGVyLnZpcnR1YWxTaXplICsgc3BhY2VCZXR3ZWVufXB4YDtcbiAgfVxuICBpZiAoZ3JpZEVuYWJsZWQpIHtcbiAgICBzd2lwZXIuZ3JpZC51cGRhdGVXcmFwcGVyU2l6ZShzbGlkZVNpemUsIHNuYXBHcmlkKTtcbiAgfVxuXG4gIC8vIFJlbW92ZSBsYXN0IGdyaWQgZWxlbWVudHMgZGVwZW5kaW5nIG9uIHdpZHRoXG4gIGlmICghcGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgY29uc3QgbmV3U2xpZGVzR3JpZCA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc25hcEdyaWQubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGxldCBzbGlkZXNHcmlkSXRlbSA9IHNuYXBHcmlkW2ldO1xuICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHNsaWRlc0dyaWRJdGVtID0gTWF0aC5mbG9vcihzbGlkZXNHcmlkSXRlbSk7XG4gICAgICBpZiAoc25hcEdyaWRbaV0gPD0gc3dpcGVyLnZpcnR1YWxTaXplIC0gc3dpcGVyU2l6ZSkge1xuICAgICAgICBuZXdTbGlkZXNHcmlkLnB1c2goc2xpZGVzR3JpZEl0ZW0pO1xuICAgICAgfVxuICAgIH1cbiAgICBzbmFwR3JpZCA9IG5ld1NsaWRlc0dyaWQ7XG4gICAgaWYgKE1hdGguZmxvb3Ioc3dpcGVyLnZpcnR1YWxTaXplIC0gc3dpcGVyU2l6ZSkgLSBNYXRoLmZsb29yKHNuYXBHcmlkW3NuYXBHcmlkLmxlbmd0aCAtIDFdKSA+IDEpIHtcbiAgICAgIHNuYXBHcmlkLnB1c2goc3dpcGVyLnZpcnR1YWxTaXplIC0gc3dpcGVyU2l6ZSk7XG4gICAgfVxuICB9XG4gIGlmIChpc1ZpcnR1YWwgJiYgcGFyYW1zLmxvb3ApIHtcbiAgICBjb25zdCBzaXplID0gc2xpZGVzU2l6ZXNHcmlkWzBdICsgc3BhY2VCZXR3ZWVuO1xuICAgIGlmIChwYXJhbXMuc2xpZGVzUGVyR3JvdXAgPiAxKSB7XG4gICAgICBjb25zdCBncm91cHMgPSBNYXRoLmNlaWwoKHN3aXBlci52aXJ0dWFsLnNsaWRlc0JlZm9yZSArIHN3aXBlci52aXJ0dWFsLnNsaWRlc0FmdGVyKSAvIHBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG4gICAgICBjb25zdCBncm91cFNpemUgPSBzaXplICogcGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBncm91cHM7IGkgKz0gMSkge1xuICAgICAgICBzbmFwR3JpZC5wdXNoKHNuYXBHcmlkW3NuYXBHcmlkLmxlbmd0aCAtIDFdICsgZ3JvdXBTaXplKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzd2lwZXIudmlydHVhbC5zbGlkZXNCZWZvcmUgKyBzd2lwZXIudmlydHVhbC5zbGlkZXNBZnRlcjsgaSArPSAxKSB7XG4gICAgICBpZiAocGFyYW1zLnNsaWRlc1Blckdyb3VwID09PSAxKSB7XG4gICAgICAgIHNuYXBHcmlkLnB1c2goc25hcEdyaWRbc25hcEdyaWQubGVuZ3RoIC0gMV0gKyBzaXplKTtcbiAgICAgIH1cbiAgICAgIHNsaWRlc0dyaWQucHVzaChzbGlkZXNHcmlkW3NsaWRlc0dyaWQubGVuZ3RoIC0gMV0gKyBzaXplKTtcbiAgICAgIHN3aXBlci52aXJ0dWFsU2l6ZSArPSBzaXplO1xuICAgIH1cbiAgfVxuICBpZiAoc25hcEdyaWQubGVuZ3RoID09PSAwKSBzbmFwR3JpZCA9IFswXTtcbiAgaWYgKHNwYWNlQmV0d2VlbiAhPT0gMCkge1xuICAgIGNvbnN0IGtleSA9IHN3aXBlci5pc0hvcml6b250YWwoKSAmJiBydGwgPyAnbWFyZ2luTGVmdCcgOiBzd2lwZXIuZ2V0RGlyZWN0aW9uTGFiZWwoJ21hcmdpblJpZ2h0Jyk7XG4gICAgc2xpZGVzLmZpbHRlcigoXywgc2xpZGVJbmRleCkgPT4ge1xuICAgICAgaWYgKCFwYXJhbXMuY3NzTW9kZSB8fCBwYXJhbXMubG9vcCkgcmV0dXJuIHRydWU7XG4gICAgICBpZiAoc2xpZGVJbmRleCA9PT0gc2xpZGVzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSkuZm9yRWFjaChzbGlkZUVsID0+IHtcbiAgICAgIHNsaWRlRWwuc3R5bGVba2V5XSA9IGAke3NwYWNlQmV0d2Vlbn1weGA7XG4gICAgfSk7XG4gIH1cbiAgaWYgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcyAmJiBwYXJhbXMuY2VudGVyZWRTbGlkZXNCb3VuZHMpIHtcbiAgICBsZXQgYWxsU2xpZGVzU2l6ZSA9IDA7XG4gICAgc2xpZGVzU2l6ZXNHcmlkLmZvckVhY2goc2xpZGVTaXplVmFsdWUgPT4ge1xuICAgICAgYWxsU2xpZGVzU2l6ZSArPSBzbGlkZVNpemVWYWx1ZSArIChzcGFjZUJldHdlZW4gfHwgMCk7XG4gICAgfSk7XG4gICAgYWxsU2xpZGVzU2l6ZSAtPSBzcGFjZUJldHdlZW47XG4gICAgY29uc3QgbWF4U25hcCA9IGFsbFNsaWRlc1NpemUgLSBzd2lwZXJTaXplO1xuICAgIHNuYXBHcmlkID0gc25hcEdyaWQubWFwKHNuYXAgPT4ge1xuICAgICAgaWYgKHNuYXAgPD0gMCkgcmV0dXJuIC1vZmZzZXRCZWZvcmU7XG4gICAgICBpZiAoc25hcCA+IG1heFNuYXApIHJldHVybiBtYXhTbmFwICsgb2Zmc2V0QWZ0ZXI7XG4gICAgICByZXR1cm4gc25hcDtcbiAgICB9KTtcbiAgfVxuICBpZiAocGFyYW1zLmNlbnRlckluc3VmZmljaWVudFNsaWRlcykge1xuICAgIGxldCBhbGxTbGlkZXNTaXplID0gMDtcbiAgICBzbGlkZXNTaXplc0dyaWQuZm9yRWFjaChzbGlkZVNpemVWYWx1ZSA9PiB7XG4gICAgICBhbGxTbGlkZXNTaXplICs9IHNsaWRlU2l6ZVZhbHVlICsgKHNwYWNlQmV0d2VlbiB8fCAwKTtcbiAgICB9KTtcbiAgICBhbGxTbGlkZXNTaXplIC09IHNwYWNlQmV0d2VlbjtcbiAgICBjb25zdCBvZmZzZXRTaXplID0gKHBhcmFtcy5zbGlkZXNPZmZzZXRCZWZvcmUgfHwgMCkgKyAocGFyYW1zLnNsaWRlc09mZnNldEFmdGVyIHx8IDApO1xuICAgIGlmIChhbGxTbGlkZXNTaXplICsgb2Zmc2V0U2l6ZSA8IHN3aXBlclNpemUpIHtcbiAgICAgIGNvbnN0IGFsbFNsaWRlc09mZnNldCA9IChzd2lwZXJTaXplIC0gYWxsU2xpZGVzU2l6ZSAtIG9mZnNldFNpemUpIC8gMjtcbiAgICAgIHNuYXBHcmlkLmZvckVhY2goKHNuYXAsIHNuYXBJbmRleCkgPT4ge1xuICAgICAgICBzbmFwR3JpZFtzbmFwSW5kZXhdID0gc25hcCAtIGFsbFNsaWRlc09mZnNldDtcbiAgICAgIH0pO1xuICAgICAgc2xpZGVzR3JpZC5mb3JFYWNoKChzbmFwLCBzbmFwSW5kZXgpID0+IHtcbiAgICAgICAgc2xpZGVzR3JpZFtzbmFwSW5kZXhdID0gc25hcCArIGFsbFNsaWRlc09mZnNldDtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBPYmplY3QuYXNzaWduKHN3aXBlciwge1xuICAgIHNsaWRlcyxcbiAgICBzbmFwR3JpZCxcbiAgICBzbGlkZXNHcmlkLFxuICAgIHNsaWRlc1NpemVzR3JpZFxuICB9KTtcbiAgaWYgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcyAmJiBwYXJhbXMuY3NzTW9kZSAmJiAhcGFyYW1zLmNlbnRlcmVkU2xpZGVzQm91bmRzKSB7XG4gICAgc2V0Q1NTUHJvcGVydHkod3JhcHBlckVsLCAnLS1zd2lwZXItY2VudGVyZWQtb2Zmc2V0LWJlZm9yZScsIGAkey1zbmFwR3JpZFswXX1weGApO1xuICAgIHNldENTU1Byb3BlcnR5KHdyYXBwZXJFbCwgJy0tc3dpcGVyLWNlbnRlcmVkLW9mZnNldC1hZnRlcicsIGAke3N3aXBlci5zaXplIC8gMiAtIHNsaWRlc1NpemVzR3JpZFtzbGlkZXNTaXplc0dyaWQubGVuZ3RoIC0gMV0gLyAyfXB4YCk7XG4gICAgY29uc3QgYWRkVG9TbmFwR3JpZCA9IC1zd2lwZXIuc25hcEdyaWRbMF07XG4gICAgY29uc3QgYWRkVG9TbGlkZXNHcmlkID0gLXN3aXBlci5zbGlkZXNHcmlkWzBdO1xuICAgIHN3aXBlci5zbmFwR3JpZCA9IHN3aXBlci5zbmFwR3JpZC5tYXAodiA9PiB2ICsgYWRkVG9TbmFwR3JpZCk7XG4gICAgc3dpcGVyLnNsaWRlc0dyaWQgPSBzd2lwZXIuc2xpZGVzR3JpZC5tYXAodiA9PiB2ICsgYWRkVG9TbGlkZXNHcmlkKTtcbiAgfVxuICBpZiAoc2xpZGVzTGVuZ3RoICE9PSBwcmV2aW91c1NsaWRlc0xlbmd0aCkge1xuICAgIHN3aXBlci5lbWl0KCdzbGlkZXNMZW5ndGhDaGFuZ2UnKTtcbiAgfVxuICBpZiAoc25hcEdyaWQubGVuZ3RoICE9PSBwcmV2aW91c1NuYXBHcmlkTGVuZ3RoKSB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdykgc3dpcGVyLmNoZWNrT3ZlcmZsb3coKTtcbiAgICBzd2lwZXIuZW1pdCgnc25hcEdyaWRMZW5ndGhDaGFuZ2UnKTtcbiAgfVxuICBpZiAoc2xpZGVzR3JpZC5sZW5ndGggIT09IHByZXZpb3VzU2xpZGVzR3JpZExlbmd0aCkge1xuICAgIHN3aXBlci5lbWl0KCdzbGlkZXNHcmlkTGVuZ3RoQ2hhbmdlJyk7XG4gIH1cbiAgaWYgKHBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzKSB7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc09mZnNldCgpO1xuICB9XG4gIHN3aXBlci5lbWl0KCdzbGlkZXNVcGRhdGVkJyk7XG4gIGlmICghaXNWaXJ0dWFsICYmICFwYXJhbXMuY3NzTW9kZSAmJiAocGFyYW1zLmVmZmVjdCA9PT0gJ3NsaWRlJyB8fCBwYXJhbXMuZWZmZWN0ID09PSAnZmFkZScpKSB7XG4gICAgY29uc3QgYmFja0ZhY2VIaWRkZW5DbGFzcyA9IGAke3BhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfWJhY2tmYWNlLWhpZGRlbmA7XG4gICAgY29uc3QgaGFzQ2xhc3NCYWNrZmFjZUNsYXNzQWRkZWQgPSBzd2lwZXIuZWwuY2xhc3NMaXN0LmNvbnRhaW5zKGJhY2tGYWNlSGlkZGVuQ2xhc3MpO1xuICAgIGlmIChzbGlkZXNMZW5ndGggPD0gcGFyYW1zLm1heEJhY2tmYWNlSGlkZGVuU2xpZGVzKSB7XG4gICAgICBpZiAoIWhhc0NsYXNzQmFja2ZhY2VDbGFzc0FkZGVkKSBzd2lwZXIuZWwuY2xhc3NMaXN0LmFkZChiYWNrRmFjZUhpZGRlbkNsYXNzKTtcbiAgICB9IGVsc2UgaWYgKGhhc0NsYXNzQmFja2ZhY2VDbGFzc0FkZGVkKSB7XG4gICAgICBzd2lwZXIuZWwuY2xhc3NMaXN0LnJlbW92ZShiYWNrRmFjZUhpZGRlbkNsYXNzKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlQXV0b0hlaWdodChzcGVlZCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBhY3RpdmVTbGlkZXMgPSBbXTtcbiAgY29uc3QgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG4gIGxldCBuZXdIZWlnaHQgPSAwO1xuICBsZXQgaTtcbiAgaWYgKHR5cGVvZiBzcGVlZCA9PT0gJ251bWJlcicpIHtcbiAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihzcGVlZCk7XG4gIH0gZWxzZSBpZiAoc3BlZWQgPT09IHRydWUpIHtcbiAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihzd2lwZXIucGFyYW1zLnNwZWVkKTtcbiAgfVxuICBjb25zdCBnZXRTbGlkZUJ5SW5kZXggPSBpbmRleCA9PiB7XG4gICAgaWYgKGlzVmlydHVhbCkge1xuICAgICAgcmV0dXJuIHN3aXBlci5zbGlkZXNbc3dpcGVyLmdldFNsaWRlSW5kZXhCeURhdGEoaW5kZXgpXTtcbiAgICB9XG4gICAgcmV0dXJuIHN3aXBlci5zbGlkZXNbaW5kZXhdO1xuICB9O1xuICAvLyBGaW5kIHNsaWRlcyBjdXJyZW50bHkgaW4gdmlld1xuICBpZiAoc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ICE9PSAnYXV0bycgJiYgc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ID4gMSkge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICAoc3dpcGVyLnZpc2libGVTbGlkZXMgfHwgW10pLmZvckVhY2goc2xpZGUgPT4ge1xuICAgICAgICBhY3RpdmVTbGlkZXMucHVzaChzbGlkZSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChpID0gMDsgaSA8IE1hdGguY2VpbChzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcpOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXggKyBpO1xuICAgICAgICBpZiAoaW5kZXggPiBzd2lwZXIuc2xpZGVzLmxlbmd0aCAmJiAhaXNWaXJ0dWFsKSBicmVhaztcbiAgICAgICAgYWN0aXZlU2xpZGVzLnB1c2goZ2V0U2xpZGVCeUluZGV4KGluZGV4KSk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGFjdGl2ZVNsaWRlcy5wdXNoKGdldFNsaWRlQnlJbmRleChzd2lwZXIuYWN0aXZlSW5kZXgpKTtcbiAgfVxuXG4gIC8vIEZpbmQgbmV3IGhlaWdodCBmcm9tIGhpZ2hlc3Qgc2xpZGUgaW4gdmlld1xuICBmb3IgKGkgPSAwOyBpIDwgYWN0aXZlU2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKHR5cGVvZiBhY3RpdmVTbGlkZXNbaV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25zdCBoZWlnaHQgPSBhY3RpdmVTbGlkZXNbaV0ub2Zmc2V0SGVpZ2h0O1xuICAgICAgbmV3SGVpZ2h0ID0gaGVpZ2h0ID4gbmV3SGVpZ2h0ID8gaGVpZ2h0IDogbmV3SGVpZ2h0O1xuICAgIH1cbiAgfVxuXG4gIC8vIFVwZGF0ZSBIZWlnaHRcbiAgaWYgKG5ld0hlaWdodCB8fCBuZXdIZWlnaHQgPT09IDApIHN3aXBlci53cmFwcGVyRWwuc3R5bGUuaGVpZ2h0ID0gYCR7bmV3SGVpZ2h0fXB4YDtcbn1cblxuZnVuY3Rpb24gdXBkYXRlU2xpZGVzT2Zmc2V0KCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgY29uc3QgbWludXNPZmZzZXQgPSBzd2lwZXIuaXNFbGVtZW50ID8gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gc3dpcGVyLndyYXBwZXJFbC5vZmZzZXRMZWZ0IDogc3dpcGVyLndyYXBwZXJFbC5vZmZzZXRUb3AgOiAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHNsaWRlc1tpXS5zd2lwZXJTbGlkZU9mZnNldCA9IChzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBzbGlkZXNbaV0ub2Zmc2V0TGVmdCA6IHNsaWRlc1tpXS5vZmZzZXRUb3ApIC0gbWludXNPZmZzZXQgLSBzd2lwZXIuY3NzT3ZlcmZsb3dBZGp1c3RtZW50KCk7XG4gIH1cbn1cblxuY29uc3QgdG9nZ2xlU2xpZGVDbGFzc2VzJDEgPSAoc2xpZGVFbCwgY29uZGl0aW9uLCBjbGFzc05hbWUpID0+IHtcbiAgaWYgKGNvbmRpdGlvbiAmJiAhc2xpZGVFbC5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKSkge1xuICAgIHNsaWRlRWwuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO1xuICB9IGVsc2UgaWYgKCFjb25kaXRpb24gJiYgc2xpZGVFbC5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKSkge1xuICAgIHNsaWRlRWwuY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpO1xuICB9XG59O1xuZnVuY3Rpb24gdXBkYXRlU2xpZGVzUHJvZ3Jlc3ModHJhbnNsYXRlKSB7XG4gIGlmICh0cmFuc2xhdGUgPT09IHZvaWQgMCkge1xuICAgIHRyYW5zbGF0ZSA9IHRoaXMgJiYgdGhpcy50cmFuc2xhdGUgfHwgMDtcbiAgfVxuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICBjb25zdCB7XG4gICAgc2xpZGVzLFxuICAgIHJ0bFRyYW5zbGF0ZTogcnRsLFxuICAgIHNuYXBHcmlkXG4gIH0gPSBzd2lwZXI7XG4gIGlmIChzbGlkZXMubGVuZ3RoID09PSAwKSByZXR1cm47XG4gIGlmICh0eXBlb2Ygc2xpZGVzWzBdLnN3aXBlclNsaWRlT2Zmc2V0ID09PSAndW5kZWZpbmVkJykgc3dpcGVyLnVwZGF0ZVNsaWRlc09mZnNldCgpO1xuICBsZXQgb2Zmc2V0Q2VudGVyID0gLXRyYW5zbGF0ZTtcbiAgaWYgKHJ0bCkgb2Zmc2V0Q2VudGVyID0gdHJhbnNsYXRlO1xuICBzd2lwZXIudmlzaWJsZVNsaWRlc0luZGV4ZXMgPSBbXTtcbiAgc3dpcGVyLnZpc2libGVTbGlkZXMgPSBbXTtcbiAgbGV0IHNwYWNlQmV0d2VlbiA9IHBhcmFtcy5zcGFjZUJldHdlZW47XG4gIGlmICh0eXBlb2Ygc3BhY2VCZXR3ZWVuID09PSAnc3RyaW5nJyAmJiBzcGFjZUJldHdlZW4uaW5kZXhPZignJScpID49IDApIHtcbiAgICBzcGFjZUJldHdlZW4gPSBwYXJzZUZsb2F0KHNwYWNlQmV0d2Vlbi5yZXBsYWNlKCclJywgJycpKSAvIDEwMCAqIHN3aXBlci5zaXplO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBzcGFjZUJldHdlZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgc3BhY2VCZXR3ZWVuID0gcGFyc2VGbG9hdChzcGFjZUJldHdlZW4pO1xuICB9XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgY29uc3Qgc2xpZGUgPSBzbGlkZXNbaV07XG4gICAgbGV0IHNsaWRlT2Zmc2V0ID0gc2xpZGUuc3dpcGVyU2xpZGVPZmZzZXQ7XG4gICAgaWYgKHBhcmFtcy5jc3NNb2RlICYmIHBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgc2xpZGVPZmZzZXQgLT0gc2xpZGVzWzBdLnN3aXBlclNsaWRlT2Zmc2V0O1xuICAgIH1cbiAgICBjb25zdCBzbGlkZVByb2dyZXNzID0gKG9mZnNldENlbnRlciArIChwYXJhbXMuY2VudGVyZWRTbGlkZXMgPyBzd2lwZXIubWluVHJhbnNsYXRlKCkgOiAwKSAtIHNsaWRlT2Zmc2V0KSAvIChzbGlkZS5zd2lwZXJTbGlkZVNpemUgKyBzcGFjZUJldHdlZW4pO1xuICAgIGNvbnN0IG9yaWdpbmFsU2xpZGVQcm9ncmVzcyA9IChvZmZzZXRDZW50ZXIgLSBzbmFwR3JpZFswXSArIChwYXJhbXMuY2VudGVyZWRTbGlkZXMgPyBzd2lwZXIubWluVHJhbnNsYXRlKCkgOiAwKSAtIHNsaWRlT2Zmc2V0KSAvIChzbGlkZS5zd2lwZXJTbGlkZVNpemUgKyBzcGFjZUJldHdlZW4pO1xuICAgIGNvbnN0IHNsaWRlQmVmb3JlID0gLShvZmZzZXRDZW50ZXIgLSBzbGlkZU9mZnNldCk7XG4gICAgY29uc3Qgc2xpZGVBZnRlciA9IHNsaWRlQmVmb3JlICsgc3dpcGVyLnNsaWRlc1NpemVzR3JpZFtpXTtcbiAgICBjb25zdCBpc0Z1bGx5VmlzaWJsZSA9IHNsaWRlQmVmb3JlID49IDAgJiYgc2xpZGVCZWZvcmUgPD0gc3dpcGVyLnNpemUgLSBzd2lwZXIuc2xpZGVzU2l6ZXNHcmlkW2ldO1xuICAgIGNvbnN0IGlzVmlzaWJsZSA9IHNsaWRlQmVmb3JlID49IDAgJiYgc2xpZGVCZWZvcmUgPCBzd2lwZXIuc2l6ZSAtIDEgfHwgc2xpZGVBZnRlciA+IDEgJiYgc2xpZGVBZnRlciA8PSBzd2lwZXIuc2l6ZSB8fCBzbGlkZUJlZm9yZSA8PSAwICYmIHNsaWRlQWZ0ZXIgPj0gc3dpcGVyLnNpemU7XG4gICAgaWYgKGlzVmlzaWJsZSkge1xuICAgICAgc3dpcGVyLnZpc2libGVTbGlkZXMucHVzaChzbGlkZSk7XG4gICAgICBzd2lwZXIudmlzaWJsZVNsaWRlc0luZGV4ZXMucHVzaChpKTtcbiAgICB9XG4gICAgdG9nZ2xlU2xpZGVDbGFzc2VzJDEoc2xpZGUsIGlzVmlzaWJsZSwgcGFyYW1zLnNsaWRlVmlzaWJsZUNsYXNzKTtcbiAgICB0b2dnbGVTbGlkZUNsYXNzZXMkMShzbGlkZSwgaXNGdWxseVZpc2libGUsIHBhcmFtcy5zbGlkZUZ1bGx5VmlzaWJsZUNsYXNzKTtcbiAgICBzbGlkZS5wcm9ncmVzcyA9IHJ0bCA/IC1zbGlkZVByb2dyZXNzIDogc2xpZGVQcm9ncmVzcztcbiAgICBzbGlkZS5vcmlnaW5hbFByb2dyZXNzID0gcnRsID8gLW9yaWdpbmFsU2xpZGVQcm9ncmVzcyA6IG9yaWdpbmFsU2xpZGVQcm9ncmVzcztcbiAgfVxufVxuXG5mdW5jdGlvbiB1cGRhdGVQcm9ncmVzcyh0cmFuc2xhdGUpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgaWYgKHR5cGVvZiB0cmFuc2xhdGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgY29uc3QgbXVsdGlwbGllciA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyAtMSA6IDE7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgdHJhbnNsYXRlID0gc3dpcGVyICYmIHN3aXBlci50cmFuc2xhdGUgJiYgc3dpcGVyLnRyYW5zbGF0ZSAqIG11bHRpcGxpZXIgfHwgMDtcbiAgfVxuICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICBjb25zdCB0cmFuc2xhdGVzRGlmZiA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKTtcbiAgbGV0IHtcbiAgICBwcm9ncmVzcyxcbiAgICBpc0JlZ2lubmluZyxcbiAgICBpc0VuZCxcbiAgICBwcm9ncmVzc0xvb3BcbiAgfSA9IHN3aXBlcjtcbiAgY29uc3Qgd2FzQmVnaW5uaW5nID0gaXNCZWdpbm5pbmc7XG4gIGNvbnN0IHdhc0VuZCA9IGlzRW5kO1xuICBpZiAodHJhbnNsYXRlc0RpZmYgPT09IDApIHtcbiAgICBwcm9ncmVzcyA9IDA7XG4gICAgaXNCZWdpbm5pbmcgPSB0cnVlO1xuICAgIGlzRW5kID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICBwcm9ncmVzcyA9ICh0cmFuc2xhdGUgLSBzd2lwZXIubWluVHJhbnNsYXRlKCkpIC8gdHJhbnNsYXRlc0RpZmY7XG4gICAgY29uc3QgaXNCZWdpbm5pbmdSb3VuZGVkID0gTWF0aC5hYnModHJhbnNsYXRlIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSA8IDE7XG4gICAgY29uc3QgaXNFbmRSb3VuZGVkID0gTWF0aC5hYnModHJhbnNsYXRlIC0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpKSA8IDE7XG4gICAgaXNCZWdpbm5pbmcgPSBpc0JlZ2lubmluZ1JvdW5kZWQgfHwgcHJvZ3Jlc3MgPD0gMDtcbiAgICBpc0VuZCA9IGlzRW5kUm91bmRlZCB8fCBwcm9ncmVzcyA+PSAxO1xuICAgIGlmIChpc0JlZ2lubmluZ1JvdW5kZWQpIHByb2dyZXNzID0gMDtcbiAgICBpZiAoaXNFbmRSb3VuZGVkKSBwcm9ncmVzcyA9IDE7XG4gIH1cbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgY29uc3QgZmlyc3RTbGlkZUluZGV4ID0gc3dpcGVyLmdldFNsaWRlSW5kZXhCeURhdGEoMCk7XG4gICAgY29uc3QgbGFzdFNsaWRlSW5kZXggPSBzd2lwZXIuZ2V0U2xpZGVJbmRleEJ5RGF0YShzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIDEpO1xuICAgIGNvbnN0IGZpcnN0U2xpZGVUcmFuc2xhdGUgPSBzd2lwZXIuc2xpZGVzR3JpZFtmaXJzdFNsaWRlSW5kZXhdO1xuICAgIGNvbnN0IGxhc3RTbGlkZVRyYW5zbGF0ZSA9IHN3aXBlci5zbGlkZXNHcmlkW2xhc3RTbGlkZUluZGV4XTtcbiAgICBjb25zdCB0cmFuc2xhdGVNYXggPSBzd2lwZXIuc2xpZGVzR3JpZFtzd2lwZXIuc2xpZGVzR3JpZC5sZW5ndGggLSAxXTtcbiAgICBjb25zdCB0cmFuc2xhdGVBYnMgPSBNYXRoLmFicyh0cmFuc2xhdGUpO1xuICAgIGlmICh0cmFuc2xhdGVBYnMgPj0gZmlyc3RTbGlkZVRyYW5zbGF0ZSkge1xuICAgICAgcHJvZ3Jlc3NMb29wID0gKHRyYW5zbGF0ZUFicyAtIGZpcnN0U2xpZGVUcmFuc2xhdGUpIC8gdHJhbnNsYXRlTWF4O1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9ncmVzc0xvb3AgPSAodHJhbnNsYXRlQWJzICsgdHJhbnNsYXRlTWF4IC0gbGFzdFNsaWRlVHJhbnNsYXRlKSAvIHRyYW5zbGF0ZU1heDtcbiAgICB9XG4gICAgaWYgKHByb2dyZXNzTG9vcCA+IDEpIHByb2dyZXNzTG9vcCAtPSAxO1xuICB9XG4gIE9iamVjdC5hc3NpZ24oc3dpcGVyLCB7XG4gICAgcHJvZ3Jlc3MsXG4gICAgcHJvZ3Jlc3NMb29wLFxuICAgIGlzQmVnaW5uaW5nLFxuICAgIGlzRW5kXG4gIH0pO1xuICBpZiAocGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MgfHwgcGFyYW1zLmNlbnRlcmVkU2xpZGVzICYmIHBhcmFtcy5hdXRvSGVpZ2h0KSBzd2lwZXIudXBkYXRlU2xpZGVzUHJvZ3Jlc3ModHJhbnNsYXRlKTtcbiAgaWYgKGlzQmVnaW5uaW5nICYmICF3YXNCZWdpbm5pbmcpIHtcbiAgICBzd2lwZXIuZW1pdCgncmVhY2hCZWdpbm5pbmcgdG9FZGdlJyk7XG4gIH1cbiAgaWYgKGlzRW5kICYmICF3YXNFbmQpIHtcbiAgICBzd2lwZXIuZW1pdCgncmVhY2hFbmQgdG9FZGdlJyk7XG4gIH1cbiAgaWYgKHdhc0JlZ2lubmluZyAmJiAhaXNCZWdpbm5pbmcgfHwgd2FzRW5kICYmICFpc0VuZCkge1xuICAgIHN3aXBlci5lbWl0KCdmcm9tRWRnZScpO1xuICB9XG4gIHN3aXBlci5lbWl0KCdwcm9ncmVzcycsIHByb2dyZXNzKTtcbn1cblxuY29uc3QgdG9nZ2xlU2xpZGVDbGFzc2VzID0gKHNsaWRlRWwsIGNvbmRpdGlvbiwgY2xhc3NOYW1lKSA9PiB7XG4gIGlmIChjb25kaXRpb24gJiYgIXNsaWRlRWwuY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzTmFtZSkpIHtcbiAgICBzbGlkZUVsLmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtcbiAgfSBlbHNlIGlmICghY29uZGl0aW9uICYmIHNsaWRlRWwuY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzTmFtZSkpIHtcbiAgICBzbGlkZUVsLmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTtcbiAgfVxufTtcbmZ1bmN0aW9uIHVwZGF0ZVNsaWRlc0NsYXNzZXMoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBzbGlkZXMsXG4gICAgcGFyYW1zLFxuICAgIHNsaWRlc0VsLFxuICAgIGFjdGl2ZUluZGV4XG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IGlzVmlydHVhbCA9IHN3aXBlci52aXJ0dWFsICYmIHBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG4gIGNvbnN0IGdyaWRFbmFibGVkID0gc3dpcGVyLmdyaWQgJiYgcGFyYW1zLmdyaWQgJiYgcGFyYW1zLmdyaWQucm93cyA+IDE7XG4gIGNvbnN0IGdldEZpbHRlcmVkU2xpZGUgPSBzZWxlY3RvciA9PiB7XG4gICAgcmV0dXJuIGVsZW1lbnRDaGlsZHJlbihzbGlkZXNFbCwgYC4ke3BhcmFtcy5zbGlkZUNsYXNzfSR7c2VsZWN0b3J9LCBzd2lwZXItc2xpZGUke3NlbGVjdG9yfWApWzBdO1xuICB9O1xuICBsZXQgYWN0aXZlU2xpZGU7XG4gIGxldCBwcmV2U2xpZGU7XG4gIGxldCBuZXh0U2xpZGU7XG4gIGlmIChpc1ZpcnR1YWwpIHtcbiAgICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICAgIGxldCBzbGlkZUluZGV4ID0gYWN0aXZlSW5kZXggLSBzd2lwZXIudmlydHVhbC5zbGlkZXNCZWZvcmU7XG4gICAgICBpZiAoc2xpZGVJbmRleCA8IDApIHNsaWRlSW5kZXggPSBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoICsgc2xpZGVJbmRleDtcbiAgICAgIGlmIChzbGlkZUluZGV4ID49IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGgpIHNsaWRlSW5kZXggLT0gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aDtcbiAgICAgIGFjdGl2ZVNsaWRlID0gZ2V0RmlsdGVyZWRTbGlkZShgW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHtzbGlkZUluZGV4fVwiXWApO1xuICAgIH0gZWxzZSB7XG4gICAgICBhY3RpdmVTbGlkZSA9IGdldEZpbHRlcmVkU2xpZGUoYFtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7YWN0aXZlSW5kZXh9XCJdYCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChncmlkRW5hYmxlZCkge1xuICAgICAgYWN0aXZlU2xpZGUgPSBzbGlkZXMuZmlsdGVyKHNsaWRlRWwgPT4gc2xpZGVFbC5jb2x1bW4gPT09IGFjdGl2ZUluZGV4KVswXTtcbiAgICAgIG5leHRTbGlkZSA9IHNsaWRlcy5maWx0ZXIoc2xpZGVFbCA9PiBzbGlkZUVsLmNvbHVtbiA9PT0gYWN0aXZlSW5kZXggKyAxKVswXTtcbiAgICAgIHByZXZTbGlkZSA9IHNsaWRlcy5maWx0ZXIoc2xpZGVFbCA9PiBzbGlkZUVsLmNvbHVtbiA9PT0gYWN0aXZlSW5kZXggLSAxKVswXTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWN0aXZlU2xpZGUgPSBzbGlkZXNbYWN0aXZlSW5kZXhdO1xuICAgIH1cbiAgfVxuICBpZiAoYWN0aXZlU2xpZGUpIHtcbiAgICBpZiAoIWdyaWRFbmFibGVkKSB7XG4gICAgICAvLyBOZXh0IFNsaWRlXG4gICAgICBuZXh0U2xpZGUgPSBlbGVtZW50TmV4dEFsbChhY3RpdmVTbGlkZSwgYC4ke3BhcmFtcy5zbGlkZUNsYXNzfSwgc3dpcGVyLXNsaWRlYClbMF07XG4gICAgICBpZiAocGFyYW1zLmxvb3AgJiYgIW5leHRTbGlkZSkge1xuICAgICAgICBuZXh0U2xpZGUgPSBzbGlkZXNbMF07XG4gICAgICB9XG5cbiAgICAgIC8vIFByZXYgU2xpZGVcbiAgICAgIHByZXZTbGlkZSA9IGVsZW1lbnRQcmV2QWxsKGFjdGl2ZVNsaWRlLCBgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKVswXTtcbiAgICAgIGlmIChwYXJhbXMubG9vcCAmJiAhcHJldlNsaWRlID09PSAwKSB7XG4gICAgICAgIHByZXZTbGlkZSA9IHNsaWRlc1tzbGlkZXMubGVuZ3RoIC0gMV07XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHNsaWRlcy5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgIHRvZ2dsZVNsaWRlQ2xhc3NlcyhzbGlkZUVsLCBzbGlkZUVsID09PSBhY3RpdmVTbGlkZSwgcGFyYW1zLnNsaWRlQWN0aXZlQ2xhc3MpO1xuICAgIHRvZ2dsZVNsaWRlQ2xhc3NlcyhzbGlkZUVsLCBzbGlkZUVsID09PSBuZXh0U2xpZGUsIHBhcmFtcy5zbGlkZU5leHRDbGFzcyk7XG4gICAgdG9nZ2xlU2xpZGVDbGFzc2VzKHNsaWRlRWwsIHNsaWRlRWwgPT09IHByZXZTbGlkZSwgcGFyYW1zLnNsaWRlUHJldkNsYXNzKTtcbiAgfSk7XG4gIHN3aXBlci5lbWl0U2xpZGVzQ2xhc3NlcygpO1xufVxuXG5jb25zdCBwcm9jZXNzTGF6eVByZWxvYWRlciA9IChzd2lwZXIsIGltYWdlRWwpID0+IHtcbiAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLnBhcmFtcykgcmV0dXJuO1xuICBjb25zdCBzbGlkZVNlbGVjdG9yID0gKCkgPT4gc3dpcGVyLmlzRWxlbWVudCA/IGBzd2lwZXItc2xpZGVgIDogYC4ke3N3aXBlci5wYXJhbXMuc2xpZGVDbGFzc31gO1xuICBjb25zdCBzbGlkZUVsID0gaW1hZ2VFbC5jbG9zZXN0KHNsaWRlU2VsZWN0b3IoKSk7XG4gIGlmIChzbGlkZUVsKSB7XG4gICAgbGV0IGxhenlFbCA9IHNsaWRlRWwucXVlcnlTZWxlY3RvcihgLiR7c3dpcGVyLnBhcmFtcy5sYXp5UHJlbG9hZGVyQ2xhc3N9YCk7XG4gICAgaWYgKCFsYXp5RWwgJiYgc3dpcGVyLmlzRWxlbWVudCkge1xuICAgICAgaWYgKHNsaWRlRWwuc2hhZG93Um9vdCkge1xuICAgICAgICBsYXp5RWwgPSBzbGlkZUVsLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcihgLiR7c3dpcGVyLnBhcmFtcy5sYXp5UHJlbG9hZGVyQ2xhc3N9YCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBpbml0IGxhdGVyXG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgaWYgKHNsaWRlRWwuc2hhZG93Um9vdCkge1xuICAgICAgICAgICAgbGF6eUVsID0gc2xpZGVFbC5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoYC4ke3N3aXBlci5wYXJhbXMubGF6eVByZWxvYWRlckNsYXNzfWApO1xuICAgICAgICAgICAgaWYgKGxhenlFbCkgbGF6eUVsLnJlbW92ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChsYXp5RWwpIGxhenlFbC5yZW1vdmUoKTtcbiAgfVxufTtcbmNvbnN0IHVubGF6eSA9IChzd2lwZXIsIGluZGV4KSA9PiB7XG4gIGlmICghc3dpcGVyLnNsaWRlc1tpbmRleF0pIHJldHVybjtcbiAgY29uc3QgaW1hZ2VFbCA9IHN3aXBlci5zbGlkZXNbaW5kZXhdLnF1ZXJ5U2VsZWN0b3IoJ1tsb2FkaW5nPVwibGF6eVwiXScpO1xuICBpZiAoaW1hZ2VFbCkgaW1hZ2VFbC5yZW1vdmVBdHRyaWJ1dGUoJ2xvYWRpbmcnKTtcbn07XG5jb25zdCBwcmVsb2FkID0gc3dpcGVyID0+IHtcbiAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLnBhcmFtcykgcmV0dXJuO1xuICBsZXQgYW1vdW50ID0gc3dpcGVyLnBhcmFtcy5sYXp5UHJlbG9hZFByZXZOZXh0O1xuICBjb25zdCBsZW4gPSBzd2lwZXIuc2xpZGVzLmxlbmd0aDtcbiAgaWYgKCFsZW4gfHwgIWFtb3VudCB8fCBhbW91bnQgPCAwKSByZXR1cm47XG4gIGFtb3VudCA9IE1hdGgubWluKGFtb3VudCwgbGVuKTtcbiAgY29uc3Qgc2xpZGVzUGVyVmlldyA9IHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nID8gc3dpcGVyLnNsaWRlc1BlclZpZXdEeW5hbWljKCkgOiBNYXRoLmNlaWwoc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3KTtcbiAgY29uc3QgYWN0aXZlSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG4gIGlmIChzd2lwZXIucGFyYW1zLmdyaWQgJiYgc3dpcGVyLnBhcmFtcy5ncmlkLnJvd3MgPiAxKSB7XG4gICAgY29uc3QgYWN0aXZlQ29sdW1uID0gYWN0aXZlSW5kZXg7XG4gICAgY29uc3QgcHJlbG9hZENvbHVtbnMgPSBbYWN0aXZlQ29sdW1uIC0gYW1vdW50XTtcbiAgICBwcmVsb2FkQ29sdW1ucy5wdXNoKC4uLkFycmF5LmZyb20oe1xuICAgICAgbGVuZ3RoOiBhbW91bnRcbiAgICB9KS5tYXAoKF8sIGkpID0+IHtcbiAgICAgIHJldHVybiBhY3RpdmVDb2x1bW4gKyBzbGlkZXNQZXJWaWV3ICsgaTtcbiAgICB9KSk7XG4gICAgc3dpcGVyLnNsaWRlcy5mb3JFYWNoKChzbGlkZUVsLCBpKSA9PiB7XG4gICAgICBpZiAocHJlbG9hZENvbHVtbnMuaW5jbHVkZXMoc2xpZGVFbC5jb2x1bW4pKSB1bmxhenkoc3dpcGVyLCBpKTtcbiAgICB9KTtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3Qgc2xpZGVJbmRleExhc3RJblZpZXcgPSBhY3RpdmVJbmRleCArIHNsaWRlc1BlclZpZXcgLSAxO1xuICBpZiAoc3dpcGVyLnBhcmFtcy5yZXdpbmQgfHwgc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgZm9yIChsZXQgaSA9IGFjdGl2ZUluZGV4IC0gYW1vdW50OyBpIDw9IHNsaWRlSW5kZXhMYXN0SW5WaWV3ICsgYW1vdW50OyBpICs9IDEpIHtcbiAgICAgIGNvbnN0IHJlYWxJbmRleCA9IChpICUgbGVuICsgbGVuKSAlIGxlbjtcbiAgICAgIGlmIChyZWFsSW5kZXggPCBhY3RpdmVJbmRleCB8fCByZWFsSW5kZXggPiBzbGlkZUluZGV4TGFzdEluVmlldykgdW5sYXp5KHN3aXBlciwgcmVhbEluZGV4KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZm9yIChsZXQgaSA9IE1hdGgubWF4KGFjdGl2ZUluZGV4IC0gYW1vdW50LCAwKTsgaSA8PSBNYXRoLm1pbihzbGlkZUluZGV4TGFzdEluVmlldyArIGFtb3VudCwgbGVuIC0gMSk7IGkgKz0gMSkge1xuICAgICAgaWYgKGkgIT09IGFjdGl2ZUluZGV4ICYmIChpID4gc2xpZGVJbmRleExhc3RJblZpZXcgfHwgaSA8IGFjdGl2ZUluZGV4KSkge1xuICAgICAgICB1bmxhenkoc3dpcGVyLCBpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGdldEFjdGl2ZUluZGV4QnlUcmFuc2xhdGUoc3dpcGVyKSB7XG4gIGNvbnN0IHtcbiAgICBzbGlkZXNHcmlkLFxuICAgIHBhcmFtc1xuICB9ID0gc3dpcGVyO1xuICBjb25zdCB0cmFuc2xhdGUgPSBzd2lwZXIucnRsVHJhbnNsYXRlID8gc3dpcGVyLnRyYW5zbGF0ZSA6IC1zd2lwZXIudHJhbnNsYXRlO1xuICBsZXQgYWN0aXZlSW5kZXg7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzR3JpZC5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmICh0eXBlb2Ygc2xpZGVzR3JpZFtpICsgMV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBpZiAodHJhbnNsYXRlID49IHNsaWRlc0dyaWRbaV0gJiYgdHJhbnNsYXRlIDwgc2xpZGVzR3JpZFtpICsgMV0gLSAoc2xpZGVzR3JpZFtpICsgMV0gLSBzbGlkZXNHcmlkW2ldKSAvIDIpIHtcbiAgICAgICAgYWN0aXZlSW5kZXggPSBpO1xuICAgICAgfSBlbHNlIGlmICh0cmFuc2xhdGUgPj0gc2xpZGVzR3JpZFtpXSAmJiB0cmFuc2xhdGUgPCBzbGlkZXNHcmlkW2kgKyAxXSkge1xuICAgICAgICBhY3RpdmVJbmRleCA9IGkgKyAxO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHJhbnNsYXRlID49IHNsaWRlc0dyaWRbaV0pIHtcbiAgICAgIGFjdGl2ZUluZGV4ID0gaTtcbiAgICB9XG4gIH1cbiAgLy8gTm9ybWFsaXplIHNsaWRlSW5kZXhcbiAgaWYgKHBhcmFtcy5ub3JtYWxpemVTbGlkZUluZGV4KSB7XG4gICAgaWYgKGFjdGl2ZUluZGV4IDwgMCB8fCB0eXBlb2YgYWN0aXZlSW5kZXggPT09ICd1bmRlZmluZWQnKSBhY3RpdmVJbmRleCA9IDA7XG4gIH1cbiAgcmV0dXJuIGFjdGl2ZUluZGV4O1xufVxuZnVuY3Rpb24gdXBkYXRlQWN0aXZlSW5kZXgobmV3QWN0aXZlSW5kZXgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgdHJhbnNsYXRlID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZSA/IHN3aXBlci50cmFuc2xhdGUgOiAtc3dpcGVyLnRyYW5zbGF0ZTtcbiAgY29uc3Qge1xuICAgIHNuYXBHcmlkLFxuICAgIHBhcmFtcyxcbiAgICBhY3RpdmVJbmRleDogcHJldmlvdXNJbmRleCxcbiAgICByZWFsSW5kZXg6IHByZXZpb3VzUmVhbEluZGV4LFxuICAgIHNuYXBJbmRleDogcHJldmlvdXNTbmFwSW5kZXhcbiAgfSA9IHN3aXBlcjtcbiAgbGV0IGFjdGl2ZUluZGV4ID0gbmV3QWN0aXZlSW5kZXg7XG4gIGxldCBzbmFwSW5kZXg7XG4gIGNvbnN0IGdldFZpcnR1YWxSZWFsSW5kZXggPSBhSW5kZXggPT4ge1xuICAgIGxldCByZWFsSW5kZXggPSBhSW5kZXggLSBzd2lwZXIudmlydHVhbC5zbGlkZXNCZWZvcmU7XG4gICAgaWYgKHJlYWxJbmRleCA8IDApIHtcbiAgICAgIHJlYWxJbmRleCA9IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggKyByZWFsSW5kZXg7XG4gICAgfVxuICAgIGlmIChyZWFsSW5kZXggPj0gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCkge1xuICAgICAgcmVhbEluZGV4IC09IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGg7XG4gICAgfVxuICAgIHJldHVybiByZWFsSW5kZXg7XG4gIH07XG4gIGlmICh0eXBlb2YgYWN0aXZlSW5kZXggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgYWN0aXZlSW5kZXggPSBnZXRBY3RpdmVJbmRleEJ5VHJhbnNsYXRlKHN3aXBlcik7XG4gIH1cbiAgaWYgKHNuYXBHcmlkLmluZGV4T2YodHJhbnNsYXRlKSA+PSAwKSB7XG4gICAgc25hcEluZGV4ID0gc25hcEdyaWQuaW5kZXhPZih0cmFuc2xhdGUpO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IHNraXAgPSBNYXRoLm1pbihwYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwLCBhY3RpdmVJbmRleCk7XG4gICAgc25hcEluZGV4ID0gc2tpcCArIE1hdGguZmxvb3IoKGFjdGl2ZUluZGV4IC0gc2tpcCkgLyBwYXJhbXMuc2xpZGVzUGVyR3JvdXApO1xuICB9XG4gIGlmIChzbmFwSW5kZXggPj0gc25hcEdyaWQubGVuZ3RoKSBzbmFwSW5kZXggPSBzbmFwR3JpZC5sZW5ndGggLSAxO1xuICBpZiAoYWN0aXZlSW5kZXggPT09IHByZXZpb3VzSW5kZXggJiYgIXN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgIGlmIChzbmFwSW5kZXggIT09IHByZXZpb3VzU25hcEluZGV4KSB7XG4gICAgICBzd2lwZXIuc25hcEluZGV4ID0gc25hcEluZGV4O1xuICAgICAgc3dpcGVyLmVtaXQoJ3NuYXBJbmRleENoYW5nZScpO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKGFjdGl2ZUluZGV4ID09PSBwcmV2aW91c0luZGV4ICYmIHN3aXBlci5wYXJhbXMubG9vcCAmJiBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCkge1xuICAgIHN3aXBlci5yZWFsSW5kZXggPSBnZXRWaXJ0dWFsUmVhbEluZGV4KGFjdGl2ZUluZGV4KTtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgZ3JpZEVuYWJsZWQgPSBzd2lwZXIuZ3JpZCAmJiBwYXJhbXMuZ3JpZCAmJiBwYXJhbXMuZ3JpZC5yb3dzID4gMTtcblxuICAvLyBHZXQgcmVhbCBpbmRleFxuICBsZXQgcmVhbEluZGV4O1xuICBpZiAoc3dpcGVyLnZpcnR1YWwgJiYgcGFyYW1zLnZpcnR1YWwuZW5hYmxlZCAmJiBwYXJhbXMubG9vcCkge1xuICAgIHJlYWxJbmRleCA9IGdldFZpcnR1YWxSZWFsSW5kZXgoYWN0aXZlSW5kZXgpO1xuICB9IGVsc2UgaWYgKGdyaWRFbmFibGVkKSB7XG4gICAgY29uc3QgZmlyc3RTbGlkZUluQ29sdW1uID0gc3dpcGVyLnNsaWRlcy5maWx0ZXIoc2xpZGVFbCA9PiBzbGlkZUVsLmNvbHVtbiA9PT0gYWN0aXZlSW5kZXgpWzBdO1xuICAgIGxldCBhY3RpdmVTbGlkZUluZGV4ID0gcGFyc2VJbnQoZmlyc3RTbGlkZUluQ29sdW1uLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSwgMTApO1xuICAgIGlmIChOdW1iZXIuaXNOYU4oYWN0aXZlU2xpZGVJbmRleCkpIHtcbiAgICAgIGFjdGl2ZVNsaWRlSW5kZXggPSBNYXRoLm1heChzd2lwZXIuc2xpZGVzLmluZGV4T2YoZmlyc3RTbGlkZUluQ29sdW1uKSwgMCk7XG4gICAgfVxuICAgIHJlYWxJbmRleCA9IE1hdGguZmxvb3IoYWN0aXZlU2xpZGVJbmRleCAvIHBhcmFtcy5ncmlkLnJvd3MpO1xuICB9IGVsc2UgaWYgKHN3aXBlci5zbGlkZXNbYWN0aXZlSW5kZXhdKSB7XG4gICAgY29uc3Qgc2xpZGVJbmRleCA9IHN3aXBlci5zbGlkZXNbYWN0aXZlSW5kZXhdLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKTtcbiAgICBpZiAoc2xpZGVJbmRleCkge1xuICAgICAgcmVhbEluZGV4ID0gcGFyc2VJbnQoc2xpZGVJbmRleCwgMTApO1xuICAgIH0gZWxzZSB7XG4gICAgICByZWFsSW5kZXggPSBhY3RpdmVJbmRleDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmVhbEluZGV4ID0gYWN0aXZlSW5kZXg7XG4gIH1cbiAgT2JqZWN0LmFzc2lnbihzd2lwZXIsIHtcbiAgICBwcmV2aW91c1NuYXBJbmRleCxcbiAgICBzbmFwSW5kZXgsXG4gICAgcHJldmlvdXNSZWFsSW5kZXgsXG4gICAgcmVhbEluZGV4LFxuICAgIHByZXZpb3VzSW5kZXgsXG4gICAgYWN0aXZlSW5kZXhcbiAgfSk7XG4gIGlmIChzd2lwZXIuaW5pdGlhbGl6ZWQpIHtcbiAgICBwcmVsb2FkKHN3aXBlcik7XG4gIH1cbiAgc3dpcGVyLmVtaXQoJ2FjdGl2ZUluZGV4Q2hhbmdlJyk7XG4gIHN3aXBlci5lbWl0KCdzbmFwSW5kZXhDaGFuZ2UnKTtcbiAgaWYgKHN3aXBlci5pbml0aWFsaXplZCB8fCBzd2lwZXIucGFyYW1zLnJ1bkNhbGxiYWNrc09uSW5pdCkge1xuICAgIGlmIChwcmV2aW91c1JlYWxJbmRleCAhPT0gcmVhbEluZGV4KSB7XG4gICAgICBzd2lwZXIuZW1pdCgncmVhbEluZGV4Q2hhbmdlJyk7XG4gICAgfVxuICAgIHN3aXBlci5lbWl0KCdzbGlkZUNoYW5nZScpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUNsaWNrZWRTbGlkZShlbCwgcGF0aCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICBsZXQgc2xpZGUgPSBlbC5jbG9zZXN0KGAuJHtwYXJhbXMuc2xpZGVDbGFzc30sIHN3aXBlci1zbGlkZWApO1xuICBpZiAoIXNsaWRlICYmIHN3aXBlci5pc0VsZW1lbnQgJiYgcGF0aCAmJiBwYXRoLmxlbmd0aCA+IDEgJiYgcGF0aC5pbmNsdWRlcyhlbCkpIHtcbiAgICBbLi4ucGF0aC5zbGljZShwYXRoLmluZGV4T2YoZWwpICsgMSwgcGF0aC5sZW5ndGgpXS5mb3JFYWNoKHBhdGhFbCA9PiB7XG4gICAgICBpZiAoIXNsaWRlICYmIHBhdGhFbC5tYXRjaGVzICYmIHBhdGhFbC5tYXRjaGVzKGAuJHtwYXJhbXMuc2xpZGVDbGFzc30sIHN3aXBlci1zbGlkZWApKSB7XG4gICAgICAgIHNsaWRlID0gcGF0aEVsO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIGxldCBzbGlkZUZvdW5kID0gZmFsc2U7XG4gIGxldCBzbGlkZUluZGV4O1xuICBpZiAoc2xpZGUpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN3aXBlci5zbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmIChzd2lwZXIuc2xpZGVzW2ldID09PSBzbGlkZSkge1xuICAgICAgICBzbGlkZUZvdW5kID0gdHJ1ZTtcbiAgICAgICAgc2xpZGVJbmRleCA9IGk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoc2xpZGUgJiYgc2xpZGVGb3VuZCkge1xuICAgIHN3aXBlci5jbGlja2VkU2xpZGUgPSBzbGlkZTtcbiAgICBpZiAoc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpIHtcbiAgICAgIHN3aXBlci5jbGlja2VkSW5kZXggPSBwYXJzZUludChzbGlkZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JyksIDEwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLmNsaWNrZWRJbmRleCA9IHNsaWRlSW5kZXg7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHN3aXBlci5jbGlja2VkU2xpZGUgPSB1bmRlZmluZWQ7XG4gICAgc3dpcGVyLmNsaWNrZWRJbmRleCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHBhcmFtcy5zbGlkZVRvQ2xpY2tlZFNsaWRlICYmIHN3aXBlci5jbGlja2VkSW5kZXggIT09IHVuZGVmaW5lZCAmJiBzd2lwZXIuY2xpY2tlZEluZGV4ICE9PSBzd2lwZXIuYWN0aXZlSW5kZXgpIHtcbiAgICBzd2lwZXIuc2xpZGVUb0NsaWNrZWRTbGlkZSgpO1xuICB9XG59XG5cbnZhciB1cGRhdGUgPSB7XG4gIHVwZGF0ZVNpemUsXG4gIHVwZGF0ZVNsaWRlcyxcbiAgdXBkYXRlQXV0b0hlaWdodCxcbiAgdXBkYXRlU2xpZGVzT2Zmc2V0LFxuICB1cGRhdGVTbGlkZXNQcm9ncmVzcyxcbiAgdXBkYXRlUHJvZ3Jlc3MsXG4gIHVwZGF0ZVNsaWRlc0NsYXNzZXMsXG4gIHVwZGF0ZUFjdGl2ZUluZGV4LFxuICB1cGRhdGVDbGlja2VkU2xpZGVcbn07XG5cbmZ1bmN0aW9uIGdldFN3aXBlclRyYW5zbGF0ZShheGlzKSB7XG4gIGlmIChheGlzID09PSB2b2lkIDApIHtcbiAgICBheGlzID0gdGhpcy5pc0hvcml6b250YWwoKSA/ICd4JyA6ICd5JztcbiAgfVxuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgIHJ0bFRyYW5zbGF0ZTogcnRsLFxuICAgIHRyYW5zbGF0ZSxcbiAgICB3cmFwcGVyRWxcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKHBhcmFtcy52aXJ0dWFsVHJhbnNsYXRlKSB7XG4gICAgcmV0dXJuIHJ0bCA/IC10cmFuc2xhdGUgOiB0cmFuc2xhdGU7XG4gIH1cbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgcmV0dXJuIHRyYW5zbGF0ZTtcbiAgfVxuICBsZXQgY3VycmVudFRyYW5zbGF0ZSA9IGdldFRyYW5zbGF0ZSh3cmFwcGVyRWwsIGF4aXMpO1xuICBjdXJyZW50VHJhbnNsYXRlICs9IHN3aXBlci5jc3NPdmVyZmxvd0FkanVzdG1lbnQoKTtcbiAgaWYgKHJ0bCkgY3VycmVudFRyYW5zbGF0ZSA9IC1jdXJyZW50VHJhbnNsYXRlO1xuICByZXR1cm4gY3VycmVudFRyYW5zbGF0ZSB8fCAwO1xufVxuXG5mdW5jdGlvbiBzZXRUcmFuc2xhdGUodHJhbnNsYXRlLCBieUNvbnRyb2xsZXIpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHJ0bFRyYW5zbGF0ZTogcnRsLFxuICAgIHBhcmFtcyxcbiAgICB3cmFwcGVyRWwsXG4gICAgcHJvZ3Jlc3NcbiAgfSA9IHN3aXBlcjtcbiAgbGV0IHggPSAwO1xuICBsZXQgeSA9IDA7XG4gIGNvbnN0IHogPSAwO1xuICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgeCA9IHJ0bCA/IC10cmFuc2xhdGUgOiB0cmFuc2xhdGU7XG4gIH0gZWxzZSB7XG4gICAgeSA9IHRyYW5zbGF0ZTtcbiAgfVxuICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykge1xuICAgIHggPSBNYXRoLmZsb29yKHgpO1xuICAgIHkgPSBNYXRoLmZsb29yKHkpO1xuICB9XG4gIHN3aXBlci5wcmV2aW91c1RyYW5zbGF0ZSA9IHN3aXBlci50cmFuc2xhdGU7XG4gIHN3aXBlci50cmFuc2xhdGUgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyB4IDogeTtcbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgd3JhcHBlckVsW3N3aXBlci5pc0hvcml6b250YWwoKSA/ICdzY3JvbGxMZWZ0JyA6ICdzY3JvbGxUb3AnXSA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IC14IDogLXk7XG4gIH0gZWxzZSBpZiAoIXBhcmFtcy52aXJ0dWFsVHJhbnNsYXRlKSB7XG4gICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgeCAtPSBzd2lwZXIuY3NzT3ZlcmZsb3dBZGp1c3RtZW50KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHkgLT0gc3dpcGVyLmNzc092ZXJmbG93QWRqdXN0bWVudCgpO1xuICAgIH1cbiAgICB3cmFwcGVyRWwuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNkKCR7eH1weCwgJHt5fXB4LCAke3p9cHgpYDtcbiAgfVxuXG4gIC8vIENoZWNrIGlmIHdlIG5lZWQgdG8gdXBkYXRlIHByb2dyZXNzXG4gIGxldCBuZXdQcm9ncmVzcztcbiAgY29uc3QgdHJhbnNsYXRlc0RpZmYgPSBzd2lwZXIubWF4VHJhbnNsYXRlKCkgLSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG4gIGlmICh0cmFuc2xhdGVzRGlmZiA9PT0gMCkge1xuICAgIG5ld1Byb2dyZXNzID0gMDtcbiAgfSBlbHNlIHtcbiAgICBuZXdQcm9ncmVzcyA9ICh0cmFuc2xhdGUgLSBzd2lwZXIubWluVHJhbnNsYXRlKCkpIC8gdHJhbnNsYXRlc0RpZmY7XG4gIH1cbiAgaWYgKG5ld1Byb2dyZXNzICE9PSBwcm9ncmVzcykge1xuICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcyh0cmFuc2xhdGUpO1xuICB9XG4gIHN3aXBlci5lbWl0KCdzZXRUcmFuc2xhdGUnLCBzd2lwZXIudHJhbnNsYXRlLCBieUNvbnRyb2xsZXIpO1xufVxuXG5mdW5jdGlvbiBtaW5UcmFuc2xhdGUoKSB7XG4gIHJldHVybiAtdGhpcy5zbmFwR3JpZFswXTtcbn1cblxuZnVuY3Rpb24gbWF4VHJhbnNsYXRlKCkge1xuICByZXR1cm4gLXRoaXMuc25hcEdyaWRbdGhpcy5zbmFwR3JpZC5sZW5ndGggLSAxXTtcbn1cblxuZnVuY3Rpb24gdHJhbnNsYXRlVG8odHJhbnNsYXRlLCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCB0cmFuc2xhdGVCb3VuZHMsIGludGVybmFsKSB7XG4gIGlmICh0cmFuc2xhdGUgPT09IHZvaWQgMCkge1xuICAgIHRyYW5zbGF0ZSA9IDA7XG4gIH1cbiAgaWYgKHNwZWVkID09PSB2b2lkIDApIHtcbiAgICBzcGVlZCA9IHRoaXMucGFyYW1zLnNwZWVkO1xuICB9XG4gIGlmIChydW5DYWxsYmFja3MgPT09IHZvaWQgMCkge1xuICAgIHJ1bkNhbGxiYWNrcyA9IHRydWU7XG4gIH1cbiAgaWYgKHRyYW5zbGF0ZUJvdW5kcyA9PT0gdm9pZCAwKSB7XG4gICAgdHJhbnNsYXRlQm91bmRzID0gdHJ1ZTtcbiAgfVxuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgIHdyYXBwZXJFbFxuICB9ID0gc3dpcGVyO1xuICBpZiAoc3dpcGVyLmFuaW1hdGluZyAmJiBwYXJhbXMucHJldmVudEludGVyYWN0aW9uT25UcmFuc2l0aW9uKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IG1pblRyYW5zbGF0ZSA9IHN3aXBlci5taW5UcmFuc2xhdGUoKTtcbiAgY29uc3QgbWF4VHJhbnNsYXRlID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpO1xuICBsZXQgbmV3VHJhbnNsYXRlO1xuICBpZiAodHJhbnNsYXRlQm91bmRzICYmIHRyYW5zbGF0ZSA+IG1pblRyYW5zbGF0ZSkgbmV3VHJhbnNsYXRlID0gbWluVHJhbnNsYXRlO2Vsc2UgaWYgKHRyYW5zbGF0ZUJvdW5kcyAmJiB0cmFuc2xhdGUgPCBtYXhUcmFuc2xhdGUpIG5ld1RyYW5zbGF0ZSA9IG1heFRyYW5zbGF0ZTtlbHNlIG5ld1RyYW5zbGF0ZSA9IHRyYW5zbGF0ZTtcblxuICAvLyBVcGRhdGUgcHJvZ3Jlc3NcbiAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKG5ld1RyYW5zbGF0ZSk7XG4gIGlmIChwYXJhbXMuY3NzTW9kZSkge1xuICAgIGNvbnN0IGlzSCA9IHN3aXBlci5pc0hvcml6b250YWwoKTtcbiAgICBpZiAoc3BlZWQgPT09IDApIHtcbiAgICAgIHdyYXBwZXJFbFtpc0ggPyAnc2Nyb2xsTGVmdCcgOiAnc2Nyb2xsVG9wJ10gPSAtbmV3VHJhbnNsYXRlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIXN3aXBlci5zdXBwb3J0LnNtb290aFNjcm9sbCkge1xuICAgICAgICBhbmltYXRlQ1NTTW9kZVNjcm9sbCh7XG4gICAgICAgICAgc3dpcGVyLFxuICAgICAgICAgIHRhcmdldFBvc2l0aW9uOiAtbmV3VHJhbnNsYXRlLFxuICAgICAgICAgIHNpZGU6IGlzSCA/ICdsZWZ0JyA6ICd0b3AnXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHdyYXBwZXJFbC5zY3JvbGxUbyh7XG4gICAgICAgIFtpc0ggPyAnbGVmdCcgOiAndG9wJ106IC1uZXdUcmFuc2xhdGUsXG4gICAgICAgIGJlaGF2aW9yOiAnc21vb3RoJ1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmIChzcGVlZCA9PT0gMCkge1xuICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKDApO1xuICAgIHN3aXBlci5zZXRUcmFuc2xhdGUobmV3VHJhbnNsYXRlKTtcbiAgICBpZiAocnVuQ2FsbGJhY2tzKSB7XG4gICAgICBzd2lwZXIuZW1pdCgnYmVmb3JlVHJhbnNpdGlvblN0YXJ0Jywgc3BlZWQsIGludGVybmFsKTtcbiAgICAgIHN3aXBlci5lbWl0KCd0cmFuc2l0aW9uRW5kJyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKHNwZWVkKTtcbiAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKG5ld1RyYW5zbGF0ZSk7XG4gICAgaWYgKHJ1bkNhbGxiYWNrcykge1xuICAgICAgc3dpcGVyLmVtaXQoJ2JlZm9yZVRyYW5zaXRpb25TdGFydCcsIHNwZWVkLCBpbnRlcm5hbCk7XG4gICAgICBzd2lwZXIuZW1pdCgndHJhbnNpdGlvblN0YXJ0Jyk7XG4gICAgfVxuICAgIGlmICghc3dpcGVyLmFuaW1hdGluZykge1xuICAgICAgc3dpcGVyLmFuaW1hdGluZyA9IHRydWU7XG4gICAgICBpZiAoIXN3aXBlci5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpIHtcbiAgICAgICAgc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uIHRyYW5zaXRpb25FbmQoZSkge1xuICAgICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICAgICAgICBpZiAoZS50YXJnZXQgIT09IHRoaXMpIHJldHVybjtcbiAgICAgICAgICBzd2lwZXIud3JhcHBlckVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTtcbiAgICAgICAgICBzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kID0gbnVsbDtcbiAgICAgICAgICBkZWxldGUgc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZDtcbiAgICAgICAgICBzd2lwZXIuYW5pbWF0aW5nID0gZmFsc2U7XG4gICAgICAgICAgaWYgKHJ1bkNhbGxiYWNrcykge1xuICAgICAgICAgICAgc3dpcGVyLmVtaXQoJ3RyYW5zaXRpb25FbmQnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBzd2lwZXIud3JhcHBlckVsLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbnZhciB0cmFuc2xhdGUgPSB7XG4gIGdldFRyYW5zbGF0ZTogZ2V0U3dpcGVyVHJhbnNsYXRlLFxuICBzZXRUcmFuc2xhdGUsXG4gIG1pblRyYW5zbGF0ZSxcbiAgbWF4VHJhbnNsYXRlLFxuICB0cmFuc2xhdGVUb1xufTtcblxuZnVuY3Rpb24gc2V0VHJhbnNpdGlvbihkdXJhdGlvbiwgYnlDb250cm9sbGVyKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGlmICghc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgc3dpcGVyLndyYXBwZXJFbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBgJHtkdXJhdGlvbn1tc2A7XG4gICAgc3dpcGVyLndyYXBwZXJFbC5zdHlsZS50cmFuc2l0aW9uRGVsYXkgPSBkdXJhdGlvbiA9PT0gMCA/IGAwbXNgIDogJyc7XG4gIH1cbiAgc3dpcGVyLmVtaXQoJ3NldFRyYW5zaXRpb24nLCBkdXJhdGlvbiwgYnlDb250cm9sbGVyKTtcbn1cblxuZnVuY3Rpb24gdHJhbnNpdGlvbkVtaXQoX3JlZikge1xuICBsZXQge1xuICAgIHN3aXBlcixcbiAgICBydW5DYWxsYmFja3MsXG4gICAgZGlyZWN0aW9uLFxuICAgIHN0ZXBcbiAgfSA9IF9yZWY7XG4gIGNvbnN0IHtcbiAgICBhY3RpdmVJbmRleCxcbiAgICBwcmV2aW91c0luZGV4XG4gIH0gPSBzd2lwZXI7XG4gIGxldCBkaXIgPSBkaXJlY3Rpb247XG4gIGlmICghZGlyKSB7XG4gICAgaWYgKGFjdGl2ZUluZGV4ID4gcHJldmlvdXNJbmRleCkgZGlyID0gJ25leHQnO2Vsc2UgaWYgKGFjdGl2ZUluZGV4IDwgcHJldmlvdXNJbmRleCkgZGlyID0gJ3ByZXYnO2Vsc2UgZGlyID0gJ3Jlc2V0JztcbiAgfVxuICBzd2lwZXIuZW1pdChgdHJhbnNpdGlvbiR7c3RlcH1gKTtcbiAgaWYgKHJ1bkNhbGxiYWNrcyAmJiBhY3RpdmVJbmRleCAhPT0gcHJldmlvdXNJbmRleCkge1xuICAgIGlmIChkaXIgPT09ICdyZXNldCcpIHtcbiAgICAgIHN3aXBlci5lbWl0KGBzbGlkZVJlc2V0VHJhbnNpdGlvbiR7c3RlcH1gKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc3dpcGVyLmVtaXQoYHNsaWRlQ2hhbmdlVHJhbnNpdGlvbiR7c3RlcH1gKTtcbiAgICBpZiAoZGlyID09PSAnbmV4dCcpIHtcbiAgICAgIHN3aXBlci5lbWl0KGBzbGlkZU5leHRUcmFuc2l0aW9uJHtzdGVwfWApO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuZW1pdChgc2xpZGVQcmV2VHJhbnNpdGlvbiR7c3RlcH1gKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdHJhbnNpdGlvblN0YXJ0KHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKSB7XG4gIGlmIChydW5DYWxsYmFja3MgPT09IHZvaWQgMCkge1xuICAgIHJ1bkNhbGxiYWNrcyA9IHRydWU7XG4gIH1cbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHBhcmFtc1xuICB9ID0gc3dpcGVyO1xuICBpZiAocGFyYW1zLmNzc01vZGUpIHJldHVybjtcbiAgaWYgKHBhcmFtcy5hdXRvSGVpZ2h0KSB7XG4gICAgc3dpcGVyLnVwZGF0ZUF1dG9IZWlnaHQoKTtcbiAgfVxuICB0cmFuc2l0aW9uRW1pdCh7XG4gICAgc3dpcGVyLFxuICAgIHJ1bkNhbGxiYWNrcyxcbiAgICBkaXJlY3Rpb24sXG4gICAgc3RlcDogJ1N0YXJ0J1xuICB9KTtcbn1cblxuZnVuY3Rpb24gdHJhbnNpdGlvbkVuZChydW5DYWxsYmFja3MsIGRpcmVjdGlvbikge1xuICBpZiAocnVuQ2FsbGJhY2tzID09PSB2b2lkIDApIHtcbiAgICBydW5DYWxsYmFja3MgPSB0cnVlO1xuICB9XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXNcbiAgfSA9IHN3aXBlcjtcbiAgc3dpcGVyLmFuaW1hdGluZyA9IGZhbHNlO1xuICBpZiAocGFyYW1zLmNzc01vZGUpIHJldHVybjtcbiAgc3dpcGVyLnNldFRyYW5zaXRpb24oMCk7XG4gIHRyYW5zaXRpb25FbWl0KHtcbiAgICBzd2lwZXIsXG4gICAgcnVuQ2FsbGJhY2tzLFxuICAgIGRpcmVjdGlvbixcbiAgICBzdGVwOiAnRW5kJ1xuICB9KTtcbn1cblxudmFyIHRyYW5zaXRpb24gPSB7XG4gIHNldFRyYW5zaXRpb24sXG4gIHRyYW5zaXRpb25TdGFydCxcbiAgdHJhbnNpdGlvbkVuZFxufTtcblxuZnVuY3Rpb24gc2xpZGVUbyhpbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwsIGluaXRpYWwpIHtcbiAgaWYgKGluZGV4ID09PSB2b2lkIDApIHtcbiAgICBpbmRleCA9IDA7XG4gIH1cbiAgaWYgKHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwKSB7XG4gICAgcnVuQ2FsbGJhY2tzID0gdHJ1ZTtcbiAgfVxuICBpZiAodHlwZW9mIGluZGV4ID09PSAnc3RyaW5nJykge1xuICAgIGluZGV4ID0gcGFyc2VJbnQoaW5kZXgsIDEwKTtcbiAgfVxuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBsZXQgc2xpZGVJbmRleCA9IGluZGV4O1xuICBpZiAoc2xpZGVJbmRleCA8IDApIHNsaWRlSW5kZXggPSAwO1xuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgIHNuYXBHcmlkLFxuICAgIHNsaWRlc0dyaWQsXG4gICAgcHJldmlvdXNJbmRleCxcbiAgICBhY3RpdmVJbmRleCxcbiAgICBydGxUcmFuc2xhdGU6IHJ0bCxcbiAgICB3cmFwcGVyRWwsXG4gICAgZW5hYmxlZFxuICB9ID0gc3dpcGVyO1xuICBpZiAoIWVuYWJsZWQgJiYgIWludGVybmFsICYmICFpbml0aWFsIHx8IHN3aXBlci5kZXN0cm95ZWQgfHwgc3dpcGVyLmFuaW1hdGluZyAmJiBwYXJhbXMucHJldmVudEludGVyYWN0aW9uT25UcmFuc2l0aW9uKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmICh0eXBlb2Ygc3BlZWQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgc3BlZWQgPSBzd2lwZXIucGFyYW1zLnNwZWVkO1xuICB9XG4gIGNvbnN0IHNraXAgPSBNYXRoLm1pbihzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCwgc2xpZGVJbmRleCk7XG4gIGxldCBzbmFwSW5kZXggPSBza2lwICsgTWF0aC5mbG9vcigoc2xpZGVJbmRleCAtIHNraXApIC8gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG4gIGlmIChzbmFwSW5kZXggPj0gc25hcEdyaWQubGVuZ3RoKSBzbmFwSW5kZXggPSBzbmFwR3JpZC5sZW5ndGggLSAxO1xuICBjb25zdCB0cmFuc2xhdGUgPSAtc25hcEdyaWRbc25hcEluZGV4XTtcbiAgLy8gTm9ybWFsaXplIHNsaWRlSW5kZXhcbiAgaWYgKHBhcmFtcy5ub3JtYWxpemVTbGlkZUluZGV4KSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXNHcmlkLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBjb25zdCBub3JtYWxpemVkVHJhbnNsYXRlID0gLU1hdGguZmxvb3IodHJhbnNsYXRlICogMTAwKTtcbiAgICAgIGNvbnN0IG5vcm1hbGl6ZWRHcmlkID0gTWF0aC5mbG9vcihzbGlkZXNHcmlkW2ldICogMTAwKTtcbiAgICAgIGNvbnN0IG5vcm1hbGl6ZWRHcmlkTmV4dCA9IE1hdGguZmxvb3Ioc2xpZGVzR3JpZFtpICsgMV0gKiAxMDApO1xuICAgICAgaWYgKHR5cGVvZiBzbGlkZXNHcmlkW2kgKyAxXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgaWYgKG5vcm1hbGl6ZWRUcmFuc2xhdGUgPj0gbm9ybWFsaXplZEdyaWQgJiYgbm9ybWFsaXplZFRyYW5zbGF0ZSA8IG5vcm1hbGl6ZWRHcmlkTmV4dCAtIChub3JtYWxpemVkR3JpZE5leHQgLSBub3JtYWxpemVkR3JpZCkgLyAyKSB7XG4gICAgICAgICAgc2xpZGVJbmRleCA9IGk7XG4gICAgICAgIH0gZWxzZSBpZiAobm9ybWFsaXplZFRyYW5zbGF0ZSA+PSBub3JtYWxpemVkR3JpZCAmJiBub3JtYWxpemVkVHJhbnNsYXRlIDwgbm9ybWFsaXplZEdyaWROZXh0KSB7XG4gICAgICAgICAgc2xpZGVJbmRleCA9IGkgKyAxO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKG5vcm1hbGl6ZWRUcmFuc2xhdGUgPj0gbm9ybWFsaXplZEdyaWQpIHtcbiAgICAgICAgc2xpZGVJbmRleCA9IGk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vIERpcmVjdGlvbnMgbG9ja3NcbiAgaWYgKHN3aXBlci5pbml0aWFsaXplZCAmJiBzbGlkZUluZGV4ICE9PSBhY3RpdmVJbmRleCkge1xuICAgIGlmICghc3dpcGVyLmFsbG93U2xpZGVOZXh0ICYmIChydGwgPyB0cmFuc2xhdGUgPiBzd2lwZXIudHJhbnNsYXRlICYmIHRyYW5zbGF0ZSA+IHN3aXBlci5taW5UcmFuc2xhdGUoKSA6IHRyYW5zbGF0ZSA8IHN3aXBlci50cmFuc2xhdGUgJiYgdHJhbnNsYXRlIDwgc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoIXN3aXBlci5hbGxvd1NsaWRlUHJldiAmJiB0cmFuc2xhdGUgPiBzd2lwZXIudHJhbnNsYXRlICYmIHRyYW5zbGF0ZSA+IHN3aXBlci5tYXhUcmFuc2xhdGUoKSkge1xuICAgICAgaWYgKChhY3RpdmVJbmRleCB8fCAwKSAhPT0gc2xpZGVJbmRleCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChzbGlkZUluZGV4ICE9PSAocHJldmlvdXNJbmRleCB8fCAwKSAmJiBydW5DYWxsYmFja3MpIHtcbiAgICBzd2lwZXIuZW1pdCgnYmVmb3JlU2xpZGVDaGFuZ2VTdGFydCcpO1xuICB9XG5cbiAgLy8gVXBkYXRlIHByb2dyZXNzXG4gIHN3aXBlci51cGRhdGVQcm9ncmVzcyh0cmFuc2xhdGUpO1xuICBsZXQgZGlyZWN0aW9uO1xuICBpZiAoc2xpZGVJbmRleCA+IGFjdGl2ZUluZGV4KSBkaXJlY3Rpb24gPSAnbmV4dCc7ZWxzZSBpZiAoc2xpZGVJbmRleCA8IGFjdGl2ZUluZGV4KSBkaXJlY3Rpb24gPSAncHJldic7ZWxzZSBkaXJlY3Rpb24gPSAncmVzZXQnO1xuXG4gIC8vIFVwZGF0ZSBJbmRleFxuICBpZiAocnRsICYmIC10cmFuc2xhdGUgPT09IHN3aXBlci50cmFuc2xhdGUgfHwgIXJ0bCAmJiB0cmFuc2xhdGUgPT09IHN3aXBlci50cmFuc2xhdGUpIHtcbiAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoc2xpZGVJbmRleCk7XG4gICAgLy8gVXBkYXRlIEhlaWdodFxuICAgIGlmIChwYXJhbXMuYXV0b0hlaWdodCkge1xuICAgICAgc3dpcGVyLnVwZGF0ZUF1dG9IZWlnaHQoKTtcbiAgICB9XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICBpZiAocGFyYW1zLmVmZmVjdCAhPT0gJ3NsaWRlJykge1xuICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZSh0cmFuc2xhdGUpO1xuICAgIH1cbiAgICBpZiAoZGlyZWN0aW9uICE9PSAncmVzZXQnKSB7XG4gICAgICBzd2lwZXIudHJhbnNpdGlvblN0YXJ0KHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKTtcbiAgICAgIHN3aXBlci50cmFuc2l0aW9uRW5kKHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChwYXJhbXMuY3NzTW9kZSkge1xuICAgIGNvbnN0IGlzSCA9IHN3aXBlci5pc0hvcml6b250YWwoKTtcbiAgICBjb25zdCB0ID0gcnRsID8gdHJhbnNsYXRlIDogLXRyYW5zbGF0ZTtcbiAgICBpZiAoc3BlZWQgPT09IDApIHtcbiAgICAgIGNvbnN0IGlzVmlydHVhbCA9IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkO1xuICAgICAgaWYgKGlzVmlydHVhbCkge1xuICAgICAgICBzd2lwZXIud3JhcHBlckVsLnN0eWxlLnNjcm9sbFNuYXBUeXBlID0gJ25vbmUnO1xuICAgICAgICBzd2lwZXIuX2ltbWVkaWF0ZVZpcnR1YWwgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGlzVmlydHVhbCAmJiAhc3dpcGVyLl9jc3NNb2RlVmlydHVhbEluaXRpYWxTZXQgJiYgc3dpcGVyLnBhcmFtcy5pbml0aWFsU2xpZGUgPiAwKSB7XG4gICAgICAgIHN3aXBlci5fY3NzTW9kZVZpcnR1YWxJbml0aWFsU2V0ID0gdHJ1ZTtcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICB3cmFwcGVyRWxbaXNIID8gJ3Njcm9sbExlZnQnIDogJ3Njcm9sbFRvcCddID0gdDtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3cmFwcGVyRWxbaXNIID8gJ3Njcm9sbExlZnQnIDogJ3Njcm9sbFRvcCddID0gdDtcbiAgICAgIH1cbiAgICAgIGlmIChpc1ZpcnR1YWwpIHtcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICBzd2lwZXIud3JhcHBlckVsLnN0eWxlLnNjcm9sbFNuYXBUeXBlID0gJyc7XG4gICAgICAgICAgc3dpcGVyLl9pbW1lZGlhdGVWaXJ0dWFsID0gZmFsc2U7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIXN3aXBlci5zdXBwb3J0LnNtb290aFNjcm9sbCkge1xuICAgICAgICBhbmltYXRlQ1NTTW9kZVNjcm9sbCh7XG4gICAgICAgICAgc3dpcGVyLFxuICAgICAgICAgIHRhcmdldFBvc2l0aW9uOiB0LFxuICAgICAgICAgIHNpZGU6IGlzSCA/ICdsZWZ0JyA6ICd0b3AnXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHdyYXBwZXJFbC5zY3JvbGxUbyh7XG4gICAgICAgIFtpc0ggPyAnbGVmdCcgOiAndG9wJ106IHQsXG4gICAgICAgIGJlaGF2aW9yOiAnc21vb3RoJ1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHN3aXBlci5zZXRUcmFuc2l0aW9uKHNwZWVkKTtcbiAgc3dpcGVyLnNldFRyYW5zbGF0ZSh0cmFuc2xhdGUpO1xuICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoc2xpZGVJbmRleCk7XG4gIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gIHN3aXBlci5lbWl0KCdiZWZvcmVUcmFuc2l0aW9uU3RhcnQnLCBzcGVlZCwgaW50ZXJuYWwpO1xuICBzd2lwZXIudHJhbnNpdGlvblN0YXJ0KHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKTtcbiAgaWYgKHNwZWVkID09PSAwKSB7XG4gICAgc3dpcGVyLnRyYW5zaXRpb25FbmQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pO1xuICB9IGVsc2UgaWYgKCFzd2lwZXIuYW5pbWF0aW5nKSB7XG4gICAgc3dpcGVyLmFuaW1hdGluZyA9IHRydWU7XG4gICAgaWYgKCFzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpIHtcbiAgICAgIHN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uIHRyYW5zaXRpb25FbmQoZSkge1xuICAgICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XG4gICAgICAgIGlmIChlLnRhcmdldCAhPT0gdGhpcykgcmV0dXJuO1xuICAgICAgICBzd2lwZXIud3JhcHBlckVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpO1xuICAgICAgICBzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQgPSBudWxsO1xuICAgICAgICBkZWxldGUgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kO1xuICAgICAgICBzd2lwZXIudHJhbnNpdGlvbkVuZChydW5DYWxsYmFja3MsIGRpcmVjdGlvbik7XG4gICAgICB9O1xuICAgIH1cbiAgICBzd2lwZXIud3JhcHBlckVsLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBzbGlkZVRvTG9vcChpbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpIHtcbiAgaWYgKGluZGV4ID09PSB2b2lkIDApIHtcbiAgICBpbmRleCA9IDA7XG4gIH1cbiAgaWYgKHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwKSB7XG4gICAgcnVuQ2FsbGJhY2tzID0gdHJ1ZTtcbiAgfVxuICBpZiAodHlwZW9mIGluZGV4ID09PSAnc3RyaW5nJykge1xuICAgIGNvbnN0IGluZGV4QXNOdW1iZXIgPSBwYXJzZUludChpbmRleCwgMTApO1xuICAgIGluZGV4ID0gaW5kZXhBc051bWJlcjtcbiAgfVxuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBpZiAoc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICBpZiAodHlwZW9mIHNwZWVkID09PSAndW5kZWZpbmVkJykge1xuICAgIHNwZWVkID0gc3dpcGVyLnBhcmFtcy5zcGVlZDtcbiAgfVxuICBjb25zdCBncmlkRW5hYmxlZCA9IHN3aXBlci5ncmlkICYmIHN3aXBlci5wYXJhbXMuZ3JpZCAmJiBzd2lwZXIucGFyYW1zLmdyaWQucm93cyA+IDE7XG4gIGxldCBuZXdJbmRleCA9IGluZGV4O1xuICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgaWYgKHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIG5ld0luZGV4ID0gbmV3SW5kZXggKyBzd2lwZXIudmlydHVhbC5zbGlkZXNCZWZvcmU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCB0YXJnZXRTbGlkZUluZGV4O1xuICAgICAgaWYgKGdyaWRFbmFibGVkKSB7XG4gICAgICAgIGNvbnN0IHNsaWRlSW5kZXggPSBuZXdJbmRleCAqIHN3aXBlci5wYXJhbXMuZ3JpZC5yb3dzO1xuICAgICAgICB0YXJnZXRTbGlkZUluZGV4ID0gc3dpcGVyLnNsaWRlcy5maWx0ZXIoc2xpZGVFbCA9PiBzbGlkZUVsLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSAqIDEgPT09IHNsaWRlSW5kZXgpWzBdLmNvbHVtbjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRhcmdldFNsaWRlSW5kZXggPSBzd2lwZXIuZ2V0U2xpZGVJbmRleEJ5RGF0YShuZXdJbmRleCk7XG4gICAgICB9XG4gICAgICBjb25zdCBjb2xzID0gZ3JpZEVuYWJsZWQgPyBNYXRoLmNlaWwoc3dpcGVyLnNsaWRlcy5sZW5ndGggLyBzd2lwZXIucGFyYW1zLmdyaWQucm93cykgOiBzd2lwZXIuc2xpZGVzLmxlbmd0aDtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgY2VudGVyZWRTbGlkZXNcbiAgICAgIH0gPSBzd2lwZXIucGFyYW1zO1xuICAgICAgbGV0IHNsaWRlc1BlclZpZXcgPSBzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXc7XG4gICAgICBpZiAoc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nKSB7XG4gICAgICAgIHNsaWRlc1BlclZpZXcgPSBzd2lwZXIuc2xpZGVzUGVyVmlld0R5bmFtaWMoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNsaWRlc1BlclZpZXcgPSBNYXRoLmNlaWwocGFyc2VGbG9hdChzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcsIDEwKSk7XG4gICAgICAgIGlmIChjZW50ZXJlZFNsaWRlcyAmJiBzbGlkZXNQZXJWaWV3ICUgMiA9PT0gMCkge1xuICAgICAgICAgIHNsaWRlc1BlclZpZXcgPSBzbGlkZXNQZXJWaWV3ICsgMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGV0IG5lZWRMb29wRml4ID0gY29scyAtIHRhcmdldFNsaWRlSW5kZXggPCBzbGlkZXNQZXJWaWV3O1xuICAgICAgaWYgKGNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICAgIG5lZWRMb29wRml4ID0gbmVlZExvb3BGaXggfHwgdGFyZ2V0U2xpZGVJbmRleCA8IE1hdGguY2VpbChzbGlkZXNQZXJWaWV3IC8gMik7XG4gICAgICB9XG4gICAgICBpZiAoaW50ZXJuYWwgJiYgY2VudGVyZWRTbGlkZXMgJiYgc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ICE9PSAnYXV0bycgJiYgIWdyaWRFbmFibGVkKSB7XG4gICAgICAgIG5lZWRMb29wRml4ID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAobmVlZExvb3BGaXgpIHtcbiAgICAgICAgY29uc3QgZGlyZWN0aW9uID0gY2VudGVyZWRTbGlkZXMgPyB0YXJnZXRTbGlkZUluZGV4IDwgc3dpcGVyLmFjdGl2ZUluZGV4ID8gJ3ByZXYnIDogJ25leHQnIDogdGFyZ2V0U2xpZGVJbmRleCAtIHN3aXBlci5hY3RpdmVJbmRleCAtIDEgPCBzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcgPyAnbmV4dCcgOiAncHJldic7XG4gICAgICAgIHN3aXBlci5sb29wRml4KHtcbiAgICAgICAgICBkaXJlY3Rpb24sXG4gICAgICAgICAgc2xpZGVUbzogdHJ1ZSxcbiAgICAgICAgICBhY3RpdmVTbGlkZUluZGV4OiBkaXJlY3Rpb24gPT09ICduZXh0JyA/IHRhcmdldFNsaWRlSW5kZXggKyAxIDogdGFyZ2V0U2xpZGVJbmRleCAtIGNvbHMgKyAxLFxuICAgICAgICAgIHNsaWRlUmVhbEluZGV4OiBkaXJlY3Rpb24gPT09ICduZXh0JyA/IHN3aXBlci5yZWFsSW5kZXggOiB1bmRlZmluZWRcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAoZ3JpZEVuYWJsZWQpIHtcbiAgICAgICAgY29uc3Qgc2xpZGVJbmRleCA9IG5ld0luZGV4ICogc3dpcGVyLnBhcmFtcy5ncmlkLnJvd3M7XG4gICAgICAgIG5ld0luZGV4ID0gc3dpcGVyLnNsaWRlcy5maWx0ZXIoc2xpZGVFbCA9PiBzbGlkZUVsLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSAqIDEgPT09IHNsaWRlSW5kZXgpWzBdLmNvbHVtbjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5ld0luZGV4ID0gc3dpcGVyLmdldFNsaWRlSW5kZXhCeURhdGEobmV3SW5kZXgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgIHN3aXBlci5zbGlkZVRvKG5ld0luZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG4gIH0pO1xuICByZXR1cm4gc3dpcGVyO1xufVxuXG4vKiBlc2xpbnQgbm8tdW51c2VkLXZhcnM6IFwib2ZmXCIgKi9cbmZ1bmN0aW9uIHNsaWRlTmV4dChzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCkge1xuICBpZiAocnVuQ2FsbGJhY2tzID09PSB2b2lkIDApIHtcbiAgICBydW5DYWxsYmFja3MgPSB0cnVlO1xuICB9XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBlbmFibGVkLFxuICAgIHBhcmFtcyxcbiAgICBhbmltYXRpbmdcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKCFlbmFibGVkIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybiBzd2lwZXI7XG4gIGlmICh0eXBlb2Ygc3BlZWQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgc3BlZWQgPSBzd2lwZXIucGFyYW1zLnNwZWVkO1xuICB9XG4gIGxldCBwZXJHcm91cCA9IHBhcmFtcy5zbGlkZXNQZXJHcm91cDtcbiAgaWYgKHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgJiYgcGFyYW1zLnNsaWRlc1Blckdyb3VwID09PSAxICYmIHBhcmFtcy5zbGlkZXNQZXJHcm91cEF1dG8pIHtcbiAgICBwZXJHcm91cCA9IE1hdGgubWF4KHN3aXBlci5zbGlkZXNQZXJWaWV3RHluYW1pYygnY3VycmVudCcsIHRydWUpLCAxKTtcbiAgfVxuICBjb25zdCBpbmNyZW1lbnQgPSBzd2lwZXIuYWN0aXZlSW5kZXggPCBwYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwID8gMSA6IHBlckdyb3VwO1xuICBjb25zdCBpc1ZpcnR1YWwgPSBzd2lwZXIudmlydHVhbCAmJiBwYXJhbXMudmlydHVhbC5lbmFibGVkO1xuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBpZiAoYW5pbWF0aW5nICYmICFpc1ZpcnR1YWwgJiYgcGFyYW1zLmxvb3BQcmV2ZW50c1NsaWRpbmcpIHJldHVybiBmYWxzZTtcbiAgICBzd2lwZXIubG9vcEZpeCh7XG4gICAgICBkaXJlY3Rpb246ICduZXh0J1xuICAgIH0pO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgIHN3aXBlci5fY2xpZW50TGVmdCA9IHN3aXBlci53cmFwcGVyRWwuY2xpZW50TGVmdDtcbiAgICBpZiAoc3dpcGVyLmFjdGl2ZUluZGV4ID09PSBzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIDEgJiYgcGFyYW1zLmNzc01vZGUpIHtcbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCArIGluY3JlbWVudCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgaWYgKHBhcmFtcy5yZXdpbmQgJiYgc3dpcGVyLmlzRW5kKSB7XG4gICAgcmV0dXJuIHN3aXBlci5zbGlkZVRvKDAsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbiAgfVxuICByZXR1cm4gc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4ICsgaW5jcmVtZW50LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG59XG5cbi8qIGVzbGludCBuby11bnVzZWQtdmFyczogXCJvZmZcIiAqL1xuZnVuY3Rpb24gc2xpZGVQcmV2KHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKSB7XG4gIGlmIChydW5DYWxsYmFja3MgPT09IHZvaWQgMCkge1xuICAgIHJ1bkNhbGxiYWNrcyA9IHRydWU7XG4gIH1cbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICBzbmFwR3JpZCxcbiAgICBzbGlkZXNHcmlkLFxuICAgIHJ0bFRyYW5zbGF0ZSxcbiAgICBlbmFibGVkLFxuICAgIGFuaW1hdGluZ1xuICB9ID0gc3dpcGVyO1xuICBpZiAoIWVuYWJsZWQgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuIHN3aXBlcjtcbiAgaWYgKHR5cGVvZiBzcGVlZCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBzcGVlZCA9IHN3aXBlci5wYXJhbXMuc3BlZWQ7XG4gIH1cbiAgY29uc3QgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgcGFyYW1zLnZpcnR1YWwuZW5hYmxlZDtcbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgaWYgKGFuaW1hdGluZyAmJiAhaXNWaXJ0dWFsICYmIHBhcmFtcy5sb29wUHJldmVudHNTbGlkaW5nKSByZXR1cm4gZmFsc2U7XG4gICAgc3dpcGVyLmxvb3BGaXgoe1xuICAgICAgZGlyZWN0aW9uOiAncHJldidcbiAgICB9KTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICBzd2lwZXIuX2NsaWVudExlZnQgPSBzd2lwZXIud3JhcHBlckVsLmNsaWVudExlZnQ7XG4gIH1cbiAgY29uc3QgdHJhbnNsYXRlID0gcnRsVHJhbnNsYXRlID8gc3dpcGVyLnRyYW5zbGF0ZSA6IC1zd2lwZXIudHJhbnNsYXRlO1xuICBmdW5jdGlvbiBub3JtYWxpemUodmFsKSB7XG4gICAgaWYgKHZhbCA8IDApIHJldHVybiAtTWF0aC5mbG9vcihNYXRoLmFicyh2YWwpKTtcbiAgICByZXR1cm4gTWF0aC5mbG9vcih2YWwpO1xuICB9XG4gIGNvbnN0IG5vcm1hbGl6ZWRUcmFuc2xhdGUgPSBub3JtYWxpemUodHJhbnNsYXRlKTtcbiAgY29uc3Qgbm9ybWFsaXplZFNuYXBHcmlkID0gc25hcEdyaWQubWFwKHZhbCA9PiBub3JtYWxpemUodmFsKSk7XG4gIGxldCBwcmV2U25hcCA9IHNuYXBHcmlkW25vcm1hbGl6ZWRTbmFwR3JpZC5pbmRleE9mKG5vcm1hbGl6ZWRUcmFuc2xhdGUpIC0gMV07XG4gIGlmICh0eXBlb2YgcHJldlNuYXAgPT09ICd1bmRlZmluZWQnICYmIHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgbGV0IHByZXZTbmFwSW5kZXg7XG4gICAgc25hcEdyaWQuZm9yRWFjaCgoc25hcCwgc25hcEluZGV4KSA9PiB7XG4gICAgICBpZiAobm9ybWFsaXplZFRyYW5zbGF0ZSA+PSBzbmFwKSB7XG4gICAgICAgIC8vIHByZXZTbmFwID0gc25hcDtcbiAgICAgICAgcHJldlNuYXBJbmRleCA9IHNuYXBJbmRleDtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAodHlwZW9mIHByZXZTbmFwSW5kZXggIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBwcmV2U25hcCA9IHNuYXBHcmlkW3ByZXZTbmFwSW5kZXggPiAwID8gcHJldlNuYXBJbmRleCAtIDEgOiBwcmV2U25hcEluZGV4XTtcbiAgICB9XG4gIH1cbiAgbGV0IHByZXZJbmRleCA9IDA7XG4gIGlmICh0eXBlb2YgcHJldlNuYXAgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcHJldkluZGV4ID0gc2xpZGVzR3JpZC5pbmRleE9mKHByZXZTbmFwKTtcbiAgICBpZiAocHJldkluZGV4IDwgMCkgcHJldkluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4IC0gMTtcbiAgICBpZiAocGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyAmJiBwYXJhbXMuc2xpZGVzUGVyR3JvdXAgPT09IDEgJiYgcGFyYW1zLnNsaWRlc1Blckdyb3VwQXV0bykge1xuICAgICAgcHJldkluZGV4ID0gcHJldkluZGV4IC0gc3dpcGVyLnNsaWRlc1BlclZpZXdEeW5hbWljKCdwcmV2aW91cycsIHRydWUpICsgMTtcbiAgICAgIHByZXZJbmRleCA9IE1hdGgubWF4KHByZXZJbmRleCwgMCk7XG4gICAgfVxuICB9XG4gIGlmIChwYXJhbXMucmV3aW5kICYmIHN3aXBlci5pc0JlZ2lubmluZykge1xuICAgIGNvbnN0IGxhc3RJbmRleCA9IHN3aXBlci5wYXJhbXMudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCAmJiBzd2lwZXIudmlydHVhbCA/IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggLSAxIDogc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxO1xuICAgIHJldHVybiBzd2lwZXIuc2xpZGVUbyhsYXN0SW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbiAgfSBlbHNlIGlmIChwYXJhbXMubG9vcCAmJiBzd2lwZXIuYWN0aXZlSW5kZXggPT09IDAgJiYgcGFyYW1zLmNzc01vZGUpIHtcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgc3dpcGVyLnNsaWRlVG8ocHJldkluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIHN3aXBlci5zbGlkZVRvKHByZXZJbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xufVxuXG4vKiBlc2xpbnQgbm8tdW51c2VkLXZhcnM6IFwib2ZmXCIgKi9cbmZ1bmN0aW9uIHNsaWRlUmVzZXQoc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpIHtcbiAgaWYgKHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwKSB7XG4gICAgcnVuQ2FsbGJhY2tzID0gdHJ1ZTtcbiAgfVxuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBpZiAoc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICBpZiAodHlwZW9mIHNwZWVkID09PSAndW5kZWZpbmVkJykge1xuICAgIHNwZWVkID0gc3dpcGVyLnBhcmFtcy5zcGVlZDtcbiAgfVxuICByZXR1cm4gc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG59XG5cbi8qIGVzbGludCBuby11bnVzZWQtdmFyczogXCJvZmZcIiAqL1xuZnVuY3Rpb24gc2xpZGVUb0Nsb3Nlc3Qoc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwsIHRocmVzaG9sZCkge1xuICBpZiAocnVuQ2FsbGJhY2tzID09PSB2b2lkIDApIHtcbiAgICBydW5DYWxsYmFja3MgPSB0cnVlO1xuICB9XG4gIGlmICh0aHJlc2hvbGQgPT09IHZvaWQgMCkge1xuICAgIHRocmVzaG9sZCA9IDAuNTtcbiAgfVxuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBpZiAoc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICBpZiAodHlwZW9mIHNwZWVkID09PSAndW5kZWZpbmVkJykge1xuICAgIHNwZWVkID0gc3dpcGVyLnBhcmFtcy5zcGVlZDtcbiAgfVxuICBsZXQgaW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG4gIGNvbnN0IHNraXAgPSBNYXRoLm1pbihzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCwgaW5kZXgpO1xuICBjb25zdCBzbmFwSW5kZXggPSBza2lwICsgTWF0aC5mbG9vcigoaW5kZXggLSBza2lwKSAvIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXApO1xuICBjb25zdCB0cmFuc2xhdGUgPSBzd2lwZXIucnRsVHJhbnNsYXRlID8gc3dpcGVyLnRyYW5zbGF0ZSA6IC1zd2lwZXIudHJhbnNsYXRlO1xuICBpZiAodHJhbnNsYXRlID49IHN3aXBlci5zbmFwR3JpZFtzbmFwSW5kZXhdKSB7XG4gICAgLy8gVGhlIGN1cnJlbnQgdHJhbnNsYXRlIGlzIG9uIG9yIGFmdGVyIHRoZSBjdXJyZW50IHNuYXAgaW5kZXgsIHNvIHRoZSBjaG9pY2VcbiAgICAvLyBpcyBiZXR3ZWVuIHRoZSBjdXJyZW50IGluZGV4IGFuZCB0aGUgb25lIGFmdGVyIGl0LlxuICAgIGNvbnN0IGN1cnJlbnRTbmFwID0gc3dpcGVyLnNuYXBHcmlkW3NuYXBJbmRleF07XG4gICAgY29uc3QgbmV4dFNuYXAgPSBzd2lwZXIuc25hcEdyaWRbc25hcEluZGV4ICsgMV07XG4gICAgaWYgKHRyYW5zbGF0ZSAtIGN1cnJlbnRTbmFwID4gKG5leHRTbmFwIC0gY3VycmVudFNuYXApICogdGhyZXNob2xkKSB7XG4gICAgICBpbmRleCArPSBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBUaGUgY3VycmVudCB0cmFuc2xhdGUgaXMgYmVmb3JlIHRoZSBjdXJyZW50IHNuYXAgaW5kZXgsIHNvIHRoZSBjaG9pY2VcbiAgICAvLyBpcyBiZXR3ZWVuIHRoZSBjdXJyZW50IGluZGV4IGFuZCB0aGUgb25lIGJlZm9yZSBpdC5cbiAgICBjb25zdCBwcmV2U25hcCA9IHN3aXBlci5zbmFwR3JpZFtzbmFwSW5kZXggLSAxXTtcbiAgICBjb25zdCBjdXJyZW50U25hcCA9IHN3aXBlci5zbmFwR3JpZFtzbmFwSW5kZXhdO1xuICAgIGlmICh0cmFuc2xhdGUgLSBwcmV2U25hcCA8PSAoY3VycmVudFNuYXAgLSBwcmV2U25hcCkgKiB0aHJlc2hvbGQpIHtcbiAgICAgIGluZGV4IC09IHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG4gICAgfVxuICB9XG4gIGluZGV4ID0gTWF0aC5tYXgoaW5kZXgsIDApO1xuICBpbmRleCA9IE1hdGgubWluKGluZGV4LCBzd2lwZXIuc2xpZGVzR3JpZC5sZW5ndGggLSAxKTtcbiAgcmV0dXJuIHN3aXBlci5zbGlkZVRvKGluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG59XG5cbmZ1bmN0aW9uIHNsaWRlVG9DbGlja2VkU2xpZGUoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGlmIChzd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgc2xpZGVzRWxcbiAgfSA9IHN3aXBlcjtcbiAgY29uc3Qgc2xpZGVzUGVyVmlldyA9IHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgPyBzd2lwZXIuc2xpZGVzUGVyVmlld0R5bmFtaWMoKSA6IHBhcmFtcy5zbGlkZXNQZXJWaWV3O1xuICBsZXQgc2xpZGVUb0luZGV4ID0gc3dpcGVyLmNsaWNrZWRJbmRleDtcbiAgbGV0IHJlYWxJbmRleDtcbiAgY29uc3Qgc2xpZGVTZWxlY3RvciA9IHN3aXBlci5pc0VsZW1lbnQgPyBgc3dpcGVyLXNsaWRlYCA6IGAuJHtwYXJhbXMuc2xpZGVDbGFzc31gO1xuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBpZiAoc3dpcGVyLmFuaW1hdGluZykgcmV0dXJuO1xuICAgIHJlYWxJbmRleCA9IHBhcnNlSW50KHN3aXBlci5jbGlja2VkU2xpZGUuZ2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpLCAxMCk7XG4gICAgaWYgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgaWYgKHNsaWRlVG9JbmRleCA8IHN3aXBlci5sb29wZWRTbGlkZXMgLSBzbGlkZXNQZXJWaWV3IC8gMiB8fCBzbGlkZVRvSW5kZXggPiBzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIHN3aXBlci5sb29wZWRTbGlkZXMgKyBzbGlkZXNQZXJWaWV3IC8gMikge1xuICAgICAgICBzd2lwZXIubG9vcEZpeCgpO1xuICAgICAgICBzbGlkZVRvSW5kZXggPSBzd2lwZXIuZ2V0U2xpZGVJbmRleChlbGVtZW50Q2hpbGRyZW4oc2xpZGVzRWwsIGAke3NsaWRlU2VsZWN0b3J9W2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHtyZWFsSW5kZXh9XCJdYClbMF0pO1xuICAgICAgICBuZXh0VGljaygoKSA9PiB7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlVG8oc2xpZGVUb0luZGV4KTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzbGlkZVRvSW5kZXgpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoc2xpZGVUb0luZGV4ID4gc3dpcGVyLnNsaWRlcy5sZW5ndGggLSBzbGlkZXNQZXJWaWV3KSB7XG4gICAgICBzd2lwZXIubG9vcEZpeCgpO1xuICAgICAgc2xpZGVUb0luZGV4ID0gc3dpcGVyLmdldFNsaWRlSW5kZXgoZWxlbWVudENoaWxkcmVuKHNsaWRlc0VsLCBgJHtzbGlkZVNlbGVjdG9yfVtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7cmVhbEluZGV4fVwiXWApWzBdKTtcbiAgICAgIG5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc2xpZGVUb0luZGV4KTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzbGlkZVRvSW5kZXgpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBzd2lwZXIuc2xpZGVUbyhzbGlkZVRvSW5kZXgpO1xuICB9XG59XG5cbnZhciBzbGlkZSA9IHtcbiAgc2xpZGVUbyxcbiAgc2xpZGVUb0xvb3AsXG4gIHNsaWRlTmV4dCxcbiAgc2xpZGVQcmV2LFxuICBzbGlkZVJlc2V0LFxuICBzbGlkZVRvQ2xvc2VzdCxcbiAgc2xpZGVUb0NsaWNrZWRTbGlkZVxufTtcblxuZnVuY3Rpb24gbG9vcENyZWF0ZShzbGlkZVJlYWxJbmRleCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgIHNsaWRlc0VsXG4gIH0gPSBzd2lwZXI7XG4gIGlmICghcGFyYW1zLmxvb3AgfHwgc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpIHJldHVybjtcbiAgY29uc3QgaW5pdFNsaWRlcyA9ICgpID0+IHtcbiAgICBjb25zdCBzbGlkZXMgPSBlbGVtZW50Q2hpbGRyZW4oc2xpZGVzRWwsIGAuJHtwYXJhbXMuc2xpZGVDbGFzc30sIHN3aXBlci1zbGlkZWApO1xuICAgIHNsaWRlcy5mb3JFYWNoKChlbCwgaW5kZXgpID0+IHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnLCBpbmRleCk7XG4gICAgfSk7XG4gIH07XG4gIGNvbnN0IGdyaWRFbmFibGVkID0gc3dpcGVyLmdyaWQgJiYgcGFyYW1zLmdyaWQgJiYgcGFyYW1zLmdyaWQucm93cyA+IDE7XG4gIGNvbnN0IHNsaWRlc1Blckdyb3VwID0gcGFyYW1zLnNsaWRlc1Blckdyb3VwICogKGdyaWRFbmFibGVkID8gcGFyYW1zLmdyaWQucm93cyA6IDEpO1xuICBjb25zdCBzaG91bGRGaWxsR3JvdXAgPSBzd2lwZXIuc2xpZGVzLmxlbmd0aCAlIHNsaWRlc1Blckdyb3VwICE9PSAwO1xuICBjb25zdCBzaG91bGRGaWxsR3JpZCA9IGdyaWRFbmFibGVkICYmIHN3aXBlci5zbGlkZXMubGVuZ3RoICUgcGFyYW1zLmdyaWQucm93cyAhPT0gMDtcbiAgY29uc3QgYWRkQmxhbmtTbGlkZXMgPSBhbW91bnRPZlNsaWRlcyA9PiB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhbW91bnRPZlNsaWRlczsgaSArPSAxKSB7XG4gICAgICBjb25zdCBzbGlkZUVsID0gc3dpcGVyLmlzRWxlbWVudCA/IGNyZWF0ZUVsZW1lbnQoJ3N3aXBlci1zbGlkZScsIFtwYXJhbXMuc2xpZGVCbGFua0NsYXNzXSkgOiBjcmVhdGVFbGVtZW50KCdkaXYnLCBbcGFyYW1zLnNsaWRlQ2xhc3MsIHBhcmFtcy5zbGlkZUJsYW5rQ2xhc3NdKTtcbiAgICAgIHN3aXBlci5zbGlkZXNFbC5hcHBlbmQoc2xpZGVFbCk7XG4gICAgfVxuICB9O1xuICBpZiAoc2hvdWxkRmlsbEdyb3VwKSB7XG4gICAgaWYgKHBhcmFtcy5sb29wQWRkQmxhbmtTbGlkZXMpIHtcbiAgICAgIGNvbnN0IHNsaWRlc1RvQWRkID0gc2xpZGVzUGVyR3JvdXAgLSBzd2lwZXIuc2xpZGVzLmxlbmd0aCAlIHNsaWRlc1Blckdyb3VwO1xuICAgICAgYWRkQmxhbmtTbGlkZXMoc2xpZGVzVG9BZGQpO1xuICAgICAgc3dpcGVyLnJlY2FsY1NsaWRlcygpO1xuICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlcygpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzaG93V2FybmluZygnU3dpcGVyIExvb3AgV2FybmluZzogVGhlIG51bWJlciBvZiBzbGlkZXMgaXMgbm90IGV2ZW4gdG8gc2xpZGVzUGVyR3JvdXAsIGxvb3AgbW9kZSBtYXkgbm90IGZ1bmN0aW9uIHByb3Blcmx5LiBZb3UgbmVlZCB0byBhZGQgbW9yZSBzbGlkZXMgKG9yIG1ha2UgZHVwbGljYXRlcywgb3IgZW1wdHkgc2xpZGVzKScpO1xuICAgIH1cbiAgICBpbml0U2xpZGVzKCk7XG4gIH0gZWxzZSBpZiAoc2hvdWxkRmlsbEdyaWQpIHtcbiAgICBpZiAocGFyYW1zLmxvb3BBZGRCbGFua1NsaWRlcykge1xuICAgICAgY29uc3Qgc2xpZGVzVG9BZGQgPSBwYXJhbXMuZ3JpZC5yb3dzIC0gc3dpcGVyLnNsaWRlcy5sZW5ndGggJSBwYXJhbXMuZ3JpZC5yb3dzO1xuICAgICAgYWRkQmxhbmtTbGlkZXMoc2xpZGVzVG9BZGQpO1xuICAgICAgc3dpcGVyLnJlY2FsY1NsaWRlcygpO1xuICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlcygpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzaG93V2FybmluZygnU3dpcGVyIExvb3AgV2FybmluZzogVGhlIG51bWJlciBvZiBzbGlkZXMgaXMgbm90IGV2ZW4gdG8gZ3JpZC5yb3dzLCBsb29wIG1vZGUgbWF5IG5vdCBmdW5jdGlvbiBwcm9wZXJseS4gWW91IG5lZWQgdG8gYWRkIG1vcmUgc2xpZGVzIChvciBtYWtlIGR1cGxpY2F0ZXMsIG9yIGVtcHR5IHNsaWRlcyknKTtcbiAgICB9XG4gICAgaW5pdFNsaWRlcygpO1xuICB9IGVsc2Uge1xuICAgIGluaXRTbGlkZXMoKTtcbiAgfVxuICBzd2lwZXIubG9vcEZpeCh7XG4gICAgc2xpZGVSZWFsSW5kZXgsXG4gICAgZGlyZWN0aW9uOiBwYXJhbXMuY2VudGVyZWRTbGlkZXMgPyB1bmRlZmluZWQgOiAnbmV4dCdcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGxvb3BGaXgoX3RlbXApIHtcbiAgbGV0IHtcbiAgICBzbGlkZVJlYWxJbmRleCxcbiAgICBzbGlkZVRvID0gdHJ1ZSxcbiAgICBkaXJlY3Rpb24sXG4gICAgc2V0VHJhbnNsYXRlLFxuICAgIGFjdGl2ZVNsaWRlSW5kZXgsXG4gICAgYnlDb250cm9sbGVyLFxuICAgIGJ5TW91c2V3aGVlbFxuICB9ID0gX3RlbXAgPT09IHZvaWQgMCA/IHt9IDogX3RlbXA7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGlmICghc3dpcGVyLnBhcmFtcy5sb29wKSByZXR1cm47XG4gIHN3aXBlci5lbWl0KCdiZWZvcmVMb29wRml4Jyk7XG4gIGNvbnN0IHtcbiAgICBzbGlkZXMsXG4gICAgYWxsb3dTbGlkZVByZXYsXG4gICAgYWxsb3dTbGlkZU5leHQsXG4gICAgc2xpZGVzRWwsXG4gICAgcGFyYW1zXG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IHtcbiAgICBjZW50ZXJlZFNsaWRlc1xuICB9ID0gcGFyYW1zO1xuICBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPSB0cnVlO1xuICBzd2lwZXIuYWxsb3dTbGlkZU5leHQgPSB0cnVlO1xuICBpZiAoc3dpcGVyLnZpcnR1YWwgJiYgcGFyYW1zLnZpcnR1YWwuZW5hYmxlZCkge1xuICAgIGlmIChzbGlkZVRvKSB7XG4gICAgICBpZiAoIXBhcmFtcy5jZW50ZXJlZFNsaWRlcyAmJiBzd2lwZXIuc25hcEluZGV4ID09PSAwKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGgsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICAgIH0gZWxzZSBpZiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzICYmIHN3aXBlci5zbmFwSW5kZXggPCBwYXJhbXMuc2xpZGVzUGVyVmlldykge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoICsgc3dpcGVyLnNuYXBJbmRleCwgMCwgZmFsc2UsIHRydWUpO1xuICAgICAgfSBlbHNlIGlmIChzd2lwZXIuc25hcEluZGV4ID09PSBzd2lwZXIuc25hcEdyaWQubGVuZ3RoIC0gMSkge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIudmlydHVhbC5zbGlkZXNCZWZvcmUsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID0gYWxsb3dTbGlkZVByZXY7XG4gICAgc3dpcGVyLmFsbG93U2xpZGVOZXh0ID0gYWxsb3dTbGlkZU5leHQ7XG4gICAgc3dpcGVyLmVtaXQoJ2xvb3BGaXgnKTtcbiAgICByZXR1cm47XG4gIH1cbiAgbGV0IHNsaWRlc1BlclZpZXcgPSBwYXJhbXMuc2xpZGVzUGVyVmlldztcbiAgaWYgKHNsaWRlc1BlclZpZXcgPT09ICdhdXRvJykge1xuICAgIHNsaWRlc1BlclZpZXcgPSBzd2lwZXIuc2xpZGVzUGVyVmlld0R5bmFtaWMoKTtcbiAgfSBlbHNlIHtcbiAgICBzbGlkZXNQZXJWaWV3ID0gTWF0aC5jZWlsKHBhcnNlRmxvYXQocGFyYW1zLnNsaWRlc1BlclZpZXcsIDEwKSk7XG4gICAgaWYgKGNlbnRlcmVkU2xpZGVzICYmIHNsaWRlc1BlclZpZXcgJSAyID09PSAwKSB7XG4gICAgICBzbGlkZXNQZXJWaWV3ID0gc2xpZGVzUGVyVmlldyArIDE7XG4gICAgfVxuICB9XG4gIGNvbnN0IHNsaWRlc1Blckdyb3VwID0gcGFyYW1zLnNsaWRlc1Blckdyb3VwQXV0byA/IHNsaWRlc1BlclZpZXcgOiBwYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG4gIGxldCBsb29wZWRTbGlkZXMgPSBzbGlkZXNQZXJHcm91cDtcbiAgaWYgKGxvb3BlZFNsaWRlcyAlIHNsaWRlc1Blckdyb3VwICE9PSAwKSB7XG4gICAgbG9vcGVkU2xpZGVzICs9IHNsaWRlc1Blckdyb3VwIC0gbG9vcGVkU2xpZGVzICUgc2xpZGVzUGVyR3JvdXA7XG4gIH1cbiAgbG9vcGVkU2xpZGVzICs9IHBhcmFtcy5sb29wQWRkaXRpb25hbFNsaWRlcztcbiAgc3dpcGVyLmxvb3BlZFNsaWRlcyA9IGxvb3BlZFNsaWRlcztcbiAgY29uc3QgZ3JpZEVuYWJsZWQgPSBzd2lwZXIuZ3JpZCAmJiBwYXJhbXMuZ3JpZCAmJiBwYXJhbXMuZ3JpZC5yb3dzID4gMTtcbiAgaWYgKHNsaWRlcy5sZW5ndGggPCBzbGlkZXNQZXJWaWV3ICsgbG9vcGVkU2xpZGVzKSB7XG4gICAgc2hvd1dhcm5pbmcoJ1N3aXBlciBMb29wIFdhcm5pbmc6IFRoZSBudW1iZXIgb2Ygc2xpZGVzIGlzIG5vdCBlbm91Z2ggZm9yIGxvb3AgbW9kZSwgaXQgd2lsbCBiZSBkaXNhYmxlZCBhbmQgbm90IGZ1bmN0aW9uIHByb3Blcmx5LiBZb3UgbmVlZCB0byBhZGQgbW9yZSBzbGlkZXMgKG9yIG1ha2UgZHVwbGljYXRlcykgb3IgbG93ZXIgdGhlIHZhbHVlcyBvZiBzbGlkZXNQZXJWaWV3IGFuZCBzbGlkZXNQZXJHcm91cCBwYXJhbWV0ZXJzJyk7XG4gIH0gZWxzZSBpZiAoZ3JpZEVuYWJsZWQgJiYgcGFyYW1zLmdyaWQuZmlsbCA9PT0gJ3JvdycpIHtcbiAgICBzaG93V2FybmluZygnU3dpcGVyIExvb3AgV2FybmluZzogTG9vcCBtb2RlIGlzIG5vdCBjb21wYXRpYmxlIHdpdGggZ3JpZC5maWxsID0gYHJvd2AnKTtcbiAgfVxuICBjb25zdCBwcmVwZW5kU2xpZGVzSW5kZXhlcyA9IFtdO1xuICBjb25zdCBhcHBlbmRTbGlkZXNJbmRleGVzID0gW107XG4gIGxldCBhY3RpdmVJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleDtcbiAgaWYgKHR5cGVvZiBhY3RpdmVTbGlkZUluZGV4ID09PSAndW5kZWZpbmVkJykge1xuICAgIGFjdGl2ZVNsaWRlSW5kZXggPSBzd2lwZXIuZ2V0U2xpZGVJbmRleChzbGlkZXMuZmlsdGVyKGVsID0+IGVsLmNsYXNzTGlzdC5jb250YWlucyhwYXJhbXMuc2xpZGVBY3RpdmVDbGFzcykpWzBdKTtcbiAgfSBlbHNlIHtcbiAgICBhY3RpdmVJbmRleCA9IGFjdGl2ZVNsaWRlSW5kZXg7XG4gIH1cbiAgY29uc3QgaXNOZXh0ID0gZGlyZWN0aW9uID09PSAnbmV4dCcgfHwgIWRpcmVjdGlvbjtcbiAgY29uc3QgaXNQcmV2ID0gZGlyZWN0aW9uID09PSAncHJldicgfHwgIWRpcmVjdGlvbjtcbiAgbGV0IHNsaWRlc1ByZXBlbmRlZCA9IDA7XG4gIGxldCBzbGlkZXNBcHBlbmRlZCA9IDA7XG4gIGNvbnN0IGNvbHMgPSBncmlkRW5hYmxlZCA/IE1hdGguY2VpbChzbGlkZXMubGVuZ3RoIC8gcGFyYW1zLmdyaWQucm93cykgOiBzbGlkZXMubGVuZ3RoO1xuICBjb25zdCBhY3RpdmVDb2xJbmRleCA9IGdyaWRFbmFibGVkID8gc2xpZGVzW2FjdGl2ZVNsaWRlSW5kZXhdLmNvbHVtbiA6IGFjdGl2ZVNsaWRlSW5kZXg7XG4gIGNvbnN0IGFjdGl2ZUNvbEluZGV4V2l0aFNoaWZ0ID0gYWN0aXZlQ29sSW5kZXggKyAoY2VudGVyZWRTbGlkZXMgJiYgdHlwZW9mIHNldFRyYW5zbGF0ZSA9PT0gJ3VuZGVmaW5lZCcgPyAtc2xpZGVzUGVyVmlldyAvIDIgKyAwLjUgOiAwKTtcbiAgLy8gcHJlcGVuZCBsYXN0IHNsaWRlcyBiZWZvcmUgc3RhcnRcbiAgaWYgKGFjdGl2ZUNvbEluZGV4V2l0aFNoaWZ0IDwgbG9vcGVkU2xpZGVzKSB7XG4gICAgc2xpZGVzUHJlcGVuZGVkID0gTWF0aC5tYXgobG9vcGVkU2xpZGVzIC0gYWN0aXZlQ29sSW5kZXhXaXRoU2hpZnQsIHNsaWRlc1Blckdyb3VwKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxvb3BlZFNsaWRlcyAtIGFjdGl2ZUNvbEluZGV4V2l0aFNoaWZ0OyBpICs9IDEpIHtcbiAgICAgIGNvbnN0IGluZGV4ID0gaSAtIE1hdGguZmxvb3IoaSAvIGNvbHMpICogY29scztcbiAgICAgIGlmIChncmlkRW5hYmxlZCkge1xuICAgICAgICBjb25zdCBjb2xJbmRleFRvUHJlcGVuZCA9IGNvbHMgLSBpbmRleCAtIDE7XG4gICAgICAgIGZvciAobGV0IGkgPSBzbGlkZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgICAgICBpZiAoc2xpZGVzW2ldLmNvbHVtbiA9PT0gY29sSW5kZXhUb1ByZXBlbmQpIHByZXBlbmRTbGlkZXNJbmRleGVzLnB1c2goaSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gc2xpZGVzLmZvckVhY2goKHNsaWRlLCBzbGlkZUluZGV4KSA9PiB7XG4gICAgICAgIC8vICAgaWYgKHNsaWRlLmNvbHVtbiA9PT0gY29sSW5kZXhUb1ByZXBlbmQpIHByZXBlbmRTbGlkZXNJbmRleGVzLnB1c2goc2xpZGVJbmRleCk7XG4gICAgICAgIC8vIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJlcGVuZFNsaWRlc0luZGV4ZXMucHVzaChjb2xzIC0gaW5kZXggLSAxKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAoYWN0aXZlQ29sSW5kZXhXaXRoU2hpZnQgKyBzbGlkZXNQZXJWaWV3ID4gY29scyAtIGxvb3BlZFNsaWRlcykge1xuICAgIHNsaWRlc0FwcGVuZGVkID0gTWF0aC5tYXgoYWN0aXZlQ29sSW5kZXhXaXRoU2hpZnQgLSAoY29scyAtIGxvb3BlZFNsaWRlcyAqIDIpLCBzbGlkZXNQZXJHcm91cCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXNBcHBlbmRlZDsgaSArPSAxKSB7XG4gICAgICBjb25zdCBpbmRleCA9IGkgLSBNYXRoLmZsb29yKGkgLyBjb2xzKSAqIGNvbHM7XG4gICAgICBpZiAoZ3JpZEVuYWJsZWQpIHtcbiAgICAgICAgc2xpZGVzLmZvckVhY2goKHNsaWRlLCBzbGlkZUluZGV4KSA9PiB7XG4gICAgICAgICAgaWYgKHNsaWRlLmNvbHVtbiA9PT0gaW5kZXgpIGFwcGVuZFNsaWRlc0luZGV4ZXMucHVzaChzbGlkZUluZGV4KTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhcHBlbmRTbGlkZXNJbmRleGVzLnB1c2goaW5kZXgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBzd2lwZXIuX19wcmV2ZW50T2JzZXJ2ZXJfXyA9IHRydWU7XG4gIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgc3dpcGVyLl9fcHJldmVudE9ic2VydmVyX18gPSBmYWxzZTtcbiAgfSk7XG4gIGlmIChpc1ByZXYpIHtcbiAgICBwcmVwZW5kU2xpZGVzSW5kZXhlcy5mb3JFYWNoKGluZGV4ID0+IHtcbiAgICAgIHNsaWRlc1tpbmRleF0uc3dpcGVyTG9vcE1vdmVET00gPSB0cnVlO1xuICAgICAgc2xpZGVzRWwucHJlcGVuZChzbGlkZXNbaW5kZXhdKTtcbiAgICAgIHNsaWRlc1tpbmRleF0uc3dpcGVyTG9vcE1vdmVET00gPSBmYWxzZTtcbiAgICB9KTtcbiAgfVxuICBpZiAoaXNOZXh0KSB7XG4gICAgYXBwZW5kU2xpZGVzSW5kZXhlcy5mb3JFYWNoKGluZGV4ID0+IHtcbiAgICAgIHNsaWRlc1tpbmRleF0uc3dpcGVyTG9vcE1vdmVET00gPSB0cnVlO1xuICAgICAgc2xpZGVzRWwuYXBwZW5kKHNsaWRlc1tpbmRleF0pO1xuICAgICAgc2xpZGVzW2luZGV4XS5zd2lwZXJMb29wTW92ZURPTSA9IGZhbHNlO1xuICAgIH0pO1xuICB9XG4gIHN3aXBlci5yZWNhbGNTbGlkZXMoKTtcbiAgaWYgKHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycpIHtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG4gIH0gZWxzZSBpZiAoZ3JpZEVuYWJsZWQgJiYgKHByZXBlbmRTbGlkZXNJbmRleGVzLmxlbmd0aCA+IDAgJiYgaXNQcmV2IHx8IGFwcGVuZFNsaWRlc0luZGV4ZXMubGVuZ3RoID4gMCAmJiBpc05leHQpKSB7XG4gICAgc3dpcGVyLnNsaWRlcy5mb3JFYWNoKChzbGlkZSwgc2xpZGVJbmRleCkgPT4ge1xuICAgICAgc3dpcGVyLmdyaWQudXBkYXRlU2xpZGUoc2xpZGVJbmRleCwgc2xpZGUsIHN3aXBlci5zbGlkZXMpO1xuICAgIH0pO1xuICB9XG4gIGlmIChwYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcykge1xuICAgIHN3aXBlci51cGRhdGVTbGlkZXNPZmZzZXQoKTtcbiAgfVxuICBpZiAoc2xpZGVUbykge1xuICAgIGlmIChwcmVwZW5kU2xpZGVzSW5kZXhlcy5sZW5ndGggPiAwICYmIGlzUHJldikge1xuICAgICAgaWYgKHR5cGVvZiBzbGlkZVJlYWxJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY29uc3QgY3VycmVudFNsaWRlVHJhbnNsYXRlID0gc3dpcGVyLnNsaWRlc0dyaWRbYWN0aXZlSW5kZXhdO1xuICAgICAgICBjb25zdCBuZXdTbGlkZVRyYW5zbGF0ZSA9IHN3aXBlci5zbGlkZXNHcmlkW2FjdGl2ZUluZGV4ICsgc2xpZGVzUHJlcGVuZGVkXTtcbiAgICAgICAgY29uc3QgZGlmZiA9IG5ld1NsaWRlVHJhbnNsYXRlIC0gY3VycmVudFNsaWRlVHJhbnNsYXRlO1xuICAgICAgICBpZiAoYnlNb3VzZXdoZWVsKSB7XG4gICAgICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZShzd2lwZXIudHJhbnNsYXRlIC0gZGlmZik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlVG8oYWN0aXZlSW5kZXggKyBNYXRoLmNlaWwoc2xpZGVzUHJlcGVuZGVkKSwgMCwgZmFsc2UsIHRydWUpO1xuICAgICAgICAgIGlmIChzZXRUcmFuc2xhdGUpIHtcbiAgICAgICAgICAgIHN3aXBlci50b3VjaEV2ZW50c0RhdGEuc3RhcnRUcmFuc2xhdGUgPSBzd2lwZXIudG91Y2hFdmVudHNEYXRhLnN0YXJ0VHJhbnNsYXRlIC0gZGlmZjtcbiAgICAgICAgICAgIHN3aXBlci50b3VjaEV2ZW50c0RhdGEuY3VycmVudFRyYW5zbGF0ZSA9IHN3aXBlci50b3VjaEV2ZW50c0RhdGEuY3VycmVudFRyYW5zbGF0ZSAtIGRpZmY7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoc2V0VHJhbnNsYXRlKSB7XG4gICAgICAgICAgY29uc3Qgc2hpZnQgPSBncmlkRW5hYmxlZCA/IHByZXBlbmRTbGlkZXNJbmRleGVzLmxlbmd0aCAvIHBhcmFtcy5ncmlkLnJvd3MgOiBwcmVwZW5kU2xpZGVzSW5kZXhlcy5sZW5ndGg7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4ICsgc2hpZnQsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgICBzd2lwZXIudG91Y2hFdmVudHNEYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBzd2lwZXIudHJhbnNsYXRlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChhcHBlbmRTbGlkZXNJbmRleGVzLmxlbmd0aCA+IDAgJiYgaXNOZXh0KSB7XG4gICAgICBpZiAodHlwZW9mIHNsaWRlUmVhbEluZGV4ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb25zdCBjdXJyZW50U2xpZGVUcmFuc2xhdGUgPSBzd2lwZXIuc2xpZGVzR3JpZFthY3RpdmVJbmRleF07XG4gICAgICAgIGNvbnN0IG5ld1NsaWRlVHJhbnNsYXRlID0gc3dpcGVyLnNsaWRlc0dyaWRbYWN0aXZlSW5kZXggLSBzbGlkZXNBcHBlbmRlZF07XG4gICAgICAgIGNvbnN0IGRpZmYgPSBuZXdTbGlkZVRyYW5zbGF0ZSAtIGN1cnJlbnRTbGlkZVRyYW5zbGF0ZTtcbiAgICAgICAgaWYgKGJ5TW91c2V3aGVlbCkge1xuICAgICAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUoc3dpcGVyLnRyYW5zbGF0ZSAtIGRpZmYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN3aXBlci5zbGlkZVRvKGFjdGl2ZUluZGV4IC0gc2xpZGVzQXBwZW5kZWQsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgICBpZiAoc2V0VHJhbnNsYXRlKSB7XG4gICAgICAgICAgICBzd2lwZXIudG91Y2hFdmVudHNEYXRhLnN0YXJ0VHJhbnNsYXRlID0gc3dpcGVyLnRvdWNoRXZlbnRzRGF0YS5zdGFydFRyYW5zbGF0ZSAtIGRpZmY7XG4gICAgICAgICAgICBzd2lwZXIudG91Y2hFdmVudHNEYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBzd2lwZXIudG91Y2hFdmVudHNEYXRhLmN1cnJlbnRUcmFuc2xhdGUgLSBkaWZmO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3Qgc2hpZnQgPSBncmlkRW5hYmxlZCA/IGFwcGVuZFNsaWRlc0luZGV4ZXMubGVuZ3RoIC8gcGFyYW1zLmdyaWQucm93cyA6IGFwcGVuZFNsaWRlc0luZGV4ZXMubGVuZ3RoO1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXggLSBzaGlmdCwgMCwgZmFsc2UsIHRydWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPSBhbGxvd1NsaWRlUHJldjtcbiAgc3dpcGVyLmFsbG93U2xpZGVOZXh0ID0gYWxsb3dTbGlkZU5leHQ7XG4gIGlmIChzd2lwZXIuY29udHJvbGxlciAmJiBzd2lwZXIuY29udHJvbGxlci5jb250cm9sICYmICFieUNvbnRyb2xsZXIpIHtcbiAgICBjb25zdCBsb29wUGFyYW1zID0ge1xuICAgICAgc2xpZGVSZWFsSW5kZXgsXG4gICAgICBkaXJlY3Rpb24sXG4gICAgICBzZXRUcmFuc2xhdGUsXG4gICAgICBhY3RpdmVTbGlkZUluZGV4LFxuICAgICAgYnlDb250cm9sbGVyOiB0cnVlXG4gICAgfTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShzd2lwZXIuY29udHJvbGxlci5jb250cm9sKSkge1xuICAgICAgc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbC5mb3JFYWNoKGMgPT4ge1xuICAgICAgICBpZiAoIWMuZGVzdHJveWVkICYmIGMucGFyYW1zLmxvb3ApIGMubG9vcEZpeCh7XG4gICAgICAgICAgLi4ubG9vcFBhcmFtcyxcbiAgICAgICAgICBzbGlkZVRvOiBjLnBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSBwYXJhbXMuc2xpZGVzUGVyVmlldyA/IHNsaWRlVG8gOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbCBpbnN0YW5jZW9mIHN3aXBlci5jb25zdHJ1Y3RvciAmJiBzd2lwZXIuY29udHJvbGxlci5jb250cm9sLnBhcmFtcy5sb29wKSB7XG4gICAgICBzd2lwZXIuY29udHJvbGxlci5jb250cm9sLmxvb3BGaXgoe1xuICAgICAgICAuLi5sb29wUGFyYW1zLFxuICAgICAgICBzbGlkZVRvOiBzd2lwZXIuY29udHJvbGxlci5jb250cm9sLnBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSBwYXJhbXMuc2xpZGVzUGVyVmlldyA/IHNsaWRlVG8gOiBmYWxzZVxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIHN3aXBlci5lbWl0KCdsb29wRml4Jyk7XG59XG5cbmZ1bmN0aW9uIGxvb3BEZXN0cm95KCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgIHNsaWRlc0VsXG4gIH0gPSBzd2lwZXI7XG4gIGlmICghcGFyYW1zLmxvb3AgfHwgc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpIHJldHVybjtcbiAgc3dpcGVyLnJlY2FsY1NsaWRlcygpO1xuICBjb25zdCBuZXdTbGlkZXNPcmRlciA9IFtdO1xuICBzd2lwZXIuc2xpZGVzLmZvckVhY2goc2xpZGVFbCA9PiB7XG4gICAgY29uc3QgaW5kZXggPSB0eXBlb2Ygc2xpZGVFbC5zd2lwZXJTbGlkZUluZGV4ID09PSAndW5kZWZpbmVkJyA/IHNsaWRlRWwuZ2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpICogMSA6IHNsaWRlRWwuc3dpcGVyU2xpZGVJbmRleDtcbiAgICBuZXdTbGlkZXNPcmRlcltpbmRleF0gPSBzbGlkZUVsO1xuICB9KTtcbiAgc3dpcGVyLnNsaWRlcy5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgIHNsaWRlRWwucmVtb3ZlQXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpO1xuICB9KTtcbiAgbmV3U2xpZGVzT3JkZXIuZm9yRWFjaChzbGlkZUVsID0+IHtcbiAgICBzbGlkZXNFbC5hcHBlbmQoc2xpZGVFbCk7XG4gIH0pO1xuICBzd2lwZXIucmVjYWxjU2xpZGVzKCk7XG4gIHN3aXBlci5zbGlkZVRvKHN3aXBlci5yZWFsSW5kZXgsIDApO1xufVxuXG52YXIgbG9vcCA9IHtcbiAgbG9vcENyZWF0ZSxcbiAgbG9vcEZpeCxcbiAgbG9vcERlc3Ryb3lcbn07XG5cbmZ1bmN0aW9uIHNldEdyYWJDdXJzb3IobW92aW5nKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGlmICghc3dpcGVyLnBhcmFtcy5zaW11bGF0ZVRvdWNoIHx8IHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzd2lwZXIuaXNMb2NrZWQgfHwgc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSByZXR1cm47XG4gIGNvbnN0IGVsID0gc3dpcGVyLnBhcmFtcy50b3VjaEV2ZW50c1RhcmdldCA9PT0gJ2NvbnRhaW5lcicgPyBzd2lwZXIuZWwgOiBzd2lwZXIud3JhcHBlckVsO1xuICBpZiAoc3dpcGVyLmlzRWxlbWVudCkge1xuICAgIHN3aXBlci5fX3ByZXZlbnRPYnNlcnZlcl9fID0gdHJ1ZTtcbiAgfVxuICBlbC5zdHlsZS5jdXJzb3IgPSAnbW92ZSc7XG4gIGVsLnN0eWxlLmN1cnNvciA9IG1vdmluZyA/ICdncmFiYmluZycgOiAnZ3JhYic7XG4gIGlmIChzd2lwZXIuaXNFbGVtZW50KSB7XG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgIHN3aXBlci5fX3ByZXZlbnRPYnNlcnZlcl9fID0gZmFsc2U7XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdW5zZXRHcmFiQ3Vyc29yKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBpZiAoc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHN3aXBlci5pc0xvY2tlZCB8fCBzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHN3aXBlci5pc0VsZW1lbnQpIHtcbiAgICBzd2lwZXIuX19wcmV2ZW50T2JzZXJ2ZXJfXyA9IHRydWU7XG4gIH1cbiAgc3dpcGVyW3N3aXBlci5wYXJhbXMudG91Y2hFdmVudHNUYXJnZXQgPT09ICdjb250YWluZXInID8gJ2VsJyA6ICd3cmFwcGVyRWwnXS5zdHlsZS5jdXJzb3IgPSAnJztcbiAgaWYgKHN3aXBlci5pc0VsZW1lbnQpIHtcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgc3dpcGVyLl9fcHJldmVudE9ic2VydmVyX18gPSBmYWxzZTtcbiAgICB9KTtcbiAgfVxufVxuXG52YXIgZ3JhYkN1cnNvciA9IHtcbiAgc2V0R3JhYkN1cnNvcixcbiAgdW5zZXRHcmFiQ3Vyc29yXG59O1xuXG4vLyBNb2RpZmllZCBmcm9tIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzU0NTIwNTU0L2N1c3RvbS1lbGVtZW50LWdldHJvb3Rub2RlLWNsb3Nlc3QtZnVuY3Rpb24tY3Jvc3NpbmctbXVsdGlwbGUtcGFyZW50LXNoYWRvd2RcbmZ1bmN0aW9uIGNsb3Nlc3RFbGVtZW50KHNlbGVjdG9yLCBiYXNlKSB7XG4gIGlmIChiYXNlID09PSB2b2lkIDApIHtcbiAgICBiYXNlID0gdGhpcztcbiAgfVxuICBmdW5jdGlvbiBfX2Nsb3Nlc3RGcm9tKGVsKSB7XG4gICAgaWYgKCFlbCB8fCBlbCA9PT0gZ2V0RG9jdW1lbnQoKSB8fCBlbCA9PT0gZ2V0V2luZG93KCkpIHJldHVybiBudWxsO1xuICAgIGlmIChlbC5hc3NpZ25lZFNsb3QpIGVsID0gZWwuYXNzaWduZWRTbG90O1xuICAgIGNvbnN0IGZvdW5kID0gZWwuY2xvc2VzdChzZWxlY3Rvcik7XG4gICAgaWYgKCFmb3VuZCAmJiAhZWwuZ2V0Um9vdE5vZGUpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gZm91bmQgfHwgX19jbG9zZXN0RnJvbShlbC5nZXRSb290Tm9kZSgpLmhvc3QpO1xuICB9XG4gIHJldHVybiBfX2Nsb3Nlc3RGcm9tKGJhc2UpO1xufVxuZnVuY3Rpb24gcHJldmVudEVkZ2VTd2lwZShzd2lwZXIsIGV2ZW50LCBzdGFydFgpIHtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXNcbiAgfSA9IHN3aXBlcjtcbiAgY29uc3QgZWRnZVN3aXBlRGV0ZWN0aW9uID0gcGFyYW1zLmVkZ2VTd2lwZURldGVjdGlvbjtcbiAgY29uc3QgZWRnZVN3aXBlVGhyZXNob2xkID0gcGFyYW1zLmVkZ2VTd2lwZVRocmVzaG9sZDtcbiAgaWYgKGVkZ2VTd2lwZURldGVjdGlvbiAmJiAoc3RhcnRYIDw9IGVkZ2VTd2lwZVRocmVzaG9sZCB8fCBzdGFydFggPj0gd2luZG93LmlubmVyV2lkdGggLSBlZGdlU3dpcGVUaHJlc2hvbGQpKSB7XG4gICAgaWYgKGVkZ2VTd2lwZURldGVjdGlvbiA9PT0gJ3ByZXZlbnQnKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cbmZ1bmN0aW9uIG9uVG91Y2hTdGFydChldmVudCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gIGxldCBlID0gZXZlbnQ7XG4gIGlmIChlLm9yaWdpbmFsRXZlbnQpIGUgPSBlLm9yaWdpbmFsRXZlbnQ7XG4gIGNvbnN0IGRhdGEgPSBzd2lwZXIudG91Y2hFdmVudHNEYXRhO1xuICBpZiAoZS50eXBlID09PSAncG9pbnRlcmRvd24nKSB7XG4gICAgaWYgKGRhdGEucG9pbnRlcklkICE9PSBudWxsICYmIGRhdGEucG9pbnRlcklkICE9PSBlLnBvaW50ZXJJZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkYXRhLnBvaW50ZXJJZCA9IGUucG9pbnRlcklkO1xuICB9IGVsc2UgaWYgKGUudHlwZSA9PT0gJ3RvdWNoc3RhcnQnICYmIGUudGFyZ2V0VG91Y2hlcy5sZW5ndGggPT09IDEpIHtcbiAgICBkYXRhLnRvdWNoSWQgPSBlLnRhcmdldFRvdWNoZXNbMF0uaWRlbnRpZmllcjtcbiAgfVxuICBpZiAoZS50eXBlID09PSAndG91Y2hzdGFydCcpIHtcbiAgICAvLyBkb24ndCBwcm9jZWVkIHRvdWNoIGV2ZW50XG4gICAgcHJldmVudEVkZ2VTd2lwZShzd2lwZXIsIGUsIGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWCk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgdG91Y2hlcyxcbiAgICBlbmFibGVkXG4gIH0gPSBzd2lwZXI7XG4gIGlmICghZW5hYmxlZCkgcmV0dXJuO1xuICBpZiAoIXBhcmFtcy5zaW11bGF0ZVRvdWNoICYmIGUucG9pbnRlclR5cGUgPT09ICdtb3VzZScpIHJldHVybjtcbiAgaWYgKHN3aXBlci5hbmltYXRpbmcgJiYgcGFyYW1zLnByZXZlbnRJbnRlcmFjdGlvbk9uVHJhbnNpdGlvbikge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoIXN3aXBlci5hbmltYXRpbmcgJiYgcGFyYW1zLmNzc01vZGUgJiYgcGFyYW1zLmxvb3ApIHtcbiAgICBzd2lwZXIubG9vcEZpeCgpO1xuICB9XG4gIGxldCB0YXJnZXRFbCA9IGUudGFyZ2V0O1xuICBpZiAocGFyYW1zLnRvdWNoRXZlbnRzVGFyZ2V0ID09PSAnd3JhcHBlcicpIHtcbiAgICBpZiAoIXN3aXBlci53cmFwcGVyRWwuY29udGFpbnModGFyZ2V0RWwpKSByZXR1cm47XG4gIH1cbiAgaWYgKCd3aGljaCcgaW4gZSAmJiBlLndoaWNoID09PSAzKSByZXR1cm47XG4gIGlmICgnYnV0dG9uJyBpbiBlICYmIGUuYnV0dG9uID4gMCkgcmV0dXJuO1xuICBpZiAoZGF0YS5pc1RvdWNoZWQgJiYgZGF0YS5pc01vdmVkKSByZXR1cm47XG5cbiAgLy8gY2hhbmdlIHRhcmdldCBlbCBmb3Igc2hhZG93IHJvb3QgY29tcG9uZW50XG4gIGNvbnN0IHN3aXBpbmdDbGFzc0hhc1ZhbHVlID0gISFwYXJhbXMubm9Td2lwaW5nQ2xhc3MgJiYgcGFyYW1zLm5vU3dpcGluZ0NsYXNzICE9PSAnJztcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gIGNvbnN0IGV2ZW50UGF0aCA9IGUuY29tcG9zZWRQYXRoID8gZS5jb21wb3NlZFBhdGgoKSA6IGUucGF0aDtcbiAgaWYgKHN3aXBpbmdDbGFzc0hhc1ZhbHVlICYmIGUudGFyZ2V0ICYmIGUudGFyZ2V0LnNoYWRvd1Jvb3QgJiYgZXZlbnRQYXRoKSB7XG4gICAgdGFyZ2V0RWwgPSBldmVudFBhdGhbMF07XG4gIH1cbiAgY29uc3Qgbm9Td2lwaW5nU2VsZWN0b3IgPSBwYXJhbXMubm9Td2lwaW5nU2VsZWN0b3IgPyBwYXJhbXMubm9Td2lwaW5nU2VsZWN0b3IgOiBgLiR7cGFyYW1zLm5vU3dpcGluZ0NsYXNzfWA7XG4gIGNvbnN0IGlzVGFyZ2V0U2hhZG93ID0gISEoZS50YXJnZXQgJiYgZS50YXJnZXQuc2hhZG93Um9vdCk7XG5cbiAgLy8gdXNlIGNsb3Nlc3RFbGVtZW50IGZvciBzaGFkb3cgcm9vdCBlbGVtZW50IHRvIGdldCB0aGUgYWN0dWFsIGNsb3Nlc3QgZm9yIG5lc3RlZCBzaGFkb3cgcm9vdCBlbGVtZW50XG4gIGlmIChwYXJhbXMubm9Td2lwaW5nICYmIChpc1RhcmdldFNoYWRvdyA/IGNsb3Nlc3RFbGVtZW50KG5vU3dpcGluZ1NlbGVjdG9yLCB0YXJnZXRFbCkgOiB0YXJnZXRFbC5jbG9zZXN0KG5vU3dpcGluZ1NlbGVjdG9yKSkpIHtcbiAgICBzd2lwZXIuYWxsb3dDbGljayA9IHRydWU7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwYXJhbXMuc3dpcGVIYW5kbGVyKSB7XG4gICAgaWYgKCF0YXJnZXRFbC5jbG9zZXN0KHBhcmFtcy5zd2lwZUhhbmRsZXIpKSByZXR1cm47XG4gIH1cbiAgdG91Y2hlcy5jdXJyZW50WCA9IGUucGFnZVg7XG4gIHRvdWNoZXMuY3VycmVudFkgPSBlLnBhZ2VZO1xuICBjb25zdCBzdGFydFggPSB0b3VjaGVzLmN1cnJlbnRYO1xuICBjb25zdCBzdGFydFkgPSB0b3VjaGVzLmN1cnJlbnRZO1xuXG4gIC8vIERvIE5PVCBzdGFydCBpZiBpT1MgZWRnZSBzd2lwZSBpcyBkZXRlY3RlZC4gT3RoZXJ3aXNlIGlPUyBhcHAgY2Fubm90IHN3aXBlLXRvLWdvLWJhY2sgYW55bW9yZVxuXG4gIGlmICghcHJldmVudEVkZ2VTd2lwZShzd2lwZXIsIGUsIHN0YXJ0WCkpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgT2JqZWN0LmFzc2lnbihkYXRhLCB7XG4gICAgaXNUb3VjaGVkOiB0cnVlLFxuICAgIGlzTW92ZWQ6IGZhbHNlLFxuICAgIGFsbG93VG91Y2hDYWxsYmFja3M6IHRydWUsXG4gICAgaXNTY3JvbGxpbmc6IHVuZGVmaW5lZCxcbiAgICBzdGFydE1vdmluZzogdW5kZWZpbmVkXG4gIH0pO1xuICB0b3VjaGVzLnN0YXJ0WCA9IHN0YXJ0WDtcbiAgdG91Y2hlcy5zdGFydFkgPSBzdGFydFk7XG4gIGRhdGEudG91Y2hTdGFydFRpbWUgPSBub3coKTtcbiAgc3dpcGVyLmFsbG93Q2xpY2sgPSB0cnVlO1xuICBzd2lwZXIudXBkYXRlU2l6ZSgpO1xuICBzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPSB1bmRlZmluZWQ7XG4gIGlmIChwYXJhbXMudGhyZXNob2xkID4gMCkgZGF0YS5hbGxvd1RocmVzaG9sZE1vdmUgPSBmYWxzZTtcbiAgbGV0IHByZXZlbnREZWZhdWx0ID0gdHJ1ZTtcbiAgaWYgKHRhcmdldEVsLm1hdGNoZXMoZGF0YS5mb2N1c2FibGVFbGVtZW50cykpIHtcbiAgICBwcmV2ZW50RGVmYXVsdCA9IGZhbHNlO1xuICAgIGlmICh0YXJnZXRFbC5ub2RlTmFtZSA9PT0gJ1NFTEVDVCcpIHtcbiAgICAgIGRhdGEuaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIGlmIChkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQubWF0Y2hlcyhkYXRhLmZvY3VzYWJsZUVsZW1lbnRzKSAmJiBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICE9PSB0YXJnZXRFbCkge1xuICAgIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQuYmx1cigpO1xuICB9XG4gIGNvbnN0IHNob3VsZFByZXZlbnREZWZhdWx0ID0gcHJldmVudERlZmF1bHQgJiYgc3dpcGVyLmFsbG93VG91Y2hNb3ZlICYmIHBhcmFtcy50b3VjaFN0YXJ0UHJldmVudERlZmF1bHQ7XG4gIGlmICgocGFyYW1zLnRvdWNoU3RhcnRGb3JjZVByZXZlbnREZWZhdWx0IHx8IHNob3VsZFByZXZlbnREZWZhdWx0KSAmJiAhdGFyZ2V0RWwuaXNDb250ZW50RWRpdGFibGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gIH1cbiAgaWYgKHBhcmFtcy5mcmVlTW9kZSAmJiBwYXJhbXMuZnJlZU1vZGUuZW5hYmxlZCAmJiBzd2lwZXIuZnJlZU1vZGUgJiYgc3dpcGVyLmFuaW1hdGluZyAmJiAhcGFyYW1zLmNzc01vZGUpIHtcbiAgICBzd2lwZXIuZnJlZU1vZGUub25Ub3VjaFN0YXJ0KCk7XG4gIH1cbiAgc3dpcGVyLmVtaXQoJ3RvdWNoU3RhcnQnLCBlKTtcbn1cblxuZnVuY3Rpb24gb25Ub3VjaE1vdmUoZXZlbnQpIHtcbiAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBkYXRhID0gc3dpcGVyLnRvdWNoRXZlbnRzRGF0YTtcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICB0b3VjaGVzLFxuICAgIHJ0bFRyYW5zbGF0ZTogcnRsLFxuICAgIGVuYWJsZWRcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKCFlbmFibGVkKSByZXR1cm47XG4gIGlmICghcGFyYW1zLnNpbXVsYXRlVG91Y2ggJiYgZXZlbnQucG9pbnRlclR5cGUgPT09ICdtb3VzZScpIHJldHVybjtcbiAgbGV0IGUgPSBldmVudDtcbiAgaWYgKGUub3JpZ2luYWxFdmVudCkgZSA9IGUub3JpZ2luYWxFdmVudDtcbiAgaWYgKGUudHlwZSA9PT0gJ3BvaW50ZXJtb3ZlJykge1xuICAgIGlmIChkYXRhLnRvdWNoSWQgIT09IG51bGwpIHJldHVybjsgLy8gcmV0dXJuIGZyb20gcG9pbnRlciBpZiB3ZSB1c2UgdG91Y2hcbiAgICBjb25zdCBpZCA9IGUucG9pbnRlcklkO1xuICAgIGlmIChpZCAhPT0gZGF0YS5wb2ludGVySWQpIHJldHVybjtcbiAgfVxuICBsZXQgdGFyZ2V0VG91Y2g7XG4gIGlmIChlLnR5cGUgPT09ICd0b3VjaG1vdmUnKSB7XG4gICAgdGFyZ2V0VG91Y2ggPSBbLi4uZS5jaGFuZ2VkVG91Y2hlc10uZmlsdGVyKHQgPT4gdC5pZGVudGlmaWVyID09PSBkYXRhLnRvdWNoSWQpWzBdO1xuICAgIGlmICghdGFyZ2V0VG91Y2ggfHwgdGFyZ2V0VG91Y2guaWRlbnRpZmllciAhPT0gZGF0YS50b3VjaElkKSByZXR1cm47XG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0VG91Y2ggPSBlO1xuICB9XG4gIGlmICghZGF0YS5pc1RvdWNoZWQpIHtcbiAgICBpZiAoZGF0YS5zdGFydE1vdmluZyAmJiBkYXRhLmlzU2Nyb2xsaW5nKSB7XG4gICAgICBzd2lwZXIuZW1pdCgndG91Y2hNb3ZlT3Bwb3NpdGUnLCBlKTtcbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IHBhZ2VYID0gdGFyZ2V0VG91Y2gucGFnZVg7XG4gIGNvbnN0IHBhZ2VZID0gdGFyZ2V0VG91Y2gucGFnZVk7XG4gIGlmIChlLnByZXZlbnRlZEJ5TmVzdGVkU3dpcGVyKSB7XG4gICAgdG91Y2hlcy5zdGFydFggPSBwYWdlWDtcbiAgICB0b3VjaGVzLnN0YXJ0WSA9IHBhZ2VZO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoIXN3aXBlci5hbGxvd1RvdWNoTW92ZSkge1xuICAgIGlmICghZS50YXJnZXQubWF0Y2hlcyhkYXRhLmZvY3VzYWJsZUVsZW1lbnRzKSkge1xuICAgICAgc3dpcGVyLmFsbG93Q2xpY2sgPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGRhdGEuaXNUb3VjaGVkKSB7XG4gICAgICBPYmplY3QuYXNzaWduKHRvdWNoZXMsIHtcbiAgICAgICAgc3RhcnRYOiBwYWdlWCxcbiAgICAgICAgc3RhcnRZOiBwYWdlWSxcbiAgICAgICAgY3VycmVudFg6IHBhZ2VYLFxuICAgICAgICBjdXJyZW50WTogcGFnZVlcbiAgICAgIH0pO1xuICAgICAgZGF0YS50b3VjaFN0YXJ0VGltZSA9IG5vdygpO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHBhcmFtcy50b3VjaFJlbGVhc2VPbkVkZ2VzICYmICFwYXJhbXMubG9vcCkge1xuICAgIGlmIChzd2lwZXIuaXNWZXJ0aWNhbCgpKSB7XG4gICAgICAvLyBWZXJ0aWNhbFxuICAgICAgaWYgKHBhZ2VZIDwgdG91Y2hlcy5zdGFydFkgJiYgc3dpcGVyLnRyYW5zbGF0ZSA8PSBzd2lwZXIubWF4VHJhbnNsYXRlKCkgfHwgcGFnZVkgPiB0b3VjaGVzLnN0YXJ0WSAmJiBzd2lwZXIudHJhbnNsYXRlID49IHN3aXBlci5taW5UcmFuc2xhdGUoKSkge1xuICAgICAgICBkYXRhLmlzVG91Y2hlZCA9IGZhbHNlO1xuICAgICAgICBkYXRhLmlzTW92ZWQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocGFnZVggPCB0b3VjaGVzLnN0YXJ0WCAmJiBzd2lwZXIudHJhbnNsYXRlIDw9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSB8fCBwYWdlWCA+IHRvdWNoZXMuc3RhcnRYICYmIHN3aXBlci50cmFuc2xhdGUgPj0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG4gIGlmIChkb2N1bWVudC5hY3RpdmVFbGVtZW50KSB7XG4gICAgaWYgKGUudGFyZ2V0ID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmIGUudGFyZ2V0Lm1hdGNoZXMoZGF0YS5mb2N1c2FibGVFbGVtZW50cykpIHtcbiAgICAgIGRhdGEuaXNNb3ZlZCA9IHRydWU7XG4gICAgICBzd2lwZXIuYWxsb3dDbGljayA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuICBpZiAoZGF0YS5hbGxvd1RvdWNoQ2FsbGJhY2tzKSB7XG4gICAgc3dpcGVyLmVtaXQoJ3RvdWNoTW92ZScsIGUpO1xuICB9XG4gIHRvdWNoZXMucHJldmlvdXNYID0gdG91Y2hlcy5jdXJyZW50WDtcbiAgdG91Y2hlcy5wcmV2aW91c1kgPSB0b3VjaGVzLmN1cnJlbnRZO1xuICB0b3VjaGVzLmN1cnJlbnRYID0gcGFnZVg7XG4gIHRvdWNoZXMuY3VycmVudFkgPSBwYWdlWTtcbiAgY29uc3QgZGlmZlggPSB0b3VjaGVzLmN1cnJlbnRYIC0gdG91Y2hlcy5zdGFydFg7XG4gIGNvbnN0IGRpZmZZID0gdG91Y2hlcy5jdXJyZW50WSAtIHRvdWNoZXMuc3RhcnRZO1xuICBpZiAoc3dpcGVyLnBhcmFtcy50aHJlc2hvbGQgJiYgTWF0aC5zcXJ0KGRpZmZYICoqIDIgKyBkaWZmWSAqKiAyKSA8IHN3aXBlci5wYXJhbXMudGhyZXNob2xkKSByZXR1cm47XG4gIGlmICh0eXBlb2YgZGF0YS5pc1Njcm9sbGluZyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBsZXQgdG91Y2hBbmdsZTtcbiAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpICYmIHRvdWNoZXMuY3VycmVudFkgPT09IHRvdWNoZXMuc3RhcnRZIHx8IHN3aXBlci5pc1ZlcnRpY2FsKCkgJiYgdG91Y2hlcy5jdXJyZW50WCA9PT0gdG91Y2hlcy5zdGFydFgpIHtcbiAgICAgIGRhdGEuaXNTY3JvbGxpbmcgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICBpZiAoZGlmZlggKiBkaWZmWCArIGRpZmZZICogZGlmZlkgPj0gMjUpIHtcbiAgICAgICAgdG91Y2hBbmdsZSA9IE1hdGguYXRhbjIoTWF0aC5hYnMoZGlmZlkpLCBNYXRoLmFicyhkaWZmWCkpICogMTgwIC8gTWF0aC5QSTtcbiAgICAgICAgZGF0YS5pc1Njcm9sbGluZyA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHRvdWNoQW5nbGUgPiBwYXJhbXMudG91Y2hBbmdsZSA6IDkwIC0gdG91Y2hBbmdsZSA+IHBhcmFtcy50b3VjaEFuZ2xlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoZGF0YS5pc1Njcm9sbGluZykge1xuICAgIHN3aXBlci5lbWl0KCd0b3VjaE1vdmVPcHBvc2l0ZScsIGUpO1xuICB9XG4gIGlmICh0eXBlb2YgZGF0YS5zdGFydE1vdmluZyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAodG91Y2hlcy5jdXJyZW50WCAhPT0gdG91Y2hlcy5zdGFydFggfHwgdG91Y2hlcy5jdXJyZW50WSAhPT0gdG91Y2hlcy5zdGFydFkpIHtcbiAgICAgIGRhdGEuc3RhcnRNb3ZpbmcgPSB0cnVlO1xuICAgIH1cbiAgfVxuICBpZiAoZGF0YS5pc1Njcm9sbGluZyB8fCBlLnR5cGUgPT09ICd0b3VjaG1vdmUnICYmIGRhdGEucHJldmVudFRvdWNoTW92ZUZyb21Qb2ludGVyTW92ZSkge1xuICAgIGRhdGEuaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICghZGF0YS5zdGFydE1vdmluZykge1xuICAgIHJldHVybjtcbiAgfVxuICBzd2lwZXIuYWxsb3dDbGljayA9IGZhbHNlO1xuICBpZiAoIXBhcmFtcy5jc3NNb2RlICYmIGUuY2FuY2VsYWJsZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgfVxuICBpZiAocGFyYW1zLnRvdWNoTW92ZVN0b3BQcm9wYWdhdGlvbiAmJiAhcGFyYW1zLm5lc3RlZCkge1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gIH1cbiAgbGV0IGRpZmYgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBkaWZmWCA6IGRpZmZZO1xuICBsZXQgdG91Y2hlc0RpZmYgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyB0b3VjaGVzLmN1cnJlbnRYIC0gdG91Y2hlcy5wcmV2aW91c1ggOiB0b3VjaGVzLmN1cnJlbnRZIC0gdG91Y2hlcy5wcmV2aW91c1k7XG4gIGlmIChwYXJhbXMub25lV2F5TW92ZW1lbnQpIHtcbiAgICBkaWZmID0gTWF0aC5hYnMoZGlmZikgKiAocnRsID8gMSA6IC0xKTtcbiAgICB0b3VjaGVzRGlmZiA9IE1hdGguYWJzKHRvdWNoZXNEaWZmKSAqIChydGwgPyAxIDogLTEpO1xuICB9XG4gIHRvdWNoZXMuZGlmZiA9IGRpZmY7XG4gIGRpZmYgKj0gcGFyYW1zLnRvdWNoUmF0aW87XG4gIGlmIChydGwpIHtcbiAgICBkaWZmID0gLWRpZmY7XG4gICAgdG91Y2hlc0RpZmYgPSAtdG91Y2hlc0RpZmY7XG4gIH1cbiAgY29uc3QgcHJldlRvdWNoZXNEaXJlY3Rpb24gPSBzd2lwZXIudG91Y2hlc0RpcmVjdGlvbjtcbiAgc3dpcGVyLnN3aXBlRGlyZWN0aW9uID0gZGlmZiA+IDAgPyAncHJldicgOiAnbmV4dCc7XG4gIHN3aXBlci50b3VjaGVzRGlyZWN0aW9uID0gdG91Y2hlc0RpZmYgPiAwID8gJ3ByZXYnIDogJ25leHQnO1xuICBjb25zdCBpc0xvb3AgPSBzd2lwZXIucGFyYW1zLmxvb3AgJiYgIXBhcmFtcy5jc3NNb2RlO1xuICBjb25zdCBhbGxvd0xvb3BGaXggPSBzd2lwZXIudG91Y2hlc0RpcmVjdGlvbiA9PT0gJ25leHQnICYmIHN3aXBlci5hbGxvd1NsaWRlTmV4dCB8fCBzd2lwZXIudG91Y2hlc0RpcmVjdGlvbiA9PT0gJ3ByZXYnICYmIHN3aXBlci5hbGxvd1NsaWRlUHJldjtcbiAgaWYgKCFkYXRhLmlzTW92ZWQpIHtcbiAgICBpZiAoaXNMb29wICYmIGFsbG93TG9vcEZpeCkge1xuICAgICAgc3dpcGVyLmxvb3BGaXgoe1xuICAgICAgICBkaXJlY3Rpb246IHN3aXBlci5zd2lwZURpcmVjdGlvblxuICAgICAgfSk7XG4gICAgfVxuICAgIGRhdGEuc3RhcnRUcmFuc2xhdGUgPSBzd2lwZXIuZ2V0VHJhbnNsYXRlKCk7XG4gICAgc3dpcGVyLnNldFRyYW5zaXRpb24oMCk7XG4gICAgaWYgKHN3aXBlci5hbmltYXRpbmcpIHtcbiAgICAgIGNvbnN0IGV2dCA9IG5ldyB3aW5kb3cuQ3VzdG9tRXZlbnQoJ3RyYW5zaXRpb25lbmQnLCB7XG4gICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgIGNhbmNlbGFibGU6IHRydWUsXG4gICAgICAgIGRldGFpbDoge1xuICAgICAgICAgIGJ5U3dpcGVyVG91Y2hNb3ZlOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgc3dpcGVyLndyYXBwZXJFbC5kaXNwYXRjaEV2ZW50KGV2dCk7XG4gICAgfVxuICAgIGRhdGEuYWxsb3dNb21lbnR1bUJvdW5jZSA9IGZhbHNlO1xuICAgIC8vIEdyYWIgQ3Vyc29yXG4gICAgaWYgKHBhcmFtcy5ncmFiQ3Vyc29yICYmIChzd2lwZXIuYWxsb3dTbGlkZU5leHQgPT09IHRydWUgfHwgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID09PSB0cnVlKSkge1xuICAgICAgc3dpcGVyLnNldEdyYWJDdXJzb3IodHJ1ZSk7XG4gICAgfVxuICAgIHN3aXBlci5lbWl0KCdzbGlkZXJGaXJzdE1vdmUnLCBlKTtcbiAgfVxuICBsZXQgbG9vcEZpeGVkO1xuICBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgaWYgKGRhdGEuaXNNb3ZlZCAmJiBkYXRhLmFsbG93VGhyZXNob2xkTW92ZSAmJiBwcmV2VG91Y2hlc0RpcmVjdGlvbiAhPT0gc3dpcGVyLnRvdWNoZXNEaXJlY3Rpb24gJiYgaXNMb29wICYmIGFsbG93TG9vcEZpeCAmJiBNYXRoLmFicyhkaWZmKSA+PSAxKSB7XG4gICAgT2JqZWN0LmFzc2lnbih0b3VjaGVzLCB7XG4gICAgICBzdGFydFg6IHBhZ2VYLFxuICAgICAgc3RhcnRZOiBwYWdlWSxcbiAgICAgIGN1cnJlbnRYOiBwYWdlWCxcbiAgICAgIGN1cnJlbnRZOiBwYWdlWSxcbiAgICAgIHN0YXJ0VHJhbnNsYXRlOiBkYXRhLmN1cnJlbnRUcmFuc2xhdGVcbiAgICB9KTtcbiAgICBkYXRhLmxvb3BTd2FwUmVzZXQgPSB0cnVlO1xuICAgIGRhdGEuc3RhcnRUcmFuc2xhdGUgPSBkYXRhLmN1cnJlbnRUcmFuc2xhdGU7XG4gICAgcmV0dXJuO1xuICB9XG4gIHN3aXBlci5lbWl0KCdzbGlkZXJNb3ZlJywgZSk7XG4gIGRhdGEuaXNNb3ZlZCA9IHRydWU7XG4gIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRpZmYgKyBkYXRhLnN0YXJ0VHJhbnNsYXRlO1xuICBsZXQgZGlzYWJsZVBhcmVudFN3aXBlciA9IHRydWU7XG4gIGxldCByZXNpc3RhbmNlUmF0aW8gPSBwYXJhbXMucmVzaXN0YW5jZVJhdGlvO1xuICBpZiAocGFyYW1zLnRvdWNoUmVsZWFzZU9uRWRnZXMpIHtcbiAgICByZXNpc3RhbmNlUmF0aW8gPSAwO1xuICB9XG4gIGlmIChkaWZmID4gMCkge1xuICAgIGlmIChpc0xvb3AgJiYgYWxsb3dMb29wRml4ICYmICFsb29wRml4ZWQgJiYgZGF0YS5hbGxvd1RocmVzaG9sZE1vdmUgJiYgZGF0YS5jdXJyZW50VHJhbnNsYXRlID4gKHBhcmFtcy5jZW50ZXJlZFNsaWRlcyA/IHN3aXBlci5taW5UcmFuc2xhdGUoKSAtIHN3aXBlci5zbGlkZXNTaXplc0dyaWRbc3dpcGVyLmFjdGl2ZUluZGV4ICsgMV0gOiBzd2lwZXIubWluVHJhbnNsYXRlKCkpKSB7XG4gICAgICBzd2lwZXIubG9vcEZpeCh7XG4gICAgICAgIGRpcmVjdGlvbjogJ3ByZXYnLFxuICAgICAgICBzZXRUcmFuc2xhdGU6IHRydWUsXG4gICAgICAgIGFjdGl2ZVNsaWRlSW5kZXg6IDBcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoZGF0YS5jdXJyZW50VHJhbnNsYXRlID4gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSB7XG4gICAgICBkaXNhYmxlUGFyZW50U3dpcGVyID0gZmFsc2U7XG4gICAgICBpZiAocGFyYW1zLnJlc2lzdGFuY2UpIHtcbiAgICAgICAgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpIC0gMSArICgtc3dpcGVyLm1pblRyYW5zbGF0ZSgpICsgZGF0YS5zdGFydFRyYW5zbGF0ZSArIGRpZmYpICoqIHJlc2lzdGFuY2VSYXRpbztcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAoZGlmZiA8IDApIHtcbiAgICBpZiAoaXNMb29wICYmIGFsbG93TG9vcEZpeCAmJiAhbG9vcEZpeGVkICYmIGRhdGEuYWxsb3dUaHJlc2hvbGRNb3ZlICYmIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA8IChwYXJhbXMuY2VudGVyZWRTbGlkZXMgPyBzd2lwZXIubWF4VHJhbnNsYXRlKCkgKyBzd2lwZXIuc2xpZGVzU2l6ZXNHcmlkW3N3aXBlci5zbGlkZXNTaXplc0dyaWQubGVuZ3RoIC0gMV0gOiBzd2lwZXIubWF4VHJhbnNsYXRlKCkpKSB7XG4gICAgICBzd2lwZXIubG9vcEZpeCh7XG4gICAgICAgIGRpcmVjdGlvbjogJ25leHQnLFxuICAgICAgICBzZXRUcmFuc2xhdGU6IHRydWUsXG4gICAgICAgIGFjdGl2ZVNsaWRlSW5kZXg6IHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gKHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgPyBzd2lwZXIuc2xpZGVzUGVyVmlld0R5bmFtaWMoKSA6IE1hdGguY2VpbChwYXJzZUZsb2F0KHBhcmFtcy5zbGlkZXNQZXJWaWV3LCAxMCkpKVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPCBzd2lwZXIubWF4VHJhbnNsYXRlKCkpIHtcbiAgICAgIGRpc2FibGVQYXJlbnRTd2lwZXIgPSBmYWxzZTtcbiAgICAgIGlmIChwYXJhbXMucmVzaXN0YW5jZSkge1xuICAgICAgICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBzd2lwZXIubWF4VHJhbnNsYXRlKCkgKyAxIC0gKHN3aXBlci5tYXhUcmFuc2xhdGUoKSAtIGRhdGEuc3RhcnRUcmFuc2xhdGUgLSBkaWZmKSAqKiByZXNpc3RhbmNlUmF0aW87XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChkaXNhYmxlUGFyZW50U3dpcGVyKSB7XG4gICAgZS5wcmV2ZW50ZWRCeU5lc3RlZFN3aXBlciA9IHRydWU7XG4gIH1cblxuICAvLyBEaXJlY3Rpb25zIGxvY2tzXG4gIGlmICghc3dpcGVyLmFsbG93U2xpZGVOZXh0ICYmIHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ25leHQnICYmIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA8IGRhdGEuc3RhcnRUcmFuc2xhdGUpIHtcbiAgICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBkYXRhLnN0YXJ0VHJhbnNsYXRlO1xuICB9XG4gIGlmICghc3dpcGVyLmFsbG93U2xpZGVQcmV2ICYmIHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ3ByZXYnICYmIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA+IGRhdGEuc3RhcnRUcmFuc2xhdGUpIHtcbiAgICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBkYXRhLnN0YXJ0VHJhbnNsYXRlO1xuICB9XG4gIGlmICghc3dpcGVyLmFsbG93U2xpZGVQcmV2ICYmICFzd2lwZXIuYWxsb3dTbGlkZU5leHQpIHtcbiAgICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBkYXRhLnN0YXJ0VHJhbnNsYXRlO1xuICB9XG5cbiAgLy8gVGhyZXNob2xkXG4gIGlmIChwYXJhbXMudGhyZXNob2xkID4gMCkge1xuICAgIGlmIChNYXRoLmFicyhkaWZmKSA+IHBhcmFtcy50aHJlc2hvbGQgfHwgZGF0YS5hbGxvd1RocmVzaG9sZE1vdmUpIHtcbiAgICAgIGlmICghZGF0YS5hbGxvd1RocmVzaG9sZE1vdmUpIHtcbiAgICAgICAgZGF0YS5hbGxvd1RocmVzaG9sZE1vdmUgPSB0cnVlO1xuICAgICAgICB0b3VjaGVzLnN0YXJ0WCA9IHRvdWNoZXMuY3VycmVudFg7XG4gICAgICAgIHRvdWNoZXMuc3RhcnRZID0gdG91Y2hlcy5jdXJyZW50WTtcbiAgICAgICAgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gZGF0YS5zdGFydFRyYW5zbGF0ZTtcbiAgICAgICAgdG91Y2hlcy5kaWZmID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gdG91Y2hlcy5jdXJyZW50WCAtIHRvdWNoZXMuc3RhcnRYIDogdG91Y2hlcy5jdXJyZW50WSAtIHRvdWNoZXMuc3RhcnRZO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG4gIGlmICghcGFyYW1zLmZvbGxvd0ZpbmdlciB8fCBwYXJhbXMuY3NzTW9kZSkgcmV0dXJuO1xuXG4gIC8vIFVwZGF0ZSBhY3RpdmUgaW5kZXggaW4gZnJlZSBtb2RlXG4gIGlmIChwYXJhbXMuZnJlZU1vZGUgJiYgcGFyYW1zLmZyZWVNb2RlLmVuYWJsZWQgJiYgc3dpcGVyLmZyZWVNb2RlIHx8IHBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzKSB7XG4gICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgfVxuICBpZiAocGFyYW1zLmZyZWVNb2RlICYmIHBhcmFtcy5mcmVlTW9kZS5lbmFibGVkICYmIHN3aXBlci5mcmVlTW9kZSkge1xuICAgIHN3aXBlci5mcmVlTW9kZS5vblRvdWNoTW92ZSgpO1xuICB9XG4gIC8vIFVwZGF0ZSBwcm9ncmVzc1xuICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MoZGF0YS5jdXJyZW50VHJhbnNsYXRlKTtcbiAgLy8gVXBkYXRlIHRyYW5zbGF0ZVxuICBzd2lwZXIuc2V0VHJhbnNsYXRlKGRhdGEuY3VycmVudFRyYW5zbGF0ZSk7XG59XG5cbmZ1bmN0aW9uIG9uVG91Y2hFbmQoZXZlbnQpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgZGF0YSA9IHN3aXBlci50b3VjaEV2ZW50c0RhdGE7XG4gIGxldCBlID0gZXZlbnQ7XG4gIGlmIChlLm9yaWdpbmFsRXZlbnQpIGUgPSBlLm9yaWdpbmFsRXZlbnQ7XG4gIGxldCB0YXJnZXRUb3VjaDtcbiAgY29uc3QgaXNUb3VjaEV2ZW50ID0gZS50eXBlID09PSAndG91Y2hlbmQnIHx8IGUudHlwZSA9PT0gJ3RvdWNoY2FuY2VsJztcbiAgaWYgKCFpc1RvdWNoRXZlbnQpIHtcbiAgICBpZiAoZGF0YS50b3VjaElkICE9PSBudWxsKSByZXR1cm47IC8vIHJldHVybiBmcm9tIHBvaW50ZXIgaWYgd2UgdXNlIHRvdWNoXG4gICAgaWYgKGUucG9pbnRlcklkICE9PSBkYXRhLnBvaW50ZXJJZCkgcmV0dXJuO1xuICAgIHRhcmdldFRvdWNoID0gZTtcbiAgfSBlbHNlIHtcbiAgICB0YXJnZXRUb3VjaCA9IFsuLi5lLmNoYW5nZWRUb3VjaGVzXS5maWx0ZXIodCA9PiB0LmlkZW50aWZpZXIgPT09IGRhdGEudG91Y2hJZClbMF07XG4gICAgaWYgKCF0YXJnZXRUb3VjaCB8fCB0YXJnZXRUb3VjaC5pZGVudGlmaWVyICE9PSBkYXRhLnRvdWNoSWQpIHJldHVybjtcbiAgfVxuICBpZiAoWydwb2ludGVyY2FuY2VsJywgJ3BvaW50ZXJvdXQnLCAncG9pbnRlcmxlYXZlJywgJ2NvbnRleHRtZW51J10uaW5jbHVkZXMoZS50eXBlKSkge1xuICAgIGNvbnN0IHByb2NlZWQgPSBbJ3BvaW50ZXJjYW5jZWwnLCAnY29udGV4dG1lbnUnXS5pbmNsdWRlcyhlLnR5cGUpICYmIChzd2lwZXIuYnJvd3Nlci5pc1NhZmFyaSB8fCBzd2lwZXIuYnJvd3Nlci5pc1dlYlZpZXcpO1xuICAgIGlmICghcHJvY2VlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuICBkYXRhLnBvaW50ZXJJZCA9IG51bGw7XG4gIGRhdGEudG91Y2hJZCA9IG51bGw7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgdG91Y2hlcyxcbiAgICBydGxUcmFuc2xhdGU6IHJ0bCxcbiAgICBzbGlkZXNHcmlkLFxuICAgIGVuYWJsZWRcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKCFlbmFibGVkKSByZXR1cm47XG4gIGlmICghcGFyYW1zLnNpbXVsYXRlVG91Y2ggJiYgZS5wb2ludGVyVHlwZSA9PT0gJ21vdXNlJykgcmV0dXJuO1xuICBpZiAoZGF0YS5hbGxvd1RvdWNoQ2FsbGJhY2tzKSB7XG4gICAgc3dpcGVyLmVtaXQoJ3RvdWNoRW5kJywgZSk7XG4gIH1cbiAgZGF0YS5hbGxvd1RvdWNoQ2FsbGJhY2tzID0gZmFsc2U7XG4gIGlmICghZGF0YS5pc1RvdWNoZWQpIHtcbiAgICBpZiAoZGF0YS5pc01vdmVkICYmIHBhcmFtcy5ncmFiQ3Vyc29yKSB7XG4gICAgICBzd2lwZXIuc2V0R3JhYkN1cnNvcihmYWxzZSk7XG4gICAgfVxuICAgIGRhdGEuaXNNb3ZlZCA9IGZhbHNlO1xuICAgIGRhdGEuc3RhcnRNb3ZpbmcgPSBmYWxzZTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBSZXR1cm4gR3JhYiBDdXJzb3JcbiAgaWYgKHBhcmFtcy5ncmFiQ3Vyc29yICYmIGRhdGEuaXNNb3ZlZCAmJiBkYXRhLmlzVG91Y2hlZCAmJiAoc3dpcGVyLmFsbG93U2xpZGVOZXh0ID09PSB0cnVlIHx8IHN3aXBlci5hbGxvd1NsaWRlUHJldiA9PT0gdHJ1ZSkpIHtcbiAgICBzd2lwZXIuc2V0R3JhYkN1cnNvcihmYWxzZSk7XG4gIH1cblxuICAvLyBUaW1lIGRpZmZcbiAgY29uc3QgdG91Y2hFbmRUaW1lID0gbm93KCk7XG4gIGNvbnN0IHRpbWVEaWZmID0gdG91Y2hFbmRUaW1lIC0gZGF0YS50b3VjaFN0YXJ0VGltZTtcblxuICAvLyBUYXAsIGRvdWJsZVRhcCwgQ2xpY2tcbiAgaWYgKHN3aXBlci5hbGxvd0NsaWNrKSB7XG4gICAgY29uc3QgcGF0aFRyZWUgPSBlLnBhdGggfHwgZS5jb21wb3NlZFBhdGggJiYgZS5jb21wb3NlZFBhdGgoKTtcbiAgICBzd2lwZXIudXBkYXRlQ2xpY2tlZFNsaWRlKHBhdGhUcmVlICYmIHBhdGhUcmVlWzBdIHx8IGUudGFyZ2V0LCBwYXRoVHJlZSk7XG4gICAgc3dpcGVyLmVtaXQoJ3RhcCBjbGljaycsIGUpO1xuICAgIGlmICh0aW1lRGlmZiA8IDMwMCAmJiB0b3VjaEVuZFRpbWUgLSBkYXRhLmxhc3RDbGlja1RpbWUgPCAzMDApIHtcbiAgICAgIHN3aXBlci5lbWl0KCdkb3VibGVUYXAgZG91YmxlQ2xpY2snLCBlKTtcbiAgICB9XG4gIH1cbiAgZGF0YS5sYXN0Q2xpY2tUaW1lID0gbm93KCk7XG4gIG5leHRUaWNrKCgpID0+IHtcbiAgICBpZiAoIXN3aXBlci5kZXN0cm95ZWQpIHN3aXBlci5hbGxvd0NsaWNrID0gdHJ1ZTtcbiAgfSk7XG4gIGlmICghZGF0YS5pc1RvdWNoZWQgfHwgIWRhdGEuaXNNb3ZlZCB8fCAhc3dpcGVyLnN3aXBlRGlyZWN0aW9uIHx8IHRvdWNoZXMuZGlmZiA9PT0gMCAmJiAhZGF0YS5sb29wU3dhcFJlc2V0IHx8IGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9PT0gZGF0YS5zdGFydFRyYW5zbGF0ZSAmJiAhZGF0YS5sb29wU3dhcFJlc2V0KSB7XG4gICAgZGF0YS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICBkYXRhLmlzTW92ZWQgPSBmYWxzZTtcbiAgICBkYXRhLnN0YXJ0TW92aW5nID0gZmFsc2U7XG4gICAgcmV0dXJuO1xuICB9XG4gIGRhdGEuaXNUb3VjaGVkID0gZmFsc2U7XG4gIGRhdGEuaXNNb3ZlZCA9IGZhbHNlO1xuICBkYXRhLnN0YXJ0TW92aW5nID0gZmFsc2U7XG4gIGxldCBjdXJyZW50UG9zO1xuICBpZiAocGFyYW1zLmZvbGxvd0Zpbmdlcikge1xuICAgIGN1cnJlbnRQb3MgPSBydGwgPyBzd2lwZXIudHJhbnNsYXRlIDogLXN3aXBlci50cmFuc2xhdGU7XG4gIH0gZWxzZSB7XG4gICAgY3VycmVudFBvcyA9IC1kYXRhLmN1cnJlbnRUcmFuc2xhdGU7XG4gIH1cbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwYXJhbXMuZnJlZU1vZGUgJiYgcGFyYW1zLmZyZWVNb2RlLmVuYWJsZWQpIHtcbiAgICBzd2lwZXIuZnJlZU1vZGUub25Ub3VjaEVuZCh7XG4gICAgICBjdXJyZW50UG9zXG4gICAgfSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRmluZCBjdXJyZW50IHNsaWRlXG4gIGNvbnN0IHN3aXBlVG9MYXN0ID0gY3VycmVudFBvcyA+PSAtc3dpcGVyLm1heFRyYW5zbGF0ZSgpICYmICFzd2lwZXIucGFyYW1zLmxvb3A7XG4gIGxldCBzdG9wSW5kZXggPSAwO1xuICBsZXQgZ3JvdXBTaXplID0gc3dpcGVyLnNsaWRlc1NpemVzR3JpZFswXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXNHcmlkLmxlbmd0aDsgaSArPSBpIDwgcGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCA/IDEgOiBwYXJhbXMuc2xpZGVzUGVyR3JvdXApIHtcbiAgICBjb25zdCBpbmNyZW1lbnQgPSBpIDwgcGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCAtIDEgPyAxIDogcGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuICAgIGlmICh0eXBlb2Ygc2xpZGVzR3JpZFtpICsgaW5jcmVtZW50XSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGlmIChzd2lwZVRvTGFzdCB8fCBjdXJyZW50UG9zID49IHNsaWRlc0dyaWRbaV0gJiYgY3VycmVudFBvcyA8IHNsaWRlc0dyaWRbaSArIGluY3JlbWVudF0pIHtcbiAgICAgICAgc3RvcEluZGV4ID0gaTtcbiAgICAgICAgZ3JvdXBTaXplID0gc2xpZGVzR3JpZFtpICsgaW5jcmVtZW50XSAtIHNsaWRlc0dyaWRbaV07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChzd2lwZVRvTGFzdCB8fCBjdXJyZW50UG9zID49IHNsaWRlc0dyaWRbaV0pIHtcbiAgICAgIHN0b3BJbmRleCA9IGk7XG4gICAgICBncm91cFNpemUgPSBzbGlkZXNHcmlkW3NsaWRlc0dyaWQubGVuZ3RoIC0gMV0gLSBzbGlkZXNHcmlkW3NsaWRlc0dyaWQubGVuZ3RoIC0gMl07XG4gICAgfVxuICB9XG4gIGxldCByZXdpbmRGaXJzdEluZGV4ID0gbnVsbDtcbiAgbGV0IHJld2luZExhc3RJbmRleCA9IG51bGw7XG4gIGlmIChwYXJhbXMucmV3aW5kKSB7XG4gICAgaWYgKHN3aXBlci5pc0JlZ2lubmluZykge1xuICAgICAgcmV3aW5kTGFzdEluZGV4ID0gcGFyYW1zLnZpcnR1YWwgJiYgcGFyYW1zLnZpcnR1YWwuZW5hYmxlZCAmJiBzd2lwZXIudmlydHVhbCA/IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggLSAxIDogc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxO1xuICAgIH0gZWxzZSBpZiAoc3dpcGVyLmlzRW5kKSB7XG4gICAgICByZXdpbmRGaXJzdEluZGV4ID0gMDtcbiAgICB9XG4gIH1cbiAgLy8gRmluZCBjdXJyZW50IHNsaWRlIHNpemVcbiAgY29uc3QgcmF0aW8gPSAoY3VycmVudFBvcyAtIHNsaWRlc0dyaWRbc3RvcEluZGV4XSkgLyBncm91cFNpemU7XG4gIGNvbnN0IGluY3JlbWVudCA9IHN0b3BJbmRleCA8IHBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAgLSAxID8gMSA6IHBhcmFtcy5zbGlkZXNQZXJHcm91cDtcbiAgaWYgKHRpbWVEaWZmID4gcGFyYW1zLmxvbmdTd2lwZXNNcykge1xuICAgIC8vIExvbmcgdG91Y2hlc1xuICAgIGlmICghcGFyYW1zLmxvbmdTd2lwZXMpIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPT09ICduZXh0Jykge1xuICAgICAgaWYgKHJhdGlvID49IHBhcmFtcy5sb25nU3dpcGVzUmF0aW8pIHN3aXBlci5zbGlkZVRvKHBhcmFtcy5yZXdpbmQgJiYgc3dpcGVyLmlzRW5kID8gcmV3aW5kRmlyc3RJbmRleCA6IHN0b3BJbmRleCArIGluY3JlbWVudCk7ZWxzZSBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXgpO1xuICAgIH1cbiAgICBpZiAoc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAncHJldicpIHtcbiAgICAgIGlmIChyYXRpbyA+IDEgLSBwYXJhbXMubG9uZ1N3aXBlc1JhdGlvKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHN0b3BJbmRleCArIGluY3JlbWVudCk7XG4gICAgICB9IGVsc2UgaWYgKHJld2luZExhc3RJbmRleCAhPT0gbnVsbCAmJiByYXRpbyA8IDAgJiYgTWF0aC5hYnMocmF0aW8pID4gcGFyYW1zLmxvbmdTd2lwZXNSYXRpbykge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhyZXdpbmRMYXN0SW5kZXgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4KTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gU2hvcnQgc3dpcGVzXG4gICAgaWYgKCFwYXJhbXMuc2hvcnRTd2lwZXMpIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGlzTmF2QnV0dG9uVGFyZ2V0ID0gc3dpcGVyLm5hdmlnYXRpb24gJiYgKGUudGFyZ2V0ID09PSBzd2lwZXIubmF2aWdhdGlvbi5uZXh0RWwgfHwgZS50YXJnZXQgPT09IHN3aXBlci5uYXZpZ2F0aW9uLnByZXZFbCk7XG4gICAgaWYgKCFpc05hdkJ1dHRvblRhcmdldCkge1xuICAgICAgaWYgKHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ25leHQnKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHJld2luZEZpcnN0SW5kZXggIT09IG51bGwgPyByZXdpbmRGaXJzdEluZGV4IDogc3RvcEluZGV4ICsgaW5jcmVtZW50KTtcbiAgICAgIH1cbiAgICAgIGlmIChzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPT09ICdwcmV2Jykge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhyZXdpbmRMYXN0SW5kZXggIT09IG51bGwgPyByZXdpbmRMYXN0SW5kZXggOiBzdG9wSW5kZXgpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZS50YXJnZXQgPT09IHN3aXBlci5uYXZpZ2F0aW9uLm5leHRFbCkge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4ICsgaW5jcmVtZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4KTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gb25SZXNpemUoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgZWxcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKGVsICYmIGVsLm9mZnNldFdpZHRoID09PSAwKSByZXR1cm47XG5cbiAgLy8gQnJlYWtwb2ludHNcbiAgaWYgKHBhcmFtcy5icmVha3BvaW50cykge1xuICAgIHN3aXBlci5zZXRCcmVha3BvaW50KCk7XG4gIH1cblxuICAvLyBTYXZlIGxvY2tzXG4gIGNvbnN0IHtcbiAgICBhbGxvd1NsaWRlTmV4dCxcbiAgICBhbGxvd1NsaWRlUHJldixcbiAgICBzbmFwR3JpZFxuICB9ID0gc3dpcGVyO1xuICBjb25zdCBpc1ZpcnR1YWwgPSBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZDtcblxuICAvLyBEaXNhYmxlIGxvY2tzIG9uIHJlc2l6ZVxuICBzd2lwZXIuYWxsb3dTbGlkZU5leHQgPSB0cnVlO1xuICBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPSB0cnVlO1xuICBzd2lwZXIudXBkYXRlU2l6ZSgpO1xuICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG4gIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gIGNvbnN0IGlzVmlydHVhbExvb3AgPSBpc1ZpcnR1YWwgJiYgcGFyYW1zLmxvb3A7XG4gIGlmICgocGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyB8fCBwYXJhbXMuc2xpZGVzUGVyVmlldyA+IDEpICYmIHN3aXBlci5pc0VuZCAmJiAhc3dpcGVyLmlzQmVnaW5uaW5nICYmICFzd2lwZXIucGFyYW1zLmNlbnRlcmVkU2xpZGVzICYmICFpc1ZpcnR1YWxMb29wKSB7XG4gICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxLCAwLCBmYWxzZSwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCAmJiAhaXNWaXJ0dWFsKSB7XG4gICAgICBzd2lwZXIuc2xpZGVUb0xvb3Aoc3dpcGVyLnJlYWxJbmRleCwgMCwgZmFsc2UsIHRydWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXgsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICB9XG4gIH1cbiAgaWYgKHN3aXBlci5hdXRvcGxheSAmJiBzd2lwZXIuYXV0b3BsYXkucnVubmluZyAmJiBzd2lwZXIuYXV0b3BsYXkucGF1c2VkKSB7XG4gICAgY2xlYXJUaW1lb3V0KHN3aXBlci5hdXRvcGxheS5yZXNpemVUaW1lb3V0KTtcbiAgICBzd2lwZXIuYXV0b3BsYXkucmVzaXplVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgaWYgKHN3aXBlci5hdXRvcGxheSAmJiBzd2lwZXIuYXV0b3BsYXkucnVubmluZyAmJiBzd2lwZXIuYXV0b3BsYXkucGF1c2VkKSB7XG4gICAgICAgIHN3aXBlci5hdXRvcGxheS5yZXN1bWUoKTtcbiAgICAgIH1cbiAgICB9LCA1MDApO1xuICB9XG4gIC8vIFJldHVybiBsb2NrcyBhZnRlciByZXNpemVcbiAgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID0gYWxsb3dTbGlkZVByZXY7XG4gIHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9IGFsbG93U2xpZGVOZXh0O1xuICBpZiAoc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHNuYXBHcmlkICE9PSBzd2lwZXIuc25hcEdyaWQpIHtcbiAgICBzd2lwZXIuY2hlY2tPdmVyZmxvdygpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG9uQ2xpY2soZSkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBpZiAoIXN3aXBlci5lbmFibGVkKSByZXR1cm47XG4gIGlmICghc3dpcGVyLmFsbG93Q2xpY2spIHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5wcmV2ZW50Q2xpY2tzKSBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMucHJldmVudENsaWNrc1Byb3BhZ2F0aW9uICYmIHN3aXBlci5hbmltYXRpbmcpIHtcbiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBvblNjcm9sbCgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHdyYXBwZXJFbCxcbiAgICBydGxUcmFuc2xhdGUsXG4gICAgZW5hYmxlZFxuICB9ID0gc3dpcGVyO1xuICBpZiAoIWVuYWJsZWQpIHJldHVybjtcbiAgc3dpcGVyLnByZXZpb3VzVHJhbnNsYXRlID0gc3dpcGVyLnRyYW5zbGF0ZTtcbiAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgIHN3aXBlci50cmFuc2xhdGUgPSAtd3JhcHBlckVsLnNjcm9sbExlZnQ7XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyLnRyYW5zbGF0ZSA9IC13cmFwcGVyRWwuc2Nyb2xsVG9wO1xuICB9XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBpZiAoc3dpcGVyLnRyYW5zbGF0ZSA9PT0gMCkgc3dpcGVyLnRyYW5zbGF0ZSA9IDA7XG4gIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICBsZXQgbmV3UHJvZ3Jlc3M7XG4gIGNvbnN0IHRyYW5zbGF0ZXNEaWZmID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpO1xuICBpZiAodHJhbnNsYXRlc0RpZmYgPT09IDApIHtcbiAgICBuZXdQcm9ncmVzcyA9IDA7XG4gIH0gZWxzZSB7XG4gICAgbmV3UHJvZ3Jlc3MgPSAoc3dpcGVyLnRyYW5zbGF0ZSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKSkgLyB0cmFuc2xhdGVzRGlmZjtcbiAgfVxuICBpZiAobmV3UHJvZ3Jlc3MgIT09IHN3aXBlci5wcm9ncmVzcykge1xuICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcyhydGxUcmFuc2xhdGUgPyAtc3dpcGVyLnRyYW5zbGF0ZSA6IHN3aXBlci50cmFuc2xhdGUpO1xuICB9XG4gIHN3aXBlci5lbWl0KCdzZXRUcmFuc2xhdGUnLCBzd2lwZXIudHJhbnNsYXRlLCBmYWxzZSk7XG59XG5cbmZ1bmN0aW9uIG9uTG9hZChlKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIHByb2Nlc3NMYXp5UHJlbG9hZGVyKHN3aXBlciwgZS50YXJnZXQpO1xuICBpZiAoc3dpcGVyLnBhcmFtcy5jc3NNb2RlIHx8IHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyAhPT0gJ2F1dG8nICYmICFzd2lwZXIucGFyYW1zLmF1dG9IZWlnaHQpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgc3dpcGVyLnVwZGF0ZSgpO1xufVxuXG5mdW5jdGlvbiBvbkRvY3VtZW50VG91Y2hTdGFydCgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgaWYgKHN3aXBlci5kb2N1bWVudFRvdWNoSGFuZGxlclByb2NlZWRlZCkgcmV0dXJuO1xuICBzd2lwZXIuZG9jdW1lbnRUb3VjaEhhbmRsZXJQcm9jZWVkZWQgPSB0cnVlO1xuICBpZiAoc3dpcGVyLnBhcmFtcy50b3VjaFJlbGVhc2VPbkVkZ2VzKSB7XG4gICAgc3dpcGVyLmVsLnN0eWxlLnRvdWNoQWN0aW9uID0gJ2F1dG8nO1xuICB9XG59XG5cbmNvbnN0IGV2ZW50cyA9IChzd2lwZXIsIG1ldGhvZCkgPT4ge1xuICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgZWwsXG4gICAgd3JhcHBlckVsLFxuICAgIGRldmljZVxuICB9ID0gc3dpcGVyO1xuICBjb25zdCBjYXB0dXJlID0gISFwYXJhbXMubmVzdGVkO1xuICBjb25zdCBkb21NZXRob2QgPSBtZXRob2QgPT09ICdvbicgPyAnYWRkRXZlbnRMaXN0ZW5lcicgOiAncmVtb3ZlRXZlbnRMaXN0ZW5lcic7XG4gIGNvbnN0IHN3aXBlck1ldGhvZCA9IG1ldGhvZDtcbiAgaWYgKCFlbCB8fCB0eXBlb2YgZWwgPT09ICdzdHJpbmcnKSByZXR1cm47XG5cbiAgLy8gVG91Y2ggRXZlbnRzXG4gIGRvY3VtZW50W2RvbU1ldGhvZF0oJ3RvdWNoc3RhcnQnLCBzd2lwZXIub25Eb2N1bWVudFRvdWNoU3RhcnQsIHtcbiAgICBwYXNzaXZlOiBmYWxzZSxcbiAgICBjYXB0dXJlXG4gIH0pO1xuICBlbFtkb21NZXRob2RdKCd0b3VjaHN0YXJ0Jywgc3dpcGVyLm9uVG91Y2hTdGFydCwge1xuICAgIHBhc3NpdmU6IGZhbHNlXG4gIH0pO1xuICBlbFtkb21NZXRob2RdKCdwb2ludGVyZG93bicsIHN3aXBlci5vblRvdWNoU3RhcnQsIHtcbiAgICBwYXNzaXZlOiBmYWxzZVxuICB9KTtcbiAgZG9jdW1lbnRbZG9tTWV0aG9kXSgndG91Y2htb3ZlJywgc3dpcGVyLm9uVG91Y2hNb3ZlLCB7XG4gICAgcGFzc2l2ZTogZmFsc2UsXG4gICAgY2FwdHVyZVxuICB9KTtcbiAgZG9jdW1lbnRbZG9tTWV0aG9kXSgncG9pbnRlcm1vdmUnLCBzd2lwZXIub25Ub3VjaE1vdmUsIHtcbiAgICBwYXNzaXZlOiBmYWxzZSxcbiAgICBjYXB0dXJlXG4gIH0pO1xuICBkb2N1bWVudFtkb21NZXRob2RdKCd0b3VjaGVuZCcsIHN3aXBlci5vblRvdWNoRW5kLCB7XG4gICAgcGFzc2l2ZTogdHJ1ZVxuICB9KTtcbiAgZG9jdW1lbnRbZG9tTWV0aG9kXSgncG9pbnRlcnVwJywgc3dpcGVyLm9uVG91Y2hFbmQsIHtcbiAgICBwYXNzaXZlOiB0cnVlXG4gIH0pO1xuICBkb2N1bWVudFtkb21NZXRob2RdKCdwb2ludGVyY2FuY2VsJywgc3dpcGVyLm9uVG91Y2hFbmQsIHtcbiAgICBwYXNzaXZlOiB0cnVlXG4gIH0pO1xuICBkb2N1bWVudFtkb21NZXRob2RdKCd0b3VjaGNhbmNlbCcsIHN3aXBlci5vblRvdWNoRW5kLCB7XG4gICAgcGFzc2l2ZTogdHJ1ZVxuICB9KTtcbiAgZG9jdW1lbnRbZG9tTWV0aG9kXSgncG9pbnRlcm91dCcsIHN3aXBlci5vblRvdWNoRW5kLCB7XG4gICAgcGFzc2l2ZTogdHJ1ZVxuICB9KTtcbiAgZG9jdW1lbnRbZG9tTWV0aG9kXSgncG9pbnRlcmxlYXZlJywgc3dpcGVyLm9uVG91Y2hFbmQsIHtcbiAgICBwYXNzaXZlOiB0cnVlXG4gIH0pO1xuICBkb2N1bWVudFtkb21NZXRob2RdKCdjb250ZXh0bWVudScsIHN3aXBlci5vblRvdWNoRW5kLCB7XG4gICAgcGFzc2l2ZTogdHJ1ZVxuICB9KTtcblxuICAvLyBQcmV2ZW50IExpbmtzIENsaWNrc1xuICBpZiAocGFyYW1zLnByZXZlbnRDbGlja3MgfHwgcGFyYW1zLnByZXZlbnRDbGlja3NQcm9wYWdhdGlvbikge1xuICAgIGVsW2RvbU1ldGhvZF0oJ2NsaWNrJywgc3dpcGVyLm9uQ2xpY2ssIHRydWUpO1xuICB9XG4gIGlmIChwYXJhbXMuY3NzTW9kZSkge1xuICAgIHdyYXBwZXJFbFtkb21NZXRob2RdKCdzY3JvbGwnLCBzd2lwZXIub25TY3JvbGwpO1xuICB9XG5cbiAgLy8gUmVzaXplIGhhbmRsZXJcbiAgaWYgKHBhcmFtcy51cGRhdGVPbldpbmRvd1Jlc2l6ZSkge1xuICAgIHN3aXBlcltzd2lwZXJNZXRob2RdKGRldmljZS5pb3MgfHwgZGV2aWNlLmFuZHJvaWQgPyAncmVzaXplIG9yaWVudGF0aW9uY2hhbmdlIG9ic2VydmVyVXBkYXRlJyA6ICdyZXNpemUgb2JzZXJ2ZXJVcGRhdGUnLCBvblJlc2l6ZSwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyW3N3aXBlck1ldGhvZF0oJ29ic2VydmVyVXBkYXRlJywgb25SZXNpemUsIHRydWUpO1xuICB9XG5cbiAgLy8gSW1hZ2VzIGxvYWRlclxuICBlbFtkb21NZXRob2RdKCdsb2FkJywgc3dpcGVyLm9uTG9hZCwge1xuICAgIGNhcHR1cmU6IHRydWVcbiAgfSk7XG59O1xuZnVuY3Rpb24gYXR0YWNoRXZlbnRzKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcGFyYW1zXG4gIH0gPSBzd2lwZXI7XG4gIHN3aXBlci5vblRvdWNoU3RhcnQgPSBvblRvdWNoU3RhcnQuYmluZChzd2lwZXIpO1xuICBzd2lwZXIub25Ub3VjaE1vdmUgPSBvblRvdWNoTW92ZS5iaW5kKHN3aXBlcik7XG4gIHN3aXBlci5vblRvdWNoRW5kID0gb25Ub3VjaEVuZC5iaW5kKHN3aXBlcik7XG4gIHN3aXBlci5vbkRvY3VtZW50VG91Y2hTdGFydCA9IG9uRG9jdW1lbnRUb3VjaFN0YXJ0LmJpbmQoc3dpcGVyKTtcbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgc3dpcGVyLm9uU2Nyb2xsID0gb25TY3JvbGwuYmluZChzd2lwZXIpO1xuICB9XG4gIHN3aXBlci5vbkNsaWNrID0gb25DbGljay5iaW5kKHN3aXBlcik7XG4gIHN3aXBlci5vbkxvYWQgPSBvbkxvYWQuYmluZChzd2lwZXIpO1xuICBldmVudHMoc3dpcGVyLCAnb24nKTtcbn1cbmZ1bmN0aW9uIGRldGFjaEV2ZW50cygpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgZXZlbnRzKHN3aXBlciwgJ29mZicpO1xufVxudmFyIGV2ZW50cyQxID0ge1xuICBhdHRhY2hFdmVudHMsXG4gIGRldGFjaEV2ZW50c1xufTtcblxuY29uc3QgaXNHcmlkRW5hYmxlZCA9IChzd2lwZXIsIHBhcmFtcykgPT4ge1xuICByZXR1cm4gc3dpcGVyLmdyaWQgJiYgcGFyYW1zLmdyaWQgJiYgcGFyYW1zLmdyaWQucm93cyA+IDE7XG59O1xuZnVuY3Rpb24gc2V0QnJlYWtwb2ludCgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHJlYWxJbmRleCxcbiAgICBpbml0aWFsaXplZCxcbiAgICBwYXJhbXMsXG4gICAgZWxcbiAgfSA9IHN3aXBlcjtcbiAgY29uc3QgYnJlYWtwb2ludHMgPSBwYXJhbXMuYnJlYWtwb2ludHM7XG4gIGlmICghYnJlYWtwb2ludHMgfHwgYnJlYWtwb2ludHMgJiYgT2JqZWN0LmtleXMoYnJlYWtwb2ludHMpLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuXG4gIC8vIEdldCBicmVha3BvaW50IGZvciB3aW5kb3cgd2lkdGggYW5kIHVwZGF0ZSBwYXJhbWV0ZXJzXG4gIGNvbnN0IGJyZWFrcG9pbnQgPSBzd2lwZXIuZ2V0QnJlYWtwb2ludChicmVha3BvaW50cywgc3dpcGVyLnBhcmFtcy5icmVha3BvaW50c0Jhc2UsIHN3aXBlci5lbCk7XG4gIGlmICghYnJlYWtwb2ludCB8fCBzd2lwZXIuY3VycmVudEJyZWFrcG9pbnQgPT09IGJyZWFrcG9pbnQpIHJldHVybjtcbiAgY29uc3QgYnJlYWtwb2ludE9ubHlQYXJhbXMgPSBicmVha3BvaW50IGluIGJyZWFrcG9pbnRzID8gYnJlYWtwb2ludHNbYnJlYWtwb2ludF0gOiB1bmRlZmluZWQ7XG4gIGNvbnN0IGJyZWFrcG9pbnRQYXJhbXMgPSBicmVha3BvaW50T25seVBhcmFtcyB8fCBzd2lwZXIub3JpZ2luYWxQYXJhbXM7XG4gIGNvbnN0IHdhc011bHRpUm93ID0gaXNHcmlkRW5hYmxlZChzd2lwZXIsIHBhcmFtcyk7XG4gIGNvbnN0IGlzTXVsdGlSb3cgPSBpc0dyaWRFbmFibGVkKHN3aXBlciwgYnJlYWtwb2ludFBhcmFtcyk7XG4gIGNvbnN0IHdhc0dyYWJDdXJzb3IgPSBzd2lwZXIucGFyYW1zLmdyYWJDdXJzb3I7XG4gIGNvbnN0IGlzR3JhYkN1cnNvciA9IGJyZWFrcG9pbnRQYXJhbXMuZ3JhYkN1cnNvcjtcbiAgY29uc3Qgd2FzRW5hYmxlZCA9IHBhcmFtcy5lbmFibGVkO1xuICBpZiAod2FzTXVsdGlSb3cgJiYgIWlzTXVsdGlSb3cpIHtcbiAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKGAke3BhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfWdyaWRgLCBgJHtwYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc31ncmlkLWNvbHVtbmApO1xuICAgIHN3aXBlci5lbWl0Q29udGFpbmVyQ2xhc3NlcygpO1xuICB9IGVsc2UgaWYgKCF3YXNNdWx0aVJvdyAmJiBpc011bHRpUm93KSB7XG4gICAgZWwuY2xhc3NMaXN0LmFkZChgJHtwYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc31ncmlkYCk7XG4gICAgaWYgKGJyZWFrcG9pbnRQYXJhbXMuZ3JpZC5maWxsICYmIGJyZWFrcG9pbnRQYXJhbXMuZ3JpZC5maWxsID09PSAnY29sdW1uJyB8fCAhYnJlYWtwb2ludFBhcmFtcy5ncmlkLmZpbGwgJiYgcGFyYW1zLmdyaWQuZmlsbCA9PT0gJ2NvbHVtbicpIHtcbiAgICAgIGVsLmNsYXNzTGlzdC5hZGQoYCR7cGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9Z3JpZC1jb2x1bW5gKTtcbiAgICB9XG4gICAgc3dpcGVyLmVtaXRDb250YWluZXJDbGFzc2VzKCk7XG4gIH1cbiAgaWYgKHdhc0dyYWJDdXJzb3IgJiYgIWlzR3JhYkN1cnNvcikge1xuICAgIHN3aXBlci51bnNldEdyYWJDdXJzb3IoKTtcbiAgfSBlbHNlIGlmICghd2FzR3JhYkN1cnNvciAmJiBpc0dyYWJDdXJzb3IpIHtcbiAgICBzd2lwZXIuc2V0R3JhYkN1cnNvcigpO1xuICB9XG5cbiAgLy8gVG9nZ2xlIG5hdmlnYXRpb24sIHBhZ2luYXRpb24sIHNjcm9sbGJhclxuICBbJ25hdmlnYXRpb24nLCAncGFnaW5hdGlvbicsICdzY3JvbGxiYXInXS5mb3JFYWNoKHByb3AgPT4ge1xuICAgIGlmICh0eXBlb2YgYnJlYWtwb2ludFBhcmFtc1twcm9wXSA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybjtcbiAgICBjb25zdCB3YXNNb2R1bGVFbmFibGVkID0gcGFyYW1zW3Byb3BdICYmIHBhcmFtc1twcm9wXS5lbmFibGVkO1xuICAgIGNvbnN0IGlzTW9kdWxlRW5hYmxlZCA9IGJyZWFrcG9pbnRQYXJhbXNbcHJvcF0gJiYgYnJlYWtwb2ludFBhcmFtc1twcm9wXS5lbmFibGVkO1xuICAgIGlmICh3YXNNb2R1bGVFbmFibGVkICYmICFpc01vZHVsZUVuYWJsZWQpIHtcbiAgICAgIHN3aXBlcltwcm9wXS5kaXNhYmxlKCk7XG4gICAgfVxuICAgIGlmICghd2FzTW9kdWxlRW5hYmxlZCAmJiBpc01vZHVsZUVuYWJsZWQpIHtcbiAgICAgIHN3aXBlcltwcm9wXS5lbmFibGUoKTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBkaXJlY3Rpb25DaGFuZ2VkID0gYnJlYWtwb2ludFBhcmFtcy5kaXJlY3Rpb24gJiYgYnJlYWtwb2ludFBhcmFtcy5kaXJlY3Rpb24gIT09IHBhcmFtcy5kaXJlY3Rpb247XG4gIGNvbnN0IG5lZWRzUmVMb29wID0gcGFyYW1zLmxvb3AgJiYgKGJyZWFrcG9pbnRQYXJhbXMuc2xpZGVzUGVyVmlldyAhPT0gcGFyYW1zLnNsaWRlc1BlclZpZXcgfHwgZGlyZWN0aW9uQ2hhbmdlZCk7XG4gIGNvbnN0IHdhc0xvb3AgPSBwYXJhbXMubG9vcDtcbiAgaWYgKGRpcmVjdGlvbkNoYW5nZWQgJiYgaW5pdGlhbGl6ZWQpIHtcbiAgICBzd2lwZXIuY2hhbmdlRGlyZWN0aW9uKCk7XG4gIH1cbiAgZXh0ZW5kKHN3aXBlci5wYXJhbXMsIGJyZWFrcG9pbnRQYXJhbXMpO1xuICBjb25zdCBpc0VuYWJsZWQgPSBzd2lwZXIucGFyYW1zLmVuYWJsZWQ7XG4gIGNvbnN0IGhhc0xvb3AgPSBzd2lwZXIucGFyYW1zLmxvb3A7XG4gIE9iamVjdC5hc3NpZ24oc3dpcGVyLCB7XG4gICAgYWxsb3dUb3VjaE1vdmU6IHN3aXBlci5wYXJhbXMuYWxsb3dUb3VjaE1vdmUsXG4gICAgYWxsb3dTbGlkZU5leHQ6IHN3aXBlci5wYXJhbXMuYWxsb3dTbGlkZU5leHQsXG4gICAgYWxsb3dTbGlkZVByZXY6IHN3aXBlci5wYXJhbXMuYWxsb3dTbGlkZVByZXZcbiAgfSk7XG4gIGlmICh3YXNFbmFibGVkICYmICFpc0VuYWJsZWQpIHtcbiAgICBzd2lwZXIuZGlzYWJsZSgpO1xuICB9IGVsc2UgaWYgKCF3YXNFbmFibGVkICYmIGlzRW5hYmxlZCkge1xuICAgIHN3aXBlci5lbmFibGUoKTtcbiAgfVxuICBzd2lwZXIuY3VycmVudEJyZWFrcG9pbnQgPSBicmVha3BvaW50O1xuICBzd2lwZXIuZW1pdCgnX2JlZm9yZUJyZWFrcG9pbnQnLCBicmVha3BvaW50UGFyYW1zKTtcbiAgaWYgKGluaXRpYWxpemVkKSB7XG4gICAgaWYgKG5lZWRzUmVMb29wKSB7XG4gICAgICBzd2lwZXIubG9vcERlc3Ryb3koKTtcbiAgICAgIHN3aXBlci5sb29wQ3JlYXRlKHJlYWxJbmRleCk7XG4gICAgICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG4gICAgfSBlbHNlIGlmICghd2FzTG9vcCAmJiBoYXNMb29wKSB7XG4gICAgICBzd2lwZXIubG9vcENyZWF0ZShyZWFsSW5kZXgpO1xuICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlcygpO1xuICAgIH0gZWxzZSBpZiAod2FzTG9vcCAmJiAhaGFzTG9vcCkge1xuICAgICAgc3dpcGVyLmxvb3BEZXN0cm95KCk7XG4gICAgfVxuICB9XG4gIHN3aXBlci5lbWl0KCdicmVha3BvaW50JywgYnJlYWtwb2ludFBhcmFtcyk7XG59XG5cbmZ1bmN0aW9uIGdldEJyZWFrcG9pbnQoYnJlYWtwb2ludHMsIGJhc2UsIGNvbnRhaW5lckVsKSB7XG4gIGlmIChiYXNlID09PSB2b2lkIDApIHtcbiAgICBiYXNlID0gJ3dpbmRvdyc7XG4gIH1cbiAgaWYgKCFicmVha3BvaW50cyB8fCBiYXNlID09PSAnY29udGFpbmVyJyAmJiAhY29udGFpbmVyRWwpIHJldHVybiB1bmRlZmluZWQ7XG4gIGxldCBicmVha3BvaW50ID0gZmFsc2U7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBjb25zdCBjdXJyZW50SGVpZ2h0ID0gYmFzZSA9PT0gJ3dpbmRvdycgPyB3aW5kb3cuaW5uZXJIZWlnaHQgOiBjb250YWluZXJFbC5jbGllbnRIZWlnaHQ7XG4gIGNvbnN0IHBvaW50cyA9IE9iamVjdC5rZXlzKGJyZWFrcG9pbnRzKS5tYXAocG9pbnQgPT4ge1xuICAgIGlmICh0eXBlb2YgcG9pbnQgPT09ICdzdHJpbmcnICYmIHBvaW50LmluZGV4T2YoJ0AnKSA9PT0gMCkge1xuICAgICAgY29uc3QgbWluUmF0aW8gPSBwYXJzZUZsb2F0KHBvaW50LnN1YnN0cigxKSk7XG4gICAgICBjb25zdCB2YWx1ZSA9IGN1cnJlbnRIZWlnaHQgKiBtaW5SYXRpbztcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZhbHVlLFxuICAgICAgICBwb2ludFxuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbHVlOiBwb2ludCxcbiAgICAgIHBvaW50XG4gICAgfTtcbiAgfSk7XG4gIHBvaW50cy5zb3J0KChhLCBiKSA9PiBwYXJzZUludChhLnZhbHVlLCAxMCkgLSBwYXJzZUludChiLnZhbHVlLCAxMCkpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHBvaW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGNvbnN0IHtcbiAgICAgIHBvaW50LFxuICAgICAgdmFsdWVcbiAgICB9ID0gcG9pbnRzW2ldO1xuICAgIGlmIChiYXNlID09PSAnd2luZG93Jykge1xuICAgICAgaWYgKHdpbmRvdy5tYXRjaE1lZGlhKGAobWluLXdpZHRoOiAke3ZhbHVlfXB4KWApLm1hdGNoZXMpIHtcbiAgICAgICAgYnJlYWtwb2ludCA9IHBvaW50O1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodmFsdWUgPD0gY29udGFpbmVyRWwuY2xpZW50V2lkdGgpIHtcbiAgICAgIGJyZWFrcG9pbnQgPSBwb2ludDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGJyZWFrcG9pbnQgfHwgJ21heCc7XG59XG5cbnZhciBicmVha3BvaW50cyA9IHtcbiAgc2V0QnJlYWtwb2ludCxcbiAgZ2V0QnJlYWtwb2ludFxufTtcblxuZnVuY3Rpb24gcHJlcGFyZUNsYXNzZXMoZW50cmllcywgcHJlZml4KSB7XG4gIGNvbnN0IHJlc3VsdENsYXNzZXMgPSBbXTtcbiAgZW50cmllcy5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgIGlmICh0eXBlb2YgaXRlbSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIE9iamVjdC5rZXlzKGl0ZW0pLmZvckVhY2goY2xhc3NOYW1lcyA9PiB7XG4gICAgICAgIGlmIChpdGVtW2NsYXNzTmFtZXNdKSB7XG4gICAgICAgICAgcmVzdWx0Q2xhc3Nlcy5wdXNoKHByZWZpeCArIGNsYXNzTmFtZXMpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBpdGVtID09PSAnc3RyaW5nJykge1xuICAgICAgcmVzdWx0Q2xhc3Nlcy5wdXNoKHByZWZpeCArIGl0ZW0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXN1bHRDbGFzc2VzO1xufVxuZnVuY3Rpb24gYWRkQ2xhc3NlcygpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIGNsYXNzTmFtZXMsXG4gICAgcGFyYW1zLFxuICAgIHJ0bCxcbiAgICBlbCxcbiAgICBkZXZpY2VcbiAgfSA9IHN3aXBlcjtcbiAgLy8gcHJldHRpZXItaWdub3JlXG4gIGNvbnN0IHN1ZmZpeGVzID0gcHJlcGFyZUNsYXNzZXMoWydpbml0aWFsaXplZCcsIHBhcmFtcy5kaXJlY3Rpb24sIHtcbiAgICAnZnJlZS1tb2RlJzogc3dpcGVyLnBhcmFtcy5mcmVlTW9kZSAmJiBwYXJhbXMuZnJlZU1vZGUuZW5hYmxlZFxuICB9LCB7XG4gICAgJ2F1dG9oZWlnaHQnOiBwYXJhbXMuYXV0b0hlaWdodFxuICB9LCB7XG4gICAgJ3J0bCc6IHJ0bFxuICB9LCB7XG4gICAgJ2dyaWQnOiBwYXJhbXMuZ3JpZCAmJiBwYXJhbXMuZ3JpZC5yb3dzID4gMVxuICB9LCB7XG4gICAgJ2dyaWQtY29sdW1uJzogcGFyYW1zLmdyaWQgJiYgcGFyYW1zLmdyaWQucm93cyA+IDEgJiYgcGFyYW1zLmdyaWQuZmlsbCA9PT0gJ2NvbHVtbidcbiAgfSwge1xuICAgICdhbmRyb2lkJzogZGV2aWNlLmFuZHJvaWRcbiAgfSwge1xuICAgICdpb3MnOiBkZXZpY2UuaW9zXG4gIH0sIHtcbiAgICAnY3NzLW1vZGUnOiBwYXJhbXMuY3NzTW9kZVxuICB9LCB7XG4gICAgJ2NlbnRlcmVkJzogcGFyYW1zLmNzc01vZGUgJiYgcGFyYW1zLmNlbnRlcmVkU2xpZGVzXG4gIH0sIHtcbiAgICAnd2F0Y2gtcHJvZ3Jlc3MnOiBwYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzc1xuICB9XSwgcGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MpO1xuICBjbGFzc05hbWVzLnB1c2goLi4uc3VmZml4ZXMpO1xuICBlbC5jbGFzc0xpc3QuYWRkKC4uLmNsYXNzTmFtZXMpO1xuICBzd2lwZXIuZW1pdENvbnRhaW5lckNsYXNzZXMoKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlQ2xhc3NlcygpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIGVsLFxuICAgIGNsYXNzTmFtZXNcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKCFlbCB8fCB0eXBlb2YgZWwgPT09ICdzdHJpbmcnKSByZXR1cm47XG4gIGVsLmNsYXNzTGlzdC5yZW1vdmUoLi4uY2xhc3NOYW1lcyk7XG4gIHN3aXBlci5lbWl0Q29udGFpbmVyQ2xhc3NlcygpO1xufVxuXG52YXIgY2xhc3NlcyA9IHtcbiAgYWRkQ2xhc3NlcyxcbiAgcmVtb3ZlQ2xhc3Nlc1xufTtcblxuZnVuY3Rpb24gY2hlY2tPdmVyZmxvdygpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIGlzTG9ja2VkOiB3YXNMb2NrZWQsXG4gICAgcGFyYW1zXG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IHtcbiAgICBzbGlkZXNPZmZzZXRCZWZvcmVcbiAgfSA9IHBhcmFtcztcbiAgaWYgKHNsaWRlc09mZnNldEJlZm9yZSkge1xuICAgIGNvbnN0IGxhc3RTbGlkZUluZGV4ID0gc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxO1xuICAgIGNvbnN0IGxhc3RTbGlkZVJpZ2h0RWRnZSA9IHN3aXBlci5zbGlkZXNHcmlkW2xhc3RTbGlkZUluZGV4XSArIHN3aXBlci5zbGlkZXNTaXplc0dyaWRbbGFzdFNsaWRlSW5kZXhdICsgc2xpZGVzT2Zmc2V0QmVmb3JlICogMjtcbiAgICBzd2lwZXIuaXNMb2NrZWQgPSBzd2lwZXIuc2l6ZSA+IGxhc3RTbGlkZVJpZ2h0RWRnZTtcbiAgfSBlbHNlIHtcbiAgICBzd2lwZXIuaXNMb2NrZWQgPSBzd2lwZXIuc25hcEdyaWQubGVuZ3RoID09PSAxO1xuICB9XG4gIGlmIChwYXJhbXMuYWxsb3dTbGlkZU5leHQgPT09IHRydWUpIHtcbiAgICBzd2lwZXIuYWxsb3dTbGlkZU5leHQgPSAhc3dpcGVyLmlzTG9ja2VkO1xuICB9XG4gIGlmIChwYXJhbXMuYWxsb3dTbGlkZVByZXYgPT09IHRydWUpIHtcbiAgICBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPSAhc3dpcGVyLmlzTG9ja2VkO1xuICB9XG4gIGlmICh3YXNMb2NrZWQgJiYgd2FzTG9ja2VkICE9PSBzd2lwZXIuaXNMb2NrZWQpIHtcbiAgICBzd2lwZXIuaXNFbmQgPSBmYWxzZTtcbiAgfVxuICBpZiAod2FzTG9ja2VkICE9PSBzd2lwZXIuaXNMb2NrZWQpIHtcbiAgICBzd2lwZXIuZW1pdChzd2lwZXIuaXNMb2NrZWQgPyAnbG9jaycgOiAndW5sb2NrJyk7XG4gIH1cbn1cbnZhciBjaGVja092ZXJmbG93JDEgPSB7XG4gIGNoZWNrT3ZlcmZsb3dcbn07XG5cbnZhciBkZWZhdWx0cyA9IHtcbiAgaW5pdDogdHJ1ZSxcbiAgZGlyZWN0aW9uOiAnaG9yaXpvbnRhbCcsXG4gIG9uZVdheU1vdmVtZW50OiBmYWxzZSxcbiAgc3dpcGVyRWxlbWVudE5vZGVOYW1lOiAnU1dJUEVSLUNPTlRBSU5FUicsXG4gIHRvdWNoRXZlbnRzVGFyZ2V0OiAnd3JhcHBlcicsXG4gIGluaXRpYWxTbGlkZTogMCxcbiAgc3BlZWQ6IDMwMCxcbiAgY3NzTW9kZTogZmFsc2UsXG4gIHVwZGF0ZU9uV2luZG93UmVzaXplOiB0cnVlLFxuICByZXNpemVPYnNlcnZlcjogdHJ1ZSxcbiAgbmVzdGVkOiBmYWxzZSxcbiAgY3JlYXRlRWxlbWVudHM6IGZhbHNlLFxuICBldmVudHNQcmVmaXg6ICdzd2lwZXInLFxuICBlbmFibGVkOiB0cnVlLFxuICBmb2N1c2FibGVFbGVtZW50czogJ2lucHV0LCBzZWxlY3QsIG9wdGlvbiwgdGV4dGFyZWEsIGJ1dHRvbiwgdmlkZW8sIGxhYmVsJyxcbiAgLy8gT3ZlcnJpZGVzXG4gIHdpZHRoOiBudWxsLFxuICBoZWlnaHQ6IG51bGwsXG4gIC8vXG4gIHByZXZlbnRJbnRlcmFjdGlvbk9uVHJhbnNpdGlvbjogZmFsc2UsXG4gIC8vIHNzclxuICB1c2VyQWdlbnQ6IG51bGwsXG4gIHVybDogbnVsbCxcbiAgLy8gVG8gc3VwcG9ydCBpT1MncyBzd2lwZS10by1nby1iYWNrIGdlc3R1cmUgKHdoZW4gYmVpbmcgdXNlZCBpbi1hcHApLlxuICBlZGdlU3dpcGVEZXRlY3Rpb246IGZhbHNlLFxuICBlZGdlU3dpcGVUaHJlc2hvbGQ6IDIwLFxuICAvLyBBdXRvaGVpZ2h0XG4gIGF1dG9IZWlnaHQ6IGZhbHNlLFxuICAvLyBTZXQgd3JhcHBlciB3aWR0aFxuICBzZXRXcmFwcGVyU2l6ZTogZmFsc2UsXG4gIC8vIFZpcnR1YWwgVHJhbnNsYXRlXG4gIHZpcnR1YWxUcmFuc2xhdGU6IGZhbHNlLFxuICAvLyBFZmZlY3RzXG4gIGVmZmVjdDogJ3NsaWRlJyxcbiAgLy8gJ3NsaWRlJyBvciAnZmFkZScgb3IgJ2N1YmUnIG9yICdjb3ZlcmZsb3cnIG9yICdmbGlwJ1xuXG4gIC8vIEJyZWFrcG9pbnRzXG4gIGJyZWFrcG9pbnRzOiB1bmRlZmluZWQsXG4gIGJyZWFrcG9pbnRzQmFzZTogJ3dpbmRvdycsXG4gIC8vIFNsaWRlcyBncmlkXG4gIHNwYWNlQmV0d2VlbjogMCxcbiAgc2xpZGVzUGVyVmlldzogMSxcbiAgc2xpZGVzUGVyR3JvdXA6IDEsXG4gIHNsaWRlc1Blckdyb3VwU2tpcDogMCxcbiAgc2xpZGVzUGVyR3JvdXBBdXRvOiBmYWxzZSxcbiAgY2VudGVyZWRTbGlkZXM6IGZhbHNlLFxuICBjZW50ZXJlZFNsaWRlc0JvdW5kczogZmFsc2UsXG4gIHNsaWRlc09mZnNldEJlZm9yZTogMCxcbiAgLy8gaW4gcHhcbiAgc2xpZGVzT2Zmc2V0QWZ0ZXI6IDAsXG4gIC8vIGluIHB4XG4gIG5vcm1hbGl6ZVNsaWRlSW5kZXg6IHRydWUsXG4gIGNlbnRlckluc3VmZmljaWVudFNsaWRlczogZmFsc2UsXG4gIC8vIERpc2FibGUgc3dpcGVyIGFuZCBoaWRlIG5hdmlnYXRpb24gd2hlbiBjb250YWluZXIgbm90IG92ZXJmbG93XG4gIHdhdGNoT3ZlcmZsb3c6IHRydWUsXG4gIC8vIFJvdW5kIGxlbmd0aFxuICByb3VuZExlbmd0aHM6IGZhbHNlLFxuICAvLyBUb3VjaGVzXG4gIHRvdWNoUmF0aW86IDEsXG4gIHRvdWNoQW5nbGU6IDQ1LFxuICBzaW11bGF0ZVRvdWNoOiB0cnVlLFxuICBzaG9ydFN3aXBlczogdHJ1ZSxcbiAgbG9uZ1N3aXBlczogdHJ1ZSxcbiAgbG9uZ1N3aXBlc1JhdGlvOiAwLjUsXG4gIGxvbmdTd2lwZXNNczogMzAwLFxuICBmb2xsb3dGaW5nZXI6IHRydWUsXG4gIGFsbG93VG91Y2hNb3ZlOiB0cnVlLFxuICB0aHJlc2hvbGQ6IDUsXG4gIHRvdWNoTW92ZVN0b3BQcm9wYWdhdGlvbjogZmFsc2UsXG4gIHRvdWNoU3RhcnRQcmV2ZW50RGVmYXVsdDogdHJ1ZSxcbiAgdG91Y2hTdGFydEZvcmNlUHJldmVudERlZmF1bHQ6IGZhbHNlLFxuICB0b3VjaFJlbGVhc2VPbkVkZ2VzOiBmYWxzZSxcbiAgLy8gVW5pcXVlIE5hdmlnYXRpb24gRWxlbWVudHNcbiAgdW5pcXVlTmF2RWxlbWVudHM6IHRydWUsXG4gIC8vIFJlc2lzdGFuY2VcbiAgcmVzaXN0YW5jZTogdHJ1ZSxcbiAgcmVzaXN0YW5jZVJhdGlvOiAwLjg1LFxuICAvLyBQcm9ncmVzc1xuICB3YXRjaFNsaWRlc1Byb2dyZXNzOiBmYWxzZSxcbiAgLy8gQ3Vyc29yXG4gIGdyYWJDdXJzb3I6IGZhbHNlLFxuICAvLyBDbGlja3NcbiAgcHJldmVudENsaWNrczogdHJ1ZSxcbiAgcHJldmVudENsaWNrc1Byb3BhZ2F0aW9uOiB0cnVlLFxuICBzbGlkZVRvQ2xpY2tlZFNsaWRlOiBmYWxzZSxcbiAgLy8gbG9vcFxuICBsb29wOiBmYWxzZSxcbiAgbG9vcEFkZEJsYW5rU2xpZGVzOiB0cnVlLFxuICBsb29wQWRkaXRpb25hbFNsaWRlczogMCxcbiAgbG9vcFByZXZlbnRzU2xpZGluZzogdHJ1ZSxcbiAgLy8gcmV3aW5kXG4gIHJld2luZDogZmFsc2UsXG4gIC8vIFN3aXBpbmcvbm8gc3dpcGluZ1xuICBhbGxvd1NsaWRlUHJldjogdHJ1ZSxcbiAgYWxsb3dTbGlkZU5leHQ6IHRydWUsXG4gIHN3aXBlSGFuZGxlcjogbnVsbCxcbiAgLy8gJy5zd2lwZS1oYW5kbGVyJyxcbiAgbm9Td2lwaW5nOiB0cnVlLFxuICBub1N3aXBpbmdDbGFzczogJ3N3aXBlci1uby1zd2lwaW5nJyxcbiAgbm9Td2lwaW5nU2VsZWN0b3I6IG51bGwsXG4gIC8vIFBhc3NpdmUgTGlzdGVuZXJzXG4gIHBhc3NpdmVMaXN0ZW5lcnM6IHRydWUsXG4gIG1heEJhY2tmYWNlSGlkZGVuU2xpZGVzOiAxMCxcbiAgLy8gTlNcbiAgY29udGFpbmVyTW9kaWZpZXJDbGFzczogJ3N3aXBlci0nLFxuICAvLyBORVdcbiAgc2xpZGVDbGFzczogJ3N3aXBlci1zbGlkZScsXG4gIHNsaWRlQmxhbmtDbGFzczogJ3N3aXBlci1zbGlkZS1ibGFuaycsXG4gIHNsaWRlQWN0aXZlQ2xhc3M6ICdzd2lwZXItc2xpZGUtYWN0aXZlJyxcbiAgc2xpZGVWaXNpYmxlQ2xhc3M6ICdzd2lwZXItc2xpZGUtdmlzaWJsZScsXG4gIHNsaWRlRnVsbHlWaXNpYmxlQ2xhc3M6ICdzd2lwZXItc2xpZGUtZnVsbHktdmlzaWJsZScsXG4gIHNsaWRlTmV4dENsYXNzOiAnc3dpcGVyLXNsaWRlLW5leHQnLFxuICBzbGlkZVByZXZDbGFzczogJ3N3aXBlci1zbGlkZS1wcmV2JyxcbiAgd3JhcHBlckNsYXNzOiAnc3dpcGVyLXdyYXBwZXInLFxuICBsYXp5UHJlbG9hZGVyQ2xhc3M6ICdzd2lwZXItbGF6eS1wcmVsb2FkZXInLFxuICBsYXp5UHJlbG9hZFByZXZOZXh0OiAwLFxuICAvLyBDYWxsYmFja3NcbiAgcnVuQ2FsbGJhY2tzT25Jbml0OiB0cnVlLFxuICAvLyBJbnRlcm5hbHNcbiAgX2VtaXRDbGFzc2VzOiBmYWxzZVxufTtcblxuZnVuY3Rpb24gbW9kdWxlRXh0ZW5kUGFyYW1zKHBhcmFtcywgYWxsTW9kdWxlc1BhcmFtcykge1xuICByZXR1cm4gZnVuY3Rpb24gZXh0ZW5kUGFyYW1zKG9iaikge1xuICAgIGlmIChvYmogPT09IHZvaWQgMCkge1xuICAgICAgb2JqID0ge307XG4gICAgfVxuICAgIGNvbnN0IG1vZHVsZVBhcmFtTmFtZSA9IE9iamVjdC5rZXlzKG9iailbMF07XG4gICAgY29uc3QgbW9kdWxlUGFyYW1zID0gb2JqW21vZHVsZVBhcmFtTmFtZV07XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVQYXJhbXMgIT09ICdvYmplY3QnIHx8IG1vZHVsZVBhcmFtcyA9PT0gbnVsbCkge1xuICAgICAgZXh0ZW5kKGFsbE1vZHVsZXNQYXJhbXMsIG9iaik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSA9PT0gdHJ1ZSkge1xuICAgICAgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0gPSB7XG4gICAgICAgIGVuYWJsZWQ6IHRydWVcbiAgICAgIH07XG4gICAgfVxuICAgIGlmIChtb2R1bGVQYXJhbU5hbWUgPT09ICduYXZpZ2F0aW9uJyAmJiBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSAmJiBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXS5lbmFibGVkICYmICFwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXS5wcmV2RWwgJiYgIXBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdLm5leHRFbCkge1xuICAgICAgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0uYXV0byA9IHRydWU7XG4gICAgfVxuICAgIGlmIChbJ3BhZ2luYXRpb24nLCAnc2Nyb2xsYmFyJ10uaW5kZXhPZihtb2R1bGVQYXJhbU5hbWUpID49IDAgJiYgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0gJiYgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0uZW5hYmxlZCAmJiAhcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0uZWwpIHtcbiAgICAgIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdLmF1dG8gPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoIShtb2R1bGVQYXJhbU5hbWUgaW4gcGFyYW1zICYmICdlbmFibGVkJyBpbiBtb2R1bGVQYXJhbXMpKSB7XG4gICAgICBleHRlbmQoYWxsTW9kdWxlc1BhcmFtcywgb2JqKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSA9PT0gJ29iamVjdCcgJiYgISgnZW5hYmxlZCcgaW4gcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0pKSB7XG4gICAgICBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXS5lbmFibGVkID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKCFwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSkgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0gPSB7XG4gICAgICBlbmFibGVkOiBmYWxzZVxuICAgIH07XG4gICAgZXh0ZW5kKGFsbE1vZHVsZXNQYXJhbXMsIG9iaik7XG4gIH07XG59XG5cbi8qIGVzbGludCBuby1wYXJhbS1yZWFzc2lnbjogXCJvZmZcIiAqL1xuY29uc3QgcHJvdG90eXBlcyA9IHtcbiAgZXZlbnRzRW1pdHRlcixcbiAgdXBkYXRlLFxuICB0cmFuc2xhdGUsXG4gIHRyYW5zaXRpb24sXG4gIHNsaWRlLFxuICBsb29wLFxuICBncmFiQ3Vyc29yLFxuICBldmVudHM6IGV2ZW50cyQxLFxuICBicmVha3BvaW50cyxcbiAgY2hlY2tPdmVyZmxvdzogY2hlY2tPdmVyZmxvdyQxLFxuICBjbGFzc2VzXG59O1xuY29uc3QgZXh0ZW5kZWREZWZhdWx0cyA9IHt9O1xuY2xhc3MgU3dpcGVyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgbGV0IGVsO1xuICAgIGxldCBwYXJhbXM7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cbiAgICBpZiAoYXJncy5sZW5ndGggPT09IDEgJiYgYXJnc1swXS5jb25zdHJ1Y3RvciAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJnc1swXSkuc2xpY2UoOCwgLTEpID09PSAnT2JqZWN0Jykge1xuICAgICAgcGFyYW1zID0gYXJnc1swXTtcbiAgICB9IGVsc2Uge1xuICAgICAgW2VsLCBwYXJhbXNdID0gYXJncztcbiAgICB9XG4gICAgaWYgKCFwYXJhbXMpIHBhcmFtcyA9IHt9O1xuICAgIHBhcmFtcyA9IGV4dGVuZCh7fSwgcGFyYW1zKTtcbiAgICBpZiAoZWwgJiYgIXBhcmFtcy5lbCkgcGFyYW1zLmVsID0gZWw7XG4gICAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICAgIGlmIChwYXJhbXMuZWwgJiYgdHlwZW9mIHBhcmFtcy5lbCA9PT0gJ3N0cmluZycgJiYgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChwYXJhbXMuZWwpLmxlbmd0aCA+IDEpIHtcbiAgICAgIGNvbnN0IHN3aXBlcnMgPSBbXTtcbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwocGFyYW1zLmVsKS5mb3JFYWNoKGNvbnRhaW5lckVsID0+IHtcbiAgICAgICAgY29uc3QgbmV3UGFyYW1zID0gZXh0ZW5kKHt9LCBwYXJhbXMsIHtcbiAgICAgICAgICBlbDogY29udGFpbmVyRWxcbiAgICAgICAgfSk7XG4gICAgICAgIHN3aXBlcnMucHVzaChuZXcgU3dpcGVyKG5ld1BhcmFtcykpO1xuICAgICAgfSk7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc3RydWN0b3ItcmV0dXJuXG4gICAgICByZXR1cm4gc3dpcGVycztcbiAgICB9XG5cbiAgICAvLyBTd2lwZXIgSW5zdGFuY2VcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIHN3aXBlci5fX3N3aXBlcl9fID0gdHJ1ZTtcbiAgICBzd2lwZXIuc3VwcG9ydCA9IGdldFN1cHBvcnQoKTtcbiAgICBzd2lwZXIuZGV2aWNlID0gZ2V0RGV2aWNlKHtcbiAgICAgIHVzZXJBZ2VudDogcGFyYW1zLnVzZXJBZ2VudFxuICAgIH0pO1xuICAgIHN3aXBlci5icm93c2VyID0gZ2V0QnJvd3NlcigpO1xuICAgIHN3aXBlci5ldmVudHNMaXN0ZW5lcnMgPSB7fTtcbiAgICBzd2lwZXIuZXZlbnRzQW55TGlzdGVuZXJzID0gW107XG4gICAgc3dpcGVyLm1vZHVsZXMgPSBbLi4uc3dpcGVyLl9fbW9kdWxlc19fXTtcbiAgICBpZiAocGFyYW1zLm1vZHVsZXMgJiYgQXJyYXkuaXNBcnJheShwYXJhbXMubW9kdWxlcykpIHtcbiAgICAgIHN3aXBlci5tb2R1bGVzLnB1c2goLi4ucGFyYW1zLm1vZHVsZXMpO1xuICAgIH1cbiAgICBjb25zdCBhbGxNb2R1bGVzUGFyYW1zID0ge307XG4gICAgc3dpcGVyLm1vZHVsZXMuZm9yRWFjaChtb2QgPT4ge1xuICAgICAgbW9kKHtcbiAgICAgICAgcGFyYW1zLFxuICAgICAgICBzd2lwZXIsXG4gICAgICAgIGV4dGVuZFBhcmFtczogbW9kdWxlRXh0ZW5kUGFyYW1zKHBhcmFtcywgYWxsTW9kdWxlc1BhcmFtcyksXG4gICAgICAgIG9uOiBzd2lwZXIub24uYmluZChzd2lwZXIpLFxuICAgICAgICBvbmNlOiBzd2lwZXIub25jZS5iaW5kKHN3aXBlciksXG4gICAgICAgIG9mZjogc3dpcGVyLm9mZi5iaW5kKHN3aXBlciksXG4gICAgICAgIGVtaXQ6IHN3aXBlci5lbWl0LmJpbmQoc3dpcGVyKVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvLyBFeHRlbmQgZGVmYXVsdHMgd2l0aCBtb2R1bGVzIHBhcmFtc1xuICAgIGNvbnN0IHN3aXBlclBhcmFtcyA9IGV4dGVuZCh7fSwgZGVmYXVsdHMsIGFsbE1vZHVsZXNQYXJhbXMpO1xuXG4gICAgLy8gRXh0ZW5kIGRlZmF1bHRzIHdpdGggcGFzc2VkIHBhcmFtc1xuICAgIHN3aXBlci5wYXJhbXMgPSBleHRlbmQoe30sIHN3aXBlclBhcmFtcywgZXh0ZW5kZWREZWZhdWx0cywgcGFyYW1zKTtcbiAgICBzd2lwZXIub3JpZ2luYWxQYXJhbXMgPSBleHRlbmQoe30sIHN3aXBlci5wYXJhbXMpO1xuICAgIHN3aXBlci5wYXNzZWRQYXJhbXMgPSBleHRlbmQoe30sIHBhcmFtcyk7XG5cbiAgICAvLyBhZGQgZXZlbnQgbGlzdGVuZXJzXG4gICAgaWYgKHN3aXBlci5wYXJhbXMgJiYgc3dpcGVyLnBhcmFtcy5vbikge1xuICAgICAgT2JqZWN0LmtleXMoc3dpcGVyLnBhcmFtcy5vbikuZm9yRWFjaChldmVudE5hbWUgPT4ge1xuICAgICAgICBzd2lwZXIub24oZXZlbnROYW1lLCBzd2lwZXIucGFyYW1zLm9uW2V2ZW50TmFtZV0pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChzd2lwZXIucGFyYW1zICYmIHN3aXBlci5wYXJhbXMub25BbnkpIHtcbiAgICAgIHN3aXBlci5vbkFueShzd2lwZXIucGFyYW1zLm9uQW55KTtcbiAgICB9XG5cbiAgICAvLyBFeHRlbmQgU3dpcGVyXG4gICAgT2JqZWN0LmFzc2lnbihzd2lwZXIsIHtcbiAgICAgIGVuYWJsZWQ6IHN3aXBlci5wYXJhbXMuZW5hYmxlZCxcbiAgICAgIGVsLFxuICAgICAgLy8gQ2xhc3Nlc1xuICAgICAgY2xhc3NOYW1lczogW10sXG4gICAgICAvLyBTbGlkZXNcbiAgICAgIHNsaWRlczogW10sXG4gICAgICBzbGlkZXNHcmlkOiBbXSxcbiAgICAgIHNuYXBHcmlkOiBbXSxcbiAgICAgIHNsaWRlc1NpemVzR3JpZDogW10sXG4gICAgICAvLyBpc0RpcmVjdGlvblxuICAgICAgaXNIb3Jpem9udGFsKCkge1xuICAgICAgICByZXR1cm4gc3dpcGVyLnBhcmFtcy5kaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJztcbiAgICAgIH0sXG4gICAgICBpc1ZlcnRpY2FsKCkge1xuICAgICAgICByZXR1cm4gc3dpcGVyLnBhcmFtcy5kaXJlY3Rpb24gPT09ICd2ZXJ0aWNhbCc7XG4gICAgICB9LFxuICAgICAgLy8gSW5kZXhlc1xuICAgICAgYWN0aXZlSW5kZXg6IDAsXG4gICAgICByZWFsSW5kZXg6IDAsXG4gICAgICAvL1xuICAgICAgaXNCZWdpbm5pbmc6IHRydWUsXG4gICAgICBpc0VuZDogZmFsc2UsXG4gICAgICAvLyBQcm9wc1xuICAgICAgdHJhbnNsYXRlOiAwLFxuICAgICAgcHJldmlvdXNUcmFuc2xhdGU6IDAsXG4gICAgICBwcm9ncmVzczogMCxcbiAgICAgIHZlbG9jaXR5OiAwLFxuICAgICAgYW5pbWF0aW5nOiBmYWxzZSxcbiAgICAgIGNzc092ZXJmbG93QWRqdXN0bWVudCgpIHtcbiAgICAgICAgLy8gUmV0dXJucyAwIHVubGVzcyBgdHJhbnNsYXRlYCBpcyA+IDIqKjIzXG4gICAgICAgIC8vIFNob3VsZCBiZSBzdWJ0cmFjdGVkIGZyb20gY3NzIHZhbHVlcyB0byBwcmV2ZW50IG92ZXJmbG93XG4gICAgICAgIHJldHVybiBNYXRoLnRydW5jKHRoaXMudHJhbnNsYXRlIC8gMiAqKiAyMykgKiAyICoqIDIzO1xuICAgICAgfSxcbiAgICAgIC8vIExvY2tzXG4gICAgICBhbGxvd1NsaWRlTmV4dDogc3dpcGVyLnBhcmFtcy5hbGxvd1NsaWRlTmV4dCxcbiAgICAgIGFsbG93U2xpZGVQcmV2OiBzd2lwZXIucGFyYW1zLmFsbG93U2xpZGVQcmV2LFxuICAgICAgLy8gVG91Y2ggRXZlbnRzXG4gICAgICB0b3VjaEV2ZW50c0RhdGE6IHtcbiAgICAgICAgaXNUb3VjaGVkOiB1bmRlZmluZWQsXG4gICAgICAgIGlzTW92ZWQ6IHVuZGVmaW5lZCxcbiAgICAgICAgYWxsb3dUb3VjaENhbGxiYWNrczogdW5kZWZpbmVkLFxuICAgICAgICB0b3VjaFN0YXJ0VGltZTogdW5kZWZpbmVkLFxuICAgICAgICBpc1Njcm9sbGluZzogdW5kZWZpbmVkLFxuICAgICAgICBjdXJyZW50VHJhbnNsYXRlOiB1bmRlZmluZWQsXG4gICAgICAgIHN0YXJ0VHJhbnNsYXRlOiB1bmRlZmluZWQsXG4gICAgICAgIGFsbG93VGhyZXNob2xkTW92ZTogdW5kZWZpbmVkLFxuICAgICAgICAvLyBGb3JtIGVsZW1lbnRzIHRvIG1hdGNoXG4gICAgICAgIGZvY3VzYWJsZUVsZW1lbnRzOiBzd2lwZXIucGFyYW1zLmZvY3VzYWJsZUVsZW1lbnRzLFxuICAgICAgICAvLyBMYXN0IGNsaWNrIHRpbWVcbiAgICAgICAgbGFzdENsaWNrVGltZTogMCxcbiAgICAgICAgY2xpY2tUaW1lb3V0OiB1bmRlZmluZWQsXG4gICAgICAgIC8vIFZlbG9jaXRpZXNcbiAgICAgICAgdmVsb2NpdGllczogW10sXG4gICAgICAgIGFsbG93TW9tZW50dW1Cb3VuY2U6IHVuZGVmaW5lZCxcbiAgICAgICAgc3RhcnRNb3Zpbmc6IHVuZGVmaW5lZCxcbiAgICAgICAgcG9pbnRlcklkOiBudWxsLFxuICAgICAgICB0b3VjaElkOiBudWxsXG4gICAgICB9LFxuICAgICAgLy8gQ2xpY2tzXG4gICAgICBhbGxvd0NsaWNrOiB0cnVlLFxuICAgICAgLy8gVG91Y2hlc1xuICAgICAgYWxsb3dUb3VjaE1vdmU6IHN3aXBlci5wYXJhbXMuYWxsb3dUb3VjaE1vdmUsXG4gICAgICB0b3VjaGVzOiB7XG4gICAgICAgIHN0YXJ0WDogMCxcbiAgICAgICAgc3RhcnRZOiAwLFxuICAgICAgICBjdXJyZW50WDogMCxcbiAgICAgICAgY3VycmVudFk6IDAsXG4gICAgICAgIGRpZmY6IDBcbiAgICAgIH0sXG4gICAgICAvLyBJbWFnZXNcbiAgICAgIGltYWdlc1RvTG9hZDogW10sXG4gICAgICBpbWFnZXNMb2FkZWQ6IDBcbiAgICB9KTtcbiAgICBzd2lwZXIuZW1pdCgnX3N3aXBlcicpO1xuXG4gICAgLy8gSW5pdFxuICAgIGlmIChzd2lwZXIucGFyYW1zLmluaXQpIHtcbiAgICAgIHN3aXBlci5pbml0KCk7XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGFwcCBpbnN0YW5jZVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdHJ1Y3Rvci1yZXR1cm5cbiAgICByZXR1cm4gc3dpcGVyO1xuICB9XG4gIGdldERpcmVjdGlvbkxhYmVsKHByb3BlcnR5KSB7XG4gICAgaWYgKHRoaXMuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgIHJldHVybiBwcm9wZXJ0eTtcbiAgICB9XG4gICAgLy8gcHJldHRpZXItaWdub3JlXG4gICAgcmV0dXJuIHtcbiAgICAgICd3aWR0aCc6ICdoZWlnaHQnLFxuICAgICAgJ21hcmdpbi10b3AnOiAnbWFyZ2luLWxlZnQnLFxuICAgICAgJ21hcmdpbi1ib3R0b20gJzogJ21hcmdpbi1yaWdodCcsXG4gICAgICAnbWFyZ2luLWxlZnQnOiAnbWFyZ2luLXRvcCcsXG4gICAgICAnbWFyZ2luLXJpZ2h0JzogJ21hcmdpbi1ib3R0b20nLFxuICAgICAgJ3BhZGRpbmctbGVmdCc6ICdwYWRkaW5nLXRvcCcsXG4gICAgICAncGFkZGluZy1yaWdodCc6ICdwYWRkaW5nLWJvdHRvbScsXG4gICAgICAnbWFyZ2luUmlnaHQnOiAnbWFyZ2luQm90dG9tJ1xuICAgIH1bcHJvcGVydHldO1xuICB9XG4gIGdldFNsaWRlSW5kZXgoc2xpZGVFbCkge1xuICAgIGNvbnN0IHtcbiAgICAgIHNsaWRlc0VsLFxuICAgICAgcGFyYW1zXG4gICAgfSA9IHRoaXM7XG4gICAgY29uc3Qgc2xpZGVzID0gZWxlbWVudENoaWxkcmVuKHNsaWRlc0VsLCBgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKTtcbiAgICBjb25zdCBmaXJzdFNsaWRlSW5kZXggPSBlbGVtZW50SW5kZXgoc2xpZGVzWzBdKTtcbiAgICByZXR1cm4gZWxlbWVudEluZGV4KHNsaWRlRWwpIC0gZmlyc3RTbGlkZUluZGV4O1xuICB9XG4gIGdldFNsaWRlSW5kZXhCeURhdGEoaW5kZXgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTbGlkZUluZGV4KHRoaXMuc2xpZGVzLmZpbHRlcihzbGlkZUVsID0+IHNsaWRlRWwuZ2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpICogMSA9PT0gaW5kZXgpWzBdKTtcbiAgfVxuICByZWNhbGNTbGlkZXMoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB7XG4gICAgICBzbGlkZXNFbCxcbiAgICAgIHBhcmFtc1xuICAgIH0gPSBzd2lwZXI7XG4gICAgc3dpcGVyLnNsaWRlcyA9IGVsZW1lbnRDaGlsZHJlbihzbGlkZXNFbCwgYC4ke3BhcmFtcy5zbGlkZUNsYXNzfSwgc3dpcGVyLXNsaWRlYCk7XG4gIH1cbiAgZW5hYmxlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKHN3aXBlci5lbmFibGVkKSByZXR1cm47XG4gICAgc3dpcGVyLmVuYWJsZWQgPSB0cnVlO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmdyYWJDdXJzb3IpIHtcbiAgICAgIHN3aXBlci5zZXRHcmFiQ3Vyc29yKCk7XG4gICAgfVxuICAgIHN3aXBlci5lbWl0KCdlbmFibGUnKTtcbiAgfVxuICBkaXNhYmxlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFzd2lwZXIuZW5hYmxlZCkgcmV0dXJuO1xuICAgIHN3aXBlci5lbmFibGVkID0gZmFsc2U7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuZ3JhYkN1cnNvcikge1xuICAgICAgc3dpcGVyLnVuc2V0R3JhYkN1cnNvcigpO1xuICAgIH1cbiAgICBzd2lwZXIuZW1pdCgnZGlzYWJsZScpO1xuICB9XG4gIHNldFByb2dyZXNzKHByb2dyZXNzLCBzcGVlZCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgcHJvZ3Jlc3MgPSBNYXRoLm1pbihNYXRoLm1heChwcm9ncmVzcywgMCksIDEpO1xuICAgIGNvbnN0IG1pbiA9IHN3aXBlci5taW5UcmFuc2xhdGUoKTtcbiAgICBjb25zdCBtYXggPSBzd2lwZXIubWF4VHJhbnNsYXRlKCk7XG4gICAgY29uc3QgY3VycmVudCA9IChtYXggLSBtaW4pICogcHJvZ3Jlc3MgKyBtaW47XG4gICAgc3dpcGVyLnRyYW5zbGF0ZVRvKGN1cnJlbnQsIHR5cGVvZiBzcGVlZCA9PT0gJ3VuZGVmaW5lZCcgPyAwIDogc3BlZWQpO1xuICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gIH1cbiAgZW1pdENvbnRhaW5lckNsYXNzZXMoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuX2VtaXRDbGFzc2VzIHx8ICFzd2lwZXIuZWwpIHJldHVybjtcbiAgICBjb25zdCBjbHMgPSBzd2lwZXIuZWwuY2xhc3NOYW1lLnNwbGl0KCcgJykuZmlsdGVyKGNsYXNzTmFtZSA9PiB7XG4gICAgICByZXR1cm4gY2xhc3NOYW1lLmluZGV4T2YoJ3N3aXBlcicpID09PSAwIHx8IGNsYXNzTmFtZS5pbmRleE9mKHN3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcykgPT09IDA7XG4gICAgfSk7XG4gICAgc3dpcGVyLmVtaXQoJ19jb250YWluZXJDbGFzc2VzJywgY2xzLmpvaW4oJyAnKSk7XG4gIH1cbiAgZ2V0U2xpZGVDbGFzc2VzKHNsaWRlRWwpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmIChzd2lwZXIuZGVzdHJveWVkKSByZXR1cm4gJyc7XG4gICAgcmV0dXJuIHNsaWRlRWwuY2xhc3NOYW1lLnNwbGl0KCcgJykuZmlsdGVyKGNsYXNzTmFtZSA9PiB7XG4gICAgICByZXR1cm4gY2xhc3NOYW1lLmluZGV4T2YoJ3N3aXBlci1zbGlkZScpID09PSAwIHx8IGNsYXNzTmFtZS5pbmRleE9mKHN3aXBlci5wYXJhbXMuc2xpZGVDbGFzcykgPT09IDA7XG4gICAgfSkuam9pbignICcpO1xuICB9XG4gIGVtaXRTbGlkZXNDbGFzc2VzKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLl9lbWl0Q2xhc3NlcyB8fCAhc3dpcGVyLmVsKSByZXR1cm47XG4gICAgY29uc3QgdXBkYXRlcyA9IFtdO1xuICAgIHN3aXBlci5zbGlkZXMuZm9yRWFjaChzbGlkZUVsID0+IHtcbiAgICAgIGNvbnN0IGNsYXNzTmFtZXMgPSBzd2lwZXIuZ2V0U2xpZGVDbGFzc2VzKHNsaWRlRWwpO1xuICAgICAgdXBkYXRlcy5wdXNoKHtcbiAgICAgICAgc2xpZGVFbCxcbiAgICAgICAgY2xhc3NOYW1lc1xuICAgICAgfSk7XG4gICAgICBzd2lwZXIuZW1pdCgnX3NsaWRlQ2xhc3MnLCBzbGlkZUVsLCBjbGFzc05hbWVzKTtcbiAgICB9KTtcbiAgICBzd2lwZXIuZW1pdCgnX3NsaWRlQ2xhc3NlcycsIHVwZGF0ZXMpO1xuICB9XG4gIHNsaWRlc1BlclZpZXdEeW5hbWljKHZpZXcsIGV4YWN0KSB7XG4gICAgaWYgKHZpZXcgPT09IHZvaWQgMCkge1xuICAgICAgdmlldyA9ICdjdXJyZW50JztcbiAgICB9XG4gICAgaWYgKGV4YWN0ID09PSB2b2lkIDApIHtcbiAgICAgIGV4YWN0ID0gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3Qge1xuICAgICAgcGFyYW1zLFxuICAgICAgc2xpZGVzLFxuICAgICAgc2xpZGVzR3JpZCxcbiAgICAgIHNsaWRlc1NpemVzR3JpZCxcbiAgICAgIHNpemU6IHN3aXBlclNpemUsXG4gICAgICBhY3RpdmVJbmRleFxuICAgIH0gPSBzd2lwZXI7XG4gICAgbGV0IHNwdiA9IDE7XG4gICAgaWYgKHR5cGVvZiBwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ251bWJlcicpIHJldHVybiBwYXJhbXMuc2xpZGVzUGVyVmlldztcbiAgICBpZiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICBsZXQgc2xpZGVTaXplID0gc2xpZGVzW2FjdGl2ZUluZGV4XSA/IE1hdGguY2VpbChzbGlkZXNbYWN0aXZlSW5kZXhdLnN3aXBlclNsaWRlU2l6ZSkgOiAwO1xuICAgICAgbGV0IGJyZWFrTG9vcDtcbiAgICAgIGZvciAobGV0IGkgPSBhY3RpdmVJbmRleCArIDE7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKHNsaWRlc1tpXSAmJiAhYnJlYWtMb29wKSB7XG4gICAgICAgICAgc2xpZGVTaXplICs9IE1hdGguY2VpbChzbGlkZXNbaV0uc3dpcGVyU2xpZGVTaXplKTtcbiAgICAgICAgICBzcHYgKz0gMTtcbiAgICAgICAgICBpZiAoc2xpZGVTaXplID4gc3dpcGVyU2l6ZSkgYnJlYWtMb29wID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZm9yIChsZXQgaSA9IGFjdGl2ZUluZGV4IC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgICAgaWYgKHNsaWRlc1tpXSAmJiAhYnJlYWtMb29wKSB7XG4gICAgICAgICAgc2xpZGVTaXplICs9IHNsaWRlc1tpXS5zd2lwZXJTbGlkZVNpemU7XG4gICAgICAgICAgc3B2ICs9IDE7XG4gICAgICAgICAgaWYgKHNsaWRlU2l6ZSA+IHN3aXBlclNpemUpIGJyZWFrTG9vcCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICBpZiAodmlldyA9PT0gJ2N1cnJlbnQnKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSBhY3RpdmVJbmRleCArIDE7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICBjb25zdCBzbGlkZUluVmlldyA9IGV4YWN0ID8gc2xpZGVzR3JpZFtpXSArIHNsaWRlc1NpemVzR3JpZFtpXSAtIHNsaWRlc0dyaWRbYWN0aXZlSW5kZXhdIDwgc3dpcGVyU2l6ZSA6IHNsaWRlc0dyaWRbaV0gLSBzbGlkZXNHcmlkW2FjdGl2ZUluZGV4XSA8IHN3aXBlclNpemU7XG4gICAgICAgICAgaWYgKHNsaWRlSW5WaWV3KSB7XG4gICAgICAgICAgICBzcHYgKz0gMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHByZXZpb3VzXG4gICAgICAgIGZvciAobGV0IGkgPSBhY3RpdmVJbmRleCAtIDE7IGkgPj0gMDsgaSAtPSAxKSB7XG4gICAgICAgICAgY29uc3Qgc2xpZGVJblZpZXcgPSBzbGlkZXNHcmlkW2FjdGl2ZUluZGV4XSAtIHNsaWRlc0dyaWRbaV0gPCBzd2lwZXJTaXplO1xuICAgICAgICAgIGlmIChzbGlkZUluVmlldykge1xuICAgICAgICAgICAgc3B2ICs9IDE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzcHY7XG4gIH1cbiAgdXBkYXRlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgIGNvbnN0IHtcbiAgICAgIHNuYXBHcmlkLFxuICAgICAgcGFyYW1zXG4gICAgfSA9IHN3aXBlcjtcbiAgICAvLyBCcmVha3BvaW50c1xuICAgIGlmIChwYXJhbXMuYnJlYWtwb2ludHMpIHtcbiAgICAgIHN3aXBlci5zZXRCcmVha3BvaW50KCk7XG4gICAgfVxuICAgIFsuLi5zd2lwZXIuZWwucXVlcnlTZWxlY3RvckFsbCgnW2xvYWRpbmc9XCJsYXp5XCJdJyldLmZvckVhY2goaW1hZ2VFbCA9PiB7XG4gICAgICBpZiAoaW1hZ2VFbC5jb21wbGV0ZSkge1xuICAgICAgICBwcm9jZXNzTGF6eVByZWxvYWRlcihzd2lwZXIsIGltYWdlRWwpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHN3aXBlci51cGRhdGVTaXplKCk7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlcygpO1xuICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcygpO1xuICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gICAgZnVuY3Rpb24gc2V0VHJhbnNsYXRlKCkge1xuICAgICAgY29uc3QgdHJhbnNsYXRlVmFsdWUgPSBzd2lwZXIucnRsVHJhbnNsYXRlID8gc3dpcGVyLnRyYW5zbGF0ZSAqIC0xIDogc3dpcGVyLnRyYW5zbGF0ZTtcbiAgICAgIGNvbnN0IG5ld1RyYW5zbGF0ZSA9IE1hdGgubWluKE1hdGgubWF4KHRyYW5zbGF0ZVZhbHVlLCBzd2lwZXIubWF4VHJhbnNsYXRlKCkpLCBzd2lwZXIubWluVHJhbnNsYXRlKCkpO1xuICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZShuZXdUcmFuc2xhdGUpO1xuICAgICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgIH1cbiAgICBsZXQgdHJhbnNsYXRlZDtcbiAgICBpZiAocGFyYW1zLmZyZWVNb2RlICYmIHBhcmFtcy5mcmVlTW9kZS5lbmFibGVkICYmICFwYXJhbXMuY3NzTW9kZSkge1xuICAgICAgc2V0VHJhbnNsYXRlKCk7XG4gICAgICBpZiAocGFyYW1zLmF1dG9IZWlnaHQpIHtcbiAgICAgICAgc3dpcGVyLnVwZGF0ZUF1dG9IZWlnaHQoKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKChwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nIHx8IHBhcmFtcy5zbGlkZXNQZXJWaWV3ID4gMSkgJiYgc3dpcGVyLmlzRW5kICYmICFwYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgICAgY29uc3Qgc2xpZGVzID0gc3dpcGVyLnZpcnR1YWwgJiYgcGFyYW1zLnZpcnR1YWwuZW5hYmxlZCA/IHN3aXBlci52aXJ0dWFsLnNsaWRlcyA6IHN3aXBlci5zbGlkZXM7XG4gICAgICAgIHRyYW5zbGF0ZWQgPSBzd2lwZXIuc2xpZGVUbyhzbGlkZXMubGVuZ3RoIC0gMSwgMCwgZmFsc2UsIHRydWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdHJhbnNsYXRlZCA9IHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCwgMCwgZmFsc2UsIHRydWUpO1xuICAgICAgfVxuICAgICAgaWYgKCF0cmFuc2xhdGVkKSB7XG4gICAgICAgIHNldFRyYW5zbGF0ZSgpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc25hcEdyaWQgIT09IHN3aXBlci5zbmFwR3JpZCkge1xuICAgICAgc3dpcGVyLmNoZWNrT3ZlcmZsb3coKTtcbiAgICB9XG4gICAgc3dpcGVyLmVtaXQoJ3VwZGF0ZScpO1xuICB9XG4gIGNoYW5nZURpcmVjdGlvbihuZXdEaXJlY3Rpb24sIG5lZWRVcGRhdGUpIHtcbiAgICBpZiAobmVlZFVwZGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgICBuZWVkVXBkYXRlID0gdHJ1ZTtcbiAgICB9XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCBjdXJyZW50RGlyZWN0aW9uID0gc3dpcGVyLnBhcmFtcy5kaXJlY3Rpb247XG4gICAgaWYgKCFuZXdEaXJlY3Rpb24pIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgbmV3RGlyZWN0aW9uID0gY3VycmVudERpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnID8gJ3ZlcnRpY2FsJyA6ICdob3Jpem9udGFsJztcbiAgICB9XG4gICAgaWYgKG5ld0RpcmVjdGlvbiA9PT0gY3VycmVudERpcmVjdGlvbiB8fCBuZXdEaXJlY3Rpb24gIT09ICdob3Jpem9udGFsJyAmJiBuZXdEaXJlY3Rpb24gIT09ICd2ZXJ0aWNhbCcpIHtcbiAgICAgIHJldHVybiBzd2lwZXI7XG4gICAgfVxuICAgIHN3aXBlci5lbC5jbGFzc0xpc3QucmVtb3ZlKGAke3N3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc30ke2N1cnJlbnREaXJlY3Rpb259YCk7XG4gICAgc3dpcGVyLmVsLmNsYXNzTGlzdC5hZGQoYCR7c3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfSR7bmV3RGlyZWN0aW9ufWApO1xuICAgIHN3aXBlci5lbWl0Q29udGFpbmVyQ2xhc3NlcygpO1xuICAgIHN3aXBlci5wYXJhbXMuZGlyZWN0aW9uID0gbmV3RGlyZWN0aW9uO1xuICAgIHN3aXBlci5zbGlkZXMuZm9yRWFjaChzbGlkZUVsID0+IHtcbiAgICAgIGlmIChuZXdEaXJlY3Rpb24gPT09ICd2ZXJ0aWNhbCcpIHtcbiAgICAgICAgc2xpZGVFbC5zdHlsZS53aWR0aCA9ICcnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2xpZGVFbC5zdHlsZS5oZWlnaHQgPSAnJztcbiAgICAgIH1cbiAgICB9KTtcbiAgICBzd2lwZXIuZW1pdCgnY2hhbmdlRGlyZWN0aW9uJyk7XG4gICAgaWYgKG5lZWRVcGRhdGUpIHN3aXBlci51cGRhdGUoKTtcbiAgICByZXR1cm4gc3dpcGVyO1xuICB9XG4gIGNoYW5nZUxhbmd1YWdlRGlyZWN0aW9uKGRpcmVjdGlvbikge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKHN3aXBlci5ydGwgJiYgZGlyZWN0aW9uID09PSAncnRsJyB8fCAhc3dpcGVyLnJ0bCAmJiBkaXJlY3Rpb24gPT09ICdsdHInKSByZXR1cm47XG4gICAgc3dpcGVyLnJ0bCA9IGRpcmVjdGlvbiA9PT0gJ3J0bCc7XG4gICAgc3dpcGVyLnJ0bFRyYW5zbGF0ZSA9IHN3aXBlci5wYXJhbXMuZGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcgJiYgc3dpcGVyLnJ0bDtcbiAgICBpZiAoc3dpcGVyLnJ0bCkge1xuICAgICAgc3dpcGVyLmVsLmNsYXNzTGlzdC5hZGQoYCR7c3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfXJ0bGApO1xuICAgICAgc3dpcGVyLmVsLmRpciA9ICdydGwnO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuZWwuY2xhc3NMaXN0LnJlbW92ZShgJHtzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9cnRsYCk7XG4gICAgICBzd2lwZXIuZWwuZGlyID0gJ2x0cic7XG4gICAgfVxuICAgIHN3aXBlci51cGRhdGUoKTtcbiAgfVxuICBtb3VudChlbGVtZW50KSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoc3dpcGVyLm1vdW50ZWQpIHJldHVybiB0cnVlO1xuXG4gICAgLy8gRmluZCBlbFxuICAgIGxldCBlbCA9IGVsZW1lbnQgfHwgc3dpcGVyLnBhcmFtcy5lbDtcbiAgICBpZiAodHlwZW9mIGVsID09PSAnc3RyaW5nJykge1xuICAgICAgZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGVsKTtcbiAgICB9XG4gICAgaWYgKCFlbCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBlbC5zd2lwZXIgPSBzd2lwZXI7XG4gICAgaWYgKGVsLnBhcmVudE5vZGUgJiYgZWwucGFyZW50Tm9kZS5ob3N0ICYmIGVsLnBhcmVudE5vZGUuaG9zdC5ub2RlTmFtZSA9PT0gc3dpcGVyLnBhcmFtcy5zd2lwZXJFbGVtZW50Tm9kZU5hbWUudG9VcHBlckNhc2UoKSkge1xuICAgICAgc3dpcGVyLmlzRWxlbWVudCA9IHRydWU7XG4gICAgfVxuICAgIGNvbnN0IGdldFdyYXBwZXJTZWxlY3RvciA9ICgpID0+IHtcbiAgICAgIHJldHVybiBgLiR7KHN3aXBlci5wYXJhbXMud3JhcHBlckNsYXNzIHx8ICcnKS50cmltKCkuc3BsaXQoJyAnKS5qb2luKCcuJyl9YDtcbiAgICB9O1xuICAgIGNvbnN0IGdldFdyYXBwZXIgPSAoKSA9PiB7XG4gICAgICBpZiAoZWwgJiYgZWwuc2hhZG93Um9vdCAmJiBlbC5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IpIHtcbiAgICAgICAgY29uc3QgcmVzID0gZWwuc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKGdldFdyYXBwZXJTZWxlY3RvcigpKTtcbiAgICAgICAgLy8gQ2hpbGRyZW4gbmVlZHMgdG8gcmV0dXJuIHNsb3QgaXRlbXNcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgIH1cbiAgICAgIHJldHVybiBlbGVtZW50Q2hpbGRyZW4oZWwsIGdldFdyYXBwZXJTZWxlY3RvcigpKVswXTtcbiAgICB9O1xuICAgIC8vIEZpbmQgV3JhcHBlclxuICAgIGxldCB3cmFwcGVyRWwgPSBnZXRXcmFwcGVyKCk7XG4gICAgaWYgKCF3cmFwcGVyRWwgJiYgc3dpcGVyLnBhcmFtcy5jcmVhdGVFbGVtZW50cykge1xuICAgICAgd3JhcHBlckVsID0gY3JlYXRlRWxlbWVudCgnZGl2Jywgc3dpcGVyLnBhcmFtcy53cmFwcGVyQ2xhc3MpO1xuICAgICAgZWwuYXBwZW5kKHdyYXBwZXJFbCk7XG4gICAgICBlbGVtZW50Q2hpbGRyZW4oZWwsIGAuJHtzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3N9YCkuZm9yRWFjaChzbGlkZUVsID0+IHtcbiAgICAgICAgd3JhcHBlckVsLmFwcGVuZChzbGlkZUVsKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBPYmplY3QuYXNzaWduKHN3aXBlciwge1xuICAgICAgZWwsXG4gICAgICB3cmFwcGVyRWwsXG4gICAgICBzbGlkZXNFbDogc3dpcGVyLmlzRWxlbWVudCAmJiAhZWwucGFyZW50Tm9kZS5ob3N0LnNsaWRlU2xvdHMgPyBlbC5wYXJlbnROb2RlLmhvc3QgOiB3cmFwcGVyRWwsXG4gICAgICBob3N0RWw6IHN3aXBlci5pc0VsZW1lbnQgPyBlbC5wYXJlbnROb2RlLmhvc3QgOiBlbCxcbiAgICAgIG1vdW50ZWQ6IHRydWUsXG4gICAgICAvLyBSVExcbiAgICAgIHJ0bDogZWwuZGlyLnRvTG93ZXJDYXNlKCkgPT09ICdydGwnIHx8IGVsZW1lbnRTdHlsZShlbCwgJ2RpcmVjdGlvbicpID09PSAncnRsJyxcbiAgICAgIHJ0bFRyYW5zbGF0ZTogc3dpcGVyLnBhcmFtcy5kaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJyAmJiAoZWwuZGlyLnRvTG93ZXJDYXNlKCkgPT09ICdydGwnIHx8IGVsZW1lbnRTdHlsZShlbCwgJ2RpcmVjdGlvbicpID09PSAncnRsJyksXG4gICAgICB3cm9uZ1JUTDogZWxlbWVudFN0eWxlKHdyYXBwZXJFbCwgJ2Rpc3BsYXknKSA9PT0gJy13ZWJraXQtYm94J1xuICAgIH0pO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGluaXQoZWwpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmIChzd2lwZXIuaW5pdGlhbGl6ZWQpIHJldHVybiBzd2lwZXI7XG4gICAgY29uc3QgbW91bnRlZCA9IHN3aXBlci5tb3VudChlbCk7XG4gICAgaWYgKG1vdW50ZWQgPT09IGZhbHNlKSByZXR1cm4gc3dpcGVyO1xuICAgIHN3aXBlci5lbWl0KCdiZWZvcmVJbml0Jyk7XG5cbiAgICAvLyBTZXQgYnJlYWtwb2ludFxuICAgIGlmIChzd2lwZXIucGFyYW1zLmJyZWFrcG9pbnRzKSB7XG4gICAgICBzd2lwZXIuc2V0QnJlYWtwb2ludCgpO1xuICAgIH1cblxuICAgIC8vIEFkZCBDbGFzc2VzXG4gICAgc3dpcGVyLmFkZENsYXNzZXMoKTtcblxuICAgIC8vIFVwZGF0ZSBzaXplXG4gICAgc3dpcGVyLnVwZGF0ZVNpemUoKTtcblxuICAgIC8vIFVwZGF0ZSBzbGlkZXNcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdykge1xuICAgICAgc3dpcGVyLmNoZWNrT3ZlcmZsb3coKTtcbiAgICB9XG5cbiAgICAvLyBTZXQgR3JhYiBDdXJzb3JcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5ncmFiQ3Vyc29yICYmIHN3aXBlci5lbmFibGVkKSB7XG4gICAgICBzd2lwZXIuc2V0R3JhYkN1cnNvcigpO1xuICAgIH1cblxuICAgIC8vIFNsaWRlIFRvIEluaXRpYWwgU2xpZGVcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wICYmIHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkKSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIucGFyYW1zLmluaXRpYWxTbGlkZSArIHN3aXBlci52aXJ0dWFsLnNsaWRlc0JlZm9yZSwgMCwgc3dpcGVyLnBhcmFtcy5ydW5DYWxsYmFja3NPbkluaXQsIGZhbHNlLCB0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnBhcmFtcy5pbml0aWFsU2xpZGUsIDAsIHN3aXBlci5wYXJhbXMucnVuQ2FsbGJhY2tzT25Jbml0LCBmYWxzZSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgLy8gQ3JlYXRlIGxvb3BcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICBzd2lwZXIubG9vcENyZWF0ZSgpO1xuICAgIH1cblxuICAgIC8vIEF0dGFjaCBldmVudHNcbiAgICBzd2lwZXIuYXR0YWNoRXZlbnRzKCk7XG4gICAgY29uc3QgbGF6eUVsZW1lbnRzID0gWy4uLnN3aXBlci5lbC5xdWVyeVNlbGVjdG9yQWxsKCdbbG9hZGluZz1cImxhenlcIl0nKV07XG4gICAgaWYgKHN3aXBlci5pc0VsZW1lbnQpIHtcbiAgICAgIGxhenlFbGVtZW50cy5wdXNoKC4uLnN3aXBlci5ob3N0RWwucXVlcnlTZWxlY3RvckFsbCgnW2xvYWRpbmc9XCJsYXp5XCJdJykpO1xuICAgIH1cbiAgICBsYXp5RWxlbWVudHMuZm9yRWFjaChpbWFnZUVsID0+IHtcbiAgICAgIGlmIChpbWFnZUVsLmNvbXBsZXRlKSB7XG4gICAgICAgIHByb2Nlc3NMYXp5UHJlbG9hZGVyKHN3aXBlciwgaW1hZ2VFbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbWFnZUVsLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBlID0+IHtcbiAgICAgICAgICBwcm9jZXNzTGF6eVByZWxvYWRlcihzd2lwZXIsIGUudGFyZ2V0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcHJlbG9hZChzd2lwZXIpO1xuXG4gICAgLy8gSW5pdCBGbGFnXG4gICAgc3dpcGVyLmluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICBwcmVsb2FkKHN3aXBlcik7XG5cbiAgICAvLyBFbWl0XG4gICAgc3dpcGVyLmVtaXQoJ2luaXQnKTtcbiAgICBzd2lwZXIuZW1pdCgnYWZ0ZXJJbml0Jyk7XG4gICAgcmV0dXJuIHN3aXBlcjtcbiAgfVxuICBkZXN0cm95KGRlbGV0ZUluc3RhbmNlLCBjbGVhblN0eWxlcykge1xuICAgIGlmIChkZWxldGVJbnN0YW5jZSA9PT0gdm9pZCAwKSB7XG4gICAgICBkZWxldGVJbnN0YW5jZSA9IHRydWU7XG4gICAgfVxuICAgIGlmIChjbGVhblN0eWxlcyA9PT0gdm9pZCAwKSB7XG4gICAgICBjbGVhblN0eWxlcyA9IHRydWU7XG4gICAgfVxuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3Qge1xuICAgICAgcGFyYW1zLFxuICAgICAgZWwsXG4gICAgICB3cmFwcGVyRWwsXG4gICAgICBzbGlkZXNcbiAgICB9ID0gc3dpcGVyO1xuICAgIGlmICh0eXBlb2Ygc3dpcGVyLnBhcmFtcyA9PT0gJ3VuZGVmaW5lZCcgfHwgc3dpcGVyLmRlc3Ryb3llZCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHN3aXBlci5lbWl0KCdiZWZvcmVEZXN0cm95Jyk7XG5cbiAgICAvLyBJbml0IEZsYWdcbiAgICBzd2lwZXIuaW5pdGlhbGl6ZWQgPSBmYWxzZTtcblxuICAgIC8vIERldGFjaCBldmVudHNcbiAgICBzd2lwZXIuZGV0YWNoRXZlbnRzKCk7XG5cbiAgICAvLyBEZXN0cm95IGxvb3BcbiAgICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICAgIHN3aXBlci5sb29wRGVzdHJveSgpO1xuICAgIH1cblxuICAgIC8vIENsZWFudXAgc3R5bGVzXG4gICAgaWYgKGNsZWFuU3R5bGVzKSB7XG4gICAgICBzd2lwZXIucmVtb3ZlQ2xhc3NlcygpO1xuICAgICAgaWYgKGVsICYmIHR5cGVvZiBlbCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKCdzdHlsZScpO1xuICAgICAgfVxuICAgICAgaWYgKHdyYXBwZXJFbCkge1xuICAgICAgICB3cmFwcGVyRWwucmVtb3ZlQXR0cmlidXRlKCdzdHlsZScpO1xuICAgICAgfVxuICAgICAgaWYgKHNsaWRlcyAmJiBzbGlkZXMubGVuZ3RoKSB7XG4gICAgICAgIHNsaWRlcy5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgICAgICAgIHNsaWRlRWwuY2xhc3NMaXN0LnJlbW92ZShwYXJhbXMuc2xpZGVWaXNpYmxlQ2xhc3MsIHBhcmFtcy5zbGlkZUZ1bGx5VmlzaWJsZUNsYXNzLCBwYXJhbXMuc2xpZGVBY3RpdmVDbGFzcywgcGFyYW1zLnNsaWRlTmV4dENsYXNzLCBwYXJhbXMuc2xpZGVQcmV2Q2xhc3MpO1xuICAgICAgICAgIHNsaWRlRWwucmVtb3ZlQXR0cmlidXRlKCdzdHlsZScpO1xuICAgICAgICAgIHNsaWRlRWwucmVtb3ZlQXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgc3dpcGVyLmVtaXQoJ2Rlc3Ryb3knKTtcblxuICAgIC8vIERldGFjaCBlbWl0dGVyIGV2ZW50c1xuICAgIE9iamVjdC5rZXlzKHN3aXBlci5ldmVudHNMaXN0ZW5lcnMpLmZvckVhY2goZXZlbnROYW1lID0+IHtcbiAgICAgIHN3aXBlci5vZmYoZXZlbnROYW1lKTtcbiAgICB9KTtcbiAgICBpZiAoZGVsZXRlSW5zdGFuY2UgIT09IGZhbHNlKSB7XG4gICAgICBpZiAoc3dpcGVyLmVsICYmIHR5cGVvZiBzd2lwZXIuZWwgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHN3aXBlci5lbC5zd2lwZXIgPSBudWxsO1xuICAgICAgfVxuICAgICAgZGVsZXRlUHJvcHMoc3dpcGVyKTtcbiAgICB9XG4gICAgc3dpcGVyLmRlc3Ryb3llZCA9IHRydWU7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgc3RhdGljIGV4dGVuZERlZmF1bHRzKG5ld0RlZmF1bHRzKSB7XG4gICAgZXh0ZW5kKGV4dGVuZGVkRGVmYXVsdHMsIG5ld0RlZmF1bHRzKTtcbiAgfVxuICBzdGF0aWMgZ2V0IGV4dGVuZGVkRGVmYXVsdHMoKSB7XG4gICAgcmV0dXJuIGV4dGVuZGVkRGVmYXVsdHM7XG4gIH1cbiAgc3RhdGljIGdldCBkZWZhdWx0cygpIHtcbiAgICByZXR1cm4gZGVmYXVsdHM7XG4gIH1cbiAgc3RhdGljIGluc3RhbGxNb2R1bGUobW9kKSB7XG4gICAgaWYgKCFTd2lwZXIucHJvdG90eXBlLl9fbW9kdWxlc19fKSBTd2lwZXIucHJvdG90eXBlLl9fbW9kdWxlc19fID0gW107XG4gICAgY29uc3QgbW9kdWxlcyA9IFN3aXBlci5wcm90b3R5cGUuX19tb2R1bGVzX187XG4gICAgaWYgKHR5cGVvZiBtb2QgPT09ICdmdW5jdGlvbicgJiYgbW9kdWxlcy5pbmRleE9mKG1vZCkgPCAwKSB7XG4gICAgICBtb2R1bGVzLnB1c2gobW9kKTtcbiAgICB9XG4gIH1cbiAgc3RhdGljIHVzZShtb2R1bGUpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShtb2R1bGUpKSB7XG4gICAgICBtb2R1bGUuZm9yRWFjaChtID0+IFN3aXBlci5pbnN0YWxsTW9kdWxlKG0pKTtcbiAgICAgIHJldHVybiBTd2lwZXI7XG4gICAgfVxuICAgIFN3aXBlci5pbnN0YWxsTW9kdWxlKG1vZHVsZSk7XG4gICAgcmV0dXJuIFN3aXBlcjtcbiAgfVxufVxuT2JqZWN0LmtleXMocHJvdG90eXBlcykuZm9yRWFjaChwcm90b3R5cGVHcm91cCA9PiB7XG4gIE9iamVjdC5rZXlzKHByb3RvdHlwZXNbcHJvdG90eXBlR3JvdXBdKS5mb3JFYWNoKHByb3RvTWV0aG9kID0+IHtcbiAgICBTd2lwZXIucHJvdG90eXBlW3Byb3RvTWV0aG9kXSA9IHByb3RvdHlwZXNbcHJvdG90eXBlR3JvdXBdW3Byb3RvTWV0aG9kXTtcbiAgfSk7XG59KTtcblN3aXBlci51c2UoW1Jlc2l6ZSwgT2JzZXJ2ZXJdKTtcblxuZXhwb3J0IHsgU3dpcGVyIGFzIFMsIGRlZmF1bHRzIGFzIGQgfTtcbiJdLCJuYW1lcyI6WyJzd2lwZXIiLCJvcmlnaW5hbFBhcmFtcyIsInBhcmFtcyIsImNoZWNrUHJvcHMiLCJjcmVhdGVFbGVtZW50cyIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwia2V5IiwiYXV0byIsImVsZW1lbnQiLCJlIiwiZWwiLCJjIiwiY2xhc3NOYW1lIiwiYXBwZW5kIiwiTmF2aWdhdGlvbiIsIl9yZWYiLCJleHRlbmRQYXJhbXMiLCJvbiIsImVtaXQiLCJnZXRFbCIsInJlcyIsImlzRWxlbWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJ1bmlxdWVOYXZFbGVtZW50cyIsImxlbmd0aCIsInRvZ2dsZUVsIiwiZGlzYWJsZWQiLCJuYXZpZ2F0aW9uIiwibSIsInN1YkVsIiwiY2xhc3NMaXN0IiwiZGlzYWJsZWRDbGFzcyIsInNwbGl0IiwidGFnTmFtZSIsIndhdGNoT3ZlcmZsb3ciLCJlbmFibGVkIiwiaXNMb2NrZWQiLCJsb2NrQ2xhc3MiLCJ1cGRhdGUiLCJuZXh0RWwiLCJwcmV2RWwiLCJsb29wIiwiaXNCZWdpbm5pbmciLCJyZXdpbmQiLCJpc0VuZCIsIm9uUHJldkNsaWNrIiwicHJldmVudERlZmF1bHQiLCJzbGlkZVByZXYiLCJvbk5leHRDbGljayIsInNsaWRlTmV4dCIsImluaXQiLCJhc3NpZ24iLCJpbml0QnV0dG9uIiwiZGlyIiwiYWRkRXZlbnRMaXN0ZW5lciIsImFkZCIsImRlc3Ryb3kiLCJkZXN0cm95QnV0dG9uIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInJlbW92ZSIsImhpZGVPbkNsaWNrIiwiaGlkZGVuQ2xhc3MiLCJuYXZpZ2F0aW9uRGlzYWJsZWRDbGFzcyIsImRpc2FibGUiLCJmaWx0ZXIiLCJfcyIsInRhcmdldEVsIiwidGFyZ2V0IiwidGFyZ2V0SXNCdXR0b24iLCJpbmNsdWRlcyIsInBhdGgiLCJjb21wb3NlZFBhdGgiLCJmaW5kIiwicGF0aEVsIiwicGFnaW5hdGlvbiIsImNsaWNrYWJsZSIsImNvbnRhaW5zIiwiaXNIaWRkZW4iLCJ0b2dnbGUiLCJlbmFibGUiLCJjbGFzc2VzIiwidHJpbSIsInJlcGxhY2UiLCJQYWdpbmF0aW9uIiwicGZ4IiwiYnVsbGV0U2l6ZSIsImJ1bGxldEVsZW1lbnQiLCJyZW5kZXJCdWxsZXQiLCJyZW5kZXJQcm9ncmVzc2JhciIsInJlbmRlckZyYWN0aW9uIiwicmVuZGVyQ3VzdG9tIiwicHJvZ3Jlc3NiYXJPcHBvc2l0ZSIsInR5cGUiLCJkeW5hbWljQnVsbGV0cyIsImR5bmFtaWNNYWluQnVsbGV0cyIsImZvcm1hdEZyYWN0aW9uQ3VycmVudCIsIm51bWJlciIsImZvcm1hdEZyYWN0aW9uVG90YWwiLCJidWxsZXRDbGFzcyIsImJ1bGxldEFjdGl2ZUNsYXNzIiwibW9kaWZpZXJDbGFzcyIsImN1cnJlbnRDbGFzcyIsInRvdGFsQ2xhc3MiLCJwcm9ncmVzc2JhckZpbGxDbGFzcyIsInByb2dyZXNzYmFyT3Bwb3NpdGVDbGFzcyIsImNsaWNrYWJsZUNsYXNzIiwiaG9yaXpvbnRhbENsYXNzIiwidmVydGljYWxDbGFzcyIsInBhZ2luYXRpb25EaXNhYmxlZENsYXNzIiwiYnVsbGV0cyIsImR5bmFtaWNCdWxsZXRJbmRleCIsImlzUGFnaW5hdGlvbkRpc2FibGVkIiwiQXJyYXkiLCJpc0FycmF5Iiwic2V0U2lkZUJ1bGxldHMiLCJidWxsZXRFbCIsInBvc2l0aW9uIiwib25CdWxsZXRDbGljayIsImNsb3Nlc3QiLCJpbmRleCIsInNsaWRlc1Blckdyb3VwIiwicmVhbEluZGV4Iiwic2xpZGVUb0xvb3AiLCJzbGlkZVRvIiwicnRsIiwiY3VycmVudCIsInByZXZpb3VzSW5kZXgiLCJzbGlkZXNMZW5ndGgiLCJ2aXJ0dWFsIiwic2xpZGVzIiwidG90YWwiLCJNYXRoIiwiY2VpbCIsInNuYXBHcmlkIiwicHJldmlvdXNSZWFsSW5kZXgiLCJmbG9vciIsInNuYXBJbmRleCIsInByZXZpb3VzU25hcEluZGV4IiwiYWN0aXZlSW5kZXgiLCJmaXJzdEluZGV4IiwibGFzdEluZGV4IiwibWlkSW5kZXgiLCJpc0hvcml6b250YWwiLCJzdHlsZSIsInVuZGVmaW5lZCIsIm1heCIsIm1pbiIsImNsYXNzZXNUb1JlbW92ZSIsIm1hcCIsInN1ZmZpeCIsInMiLCJmbGF0IiwiYnVsbGV0IiwiYnVsbGV0SW5kZXgiLCJzZXRBdHRyaWJ1dGUiLCJmaXJzdERpc3BsYXllZEJ1bGxldCIsImxhc3REaXNwbGF5ZWRCdWxsZXQiLCJpIiwiZHluYW1pY0J1bGxldHNMZW5ndGgiLCJidWxsZXRzT2Zmc2V0Iiwib2Zmc2V0UHJvcCIsInN1YkVsSW5kZXgiLCJmcmFjdGlvbkVsIiwidGV4dENvbnRlbnQiLCJ0b3RhbEVsIiwicHJvZ3Jlc3NiYXJEaXJlY3Rpb24iLCJzY2FsZSIsInNjYWxlWCIsInNjYWxlWSIsInByb2dyZXNzRWwiLCJ0cmFuc2Zvcm0iLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJzcGVlZCIsImlubmVySFRNTCIsInJlbmRlciIsImdyaWQiLCJyb3dzIiwicGFnaW5hdGlvbkhUTUwiLCJudW1iZXJPZkJ1bGxldHMiLCJmcmVlTW9kZSIsImNhbGwiLCJwdXNoIiwiaXNPYmplY3QiLCJvYmoiLCJjb25zdHJ1Y3RvciIsImV4dGVuZCIsInNyYyIsInNzckRvY3VtZW50IiwiYm9keSIsImFjdGl2ZUVsZW1lbnQiLCJibHVyIiwibm9kZU5hbWUiLCJnZXRFbGVtZW50QnlJZCIsImNyZWF0ZUV2ZW50IiwiaW5pdEV2ZW50IiwiY3JlYXRlRWxlbWVudCIsImNoaWxkcmVuIiwiY2hpbGROb2RlcyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiY3JlYXRlRWxlbWVudE5TIiwiaW1wb3J0Tm9kZSIsImxvY2F0aW9uIiwiaGFzaCIsImhvc3QiLCJob3N0bmFtZSIsImhyZWYiLCJvcmlnaW4iLCJwYXRobmFtZSIsInByb3RvY29sIiwic2VhcmNoIiwiZ2V0RG9jdW1lbnQiLCJkb2MiLCJzc3JXaW5kb3ciLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJoaXN0b3J5IiwicmVwbGFjZVN0YXRlIiwicHVzaFN0YXRlIiwiZ28iLCJiYWNrIiwiQ3VzdG9tRXZlbnQiLCJ0aGlzIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImdldFByb3BlcnR5VmFsdWUiLCJJbWFnZSIsIkRhdGUiLCJzY3JlZW4iLCJzZXRUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwibWF0Y2hNZWRpYSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImNhbGxiYWNrIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJpZCIsImdldFdpbmRvdyIsIndpbiIsIndpbmRvdyIsImRlbGV0ZVByb3BzIiwib2JqZWN0IiwibmV4dFRpY2siLCJkZWxheSIsIm5vdyIsImdldFRyYW5zbGF0ZSIsImF4aXMiLCJtYXRyaXgiLCJjdXJUcmFuc2Zvcm0iLCJ0cmFuc2Zvcm1NYXRyaXgiLCJjdXJTdHlsZSIsImN1cnJlbnRTdHlsZSIsIldlYktpdENTU01hdHJpeCIsIndlYmtpdFRyYW5zZm9ybSIsImEiLCJqb2luIiwiTW96VHJhbnNmb3JtIiwiT1RyYW5zZm9ybSIsIk1zVHJhbnNmb3JtIiwibXNUcmFuc2Zvcm0iLCJ0b1N0cmluZyIsIm00MSIsInBhcnNlRmxvYXQiLCJtNDIiLCJvIiwicHJvdG90eXBlIiwic2xpY2UiLCJ0byIsImFyZ3VtZW50cyIsIm5vRXh0ZW5kIiwibmV4dFNvdXJjZSIsIm5vZGUiLCJIVE1MRWxlbWVudCIsIm5vZGVUeXBlIiwia2V5c0FycmF5IiwiaW5kZXhPZiIsIm5leHRJbmRleCIsImxlbiIsIm5leHRLZXkiLCJkZXNjIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsIl9fc3dpcGVyX18iLCJzZXRDU1NQcm9wZXJ0eSIsInZhck5hbWUiLCJ2YXJWYWx1ZSIsInNldFByb3BlcnR5IiwiYW5pbWF0ZUNTU01vZGVTY3JvbGwiLCJ0YXJnZXRQb3NpdGlvbiIsInNpZGUiLCJzdGFydFBvc2l0aW9uIiwidHJhbnNsYXRlIiwidGltZSIsInN0YXJ0VGltZSIsImR1cmF0aW9uIiwid3JhcHBlckVsIiwic2Nyb2xsU25hcFR5cGUiLCJjc3NNb2RlRnJhbWVJRCIsImlzT3V0T2ZCb3VuZCIsImFuaW1hdGUiLCJnZXRUaW1lIiwicHJvZ3Jlc3MiLCJlYXNlUHJvZ3Jlc3MiLCJjb3MiLCJQSSIsImN1cnJlbnRQb3NpdGlvbiIsInNjcm9sbFRvIiwib3ZlcmZsb3ciLCJlbGVtZW50Q2hpbGRyZW4iLCJzZWxlY3RvciIsIm1hdGNoZXMiLCJzaG93V2FybmluZyIsInRleHQiLCJjb25zb2xlIiwid2FybiIsImVyciIsInRhZyIsImNsYXNzZXNUb1Rva2VucyIsImVsZW1lbnRQcmV2QWxsIiwicHJldkVscyIsInByZXZpb3VzRWxlbWVudFNpYmxpbmciLCJwcmV2IiwiZWxlbWVudE5leHRBbGwiLCJuZXh0RWxzIiwibmV4dEVsZW1lbnRTaWJsaW5nIiwibmV4dCIsImVsZW1lbnRTdHlsZSIsInByb3AiLCJlbGVtZW50SW5kZXgiLCJjaGlsZCIsInByZXZpb3VzU2libGluZyIsImVsZW1lbnRQYXJlbnRzIiwicGFyZW50cyIsInBhcmVudCIsInBhcmVudEVsZW1lbnQiLCJlbGVtZW50T3V0ZXJTaXplIiwic2l6ZSIsImluY2x1ZGVNYXJnaW5zIiwib2Zmc2V0V2lkdGgiLCJtYWtlRWxlbWVudHNBcnJheSIsInN1cHBvcnQiLCJkZXZpY2VDYWNoZWQiLCJicm93c2VyIiwiZ2V0U3VwcG9ydCIsImciLCJzbW9vdGhTY3JvbGwiLCJkb2N1bWVudEVsZW1lbnQiLCJ0b3VjaCIsIkRvY3VtZW50VG91Y2giLCJjYWxjU3VwcG9ydCIsImdldERldmljZSIsIm92ZXJyaWRlcyIsIl90ZW1wIiwicGxhdGZvcm0iLCJ1YSIsImRldmljZSIsImlvcyIsImFuZHJvaWQiLCJzY3JlZW5XaWR0aCIsIndpZHRoIiwic2NyZWVuSGVpZ2h0IiwiaGVpZ2h0IiwibWF0Y2giLCJpcGFkIiwiaXBvZCIsImlwaG9uZSIsIndpbmRvd3MiLCJtYWNvcyIsIm9zIiwiY2FsY0RldmljZSIsImdldEJyb3dzZXIiLCJuZWVkUGVyc3BlY3RpdmVGaXgiLCJpc1NhZmFyaSIsInRvTG93ZXJDYXNlIiwiU3RyaW5nIiwibWFqb3IiLCJtaW5vciIsIm51bSIsIk51bWJlciIsImlzV2ViVmlldyIsInRlc3QiLCJpc1NhZmFyaUJyb3dzZXIiLCJuZWVkM2RGaXgiLCJjYWxjQnJvd3NlciIsImV2ZW50c0VtaXR0ZXIiLCJldmVudHMiLCJoYW5kbGVyIiwicHJpb3JpdHkiLCJzZWxmIiwiZXZlbnRzTGlzdGVuZXJzIiwiZGVzdHJveWVkIiwibWV0aG9kIiwiZXZlbnQiLCJvbmNlIiwib25jZUhhbmRsZXIiLCJvZmYiLCJfX2VtaXR0ZXJQcm94eSIsIl9sZW4iLCJhcmdzIiwiX2tleSIsImFwcGx5Iiwib25BbnkiLCJldmVudHNBbnlMaXN0ZW5lcnMiLCJvZmZBbnkiLCJzcGxpY2UiLCJldmVudEhhbmRsZXIiLCJkYXRhIiwiY29udGV4dCIsIl9sZW4yIiwiX2tleTIiLCJ1bnNoaWZ0IiwidG9nZ2xlU2xpZGVDbGFzc2VzJDEiLCJzbGlkZUVsIiwiY29uZGl0aW9uIiwidG9nZ2xlU2xpZGVDbGFzc2VzIiwicHJvY2Vzc0xhenlQcmVsb2FkZXIiLCJpbWFnZUVsIiwic2xpZGVDbGFzcyIsImxhenlFbCIsImxhenlQcmVsb2FkZXJDbGFzcyIsInNoYWRvd1Jvb3QiLCJ1bmxhenkiLCJyZW1vdmVBdHRyaWJ1dGUiLCJwcmVsb2FkIiwiYW1vdW50IiwibGF6eVByZWxvYWRQcmV2TmV4dCIsInNsaWRlc1BlclZpZXciLCJzbGlkZXNQZXJWaWV3RHluYW1pYyIsImFjdGl2ZUNvbHVtbiIsInByZWxvYWRDb2x1bW5zIiwiZnJvbSIsIl8iLCJjb2x1bW4iLCJzbGlkZUluZGV4TGFzdEluVmlldyIsInVwZGF0ZVNpemUiLCJjbGllbnRXaWR0aCIsImNsaWVudEhlaWdodCIsImlzVmVydGljYWwiLCJwYXJzZUludCIsImlzTmFOIiwidXBkYXRlU2xpZGVzIiwiZ2V0RGlyZWN0aW9uUHJvcGVydHlWYWx1ZSIsImxhYmVsIiwiZ2V0RGlyZWN0aW9uTGFiZWwiLCJzbGlkZXNFbCIsInN3aXBlclNpemUiLCJydGxUcmFuc2xhdGUiLCJ3cm9uZ1JUTCIsImlzVmlydHVhbCIsInByZXZpb3VzU2xpZGVzTGVuZ3RoIiwic2xpZGVzR3JpZCIsInNsaWRlc1NpemVzR3JpZCIsIm9mZnNldEJlZm9yZSIsInNsaWRlc09mZnNldEJlZm9yZSIsIm9mZnNldEFmdGVyIiwic2xpZGVzT2Zmc2V0QWZ0ZXIiLCJwcmV2aW91c1NuYXBHcmlkTGVuZ3RoIiwicHJldmlvdXNTbGlkZXNHcmlkTGVuZ3RoIiwic3BhY2VCZXR3ZWVuIiwic2xpZGVQb3NpdGlvbiIsInByZXZTbGlkZVNpemUiLCJ2aXJ0dWFsU2l6ZSIsIm1hcmdpbkxlZnQiLCJtYXJnaW5SaWdodCIsIm1hcmdpbkJvdHRvbSIsIm1hcmdpblRvcCIsImNlbnRlcmVkU2xpZGVzIiwiY3NzTW9kZSIsImdyaWRFbmFibGVkIiwic2xpZGVTaXplIiwiaW5pdFNsaWRlcyIsInVuc2V0U2xpZGVzIiwic2hvdWxkUmVzZXRTbGlkZVNpemUiLCJicmVha3BvaW50cyIsInNsaWRlIiwidXBkYXRlU2xpZGUiLCJzbGlkZVN0eWxlcyIsImN1cnJlbnRUcmFuc2Zvcm0iLCJjdXJyZW50V2ViS2l0VHJhbnNmb3JtIiwicm91bmRMZW5ndGhzIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJib3hTaXppbmciLCJzd2lwZXJTbGlkZVNpemUiLCJhYnMiLCJzbGlkZXNQZXJHcm91cFNraXAiLCJlZmZlY3QiLCJzZXRXcmFwcGVyU2l6ZSIsInVwZGF0ZVdyYXBwZXJTaXplIiwibmV3U2xpZGVzR3JpZCIsInNsaWRlc0dyaWRJdGVtIiwiZ3JvdXBzIiwic2xpZGVzQmVmb3JlIiwic2xpZGVzQWZ0ZXIiLCJncm91cFNpemUiLCJzbGlkZUluZGV4IiwiY2VudGVyZWRTbGlkZXNCb3VuZHMiLCJhbGxTbGlkZXNTaXplIiwic2xpZGVTaXplVmFsdWUiLCJtYXhTbmFwIiwic25hcCIsImNlbnRlckluc3VmZmljaWVudFNsaWRlcyIsIm9mZnNldFNpemUiLCJhbGxTbGlkZXNPZmZzZXQiLCJhZGRUb1NuYXBHcmlkIiwiYWRkVG9TbGlkZXNHcmlkIiwidiIsImNoZWNrT3ZlcmZsb3ciLCJ3YXRjaFNsaWRlc1Byb2dyZXNzIiwidXBkYXRlU2xpZGVzT2Zmc2V0IiwiYmFja0ZhY2VIaWRkZW5DbGFzcyIsImNvbnRhaW5lck1vZGlmaWVyQ2xhc3MiLCJoYXNDbGFzc0JhY2tmYWNlQ2xhc3NBZGRlZCIsIm1heEJhY2tmYWNlSGlkZGVuU2xpZGVzIiwidXBkYXRlQXV0b0hlaWdodCIsImFjdGl2ZVNsaWRlcyIsIm5ld0hlaWdodCIsInNldFRyYW5zaXRpb24iLCJnZXRTbGlkZUJ5SW5kZXgiLCJnZXRTbGlkZUluZGV4QnlEYXRhIiwidmlzaWJsZVNsaWRlcyIsIm9mZnNldEhlaWdodCIsIm1pbnVzT2Zmc2V0Iiwib2Zmc2V0TGVmdCIsIm9mZnNldFRvcCIsInN3aXBlclNsaWRlT2Zmc2V0IiwiY3NzT3ZlcmZsb3dBZGp1c3RtZW50IiwidXBkYXRlU2xpZGVzUHJvZ3Jlc3MiLCJvZmZzZXRDZW50ZXIiLCJ2aXNpYmxlU2xpZGVzSW5kZXhlcyIsInNsaWRlT2Zmc2V0Iiwic2xpZGVQcm9ncmVzcyIsIm1pblRyYW5zbGF0ZSIsIm9yaWdpbmFsU2xpZGVQcm9ncmVzcyIsInNsaWRlQmVmb3JlIiwic2xpZGVBZnRlciIsImlzRnVsbHlWaXNpYmxlIiwiaXNWaXNpYmxlIiwic2xpZGVWaXNpYmxlQ2xhc3MiLCJzbGlkZUZ1bGx5VmlzaWJsZUNsYXNzIiwib3JpZ2luYWxQcm9ncmVzcyIsInVwZGF0ZVByb2dyZXNzIiwibXVsdGlwbGllciIsInRyYW5zbGF0ZXNEaWZmIiwibWF4VHJhbnNsYXRlIiwicHJvZ3Jlc3NMb29wIiwid2FzQmVnaW5uaW5nIiwid2FzRW5kIiwiaXNCZWdpbm5pbmdSb3VuZGVkIiwiaXNFbmRSb3VuZGVkIiwiZmlyc3RTbGlkZUluZGV4IiwibGFzdFNsaWRlSW5kZXgiLCJmaXJzdFNsaWRlVHJhbnNsYXRlIiwibGFzdFNsaWRlVHJhbnNsYXRlIiwidHJhbnNsYXRlTWF4IiwidHJhbnNsYXRlQWJzIiwiYXV0b0hlaWdodCIsInVwZGF0ZVNsaWRlc0NsYXNzZXMiLCJnZXRGaWx0ZXJlZFNsaWRlIiwiYWN0aXZlU2xpZGUiLCJwcmV2U2xpZGUiLCJuZXh0U2xpZGUiLCJzbGlkZUFjdGl2ZUNsYXNzIiwic2xpZGVOZXh0Q2xhc3MiLCJzbGlkZVByZXZDbGFzcyIsImVtaXRTbGlkZXNDbGFzc2VzIiwidXBkYXRlQWN0aXZlSW5kZXgiLCJuZXdBY3RpdmVJbmRleCIsImdldFZpcnR1YWxSZWFsSW5kZXgiLCJhSW5kZXgiLCJub3JtYWxpemVTbGlkZUluZGV4IiwiZ2V0QWN0aXZlSW5kZXhCeVRyYW5zbGF0ZSIsInNraXAiLCJmaXJzdFNsaWRlSW5Db2x1bW4iLCJhY3RpdmVTbGlkZUluZGV4IiwiZ2V0QXR0cmlidXRlIiwiaW5pdGlhbGl6ZWQiLCJydW5DYWxsYmFja3NPbkluaXQiLCJ1cGRhdGVDbGlja2VkU2xpZGUiLCJzbGlkZUZvdW5kIiwiY2xpY2tlZFNsaWRlIiwiY2xpY2tlZEluZGV4Iiwic2xpZGVUb0NsaWNrZWRTbGlkZSIsInZpcnR1YWxUcmFuc2xhdGUiLCJjdXJyZW50VHJhbnNsYXRlIiwic2V0VHJhbnNsYXRlIiwiYnlDb250cm9sbGVyIiwibmV3UHJvZ3Jlc3MiLCJ4IiwieSIsInByZXZpb3VzVHJhbnNsYXRlIiwidHJhbnNsYXRlVG8iLCJydW5DYWxsYmFja3MiLCJ0cmFuc2xhdGVCb3VuZHMiLCJpbnRlcm5hbCIsImFuaW1hdGluZyIsInByZXZlbnRJbnRlcmFjdGlvbk9uVHJhbnNpdGlvbiIsIm5ld1RyYW5zbGF0ZSIsImlzSCIsImJlaGF2aW9yIiwib25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kIiwidHJhbnNpdGlvbkVtaXQiLCJkaXJlY3Rpb24iLCJzdGVwIiwiaW5pdGlhbCIsIm5vcm1hbGl6ZWRUcmFuc2xhdGUiLCJub3JtYWxpemVkR3JpZCIsIm5vcm1hbGl6ZWRHcmlkTmV4dCIsImFsbG93U2xpZGVOZXh0IiwiYWxsb3dTbGlkZVByZXYiLCJ0cmFuc2l0aW9uU3RhcnQiLCJ0cmFuc2l0aW9uRW5kIiwidCIsIl9pbW1lZGlhdGVWaXJ0dWFsIiwiX2Nzc01vZGVWaXJ0dWFsSW5pdGlhbFNldCIsImluaXRpYWxTbGlkZSIsIm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kIiwibmV3SW5kZXgiLCJ0YXJnZXRTbGlkZUluZGV4IiwiY29scyIsIm5lZWRMb29wRml4IiwibG9vcEZpeCIsInNsaWRlUmVhbEluZGV4IiwicGVyR3JvdXAiLCJzbGlkZXNQZXJHcm91cEF1dG8iLCJpbmNyZW1lbnQiLCJsb29wUHJldmVudHNTbGlkaW5nIiwiX2NsaWVudExlZnQiLCJjbGllbnRMZWZ0Iiwibm9ybWFsaXplIiwidmFsIiwibm9ybWFsaXplZFNuYXBHcmlkIiwicHJldlNuYXAiLCJwcmV2U25hcEluZGV4IiwicHJldkluZGV4Iiwic2xpZGVSZXNldCIsInNsaWRlVG9DbG9zZXN0IiwidGhyZXNob2xkIiwiY3VycmVudFNuYXAiLCJzbGlkZVRvSW5kZXgiLCJzbGlkZVNlbGVjdG9yIiwibG9vcGVkU2xpZGVzIiwiZ2V0U2xpZGVJbmRleCIsIm4iLCJsb29wQ3JlYXRlIiwic2hvdWxkRmlsbEdyb3VwIiwic2hvdWxkRmlsbEdyaWQiLCJhZGRCbGFua1NsaWRlcyIsImFtb3VudE9mU2xpZGVzIiwic2xpZGVCbGFua0NsYXNzIiwibG9vcEFkZEJsYW5rU2xpZGVzIiwicmVjYWxjU2xpZGVzIiwiYnlNb3VzZXdoZWVsIiwibG9vcEFkZGl0aW9uYWxTbGlkZXMiLCJmaWxsIiwicHJlcGVuZFNsaWRlc0luZGV4ZXMiLCJhcHBlbmRTbGlkZXNJbmRleGVzIiwiaXNOZXh0IiwiaXNQcmV2Iiwic2xpZGVzUHJlcGVuZGVkIiwic2xpZGVzQXBwZW5kZWQiLCJhY3RpdmVDb2xJbmRleFdpdGhTaGlmdCIsImNvbEluZGV4VG9QcmVwZW5kIiwiX19wcmV2ZW50T2JzZXJ2ZXJfXyIsInN3aXBlckxvb3BNb3ZlRE9NIiwicHJlcGVuZCIsImN1cnJlbnRTbGlkZVRyYW5zbGF0ZSIsImRpZmYiLCJ0b3VjaEV2ZW50c0RhdGEiLCJzdGFydFRyYW5zbGF0ZSIsInNoaWZ0IiwiY29udHJvbGxlciIsImNvbnRyb2wiLCJsb29wUGFyYW1zIiwibG9vcERlc3Ryb3kiLCJuZXdTbGlkZXNPcmRlciIsInN3aXBlclNsaWRlSW5kZXgiLCJwcmV2ZW50RWRnZVN3aXBlIiwic3RhcnRYIiwiZWRnZVN3aXBlRGV0ZWN0aW9uIiwiZWRnZVN3aXBlVGhyZXNob2xkIiwiaW5uZXJXaWR0aCIsIm9uVG91Y2hTdGFydCIsIm9yaWdpbmFsRXZlbnQiLCJwb2ludGVySWQiLCJ0YXJnZXRUb3VjaGVzIiwidG91Y2hJZCIsImlkZW50aWZpZXIiLCJwYWdlWCIsInRvdWNoZXMiLCJzaW11bGF0ZVRvdWNoIiwicG9pbnRlclR5cGUiLCJ0b3VjaEV2ZW50c1RhcmdldCIsIndoaWNoIiwiYnV0dG9uIiwiaXNUb3VjaGVkIiwiaXNNb3ZlZCIsInN3aXBpbmdDbGFzc0hhc1ZhbHVlIiwibm9Td2lwaW5nQ2xhc3MiLCJldmVudFBhdGgiLCJub1N3aXBpbmdTZWxlY3RvciIsImlzVGFyZ2V0U2hhZG93Iiwibm9Td2lwaW5nIiwiYmFzZSIsIl9fY2xvc2VzdEZyb20iLCJhc3NpZ25lZFNsb3QiLCJmb3VuZCIsImdldFJvb3ROb2RlIiwiY2xvc2VzdEVsZW1lbnQiLCJhbGxvd0NsaWNrIiwic3dpcGVIYW5kbGVyIiwiY3VycmVudFgiLCJjdXJyZW50WSIsInBhZ2VZIiwic3RhcnRZIiwiYWxsb3dUb3VjaENhbGxiYWNrcyIsImlzU2Nyb2xsaW5nIiwic3RhcnRNb3ZpbmciLCJ0b3VjaFN0YXJ0VGltZSIsInN3aXBlRGlyZWN0aW9uIiwiYWxsb3dUaHJlc2hvbGRNb3ZlIiwiZm9jdXNhYmxlRWxlbWVudHMiLCJzaG91bGRQcmV2ZW50RGVmYXVsdCIsImFsbG93VG91Y2hNb3ZlIiwidG91Y2hTdGFydFByZXZlbnREZWZhdWx0IiwidG91Y2hTdGFydEZvcmNlUHJldmVudERlZmF1bHQiLCJpc0NvbnRlbnRFZGl0YWJsZSIsIm9uVG91Y2hNb3ZlIiwidGFyZ2V0VG91Y2giLCJjaGFuZ2VkVG91Y2hlcyIsInByZXZlbnRlZEJ5TmVzdGVkU3dpcGVyIiwidG91Y2hSZWxlYXNlT25FZGdlcyIsInByZXZpb3VzWCIsInByZXZpb3VzWSIsImRpZmZYIiwiZGlmZlkiLCJzcXJ0IiwidG91Y2hBbmdsZSIsImF0YW4yIiwicHJldmVudFRvdWNoTW92ZUZyb21Qb2ludGVyTW92ZSIsImNhbmNlbGFibGUiLCJ0b3VjaE1vdmVTdG9wUHJvcGFnYXRpb24iLCJuZXN0ZWQiLCJzdG9wUHJvcGFnYXRpb24iLCJ0b3VjaGVzRGlmZiIsIm9uZVdheU1vdmVtZW50IiwidG91Y2hSYXRpbyIsInByZXZUb3VjaGVzRGlyZWN0aW9uIiwidG91Y2hlc0RpcmVjdGlvbiIsImlzTG9vcCIsImFsbG93TG9vcEZpeCIsImV2dCIsImJ1YmJsZXMiLCJkZXRhaWwiLCJieVN3aXBlclRvdWNoTW92ZSIsImRpc3BhdGNoRXZlbnQiLCJhbGxvd01vbWVudHVtQm91bmNlIiwiZ3JhYkN1cnNvciIsInNldEdyYWJDdXJzb3IiLCJsb29wU3dhcFJlc2V0IiwiZGlzYWJsZVBhcmVudFN3aXBlciIsInJlc2lzdGFuY2VSYXRpbyIsInJlc2lzdGFuY2UiLCJmb2xsb3dGaW5nZXIiLCJvblRvdWNoRW5kIiwidG91Y2hFbmRUaW1lIiwidGltZURpZmYiLCJwYXRoVHJlZSIsImxhc3RDbGlja1RpbWUiLCJjdXJyZW50UG9zIiwic3dpcGVUb0xhc3QiLCJzdG9wSW5kZXgiLCJyZXdpbmRGaXJzdEluZGV4IiwicmV3aW5kTGFzdEluZGV4IiwicmF0aW8iLCJsb25nU3dpcGVzTXMiLCJsb25nU3dpcGVzIiwibG9uZ1N3aXBlc1JhdGlvIiwic2hvcnRTd2lwZXMiLCJvblJlc2l6ZSIsInNldEJyZWFrcG9pbnQiLCJpc1ZpcnR1YWxMb29wIiwiYXV0b3BsYXkiLCJydW5uaW5nIiwicGF1c2VkIiwicmVzaXplVGltZW91dCIsInJlc3VtZSIsIm9uQ2xpY2siLCJwcmV2ZW50Q2xpY2tzIiwicHJldmVudENsaWNrc1Byb3BhZ2F0aW9uIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwib25TY3JvbGwiLCJzY3JvbGxMZWZ0Iiwic2Nyb2xsVG9wIiwib25Mb2FkIiwib25Eb2N1bWVudFRvdWNoU3RhcnQiLCJkb2N1bWVudFRvdWNoSGFuZGxlclByb2NlZWRlZCIsInRvdWNoQWN0aW9uIiwiY2FwdHVyZSIsImRvbU1ldGhvZCIsInN3aXBlck1ldGhvZCIsInBhc3NpdmUiLCJ1cGRhdGVPbldpbmRvd1Jlc2l6ZSIsImlzR3JpZEVuYWJsZWQiLCJkZWZhdWx0cyIsInN3aXBlckVsZW1lbnROb2RlTmFtZSIsInJlc2l6ZU9ic2VydmVyIiwiZXZlbnRzUHJlZml4IiwidXJsIiwiYnJlYWtwb2ludHNCYXNlIiwicGFzc2l2ZUxpc3RlbmVycyIsIndyYXBwZXJDbGFzcyIsIl9lbWl0Q2xhc3NlcyIsIm1vZHVsZUV4dGVuZFBhcmFtcyIsImFsbE1vZHVsZXNQYXJhbXMiLCJtb2R1bGVQYXJhbU5hbWUiLCJtb2R1bGVQYXJhbXMiLCJwcm90b3R5cGVzIiwidHJhbnNpdGlvbiIsInRyYW5zaXRpb25EZWxheSIsIm1vdmluZyIsImN1cnNvciIsInVuc2V0R3JhYkN1cnNvciIsImF0dGFjaEV2ZW50cyIsImJpbmQiLCJkZXRhY2hFdmVudHMiLCJicmVha3BvaW50IiwiZ2V0QnJlYWtwb2ludCIsImN1cnJlbnRCcmVha3BvaW50IiwiYnJlYWtwb2ludFBhcmFtcyIsIndhc011bHRpUm93IiwiaXNNdWx0aVJvdyIsIndhc0dyYWJDdXJzb3IiLCJpc0dyYWJDdXJzb3IiLCJ3YXNFbmFibGVkIiwiZW1pdENvbnRhaW5lckNsYXNzZXMiLCJ3YXNNb2R1bGVFbmFibGVkIiwiaXNNb2R1bGVFbmFibGVkIiwiZGlyZWN0aW9uQ2hhbmdlZCIsIm5lZWRzUmVMb29wIiwid2FzTG9vcCIsImNoYW5nZURpcmVjdGlvbiIsImlzRW5hYmxlZCIsImhhc0xvb3AiLCJjb250YWluZXJFbCIsImN1cnJlbnRIZWlnaHQiLCJpbm5lckhlaWdodCIsInBvaW50cyIsInBvaW50IiwibWluUmF0aW8iLCJzdWJzdHIiLCJ2YWx1ZSIsInNvcnQiLCJiIiwid2FzTG9ja2VkIiwibGFzdFNsaWRlUmlnaHRFZGdlIiwiYWRkQ2xhc3NlcyIsImNsYXNzTmFtZXMiLCJzdWZmaXhlcyIsImVudHJpZXMiLCJwcmVmaXgiLCJyZXN1bHRDbGFzc2VzIiwiaXRlbSIsInByZXBhcmVDbGFzc2VzIiwicmVtb3ZlQ2xhc3NlcyIsImV4dGVuZGVkRGVmYXVsdHMiLCJTd2lwZXIiLCJzd2lwZXJzIiwibmV3UGFyYW1zIiwibW9kdWxlcyIsIl9fbW9kdWxlc19fIiwibW9kIiwic3dpcGVyUGFyYW1zIiwicGFzc2VkUGFyYW1zIiwiZXZlbnROYW1lIiwidmVsb2NpdHkiLCJ0cnVuYyIsImNsaWNrVGltZW91dCIsInZlbG9jaXRpZXMiLCJpbWFnZXNUb0xvYWQiLCJpbWFnZXNMb2FkZWQiLCJwcm9wZXJ0eSIsInNldFByb2dyZXNzIiwiY2xzIiwiZ2V0U2xpZGVDbGFzc2VzIiwidXBkYXRlcyIsInZpZXciLCJleGFjdCIsInNwdiIsImJyZWFrTG9vcCIsInRyYW5zbGF0ZVZhbHVlIiwidHJhbnNsYXRlZCIsImNvbXBsZXRlIiwibmV3RGlyZWN0aW9uIiwibmVlZFVwZGF0ZSIsImN1cnJlbnREaXJlY3Rpb24iLCJjaGFuZ2VMYW5ndWFnZURpcmVjdGlvbiIsIm1vdW50IiwibW91bnRlZCIsInBhcmVudE5vZGUiLCJ0b1VwcGVyQ2FzZSIsImdldFdyYXBwZXJTZWxlY3RvciIsImdldFdyYXBwZXIiLCJzbGlkZVNsb3RzIiwiaG9zdEVsIiwibGF6eUVsZW1lbnRzIiwiZGVsZXRlSW5zdGFuY2UiLCJjbGVhblN0eWxlcyIsImV4dGVuZERlZmF1bHRzIiwibmV3RGVmYXVsdHMiLCJpbnN0YWxsTW9kdWxlIiwidXNlIiwibW9kdWxlIiwicHJvdG90eXBlR3JvdXAiLCJwcm90b01ldGhvZCIsIm9ic2VydmVyIiwiYW5pbWF0aW9uRnJhbWUiLCJyZXNpemVIYW5kbGVyIiwib3JpZW50YXRpb25DaGFuZ2VIYW5kbGVyIiwiUmVzaXplT2JzZXJ2ZXIiLCJuZXdXaWR0aCIsIl9yZWYyIiwiY29udGVudEJveFNpemUiLCJjb250ZW50UmVjdCIsImlubGluZVNpemUiLCJibG9ja1NpemUiLCJvYnNlcnZlIiwidW5vYnNlcnZlIiwib2JzZXJ2ZXJzIiwiYXR0YWNoIiwib3B0aW9ucyIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJXZWJraXRNdXRhdGlvbk9ic2VydmVyIiwibXV0YXRpb25zIiwib2JzZXJ2ZXJVcGRhdGUiLCJhdHRyaWJ1dGVzIiwiY2hpbGRMaXN0IiwiY2hhcmFjdGVyRGF0YSIsIm9ic2VydmVQYXJlbnRzIiwib2JzZXJ2ZVNsaWRlQ2hpbGRyZW4iLCJjb250YWluZXJQYXJlbnRzIiwiZGlzY29ubmVjdCJdLCJzb3VyY2VSb290IjoiIn0=