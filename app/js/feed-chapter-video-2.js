/*! For license information please see feed-chapter-video-2.js.LICENSE.txt */
(()=>{"use strict";var e,t,i={},s={};function r(e){var t=s[e];if(void 0!==t)return t.exports;var n=s[e]={exports:{}};return i[e](n,n.exports,r),n.exports}r.m=i,r.f={},r.e=e=>Promise.all(Object.keys(r.f).reduce(((t,i)=>(r.f[i](e,t),t)),[])),r.u=e=>"js/"+e+".js",r.miniCssF=e=>"css/"+e+".css",r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="webpack-setup:",r.l=(i,s,n,o)=>{if(e[i])e[i].push(s);else{var l,a;if(void 0!==n)for(var d=document.getElementsByTagName("script"),c=0;c<d.length;c++){var p=d[c];if(p.getAttribute("src")==i||p.getAttribute("data-webpack")==t+n){l=p;break}}l||(a=!0,(l=document.createElement("script")).charset="utf-8",l.timeout=120,r.nc&&l.setAttribute("nonce",r.nc),l.setAttribute("data-webpack",t+n),l.src=i),e[i]=[s];var u=(t,s)=>{l.onerror=l.onload=null,clearTimeout(h);var r=e[i];if(delete e[i],l.parentNode&&l.parentNode.removeChild(l),r&&r.forEach((e=>e(s))),t)return t(s)},h=setTimeout(u.bind(null,void 0,{type:"timeout",target:l}),12e4);l.onerror=u.bind(null,l.onerror),l.onload=u.bind(null,l.onload),a&&document.head.appendChild(l)}},r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;r.g.importScripts&&(e=r.g.location+"");var t=r.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var i=t.getElementsByTagName("script");if(i.length)for(var s=i.length-1;s>-1&&(!e||!/^http(s?):/.test(e));)e=i[s--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),r.p=e+"../"})(),(()=>{if("undefined"!=typeof document){var e=e=>new Promise(((t,i)=>{var s=r.miniCssF(e),n=r.p+s;if(((e,t)=>{for(var i=document.getElementsByTagName("link"),s=0;s<i.length;s++){var r=(o=i[s]).getAttribute("data-href")||o.getAttribute("href");if("stylesheet"===o.rel&&(r===e||r===t))return o}var n=document.getElementsByTagName("style");for(s=0;s<n.length;s++){var o;if((r=(o=n[s]).getAttribute("data-href"))===e||r===t)return o}})(s,n))return t();((e,t,i,s,n)=>{var o=document.createElement("link");o.rel="stylesheet",o.type="text/css",r.nc&&(o.nonce=r.nc),o.onerror=o.onload=i=>{if(o.onerror=o.onload=null,"load"===i.type)s();else{var r=i&&i.type,l=i&&i.target&&i.target.href||t,a=new Error("Loading CSS chunk "+e+" failed.\n("+r+": "+l+")");a.name="ChunkLoadError",a.code="CSS_CHUNK_LOAD_FAILED",a.type=r,a.request=l,o.parentNode&&o.parentNode.removeChild(o),n(a)}},o.href=t,i?i.parentNode.insertBefore(o,i.nextSibling):document.head.appendChild(o)})(e,n,null,t,i)})),t={744:0};r.f.miniCss=(i,s)=>{t[i]?s.push(t[i]):0!==t[i]&&{11:1,822:1}[i]&&s.push(t[i]=e(i).then((()=>{t[i]=0}),(e=>{throw delete t[i],e})))}}})(),(()=>{var e={744:0};r.f.j=(t,i)=>{var s=r.o(e,t)?e[t]:void 0;if(0!==s)if(s)i.push(s[2]);else{var n=new Promise(((i,r)=>s=e[t]=[i,r]));i.push(s[2]=n);var o=r.p+r.u(t),l=new Error;r.l(o,(i=>{if(r.o(e,t)&&(0!==(s=e[t])&&(e[t]=void 0),s)){var n=i&&("load"===i.type?"missing":i.type),o=i&&i.target&&i.target.src;l.message="Loading chunk "+t+" failed.\n("+n+": "+o+")",l.name="ChunkLoadError",l.type=n,l.request=o,s[1](l)}}),"chunk-"+t,t)}};var t=(t,i)=>{var s,n,o=i[0],l=i[1],a=i[2],d=0;if(o.some((t=>0!==e[t]))){for(s in l)r.o(l,s)&&(r.m[s]=l[s]);if(a)a(r)}for(t&&t(i);d<o.length;d++)n=o[d],r.o(e,n)&&e[n]&&e[n][0](),e[n]=0},i=self.webpackChunkwebpack_setup=self.webpackChunkwebpack_setup||[];i.forEach(t.bind(null,0)),i.push=t.bind(null,i.push.bind(i))})();var n=function(){return n=Object.assign||function(e){for(var t,i=1,s=arguments.length;i<s;i++)for(var r in t=arguments[i])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e},n.apply(this,arguments)};var o="lgAfterAppendSlide",l="lgInit",a="lgHasVideo",d="lgContainerResize",c="lgUpdateSlides",p="lgAfterAppendSubHtml",u="lgBeforeOpen",h="lgAfterOpen",g="lgSlideItemLoad",m="lgBeforeSlide",f="lgAfterSlide",v="lgPosterClick",y="lgDragStart",b="lgDragMove",w="lgDragEnd",S="lgBeforeNextSlide",T="lgBeforePrevSlide",x="lgBeforeClose",C="lgAfterClose",E={mode:"lg-slide",easing:"ease",speed:400,licenseKey:"0000-0000-000-0000",height:"100%",width:"100%",addClass:"",startClass:"lg-start-zoom",backdropDuration:300,container:"",startAnimationDuration:400,zoomFromOrigin:!0,hideBarsDelay:0,showBarsAfter:1e4,slideDelay:0,supportLegacyBrowser:!0,allowMediaOverlap:!1,videoMaxSize:"1280-720",loadYouTubePoster:!0,defaultCaptionHeight:0,ariaLabelledby:"",ariaDescribedby:"",resetScrollPosition:!0,hideScrollbar:!1,closable:!0,swipeToClose:!0,closeOnTap:!0,showCloseIcon:!0,showMaximizeIcon:!1,loop:!0,escKey:!0,keyPress:!0,trapFocus:!0,controls:!0,slideEndAnimation:!0,hideControlOnEnd:!1,mousewheel:!1,getCaptionFromTitleOrAlt:!0,appendSubHtmlTo:".lg-sub-html",subHtmlSelectorRelative:!1,preload:2,numberOfSlideItemsInDom:10,selector:"",selectWithin:"",nextHtml:"",prevHtml:"",index:0,iframeWidth:"100%",iframeHeight:"100%",iframeMaxWidth:"100%",iframeMaxHeight:"100%",download:!0,counter:!0,appendCounterTo:".lg-toolbar",swipeThreshold:50,enableSwipe:!0,enableDrag:!0,dynamic:!1,dynamicEl:[],extraProps:[],exThumbImage:"",isMobile:void 0,mobileSettings:{controls:!1,showCloseIcon:!1,download:!1},plugins:[],strings:{closeGallery:"Close gallery",toggleMaximize:"Toggle maximize",previousSlide:"Previous slide",nextSlide:"Next slide",download:"Download",playVideo:"Play video",mediaLoadingFailed:"Oops... Failed to load content..."}};var I=function(){function e(e){return this.cssVenderPrefixes=["TransitionDuration","TransitionTimingFunction","Transform","Transition"],this.selector=this._getSelector(e),this.firstElement=this._getFirstEl(),this}return e.generateUUID=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(e){var t=16*Math.random()|0;return("x"==e?t:3&t|8).toString(16)}))},e.prototype._getSelector=function(e,t){return void 0===t&&(t=document),"string"!=typeof e?e:(t=t||document,"#"===e.substring(0,1)?t.querySelector(e):t.querySelectorAll(e))},e.prototype._each=function(e){return this.selector?(void 0!==this.selector.length?[].forEach.call(this.selector,e):e(this.selector,0),this):this},e.prototype._setCssVendorPrefix=function(e,t,i){var s=t.replace(/-([a-z])/gi,(function(e,t){return t.toUpperCase()}));-1!==this.cssVenderPrefixes.indexOf(s)?(e.style[s.charAt(0).toLowerCase()+s.slice(1)]=i,e.style["webkit"+s]=i,e.style["moz"+s]=i,e.style["ms"+s]=i,e.style["o"+s]=i):e.style[s]=i},e.prototype._getFirstEl=function(){return this.selector&&void 0!==this.selector.length?this.selector[0]:this.selector},e.prototype.isEventMatched=function(e,t){var i=t.split(".");return e.split(".").filter((function(e){return e})).every((function(e){return-1!==i.indexOf(e)}))},e.prototype.attr=function(e,t){return void 0===t?this.firstElement?this.firstElement.getAttribute(e):"":(this._each((function(i){i.setAttribute(e,t)})),this)},e.prototype.find=function(e){return M(this._getSelector(e,this.selector))},e.prototype.first=function(){return this.selector&&void 0!==this.selector.length?M(this.selector[0]):M(this.selector)},e.prototype.eq=function(e){return M(this.selector[e])},e.prototype.parent=function(){return M(this.selector.parentElement)},e.prototype.get=function(){return this._getFirstEl()},e.prototype.removeAttr=function(e){var t=e.split(" ");return this._each((function(e){t.forEach((function(t){return e.removeAttribute(t)}))})),this},e.prototype.wrap=function(e){if(!this.firstElement)return this;var t=document.createElement("div");return t.className=e,this.firstElement.parentNode.insertBefore(t,this.firstElement),this.firstElement.parentNode.removeChild(this.firstElement),t.appendChild(this.firstElement),this},e.prototype.addClass=function(e){return void 0===e&&(e=""),this._each((function(t){e.split(" ").forEach((function(e){e&&t.classList.add(e)}))})),this},e.prototype.removeClass=function(e){return this._each((function(t){e.split(" ").forEach((function(e){e&&t.classList.remove(e)}))})),this},e.prototype.hasClass=function(e){return!!this.firstElement&&this.firstElement.classList.contains(e)},e.prototype.hasAttribute=function(e){return!!this.firstElement&&this.firstElement.hasAttribute(e)},e.prototype.toggleClass=function(e){return this.firstElement?(this.hasClass(e)?this.removeClass(e):this.addClass(e),this):this},e.prototype.css=function(e,t){var i=this;return this._each((function(s){i._setCssVendorPrefix(s,e,t)})),this},e.prototype.on=function(t,i){var s=this;return this.selector?(t.split(" ").forEach((function(t){Array.isArray(e.eventListeners[t])||(e.eventListeners[t]=[]),e.eventListeners[t].push(i),s.selector.addEventListener(t.split(".")[0],i)})),this):this},e.prototype.once=function(e,t){var i=this;return this.on(e,(function(){i.off(e),t(e)})),this},e.prototype.off=function(t){var i=this;return this.selector?(Object.keys(e.eventListeners).forEach((function(s){i.isEventMatched(t,s)&&(e.eventListeners[s].forEach((function(e){i.selector.removeEventListener(s.split(".")[0],e)})),e.eventListeners[s]=[])})),this):this},e.prototype.trigger=function(e,t){if(!this.firstElement)return this;var i=new CustomEvent(e.split(".")[0],{detail:t||null});return this.firstElement.dispatchEvent(i),this},e.prototype.load=function(e){var t=this;return fetch(e).then((function(e){return e.text()})).then((function(e){t.selector.innerHTML=e})),this},e.prototype.html=function(e){return void 0===e?this.firstElement?this.firstElement.innerHTML:"":(this._each((function(t){t.innerHTML=e})),this)},e.prototype.append=function(e){return this._each((function(t){"string"==typeof e?t.insertAdjacentHTML("beforeend",e):t.appendChild(e)})),this},e.prototype.prepend=function(e){return this._each((function(t){t.insertAdjacentHTML("afterbegin",e)})),this},e.prototype.remove=function(){return this._each((function(e){e.parentNode.removeChild(e)})),this},e.prototype.empty=function(){return this._each((function(e){e.innerHTML=""})),this},e.prototype.scrollTop=function(e){return void 0!==e?(document.body.scrollTop=e,document.documentElement.scrollTop=e,this):window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0},e.prototype.scrollLeft=function(e){return void 0!==e?(document.body.scrollLeft=e,document.documentElement.scrollLeft=e,this):window.pageXOffset||document.documentElement.scrollLeft||document.body.scrollLeft||0},e.prototype.offset=function(){if(!this.firstElement)return{left:0,top:0};var e=this.firstElement.getBoundingClientRect(),t=M("body").style().marginLeft;return{left:e.left-parseFloat(t)+this.scrollLeft(),top:e.top+this.scrollTop()}},e.prototype.style=function(){return this.firstElement?this.firstElement.currentStyle||window.getComputedStyle(this.firstElement):{}},e.prototype.width=function(){var e=this.style();return this.firstElement.clientWidth-parseFloat(e.paddingLeft)-parseFloat(e.paddingRight)},e.prototype.height=function(){var e=this.style();return this.firstElement.clientHeight-parseFloat(e.paddingTop)-parseFloat(e.paddingBottom)},e.eventListeners={},e}();function M(e){return function(){if("function"==typeof window.CustomEvent)return!1;window.CustomEvent=function(e,t){t=t||{bubbles:!1,cancelable:!1,detail:null};var i=document.createEvent("CustomEvent");return i.initCustomEvent(e,t.bubbles,t.cancelable,t.detail),i}}(),Element.prototype.matches||(Element.prototype.matches=Element.prototype.msMatchesSelector||Element.prototype.webkitMatchesSelector),new I(e)}var L=["src","sources","subHtml","subHtmlUrl","html","video","poster","slideName","responsive","srcset","sizes","iframe","downloadUrl","download","width","facebookShareUrl","tweetText","iframeTitle","twitterShareUrl","pinterestShareUrl","pinterestText","fbHtml","disqusIdentifier","disqusUrl"];function P(e){return"href"===e?"src":e=(e=(e=e.replace("data-","")).charAt(0).toLowerCase()+e.slice(1)).replace(/-([a-z])/g,(function(e){return e[1].toUpperCase()}))}var O=function(e,t,i,s){void 0===i&&(i=0);var r=M(e).attr("data-lg-size")||s;if(r){var n=r.split(",");if(n[1])for(var o=window.innerWidth,l=0;l<n.length;l++){var a=n[l];if(parseInt(a.split("-")[2],10)>o){r=a;break}l===n.length-1&&(r=a)}var d=r.split("-"),c=parseInt(d[0],10),p=parseInt(d[1],10),u=t.width(),h=t.height()-i,g=Math.min(u,c),m=Math.min(h,p),f=Math.min(g/c,m/p);return{width:c*f,height:p*f}}},k=function(e,t,i,s,r){if(r){var n=M(e).find("img").first();if(n.get()){var o=t.get().getBoundingClientRect(),l=o.width,a=t.height()-(i+s),d=n.width(),c=n.height(),p=n.style(),u=(l-d)/2-n.offset().left+(parseFloat(p.paddingLeft)||0)+(parseFloat(p.borderLeft)||0)+M(window).scrollLeft()+o.left,h=(a-c)/2-n.offset().top+(parseFloat(p.paddingTop)||0)+(parseFloat(p.borderTop)||0)+M(window).scrollTop()+i;return"translate3d("+(u*=-1)+"px, "+(h*=-1)+"px, 0) scale3d("+d/r.width+", "+c/r.height+", 1)"}}},A=function(e,t,i,s,r,n){return'<div class="lg-video-cont lg-has-iframe" style="width:'+e+"; max-width:"+i+"; height: "+t+"; max-height:"+s+'">\n                    <iframe class="lg-object" frameborder="0" '+(n?'title="'+n+'"':"")+' src="'+r+'"  allowfullscreen="true"></iframe>\n                </div>'},z=function(e,t,i,s,r,n){var o="<img "+i+" "+(s?'srcset="'+s+'"':"")+"  "+(r?'sizes="'+r+'"':"")+' class="lg-object lg-image" data-index="'+e+'" src="'+t+'" />',l="";n&&(l=("string"==typeof n?JSON.parse(n):n).map((function(e){var t="";return Object.keys(e).forEach((function(i){t+=" "+i+'="'+e[i]+'"'})),"<source "+t+"></source>"})));return""+l+o},D=function(e){for(var t=[],i=[],s="",r=0;r<e.length;r++){var n=e[r].split(" ");""===n[0]&&n.splice(0,1),i.push(n[0]),t.push(n[1])}for(var o=window.innerWidth,l=0;l<t.length;l++)if(parseInt(t[l],10)>o){s=i[l];break}return s},G=function(e){return!!e&&(!!e.complete&&0!==e.naturalWidth)},_=function(e,t,i,s,r){return'<div class="lg-video-cont '+(r&&r.youtube?"lg-has-youtube":r&&r.vimeo?"lg-has-vimeo":"lg-has-html5")+'" style="'+i+'">\n                <div class="lg-video-play-button">\n                <svg\n                    viewBox="0 0 20 20"\n                    preserveAspectRatio="xMidYMid"\n                    focusable="false"\n                    aria-labelledby="'+s+'"\n                    role="img"\n                    class="lg-video-play-icon"\n                >\n                    <title>'+s+'</title>\n                    <polygon class="lg-video-play-icon-inner" points="1,0 20,10 1,20"></polygon>\n                </svg>\n                <svg class="lg-video-play-icon-bg" viewBox="0 0 50 50" focusable="false">\n                    <circle cx="50%" cy="50%" r="20"></circle></svg>\n                <svg class="lg-video-play-icon-circle" viewBox="0 0 50 50" focusable="false">\n                    <circle cx="50%" cy="50%" r="20"></circle>\n                </svg>\n            </div>\n            '+(t||"")+'\n            <img class="lg-object lg-video-poster" src="'+e+'" />\n        </div>'},B=function(e){var t=e.querySelectorAll('a[href]:not([disabled]), button:not([disabled]), textarea:not([disabled]), input[type="text"]:not([disabled]), input[type="radio"]:not([disabled]), input[type="checkbox"]:not([disabled]), select:not([disabled])');return[].filter.call(t,(function(e){var t=window.getComputedStyle(e);return"none"!==t.display&&"hidden"!==t.visibility}))},F=function(e,t,i,s){var r=[],n=function(){for(var e=0,t=0,i=arguments.length;t<i;t++)e+=arguments[t].length;var s=Array(e),r=0;for(t=0;t<i;t++)for(var n=arguments[t],o=0,l=n.length;o<l;o++,r++)s[r]=n[o];return s}(L,t);return[].forEach.call(e,(function(e){for(var t={},o=0;o<e.attributes.length;o++){var l=e.attributes[o];if(l.specified){var a=P(l.name),d="";n.indexOf(a)>-1&&(d=a),d&&(t[d]=l.value)}}var c=M(e),p=c.find("img").first().attr("alt"),u=c.attr("title"),h=s?c.attr(s):c.find("img").first().attr("src");t.thumb=h,i&&!t.subHtml&&(t.subHtml=u||p||""),t.alt=p||u||"",r.push(t)})),r},$=function(){return/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)},H=function(e,t,i){if(!e)return t?{html5:!0}:void console.error("lightGallery :- data-src is not provided on slide item "+(i+1)+". Please make sure the selector property is properly configured. More info - https://www.lightgalleryjs.com/demos/html-markup/");var s=e.match(/\/\/(?:www\.)?youtu(?:\.be|be\.com|be-nocookie\.com)\/(?:watch\?v=|embed\/)?([a-z0-9\-\_\%]+)([\&|?][\S]*)*/i),r=e.match(/\/\/(?:www\.)?(?:player\.)?vimeo.com\/(?:video\/)?([0-9a-z\-_]+)(.*)?/i),n=e.match(/https?:\/\/(.+)?(wistia\.com|wi\.st)\/(medias|embed)\/([0-9a-z\-_]+)(.*)/);return s?{youtube:s}:r?{vimeo:r}:n?{wistia:n}:void 0},N=0,V=function(){function e(e,t){if(this.lgOpened=!1,this.index=0,this.plugins=[],this.lGalleryOn=!1,this.lgBusy=!1,this.currentItemsInDom=[],this.prevScrollTop=0,this.bodyPaddingRight=0,this.isDummyImageRemoved=!1,this.dragOrSwipeEnabled=!1,this.mediaContainerPosition={top:0,bottom:0},!e)return this;if(N++,this.lgId=N,this.el=e,this.LGel=M(e),this.generateSettings(t),this.buildModules(),this.settings.dynamic&&void 0!==this.settings.dynamicEl&&!Array.isArray(this.settings.dynamicEl))throw"When using dynamic mode, you must also define dynamicEl as an Array.";return this.galleryItems=this.getItems(),this.normalizeSettings(),this.init(),this.validateLicense(),this}return e.prototype.generateSettings=function(e){if(this.settings=n(n({},E),e),this.settings.isMobile&&"function"==typeof this.settings.isMobile?this.settings.isMobile():$()){var t=n(n({},this.settings.mobileSettings),this.settings.mobileSettings);this.settings=n(n({},this.settings),t)}},e.prototype.normalizeSettings=function(){this.settings.slideEndAnimation&&(this.settings.hideControlOnEnd=!1),this.settings.closable||(this.settings.swipeToClose=!1),this.zoomFromOrigin=this.settings.zoomFromOrigin,this.settings.dynamic&&(this.zoomFromOrigin=!1),this.settings.container||(this.settings.container=document.body),this.settings.preload=Math.min(this.settings.preload,this.galleryItems.length)},e.prototype.init=function(){var e=this;this.addSlideVideoInfo(this.galleryItems),this.buildStructure(),this.LGel.trigger(l,{instance:this}),this.settings.keyPress&&this.keyPress(),setTimeout((function(){e.enableDrag(),e.enableSwipe(),e.triggerPosterClick()}),50),this.arrow(),this.settings.mousewheel&&this.mousewheel(),this.settings.dynamic||this.openGalleryOnItemClick()},e.prototype.openGalleryOnItemClick=function(){for(var e=this,t=function(t){var s=i.items[t],r=M(s),n=I.generateUUID();r.attr("data-lg-id",n).on("click.lgcustom-item-"+n,(function(i){i.preventDefault();var r=e.settings.index||t;e.openGallery(r,s)}))},i=this,s=0;s<this.items.length;s++)t(s)},e.prototype.buildModules=function(){var e=this;this.settings.plugins.forEach((function(t){e.plugins.push(new t(e,M))}))},e.prototype.validateLicense=function(){this.settings.licenseKey?"0000-0000-000-0000"===this.settings.licenseKey&&console.warn("lightGallery: "+this.settings.licenseKey+" license key is not valid for production use"):console.error("Please provide a valid license key")},e.prototype.getSlideItem=function(e){return M(this.getSlideItemId(e))},e.prototype.getSlideItemId=function(e){return"#lg-item-"+this.lgId+"-"+e},e.prototype.getIdName=function(e){return e+"-"+this.lgId},e.prototype.getElementById=function(e){return M("#"+this.getIdName(e))},e.prototype.manageSingleSlideClassName=function(){this.galleryItems.length<2?this.outer.addClass("lg-single-item"):this.outer.removeClass("lg-single-item")},e.prototype.buildStructure=function(){var e=this;if(!(this.$container&&this.$container.get())){var t="",i="";this.settings.controls&&(t='<button type="button" id="'+this.getIdName("lg-prev")+'" aria-label="'+this.settings.strings.previousSlide+'" class="lg-prev lg-icon"> '+this.settings.prevHtml+' </button>\n                <button type="button" id="'+this.getIdName("lg-next")+'" aria-label="'+this.settings.strings.nextSlide+'" class="lg-next lg-icon"> '+this.settings.nextHtml+" </button>"),".lg-item"!==this.settings.appendSubHtmlTo&&(i='<div class="lg-sub-html" role="status" aria-live="polite"></div>');var s="";this.settings.allowMediaOverlap&&(s+="lg-media-overlap ");var r=this.settings.ariaLabelledby?'aria-labelledby="'+this.settings.ariaLabelledby+'"':"",n=this.settings.ariaDescribedby?'aria-describedby="'+this.settings.ariaDescribedby+'"':"",o="lg-container "+this.settings.addClass+" "+(document.body!==this.settings.container?"lg-inline":""),l=this.settings.closable&&this.settings.showCloseIcon?'<button type="button" aria-label="'+this.settings.strings.closeGallery+'" id="'+this.getIdName("lg-close")+'" class="lg-close lg-icon"></button>':"",a=this.settings.showMaximizeIcon?'<button type="button" aria-label="'+this.settings.strings.toggleMaximize+'" id="'+this.getIdName("lg-maximize")+'" class="lg-maximize lg-icon"></button>':"",d='\n        <div class="'+o+'" id="'+this.getIdName("lg-container")+'" tabindex="-1" aria-modal="true" '+r+" "+n+' role="dialog"\n        >\n            <div id="'+this.getIdName("lg-backdrop")+'" class="lg-backdrop"></div>\n\n            <div id="'+this.getIdName("lg-outer")+'" class="lg-outer lg-use-css3 lg-css3 lg-hide-items '+s+' ">\n\n              <div id="'+this.getIdName("lg-content")+'" class="lg-content">\n                <div id="'+this.getIdName("lg-inner")+'" class="lg-inner">\n                </div>\n                '+t+'\n              </div>\n                <div id="'+this.getIdName("lg-toolbar")+'" class="lg-toolbar lg-group">\n                    '+a+"\n                    "+l+"\n                    </div>\n                    "+(".lg-outer"===this.settings.appendSubHtmlTo?i:"")+'\n                <div id="'+this.getIdName("lg-components")+'" class="lg-components">\n                    '+(".lg-sub-html"===this.settings.appendSubHtmlTo?i:"")+"\n                </div>\n            </div>\n        </div>\n        ";M(this.settings.container).append(d),document.body!==this.settings.container&&M(this.settings.container).css("position","relative"),this.outer=this.getElementById("lg-outer"),this.$lgComponents=this.getElementById("lg-components"),this.$backdrop=this.getElementById("lg-backdrop"),this.$container=this.getElementById("lg-container"),this.$inner=this.getElementById("lg-inner"),this.$content=this.getElementById("lg-content"),this.$toolbar=this.getElementById("lg-toolbar"),this.$backdrop.css("transition-duration",this.settings.backdropDuration+"ms");var c=this.settings.mode+" ";this.manageSingleSlideClassName(),this.settings.enableDrag&&(c+="lg-grab "),this.outer.addClass(c),this.$inner.css("transition-timing-function",this.settings.easing),this.$inner.css("transition-duration",this.settings.speed+"ms"),this.settings.download&&this.$toolbar.append('<a id="'+this.getIdName("lg-download")+'" target="_blank" rel="noopener" aria-label="'+this.settings.strings.download+'" download class="lg-download lg-icon"></a>'),this.counter(),M(window).on("resize.lg.global"+this.lgId+" orientationchange.lg.global"+this.lgId,(function(){e.refreshOnResize()})),this.hideBars(),this.manageCloseGallery(),this.toggleMaximize(),this.initModules()}},e.prototype.refreshOnResize=function(){if(this.lgOpened){var e=this.galleryItems[this.index].__slideVideoInfo;this.mediaContainerPosition=this.getMediaContainerPosition();var t=this.mediaContainerPosition,i=t.top,s=t.bottom;if(this.currentImageSize=O(this.items[this.index],this.outer,i+s,e&&this.settings.videoMaxSize),e&&this.resizeVideoSlide(this.index,this.currentImageSize),this.zoomFromOrigin&&!this.isDummyImageRemoved){var r=this.getDummyImgStyles(this.currentImageSize);this.outer.find(".lg-current .lg-dummy-img").first().attr("style",r)}this.LGel.trigger(d)}},e.prototype.resizeVideoSlide=function(e,t){var i=this.getVideoContStyle(t);this.getSlideItem(e).find(".lg-video-cont").attr("style",i)},e.prototype.updateSlides=function(e,t){if(this.index>e.length-1&&(this.index=e.length-1),1===e.length&&(this.index=0),e.length){var i=this.galleryItems[t].src;this.galleryItems=e,this.updateControls(),this.$inner.empty(),this.currentItemsInDom=[];var s=0;this.galleryItems.some((function(e,t){return e.src===i&&(s=t,!0)})),this.currentItemsInDom=this.organizeSlideItems(s,-1),this.loadContent(s,!0),this.getSlideItem(s).addClass("lg-current"),this.index=s,this.updateCurrentCounter(s),this.LGel.trigger(c)}else this.closeGallery()},e.prototype.getItems=function(){if(this.items=[],this.settings.dynamic)return this.settings.dynamicEl||[];if("this"===this.settings.selector)this.items.push(this.el);else if(this.settings.selector)if("string"==typeof this.settings.selector)if(this.settings.selectWithin){var e=M(this.settings.selectWithin);this.items=e.find(this.settings.selector).get()}else this.items=this.el.querySelectorAll(this.settings.selector);else this.items=this.settings.selector;else this.items=this.el.children;return F(this.items,this.settings.extraProps,this.settings.getCaptionFromTitleOrAlt,this.settings.exThumbImage)},e.prototype.shouldHideScrollbar=function(){return this.settings.hideScrollbar&&document.body===this.settings.container},e.prototype.hideScrollbar=function(){if(this.shouldHideScrollbar()){this.bodyPaddingRight=parseFloat(M("body").style().paddingRight);var e=document.documentElement.getBoundingClientRect(),t=window.innerWidth-e.width;M(document.body).css("padding-right",t+this.bodyPaddingRight+"px"),M(document.body).addClass("lg-overlay-open")}},e.prototype.resetScrollBar=function(){this.shouldHideScrollbar()&&(M(document.body).css("padding-right",this.bodyPaddingRight+"px"),M(document.body).removeClass("lg-overlay-open"))},e.prototype.openGallery=function(e,t){var i=this;if(void 0===e&&(e=this.settings.index),!this.lgOpened){this.lgOpened=!0,this.outer.removeClass("lg-hide-items"),this.hideScrollbar(),this.$container.addClass("lg-show");var s=this.getItemsToBeInsertedToDom(e,e);this.currentItemsInDom=s;var r="";s.forEach((function(e){r=r+'<div id="'+e+'" class="lg-item"></div>'})),this.$inner.append(r),this.addHtml(e);var n="";this.mediaContainerPosition=this.getMediaContainerPosition();var o=this.mediaContainerPosition,l=o.top,a=o.bottom;this.settings.allowMediaOverlap||this.setMediaContainerPosition(l,a);var d=this.galleryItems[e].__slideVideoInfo;this.zoomFromOrigin&&t&&(this.currentImageSize=O(t,this.outer,l+a,d&&this.settings.videoMaxSize),n=k(t,this.outer,l,a,this.currentImageSize)),this.zoomFromOrigin&&n||(this.outer.addClass(this.settings.startClass),this.getSlideItem(e).removeClass("lg-complete"));var c=this.settings.zoomFromOrigin?100:this.settings.backdropDuration;setTimeout((function(){i.outer.addClass("lg-components-open")}),c),this.index=e,this.LGel.trigger(u),this.getSlideItem(e).addClass("lg-current"),this.lGalleryOn=!1,this.prevScrollTop=M(window).scrollTop(),setTimeout((function(){if(i.zoomFromOrigin&&n){var t=i.getSlideItem(e);t.css("transform",n),setTimeout((function(){t.addClass("lg-start-progress lg-start-end-progress").css("transition-duration",i.settings.startAnimationDuration+"ms"),i.outer.addClass("lg-zoom-from-image")})),setTimeout((function(){t.css("transform","translate3d(0, 0, 0)")}),100)}setTimeout((function(){i.$backdrop.addClass("in"),i.$container.addClass("lg-show-in")}),10),setTimeout((function(){i.settings.trapFocus&&document.body===i.settings.container&&i.trapFocus()}),i.settings.backdropDuration+50),i.zoomFromOrigin&&n||setTimeout((function(){i.outer.addClass("lg-visible")}),i.settings.backdropDuration),i.slide(e,!1,!1,!1),i.LGel.trigger(h)})),document.body===this.settings.container&&M("html").addClass("lg-on")}},e.prototype.getMediaContainerPosition=function(){if(this.settings.allowMediaOverlap)return{top:0,bottom:0};var e=this.$toolbar.get().clientHeight||0,t=this.outer.find(".lg-components .lg-sub-html").get(),i=this.settings.defaultCaptionHeight||t&&t.clientHeight||0,s=this.outer.find(".lg-thumb-outer").get();return{top:e,bottom:(s?s.clientHeight:0)+i}},e.prototype.setMediaContainerPosition=function(e,t){void 0===e&&(e=0),void 0===t&&(t=0),this.$content.css("top",e+"px").css("bottom",t+"px")},e.prototype.hideBars=function(){var e=this;setTimeout((function(){e.outer.removeClass("lg-hide-items"),e.settings.hideBarsDelay>0&&(e.outer.on("mousemove.lg click.lg touchstart.lg",(function(){e.outer.removeClass("lg-hide-items"),clearTimeout(e.hideBarTimeout),e.hideBarTimeout=setTimeout((function(){e.outer.addClass("lg-hide-items")}),e.settings.hideBarsDelay)})),e.outer.trigger("mousemove.lg"))}),this.settings.showBarsAfter)},e.prototype.initPictureFill=function(e){if(this.settings.supportLegacyBrowser)try{picturefill({elements:[e.get()]})}catch(e){console.warn("lightGallery :- If you want srcset or picture tag to be supported for older browser please include picturefil javascript library in your document.")}},e.prototype.counter=function(){if(this.settings.counter){var e='<div class="lg-counter" role="status" aria-live="polite">\n                <span id="'+this.getIdName("lg-counter-current")+'" class="lg-counter-current">'+(this.index+1)+' </span> /\n                <span id="'+this.getIdName("lg-counter-all")+'" class="lg-counter-all">'+this.galleryItems.length+" </span></div>";this.outer.find(this.settings.appendCounterTo).append(e)}},e.prototype.addHtml=function(e){var t,i;if(this.galleryItems[e].subHtmlUrl?i=this.galleryItems[e].subHtmlUrl:t=this.galleryItems[e].subHtml,!i)if(t){var s=t.substring(0,1);"."!==s&&"#"!==s||(t=this.settings.subHtmlSelectorRelative&&!this.settings.dynamic?M(this.items).eq(e).find(t).first().html():M(t).first().html())}else t="";if(".lg-item"!==this.settings.appendSubHtmlTo)i?this.outer.find(".lg-sub-html").load(i):this.outer.find(".lg-sub-html").html(t);else{var r=M(this.getSlideItemId(e));i?r.load(i):r.append('<div class="lg-sub-html">'+t+"</div>")}null!=t&&(""===t?this.outer.find(this.settings.appendSubHtmlTo).addClass("lg-empty-html"):this.outer.find(this.settings.appendSubHtmlTo).removeClass("lg-empty-html")),this.LGel.trigger(p,{index:e})},e.prototype.preload=function(e){for(var t=1;t<=this.settings.preload&&!(t>=this.galleryItems.length-e);t++)this.loadContent(e+t,!1);for(var i=1;i<=this.settings.preload&&!(e-i<0);i++)this.loadContent(e-i,!1)},e.prototype.getDummyImgStyles=function(e){return e?"width:"+e.width+"px;\n                margin-left: -"+e.width/2+"px;\n                margin-top: -"+e.height/2+"px;\n                height:"+e.height+"px":""},e.prototype.getVideoContStyle=function(e){return e?"width:"+e.width+"px;\n                height:"+e.height+"px":""},e.prototype.getDummyImageContent=function(e,t,i){var s;if(this.settings.dynamic||(s=M(this.items).eq(t)),s){var r=void 0;if(!(r=this.settings.exThumbImage?s.attr(this.settings.exThumbImage):s.find("img").first().attr("src")))return"";var n="<img "+i+' style="'+this.getDummyImgStyles(this.currentImageSize)+'" class="lg-dummy-img" src="'+r+'" />';return e.addClass("lg-first-slide"),this.outer.addClass("lg-first-slide-loading"),n}return""},e.prototype.setImgMarkup=function(e,t,i){var s=this.galleryItems[i],r=s.alt,n=s.srcset,o=s.sizes,l=s.sources,a=r?'alt="'+r+'"':"",d='<picture class="lg-img-wrap"> '+(this.isFirstSlideWithZoomAnimation()?this.getDummyImageContent(t,i,a):z(i,e,a,n,o,l))+"</picture>";t.prepend(d)},e.prototype.onSlideObjectLoad=function(e,t,i,s){var r=e.find(".lg-object").first();G(r.get())||t?i():(r.on("load.lg error.lg",(function(){i&&i()})),r.on("error.lg",(function(){s&&s()})))},e.prototype.onLgObjectLoad=function(e,t,i,s,r,n){var o=this;this.onSlideObjectLoad(e,n,(function(){o.triggerSlideItemLoad(e,t,i,s,r)}),(function(){e.addClass("lg-complete lg-complete_"),e.html('<span class="lg-error-msg">'+o.settings.strings.mediaLoadingFailed+"</span>")}))},e.prototype.triggerSlideItemLoad=function(e,t,i,s,r){var n=this,o=this.galleryItems[t],l=r&&"video"===this.getSlideType(o)&&!o.poster?s:0;setTimeout((function(){e.addClass("lg-complete lg-complete_"),n.LGel.trigger(g,{index:t,delay:i||0,isFirstSlide:r})}),l)},e.prototype.isFirstSlideWithZoomAnimation=function(){return!(this.lGalleryOn||!this.zoomFromOrigin||!this.currentImageSize)},e.prototype.addSlideVideoInfo=function(e){var t=this;e.forEach((function(e,i){e.__slideVideoInfo=H(e.src,!!e.video,i),e.__slideVideoInfo&&t.settings.loadYouTubePoster&&!e.poster&&e.__slideVideoInfo.youtube&&(e.poster="//img.youtube.com/vi/"+e.__slideVideoInfo.youtube[1]+"/maxresdefault.jpg")}))},e.prototype.loadContent=function(e,t){var i=this,s=this.galleryItems[e],r=M(this.getSlideItemId(e)),n=s.poster,l=s.srcset,d=s.sizes,c=s.sources,p=s.src,u=s.video,h=u&&"string"==typeof u?JSON.parse(u):u;if(s.responsive){var g=s.responsive.split(",");p=D(g)||p}var m=s.__slideVideoInfo,f="",v=!!s.iframe,y=!this.lGalleryOn,b=0;if(y&&(b=this.zoomFromOrigin&&this.currentImageSize?this.settings.startAnimationDuration+10:this.settings.backdropDuration+10),!r.hasClass("lg-loaded")){if(m){var w=this.mediaContainerPosition,S=w.top,T=w.bottom,x=O(this.items[e],this.outer,S+T,m&&this.settings.videoMaxSize);f=this.getVideoContStyle(x)}if(v){var C=A(this.settings.iframeWidth,this.settings.iframeHeight,this.settings.iframeMaxWidth,this.settings.iframeMaxHeight,p,s.iframeTitle);r.prepend(C)}else if(n){var E="";y&&this.zoomFromOrigin&&this.currentImageSize&&(E=this.getDummyImageContent(r,e,""));C=_(n,E||"",f,this.settings.strings.playVideo,m);r.prepend(C)}else if(m){C='<div class="lg-video-cont " style="'+f+'"></div>';r.prepend(C)}else if(this.setImgMarkup(p,r,e),l||c){var I=r.find(".lg-object");this.initPictureFill(I)}(n||m)&&this.LGel.trigger(a,{index:e,src:p,html5Video:h,hasPoster:!!n}),this.LGel.trigger(o,{index:e}),this.lGalleryOn&&".lg-item"===this.settings.appendSubHtmlTo&&this.addHtml(e)}var L=0;b&&!M(document.body).hasClass("lg-from-hash")&&(L=b),this.isFirstSlideWithZoomAnimation()&&(setTimeout((function(){r.removeClass("lg-start-end-progress lg-start-progress").removeAttr("style")}),this.settings.startAnimationDuration+100),r.hasClass("lg-loaded")||setTimeout((function(){if("image"===i.getSlideType(s)){var t=s.alt,o=t?'alt="'+t+'"':"";if(r.find(".lg-img-wrap").append(z(e,p,o,l,d,s.sources)),l||c){var a=r.find(".lg-object");i.initPictureFill(a)}}("image"===i.getSlideType(s)||"video"===i.getSlideType(s)&&n)&&(i.onLgObjectLoad(r,e,b,L,!0,!1),i.onSlideObjectLoad(r,!(!m||!m.html5||n),(function(){i.loadContentOnFirstSlideLoad(e,r,L)}),(function(){i.loadContentOnFirstSlideLoad(e,r,L)})))}),this.settings.startAnimationDuration+100)),r.addClass("lg-loaded"),this.isFirstSlideWithZoomAnimation()&&("video"!==this.getSlideType(s)||n)||this.onLgObjectLoad(r,e,b,L,y,!(!m||!m.html5||n)),this.zoomFromOrigin&&this.currentImageSize||!r.hasClass("lg-complete_")||this.lGalleryOn||setTimeout((function(){r.addClass("lg-complete")}),this.settings.backdropDuration),this.lGalleryOn=!0,!0===t&&(r.hasClass("lg-complete_")?this.preload(e):r.find(".lg-object").first().on("load.lg error.lg",(function(){i.preload(e)})))},e.prototype.loadContentOnFirstSlideLoad=function(e,t,i){var s=this;setTimeout((function(){t.find(".lg-dummy-img").remove(),t.removeClass("lg-first-slide"),s.outer.removeClass("lg-first-slide-loading"),s.isDummyImageRemoved=!0,s.preload(e)}),i+300)},e.prototype.getItemsToBeInsertedToDom=function(e,t,i){var s=this;void 0===i&&(i=0);var r=[],n=Math.max(i,3);n=Math.min(n,this.galleryItems.length);var o="lg-item-"+this.lgId+"-"+t;if(this.galleryItems.length<=3)return this.galleryItems.forEach((function(e,t){r.push("lg-item-"+s.lgId+"-"+t)})),r;if(e<(this.galleryItems.length-1)/2){for(var l=e;l>e-n/2&&l>=0;l--)r.push("lg-item-"+this.lgId+"-"+l);var a=r.length;for(l=0;l<n-a;l++)r.push("lg-item-"+this.lgId+"-"+(e+l+1))}else{for(l=e;l<=this.galleryItems.length-1&&l<e+n/2;l++)r.push("lg-item-"+this.lgId+"-"+l);for(a=r.length,l=0;l<n-a;l++)r.push("lg-item-"+this.lgId+"-"+(e-l-1))}return this.settings.loop&&(e===this.galleryItems.length-1?r.push("lg-item-"+this.lgId+"-0"):0===e&&r.push("lg-item-"+this.lgId+"-"+(this.galleryItems.length-1))),-1===r.indexOf(o)&&r.push("lg-item-"+this.lgId+"-"+t),r},e.prototype.organizeSlideItems=function(e,t){var i=this,s=this.getItemsToBeInsertedToDom(e,t,this.settings.numberOfSlideItemsInDom);return s.forEach((function(e){-1===i.currentItemsInDom.indexOf(e)&&i.$inner.append('<div id="'+e+'" class="lg-item"></div>')})),this.currentItemsInDom.forEach((function(e){-1===s.indexOf(e)&&M("#"+e).remove()})),s},e.prototype.getPreviousSlideIndex=function(){var e=0;try{var t=this.outer.find(".lg-current").first().attr("id");e=parseInt(t.split("-")[3])||0}catch(t){e=0}return e},e.prototype.setDownloadValue=function(e){if(this.settings.download){var t=this.galleryItems[e];if(!1===t.downloadUrl||"false"===t.downloadUrl)this.outer.addClass("lg-hide-download");else{var i=this.getElementById("lg-download");this.outer.removeClass("lg-hide-download"),i.attr("href",t.downloadUrl||t.src),t.download&&i.attr("download",t.download)}}},e.prototype.makeSlideAnimation=function(e,t,i){var s=this;this.lGalleryOn&&i.addClass("lg-slide-progress"),setTimeout((function(){s.outer.addClass("lg-no-trans"),s.outer.find(".lg-item").removeClass("lg-prev-slide lg-next-slide"),"prev"===e?(t.addClass("lg-prev-slide"),i.addClass("lg-next-slide")):(t.addClass("lg-next-slide"),i.addClass("lg-prev-slide")),setTimeout((function(){s.outer.find(".lg-item").removeClass("lg-current"),t.addClass("lg-current"),s.outer.removeClass("lg-no-trans")}),50)}),this.lGalleryOn?this.settings.slideDelay:0)},e.prototype.slide=function(e,t,i,s){var r=this,n=this.getPreviousSlideIndex();if(this.currentItemsInDom=this.organizeSlideItems(e,n),!this.lGalleryOn||n!==e){var o=this.galleryItems.length;if(!this.lgBusy){this.settings.counter&&this.updateCurrentCounter(e);var l=this.getSlideItem(e),a=this.getSlideItem(n),d=this.galleryItems[e],c=d.__slideVideoInfo;if(this.outer.attr("data-lg-slide-type",this.getSlideType(d)),this.setDownloadValue(e),c){var p=this.mediaContainerPosition,u=p.top,h=p.bottom,g=O(this.items[e],this.outer,u+h,c&&this.settings.videoMaxSize);this.resizeVideoSlide(e,g)}if(this.LGel.trigger(m,{prevIndex:n,index:e,fromTouch:!!t,fromThumb:!!i}),this.lgBusy=!0,clearTimeout(this.hideBarTimeout),this.arrowDisable(e),s||(e<n?s="prev":e>n&&(s="next")),t){this.outer.find(".lg-item").removeClass("lg-prev-slide lg-current lg-next-slide");var v=void 0,y=void 0;o>2?(v=e-1,y=e+1,(0===e&&n===o-1||e===o-1&&0===n)&&(y=0,v=o-1)):(v=0,y=1),"prev"===s?this.getSlideItem(y).addClass("lg-next-slide"):this.getSlideItem(v).addClass("lg-prev-slide"),l.addClass("lg-current")}else this.makeSlideAnimation(s,l,a);this.lGalleryOn?setTimeout((function(){r.loadContent(e,!0),".lg-item"!==r.settings.appendSubHtmlTo&&r.addHtml(e)}),this.settings.speed+50+(t?0:this.settings.slideDelay)):this.loadContent(e,!0),setTimeout((function(){r.lgBusy=!1,a.removeClass("lg-slide-progress"),r.LGel.trigger(f,{prevIndex:n,index:e,fromTouch:t,fromThumb:i})}),(this.lGalleryOn?this.settings.speed+100:100)+(t?0:this.settings.slideDelay))}this.index=e}},e.prototype.updateCurrentCounter=function(e){this.getElementById("lg-counter-current").html(e+1+"")},e.prototype.updateCounterTotal=function(){this.getElementById("lg-counter-all").html(this.galleryItems.length+"")},e.prototype.getSlideType=function(e){return e.__slideVideoInfo?"video":e.iframe?"iframe":"image"},e.prototype.touchMove=function(e,t,i){var s=t.pageX-e.pageX,r=t.pageY-e.pageY,n=!1;if(this.swipeDirection?n=!0:Math.abs(s)>15?(this.swipeDirection="horizontal",n=!0):Math.abs(r)>15&&(this.swipeDirection="vertical",n=!0),n){var o=this.getSlideItem(this.index);if("horizontal"===this.swipeDirection){null==i||i.preventDefault(),this.outer.addClass("lg-dragging"),this.setTranslate(o,s,0);var l=o.get().offsetWidth,a=15*l/100-Math.abs(10*s/100);this.setTranslate(this.outer.find(".lg-prev-slide").first(),-l+s-a,0),this.setTranslate(this.outer.find(".lg-next-slide").first(),l+s+a,0)}else if("vertical"===this.swipeDirection&&this.settings.swipeToClose){null==i||i.preventDefault(),this.$container.addClass("lg-dragging-vertical");var d=1-Math.abs(r)/window.innerHeight;this.$backdrop.css("opacity",d);var c=1-Math.abs(r)/(2*window.innerWidth);this.setTranslate(o,0,r,c,c),Math.abs(r)>100&&this.outer.addClass("lg-hide-items").removeClass("lg-components-open")}}},e.prototype.touchEnd=function(e,t,i){var s,r=this;"lg-slide"!==this.settings.mode&&this.outer.addClass("lg-slide"),setTimeout((function(){r.$container.removeClass("lg-dragging-vertical"),r.outer.removeClass("lg-dragging lg-hide-items").addClass("lg-components-open");var n=!0;if("horizontal"===r.swipeDirection){s=e.pageX-t.pageX;var o=Math.abs(e.pageX-t.pageX);s<0&&o>r.settings.swipeThreshold?(r.goToNextSlide(!0),n=!1):s>0&&o>r.settings.swipeThreshold&&(r.goToPrevSlide(!0),n=!1)}else if("vertical"===r.swipeDirection){if(s=Math.abs(e.pageY-t.pageY),r.settings.closable&&r.settings.swipeToClose&&s>100)return void r.closeGallery();r.$backdrop.css("opacity",1)}if(r.outer.find(".lg-item").removeAttr("style"),n&&Math.abs(e.pageX-t.pageX)<5){var l=M(i.target);r.isPosterElement(l)&&r.LGel.trigger(v)}r.swipeDirection=void 0})),setTimeout((function(){r.outer.hasClass("lg-dragging")||"lg-slide"===r.settings.mode||r.outer.removeClass("lg-slide")}),this.settings.speed+100)},e.prototype.enableSwipe=function(){var e=this,t={},i={},s=!1,r=!1;this.settings.enableSwipe&&(this.$inner.on("touchstart.lg",(function(i){e.dragOrSwipeEnabled=!0;var s=e.getSlideItem(e.index);!M(i.target).hasClass("lg-item")&&!s.get().contains(i.target)||e.outer.hasClass("lg-zoomed")||e.lgBusy||1!==i.touches.length||(r=!0,e.touchAction="swipe",e.manageSwipeClass(),t={pageX:i.touches[0].pageX,pageY:i.touches[0].pageY})})),this.$inner.on("touchmove.lg",(function(n){r&&"swipe"===e.touchAction&&1===n.touches.length&&(i={pageX:n.touches[0].pageX,pageY:n.touches[0].pageY},e.touchMove(t,i,n),s=!0)})),this.$inner.on("touchend.lg",(function(n){if("swipe"===e.touchAction){if(s)s=!1,e.touchEnd(i,t,n);else if(r){var o=M(n.target);e.isPosterElement(o)&&e.LGel.trigger(v)}e.touchAction=void 0,r=!1}})))},e.prototype.enableDrag=function(){var e=this,t={},i={},s=!1,r=!1;this.settings.enableDrag&&(this.outer.on("mousedown.lg",(function(i){e.dragOrSwipeEnabled=!0;var r=e.getSlideItem(e.index);(M(i.target).hasClass("lg-item")||r.get().contains(i.target))&&(e.outer.hasClass("lg-zoomed")||e.lgBusy||(i.preventDefault(),e.lgBusy||(e.manageSwipeClass(),t={pageX:i.pageX,pageY:i.pageY},s=!0,e.outer.get().scrollLeft+=1,e.outer.get().scrollLeft-=1,e.outer.removeClass("lg-grab").addClass("lg-grabbing"),e.LGel.trigger(y))))})),M(window).on("mousemove.lg.global"+this.lgId,(function(n){s&&e.lgOpened&&(r=!0,i={pageX:n.pageX,pageY:n.pageY},e.touchMove(t,i),e.LGel.trigger(b))})),M(window).on("mouseup.lg.global"+this.lgId,(function(n){if(e.lgOpened){var o=M(n.target);r?(r=!1,e.touchEnd(i,t,n),e.LGel.trigger(w)):e.isPosterElement(o)&&e.LGel.trigger(v),s&&(s=!1,e.outer.removeClass("lg-grabbing").addClass("lg-grab"))}})))},e.prototype.triggerPosterClick=function(){var e=this;this.$inner.on("click.lg",(function(t){!e.dragOrSwipeEnabled&&e.isPosterElement(M(t.target))&&e.LGel.trigger(v)}))},e.prototype.manageSwipeClass=function(){var e=this.index+1,t=this.index-1;this.settings.loop&&this.galleryItems.length>2&&(0===this.index?t=this.galleryItems.length-1:this.index===this.galleryItems.length-1&&(e=0)),this.outer.find(".lg-item").removeClass("lg-next-slide lg-prev-slide"),t>-1&&this.getSlideItem(t).addClass("lg-prev-slide"),this.getSlideItem(e).addClass("lg-next-slide")},e.prototype.goToNextSlide=function(e){var t=this,i=this.settings.loop;e&&this.galleryItems.length<3&&(i=!1),this.lgBusy||(this.index+1<this.galleryItems.length?(this.index++,this.LGel.trigger(S,{index:this.index}),this.slide(this.index,!!e,!1,"next")):i?(this.index=0,this.LGel.trigger(S,{index:this.index}),this.slide(this.index,!!e,!1,"next")):this.settings.slideEndAnimation&&!e&&(this.outer.addClass("lg-right-end"),setTimeout((function(){t.outer.removeClass("lg-right-end")}),400)))},e.prototype.goToPrevSlide=function(e){var t=this,i=this.settings.loop;e&&this.galleryItems.length<3&&(i=!1),this.lgBusy||(this.index>0?(this.index--,this.LGel.trigger(T,{index:this.index,fromTouch:e}),this.slide(this.index,!!e,!1,"prev")):i?(this.index=this.galleryItems.length-1,this.LGel.trigger(T,{index:this.index,fromTouch:e}),this.slide(this.index,!!e,!1,"prev")):this.settings.slideEndAnimation&&!e&&(this.outer.addClass("lg-left-end"),setTimeout((function(){t.outer.removeClass("lg-left-end")}),400)))},e.prototype.keyPress=function(){var e=this;M(window).on("keydown.lg.global"+this.lgId,(function(t){e.lgOpened&&!0===e.settings.escKey&&27===t.keyCode&&(t.preventDefault(),e.settings.allowMediaOverlap&&e.outer.hasClass("lg-can-toggle")&&e.outer.hasClass("lg-components-open")?e.outer.removeClass("lg-components-open"):e.closeGallery()),e.lgOpened&&e.galleryItems.length>1&&(37===t.keyCode&&(t.preventDefault(),e.goToPrevSlide()),39===t.keyCode&&(t.preventDefault(),e.goToNextSlide()))}))},e.prototype.arrow=function(){var e=this;this.getElementById("lg-prev").on("click.lg",(function(){e.goToPrevSlide()})),this.getElementById("lg-next").on("click.lg",(function(){e.goToNextSlide()}))},e.prototype.arrowDisable=function(e){if(!this.settings.loop&&this.settings.hideControlOnEnd){var t=this.getElementById("lg-prev"),i=this.getElementById("lg-next");e+1===this.galleryItems.length?i.attr("disabled","disabled").addClass("disabled"):i.removeAttr("disabled").removeClass("disabled"),0===e?t.attr("disabled","disabled").addClass("disabled"):t.removeAttr("disabled").removeClass("disabled")}},e.prototype.setTranslate=function(e,t,i,s,r){void 0===s&&(s=1),void 0===r&&(r=1),e.css("transform","translate3d("+t+"px, "+i+"px, 0px) scale3d("+s+", "+r+", 1)")},e.prototype.mousewheel=function(){var e=this,t=0;this.outer.on("wheel.lg",(function(i){if(i.deltaY&&!(e.galleryItems.length<2)){i.preventDefault();var s=(new Date).getTime();s-t<1e3||(t=s,i.deltaY>0?e.goToNextSlide():i.deltaY<0&&e.goToPrevSlide())}}))},e.prototype.isSlideElement=function(e){return e.hasClass("lg-outer")||e.hasClass("lg-item")||e.hasClass("lg-img-wrap")},e.prototype.isPosterElement=function(e){var t=this.getSlideItem(this.index).find(".lg-video-play-button").get();return e.hasClass("lg-video-poster")||e.hasClass("lg-video-play-button")||t&&t.contains(e.get())},e.prototype.toggleMaximize=function(){var e=this;this.getElementById("lg-maximize").on("click.lg",(function(){e.$container.toggleClass("lg-inline"),e.refreshOnResize()}))},e.prototype.invalidateItems=function(){for(var e=0;e<this.items.length;e++){var t=M(this.items[e]);t.off("click.lgcustom-item-"+t.attr("data-lg-id"))}},e.prototype.trapFocus=function(){var e=this;this.$container.get().focus({preventScroll:!0}),M(window).on("keydown.lg.global"+this.lgId,(function(t){if(e.lgOpened&&("Tab"===t.key||9===t.keyCode)){var i=B(e.$container.get()),s=i[0],r=i[i.length-1];t.shiftKey?document.activeElement===s&&(r.focus(),t.preventDefault()):document.activeElement===r&&(s.focus(),t.preventDefault())}}))},e.prototype.manageCloseGallery=function(){var e=this;if(this.settings.closable){var t=!1;this.getElementById("lg-close").on("click.lg",(function(){e.closeGallery()})),this.settings.closeOnTap&&(this.outer.on("mousedown.lg",(function(i){var s=M(i.target);t=!!e.isSlideElement(s)})),this.outer.on("mousemove.lg",(function(){t=!1})),this.outer.on("mouseup.lg",(function(i){var s=M(i.target);e.isSlideElement(s)&&t&&(e.outer.hasClass("lg-dragging")||e.closeGallery())})))}},e.prototype.closeGallery=function(e){var t=this;if(!this.lgOpened||!this.settings.closable&&!e)return 0;this.LGel.trigger(x),this.settings.resetScrollPosition&&!this.settings.hideScrollbar&&M(window).scrollTop(this.prevScrollTop);var i,s=this.items[this.index];if(this.zoomFromOrigin&&s){var r=this.mediaContainerPosition,n=r.top,o=r.bottom,l=this.galleryItems[this.index],a=l.__slideVideoInfo,d=l.poster,c=O(s,this.outer,n+o,a&&d&&this.settings.videoMaxSize);i=k(s,this.outer,n,o,c)}this.zoomFromOrigin&&i?(this.outer.addClass("lg-closing lg-zoom-from-image"),this.getSlideItem(this.index).addClass("lg-start-end-progress").css("transition-duration",this.settings.startAnimationDuration+"ms").css("transform",i)):(this.outer.addClass("lg-hide-items"),this.outer.removeClass("lg-zoom-from-image")),this.destroyModules(),this.lGalleryOn=!1,this.isDummyImageRemoved=!1,this.zoomFromOrigin=this.settings.zoomFromOrigin,clearTimeout(this.hideBarTimeout),this.hideBarTimeout=!1,M("html").removeClass("lg-on"),this.outer.removeClass("lg-visible lg-components-open"),this.$backdrop.removeClass("in").css("opacity",0);var p=this.zoomFromOrigin&&i?Math.max(this.settings.startAnimationDuration,this.settings.backdropDuration):this.settings.backdropDuration;return this.$container.removeClass("lg-show-in"),setTimeout((function(){t.zoomFromOrigin&&i&&t.outer.removeClass("lg-zoom-from-image"),t.$container.removeClass("lg-show"),t.resetScrollBar(),t.$backdrop.removeAttr("style").css("transition-duration",t.settings.backdropDuration+"ms"),t.outer.removeClass("lg-closing "+t.settings.startClass),t.getSlideItem(t.index).removeClass("lg-start-end-progress"),t.$inner.empty(),t.lgOpened&&t.LGel.trigger(C,{instance:t}),t.$container.get()&&t.$container.get().blur(),t.lgOpened=!1}),p+100),p+100},e.prototype.initModules=function(){this.plugins.forEach((function(e){try{e.init()}catch(e){console.warn("lightGallery:- make sure lightGallery module is properly initiated")}}))},e.prototype.destroyModules=function(e){this.plugins.forEach((function(t){try{e?t.destroy():t.closeGallery&&t.closeGallery()}catch(e){console.warn("lightGallery:- make sure lightGallery module is properly destroyed")}}))},e.prototype.refresh=function(e){this.settings.dynamic||this.invalidateItems(),this.galleryItems=e||this.getItems(),this.updateControls(),this.openGalleryOnItemClick(),this.LGel.trigger(c)},e.prototype.updateControls=function(){this.addSlideVideoInfo(this.galleryItems),this.updateCounterTotal(),this.manageSingleSlideClassName()},e.prototype.destroyGallery=function(){this.destroyModules(!0),this.settings.dynamic||this.invalidateItems(),M(window).off(".lg.global"+this.lgId),this.LGel.off(".lg"),this.$container.remove()},e.prototype.destroy=function(){var e=this.closeGallery(!0);return e?setTimeout(this.destroyGallery.bind(this),e):this.destroyGallery(),e},e}();const j=function(e,t){return new V(e,t)};r.e(11).then(r.bind(r,1011));function R(e){return null!==e&&"object"==typeof e&&"constructor"in e&&e.constructor===Object}function W(e,t){void 0===e&&(e={}),void 0===t&&(t={}),Object.keys(t).forEach((i=>{void 0===e[i]?e[i]=t[i]:R(t[i])&&R(e[i])&&Object.keys(t[i]).length>0&&W(e[i],t[i])}))}(()=>{document.querySelectorAll(".feed-chapter__images-swiper .slide-feed-chapter__image-wrap");document.querySelectorAll("[data-lightgallery]").forEach((e=>{const t=e.dataset.description,i=j(e,{speed:500,licenseKey:"7EC452A9-0CFD441C-BD984C7C-17C8456E",appendCounterTo:".lg-content",selector:".slide-feed-chapter__image-wrap",appendSubHtmlTo:".lg-item"});e.addEventListener("lgBeforeSlide",(e=>{document.querySelectorAll(".lg-item").forEach((e=>{e.querySelector(".lg-sub-html")&&"true"===e.querySelector(".lg-sub-html").innerHTML&&e.classList.add("_is-vertical")}))})),e.addEventListener("lgBeforeOpen",(e=>{const s=i.$container.firstElement.querySelector(".lg-outer"),r=document.createElement("div");r.classList.add("gallery-description"),r.innerHTML=t,t&&s.append(r);document.querySelectorAll(".lg-item").forEach((e=>{e.querySelector(".lg-sub-html")&&"true"===e.querySelector(".lg-sub-html").innerHTML&&e.classList.add("_is-vertical")}))}))}))})();const q={body:{},addEventListener(){},removeEventListener(){},activeElement:{blur(){},nodeName:""},querySelector:()=>null,querySelectorAll:()=>[],getElementById:()=>null,createEvent:()=>({initEvent(){}}),createElement:()=>({children:[],childNodes:[],style:{},setAttribute(){},getElementsByTagName:()=>[]}),createElementNS:()=>({}),importNode:()=>null,location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};function Y(){const e="undefined"!=typeof document?document:{};return W(e,q),e}const X={document:q,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState(){},pushState(){},go(){},back(){}},CustomEvent:function(){return this},addEventListener(){},removeEventListener(){},getComputedStyle:()=>({getPropertyValue:()=>""}),Image(){},Date(){},screen:{},setTimeout(){},clearTimeout(){},matchMedia:()=>({}),requestAnimationFrame:e=>"undefined"==typeof setTimeout?(e(),null):setTimeout(e,0),cancelAnimationFrame(e){"undefined"!=typeof setTimeout&&clearTimeout(e)}};function U(){const e="undefined"!=typeof window?window:{};return W(e,X),e}function K(e,t){return void 0===t&&(t=0),setTimeout(e,t)}function Z(){return Date.now()}function J(e,t){void 0===t&&(t="x");const i=U();let s,r,n;const o=function(e){const t=U();let i;return t.getComputedStyle&&(i=t.getComputedStyle(e,null)),!i&&e.currentStyle&&(i=e.currentStyle),i||(i=e.style),i}(e);return i.WebKitCSSMatrix?(r=o.transform||o.webkitTransform,r.split(",").length>6&&(r=r.split(", ").map((e=>e.replace(",","."))).join(", ")),n=new i.WebKitCSSMatrix("none"===r?"":r)):(n=o.MozTransform||o.OTransform||o.MsTransform||o.msTransform||o.transform||o.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,"),s=n.toString().split(",")),"x"===t&&(r=i.WebKitCSSMatrix?n.m41:16===s.length?parseFloat(s[12]):parseFloat(s[4])),"y"===t&&(r=i.WebKitCSSMatrix?n.m42:16===s.length?parseFloat(s[13]):parseFloat(s[5])),r||0}function Q(e){return"object"==typeof e&&null!==e&&e.constructor&&"Object"===Object.prototype.toString.call(e).slice(8,-1)}function ee(){const e=Object(arguments.length<=0?void 0:arguments[0]),t=["__proto__","constructor","prototype"];for(let s=1;s<arguments.length;s+=1){const r=s<0||arguments.length<=s?void 0:arguments[s];if(null!=r&&(i=r,!("undefined"!=typeof window&&void 0!==window.HTMLElement?i instanceof HTMLElement:i&&(1===i.nodeType||11===i.nodeType)))){const i=Object.keys(Object(r)).filter((e=>t.indexOf(e)<0));for(let t=0,s=i.length;t<s;t+=1){const s=i[t],n=Object.getOwnPropertyDescriptor(r,s);void 0!==n&&n.enumerable&&(Q(e[s])&&Q(r[s])?r[s].__swiper__?e[s]=r[s]:ee(e[s],r[s]):!Q(e[s])&&Q(r[s])?(e[s]={},r[s].__swiper__?e[s]=r[s]:ee(e[s],r[s])):e[s]=r[s])}}}var i;return e}function te(e,t,i){e.style.setProperty(t,i)}function ie(e){let{swiper:t,targetPosition:i,side:s}=e;const r=U(),n=-t.translate;let o,l=null;const a=t.params.speed;t.wrapperEl.style.scrollSnapType="none",r.cancelAnimationFrame(t.cssModeFrameID);const d=i>n?"next":"prev",c=(e,t)=>"next"===d&&e>=t||"prev"===d&&e<=t,p=()=>{o=(new Date).getTime(),null===l&&(l=o);const e=Math.max(Math.min((o-l)/a,1),0),d=.5-Math.cos(e*Math.PI)/2;let u=n+d*(i-n);if(c(u,i)&&(u=i),t.wrapperEl.scrollTo({[s]:u}),c(u,i))return t.wrapperEl.style.overflow="hidden",t.wrapperEl.style.scrollSnapType="",setTimeout((()=>{t.wrapperEl.style.overflow="",t.wrapperEl.scrollTo({[s]:u})})),void r.cancelAnimationFrame(t.cssModeFrameID);t.cssModeFrameID=r.requestAnimationFrame(p)};p()}function se(e,t){void 0===t&&(t="");const i=[...e.children];return e instanceof HTMLSlotElement&&i.push(...e.assignedElements()),t?i.filter((e=>e.matches(t))):i}function re(e){try{return void console.warn(e)}catch(e){}}function ne(e,t){void 0===t&&(t=[]);const i=document.createElement(e);return i.classList.add(...Array.isArray(t)?t:function(e){return void 0===e&&(e=""),e.trim().split(" ").filter((e=>!!e.trim()))}(t)),i}function oe(e,t){return U().getComputedStyle(e,null).getPropertyValue(t)}function le(e){let t,i=e;if(i){for(t=0;null!==(i=i.previousSibling);)1===i.nodeType&&(t+=1);return t}}function ae(e,t){const i=[];let s=e.parentElement;for(;s;)t?s.matches(t)&&i.push(s):i.push(s),s=s.parentElement;return i}function de(e,t,i){const s=U();return i?e["width"===t?"offsetWidth":"offsetHeight"]+parseFloat(s.getComputedStyle(e,null).getPropertyValue("width"===t?"margin-right":"margin-top"))+parseFloat(s.getComputedStyle(e,null).getPropertyValue("width"===t?"margin-left":"margin-bottom")):e.offsetWidth}function ce(e){return(Array.isArray(e)?e:[e]).filter((e=>!!e))}let pe,ue,he;function ge(){return pe||(pe=function(){const e=U(),t=Y();return{smoothScroll:t.documentElement&&t.documentElement.style&&"scrollBehavior"in t.documentElement.style,touch:!!("ontouchstart"in e||e.DocumentTouch&&t instanceof e.DocumentTouch)}}()),pe}function me(e){return void 0===e&&(e={}),ue||(ue=function(e){let{userAgent:t}=void 0===e?{}:e;const i=ge(),s=U(),r=s.navigator.platform,n=t||s.navigator.userAgent,o={ios:!1,android:!1},l=s.screen.width,a=s.screen.height,d=n.match(/(Android);?[\s\/]+([\d.]+)?/);let c=n.match(/(iPad).*OS\s([\d_]+)/);const p=n.match(/(iPod)(.*OS\s([\d_]+))?/),u=!c&&n.match(/(iPhone\sOS|iOS)\s([\d_]+)/),h="Win32"===r;let g="MacIntel"===r;return!c&&g&&i.touch&&["1024x1366","1366x1024","834x1194","1194x834","834x1112","1112x834","768x1024","1024x768","820x1180","1180x820","810x1080","1080x810"].indexOf(`${l}x${a}`)>=0&&(c=n.match(/(Version)\/([\d.]+)/),c||(c=[0,1,"13_0_0"]),g=!1),d&&!h&&(o.os="android",o.android=!0),(c||u||p)&&(o.os="ios",o.ios=!0),o}(e)),ue}function fe(){return he||(he=function(){const e=U(),t=me();let i=!1;function s(){const t=e.navigator.userAgent.toLowerCase();return t.indexOf("safari")>=0&&t.indexOf("chrome")<0&&t.indexOf("android")<0}if(s()){const t=String(e.navigator.userAgent);if(t.includes("Version/")){const[e,s]=t.split("Version/")[1].split(" ")[0].split(".").map((e=>Number(e)));i=e<16||16===e&&s<2}}const r=/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(e.navigator.userAgent),n=s();return{isSafari:i||n,needPerspectiveFix:i,need3dFix:n||r&&t.ios,isWebView:r}}()),he}var ve={on(e,t,i){const s=this;if(!s.eventsListeners||s.destroyed)return s;if("function"!=typeof t)return s;const r=i?"unshift":"push";return e.split(" ").forEach((e=>{s.eventsListeners[e]||(s.eventsListeners[e]=[]),s.eventsListeners[e][r](t)})),s},once(e,t,i){const s=this;if(!s.eventsListeners||s.destroyed)return s;if("function"!=typeof t)return s;function r(){s.off(e,r),r.__emitterProxy&&delete r.__emitterProxy;for(var i=arguments.length,n=new Array(i),o=0;o<i;o++)n[o]=arguments[o];t.apply(s,n)}return r.__emitterProxy=t,s.on(e,r,i)},onAny(e,t){const i=this;if(!i.eventsListeners||i.destroyed)return i;if("function"!=typeof e)return i;const s=t?"unshift":"push";return i.eventsAnyListeners.indexOf(e)<0&&i.eventsAnyListeners[s](e),i},offAny(e){const t=this;if(!t.eventsListeners||t.destroyed)return t;if(!t.eventsAnyListeners)return t;const i=t.eventsAnyListeners.indexOf(e);return i>=0&&t.eventsAnyListeners.splice(i,1),t},off(e,t){const i=this;return!i.eventsListeners||i.destroyed?i:i.eventsListeners?(e.split(" ").forEach((e=>{void 0===t?i.eventsListeners[e]=[]:i.eventsListeners[e]&&i.eventsListeners[e].forEach(((s,r)=>{(s===t||s.__emitterProxy&&s.__emitterProxy===t)&&i.eventsListeners[e].splice(r,1)}))})),i):i},emit(){const e=this;if(!e.eventsListeners||e.destroyed)return e;if(!e.eventsListeners)return e;let t,i,s;for(var r=arguments.length,n=new Array(r),o=0;o<r;o++)n[o]=arguments[o];"string"==typeof n[0]||Array.isArray(n[0])?(t=n[0],i=n.slice(1,n.length),s=e):(t=n[0].events,i=n[0].data,s=n[0].context||e),i.unshift(s);return(Array.isArray(t)?t:t.split(" ")).forEach((t=>{e.eventsAnyListeners&&e.eventsAnyListeners.length&&e.eventsAnyListeners.forEach((e=>{e.apply(s,[t,...i])})),e.eventsListeners&&e.eventsListeners[t]&&e.eventsListeners[t].forEach((e=>{e.apply(s,i)}))})),e}};const ye=(e,t,i)=>{t&&!e.classList.contains(i)?e.classList.add(i):!t&&e.classList.contains(i)&&e.classList.remove(i)};const be=(e,t,i)=>{t&&!e.classList.contains(i)?e.classList.add(i):!t&&e.classList.contains(i)&&e.classList.remove(i)};const we=(e,t)=>{if(!e||e.destroyed||!e.params)return;const i=t.closest(e.isElement?"swiper-slide":`.${e.params.slideClass}`);if(i){let t=i.querySelector(`.${e.params.lazyPreloaderClass}`);!t&&e.isElement&&(i.shadowRoot?t=i.shadowRoot.querySelector(`.${e.params.lazyPreloaderClass}`):requestAnimationFrame((()=>{i.shadowRoot&&(t=i.shadowRoot.querySelector(`.${e.params.lazyPreloaderClass}`),t&&t.remove())}))),t&&t.remove()}},Se=(e,t)=>{if(!e.slides[t])return;const i=e.slides[t].querySelector('[loading="lazy"]');i&&i.removeAttribute("loading")},Te=e=>{if(!e||e.destroyed||!e.params)return;let t=e.params.lazyPreloadPrevNext;const i=e.slides.length;if(!i||!t||t<0)return;t=Math.min(t,i);const s="auto"===e.params.slidesPerView?e.slidesPerViewDynamic():Math.ceil(e.params.slidesPerView),r=e.activeIndex;if(e.params.grid&&e.params.grid.rows>1){const i=r,n=[i-t];return n.push(...Array.from({length:t}).map(((e,t)=>i+s+t))),void e.slides.forEach(((t,i)=>{n.includes(t.column)&&Se(e,i)}))}const n=r+s-1;if(e.params.rewind||e.params.loop)for(let s=r-t;s<=n+t;s+=1){const t=(s%i+i)%i;(t<r||t>n)&&Se(e,t)}else for(let s=Math.max(r-t,0);s<=Math.min(n+t,i-1);s+=1)s!==r&&(s>n||s<r)&&Se(e,s)};var xe={updateSize:function(){const e=this;let t,i;const s=e.el;t=void 0!==e.params.width&&null!==e.params.width?e.params.width:s.clientWidth,i=void 0!==e.params.height&&null!==e.params.height?e.params.height:s.clientHeight,0===t&&e.isHorizontal()||0===i&&e.isVertical()||(t=t-parseInt(oe(s,"padding-left")||0,10)-parseInt(oe(s,"padding-right")||0,10),i=i-parseInt(oe(s,"padding-top")||0,10)-parseInt(oe(s,"padding-bottom")||0,10),Number.isNaN(t)&&(t=0),Number.isNaN(i)&&(i=0),Object.assign(e,{width:t,height:i,size:e.isHorizontal()?t:i}))},updateSlides:function(){const e=this;function t(t,i){return parseFloat(t.getPropertyValue(e.getDirectionLabel(i))||0)}const i=e.params,{wrapperEl:s,slidesEl:r,size:n,rtlTranslate:o,wrongRTL:l}=e,a=e.virtual&&i.virtual.enabled,d=a?e.virtual.slides.length:e.slides.length,c=se(r,`.${e.params.slideClass}, swiper-slide`),p=a?e.virtual.slides.length:c.length;let u=[];const h=[],g=[];let m=i.slidesOffsetBefore;"function"==typeof m&&(m=i.slidesOffsetBefore.call(e));let f=i.slidesOffsetAfter;"function"==typeof f&&(f=i.slidesOffsetAfter.call(e));const v=e.snapGrid.length,y=e.slidesGrid.length;let b=i.spaceBetween,w=-m,S=0,T=0;if(void 0===n)return;"string"==typeof b&&b.indexOf("%")>=0?b=parseFloat(b.replace("%",""))/100*n:"string"==typeof b&&(b=parseFloat(b)),e.virtualSize=-b,c.forEach((e=>{o?e.style.marginLeft="":e.style.marginRight="",e.style.marginBottom="",e.style.marginTop=""})),i.centeredSlides&&i.cssMode&&(te(s,"--swiper-centered-offset-before",""),te(s,"--swiper-centered-offset-after",""));const x=i.grid&&i.grid.rows>1&&e.grid;let C;x?e.grid.initSlides(c):e.grid&&e.grid.unsetSlides();const E="auto"===i.slidesPerView&&i.breakpoints&&Object.keys(i.breakpoints).filter((e=>void 0!==i.breakpoints[e].slidesPerView)).length>0;for(let s=0;s<p;s+=1){let r;if(C=0,c[s]&&(r=c[s]),x&&e.grid.updateSlide(s,r,c),!c[s]||"none"!==oe(r,"display")){if("auto"===i.slidesPerView){E&&(c[s].style[e.getDirectionLabel("width")]="");const n=getComputedStyle(r),o=r.style.transform,l=r.style.webkitTransform;if(o&&(r.style.transform="none"),l&&(r.style.webkitTransform="none"),i.roundLengths)C=e.isHorizontal()?de(r,"width",!0):de(r,"height",!0);else{const e=t(n,"width"),i=t(n,"padding-left"),s=t(n,"padding-right"),o=t(n,"margin-left"),l=t(n,"margin-right"),a=n.getPropertyValue("box-sizing");if(a&&"border-box"===a)C=e+o+l;else{const{clientWidth:t,offsetWidth:n}=r;C=e+i+s+o+l+(n-t)}}o&&(r.style.transform=o),l&&(r.style.webkitTransform=l),i.roundLengths&&(C=Math.floor(C))}else C=(n-(i.slidesPerView-1)*b)/i.slidesPerView,i.roundLengths&&(C=Math.floor(C)),c[s]&&(c[s].style[e.getDirectionLabel("width")]=`${C}px`);c[s]&&(c[s].swiperSlideSize=C),g.push(C),i.centeredSlides?(w=w+C/2+S/2+b,0===S&&0!==s&&(w=w-n/2-b),0===s&&(w=w-n/2-b),Math.abs(w)<.001&&(w=0),i.roundLengths&&(w=Math.floor(w)),T%i.slidesPerGroup==0&&u.push(w),h.push(w)):(i.roundLengths&&(w=Math.floor(w)),(T-Math.min(e.params.slidesPerGroupSkip,T))%e.params.slidesPerGroup==0&&u.push(w),h.push(w),w=w+C+b),e.virtualSize+=C+b,S=C,T+=1}}if(e.virtualSize=Math.max(e.virtualSize,n)+f,o&&l&&("slide"===i.effect||"coverflow"===i.effect)&&(s.style.width=`${e.virtualSize+b}px`),i.setWrapperSize&&(s.style[e.getDirectionLabel("width")]=`${e.virtualSize+b}px`),x&&e.grid.updateWrapperSize(C,u),!i.centeredSlides){const t=[];for(let s=0;s<u.length;s+=1){let r=u[s];i.roundLengths&&(r=Math.floor(r)),u[s]<=e.virtualSize-n&&t.push(r)}u=t,Math.floor(e.virtualSize-n)-Math.floor(u[u.length-1])>1&&u.push(e.virtualSize-n)}if(a&&i.loop){const t=g[0]+b;if(i.slidesPerGroup>1){const s=Math.ceil((e.virtual.slidesBefore+e.virtual.slidesAfter)/i.slidesPerGroup),r=t*i.slidesPerGroup;for(let e=0;e<s;e+=1)u.push(u[u.length-1]+r)}for(let s=0;s<e.virtual.slidesBefore+e.virtual.slidesAfter;s+=1)1===i.slidesPerGroup&&u.push(u[u.length-1]+t),h.push(h[h.length-1]+t),e.virtualSize+=t}if(0===u.length&&(u=[0]),0!==b){const t=e.isHorizontal()&&o?"marginLeft":e.getDirectionLabel("marginRight");c.filter(((e,t)=>!(i.cssMode&&!i.loop)||t!==c.length-1)).forEach((e=>{e.style[t]=`${b}px`}))}if(i.centeredSlides&&i.centeredSlidesBounds){let e=0;g.forEach((t=>{e+=t+(b||0)})),e-=b;const t=e-n;u=u.map((e=>e<=0?-m:e>t?t+f:e))}if(i.centerInsufficientSlides){let e=0;g.forEach((t=>{e+=t+(b||0)})),e-=b;const t=(i.slidesOffsetBefore||0)+(i.slidesOffsetAfter||0);if(e+t<n){const i=(n-e-t)/2;u.forEach(((e,t)=>{u[t]=e-i})),h.forEach(((e,t)=>{h[t]=e+i}))}}if(Object.assign(e,{slides:c,snapGrid:u,slidesGrid:h,slidesSizesGrid:g}),i.centeredSlides&&i.cssMode&&!i.centeredSlidesBounds){te(s,"--swiper-centered-offset-before",-u[0]+"px"),te(s,"--swiper-centered-offset-after",e.size/2-g[g.length-1]/2+"px");const t=-e.snapGrid[0],i=-e.slidesGrid[0];e.snapGrid=e.snapGrid.map((e=>e+t)),e.slidesGrid=e.slidesGrid.map((e=>e+i))}if(p!==d&&e.emit("slidesLengthChange"),u.length!==v&&(e.params.watchOverflow&&e.checkOverflow(),e.emit("snapGridLengthChange")),h.length!==y&&e.emit("slidesGridLengthChange"),i.watchSlidesProgress&&e.updateSlidesOffset(),e.emit("slidesUpdated"),!(a||i.cssMode||"slide"!==i.effect&&"fade"!==i.effect)){const t=`${i.containerModifierClass}backface-hidden`,s=e.el.classList.contains(t);p<=i.maxBackfaceHiddenSlides?s||e.el.classList.add(t):s&&e.el.classList.remove(t)}},updateAutoHeight:function(e){const t=this,i=[],s=t.virtual&&t.params.virtual.enabled;let r,n=0;"number"==typeof e?t.setTransition(e):!0===e&&t.setTransition(t.params.speed);const o=e=>s?t.slides[t.getSlideIndexByData(e)]:t.slides[e];if("auto"!==t.params.slidesPerView&&t.params.slidesPerView>1)if(t.params.centeredSlides)(t.visibleSlides||[]).forEach((e=>{i.push(e)}));else for(r=0;r<Math.ceil(t.params.slidesPerView);r+=1){const e=t.activeIndex+r;if(e>t.slides.length&&!s)break;i.push(o(e))}else i.push(o(t.activeIndex));for(r=0;r<i.length;r+=1)if(void 0!==i[r]){const e=i[r].offsetHeight;n=e>n?e:n}(n||0===n)&&(t.wrapperEl.style.height=`${n}px`)},updateSlidesOffset:function(){const e=this,t=e.slides,i=e.isElement?e.isHorizontal()?e.wrapperEl.offsetLeft:e.wrapperEl.offsetTop:0;for(let s=0;s<t.length;s+=1)t[s].swiperSlideOffset=(e.isHorizontal()?t[s].offsetLeft:t[s].offsetTop)-i-e.cssOverflowAdjustment()},updateSlidesProgress:function(e){void 0===e&&(e=this&&this.translate||0);const t=this,i=t.params,{slides:s,rtlTranslate:r,snapGrid:n}=t;if(0===s.length)return;void 0===s[0].swiperSlideOffset&&t.updateSlidesOffset();let o=-e;r&&(o=e),t.visibleSlidesIndexes=[],t.visibleSlides=[];let l=i.spaceBetween;"string"==typeof l&&l.indexOf("%")>=0?l=parseFloat(l.replace("%",""))/100*t.size:"string"==typeof l&&(l=parseFloat(l));for(let e=0;e<s.length;e+=1){const a=s[e];let d=a.swiperSlideOffset;i.cssMode&&i.centeredSlides&&(d-=s[0].swiperSlideOffset);const c=(o+(i.centeredSlides?t.minTranslate():0)-d)/(a.swiperSlideSize+l),p=(o-n[0]+(i.centeredSlides?t.minTranslate():0)-d)/(a.swiperSlideSize+l),u=-(o-d),h=u+t.slidesSizesGrid[e],g=u>=0&&u<=t.size-t.slidesSizesGrid[e],m=u>=0&&u<t.size-1||h>1&&h<=t.size||u<=0&&h>=t.size;m&&(t.visibleSlides.push(a),t.visibleSlidesIndexes.push(e)),ye(a,m,i.slideVisibleClass),ye(a,g,i.slideFullyVisibleClass),a.progress=r?-c:c,a.originalProgress=r?-p:p}},updateProgress:function(e){const t=this;if(void 0===e){const i=t.rtlTranslate?-1:1;e=t&&t.translate&&t.translate*i||0}const i=t.params,s=t.maxTranslate()-t.minTranslate();let{progress:r,isBeginning:n,isEnd:o,progressLoop:l}=t;const a=n,d=o;if(0===s)r=0,n=!0,o=!0;else{r=(e-t.minTranslate())/s;const i=Math.abs(e-t.minTranslate())<1,l=Math.abs(e-t.maxTranslate())<1;n=i||r<=0,o=l||r>=1,i&&(r=0),l&&(r=1)}if(i.loop){const i=t.getSlideIndexByData(0),s=t.getSlideIndexByData(t.slides.length-1),r=t.slidesGrid[i],n=t.slidesGrid[s],o=t.slidesGrid[t.slidesGrid.length-1],a=Math.abs(e);l=a>=r?(a-r)/o:(a+o-n)/o,l>1&&(l-=1)}Object.assign(t,{progress:r,progressLoop:l,isBeginning:n,isEnd:o}),(i.watchSlidesProgress||i.centeredSlides&&i.autoHeight)&&t.updateSlidesProgress(e),n&&!a&&t.emit("reachBeginning toEdge"),o&&!d&&t.emit("reachEnd toEdge"),(a&&!n||d&&!o)&&t.emit("fromEdge"),t.emit("progress",r)},updateSlidesClasses:function(){const e=this,{slides:t,params:i,slidesEl:s,activeIndex:r}=e,n=e.virtual&&i.virtual.enabled,o=e.grid&&i.grid&&i.grid.rows>1,l=e=>se(s,`.${i.slideClass}${e}, swiper-slide${e}`)[0];let a,d,c;if(n)if(i.loop){let t=r-e.virtual.slidesBefore;t<0&&(t=e.virtual.slides.length+t),t>=e.virtual.slides.length&&(t-=e.virtual.slides.length),a=l(`[data-swiper-slide-index="${t}"]`)}else a=l(`[data-swiper-slide-index="${r}"]`);else o?(a=t.filter((e=>e.column===r))[0],c=t.filter((e=>e.column===r+1))[0],d=t.filter((e=>e.column===r-1))[0]):a=t[r];a&&(o||(c=function(e,t){const i=[];for(;e.nextElementSibling;){const s=e.nextElementSibling;t?s.matches(t)&&i.push(s):i.push(s),e=s}return i}(a,`.${i.slideClass}, swiper-slide`)[0],i.loop&&!c&&(c=t[0]),d=function(e,t){const i=[];for(;e.previousElementSibling;){const s=e.previousElementSibling;t?s.matches(t)&&i.push(s):i.push(s),e=s}return i}(a,`.${i.slideClass}, swiper-slide`)[0],i.loop&&0===!d&&(d=t[t.length-1]))),t.forEach((e=>{be(e,e===a,i.slideActiveClass),be(e,e===c,i.slideNextClass),be(e,e===d,i.slidePrevClass)})),e.emitSlidesClasses()},updateActiveIndex:function(e){const t=this,i=t.rtlTranslate?t.translate:-t.translate,{snapGrid:s,params:r,activeIndex:n,realIndex:o,snapIndex:l}=t;let a,d=e;const c=e=>{let i=e-t.virtual.slidesBefore;return i<0&&(i=t.virtual.slides.length+i),i>=t.virtual.slides.length&&(i-=t.virtual.slides.length),i};if(void 0===d&&(d=function(e){const{slidesGrid:t,params:i}=e,s=e.rtlTranslate?e.translate:-e.translate;let r;for(let e=0;e<t.length;e+=1)void 0!==t[e+1]?s>=t[e]&&s<t[e+1]-(t[e+1]-t[e])/2?r=e:s>=t[e]&&s<t[e+1]&&(r=e+1):s>=t[e]&&(r=e);return i.normalizeSlideIndex&&(r<0||void 0===r)&&(r=0),r}(t)),s.indexOf(i)>=0)a=s.indexOf(i);else{const e=Math.min(r.slidesPerGroupSkip,d);a=e+Math.floor((d-e)/r.slidesPerGroup)}if(a>=s.length&&(a=s.length-1),d===n&&!t.params.loop)return void(a!==l&&(t.snapIndex=a,t.emit("snapIndexChange")));if(d===n&&t.params.loop&&t.virtual&&t.params.virtual.enabled)return void(t.realIndex=c(d));const p=t.grid&&r.grid&&r.grid.rows>1;let u;if(t.virtual&&r.virtual.enabled&&r.loop)u=c(d);else if(p){const e=t.slides.filter((e=>e.column===d))[0];let i=parseInt(e.getAttribute("data-swiper-slide-index"),10);Number.isNaN(i)&&(i=Math.max(t.slides.indexOf(e),0)),u=Math.floor(i/r.grid.rows)}else if(t.slides[d]){const e=t.slides[d].getAttribute("data-swiper-slide-index");u=e?parseInt(e,10):d}else u=d;Object.assign(t,{previousSnapIndex:l,snapIndex:a,previousRealIndex:o,realIndex:u,previousIndex:n,activeIndex:d}),t.initialized&&Te(t),t.emit("activeIndexChange"),t.emit("snapIndexChange"),(t.initialized||t.params.runCallbacksOnInit)&&(o!==u&&t.emit("realIndexChange"),t.emit("slideChange"))},updateClickedSlide:function(e,t){const i=this,s=i.params;let r=e.closest(`.${s.slideClass}, swiper-slide`);!r&&i.isElement&&t&&t.length>1&&t.includes(e)&&[...t.slice(t.indexOf(e)+1,t.length)].forEach((e=>{!r&&e.matches&&e.matches(`.${s.slideClass}, swiper-slide`)&&(r=e)}));let n,o=!1;if(r)for(let e=0;e<i.slides.length;e+=1)if(i.slides[e]===r){o=!0,n=e;break}if(!r||!o)return i.clickedSlide=void 0,void(i.clickedIndex=void 0);i.clickedSlide=r,i.virtual&&i.params.virtual.enabled?i.clickedIndex=parseInt(r.getAttribute("data-swiper-slide-index"),10):i.clickedIndex=n,s.slideToClickedSlide&&void 0!==i.clickedIndex&&i.clickedIndex!==i.activeIndex&&i.slideToClickedSlide()}};var Ce={getTranslate:function(e){void 0===e&&(e=this.isHorizontal()?"x":"y");const{params:t,rtlTranslate:i,translate:s,wrapperEl:r}=this;if(t.virtualTranslate)return i?-s:s;if(t.cssMode)return s;let n=J(r,e);return n+=this.cssOverflowAdjustment(),i&&(n=-n),n||0},setTranslate:function(e,t){const i=this,{rtlTranslate:s,params:r,wrapperEl:n,progress:o}=i;let l,a=0,d=0;i.isHorizontal()?a=s?-e:e:d=e,r.roundLengths&&(a=Math.floor(a),d=Math.floor(d)),i.previousTranslate=i.translate,i.translate=i.isHorizontal()?a:d,r.cssMode?n[i.isHorizontal()?"scrollLeft":"scrollTop"]=i.isHorizontal()?-a:-d:r.virtualTranslate||(i.isHorizontal()?a-=i.cssOverflowAdjustment():d-=i.cssOverflowAdjustment(),n.style.transform=`translate3d(${a}px, ${d}px, 0px)`);const c=i.maxTranslate()-i.minTranslate();l=0===c?0:(e-i.minTranslate())/c,l!==o&&i.updateProgress(e),i.emit("setTranslate",i.translate,t)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]},translateTo:function(e,t,i,s,r){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===i&&(i=!0),void 0===s&&(s=!0);const n=this,{params:o,wrapperEl:l}=n;if(n.animating&&o.preventInteractionOnTransition)return!1;const a=n.minTranslate(),d=n.maxTranslate();let c;if(c=s&&e>a?a:s&&e<d?d:e,n.updateProgress(c),o.cssMode){const e=n.isHorizontal();if(0===t)l[e?"scrollLeft":"scrollTop"]=-c;else{if(!n.support.smoothScroll)return ie({swiper:n,targetPosition:-c,side:e?"left":"top"}),!0;l.scrollTo({[e?"left":"top"]:-c,behavior:"smooth"})}return!0}return 0===t?(n.setTransition(0),n.setTranslate(c),i&&(n.emit("beforeTransitionStart",t,r),n.emit("transitionEnd"))):(n.setTransition(t),n.setTranslate(c),i&&(n.emit("beforeTransitionStart",t,r),n.emit("transitionStart")),n.animating||(n.animating=!0,n.onTranslateToWrapperTransitionEnd||(n.onTranslateToWrapperTransitionEnd=function(e){n&&!n.destroyed&&e.target===this&&(n.wrapperEl.removeEventListener("transitionend",n.onTranslateToWrapperTransitionEnd),n.onTranslateToWrapperTransitionEnd=null,delete n.onTranslateToWrapperTransitionEnd,n.animating=!1,i&&n.emit("transitionEnd"))}),n.wrapperEl.addEventListener("transitionend",n.onTranslateToWrapperTransitionEnd))),!0}};function Ee(e){let{swiper:t,runCallbacks:i,direction:s,step:r}=e;const{activeIndex:n,previousIndex:o}=t;let l=s;if(l||(l=n>o?"next":n<o?"prev":"reset"),t.emit(`transition${r}`),i&&n!==o){if("reset"===l)return void t.emit(`slideResetTransition${r}`);t.emit(`slideChangeTransition${r}`),"next"===l?t.emit(`slideNextTransition${r}`):t.emit(`slidePrevTransition${r}`)}}var Ie={slideTo:function(e,t,i,s,r){void 0===e&&(e=0),void 0===i&&(i=!0),"string"==typeof e&&(e=parseInt(e,10));const n=this;let o=e;o<0&&(o=0);const{params:l,snapGrid:a,slidesGrid:d,previousIndex:c,activeIndex:p,rtlTranslate:u,wrapperEl:h,enabled:g}=n;if(!g&&!s&&!r||n.destroyed||n.animating&&l.preventInteractionOnTransition)return!1;void 0===t&&(t=n.params.speed);const m=Math.min(n.params.slidesPerGroupSkip,o);let f=m+Math.floor((o-m)/n.params.slidesPerGroup);f>=a.length&&(f=a.length-1);const v=-a[f];if(l.normalizeSlideIndex)for(let e=0;e<d.length;e+=1){const t=-Math.floor(100*v),i=Math.floor(100*d[e]),s=Math.floor(100*d[e+1]);void 0!==d[e+1]?t>=i&&t<s-(s-i)/2?o=e:t>=i&&t<s&&(o=e+1):t>=i&&(o=e)}if(n.initialized&&o!==p){if(!n.allowSlideNext&&(u?v>n.translate&&v>n.minTranslate():v<n.translate&&v<n.minTranslate()))return!1;if(!n.allowSlidePrev&&v>n.translate&&v>n.maxTranslate()&&(p||0)!==o)return!1}let y;if(o!==(c||0)&&i&&n.emit("beforeSlideChangeStart"),n.updateProgress(v),y=o>p?"next":o<p?"prev":"reset",u&&-v===n.translate||!u&&v===n.translate)return n.updateActiveIndex(o),l.autoHeight&&n.updateAutoHeight(),n.updateSlidesClasses(),"slide"!==l.effect&&n.setTranslate(v),"reset"!==y&&(n.transitionStart(i,y),n.transitionEnd(i,y)),!1;if(l.cssMode){const e=n.isHorizontal(),i=u?v:-v;if(0===t){const t=n.virtual&&n.params.virtual.enabled;t&&(n.wrapperEl.style.scrollSnapType="none",n._immediateVirtual=!0),t&&!n._cssModeVirtualInitialSet&&n.params.initialSlide>0?(n._cssModeVirtualInitialSet=!0,requestAnimationFrame((()=>{h[e?"scrollLeft":"scrollTop"]=i}))):h[e?"scrollLeft":"scrollTop"]=i,t&&requestAnimationFrame((()=>{n.wrapperEl.style.scrollSnapType="",n._immediateVirtual=!1}))}else{if(!n.support.smoothScroll)return ie({swiper:n,targetPosition:i,side:e?"left":"top"}),!0;h.scrollTo({[e?"left":"top"]:i,behavior:"smooth"})}return!0}return n.setTransition(t),n.setTranslate(v),n.updateActiveIndex(o),n.updateSlidesClasses(),n.emit("beforeTransitionStart",t,s),n.transitionStart(i,y),0===t?n.transitionEnd(i,y):n.animating||(n.animating=!0,n.onSlideToWrapperTransitionEnd||(n.onSlideToWrapperTransitionEnd=function(e){n&&!n.destroyed&&e.target===this&&(n.wrapperEl.removeEventListener("transitionend",n.onSlideToWrapperTransitionEnd),n.onSlideToWrapperTransitionEnd=null,delete n.onSlideToWrapperTransitionEnd,n.transitionEnd(i,y))}),n.wrapperEl.addEventListener("transitionend",n.onSlideToWrapperTransitionEnd)),!0},slideToLoop:function(e,t,i,s){if(void 0===e&&(e=0),void 0===i&&(i=!0),"string"==typeof e){e=parseInt(e,10)}const r=this;if(r.destroyed)return;void 0===t&&(t=r.params.speed);const n=r.grid&&r.params.grid&&r.params.grid.rows>1;let o=e;if(r.params.loop)if(r.virtual&&r.params.virtual.enabled)o+=r.virtual.slidesBefore;else{let e;if(n){const t=o*r.params.grid.rows;e=r.slides.filter((e=>1*e.getAttribute("data-swiper-slide-index")===t))[0].column}else e=r.getSlideIndexByData(o);const t=n?Math.ceil(r.slides.length/r.params.grid.rows):r.slides.length,{centeredSlides:i}=r.params;let l=r.params.slidesPerView;"auto"===l?l=r.slidesPerViewDynamic():(l=Math.ceil(parseFloat(r.params.slidesPerView,10)),i&&l%2==0&&(l+=1));let a=t-e<l;if(i&&(a=a||e<Math.ceil(l/2)),s&&i&&"auto"!==r.params.slidesPerView&&!n&&(a=!1),a){const s=i?e<r.activeIndex?"prev":"next":e-r.activeIndex-1<r.params.slidesPerView?"next":"prev";r.loopFix({direction:s,slideTo:!0,activeSlideIndex:"next"===s?e+1:e-t+1,slideRealIndex:"next"===s?r.realIndex:void 0})}if(n){const e=o*r.params.grid.rows;o=r.slides.filter((t=>1*t.getAttribute("data-swiper-slide-index")===e))[0].column}else o=r.getSlideIndexByData(o)}return requestAnimationFrame((()=>{r.slideTo(o,t,i,s)})),r},slideNext:function(e,t,i){void 0===t&&(t=!0);const s=this,{enabled:r,params:n,animating:o}=s;if(!r||s.destroyed)return s;void 0===e&&(e=s.params.speed);let l=n.slidesPerGroup;"auto"===n.slidesPerView&&1===n.slidesPerGroup&&n.slidesPerGroupAuto&&(l=Math.max(s.slidesPerViewDynamic("current",!0),1));const a=s.activeIndex<n.slidesPerGroupSkip?1:l,d=s.virtual&&n.virtual.enabled;if(n.loop){if(o&&!d&&n.loopPreventsSliding)return!1;if(s.loopFix({direction:"next"}),s._clientLeft=s.wrapperEl.clientLeft,s.activeIndex===s.slides.length-1&&n.cssMode)return requestAnimationFrame((()=>{s.slideTo(s.activeIndex+a,e,t,i)})),!0}return n.rewind&&s.isEnd?s.slideTo(0,e,t,i):s.slideTo(s.activeIndex+a,e,t,i)},slidePrev:function(e,t,i){void 0===t&&(t=!0);const s=this,{params:r,snapGrid:n,slidesGrid:o,rtlTranslate:l,enabled:a,animating:d}=s;if(!a||s.destroyed)return s;void 0===e&&(e=s.params.speed);const c=s.virtual&&r.virtual.enabled;if(r.loop){if(d&&!c&&r.loopPreventsSliding)return!1;s.loopFix({direction:"prev"}),s._clientLeft=s.wrapperEl.clientLeft}function p(e){return e<0?-Math.floor(Math.abs(e)):Math.floor(e)}const u=p(l?s.translate:-s.translate),h=n.map((e=>p(e)));let g=n[h.indexOf(u)-1];if(void 0===g&&r.cssMode){let e;n.forEach(((t,i)=>{u>=t&&(e=i)})),void 0!==e&&(g=n[e>0?e-1:e])}let m=0;if(void 0!==g&&(m=o.indexOf(g),m<0&&(m=s.activeIndex-1),"auto"===r.slidesPerView&&1===r.slidesPerGroup&&r.slidesPerGroupAuto&&(m=m-s.slidesPerViewDynamic("previous",!0)+1,m=Math.max(m,0))),r.rewind&&s.isBeginning){const r=s.params.virtual&&s.params.virtual.enabled&&s.virtual?s.virtual.slides.length-1:s.slides.length-1;return s.slideTo(r,e,t,i)}return r.loop&&0===s.activeIndex&&r.cssMode?(requestAnimationFrame((()=>{s.slideTo(m,e,t,i)})),!0):s.slideTo(m,e,t,i)},slideReset:function(e,t,i){void 0===t&&(t=!0);const s=this;if(!s.destroyed)return void 0===e&&(e=s.params.speed),s.slideTo(s.activeIndex,e,t,i)},slideToClosest:function(e,t,i,s){void 0===t&&(t=!0),void 0===s&&(s=.5);const r=this;if(r.destroyed)return;void 0===e&&(e=r.params.speed);let n=r.activeIndex;const o=Math.min(r.params.slidesPerGroupSkip,n),l=o+Math.floor((n-o)/r.params.slidesPerGroup),a=r.rtlTranslate?r.translate:-r.translate;if(a>=r.snapGrid[l]){const e=r.snapGrid[l];a-e>(r.snapGrid[l+1]-e)*s&&(n+=r.params.slidesPerGroup)}else{const e=r.snapGrid[l-1];a-e<=(r.snapGrid[l]-e)*s&&(n-=r.params.slidesPerGroup)}return n=Math.max(n,0),n=Math.min(n,r.slidesGrid.length-1),r.slideTo(n,e,t,i)},slideToClickedSlide:function(){const e=this;if(e.destroyed)return;const{params:t,slidesEl:i}=e,s="auto"===t.slidesPerView?e.slidesPerViewDynamic():t.slidesPerView;let r,n=e.clickedIndex;const o=e.isElement?"swiper-slide":`.${t.slideClass}`;if(t.loop){if(e.animating)return;r=parseInt(e.clickedSlide.getAttribute("data-swiper-slide-index"),10),t.centeredSlides?n<e.loopedSlides-s/2||n>e.slides.length-e.loopedSlides+s/2?(e.loopFix(),n=e.getSlideIndex(se(i,`${o}[data-swiper-slide-index="${r}"]`)[0]),K((()=>{e.slideTo(n)}))):e.slideTo(n):n>e.slides.length-s?(e.loopFix(),n=e.getSlideIndex(se(i,`${o}[data-swiper-slide-index="${r}"]`)[0]),K((()=>{e.slideTo(n)}))):e.slideTo(n)}else e.slideTo(n)}};var Me={loopCreate:function(e){const t=this,{params:i,slidesEl:s}=t;if(!i.loop||t.virtual&&t.params.virtual.enabled)return;const r=()=>{se(s,`.${i.slideClass}, swiper-slide`).forEach(((e,t)=>{e.setAttribute("data-swiper-slide-index",t)}))},n=t.grid&&i.grid&&i.grid.rows>1,o=i.slidesPerGroup*(n?i.grid.rows:1),l=t.slides.length%o!=0,a=n&&t.slides.length%i.grid.rows!=0,d=e=>{for(let s=0;s<e;s+=1){const e=t.isElement?ne("swiper-slide",[i.slideBlankClass]):ne("div",[i.slideClass,i.slideBlankClass]);t.slidesEl.append(e)}};if(l){if(i.loopAddBlankSlides){d(o-t.slides.length%o),t.recalcSlides(),t.updateSlides()}else re("Swiper Loop Warning: The number of slides is not even to slidesPerGroup, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)");r()}else if(a){if(i.loopAddBlankSlides){d(i.grid.rows-t.slides.length%i.grid.rows),t.recalcSlides(),t.updateSlides()}else re("Swiper Loop Warning: The number of slides is not even to grid.rows, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)");r()}else r();t.loopFix({slideRealIndex:e,direction:i.centeredSlides?void 0:"next"})},loopFix:function(e){let{slideRealIndex:t,slideTo:i=!0,direction:s,setTranslate:r,activeSlideIndex:n,byController:o,byMousewheel:l}=void 0===e?{}:e;const a=this;if(!a.params.loop)return;a.emit("beforeLoopFix");const{slides:d,allowSlidePrev:c,allowSlideNext:p,slidesEl:u,params:h}=a,{centeredSlides:g}=h;if(a.allowSlidePrev=!0,a.allowSlideNext=!0,a.virtual&&h.virtual.enabled)return i&&(h.centeredSlides||0!==a.snapIndex?h.centeredSlides&&a.snapIndex<h.slidesPerView?a.slideTo(a.virtual.slides.length+a.snapIndex,0,!1,!0):a.snapIndex===a.snapGrid.length-1&&a.slideTo(a.virtual.slidesBefore,0,!1,!0):a.slideTo(a.virtual.slides.length,0,!1,!0)),a.allowSlidePrev=c,a.allowSlideNext=p,void a.emit("loopFix");let m=h.slidesPerView;"auto"===m?m=a.slidesPerViewDynamic():(m=Math.ceil(parseFloat(h.slidesPerView,10)),g&&m%2==0&&(m+=1));const f=h.slidesPerGroupAuto?m:h.slidesPerGroup;let v=f;v%f!=0&&(v+=f-v%f),v+=h.loopAdditionalSlides,a.loopedSlides=v;const y=a.grid&&h.grid&&h.grid.rows>1;d.length<m+v?re("Swiper Loop Warning: The number of slides is not enough for loop mode, it will be disabled and not function properly. You need to add more slides (or make duplicates) or lower the values of slidesPerView and slidesPerGroup parameters"):y&&"row"===h.grid.fill&&re("Swiper Loop Warning: Loop mode is not compatible with grid.fill = `row`");const b=[],w=[];let S=a.activeIndex;void 0===n?n=a.getSlideIndex(d.filter((e=>e.classList.contains(h.slideActiveClass)))[0]):S=n;const T="next"===s||!s,x="prev"===s||!s;let C=0,E=0;const I=y?Math.ceil(d.length/h.grid.rows):d.length,M=(y?d[n].column:n)+(g&&void 0===r?-m/2+.5:0);if(M<v){C=Math.max(v-M,f);for(let e=0;e<v-M;e+=1){const t=e-Math.floor(e/I)*I;if(y){const e=I-t-1;for(let t=d.length-1;t>=0;t-=1)d[t].column===e&&b.push(t)}else b.push(I-t-1)}}else if(M+m>I-v){E=Math.max(M-(I-2*v),f);for(let e=0;e<E;e+=1){const t=e-Math.floor(e/I)*I;y?d.forEach(((e,i)=>{e.column===t&&w.push(i)})):w.push(t)}}if(a.__preventObserver__=!0,requestAnimationFrame((()=>{a.__preventObserver__=!1})),x&&b.forEach((e=>{d[e].swiperLoopMoveDOM=!0,u.prepend(d[e]),d[e].swiperLoopMoveDOM=!1})),T&&w.forEach((e=>{d[e].swiperLoopMoveDOM=!0,u.append(d[e]),d[e].swiperLoopMoveDOM=!1})),a.recalcSlides(),"auto"===h.slidesPerView?a.updateSlides():y&&(b.length>0&&x||w.length>0&&T)&&a.slides.forEach(((e,t)=>{a.grid.updateSlide(t,e,a.slides)})),h.watchSlidesProgress&&a.updateSlidesOffset(),i)if(b.length>0&&x){if(void 0===t){const e=a.slidesGrid[S],t=a.slidesGrid[S+C]-e;l?a.setTranslate(a.translate-t):(a.slideTo(S+Math.ceil(C),0,!1,!0),r&&(a.touchEventsData.startTranslate=a.touchEventsData.startTranslate-t,a.touchEventsData.currentTranslate=a.touchEventsData.currentTranslate-t))}else if(r){const e=y?b.length/h.grid.rows:b.length;a.slideTo(a.activeIndex+e,0,!1,!0),a.touchEventsData.currentTranslate=a.translate}}else if(w.length>0&&T)if(void 0===t){const e=a.slidesGrid[S],t=a.slidesGrid[S-E]-e;l?a.setTranslate(a.translate-t):(a.slideTo(S-E,0,!1,!0),r&&(a.touchEventsData.startTranslate=a.touchEventsData.startTranslate-t,a.touchEventsData.currentTranslate=a.touchEventsData.currentTranslate-t))}else{const e=y?w.length/h.grid.rows:w.length;a.slideTo(a.activeIndex-e,0,!1,!0)}if(a.allowSlidePrev=c,a.allowSlideNext=p,a.controller&&a.controller.control&&!o){const e={slideRealIndex:t,direction:s,setTranslate:r,activeSlideIndex:n,byController:!0};Array.isArray(a.controller.control)?a.controller.control.forEach((t=>{!t.destroyed&&t.params.loop&&t.loopFix({...e,slideTo:t.params.slidesPerView===h.slidesPerView&&i})})):a.controller.control instanceof a.constructor&&a.controller.control.params.loop&&a.controller.control.loopFix({...e,slideTo:a.controller.control.params.slidesPerView===h.slidesPerView&&i})}a.emit("loopFix")},loopDestroy:function(){const e=this,{params:t,slidesEl:i}=e;if(!t.loop||e.virtual&&e.params.virtual.enabled)return;e.recalcSlides();const s=[];e.slides.forEach((e=>{const t=void 0===e.swiperSlideIndex?1*e.getAttribute("data-swiper-slide-index"):e.swiperSlideIndex;s[t]=e})),e.slides.forEach((e=>{e.removeAttribute("data-swiper-slide-index")})),s.forEach((e=>{i.append(e)})),e.recalcSlides(),e.slideTo(e.realIndex,0)}};function Le(e,t,i){const s=U(),{params:r}=e,n=r.edgeSwipeDetection,o=r.edgeSwipeThreshold;return!n||!(i<=o||i>=s.innerWidth-o)||"prevent"===n&&(t.preventDefault(),!0)}function Pe(e){const t=this,i=Y();let s=e;s.originalEvent&&(s=s.originalEvent);const r=t.touchEventsData;if("pointerdown"===s.type){if(null!==r.pointerId&&r.pointerId!==s.pointerId)return;r.pointerId=s.pointerId}else"touchstart"===s.type&&1===s.targetTouches.length&&(r.touchId=s.targetTouches[0].identifier);if("touchstart"===s.type)return void Le(t,s,s.targetTouches[0].pageX);const{params:n,touches:o,enabled:l}=t;if(!l)return;if(!n.simulateTouch&&"mouse"===s.pointerType)return;if(t.animating&&n.preventInteractionOnTransition)return;!t.animating&&n.cssMode&&n.loop&&t.loopFix();let a=s.target;if("wrapper"===n.touchEventsTarget&&!function(e,t){const i=t.contains(e);if(!i&&t instanceof HTMLSlotElement)return[...t.assignedElements()].includes(e);return i}(a,t.wrapperEl))return;if("which"in s&&3===s.which)return;if("button"in s&&s.button>0)return;if(r.isTouched&&r.isMoved)return;const d=!!n.noSwipingClass&&""!==n.noSwipingClass,c=s.composedPath?s.composedPath():s.path;d&&s.target&&s.target.shadowRoot&&c&&(a=c[0]);const p=n.noSwipingSelector?n.noSwipingSelector:`.${n.noSwipingClass}`,u=!(!s.target||!s.target.shadowRoot);if(n.noSwiping&&(u?function(e,t){return void 0===t&&(t=this),function t(i){if(!i||i===Y()||i===U())return null;i.assignedSlot&&(i=i.assignedSlot);const s=i.closest(e);return s||i.getRootNode?s||t(i.getRootNode().host):null}(t)}(p,a):a.closest(p)))return void(t.allowClick=!0);if(n.swipeHandler&&!a.closest(n.swipeHandler))return;o.currentX=s.pageX,o.currentY=s.pageY;const h=o.currentX,g=o.currentY;if(!Le(t,s,h))return;Object.assign(r,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),o.startX=h,o.startY=g,r.touchStartTime=Z(),t.allowClick=!0,t.updateSize(),t.swipeDirection=void 0,n.threshold>0&&(r.allowThresholdMove=!1);let m=!0;a.matches(r.focusableElements)&&(m=!1,"SELECT"===a.nodeName&&(r.isTouched=!1)),i.activeElement&&i.activeElement.matches(r.focusableElements)&&i.activeElement!==a&&i.activeElement.blur();const f=m&&t.allowTouchMove&&n.touchStartPreventDefault;!n.touchStartForcePreventDefault&&!f||a.isContentEditable||s.preventDefault(),n.freeMode&&n.freeMode.enabled&&t.freeMode&&t.animating&&!n.cssMode&&t.freeMode.onTouchStart(),t.emit("touchStart",s)}function Oe(e){const t=Y(),i=this,s=i.touchEventsData,{params:r,touches:n,rtlTranslate:o,enabled:l}=i;if(!l)return;if(!r.simulateTouch&&"mouse"===e.pointerType)return;let a,d=e;if(d.originalEvent&&(d=d.originalEvent),"pointermove"===d.type){if(null!==s.touchId)return;if(d.pointerId!==s.pointerId)return}if("touchmove"===d.type){if(a=[...d.changedTouches].filter((e=>e.identifier===s.touchId))[0],!a||a.identifier!==s.touchId)return}else a=d;if(!s.isTouched)return void(s.startMoving&&s.isScrolling&&i.emit("touchMoveOpposite",d));const c=a.pageX,p=a.pageY;if(d.preventedByNestedSwiper)return n.startX=c,void(n.startY=p);if(!i.allowTouchMove)return d.target.matches(s.focusableElements)||(i.allowClick=!1),void(s.isTouched&&(Object.assign(n,{startX:c,startY:p,currentX:c,currentY:p}),s.touchStartTime=Z()));if(r.touchReleaseOnEdges&&!r.loop)if(i.isVertical()){if(p<n.startY&&i.translate<=i.maxTranslate()||p>n.startY&&i.translate>=i.minTranslate())return s.isTouched=!1,void(s.isMoved=!1)}else if(c<n.startX&&i.translate<=i.maxTranslate()||c>n.startX&&i.translate>=i.minTranslate())return;if(t.activeElement&&d.target===t.activeElement&&d.target.matches(s.focusableElements))return s.isMoved=!0,void(i.allowClick=!1);s.allowTouchCallbacks&&i.emit("touchMove",d),n.previousX=n.currentX,n.previousY=n.currentY,n.currentX=c,n.currentY=p;const u=n.currentX-n.startX,h=n.currentY-n.startY;if(i.params.threshold&&Math.sqrt(u**2+h**2)<i.params.threshold)return;if(void 0===s.isScrolling){let e;i.isHorizontal()&&n.currentY===n.startY||i.isVertical()&&n.currentX===n.startX?s.isScrolling=!1:u*u+h*h>=25&&(e=180*Math.atan2(Math.abs(h),Math.abs(u))/Math.PI,s.isScrolling=i.isHorizontal()?e>r.touchAngle:90-e>r.touchAngle)}if(s.isScrolling&&i.emit("touchMoveOpposite",d),void 0===s.startMoving&&(n.currentX===n.startX&&n.currentY===n.startY||(s.startMoving=!0)),s.isScrolling||"touchmove"===d.type&&s.preventTouchMoveFromPointerMove)return void(s.isTouched=!1);if(!s.startMoving)return;i.allowClick=!1,!r.cssMode&&d.cancelable&&d.preventDefault(),r.touchMoveStopPropagation&&!r.nested&&d.stopPropagation();let g=i.isHorizontal()?u:h,m=i.isHorizontal()?n.currentX-n.previousX:n.currentY-n.previousY;r.oneWayMovement&&(g=Math.abs(g)*(o?1:-1),m=Math.abs(m)*(o?1:-1)),n.diff=g,g*=r.touchRatio,o&&(g=-g,m=-m);const f=i.touchesDirection;i.swipeDirection=g>0?"prev":"next",i.touchesDirection=m>0?"prev":"next";const v=i.params.loop&&!r.cssMode,y="next"===i.touchesDirection&&i.allowSlideNext||"prev"===i.touchesDirection&&i.allowSlidePrev;if(!s.isMoved){if(v&&y&&i.loopFix({direction:i.swipeDirection}),s.startTranslate=i.getTranslate(),i.setTransition(0),i.animating){const e=new window.CustomEvent("transitionend",{bubbles:!0,cancelable:!0,detail:{bySwiperTouchMove:!0}});i.wrapperEl.dispatchEvent(e)}s.allowMomentumBounce=!1,!r.grabCursor||!0!==i.allowSlideNext&&!0!==i.allowSlidePrev||i.setGrabCursor(!0),i.emit("sliderFirstMove",d)}if((new Date).getTime(),s.isMoved&&s.allowThresholdMove&&f!==i.touchesDirection&&v&&y&&Math.abs(g)>=1)return Object.assign(n,{startX:c,startY:p,currentX:c,currentY:p,startTranslate:s.currentTranslate}),s.loopSwapReset=!0,void(s.startTranslate=s.currentTranslate);i.emit("sliderMove",d),s.isMoved=!0,s.currentTranslate=g+s.startTranslate;let b=!0,w=r.resistanceRatio;if(r.touchReleaseOnEdges&&(w=0),g>0?(v&&y&&s.allowThresholdMove&&s.currentTranslate>(r.centeredSlides?i.minTranslate()-i.slidesSizesGrid[i.activeIndex+1]-("auto"!==r.slidesPerView&&i.slides.length-r.slidesPerView>=2?i.slidesSizesGrid[i.activeIndex+1]+i.params.spaceBetween:0)-i.params.spaceBetween:i.minTranslate())&&i.loopFix({direction:"prev",setTranslate:!0,activeSlideIndex:0}),s.currentTranslate>i.minTranslate()&&(b=!1,r.resistance&&(s.currentTranslate=i.minTranslate()-1+(-i.minTranslate()+s.startTranslate+g)**w))):g<0&&(v&&y&&s.allowThresholdMove&&s.currentTranslate<(r.centeredSlides?i.maxTranslate()+i.slidesSizesGrid[i.slidesSizesGrid.length-1]+i.params.spaceBetween+("auto"!==r.slidesPerView&&i.slides.length-r.slidesPerView>=2?i.slidesSizesGrid[i.slidesSizesGrid.length-1]+i.params.spaceBetween:0):i.maxTranslate())&&i.loopFix({direction:"next",setTranslate:!0,activeSlideIndex:i.slides.length-("auto"===r.slidesPerView?i.slidesPerViewDynamic():Math.ceil(parseFloat(r.slidesPerView,10)))}),s.currentTranslate<i.maxTranslate()&&(b=!1,r.resistance&&(s.currentTranslate=i.maxTranslate()+1-(i.maxTranslate()-s.startTranslate-g)**w))),b&&(d.preventedByNestedSwiper=!0),!i.allowSlideNext&&"next"===i.swipeDirection&&s.currentTranslate<s.startTranslate&&(s.currentTranslate=s.startTranslate),!i.allowSlidePrev&&"prev"===i.swipeDirection&&s.currentTranslate>s.startTranslate&&(s.currentTranslate=s.startTranslate),i.allowSlidePrev||i.allowSlideNext||(s.currentTranslate=s.startTranslate),r.threshold>0){if(!(Math.abs(g)>r.threshold||s.allowThresholdMove))return void(s.currentTranslate=s.startTranslate);if(!s.allowThresholdMove)return s.allowThresholdMove=!0,n.startX=n.currentX,n.startY=n.currentY,s.currentTranslate=s.startTranslate,void(n.diff=i.isHorizontal()?n.currentX-n.startX:n.currentY-n.startY)}r.followFinger&&!r.cssMode&&((r.freeMode&&r.freeMode.enabled&&i.freeMode||r.watchSlidesProgress)&&(i.updateActiveIndex(),i.updateSlidesClasses()),r.freeMode&&r.freeMode.enabled&&i.freeMode&&i.freeMode.onTouchMove(),i.updateProgress(s.currentTranslate),i.setTranslate(s.currentTranslate))}function ke(e){const t=this,i=t.touchEventsData;let s,r=e;r.originalEvent&&(r=r.originalEvent);if("touchend"===r.type||"touchcancel"===r.type){if(s=[...r.changedTouches].filter((e=>e.identifier===i.touchId))[0],!s||s.identifier!==i.touchId)return}else{if(null!==i.touchId)return;if(r.pointerId!==i.pointerId)return;s=r}if(["pointercancel","pointerout","pointerleave","contextmenu"].includes(r.type)){if(!(["pointercancel","contextmenu"].includes(r.type)&&(t.browser.isSafari||t.browser.isWebView)))return}i.pointerId=null,i.touchId=null;const{params:n,touches:o,rtlTranslate:l,slidesGrid:a,enabled:d}=t;if(!d)return;if(!n.simulateTouch&&"mouse"===r.pointerType)return;if(i.allowTouchCallbacks&&t.emit("touchEnd",r),i.allowTouchCallbacks=!1,!i.isTouched)return i.isMoved&&n.grabCursor&&t.setGrabCursor(!1),i.isMoved=!1,void(i.startMoving=!1);n.grabCursor&&i.isMoved&&i.isTouched&&(!0===t.allowSlideNext||!0===t.allowSlidePrev)&&t.setGrabCursor(!1);const c=Z(),p=c-i.touchStartTime;if(t.allowClick){const e=r.path||r.composedPath&&r.composedPath();t.updateClickedSlide(e&&e[0]||r.target,e),t.emit("tap click",r),p<300&&c-i.lastClickTime<300&&t.emit("doubleTap doubleClick",r)}if(i.lastClickTime=Z(),K((()=>{t.destroyed||(t.allowClick=!0)})),!i.isTouched||!i.isMoved||!t.swipeDirection||0===o.diff&&!i.loopSwapReset||i.currentTranslate===i.startTranslate&&!i.loopSwapReset)return i.isTouched=!1,i.isMoved=!1,void(i.startMoving=!1);let u;if(i.isTouched=!1,i.isMoved=!1,i.startMoving=!1,u=n.followFinger?l?t.translate:-t.translate:-i.currentTranslate,n.cssMode)return;if(n.freeMode&&n.freeMode.enabled)return void t.freeMode.onTouchEnd({currentPos:u});const h=u>=-t.maxTranslate()&&!t.params.loop;let g=0,m=t.slidesSizesGrid[0];for(let e=0;e<a.length;e+=e<n.slidesPerGroupSkip?1:n.slidesPerGroup){const t=e<n.slidesPerGroupSkip-1?1:n.slidesPerGroup;void 0!==a[e+t]?(h||u>=a[e]&&u<a[e+t])&&(g=e,m=a[e+t]-a[e]):(h||u>=a[e])&&(g=e,m=a[a.length-1]-a[a.length-2])}let f=null,v=null;n.rewind&&(t.isBeginning?v=n.virtual&&n.virtual.enabled&&t.virtual?t.virtual.slides.length-1:t.slides.length-1:t.isEnd&&(f=0));const y=(u-a[g])/m,b=g<n.slidesPerGroupSkip-1?1:n.slidesPerGroup;if(p>n.longSwipesMs){if(!n.longSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&(y>=n.longSwipesRatio?t.slideTo(n.rewind&&t.isEnd?f:g+b):t.slideTo(g)),"prev"===t.swipeDirection&&(y>1-n.longSwipesRatio?t.slideTo(g+b):null!==v&&y<0&&Math.abs(y)>n.longSwipesRatio?t.slideTo(v):t.slideTo(g))}else{if(!n.shortSwipes)return void t.slideTo(t.activeIndex);t.navigation&&(r.target===t.navigation.nextEl||r.target===t.navigation.prevEl)?r.target===t.navigation.nextEl?t.slideTo(g+b):t.slideTo(g):("next"===t.swipeDirection&&t.slideTo(null!==f?f:g+b),"prev"===t.swipeDirection&&t.slideTo(null!==v?v:g))}}function Ae(){const e=this,{params:t,el:i}=e;if(i&&0===i.offsetWidth)return;t.breakpoints&&e.setBreakpoint();const{allowSlideNext:s,allowSlidePrev:r,snapGrid:n}=e,o=e.virtual&&e.params.virtual.enabled;e.allowSlideNext=!0,e.allowSlidePrev=!0,e.updateSize(),e.updateSlides(),e.updateSlidesClasses();const l=o&&t.loop;!("auto"===t.slidesPerView||t.slidesPerView>1)||!e.isEnd||e.isBeginning||e.params.centeredSlides||l?e.params.loop&&!o?e.slideToLoop(e.realIndex,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0):e.slideTo(e.slides.length-1,0,!1,!0),e.autoplay&&e.autoplay.running&&e.autoplay.paused&&(clearTimeout(e.autoplay.resizeTimeout),e.autoplay.resizeTimeout=setTimeout((()=>{e.autoplay&&e.autoplay.running&&e.autoplay.paused&&e.autoplay.resume()}),500)),e.allowSlidePrev=r,e.allowSlideNext=s,e.params.watchOverflow&&n!==e.snapGrid&&e.checkOverflow()}function ze(e){const t=this;t.enabled&&(t.allowClick||(t.params.preventClicks&&e.preventDefault(),t.params.preventClicksPropagation&&t.animating&&(e.stopPropagation(),e.stopImmediatePropagation())))}function De(){const e=this,{wrapperEl:t,rtlTranslate:i,enabled:s}=e;if(!s)return;let r;e.previousTranslate=e.translate,e.isHorizontal()?e.translate=-t.scrollLeft:e.translate=-t.scrollTop,0===e.translate&&(e.translate=0),e.updateActiveIndex(),e.updateSlidesClasses();const n=e.maxTranslate()-e.minTranslate();r=0===n?0:(e.translate-e.minTranslate())/n,r!==e.progress&&e.updateProgress(i?-e.translate:e.translate),e.emit("setTranslate",e.translate,!1)}function Ge(e){const t=this;we(t,e.target),t.params.cssMode||"auto"!==t.params.slidesPerView&&!t.params.autoHeight||t.update()}function _e(){const e=this;e.documentTouchHandlerProceeded||(e.documentTouchHandlerProceeded=!0,e.params.touchReleaseOnEdges&&(e.el.style.touchAction="auto"))}const Be=(e,t)=>{const i=Y(),{params:s,el:r,wrapperEl:n,device:o}=e,l=!!s.nested,a="on"===t?"addEventListener":"removeEventListener",d=t;r&&"string"!=typeof r&&(i[a]("touchstart",e.onDocumentTouchStart,{passive:!1,capture:l}),r[a]("touchstart",e.onTouchStart,{passive:!1}),r[a]("pointerdown",e.onTouchStart,{passive:!1}),i[a]("touchmove",e.onTouchMove,{passive:!1,capture:l}),i[a]("pointermove",e.onTouchMove,{passive:!1,capture:l}),i[a]("touchend",e.onTouchEnd,{passive:!0}),i[a]("pointerup",e.onTouchEnd,{passive:!0}),i[a]("pointercancel",e.onTouchEnd,{passive:!0}),i[a]("touchcancel",e.onTouchEnd,{passive:!0}),i[a]("pointerout",e.onTouchEnd,{passive:!0}),i[a]("pointerleave",e.onTouchEnd,{passive:!0}),i[a]("contextmenu",e.onTouchEnd,{passive:!0}),(s.preventClicks||s.preventClicksPropagation)&&r[a]("click",e.onClick,!0),s.cssMode&&n[a]("scroll",e.onScroll),s.updateOnWindowResize?e[d](o.ios||o.android?"resize orientationchange observerUpdate":"resize observerUpdate",Ae,!0):e[d]("observerUpdate",Ae,!0),r[a]("load",e.onLoad,{capture:!0}))};const Fe=(e,t)=>e.grid&&t.grid&&t.grid.rows>1;var $e={init:!0,direction:"horizontal",oneWayMovement:!1,swiperElementNodeName:"SWIPER-CONTAINER",touchEventsTarget:"wrapper",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,resizeObserver:!0,nested:!1,createElements:!1,eventsPrefix:"swiper",enabled:!0,focusableElements:"input, select, option, textarea, button, video, label",width:null,height:null,preventInteractionOnTransition:!1,userAgent:null,url:null,edgeSwipeDetection:!1,edgeSwipeThreshold:20,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,breakpointsBase:"window",spaceBetween:0,slidesPerView:1,slidesPerGroup:1,slidesPerGroupSkip:0,slidesPerGroupAuto:!1,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!0,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:5,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,loop:!1,loopAddBlankSlides:!0,loopAdditionalSlides:0,loopPreventsSliding:!0,rewind:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,maxBackfaceHiddenSlides:10,containerModifierClass:"swiper-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-blank",slideActiveClass:"swiper-slide-active",slideVisibleClass:"swiper-slide-visible",slideFullyVisibleClass:"swiper-slide-fully-visible",slideNextClass:"swiper-slide-next",slidePrevClass:"swiper-slide-prev",wrapperClass:"swiper-wrapper",lazyPreloaderClass:"swiper-lazy-preloader",lazyPreloadPrevNext:0,runCallbacksOnInit:!0,_emitClasses:!1};function He(e,t){return function(i){void 0===i&&(i={});const s=Object.keys(i)[0],r=i[s];"object"==typeof r&&null!==r?(!0===e[s]&&(e[s]={enabled:!0}),"navigation"===s&&e[s]&&e[s].enabled&&!e[s].prevEl&&!e[s].nextEl&&(e[s].auto=!0),["pagination","scrollbar"].indexOf(s)>=0&&e[s]&&e[s].enabled&&!e[s].el&&(e[s].auto=!0),s in e&&"enabled"in r?("object"!=typeof e[s]||"enabled"in e[s]||(e[s].enabled=!0),e[s]||(e[s]={enabled:!1}),ee(t,i)):ee(t,i)):ee(t,i)}}const Ne={eventsEmitter:ve,update:xe,translate:Ce,transition:{setTransition:function(e,t){const i=this;i.params.cssMode||(i.wrapperEl.style.transitionDuration=`${e}ms`,i.wrapperEl.style.transitionDelay=0===e?"0ms":""),i.emit("setTransition",e,t)},transitionStart:function(e,t){void 0===e&&(e=!0);const i=this,{params:s}=i;s.cssMode||(s.autoHeight&&i.updateAutoHeight(),Ee({swiper:i,runCallbacks:e,direction:t,step:"Start"}))},transitionEnd:function(e,t){void 0===e&&(e=!0);const i=this,{params:s}=i;i.animating=!1,s.cssMode||(i.setTransition(0),Ee({swiper:i,runCallbacks:e,direction:t,step:"End"}))}},slide:Ie,loop:Me,grabCursor:{setGrabCursor:function(e){const t=this;if(!t.params.simulateTouch||t.params.watchOverflow&&t.isLocked||t.params.cssMode)return;const i="container"===t.params.touchEventsTarget?t.el:t.wrapperEl;t.isElement&&(t.__preventObserver__=!0),i.style.cursor="move",i.style.cursor=e?"grabbing":"grab",t.isElement&&requestAnimationFrame((()=>{t.__preventObserver__=!1}))},unsetGrabCursor:function(){const e=this;e.params.watchOverflow&&e.isLocked||e.params.cssMode||(e.isElement&&(e.__preventObserver__=!0),e["container"===e.params.touchEventsTarget?"el":"wrapperEl"].style.cursor="",e.isElement&&requestAnimationFrame((()=>{e.__preventObserver__=!1})))}},events:{attachEvents:function(){const e=this,{params:t}=e;e.onTouchStart=Pe.bind(e),e.onTouchMove=Oe.bind(e),e.onTouchEnd=ke.bind(e),e.onDocumentTouchStart=_e.bind(e),t.cssMode&&(e.onScroll=De.bind(e)),e.onClick=ze.bind(e),e.onLoad=Ge.bind(e),Be(e,"on")},detachEvents:function(){Be(this,"off")}},breakpoints:{setBreakpoint:function(){const e=this,{realIndex:t,initialized:i,params:s,el:r}=e,n=s.breakpoints;if(!n||n&&0===Object.keys(n).length)return;const o=e.getBreakpoint(n,e.params.breakpointsBase,e.el);if(!o||e.currentBreakpoint===o)return;const l=(o in n?n[o]:void 0)||e.originalParams,a=Fe(e,s),d=Fe(e,l),c=e.params.grabCursor,p=l.grabCursor,u=s.enabled;a&&!d?(r.classList.remove(`${s.containerModifierClass}grid`,`${s.containerModifierClass}grid-column`),e.emitContainerClasses()):!a&&d&&(r.classList.add(`${s.containerModifierClass}grid`),(l.grid.fill&&"column"===l.grid.fill||!l.grid.fill&&"column"===s.grid.fill)&&r.classList.add(`${s.containerModifierClass}grid-column`),e.emitContainerClasses()),c&&!p?e.unsetGrabCursor():!c&&p&&e.setGrabCursor(),["navigation","pagination","scrollbar"].forEach((t=>{if(void 0===l[t])return;const i=s[t]&&s[t].enabled,r=l[t]&&l[t].enabled;i&&!r&&e[t].disable(),!i&&r&&e[t].enable()}));const h=l.direction&&l.direction!==s.direction,g=s.loop&&(l.slidesPerView!==s.slidesPerView||h),m=s.loop;h&&i&&e.changeDirection(),ee(e.params,l);const f=e.params.enabled,v=e.params.loop;Object.assign(e,{allowTouchMove:e.params.allowTouchMove,allowSlideNext:e.params.allowSlideNext,allowSlidePrev:e.params.allowSlidePrev}),u&&!f?e.disable():!u&&f&&e.enable(),e.currentBreakpoint=o,e.emit("_beforeBreakpoint",l),i&&(g?(e.loopDestroy(),e.loopCreate(t),e.updateSlides()):!m&&v?(e.loopCreate(t),e.updateSlides()):m&&!v&&e.loopDestroy()),e.emit("breakpoint",l)},getBreakpoint:function(e,t,i){if(void 0===t&&(t="window"),!e||"container"===t&&!i)return;let s=!1;const r=U(),n="window"===t?r.innerHeight:i.clientHeight,o=Object.keys(e).map((e=>{if("string"==typeof e&&0===e.indexOf("@")){const t=parseFloat(e.substr(1));return{value:n*t,point:e}}return{value:e,point:e}}));o.sort(((e,t)=>parseInt(e.value,10)-parseInt(t.value,10)));for(let e=0;e<o.length;e+=1){const{point:n,value:l}=o[e];"window"===t?r.matchMedia(`(min-width: ${l}px)`).matches&&(s=n):l<=i.clientWidth&&(s=n)}return s||"max"}},checkOverflow:{checkOverflow:function(){const e=this,{isLocked:t,params:i}=e,{slidesOffsetBefore:s}=i;if(s){const t=e.slides.length-1,i=e.slidesGrid[t]+e.slidesSizesGrid[t]+2*s;e.isLocked=e.size>i}else e.isLocked=1===e.snapGrid.length;!0===i.allowSlideNext&&(e.allowSlideNext=!e.isLocked),!0===i.allowSlidePrev&&(e.allowSlidePrev=!e.isLocked),t&&t!==e.isLocked&&(e.isEnd=!1),t!==e.isLocked&&e.emit(e.isLocked?"lock":"unlock")}},classes:{addClasses:function(){const e=this,{classNames:t,params:i,rtl:s,el:r,device:n}=e,o=function(e,t){const i=[];return e.forEach((e=>{"object"==typeof e?Object.keys(e).forEach((s=>{e[s]&&i.push(t+s)})):"string"==typeof e&&i.push(t+e)})),i}(["initialized",i.direction,{"free-mode":e.params.freeMode&&i.freeMode.enabled},{autoheight:i.autoHeight},{rtl:s},{grid:i.grid&&i.grid.rows>1},{"grid-column":i.grid&&i.grid.rows>1&&"column"===i.grid.fill},{android:n.android},{ios:n.ios},{"css-mode":i.cssMode},{centered:i.cssMode&&i.centeredSlides},{"watch-progress":i.watchSlidesProgress}],i.containerModifierClass);t.push(...o),r.classList.add(...t),e.emitContainerClasses()},removeClasses:function(){const{el:e,classNames:t}=this;e&&"string"!=typeof e&&(e.classList.remove(...t),this.emitContainerClasses())}}},Ve={};class je{constructor(){let e,t;for(var i=arguments.length,s=new Array(i),r=0;r<i;r++)s[r]=arguments[r];1===s.length&&s[0].constructor&&"Object"===Object.prototype.toString.call(s[0]).slice(8,-1)?t=s[0]:[e,t]=s,t||(t={}),t=ee({},t),e&&!t.el&&(t.el=e);const n=Y();if(t.el&&"string"==typeof t.el&&n.querySelectorAll(t.el).length>1){const e=[];return n.querySelectorAll(t.el).forEach((i=>{const s=ee({},t,{el:i});e.push(new je(s))})),e}const o=this;o.__swiper__=!0,o.support=ge(),o.device=me({userAgent:t.userAgent}),o.browser=fe(),o.eventsListeners={},o.eventsAnyListeners=[],o.modules=[...o.__modules__],t.modules&&Array.isArray(t.modules)&&o.modules.push(...t.modules);const l={};o.modules.forEach((e=>{e({params:t,swiper:o,extendParams:He(t,l),on:o.on.bind(o),once:o.once.bind(o),off:o.off.bind(o),emit:o.emit.bind(o)})}));const a=ee({},$e,l);return o.params=ee({},a,Ve,t),o.originalParams=ee({},o.params),o.passedParams=ee({},t),o.params&&o.params.on&&Object.keys(o.params.on).forEach((e=>{o.on(e,o.params.on[e])})),o.params&&o.params.onAny&&o.onAny(o.params.onAny),Object.assign(o,{enabled:o.params.enabled,el:e,classNames:[],slides:[],slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:()=>"horizontal"===o.params.direction,isVertical:()=>"vertical"===o.params.direction,activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,cssOverflowAdjustment(){return Math.trunc(this.translate/2**23)*2**23},allowSlideNext:o.params.allowSlideNext,allowSlidePrev:o.params.allowSlidePrev,touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,focusableElements:o.params.focusableElements,lastClickTime:0,clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,startMoving:void 0,pointerId:null,touchId:null},allowClick:!0,allowTouchMove:o.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),o.emit("_swiper"),o.params.init&&o.init(),o}getDirectionLabel(e){return this.isHorizontal()?e:{width:"height","margin-top":"margin-left","margin-bottom ":"margin-right","margin-left":"margin-top","margin-right":"margin-bottom","padding-left":"padding-top","padding-right":"padding-bottom",marginRight:"marginBottom"}[e]}getSlideIndex(e){const{slidesEl:t,params:i}=this,s=le(se(t,`.${i.slideClass}, swiper-slide`)[0]);return le(e)-s}getSlideIndexByData(e){return this.getSlideIndex(this.slides.filter((t=>1*t.getAttribute("data-swiper-slide-index")===e))[0])}recalcSlides(){const{slidesEl:e,params:t}=this;this.slides=se(e,`.${t.slideClass}, swiper-slide`)}enable(){const e=this;e.enabled||(e.enabled=!0,e.params.grabCursor&&e.setGrabCursor(),e.emit("enable"))}disable(){const e=this;e.enabled&&(e.enabled=!1,e.params.grabCursor&&e.unsetGrabCursor(),e.emit("disable"))}setProgress(e,t){const i=this;e=Math.min(Math.max(e,0),1);const s=i.minTranslate(),r=(i.maxTranslate()-s)*e+s;i.translateTo(r,void 0===t?0:t),i.updateActiveIndex(),i.updateSlidesClasses()}emitContainerClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const t=e.el.className.split(" ").filter((t=>0===t.indexOf("swiper")||0===t.indexOf(e.params.containerModifierClass)));e.emit("_containerClasses",t.join(" "))}getSlideClasses(e){const t=this;return t.destroyed?"":e.className.split(" ").filter((e=>0===e.indexOf("swiper-slide")||0===e.indexOf(t.params.slideClass))).join(" ")}emitSlidesClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const t=[];e.slides.forEach((i=>{const s=e.getSlideClasses(i);t.push({slideEl:i,classNames:s}),e.emit("_slideClass",i,s)})),e.emit("_slideClasses",t)}slidesPerViewDynamic(e,t){void 0===e&&(e="current"),void 0===t&&(t=!1);const{params:i,slides:s,slidesGrid:r,slidesSizesGrid:n,size:o,activeIndex:l}=this;let a=1;if("number"==typeof i.slidesPerView)return i.slidesPerView;if(i.centeredSlides){let e,t=s[l]?Math.ceil(s[l].swiperSlideSize):0;for(let i=l+1;i<s.length;i+=1)s[i]&&!e&&(t+=Math.ceil(s[i].swiperSlideSize),a+=1,t>o&&(e=!0));for(let i=l-1;i>=0;i-=1)s[i]&&!e&&(t+=s[i].swiperSlideSize,a+=1,t>o&&(e=!0))}else if("current"===e)for(let e=l+1;e<s.length;e+=1){(t?r[e]+n[e]-r[l]<o:r[e]-r[l]<o)&&(a+=1)}else for(let e=l-1;e>=0;e-=1){r[l]-r[e]<o&&(a+=1)}return a}update(){const e=this;if(!e||e.destroyed)return;const{snapGrid:t,params:i}=e;function s(){const t=e.rtlTranslate?-1*e.translate:e.translate,i=Math.min(Math.max(t,e.maxTranslate()),e.minTranslate());e.setTranslate(i),e.updateActiveIndex(),e.updateSlidesClasses()}let r;if(i.breakpoints&&e.setBreakpoint(),[...e.el.querySelectorAll('[loading="lazy"]')].forEach((t=>{t.complete&&we(e,t)})),e.updateSize(),e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),i.freeMode&&i.freeMode.enabled&&!i.cssMode)s(),i.autoHeight&&e.updateAutoHeight();else{if(("auto"===i.slidesPerView||i.slidesPerView>1)&&e.isEnd&&!i.centeredSlides){const t=e.virtual&&i.virtual.enabled?e.virtual.slides:e.slides;r=e.slideTo(t.length-1,0,!1,!0)}else r=e.slideTo(e.activeIndex,0,!1,!0);r||s()}i.watchOverflow&&t!==e.snapGrid&&e.checkOverflow(),e.emit("update")}changeDirection(e,t){void 0===t&&(t=!0);const i=this,s=i.params.direction;return e||(e="horizontal"===s?"vertical":"horizontal"),e===s||"horizontal"!==e&&"vertical"!==e||(i.el.classList.remove(`${i.params.containerModifierClass}${s}`),i.el.classList.add(`${i.params.containerModifierClass}${e}`),i.emitContainerClasses(),i.params.direction=e,i.slides.forEach((t=>{"vertical"===e?t.style.width="":t.style.height=""})),i.emit("changeDirection"),t&&i.update()),i}changeLanguageDirection(e){const t=this;t.rtl&&"rtl"===e||!t.rtl&&"ltr"===e||(t.rtl="rtl"===e,t.rtlTranslate="horizontal"===t.params.direction&&t.rtl,t.rtl?(t.el.classList.add(`${t.params.containerModifierClass}rtl`),t.el.dir="rtl"):(t.el.classList.remove(`${t.params.containerModifierClass}rtl`),t.el.dir="ltr"),t.update())}mount(e){const t=this;if(t.mounted)return!0;let i=e||t.params.el;if("string"==typeof i&&(i=document.querySelector(i)),!i)return!1;i.swiper=t,i.parentNode&&i.parentNode.host&&i.parentNode.host.nodeName===t.params.swiperElementNodeName.toUpperCase()&&(t.isElement=!0);const s=()=>`.${(t.params.wrapperClass||"").trim().split(" ").join(".")}`;let r=(()=>{if(i&&i.shadowRoot&&i.shadowRoot.querySelector){return i.shadowRoot.querySelector(s())}return se(i,s())[0]})();return!r&&t.params.createElements&&(r=ne("div",t.params.wrapperClass),i.append(r),se(i,`.${t.params.slideClass}`).forEach((e=>{r.append(e)}))),Object.assign(t,{el:i,wrapperEl:r,slidesEl:t.isElement&&!i.parentNode.host.slideSlots?i.parentNode.host:r,hostEl:t.isElement?i.parentNode.host:i,mounted:!0,rtl:"rtl"===i.dir.toLowerCase()||"rtl"===oe(i,"direction"),rtlTranslate:"horizontal"===t.params.direction&&("rtl"===i.dir.toLowerCase()||"rtl"===oe(i,"direction")),wrongRTL:"-webkit-box"===oe(r,"display")}),!0}init(e){const t=this;if(t.initialized)return t;if(!1===t.mount(e))return t;t.emit("beforeInit"),t.params.breakpoints&&t.setBreakpoint(),t.addClasses(),t.updateSize(),t.updateSlides(),t.params.watchOverflow&&t.checkOverflow(),t.params.grabCursor&&t.enabled&&t.setGrabCursor(),t.params.loop&&t.virtual&&t.params.virtual.enabled?t.slideTo(t.params.initialSlide+t.virtual.slidesBefore,0,t.params.runCallbacksOnInit,!1,!0):t.slideTo(t.params.initialSlide,0,t.params.runCallbacksOnInit,!1,!0),t.params.loop&&t.loopCreate(),t.attachEvents();const i=[...t.el.querySelectorAll('[loading="lazy"]')];return t.isElement&&i.push(...t.hostEl.querySelectorAll('[loading="lazy"]')),i.forEach((e=>{e.complete?we(t,e):e.addEventListener("load",(e=>{we(t,e.target)}))})),Te(t),t.initialized=!0,Te(t),t.emit("init"),t.emit("afterInit"),t}destroy(e,t){void 0===e&&(e=!0),void 0===t&&(t=!0);const i=this,{params:s,el:r,wrapperEl:n,slides:o}=i;return void 0===i.params||i.destroyed||(i.emit("beforeDestroy"),i.initialized=!1,i.detachEvents(),s.loop&&i.loopDestroy(),t&&(i.removeClasses(),r&&"string"!=typeof r&&r.removeAttribute("style"),n&&n.removeAttribute("style"),o&&o.length&&o.forEach((e=>{e.classList.remove(s.slideVisibleClass,s.slideFullyVisibleClass,s.slideActiveClass,s.slideNextClass,s.slidePrevClass),e.removeAttribute("style"),e.removeAttribute("data-swiper-slide-index")}))),i.emit("destroy"),Object.keys(i.eventsListeners).forEach((e=>{i.off(e)})),!1!==e&&(i.el&&"string"!=typeof i.el&&(i.el.swiper=null),function(e){const t=e;Object.keys(t).forEach((e=>{try{t[e]=null}catch(e){}try{delete t[e]}catch(e){}}))}(i)),i.destroyed=!0),null}static extendDefaults(e){ee(Ve,e)}static get extendedDefaults(){return Ve}static get defaults(){return $e}static installModule(e){je.prototype.__modules__||(je.prototype.__modules__=[]);const t=je.prototype.__modules__;"function"==typeof e&&t.indexOf(e)<0&&t.push(e)}static use(e){return Array.isArray(e)?(e.forEach((e=>je.installModule(e))),je):(je.installModule(e),je)}}function Re(e){return void 0===e&&(e=""),`.${e.trim().replace(/([\.:!+\/])/g,"\\$1").replace(/ /g,".")}`}Object.keys(Ne).forEach((e=>{Object.keys(Ne[e]).forEach((t=>{je.prototype[t]=Ne[e][t]}))})),je.use([function(e){let{swiper:t,on:i,emit:s}=e;const r=U();let n=null,o=null;const l=()=>{t&&!t.destroyed&&t.initialized&&(s("beforeResize"),s("resize"))},a=()=>{t&&!t.destroyed&&t.initialized&&s("orientationchange")};i("init",(()=>{t.params.resizeObserver&&void 0!==r.ResizeObserver?t&&!t.destroyed&&t.initialized&&(n=new ResizeObserver((e=>{o=r.requestAnimationFrame((()=>{const{width:i,height:s}=t;let r=i,n=s;e.forEach((e=>{let{contentBoxSize:i,contentRect:s,target:o}=e;o&&o!==t.el||(r=s?s.width:(i[0]||i).inlineSize,n=s?s.height:(i[0]||i).blockSize)})),r===i&&n===s||l()}))})),n.observe(t.el)):(r.addEventListener("resize",l),r.addEventListener("orientationchange",a))})),i("destroy",(()=>{o&&r.cancelAnimationFrame(o),n&&n.unobserve&&t.el&&(n.unobserve(t.el),n=null),r.removeEventListener("resize",l),r.removeEventListener("orientationchange",a)}))},function(e){let{swiper:t,extendParams:i,on:s,emit:r}=e;const n=[],o=U(),l=function(e,i){void 0===i&&(i={});const s=new(o.MutationObserver||o.WebkitMutationObserver)((e=>{if(t.__preventObserver__)return;if(1===e.length)return void r("observerUpdate",e[0]);const i=function(){r("observerUpdate",e[0])};o.requestAnimationFrame?o.requestAnimationFrame(i):o.setTimeout(i,0)}));s.observe(e,{attributes:void 0===i.attributes||i.attributes,childList:t.isElement||(void 0===i.childList||i).childList,characterData:void 0===i.characterData||i.characterData}),n.push(s)};i({observer:!1,observeParents:!1,observeSlideChildren:!1}),s("init",(()=>{if(t.params.observer){if(t.params.observeParents){const e=ae(t.hostEl);for(let t=0;t<e.length;t+=1)l(e[t])}l(t.hostEl,{childList:t.params.observeSlideChildren}),l(t.wrapperEl,{attributes:!1})}})),s("destroy",(()=>{n.forEach((e=>{e.disconnect()})),n.splice(0,n.length)}))}]),r.e(822).then(r.bind(r,4822)),document.querySelector(".feed-chapter__bg-swiper")&&new je(".feed-chapter__bg-swiper",{modules:[function(e){let{swiper:t,extendParams:i,on:s,emit:r}=e;const n="swiper-pagination";let o;i({pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:e=>e,formatFractionTotal:e=>e,bulletClass:`${n}-bullet`,bulletActiveClass:`${n}-bullet-active`,modifierClass:`${n}-`,currentClass:`${n}-current`,totalClass:`${n}-total`,hiddenClass:`${n}-hidden`,progressbarFillClass:`${n}-progressbar-fill`,progressbarOppositeClass:`${n}-progressbar-opposite`,clickableClass:`${n}-clickable`,lockClass:`${n}-lock`,horizontalClass:`${n}-horizontal`,verticalClass:`${n}-vertical`,paginationDisabledClass:`${n}-disabled`}}),t.pagination={el:null,bullets:[]};let l=0;function a(){return!t.params.pagination.el||!t.pagination.el||Array.isArray(t.pagination.el)&&0===t.pagination.el.length}function d(e,i){const{bulletActiveClass:s}=t.params.pagination;e&&(e=e[("prev"===i?"previous":"next")+"ElementSibling"])&&(e.classList.add(`${s}-${i}`),(e=e[("prev"===i?"previous":"next")+"ElementSibling"])&&e.classList.add(`${s}-${i}-${i}`))}function c(e){const i=e.target.closest(Re(t.params.pagination.bulletClass));if(!i)return;e.preventDefault();const s=le(i)*t.params.slidesPerGroup;if(t.params.loop){if(t.realIndex===s)return;t.slideToLoop(s)}else t.slideTo(s)}function p(){const e=t.rtl,i=t.params.pagination;if(a())return;let s,n,c=t.pagination.el;c=ce(c);const p=t.virtual&&t.params.virtual.enabled?t.virtual.slides.length:t.slides.length,u=t.params.loop?Math.ceil(p/t.params.slidesPerGroup):t.snapGrid.length;if(t.params.loop?(n=t.previousRealIndex||0,s=t.params.slidesPerGroup>1?Math.floor(t.realIndex/t.params.slidesPerGroup):t.realIndex):void 0!==t.snapIndex?(s=t.snapIndex,n=t.previousSnapIndex):(n=t.previousIndex||0,s=t.activeIndex||0),"bullets"===i.type&&t.pagination.bullets&&t.pagination.bullets.length>0){const r=t.pagination.bullets;let a,p,u;if(i.dynamicBullets&&(o=de(r[0],t.isHorizontal()?"width":"height",!0),c.forEach((e=>{e.style[t.isHorizontal()?"width":"height"]=o*(i.dynamicMainBullets+4)+"px"})),i.dynamicMainBullets>1&&void 0!==n&&(l+=s-(n||0),l>i.dynamicMainBullets-1?l=i.dynamicMainBullets-1:l<0&&(l=0)),a=Math.max(s-l,0),p=a+(Math.min(r.length,i.dynamicMainBullets)-1),u=(p+a)/2),r.forEach((e=>{const t=[...["","-next","-next-next","-prev","-prev-prev","-main"].map((e=>`${i.bulletActiveClass}${e}`))].map((e=>"string"==typeof e&&e.includes(" ")?e.split(" "):e)).flat();e.classList.remove(...t)})),c.length>1)r.forEach((e=>{const r=le(e);r===s?e.classList.add(...i.bulletActiveClass.split(" ")):t.isElement&&e.setAttribute("part","bullet"),i.dynamicBullets&&(r>=a&&r<=p&&e.classList.add(...`${i.bulletActiveClass}-main`.split(" ")),r===a&&d(e,"prev"),r===p&&d(e,"next"))}));else{const e=r[s];if(e&&e.classList.add(...i.bulletActiveClass.split(" ")),t.isElement&&r.forEach(((e,t)=>{e.setAttribute("part",t===s?"bullet-active":"bullet")})),i.dynamicBullets){const e=r[a],t=r[p];for(let e=a;e<=p;e+=1)r[e]&&r[e].classList.add(...`${i.bulletActiveClass}-main`.split(" "));d(e,"prev"),d(t,"next")}}if(i.dynamicBullets){const s=Math.min(r.length,i.dynamicMainBullets+4),n=(o*s-o)/2-u*o,l=e?"right":"left";r.forEach((e=>{e.style[t.isHorizontal()?l:"top"]=`${n}px`}))}}c.forEach(((e,n)=>{if("fraction"===i.type&&(e.querySelectorAll(Re(i.currentClass)).forEach((e=>{e.textContent=i.formatFractionCurrent(s+1)})),e.querySelectorAll(Re(i.totalClass)).forEach((e=>{e.textContent=i.formatFractionTotal(u)}))),"progressbar"===i.type){let r;r=i.progressbarOpposite?t.isHorizontal()?"vertical":"horizontal":t.isHorizontal()?"horizontal":"vertical";const n=(s+1)/u;let o=1,l=1;"horizontal"===r?o=n:l=n,e.querySelectorAll(Re(i.progressbarFillClass)).forEach((e=>{e.style.transform=`translate3d(0,0,0) scaleX(${o}) scaleY(${l})`,e.style.transitionDuration=`${t.params.speed}ms`}))}"custom"===i.type&&i.renderCustom?(e.innerHTML=i.renderCustom(t,s+1,u),0===n&&r("paginationRender",e)):(0===n&&r("paginationRender",e),r("paginationUpdate",e)),t.params.watchOverflow&&t.enabled&&e.classList[t.isLocked?"add":"remove"](i.lockClass)}))}function u(){const e=t.params.pagination;if(a())return;const i=t.virtual&&t.params.virtual.enabled?t.virtual.slides.length:t.grid&&t.params.grid.rows>1?t.slides.length/Math.ceil(t.params.grid.rows):t.slides.length;let s=t.pagination.el;s=ce(s);let n="";if("bullets"===e.type){let s=t.params.loop?Math.ceil(i/t.params.slidesPerGroup):t.snapGrid.length;t.params.freeMode&&t.params.freeMode.enabled&&s>i&&(s=i);for(let i=0;i<s;i+=1)e.renderBullet?n+=e.renderBullet.call(t,i,e.bulletClass):n+=`<${e.bulletElement} ${t.isElement?'part="bullet"':""} class="${e.bulletClass}"></${e.bulletElement}>`}"fraction"===e.type&&(n=e.renderFraction?e.renderFraction.call(t,e.currentClass,e.totalClass):`<span class="${e.currentClass}"></span> / <span class="${e.totalClass}"></span>`),"progressbar"===e.type&&(n=e.renderProgressbar?e.renderProgressbar.call(t,e.progressbarFillClass):`<span class="${e.progressbarFillClass}"></span>`),t.pagination.bullets=[],s.forEach((i=>{"custom"!==e.type&&(i.innerHTML=n||""),"bullets"===e.type&&t.pagination.bullets.push(...i.querySelectorAll(Re(e.bulletClass)))})),"custom"!==e.type&&r("paginationRender",s[0])}function h(){t.params.pagination=function(e,t,i,s){return e.params.createElements&&Object.keys(s).forEach((r=>{if(!i[r]&&!0===i.auto){let n=se(e.el,`.${s[r]}`)[0];n||(n=ne("div",s[r]),n.className=s[r],e.el.append(n)),i[r]=n,t[r]=n}})),i}(t,t.originalParams.pagination,t.params.pagination,{el:"swiper-pagination"});const e=t.params.pagination;if(!e.el)return;let i;"string"==typeof e.el&&t.isElement&&(i=t.el.querySelector(e.el)),i||"string"!=typeof e.el||(i=[...document.querySelectorAll(e.el)]),i||(i=e.el),i&&0!==i.length&&(t.params.uniqueNavElements&&"string"==typeof e.el&&Array.isArray(i)&&i.length>1&&(i=[...t.el.querySelectorAll(e.el)],i.length>1&&(i=i.filter((e=>ae(e,".swiper")[0]===t.el))[0])),Array.isArray(i)&&1===i.length&&(i=i[0]),Object.assign(t.pagination,{el:i}),i=ce(i),i.forEach((i=>{"bullets"===e.type&&e.clickable&&i.classList.add(...(e.clickableClass||"").split(" ")),i.classList.add(e.modifierClass+e.type),i.classList.add(t.isHorizontal()?e.horizontalClass:e.verticalClass),"bullets"===e.type&&e.dynamicBullets&&(i.classList.add(`${e.modifierClass}${e.type}-dynamic`),l=0,e.dynamicMainBullets<1&&(e.dynamicMainBullets=1)),"progressbar"===e.type&&e.progressbarOpposite&&i.classList.add(e.progressbarOppositeClass),e.clickable&&i.addEventListener("click",c),t.enabled||i.classList.add(e.lockClass)})))}function g(){const e=t.params.pagination;if(a())return;let i=t.pagination.el;i&&(i=ce(i),i.forEach((i=>{i.classList.remove(e.hiddenClass),i.classList.remove(e.modifierClass+e.type),i.classList.remove(t.isHorizontal()?e.horizontalClass:e.verticalClass),e.clickable&&(i.classList.remove(...(e.clickableClass||"").split(" ")),i.removeEventListener("click",c))}))),t.pagination.bullets&&t.pagination.bullets.forEach((t=>t.classList.remove(...e.bulletActiveClass.split(" "))))}s("changeDirection",(()=>{if(!t.pagination||!t.pagination.el)return;const e=t.params.pagination;let{el:i}=t.pagination;i=ce(i),i.forEach((i=>{i.classList.remove(e.horizontalClass,e.verticalClass),i.classList.add(t.isHorizontal()?e.horizontalClass:e.verticalClass)}))})),s("init",(()=>{!1===t.params.pagination.enabled?m():(h(),u(),p())})),s("activeIndexChange",(()=>{void 0===t.snapIndex&&p()})),s("snapIndexChange",(()=>{p()})),s("snapGridLengthChange",(()=>{u(),p()})),s("destroy",(()=>{g()})),s("enable disable",(()=>{let{el:e}=t.pagination;e&&(e=ce(e),e.forEach((e=>e.classList[t.enabled?"remove":"add"](t.params.pagination.lockClass))))})),s("lock unlock",(()=>{p()})),s("click",((e,i)=>{const s=i.target,n=ce(t.pagination.el);if(t.params.pagination.el&&t.params.pagination.hideOnClick&&n&&n.length>0&&!s.classList.contains(t.params.pagination.bulletClass)){if(t.navigation&&(t.navigation.nextEl&&s===t.navigation.nextEl||t.navigation.prevEl&&s===t.navigation.prevEl))return;const e=n[0].classList.contains(t.params.pagination.hiddenClass);r(!0===e?"paginationShow":"paginationHide"),n.forEach((e=>e.classList.toggle(t.params.pagination.hiddenClass)))}}));const m=()=>{t.el.classList.add(t.params.pagination.paginationDisabledClass);let{el:e}=t.pagination;e&&(e=ce(e),e.forEach((e=>e.classList.add(t.params.pagination.paginationDisabledClass)))),g()};Object.assign(t.pagination,{enable:()=>{t.el.classList.remove(t.params.pagination.paginationDisabledClass);let{el:e}=t.pagination;e&&(e=ce(e),e.forEach((e=>e.classList.remove(t.params.pagination.paginationDisabledClass)))),h(),u(),p()},disable:m,render:u,update:p,init:h,destroy:g})}],loop:!0,pagination:{el:".feed-chapter__pagination",type:"bullets",clickable:!0}}),document.querySelector(".feed-chapter__images-swiper")&&new je(".feed-chapter__images-swiper",{loop:!0,slidesPerView:"auto",spaceBetween:window.innerWidth>768?17:8,freemode:!0})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,