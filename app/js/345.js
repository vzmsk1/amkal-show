/*! For license information please see 345.js.LICENSE.txt */
"use strict";(self.webpackChunkwebpack_setup=self.webpackChunkwebpack_setup||[]).push([[345],{6575:(t,e,i)=>{function n(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}i.d(e,{u:()=>ai});var r,o,s,l,a,c,h,u,d,f,p,v,m,g=function(){return r||"undefined"!=typeof window&&(r=window.gsap)&&r.registerPlugin&&r},y=1,b=[],w=[],x=[],S=Date.now,k=function(t,e){return e},T=function(t,e){return~x.indexOf(t)&&x[x.indexOf(t)+1][e]},E=function(t){return!!~f.indexOf(t)},_=function(t,e,i,n,r){return t.addEventListener(e,i,{passive:!1!==n,capture:!!r})},O=function(t,e,i,n){return t.removeEventListener(e,i,!!n)},A="scrollLeft",C="scrollTop",M=function(){return p&&p.isPressed||w.cache++},D=function(t,e){var i=function i(n){if(n||0===n){y&&(s.history.scrollRestoration="manual");var r=p&&p.isPressed;n=i.v=Math.round(n)||(p&&p.iOS?1:0),t(n),i.cacheID=w.cache,r&&k("ss",n)}else(e||w.cache!==i.cacheID||k("ref"))&&(i.cacheID=w.cache,i.v=t());return i.v+i.offset};return i.offset=0,t&&i},P={s:A,p:"left",p2:"Left",os:"right",os2:"Right",d:"width",d2:"Width",a:"x",sc:D((function(t){return arguments.length?s.scrollTo(t,L.sc()):s.pageXOffset||l[A]||a[A]||c[A]||0}))},L={s:C,p:"top",p2:"Top",os:"bottom",os2:"Bottom",d:"height",d2:"Height",a:"y",op:P,sc:D((function(t){return arguments.length?s.scrollTo(P.sc(),t):s.pageYOffset||l[C]||a[C]||c[C]||0}))},R=function(t,e){return(e&&e._ctx&&e._ctx.selector||r.utils.toArray)(t)[0]||("string"==typeof t&&!1!==r.config().nullTargetWarn?console.warn("Element not found:",t):null)},B=function(t,e){var i=e.s,n=e.sc;E(t)&&(t=l.scrollingElement||a);var o=w.indexOf(t),s=n===L.sc?1:2;!~o&&(o=w.push(t)-1),w[o+s]||_(t,"scroll",M);var c=w[o+s],h=c||(w[o+s]=D(T(t,i),!0)||(E(t)?n:D((function(e){return arguments.length?t[i]=e:t[i]}))));return h.target=t,c||(h.smooth="smooth"===r.getProperty(t,"scrollBehavior")),h},Y=function(t,e,i){var n=t,r=t,o=S(),s=o,l=e||50,a=Math.max(500,3*l),c=function(t,e){var a=S();e||a-o>l?(r=n,n=t,s=o,o=a):i?n+=t:n=r+(t-r)/(a-s)*(o-s)};return{update:c,reset:function(){r=n=i?0:n,s=o=0},getVelocity:function(t){var e=s,l=r,h=S();return(t||0===t)&&t!==n&&c(t),o===s||h-s>a?0:(n+(i?l:-l))/((i?h:o)-e)*1e3}}},W=function(t,e){return e&&!t._gsapAllow&&t.preventDefault(),t.changedTouches?t.changedTouches[0]:t},H=function(t){var e=Math.max.apply(Math,t),i=Math.min.apply(Math,t);return Math.abs(e)>=Math.abs(i)?e:i},I=function(){var t,e,i,n;(d=r.core.globals().ScrollTrigger)&&d.core&&(t=d.core,e=t.bridge||{},i=t._scrollers,n=t._proxies,i.push.apply(i,w),n.push.apply(n,x),w=i,x=n,k=function(t,i){return e[t](i)})},j=function(t){return r=t||g(),!o&&r&&"undefined"!=typeof document&&document.body&&(s=window,l=document,a=l.documentElement,c=l.body,f=[s,l,a,c],r.utils.clamp,m=r.core.context||function(){},u="onpointerenter"in c?"pointer":"mouse",h=z.isTouch=s.matchMedia&&s.matchMedia("(hover: none), (pointer: coarse)").matches?1:"ontouchstart"in s||navigator.maxTouchPoints>0||navigator.msMaxTouchPoints>0?2:0,v=z.eventTypes=("ontouchstart"in a?"touchstart,touchmove,touchcancel,touchend":"onpointerdown"in a?"pointerdown,pointermove,pointercancel,pointerup":"mousedown,mousemove,mouseup,mouseup").split(","),setTimeout((function(){return y=0}),500),I(),o=1),o};P.op=L,w.cache=0;var z=function(){function t(t){this.init(t)}var e,i,f;return t.prototype.init=function(t){o||j(r)||console.warn("Please gsap.registerPlugin(Observer)"),d||I();var e=t.tolerance,i=t.dragMinimum,n=t.type,f=t.target,g=t.lineHeight,y=t.debounce,w=t.preventDefault,x=t.onStop,k=t.onStopDelay,T=t.ignore,A=t.wheelSpeed,C=t.event,D=t.onDragStart,z=t.onDragEnd,X=t.onDrag,F=t.onPress,V=t.onRelease,N=t.onRight,q=t.onLeft,U=t.onUp,K=t.onDown,G=t.onChangeX,$=t.onChangeY,Z=t.onChange,J=t.onToggleX,Q=t.onToggleY,tt=t.onHover,et=t.onHoverEnd,it=t.onMove,nt=t.ignoreCheck,rt=t.isNormalizer,ot=t.onGestureStart,st=t.onGestureEnd,lt=t.onWheel,at=t.onEnable,ct=t.onDisable,ht=t.onClick,ut=t.scrollSpeed,dt=t.capture,ft=t.allowClicks,pt=t.lockAxis,vt=t.onLockAxis;this.target=f=R(f)||a,this.vars=t,T&&(T=r.utils.toArray(T)),e=e||1e-9,i=i||0,A=A||1,ut=ut||1,n=n||"wheel,touch,pointer",y=!1!==y,g||(g=parseFloat(s.getComputedStyle(c).lineHeight)||22);var mt,gt,yt,bt,wt,xt,St,kt=this,Tt=0,Et=0,_t=t.passive||!w,Ot=B(f,P),At=B(f,L),Ct=Ot(),Mt=At(),Dt=~n.indexOf("touch")&&!~n.indexOf("pointer")&&"pointerdown"===v[0],Pt=E(f),Lt=f.ownerDocument||l,Rt=[0,0,0],Bt=[0,0,0],Yt=0,Wt=function(){return Yt=S()},Ht=function(t,e){return(kt.event=t)&&T&&~T.indexOf(t.target)||e&&Dt&&"touch"!==t.pointerType||nt&&nt(t,e)},It=function(){var t=kt.deltaX=H(Rt),i=kt.deltaY=H(Bt),n=Math.abs(t)>=e,r=Math.abs(i)>=e;Z&&(n||r)&&Z(kt,t,i,Rt,Bt),n&&(N&&kt.deltaX>0&&N(kt),q&&kt.deltaX<0&&q(kt),G&&G(kt),J&&kt.deltaX<0!=Tt<0&&J(kt),Tt=kt.deltaX,Rt[0]=Rt[1]=Rt[2]=0),r&&(K&&kt.deltaY>0&&K(kt),U&&kt.deltaY<0&&U(kt),$&&$(kt),Q&&kt.deltaY<0!=Et<0&&Q(kt),Et=kt.deltaY,Bt[0]=Bt[1]=Bt[2]=0),(bt||yt)&&(it&&it(kt),yt&&(X(kt),yt=!1),bt=!1),xt&&!(xt=!1)&&vt&&vt(kt),wt&&(lt(kt),wt=!1),mt=0},jt=function(t,e,i){Rt[i]+=t,Bt[i]+=e,kt._vx.update(t),kt._vy.update(e),y?mt||(mt=requestAnimationFrame(It)):It()},zt=function(t,e){pt&&!St&&(kt.axis=St=Math.abs(t)>Math.abs(e)?"x":"y",xt=!0),"y"!==St&&(Rt[2]+=t,kt._vx.update(t,!0)),"x"!==St&&(Bt[2]+=e,kt._vy.update(e,!0)),y?mt||(mt=requestAnimationFrame(It)):It()},Xt=function(t){if(!Ht(t,1)){var e=(t=W(t,w)).clientX,n=t.clientY,r=e-kt.x,o=n-kt.y,s=kt.isDragging;kt.x=e,kt.y=n,(s||Math.abs(kt.startX-e)>=i||Math.abs(kt.startY-n)>=i)&&(X&&(yt=!0),s||(kt.isDragging=!0),zt(r,o),s||D&&D(kt))}},Ft=kt.onPress=function(t){Ht(t,1)||t&&t.button||(kt.axis=St=null,gt.pause(),kt.isPressed=!0,t=W(t),Tt=Et=0,kt.startX=kt.x=t.clientX,kt.startY=kt.y=t.clientY,kt._vx.reset(),kt._vy.reset(),_(rt?f:Lt,v[1],Xt,_t,!0),kt.deltaX=kt.deltaY=0,F&&F(kt))},Vt=kt.onRelease=function(t){if(!Ht(t,1)){O(rt?f:Lt,v[1],Xt,!0);var e=!isNaN(kt.y-kt.startY),i=kt.isDragging,n=i&&(Math.abs(kt.x-kt.startX)>3||Math.abs(kt.y-kt.startY)>3),o=W(t);!n&&e&&(kt._vx.reset(),kt._vy.reset(),w&&ft&&r.delayedCall(.08,(function(){if(S()-Yt>300&&!t.defaultPrevented)if(t.target.click)t.target.click();else if(Lt.createEvent){var e=Lt.createEvent("MouseEvents");e.initMouseEvent("click",!0,!0,s,1,o.screenX,o.screenY,o.clientX,o.clientY,!1,!1,!1,!1,0,null),t.target.dispatchEvent(e)}}))),kt.isDragging=kt.isGesturing=kt.isPressed=!1,x&&i&&!rt&&gt.restart(!0),z&&i&&z(kt),V&&V(kt,n)}},Nt=function(t){return t.touches&&t.touches.length>1&&(kt.isGesturing=!0)&&ot(t,kt.isDragging)},qt=function(){return(kt.isGesturing=!1)||st(kt)},Ut=function(t){if(!Ht(t)){var e=Ot(),i=At();jt((e-Ct)*ut,(i-Mt)*ut,1),Ct=e,Mt=i,x&&gt.restart(!0)}},Kt=function(t){if(!Ht(t)){t=W(t,w),lt&&(wt=!0);var e=(1===t.deltaMode?g:2===t.deltaMode?s.innerHeight:1)*A;jt(t.deltaX*e,t.deltaY*e,0),x&&!rt&&gt.restart(!0)}},Gt=function(t){if(!Ht(t)){var e=t.clientX,i=t.clientY,n=e-kt.x,r=i-kt.y;kt.x=e,kt.y=i,bt=!0,x&&gt.restart(!0),(n||r)&&zt(n,r)}},$t=function(t){kt.event=t,tt(kt)},Zt=function(t){kt.event=t,et(kt)},Jt=function(t){return Ht(t)||W(t,w)&&ht(kt)};gt=kt._dc=r.delayedCall(k||.25,(function(){kt._vx.reset(),kt._vy.reset(),gt.pause(),x&&x(kt)})).pause(),kt.deltaX=kt.deltaY=0,kt._vx=Y(0,50,!0),kt._vy=Y(0,50,!0),kt.scrollX=Ot,kt.scrollY=At,kt.isDragging=kt.isGesturing=kt.isPressed=!1,m(this),kt.enable=function(t){return kt.isEnabled||(_(Pt?Lt:f,"scroll",M),n.indexOf("scroll")>=0&&_(Pt?Lt:f,"scroll",Ut,_t,dt),n.indexOf("wheel")>=0&&_(f,"wheel",Kt,_t,dt),(n.indexOf("touch")>=0&&h||n.indexOf("pointer")>=0)&&(_(f,v[0],Ft,_t,dt),_(Lt,v[2],Vt),_(Lt,v[3],Vt),ft&&_(f,"click",Wt,!0,!0),ht&&_(f,"click",Jt),ot&&_(Lt,"gesturestart",Nt),st&&_(Lt,"gestureend",qt),tt&&_(f,u+"enter",$t),et&&_(f,u+"leave",Zt),it&&_(f,u+"move",Gt)),kt.isEnabled=!0,t&&t.type&&Ft(t),at&&at(kt)),kt},kt.disable=function(){kt.isEnabled&&(b.filter((function(t){return t!==kt&&E(t.target)})).length||O(Pt?Lt:f,"scroll",M),kt.isPressed&&(kt._vx.reset(),kt._vy.reset(),O(rt?f:Lt,v[1],Xt,!0)),O(Pt?Lt:f,"scroll",Ut,dt),O(f,"wheel",Kt,dt),O(f,v[0],Ft,dt),O(Lt,v[2],Vt),O(Lt,v[3],Vt),O(f,"click",Wt,!0),O(f,"click",Jt),O(Lt,"gesturestart",Nt),O(Lt,"gestureend",qt),O(f,u+"enter",$t),O(f,u+"leave",Zt),O(f,u+"move",Gt),kt.isEnabled=kt.isPressed=kt.isDragging=!1,ct&&ct(kt))},kt.kill=kt.revert=function(){kt.disable();var t=b.indexOf(kt);t>=0&&b.splice(t,1),p===kt&&(p=0)},b.push(kt),rt&&E(f)&&(p=kt),kt.enable(C)},e=t,(i=[{key:"velocityX",get:function(){return this._vx.getVelocity()}},{key:"velocityY",get:function(){return this._vy.getVelocity()}}])&&n(e.prototype,i),f&&n(e,f),t}();z.version="3.12.5",z.create=function(t){return new z(t)},z.register=j,z.getAll=function(){return b.slice()},z.getById=function(t){return b.filter((function(e){return e.vars.id===t}))[0]},g()&&r.registerPlugin(z);var X,F,V,N,q,U,K,G,$,Z,J,Q,tt,et,it,nt,rt,ot,st,lt,at,ct,ht,ut,dt,ft,pt,vt,mt,gt,yt,bt,wt,xt,St,kt,Tt,Et,_t=1,Ot=Date.now,At=Ot(),Ct=0,Mt=0,Dt=function(t,e,i){var n=Nt(t)&&("clamp("===t.substr(0,6)||t.indexOf("max")>-1);return i["_"+e+"Clamp"]=n,n?t.substr(6,t.length-7):t},Pt=function(t,e){return!e||Nt(t)&&"clamp("===t.substr(0,6)?t:"clamp("+t+")"},Lt=function t(){return Mt&&requestAnimationFrame(t)},Rt=function(){return et=1},Bt=function(){return et=0},Yt=function(t){return t},Wt=function(t){return Math.round(1e5*t)/1e5||0},Ht=function(){return"undefined"!=typeof window},It=function(){return X||Ht()&&(X=window.gsap)&&X.registerPlugin&&X},jt=function(t){return!!~K.indexOf(t)},zt=function(t){return("Height"===t?yt:V["inner"+t])||q["client"+t]||U["client"+t]},Xt=function(t){return T(t,"getBoundingClientRect")||(jt(t)?function(){return ei.width=V.innerWidth,ei.height=yt,ei}:function(){return pe(t)})},Ft=function(t,e){var i=e.s,n=e.d2,r=e.d,o=e.a;return Math.max(0,(i="scroll"+n)&&(o=T(t,i))?o()-Xt(t)()[r]:jt(t)?(q[i]||U[i])-zt(n):t[i]-t["offset"+n])},Vt=function(t,e){for(var i=0;i<st.length;i+=3)(!e||~e.indexOf(st[i+1]))&&t(st[i],st[i+1],st[i+2])},Nt=function(t){return"string"==typeof t},qt=function(t){return"function"==typeof t},Ut=function(t){return"number"==typeof t},Kt=function(t){return"object"==typeof t},Gt=function(t,e,i){return t&&t.progress(e?0:1)&&i&&t.pause()},$t=function(t,e){if(t.enabled){var i=t._ctx?t._ctx.add((function(){return e(t)})):e(t);i&&i.totalTime&&(t.callbackAnimation=i)}},Zt=Math.abs,Jt="left",Qt="right",te="bottom",ee="width",ie="height",ne="Right",re="Left",oe="Top",se="Bottom",le="padding",ae="margin",ce="Width",he="Height",ue="px",de=function(t){return V.getComputedStyle(t)},fe=function(t,e){for(var i in e)i in t||(t[i]=e[i]);return t},pe=function(t,e){var i=e&&"matrix(1, 0, 0, 1, 0, 0)"!==de(t)[it]&&X.to(t,{x:0,y:0,xPercent:0,yPercent:0,rotation:0,rotationX:0,rotationY:0,scale:1,skewX:0,skewY:0}).progress(1),n=t.getBoundingClientRect();return i&&i.progress(0).kill(),n},ve=function(t,e){var i=e.d2;return t["offset"+i]||t["client"+i]||0},me=function(t){var e,i=[],n=t.labels,r=t.duration();for(e in n)i.push(n[e]/r);return i},ge=function(t){var e=X.utils.snap(t),i=Array.isArray(t)&&t.slice(0).sort((function(t,e){return t-e}));return i?function(t,n,r){var o;if(void 0===r&&(r=.001),!n)return e(t);if(n>0){for(t-=r,o=0;o<i.length;o++)if(i[o]>=t)return i[o];return i[o-1]}for(o=i.length,t+=r;o--;)if(i[o]<=t)return i[o];return i[0]}:function(i,n,r){void 0===r&&(r=.001);var o=e(i);return!n||Math.abs(o-i)<r||o-i<0==n<0?o:e(n<0?i-t:i+t)}},ye=function(t,e,i,n){return i.split(",").forEach((function(i){return t(e,i,n)}))},be=function(t,e,i,n,r){return t.addEventListener(e,i,{passive:!n,capture:!!r})},we=function(t,e,i,n){return t.removeEventListener(e,i,!!n)},xe=function(t,e,i){(i=i&&i.wheelHandler)&&(t(e,"wheel",i),t(e,"touchmove",i))},Se={startColor:"green",endColor:"red",indent:0,fontSize:"16px",fontWeight:"normal"},ke={toggleActions:"play",anticipatePin:0},Te={top:0,left:0,center:.5,bottom:1,right:1},Ee=function(t,e){if(Nt(t)){var i=t.indexOf("="),n=~i?+(t.charAt(i-1)+1)*parseFloat(t.substr(i+1)):0;~i&&(t.indexOf("%")>i&&(n*=e/100),t=t.substr(0,i-1)),t=n+(t in Te?Te[t]*e:~t.indexOf("%")?parseFloat(t)*e/100:parseFloat(t)||0)}return t},_e=function(t,e,i,n,r,o,s,l){var a=r.startColor,c=r.endColor,h=r.fontSize,u=r.indent,d=r.fontWeight,f=N.createElement("div"),p=jt(i)||"fixed"===T(i,"pinType"),v=-1!==t.indexOf("scroller"),m=p?U:i,g=-1!==t.indexOf("start"),y=g?a:c,b="border-color:"+y+";font-size:"+h+";color:"+y+";font-weight:"+d+";pointer-events:none;white-space:nowrap;font-family:sans-serif,Arial;z-index:1000;padding:4px 8px;border-width:0;border-style:solid;";return b+="position:"+((v||l)&&p?"fixed;":"absolute;"),(v||l||!p)&&(b+=(n===L?Qt:te)+":"+(o+parseFloat(u))+"px;"),s&&(b+="box-sizing:border-box;text-align:left;width:"+s.offsetWidth+"px;"),f._isStart=g,f.setAttribute("class","gsap-marker-"+t+(e?" marker-"+e:"")),f.style.cssText=b,f.innerText=e||0===e?t+"-"+e:t,m.children[0]?m.insertBefore(f,m.children[0]):m.appendChild(f),f._offset=f["offset"+n.op.d2],Oe(f,0,n,g),f},Oe=function(t,e,i,n){var r={display:"block"},o=i[n?"os2":"p2"],s=i[n?"p2":"os2"];t._isFlipped=n,r[i.a+"Percent"]=n?-100:0,r[i.a]=n?"1px":0,r["border"+o+ce]=1,r["border"+s+ce]=0,r[i.p]=e+"px",X.set(t,r)},Ae=[],Ce={},Me=function(){return Ot()-Ct>34&&(St||(St=requestAnimationFrame(Ke)))},De=function(){(!ht||!ht.isPressed||ht.startX>U.clientWidth)&&(w.cache++,ht?St||(St=requestAnimationFrame(Ke)):Ke(),Ct||We("scrollStart"),Ct=Ot())},Pe=function(){ft=V.innerWidth,dt=V.innerHeight},Le=function(){w.cache++,!tt&&!ct&&!N.fullscreenElement&&!N.webkitFullscreenElement&&(!ut||ft!==V.innerWidth||Math.abs(V.innerHeight-dt)>.25*V.innerHeight)&&G.restart(!0)},Re={},Be=[],Ye=function t(){return we(ai,"scrollEnd",t)||Ne(!0)},We=function(t){return Re[t]&&Re[t].map((function(t){return t()}))||Be},He=[],Ie=function(t){for(var e=0;e<He.length;e+=5)(!t||He[e+4]&&He[e+4].query===t)&&(He[e].style.cssText=He[e+1],He[e].getBBox&&He[e].setAttribute("transform",He[e+2]||""),He[e+3].uncache=1)},je=function(t,e){var i;for(nt=0;nt<Ae.length;nt++)!(i=Ae[nt])||e&&i._ctx!==e||(t?i.kill(1):i.revert(!0,!0));bt=!0,e&&Ie(e),e||We("revert")},ze=function(t,e){w.cache++,(e||!kt)&&w.forEach((function(t){return qt(t)&&t.cacheID++&&(t.rec=0)})),Nt(t)&&(V.history.scrollRestoration=mt=t)},Xe=0,Fe=function(){U.appendChild(gt),yt=!ht&&gt.offsetHeight||V.innerHeight,U.removeChild(gt)},Ve=function(t){return $(".gsap-marker-start, .gsap-marker-end, .gsap-marker-scroller-start, .gsap-marker-scroller-end").forEach((function(e){return e.style.display=t?"none":"block"}))},Ne=function(t,e){if(!Ct||t||bt){Fe(),kt=ai.isRefreshing=!0,w.forEach((function(t){return qt(t)&&++t.cacheID&&(t.rec=t())}));var i=We("refreshInit");lt&&ai.sort(),e||je(),w.forEach((function(t){qt(t)&&(t.smooth&&(t.target.style.scrollBehavior="auto"),t(0))})),Ae.slice(0).forEach((function(t){return t.refresh()})),bt=!1,Ae.forEach((function(t){if(t._subPinOffset&&t.pin){var e=t.vars.horizontal?"offsetWidth":"offsetHeight",i=t.pin[e];t.revert(!0,1),t.adjustPinSpacing(t.pin[e]-i),t.refresh()}})),wt=1,Ve(!0),Ae.forEach((function(t){var e=Ft(t.scroller,t._dir),i="max"===t.vars.end||t._endClamp&&t.end>e,n=t._startClamp&&t.start>=e;(i||n)&&t.setPositions(n?e-1:t.start,i?Math.max(n?e:t.start+1,e):t.end,!0)})),Ve(!1),wt=0,i.forEach((function(t){return t&&t.render&&t.render(-1)})),w.forEach((function(t){qt(t)&&(t.smooth&&requestAnimationFrame((function(){return t.target.style.scrollBehavior="smooth"})),t.rec&&t(t.rec))})),ze(mt,1),G.pause(),Xe++,kt=2,Ke(2),Ae.forEach((function(t){return qt(t.vars.onRefresh)&&t.vars.onRefresh(t)})),kt=ai.isRefreshing=!1,We("refresh")}else be(ai,"scrollEnd",Ye)},qe=0,Ue=1,Ke=function(t){if(2===t||!kt&&!bt){ai.isUpdating=!0,Et&&Et.update(0);var e=Ae.length,i=Ot(),n=i-At>=50,r=e&&Ae[0].scroll();if(Ue=qe>r?-1:1,kt||(qe=r),n&&(Ct&&!et&&i-Ct>200&&(Ct=0,We("scrollEnd")),J=At,At=i),Ue<0){for(nt=e;nt-- >0;)Ae[nt]&&Ae[nt].update(0,n);Ue=1}else for(nt=0;nt<e;nt++)Ae[nt]&&Ae[nt].update(0,n);ai.isUpdating=!1}St=0},Ge=[Jt,"top",te,Qt,ae+se,ae+ne,ae+oe,ae+re,"display","flexShrink","float","zIndex","gridColumnStart","gridColumnEnd","gridRowStart","gridRowEnd","gridArea","justifySelf","alignSelf","placeSelf","order"],$e=Ge.concat([ee,ie,"boxSizing","max"+ce,"max"+he,"position",ae,le,le+oe,le+ne,le+se,le+re]),Ze=function(t,e,i,n){if(!t._gsap.swappedIn){for(var r,o=Ge.length,s=e.style,l=t.style;o--;)s[r=Ge[o]]=i[r];s.position="absolute"===i.position?"absolute":"relative","inline"===i.display&&(s.display="inline-block"),l[te]=l[Qt]="auto",s.flexBasis=i.flexBasis||"auto",s.overflow="visible",s.boxSizing="border-box",s[ee]=ve(t,P)+ue,s[ie]=ve(t,L)+ue,s[le]=l[ae]=l.top=l[Jt]="0",Qe(n),l[ee]=l["max"+ce]=i[ee],l[ie]=l["max"+he]=i[ie],l[le]=i[le],t.parentNode!==e&&(t.parentNode.insertBefore(e,t),e.appendChild(t)),t._gsap.swappedIn=!0}},Je=/([A-Z])/g,Qe=function(t){if(t){var e,i,n=t.t.style,r=t.length,o=0;for((t.t._gsap||X.core.getCache(t.t)).uncache=1;o<r;o+=2)i=t[o+1],e=t[o],i?n[e]=i:n[e]&&n.removeProperty(e.replace(Je,"-$1").toLowerCase())}},ti=function(t){for(var e=$e.length,i=t.style,n=[],r=0;r<e;r++)n.push($e[r],i[$e[r]]);return n.t=t,n},ei={left:0,top:0},ii=function(t,e,i,n,r,o,s,l,a,c,h,u,d,f){qt(t)&&(t=t(l)),Nt(t)&&"max"===t.substr(0,3)&&(t=u+("="===t.charAt(4)?Ee("0"+t.substr(3),i):0));var p,v,m,g=d?d.time():0;if(d&&d.seek(0),isNaN(t)||(t=+t),Ut(t))d&&(t=X.utils.mapRange(d.scrollTrigger.start,d.scrollTrigger.end,0,u,t)),s&&Oe(s,i,n,!0);else{qt(e)&&(e=e(l));var y,b,w,x,S=(t||"0").split(" ");m=R(e,l)||U,(y=pe(m)||{})&&(y.left||y.top)||"none"!==de(m).display||(x=m.style.display,m.style.display="block",y=pe(m),x?m.style.display=x:m.style.removeProperty("display")),b=Ee(S[0],y[n.d]),w=Ee(S[1]||"0",i),t=y[n.p]-a[n.p]-c+b+r-w,s&&Oe(s,w,n,i-w<20||s._isStart&&w>20),i-=i-w}if(f&&(l[f]=t||-.001,t<0&&(t=0)),o){var k=t+i,T=o._isStart;p="scroll"+n.d2,Oe(o,k,n,T&&k>20||!T&&(h?Math.max(U[p],q[p]):o.parentNode[p])<=k+1),h&&(a=pe(s),h&&(o.style[n.op.p]=a[n.op.p]-n.op.m-o._offset+ue))}return d&&m&&(p=pe(m),d.seek(u),v=pe(m),d._caScrollDist=p[n.p]-v[n.p],t=t/d._caScrollDist*u),d&&d.seek(g),d?t:Math.round(t)},ni=/(webkit|moz|length|cssText|inset)/i,ri=function(t,e,i,n){if(t.parentNode!==e){var r,o,s=t.style;if(e===U){for(r in t._stOrig=s.cssText,o=de(t))+r||ni.test(r)||!o[r]||"string"!=typeof s[r]||"0"===r||(s[r]=o[r]);s.top=i,s.left=n}else s.cssText=t._stOrig;X.core.getCache(t).uncache=1,e.appendChild(t)}},oi=function(t,e,i){var n=e,r=n;return function(e){var o=Math.round(t());return o!==n&&o!==r&&Math.abs(o-n)>3&&Math.abs(o-r)>3&&(e=o,i&&i()),r=n,n=e,e}},si=function(t,e,i){var n={};n[e.p]="+="+i,X.set(t,n)},li=function(t,e){var i=B(t,e),n="_scroll"+e.p2,r=function e(r,o,s,l,a){var c=e.tween,h=o.onComplete,u={};s=s||i();var d=oi(i,s,(function(){c.kill(),e.tween=0}));return a=l&&a||0,l=l||r-s,c&&c.kill(),o[n]=r,o.inherit=!1,o.modifiers=u,u[n]=function(){return d(s+l*c.ratio+a*c.ratio*c.ratio)},o.onUpdate=function(){w.cache++,e.tween&&Ke()},o.onComplete=function(){e.tween=0,h&&h.call(c)},c=e.tween=X.to(t,o)};return t[n]=i,i.wheelHandler=function(){return r.tween&&r.tween.kill()&&(r.tween=0)},be(t,"wheel",i.wheelHandler),ai.isTouch&&be(t,"touchmove",i.wheelHandler),r},ai=function(){function t(e,i){F||t.register(X)||console.warn("Please gsap.registerPlugin(ScrollTrigger)"),vt(this),this.init(e,i)}return t.prototype.init=function(e,i){if(this.progress=this.start=0,this.vars&&this.kill(!0,!0),Mt){var n,r,o,s,l,a,c,h,u,d,f,p,v,m,g,y,b,S,k,E,_,O,A,C,M,D,Y,W,H,I,j,z,F,K,G,Q,it,rt,ot,st,ct,ht,ut=e=fe(Nt(e)||Ut(e)||e.nodeType?{trigger:e}:e,ke),dt=ut.onUpdate,ft=ut.toggleClass,pt=ut.id,vt=ut.onToggle,mt=ut.onRefresh,gt=ut.scrub,yt=ut.trigger,bt=ut.pin,St=ut.pinSpacing,At=ut.invalidateOnRefresh,Lt=ut.anticipatePin,Rt=ut.onScrubComplete,Bt=ut.onSnapComplete,Ht=ut.once,It=ut.snap,Vt=ut.pinReparent,Jt=ut.pinSpacer,Qt=ut.containerAnimation,te=ut.fastScrollEnd,ye=ut.preventOverlaps,xe=e.horizontal||e.containerAnimation&&!1!==e.horizontal?P:L,Te=!gt&&0!==gt,Oe=R(e.scroller||V),Me=X.core.getCache(Oe),Pe=jt(Oe),Re="fixed"===("pinType"in e?e.pinType:T(Oe,"pinType")||Pe&&"fixed"),Be=[e.onEnter,e.onLeave,e.onEnterBack,e.onLeaveBack],We=Te&&e.toggleActions.split(" "),He="markers"in e?e.markers:ke.markers,Ie=Pe?0:parseFloat(de(Oe)["border"+xe.p2+ce])||0,je=this,ze=e.onRefreshInit&&function(){return e.onRefreshInit(je)},Fe=function(t,e,i){var n=i.d,r=i.d2,o=i.a;return(o=T(t,"getBoundingClientRect"))?function(){return o()[n]}:function(){return(e?zt(r):t["client"+r])||0}}(Oe,Pe,xe),Ve=function(t,e){return!e||~x.indexOf(t)?Xt(t):function(){return ei}}(Oe,Pe),qe=0,Ke=0,Ge=0,$e=B(Oe,xe);if(je._startClamp=je._endClamp=!1,je._dir=xe,Lt*=45,je.scroller=Oe,je.scroll=Qt?Qt.time.bind(Qt):$e,s=$e(),je.vars=e,i=i||e.animation,"refreshPriority"in e&&(lt=1,-9999===e.refreshPriority&&(Et=je)),Me.tweenScroll=Me.tweenScroll||{top:li(Oe,L),left:li(Oe,P)},je.tweenTo=n=Me.tweenScroll[xe.p],je.scrubDuration=function(t){(F=Ut(t)&&t)?z?z.duration(t):z=X.to(i,{ease:"expo",totalProgress:"+=0",inherit:!1,duration:F,paused:!0,onComplete:function(){return Rt&&Rt(je)}}):(z&&z.progress(1).kill(),z=0)},i&&(i.vars.lazy=!1,i._initted&&!je.isReverted||!1!==i.vars.immediateRender&&!1!==e.immediateRender&&i.duration()&&i.render(0,!0,!0),je.animation=i.pause(),i.scrollTrigger=je,je.scrubDuration(gt),I=0,pt||(pt=i.vars.id)),It&&(Kt(It)&&!It.push||(It={snapTo:It}),"scrollBehavior"in U.style&&X.set(Pe?[U,q]:Oe,{scrollBehavior:"auto"}),w.forEach((function(t){return qt(t)&&t.target===(Pe?N.scrollingElement||q:Oe)&&(t.smooth=!1)})),o=qt(It.snapTo)?It.snapTo:"labels"===It.snapTo?function(t){return function(e){return X.utils.snap(me(t),e)}}(i):"labelsDirectional"===It.snapTo?(st=i,function(t,e){return ge(me(st))(t,e.direction)}):!1!==It.directional?function(t,e){return ge(It.snapTo)(t,Ot()-Ke<500?0:e.direction)}:X.utils.snap(It.snapTo),K=It.duration||{min:.1,max:2},K=Kt(K)?Z(K.min,K.max):Z(K,K),G=X.delayedCall(It.delay||F/2||.1,(function(){var t=$e(),e=Ot()-Ke<500,r=n.tween;if(!(e||Math.abs(je.getVelocity())<10)||r||et||qe===t)je.isActive&&qe!==t&&G.restart(!0);else{var s,l,h=(t-a)/m,u=i&&!Te?i.totalProgress():h,d=e?0:(u-j)/(Ot()-J)*1e3||0,f=X.utils.clamp(-h,1-h,Zt(d/2)*d/.185),p=h+(!1===It.inertia?0:f),v=It,g=v.onStart,y=v.onInterrupt,b=v.onComplete;if(s=o(p,je),Ut(s)||(s=p),l=Math.round(a+s*m),t<=c&&t>=a&&l!==t){if(r&&!r._initted&&r.data<=Zt(l-t))return;!1===It.inertia&&(f=s-h),n(l,{duration:K(Zt(.185*Math.max(Zt(p-u),Zt(s-u))/d/.05||0)),ease:It.ease||"power3",data:Zt(l-t),onInterrupt:function(){return G.restart(!0)&&y&&y(je)},onComplete:function(){je.update(),qe=$e(),i&&(z?z.resetTo("totalProgress",s,i._tTime/i._tDur):i.progress(s)),I=j=i&&!Te?i.totalProgress():je.progress,Bt&&Bt(je),b&&b(je)}},t,f*m,l-t-f*m),g&&g(je,n.tween)}}})).pause()),pt&&(Ce[pt]=je),(ot=(yt=je.trigger=R(yt||!0!==bt&&bt))&&yt._gsap&&yt._gsap.stRevert)&&(ot=ot(je)),bt=!0===bt?yt:R(bt),Nt(ft)&&(ft={targets:yt,className:ft}),bt&&(!1===St||St===ae||(St=!(!St&&bt.parentNode&&bt.parentNode.style&&"flex"===de(bt.parentNode).display)&&le),je.pin=bt,(r=X.core.getCache(bt)).spacer?g=r.pinState:(Jt&&((Jt=R(Jt))&&!Jt.nodeType&&(Jt=Jt.current||Jt.nativeElement),r.spacerIsNative=!!Jt,Jt&&(r.spacerState=ti(Jt))),r.spacer=S=Jt||N.createElement("div"),S.classList.add("pin-spacer"),pt&&S.classList.add("pin-spacer-"+pt),r.pinState=g=ti(bt)),!1!==e.force3D&&X.set(bt,{force3D:!0}),je.spacer=S=r.spacer,H=de(bt),C=H[St+xe.os2],E=X.getProperty(bt),_=X.quickSetter(bt,xe.a,ue),Ze(bt,S,H),b=ti(bt)),He){p=Kt(He)?fe(He,Se):Se,d=_e("scroller-start",pt,Oe,xe,p,0),f=_e("scroller-end",pt,Oe,xe,p,0,d),k=d["offset"+xe.op.d2];var Je=R(T(Oe,"content")||Oe);h=this.markerStart=_e("start",pt,Je,xe,p,k,0,Qt),u=this.markerEnd=_e("end",pt,Je,xe,p,k,0,Qt),Qt&&(rt=X.quickSetter([h,u],xe.a,ue)),Re||x.length&&!0===T(Oe,"fixedMarkers")||(ht=de(ct=Pe?U:Oe).position,ct.style.position="absolute"===ht||"fixed"===ht?ht:"relative",X.set([d,f],{force3D:!0}),D=X.quickSetter(d,xe.a,ue),W=X.quickSetter(f,xe.a,ue))}if(Qt){var ni=Qt.vars.onUpdate,oi=Qt.vars.onUpdateParams;Qt.eventCallback("onUpdate",(function(){je.update(0,0,1),ni&&ni.apply(Qt,oi||[])}))}if(je.previous=function(){return Ae[Ae.indexOf(je)-1]},je.next=function(){return Ae[Ae.indexOf(je)+1]},je.revert=function(t,e){if(!e)return je.kill(!0);var n=!1!==t||!je.enabled,r=tt;n!==je.isReverted&&(n&&(Q=Math.max($e(),je.scroll.rec||0),Ge=je.progress,it=i&&i.progress()),h&&[h,u,d,f].forEach((function(t){return t.style.display=n?"none":"block"})),n&&(tt=je,je.update(n)),!bt||Vt&&je.isActive||(n?function(t,e,i){Qe(i);var n=t._gsap;if(n.spacerIsNative)Qe(n.spacerState);else if(t._gsap.swappedIn){var r=e.parentNode;r&&(r.insertBefore(t,e),r.removeChild(e))}t._gsap.swappedIn=!1}(bt,S,g):Ze(bt,S,de(bt),M)),n||je.update(n),tt=r,je.isReverted=n)},je.refresh=function(r,o,p,w){if(!tt&&je.enabled||o)if(bt&&r&&Ct)be(t,"scrollEnd",Ye);else{!kt&&ze&&ze(je),tt=je,n.tween&&!p&&(n.tween.kill(),n.tween=0),z&&z.pause(),At&&i&&i.revert({kill:!1}).invalidate(),je.isReverted||je.revert(!0,!0),je._subPinOffset=!1;var x,k,T,_,C,D,W,H,I,j,F,V,K,$=Fe(),Z=Ve(),J=Qt?Qt.duration():Ft(Oe,xe),et=m<=.01,nt=0,rt=w||0,ot=Kt(p)?p.end:e.end,st=e.endTrigger||yt,lt=Kt(p)?p.start:e.start||(0!==e.start&&yt?bt?"0 0":"0 100%":0),ct=je.pinnedContainer=e.pinnedContainer&&R(e.pinnedContainer,je),ht=yt&&Math.max(0,Ae.indexOf(je))||0,ut=ht;for(He&&Kt(p)&&(V=X.getProperty(d,xe.p),K=X.getProperty(f,xe.p));ut--;)(D=Ae[ut]).end||D.refresh(0,1)||(tt=je),!(W=D.pin)||W!==yt&&W!==bt&&W!==ct||D.isReverted||(j||(j=[]),j.unshift(D),D.revert(!0,!0)),D!==Ae[ut]&&(ht--,ut--);for(qt(lt)&&(lt=lt(je)),lt=Dt(lt,"start",je),a=ii(lt,yt,$,xe,$e(),h,d,je,Z,Ie,Re,J,Qt,je._startClamp&&"_startClamp")||(bt?-.001:0),qt(ot)&&(ot=ot(je)),Nt(ot)&&!ot.indexOf("+=")&&(~ot.indexOf(" ")?ot=(Nt(lt)?lt.split(" ")[0]:"")+ot:(nt=Ee(ot.substr(2),$),ot=Nt(lt)?lt:(Qt?X.utils.mapRange(0,Qt.duration(),Qt.scrollTrigger.start,Qt.scrollTrigger.end,a):a)+nt,st=yt)),ot=Dt(ot,"end",je),c=Math.max(a,ii(ot||(st?"100% 0":J),st,$,xe,$e()+nt,u,f,je,Z,Ie,Re,J,Qt,je._endClamp&&"_endClamp"))||-.001,nt=0,ut=ht;ut--;)(W=(D=Ae[ut]).pin)&&D.start-D._pinPush<=a&&!Qt&&D.end>0&&(x=D.end-(je._startClamp?Math.max(0,D.start):D.start),(W===yt&&D.start-D._pinPush<a||W===ct)&&isNaN(lt)&&(nt+=x*(1-D.progress)),W===bt&&(rt+=x));if(a+=nt,c+=nt,je._startClamp&&(je._startClamp+=nt),je._endClamp&&!kt&&(je._endClamp=c||-.001,c=Math.min(c,Ft(Oe,xe))),m=c-a||(a-=.01)&&.001,et&&(Ge=X.utils.clamp(0,1,X.utils.normalize(a,c,Q))),je._pinPush=rt,h&&nt&&((x={})[xe.a]="+="+nt,ct&&(x[xe.p]="-="+$e()),X.set([h,u],x)),!bt||wt&&je.end>=Ft(Oe,xe)){if(yt&&$e()&&!Qt)for(k=yt.parentNode;k&&k!==U;)k._pinOffset&&(a-=k._pinOffset,c-=k._pinOffset),k=k.parentNode}else x=de(bt),_=xe===L,T=$e(),O=parseFloat(E(xe.a))+rt,!J&&c>1&&(F={style:F=(Pe?N.scrollingElement||q:Oe).style,value:F["overflow"+xe.a.toUpperCase()]},Pe&&"scroll"!==de(U)["overflow"+xe.a.toUpperCase()]&&(F.style["overflow"+xe.a.toUpperCase()]="scroll")),Ze(bt,S,x),b=ti(bt),k=pe(bt,!0),H=Re&&B(Oe,_?P:L)(),St?((M=[St+xe.os2,m+rt+ue]).t=S,(ut=St===le?ve(bt,xe)+m+rt:0)&&(M.push(xe.d,ut+ue),"auto"!==S.style.flexBasis&&(S.style.flexBasis=ut+ue)),Qe(M),ct&&Ae.forEach((function(t){t.pin===ct&&!1!==t.vars.pinSpacing&&(t._subPinOffset=!0)})),Re&&$e(Q)):(ut=ve(bt,xe))&&"auto"!==S.style.flexBasis&&(S.style.flexBasis=ut+ue),Re&&((C={top:k.top+(_?T-a:H)+ue,left:k.left+(_?H:T-a)+ue,boxSizing:"border-box",position:"fixed"})[ee]=C["max"+ce]=Math.ceil(k.width)+ue,C[ie]=C["max"+he]=Math.ceil(k.height)+ue,C[ae]=C[ae+oe]=C[ae+ne]=C[ae+se]=C[ae+re]="0",C[le]=x[le],C[le+oe]=x[le+oe],C[le+ne]=x[le+ne],C[le+se]=x[le+se],C[le+re]=x[le+re],y=function(t,e,i){for(var n,r=[],o=t.length,s=i?8:0;s<o;s+=2)n=t[s],r.push(n,n in e?e[n]:t[s+1]);return r.t=t.t,r}(g,C,Vt),kt&&$e(0)),i?(I=i._initted,at(1),i.render(i.duration(),!0,!0),A=E(xe.a)-O+m+rt,Y=Math.abs(m-A)>1,Re&&Y&&y.splice(y.length-2,2),i.render(0,!0,!0),I||i.invalidate(!0),i.parent||i.totalTime(i.totalTime()),at(0)):A=m,F&&(F.value?F.style["overflow"+xe.a.toUpperCase()]=F.value:F.style.removeProperty("overflow-"+xe.a));j&&j.forEach((function(t){return t.revert(!1,!0)})),je.start=a,je.end=c,s=l=kt?Q:$e(),Qt||kt||(s<Q&&$e(Q),je.scroll.rec=0),je.revert(!1,!0),Ke=Ot(),G&&(qe=-1,G.restart(!0)),tt=0,i&&Te&&(i._initted||it)&&i.progress()!==it&&i.progress(it||0,!0).render(i.time(),!0,!0),(et||Ge!==je.progress||Qt||At)&&(i&&!Te&&i.totalProgress(Qt&&a<-.001&&!Ge?X.utils.normalize(a,c,0):Ge,!0),je.progress=et||(s-a)/m===Ge?0:Ge),bt&&St&&(S._pinOffset=Math.round(je.progress*A)),z&&z.invalidate(),isNaN(V)||(V-=X.getProperty(d,xe.p),K-=X.getProperty(f,xe.p),si(d,xe,V),si(h,xe,V-(w||0)),si(f,xe,K),si(u,xe,K-(w||0))),et&&!kt&&je.update(),!mt||kt||v||(v=!0,mt(je),v=!1)}},je.getVelocity=function(){return($e()-l)/(Ot()-J)*1e3||0},je.endAnimation=function(){Gt(je.callbackAnimation),i&&(z?z.progress(1):i.paused()?Te||Gt(i,je.direction<0,1):Gt(i,i.reversed()))},je.labelToScroll=function(t){return i&&i.labels&&(a||je.refresh()||a)+i.labels[t]/i.duration()*m||0},je.getTrailing=function(t){var e=Ae.indexOf(je),i=je.direction>0?Ae.slice(0,e).reverse():Ae.slice(e+1);return(Nt(t)?i.filter((function(e){return e.vars.preventOverlaps===t})):i).filter((function(t){return je.direction>0?t.end<=a:t.start>=c}))},je.update=function(t,e,r){if(!Qt||r||t){var o,h,u,f,p,v,g,w=!0===kt?Q:je.scroll(),x=t?0:(w-a)/m,k=x<0?0:x>1?1:x||0,T=je.progress;if(e&&(l=s,s=Qt?$e():w,It&&(j=I,I=i&&!Te?i.totalProgress():k)),Lt&&bt&&!tt&&!_t&&Ct&&(!k&&a<w+(w-l)/(Ot()-J)*Lt?k=1e-4:1===k&&c>w+(w-l)/(Ot()-J)*Lt&&(k=.9999)),k!==T&&je.enabled){if(f=(p=(o=je.isActive=!!k&&k<1)!==(!!T&&T<1))||!!k!=!!T,je.direction=k>T?1:-1,je.progress=k,f&&!tt&&(h=k&&!T?0:1===k?1:1===T?2:3,Te&&(u=!p&&"none"!==We[h+1]&&We[h+1]||We[h],g=i&&("complete"===u||"reset"===u||u in i))),ye&&(p||g)&&(g||gt||!i)&&(qt(ye)?ye(je):je.getTrailing(ye).forEach((function(t){return t.endAnimation()}))),Te||(!z||tt||_t?i&&i.totalProgress(k,!(!tt||!Ke&&!t)):(z._dp._time-z._start!==z._time&&z.render(z._dp._time-z._start),z.resetTo?z.resetTo("totalProgress",k,i._tTime/i._tDur):(z.vars.totalProgress=k,z.invalidate().restart()))),bt)if(t&&St&&(S.style[St+xe.os2]=C),Re){if(f){if(v=!t&&k>T&&c+1>w&&w+1>=Ft(Oe,xe),Vt)if(t||!o&&!v)ri(bt,S);else{var E=pe(bt,!0),M=w-a;ri(bt,U,E.top+(xe===L?M:0)+ue,E.left+(xe===L?0:M)+ue)}Qe(o||v?y:b),Y&&k<1&&o||_(O+(1!==k||v?0:A))}}else _(Wt(O+A*k));It&&!n.tween&&!tt&&!_t&&G.restart(!0),ft&&(p||Ht&&k&&(k<1||!xt))&&$(ft.targets).forEach((function(t){return t.classList[o||Ht?"add":"remove"](ft.className)})),dt&&!Te&&!t&&dt(je),f&&!tt?(Te&&(g&&("complete"===u?i.pause().totalProgress(1):"reset"===u?i.restart(!0).pause():"restart"===u?i.restart(!0):i[u]()),dt&&dt(je)),!p&&xt||(vt&&p&&$t(je,vt),Be[h]&&$t(je,Be[h]),Ht&&(1===k?je.kill(!1,1):Be[h]=0),p||Be[h=1===k?1:3]&&$t(je,Be[h])),te&&!o&&Math.abs(je.getVelocity())>(Ut(te)?te:2500)&&(Gt(je.callbackAnimation),z?z.progress(1):Gt(i,"reverse"===u?1:!k,1))):Te&&dt&&!tt&&dt(je)}if(W){var P=Qt?w/Qt.duration()*(Qt._caScrollDist||0):w;D(P+(d._isFlipped?1:0)),W(P)}rt&&rt(-w/Qt.duration()*(Qt._caScrollDist||0))}},je.enable=function(e,i){je.enabled||(je.enabled=!0,be(Oe,"resize",Le),Pe||be(Oe,"scroll",De),ze&&be(t,"refreshInit",ze),!1!==e&&(je.progress=Ge=0,s=l=qe=$e()),!1!==i&&je.refresh())},je.getTween=function(t){return t&&n?n.tween:z},je.setPositions=function(t,e,i,n){if(Qt){var r=Qt.scrollTrigger,o=Qt.duration(),s=r.end-r.start;t=r.start+s*t/o,e=r.start+s*e/o}je.refresh(!1,!1,{start:Pt(t,i&&!!je._startClamp),end:Pt(e,i&&!!je._endClamp)},n),je.update()},je.adjustPinSpacing=function(t){if(M&&t){var e=M.indexOf(xe.d)+1;M[e]=parseFloat(M[e])+t+ue,M[1]=parseFloat(M[1])+t+ue,Qe(M)}},je.disable=function(e,i){if(je.enabled&&(!1!==e&&je.revert(!0,!0),je.enabled=je.isActive=!1,i||z&&z.pause(),Q=0,r&&(r.uncache=1),ze&&we(t,"refreshInit",ze),G&&(G.pause(),n.tween&&n.tween.kill()&&(n.tween=0)),!Pe)){for(var o=Ae.length;o--;)if(Ae[o].scroller===Oe&&Ae[o]!==je)return;we(Oe,"resize",Le),Pe||we(Oe,"scroll",De)}},je.kill=function(t,n){je.disable(t,n),z&&!n&&z.kill(),pt&&delete Ce[pt];var o=Ae.indexOf(je);o>=0&&Ae.splice(o,1),o===nt&&Ue>0&&nt--,o=0,Ae.forEach((function(t){return t.scroller===je.scroller&&(o=1)})),o||kt||(je.scroll.rec=0),i&&(i.scrollTrigger=null,t&&i.revert({kill:!1}),n||i.kill()),h&&[h,u,d,f].forEach((function(t){return t.parentNode&&t.parentNode.removeChild(t)})),Et===je&&(Et=0),bt&&(r&&(r.uncache=1),o=0,Ae.forEach((function(t){return t.pin===bt&&o++})),o||(r.spacer=0)),e.onKill&&e.onKill(je)},Ae.push(je),je.enable(!1,!1),ot&&ot(je),i&&i.add&&!m){var ai=je.update;je.update=function(){je.update=ai,a||c||je.refresh()},X.delayedCall(.01,je.update),m=.01,a=c=0}else je.refresh();bt&&function(){if(Tt!==Xe){var t=Tt=Xe;requestAnimationFrame((function(){return t===Xe&&Ne(!0)}))}}()}else this.update=this.refresh=this.kill=Yt},t.register=function(e){return F||(X=e||It(),Ht()&&window.document&&t.enable(),F=Mt),F},t.defaults=function(t){if(t)for(var e in t)ke[e]=t[e];return ke},t.disable=function(t,e){Mt=0,Ae.forEach((function(i){return i[e?"kill":"disable"](t)})),we(V,"wheel",De),we(N,"scroll",De),clearInterval(Q),we(N,"touchcancel",Yt),we(U,"touchstart",Yt),ye(we,N,"pointerdown,touchstart,mousedown",Rt),ye(we,N,"pointerup,touchend,mouseup",Bt),G.kill(),Vt(we);for(var i=0;i<w.length;i+=3)xe(we,w[i],w[i+1]),xe(we,w[i],w[i+2])},t.enable=function(){if(V=window,N=document,q=N.documentElement,U=N.body,X&&($=X.utils.toArray,Z=X.utils.clamp,vt=X.core.context||Yt,at=X.core.suppressOverwrites||Yt,mt=V.history.scrollRestoration||"auto",qe=V.pageYOffset,X.core.globals("ScrollTrigger",t),U)){Mt=1,(gt=document.createElement("div")).style.height="100vh",gt.style.position="absolute",Fe(),Lt(),z.register(X),t.isTouch=z.isTouch,pt=z.isTouch&&/(iPad|iPhone|iPod|Mac)/g.test(navigator.userAgent),ut=1===z.isTouch,be(V,"wheel",De),K=[V,N,q,U],X.matchMedia?(t.matchMedia=function(t){var e,i=X.matchMedia();for(e in t)i.add(e,t[e]);return i},X.addEventListener("matchMediaInit",(function(){return je()})),X.addEventListener("matchMediaRevert",(function(){return Ie()})),X.addEventListener("matchMedia",(function(){Ne(0,1),We("matchMedia")})),X.matchMedia("(orientation: portrait)",(function(){return Pe(),Pe}))):console.warn("Requires GSAP 3.11.0 or later"),Pe(),be(N,"scroll",De);var e,i,n=U.style,r=n.borderTopStyle,o=X.core.Animation.prototype;for(o.revert||Object.defineProperty(o,"revert",{value:function(){return this.time(-.01,!0)}}),n.borderTopStyle="solid",e=pe(U),L.m=Math.round(e.top+L.sc())||0,P.m=Math.round(e.left+P.sc())||0,r?n.borderTopStyle=r:n.removeProperty("border-top-style"),Q=setInterval(Me,250),X.delayedCall(.5,(function(){return _t=0})),be(N,"touchcancel",Yt),be(U,"touchstart",Yt),ye(be,N,"pointerdown,touchstart,mousedown",Rt),ye(be,N,"pointerup,touchend,mouseup",Bt),it=X.utils.checkPrefix("transform"),$e.push(it),F=Ot(),G=X.delayedCall(.2,Ne).pause(),st=[N,"visibilitychange",function(){var t=V.innerWidth,e=V.innerHeight;N.hidden?(rt=t,ot=e):rt===t&&ot===e||Le()},N,"DOMContentLoaded",Ne,V,"load",Ne,V,"resize",Le],Vt(be),Ae.forEach((function(t){return t.enable(0,1)})),i=0;i<w.length;i+=3)xe(we,w[i],w[i+1]),xe(we,w[i],w[i+2])}},t.config=function(e){"limitCallbacks"in e&&(xt=!!e.limitCallbacks);var i=e.syncInterval;i&&clearInterval(Q)||(Q=i)&&setInterval(Me,i),"ignoreMobileResize"in e&&(ut=1===t.isTouch&&e.ignoreMobileResize),"autoRefreshEvents"in e&&(Vt(we)||Vt(be,e.autoRefreshEvents||"none"),ct=-1===(e.autoRefreshEvents+"").indexOf("resize"))},t.scrollerProxy=function(t,e){var i=R(t),n=w.indexOf(i),r=jt(i);~n&&w.splice(n,r?6:2),e&&(r?x.unshift(V,e,U,e,q,e):x.unshift(i,e))},t.clearMatchMedia=function(t){Ae.forEach((function(e){return e._ctx&&e._ctx.query===t&&e._ctx.kill(!0,!0)}))},t.isInViewport=function(t,e,i){var n=(Nt(t)?R(t):t).getBoundingClientRect(),r=n[i?ee:ie]*e||0;return i?n.right-r>0&&n.left+r<V.innerWidth:n.bottom-r>0&&n.top+r<V.innerHeight},t.positionInViewport=function(t,e,i){Nt(t)&&(t=R(t));var n=t.getBoundingClientRect(),r=n[i?ee:ie],o=null==e?r/2:e in Te?Te[e]*r:~e.indexOf("%")?parseFloat(e)*r/100:parseFloat(e)||0;return i?(n.left+o)/V.innerWidth:(n.top+o)/V.innerHeight},t.killAll=function(t){if(Ae.slice(0).forEach((function(t){return"ScrollSmoother"!==t.vars.id&&t.kill()})),!0!==t){var e=Re.killAll||[];Re={},e.forEach((function(t){return t()}))}},t}();ai.version="3.12.5",ai.saveStyles=function(t){return t?$(t).forEach((function(t){if(t&&t.style){var e=He.indexOf(t);e>=0&&He.splice(e,5),He.push(t,t.style.cssText,t.getBBox&&t.getAttribute("transform"),X.core.getCache(t),vt())}})):He},ai.revert=function(t,e){return je(!t,e)},ai.create=function(t,e){return new ai(t,e)},ai.refresh=function(t){return t?Le():(F||ai.register())&&Ne(!0)},ai.update=function(t){return++w.cache&&Ke(!0===t?2:0)},ai.clearScrollMemory=ze,ai.maxScroll=function(t,e){return Ft(t,e?P:L)},ai.getScrollFunc=function(t,e){return B(R(t),e?P:L)},ai.getById=function(t){return Ce[t]},ai.getAll=function(){return Ae.filter((function(t){return"ScrollSmoother"!==t.vars.id}))},ai.isScrolling=function(){return!!Ct},ai.snapDirectional=ge,ai.addEventListener=function(t,e){var i=Re[t]||(Re[t]=[]);~i.indexOf(e)||i.push(e)},ai.removeEventListener=function(t,e){var i=Re[t],n=i&&i.indexOf(e);n>=0&&i.splice(n,1)},ai.batch=function(t,e){var i,n=[],r={},o=e.interval||.016,s=e.batchMax||1e9,l=function(t,e){var i=[],n=[],r=X.delayedCall(o,(function(){e(i,n),i=[],n=[]})).pause();return function(t){i.length||r.restart(!0),i.push(t.trigger),n.push(t),s<=i.length&&r.progress(1)}};for(i in e)r[i]="on"===i.substr(0,2)&&qt(e[i])&&"onRefreshInit"!==i?l(0,e[i]):e[i];return qt(s)&&(s=s(),be(ai,"refresh",(function(){return s=e.batchMax()}))),$(t).forEach((function(t){var e={};for(i in r)e[i]=r[i];e.trigger=t,n.push(ai.create(e))})),n};var ci,hi=function(t,e,i,n){return e>n?t(n):e<0&&t(0),i>n?(n-e)/(i-e):i<0?e/(e-i):1},ui=function t(e,i){!0===i?e.style.removeProperty("touch-action"):e.style.touchAction=!0===i?"auto":i?"pan-"+i+(z.isTouch?" pinch-zoom":""):"none",e===q&&t(U,i)},di={auto:1,scroll:1},fi=function(t){var e,i=t.event,n=t.target,r=t.axis,o=(i.changedTouches?i.changedTouches[0]:i).target,s=o._gsap||X.core.getCache(o),l=Ot();if(!s._isScrollT||l-s._isScrollT>2e3){for(;o&&o!==U&&(o.scrollHeight<=o.clientHeight&&o.scrollWidth<=o.clientWidth||!di[(e=de(o)).overflowY]&&!di[e.overflowX]);)o=o.parentNode;s._isScroll=o&&o!==n&&!jt(o)&&(di[(e=de(o)).overflowY]||di[e.overflowX]),s._isScrollT=l}(s._isScroll||"x"===r)&&(i.stopPropagation(),i._gsapAllow=!0)},pi=function(t,e,i,n){return z.create({target:t,capture:!0,debounce:!1,lockAxis:!0,type:e,onWheel:n=n&&fi,onPress:n,onDrag:n,onScroll:n,onEnable:function(){return i&&be(N,z.eventTypes[0],mi,!1,!0)},onDisable:function(){return we(N,z.eventTypes[0],mi,!0)}})},vi=/(input|label|select|textarea)/i,mi=function(t){var e=vi.test(t.target.tagName);(e||ci)&&(t._gsapAllow=!0,ci=e)},gi=function(t){Kt(t)||(t={}),t.preventDefault=t.isNormalizer=t.allowClicks=!0,t.type||(t.type="wheel,touch"),t.debounce=!!t.debounce,t.id=t.id||"normalizer";var e,i,n,r,o,s,l,a,c=t,h=c.normalizeScrollX,u=c.momentum,d=c.allowNestedScroll,f=c.onRelease,p=R(t.target)||q,v=X.core.globals().ScrollSmoother,m=v&&v.get(),g=pt&&(t.content&&R(t.content)||m&&!1!==t.content&&!m.smooth()&&m.content()),y=B(p,L),b=B(p,P),x=1,S=(z.isTouch&&V.visualViewport?V.visualViewport.scale*V.visualViewport.width:V.outerWidth)/V.innerWidth,k=0,T=qt(u)?function(){return u(e)}:function(){return u||2.8},E=pi(p,t.type,!0,d),_=function(){return r=!1},O=Yt,A=Yt,C=function(){i=Ft(p,L),A=Z(pt?1:0,i),h&&(O=Z(0,Ft(p,P))),n=Xe},M=function(){g._gsap.y=Wt(parseFloat(g._gsap.y)+y.offset)+"px",g.style.transform="matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, "+parseFloat(g._gsap.y)+", 0, 1)",y.offset=y.cacheID=0},D=function(){C(),o.isActive()&&o.vars.scrollY>i&&(y()>i?o.progress(1)&&y(i):o.resetTo("scrollY",i))};return g&&X.set(g,{y:"+=0"}),t.ignoreCheck=function(t){return pt&&"touchmove"===t.type&&function(){if(r){requestAnimationFrame(_);var t=Wt(e.deltaY/2),i=A(y.v-t);if(g&&i!==y.v+y.offset){y.offset=i-y.v;var n=Wt((parseFloat(g&&g._gsap.y)||0)-y.offset);g.style.transform="matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, "+n+", 0, 1)",g._gsap.y=n+"px",y.cacheID=w.cache,Ke()}return!0}y.offset&&M(),r=!0}()||x>1.05&&"touchstart"!==t.type||e.isGesturing||t.touches&&t.touches.length>1},t.onPress=function(){r=!1;var t=x;x=Wt((V.visualViewport&&V.visualViewport.scale||1)/S),o.pause(),t!==x&&ui(p,x>1.01||!h&&"x"),s=b(),l=y(),C(),n=Xe},t.onRelease=t.onGestureStart=function(t,e){if(y.offset&&M(),e){w.cache++;var n,r,s=T();h&&(r=(n=b())+.05*s*-t.velocityX/.227,s*=hi(b,n,r,Ft(p,P)),o.vars.scrollX=O(r)),r=(n=y())+.05*s*-t.velocityY/.227,s*=hi(y,n,r,Ft(p,L)),o.vars.scrollY=A(r),o.invalidate().duration(s).play(.01),(pt&&o.vars.scrollY>=i||n>=i-1)&&X.to({},{onUpdate:D,duration:s})}else a.restart(!0);f&&f(t)},t.onWheel=function(){o._ts&&o.pause(),Ot()-k>1e3&&(n=0,k=Ot())},t.onChange=function(t,e,i,r,o){if(Xe!==n&&C(),e&&h&&b(O(r[2]===e?s+(t.startX-t.x):b()+e-r[1])),i){y.offset&&M();var a=o[2]===i,c=a?l+t.startY-t.y:y()+i-o[1],u=A(c);a&&c!==u&&(l+=u-c),y(u)}(i||e)&&Ke()},t.onEnable=function(){ui(p,!h&&"x"),ai.addEventListener("refresh",D),be(V,"resize",D),y.smooth&&(y.target.style.scrollBehavior="auto",y.smooth=b.smooth=!1),E.enable()},t.onDisable=function(){ui(p,!0),we(V,"resize",D),ai.removeEventListener("refresh",D),E.kill()},t.lockAxis=!1!==t.lockAxis,(e=new z(t)).iOS=pt,pt&&!y()&&y(1),pt&&X.ticker.add(Yt),a=e._dc,o=X.to(e,{ease:"power4",paused:!0,inherit:!1,scrollX:h?"+=0.1":"+=0",scrollY:"+=0.1",modifiers:{scrollY:oi(y,y(),(function(){return o.pause()}))},onUpdate:Ke,onComplete:a.vars.onComplete}),e};ai.sort=function(t){return Ae.sort(t||function(t,e){return-1e6*(t.vars.refreshPriority||0)+t.start-(e.start+-1e6*(e.vars.refreshPriority||0))})},ai.observe=function(t){return new z(t)},ai.normalizeScroll=function(t){if(void 0===t)return ht;if(!0===t&&ht)return ht.enable();if(!1===t)return ht&&ht.kill(),void(ht=t);var e=t instanceof z?t:gi(t);return ht&&ht.target===e.target&&ht.kill(),jt(e.target)&&(ht=e),e},ai.core={_getVelocityProp:Y,_inputObserver:pi,_scrollers:w,_proxies:x,bridge:{ss:function(){Ct||We("scrollStart"),Ct=Ot()},ref:function(){return tt}}},It()&&X.registerPlugin(ai)},6383:(t,e,i)=>{function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function r(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function o(t,e,i){return e&&r(t.prototype,e),i&&r(t,i),t}function s(t,e,i){return e in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t}function l(t,e){var i=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),i.push.apply(i,n)}return i}function a(t){for(var e=1;e<arguments.length;e++){var i=null!=arguments[e]?arguments[e]:{};e%2?l(Object(i),!0).forEach((function(e){s(t,e,i[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(i)):l(Object(i)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(i,e))}))}return t}function c(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&u(t,e)}function h(t){return h=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},h(t)}function u(t,e){return u=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},u(t,e)}function d(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function f(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var i,n=h(t);if(e){var r=h(this).constructor;i=Reflect.construct(n,arguments,r)}else i=n.apply(this,arguments);return function(t,e){return!e||"object"!=typeof e&&"function"!=typeof e?d(t):e}(this,i)}}function p(t,e,i){return p="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,i){var n=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=h(t)););return t}(t,e);if(n){var r=Object.getOwnPropertyDescriptor(n,e);return r.get?r.get.call(i):r.value}},p(t,e,i||t)}function v(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(t)))return;var i=[],n=!0,r=!1,o=void 0;try{for(var s,l=t[Symbol.iterator]();!(n=(s=l.next()).done)&&(i.push(s.value),!e||i.length!==e);n=!0);}catch(t){r=!0,o=t}finally{try{n||null==l.return||l.return()}finally{if(r)throw o}}return i}(t,e)||g(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function m(t){return function(t){if(Array.isArray(t))return y(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||g(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function g(t,e){if(t){if("string"==typeof t)return y(t,e);var i=Object.prototype.toString.call(t).slice(8,-1);return"Object"===i&&t.constructor&&(i=t.constructor.name),"Map"===i||"Set"===i?Array.from(t):"Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)?y(t,e):void 0}}function y(t,e){(null==e||e>t.length)&&(e=t.length);for(var i=0,n=new Array(e);i<e;i++)n[i]=t[i];return n}i.d(e,{Ay:()=>dt});var b={el:document,name:"scroll",offset:[0,0],repeat:!1,smooth:!1,initPosition:{x:0,y:0},direction:"vertical",gestureDirection:"vertical",reloadOnContextChange:!1,lerp:.1,class:"is-inview",scrollbarContainer:!1,scrollbarClass:"c-scrollbar",scrollingClass:"has-scroll-scrolling",draggingClass:"has-scroll-dragging",smoothClass:"has-scroll-smooth",initClass:"has-scroll-init",getSpeed:!1,getDirection:!1,scrollFromAnywhere:!1,multiplier:1,firefoxMultiplier:50,touchMultiplier:2,resetNativeScroll:!0,tablet:{smooth:!1,direction:"vertical",gestureDirection:"vertical",breakpoint:1024},smartphone:{smooth:!1,direction:"vertical",gestureDirection:"vertical"}},w=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};n(this,t),Object.assign(this,b,e),this.smartphone=b.smartphone,e.smartphone&&Object.assign(this.smartphone,e.smartphone),this.tablet=b.tablet,e.tablet&&Object.assign(this.tablet,e.tablet),this.namespace="locomotive",this.html=document.documentElement,this.windowHeight=window.innerHeight,this.windowWidth=window.innerWidth,this.windowMiddle={x:this.windowWidth/2,y:this.windowHeight/2},this.els={},this.currentElements={},this.listeners={},this.hasScrollTicking=!1,this.hasCallEventSet=!1,this.checkScroll=this.checkScroll.bind(this),this.checkResize=this.checkResize.bind(this),this.checkEvent=this.checkEvent.bind(this),this.instance={scroll:{x:0,y:0},limit:{x:this.html.offsetWidth,y:this.html.offsetHeight},currentElements:this.currentElements},this.isMobile?this.isTablet?this.context="tablet":this.context="smartphone":this.context="desktop",this.isMobile&&(this.direction=this[this.context].direction),"horizontal"===this.direction?this.directionAxis="x":this.directionAxis="y",this.getDirection&&(this.instance.direction=null),this.getDirection&&(this.instance.speed=0),this.html.classList.add(this.initClass),window.addEventListener("resize",this.checkResize,!1)}return o(t,[{key:"init",value:function(){this.initEvents()}},{key:"checkScroll",value:function(){this.dispatchScroll()}},{key:"checkResize",value:function(){var t=this;this.resizeTick||(this.resizeTick=!0,requestAnimationFrame((function(){t.resize(),t.resizeTick=!1})))}},{key:"resize",value:function(){}},{key:"checkContext",value:function(){if(this.reloadOnContextChange){this.isMobile=/Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||"MacIntel"===navigator.platform&&navigator.maxTouchPoints>1||this.windowWidth<this.tablet.breakpoint,this.isTablet=this.isMobile&&this.windowWidth>=this.tablet.breakpoint;var t=this.context;if(this.isMobile?this.isTablet?this.context="tablet":this.context="smartphone":this.context="desktop",t!=this.context)("desktop"==t?this.smooth:this[t].smooth)!=("desktop"==this.context?this.smooth:this[this.context].smooth)&&window.location.reload()}}},{key:"initEvents",value:function(){var t=this;this.scrollToEls=this.el.querySelectorAll("[data-".concat(this.name,"-to]")),this.setScrollTo=this.setScrollTo.bind(this),this.scrollToEls.forEach((function(e){e.addEventListener("click",t.setScrollTo,!1)}))}},{key:"setScrollTo",value:function(t){t.preventDefault(),this.scrollTo(t.currentTarget.getAttribute("data-".concat(this.name,"-href"))||t.currentTarget.getAttribute("href"),{offset:t.currentTarget.getAttribute("data-".concat(this.name,"-offset"))})}},{key:"addElements",value:function(){}},{key:"detectElements",value:function(t){var e=this,i=this.instance.scroll.y,n=i+this.windowHeight,r=this.instance.scroll.x,o=r+this.windowWidth;Object.entries(this.els).forEach((function(s){var l=v(s,2),a=l[0],c=l[1];if(!c||c.inView&&!t||("horizontal"===e.direction?o>=c.left&&r<c.right&&e.setInView(c,a):n>=c.top&&i<c.bottom&&e.setInView(c,a)),c&&c.inView)if("horizontal"===e.direction){var h=c.right-c.left;c.progress=(e.instance.scroll.x-(c.left-e.windowWidth))/(h+e.windowWidth),(o<c.left||r>c.right)&&e.setOutOfView(c,a)}else{var u=c.bottom-c.top;c.progress=(e.instance.scroll.y-(c.top-e.windowHeight))/(u+e.windowHeight),(n<c.top||i>c.bottom)&&e.setOutOfView(c,a)}})),this.hasScrollTicking=!1}},{key:"setInView",value:function(t,e){this.els[e].inView=!0,t.el.classList.add(t.class),this.currentElements[e]=t,t.call&&this.hasCallEventSet&&(this.dispatchCall(t,"enter"),t.repeat||(this.els[e].call=!1))}},{key:"setOutOfView",value:function(t,e){var i=this;this.els[e].inView=!1,Object.keys(this.currentElements).forEach((function(t){t===e&&delete i.currentElements[t]})),t.call&&this.hasCallEventSet&&this.dispatchCall(t,"exit"),t.repeat&&t.el.classList.remove(t.class)}},{key:"dispatchCall",value:function(t,e){this.callWay=e,this.callValue=t.call.split(",").map((function(t){return t.trim()})),this.callObj=t,1==this.callValue.length&&(this.callValue=this.callValue[0]);var i=new Event(this.namespace+"call");this.el.dispatchEvent(i)}},{key:"dispatchScroll",value:function(){var t=new Event(this.namespace+"scroll");this.el.dispatchEvent(t)}},{key:"setEvents",value:function(t,e){this.listeners[t]||(this.listeners[t]=[]);var i=this.listeners[t];i.push(e),1===i.length&&this.el.addEventListener(this.namespace+t,this.checkEvent,!1),"call"===t&&(this.hasCallEventSet=!0,this.detectElements(!0))}},{key:"unsetEvents",value:function(t,e){if(this.listeners[t]){var i=this.listeners[t],n=i.indexOf(e);n<0||(i.splice(n,1),0===i.index&&this.el.removeEventListener(this.namespace+t,this.checkEvent,!1))}}},{key:"checkEvent",value:function(t){var e=this,i=t.type.replace(this.namespace,""),n=this.listeners[i];n&&0!==n.length&&n.forEach((function(t){switch(i){case"scroll":return t(e.instance);case"call":return t(e.callValue,e.callWay,e.callObj);default:return t()}}))}},{key:"startScroll",value:function(){}},{key:"stopScroll",value:function(){}},{key:"setScroll",value:function(t,e){this.instance.scroll={x:0,y:0}}},{key:"destroy",value:function(){var t=this;window.removeEventListener("resize",this.checkResize,!1),Object.keys(this.listeners).forEach((function(e){t.el.removeEventListener(t.namespace+e,t.checkEvent,!1)})),this.listeners={},this.scrollToEls.forEach((function(e){e.removeEventListener("click",t.setScrollTo,!1)})),this.html.classList.remove(this.initClass)}}]),t}(),x="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==i.g?i.g:"undefined"!=typeof self?self:{};function S(t,e){return t(e={exports:{}},e.exports),e.exports}var k=S((function(t,e){t.exports={polyfill:function(){var t=window,e=document;if(!("scrollBehavior"in e.documentElement.style)||!0===t.__forceSmoothScrollPolyfill__){var i,n=t.HTMLElement||t.Element,r=468,o={scroll:t.scroll||t.scrollTo,scrollBy:t.scrollBy,elementScroll:n.prototype.scroll||a,scrollIntoView:n.prototype.scrollIntoView},s=t.performance&&t.performance.now?t.performance.now.bind(t.performance):Date.now,l=(i=t.navigator.userAgent,new RegExp(["MSIE ","Trident/","Edge/"].join("|")).test(i)?1:0);t.scroll=t.scrollTo=function(){void 0!==arguments[0]&&(!0!==c(arguments[0])?p.call(t,e.body,void 0!==arguments[0].left?~~arguments[0].left:t.scrollX||t.pageXOffset,void 0!==arguments[0].top?~~arguments[0].top:t.scrollY||t.pageYOffset):o.scroll.call(t,void 0!==arguments[0].left?arguments[0].left:"object"!=typeof arguments[0]?arguments[0]:t.scrollX||t.pageXOffset,void 0!==arguments[0].top?arguments[0].top:void 0!==arguments[1]?arguments[1]:t.scrollY||t.pageYOffset))},t.scrollBy=function(){void 0!==arguments[0]&&(c(arguments[0])?o.scrollBy.call(t,void 0!==arguments[0].left?arguments[0].left:"object"!=typeof arguments[0]?arguments[0]:0,void 0!==arguments[0].top?arguments[0].top:void 0!==arguments[1]?arguments[1]:0):p.call(t,e.body,~~arguments[0].left+(t.scrollX||t.pageXOffset),~~arguments[0].top+(t.scrollY||t.pageYOffset)))},n.prototype.scroll=n.prototype.scrollTo=function(){if(void 0!==arguments[0])if(!0!==c(arguments[0])){var t=arguments[0].left,e=arguments[0].top;p.call(this,this,void 0===t?this.scrollLeft:~~t,void 0===e?this.scrollTop:~~e)}else{if("number"==typeof arguments[0]&&void 0===arguments[1])throw new SyntaxError("Value could not be converted");o.elementScroll.call(this,void 0!==arguments[0].left?~~arguments[0].left:"object"!=typeof arguments[0]?~~arguments[0]:this.scrollLeft,void 0!==arguments[0].top?~~arguments[0].top:void 0!==arguments[1]?~~arguments[1]:this.scrollTop)}},n.prototype.scrollBy=function(){void 0!==arguments[0]&&(!0!==c(arguments[0])?this.scroll({left:~~arguments[0].left+this.scrollLeft,top:~~arguments[0].top+this.scrollTop,behavior:arguments[0].behavior}):o.elementScroll.call(this,void 0!==arguments[0].left?~~arguments[0].left+this.scrollLeft:~~arguments[0]+this.scrollLeft,void 0!==arguments[0].top?~~arguments[0].top+this.scrollTop:~~arguments[1]+this.scrollTop))},n.prototype.scrollIntoView=function(){if(!0!==c(arguments[0])){var i=function(t){for(;t!==e.body&&!1===d(t);)t=t.parentNode||t.host;return t}(this),n=i.getBoundingClientRect(),r=this.getBoundingClientRect();i!==e.body?(p.call(this,i,i.scrollLeft+r.left-n.left,i.scrollTop+r.top-n.top),"fixed"!==t.getComputedStyle(i).position&&t.scrollBy({left:n.left,top:n.top,behavior:"smooth"})):t.scrollBy({left:r.left,top:r.top,behavior:"smooth"})}else o.scrollIntoView.call(this,void 0===arguments[0]||arguments[0])}}function a(t,e){this.scrollLeft=t,this.scrollTop=e}function c(t){if(null===t||"object"!=typeof t||void 0===t.behavior||"auto"===t.behavior||"instant"===t.behavior)return!0;if("object"==typeof t&&"smooth"===t.behavior)return!1;throw new TypeError("behavior member of ScrollOptions "+t.behavior+" is not a valid value for enumeration ScrollBehavior.")}function h(t,e){return"Y"===e?t.clientHeight+l<t.scrollHeight:"X"===e?t.clientWidth+l<t.scrollWidth:void 0}function u(e,i){var n=t.getComputedStyle(e,null)["overflow"+i];return"auto"===n||"scroll"===n}function d(t){var e=h(t,"Y")&&u(t,"Y"),i=h(t,"X")&&u(t,"X");return e||i}function f(e){var i,n,o,l,a=(s()-e.startTime)/r;l=a=a>1?1:a,i=.5*(1-Math.cos(Math.PI*l)),n=e.startX+(e.x-e.startX)*i,o=e.startY+(e.y-e.startY)*i,e.method.call(e.scrollable,n,o),n===e.x&&o===e.y||t.requestAnimationFrame(f.bind(t,e))}function p(i,n,r){var l,c,h,u,d=s();i===e.body?(l=t,c=t.scrollX||t.pageXOffset,h=t.scrollY||t.pageYOffset,u=o.scroll):(l=i,c=i.scrollLeft,h=i.scrollTop,u=a),f({scrollable:l,method:u,startTime:d,startX:c,startY:h,x:n,y:r})}}}})),T=(k.polyfill,function(t){c(i,t);var e=f(i);function i(){var t,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return n(this,i),(t=e.call(this,r)).resetNativeScroll&&(history.scrollRestoration&&(history.scrollRestoration="manual"),window.scrollTo(0,0)),window.addEventListener("scroll",t.checkScroll,!1),void 0===window.smoothscrollPolyfill&&(window.smoothscrollPolyfill=k,window.smoothscrollPolyfill.polyfill()),t}return o(i,[{key:"init",value:function(){this.instance.scroll.y=window.pageYOffset,this.addElements(),this.detectElements(),p(h(i.prototype),"init",this).call(this)}},{key:"checkScroll",value:function(){var t=this;p(h(i.prototype),"checkScroll",this).call(this),this.getDirection&&this.addDirection(),this.getSpeed&&(this.addSpeed(),this.speedTs=Date.now()),this.instance.scroll.y=window.pageYOffset,Object.entries(this.els).length&&(this.hasScrollTicking||(requestAnimationFrame((function(){t.detectElements()})),this.hasScrollTicking=!0))}},{key:"addDirection",value:function(){window.pageYOffset>this.instance.scroll.y?"down"!==this.instance.direction&&(this.instance.direction="down"):window.pageYOffset<this.instance.scroll.y&&"up"!==this.instance.direction&&(this.instance.direction="up")}},{key:"addSpeed",value:function(){window.pageYOffset!=this.instance.scroll.y?this.instance.speed=(window.pageYOffset-this.instance.scroll.y)/Math.max(1,Date.now()-this.speedTs):this.instance.speed=0}},{key:"resize",value:function(){Object.entries(this.els).length&&(this.windowHeight=window.innerHeight,this.updateElements())}},{key:"addElements",value:function(){var t=this;this.els={},this.el.querySelectorAll("[data-"+this.name+"]").forEach((function(e,i){e.getBoundingClientRect();var n,r,o,s=e.dataset[t.name+"Class"]||t.class,l="string"==typeof e.dataset[t.name+"Id"]?e.dataset[t.name+"Id"]:i,a="string"==typeof e.dataset[t.name+"Offset"]?e.dataset[t.name+"Offset"].split(","):t.offset,c=e.dataset[t.name+"Repeat"],h=e.dataset[t.name+"Call"],u=e.dataset[t.name+"Target"],d=(o=void 0!==u?document.querySelector("".concat(u)):e).getBoundingClientRect();n=d.top+t.instance.scroll.y,r=d.left+t.instance.scroll.x;var f=n+o.offsetHeight,p=r+o.offsetWidth;c="false"!=c&&(null!=c||t.repeat);var v=t.getRelativeOffset(a),m={el:e,targetEl:o,id:l,class:s,top:n+=v[0],bottom:f-=v[1],left:r,right:p,offset:a,progress:0,repeat:c,inView:!1,call:h};t.els[l]=m,e.classList.contains(s)&&t.setInView(t.els[l],l)}))}},{key:"updateElements",value:function(){var t=this;Object.entries(this.els).forEach((function(e){var i=v(e,2),n=i[0],r=i[1],o=r.targetEl.getBoundingClientRect().top+t.instance.scroll.y,s=o+r.targetEl.offsetHeight,l=t.getRelativeOffset(r.offset);t.els[n].top=o+l[0],t.els[n].bottom=s-l[1]})),this.hasScrollTicking=!1}},{key:"getRelativeOffset",value:function(t){var e=[0,0];if(t)for(var i=0;i<t.length;i++)"string"==typeof t[i]?t[i].includes("%")?e[i]=parseInt(t[i].replace("%","")*this.windowHeight/100):e[i]=parseInt(t[i]):e[i]=t[i];return e}},{key:"scrollTo",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=parseInt(e.offset)||0,n=!!e.callback&&e.callback;if("string"==typeof t){if("top"===t)t=this.html;else if("bottom"===t)t=this.html.offsetHeight-window.innerHeight;else if(!(t=document.querySelector(t)))return}else if("number"==typeof t)t=parseInt(t);else if(!t||!t.tagName)return void console.warn("`target` parameter is not valid");i="number"!=typeof t?t.getBoundingClientRect().top+i+this.instance.scroll.y:t+i;var r=function(){return parseInt(window.pageYOffset)===parseInt(i)};if(n){if(r())return void n();window.addEventListener("scroll",(function t(){r()&&(window.removeEventListener("scroll",t),n())}))}window.scrollTo({top:i,behavior:0===e.duration?"auto":"smooth"})}},{key:"update",value:function(){this.addElements(),this.detectElements()}},{key:"destroy",value:function(){p(h(i.prototype),"destroy",this).call(this),window.removeEventListener("scroll",this.checkScroll,!1)}}]),i}(w)),E=Object.getOwnPropertySymbols,_=Object.prototype.hasOwnProperty,O=Object.prototype.propertyIsEnumerable;var A=function(){try{if(!Object.assign)return!1;var t=new String("abc");if(t[5]="de","5"===Object.getOwnPropertyNames(t)[0])return!1;for(var e={},i=0;i<10;i++)e["_"+String.fromCharCode(i)]=i;if("0123456789"!==Object.getOwnPropertyNames(e).map((function(t){return e[t]})).join(""))return!1;var n={};return"abcdefghijklmnopqrst".split("").forEach((function(t){n[t]=t})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},n)).join("")}catch(t){return!1}}()?Object.assign:function(t,e){for(var i,n,r=function(t){if(null==t)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(t)}(t),o=1;o<arguments.length;o++){for(var s in i=Object(arguments[o]))_.call(i,s)&&(r[s]=i[s]);if(E){n=E(i);for(var l=0;l<n.length;l++)O.call(i,n[l])&&(r[n[l]]=i[n[l]])}}return r};function C(){}C.prototype={on:function(t,e,i){var n=this.e||(this.e={});return(n[t]||(n[t]=[])).push({fn:e,ctx:i}),this},once:function(t,e,i){var n=this;function r(){n.off(t,r),e.apply(i,arguments)}return r._=e,this.on(t,r,i)},emit:function(t){for(var e=[].slice.call(arguments,1),i=((this.e||(this.e={}))[t]||[]).slice(),n=0,r=i.length;n<r;n++)i[n].fn.apply(i[n].ctx,e);return this},off:function(t,e){var i=this.e||(this.e={}),n=i[t],r=[];if(n&&e)for(var o=0,s=n.length;o<s;o++)n[o].fn!==e&&n[o].fn._!==e&&r.push(n[o]);return r.length?i[t]=r:delete i[t],this}};var M=C,D=S((function(t,e){(function(){(null!==e?e:this).Lethargy=function(){function t(t,e,i,n){this.stability=null!=t?Math.abs(t):8,this.sensitivity=null!=e?1+Math.abs(e):100,this.tolerance=null!=i?1+Math.abs(i):1.1,this.delay=null!=n?n:150,this.lastUpDeltas=function(){var t,e,i;for(i=[],t=1,e=2*this.stability;1<=e?t<=e:t>=e;1<=e?t++:t--)i.push(null);return i}.call(this),this.lastDownDeltas=function(){var t,e,i;for(i=[],t=1,e=2*this.stability;1<=e?t<=e:t>=e;1<=e?t++:t--)i.push(null);return i}.call(this),this.deltasTimestamp=function(){var t,e,i;for(i=[],t=1,e=2*this.stability;1<=e?t<=e:t>=e;1<=e?t++:t--)i.push(null);return i}.call(this)}return t.prototype.check=function(t){var e;return null!=(t=t.originalEvent||t).wheelDelta?e=t.wheelDelta:null!=t.deltaY?e=-40*t.deltaY:null==t.detail&&0!==t.detail||(e=-40*t.detail),this.deltasTimestamp.push(Date.now()),this.deltasTimestamp.shift(),e>0?(this.lastUpDeltas.push(e),this.lastUpDeltas.shift(),this.isInertia(1)):(this.lastDownDeltas.push(e),this.lastDownDeltas.shift(),this.isInertia(-1))},t.prototype.isInertia=function(t){var e,i,n,r,o,s,l;return null===(e=-1===t?this.lastDownDeltas:this.lastUpDeltas)[0]?t:!(this.deltasTimestamp[2*this.stability-2]+this.delay>Date.now()&&e[0]===e[2*this.stability-1])&&(n=e.slice(0,this.stability),i=e.slice(this.stability,2*this.stability),l=n.reduce((function(t,e){return t+e})),o=i.reduce((function(t,e){return t+e})),s=l/n.length,r=o/i.length,Math.abs(s)<Math.abs(r*this.tolerance)&&this.sensitivity<Math.abs(r)&&t)},t.prototype.showLastUpDeltas=function(){return this.lastUpDeltas},t.prototype.showLastDownDeltas=function(){return this.lastDownDeltas},t}()}).call(x)})),P={hasWheelEvent:"onwheel"in document,hasMouseWheelEvent:"onmousewheel"in document,hasTouch:"ontouchstart"in window||window.TouchEvent||window.DocumentTouch&&document instanceof DocumentTouch,hasTouchWin:navigator.msMaxTouchPoints&&navigator.msMaxTouchPoints>1,hasPointer:!!window.navigator.msPointerEnabled,hasKeyDown:"onkeydown"in document,isFirefox:navigator.userAgent.indexOf("Firefox")>-1},L=Object.prototype.toString,R=Object.prototype.hasOwnProperty;function B(t,e){return function(){return t.apply(e,arguments)}}var Y=D.Lethargy,W="virtualscroll",H=V,I=37,j=38,z=39,X=40,F=32;function V(t){!function(t){if(!t)return console.warn("bindAll requires at least one argument.");var e=Array.prototype.slice.call(arguments,1);if(0===e.length)for(var i in t)R.call(t,i)&&"function"==typeof t[i]&&"[object Function]"==L.call(t[i])&&e.push(i);for(var n=0;n<e.length;n++){var r=e[n];t[r]=B(t[r],t)}}(this,"_onWheel","_onMouseWheel","_onTouchStart","_onTouchMove","_onKeyDown"),this.el=window,t&&t.el&&(this.el=t.el,delete t.el),this.options=A({mouseMultiplier:1,touchMultiplier:2,firefoxMultiplier:15,keyStep:120,preventTouch:!1,unpreventTouchClass:"vs-touchmove-allowed",limitInertia:!1,useKeyboard:!0,useTouch:!0},t),this.options.limitInertia&&(this._lethargy=new Y),this._emitter=new M,this._event={y:0,x:0,deltaX:0,deltaY:0},this.touchStartX=null,this.touchStartY=null,this.bodyTouchAction=null,void 0!==this.options.passive&&(this.listenerOptions={passive:this.options.passive})}function N(t,e,i){return(1-i)*t+i*e}function q(t){var e={};if(window.getComputedStyle){var i=getComputedStyle(t),n=i.transform||i.webkitTransform||i.mozTransform,r=n.match(/^matrix3d\((.+)\)$/);return r?(e.x=r?parseFloat(r[1].split(", ")[12]):0,e.y=r?parseFloat(r[1].split(", ")[13]):0):(r=n.match(/^matrix\((.+)\)$/),e.x=r?parseFloat(r[1].split(", ")[4]):0,e.y=r?parseFloat(r[1].split(", ")[5]):0),e}}function U(t){for(var e=[];t&&t!==document;t=t.parentNode)e.push(t);return e}V.prototype._notify=function(t){var e=this._event;e.x+=e.deltaX,e.y+=e.deltaY,this._emitter.emit(W,{x:e.x,y:e.y,deltaX:e.deltaX,deltaY:e.deltaY,originalEvent:t})},V.prototype._onWheel=function(t){var e=this.options;if(!this._lethargy||!1!==this._lethargy.check(t)){var i=this._event;i.deltaX=t.wheelDeltaX||-1*t.deltaX,i.deltaY=t.wheelDeltaY||-1*t.deltaY,P.isFirefox&&1==t.deltaMode&&(i.deltaX*=e.firefoxMultiplier,i.deltaY*=e.firefoxMultiplier),i.deltaX*=e.mouseMultiplier,i.deltaY*=e.mouseMultiplier,this._notify(t)}},V.prototype._onMouseWheel=function(t){if(!this.options.limitInertia||!1!==this._lethargy.check(t)){var e=this._event;e.deltaX=t.wheelDeltaX?t.wheelDeltaX:0,e.deltaY=t.wheelDeltaY?t.wheelDeltaY:t.wheelDelta,this._notify(t)}},V.prototype._onTouchStart=function(t){var e=t.targetTouches?t.targetTouches[0]:t;this.touchStartX=e.pageX,this.touchStartY=e.pageY},V.prototype._onTouchMove=function(t){var e=this.options;e.preventTouch&&!t.target.classList.contains(e.unpreventTouchClass)&&t.preventDefault();var i=this._event,n=t.targetTouches?t.targetTouches[0]:t;i.deltaX=(n.pageX-this.touchStartX)*e.touchMultiplier,i.deltaY=(n.pageY-this.touchStartY)*e.touchMultiplier,this.touchStartX=n.pageX,this.touchStartY=n.pageY,this._notify(t)},V.prototype._onKeyDown=function(t){var e=this._event;e.deltaX=e.deltaY=0;var i=window.innerHeight-40;switch(t.keyCode){case I:case j:e.deltaY=this.options.keyStep;break;case z:case X:e.deltaY=-this.options.keyStep;break;case t.shiftKey:e.deltaY=i;break;case F:e.deltaY=-i;break;default:return}this._notify(t)},V.prototype._bind=function(){P.hasWheelEvent&&this.el.addEventListener("wheel",this._onWheel,this.listenerOptions),P.hasMouseWheelEvent&&this.el.addEventListener("mousewheel",this._onMouseWheel,this.listenerOptions),P.hasTouch&&this.options.useTouch&&(this.el.addEventListener("touchstart",this._onTouchStart,this.listenerOptions),this.el.addEventListener("touchmove",this._onTouchMove,this.listenerOptions)),P.hasPointer&&P.hasTouchWin&&(this.bodyTouchAction=document.body.style.msTouchAction,document.body.style.msTouchAction="none",this.el.addEventListener("MSPointerDown",this._onTouchStart,!0),this.el.addEventListener("MSPointerMove",this._onTouchMove,!0)),P.hasKeyDown&&this.options.useKeyboard&&document.addEventListener("keydown",this._onKeyDown)},V.prototype._unbind=function(){P.hasWheelEvent&&this.el.removeEventListener("wheel",this._onWheel),P.hasMouseWheelEvent&&this.el.removeEventListener("mousewheel",this._onMouseWheel),P.hasTouch&&(this.el.removeEventListener("touchstart",this._onTouchStart),this.el.removeEventListener("touchmove",this._onTouchMove)),P.hasPointer&&P.hasTouchWin&&(document.body.style.msTouchAction=this.bodyTouchAction,this.el.removeEventListener("MSPointerDown",this._onTouchStart,!0),this.el.removeEventListener("MSPointerMove",this._onTouchMove,!0)),P.hasKeyDown&&this.options.useKeyboard&&document.removeEventListener("keydown",this._onKeyDown)},V.prototype.on=function(t,e){this._emitter.on(W,t,e);var i=this._emitter.e;i&&i[W]&&1===i[W].length&&this._bind()},V.prototype.off=function(t,e){this._emitter.off(W,t,e);var i=this._emitter.e;(!i[W]||i[W].length<=0)&&this._unbind()},V.prototype.reset=function(){var t=this._event;t.x=0,t.y=0},V.prototype.destroy=function(){this._emitter.off(),this._unbind()};var K=.1,G="function"==typeof Float32Array;function $(t,e){return 1-3*e+3*t}function Z(t,e){return 3*e-6*t}function J(t){return 3*t}function Q(t,e,i){return(($(e,i)*t+Z(e,i))*t+J(e))*t}function tt(t,e,i){return 3*$(e,i)*t*t+2*Z(e,i)*t+J(e)}function et(t){return t}var it=function(t,e,i,n){if(!(0<=t&&t<=1&&0<=i&&i<=1))throw new Error("bezier x values must be in [0, 1] range");if(t===e&&i===n)return et;for(var r=G?new Float32Array(11):new Array(11),o=0;o<11;++o)r[o]=Q(o*K,t,i);function s(e){for(var n=0,o=1;10!==o&&r[o]<=e;++o)n+=K;--o;var s=n+(e-r[o])/(r[o+1]-r[o])*K,l=tt(s,t,i);return l>=.001?function(t,e,i,n){for(var r=0;r<4;++r){var o=tt(e,i,n);if(0===o)return e;e-=(Q(e,i,n)-t)/o}return e}(e,s,t,i):0===l?s:function(t,e,i,n,r){var o,s,l=0;do{(o=Q(s=e+(i-e)/2,n,r)-t)>0?i=s:e=s}while(Math.abs(o)>1e-7&&++l<10);return s}(e,n,n+K,t,i)}return function(t){return 0===t?0:1===t?1:Q(s(t),e,n)}},nt=38,rt=40,ot=32,st=9,lt=33,at=34,ct=36,ht=35,ut=function(t){c(i,t);var e=f(i);function i(){var t,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return n(this,i),history.scrollRestoration&&(history.scrollRestoration="manual"),window.scrollTo(0,0),(t=e.call(this,r)).inertia&&(t.lerp=.1*t.inertia),t.isScrolling=!1,t.isDraggingScrollbar=!1,t.isTicking=!1,t.hasScrollTicking=!1,t.parallaxElements={},t.stop=!1,t.scrollbarContainer=r.scrollbarContainer,t.checkKey=t.checkKey.bind(d(t)),window.addEventListener("keydown",t.checkKey,!1),t}return o(i,[{key:"init",value:function(){var t=this;this.html.classList.add(this.smoothClass),this.html.setAttribute("data-".concat(this.name,"-direction"),this.direction),this.instance=a({delta:{x:this.initPosition.x,y:this.initPosition.y},scroll:{x:this.initPosition.x,y:this.initPosition.y}},this.instance),this.vs=new H({el:this.scrollFromAnywhere?document:this.el,mouseMultiplier:navigator.platform.indexOf("Win")>-1?1:.4,firefoxMultiplier:this.firefoxMultiplier,touchMultiplier:this.touchMultiplier,useKeyboard:!1,passive:!0}),this.vs.on((function(e){t.stop||t.isDraggingScrollbar||requestAnimationFrame((function(){t.updateDelta(e),t.isScrolling||t.startScrolling()}))})),this.setScrollLimit(),this.initScrollBar(),this.addSections(),this.addElements(),this.checkScroll(!0),this.transformElements(!0,!0),p(h(i.prototype),"init",this).call(this)}},{key:"setScrollLimit",value:function(){if(this.instance.limit.y=this.el.offsetHeight-this.windowHeight,"horizontal"===this.direction){for(var t=0,e=this.el.children,i=0;i<e.length;i++)t+=e[i].offsetWidth;this.instance.limit.x=t-this.windowWidth}}},{key:"startScrolling",value:function(){this.startScrollTs=Date.now(),this.isScrolling=!0,this.checkScroll(),this.html.classList.add(this.scrollingClass)}},{key:"stopScrolling",value:function(){cancelAnimationFrame(this.checkScrollRaf),this.startScrollTs=void 0,this.scrollToRaf&&(cancelAnimationFrame(this.scrollToRaf),this.scrollToRaf=null),this.isScrolling=!1,this.instance.scroll.y=Math.round(this.instance.scroll.y),this.html.classList.remove(this.scrollingClass)}},{key:"checkKey",value:function(t){var e=this;if(this.stop)t.keyCode==st&&requestAnimationFrame((function(){e.html.scrollTop=0,document.body.scrollTop=0,e.html.scrollLeft=0,document.body.scrollLeft=0}));else{switch(t.keyCode){case st:requestAnimationFrame((function(){e.html.scrollTop=0,document.body.scrollTop=0,e.html.scrollLeft=0,document.body.scrollLeft=0,e.scrollTo(document.activeElement,{offset:-window.innerHeight/2})}));break;case nt:this.isActiveElementScrollSensitive()&&(this.instance.delta[this.directionAxis]-=240);break;case rt:this.isActiveElementScrollSensitive()&&(this.instance.delta[this.directionAxis]+=240);break;case lt:this.instance.delta[this.directionAxis]-=window.innerHeight;break;case at:this.instance.delta[this.directionAxis]+=window.innerHeight;break;case ct:this.instance.delta[this.directionAxis]-=this.instance.limit[this.directionAxis];break;case ht:this.instance.delta[this.directionAxis]+=this.instance.limit[this.directionAxis];break;case ot:this.isActiveElementScrollSensitive()&&(t.shiftKey?this.instance.delta[this.directionAxis]-=window.innerHeight:this.instance.delta[this.directionAxis]+=window.innerHeight);break;default:return}this.instance.delta[this.directionAxis]<0&&(this.instance.delta[this.directionAxis]=0),this.instance.delta[this.directionAxis]>this.instance.limit[this.directionAxis]&&(this.instance.delta[this.directionAxis]=this.instance.limit[this.directionAxis]),this.stopScrolling(),this.isScrolling=!0,this.checkScroll(),this.html.classList.add(this.scrollingClass)}}},{key:"isActiveElementScrollSensitive",value:function(){return!(document.activeElement instanceof HTMLInputElement||document.activeElement instanceof HTMLTextAreaElement||document.activeElement instanceof HTMLButtonElement||document.activeElement instanceof HTMLSelectElement)}},{key:"checkScroll",value:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(e||this.isScrolling||this.isDraggingScrollbar){this.hasScrollTicking||(this.checkScrollRaf=requestAnimationFrame((function(){return t.checkScroll()})),this.hasScrollTicking=!0),this.updateScroll();var n=Math.abs(this.instance.delta[this.directionAxis]-this.instance.scroll[this.directionAxis]),r=Date.now()-this.startScrollTs;if(!this.animatingScroll&&r>100&&(n<.5&&0!=this.instance.delta[this.directionAxis]||n<.5&&0==this.instance.delta[this.directionAxis])&&this.stopScrolling(),Object.entries(this.sections).forEach((function(i){var n=v(i,2),r=(n[0],n[1]);r.persistent||t.instance.scroll[t.directionAxis]>r.offset[t.directionAxis]&&t.instance.scroll[t.directionAxis]<r.limit[t.directionAxis]?("horizontal"===t.direction?t.transform(r.el,-t.instance.scroll[t.directionAxis],0):t.transform(r.el,0,-t.instance.scroll[t.directionAxis]),r.inView||(r.inView=!0,r.el.style.opacity=1,r.el.style.pointerEvents="all",r.el.setAttribute("data-".concat(t.name,"-section-inview"),""))):((r.inView||e)&&(r.inView=!1,r.el.style.opacity=0,r.el.style.pointerEvents="none",r.el.removeAttribute("data-".concat(t.name,"-section-inview"))),t.transform(r.el,0,0))})),this.getDirection&&this.addDirection(),this.getSpeed&&(this.addSpeed(),this.speedTs=Date.now()),this.detectElements(),this.transformElements(),this.hasScrollbar){var o=this.instance.scroll[this.directionAxis]/this.instance.limit[this.directionAxis]*this.scrollBarLimit[this.directionAxis];"horizontal"===this.direction?this.transform(this.scrollbarThumb,o,0):this.transform(this.scrollbarThumb,0,o)}p(h(i.prototype),"checkScroll",this).call(this),this.hasScrollTicking=!1}}},{key:"resize",value:function(){this.windowHeight=window.innerHeight,this.windowWidth=window.innerWidth,this.checkContext(),this.windowMiddle={x:this.windowWidth/2,y:this.windowHeight/2},this.update()}},{key:"updateDelta",value:function(t){var e,i=this[this.context]&&this[this.context].gestureDirection?this[this.context].gestureDirection:this.gestureDirection;e="both"===i?t.deltaX+t.deltaY:"vertical"===i?t.deltaY:"horizontal"===i?t.deltaX:t.deltaY,this.instance.delta[this.directionAxis]-=e*this.multiplier,this.instance.delta[this.directionAxis]<0&&(this.instance.delta[this.directionAxis]=0),this.instance.delta[this.directionAxis]>this.instance.limit[this.directionAxis]&&(this.instance.delta[this.directionAxis]=this.instance.limit[this.directionAxis])}},{key:"updateScroll",value:function(t){this.isScrolling||this.isDraggingScrollbar?this.instance.scroll[this.directionAxis]=N(this.instance.scroll[this.directionAxis],this.instance.delta[this.directionAxis],this.lerp):this.instance.scroll[this.directionAxis]>this.instance.limit[this.directionAxis]?this.setScroll(this.instance.scroll[this.directionAxis],this.instance.limit[this.directionAxis]):this.instance.scroll.y<0?this.setScroll(this.instance.scroll[this.directionAxis],0):this.setScroll(this.instance.scroll[this.directionAxis],this.instance.delta[this.directionAxis])}},{key:"addDirection",value:function(){this.instance.delta.y>this.instance.scroll.y?"down"!==this.instance.direction&&(this.instance.direction="down"):this.instance.delta.y<this.instance.scroll.y&&"up"!==this.instance.direction&&(this.instance.direction="up"),this.instance.delta.x>this.instance.scroll.x?"right"!==this.instance.direction&&(this.instance.direction="right"):this.instance.delta.x<this.instance.scroll.x&&"left"!==this.instance.direction&&(this.instance.direction="left")}},{key:"addSpeed",value:function(){this.instance.delta[this.directionAxis]!=this.instance.scroll[this.directionAxis]?this.instance.speed=(this.instance.delta[this.directionAxis]-this.instance.scroll[this.directionAxis])/Math.max(1,Date.now()-this.speedTs):this.instance.speed=0}},{key:"initScrollBar",value:function(){if(this.scrollbar=document.createElement("span"),this.scrollbarThumb=document.createElement("span"),this.scrollbar.classList.add("".concat(this.scrollbarClass)),this.scrollbarThumb.classList.add("".concat(this.scrollbarClass,"_thumb")),this.scrollbar.append(this.scrollbarThumb),this.scrollbarContainer?this.scrollbarContainer.append(this.scrollbar):document.body.append(this.scrollbar),this.getScrollBar=this.getScrollBar.bind(this),this.releaseScrollBar=this.releaseScrollBar.bind(this),this.moveScrollBar=this.moveScrollBar.bind(this),this.scrollbarThumb.addEventListener("mousedown",this.getScrollBar),window.addEventListener("mouseup",this.releaseScrollBar),window.addEventListener("mousemove",this.moveScrollBar),this.hasScrollbar=!1,"horizontal"==this.direction){if(this.instance.limit.x+this.windowWidth<=this.windowWidth)return}else if(this.instance.limit.y+this.windowHeight<=this.windowHeight)return;this.hasScrollbar=!0,this.scrollbarBCR=this.scrollbar.getBoundingClientRect(),this.scrollbarHeight=this.scrollbarBCR.height,this.scrollbarWidth=this.scrollbarBCR.width,"horizontal"===this.direction?this.scrollbarThumb.style.width="".concat(this.scrollbarWidth*this.scrollbarWidth/(this.instance.limit.x+this.scrollbarWidth),"px"):this.scrollbarThumb.style.height="".concat(this.scrollbarHeight*this.scrollbarHeight/(this.instance.limit.y+this.scrollbarHeight),"px"),this.scrollbarThumbBCR=this.scrollbarThumb.getBoundingClientRect(),this.scrollBarLimit={x:this.scrollbarWidth-this.scrollbarThumbBCR.width,y:this.scrollbarHeight-this.scrollbarThumbBCR.height}}},{key:"reinitScrollBar",value:function(){if(this.hasScrollbar=!1,"horizontal"==this.direction){if(this.instance.limit.x+this.windowWidth<=this.windowWidth)return}else if(this.instance.limit.y+this.windowHeight<=this.windowHeight)return;this.hasScrollbar=!0,this.scrollbarBCR=this.scrollbar.getBoundingClientRect(),this.scrollbarHeight=this.scrollbarBCR.height,this.scrollbarWidth=this.scrollbarBCR.width,"horizontal"===this.direction?this.scrollbarThumb.style.width="".concat(this.scrollbarWidth*this.scrollbarWidth/(this.instance.limit.x+this.scrollbarWidth),"px"):this.scrollbarThumb.style.height="".concat(this.scrollbarHeight*this.scrollbarHeight/(this.instance.limit.y+this.scrollbarHeight),"px"),this.scrollbarThumbBCR=this.scrollbarThumb.getBoundingClientRect(),this.scrollBarLimit={x:this.scrollbarWidth-this.scrollbarThumbBCR.width,y:this.scrollbarHeight-this.scrollbarThumbBCR.height}}},{key:"destroyScrollBar",value:function(){this.scrollbarThumb.removeEventListener("mousedown",this.getScrollBar),window.removeEventListener("mouseup",this.releaseScrollBar),window.removeEventListener("mousemove",this.moveScrollBar),this.scrollbar.remove()}},{key:"getScrollBar",value:function(t){this.isDraggingScrollbar=!0,this.checkScroll(),this.html.classList.remove(this.scrollingClass),this.html.classList.add(this.draggingClass)}},{key:"releaseScrollBar",value:function(t){this.isDraggingScrollbar=!1,this.isScrolling&&this.html.classList.add(this.scrollingClass),this.html.classList.remove(this.draggingClass)}},{key:"moveScrollBar",value:function(t){var e=this;this.isDraggingScrollbar&&requestAnimationFrame((function(){var i=100*(t.clientX-e.scrollbarBCR.left)/e.scrollbarWidth*e.instance.limit.x/100,n=100*(t.clientY-e.scrollbarBCR.top)/e.scrollbarHeight*e.instance.limit.y/100;n>0&&n<e.instance.limit.y&&(e.instance.delta.y=n),i>0&&i<e.instance.limit.x&&(e.instance.delta.x=i)}))}},{key:"addElements",value:function(){var t=this;this.els={},this.parallaxElements={},this.el.querySelectorAll("[data-".concat(this.name,"]")).forEach((function(e,i){var n,r,o,s=U(e),l=Object.entries(t.sections).map((function(t){var e=v(t,2);e[0];return e[1]})).find((function(t){return s.includes(t.el)})),a=e.dataset[t.name+"Class"]||t.class,c="string"==typeof e.dataset[t.name+"Id"]?e.dataset[t.name+"Id"]:"el"+i,h=e.dataset[t.name+"Repeat"],u=e.dataset[t.name+"Call"],d=e.dataset[t.name+"Position"],f=e.dataset[t.name+"Delay"],p=e.dataset[t.name+"Direction"],m="string"==typeof e.dataset[t.name+"Sticky"],g=!!e.dataset[t.name+"Speed"]&&parseFloat(e.dataset[t.name+"Speed"])/10,y="string"==typeof e.dataset[t.name+"Offset"]?e.dataset[t.name+"Offset"].split(","):t.offset,b=e.dataset[t.name+"Target"],w=(o=void 0!==b?document.querySelector("".concat(b)):e).getBoundingClientRect();null===l||l.inView?(n=w.top+t.instance.scroll.y-q(o).y,r=w.left+t.instance.scroll.x-q(o).x):(n=w.top-q(l.el).y-q(o).y,r=w.left-q(l.el).x-q(o).x);var x=n+o.offsetHeight,S=r+o.offsetWidth,k={x:(S-r)/2+r,y:(x-n)/2+n};if(m){var T=e.getBoundingClientRect(),E=T.top,_=T.left,O={x:_-r,y:E-n};n+=window.innerHeight,r+=window.innerWidth,x=E+o.offsetHeight-e.offsetHeight-O[t.directionAxis],k={x:((S=_+o.offsetWidth-e.offsetWidth-O[t.directionAxis])-r)/2+r,y:(x-n)/2+n}}h="false"!=h&&(null!=h||t.repeat);var A=[0,0];if(y)if("horizontal"===t.direction){for(var C=0;C<y.length;C++)"string"==typeof y[C]?y[C].includes("%")?A[C]=parseInt(y[C].replace("%","")*t.windowWidth/100):A[C]=parseInt(y[C]):A[C]=y[C];r+=A[0],S-=A[1]}else{for(C=0;C<y.length;C++)"string"==typeof y[C]?y[C].includes("%")?A[C]=parseInt(y[C].replace("%","")*t.windowHeight/100):A[C]=parseInt(y[C]):A[C]=y[C];n+=A[0],x-=A[1]}var M={el:e,id:c,class:a,section:l,top:n,middle:k,bottom:x,left:r,right:S,offset:y,progress:0,repeat:h,inView:!1,call:u,speed:g,delay:f,position:d,target:o,direction:p,sticky:m};t.els[c]=M,e.classList.contains(a)&&t.setInView(t.els[c],c),(!1!==g||m)&&(t.parallaxElements[c]=M)}))}},{key:"addSections",value:function(){var t=this;this.sections={};var e=this.el.querySelectorAll("[data-".concat(this.name,"-section]"));0===e.length&&(e=[this.el]),e.forEach((function(e,i){var n="string"==typeof e.dataset[t.name+"Id"]?e.dataset[t.name+"Id"]:"section"+i,r=e.getBoundingClientRect(),o={x:r.left-1.5*window.innerWidth-q(e).x,y:r.top-1.5*window.innerHeight-q(e).y},s={x:o.x+r.width+2*window.innerWidth,y:o.y+r.height+2*window.innerHeight},l="string"==typeof e.dataset[t.name+"Persistent"];e.setAttribute("data-scroll-section-id",n);var a={el:e,offset:o,limit:s,inView:!1,persistent:l,id:n};t.sections[n]=a}))}},{key:"transform",value:function(t,e,i,n){var r;if(n){var o=q(t),s=N(o.x,e,n),l=N(o.y,i,n);r="matrix3d(1,0,0.00,0,0.00,1,0.00,0,0,0,1,0,".concat(s,",").concat(l,",0,1)")}else r="matrix3d(1,0,0.00,0,0.00,1,0.00,0,0,0,1,0,".concat(e,",").concat(i,",0,1)");t.style.webkitTransform=r,t.style.msTransform=r,t.style.transform=r}},{key:"transformElements",value:function(t){var e=this,i=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=this.instance.scroll.x+this.windowWidth,r=this.instance.scroll.y+this.windowHeight,o={x:this.instance.scroll.x+this.windowMiddle.x,y:this.instance.scroll.y+this.windowMiddle.y};Object.entries(this.parallaxElements).forEach((function(s){var l=v(s,2),a=(l[0],l[1]),c=!1;if(t&&(c=0),a.inView||i)switch(a.position){case"top":case"left":c=e.instance.scroll[e.directionAxis]*-a.speed;break;case"elementTop":c=(r-a.top)*-a.speed;break;case"bottom":c=(e.instance.limit[e.directionAxis]-r+e.windowHeight)*a.speed;break;case"elementLeft":c=(n-a.left)*-a.speed;break;case"right":c=(e.instance.limit[e.directionAxis]-n+e.windowHeight)*a.speed;break;default:c=(o[e.directionAxis]-a.middle[e.directionAxis])*-a.speed}a.sticky&&(c=a.inView?"horizontal"===e.direction?e.instance.scroll.x-a.left+window.innerWidth:e.instance.scroll.y-a.top+window.innerHeight:"horizontal"===e.direction?e.instance.scroll.x<a.left-window.innerWidth&&e.instance.scroll.x<a.left-window.innerWidth/2?0:e.instance.scroll.x>a.right&&e.instance.scroll.x>a.right+100&&a.right-a.left+window.innerWidth:e.instance.scroll.y<a.top-window.innerHeight&&e.instance.scroll.y<a.top-window.innerHeight/2?0:e.instance.scroll.y>a.bottom&&e.instance.scroll.y>a.bottom+100&&a.bottom-a.top+window.innerHeight),!1!==c&&("horizontal"===a.direction||"horizontal"===e.direction&&"vertical"!==a.direction?e.transform(a.el,c,0,!t&&a.delay):e.transform(a.el,0,c,!t&&a.delay))}))}},{key:"scrollTo",value:function(t){var e=this,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=parseInt(i.offset)||0,r=isNaN(parseInt(i.duration))?1e3:parseInt(i.duration),o=i.easing||[.25,0,.35,1],s=!!i.disableLerp,l=!!i.callback&&i.callback;if(o=it.apply(void 0,m(o)),"string"==typeof t){if("top"===t)t=0;else if("bottom"===t)t=this.instance.limit.y;else if("left"===t)t=0;else if("right"===t)t=this.instance.limit.x;else if(!(t=document.querySelector(t)))return}else if("number"==typeof t)t=parseInt(t);else if(!t||!t.tagName)return void console.warn("`target` parameter is not valid");if("number"!=typeof t){if(!U(t).includes(this.el))return;var a=t.getBoundingClientRect(),c=a.top,h=a.left,u=U(t).find((function(t){return Object.entries(e.sections).map((function(t){var e=v(t,2);e[0];return e[1]})).find((function(e){return e.el==t}))})),d=0;d=u?q(u)[this.directionAxis]:-this.instance.scroll[this.directionAxis],n="horizontal"===this.direction?h+n-d:c+n-d}else n=t+n;var f=parseFloat(this.instance.delta[this.directionAxis]),p=Math.max(0,Math.min(n,this.instance.limit[this.directionAxis]))-f,g=function(t){s?"horizontal"===e.direction?e.setScroll(f+p*t,e.instance.delta.y):e.setScroll(e.instance.delta.x,f+p*t):e.instance.delta[e.directionAxis]=f+p*t};this.animatingScroll=!0,this.stopScrolling(),this.startScrolling();var y=Date.now();!function t(){var i=(Date.now()-y)/r;i>1?(g(1),e.animatingScroll=!1,0==r&&e.update(),l&&l()):(e.scrollToRaf=requestAnimationFrame(t),g(o(i)))}()}},{key:"update",value:function(){this.setScrollLimit(),this.addSections(),this.addElements(),this.detectElements(),this.updateScroll(),this.transformElements(!0),this.reinitScrollBar(),this.checkScroll(!0)}},{key:"startScroll",value:function(){this.stop=!1}},{key:"stopScroll",value:function(){this.stop=!0}},{key:"setScroll",value:function(t,e){this.instance=a(a({},this.instance),{},{scroll:{x:t,y:e},delta:{x:t,y:e},speed:0})}},{key:"destroy",value:function(){p(h(i.prototype),"destroy",this).call(this),this.stopScrolling(),this.html.classList.remove(this.smoothClass),this.vs.destroy(),this.destroyScrollBar(),window.removeEventListener("keydown",this.checkKey,!1)}}]),i}(w);const dt=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};n(this,t),this.options=e,Object.assign(this,b,e),this.smartphone=b.smartphone,e.smartphone&&Object.assign(this.smartphone,e.smartphone),this.tablet=b.tablet,e.tablet&&Object.assign(this.tablet,e.tablet),this.smooth||"horizontal"!=this.direction||console.warn("🚨 `smooth:false` & `horizontal` direction are not yet compatible"),this.tablet.smooth||"horizontal"!=this.tablet.direction||console.warn("🚨 `smooth:false` & `horizontal` direction are not yet compatible (tablet)"),this.smartphone.smooth||"horizontal"!=this.smartphone.direction||console.warn("🚨 `smooth:false` & `horizontal` direction are not yet compatible (smartphone)"),this.init()}return o(t,[{key:"init",value:function(){if(this.options.isMobile=/Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||"MacIntel"===navigator.platform&&navigator.maxTouchPoints>1||window.innerWidth<this.tablet.breakpoint,this.options.isTablet=this.options.isMobile&&window.innerWidth>=this.tablet.breakpoint,this.smooth&&!this.options.isMobile||this.tablet.smooth&&this.options.isTablet||this.smartphone.smooth&&this.options.isMobile&&!this.options.isTablet?this.scroll=new ut(this.options):this.scroll=new T(this.options),this.scroll.init(),window.location.hash){var t=window.location.hash.slice(1,window.location.hash.length),e=document.getElementById(t);e&&this.scroll.scrollTo(e)}}},{key:"update",value:function(){this.scroll.update()}},{key:"start",value:function(){this.scroll.startScroll()}},{key:"stop",value:function(){this.scroll.stopScroll()}},{key:"scrollTo",value:function(t,e){this.scroll.scrollTo(t,e)}},{key:"setScroll",value:function(t,e){this.scroll.setScroll(t,e)}},{key:"on",value:function(t,e){this.scroll.setEvents(t,e)}},{key:"off",value:function(t,e){this.scroll.unsetEvents(t,e)}},{key:"destroy",value:function(){this.scroll.destroy()}}]),t}()}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,