(()=>{"use strict";var e,t,s={},i={};function r(e){var t=i[e];if(void 0!==t)return t.exports;var n=i[e]={exports:{}};return s[e](n,n.exports,r),n.exports}function n(e){return null!==e&&"object"==typeof e&&"constructor"in e&&e.constructor===Object}function a(e,t){void 0===e&&(e={}),void 0===t&&(t={}),Object.keys(t).forEach((s=>{void 0===e[s]?e[s]=t[s]:n(t[s])&&n(e[s])&&Object.keys(t[s]).length>0&&a(e[s],t[s])}))}r.m=s,r.d=(e,t)=>{for(var s in t)r.o(t,s)&&!r.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:t[s]})},r.f={},r.e=e=>Promise.all(Object.keys(r.f).reduce(((t,s)=>(r.f[s](e,t),t)),[])),r.u=e=>"js/"+e+".js",r.miniCssF=e=>"css/"+e+".css",r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="webpack-setup:",r.l=(s,i,n,a)=>{if(e[s])e[s].push(i);else{var l,o;if(void 0!==n)for(var d=document.getElementsByTagName("script"),c=0;c<d.length;c++){var p=d[c];if(p.getAttribute("src")==s||p.getAttribute("data-webpack")==t+n){l=p;break}}l||(o=!0,(l=document.createElement("script")).charset="utf-8",l.timeout=120,r.nc&&l.setAttribute("nonce",r.nc),l.setAttribute("data-webpack",t+n),l.src=s),e[s]=[i];var u=(t,i)=>{l.onerror=l.onload=null,clearTimeout(m);var r=e[s];if(delete e[s],l.parentNode&&l.parentNode.removeChild(l),r&&r.forEach((e=>e(i))),t)return t(i)},m=setTimeout(u.bind(null,void 0,{type:"timeout",target:l}),12e4);l.onerror=u.bind(null,l.onerror),l.onload=u.bind(null,l.onload),o&&document.head.appendChild(l)}},r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;r.g.importScripts&&(e=r.g.location+"");var t=r.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var s=t.getElementsByTagName("script");if(s.length)for(var i=s.length-1;i>-1&&(!e||!/^http(s?):/.test(e));)e=s[i--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),r.p=e+"../"})(),(()=>{if("undefined"!=typeof document){var e=e=>new Promise(((t,s)=>{var i=r.miniCssF(e),n=r.p+i;if(((e,t)=>{for(var s=document.getElementsByTagName("link"),i=0;i<s.length;i++){var r=(a=s[i]).getAttribute("data-href")||a.getAttribute("href");if("stylesheet"===a.rel&&(r===e||r===t))return a}var n=document.getElementsByTagName("style");for(i=0;i<n.length;i++){var a;if((r=(a=n[i]).getAttribute("data-href"))===e||r===t)return a}})(i,n))return t();((e,t,s,i,n)=>{var a=document.createElement("link");a.rel="stylesheet",a.type="text/css",r.nc&&(a.nonce=r.nc),a.onerror=a.onload=s=>{if(a.onerror=a.onload=null,"load"===s.type)i();else{var r=s&&s.type,l=s&&s.target&&s.target.href||t,o=new Error("Loading CSS chunk "+e+" failed.\n("+r+": "+l+")");o.name="ChunkLoadError",o.code="CSS_CHUNK_LOAD_FAILED",o.type=r,o.request=l,a.parentNode&&a.parentNode.removeChild(a),n(o)}},a.href=t,s?s.parentNode.insertBefore(a,s.nextSibling):document.head.appendChild(a)})(e,n,null,t,s)})),t={530:0};r.f.miniCss=(s,i)=>{t[s]?i.push(t[s]):0!==t[s]&&{822:1}[s]&&i.push(t[s]=e(s).then((()=>{t[s]=0}),(e=>{throw delete t[s],e})))}}})(),(()=>{var e={530:0};r.f.j=(t,s)=>{var i=r.o(e,t)?e[t]:void 0;if(0!==i)if(i)s.push(i[2]);else{var n=new Promise(((s,r)=>i=e[t]=[s,r]));s.push(i[2]=n);var a=r.p+r.u(t),l=new Error;r.l(a,(s=>{if(r.o(e,t)&&(0!==(i=e[t])&&(e[t]=void 0),i)){var n=s&&("load"===s.type?"missing":s.type),a=s&&s.target&&s.target.src;l.message="Loading chunk "+t+" failed.\n("+n+": "+a+")",l.name="ChunkLoadError",l.type=n,l.request=a,i[1](l)}}),"chunk-"+t,t)}};var t=(t,s)=>{var i,n,a=s[0],l=s[1],o=s[2],d=0;if(a.some((t=>0!==e[t]))){for(i in l)r.o(l,i)&&(r.m[i]=l[i]);if(o)o(r)}for(t&&t(s);d<a.length;d++)n=a[d],r.o(e,n)&&e[n]&&e[n][0](),e[n]=0},s=self.webpackChunkwebpack_setup=self.webpackChunkwebpack_setup||[];s.forEach(t.bind(null,0)),s.push=t.bind(null,s.push.bind(s))})();const l={body:{},addEventListener(){},removeEventListener(){},activeElement:{blur(){},nodeName:""},querySelector:()=>null,querySelectorAll:()=>[],getElementById:()=>null,createEvent:()=>({initEvent(){}}),createElement:()=>({children:[],childNodes:[],style:{},setAttribute(){},getElementsByTagName:()=>[]}),createElementNS:()=>({}),importNode:()=>null,location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};function o(){const e="undefined"!=typeof document?document:{};return a(e,l),e}const d={document:l,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState(){},pushState(){},go(){},back(){}},CustomEvent:function(){return this},addEventListener(){},removeEventListener(){},getComputedStyle:()=>({getPropertyValue:()=>""}),Image(){},Date(){},screen:{},setTimeout(){},clearTimeout(){},matchMedia:()=>({}),requestAnimationFrame:e=>"undefined"==typeof setTimeout?(e(),null):setTimeout(e,0),cancelAnimationFrame(e){"undefined"!=typeof setTimeout&&clearTimeout(e)}};function c(){const e="undefined"!=typeof window?window:{};return a(e,d),e}function p(e,t){return void 0===t&&(t=0),setTimeout(e,t)}function u(){return Date.now()}function m(e,t){void 0===t&&(t="x");const s=c();let i,r,n;const a=function(e){const t=c();let s;return t.getComputedStyle&&(s=t.getComputedStyle(e,null)),!s&&e.currentStyle&&(s=e.currentStyle),s||(s=e.style),s}(e);return s.WebKitCSSMatrix?(r=a.transform||a.webkitTransform,r.split(",").length>6&&(r=r.split(", ").map((e=>e.replace(",","."))).join(", ")),n=new s.WebKitCSSMatrix("none"===r?"":r)):(n=a.MozTransform||a.OTransform||a.MsTransform||a.msTransform||a.transform||a.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,"),i=n.toString().split(",")),"x"===t&&(r=s.WebKitCSSMatrix?n.m41:16===i.length?parseFloat(i[12]):parseFloat(i[4])),"y"===t&&(r=s.WebKitCSSMatrix?n.m42:16===i.length?parseFloat(i[13]):parseFloat(i[5])),r||0}function f(e){return"object"==typeof e&&null!==e&&e.constructor&&"Object"===Object.prototype.toString.call(e).slice(8,-1)}function h(){const e=Object(arguments.length<=0?void 0:arguments[0]),t=["__proto__","constructor","prototype"];for(let i=1;i<arguments.length;i+=1){const r=i<0||arguments.length<=i?void 0:arguments[i];if(null!=r&&(s=r,!("undefined"!=typeof window&&void 0!==window.HTMLElement?s instanceof HTMLElement:s&&(1===s.nodeType||11===s.nodeType)))){const s=Object.keys(Object(r)).filter((e=>t.indexOf(e)<0));for(let t=0,i=s.length;t<i;t+=1){const i=s[t],n=Object.getOwnPropertyDescriptor(r,i);void 0!==n&&n.enumerable&&(f(e[i])&&f(r[i])?r[i].__swiper__?e[i]=r[i]:h(e[i],r[i]):!f(e[i])&&f(r[i])?(e[i]={},r[i].__swiper__?e[i]=r[i]:h(e[i],r[i])):e[i]=r[i])}}}var s;return e}function g(e,t,s){e.style.setProperty(t,s)}function v(e){let{swiper:t,targetPosition:s,side:i}=e;const r=c(),n=-t.translate;let a,l=null;const o=t.params.speed;t.wrapperEl.style.scrollSnapType="none",r.cancelAnimationFrame(t.cssModeFrameID);const d=s>n?"next":"prev",p=(e,t)=>"next"===d&&e>=t||"prev"===d&&e<=t,u=()=>{a=(new Date).getTime(),null===l&&(l=a);const e=Math.max(Math.min((a-l)/o,1),0),d=.5-Math.cos(e*Math.PI)/2;let c=n+d*(s-n);if(p(c,s)&&(c=s),t.wrapperEl.scrollTo({[i]:c}),p(c,s))return t.wrapperEl.style.overflow="hidden",t.wrapperEl.style.scrollSnapType="",setTimeout((()=>{t.wrapperEl.style.overflow="",t.wrapperEl.scrollTo({[i]:c})})),void r.cancelAnimationFrame(t.cssModeFrameID);t.cssModeFrameID=r.requestAnimationFrame(u)};u()}function w(e,t){void 0===t&&(t="");const s=[...e.children];return e instanceof HTMLSlotElement&&s.push(...e.assignedElements()),t?s.filter((e=>e.matches(t))):s}function b(e){try{return void console.warn(e)}catch(e){}}function S(e,t){void 0===t&&(t=[]);const s=document.createElement(e);return s.classList.add(...Array.isArray(t)?t:function(e){return void 0===e&&(e=""),e.trim().split(" ").filter((e=>!!e.trim()))}(t)),s}function y(e,t){return c().getComputedStyle(e,null).getPropertyValue(t)}function T(e){let t,s=e;if(s){for(t=0;null!==(s=s.previousSibling);)1===s.nodeType&&(t+=1);return t}}function E(e,t){const s=[];let i=e.parentElement;for(;i;)t?i.matches(t)&&s.push(i):s.push(i),i=i.parentElement;return s}function x(e,t,s){const i=c();return s?e["width"===t?"offsetWidth":"offsetHeight"]+parseFloat(i.getComputedStyle(e,null).getPropertyValue("width"===t?"margin-right":"margin-top"))+parseFloat(i.getComputedStyle(e,null).getPropertyValue("width"===t?"margin-left":"margin-bottom")):e.offsetWidth}function C(e){return(Array.isArray(e)?e:[e]).filter((e=>!!e))}let M,P,L;function k(){return M||(M=function(){const e=c(),t=o();return{smoothScroll:t.documentElement&&t.documentElement.style&&"scrollBehavior"in t.documentElement.style,touch:!!("ontouchstart"in e||e.DocumentTouch&&t instanceof e.DocumentTouch)}}()),M}function I(e){return void 0===e&&(e={}),P||(P=function(e){let{userAgent:t}=void 0===e?{}:e;const s=k(),i=c(),r=i.navigator.platform,n=t||i.navigator.userAgent,a={ios:!1,android:!1},l=i.screen.width,o=i.screen.height,d=n.match(/(Android);?[\s\/]+([\d.]+)?/);let p=n.match(/(iPad).*OS\s([\d_]+)/);const u=n.match(/(iPod)(.*OS\s([\d_]+))?/),m=!p&&n.match(/(iPhone\sOS|iOS)\s([\d_]+)/),f="Win32"===r;let h="MacIntel"===r;return!p&&h&&s.touch&&["1024x1366","1366x1024","834x1194","1194x834","834x1112","1112x834","768x1024","1024x768","820x1180","1180x820","810x1080","1080x810"].indexOf(`${l}x${o}`)>=0&&(p=n.match(/(Version)\/([\d.]+)/),p||(p=[0,1,"13_0_0"]),h=!1),d&&!f&&(a.os="android",a.android=!0),(p||m||u)&&(a.os="ios",a.ios=!0),a}(e)),P}function A(){return L||(L=function(){const e=c(),t=I();let s=!1;function i(){const t=e.navigator.userAgent.toLowerCase();return t.indexOf("safari")>=0&&t.indexOf("chrome")<0&&t.indexOf("android")<0}if(i()){const t=String(e.navigator.userAgent);if(t.includes("Version/")){const[e,i]=t.split("Version/")[1].split(" ")[0].split(".").map((e=>Number(e)));s=e<16||16===e&&i<2}}const r=/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(e.navigator.userAgent),n=i();return{isSafari:s||n,needPerspectiveFix:s,need3dFix:n||r&&t.ios,isWebView:r}}()),L}var O={on(e,t,s){const i=this;if(!i.eventsListeners||i.destroyed)return i;if("function"!=typeof t)return i;const r=s?"unshift":"push";return e.split(" ").forEach((e=>{i.eventsListeners[e]||(i.eventsListeners[e]=[]),i.eventsListeners[e][r](t)})),i},once(e,t,s){const i=this;if(!i.eventsListeners||i.destroyed)return i;if("function"!=typeof t)return i;function r(){i.off(e,r),r.__emitterProxy&&delete r.__emitterProxy;for(var s=arguments.length,n=new Array(s),a=0;a<s;a++)n[a]=arguments[a];t.apply(i,n)}return r.__emitterProxy=t,i.on(e,r,s)},onAny(e,t){const s=this;if(!s.eventsListeners||s.destroyed)return s;if("function"!=typeof e)return s;const i=t?"unshift":"push";return s.eventsAnyListeners.indexOf(e)<0&&s.eventsAnyListeners[i](e),s},offAny(e){const t=this;if(!t.eventsListeners||t.destroyed)return t;if(!t.eventsAnyListeners)return t;const s=t.eventsAnyListeners.indexOf(e);return s>=0&&t.eventsAnyListeners.splice(s,1),t},off(e,t){const s=this;return!s.eventsListeners||s.destroyed?s:s.eventsListeners?(e.split(" ").forEach((e=>{void 0===t?s.eventsListeners[e]=[]:s.eventsListeners[e]&&s.eventsListeners[e].forEach(((i,r)=>{(i===t||i.__emitterProxy&&i.__emitterProxy===t)&&s.eventsListeners[e].splice(r,1)}))})),s):s},emit(){const e=this;if(!e.eventsListeners||e.destroyed)return e;if(!e.eventsListeners)return e;let t,s,i;for(var r=arguments.length,n=new Array(r),a=0;a<r;a++)n[a]=arguments[a];"string"==typeof n[0]||Array.isArray(n[0])?(t=n[0],s=n.slice(1,n.length),i=e):(t=n[0].events,s=n[0].data,i=n[0].context||e),s.unshift(i);return(Array.isArray(t)?t:t.split(" ")).forEach((t=>{e.eventsAnyListeners&&e.eventsAnyListeners.length&&e.eventsAnyListeners.forEach((e=>{e.apply(i,[t,...s])})),e.eventsListeners&&e.eventsListeners[t]&&e.eventsListeners[t].forEach((e=>{e.apply(i,s)}))})),e}};const z=(e,t,s)=>{t&&!e.classList.contains(s)?e.classList.add(s):!t&&e.classList.contains(s)&&e.classList.remove(s)};const G=(e,t,s)=>{t&&!e.classList.contains(s)?e.classList.add(s):!t&&e.classList.contains(s)&&e.classList.remove(s)};const _=(e,t)=>{if(!e||e.destroyed||!e.params)return;const s=t.closest(e.isElement?"swiper-slide":`.${e.params.slideClass}`);if(s){let t=s.querySelector(`.${e.params.lazyPreloaderClass}`);!t&&e.isElement&&(s.shadowRoot?t=s.shadowRoot.querySelector(`.${e.params.lazyPreloaderClass}`):requestAnimationFrame((()=>{s.shadowRoot&&(t=s.shadowRoot.querySelector(`.${e.params.lazyPreloaderClass}`),t&&t.remove())}))),t&&t.remove()}},D=(e,t)=>{if(!e.slides[t])return;const s=e.slides[t].querySelector('[loading="lazy"]');s&&s.removeAttribute("loading")},$=e=>{if(!e||e.destroyed||!e.params)return;let t=e.params.lazyPreloadPrevNext;const s=e.slides.length;if(!s||!t||t<0)return;t=Math.min(t,s);const i="auto"===e.params.slidesPerView?e.slidesPerViewDynamic():Math.ceil(e.params.slidesPerView),r=e.activeIndex;if(e.params.grid&&e.params.grid.rows>1){const s=r,n=[s-t];return n.push(...Array.from({length:t}).map(((e,t)=>s+i+t))),void e.slides.forEach(((t,s)=>{n.includes(t.column)&&D(e,s)}))}const n=r+i-1;if(e.params.rewind||e.params.loop)for(let i=r-t;i<=n+t;i+=1){const t=(i%s+s)%s;(t<r||t>n)&&D(e,t)}else for(let i=Math.max(r-t,0);i<=Math.min(n+t,s-1);i+=1)i!==r&&(i>n||i<r)&&D(e,i)};var B={updateSize:function(){const e=this;let t,s;const i=e.el;t=void 0!==e.params.width&&null!==e.params.width?e.params.width:i.clientWidth,s=void 0!==e.params.height&&null!==e.params.height?e.params.height:i.clientHeight,0===t&&e.isHorizontal()||0===s&&e.isVertical()||(t=t-parseInt(y(i,"padding-left")||0,10)-parseInt(y(i,"padding-right")||0,10),s=s-parseInt(y(i,"padding-top")||0,10)-parseInt(y(i,"padding-bottom")||0,10),Number.isNaN(t)&&(t=0),Number.isNaN(s)&&(s=0),Object.assign(e,{width:t,height:s,size:e.isHorizontal()?t:s}))},updateSlides:function(){const e=this;function t(t,s){return parseFloat(t.getPropertyValue(e.getDirectionLabel(s))||0)}const s=e.params,{wrapperEl:i,slidesEl:r,size:n,rtlTranslate:a,wrongRTL:l}=e,o=e.virtual&&s.virtual.enabled,d=o?e.virtual.slides.length:e.slides.length,c=w(r,`.${e.params.slideClass}, swiper-slide`),p=o?e.virtual.slides.length:c.length;let u=[];const m=[],f=[];let h=s.slidesOffsetBefore;"function"==typeof h&&(h=s.slidesOffsetBefore.call(e));let v=s.slidesOffsetAfter;"function"==typeof v&&(v=s.slidesOffsetAfter.call(e));const b=e.snapGrid.length,S=e.slidesGrid.length;let T=s.spaceBetween,E=-h,C=0,M=0;if(void 0===n)return;"string"==typeof T&&T.indexOf("%")>=0?T=parseFloat(T.replace("%",""))/100*n:"string"==typeof T&&(T=parseFloat(T)),e.virtualSize=-T,c.forEach((e=>{a?e.style.marginLeft="":e.style.marginRight="",e.style.marginBottom="",e.style.marginTop=""})),s.centeredSlides&&s.cssMode&&(g(i,"--swiper-centered-offset-before",""),g(i,"--swiper-centered-offset-after",""));const P=s.grid&&s.grid.rows>1&&e.grid;let L;P?e.grid.initSlides(c):e.grid&&e.grid.unsetSlides();const k="auto"===s.slidesPerView&&s.breakpoints&&Object.keys(s.breakpoints).filter((e=>void 0!==s.breakpoints[e].slidesPerView)).length>0;for(let i=0;i<p;i+=1){let r;if(L=0,c[i]&&(r=c[i]),P&&e.grid.updateSlide(i,r,c),!c[i]||"none"!==y(r,"display")){if("auto"===s.slidesPerView){k&&(c[i].style[e.getDirectionLabel("width")]="");const n=getComputedStyle(r),a=r.style.transform,l=r.style.webkitTransform;if(a&&(r.style.transform="none"),l&&(r.style.webkitTransform="none"),s.roundLengths)L=e.isHorizontal()?x(r,"width",!0):x(r,"height",!0);else{const e=t(n,"width"),s=t(n,"padding-left"),i=t(n,"padding-right"),a=t(n,"margin-left"),l=t(n,"margin-right"),o=n.getPropertyValue("box-sizing");if(o&&"border-box"===o)L=e+a+l;else{const{clientWidth:t,offsetWidth:n}=r;L=e+s+i+a+l+(n-t)}}a&&(r.style.transform=a),l&&(r.style.webkitTransform=l),s.roundLengths&&(L=Math.floor(L))}else L=(n-(s.slidesPerView-1)*T)/s.slidesPerView,s.roundLengths&&(L=Math.floor(L)),c[i]&&(c[i].style[e.getDirectionLabel("width")]=`${L}px`);c[i]&&(c[i].swiperSlideSize=L),f.push(L),s.centeredSlides?(E=E+L/2+C/2+T,0===C&&0!==i&&(E=E-n/2-T),0===i&&(E=E-n/2-T),Math.abs(E)<.001&&(E=0),s.roundLengths&&(E=Math.floor(E)),M%s.slidesPerGroup==0&&u.push(E),m.push(E)):(s.roundLengths&&(E=Math.floor(E)),(M-Math.min(e.params.slidesPerGroupSkip,M))%e.params.slidesPerGroup==0&&u.push(E),m.push(E),E=E+L+T),e.virtualSize+=L+T,C=L,M+=1}}if(e.virtualSize=Math.max(e.virtualSize,n)+v,a&&l&&("slide"===s.effect||"coverflow"===s.effect)&&(i.style.width=`${e.virtualSize+T}px`),s.setWrapperSize&&(i.style[e.getDirectionLabel("width")]=`${e.virtualSize+T}px`),P&&e.grid.updateWrapperSize(L,u),!s.centeredSlides){const t=[];for(let i=0;i<u.length;i+=1){let r=u[i];s.roundLengths&&(r=Math.floor(r)),u[i]<=e.virtualSize-n&&t.push(r)}u=t,Math.floor(e.virtualSize-n)-Math.floor(u[u.length-1])>1&&u.push(e.virtualSize-n)}if(o&&s.loop){const t=f[0]+T;if(s.slidesPerGroup>1){const i=Math.ceil((e.virtual.slidesBefore+e.virtual.slidesAfter)/s.slidesPerGroup),r=t*s.slidesPerGroup;for(let e=0;e<i;e+=1)u.push(u[u.length-1]+r)}for(let i=0;i<e.virtual.slidesBefore+e.virtual.slidesAfter;i+=1)1===s.slidesPerGroup&&u.push(u[u.length-1]+t),m.push(m[m.length-1]+t),e.virtualSize+=t}if(0===u.length&&(u=[0]),0!==T){const t=e.isHorizontal()&&a?"marginLeft":e.getDirectionLabel("marginRight");c.filter(((e,t)=>!(s.cssMode&&!s.loop)||t!==c.length-1)).forEach((e=>{e.style[t]=`${T}px`}))}if(s.centeredSlides&&s.centeredSlidesBounds){let e=0;f.forEach((t=>{e+=t+(T||0)})),e-=T;const t=e-n;u=u.map((e=>e<=0?-h:e>t?t+v:e))}if(s.centerInsufficientSlides){let e=0;f.forEach((t=>{e+=t+(T||0)})),e-=T;const t=(s.slidesOffsetBefore||0)+(s.slidesOffsetAfter||0);if(e+t<n){const s=(n-e-t)/2;u.forEach(((e,t)=>{u[t]=e-s})),m.forEach(((e,t)=>{m[t]=e+s}))}}if(Object.assign(e,{slides:c,snapGrid:u,slidesGrid:m,slidesSizesGrid:f}),s.centeredSlides&&s.cssMode&&!s.centeredSlidesBounds){g(i,"--swiper-centered-offset-before",-u[0]+"px"),g(i,"--swiper-centered-offset-after",e.size/2-f[f.length-1]/2+"px");const t=-e.snapGrid[0],s=-e.slidesGrid[0];e.snapGrid=e.snapGrid.map((e=>e+t)),e.slidesGrid=e.slidesGrid.map((e=>e+s))}if(p!==d&&e.emit("slidesLengthChange"),u.length!==b&&(e.params.watchOverflow&&e.checkOverflow(),e.emit("snapGridLengthChange")),m.length!==S&&e.emit("slidesGridLengthChange"),s.watchSlidesProgress&&e.updateSlidesOffset(),e.emit("slidesUpdated"),!(o||s.cssMode||"slide"!==s.effect&&"fade"!==s.effect)){const t=`${s.containerModifierClass}backface-hidden`,i=e.el.classList.contains(t);p<=s.maxBackfaceHiddenSlides?i||e.el.classList.add(t):i&&e.el.classList.remove(t)}},updateAutoHeight:function(e){const t=this,s=[],i=t.virtual&&t.params.virtual.enabled;let r,n=0;"number"==typeof e?t.setTransition(e):!0===e&&t.setTransition(t.params.speed);const a=e=>i?t.slides[t.getSlideIndexByData(e)]:t.slides[e];if("auto"!==t.params.slidesPerView&&t.params.slidesPerView>1)if(t.params.centeredSlides)(t.visibleSlides||[]).forEach((e=>{s.push(e)}));else for(r=0;r<Math.ceil(t.params.slidesPerView);r+=1){const e=t.activeIndex+r;if(e>t.slides.length&&!i)break;s.push(a(e))}else s.push(a(t.activeIndex));for(r=0;r<s.length;r+=1)if(void 0!==s[r]){const e=s[r].offsetHeight;n=e>n?e:n}(n||0===n)&&(t.wrapperEl.style.height=`${n}px`)},updateSlidesOffset:function(){const e=this,t=e.slides,s=e.isElement?e.isHorizontal()?e.wrapperEl.offsetLeft:e.wrapperEl.offsetTop:0;for(let i=0;i<t.length;i+=1)t[i].swiperSlideOffset=(e.isHorizontal()?t[i].offsetLeft:t[i].offsetTop)-s-e.cssOverflowAdjustment()},updateSlidesProgress:function(e){void 0===e&&(e=this&&this.translate||0);const t=this,s=t.params,{slides:i,rtlTranslate:r,snapGrid:n}=t;if(0===i.length)return;void 0===i[0].swiperSlideOffset&&t.updateSlidesOffset();let a=-e;r&&(a=e),t.visibleSlidesIndexes=[],t.visibleSlides=[];let l=s.spaceBetween;"string"==typeof l&&l.indexOf("%")>=0?l=parseFloat(l.replace("%",""))/100*t.size:"string"==typeof l&&(l=parseFloat(l));for(let e=0;e<i.length;e+=1){const o=i[e];let d=o.swiperSlideOffset;s.cssMode&&s.centeredSlides&&(d-=i[0].swiperSlideOffset);const c=(a+(s.centeredSlides?t.minTranslate():0)-d)/(o.swiperSlideSize+l),p=(a-n[0]+(s.centeredSlides?t.minTranslate():0)-d)/(o.swiperSlideSize+l),u=-(a-d),m=u+t.slidesSizesGrid[e],f=u>=0&&u<=t.size-t.slidesSizesGrid[e],h=u>=0&&u<t.size-1||m>1&&m<=t.size||u<=0&&m>=t.size;h&&(t.visibleSlides.push(o),t.visibleSlidesIndexes.push(e)),z(o,h,s.slideVisibleClass),z(o,f,s.slideFullyVisibleClass),o.progress=r?-c:c,o.originalProgress=r?-p:p}},updateProgress:function(e){const t=this;if(void 0===e){const s=t.rtlTranslate?-1:1;e=t&&t.translate&&t.translate*s||0}const s=t.params,i=t.maxTranslate()-t.minTranslate();let{progress:r,isBeginning:n,isEnd:a,progressLoop:l}=t;const o=n,d=a;if(0===i)r=0,n=!0,a=!0;else{r=(e-t.minTranslate())/i;const s=Math.abs(e-t.minTranslate())<1,l=Math.abs(e-t.maxTranslate())<1;n=s||r<=0,a=l||r>=1,s&&(r=0),l&&(r=1)}if(s.loop){const s=t.getSlideIndexByData(0),i=t.getSlideIndexByData(t.slides.length-1),r=t.slidesGrid[s],n=t.slidesGrid[i],a=t.slidesGrid[t.slidesGrid.length-1],o=Math.abs(e);l=o>=r?(o-r)/a:(o+a-n)/a,l>1&&(l-=1)}Object.assign(t,{progress:r,progressLoop:l,isBeginning:n,isEnd:a}),(s.watchSlidesProgress||s.centeredSlides&&s.autoHeight)&&t.updateSlidesProgress(e),n&&!o&&t.emit("reachBeginning toEdge"),a&&!d&&t.emit("reachEnd toEdge"),(o&&!n||d&&!a)&&t.emit("fromEdge"),t.emit("progress",r)},updateSlidesClasses:function(){const e=this,{slides:t,params:s,slidesEl:i,activeIndex:r}=e,n=e.virtual&&s.virtual.enabled,a=e.grid&&s.grid&&s.grid.rows>1,l=e=>w(i,`.${s.slideClass}${e}, swiper-slide${e}`)[0];let o,d,c;if(n)if(s.loop){let t=r-e.virtual.slidesBefore;t<0&&(t=e.virtual.slides.length+t),t>=e.virtual.slides.length&&(t-=e.virtual.slides.length),o=l(`[data-swiper-slide-index="${t}"]`)}else o=l(`[data-swiper-slide-index="${r}"]`);else a?(o=t.filter((e=>e.column===r))[0],c=t.filter((e=>e.column===r+1))[0],d=t.filter((e=>e.column===r-1))[0]):o=t[r];o&&(a||(c=function(e,t){const s=[];for(;e.nextElementSibling;){const i=e.nextElementSibling;t?i.matches(t)&&s.push(i):s.push(i),e=i}return s}(o,`.${s.slideClass}, swiper-slide`)[0],s.loop&&!c&&(c=t[0]),d=function(e,t){const s=[];for(;e.previousElementSibling;){const i=e.previousElementSibling;t?i.matches(t)&&s.push(i):s.push(i),e=i}return s}(o,`.${s.slideClass}, swiper-slide`)[0],s.loop&&0===!d&&(d=t[t.length-1]))),t.forEach((e=>{G(e,e===o,s.slideActiveClass),G(e,e===c,s.slideNextClass),G(e,e===d,s.slidePrevClass)})),e.emitSlidesClasses()},updateActiveIndex:function(e){const t=this,s=t.rtlTranslate?t.translate:-t.translate,{snapGrid:i,params:r,activeIndex:n,realIndex:a,snapIndex:l}=t;let o,d=e;const c=e=>{let s=e-t.virtual.slidesBefore;return s<0&&(s=t.virtual.slides.length+s),s>=t.virtual.slides.length&&(s-=t.virtual.slides.length),s};if(void 0===d&&(d=function(e){const{slidesGrid:t,params:s}=e,i=e.rtlTranslate?e.translate:-e.translate;let r;for(let e=0;e<t.length;e+=1)void 0!==t[e+1]?i>=t[e]&&i<t[e+1]-(t[e+1]-t[e])/2?r=e:i>=t[e]&&i<t[e+1]&&(r=e+1):i>=t[e]&&(r=e);return s.normalizeSlideIndex&&(r<0||void 0===r)&&(r=0),r}(t)),i.indexOf(s)>=0)o=i.indexOf(s);else{const e=Math.min(r.slidesPerGroupSkip,d);o=e+Math.floor((d-e)/r.slidesPerGroup)}if(o>=i.length&&(o=i.length-1),d===n&&!t.params.loop)return void(o!==l&&(t.snapIndex=o,t.emit("snapIndexChange")));if(d===n&&t.params.loop&&t.virtual&&t.params.virtual.enabled)return void(t.realIndex=c(d));const p=t.grid&&r.grid&&r.grid.rows>1;let u;if(t.virtual&&r.virtual.enabled&&r.loop)u=c(d);else if(p){const e=t.slides.filter((e=>e.column===d))[0];let s=parseInt(e.getAttribute("data-swiper-slide-index"),10);Number.isNaN(s)&&(s=Math.max(t.slides.indexOf(e),0)),u=Math.floor(s/r.grid.rows)}else if(t.slides[d]){const e=t.slides[d].getAttribute("data-swiper-slide-index");u=e?parseInt(e,10):d}else u=d;Object.assign(t,{previousSnapIndex:l,snapIndex:o,previousRealIndex:a,realIndex:u,previousIndex:n,activeIndex:d}),t.initialized&&$(t),t.emit("activeIndexChange"),t.emit("snapIndexChange"),(t.initialized||t.params.runCallbacksOnInit)&&(a!==u&&t.emit("realIndexChange"),t.emit("slideChange"))},updateClickedSlide:function(e,t){const s=this,i=s.params;let r=e.closest(`.${i.slideClass}, swiper-slide`);!r&&s.isElement&&t&&t.length>1&&t.includes(e)&&[...t.slice(t.indexOf(e)+1,t.length)].forEach((e=>{!r&&e.matches&&e.matches(`.${i.slideClass}, swiper-slide`)&&(r=e)}));let n,a=!1;if(r)for(let e=0;e<s.slides.length;e+=1)if(s.slides[e]===r){a=!0,n=e;break}if(!r||!a)return s.clickedSlide=void 0,void(s.clickedIndex=void 0);s.clickedSlide=r,s.virtual&&s.params.virtual.enabled?s.clickedIndex=parseInt(r.getAttribute("data-swiper-slide-index"),10):s.clickedIndex=n,i.slideToClickedSlide&&void 0!==s.clickedIndex&&s.clickedIndex!==s.activeIndex&&s.slideToClickedSlide()}};var N={getTranslate:function(e){void 0===e&&(e=this.isHorizontal()?"x":"y");const{params:t,rtlTranslate:s,translate:i,wrapperEl:r}=this;if(t.virtualTranslate)return s?-i:i;if(t.cssMode)return i;let n=m(r,e);return n+=this.cssOverflowAdjustment(),s&&(n=-n),n||0},setTranslate:function(e,t){const s=this,{rtlTranslate:i,params:r,wrapperEl:n,progress:a}=s;let l,o=0,d=0;s.isHorizontal()?o=i?-e:e:d=e,r.roundLengths&&(o=Math.floor(o),d=Math.floor(d)),s.previousTranslate=s.translate,s.translate=s.isHorizontal()?o:d,r.cssMode?n[s.isHorizontal()?"scrollLeft":"scrollTop"]=s.isHorizontal()?-o:-d:r.virtualTranslate||(s.isHorizontal()?o-=s.cssOverflowAdjustment():d-=s.cssOverflowAdjustment(),n.style.transform=`translate3d(${o}px, ${d}px, 0px)`);const c=s.maxTranslate()-s.minTranslate();l=0===c?0:(e-s.minTranslate())/c,l!==a&&s.updateProgress(e),s.emit("setTranslate",s.translate,t)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]},translateTo:function(e,t,s,i,r){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===s&&(s=!0),void 0===i&&(i=!0);const n=this,{params:a,wrapperEl:l}=n;if(n.animating&&a.preventInteractionOnTransition)return!1;const o=n.minTranslate(),d=n.maxTranslate();let c;if(c=i&&e>o?o:i&&e<d?d:e,n.updateProgress(c),a.cssMode){const e=n.isHorizontal();if(0===t)l[e?"scrollLeft":"scrollTop"]=-c;else{if(!n.support.smoothScroll)return v({swiper:n,targetPosition:-c,side:e?"left":"top"}),!0;l.scrollTo({[e?"left":"top"]:-c,behavior:"smooth"})}return!0}return 0===t?(n.setTransition(0),n.setTranslate(c),s&&(n.emit("beforeTransitionStart",t,r),n.emit("transitionEnd"))):(n.setTransition(t),n.setTranslate(c),s&&(n.emit("beforeTransitionStart",t,r),n.emit("transitionStart")),n.animating||(n.animating=!0,n.onTranslateToWrapperTransitionEnd||(n.onTranslateToWrapperTransitionEnd=function(e){n&&!n.destroyed&&e.target===this&&(n.wrapperEl.removeEventListener("transitionend",n.onTranslateToWrapperTransitionEnd),n.onTranslateToWrapperTransitionEnd=null,delete n.onTranslateToWrapperTransitionEnd,n.animating=!1,s&&n.emit("transitionEnd"))}),n.wrapperEl.addEventListener("transitionend",n.onTranslateToWrapperTransitionEnd))),!0}};function F(e){let{swiper:t,runCallbacks:s,direction:i,step:r}=e;const{activeIndex:n,previousIndex:a}=t;let l=i;if(l||(l=n>a?"next":n<a?"prev":"reset"),t.emit(`transition${r}`),s&&n!==a){if("reset"===l)return void t.emit(`slideResetTransition${r}`);t.emit(`slideChangeTransition${r}`),"next"===l?t.emit(`slideNextTransition${r}`):t.emit(`slidePrevTransition${r}`)}}var V={slideTo:function(e,t,s,i,r){void 0===e&&(e=0),void 0===s&&(s=!0),"string"==typeof e&&(e=parseInt(e,10));const n=this;let a=e;a<0&&(a=0);const{params:l,snapGrid:o,slidesGrid:d,previousIndex:c,activeIndex:p,rtlTranslate:u,wrapperEl:m,enabled:f}=n;if(!f&&!i&&!r||n.destroyed||n.animating&&l.preventInteractionOnTransition)return!1;void 0===t&&(t=n.params.speed);const h=Math.min(n.params.slidesPerGroupSkip,a);let g=h+Math.floor((a-h)/n.params.slidesPerGroup);g>=o.length&&(g=o.length-1);const w=-o[g];if(l.normalizeSlideIndex)for(let e=0;e<d.length;e+=1){const t=-Math.floor(100*w),s=Math.floor(100*d[e]),i=Math.floor(100*d[e+1]);void 0!==d[e+1]?t>=s&&t<i-(i-s)/2?a=e:t>=s&&t<i&&(a=e+1):t>=s&&(a=e)}if(n.initialized&&a!==p){if(!n.allowSlideNext&&(u?w>n.translate&&w>n.minTranslate():w<n.translate&&w<n.minTranslate()))return!1;if(!n.allowSlidePrev&&w>n.translate&&w>n.maxTranslate()&&(p||0)!==a)return!1}let b;if(a!==(c||0)&&s&&n.emit("beforeSlideChangeStart"),n.updateProgress(w),b=a>p?"next":a<p?"prev":"reset",u&&-w===n.translate||!u&&w===n.translate)return n.updateActiveIndex(a),l.autoHeight&&n.updateAutoHeight(),n.updateSlidesClasses(),"slide"!==l.effect&&n.setTranslate(w),"reset"!==b&&(n.transitionStart(s,b),n.transitionEnd(s,b)),!1;if(l.cssMode){const e=n.isHorizontal(),s=u?w:-w;if(0===t){const t=n.virtual&&n.params.virtual.enabled;t&&(n.wrapperEl.style.scrollSnapType="none",n._immediateVirtual=!0),t&&!n._cssModeVirtualInitialSet&&n.params.initialSlide>0?(n._cssModeVirtualInitialSet=!0,requestAnimationFrame((()=>{m[e?"scrollLeft":"scrollTop"]=s}))):m[e?"scrollLeft":"scrollTop"]=s,t&&requestAnimationFrame((()=>{n.wrapperEl.style.scrollSnapType="",n._immediateVirtual=!1}))}else{if(!n.support.smoothScroll)return v({swiper:n,targetPosition:s,side:e?"left":"top"}),!0;m.scrollTo({[e?"left":"top"]:s,behavior:"smooth"})}return!0}return n.setTransition(t),n.setTranslate(w),n.updateActiveIndex(a),n.updateSlidesClasses(),n.emit("beforeTransitionStart",t,i),n.transitionStart(s,b),0===t?n.transitionEnd(s,b):n.animating||(n.animating=!0,n.onSlideToWrapperTransitionEnd||(n.onSlideToWrapperTransitionEnd=function(e){n&&!n.destroyed&&e.target===this&&(n.wrapperEl.removeEventListener("transitionend",n.onSlideToWrapperTransitionEnd),n.onSlideToWrapperTransitionEnd=null,delete n.onSlideToWrapperTransitionEnd,n.transitionEnd(s,b))}),n.wrapperEl.addEventListener("transitionend",n.onSlideToWrapperTransitionEnd)),!0},slideToLoop:function(e,t,s,i){if(void 0===e&&(e=0),void 0===s&&(s=!0),"string"==typeof e){e=parseInt(e,10)}const r=this;if(r.destroyed)return;void 0===t&&(t=r.params.speed);const n=r.grid&&r.params.grid&&r.params.grid.rows>1;let a=e;if(r.params.loop)if(r.virtual&&r.params.virtual.enabled)a+=r.virtual.slidesBefore;else{let e;if(n){const t=a*r.params.grid.rows;e=r.slides.filter((e=>1*e.getAttribute("data-swiper-slide-index")===t))[0].column}else e=r.getSlideIndexByData(a);const t=n?Math.ceil(r.slides.length/r.params.grid.rows):r.slides.length,{centeredSlides:s}=r.params;let l=r.params.slidesPerView;"auto"===l?l=r.slidesPerViewDynamic():(l=Math.ceil(parseFloat(r.params.slidesPerView,10)),s&&l%2==0&&(l+=1));let o=t-e<l;if(s&&(o=o||e<Math.ceil(l/2)),i&&s&&"auto"!==r.params.slidesPerView&&!n&&(o=!1),o){const i=s?e<r.activeIndex?"prev":"next":e-r.activeIndex-1<r.params.slidesPerView?"next":"prev";r.loopFix({direction:i,slideTo:!0,activeSlideIndex:"next"===i?e+1:e-t+1,slideRealIndex:"next"===i?r.realIndex:void 0})}if(n){const e=a*r.params.grid.rows;a=r.slides.filter((t=>1*t.getAttribute("data-swiper-slide-index")===e))[0].column}else a=r.getSlideIndexByData(a)}return requestAnimationFrame((()=>{r.slideTo(a,t,s,i)})),r},slideNext:function(e,t,s){void 0===t&&(t=!0);const i=this,{enabled:r,params:n,animating:a}=i;if(!r||i.destroyed)return i;void 0===e&&(e=i.params.speed);let l=n.slidesPerGroup;"auto"===n.slidesPerView&&1===n.slidesPerGroup&&n.slidesPerGroupAuto&&(l=Math.max(i.slidesPerViewDynamic("current",!0),1));const o=i.activeIndex<n.slidesPerGroupSkip?1:l,d=i.virtual&&n.virtual.enabled;if(n.loop){if(a&&!d&&n.loopPreventsSliding)return!1;if(i.loopFix({direction:"next"}),i._clientLeft=i.wrapperEl.clientLeft,i.activeIndex===i.slides.length-1&&n.cssMode)return requestAnimationFrame((()=>{i.slideTo(i.activeIndex+o,e,t,s)})),!0}return n.rewind&&i.isEnd?i.slideTo(0,e,t,s):i.slideTo(i.activeIndex+o,e,t,s)},slidePrev:function(e,t,s){void 0===t&&(t=!0);const i=this,{params:r,snapGrid:n,slidesGrid:a,rtlTranslate:l,enabled:o,animating:d}=i;if(!o||i.destroyed)return i;void 0===e&&(e=i.params.speed);const c=i.virtual&&r.virtual.enabled;if(r.loop){if(d&&!c&&r.loopPreventsSliding)return!1;i.loopFix({direction:"prev"}),i._clientLeft=i.wrapperEl.clientLeft}function p(e){return e<0?-Math.floor(Math.abs(e)):Math.floor(e)}const u=p(l?i.translate:-i.translate),m=n.map((e=>p(e)));let f=n[m.indexOf(u)-1];if(void 0===f&&r.cssMode){let e;n.forEach(((t,s)=>{u>=t&&(e=s)})),void 0!==e&&(f=n[e>0?e-1:e])}let h=0;if(void 0!==f&&(h=a.indexOf(f),h<0&&(h=i.activeIndex-1),"auto"===r.slidesPerView&&1===r.slidesPerGroup&&r.slidesPerGroupAuto&&(h=h-i.slidesPerViewDynamic("previous",!0)+1,h=Math.max(h,0))),r.rewind&&i.isBeginning){const r=i.params.virtual&&i.params.virtual.enabled&&i.virtual?i.virtual.slides.length-1:i.slides.length-1;return i.slideTo(r,e,t,s)}return r.loop&&0===i.activeIndex&&r.cssMode?(requestAnimationFrame((()=>{i.slideTo(h,e,t,s)})),!0):i.slideTo(h,e,t,s)},slideReset:function(e,t,s){void 0===t&&(t=!0);const i=this;if(!i.destroyed)return void 0===e&&(e=i.params.speed),i.slideTo(i.activeIndex,e,t,s)},slideToClosest:function(e,t,s,i){void 0===t&&(t=!0),void 0===i&&(i=.5);const r=this;if(r.destroyed)return;void 0===e&&(e=r.params.speed);let n=r.activeIndex;const a=Math.min(r.params.slidesPerGroupSkip,n),l=a+Math.floor((n-a)/r.params.slidesPerGroup),o=r.rtlTranslate?r.translate:-r.translate;if(o>=r.snapGrid[l]){const e=r.snapGrid[l];o-e>(r.snapGrid[l+1]-e)*i&&(n+=r.params.slidesPerGroup)}else{const e=r.snapGrid[l-1];o-e<=(r.snapGrid[l]-e)*i&&(n-=r.params.slidesPerGroup)}return n=Math.max(n,0),n=Math.min(n,r.slidesGrid.length-1),r.slideTo(n,e,t,s)},slideToClickedSlide:function(){const e=this;if(e.destroyed)return;const{params:t,slidesEl:s}=e,i="auto"===t.slidesPerView?e.slidesPerViewDynamic():t.slidesPerView;let r,n=e.clickedIndex;const a=e.isElement?"swiper-slide":`.${t.slideClass}`;if(t.loop){if(e.animating)return;r=parseInt(e.clickedSlide.getAttribute("data-swiper-slide-index"),10),t.centeredSlides?n<e.loopedSlides-i/2||n>e.slides.length-e.loopedSlides+i/2?(e.loopFix(),n=e.getSlideIndex(w(s,`${a}[data-swiper-slide-index="${r}"]`)[0]),p((()=>{e.slideTo(n)}))):e.slideTo(n):n>e.slides.length-i?(e.loopFix(),n=e.getSlideIndex(w(s,`${a}[data-swiper-slide-index="${r}"]`)[0]),p((()=>{e.slideTo(n)}))):e.slideTo(n)}else e.slideTo(n)}};var H={loopCreate:function(e){const t=this,{params:s,slidesEl:i}=t;if(!s.loop||t.virtual&&t.params.virtual.enabled)return;const r=()=>{w(i,`.${s.slideClass}, swiper-slide`).forEach(((e,t)=>{e.setAttribute("data-swiper-slide-index",t)}))},n=t.grid&&s.grid&&s.grid.rows>1,a=s.slidesPerGroup*(n?s.grid.rows:1),l=t.slides.length%a!=0,o=n&&t.slides.length%s.grid.rows!=0,d=e=>{for(let i=0;i<e;i+=1){const e=t.isElement?S("swiper-slide",[s.slideBlankClass]):S("div",[s.slideClass,s.slideBlankClass]);t.slidesEl.append(e)}};if(l){if(s.loopAddBlankSlides){d(a-t.slides.length%a),t.recalcSlides(),t.updateSlides()}else b("Swiper Loop Warning: The number of slides is not even to slidesPerGroup, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)");r()}else if(o){if(s.loopAddBlankSlides){d(s.grid.rows-t.slides.length%s.grid.rows),t.recalcSlides(),t.updateSlides()}else b("Swiper Loop Warning: The number of slides is not even to grid.rows, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)");r()}else r();t.loopFix({slideRealIndex:e,direction:s.centeredSlides?void 0:"next"})},loopFix:function(e){let{slideRealIndex:t,slideTo:s=!0,direction:i,setTranslate:r,activeSlideIndex:n,byController:a,byMousewheel:l}=void 0===e?{}:e;const o=this;if(!o.params.loop)return;o.emit("beforeLoopFix");const{slides:d,allowSlidePrev:c,allowSlideNext:p,slidesEl:u,params:m}=o,{centeredSlides:f}=m;if(o.allowSlidePrev=!0,o.allowSlideNext=!0,o.virtual&&m.virtual.enabled)return s&&(m.centeredSlides||0!==o.snapIndex?m.centeredSlides&&o.snapIndex<m.slidesPerView?o.slideTo(o.virtual.slides.length+o.snapIndex,0,!1,!0):o.snapIndex===o.snapGrid.length-1&&o.slideTo(o.virtual.slidesBefore,0,!1,!0):o.slideTo(o.virtual.slides.length,0,!1,!0)),o.allowSlidePrev=c,o.allowSlideNext=p,void o.emit("loopFix");let h=m.slidesPerView;"auto"===h?h=o.slidesPerViewDynamic():(h=Math.ceil(parseFloat(m.slidesPerView,10)),f&&h%2==0&&(h+=1));const g=m.slidesPerGroupAuto?h:m.slidesPerGroup;let v=g;v%g!=0&&(v+=g-v%g),v+=m.loopAdditionalSlides,o.loopedSlides=v;const w=o.grid&&m.grid&&m.grid.rows>1;d.length<h+v?b("Swiper Loop Warning: The number of slides is not enough for loop mode, it will be disabled and not function properly. You need to add more slides (or make duplicates) or lower the values of slidesPerView and slidesPerGroup parameters"):w&&"row"===m.grid.fill&&b("Swiper Loop Warning: Loop mode is not compatible with grid.fill = `row`");const S=[],y=[];let T=o.activeIndex;void 0===n?n=o.getSlideIndex(d.filter((e=>e.classList.contains(m.slideActiveClass)))[0]):T=n;const E="next"===i||!i,x="prev"===i||!i;let C=0,M=0;const P=w?Math.ceil(d.length/m.grid.rows):d.length,L=(w?d[n].column:n)+(f&&void 0===r?-h/2+.5:0);if(L<v){C=Math.max(v-L,g);for(let e=0;e<v-L;e+=1){const t=e-Math.floor(e/P)*P;if(w){const e=P-t-1;for(let t=d.length-1;t>=0;t-=1)d[t].column===e&&S.push(t)}else S.push(P-t-1)}}else if(L+h>P-v){M=Math.max(L-(P-2*v),g);for(let e=0;e<M;e+=1){const t=e-Math.floor(e/P)*P;w?d.forEach(((e,s)=>{e.column===t&&y.push(s)})):y.push(t)}}if(o.__preventObserver__=!0,requestAnimationFrame((()=>{o.__preventObserver__=!1})),x&&S.forEach((e=>{d[e].swiperLoopMoveDOM=!0,u.prepend(d[e]),d[e].swiperLoopMoveDOM=!1})),E&&y.forEach((e=>{d[e].swiperLoopMoveDOM=!0,u.append(d[e]),d[e].swiperLoopMoveDOM=!1})),o.recalcSlides(),"auto"===m.slidesPerView?o.updateSlides():w&&(S.length>0&&x||y.length>0&&E)&&o.slides.forEach(((e,t)=>{o.grid.updateSlide(t,e,o.slides)})),m.watchSlidesProgress&&o.updateSlidesOffset(),s)if(S.length>0&&x){if(void 0===t){const e=o.slidesGrid[T],t=o.slidesGrid[T+C]-e;l?o.setTranslate(o.translate-t):(o.slideTo(T+Math.ceil(C),0,!1,!0),r&&(o.touchEventsData.startTranslate=o.touchEventsData.startTranslate-t,o.touchEventsData.currentTranslate=o.touchEventsData.currentTranslate-t))}else if(r){const e=w?S.length/m.grid.rows:S.length;o.slideTo(o.activeIndex+e,0,!1,!0),o.touchEventsData.currentTranslate=o.translate}}else if(y.length>0&&E)if(void 0===t){const e=o.slidesGrid[T],t=o.slidesGrid[T-M]-e;l?o.setTranslate(o.translate-t):(o.slideTo(T-M,0,!1,!0),r&&(o.touchEventsData.startTranslate=o.touchEventsData.startTranslate-t,o.touchEventsData.currentTranslate=o.touchEventsData.currentTranslate-t))}else{const e=w?y.length/m.grid.rows:y.length;o.slideTo(o.activeIndex-e,0,!1,!0)}if(o.allowSlidePrev=c,o.allowSlideNext=p,o.controller&&o.controller.control&&!a){const e={slideRealIndex:t,direction:i,setTranslate:r,activeSlideIndex:n,byController:!0};Array.isArray(o.controller.control)?o.controller.control.forEach((t=>{!t.destroyed&&t.params.loop&&t.loopFix({...e,slideTo:t.params.slidesPerView===m.slidesPerView&&s})})):o.controller.control instanceof o.constructor&&o.controller.control.params.loop&&o.controller.control.loopFix({...e,slideTo:o.controller.control.params.slidesPerView===m.slidesPerView&&s})}o.emit("loopFix")},loopDestroy:function(){const e=this,{params:t,slidesEl:s}=e;if(!t.loop||e.virtual&&e.params.virtual.enabled)return;e.recalcSlides();const i=[];e.slides.forEach((e=>{const t=void 0===e.swiperSlideIndex?1*e.getAttribute("data-swiper-slide-index"):e.swiperSlideIndex;i[t]=e})),e.slides.forEach((e=>{e.removeAttribute("data-swiper-slide-index")})),i.forEach((e=>{s.append(e)})),e.recalcSlides(),e.slideTo(e.realIndex,0)}};function j(e,t,s){const i=c(),{params:r}=e,n=r.edgeSwipeDetection,a=r.edgeSwipeThreshold;return!n||!(s<=a||s>=i.innerWidth-a)||"prevent"===n&&(t.preventDefault(),!0)}function R(e){const t=this,s=o();let i=e;i.originalEvent&&(i=i.originalEvent);const r=t.touchEventsData;if("pointerdown"===i.type){if(null!==r.pointerId&&r.pointerId!==i.pointerId)return;r.pointerId=i.pointerId}else"touchstart"===i.type&&1===i.targetTouches.length&&(r.touchId=i.targetTouches[0].identifier);if("touchstart"===i.type)return void j(t,i,i.targetTouches[0].pageX);const{params:n,touches:a,enabled:l}=t;if(!l)return;if(!n.simulateTouch&&"mouse"===i.pointerType)return;if(t.animating&&n.preventInteractionOnTransition)return;!t.animating&&n.cssMode&&n.loop&&t.loopFix();let d=i.target;if("wrapper"===n.touchEventsTarget&&!function(e,t){const s=t.contains(e);if(!s&&t instanceof HTMLSlotElement)return[...t.assignedElements()].includes(e);return s}(d,t.wrapperEl))return;if("which"in i&&3===i.which)return;if("button"in i&&i.button>0)return;if(r.isTouched&&r.isMoved)return;const p=!!n.noSwipingClass&&""!==n.noSwipingClass,m=i.composedPath?i.composedPath():i.path;p&&i.target&&i.target.shadowRoot&&m&&(d=m[0]);const f=n.noSwipingSelector?n.noSwipingSelector:`.${n.noSwipingClass}`,h=!(!i.target||!i.target.shadowRoot);if(n.noSwiping&&(h?function(e,t){return void 0===t&&(t=this),function t(s){if(!s||s===o()||s===c())return null;s.assignedSlot&&(s=s.assignedSlot);const i=s.closest(e);return i||s.getRootNode?i||t(s.getRootNode().host):null}(t)}(f,d):d.closest(f)))return void(t.allowClick=!0);if(n.swipeHandler&&!d.closest(n.swipeHandler))return;a.currentX=i.pageX,a.currentY=i.pageY;const g=a.currentX,v=a.currentY;if(!j(t,i,g))return;Object.assign(r,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),a.startX=g,a.startY=v,r.touchStartTime=u(),t.allowClick=!0,t.updateSize(),t.swipeDirection=void 0,n.threshold>0&&(r.allowThresholdMove=!1);let w=!0;d.matches(r.focusableElements)&&(w=!1,"SELECT"===d.nodeName&&(r.isTouched=!1)),s.activeElement&&s.activeElement.matches(r.focusableElements)&&s.activeElement!==d&&s.activeElement.blur();const b=w&&t.allowTouchMove&&n.touchStartPreventDefault;!n.touchStartForcePreventDefault&&!b||d.isContentEditable||i.preventDefault(),n.freeMode&&n.freeMode.enabled&&t.freeMode&&t.animating&&!n.cssMode&&t.freeMode.onTouchStart(),t.emit("touchStart",i)}function q(e){const t=o(),s=this,i=s.touchEventsData,{params:r,touches:n,rtlTranslate:a,enabled:l}=s;if(!l)return;if(!r.simulateTouch&&"mouse"===e.pointerType)return;let d,c=e;if(c.originalEvent&&(c=c.originalEvent),"pointermove"===c.type){if(null!==i.touchId)return;if(c.pointerId!==i.pointerId)return}if("touchmove"===c.type){if(d=[...c.changedTouches].filter((e=>e.identifier===i.touchId))[0],!d||d.identifier!==i.touchId)return}else d=c;if(!i.isTouched)return void(i.startMoving&&i.isScrolling&&s.emit("touchMoveOpposite",c));const p=d.pageX,m=d.pageY;if(c.preventedByNestedSwiper)return n.startX=p,void(n.startY=m);if(!s.allowTouchMove)return c.target.matches(i.focusableElements)||(s.allowClick=!1),void(i.isTouched&&(Object.assign(n,{startX:p,startY:m,currentX:p,currentY:m}),i.touchStartTime=u()));if(r.touchReleaseOnEdges&&!r.loop)if(s.isVertical()){if(m<n.startY&&s.translate<=s.maxTranslate()||m>n.startY&&s.translate>=s.minTranslate())return i.isTouched=!1,void(i.isMoved=!1)}else if(p<n.startX&&s.translate<=s.maxTranslate()||p>n.startX&&s.translate>=s.minTranslate())return;if(t.activeElement&&c.target===t.activeElement&&c.target.matches(i.focusableElements))return i.isMoved=!0,void(s.allowClick=!1);i.allowTouchCallbacks&&s.emit("touchMove",c),n.previousX=n.currentX,n.previousY=n.currentY,n.currentX=p,n.currentY=m;const f=n.currentX-n.startX,h=n.currentY-n.startY;if(s.params.threshold&&Math.sqrt(f**2+h**2)<s.params.threshold)return;if(void 0===i.isScrolling){let e;s.isHorizontal()&&n.currentY===n.startY||s.isVertical()&&n.currentX===n.startX?i.isScrolling=!1:f*f+h*h>=25&&(e=180*Math.atan2(Math.abs(h),Math.abs(f))/Math.PI,i.isScrolling=s.isHorizontal()?e>r.touchAngle:90-e>r.touchAngle)}if(i.isScrolling&&s.emit("touchMoveOpposite",c),void 0===i.startMoving&&(n.currentX===n.startX&&n.currentY===n.startY||(i.startMoving=!0)),i.isScrolling||"touchmove"===c.type&&i.preventTouchMoveFromPointerMove)return void(i.isTouched=!1);if(!i.startMoving)return;s.allowClick=!1,!r.cssMode&&c.cancelable&&c.preventDefault(),r.touchMoveStopPropagation&&!r.nested&&c.stopPropagation();let g=s.isHorizontal()?f:h,v=s.isHorizontal()?n.currentX-n.previousX:n.currentY-n.previousY;r.oneWayMovement&&(g=Math.abs(g)*(a?1:-1),v=Math.abs(v)*(a?1:-1)),n.diff=g,g*=r.touchRatio,a&&(g=-g,v=-v);const w=s.touchesDirection;s.swipeDirection=g>0?"prev":"next",s.touchesDirection=v>0?"prev":"next";const b=s.params.loop&&!r.cssMode,S="next"===s.touchesDirection&&s.allowSlideNext||"prev"===s.touchesDirection&&s.allowSlidePrev;if(!i.isMoved){if(b&&S&&s.loopFix({direction:s.swipeDirection}),i.startTranslate=s.getTranslate(),s.setTransition(0),s.animating){const e=new window.CustomEvent("transitionend",{bubbles:!0,cancelable:!0,detail:{bySwiperTouchMove:!0}});s.wrapperEl.dispatchEvent(e)}i.allowMomentumBounce=!1,!r.grabCursor||!0!==s.allowSlideNext&&!0!==s.allowSlidePrev||s.setGrabCursor(!0),s.emit("sliderFirstMove",c)}if((new Date).getTime(),i.isMoved&&i.allowThresholdMove&&w!==s.touchesDirection&&b&&S&&Math.abs(g)>=1)return Object.assign(n,{startX:p,startY:m,currentX:p,currentY:m,startTranslate:i.currentTranslate}),i.loopSwapReset=!0,void(i.startTranslate=i.currentTranslate);s.emit("sliderMove",c),i.isMoved=!0,i.currentTranslate=g+i.startTranslate;let y=!0,T=r.resistanceRatio;if(r.touchReleaseOnEdges&&(T=0),g>0?(b&&S&&i.allowThresholdMove&&i.currentTranslate>(r.centeredSlides?s.minTranslate()-s.slidesSizesGrid[s.activeIndex+1]-("auto"!==r.slidesPerView&&s.slides.length-r.slidesPerView>=2?s.slidesSizesGrid[s.activeIndex+1]+s.params.spaceBetween:0)-s.params.spaceBetween:s.minTranslate())&&s.loopFix({direction:"prev",setTranslate:!0,activeSlideIndex:0}),i.currentTranslate>s.minTranslate()&&(y=!1,r.resistance&&(i.currentTranslate=s.minTranslate()-1+(-s.minTranslate()+i.startTranslate+g)**T))):g<0&&(b&&S&&i.allowThresholdMove&&i.currentTranslate<(r.centeredSlides?s.maxTranslate()+s.slidesSizesGrid[s.slidesSizesGrid.length-1]+s.params.spaceBetween+("auto"!==r.slidesPerView&&s.slides.length-r.slidesPerView>=2?s.slidesSizesGrid[s.slidesSizesGrid.length-1]+s.params.spaceBetween:0):s.maxTranslate())&&s.loopFix({direction:"next",setTranslate:!0,activeSlideIndex:s.slides.length-("auto"===r.slidesPerView?s.slidesPerViewDynamic():Math.ceil(parseFloat(r.slidesPerView,10)))}),i.currentTranslate<s.maxTranslate()&&(y=!1,r.resistance&&(i.currentTranslate=s.maxTranslate()+1-(s.maxTranslate()-i.startTranslate-g)**T))),y&&(c.preventedByNestedSwiper=!0),!s.allowSlideNext&&"next"===s.swipeDirection&&i.currentTranslate<i.startTranslate&&(i.currentTranslate=i.startTranslate),!s.allowSlidePrev&&"prev"===s.swipeDirection&&i.currentTranslate>i.startTranslate&&(i.currentTranslate=i.startTranslate),s.allowSlidePrev||s.allowSlideNext||(i.currentTranslate=i.startTranslate),r.threshold>0){if(!(Math.abs(g)>r.threshold||i.allowThresholdMove))return void(i.currentTranslate=i.startTranslate);if(!i.allowThresholdMove)return i.allowThresholdMove=!0,n.startX=n.currentX,n.startY=n.currentY,i.currentTranslate=i.startTranslate,void(n.diff=s.isHorizontal()?n.currentX-n.startX:n.currentY-n.startY)}r.followFinger&&!r.cssMode&&((r.freeMode&&r.freeMode.enabled&&s.freeMode||r.watchSlidesProgress)&&(s.updateActiveIndex(),s.updateSlidesClasses()),r.freeMode&&r.freeMode.enabled&&s.freeMode&&s.freeMode.onTouchMove(),s.updateProgress(i.currentTranslate),s.setTranslate(i.currentTranslate))}function W(e){const t=this,s=t.touchEventsData;let i,r=e;r.originalEvent&&(r=r.originalEvent);if("touchend"===r.type||"touchcancel"===r.type){if(i=[...r.changedTouches].filter((e=>e.identifier===s.touchId))[0],!i||i.identifier!==s.touchId)return}else{if(null!==s.touchId)return;if(r.pointerId!==s.pointerId)return;i=r}if(["pointercancel","pointerout","pointerleave","contextmenu"].includes(r.type)){if(!(["pointercancel","contextmenu"].includes(r.type)&&(t.browser.isSafari||t.browser.isWebView)))return}s.pointerId=null,s.touchId=null;const{params:n,touches:a,rtlTranslate:l,slidesGrid:o,enabled:d}=t;if(!d)return;if(!n.simulateTouch&&"mouse"===r.pointerType)return;if(s.allowTouchCallbacks&&t.emit("touchEnd",r),s.allowTouchCallbacks=!1,!s.isTouched)return s.isMoved&&n.grabCursor&&t.setGrabCursor(!1),s.isMoved=!1,void(s.startMoving=!1);n.grabCursor&&s.isMoved&&s.isTouched&&(!0===t.allowSlideNext||!0===t.allowSlidePrev)&&t.setGrabCursor(!1);const c=u(),m=c-s.touchStartTime;if(t.allowClick){const e=r.path||r.composedPath&&r.composedPath();t.updateClickedSlide(e&&e[0]||r.target,e),t.emit("tap click",r),m<300&&c-s.lastClickTime<300&&t.emit("doubleTap doubleClick",r)}if(s.lastClickTime=u(),p((()=>{t.destroyed||(t.allowClick=!0)})),!s.isTouched||!s.isMoved||!t.swipeDirection||0===a.diff&&!s.loopSwapReset||s.currentTranslate===s.startTranslate&&!s.loopSwapReset)return s.isTouched=!1,s.isMoved=!1,void(s.startMoving=!1);let f;if(s.isTouched=!1,s.isMoved=!1,s.startMoving=!1,f=n.followFinger?l?t.translate:-t.translate:-s.currentTranslate,n.cssMode)return;if(n.freeMode&&n.freeMode.enabled)return void t.freeMode.onTouchEnd({currentPos:f});const h=f>=-t.maxTranslate()&&!t.params.loop;let g=0,v=t.slidesSizesGrid[0];for(let e=0;e<o.length;e+=e<n.slidesPerGroupSkip?1:n.slidesPerGroup){const t=e<n.slidesPerGroupSkip-1?1:n.slidesPerGroup;void 0!==o[e+t]?(h||f>=o[e]&&f<o[e+t])&&(g=e,v=o[e+t]-o[e]):(h||f>=o[e])&&(g=e,v=o[o.length-1]-o[o.length-2])}let w=null,b=null;n.rewind&&(t.isBeginning?b=n.virtual&&n.virtual.enabled&&t.virtual?t.virtual.slides.length-1:t.slides.length-1:t.isEnd&&(w=0));const S=(f-o[g])/v,y=g<n.slidesPerGroupSkip-1?1:n.slidesPerGroup;if(m>n.longSwipesMs){if(!n.longSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&(S>=n.longSwipesRatio?t.slideTo(n.rewind&&t.isEnd?w:g+y):t.slideTo(g)),"prev"===t.swipeDirection&&(S>1-n.longSwipesRatio?t.slideTo(g+y):null!==b&&S<0&&Math.abs(S)>n.longSwipesRatio?t.slideTo(b):t.slideTo(g))}else{if(!n.shortSwipes)return void t.slideTo(t.activeIndex);t.navigation&&(r.target===t.navigation.nextEl||r.target===t.navigation.prevEl)?r.target===t.navigation.nextEl?t.slideTo(g+y):t.slideTo(g):("next"===t.swipeDirection&&t.slideTo(null!==w?w:g+y),"prev"===t.swipeDirection&&t.slideTo(null!==b?b:g))}}function Y(){const e=this,{params:t,el:s}=e;if(s&&0===s.offsetWidth)return;t.breakpoints&&e.setBreakpoint();const{allowSlideNext:i,allowSlidePrev:r,snapGrid:n}=e,a=e.virtual&&e.params.virtual.enabled;e.allowSlideNext=!0,e.allowSlidePrev=!0,e.updateSize(),e.updateSlides(),e.updateSlidesClasses();const l=a&&t.loop;!("auto"===t.slidesPerView||t.slidesPerView>1)||!e.isEnd||e.isBeginning||e.params.centeredSlides||l?e.params.loop&&!a?e.slideToLoop(e.realIndex,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0):e.slideTo(e.slides.length-1,0,!1,!0),e.autoplay&&e.autoplay.running&&e.autoplay.paused&&(clearTimeout(e.autoplay.resizeTimeout),e.autoplay.resizeTimeout=setTimeout((()=>{e.autoplay&&e.autoplay.running&&e.autoplay.paused&&e.autoplay.resume()}),500)),e.allowSlidePrev=r,e.allowSlideNext=i,e.params.watchOverflow&&n!==e.snapGrid&&e.checkOverflow()}function X(e){const t=this;t.enabled&&(t.allowClick||(t.params.preventClicks&&e.preventDefault(),t.params.preventClicksPropagation&&t.animating&&(e.stopPropagation(),e.stopImmediatePropagation())))}function U(){const e=this,{wrapperEl:t,rtlTranslate:s,enabled:i}=e;if(!i)return;let r;e.previousTranslate=e.translate,e.isHorizontal()?e.translate=-t.scrollLeft:e.translate=-t.scrollTop,0===e.translate&&(e.translate=0),e.updateActiveIndex(),e.updateSlidesClasses();const n=e.maxTranslate()-e.minTranslate();r=0===n?0:(e.translate-e.minTranslate())/n,r!==e.progress&&e.updateProgress(s?-e.translate:e.translate),e.emit("setTranslate",e.translate,!1)}function K(e){const t=this;_(t,e.target),t.params.cssMode||"auto"!==t.params.slidesPerView&&!t.params.autoHeight||t.update()}function J(){const e=this;e.documentTouchHandlerProceeded||(e.documentTouchHandlerProceeded=!0,e.params.touchReleaseOnEdges&&(e.el.style.touchAction="auto"))}const Q=(e,t)=>{const s=o(),{params:i,el:r,wrapperEl:n,device:a}=e,l=!!i.nested,d="on"===t?"addEventListener":"removeEventListener",c=t;r&&"string"!=typeof r&&(s[d]("touchstart",e.onDocumentTouchStart,{passive:!1,capture:l}),r[d]("touchstart",e.onTouchStart,{passive:!1}),r[d]("pointerdown",e.onTouchStart,{passive:!1}),s[d]("touchmove",e.onTouchMove,{passive:!1,capture:l}),s[d]("pointermove",e.onTouchMove,{passive:!1,capture:l}),s[d]("touchend",e.onTouchEnd,{passive:!0}),s[d]("pointerup",e.onTouchEnd,{passive:!0}),s[d]("pointercancel",e.onTouchEnd,{passive:!0}),s[d]("touchcancel",e.onTouchEnd,{passive:!0}),s[d]("pointerout",e.onTouchEnd,{passive:!0}),s[d]("pointerleave",e.onTouchEnd,{passive:!0}),s[d]("contextmenu",e.onTouchEnd,{passive:!0}),(i.preventClicks||i.preventClicksPropagation)&&r[d]("click",e.onClick,!0),i.cssMode&&n[d]("scroll",e.onScroll),i.updateOnWindowResize?e[c](a.ios||a.android?"resize orientationchange observerUpdate":"resize observerUpdate",Y,!0):e[c]("observerUpdate",Y,!0),r[d]("load",e.onLoad,{capture:!0}))};const Z=(e,t)=>e.grid&&t.grid&&t.grid.rows>1;var ee={init:!0,direction:"horizontal",oneWayMovement:!1,swiperElementNodeName:"SWIPER-CONTAINER",touchEventsTarget:"wrapper",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,resizeObserver:!0,nested:!1,createElements:!1,eventsPrefix:"swiper",enabled:!0,focusableElements:"input, select, option, textarea, button, video, label",width:null,height:null,preventInteractionOnTransition:!1,userAgent:null,url:null,edgeSwipeDetection:!1,edgeSwipeThreshold:20,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,breakpointsBase:"window",spaceBetween:0,slidesPerView:1,slidesPerGroup:1,slidesPerGroupSkip:0,slidesPerGroupAuto:!1,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!0,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:5,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,loop:!1,loopAddBlankSlides:!0,loopAdditionalSlides:0,loopPreventsSliding:!0,rewind:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,maxBackfaceHiddenSlides:10,containerModifierClass:"swiper-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-blank",slideActiveClass:"swiper-slide-active",slideVisibleClass:"swiper-slide-visible",slideFullyVisibleClass:"swiper-slide-fully-visible",slideNextClass:"swiper-slide-next",slidePrevClass:"swiper-slide-prev",wrapperClass:"swiper-wrapper",lazyPreloaderClass:"swiper-lazy-preloader",lazyPreloadPrevNext:0,runCallbacksOnInit:!0,_emitClasses:!1};function te(e,t){return function(s){void 0===s&&(s={});const i=Object.keys(s)[0],r=s[i];"object"==typeof r&&null!==r?(!0===e[i]&&(e[i]={enabled:!0}),"navigation"===i&&e[i]&&e[i].enabled&&!e[i].prevEl&&!e[i].nextEl&&(e[i].auto=!0),["pagination","scrollbar"].indexOf(i)>=0&&e[i]&&e[i].enabled&&!e[i].el&&(e[i].auto=!0),i in e&&"enabled"in r?("object"!=typeof e[i]||"enabled"in e[i]||(e[i].enabled=!0),e[i]||(e[i]={enabled:!1}),h(t,s)):h(t,s)):h(t,s)}}const se={eventsEmitter:O,update:B,translate:N,transition:{setTransition:function(e,t){const s=this;s.params.cssMode||(s.wrapperEl.style.transitionDuration=`${e}ms`,s.wrapperEl.style.transitionDelay=0===e?"0ms":""),s.emit("setTransition",e,t)},transitionStart:function(e,t){void 0===e&&(e=!0);const s=this,{params:i}=s;i.cssMode||(i.autoHeight&&s.updateAutoHeight(),F({swiper:s,runCallbacks:e,direction:t,step:"Start"}))},transitionEnd:function(e,t){void 0===e&&(e=!0);const s=this,{params:i}=s;s.animating=!1,i.cssMode||(s.setTransition(0),F({swiper:s,runCallbacks:e,direction:t,step:"End"}))}},slide:V,loop:H,grabCursor:{setGrabCursor:function(e){const t=this;if(!t.params.simulateTouch||t.params.watchOverflow&&t.isLocked||t.params.cssMode)return;const s="container"===t.params.touchEventsTarget?t.el:t.wrapperEl;t.isElement&&(t.__preventObserver__=!0),s.style.cursor="move",s.style.cursor=e?"grabbing":"grab",t.isElement&&requestAnimationFrame((()=>{t.__preventObserver__=!1}))},unsetGrabCursor:function(){const e=this;e.params.watchOverflow&&e.isLocked||e.params.cssMode||(e.isElement&&(e.__preventObserver__=!0),e["container"===e.params.touchEventsTarget?"el":"wrapperEl"].style.cursor="",e.isElement&&requestAnimationFrame((()=>{e.__preventObserver__=!1})))}},events:{attachEvents:function(){const e=this,{params:t}=e;e.onTouchStart=R.bind(e),e.onTouchMove=q.bind(e),e.onTouchEnd=W.bind(e),e.onDocumentTouchStart=J.bind(e),t.cssMode&&(e.onScroll=U.bind(e)),e.onClick=X.bind(e),e.onLoad=K.bind(e),Q(e,"on")},detachEvents:function(){Q(this,"off")}},breakpoints:{setBreakpoint:function(){const e=this,{realIndex:t,initialized:s,params:i,el:r}=e,n=i.breakpoints;if(!n||n&&0===Object.keys(n).length)return;const a=e.getBreakpoint(n,e.params.breakpointsBase,e.el);if(!a||e.currentBreakpoint===a)return;const l=(a in n?n[a]:void 0)||e.originalParams,o=Z(e,i),d=Z(e,l),c=e.params.grabCursor,p=l.grabCursor,u=i.enabled;o&&!d?(r.classList.remove(`${i.containerModifierClass}grid`,`${i.containerModifierClass}grid-column`),e.emitContainerClasses()):!o&&d&&(r.classList.add(`${i.containerModifierClass}grid`),(l.grid.fill&&"column"===l.grid.fill||!l.grid.fill&&"column"===i.grid.fill)&&r.classList.add(`${i.containerModifierClass}grid-column`),e.emitContainerClasses()),c&&!p?e.unsetGrabCursor():!c&&p&&e.setGrabCursor(),["navigation","pagination","scrollbar"].forEach((t=>{if(void 0===l[t])return;const s=i[t]&&i[t].enabled,r=l[t]&&l[t].enabled;s&&!r&&e[t].disable(),!s&&r&&e[t].enable()}));const m=l.direction&&l.direction!==i.direction,f=i.loop&&(l.slidesPerView!==i.slidesPerView||m),g=i.loop;m&&s&&e.changeDirection(),h(e.params,l);const v=e.params.enabled,w=e.params.loop;Object.assign(e,{allowTouchMove:e.params.allowTouchMove,allowSlideNext:e.params.allowSlideNext,allowSlidePrev:e.params.allowSlidePrev}),u&&!v?e.disable():!u&&v&&e.enable(),e.currentBreakpoint=a,e.emit("_beforeBreakpoint",l),s&&(f?(e.loopDestroy(),e.loopCreate(t),e.updateSlides()):!g&&w?(e.loopCreate(t),e.updateSlides()):g&&!w&&e.loopDestroy()),e.emit("breakpoint",l)},getBreakpoint:function(e,t,s){if(void 0===t&&(t="window"),!e||"container"===t&&!s)return;let i=!1;const r=c(),n="window"===t?r.innerHeight:s.clientHeight,a=Object.keys(e).map((e=>{if("string"==typeof e&&0===e.indexOf("@")){const t=parseFloat(e.substr(1));return{value:n*t,point:e}}return{value:e,point:e}}));a.sort(((e,t)=>parseInt(e.value,10)-parseInt(t.value,10)));for(let e=0;e<a.length;e+=1){const{point:n,value:l}=a[e];"window"===t?r.matchMedia(`(min-width: ${l}px)`).matches&&(i=n):l<=s.clientWidth&&(i=n)}return i||"max"}},checkOverflow:{checkOverflow:function(){const e=this,{isLocked:t,params:s}=e,{slidesOffsetBefore:i}=s;if(i){const t=e.slides.length-1,s=e.slidesGrid[t]+e.slidesSizesGrid[t]+2*i;e.isLocked=e.size>s}else e.isLocked=1===e.snapGrid.length;!0===s.allowSlideNext&&(e.allowSlideNext=!e.isLocked),!0===s.allowSlidePrev&&(e.allowSlidePrev=!e.isLocked),t&&t!==e.isLocked&&(e.isEnd=!1),t!==e.isLocked&&e.emit(e.isLocked?"lock":"unlock")}},classes:{addClasses:function(){const e=this,{classNames:t,params:s,rtl:i,el:r,device:n}=e,a=function(e,t){const s=[];return e.forEach((e=>{"object"==typeof e?Object.keys(e).forEach((i=>{e[i]&&s.push(t+i)})):"string"==typeof e&&s.push(t+e)})),s}(["initialized",s.direction,{"free-mode":e.params.freeMode&&s.freeMode.enabled},{autoheight:s.autoHeight},{rtl:i},{grid:s.grid&&s.grid.rows>1},{"grid-column":s.grid&&s.grid.rows>1&&"column"===s.grid.fill},{android:n.android},{ios:n.ios},{"css-mode":s.cssMode},{centered:s.cssMode&&s.centeredSlides},{"watch-progress":s.watchSlidesProgress}],s.containerModifierClass);t.push(...a),r.classList.add(...t),e.emitContainerClasses()},removeClasses:function(){const{el:e,classNames:t}=this;e&&"string"!=typeof e&&(e.classList.remove(...t),this.emitContainerClasses())}}},ie={};class re{constructor(){let e,t;for(var s=arguments.length,i=new Array(s),r=0;r<s;r++)i[r]=arguments[r];1===i.length&&i[0].constructor&&"Object"===Object.prototype.toString.call(i[0]).slice(8,-1)?t=i[0]:[e,t]=i,t||(t={}),t=h({},t),e&&!t.el&&(t.el=e);const n=o();if(t.el&&"string"==typeof t.el&&n.querySelectorAll(t.el).length>1){const e=[];return n.querySelectorAll(t.el).forEach((s=>{const i=h({},t,{el:s});e.push(new re(i))})),e}const a=this;a.__swiper__=!0,a.support=k(),a.device=I({userAgent:t.userAgent}),a.browser=A(),a.eventsListeners={},a.eventsAnyListeners=[],a.modules=[...a.__modules__],t.modules&&Array.isArray(t.modules)&&a.modules.push(...t.modules);const l={};a.modules.forEach((e=>{e({params:t,swiper:a,extendParams:te(t,l),on:a.on.bind(a),once:a.once.bind(a),off:a.off.bind(a),emit:a.emit.bind(a)})}));const d=h({},ee,l);return a.params=h({},d,ie,t),a.originalParams=h({},a.params),a.passedParams=h({},t),a.params&&a.params.on&&Object.keys(a.params.on).forEach((e=>{a.on(e,a.params.on[e])})),a.params&&a.params.onAny&&a.onAny(a.params.onAny),Object.assign(a,{enabled:a.params.enabled,el:e,classNames:[],slides:[],slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:()=>"horizontal"===a.params.direction,isVertical:()=>"vertical"===a.params.direction,activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,cssOverflowAdjustment(){return Math.trunc(this.translate/2**23)*2**23},allowSlideNext:a.params.allowSlideNext,allowSlidePrev:a.params.allowSlidePrev,touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,focusableElements:a.params.focusableElements,lastClickTime:0,clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,startMoving:void 0,pointerId:null,touchId:null},allowClick:!0,allowTouchMove:a.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),a.emit("_swiper"),a.params.init&&a.init(),a}getDirectionLabel(e){return this.isHorizontal()?e:{width:"height","margin-top":"margin-left","margin-bottom ":"margin-right","margin-left":"margin-top","margin-right":"margin-bottom","padding-left":"padding-top","padding-right":"padding-bottom",marginRight:"marginBottom"}[e]}getSlideIndex(e){const{slidesEl:t,params:s}=this,i=T(w(t,`.${s.slideClass}, swiper-slide`)[0]);return T(e)-i}getSlideIndexByData(e){return this.getSlideIndex(this.slides.filter((t=>1*t.getAttribute("data-swiper-slide-index")===e))[0])}recalcSlides(){const{slidesEl:e,params:t}=this;this.slides=w(e,`.${t.slideClass}, swiper-slide`)}enable(){const e=this;e.enabled||(e.enabled=!0,e.params.grabCursor&&e.setGrabCursor(),e.emit("enable"))}disable(){const e=this;e.enabled&&(e.enabled=!1,e.params.grabCursor&&e.unsetGrabCursor(),e.emit("disable"))}setProgress(e,t){const s=this;e=Math.min(Math.max(e,0),1);const i=s.minTranslate(),r=(s.maxTranslate()-i)*e+i;s.translateTo(r,void 0===t?0:t),s.updateActiveIndex(),s.updateSlidesClasses()}emitContainerClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const t=e.el.className.split(" ").filter((t=>0===t.indexOf("swiper")||0===t.indexOf(e.params.containerModifierClass)));e.emit("_containerClasses",t.join(" "))}getSlideClasses(e){const t=this;return t.destroyed?"":e.className.split(" ").filter((e=>0===e.indexOf("swiper-slide")||0===e.indexOf(t.params.slideClass))).join(" ")}emitSlidesClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const t=[];e.slides.forEach((s=>{const i=e.getSlideClasses(s);t.push({slideEl:s,classNames:i}),e.emit("_slideClass",s,i)})),e.emit("_slideClasses",t)}slidesPerViewDynamic(e,t){void 0===e&&(e="current"),void 0===t&&(t=!1);const{params:s,slides:i,slidesGrid:r,slidesSizesGrid:n,size:a,activeIndex:l}=this;let o=1;if("number"==typeof s.slidesPerView)return s.slidesPerView;if(s.centeredSlides){let e,t=i[l]?Math.ceil(i[l].swiperSlideSize):0;for(let s=l+1;s<i.length;s+=1)i[s]&&!e&&(t+=Math.ceil(i[s].swiperSlideSize),o+=1,t>a&&(e=!0));for(let s=l-1;s>=0;s-=1)i[s]&&!e&&(t+=i[s].swiperSlideSize,o+=1,t>a&&(e=!0))}else if("current"===e)for(let e=l+1;e<i.length;e+=1){(t?r[e]+n[e]-r[l]<a:r[e]-r[l]<a)&&(o+=1)}else for(let e=l-1;e>=0;e-=1){r[l]-r[e]<a&&(o+=1)}return o}update(){const e=this;if(!e||e.destroyed)return;const{snapGrid:t,params:s}=e;function i(){const t=e.rtlTranslate?-1*e.translate:e.translate,s=Math.min(Math.max(t,e.maxTranslate()),e.minTranslate());e.setTranslate(s),e.updateActiveIndex(),e.updateSlidesClasses()}let r;if(s.breakpoints&&e.setBreakpoint(),[...e.el.querySelectorAll('[loading="lazy"]')].forEach((t=>{t.complete&&_(e,t)})),e.updateSize(),e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),s.freeMode&&s.freeMode.enabled&&!s.cssMode)i(),s.autoHeight&&e.updateAutoHeight();else{if(("auto"===s.slidesPerView||s.slidesPerView>1)&&e.isEnd&&!s.centeredSlides){const t=e.virtual&&s.virtual.enabled?e.virtual.slides:e.slides;r=e.slideTo(t.length-1,0,!1,!0)}else r=e.slideTo(e.activeIndex,0,!1,!0);r||i()}s.watchOverflow&&t!==e.snapGrid&&e.checkOverflow(),e.emit("update")}changeDirection(e,t){void 0===t&&(t=!0);const s=this,i=s.params.direction;return e||(e="horizontal"===i?"vertical":"horizontal"),e===i||"horizontal"!==e&&"vertical"!==e||(s.el.classList.remove(`${s.params.containerModifierClass}${i}`),s.el.classList.add(`${s.params.containerModifierClass}${e}`),s.emitContainerClasses(),s.params.direction=e,s.slides.forEach((t=>{"vertical"===e?t.style.width="":t.style.height=""})),s.emit("changeDirection"),t&&s.update()),s}changeLanguageDirection(e){const t=this;t.rtl&&"rtl"===e||!t.rtl&&"ltr"===e||(t.rtl="rtl"===e,t.rtlTranslate="horizontal"===t.params.direction&&t.rtl,t.rtl?(t.el.classList.add(`${t.params.containerModifierClass}rtl`),t.el.dir="rtl"):(t.el.classList.remove(`${t.params.containerModifierClass}rtl`),t.el.dir="ltr"),t.update())}mount(e){const t=this;if(t.mounted)return!0;let s=e||t.params.el;if("string"==typeof s&&(s=document.querySelector(s)),!s)return!1;s.swiper=t,s.parentNode&&s.parentNode.host&&s.parentNode.host.nodeName===t.params.swiperElementNodeName.toUpperCase()&&(t.isElement=!0);const i=()=>`.${(t.params.wrapperClass||"").trim().split(" ").join(".")}`;let r=(()=>{if(s&&s.shadowRoot&&s.shadowRoot.querySelector){return s.shadowRoot.querySelector(i())}return w(s,i())[0]})();return!r&&t.params.createElements&&(r=S("div",t.params.wrapperClass),s.append(r),w(s,`.${t.params.slideClass}`).forEach((e=>{r.append(e)}))),Object.assign(t,{el:s,wrapperEl:r,slidesEl:t.isElement&&!s.parentNode.host.slideSlots?s.parentNode.host:r,hostEl:t.isElement?s.parentNode.host:s,mounted:!0,rtl:"rtl"===s.dir.toLowerCase()||"rtl"===y(s,"direction"),rtlTranslate:"horizontal"===t.params.direction&&("rtl"===s.dir.toLowerCase()||"rtl"===y(s,"direction")),wrongRTL:"-webkit-box"===y(r,"display")}),!0}init(e){const t=this;if(t.initialized)return t;if(!1===t.mount(e))return t;t.emit("beforeInit"),t.params.breakpoints&&t.setBreakpoint(),t.addClasses(),t.updateSize(),t.updateSlides(),t.params.watchOverflow&&t.checkOverflow(),t.params.grabCursor&&t.enabled&&t.setGrabCursor(),t.params.loop&&t.virtual&&t.params.virtual.enabled?t.slideTo(t.params.initialSlide+t.virtual.slidesBefore,0,t.params.runCallbacksOnInit,!1,!0):t.slideTo(t.params.initialSlide,0,t.params.runCallbacksOnInit,!1,!0),t.params.loop&&t.loopCreate(),t.attachEvents();const s=[...t.el.querySelectorAll('[loading="lazy"]')];return t.isElement&&s.push(...t.hostEl.querySelectorAll('[loading="lazy"]')),s.forEach((e=>{e.complete?_(t,e):e.addEventListener("load",(e=>{_(t,e.target)}))})),$(t),t.initialized=!0,$(t),t.emit("init"),t.emit("afterInit"),t}destroy(e,t){void 0===e&&(e=!0),void 0===t&&(t=!0);const s=this,{params:i,el:r,wrapperEl:n,slides:a}=s;return void 0===s.params||s.destroyed||(s.emit("beforeDestroy"),s.initialized=!1,s.detachEvents(),i.loop&&s.loopDestroy(),t&&(s.removeClasses(),r&&"string"!=typeof r&&r.removeAttribute("style"),n&&n.removeAttribute("style"),a&&a.length&&a.forEach((e=>{e.classList.remove(i.slideVisibleClass,i.slideFullyVisibleClass,i.slideActiveClass,i.slideNextClass,i.slidePrevClass),e.removeAttribute("style"),e.removeAttribute("data-swiper-slide-index")}))),s.emit("destroy"),Object.keys(s.eventsListeners).forEach((e=>{s.off(e)})),!1!==e&&(s.el&&"string"!=typeof s.el&&(s.el.swiper=null),function(e){const t=e;Object.keys(t).forEach((e=>{try{t[e]=null}catch(e){}try{delete t[e]}catch(e){}}))}(s)),s.destroyed=!0),null}static extendDefaults(e){h(ie,e)}static get extendedDefaults(){return ie}static get defaults(){return ee}static installModule(e){re.prototype.__modules__||(re.prototype.__modules__=[]);const t=re.prototype.__modules__;"function"==typeof e&&t.indexOf(e)<0&&t.push(e)}static use(e){return Array.isArray(e)?(e.forEach((e=>re.installModule(e))),re):(re.installModule(e),re)}}function ne(e,t,s,i){return e.params.createElements&&Object.keys(i).forEach((r=>{if(!s[r]&&!0===s.auto){let n=w(e.el,`.${i[r]}`)[0];n||(n=S("div",i[r]),n.className=i[r],e.el.append(n)),s[r]=n,t[r]=n}})),s}function ae(e){return void 0===e&&(e=""),`.${e.trim().replace(/([\.:!+\/])/g,"\\$1").replace(/ /g,".")}`}Object.keys(se).forEach((e=>{Object.keys(se[e]).forEach((t=>{re.prototype[t]=se[e][t]}))})),re.use([function(e){let{swiper:t,on:s,emit:i}=e;const r=c();let n=null,a=null;const l=()=>{t&&!t.destroyed&&t.initialized&&(i("beforeResize"),i("resize"))},o=()=>{t&&!t.destroyed&&t.initialized&&i("orientationchange")};s("init",(()=>{t.params.resizeObserver&&void 0!==r.ResizeObserver?t&&!t.destroyed&&t.initialized&&(n=new ResizeObserver((e=>{a=r.requestAnimationFrame((()=>{const{width:s,height:i}=t;let r=s,n=i;e.forEach((e=>{let{contentBoxSize:s,contentRect:i,target:a}=e;a&&a!==t.el||(r=i?i.width:(s[0]||s).inlineSize,n=i?i.height:(s[0]||s).blockSize)})),r===s&&n===i||l()}))})),n.observe(t.el)):(r.addEventListener("resize",l),r.addEventListener("orientationchange",o))})),s("destroy",(()=>{a&&r.cancelAnimationFrame(a),n&&n.unobserve&&t.el&&(n.unobserve(t.el),n=null),r.removeEventListener("resize",l),r.removeEventListener("orientationchange",o)}))},function(e){let{swiper:t,extendParams:s,on:i,emit:r}=e;const n=[],a=c(),l=function(e,s){void 0===s&&(s={});const i=new(a.MutationObserver||a.WebkitMutationObserver)((e=>{if(t.__preventObserver__)return;if(1===e.length)return void r("observerUpdate",e[0]);const s=function(){r("observerUpdate",e[0])};a.requestAnimationFrame?a.requestAnimationFrame(s):a.setTimeout(s,0)}));i.observe(e,{attributes:void 0===s.attributes||s.attributes,childList:t.isElement||(void 0===s.childList||s).childList,characterData:void 0===s.characterData||s.characterData}),n.push(i)};s({observer:!1,observeParents:!1,observeSlideChildren:!1}),i("init",(()=>{if(t.params.observer){if(t.params.observeParents){const e=E(t.hostEl);for(let t=0;t<e.length;t+=1)l(e[t])}l(t.hostEl,{childList:t.params.observeSlideChildren}),l(t.wrapperEl,{attributes:!1})}})),i("destroy",(()=>{n.forEach((e=>{e.disconnect()})),n.splice(0,n.length)}))}]),window.innerWidth>1024&&Promise.all([r.e(345),r.e(738),r.e(633)]).then(r.bind(r,7633)),r.e(822).then(r.bind(r,4822)),document.querySelector(".gallery__swiper")&&new re(".gallery__swiper",{modules:[function(e){let{swiper:t,extendParams:s,on:i,emit:r}=e;function n(e){let s;return e&&"string"==typeof e&&t.isElement&&(s=t.el.querySelector(e),s)?s:(e&&("string"==typeof e&&(s=[...document.querySelectorAll(e)]),t.params.uniqueNavElements&&"string"==typeof e&&s&&s.length>1&&1===t.el.querySelectorAll(e).length?s=t.el.querySelector(e):s&&1===s.length&&(s=s[0])),e&&!s?e:s)}function a(e,s){const i=t.params.navigation;(e=C(e)).forEach((e=>{e&&(e.classList[s?"add":"remove"](...i.disabledClass.split(" ")),"BUTTON"===e.tagName&&(e.disabled=s),t.params.watchOverflow&&t.enabled&&e.classList[t.isLocked?"add":"remove"](i.lockClass))}))}function l(){const{nextEl:e,prevEl:s}=t.navigation;if(t.params.loop)return a(s,!1),void a(e,!1);a(s,t.isBeginning&&!t.params.rewind),a(e,t.isEnd&&!t.params.rewind)}function o(e){e.preventDefault(),(!t.isBeginning||t.params.loop||t.params.rewind)&&(t.slidePrev(),r("navigationPrev"))}function d(e){e.preventDefault(),(!t.isEnd||t.params.loop||t.params.rewind)&&(t.slideNext(),r("navigationNext"))}function c(){const e=t.params.navigation;if(t.params.navigation=ne(t,t.originalParams.navigation,t.params.navigation,{nextEl:"swiper-button-next",prevEl:"swiper-button-prev"}),!e.nextEl&&!e.prevEl)return;let s=n(e.nextEl),i=n(e.prevEl);Object.assign(t.navigation,{nextEl:s,prevEl:i}),s=C(s),i=C(i);const r=(s,i)=>{s&&s.addEventListener("click","next"===i?d:o),!t.enabled&&s&&s.classList.add(...e.lockClass.split(" "))};s.forEach((e=>r(e,"next"))),i.forEach((e=>r(e,"prev")))}function p(){let{nextEl:e,prevEl:s}=t.navigation;e=C(e),s=C(s);const i=(e,s)=>{e.removeEventListener("click","next"===s?d:o),e.classList.remove(...t.params.navigation.disabledClass.split(" "))};e.forEach((e=>i(e,"next"))),s.forEach((e=>i(e,"prev")))}s({navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock",navigationDisabledClass:"swiper-navigation-disabled"}}),t.navigation={nextEl:null,prevEl:null},i("init",(()=>{!1===t.params.navigation.enabled?u():(c(),l())})),i("toEdge fromEdge lock unlock",(()=>{l()})),i("destroy",(()=>{p()})),i("enable disable",(()=>{let{nextEl:e,prevEl:s}=t.navigation;e=C(e),s=C(s),t.enabled?l():[...e,...s].filter((e=>!!e)).forEach((e=>e.classList.add(t.params.navigation.lockClass)))})),i("click",((e,s)=>{let{nextEl:i,prevEl:n}=t.navigation;i=C(i),n=C(n);const a=s.target;let l=n.includes(a)||i.includes(a);if(t.isElement&&!l){const e=s.path||s.composedPath&&s.composedPath();e&&(l=e.find((e=>i.includes(e)||n.includes(e))))}if(t.params.navigation.hideOnClick&&!l){if(t.pagination&&t.params.pagination&&t.params.pagination.clickable&&(t.pagination.el===a||t.pagination.el.contains(a)))return;let e;i.length?e=i[0].classList.contains(t.params.navigation.hiddenClass):n.length&&(e=n[0].classList.contains(t.params.navigation.hiddenClass)),r(!0===e?"navigationShow":"navigationHide"),[...i,...n].filter((e=>!!e)).forEach((e=>e.classList.toggle(t.params.navigation.hiddenClass)))}}));const u=()=>{t.el.classList.add(...t.params.navigation.navigationDisabledClass.split(" ")),p()};Object.assign(t.navigation,{enable:()=>{t.el.classList.remove(...t.params.navigation.navigationDisabledClass.split(" ")),c(),l()},disable:u,update:l,init:c,destroy:p})},function(e){let{swiper:t,extendParams:s,on:i,emit:r}=e;const n="swiper-pagination";let a;s({pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:e=>e,formatFractionTotal:e=>e,bulletClass:`${n}-bullet`,bulletActiveClass:`${n}-bullet-active`,modifierClass:`${n}-`,currentClass:`${n}-current`,totalClass:`${n}-total`,hiddenClass:`${n}-hidden`,progressbarFillClass:`${n}-progressbar-fill`,progressbarOppositeClass:`${n}-progressbar-opposite`,clickableClass:`${n}-clickable`,lockClass:`${n}-lock`,horizontalClass:`${n}-horizontal`,verticalClass:`${n}-vertical`,paginationDisabledClass:`${n}-disabled`}}),t.pagination={el:null,bullets:[]};let l=0;function o(){return!t.params.pagination.el||!t.pagination.el||Array.isArray(t.pagination.el)&&0===t.pagination.el.length}function d(e,s){const{bulletActiveClass:i}=t.params.pagination;e&&(e=e[("prev"===s?"previous":"next")+"ElementSibling"])&&(e.classList.add(`${i}-${s}`),(e=e[("prev"===s?"previous":"next")+"ElementSibling"])&&e.classList.add(`${i}-${s}-${s}`))}function c(e){const s=e.target.closest(ae(t.params.pagination.bulletClass));if(!s)return;e.preventDefault();const i=T(s)*t.params.slidesPerGroup;if(t.params.loop){if(t.realIndex===i)return;t.slideToLoop(i)}else t.slideTo(i)}function p(){const e=t.rtl,s=t.params.pagination;if(o())return;let i,n,c=t.pagination.el;c=C(c);const p=t.virtual&&t.params.virtual.enabled?t.virtual.slides.length:t.slides.length,u=t.params.loop?Math.ceil(p/t.params.slidesPerGroup):t.snapGrid.length;if(t.params.loop?(n=t.previousRealIndex||0,i=t.params.slidesPerGroup>1?Math.floor(t.realIndex/t.params.slidesPerGroup):t.realIndex):void 0!==t.snapIndex?(i=t.snapIndex,n=t.previousSnapIndex):(n=t.previousIndex||0,i=t.activeIndex||0),"bullets"===s.type&&t.pagination.bullets&&t.pagination.bullets.length>0){const r=t.pagination.bullets;let o,p,u;if(s.dynamicBullets&&(a=x(r[0],t.isHorizontal()?"width":"height",!0),c.forEach((e=>{e.style[t.isHorizontal()?"width":"height"]=a*(s.dynamicMainBullets+4)+"px"})),s.dynamicMainBullets>1&&void 0!==n&&(l+=i-(n||0),l>s.dynamicMainBullets-1?l=s.dynamicMainBullets-1:l<0&&(l=0)),o=Math.max(i-l,0),p=o+(Math.min(r.length,s.dynamicMainBullets)-1),u=(p+o)/2),r.forEach((e=>{const t=[...["","-next","-next-next","-prev","-prev-prev","-main"].map((e=>`${s.bulletActiveClass}${e}`))].map((e=>"string"==typeof e&&e.includes(" ")?e.split(" "):e)).flat();e.classList.remove(...t)})),c.length>1)r.forEach((e=>{const r=T(e);r===i?e.classList.add(...s.bulletActiveClass.split(" ")):t.isElement&&e.setAttribute("part","bullet"),s.dynamicBullets&&(r>=o&&r<=p&&e.classList.add(...`${s.bulletActiveClass}-main`.split(" ")),r===o&&d(e,"prev"),r===p&&d(e,"next"))}));else{const e=r[i];if(e&&e.classList.add(...s.bulletActiveClass.split(" ")),t.isElement&&r.forEach(((e,t)=>{e.setAttribute("part",t===i?"bullet-active":"bullet")})),s.dynamicBullets){const e=r[o],t=r[p];for(let e=o;e<=p;e+=1)r[e]&&r[e].classList.add(...`${s.bulletActiveClass}-main`.split(" "));d(e,"prev"),d(t,"next")}}if(s.dynamicBullets){const i=Math.min(r.length,s.dynamicMainBullets+4),n=(a*i-a)/2-u*a,l=e?"right":"left";r.forEach((e=>{e.style[t.isHorizontal()?l:"top"]=`${n}px`}))}}c.forEach(((e,n)=>{if("fraction"===s.type&&(e.querySelectorAll(ae(s.currentClass)).forEach((e=>{e.textContent=s.formatFractionCurrent(i+1)})),e.querySelectorAll(ae(s.totalClass)).forEach((e=>{e.textContent=s.formatFractionTotal(u)}))),"progressbar"===s.type){let r;r=s.progressbarOpposite?t.isHorizontal()?"vertical":"horizontal":t.isHorizontal()?"horizontal":"vertical";const n=(i+1)/u;let a=1,l=1;"horizontal"===r?a=n:l=n,e.querySelectorAll(ae(s.progressbarFillClass)).forEach((e=>{e.style.transform=`translate3d(0,0,0) scaleX(${a}) scaleY(${l})`,e.style.transitionDuration=`${t.params.speed}ms`}))}"custom"===s.type&&s.renderCustom?(e.innerHTML=s.renderCustom(t,i+1,u),0===n&&r("paginationRender",e)):(0===n&&r("paginationRender",e),r("paginationUpdate",e)),t.params.watchOverflow&&t.enabled&&e.classList[t.isLocked?"add":"remove"](s.lockClass)}))}function u(){const e=t.params.pagination;if(o())return;const s=t.virtual&&t.params.virtual.enabled?t.virtual.slides.length:t.grid&&t.params.grid.rows>1?t.slides.length/Math.ceil(t.params.grid.rows):t.slides.length;let i=t.pagination.el;i=C(i);let n="";if("bullets"===e.type){let i=t.params.loop?Math.ceil(s/t.params.slidesPerGroup):t.snapGrid.length;t.params.freeMode&&t.params.freeMode.enabled&&i>s&&(i=s);for(let s=0;s<i;s+=1)e.renderBullet?n+=e.renderBullet.call(t,s,e.bulletClass):n+=`<${e.bulletElement} ${t.isElement?'part="bullet"':""} class="${e.bulletClass}"></${e.bulletElement}>`}"fraction"===e.type&&(n=e.renderFraction?e.renderFraction.call(t,e.currentClass,e.totalClass):`<span class="${e.currentClass}"></span> / <span class="${e.totalClass}"></span>`),"progressbar"===e.type&&(n=e.renderProgressbar?e.renderProgressbar.call(t,e.progressbarFillClass):`<span class="${e.progressbarFillClass}"></span>`),t.pagination.bullets=[],i.forEach((s=>{"custom"!==e.type&&(s.innerHTML=n||""),"bullets"===e.type&&t.pagination.bullets.push(...s.querySelectorAll(ae(e.bulletClass)))})),"custom"!==e.type&&r("paginationRender",i[0])}function m(){t.params.pagination=ne(t,t.originalParams.pagination,t.params.pagination,{el:"swiper-pagination"});const e=t.params.pagination;if(!e.el)return;let s;"string"==typeof e.el&&t.isElement&&(s=t.el.querySelector(e.el)),s||"string"!=typeof e.el||(s=[...document.querySelectorAll(e.el)]),s||(s=e.el),s&&0!==s.length&&(t.params.uniqueNavElements&&"string"==typeof e.el&&Array.isArray(s)&&s.length>1&&(s=[...t.el.querySelectorAll(e.el)],s.length>1&&(s=s.filter((e=>E(e,".swiper")[0]===t.el))[0])),Array.isArray(s)&&1===s.length&&(s=s[0]),Object.assign(t.pagination,{el:s}),s=C(s),s.forEach((s=>{"bullets"===e.type&&e.clickable&&s.classList.add(...(e.clickableClass||"").split(" ")),s.classList.add(e.modifierClass+e.type),s.classList.add(t.isHorizontal()?e.horizontalClass:e.verticalClass),"bullets"===e.type&&e.dynamicBullets&&(s.classList.add(`${e.modifierClass}${e.type}-dynamic`),l=0,e.dynamicMainBullets<1&&(e.dynamicMainBullets=1)),"progressbar"===e.type&&e.progressbarOpposite&&s.classList.add(e.progressbarOppositeClass),e.clickable&&s.addEventListener("click",c),t.enabled||s.classList.add(e.lockClass)})))}function f(){const e=t.params.pagination;if(o())return;let s=t.pagination.el;s&&(s=C(s),s.forEach((s=>{s.classList.remove(e.hiddenClass),s.classList.remove(e.modifierClass+e.type),s.classList.remove(t.isHorizontal()?e.horizontalClass:e.verticalClass),e.clickable&&(s.classList.remove(...(e.clickableClass||"").split(" ")),s.removeEventListener("click",c))}))),t.pagination.bullets&&t.pagination.bullets.forEach((t=>t.classList.remove(...e.bulletActiveClass.split(" "))))}i("changeDirection",(()=>{if(!t.pagination||!t.pagination.el)return;const e=t.params.pagination;let{el:s}=t.pagination;s=C(s),s.forEach((s=>{s.classList.remove(e.horizontalClass,e.verticalClass),s.classList.add(t.isHorizontal()?e.horizontalClass:e.verticalClass)}))})),i("init",(()=>{!1===t.params.pagination.enabled?h():(m(),u(),p())})),i("activeIndexChange",(()=>{void 0===t.snapIndex&&p()})),i("snapIndexChange",(()=>{p()})),i("snapGridLengthChange",(()=>{u(),p()})),i("destroy",(()=>{f()})),i("enable disable",(()=>{let{el:e}=t.pagination;e&&(e=C(e),e.forEach((e=>e.classList[t.enabled?"remove":"add"](t.params.pagination.lockClass))))})),i("lock unlock",(()=>{p()})),i("click",((e,s)=>{const i=s.target,n=C(t.pagination.el);if(t.params.pagination.el&&t.params.pagination.hideOnClick&&n&&n.length>0&&!i.classList.contains(t.params.pagination.bulletClass)){if(t.navigation&&(t.navigation.nextEl&&i===t.navigation.nextEl||t.navigation.prevEl&&i===t.navigation.prevEl))return;const e=n[0].classList.contains(t.params.pagination.hiddenClass);r(!0===e?"paginationShow":"paginationHide"),n.forEach((e=>e.classList.toggle(t.params.pagination.hiddenClass)))}}));const h=()=>{t.el.classList.add(t.params.pagination.paginationDisabledClass);let{el:e}=t.pagination;e&&(e=C(e),e.forEach((e=>e.classList.add(t.params.pagination.paginationDisabledClass)))),f()};Object.assign(t.pagination,{enable:()=>{t.el.classList.remove(t.params.pagination.paginationDisabledClass);let{el:e}=t.pagination;e&&(e=C(e),e.forEach((e=>e.classList.remove(t.params.pagination.paginationDisabledClass)))),m(),u(),p()},disable:h,render:u,update:p,init:m,destroy:f})}],loop:!0,grabCursor:!0,navigation:{prevEl:".gallery__slider-btn_prev",nextEl:".gallery__slider-btn_next"},pagination:{el:".gallery__fraction",type:"custom",renderCustom:function(e,t,s){return t+"<span>/</span>"+s}}})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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YjBtQixFQUNHLGlCQUVBLGtCQUVQN3dCLEVBQUdqSyxTQUFRODVCLEdBQVNBLEVBQU0zcUIsVUFBVTRyQixPQUFPbHVCLEVBQU9RLE9BQU91dEIsV0FBV0wsY0FDdEUsS0FFRixNQWFNekgsRUFBVSxLQUNkam1CLEVBQU81QyxHQUFHa0YsVUFBVUMsSUFBSXZDLEVBQU9RLE9BQU91dEIsV0FBVzJCLHlCQUNqRCxJQUFJLEdBQ0Z0eUIsR0FDRTRDLEVBQU8rdEIsV0FDUDN3QixJQUNGQSxFQUFLLEVBQWtCQSxHQUN2QkEsRUFBR2pLLFNBQVE4NUIsR0FBU0EsRUFBTTNxQixVQUFVQyxJQUFJdkMsRUFBT1EsT0FBT3V0QixXQUFXMkIsNEJBRW5FcEYsR0FBUyxFQUVYeDNCLE9BQU8wWCxPQUFPeEssRUFBTyt0QixXQUFZLENBQy9CN0gsT0F6QmEsS0FDYmxtQixFQUFPNUMsR0FBR2tGLFVBQVUyRixPQUFPakksRUFBT1EsT0FBT3V0QixXQUFXMkIseUJBQ3BELElBQUksR0FDRnR5QixHQUNFNEMsRUFBTyt0QixXQUNQM3dCLElBQ0ZBLEVBQUssRUFBa0JBLEdBQ3ZCQSxFQUFHakssU0FBUTg1QixHQUFTQSxFQUFNM3FCLFVBQVUyRixPQUFPakksRUFBT1EsT0FBT3V0QixXQUFXMkIsNEJBRXRFL0wsSUFDQThOLElBQ0F6bkIsR0FBUSxFQWVSaWMsVUFDQXdMLFNBQ0F6bkIsU0FDQTJaLE9BQ0EyRyxXQUVKLEdGL2FJeGdCLE1BQU0sRUFDTjBXLFlBQVksRUFDWnNCLFdBQVksQ0FDVkUsT0FBUSw0QkFDUkQsT0FBUSw2QkFFVmdNLFdBQVksQ0FDVjN3QixHQUFJLHFCQUNKeEcsS0FBTSxTQUNONjNCLGFBQWMsU0FBVXp1QixFQUFRZSxFQUFTbXZCLEdBQ3ZDLE9BQU9udkIsRUFBVSxpQkFBbUJtdkIsQ0FDdEMsSSIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYnBhY2stc2V0dXAvd2VicGFjay9ydW50aW1lL2xvYWQgc2NyaXB0Iiwid2VicGFjazovL3dlYnBhY2stc2V0dXAvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vd2VicGFjay1zZXR1cC8uL25vZGVfbW9kdWxlcy9zd2lwZXIvc2hhcmVkL3Nzci13aW5kb3cuZXNtLm1qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXNldHVwL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly93ZWJwYWNrLXNldHVwL3dlYnBhY2svcnVudGltZS9lbnN1cmUgY2h1bmsiLCJ3ZWJwYWNrOi8vd2VicGFjay1zZXR1cC93ZWJwYWNrL3J1bnRpbWUvZ2V0IGphdmFzY3JpcHQgY2h1bmsgZmlsZW5hbWUiLCJ3ZWJwYWNrOi8vd2VicGFjay1zZXR1cC93ZWJwYWNrL3J1bnRpbWUvZ2V0IG1pbmktY3NzIGNodW5rIGZpbGVuYW1lIiwid2VicGFjazovL3dlYnBhY2stc2V0dXAvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly93ZWJwYWNrLXNldHVwL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vd2VicGFjay1zZXR1cC93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL3dlYnBhY2stc2V0dXAvd2VicGFjay9ydW50aW1lL3B1YmxpY1BhdGgiLCJ3ZWJwYWNrOi8vd2VicGFjay1zZXR1cC93ZWJwYWNrL3J1bnRpbWUvY3NzIGxvYWRpbmciLCJ3ZWJwYWNrOi8vd2VicGFjay1zZXR1cC93ZWJwYWNrL3J1bnRpbWUvanNvbnAgY2h1bmsgbG9hZGluZyIsIndlYnBhY2s6Ly93ZWJwYWNrLXNldHVwLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9zaGFyZWQvdXRpbHMubWpzIiwid2VicGFjazovL3dlYnBhY2stc2V0dXAvLi9ub2RlX21vZHVsZXMvc3dpcGVyL3NoYXJlZC9zd2lwZXItY29yZS5tanMiLCJ3ZWJwYWNrOi8vd2VicGFjay1zZXR1cC8uL25vZGVfbW9kdWxlcy9zd2lwZXIvc2hhcmVkL2NyZWF0ZS1lbGVtZW50LWlmLW5vdC1kZWZpbmVkLm1qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXNldHVwLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9zaGFyZWQvY2xhc3Nlcy10by1zZWxlY3Rvci5tanMiLCJ3ZWJwYWNrOi8vd2VicGFjay1zZXR1cC8uL3NyYy9qcy9wYWdlcy9mZWVkLWNoYXB0ZXItMi5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXNldHVwLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9tb2R1bGVzL25hdmlnYXRpb24ubWpzIiwid2VicGFjazovL3dlYnBhY2stc2V0dXAvLi9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvcGFnaW5hdGlvbi5tanMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGluUHJvZ3Jlc3MgPSB7fTtcbnZhciBkYXRhV2VicGFja1ByZWZpeCA9IFwid2VicGFjay1zZXR1cDpcIjtcbi8vIGxvYWRTY3JpcHQgZnVuY3Rpb24gdG8gbG9hZCBhIHNjcmlwdCB2aWEgc2NyaXB0IHRhZ1xuX193ZWJwYWNrX3JlcXVpcmVfXy5sID0gKHVybCwgZG9uZSwga2V5LCBjaHVua0lkKSA9PiB7XG5cdGlmKGluUHJvZ3Jlc3NbdXJsXSkgeyBpblByb2dyZXNzW3VybF0ucHVzaChkb25lKTsgcmV0dXJuOyB9XG5cdHZhciBzY3JpcHQsIG5lZWRBdHRhY2g7XG5cdGlmKGtleSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0dmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgc2NyaXB0cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIHMgPSBzY3JpcHRzW2ldO1xuXHRcdFx0aWYocy5nZXRBdHRyaWJ1dGUoXCJzcmNcIikgPT0gdXJsIHx8IHMuZ2V0QXR0cmlidXRlKFwiZGF0YS13ZWJwYWNrXCIpID09IGRhdGFXZWJwYWNrUHJlZml4ICsga2V5KSB7IHNjcmlwdCA9IHM7IGJyZWFrOyB9XG5cdFx0fVxuXHR9XG5cdGlmKCFzY3JpcHQpIHtcblx0XHRuZWVkQXR0YWNoID0gdHJ1ZTtcblx0XHRzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcblxuXHRcdHNjcmlwdC5jaGFyc2V0ID0gJ3V0Zi04Jztcblx0XHRzY3JpcHQudGltZW91dCA9IDEyMDtcblx0XHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5uYykge1xuXHRcdFx0c2NyaXB0LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIF9fd2VicGFja19yZXF1aXJlX18ubmMpO1xuXHRcdH1cblx0XHRzY3JpcHQuc2V0QXR0cmlidXRlKFwiZGF0YS13ZWJwYWNrXCIsIGRhdGFXZWJwYWNrUHJlZml4ICsga2V5KTtcblxuXHRcdHNjcmlwdC5zcmMgPSB1cmw7XG5cdH1cblx0aW5Qcm9ncmVzc1t1cmxdID0gW2RvbmVdO1xuXHR2YXIgb25TY3JpcHRDb21wbGV0ZSA9IChwcmV2LCBldmVudCkgPT4ge1xuXHRcdC8vIGF2b2lkIG1lbSBsZWFrcyBpbiBJRS5cblx0XHRzY3JpcHQub25lcnJvciA9IHNjcmlwdC5vbmxvYWQgPSBudWxsO1xuXHRcdGNsZWFyVGltZW91dCh0aW1lb3V0KTtcblx0XHR2YXIgZG9uZUZucyA9IGluUHJvZ3Jlc3NbdXJsXTtcblx0XHRkZWxldGUgaW5Qcm9ncmVzc1t1cmxdO1xuXHRcdHNjcmlwdC5wYXJlbnROb2RlICYmIHNjcmlwdC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHNjcmlwdCk7XG5cdFx0ZG9uZUZucyAmJiBkb25lRm5zLmZvckVhY2goKGZuKSA9PiAoZm4oZXZlbnQpKSk7XG5cdFx0aWYocHJldikgcmV0dXJuIHByZXYoZXZlbnQpO1xuXHR9XG5cdHZhciB0aW1lb3V0ID0gc2V0VGltZW91dChvblNjcmlwdENvbXBsZXRlLmJpbmQobnVsbCwgdW5kZWZpbmVkLCB7IHR5cGU6ICd0aW1lb3V0JywgdGFyZ2V0OiBzY3JpcHQgfSksIDEyMDAwMCk7XG5cdHNjcmlwdC5vbmVycm9yID0gb25TY3JpcHRDb21wbGV0ZS5iaW5kKG51bGwsIHNjcmlwdC5vbmVycm9yKTtcblx0c2NyaXB0Lm9ubG9hZCA9IG9uU2NyaXB0Q29tcGxldGUuYmluZChudWxsLCBzY3JpcHQub25sb2FkKTtcblx0bmVlZEF0dGFjaCAmJiBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7XG59OyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4vLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuX193ZWJwYWNrX3JlcXVpcmVfXy5tID0gX193ZWJwYWNrX21vZHVsZXNfXztcblxuIiwiLyoqXG4gKiBTU1IgV2luZG93IDQuMC4yXG4gKiBCZXR0ZXIgaGFuZGxpbmcgZm9yIHdpbmRvdyBvYmplY3QgaW4gU1NSIGVudmlyb25tZW50XG4gKiBodHRwczovL2dpdGh1Yi5jb20vbm9saW1pdHM0d2ViL3Nzci13aW5kb3dcbiAqXG4gKiBDb3B5cmlnaHQgMjAyMSwgVmxhZGltaXIgS2hhcmxhbXBpZGlcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciBNSVRcbiAqXG4gKiBSZWxlYXNlZCBvbjogRGVjZW1iZXIgMTMsIDIwMjFcbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tcGFyYW0tcmVhc3NpZ24gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KG9iaikge1xuICByZXR1cm4gb2JqICE9PSBudWxsICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmICdjb25zdHJ1Y3RvcicgaW4gb2JqICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0O1xufVxuZnVuY3Rpb24gZXh0ZW5kKHRhcmdldCwgc3JjKSB7XG4gIGlmICh0YXJnZXQgPT09IHZvaWQgMCkge1xuICAgIHRhcmdldCA9IHt9O1xuICB9XG4gIGlmIChzcmMgPT09IHZvaWQgMCkge1xuICAgIHNyYyA9IHt9O1xuICB9XG4gIE9iamVjdC5rZXlzKHNyYykuZm9yRWFjaChrZXkgPT4ge1xuICAgIGlmICh0eXBlb2YgdGFyZ2V0W2tleV0gPT09ICd1bmRlZmluZWQnKSB0YXJnZXRba2V5XSA9IHNyY1trZXldO2Vsc2UgaWYgKGlzT2JqZWN0KHNyY1trZXldKSAmJiBpc09iamVjdCh0YXJnZXRba2V5XSkgJiYgT2JqZWN0LmtleXMoc3JjW2tleV0pLmxlbmd0aCA+IDApIHtcbiAgICAgIGV4dGVuZCh0YXJnZXRba2V5XSwgc3JjW2tleV0pO1xuICAgIH1cbiAgfSk7XG59XG5jb25zdCBzc3JEb2N1bWVudCA9IHtcbiAgYm9keToge30sXG4gIGFkZEV2ZW50TGlzdGVuZXIoKSB7fSxcbiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcigpIHt9LFxuICBhY3RpdmVFbGVtZW50OiB7XG4gICAgYmx1cigpIHt9LFxuICAgIG5vZGVOYW1lOiAnJ1xuICB9LFxuICBxdWVyeVNlbGVjdG9yKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9LFxuICBxdWVyeVNlbGVjdG9yQWxsKCkge1xuICAgIHJldHVybiBbXTtcbiAgfSxcbiAgZ2V0RWxlbWVudEJ5SWQoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG4gIGNyZWF0ZUV2ZW50KCkge1xuICAgIHJldHVybiB7XG4gICAgICBpbml0RXZlbnQoKSB7fVxuICAgIH07XG4gIH0sXG4gIGNyZWF0ZUVsZW1lbnQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNoaWxkcmVuOiBbXSxcbiAgICAgIGNoaWxkTm9kZXM6IFtdLFxuICAgICAgc3R5bGU6IHt9LFxuICAgICAgc2V0QXR0cmlidXRlKCkge30sXG4gICAgICBnZXRFbGVtZW50c0J5VGFnTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgIH07XG4gIH0sXG4gIGNyZWF0ZUVsZW1lbnROUygpIHtcbiAgICByZXR1cm4ge307XG4gIH0sXG4gIGltcG9ydE5vZGUoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG4gIGxvY2F0aW9uOiB7XG4gICAgaGFzaDogJycsXG4gICAgaG9zdDogJycsXG4gICAgaG9zdG5hbWU6ICcnLFxuICAgIGhyZWY6ICcnLFxuICAgIG9yaWdpbjogJycsXG4gICAgcGF0aG5hbWU6ICcnLFxuICAgIHByb3RvY29sOiAnJyxcbiAgICBzZWFyY2g6ICcnXG4gIH1cbn07XG5mdW5jdGlvbiBnZXREb2N1bWVudCgpIHtcbiAgY29uc3QgZG9jID0gdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyA/IGRvY3VtZW50IDoge307XG4gIGV4dGVuZChkb2MsIHNzckRvY3VtZW50KTtcbiAgcmV0dXJuIGRvYztcbn1cbmNvbnN0IHNzcldpbmRvdyA9IHtcbiAgZG9jdW1lbnQ6IHNzckRvY3VtZW50LFxuICBuYXZpZ2F0b3I6IHtcbiAgICB1c2VyQWdlbnQ6ICcnXG4gIH0sXG4gIGxvY2F0aW9uOiB7XG4gICAgaGFzaDogJycsXG4gICAgaG9zdDogJycsXG4gICAgaG9zdG5hbWU6ICcnLFxuICAgIGhyZWY6ICcnLFxuICAgIG9yaWdpbjogJycsXG4gICAgcGF0aG5hbWU6ICcnLFxuICAgIHByb3RvY29sOiAnJyxcbiAgICBzZWFyY2g6ICcnXG4gIH0sXG4gIGhpc3Rvcnk6IHtcbiAgICByZXBsYWNlU3RhdGUoKSB7fSxcbiAgICBwdXNoU3RhdGUoKSB7fSxcbiAgICBnbygpIHt9LFxuICAgIGJhY2soKSB7fVxuICB9LFxuICBDdXN0b21FdmVudDogZnVuY3Rpb24gQ3VzdG9tRXZlbnQoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIGFkZEV2ZW50TGlzdGVuZXIoKSB7fSxcbiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcigpIHt9LFxuICBnZXRDb21wdXRlZFN0eWxlKCkge1xuICAgIHJldHVybiB7XG4gICAgICBnZXRQcm9wZXJ0eVZhbHVlKCkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG4gICAgfTtcbiAgfSxcbiAgSW1hZ2UoKSB7fSxcbiAgRGF0ZSgpIHt9LFxuICBzY3JlZW46IHt9LFxuICBzZXRUaW1lb3V0KCkge30sXG4gIGNsZWFyVGltZW91dCgpIHt9LFxuICBtYXRjaE1lZGlhKCkge1xuICAgIHJldHVybiB7fTtcbiAgfSxcbiAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGNhbGxiYWNrKSB7XG4gICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgY2FsbGJhY2soKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gc2V0VGltZW91dChjYWxsYmFjaywgMCk7XG4gIH0sXG4gIGNhbmNlbEFuaW1hdGlvbkZyYW1lKGlkKSB7XG4gICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjbGVhclRpbWVvdXQoaWQpO1xuICB9XG59O1xuZnVuY3Rpb24gZ2V0V2luZG93KCkge1xuICBjb25zdCB3aW4gPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHt9O1xuICBleHRlbmQod2luLCBzc3JXaW5kb3cpO1xuICByZXR1cm4gd2luO1xufVxuXG5leHBvcnQgeyBnZXRXaW5kb3cgYXMgYSwgZ2V0RG9jdW1lbnQgYXMgZyB9O1xuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5mID0ge307XG4vLyBUaGlzIGZpbGUgY29udGFpbnMgb25seSB0aGUgZW50cnkgY2h1bmsuXG4vLyBUaGUgY2h1bmsgbG9hZGluZyBmdW5jdGlvbiBmb3IgYWRkaXRpb25hbCBjaHVua3Ncbl9fd2VicGFja19yZXF1aXJlX18uZSA9IChjaHVua0lkKSA9PiB7XG5cdHJldHVybiBQcm9taXNlLmFsbChPYmplY3Qua2V5cyhfX3dlYnBhY2tfcmVxdWlyZV9fLmYpLnJlZHVjZSgocHJvbWlzZXMsIGtleSkgPT4ge1xuXHRcdF9fd2VicGFja19yZXF1aXJlX18uZltrZXldKGNodW5rSWQsIHByb21pc2VzKTtcblx0XHRyZXR1cm4gcHJvbWlzZXM7XG5cdH0sIFtdKSk7XG59OyIsIi8vIFRoaXMgZnVuY3Rpb24gYWxsb3cgdG8gcmVmZXJlbmNlIGFzeW5jIGNodW5rc1xuX193ZWJwYWNrX3JlcXVpcmVfXy51ID0gKGNodW5rSWQpID0+IHtcblx0Ly8gcmV0dXJuIHVybCBmb3IgZmlsZW5hbWVzIGJhc2VkIG9uIHRlbXBsYXRlXG5cdHJldHVybiBcImpzL1wiICsgY2h1bmtJZCArIFwiLmpzXCI7XG59OyIsIi8vIFRoaXMgZnVuY3Rpb24gYWxsb3cgdG8gcmVmZXJlbmNlIGFzeW5jIGNodW5rc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5taW5pQ3NzRiA9IChjaHVua0lkKSA9PiB7XG5cdC8vIHJldHVybiB1cmwgZm9yIGZpbGVuYW1lcyBiYXNlZCBvbiB0ZW1wbGF0ZVxuXHRyZXR1cm4gXCJjc3MvXCIgKyBjaHVua0lkICsgXCIuY3NzXCI7XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsInZhciBzY3JpcHRVcmw7XG5pZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5nLmltcG9ydFNjcmlwdHMpIHNjcmlwdFVybCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5sb2NhdGlvbiArIFwiXCI7XG52YXIgZG9jdW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcuZG9jdW1lbnQ7XG5pZiAoIXNjcmlwdFVybCAmJiBkb2N1bWVudCkge1xuXHRpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdClcblx0XHRzY3JpcHRVcmwgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyYztcblx0aWYgKCFzY3JpcHRVcmwpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGlmKHNjcmlwdHMubGVuZ3RoKSB7XG5cdFx0XHR2YXIgaSA9IHNjcmlwdHMubGVuZ3RoIC0gMTtcblx0XHRcdHdoaWxlIChpID4gLTEgJiYgKCFzY3JpcHRVcmwgfHwgIS9eaHR0cChzPyk6Ly50ZXN0KHNjcmlwdFVybCkpKSBzY3JpcHRVcmwgPSBzY3JpcHRzW2ktLV0uc3JjO1xuXHRcdH1cblx0fVxufVxuLy8gV2hlbiBzdXBwb3J0aW5nIGJyb3dzZXJzIHdoZXJlIGFuIGF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgeW91IG11c3Qgc3BlY2lmeSBhbiBvdXRwdXQucHVibGljUGF0aCBtYW51YWxseSB2aWEgY29uZmlndXJhdGlvblxuLy8gb3IgcGFzcyBhbiBlbXB0eSBzdHJpbmcgKFwiXCIpIGFuZCBzZXQgdGhlIF9fd2VicGFja19wdWJsaWNfcGF0aF9fIHZhcmlhYmxlIGZyb20geW91ciBjb2RlIHRvIHVzZSB5b3VyIG93biBsb2dpYy5cbmlmICghc2NyaXB0VXJsKSB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlclwiKTtcbnNjcmlwdFVybCA9IHNjcmlwdFVybC5yZXBsYWNlKC8jLiokLywgXCJcIikucmVwbGFjZSgvXFw/LiokLywgXCJcIikucmVwbGFjZSgvXFwvW15cXC9dKyQvLCBcIi9cIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBzY3JpcHRVcmwgKyBcIi4uL1wiOyIsImlmICh0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIpIHJldHVybjtcbnZhciBjcmVhdGVTdHlsZXNoZWV0ID0gKGNodW5rSWQsIGZ1bGxocmVmLCBvbGRUYWcsIHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHR2YXIgbGlua1RhZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpO1xuXG5cdGxpbmtUYWcucmVsID0gXCJzdHlsZXNoZWV0XCI7XG5cdGxpbmtUYWcudHlwZSA9IFwidGV4dC9jc3NcIjtcblx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubmMpIHtcblx0XHRsaW5rVGFnLm5vbmNlID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uYztcblx0fVxuXHR2YXIgb25MaW5rQ29tcGxldGUgPSAoZXZlbnQpID0+IHtcblx0XHQvLyBhdm9pZCBtZW0gbGVha3MuXG5cdFx0bGlua1RhZy5vbmVycm9yID0gbGlua1RhZy5vbmxvYWQgPSBudWxsO1xuXHRcdGlmIChldmVudC50eXBlID09PSAnbG9hZCcpIHtcblx0XHRcdHJlc29sdmUoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIGVycm9yVHlwZSA9IGV2ZW50ICYmIGV2ZW50LnR5cGU7XG5cdFx0XHR2YXIgcmVhbEhyZWYgPSBldmVudCAmJiBldmVudC50YXJnZXQgJiYgZXZlbnQudGFyZ2V0LmhyZWYgfHwgZnVsbGhyZWY7XG5cdFx0XHR2YXIgZXJyID0gbmV3IEVycm9yKFwiTG9hZGluZyBDU1MgY2h1bmsgXCIgKyBjaHVua0lkICsgXCIgZmFpbGVkLlxcbihcIiArIGVycm9yVHlwZSArIFwiOiBcIiArIHJlYWxIcmVmICsgXCIpXCIpO1xuXHRcdFx0ZXJyLm5hbWUgPSBcIkNodW5rTG9hZEVycm9yXCI7XG5cdFx0XHRlcnIuY29kZSA9IFwiQ1NTX0NIVU5LX0xPQURfRkFJTEVEXCI7XG5cdFx0XHRlcnIudHlwZSA9IGVycm9yVHlwZTtcblx0XHRcdGVyci5yZXF1ZXN0ID0gcmVhbEhyZWY7XG5cdFx0XHRpZiAobGlua1RhZy5wYXJlbnROb2RlKSBsaW5rVGFnLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobGlua1RhZylcblx0XHRcdHJlamVjdChlcnIpO1xuXHRcdH1cblx0fVxuXHRsaW5rVGFnLm9uZXJyb3IgPSBsaW5rVGFnLm9ubG9hZCA9IG9uTGlua0NvbXBsZXRlO1xuXHRsaW5rVGFnLmhyZWYgPSBmdWxsaHJlZjtcblxuXG5cdGlmIChvbGRUYWcpIHtcblx0XHRvbGRUYWcucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobGlua1RhZywgb2xkVGFnLm5leHRTaWJsaW5nKTtcblx0fSBlbHNlIHtcblx0XHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKGxpbmtUYWcpO1xuXHR9XG5cdHJldHVybiBsaW5rVGFnO1xufTtcbnZhciBmaW5kU3R5bGVzaGVldCA9IChocmVmLCBmdWxsaHJlZikgPT4ge1xuXHR2YXIgZXhpc3RpbmdMaW5rVGFncyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwibGlua1wiKTtcblx0Zm9yKHZhciBpID0gMDsgaSA8IGV4aXN0aW5nTGlua1RhZ3MubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgdGFnID0gZXhpc3RpbmdMaW5rVGFnc1tpXTtcblx0XHR2YXIgZGF0YUhyZWYgPSB0YWcuZ2V0QXR0cmlidXRlKFwiZGF0YS1ocmVmXCIpIHx8IHRhZy5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpO1xuXHRcdGlmKHRhZy5yZWwgPT09IFwic3R5bGVzaGVldFwiICYmIChkYXRhSHJlZiA9PT0gaHJlZiB8fCBkYXRhSHJlZiA9PT0gZnVsbGhyZWYpKSByZXR1cm4gdGFnO1xuXHR9XG5cdHZhciBleGlzdGluZ1N0eWxlVGFncyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic3R5bGVcIik7XG5cdGZvcih2YXIgaSA9IDA7IGkgPCBleGlzdGluZ1N0eWxlVGFncy5sZW5ndGg7IGkrKykge1xuXHRcdHZhciB0YWcgPSBleGlzdGluZ1N0eWxlVGFnc1tpXTtcblx0XHR2YXIgZGF0YUhyZWYgPSB0YWcuZ2V0QXR0cmlidXRlKFwiZGF0YS1ocmVmXCIpO1xuXHRcdGlmKGRhdGFIcmVmID09PSBocmVmIHx8IGRhdGFIcmVmID09PSBmdWxsaHJlZikgcmV0dXJuIHRhZztcblx0fVxufTtcbnZhciBsb2FkU3R5bGVzaGVldCA9IChjaHVua0lkKSA9PiB7XG5cdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0dmFyIGhyZWYgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm1pbmlDc3NGKGNodW5rSWQpO1xuXHRcdHZhciBmdWxsaHJlZiA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIGhyZWY7XG5cdFx0aWYoZmluZFN0eWxlc2hlZXQoaHJlZiwgZnVsbGhyZWYpKSByZXR1cm4gcmVzb2x2ZSgpO1xuXHRcdGNyZWF0ZVN0eWxlc2hlZXQoY2h1bmtJZCwgZnVsbGhyZWYsIG51bGwsIHJlc29sdmUsIHJlamVjdCk7XG5cdH0pO1xufVxuLy8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBDU1MgY2h1bmtzXG52YXIgaW5zdGFsbGVkQ3NzQ2h1bmtzID0ge1xuXHQ1MzA6IDBcbn07XG5cbl9fd2VicGFja19yZXF1aXJlX18uZi5taW5pQ3NzID0gKGNodW5rSWQsIHByb21pc2VzKSA9PiB7XG5cdHZhciBjc3NDaHVua3MgPSB7XCI4MjJcIjoxfTtcblx0aWYoaW5zdGFsbGVkQ3NzQ2h1bmtzW2NodW5rSWRdKSBwcm9taXNlcy5wdXNoKGluc3RhbGxlZENzc0NodW5rc1tjaHVua0lkXSk7XG5cdGVsc2UgaWYoaW5zdGFsbGVkQ3NzQ2h1bmtzW2NodW5rSWRdICE9PSAwICYmIGNzc0NodW5rc1tjaHVua0lkXSkge1xuXHRcdHByb21pc2VzLnB1c2goaW5zdGFsbGVkQ3NzQ2h1bmtzW2NodW5rSWRdID0gbG9hZFN0eWxlc2hlZXQoY2h1bmtJZCkudGhlbigoKSA9PiB7XG5cdFx0XHRpbnN0YWxsZWRDc3NDaHVua3NbY2h1bmtJZF0gPSAwO1xuXHRcdH0sIChlKSA9PiB7XG5cdFx0XHRkZWxldGUgaW5zdGFsbGVkQ3NzQ2h1bmtzW2NodW5rSWRdO1xuXHRcdFx0dGhyb3cgZTtcblx0XHR9KSk7XG5cdH1cbn07XG5cbi8vIG5vIGhtclxuXG4vLyBubyBwcmVmZXRjaGluZ1xuXG4vLyBubyBwcmVsb2FkZWQiLCIvLyBubyBiYXNlVVJJXG5cbi8vIG9iamVjdCB0byBzdG9yZSBsb2FkZWQgYW5kIGxvYWRpbmcgY2h1bmtzXG4vLyB1bmRlZmluZWQgPSBjaHVuayBub3QgbG9hZGVkLCBudWxsID0gY2h1bmsgcHJlbG9hZGVkL3ByZWZldGNoZWRcbi8vIFtyZXNvbHZlLCByZWplY3QsIFByb21pc2VdID0gY2h1bmsgbG9hZGluZywgMCA9IGNodW5rIGxvYWRlZFxudmFyIGluc3RhbGxlZENodW5rcyA9IHtcblx0NTMwOiAwXG59O1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmYuaiA9IChjaHVua0lkLCBwcm9taXNlcykgPT4ge1xuXHRcdC8vIEpTT05QIGNodW5rIGxvYWRpbmcgZm9yIGphdmFzY3JpcHRcblx0XHR2YXIgaW5zdGFsbGVkQ2h1bmtEYXRhID0gX193ZWJwYWNrX3JlcXVpcmVfXy5vKGluc3RhbGxlZENodW5rcywgY2h1bmtJZCkgPyBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gOiB1bmRlZmluZWQ7XG5cdFx0aWYoaW5zdGFsbGVkQ2h1bmtEYXRhICE9PSAwKSB7IC8vIDAgbWVhbnMgXCJhbHJlYWR5IGluc3RhbGxlZFwiLlxuXG5cdFx0XHQvLyBhIFByb21pc2UgbWVhbnMgXCJjdXJyZW50bHkgbG9hZGluZ1wiLlxuXHRcdFx0aWYoaW5zdGFsbGVkQ2h1bmtEYXRhKSB7XG5cdFx0XHRcdHByb21pc2VzLnB1c2goaW5zdGFsbGVkQ2h1bmtEYXRhWzJdKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlmKHRydWUpIHsgLy8gYWxsIGNodW5rcyBoYXZlIEpTXG5cdFx0XHRcdFx0Ly8gc2V0dXAgUHJvbWlzZSBpbiBjaHVuayBjYWNoZVxuXHRcdFx0XHRcdHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4gKGluc3RhbGxlZENodW5rRGF0YSA9IGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IFtyZXNvbHZlLCByZWplY3RdKSk7XG5cdFx0XHRcdFx0cHJvbWlzZXMucHVzaChpbnN0YWxsZWRDaHVua0RhdGFbMl0gPSBwcm9taXNlKTtcblxuXHRcdFx0XHRcdC8vIHN0YXJ0IGNodW5rIGxvYWRpbmdcblx0XHRcdFx0XHR2YXIgdXJsID0gX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgX193ZWJwYWNrX3JlcXVpcmVfXy51KGNodW5rSWQpO1xuXHRcdFx0XHRcdC8vIGNyZWF0ZSBlcnJvciBiZWZvcmUgc3RhY2sgdW53b3VuZCB0byBnZXQgdXNlZnVsIHN0YWNrdHJhY2UgbGF0ZXJcblx0XHRcdFx0XHR2YXIgZXJyb3IgPSBuZXcgRXJyb3IoKTtcblx0XHRcdFx0XHR2YXIgbG9hZGluZ0VuZGVkID0gKGV2ZW50KSA9PiB7XG5cdFx0XHRcdFx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSkge1xuXHRcdFx0XHRcdFx0XHRpbnN0YWxsZWRDaHVua0RhdGEgPSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF07XG5cdFx0XHRcdFx0XHRcdGlmKGluc3RhbGxlZENodW5rRGF0YSAhPT0gMCkgaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRpZihpbnN0YWxsZWRDaHVua0RhdGEpIHtcblx0XHRcdFx0XHRcdFx0XHR2YXIgZXJyb3JUeXBlID0gZXZlbnQgJiYgKGV2ZW50LnR5cGUgPT09ICdsb2FkJyA/ICdtaXNzaW5nJyA6IGV2ZW50LnR5cGUpO1xuXHRcdFx0XHRcdFx0XHRcdHZhciByZWFsU3JjID0gZXZlbnQgJiYgZXZlbnQudGFyZ2V0ICYmIGV2ZW50LnRhcmdldC5zcmM7XG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3IubWVzc2FnZSA9ICdMb2FkaW5nIGNodW5rICcgKyBjaHVua0lkICsgJyBmYWlsZWQuXFxuKCcgKyBlcnJvclR5cGUgKyAnOiAnICsgcmVhbFNyYyArICcpJztcblx0XHRcdFx0XHRcdFx0XHRlcnJvci5uYW1lID0gJ0NodW5rTG9hZEVycm9yJztcblx0XHRcdFx0XHRcdFx0XHRlcnJvci50eXBlID0gZXJyb3JUeXBlO1xuXHRcdFx0XHRcdFx0XHRcdGVycm9yLnJlcXVlc3QgPSByZWFsU3JjO1xuXHRcdFx0XHRcdFx0XHRcdGluc3RhbGxlZENodW5rRGF0YVsxXShlcnJvcik7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18ubCh1cmwsIGxvYWRpbmdFbmRlZCwgXCJjaHVuay1cIiArIGNodW5rSWQsIGNodW5rSWQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxufTtcblxuLy8gbm8gcHJlZmV0Y2hpbmdcblxuLy8gbm8gcHJlbG9hZGVkXG5cbi8vIG5vIEhNUlxuXG4vLyBubyBITVIgbWFuaWZlc3RcblxuLy8gbm8gb24gY2h1bmtzIGxvYWRlZFxuXG4vLyBpbnN0YWxsIGEgSlNPTlAgY2FsbGJhY2sgZm9yIGNodW5rIGxvYWRpbmdcbnZhciB3ZWJwYWNrSnNvbnBDYWxsYmFjayA9IChwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbiwgZGF0YSkgPT4ge1xuXHR2YXIgY2h1bmtJZHMgPSBkYXRhWzBdO1xuXHR2YXIgbW9yZU1vZHVsZXMgPSBkYXRhWzFdO1xuXHR2YXIgcnVudGltZSA9IGRhdGFbMl07XG5cdC8vIGFkZCBcIm1vcmVNb2R1bGVzXCIgdG8gdGhlIG1vZHVsZXMgb2JqZWN0LFxuXHQvLyB0aGVuIGZsYWcgYWxsIFwiY2h1bmtJZHNcIiBhcyBsb2FkZWQgYW5kIGZpcmUgY2FsbGJhY2tcblx0dmFyIG1vZHVsZUlkLCBjaHVua0lkLCBpID0gMDtcblx0aWYoY2h1bmtJZHMuc29tZSgoaWQpID0+IChpbnN0YWxsZWRDaHVua3NbaWRdICE9PSAwKSkpIHtcblx0XHRmb3IobW9kdWxlSWQgaW4gbW9yZU1vZHVsZXMpIHtcblx0XHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7XG5cdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18ubVttb2R1bGVJZF0gPSBtb3JlTW9kdWxlc1ttb2R1bGVJZF07XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmKHJ1bnRpbWUpIHZhciByZXN1bHQgPSBydW50aW1lKF9fd2VicGFja19yZXF1aXJlX18pO1xuXHR9XG5cdGlmKHBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uKSBwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbihkYXRhKTtcblx0Zm9yKDtpIDwgY2h1bmtJZHMubGVuZ3RoOyBpKyspIHtcblx0XHRjaHVua0lkID0gY2h1bmtJZHNbaV07XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGluc3RhbGxlZENodW5rcywgY2h1bmtJZCkgJiYgaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdKSB7XG5cdFx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF1bMF0oKTtcblx0XHR9XG5cdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gMDtcblx0fVxuXG59XG5cbnZhciBjaHVua0xvYWRpbmdHbG9iYWwgPSBzZWxmW1wid2VicGFja0NodW5rd2VicGFja19zZXR1cFwiXSA9IHNlbGZbXCJ3ZWJwYWNrQ2h1bmt3ZWJwYWNrX3NldHVwXCJdIHx8IFtdO1xuY2h1bmtMb2FkaW5nR2xvYmFsLmZvckVhY2god2VicGFja0pzb25wQ2FsbGJhY2suYmluZChudWxsLCAwKSk7XG5jaHVua0xvYWRpbmdHbG9iYWwucHVzaCA9IHdlYnBhY2tKc29ucENhbGxiYWNrLmJpbmQobnVsbCwgY2h1bmtMb2FkaW5nR2xvYmFsLnB1c2guYmluZChjaHVua0xvYWRpbmdHbG9iYWwpKTsiLCJpbXBvcnQgeyBhIGFzIGdldFdpbmRvdywgZyBhcyBnZXREb2N1bWVudCB9IGZyb20gJy4vc3NyLXdpbmRvdy5lc20ubWpzJztcblxuZnVuY3Rpb24gY2xhc3Nlc1RvVG9rZW5zKGNsYXNzZXMpIHtcbiAgaWYgKGNsYXNzZXMgPT09IHZvaWQgMCkge1xuICAgIGNsYXNzZXMgPSAnJztcbiAgfVxuICByZXR1cm4gY2xhc3Nlcy50cmltKCkuc3BsaXQoJyAnKS5maWx0ZXIoYyA9PiAhIWMudHJpbSgpKTtcbn1cblxuZnVuY3Rpb24gZGVsZXRlUHJvcHMob2JqKSB7XG4gIGNvbnN0IG9iamVjdCA9IG9iajtcbiAgT2JqZWN0LmtleXMob2JqZWN0KS5mb3JFYWNoKGtleSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIG9iamVjdFtrZXldID0gbnVsbDtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBubyBnZXR0ZXIgZm9yIG9iamVjdFxuICAgIH1cbiAgICB0cnkge1xuICAgICAgZGVsZXRlIG9iamVjdFtrZXldO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIHNvbWV0aGluZyBnb3Qgd3JvbmdcbiAgICB9XG4gIH0pO1xufVxuZnVuY3Rpb24gbmV4dFRpY2soY2FsbGJhY2ssIGRlbGF5KSB7XG4gIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7XG4gICAgZGVsYXkgPSAwO1xuICB9XG4gIHJldHVybiBzZXRUaW1lb3V0KGNhbGxiYWNrLCBkZWxheSk7XG59XG5mdW5jdGlvbiBub3coKSB7XG4gIHJldHVybiBEYXRlLm5vdygpO1xufVxuZnVuY3Rpb24gZ2V0Q29tcHV0ZWRTdHlsZShlbCkge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgbGV0IHN0eWxlO1xuICBpZiAod2luZG93LmdldENvbXB1dGVkU3R5bGUpIHtcbiAgICBzdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsLCBudWxsKTtcbiAgfVxuICBpZiAoIXN0eWxlICYmIGVsLmN1cnJlbnRTdHlsZSkge1xuICAgIHN0eWxlID0gZWwuY3VycmVudFN0eWxlO1xuICB9XG4gIGlmICghc3R5bGUpIHtcbiAgICBzdHlsZSA9IGVsLnN0eWxlO1xuICB9XG4gIHJldHVybiBzdHlsZTtcbn1cbmZ1bmN0aW9uIGdldFRyYW5zbGF0ZShlbCwgYXhpcykge1xuICBpZiAoYXhpcyA9PT0gdm9pZCAwKSB7XG4gICAgYXhpcyA9ICd4JztcbiAgfVxuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgbGV0IG1hdHJpeDtcbiAgbGV0IGN1clRyYW5zZm9ybTtcbiAgbGV0IHRyYW5zZm9ybU1hdHJpeDtcbiAgY29uc3QgY3VyU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGVsKTtcbiAgaWYgKHdpbmRvdy5XZWJLaXRDU1NNYXRyaXgpIHtcbiAgICBjdXJUcmFuc2Zvcm0gPSBjdXJTdHlsZS50cmFuc2Zvcm0gfHwgY3VyU3R5bGUud2Via2l0VHJhbnNmb3JtO1xuICAgIGlmIChjdXJUcmFuc2Zvcm0uc3BsaXQoJywnKS5sZW5ndGggPiA2KSB7XG4gICAgICBjdXJUcmFuc2Zvcm0gPSBjdXJUcmFuc2Zvcm0uc3BsaXQoJywgJykubWFwKGEgPT4gYS5yZXBsYWNlKCcsJywgJy4nKSkuam9pbignLCAnKTtcbiAgICB9XG4gICAgLy8gU29tZSBvbGQgdmVyc2lvbnMgb2YgV2Via2l0IGNob2tlIHdoZW4gJ25vbmUnIGlzIHBhc3NlZDsgcGFzc1xuICAgIC8vIGVtcHR5IHN0cmluZyBpbnN0ZWFkIGluIHRoaXMgY2FzZVxuICAgIHRyYW5zZm9ybU1hdHJpeCA9IG5ldyB3aW5kb3cuV2ViS2l0Q1NTTWF0cml4KGN1clRyYW5zZm9ybSA9PT0gJ25vbmUnID8gJycgOiBjdXJUcmFuc2Zvcm0pO1xuICB9IGVsc2Uge1xuICAgIHRyYW5zZm9ybU1hdHJpeCA9IGN1clN0eWxlLk1velRyYW5zZm9ybSB8fCBjdXJTdHlsZS5PVHJhbnNmb3JtIHx8IGN1clN0eWxlLk1zVHJhbnNmb3JtIHx8IGN1clN0eWxlLm1zVHJhbnNmb3JtIHx8IGN1clN0eWxlLnRyYW5zZm9ybSB8fCBjdXJTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCd0cmFuc2Zvcm0nKS5yZXBsYWNlKCd0cmFuc2xhdGUoJywgJ21hdHJpeCgxLCAwLCAwLCAxLCcpO1xuICAgIG1hdHJpeCA9IHRyYW5zZm9ybU1hdHJpeC50b1N0cmluZygpLnNwbGl0KCcsJyk7XG4gIH1cbiAgaWYgKGF4aXMgPT09ICd4Jykge1xuICAgIC8vIExhdGVzdCBDaHJvbWUgYW5kIHdlYmtpdHMgRml4XG4gICAgaWYgKHdpbmRvdy5XZWJLaXRDU1NNYXRyaXgpIGN1clRyYW5zZm9ybSA9IHRyYW5zZm9ybU1hdHJpeC5tNDE7XG4gICAgLy8gQ3JhenkgSUUxMCBNYXRyaXhcbiAgICBlbHNlIGlmIChtYXRyaXgubGVuZ3RoID09PSAxNikgY3VyVHJhbnNmb3JtID0gcGFyc2VGbG9hdChtYXRyaXhbMTJdKTtcbiAgICAvLyBOb3JtYWwgQnJvd3NlcnNcbiAgICBlbHNlIGN1clRyYW5zZm9ybSA9IHBhcnNlRmxvYXQobWF0cml4WzRdKTtcbiAgfVxuICBpZiAoYXhpcyA9PT0gJ3knKSB7XG4gICAgLy8gTGF0ZXN0IENocm9tZSBhbmQgd2Via2l0cyBGaXhcbiAgICBpZiAod2luZG93LldlYktpdENTU01hdHJpeCkgY3VyVHJhbnNmb3JtID0gdHJhbnNmb3JtTWF0cml4Lm00MjtcbiAgICAvLyBDcmF6eSBJRTEwIE1hdHJpeFxuICAgIGVsc2UgaWYgKG1hdHJpeC5sZW5ndGggPT09IDE2KSBjdXJUcmFuc2Zvcm0gPSBwYXJzZUZsb2F0KG1hdHJpeFsxM10pO1xuICAgIC8vIE5vcm1hbCBCcm93c2Vyc1xuICAgIGVsc2UgY3VyVHJhbnNmb3JtID0gcGFyc2VGbG9hdChtYXRyaXhbNV0pO1xuICB9XG4gIHJldHVybiBjdXJUcmFuc2Zvcm0gfHwgMDtcbn1cbmZ1bmN0aW9uIGlzT2JqZWN0KG8pIHtcbiAgcmV0dXJuIHR5cGVvZiBvID09PSAnb2JqZWN0JyAmJiBvICE9PSBudWxsICYmIG8uY29uc3RydWN0b3IgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKSA9PT0gJ09iamVjdCc7XG59XG5mdW5jdGlvbiBpc05vZGUobm9kZSkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuSFRNTEVsZW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIG5vZGUgaW5zdGFuY2VvZiBIVE1MRWxlbWVudDtcbiAgfVxuICByZXR1cm4gbm9kZSAmJiAobm9kZS5ub2RlVHlwZSA9PT0gMSB8fCBub2RlLm5vZGVUeXBlID09PSAxMSk7XG59XG5mdW5jdGlvbiBleHRlbmQoKSB7XG4gIGNvbnN0IHRvID0gT2JqZWN0KGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXSk7XG4gIGNvbnN0IG5vRXh0ZW5kID0gWydfX3Byb3RvX18nLCAnY29uc3RydWN0b3InLCAncHJvdG90eXBlJ107XG4gIGZvciAobGV0IGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgY29uc3QgbmV4dFNvdXJjZSA9IGkgPCAwIHx8IGFyZ3VtZW50cy5sZW5ndGggPD0gaSA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1tpXTtcbiAgICBpZiAobmV4dFNvdXJjZSAhPT0gdW5kZWZpbmVkICYmIG5leHRTb3VyY2UgIT09IG51bGwgJiYgIWlzTm9kZShuZXh0U291cmNlKSkge1xuICAgICAgY29uc3Qga2V5c0FycmF5ID0gT2JqZWN0LmtleXMoT2JqZWN0KG5leHRTb3VyY2UpKS5maWx0ZXIoa2V5ID0+IG5vRXh0ZW5kLmluZGV4T2Yoa2V5KSA8IDApO1xuICAgICAgZm9yIChsZXQgbmV4dEluZGV4ID0gMCwgbGVuID0ga2V5c0FycmF5Lmxlbmd0aDsgbmV4dEluZGV4IDwgbGVuOyBuZXh0SW5kZXggKz0gMSkge1xuICAgICAgICBjb25zdCBuZXh0S2V5ID0ga2V5c0FycmF5W25leHRJbmRleF07XG4gICAgICAgIGNvbnN0IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG5leHRTb3VyY2UsIG5leHRLZXkpO1xuICAgICAgICBpZiAoZGVzYyAhPT0gdW5kZWZpbmVkICYmIGRlc2MuZW51bWVyYWJsZSkge1xuICAgICAgICAgIGlmIChpc09iamVjdCh0b1tuZXh0S2V5XSkgJiYgaXNPYmplY3QobmV4dFNvdXJjZVtuZXh0S2V5XSkpIHtcbiAgICAgICAgICAgIGlmIChuZXh0U291cmNlW25leHRLZXldLl9fc3dpcGVyX18pIHtcbiAgICAgICAgICAgICAgdG9bbmV4dEtleV0gPSBuZXh0U291cmNlW25leHRLZXldO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZXh0ZW5kKHRvW25leHRLZXldLCBuZXh0U291cmNlW25leHRLZXldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKCFpc09iamVjdCh0b1tuZXh0S2V5XSkgJiYgaXNPYmplY3QobmV4dFNvdXJjZVtuZXh0S2V5XSkpIHtcbiAgICAgICAgICAgIHRvW25leHRLZXldID0ge307XG4gICAgICAgICAgICBpZiAobmV4dFNvdXJjZVtuZXh0S2V5XS5fX3N3aXBlcl9fKSB7XG4gICAgICAgICAgICAgIHRvW25leHRLZXldID0gbmV4dFNvdXJjZVtuZXh0S2V5XTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGV4dGVuZCh0b1tuZXh0S2V5XSwgbmV4dFNvdXJjZVtuZXh0S2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRvW25leHRLZXldID0gbmV4dFNvdXJjZVtuZXh0S2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRvO1xufVxuZnVuY3Rpb24gc2V0Q1NTUHJvcGVydHkoZWwsIHZhck5hbWUsIHZhclZhbHVlKSB7XG4gIGVsLnN0eWxlLnNldFByb3BlcnR5KHZhck5hbWUsIHZhclZhbHVlKTtcbn1cbmZ1bmN0aW9uIGFuaW1hdGVDU1NNb2RlU2Nyb2xsKF9yZWYpIHtcbiAgbGV0IHtcbiAgICBzd2lwZXIsXG4gICAgdGFyZ2V0UG9zaXRpb24sXG4gICAgc2lkZVxuICB9ID0gX3JlZjtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGNvbnN0IHN0YXJ0UG9zaXRpb24gPSAtc3dpcGVyLnRyYW5zbGF0ZTtcbiAgbGV0IHN0YXJ0VGltZSA9IG51bGw7XG4gIGxldCB0aW1lO1xuICBjb25zdCBkdXJhdGlvbiA9IHN3aXBlci5wYXJhbXMuc3BlZWQ7XG4gIHN3aXBlci53cmFwcGVyRWwuc3R5bGUuc2Nyb2xsU25hcFR5cGUgPSAnbm9uZSc7XG4gIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZShzd2lwZXIuY3NzTW9kZUZyYW1lSUQpO1xuICBjb25zdCBkaXIgPSB0YXJnZXRQb3NpdGlvbiA+IHN0YXJ0UG9zaXRpb24gPyAnbmV4dCcgOiAncHJldic7XG4gIGNvbnN0IGlzT3V0T2ZCb3VuZCA9IChjdXJyZW50LCB0YXJnZXQpID0+IHtcbiAgICByZXR1cm4gZGlyID09PSAnbmV4dCcgJiYgY3VycmVudCA+PSB0YXJnZXQgfHwgZGlyID09PSAncHJldicgJiYgY3VycmVudCA8PSB0YXJnZXQ7XG4gIH07XG4gIGNvbnN0IGFuaW1hdGUgPSAoKSA9PiB7XG4gICAgdGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgIGlmIChzdGFydFRpbWUgPT09IG51bGwpIHtcbiAgICAgIHN0YXJ0VGltZSA9IHRpbWU7XG4gICAgfVxuICAgIGNvbnN0IHByb2dyZXNzID0gTWF0aC5tYXgoTWF0aC5taW4oKHRpbWUgLSBzdGFydFRpbWUpIC8gZHVyYXRpb24sIDEpLCAwKTtcbiAgICBjb25zdCBlYXNlUHJvZ3Jlc3MgPSAwLjUgLSBNYXRoLmNvcyhwcm9ncmVzcyAqIE1hdGguUEkpIC8gMjtcbiAgICBsZXQgY3VycmVudFBvc2l0aW9uID0gc3RhcnRQb3NpdGlvbiArIGVhc2VQcm9ncmVzcyAqICh0YXJnZXRQb3NpdGlvbiAtIHN0YXJ0UG9zaXRpb24pO1xuICAgIGlmIChpc091dE9mQm91bmQoY3VycmVudFBvc2l0aW9uLCB0YXJnZXRQb3NpdGlvbikpIHtcbiAgICAgIGN1cnJlbnRQb3NpdGlvbiA9IHRhcmdldFBvc2l0aW9uO1xuICAgIH1cbiAgICBzd2lwZXIud3JhcHBlckVsLnNjcm9sbFRvKHtcbiAgICAgIFtzaWRlXTogY3VycmVudFBvc2l0aW9uXG4gICAgfSk7XG4gICAgaWYgKGlzT3V0T2ZCb3VuZChjdXJyZW50UG9zaXRpb24sIHRhcmdldFBvc2l0aW9uKSkge1xuICAgICAgc3dpcGVyLndyYXBwZXJFbC5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xuICAgICAgc3dpcGVyLndyYXBwZXJFbC5zdHlsZS5zY3JvbGxTbmFwVHlwZSA9ICcnO1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHN3aXBlci53cmFwcGVyRWwuc3R5bGUub3ZlcmZsb3cgPSAnJztcbiAgICAgICAgc3dpcGVyLndyYXBwZXJFbC5zY3JvbGxUbyh7XG4gICAgICAgICAgW3NpZGVdOiBjdXJyZW50UG9zaXRpb25cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZShzd2lwZXIuY3NzTW9kZUZyYW1lSUQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzd2lwZXIuY3NzTW9kZUZyYW1lSUQgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGFuaW1hdGUpO1xuICB9O1xuICBhbmltYXRlKCk7XG59XG5mdW5jdGlvbiBnZXRTbGlkZVRyYW5zZm9ybUVsKHNsaWRlRWwpIHtcbiAgcmV0dXJuIHNsaWRlRWwucXVlcnlTZWxlY3RvcignLnN3aXBlci1zbGlkZS10cmFuc2Zvcm0nKSB8fCBzbGlkZUVsLnNoYWRvd1Jvb3QgJiYgc2xpZGVFbC5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoJy5zd2lwZXItc2xpZGUtdHJhbnNmb3JtJykgfHwgc2xpZGVFbDtcbn1cbmZ1bmN0aW9uIGVsZW1lbnRDaGlsZHJlbihlbGVtZW50LCBzZWxlY3Rvcikge1xuICBpZiAoc2VsZWN0b3IgPT09IHZvaWQgMCkge1xuICAgIHNlbGVjdG9yID0gJyc7XG4gIH1cbiAgY29uc3QgY2hpbGRyZW4gPSBbLi4uZWxlbWVudC5jaGlsZHJlbl07XG4gIGlmIChlbGVtZW50IGluc3RhbmNlb2YgSFRNTFNsb3RFbGVtZW50KSB7XG4gICAgY2hpbGRyZW4ucHVzaCguLi5lbGVtZW50LmFzc2lnbmVkRWxlbWVudHMoKSk7XG4gIH1cbiAgaWYgKCFzZWxlY3Rvcikge1xuICAgIHJldHVybiBjaGlsZHJlbjtcbiAgfVxuICByZXR1cm4gY2hpbGRyZW4uZmlsdGVyKGVsID0+IGVsLm1hdGNoZXMoc2VsZWN0b3IpKTtcbn1cbmZ1bmN0aW9uIGVsZW1lbnRJc0NoaWxkT2YoZWwsIHBhcmVudCkge1xuICBjb25zdCBpc0NoaWxkID0gcGFyZW50LmNvbnRhaW5zKGVsKTtcbiAgaWYgKCFpc0NoaWxkICYmIHBhcmVudCBpbnN0YW5jZW9mIEhUTUxTbG90RWxlbWVudCkge1xuICAgIGNvbnN0IGNoaWxkcmVuID0gWy4uLnBhcmVudC5hc3NpZ25lZEVsZW1lbnRzKCldO1xuICAgIHJldHVybiBjaGlsZHJlbi5pbmNsdWRlcyhlbCk7XG4gIH1cbiAgcmV0dXJuIGlzQ2hpbGQ7XG59XG5mdW5jdGlvbiBzaG93V2FybmluZyh0ZXh0KSB7XG4gIHRyeSB7XG4gICAgY29uc29sZS53YXJuKHRleHQpO1xuICAgIHJldHVybjtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gZXJyXG4gIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQodGFnLCBjbGFzc2VzKSB7XG4gIGlmIChjbGFzc2VzID09PSB2b2lkIDApIHtcbiAgICBjbGFzc2VzID0gW107XG4gIH1cbiAgY29uc3QgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZyk7XG4gIGVsLmNsYXNzTGlzdC5hZGQoLi4uKEFycmF5LmlzQXJyYXkoY2xhc3NlcykgPyBjbGFzc2VzIDogY2xhc3Nlc1RvVG9rZW5zKGNsYXNzZXMpKSk7XG4gIHJldHVybiBlbDtcbn1cbmZ1bmN0aW9uIGVsZW1lbnRPZmZzZXQoZWwpIHtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgY29uc3QgYm94ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIGNvbnN0IGJvZHkgPSBkb2N1bWVudC5ib2R5O1xuICBjb25zdCBjbGllbnRUb3AgPSBlbC5jbGllbnRUb3AgfHwgYm9keS5jbGllbnRUb3AgfHwgMDtcbiAgY29uc3QgY2xpZW50TGVmdCA9IGVsLmNsaWVudExlZnQgfHwgYm9keS5jbGllbnRMZWZ0IHx8IDA7XG4gIGNvbnN0IHNjcm9sbFRvcCA9IGVsID09PSB3aW5kb3cgPyB3aW5kb3cuc2Nyb2xsWSA6IGVsLnNjcm9sbFRvcDtcbiAgY29uc3Qgc2Nyb2xsTGVmdCA9IGVsID09PSB3aW5kb3cgPyB3aW5kb3cuc2Nyb2xsWCA6IGVsLnNjcm9sbExlZnQ7XG4gIHJldHVybiB7XG4gICAgdG9wOiBib3gudG9wICsgc2Nyb2xsVG9wIC0gY2xpZW50VG9wLFxuICAgIGxlZnQ6IGJveC5sZWZ0ICsgc2Nyb2xsTGVmdCAtIGNsaWVudExlZnRcbiAgfTtcbn1cbmZ1bmN0aW9uIGVsZW1lbnRQcmV2QWxsKGVsLCBzZWxlY3Rvcikge1xuICBjb25zdCBwcmV2RWxzID0gW107XG4gIHdoaWxlIChlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nKSB7XG4gICAgY29uc3QgcHJldiA9IGVsLnByZXZpb3VzRWxlbWVudFNpYmxpbmc7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgIGlmIChwcmV2Lm1hdGNoZXMoc2VsZWN0b3IpKSBwcmV2RWxzLnB1c2gocHJldik7XG4gICAgfSBlbHNlIHByZXZFbHMucHVzaChwcmV2KTtcbiAgICBlbCA9IHByZXY7XG4gIH1cbiAgcmV0dXJuIHByZXZFbHM7XG59XG5mdW5jdGlvbiBlbGVtZW50TmV4dEFsbChlbCwgc2VsZWN0b3IpIHtcbiAgY29uc3QgbmV4dEVscyA9IFtdO1xuICB3aGlsZSAoZWwubmV4dEVsZW1lbnRTaWJsaW5nKSB7XG4gICAgY29uc3QgbmV4dCA9IGVsLm5leHRFbGVtZW50U2libGluZzsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgaWYgKG5leHQubWF0Y2hlcyhzZWxlY3RvcikpIG5leHRFbHMucHVzaChuZXh0KTtcbiAgICB9IGVsc2UgbmV4dEVscy5wdXNoKG5leHQpO1xuICAgIGVsID0gbmV4dDtcbiAgfVxuICByZXR1cm4gbmV4dEVscztcbn1cbmZ1bmN0aW9uIGVsZW1lbnRTdHlsZShlbCwgcHJvcCkge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgcmV0dXJuIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKHByb3ApO1xufVxuZnVuY3Rpb24gZWxlbWVudEluZGV4KGVsKSB7XG4gIGxldCBjaGlsZCA9IGVsO1xuICBsZXQgaTtcbiAgaWYgKGNoaWxkKSB7XG4gICAgaSA9IDA7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgd2hpbGUgKChjaGlsZCA9IGNoaWxkLnByZXZpb3VzU2libGluZykgIT09IG51bGwpIHtcbiAgICAgIGlmIChjaGlsZC5ub2RlVHlwZSA9PT0gMSkgaSArPSAxO1xuICAgIH1cbiAgICByZXR1cm4gaTtcbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuZnVuY3Rpb24gZWxlbWVudFBhcmVudHMoZWwsIHNlbGVjdG9yKSB7XG4gIGNvbnN0IHBhcmVudHMgPSBbXTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICBsZXQgcGFyZW50ID0gZWwucGFyZW50RWxlbWVudDsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICB3aGlsZSAocGFyZW50KSB7XG4gICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICBpZiAocGFyZW50Lm1hdGNoZXMoc2VsZWN0b3IpKSBwYXJlbnRzLnB1c2gocGFyZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGFyZW50cy5wdXNoKHBhcmVudCk7XG4gICAgfVxuICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnRFbGVtZW50O1xuICB9XG4gIHJldHVybiBwYXJlbnRzO1xufVxuZnVuY3Rpb24gZWxlbWVudFRyYW5zaXRpb25FbmQoZWwsIGNhbGxiYWNrKSB7XG4gIGZ1bmN0aW9uIGZpcmVDYWxsQmFjayhlKSB7XG4gICAgaWYgKGUudGFyZ2V0ICE9PSBlbCkgcmV0dXJuO1xuICAgIGNhbGxiYWNrLmNhbGwoZWwsIGUpO1xuICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBmaXJlQ2FsbEJhY2spO1xuICB9XG4gIGlmIChjYWxsYmFjaykge1xuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBmaXJlQ2FsbEJhY2spO1xuICB9XG59XG5mdW5jdGlvbiBlbGVtZW50T3V0ZXJTaXplKGVsLCBzaXplLCBpbmNsdWRlTWFyZ2lucykge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgaWYgKGluY2x1ZGVNYXJnaW5zKSB7XG4gICAgcmV0dXJuIGVsW3NpemUgPT09ICd3aWR0aCcgPyAnb2Zmc2V0V2lkdGgnIDogJ29mZnNldEhlaWdodCddICsgcGFyc2VGbG9hdCh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZShzaXplID09PSAnd2lkdGgnID8gJ21hcmdpbi1yaWdodCcgOiAnbWFyZ2luLXRvcCcpKSArIHBhcnNlRmxvYXQod2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwsIG51bGwpLmdldFByb3BlcnR5VmFsdWUoc2l6ZSA9PT0gJ3dpZHRoJyA/ICdtYXJnaW4tbGVmdCcgOiAnbWFyZ2luLWJvdHRvbScpKTtcbiAgfVxuICByZXR1cm4gZWwub2Zmc2V0V2lkdGg7XG59XG5mdW5jdGlvbiBtYWtlRWxlbWVudHNBcnJheShlbCkge1xuICByZXR1cm4gKEFycmF5LmlzQXJyYXkoZWwpID8gZWwgOiBbZWxdKS5maWx0ZXIoZSA9PiAhIWUpO1xufVxuZnVuY3Rpb24gZ2V0Um90YXRlRml4KHN3aXBlcikge1xuICByZXR1cm4gdiA9PiB7XG4gICAgaWYgKE1hdGguYWJzKHYpID4gMCAmJiBzd2lwZXIuYnJvd3NlciAmJiBzd2lwZXIuYnJvd3Nlci5uZWVkM2RGaXggJiYgTWF0aC5hYnModikgJSA5MCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHYgKyAwLjAwMTtcbiAgICB9XG4gICAgcmV0dXJuIHY7XG4gIH07XG59XG5cbmV4cG9ydCB7IGVsZW1lbnRQYXJlbnRzIGFzIGEsIGVsZW1lbnRPZmZzZXQgYXMgYiwgY3JlYXRlRWxlbWVudCBhcyBjLCBub3cgYXMgZCwgZWxlbWVudENoaWxkcmVuIGFzIGUsIGVsZW1lbnRPdXRlclNpemUgYXMgZiwgZ2V0U2xpZGVUcmFuc2Zvcm1FbCBhcyBnLCBlbGVtZW50SW5kZXggYXMgaCwgY2xhc3Nlc1RvVG9rZW5zIGFzIGksIGdldFRyYW5zbGF0ZSBhcyBqLCBlbGVtZW50VHJhbnNpdGlvbkVuZCBhcyBrLCBpc09iamVjdCBhcyBsLCBtYWtlRWxlbWVudHNBcnJheSBhcyBtLCBuZXh0VGljayBhcyBuLCBnZXRSb3RhdGVGaXggYXMgbywgZWxlbWVudFN0eWxlIGFzIHAsIGVsZW1lbnROZXh0QWxsIGFzIHEsIGVsZW1lbnRQcmV2QWxsIGFzIHIsIHNldENTU1Byb3BlcnR5IGFzIHMsIGFuaW1hdGVDU1NNb2RlU2Nyb2xsIGFzIHQsIHNob3dXYXJuaW5nIGFzIHUsIGVsZW1lbnRJc0NoaWxkT2YgYXMgdiwgZXh0ZW5kIGFzIHcsIGRlbGV0ZVByb3BzIGFzIHggfTtcbiIsImltcG9ydCB7IGEgYXMgZ2V0V2luZG93LCBnIGFzIGdldERvY3VtZW50IH0gZnJvbSAnLi9zc3Itd2luZG93LmVzbS5tanMnO1xuaW1wb3J0IHsgYSBhcyBlbGVtZW50UGFyZW50cywgcCBhcyBlbGVtZW50U3R5bGUsIGUgYXMgZWxlbWVudENoaWxkcmVuLCBzIGFzIHNldENTU1Byb3BlcnR5LCBmIGFzIGVsZW1lbnRPdXRlclNpemUsIHEgYXMgZWxlbWVudE5leHRBbGwsIHIgYXMgZWxlbWVudFByZXZBbGwsIGogYXMgZ2V0VHJhbnNsYXRlLCB0IGFzIGFuaW1hdGVDU1NNb2RlU2Nyb2xsLCBuIGFzIG5leHRUaWNrLCB1IGFzIHNob3dXYXJuaW5nLCBjIGFzIGNyZWF0ZUVsZW1lbnQsIHYgYXMgZWxlbWVudElzQ2hpbGRPZiwgZCBhcyBub3csIHcgYXMgZXh0ZW5kLCBoIGFzIGVsZW1lbnRJbmRleCwgeCBhcyBkZWxldGVQcm9wcyB9IGZyb20gJy4vdXRpbHMubWpzJztcblxubGV0IHN1cHBvcnQ7XG5mdW5jdGlvbiBjYWxjU3VwcG9ydCgpIHtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgcmV0dXJuIHtcbiAgICBzbW9vdGhTY3JvbGw6IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUgJiYgJ3Njcm9sbEJlaGF2aW9yJyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUsXG4gICAgdG91Y2g6ICEhKCdvbnRvdWNoc3RhcnQnIGluIHdpbmRvdyB8fCB3aW5kb3cuRG9jdW1lbnRUb3VjaCAmJiBkb2N1bWVudCBpbnN0YW5jZW9mIHdpbmRvdy5Eb2N1bWVudFRvdWNoKVxuICB9O1xufVxuZnVuY3Rpb24gZ2V0U3VwcG9ydCgpIHtcbiAgaWYgKCFzdXBwb3J0KSB7XG4gICAgc3VwcG9ydCA9IGNhbGNTdXBwb3J0KCk7XG4gIH1cbiAgcmV0dXJuIHN1cHBvcnQ7XG59XG5cbmxldCBkZXZpY2VDYWNoZWQ7XG5mdW5jdGlvbiBjYWxjRGV2aWNlKF90ZW1wKSB7XG4gIGxldCB7XG4gICAgdXNlckFnZW50XG4gIH0gPSBfdGVtcCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDtcbiAgY29uc3Qgc3VwcG9ydCA9IGdldFN1cHBvcnQoKTtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGNvbnN0IHBsYXRmb3JtID0gd2luZG93Lm5hdmlnYXRvci5wbGF0Zm9ybTtcbiAgY29uc3QgdWEgPSB1c2VyQWdlbnQgfHwgd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQ7XG4gIGNvbnN0IGRldmljZSA9IHtcbiAgICBpb3M6IGZhbHNlLFxuICAgIGFuZHJvaWQ6IGZhbHNlXG4gIH07XG4gIGNvbnN0IHNjcmVlbldpZHRoID0gd2luZG93LnNjcmVlbi53aWR0aDtcbiAgY29uc3Qgc2NyZWVuSGVpZ2h0ID0gd2luZG93LnNjcmVlbi5oZWlnaHQ7XG4gIGNvbnN0IGFuZHJvaWQgPSB1YS5tYXRjaCgvKEFuZHJvaWQpOz9bXFxzXFwvXSsoW1xcZC5dKyk/Lyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgbGV0IGlwYWQgPSB1YS5tYXRjaCgvKGlQYWQpLipPU1xccyhbXFxkX10rKS8pO1xuICBjb25zdCBpcG9kID0gdWEubWF0Y2goLyhpUG9kKSguKk9TXFxzKFtcXGRfXSspKT8vKTtcbiAgY29uc3QgaXBob25lID0gIWlwYWQgJiYgdWEubWF0Y2goLyhpUGhvbmVcXHNPU3xpT1MpXFxzKFtcXGRfXSspLyk7XG4gIGNvbnN0IHdpbmRvd3MgPSBwbGF0Zm9ybSA9PT0gJ1dpbjMyJztcbiAgbGV0IG1hY29zID0gcGxhdGZvcm0gPT09ICdNYWNJbnRlbCc7XG5cbiAgLy8gaVBhZE9zIDEzIGZpeFxuICBjb25zdCBpUGFkU2NyZWVucyA9IFsnMTAyNHgxMzY2JywgJzEzNjZ4MTAyNCcsICc4MzR4MTE5NCcsICcxMTk0eDgzNCcsICc4MzR4MTExMicsICcxMTEyeDgzNCcsICc3Njh4MTAyNCcsICcxMDI0eDc2OCcsICc4MjB4MTE4MCcsICcxMTgweDgyMCcsICc4MTB4MTA4MCcsICcxMDgweDgxMCddO1xuICBpZiAoIWlwYWQgJiYgbWFjb3MgJiYgc3VwcG9ydC50b3VjaCAmJiBpUGFkU2NyZWVucy5pbmRleE9mKGAke3NjcmVlbldpZHRofXgke3NjcmVlbkhlaWdodH1gKSA+PSAwKSB7XG4gICAgaXBhZCA9IHVhLm1hdGNoKC8oVmVyc2lvbilcXC8oW1xcZC5dKykvKTtcbiAgICBpZiAoIWlwYWQpIGlwYWQgPSBbMCwgMSwgJzEzXzBfMCddO1xuICAgIG1hY29zID0gZmFsc2U7XG4gIH1cblxuICAvLyBBbmRyb2lkXG4gIGlmIChhbmRyb2lkICYmICF3aW5kb3dzKSB7XG4gICAgZGV2aWNlLm9zID0gJ2FuZHJvaWQnO1xuICAgIGRldmljZS5hbmRyb2lkID0gdHJ1ZTtcbiAgfVxuICBpZiAoaXBhZCB8fCBpcGhvbmUgfHwgaXBvZCkge1xuICAgIGRldmljZS5vcyA9ICdpb3MnO1xuICAgIGRldmljZS5pb3MgPSB0cnVlO1xuICB9XG5cbiAgLy8gRXhwb3J0IG9iamVjdFxuICByZXR1cm4gZGV2aWNlO1xufVxuZnVuY3Rpb24gZ2V0RGV2aWNlKG92ZXJyaWRlcykge1xuICBpZiAob3ZlcnJpZGVzID09PSB2b2lkIDApIHtcbiAgICBvdmVycmlkZXMgPSB7fTtcbiAgfVxuICBpZiAoIWRldmljZUNhY2hlZCkge1xuICAgIGRldmljZUNhY2hlZCA9IGNhbGNEZXZpY2Uob3ZlcnJpZGVzKTtcbiAgfVxuICByZXR1cm4gZGV2aWNlQ2FjaGVkO1xufVxuXG5sZXQgYnJvd3NlcjtcbmZ1bmN0aW9uIGNhbGNCcm93c2VyKCkge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgY29uc3QgZGV2aWNlID0gZ2V0RGV2aWNlKCk7XG4gIGxldCBuZWVkUGVyc3BlY3RpdmVGaXggPSBmYWxzZTtcbiAgZnVuY3Rpb24gaXNTYWZhcmkoKSB7XG4gICAgY29uc3QgdWEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpO1xuICAgIHJldHVybiB1YS5pbmRleE9mKCdzYWZhcmknKSA+PSAwICYmIHVhLmluZGV4T2YoJ2Nocm9tZScpIDwgMCAmJiB1YS5pbmRleE9mKCdhbmRyb2lkJykgPCAwO1xuICB9XG4gIGlmIChpc1NhZmFyaSgpKSB7XG4gICAgY29uc3QgdWEgPSBTdHJpbmcod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgIGlmICh1YS5pbmNsdWRlcygnVmVyc2lvbi8nKSkge1xuICAgICAgY29uc3QgW21ham9yLCBtaW5vcl0gPSB1YS5zcGxpdCgnVmVyc2lvbi8nKVsxXS5zcGxpdCgnICcpWzBdLnNwbGl0KCcuJykubWFwKG51bSA9PiBOdW1iZXIobnVtKSk7XG4gICAgICBuZWVkUGVyc3BlY3RpdmVGaXggPSBtYWpvciA8IDE2IHx8IG1ham9yID09PSAxNiAmJiBtaW5vciA8IDI7XG4gICAgfVxuICB9XG4gIGNvbnN0IGlzV2ViVmlldyA9IC8oaVBob25lfGlQb2R8aVBhZCkuKkFwcGxlV2ViS2l0KD8hLipTYWZhcmkpL2kudGVzdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gIGNvbnN0IGlzU2FmYXJpQnJvd3NlciA9IGlzU2FmYXJpKCk7XG4gIGNvbnN0IG5lZWQzZEZpeCA9IGlzU2FmYXJpQnJvd3NlciB8fCBpc1dlYlZpZXcgJiYgZGV2aWNlLmlvcztcbiAgcmV0dXJuIHtcbiAgICBpc1NhZmFyaTogbmVlZFBlcnNwZWN0aXZlRml4IHx8IGlzU2FmYXJpQnJvd3NlcixcbiAgICBuZWVkUGVyc3BlY3RpdmVGaXgsXG4gICAgbmVlZDNkRml4LFxuICAgIGlzV2ViVmlld1xuICB9O1xufVxuZnVuY3Rpb24gZ2V0QnJvd3NlcigpIHtcbiAgaWYgKCFicm93c2VyKSB7XG4gICAgYnJvd3NlciA9IGNhbGNCcm93c2VyKCk7XG4gIH1cbiAgcmV0dXJuIGJyb3dzZXI7XG59XG5cbmZ1bmN0aW9uIFJlc2l6ZShfcmVmKSB7XG4gIGxldCB7XG4gICAgc3dpcGVyLFxuICAgIG9uLFxuICAgIGVtaXRcbiAgfSA9IF9yZWY7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBsZXQgb2JzZXJ2ZXIgPSBudWxsO1xuICBsZXQgYW5pbWF0aW9uRnJhbWUgPSBudWxsO1xuICBjb25zdCByZXNpemVIYW5kbGVyID0gKCkgPT4ge1xuICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQgfHwgIXN3aXBlci5pbml0aWFsaXplZCkgcmV0dXJuO1xuICAgIGVtaXQoJ2JlZm9yZVJlc2l6ZScpO1xuICAgIGVtaXQoJ3Jlc2l6ZScpO1xuICB9O1xuICBjb25zdCBjcmVhdGVPYnNlcnZlciA9ICgpID0+IHtcbiAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIuaW5pdGlhbGl6ZWQpIHJldHVybjtcbiAgICBvYnNlcnZlciA9IG5ldyBSZXNpemVPYnNlcnZlcihlbnRyaWVzID0+IHtcbiAgICAgIGFuaW1hdGlvbkZyYW1lID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICB3aWR0aCxcbiAgICAgICAgICBoZWlnaHRcbiAgICAgICAgfSA9IHN3aXBlcjtcbiAgICAgICAgbGV0IG5ld1dpZHRoID0gd2lkdGg7XG4gICAgICAgIGxldCBuZXdIZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgIGVudHJpZXMuZm9yRWFjaChfcmVmMiA9PiB7XG4gICAgICAgICAgbGV0IHtcbiAgICAgICAgICAgIGNvbnRlbnRCb3hTaXplLFxuICAgICAgICAgICAgY29udGVudFJlY3QsXG4gICAgICAgICAgICB0YXJnZXRcbiAgICAgICAgICB9ID0gX3JlZjI7XG4gICAgICAgICAgaWYgKHRhcmdldCAmJiB0YXJnZXQgIT09IHN3aXBlci5lbCkgcmV0dXJuO1xuICAgICAgICAgIG5ld1dpZHRoID0gY29udGVudFJlY3QgPyBjb250ZW50UmVjdC53aWR0aCA6IChjb250ZW50Qm94U2l6ZVswXSB8fCBjb250ZW50Qm94U2l6ZSkuaW5saW5lU2l6ZTtcbiAgICAgICAgICBuZXdIZWlnaHQgPSBjb250ZW50UmVjdCA/IGNvbnRlbnRSZWN0LmhlaWdodCA6IChjb250ZW50Qm94U2l6ZVswXSB8fCBjb250ZW50Qm94U2l6ZSkuYmxvY2tTaXplO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKG5ld1dpZHRoICE9PSB3aWR0aCB8fCBuZXdIZWlnaHQgIT09IGhlaWdodCkge1xuICAgICAgICAgIHJlc2l6ZUhhbmRsZXIoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgb2JzZXJ2ZXIub2JzZXJ2ZShzd2lwZXIuZWwpO1xuICB9O1xuICBjb25zdCByZW1vdmVPYnNlcnZlciA9ICgpID0+IHtcbiAgICBpZiAoYW5pbWF0aW9uRnJhbWUpIHtcbiAgICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZShhbmltYXRpb25GcmFtZSk7XG4gICAgfVxuICAgIGlmIChvYnNlcnZlciAmJiBvYnNlcnZlci51bm9ic2VydmUgJiYgc3dpcGVyLmVsKSB7XG4gICAgICBvYnNlcnZlci51bm9ic2VydmUoc3dpcGVyLmVsKTtcbiAgICAgIG9ic2VydmVyID0gbnVsbDtcbiAgICB9XG4gIH07XG4gIGNvbnN0IG9yaWVudGF0aW9uQ2hhbmdlSGFuZGxlciA9ICgpID0+IHtcbiAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIuaW5pdGlhbGl6ZWQpIHJldHVybjtcbiAgICBlbWl0KCdvcmllbnRhdGlvbmNoYW5nZScpO1xuICB9O1xuICBvbignaW5pdCcsICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5yZXNpemVPYnNlcnZlciAmJiB0eXBlb2Ygd2luZG93LlJlc2l6ZU9ic2VydmVyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY3JlYXRlT2JzZXJ2ZXIoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHJlc2l6ZUhhbmRsZXIpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdvcmllbnRhdGlvbmNoYW5nZScsIG9yaWVudGF0aW9uQ2hhbmdlSGFuZGxlcik7XG4gIH0pO1xuICBvbignZGVzdHJveScsICgpID0+IHtcbiAgICByZW1vdmVPYnNlcnZlcigpO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCByZXNpemVIYW5kbGVyKTtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignb3JpZW50YXRpb25jaGFuZ2UnLCBvcmllbnRhdGlvbkNoYW5nZUhhbmRsZXIpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gT2JzZXJ2ZXIoX3JlZikge1xuICBsZXQge1xuICAgIHN3aXBlcixcbiAgICBleHRlbmRQYXJhbXMsXG4gICAgb24sXG4gICAgZW1pdFxuICB9ID0gX3JlZjtcbiAgY29uc3Qgb2JzZXJ2ZXJzID0gW107XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBjb25zdCBhdHRhY2ggPSBmdW5jdGlvbiAodGFyZ2V0LCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cbiAgICBjb25zdCBPYnNlcnZlckZ1bmMgPSB3aW5kb3cuTXV0YXRpb25PYnNlcnZlciB8fCB3aW5kb3cuV2Via2l0TXV0YXRpb25PYnNlcnZlcjtcbiAgICBjb25zdCBvYnNlcnZlciA9IG5ldyBPYnNlcnZlckZ1bmMobXV0YXRpb25zID0+IHtcbiAgICAgIC8vIFRoZSBvYnNlcnZlclVwZGF0ZSBldmVudCBzaG91bGQgb25seSBiZSB0cmlnZ2VyZWRcbiAgICAgIC8vIG9uY2UgZGVzcGl0ZSB0aGUgbnVtYmVyIG9mIG11dGF0aW9ucy4gIEFkZGl0aW9uYWxcbiAgICAgIC8vIHRyaWdnZXJzIGFyZSByZWR1bmRhbnQgYW5kIGFyZSB2ZXJ5IGNvc3RseVxuICAgICAgaWYgKHN3aXBlci5fX3ByZXZlbnRPYnNlcnZlcl9fKSByZXR1cm47XG4gICAgICBpZiAobXV0YXRpb25zLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBlbWl0KCdvYnNlcnZlclVwZGF0ZScsIG11dGF0aW9uc1swXSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG9ic2VydmVyVXBkYXRlID0gZnVuY3Rpb24gb2JzZXJ2ZXJVcGRhdGUoKSB7XG4gICAgICAgIGVtaXQoJ29ic2VydmVyVXBkYXRlJywgbXV0YXRpb25zWzBdKTtcbiAgICAgIH07XG4gICAgICBpZiAod2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSkge1xuICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKG9ic2VydmVyVXBkYXRlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KG9ic2VydmVyVXBkYXRlLCAwKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBvYnNlcnZlci5vYnNlcnZlKHRhcmdldCwge1xuICAgICAgYXR0cmlidXRlczogdHlwZW9mIG9wdGlvbnMuYXR0cmlidXRlcyA9PT0gJ3VuZGVmaW5lZCcgPyB0cnVlIDogb3B0aW9ucy5hdHRyaWJ1dGVzLFxuICAgICAgY2hpbGRMaXN0OiBzd2lwZXIuaXNFbGVtZW50IHx8ICh0eXBlb2Ygb3B0aW9ucy5jaGlsZExpc3QgPT09ICd1bmRlZmluZWQnID8gdHJ1ZSA6IG9wdGlvbnMpLmNoaWxkTGlzdCxcbiAgICAgIGNoYXJhY3RlckRhdGE6IHR5cGVvZiBvcHRpb25zLmNoYXJhY3RlckRhdGEgPT09ICd1bmRlZmluZWQnID8gdHJ1ZSA6IG9wdGlvbnMuY2hhcmFjdGVyRGF0YVxuICAgIH0pO1xuICAgIG9ic2VydmVycy5wdXNoKG9ic2VydmVyKTtcbiAgfTtcbiAgY29uc3QgaW5pdCA9ICgpID0+IHtcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMub2JzZXJ2ZXIpIHJldHVybjtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5vYnNlcnZlUGFyZW50cykge1xuICAgICAgY29uc3QgY29udGFpbmVyUGFyZW50cyA9IGVsZW1lbnRQYXJlbnRzKHN3aXBlci5ob3N0RWwpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb250YWluZXJQYXJlbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGF0dGFjaChjb250YWluZXJQYXJlbnRzW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gT2JzZXJ2ZSBjb250YWluZXJcbiAgICBhdHRhY2goc3dpcGVyLmhvc3RFbCwge1xuICAgICAgY2hpbGRMaXN0OiBzd2lwZXIucGFyYW1zLm9ic2VydmVTbGlkZUNoaWxkcmVuXG4gICAgfSk7XG5cbiAgICAvLyBPYnNlcnZlIHdyYXBwZXJcbiAgICBhdHRhY2goc3dpcGVyLndyYXBwZXJFbCwge1xuICAgICAgYXR0cmlidXRlczogZmFsc2VcbiAgICB9KTtcbiAgfTtcbiAgY29uc3QgZGVzdHJveSA9ICgpID0+IHtcbiAgICBvYnNlcnZlcnMuZm9yRWFjaChvYnNlcnZlciA9PiB7XG4gICAgICBvYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgfSk7XG4gICAgb2JzZXJ2ZXJzLnNwbGljZSgwLCBvYnNlcnZlcnMubGVuZ3RoKTtcbiAgfTtcbiAgZXh0ZW5kUGFyYW1zKHtcbiAgICBvYnNlcnZlcjogZmFsc2UsXG4gICAgb2JzZXJ2ZVBhcmVudHM6IGZhbHNlLFxuICAgIG9ic2VydmVTbGlkZUNoaWxkcmVuOiBmYWxzZVxuICB9KTtcbiAgb24oJ2luaXQnLCBpbml0KTtcbiAgb24oJ2Rlc3Ryb3knLCBkZXN0cm95KTtcbn1cblxuLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZXJzY29yZS1kYW5nbGUgKi9cblxudmFyIGV2ZW50c0VtaXR0ZXIgPSB7XG4gIG9uKGV2ZW50cywgaGFuZGxlciwgcHJpb3JpdHkpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBpZiAoIXNlbGYuZXZlbnRzTGlzdGVuZXJzIHx8IHNlbGYuZGVzdHJveWVkKSByZXR1cm4gc2VsZjtcbiAgICBpZiAodHlwZW9mIGhhbmRsZXIgIT09ICdmdW5jdGlvbicpIHJldHVybiBzZWxmO1xuICAgIGNvbnN0IG1ldGhvZCA9IHByaW9yaXR5ID8gJ3Vuc2hpZnQnIDogJ3B1c2gnO1xuICAgIGV2ZW50cy5zcGxpdCgnICcpLmZvckVhY2goZXZlbnQgPT4ge1xuICAgICAgaWYgKCFzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0pIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XSA9IFtdO1xuICAgICAgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdW21ldGhvZF0oaGFuZGxlcik7XG4gICAgfSk7XG4gICAgcmV0dXJuIHNlbGY7XG4gIH0sXG4gIG9uY2UoZXZlbnRzLCBoYW5kbGVyLCBwcmlvcml0eSkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnMgfHwgc2VsZi5kZXN0cm95ZWQpIHJldHVybiBzZWxmO1xuICAgIGlmICh0eXBlb2YgaGFuZGxlciAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHNlbGY7XG4gICAgZnVuY3Rpb24gb25jZUhhbmRsZXIoKSB7XG4gICAgICBzZWxmLm9mZihldmVudHMsIG9uY2VIYW5kbGVyKTtcbiAgICAgIGlmIChvbmNlSGFuZGxlci5fX2VtaXR0ZXJQcm94eSkge1xuICAgICAgICBkZWxldGUgb25jZUhhbmRsZXIuX19lbWl0dGVyUHJveHk7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cbiAgICAgIGhhbmRsZXIuYXBwbHkoc2VsZiwgYXJncyk7XG4gICAgfVxuICAgIG9uY2VIYW5kbGVyLl9fZW1pdHRlclByb3h5ID0gaGFuZGxlcjtcbiAgICByZXR1cm4gc2VsZi5vbihldmVudHMsIG9uY2VIYW5kbGVyLCBwcmlvcml0eSk7XG4gIH0sXG4gIG9uQW55KGhhbmRsZXIsIHByaW9yaXR5KSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgaWYgKCFzZWxmLmV2ZW50c0xpc3RlbmVycyB8fCBzZWxmLmRlc3Ryb3llZCkgcmV0dXJuIHNlbGY7XG4gICAgaWYgKHR5cGVvZiBoYW5kbGVyICE9PSAnZnVuY3Rpb24nKSByZXR1cm4gc2VsZjtcbiAgICBjb25zdCBtZXRob2QgPSBwcmlvcml0eSA/ICd1bnNoaWZ0JyA6ICdwdXNoJztcbiAgICBpZiAoc2VsZi5ldmVudHNBbnlMaXN0ZW5lcnMuaW5kZXhPZihoYW5kbGVyKSA8IDApIHtcbiAgICAgIHNlbGYuZXZlbnRzQW55TGlzdGVuZXJzW21ldGhvZF0oaGFuZGxlcik7XG4gICAgfVxuICAgIHJldHVybiBzZWxmO1xuICB9LFxuICBvZmZBbnkoaGFuZGxlcikge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnMgfHwgc2VsZi5kZXN0cm95ZWQpIHJldHVybiBzZWxmO1xuICAgIGlmICghc2VsZi5ldmVudHNBbnlMaXN0ZW5lcnMpIHJldHVybiBzZWxmO1xuICAgIGNvbnN0IGluZGV4ID0gc2VsZi5ldmVudHNBbnlMaXN0ZW5lcnMuaW5kZXhPZihoYW5kbGVyKTtcbiAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgc2VsZi5ldmVudHNBbnlMaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG4gICAgcmV0dXJuIHNlbGY7XG4gIH0sXG4gIG9mZihldmVudHMsIGhhbmRsZXIpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBpZiAoIXNlbGYuZXZlbnRzTGlzdGVuZXJzIHx8IHNlbGYuZGVzdHJveWVkKSByZXR1cm4gc2VsZjtcbiAgICBpZiAoIXNlbGYuZXZlbnRzTGlzdGVuZXJzKSByZXR1cm4gc2VsZjtcbiAgICBldmVudHMuc3BsaXQoJyAnKS5mb3JFYWNoKGV2ZW50ID0+IHtcbiAgICAgIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdID0gW107XG4gICAgICB9IGVsc2UgaWYgKHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XSkge1xuICAgICAgICBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0uZm9yRWFjaCgoZXZlbnRIYW5kbGVyLCBpbmRleCkgPT4ge1xuICAgICAgICAgIGlmIChldmVudEhhbmRsZXIgPT09IGhhbmRsZXIgfHwgZXZlbnRIYW5kbGVyLl9fZW1pdHRlclByb3h5ICYmIGV2ZW50SGFuZGxlci5fX2VtaXR0ZXJQcm94eSA9PT0gaGFuZGxlcikge1xuICAgICAgICAgICAgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gc2VsZjtcbiAgfSxcbiAgZW1pdCgpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBpZiAoIXNlbGYuZXZlbnRzTGlzdGVuZXJzIHx8IHNlbGYuZGVzdHJveWVkKSByZXR1cm4gc2VsZjtcbiAgICBpZiAoIXNlbGYuZXZlbnRzTGlzdGVuZXJzKSByZXR1cm4gc2VsZjtcbiAgICBsZXQgZXZlbnRzO1xuICAgIGxldCBkYXRhO1xuICAgIGxldCBjb250ZXh0O1xuICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGFyZ3NbMF0gPT09ICdzdHJpbmcnIHx8IEFycmF5LmlzQXJyYXkoYXJnc1swXSkpIHtcbiAgICAgIGV2ZW50cyA9IGFyZ3NbMF07XG4gICAgICBkYXRhID0gYXJncy5zbGljZSgxLCBhcmdzLmxlbmd0aCk7XG4gICAgICBjb250ZXh0ID0gc2VsZjtcbiAgICB9IGVsc2Uge1xuICAgICAgZXZlbnRzID0gYXJnc1swXS5ldmVudHM7XG4gICAgICBkYXRhID0gYXJnc1swXS5kYXRhO1xuICAgICAgY29udGV4dCA9IGFyZ3NbMF0uY29udGV4dCB8fCBzZWxmO1xuICAgIH1cbiAgICBkYXRhLnVuc2hpZnQoY29udGV4dCk7XG4gICAgY29uc3QgZXZlbnRzQXJyYXkgPSBBcnJheS5pc0FycmF5KGV2ZW50cykgPyBldmVudHMgOiBldmVudHMuc3BsaXQoJyAnKTtcbiAgICBldmVudHNBcnJheS5mb3JFYWNoKGV2ZW50ID0+IHtcbiAgICAgIGlmIChzZWxmLmV2ZW50c0FueUxpc3RlbmVycyAmJiBzZWxmLmV2ZW50c0FueUxpc3RlbmVycy5sZW5ndGgpIHtcbiAgICAgICAgc2VsZi5ldmVudHNBbnlMaXN0ZW5lcnMuZm9yRWFjaChldmVudEhhbmRsZXIgPT4ge1xuICAgICAgICAgIGV2ZW50SGFuZGxlci5hcHBseShjb250ZXh0LCBbZXZlbnQsIC4uLmRhdGFdKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAoc2VsZi5ldmVudHNMaXN0ZW5lcnMgJiYgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdKSB7XG4gICAgICAgIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XS5mb3JFYWNoKGV2ZW50SGFuZGxlciA9PiB7XG4gICAgICAgICAgZXZlbnRIYW5kbGVyLmFwcGx5KGNvbnRleHQsIGRhdGEpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gc2VsZjtcbiAgfVxufTtcblxuZnVuY3Rpb24gdXBkYXRlU2l6ZSgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgbGV0IHdpZHRoO1xuICBsZXQgaGVpZ2h0O1xuICBjb25zdCBlbCA9IHN3aXBlci5lbDtcbiAgaWYgKHR5cGVvZiBzd2lwZXIucGFyYW1zLndpZHRoICE9PSAndW5kZWZpbmVkJyAmJiBzd2lwZXIucGFyYW1zLndpZHRoICE9PSBudWxsKSB7XG4gICAgd2lkdGggPSBzd2lwZXIucGFyYW1zLndpZHRoO1xuICB9IGVsc2Uge1xuICAgIHdpZHRoID0gZWwuY2xpZW50V2lkdGg7XG4gIH1cbiAgaWYgKHR5cGVvZiBzd2lwZXIucGFyYW1zLmhlaWdodCAhPT0gJ3VuZGVmaW5lZCcgJiYgc3dpcGVyLnBhcmFtcy5oZWlnaHQgIT09IG51bGwpIHtcbiAgICBoZWlnaHQgPSBzd2lwZXIucGFyYW1zLmhlaWdodDtcbiAgfSBlbHNlIHtcbiAgICBoZWlnaHQgPSBlbC5jbGllbnRIZWlnaHQ7XG4gIH1cbiAgaWYgKHdpZHRoID09PSAwICYmIHN3aXBlci5pc0hvcml6b250YWwoKSB8fCBoZWlnaHQgPT09IDAgJiYgc3dpcGVyLmlzVmVydGljYWwoKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIFN1YnRyYWN0IHBhZGRpbmdzXG4gIHdpZHRoID0gd2lkdGggLSBwYXJzZUludChlbGVtZW50U3R5bGUoZWwsICdwYWRkaW5nLWxlZnQnKSB8fCAwLCAxMCkgLSBwYXJzZUludChlbGVtZW50U3R5bGUoZWwsICdwYWRkaW5nLXJpZ2h0JykgfHwgMCwgMTApO1xuICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChlbGVtZW50U3R5bGUoZWwsICdwYWRkaW5nLXRvcCcpIHx8IDAsIDEwKSAtIHBhcnNlSW50KGVsZW1lbnRTdHlsZShlbCwgJ3BhZGRpbmctYm90dG9tJykgfHwgMCwgMTApO1xuICBpZiAoTnVtYmVyLmlzTmFOKHdpZHRoKSkgd2lkdGggPSAwO1xuICBpZiAoTnVtYmVyLmlzTmFOKGhlaWdodCkpIGhlaWdodCA9IDA7XG4gIE9iamVjdC5hc3NpZ24oc3dpcGVyLCB7XG4gICAgd2lkdGgsXG4gICAgaGVpZ2h0LFxuICAgIHNpemU6IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHdpZHRoIDogaGVpZ2h0XG4gIH0pO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVTbGlkZXMoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGZ1bmN0aW9uIGdldERpcmVjdGlvblByb3BlcnR5VmFsdWUobm9kZSwgbGFiZWwpIHtcbiAgICByZXR1cm4gcGFyc2VGbG9hdChub2RlLmdldFByb3BlcnR5VmFsdWUoc3dpcGVyLmdldERpcmVjdGlvbkxhYmVsKGxhYmVsKSkgfHwgMCk7XG4gIH1cbiAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcbiAgY29uc3Qge1xuICAgIHdyYXBwZXJFbCxcbiAgICBzbGlkZXNFbCxcbiAgICBzaXplOiBzd2lwZXJTaXplLFxuICAgIHJ0bFRyYW5zbGF0ZTogcnRsLFxuICAgIHdyb25nUlRMXG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IGlzVmlydHVhbCA9IHN3aXBlci52aXJ0dWFsICYmIHBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG4gIGNvbnN0IHByZXZpb3VzU2xpZGVzTGVuZ3RoID0gaXNWaXJ0dWFsID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCA6IHN3aXBlci5zbGlkZXMubGVuZ3RoO1xuICBjb25zdCBzbGlkZXMgPSBlbGVtZW50Q2hpbGRyZW4oc2xpZGVzRWwsIGAuJHtzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKTtcbiAgY29uc3Qgc2xpZGVzTGVuZ3RoID0gaXNWaXJ0dWFsID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCA6IHNsaWRlcy5sZW5ndGg7XG4gIGxldCBzbmFwR3JpZCA9IFtdO1xuICBjb25zdCBzbGlkZXNHcmlkID0gW107XG4gIGNvbnN0IHNsaWRlc1NpemVzR3JpZCA9IFtdO1xuICBsZXQgb2Zmc2V0QmVmb3JlID0gcGFyYW1zLnNsaWRlc09mZnNldEJlZm9yZTtcbiAgaWYgKHR5cGVvZiBvZmZzZXRCZWZvcmUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBvZmZzZXRCZWZvcmUgPSBwYXJhbXMuc2xpZGVzT2Zmc2V0QmVmb3JlLmNhbGwoc3dpcGVyKTtcbiAgfVxuICBsZXQgb2Zmc2V0QWZ0ZXIgPSBwYXJhbXMuc2xpZGVzT2Zmc2V0QWZ0ZXI7XG4gIGlmICh0eXBlb2Ygb2Zmc2V0QWZ0ZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICBvZmZzZXRBZnRlciA9IHBhcmFtcy5zbGlkZXNPZmZzZXRBZnRlci5jYWxsKHN3aXBlcik7XG4gIH1cbiAgY29uc3QgcHJldmlvdXNTbmFwR3JpZExlbmd0aCA9IHN3aXBlci5zbmFwR3JpZC5sZW5ndGg7XG4gIGNvbnN0IHByZXZpb3VzU2xpZGVzR3JpZExlbmd0aCA9IHN3aXBlci5zbGlkZXNHcmlkLmxlbmd0aDtcbiAgbGV0IHNwYWNlQmV0d2VlbiA9IHBhcmFtcy5zcGFjZUJldHdlZW47XG4gIGxldCBzbGlkZVBvc2l0aW9uID0gLW9mZnNldEJlZm9yZTtcbiAgbGV0IHByZXZTbGlkZVNpemUgPSAwO1xuICBsZXQgaW5kZXggPSAwO1xuICBpZiAodHlwZW9mIHN3aXBlclNpemUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICh0eXBlb2Ygc3BhY2VCZXR3ZWVuID09PSAnc3RyaW5nJyAmJiBzcGFjZUJldHdlZW4uaW5kZXhPZignJScpID49IDApIHtcbiAgICBzcGFjZUJldHdlZW4gPSBwYXJzZUZsb2F0KHNwYWNlQmV0d2Vlbi5yZXBsYWNlKCclJywgJycpKSAvIDEwMCAqIHN3aXBlclNpemU7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHNwYWNlQmV0d2VlbiA9PT0gJ3N0cmluZycpIHtcbiAgICBzcGFjZUJldHdlZW4gPSBwYXJzZUZsb2F0KHNwYWNlQmV0d2Vlbik7XG4gIH1cbiAgc3dpcGVyLnZpcnR1YWxTaXplID0gLXNwYWNlQmV0d2VlbjtcblxuICAvLyByZXNldCBtYXJnaW5zXG4gIHNsaWRlcy5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgIGlmIChydGwpIHtcbiAgICAgIHNsaWRlRWwuc3R5bGUubWFyZ2luTGVmdCA9ICcnO1xuICAgIH0gZWxzZSB7XG4gICAgICBzbGlkZUVsLnN0eWxlLm1hcmdpblJpZ2h0ID0gJyc7XG4gICAgfVxuICAgIHNsaWRlRWwuc3R5bGUubWFyZ2luQm90dG9tID0gJyc7XG4gICAgc2xpZGVFbC5zdHlsZS5tYXJnaW5Ub3AgPSAnJztcbiAgfSk7XG5cbiAgLy8gcmVzZXQgY3NzTW9kZSBvZmZzZXRzXG4gIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMgJiYgcGFyYW1zLmNzc01vZGUpIHtcbiAgICBzZXRDU1NQcm9wZXJ0eSh3cmFwcGVyRWwsICctLXN3aXBlci1jZW50ZXJlZC1vZmZzZXQtYmVmb3JlJywgJycpO1xuICAgIHNldENTU1Byb3BlcnR5KHdyYXBwZXJFbCwgJy0tc3dpcGVyLWNlbnRlcmVkLW9mZnNldC1hZnRlcicsICcnKTtcbiAgfVxuICBjb25zdCBncmlkRW5hYmxlZCA9IHBhcmFtcy5ncmlkICYmIHBhcmFtcy5ncmlkLnJvd3MgPiAxICYmIHN3aXBlci5ncmlkO1xuICBpZiAoZ3JpZEVuYWJsZWQpIHtcbiAgICBzd2lwZXIuZ3JpZC5pbml0U2xpZGVzKHNsaWRlcyk7XG4gIH0gZWxzZSBpZiAoc3dpcGVyLmdyaWQpIHtcbiAgICBzd2lwZXIuZ3JpZC51bnNldFNsaWRlcygpO1xuICB9XG5cbiAgLy8gQ2FsYyBzbGlkZXNcbiAgbGV0IHNsaWRlU2l6ZTtcbiAgY29uc3Qgc2hvdWxkUmVzZXRTbGlkZVNpemUgPSBwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nICYmIHBhcmFtcy5icmVha3BvaW50cyAmJiBPYmplY3Qua2V5cyhwYXJhbXMuYnJlYWtwb2ludHMpLmZpbHRlcihrZXkgPT4ge1xuICAgIHJldHVybiB0eXBlb2YgcGFyYW1zLmJyZWFrcG9pbnRzW2tleV0uc2xpZGVzUGVyVmlldyAhPT0gJ3VuZGVmaW5lZCc7XG4gIH0pLmxlbmd0aCA+IDA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzTGVuZ3RoOyBpICs9IDEpIHtcbiAgICBzbGlkZVNpemUgPSAwO1xuICAgIGxldCBzbGlkZTtcbiAgICBpZiAoc2xpZGVzW2ldKSBzbGlkZSA9IHNsaWRlc1tpXTtcbiAgICBpZiAoZ3JpZEVuYWJsZWQpIHtcbiAgICAgIHN3aXBlci5ncmlkLnVwZGF0ZVNsaWRlKGksIHNsaWRlLCBzbGlkZXMpO1xuICAgIH1cbiAgICBpZiAoc2xpZGVzW2ldICYmIGVsZW1lbnRTdHlsZShzbGlkZSwgJ2Rpc3BsYXknKSA9PT0gJ25vbmUnKSBjb250aW51ZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gICAgaWYgKHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycpIHtcbiAgICAgIGlmIChzaG91bGRSZXNldFNsaWRlU2l6ZSkge1xuICAgICAgICBzbGlkZXNbaV0uc3R5bGVbc3dpcGVyLmdldERpcmVjdGlvbkxhYmVsKCd3aWR0aCcpXSA9IGBgO1xuICAgICAgfVxuICAgICAgY29uc3Qgc2xpZGVTdHlsZXMgPSBnZXRDb21wdXRlZFN0eWxlKHNsaWRlKTtcbiAgICAgIGNvbnN0IGN1cnJlbnRUcmFuc2Zvcm0gPSBzbGlkZS5zdHlsZS50cmFuc2Zvcm07XG4gICAgICBjb25zdCBjdXJyZW50V2ViS2l0VHJhbnNmb3JtID0gc2xpZGUuc3R5bGUud2Via2l0VHJhbnNmb3JtO1xuICAgICAgaWYgKGN1cnJlbnRUcmFuc2Zvcm0pIHtcbiAgICAgICAgc2xpZGUuc3R5bGUudHJhbnNmb3JtID0gJ25vbmUnO1xuICAgICAgfVxuICAgICAgaWYgKGN1cnJlbnRXZWJLaXRUcmFuc2Zvcm0pIHtcbiAgICAgICAgc2xpZGUuc3R5bGUud2Via2l0VHJhbnNmb3JtID0gJ25vbmUnO1xuICAgICAgfVxuICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHtcbiAgICAgICAgc2xpZGVTaXplID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gZWxlbWVudE91dGVyU2l6ZShzbGlkZSwgJ3dpZHRoJywgdHJ1ZSkgOiBlbGVtZW50T3V0ZXJTaXplKHNsaWRlLCAnaGVpZ2h0JywgdHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgY29uc3Qgd2lkdGggPSBnZXREaXJlY3Rpb25Qcm9wZXJ0eVZhbHVlKHNsaWRlU3R5bGVzLCAnd2lkdGgnKTtcbiAgICAgICAgY29uc3QgcGFkZGluZ0xlZnQgPSBnZXREaXJlY3Rpb25Qcm9wZXJ0eVZhbHVlKHNsaWRlU3R5bGVzLCAncGFkZGluZy1sZWZ0Jyk7XG4gICAgICAgIGNvbnN0IHBhZGRpbmdSaWdodCA9IGdldERpcmVjdGlvblByb3BlcnR5VmFsdWUoc2xpZGVTdHlsZXMsICdwYWRkaW5nLXJpZ2h0Jyk7XG4gICAgICAgIGNvbnN0IG1hcmdpbkxlZnQgPSBnZXREaXJlY3Rpb25Qcm9wZXJ0eVZhbHVlKHNsaWRlU3R5bGVzLCAnbWFyZ2luLWxlZnQnKTtcbiAgICAgICAgY29uc3QgbWFyZ2luUmlnaHQgPSBnZXREaXJlY3Rpb25Qcm9wZXJ0eVZhbHVlKHNsaWRlU3R5bGVzLCAnbWFyZ2luLXJpZ2h0Jyk7XG4gICAgICAgIGNvbnN0IGJveFNpemluZyA9IHNsaWRlU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ2JveC1zaXppbmcnKTtcbiAgICAgICAgaWYgKGJveFNpemluZyAmJiBib3hTaXppbmcgPT09ICdib3JkZXItYm94Jykge1xuICAgICAgICAgIHNsaWRlU2l6ZSA9IHdpZHRoICsgbWFyZ2luTGVmdCArIG1hcmdpblJpZ2h0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIGNsaWVudFdpZHRoLFxuICAgICAgICAgICAgb2Zmc2V0V2lkdGhcbiAgICAgICAgICB9ID0gc2xpZGU7XG4gICAgICAgICAgc2xpZGVTaXplID0gd2lkdGggKyBwYWRkaW5nTGVmdCArIHBhZGRpbmdSaWdodCArIG1hcmdpbkxlZnQgKyBtYXJnaW5SaWdodCArIChvZmZzZXRXaWR0aCAtIGNsaWVudFdpZHRoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGN1cnJlbnRUcmFuc2Zvcm0pIHtcbiAgICAgICAgc2xpZGUuc3R5bGUudHJhbnNmb3JtID0gY3VycmVudFRyYW5zZm9ybTtcbiAgICAgIH1cbiAgICAgIGlmIChjdXJyZW50V2ViS2l0VHJhbnNmb3JtKSB7XG4gICAgICAgIHNsaWRlLnN0eWxlLndlYmtpdFRyYW5zZm9ybSA9IGN1cnJlbnRXZWJLaXRUcmFuc2Zvcm07XG4gICAgICB9XG4gICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykgc2xpZGVTaXplID0gTWF0aC5mbG9vcihzbGlkZVNpemUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzbGlkZVNpemUgPSAoc3dpcGVyU2l6ZSAtIChwYXJhbXMuc2xpZGVzUGVyVmlldyAtIDEpICogc3BhY2VCZXR3ZWVuKSAvIHBhcmFtcy5zbGlkZXNQZXJWaWV3O1xuICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHNsaWRlU2l6ZSA9IE1hdGguZmxvb3Ioc2xpZGVTaXplKTtcbiAgICAgIGlmIChzbGlkZXNbaV0pIHtcbiAgICAgICAgc2xpZGVzW2ldLnN0eWxlW3N3aXBlci5nZXREaXJlY3Rpb25MYWJlbCgnd2lkdGgnKV0gPSBgJHtzbGlkZVNpemV9cHhgO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoc2xpZGVzW2ldKSB7XG4gICAgICBzbGlkZXNbaV0uc3dpcGVyU2xpZGVTaXplID0gc2xpZGVTaXplO1xuICAgIH1cbiAgICBzbGlkZXNTaXplc0dyaWQucHVzaChzbGlkZVNpemUpO1xuICAgIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgIHNsaWRlUG9zaXRpb24gPSBzbGlkZVBvc2l0aW9uICsgc2xpZGVTaXplIC8gMiArIHByZXZTbGlkZVNpemUgLyAyICsgc3BhY2VCZXR3ZWVuO1xuICAgICAgaWYgKHByZXZTbGlkZVNpemUgPT09IDAgJiYgaSAhPT0gMCkgc2xpZGVQb3NpdGlvbiA9IHNsaWRlUG9zaXRpb24gLSBzd2lwZXJTaXplIC8gMiAtIHNwYWNlQmV0d2VlbjtcbiAgICAgIGlmIChpID09PSAwKSBzbGlkZVBvc2l0aW9uID0gc2xpZGVQb3NpdGlvbiAtIHN3aXBlclNpemUgLyAyIC0gc3BhY2VCZXR3ZWVuO1xuICAgICAgaWYgKE1hdGguYWJzKHNsaWRlUG9zaXRpb24pIDwgMSAvIDEwMDApIHNsaWRlUG9zaXRpb24gPSAwO1xuICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHNsaWRlUG9zaXRpb24gPSBNYXRoLmZsb29yKHNsaWRlUG9zaXRpb24pO1xuICAgICAgaWYgKGluZGV4ICUgcGFyYW1zLnNsaWRlc1Blckdyb3VwID09PSAwKSBzbmFwR3JpZC5wdXNoKHNsaWRlUG9zaXRpb24pO1xuICAgICAgc2xpZGVzR3JpZC5wdXNoKHNsaWRlUG9zaXRpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykgc2xpZGVQb3NpdGlvbiA9IE1hdGguZmxvb3Ioc2xpZGVQb3NpdGlvbik7XG4gICAgICBpZiAoKGluZGV4IC0gTWF0aC5taW4oc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAsIGluZGV4KSkgJSBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwID09PSAwKSBzbmFwR3JpZC5wdXNoKHNsaWRlUG9zaXRpb24pO1xuICAgICAgc2xpZGVzR3JpZC5wdXNoKHNsaWRlUG9zaXRpb24pO1xuICAgICAgc2xpZGVQb3NpdGlvbiA9IHNsaWRlUG9zaXRpb24gKyBzbGlkZVNpemUgKyBzcGFjZUJldHdlZW47XG4gICAgfVxuICAgIHN3aXBlci52aXJ0dWFsU2l6ZSArPSBzbGlkZVNpemUgKyBzcGFjZUJldHdlZW47XG4gICAgcHJldlNsaWRlU2l6ZSA9IHNsaWRlU2l6ZTtcbiAgICBpbmRleCArPSAxO1xuICB9XG4gIHN3aXBlci52aXJ0dWFsU2l6ZSA9IE1hdGgubWF4KHN3aXBlci52aXJ0dWFsU2l6ZSwgc3dpcGVyU2l6ZSkgKyBvZmZzZXRBZnRlcjtcbiAgaWYgKHJ0bCAmJiB3cm9uZ1JUTCAmJiAocGFyYW1zLmVmZmVjdCA9PT0gJ3NsaWRlJyB8fCBwYXJhbXMuZWZmZWN0ID09PSAnY292ZXJmbG93JykpIHtcbiAgICB3cmFwcGVyRWwuc3R5bGUud2lkdGggPSBgJHtzd2lwZXIudmlydHVhbFNpemUgKyBzcGFjZUJldHdlZW59cHhgO1xuICB9XG4gIGlmIChwYXJhbXMuc2V0V3JhcHBlclNpemUpIHtcbiAgICB3cmFwcGVyRWwuc3R5bGVbc3dpcGVyLmdldERpcmVjdGlvbkxhYmVsKCd3aWR0aCcpXSA9IGAke3N3aXBlci52aXJ0dWFsU2l6ZSArIHNwYWNlQmV0d2Vlbn1weGA7XG4gIH1cbiAgaWYgKGdyaWRFbmFibGVkKSB7XG4gICAgc3dpcGVyLmdyaWQudXBkYXRlV3JhcHBlclNpemUoc2xpZGVTaXplLCBzbmFwR3JpZCk7XG4gIH1cblxuICAvLyBSZW1vdmUgbGFzdCBncmlkIGVsZW1lbnRzIGRlcGVuZGluZyBvbiB3aWR0aFxuICBpZiAoIXBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgIGNvbnN0IG5ld1NsaWRlc0dyaWQgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNuYXBHcmlkLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBsZXQgc2xpZGVzR3JpZEl0ZW0gPSBzbmFwR3JpZFtpXTtcbiAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSBzbGlkZXNHcmlkSXRlbSA9IE1hdGguZmxvb3Ioc2xpZGVzR3JpZEl0ZW0pO1xuICAgICAgaWYgKHNuYXBHcmlkW2ldIDw9IHN3aXBlci52aXJ0dWFsU2l6ZSAtIHN3aXBlclNpemUpIHtcbiAgICAgICAgbmV3U2xpZGVzR3JpZC5wdXNoKHNsaWRlc0dyaWRJdGVtKTtcbiAgICAgIH1cbiAgICB9XG4gICAgc25hcEdyaWQgPSBuZXdTbGlkZXNHcmlkO1xuICAgIGlmIChNYXRoLmZsb29yKHN3aXBlci52aXJ0dWFsU2l6ZSAtIHN3aXBlclNpemUpIC0gTWF0aC5mbG9vcihzbmFwR3JpZFtzbmFwR3JpZC5sZW5ndGggLSAxXSkgPiAxKSB7XG4gICAgICBzbmFwR3JpZC5wdXNoKHN3aXBlci52aXJ0dWFsU2l6ZSAtIHN3aXBlclNpemUpO1xuICAgIH1cbiAgfVxuICBpZiAoaXNWaXJ0dWFsICYmIHBhcmFtcy5sb29wKSB7XG4gICAgY29uc3Qgc2l6ZSA9IHNsaWRlc1NpemVzR3JpZFswXSArIHNwYWNlQmV0d2VlbjtcbiAgICBpZiAocGFyYW1zLnNsaWRlc1Blckdyb3VwID4gMSkge1xuICAgICAgY29uc3QgZ3JvdXBzID0gTWF0aC5jZWlsKChzd2lwZXIudmlydHVhbC5zbGlkZXNCZWZvcmUgKyBzd2lwZXIudmlydHVhbC5zbGlkZXNBZnRlcikgLyBwYXJhbXMuc2xpZGVzUGVyR3JvdXApO1xuICAgICAgY29uc3QgZ3JvdXBTaXplID0gc2l6ZSAqIHBhcmFtcy5zbGlkZXNQZXJHcm91cDtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZ3JvdXBzOyBpICs9IDEpIHtcbiAgICAgICAgc25hcEdyaWQucHVzaChzbmFwR3JpZFtzbmFwR3JpZC5sZW5ndGggLSAxXSArIGdyb3VwU2l6ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3dpcGVyLnZpcnR1YWwuc2xpZGVzQmVmb3JlICsgc3dpcGVyLnZpcnR1YWwuc2xpZGVzQWZ0ZXI7IGkgKz0gMSkge1xuICAgICAgaWYgKHBhcmFtcy5zbGlkZXNQZXJHcm91cCA9PT0gMSkge1xuICAgICAgICBzbmFwR3JpZC5wdXNoKHNuYXBHcmlkW3NuYXBHcmlkLmxlbmd0aCAtIDFdICsgc2l6ZSk7XG4gICAgICB9XG4gICAgICBzbGlkZXNHcmlkLnB1c2goc2xpZGVzR3JpZFtzbGlkZXNHcmlkLmxlbmd0aCAtIDFdICsgc2l6ZSk7XG4gICAgICBzd2lwZXIudmlydHVhbFNpemUgKz0gc2l6ZTtcbiAgICB9XG4gIH1cbiAgaWYgKHNuYXBHcmlkLmxlbmd0aCA9PT0gMCkgc25hcEdyaWQgPSBbMF07XG4gIGlmIChzcGFjZUJldHdlZW4gIT09IDApIHtcbiAgICBjb25zdCBrZXkgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgJiYgcnRsID8gJ21hcmdpbkxlZnQnIDogc3dpcGVyLmdldERpcmVjdGlvbkxhYmVsKCdtYXJnaW5SaWdodCcpO1xuICAgIHNsaWRlcy5maWx0ZXIoKF8sIHNsaWRlSW5kZXgpID0+IHtcbiAgICAgIGlmICghcGFyYW1zLmNzc01vZGUgfHwgcGFyYW1zLmxvb3ApIHJldHVybiB0cnVlO1xuICAgICAgaWYgKHNsaWRlSW5kZXggPT09IHNsaWRlcy5sZW5ndGggLSAxKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pLmZvckVhY2goc2xpZGVFbCA9PiB7XG4gICAgICBzbGlkZUVsLnN0eWxlW2tleV0gPSBgJHtzcGFjZUJldHdlZW59cHhgO1xuICAgIH0pO1xuICB9XG4gIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMgJiYgcGFyYW1zLmNlbnRlcmVkU2xpZGVzQm91bmRzKSB7XG4gICAgbGV0IGFsbFNsaWRlc1NpemUgPSAwO1xuICAgIHNsaWRlc1NpemVzR3JpZC5mb3JFYWNoKHNsaWRlU2l6ZVZhbHVlID0+IHtcbiAgICAgIGFsbFNsaWRlc1NpemUgKz0gc2xpZGVTaXplVmFsdWUgKyAoc3BhY2VCZXR3ZWVuIHx8IDApO1xuICAgIH0pO1xuICAgIGFsbFNsaWRlc1NpemUgLT0gc3BhY2VCZXR3ZWVuO1xuICAgIGNvbnN0IG1heFNuYXAgPSBhbGxTbGlkZXNTaXplIC0gc3dpcGVyU2l6ZTtcbiAgICBzbmFwR3JpZCA9IHNuYXBHcmlkLm1hcChzbmFwID0+IHtcbiAgICAgIGlmIChzbmFwIDw9IDApIHJldHVybiAtb2Zmc2V0QmVmb3JlO1xuICAgICAgaWYgKHNuYXAgPiBtYXhTbmFwKSByZXR1cm4gbWF4U25hcCArIG9mZnNldEFmdGVyO1xuICAgICAgcmV0dXJuIHNuYXA7XG4gICAgfSk7XG4gIH1cbiAgaWYgKHBhcmFtcy5jZW50ZXJJbnN1ZmZpY2llbnRTbGlkZXMpIHtcbiAgICBsZXQgYWxsU2xpZGVzU2l6ZSA9IDA7XG4gICAgc2xpZGVzU2l6ZXNHcmlkLmZvckVhY2goc2xpZGVTaXplVmFsdWUgPT4ge1xuICAgICAgYWxsU2xpZGVzU2l6ZSArPSBzbGlkZVNpemVWYWx1ZSArIChzcGFjZUJldHdlZW4gfHwgMCk7XG4gICAgfSk7XG4gICAgYWxsU2xpZGVzU2l6ZSAtPSBzcGFjZUJldHdlZW47XG4gICAgY29uc3Qgb2Zmc2V0U2l6ZSA9IChwYXJhbXMuc2xpZGVzT2Zmc2V0QmVmb3JlIHx8IDApICsgKHBhcmFtcy5zbGlkZXNPZmZzZXRBZnRlciB8fCAwKTtcbiAgICBpZiAoYWxsU2xpZGVzU2l6ZSArIG9mZnNldFNpemUgPCBzd2lwZXJTaXplKSB7XG4gICAgICBjb25zdCBhbGxTbGlkZXNPZmZzZXQgPSAoc3dpcGVyU2l6ZSAtIGFsbFNsaWRlc1NpemUgLSBvZmZzZXRTaXplKSAvIDI7XG4gICAgICBzbmFwR3JpZC5mb3JFYWNoKChzbmFwLCBzbmFwSW5kZXgpID0+IHtcbiAgICAgICAgc25hcEdyaWRbc25hcEluZGV4XSA9IHNuYXAgLSBhbGxTbGlkZXNPZmZzZXQ7XG4gICAgICB9KTtcbiAgICAgIHNsaWRlc0dyaWQuZm9yRWFjaCgoc25hcCwgc25hcEluZGV4KSA9PiB7XG4gICAgICAgIHNsaWRlc0dyaWRbc25hcEluZGV4XSA9IHNuYXAgKyBhbGxTbGlkZXNPZmZzZXQ7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgT2JqZWN0LmFzc2lnbihzd2lwZXIsIHtcbiAgICBzbGlkZXMsXG4gICAgc25hcEdyaWQsXG4gICAgc2xpZGVzR3JpZCxcbiAgICBzbGlkZXNTaXplc0dyaWRcbiAgfSk7XG4gIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMgJiYgcGFyYW1zLmNzc01vZGUgJiYgIXBhcmFtcy5jZW50ZXJlZFNsaWRlc0JvdW5kcykge1xuICAgIHNldENTU1Byb3BlcnR5KHdyYXBwZXJFbCwgJy0tc3dpcGVyLWNlbnRlcmVkLW9mZnNldC1iZWZvcmUnLCBgJHstc25hcEdyaWRbMF19cHhgKTtcbiAgICBzZXRDU1NQcm9wZXJ0eSh3cmFwcGVyRWwsICctLXN3aXBlci1jZW50ZXJlZC1vZmZzZXQtYWZ0ZXInLCBgJHtzd2lwZXIuc2l6ZSAvIDIgLSBzbGlkZXNTaXplc0dyaWRbc2xpZGVzU2l6ZXNHcmlkLmxlbmd0aCAtIDFdIC8gMn1weGApO1xuICAgIGNvbnN0IGFkZFRvU25hcEdyaWQgPSAtc3dpcGVyLnNuYXBHcmlkWzBdO1xuICAgIGNvbnN0IGFkZFRvU2xpZGVzR3JpZCA9IC1zd2lwZXIuc2xpZGVzR3JpZFswXTtcbiAgICBzd2lwZXIuc25hcEdyaWQgPSBzd2lwZXIuc25hcEdyaWQubWFwKHYgPT4gdiArIGFkZFRvU25hcEdyaWQpO1xuICAgIHN3aXBlci5zbGlkZXNHcmlkID0gc3dpcGVyLnNsaWRlc0dyaWQubWFwKHYgPT4gdiArIGFkZFRvU2xpZGVzR3JpZCk7XG4gIH1cbiAgaWYgKHNsaWRlc0xlbmd0aCAhPT0gcHJldmlvdXNTbGlkZXNMZW5ndGgpIHtcbiAgICBzd2lwZXIuZW1pdCgnc2xpZGVzTGVuZ3RoQ2hhbmdlJyk7XG4gIH1cbiAgaWYgKHNuYXBHcmlkLmxlbmd0aCAhPT0gcHJldmlvdXNTbmFwR3JpZExlbmd0aCkge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cpIHN3aXBlci5jaGVja092ZXJmbG93KCk7XG4gICAgc3dpcGVyLmVtaXQoJ3NuYXBHcmlkTGVuZ3RoQ2hhbmdlJyk7XG4gIH1cbiAgaWYgKHNsaWRlc0dyaWQubGVuZ3RoICE9PSBwcmV2aW91c1NsaWRlc0dyaWRMZW5ndGgpIHtcbiAgICBzd2lwZXIuZW1pdCgnc2xpZGVzR3JpZExlbmd0aENoYW5nZScpO1xuICB9XG4gIGlmIChwYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcykge1xuICAgIHN3aXBlci51cGRhdGVTbGlkZXNPZmZzZXQoKTtcbiAgfVxuICBzd2lwZXIuZW1pdCgnc2xpZGVzVXBkYXRlZCcpO1xuICBpZiAoIWlzVmlydHVhbCAmJiAhcGFyYW1zLmNzc01vZGUgJiYgKHBhcmFtcy5lZmZlY3QgPT09ICdzbGlkZScgfHwgcGFyYW1zLmVmZmVjdCA9PT0gJ2ZhZGUnKSkge1xuICAgIGNvbnN0IGJhY2tGYWNlSGlkZGVuQ2xhc3MgPSBgJHtwYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc31iYWNrZmFjZS1oaWRkZW5gO1xuICAgIGNvbnN0IGhhc0NsYXNzQmFja2ZhY2VDbGFzc0FkZGVkID0gc3dpcGVyLmVsLmNsYXNzTGlzdC5jb250YWlucyhiYWNrRmFjZUhpZGRlbkNsYXNzKTtcbiAgICBpZiAoc2xpZGVzTGVuZ3RoIDw9IHBhcmFtcy5tYXhCYWNrZmFjZUhpZGRlblNsaWRlcykge1xuICAgICAgaWYgKCFoYXNDbGFzc0JhY2tmYWNlQ2xhc3NBZGRlZCkgc3dpcGVyLmVsLmNsYXNzTGlzdC5hZGQoYmFja0ZhY2VIaWRkZW5DbGFzcyk7XG4gICAgfSBlbHNlIGlmIChoYXNDbGFzc0JhY2tmYWNlQ2xhc3NBZGRlZCkge1xuICAgICAgc3dpcGVyLmVsLmNsYXNzTGlzdC5yZW1vdmUoYmFja0ZhY2VIaWRkZW5DbGFzcyk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUF1dG9IZWlnaHQoc3BlZWQpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgYWN0aXZlU2xpZGVzID0gW107XG4gIGNvbnN0IGlzVmlydHVhbCA9IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkO1xuICBsZXQgbmV3SGVpZ2h0ID0gMDtcbiAgbGV0IGk7XG4gIGlmICh0eXBlb2Ygc3BlZWQgPT09ICdudW1iZXInKSB7XG4gICAgc3dpcGVyLnNldFRyYW5zaXRpb24oc3BlZWQpO1xuICB9IGVsc2UgaWYgKHNwZWVkID09PSB0cnVlKSB7XG4gICAgc3dpcGVyLnNldFRyYW5zaXRpb24oc3dpcGVyLnBhcmFtcy5zcGVlZCk7XG4gIH1cbiAgY29uc3QgZ2V0U2xpZGVCeUluZGV4ID0gaW5kZXggPT4ge1xuICAgIGlmIChpc1ZpcnR1YWwpIHtcbiAgICAgIHJldHVybiBzd2lwZXIuc2xpZGVzW3N3aXBlci5nZXRTbGlkZUluZGV4QnlEYXRhKGluZGV4KV07XG4gICAgfVxuICAgIHJldHVybiBzd2lwZXIuc2xpZGVzW2luZGV4XTtcbiAgfTtcbiAgLy8gRmluZCBzbGlkZXMgY3VycmVudGx5IGluIHZpZXdcbiAgaWYgKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyAhPT0gJ2F1dG8nICYmIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyA+IDEpIHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgKHN3aXBlci52aXNpYmxlU2xpZGVzIHx8IFtdKS5mb3JFYWNoKHNsaWRlID0+IHtcbiAgICAgICAgYWN0aXZlU2xpZGVzLnB1c2goc2xpZGUpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBNYXRoLmNlaWwoc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3KTsgaSArPSAxKSB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4ICsgaTtcbiAgICAgICAgaWYgKGluZGV4ID4gc3dpcGVyLnNsaWRlcy5sZW5ndGggJiYgIWlzVmlydHVhbCkgYnJlYWs7XG4gICAgICAgIGFjdGl2ZVNsaWRlcy5wdXNoKGdldFNsaWRlQnlJbmRleChpbmRleCkpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBhY3RpdmVTbGlkZXMucHVzaChnZXRTbGlkZUJ5SW5kZXgoc3dpcGVyLmFjdGl2ZUluZGV4KSk7XG4gIH1cblxuICAvLyBGaW5kIG5ldyBoZWlnaHQgZnJvbSBoaWdoZXN0IHNsaWRlIGluIHZpZXdcbiAgZm9yIChpID0gMDsgaSA8IGFjdGl2ZVNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmICh0eXBlb2YgYWN0aXZlU2xpZGVzW2ldICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc3QgaGVpZ2h0ID0gYWN0aXZlU2xpZGVzW2ldLm9mZnNldEhlaWdodDtcbiAgICAgIG5ld0hlaWdodCA9IGhlaWdodCA+IG5ld0hlaWdodCA/IGhlaWdodCA6IG5ld0hlaWdodDtcbiAgICB9XG4gIH1cblxuICAvLyBVcGRhdGUgSGVpZ2h0XG4gIGlmIChuZXdIZWlnaHQgfHwgbmV3SGVpZ2h0ID09PSAwKSBzd2lwZXIud3JhcHBlckVsLnN0eWxlLmhlaWdodCA9IGAke25ld0hlaWdodH1weGA7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZVNsaWRlc09mZnNldCgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qgc2xpZGVzID0gc3dpcGVyLnNsaWRlcztcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gIGNvbnN0IG1pbnVzT2Zmc2V0ID0gc3dpcGVyLmlzRWxlbWVudCA/IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHN3aXBlci53cmFwcGVyRWwub2Zmc2V0TGVmdCA6IHN3aXBlci53cmFwcGVyRWwub2Zmc2V0VG9wIDogMDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBzbGlkZXNbaV0uc3dpcGVyU2xpZGVPZmZzZXQgPSAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gc2xpZGVzW2ldLm9mZnNldExlZnQgOiBzbGlkZXNbaV0ub2Zmc2V0VG9wKSAtIG1pbnVzT2Zmc2V0IC0gc3dpcGVyLmNzc092ZXJmbG93QWRqdXN0bWVudCgpO1xuICB9XG59XG5cbmNvbnN0IHRvZ2dsZVNsaWRlQ2xhc3NlcyQxID0gKHNsaWRlRWwsIGNvbmRpdGlvbiwgY2xhc3NOYW1lKSA9PiB7XG4gIGlmIChjb25kaXRpb24gJiYgIXNsaWRlRWwuY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzTmFtZSkpIHtcbiAgICBzbGlkZUVsLmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtcbiAgfSBlbHNlIGlmICghY29uZGl0aW9uICYmIHNsaWRlRWwuY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzTmFtZSkpIHtcbiAgICBzbGlkZUVsLmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTtcbiAgfVxufTtcbmZ1bmN0aW9uIHVwZGF0ZVNsaWRlc1Byb2dyZXNzKHRyYW5zbGF0ZSkge1xuICBpZiAodHJhbnNsYXRlID09PSB2b2lkIDApIHtcbiAgICB0cmFuc2xhdGUgPSB0aGlzICYmIHRoaXMudHJhbnNsYXRlIHx8IDA7XG4gIH1cbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcbiAgY29uc3Qge1xuICAgIHNsaWRlcyxcbiAgICBydGxUcmFuc2xhdGU6IHJ0bCxcbiAgICBzbmFwR3JpZFxuICB9ID0gc3dpcGVyO1xuICBpZiAoc2xpZGVzLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICBpZiAodHlwZW9mIHNsaWRlc1swXS5zd2lwZXJTbGlkZU9mZnNldCA9PT0gJ3VuZGVmaW5lZCcpIHN3aXBlci51cGRhdGVTbGlkZXNPZmZzZXQoKTtcbiAgbGV0IG9mZnNldENlbnRlciA9IC10cmFuc2xhdGU7XG4gIGlmIChydGwpIG9mZnNldENlbnRlciA9IHRyYW5zbGF0ZTtcbiAgc3dpcGVyLnZpc2libGVTbGlkZXNJbmRleGVzID0gW107XG4gIHN3aXBlci52aXNpYmxlU2xpZGVzID0gW107XG4gIGxldCBzcGFjZUJldHdlZW4gPSBwYXJhbXMuc3BhY2VCZXR3ZWVuO1xuICBpZiAodHlwZW9mIHNwYWNlQmV0d2VlbiA9PT0gJ3N0cmluZycgJiYgc3BhY2VCZXR3ZWVuLmluZGV4T2YoJyUnKSA+PSAwKSB7XG4gICAgc3BhY2VCZXR3ZWVuID0gcGFyc2VGbG9hdChzcGFjZUJldHdlZW4ucmVwbGFjZSgnJScsICcnKSkgLyAxMDAgKiBzd2lwZXIuc2l6ZTtcbiAgfSBlbHNlIGlmICh0eXBlb2Ygc3BhY2VCZXR3ZWVuID09PSAnc3RyaW5nJykge1xuICAgIHNwYWNlQmV0d2VlbiA9IHBhcnNlRmxvYXQoc3BhY2VCZXR3ZWVuKTtcbiAgfVxuICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGNvbnN0IHNsaWRlID0gc2xpZGVzW2ldO1xuICAgIGxldCBzbGlkZU9mZnNldCA9IHNsaWRlLnN3aXBlclNsaWRlT2Zmc2V0O1xuICAgIGlmIChwYXJhbXMuY3NzTW9kZSAmJiBwYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgIHNsaWRlT2Zmc2V0IC09IHNsaWRlc1swXS5zd2lwZXJTbGlkZU9mZnNldDtcbiAgICB9XG4gICAgY29uc3Qgc2xpZGVQcm9ncmVzcyA9IChvZmZzZXRDZW50ZXIgKyAocGFyYW1zLmNlbnRlcmVkU2xpZGVzID8gc3dpcGVyLm1pblRyYW5zbGF0ZSgpIDogMCkgLSBzbGlkZU9mZnNldCkgLyAoc2xpZGUuc3dpcGVyU2xpZGVTaXplICsgc3BhY2VCZXR3ZWVuKTtcbiAgICBjb25zdCBvcmlnaW5hbFNsaWRlUHJvZ3Jlc3MgPSAob2Zmc2V0Q2VudGVyIC0gc25hcEdyaWRbMF0gKyAocGFyYW1zLmNlbnRlcmVkU2xpZGVzID8gc3dpcGVyLm1pblRyYW5zbGF0ZSgpIDogMCkgLSBzbGlkZU9mZnNldCkgLyAoc2xpZGUuc3dpcGVyU2xpZGVTaXplICsgc3BhY2VCZXR3ZWVuKTtcbiAgICBjb25zdCBzbGlkZUJlZm9yZSA9IC0ob2Zmc2V0Q2VudGVyIC0gc2xpZGVPZmZzZXQpO1xuICAgIGNvbnN0IHNsaWRlQWZ0ZXIgPSBzbGlkZUJlZm9yZSArIHN3aXBlci5zbGlkZXNTaXplc0dyaWRbaV07XG4gICAgY29uc3QgaXNGdWxseVZpc2libGUgPSBzbGlkZUJlZm9yZSA+PSAwICYmIHNsaWRlQmVmb3JlIDw9IHN3aXBlci5zaXplIC0gc3dpcGVyLnNsaWRlc1NpemVzR3JpZFtpXTtcbiAgICBjb25zdCBpc1Zpc2libGUgPSBzbGlkZUJlZm9yZSA+PSAwICYmIHNsaWRlQmVmb3JlIDwgc3dpcGVyLnNpemUgLSAxIHx8IHNsaWRlQWZ0ZXIgPiAxICYmIHNsaWRlQWZ0ZXIgPD0gc3dpcGVyLnNpemUgfHwgc2xpZGVCZWZvcmUgPD0gMCAmJiBzbGlkZUFmdGVyID49IHN3aXBlci5zaXplO1xuICAgIGlmIChpc1Zpc2libGUpIHtcbiAgICAgIHN3aXBlci52aXNpYmxlU2xpZGVzLnB1c2goc2xpZGUpO1xuICAgICAgc3dpcGVyLnZpc2libGVTbGlkZXNJbmRleGVzLnB1c2goaSk7XG4gICAgfVxuICAgIHRvZ2dsZVNsaWRlQ2xhc3NlcyQxKHNsaWRlLCBpc1Zpc2libGUsIHBhcmFtcy5zbGlkZVZpc2libGVDbGFzcyk7XG4gICAgdG9nZ2xlU2xpZGVDbGFzc2VzJDEoc2xpZGUsIGlzRnVsbHlWaXNpYmxlLCBwYXJhbXMuc2xpZGVGdWxseVZpc2libGVDbGFzcyk7XG4gICAgc2xpZGUucHJvZ3Jlc3MgPSBydGwgPyAtc2xpZGVQcm9ncmVzcyA6IHNsaWRlUHJvZ3Jlc3M7XG4gICAgc2xpZGUub3JpZ2luYWxQcm9ncmVzcyA9IHJ0bCA/IC1vcmlnaW5hbFNsaWRlUHJvZ3Jlc3MgOiBvcmlnaW5hbFNsaWRlUHJvZ3Jlc3M7XG4gIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlUHJvZ3Jlc3ModHJhbnNsYXRlKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGlmICh0eXBlb2YgdHJhbnNsYXRlID09PSAndW5kZWZpbmVkJykge1xuICAgIGNvbnN0IG11bHRpcGxpZXIgPSBzd2lwZXIucnRsVHJhbnNsYXRlID8gLTEgOiAxO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgIHRyYW5zbGF0ZSA9IHN3aXBlciAmJiBzd2lwZXIudHJhbnNsYXRlICYmIHN3aXBlci50cmFuc2xhdGUgKiBtdWx0aXBsaWVyIHx8IDA7XG4gIH1cbiAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcbiAgY29uc3QgdHJhbnNsYXRlc0RpZmYgPSBzd2lwZXIubWF4VHJhbnNsYXRlKCkgLSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG4gIGxldCB7XG4gICAgcHJvZ3Jlc3MsXG4gICAgaXNCZWdpbm5pbmcsXG4gICAgaXNFbmQsXG4gICAgcHJvZ3Jlc3NMb29wXG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IHdhc0JlZ2lubmluZyA9IGlzQmVnaW5uaW5nO1xuICBjb25zdCB3YXNFbmQgPSBpc0VuZDtcbiAgaWYgKHRyYW5zbGF0ZXNEaWZmID09PSAwKSB7XG4gICAgcHJvZ3Jlc3MgPSAwO1xuICAgIGlzQmVnaW5uaW5nID0gdHJ1ZTtcbiAgICBpc0VuZCA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgcHJvZ3Jlc3MgPSAodHJhbnNsYXRlIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSAvIHRyYW5zbGF0ZXNEaWZmO1xuICAgIGNvbnN0IGlzQmVnaW5uaW5nUm91bmRlZCA9IE1hdGguYWJzKHRyYW5zbGF0ZSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKSkgPCAxO1xuICAgIGNvbnN0IGlzRW5kUm91bmRlZCA9IE1hdGguYWJzKHRyYW5zbGF0ZSAtIHN3aXBlci5tYXhUcmFuc2xhdGUoKSkgPCAxO1xuICAgIGlzQmVnaW5uaW5nID0gaXNCZWdpbm5pbmdSb3VuZGVkIHx8IHByb2dyZXNzIDw9IDA7XG4gICAgaXNFbmQgPSBpc0VuZFJvdW5kZWQgfHwgcHJvZ3Jlc3MgPj0gMTtcbiAgICBpZiAoaXNCZWdpbm5pbmdSb3VuZGVkKSBwcm9ncmVzcyA9IDA7XG4gICAgaWYgKGlzRW5kUm91bmRlZCkgcHJvZ3Jlc3MgPSAxO1xuICB9XG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIGNvbnN0IGZpcnN0U2xpZGVJbmRleCA9IHN3aXBlci5nZXRTbGlkZUluZGV4QnlEYXRhKDApO1xuICAgIGNvbnN0IGxhc3RTbGlkZUluZGV4ID0gc3dpcGVyLmdldFNsaWRlSW5kZXhCeURhdGEoc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxKTtcbiAgICBjb25zdCBmaXJzdFNsaWRlVHJhbnNsYXRlID0gc3dpcGVyLnNsaWRlc0dyaWRbZmlyc3RTbGlkZUluZGV4XTtcbiAgICBjb25zdCBsYXN0U2xpZGVUcmFuc2xhdGUgPSBzd2lwZXIuc2xpZGVzR3JpZFtsYXN0U2xpZGVJbmRleF07XG4gICAgY29uc3QgdHJhbnNsYXRlTWF4ID0gc3dpcGVyLnNsaWRlc0dyaWRbc3dpcGVyLnNsaWRlc0dyaWQubGVuZ3RoIC0gMV07XG4gICAgY29uc3QgdHJhbnNsYXRlQWJzID0gTWF0aC5hYnModHJhbnNsYXRlKTtcbiAgICBpZiAodHJhbnNsYXRlQWJzID49IGZpcnN0U2xpZGVUcmFuc2xhdGUpIHtcbiAgICAgIHByb2dyZXNzTG9vcCA9ICh0cmFuc2xhdGVBYnMgLSBmaXJzdFNsaWRlVHJhbnNsYXRlKSAvIHRyYW5zbGF0ZU1heDtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvZ3Jlc3NMb29wID0gKHRyYW5zbGF0ZUFicyArIHRyYW5zbGF0ZU1heCAtIGxhc3RTbGlkZVRyYW5zbGF0ZSkgLyB0cmFuc2xhdGVNYXg7XG4gICAgfVxuICAgIGlmIChwcm9ncmVzc0xvb3AgPiAxKSBwcm9ncmVzc0xvb3AgLT0gMTtcbiAgfVxuICBPYmplY3QuYXNzaWduKHN3aXBlciwge1xuICAgIHByb2dyZXNzLFxuICAgIHByb2dyZXNzTG9vcCxcbiAgICBpc0JlZ2lubmluZyxcbiAgICBpc0VuZFxuICB9KTtcbiAgaWYgKHBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzIHx8IHBhcmFtcy5jZW50ZXJlZFNsaWRlcyAmJiBwYXJhbXMuYXV0b0hlaWdodCkgc3dpcGVyLnVwZGF0ZVNsaWRlc1Byb2dyZXNzKHRyYW5zbGF0ZSk7XG4gIGlmIChpc0JlZ2lubmluZyAmJiAhd2FzQmVnaW5uaW5nKSB7XG4gICAgc3dpcGVyLmVtaXQoJ3JlYWNoQmVnaW5uaW5nIHRvRWRnZScpO1xuICB9XG4gIGlmIChpc0VuZCAmJiAhd2FzRW5kKSB7XG4gICAgc3dpcGVyLmVtaXQoJ3JlYWNoRW5kIHRvRWRnZScpO1xuICB9XG4gIGlmICh3YXNCZWdpbm5pbmcgJiYgIWlzQmVnaW5uaW5nIHx8IHdhc0VuZCAmJiAhaXNFbmQpIHtcbiAgICBzd2lwZXIuZW1pdCgnZnJvbUVkZ2UnKTtcbiAgfVxuICBzd2lwZXIuZW1pdCgncHJvZ3Jlc3MnLCBwcm9ncmVzcyk7XG59XG5cbmNvbnN0IHRvZ2dsZVNsaWRlQ2xhc3NlcyA9IChzbGlkZUVsLCBjb25kaXRpb24sIGNsYXNzTmFtZSkgPT4ge1xuICBpZiAoY29uZGl0aW9uICYmICFzbGlkZUVsLmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpKSB7XG4gICAgc2xpZGVFbC5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7XG4gIH0gZWxzZSBpZiAoIWNvbmRpdGlvbiAmJiBzbGlkZUVsLmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpKSB7XG4gICAgc2xpZGVFbC5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZSk7XG4gIH1cbn07XG5mdW5jdGlvbiB1cGRhdGVTbGlkZXNDbGFzc2VzKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgc2xpZGVzLFxuICAgIHBhcmFtcyxcbiAgICBzbGlkZXNFbCxcbiAgICBhY3RpdmVJbmRleFxuICB9ID0gc3dpcGVyO1xuICBjb25zdCBpc1ZpcnR1YWwgPSBzd2lwZXIudmlydHVhbCAmJiBwYXJhbXMudmlydHVhbC5lbmFibGVkO1xuICBjb25zdCBncmlkRW5hYmxlZCA9IHN3aXBlci5ncmlkICYmIHBhcmFtcy5ncmlkICYmIHBhcmFtcy5ncmlkLnJvd3MgPiAxO1xuICBjb25zdCBnZXRGaWx0ZXJlZFNsaWRlID0gc2VsZWN0b3IgPT4ge1xuICAgIHJldHVybiBlbGVtZW50Q2hpbGRyZW4oc2xpZGVzRWwsIGAuJHtwYXJhbXMuc2xpZGVDbGFzc30ke3NlbGVjdG9yfSwgc3dpcGVyLXNsaWRlJHtzZWxlY3Rvcn1gKVswXTtcbiAgfTtcbiAgbGV0IGFjdGl2ZVNsaWRlO1xuICBsZXQgcHJldlNsaWRlO1xuICBsZXQgbmV4dFNsaWRlO1xuICBpZiAoaXNWaXJ0dWFsKSB7XG4gICAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgICBsZXQgc2xpZGVJbmRleCA9IGFjdGl2ZUluZGV4IC0gc3dpcGVyLnZpcnR1YWwuc2xpZGVzQmVmb3JlO1xuICAgICAgaWYgKHNsaWRlSW5kZXggPCAwKSBzbGlkZUluZGV4ID0gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCArIHNsaWRlSW5kZXg7XG4gICAgICBpZiAoc2xpZGVJbmRleCA+PSBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoKSBzbGlkZUluZGV4IC09IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGg7XG4gICAgICBhY3RpdmVTbGlkZSA9IGdldEZpbHRlcmVkU2xpZGUoYFtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7c2xpZGVJbmRleH1cIl1gKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWN0aXZlU2xpZGUgPSBnZXRGaWx0ZXJlZFNsaWRlKGBbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke2FjdGl2ZUluZGV4fVwiXWApO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoZ3JpZEVuYWJsZWQpIHtcbiAgICAgIGFjdGl2ZVNsaWRlID0gc2xpZGVzLmZpbHRlcihzbGlkZUVsID0+IHNsaWRlRWwuY29sdW1uID09PSBhY3RpdmVJbmRleClbMF07XG4gICAgICBuZXh0U2xpZGUgPSBzbGlkZXMuZmlsdGVyKHNsaWRlRWwgPT4gc2xpZGVFbC5jb2x1bW4gPT09IGFjdGl2ZUluZGV4ICsgMSlbMF07XG4gICAgICBwcmV2U2xpZGUgPSBzbGlkZXMuZmlsdGVyKHNsaWRlRWwgPT4gc2xpZGVFbC5jb2x1bW4gPT09IGFjdGl2ZUluZGV4IC0gMSlbMF07XG4gICAgfSBlbHNlIHtcbiAgICAgIGFjdGl2ZVNsaWRlID0gc2xpZGVzW2FjdGl2ZUluZGV4XTtcbiAgICB9XG4gIH1cbiAgaWYgKGFjdGl2ZVNsaWRlKSB7XG4gICAgaWYgKCFncmlkRW5hYmxlZCkge1xuICAgICAgLy8gTmV4dCBTbGlkZVxuICAgICAgbmV4dFNsaWRlID0gZWxlbWVudE5leHRBbGwoYWN0aXZlU2xpZGUsIGAuJHtwYXJhbXMuc2xpZGVDbGFzc30sIHN3aXBlci1zbGlkZWApWzBdO1xuICAgICAgaWYgKHBhcmFtcy5sb29wICYmICFuZXh0U2xpZGUpIHtcbiAgICAgICAgbmV4dFNsaWRlID0gc2xpZGVzWzBdO1xuICAgICAgfVxuXG4gICAgICAvLyBQcmV2IFNsaWRlXG4gICAgICBwcmV2U2xpZGUgPSBlbGVtZW50UHJldkFsbChhY3RpdmVTbGlkZSwgYC4ke3BhcmFtcy5zbGlkZUNsYXNzfSwgc3dpcGVyLXNsaWRlYClbMF07XG4gICAgICBpZiAocGFyYW1zLmxvb3AgJiYgIXByZXZTbGlkZSA9PT0gMCkge1xuICAgICAgICBwcmV2U2xpZGUgPSBzbGlkZXNbc2xpZGVzLmxlbmd0aCAtIDFdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBzbGlkZXMuZm9yRWFjaChzbGlkZUVsID0+IHtcbiAgICB0b2dnbGVTbGlkZUNsYXNzZXMoc2xpZGVFbCwgc2xpZGVFbCA9PT0gYWN0aXZlU2xpZGUsIHBhcmFtcy5zbGlkZUFjdGl2ZUNsYXNzKTtcbiAgICB0b2dnbGVTbGlkZUNsYXNzZXMoc2xpZGVFbCwgc2xpZGVFbCA9PT0gbmV4dFNsaWRlLCBwYXJhbXMuc2xpZGVOZXh0Q2xhc3MpO1xuICAgIHRvZ2dsZVNsaWRlQ2xhc3NlcyhzbGlkZUVsLCBzbGlkZUVsID09PSBwcmV2U2xpZGUsIHBhcmFtcy5zbGlkZVByZXZDbGFzcyk7XG4gIH0pO1xuICBzd2lwZXIuZW1pdFNsaWRlc0NsYXNzZXMoKTtcbn1cblxuY29uc3QgcHJvY2Vzc0xhenlQcmVsb2FkZXIgPSAoc3dpcGVyLCBpbWFnZUVsKSA9PiB7XG4gIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQgfHwgIXN3aXBlci5wYXJhbXMpIHJldHVybjtcbiAgY29uc3Qgc2xpZGVTZWxlY3RvciA9ICgpID0+IHN3aXBlci5pc0VsZW1lbnQgPyBgc3dpcGVyLXNsaWRlYCA6IGAuJHtzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3N9YDtcbiAgY29uc3Qgc2xpZGVFbCA9IGltYWdlRWwuY2xvc2VzdChzbGlkZVNlbGVjdG9yKCkpO1xuICBpZiAoc2xpZGVFbCkge1xuICAgIGxldCBsYXp5RWwgPSBzbGlkZUVsLnF1ZXJ5U2VsZWN0b3IoYC4ke3N3aXBlci5wYXJhbXMubGF6eVByZWxvYWRlckNsYXNzfWApO1xuICAgIGlmICghbGF6eUVsICYmIHN3aXBlci5pc0VsZW1lbnQpIHtcbiAgICAgIGlmIChzbGlkZUVsLnNoYWRvd1Jvb3QpIHtcbiAgICAgICAgbGF6eUVsID0gc2xpZGVFbC5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoYC4ke3N3aXBlci5wYXJhbXMubGF6eVByZWxvYWRlckNsYXNzfWApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gaW5pdCBsYXRlclxuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgIGlmIChzbGlkZUVsLnNoYWRvd1Jvb3QpIHtcbiAgICAgICAgICAgIGxhenlFbCA9IHNsaWRlRWwuc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKGAuJHtzd2lwZXIucGFyYW1zLmxhenlQcmVsb2FkZXJDbGFzc31gKTtcbiAgICAgICAgICAgIGlmIChsYXp5RWwpIGxhenlFbC5yZW1vdmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAobGF6eUVsKSBsYXp5RWwucmVtb3ZlKCk7XG4gIH1cbn07XG5jb25zdCB1bmxhenkgPSAoc3dpcGVyLCBpbmRleCkgPT4ge1xuICBpZiAoIXN3aXBlci5zbGlkZXNbaW5kZXhdKSByZXR1cm47XG4gIGNvbnN0IGltYWdlRWwgPSBzd2lwZXIuc2xpZGVzW2luZGV4XS5xdWVyeVNlbGVjdG9yKCdbbG9hZGluZz1cImxhenlcIl0nKTtcbiAgaWYgKGltYWdlRWwpIGltYWdlRWwucmVtb3ZlQXR0cmlidXRlKCdsb2FkaW5nJyk7XG59O1xuY29uc3QgcHJlbG9hZCA9IHN3aXBlciA9PiB7XG4gIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQgfHwgIXN3aXBlci5wYXJhbXMpIHJldHVybjtcbiAgbGV0IGFtb3VudCA9IHN3aXBlci5wYXJhbXMubGF6eVByZWxvYWRQcmV2TmV4dDtcbiAgY29uc3QgbGVuID0gc3dpcGVyLnNsaWRlcy5sZW5ndGg7XG4gIGlmICghbGVuIHx8ICFhbW91bnQgfHwgYW1vdW50IDwgMCkgcmV0dXJuO1xuICBhbW91bnQgPSBNYXRoLm1pbihhbW91bnQsIGxlbik7XG4gIGNvbnN0IHNsaWRlc1BlclZpZXcgPSBzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyA/IHN3aXBlci5zbGlkZXNQZXJWaWV3RHluYW1pYygpIDogTWF0aC5jZWlsKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyk7XG4gIGNvbnN0IGFjdGl2ZUluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4O1xuICBpZiAoc3dpcGVyLnBhcmFtcy5ncmlkICYmIHN3aXBlci5wYXJhbXMuZ3JpZC5yb3dzID4gMSkge1xuICAgIGNvbnN0IGFjdGl2ZUNvbHVtbiA9IGFjdGl2ZUluZGV4O1xuICAgIGNvbnN0IHByZWxvYWRDb2x1bW5zID0gW2FjdGl2ZUNvbHVtbiAtIGFtb3VudF07XG4gICAgcHJlbG9hZENvbHVtbnMucHVzaCguLi5BcnJheS5mcm9tKHtcbiAgICAgIGxlbmd0aDogYW1vdW50XG4gICAgfSkubWFwKChfLCBpKSA9PiB7XG4gICAgICByZXR1cm4gYWN0aXZlQ29sdW1uICsgc2xpZGVzUGVyVmlldyArIGk7XG4gICAgfSkpO1xuICAgIHN3aXBlci5zbGlkZXMuZm9yRWFjaCgoc2xpZGVFbCwgaSkgPT4ge1xuICAgICAgaWYgKHByZWxvYWRDb2x1bW5zLmluY2x1ZGVzKHNsaWRlRWwuY29sdW1uKSkgdW5sYXp5KHN3aXBlciwgaSk7XG4gICAgfSk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IHNsaWRlSW5kZXhMYXN0SW5WaWV3ID0gYWN0aXZlSW5kZXggKyBzbGlkZXNQZXJWaWV3IC0gMTtcbiAgaWYgKHN3aXBlci5wYXJhbXMucmV3aW5kIHx8IHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgIGZvciAobGV0IGkgPSBhY3RpdmVJbmRleCAtIGFtb3VudDsgaSA8PSBzbGlkZUluZGV4TGFzdEluVmlldyArIGFtb3VudDsgaSArPSAxKSB7XG4gICAgICBjb25zdCByZWFsSW5kZXggPSAoaSAlIGxlbiArIGxlbikgJSBsZW47XG4gICAgICBpZiAocmVhbEluZGV4IDwgYWN0aXZlSW5kZXggfHwgcmVhbEluZGV4ID4gc2xpZGVJbmRleExhc3RJblZpZXcpIHVubGF6eShzd2lwZXIsIHJlYWxJbmRleCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGZvciAobGV0IGkgPSBNYXRoLm1heChhY3RpdmVJbmRleCAtIGFtb3VudCwgMCk7IGkgPD0gTWF0aC5taW4oc2xpZGVJbmRleExhc3RJblZpZXcgKyBhbW91bnQsIGxlbiAtIDEpOyBpICs9IDEpIHtcbiAgICAgIGlmIChpICE9PSBhY3RpdmVJbmRleCAmJiAoaSA+IHNsaWRlSW5kZXhMYXN0SW5WaWV3IHx8IGkgPCBhY3RpdmVJbmRleCkpIHtcbiAgICAgICAgdW5sYXp5KHN3aXBlciwgaSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBnZXRBY3RpdmVJbmRleEJ5VHJhbnNsYXRlKHN3aXBlcikge1xuICBjb25zdCB7XG4gICAgc2xpZGVzR3JpZCxcbiAgICBwYXJhbXNcbiAgfSA9IHN3aXBlcjtcbiAgY29uc3QgdHJhbnNsYXRlID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZSA/IHN3aXBlci50cmFuc2xhdGUgOiAtc3dpcGVyLnRyYW5zbGF0ZTtcbiAgbGV0IGFjdGl2ZUluZGV4O1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlc0dyaWQubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAodHlwZW9mIHNsaWRlc0dyaWRbaSArIDFdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgaWYgKHRyYW5zbGF0ZSA+PSBzbGlkZXNHcmlkW2ldICYmIHRyYW5zbGF0ZSA8IHNsaWRlc0dyaWRbaSArIDFdIC0gKHNsaWRlc0dyaWRbaSArIDFdIC0gc2xpZGVzR3JpZFtpXSkgLyAyKSB7XG4gICAgICAgIGFjdGl2ZUluZGV4ID0gaTtcbiAgICAgIH0gZWxzZSBpZiAodHJhbnNsYXRlID49IHNsaWRlc0dyaWRbaV0gJiYgdHJhbnNsYXRlIDwgc2xpZGVzR3JpZFtpICsgMV0pIHtcbiAgICAgICAgYWN0aXZlSW5kZXggPSBpICsgMTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRyYW5zbGF0ZSA+PSBzbGlkZXNHcmlkW2ldKSB7XG4gICAgICBhY3RpdmVJbmRleCA9IGk7XG4gICAgfVxuICB9XG4gIC8vIE5vcm1hbGl6ZSBzbGlkZUluZGV4XG4gIGlmIChwYXJhbXMubm9ybWFsaXplU2xpZGVJbmRleCkge1xuICAgIGlmIChhY3RpdmVJbmRleCA8IDAgfHwgdHlwZW9mIGFjdGl2ZUluZGV4ID09PSAndW5kZWZpbmVkJykgYWN0aXZlSW5kZXggPSAwO1xuICB9XG4gIHJldHVybiBhY3RpdmVJbmRleDtcbn1cbmZ1bmN0aW9uIHVwZGF0ZUFjdGl2ZUluZGV4KG5ld0FjdGl2ZUluZGV4KSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHRyYW5zbGF0ZSA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyBzd2lwZXIudHJhbnNsYXRlIDogLXN3aXBlci50cmFuc2xhdGU7XG4gIGNvbnN0IHtcbiAgICBzbmFwR3JpZCxcbiAgICBwYXJhbXMsXG4gICAgYWN0aXZlSW5kZXg6IHByZXZpb3VzSW5kZXgsXG4gICAgcmVhbEluZGV4OiBwcmV2aW91c1JlYWxJbmRleCxcbiAgICBzbmFwSW5kZXg6IHByZXZpb3VzU25hcEluZGV4XG4gIH0gPSBzd2lwZXI7XG4gIGxldCBhY3RpdmVJbmRleCA9IG5ld0FjdGl2ZUluZGV4O1xuICBsZXQgc25hcEluZGV4O1xuICBjb25zdCBnZXRWaXJ0dWFsUmVhbEluZGV4ID0gYUluZGV4ID0+IHtcbiAgICBsZXQgcmVhbEluZGV4ID0gYUluZGV4IC0gc3dpcGVyLnZpcnR1YWwuc2xpZGVzQmVmb3JlO1xuICAgIGlmIChyZWFsSW5kZXggPCAwKSB7XG4gICAgICByZWFsSW5kZXggPSBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoICsgcmVhbEluZGV4O1xuICAgIH1cbiAgICBpZiAocmVhbEluZGV4ID49IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGgpIHtcbiAgICAgIHJlYWxJbmRleCAtPSBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoO1xuICAgIH1cbiAgICByZXR1cm4gcmVhbEluZGV4O1xuICB9O1xuICBpZiAodHlwZW9mIGFjdGl2ZUluZGV4ID09PSAndW5kZWZpbmVkJykge1xuICAgIGFjdGl2ZUluZGV4ID0gZ2V0QWN0aXZlSW5kZXhCeVRyYW5zbGF0ZShzd2lwZXIpO1xuICB9XG4gIGlmIChzbmFwR3JpZC5pbmRleE9mKHRyYW5zbGF0ZSkgPj0gMCkge1xuICAgIHNuYXBJbmRleCA9IHNuYXBHcmlkLmluZGV4T2YodHJhbnNsYXRlKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBza2lwID0gTWF0aC5taW4ocGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCwgYWN0aXZlSW5kZXgpO1xuICAgIHNuYXBJbmRleCA9IHNraXAgKyBNYXRoLmZsb29yKChhY3RpdmVJbmRleCAtIHNraXApIC8gcGFyYW1zLnNsaWRlc1Blckdyb3VwKTtcbiAgfVxuICBpZiAoc25hcEluZGV4ID49IHNuYXBHcmlkLmxlbmd0aCkgc25hcEluZGV4ID0gc25hcEdyaWQubGVuZ3RoIC0gMTtcbiAgaWYgKGFjdGl2ZUluZGV4ID09PSBwcmV2aW91c0luZGV4ICYmICFzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICBpZiAoc25hcEluZGV4ICE9PSBwcmV2aW91c1NuYXBJbmRleCkge1xuICAgICAgc3dpcGVyLnNuYXBJbmRleCA9IHNuYXBJbmRleDtcbiAgICAgIHN3aXBlci5lbWl0KCdzbmFwSW5kZXhDaGFuZ2UnKTtcbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChhY3RpdmVJbmRleCA9PT0gcHJldmlvdXNJbmRleCAmJiBzd2lwZXIucGFyYW1zLmxvb3AgJiYgc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpIHtcbiAgICBzd2lwZXIucmVhbEluZGV4ID0gZ2V0VmlydHVhbFJlYWxJbmRleChhY3RpdmVJbmRleCk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IGdyaWRFbmFibGVkID0gc3dpcGVyLmdyaWQgJiYgcGFyYW1zLmdyaWQgJiYgcGFyYW1zLmdyaWQucm93cyA+IDE7XG5cbiAgLy8gR2V0IHJlYWwgaW5kZXhcbiAgbGV0IHJlYWxJbmRleDtcbiAgaWYgKHN3aXBlci52aXJ0dWFsICYmIHBhcmFtcy52aXJ0dWFsLmVuYWJsZWQgJiYgcGFyYW1zLmxvb3ApIHtcbiAgICByZWFsSW5kZXggPSBnZXRWaXJ0dWFsUmVhbEluZGV4KGFjdGl2ZUluZGV4KTtcbiAgfSBlbHNlIGlmIChncmlkRW5hYmxlZCkge1xuICAgIGNvbnN0IGZpcnN0U2xpZGVJbkNvbHVtbiA9IHN3aXBlci5zbGlkZXMuZmlsdGVyKHNsaWRlRWwgPT4gc2xpZGVFbC5jb2x1bW4gPT09IGFjdGl2ZUluZGV4KVswXTtcbiAgICBsZXQgYWN0aXZlU2xpZGVJbmRleCA9IHBhcnNlSW50KGZpcnN0U2xpZGVJbkNvbHVtbi5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JyksIDEwKTtcbiAgICBpZiAoTnVtYmVyLmlzTmFOKGFjdGl2ZVNsaWRlSW5kZXgpKSB7XG4gICAgICBhY3RpdmVTbGlkZUluZGV4ID0gTWF0aC5tYXgoc3dpcGVyLnNsaWRlcy5pbmRleE9mKGZpcnN0U2xpZGVJbkNvbHVtbiksIDApO1xuICAgIH1cbiAgICByZWFsSW5kZXggPSBNYXRoLmZsb29yKGFjdGl2ZVNsaWRlSW5kZXggLyBwYXJhbXMuZ3JpZC5yb3dzKTtcbiAgfSBlbHNlIGlmIChzd2lwZXIuc2xpZGVzW2FjdGl2ZUluZGV4XSkge1xuICAgIGNvbnN0IHNsaWRlSW5kZXggPSBzd2lwZXIuc2xpZGVzW2FjdGl2ZUluZGV4XS5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4Jyk7XG4gICAgaWYgKHNsaWRlSW5kZXgpIHtcbiAgICAgIHJlYWxJbmRleCA9IHBhcnNlSW50KHNsaWRlSW5kZXgsIDEwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVhbEluZGV4ID0gYWN0aXZlSW5kZXg7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJlYWxJbmRleCA9IGFjdGl2ZUluZGV4O1xuICB9XG4gIE9iamVjdC5hc3NpZ24oc3dpcGVyLCB7XG4gICAgcHJldmlvdXNTbmFwSW5kZXgsXG4gICAgc25hcEluZGV4LFxuICAgIHByZXZpb3VzUmVhbEluZGV4LFxuICAgIHJlYWxJbmRleCxcbiAgICBwcmV2aW91c0luZGV4LFxuICAgIGFjdGl2ZUluZGV4XG4gIH0pO1xuICBpZiAoc3dpcGVyLmluaXRpYWxpemVkKSB7XG4gICAgcHJlbG9hZChzd2lwZXIpO1xuICB9XG4gIHN3aXBlci5lbWl0KCdhY3RpdmVJbmRleENoYW5nZScpO1xuICBzd2lwZXIuZW1pdCgnc25hcEluZGV4Q2hhbmdlJyk7XG4gIGlmIChzd2lwZXIuaW5pdGlhbGl6ZWQgfHwgc3dpcGVyLnBhcmFtcy5ydW5DYWxsYmFja3NPbkluaXQpIHtcbiAgICBpZiAocHJldmlvdXNSZWFsSW5kZXggIT09IHJlYWxJbmRleCkge1xuICAgICAgc3dpcGVyLmVtaXQoJ3JlYWxJbmRleENoYW5nZScpO1xuICAgIH1cbiAgICBzd2lwZXIuZW1pdCgnc2xpZGVDaGFuZ2UnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB1cGRhdGVDbGlja2VkU2xpZGUoZWwsIHBhdGgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcbiAgbGV0IHNsaWRlID0gZWwuY2xvc2VzdChgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKTtcbiAgaWYgKCFzbGlkZSAmJiBzd2lwZXIuaXNFbGVtZW50ICYmIHBhdGggJiYgcGF0aC5sZW5ndGggPiAxICYmIHBhdGguaW5jbHVkZXMoZWwpKSB7XG4gICAgWy4uLnBhdGguc2xpY2UocGF0aC5pbmRleE9mKGVsKSArIDEsIHBhdGgubGVuZ3RoKV0uZm9yRWFjaChwYXRoRWwgPT4ge1xuICAgICAgaWYgKCFzbGlkZSAmJiBwYXRoRWwubWF0Y2hlcyAmJiBwYXRoRWwubWF0Y2hlcyhgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKSkge1xuICAgICAgICBzbGlkZSA9IHBhdGhFbDtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBsZXQgc2xpZGVGb3VuZCA9IGZhbHNlO1xuICBsZXQgc2xpZGVJbmRleDtcbiAgaWYgKHNsaWRlKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzd2lwZXIuc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpZiAoc3dpcGVyLnNsaWRlc1tpXSA9PT0gc2xpZGUpIHtcbiAgICAgICAgc2xpZGVGb3VuZCA9IHRydWU7XG4gICAgICAgIHNsaWRlSW5kZXggPSBpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKHNsaWRlICYmIHNsaWRlRm91bmQpIHtcbiAgICBzd2lwZXIuY2xpY2tlZFNsaWRlID0gc2xpZGU7XG4gICAgaWYgKHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkKSB7XG4gICAgICBzd2lwZXIuY2xpY2tlZEluZGV4ID0gcGFyc2VJbnQoc2xpZGUuZ2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpLCAxMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5jbGlja2VkSW5kZXggPSBzbGlkZUluZGV4O1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBzd2lwZXIuY2xpY2tlZFNsaWRlID0gdW5kZWZpbmVkO1xuICAgIHN3aXBlci5jbGlja2VkSW5kZXggPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwYXJhbXMuc2xpZGVUb0NsaWNrZWRTbGlkZSAmJiBzd2lwZXIuY2xpY2tlZEluZGV4ICE9PSB1bmRlZmluZWQgJiYgc3dpcGVyLmNsaWNrZWRJbmRleCAhPT0gc3dpcGVyLmFjdGl2ZUluZGV4KSB7XG4gICAgc3dpcGVyLnNsaWRlVG9DbGlja2VkU2xpZGUoKTtcbiAgfVxufVxuXG52YXIgdXBkYXRlID0ge1xuICB1cGRhdGVTaXplLFxuICB1cGRhdGVTbGlkZXMsXG4gIHVwZGF0ZUF1dG9IZWlnaHQsXG4gIHVwZGF0ZVNsaWRlc09mZnNldCxcbiAgdXBkYXRlU2xpZGVzUHJvZ3Jlc3MsXG4gIHVwZGF0ZVByb2dyZXNzLFxuICB1cGRhdGVTbGlkZXNDbGFzc2VzLFxuICB1cGRhdGVBY3RpdmVJbmRleCxcbiAgdXBkYXRlQ2xpY2tlZFNsaWRlXG59O1xuXG5mdW5jdGlvbiBnZXRTd2lwZXJUcmFuc2xhdGUoYXhpcykge1xuICBpZiAoYXhpcyA9PT0gdm9pZCAwKSB7XG4gICAgYXhpcyA9IHRoaXMuaXNIb3Jpem9udGFsKCkgPyAneCcgOiAneSc7XG4gIH1cbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICBydGxUcmFuc2xhdGU6IHJ0bCxcbiAgICB0cmFuc2xhdGUsXG4gICAgd3JhcHBlckVsXG4gIH0gPSBzd2lwZXI7XG4gIGlmIChwYXJhbXMudmlydHVhbFRyYW5zbGF0ZSkge1xuICAgIHJldHVybiBydGwgPyAtdHJhbnNsYXRlIDogdHJhbnNsYXRlO1xuICB9XG4gIGlmIChwYXJhbXMuY3NzTW9kZSkge1xuICAgIHJldHVybiB0cmFuc2xhdGU7XG4gIH1cbiAgbGV0IGN1cnJlbnRUcmFuc2xhdGUgPSBnZXRUcmFuc2xhdGUod3JhcHBlckVsLCBheGlzKTtcbiAgY3VycmVudFRyYW5zbGF0ZSArPSBzd2lwZXIuY3NzT3ZlcmZsb3dBZGp1c3RtZW50KCk7XG4gIGlmIChydGwpIGN1cnJlbnRUcmFuc2xhdGUgPSAtY3VycmVudFRyYW5zbGF0ZTtcbiAgcmV0dXJuIGN1cnJlbnRUcmFuc2xhdGUgfHwgMDtcbn1cblxuZnVuY3Rpb24gc2V0VHJhbnNsYXRlKHRyYW5zbGF0ZSwgYnlDb250cm9sbGVyKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBydGxUcmFuc2xhdGU6IHJ0bCxcbiAgICBwYXJhbXMsXG4gICAgd3JhcHBlckVsLFxuICAgIHByb2dyZXNzXG4gIH0gPSBzd2lwZXI7XG4gIGxldCB4ID0gMDtcbiAgbGV0IHkgPSAwO1xuICBjb25zdCB6ID0gMDtcbiAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgIHggPSBydGwgPyAtdHJhbnNsYXRlIDogdHJhbnNsYXRlO1xuICB9IGVsc2Uge1xuICAgIHkgPSB0cmFuc2xhdGU7XG4gIH1cbiAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHtcbiAgICB4ID0gTWF0aC5mbG9vcih4KTtcbiAgICB5ID0gTWF0aC5mbG9vcih5KTtcbiAgfVxuICBzd2lwZXIucHJldmlvdXNUcmFuc2xhdGUgPSBzd2lwZXIudHJhbnNsYXRlO1xuICBzd2lwZXIudHJhbnNsYXRlID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8geCA6IHk7XG4gIGlmIChwYXJhbXMuY3NzTW9kZSkge1xuICAgIHdyYXBwZXJFbFtzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnc2Nyb2xsTGVmdCcgOiAnc2Nyb2xsVG9wJ10gPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAteCA6IC15O1xuICB9IGVsc2UgaWYgKCFwYXJhbXMudmlydHVhbFRyYW5zbGF0ZSkge1xuICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgIHggLT0gc3dpcGVyLmNzc092ZXJmbG93QWRqdXN0bWVudCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB5IC09IHN3aXBlci5jc3NPdmVyZmxvd0FkanVzdG1lbnQoKTtcbiAgICB9XG4gICAgd3JhcHBlckVsLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUzZCgke3h9cHgsICR7eX1weCwgJHt6fXB4KWA7XG4gIH1cblxuICAvLyBDaGVjayBpZiB3ZSBuZWVkIHRvIHVwZGF0ZSBwcm9ncmVzc1xuICBsZXQgbmV3UHJvZ3Jlc3M7XG4gIGNvbnN0IHRyYW5zbGF0ZXNEaWZmID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpO1xuICBpZiAodHJhbnNsYXRlc0RpZmYgPT09IDApIHtcbiAgICBuZXdQcm9ncmVzcyA9IDA7XG4gIH0gZWxzZSB7XG4gICAgbmV3UHJvZ3Jlc3MgPSAodHJhbnNsYXRlIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSAvIHRyYW5zbGF0ZXNEaWZmO1xuICB9XG4gIGlmIChuZXdQcm9ncmVzcyAhPT0gcHJvZ3Jlc3MpIHtcbiAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3ModHJhbnNsYXRlKTtcbiAgfVxuICBzd2lwZXIuZW1pdCgnc2V0VHJhbnNsYXRlJywgc3dpcGVyLnRyYW5zbGF0ZSwgYnlDb250cm9sbGVyKTtcbn1cblxuZnVuY3Rpb24gbWluVHJhbnNsYXRlKCkge1xuICByZXR1cm4gLXRoaXMuc25hcEdyaWRbMF07XG59XG5cbmZ1bmN0aW9uIG1heFRyYW5zbGF0ZSgpIHtcbiAgcmV0dXJuIC10aGlzLnNuYXBHcmlkW3RoaXMuc25hcEdyaWQubGVuZ3RoIC0gMV07XG59XG5cbmZ1bmN0aW9uIHRyYW5zbGF0ZVRvKHRyYW5zbGF0ZSwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgdHJhbnNsYXRlQm91bmRzLCBpbnRlcm5hbCkge1xuICBpZiAodHJhbnNsYXRlID09PSB2b2lkIDApIHtcbiAgICB0cmFuc2xhdGUgPSAwO1xuICB9XG4gIGlmIChzcGVlZCA9PT0gdm9pZCAwKSB7XG4gICAgc3BlZWQgPSB0aGlzLnBhcmFtcy5zcGVlZDtcbiAgfVxuICBpZiAocnVuQ2FsbGJhY2tzID09PSB2b2lkIDApIHtcbiAgICBydW5DYWxsYmFja3MgPSB0cnVlO1xuICB9XG4gIGlmICh0cmFuc2xhdGVCb3VuZHMgPT09IHZvaWQgMCkge1xuICAgIHRyYW5zbGF0ZUJvdW5kcyA9IHRydWU7XG4gIH1cbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICB3cmFwcGVyRWxcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKHN3aXBlci5hbmltYXRpbmcgJiYgcGFyYW1zLnByZXZlbnRJbnRlcmFjdGlvbk9uVHJhbnNpdGlvbikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBjb25zdCBtaW5UcmFuc2xhdGUgPSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG4gIGNvbnN0IG1heFRyYW5zbGF0ZSA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKTtcbiAgbGV0IG5ld1RyYW5zbGF0ZTtcbiAgaWYgKHRyYW5zbGF0ZUJvdW5kcyAmJiB0cmFuc2xhdGUgPiBtaW5UcmFuc2xhdGUpIG5ld1RyYW5zbGF0ZSA9IG1pblRyYW5zbGF0ZTtlbHNlIGlmICh0cmFuc2xhdGVCb3VuZHMgJiYgdHJhbnNsYXRlIDwgbWF4VHJhbnNsYXRlKSBuZXdUcmFuc2xhdGUgPSBtYXhUcmFuc2xhdGU7ZWxzZSBuZXdUcmFuc2xhdGUgPSB0cmFuc2xhdGU7XG5cbiAgLy8gVXBkYXRlIHByb2dyZXNzXG4gIHN3aXBlci51cGRhdGVQcm9ncmVzcyhuZXdUcmFuc2xhdGUpO1xuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICBjb25zdCBpc0ggPSBzd2lwZXIuaXNIb3Jpem9udGFsKCk7XG4gICAgaWYgKHNwZWVkID09PSAwKSB7XG4gICAgICB3cmFwcGVyRWxbaXNIID8gJ3Njcm9sbExlZnQnIDogJ3Njcm9sbFRvcCddID0gLW5ld1RyYW5zbGF0ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFzd2lwZXIuc3VwcG9ydC5zbW9vdGhTY3JvbGwpIHtcbiAgICAgICAgYW5pbWF0ZUNTU01vZGVTY3JvbGwoe1xuICAgICAgICAgIHN3aXBlcixcbiAgICAgICAgICB0YXJnZXRQb3NpdGlvbjogLW5ld1RyYW5zbGF0ZSxcbiAgICAgICAgICBzaWRlOiBpc0ggPyAnbGVmdCcgOiAndG9wJ1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB3cmFwcGVyRWwuc2Nyb2xsVG8oe1xuICAgICAgICBbaXNIID8gJ2xlZnQnIDogJ3RvcCddOiAtbmV3VHJhbnNsYXRlLFxuICAgICAgICBiZWhhdmlvcjogJ3Ntb290aCdcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAoc3BlZWQgPT09IDApIHtcbiAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbigwKTtcbiAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKG5ld1RyYW5zbGF0ZSk7XG4gICAgaWYgKHJ1bkNhbGxiYWNrcykge1xuICAgICAgc3dpcGVyLmVtaXQoJ2JlZm9yZVRyYW5zaXRpb25TdGFydCcsIHNwZWVkLCBpbnRlcm5hbCk7XG4gICAgICBzd2lwZXIuZW1pdCgndHJhbnNpdGlvbkVuZCcpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihzcGVlZCk7XG4gICAgc3dpcGVyLnNldFRyYW5zbGF0ZShuZXdUcmFuc2xhdGUpO1xuICAgIGlmIChydW5DYWxsYmFja3MpIHtcbiAgICAgIHN3aXBlci5lbWl0KCdiZWZvcmVUcmFuc2l0aW9uU3RhcnQnLCBzcGVlZCwgaW50ZXJuYWwpO1xuICAgICAgc3dpcGVyLmVtaXQoJ3RyYW5zaXRpb25TdGFydCcpO1xuICAgIH1cbiAgICBpZiAoIXN3aXBlci5hbmltYXRpbmcpIHtcbiAgICAgIHN3aXBlci5hbmltYXRpbmcgPSB0cnVlO1xuICAgICAgaWYgKCFzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKSB7XG4gICAgICAgIHN3aXBlci5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQgPSBmdW5jdGlvbiB0cmFuc2l0aW9uRW5kKGUpIHtcbiAgICAgICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XG4gICAgICAgICAgaWYgKGUudGFyZ2V0ICE9PSB0aGlzKSByZXR1cm47XG4gICAgICAgICAgc3dpcGVyLndyYXBwZXJFbC5yZW1vdmVFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCk7XG4gICAgICAgICAgc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCA9IG51bGw7XG4gICAgICAgICAgZGVsZXRlIHN3aXBlci5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQ7XG4gICAgICAgICAgc3dpcGVyLmFuaW1hdGluZyA9IGZhbHNlO1xuICAgICAgICAgIGlmIChydW5DYWxsYmFja3MpIHtcbiAgICAgICAgICAgIHN3aXBlci5lbWl0KCd0cmFuc2l0aW9uRW5kJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgc3dpcGVyLndyYXBwZXJFbC5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG52YXIgdHJhbnNsYXRlID0ge1xuICBnZXRUcmFuc2xhdGU6IGdldFN3aXBlclRyYW5zbGF0ZSxcbiAgc2V0VHJhbnNsYXRlLFxuICBtaW5UcmFuc2xhdGUsXG4gIG1heFRyYW5zbGF0ZSxcbiAgdHJhbnNsYXRlVG9cbn07XG5cbmZ1bmN0aW9uIHNldFRyYW5zaXRpb24oZHVyYXRpb24sIGJ5Q29udHJvbGxlcikge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBpZiAoIXN3aXBlci5wYXJhbXMuY3NzTW9kZSkge1xuICAgIHN3aXBlci53cmFwcGVyRWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gYCR7ZHVyYXRpb259bXNgO1xuICAgIHN3aXBlci53cmFwcGVyRWwuc3R5bGUudHJhbnNpdGlvbkRlbGF5ID0gZHVyYXRpb24gPT09IDAgPyBgMG1zYCA6ICcnO1xuICB9XG4gIHN3aXBlci5lbWl0KCdzZXRUcmFuc2l0aW9uJywgZHVyYXRpb24sIGJ5Q29udHJvbGxlcik7XG59XG5cbmZ1bmN0aW9uIHRyYW5zaXRpb25FbWl0KF9yZWYpIHtcbiAgbGV0IHtcbiAgICBzd2lwZXIsXG4gICAgcnVuQ2FsbGJhY2tzLFxuICAgIGRpcmVjdGlvbixcbiAgICBzdGVwXG4gIH0gPSBfcmVmO1xuICBjb25zdCB7XG4gICAgYWN0aXZlSW5kZXgsXG4gICAgcHJldmlvdXNJbmRleFxuICB9ID0gc3dpcGVyO1xuICBsZXQgZGlyID0gZGlyZWN0aW9uO1xuICBpZiAoIWRpcikge1xuICAgIGlmIChhY3RpdmVJbmRleCA+IHByZXZpb3VzSW5kZXgpIGRpciA9ICduZXh0JztlbHNlIGlmIChhY3RpdmVJbmRleCA8IHByZXZpb3VzSW5kZXgpIGRpciA9ICdwcmV2JztlbHNlIGRpciA9ICdyZXNldCc7XG4gIH1cbiAgc3dpcGVyLmVtaXQoYHRyYW5zaXRpb24ke3N0ZXB9YCk7XG4gIGlmIChydW5DYWxsYmFja3MgJiYgYWN0aXZlSW5kZXggIT09IHByZXZpb3VzSW5kZXgpIHtcbiAgICBpZiAoZGlyID09PSAncmVzZXQnKSB7XG4gICAgICBzd2lwZXIuZW1pdChgc2xpZGVSZXNldFRyYW5zaXRpb24ke3N0ZXB9YCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHN3aXBlci5lbWl0KGBzbGlkZUNoYW5nZVRyYW5zaXRpb24ke3N0ZXB9YCk7XG4gICAgaWYgKGRpciA9PT0gJ25leHQnKSB7XG4gICAgICBzd2lwZXIuZW1pdChgc2xpZGVOZXh0VHJhbnNpdGlvbiR7c3RlcH1gKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLmVtaXQoYHNsaWRlUHJldlRyYW5zaXRpb24ke3N0ZXB9YCk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHRyYW5zaXRpb25TdGFydChydW5DYWxsYmFja3MsIGRpcmVjdGlvbikge1xuICBpZiAocnVuQ2FsbGJhY2tzID09PSB2b2lkIDApIHtcbiAgICBydW5DYWxsYmFja3MgPSB0cnVlO1xuICB9XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXNcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSByZXR1cm47XG4gIGlmIChwYXJhbXMuYXV0b0hlaWdodCkge1xuICAgIHN3aXBlci51cGRhdGVBdXRvSGVpZ2h0KCk7XG4gIH1cbiAgdHJhbnNpdGlvbkVtaXQoe1xuICAgIHN3aXBlcixcbiAgICBydW5DYWxsYmFja3MsXG4gICAgZGlyZWN0aW9uLFxuICAgIHN0ZXA6ICdTdGFydCdcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHRyYW5zaXRpb25FbmQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pIHtcbiAgaWYgKHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwKSB7XG4gICAgcnVuQ2FsbGJhY2tzID0gdHJ1ZTtcbiAgfVxuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcGFyYW1zXG4gIH0gPSBzd2lwZXI7XG4gIHN3aXBlci5hbmltYXRpbmcgPSBmYWxzZTtcbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSByZXR1cm47XG4gIHN3aXBlci5zZXRUcmFuc2l0aW9uKDApO1xuICB0cmFuc2l0aW9uRW1pdCh7XG4gICAgc3dpcGVyLFxuICAgIHJ1bkNhbGxiYWNrcyxcbiAgICBkaXJlY3Rpb24sXG4gICAgc3RlcDogJ0VuZCdcbiAgfSk7XG59XG5cbnZhciB0cmFuc2l0aW9uID0ge1xuICBzZXRUcmFuc2l0aW9uLFxuICB0cmFuc2l0aW9uU3RhcnQsXG4gIHRyYW5zaXRpb25FbmRcbn07XG5cbmZ1bmN0aW9uIHNsaWRlVG8oaW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsLCBpbml0aWFsKSB7XG4gIGlmIChpbmRleCA9PT0gdm9pZCAwKSB7XG4gICAgaW5kZXggPSAwO1xuICB9XG4gIGlmIChydW5DYWxsYmFja3MgPT09IHZvaWQgMCkge1xuICAgIHJ1bkNhbGxiYWNrcyA9IHRydWU7XG4gIH1cbiAgaWYgKHR5cGVvZiBpbmRleCA9PT0gJ3N0cmluZycpIHtcbiAgICBpbmRleCA9IHBhcnNlSW50KGluZGV4LCAxMCk7XG4gIH1cbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgbGV0IHNsaWRlSW5kZXggPSBpbmRleDtcbiAgaWYgKHNsaWRlSW5kZXggPCAwKSBzbGlkZUluZGV4ID0gMDtcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICBzbmFwR3JpZCxcbiAgICBzbGlkZXNHcmlkLFxuICAgIHByZXZpb3VzSW5kZXgsXG4gICAgYWN0aXZlSW5kZXgsXG4gICAgcnRsVHJhbnNsYXRlOiBydGwsXG4gICAgd3JhcHBlckVsLFxuICAgIGVuYWJsZWRcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKCFlbmFibGVkICYmICFpbnRlcm5hbCAmJiAhaW5pdGlhbCB8fCBzd2lwZXIuZGVzdHJveWVkIHx8IHN3aXBlci5hbmltYXRpbmcgJiYgcGFyYW1zLnByZXZlbnRJbnRlcmFjdGlvbk9uVHJhbnNpdGlvbikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAodHlwZW9mIHNwZWVkID09PSAndW5kZWZpbmVkJykge1xuICAgIHNwZWVkID0gc3dpcGVyLnBhcmFtcy5zcGVlZDtcbiAgfVxuICBjb25zdCBza2lwID0gTWF0aC5taW4oc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAsIHNsaWRlSW5kZXgpO1xuICBsZXQgc25hcEluZGV4ID0gc2tpcCArIE1hdGguZmxvb3IoKHNsaWRlSW5kZXggLSBza2lwKSAvIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXApO1xuICBpZiAoc25hcEluZGV4ID49IHNuYXBHcmlkLmxlbmd0aCkgc25hcEluZGV4ID0gc25hcEdyaWQubGVuZ3RoIC0gMTtcbiAgY29uc3QgdHJhbnNsYXRlID0gLXNuYXBHcmlkW3NuYXBJbmRleF07XG4gIC8vIE5vcm1hbGl6ZSBzbGlkZUluZGV4XG4gIGlmIChwYXJhbXMubm9ybWFsaXplU2xpZGVJbmRleCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzR3JpZC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgY29uc3Qgbm9ybWFsaXplZFRyYW5zbGF0ZSA9IC1NYXRoLmZsb29yKHRyYW5zbGF0ZSAqIDEwMCk7XG4gICAgICBjb25zdCBub3JtYWxpemVkR3JpZCA9IE1hdGguZmxvb3Ioc2xpZGVzR3JpZFtpXSAqIDEwMCk7XG4gICAgICBjb25zdCBub3JtYWxpemVkR3JpZE5leHQgPSBNYXRoLmZsb29yKHNsaWRlc0dyaWRbaSArIDFdICogMTAwKTtcbiAgICAgIGlmICh0eXBlb2Ygc2xpZGVzR3JpZFtpICsgMV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGlmIChub3JtYWxpemVkVHJhbnNsYXRlID49IG5vcm1hbGl6ZWRHcmlkICYmIG5vcm1hbGl6ZWRUcmFuc2xhdGUgPCBub3JtYWxpemVkR3JpZE5leHQgLSAobm9ybWFsaXplZEdyaWROZXh0IC0gbm9ybWFsaXplZEdyaWQpIC8gMikge1xuICAgICAgICAgIHNsaWRlSW5kZXggPSBpO1xuICAgICAgICB9IGVsc2UgaWYgKG5vcm1hbGl6ZWRUcmFuc2xhdGUgPj0gbm9ybWFsaXplZEdyaWQgJiYgbm9ybWFsaXplZFRyYW5zbGF0ZSA8IG5vcm1hbGl6ZWRHcmlkTmV4dCkge1xuICAgICAgICAgIHNsaWRlSW5kZXggPSBpICsgMTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChub3JtYWxpemVkVHJhbnNsYXRlID49IG5vcm1hbGl6ZWRHcmlkKSB7XG4gICAgICAgIHNsaWRlSW5kZXggPSBpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvLyBEaXJlY3Rpb25zIGxvY2tzXG4gIGlmIChzd2lwZXIuaW5pdGlhbGl6ZWQgJiYgc2xpZGVJbmRleCAhPT0gYWN0aXZlSW5kZXgpIHtcbiAgICBpZiAoIXN3aXBlci5hbGxvd1NsaWRlTmV4dCAmJiAocnRsID8gdHJhbnNsYXRlID4gc3dpcGVyLnRyYW5zbGF0ZSAmJiB0cmFuc2xhdGUgPiBzd2lwZXIubWluVHJhbnNsYXRlKCkgOiB0cmFuc2xhdGUgPCBzd2lwZXIudHJhbnNsYXRlICYmIHRyYW5zbGF0ZSA8IHN3aXBlci5taW5UcmFuc2xhdGUoKSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZVByZXYgJiYgdHJhbnNsYXRlID4gc3dpcGVyLnRyYW5zbGF0ZSAmJiB0cmFuc2xhdGUgPiBzd2lwZXIubWF4VHJhbnNsYXRlKCkpIHtcbiAgICAgIGlmICgoYWN0aXZlSW5kZXggfHwgMCkgIT09IHNsaWRlSW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoc2xpZGVJbmRleCAhPT0gKHByZXZpb3VzSW5kZXggfHwgMCkgJiYgcnVuQ2FsbGJhY2tzKSB7XG4gICAgc3dpcGVyLmVtaXQoJ2JlZm9yZVNsaWRlQ2hhbmdlU3RhcnQnKTtcbiAgfVxuXG4gIC8vIFVwZGF0ZSBwcm9ncmVzc1xuICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3ModHJhbnNsYXRlKTtcbiAgbGV0IGRpcmVjdGlvbjtcbiAgaWYgKHNsaWRlSW5kZXggPiBhY3RpdmVJbmRleCkgZGlyZWN0aW9uID0gJ25leHQnO2Vsc2UgaWYgKHNsaWRlSW5kZXggPCBhY3RpdmVJbmRleCkgZGlyZWN0aW9uID0gJ3ByZXYnO2Vsc2UgZGlyZWN0aW9uID0gJ3Jlc2V0JztcblxuICAvLyBVcGRhdGUgSW5kZXhcbiAgaWYgKHJ0bCAmJiAtdHJhbnNsYXRlID09PSBzd2lwZXIudHJhbnNsYXRlIHx8ICFydGwgJiYgdHJhbnNsYXRlID09PSBzd2lwZXIudHJhbnNsYXRlKSB7XG4gICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KHNsaWRlSW5kZXgpO1xuICAgIC8vIFVwZGF0ZSBIZWlnaHRcbiAgICBpZiAocGFyYW1zLmF1dG9IZWlnaHQpIHtcbiAgICAgIHN3aXBlci51cGRhdGVBdXRvSGVpZ2h0KCk7XG4gICAgfVxuICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gICAgaWYgKHBhcmFtcy5lZmZlY3QgIT09ICdzbGlkZScpIHtcbiAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUodHJhbnNsYXRlKTtcbiAgICB9XG4gICAgaWYgKGRpcmVjdGlvbiAhPT0gJ3Jlc2V0Jykge1xuICAgICAgc3dpcGVyLnRyYW5zaXRpb25TdGFydChydW5DYWxsYmFja3MsIGRpcmVjdGlvbik7XG4gICAgICBzd2lwZXIudHJhbnNpdGlvbkVuZChydW5DYWxsYmFja3MsIGRpcmVjdGlvbik7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICBjb25zdCBpc0ggPSBzd2lwZXIuaXNIb3Jpem9udGFsKCk7XG4gICAgY29uc3QgdCA9IHJ0bCA/IHRyYW5zbGF0ZSA6IC10cmFuc2xhdGU7XG4gICAgaWYgKHNwZWVkID09PSAwKSB7XG4gICAgICBjb25zdCBpc1ZpcnR1YWwgPSBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZDtcbiAgICAgIGlmIChpc1ZpcnR1YWwpIHtcbiAgICAgICAgc3dpcGVyLndyYXBwZXJFbC5zdHlsZS5zY3JvbGxTbmFwVHlwZSA9ICdub25lJztcbiAgICAgICAgc3dpcGVyLl9pbW1lZGlhdGVWaXJ0dWFsID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1ZpcnR1YWwgJiYgIXN3aXBlci5fY3NzTW9kZVZpcnR1YWxJbml0aWFsU2V0ICYmIHN3aXBlci5wYXJhbXMuaW5pdGlhbFNsaWRlID4gMCkge1xuICAgICAgICBzd2lwZXIuX2Nzc01vZGVWaXJ0dWFsSW5pdGlhbFNldCA9IHRydWU7XG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgd3JhcHBlckVsW2lzSCA/ICdzY3JvbGxMZWZ0JyA6ICdzY3JvbGxUb3AnXSA9IHQ7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd3JhcHBlckVsW2lzSCA/ICdzY3JvbGxMZWZ0JyA6ICdzY3JvbGxUb3AnXSA9IHQ7XG4gICAgICB9XG4gICAgICBpZiAoaXNWaXJ0dWFsKSB7XG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgc3dpcGVyLndyYXBwZXJFbC5zdHlsZS5zY3JvbGxTbmFwVHlwZSA9ICcnO1xuICAgICAgICAgIHN3aXBlci5faW1tZWRpYXRlVmlydHVhbCA9IGZhbHNlO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFzd2lwZXIuc3VwcG9ydC5zbW9vdGhTY3JvbGwpIHtcbiAgICAgICAgYW5pbWF0ZUNTU01vZGVTY3JvbGwoe1xuICAgICAgICAgIHN3aXBlcixcbiAgICAgICAgICB0YXJnZXRQb3NpdGlvbjogdCxcbiAgICAgICAgICBzaWRlOiBpc0ggPyAnbGVmdCcgOiAndG9wJ1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB3cmFwcGVyRWwuc2Nyb2xsVG8oe1xuICAgICAgICBbaXNIID8gJ2xlZnQnIDogJ3RvcCddOiB0LFxuICAgICAgICBiZWhhdmlvcjogJ3Ntb290aCdcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBzd2lwZXIuc2V0VHJhbnNpdGlvbihzcGVlZCk7XG4gIHN3aXBlci5zZXRUcmFuc2xhdGUodHJhbnNsYXRlKTtcbiAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KHNsaWRlSW5kZXgpO1xuICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICBzd2lwZXIuZW1pdCgnYmVmb3JlVHJhbnNpdGlvblN0YXJ0Jywgc3BlZWQsIGludGVybmFsKTtcbiAgc3dpcGVyLnRyYW5zaXRpb25TdGFydChydW5DYWxsYmFja3MsIGRpcmVjdGlvbik7XG4gIGlmIChzcGVlZCA9PT0gMCkge1xuICAgIHN3aXBlci50cmFuc2l0aW9uRW5kKHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKTtcbiAgfSBlbHNlIGlmICghc3dpcGVyLmFuaW1hdGluZykge1xuICAgIHN3aXBlci5hbmltYXRpbmcgPSB0cnVlO1xuICAgIGlmICghc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKSB7XG4gICAgICBzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQgPSBmdW5jdGlvbiB0cmFuc2l0aW9uRW5kKGUpIHtcbiAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgICAgICBpZiAoZS50YXJnZXQgIT09IHRoaXMpIHJldHVybjtcbiAgICAgICAgc3dpcGVyLndyYXBwZXJFbC5yZW1vdmVFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTtcbiAgICAgICAgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kID0gbnVsbDtcbiAgICAgICAgZGVsZXRlIHN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZDtcbiAgICAgICAgc3dpcGVyLnRyYW5zaXRpb25FbmQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pO1xuICAgICAgfTtcbiAgICB9XG4gICAgc3dpcGVyLndyYXBwZXJFbC5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gc2xpZGVUb0xvb3AoaW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKSB7XG4gIGlmIChpbmRleCA9PT0gdm9pZCAwKSB7XG4gICAgaW5kZXggPSAwO1xuICB9XG4gIGlmIChydW5DYWxsYmFja3MgPT09IHZvaWQgMCkge1xuICAgIHJ1bkNhbGxiYWNrcyA9IHRydWU7XG4gIH1cbiAgaWYgKHR5cGVvZiBpbmRleCA9PT0gJ3N0cmluZycpIHtcbiAgICBjb25zdCBpbmRleEFzTnVtYmVyID0gcGFyc2VJbnQoaW5kZXgsIDEwKTtcbiAgICBpbmRleCA9IGluZGV4QXNOdW1iZXI7XG4gIH1cbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgaWYgKHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgaWYgKHR5cGVvZiBzcGVlZCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBzcGVlZCA9IHN3aXBlci5wYXJhbXMuc3BlZWQ7XG4gIH1cbiAgY29uc3QgZ3JpZEVuYWJsZWQgPSBzd2lwZXIuZ3JpZCAmJiBzd2lwZXIucGFyYW1zLmdyaWQgJiYgc3dpcGVyLnBhcmFtcy5ncmlkLnJvd3MgPiAxO1xuICBsZXQgbmV3SW5kZXggPSBpbmRleDtcbiAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgIGlmIChzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICBuZXdJbmRleCA9IG5ld0luZGV4ICsgc3dpcGVyLnZpcnR1YWwuc2xpZGVzQmVmb3JlO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgdGFyZ2V0U2xpZGVJbmRleDtcbiAgICAgIGlmIChncmlkRW5hYmxlZCkge1xuICAgICAgICBjb25zdCBzbGlkZUluZGV4ID0gbmV3SW5kZXggKiBzd2lwZXIucGFyYW1zLmdyaWQucm93cztcbiAgICAgICAgdGFyZ2V0U2xpZGVJbmRleCA9IHN3aXBlci5zbGlkZXMuZmlsdGVyKHNsaWRlRWwgPT4gc2xpZGVFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JykgKiAxID09PSBzbGlkZUluZGV4KVswXS5jb2x1bW47XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0YXJnZXRTbGlkZUluZGV4ID0gc3dpcGVyLmdldFNsaWRlSW5kZXhCeURhdGEobmV3SW5kZXgpO1xuICAgICAgfVxuICAgICAgY29uc3QgY29scyA9IGdyaWRFbmFibGVkID8gTWF0aC5jZWlsKHN3aXBlci5zbGlkZXMubGVuZ3RoIC8gc3dpcGVyLnBhcmFtcy5ncmlkLnJvd3MpIDogc3dpcGVyLnNsaWRlcy5sZW5ndGg7XG4gICAgICBjb25zdCB7XG4gICAgICAgIGNlbnRlcmVkU2xpZGVzXG4gICAgICB9ID0gc3dpcGVyLnBhcmFtcztcbiAgICAgIGxldCBzbGlkZXNQZXJWaWV3ID0gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3O1xuICAgICAgaWYgKHNsaWRlc1BlclZpZXcgPT09ICdhdXRvJykge1xuICAgICAgICBzbGlkZXNQZXJWaWV3ID0gc3dpcGVyLnNsaWRlc1BlclZpZXdEeW5hbWljKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzbGlkZXNQZXJWaWV3ID0gTWF0aC5jZWlsKHBhcnNlRmxvYXQoc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3LCAxMCkpO1xuICAgICAgICBpZiAoY2VudGVyZWRTbGlkZXMgJiYgc2xpZGVzUGVyVmlldyAlIDIgPT09IDApIHtcbiAgICAgICAgICBzbGlkZXNQZXJWaWV3ID0gc2xpZGVzUGVyVmlldyArIDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxldCBuZWVkTG9vcEZpeCA9IGNvbHMgLSB0YXJnZXRTbGlkZUluZGV4IDwgc2xpZGVzUGVyVmlldztcbiAgICAgIGlmIChjZW50ZXJlZFNsaWRlcykge1xuICAgICAgICBuZWVkTG9vcEZpeCA9IG5lZWRMb29wRml4IHx8IHRhcmdldFNsaWRlSW5kZXggPCBNYXRoLmNlaWwoc2xpZGVzUGVyVmlldyAvIDIpO1xuICAgICAgfVxuICAgICAgaWYgKGludGVybmFsICYmIGNlbnRlcmVkU2xpZGVzICYmIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyAhPT0gJ2F1dG8nICYmICFncmlkRW5hYmxlZCkge1xuICAgICAgICBuZWVkTG9vcEZpeCA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKG5lZWRMb29wRml4KSB7XG4gICAgICAgIGNvbnN0IGRpcmVjdGlvbiA9IGNlbnRlcmVkU2xpZGVzID8gdGFyZ2V0U2xpZGVJbmRleCA8IHN3aXBlci5hY3RpdmVJbmRleCA/ICdwcmV2JyA6ICduZXh0JyA6IHRhcmdldFNsaWRlSW5kZXggLSBzd2lwZXIuYWN0aXZlSW5kZXggLSAxIDwgc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ID8gJ25leHQnIDogJ3ByZXYnO1xuICAgICAgICBzd2lwZXIubG9vcEZpeCh7XG4gICAgICAgICAgZGlyZWN0aW9uLFxuICAgICAgICAgIHNsaWRlVG86IHRydWUsXG4gICAgICAgICAgYWN0aXZlU2xpZGVJbmRleDogZGlyZWN0aW9uID09PSAnbmV4dCcgPyB0YXJnZXRTbGlkZUluZGV4ICsgMSA6IHRhcmdldFNsaWRlSW5kZXggLSBjb2xzICsgMSxcbiAgICAgICAgICBzbGlkZVJlYWxJbmRleDogZGlyZWN0aW9uID09PSAnbmV4dCcgPyBzd2lwZXIucmVhbEluZGV4IDogdW5kZWZpbmVkXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKGdyaWRFbmFibGVkKSB7XG4gICAgICAgIGNvbnN0IHNsaWRlSW5kZXggPSBuZXdJbmRleCAqIHN3aXBlci5wYXJhbXMuZ3JpZC5yb3dzO1xuICAgICAgICBuZXdJbmRleCA9IHN3aXBlci5zbGlkZXMuZmlsdGVyKHNsaWRlRWwgPT4gc2xpZGVFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JykgKiAxID09PSBzbGlkZUluZGV4KVswXS5jb2x1bW47XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXdJbmRleCA9IHN3aXBlci5nZXRTbGlkZUluZGV4QnlEYXRhKG5ld0luZGV4KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICBzd2lwZXIuc2xpZGVUbyhuZXdJbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xuICB9KTtcbiAgcmV0dXJuIHN3aXBlcjtcbn1cblxuLyogZXNsaW50IG5vLXVudXNlZC12YXJzOiBcIm9mZlwiICovXG5mdW5jdGlvbiBzbGlkZU5leHQoc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpIHtcbiAgaWYgKHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwKSB7XG4gICAgcnVuQ2FsbGJhY2tzID0gdHJ1ZTtcbiAgfVxuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgZW5hYmxlZCxcbiAgICBwYXJhbXMsXG4gICAgYW5pbWF0aW5nXG4gIH0gPSBzd2lwZXI7XG4gIGlmICghZW5hYmxlZCB8fCBzd2lwZXIuZGVzdHJveWVkKSByZXR1cm4gc3dpcGVyO1xuICBpZiAodHlwZW9mIHNwZWVkID09PSAndW5kZWZpbmVkJykge1xuICAgIHNwZWVkID0gc3dpcGVyLnBhcmFtcy5zcGVlZDtcbiAgfVxuICBsZXQgcGVyR3JvdXAgPSBwYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG4gIGlmIChwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nICYmIHBhcmFtcy5zbGlkZXNQZXJHcm91cCA9PT0gMSAmJiBwYXJhbXMuc2xpZGVzUGVyR3JvdXBBdXRvKSB7XG4gICAgcGVyR3JvdXAgPSBNYXRoLm1heChzd2lwZXIuc2xpZGVzUGVyVmlld0R5bmFtaWMoJ2N1cnJlbnQnLCB0cnVlKSwgMSk7XG4gIH1cbiAgY29uc3QgaW5jcmVtZW50ID0gc3dpcGVyLmFjdGl2ZUluZGV4IDwgcGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCA/IDEgOiBwZXJHcm91cDtcbiAgY29uc3QgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgcGFyYW1zLnZpcnR1YWwuZW5hYmxlZDtcbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgaWYgKGFuaW1hdGluZyAmJiAhaXNWaXJ0dWFsICYmIHBhcmFtcy5sb29wUHJldmVudHNTbGlkaW5nKSByZXR1cm4gZmFsc2U7XG4gICAgc3dpcGVyLmxvb3BGaXgoe1xuICAgICAgZGlyZWN0aW9uOiAnbmV4dCdcbiAgICB9KTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICBzd2lwZXIuX2NsaWVudExlZnQgPSBzd2lwZXIud3JhcHBlckVsLmNsaWVudExlZnQ7XG4gICAgaWYgKHN3aXBlci5hY3RpdmVJbmRleCA9PT0gc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxICYmIHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXggKyBpbmNyZW1lbnQsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIGlmIChwYXJhbXMucmV3aW5kICYmIHN3aXBlci5pc0VuZCkge1xuICAgIHJldHVybiBzd2lwZXIuc2xpZGVUbygwLCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG4gIH1cbiAgcmV0dXJuIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCArIGluY3JlbWVudCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xufVxuXG4vKiBlc2xpbnQgbm8tdW51c2VkLXZhcnM6IFwib2ZmXCIgKi9cbmZ1bmN0aW9uIHNsaWRlUHJldihzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCkge1xuICBpZiAocnVuQ2FsbGJhY2tzID09PSB2b2lkIDApIHtcbiAgICBydW5DYWxsYmFja3MgPSB0cnVlO1xuICB9XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgc25hcEdyaWQsXG4gICAgc2xpZGVzR3JpZCxcbiAgICBydGxUcmFuc2xhdGUsXG4gICAgZW5hYmxlZCxcbiAgICBhbmltYXRpbmdcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKCFlbmFibGVkIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybiBzd2lwZXI7XG4gIGlmICh0eXBlb2Ygc3BlZWQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgc3BlZWQgPSBzd2lwZXIucGFyYW1zLnNwZWVkO1xuICB9XG4gIGNvbnN0IGlzVmlydHVhbCA9IHN3aXBlci52aXJ0dWFsICYmIHBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIGlmIChhbmltYXRpbmcgJiYgIWlzVmlydHVhbCAmJiBwYXJhbXMubG9vcFByZXZlbnRzU2xpZGluZykgcmV0dXJuIGZhbHNlO1xuICAgIHN3aXBlci5sb29wRml4KHtcbiAgICAgIGRpcmVjdGlvbjogJ3ByZXYnXG4gICAgfSk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgc3dpcGVyLl9jbGllbnRMZWZ0ID0gc3dpcGVyLndyYXBwZXJFbC5jbGllbnRMZWZ0O1xuICB9XG4gIGNvbnN0IHRyYW5zbGF0ZSA9IHJ0bFRyYW5zbGF0ZSA/IHN3aXBlci50cmFuc2xhdGUgOiAtc3dpcGVyLnRyYW5zbGF0ZTtcbiAgZnVuY3Rpb24gbm9ybWFsaXplKHZhbCkge1xuICAgIGlmICh2YWwgPCAwKSByZXR1cm4gLU1hdGguZmxvb3IoTWF0aC5hYnModmFsKSk7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IodmFsKTtcbiAgfVxuICBjb25zdCBub3JtYWxpemVkVHJhbnNsYXRlID0gbm9ybWFsaXplKHRyYW5zbGF0ZSk7XG4gIGNvbnN0IG5vcm1hbGl6ZWRTbmFwR3JpZCA9IHNuYXBHcmlkLm1hcCh2YWwgPT4gbm9ybWFsaXplKHZhbCkpO1xuICBsZXQgcHJldlNuYXAgPSBzbmFwR3JpZFtub3JtYWxpemVkU25hcEdyaWQuaW5kZXhPZihub3JtYWxpemVkVHJhbnNsYXRlKSAtIDFdO1xuICBpZiAodHlwZW9mIHByZXZTbmFwID09PSAndW5kZWZpbmVkJyAmJiBwYXJhbXMuY3NzTW9kZSkge1xuICAgIGxldCBwcmV2U25hcEluZGV4O1xuICAgIHNuYXBHcmlkLmZvckVhY2goKHNuYXAsIHNuYXBJbmRleCkgPT4ge1xuICAgICAgaWYgKG5vcm1hbGl6ZWRUcmFuc2xhdGUgPj0gc25hcCkge1xuICAgICAgICAvLyBwcmV2U25hcCA9IHNuYXA7XG4gICAgICAgIHByZXZTbmFwSW5kZXggPSBzbmFwSW5kZXg7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKHR5cGVvZiBwcmV2U25hcEluZGV4ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcHJldlNuYXAgPSBzbmFwR3JpZFtwcmV2U25hcEluZGV4ID4gMCA/IHByZXZTbmFwSW5kZXggLSAxIDogcHJldlNuYXBJbmRleF07XG4gICAgfVxuICB9XG4gIGxldCBwcmV2SW5kZXggPSAwO1xuICBpZiAodHlwZW9mIHByZXZTbmFwICE9PSAndW5kZWZpbmVkJykge1xuICAgIHByZXZJbmRleCA9IHNsaWRlc0dyaWQuaW5kZXhPZihwcmV2U25hcCk7XG4gICAgaWYgKHByZXZJbmRleCA8IDApIHByZXZJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleCAtIDE7XG4gICAgaWYgKHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgJiYgcGFyYW1zLnNsaWRlc1Blckdyb3VwID09PSAxICYmIHBhcmFtcy5zbGlkZXNQZXJHcm91cEF1dG8pIHtcbiAgICAgIHByZXZJbmRleCA9IHByZXZJbmRleCAtIHN3aXBlci5zbGlkZXNQZXJWaWV3RHluYW1pYygncHJldmlvdXMnLCB0cnVlKSArIDE7XG4gICAgICBwcmV2SW5kZXggPSBNYXRoLm1heChwcmV2SW5kZXgsIDApO1xuICAgIH1cbiAgfVxuICBpZiAocGFyYW1zLnJld2luZCAmJiBzd2lwZXIuaXNCZWdpbm5pbmcpIHtcbiAgICBjb25zdCBsYXN0SW5kZXggPSBzd2lwZXIucGFyYW1zLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQgJiYgc3dpcGVyLnZpcnR1YWwgPyBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoIC0gMSA6IHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gMTtcbiAgICByZXR1cm4gc3dpcGVyLnNsaWRlVG8obGFzdEluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG4gIH0gZWxzZSBpZiAocGFyYW1zLmxvb3AgJiYgc3dpcGVyLmFjdGl2ZUluZGV4ID09PSAwICYmIHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHByZXZJbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xuICAgIH0pO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBzd2lwZXIuc2xpZGVUbyhwcmV2SW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbn1cblxuLyogZXNsaW50IG5vLXVudXNlZC12YXJzOiBcIm9mZlwiICovXG5mdW5jdGlvbiBzbGlkZVJlc2V0KHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKSB7XG4gIGlmIChydW5DYWxsYmFja3MgPT09IHZvaWQgMCkge1xuICAgIHJ1bkNhbGxiYWNrcyA9IHRydWU7XG4gIH1cbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgaWYgKHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgaWYgKHR5cGVvZiBzcGVlZCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBzcGVlZCA9IHN3aXBlci5wYXJhbXMuc3BlZWQ7XG4gIH1cbiAgcmV0dXJuIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xufVxuXG4vKiBlc2xpbnQgbm8tdW51c2VkLXZhcnM6IFwib2ZmXCIgKi9cbmZ1bmN0aW9uIHNsaWRlVG9DbG9zZXN0KHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsLCB0aHJlc2hvbGQpIHtcbiAgaWYgKHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwKSB7XG4gICAgcnVuQ2FsbGJhY2tzID0gdHJ1ZTtcbiAgfVxuICBpZiAodGhyZXNob2xkID09PSB2b2lkIDApIHtcbiAgICB0aHJlc2hvbGQgPSAwLjU7XG4gIH1cbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgaWYgKHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgaWYgKHR5cGVvZiBzcGVlZCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBzcGVlZCA9IHN3aXBlci5wYXJhbXMuc3BlZWQ7XG4gIH1cbiAgbGV0IGluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4O1xuICBjb25zdCBza2lwID0gTWF0aC5taW4oc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAsIGluZGV4KTtcbiAgY29uc3Qgc25hcEluZGV4ID0gc2tpcCArIE1hdGguZmxvb3IoKGluZGV4IC0gc2tpcCkgLyBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwKTtcbiAgY29uc3QgdHJhbnNsYXRlID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZSA/IHN3aXBlci50cmFuc2xhdGUgOiAtc3dpcGVyLnRyYW5zbGF0ZTtcbiAgaWYgKHRyYW5zbGF0ZSA+PSBzd2lwZXIuc25hcEdyaWRbc25hcEluZGV4XSkge1xuICAgIC8vIFRoZSBjdXJyZW50IHRyYW5zbGF0ZSBpcyBvbiBvciBhZnRlciB0aGUgY3VycmVudCBzbmFwIGluZGV4LCBzbyB0aGUgY2hvaWNlXG4gICAgLy8gaXMgYmV0d2VlbiB0aGUgY3VycmVudCBpbmRleCBhbmQgdGhlIG9uZSBhZnRlciBpdC5cbiAgICBjb25zdCBjdXJyZW50U25hcCA9IHN3aXBlci5zbmFwR3JpZFtzbmFwSW5kZXhdO1xuICAgIGNvbnN0IG5leHRTbmFwID0gc3dpcGVyLnNuYXBHcmlkW3NuYXBJbmRleCArIDFdO1xuICAgIGlmICh0cmFuc2xhdGUgLSBjdXJyZW50U25hcCA+IChuZXh0U25hcCAtIGN1cnJlbnRTbmFwKSAqIHRocmVzaG9sZCkge1xuICAgICAgaW5kZXggKz0gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gVGhlIGN1cnJlbnQgdHJhbnNsYXRlIGlzIGJlZm9yZSB0aGUgY3VycmVudCBzbmFwIGluZGV4LCBzbyB0aGUgY2hvaWNlXG4gICAgLy8gaXMgYmV0d2VlbiB0aGUgY3VycmVudCBpbmRleCBhbmQgdGhlIG9uZSBiZWZvcmUgaXQuXG4gICAgY29uc3QgcHJldlNuYXAgPSBzd2lwZXIuc25hcEdyaWRbc25hcEluZGV4IC0gMV07XG4gICAgY29uc3QgY3VycmVudFNuYXAgPSBzd2lwZXIuc25hcEdyaWRbc25hcEluZGV4XTtcbiAgICBpZiAodHJhbnNsYXRlIC0gcHJldlNuYXAgPD0gKGN1cnJlbnRTbmFwIC0gcHJldlNuYXApICogdGhyZXNob2xkKSB7XG4gICAgICBpbmRleCAtPSBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuICAgIH1cbiAgfVxuICBpbmRleCA9IE1hdGgubWF4KGluZGV4LCAwKTtcbiAgaW5kZXggPSBNYXRoLm1pbihpbmRleCwgc3dpcGVyLnNsaWRlc0dyaWQubGVuZ3RoIC0gMSk7XG4gIHJldHVybiBzd2lwZXIuc2xpZGVUbyhpbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xufVxuXG5mdW5jdGlvbiBzbGlkZVRvQ2xpY2tlZFNsaWRlKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBpZiAoc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgIHNsaWRlc0VsXG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IHNsaWRlc1BlclZpZXcgPSBwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nID8gc3dpcGVyLnNsaWRlc1BlclZpZXdEeW5hbWljKCkgOiBwYXJhbXMuc2xpZGVzUGVyVmlldztcbiAgbGV0IHNsaWRlVG9JbmRleCA9IHN3aXBlci5jbGlja2VkSW5kZXg7XG4gIGxldCByZWFsSW5kZXg7XG4gIGNvbnN0IHNsaWRlU2VsZWN0b3IgPSBzd2lwZXIuaXNFbGVtZW50ID8gYHN3aXBlci1zbGlkZWAgOiBgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9YDtcbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgaWYgKHN3aXBlci5hbmltYXRpbmcpIHJldHVybjtcbiAgICByZWFsSW5kZXggPSBwYXJzZUludChzd2lwZXIuY2xpY2tlZFNsaWRlLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSwgMTApO1xuICAgIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgIGlmIChzbGlkZVRvSW5kZXggPCBzd2lwZXIubG9vcGVkU2xpZGVzIC0gc2xpZGVzUGVyVmlldyAvIDIgfHwgc2xpZGVUb0luZGV4ID4gc3dpcGVyLnNsaWRlcy5sZW5ndGggLSBzd2lwZXIubG9vcGVkU2xpZGVzICsgc2xpZGVzUGVyVmlldyAvIDIpIHtcbiAgICAgICAgc3dpcGVyLmxvb3BGaXgoKTtcbiAgICAgICAgc2xpZGVUb0luZGV4ID0gc3dpcGVyLmdldFNsaWRlSW5kZXgoZWxlbWVudENoaWxkcmVuKHNsaWRlc0VsLCBgJHtzbGlkZVNlbGVjdG9yfVtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7cmVhbEluZGV4fVwiXWApWzBdKTtcbiAgICAgICAgbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICAgIHN3aXBlci5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc2xpZGVUb0luZGV4KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHNsaWRlVG9JbmRleCA+IHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gc2xpZGVzUGVyVmlldykge1xuICAgICAgc3dpcGVyLmxvb3BGaXgoKTtcbiAgICAgIHNsaWRlVG9JbmRleCA9IHN3aXBlci5nZXRTbGlkZUluZGV4KGVsZW1lbnRDaGlsZHJlbihzbGlkZXNFbCwgYCR7c2xpZGVTZWxlY3Rvcn1bZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke3JlYWxJbmRleH1cIl1gKVswXSk7XG4gICAgICBuZXh0VGljaygoKSA9PiB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc2xpZGVUb0luZGV4KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyLnNsaWRlVG8oc2xpZGVUb0luZGV4KTtcbiAgfVxufVxuXG52YXIgc2xpZGUgPSB7XG4gIHNsaWRlVG8sXG4gIHNsaWRlVG9Mb29wLFxuICBzbGlkZU5leHQsXG4gIHNsaWRlUHJldixcbiAgc2xpZGVSZXNldCxcbiAgc2xpZGVUb0Nsb3Nlc3QsXG4gIHNsaWRlVG9DbGlja2VkU2xpZGVcbn07XG5cbmZ1bmN0aW9uIGxvb3BDcmVhdGUoc2xpZGVSZWFsSW5kZXgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICBzbGlkZXNFbFxuICB9ID0gc3dpcGVyO1xuICBpZiAoIXBhcmFtcy5sb29wIHx8IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkKSByZXR1cm47XG4gIGNvbnN0IGluaXRTbGlkZXMgPSAoKSA9PiB7XG4gICAgY29uc3Qgc2xpZGVzID0gZWxlbWVudENoaWxkcmVuKHNsaWRlc0VsLCBgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKTtcbiAgICBzbGlkZXMuZm9yRWFjaCgoZWwsIGluZGV4KSA9PiB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JywgaW5kZXgpO1xuICAgIH0pO1xuICB9O1xuICBjb25zdCBncmlkRW5hYmxlZCA9IHN3aXBlci5ncmlkICYmIHBhcmFtcy5ncmlkICYmIHBhcmFtcy5ncmlkLnJvd3MgPiAxO1xuICBjb25zdCBzbGlkZXNQZXJHcm91cCA9IHBhcmFtcy5zbGlkZXNQZXJHcm91cCAqIChncmlkRW5hYmxlZCA/IHBhcmFtcy5ncmlkLnJvd3MgOiAxKTtcbiAgY29uc3Qgc2hvdWxkRmlsbEdyb3VwID0gc3dpcGVyLnNsaWRlcy5sZW5ndGggJSBzbGlkZXNQZXJHcm91cCAhPT0gMDtcbiAgY29uc3Qgc2hvdWxkRmlsbEdyaWQgPSBncmlkRW5hYmxlZCAmJiBzd2lwZXIuc2xpZGVzLmxlbmd0aCAlIHBhcmFtcy5ncmlkLnJvd3MgIT09IDA7XG4gIGNvbnN0IGFkZEJsYW5rU2xpZGVzID0gYW1vdW50T2ZTbGlkZXMgPT4ge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYW1vdW50T2ZTbGlkZXM7IGkgKz0gMSkge1xuICAgICAgY29uc3Qgc2xpZGVFbCA9IHN3aXBlci5pc0VsZW1lbnQgPyBjcmVhdGVFbGVtZW50KCdzd2lwZXItc2xpZGUnLCBbcGFyYW1zLnNsaWRlQmxhbmtDbGFzc10pIDogY3JlYXRlRWxlbWVudCgnZGl2JywgW3BhcmFtcy5zbGlkZUNsYXNzLCBwYXJhbXMuc2xpZGVCbGFua0NsYXNzXSk7XG4gICAgICBzd2lwZXIuc2xpZGVzRWwuYXBwZW5kKHNsaWRlRWwpO1xuICAgIH1cbiAgfTtcbiAgaWYgKHNob3VsZEZpbGxHcm91cCkge1xuICAgIGlmIChwYXJhbXMubG9vcEFkZEJsYW5rU2xpZGVzKSB7XG4gICAgICBjb25zdCBzbGlkZXNUb0FkZCA9IHNsaWRlc1Blckdyb3VwIC0gc3dpcGVyLnNsaWRlcy5sZW5ndGggJSBzbGlkZXNQZXJHcm91cDtcbiAgICAgIGFkZEJsYW5rU2xpZGVzKHNsaWRlc1RvQWRkKTtcbiAgICAgIHN3aXBlci5yZWNhbGNTbGlkZXMoKTtcbiAgICAgIHN3aXBlci51cGRhdGVTbGlkZXMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2hvd1dhcm5pbmcoJ1N3aXBlciBMb29wIFdhcm5pbmc6IFRoZSBudW1iZXIgb2Ygc2xpZGVzIGlzIG5vdCBldmVuIHRvIHNsaWRlc1Blckdyb3VwLCBsb29wIG1vZGUgbWF5IG5vdCBmdW5jdGlvbiBwcm9wZXJseS4gWW91IG5lZWQgdG8gYWRkIG1vcmUgc2xpZGVzIChvciBtYWtlIGR1cGxpY2F0ZXMsIG9yIGVtcHR5IHNsaWRlcyknKTtcbiAgICB9XG4gICAgaW5pdFNsaWRlcygpO1xuICB9IGVsc2UgaWYgKHNob3VsZEZpbGxHcmlkKSB7XG4gICAgaWYgKHBhcmFtcy5sb29wQWRkQmxhbmtTbGlkZXMpIHtcbiAgICAgIGNvbnN0IHNsaWRlc1RvQWRkID0gcGFyYW1zLmdyaWQucm93cyAtIHN3aXBlci5zbGlkZXMubGVuZ3RoICUgcGFyYW1zLmdyaWQucm93cztcbiAgICAgIGFkZEJsYW5rU2xpZGVzKHNsaWRlc1RvQWRkKTtcbiAgICAgIHN3aXBlci5yZWNhbGNTbGlkZXMoKTtcbiAgICAgIHN3aXBlci51cGRhdGVTbGlkZXMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2hvd1dhcm5pbmcoJ1N3aXBlciBMb29wIFdhcm5pbmc6IFRoZSBudW1iZXIgb2Ygc2xpZGVzIGlzIG5vdCBldmVuIHRvIGdyaWQucm93cywgbG9vcCBtb2RlIG1heSBub3QgZnVuY3Rpb24gcHJvcGVybHkuIFlvdSBuZWVkIHRvIGFkZCBtb3JlIHNsaWRlcyAob3IgbWFrZSBkdXBsaWNhdGVzLCBvciBlbXB0eSBzbGlkZXMpJyk7XG4gICAgfVxuICAgIGluaXRTbGlkZXMoKTtcbiAgfSBlbHNlIHtcbiAgICBpbml0U2xpZGVzKCk7XG4gIH1cbiAgc3dpcGVyLmxvb3BGaXgoe1xuICAgIHNsaWRlUmVhbEluZGV4LFxuICAgIGRpcmVjdGlvbjogcGFyYW1zLmNlbnRlcmVkU2xpZGVzID8gdW5kZWZpbmVkIDogJ25leHQnXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBsb29wRml4KF90ZW1wKSB7XG4gIGxldCB7XG4gICAgc2xpZGVSZWFsSW5kZXgsXG4gICAgc2xpZGVUbyA9IHRydWUsXG4gICAgZGlyZWN0aW9uLFxuICAgIHNldFRyYW5zbGF0ZSxcbiAgICBhY3RpdmVTbGlkZUluZGV4LFxuICAgIGJ5Q29udHJvbGxlcixcbiAgICBieU1vdXNld2hlZWxcbiAgfSA9IF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wO1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBpZiAoIXN3aXBlci5wYXJhbXMubG9vcCkgcmV0dXJuO1xuICBzd2lwZXIuZW1pdCgnYmVmb3JlTG9vcEZpeCcpO1xuICBjb25zdCB7XG4gICAgc2xpZGVzLFxuICAgIGFsbG93U2xpZGVQcmV2LFxuICAgIGFsbG93U2xpZGVOZXh0LFxuICAgIHNsaWRlc0VsLFxuICAgIHBhcmFtc1xuICB9ID0gc3dpcGVyO1xuICBjb25zdCB7XG4gICAgY2VudGVyZWRTbGlkZXNcbiAgfSA9IHBhcmFtcztcbiAgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID0gdHJ1ZTtcbiAgc3dpcGVyLmFsbG93U2xpZGVOZXh0ID0gdHJ1ZTtcbiAgaWYgKHN3aXBlci52aXJ0dWFsICYmIHBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpIHtcbiAgICBpZiAoc2xpZGVUbykge1xuICAgICAgaWYgKCFwYXJhbXMuY2VudGVyZWRTbGlkZXMgJiYgc3dpcGVyLnNuYXBJbmRleCA9PT0gMCkge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoLCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICB9IGVsc2UgaWYgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcyAmJiBzd2lwZXIuc25hcEluZGV4IDwgcGFyYW1zLnNsaWRlc1BlclZpZXcpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCArIHN3aXBlci5zbmFwSW5kZXgsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICAgIH0gZWxzZSBpZiAoc3dpcGVyLnNuYXBJbmRleCA9PT0gc3dpcGVyLnNuYXBHcmlkLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnZpcnR1YWwuc2xpZGVzQmVmb3JlLCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHN3aXBlci5hbGxvd1NsaWRlUHJldiA9IGFsbG93U2xpZGVQcmV2O1xuICAgIHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9IGFsbG93U2xpZGVOZXh0O1xuICAgIHN3aXBlci5lbWl0KCdsb29wRml4Jyk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGxldCBzbGlkZXNQZXJWaWV3ID0gcGFyYW1zLnNsaWRlc1BlclZpZXc7XG4gIGlmIChzbGlkZXNQZXJWaWV3ID09PSAnYXV0bycpIHtcbiAgICBzbGlkZXNQZXJWaWV3ID0gc3dpcGVyLnNsaWRlc1BlclZpZXdEeW5hbWljKCk7XG4gIH0gZWxzZSB7XG4gICAgc2xpZGVzUGVyVmlldyA9IE1hdGguY2VpbChwYXJzZUZsb2F0KHBhcmFtcy5zbGlkZXNQZXJWaWV3LCAxMCkpO1xuICAgIGlmIChjZW50ZXJlZFNsaWRlcyAmJiBzbGlkZXNQZXJWaWV3ICUgMiA9PT0gMCkge1xuICAgICAgc2xpZGVzUGVyVmlldyA9IHNsaWRlc1BlclZpZXcgKyAxO1xuICAgIH1cbiAgfVxuICBjb25zdCBzbGlkZXNQZXJHcm91cCA9IHBhcmFtcy5zbGlkZXNQZXJHcm91cEF1dG8gPyBzbGlkZXNQZXJWaWV3IDogcGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuICBsZXQgbG9vcGVkU2xpZGVzID0gc2xpZGVzUGVyR3JvdXA7XG4gIGlmIChsb29wZWRTbGlkZXMgJSBzbGlkZXNQZXJHcm91cCAhPT0gMCkge1xuICAgIGxvb3BlZFNsaWRlcyArPSBzbGlkZXNQZXJHcm91cCAtIGxvb3BlZFNsaWRlcyAlIHNsaWRlc1Blckdyb3VwO1xuICB9XG4gIGxvb3BlZFNsaWRlcyArPSBwYXJhbXMubG9vcEFkZGl0aW9uYWxTbGlkZXM7XG4gIHN3aXBlci5sb29wZWRTbGlkZXMgPSBsb29wZWRTbGlkZXM7XG4gIGNvbnN0IGdyaWRFbmFibGVkID0gc3dpcGVyLmdyaWQgJiYgcGFyYW1zLmdyaWQgJiYgcGFyYW1zLmdyaWQucm93cyA+IDE7XG4gIGlmIChzbGlkZXMubGVuZ3RoIDwgc2xpZGVzUGVyVmlldyArIGxvb3BlZFNsaWRlcykge1xuICAgIHNob3dXYXJuaW5nKCdTd2lwZXIgTG9vcCBXYXJuaW5nOiBUaGUgbnVtYmVyIG9mIHNsaWRlcyBpcyBub3QgZW5vdWdoIGZvciBsb29wIG1vZGUsIGl0IHdpbGwgYmUgZGlzYWJsZWQgYW5kIG5vdCBmdW5jdGlvbiBwcm9wZXJseS4gWW91IG5lZWQgdG8gYWRkIG1vcmUgc2xpZGVzIChvciBtYWtlIGR1cGxpY2F0ZXMpIG9yIGxvd2VyIHRoZSB2YWx1ZXMgb2Ygc2xpZGVzUGVyVmlldyBhbmQgc2xpZGVzUGVyR3JvdXAgcGFyYW1ldGVycycpO1xuICB9IGVsc2UgaWYgKGdyaWRFbmFibGVkICYmIHBhcmFtcy5ncmlkLmZpbGwgPT09ICdyb3cnKSB7XG4gICAgc2hvd1dhcm5pbmcoJ1N3aXBlciBMb29wIFdhcm5pbmc6IExvb3AgbW9kZSBpcyBub3QgY29tcGF0aWJsZSB3aXRoIGdyaWQuZmlsbCA9IGByb3dgJyk7XG4gIH1cbiAgY29uc3QgcHJlcGVuZFNsaWRlc0luZGV4ZXMgPSBbXTtcbiAgY29uc3QgYXBwZW5kU2xpZGVzSW5kZXhlcyA9IFtdO1xuICBsZXQgYWN0aXZlSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG4gIGlmICh0eXBlb2YgYWN0aXZlU2xpZGVJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBhY3RpdmVTbGlkZUluZGV4ID0gc3dpcGVyLmdldFNsaWRlSW5kZXgoc2xpZGVzLmZpbHRlcihlbCA9PiBlbC5jbGFzc0xpc3QuY29udGFpbnMocGFyYW1zLnNsaWRlQWN0aXZlQ2xhc3MpKVswXSk7XG4gIH0gZWxzZSB7XG4gICAgYWN0aXZlSW5kZXggPSBhY3RpdmVTbGlkZUluZGV4O1xuICB9XG4gIGNvbnN0IGlzTmV4dCA9IGRpcmVjdGlvbiA9PT0gJ25leHQnIHx8ICFkaXJlY3Rpb247XG4gIGNvbnN0IGlzUHJldiA9IGRpcmVjdGlvbiA9PT0gJ3ByZXYnIHx8ICFkaXJlY3Rpb247XG4gIGxldCBzbGlkZXNQcmVwZW5kZWQgPSAwO1xuICBsZXQgc2xpZGVzQXBwZW5kZWQgPSAwO1xuICBjb25zdCBjb2xzID0gZ3JpZEVuYWJsZWQgPyBNYXRoLmNlaWwoc2xpZGVzLmxlbmd0aCAvIHBhcmFtcy5ncmlkLnJvd3MpIDogc2xpZGVzLmxlbmd0aDtcbiAgY29uc3QgYWN0aXZlQ29sSW5kZXggPSBncmlkRW5hYmxlZCA/IHNsaWRlc1thY3RpdmVTbGlkZUluZGV4XS5jb2x1bW4gOiBhY3RpdmVTbGlkZUluZGV4O1xuICBjb25zdCBhY3RpdmVDb2xJbmRleFdpdGhTaGlmdCA9IGFjdGl2ZUNvbEluZGV4ICsgKGNlbnRlcmVkU2xpZGVzICYmIHR5cGVvZiBzZXRUcmFuc2xhdGUgPT09ICd1bmRlZmluZWQnID8gLXNsaWRlc1BlclZpZXcgLyAyICsgMC41IDogMCk7XG4gIC8vIHByZXBlbmQgbGFzdCBzbGlkZXMgYmVmb3JlIHN0YXJ0XG4gIGlmIChhY3RpdmVDb2xJbmRleFdpdGhTaGlmdCA8IGxvb3BlZFNsaWRlcykge1xuICAgIHNsaWRlc1ByZXBlbmRlZCA9IE1hdGgubWF4KGxvb3BlZFNsaWRlcyAtIGFjdGl2ZUNvbEluZGV4V2l0aFNoaWZ0LCBzbGlkZXNQZXJHcm91cCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsb29wZWRTbGlkZXMgLSBhY3RpdmVDb2xJbmRleFdpdGhTaGlmdDsgaSArPSAxKSB7XG4gICAgICBjb25zdCBpbmRleCA9IGkgLSBNYXRoLmZsb29yKGkgLyBjb2xzKSAqIGNvbHM7XG4gICAgICBpZiAoZ3JpZEVuYWJsZWQpIHtcbiAgICAgICAgY29uc3QgY29sSW5kZXhUb1ByZXBlbmQgPSBjb2xzIC0gaW5kZXggLSAxO1xuICAgICAgICBmb3IgKGxldCBpID0gc2xpZGVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaSAtPSAxKSB7XG4gICAgICAgICAgaWYgKHNsaWRlc1tpXS5jb2x1bW4gPT09IGNvbEluZGV4VG9QcmVwZW5kKSBwcmVwZW5kU2xpZGVzSW5kZXhlcy5wdXNoKGkpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHNsaWRlcy5mb3JFYWNoKChzbGlkZSwgc2xpZGVJbmRleCkgPT4ge1xuICAgICAgICAvLyAgIGlmIChzbGlkZS5jb2x1bW4gPT09IGNvbEluZGV4VG9QcmVwZW5kKSBwcmVwZW5kU2xpZGVzSW5kZXhlcy5wdXNoKHNsaWRlSW5kZXgpO1xuICAgICAgICAvLyB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByZXBlbmRTbGlkZXNJbmRleGVzLnB1c2goY29scyAtIGluZGV4IC0gMSk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKGFjdGl2ZUNvbEluZGV4V2l0aFNoaWZ0ICsgc2xpZGVzUGVyVmlldyA+IGNvbHMgLSBsb29wZWRTbGlkZXMpIHtcbiAgICBzbGlkZXNBcHBlbmRlZCA9IE1hdGgubWF4KGFjdGl2ZUNvbEluZGV4V2l0aFNoaWZ0IC0gKGNvbHMgLSBsb29wZWRTbGlkZXMgKiAyKSwgc2xpZGVzUGVyR3JvdXApO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzQXBwZW5kZWQ7IGkgKz0gMSkge1xuICAgICAgY29uc3QgaW5kZXggPSBpIC0gTWF0aC5mbG9vcihpIC8gY29scykgKiBjb2xzO1xuICAgICAgaWYgKGdyaWRFbmFibGVkKSB7XG4gICAgICAgIHNsaWRlcy5mb3JFYWNoKChzbGlkZSwgc2xpZGVJbmRleCkgPT4ge1xuICAgICAgICAgIGlmIChzbGlkZS5jb2x1bW4gPT09IGluZGV4KSBhcHBlbmRTbGlkZXNJbmRleGVzLnB1c2goc2xpZGVJbmRleCk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXBwZW5kU2xpZGVzSW5kZXhlcy5wdXNoKGluZGV4KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgc3dpcGVyLl9fcHJldmVudE9ic2VydmVyX18gPSB0cnVlO1xuICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgIHN3aXBlci5fX3ByZXZlbnRPYnNlcnZlcl9fID0gZmFsc2U7XG4gIH0pO1xuICBpZiAoaXNQcmV2KSB7XG4gICAgcHJlcGVuZFNsaWRlc0luZGV4ZXMuZm9yRWFjaChpbmRleCA9PiB7XG4gICAgICBzbGlkZXNbaW5kZXhdLnN3aXBlckxvb3BNb3ZlRE9NID0gdHJ1ZTtcbiAgICAgIHNsaWRlc0VsLnByZXBlbmQoc2xpZGVzW2luZGV4XSk7XG4gICAgICBzbGlkZXNbaW5kZXhdLnN3aXBlckxvb3BNb3ZlRE9NID0gZmFsc2U7XG4gICAgfSk7XG4gIH1cbiAgaWYgKGlzTmV4dCkge1xuICAgIGFwcGVuZFNsaWRlc0luZGV4ZXMuZm9yRWFjaChpbmRleCA9PiB7XG4gICAgICBzbGlkZXNbaW5kZXhdLnN3aXBlckxvb3BNb3ZlRE9NID0gdHJ1ZTtcbiAgICAgIHNsaWRlc0VsLmFwcGVuZChzbGlkZXNbaW5kZXhdKTtcbiAgICAgIHNsaWRlc1tpbmRleF0uc3dpcGVyTG9vcE1vdmVET00gPSBmYWxzZTtcbiAgICB9KTtcbiAgfVxuICBzd2lwZXIucmVjYWxjU2xpZGVzKCk7XG4gIGlmIChwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nKSB7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlcygpO1xuICB9IGVsc2UgaWYgKGdyaWRFbmFibGVkICYmIChwcmVwZW5kU2xpZGVzSW5kZXhlcy5sZW5ndGggPiAwICYmIGlzUHJldiB8fCBhcHBlbmRTbGlkZXNJbmRleGVzLmxlbmd0aCA+IDAgJiYgaXNOZXh0KSkge1xuICAgIHN3aXBlci5zbGlkZXMuZm9yRWFjaCgoc2xpZGUsIHNsaWRlSW5kZXgpID0+IHtcbiAgICAgIHN3aXBlci5ncmlkLnVwZGF0ZVNsaWRlKHNsaWRlSW5kZXgsIHNsaWRlLCBzd2lwZXIuc2xpZGVzKTtcbiAgICB9KTtcbiAgfVxuICBpZiAocGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MpIHtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzT2Zmc2V0KCk7XG4gIH1cbiAgaWYgKHNsaWRlVG8pIHtcbiAgICBpZiAocHJlcGVuZFNsaWRlc0luZGV4ZXMubGVuZ3RoID4gMCAmJiBpc1ByZXYpIHtcbiAgICAgIGlmICh0eXBlb2Ygc2xpZGVSZWFsSW5kZXggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRTbGlkZVRyYW5zbGF0ZSA9IHN3aXBlci5zbGlkZXNHcmlkW2FjdGl2ZUluZGV4XTtcbiAgICAgICAgY29uc3QgbmV3U2xpZGVUcmFuc2xhdGUgPSBzd2lwZXIuc2xpZGVzR3JpZFthY3RpdmVJbmRleCArIHNsaWRlc1ByZXBlbmRlZF07XG4gICAgICAgIGNvbnN0IGRpZmYgPSBuZXdTbGlkZVRyYW5zbGF0ZSAtIGN1cnJlbnRTbGlkZVRyYW5zbGF0ZTtcbiAgICAgICAgaWYgKGJ5TW91c2V3aGVlbCkge1xuICAgICAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUoc3dpcGVyLnRyYW5zbGF0ZSAtIGRpZmYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN3aXBlci5zbGlkZVRvKGFjdGl2ZUluZGV4ICsgTWF0aC5jZWlsKHNsaWRlc1ByZXBlbmRlZCksIDAsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgICBpZiAoc2V0VHJhbnNsYXRlKSB7XG4gICAgICAgICAgICBzd2lwZXIudG91Y2hFdmVudHNEYXRhLnN0YXJ0VHJhbnNsYXRlID0gc3dpcGVyLnRvdWNoRXZlbnRzRGF0YS5zdGFydFRyYW5zbGF0ZSAtIGRpZmY7XG4gICAgICAgICAgICBzd2lwZXIudG91Y2hFdmVudHNEYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBzd2lwZXIudG91Y2hFdmVudHNEYXRhLmN1cnJlbnRUcmFuc2xhdGUgLSBkaWZmO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHNldFRyYW5zbGF0ZSkge1xuICAgICAgICAgIGNvbnN0IHNoaWZ0ID0gZ3JpZEVuYWJsZWQgPyBwcmVwZW5kU2xpZGVzSW5kZXhlcy5sZW5ndGggLyBwYXJhbXMuZ3JpZC5yb3dzIDogcHJlcGVuZFNsaWRlc0luZGV4ZXMubGVuZ3RoO1xuICAgICAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCArIHNoaWZ0LCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgICAgc3dpcGVyLnRvdWNoRXZlbnRzRGF0YS5jdXJyZW50VHJhbnNsYXRlID0gc3dpcGVyLnRyYW5zbGF0ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYXBwZW5kU2xpZGVzSW5kZXhlcy5sZW5ndGggPiAwICYmIGlzTmV4dCkge1xuICAgICAgaWYgKHR5cGVvZiBzbGlkZVJlYWxJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY29uc3QgY3VycmVudFNsaWRlVHJhbnNsYXRlID0gc3dpcGVyLnNsaWRlc0dyaWRbYWN0aXZlSW5kZXhdO1xuICAgICAgICBjb25zdCBuZXdTbGlkZVRyYW5zbGF0ZSA9IHN3aXBlci5zbGlkZXNHcmlkW2FjdGl2ZUluZGV4IC0gc2xpZGVzQXBwZW5kZWRdO1xuICAgICAgICBjb25zdCBkaWZmID0gbmV3U2xpZGVUcmFuc2xhdGUgLSBjdXJyZW50U2xpZGVUcmFuc2xhdGU7XG4gICAgICAgIGlmIChieU1vdXNld2hlZWwpIHtcbiAgICAgICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKHN3aXBlci50cmFuc2xhdGUgLSBkaWZmKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhhY3RpdmVJbmRleCAtIHNsaWRlc0FwcGVuZGVkLCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgICAgaWYgKHNldFRyYW5zbGF0ZSkge1xuICAgICAgICAgICAgc3dpcGVyLnRvdWNoRXZlbnRzRGF0YS5zdGFydFRyYW5zbGF0ZSA9IHN3aXBlci50b3VjaEV2ZW50c0RhdGEuc3RhcnRUcmFuc2xhdGUgLSBkaWZmO1xuICAgICAgICAgICAgc3dpcGVyLnRvdWNoRXZlbnRzRGF0YS5jdXJyZW50VHJhbnNsYXRlID0gc3dpcGVyLnRvdWNoRXZlbnRzRGF0YS5jdXJyZW50VHJhbnNsYXRlIC0gZGlmZjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHNoaWZ0ID0gZ3JpZEVuYWJsZWQgPyBhcHBlbmRTbGlkZXNJbmRleGVzLmxlbmd0aCAvIHBhcmFtcy5ncmlkLnJvd3MgOiBhcHBlbmRTbGlkZXNJbmRleGVzLmxlbmd0aDtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4IC0gc2hpZnQsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID0gYWxsb3dTbGlkZVByZXY7XG4gIHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9IGFsbG93U2xpZGVOZXh0O1xuICBpZiAoc3dpcGVyLmNvbnRyb2xsZXIgJiYgc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbCAmJiAhYnlDb250cm9sbGVyKSB7XG4gICAgY29uc3QgbG9vcFBhcmFtcyA9IHtcbiAgICAgIHNsaWRlUmVhbEluZGV4LFxuICAgICAgZGlyZWN0aW9uLFxuICAgICAgc2V0VHJhbnNsYXRlLFxuICAgICAgYWN0aXZlU2xpZGVJbmRleCxcbiAgICAgIGJ5Q29udHJvbGxlcjogdHJ1ZVxuICAgIH07XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbCkpIHtcbiAgICAgIHN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wuZm9yRWFjaChjID0+IHtcbiAgICAgICAgaWYgKCFjLmRlc3Ryb3llZCAmJiBjLnBhcmFtcy5sb29wKSBjLmxvb3BGaXgoe1xuICAgICAgICAgIC4uLmxvb3BQYXJhbXMsXG4gICAgICAgICAgc2xpZGVUbzogYy5wYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gcGFyYW1zLnNsaWRlc1BlclZpZXcgPyBzbGlkZVRvIDogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wgaW5zdGFuY2VvZiBzd2lwZXIuY29uc3RydWN0b3IgJiYgc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbC5wYXJhbXMubG9vcCkge1xuICAgICAgc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbC5sb29wRml4KHtcbiAgICAgICAgLi4ubG9vcFBhcmFtcyxcbiAgICAgICAgc2xpZGVUbzogc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbC5wYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gcGFyYW1zLnNsaWRlc1BlclZpZXcgPyBzbGlkZVRvIDogZmFsc2VcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBzd2lwZXIuZW1pdCgnbG9vcEZpeCcpO1xufVxuXG5mdW5jdGlvbiBsb29wRGVzdHJveSgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICBzbGlkZXNFbFxuICB9ID0gc3dpcGVyO1xuICBpZiAoIXBhcmFtcy5sb29wIHx8IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkKSByZXR1cm47XG4gIHN3aXBlci5yZWNhbGNTbGlkZXMoKTtcbiAgY29uc3QgbmV3U2xpZGVzT3JkZXIgPSBbXTtcbiAgc3dpcGVyLnNsaWRlcy5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgIGNvbnN0IGluZGV4ID0gdHlwZW9mIHNsaWRlRWwuc3dpcGVyU2xpZGVJbmRleCA9PT0gJ3VuZGVmaW5lZCcgPyBzbGlkZUVsLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSAqIDEgOiBzbGlkZUVsLnN3aXBlclNsaWRlSW5kZXg7XG4gICAgbmV3U2xpZGVzT3JkZXJbaW5kZXhdID0gc2xpZGVFbDtcbiAgfSk7XG4gIHN3aXBlci5zbGlkZXMuZm9yRWFjaChzbGlkZUVsID0+IHtcbiAgICBzbGlkZUVsLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKTtcbiAgfSk7XG4gIG5ld1NsaWRlc09yZGVyLmZvckVhY2goc2xpZGVFbCA9PiB7XG4gICAgc2xpZGVzRWwuYXBwZW5kKHNsaWRlRWwpO1xuICB9KTtcbiAgc3dpcGVyLnJlY2FsY1NsaWRlcygpO1xuICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIucmVhbEluZGV4LCAwKTtcbn1cblxudmFyIGxvb3AgPSB7XG4gIGxvb3BDcmVhdGUsXG4gIGxvb3BGaXgsXG4gIGxvb3BEZXN0cm95XG59O1xuXG5mdW5jdGlvbiBzZXRHcmFiQ3Vyc29yKG1vdmluZykge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBpZiAoIXN3aXBlci5wYXJhbXMuc2ltdWxhdGVUb3VjaCB8fCBzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc3dpcGVyLmlzTG9ja2VkIHx8IHN3aXBlci5wYXJhbXMuY3NzTW9kZSkgcmV0dXJuO1xuICBjb25zdCBlbCA9IHN3aXBlci5wYXJhbXMudG91Y2hFdmVudHNUYXJnZXQgPT09ICdjb250YWluZXInID8gc3dpcGVyLmVsIDogc3dpcGVyLndyYXBwZXJFbDtcbiAgaWYgKHN3aXBlci5pc0VsZW1lbnQpIHtcbiAgICBzd2lwZXIuX19wcmV2ZW50T2JzZXJ2ZXJfXyA9IHRydWU7XG4gIH1cbiAgZWwuc3R5bGUuY3Vyc29yID0gJ21vdmUnO1xuICBlbC5zdHlsZS5jdXJzb3IgPSBtb3ZpbmcgPyAnZ3JhYmJpbmcnIDogJ2dyYWInO1xuICBpZiAoc3dpcGVyLmlzRWxlbWVudCkge1xuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICBzd2lwZXIuX19wcmV2ZW50T2JzZXJ2ZXJfXyA9IGZhbHNlO1xuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVuc2V0R3JhYkN1cnNvcigpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgaWYgKHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzd2lwZXIuaXNMb2NrZWQgfHwgc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChzd2lwZXIuaXNFbGVtZW50KSB7XG4gICAgc3dpcGVyLl9fcHJldmVudE9ic2VydmVyX18gPSB0cnVlO1xuICB9XG4gIHN3aXBlcltzd2lwZXIucGFyYW1zLnRvdWNoRXZlbnRzVGFyZ2V0ID09PSAnY29udGFpbmVyJyA/ICdlbCcgOiAnd3JhcHBlckVsJ10uc3R5bGUuY3Vyc29yID0gJyc7XG4gIGlmIChzd2lwZXIuaXNFbGVtZW50KSB7XG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgIHN3aXBlci5fX3ByZXZlbnRPYnNlcnZlcl9fID0gZmFsc2U7XG4gICAgfSk7XG4gIH1cbn1cblxudmFyIGdyYWJDdXJzb3IgPSB7XG4gIHNldEdyYWJDdXJzb3IsXG4gIHVuc2V0R3JhYkN1cnNvclxufTtcblxuLy8gTW9kaWZpZWQgZnJvbSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy81NDUyMDU1NC9jdXN0b20tZWxlbWVudC1nZXRyb290bm9kZS1jbG9zZXN0LWZ1bmN0aW9uLWNyb3NzaW5nLW11bHRpcGxlLXBhcmVudC1zaGFkb3dkXG5mdW5jdGlvbiBjbG9zZXN0RWxlbWVudChzZWxlY3RvciwgYmFzZSkge1xuICBpZiAoYmFzZSA9PT0gdm9pZCAwKSB7XG4gICAgYmFzZSA9IHRoaXM7XG4gIH1cbiAgZnVuY3Rpb24gX19jbG9zZXN0RnJvbShlbCkge1xuICAgIGlmICghZWwgfHwgZWwgPT09IGdldERvY3VtZW50KCkgfHwgZWwgPT09IGdldFdpbmRvdygpKSByZXR1cm4gbnVsbDtcbiAgICBpZiAoZWwuYXNzaWduZWRTbG90KSBlbCA9IGVsLmFzc2lnbmVkU2xvdDtcbiAgICBjb25zdCBmb3VuZCA9IGVsLmNsb3Nlc3Qoc2VsZWN0b3IpO1xuICAgIGlmICghZm91bmQgJiYgIWVsLmdldFJvb3ROb2RlKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGZvdW5kIHx8IF9fY2xvc2VzdEZyb20oZWwuZ2V0Um9vdE5vZGUoKS5ob3N0KTtcbiAgfVxuICByZXR1cm4gX19jbG9zZXN0RnJvbShiYXNlKTtcbn1cbmZ1bmN0aW9uIHByZXZlbnRFZGdlU3dpcGUoc3dpcGVyLCBldmVudCwgc3RhcnRYKSB7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBjb25zdCB7XG4gICAgcGFyYW1zXG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IGVkZ2VTd2lwZURldGVjdGlvbiA9IHBhcmFtcy5lZGdlU3dpcGVEZXRlY3Rpb247XG4gIGNvbnN0IGVkZ2VTd2lwZVRocmVzaG9sZCA9IHBhcmFtcy5lZGdlU3dpcGVUaHJlc2hvbGQ7XG4gIGlmIChlZGdlU3dpcGVEZXRlY3Rpb24gJiYgKHN0YXJ0WCA8PSBlZGdlU3dpcGVUaHJlc2hvbGQgfHwgc3RhcnRYID49IHdpbmRvdy5pbm5lcldpZHRoIC0gZWRnZVN3aXBlVGhyZXNob2xkKSkge1xuICAgIGlmIChlZGdlU3dpcGVEZXRlY3Rpb24gPT09ICdwcmV2ZW50Jykge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5mdW5jdGlvbiBvblRvdWNoU3RhcnQoZXZlbnQpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICBsZXQgZSA9IGV2ZW50O1xuICBpZiAoZS5vcmlnaW5hbEV2ZW50KSBlID0gZS5vcmlnaW5hbEV2ZW50O1xuICBjb25zdCBkYXRhID0gc3dpcGVyLnRvdWNoRXZlbnRzRGF0YTtcbiAgaWYgKGUudHlwZSA9PT0gJ3BvaW50ZXJkb3duJykge1xuICAgIGlmIChkYXRhLnBvaW50ZXJJZCAhPT0gbnVsbCAmJiBkYXRhLnBvaW50ZXJJZCAhPT0gZS5wb2ludGVySWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZGF0YS5wb2ludGVySWQgPSBlLnBvaW50ZXJJZDtcbiAgfSBlbHNlIGlmIChlLnR5cGUgPT09ICd0b3VjaHN0YXJ0JyAmJiBlLnRhcmdldFRvdWNoZXMubGVuZ3RoID09PSAxKSB7XG4gICAgZGF0YS50b3VjaElkID0gZS50YXJnZXRUb3VjaGVzWzBdLmlkZW50aWZpZXI7XG4gIH1cbiAgaWYgKGUudHlwZSA9PT0gJ3RvdWNoc3RhcnQnKSB7XG4gICAgLy8gZG9uJ3QgcHJvY2VlZCB0b3VjaCBldmVudFxuICAgIHByZXZlbnRFZGdlU3dpcGUoc3dpcGVyLCBlLCBlLnRhcmdldFRvdWNoZXNbMF0ucGFnZVgpO1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgIHRvdWNoZXMsXG4gICAgZW5hYmxlZFxuICB9ID0gc3dpcGVyO1xuICBpZiAoIWVuYWJsZWQpIHJldHVybjtcbiAgaWYgKCFwYXJhbXMuc2ltdWxhdGVUb3VjaCAmJiBlLnBvaW50ZXJUeXBlID09PSAnbW91c2UnKSByZXR1cm47XG4gIGlmIChzd2lwZXIuYW5pbWF0aW5nICYmIHBhcmFtcy5wcmV2ZW50SW50ZXJhY3Rpb25PblRyYW5zaXRpb24pIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKCFzd2lwZXIuYW5pbWF0aW5nICYmIHBhcmFtcy5jc3NNb2RlICYmIHBhcmFtcy5sb29wKSB7XG4gICAgc3dpcGVyLmxvb3BGaXgoKTtcbiAgfVxuICBsZXQgdGFyZ2V0RWwgPSBlLnRhcmdldDtcbiAgaWYgKHBhcmFtcy50b3VjaEV2ZW50c1RhcmdldCA9PT0gJ3dyYXBwZXInKSB7XG4gICAgaWYgKCFlbGVtZW50SXNDaGlsZE9mKHRhcmdldEVsLCBzd2lwZXIud3JhcHBlckVsKSkgcmV0dXJuO1xuICB9XG4gIGlmICgnd2hpY2gnIGluIGUgJiYgZS53aGljaCA9PT0gMykgcmV0dXJuO1xuICBpZiAoJ2J1dHRvbicgaW4gZSAmJiBlLmJ1dHRvbiA+IDApIHJldHVybjtcbiAgaWYgKGRhdGEuaXNUb3VjaGVkICYmIGRhdGEuaXNNb3ZlZCkgcmV0dXJuO1xuXG4gIC8vIGNoYW5nZSB0YXJnZXQgZWwgZm9yIHNoYWRvdyByb290IGNvbXBvbmVudFxuICBjb25zdCBzd2lwaW5nQ2xhc3NIYXNWYWx1ZSA9ICEhcGFyYW1zLm5vU3dpcGluZ0NsYXNzICYmIHBhcmFtcy5ub1N3aXBpbmdDbGFzcyAhPT0gJyc7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBjb25zdCBldmVudFBhdGggPSBlLmNvbXBvc2VkUGF0aCA/IGUuY29tcG9zZWRQYXRoKCkgOiBlLnBhdGg7XG4gIGlmIChzd2lwaW5nQ2xhc3NIYXNWYWx1ZSAmJiBlLnRhcmdldCAmJiBlLnRhcmdldC5zaGFkb3dSb290ICYmIGV2ZW50UGF0aCkge1xuICAgIHRhcmdldEVsID0gZXZlbnRQYXRoWzBdO1xuICB9XG4gIGNvbnN0IG5vU3dpcGluZ1NlbGVjdG9yID0gcGFyYW1zLm5vU3dpcGluZ1NlbGVjdG9yID8gcGFyYW1zLm5vU3dpcGluZ1NlbGVjdG9yIDogYC4ke3BhcmFtcy5ub1N3aXBpbmdDbGFzc31gO1xuICBjb25zdCBpc1RhcmdldFNoYWRvdyA9ICEhKGUudGFyZ2V0ICYmIGUudGFyZ2V0LnNoYWRvd1Jvb3QpO1xuXG4gIC8vIHVzZSBjbG9zZXN0RWxlbWVudCBmb3Igc2hhZG93IHJvb3QgZWxlbWVudCB0byBnZXQgdGhlIGFjdHVhbCBjbG9zZXN0IGZvciBuZXN0ZWQgc2hhZG93IHJvb3QgZWxlbWVudFxuICBpZiAocGFyYW1zLm5vU3dpcGluZyAmJiAoaXNUYXJnZXRTaGFkb3cgPyBjbG9zZXN0RWxlbWVudChub1N3aXBpbmdTZWxlY3RvciwgdGFyZ2V0RWwpIDogdGFyZ2V0RWwuY2xvc2VzdChub1N3aXBpbmdTZWxlY3RvcikpKSB7XG4gICAgc3dpcGVyLmFsbG93Q2xpY2sgPSB0cnVlO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocGFyYW1zLnN3aXBlSGFuZGxlcikge1xuICAgIGlmICghdGFyZ2V0RWwuY2xvc2VzdChwYXJhbXMuc3dpcGVIYW5kbGVyKSkgcmV0dXJuO1xuICB9XG4gIHRvdWNoZXMuY3VycmVudFggPSBlLnBhZ2VYO1xuICB0b3VjaGVzLmN1cnJlbnRZID0gZS5wYWdlWTtcbiAgY29uc3Qgc3RhcnRYID0gdG91Y2hlcy5jdXJyZW50WDtcbiAgY29uc3Qgc3RhcnRZID0gdG91Y2hlcy5jdXJyZW50WTtcblxuICAvLyBEbyBOT1Qgc3RhcnQgaWYgaU9TIGVkZ2Ugc3dpcGUgaXMgZGV0ZWN0ZWQuIE90aGVyd2lzZSBpT1MgYXBwIGNhbm5vdCBzd2lwZS10by1nby1iYWNrIGFueW1vcmVcblxuICBpZiAoIXByZXZlbnRFZGdlU3dpcGUoc3dpcGVyLCBlLCBzdGFydFgpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIE9iamVjdC5hc3NpZ24oZGF0YSwge1xuICAgIGlzVG91Y2hlZDogdHJ1ZSxcbiAgICBpc01vdmVkOiBmYWxzZSxcbiAgICBhbGxvd1RvdWNoQ2FsbGJhY2tzOiB0cnVlLFxuICAgIGlzU2Nyb2xsaW5nOiB1bmRlZmluZWQsXG4gICAgc3RhcnRNb3Zpbmc6IHVuZGVmaW5lZFxuICB9KTtcbiAgdG91Y2hlcy5zdGFydFggPSBzdGFydFg7XG4gIHRvdWNoZXMuc3RhcnRZID0gc3RhcnRZO1xuICBkYXRhLnRvdWNoU3RhcnRUaW1lID0gbm93KCk7XG4gIHN3aXBlci5hbGxvd0NsaWNrID0gdHJ1ZTtcbiAgc3dpcGVyLnVwZGF0ZVNpemUoKTtcbiAgc3dpcGVyLnN3aXBlRGlyZWN0aW9uID0gdW5kZWZpbmVkO1xuICBpZiAocGFyYW1zLnRocmVzaG9sZCA+IDApIGRhdGEuYWxsb3dUaHJlc2hvbGRNb3ZlID0gZmFsc2U7XG4gIGxldCBwcmV2ZW50RGVmYXVsdCA9IHRydWU7XG4gIGlmICh0YXJnZXRFbC5tYXRjaGVzKGRhdGEuZm9jdXNhYmxlRWxlbWVudHMpKSB7XG4gICAgcHJldmVudERlZmF1bHQgPSBmYWxzZTtcbiAgICBpZiAodGFyZ2V0RWwubm9kZU5hbWUgPT09ICdTRUxFQ1QnKSB7XG4gICAgICBkYXRhLmlzVG91Y2hlZCA9IGZhbHNlO1xuICAgIH1cbiAgfVxuICBpZiAoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiBkb2N1bWVudC5hY3RpdmVFbGVtZW50Lm1hdGNoZXMoZGF0YS5mb2N1c2FibGVFbGVtZW50cykgJiYgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAhPT0gdGFyZ2V0RWwpIHtcbiAgICBkb2N1bWVudC5hY3RpdmVFbGVtZW50LmJsdXIoKTtcbiAgfVxuICBjb25zdCBzaG91bGRQcmV2ZW50RGVmYXVsdCA9IHByZXZlbnREZWZhdWx0ICYmIHN3aXBlci5hbGxvd1RvdWNoTW92ZSAmJiBwYXJhbXMudG91Y2hTdGFydFByZXZlbnREZWZhdWx0O1xuICBpZiAoKHBhcmFtcy50b3VjaFN0YXJ0Rm9yY2VQcmV2ZW50RGVmYXVsdCB8fCBzaG91bGRQcmV2ZW50RGVmYXVsdCkgJiYgIXRhcmdldEVsLmlzQ29udGVudEVkaXRhYmxlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICB9XG4gIGlmIChwYXJhbXMuZnJlZU1vZGUgJiYgcGFyYW1zLmZyZWVNb2RlLmVuYWJsZWQgJiYgc3dpcGVyLmZyZWVNb2RlICYmIHN3aXBlci5hbmltYXRpbmcgJiYgIXBhcmFtcy5jc3NNb2RlKSB7XG4gICAgc3dpcGVyLmZyZWVNb2RlLm9uVG91Y2hTdGFydCgpO1xuICB9XG4gIHN3aXBlci5lbWl0KCd0b3VjaFN0YXJ0JywgZSk7XG59XG5cbmZ1bmN0aW9uIG9uVG91Y2hNb3ZlKGV2ZW50KSB7XG4gIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgZGF0YSA9IHN3aXBlci50b3VjaEV2ZW50c0RhdGE7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgdG91Y2hlcyxcbiAgICBydGxUcmFuc2xhdGU6IHJ0bCxcbiAgICBlbmFibGVkXG4gIH0gPSBzd2lwZXI7XG4gIGlmICghZW5hYmxlZCkgcmV0dXJuO1xuICBpZiAoIXBhcmFtcy5zaW11bGF0ZVRvdWNoICYmIGV2ZW50LnBvaW50ZXJUeXBlID09PSAnbW91c2UnKSByZXR1cm47XG4gIGxldCBlID0gZXZlbnQ7XG4gIGlmIChlLm9yaWdpbmFsRXZlbnQpIGUgPSBlLm9yaWdpbmFsRXZlbnQ7XG4gIGlmIChlLnR5cGUgPT09ICdwb2ludGVybW92ZScpIHtcbiAgICBpZiAoZGF0YS50b3VjaElkICE9PSBudWxsKSByZXR1cm47IC8vIHJldHVybiBmcm9tIHBvaW50ZXIgaWYgd2UgdXNlIHRvdWNoXG4gICAgY29uc3QgaWQgPSBlLnBvaW50ZXJJZDtcbiAgICBpZiAoaWQgIT09IGRhdGEucG9pbnRlcklkKSByZXR1cm47XG4gIH1cbiAgbGV0IHRhcmdldFRvdWNoO1xuICBpZiAoZS50eXBlID09PSAndG91Y2htb3ZlJykge1xuICAgIHRhcmdldFRvdWNoID0gWy4uLmUuY2hhbmdlZFRvdWNoZXNdLmZpbHRlcih0ID0+IHQuaWRlbnRpZmllciA9PT0gZGF0YS50b3VjaElkKVswXTtcbiAgICBpZiAoIXRhcmdldFRvdWNoIHx8IHRhcmdldFRvdWNoLmlkZW50aWZpZXIgIT09IGRhdGEudG91Y2hJZCkgcmV0dXJuO1xuICB9IGVsc2Uge1xuICAgIHRhcmdldFRvdWNoID0gZTtcbiAgfVxuICBpZiAoIWRhdGEuaXNUb3VjaGVkKSB7XG4gICAgaWYgKGRhdGEuc3RhcnRNb3ZpbmcgJiYgZGF0YS5pc1Njcm9sbGluZykge1xuICAgICAgc3dpcGVyLmVtaXQoJ3RvdWNoTW92ZU9wcG9zaXRlJywgZSk7XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBwYWdlWCA9IHRhcmdldFRvdWNoLnBhZ2VYO1xuICBjb25zdCBwYWdlWSA9IHRhcmdldFRvdWNoLnBhZ2VZO1xuICBpZiAoZS5wcmV2ZW50ZWRCeU5lc3RlZFN3aXBlcikge1xuICAgIHRvdWNoZXMuc3RhcnRYID0gcGFnZVg7XG4gICAgdG91Y2hlcy5zdGFydFkgPSBwYWdlWTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKCFzd2lwZXIuYWxsb3dUb3VjaE1vdmUpIHtcbiAgICBpZiAoIWUudGFyZ2V0Lm1hdGNoZXMoZGF0YS5mb2N1c2FibGVFbGVtZW50cykpIHtcbiAgICAgIHN3aXBlci5hbGxvd0NsaWNrID0gZmFsc2U7XG4gICAgfVxuICAgIGlmIChkYXRhLmlzVG91Y2hlZCkge1xuICAgICAgT2JqZWN0LmFzc2lnbih0b3VjaGVzLCB7XG4gICAgICAgIHN0YXJ0WDogcGFnZVgsXG4gICAgICAgIHN0YXJ0WTogcGFnZVksXG4gICAgICAgIGN1cnJlbnRYOiBwYWdlWCxcbiAgICAgICAgY3VycmVudFk6IHBhZ2VZXG4gICAgICB9KTtcbiAgICAgIGRhdGEudG91Y2hTdGFydFRpbWUgPSBub3coKTtcbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwYXJhbXMudG91Y2hSZWxlYXNlT25FZGdlcyAmJiAhcGFyYW1zLmxvb3ApIHtcbiAgICBpZiAoc3dpcGVyLmlzVmVydGljYWwoKSkge1xuICAgICAgLy8gVmVydGljYWxcbiAgICAgIGlmIChwYWdlWSA8IHRvdWNoZXMuc3RhcnRZICYmIHN3aXBlci50cmFuc2xhdGUgPD0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpIHx8IHBhZ2VZID4gdG91Y2hlcy5zdGFydFkgJiYgc3dpcGVyLnRyYW5zbGF0ZSA+PSBzd2lwZXIubWluVHJhbnNsYXRlKCkpIHtcbiAgICAgICAgZGF0YS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICAgICAgZGF0YS5pc01vdmVkID0gZmFsc2U7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHBhZ2VYIDwgdG91Y2hlcy5zdGFydFggJiYgc3dpcGVyLnRyYW5zbGF0ZSA8PSBzd2lwZXIubWF4VHJhbnNsYXRlKCkgfHwgcGFnZVggPiB0b3VjaGVzLnN0YXJ0WCAmJiBzd2lwZXIudHJhbnNsYXRlID49IHN3aXBlci5taW5UcmFuc2xhdGUoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuICBpZiAoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkge1xuICAgIGlmIChlLnRhcmdldCA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiBlLnRhcmdldC5tYXRjaGVzKGRhdGEuZm9jdXNhYmxlRWxlbWVudHMpKSB7XG4gICAgICBkYXRhLmlzTW92ZWQgPSB0cnVlO1xuICAgICAgc3dpcGVyLmFsbG93Q2xpY2sgPSBmYWxzZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbiAgaWYgKGRhdGEuYWxsb3dUb3VjaENhbGxiYWNrcykge1xuICAgIHN3aXBlci5lbWl0KCd0b3VjaE1vdmUnLCBlKTtcbiAgfVxuICB0b3VjaGVzLnByZXZpb3VzWCA9IHRvdWNoZXMuY3VycmVudFg7XG4gIHRvdWNoZXMucHJldmlvdXNZID0gdG91Y2hlcy5jdXJyZW50WTtcbiAgdG91Y2hlcy5jdXJyZW50WCA9IHBhZ2VYO1xuICB0b3VjaGVzLmN1cnJlbnRZID0gcGFnZVk7XG4gIGNvbnN0IGRpZmZYID0gdG91Y2hlcy5jdXJyZW50WCAtIHRvdWNoZXMuc3RhcnRYO1xuICBjb25zdCBkaWZmWSA9IHRvdWNoZXMuY3VycmVudFkgLSB0b3VjaGVzLnN0YXJ0WTtcbiAgaWYgKHN3aXBlci5wYXJhbXMudGhyZXNob2xkICYmIE1hdGguc3FydChkaWZmWCAqKiAyICsgZGlmZlkgKiogMikgPCBzd2lwZXIucGFyYW1zLnRocmVzaG9sZCkgcmV0dXJuO1xuICBpZiAodHlwZW9mIGRhdGEuaXNTY3JvbGxpbmcgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgbGV0IHRvdWNoQW5nbGU7XG4gICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSAmJiB0b3VjaGVzLmN1cnJlbnRZID09PSB0b3VjaGVzLnN0YXJ0WSB8fCBzd2lwZXIuaXNWZXJ0aWNhbCgpICYmIHRvdWNoZXMuY3VycmVudFggPT09IHRvdWNoZXMuc3RhcnRYKSB7XG4gICAgICBkYXRhLmlzU2Nyb2xsaW5nID0gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgaWYgKGRpZmZYICogZGlmZlggKyBkaWZmWSAqIGRpZmZZID49IDI1KSB7XG4gICAgICAgIHRvdWNoQW5nbGUgPSBNYXRoLmF0YW4yKE1hdGguYWJzKGRpZmZZKSwgTWF0aC5hYnMoZGlmZlgpKSAqIDE4MCAvIE1hdGguUEk7XG4gICAgICAgIGRhdGEuaXNTY3JvbGxpbmcgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyB0b3VjaEFuZ2xlID4gcGFyYW1zLnRvdWNoQW5nbGUgOiA5MCAtIHRvdWNoQW5nbGUgPiBwYXJhbXMudG91Y2hBbmdsZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKGRhdGEuaXNTY3JvbGxpbmcpIHtcbiAgICBzd2lwZXIuZW1pdCgndG91Y2hNb3ZlT3Bwb3NpdGUnLCBlKTtcbiAgfVxuICBpZiAodHlwZW9mIGRhdGEuc3RhcnRNb3ZpbmcgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKHRvdWNoZXMuY3VycmVudFggIT09IHRvdWNoZXMuc3RhcnRYIHx8IHRvdWNoZXMuY3VycmVudFkgIT09IHRvdWNoZXMuc3RhcnRZKSB7XG4gICAgICBkYXRhLnN0YXJ0TW92aW5nID0gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgaWYgKGRhdGEuaXNTY3JvbGxpbmcgfHwgZS50eXBlID09PSAndG91Y2htb3ZlJyAmJiBkYXRhLnByZXZlbnRUb3VjaE1vdmVGcm9tUG9pbnRlck1vdmUpIHtcbiAgICBkYXRhLmlzVG91Y2hlZCA9IGZhbHNlO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoIWRhdGEuc3RhcnRNb3ZpbmcpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgc3dpcGVyLmFsbG93Q2xpY2sgPSBmYWxzZTtcbiAgaWYgKCFwYXJhbXMuY3NzTW9kZSAmJiBlLmNhbmNlbGFibGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gIH1cbiAgaWYgKHBhcmFtcy50b3VjaE1vdmVTdG9wUHJvcGFnYXRpb24gJiYgIXBhcmFtcy5uZXN0ZWQpIHtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICB9XG4gIGxldCBkaWZmID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gZGlmZlggOiBkaWZmWTtcbiAgbGV0IHRvdWNoZXNEaWZmID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gdG91Y2hlcy5jdXJyZW50WCAtIHRvdWNoZXMucHJldmlvdXNYIDogdG91Y2hlcy5jdXJyZW50WSAtIHRvdWNoZXMucHJldmlvdXNZO1xuICBpZiAocGFyYW1zLm9uZVdheU1vdmVtZW50KSB7XG4gICAgZGlmZiA9IE1hdGguYWJzKGRpZmYpICogKHJ0bCA/IDEgOiAtMSk7XG4gICAgdG91Y2hlc0RpZmYgPSBNYXRoLmFicyh0b3VjaGVzRGlmZikgKiAocnRsID8gMSA6IC0xKTtcbiAgfVxuICB0b3VjaGVzLmRpZmYgPSBkaWZmO1xuICBkaWZmICo9IHBhcmFtcy50b3VjaFJhdGlvO1xuICBpZiAocnRsKSB7XG4gICAgZGlmZiA9IC1kaWZmO1xuICAgIHRvdWNoZXNEaWZmID0gLXRvdWNoZXNEaWZmO1xuICB9XG4gIGNvbnN0IHByZXZUb3VjaGVzRGlyZWN0aW9uID0gc3dpcGVyLnRvdWNoZXNEaXJlY3Rpb247XG4gIHN3aXBlci5zd2lwZURpcmVjdGlvbiA9IGRpZmYgPiAwID8gJ3ByZXYnIDogJ25leHQnO1xuICBzd2lwZXIudG91Y2hlc0RpcmVjdGlvbiA9IHRvdWNoZXNEaWZmID4gMCA/ICdwcmV2JyA6ICduZXh0JztcbiAgY29uc3QgaXNMb29wID0gc3dpcGVyLnBhcmFtcy5sb29wICYmICFwYXJhbXMuY3NzTW9kZTtcbiAgY29uc3QgYWxsb3dMb29wRml4ID0gc3dpcGVyLnRvdWNoZXNEaXJlY3Rpb24gPT09ICduZXh0JyAmJiBzd2lwZXIuYWxsb3dTbGlkZU5leHQgfHwgc3dpcGVyLnRvdWNoZXNEaXJlY3Rpb24gPT09ICdwcmV2JyAmJiBzd2lwZXIuYWxsb3dTbGlkZVByZXY7XG4gIGlmICghZGF0YS5pc01vdmVkKSB7XG4gICAgaWYgKGlzTG9vcCAmJiBhbGxvd0xvb3BGaXgpIHtcbiAgICAgIHN3aXBlci5sb29wRml4KHtcbiAgICAgICAgZGlyZWN0aW9uOiBzd2lwZXIuc3dpcGVEaXJlY3Rpb25cbiAgICAgIH0pO1xuICAgIH1cbiAgICBkYXRhLnN0YXJ0VHJhbnNsYXRlID0gc3dpcGVyLmdldFRyYW5zbGF0ZSgpO1xuICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKDApO1xuICAgIGlmIChzd2lwZXIuYW5pbWF0aW5nKSB7XG4gICAgICBjb25zdCBldnQgPSBuZXcgd2luZG93LkN1c3RvbUV2ZW50KCd0cmFuc2l0aW9uZW5kJywge1xuICAgICAgICBidWJibGVzOiB0cnVlLFxuICAgICAgICBjYW5jZWxhYmxlOiB0cnVlLFxuICAgICAgICBkZXRhaWw6IHtcbiAgICAgICAgICBieVN3aXBlclRvdWNoTW92ZTogdHJ1ZVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHN3aXBlci53cmFwcGVyRWwuZGlzcGF0Y2hFdmVudChldnQpO1xuICAgIH1cbiAgICBkYXRhLmFsbG93TW9tZW50dW1Cb3VuY2UgPSBmYWxzZTtcbiAgICAvLyBHcmFiIEN1cnNvclxuICAgIGlmIChwYXJhbXMuZ3JhYkN1cnNvciAmJiAoc3dpcGVyLmFsbG93U2xpZGVOZXh0ID09PSB0cnVlIHx8IHN3aXBlci5hbGxvd1NsaWRlUHJldiA9PT0gdHJ1ZSkpIHtcbiAgICAgIHN3aXBlci5zZXRHcmFiQ3Vyc29yKHRydWUpO1xuICAgIH1cbiAgICBzd2lwZXIuZW1pdCgnc2xpZGVyRmlyc3RNb3ZlJywgZSk7XG4gIH1cbiAgbGV0IGxvb3BGaXhlZDtcbiAgbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gIGlmIChkYXRhLmlzTW92ZWQgJiYgZGF0YS5hbGxvd1RocmVzaG9sZE1vdmUgJiYgcHJldlRvdWNoZXNEaXJlY3Rpb24gIT09IHN3aXBlci50b3VjaGVzRGlyZWN0aW9uICYmIGlzTG9vcCAmJiBhbGxvd0xvb3BGaXggJiYgTWF0aC5hYnMoZGlmZikgPj0gMSkge1xuICAgIE9iamVjdC5hc3NpZ24odG91Y2hlcywge1xuICAgICAgc3RhcnRYOiBwYWdlWCxcbiAgICAgIHN0YXJ0WTogcGFnZVksXG4gICAgICBjdXJyZW50WDogcGFnZVgsXG4gICAgICBjdXJyZW50WTogcGFnZVksXG4gICAgICBzdGFydFRyYW5zbGF0ZTogZGF0YS5jdXJyZW50VHJhbnNsYXRlXG4gICAgfSk7XG4gICAgZGF0YS5sb29wU3dhcFJlc2V0ID0gdHJ1ZTtcbiAgICBkYXRhLnN0YXJ0VHJhbnNsYXRlID0gZGF0YS5jdXJyZW50VHJhbnNsYXRlO1xuICAgIHJldHVybjtcbiAgfVxuICBzd2lwZXIuZW1pdCgnc2xpZGVyTW92ZScsIGUpO1xuICBkYXRhLmlzTW92ZWQgPSB0cnVlO1xuICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBkaWZmICsgZGF0YS5zdGFydFRyYW5zbGF0ZTtcbiAgbGV0IGRpc2FibGVQYXJlbnRTd2lwZXIgPSB0cnVlO1xuICBsZXQgcmVzaXN0YW5jZVJhdGlvID0gcGFyYW1zLnJlc2lzdGFuY2VSYXRpbztcbiAgaWYgKHBhcmFtcy50b3VjaFJlbGVhc2VPbkVkZ2VzKSB7XG4gICAgcmVzaXN0YW5jZVJhdGlvID0gMDtcbiAgfVxuICBpZiAoZGlmZiA+IDApIHtcbiAgICBpZiAoaXNMb29wICYmIGFsbG93TG9vcEZpeCAmJiAhbG9vcEZpeGVkICYmIGRhdGEuYWxsb3dUaHJlc2hvbGRNb3ZlICYmIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA+IChwYXJhbXMuY2VudGVyZWRTbGlkZXMgPyBzd2lwZXIubWluVHJhbnNsYXRlKCkgLSBzd2lwZXIuc2xpZGVzU2l6ZXNHcmlkW3N3aXBlci5hY3RpdmVJbmRleCArIDFdIC0gKHBhcmFtcy5zbGlkZXNQZXJWaWV3ICE9PSAnYXV0bycgJiYgc3dpcGVyLnNsaWRlcy5sZW5ndGggLSBwYXJhbXMuc2xpZGVzUGVyVmlldyA+PSAyID8gc3dpcGVyLnNsaWRlc1NpemVzR3JpZFtzd2lwZXIuYWN0aXZlSW5kZXggKyAxXSArIHN3aXBlci5wYXJhbXMuc3BhY2VCZXR3ZWVuIDogMCkgLSBzd2lwZXIucGFyYW1zLnNwYWNlQmV0d2VlbiA6IHN3aXBlci5taW5UcmFuc2xhdGUoKSkpIHtcbiAgICAgIHN3aXBlci5sb29wRml4KHtcbiAgICAgICAgZGlyZWN0aW9uOiAncHJldicsXG4gICAgICAgIHNldFRyYW5zbGF0ZTogdHJ1ZSxcbiAgICAgICAgYWN0aXZlU2xpZGVJbmRleDogMFxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPiBzd2lwZXIubWluVHJhbnNsYXRlKCkpIHtcbiAgICAgIGRpc2FibGVQYXJlbnRTd2lwZXIgPSBmYWxzZTtcbiAgICAgIGlmIChwYXJhbXMucmVzaXN0YW5jZSkge1xuICAgICAgICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBzd2lwZXIubWluVHJhbnNsYXRlKCkgLSAxICsgKC1zd2lwZXIubWluVHJhbnNsYXRlKCkgKyBkYXRhLnN0YXJ0VHJhbnNsYXRlICsgZGlmZikgKiogcmVzaXN0YW5jZVJhdGlvO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChkaWZmIDwgMCkge1xuICAgIGlmIChpc0xvb3AgJiYgYWxsb3dMb29wRml4ICYmICFsb29wRml4ZWQgJiYgZGF0YS5hbGxvd1RocmVzaG9sZE1vdmUgJiYgZGF0YS5jdXJyZW50VHJhbnNsYXRlIDwgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcyA/IHN3aXBlci5tYXhUcmFuc2xhdGUoKSArIHN3aXBlci5zbGlkZXNTaXplc0dyaWRbc3dpcGVyLnNsaWRlc1NpemVzR3JpZC5sZW5ndGggLSAxXSArIHN3aXBlci5wYXJhbXMuc3BhY2VCZXR3ZWVuICsgKHBhcmFtcy5zbGlkZXNQZXJWaWV3ICE9PSAnYXV0bycgJiYgc3dpcGVyLnNsaWRlcy5sZW5ndGggLSBwYXJhbXMuc2xpZGVzUGVyVmlldyA+PSAyID8gc3dpcGVyLnNsaWRlc1NpemVzR3JpZFtzd2lwZXIuc2xpZGVzU2l6ZXNHcmlkLmxlbmd0aCAtIDFdICsgc3dpcGVyLnBhcmFtcy5zcGFjZUJldHdlZW4gOiAwKSA6IHN3aXBlci5tYXhUcmFuc2xhdGUoKSkpIHtcbiAgICAgIHN3aXBlci5sb29wRml4KHtcbiAgICAgICAgZGlyZWN0aW9uOiAnbmV4dCcsXG4gICAgICAgIHNldFRyYW5zbGF0ZTogdHJ1ZSxcbiAgICAgICAgYWN0aXZlU2xpZGVJbmRleDogc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAocGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyA/IHN3aXBlci5zbGlkZXNQZXJWaWV3RHluYW1pYygpIDogTWF0aC5jZWlsKHBhcnNlRmxvYXQocGFyYW1zLnNsaWRlc1BlclZpZXcsIDEwKSkpXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGRhdGEuY3VycmVudFRyYW5zbGF0ZSA8IHN3aXBlci5tYXhUcmFuc2xhdGUoKSkge1xuICAgICAgZGlzYWJsZVBhcmVudFN3aXBlciA9IGZhbHNlO1xuICAgICAgaWYgKHBhcmFtcy5yZXNpc3RhbmNlKSB7XG4gICAgICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSArIDEgLSAoc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gZGF0YS5zdGFydFRyYW5zbGF0ZSAtIGRpZmYpICoqIHJlc2lzdGFuY2VSYXRpbztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKGRpc2FibGVQYXJlbnRTd2lwZXIpIHtcbiAgICBlLnByZXZlbnRlZEJ5TmVzdGVkU3dpcGVyID0gdHJ1ZTtcbiAgfVxuXG4gIC8vIERpcmVjdGlvbnMgbG9ja3NcbiAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZU5leHQgJiYgc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAnbmV4dCcgJiYgZGF0YS5jdXJyZW50VHJhbnNsYXRlIDwgZGF0YS5zdGFydFRyYW5zbGF0ZSkge1xuICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gIH1cbiAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZVByZXYgJiYgc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAncHJldicgJiYgZGF0YS5jdXJyZW50VHJhbnNsYXRlID4gZGF0YS5zdGFydFRyYW5zbGF0ZSkge1xuICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gIH1cbiAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZVByZXYgJiYgIXN3aXBlci5hbGxvd1NsaWRlTmV4dCkge1xuICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gIH1cblxuICAvLyBUaHJlc2hvbGRcbiAgaWYgKHBhcmFtcy50aHJlc2hvbGQgPiAwKSB7XG4gICAgaWYgKE1hdGguYWJzKGRpZmYpID4gcGFyYW1zLnRocmVzaG9sZCB8fCBkYXRhLmFsbG93VGhyZXNob2xkTW92ZSkge1xuICAgICAgaWYgKCFkYXRhLmFsbG93VGhyZXNob2xkTW92ZSkge1xuICAgICAgICBkYXRhLmFsbG93VGhyZXNob2xkTW92ZSA9IHRydWU7XG4gICAgICAgIHRvdWNoZXMuc3RhcnRYID0gdG91Y2hlcy5jdXJyZW50WDtcbiAgICAgICAgdG91Y2hlcy5zdGFydFkgPSB0b3VjaGVzLmN1cnJlbnRZO1xuICAgICAgICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBkYXRhLnN0YXJ0VHJhbnNsYXRlO1xuICAgICAgICB0b3VjaGVzLmRpZmYgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyB0b3VjaGVzLmN1cnJlbnRYIC0gdG91Y2hlcy5zdGFydFggOiB0b3VjaGVzLmN1cnJlbnRZIC0gdG91Y2hlcy5zdGFydFk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gZGF0YS5zdGFydFRyYW5zbGF0ZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbiAgaWYgKCFwYXJhbXMuZm9sbG93RmluZ2VyIHx8IHBhcmFtcy5jc3NNb2RlKSByZXR1cm47XG5cbiAgLy8gVXBkYXRlIGFjdGl2ZSBpbmRleCBpbiBmcmVlIG1vZGVcbiAgaWYgKHBhcmFtcy5mcmVlTW9kZSAmJiBwYXJhbXMuZnJlZU1vZGUuZW5hYmxlZCAmJiBzd2lwZXIuZnJlZU1vZGUgfHwgcGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MpIHtcbiAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICB9XG4gIGlmIChwYXJhbXMuZnJlZU1vZGUgJiYgcGFyYW1zLmZyZWVNb2RlLmVuYWJsZWQgJiYgc3dpcGVyLmZyZWVNb2RlKSB7XG4gICAgc3dpcGVyLmZyZWVNb2RlLm9uVG91Y2hNb3ZlKCk7XG4gIH1cbiAgLy8gVXBkYXRlIHByb2dyZXNzXG4gIHN3aXBlci51cGRhdGVQcm9ncmVzcyhkYXRhLmN1cnJlbnRUcmFuc2xhdGUpO1xuICAvLyBVcGRhdGUgdHJhbnNsYXRlXG4gIHN3aXBlci5zZXRUcmFuc2xhdGUoZGF0YS5jdXJyZW50VHJhbnNsYXRlKTtcbn1cblxuZnVuY3Rpb24gb25Ub3VjaEVuZChldmVudCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBkYXRhID0gc3dpcGVyLnRvdWNoRXZlbnRzRGF0YTtcbiAgbGV0IGUgPSBldmVudDtcbiAgaWYgKGUub3JpZ2luYWxFdmVudCkgZSA9IGUub3JpZ2luYWxFdmVudDtcbiAgbGV0IHRhcmdldFRvdWNoO1xuICBjb25zdCBpc1RvdWNoRXZlbnQgPSBlLnR5cGUgPT09ICd0b3VjaGVuZCcgfHwgZS50eXBlID09PSAndG91Y2hjYW5jZWwnO1xuICBpZiAoIWlzVG91Y2hFdmVudCkge1xuICAgIGlmIChkYXRhLnRvdWNoSWQgIT09IG51bGwpIHJldHVybjsgLy8gcmV0dXJuIGZyb20gcG9pbnRlciBpZiB3ZSB1c2UgdG91Y2hcbiAgICBpZiAoZS5wb2ludGVySWQgIT09IGRhdGEucG9pbnRlcklkKSByZXR1cm47XG4gICAgdGFyZ2V0VG91Y2ggPSBlO1xuICB9IGVsc2Uge1xuICAgIHRhcmdldFRvdWNoID0gWy4uLmUuY2hhbmdlZFRvdWNoZXNdLmZpbHRlcih0ID0+IHQuaWRlbnRpZmllciA9PT0gZGF0YS50b3VjaElkKVswXTtcbiAgICBpZiAoIXRhcmdldFRvdWNoIHx8IHRhcmdldFRvdWNoLmlkZW50aWZpZXIgIT09IGRhdGEudG91Y2hJZCkgcmV0dXJuO1xuICB9XG4gIGlmIChbJ3BvaW50ZXJjYW5jZWwnLCAncG9pbnRlcm91dCcsICdwb2ludGVybGVhdmUnLCAnY29udGV4dG1lbnUnXS5pbmNsdWRlcyhlLnR5cGUpKSB7XG4gICAgY29uc3QgcHJvY2VlZCA9IFsncG9pbnRlcmNhbmNlbCcsICdjb250ZXh0bWVudSddLmluY2x1ZGVzKGUudHlwZSkgJiYgKHN3aXBlci5icm93c2VyLmlzU2FmYXJpIHx8IHN3aXBlci5icm93c2VyLmlzV2ViVmlldyk7XG4gICAgaWYgKCFwcm9jZWVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG4gIGRhdGEucG9pbnRlcklkID0gbnVsbDtcbiAgZGF0YS50b3VjaElkID0gbnVsbDtcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICB0b3VjaGVzLFxuICAgIHJ0bFRyYW5zbGF0ZTogcnRsLFxuICAgIHNsaWRlc0dyaWQsXG4gICAgZW5hYmxlZFxuICB9ID0gc3dpcGVyO1xuICBpZiAoIWVuYWJsZWQpIHJldHVybjtcbiAgaWYgKCFwYXJhbXMuc2ltdWxhdGVUb3VjaCAmJiBlLnBvaW50ZXJUeXBlID09PSAnbW91c2UnKSByZXR1cm47XG4gIGlmIChkYXRhLmFsbG93VG91Y2hDYWxsYmFja3MpIHtcbiAgICBzd2lwZXIuZW1pdCgndG91Y2hFbmQnLCBlKTtcbiAgfVxuICBkYXRhLmFsbG93VG91Y2hDYWxsYmFja3MgPSBmYWxzZTtcbiAgaWYgKCFkYXRhLmlzVG91Y2hlZCkge1xuICAgIGlmIChkYXRhLmlzTW92ZWQgJiYgcGFyYW1zLmdyYWJDdXJzb3IpIHtcbiAgICAgIHN3aXBlci5zZXRHcmFiQ3Vyc29yKGZhbHNlKTtcbiAgICB9XG4gICAgZGF0YS5pc01vdmVkID0gZmFsc2U7XG4gICAgZGF0YS5zdGFydE1vdmluZyA9IGZhbHNlO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIFJldHVybiBHcmFiIEN1cnNvclxuICBpZiAocGFyYW1zLmdyYWJDdXJzb3IgJiYgZGF0YS5pc01vdmVkICYmIGRhdGEuaXNUb3VjaGVkICYmIChzd2lwZXIuYWxsb3dTbGlkZU5leHQgPT09IHRydWUgfHwgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID09PSB0cnVlKSkge1xuICAgIHN3aXBlci5zZXRHcmFiQ3Vyc29yKGZhbHNlKTtcbiAgfVxuXG4gIC8vIFRpbWUgZGlmZlxuICBjb25zdCB0b3VjaEVuZFRpbWUgPSBub3coKTtcbiAgY29uc3QgdGltZURpZmYgPSB0b3VjaEVuZFRpbWUgLSBkYXRhLnRvdWNoU3RhcnRUaW1lO1xuXG4gIC8vIFRhcCwgZG91YmxlVGFwLCBDbGlja1xuICBpZiAoc3dpcGVyLmFsbG93Q2xpY2spIHtcbiAgICBjb25zdCBwYXRoVHJlZSA9IGUucGF0aCB8fCBlLmNvbXBvc2VkUGF0aCAmJiBlLmNvbXBvc2VkUGF0aCgpO1xuICAgIHN3aXBlci51cGRhdGVDbGlja2VkU2xpZGUocGF0aFRyZWUgJiYgcGF0aFRyZWVbMF0gfHwgZS50YXJnZXQsIHBhdGhUcmVlKTtcbiAgICBzd2lwZXIuZW1pdCgndGFwIGNsaWNrJywgZSk7XG4gICAgaWYgKHRpbWVEaWZmIDwgMzAwICYmIHRvdWNoRW5kVGltZSAtIGRhdGEubGFzdENsaWNrVGltZSA8IDMwMCkge1xuICAgICAgc3dpcGVyLmVtaXQoJ2RvdWJsZVRhcCBkb3VibGVDbGljaycsIGUpO1xuICAgIH1cbiAgfVxuICBkYXRhLmxhc3RDbGlja1RpbWUgPSBub3coKTtcbiAgbmV4dFRpY2soKCkgPT4ge1xuICAgIGlmICghc3dpcGVyLmRlc3Ryb3llZCkgc3dpcGVyLmFsbG93Q2xpY2sgPSB0cnVlO1xuICB9KTtcbiAgaWYgKCFkYXRhLmlzVG91Y2hlZCB8fCAhZGF0YS5pc01vdmVkIHx8ICFzd2lwZXIuc3dpcGVEaXJlY3Rpb24gfHwgdG91Y2hlcy5kaWZmID09PSAwICYmICFkYXRhLmxvb3BTd2FwUmVzZXQgfHwgZGF0YS5jdXJyZW50VHJhbnNsYXRlID09PSBkYXRhLnN0YXJ0VHJhbnNsYXRlICYmICFkYXRhLmxvb3BTd2FwUmVzZXQpIHtcbiAgICBkYXRhLmlzVG91Y2hlZCA9IGZhbHNlO1xuICAgIGRhdGEuaXNNb3ZlZCA9IGZhbHNlO1xuICAgIGRhdGEuc3RhcnRNb3ZpbmcgPSBmYWxzZTtcbiAgICByZXR1cm47XG4gIH1cbiAgZGF0YS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgZGF0YS5pc01vdmVkID0gZmFsc2U7XG4gIGRhdGEuc3RhcnRNb3ZpbmcgPSBmYWxzZTtcbiAgbGV0IGN1cnJlbnRQb3M7XG4gIGlmIChwYXJhbXMuZm9sbG93RmluZ2VyKSB7XG4gICAgY3VycmVudFBvcyA9IHJ0bCA/IHN3aXBlci50cmFuc2xhdGUgOiAtc3dpcGVyLnRyYW5zbGF0ZTtcbiAgfSBlbHNlIHtcbiAgICBjdXJyZW50UG9zID0gLWRhdGEuY3VycmVudFRyYW5zbGF0ZTtcbiAgfVxuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHBhcmFtcy5mcmVlTW9kZSAmJiBwYXJhbXMuZnJlZU1vZGUuZW5hYmxlZCkge1xuICAgIHN3aXBlci5mcmVlTW9kZS5vblRvdWNoRW5kKHtcbiAgICAgIGN1cnJlbnRQb3NcbiAgICB9KTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBGaW5kIGN1cnJlbnQgc2xpZGVcbiAgY29uc3Qgc3dpcGVUb0xhc3QgPSBjdXJyZW50UG9zID49IC1zd2lwZXIubWF4VHJhbnNsYXRlKCkgJiYgIXN3aXBlci5wYXJhbXMubG9vcDtcbiAgbGV0IHN0b3BJbmRleCA9IDA7XG4gIGxldCBncm91cFNpemUgPSBzd2lwZXIuc2xpZGVzU2l6ZXNHcmlkWzBdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlc0dyaWQubGVuZ3RoOyBpICs9IGkgPCBwYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwID8gMSA6IHBhcmFtcy5zbGlkZXNQZXJHcm91cCkge1xuICAgIGNvbnN0IGluY3JlbWVudCA9IGkgPCBwYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwIC0gMSA/IDEgOiBwYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG4gICAgaWYgKHR5cGVvZiBzbGlkZXNHcmlkW2kgKyBpbmNyZW1lbnRdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgaWYgKHN3aXBlVG9MYXN0IHx8IGN1cnJlbnRQb3MgPj0gc2xpZGVzR3JpZFtpXSAmJiBjdXJyZW50UG9zIDwgc2xpZGVzR3JpZFtpICsgaW5jcmVtZW50XSkge1xuICAgICAgICBzdG9wSW5kZXggPSBpO1xuICAgICAgICBncm91cFNpemUgPSBzbGlkZXNHcmlkW2kgKyBpbmNyZW1lbnRdIC0gc2xpZGVzR3JpZFtpXTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHN3aXBlVG9MYXN0IHx8IGN1cnJlbnRQb3MgPj0gc2xpZGVzR3JpZFtpXSkge1xuICAgICAgc3RvcEluZGV4ID0gaTtcbiAgICAgIGdyb3VwU2l6ZSA9IHNsaWRlc0dyaWRbc2xpZGVzR3JpZC5sZW5ndGggLSAxXSAtIHNsaWRlc0dyaWRbc2xpZGVzR3JpZC5sZW5ndGggLSAyXTtcbiAgICB9XG4gIH1cbiAgbGV0IHJld2luZEZpcnN0SW5kZXggPSBudWxsO1xuICBsZXQgcmV3aW5kTGFzdEluZGV4ID0gbnVsbDtcbiAgaWYgKHBhcmFtcy5yZXdpbmQpIHtcbiAgICBpZiAoc3dpcGVyLmlzQmVnaW5uaW5nKSB7XG4gICAgICByZXdpbmRMYXN0SW5kZXggPSBwYXJhbXMudmlydHVhbCAmJiBwYXJhbXMudmlydHVhbC5lbmFibGVkICYmIHN3aXBlci52aXJ0dWFsID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCAtIDEgOiBzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIDE7XG4gICAgfSBlbHNlIGlmIChzd2lwZXIuaXNFbmQpIHtcbiAgICAgIHJld2luZEZpcnN0SW5kZXggPSAwO1xuICAgIH1cbiAgfVxuICAvLyBGaW5kIGN1cnJlbnQgc2xpZGUgc2l6ZVxuICBjb25zdCByYXRpbyA9IChjdXJyZW50UG9zIC0gc2xpZGVzR3JpZFtzdG9wSW5kZXhdKSAvIGdyb3VwU2l6ZTtcbiAgY29uc3QgaW5jcmVtZW50ID0gc3RvcEluZGV4IDwgcGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCAtIDEgPyAxIDogcGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuICBpZiAodGltZURpZmYgPiBwYXJhbXMubG9uZ1N3aXBlc01zKSB7XG4gICAgLy8gTG9uZyB0b3VjaGVzXG4gICAgaWYgKCFwYXJhbXMubG9uZ1N3aXBlcykge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ25leHQnKSB7XG4gICAgICBpZiAocmF0aW8gPj0gcGFyYW1zLmxvbmdTd2lwZXNSYXRpbykgc3dpcGVyLnNsaWRlVG8ocGFyYW1zLnJld2luZCAmJiBzd2lwZXIuaXNFbmQgPyByZXdpbmRGaXJzdEluZGV4IDogc3RvcEluZGV4ICsgaW5jcmVtZW50KTtlbHNlIHN3aXBlci5zbGlkZVRvKHN0b3BJbmRleCk7XG4gICAgfVxuICAgIGlmIChzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPT09ICdwcmV2Jykge1xuICAgICAgaWYgKHJhdGlvID4gMSAtIHBhcmFtcy5sb25nU3dpcGVzUmF0aW8pIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4ICsgaW5jcmVtZW50KTtcbiAgICAgIH0gZWxzZSBpZiAocmV3aW5kTGFzdEluZGV4ICE9PSBudWxsICYmIHJhdGlvIDwgMCAmJiBNYXRoLmFicyhyYXRpbykgPiBwYXJhbXMubG9uZ1N3aXBlc1JhdGlvKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHJld2luZExhc3RJbmRleCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXgpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBTaG9ydCBzd2lwZXNcbiAgICBpZiAoIXBhcmFtcy5zaG9ydFN3aXBlcykge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgaXNOYXZCdXR0b25UYXJnZXQgPSBzd2lwZXIubmF2aWdhdGlvbiAmJiAoZS50YXJnZXQgPT09IHN3aXBlci5uYXZpZ2F0aW9uLm5leHRFbCB8fCBlLnRhcmdldCA9PT0gc3dpcGVyLm5hdmlnYXRpb24ucHJldkVsKTtcbiAgICBpZiAoIWlzTmF2QnV0dG9uVGFyZ2V0KSB7XG4gICAgICBpZiAoc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAnbmV4dCcpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8ocmV3aW5kRmlyc3RJbmRleCAhPT0gbnVsbCA/IHJld2luZEZpcnN0SW5kZXggOiBzdG9wSW5kZXggKyBpbmNyZW1lbnQpO1xuICAgICAgfVxuICAgICAgaWYgKHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ3ByZXYnKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHJld2luZExhc3RJbmRleCAhPT0gbnVsbCA/IHJld2luZExhc3RJbmRleCA6IHN0b3BJbmRleCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChlLnRhcmdldCA9PT0gc3dpcGVyLm5hdmlnYXRpb24ubmV4dEVsKSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXggKyBpbmNyZW1lbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXgpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBvblJlc2l6ZSgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICBlbFxuICB9ID0gc3dpcGVyO1xuICBpZiAoZWwgJiYgZWwub2Zmc2V0V2lkdGggPT09IDApIHJldHVybjtcblxuICAvLyBCcmVha3BvaW50c1xuICBpZiAocGFyYW1zLmJyZWFrcG9pbnRzKSB7XG4gICAgc3dpcGVyLnNldEJyZWFrcG9pbnQoKTtcbiAgfVxuXG4gIC8vIFNhdmUgbG9ja3NcbiAgY29uc3Qge1xuICAgIGFsbG93U2xpZGVOZXh0LFxuICAgIGFsbG93U2xpZGVQcmV2LFxuICAgIHNuYXBHcmlkXG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IGlzVmlydHVhbCA9IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkO1xuXG4gIC8vIERpc2FibGUgbG9ja3Mgb24gcmVzaXplXG4gIHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9IHRydWU7XG4gIHN3aXBlci5hbGxvd1NsaWRlUHJldiA9IHRydWU7XG4gIHN3aXBlci51cGRhdGVTaXplKCk7XG4gIHN3aXBlci51cGRhdGVTbGlkZXMoKTtcbiAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgY29uc3QgaXNWaXJ0dWFsTG9vcCA9IGlzVmlydHVhbCAmJiBwYXJhbXMubG9vcDtcbiAgaWYgKChwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nIHx8IHBhcmFtcy5zbGlkZXNQZXJWaWV3ID4gMSkgJiYgc3dpcGVyLmlzRW5kICYmICFzd2lwZXIuaXNCZWdpbm5pbmcgJiYgIXN3aXBlci5wYXJhbXMuY2VudGVyZWRTbGlkZXMgJiYgIWlzVmlydHVhbExvb3ApIHtcbiAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIDEsIDAsIGZhbHNlLCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wICYmICFpc1ZpcnR1YWwpIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvTG9vcChzd2lwZXIucmVhbEluZGV4LCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCwgMCwgZmFsc2UsIHRydWUpO1xuICAgIH1cbiAgfVxuICBpZiAoc3dpcGVyLmF1dG9wbGF5ICYmIHN3aXBlci5hdXRvcGxheS5ydW5uaW5nICYmIHN3aXBlci5hdXRvcGxheS5wYXVzZWQpIHtcbiAgICBjbGVhclRpbWVvdXQoc3dpcGVyLmF1dG9wbGF5LnJlc2l6ZVRpbWVvdXQpO1xuICAgIHN3aXBlci5hdXRvcGxheS5yZXNpemVUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBpZiAoc3dpcGVyLmF1dG9wbGF5ICYmIHN3aXBlci5hdXRvcGxheS5ydW5uaW5nICYmIHN3aXBlci5hdXRvcGxheS5wYXVzZWQpIHtcbiAgICAgICAgc3dpcGVyLmF1dG9wbGF5LnJlc3VtZSgpO1xuICAgICAgfVxuICAgIH0sIDUwMCk7XG4gIH1cbiAgLy8gUmV0dXJuIGxvY2tzIGFmdGVyIHJlc2l6ZVxuICBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPSBhbGxvd1NsaWRlUHJldjtcbiAgc3dpcGVyLmFsbG93U2xpZGVOZXh0ID0gYWxsb3dTbGlkZU5leHQ7XG4gIGlmIChzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc25hcEdyaWQgIT09IHN3aXBlci5zbmFwR3JpZCkge1xuICAgIHN3aXBlci5jaGVja092ZXJmbG93KCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gb25DbGljayhlKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGlmICghc3dpcGVyLmVuYWJsZWQpIHJldHVybjtcbiAgaWYgKCFzd2lwZXIuYWxsb3dDbGljaykge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLnByZXZlbnRDbGlja3MpIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5wcmV2ZW50Q2xpY2tzUHJvcGFnYXRpb24gJiYgc3dpcGVyLmFuaW1hdGluZykge1xuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIG9uU2Nyb2xsKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgd3JhcHBlckVsLFxuICAgIHJ0bFRyYW5zbGF0ZSxcbiAgICBlbmFibGVkXG4gIH0gPSBzd2lwZXI7XG4gIGlmICghZW5hYmxlZCkgcmV0dXJuO1xuICBzd2lwZXIucHJldmlvdXNUcmFuc2xhdGUgPSBzd2lwZXIudHJhbnNsYXRlO1xuICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgc3dpcGVyLnRyYW5zbGF0ZSA9IC13cmFwcGVyRWwuc2Nyb2xsTGVmdDtcbiAgfSBlbHNlIHtcbiAgICBzd2lwZXIudHJhbnNsYXRlID0gLXdyYXBwZXJFbC5zY3JvbGxUb3A7XG4gIH1cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gIGlmIChzd2lwZXIudHJhbnNsYXRlID09PSAwKSBzd2lwZXIudHJhbnNsYXRlID0gMDtcbiAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gIGxldCBuZXdQcm9ncmVzcztcbiAgY29uc3QgdHJhbnNsYXRlc0RpZmYgPSBzd2lwZXIubWF4VHJhbnNsYXRlKCkgLSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG4gIGlmICh0cmFuc2xhdGVzRGlmZiA9PT0gMCkge1xuICAgIG5ld1Byb2dyZXNzID0gMDtcbiAgfSBlbHNlIHtcbiAgICBuZXdQcm9ncmVzcyA9IChzd2lwZXIudHJhbnNsYXRlIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSAvIHRyYW5zbGF0ZXNEaWZmO1xuICB9XG4gIGlmIChuZXdQcm9ncmVzcyAhPT0gc3dpcGVyLnByb2dyZXNzKSB7XG4gICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKHJ0bFRyYW5zbGF0ZSA/IC1zd2lwZXIudHJhbnNsYXRlIDogc3dpcGVyLnRyYW5zbGF0ZSk7XG4gIH1cbiAgc3dpcGVyLmVtaXQoJ3NldFRyYW5zbGF0ZScsIHN3aXBlci50cmFuc2xhdGUsIGZhbHNlKTtcbn1cblxuZnVuY3Rpb24gb25Mb2FkKGUpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgcHJvY2Vzc0xhenlQcmVsb2FkZXIoc3dpcGVyLCBlLnRhcmdldCk7XG4gIGlmIChzd2lwZXIucGFyYW1zLmNzc01vZGUgfHwgc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ICE9PSAnYXV0bycgJiYgIXN3aXBlci5wYXJhbXMuYXV0b0hlaWdodCkge1xuICAgIHJldHVybjtcbiAgfVxuICBzd2lwZXIudXBkYXRlKCk7XG59XG5cbmZ1bmN0aW9uIG9uRG9jdW1lbnRUb3VjaFN0YXJ0KCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBpZiAoc3dpcGVyLmRvY3VtZW50VG91Y2hIYW5kbGVyUHJvY2VlZGVkKSByZXR1cm47XG4gIHN3aXBlci5kb2N1bWVudFRvdWNoSGFuZGxlclByb2NlZWRlZCA9IHRydWU7XG4gIGlmIChzd2lwZXIucGFyYW1zLnRvdWNoUmVsZWFzZU9uRWRnZXMpIHtcbiAgICBzd2lwZXIuZWwuc3R5bGUudG91Y2hBY3Rpb24gPSAnYXV0byc7XG4gIH1cbn1cblxuY29uc3QgZXZlbnRzID0gKHN3aXBlciwgbWV0aG9kKSA9PiB7XG4gIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICBlbCxcbiAgICB3cmFwcGVyRWwsXG4gICAgZGV2aWNlXG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IGNhcHR1cmUgPSAhIXBhcmFtcy5uZXN0ZWQ7XG4gIGNvbnN0IGRvbU1ldGhvZCA9IG1ldGhvZCA9PT0gJ29uJyA/ICdhZGRFdmVudExpc3RlbmVyJyA6ICdyZW1vdmVFdmVudExpc3RlbmVyJztcbiAgY29uc3Qgc3dpcGVyTWV0aG9kID0gbWV0aG9kO1xuICBpZiAoIWVsIHx8IHR5cGVvZiBlbCA9PT0gJ3N0cmluZycpIHJldHVybjtcblxuICAvLyBUb3VjaCBFdmVudHNcbiAgZG9jdW1lbnRbZG9tTWV0aG9kXSgndG91Y2hzdGFydCcsIHN3aXBlci5vbkRvY3VtZW50VG91Y2hTdGFydCwge1xuICAgIHBhc3NpdmU6IGZhbHNlLFxuICAgIGNhcHR1cmVcbiAgfSk7XG4gIGVsW2RvbU1ldGhvZF0oJ3RvdWNoc3RhcnQnLCBzd2lwZXIub25Ub3VjaFN0YXJ0LCB7XG4gICAgcGFzc2l2ZTogZmFsc2VcbiAgfSk7XG4gIGVsW2RvbU1ldGhvZF0oJ3BvaW50ZXJkb3duJywgc3dpcGVyLm9uVG91Y2hTdGFydCwge1xuICAgIHBhc3NpdmU6IGZhbHNlXG4gIH0pO1xuICBkb2N1bWVudFtkb21NZXRob2RdKCd0b3VjaG1vdmUnLCBzd2lwZXIub25Ub3VjaE1vdmUsIHtcbiAgICBwYXNzaXZlOiBmYWxzZSxcbiAgICBjYXB0dXJlXG4gIH0pO1xuICBkb2N1bWVudFtkb21NZXRob2RdKCdwb2ludGVybW92ZScsIHN3aXBlci5vblRvdWNoTW92ZSwge1xuICAgIHBhc3NpdmU6IGZhbHNlLFxuICAgIGNhcHR1cmVcbiAgfSk7XG4gIGRvY3VtZW50W2RvbU1ldGhvZF0oJ3RvdWNoZW5kJywgc3dpcGVyLm9uVG91Y2hFbmQsIHtcbiAgICBwYXNzaXZlOiB0cnVlXG4gIH0pO1xuICBkb2N1bWVudFtkb21NZXRob2RdKCdwb2ludGVydXAnLCBzd2lwZXIub25Ub3VjaEVuZCwge1xuICAgIHBhc3NpdmU6IHRydWVcbiAgfSk7XG4gIGRvY3VtZW50W2RvbU1ldGhvZF0oJ3BvaW50ZXJjYW5jZWwnLCBzd2lwZXIub25Ub3VjaEVuZCwge1xuICAgIHBhc3NpdmU6IHRydWVcbiAgfSk7XG4gIGRvY3VtZW50W2RvbU1ldGhvZF0oJ3RvdWNoY2FuY2VsJywgc3dpcGVyLm9uVG91Y2hFbmQsIHtcbiAgICBwYXNzaXZlOiB0cnVlXG4gIH0pO1xuICBkb2N1bWVudFtkb21NZXRob2RdKCdwb2ludGVyb3V0Jywgc3dpcGVyLm9uVG91Y2hFbmQsIHtcbiAgICBwYXNzaXZlOiB0cnVlXG4gIH0pO1xuICBkb2N1bWVudFtkb21NZXRob2RdKCdwb2ludGVybGVhdmUnLCBzd2lwZXIub25Ub3VjaEVuZCwge1xuICAgIHBhc3NpdmU6IHRydWVcbiAgfSk7XG4gIGRvY3VtZW50W2RvbU1ldGhvZF0oJ2NvbnRleHRtZW51Jywgc3dpcGVyLm9uVG91Y2hFbmQsIHtcbiAgICBwYXNzaXZlOiB0cnVlXG4gIH0pO1xuXG4gIC8vIFByZXZlbnQgTGlua3MgQ2xpY2tzXG4gIGlmIChwYXJhbXMucHJldmVudENsaWNrcyB8fCBwYXJhbXMucHJldmVudENsaWNrc1Byb3BhZ2F0aW9uKSB7XG4gICAgZWxbZG9tTWV0aG9kXSgnY2xpY2snLCBzd2lwZXIub25DbGljaywgdHJ1ZSk7XG4gIH1cbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgd3JhcHBlckVsW2RvbU1ldGhvZF0oJ3Njcm9sbCcsIHN3aXBlci5vblNjcm9sbCk7XG4gIH1cblxuICAvLyBSZXNpemUgaGFuZGxlclxuICBpZiAocGFyYW1zLnVwZGF0ZU9uV2luZG93UmVzaXplKSB7XG4gICAgc3dpcGVyW3N3aXBlck1ldGhvZF0oZGV2aWNlLmlvcyB8fCBkZXZpY2UuYW5kcm9pZCA/ICdyZXNpemUgb3JpZW50YXRpb25jaGFuZ2Ugb2JzZXJ2ZXJVcGRhdGUnIDogJ3Jlc2l6ZSBvYnNlcnZlclVwZGF0ZScsIG9uUmVzaXplLCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBzd2lwZXJbc3dpcGVyTWV0aG9kXSgnb2JzZXJ2ZXJVcGRhdGUnLCBvblJlc2l6ZSwgdHJ1ZSk7XG4gIH1cblxuICAvLyBJbWFnZXMgbG9hZGVyXG4gIGVsW2RvbU1ldGhvZF0oJ2xvYWQnLCBzd2lwZXIub25Mb2FkLCB7XG4gICAgY2FwdHVyZTogdHJ1ZVxuICB9KTtcbn07XG5mdW5jdGlvbiBhdHRhY2hFdmVudHMoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXNcbiAgfSA9IHN3aXBlcjtcbiAgc3dpcGVyLm9uVG91Y2hTdGFydCA9IG9uVG91Y2hTdGFydC5iaW5kKHN3aXBlcik7XG4gIHN3aXBlci5vblRvdWNoTW92ZSA9IG9uVG91Y2hNb3ZlLmJpbmQoc3dpcGVyKTtcbiAgc3dpcGVyLm9uVG91Y2hFbmQgPSBvblRvdWNoRW5kLmJpbmQoc3dpcGVyKTtcbiAgc3dpcGVyLm9uRG9jdW1lbnRUb3VjaFN0YXJ0ID0gb25Eb2N1bWVudFRvdWNoU3RhcnQuYmluZChzd2lwZXIpO1xuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICBzd2lwZXIub25TY3JvbGwgPSBvblNjcm9sbC5iaW5kKHN3aXBlcik7XG4gIH1cbiAgc3dpcGVyLm9uQ2xpY2sgPSBvbkNsaWNrLmJpbmQoc3dpcGVyKTtcbiAgc3dpcGVyLm9uTG9hZCA9IG9uTG9hZC5iaW5kKHN3aXBlcik7XG4gIGV2ZW50cyhzd2lwZXIsICdvbicpO1xufVxuZnVuY3Rpb24gZGV0YWNoRXZlbnRzKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBldmVudHMoc3dpcGVyLCAnb2ZmJyk7XG59XG52YXIgZXZlbnRzJDEgPSB7XG4gIGF0dGFjaEV2ZW50cyxcbiAgZGV0YWNoRXZlbnRzXG59O1xuXG5jb25zdCBpc0dyaWRFbmFibGVkID0gKHN3aXBlciwgcGFyYW1zKSA9PiB7XG4gIHJldHVybiBzd2lwZXIuZ3JpZCAmJiBwYXJhbXMuZ3JpZCAmJiBwYXJhbXMuZ3JpZC5yb3dzID4gMTtcbn07XG5mdW5jdGlvbiBzZXRCcmVha3BvaW50KCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcmVhbEluZGV4LFxuICAgIGluaXRpYWxpemVkLFxuICAgIHBhcmFtcyxcbiAgICBlbFxuICB9ID0gc3dpcGVyO1xuICBjb25zdCBicmVha3BvaW50cyA9IHBhcmFtcy5icmVha3BvaW50cztcbiAgaWYgKCFicmVha3BvaW50cyB8fCBicmVha3BvaW50cyAmJiBPYmplY3Qua2V5cyhicmVha3BvaW50cykubGVuZ3RoID09PSAwKSByZXR1cm47XG5cbiAgLy8gR2V0IGJyZWFrcG9pbnQgZm9yIHdpbmRvdyB3aWR0aCBhbmQgdXBkYXRlIHBhcmFtZXRlcnNcbiAgY29uc3QgYnJlYWtwb2ludCA9IHN3aXBlci5nZXRCcmVha3BvaW50KGJyZWFrcG9pbnRzLCBzd2lwZXIucGFyYW1zLmJyZWFrcG9pbnRzQmFzZSwgc3dpcGVyLmVsKTtcbiAgaWYgKCFicmVha3BvaW50IHx8IHN3aXBlci5jdXJyZW50QnJlYWtwb2ludCA9PT0gYnJlYWtwb2ludCkgcmV0dXJuO1xuICBjb25zdCBicmVha3BvaW50T25seVBhcmFtcyA9IGJyZWFrcG9pbnQgaW4gYnJlYWtwb2ludHMgPyBicmVha3BvaW50c1ticmVha3BvaW50XSA6IHVuZGVmaW5lZDtcbiAgY29uc3QgYnJlYWtwb2ludFBhcmFtcyA9IGJyZWFrcG9pbnRPbmx5UGFyYW1zIHx8IHN3aXBlci5vcmlnaW5hbFBhcmFtcztcbiAgY29uc3Qgd2FzTXVsdGlSb3cgPSBpc0dyaWRFbmFibGVkKHN3aXBlciwgcGFyYW1zKTtcbiAgY29uc3QgaXNNdWx0aVJvdyA9IGlzR3JpZEVuYWJsZWQoc3dpcGVyLCBicmVha3BvaW50UGFyYW1zKTtcbiAgY29uc3Qgd2FzR3JhYkN1cnNvciA9IHN3aXBlci5wYXJhbXMuZ3JhYkN1cnNvcjtcbiAgY29uc3QgaXNHcmFiQ3Vyc29yID0gYnJlYWtwb2ludFBhcmFtcy5ncmFiQ3Vyc29yO1xuICBjb25zdCB3YXNFbmFibGVkID0gcGFyYW1zLmVuYWJsZWQ7XG4gIGlmICh3YXNNdWx0aVJvdyAmJiAhaXNNdWx0aVJvdykge1xuICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoYCR7cGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9Z3JpZGAsIGAke3BhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfWdyaWQtY29sdW1uYCk7XG4gICAgc3dpcGVyLmVtaXRDb250YWluZXJDbGFzc2VzKCk7XG4gIH0gZWxzZSBpZiAoIXdhc011bHRpUm93ICYmIGlzTXVsdGlSb3cpIHtcbiAgICBlbC5jbGFzc0xpc3QuYWRkKGAke3BhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfWdyaWRgKTtcbiAgICBpZiAoYnJlYWtwb2ludFBhcmFtcy5ncmlkLmZpbGwgJiYgYnJlYWtwb2ludFBhcmFtcy5ncmlkLmZpbGwgPT09ICdjb2x1bW4nIHx8ICFicmVha3BvaW50UGFyYW1zLmdyaWQuZmlsbCAmJiBwYXJhbXMuZ3JpZC5maWxsID09PSAnY29sdW1uJykge1xuICAgICAgZWwuY2xhc3NMaXN0LmFkZChgJHtwYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc31ncmlkLWNvbHVtbmApO1xuICAgIH1cbiAgICBzd2lwZXIuZW1pdENvbnRhaW5lckNsYXNzZXMoKTtcbiAgfVxuICBpZiAod2FzR3JhYkN1cnNvciAmJiAhaXNHcmFiQ3Vyc29yKSB7XG4gICAgc3dpcGVyLnVuc2V0R3JhYkN1cnNvcigpO1xuICB9IGVsc2UgaWYgKCF3YXNHcmFiQ3Vyc29yICYmIGlzR3JhYkN1cnNvcikge1xuICAgIHN3aXBlci5zZXRHcmFiQ3Vyc29yKCk7XG4gIH1cblxuICAvLyBUb2dnbGUgbmF2aWdhdGlvbiwgcGFnaW5hdGlvbiwgc2Nyb2xsYmFyXG4gIFsnbmF2aWdhdGlvbicsICdwYWdpbmF0aW9uJywgJ3Njcm9sbGJhciddLmZvckVhY2gocHJvcCA9PiB7XG4gICAgaWYgKHR5cGVvZiBicmVha3BvaW50UGFyYW1zW3Byb3BdID09PSAndW5kZWZpbmVkJykgcmV0dXJuO1xuICAgIGNvbnN0IHdhc01vZHVsZUVuYWJsZWQgPSBwYXJhbXNbcHJvcF0gJiYgcGFyYW1zW3Byb3BdLmVuYWJsZWQ7XG4gICAgY29uc3QgaXNNb2R1bGVFbmFibGVkID0gYnJlYWtwb2ludFBhcmFtc1twcm9wXSAmJiBicmVha3BvaW50UGFyYW1zW3Byb3BdLmVuYWJsZWQ7XG4gICAgaWYgKHdhc01vZHVsZUVuYWJsZWQgJiYgIWlzTW9kdWxlRW5hYmxlZCkge1xuICAgICAgc3dpcGVyW3Byb3BdLmRpc2FibGUoKTtcbiAgICB9XG4gICAgaWYgKCF3YXNNb2R1bGVFbmFibGVkICYmIGlzTW9kdWxlRW5hYmxlZCkge1xuICAgICAgc3dpcGVyW3Byb3BdLmVuYWJsZSgpO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGRpcmVjdGlvbkNoYW5nZWQgPSBicmVha3BvaW50UGFyYW1zLmRpcmVjdGlvbiAmJiBicmVha3BvaW50UGFyYW1zLmRpcmVjdGlvbiAhPT0gcGFyYW1zLmRpcmVjdGlvbjtcbiAgY29uc3QgbmVlZHNSZUxvb3AgPSBwYXJhbXMubG9vcCAmJiAoYnJlYWtwb2ludFBhcmFtcy5zbGlkZXNQZXJWaWV3ICE9PSBwYXJhbXMuc2xpZGVzUGVyVmlldyB8fCBkaXJlY3Rpb25DaGFuZ2VkKTtcbiAgY29uc3Qgd2FzTG9vcCA9IHBhcmFtcy5sb29wO1xuICBpZiAoZGlyZWN0aW9uQ2hhbmdlZCAmJiBpbml0aWFsaXplZCkge1xuICAgIHN3aXBlci5jaGFuZ2VEaXJlY3Rpb24oKTtcbiAgfVxuICBleHRlbmQoc3dpcGVyLnBhcmFtcywgYnJlYWtwb2ludFBhcmFtcyk7XG4gIGNvbnN0IGlzRW5hYmxlZCA9IHN3aXBlci5wYXJhbXMuZW5hYmxlZDtcbiAgY29uc3QgaGFzTG9vcCA9IHN3aXBlci5wYXJhbXMubG9vcDtcbiAgT2JqZWN0LmFzc2lnbihzd2lwZXIsIHtcbiAgICBhbGxvd1RvdWNoTW92ZTogc3dpcGVyLnBhcmFtcy5hbGxvd1RvdWNoTW92ZSxcbiAgICBhbGxvd1NsaWRlTmV4dDogc3dpcGVyLnBhcmFtcy5hbGxvd1NsaWRlTmV4dCxcbiAgICBhbGxvd1NsaWRlUHJldjogc3dpcGVyLnBhcmFtcy5hbGxvd1NsaWRlUHJldlxuICB9KTtcbiAgaWYgKHdhc0VuYWJsZWQgJiYgIWlzRW5hYmxlZCkge1xuICAgIHN3aXBlci5kaXNhYmxlKCk7XG4gIH0gZWxzZSBpZiAoIXdhc0VuYWJsZWQgJiYgaXNFbmFibGVkKSB7XG4gICAgc3dpcGVyLmVuYWJsZSgpO1xuICB9XG4gIHN3aXBlci5jdXJyZW50QnJlYWtwb2ludCA9IGJyZWFrcG9pbnQ7XG4gIHN3aXBlci5lbWl0KCdfYmVmb3JlQnJlYWtwb2ludCcsIGJyZWFrcG9pbnRQYXJhbXMpO1xuICBpZiAoaW5pdGlhbGl6ZWQpIHtcbiAgICBpZiAobmVlZHNSZUxvb3ApIHtcbiAgICAgIHN3aXBlci5sb29wRGVzdHJveSgpO1xuICAgICAgc3dpcGVyLmxvb3BDcmVhdGUocmVhbEluZGV4KTtcbiAgICAgIHN3aXBlci51cGRhdGVTbGlkZXMoKTtcbiAgICB9IGVsc2UgaWYgKCF3YXNMb29wICYmIGhhc0xvb3ApIHtcbiAgICAgIHN3aXBlci5sb29wQ3JlYXRlKHJlYWxJbmRleCk7XG4gICAgICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG4gICAgfSBlbHNlIGlmICh3YXNMb29wICYmICFoYXNMb29wKSB7XG4gICAgICBzd2lwZXIubG9vcERlc3Ryb3koKTtcbiAgICB9XG4gIH1cbiAgc3dpcGVyLmVtaXQoJ2JyZWFrcG9pbnQnLCBicmVha3BvaW50UGFyYW1zKTtcbn1cblxuZnVuY3Rpb24gZ2V0QnJlYWtwb2ludChicmVha3BvaW50cywgYmFzZSwgY29udGFpbmVyRWwpIHtcbiAgaWYgKGJhc2UgPT09IHZvaWQgMCkge1xuICAgIGJhc2UgPSAnd2luZG93JztcbiAgfVxuICBpZiAoIWJyZWFrcG9pbnRzIHx8IGJhc2UgPT09ICdjb250YWluZXInICYmICFjb250YWluZXJFbCkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgbGV0IGJyZWFrcG9pbnQgPSBmYWxzZTtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGNvbnN0IGN1cnJlbnRIZWlnaHQgPSBiYXNlID09PSAnd2luZG93JyA/IHdpbmRvdy5pbm5lckhlaWdodCA6IGNvbnRhaW5lckVsLmNsaWVudEhlaWdodDtcbiAgY29uc3QgcG9pbnRzID0gT2JqZWN0LmtleXMoYnJlYWtwb2ludHMpLm1hcChwb2ludCA9PiB7XG4gICAgaWYgKHR5cGVvZiBwb2ludCA9PT0gJ3N0cmluZycgJiYgcG9pbnQuaW5kZXhPZignQCcpID09PSAwKSB7XG4gICAgICBjb25zdCBtaW5SYXRpbyA9IHBhcnNlRmxvYXQocG9pbnQuc3Vic3RyKDEpKTtcbiAgICAgIGNvbnN0IHZhbHVlID0gY3VycmVudEhlaWdodCAqIG1pblJhdGlvO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIHBvaW50XG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWU6IHBvaW50LFxuICAgICAgcG9pbnRcbiAgICB9O1xuICB9KTtcbiAgcG9pbnRzLnNvcnQoKGEsIGIpID0+IHBhcnNlSW50KGEudmFsdWUsIDEwKSAtIHBhcnNlSW50KGIudmFsdWUsIDEwKSk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgY29uc3Qge1xuICAgICAgcG9pbnQsXG4gICAgICB2YWx1ZVxuICAgIH0gPSBwb2ludHNbaV07XG4gICAgaWYgKGJhc2UgPT09ICd3aW5kb3cnKSB7XG4gICAgICBpZiAod2luZG93Lm1hdGNoTWVkaWEoYChtaW4td2lkdGg6ICR7dmFsdWV9cHgpYCkubWF0Y2hlcykge1xuICAgICAgICBicmVha3BvaW50ID0gcG9pbnQ7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh2YWx1ZSA8PSBjb250YWluZXJFbC5jbGllbnRXaWR0aCkge1xuICAgICAgYnJlYWtwb2ludCA9IHBvaW50O1xuICAgIH1cbiAgfVxuICByZXR1cm4gYnJlYWtwb2ludCB8fCAnbWF4Jztcbn1cblxudmFyIGJyZWFrcG9pbnRzID0ge1xuICBzZXRCcmVha3BvaW50LFxuICBnZXRCcmVha3BvaW50XG59O1xuXG5mdW5jdGlvbiBwcmVwYXJlQ2xhc3NlcyhlbnRyaWVzLCBwcmVmaXgpIHtcbiAgY29uc3QgcmVzdWx0Q2xhc3NlcyA9IFtdO1xuICBlbnRyaWVzLmZvckVhY2goaXRlbSA9PiB7XG4gICAgaWYgKHR5cGVvZiBpdGVtID09PSAnb2JqZWN0Jykge1xuICAgICAgT2JqZWN0LmtleXMoaXRlbSkuZm9yRWFjaChjbGFzc05hbWVzID0+IHtcbiAgICAgICAgaWYgKGl0ZW1bY2xhc3NOYW1lc10pIHtcbiAgICAgICAgICByZXN1bHRDbGFzc2VzLnB1c2gocHJlZml4ICsgY2xhc3NOYW1lcyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGl0ZW0gPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXN1bHRDbGFzc2VzLnB1c2gocHJlZml4ICsgaXRlbSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc3VsdENsYXNzZXM7XG59XG5mdW5jdGlvbiBhZGRDbGFzc2VzKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgY2xhc3NOYW1lcyxcbiAgICBwYXJhbXMsXG4gICAgcnRsLFxuICAgIGVsLFxuICAgIGRldmljZVxuICB9ID0gc3dpcGVyO1xuICAvLyBwcmV0dGllci1pZ25vcmVcbiAgY29uc3Qgc3VmZml4ZXMgPSBwcmVwYXJlQ2xhc3NlcyhbJ2luaXRpYWxpemVkJywgcGFyYW1zLmRpcmVjdGlvbiwge1xuICAgICdmcmVlLW1vZGUnOiBzd2lwZXIucGFyYW1zLmZyZWVNb2RlICYmIHBhcmFtcy5mcmVlTW9kZS5lbmFibGVkXG4gIH0sIHtcbiAgICAnYXV0b2hlaWdodCc6IHBhcmFtcy5hdXRvSGVpZ2h0XG4gIH0sIHtcbiAgICAncnRsJzogcnRsXG4gIH0sIHtcbiAgICAnZ3JpZCc6IHBhcmFtcy5ncmlkICYmIHBhcmFtcy5ncmlkLnJvd3MgPiAxXG4gIH0sIHtcbiAgICAnZ3JpZC1jb2x1bW4nOiBwYXJhbXMuZ3JpZCAmJiBwYXJhbXMuZ3JpZC5yb3dzID4gMSAmJiBwYXJhbXMuZ3JpZC5maWxsID09PSAnY29sdW1uJ1xuICB9LCB7XG4gICAgJ2FuZHJvaWQnOiBkZXZpY2UuYW5kcm9pZFxuICB9LCB7XG4gICAgJ2lvcyc6IGRldmljZS5pb3NcbiAgfSwge1xuICAgICdjc3MtbW9kZSc6IHBhcmFtcy5jc3NNb2RlXG4gIH0sIHtcbiAgICAnY2VudGVyZWQnOiBwYXJhbXMuY3NzTW9kZSAmJiBwYXJhbXMuY2VudGVyZWRTbGlkZXNcbiAgfSwge1xuICAgICd3YXRjaC1wcm9ncmVzcyc6IHBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzXG4gIH1dLCBwYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcyk7XG4gIGNsYXNzTmFtZXMucHVzaCguLi5zdWZmaXhlcyk7XG4gIGVsLmNsYXNzTGlzdC5hZGQoLi4uY2xhc3NOYW1lcyk7XG4gIHN3aXBlci5lbWl0Q29udGFpbmVyQ2xhc3NlcygpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVDbGFzc2VzKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgZWwsXG4gICAgY2xhc3NOYW1lc1xuICB9ID0gc3dpcGVyO1xuICBpZiAoIWVsIHx8IHR5cGVvZiBlbCA9PT0gJ3N0cmluZycpIHJldHVybjtcbiAgZWwuY2xhc3NMaXN0LnJlbW92ZSguLi5jbGFzc05hbWVzKTtcbiAgc3dpcGVyLmVtaXRDb250YWluZXJDbGFzc2VzKCk7XG59XG5cbnZhciBjbGFzc2VzID0ge1xuICBhZGRDbGFzc2VzLFxuICByZW1vdmVDbGFzc2VzXG59O1xuXG5mdW5jdGlvbiBjaGVja092ZXJmbG93KCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgaXNMb2NrZWQ6IHdhc0xvY2tlZCxcbiAgICBwYXJhbXNcbiAgfSA9IHN3aXBlcjtcbiAgY29uc3Qge1xuICAgIHNsaWRlc09mZnNldEJlZm9yZVxuICB9ID0gcGFyYW1zO1xuICBpZiAoc2xpZGVzT2Zmc2V0QmVmb3JlKSB7XG4gICAgY29uc3QgbGFzdFNsaWRlSW5kZXggPSBzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIDE7XG4gICAgY29uc3QgbGFzdFNsaWRlUmlnaHRFZGdlID0gc3dpcGVyLnNsaWRlc0dyaWRbbGFzdFNsaWRlSW5kZXhdICsgc3dpcGVyLnNsaWRlc1NpemVzR3JpZFtsYXN0U2xpZGVJbmRleF0gKyBzbGlkZXNPZmZzZXRCZWZvcmUgKiAyO1xuICAgIHN3aXBlci5pc0xvY2tlZCA9IHN3aXBlci5zaXplID4gbGFzdFNsaWRlUmlnaHRFZGdlO1xuICB9IGVsc2Uge1xuICAgIHN3aXBlci5pc0xvY2tlZCA9IHN3aXBlci5zbmFwR3JpZC5sZW5ndGggPT09IDE7XG4gIH1cbiAgaWYgKHBhcmFtcy5hbGxvd1NsaWRlTmV4dCA9PT0gdHJ1ZSkge1xuICAgIHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9ICFzd2lwZXIuaXNMb2NrZWQ7XG4gIH1cbiAgaWYgKHBhcmFtcy5hbGxvd1NsaWRlUHJldiA9PT0gdHJ1ZSkge1xuICAgIHN3aXBlci5hbGxvd1NsaWRlUHJldiA9ICFzd2lwZXIuaXNMb2NrZWQ7XG4gIH1cbiAgaWYgKHdhc0xvY2tlZCAmJiB3YXNMb2NrZWQgIT09IHN3aXBlci5pc0xvY2tlZCkge1xuICAgIHN3aXBlci5pc0VuZCA9IGZhbHNlO1xuICB9XG4gIGlmICh3YXNMb2NrZWQgIT09IHN3aXBlci5pc0xvY2tlZCkge1xuICAgIHN3aXBlci5lbWl0KHN3aXBlci5pc0xvY2tlZCA/ICdsb2NrJyA6ICd1bmxvY2snKTtcbiAgfVxufVxudmFyIGNoZWNrT3ZlcmZsb3ckMSA9IHtcbiAgY2hlY2tPdmVyZmxvd1xufTtcblxudmFyIGRlZmF1bHRzID0ge1xuICBpbml0OiB0cnVlLFxuICBkaXJlY3Rpb246ICdob3Jpem9udGFsJyxcbiAgb25lV2F5TW92ZW1lbnQ6IGZhbHNlLFxuICBzd2lwZXJFbGVtZW50Tm9kZU5hbWU6ICdTV0lQRVItQ09OVEFJTkVSJyxcbiAgdG91Y2hFdmVudHNUYXJnZXQ6ICd3cmFwcGVyJyxcbiAgaW5pdGlhbFNsaWRlOiAwLFxuICBzcGVlZDogMzAwLFxuICBjc3NNb2RlOiBmYWxzZSxcbiAgdXBkYXRlT25XaW5kb3dSZXNpemU6IHRydWUsXG4gIHJlc2l6ZU9ic2VydmVyOiB0cnVlLFxuICBuZXN0ZWQ6IGZhbHNlLFxuICBjcmVhdGVFbGVtZW50czogZmFsc2UsXG4gIGV2ZW50c1ByZWZpeDogJ3N3aXBlcicsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIGZvY3VzYWJsZUVsZW1lbnRzOiAnaW5wdXQsIHNlbGVjdCwgb3B0aW9uLCB0ZXh0YXJlYSwgYnV0dG9uLCB2aWRlbywgbGFiZWwnLFxuICAvLyBPdmVycmlkZXNcbiAgd2lkdGg6IG51bGwsXG4gIGhlaWdodDogbnVsbCxcbiAgLy9cbiAgcHJldmVudEludGVyYWN0aW9uT25UcmFuc2l0aW9uOiBmYWxzZSxcbiAgLy8gc3NyXG4gIHVzZXJBZ2VudDogbnVsbCxcbiAgdXJsOiBudWxsLFxuICAvLyBUbyBzdXBwb3J0IGlPUydzIHN3aXBlLXRvLWdvLWJhY2sgZ2VzdHVyZSAod2hlbiBiZWluZyB1c2VkIGluLWFwcCkuXG4gIGVkZ2VTd2lwZURldGVjdGlvbjogZmFsc2UsXG4gIGVkZ2VTd2lwZVRocmVzaG9sZDogMjAsXG4gIC8vIEF1dG9oZWlnaHRcbiAgYXV0b0hlaWdodDogZmFsc2UsXG4gIC8vIFNldCB3cmFwcGVyIHdpZHRoXG4gIHNldFdyYXBwZXJTaXplOiBmYWxzZSxcbiAgLy8gVmlydHVhbCBUcmFuc2xhdGVcbiAgdmlydHVhbFRyYW5zbGF0ZTogZmFsc2UsXG4gIC8vIEVmZmVjdHNcbiAgZWZmZWN0OiAnc2xpZGUnLFxuICAvLyAnc2xpZGUnIG9yICdmYWRlJyBvciAnY3ViZScgb3IgJ2NvdmVyZmxvdycgb3IgJ2ZsaXAnXG5cbiAgLy8gQnJlYWtwb2ludHNcbiAgYnJlYWtwb2ludHM6IHVuZGVmaW5lZCxcbiAgYnJlYWtwb2ludHNCYXNlOiAnd2luZG93JyxcbiAgLy8gU2xpZGVzIGdyaWRcbiAgc3BhY2VCZXR3ZWVuOiAwLFxuICBzbGlkZXNQZXJWaWV3OiAxLFxuICBzbGlkZXNQZXJHcm91cDogMSxcbiAgc2xpZGVzUGVyR3JvdXBTa2lwOiAwLFxuICBzbGlkZXNQZXJHcm91cEF1dG86IGZhbHNlLFxuICBjZW50ZXJlZFNsaWRlczogZmFsc2UsXG4gIGNlbnRlcmVkU2xpZGVzQm91bmRzOiBmYWxzZSxcbiAgc2xpZGVzT2Zmc2V0QmVmb3JlOiAwLFxuICAvLyBpbiBweFxuICBzbGlkZXNPZmZzZXRBZnRlcjogMCxcbiAgLy8gaW4gcHhcbiAgbm9ybWFsaXplU2xpZGVJbmRleDogdHJ1ZSxcbiAgY2VudGVySW5zdWZmaWNpZW50U2xpZGVzOiBmYWxzZSxcbiAgLy8gRGlzYWJsZSBzd2lwZXIgYW5kIGhpZGUgbmF2aWdhdGlvbiB3aGVuIGNvbnRhaW5lciBub3Qgb3ZlcmZsb3dcbiAgd2F0Y2hPdmVyZmxvdzogdHJ1ZSxcbiAgLy8gUm91bmQgbGVuZ3RoXG4gIHJvdW5kTGVuZ3RoczogZmFsc2UsXG4gIC8vIFRvdWNoZXNcbiAgdG91Y2hSYXRpbzogMSxcbiAgdG91Y2hBbmdsZTogNDUsXG4gIHNpbXVsYXRlVG91Y2g6IHRydWUsXG4gIHNob3J0U3dpcGVzOiB0cnVlLFxuICBsb25nU3dpcGVzOiB0cnVlLFxuICBsb25nU3dpcGVzUmF0aW86IDAuNSxcbiAgbG9uZ1N3aXBlc01zOiAzMDAsXG4gIGZvbGxvd0ZpbmdlcjogdHJ1ZSxcbiAgYWxsb3dUb3VjaE1vdmU6IHRydWUsXG4gIHRocmVzaG9sZDogNSxcbiAgdG91Y2hNb3ZlU3RvcFByb3BhZ2F0aW9uOiBmYWxzZSxcbiAgdG91Y2hTdGFydFByZXZlbnREZWZhdWx0OiB0cnVlLFxuICB0b3VjaFN0YXJ0Rm9yY2VQcmV2ZW50RGVmYXVsdDogZmFsc2UsXG4gIHRvdWNoUmVsZWFzZU9uRWRnZXM6IGZhbHNlLFxuICAvLyBVbmlxdWUgTmF2aWdhdGlvbiBFbGVtZW50c1xuICB1bmlxdWVOYXZFbGVtZW50czogdHJ1ZSxcbiAgLy8gUmVzaXN0YW5jZVxuICByZXNpc3RhbmNlOiB0cnVlLFxuICByZXNpc3RhbmNlUmF0aW86IDAuODUsXG4gIC8vIFByb2dyZXNzXG4gIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IGZhbHNlLFxuICAvLyBDdXJzb3JcbiAgZ3JhYkN1cnNvcjogZmFsc2UsXG4gIC8vIENsaWNrc1xuICBwcmV2ZW50Q2xpY2tzOiB0cnVlLFxuICBwcmV2ZW50Q2xpY2tzUHJvcGFnYXRpb246IHRydWUsXG4gIHNsaWRlVG9DbGlja2VkU2xpZGU6IGZhbHNlLFxuICAvLyBsb29wXG4gIGxvb3A6IGZhbHNlLFxuICBsb29wQWRkQmxhbmtTbGlkZXM6IHRydWUsXG4gIGxvb3BBZGRpdGlvbmFsU2xpZGVzOiAwLFxuICBsb29wUHJldmVudHNTbGlkaW5nOiB0cnVlLFxuICAvLyByZXdpbmRcbiAgcmV3aW5kOiBmYWxzZSxcbiAgLy8gU3dpcGluZy9ubyBzd2lwaW5nXG4gIGFsbG93U2xpZGVQcmV2OiB0cnVlLFxuICBhbGxvd1NsaWRlTmV4dDogdHJ1ZSxcbiAgc3dpcGVIYW5kbGVyOiBudWxsLFxuICAvLyAnLnN3aXBlLWhhbmRsZXInLFxuICBub1N3aXBpbmc6IHRydWUsXG4gIG5vU3dpcGluZ0NsYXNzOiAnc3dpcGVyLW5vLXN3aXBpbmcnLFxuICBub1N3aXBpbmdTZWxlY3RvcjogbnVsbCxcbiAgLy8gUGFzc2l2ZSBMaXN0ZW5lcnNcbiAgcGFzc2l2ZUxpc3RlbmVyczogdHJ1ZSxcbiAgbWF4QmFja2ZhY2VIaWRkZW5TbGlkZXM6IDEwLFxuICAvLyBOU1xuICBjb250YWluZXJNb2RpZmllckNsYXNzOiAnc3dpcGVyLScsXG4gIC8vIE5FV1xuICBzbGlkZUNsYXNzOiAnc3dpcGVyLXNsaWRlJyxcbiAgc2xpZGVCbGFua0NsYXNzOiAnc3dpcGVyLXNsaWRlLWJsYW5rJyxcbiAgc2xpZGVBY3RpdmVDbGFzczogJ3N3aXBlci1zbGlkZS1hY3RpdmUnLFxuICBzbGlkZVZpc2libGVDbGFzczogJ3N3aXBlci1zbGlkZS12aXNpYmxlJyxcbiAgc2xpZGVGdWxseVZpc2libGVDbGFzczogJ3N3aXBlci1zbGlkZS1mdWxseS12aXNpYmxlJyxcbiAgc2xpZGVOZXh0Q2xhc3M6ICdzd2lwZXItc2xpZGUtbmV4dCcsXG4gIHNsaWRlUHJldkNsYXNzOiAnc3dpcGVyLXNsaWRlLXByZXYnLFxuICB3cmFwcGVyQ2xhc3M6ICdzd2lwZXItd3JhcHBlcicsXG4gIGxhenlQcmVsb2FkZXJDbGFzczogJ3N3aXBlci1sYXp5LXByZWxvYWRlcicsXG4gIGxhenlQcmVsb2FkUHJldk5leHQ6IDAsXG4gIC8vIENhbGxiYWNrc1xuICBydW5DYWxsYmFja3NPbkluaXQ6IHRydWUsXG4gIC8vIEludGVybmFsc1xuICBfZW1pdENsYXNzZXM6IGZhbHNlXG59O1xuXG5mdW5jdGlvbiBtb2R1bGVFeHRlbmRQYXJhbXMocGFyYW1zLCBhbGxNb2R1bGVzUGFyYW1zKSB7XG4gIHJldHVybiBmdW5jdGlvbiBleHRlbmRQYXJhbXMob2JqKSB7XG4gICAgaWYgKG9iaiA9PT0gdm9pZCAwKSB7XG4gICAgICBvYmogPSB7fTtcbiAgICB9XG4gICAgY29uc3QgbW9kdWxlUGFyYW1OYW1lID0gT2JqZWN0LmtleXMob2JqKVswXTtcbiAgICBjb25zdCBtb2R1bGVQYXJhbXMgPSBvYmpbbW9kdWxlUGFyYW1OYW1lXTtcbiAgICBpZiAodHlwZW9mIG1vZHVsZVBhcmFtcyAhPT0gJ29iamVjdCcgfHwgbW9kdWxlUGFyYW1zID09PSBudWxsKSB7XG4gICAgICBleHRlbmQoYWxsTW9kdWxlc1BhcmFtcywgb2JqKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdID09PSB0cnVlKSB7XG4gICAgICBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSA9IHtcbiAgICAgICAgZW5hYmxlZDogdHJ1ZVxuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKG1vZHVsZVBhcmFtTmFtZSA9PT0gJ25hdmlnYXRpb24nICYmIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdICYmIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdLmVuYWJsZWQgJiYgIXBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdLnByZXZFbCAmJiAhcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0ubmV4dEVsKSB7XG4gICAgICBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXS5hdXRvID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKFsncGFnaW5hdGlvbicsICdzY3JvbGxiYXInXS5pbmRleE9mKG1vZHVsZVBhcmFtTmFtZSkgPj0gMCAmJiBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSAmJiBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXS5lbmFibGVkICYmICFwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXS5lbCkge1xuICAgICAgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0uYXV0byA9IHRydWU7XG4gICAgfVxuICAgIGlmICghKG1vZHVsZVBhcmFtTmFtZSBpbiBwYXJhbXMgJiYgJ2VuYWJsZWQnIGluIG1vZHVsZVBhcmFtcykpIHtcbiAgICAgIGV4dGVuZChhbGxNb2R1bGVzUGFyYW1zLCBvYmopO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdID09PSAnb2JqZWN0JyAmJiAhKCdlbmFibGVkJyBpbiBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSkpIHtcbiAgICAgIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdLmVuYWJsZWQgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoIXBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdKSBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSA9IHtcbiAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgfTtcbiAgICBleHRlbmQoYWxsTW9kdWxlc1BhcmFtcywgb2JqKTtcbiAgfTtcbn1cblxuLyogZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOiBcIm9mZlwiICovXG5jb25zdCBwcm90b3R5cGVzID0ge1xuICBldmVudHNFbWl0dGVyLFxuICB1cGRhdGUsXG4gIHRyYW5zbGF0ZSxcbiAgdHJhbnNpdGlvbixcbiAgc2xpZGUsXG4gIGxvb3AsXG4gIGdyYWJDdXJzb3IsXG4gIGV2ZW50czogZXZlbnRzJDEsXG4gIGJyZWFrcG9pbnRzLFxuICBjaGVja092ZXJmbG93OiBjaGVja092ZXJmbG93JDEsXG4gIGNsYXNzZXNcbn07XG5jb25zdCBleHRlbmRlZERlZmF1bHRzID0ge307XG5jbGFzcyBTd2lwZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBsZXQgZWw7XG4gICAgbGV0IHBhcmFtcztcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMSAmJiBhcmdzWzBdLmNvbnN0cnVjdG9yICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcmdzWzBdKS5zbGljZSg4LCAtMSkgPT09ICdPYmplY3QnKSB7XG4gICAgICBwYXJhbXMgPSBhcmdzWzBdO1xuICAgIH0gZWxzZSB7XG4gICAgICBbZWwsIHBhcmFtc10gPSBhcmdzO1xuICAgIH1cbiAgICBpZiAoIXBhcmFtcykgcGFyYW1zID0ge307XG4gICAgcGFyYW1zID0gZXh0ZW5kKHt9LCBwYXJhbXMpO1xuICAgIGlmIChlbCAmJiAhcGFyYW1zLmVsKSBwYXJhbXMuZWwgPSBlbDtcbiAgICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gICAgaWYgKHBhcmFtcy5lbCAmJiB0eXBlb2YgcGFyYW1zLmVsID09PSAnc3RyaW5nJyAmJiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHBhcmFtcy5lbCkubGVuZ3RoID4gMSkge1xuICAgICAgY29uc3Qgc3dpcGVycyA9IFtdO1xuICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChwYXJhbXMuZWwpLmZvckVhY2goY29udGFpbmVyRWwgPT4ge1xuICAgICAgICBjb25zdCBuZXdQYXJhbXMgPSBleHRlbmQoe30sIHBhcmFtcywge1xuICAgICAgICAgIGVsOiBjb250YWluZXJFbFxuICAgICAgICB9KTtcbiAgICAgICAgc3dpcGVycy5wdXNoKG5ldyBTd2lwZXIobmV3UGFyYW1zKSk7XG4gICAgICB9KTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdHJ1Y3Rvci1yZXR1cm5cbiAgICAgIHJldHVybiBzd2lwZXJzO1xuICAgIH1cblxuICAgIC8vIFN3aXBlciBJbnN0YW5jZVxuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgc3dpcGVyLl9fc3dpcGVyX18gPSB0cnVlO1xuICAgIHN3aXBlci5zdXBwb3J0ID0gZ2V0U3VwcG9ydCgpO1xuICAgIHN3aXBlci5kZXZpY2UgPSBnZXREZXZpY2Uoe1xuICAgICAgdXNlckFnZW50OiBwYXJhbXMudXNlckFnZW50XG4gICAgfSk7XG4gICAgc3dpcGVyLmJyb3dzZXIgPSBnZXRCcm93c2VyKCk7XG4gICAgc3dpcGVyLmV2ZW50c0xpc3RlbmVycyA9IHt9O1xuICAgIHN3aXBlci5ldmVudHNBbnlMaXN0ZW5lcnMgPSBbXTtcbiAgICBzd2lwZXIubW9kdWxlcyA9IFsuLi5zd2lwZXIuX19tb2R1bGVzX19dO1xuICAgIGlmIChwYXJhbXMubW9kdWxlcyAmJiBBcnJheS5pc0FycmF5KHBhcmFtcy5tb2R1bGVzKSkge1xuICAgICAgc3dpcGVyLm1vZHVsZXMucHVzaCguLi5wYXJhbXMubW9kdWxlcyk7XG4gICAgfVxuICAgIGNvbnN0IGFsbE1vZHVsZXNQYXJhbXMgPSB7fTtcbiAgICBzd2lwZXIubW9kdWxlcy5mb3JFYWNoKG1vZCA9PiB7XG4gICAgICBtb2Qoe1xuICAgICAgICBwYXJhbXMsXG4gICAgICAgIHN3aXBlcixcbiAgICAgICAgZXh0ZW5kUGFyYW1zOiBtb2R1bGVFeHRlbmRQYXJhbXMocGFyYW1zLCBhbGxNb2R1bGVzUGFyYW1zKSxcbiAgICAgICAgb246IHN3aXBlci5vbi5iaW5kKHN3aXBlciksXG4gICAgICAgIG9uY2U6IHN3aXBlci5vbmNlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgb2ZmOiBzd2lwZXIub2ZmLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgZW1pdDogc3dpcGVyLmVtaXQuYmluZChzd2lwZXIpXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8vIEV4dGVuZCBkZWZhdWx0cyB3aXRoIG1vZHVsZXMgcGFyYW1zXG4gICAgY29uc3Qgc3dpcGVyUGFyYW1zID0gZXh0ZW5kKHt9LCBkZWZhdWx0cywgYWxsTW9kdWxlc1BhcmFtcyk7XG5cbiAgICAvLyBFeHRlbmQgZGVmYXVsdHMgd2l0aCBwYXNzZWQgcGFyYW1zXG4gICAgc3dpcGVyLnBhcmFtcyA9IGV4dGVuZCh7fSwgc3dpcGVyUGFyYW1zLCBleHRlbmRlZERlZmF1bHRzLCBwYXJhbXMpO1xuICAgIHN3aXBlci5vcmlnaW5hbFBhcmFtcyA9IGV4dGVuZCh7fSwgc3dpcGVyLnBhcmFtcyk7XG4gICAgc3dpcGVyLnBhc3NlZFBhcmFtcyA9IGV4dGVuZCh7fSwgcGFyYW1zKTtcblxuICAgIC8vIGFkZCBldmVudCBsaXN0ZW5lcnNcbiAgICBpZiAoc3dpcGVyLnBhcmFtcyAmJiBzd2lwZXIucGFyYW1zLm9uKSB7XG4gICAgICBPYmplY3Qua2V5cyhzd2lwZXIucGFyYW1zLm9uKS5mb3JFYWNoKGV2ZW50TmFtZSA9PiB7XG4gICAgICAgIHN3aXBlci5vbihldmVudE5hbWUsIHN3aXBlci5wYXJhbXMub25bZXZlbnROYW1lXSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKHN3aXBlci5wYXJhbXMgJiYgc3dpcGVyLnBhcmFtcy5vbkFueSkge1xuICAgICAgc3dpcGVyLm9uQW55KHN3aXBlci5wYXJhbXMub25BbnkpO1xuICAgIH1cblxuICAgIC8vIEV4dGVuZCBTd2lwZXJcbiAgICBPYmplY3QuYXNzaWduKHN3aXBlciwge1xuICAgICAgZW5hYmxlZDogc3dpcGVyLnBhcmFtcy5lbmFibGVkLFxuICAgICAgZWwsXG4gICAgICAvLyBDbGFzc2VzXG4gICAgICBjbGFzc05hbWVzOiBbXSxcbiAgICAgIC8vIFNsaWRlc1xuICAgICAgc2xpZGVzOiBbXSxcbiAgICAgIHNsaWRlc0dyaWQ6IFtdLFxuICAgICAgc25hcEdyaWQ6IFtdLFxuICAgICAgc2xpZGVzU2l6ZXNHcmlkOiBbXSxcbiAgICAgIC8vIGlzRGlyZWN0aW9uXG4gICAgICBpc0hvcml6b250YWwoKSB7XG4gICAgICAgIHJldHVybiBzd2lwZXIucGFyYW1zLmRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnO1xuICAgICAgfSxcbiAgICAgIGlzVmVydGljYWwoKSB7XG4gICAgICAgIHJldHVybiBzd2lwZXIucGFyYW1zLmRpcmVjdGlvbiA9PT0gJ3ZlcnRpY2FsJztcbiAgICAgIH0sXG4gICAgICAvLyBJbmRleGVzXG4gICAgICBhY3RpdmVJbmRleDogMCxcbiAgICAgIHJlYWxJbmRleDogMCxcbiAgICAgIC8vXG4gICAgICBpc0JlZ2lubmluZzogdHJ1ZSxcbiAgICAgIGlzRW5kOiBmYWxzZSxcbiAgICAgIC8vIFByb3BzXG4gICAgICB0cmFuc2xhdGU6IDAsXG4gICAgICBwcmV2aW91c1RyYW5zbGF0ZTogMCxcbiAgICAgIHByb2dyZXNzOiAwLFxuICAgICAgdmVsb2NpdHk6IDAsXG4gICAgICBhbmltYXRpbmc6IGZhbHNlLFxuICAgICAgY3NzT3ZlcmZsb3dBZGp1c3RtZW50KCkge1xuICAgICAgICAvLyBSZXR1cm5zIDAgdW5sZXNzIGB0cmFuc2xhdGVgIGlzID4gMioqMjNcbiAgICAgICAgLy8gU2hvdWxkIGJlIHN1YnRyYWN0ZWQgZnJvbSBjc3MgdmFsdWVzIHRvIHByZXZlbnQgb3ZlcmZsb3dcbiAgICAgICAgcmV0dXJuIE1hdGgudHJ1bmModGhpcy50cmFuc2xhdGUgLyAyICoqIDIzKSAqIDIgKiogMjM7XG4gICAgICB9LFxuICAgICAgLy8gTG9ja3NcbiAgICAgIGFsbG93U2xpZGVOZXh0OiBzd2lwZXIucGFyYW1zLmFsbG93U2xpZGVOZXh0LFxuICAgICAgYWxsb3dTbGlkZVByZXY6IHN3aXBlci5wYXJhbXMuYWxsb3dTbGlkZVByZXYsXG4gICAgICAvLyBUb3VjaCBFdmVudHNcbiAgICAgIHRvdWNoRXZlbnRzRGF0YToge1xuICAgICAgICBpc1RvdWNoZWQ6IHVuZGVmaW5lZCxcbiAgICAgICAgaXNNb3ZlZDogdW5kZWZpbmVkLFxuICAgICAgICBhbGxvd1RvdWNoQ2FsbGJhY2tzOiB1bmRlZmluZWQsXG4gICAgICAgIHRvdWNoU3RhcnRUaW1lOiB1bmRlZmluZWQsXG4gICAgICAgIGlzU2Nyb2xsaW5nOiB1bmRlZmluZWQsXG4gICAgICAgIGN1cnJlbnRUcmFuc2xhdGU6IHVuZGVmaW5lZCxcbiAgICAgICAgc3RhcnRUcmFuc2xhdGU6IHVuZGVmaW5lZCxcbiAgICAgICAgYWxsb3dUaHJlc2hvbGRNb3ZlOiB1bmRlZmluZWQsXG4gICAgICAgIC8vIEZvcm0gZWxlbWVudHMgdG8gbWF0Y2hcbiAgICAgICAgZm9jdXNhYmxlRWxlbWVudHM6IHN3aXBlci5wYXJhbXMuZm9jdXNhYmxlRWxlbWVudHMsXG4gICAgICAgIC8vIExhc3QgY2xpY2sgdGltZVxuICAgICAgICBsYXN0Q2xpY2tUaW1lOiAwLFxuICAgICAgICBjbGlja1RpbWVvdXQ6IHVuZGVmaW5lZCxcbiAgICAgICAgLy8gVmVsb2NpdGllc1xuICAgICAgICB2ZWxvY2l0aWVzOiBbXSxcbiAgICAgICAgYWxsb3dNb21lbnR1bUJvdW5jZTogdW5kZWZpbmVkLFxuICAgICAgICBzdGFydE1vdmluZzogdW5kZWZpbmVkLFxuICAgICAgICBwb2ludGVySWQ6IG51bGwsXG4gICAgICAgIHRvdWNoSWQ6IG51bGxcbiAgICAgIH0sXG4gICAgICAvLyBDbGlja3NcbiAgICAgIGFsbG93Q2xpY2s6IHRydWUsXG4gICAgICAvLyBUb3VjaGVzXG4gICAgICBhbGxvd1RvdWNoTW92ZTogc3dpcGVyLnBhcmFtcy5hbGxvd1RvdWNoTW92ZSxcbiAgICAgIHRvdWNoZXM6IHtcbiAgICAgICAgc3RhcnRYOiAwLFxuICAgICAgICBzdGFydFk6IDAsXG4gICAgICAgIGN1cnJlbnRYOiAwLFxuICAgICAgICBjdXJyZW50WTogMCxcbiAgICAgICAgZGlmZjogMFxuICAgICAgfSxcbiAgICAgIC8vIEltYWdlc1xuICAgICAgaW1hZ2VzVG9Mb2FkOiBbXSxcbiAgICAgIGltYWdlc0xvYWRlZDogMFxuICAgIH0pO1xuICAgIHN3aXBlci5lbWl0KCdfc3dpcGVyJyk7XG5cbiAgICAvLyBJbml0XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuaW5pdCkge1xuICAgICAgc3dpcGVyLmluaXQoKTtcbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYXBwIGluc3RhbmNlXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnN0cnVjdG9yLXJldHVyblxuICAgIHJldHVybiBzd2lwZXI7XG4gIH1cbiAgZ2V0RGlyZWN0aW9uTGFiZWwocHJvcGVydHkpIHtcbiAgICBpZiAodGhpcy5pc0hvcml6b250YWwoKSkge1xuICAgICAgcmV0dXJuIHByb3BlcnR5O1xuICAgIH1cbiAgICAvLyBwcmV0dGllci1pZ25vcmVcbiAgICByZXR1cm4ge1xuICAgICAgJ3dpZHRoJzogJ2hlaWdodCcsXG4gICAgICAnbWFyZ2luLXRvcCc6ICdtYXJnaW4tbGVmdCcsXG4gICAgICAnbWFyZ2luLWJvdHRvbSAnOiAnbWFyZ2luLXJpZ2h0JyxcbiAgICAgICdtYXJnaW4tbGVmdCc6ICdtYXJnaW4tdG9wJyxcbiAgICAgICdtYXJnaW4tcmlnaHQnOiAnbWFyZ2luLWJvdHRvbScsXG4gICAgICAncGFkZGluZy1sZWZ0JzogJ3BhZGRpbmctdG9wJyxcbiAgICAgICdwYWRkaW5nLXJpZ2h0JzogJ3BhZGRpbmctYm90dG9tJyxcbiAgICAgICdtYXJnaW5SaWdodCc6ICdtYXJnaW5Cb3R0b20nXG4gICAgfVtwcm9wZXJ0eV07XG4gIH1cbiAgZ2V0U2xpZGVJbmRleChzbGlkZUVsKSB7XG4gICAgY29uc3Qge1xuICAgICAgc2xpZGVzRWwsXG4gICAgICBwYXJhbXNcbiAgICB9ID0gdGhpcztcbiAgICBjb25zdCBzbGlkZXMgPSBlbGVtZW50Q2hpbGRyZW4oc2xpZGVzRWwsIGAuJHtwYXJhbXMuc2xpZGVDbGFzc30sIHN3aXBlci1zbGlkZWApO1xuICAgIGNvbnN0IGZpcnN0U2xpZGVJbmRleCA9IGVsZW1lbnRJbmRleChzbGlkZXNbMF0pO1xuICAgIHJldHVybiBlbGVtZW50SW5kZXgoc2xpZGVFbCkgLSBmaXJzdFNsaWRlSW5kZXg7XG4gIH1cbiAgZ2V0U2xpZGVJbmRleEJ5RGF0YShpbmRleCkge1xuICAgIHJldHVybiB0aGlzLmdldFNsaWRlSW5kZXgodGhpcy5zbGlkZXMuZmlsdGVyKHNsaWRlRWwgPT4gc2xpZGVFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JykgKiAxID09PSBpbmRleClbMF0pO1xuICB9XG4gIHJlY2FsY1NsaWRlcygpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHtcbiAgICAgIHNsaWRlc0VsLFxuICAgICAgcGFyYW1zXG4gICAgfSA9IHN3aXBlcjtcbiAgICBzd2lwZXIuc2xpZGVzID0gZWxlbWVudENoaWxkcmVuKHNsaWRlc0VsLCBgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKTtcbiAgfVxuICBlbmFibGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoc3dpcGVyLmVuYWJsZWQpIHJldHVybjtcbiAgICBzd2lwZXIuZW5hYmxlZCA9IHRydWU7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuZ3JhYkN1cnNvcikge1xuICAgICAgc3dpcGVyLnNldEdyYWJDdXJzb3IoKTtcbiAgICB9XG4gICAgc3dpcGVyLmVtaXQoJ2VuYWJsZScpO1xuICB9XG4gIGRpc2FibGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlci5lbmFibGVkKSByZXR1cm47XG4gICAgc3dpcGVyLmVuYWJsZWQgPSBmYWxzZTtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5ncmFiQ3Vyc29yKSB7XG4gICAgICBzd2lwZXIudW5zZXRHcmFiQ3Vyc29yKCk7XG4gICAgfVxuICAgIHN3aXBlci5lbWl0KCdkaXNhYmxlJyk7XG4gIH1cbiAgc2V0UHJvZ3Jlc3MocHJvZ3Jlc3MsIHNwZWVkKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBwcm9ncmVzcyA9IE1hdGgubWluKE1hdGgubWF4KHByb2dyZXNzLCAwKSwgMSk7XG4gICAgY29uc3QgbWluID0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpO1xuICAgIGNvbnN0IG1heCA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKTtcbiAgICBjb25zdCBjdXJyZW50ID0gKG1heCAtIG1pbikgKiBwcm9ncmVzcyArIG1pbjtcbiAgICBzd2lwZXIudHJhbnNsYXRlVG8oY3VycmVudCwgdHlwZW9mIHNwZWVkID09PSAndW5kZWZpbmVkJyA/IDAgOiBzcGVlZCk7XG4gICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgfVxuICBlbWl0Q29udGFpbmVyQ2xhc3NlcygpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5fZW1pdENsYXNzZXMgfHwgIXN3aXBlci5lbCkgcmV0dXJuO1xuICAgIGNvbnN0IGNscyA9IHN3aXBlci5lbC5jbGFzc05hbWUuc3BsaXQoJyAnKS5maWx0ZXIoY2xhc3NOYW1lID0+IHtcbiAgICAgIHJldHVybiBjbGFzc05hbWUuaW5kZXhPZignc3dpcGVyJykgPT09IDAgfHwgY2xhc3NOYW1lLmluZGV4T2Yoc3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzKSA9PT0gMDtcbiAgICB9KTtcbiAgICBzd2lwZXIuZW1pdCgnX2NvbnRhaW5lckNsYXNzZXMnLCBjbHMuam9pbignICcpKTtcbiAgfVxuICBnZXRTbGlkZUNsYXNzZXMoc2xpZGVFbCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKHN3aXBlci5kZXN0cm95ZWQpIHJldHVybiAnJztcbiAgICByZXR1cm4gc2xpZGVFbC5jbGFzc05hbWUuc3BsaXQoJyAnKS5maWx0ZXIoY2xhc3NOYW1lID0+IHtcbiAgICAgIHJldHVybiBjbGFzc05hbWUuaW5kZXhPZignc3dpcGVyLXNsaWRlJykgPT09IDAgfHwgY2xhc3NOYW1lLmluZGV4T2Yoc3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzKSA9PT0gMDtcbiAgICB9KS5qb2luKCcgJyk7XG4gIH1cbiAgZW1pdFNsaWRlc0NsYXNzZXMoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuX2VtaXRDbGFzc2VzIHx8ICFzd2lwZXIuZWwpIHJldHVybjtcbiAgICBjb25zdCB1cGRhdGVzID0gW107XG4gICAgc3dpcGVyLnNsaWRlcy5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgICAgY29uc3QgY2xhc3NOYW1lcyA9IHN3aXBlci5nZXRTbGlkZUNsYXNzZXMoc2xpZGVFbCk7XG4gICAgICB1cGRhdGVzLnB1c2goe1xuICAgICAgICBzbGlkZUVsLFxuICAgICAgICBjbGFzc05hbWVzXG4gICAgICB9KTtcbiAgICAgIHN3aXBlci5lbWl0KCdfc2xpZGVDbGFzcycsIHNsaWRlRWwsIGNsYXNzTmFtZXMpO1xuICAgIH0pO1xuICAgIHN3aXBlci5lbWl0KCdfc2xpZGVDbGFzc2VzJywgdXBkYXRlcyk7XG4gIH1cbiAgc2xpZGVzUGVyVmlld0R5bmFtaWModmlldywgZXhhY3QpIHtcbiAgICBpZiAodmlldyA9PT0gdm9pZCAwKSB7XG4gICAgICB2aWV3ID0gJ2N1cnJlbnQnO1xuICAgIH1cbiAgICBpZiAoZXhhY3QgPT09IHZvaWQgMCkge1xuICAgICAgZXhhY3QgPSBmYWxzZTtcbiAgICB9XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB7XG4gICAgICBwYXJhbXMsXG4gICAgICBzbGlkZXMsXG4gICAgICBzbGlkZXNHcmlkLFxuICAgICAgc2xpZGVzU2l6ZXNHcmlkLFxuICAgICAgc2l6ZTogc3dpcGVyU2l6ZSxcbiAgICAgIGFjdGl2ZUluZGV4XG4gICAgfSA9IHN3aXBlcjtcbiAgICBsZXQgc3B2ID0gMTtcbiAgICBpZiAodHlwZW9mIHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnbnVtYmVyJykgcmV0dXJuIHBhcmFtcy5zbGlkZXNQZXJWaWV3O1xuICAgIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgIGxldCBzbGlkZVNpemUgPSBzbGlkZXNbYWN0aXZlSW5kZXhdID8gTWF0aC5jZWlsKHNsaWRlc1thY3RpdmVJbmRleF0uc3dpcGVyU2xpZGVTaXplKSA6IDA7XG4gICAgICBsZXQgYnJlYWtMb29wO1xuICAgICAgZm9yIChsZXQgaSA9IGFjdGl2ZUluZGV4ICsgMTsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAoc2xpZGVzW2ldICYmICFicmVha0xvb3ApIHtcbiAgICAgICAgICBzbGlkZVNpemUgKz0gTWF0aC5jZWlsKHNsaWRlc1tpXS5zd2lwZXJTbGlkZVNpemUpO1xuICAgICAgICAgIHNwdiArPSAxO1xuICAgICAgICAgIGlmIChzbGlkZVNpemUgPiBzd2lwZXJTaXplKSBicmVha0xvb3AgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmb3IgKGxldCBpID0gYWN0aXZlSW5kZXggLSAxOyBpID49IDA7IGkgLT0gMSkge1xuICAgICAgICBpZiAoc2xpZGVzW2ldICYmICFicmVha0xvb3ApIHtcbiAgICAgICAgICBzbGlkZVNpemUgKz0gc2xpZGVzW2ldLnN3aXBlclNsaWRlU2l6ZTtcbiAgICAgICAgICBzcHYgKz0gMTtcbiAgICAgICAgICBpZiAoc2xpZGVTaXplID4gc3dpcGVyU2l6ZSkgYnJlYWtMb29wID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIGlmICh2aWV3ID09PSAnY3VycmVudCcpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IGFjdGl2ZUluZGV4ICsgMTsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgIGNvbnN0IHNsaWRlSW5WaWV3ID0gZXhhY3QgPyBzbGlkZXNHcmlkW2ldICsgc2xpZGVzU2l6ZXNHcmlkW2ldIC0gc2xpZGVzR3JpZFthY3RpdmVJbmRleF0gPCBzd2lwZXJTaXplIDogc2xpZGVzR3JpZFtpXSAtIHNsaWRlc0dyaWRbYWN0aXZlSW5kZXhdIDwgc3dpcGVyU2l6ZTtcbiAgICAgICAgICBpZiAoc2xpZGVJblZpZXcpIHtcbiAgICAgICAgICAgIHNwdiArPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gcHJldmlvdXNcbiAgICAgICAgZm9yIChsZXQgaSA9IGFjdGl2ZUluZGV4IC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgICAgICBjb25zdCBzbGlkZUluVmlldyA9IHNsaWRlc0dyaWRbYWN0aXZlSW5kZXhdIC0gc2xpZGVzR3JpZFtpXSA8IHN3aXBlclNpemU7XG4gICAgICAgICAgaWYgKHNsaWRlSW5WaWV3KSB7XG4gICAgICAgICAgICBzcHYgKz0gMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHNwdjtcbiAgfVxuICB1cGRhdGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XG4gICAgY29uc3Qge1xuICAgICAgc25hcEdyaWQsXG4gICAgICBwYXJhbXNcbiAgICB9ID0gc3dpcGVyO1xuICAgIC8vIEJyZWFrcG9pbnRzXG4gICAgaWYgKHBhcmFtcy5icmVha3BvaW50cykge1xuICAgICAgc3dpcGVyLnNldEJyZWFrcG9pbnQoKTtcbiAgICB9XG4gICAgWy4uLnN3aXBlci5lbC5xdWVyeVNlbGVjdG9yQWxsKCdbbG9hZGluZz1cImxhenlcIl0nKV0uZm9yRWFjaChpbWFnZUVsID0+IHtcbiAgICAgIGlmIChpbWFnZUVsLmNvbXBsZXRlKSB7XG4gICAgICAgIHByb2Nlc3NMYXp5UHJlbG9hZGVyKHN3aXBlciwgaW1hZ2VFbCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgc3dpcGVyLnVwZGF0ZVNpemUoKTtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG4gICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKCk7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICBmdW5jdGlvbiBzZXRUcmFuc2xhdGUoKSB7XG4gICAgICBjb25zdCB0cmFuc2xhdGVWYWx1ZSA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyBzd2lwZXIudHJhbnNsYXRlICogLTEgOiBzd2lwZXIudHJhbnNsYXRlO1xuICAgICAgY29uc3QgbmV3VHJhbnNsYXRlID0gTWF0aC5taW4oTWF0aC5tYXgodHJhbnNsYXRlVmFsdWUsIHN3aXBlci5tYXhUcmFuc2xhdGUoKSksIHN3aXBlci5taW5UcmFuc2xhdGUoKSk7XG4gICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKG5ld1RyYW5zbGF0ZSk7XG4gICAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gICAgfVxuICAgIGxldCB0cmFuc2xhdGVkO1xuICAgIGlmIChwYXJhbXMuZnJlZU1vZGUgJiYgcGFyYW1zLmZyZWVNb2RlLmVuYWJsZWQgJiYgIXBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICBzZXRUcmFuc2xhdGUoKTtcbiAgICAgIGlmIChwYXJhbXMuYXV0b0hlaWdodCkge1xuICAgICAgICBzd2lwZXIudXBkYXRlQXV0b0hlaWdodCgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoKHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgfHwgcGFyYW1zLnNsaWRlc1BlclZpZXcgPiAxKSAmJiBzd2lwZXIuaXNFbmQgJiYgIXBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgICBjb25zdCBzbGlkZXMgPSBzd2lwZXIudmlydHVhbCAmJiBwYXJhbXMudmlydHVhbC5lbmFibGVkID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzIDogc3dpcGVyLnNsaWRlcztcbiAgICAgICAgdHJhbnNsYXRlZCA9IHN3aXBlci5zbGlkZVRvKHNsaWRlcy5sZW5ndGggLSAxLCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0cmFuc2xhdGVkID0gc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4LCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgICBpZiAoIXRyYW5zbGF0ZWQpIHtcbiAgICAgICAgc2V0VHJhbnNsYXRlKCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzbmFwR3JpZCAhPT0gc3dpcGVyLnNuYXBHcmlkKSB7XG4gICAgICBzd2lwZXIuY2hlY2tPdmVyZmxvdygpO1xuICAgIH1cbiAgICBzd2lwZXIuZW1pdCgndXBkYXRlJyk7XG4gIH1cbiAgY2hhbmdlRGlyZWN0aW9uKG5ld0RpcmVjdGlvbiwgbmVlZFVwZGF0ZSkge1xuICAgIGlmIChuZWVkVXBkYXRlID09PSB2b2lkIDApIHtcbiAgICAgIG5lZWRVcGRhdGUgPSB0cnVlO1xuICAgIH1cbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IGN1cnJlbnREaXJlY3Rpb24gPSBzd2lwZXIucGFyYW1zLmRpcmVjdGlvbjtcbiAgICBpZiAoIW5ld0RpcmVjdGlvbikge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICBuZXdEaXJlY3Rpb24gPSBjdXJyZW50RGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcgPyAndmVydGljYWwnIDogJ2hvcml6b250YWwnO1xuICAgIH1cbiAgICBpZiAobmV3RGlyZWN0aW9uID09PSBjdXJyZW50RGlyZWN0aW9uIHx8IG5ld0RpcmVjdGlvbiAhPT0gJ2hvcml6b250YWwnICYmIG5ld0RpcmVjdGlvbiAhPT0gJ3ZlcnRpY2FsJykge1xuICAgICAgcmV0dXJuIHN3aXBlcjtcbiAgICB9XG4gICAgc3dpcGVyLmVsLmNsYXNzTGlzdC5yZW1vdmUoYCR7c3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfSR7Y3VycmVudERpcmVjdGlvbn1gKTtcbiAgICBzd2lwZXIuZWwuY2xhc3NMaXN0LmFkZChgJHtzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9JHtuZXdEaXJlY3Rpb259YCk7XG4gICAgc3dpcGVyLmVtaXRDb250YWluZXJDbGFzc2VzKCk7XG4gICAgc3dpcGVyLnBhcmFtcy5kaXJlY3Rpb24gPSBuZXdEaXJlY3Rpb247XG4gICAgc3dpcGVyLnNsaWRlcy5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgICAgaWYgKG5ld0RpcmVjdGlvbiA9PT0gJ3ZlcnRpY2FsJykge1xuICAgICAgICBzbGlkZUVsLnN0eWxlLndpZHRoID0gJyc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzbGlkZUVsLnN0eWxlLmhlaWdodCA9ICcnO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHN3aXBlci5lbWl0KCdjaGFuZ2VEaXJlY3Rpb24nKTtcbiAgICBpZiAobmVlZFVwZGF0ZSkgc3dpcGVyLnVwZGF0ZSgpO1xuICAgIHJldHVybiBzd2lwZXI7XG4gIH1cbiAgY2hhbmdlTGFuZ3VhZ2VEaXJlY3Rpb24oZGlyZWN0aW9uKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoc3dpcGVyLnJ0bCAmJiBkaXJlY3Rpb24gPT09ICdydGwnIHx8ICFzd2lwZXIucnRsICYmIGRpcmVjdGlvbiA9PT0gJ2x0cicpIHJldHVybjtcbiAgICBzd2lwZXIucnRsID0gZGlyZWN0aW9uID09PSAncnRsJztcbiAgICBzd2lwZXIucnRsVHJhbnNsYXRlID0gc3dpcGVyLnBhcmFtcy5kaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJyAmJiBzd2lwZXIucnRsO1xuICAgIGlmIChzd2lwZXIucnRsKSB7XG4gICAgICBzd2lwZXIuZWwuY2xhc3NMaXN0LmFkZChgJHtzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9cnRsYCk7XG4gICAgICBzd2lwZXIuZWwuZGlyID0gJ3J0bCc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5lbC5jbGFzc0xpc3QucmVtb3ZlKGAke3N3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc31ydGxgKTtcbiAgICAgIHN3aXBlci5lbC5kaXIgPSAnbHRyJztcbiAgICB9XG4gICAgc3dpcGVyLnVwZGF0ZSgpO1xuICB9XG4gIG1vdW50KGVsZW1lbnQpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmIChzd2lwZXIubW91bnRlZCkgcmV0dXJuIHRydWU7XG5cbiAgICAvLyBGaW5kIGVsXG4gICAgbGV0IGVsID0gZWxlbWVudCB8fCBzd2lwZXIucGFyYW1zLmVsO1xuICAgIGlmICh0eXBlb2YgZWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZWwpO1xuICAgIH1cbiAgICBpZiAoIWVsKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGVsLnN3aXBlciA9IHN3aXBlcjtcbiAgICBpZiAoZWwucGFyZW50Tm9kZSAmJiBlbC5wYXJlbnROb2RlLmhvc3QgJiYgZWwucGFyZW50Tm9kZS5ob3N0Lm5vZGVOYW1lID09PSBzd2lwZXIucGFyYW1zLnN3aXBlckVsZW1lbnROb2RlTmFtZS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICBzd2lwZXIuaXNFbGVtZW50ID0gdHJ1ZTtcbiAgICB9XG4gICAgY29uc3QgZ2V0V3JhcHBlclNlbGVjdG9yID0gKCkgPT4ge1xuICAgICAgcmV0dXJuIGAuJHsoc3dpcGVyLnBhcmFtcy53cmFwcGVyQ2xhc3MgfHwgJycpLnRyaW0oKS5zcGxpdCgnICcpLmpvaW4oJy4nKX1gO1xuICAgIH07XG4gICAgY29uc3QgZ2V0V3JhcHBlciA9ICgpID0+IHtcbiAgICAgIGlmIChlbCAmJiBlbC5zaGFkb3dSb290ICYmIGVsLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3Rvcikge1xuICAgICAgICBjb25zdCByZXMgPSBlbC5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoZ2V0V3JhcHBlclNlbGVjdG9yKCkpO1xuICAgICAgICAvLyBDaGlsZHJlbiBuZWVkcyB0byByZXR1cm4gc2xvdCBpdGVtc1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGVsZW1lbnRDaGlsZHJlbihlbCwgZ2V0V3JhcHBlclNlbGVjdG9yKCkpWzBdO1xuICAgIH07XG4gICAgLy8gRmluZCBXcmFwcGVyXG4gICAgbGV0IHdyYXBwZXJFbCA9IGdldFdyYXBwZXIoKTtcbiAgICBpZiAoIXdyYXBwZXJFbCAmJiBzd2lwZXIucGFyYW1zLmNyZWF0ZUVsZW1lbnRzKSB7XG4gICAgICB3cmFwcGVyRWwgPSBjcmVhdGVFbGVtZW50KCdkaXYnLCBzd2lwZXIucGFyYW1zLndyYXBwZXJDbGFzcyk7XG4gICAgICBlbC5hcHBlbmQod3JhcHBlckVsKTtcbiAgICAgIGVsZW1lbnRDaGlsZHJlbihlbCwgYC4ke3N3aXBlci5wYXJhbXMuc2xpZGVDbGFzc31gKS5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgICAgICB3cmFwcGVyRWwuYXBwZW5kKHNsaWRlRWwpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIE9iamVjdC5hc3NpZ24oc3dpcGVyLCB7XG4gICAgICBlbCxcbiAgICAgIHdyYXBwZXJFbCxcbiAgICAgIHNsaWRlc0VsOiBzd2lwZXIuaXNFbGVtZW50ICYmICFlbC5wYXJlbnROb2RlLmhvc3Quc2xpZGVTbG90cyA/IGVsLnBhcmVudE5vZGUuaG9zdCA6IHdyYXBwZXJFbCxcbiAgICAgIGhvc3RFbDogc3dpcGVyLmlzRWxlbWVudCA/IGVsLnBhcmVudE5vZGUuaG9zdCA6IGVsLFxuICAgICAgbW91bnRlZDogdHJ1ZSxcbiAgICAgIC8vIFJUTFxuICAgICAgcnRsOiBlbC5kaXIudG9Mb3dlckNhc2UoKSA9PT0gJ3J0bCcgfHwgZWxlbWVudFN0eWxlKGVsLCAnZGlyZWN0aW9uJykgPT09ICdydGwnLFxuICAgICAgcnRsVHJhbnNsYXRlOiBzd2lwZXIucGFyYW1zLmRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnICYmIChlbC5kaXIudG9Mb3dlckNhc2UoKSA9PT0gJ3J0bCcgfHwgZWxlbWVudFN0eWxlKGVsLCAnZGlyZWN0aW9uJykgPT09ICdydGwnKSxcbiAgICAgIHdyb25nUlRMOiBlbGVtZW50U3R5bGUod3JhcHBlckVsLCAnZGlzcGxheScpID09PSAnLXdlYmtpdC1ib3gnXG4gICAgfSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaW5pdChlbCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKHN3aXBlci5pbml0aWFsaXplZCkgcmV0dXJuIHN3aXBlcjtcbiAgICBjb25zdCBtb3VudGVkID0gc3dpcGVyLm1vdW50KGVsKTtcbiAgICBpZiAobW91bnRlZCA9PT0gZmFsc2UpIHJldHVybiBzd2lwZXI7XG4gICAgc3dpcGVyLmVtaXQoJ2JlZm9yZUluaXQnKTtcblxuICAgIC8vIFNldCBicmVha3BvaW50XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuYnJlYWtwb2ludHMpIHtcbiAgICAgIHN3aXBlci5zZXRCcmVha3BvaW50KCk7XG4gICAgfVxuXG4gICAgLy8gQWRkIENsYXNzZXNcbiAgICBzd2lwZXIuYWRkQ2xhc3NlcygpO1xuXG4gICAgLy8gVXBkYXRlIHNpemVcbiAgICBzd2lwZXIudXBkYXRlU2l6ZSgpO1xuXG4gICAgLy8gVXBkYXRlIHNsaWRlc1xuICAgIHN3aXBlci51cGRhdGVTbGlkZXMoKTtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93KSB7XG4gICAgICBzd2lwZXIuY2hlY2tPdmVyZmxvdygpO1xuICAgIH1cblxuICAgIC8vIFNldCBHcmFiIEN1cnNvclxuICAgIGlmIChzd2lwZXIucGFyYW1zLmdyYWJDdXJzb3IgJiYgc3dpcGVyLmVuYWJsZWQpIHtcbiAgICAgIHN3aXBlci5zZXRHcmFiQ3Vyc29yKCk7XG4gICAgfVxuXG4gICAgLy8gU2xpZGUgVG8gSW5pdGlhbCBTbGlkZVxuICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3AgJiYgc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5wYXJhbXMuaW5pdGlhbFNsaWRlICsgc3dpcGVyLnZpcnR1YWwuc2xpZGVzQmVmb3JlLCAwLCBzd2lwZXIucGFyYW1zLnJ1bkNhbGxiYWNrc09uSW5pdCwgZmFsc2UsIHRydWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIucGFyYW1zLmluaXRpYWxTbGlkZSwgMCwgc3dpcGVyLnBhcmFtcy5ydW5DYWxsYmFja3NPbkluaXQsIGZhbHNlLCB0cnVlKTtcbiAgICB9XG5cbiAgICAvLyBDcmVhdGUgbG9vcFxuICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgIHN3aXBlci5sb29wQ3JlYXRlKCk7XG4gICAgfVxuXG4gICAgLy8gQXR0YWNoIGV2ZW50c1xuICAgIHN3aXBlci5hdHRhY2hFdmVudHMoKTtcbiAgICBjb25zdCBsYXp5RWxlbWVudHMgPSBbLi4uc3dpcGVyLmVsLnF1ZXJ5U2VsZWN0b3JBbGwoJ1tsb2FkaW5nPVwibGF6eVwiXScpXTtcbiAgICBpZiAoc3dpcGVyLmlzRWxlbWVudCkge1xuICAgICAgbGF6eUVsZW1lbnRzLnB1c2goLi4uc3dpcGVyLmhvc3RFbC5xdWVyeVNlbGVjdG9yQWxsKCdbbG9hZGluZz1cImxhenlcIl0nKSk7XG4gICAgfVxuICAgIGxhenlFbGVtZW50cy5mb3JFYWNoKGltYWdlRWwgPT4ge1xuICAgICAgaWYgKGltYWdlRWwuY29tcGxldGUpIHtcbiAgICAgICAgcHJvY2Vzc0xhenlQcmVsb2FkZXIoc3dpcGVyLCBpbWFnZUVsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGltYWdlRWwuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGUgPT4ge1xuICAgICAgICAgIHByb2Nlc3NMYXp5UHJlbG9hZGVyKHN3aXBlciwgZS50YXJnZXQpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBwcmVsb2FkKHN3aXBlcik7XG5cbiAgICAvLyBJbml0IEZsYWdcbiAgICBzd2lwZXIuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgIHByZWxvYWQoc3dpcGVyKTtcblxuICAgIC8vIEVtaXRcbiAgICBzd2lwZXIuZW1pdCgnaW5pdCcpO1xuICAgIHN3aXBlci5lbWl0KCdhZnRlckluaXQnKTtcbiAgICByZXR1cm4gc3dpcGVyO1xuICB9XG4gIGRlc3Ryb3koZGVsZXRlSW5zdGFuY2UsIGNsZWFuU3R5bGVzKSB7XG4gICAgaWYgKGRlbGV0ZUluc3RhbmNlID09PSB2b2lkIDApIHtcbiAgICAgIGRlbGV0ZUluc3RhbmNlID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKGNsZWFuU3R5bGVzID09PSB2b2lkIDApIHtcbiAgICAgIGNsZWFuU3R5bGVzID0gdHJ1ZTtcbiAgICB9XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB7XG4gICAgICBwYXJhbXMsXG4gICAgICBlbCxcbiAgICAgIHdyYXBwZXJFbCxcbiAgICAgIHNsaWRlc1xuICAgIH0gPSBzd2lwZXI7XG4gICAgaWYgKHR5cGVvZiBzd2lwZXIucGFyYW1zID09PSAndW5kZWZpbmVkJyB8fCBzd2lwZXIuZGVzdHJveWVkKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgc3dpcGVyLmVtaXQoJ2JlZm9yZURlc3Ryb3knKTtcblxuICAgIC8vIEluaXQgRmxhZ1xuICAgIHN3aXBlci5pbml0aWFsaXplZCA9IGZhbHNlO1xuXG4gICAgLy8gRGV0YWNoIGV2ZW50c1xuICAgIHN3aXBlci5kZXRhY2hFdmVudHMoKTtcblxuICAgIC8vIERlc3Ryb3kgbG9vcFxuICAgIGlmIChwYXJhbXMubG9vcCkge1xuICAgICAgc3dpcGVyLmxvb3BEZXN0cm95KCk7XG4gICAgfVxuXG4gICAgLy8gQ2xlYW51cCBzdHlsZXNcbiAgICBpZiAoY2xlYW5TdHlsZXMpIHtcbiAgICAgIHN3aXBlci5yZW1vdmVDbGFzc2VzKCk7XG4gICAgICBpZiAoZWwgJiYgdHlwZW9mIGVsICE9PSAnc3RyaW5nJykge1xuICAgICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoJ3N0eWxlJyk7XG4gICAgICB9XG4gICAgICBpZiAod3JhcHBlckVsKSB7XG4gICAgICAgIHdyYXBwZXJFbC5yZW1vdmVBdHRyaWJ1dGUoJ3N0eWxlJyk7XG4gICAgICB9XG4gICAgICBpZiAoc2xpZGVzICYmIHNsaWRlcy5sZW5ndGgpIHtcbiAgICAgICAgc2xpZGVzLmZvckVhY2goc2xpZGVFbCA9PiB7XG4gICAgICAgICAgc2xpZGVFbC5jbGFzc0xpc3QucmVtb3ZlKHBhcmFtcy5zbGlkZVZpc2libGVDbGFzcywgcGFyYW1zLnNsaWRlRnVsbHlWaXNpYmxlQ2xhc3MsIHBhcmFtcy5zbGlkZUFjdGl2ZUNsYXNzLCBwYXJhbXMuc2xpZGVOZXh0Q2xhc3MsIHBhcmFtcy5zbGlkZVByZXZDbGFzcyk7XG4gICAgICAgICAgc2xpZGVFbC5yZW1vdmVBdHRyaWJ1dGUoJ3N0eWxlJyk7XG4gICAgICAgICAgc2xpZGVFbC5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4Jyk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICBzd2lwZXIuZW1pdCgnZGVzdHJveScpO1xuXG4gICAgLy8gRGV0YWNoIGVtaXR0ZXIgZXZlbnRzXG4gICAgT2JqZWN0LmtleXMoc3dpcGVyLmV2ZW50c0xpc3RlbmVycykuZm9yRWFjaChldmVudE5hbWUgPT4ge1xuICAgICAgc3dpcGVyLm9mZihldmVudE5hbWUpO1xuICAgIH0pO1xuICAgIGlmIChkZWxldGVJbnN0YW5jZSAhPT0gZmFsc2UpIHtcbiAgICAgIGlmIChzd2lwZXIuZWwgJiYgdHlwZW9mIHN3aXBlci5lbCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgc3dpcGVyLmVsLnN3aXBlciA9IG51bGw7XG4gICAgICB9XG4gICAgICBkZWxldGVQcm9wcyhzd2lwZXIpO1xuICAgIH1cbiAgICBzd2lwZXIuZGVzdHJveWVkID0gdHJ1ZTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBzdGF0aWMgZXh0ZW5kRGVmYXVsdHMobmV3RGVmYXVsdHMpIHtcbiAgICBleHRlbmQoZXh0ZW5kZWREZWZhdWx0cywgbmV3RGVmYXVsdHMpO1xuICB9XG4gIHN0YXRpYyBnZXQgZXh0ZW5kZWREZWZhdWx0cygpIHtcbiAgICByZXR1cm4gZXh0ZW5kZWREZWZhdWx0cztcbiAgfVxuICBzdGF0aWMgZ2V0IGRlZmF1bHRzKCkge1xuICAgIHJldHVybiBkZWZhdWx0cztcbiAgfVxuICBzdGF0aWMgaW5zdGFsbE1vZHVsZShtb2QpIHtcbiAgICBpZiAoIVN3aXBlci5wcm90b3R5cGUuX19tb2R1bGVzX18pIFN3aXBlci5wcm90b3R5cGUuX19tb2R1bGVzX18gPSBbXTtcbiAgICBjb25zdCBtb2R1bGVzID0gU3dpcGVyLnByb3RvdHlwZS5fX21vZHVsZXNfXztcbiAgICBpZiAodHlwZW9mIG1vZCA9PT0gJ2Z1bmN0aW9uJyAmJiBtb2R1bGVzLmluZGV4T2YobW9kKSA8IDApIHtcbiAgICAgIG1vZHVsZXMucHVzaChtb2QpO1xuICAgIH1cbiAgfVxuICBzdGF0aWMgdXNlKG1vZHVsZSkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KG1vZHVsZSkpIHtcbiAgICAgIG1vZHVsZS5mb3JFYWNoKG0gPT4gU3dpcGVyLmluc3RhbGxNb2R1bGUobSkpO1xuICAgICAgcmV0dXJuIFN3aXBlcjtcbiAgICB9XG4gICAgU3dpcGVyLmluc3RhbGxNb2R1bGUobW9kdWxlKTtcbiAgICByZXR1cm4gU3dpcGVyO1xuICB9XG59XG5PYmplY3Qua2V5cyhwcm90b3R5cGVzKS5mb3JFYWNoKHByb3RvdHlwZUdyb3VwID0+IHtcbiAgT2JqZWN0LmtleXMocHJvdG90eXBlc1twcm90b3R5cGVHcm91cF0pLmZvckVhY2gocHJvdG9NZXRob2QgPT4ge1xuICAgIFN3aXBlci5wcm90b3R5cGVbcHJvdG9NZXRob2RdID0gcHJvdG90eXBlc1twcm90b3R5cGVHcm91cF1bcHJvdG9NZXRob2RdO1xuICB9KTtcbn0pO1xuU3dpcGVyLnVzZShbUmVzaXplLCBPYnNlcnZlcl0pO1xuXG5leHBvcnQgeyBTd2lwZXIgYXMgUywgZGVmYXVsdHMgYXMgZCB9O1xuIiwiaW1wb3J0IHsgZSBhcyBlbGVtZW50Q2hpbGRyZW4sIGMgYXMgY3JlYXRlRWxlbWVudCB9IGZyb20gJy4vdXRpbHMubWpzJztcblxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudElmTm90RGVmaW5lZChzd2lwZXIsIG9yaWdpbmFsUGFyYW1zLCBwYXJhbXMsIGNoZWNrUHJvcHMpIHtcbiAgaWYgKHN3aXBlci5wYXJhbXMuY3JlYXRlRWxlbWVudHMpIHtcbiAgICBPYmplY3Qua2V5cyhjaGVja1Byb3BzKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICBpZiAoIXBhcmFtc1trZXldICYmIHBhcmFtcy5hdXRvID09PSB0cnVlKSB7XG4gICAgICAgIGxldCBlbGVtZW50ID0gZWxlbWVudENoaWxkcmVuKHN3aXBlci5lbCwgYC4ke2NoZWNrUHJvcHNba2V5XX1gKVswXTtcbiAgICAgICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgICAgZWxlbWVudCA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicsIGNoZWNrUHJvcHNba2V5XSk7XG4gICAgICAgICAgZWxlbWVudC5jbGFzc05hbWUgPSBjaGVja1Byb3BzW2tleV07XG4gICAgICAgICAgc3dpcGVyLmVsLmFwcGVuZChlbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgICBwYXJhbXNba2V5XSA9IGVsZW1lbnQ7XG4gICAgICAgIG9yaWdpbmFsUGFyYW1zW2tleV0gPSBlbGVtZW50O1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBwYXJhbXM7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZUVsZW1lbnRJZk5vdERlZmluZWQgYXMgYyB9O1xuIiwiZnVuY3Rpb24gY2xhc3Nlc1RvU2VsZWN0b3IoY2xhc3Nlcykge1xuICBpZiAoY2xhc3NlcyA9PT0gdm9pZCAwKSB7XG4gICAgY2xhc3NlcyA9ICcnO1xuICB9XG4gIHJldHVybiBgLiR7Y2xhc3Nlcy50cmltKCkucmVwbGFjZSgvKFtcXC46IStcXC9dKS9nLCAnXFxcXCQxJykgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAucmVwbGFjZSgvIC9nLCAnLicpfWA7XG59XG5cbmV4cG9ydCB7IGNsYXNzZXNUb1NlbGVjdG9yIGFzIGMgfTtcbiIsIi8vIGltcG9ydCBcIi4uLy4uL3Njc3Mvc2VjdGlvbnMvZ2FsbGVyeS5zY3NzXCI7XG53aW5kb3cuaW5uZXJXaWR0aCA+IDEwMjQgJiYgaW1wb3J0KFwiLi4vbGliL2xvY29tb3RpdmUtc2Nyb2xsXCIpO1xuaW1wb3J0IFN3aXBlciBmcm9tIFwic3dpcGVyXCI7XG5pbXBvcnQgeyBOYXZpZ2F0aW9uLCBQYWdpbmF0aW9uIH0gZnJvbSBcInN3aXBlci9tb2R1bGVzXCI7XG5pbXBvcnQoXCJzd2lwZXIvY3NzXCIpO1xuXG5pZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5nYWxsZXJ5X19zd2lwZXJcIikpIHtcbiAgbmV3IFN3aXBlcihcIi5nYWxsZXJ5X19zd2lwZXJcIiwge1xuICAgIG1vZHVsZXM6IFtOYXZpZ2F0aW9uLCBQYWdpbmF0aW9uXSxcbiAgICBsb29wOiB0cnVlLFxuICAgIGdyYWJDdXJzb3I6IHRydWUsXG4gICAgbmF2aWdhdGlvbjoge1xuICAgICAgcHJldkVsOiBcIi5nYWxsZXJ5X19zbGlkZXItYnRuX3ByZXZcIixcbiAgICAgIG5leHRFbDogXCIuZ2FsbGVyeV9fc2xpZGVyLWJ0bl9uZXh0XCIsXG4gICAgfSxcbiAgICBwYWdpbmF0aW9uOiB7XG4gICAgICBlbDogXCIuZ2FsbGVyeV9fZnJhY3Rpb25cIixcbiAgICAgIHR5cGU6IFwiY3VzdG9tXCIsXG4gICAgICByZW5kZXJDdXN0b206IGZ1bmN0aW9uIChzd2lwZXIsIGN1cnJlbnQsIHRvdGFsKSB7XG4gICAgICAgIHJldHVybiBjdXJyZW50ICsgXCI8c3Bhbj4vPC9zcGFuPlwiICsgdG90YWw7XG4gICAgICB9LFxuICAgIH0sXG4gIH0pO1xufVxuIiwiaW1wb3J0IHsgYyBhcyBjcmVhdGVFbGVtZW50SWZOb3REZWZpbmVkIH0gZnJvbSAnLi4vc2hhcmVkL2NyZWF0ZS1lbGVtZW50LWlmLW5vdC1kZWZpbmVkLm1qcyc7XG5pbXBvcnQgeyBtIGFzIG1ha2VFbGVtZW50c0FycmF5IH0gZnJvbSAnLi4vc2hhcmVkL3V0aWxzLm1qcyc7XG5cbmZ1bmN0aW9uIE5hdmlnYXRpb24oX3JlZikge1xuICBsZXQge1xuICAgIHN3aXBlcixcbiAgICBleHRlbmRQYXJhbXMsXG4gICAgb24sXG4gICAgZW1pdFxuICB9ID0gX3JlZjtcbiAgZXh0ZW5kUGFyYW1zKHtcbiAgICBuYXZpZ2F0aW9uOiB7XG4gICAgICBuZXh0RWw6IG51bGwsXG4gICAgICBwcmV2RWw6IG51bGwsXG4gICAgICBoaWRlT25DbGljazogZmFsc2UsXG4gICAgICBkaXNhYmxlZENsYXNzOiAnc3dpcGVyLWJ1dHRvbi1kaXNhYmxlZCcsXG4gICAgICBoaWRkZW5DbGFzczogJ3N3aXBlci1idXR0b24taGlkZGVuJyxcbiAgICAgIGxvY2tDbGFzczogJ3N3aXBlci1idXR0b24tbG9jaycsXG4gICAgICBuYXZpZ2F0aW9uRGlzYWJsZWRDbGFzczogJ3N3aXBlci1uYXZpZ2F0aW9uLWRpc2FibGVkJ1xuICAgIH1cbiAgfSk7XG4gIHN3aXBlci5uYXZpZ2F0aW9uID0ge1xuICAgIG5leHRFbDogbnVsbCxcbiAgICBwcmV2RWw6IG51bGxcbiAgfTtcbiAgZnVuY3Rpb24gZ2V0RWwoZWwpIHtcbiAgICBsZXQgcmVzO1xuICAgIGlmIChlbCAmJiB0eXBlb2YgZWwgPT09ICdzdHJpbmcnICYmIHN3aXBlci5pc0VsZW1lbnQpIHtcbiAgICAgIHJlcyA9IHN3aXBlci5lbC5xdWVyeVNlbGVjdG9yKGVsKTtcbiAgICAgIGlmIChyZXMpIHJldHVybiByZXM7XG4gICAgfVxuICAgIGlmIChlbCkge1xuICAgICAgaWYgKHR5cGVvZiBlbCA9PT0gJ3N0cmluZycpIHJlcyA9IFsuLi5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGVsKV07XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy51bmlxdWVOYXZFbGVtZW50cyAmJiB0eXBlb2YgZWwgPT09ICdzdHJpbmcnICYmIHJlcyAmJiByZXMubGVuZ3RoID4gMSAmJiBzd2lwZXIuZWwucXVlcnlTZWxlY3RvckFsbChlbCkubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJlcyA9IHN3aXBlci5lbC5xdWVyeVNlbGVjdG9yKGVsKTtcbiAgICAgIH0gZWxzZSBpZiAocmVzICYmIHJlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgcmVzID0gcmVzWzBdO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZWwgJiYgIXJlcykgcmV0dXJuIGVsO1xuICAgIC8vIGlmIChBcnJheS5pc0FycmF5KHJlcykgJiYgcmVzLmxlbmd0aCA9PT0gMSkgcmVzID0gcmVzWzBdO1xuICAgIHJldHVybiByZXM7XG4gIH1cbiAgZnVuY3Rpb24gdG9nZ2xlRWwoZWwsIGRpc2FibGVkKSB7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uO1xuICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgIGVsLmZvckVhY2goc3ViRWwgPT4ge1xuICAgICAgaWYgKHN1YkVsKSB7XG4gICAgICAgIHN1YkVsLmNsYXNzTGlzdFtkaXNhYmxlZCA/ICdhZGQnIDogJ3JlbW92ZSddKC4uLnBhcmFtcy5kaXNhYmxlZENsYXNzLnNwbGl0KCcgJykpO1xuICAgICAgICBpZiAoc3ViRWwudGFnTmFtZSA9PT0gJ0JVVFRPTicpIHN1YkVsLmRpc2FibGVkID0gZGlzYWJsZWQ7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc3dpcGVyLmVuYWJsZWQpIHtcbiAgICAgICAgICBzdWJFbC5jbGFzc0xpc3Rbc3dpcGVyLmlzTG9ja2VkID8gJ2FkZCcgOiAncmVtb3ZlJ10ocGFyYW1zLmxvY2tDbGFzcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgLy8gVXBkYXRlIE5hdmlnYXRpb24gQnV0dG9uc1xuICAgIGNvbnN0IHtcbiAgICAgIG5leHRFbCxcbiAgICAgIHByZXZFbFxuICAgIH0gPSBzd2lwZXIubmF2aWdhdGlvbjtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICB0b2dnbGVFbChwcmV2RWwsIGZhbHNlKTtcbiAgICAgIHRvZ2dsZUVsKG5leHRFbCwgZmFsc2UpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0b2dnbGVFbChwcmV2RWwsIHN3aXBlci5pc0JlZ2lubmluZyAmJiAhc3dpcGVyLnBhcmFtcy5yZXdpbmQpO1xuICAgIHRvZ2dsZUVsKG5leHRFbCwgc3dpcGVyLmlzRW5kICYmICFzd2lwZXIucGFyYW1zLnJld2luZCk7XG4gIH1cbiAgZnVuY3Rpb24gb25QcmV2Q2xpY2soZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAoc3dpcGVyLmlzQmVnaW5uaW5nICYmICFzd2lwZXIucGFyYW1zLmxvb3AgJiYgIXN3aXBlci5wYXJhbXMucmV3aW5kKSByZXR1cm47XG4gICAgc3dpcGVyLnNsaWRlUHJldigpO1xuICAgIGVtaXQoJ25hdmlnYXRpb25QcmV2Jyk7XG4gIH1cbiAgZnVuY3Rpb24gb25OZXh0Q2xpY2soZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAoc3dpcGVyLmlzRW5kICYmICFzd2lwZXIucGFyYW1zLmxvb3AgJiYgIXN3aXBlci5wYXJhbXMucmV3aW5kKSByZXR1cm47XG4gICAgc3dpcGVyLnNsaWRlTmV4dCgpO1xuICAgIGVtaXQoJ25hdmlnYXRpb25OZXh0Jyk7XG4gIH1cbiAgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLm5hdmlnYXRpb247XG4gICAgc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uID0gY3JlYXRlRWxlbWVudElmTm90RGVmaW5lZChzd2lwZXIsIHN3aXBlci5vcmlnaW5hbFBhcmFtcy5uYXZpZ2F0aW9uLCBzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24sIHtcbiAgICAgIG5leHRFbDogJ3N3aXBlci1idXR0b24tbmV4dCcsXG4gICAgICBwcmV2RWw6ICdzd2lwZXItYnV0dG9uLXByZXYnXG4gICAgfSk7XG4gICAgaWYgKCEocGFyYW1zLm5leHRFbCB8fCBwYXJhbXMucHJldkVsKSkgcmV0dXJuO1xuICAgIGxldCBuZXh0RWwgPSBnZXRFbChwYXJhbXMubmV4dEVsKTtcbiAgICBsZXQgcHJldkVsID0gZ2V0RWwocGFyYW1zLnByZXZFbCk7XG4gICAgT2JqZWN0LmFzc2lnbihzd2lwZXIubmF2aWdhdGlvbiwge1xuICAgICAgbmV4dEVsLFxuICAgICAgcHJldkVsXG4gICAgfSk7XG4gICAgbmV4dEVsID0gbWFrZUVsZW1lbnRzQXJyYXkobmV4dEVsKTtcbiAgICBwcmV2RWwgPSBtYWtlRWxlbWVudHNBcnJheShwcmV2RWwpO1xuICAgIGNvbnN0IGluaXRCdXR0b24gPSAoZWwsIGRpcikgPT4ge1xuICAgICAgaWYgKGVsKSB7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZGlyID09PSAnbmV4dCcgPyBvbk5leHRDbGljayA6IG9uUHJldkNsaWNrKTtcbiAgICAgIH1cbiAgICAgIGlmICghc3dpcGVyLmVuYWJsZWQgJiYgZWwpIHtcbiAgICAgICAgZWwuY2xhc3NMaXN0LmFkZCguLi5wYXJhbXMubG9ja0NsYXNzLnNwbGl0KCcgJykpO1xuICAgICAgfVxuICAgIH07XG4gICAgbmV4dEVsLmZvckVhY2goZWwgPT4gaW5pdEJ1dHRvbihlbCwgJ25leHQnKSk7XG4gICAgcHJldkVsLmZvckVhY2goZWwgPT4gaW5pdEJ1dHRvbihlbCwgJ3ByZXYnKSk7XG4gIH1cbiAgZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICBsZXQge1xuICAgICAgbmV4dEVsLFxuICAgICAgcHJldkVsXG4gICAgfSA9IHN3aXBlci5uYXZpZ2F0aW9uO1xuICAgIG5leHRFbCA9IG1ha2VFbGVtZW50c0FycmF5KG5leHRFbCk7XG4gICAgcHJldkVsID0gbWFrZUVsZW1lbnRzQXJyYXkocHJldkVsKTtcbiAgICBjb25zdCBkZXN0cm95QnV0dG9uID0gKGVsLCBkaXIpID0+IHtcbiAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZGlyID09PSAnbmV4dCcgPyBvbk5leHRDbGljayA6IG9uUHJldkNsaWNrKTtcbiAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoLi4uc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLmRpc2FibGVkQ2xhc3Muc3BsaXQoJyAnKSk7XG4gICAgfTtcbiAgICBuZXh0RWwuZm9yRWFjaChlbCA9PiBkZXN0cm95QnV0dG9uKGVsLCAnbmV4dCcpKTtcbiAgICBwcmV2RWwuZm9yRWFjaChlbCA9PiBkZXN0cm95QnV0dG9uKGVsLCAncHJldicpKTtcbiAgfVxuICBvbignaW5pdCcsICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLmVuYWJsZWQgPT09IGZhbHNlKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIGRpc2FibGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5pdCgpO1xuICAgICAgdXBkYXRlKCk7XG4gICAgfVxuICB9KTtcbiAgb24oJ3RvRWRnZSBmcm9tRWRnZSBsb2NrIHVubG9jaycsICgpID0+IHtcbiAgICB1cGRhdGUoKTtcbiAgfSk7XG4gIG9uKCdkZXN0cm95JywgKCkgPT4ge1xuICAgIGRlc3Ryb3koKTtcbiAgfSk7XG4gIG9uKCdlbmFibGUgZGlzYWJsZScsICgpID0+IHtcbiAgICBsZXQge1xuICAgICAgbmV4dEVsLFxuICAgICAgcHJldkVsXG4gICAgfSA9IHN3aXBlci5uYXZpZ2F0aW9uO1xuICAgIG5leHRFbCA9IG1ha2VFbGVtZW50c0FycmF5KG5leHRFbCk7XG4gICAgcHJldkVsID0gbWFrZUVsZW1lbnRzQXJyYXkocHJldkVsKTtcbiAgICBpZiAoc3dpcGVyLmVuYWJsZWQpIHtcbiAgICAgIHVwZGF0ZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBbLi4ubmV4dEVsLCAuLi5wcmV2RWxdLmZpbHRlcihlbCA9PiAhIWVsKS5mb3JFYWNoKGVsID0+IGVsLmNsYXNzTGlzdC5hZGQoc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLmxvY2tDbGFzcykpO1xuICB9KTtcbiAgb24oJ2NsaWNrJywgKF9zLCBlKSA9PiB7XG4gICAgbGV0IHtcbiAgICAgIG5leHRFbCxcbiAgICAgIHByZXZFbFxuICAgIH0gPSBzd2lwZXIubmF2aWdhdGlvbjtcbiAgICBuZXh0RWwgPSBtYWtlRWxlbWVudHNBcnJheShuZXh0RWwpO1xuICAgIHByZXZFbCA9IG1ha2VFbGVtZW50c0FycmF5KHByZXZFbCk7XG4gICAgY29uc3QgdGFyZ2V0RWwgPSBlLnRhcmdldDtcbiAgICBsZXQgdGFyZ2V0SXNCdXR0b24gPSBwcmV2RWwuaW5jbHVkZXModGFyZ2V0RWwpIHx8IG5leHRFbC5pbmNsdWRlcyh0YXJnZXRFbCk7XG4gICAgaWYgKHN3aXBlci5pc0VsZW1lbnQgJiYgIXRhcmdldElzQnV0dG9uKSB7XG4gICAgICBjb25zdCBwYXRoID0gZS5wYXRoIHx8IGUuY29tcG9zZWRQYXRoICYmIGUuY29tcG9zZWRQYXRoKCk7XG4gICAgICBpZiAocGF0aCkge1xuICAgICAgICB0YXJnZXRJc0J1dHRvbiA9IHBhdGguZmluZChwYXRoRWwgPT4gbmV4dEVsLmluY2x1ZGVzKHBhdGhFbCkgfHwgcHJldkVsLmluY2x1ZGVzKHBhdGhFbCkpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLmhpZGVPbkNsaWNrICYmICF0YXJnZXRJc0J1dHRvbikge1xuICAgICAgaWYgKHN3aXBlci5wYWdpbmF0aW9uICYmIHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbiAmJiBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uY2xpY2thYmxlICYmIChzd2lwZXIucGFnaW5hdGlvbi5lbCA9PT0gdGFyZ2V0RWwgfHwgc3dpcGVyLnBhZ2luYXRpb24uZWwuY29udGFpbnModGFyZ2V0RWwpKSkgcmV0dXJuO1xuICAgICAgbGV0IGlzSGlkZGVuO1xuICAgICAgaWYgKG5leHRFbC5sZW5ndGgpIHtcbiAgICAgICAgaXNIaWRkZW4gPSBuZXh0RWxbMF0uY2xhc3NMaXN0LmNvbnRhaW5zKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5oaWRkZW5DbGFzcyk7XG4gICAgICB9IGVsc2UgaWYgKHByZXZFbC5sZW5ndGgpIHtcbiAgICAgICAgaXNIaWRkZW4gPSBwcmV2RWxbMF0uY2xhc3NMaXN0LmNvbnRhaW5zKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5oaWRkZW5DbGFzcyk7XG4gICAgICB9XG4gICAgICBpZiAoaXNIaWRkZW4gPT09IHRydWUpIHtcbiAgICAgICAgZW1pdCgnbmF2aWdhdGlvblNob3cnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVtaXQoJ25hdmlnYXRpb25IaWRlJyk7XG4gICAgICB9XG4gICAgICBbLi4ubmV4dEVsLCAuLi5wcmV2RWxdLmZpbHRlcihlbCA9PiAhIWVsKS5mb3JFYWNoKGVsID0+IGVsLmNsYXNzTGlzdC50b2dnbGUoc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLmhpZGRlbkNsYXNzKSk7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgZW5hYmxlID0gKCkgPT4ge1xuICAgIHN3aXBlci5lbC5jbGFzc0xpc3QucmVtb3ZlKC4uLnN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5uYXZpZ2F0aW9uRGlzYWJsZWRDbGFzcy5zcGxpdCgnICcpKTtcbiAgICBpbml0KCk7XG4gICAgdXBkYXRlKCk7XG4gIH07XG4gIGNvbnN0IGRpc2FibGUgPSAoKSA9PiB7XG4gICAgc3dpcGVyLmVsLmNsYXNzTGlzdC5hZGQoLi4uc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLm5hdmlnYXRpb25EaXNhYmxlZENsYXNzLnNwbGl0KCcgJykpO1xuICAgIGRlc3Ryb3koKTtcbiAgfTtcbiAgT2JqZWN0LmFzc2lnbihzd2lwZXIubmF2aWdhdGlvbiwge1xuICAgIGVuYWJsZSxcbiAgICBkaXNhYmxlLFxuICAgIHVwZGF0ZSxcbiAgICBpbml0LFxuICAgIGRlc3Ryb3lcbiAgfSk7XG59XG5cbmV4cG9ydCB7IE5hdmlnYXRpb24gYXMgZGVmYXVsdCB9O1xuIiwiaW1wb3J0IHsgYyBhcyBjbGFzc2VzVG9TZWxlY3RvciB9IGZyb20gJy4uL3NoYXJlZC9jbGFzc2VzLXRvLXNlbGVjdG9yLm1qcyc7XG5pbXBvcnQgeyBjIGFzIGNyZWF0ZUVsZW1lbnRJZk5vdERlZmluZWQgfSBmcm9tICcuLi9zaGFyZWQvY3JlYXRlLWVsZW1lbnQtaWYtbm90LWRlZmluZWQubWpzJztcbmltcG9ydCB7IG0gYXMgbWFrZUVsZW1lbnRzQXJyYXksIGYgYXMgZWxlbWVudE91dGVyU2l6ZSwgaCBhcyBlbGVtZW50SW5kZXgsIGEgYXMgZWxlbWVudFBhcmVudHMgfSBmcm9tICcuLi9zaGFyZWQvdXRpbHMubWpzJztcblxuZnVuY3Rpb24gUGFnaW5hdGlvbihfcmVmKSB7XG4gIGxldCB7XG4gICAgc3dpcGVyLFxuICAgIGV4dGVuZFBhcmFtcyxcbiAgICBvbixcbiAgICBlbWl0XG4gIH0gPSBfcmVmO1xuICBjb25zdCBwZnggPSAnc3dpcGVyLXBhZ2luYXRpb24nO1xuICBleHRlbmRQYXJhbXMoe1xuICAgIHBhZ2luYXRpb246IHtcbiAgICAgIGVsOiBudWxsLFxuICAgICAgYnVsbGV0RWxlbWVudDogJ3NwYW4nLFxuICAgICAgY2xpY2thYmxlOiBmYWxzZSxcbiAgICAgIGhpZGVPbkNsaWNrOiBmYWxzZSxcbiAgICAgIHJlbmRlckJ1bGxldDogbnVsbCxcbiAgICAgIHJlbmRlclByb2dyZXNzYmFyOiBudWxsLFxuICAgICAgcmVuZGVyRnJhY3Rpb246IG51bGwsXG4gICAgICByZW5kZXJDdXN0b206IG51bGwsXG4gICAgICBwcm9ncmVzc2Jhck9wcG9zaXRlOiBmYWxzZSxcbiAgICAgIHR5cGU6ICdidWxsZXRzJyxcbiAgICAgIC8vICdidWxsZXRzJyBvciAncHJvZ3Jlc3NiYXInIG9yICdmcmFjdGlvbicgb3IgJ2N1c3RvbSdcbiAgICAgIGR5bmFtaWNCdWxsZXRzOiBmYWxzZSxcbiAgICAgIGR5bmFtaWNNYWluQnVsbGV0czogMSxcbiAgICAgIGZvcm1hdEZyYWN0aW9uQ3VycmVudDogbnVtYmVyID0+IG51bWJlcixcbiAgICAgIGZvcm1hdEZyYWN0aW9uVG90YWw6IG51bWJlciA9PiBudW1iZXIsXG4gICAgICBidWxsZXRDbGFzczogYCR7cGZ4fS1idWxsZXRgLFxuICAgICAgYnVsbGV0QWN0aXZlQ2xhc3M6IGAke3BmeH0tYnVsbGV0LWFjdGl2ZWAsXG4gICAgICBtb2RpZmllckNsYXNzOiBgJHtwZnh9LWAsXG4gICAgICBjdXJyZW50Q2xhc3M6IGAke3BmeH0tY3VycmVudGAsXG4gICAgICB0b3RhbENsYXNzOiBgJHtwZnh9LXRvdGFsYCxcbiAgICAgIGhpZGRlbkNsYXNzOiBgJHtwZnh9LWhpZGRlbmAsXG4gICAgICBwcm9ncmVzc2JhckZpbGxDbGFzczogYCR7cGZ4fS1wcm9ncmVzc2Jhci1maWxsYCxcbiAgICAgIHByb2dyZXNzYmFyT3Bwb3NpdGVDbGFzczogYCR7cGZ4fS1wcm9ncmVzc2Jhci1vcHBvc2l0ZWAsXG4gICAgICBjbGlja2FibGVDbGFzczogYCR7cGZ4fS1jbGlja2FibGVgLFxuICAgICAgbG9ja0NsYXNzOiBgJHtwZnh9LWxvY2tgLFxuICAgICAgaG9yaXpvbnRhbENsYXNzOiBgJHtwZnh9LWhvcml6b250YWxgLFxuICAgICAgdmVydGljYWxDbGFzczogYCR7cGZ4fS12ZXJ0aWNhbGAsXG4gICAgICBwYWdpbmF0aW9uRGlzYWJsZWRDbGFzczogYCR7cGZ4fS1kaXNhYmxlZGBcbiAgICB9XG4gIH0pO1xuICBzd2lwZXIucGFnaW5hdGlvbiA9IHtcbiAgICBlbDogbnVsbCxcbiAgICBidWxsZXRzOiBbXVxuICB9O1xuICBsZXQgYnVsbGV0U2l6ZTtcbiAgbGV0IGR5bmFtaWNCdWxsZXRJbmRleCA9IDA7XG4gIGZ1bmN0aW9uIGlzUGFnaW5hdGlvbkRpc2FibGVkKCkge1xuICAgIHJldHVybiAhc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmVsIHx8ICFzd2lwZXIucGFnaW5hdGlvbi5lbCB8fCBBcnJheS5pc0FycmF5KHN3aXBlci5wYWdpbmF0aW9uLmVsKSAmJiBzd2lwZXIucGFnaW5hdGlvbi5lbC5sZW5ndGggPT09IDA7XG4gIH1cbiAgZnVuY3Rpb24gc2V0U2lkZUJ1bGxldHMoYnVsbGV0RWwsIHBvc2l0aW9uKSB7XG4gICAgY29uc3Qge1xuICAgICAgYnVsbGV0QWN0aXZlQ2xhc3NcbiAgICB9ID0gc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uO1xuICAgIGlmICghYnVsbGV0RWwpIHJldHVybjtcbiAgICBidWxsZXRFbCA9IGJ1bGxldEVsW2Ake3Bvc2l0aW9uID09PSAncHJldicgPyAncHJldmlvdXMnIDogJ25leHQnfUVsZW1lbnRTaWJsaW5nYF07XG4gICAgaWYgKGJ1bGxldEVsKSB7XG4gICAgICBidWxsZXRFbC5jbGFzc0xpc3QuYWRkKGAke2J1bGxldEFjdGl2ZUNsYXNzfS0ke3Bvc2l0aW9ufWApO1xuICAgICAgYnVsbGV0RWwgPSBidWxsZXRFbFtgJHtwb3NpdGlvbiA9PT0gJ3ByZXYnID8gJ3ByZXZpb3VzJyA6ICduZXh0J31FbGVtZW50U2libGluZ2BdO1xuICAgICAgaWYgKGJ1bGxldEVsKSB7XG4gICAgICAgIGJ1bGxldEVsLmNsYXNzTGlzdC5hZGQoYCR7YnVsbGV0QWN0aXZlQ2xhc3N9LSR7cG9zaXRpb259LSR7cG9zaXRpb259YCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIG9uQnVsbGV0Q2xpY2soZSkge1xuICAgIGNvbnN0IGJ1bGxldEVsID0gZS50YXJnZXQuY2xvc2VzdChjbGFzc2VzVG9TZWxlY3Rvcihzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uYnVsbGV0Q2xhc3MpKTtcbiAgICBpZiAoIWJ1bGxldEVsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBjb25zdCBpbmRleCA9IGVsZW1lbnRJbmRleChidWxsZXRFbCkgKiBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgIGlmIChzd2lwZXIucmVhbEluZGV4ID09PSBpbmRleCkgcmV0dXJuO1xuICAgICAgc3dpcGVyLnNsaWRlVG9Mb29wKGluZGV4KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oaW5kZXgpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgLy8gUmVuZGVyIHx8IFVwZGF0ZSBQYWdpbmF0aW9uIGJ1bGxldHMvaXRlbXNcbiAgICBjb25zdCBydGwgPSBzd2lwZXIucnRsO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbjtcbiAgICBpZiAoaXNQYWdpbmF0aW9uRGlzYWJsZWQoKSkgcmV0dXJuO1xuICAgIGxldCBlbCA9IHN3aXBlci5wYWdpbmF0aW9uLmVsO1xuICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgIC8vIEN1cnJlbnQvVG90YWxcbiAgICBsZXQgY3VycmVudDtcbiAgICBsZXQgcHJldmlvdXNJbmRleDtcbiAgICBjb25zdCBzbGlkZXNMZW5ndGggPSBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCA/IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggOiBzd2lwZXIuc2xpZGVzLmxlbmd0aDtcbiAgICBjb25zdCB0b3RhbCA9IHN3aXBlci5wYXJhbXMubG9vcCA/IE1hdGguY2VpbChzbGlkZXNMZW5ndGggLyBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwKSA6IHN3aXBlci5zbmFwR3JpZC5sZW5ndGg7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgcHJldmlvdXNJbmRleCA9IHN3aXBlci5wcmV2aW91c1JlYWxJbmRleCB8fCAwO1xuICAgICAgY3VycmVudCA9IHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXAgPiAxID8gTWF0aC5mbG9vcihzd2lwZXIucmVhbEluZGV4IC8gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCkgOiBzd2lwZXIucmVhbEluZGV4O1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHN3aXBlci5zbmFwSW5kZXggIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjdXJyZW50ID0gc3dpcGVyLnNuYXBJbmRleDtcbiAgICAgIHByZXZpb3VzSW5kZXggPSBzd2lwZXIucHJldmlvdXNTbmFwSW5kZXg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByZXZpb3VzSW5kZXggPSBzd2lwZXIucHJldmlvdXNJbmRleCB8fCAwO1xuICAgICAgY3VycmVudCA9IHN3aXBlci5hY3RpdmVJbmRleCB8fCAwO1xuICAgIH1cbiAgICAvLyBUeXBlc1xuICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2J1bGxldHMnICYmIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMgJiYgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cy5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCBidWxsZXRzID0gc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cztcbiAgICAgIGxldCBmaXJzdEluZGV4O1xuICAgICAgbGV0IGxhc3RJbmRleDtcbiAgICAgIGxldCBtaWRJbmRleDtcbiAgICAgIGlmIChwYXJhbXMuZHluYW1pY0J1bGxldHMpIHtcbiAgICAgICAgYnVsbGV0U2l6ZSA9IGVsZW1lbnRPdXRlclNpemUoYnVsbGV0c1swXSwgc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ3dpZHRoJyA6ICdoZWlnaHQnLCB0cnVlKTtcbiAgICAgICAgZWwuZm9yRWFjaChzdWJFbCA9PiB7XG4gICAgICAgICAgc3ViRWwuc3R5bGVbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ3dpZHRoJyA6ICdoZWlnaHQnXSA9IGAke2J1bGxldFNpemUgKiAocGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyArIDQpfXB4YDtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzID4gMSAmJiBwcmV2aW91c0luZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBkeW5hbWljQnVsbGV0SW5kZXggKz0gY3VycmVudCAtIChwcmV2aW91c0luZGV4IHx8IDApO1xuICAgICAgICAgIGlmIChkeW5hbWljQnVsbGV0SW5kZXggPiBwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzIC0gMSkge1xuICAgICAgICAgICAgZHluYW1pY0J1bGxldEluZGV4ID0gcGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyAtIDE7XG4gICAgICAgICAgfSBlbHNlIGlmIChkeW5hbWljQnVsbGV0SW5kZXggPCAwKSB7XG4gICAgICAgICAgICBkeW5hbWljQnVsbGV0SW5kZXggPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmaXJzdEluZGV4ID0gTWF0aC5tYXgoY3VycmVudCAtIGR5bmFtaWNCdWxsZXRJbmRleCwgMCk7XG4gICAgICAgIGxhc3RJbmRleCA9IGZpcnN0SW5kZXggKyAoTWF0aC5taW4oYnVsbGV0cy5sZW5ndGgsIHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMpIC0gMSk7XG4gICAgICAgIG1pZEluZGV4ID0gKGxhc3RJbmRleCArIGZpcnN0SW5kZXgpIC8gMjtcbiAgICAgIH1cbiAgICAgIGJ1bGxldHMuZm9yRWFjaChidWxsZXRFbCA9PiB7XG4gICAgICAgIGNvbnN0IGNsYXNzZXNUb1JlbW92ZSA9IFsuLi5bJycsICctbmV4dCcsICctbmV4dC1uZXh0JywgJy1wcmV2JywgJy1wcmV2LXByZXYnLCAnLW1haW4nXS5tYXAoc3VmZml4ID0+IGAke3BhcmFtcy5idWxsZXRBY3RpdmVDbGFzc30ke3N1ZmZpeH1gKV0ubWFwKHMgPT4gdHlwZW9mIHMgPT09ICdzdHJpbmcnICYmIHMuaW5jbHVkZXMoJyAnKSA/IHMuc3BsaXQoJyAnKSA6IHMpLmZsYXQoKTtcbiAgICAgICAgYnVsbGV0RWwuY2xhc3NMaXN0LnJlbW92ZSguLi5jbGFzc2VzVG9SZW1vdmUpO1xuICAgICAgfSk7XG4gICAgICBpZiAoZWwubGVuZ3RoID4gMSkge1xuICAgICAgICBidWxsZXRzLmZvckVhY2goYnVsbGV0ID0+IHtcbiAgICAgICAgICBjb25zdCBidWxsZXRJbmRleCA9IGVsZW1lbnRJbmRleChidWxsZXQpO1xuICAgICAgICAgIGlmIChidWxsZXRJbmRleCA9PT0gY3VycmVudCkge1xuICAgICAgICAgICAgYnVsbGV0LmNsYXNzTGlzdC5hZGQoLi4ucGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzLnNwbGl0KCcgJykpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoc3dpcGVyLmlzRWxlbWVudCkge1xuICAgICAgICAgICAgYnVsbGV0LnNldEF0dHJpYnV0ZSgncGFydCcsICdidWxsZXQnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHBhcmFtcy5keW5hbWljQnVsbGV0cykge1xuICAgICAgICAgICAgaWYgKGJ1bGxldEluZGV4ID49IGZpcnN0SW5kZXggJiYgYnVsbGV0SW5kZXggPD0gbGFzdEluZGV4KSB7XG4gICAgICAgICAgICAgIGJ1bGxldC5jbGFzc0xpc3QuYWRkKC4uLmAke3BhcmFtcy5idWxsZXRBY3RpdmVDbGFzc30tbWFpbmAuc3BsaXQoJyAnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYnVsbGV0SW5kZXggPT09IGZpcnN0SW5kZXgpIHtcbiAgICAgICAgICAgICAgc2V0U2lkZUJ1bGxldHMoYnVsbGV0LCAncHJldicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGJ1bGxldEluZGV4ID09PSBsYXN0SW5kZXgpIHtcbiAgICAgICAgICAgICAgc2V0U2lkZUJ1bGxldHMoYnVsbGV0LCAnbmV4dCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBidWxsZXQgPSBidWxsZXRzW2N1cnJlbnRdO1xuICAgICAgICBpZiAoYnVsbGV0KSB7XG4gICAgICAgICAgYnVsbGV0LmNsYXNzTGlzdC5hZGQoLi4ucGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzLnNwbGl0KCcgJykpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzd2lwZXIuaXNFbGVtZW50KSB7XG4gICAgICAgICAgYnVsbGV0cy5mb3JFYWNoKChidWxsZXRFbCwgYnVsbGV0SW5kZXgpID0+IHtcbiAgICAgICAgICAgIGJ1bGxldEVsLnNldEF0dHJpYnV0ZSgncGFydCcsIGJ1bGxldEluZGV4ID09PSBjdXJyZW50ID8gJ2J1bGxldC1hY3RpdmUnIDogJ2J1bGxldCcpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJhbXMuZHluYW1pY0J1bGxldHMpIHtcbiAgICAgICAgICBjb25zdCBmaXJzdERpc3BsYXllZEJ1bGxldCA9IGJ1bGxldHNbZmlyc3RJbmRleF07XG4gICAgICAgICAgY29uc3QgbGFzdERpc3BsYXllZEJ1bGxldCA9IGJ1bGxldHNbbGFzdEluZGV4XTtcbiAgICAgICAgICBmb3IgKGxldCBpID0gZmlyc3RJbmRleDsgaSA8PSBsYXN0SW5kZXg7IGkgKz0gMSkge1xuICAgICAgICAgICAgaWYgKGJ1bGxldHNbaV0pIHtcbiAgICAgICAgICAgICAgYnVsbGV0c1tpXS5jbGFzc0xpc3QuYWRkKC4uLmAke3BhcmFtcy5idWxsZXRBY3RpdmVDbGFzc30tbWFpbmAuc3BsaXQoJyAnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHNldFNpZGVCdWxsZXRzKGZpcnN0RGlzcGxheWVkQnVsbGV0LCAncHJldicpO1xuICAgICAgICAgIHNldFNpZGVCdWxsZXRzKGxhc3REaXNwbGF5ZWRCdWxsZXQsICduZXh0Jyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChwYXJhbXMuZHluYW1pY0J1bGxldHMpIHtcbiAgICAgICAgY29uc3QgZHluYW1pY0J1bGxldHNMZW5ndGggPSBNYXRoLm1pbihidWxsZXRzLmxlbmd0aCwgcGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyArIDQpO1xuICAgICAgICBjb25zdCBidWxsZXRzT2Zmc2V0ID0gKGJ1bGxldFNpemUgKiBkeW5hbWljQnVsbGV0c0xlbmd0aCAtIGJ1bGxldFNpemUpIC8gMiAtIG1pZEluZGV4ICogYnVsbGV0U2l6ZTtcbiAgICAgICAgY29uc3Qgb2Zmc2V0UHJvcCA9IHJ0bCA/ICdyaWdodCcgOiAnbGVmdCc7XG4gICAgICAgIGJ1bGxldHMuZm9yRWFjaChidWxsZXQgPT4ge1xuICAgICAgICAgIGJ1bGxldC5zdHlsZVtzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBvZmZzZXRQcm9wIDogJ3RvcCddID0gYCR7YnVsbGV0c09mZnNldH1weGA7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICBlbC5mb3JFYWNoKChzdWJFbCwgc3ViRWxJbmRleCkgPT4ge1xuICAgICAgaWYgKHBhcmFtcy50eXBlID09PSAnZnJhY3Rpb24nKSB7XG4gICAgICAgIHN1YkVsLnF1ZXJ5U2VsZWN0b3JBbGwoY2xhc3Nlc1RvU2VsZWN0b3IocGFyYW1zLmN1cnJlbnRDbGFzcykpLmZvckVhY2goZnJhY3Rpb25FbCA9PiB7XG4gICAgICAgICAgZnJhY3Rpb25FbC50ZXh0Q29udGVudCA9IHBhcmFtcy5mb3JtYXRGcmFjdGlvbkN1cnJlbnQoY3VycmVudCArIDEpO1xuICAgICAgICB9KTtcbiAgICAgICAgc3ViRWwucXVlcnlTZWxlY3RvckFsbChjbGFzc2VzVG9TZWxlY3RvcihwYXJhbXMudG90YWxDbGFzcykpLmZvckVhY2godG90YWxFbCA9PiB7XG4gICAgICAgICAgdG90YWxFbC50ZXh0Q29udGVudCA9IHBhcmFtcy5mb3JtYXRGcmFjdGlvblRvdGFsKHRvdGFsKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdwcm9ncmVzc2JhcicpIHtcbiAgICAgICAgbGV0IHByb2dyZXNzYmFyRGlyZWN0aW9uO1xuICAgICAgICBpZiAocGFyYW1zLnByb2dyZXNzYmFyT3Bwb3NpdGUpIHtcbiAgICAgICAgICBwcm9ncmVzc2JhckRpcmVjdGlvbiA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJvZ3Jlc3NiYXJEaXJlY3Rpb24gPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnaG9yaXpvbnRhbCcgOiAndmVydGljYWwnO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNjYWxlID0gKGN1cnJlbnQgKyAxKSAvIHRvdGFsO1xuICAgICAgICBsZXQgc2NhbGVYID0gMTtcbiAgICAgICAgbGV0IHNjYWxlWSA9IDE7XG4gICAgICAgIGlmIChwcm9ncmVzc2JhckRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnKSB7XG4gICAgICAgICAgc2NhbGVYID0gc2NhbGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2NhbGVZID0gc2NhbGU7XG4gICAgICAgIH1cbiAgICAgICAgc3ViRWwucXVlcnlTZWxlY3RvckFsbChjbGFzc2VzVG9TZWxlY3RvcihwYXJhbXMucHJvZ3Jlc3NiYXJGaWxsQ2xhc3MpKS5mb3JFYWNoKHByb2dyZXNzRWwgPT4ge1xuICAgICAgICAgIHByb2dyZXNzRWwuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNkKDAsMCwwKSBzY2FsZVgoJHtzY2FsZVh9KSBzY2FsZVkoJHtzY2FsZVl9KWA7XG4gICAgICAgICAgcHJvZ3Jlc3NFbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBgJHtzd2lwZXIucGFyYW1zLnNwZWVkfW1zYDtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdjdXN0b20nICYmIHBhcmFtcy5yZW5kZXJDdXN0b20pIHtcbiAgICAgICAgc3ViRWwuaW5uZXJIVE1MID0gcGFyYW1zLnJlbmRlckN1c3RvbShzd2lwZXIsIGN1cnJlbnQgKyAxLCB0b3RhbCk7XG4gICAgICAgIGlmIChzdWJFbEluZGV4ID09PSAwKSBlbWl0KCdwYWdpbmF0aW9uUmVuZGVyJywgc3ViRWwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHN1YkVsSW5kZXggPT09IDApIGVtaXQoJ3BhZ2luYXRpb25SZW5kZXInLCBzdWJFbCk7XG4gICAgICAgIGVtaXQoJ3BhZ2luYXRpb25VcGRhdGUnLCBzdWJFbCk7XG4gICAgICB9XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHN3aXBlci5lbmFibGVkKSB7XG4gICAgICAgIHN1YkVsLmNsYXNzTGlzdFtzd2lwZXIuaXNMb2NrZWQgPyAnYWRkJyA6ICdyZW1vdmUnXShwYXJhbXMubG9ja0NsYXNzKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgLy8gUmVuZGVyIENvbnRhaW5lclxuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbjtcbiAgICBpZiAoaXNQYWdpbmF0aW9uRGlzYWJsZWQoKSkgcmV0dXJuO1xuICAgIGNvbnN0IHNsaWRlc0xlbmd0aCA9IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCA6IHN3aXBlci5ncmlkICYmIHN3aXBlci5wYXJhbXMuZ3JpZC5yb3dzID4gMSA/IHN3aXBlci5zbGlkZXMubGVuZ3RoIC8gTWF0aC5jZWlsKHN3aXBlci5wYXJhbXMuZ3JpZC5yb3dzKSA6IHN3aXBlci5zbGlkZXMubGVuZ3RoO1xuICAgIGxldCBlbCA9IHN3aXBlci5wYWdpbmF0aW9uLmVsO1xuICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgIGxldCBwYWdpbmF0aW9uSFRNTCA9ICcnO1xuICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2J1bGxldHMnKSB7XG4gICAgICBsZXQgbnVtYmVyT2ZCdWxsZXRzID0gc3dpcGVyLnBhcmFtcy5sb29wID8gTWF0aC5jZWlsKHNsaWRlc0xlbmd0aCAvIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXApIDogc3dpcGVyLnNuYXBHcmlkLmxlbmd0aDtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmZyZWVNb2RlICYmIHN3aXBlci5wYXJhbXMuZnJlZU1vZGUuZW5hYmxlZCAmJiBudW1iZXJPZkJ1bGxldHMgPiBzbGlkZXNMZW5ndGgpIHtcbiAgICAgICAgbnVtYmVyT2ZCdWxsZXRzID0gc2xpZGVzTGVuZ3RoO1xuICAgICAgfVxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1iZXJPZkJ1bGxldHM7IGkgKz0gMSkge1xuICAgICAgICBpZiAocGFyYW1zLnJlbmRlckJ1bGxldCkge1xuICAgICAgICAgIHBhZ2luYXRpb25IVE1MICs9IHBhcmFtcy5yZW5kZXJCdWxsZXQuY2FsbChzd2lwZXIsIGksIHBhcmFtcy5idWxsZXRDbGFzcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gcHJldHRpZXItaWdub3JlXG4gICAgICAgICAgcGFnaW5hdGlvbkhUTUwgKz0gYDwke3BhcmFtcy5idWxsZXRFbGVtZW50fSAke3N3aXBlci5pc0VsZW1lbnQgPyAncGFydD1cImJ1bGxldFwiJyA6ICcnfSBjbGFzcz1cIiR7cGFyYW1zLmJ1bGxldENsYXNzfVwiPjwvJHtwYXJhbXMuYnVsbGV0RWxlbWVudH0+YDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdmcmFjdGlvbicpIHtcbiAgICAgIGlmIChwYXJhbXMucmVuZGVyRnJhY3Rpb24pIHtcbiAgICAgICAgcGFnaW5hdGlvbkhUTUwgPSBwYXJhbXMucmVuZGVyRnJhY3Rpb24uY2FsbChzd2lwZXIsIHBhcmFtcy5jdXJyZW50Q2xhc3MsIHBhcmFtcy50b3RhbENsYXNzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhZ2luYXRpb25IVE1MID0gYDxzcGFuIGNsYXNzPVwiJHtwYXJhbXMuY3VycmVudENsYXNzfVwiPjwvc3Bhbj5gICsgJyAvICcgKyBgPHNwYW4gY2xhc3M9XCIke3BhcmFtcy50b3RhbENsYXNzfVwiPjwvc3Bhbj5gO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdwcm9ncmVzc2JhcicpIHtcbiAgICAgIGlmIChwYXJhbXMucmVuZGVyUHJvZ3Jlc3NiYXIpIHtcbiAgICAgICAgcGFnaW5hdGlvbkhUTUwgPSBwYXJhbXMucmVuZGVyUHJvZ3Jlc3NiYXIuY2FsbChzd2lwZXIsIHBhcmFtcy5wcm9ncmVzc2JhckZpbGxDbGFzcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYWdpbmF0aW9uSFRNTCA9IGA8c3BhbiBjbGFzcz1cIiR7cGFyYW1zLnByb2dyZXNzYmFyRmlsbENsYXNzfVwiPjwvc3Bhbj5gO1xuICAgICAgfVxuICAgIH1cbiAgICBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzID0gW107XG4gICAgZWwuZm9yRWFjaChzdWJFbCA9PiB7XG4gICAgICBpZiAocGFyYW1zLnR5cGUgIT09ICdjdXN0b20nKSB7XG4gICAgICAgIHN1YkVsLmlubmVySFRNTCA9IHBhZ2luYXRpb25IVE1MIHx8ICcnO1xuICAgICAgfVxuICAgICAgaWYgKHBhcmFtcy50eXBlID09PSAnYnVsbGV0cycpIHtcbiAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cy5wdXNoKC4uLnN1YkVsLnF1ZXJ5U2VsZWN0b3JBbGwoY2xhc3Nlc1RvU2VsZWN0b3IocGFyYW1zLmJ1bGxldENsYXNzKSkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChwYXJhbXMudHlwZSAhPT0gJ2N1c3RvbScpIHtcbiAgICAgIGVtaXQoJ3BhZ2luYXRpb25SZW5kZXInLCBlbFswXSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uID0gY3JlYXRlRWxlbWVudElmTm90RGVmaW5lZChzd2lwZXIsIHN3aXBlci5vcmlnaW5hbFBhcmFtcy5wYWdpbmF0aW9uLCBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24sIHtcbiAgICAgIGVsOiAnc3dpcGVyLXBhZ2luYXRpb24nXG4gICAgfSk7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uO1xuICAgIGlmICghcGFyYW1zLmVsKSByZXR1cm47XG4gICAgbGV0IGVsO1xuICAgIGlmICh0eXBlb2YgcGFyYW1zLmVsID09PSAnc3RyaW5nJyAmJiBzd2lwZXIuaXNFbGVtZW50KSB7XG4gICAgICBlbCA9IHN3aXBlci5lbC5xdWVyeVNlbGVjdG9yKHBhcmFtcy5lbCk7XG4gICAgfVxuICAgIGlmICghZWwgJiYgdHlwZW9mIHBhcmFtcy5lbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVsID0gWy4uLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwocGFyYW1zLmVsKV07XG4gICAgfVxuICAgIGlmICghZWwpIHtcbiAgICAgIGVsID0gcGFyYW1zLmVsO1xuICAgIH1cbiAgICBpZiAoIWVsIHx8IGVsLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLnVuaXF1ZU5hdkVsZW1lbnRzICYmIHR5cGVvZiBwYXJhbXMuZWwgPT09ICdzdHJpbmcnICYmIEFycmF5LmlzQXJyYXkoZWwpICYmIGVsLmxlbmd0aCA+IDEpIHtcbiAgICAgIGVsID0gWy4uLnN3aXBlci5lbC5xdWVyeVNlbGVjdG9yQWxsKHBhcmFtcy5lbCldO1xuICAgICAgLy8gY2hlY2sgaWYgaXQgYmVsb25ncyB0byBhbm90aGVyIG5lc3RlZCBTd2lwZXJcbiAgICAgIGlmIChlbC5sZW5ndGggPiAxKSB7XG4gICAgICAgIGVsID0gZWwuZmlsdGVyKHN1YkVsID0+IHtcbiAgICAgICAgICBpZiAoZWxlbWVudFBhcmVudHMoc3ViRWwsICcuc3dpcGVyJylbMF0gIT09IHN3aXBlci5lbCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9KVswXTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZWwpICYmIGVsLmxlbmd0aCA9PT0gMSkgZWwgPSBlbFswXTtcbiAgICBPYmplY3QuYXNzaWduKHN3aXBlci5wYWdpbmF0aW9uLCB7XG4gICAgICBlbFxuICAgIH0pO1xuICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgIGVsLmZvckVhY2goc3ViRWwgPT4ge1xuICAgICAgaWYgKHBhcmFtcy50eXBlID09PSAnYnVsbGV0cycgJiYgcGFyYW1zLmNsaWNrYWJsZSkge1xuICAgICAgICBzdWJFbC5jbGFzc0xpc3QuYWRkKC4uLihwYXJhbXMuY2xpY2thYmxlQ2xhc3MgfHwgJycpLnNwbGl0KCcgJykpO1xuICAgICAgfVxuICAgICAgc3ViRWwuY2xhc3NMaXN0LmFkZChwYXJhbXMubW9kaWZpZXJDbGFzcyArIHBhcmFtcy50eXBlKTtcbiAgICAgIHN1YkVsLmNsYXNzTGlzdC5hZGQoc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gcGFyYW1zLmhvcml6b250YWxDbGFzcyA6IHBhcmFtcy52ZXJ0aWNhbENsYXNzKTtcbiAgICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2J1bGxldHMnICYmIHBhcmFtcy5keW5hbWljQnVsbGV0cykge1xuICAgICAgICBzdWJFbC5jbGFzc0xpc3QuYWRkKGAke3BhcmFtcy5tb2RpZmllckNsYXNzfSR7cGFyYW1zLnR5cGV9LWR5bmFtaWNgKTtcbiAgICAgICAgZHluYW1pY0J1bGxldEluZGV4ID0gMDtcbiAgICAgICAgaWYgKHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMgPCAxKSB7XG4gICAgICAgICAgcGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyA9IDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ3Byb2dyZXNzYmFyJyAmJiBwYXJhbXMucHJvZ3Jlc3NiYXJPcHBvc2l0ZSkge1xuICAgICAgICBzdWJFbC5jbGFzc0xpc3QuYWRkKHBhcmFtcy5wcm9ncmVzc2Jhck9wcG9zaXRlQ2xhc3MpO1xuICAgICAgfVxuICAgICAgaWYgKHBhcmFtcy5jbGlja2FibGUpIHtcbiAgICAgICAgc3ViRWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbkJ1bGxldENsaWNrKTtcbiAgICAgIH1cbiAgICAgIGlmICghc3dpcGVyLmVuYWJsZWQpIHtcbiAgICAgICAgc3ViRWwuY2xhc3NMaXN0LmFkZChwYXJhbXMubG9ja0NsYXNzKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbjtcbiAgICBpZiAoaXNQYWdpbmF0aW9uRGlzYWJsZWQoKSkgcmV0dXJuO1xuICAgIGxldCBlbCA9IHN3aXBlci5wYWdpbmF0aW9uLmVsO1xuICAgIGlmIChlbCkge1xuICAgICAgZWwgPSBtYWtlRWxlbWVudHNBcnJheShlbCk7XG4gICAgICBlbC5mb3JFYWNoKHN1YkVsID0+IHtcbiAgICAgICAgc3ViRWwuY2xhc3NMaXN0LnJlbW92ZShwYXJhbXMuaGlkZGVuQ2xhc3MpO1xuICAgICAgICBzdWJFbC5jbGFzc0xpc3QucmVtb3ZlKHBhcmFtcy5tb2RpZmllckNsYXNzICsgcGFyYW1zLnR5cGUpO1xuICAgICAgICBzdWJFbC5jbGFzc0xpc3QucmVtb3ZlKHN3aXBlci5pc0hvcml6b250YWwoKSA/IHBhcmFtcy5ob3Jpem9udGFsQ2xhc3MgOiBwYXJhbXMudmVydGljYWxDbGFzcyk7XG4gICAgICAgIGlmIChwYXJhbXMuY2xpY2thYmxlKSB7XG4gICAgICAgICAgc3ViRWwuY2xhc3NMaXN0LnJlbW92ZSguLi4ocGFyYW1zLmNsaWNrYWJsZUNsYXNzIHx8ICcnKS5zcGxpdCgnICcpKTtcbiAgICAgICAgICBzdWJFbC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIG9uQnVsbGV0Q2xpY2spO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMpIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMuZm9yRWFjaChzdWJFbCA9PiBzdWJFbC5jbGFzc0xpc3QucmVtb3ZlKC4uLnBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcy5zcGxpdCgnICcpKSk7XG4gIH1cbiAgb24oJ2NoYW5nZURpcmVjdGlvbicsICgpID0+IHtcbiAgICBpZiAoIXN3aXBlci5wYWdpbmF0aW9uIHx8ICFzd2lwZXIucGFnaW5hdGlvbi5lbCkgcmV0dXJuO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbjtcbiAgICBsZXQge1xuICAgICAgZWxcbiAgICB9ID0gc3dpcGVyLnBhZ2luYXRpb247XG4gICAgZWwgPSBtYWtlRWxlbWVudHNBcnJheShlbCk7XG4gICAgZWwuZm9yRWFjaChzdWJFbCA9PiB7XG4gICAgICBzdWJFbC5jbGFzc0xpc3QucmVtb3ZlKHBhcmFtcy5ob3Jpem9udGFsQ2xhc3MsIHBhcmFtcy52ZXJ0aWNhbENsYXNzKTtcbiAgICAgIHN1YkVsLmNsYXNzTGlzdC5hZGQoc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gcGFyYW1zLmhvcml6b250YWxDbGFzcyA6IHBhcmFtcy52ZXJ0aWNhbENsYXNzKTtcbiAgICB9KTtcbiAgfSk7XG4gIG9uKCdpbml0JywgKCkgPT4ge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uZW5hYmxlZCA9PT0gZmFsc2UpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgZGlzYWJsZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbml0KCk7XG4gICAgICByZW5kZXIoKTtcbiAgICAgIHVwZGF0ZSgpO1xuICAgIH1cbiAgfSk7XG4gIG9uKCdhY3RpdmVJbmRleENoYW5nZScsICgpID0+IHtcbiAgICBpZiAodHlwZW9mIHN3aXBlci5zbmFwSW5kZXggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB1cGRhdGUoKTtcbiAgICB9XG4gIH0pO1xuICBvbignc25hcEluZGV4Q2hhbmdlJywgKCkgPT4ge1xuICAgIHVwZGF0ZSgpO1xuICB9KTtcbiAgb24oJ3NuYXBHcmlkTGVuZ3RoQ2hhbmdlJywgKCkgPT4ge1xuICAgIHJlbmRlcigpO1xuICAgIHVwZGF0ZSgpO1xuICB9KTtcbiAgb24oJ2Rlc3Ryb3knLCAoKSA9PiB7XG4gICAgZGVzdHJveSgpO1xuICB9KTtcbiAgb24oJ2VuYWJsZSBkaXNhYmxlJywgKCkgPT4ge1xuICAgIGxldCB7XG4gICAgICBlbFxuICAgIH0gPSBzd2lwZXIucGFnaW5hdGlvbjtcbiAgICBpZiAoZWwpIHtcbiAgICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgICAgZWwuZm9yRWFjaChzdWJFbCA9PiBzdWJFbC5jbGFzc0xpc3Rbc3dpcGVyLmVuYWJsZWQgPyAncmVtb3ZlJyA6ICdhZGQnXShzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24ubG9ja0NsYXNzKSk7XG4gICAgfVxuICB9KTtcbiAgb24oJ2xvY2sgdW5sb2NrJywgKCkgPT4ge1xuICAgIHVwZGF0ZSgpO1xuICB9KTtcbiAgb24oJ2NsaWNrJywgKF9zLCBlKSA9PiB7XG4gICAgY29uc3QgdGFyZ2V0RWwgPSBlLnRhcmdldDtcbiAgICBjb25zdCBlbCA9IG1ha2VFbGVtZW50c0FycmF5KHN3aXBlci5wYWdpbmF0aW9uLmVsKTtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmVsICYmIHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5oaWRlT25DbGljayAmJiBlbCAmJiBlbC5sZW5ndGggPiAwICYmICF0YXJnZXRFbC5jbGFzc0xpc3QuY29udGFpbnMoc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmJ1bGxldENsYXNzKSkge1xuICAgICAgaWYgKHN3aXBlci5uYXZpZ2F0aW9uICYmIChzd2lwZXIubmF2aWdhdGlvbi5uZXh0RWwgJiYgdGFyZ2V0RWwgPT09IHN3aXBlci5uYXZpZ2F0aW9uLm5leHRFbCB8fCBzd2lwZXIubmF2aWdhdGlvbi5wcmV2RWwgJiYgdGFyZ2V0RWwgPT09IHN3aXBlci5uYXZpZ2F0aW9uLnByZXZFbCkpIHJldHVybjtcbiAgICAgIGNvbnN0IGlzSGlkZGVuID0gZWxbMF0uY2xhc3NMaXN0LmNvbnRhaW5zKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5oaWRkZW5DbGFzcyk7XG4gICAgICBpZiAoaXNIaWRkZW4gPT09IHRydWUpIHtcbiAgICAgICAgZW1pdCgncGFnaW5hdGlvblNob3cnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVtaXQoJ3BhZ2luYXRpb25IaWRlJyk7XG4gICAgICB9XG4gICAgICBlbC5mb3JFYWNoKHN1YkVsID0+IHN1YkVsLmNsYXNzTGlzdC50b2dnbGUoc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmhpZGRlbkNsYXNzKSk7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgZW5hYmxlID0gKCkgPT4ge1xuICAgIHN3aXBlci5lbC5jbGFzc0xpc3QucmVtb3ZlKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5wYWdpbmF0aW9uRGlzYWJsZWRDbGFzcyk7XG4gICAgbGV0IHtcbiAgICAgIGVsXG4gICAgfSA9IHN3aXBlci5wYWdpbmF0aW9uO1xuICAgIGlmIChlbCkge1xuICAgICAgZWwgPSBtYWtlRWxlbWVudHNBcnJheShlbCk7XG4gICAgICBlbC5mb3JFYWNoKHN1YkVsID0+IHN1YkVsLmNsYXNzTGlzdC5yZW1vdmUoc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLnBhZ2luYXRpb25EaXNhYmxlZENsYXNzKSk7XG4gICAgfVxuICAgIGluaXQoKTtcbiAgICByZW5kZXIoKTtcbiAgICB1cGRhdGUoKTtcbiAgfTtcbiAgY29uc3QgZGlzYWJsZSA9ICgpID0+IHtcbiAgICBzd2lwZXIuZWwuY2xhc3NMaXN0LmFkZChzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24ucGFnaW5hdGlvbkRpc2FibGVkQ2xhc3MpO1xuICAgIGxldCB7XG4gICAgICBlbFxuICAgIH0gPSBzd2lwZXIucGFnaW5hdGlvbjtcbiAgICBpZiAoZWwpIHtcbiAgICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgICAgZWwuZm9yRWFjaChzdWJFbCA9PiBzdWJFbC5jbGFzc0xpc3QuYWRkKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5wYWdpbmF0aW9uRGlzYWJsZWRDbGFzcykpO1xuICAgIH1cbiAgICBkZXN0cm95KCk7XG4gIH07XG4gIE9iamVjdC5hc3NpZ24oc3dpcGVyLnBhZ2luYXRpb24sIHtcbiAgICBlbmFibGUsXG4gICAgZGlzYWJsZSxcbiAgICByZW5kZXIsXG4gICAgdXBkYXRlLFxuICAgIGluaXQsXG4gICAgZGVzdHJveVxuICB9KTtcbn1cblxuZXhwb3J0IHsgUGFnaW5hdGlvbiBhcyBkZWZhdWx0IH07XG4iXSwibmFtZXMiOlsiaW5Qcm9ncmVzcyIsImRhdGFXZWJwYWNrUHJlZml4IiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwidW5kZWZpbmVkIiwiZXhwb3J0cyIsIm1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJvYmoiLCJjb25zdHJ1Y3RvciIsIk9iamVjdCIsImV4dGVuZCIsInRhcmdldCIsInNyYyIsImtleXMiLCJmb3JFYWNoIiwia2V5IiwibGVuZ3RoIiwibSIsImQiLCJkZWZpbml0aW9uIiwibyIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsImYiLCJlIiwiY2h1bmtJZCIsIlByb21pc2UiLCJhbGwiLCJyZWR1Y2UiLCJwcm9taXNlcyIsInUiLCJtaW5pQ3NzRiIsImciLCJnbG9iYWxUaGlzIiwidGhpcyIsIkZ1bmN0aW9uIiwid2luZG93IiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImwiLCJ1cmwiLCJkb25lIiwicHVzaCIsInNjcmlwdCIsIm5lZWRBdHRhY2giLCJzY3JpcHRzIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImkiLCJzIiwiZ2V0QXR0cmlidXRlIiwiY3JlYXRlRWxlbWVudCIsImNoYXJzZXQiLCJ0aW1lb3V0IiwibmMiLCJzZXRBdHRyaWJ1dGUiLCJvblNjcmlwdENvbXBsZXRlIiwicHJldiIsImV2ZW50Iiwib25lcnJvciIsIm9ubG9hZCIsImNsZWFyVGltZW91dCIsImRvbmVGbnMiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJmbiIsInNldFRpbWVvdXQiLCJiaW5kIiwidHlwZSIsImhlYWQiLCJhcHBlbmRDaGlsZCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwic2NyaXB0VXJsIiwiaW1wb3J0U2NyaXB0cyIsImxvY2F0aW9uIiwiY3VycmVudFNjcmlwdCIsInRlc3QiLCJFcnJvciIsInJlcGxhY2UiLCJwIiwibG9hZFN0eWxlc2hlZXQiLCJyZXNvbHZlIiwicmVqZWN0IiwiaHJlZiIsImZ1bGxocmVmIiwiZXhpc3RpbmdMaW5rVGFncyIsImRhdGFIcmVmIiwidGFnIiwicmVsIiwiZXhpc3RpbmdTdHlsZVRhZ3MiLCJmaW5kU3R5bGVzaGVldCIsIm9sZFRhZyIsImxpbmtUYWciLCJub25jZSIsImVycm9yVHlwZSIsInJlYWxIcmVmIiwiZXJyIiwibmFtZSIsImNvZGUiLCJyZXF1ZXN0IiwiaW5zZXJ0QmVmb3JlIiwibmV4dFNpYmxpbmciLCJjcmVhdGVTdHlsZXNoZWV0IiwiaW5zdGFsbGVkQ3NzQ2h1bmtzIiwibWluaUNzcyIsInRoZW4iLCJpbnN0YWxsZWRDaHVua3MiLCJqIiwiaW5zdGFsbGVkQ2h1bmtEYXRhIiwicHJvbWlzZSIsImVycm9yIiwicmVhbFNyYyIsIm1lc3NhZ2UiLCJ3ZWJwYWNrSnNvbnBDYWxsYmFjayIsInBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uIiwiZGF0YSIsImNodW5rSWRzIiwibW9yZU1vZHVsZXMiLCJydW50aW1lIiwic29tZSIsImlkIiwiY2h1bmtMb2FkaW5nR2xvYmFsIiwic2VsZiIsInNzckRvY3VtZW50IiwiYm9keSIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiYWN0aXZlRWxlbWVudCIsImJsdXIiLCJub2RlTmFtZSIsInF1ZXJ5U2VsZWN0b3IiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZ2V0RWxlbWVudEJ5SWQiLCJjcmVhdGVFdmVudCIsImluaXRFdmVudCIsImNoaWxkcmVuIiwiY2hpbGROb2RlcyIsInN0eWxlIiwiY3JlYXRlRWxlbWVudE5TIiwiaW1wb3J0Tm9kZSIsImhhc2giLCJob3N0IiwiaG9zdG5hbWUiLCJvcmlnaW4iLCJwYXRobmFtZSIsInByb3RvY29sIiwic2VhcmNoIiwiZG9jIiwic3NyV2luZG93IiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiaGlzdG9yeSIsInJlcGxhY2VTdGF0ZSIsInB1c2hTdGF0ZSIsImdvIiwiYmFjayIsIkN1c3RvbUV2ZW50IiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImdldFByb3BlcnR5VmFsdWUiLCJJbWFnZSIsIkRhdGUiLCJzY3JlZW4iLCJtYXRjaE1lZGlhIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiY2FsbGJhY2siLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsIndpbiIsImRlbGF5Iiwibm93IiwiZWwiLCJheGlzIiwibWF0cml4IiwiY3VyVHJhbnNmb3JtIiwidHJhbnNmb3JtTWF0cml4IiwiY3VyU3R5bGUiLCJjdXJyZW50U3R5bGUiLCJXZWJLaXRDU1NNYXRyaXgiLCJ0cmFuc2Zvcm0iLCJ3ZWJraXRUcmFuc2Zvcm0iLCJzcGxpdCIsIm1hcCIsImEiLCJqb2luIiwiTW96VHJhbnNmb3JtIiwiT1RyYW5zZm9ybSIsIk1zVHJhbnNmb3JtIiwibXNUcmFuc2Zvcm0iLCJ0b1N0cmluZyIsIm00MSIsInBhcnNlRmxvYXQiLCJtNDIiLCJzbGljZSIsInRvIiwiYXJndW1lbnRzIiwibm9FeHRlbmQiLCJuZXh0U291cmNlIiwibm9kZSIsIkhUTUxFbGVtZW50Iiwibm9kZVR5cGUiLCJrZXlzQXJyYXkiLCJmaWx0ZXIiLCJpbmRleE9mIiwibmV4dEluZGV4IiwibGVuIiwibmV4dEtleSIsImRlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfX3N3aXBlcl9fIiwidmFyTmFtZSIsInZhclZhbHVlIiwic2V0UHJvcGVydHkiLCJhbmltYXRlQ1NTTW9kZVNjcm9sbCIsIl9yZWYiLCJzd2lwZXIiLCJ0YXJnZXRQb3NpdGlvbiIsInNpZGUiLCJzdGFydFBvc2l0aW9uIiwidHJhbnNsYXRlIiwidGltZSIsInN0YXJ0VGltZSIsImR1cmF0aW9uIiwicGFyYW1zIiwic3BlZWQiLCJ3cmFwcGVyRWwiLCJzY3JvbGxTbmFwVHlwZSIsImNzc01vZGVGcmFtZUlEIiwiZGlyIiwiaXNPdXRPZkJvdW5kIiwiY3VycmVudCIsImFuaW1hdGUiLCJnZXRUaW1lIiwicHJvZ3Jlc3MiLCJNYXRoIiwibWF4IiwibWluIiwiZWFzZVByb2dyZXNzIiwiY29zIiwiUEkiLCJjdXJyZW50UG9zaXRpb24iLCJzY3JvbGxUbyIsIm92ZXJmbG93IiwiZWxlbWVudCIsInNlbGVjdG9yIiwiSFRNTFNsb3RFbGVtZW50IiwiYXNzaWduZWRFbGVtZW50cyIsIm1hdGNoZXMiLCJzaG93V2FybmluZyIsInRleHQiLCJjb25zb2xlIiwid2FybiIsImNsYXNzZXMiLCJjbGFzc0xpc3QiLCJhZGQiLCJBcnJheSIsImlzQXJyYXkiLCJ0cmltIiwiYyIsImVsZW1lbnRTdHlsZSIsImNoaWxkIiwicHJldmlvdXNTaWJsaW5nIiwicGFyZW50cyIsInBhcmVudCIsInBhcmVudEVsZW1lbnQiLCJlbGVtZW50T3V0ZXJTaXplIiwic2l6ZSIsImluY2x1ZGVNYXJnaW5zIiwib2Zmc2V0V2lkdGgiLCJzdXBwb3J0IiwiZGV2aWNlQ2FjaGVkIiwiYnJvd3NlciIsImdldFN1cHBvcnQiLCJzbW9vdGhTY3JvbGwiLCJkb2N1bWVudEVsZW1lbnQiLCJ0b3VjaCIsIkRvY3VtZW50VG91Y2giLCJjYWxjU3VwcG9ydCIsImdldERldmljZSIsIm92ZXJyaWRlcyIsIl90ZW1wIiwicGxhdGZvcm0iLCJ1YSIsImRldmljZSIsImlvcyIsImFuZHJvaWQiLCJzY3JlZW5XaWR0aCIsIndpZHRoIiwic2NyZWVuSGVpZ2h0IiwiaGVpZ2h0IiwibWF0Y2giLCJpcGFkIiwiaXBvZCIsImlwaG9uZSIsIndpbmRvd3MiLCJtYWNvcyIsIm9zIiwiY2FsY0RldmljZSIsImdldEJyb3dzZXIiLCJuZWVkUGVyc3BlY3RpdmVGaXgiLCJpc1NhZmFyaSIsInRvTG93ZXJDYXNlIiwiU3RyaW5nIiwiaW5jbHVkZXMiLCJtYWpvciIsIm1pbm9yIiwibnVtIiwiTnVtYmVyIiwiaXNXZWJWaWV3IiwiaXNTYWZhcmlCcm93c2VyIiwibmVlZDNkRml4IiwiY2FsY0Jyb3dzZXIiLCJldmVudHNFbWl0dGVyIiwib24iLCJldmVudHMiLCJoYW5kbGVyIiwicHJpb3JpdHkiLCJldmVudHNMaXN0ZW5lcnMiLCJkZXN0cm95ZWQiLCJtZXRob2QiLCJvbmNlIiwib25jZUhhbmRsZXIiLCJvZmYiLCJfX2VtaXR0ZXJQcm94eSIsIl9sZW4iLCJhcmdzIiwiX2tleSIsImFwcGx5Iiwib25BbnkiLCJldmVudHNBbnlMaXN0ZW5lcnMiLCJvZmZBbnkiLCJpbmRleCIsInNwbGljZSIsImV2ZW50SGFuZGxlciIsImVtaXQiLCJjb250ZXh0IiwiX2xlbjIiLCJfa2V5MiIsInVuc2hpZnQiLCJ0b2dnbGVTbGlkZUNsYXNzZXMkMSIsInNsaWRlRWwiLCJjb25kaXRpb24iLCJjbGFzc05hbWUiLCJjb250YWlucyIsInJlbW92ZSIsInRvZ2dsZVNsaWRlQ2xhc3NlcyIsInByb2Nlc3NMYXp5UHJlbG9hZGVyIiwiaW1hZ2VFbCIsImNsb3Nlc3QiLCJpc0VsZW1lbnQiLCJzbGlkZUNsYXNzIiwibGF6eUVsIiwibGF6eVByZWxvYWRlckNsYXNzIiwic2hhZG93Um9vdCIsInVubGF6eSIsInNsaWRlcyIsInJlbW92ZUF0dHJpYnV0ZSIsInByZWxvYWQiLCJhbW91bnQiLCJsYXp5UHJlbG9hZFByZXZOZXh0Iiwic2xpZGVzUGVyVmlldyIsInNsaWRlc1BlclZpZXdEeW5hbWljIiwiY2VpbCIsImFjdGl2ZUluZGV4IiwiZ3JpZCIsInJvd3MiLCJhY3RpdmVDb2x1bW4iLCJwcmVsb2FkQ29sdW1ucyIsImZyb20iLCJfIiwiY29sdW1uIiwic2xpZGVJbmRleExhc3RJblZpZXciLCJyZXdpbmQiLCJsb29wIiwicmVhbEluZGV4IiwidXBkYXRlIiwidXBkYXRlU2l6ZSIsImNsaWVudFdpZHRoIiwiY2xpZW50SGVpZ2h0IiwiaXNIb3Jpem9udGFsIiwiaXNWZXJ0aWNhbCIsInBhcnNlSW50IiwiaXNOYU4iLCJhc3NpZ24iLCJ1cGRhdGVTbGlkZXMiLCJnZXREaXJlY3Rpb25Qcm9wZXJ0eVZhbHVlIiwibGFiZWwiLCJnZXREaXJlY3Rpb25MYWJlbCIsInNsaWRlc0VsIiwic3dpcGVyU2l6ZSIsInJ0bFRyYW5zbGF0ZSIsInJ0bCIsIndyb25nUlRMIiwiaXNWaXJ0dWFsIiwidmlydHVhbCIsImVuYWJsZWQiLCJwcmV2aW91c1NsaWRlc0xlbmd0aCIsInNsaWRlc0xlbmd0aCIsInNuYXBHcmlkIiwic2xpZGVzR3JpZCIsInNsaWRlc1NpemVzR3JpZCIsIm9mZnNldEJlZm9yZSIsInNsaWRlc09mZnNldEJlZm9yZSIsIm9mZnNldEFmdGVyIiwic2xpZGVzT2Zmc2V0QWZ0ZXIiLCJwcmV2aW91c1NuYXBHcmlkTGVuZ3RoIiwicHJldmlvdXNTbGlkZXNHcmlkTGVuZ3RoIiwic3BhY2VCZXR3ZWVuIiwic2xpZGVQb3NpdGlvbiIsInByZXZTbGlkZVNpemUiLCJ2aXJ0dWFsU2l6ZSIsIm1hcmdpbkxlZnQiLCJtYXJnaW5SaWdodCIsIm1hcmdpbkJvdHRvbSIsIm1hcmdpblRvcCIsImNlbnRlcmVkU2xpZGVzIiwiY3NzTW9kZSIsImdyaWRFbmFibGVkIiwic2xpZGVTaXplIiwiaW5pdFNsaWRlcyIsInVuc2V0U2xpZGVzIiwic2hvdWxkUmVzZXRTbGlkZVNpemUiLCJicmVha3BvaW50cyIsInNsaWRlIiwidXBkYXRlU2xpZGUiLCJzbGlkZVN0eWxlcyIsImN1cnJlbnRUcmFuc2Zvcm0iLCJjdXJyZW50V2ViS2l0VHJhbnNmb3JtIiwicm91bmRMZW5ndGhzIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJib3hTaXppbmciLCJmbG9vciIsInN3aXBlclNsaWRlU2l6ZSIsImFicyIsInNsaWRlc1Blckdyb3VwIiwic2xpZGVzUGVyR3JvdXBTa2lwIiwiZWZmZWN0Iiwic2V0V3JhcHBlclNpemUiLCJ1cGRhdGVXcmFwcGVyU2l6ZSIsIm5ld1NsaWRlc0dyaWQiLCJzbGlkZXNHcmlkSXRlbSIsImdyb3VwcyIsInNsaWRlc0JlZm9yZSIsInNsaWRlc0FmdGVyIiwiZ3JvdXBTaXplIiwic2xpZGVJbmRleCIsImNlbnRlcmVkU2xpZGVzQm91bmRzIiwiYWxsU2xpZGVzU2l6ZSIsInNsaWRlU2l6ZVZhbHVlIiwibWF4U25hcCIsInNuYXAiLCJjZW50ZXJJbnN1ZmZpY2llbnRTbGlkZXMiLCJvZmZzZXRTaXplIiwiYWxsU2xpZGVzT2Zmc2V0Iiwic25hcEluZGV4IiwiYWRkVG9TbmFwR3JpZCIsImFkZFRvU2xpZGVzR3JpZCIsInYiLCJ3YXRjaE92ZXJmbG93IiwiY2hlY2tPdmVyZmxvdyIsIndhdGNoU2xpZGVzUHJvZ3Jlc3MiLCJ1cGRhdGVTbGlkZXNPZmZzZXQiLCJiYWNrRmFjZUhpZGRlbkNsYXNzIiwiY29udGFpbmVyTW9kaWZpZXJDbGFzcyIsImhhc0NsYXNzQmFja2ZhY2VDbGFzc0FkZGVkIiwibWF4QmFja2ZhY2VIaWRkZW5TbGlkZXMiLCJ1cGRhdGVBdXRvSGVpZ2h0IiwiYWN0aXZlU2xpZGVzIiwibmV3SGVpZ2h0Iiwic2V0VHJhbnNpdGlvbiIsImdldFNsaWRlQnlJbmRleCIsImdldFNsaWRlSW5kZXhCeURhdGEiLCJ2aXNpYmxlU2xpZGVzIiwib2Zmc2V0SGVpZ2h0IiwibWludXNPZmZzZXQiLCJvZmZzZXRMZWZ0Iiwib2Zmc2V0VG9wIiwic3dpcGVyU2xpZGVPZmZzZXQiLCJjc3NPdmVyZmxvd0FkanVzdG1lbnQiLCJ1cGRhdGVTbGlkZXNQcm9ncmVzcyIsIm9mZnNldENlbnRlciIsInZpc2libGVTbGlkZXNJbmRleGVzIiwic2xpZGVPZmZzZXQiLCJzbGlkZVByb2dyZXNzIiwibWluVHJhbnNsYXRlIiwib3JpZ2luYWxTbGlkZVByb2dyZXNzIiwic2xpZGVCZWZvcmUiLCJzbGlkZUFmdGVyIiwiaXNGdWxseVZpc2libGUiLCJpc1Zpc2libGUiLCJzbGlkZVZpc2libGVDbGFzcyIsInNsaWRlRnVsbHlWaXNpYmxlQ2xhc3MiLCJvcmlnaW5hbFByb2dyZXNzIiwidXBkYXRlUHJvZ3Jlc3MiLCJtdWx0aXBsaWVyIiwidHJhbnNsYXRlc0RpZmYiLCJtYXhUcmFuc2xhdGUiLCJpc0JlZ2lubmluZyIsImlzRW5kIiwicHJvZ3Jlc3NMb29wIiwid2FzQmVnaW5uaW5nIiwid2FzRW5kIiwiaXNCZWdpbm5pbmdSb3VuZGVkIiwiaXNFbmRSb3VuZGVkIiwiZmlyc3RTbGlkZUluZGV4IiwibGFzdFNsaWRlSW5kZXgiLCJmaXJzdFNsaWRlVHJhbnNsYXRlIiwibGFzdFNsaWRlVHJhbnNsYXRlIiwidHJhbnNsYXRlTWF4IiwidHJhbnNsYXRlQWJzIiwiYXV0b0hlaWdodCIsInVwZGF0ZVNsaWRlc0NsYXNzZXMiLCJnZXRGaWx0ZXJlZFNsaWRlIiwiYWN0aXZlU2xpZGUiLCJwcmV2U2xpZGUiLCJuZXh0U2xpZGUiLCJuZXh0RWxzIiwibmV4dEVsZW1lbnRTaWJsaW5nIiwibmV4dCIsImVsZW1lbnROZXh0QWxsIiwicHJldkVscyIsInByZXZpb3VzRWxlbWVudFNpYmxpbmciLCJlbGVtZW50UHJldkFsbCIsInNsaWRlQWN0aXZlQ2xhc3MiLCJzbGlkZU5leHRDbGFzcyIsInNsaWRlUHJldkNsYXNzIiwiZW1pdFNsaWRlc0NsYXNzZXMiLCJ1cGRhdGVBY3RpdmVJbmRleCIsIm5ld0FjdGl2ZUluZGV4IiwicHJldmlvdXNJbmRleCIsInByZXZpb3VzUmVhbEluZGV4IiwicHJldmlvdXNTbmFwSW5kZXgiLCJnZXRWaXJ0dWFsUmVhbEluZGV4IiwiYUluZGV4Iiwibm9ybWFsaXplU2xpZGVJbmRleCIsImdldEFjdGl2ZUluZGV4QnlUcmFuc2xhdGUiLCJza2lwIiwiZmlyc3RTbGlkZUluQ29sdW1uIiwiYWN0aXZlU2xpZGVJbmRleCIsImluaXRpYWxpemVkIiwicnVuQ2FsbGJhY2tzT25Jbml0IiwidXBkYXRlQ2xpY2tlZFNsaWRlIiwicGF0aCIsInBhdGhFbCIsInNsaWRlRm91bmQiLCJjbGlja2VkU2xpZGUiLCJjbGlja2VkSW5kZXgiLCJzbGlkZVRvQ2xpY2tlZFNsaWRlIiwiZ2V0VHJhbnNsYXRlIiwidmlydHVhbFRyYW5zbGF0ZSIsImN1cnJlbnRUcmFuc2xhdGUiLCJzZXRUcmFuc2xhdGUiLCJieUNvbnRyb2xsZXIiLCJuZXdQcm9ncmVzcyIsIngiLCJ5IiwicHJldmlvdXNUcmFuc2xhdGUiLCJ0cmFuc2xhdGVUbyIsInJ1bkNhbGxiYWNrcyIsInRyYW5zbGF0ZUJvdW5kcyIsImludGVybmFsIiwiYW5pbWF0aW5nIiwicHJldmVudEludGVyYWN0aW9uT25UcmFuc2l0aW9uIiwibmV3VHJhbnNsYXRlIiwiaXNIIiwiYmVoYXZpb3IiLCJvblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQiLCJ0cmFuc2l0aW9uRW1pdCIsImRpcmVjdGlvbiIsInN0ZXAiLCJzbGlkZVRvIiwiaW5pdGlhbCIsIm5vcm1hbGl6ZWRUcmFuc2xhdGUiLCJub3JtYWxpemVkR3JpZCIsIm5vcm1hbGl6ZWRHcmlkTmV4dCIsImFsbG93U2xpZGVOZXh0IiwiYWxsb3dTbGlkZVByZXYiLCJ0cmFuc2l0aW9uU3RhcnQiLCJ0cmFuc2l0aW9uRW5kIiwidCIsIl9pbW1lZGlhdGVWaXJ0dWFsIiwiX2Nzc01vZGVWaXJ0dWFsSW5pdGlhbFNldCIsImluaXRpYWxTbGlkZSIsIm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kIiwic2xpZGVUb0xvb3AiLCJuZXdJbmRleCIsInRhcmdldFNsaWRlSW5kZXgiLCJjb2xzIiwibmVlZExvb3BGaXgiLCJsb29wRml4Iiwic2xpZGVSZWFsSW5kZXgiLCJzbGlkZU5leHQiLCJwZXJHcm91cCIsInNsaWRlc1Blckdyb3VwQXV0byIsImluY3JlbWVudCIsImxvb3BQcmV2ZW50c1NsaWRpbmciLCJfY2xpZW50TGVmdCIsImNsaWVudExlZnQiLCJzbGlkZVByZXYiLCJub3JtYWxpemUiLCJ2YWwiLCJub3JtYWxpemVkU25hcEdyaWQiLCJwcmV2U25hcCIsInByZXZTbmFwSW5kZXgiLCJwcmV2SW5kZXgiLCJsYXN0SW5kZXgiLCJzbGlkZVJlc2V0Iiwic2xpZGVUb0Nsb3Nlc3QiLCJ0aHJlc2hvbGQiLCJjdXJyZW50U25hcCIsInNsaWRlVG9JbmRleCIsInNsaWRlU2VsZWN0b3IiLCJsb29wZWRTbGlkZXMiLCJnZXRTbGlkZUluZGV4IiwibG9vcENyZWF0ZSIsInNob3VsZEZpbGxHcm91cCIsInNob3VsZEZpbGxHcmlkIiwiYWRkQmxhbmtTbGlkZXMiLCJhbW91bnRPZlNsaWRlcyIsInNsaWRlQmxhbmtDbGFzcyIsImFwcGVuZCIsImxvb3BBZGRCbGFua1NsaWRlcyIsInJlY2FsY1NsaWRlcyIsImJ5TW91c2V3aGVlbCIsImxvb3BBZGRpdGlvbmFsU2xpZGVzIiwiZmlsbCIsInByZXBlbmRTbGlkZXNJbmRleGVzIiwiYXBwZW5kU2xpZGVzSW5kZXhlcyIsImlzTmV4dCIsImlzUHJldiIsInNsaWRlc1ByZXBlbmRlZCIsInNsaWRlc0FwcGVuZGVkIiwiYWN0aXZlQ29sSW5kZXhXaXRoU2hpZnQiLCJjb2xJbmRleFRvUHJlcGVuZCIsIl9fcHJldmVudE9ic2VydmVyX18iLCJzd2lwZXJMb29wTW92ZURPTSIsInByZXBlbmQiLCJjdXJyZW50U2xpZGVUcmFuc2xhdGUiLCJkaWZmIiwidG91Y2hFdmVudHNEYXRhIiwic3RhcnRUcmFuc2xhdGUiLCJzaGlmdCIsImNvbnRyb2xsZXIiLCJjb250cm9sIiwibG9vcFBhcmFtcyIsImxvb3BEZXN0cm95IiwibmV3U2xpZGVzT3JkZXIiLCJzd2lwZXJTbGlkZUluZGV4IiwicHJldmVudEVkZ2VTd2lwZSIsInN0YXJ0WCIsImVkZ2VTd2lwZURldGVjdGlvbiIsImVkZ2VTd2lwZVRocmVzaG9sZCIsImlubmVyV2lkdGgiLCJwcmV2ZW50RGVmYXVsdCIsIm9uVG91Y2hTdGFydCIsIm9yaWdpbmFsRXZlbnQiLCJwb2ludGVySWQiLCJ0YXJnZXRUb3VjaGVzIiwidG91Y2hJZCIsImlkZW50aWZpZXIiLCJwYWdlWCIsInRvdWNoZXMiLCJzaW11bGF0ZVRvdWNoIiwicG9pbnRlclR5cGUiLCJ0YXJnZXRFbCIsInRvdWNoRXZlbnRzVGFyZ2V0IiwiaXNDaGlsZCIsImVsZW1lbnRJc0NoaWxkT2YiLCJ3aGljaCIsImJ1dHRvbiIsImlzVG91Y2hlZCIsImlzTW92ZWQiLCJzd2lwaW5nQ2xhc3NIYXNWYWx1ZSIsIm5vU3dpcGluZ0NsYXNzIiwiZXZlbnRQYXRoIiwiY29tcG9zZWRQYXRoIiwibm9Td2lwaW5nU2VsZWN0b3IiLCJpc1RhcmdldFNoYWRvdyIsIm5vU3dpcGluZyIsImJhc2UiLCJfX2Nsb3Nlc3RGcm9tIiwiYXNzaWduZWRTbG90IiwiZm91bmQiLCJnZXRSb290Tm9kZSIsImNsb3Nlc3RFbGVtZW50IiwiYWxsb3dDbGljayIsInN3aXBlSGFuZGxlciIsImN1cnJlbnRYIiwiY3VycmVudFkiLCJwYWdlWSIsInN0YXJ0WSIsImFsbG93VG91Y2hDYWxsYmFja3MiLCJpc1Njcm9sbGluZyIsInN0YXJ0TW92aW5nIiwidG91Y2hTdGFydFRpbWUiLCJzd2lwZURpcmVjdGlvbiIsImFsbG93VGhyZXNob2xkTW92ZSIsImZvY3VzYWJsZUVsZW1lbnRzIiwic2hvdWxkUHJldmVudERlZmF1bHQiLCJhbGxvd1RvdWNoTW92ZSIsInRvdWNoU3RhcnRQcmV2ZW50RGVmYXVsdCIsInRvdWNoU3RhcnRGb3JjZVByZXZlbnREZWZhdWx0IiwiaXNDb250ZW50RWRpdGFibGUiLCJmcmVlTW9kZSIsIm9uVG91Y2hNb3ZlIiwidGFyZ2V0VG91Y2giLCJjaGFuZ2VkVG91Y2hlcyIsInByZXZlbnRlZEJ5TmVzdGVkU3dpcGVyIiwidG91Y2hSZWxlYXNlT25FZGdlcyIsInByZXZpb3VzWCIsInByZXZpb3VzWSIsImRpZmZYIiwiZGlmZlkiLCJzcXJ0IiwidG91Y2hBbmdsZSIsImF0YW4yIiwicHJldmVudFRvdWNoTW92ZUZyb21Qb2ludGVyTW92ZSIsImNhbmNlbGFibGUiLCJ0b3VjaE1vdmVTdG9wUHJvcGFnYXRpb24iLCJuZXN0ZWQiLCJzdG9wUHJvcGFnYXRpb24iLCJ0b3VjaGVzRGlmZiIsIm9uZVdheU1vdmVtZW50IiwidG91Y2hSYXRpbyIsInByZXZUb3VjaGVzRGlyZWN0aW9uIiwidG91Y2hlc0RpcmVjdGlvbiIsImlzTG9vcCIsImFsbG93TG9vcEZpeCIsImV2dCIsImJ1YmJsZXMiLCJkZXRhaWwiLCJieVN3aXBlclRvdWNoTW92ZSIsImRpc3BhdGNoRXZlbnQiLCJhbGxvd01vbWVudHVtQm91bmNlIiwiZ3JhYkN1cnNvciIsInNldEdyYWJDdXJzb3IiLCJsb29wU3dhcFJlc2V0IiwiZGlzYWJsZVBhcmVudFN3aXBlciIsInJlc2lzdGFuY2VSYXRpbyIsInJlc2lzdGFuY2UiLCJmb2xsb3dGaW5nZXIiLCJvblRvdWNoRW5kIiwidG91Y2hFbmRUaW1lIiwidGltZURpZmYiLCJwYXRoVHJlZSIsImxhc3RDbGlja1RpbWUiLCJjdXJyZW50UG9zIiwic3dpcGVUb0xhc3QiLCJzdG9wSW5kZXgiLCJyZXdpbmRGaXJzdEluZGV4IiwicmV3aW5kTGFzdEluZGV4IiwicmF0aW8iLCJsb25nU3dpcGVzTXMiLCJsb25nU3dpcGVzIiwibG9uZ1N3aXBlc1JhdGlvIiwic2hvcnRTd2lwZXMiLCJuYXZpZ2F0aW9uIiwibmV4dEVsIiwicHJldkVsIiwib25SZXNpemUiLCJzZXRCcmVha3BvaW50IiwiaXNWaXJ0dWFsTG9vcCIsImF1dG9wbGF5IiwicnVubmluZyIsInBhdXNlZCIsInJlc2l6ZVRpbWVvdXQiLCJyZXN1bWUiLCJvbkNsaWNrIiwicHJldmVudENsaWNrcyIsInByZXZlbnRDbGlja3NQcm9wYWdhdGlvbiIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsIm9uU2Nyb2xsIiwic2Nyb2xsTGVmdCIsInNjcm9sbFRvcCIsIm9uTG9hZCIsIm9uRG9jdW1lbnRUb3VjaFN0YXJ0IiwiZG9jdW1lbnRUb3VjaEhhbmRsZXJQcm9jZWVkZWQiLCJ0b3VjaEFjdGlvbiIsImNhcHR1cmUiLCJkb21NZXRob2QiLCJzd2lwZXJNZXRob2QiLCJwYXNzaXZlIiwidXBkYXRlT25XaW5kb3dSZXNpemUiLCJpc0dyaWRFbmFibGVkIiwiZGVmYXVsdHMiLCJpbml0Iiwic3dpcGVyRWxlbWVudE5vZGVOYW1lIiwicmVzaXplT2JzZXJ2ZXIiLCJjcmVhdGVFbGVtZW50cyIsImV2ZW50c1ByZWZpeCIsImJyZWFrcG9pbnRzQmFzZSIsInVuaXF1ZU5hdkVsZW1lbnRzIiwicGFzc2l2ZUxpc3RlbmVycyIsIndyYXBwZXJDbGFzcyIsIl9lbWl0Q2xhc3NlcyIsIm1vZHVsZUV4dGVuZFBhcmFtcyIsImFsbE1vZHVsZXNQYXJhbXMiLCJtb2R1bGVQYXJhbU5hbWUiLCJtb2R1bGVQYXJhbXMiLCJhdXRvIiwicHJvdG90eXBlcyIsInRyYW5zaXRpb24iLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJ0cmFuc2l0aW9uRGVsYXkiLCJtb3ZpbmciLCJpc0xvY2tlZCIsImN1cnNvciIsInVuc2V0R3JhYkN1cnNvciIsImF0dGFjaEV2ZW50cyIsImRldGFjaEV2ZW50cyIsImJyZWFrcG9pbnQiLCJnZXRCcmVha3BvaW50IiwiY3VycmVudEJyZWFrcG9pbnQiLCJicmVha3BvaW50UGFyYW1zIiwib3JpZ2luYWxQYXJhbXMiLCJ3YXNNdWx0aVJvdyIsImlzTXVsdGlSb3ciLCJ3YXNHcmFiQ3Vyc29yIiwiaXNHcmFiQ3Vyc29yIiwid2FzRW5hYmxlZCIsImVtaXRDb250YWluZXJDbGFzc2VzIiwid2FzTW9kdWxlRW5hYmxlZCIsImlzTW9kdWxlRW5hYmxlZCIsImRpc2FibGUiLCJlbmFibGUiLCJkaXJlY3Rpb25DaGFuZ2VkIiwibmVlZHNSZUxvb3AiLCJ3YXNMb29wIiwiY2hhbmdlRGlyZWN0aW9uIiwiaXNFbmFibGVkIiwiaGFzTG9vcCIsImNvbnRhaW5lckVsIiwiY3VycmVudEhlaWdodCIsImlubmVySGVpZ2h0IiwicG9pbnRzIiwicG9pbnQiLCJtaW5SYXRpbyIsInN1YnN0ciIsInNvcnQiLCJiIiwid2FzTG9ja2VkIiwibGFzdFNsaWRlUmlnaHRFZGdlIiwiYWRkQ2xhc3NlcyIsImNsYXNzTmFtZXMiLCJzdWZmaXhlcyIsImVudHJpZXMiLCJwcmVmaXgiLCJyZXN1bHRDbGFzc2VzIiwiaXRlbSIsInByZXBhcmVDbGFzc2VzIiwicmVtb3ZlQ2xhc3NlcyIsImV4dGVuZGVkRGVmYXVsdHMiLCJTd2lwZXIiLCJzd2lwZXJzIiwibmV3UGFyYW1zIiwibW9kdWxlcyIsIl9fbW9kdWxlc19fIiwibW9kIiwiZXh0ZW5kUGFyYW1zIiwic3dpcGVyUGFyYW1zIiwicGFzc2VkUGFyYW1zIiwiZXZlbnROYW1lIiwidmVsb2NpdHkiLCJ0cnVuYyIsImNsaWNrVGltZW91dCIsInZlbG9jaXRpZXMiLCJpbWFnZXNUb0xvYWQiLCJpbWFnZXNMb2FkZWQiLCJwcm9wZXJ0eSIsInNldFByb2dyZXNzIiwiY2xzIiwiZ2V0U2xpZGVDbGFzc2VzIiwidXBkYXRlcyIsInZpZXciLCJleGFjdCIsInNwdiIsImJyZWFrTG9vcCIsInRyYW5zbGF0ZVZhbHVlIiwidHJhbnNsYXRlZCIsImNvbXBsZXRlIiwibmV3RGlyZWN0aW9uIiwibmVlZFVwZGF0ZSIsImN1cnJlbnREaXJlY3Rpb24iLCJjaGFuZ2VMYW5ndWFnZURpcmVjdGlvbiIsIm1vdW50IiwibW91bnRlZCIsInRvVXBwZXJDYXNlIiwiZ2V0V3JhcHBlclNlbGVjdG9yIiwiZ2V0V3JhcHBlciIsInNsaWRlU2xvdHMiLCJob3N0RWwiLCJsYXp5RWxlbWVudHMiLCJkZXN0cm95IiwiZGVsZXRlSW5zdGFuY2UiLCJjbGVhblN0eWxlcyIsIm9iamVjdCIsImRlbGV0ZVByb3BzIiwiZXh0ZW5kRGVmYXVsdHMiLCJuZXdEZWZhdWx0cyIsImluc3RhbGxNb2R1bGUiLCJ1c2UiLCJjaGVja1Byb3BzIiwicHJvdG90eXBlR3JvdXAiLCJwcm90b01ldGhvZCIsIm9ic2VydmVyIiwiYW5pbWF0aW9uRnJhbWUiLCJyZXNpemVIYW5kbGVyIiwib3JpZW50YXRpb25DaGFuZ2VIYW5kbGVyIiwiUmVzaXplT2JzZXJ2ZXIiLCJuZXdXaWR0aCIsIl9yZWYyIiwiY29udGVudEJveFNpemUiLCJjb250ZW50UmVjdCIsImlubGluZVNpemUiLCJibG9ja1NpemUiLCJvYnNlcnZlIiwidW5vYnNlcnZlIiwib2JzZXJ2ZXJzIiwiYXR0YWNoIiwib3B0aW9ucyIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJXZWJraXRNdXRhdGlvbk9ic2VydmVyIiwibXV0YXRpb25zIiwib2JzZXJ2ZXJVcGRhdGUiLCJhdHRyaWJ1dGVzIiwiY2hpbGRMaXN0IiwiY2hhcmFjdGVyRGF0YSIsIm9ic2VydmVQYXJlbnRzIiwib2JzZXJ2ZVNsaWRlQ2hpbGRyZW4iLCJjb250YWluZXJQYXJlbnRzIiwiZGlzY29ubmVjdCIsImdldEVsIiwicmVzIiwidG9nZ2xlRWwiLCJkaXNhYmxlZCIsInN1YkVsIiwiZGlzYWJsZWRDbGFzcyIsInRhZ05hbWUiLCJsb2NrQ2xhc3MiLCJvblByZXZDbGljayIsIm9uTmV4dENsaWNrIiwiaW5pdEJ1dHRvbiIsImRlc3Ryb3lCdXR0b24iLCJoaWRlT25DbGljayIsImhpZGRlbkNsYXNzIiwibmF2aWdhdGlvbkRpc2FibGVkQ2xhc3MiLCJfcyIsInRhcmdldElzQnV0dG9uIiwiZmluZCIsInBhZ2luYXRpb24iLCJjbGlja2FibGUiLCJpc0hpZGRlbiIsInRvZ2dsZSIsInBmeCIsImJ1bGxldFNpemUiLCJidWxsZXRFbGVtZW50IiwicmVuZGVyQnVsbGV0IiwicmVuZGVyUHJvZ3Jlc3NiYXIiLCJyZW5kZXJGcmFjdGlvbiIsInJlbmRlckN1c3RvbSIsInByb2dyZXNzYmFyT3Bwb3NpdGUiLCJkeW5hbWljQnVsbGV0cyIsImR5bmFtaWNNYWluQnVsbGV0cyIsImZvcm1hdEZyYWN0aW9uQ3VycmVudCIsIm51bWJlciIsImZvcm1hdEZyYWN0aW9uVG90YWwiLCJidWxsZXRDbGFzcyIsImJ1bGxldEFjdGl2ZUNsYXNzIiwibW9kaWZpZXJDbGFzcyIsImN1cnJlbnRDbGFzcyIsInRvdGFsQ2xhc3MiLCJwcm9ncmVzc2JhckZpbGxDbGFzcyIsInByb2dyZXNzYmFyT3Bwb3NpdGVDbGFzcyIsImNsaWNrYWJsZUNsYXNzIiwiaG9yaXpvbnRhbENsYXNzIiwidmVydGljYWxDbGFzcyIsInBhZ2luYXRpb25EaXNhYmxlZENsYXNzIiwiYnVsbGV0cyIsImR5bmFtaWNCdWxsZXRJbmRleCIsImlzUGFnaW5hdGlvbkRpc2FibGVkIiwic2V0U2lkZUJ1bGxldHMiLCJidWxsZXRFbCIsInBvc2l0aW9uIiwib25CdWxsZXRDbGljayIsInRvdGFsIiwiZmlyc3RJbmRleCIsIm1pZEluZGV4IiwiY2xhc3Nlc1RvUmVtb3ZlIiwic3VmZml4IiwiZmxhdCIsImJ1bGxldCIsImJ1bGxldEluZGV4IiwiZmlyc3REaXNwbGF5ZWRCdWxsZXQiLCJsYXN0RGlzcGxheWVkQnVsbGV0IiwiZHluYW1pY0J1bGxldHNMZW5ndGgiLCJidWxsZXRzT2Zmc2V0Iiwib2Zmc2V0UHJvcCIsInN1YkVsSW5kZXgiLCJmcmFjdGlvbkVsIiwidGV4dENvbnRlbnQiLCJ0b3RhbEVsIiwicHJvZ3Jlc3NiYXJEaXJlY3Rpb24iLCJzY2FsZSIsInNjYWxlWCIsInNjYWxlWSIsInByb2dyZXNzRWwiLCJpbm5lckhUTUwiLCJyZW5kZXIiLCJwYWdpbmF0aW9uSFRNTCIsIm51bWJlck9mQnVsbGV0cyJdLCJzb3VyY2VSb290IjoiIn0=