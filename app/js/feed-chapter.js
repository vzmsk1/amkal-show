/*! For license information please see feed-chapter.js.LICENSE.txt */
(()=>{"use strict";var t,e,i={1135:(t,e,i)=>{i.d(e,{E:()=>o});var n=i(738),s=i(6575),r=i(1863);n.Ay.registerPlugin(s.u);n.Ay.matchMedia();const o=(t,e)=>{(0,r.jo)(e,"_is-active"),e[t]&&e[t].classList.add("_is-active")}},7633:(t,e,i)=>{i.r(e),i.d(e,{locoScroll:()=>a,toggleScroll:()=>l});var n=i(6383),s=i(738),r=i(1135),o=i(6575);s.Ay.registerPlugin(o.u);const a=new n.Ay({el:document.querySelector(".wrapper"),smooth:!0,mobile:{smooth:!1},tablet:{smooth:!1,breakpoint:1025}}),l={touchStart:()=>{a.stop()},touchEnd:()=>{a.start()}};window.addEventListener("load",(function(){})),window.addEventListener("resize",(function(){a.update()})),document.addEventListener("mouseover",(function(t){t.target.closest("[data-sb]")?a.stop():a.start()})),document.querySelector(".footer-main__anchor")&&document.querySelector(".footer-main__anchor").addEventListener("click",(function(){a.scrollTo(0)})),document.querySelectorAll(".item-card__slide").length&&document.querySelectorAll(".item-card__slide").forEach(((t,e)=>{document.querySelectorAll(".item-card__thumbs-slide")[e].addEventListener("click",(function(){window.innerWidth>1024&&a.scrollTo(t,{offset:-1,callback:()=>{(0,r.E)(e,document.querySelectorAll(".item-card__thumbs-slide"))}})}))})),document.addEventListener("bodyLock",(function(){a.stop()})),document.addEventListener("bodyUnlock",(function(){a.start()}))},1863:(t,e,i)=>{i.d(e,{jo:()=>n});const n=(t,e)=>{for(var i=0;i<t.length;i++)t[i].classList.remove(e)}},2650:(t,e,i)=>{i.d(e,{H0:()=>St});var n,s,r,o,a,l,c,d,u=i(8607),h={},p=180/Math.PI,f=Math.PI/180,g=Math.atan2,m=/([A-Z])/g,v=/(left|right|width|margin|padding|x)/i,y=/[\s,\(]\S/,b={autoAlpha:"opacity,visibility",scale:"scaleX,scaleY",alpha:"opacity"},w=function(t,e){return e.set(e.t,e.p,Math.round(1e4*(e.s+e.c*t))/1e4+e.u,e)},_=function(t,e){return e.set(e.t,e.p,1===t?e.e:Math.round(1e4*(e.s+e.c*t))/1e4+e.u,e)},x=function(t,e){return e.set(e.t,e.p,t?Math.round(1e4*(e.s+e.c*t))/1e4+e.u:e.b,e)},T=function(t,e){var i=e.s+e.c*t;e.set(e.t,e.p,~~(i+(i<0?-.5:.5))+e.u,e)},S=function(t,e){return e.set(e.t,e.p,t?e.e:e.b,e)},E=function(t,e){return e.set(e.t,e.p,1!==t?e.b:e.e,e)},C=function(t,e,i){return t.style[e]=i},k=function(t,e,i){return t.style.setProperty(e,i)},M=function(t,e,i){return t._gsap[e]=i},O=function(t,e,i){return t._gsap.scaleX=t._gsap.scaleY=i},A=function(t,e,i,n,s){var r=t._gsap;r.scaleX=r.scaleY=i,r.renderTransform(s,r)},I=function(t,e,i,n,s){var r=t._gsap;r[e]=i,r.renderTransform(s,r)},P="transform",L=P+"Origin",D=function t(e,i){var n=this,s=this.target,r=s.style,o=s._gsap;if(e in h&&r){if(this.tfm=this.tfm||{},"transform"===e)return b.transform.split(",").forEach((function(e){return t.call(n,e,i)}));if(~(e=b[e]||e).indexOf(",")?e.split(",").forEach((function(t){return n.tfm[t]=Z(s,t)})):this.tfm[e]=o.x?o[e]:Z(s,e),e===L&&(this.tfm.zOrigin=o.zOrigin),this.props.indexOf(P)>=0)return;o.svg&&(this.svgo=s.getAttribute("data-svg-origin"),this.props.push(L,i,"")),e=P}(r||i)&&this.props.push(e,i,r[e])},z=function(t){t.translate&&(t.removeProperty("translate"),t.removeProperty("scale"),t.removeProperty("rotate"))},B=function(){var t,e,i=this.props,n=this.target,s=n.style,r=n._gsap;for(t=0;t<i.length;t+=3)i[t+1]?n[i[t]]=i[t+2]:i[t+2]?s[i[t]]=i[t+2]:s.removeProperty("--"===i[t].substr(0,2)?i[t]:i[t].replace(m,"-$1").toLowerCase());if(this.tfm){for(e in this.tfm)r[e]=this.tfm[e];r.svg&&(r.renderTransform(),n.setAttribute("data-svg-origin",this.svgo||"")),(t=c())&&t.isStart||s[P]||(z(s),r.zOrigin&&s[L]&&(s[L]+=" "+r.zOrigin+"px",r.zOrigin=0,r.renderTransform()),r.uncache=1)}},F=function(t,e){var i={target:t,props:[],revert:B,save:D};return t._gsap||u.os.core.getCache(t),e&&e.split(",").forEach((function(t){return i.save(t)})),i},R=function(t,e){var i=s.createElementNS?s.createElementNS((e||"http://www.w3.org/1999/xhtml").replace(/^https/,"http"),t):s.createElement(t);return i&&i.style?i:s.createElement(t)},H=function t(e,i,n){var s=getComputedStyle(e);return s[i]||s.getPropertyValue(i.replace(m,"-$1").toLowerCase())||s.getPropertyValue(i)||!n&&t(e,Y(i)||i,1)||""},G="O,Moz,ms,Ms,Webkit".split(","),Y=function(t,e,i){var n=(e||a).style,s=5;if(t in n&&!i)return t;for(t=t.charAt(0).toUpperCase()+t.substr(1);s--&&!(G[s]+t in n););return s<0?null:(3===s?"ms":s>=0?G[s]:"")+t},N=function(){"undefined"!=typeof window&&window.document&&(n=window,s=n.document,r=s.documentElement,a=R("div")||{style:{}},R("div"),P=Y(P),L=P+"Origin",a.style.cssText="border-width:0;line-height:0;position:absolute;padding:0",d=!!Y("perspective"),c=u.os.core.reverting,o=1)},V=function t(e){var i,n=R("svg",this.ownerSVGElement&&this.ownerSVGElement.getAttribute("xmlns")||"http://www.w3.org/2000/svg"),s=this.parentNode,o=this.nextSibling,a=this.style.cssText;if(r.appendChild(n),n.appendChild(this),this.style.display="block",e)try{i=this.getBBox(),this._gsapBBox=this.getBBox,this.getBBox=t}catch(t){}else this._gsapBBox&&(i=this._gsapBBox());return s&&(o?s.insertBefore(this,o):s.appendChild(this)),r.removeChild(n),this.style.cssText=a,i},j=function(t,e){for(var i=e.length;i--;)if(t.hasAttribute(e[i]))return t.getAttribute(e[i])},W=function(t){var e;try{e=t.getBBox()}catch(i){e=V.call(t,!0)}return e&&(e.width||e.height)||t.getBBox===V||(e=V.call(t,!0)),!e||e.width||e.x||e.y?e:{x:+j(t,["x","cx","x1"])||0,y:+j(t,["y","cy","y1"])||0,width:0,height:0}},$=function(t){return!(!t.getCTM||t.parentNode&&!t.ownerSVGElement||!W(t))},X=function(t,e){if(e){var i,n=t.style;e in h&&e!==L&&(e=P),n.removeProperty?("ms"!==(i=e.substr(0,2))&&"webkit"!==e.substr(0,6)||(e="-"+e),n.removeProperty("--"===i?e:e.replace(m,"-$1").toLowerCase())):n.removeAttribute(e)}},q=function(t,e,i,n,s,r){var o=new u.J7(t._pt,e,i,0,1,r?E:S);return t._pt=o,o.b=n,o.e=s,t._props.push(i),o},U={deg:1,rad:1,turn:1},K={grid:1,flex:1},J=function t(e,i,n,r){var o,l,c,d,p=parseFloat(n)||0,f=(n+"").trim().substr((p+"").length)||"px",g=a.style,m=v.test(i),y="svg"===e.tagName.toLowerCase(),b=(y?"client":"offset")+(m?"Width":"Height"),w=100,_="px"===r,x="%"===r;if(r===f||!p||U[r]||U[f])return p;if("px"!==f&&!_&&(p=t(e,i,n,"px")),d=e.getCTM&&$(e),(x||"%"===f)&&(h[i]||~i.indexOf("adius")))return o=d?e.getBBox()[m?"width":"height"]:e[b],(0,u.E_)(x?p/o*w:p/100*o);if(g[m?"width":"height"]=w+(_?f:r),l=~i.indexOf("adius")||"em"===r&&e.appendChild&&!y?e:e.parentNode,d&&(l=(e.ownerSVGElement||{}).parentNode),l&&l!==s&&l.appendChild||(l=s.body),(c=l._gsap)&&x&&c.width&&m&&c.time===u.au.time&&!c.uncache)return(0,u.E_)(p/c.width*w);if(!x||"height"!==i&&"width"!==i)(x||"%"===f)&&!K[H(l,"display")]&&(g.position=H(e,"position")),l===e&&(g.position="static"),l.appendChild(a),o=a[b],l.removeChild(a),g.position="absolute";else{var T=e.style[i];e.style[i]=w+r,o=e[b],T?e.style[i]=T:X(e,i)}return m&&x&&((c=(0,u.a0)(l)).time=u.au.time,c.width=l[b]),(0,u.E_)(_?o*p/w:o&&p?w/o*p:0)},Z=function(t,e,i,n){var s;return o||N(),e in b&&"transform"!==e&&~(e=b[e]).indexOf(",")&&(e=e.split(",")[0]),h[e]&&"transform"!==e?(s=ct(t,n),s="transformOrigin"!==e?s[e]:s.svg?s.origin:dt(H(t,L))+" "+s.zOrigin+"px"):(!(s=t.style[e])||"auto"===s||n||~(s+"").indexOf("calc("))&&(s=it[e]&&it[e](t,e,i)||H(t,e)||(0,u.n)(t,e)||("opacity"===e?1:0)),i&&!~(s+"").trim().indexOf(" ")?J(t,e,s,i)+i:s},Q=function(t,e,i,n){if(!i||"none"===i){var s=Y(e,t,1),r=s&&H(t,s,1);r&&r!==i?(e=s,i=r):"borderColor"===e&&(i=H(t,"borderTopColor"))}var o,a,l,c,d,h,p,f,g,m,v,y=new u.J7(this._pt,t.style,e,0,1,u.l1),b=0,w=0;if(y.b=i,y.e=n,i+="","auto"===(n+="")&&(h=t.style[e],t.style[e]=n,n=H(t,e)||n,h?t.style[e]=h:X(t,e)),o=[i,n],(0,u.Uc)(o),n=o[1],l=(i=o[0]).match(u.vM)||[],(n.match(u.vM)||[]).length){for(;a=u.vM.exec(n);)p=a[0],g=n.substring(b,a.index),d?d=(d+1)%5:"rgba("!==g.substr(-5)&&"hsla("!==g.substr(-5)||(d=1),p!==(h=l[w++]||"")&&(c=parseFloat(h)||0,v=h.substr((c+"").length),"="===p.charAt(1)&&(p=(0,u.B0)(c,p)+v),f=parseFloat(p),m=p.substr((f+"").length),b=u.vM.lastIndex-m.length,m||(m=m||u.Yz.units[e]||v,b===n.length&&(n+=m,y.e+=m)),v!==m&&(c=J(t,e,h,m)||0),y._pt={_next:y._pt,p:g||1===w?g:",",s:c,c:f-c,m:d&&d<4||"zIndex"===e?Math.round:0});y.c=b<n.length?n.substring(b,n.length):""}else y.r="display"===e&&"none"===n?E:S;return u.Ks.test(n)&&(y.e=0),this._pt=y,y},tt={top:"0%",bottom:"100%",left:"0%",right:"100%",center:"50%"},et=function(t,e){if(e.tween&&e.tween._time===e.tween._dur){var i,n,s,r=e.t,o=r.style,a=e.u,l=r._gsap;if("all"===a||!0===a)o.cssText="",n=1;else for(s=(a=a.split(",")).length;--s>-1;)i=a[s],h[i]&&(n=1,i="transformOrigin"===i?L:P),X(r,i);n&&(X(r,P),l&&(l.svg&&r.removeAttribute("transform"),ct(r,1),l.uncache=1,z(o)))}},it={clearProps:function(t,e,i,n,s){if("isFromStart"!==s.data){var r=t._pt=new u.J7(t._pt,e,i,0,0,et);return r.u=n,r.pr=-10,r.tween=s,t._props.push(i),1}}},nt=[1,0,0,1,0,0],st={},rt=function(t){return"matrix(1, 0, 0, 1, 0, 0)"===t||"none"===t||!t},ot=function(t){var e=H(t,P);return rt(e)?nt:e.substr(7).match(u.vX).map(u.E_)},at=function(t,e){var i,n,s,o,a=t._gsap||(0,u.a0)(t),l=t.style,c=ot(t);return a.svg&&t.getAttribute("transform")?"1,0,0,1,0,0"===(c=[(s=t.transform.baseVal.consolidate().matrix).a,s.b,s.c,s.d,s.e,s.f]).join(",")?nt:c:(c!==nt||t.offsetParent||t===r||a.svg||(s=l.display,l.display="block",(i=t.parentNode)&&t.offsetParent||(o=1,n=t.nextElementSibling,r.appendChild(t)),c=ot(t),s?l.display=s:X(t,"display"),o&&(n?i.insertBefore(t,n):i?i.appendChild(t):r.removeChild(t))),e&&c.length>6?[c[0],c[1],c[4],c[5],c[12],c[13]]:c)},lt=function(t,e,i,n,s,r){var o,a,l,c=t._gsap,d=s||at(t,!0),u=c.xOrigin||0,h=c.yOrigin||0,p=c.xOffset||0,f=c.yOffset||0,g=d[0],m=d[1],v=d[2],y=d[3],b=d[4],w=d[5],_=e.split(" "),x=parseFloat(_[0])||0,T=parseFloat(_[1])||0;i?d!==nt&&(a=g*y-m*v)&&(l=x*(-m/a)+T*(g/a)-(g*w-m*b)/a,x=x*(y/a)+T*(-v/a)+(v*w-y*b)/a,T=l):(x=(o=W(t)).x+(~_[0].indexOf("%")?x/100*o.width:x),T=o.y+(~(_[1]||_[0]).indexOf("%")?T/100*o.height:T)),n||!1!==n&&c.smooth?(b=x-u,w=T-h,c.xOffset=p+(b*g+w*v)-b,c.yOffset=f+(b*m+w*y)-w):c.xOffset=c.yOffset=0,c.xOrigin=x,c.yOrigin=T,c.smooth=!!n,c.origin=e,c.originIsAbsolute=!!i,t.style[L]="0px 0px",r&&(q(r,c,"xOrigin",u,x),q(r,c,"yOrigin",h,T),q(r,c,"xOffset",p,c.xOffset),q(r,c,"yOffset",f,c.yOffset)),t.setAttribute("data-svg-origin",x+" "+T)},ct=function(t,e){var i=t._gsap||new u.n6(t);if("x"in i&&!e&&!i.uncache)return i;var n,s,r,o,a,l,c,h,m,v,y,b,w,_,x,T,S,E,C,k,M,O,A,I,D,z,B,F,R,G,Y,N,V=t.style,j=i.scaleX<0,W="px",X="deg",q=getComputedStyle(t),U=H(t,L)||"0";return n=s=r=l=c=h=m=v=y=0,o=a=1,i.svg=!(!t.getCTM||!$(t)),q.translate&&("none"===q.translate&&"none"===q.scale&&"none"===q.rotate||(V[P]=("none"!==q.translate?"translate3d("+(q.translate+" 0 0").split(" ").slice(0,3).join(", ")+") ":"")+("none"!==q.rotate?"rotate("+q.rotate+") ":"")+("none"!==q.scale?"scale("+q.scale.split(" ").join(",")+") ":"")+("none"!==q[P]?q[P]:"")),V.scale=V.rotate=V.translate="none"),_=at(t,i.svg),i.svg&&(i.uncache?(D=t.getBBox(),U=i.xOrigin-D.x+"px "+(i.yOrigin-D.y)+"px",I=""):I=!e&&t.getAttribute("data-svg-origin"),lt(t,I||U,!!I||i.originIsAbsolute,!1!==i.smooth,_)),b=i.xOrigin||0,w=i.yOrigin||0,_!==nt&&(E=_[0],C=_[1],k=_[2],M=_[3],n=O=_[4],s=A=_[5],6===_.length?(o=Math.sqrt(E*E+C*C),a=Math.sqrt(M*M+k*k),l=E||C?g(C,E)*p:0,(m=k||M?g(k,M)*p+l:0)&&(a*=Math.abs(Math.cos(m*f))),i.svg&&(n-=b-(b*E+w*k),s-=w-(b*C+w*M))):(N=_[6],G=_[7],B=_[8],F=_[9],R=_[10],Y=_[11],n=_[12],s=_[13],r=_[14],c=(x=g(N,R))*p,x&&(I=O*(T=Math.cos(-x))+B*(S=Math.sin(-x)),D=A*T+F*S,z=N*T+R*S,B=O*-S+B*T,F=A*-S+F*T,R=N*-S+R*T,Y=G*-S+Y*T,O=I,A=D,N=z),h=(x=g(-k,R))*p,x&&(T=Math.cos(-x),Y=M*(S=Math.sin(-x))+Y*T,E=I=E*T-B*S,C=D=C*T-F*S,k=z=k*T-R*S),l=(x=g(C,E))*p,x&&(I=E*(T=Math.cos(x))+C*(S=Math.sin(x)),D=O*T+A*S,C=C*T-E*S,A=A*T-O*S,E=I,O=D),c&&Math.abs(c)+Math.abs(l)>359.9&&(c=l=0,h=180-h),o=(0,u.E_)(Math.sqrt(E*E+C*C+k*k)),a=(0,u.E_)(Math.sqrt(A*A+N*N)),x=g(O,A),m=Math.abs(x)>2e-4?x*p:0,y=Y?1/(Y<0?-Y:Y):0),i.svg&&(I=t.getAttribute("transform"),i.forceCSS=t.setAttribute("transform","")||!rt(H(t,P)),I&&t.setAttribute("transform",I))),Math.abs(m)>90&&Math.abs(m)<270&&(j?(o*=-1,m+=l<=0?180:-180,l+=l<=0?180:-180):(a*=-1,m+=m<=0?180:-180)),e=e||i.uncache,i.x=n-((i.xPercent=n&&(!e&&i.xPercent||(Math.round(t.offsetWidth/2)===Math.round(-n)?-50:0)))?t.offsetWidth*i.xPercent/100:0)+W,i.y=s-((i.yPercent=s&&(!e&&i.yPercent||(Math.round(t.offsetHeight/2)===Math.round(-s)?-50:0)))?t.offsetHeight*i.yPercent/100:0)+W,i.z=r+W,i.scaleX=(0,u.E_)(o),i.scaleY=(0,u.E_)(a),i.rotation=(0,u.E_)(l)+X,i.rotationX=(0,u.E_)(c)+X,i.rotationY=(0,u.E_)(h)+X,i.skewX=m+X,i.skewY=v+X,i.transformPerspective=y+W,(i.zOrigin=parseFloat(U.split(" ")[2])||!e&&i.zOrigin||0)&&(V[L]=dt(U)),i.xOffset=i.yOffset=0,i.force3D=u.Yz.force3D,i.renderTransform=i.svg?vt:d?mt:ht,i.uncache=0,i},dt=function(t){return(t=t.split(" "))[0]+" "+t[1]},ut=function(t,e,i){var n=(0,u.l_)(e);return(0,u.E_)(parseFloat(e)+parseFloat(J(t,"x",i+"px",n)))+n},ht=function(t,e){e.z="0px",e.rotationY=e.rotationX="0deg",e.force3D=0,mt(t,e)},pt="0deg",ft="0px",gt=") ",mt=function(t,e){var i=e||this,n=i.xPercent,s=i.yPercent,r=i.x,o=i.y,a=i.z,l=i.rotation,c=i.rotationY,d=i.rotationX,u=i.skewX,h=i.skewY,p=i.scaleX,g=i.scaleY,m=i.transformPerspective,v=i.force3D,y=i.target,b=i.zOrigin,w="",_="auto"===v&&t&&1!==t||!0===v;if(b&&(d!==pt||c!==pt)){var x,T=parseFloat(c)*f,S=Math.sin(T),E=Math.cos(T);T=parseFloat(d)*f,x=Math.cos(T),r=ut(y,r,S*x*-b),o=ut(y,o,-Math.sin(T)*-b),a=ut(y,a,E*x*-b+b)}m!==ft&&(w+="perspective("+m+gt),(n||s)&&(w+="translate("+n+"%, "+s+"%) "),(_||r!==ft||o!==ft||a!==ft)&&(w+=a!==ft||_?"translate3d("+r+", "+o+", "+a+") ":"translate("+r+", "+o+gt),l!==pt&&(w+="rotate("+l+gt),c!==pt&&(w+="rotateY("+c+gt),d!==pt&&(w+="rotateX("+d+gt),u===pt&&h===pt||(w+="skew("+u+", "+h+gt),1===p&&1===g||(w+="scale("+p+", "+g+gt),y.style[P]=w||"translate(0, 0)"},vt=function(t,e){var i,n,s,r,o,a=e||this,l=a.xPercent,c=a.yPercent,d=a.x,h=a.y,p=a.rotation,g=a.skewX,m=a.skewY,v=a.scaleX,y=a.scaleY,b=a.target,w=a.xOrigin,_=a.yOrigin,x=a.xOffset,T=a.yOffset,S=a.forceCSS,E=parseFloat(d),C=parseFloat(h);p=parseFloat(p),g=parseFloat(g),(m=parseFloat(m))&&(g+=m=parseFloat(m),p+=m),p||g?(p*=f,g*=f,i=Math.cos(p)*v,n=Math.sin(p)*v,s=Math.sin(p-g)*-y,r=Math.cos(p-g)*y,g&&(m*=f,o=Math.tan(g-m),s*=o=Math.sqrt(1+o*o),r*=o,m&&(o=Math.tan(m),i*=o=Math.sqrt(1+o*o),n*=o)),i=(0,u.E_)(i),n=(0,u.E_)(n),s=(0,u.E_)(s),r=(0,u.E_)(r)):(i=v,r=y,n=s=0),(E&&!~(d+"").indexOf("px")||C&&!~(h+"").indexOf("px"))&&(E=J(b,"x",d,"px"),C=J(b,"y",h,"px")),(w||_||x||T)&&(E=(0,u.E_)(E+w-(w*i+_*s)+x),C=(0,u.E_)(C+_-(w*n+_*r)+T)),(l||c)&&(o=b.getBBox(),E=(0,u.E_)(E+l/100*o.width),C=(0,u.E_)(C+c/100*o.height)),o="matrix("+i+","+n+","+s+","+r+","+E+","+C+")",b.setAttribute("transform",o),S&&(b.style[P]=o)},yt=function(t,e,i,n,s){var r,o,a=360,l=(0,u.vQ)(s),c=parseFloat(s)*(l&&~s.indexOf("rad")?p:1)-n,d=n+c+"deg";return l&&("short"===(r=s.split("_")[1])&&(c%=a)!==c%180&&(c+=c<0?a:-360),"cw"===r&&c<0?c=(c+36e9)%a-~~(c/a)*a:"ccw"===r&&c>0&&(c=(c-36e9)%a-~~(c/a)*a)),t._pt=o=new u.J7(t._pt,e,i,n,c,_),o.e=d,o.u="deg",t._props.push(i),o},bt=function(t,e){for(var i in e)t[i]=e[i];return t},wt=function(t,e,i){var n,s,r,o,a,l,c,d=bt({},i._gsap),p=i.style;for(s in d.svg?(r=i.getAttribute("transform"),i.setAttribute("transform",""),p[P]=e,n=ct(i,1),X(i,P),i.setAttribute("transform",r)):(r=getComputedStyle(i)[P],p[P]=e,n=ct(i,1),p[P]=r),h)(r=d[s])!==(o=n[s])&&"perspective,force3D,transformOrigin,svgOrigin".indexOf(s)<0&&(a=(0,u.l_)(r)!==(c=(0,u.l_)(o))?J(i,s,r,c):parseFloat(r),l=parseFloat(o),t._pt=new u.J7(t._pt,n,s,a,l-a,w),t._pt.u=c||0,t._props.push(s));bt(n,d)};(0,u.fA)("padding,margin,Width,Radius",(function(t,e){var i="Top",n="Right",s="Bottom",r="Left",o=(e<3?[i,n,s,r]:[i+r,i+n,s+n,s+r]).map((function(i){return e<2?t+i:"border"+i+t}));it[e>1?"border"+t:t]=function(t,e,i,n,s){var r,a;if(arguments.length<4)return r=o.map((function(e){return Z(t,e,i)})),5===(a=r.join(" ")).split(r[0]).length?r[0]:a;r=(n+"").split(" "),a={},o.forEach((function(t,e){return a[t]=r[e]=r[e]||r[(e-1)/2|0]})),t.init(e,a,s)}}));var _t,xt,Tt,St={name:"css",register:N,targetTest:function(t){return t.style&&t.nodeType},init:function(t,e,i,n,s){var r,a,l,c,d,p,f,g,m,v,_,S,E,C,k,M,O,A,I,D,z=this._props,B=t.style,R=i.vars.startAt;for(f in o||N(),this.styles=this.styles||F(t),M=this.styles.props,this.tween=i,e)if("autoRound"!==f&&(a=e[f],!u.wU[f]||!(0,u.Zm)(f,e,i,n,t,s)))if(d=typeof a,p=it[f],"function"===d&&(d=typeof(a=a.call(i,n,t,s))),"string"===d&&~a.indexOf("random(")&&(a=(0,u.Vy)(a)),p)p(this,t,f,a,i)&&(k=1);else if("--"===f.substr(0,2))r=(getComputedStyle(t).getPropertyValue(f)+"").trim(),a+="",u.qA.lastIndex=0,u.qA.test(r)||(g=(0,u.l_)(r),m=(0,u.l_)(a)),m?g!==m&&(r=J(t,f,r,m)+m):g&&(a+=g),this.add(B,"setProperty",r,a,n,s,0,0,f),z.push(f),M.push(f,0,B[f]);else if("undefined"!==d){if(R&&f in R?(r="function"==typeof R[f]?R[f].call(i,n,t,s):R[f],(0,u.vQ)(r)&&~r.indexOf("random(")&&(r=(0,u.Vy)(r)),(0,u.l_)(r+"")||"auto"===r||(r+=u.Yz.units[f]||(0,u.l_)(Z(t,f))||""),"="===(r+"").charAt(1)&&(r=Z(t,f))):r=Z(t,f),c=parseFloat(r),(v="string"===d&&"="===a.charAt(1)&&a.substr(0,2))&&(a=a.substr(2)),l=parseFloat(a),f in b&&("autoAlpha"===f&&(1===c&&"hidden"===Z(t,"visibility")&&l&&(c=0),M.push("visibility",0,B.visibility),q(this,B,"visibility",c?"inherit":"hidden",l?"inherit":"hidden",!l)),"scale"!==f&&"transform"!==f&&~(f=b[f]).indexOf(",")&&(f=f.split(",")[0])),_=f in h)if(this.styles.save(f),S||((E=t._gsap).renderTransform&&!e.parseTransform||ct(t,e.parseTransform),C=!1!==e.smoothOrigin&&E.smooth,(S=this._pt=new u.J7(this._pt,B,P,0,1,E.renderTransform,E,0,-1)).dep=1),"scale"===f)this._pt=new u.J7(this._pt,E,"scaleY",E.scaleY,(v?(0,u.B0)(E.scaleY,v+l):l)-E.scaleY||0,w),this._pt.u=0,z.push("scaleY",f),f+="X";else{if("transformOrigin"===f){M.push(L,0,B[L]),A=void 0,I=void 0,D=void 0,A=(O=a).split(" "),I=A[0],D=A[1]||"50%","top"!==I&&"bottom"!==I&&"left"!==D&&"right"!==D||(O=I,I=D,D=O),A[0]=tt[I]||I,A[1]=tt[D]||D,a=A.join(" "),E.svg?lt(t,a,0,C,0,this):((m=parseFloat(a.split(" ")[2])||0)!==E.zOrigin&&q(this,E,"zOrigin",E.zOrigin,m),q(this,B,f,dt(r),dt(a)));continue}if("svgOrigin"===f){lt(t,a,1,C,0,this);continue}if(f in st){yt(this,E,f,c,v?(0,u.B0)(c,v+a):a);continue}if("smoothOrigin"===f){q(this,E,"smooth",E.smooth,a);continue}if("force3D"===f){E[f]=a;continue}if("transform"===f){wt(this,a,t);continue}}else f in B||(f=Y(f)||f);if(_||(l||0===l)&&(c||0===c)&&!y.test(a)&&f in B)l||(l=0),(g=(r+"").substr((c+"").length))!==(m=(0,u.l_)(a)||(f in u.Yz.units?u.Yz.units[f]:g))&&(c=J(t,f,r,m)),this._pt=new u.J7(this._pt,_?E:B,f,c,(v?(0,u.B0)(c,v+l):l)-c,_||"px"!==m&&"zIndex"!==f||!1===e.autoRound?w:T),this._pt.u=m||0,g!==m&&"%"!==m&&(this._pt.b=r,this._pt.r=x);else if(f in B)Q.call(this,t,f,r,v?v+a:a);else if(f in t)this.add(t,f,r||t[f],v?v+a:a,n,s);else if("parseTransform"!==f){(0,u.dg)(f,a);continue}_||(f in B?M.push(f,0,B[f]):M.push(f,1,r||t[f])),z.push(f)}k&&(0,u.St)(this)},render:function(t,e){if(e.tween._time||!c())for(var i=e._pt;i;)i.r(t,i.d),i=i._next;else e.styles.revert()},get:Z,aliases:b,getSetter:function(t,e,i){var n=b[e];return n&&n.indexOf(",")<0&&(e=n),e in h&&e!==L&&(t._gsap.x||Z(t,"x"))?i&&l===i?"scale"===e?O:M:(l=i||{})&&("scale"===e?A:I):t.style&&!(0,u.OF)(t.style[e])?C:~e.indexOf("-")?k:(0,u.Dx)(t,e)},core:{_removeProperty:X,_getMatrix:at}};u.os.utils.checkPrefix=Y,u.os.core.getStyleSaver=F,_t="x,y,z,scale,scaleX,scaleY,xPercent,yPercent",xt="rotation,rotationX,rotationY,skewX,skewY",Tt=(0,u.fA)(_t+","+xt+",transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective",(function(t){h[t]=1})),(0,u.fA)(xt,(function(t){u.Yz.units[t]="deg",st[t]=1})),b[Tt[13]]=_t+","+xt,(0,u.fA)("0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY",(function(t){var e=t.split(":");b[e[1]]=Tt[e[0]]})),(0,u.fA)("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective",(function(t){u.Yz.units[t]="px"})),u.os.registerPlugin(St)},6575:(t,e,i)=>{function n(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}i.d(e,{u:()=>li});var s,r,o,a,l,c,d,u,h,p,f,g,m,v=function(){return s||"undefined"!=typeof window&&(s=window.gsap)&&s.registerPlugin&&s},y=1,b=[],w=[],_=[],x=Date.now,T=function(t,e){return e},S=function(t,e){return~_.indexOf(t)&&_[_.indexOf(t)+1][e]},E=function(t){return!!~p.indexOf(t)},C=function(t,e,i,n,s){return t.addEventListener(e,i,{passive:!1!==n,capture:!!s})},k=function(t,e,i,n){return t.removeEventListener(e,i,!!n)},M="scrollLeft",O="scrollTop",A=function(){return f&&f.isPressed||w.cache++},I=function(t,e){var i=function i(n){if(n||0===n){y&&(o.history.scrollRestoration="manual");var s=f&&f.isPressed;n=i.v=Math.round(n)||(f&&f.iOS?1:0),t(n),i.cacheID=w.cache,s&&T("ss",n)}else(e||w.cache!==i.cacheID||T("ref"))&&(i.cacheID=w.cache,i.v=t());return i.v+i.offset};return i.offset=0,t&&i},P={s:M,p:"left",p2:"Left",os:"right",os2:"Right",d:"width",d2:"Width",a:"x",sc:I((function(t){return arguments.length?o.scrollTo(t,L.sc()):o.pageXOffset||a[M]||l[M]||c[M]||0}))},L={s:O,p:"top",p2:"Top",os:"bottom",os2:"Bottom",d:"height",d2:"Height",a:"y",op:P,sc:I((function(t){return arguments.length?o.scrollTo(P.sc(),t):o.pageYOffset||a[O]||l[O]||c[O]||0}))},D=function(t,e){return(e&&e._ctx&&e._ctx.selector||s.utils.toArray)(t)[0]||("string"==typeof t&&!1!==s.config().nullTargetWarn?console.warn("Element not found:",t):null)},z=function(t,e){var i=e.s,n=e.sc;E(t)&&(t=a.scrollingElement||l);var r=w.indexOf(t),o=n===L.sc?1:2;!~r&&(r=w.push(t)-1),w[r+o]||C(t,"scroll",A);var c=w[r+o],d=c||(w[r+o]=I(S(t,i),!0)||(E(t)?n:I((function(e){return arguments.length?t[i]=e:t[i]}))));return d.target=t,c||(d.smooth="smooth"===s.getProperty(t,"scrollBehavior")),d},B=function(t,e,i){var n=t,s=t,r=x(),o=r,a=e||50,l=Math.max(500,3*a),c=function(t,e){var l=x();e||l-r>a?(s=n,n=t,o=r,r=l):i?n+=t:n=s+(t-s)/(l-o)*(r-o)};return{update:c,reset:function(){s=n=i?0:n,o=r=0},getVelocity:function(t){var e=o,a=s,d=x();return(t||0===t)&&t!==n&&c(t),r===o||d-o>l?0:(n+(i?a:-a))/((i?d:r)-e)*1e3}}},F=function(t,e){return e&&!t._gsapAllow&&t.preventDefault(),t.changedTouches?t.changedTouches[0]:t},R=function(t){var e=Math.max.apply(Math,t),i=Math.min.apply(Math,t);return Math.abs(e)>=Math.abs(i)?e:i},H=function(){var t,e,i,n;(h=s.core.globals().ScrollTrigger)&&h.core&&(t=h.core,e=t.bridge||{},i=t._scrollers,n=t._proxies,i.push.apply(i,w),n.push.apply(n,_),w=i,_=n,T=function(t,i){return e[t](i)})},G=function(t){return s=t||v(),!r&&s&&"undefined"!=typeof document&&document.body&&(o=window,a=document,l=a.documentElement,c=a.body,p=[o,a,l,c],s.utils.clamp,m=s.core.context||function(){},u="onpointerenter"in c?"pointer":"mouse",d=Y.isTouch=o.matchMedia&&o.matchMedia("(hover: none), (pointer: coarse)").matches?1:"ontouchstart"in o||navigator.maxTouchPoints>0||navigator.msMaxTouchPoints>0?2:0,g=Y.eventTypes=("ontouchstart"in l?"touchstart,touchmove,touchcancel,touchend":"onpointerdown"in l?"pointerdown,pointermove,pointercancel,pointerup":"mousedown,mousemove,mouseup,mouseup").split(","),setTimeout((function(){return y=0}),500),H(),r=1),r};P.op=L,w.cache=0;var Y=function(){function t(t){this.init(t)}var e,i,p;return t.prototype.init=function(t){r||G(s)||console.warn("Please gsap.registerPlugin(Observer)"),h||H();var e=t.tolerance,i=t.dragMinimum,n=t.type,p=t.target,v=t.lineHeight,y=t.debounce,w=t.preventDefault,_=t.onStop,T=t.onStopDelay,S=t.ignore,M=t.wheelSpeed,O=t.event,I=t.onDragStart,Y=t.onDragEnd,N=t.onDrag,V=t.onPress,j=t.onRelease,W=t.onRight,$=t.onLeft,X=t.onUp,q=t.onDown,U=t.onChangeX,K=t.onChangeY,J=t.onChange,Z=t.onToggleX,Q=t.onToggleY,tt=t.onHover,et=t.onHoverEnd,it=t.onMove,nt=t.ignoreCheck,st=t.isNormalizer,rt=t.onGestureStart,ot=t.onGestureEnd,at=t.onWheel,lt=t.onEnable,ct=t.onDisable,dt=t.onClick,ut=t.scrollSpeed,ht=t.capture,pt=t.allowClicks,ft=t.lockAxis,gt=t.onLockAxis;this.target=p=D(p)||l,this.vars=t,S&&(S=s.utils.toArray(S)),e=e||1e-9,i=i||0,M=M||1,ut=ut||1,n=n||"wheel,touch,pointer",y=!1!==y,v||(v=parseFloat(o.getComputedStyle(c).lineHeight)||22);var mt,vt,yt,bt,wt,_t,xt,Tt=this,St=0,Et=0,Ct=t.passive||!w,kt=z(p,P),Mt=z(p,L),Ot=kt(),At=Mt(),It=~n.indexOf("touch")&&!~n.indexOf("pointer")&&"pointerdown"===g[0],Pt=E(p),Lt=p.ownerDocument||a,Dt=[0,0,0],zt=[0,0,0],Bt=0,Ft=function(){return Bt=x()},Rt=function(t,e){return(Tt.event=t)&&S&&~S.indexOf(t.target)||e&&It&&"touch"!==t.pointerType||nt&&nt(t,e)},Ht=function(){var t=Tt.deltaX=R(Dt),i=Tt.deltaY=R(zt),n=Math.abs(t)>=e,s=Math.abs(i)>=e;J&&(n||s)&&J(Tt,t,i,Dt,zt),n&&(W&&Tt.deltaX>0&&W(Tt),$&&Tt.deltaX<0&&$(Tt),U&&U(Tt),Z&&Tt.deltaX<0!=St<0&&Z(Tt),St=Tt.deltaX,Dt[0]=Dt[1]=Dt[2]=0),s&&(q&&Tt.deltaY>0&&q(Tt),X&&Tt.deltaY<0&&X(Tt),K&&K(Tt),Q&&Tt.deltaY<0!=Et<0&&Q(Tt),Et=Tt.deltaY,zt[0]=zt[1]=zt[2]=0),(bt||yt)&&(it&&it(Tt),yt&&(N(Tt),yt=!1),bt=!1),_t&&!(_t=!1)&&gt&&gt(Tt),wt&&(at(Tt),wt=!1),mt=0},Gt=function(t,e,i){Dt[i]+=t,zt[i]+=e,Tt._vx.update(t),Tt._vy.update(e),y?mt||(mt=requestAnimationFrame(Ht)):Ht()},Yt=function(t,e){ft&&!xt&&(Tt.axis=xt=Math.abs(t)>Math.abs(e)?"x":"y",_t=!0),"y"!==xt&&(Dt[2]+=t,Tt._vx.update(t,!0)),"x"!==xt&&(zt[2]+=e,Tt._vy.update(e,!0)),y?mt||(mt=requestAnimationFrame(Ht)):Ht()},Nt=function(t){if(!Rt(t,1)){var e=(t=F(t,w)).clientX,n=t.clientY,s=e-Tt.x,r=n-Tt.y,o=Tt.isDragging;Tt.x=e,Tt.y=n,(o||Math.abs(Tt.startX-e)>=i||Math.abs(Tt.startY-n)>=i)&&(N&&(yt=!0),o||(Tt.isDragging=!0),Yt(s,r),o||I&&I(Tt))}},Vt=Tt.onPress=function(t){Rt(t,1)||t&&t.button||(Tt.axis=xt=null,vt.pause(),Tt.isPressed=!0,t=F(t),St=Et=0,Tt.startX=Tt.x=t.clientX,Tt.startY=Tt.y=t.clientY,Tt._vx.reset(),Tt._vy.reset(),C(st?p:Lt,g[1],Nt,Ct,!0),Tt.deltaX=Tt.deltaY=0,V&&V(Tt))},jt=Tt.onRelease=function(t){if(!Rt(t,1)){k(st?p:Lt,g[1],Nt,!0);var e=!isNaN(Tt.y-Tt.startY),i=Tt.isDragging,n=i&&(Math.abs(Tt.x-Tt.startX)>3||Math.abs(Tt.y-Tt.startY)>3),r=F(t);!n&&e&&(Tt._vx.reset(),Tt._vy.reset(),w&&pt&&s.delayedCall(.08,(function(){if(x()-Bt>300&&!t.defaultPrevented)if(t.target.click)t.target.click();else if(Lt.createEvent){var e=Lt.createEvent("MouseEvents");e.initMouseEvent("click",!0,!0,o,1,r.screenX,r.screenY,r.clientX,r.clientY,!1,!1,!1,!1,0,null),t.target.dispatchEvent(e)}}))),Tt.isDragging=Tt.isGesturing=Tt.isPressed=!1,_&&i&&!st&&vt.restart(!0),Y&&i&&Y(Tt),j&&j(Tt,n)}},Wt=function(t){return t.touches&&t.touches.length>1&&(Tt.isGesturing=!0)&&rt(t,Tt.isDragging)},$t=function(){return(Tt.isGesturing=!1)||ot(Tt)},Xt=function(t){if(!Rt(t)){var e=kt(),i=Mt();Gt((e-Ot)*ut,(i-At)*ut,1),Ot=e,At=i,_&&vt.restart(!0)}},qt=function(t){if(!Rt(t)){t=F(t,w),at&&(wt=!0);var e=(1===t.deltaMode?v:2===t.deltaMode?o.innerHeight:1)*M;Gt(t.deltaX*e,t.deltaY*e,0),_&&!st&&vt.restart(!0)}},Ut=function(t){if(!Rt(t)){var e=t.clientX,i=t.clientY,n=e-Tt.x,s=i-Tt.y;Tt.x=e,Tt.y=i,bt=!0,_&&vt.restart(!0),(n||s)&&Yt(n,s)}},Kt=function(t){Tt.event=t,tt(Tt)},Jt=function(t){Tt.event=t,et(Tt)},Zt=function(t){return Rt(t)||F(t,w)&&dt(Tt)};vt=Tt._dc=s.delayedCall(T||.25,(function(){Tt._vx.reset(),Tt._vy.reset(),vt.pause(),_&&_(Tt)})).pause(),Tt.deltaX=Tt.deltaY=0,Tt._vx=B(0,50,!0),Tt._vy=B(0,50,!0),Tt.scrollX=kt,Tt.scrollY=Mt,Tt.isDragging=Tt.isGesturing=Tt.isPressed=!1,m(this),Tt.enable=function(t){return Tt.isEnabled||(C(Pt?Lt:p,"scroll",A),n.indexOf("scroll")>=0&&C(Pt?Lt:p,"scroll",Xt,Ct,ht),n.indexOf("wheel")>=0&&C(p,"wheel",qt,Ct,ht),(n.indexOf("touch")>=0&&d||n.indexOf("pointer")>=0)&&(C(p,g[0],Vt,Ct,ht),C(Lt,g[2],jt),C(Lt,g[3],jt),pt&&C(p,"click",Ft,!0,!0),dt&&C(p,"click",Zt),rt&&C(Lt,"gesturestart",Wt),ot&&C(Lt,"gestureend",$t),tt&&C(p,u+"enter",Kt),et&&C(p,u+"leave",Jt),it&&C(p,u+"move",Ut)),Tt.isEnabled=!0,t&&t.type&&Vt(t),lt&&lt(Tt)),Tt},Tt.disable=function(){Tt.isEnabled&&(b.filter((function(t){return t!==Tt&&E(t.target)})).length||k(Pt?Lt:p,"scroll",A),Tt.isPressed&&(Tt._vx.reset(),Tt._vy.reset(),k(st?p:Lt,g[1],Nt,!0)),k(Pt?Lt:p,"scroll",Xt,ht),k(p,"wheel",qt,ht),k(p,g[0],Vt,ht),k(Lt,g[2],jt),k(Lt,g[3],jt),k(p,"click",Ft,!0),k(p,"click",Zt),k(Lt,"gesturestart",Wt),k(Lt,"gestureend",$t),k(p,u+"enter",Kt),k(p,u+"leave",Jt),k(p,u+"move",Ut),Tt.isEnabled=Tt.isPressed=Tt.isDragging=!1,ct&&ct(Tt))},Tt.kill=Tt.revert=function(){Tt.disable();var t=b.indexOf(Tt);t>=0&&b.splice(t,1),f===Tt&&(f=0)},b.push(Tt),st&&E(p)&&(f=Tt),Tt.enable(O)},e=t,(i=[{key:"velocityX",get:function(){return this._vx.getVelocity()}},{key:"velocityY",get:function(){return this._vy.getVelocity()}}])&&n(e.prototype,i),p&&n(e,p),t}();Y.version="3.12.5",Y.create=function(t){return new Y(t)},Y.register=G,Y.getAll=function(){return b.slice()},Y.getById=function(t){return b.filter((function(e){return e.vars.id===t}))[0]},v()&&s.registerPlugin(Y);var N,V,j,W,$,X,q,U,K,J,Z,Q,tt,et,it,nt,st,rt,ot,at,lt,ct,dt,ut,ht,pt,ft,gt,mt,vt,yt,bt,wt,_t,xt,Tt,St,Et,Ct=1,kt=Date.now,Mt=kt(),Ot=0,At=0,It=function(t,e,i){var n=Wt(t)&&("clamp("===t.substr(0,6)||t.indexOf("max")>-1);return i["_"+e+"Clamp"]=n,n?t.substr(6,t.length-7):t},Pt=function(t,e){return!e||Wt(t)&&"clamp("===t.substr(0,6)?t:"clamp("+t+")"},Lt=function t(){return At&&requestAnimationFrame(t)},Dt=function(){return et=1},zt=function(){return et=0},Bt=function(t){return t},Ft=function(t){return Math.round(1e5*t)/1e5||0},Rt=function(){return"undefined"!=typeof window},Ht=function(){return N||Rt()&&(N=window.gsap)&&N.registerPlugin&&N},Gt=function(t){return!!~q.indexOf(t)},Yt=function(t){return("Height"===t?yt:j["inner"+t])||$["client"+t]||X["client"+t]},Nt=function(t){return S(t,"getBoundingClientRect")||(Gt(t)?function(){return ei.width=j.innerWidth,ei.height=yt,ei}:function(){return fe(t)})},Vt=function(t,e){var i=e.s,n=e.d2,s=e.d,r=e.a;return Math.max(0,(i="scroll"+n)&&(r=S(t,i))?r()-Nt(t)()[s]:Gt(t)?($[i]||X[i])-Yt(n):t[i]-t["offset"+n])},jt=function(t,e){for(var i=0;i<ot.length;i+=3)(!e||~e.indexOf(ot[i+1]))&&t(ot[i],ot[i+1],ot[i+2])},Wt=function(t){return"string"==typeof t},$t=function(t){return"function"==typeof t},Xt=function(t){return"number"==typeof t},qt=function(t){return"object"==typeof t},Ut=function(t,e,i){return t&&t.progress(e?0:1)&&i&&t.pause()},Kt=function(t,e){if(t.enabled){var i=t._ctx?t._ctx.add((function(){return e(t)})):e(t);i&&i.totalTime&&(t.callbackAnimation=i)}},Jt=Math.abs,Zt="left",Qt="right",te="bottom",ee="width",ie="height",ne="Right",se="Left",re="Top",oe="Bottom",ae="padding",le="margin",ce="Width",de="Height",ue="px",he=function(t){return j.getComputedStyle(t)},pe=function(t,e){for(var i in e)i in t||(t[i]=e[i]);return t},fe=function(t,e){var i=e&&"matrix(1, 0, 0, 1, 0, 0)"!==he(t)[it]&&N.to(t,{x:0,y:0,xPercent:0,yPercent:0,rotation:0,rotationX:0,rotationY:0,scale:1,skewX:0,skewY:0}).progress(1),n=t.getBoundingClientRect();return i&&i.progress(0).kill(),n},ge=function(t,e){var i=e.d2;return t["offset"+i]||t["client"+i]||0},me=function(t){var e,i=[],n=t.labels,s=t.duration();for(e in n)i.push(n[e]/s);return i},ve=function(t){var e=N.utils.snap(t),i=Array.isArray(t)&&t.slice(0).sort((function(t,e){return t-e}));return i?function(t,n,s){var r;if(void 0===s&&(s=.001),!n)return e(t);if(n>0){for(t-=s,r=0;r<i.length;r++)if(i[r]>=t)return i[r];return i[r-1]}for(r=i.length,t+=s;r--;)if(i[r]<=t)return i[r];return i[0]}:function(i,n,s){void 0===s&&(s=.001);var r=e(i);return!n||Math.abs(r-i)<s||r-i<0==n<0?r:e(n<0?i-t:i+t)}},ye=function(t,e,i,n){return i.split(",").forEach((function(i){return t(e,i,n)}))},be=function(t,e,i,n,s){return t.addEventListener(e,i,{passive:!n,capture:!!s})},we=function(t,e,i,n){return t.removeEventListener(e,i,!!n)},_e=function(t,e,i){(i=i&&i.wheelHandler)&&(t(e,"wheel",i),t(e,"touchmove",i))},xe={startColor:"green",endColor:"red",indent:0,fontSize:"16px",fontWeight:"normal"},Te={toggleActions:"play",anticipatePin:0},Se={top:0,left:0,center:.5,bottom:1,right:1},Ee=function(t,e){if(Wt(t)){var i=t.indexOf("="),n=~i?+(t.charAt(i-1)+1)*parseFloat(t.substr(i+1)):0;~i&&(t.indexOf("%")>i&&(n*=e/100),t=t.substr(0,i-1)),t=n+(t in Se?Se[t]*e:~t.indexOf("%")?parseFloat(t)*e/100:parseFloat(t)||0)}return t},Ce=function(t,e,i,n,s,r,o,a){var l=s.startColor,c=s.endColor,d=s.fontSize,u=s.indent,h=s.fontWeight,p=W.createElement("div"),f=Gt(i)||"fixed"===S(i,"pinType"),g=-1!==t.indexOf("scroller"),m=f?X:i,v=-1!==t.indexOf("start"),y=v?l:c,b="border-color:"+y+";font-size:"+d+";color:"+y+";font-weight:"+h+";pointer-events:none;white-space:nowrap;font-family:sans-serif,Arial;z-index:1000;padding:4px 8px;border-width:0;border-style:solid;";return b+="position:"+((g||a)&&f?"fixed;":"absolute;"),(g||a||!f)&&(b+=(n===L?Qt:te)+":"+(r+parseFloat(u))+"px;"),o&&(b+="box-sizing:border-box;text-align:left;width:"+o.offsetWidth+"px;"),p._isStart=v,p.setAttribute("class","gsap-marker-"+t+(e?" marker-"+e:"")),p.style.cssText=b,p.innerText=e||0===e?t+"-"+e:t,m.children[0]?m.insertBefore(p,m.children[0]):m.appendChild(p),p._offset=p["offset"+n.op.d2],ke(p,0,n,v),p},ke=function(t,e,i,n){var s={display:"block"},r=i[n?"os2":"p2"],o=i[n?"p2":"os2"];t._isFlipped=n,s[i.a+"Percent"]=n?-100:0,s[i.a]=n?"1px":0,s["border"+r+ce]=1,s["border"+o+ce]=0,s[i.p]=e+"px",N.set(t,s)},Me=[],Oe={},Ae=function(){return kt()-Ot>34&&(xt||(xt=requestAnimationFrame(qe)))},Ie=function(){(!dt||!dt.isPressed||dt.startX>X.clientWidth)&&(w.cache++,dt?xt||(xt=requestAnimationFrame(qe)):qe(),Ot||Fe("scrollStart"),Ot=kt())},Pe=function(){pt=j.innerWidth,ht=j.innerHeight},Le=function(){w.cache++,!tt&&!ct&&!W.fullscreenElement&&!W.webkitFullscreenElement&&(!ut||pt!==j.innerWidth||Math.abs(j.innerHeight-ht)>.25*j.innerHeight)&&U.restart(!0)},De={},ze=[],Be=function t(){return we(li,"scrollEnd",t)||We(!0)},Fe=function(t){return De[t]&&De[t].map((function(t){return t()}))||ze},Re=[],He=function(t){for(var e=0;e<Re.length;e+=5)(!t||Re[e+4]&&Re[e+4].query===t)&&(Re[e].style.cssText=Re[e+1],Re[e].getBBox&&Re[e].setAttribute("transform",Re[e+2]||""),Re[e+3].uncache=1)},Ge=function(t,e){var i;for(nt=0;nt<Me.length;nt++)!(i=Me[nt])||e&&i._ctx!==e||(t?i.kill(1):i.revert(!0,!0));bt=!0,e&&He(e),e||Fe("revert")},Ye=function(t,e){w.cache++,(e||!Tt)&&w.forEach((function(t){return $t(t)&&t.cacheID++&&(t.rec=0)})),Wt(t)&&(j.history.scrollRestoration=mt=t)},Ne=0,Ve=function(){X.appendChild(vt),yt=!dt&&vt.offsetHeight||j.innerHeight,X.removeChild(vt)},je=function(t){return K(".gsap-marker-start, .gsap-marker-end, .gsap-marker-scroller-start, .gsap-marker-scroller-end").forEach((function(e){return e.style.display=t?"none":"block"}))},We=function(t,e){if(!Ot||t||bt){Ve(),Tt=li.isRefreshing=!0,w.forEach((function(t){return $t(t)&&++t.cacheID&&(t.rec=t())}));var i=Fe("refreshInit");at&&li.sort(),e||Ge(),w.forEach((function(t){$t(t)&&(t.smooth&&(t.target.style.scrollBehavior="auto"),t(0))})),Me.slice(0).forEach((function(t){return t.refresh()})),bt=!1,Me.forEach((function(t){if(t._subPinOffset&&t.pin){var e=t.vars.horizontal?"offsetWidth":"offsetHeight",i=t.pin[e];t.revert(!0,1),t.adjustPinSpacing(t.pin[e]-i),t.refresh()}})),wt=1,je(!0),Me.forEach((function(t){var e=Vt(t.scroller,t._dir),i="max"===t.vars.end||t._endClamp&&t.end>e,n=t._startClamp&&t.start>=e;(i||n)&&t.setPositions(n?e-1:t.start,i?Math.max(n?e:t.start+1,e):t.end,!0)})),je(!1),wt=0,i.forEach((function(t){return t&&t.render&&t.render(-1)})),w.forEach((function(t){$t(t)&&(t.smooth&&requestAnimationFrame((function(){return t.target.style.scrollBehavior="smooth"})),t.rec&&t(t.rec))})),Ye(mt,1),U.pause(),Ne++,Tt=2,qe(2),Me.forEach((function(t){return $t(t.vars.onRefresh)&&t.vars.onRefresh(t)})),Tt=li.isRefreshing=!1,Fe("refresh")}else be(li,"scrollEnd",Be)},$e=0,Xe=1,qe=function(t){if(2===t||!Tt&&!bt){li.isUpdating=!0,Et&&Et.update(0);var e=Me.length,i=kt(),n=i-Mt>=50,s=e&&Me[0].scroll();if(Xe=$e>s?-1:1,Tt||($e=s),n&&(Ot&&!et&&i-Ot>200&&(Ot=0,Fe("scrollEnd")),Z=Mt,Mt=i),Xe<0){for(nt=e;nt-- >0;)Me[nt]&&Me[nt].update(0,n);Xe=1}else for(nt=0;nt<e;nt++)Me[nt]&&Me[nt].update(0,n);li.isUpdating=!1}xt=0},Ue=[Zt,"top",te,Qt,le+oe,le+ne,le+re,le+se,"display","flexShrink","float","zIndex","gridColumnStart","gridColumnEnd","gridRowStart","gridRowEnd","gridArea","justifySelf","alignSelf","placeSelf","order"],Ke=Ue.concat([ee,ie,"boxSizing","max"+ce,"max"+de,"position",le,ae,ae+re,ae+ne,ae+oe,ae+se]),Je=function(t,e,i,n){if(!t._gsap.swappedIn){for(var s,r=Ue.length,o=e.style,a=t.style;r--;)o[s=Ue[r]]=i[s];o.position="absolute"===i.position?"absolute":"relative","inline"===i.display&&(o.display="inline-block"),a[te]=a[Qt]="auto",o.flexBasis=i.flexBasis||"auto",o.overflow="visible",o.boxSizing="border-box",o[ee]=ge(t,P)+ue,o[ie]=ge(t,L)+ue,o[ae]=a[le]=a.top=a[Zt]="0",Qe(n),a[ee]=a["max"+ce]=i[ee],a[ie]=a["max"+de]=i[ie],a[ae]=i[ae],t.parentNode!==e&&(t.parentNode.insertBefore(e,t),e.appendChild(t)),t._gsap.swappedIn=!0}},Ze=/([A-Z])/g,Qe=function(t){if(t){var e,i,n=t.t.style,s=t.length,r=0;for((t.t._gsap||N.core.getCache(t.t)).uncache=1;r<s;r+=2)i=t[r+1],e=t[r],i?n[e]=i:n[e]&&n.removeProperty(e.replace(Ze,"-$1").toLowerCase())}},ti=function(t){for(var e=Ke.length,i=t.style,n=[],s=0;s<e;s++)n.push(Ke[s],i[Ke[s]]);return n.t=t,n},ei={left:0,top:0},ii=function(t,e,i,n,s,r,o,a,l,c,d,u,h,p){$t(t)&&(t=t(a)),Wt(t)&&"max"===t.substr(0,3)&&(t=u+("="===t.charAt(4)?Ee("0"+t.substr(3),i):0));var f,g,m,v=h?h.time():0;if(h&&h.seek(0),isNaN(t)||(t=+t),Xt(t))h&&(t=N.utils.mapRange(h.scrollTrigger.start,h.scrollTrigger.end,0,u,t)),o&&ke(o,i,n,!0);else{$t(e)&&(e=e(a));var y,b,w,_,x=(t||"0").split(" ");m=D(e,a)||X,(y=fe(m)||{})&&(y.left||y.top)||"none"!==he(m).display||(_=m.style.display,m.style.display="block",y=fe(m),_?m.style.display=_:m.style.removeProperty("display")),b=Ee(x[0],y[n.d]),w=Ee(x[1]||"0",i),t=y[n.p]-l[n.p]-c+b+s-w,o&&ke(o,w,n,i-w<20||o._isStart&&w>20),i-=i-w}if(p&&(a[p]=t||-.001,t<0&&(t=0)),r){var T=t+i,S=r._isStart;f="scroll"+n.d2,ke(r,T,n,S&&T>20||!S&&(d?Math.max(X[f],$[f]):r.parentNode[f])<=T+1),d&&(l=fe(o),d&&(r.style[n.op.p]=l[n.op.p]-n.op.m-r._offset+ue))}return h&&m&&(f=fe(m),h.seek(u),g=fe(m),h._caScrollDist=f[n.p]-g[n.p],t=t/h._caScrollDist*u),h&&h.seek(v),h?t:Math.round(t)},ni=/(webkit|moz|length|cssText|inset)/i,si=function(t,e,i,n){if(t.parentNode!==e){var s,r,o=t.style;if(e===X){for(s in t._stOrig=o.cssText,r=he(t))+s||ni.test(s)||!r[s]||"string"!=typeof o[s]||"0"===s||(o[s]=r[s]);o.top=i,o.left=n}else o.cssText=t._stOrig;N.core.getCache(t).uncache=1,e.appendChild(t)}},ri=function(t,e,i){var n=e,s=n;return function(e){var r=Math.round(t());return r!==n&&r!==s&&Math.abs(r-n)>3&&Math.abs(r-s)>3&&(e=r,i&&i()),s=n,n=e,e}},oi=function(t,e,i){var n={};n[e.p]="+="+i,N.set(t,n)},ai=function(t,e){var i=z(t,e),n="_scroll"+e.p2,s=function e(s,r,o,a,l){var c=e.tween,d=r.onComplete,u={};o=o||i();var h=ri(i,o,(function(){c.kill(),e.tween=0}));return l=a&&l||0,a=a||s-o,c&&c.kill(),r[n]=s,r.inherit=!1,r.modifiers=u,u[n]=function(){return h(o+a*c.ratio+l*c.ratio*c.ratio)},r.onUpdate=function(){w.cache++,e.tween&&qe()},r.onComplete=function(){e.tween=0,d&&d.call(c)},c=e.tween=N.to(t,r)};return t[n]=i,i.wheelHandler=function(){return s.tween&&s.tween.kill()&&(s.tween=0)},be(t,"wheel",i.wheelHandler),li.isTouch&&be(t,"touchmove",i.wheelHandler),s},li=function(){function t(e,i){V||t.register(N)||console.warn("Please gsap.registerPlugin(ScrollTrigger)"),gt(this),this.init(e,i)}return t.prototype.init=function(e,i){if(this.progress=this.start=0,this.vars&&this.kill(!0,!0),At){var n,s,r,o,a,l,c,d,u,h,p,f,g,m,v,y,b,x,T,E,C,k,M,O,A,I,B,F,R,H,G,Y,V,q,U,Q,it,st,rt,ot,ct,dt,ut=e=pe(Wt(e)||Xt(e)||e.nodeType?{trigger:e}:e,Te),ht=ut.onUpdate,pt=ut.toggleClass,ft=ut.id,gt=ut.onToggle,mt=ut.onRefresh,vt=ut.scrub,yt=ut.trigger,bt=ut.pin,xt=ut.pinSpacing,Mt=ut.invalidateOnRefresh,Lt=ut.anticipatePin,Dt=ut.onScrubComplete,zt=ut.onSnapComplete,Rt=ut.once,Ht=ut.snap,jt=ut.pinReparent,Zt=ut.pinSpacer,Qt=ut.containerAnimation,te=ut.fastScrollEnd,ye=ut.preventOverlaps,_e=e.horizontal||e.containerAnimation&&!1!==e.horizontal?P:L,Se=!vt&&0!==vt,ke=D(e.scroller||j),Ae=N.core.getCache(ke),Pe=Gt(ke),De="fixed"===("pinType"in e?e.pinType:S(ke,"pinType")||Pe&&"fixed"),ze=[e.onEnter,e.onLeave,e.onEnterBack,e.onLeaveBack],Fe=Se&&e.toggleActions.split(" "),Re="markers"in e?e.markers:Te.markers,He=Pe?0:parseFloat(he(ke)["border"+_e.p2+ce])||0,Ge=this,Ye=e.onRefreshInit&&function(){return e.onRefreshInit(Ge)},Ve=function(t,e,i){var n=i.d,s=i.d2,r=i.a;return(r=S(t,"getBoundingClientRect"))?function(){return r()[n]}:function(){return(e?Yt(s):t["client"+s])||0}}(ke,Pe,_e),je=function(t,e){return!e||~_.indexOf(t)?Nt(t):function(){return ei}}(ke,Pe),$e=0,qe=0,Ue=0,Ke=z(ke,_e);if(Ge._startClamp=Ge._endClamp=!1,Ge._dir=_e,Lt*=45,Ge.scroller=ke,Ge.scroll=Qt?Qt.time.bind(Qt):Ke,o=Ke(),Ge.vars=e,i=i||e.animation,"refreshPriority"in e&&(at=1,-9999===e.refreshPriority&&(Et=Ge)),Ae.tweenScroll=Ae.tweenScroll||{top:ai(ke,L),left:ai(ke,P)},Ge.tweenTo=n=Ae.tweenScroll[_e.p],Ge.scrubDuration=function(t){(V=Xt(t)&&t)?Y?Y.duration(t):Y=N.to(i,{ease:"expo",totalProgress:"+=0",inherit:!1,duration:V,paused:!0,onComplete:function(){return Dt&&Dt(Ge)}}):(Y&&Y.progress(1).kill(),Y=0)},i&&(i.vars.lazy=!1,i._initted&&!Ge.isReverted||!1!==i.vars.immediateRender&&!1!==e.immediateRender&&i.duration()&&i.render(0,!0,!0),Ge.animation=i.pause(),i.scrollTrigger=Ge,Ge.scrubDuration(vt),H=0,ft||(ft=i.vars.id)),Ht&&(qt(Ht)&&!Ht.push||(Ht={snapTo:Ht}),"scrollBehavior"in X.style&&N.set(Pe?[X,$]:ke,{scrollBehavior:"auto"}),w.forEach((function(t){return $t(t)&&t.target===(Pe?W.scrollingElement||$:ke)&&(t.smooth=!1)})),r=$t(Ht.snapTo)?Ht.snapTo:"labels"===Ht.snapTo?function(t){return function(e){return N.utils.snap(me(t),e)}}(i):"labelsDirectional"===Ht.snapTo?(ot=i,function(t,e){return ve(me(ot))(t,e.direction)}):!1!==Ht.directional?function(t,e){return ve(Ht.snapTo)(t,kt()-qe<500?0:e.direction)}:N.utils.snap(Ht.snapTo),q=Ht.duration||{min:.1,max:2},q=qt(q)?J(q.min,q.max):J(q,q),U=N.delayedCall(Ht.delay||V/2||.1,(function(){var t=Ke(),e=kt()-qe<500,s=n.tween;if(!(e||Math.abs(Ge.getVelocity())<10)||s||et||$e===t)Ge.isActive&&$e!==t&&U.restart(!0);else{var o,a,d=(t-l)/m,u=i&&!Se?i.totalProgress():d,h=e?0:(u-G)/(kt()-Z)*1e3||0,p=N.utils.clamp(-d,1-d,Jt(h/2)*h/.185),f=d+(!1===Ht.inertia?0:p),g=Ht,v=g.onStart,y=g.onInterrupt,b=g.onComplete;if(o=r(f,Ge),Xt(o)||(o=f),a=Math.round(l+o*m),t<=c&&t>=l&&a!==t){if(s&&!s._initted&&s.data<=Jt(a-t))return;!1===Ht.inertia&&(p=o-d),n(a,{duration:q(Jt(.185*Math.max(Jt(f-u),Jt(o-u))/h/.05||0)),ease:Ht.ease||"power3",data:Jt(a-t),onInterrupt:function(){return U.restart(!0)&&y&&y(Ge)},onComplete:function(){Ge.update(),$e=Ke(),i&&(Y?Y.resetTo("totalProgress",o,i._tTime/i._tDur):i.progress(o)),H=G=i&&!Se?i.totalProgress():Ge.progress,zt&&zt(Ge),b&&b(Ge)}},t,p*m,a-t-p*m),v&&v(Ge,n.tween)}}})).pause()),ft&&(Oe[ft]=Ge),(rt=(yt=Ge.trigger=D(yt||!0!==bt&&bt))&&yt._gsap&&yt._gsap.stRevert)&&(rt=rt(Ge)),bt=!0===bt?yt:D(bt),Wt(pt)&&(pt={targets:yt,className:pt}),bt&&(!1===xt||xt===le||(xt=!(!xt&&bt.parentNode&&bt.parentNode.style&&"flex"===he(bt.parentNode).display)&&ae),Ge.pin=bt,(s=N.core.getCache(bt)).spacer?v=s.pinState:(Zt&&((Zt=D(Zt))&&!Zt.nodeType&&(Zt=Zt.current||Zt.nativeElement),s.spacerIsNative=!!Zt,Zt&&(s.spacerState=ti(Zt))),s.spacer=x=Zt||W.createElement("div"),x.classList.add("pin-spacer"),ft&&x.classList.add("pin-spacer-"+ft),s.pinState=v=ti(bt)),!1!==e.force3D&&N.set(bt,{force3D:!0}),Ge.spacer=x=s.spacer,R=he(bt),O=R[xt+_e.os2],E=N.getProperty(bt),C=N.quickSetter(bt,_e.a,ue),Je(bt,x,R),b=ti(bt)),Re){f=qt(Re)?pe(Re,xe):xe,h=Ce("scroller-start",ft,ke,_e,f,0),p=Ce("scroller-end",ft,ke,_e,f,0,h),T=h["offset"+_e.op.d2];var Ze=D(S(ke,"content")||ke);d=this.markerStart=Ce("start",ft,Ze,_e,f,T,0,Qt),u=this.markerEnd=Ce("end",ft,Ze,_e,f,T,0,Qt),Qt&&(st=N.quickSetter([d,u],_e.a,ue)),De||_.length&&!0===S(ke,"fixedMarkers")||(dt=he(ct=Pe?X:ke).position,ct.style.position="absolute"===dt||"fixed"===dt?dt:"relative",N.set([h,p],{force3D:!0}),I=N.quickSetter(h,_e.a,ue),F=N.quickSetter(p,_e.a,ue))}if(Qt){var ni=Qt.vars.onUpdate,ri=Qt.vars.onUpdateParams;Qt.eventCallback("onUpdate",(function(){Ge.update(0,0,1),ni&&ni.apply(Qt,ri||[])}))}if(Ge.previous=function(){return Me[Me.indexOf(Ge)-1]},Ge.next=function(){return Me[Me.indexOf(Ge)+1]},Ge.revert=function(t,e){if(!e)return Ge.kill(!0);var n=!1!==t||!Ge.enabled,s=tt;n!==Ge.isReverted&&(n&&(Q=Math.max(Ke(),Ge.scroll.rec||0),Ue=Ge.progress,it=i&&i.progress()),d&&[d,u,h,p].forEach((function(t){return t.style.display=n?"none":"block"})),n&&(tt=Ge,Ge.update(n)),!bt||jt&&Ge.isActive||(n?function(t,e,i){Qe(i);var n=t._gsap;if(n.spacerIsNative)Qe(n.spacerState);else if(t._gsap.swappedIn){var s=e.parentNode;s&&(s.insertBefore(t,e),s.removeChild(e))}t._gsap.swappedIn=!1}(bt,x,v):Je(bt,x,he(bt),A)),n||Ge.update(n),tt=s,Ge.isReverted=n)},Ge.refresh=function(s,r,f,w){if(!tt&&Ge.enabled||r)if(bt&&s&&Ot)be(t,"scrollEnd",Be);else{!Tt&&Ye&&Ye(Ge),tt=Ge,n.tween&&!f&&(n.tween.kill(),n.tween=0),Y&&Y.pause(),Mt&&i&&i.revert({kill:!1}).invalidate(),Ge.isReverted||Ge.revert(!0,!0),Ge._subPinOffset=!1;var _,T,S,C,O,I,F,R,H,G,V,j,q,K=Ve(),J=je(),Z=Qt?Qt.duration():Vt(ke,_e),et=m<=.01,nt=0,st=w||0,rt=qt(f)?f.end:e.end,ot=e.endTrigger||yt,at=qt(f)?f.start:e.start||(0!==e.start&&yt?bt?"0 0":"0 100%":0),ct=Ge.pinnedContainer=e.pinnedContainer&&D(e.pinnedContainer,Ge),dt=yt&&Math.max(0,Me.indexOf(Ge))||0,ut=dt;for(Re&&qt(f)&&(j=N.getProperty(h,_e.p),q=N.getProperty(p,_e.p));ut--;)(I=Me[ut]).end||I.refresh(0,1)||(tt=Ge),!(F=I.pin)||F!==yt&&F!==bt&&F!==ct||I.isReverted||(G||(G=[]),G.unshift(I),I.revert(!0,!0)),I!==Me[ut]&&(dt--,ut--);for($t(at)&&(at=at(Ge)),at=It(at,"start",Ge),l=ii(at,yt,K,_e,Ke(),d,h,Ge,J,He,De,Z,Qt,Ge._startClamp&&"_startClamp")||(bt?-.001:0),$t(rt)&&(rt=rt(Ge)),Wt(rt)&&!rt.indexOf("+=")&&(~rt.indexOf(" ")?rt=(Wt(at)?at.split(" ")[0]:"")+rt:(nt=Ee(rt.substr(2),K),rt=Wt(at)?at:(Qt?N.utils.mapRange(0,Qt.duration(),Qt.scrollTrigger.start,Qt.scrollTrigger.end,l):l)+nt,ot=yt)),rt=It(rt,"end",Ge),c=Math.max(l,ii(rt||(ot?"100% 0":Z),ot,K,_e,Ke()+nt,u,p,Ge,J,He,De,Z,Qt,Ge._endClamp&&"_endClamp"))||-.001,nt=0,ut=dt;ut--;)(F=(I=Me[ut]).pin)&&I.start-I._pinPush<=l&&!Qt&&I.end>0&&(_=I.end-(Ge._startClamp?Math.max(0,I.start):I.start),(F===yt&&I.start-I._pinPush<l||F===ct)&&isNaN(at)&&(nt+=_*(1-I.progress)),F===bt&&(st+=_));if(l+=nt,c+=nt,Ge._startClamp&&(Ge._startClamp+=nt),Ge._endClamp&&!Tt&&(Ge._endClamp=c||-.001,c=Math.min(c,Vt(ke,_e))),m=c-l||(l-=.01)&&.001,et&&(Ue=N.utils.clamp(0,1,N.utils.normalize(l,c,Q))),Ge._pinPush=st,d&&nt&&((_={})[_e.a]="+="+nt,ct&&(_[_e.p]="-="+Ke()),N.set([d,u],_)),!bt||wt&&Ge.end>=Vt(ke,_e)){if(yt&&Ke()&&!Qt)for(T=yt.parentNode;T&&T!==X;)T._pinOffset&&(l-=T._pinOffset,c-=T._pinOffset),T=T.parentNode}else _=he(bt),C=_e===L,S=Ke(),k=parseFloat(E(_e.a))+st,!Z&&c>1&&(V={style:V=(Pe?W.scrollingElement||$:ke).style,value:V["overflow"+_e.a.toUpperCase()]},Pe&&"scroll"!==he(X)["overflow"+_e.a.toUpperCase()]&&(V.style["overflow"+_e.a.toUpperCase()]="scroll")),Je(bt,x,_),b=ti(bt),T=fe(bt,!0),R=De&&z(ke,C?P:L)(),xt?((A=[xt+_e.os2,m+st+ue]).t=x,(ut=xt===ae?ge(bt,_e)+m+st:0)&&(A.push(_e.d,ut+ue),"auto"!==x.style.flexBasis&&(x.style.flexBasis=ut+ue)),Qe(A),ct&&Me.forEach((function(t){t.pin===ct&&!1!==t.vars.pinSpacing&&(t._subPinOffset=!0)})),De&&Ke(Q)):(ut=ge(bt,_e))&&"auto"!==x.style.flexBasis&&(x.style.flexBasis=ut+ue),De&&((O={top:T.top+(C?S-l:R)+ue,left:T.left+(C?R:S-l)+ue,boxSizing:"border-box",position:"fixed"})[ee]=O["max"+ce]=Math.ceil(T.width)+ue,O[ie]=O["max"+de]=Math.ceil(T.height)+ue,O[le]=O[le+re]=O[le+ne]=O[le+oe]=O[le+se]="0",O[ae]=_[ae],O[ae+re]=_[ae+re],O[ae+ne]=_[ae+ne],O[ae+oe]=_[ae+oe],O[ae+se]=_[ae+se],y=function(t,e,i){for(var n,s=[],r=t.length,o=i?8:0;o<r;o+=2)n=t[o],s.push(n,n in e?e[n]:t[o+1]);return s.t=t.t,s}(v,O,jt),Tt&&Ke(0)),i?(H=i._initted,lt(1),i.render(i.duration(),!0,!0),M=E(_e.a)-k+m+st,B=Math.abs(m-M)>1,De&&B&&y.splice(y.length-2,2),i.render(0,!0,!0),H||i.invalidate(!0),i.parent||i.totalTime(i.totalTime()),lt(0)):M=m,V&&(V.value?V.style["overflow"+_e.a.toUpperCase()]=V.value:V.style.removeProperty("overflow-"+_e.a));G&&G.forEach((function(t){return t.revert(!1,!0)})),Ge.start=l,Ge.end=c,o=a=Tt?Q:Ke(),Qt||Tt||(o<Q&&Ke(Q),Ge.scroll.rec=0),Ge.revert(!1,!0),qe=kt(),U&&($e=-1,U.restart(!0)),tt=0,i&&Se&&(i._initted||it)&&i.progress()!==it&&i.progress(it||0,!0).render(i.time(),!0,!0),(et||Ue!==Ge.progress||Qt||Mt)&&(i&&!Se&&i.totalProgress(Qt&&l<-.001&&!Ue?N.utils.normalize(l,c,0):Ue,!0),Ge.progress=et||(o-l)/m===Ue?0:Ue),bt&&xt&&(x._pinOffset=Math.round(Ge.progress*M)),Y&&Y.invalidate(),isNaN(j)||(j-=N.getProperty(h,_e.p),q-=N.getProperty(p,_e.p),oi(h,_e,j),oi(d,_e,j-(w||0)),oi(p,_e,q),oi(u,_e,q-(w||0))),et&&!Tt&&Ge.update(),!mt||Tt||g||(g=!0,mt(Ge),g=!1)}},Ge.getVelocity=function(){return(Ke()-a)/(kt()-Z)*1e3||0},Ge.endAnimation=function(){Ut(Ge.callbackAnimation),i&&(Y?Y.progress(1):i.paused()?Se||Ut(i,Ge.direction<0,1):Ut(i,i.reversed()))},Ge.labelToScroll=function(t){return i&&i.labels&&(l||Ge.refresh()||l)+i.labels[t]/i.duration()*m||0},Ge.getTrailing=function(t){var e=Me.indexOf(Ge),i=Ge.direction>0?Me.slice(0,e).reverse():Me.slice(e+1);return(Wt(t)?i.filter((function(e){return e.vars.preventOverlaps===t})):i).filter((function(t){return Ge.direction>0?t.end<=l:t.start>=c}))},Ge.update=function(t,e,s){if(!Qt||s||t){var r,d,u,p,f,g,v,w=!0===Tt?Q:Ge.scroll(),_=t?0:(w-l)/m,T=_<0?0:_>1?1:_||0,S=Ge.progress;if(e&&(a=o,o=Qt?Ke():w,Ht&&(G=H,H=i&&!Se?i.totalProgress():T)),Lt&&bt&&!tt&&!Ct&&Ot&&(!T&&l<w+(w-a)/(kt()-Z)*Lt?T=1e-4:1===T&&c>w+(w-a)/(kt()-Z)*Lt&&(T=.9999)),T!==S&&Ge.enabled){if(p=(f=(r=Ge.isActive=!!T&&T<1)!==(!!S&&S<1))||!!T!=!!S,Ge.direction=T>S?1:-1,Ge.progress=T,p&&!tt&&(d=T&&!S?0:1===T?1:1===S?2:3,Se&&(u=!f&&"none"!==Fe[d+1]&&Fe[d+1]||Fe[d],v=i&&("complete"===u||"reset"===u||u in i))),ye&&(f||v)&&(v||vt||!i)&&($t(ye)?ye(Ge):Ge.getTrailing(ye).forEach((function(t){return t.endAnimation()}))),Se||(!Y||tt||Ct?i&&i.totalProgress(T,!(!tt||!qe&&!t)):(Y._dp._time-Y._start!==Y._time&&Y.render(Y._dp._time-Y._start),Y.resetTo?Y.resetTo("totalProgress",T,i._tTime/i._tDur):(Y.vars.totalProgress=T,Y.invalidate().restart()))),bt)if(t&&xt&&(x.style[xt+_e.os2]=O),De){if(p){if(g=!t&&T>S&&c+1>w&&w+1>=Vt(ke,_e),jt)if(t||!r&&!g)si(bt,x);else{var E=fe(bt,!0),A=w-l;si(bt,X,E.top+(_e===L?A:0)+ue,E.left+(_e===L?0:A)+ue)}Qe(r||g?y:b),B&&T<1&&r||C(k+(1!==T||g?0:M))}}else C(Ft(k+M*T));Ht&&!n.tween&&!tt&&!Ct&&U.restart(!0),pt&&(f||Rt&&T&&(T<1||!_t))&&K(pt.targets).forEach((function(t){return t.classList[r||Rt?"add":"remove"](pt.className)})),ht&&!Se&&!t&&ht(Ge),p&&!tt?(Se&&(v&&("complete"===u?i.pause().totalProgress(1):"reset"===u?i.restart(!0).pause():"restart"===u?i.restart(!0):i[u]()),ht&&ht(Ge)),!f&&_t||(gt&&f&&Kt(Ge,gt),ze[d]&&Kt(Ge,ze[d]),Rt&&(1===T?Ge.kill(!1,1):ze[d]=0),f||ze[d=1===T?1:3]&&Kt(Ge,ze[d])),te&&!r&&Math.abs(Ge.getVelocity())>(Xt(te)?te:2500)&&(Ut(Ge.callbackAnimation),Y?Y.progress(1):Ut(i,"reverse"===u?1:!T,1))):Se&&ht&&!tt&&ht(Ge)}if(F){var P=Qt?w/Qt.duration()*(Qt._caScrollDist||0):w;I(P+(h._isFlipped?1:0)),F(P)}st&&st(-w/Qt.duration()*(Qt._caScrollDist||0))}},Ge.enable=function(e,i){Ge.enabled||(Ge.enabled=!0,be(ke,"resize",Le),Pe||be(ke,"scroll",Ie),Ye&&be(t,"refreshInit",Ye),!1!==e&&(Ge.progress=Ue=0,o=a=$e=Ke()),!1!==i&&Ge.refresh())},Ge.getTween=function(t){return t&&n?n.tween:Y},Ge.setPositions=function(t,e,i,n){if(Qt){var s=Qt.scrollTrigger,r=Qt.duration(),o=s.end-s.start;t=s.start+o*t/r,e=s.start+o*e/r}Ge.refresh(!1,!1,{start:Pt(t,i&&!!Ge._startClamp),end:Pt(e,i&&!!Ge._endClamp)},n),Ge.update()},Ge.adjustPinSpacing=function(t){if(A&&t){var e=A.indexOf(_e.d)+1;A[e]=parseFloat(A[e])+t+ue,A[1]=parseFloat(A[1])+t+ue,Qe(A)}},Ge.disable=function(e,i){if(Ge.enabled&&(!1!==e&&Ge.revert(!0,!0),Ge.enabled=Ge.isActive=!1,i||Y&&Y.pause(),Q=0,s&&(s.uncache=1),Ye&&we(t,"refreshInit",Ye),U&&(U.pause(),n.tween&&n.tween.kill()&&(n.tween=0)),!Pe)){for(var r=Me.length;r--;)if(Me[r].scroller===ke&&Me[r]!==Ge)return;we(ke,"resize",Le),Pe||we(ke,"scroll",Ie)}},Ge.kill=function(t,n){Ge.disable(t,n),Y&&!n&&Y.kill(),ft&&delete Oe[ft];var r=Me.indexOf(Ge);r>=0&&Me.splice(r,1),r===nt&&Xe>0&&nt--,r=0,Me.forEach((function(t){return t.scroller===Ge.scroller&&(r=1)})),r||Tt||(Ge.scroll.rec=0),i&&(i.scrollTrigger=null,t&&i.revert({kill:!1}),n||i.kill()),d&&[d,u,h,p].forEach((function(t){return t.parentNode&&t.parentNode.removeChild(t)})),Et===Ge&&(Et=0),bt&&(s&&(s.uncache=1),r=0,Me.forEach((function(t){return t.pin===bt&&r++})),r||(s.spacer=0)),e.onKill&&e.onKill(Ge)},Me.push(Ge),Ge.enable(!1,!1),rt&&rt(Ge),i&&i.add&&!m){var li=Ge.update;Ge.update=function(){Ge.update=li,l||c||Ge.refresh()},N.delayedCall(.01,Ge.update),m=.01,l=c=0}else Ge.refresh();bt&&function(){if(St!==Ne){var t=St=Ne;requestAnimationFrame((function(){return t===Ne&&We(!0)}))}}()}else this.update=this.refresh=this.kill=Bt},t.register=function(e){return V||(N=e||Ht(),Rt()&&window.document&&t.enable(),V=At),V},t.defaults=function(t){if(t)for(var e in t)Te[e]=t[e];return Te},t.disable=function(t,e){At=0,Me.forEach((function(i){return i[e?"kill":"disable"](t)})),we(j,"wheel",Ie),we(W,"scroll",Ie),clearInterval(Q),we(W,"touchcancel",Bt),we(X,"touchstart",Bt),ye(we,W,"pointerdown,touchstart,mousedown",Dt),ye(we,W,"pointerup,touchend,mouseup",zt),U.kill(),jt(we);for(var i=0;i<w.length;i+=3)_e(we,w[i],w[i+1]),_e(we,w[i],w[i+2])},t.enable=function(){if(j=window,W=document,$=W.documentElement,X=W.body,N&&(K=N.utils.toArray,J=N.utils.clamp,gt=N.core.context||Bt,lt=N.core.suppressOverwrites||Bt,mt=j.history.scrollRestoration||"auto",$e=j.pageYOffset,N.core.globals("ScrollTrigger",t),X)){At=1,(vt=document.createElement("div")).style.height="100vh",vt.style.position="absolute",Ve(),Lt(),Y.register(N),t.isTouch=Y.isTouch,ft=Y.isTouch&&/(iPad|iPhone|iPod|Mac)/g.test(navigator.userAgent),ut=1===Y.isTouch,be(j,"wheel",Ie),q=[j,W,$,X],N.matchMedia?(t.matchMedia=function(t){var e,i=N.matchMedia();for(e in t)i.add(e,t[e]);return i},N.addEventListener("matchMediaInit",(function(){return Ge()})),N.addEventListener("matchMediaRevert",(function(){return He()})),N.addEventListener("matchMedia",(function(){We(0,1),Fe("matchMedia")})),N.matchMedia("(orientation: portrait)",(function(){return Pe(),Pe}))):console.warn("Requires GSAP 3.11.0 or later"),Pe(),be(W,"scroll",Ie);var e,i,n=X.style,s=n.borderTopStyle,r=N.core.Animation.prototype;for(r.revert||Object.defineProperty(r,"revert",{value:function(){return this.time(-.01,!0)}}),n.borderTopStyle="solid",e=fe(X),L.m=Math.round(e.top+L.sc())||0,P.m=Math.round(e.left+P.sc())||0,s?n.borderTopStyle=s:n.removeProperty("border-top-style"),Q=setInterval(Ae,250),N.delayedCall(.5,(function(){return Ct=0})),be(W,"touchcancel",Bt),be(X,"touchstart",Bt),ye(be,W,"pointerdown,touchstart,mousedown",Dt),ye(be,W,"pointerup,touchend,mouseup",zt),it=N.utils.checkPrefix("transform"),Ke.push(it),V=kt(),U=N.delayedCall(.2,We).pause(),ot=[W,"visibilitychange",function(){var t=j.innerWidth,e=j.innerHeight;W.hidden?(st=t,rt=e):st===t&&rt===e||Le()},W,"DOMContentLoaded",We,j,"load",We,j,"resize",Le],jt(be),Me.forEach((function(t){return t.enable(0,1)})),i=0;i<w.length;i+=3)_e(we,w[i],w[i+1]),_e(we,w[i],w[i+2])}},t.config=function(e){"limitCallbacks"in e&&(_t=!!e.limitCallbacks);var i=e.syncInterval;i&&clearInterval(Q)||(Q=i)&&setInterval(Ae,i),"ignoreMobileResize"in e&&(ut=1===t.isTouch&&e.ignoreMobileResize),"autoRefreshEvents"in e&&(jt(we)||jt(be,e.autoRefreshEvents||"none"),ct=-1===(e.autoRefreshEvents+"").indexOf("resize"))},t.scrollerProxy=function(t,e){var i=D(t),n=w.indexOf(i),s=Gt(i);~n&&w.splice(n,s?6:2),e&&(s?_.unshift(j,e,X,e,$,e):_.unshift(i,e))},t.clearMatchMedia=function(t){Me.forEach((function(e){return e._ctx&&e._ctx.query===t&&e._ctx.kill(!0,!0)}))},t.isInViewport=function(t,e,i){var n=(Wt(t)?D(t):t).getBoundingClientRect(),s=n[i?ee:ie]*e||0;return i?n.right-s>0&&n.left+s<j.innerWidth:n.bottom-s>0&&n.top+s<j.innerHeight},t.positionInViewport=function(t,e,i){Wt(t)&&(t=D(t));var n=t.getBoundingClientRect(),s=n[i?ee:ie],r=null==e?s/2:e in Se?Se[e]*s:~e.indexOf("%")?parseFloat(e)*s/100:parseFloat(e)||0;return i?(n.left+r)/j.innerWidth:(n.top+r)/j.innerHeight},t.killAll=function(t){if(Me.slice(0).forEach((function(t){return"ScrollSmoother"!==t.vars.id&&t.kill()})),!0!==t){var e=De.killAll||[];De={},e.forEach((function(t){return t()}))}},t}();li.version="3.12.5",li.saveStyles=function(t){return t?K(t).forEach((function(t){if(t&&t.style){var e=Re.indexOf(t);e>=0&&Re.splice(e,5),Re.push(t,t.style.cssText,t.getBBox&&t.getAttribute("transform"),N.core.getCache(t),gt())}})):Re},li.revert=function(t,e){return Ge(!t,e)},li.create=function(t,e){return new li(t,e)},li.refresh=function(t){return t?Le():(V||li.register())&&We(!0)},li.update=function(t){return++w.cache&&qe(!0===t?2:0)},li.clearScrollMemory=Ye,li.maxScroll=function(t,e){return Vt(t,e?P:L)},li.getScrollFunc=function(t,e){return z(D(t),e?P:L)},li.getById=function(t){return Oe[t]},li.getAll=function(){return Me.filter((function(t){return"ScrollSmoother"!==t.vars.id}))},li.isScrolling=function(){return!!Ot},li.snapDirectional=ve,li.addEventListener=function(t,e){var i=De[t]||(De[t]=[]);~i.indexOf(e)||i.push(e)},li.removeEventListener=function(t,e){var i=De[t],n=i&&i.indexOf(e);n>=0&&i.splice(n,1)},li.batch=function(t,e){var i,n=[],s={},r=e.interval||.016,o=e.batchMax||1e9,a=function(t,e){var i=[],n=[],s=N.delayedCall(r,(function(){e(i,n),i=[],n=[]})).pause();return function(t){i.length||s.restart(!0),i.push(t.trigger),n.push(t),o<=i.length&&s.progress(1)}};for(i in e)s[i]="on"===i.substr(0,2)&&$t(e[i])&&"onRefreshInit"!==i?a(0,e[i]):e[i];return $t(o)&&(o=o(),be(li,"refresh",(function(){return o=e.batchMax()}))),K(t).forEach((function(t){var e={};for(i in s)e[i]=s[i];e.trigger=t,n.push(li.create(e))})),n};var ci,di=function(t,e,i,n){return e>n?t(n):e<0&&t(0),i>n?(n-e)/(i-e):i<0?e/(e-i):1},ui=function t(e,i){!0===i?e.style.removeProperty("touch-action"):e.style.touchAction=!0===i?"auto":i?"pan-"+i+(Y.isTouch?" pinch-zoom":""):"none",e===$&&t(X,i)},hi={auto:1,scroll:1},pi=function(t){var e,i=t.event,n=t.target,s=t.axis,r=(i.changedTouches?i.changedTouches[0]:i).target,o=r._gsap||N.core.getCache(r),a=kt();if(!o._isScrollT||a-o._isScrollT>2e3){for(;r&&r!==X&&(r.scrollHeight<=r.clientHeight&&r.scrollWidth<=r.clientWidth||!hi[(e=he(r)).overflowY]&&!hi[e.overflowX]);)r=r.parentNode;o._isScroll=r&&r!==n&&!Gt(r)&&(hi[(e=he(r)).overflowY]||hi[e.overflowX]),o._isScrollT=a}(o._isScroll||"x"===s)&&(i.stopPropagation(),i._gsapAllow=!0)},fi=function(t,e,i,n){return Y.create({target:t,capture:!0,debounce:!1,lockAxis:!0,type:e,onWheel:n=n&&pi,onPress:n,onDrag:n,onScroll:n,onEnable:function(){return i&&be(W,Y.eventTypes[0],mi,!1,!0)},onDisable:function(){return we(W,Y.eventTypes[0],mi,!0)}})},gi=/(input|label|select|textarea)/i,mi=function(t){var e=gi.test(t.target.tagName);(e||ci)&&(t._gsapAllow=!0,ci=e)},vi=function(t){qt(t)||(t={}),t.preventDefault=t.isNormalizer=t.allowClicks=!0,t.type||(t.type="wheel,touch"),t.debounce=!!t.debounce,t.id=t.id||"normalizer";var e,i,n,s,r,o,a,l,c=t,d=c.normalizeScrollX,u=c.momentum,h=c.allowNestedScroll,p=c.onRelease,f=D(t.target)||$,g=N.core.globals().ScrollSmoother,m=g&&g.get(),v=ft&&(t.content&&D(t.content)||m&&!1!==t.content&&!m.smooth()&&m.content()),y=z(f,L),b=z(f,P),_=1,x=(Y.isTouch&&j.visualViewport?j.visualViewport.scale*j.visualViewport.width:j.outerWidth)/j.innerWidth,T=0,S=$t(u)?function(){return u(e)}:function(){return u||2.8},E=fi(f,t.type,!0,h),C=function(){return s=!1},k=Bt,M=Bt,O=function(){i=Vt(f,L),M=J(ft?1:0,i),d&&(k=J(0,Vt(f,P))),n=Ne},A=function(){v._gsap.y=Ft(parseFloat(v._gsap.y)+y.offset)+"px",v.style.transform="matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, "+parseFloat(v._gsap.y)+", 0, 1)",y.offset=y.cacheID=0},I=function(){O(),r.isActive()&&r.vars.scrollY>i&&(y()>i?r.progress(1)&&y(i):r.resetTo("scrollY",i))};return v&&N.set(v,{y:"+=0"}),t.ignoreCheck=function(t){return ft&&"touchmove"===t.type&&function(){if(s){requestAnimationFrame(C);var t=Ft(e.deltaY/2),i=M(y.v-t);if(v&&i!==y.v+y.offset){y.offset=i-y.v;var n=Ft((parseFloat(v&&v._gsap.y)||0)-y.offset);v.style.transform="matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, "+n+", 0, 1)",v._gsap.y=n+"px",y.cacheID=w.cache,qe()}return!0}y.offset&&A(),s=!0}()||_>1.05&&"touchstart"!==t.type||e.isGesturing||t.touches&&t.touches.length>1},t.onPress=function(){s=!1;var t=_;_=Ft((j.visualViewport&&j.visualViewport.scale||1)/x),r.pause(),t!==_&&ui(f,_>1.01||!d&&"x"),o=b(),a=y(),O(),n=Ne},t.onRelease=t.onGestureStart=function(t,e){if(y.offset&&A(),e){w.cache++;var n,s,o=S();d&&(s=(n=b())+.05*o*-t.velocityX/.227,o*=di(b,n,s,Vt(f,P)),r.vars.scrollX=k(s)),s=(n=y())+.05*o*-t.velocityY/.227,o*=di(y,n,s,Vt(f,L)),r.vars.scrollY=M(s),r.invalidate().duration(o).play(.01),(ft&&r.vars.scrollY>=i||n>=i-1)&&N.to({},{onUpdate:I,duration:o})}else l.restart(!0);p&&p(t)},t.onWheel=function(){r._ts&&r.pause(),kt()-T>1e3&&(n=0,T=kt())},t.onChange=function(t,e,i,s,r){if(Ne!==n&&O(),e&&d&&b(k(s[2]===e?o+(t.startX-t.x):b()+e-s[1])),i){y.offset&&A();var l=r[2]===i,c=l?a+t.startY-t.y:y()+i-r[1],u=M(c);l&&c!==u&&(a+=u-c),y(u)}(i||e)&&qe()},t.onEnable=function(){ui(f,!d&&"x"),li.addEventListener("refresh",I),be(j,"resize",I),y.smooth&&(y.target.style.scrollBehavior="auto",y.smooth=b.smooth=!1),E.enable()},t.onDisable=function(){ui(f,!0),we(j,"resize",I),li.removeEventListener("refresh",I),E.kill()},t.lockAxis=!1!==t.lockAxis,(e=new Y(t)).iOS=ft,ft&&!y()&&y(1),ft&&N.ticker.add(Bt),l=e._dc,r=N.to(e,{ease:"power4",paused:!0,inherit:!1,scrollX:d?"+=0.1":"+=0",scrollY:"+=0.1",modifiers:{scrollY:ri(y,y(),(function(){return r.pause()}))},onUpdate:qe,onComplete:l.vars.onComplete}),e};li.sort=function(t){return Me.sort(t||function(t,e){return-1e6*(t.vars.refreshPriority||0)+t.start-(e.start+-1e6*(e.vars.refreshPriority||0))})},li.observe=function(t){return new Y(t)},li.normalizeScroll=function(t){if(void 0===t)return dt;if(!0===t&&dt)return dt.enable();if(!1===t)return dt&&dt.kill(),void(dt=t);var e=t instanceof Y?t:vi(t);return dt&&dt.target===e.target&&dt.kill(),Gt(e.target)&&(dt=e),e},li.core={_getVelocityProp:B,_inputObserver:fi,_scrollers:w,_proxies:_,bridge:{ss:function(){Ot||Fe("scrollStart"),Ot=kt()},ref:function(){return tt}}},Ht()&&N.registerPlugin(li)},8607:(t,e,i)=>{function n(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function s(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}i.d(e,{B0:()=>bt,Dx:()=>ri,E_:()=>vt,J7:()=>fi,Ks:()=>$,OF:()=>z,St:()=>pi,Uc:()=>ke,Vy:()=>he,Yz:()=>x,Zm:()=>qe,a0:()=>ft,au:()=>Me,dg:()=>Z,fA:()=>mt,l1:()=>li,l_:()=>te,n:()=>gt,n6:()=>Ye,os:()=>ki,qA:()=>Ee,vM:()=>j,vQ:()=>P,vX:()=>V,wU:()=>lt});var r,o,a,l,c,d,u,h,p,f,g,m,v,y,b,w,_,x={autoSleep:120,force3D:"auto",nullTargetWarn:1,units:{lineHeight:""}},T={duration:.5,overwrite:!1,delay:0},S=1e8,E=1e-8,C=2*Math.PI,k=C/4,M=0,O=Math.sqrt,A=Math.cos,I=Math.sin,P=function(t){return"string"==typeof t},L=function(t){return"function"==typeof t},D=function(t){return"number"==typeof t},z=function(t){return void 0===t},B=function(t){return"object"==typeof t},F=function(t){return!1!==t},R=function(){return"undefined"!=typeof window},H=function(t){return L(t)||P(t)},G="function"==typeof ArrayBuffer&&ArrayBuffer.isView||function(){},Y=Array.isArray,N=/(?:-?\.?\d|\.)+/gi,V=/[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g,j=/[-+=.]*\d+[.e-]*\d*[a-z%]*/g,W=/[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi,$=/[+-]=-?[.\d]+/,X=/[^,'"\[\]\s]+/gi,q=/^[+\-=e\s\d]*\d+[.\d]*([a-z]*|%)\s*$/i,U={},K={},J=function(t){return(K=Ct(t,U))&&ki},Z=function(t,e){return console.warn("Invalid property",t,"set to",e,"Missing plugin? gsap.registerPlugin()")},Q=function(t,e){return!e&&console.warn(t)},tt=function(t,e){return t&&(U[t]=e)&&K&&(K[t]=e)||U},et=function(){return 0},it={suppressEvents:!0,isStart:!0,kill:!1},nt={suppressEvents:!0,kill:!1},st={suppressEvents:!0},rt={},ot=[],at={},lt={},ct={},dt=30,ut=[],ht="",pt=function(t){var e,i,n=t[0];if(B(n)||L(n)||(t=[t]),!(e=(n._gsap||{}).harness)){for(i=ut.length;i--&&!ut[i].targetTest(n););e=ut[i]}for(i=t.length;i--;)t[i]&&(t[i]._gsap||(t[i]._gsap=new Ye(t[i],e)))||t.splice(i,1);return t},ft=function(t){return t._gsap||pt(se(t))[0]._gsap},gt=function(t,e,i){return(i=t[e])&&L(i)?t[e]():z(i)&&t.getAttribute&&t.getAttribute(e)||i},mt=function(t,e){return(t=t.split(",")).forEach(e)||t},vt=function(t){return Math.round(1e5*t)/1e5||0},yt=function(t){return Math.round(1e7*t)/1e7||0},bt=function(t,e){var i=e.charAt(0),n=parseFloat(e.substr(2));return t=parseFloat(t),"+"===i?t+n:"-"===i?t-n:"*"===i?t*n:t/n},wt=function(t,e){for(var i=e.length,n=0;t.indexOf(e[n])<0&&++n<i;);return n<i},_t=function(){var t,e,i=ot.length,n=ot.slice(0);for(at={},ot.length=0,t=0;t<i;t++)(e=n[t])&&e._lazy&&(e.render(e._lazy[0],e._lazy[1],!0)._lazy=0)},xt=function(t,e,i,n){ot.length&&!o&&_t(),t.render(e,i,n||o&&e<0&&(t._initted||t._startAt)),ot.length&&!o&&_t()},Tt=function(t){var e=parseFloat(t);return(e||0===e)&&(t+"").match(X).length<2?e:P(t)?t.trim():t},St=function(t){return t},Et=function(t,e){for(var i in e)i in t||(t[i]=e[i]);return t},Ct=function(t,e){for(var i in e)t[i]=e[i];return t},kt=function t(e,i){for(var n in i)"__proto__"!==n&&"constructor"!==n&&"prototype"!==n&&(e[n]=B(i[n])?t(e[n]||(e[n]={}),i[n]):i[n]);return e},Mt=function(t,e){var i,n={};for(i in t)i in e||(n[i]=t[i]);return n},Ot=function(t){var e,i=t.parent||l,n=t.keyframes?(e=Y(t.keyframes),function(t,i){for(var n in i)n in t||"duration"===n&&e||"ease"===n||(t[n]=i[n])}):Et;if(F(t.inherit))for(;i;)n(t,i.vars.defaults),i=i.parent||i._dp;return t},At=function(t,e,i,n,s){void 0===i&&(i="_first"),void 0===n&&(n="_last");var r,o=t[n];if(s)for(r=e[s];o&&o[s]>r;)o=o._prev;return o?(e._next=o._next,o._next=e):(e._next=t[i],t[i]=e),e._next?e._next._prev=e:t[n]=e,e._prev=o,e.parent=e._dp=t,e},It=function(t,e,i,n){void 0===i&&(i="_first"),void 0===n&&(n="_last");var s=e._prev,r=e._next;s?s._next=r:t[i]===e&&(t[i]=r),r?r._prev=s:t[n]===e&&(t[n]=s),e._next=e._prev=e.parent=null},Pt=function(t,e){t.parent&&(!e||t.parent.autoRemoveChildren)&&t.parent.remove&&t.parent.remove(t),t._act=0},Lt=function(t,e){if(t&&(!e||e._end>t._dur||e._start<0))for(var i=t;i;)i._dirty=1,i=i.parent;return t},Dt=function(t,e,i,n){return t._startAt&&(o?t._startAt.revert(nt):t.vars.immediateRender&&!t.vars.autoRevert||t._startAt.render(e,!0,n))},zt=function t(e){return!e||e._ts&&t(e.parent)},Bt=function(t){return t._repeat?Ft(t._tTime,t=t.duration()+t._rDelay)*t:0},Ft=function(t,e){var i=Math.floor(t/=e);return t&&i===t?i-1:i},Rt=function(t,e){return(t-e._start)*e._ts+(e._ts>=0?0:e._dirty?e.totalDuration():e._tDur)},Ht=function(t){return t._end=yt(t._start+(t._tDur/Math.abs(t._ts||t._rts||E)||0))},Gt=function(t,e){var i=t._dp;return i&&i.smoothChildTiming&&t._ts&&(t._start=yt(i._time-(t._ts>0?e/t._ts:((t._dirty?t.totalDuration():t._tDur)-e)/-t._ts)),Ht(t),i._dirty||Lt(i,t)),t},Yt=function(t,e){var i;if((e._time||!e._dur&&e._initted||e._start<t._time&&(e._dur||!e.add))&&(i=Rt(t.rawTime(),e),(!e._dur||Qt(0,e.totalDuration(),i)-e._tTime>E)&&e.render(i,!0)),Lt(t,e)._dp&&t._initted&&t._time>=t._dur&&t._ts){if(t._dur<t.duration())for(i=t;i._dp;)i.rawTime()>=0&&i.totalTime(i._tTime),i=i._dp;t._zTime=-1e-8}},Nt=function(t,e,i,n){return e.parent&&Pt(e),e._start=yt((D(i)?i:i||t!==l?Kt(t,i,e):t._time)+e._delay),e._end=yt(e._start+(e.totalDuration()/Math.abs(e.timeScale())||0)),At(t,e,"_first","_last",t._sort?"_start":0),$t(e)||(t._recent=e),n||Yt(t,e),t._ts<0&&Gt(t,t._tTime),t},Vt=function(t,e){return(U.ScrollTrigger||Z("scrollTrigger",e))&&U.ScrollTrigger.create(e,t)},jt=function(t,e,i,n,s){return Ue(t,e,s),t._initted?!i&&t._pt&&!o&&(t._dur&&!1!==t.vars.lazy||!t._dur&&t.vars.lazy)&&p!==Me.frame?(ot.push(t),t._lazy=[s,n],1):void 0:1},Wt=function t(e){var i=e.parent;return i&&i._ts&&i._initted&&!i._lock&&(i.rawTime()<0||t(i))},$t=function(t){var e=t.data;return"isFromStart"===e||"isStart"===e},Xt=function(t,e,i,n){var s=t._repeat,r=yt(e)||0,o=t._tTime/t._tDur;return o&&!n&&(t._time*=r/t._dur),t._dur=r,t._tDur=s?s<0?1e10:yt(r*(s+1)+t._rDelay*s):r,o>0&&!n&&Gt(t,t._tTime=t._tDur*o),t.parent&&Ht(t),i||Lt(t.parent,t),t},qt=function(t){return t instanceof Ve?Lt(t):Xt(t,t._dur)},Ut={_start:0,endTime:et,totalDuration:et},Kt=function t(e,i,n){var s,r,o,a=e.labels,l=e._recent||Ut,c=e.duration()>=S?l.endTime(!1):e._dur;return P(i)&&(isNaN(i)||i in a)?(r=i.charAt(0),o="%"===i.substr(-1),s=i.indexOf("="),"<"===r||">"===r?(s>=0&&(i=i.replace(/=/,"")),("<"===r?l._start:l.endTime(l._repeat>=0))+(parseFloat(i.substr(1))||0)*(o?(s<0?l:n).totalDuration()/100:1)):s<0?(i in a||(a[i]=c),a[i]):(r=parseFloat(i.charAt(s-1)+i.substr(s+1)),o&&n&&(r=r/100*(Y(n)?n[0]:n).totalDuration()),s>1?t(e,i.substr(0,s-1),n)+r:c+r)):null==i?c:+i},Jt=function(t,e,i){var n,s,r=D(e[1]),o=(r?2:1)+(t<2?0:1),a=e[o];if(r&&(a.duration=e[1]),a.parent=i,t){for(n=a,s=i;s&&!("immediateRender"in n);)n=s.vars.defaults||{},s=F(s.vars.inherit)&&s.parent;a.immediateRender=F(n.immediateRender),t<2?a.runBackwards=1:a.startAt=e[o-1]}return new ti(e[0],a,e[o+1])},Zt=function(t,e){return t||0===t?e(t):e},Qt=function(t,e,i){return i<t?t:i>e?e:i},te=function(t,e){return P(t)&&(e=q.exec(t))?e[1]:""},ee=[].slice,ie=function(t,e){return t&&B(t)&&"length"in t&&(!e&&!t.length||t.length-1 in t&&B(t[0]))&&!t.nodeType&&t!==c},ne=function(t,e,i){return void 0===i&&(i=[]),t.forEach((function(t){var n;return P(t)&&!e||ie(t,1)?(n=i).push.apply(n,se(t)):i.push(t)}))||i},se=function(t,e,i){return a&&!e&&a.selector?a.selector(t):!P(t)||i||!d&&Oe()?Y(t)?ne(t,i):ie(t)?ee.call(t,0):t?[t]:[]:ee.call((e||u).querySelectorAll(t),0)},re=function(t){return t=se(t)[0]||Q("Invalid scope")||{},function(e){var i=t.current||t.nativeElement||t;return se(e,i.querySelectorAll?i:i===t?Q("Invalid scope")||u.createElement("div"):t)}},oe=function(t){return t.sort((function(){return.5-Math.random()}))},ae=function(t){if(L(t))return t;var e=B(t)?t:{each:t},i=Be(e.ease),n=e.from||0,s=parseFloat(e.base)||0,r={},o=n>0&&n<1,a=isNaN(n)||o,l=e.axis,c=n,d=n;return P(n)?c=d={center:.5,edges:.5,end:1}[n]||0:!o&&a&&(c=n[0],d=n[1]),function(t,o,u){var h,p,f,g,m,v,y,b,w,_=(u||e).length,x=r[_];if(!x){if(!(w="auto"===e.grid?0:(e.grid||[1,S])[1])){for(y=-S;y<(y=u[w++].getBoundingClientRect().left)&&w<_;);w<_&&w--}for(x=r[_]=[],h=a?Math.min(w,_)*c-.5:n%w,p=w===S?0:a?_*d/w-.5:n/w|0,y=0,b=S,v=0;v<_;v++)f=v%w-h,g=p-(v/w|0),x[v]=m=l?Math.abs("y"===l?g:f):O(f*f+g*g),m>y&&(y=m),m<b&&(b=m);"random"===n&&oe(x),x.max=y-b,x.min=b,x.v=_=(parseFloat(e.amount)||parseFloat(e.each)*(w>_?_-1:l?"y"===l?_/w:w:Math.max(w,_/w))||0)*("edges"===n?-1:1),x.b=_<0?s-_:s,x.u=te(e.amount||e.each)||0,i=i&&_<0?De(i):i}return _=(x[t]-x.min)/x.max||0,yt(x.b+(i?i(_):_)*x.v)+x.u}},le=function(t){var e=Math.pow(10,((t+"").split(".")[1]||"").length);return function(i){var n=yt(Math.round(parseFloat(i)/t)*t*e);return(n-n%1)/e+(D(i)?0:te(i))}},ce=function(t,e){var i,n,s=Y(t);return!s&&B(t)&&(i=s=t.radius||S,t.values?(t=se(t.values),(n=!D(t[0]))&&(i*=i)):t=le(t.increment)),Zt(e,s?L(t)?function(e){return n=t(e),Math.abs(n-e)<=i?n:e}:function(e){for(var s,r,o=parseFloat(n?e.x:e),a=parseFloat(n?e.y:0),l=S,c=0,d=t.length;d--;)(s=n?(s=t[d].x-o)*s+(r=t[d].y-a)*r:Math.abs(t[d]-o))<l&&(l=s,c=d);return c=!i||l<=i?t[c]:e,n||c===e||D(e)?c:c+te(e)}:le(t))},de=function(t,e,i,n){return Zt(Y(t)?!e:!0===i?!!(i=0):!n,(function(){return Y(t)?t[~~(Math.random()*t.length)]:(i=i||1e-5)&&(n=i<1?Math.pow(10,(i+"").length-2):1)&&Math.floor(Math.round((t-i/2+Math.random()*(e-t+.99*i))/i)*i*n)/n}))},ue=function(t,e,i){return Zt(i,(function(i){return t[~~e(i)]}))},he=function(t){for(var e,i,n,s,r=0,o="";~(e=t.indexOf("random(",r));)n=t.indexOf(")",e),s="["===t.charAt(e+7),i=t.substr(e+7,n-e-7).match(s?X:N),o+=t.substr(r,e-r)+de(s?i:+i[0],s?0:+i[1],+i[2]||1e-5),r=n+1;return o+t.substr(r,t.length-r)},pe=function(t,e,i,n,s){var r=e-t,o=n-i;return Zt(s,(function(e){return i+((e-t)/r*o||0)}))},fe=function(t,e,i){var n,s,r,o=t.labels,a=S;for(n in o)(s=o[n]-e)<0==!!i&&s&&a>(s=Math.abs(s))&&(r=n,a=s);return r},ge=function(t,e,i){var n,s,r,o=t.vars,l=o[e],c=a,d=t._ctx;if(l)return n=o[e+"Params"],s=o.callbackScope||t,i&&ot.length&&_t(),d&&(a=d),r=n?l.apply(s,n):l.call(s),a=c,r},me=function(t){return Pt(t),t.scrollTrigger&&t.scrollTrigger.kill(!!o),t.progress()<1&&ge(t,"onInterrupt"),t},ve=[],ye=function(t){if(t)if(t=!t.name&&t.default||t,R()||t.headless){var e=t.name,i=L(t),n=e&&!i&&t.init?function(){this._props=[]}:t,s={init:et,render:ci,add:Xe,kill:ui,modifier:di,rawVars:0},r={targetTest:0,get:0,getSetter:ri,aliases:{},register:0};if(Oe(),t!==n){if(lt[e])return;Et(n,Et(Mt(t,s),r)),Ct(n.prototype,Ct(s,Mt(t,r))),lt[n.prop=e]=n,t.targetTest&&(ut.push(n),rt[e]=1),e=("css"===e?"CSS":e.charAt(0).toUpperCase()+e.substr(1))+"Plugin"}tt(e,n),t.register&&t.register(ki,n,fi)}else ve.push(t)},be=255,we={aqua:[0,be,be],lime:[0,be,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,be],navy:[0,0,128],white:[be,be,be],olive:[128,128,0],yellow:[be,be,0],orange:[be,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[be,0,0],pink:[be,192,203],cyan:[0,be,be],transparent:[be,be,be,0]},_e=function(t,e,i){return(6*(t+=t<0?1:t>1?-1:0)<1?e+(i-e)*t*6:t<.5?i:3*t<2?e+(i-e)*(2/3-t)*6:e)*be+.5|0},xe=function(t,e,i){var n,s,r,o,a,l,c,d,u,h,p=t?D(t)?[t>>16,t>>8&be,t&be]:0:we.black;if(!p){if(","===t.substr(-1)&&(t=t.substr(0,t.length-1)),we[t])p=we[t];else if("#"===t.charAt(0)){if(t.length<6&&(n=t.charAt(1),s=t.charAt(2),r=t.charAt(3),t="#"+n+n+s+s+r+r+(5===t.length?t.charAt(4)+t.charAt(4):"")),9===t.length)return[(p=parseInt(t.substr(1,6),16))>>16,p>>8&be,p&be,parseInt(t.substr(7),16)/255];p=[(t=parseInt(t.substr(1),16))>>16,t>>8&be,t&be]}else if("hsl"===t.substr(0,3))if(p=h=t.match(N),e){if(~t.indexOf("="))return p=t.match(V),i&&p.length<4&&(p[3]=1),p}else o=+p[0]%360/360,a=+p[1]/100,n=2*(l=+p[2]/100)-(s=l<=.5?l*(a+1):l+a-l*a),p.length>3&&(p[3]*=1),p[0]=_e(o+1/3,n,s),p[1]=_e(o,n,s),p[2]=_e(o-1/3,n,s);else p=t.match(N)||we.transparent;p=p.map(Number)}return e&&!h&&(n=p[0]/be,s=p[1]/be,r=p[2]/be,l=((c=Math.max(n,s,r))+(d=Math.min(n,s,r)))/2,c===d?o=a=0:(u=c-d,a=l>.5?u/(2-c-d):u/(c+d),o=c===n?(s-r)/u+(s<r?6:0):c===s?(r-n)/u+2:(n-s)/u+4,o*=60),p[0]=~~(o+.5),p[1]=~~(100*a+.5),p[2]=~~(100*l+.5)),i&&p.length<4&&(p[3]=1),p},Te=function(t){var e=[],i=[],n=-1;return t.split(Ee).forEach((function(t){var s=t.match(j)||[];e.push.apply(e,s),i.push(n+=s.length+1)})),e.c=i,e},Se=function(t,e,i){var n,s,r,o,a="",l=(t+a).match(Ee),c=e?"hsla(":"rgba(",d=0;if(!l)return t;if(l=l.map((function(t){return(t=xe(t,e,1))&&c+(e?t[0]+","+t[1]+"%,"+t[2]+"%,"+t[3]:t.join(","))+")"})),i&&(r=Te(t),(n=i.c).join(a)!==r.c.join(a)))for(o=(s=t.replace(Ee,"1").split(j)).length-1;d<o;d++)a+=s[d]+(~n.indexOf(d)?l.shift()||c+"0,0,0,0)":(r.length?r:l.length?l:i).shift());if(!s)for(o=(s=t.split(Ee)).length-1;d<o;d++)a+=s[d]+l[d];return a+s[o]},Ee=function(){var t,e="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b";for(t in we)e+="|"+t+"\\b";return new RegExp(e+")","gi")}(),Ce=/hsl[a]?\(/,ke=function(t){var e,i=t.join(" ");if(Ee.lastIndex=0,Ee.test(i))return e=Ce.test(i),t[1]=Se(t[1],e),t[0]=Se(t[0],e,Te(t[1])),!0},Me=function(){var t,e,i,n,s,r,o=Date.now,a=500,l=33,p=o(),f=p,m=1e3/240,v=m,y=[],b=function i(c){var d,u,h,g,b=o()-f,w=!0===c;if((b>a||b<0)&&(p+=b-l),((d=(h=(f+=b)-p)-v)>0||w)&&(g=++n.frame,s=h-1e3*n.time,n.time=h/=1e3,v+=d+(d>=m?4:m-d),u=1),w||(t=e(i)),u)for(r=0;r<y.length;r++)y[r](h,s,g,c)};return n={time:0,frame:0,tick:function(){b(!0)},deltaRatio:function(t){return s/(1e3/(t||60))},wake:function(){h&&(!d&&R()&&(c=d=window,u=c.document||{},U.gsap=ki,(c.gsapVersions||(c.gsapVersions=[])).push(ki.version),J(K||c.GreenSockGlobals||!c.gsap&&c||{}),ve.forEach(ye)),i="undefined"!=typeof requestAnimationFrame&&requestAnimationFrame,t&&n.sleep(),e=i||function(t){return setTimeout(t,v-1e3*n.time+1|0)},g=1,b(2))},sleep:function(){(i?cancelAnimationFrame:clearTimeout)(t),g=0,e=et},lagSmoothing:function(t,e){a=t||1/0,l=Math.min(e||33,a)},fps:function(t){m=1e3/(t||240),v=1e3*n.time+m},add:function(t,e,i){var s=e?function(e,i,r,o){t(e,i,r,o),n.remove(s)}:t;return n.remove(t),y[i?"unshift":"push"](s),Oe(),s},remove:function(t,e){~(e=y.indexOf(t))&&y.splice(e,1)&&r>=e&&r--},_listeners:y}}(),Oe=function(){return!g&&Me.wake()},Ae={},Ie=/^[\d.\-M][\d.\-,\s]/,Pe=/["']/g,Le=function(t){for(var e,i,n,s={},r=t.substr(1,t.length-3).split(":"),o=r[0],a=1,l=r.length;a<l;a++)i=r[a],e=a!==l-1?i.lastIndexOf(","):i.length,n=i.substr(0,e),s[o]=isNaN(n)?n.replace(Pe,"").trim():+n,o=i.substr(e+1).trim();return s},De=function(t){return function(e){return 1-t(1-e)}},ze=function t(e,i){for(var n,s=e._first;s;)s instanceof Ve?t(s,i):!s.vars.yoyoEase||s._yoyo&&s._repeat||s._yoyo===i||(s.timeline?t(s.timeline,i):(n=s._ease,s._ease=s._yEase,s._yEase=n,s._yoyo=i)),s=s._next},Be=function(t,e){return t&&(L(t)?t:Ae[t]||function(t){var e,i,n,s,r=(t+"").split("("),o=Ae[r[0]];return o&&r.length>1&&o.config?o.config.apply(null,~t.indexOf("{")?[Le(r[1])]:(e=t,i=e.indexOf("(")+1,n=e.indexOf(")"),s=e.indexOf("(",i),e.substring(i,~s&&s<n?e.indexOf(")",n+1):n)).split(",").map(Tt)):Ae._CE&&Ie.test(t)?Ae._CE("",t):o}(t))||e},Fe=function(t,e,i,n){void 0===i&&(i=function(t){return 1-e(1-t)}),void 0===n&&(n=function(t){return t<.5?e(2*t)/2:1-e(2*(1-t))/2});var s,r={easeIn:e,easeOut:i,easeInOut:n};return mt(t,(function(t){for(var e in Ae[t]=U[t]=r,Ae[s=t.toLowerCase()]=i,r)Ae[s+("easeIn"===e?".in":"easeOut"===e?".out":".inOut")]=Ae[t+"."+e]=r[e]})),r},Re=function(t){return function(e){return e<.5?(1-t(1-2*e))/2:.5+t(2*(e-.5))/2}},He=function t(e,i,n){var s=i>=1?i:1,r=(n||(e?.3:.45))/(i<1?i:1),o=r/C*(Math.asin(1/s)||0),a=function(t){return 1===t?1:s*Math.pow(2,-10*t)*I((t-o)*r)+1},l="out"===e?a:"in"===e?function(t){return 1-a(1-t)}:Re(a);return r=C/r,l.config=function(i,n){return t(e,i,n)},l},Ge=function t(e,i){void 0===i&&(i=1.70158);var n=function(t){return t?--t*t*((i+1)*t+i)+1:0},s="out"===e?n:"in"===e?function(t){return 1-n(1-t)}:Re(n);return s.config=function(i){return t(e,i)},s};mt("Linear,Quad,Cubic,Quart,Quint,Strong",(function(t,e){var i=e<5?e+1:e;Fe(t+",Power"+(i-1),e?function(t){return Math.pow(t,i)}:function(t){return t},(function(t){return 1-Math.pow(1-t,i)}),(function(t){return t<.5?Math.pow(2*t,i)/2:1-Math.pow(2*(1-t),i)/2}))})),Ae.Linear.easeNone=Ae.none=Ae.Linear.easeIn,Fe("Elastic",He("in"),He("out"),He()),m=7.5625,b=2*(y=1/(v=2.75)),w=2.5*y,Fe("Bounce",(function(t){return 1-_(1-t)}),_=function(t){return t<y?m*t*t:t<b?m*Math.pow(t-1.5/v,2)+.75:t<w?m*(t-=2.25/v)*t+.9375:m*Math.pow(t-2.625/v,2)+.984375}),Fe("Expo",(function(t){return t?Math.pow(2,10*(t-1)):0})),Fe("Circ",(function(t){return-(O(1-t*t)-1)})),Fe("Sine",(function(t){return 1===t?1:1-A(t*k)})),Fe("Back",Ge("in"),Ge("out"),Ge()),Ae.SteppedEase=Ae.steps=U.SteppedEase={config:function(t,e){void 0===t&&(t=1);var i=1/t,n=t+(e?0:1),s=e?1:0;return function(t){return((n*Qt(0,.99999999,t)|0)+s)*i}}},T.ease=Ae["quad.out"],mt("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt",(function(t){return ht+=t+","+t+"Params,"}));var Ye=function(t,e){this.id=M++,t._gsap=this,this.target=t,this.harness=e,this.get=e?e.get:gt,this.set=e?e.getSetter:ri},Ne=function(){function t(t){this.vars=t,this._delay=+t.delay||0,(this._repeat=t.repeat===1/0?-2:t.repeat||0)&&(this._rDelay=t.repeatDelay||0,this._yoyo=!!t.yoyo||!!t.yoyoEase),this._ts=1,Xt(this,+t.duration,1,1),this.data=t.data,a&&(this._ctx=a,a.data.push(this)),g||Me.wake()}var e=t.prototype;return e.delay=function(t){return t||0===t?(this.parent&&this.parent.smoothChildTiming&&this.startTime(this._start+t-this._delay),this._delay=t,this):this._delay},e.duration=function(t){return arguments.length?this.totalDuration(this._repeat>0?t+(t+this._rDelay)*this._repeat:t):this.totalDuration()&&this._dur},e.totalDuration=function(t){return arguments.length?(this._dirty=0,Xt(this,this._repeat<0?t:(t-this._repeat*this._rDelay)/(this._repeat+1))):this._tDur},e.totalTime=function(t,e){if(Oe(),!arguments.length)return this._tTime;var i=this._dp;if(i&&i.smoothChildTiming&&this._ts){for(Gt(this,t),!i._dp||i.parent||Yt(i,this);i&&i.parent;)i.parent._time!==i._start+(i._ts>=0?i._tTime/i._ts:(i.totalDuration()-i._tTime)/-i._ts)&&i.totalTime(i._tTime,!0),i=i.parent;!this.parent&&this._dp.autoRemoveChildren&&(this._ts>0&&t<this._tDur||this._ts<0&&t>0||!this._tDur&&!t)&&Nt(this._dp,this,this._start-this._delay)}return(this._tTime!==t||!this._dur&&!e||this._initted&&Math.abs(this._zTime)===E||!t&&!this._initted&&(this.add||this._ptLookup))&&(this._ts||(this._pTime=t),xt(this,t,e)),this},e.time=function(t,e){return arguments.length?this.totalTime(Math.min(this.totalDuration(),t+Bt(this))%(this._dur+this._rDelay)||(t?this._dur:0),e):this._time},e.totalProgress=function(t,e){return arguments.length?this.totalTime(this.totalDuration()*t,e):this.totalDuration()?Math.min(1,this._tTime/this._tDur):this.rawTime()>0?1:0},e.progress=function(t,e){return arguments.length?this.totalTime(this.duration()*(!this._yoyo||1&this.iteration()?t:1-t)+Bt(this),e):this.duration()?Math.min(1,this._time/this._dur):this.rawTime()>0?1:0},e.iteration=function(t,e){var i=this.duration()+this._rDelay;return arguments.length?this.totalTime(this._time+(t-1)*i,e):this._repeat?Ft(this._tTime,i)+1:1},e.timeScale=function(t,e){if(!arguments.length)return-1e-8===this._rts?0:this._rts;if(this._rts===t)return this;var i=this.parent&&this._ts?Rt(this.parent._time,this):this._tTime;return this._rts=+t||0,this._ts=this._ps||-1e-8===t?0:this._rts,this.totalTime(Qt(-Math.abs(this._delay),this._tDur,i),!1!==e),Ht(this),function(t){for(var e=t.parent;e&&e.parent;)e._dirty=1,e.totalDuration(),e=e.parent;return t}(this)},e.paused=function(t){return arguments.length?(this._ps!==t&&(this._ps=t,t?(this._pTime=this._tTime||Math.max(-this._delay,this.rawTime()),this._ts=this._act=0):(Oe(),this._ts=this._rts,this.totalTime(this.parent&&!this.parent.smoothChildTiming?this.rawTime():this._tTime||this._pTime,1===this.progress()&&Math.abs(this._zTime)!==E&&(this._tTime-=E)))),this):this._ps},e.startTime=function(t){if(arguments.length){this._start=t;var e=this.parent||this._dp;return e&&(e._sort||!this.parent)&&Nt(e,this,t-this._delay),this}return this._start},e.endTime=function(t){return this._start+(F(t)?this.totalDuration():this.duration())/Math.abs(this._ts||1)},e.rawTime=function(t){var e=this.parent||this._dp;return e?t&&(!this._ts||this._repeat&&this._time&&this.totalProgress()<1)?this._tTime%(this._dur+this._rDelay):this._ts?Rt(e.rawTime(t),this):this._tTime:this._tTime},e.revert=function(t){void 0===t&&(t=st);var e=o;return o=t,(this._initted||this._startAt)&&(this.timeline&&this.timeline.revert(t),this.totalTime(-.01,t.suppressEvents)),"nested"!==this.data&&!1!==t.kill&&this.kill(),o=e,this},e.globalTime=function(t){for(var e=this,i=arguments.length?t:e.rawTime();e;)i=e._start+i/(Math.abs(e._ts)||1),e=e._dp;return!this.parent&&this._sat?this._sat.globalTime(t):i},e.repeat=function(t){return arguments.length?(this._repeat=t===1/0?-2:t,qt(this)):-2===this._repeat?1/0:this._repeat},e.repeatDelay=function(t){if(arguments.length){var e=this._time;return this._rDelay=t,qt(this),e?this.time(e):this}return this._rDelay},e.yoyo=function(t){return arguments.length?(this._yoyo=t,this):this._yoyo},e.seek=function(t,e){return this.totalTime(Kt(this,t),F(e))},e.restart=function(t,e){return this.play().totalTime(t?-this._delay:0,F(e))},e.play=function(t,e){return null!=t&&this.seek(t,e),this.reversed(!1).paused(!1)},e.reverse=function(t,e){return null!=t&&this.seek(t||this.totalDuration(),e),this.reversed(!0).paused(!1)},e.pause=function(t,e){return null!=t&&this.seek(t,e),this.paused(!0)},e.resume=function(){return this.paused(!1)},e.reversed=function(t){return arguments.length?(!!t!==this.reversed()&&this.timeScale(-this._rts||(t?-1e-8:0)),this):this._rts<0},e.invalidate=function(){return this._initted=this._act=0,this._zTime=-1e-8,this},e.isActive=function(){var t,e=this.parent||this._dp,i=this._start;return!(e&&!(this._ts&&this._initted&&e.isActive()&&(t=e.rawTime(!0))>=i&&t<this.endTime(!0)-E))},e.eventCallback=function(t,e,i){var n=this.vars;return arguments.length>1?(e?(n[t]=e,i&&(n[t+"Params"]=i),"onUpdate"===t&&(this._onUpdate=e)):delete n[t],this):n[t]},e.then=function(t){var e=this;return new Promise((function(i){var n=L(t)?t:St,s=function(){var t=e.then;e.then=null,L(n)&&(n=n(e))&&(n.then||n===e)&&(e.then=t),i(n),e.then=t};e._initted&&1===e.totalProgress()&&e._ts>=0||!e._tTime&&e._ts<0?s():e._prom=s}))},e.kill=function(){me(this)},t}();Et(Ne.prototype,{_time:0,_start:0,_end:0,_tTime:0,_tDur:0,_dirty:0,_repeat:0,_yoyo:!1,parent:null,_initted:!1,_rDelay:0,_ts:1,_dp:0,ratio:0,_zTime:-1e-8,_prom:0,_ps:!1,_rts:1});var Ve=function(t){function e(e,i){var s;return void 0===e&&(e={}),(s=t.call(this,e)||this).labels={},s.smoothChildTiming=!!e.smoothChildTiming,s.autoRemoveChildren=!!e.autoRemoveChildren,s._sort=F(e.sortChildren),l&&Nt(e.parent||l,n(s),i),e.reversed&&s.reverse(),e.paused&&s.paused(!0),e.scrollTrigger&&Vt(n(s),e.scrollTrigger),s}s(e,t);var i=e.prototype;return i.to=function(t,e,i){return Jt(0,arguments,this),this},i.from=function(t,e,i){return Jt(1,arguments,this),this},i.fromTo=function(t,e,i,n){return Jt(2,arguments,this),this},i.set=function(t,e,i){return e.duration=0,e.parent=this,Ot(e).repeatDelay||(e.repeat=0),e.immediateRender=!!e.immediateRender,new ti(t,e,Kt(this,i),1),this},i.call=function(t,e,i){return Nt(this,ti.delayedCall(0,t,e),i)},i.staggerTo=function(t,e,i,n,s,r,o){return i.duration=e,i.stagger=i.stagger||n,i.onComplete=r,i.onCompleteParams=o,i.parent=this,new ti(t,i,Kt(this,s)),this},i.staggerFrom=function(t,e,i,n,s,r,o){return i.runBackwards=1,Ot(i).immediateRender=F(i.immediateRender),this.staggerTo(t,e,i,n,s,r,o)},i.staggerFromTo=function(t,e,i,n,s,r,o,a){return n.startAt=i,Ot(n).immediateRender=F(n.immediateRender),this.staggerTo(t,e,n,s,r,o,a)},i.render=function(t,e,i){var n,s,r,a,c,d,u,h,p,f,g,m,v=this._time,y=this._dirty?this.totalDuration():this._tDur,b=this._dur,w=t<=0?0:yt(t),_=this._zTime<0!=t<0&&(this._initted||!b);if(this!==l&&w>y&&t>=0&&(w=y),w!==this._tTime||i||_){if(v!==this._time&&b&&(w+=this._time-v,t+=this._time-v),n=w,p=this._start,d=!(h=this._ts),_&&(b||(v=this._zTime),(t||!e)&&(this._zTime=t)),this._repeat){if(g=this._yoyo,c=b+this._rDelay,this._repeat<-1&&t<0)return this.totalTime(100*c+t,e,i);if(n=yt(w%c),w===y?(a=this._repeat,n=b):((a=~~(w/c))&&a===w/c&&(n=b,a--),n>b&&(n=b)),f=Ft(this._tTime,c),!v&&this._tTime&&f!==a&&this._tTime-f*c-this._dur<=0&&(f=a),g&&1&a&&(n=b-n,m=1),a!==f&&!this._lock){var x=g&&1&f,T=x===(g&&1&a);if(a<f&&(x=!x),v=x?0:w%b?b:w,this._lock=1,this.render(v||(m?0:yt(a*c)),e,!b)._lock=0,this._tTime=w,!e&&this.parent&&ge(this,"onRepeat"),this.vars.repeatRefresh&&!m&&(this.invalidate()._lock=1),v&&v!==this._time||d!==!this._ts||this.vars.onRepeat&&!this.parent&&!this._act)return this;if(b=this._dur,y=this._tDur,T&&(this._lock=2,v=x?b:-1e-4,this.render(v,!0),this.vars.repeatRefresh&&!m&&this.invalidate()),this._lock=0,!this._ts&&!d)return this;ze(this,m)}}if(this._hasPause&&!this._forcing&&this._lock<2&&(u=function(t,e,i){var n;if(i>e)for(n=t._first;n&&n._start<=i;){if("isPause"===n.data&&n._start>e)return n;n=n._next}else for(n=t._last;n&&n._start>=i;){if("isPause"===n.data&&n._start<e)return n;n=n._prev}}(this,yt(v),yt(n)),u&&(w-=n-(n=u._start))),this._tTime=w,this._time=n,this._act=!h,this._initted||(this._onUpdate=this.vars.onUpdate,this._initted=1,this._zTime=t,v=0),!v&&n&&!e&&!a&&(ge(this,"onStart"),this._tTime!==w))return this;if(n>=v&&t>=0)for(s=this._first;s;){if(r=s._next,(s._act||n>=s._start)&&s._ts&&u!==s){if(s.parent!==this)return this.render(t,e,i);if(s.render(s._ts>0?(n-s._start)*s._ts:(s._dirty?s.totalDuration():s._tDur)+(n-s._start)*s._ts,e,i),n!==this._time||!this._ts&&!d){u=0,r&&(w+=this._zTime=-1e-8);break}}s=r}else{s=this._last;for(var S=t<0?t:n;s;){if(r=s._prev,(s._act||S<=s._end)&&s._ts&&u!==s){if(s.parent!==this)return this.render(t,e,i);if(s.render(s._ts>0?(S-s._start)*s._ts:(s._dirty?s.totalDuration():s._tDur)+(S-s._start)*s._ts,e,i||o&&(s._initted||s._startAt)),n!==this._time||!this._ts&&!d){u=0,r&&(w+=this._zTime=S?-1e-8:E);break}}s=r}}if(u&&!e&&(this.pause(),u.render(n>=v?0:-1e-8)._zTime=n>=v?1:-1,this._ts))return this._start=p,Ht(this),this.render(t,e,i);this._onUpdate&&!e&&ge(this,"onUpdate",!0),(w===y&&this._tTime>=this.totalDuration()||!w&&v)&&(p!==this._start&&Math.abs(h)===Math.abs(this._ts)||this._lock||((t||!b)&&(w===y&&this._ts>0||!w&&this._ts<0)&&Pt(this,1),e||t<0&&!v||!w&&!v&&y||(ge(this,w===y&&t>=0?"onComplete":"onReverseComplete",!0),this._prom&&!(w<y&&this.timeScale()>0)&&this._prom())))}return this},i.add=function(t,e){var i=this;if(D(e)||(e=Kt(this,e,t)),!(t instanceof Ne)){if(Y(t))return t.forEach((function(t){return i.add(t,e)})),this;if(P(t))return this.addLabel(t,e);if(!L(t))return this;t=ti.delayedCall(0,t)}return this!==t?Nt(this,t,e):this},i.getChildren=function(t,e,i,n){void 0===t&&(t=!0),void 0===e&&(e=!0),void 0===i&&(i=!0),void 0===n&&(n=-S);for(var s=[],r=this._first;r;)r._start>=n&&(r instanceof ti?e&&s.push(r):(i&&s.push(r),t&&s.push.apply(s,r.getChildren(!0,e,i)))),r=r._next;return s},i.getById=function(t){for(var e=this.getChildren(1,1,1),i=e.length;i--;)if(e[i].vars.id===t)return e[i]},i.remove=function(t){return P(t)?this.removeLabel(t):L(t)?this.killTweensOf(t):(It(this,t),t===this._recent&&(this._recent=this._last),Lt(this))},i.totalTime=function(e,i){return arguments.length?(this._forcing=1,!this._dp&&this._ts&&(this._start=yt(Me.time-(this._ts>0?e/this._ts:(this.totalDuration()-e)/-this._ts))),t.prototype.totalTime.call(this,e,i),this._forcing=0,this):this._tTime},i.addLabel=function(t,e){return this.labels[t]=Kt(this,e),this},i.removeLabel=function(t){return delete this.labels[t],this},i.addPause=function(t,e,i){var n=ti.delayedCall(0,e||et,i);return n.data="isPause",this._hasPause=1,Nt(this,n,Kt(this,t))},i.removePause=function(t){var e=this._first;for(t=Kt(this,t);e;)e._start===t&&"isPause"===e.data&&Pt(e),e=e._next},i.killTweensOf=function(t,e,i){for(var n=this.getTweensOf(t,i),s=n.length;s--;)je!==n[s]&&n[s].kill(t,e);return this},i.getTweensOf=function(t,e){for(var i,n=[],s=se(t),r=this._first,o=D(e);r;)r instanceof ti?wt(r._targets,s)&&(o?(!je||r._initted&&r._ts)&&r.globalTime(0)<=e&&r.globalTime(r.totalDuration())>e:!e||r.isActive())&&n.push(r):(i=r.getTweensOf(s,e)).length&&n.push.apply(n,i),r=r._next;return n},i.tweenTo=function(t,e){e=e||{};var i,n=this,s=Kt(n,t),r=e,o=r.startAt,a=r.onStart,l=r.onStartParams,c=r.immediateRender,d=ti.to(n,Et({ease:e.ease||"none",lazy:!1,immediateRender:!1,time:s,overwrite:"auto",duration:e.duration||Math.abs((s-(o&&"time"in o?o.time:n._time))/n.timeScale())||E,onStart:function(){if(n.pause(),!i){var t=e.duration||Math.abs((s-(o&&"time"in o?o.time:n._time))/n.timeScale());d._dur!==t&&Xt(d,t,0,1).render(d._time,!0,!0),i=1}a&&a.apply(d,l||[])}},e));return c?d.render(0):d},i.tweenFromTo=function(t,e,i){return this.tweenTo(e,Et({startAt:{time:Kt(this,t)}},i))},i.recent=function(){return this._recent},i.nextLabel=function(t){return void 0===t&&(t=this._time),fe(this,Kt(this,t))},i.previousLabel=function(t){return void 0===t&&(t=this._time),fe(this,Kt(this,t),1)},i.currentLabel=function(t){return arguments.length?this.seek(t,!0):this.previousLabel(this._time+E)},i.shiftChildren=function(t,e,i){void 0===i&&(i=0);for(var n,s=this._first,r=this.labels;s;)s._start>=i&&(s._start+=t,s._end+=t),s=s._next;if(e)for(n in r)r[n]>=i&&(r[n]+=t);return Lt(this)},i.invalidate=function(e){var i=this._first;for(this._lock=0;i;)i.invalidate(e),i=i._next;return t.prototype.invalidate.call(this,e)},i.clear=function(t){void 0===t&&(t=!0);for(var e,i=this._first;i;)e=i._next,this.remove(i),i=e;return this._dp&&(this._time=this._tTime=this._pTime=0),t&&(this.labels={}),Lt(this)},i.totalDuration=function(t){var e,i,n,s=0,r=this,o=r._last,a=S;if(arguments.length)return r.timeScale((r._repeat<0?r.duration():r.totalDuration())/(r.reversed()?-t:t));if(r._dirty){for(n=r.parent;o;)e=o._prev,o._dirty&&o.totalDuration(),(i=o._start)>a&&r._sort&&o._ts&&!r._lock?(r._lock=1,Nt(r,o,i-o._delay,1)._lock=0):a=i,i<0&&o._ts&&(s-=i,(!n&&!r._dp||n&&n.smoothChildTiming)&&(r._start+=i/r._ts,r._time-=i,r._tTime-=i),r.shiftChildren(-i,!1,-Infinity),a=0),o._end>s&&o._ts&&(s=o._end),o=e;Xt(r,r===l&&r._time>s?r._time:s,1,1),r._dirty=0}return r._tDur},e.updateRoot=function(t){if(l._ts&&(xt(l,Rt(t,l)),p=Me.frame),Me.frame>=dt){dt+=x.autoSleep||120;var e=l._first;if((!e||!e._ts)&&x.autoSleep&&Me._listeners.length<2){for(;e&&!e._ts;)e=e._next;e||Me.sleep()}}},e}(Ne);Et(Ve.prototype,{_lock:0,_hasPause:0,_forcing:0});var je,We,$e=function(t,e,i,n,s,r,o){var a,l,c,d,u,h,p,f,g=new fi(this._pt,t,e,0,1,li,null,s),m=0,v=0;for(g.b=i,g.e=n,i+="",(p=~(n+="").indexOf("random("))&&(n=he(n)),r&&(r(f=[i,n],t,e),i=f[0],n=f[1]),l=i.match(W)||[];a=W.exec(n);)d=a[0],u=n.substring(m,a.index),c?c=(c+1)%5:"rgba("===u.substr(-5)&&(c=1),d!==l[v++]&&(h=parseFloat(l[v-1])||0,g._pt={_next:g._pt,p:u||1===v?u:",",s:h,c:"="===d.charAt(1)?bt(h,d)-h:parseFloat(d)-h,m:c&&c<4?Math.round:0},m=W.lastIndex);return g.c=m<n.length?n.substring(m,n.length):"",g.fp=o,($.test(n)||p)&&(g.e=0),this._pt=g,g},Xe=function(t,e,i,n,s,r,o,a,l,c){L(n)&&(n=n(s||0,t,r));var d,u=t[e],h="get"!==i?i:L(u)?l?t[e.indexOf("set")||!L(t["get"+e.substr(3)])?e:"get"+e.substr(3)](l):t[e]():u,p=L(u)?l?ni:ii:ei;if(P(n)&&(~n.indexOf("random(")&&(n=he(n)),"="===n.charAt(1)&&((d=bt(h,n)+(te(h)||0))||0===d)&&(n=d)),!c||h!==n||We)return isNaN(h*n)||""===n?(!u&&!(e in t)&&Z(e,n),$e.call(this,t,e,h,n,p,a||x.stringFilter,l)):(d=new fi(this._pt,t,e,+h||0,n-(h||0),"boolean"==typeof u?ai:oi,0,p),l&&(d.fp=l),o&&d.modifier(o,this,t),this._pt=d)},qe=function(t,e,i,n,s,r){var o,a,l,c;if(lt[t]&&!1!==(o=new lt[t]).init(s,o.rawVars?e[t]:function(t,e,i,n,s){if(L(t)&&(t=Je(t,s,e,i,n)),!B(t)||t.style&&t.nodeType||Y(t)||G(t))return P(t)?Je(t,s,e,i,n):t;var r,o={};for(r in t)o[r]=Je(t[r],s,e,i,n);return o}(e[t],n,s,r,i),i,n,r)&&(i._pt=a=new fi(i._pt,s,t,0,1,o.render,o,0,o.priority),i!==f))for(l=i._ptLookup[i._targets.indexOf(s)],c=o._props.length;c--;)l[o._props[c]]=a;return o},Ue=function t(e,i,n){var s,a,c,d,u,h,p,f,g,m,v,y,b,w=e.vars,_=w.ease,x=w.startAt,C=w.immediateRender,k=w.lazy,M=w.onUpdate,O=w.runBackwards,A=w.yoyoEase,I=w.keyframes,P=w.autoRevert,L=e._dur,D=e._startAt,z=e._targets,B=e.parent,R=B&&"nested"===B.data?B.vars.targets:z,H="auto"===e._overwrite&&!r,G=e.timeline;if(G&&(!I||!_)&&(_="none"),e._ease=Be(_,T.ease),e._yEase=A?De(Be(!0===A?_:A,T.ease)):0,A&&e._yoyo&&!e._repeat&&(A=e._yEase,e._yEase=e._ease,e._ease=A),e._from=!G&&!!w.runBackwards,!G||I&&!w.stagger){if(y=(f=z[0]?ft(z[0]).harness:0)&&w[f.prop],s=Mt(w,rt),D&&(D._zTime<0&&D.progress(1),i<0&&O&&C&&!P?D.render(-1,!0):D.revert(O&&L?nt:it),D._lazy=0),x){if(Pt(e._startAt=ti.set(z,Et({data:"isStart",overwrite:!1,parent:B,immediateRender:!0,lazy:!D&&F(k),startAt:null,delay:0,onUpdate:M&&function(){return ge(e,"onUpdate")},stagger:0},x))),e._startAt._dp=0,e._startAt._sat=e,i<0&&(o||!C&&!P)&&e._startAt.revert(nt),C&&L&&i<=0&&n<=0)return void(i&&(e._zTime=i))}else if(O&&L&&!D)if(i&&(C=!1),c=Et({overwrite:!1,data:"isFromStart",lazy:C&&!D&&F(k),immediateRender:C,stagger:0,parent:B},s),y&&(c[f.prop]=y),Pt(e._startAt=ti.set(z,c)),e._startAt._dp=0,e._startAt._sat=e,i<0&&(o?e._startAt.revert(nt):e._startAt.render(-1,!0)),e._zTime=i,C){if(!i)return}else t(e._startAt,E,E);for(e._pt=e._ptCache=0,k=L&&F(k)||k&&!L,a=0;a<z.length;a++){if(p=(u=z[a])._gsap||pt(z)[a]._gsap,e._ptLookup[a]=m={},at[p.id]&&ot.length&&_t(),v=R===z?a:R.indexOf(u),f&&!1!==(g=new f).init(u,y||s,e,v,R)&&(e._pt=d=new fi(e._pt,u,g.name,0,1,g.render,g,0,g.priority),g._props.forEach((function(t){m[t]=d})),g.priority&&(h=1)),!f||y)for(c in s)lt[c]&&(g=qe(c,s,e,v,u,R))?g.priority&&(h=1):m[c]=d=Xe.call(e,u,c,"get",s[c],v,R,0,w.stringFilter);e._op&&e._op[a]&&e.kill(u,e._op[a]),H&&e._pt&&(je=e,l.killTweensOf(u,m,e.globalTime(i)),b=!e.parent,je=0),e._pt&&k&&(at[p.id]=1)}h&&pi(e),e._onInit&&e._onInit(e)}e._onUpdate=M,e._initted=(!e._op||e._pt)&&!b,I&&i<=0&&G.render(S,!0,!0)},Ke=function(t,e,i,n){var s,r,o=e.ease||n||"power1.inOut";if(Y(e))r=i[t]||(i[t]=[]),e.forEach((function(t,i){return r.push({t:i/(e.length-1)*100,v:t,e:o})}));else for(s in e)r=i[s]||(i[s]=[]),"ease"===s||r.push({t:parseFloat(t),v:e[s],e:o})},Je=function(t,e,i,n,s){return L(t)?t.call(e,i,n,s):P(t)&&~t.indexOf("random(")?he(t):t},Ze=ht+"repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase,autoRevert",Qe={};mt(Ze+",id,stagger,delay,duration,paused,scrollTrigger",(function(t){return Qe[t]=1}));var ti=function(t){function e(e,i,s,o){var a;"number"==typeof i&&(s.duration=i,i=s,s=null);var c,d,u,h,p,f,g,m,v=(a=t.call(this,o?i:Ot(i))||this).vars,y=v.duration,b=v.delay,w=v.immediateRender,_=v.stagger,T=v.overwrite,S=v.keyframes,E=v.defaults,C=v.scrollTrigger,k=v.yoyoEase,M=i.parent||l,O=(Y(e)||G(e)?D(e[0]):"length"in i)?[e]:se(e);if(a._targets=O.length?pt(O):Q("GSAP target "+e+" not found. https://gsap.com",!x.nullTargetWarn)||[],a._ptLookup=[],a._overwrite=T,S||_||H(y)||H(b)){if(i=a.vars,(c=a.timeline=new Ve({data:"nested",defaults:E||{},targets:M&&"nested"===M.data?M.vars.targets:O})).kill(),c.parent=c._dp=n(a),c._start=0,_||H(y)||H(b)){if(h=O.length,g=_&&ae(_),B(_))for(p in _)~Ze.indexOf(p)&&(m||(m={}),m[p]=_[p]);for(d=0;d<h;d++)(u=Mt(i,Qe)).stagger=0,k&&(u.yoyoEase=k),m&&Ct(u,m),f=O[d],u.duration=+Je(y,n(a),d,f,O),u.delay=(+Je(b,n(a),d,f,O)||0)-a._delay,!_&&1===h&&u.delay&&(a._delay=b=u.delay,a._start+=b,u.delay=0),c.to(f,u,g?g(d,f,O):0),c._ease=Ae.none;c.duration()?y=b=0:a.timeline=0}else if(S){Ot(Et(c.vars.defaults,{ease:"none"})),c._ease=Be(S.ease||i.ease||"none");var A,I,P,L=0;if(Y(S))S.forEach((function(t){return c.to(O,t,">")})),c.duration();else{for(p in u={},S)"ease"===p||"easeEach"===p||Ke(p,S[p],u,S.easeEach);for(p in u)for(A=u[p].sort((function(t,e){return t.t-e.t})),L=0,d=0;d<A.length;d++)(P={ease:(I=A[d]).e,duration:(I.t-(d?A[d-1].t:0))/100*y})[p]=I.v,c.to(O,P,L),L+=P.duration;c.duration()<y&&c.to({},{duration:y-c.duration()})}}y||a.duration(y=c.duration())}else a.timeline=0;return!0!==T||r||(je=n(a),l.killTweensOf(O),je=0),Nt(M,n(a),s),i.reversed&&a.reverse(),i.paused&&a.paused(!0),(w||!y&&!S&&a._start===yt(M._time)&&F(w)&&zt(n(a))&&"nested"!==M.data)&&(a._tTime=-1e-8,a.render(Math.max(0,-b)||0)),C&&Vt(n(a),C),a}s(e,t);var i=e.prototype;return i.render=function(t,e,i){var n,s,r,a,l,c,d,u,h,p=this._time,f=this._tDur,g=this._dur,m=t<0,v=t>f-E&&!m?f:t<E?0:t;if(g){if(v!==this._tTime||!t||i||!this._initted&&this._tTime||this._startAt&&this._zTime<0!==m){if(n=v,u=this.timeline,this._repeat){if(a=g+this._rDelay,this._repeat<-1&&m)return this.totalTime(100*a+t,e,i);if(n=yt(v%a),v===f?(r=this._repeat,n=g):((r=~~(v/a))&&r===yt(v/a)&&(n=g,r--),n>g&&(n=g)),(c=this._yoyo&&1&r)&&(h=this._yEase,n=g-n),l=Ft(this._tTime,a),n===p&&!i&&this._initted&&r===l)return this._tTime=v,this;r!==l&&(u&&this._yEase&&ze(u,c),this.vars.repeatRefresh&&!c&&!this._lock&&this._time!==a&&this._initted&&(this._lock=i=1,this.render(yt(a*r),!0).invalidate()._lock=0))}if(!this._initted){if(jt(this,m?t:n,i,e,v))return this._tTime=0,this;if(!(p===this._time||i&&this.vars.repeatRefresh&&r!==l))return this;if(g!==this._dur)return this.render(t,e,i)}if(this._tTime=v,this._time=n,!this._act&&this._ts&&(this._act=1,this._lazy=0),this.ratio=d=(h||this._ease)(n/g),this._from&&(this.ratio=d=1-d),n&&!p&&!e&&!r&&(ge(this,"onStart"),this._tTime!==v))return this;for(s=this._pt;s;)s.r(d,s.d),s=s._next;u&&u.render(t<0?t:u._dur*u._ease(n/this._dur),e,i)||this._startAt&&(this._zTime=t),this._onUpdate&&!e&&(m&&Dt(this,t,0,i),ge(this,"onUpdate")),this._repeat&&r!==l&&this.vars.onRepeat&&!e&&this.parent&&ge(this,"onRepeat"),v!==this._tDur&&v||this._tTime!==v||(m&&!this._onUpdate&&Dt(this,t,0,!0),(t||!g)&&(v===this._tDur&&this._ts>0||!v&&this._ts<0)&&Pt(this,1),e||m&&!p||!(v||p||c)||(ge(this,v===f?"onComplete":"onReverseComplete",!0),this._prom&&!(v<f&&this.timeScale()>0)&&this._prom()))}}else!function(t,e,i,n){var s,r,a,l=t.ratio,c=e<0||!e&&(!t._start&&Wt(t)&&(t._initted||!$t(t))||(t._ts<0||t._dp._ts<0)&&!$t(t))?0:1,d=t._rDelay,u=0;if(d&&t._repeat&&(u=Qt(0,t._tDur,e),r=Ft(u,d),t._yoyo&&1&r&&(c=1-c),r!==Ft(t._tTime,d)&&(l=1-c,t.vars.repeatRefresh&&t._initted&&t.invalidate())),c!==l||o||n||t._zTime===E||!e&&t._zTime){if(!t._initted&&jt(t,e,n,i,u))return;for(a=t._zTime,t._zTime=e||(i?E:0),i||(i=e&&!a),t.ratio=c,t._from&&(c=1-c),t._time=0,t._tTime=u,s=t._pt;s;)s.r(c,s.d),s=s._next;e<0&&Dt(t,e,0,!0),t._onUpdate&&!i&&ge(t,"onUpdate"),u&&t._repeat&&!i&&t.parent&&ge(t,"onRepeat"),(e>=t._tDur||e<0)&&t.ratio===c&&(c&&Pt(t,1),i||o||(ge(t,c?"onComplete":"onReverseComplete",!0),t._prom&&t._prom()))}else t._zTime||(t._zTime=e)}(this,t,e,i);return this},i.targets=function(){return this._targets},i.invalidate=function(e){return(!e||!this.vars.runBackwards)&&(this._startAt=0),this._pt=this._op=this._onUpdate=this._lazy=this.ratio=0,this._ptLookup=[],this.timeline&&this.timeline.invalidate(e),t.prototype.invalidate.call(this,e)},i.resetTo=function(t,e,i,n,s){g||Me.wake(),this._ts||this.play();var r=Math.min(this._dur,(this._dp._time-this._start)*this._ts);return this._initted||Ue(this,r),function(t,e,i,n,s,r,o,a){var l,c,d,u,h=(t._pt&&t._ptCache||(t._ptCache={}))[e];if(!h)for(h=t._ptCache[e]=[],d=t._ptLookup,u=t._targets.length;u--;){if((l=d[u][e])&&l.d&&l.d._pt)for(l=l.d._pt;l&&l.p!==e&&l.fp!==e;)l=l._next;if(!l)return We=1,t.vars[e]="+=0",Ue(t,o),We=0,a?Q(e+" not eligible for reset"):1;h.push(l)}for(u=h.length;u--;)(l=(c=h[u])._pt||c).s=!n&&0!==n||s?l.s+(n||0)+r*l.c:n,l.c=i-l.s,c.e&&(c.e=vt(i)+te(c.e)),c.b&&(c.b=l.s+te(c.b))}(this,t,e,i,n,this._ease(r/this._dur),r,s)?this.resetTo(t,e,i,n,1):(Gt(this,0),this.parent||At(this._dp,this,"_first","_last",this._dp._sort?"_start":0),this.render(0))},i.kill=function(t,e){if(void 0===e&&(e="all"),!(t||e&&"all"!==e))return this._lazy=this._pt=0,this.parent?me(this):this;if(this.timeline){var i=this.timeline.totalDuration();return this.timeline.killTweensOf(t,e,je&&!0!==je.vars.overwrite)._first||me(this),this.parent&&i!==this.timeline.totalDuration()&&Xt(this,this._dur*this.timeline._tDur/i,0,1),this}var n,s,r,o,a,l,c,d=this._targets,u=t?se(t):d,h=this._ptLookup,p=this._pt;if((!e||"all"===e)&&function(t,e){for(var i=t.length,n=i===e.length;n&&i--&&t[i]===e[i];);return i<0}(d,u))return"all"===e&&(this._pt=0),me(this);for(n=this._op=this._op||[],"all"!==e&&(P(e)&&(a={},mt(e,(function(t){return a[t]=1})),e=a),e=function(t,e){var i,n,s,r,o=t[0]?ft(t[0]).harness:0,a=o&&o.aliases;if(!a)return e;for(n in i=Ct({},e),a)if(n in i)for(s=(r=a[n].split(",")).length;s--;)i[r[s]]=i[n];return i}(d,e)),c=d.length;c--;)if(~u.indexOf(d[c]))for(a in s=h[c],"all"===e?(n[c]=e,o=s,r={}):(r=n[c]=n[c]||{},o=e),o)(l=s&&s[a])&&("kill"in l.d&&!0!==l.d.kill(a)||It(this,l,"_pt"),delete s[a]),"all"!==r&&(r[a]=1);return this._initted&&!this._pt&&p&&me(this),this},e.to=function(t,i){return new e(t,i,arguments[2])},e.from=function(t,e){return Jt(1,arguments)},e.delayedCall=function(t,i,n,s){return new e(i,0,{immediateRender:!1,lazy:!1,overwrite:!1,delay:t,onComplete:i,onReverseComplete:i,onCompleteParams:n,onReverseCompleteParams:n,callbackScope:s})},e.fromTo=function(t,e,i){return Jt(2,arguments)},e.set=function(t,i){return i.duration=0,i.repeatDelay||(i.repeat=0),new e(t,i)},e.killTweensOf=function(t,e,i){return l.killTweensOf(t,e,i)},e}(Ne);Et(ti.prototype,{_targets:[],_lazy:0,_startAt:0,_op:0,_onInit:0}),mt("staggerTo,staggerFrom,staggerFromTo",(function(t){ti[t]=function(){var e=new Ve,i=ee.call(arguments,0);return i.splice("staggerFromTo"===t?5:4,0,0),e[t].apply(e,i)}}));var ei=function(t,e,i){return t[e]=i},ii=function(t,e,i){return t[e](i)},ni=function(t,e,i,n){return t[e](n.fp,i)},si=function(t,e,i){return t.setAttribute(e,i)},ri=function(t,e){return L(t[e])?ii:z(t[e])&&t.setAttribute?si:ei},oi=function(t,e){return e.set(e.t,e.p,Math.round(1e6*(e.s+e.c*t))/1e6,e)},ai=function(t,e){return e.set(e.t,e.p,!!(e.s+e.c*t),e)},li=function(t,e){var i=e._pt,n="";if(!t&&e.b)n=e.b;else if(1===t&&e.e)n=e.e;else{for(;i;)n=i.p+(i.m?i.m(i.s+i.c*t):Math.round(1e4*(i.s+i.c*t))/1e4)+n,i=i._next;n+=e.c}e.set(e.t,e.p,n,e)},ci=function(t,e){for(var i=e._pt;i;)i.r(t,i.d),i=i._next},di=function(t,e,i,n){for(var s,r=this._pt;r;)s=r._next,r.p===n&&r.modifier(t,e,i),r=s},ui=function(t){for(var e,i,n=this._pt;n;)i=n._next,n.p===t&&!n.op||n.op===t?It(this,n,"_pt"):n.dep||(e=1),n=i;return!e},hi=function(t,e,i,n){n.mSet(t,e,n.m.call(n.tween,i,n.mt),n)},pi=function(t){for(var e,i,n,s,r=t._pt;r;){for(e=r._next,i=n;i&&i.pr>r.pr;)i=i._next;(r._prev=i?i._prev:s)?r._prev._next=r:n=r,(r._next=i)?i._prev=r:s=r,r=e}t._pt=n},fi=function(){function t(t,e,i,n,s,r,o,a,l){this.t=e,this.s=n,this.c=s,this.p=i,this.r=r||oi,this.d=o||this,this.set=a||ei,this.pr=l||0,this._next=t,t&&(t._prev=this)}return t.prototype.modifier=function(t,e,i){this.mSet=this.mSet||this.set,this.set=hi,this.m=t,this.mt=i,this.tween=e},t}();mt(ht+"parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger",(function(t){return rt[t]=1})),U.TweenMax=U.TweenLite=ti,U.TimelineLite=U.TimelineMax=Ve,l=new Ve({sortChildren:!1,defaults:T,autoRemoveChildren:!0,id:"root",smoothChildTiming:!0}),x.stringFilter=ke;var gi=[],mi={},vi=[],yi=0,bi=0,wi=function(t){return(mi[t]||vi).map((function(t){return t()}))},_i=function(){var t=Date.now(),e=[];t-yi>2&&(wi("matchMediaInit"),gi.forEach((function(t){var i,n,s,r,o=t.queries,a=t.conditions;for(n in o)(i=c.matchMedia(o[n]).matches)&&(s=1),i!==a[n]&&(a[n]=i,r=1);r&&(t.revert(),s&&e.push(t))})),wi("matchMediaRevert"),e.forEach((function(t){return t.onMatch(t,(function(e){return t.add(null,e)}))})),yi=t,wi("matchMedia"))},xi=function(){function t(t,e){this.selector=e&&re(e),this.data=[],this._r=[],this.isReverted=!1,this.id=bi++,t&&this.add(t)}var e=t.prototype;return e.add=function(t,e,i){L(t)&&(i=e,e=t,t=L);var n=this,s=function(){var t,s=a,r=n.selector;return s&&s!==n&&s.data.push(n),i&&(n.selector=re(i)),a=n,t=e.apply(n,arguments),L(t)&&n._r.push(t),a=s,n.selector=r,n.isReverted=!1,t};return n.last=s,t===L?s(n,(function(t){return n.add(null,t)})):t?n[t]=s:s},e.ignore=function(t){var e=a;a=null,t(this),a=e},e.getTweens=function(){var e=[];return this.data.forEach((function(i){return i instanceof t?e.push.apply(e,i.getTweens()):i instanceof ti&&!(i.parent&&"nested"===i.parent.data)&&e.push(i)})),e},e.clear=function(){this._r.length=this.data.length=0},e.kill=function(t,e){var i=this;if(t?function(){for(var e,n=i.getTweens(),s=i.data.length;s--;)"isFlip"===(e=i.data[s]).data&&(e.revert(),e.getChildren(!0,!0,!1).forEach((function(t){return n.splice(n.indexOf(t),1)})));for(n.map((function(t){return{g:t._dur||t._delay||t._sat&&!t._sat.vars.immediateRender?t.globalTime(0):-1/0,t}})).sort((function(t,e){return e.g-t.g||-1/0})).forEach((function(e){return e.t.revert(t)})),s=i.data.length;s--;)(e=i.data[s])instanceof Ve?"nested"!==e.data&&(e.scrollTrigger&&e.scrollTrigger.revert(),e.kill()):!(e instanceof ti)&&e.revert&&e.revert(t);i._r.forEach((function(e){return e(t,i)})),i.isReverted=!0}():this.data.forEach((function(t){return t.kill&&t.kill()})),this.clear(),e)for(var n=gi.length;n--;)gi[n].id===this.id&&gi.splice(n,1)},e.revert=function(t){this.kill(t||{})},t}(),Ti=function(){function t(t){this.contexts=[],this.scope=t,a&&a.data.push(this)}var e=t.prototype;return e.add=function(t,e,i){B(t)||(t={matches:t});var n,s,r,o=new xi(0,i||this.scope),l=o.conditions={};for(s in a&&!o.selector&&(o.selector=a.selector),this.contexts.push(o),e=o.add("onMatch",e),o.queries=t,t)"all"===s?r=1:(n=c.matchMedia(t[s]))&&(gi.indexOf(o)<0&&gi.push(o),(l[s]=n.matches)&&(r=1),n.addListener?n.addListener(_i):n.addEventListener("change",_i));return r&&e(o,(function(t){return o.add(null,t)})),this},e.revert=function(t){this.kill(t||{})},e.kill=function(t){this.contexts.forEach((function(e){return e.kill(t,!0)}))},t}(),Si={registerPlugin:function(){for(var t=arguments.length,e=new Array(t),i=0;i<t;i++)e[i]=arguments[i];e.forEach((function(t){return ye(t)}))},timeline:function(t){return new Ve(t)},getTweensOf:function(t,e){return l.getTweensOf(t,e)},getProperty:function(t,e,i,n){P(t)&&(t=se(t)[0]);var s=ft(t||{}).get,r=i?St:Tt;return"native"===i&&(i=""),t?e?r((lt[e]&&lt[e].get||s)(t,e,i,n)):function(e,i,n){return r((lt[e]&&lt[e].get||s)(t,e,i,n))}:t},quickSetter:function(t,e,i){if((t=se(t)).length>1){var n=t.map((function(t){return ki.quickSetter(t,e,i)})),s=n.length;return function(t){for(var e=s;e--;)n[e](t)}}t=t[0]||{};var r=lt[e],o=ft(t),a=o.harness&&(o.harness.aliases||{})[e]||e,l=r?function(e){var n=new r;f._pt=0,n.init(t,i?e+i:e,f,0,[t]),n.render(1,n),f._pt&&ci(1,f)}:o.set(t,a);return r?l:function(e){return l(t,a,i?e+i:e,o,1)}},quickTo:function(t,e,i){var n,s=ki.to(t,Ct(((n={})[e]="+=0.1",n.paused=!0,n),i||{})),r=function(t,i,n){return s.resetTo(e,t,i,n)};return r.tween=s,r},isTweening:function(t){return l.getTweensOf(t,!0).length>0},defaults:function(t){return t&&t.ease&&(t.ease=Be(t.ease,T.ease)),kt(T,t||{})},config:function(t){return kt(x,t||{})},registerEffect:function(t){var e=t.name,i=t.effect,n=t.plugins,s=t.defaults,r=t.extendTimeline;(n||"").split(",").forEach((function(t){return t&&!lt[t]&&!U[t]&&Q(e+" effect requires "+t+" plugin.")})),ct[e]=function(t,e,n){return i(se(t),Et(e||{},s),n)},r&&(Ve.prototype[e]=function(t,i,n){return this.add(ct[e](t,B(i)?i:(n=i)&&{},this),n)})},registerEase:function(t,e){Ae[t]=Be(e)},parseEase:function(t,e){return arguments.length?Be(t,e):Ae},getById:function(t){return l.getById(t)},exportRoot:function(t,e){void 0===t&&(t={});var i,n,s=new Ve(t);for(s.smoothChildTiming=F(t.smoothChildTiming),l.remove(s),s._dp=0,s._time=s._tTime=l._time,i=l._first;i;)n=i._next,!e&&!i._dur&&i instanceof ti&&i.vars.onComplete===i._targets[0]||Nt(s,i,i._start-i._delay),i=n;return Nt(l,s,0),s},context:function(t,e){return t?new xi(t,e):a},matchMedia:function(t){return new Ti(t)},matchMediaRefresh:function(){return gi.forEach((function(t){var e,i,n=t.conditions;for(i in n)n[i]&&(n[i]=!1,e=1);e&&t.revert()}))||_i()},addEventListener:function(t,e){var i=mi[t]||(mi[t]=[]);~i.indexOf(e)||i.push(e)},removeEventListener:function(t,e){var i=mi[t],n=i&&i.indexOf(e);n>=0&&i.splice(n,1)},utils:{wrap:function t(e,i,n){var s=i-e;return Y(e)?ue(e,t(0,e.length),i):Zt(n,(function(t){return(s+(t-e)%s)%s+e}))},wrapYoyo:function t(e,i,n){var s=i-e,r=2*s;return Y(e)?ue(e,t(0,e.length-1),i):Zt(n,(function(t){return e+((t=(r+(t-e)%r)%r||0)>s?r-t:t)}))},distribute:ae,random:de,snap:ce,normalize:function(t,e,i){return pe(t,e,0,1,i)},getUnit:te,clamp:function(t,e,i){return Zt(i,(function(i){return Qt(t,e,i)}))},splitColor:xe,toArray:se,selector:re,mapRange:pe,pipe:function(){for(var t=arguments.length,e=new Array(t),i=0;i<t;i++)e[i]=arguments[i];return function(t){return e.reduce((function(t,e){return e(t)}),t)}},unitize:function(t,e){return function(i){return t(parseFloat(i))+(e||te(i))}},interpolate:function t(e,i,n,s){var r=isNaN(e+i)?0:function(t){return(1-t)*e+t*i};if(!r){var o,a,l,c,d,u=P(e),h={};if(!0===n&&(s=1)&&(n=null),u)e={p:e},i={p:i};else if(Y(e)&&!Y(i)){for(l=[],c=e.length,d=c-2,a=1;a<c;a++)l.push(t(e[a-1],e[a]));c--,r=function(t){t*=c;var e=Math.min(d,~~t);return l[e](t-e)},n=i}else s||(e=Ct(Y(e)?[]:{},e));if(!l){for(o in i)Xe.call(h,e,o,"get",i[o]);r=function(t){return ci(t,h)||(u?e.p:e)}}}return Zt(n,r)},shuffle:oe},install:J,effects:ct,ticker:Me,updateRoot:Ve.updateRoot,plugins:lt,globalTimeline:l,core:{PropTween:fi,globals:tt,Tween:ti,Timeline:Ve,Animation:Ne,getCache:ft,_removeLinkedListItem:It,reverting:function(){return o},context:function(t){return t&&a&&(a.data.push(t),t._ctx=a),a},suppressOverwrites:function(t){return r=t}}};mt("to,from,fromTo,delayedCall,set,killTweensOf",(function(t){return Si[t]=ti[t]})),Me.add(Ve.updateRoot),f=Si.to({},{duration:0});var Ei=function(t,e){for(var i=t._pt;i&&i.p!==e&&i.op!==e&&i.fp!==e;)i=i._next;return i},Ci=function(t,e){return{name:t,rawVars:1,init:function(t,i,n){n._onInit=function(t){var n,s;if(P(i)&&(n={},mt(i,(function(t){return n[t]=1})),i=n),e){for(s in n={},i)n[s]=e(i[s]);i=n}!function(t,e){var i,n,s,r=t._targets;for(i in e)for(n=r.length;n--;)(s=t._ptLookup[n][i])&&(s=s.d)&&(s._pt&&(s=Ei(s,i)),s&&s.modifier&&s.modifier(e[i],t,r[n],i))}(t,i)}}}},ki=Si.registerPlugin({name:"attr",init:function(t,e,i,n,s){var r,o,a;for(r in this.tween=i,e)a=t.getAttribute(r)||"",(o=this.add(t,"setAttribute",(a||0)+"",e[r],n,s,0,0,r)).op=r,o.b=a,this._props.push(r)},render:function(t,e){for(var i=e._pt;i;)o?i.set(i.t,i.p,i.b,i):i.r(t,i.d),i=i._next}},{name:"endArray",init:function(t,e){for(var i=e.length;i--;)this.add(t,i,t[i]||0,e[i],0,0,0,0,0,1)}},Ci("roundProps",le),Ci("modifiers"),Ci("snap",ce))||Si;ti.version=Ve.version=ki.version="3.12.5",h=1,R()&&Oe();Ae.Power0,Ae.Power1,Ae.Power2,Ae.Power3,Ae.Power4,Ae.Linear,Ae.Quad,Ae.Cubic,Ae.Quart,Ae.Quint,Ae.Strong,Ae.Elastic,Ae.Back,Ae.SteppedEase,Ae.Bounce,Ae.Sine,Ae.Expo,Ae.Circ},738:(t,e,i)=>{i.d(e,{Ay:()=>r});var n=i(8607),s=i(2650),r=n.os.registerPlugin(s.H0)||n.os;r.core.Tween},6383:(t,e,i)=>{function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function r(t,e,i){return e&&s(t.prototype,e),i&&s(t,i),t}function o(t,e,i){return e in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t}function a(t,e){var i=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),i.push.apply(i,n)}return i}function l(t){for(var e=1;e<arguments.length;e++){var i=null!=arguments[e]?arguments[e]:{};e%2?a(Object(i),!0).forEach((function(e){o(t,e,i[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(i)):a(Object(i)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(i,e))}))}return t}function c(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&u(t,e)}function d(t){return d=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},d(t)}function u(t,e){return u=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},u(t,e)}function h(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function p(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var i,n=d(t);if(e){var s=d(this).constructor;i=Reflect.construct(n,arguments,s)}else i=n.apply(this,arguments);return function(t,e){return!e||"object"!=typeof e&&"function"!=typeof e?h(t):e}(this,i)}}function f(t,e,i){return f="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,i){var n=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=d(t)););return t}(t,e);if(n){var s=Object.getOwnPropertyDescriptor(n,e);return s.get?s.get.call(i):s.value}},f(t,e,i||t)}function g(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(t)))return;var i=[],n=!0,s=!1,r=void 0;try{for(var o,a=t[Symbol.iterator]();!(n=(o=a.next()).done)&&(i.push(o.value),!e||i.length!==e);n=!0);}catch(t){s=!0,r=t}finally{try{n||null==a.return||a.return()}finally{if(s)throw r}}return i}(t,e)||v(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function m(t){return function(t){if(Array.isArray(t))return y(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||v(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function v(t,e){if(t){if("string"==typeof t)return y(t,e);var i=Object.prototype.toString.call(t).slice(8,-1);return"Object"===i&&t.constructor&&(i=t.constructor.name),"Map"===i||"Set"===i?Array.from(t):"Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)?y(t,e):void 0}}function y(t,e){(null==e||e>t.length)&&(e=t.length);for(var i=0,n=new Array(e);i<e;i++)n[i]=t[i];return n}i.d(e,{Ay:()=>ht});var b={el:document,name:"scroll",offset:[0,0],repeat:!1,smooth:!1,initPosition:{x:0,y:0},direction:"vertical",gestureDirection:"vertical",reloadOnContextChange:!1,lerp:.1,class:"is-inview",scrollbarContainer:!1,scrollbarClass:"c-scrollbar",scrollingClass:"has-scroll-scrolling",draggingClass:"has-scroll-dragging",smoothClass:"has-scroll-smooth",initClass:"has-scroll-init",getSpeed:!1,getDirection:!1,scrollFromAnywhere:!1,multiplier:1,firefoxMultiplier:50,touchMultiplier:2,resetNativeScroll:!0,tablet:{smooth:!1,direction:"vertical",gestureDirection:"vertical",breakpoint:1024},smartphone:{smooth:!1,direction:"vertical",gestureDirection:"vertical"}},w=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};n(this,t),Object.assign(this,b,e),this.smartphone=b.smartphone,e.smartphone&&Object.assign(this.smartphone,e.smartphone),this.tablet=b.tablet,e.tablet&&Object.assign(this.tablet,e.tablet),this.namespace="locomotive",this.html=document.documentElement,this.windowHeight=window.innerHeight,this.windowWidth=window.innerWidth,this.windowMiddle={x:this.windowWidth/2,y:this.windowHeight/2},this.els={},this.currentElements={},this.listeners={},this.hasScrollTicking=!1,this.hasCallEventSet=!1,this.checkScroll=this.checkScroll.bind(this),this.checkResize=this.checkResize.bind(this),this.checkEvent=this.checkEvent.bind(this),this.instance={scroll:{x:0,y:0},limit:{x:this.html.offsetWidth,y:this.html.offsetHeight},currentElements:this.currentElements},this.isMobile?this.isTablet?this.context="tablet":this.context="smartphone":this.context="desktop",this.isMobile&&(this.direction=this[this.context].direction),"horizontal"===this.direction?this.directionAxis="x":this.directionAxis="y",this.getDirection&&(this.instance.direction=null),this.getDirection&&(this.instance.speed=0),this.html.classList.add(this.initClass),window.addEventListener("resize",this.checkResize,!1)}return r(t,[{key:"init",value:function(){this.initEvents()}},{key:"checkScroll",value:function(){this.dispatchScroll()}},{key:"checkResize",value:function(){var t=this;this.resizeTick||(this.resizeTick=!0,requestAnimationFrame((function(){t.resize(),t.resizeTick=!1})))}},{key:"resize",value:function(){}},{key:"checkContext",value:function(){if(this.reloadOnContextChange){this.isMobile=/Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||"MacIntel"===navigator.platform&&navigator.maxTouchPoints>1||this.windowWidth<this.tablet.breakpoint,this.isTablet=this.isMobile&&this.windowWidth>=this.tablet.breakpoint;var t=this.context;if(this.isMobile?this.isTablet?this.context="tablet":this.context="smartphone":this.context="desktop",t!=this.context)("desktop"==t?this.smooth:this[t].smooth)!=("desktop"==this.context?this.smooth:this[this.context].smooth)&&window.location.reload()}}},{key:"initEvents",value:function(){var t=this;this.scrollToEls=this.el.querySelectorAll("[data-".concat(this.name,"-to]")),this.setScrollTo=this.setScrollTo.bind(this),this.scrollToEls.forEach((function(e){e.addEventListener("click",t.setScrollTo,!1)}))}},{key:"setScrollTo",value:function(t){t.preventDefault(),this.scrollTo(t.currentTarget.getAttribute("data-".concat(this.name,"-href"))||t.currentTarget.getAttribute("href"),{offset:t.currentTarget.getAttribute("data-".concat(this.name,"-offset"))})}},{key:"addElements",value:function(){}},{key:"detectElements",value:function(t){var e=this,i=this.instance.scroll.y,n=i+this.windowHeight,s=this.instance.scroll.x,r=s+this.windowWidth;Object.entries(this.els).forEach((function(o){var a=g(o,2),l=a[0],c=a[1];if(!c||c.inView&&!t||("horizontal"===e.direction?r>=c.left&&s<c.right&&e.setInView(c,l):n>=c.top&&i<c.bottom&&e.setInView(c,l)),c&&c.inView)if("horizontal"===e.direction){var d=c.right-c.left;c.progress=(e.instance.scroll.x-(c.left-e.windowWidth))/(d+e.windowWidth),(r<c.left||s>c.right)&&e.setOutOfView(c,l)}else{var u=c.bottom-c.top;c.progress=(e.instance.scroll.y-(c.top-e.windowHeight))/(u+e.windowHeight),(n<c.top||i>c.bottom)&&e.setOutOfView(c,l)}})),this.hasScrollTicking=!1}},{key:"setInView",value:function(t,e){this.els[e].inView=!0,t.el.classList.add(t.class),this.currentElements[e]=t,t.call&&this.hasCallEventSet&&(this.dispatchCall(t,"enter"),t.repeat||(this.els[e].call=!1))}},{key:"setOutOfView",value:function(t,e){var i=this;this.els[e].inView=!1,Object.keys(this.currentElements).forEach((function(t){t===e&&delete i.currentElements[t]})),t.call&&this.hasCallEventSet&&this.dispatchCall(t,"exit"),t.repeat&&t.el.classList.remove(t.class)}},{key:"dispatchCall",value:function(t,e){this.callWay=e,this.callValue=t.call.split(",").map((function(t){return t.trim()})),this.callObj=t,1==this.callValue.length&&(this.callValue=this.callValue[0]);var i=new Event(this.namespace+"call");this.el.dispatchEvent(i)}},{key:"dispatchScroll",value:function(){var t=new Event(this.namespace+"scroll");this.el.dispatchEvent(t)}},{key:"setEvents",value:function(t,e){this.listeners[t]||(this.listeners[t]=[]);var i=this.listeners[t];i.push(e),1===i.length&&this.el.addEventListener(this.namespace+t,this.checkEvent,!1),"call"===t&&(this.hasCallEventSet=!0,this.detectElements(!0))}},{key:"unsetEvents",value:function(t,e){if(this.listeners[t]){var i=this.listeners[t],n=i.indexOf(e);n<0||(i.splice(n,1),0===i.index&&this.el.removeEventListener(this.namespace+t,this.checkEvent,!1))}}},{key:"checkEvent",value:function(t){var e=this,i=t.type.replace(this.namespace,""),n=this.listeners[i];n&&0!==n.length&&n.forEach((function(t){switch(i){case"scroll":return t(e.instance);case"call":return t(e.callValue,e.callWay,e.callObj);default:return t()}}))}},{key:"startScroll",value:function(){}},{key:"stopScroll",value:function(){}},{key:"setScroll",value:function(t,e){this.instance.scroll={x:0,y:0}}},{key:"destroy",value:function(){var t=this;window.removeEventListener("resize",this.checkResize,!1),Object.keys(this.listeners).forEach((function(e){t.el.removeEventListener(t.namespace+e,t.checkEvent,!1)})),this.listeners={},this.scrollToEls.forEach((function(e){e.removeEventListener("click",t.setScrollTo,!1)})),this.html.classList.remove(this.initClass)}}]),t}(),_="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==i.g?i.g:"undefined"!=typeof self?self:{};function x(t,e){return t(e={exports:{}},e.exports),e.exports}var T=x((function(t,e){t.exports={polyfill:function(){var t=window,e=document;if(!("scrollBehavior"in e.documentElement.style)||!0===t.__forceSmoothScrollPolyfill__){var i,n=t.HTMLElement||t.Element,s=468,r={scroll:t.scroll||t.scrollTo,scrollBy:t.scrollBy,elementScroll:n.prototype.scroll||l,scrollIntoView:n.prototype.scrollIntoView},o=t.performance&&t.performance.now?t.performance.now.bind(t.performance):Date.now,a=(i=t.navigator.userAgent,new RegExp(["MSIE ","Trident/","Edge/"].join("|")).test(i)?1:0);t.scroll=t.scrollTo=function(){void 0!==arguments[0]&&(!0!==c(arguments[0])?f.call(t,e.body,void 0!==arguments[0].left?~~arguments[0].left:t.scrollX||t.pageXOffset,void 0!==arguments[0].top?~~arguments[0].top:t.scrollY||t.pageYOffset):r.scroll.call(t,void 0!==arguments[0].left?arguments[0].left:"object"!=typeof arguments[0]?arguments[0]:t.scrollX||t.pageXOffset,void 0!==arguments[0].top?arguments[0].top:void 0!==arguments[1]?arguments[1]:t.scrollY||t.pageYOffset))},t.scrollBy=function(){void 0!==arguments[0]&&(c(arguments[0])?r.scrollBy.call(t,void 0!==arguments[0].left?arguments[0].left:"object"!=typeof arguments[0]?arguments[0]:0,void 0!==arguments[0].top?arguments[0].top:void 0!==arguments[1]?arguments[1]:0):f.call(t,e.body,~~arguments[0].left+(t.scrollX||t.pageXOffset),~~arguments[0].top+(t.scrollY||t.pageYOffset)))},n.prototype.scroll=n.prototype.scrollTo=function(){if(void 0!==arguments[0])if(!0!==c(arguments[0])){var t=arguments[0].left,e=arguments[0].top;f.call(this,this,void 0===t?this.scrollLeft:~~t,void 0===e?this.scrollTop:~~e)}else{if("number"==typeof arguments[0]&&void 0===arguments[1])throw new SyntaxError("Value could not be converted");r.elementScroll.call(this,void 0!==arguments[0].left?~~arguments[0].left:"object"!=typeof arguments[0]?~~arguments[0]:this.scrollLeft,void 0!==arguments[0].top?~~arguments[0].top:void 0!==arguments[1]?~~arguments[1]:this.scrollTop)}},n.prototype.scrollBy=function(){void 0!==arguments[0]&&(!0!==c(arguments[0])?this.scroll({left:~~arguments[0].left+this.scrollLeft,top:~~arguments[0].top+this.scrollTop,behavior:arguments[0].behavior}):r.elementScroll.call(this,void 0!==arguments[0].left?~~arguments[0].left+this.scrollLeft:~~arguments[0]+this.scrollLeft,void 0!==arguments[0].top?~~arguments[0].top+this.scrollTop:~~arguments[1]+this.scrollTop))},n.prototype.scrollIntoView=function(){if(!0!==c(arguments[0])){var i=function(t){for(;t!==e.body&&!1===h(t);)t=t.parentNode||t.host;return t}(this),n=i.getBoundingClientRect(),s=this.getBoundingClientRect();i!==e.body?(f.call(this,i,i.scrollLeft+s.left-n.left,i.scrollTop+s.top-n.top),"fixed"!==t.getComputedStyle(i).position&&t.scrollBy({left:n.left,top:n.top,behavior:"smooth"})):t.scrollBy({left:s.left,top:s.top,behavior:"smooth"})}else r.scrollIntoView.call(this,void 0===arguments[0]||arguments[0])}}function l(t,e){this.scrollLeft=t,this.scrollTop=e}function c(t){if(null===t||"object"!=typeof t||void 0===t.behavior||"auto"===t.behavior||"instant"===t.behavior)return!0;if("object"==typeof t&&"smooth"===t.behavior)return!1;throw new TypeError("behavior member of ScrollOptions "+t.behavior+" is not a valid value for enumeration ScrollBehavior.")}function d(t,e){return"Y"===e?t.clientHeight+a<t.scrollHeight:"X"===e?t.clientWidth+a<t.scrollWidth:void 0}function u(e,i){var n=t.getComputedStyle(e,null)["overflow"+i];return"auto"===n||"scroll"===n}function h(t){var e=d(t,"Y")&&u(t,"Y"),i=d(t,"X")&&u(t,"X");return e||i}function p(e){var i,n,r,a,l=(o()-e.startTime)/s;a=l=l>1?1:l,i=.5*(1-Math.cos(Math.PI*a)),n=e.startX+(e.x-e.startX)*i,r=e.startY+(e.y-e.startY)*i,e.method.call(e.scrollable,n,r),n===e.x&&r===e.y||t.requestAnimationFrame(p.bind(t,e))}function f(i,n,s){var a,c,d,u,h=o();i===e.body?(a=t,c=t.scrollX||t.pageXOffset,d=t.scrollY||t.pageYOffset,u=r.scroll):(a=i,c=i.scrollLeft,d=i.scrollTop,u=l),p({scrollable:a,method:u,startTime:h,startX:c,startY:d,x:n,y:s})}}}})),S=(T.polyfill,function(t){c(i,t);var e=p(i);function i(){var t,s=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return n(this,i),(t=e.call(this,s)).resetNativeScroll&&(history.scrollRestoration&&(history.scrollRestoration="manual"),window.scrollTo(0,0)),window.addEventListener("scroll",t.checkScroll,!1),void 0===window.smoothscrollPolyfill&&(window.smoothscrollPolyfill=T,window.smoothscrollPolyfill.polyfill()),t}return r(i,[{key:"init",value:function(){this.instance.scroll.y=window.pageYOffset,this.addElements(),this.detectElements(),f(d(i.prototype),"init",this).call(this)}},{key:"checkScroll",value:function(){var t=this;f(d(i.prototype),"checkScroll",this).call(this),this.getDirection&&this.addDirection(),this.getSpeed&&(this.addSpeed(),this.speedTs=Date.now()),this.instance.scroll.y=window.pageYOffset,Object.entries(this.els).length&&(this.hasScrollTicking||(requestAnimationFrame((function(){t.detectElements()})),this.hasScrollTicking=!0))}},{key:"addDirection",value:function(){window.pageYOffset>this.instance.scroll.y?"down"!==this.instance.direction&&(this.instance.direction="down"):window.pageYOffset<this.instance.scroll.y&&"up"!==this.instance.direction&&(this.instance.direction="up")}},{key:"addSpeed",value:function(){window.pageYOffset!=this.instance.scroll.y?this.instance.speed=(window.pageYOffset-this.instance.scroll.y)/Math.max(1,Date.now()-this.speedTs):this.instance.speed=0}},{key:"resize",value:function(){Object.entries(this.els).length&&(this.windowHeight=window.innerHeight,this.updateElements())}},{key:"addElements",value:function(){var t=this;this.els={},this.el.querySelectorAll("[data-"+this.name+"]").forEach((function(e,i){e.getBoundingClientRect();var n,s,r,o=e.dataset[t.name+"Class"]||t.class,a="string"==typeof e.dataset[t.name+"Id"]?e.dataset[t.name+"Id"]:i,l="string"==typeof e.dataset[t.name+"Offset"]?e.dataset[t.name+"Offset"].split(","):t.offset,c=e.dataset[t.name+"Repeat"],d=e.dataset[t.name+"Call"],u=e.dataset[t.name+"Target"],h=(r=void 0!==u?document.querySelector("".concat(u)):e).getBoundingClientRect();n=h.top+t.instance.scroll.y,s=h.left+t.instance.scroll.x;var p=n+r.offsetHeight,f=s+r.offsetWidth;c="false"!=c&&(null!=c||t.repeat);var g=t.getRelativeOffset(l),m={el:e,targetEl:r,id:a,class:o,top:n+=g[0],bottom:p-=g[1],left:s,right:f,offset:l,progress:0,repeat:c,inView:!1,call:d};t.els[a]=m,e.classList.contains(o)&&t.setInView(t.els[a],a)}))}},{key:"updateElements",value:function(){var t=this;Object.entries(this.els).forEach((function(e){var i=g(e,2),n=i[0],s=i[1],r=s.targetEl.getBoundingClientRect().top+t.instance.scroll.y,o=r+s.targetEl.offsetHeight,a=t.getRelativeOffset(s.offset);t.els[n].top=r+a[0],t.els[n].bottom=o-a[1]})),this.hasScrollTicking=!1}},{key:"getRelativeOffset",value:function(t){var e=[0,0];if(t)for(var i=0;i<t.length;i++)"string"==typeof t[i]?t[i].includes("%")?e[i]=parseInt(t[i].replace("%","")*this.windowHeight/100):e[i]=parseInt(t[i]):e[i]=t[i];return e}},{key:"scrollTo",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=parseInt(e.offset)||0,n=!!e.callback&&e.callback;if("string"==typeof t){if("top"===t)t=this.html;else if("bottom"===t)t=this.html.offsetHeight-window.innerHeight;else if(!(t=document.querySelector(t)))return}else if("number"==typeof t)t=parseInt(t);else if(!t||!t.tagName)return void console.warn("`target` parameter is not valid");i="number"!=typeof t?t.getBoundingClientRect().top+i+this.instance.scroll.y:t+i;var s=function(){return parseInt(window.pageYOffset)===parseInt(i)};if(n){if(s())return void n();window.addEventListener("scroll",(function t(){s()&&(window.removeEventListener("scroll",t),n())}))}window.scrollTo({top:i,behavior:0===e.duration?"auto":"smooth"})}},{key:"update",value:function(){this.addElements(),this.detectElements()}},{key:"destroy",value:function(){f(d(i.prototype),"destroy",this).call(this),window.removeEventListener("scroll",this.checkScroll,!1)}}]),i}(w)),E=Object.getOwnPropertySymbols,C=Object.prototype.hasOwnProperty,k=Object.prototype.propertyIsEnumerable;var M=function(){try{if(!Object.assign)return!1;var t=new String("abc");if(t[5]="de","5"===Object.getOwnPropertyNames(t)[0])return!1;for(var e={},i=0;i<10;i++)e["_"+String.fromCharCode(i)]=i;if("0123456789"!==Object.getOwnPropertyNames(e).map((function(t){return e[t]})).join(""))return!1;var n={};return"abcdefghijklmnopqrst".split("").forEach((function(t){n[t]=t})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},n)).join("")}catch(t){return!1}}()?Object.assign:function(t,e){for(var i,n,s=function(t){if(null==t)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(t)}(t),r=1;r<arguments.length;r++){for(var o in i=Object(arguments[r]))C.call(i,o)&&(s[o]=i[o]);if(E){n=E(i);for(var a=0;a<n.length;a++)k.call(i,n[a])&&(s[n[a]]=i[n[a]])}}return s};function O(){}O.prototype={on:function(t,e,i){var n=this.e||(this.e={});return(n[t]||(n[t]=[])).push({fn:e,ctx:i}),this},once:function(t,e,i){var n=this;function s(){n.off(t,s),e.apply(i,arguments)}return s._=e,this.on(t,s,i)},emit:function(t){for(var e=[].slice.call(arguments,1),i=((this.e||(this.e={}))[t]||[]).slice(),n=0,s=i.length;n<s;n++)i[n].fn.apply(i[n].ctx,e);return this},off:function(t,e){var i=this.e||(this.e={}),n=i[t],s=[];if(n&&e)for(var r=0,o=n.length;r<o;r++)n[r].fn!==e&&n[r].fn._!==e&&s.push(n[r]);return s.length?i[t]=s:delete i[t],this}};var A=O,I=x((function(t,e){(function(){(null!==e?e:this).Lethargy=function(){function t(t,e,i,n){this.stability=null!=t?Math.abs(t):8,this.sensitivity=null!=e?1+Math.abs(e):100,this.tolerance=null!=i?1+Math.abs(i):1.1,this.delay=null!=n?n:150,this.lastUpDeltas=function(){var t,e,i;for(i=[],t=1,e=2*this.stability;1<=e?t<=e:t>=e;1<=e?t++:t--)i.push(null);return i}.call(this),this.lastDownDeltas=function(){var t,e,i;for(i=[],t=1,e=2*this.stability;1<=e?t<=e:t>=e;1<=e?t++:t--)i.push(null);return i}.call(this),this.deltasTimestamp=function(){var t,e,i;for(i=[],t=1,e=2*this.stability;1<=e?t<=e:t>=e;1<=e?t++:t--)i.push(null);return i}.call(this)}return t.prototype.check=function(t){var e;return null!=(t=t.originalEvent||t).wheelDelta?e=t.wheelDelta:null!=t.deltaY?e=-40*t.deltaY:null==t.detail&&0!==t.detail||(e=-40*t.detail),this.deltasTimestamp.push(Date.now()),this.deltasTimestamp.shift(),e>0?(this.lastUpDeltas.push(e),this.lastUpDeltas.shift(),this.isInertia(1)):(this.lastDownDeltas.push(e),this.lastDownDeltas.shift(),this.isInertia(-1))},t.prototype.isInertia=function(t){var e,i,n,s,r,o,a;return null===(e=-1===t?this.lastDownDeltas:this.lastUpDeltas)[0]?t:!(this.deltasTimestamp[2*this.stability-2]+this.delay>Date.now()&&e[0]===e[2*this.stability-1])&&(n=e.slice(0,this.stability),i=e.slice(this.stability,2*this.stability),a=n.reduce((function(t,e){return t+e})),r=i.reduce((function(t,e){return t+e})),o=a/n.length,s=r/i.length,Math.abs(o)<Math.abs(s*this.tolerance)&&this.sensitivity<Math.abs(s)&&t)},t.prototype.showLastUpDeltas=function(){return this.lastUpDeltas},t.prototype.showLastDownDeltas=function(){return this.lastDownDeltas},t}()}).call(_)})),P={hasWheelEvent:"onwheel"in document,hasMouseWheelEvent:"onmousewheel"in document,hasTouch:"ontouchstart"in window||window.TouchEvent||window.DocumentTouch&&document instanceof DocumentTouch,hasTouchWin:navigator.msMaxTouchPoints&&navigator.msMaxTouchPoints>1,hasPointer:!!window.navigator.msPointerEnabled,hasKeyDown:"onkeydown"in document,isFirefox:navigator.userAgent.indexOf("Firefox")>-1},L=Object.prototype.toString,D=Object.prototype.hasOwnProperty;function z(t,e){return function(){return t.apply(e,arguments)}}var B=I.Lethargy,F="virtualscroll",R=j,H=37,G=38,Y=39,N=40,V=32;function j(t){!function(t){if(!t)return console.warn("bindAll requires at least one argument.");var e=Array.prototype.slice.call(arguments,1);if(0===e.length)for(var i in t)D.call(t,i)&&"function"==typeof t[i]&&"[object Function]"==L.call(t[i])&&e.push(i);for(var n=0;n<e.length;n++){var s=e[n];t[s]=z(t[s],t)}}(this,"_onWheel","_onMouseWheel","_onTouchStart","_onTouchMove","_onKeyDown"),this.el=window,t&&t.el&&(this.el=t.el,delete t.el),this.options=M({mouseMultiplier:1,touchMultiplier:2,firefoxMultiplier:15,keyStep:120,preventTouch:!1,unpreventTouchClass:"vs-touchmove-allowed",limitInertia:!1,useKeyboard:!0,useTouch:!0},t),this.options.limitInertia&&(this._lethargy=new B),this._emitter=new A,this._event={y:0,x:0,deltaX:0,deltaY:0},this.touchStartX=null,this.touchStartY=null,this.bodyTouchAction=null,void 0!==this.options.passive&&(this.listenerOptions={passive:this.options.passive})}function W(t,e,i){return(1-i)*t+i*e}function $(t){var e={};if(window.getComputedStyle){var i=getComputedStyle(t),n=i.transform||i.webkitTransform||i.mozTransform,s=n.match(/^matrix3d\((.+)\)$/);return s?(e.x=s?parseFloat(s[1].split(", ")[12]):0,e.y=s?parseFloat(s[1].split(", ")[13]):0):(s=n.match(/^matrix\((.+)\)$/),e.x=s?parseFloat(s[1].split(", ")[4]):0,e.y=s?parseFloat(s[1].split(", ")[5]):0),e}}function X(t){for(var e=[];t&&t!==document;t=t.parentNode)e.push(t);return e}j.prototype._notify=function(t){var e=this._event;e.x+=e.deltaX,e.y+=e.deltaY,this._emitter.emit(F,{x:e.x,y:e.y,deltaX:e.deltaX,deltaY:e.deltaY,originalEvent:t})},j.prototype._onWheel=function(t){var e=this.options;if(!this._lethargy||!1!==this._lethargy.check(t)){var i=this._event;i.deltaX=t.wheelDeltaX||-1*t.deltaX,i.deltaY=t.wheelDeltaY||-1*t.deltaY,P.isFirefox&&1==t.deltaMode&&(i.deltaX*=e.firefoxMultiplier,i.deltaY*=e.firefoxMultiplier),i.deltaX*=e.mouseMultiplier,i.deltaY*=e.mouseMultiplier,this._notify(t)}},j.prototype._onMouseWheel=function(t){if(!this.options.limitInertia||!1!==this._lethargy.check(t)){var e=this._event;e.deltaX=t.wheelDeltaX?t.wheelDeltaX:0,e.deltaY=t.wheelDeltaY?t.wheelDeltaY:t.wheelDelta,this._notify(t)}},j.prototype._onTouchStart=function(t){var e=t.targetTouches?t.targetTouches[0]:t;this.touchStartX=e.pageX,this.touchStartY=e.pageY},j.prototype._onTouchMove=function(t){var e=this.options;e.preventTouch&&!t.target.classList.contains(e.unpreventTouchClass)&&t.preventDefault();var i=this._event,n=t.targetTouches?t.targetTouches[0]:t;i.deltaX=(n.pageX-this.touchStartX)*e.touchMultiplier,i.deltaY=(n.pageY-this.touchStartY)*e.touchMultiplier,this.touchStartX=n.pageX,this.touchStartY=n.pageY,this._notify(t)},j.prototype._onKeyDown=function(t){var e=this._event;e.deltaX=e.deltaY=0;var i=window.innerHeight-40;switch(t.keyCode){case H:case G:e.deltaY=this.options.keyStep;break;case Y:case N:e.deltaY=-this.options.keyStep;break;case t.shiftKey:e.deltaY=i;break;case V:e.deltaY=-i;break;default:return}this._notify(t)},j.prototype._bind=function(){P.hasWheelEvent&&this.el.addEventListener("wheel",this._onWheel,this.listenerOptions),P.hasMouseWheelEvent&&this.el.addEventListener("mousewheel",this._onMouseWheel,this.listenerOptions),P.hasTouch&&this.options.useTouch&&(this.el.addEventListener("touchstart",this._onTouchStart,this.listenerOptions),this.el.addEventListener("touchmove",this._onTouchMove,this.listenerOptions)),P.hasPointer&&P.hasTouchWin&&(this.bodyTouchAction=document.body.style.msTouchAction,document.body.style.msTouchAction="none",this.el.addEventListener("MSPointerDown",this._onTouchStart,!0),this.el.addEventListener("MSPointerMove",this._onTouchMove,!0)),P.hasKeyDown&&this.options.useKeyboard&&document.addEventListener("keydown",this._onKeyDown)},j.prototype._unbind=function(){P.hasWheelEvent&&this.el.removeEventListener("wheel",this._onWheel),P.hasMouseWheelEvent&&this.el.removeEventListener("mousewheel",this._onMouseWheel),P.hasTouch&&(this.el.removeEventListener("touchstart",this._onTouchStart),this.el.removeEventListener("touchmove",this._onTouchMove)),P.hasPointer&&P.hasTouchWin&&(document.body.style.msTouchAction=this.bodyTouchAction,this.el.removeEventListener("MSPointerDown",this._onTouchStart,!0),this.el.removeEventListener("MSPointerMove",this._onTouchMove,!0)),P.hasKeyDown&&this.options.useKeyboard&&document.removeEventListener("keydown",this._onKeyDown)},j.prototype.on=function(t,e){this._emitter.on(F,t,e);var i=this._emitter.e;i&&i[F]&&1===i[F].length&&this._bind()},j.prototype.off=function(t,e){this._emitter.off(F,t,e);var i=this._emitter.e;(!i[F]||i[F].length<=0)&&this._unbind()},j.prototype.reset=function(){var t=this._event;t.x=0,t.y=0},j.prototype.destroy=function(){this._emitter.off(),this._unbind()};var q=.1,U="function"==typeof Float32Array;function K(t,e){return 1-3*e+3*t}function J(t,e){return 3*e-6*t}function Z(t){return 3*t}function Q(t,e,i){return((K(e,i)*t+J(e,i))*t+Z(e))*t}function tt(t,e,i){return 3*K(e,i)*t*t+2*J(e,i)*t+Z(e)}function et(t){return t}var it=function(t,e,i,n){if(!(0<=t&&t<=1&&0<=i&&i<=1))throw new Error("bezier x values must be in [0, 1] range");if(t===e&&i===n)return et;for(var s=U?new Float32Array(11):new Array(11),r=0;r<11;++r)s[r]=Q(r*q,t,i);function o(e){for(var n=0,r=1;10!==r&&s[r]<=e;++r)n+=q;--r;var o=n+(e-s[r])/(s[r+1]-s[r])*q,a=tt(o,t,i);return a>=.001?function(t,e,i,n){for(var s=0;s<4;++s){var r=tt(e,i,n);if(0===r)return e;e-=(Q(e,i,n)-t)/r}return e}(e,o,t,i):0===a?o:function(t,e,i,n,s){var r,o,a=0;do{(r=Q(o=e+(i-e)/2,n,s)-t)>0?i=o:e=o}while(Math.abs(r)>1e-7&&++a<10);return o}(e,n,n+q,t,i)}return function(t){return 0===t?0:1===t?1:Q(o(t),e,n)}},nt=38,st=40,rt=32,ot=9,at=33,lt=34,ct=36,dt=35,ut=function(t){c(i,t);var e=p(i);function i(){var t,s=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return n(this,i),history.scrollRestoration&&(history.scrollRestoration="manual"),window.scrollTo(0,0),(t=e.call(this,s)).inertia&&(t.lerp=.1*t.inertia),t.isScrolling=!1,t.isDraggingScrollbar=!1,t.isTicking=!1,t.hasScrollTicking=!1,t.parallaxElements={},t.stop=!1,t.scrollbarContainer=s.scrollbarContainer,t.checkKey=t.checkKey.bind(h(t)),window.addEventListener("keydown",t.checkKey,!1),t}return r(i,[{key:"init",value:function(){var t=this;this.html.classList.add(this.smoothClass),this.html.setAttribute("data-".concat(this.name,"-direction"),this.direction),this.instance=l({delta:{x:this.initPosition.x,y:this.initPosition.y},scroll:{x:this.initPosition.x,y:this.initPosition.y}},this.instance),this.vs=new R({el:this.scrollFromAnywhere?document:this.el,mouseMultiplier:navigator.platform.indexOf("Win")>-1?1:.4,firefoxMultiplier:this.firefoxMultiplier,touchMultiplier:this.touchMultiplier,useKeyboard:!1,passive:!0}),this.vs.on((function(e){t.stop||t.isDraggingScrollbar||requestAnimationFrame((function(){t.updateDelta(e),t.isScrolling||t.startScrolling()}))})),this.setScrollLimit(),this.initScrollBar(),this.addSections(),this.addElements(),this.checkScroll(!0),this.transformElements(!0,!0),f(d(i.prototype),"init",this).call(this)}},{key:"setScrollLimit",value:function(){if(this.instance.limit.y=this.el.offsetHeight-this.windowHeight,"horizontal"===this.direction){for(var t=0,e=this.el.children,i=0;i<e.length;i++)t+=e[i].offsetWidth;this.instance.limit.x=t-this.windowWidth}}},{key:"startScrolling",value:function(){this.startScrollTs=Date.now(),this.isScrolling=!0,this.checkScroll(),this.html.classList.add(this.scrollingClass)}},{key:"stopScrolling",value:function(){cancelAnimationFrame(this.checkScrollRaf),this.startScrollTs=void 0,this.scrollToRaf&&(cancelAnimationFrame(this.scrollToRaf),this.scrollToRaf=null),this.isScrolling=!1,this.instance.scroll.y=Math.round(this.instance.scroll.y),this.html.classList.remove(this.scrollingClass)}},{key:"checkKey",value:function(t){var e=this;if(this.stop)t.keyCode==ot&&requestAnimationFrame((function(){e.html.scrollTop=0,document.body.scrollTop=0,e.html.scrollLeft=0,document.body.scrollLeft=0}));else{switch(t.keyCode){case ot:requestAnimationFrame((function(){e.html.scrollTop=0,document.body.scrollTop=0,e.html.scrollLeft=0,document.body.scrollLeft=0,e.scrollTo(document.activeElement,{offset:-window.innerHeight/2})}));break;case nt:this.isActiveElementScrollSensitive()&&(this.instance.delta[this.directionAxis]-=240);break;case st:this.isActiveElementScrollSensitive()&&(this.instance.delta[this.directionAxis]+=240);break;case at:this.instance.delta[this.directionAxis]-=window.innerHeight;break;case lt:this.instance.delta[this.directionAxis]+=window.innerHeight;break;case ct:this.instance.delta[this.directionAxis]-=this.instance.limit[this.directionAxis];break;case dt:this.instance.delta[this.directionAxis]+=this.instance.limit[this.directionAxis];break;case rt:this.isActiveElementScrollSensitive()&&(t.shiftKey?this.instance.delta[this.directionAxis]-=window.innerHeight:this.instance.delta[this.directionAxis]+=window.innerHeight);break;default:return}this.instance.delta[this.directionAxis]<0&&(this.instance.delta[this.directionAxis]=0),this.instance.delta[this.directionAxis]>this.instance.limit[this.directionAxis]&&(this.instance.delta[this.directionAxis]=this.instance.limit[this.directionAxis]),this.stopScrolling(),this.isScrolling=!0,this.checkScroll(),this.html.classList.add(this.scrollingClass)}}},{key:"isActiveElementScrollSensitive",value:function(){return!(document.activeElement instanceof HTMLInputElement||document.activeElement instanceof HTMLTextAreaElement||document.activeElement instanceof HTMLButtonElement||document.activeElement instanceof HTMLSelectElement)}},{key:"checkScroll",value:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(e||this.isScrolling||this.isDraggingScrollbar){this.hasScrollTicking||(this.checkScrollRaf=requestAnimationFrame((function(){return t.checkScroll()})),this.hasScrollTicking=!0),this.updateScroll();var n=Math.abs(this.instance.delta[this.directionAxis]-this.instance.scroll[this.directionAxis]),s=Date.now()-this.startScrollTs;if(!this.animatingScroll&&s>100&&(n<.5&&0!=this.instance.delta[this.directionAxis]||n<.5&&0==this.instance.delta[this.directionAxis])&&this.stopScrolling(),Object.entries(this.sections).forEach((function(i){var n=g(i,2),s=(n[0],n[1]);s.persistent||t.instance.scroll[t.directionAxis]>s.offset[t.directionAxis]&&t.instance.scroll[t.directionAxis]<s.limit[t.directionAxis]?("horizontal"===t.direction?t.transform(s.el,-t.instance.scroll[t.directionAxis],0):t.transform(s.el,0,-t.instance.scroll[t.directionAxis]),s.inView||(s.inView=!0,s.el.style.opacity=1,s.el.style.pointerEvents="all",s.el.setAttribute("data-".concat(t.name,"-section-inview"),""))):((s.inView||e)&&(s.inView=!1,s.el.style.opacity=0,s.el.style.pointerEvents="none",s.el.removeAttribute("data-".concat(t.name,"-section-inview"))),t.transform(s.el,0,0))})),this.getDirection&&this.addDirection(),this.getSpeed&&(this.addSpeed(),this.speedTs=Date.now()),this.detectElements(),this.transformElements(),this.hasScrollbar){var r=this.instance.scroll[this.directionAxis]/this.instance.limit[this.directionAxis]*this.scrollBarLimit[this.directionAxis];"horizontal"===this.direction?this.transform(this.scrollbarThumb,r,0):this.transform(this.scrollbarThumb,0,r)}f(d(i.prototype),"checkScroll",this).call(this),this.hasScrollTicking=!1}}},{key:"resize",value:function(){this.windowHeight=window.innerHeight,this.windowWidth=window.innerWidth,this.checkContext(),this.windowMiddle={x:this.windowWidth/2,y:this.windowHeight/2},this.update()}},{key:"updateDelta",value:function(t){var e,i=this[this.context]&&this[this.context].gestureDirection?this[this.context].gestureDirection:this.gestureDirection;e="both"===i?t.deltaX+t.deltaY:"vertical"===i?t.deltaY:"horizontal"===i?t.deltaX:t.deltaY,this.instance.delta[this.directionAxis]-=e*this.multiplier,this.instance.delta[this.directionAxis]<0&&(this.instance.delta[this.directionAxis]=0),this.instance.delta[this.directionAxis]>this.instance.limit[this.directionAxis]&&(this.instance.delta[this.directionAxis]=this.instance.limit[this.directionAxis])}},{key:"updateScroll",value:function(t){this.isScrolling||this.isDraggingScrollbar?this.instance.scroll[this.directionAxis]=W(this.instance.scroll[this.directionAxis],this.instance.delta[this.directionAxis],this.lerp):this.instance.scroll[this.directionAxis]>this.instance.limit[this.directionAxis]?this.setScroll(this.instance.scroll[this.directionAxis],this.instance.limit[this.directionAxis]):this.instance.scroll.y<0?this.setScroll(this.instance.scroll[this.directionAxis],0):this.setScroll(this.instance.scroll[this.directionAxis],this.instance.delta[this.directionAxis])}},{key:"addDirection",value:function(){this.instance.delta.y>this.instance.scroll.y?"down"!==this.instance.direction&&(this.instance.direction="down"):this.instance.delta.y<this.instance.scroll.y&&"up"!==this.instance.direction&&(this.instance.direction="up"),this.instance.delta.x>this.instance.scroll.x?"right"!==this.instance.direction&&(this.instance.direction="right"):this.instance.delta.x<this.instance.scroll.x&&"left"!==this.instance.direction&&(this.instance.direction="left")}},{key:"addSpeed",value:function(){this.instance.delta[this.directionAxis]!=this.instance.scroll[this.directionAxis]?this.instance.speed=(this.instance.delta[this.directionAxis]-this.instance.scroll[this.directionAxis])/Math.max(1,Date.now()-this.speedTs):this.instance.speed=0}},{key:"initScrollBar",value:function(){if(this.scrollbar=document.createElement("span"),this.scrollbarThumb=document.createElement("span"),this.scrollbar.classList.add("".concat(this.scrollbarClass)),this.scrollbarThumb.classList.add("".concat(this.scrollbarClass,"_thumb")),this.scrollbar.append(this.scrollbarThumb),this.scrollbarContainer?this.scrollbarContainer.append(this.scrollbar):document.body.append(this.scrollbar),this.getScrollBar=this.getScrollBar.bind(this),this.releaseScrollBar=this.releaseScrollBar.bind(this),this.moveScrollBar=this.moveScrollBar.bind(this),this.scrollbarThumb.addEventListener("mousedown",this.getScrollBar),window.addEventListener("mouseup",this.releaseScrollBar),window.addEventListener("mousemove",this.moveScrollBar),this.hasScrollbar=!1,"horizontal"==this.direction){if(this.instance.limit.x+this.windowWidth<=this.windowWidth)return}else if(this.instance.limit.y+this.windowHeight<=this.windowHeight)return;this.hasScrollbar=!0,this.scrollbarBCR=this.scrollbar.getBoundingClientRect(),this.scrollbarHeight=this.scrollbarBCR.height,this.scrollbarWidth=this.scrollbarBCR.width,"horizontal"===this.direction?this.scrollbarThumb.style.width="".concat(this.scrollbarWidth*this.scrollbarWidth/(this.instance.limit.x+this.scrollbarWidth),"px"):this.scrollbarThumb.style.height="".concat(this.scrollbarHeight*this.scrollbarHeight/(this.instance.limit.y+this.scrollbarHeight),"px"),this.scrollbarThumbBCR=this.scrollbarThumb.getBoundingClientRect(),this.scrollBarLimit={x:this.scrollbarWidth-this.scrollbarThumbBCR.width,y:this.scrollbarHeight-this.scrollbarThumbBCR.height}}},{key:"reinitScrollBar",value:function(){if(this.hasScrollbar=!1,"horizontal"==this.direction){if(this.instance.limit.x+this.windowWidth<=this.windowWidth)return}else if(this.instance.limit.y+this.windowHeight<=this.windowHeight)return;this.hasScrollbar=!0,this.scrollbarBCR=this.scrollbar.getBoundingClientRect(),this.scrollbarHeight=this.scrollbarBCR.height,this.scrollbarWidth=this.scrollbarBCR.width,"horizontal"===this.direction?this.scrollbarThumb.style.width="".concat(this.scrollbarWidth*this.scrollbarWidth/(this.instance.limit.x+this.scrollbarWidth),"px"):this.scrollbarThumb.style.height="".concat(this.scrollbarHeight*this.scrollbarHeight/(this.instance.limit.y+this.scrollbarHeight),"px"),this.scrollbarThumbBCR=this.scrollbarThumb.getBoundingClientRect(),this.scrollBarLimit={x:this.scrollbarWidth-this.scrollbarThumbBCR.width,y:this.scrollbarHeight-this.scrollbarThumbBCR.height}}},{key:"destroyScrollBar",value:function(){this.scrollbarThumb.removeEventListener("mousedown",this.getScrollBar),window.removeEventListener("mouseup",this.releaseScrollBar),window.removeEventListener("mousemove",this.moveScrollBar),this.scrollbar.remove()}},{key:"getScrollBar",value:function(t){this.isDraggingScrollbar=!0,this.checkScroll(),this.html.classList.remove(this.scrollingClass),this.html.classList.add(this.draggingClass)}},{key:"releaseScrollBar",value:function(t){this.isDraggingScrollbar=!1,this.isScrolling&&this.html.classList.add(this.scrollingClass),this.html.classList.remove(this.draggingClass)}},{key:"moveScrollBar",value:function(t){var e=this;this.isDraggingScrollbar&&requestAnimationFrame((function(){var i=100*(t.clientX-e.scrollbarBCR.left)/e.scrollbarWidth*e.instance.limit.x/100,n=100*(t.clientY-e.scrollbarBCR.top)/e.scrollbarHeight*e.instance.limit.y/100;n>0&&n<e.instance.limit.y&&(e.instance.delta.y=n),i>0&&i<e.instance.limit.x&&(e.instance.delta.x=i)}))}},{key:"addElements",value:function(){var t=this;this.els={},this.parallaxElements={},this.el.querySelectorAll("[data-".concat(this.name,"]")).forEach((function(e,i){var n,s,r,o=X(e),a=Object.entries(t.sections).map((function(t){var e=g(t,2);e[0];return e[1]})).find((function(t){return o.includes(t.el)})),l=e.dataset[t.name+"Class"]||t.class,c="string"==typeof e.dataset[t.name+"Id"]?e.dataset[t.name+"Id"]:"el"+i,d=e.dataset[t.name+"Repeat"],u=e.dataset[t.name+"Call"],h=e.dataset[t.name+"Position"],p=e.dataset[t.name+"Delay"],f=e.dataset[t.name+"Direction"],m="string"==typeof e.dataset[t.name+"Sticky"],v=!!e.dataset[t.name+"Speed"]&&parseFloat(e.dataset[t.name+"Speed"])/10,y="string"==typeof e.dataset[t.name+"Offset"]?e.dataset[t.name+"Offset"].split(","):t.offset,b=e.dataset[t.name+"Target"],w=(r=void 0!==b?document.querySelector("".concat(b)):e).getBoundingClientRect();null===a||a.inView?(n=w.top+t.instance.scroll.y-$(r).y,s=w.left+t.instance.scroll.x-$(r).x):(n=w.top-$(a.el).y-$(r).y,s=w.left-$(a.el).x-$(r).x);var _=n+r.offsetHeight,x=s+r.offsetWidth,T={x:(x-s)/2+s,y:(_-n)/2+n};if(m){var S=e.getBoundingClientRect(),E=S.top,C=S.left,k={x:C-s,y:E-n};n+=window.innerHeight,s+=window.innerWidth,_=E+r.offsetHeight-e.offsetHeight-k[t.directionAxis],T={x:((x=C+r.offsetWidth-e.offsetWidth-k[t.directionAxis])-s)/2+s,y:(_-n)/2+n}}d="false"!=d&&(null!=d||t.repeat);var M=[0,0];if(y)if("horizontal"===t.direction){for(var O=0;O<y.length;O++)"string"==typeof y[O]?y[O].includes("%")?M[O]=parseInt(y[O].replace("%","")*t.windowWidth/100):M[O]=parseInt(y[O]):M[O]=y[O];s+=M[0],x-=M[1]}else{for(O=0;O<y.length;O++)"string"==typeof y[O]?y[O].includes("%")?M[O]=parseInt(y[O].replace("%","")*t.windowHeight/100):M[O]=parseInt(y[O]):M[O]=y[O];n+=M[0],_-=M[1]}var A={el:e,id:c,class:l,section:a,top:n,middle:T,bottom:_,left:s,right:x,offset:y,progress:0,repeat:d,inView:!1,call:u,speed:v,delay:p,position:h,target:r,direction:f,sticky:m};t.els[c]=A,e.classList.contains(l)&&t.setInView(t.els[c],c),(!1!==v||m)&&(t.parallaxElements[c]=A)}))}},{key:"addSections",value:function(){var t=this;this.sections={};var e=this.el.querySelectorAll("[data-".concat(this.name,"-section]"));0===e.length&&(e=[this.el]),e.forEach((function(e,i){var n="string"==typeof e.dataset[t.name+"Id"]?e.dataset[t.name+"Id"]:"section"+i,s=e.getBoundingClientRect(),r={x:s.left-1.5*window.innerWidth-$(e).x,y:s.top-1.5*window.innerHeight-$(e).y},o={x:r.x+s.width+2*window.innerWidth,y:r.y+s.height+2*window.innerHeight},a="string"==typeof e.dataset[t.name+"Persistent"];e.setAttribute("data-scroll-section-id",n);var l={el:e,offset:r,limit:o,inView:!1,persistent:a,id:n};t.sections[n]=l}))}},{key:"transform",value:function(t,e,i,n){var s;if(n){var r=$(t),o=W(r.x,e,n),a=W(r.y,i,n);s="matrix3d(1,0,0.00,0,0.00,1,0.00,0,0,0,1,0,".concat(o,",").concat(a,",0,1)")}else s="matrix3d(1,0,0.00,0,0.00,1,0.00,0,0,0,1,0,".concat(e,",").concat(i,",0,1)");t.style.webkitTransform=s,t.style.msTransform=s,t.style.transform=s}},{key:"transformElements",value:function(t){var e=this,i=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=this.instance.scroll.x+this.windowWidth,s=this.instance.scroll.y+this.windowHeight,r={x:this.instance.scroll.x+this.windowMiddle.x,y:this.instance.scroll.y+this.windowMiddle.y};Object.entries(this.parallaxElements).forEach((function(o){var a=g(o,2),l=(a[0],a[1]),c=!1;if(t&&(c=0),l.inView||i)switch(l.position){case"top":case"left":c=e.instance.scroll[e.directionAxis]*-l.speed;break;case"elementTop":c=(s-l.top)*-l.speed;break;case"bottom":c=(e.instance.limit[e.directionAxis]-s+e.windowHeight)*l.speed;break;case"elementLeft":c=(n-l.left)*-l.speed;break;case"right":c=(e.instance.limit[e.directionAxis]-n+e.windowHeight)*l.speed;break;default:c=(r[e.directionAxis]-l.middle[e.directionAxis])*-l.speed}l.sticky&&(c=l.inView?"horizontal"===e.direction?e.instance.scroll.x-l.left+window.innerWidth:e.instance.scroll.y-l.top+window.innerHeight:"horizontal"===e.direction?e.instance.scroll.x<l.left-window.innerWidth&&e.instance.scroll.x<l.left-window.innerWidth/2?0:e.instance.scroll.x>l.right&&e.instance.scroll.x>l.right+100&&l.right-l.left+window.innerWidth:e.instance.scroll.y<l.top-window.innerHeight&&e.instance.scroll.y<l.top-window.innerHeight/2?0:e.instance.scroll.y>l.bottom&&e.instance.scroll.y>l.bottom+100&&l.bottom-l.top+window.innerHeight),!1!==c&&("horizontal"===l.direction||"horizontal"===e.direction&&"vertical"!==l.direction?e.transform(l.el,c,0,!t&&l.delay):e.transform(l.el,0,c,!t&&l.delay))}))}},{key:"scrollTo",value:function(t){var e=this,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=parseInt(i.offset)||0,s=isNaN(parseInt(i.duration))?1e3:parseInt(i.duration),r=i.easing||[.25,0,.35,1],o=!!i.disableLerp,a=!!i.callback&&i.callback;if(r=it.apply(void 0,m(r)),"string"==typeof t){if("top"===t)t=0;else if("bottom"===t)t=this.instance.limit.y;else if("left"===t)t=0;else if("right"===t)t=this.instance.limit.x;else if(!(t=document.querySelector(t)))return}else if("number"==typeof t)t=parseInt(t);else if(!t||!t.tagName)return void console.warn("`target` parameter is not valid");if("number"!=typeof t){if(!X(t).includes(this.el))return;var l=t.getBoundingClientRect(),c=l.top,d=l.left,u=X(t).find((function(t){return Object.entries(e.sections).map((function(t){var e=g(t,2);e[0];return e[1]})).find((function(e){return e.el==t}))})),h=0;h=u?$(u)[this.directionAxis]:-this.instance.scroll[this.directionAxis],n="horizontal"===this.direction?d+n-h:c+n-h}else n=t+n;var p=parseFloat(this.instance.delta[this.directionAxis]),f=Math.max(0,Math.min(n,this.instance.limit[this.directionAxis]))-p,v=function(t){o?"horizontal"===e.direction?e.setScroll(p+f*t,e.instance.delta.y):e.setScroll(e.instance.delta.x,p+f*t):e.instance.delta[e.directionAxis]=p+f*t};this.animatingScroll=!0,this.stopScrolling(),this.startScrolling();var y=Date.now();!function t(){var i=(Date.now()-y)/s;i>1?(v(1),e.animatingScroll=!1,0==s&&e.update(),a&&a()):(e.scrollToRaf=requestAnimationFrame(t),v(r(i)))}()}},{key:"update",value:function(){this.setScrollLimit(),this.addSections(),this.addElements(),this.detectElements(),this.updateScroll(),this.transformElements(!0),this.reinitScrollBar(),this.checkScroll(!0)}},{key:"startScroll",value:function(){this.stop=!1}},{key:"stopScroll",value:function(){this.stop=!0}},{key:"setScroll",value:function(t,e){this.instance=l(l({},this.instance),{},{scroll:{x:t,y:e},delta:{x:t,y:e},speed:0})}},{key:"destroy",value:function(){f(d(i.prototype),"destroy",this).call(this),this.stopScrolling(),this.html.classList.remove(this.smoothClass),this.vs.destroy(),this.destroyScrollBar(),window.removeEventListener("keydown",this.checkKey,!1)}}]),i}(w);const ht=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};n(this,t),this.options=e,Object.assign(this,b,e),this.smartphone=b.smartphone,e.smartphone&&Object.assign(this.smartphone,e.smartphone),this.tablet=b.tablet,e.tablet&&Object.assign(this.tablet,e.tablet),this.smooth||"horizontal"!=this.direction||console.warn("🚨 `smooth:false` & `horizontal` direction are not yet compatible"),this.tablet.smooth||"horizontal"!=this.tablet.direction||console.warn("🚨 `smooth:false` & `horizontal` direction are not yet compatible (tablet)"),this.smartphone.smooth||"horizontal"!=this.smartphone.direction||console.warn("🚨 `smooth:false` & `horizontal` direction are not yet compatible (smartphone)"),this.init()}return r(t,[{key:"init",value:function(){if(this.options.isMobile=/Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||"MacIntel"===navigator.platform&&navigator.maxTouchPoints>1||window.innerWidth<this.tablet.breakpoint,this.options.isTablet=this.options.isMobile&&window.innerWidth>=this.tablet.breakpoint,this.smooth&&!this.options.isMobile||this.tablet.smooth&&this.options.isTablet||this.smartphone.smooth&&this.options.isMobile&&!this.options.isTablet?this.scroll=new ut(this.options):this.scroll=new S(this.options),this.scroll.init(),window.location.hash){var t=window.location.hash.slice(1,window.location.hash.length),e=document.getElementById(t);e&&this.scroll.scrollTo(e)}}},{key:"update",value:function(){this.scroll.update()}},{key:"start",value:function(){this.scroll.startScroll()}},{key:"stop",value:function(){this.scroll.stopScroll()}},{key:"scrollTo",value:function(t,e){this.scroll.scrollTo(t,e)}},{key:"setScroll",value:function(t,e){this.scroll.setScroll(t,e)}},{key:"on",value:function(t,e){this.scroll.setEvents(t,e)}},{key:"off",value:function(t,e){this.scroll.unsetEvents(t,e)}},{key:"destroy",value:function(){this.scroll.destroy()}}]),t}()}},n={};function s(t){var e=n[t];if(void 0!==e)return e.exports;var r=n[t]={exports:{}};return i[t](r,r.exports,s),r.exports}s.m=i,s.d=(t,e)=>{for(var i in e)s.o(e,i)&&!s.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},s.f={},s.e=t=>Promise.all(Object.keys(s.f).reduce(((e,i)=>(s.f[i](t,e),e)),[])),s.u=t=>"js/"+t+".js",s.miniCssF=t=>"css/"+t+".css",s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),s.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),t={},e="webpack-setup:",s.l=(i,n,r,o)=>{if(t[i])t[i].push(n);else{var a,l;if(void 0!==r)for(var c=document.getElementsByTagName("script"),d=0;d<c.length;d++){var u=c[d];if(u.getAttribute("src")==i||u.getAttribute("data-webpack")==e+r){a=u;break}}a||(l=!0,(a=document.createElement("script")).charset="utf-8",a.timeout=120,s.nc&&a.setAttribute("nonce",s.nc),a.setAttribute("data-webpack",e+r),a.src=i),t[i]=[n];var h=(e,n)=>{a.onerror=a.onload=null,clearTimeout(p);var s=t[i];if(delete t[i],a.parentNode&&a.parentNode.removeChild(a),s&&s.forEach((t=>t(n))),e)return e(n)},p=setTimeout(h.bind(null,void 0,{type:"timeout",target:a}),12e4);a.onerror=h.bind(null,a.onerror),a.onload=h.bind(null,a.onload),l&&document.head.appendChild(a)}},s.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{var t;s.g.importScripts&&(t=s.g.location+"");var e=s.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var i=e.getElementsByTagName("script");if(i.length)for(var n=i.length-1;n>-1&&(!t||!/^http(s?):/.test(t));)t=i[n--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),s.p=t+"../"})(),(()=>{if("undefined"!=typeof document){var t=t=>new Promise(((e,i)=>{var n=s.miniCssF(t),r=s.p+n;if(((t,e)=>{for(var i=document.getElementsByTagName("link"),n=0;n<i.length;n++){var s=(o=i[n]).getAttribute("data-href")||o.getAttribute("href");if("stylesheet"===o.rel&&(s===t||s===e))return o}var r=document.getElementsByTagName("style");for(n=0;n<r.length;n++){var o;if((s=(o=r[n]).getAttribute("data-href"))===t||s===e)return o}})(n,r))return e();((t,e,i,n,r)=>{var o=document.createElement("link");o.rel="stylesheet",o.type="text/css",s.nc&&(o.nonce=s.nc),o.onerror=o.onload=i=>{if(o.onerror=o.onload=null,"load"===i.type)n();else{var s=i&&i.type,a=i&&i.target&&i.target.href||e,l=new Error("Loading CSS chunk "+t+" failed.\n("+s+": "+a+")");l.name="ChunkLoadError",l.code="CSS_CHUNK_LOAD_FAILED",l.type=s,l.request=a,o.parentNode&&o.parentNode.removeChild(o),r(l)}},o.href=e,i?i.parentNode.insertBefore(o,i.nextSibling):document.head.appendChild(o)})(t,r,null,e,i)})),e={335:0,633:0,14:0,395:0,345:0,738:0};s.f.miniCss=(i,n)=>{e[i]?n.push(e[i]):0!==e[i]&&{11:1,822:1}[i]&&n.push(e[i]=t(i).then((()=>{e[i]=0}),(t=>{throw delete e[i],t})))}}})(),(()=>{var t={335:0,633:0,14:0,395:0,345:0,738:0};s.f.j=(e,i)=>{var n=s.o(t,e)?t[e]:void 0;if(0!==n)if(n)i.push(n[2]);else{var r=new Promise(((i,s)=>n=t[e]=[i,s]));i.push(n[2]=r);var o=s.p+s.u(e),a=new Error;s.l(o,(i=>{if(s.o(t,e)&&(0!==(n=t[e])&&(t[e]=void 0),n)){var r=i&&("load"===i.type?"missing":i.type),o=i&&i.target&&i.target.src;a.message="Loading chunk "+e+" failed.\n("+r+": "+o+")",a.name="ChunkLoadError",a.type=r,a.request=o,n[1](a)}}),"chunk-"+e,e)}};var e=(e,i)=>{var n,r,o=i[0],a=i[1],l=i[2],c=0;if(o.some((e=>0!==t[e]))){for(n in a)s.o(a,n)&&(s.m[n]=a[n]);if(l)l(s)}for(e&&e(i);c<o.length;c++)r=o[c],s.o(t,r)&&t[r]&&t[r][0](),t[r]=0},i=self.webpackChunkwebpack_setup=self.webpackChunkwebpack_setup||[];i.forEach(e.bind(null,0)),i.push=e.bind(null,i.push.bind(i))})();s(1135);var r=function(){return r=Object.assign||function(t){for(var e,i=1,n=arguments.length;i<n;i++)for(var s in e=arguments[i])Object.prototype.hasOwnProperty.call(e,s)&&(t[s]=e[s]);return t},r.apply(this,arguments)};var o="lgAfterAppendSlide",a="lgInit",l="lgHasVideo",c="lgContainerResize",d="lgUpdateSlides",u="lgAfterAppendSubHtml",h="lgBeforeOpen",p="lgAfterOpen",f="lgSlideItemLoad",g="lgBeforeSlide",m="lgAfterSlide",v="lgPosterClick",y="lgDragStart",b="lgDragMove",w="lgDragEnd",_="lgBeforeNextSlide",x="lgBeforePrevSlide",T="lgBeforeClose",S="lgAfterClose",E={mode:"lg-slide",easing:"ease",speed:400,licenseKey:"0000-0000-000-0000",height:"100%",width:"100%",addClass:"",startClass:"lg-start-zoom",backdropDuration:300,container:"",startAnimationDuration:400,zoomFromOrigin:!0,hideBarsDelay:0,showBarsAfter:1e4,slideDelay:0,supportLegacyBrowser:!0,allowMediaOverlap:!1,videoMaxSize:"1280-720",loadYouTubePoster:!0,defaultCaptionHeight:0,ariaLabelledby:"",ariaDescribedby:"",resetScrollPosition:!0,hideScrollbar:!1,closable:!0,swipeToClose:!0,closeOnTap:!0,showCloseIcon:!0,showMaximizeIcon:!1,loop:!0,escKey:!0,keyPress:!0,trapFocus:!0,controls:!0,slideEndAnimation:!0,hideControlOnEnd:!1,mousewheel:!1,getCaptionFromTitleOrAlt:!0,appendSubHtmlTo:".lg-sub-html",subHtmlSelectorRelative:!1,preload:2,numberOfSlideItemsInDom:10,selector:"",selectWithin:"",nextHtml:"",prevHtml:"",index:0,iframeWidth:"100%",iframeHeight:"100%",iframeMaxWidth:"100%",iframeMaxHeight:"100%",download:!0,counter:!0,appendCounterTo:".lg-toolbar",swipeThreshold:50,enableSwipe:!0,enableDrag:!0,dynamic:!1,dynamicEl:[],extraProps:[],exThumbImage:"",isMobile:void 0,mobileSettings:{controls:!1,showCloseIcon:!1,download:!1},plugins:[],strings:{closeGallery:"Close gallery",toggleMaximize:"Toggle maximize",previousSlide:"Previous slide",nextSlide:"Next slide",download:"Download",playVideo:"Play video",mediaLoadingFailed:"Oops... Failed to load content..."}};var C=function(){function t(t){return this.cssVenderPrefixes=["TransitionDuration","TransitionTimingFunction","Transform","Transition"],this.selector=this._getSelector(t),this.firstElement=this._getFirstEl(),this}return t.generateUUID=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(t){var e=16*Math.random()|0;return("x"==t?e:3&e|8).toString(16)}))},t.prototype._getSelector=function(t,e){return void 0===e&&(e=document),"string"!=typeof t?t:(e=e||document,"#"===t.substring(0,1)?e.querySelector(t):e.querySelectorAll(t))},t.prototype._each=function(t){return this.selector?(void 0!==this.selector.length?[].forEach.call(this.selector,t):t(this.selector,0),this):this},t.prototype._setCssVendorPrefix=function(t,e,i){var n=e.replace(/-([a-z])/gi,(function(t,e){return e.toUpperCase()}));-1!==this.cssVenderPrefixes.indexOf(n)?(t.style[n.charAt(0).toLowerCase()+n.slice(1)]=i,t.style["webkit"+n]=i,t.style["moz"+n]=i,t.style["ms"+n]=i,t.style["o"+n]=i):t.style[n]=i},t.prototype._getFirstEl=function(){return this.selector&&void 0!==this.selector.length?this.selector[0]:this.selector},t.prototype.isEventMatched=function(t,e){var i=e.split(".");return t.split(".").filter((function(t){return t})).every((function(t){return-1!==i.indexOf(t)}))},t.prototype.attr=function(t,e){return void 0===e?this.firstElement?this.firstElement.getAttribute(t):"":(this._each((function(i){i.setAttribute(t,e)})),this)},t.prototype.find=function(t){return k(this._getSelector(t,this.selector))},t.prototype.first=function(){return this.selector&&void 0!==this.selector.length?k(this.selector[0]):k(this.selector)},t.prototype.eq=function(t){return k(this.selector[t])},t.prototype.parent=function(){return k(this.selector.parentElement)},t.prototype.get=function(){return this._getFirstEl()},t.prototype.removeAttr=function(t){var e=t.split(" ");return this._each((function(t){e.forEach((function(e){return t.removeAttribute(e)}))})),this},t.prototype.wrap=function(t){if(!this.firstElement)return this;var e=document.createElement("div");return e.className=t,this.firstElement.parentNode.insertBefore(e,this.firstElement),this.firstElement.parentNode.removeChild(this.firstElement),e.appendChild(this.firstElement),this},t.prototype.addClass=function(t){return void 0===t&&(t=""),this._each((function(e){t.split(" ").forEach((function(t){t&&e.classList.add(t)}))})),this},t.prototype.removeClass=function(t){return this._each((function(e){t.split(" ").forEach((function(t){t&&e.classList.remove(t)}))})),this},t.prototype.hasClass=function(t){return!!this.firstElement&&this.firstElement.classList.contains(t)},t.prototype.hasAttribute=function(t){return!!this.firstElement&&this.firstElement.hasAttribute(t)},t.prototype.toggleClass=function(t){return this.firstElement?(this.hasClass(t)?this.removeClass(t):this.addClass(t),this):this},t.prototype.css=function(t,e){var i=this;return this._each((function(n){i._setCssVendorPrefix(n,t,e)})),this},t.prototype.on=function(e,i){var n=this;return this.selector?(e.split(" ").forEach((function(e){Array.isArray(t.eventListeners[e])||(t.eventListeners[e]=[]),t.eventListeners[e].push(i),n.selector.addEventListener(e.split(".")[0],i)})),this):this},t.prototype.once=function(t,e){var i=this;return this.on(t,(function(){i.off(t),e(t)})),this},t.prototype.off=function(e){var i=this;return this.selector?(Object.keys(t.eventListeners).forEach((function(n){i.isEventMatched(e,n)&&(t.eventListeners[n].forEach((function(t){i.selector.removeEventListener(n.split(".")[0],t)})),t.eventListeners[n]=[])})),this):this},t.prototype.trigger=function(t,e){if(!this.firstElement)return this;var i=new CustomEvent(t.split(".")[0],{detail:e||null});return this.firstElement.dispatchEvent(i),this},t.prototype.load=function(t){var e=this;return fetch(t).then((function(t){return t.text()})).then((function(t){e.selector.innerHTML=t})),this},t.prototype.html=function(t){return void 0===t?this.firstElement?this.firstElement.innerHTML:"":(this._each((function(e){e.innerHTML=t})),this)},t.prototype.append=function(t){return this._each((function(e){"string"==typeof t?e.insertAdjacentHTML("beforeend",t):e.appendChild(t)})),this},t.prototype.prepend=function(t){return this._each((function(e){e.insertAdjacentHTML("afterbegin",t)})),this},t.prototype.remove=function(){return this._each((function(t){t.parentNode.removeChild(t)})),this},t.prototype.empty=function(){return this._each((function(t){t.innerHTML=""})),this},t.prototype.scrollTop=function(t){return void 0!==t?(document.body.scrollTop=t,document.documentElement.scrollTop=t,this):window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0},t.prototype.scrollLeft=function(t){return void 0!==t?(document.body.scrollLeft=t,document.documentElement.scrollLeft=t,this):window.pageXOffset||document.documentElement.scrollLeft||document.body.scrollLeft||0},t.prototype.offset=function(){if(!this.firstElement)return{left:0,top:0};var t=this.firstElement.getBoundingClientRect(),e=k("body").style().marginLeft;return{left:t.left-parseFloat(e)+this.scrollLeft(),top:t.top+this.scrollTop()}},t.prototype.style=function(){return this.firstElement?this.firstElement.currentStyle||window.getComputedStyle(this.firstElement):{}},t.prototype.width=function(){var t=this.style();return this.firstElement.clientWidth-parseFloat(t.paddingLeft)-parseFloat(t.paddingRight)},t.prototype.height=function(){var t=this.style();return this.firstElement.clientHeight-parseFloat(t.paddingTop)-parseFloat(t.paddingBottom)},t.eventListeners={},t}();function k(t){return function(){if("function"==typeof window.CustomEvent)return!1;window.CustomEvent=function(t,e){e=e||{bubbles:!1,cancelable:!1,detail:null};var i=document.createEvent("CustomEvent");return i.initCustomEvent(t,e.bubbles,e.cancelable,e.detail),i}}(),Element.prototype.matches||(Element.prototype.matches=Element.prototype.msMatchesSelector||Element.prototype.webkitMatchesSelector),new C(t)}var M=["src","sources","subHtml","subHtmlUrl","html","video","poster","slideName","responsive","srcset","sizes","iframe","downloadUrl","download","width","facebookShareUrl","tweetText","iframeTitle","twitterShareUrl","pinterestShareUrl","pinterestText","fbHtml","disqusIdentifier","disqusUrl"];function O(t){return"href"===t?"src":t=(t=(t=t.replace("data-","")).charAt(0).toLowerCase()+t.slice(1)).replace(/-([a-z])/g,(function(t){return t[1].toUpperCase()}))}var A=function(t,e,i,n){void 0===i&&(i=0);var s=k(t).attr("data-lg-size")||n;if(s){var r=s.split(",");if(r[1])for(var o=window.innerWidth,a=0;a<r.length;a++){var l=r[a];if(parseInt(l.split("-")[2],10)>o){s=l;break}a===r.length-1&&(s=l)}var c=s.split("-"),d=parseInt(c[0],10),u=parseInt(c[1],10),h=e.width(),p=e.height()-i,f=Math.min(h,d),g=Math.min(p,u),m=Math.min(f/d,g/u);return{width:d*m,height:u*m}}},I=function(t,e,i,n,s){if(s){var r=k(t).find("img").first();if(r.get()){var o=e.get().getBoundingClientRect(),a=o.width,l=e.height()-(i+n),c=r.width(),d=r.height(),u=r.style(),h=(a-c)/2-r.offset().left+(parseFloat(u.paddingLeft)||0)+(parseFloat(u.borderLeft)||0)+k(window).scrollLeft()+o.left,p=(l-d)/2-r.offset().top+(parseFloat(u.paddingTop)||0)+(parseFloat(u.borderTop)||0)+k(window).scrollTop()+i;return"translate3d("+(h*=-1)+"px, "+(p*=-1)+"px, 0) scale3d("+c/s.width+", "+d/s.height+", 1)"}}},P=function(t,e,i,n,s,r){return'<div class="lg-video-cont lg-has-iframe" style="width:'+t+"; max-width:"+i+"; height: "+e+"; max-height:"+n+'">\n                    <iframe class="lg-object" frameborder="0" '+(r?'title="'+r+'"':"")+' src="'+s+'"  allowfullscreen="true"></iframe>\n                </div>'},L=function(t,e,i,n,s,r){var o="<img "+i+" "+(n?'srcset="'+n+'"':"")+"  "+(s?'sizes="'+s+'"':"")+' class="lg-object lg-image" data-index="'+t+'" src="'+e+'" />',a="";r&&(a=("string"==typeof r?JSON.parse(r):r).map((function(t){var e="";return Object.keys(t).forEach((function(i){e+=" "+i+'="'+t[i]+'"'})),"<source "+e+"></source>"})));return""+a+o},D=function(t){for(var e=[],i=[],n="",s=0;s<t.length;s++){var r=t[s].split(" ");""===r[0]&&r.splice(0,1),i.push(r[0]),e.push(r[1])}for(var o=window.innerWidth,a=0;a<e.length;a++)if(parseInt(e[a],10)>o){n=i[a];break}return n},z=function(t){return!!t&&(!!t.complete&&0!==t.naturalWidth)},B=function(t,e,i,n,s){return'<div class="lg-video-cont '+(s&&s.youtube?"lg-has-youtube":s&&s.vimeo?"lg-has-vimeo":"lg-has-html5")+'" style="'+i+'">\n                <div class="lg-video-play-button">\n                <svg\n                    viewBox="0 0 20 20"\n                    preserveAspectRatio="xMidYMid"\n                    focusable="false"\n                    aria-labelledby="'+n+'"\n                    role="img"\n                    class="lg-video-play-icon"\n                >\n                    <title>'+n+'</title>\n                    <polygon class="lg-video-play-icon-inner" points="1,0 20,10 1,20"></polygon>\n                </svg>\n                <svg class="lg-video-play-icon-bg" viewBox="0 0 50 50" focusable="false">\n                    <circle cx="50%" cy="50%" r="20"></circle></svg>\n                <svg class="lg-video-play-icon-circle" viewBox="0 0 50 50" focusable="false">\n                    <circle cx="50%" cy="50%" r="20"></circle>\n                </svg>\n            </div>\n            '+(e||"")+'\n            <img class="lg-object lg-video-poster" src="'+t+'" />\n        </div>'},F=function(t){var e=t.querySelectorAll('a[href]:not([disabled]), button:not([disabled]), textarea:not([disabled]), input[type="text"]:not([disabled]), input[type="radio"]:not([disabled]), input[type="checkbox"]:not([disabled]), select:not([disabled])');return[].filter.call(e,(function(t){var e=window.getComputedStyle(t);return"none"!==e.display&&"hidden"!==e.visibility}))},R=function(t,e,i,n){var s=[],r=function(){for(var t=0,e=0,i=arguments.length;e<i;e++)t+=arguments[e].length;var n=Array(t),s=0;for(e=0;e<i;e++)for(var r=arguments[e],o=0,a=r.length;o<a;o++,s++)n[s]=r[o];return n}(M,e);return[].forEach.call(t,(function(t){for(var e={},o=0;o<t.attributes.length;o++){var a=t.attributes[o];if(a.specified){var l=O(a.name),c="";r.indexOf(l)>-1&&(c=l),c&&(e[c]=a.value)}}var d=k(t),u=d.find("img").first().attr("alt"),h=d.attr("title"),p=n?d.attr(n):d.find("img").first().attr("src");e.thumb=p,i&&!e.subHtml&&(e.subHtml=h||u||""),e.alt=u||h||"",s.push(e)})),s},H=function(){return/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)},G=function(t,e,i){if(!t)return e?{html5:!0}:void console.error("lightGallery :- data-src is not provided on slide item "+(i+1)+". Please make sure the selector property is properly configured. More info - https://www.lightgalleryjs.com/demos/html-markup/");var n=t.match(/\/\/(?:www\.)?youtu(?:\.be|be\.com|be-nocookie\.com)\/(?:watch\?v=|embed\/)?([a-z0-9\-\_\%]+)([\&|?][\S]*)*/i),s=t.match(/\/\/(?:www\.)?(?:player\.)?vimeo.com\/(?:video\/)?([0-9a-z\-_]+)(.*)?/i),r=t.match(/https?:\/\/(.+)?(wistia\.com|wi\.st)\/(medias|embed)\/([0-9a-z\-_]+)(.*)/);return n?{youtube:n}:s?{vimeo:s}:r?{wistia:r}:void 0},Y=0,N=function(){function t(t,e){if(this.lgOpened=!1,this.index=0,this.plugins=[],this.lGalleryOn=!1,this.lgBusy=!1,this.currentItemsInDom=[],this.prevScrollTop=0,this.bodyPaddingRight=0,this.isDummyImageRemoved=!1,this.dragOrSwipeEnabled=!1,this.mediaContainerPosition={top:0,bottom:0},!t)return this;if(Y++,this.lgId=Y,this.el=t,this.LGel=k(t),this.generateSettings(e),this.buildModules(),this.settings.dynamic&&void 0!==this.settings.dynamicEl&&!Array.isArray(this.settings.dynamicEl))throw"When using dynamic mode, you must also define dynamicEl as an Array.";return this.galleryItems=this.getItems(),this.normalizeSettings(),this.init(),this.validateLicense(),this}return t.prototype.generateSettings=function(t){if(this.settings=r(r({},E),t),this.settings.isMobile&&"function"==typeof this.settings.isMobile?this.settings.isMobile():H()){var e=r(r({},this.settings.mobileSettings),this.settings.mobileSettings);this.settings=r(r({},this.settings),e)}},t.prototype.normalizeSettings=function(){this.settings.slideEndAnimation&&(this.settings.hideControlOnEnd=!1),this.settings.closable||(this.settings.swipeToClose=!1),this.zoomFromOrigin=this.settings.zoomFromOrigin,this.settings.dynamic&&(this.zoomFromOrigin=!1),this.settings.container||(this.settings.container=document.body),this.settings.preload=Math.min(this.settings.preload,this.galleryItems.length)},t.prototype.init=function(){var t=this;this.addSlideVideoInfo(this.galleryItems),this.buildStructure(),this.LGel.trigger(a,{instance:this}),this.settings.keyPress&&this.keyPress(),setTimeout((function(){t.enableDrag(),t.enableSwipe(),t.triggerPosterClick()}),50),this.arrow(),this.settings.mousewheel&&this.mousewheel(),this.settings.dynamic||this.openGalleryOnItemClick()},t.prototype.openGalleryOnItemClick=function(){for(var t=this,e=function(e){var n=i.items[e],s=k(n),r=C.generateUUID();s.attr("data-lg-id",r).on("click.lgcustom-item-"+r,(function(i){i.preventDefault();var s=t.settings.index||e;t.openGallery(s,n)}))},i=this,n=0;n<this.items.length;n++)e(n)},t.prototype.buildModules=function(){var t=this;this.settings.plugins.forEach((function(e){t.plugins.push(new e(t,k))}))},t.prototype.validateLicense=function(){this.settings.licenseKey?"0000-0000-000-0000"===this.settings.licenseKey&&console.warn("lightGallery: "+this.settings.licenseKey+" license key is not valid for production use"):console.error("Please provide a valid license key")},t.prototype.getSlideItem=function(t){return k(this.getSlideItemId(t))},t.prototype.getSlideItemId=function(t){return"#lg-item-"+this.lgId+"-"+t},t.prototype.getIdName=function(t){return t+"-"+this.lgId},t.prototype.getElementById=function(t){return k("#"+this.getIdName(t))},t.prototype.manageSingleSlideClassName=function(){this.galleryItems.length<2?this.outer.addClass("lg-single-item"):this.outer.removeClass("lg-single-item")},t.prototype.buildStructure=function(){var t=this;if(!(this.$container&&this.$container.get())){var e="",i="";this.settings.controls&&(e='<button type="button" id="'+this.getIdName("lg-prev")+'" aria-label="'+this.settings.strings.previousSlide+'" class="lg-prev lg-icon"> '+this.settings.prevHtml+' </button>\n                <button type="button" id="'+this.getIdName("lg-next")+'" aria-label="'+this.settings.strings.nextSlide+'" class="lg-next lg-icon"> '+this.settings.nextHtml+" </button>"),".lg-item"!==this.settings.appendSubHtmlTo&&(i='<div class="lg-sub-html" role="status" aria-live="polite"></div>');var n="";this.settings.allowMediaOverlap&&(n+="lg-media-overlap ");var s=this.settings.ariaLabelledby?'aria-labelledby="'+this.settings.ariaLabelledby+'"':"",r=this.settings.ariaDescribedby?'aria-describedby="'+this.settings.ariaDescribedby+'"':"",o="lg-container "+this.settings.addClass+" "+(document.body!==this.settings.container?"lg-inline":""),a=this.settings.closable&&this.settings.showCloseIcon?'<button type="button" aria-label="'+this.settings.strings.closeGallery+'" id="'+this.getIdName("lg-close")+'" class="lg-close lg-icon"></button>':"",l=this.settings.showMaximizeIcon?'<button type="button" aria-label="'+this.settings.strings.toggleMaximize+'" id="'+this.getIdName("lg-maximize")+'" class="lg-maximize lg-icon"></button>':"",c='\n        <div class="'+o+'" id="'+this.getIdName("lg-container")+'" tabindex="-1" aria-modal="true" '+s+" "+r+' role="dialog"\n        >\n            <div id="'+this.getIdName("lg-backdrop")+'" class="lg-backdrop"></div>\n\n            <div id="'+this.getIdName("lg-outer")+'" class="lg-outer lg-use-css3 lg-css3 lg-hide-items '+n+' ">\n\n              <div id="'+this.getIdName("lg-content")+'" class="lg-content">\n                <div id="'+this.getIdName("lg-inner")+'" class="lg-inner">\n                </div>\n                '+e+'\n              </div>\n                <div id="'+this.getIdName("lg-toolbar")+'" class="lg-toolbar lg-group">\n                    '+l+"\n                    "+a+"\n                    </div>\n                    "+(".lg-outer"===this.settings.appendSubHtmlTo?i:"")+'\n                <div id="'+this.getIdName("lg-components")+'" class="lg-components">\n                    '+(".lg-sub-html"===this.settings.appendSubHtmlTo?i:"")+"\n                </div>\n            </div>\n        </div>\n        ";k(this.settings.container).append(c),document.body!==this.settings.container&&k(this.settings.container).css("position","relative"),this.outer=this.getElementById("lg-outer"),this.$lgComponents=this.getElementById("lg-components"),this.$backdrop=this.getElementById("lg-backdrop"),this.$container=this.getElementById("lg-container"),this.$inner=this.getElementById("lg-inner"),this.$content=this.getElementById("lg-content"),this.$toolbar=this.getElementById("lg-toolbar"),this.$backdrop.css("transition-duration",this.settings.backdropDuration+"ms");var d=this.settings.mode+" ";this.manageSingleSlideClassName(),this.settings.enableDrag&&(d+="lg-grab "),this.outer.addClass(d),this.$inner.css("transition-timing-function",this.settings.easing),this.$inner.css("transition-duration",this.settings.speed+"ms"),this.settings.download&&this.$toolbar.append('<a id="'+this.getIdName("lg-download")+'" target="_blank" rel="noopener" aria-label="'+this.settings.strings.download+'" download class="lg-download lg-icon"></a>'),this.counter(),k(window).on("resize.lg.global"+this.lgId+" orientationchange.lg.global"+this.lgId,(function(){t.refreshOnResize()})),this.hideBars(),this.manageCloseGallery(),this.toggleMaximize(),this.initModules()}},t.prototype.refreshOnResize=function(){if(this.lgOpened){var t=this.galleryItems[this.index].__slideVideoInfo;this.mediaContainerPosition=this.getMediaContainerPosition();var e=this.mediaContainerPosition,i=e.top,n=e.bottom;if(this.currentImageSize=A(this.items[this.index],this.outer,i+n,t&&this.settings.videoMaxSize),t&&this.resizeVideoSlide(this.index,this.currentImageSize),this.zoomFromOrigin&&!this.isDummyImageRemoved){var s=this.getDummyImgStyles(this.currentImageSize);this.outer.find(".lg-current .lg-dummy-img").first().attr("style",s)}this.LGel.trigger(c)}},t.prototype.resizeVideoSlide=function(t,e){var i=this.getVideoContStyle(e);this.getSlideItem(t).find(".lg-video-cont").attr("style",i)},t.prototype.updateSlides=function(t,e){if(this.index>t.length-1&&(this.index=t.length-1),1===t.length&&(this.index=0),t.length){var i=this.galleryItems[e].src;this.galleryItems=t,this.updateControls(),this.$inner.empty(),this.currentItemsInDom=[];var n=0;this.galleryItems.some((function(t,e){return t.src===i&&(n=e,!0)})),this.currentItemsInDom=this.organizeSlideItems(n,-1),this.loadContent(n,!0),this.getSlideItem(n).addClass("lg-current"),this.index=n,this.updateCurrentCounter(n),this.LGel.trigger(d)}else this.closeGallery()},t.prototype.getItems=function(){if(this.items=[],this.settings.dynamic)return this.settings.dynamicEl||[];if("this"===this.settings.selector)this.items.push(this.el);else if(this.settings.selector)if("string"==typeof this.settings.selector)if(this.settings.selectWithin){var t=k(this.settings.selectWithin);this.items=t.find(this.settings.selector).get()}else this.items=this.el.querySelectorAll(this.settings.selector);else this.items=this.settings.selector;else this.items=this.el.children;return R(this.items,this.settings.extraProps,this.settings.getCaptionFromTitleOrAlt,this.settings.exThumbImage)},t.prototype.shouldHideScrollbar=function(){return this.settings.hideScrollbar&&document.body===this.settings.container},t.prototype.hideScrollbar=function(){if(this.shouldHideScrollbar()){this.bodyPaddingRight=parseFloat(k("body").style().paddingRight);var t=document.documentElement.getBoundingClientRect(),e=window.innerWidth-t.width;k(document.body).css("padding-right",e+this.bodyPaddingRight+"px"),k(document.body).addClass("lg-overlay-open")}},t.prototype.resetScrollBar=function(){this.shouldHideScrollbar()&&(k(document.body).css("padding-right",this.bodyPaddingRight+"px"),k(document.body).removeClass("lg-overlay-open"))},t.prototype.openGallery=function(t,e){var i=this;if(void 0===t&&(t=this.settings.index),!this.lgOpened){this.lgOpened=!0,this.outer.removeClass("lg-hide-items"),this.hideScrollbar(),this.$container.addClass("lg-show");var n=this.getItemsToBeInsertedToDom(t,t);this.currentItemsInDom=n;var s="";n.forEach((function(t){s=s+'<div id="'+t+'" class="lg-item"></div>'})),this.$inner.append(s),this.addHtml(t);var r="";this.mediaContainerPosition=this.getMediaContainerPosition();var o=this.mediaContainerPosition,a=o.top,l=o.bottom;this.settings.allowMediaOverlap||this.setMediaContainerPosition(a,l);var c=this.galleryItems[t].__slideVideoInfo;this.zoomFromOrigin&&e&&(this.currentImageSize=A(e,this.outer,a+l,c&&this.settings.videoMaxSize),r=I(e,this.outer,a,l,this.currentImageSize)),this.zoomFromOrigin&&r||(this.outer.addClass(this.settings.startClass),this.getSlideItem(t).removeClass("lg-complete"));var d=this.settings.zoomFromOrigin?100:this.settings.backdropDuration;setTimeout((function(){i.outer.addClass("lg-components-open")}),d),this.index=t,this.LGel.trigger(h),this.getSlideItem(t).addClass("lg-current"),this.lGalleryOn=!1,this.prevScrollTop=k(window).scrollTop(),setTimeout((function(){if(i.zoomFromOrigin&&r){var e=i.getSlideItem(t);e.css("transform",r),setTimeout((function(){e.addClass("lg-start-progress lg-start-end-progress").css("transition-duration",i.settings.startAnimationDuration+"ms"),i.outer.addClass("lg-zoom-from-image")})),setTimeout((function(){e.css("transform","translate3d(0, 0, 0)")}),100)}setTimeout((function(){i.$backdrop.addClass("in"),i.$container.addClass("lg-show-in")}),10),setTimeout((function(){i.settings.trapFocus&&document.body===i.settings.container&&i.trapFocus()}),i.settings.backdropDuration+50),i.zoomFromOrigin&&r||setTimeout((function(){i.outer.addClass("lg-visible")}),i.settings.backdropDuration),i.slide(t,!1,!1,!1),i.LGel.trigger(p)})),document.body===this.settings.container&&k("html").addClass("lg-on")}},t.prototype.getMediaContainerPosition=function(){if(this.settings.allowMediaOverlap)return{top:0,bottom:0};var t=this.$toolbar.get().clientHeight||0,e=this.outer.find(".lg-components .lg-sub-html").get(),i=this.settings.defaultCaptionHeight||e&&e.clientHeight||0,n=this.outer.find(".lg-thumb-outer").get();return{top:t,bottom:(n?n.clientHeight:0)+i}},t.prototype.setMediaContainerPosition=function(t,e){void 0===t&&(t=0),void 0===e&&(e=0),this.$content.css("top",t+"px").css("bottom",e+"px")},t.prototype.hideBars=function(){var t=this;setTimeout((function(){t.outer.removeClass("lg-hide-items"),t.settings.hideBarsDelay>0&&(t.outer.on("mousemove.lg click.lg touchstart.lg",(function(){t.outer.removeClass("lg-hide-items"),clearTimeout(t.hideBarTimeout),t.hideBarTimeout=setTimeout((function(){t.outer.addClass("lg-hide-items")}),t.settings.hideBarsDelay)})),t.outer.trigger("mousemove.lg"))}),this.settings.showBarsAfter)},t.prototype.initPictureFill=function(t){if(this.settings.supportLegacyBrowser)try{picturefill({elements:[t.get()]})}catch(t){console.warn("lightGallery :- If you want srcset or picture tag to be supported for older browser please include picturefil javascript library in your document.")}},t.prototype.counter=function(){if(this.settings.counter){var t='<div class="lg-counter" role="status" aria-live="polite">\n                <span id="'+this.getIdName("lg-counter-current")+'" class="lg-counter-current">'+(this.index+1)+' </span> /\n                <span id="'+this.getIdName("lg-counter-all")+'" class="lg-counter-all">'+this.galleryItems.length+" </span></div>";this.outer.find(this.settings.appendCounterTo).append(t)}},t.prototype.addHtml=function(t){var e,i;if(this.galleryItems[t].subHtmlUrl?i=this.galleryItems[t].subHtmlUrl:e=this.galleryItems[t].subHtml,!i)if(e){var n=e.substring(0,1);"."!==n&&"#"!==n||(e=this.settings.subHtmlSelectorRelative&&!this.settings.dynamic?k(this.items).eq(t).find(e).first().html():k(e).first().html())}else e="";if(".lg-item"!==this.settings.appendSubHtmlTo)i?this.outer.find(".lg-sub-html").load(i):this.outer.find(".lg-sub-html").html(e);else{var s=k(this.getSlideItemId(t));i?s.load(i):s.append('<div class="lg-sub-html">'+e+"</div>")}null!=e&&(""===e?this.outer.find(this.settings.appendSubHtmlTo).addClass("lg-empty-html"):this.outer.find(this.settings.appendSubHtmlTo).removeClass("lg-empty-html")),this.LGel.trigger(u,{index:t})},t.prototype.preload=function(t){for(var e=1;e<=this.settings.preload&&!(e>=this.galleryItems.length-t);e++)this.loadContent(t+e,!1);for(var i=1;i<=this.settings.preload&&!(t-i<0);i++)this.loadContent(t-i,!1)},t.prototype.getDummyImgStyles=function(t){return t?"width:"+t.width+"px;\n                margin-left: -"+t.width/2+"px;\n                margin-top: -"+t.height/2+"px;\n                height:"+t.height+"px":""},t.prototype.getVideoContStyle=function(t){return t?"width:"+t.width+"px;\n                height:"+t.height+"px":""},t.prototype.getDummyImageContent=function(t,e,i){var n;if(this.settings.dynamic||(n=k(this.items).eq(e)),n){var s=void 0;if(!(s=this.settings.exThumbImage?n.attr(this.settings.exThumbImage):n.find("img").first().attr("src")))return"";var r="<img "+i+' style="'+this.getDummyImgStyles(this.currentImageSize)+'" class="lg-dummy-img" src="'+s+'" />';return t.addClass("lg-first-slide"),this.outer.addClass("lg-first-slide-loading"),r}return""},t.prototype.setImgMarkup=function(t,e,i){var n=this.galleryItems[i],s=n.alt,r=n.srcset,o=n.sizes,a=n.sources,l=s?'alt="'+s+'"':"",c='<picture class="lg-img-wrap"> '+(this.isFirstSlideWithZoomAnimation()?this.getDummyImageContent(e,i,l):L(i,t,l,r,o,a))+"</picture>";e.prepend(c)},t.prototype.onSlideObjectLoad=function(t,e,i,n){var s=t.find(".lg-object").first();z(s.get())||e?i():(s.on("load.lg error.lg",(function(){i&&i()})),s.on("error.lg",(function(){n&&n()})))},t.prototype.onLgObjectLoad=function(t,e,i,n,s,r){var o=this;this.onSlideObjectLoad(t,r,(function(){o.triggerSlideItemLoad(t,e,i,n,s)}),(function(){t.addClass("lg-complete lg-complete_"),t.html('<span class="lg-error-msg">'+o.settings.strings.mediaLoadingFailed+"</span>")}))},t.prototype.triggerSlideItemLoad=function(t,e,i,n,s){var r=this,o=this.galleryItems[e],a=s&&"video"===this.getSlideType(o)&&!o.poster?n:0;setTimeout((function(){t.addClass("lg-complete lg-complete_"),r.LGel.trigger(f,{index:e,delay:i||0,isFirstSlide:s})}),a)},t.prototype.isFirstSlideWithZoomAnimation=function(){return!(this.lGalleryOn||!this.zoomFromOrigin||!this.currentImageSize)},t.prototype.addSlideVideoInfo=function(t){var e=this;t.forEach((function(t,i){t.__slideVideoInfo=G(t.src,!!t.video,i),t.__slideVideoInfo&&e.settings.loadYouTubePoster&&!t.poster&&t.__slideVideoInfo.youtube&&(t.poster="//img.youtube.com/vi/"+t.__slideVideoInfo.youtube[1]+"/maxresdefault.jpg")}))},t.prototype.loadContent=function(t,e){var i=this,n=this.galleryItems[t],s=k(this.getSlideItemId(t)),r=n.poster,a=n.srcset,c=n.sizes,d=n.sources,u=n.src,h=n.video,p=h&&"string"==typeof h?JSON.parse(h):h;if(n.responsive){var f=n.responsive.split(",");u=D(f)||u}var g=n.__slideVideoInfo,m="",v=!!n.iframe,y=!this.lGalleryOn,b=0;if(y&&(b=this.zoomFromOrigin&&this.currentImageSize?this.settings.startAnimationDuration+10:this.settings.backdropDuration+10),!s.hasClass("lg-loaded")){if(g){var w=this.mediaContainerPosition,_=w.top,x=w.bottom,T=A(this.items[t],this.outer,_+x,g&&this.settings.videoMaxSize);m=this.getVideoContStyle(T)}if(v){var S=P(this.settings.iframeWidth,this.settings.iframeHeight,this.settings.iframeMaxWidth,this.settings.iframeMaxHeight,u,n.iframeTitle);s.prepend(S)}else if(r){var E="";y&&this.zoomFromOrigin&&this.currentImageSize&&(E=this.getDummyImageContent(s,t,""));S=B(r,E||"",m,this.settings.strings.playVideo,g);s.prepend(S)}else if(g){S='<div class="lg-video-cont " style="'+m+'"></div>';s.prepend(S)}else if(this.setImgMarkup(u,s,t),a||d){var C=s.find(".lg-object");this.initPictureFill(C)}(r||g)&&this.LGel.trigger(l,{index:t,src:u,html5Video:p,hasPoster:!!r}),this.LGel.trigger(o,{index:t}),this.lGalleryOn&&".lg-item"===this.settings.appendSubHtmlTo&&this.addHtml(t)}var M=0;b&&!k(document.body).hasClass("lg-from-hash")&&(M=b),this.isFirstSlideWithZoomAnimation()&&(setTimeout((function(){s.removeClass("lg-start-end-progress lg-start-progress").removeAttr("style")}),this.settings.startAnimationDuration+100),s.hasClass("lg-loaded")||setTimeout((function(){if("image"===i.getSlideType(n)){var e=n.alt,o=e?'alt="'+e+'"':"";if(s.find(".lg-img-wrap").append(L(t,u,o,a,c,n.sources)),a||d){var l=s.find(".lg-object");i.initPictureFill(l)}}("image"===i.getSlideType(n)||"video"===i.getSlideType(n)&&r)&&(i.onLgObjectLoad(s,t,b,M,!0,!1),i.onSlideObjectLoad(s,!(!g||!g.html5||r),(function(){i.loadContentOnFirstSlideLoad(t,s,M)}),(function(){i.loadContentOnFirstSlideLoad(t,s,M)})))}),this.settings.startAnimationDuration+100)),s.addClass("lg-loaded"),this.isFirstSlideWithZoomAnimation()&&("video"!==this.getSlideType(n)||r)||this.onLgObjectLoad(s,t,b,M,y,!(!g||!g.html5||r)),this.zoomFromOrigin&&this.currentImageSize||!s.hasClass("lg-complete_")||this.lGalleryOn||setTimeout((function(){s.addClass("lg-complete")}),this.settings.backdropDuration),this.lGalleryOn=!0,!0===e&&(s.hasClass("lg-complete_")?this.preload(t):s.find(".lg-object").first().on("load.lg error.lg",(function(){i.preload(t)})))},t.prototype.loadContentOnFirstSlideLoad=function(t,e,i){var n=this;setTimeout((function(){e.find(".lg-dummy-img").remove(),e.removeClass("lg-first-slide"),n.outer.removeClass("lg-first-slide-loading"),n.isDummyImageRemoved=!0,n.preload(t)}),i+300)},t.prototype.getItemsToBeInsertedToDom=function(t,e,i){var n=this;void 0===i&&(i=0);var s=[],r=Math.max(i,3);r=Math.min(r,this.galleryItems.length);var o="lg-item-"+this.lgId+"-"+e;if(this.galleryItems.length<=3)return this.galleryItems.forEach((function(t,e){s.push("lg-item-"+n.lgId+"-"+e)})),s;if(t<(this.galleryItems.length-1)/2){for(var a=t;a>t-r/2&&a>=0;a--)s.push("lg-item-"+this.lgId+"-"+a);var l=s.length;for(a=0;a<r-l;a++)s.push("lg-item-"+this.lgId+"-"+(t+a+1))}else{for(a=t;a<=this.galleryItems.length-1&&a<t+r/2;a++)s.push("lg-item-"+this.lgId+"-"+a);for(l=s.length,a=0;a<r-l;a++)s.push("lg-item-"+this.lgId+"-"+(t-a-1))}return this.settings.loop&&(t===this.galleryItems.length-1?s.push("lg-item-"+this.lgId+"-0"):0===t&&s.push("lg-item-"+this.lgId+"-"+(this.galleryItems.length-1))),-1===s.indexOf(o)&&s.push("lg-item-"+this.lgId+"-"+e),s},t.prototype.organizeSlideItems=function(t,e){var i=this,n=this.getItemsToBeInsertedToDom(t,e,this.settings.numberOfSlideItemsInDom);return n.forEach((function(t){-1===i.currentItemsInDom.indexOf(t)&&i.$inner.append('<div id="'+t+'" class="lg-item"></div>')})),this.currentItemsInDom.forEach((function(t){-1===n.indexOf(t)&&k("#"+t).remove()})),n},t.prototype.getPreviousSlideIndex=function(){var t=0;try{var e=this.outer.find(".lg-current").first().attr("id");t=parseInt(e.split("-")[3])||0}catch(e){t=0}return t},t.prototype.setDownloadValue=function(t){if(this.settings.download){var e=this.galleryItems[t];if(!1===e.downloadUrl||"false"===e.downloadUrl)this.outer.addClass("lg-hide-download");else{var i=this.getElementById("lg-download");this.outer.removeClass("lg-hide-download"),i.attr("href",e.downloadUrl||e.src),e.download&&i.attr("download",e.download)}}},t.prototype.makeSlideAnimation=function(t,e,i){var n=this;this.lGalleryOn&&i.addClass("lg-slide-progress"),setTimeout((function(){n.outer.addClass("lg-no-trans"),n.outer.find(".lg-item").removeClass("lg-prev-slide lg-next-slide"),"prev"===t?(e.addClass("lg-prev-slide"),i.addClass("lg-next-slide")):(e.addClass("lg-next-slide"),i.addClass("lg-prev-slide")),setTimeout((function(){n.outer.find(".lg-item").removeClass("lg-current"),e.addClass("lg-current"),n.outer.removeClass("lg-no-trans")}),50)}),this.lGalleryOn?this.settings.slideDelay:0)},t.prototype.slide=function(t,e,i,n){var s=this,r=this.getPreviousSlideIndex();if(this.currentItemsInDom=this.organizeSlideItems(t,r),!this.lGalleryOn||r!==t){var o=this.galleryItems.length;if(!this.lgBusy){this.settings.counter&&this.updateCurrentCounter(t);var a=this.getSlideItem(t),l=this.getSlideItem(r),c=this.galleryItems[t],d=c.__slideVideoInfo;if(this.outer.attr("data-lg-slide-type",this.getSlideType(c)),this.setDownloadValue(t),d){var u=this.mediaContainerPosition,h=u.top,p=u.bottom,f=A(this.items[t],this.outer,h+p,d&&this.settings.videoMaxSize);this.resizeVideoSlide(t,f)}if(this.LGel.trigger(g,{prevIndex:r,index:t,fromTouch:!!e,fromThumb:!!i}),this.lgBusy=!0,clearTimeout(this.hideBarTimeout),this.arrowDisable(t),n||(t<r?n="prev":t>r&&(n="next")),e){this.outer.find(".lg-item").removeClass("lg-prev-slide lg-current lg-next-slide");var v=void 0,y=void 0;o>2?(v=t-1,y=t+1,(0===t&&r===o-1||t===o-1&&0===r)&&(y=0,v=o-1)):(v=0,y=1),"prev"===n?this.getSlideItem(y).addClass("lg-next-slide"):this.getSlideItem(v).addClass("lg-prev-slide"),a.addClass("lg-current")}else this.makeSlideAnimation(n,a,l);this.lGalleryOn?setTimeout((function(){s.loadContent(t,!0),".lg-item"!==s.settings.appendSubHtmlTo&&s.addHtml(t)}),this.settings.speed+50+(e?0:this.settings.slideDelay)):this.loadContent(t,!0),setTimeout((function(){s.lgBusy=!1,l.removeClass("lg-slide-progress"),s.LGel.trigger(m,{prevIndex:r,index:t,fromTouch:e,fromThumb:i})}),(this.lGalleryOn?this.settings.speed+100:100)+(e?0:this.settings.slideDelay))}this.index=t}},t.prototype.updateCurrentCounter=function(t){this.getElementById("lg-counter-current").html(t+1+"")},t.prototype.updateCounterTotal=function(){this.getElementById("lg-counter-all").html(this.galleryItems.length+"")},t.prototype.getSlideType=function(t){return t.__slideVideoInfo?"video":t.iframe?"iframe":"image"},t.prototype.touchMove=function(t,e,i){var n=e.pageX-t.pageX,s=e.pageY-t.pageY,r=!1;if(this.swipeDirection?r=!0:Math.abs(n)>15?(this.swipeDirection="horizontal",r=!0):Math.abs(s)>15&&(this.swipeDirection="vertical",r=!0),r){var o=this.getSlideItem(this.index);if("horizontal"===this.swipeDirection){null==i||i.preventDefault(),this.outer.addClass("lg-dragging"),this.setTranslate(o,n,0);var a=o.get().offsetWidth,l=15*a/100-Math.abs(10*n/100);this.setTranslate(this.outer.find(".lg-prev-slide").first(),-a+n-l,0),this.setTranslate(this.outer.find(".lg-next-slide").first(),a+n+l,0)}else if("vertical"===this.swipeDirection&&this.settings.swipeToClose){null==i||i.preventDefault(),this.$container.addClass("lg-dragging-vertical");var c=1-Math.abs(s)/window.innerHeight;this.$backdrop.css("opacity",c);var d=1-Math.abs(s)/(2*window.innerWidth);this.setTranslate(o,0,s,d,d),Math.abs(s)>100&&this.outer.addClass("lg-hide-items").removeClass("lg-components-open")}}},t.prototype.touchEnd=function(t,e,i){var n,s=this;"lg-slide"!==this.settings.mode&&this.outer.addClass("lg-slide"),setTimeout((function(){s.$container.removeClass("lg-dragging-vertical"),s.outer.removeClass("lg-dragging lg-hide-items").addClass("lg-components-open");var r=!0;if("horizontal"===s.swipeDirection){n=t.pageX-e.pageX;var o=Math.abs(t.pageX-e.pageX);n<0&&o>s.settings.swipeThreshold?(s.goToNextSlide(!0),r=!1):n>0&&o>s.settings.swipeThreshold&&(s.goToPrevSlide(!0),r=!1)}else if("vertical"===s.swipeDirection){if(n=Math.abs(t.pageY-e.pageY),s.settings.closable&&s.settings.swipeToClose&&n>100)return void s.closeGallery();s.$backdrop.css("opacity",1)}if(s.outer.find(".lg-item").removeAttr("style"),r&&Math.abs(t.pageX-e.pageX)<5){var a=k(i.target);s.isPosterElement(a)&&s.LGel.trigger(v)}s.swipeDirection=void 0})),setTimeout((function(){s.outer.hasClass("lg-dragging")||"lg-slide"===s.settings.mode||s.outer.removeClass("lg-slide")}),this.settings.speed+100)},t.prototype.enableSwipe=function(){var t=this,e={},i={},n=!1,s=!1;this.settings.enableSwipe&&(this.$inner.on("touchstart.lg",(function(i){t.dragOrSwipeEnabled=!0;var n=t.getSlideItem(t.index);!k(i.target).hasClass("lg-item")&&!n.get().contains(i.target)||t.outer.hasClass("lg-zoomed")||t.lgBusy||1!==i.touches.length||(s=!0,t.touchAction="swipe",t.manageSwipeClass(),e={pageX:i.touches[0].pageX,pageY:i.touches[0].pageY})})),this.$inner.on("touchmove.lg",(function(r){s&&"swipe"===t.touchAction&&1===r.touches.length&&(i={pageX:r.touches[0].pageX,pageY:r.touches[0].pageY},t.touchMove(e,i,r),n=!0)})),this.$inner.on("touchend.lg",(function(r){if("swipe"===t.touchAction){if(n)n=!1,t.touchEnd(i,e,r);else if(s){var o=k(r.target);t.isPosterElement(o)&&t.LGel.trigger(v)}t.touchAction=void 0,s=!1}})))},t.prototype.enableDrag=function(){var t=this,e={},i={},n=!1,s=!1;this.settings.enableDrag&&(this.outer.on("mousedown.lg",(function(i){t.dragOrSwipeEnabled=!0;var s=t.getSlideItem(t.index);(k(i.target).hasClass("lg-item")||s.get().contains(i.target))&&(t.outer.hasClass("lg-zoomed")||t.lgBusy||(i.preventDefault(),t.lgBusy||(t.manageSwipeClass(),e={pageX:i.pageX,pageY:i.pageY},n=!0,t.outer.get().scrollLeft+=1,t.outer.get().scrollLeft-=1,t.outer.removeClass("lg-grab").addClass("lg-grabbing"),t.LGel.trigger(y))))})),k(window).on("mousemove.lg.global"+this.lgId,(function(r){n&&t.lgOpened&&(s=!0,i={pageX:r.pageX,pageY:r.pageY},t.touchMove(e,i),t.LGel.trigger(b))})),k(window).on("mouseup.lg.global"+this.lgId,(function(r){if(t.lgOpened){var o=k(r.target);s?(s=!1,t.touchEnd(i,e,r),t.LGel.trigger(w)):t.isPosterElement(o)&&t.LGel.trigger(v),n&&(n=!1,t.outer.removeClass("lg-grabbing").addClass("lg-grab"))}})))},t.prototype.triggerPosterClick=function(){var t=this;this.$inner.on("click.lg",(function(e){!t.dragOrSwipeEnabled&&t.isPosterElement(k(e.target))&&t.LGel.trigger(v)}))},t.prototype.manageSwipeClass=function(){var t=this.index+1,e=this.index-1;this.settings.loop&&this.galleryItems.length>2&&(0===this.index?e=this.galleryItems.length-1:this.index===this.galleryItems.length-1&&(t=0)),this.outer.find(".lg-item").removeClass("lg-next-slide lg-prev-slide"),e>-1&&this.getSlideItem(e).addClass("lg-prev-slide"),this.getSlideItem(t).addClass("lg-next-slide")},t.prototype.goToNextSlide=function(t){var e=this,i=this.settings.loop;t&&this.galleryItems.length<3&&(i=!1),this.lgBusy||(this.index+1<this.galleryItems.length?(this.index++,this.LGel.trigger(_,{index:this.index}),this.slide(this.index,!!t,!1,"next")):i?(this.index=0,this.LGel.trigger(_,{index:this.index}),this.slide(this.index,!!t,!1,"next")):this.settings.slideEndAnimation&&!t&&(this.outer.addClass("lg-right-end"),setTimeout((function(){e.outer.removeClass("lg-right-end")}),400)))},t.prototype.goToPrevSlide=function(t){var e=this,i=this.settings.loop;t&&this.galleryItems.length<3&&(i=!1),this.lgBusy||(this.index>0?(this.index--,this.LGel.trigger(x,{index:this.index,fromTouch:t}),this.slide(this.index,!!t,!1,"prev")):i?(this.index=this.galleryItems.length-1,this.LGel.trigger(x,{index:this.index,fromTouch:t}),this.slide(this.index,!!t,!1,"prev")):this.settings.slideEndAnimation&&!t&&(this.outer.addClass("lg-left-end"),setTimeout((function(){e.outer.removeClass("lg-left-end")}),400)))},t.prototype.keyPress=function(){var t=this;k(window).on("keydown.lg.global"+this.lgId,(function(e){t.lgOpened&&!0===t.settings.escKey&&27===e.keyCode&&(e.preventDefault(),t.settings.allowMediaOverlap&&t.outer.hasClass("lg-can-toggle")&&t.outer.hasClass("lg-components-open")?t.outer.removeClass("lg-components-open"):t.closeGallery()),t.lgOpened&&t.galleryItems.length>1&&(37===e.keyCode&&(e.preventDefault(),t.goToPrevSlide()),39===e.keyCode&&(e.preventDefault(),t.goToNextSlide()))}))},t.prototype.arrow=function(){var t=this;this.getElementById("lg-prev").on("click.lg",(function(){t.goToPrevSlide()})),this.getElementById("lg-next").on("click.lg",(function(){t.goToNextSlide()}))},t.prototype.arrowDisable=function(t){if(!this.settings.loop&&this.settings.hideControlOnEnd){var e=this.getElementById("lg-prev"),i=this.getElementById("lg-next");t+1===this.galleryItems.length?i.attr("disabled","disabled").addClass("disabled"):i.removeAttr("disabled").removeClass("disabled"),0===t?e.attr("disabled","disabled").addClass("disabled"):e.removeAttr("disabled").removeClass("disabled")}},t.prototype.setTranslate=function(t,e,i,n,s){void 0===n&&(n=1),void 0===s&&(s=1),t.css("transform","translate3d("+e+"px, "+i+"px, 0px) scale3d("+n+", "+s+", 1)")},t.prototype.mousewheel=function(){var t=this,e=0;this.outer.on("wheel.lg",(function(i){if(i.deltaY&&!(t.galleryItems.length<2)){i.preventDefault();var n=(new Date).getTime();n-e<1e3||(e=n,i.deltaY>0?t.goToNextSlide():i.deltaY<0&&t.goToPrevSlide())}}))},t.prototype.isSlideElement=function(t){return t.hasClass("lg-outer")||t.hasClass("lg-item")||t.hasClass("lg-img-wrap")},t.prototype.isPosterElement=function(t){var e=this.getSlideItem(this.index).find(".lg-video-play-button").get();return t.hasClass("lg-video-poster")||t.hasClass("lg-video-play-button")||e&&e.contains(t.get())},t.prototype.toggleMaximize=function(){var t=this;this.getElementById("lg-maximize").on("click.lg",(function(){t.$container.toggleClass("lg-inline"),t.refreshOnResize()}))},t.prototype.invalidateItems=function(){for(var t=0;t<this.items.length;t++){var e=k(this.items[t]);e.off("click.lgcustom-item-"+e.attr("data-lg-id"))}},t.prototype.trapFocus=function(){var t=this;this.$container.get().focus({preventScroll:!0}),k(window).on("keydown.lg.global"+this.lgId,(function(e){if(t.lgOpened&&("Tab"===e.key||9===e.keyCode)){var i=F(t.$container.get()),n=i[0],s=i[i.length-1];e.shiftKey?document.activeElement===n&&(s.focus(),e.preventDefault()):document.activeElement===s&&(n.focus(),e.preventDefault())}}))},t.prototype.manageCloseGallery=function(){var t=this;if(this.settings.closable){var e=!1;this.getElementById("lg-close").on("click.lg",(function(){t.closeGallery()})),this.settings.closeOnTap&&(this.outer.on("mousedown.lg",(function(i){var n=k(i.target);e=!!t.isSlideElement(n)})),this.outer.on("mousemove.lg",(function(){e=!1})),this.outer.on("mouseup.lg",(function(i){var n=k(i.target);t.isSlideElement(n)&&e&&(t.outer.hasClass("lg-dragging")||t.closeGallery())})))}},t.prototype.closeGallery=function(t){var e=this;if(!this.lgOpened||!this.settings.closable&&!t)return 0;this.LGel.trigger(T),this.settings.resetScrollPosition&&!this.settings.hideScrollbar&&k(window).scrollTop(this.prevScrollTop);var i,n=this.items[this.index];if(this.zoomFromOrigin&&n){var s=this.mediaContainerPosition,r=s.top,o=s.bottom,a=this.galleryItems[this.index],l=a.__slideVideoInfo,c=a.poster,d=A(n,this.outer,r+o,l&&c&&this.settings.videoMaxSize);i=I(n,this.outer,r,o,d)}this.zoomFromOrigin&&i?(this.outer.addClass("lg-closing lg-zoom-from-image"),this.getSlideItem(this.index).addClass("lg-start-end-progress").css("transition-duration",this.settings.startAnimationDuration+"ms").css("transform",i)):(this.outer.addClass("lg-hide-items"),this.outer.removeClass("lg-zoom-from-image")),this.destroyModules(),this.lGalleryOn=!1,this.isDummyImageRemoved=!1,this.zoomFromOrigin=this.settings.zoomFromOrigin,clearTimeout(this.hideBarTimeout),this.hideBarTimeout=!1,k("html").removeClass("lg-on"),this.outer.removeClass("lg-visible lg-components-open"),this.$backdrop.removeClass("in").css("opacity",0);var u=this.zoomFromOrigin&&i?Math.max(this.settings.startAnimationDuration,this.settings.backdropDuration):this.settings.backdropDuration;return this.$container.removeClass("lg-show-in"),setTimeout((function(){e.zoomFromOrigin&&i&&e.outer.removeClass("lg-zoom-from-image"),e.$container.removeClass("lg-show"),e.resetScrollBar(),e.$backdrop.removeAttr("style").css("transition-duration",e.settings.backdropDuration+"ms"),e.outer.removeClass("lg-closing "+e.settings.startClass),e.getSlideItem(e.index).removeClass("lg-start-end-progress"),e.$inner.empty(),e.lgOpened&&e.LGel.trigger(S,{instance:e}),e.$container.get()&&e.$container.get().blur(),e.lgOpened=!1}),u+100),u+100},t.prototype.initModules=function(){this.plugins.forEach((function(t){try{t.init()}catch(t){console.warn("lightGallery:- make sure lightGallery module is properly initiated")}}))},t.prototype.destroyModules=function(t){this.plugins.forEach((function(e){try{t?e.destroy():e.closeGallery&&e.closeGallery()}catch(t){console.warn("lightGallery:- make sure lightGallery module is properly destroyed")}}))},t.prototype.refresh=function(t){this.settings.dynamic||this.invalidateItems(),this.galleryItems=t||this.getItems(),this.updateControls(),this.openGalleryOnItemClick(),this.LGel.trigger(d)},t.prototype.updateControls=function(){this.addSlideVideoInfo(this.galleryItems),this.updateCounterTotal(),this.manageSingleSlideClassName()},t.prototype.destroyGallery=function(){this.destroyModules(!0),this.settings.dynamic||this.invalidateItems(),k(window).off(".lg.global"+this.lgId),this.LGel.off(".lg"),this.$container.remove()},t.prototype.destroy=function(){var t=this.closeGallery(!0);return t?setTimeout(this.destroyGallery.bind(this),t):this.destroyGallery(),t},t}();const V=function(t,e){return new N(t,e)};s.e(11).then(s.bind(s,1011));function j(t){return null!==t&&"object"==typeof t&&"constructor"in t&&t.constructor===Object}function W(t,e){void 0===t&&(t={}),void 0===e&&(e={}),Object.keys(e).forEach((i=>{void 0===t[i]?t[i]=e[i]:j(e[i])&&j(t[i])&&Object.keys(e[i]).length>0&&W(t[i],e[i])}))}(()=>{document.querySelectorAll(".feed-chapter__images-swiper .slide-feed-chapter__image-wrap");document.querySelectorAll("[data-lightgallery]").forEach((t=>{const e=t.dataset.description,i=V(t,{speed:500,licenseKey:"7EC452A9-0CFD441C-BD984C7C-17C8456E",appendCounterTo:".lg-content",selector:".slide-feed-chapter__image-wrap",appendSubHtmlTo:".lg-item"});t.addEventListener("lgBeforeSlide",(t=>{document.querySelectorAll(".lg-item").forEach((t=>{t.querySelector(".lg-sub-html")&&"true"===t.querySelector(".lg-sub-html").innerHTML&&t.classList.add("_is-vertical")}))})),t.addEventListener("lgBeforeOpen",(t=>{const n=i.$container.firstElement.querySelector(".lg-outer"),s=document.createElement("div");s.classList.add("gallery-description"),s.innerHTML=e,e&&n.append(s);document.querySelectorAll(".lg-item").forEach((t=>{t.querySelector(".lg-sub-html")&&"true"===t.querySelector(".lg-sub-html").innerHTML&&t.classList.add("_is-vertical")}))}))}))})();const $={body:{},addEventListener(){},removeEventListener(){},activeElement:{blur(){},nodeName:""},querySelector:()=>null,querySelectorAll:()=>[],getElementById:()=>null,createEvent:()=>({initEvent(){}}),createElement:()=>({children:[],childNodes:[],style:{},setAttribute(){},getElementsByTagName:()=>[]}),createElementNS:()=>({}),importNode:()=>null,location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};function X(){const t="undefined"!=typeof document?document:{};return W(t,$),t}const q={document:$,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState(){},pushState(){},go(){},back(){}},CustomEvent:function(){return this},addEventListener(){},removeEventListener(){},getComputedStyle:()=>({getPropertyValue:()=>""}),Image(){},Date(){},screen:{},setTimeout(){},clearTimeout(){},matchMedia:()=>({}),requestAnimationFrame:t=>"undefined"==typeof setTimeout?(t(),null):setTimeout(t,0),cancelAnimationFrame(t){"undefined"!=typeof setTimeout&&clearTimeout(t)}};function U(){const t="undefined"!=typeof window?window:{};return W(t,q),t}function K(t,e){return void 0===e&&(e=0),setTimeout(t,e)}function J(){return Date.now()}function Z(t,e){void 0===e&&(e="x");const i=U();let n,s,r;const o=function(t){const e=U();let i;return e.getComputedStyle&&(i=e.getComputedStyle(t,null)),!i&&t.currentStyle&&(i=t.currentStyle),i||(i=t.style),i}(t);return i.WebKitCSSMatrix?(s=o.transform||o.webkitTransform,s.split(",").length>6&&(s=s.split(", ").map((t=>t.replace(",","."))).join(", ")),r=new i.WebKitCSSMatrix("none"===s?"":s)):(r=o.MozTransform||o.OTransform||o.MsTransform||o.msTransform||o.transform||o.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,"),n=r.toString().split(",")),"x"===e&&(s=i.WebKitCSSMatrix?r.m41:16===n.length?parseFloat(n[12]):parseFloat(n[4])),"y"===e&&(s=i.WebKitCSSMatrix?r.m42:16===n.length?parseFloat(n[13]):parseFloat(n[5])),s||0}function Q(t){return"object"==typeof t&&null!==t&&t.constructor&&"Object"===Object.prototype.toString.call(t).slice(8,-1)}function tt(){const t=Object(arguments.length<=0?void 0:arguments[0]),e=["__proto__","constructor","prototype"];for(let n=1;n<arguments.length;n+=1){const s=n<0||arguments.length<=n?void 0:arguments[n];if(null!=s&&(i=s,!("undefined"!=typeof window&&void 0!==window.HTMLElement?i instanceof HTMLElement:i&&(1===i.nodeType||11===i.nodeType)))){const i=Object.keys(Object(s)).filter((t=>e.indexOf(t)<0));for(let e=0,n=i.length;e<n;e+=1){const n=i[e],r=Object.getOwnPropertyDescriptor(s,n);void 0!==r&&r.enumerable&&(Q(t[n])&&Q(s[n])?s[n].__swiper__?t[n]=s[n]:tt(t[n],s[n]):!Q(t[n])&&Q(s[n])?(t[n]={},s[n].__swiper__?t[n]=s[n]:tt(t[n],s[n])):t[n]=s[n])}}}var i;return t}function et(t,e,i){t.style.setProperty(e,i)}function it(t){let{swiper:e,targetPosition:i,side:n}=t;const s=U(),r=-e.translate;let o,a=null;const l=e.params.speed;e.wrapperEl.style.scrollSnapType="none",s.cancelAnimationFrame(e.cssModeFrameID);const c=i>r?"next":"prev",d=(t,e)=>"next"===c&&t>=e||"prev"===c&&t<=e,u=()=>{o=(new Date).getTime(),null===a&&(a=o);const t=Math.max(Math.min((o-a)/l,1),0),c=.5-Math.cos(t*Math.PI)/2;let h=r+c*(i-r);if(d(h,i)&&(h=i),e.wrapperEl.scrollTo({[n]:h}),d(h,i))return e.wrapperEl.style.overflow="hidden",e.wrapperEl.style.scrollSnapType="",setTimeout((()=>{e.wrapperEl.style.overflow="",e.wrapperEl.scrollTo({[n]:h})})),void s.cancelAnimationFrame(e.cssModeFrameID);e.cssModeFrameID=s.requestAnimationFrame(u)};u()}function nt(t,e){void 0===e&&(e="");const i=[...t.children];return t instanceof HTMLSlotElement&&i.push(...t.assignedElements()),e?i.filter((t=>t.matches(e))):i}function st(t){try{return void console.warn(t)}catch(t){}}function rt(t,e){void 0===e&&(e=[]);const i=document.createElement(t);return i.classList.add(...Array.isArray(e)?e:function(t){return void 0===t&&(t=""),t.trim().split(" ").filter((t=>!!t.trim()))}(e)),i}function ot(t,e){return U().getComputedStyle(t,null).getPropertyValue(e)}function at(t){let e,i=t;if(i){for(e=0;null!==(i=i.previousSibling);)1===i.nodeType&&(e+=1);return e}}function lt(t,e){const i=[];let n=t.parentElement;for(;n;)e?n.matches(e)&&i.push(n):i.push(n),n=n.parentElement;return i}function ct(t,e,i){const n=U();return i?t["width"===e?"offsetWidth":"offsetHeight"]+parseFloat(n.getComputedStyle(t,null).getPropertyValue("width"===e?"margin-right":"margin-top"))+parseFloat(n.getComputedStyle(t,null).getPropertyValue("width"===e?"margin-left":"margin-bottom")):t.offsetWidth}function dt(t){return(Array.isArray(t)?t:[t]).filter((t=>!!t))}let ut,ht,pt;function ft(){return ut||(ut=function(){const t=U(),e=X();return{smoothScroll:e.documentElement&&e.documentElement.style&&"scrollBehavior"in e.documentElement.style,touch:!!("ontouchstart"in t||t.DocumentTouch&&e instanceof t.DocumentTouch)}}()),ut}function gt(t){return void 0===t&&(t={}),ht||(ht=function(t){let{userAgent:e}=void 0===t?{}:t;const i=ft(),n=U(),s=n.navigator.platform,r=e||n.navigator.userAgent,o={ios:!1,android:!1},a=n.screen.width,l=n.screen.height,c=r.match(/(Android);?[\s\/]+([\d.]+)?/);let d=r.match(/(iPad).*OS\s([\d_]+)/);const u=r.match(/(iPod)(.*OS\s([\d_]+))?/),h=!d&&r.match(/(iPhone\sOS|iOS)\s([\d_]+)/),p="Win32"===s;let f="MacIntel"===s;return!d&&f&&i.touch&&["1024x1366","1366x1024","834x1194","1194x834","834x1112","1112x834","768x1024","1024x768","820x1180","1180x820","810x1080","1080x810"].indexOf(`${a}x${l}`)>=0&&(d=r.match(/(Version)\/([\d.]+)/),d||(d=[0,1,"13_0_0"]),f=!1),c&&!p&&(o.os="android",o.android=!0),(d||h||u)&&(o.os="ios",o.ios=!0),o}(t)),ht}function mt(){return pt||(pt=function(){const t=U(),e=gt();let i=!1;function n(){const e=t.navigator.userAgent.toLowerCase();return e.indexOf("safari")>=0&&e.indexOf("chrome")<0&&e.indexOf("android")<0}if(n()){const e=String(t.navigator.userAgent);if(e.includes("Version/")){const[t,n]=e.split("Version/")[1].split(" ")[0].split(".").map((t=>Number(t)));i=t<16||16===t&&n<2}}const s=/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(t.navigator.userAgent),r=n();return{isSafari:i||r,needPerspectiveFix:i,need3dFix:r||s&&e.ios,isWebView:s}}()),pt}var vt={on(t,e,i){const n=this;if(!n.eventsListeners||n.destroyed)return n;if("function"!=typeof e)return n;const s=i?"unshift":"push";return t.split(" ").forEach((t=>{n.eventsListeners[t]||(n.eventsListeners[t]=[]),n.eventsListeners[t][s](e)})),n},once(t,e,i){const n=this;if(!n.eventsListeners||n.destroyed)return n;if("function"!=typeof e)return n;function s(){n.off(t,s),s.__emitterProxy&&delete s.__emitterProxy;for(var i=arguments.length,r=new Array(i),o=0;o<i;o++)r[o]=arguments[o];e.apply(n,r)}return s.__emitterProxy=e,n.on(t,s,i)},onAny(t,e){const i=this;if(!i.eventsListeners||i.destroyed)return i;if("function"!=typeof t)return i;const n=e?"unshift":"push";return i.eventsAnyListeners.indexOf(t)<0&&i.eventsAnyListeners[n](t),i},offAny(t){const e=this;if(!e.eventsListeners||e.destroyed)return e;if(!e.eventsAnyListeners)return e;const i=e.eventsAnyListeners.indexOf(t);return i>=0&&e.eventsAnyListeners.splice(i,1),e},off(t,e){const i=this;return!i.eventsListeners||i.destroyed?i:i.eventsListeners?(t.split(" ").forEach((t=>{void 0===e?i.eventsListeners[t]=[]:i.eventsListeners[t]&&i.eventsListeners[t].forEach(((n,s)=>{(n===e||n.__emitterProxy&&n.__emitterProxy===e)&&i.eventsListeners[t].splice(s,1)}))})),i):i},emit(){const t=this;if(!t.eventsListeners||t.destroyed)return t;if(!t.eventsListeners)return t;let e,i,n;for(var s=arguments.length,r=new Array(s),o=0;o<s;o++)r[o]=arguments[o];"string"==typeof r[0]||Array.isArray(r[0])?(e=r[0],i=r.slice(1,r.length),n=t):(e=r[0].events,i=r[0].data,n=r[0].context||t),i.unshift(n);return(Array.isArray(e)?e:e.split(" ")).forEach((e=>{t.eventsAnyListeners&&t.eventsAnyListeners.length&&t.eventsAnyListeners.forEach((t=>{t.apply(n,[e,...i])})),t.eventsListeners&&t.eventsListeners[e]&&t.eventsListeners[e].forEach((t=>{t.apply(n,i)}))})),t}};const yt=(t,e,i)=>{e&&!t.classList.contains(i)?t.classList.add(i):!e&&t.classList.contains(i)&&t.classList.remove(i)};const bt=(t,e,i)=>{e&&!t.classList.contains(i)?t.classList.add(i):!e&&t.classList.contains(i)&&t.classList.remove(i)};const wt=(t,e)=>{if(!t||t.destroyed||!t.params)return;const i=e.closest(t.isElement?"swiper-slide":`.${t.params.slideClass}`);if(i){let e=i.querySelector(`.${t.params.lazyPreloaderClass}`);!e&&t.isElement&&(i.shadowRoot?e=i.shadowRoot.querySelector(`.${t.params.lazyPreloaderClass}`):requestAnimationFrame((()=>{i.shadowRoot&&(e=i.shadowRoot.querySelector(`.${t.params.lazyPreloaderClass}`),e&&e.remove())}))),e&&e.remove()}},_t=(t,e)=>{if(!t.slides[e])return;const i=t.slides[e].querySelector('[loading="lazy"]');i&&i.removeAttribute("loading")},xt=t=>{if(!t||t.destroyed||!t.params)return;let e=t.params.lazyPreloadPrevNext;const i=t.slides.length;if(!i||!e||e<0)return;e=Math.min(e,i);const n="auto"===t.params.slidesPerView?t.slidesPerViewDynamic():Math.ceil(t.params.slidesPerView),s=t.activeIndex;if(t.params.grid&&t.params.grid.rows>1){const i=s,r=[i-e];return r.push(...Array.from({length:e}).map(((t,e)=>i+n+e))),void t.slides.forEach(((e,i)=>{r.includes(e.column)&&_t(t,i)}))}const r=s+n-1;if(t.params.rewind||t.params.loop)for(let n=s-e;n<=r+e;n+=1){const e=(n%i+i)%i;(e<s||e>r)&&_t(t,e)}else for(let n=Math.max(s-e,0);n<=Math.min(r+e,i-1);n+=1)n!==s&&(n>r||n<s)&&_t(t,n)};var Tt={updateSize:function(){const t=this;let e,i;const n=t.el;e=void 0!==t.params.width&&null!==t.params.width?t.params.width:n.clientWidth,i=void 0!==t.params.height&&null!==t.params.height?t.params.height:n.clientHeight,0===e&&t.isHorizontal()||0===i&&t.isVertical()||(e=e-parseInt(ot(n,"padding-left")||0,10)-parseInt(ot(n,"padding-right")||0,10),i=i-parseInt(ot(n,"padding-top")||0,10)-parseInt(ot(n,"padding-bottom")||0,10),Number.isNaN(e)&&(e=0),Number.isNaN(i)&&(i=0),Object.assign(t,{width:e,height:i,size:t.isHorizontal()?e:i}))},updateSlides:function(){const t=this;function e(e,i){return parseFloat(e.getPropertyValue(t.getDirectionLabel(i))||0)}const i=t.params,{wrapperEl:n,slidesEl:s,size:r,rtlTranslate:o,wrongRTL:a}=t,l=t.virtual&&i.virtual.enabled,c=l?t.virtual.slides.length:t.slides.length,d=nt(s,`.${t.params.slideClass}, swiper-slide`),u=l?t.virtual.slides.length:d.length;let h=[];const p=[],f=[];let g=i.slidesOffsetBefore;"function"==typeof g&&(g=i.slidesOffsetBefore.call(t));let m=i.slidesOffsetAfter;"function"==typeof m&&(m=i.slidesOffsetAfter.call(t));const v=t.snapGrid.length,y=t.slidesGrid.length;let b=i.spaceBetween,w=-g,_=0,x=0;if(void 0===r)return;"string"==typeof b&&b.indexOf("%")>=0?b=parseFloat(b.replace("%",""))/100*r:"string"==typeof b&&(b=parseFloat(b)),t.virtualSize=-b,d.forEach((t=>{o?t.style.marginLeft="":t.style.marginRight="",t.style.marginBottom="",t.style.marginTop=""})),i.centeredSlides&&i.cssMode&&(et(n,"--swiper-centered-offset-before",""),et(n,"--swiper-centered-offset-after",""));const T=i.grid&&i.grid.rows>1&&t.grid;let S;T?t.grid.initSlides(d):t.grid&&t.grid.unsetSlides();const E="auto"===i.slidesPerView&&i.breakpoints&&Object.keys(i.breakpoints).filter((t=>void 0!==i.breakpoints[t].slidesPerView)).length>0;for(let n=0;n<u;n+=1){let s;if(S=0,d[n]&&(s=d[n]),T&&t.grid.updateSlide(n,s,d),!d[n]||"none"!==ot(s,"display")){if("auto"===i.slidesPerView){E&&(d[n].style[t.getDirectionLabel("width")]="");const r=getComputedStyle(s),o=s.style.transform,a=s.style.webkitTransform;if(o&&(s.style.transform="none"),a&&(s.style.webkitTransform="none"),i.roundLengths)S=t.isHorizontal()?ct(s,"width",!0):ct(s,"height",!0);else{const t=e(r,"width"),i=e(r,"padding-left"),n=e(r,"padding-right"),o=e(r,"margin-left"),a=e(r,"margin-right"),l=r.getPropertyValue("box-sizing");if(l&&"border-box"===l)S=t+o+a;else{const{clientWidth:e,offsetWidth:r}=s;S=t+i+n+o+a+(r-e)}}o&&(s.style.transform=o),a&&(s.style.webkitTransform=a),i.roundLengths&&(S=Math.floor(S))}else S=(r-(i.slidesPerView-1)*b)/i.slidesPerView,i.roundLengths&&(S=Math.floor(S)),d[n]&&(d[n].style[t.getDirectionLabel("width")]=`${S}px`);d[n]&&(d[n].swiperSlideSize=S),f.push(S),i.centeredSlides?(w=w+S/2+_/2+b,0===_&&0!==n&&(w=w-r/2-b),0===n&&(w=w-r/2-b),Math.abs(w)<.001&&(w=0),i.roundLengths&&(w=Math.floor(w)),x%i.slidesPerGroup==0&&h.push(w),p.push(w)):(i.roundLengths&&(w=Math.floor(w)),(x-Math.min(t.params.slidesPerGroupSkip,x))%t.params.slidesPerGroup==0&&h.push(w),p.push(w),w=w+S+b),t.virtualSize+=S+b,_=S,x+=1}}if(t.virtualSize=Math.max(t.virtualSize,r)+m,o&&a&&("slide"===i.effect||"coverflow"===i.effect)&&(n.style.width=`${t.virtualSize+b}px`),i.setWrapperSize&&(n.style[t.getDirectionLabel("width")]=`${t.virtualSize+b}px`),T&&t.grid.updateWrapperSize(S,h),!i.centeredSlides){const e=[];for(let n=0;n<h.length;n+=1){let s=h[n];i.roundLengths&&(s=Math.floor(s)),h[n]<=t.virtualSize-r&&e.push(s)}h=e,Math.floor(t.virtualSize-r)-Math.floor(h[h.length-1])>1&&h.push(t.virtualSize-r)}if(l&&i.loop){const e=f[0]+b;if(i.slidesPerGroup>1){const n=Math.ceil((t.virtual.slidesBefore+t.virtual.slidesAfter)/i.slidesPerGroup),s=e*i.slidesPerGroup;for(let t=0;t<n;t+=1)h.push(h[h.length-1]+s)}for(let n=0;n<t.virtual.slidesBefore+t.virtual.slidesAfter;n+=1)1===i.slidesPerGroup&&h.push(h[h.length-1]+e),p.push(p[p.length-1]+e),t.virtualSize+=e}if(0===h.length&&(h=[0]),0!==b){const e=t.isHorizontal()&&o?"marginLeft":t.getDirectionLabel("marginRight");d.filter(((t,e)=>!(i.cssMode&&!i.loop)||e!==d.length-1)).forEach((t=>{t.style[e]=`${b}px`}))}if(i.centeredSlides&&i.centeredSlidesBounds){let t=0;f.forEach((e=>{t+=e+(b||0)})),t-=b;const e=t-r;h=h.map((t=>t<=0?-g:t>e?e+m:t))}if(i.centerInsufficientSlides){let t=0;f.forEach((e=>{t+=e+(b||0)})),t-=b;const e=(i.slidesOffsetBefore||0)+(i.slidesOffsetAfter||0);if(t+e<r){const i=(r-t-e)/2;h.forEach(((t,e)=>{h[e]=t-i})),p.forEach(((t,e)=>{p[e]=t+i}))}}if(Object.assign(t,{slides:d,snapGrid:h,slidesGrid:p,slidesSizesGrid:f}),i.centeredSlides&&i.cssMode&&!i.centeredSlidesBounds){et(n,"--swiper-centered-offset-before",-h[0]+"px"),et(n,"--swiper-centered-offset-after",t.size/2-f[f.length-1]/2+"px");const e=-t.snapGrid[0],i=-t.slidesGrid[0];t.snapGrid=t.snapGrid.map((t=>t+e)),t.slidesGrid=t.slidesGrid.map((t=>t+i))}if(u!==c&&t.emit("slidesLengthChange"),h.length!==v&&(t.params.watchOverflow&&t.checkOverflow(),t.emit("snapGridLengthChange")),p.length!==y&&t.emit("slidesGridLengthChange"),i.watchSlidesProgress&&t.updateSlidesOffset(),t.emit("slidesUpdated"),!(l||i.cssMode||"slide"!==i.effect&&"fade"!==i.effect)){const e=`${i.containerModifierClass}backface-hidden`,n=t.el.classList.contains(e);u<=i.maxBackfaceHiddenSlides?n||t.el.classList.add(e):n&&t.el.classList.remove(e)}},updateAutoHeight:function(t){const e=this,i=[],n=e.virtual&&e.params.virtual.enabled;let s,r=0;"number"==typeof t?e.setTransition(t):!0===t&&e.setTransition(e.params.speed);const o=t=>n?e.slides[e.getSlideIndexByData(t)]:e.slides[t];if("auto"!==e.params.slidesPerView&&e.params.slidesPerView>1)if(e.params.centeredSlides)(e.visibleSlides||[]).forEach((t=>{i.push(t)}));else for(s=0;s<Math.ceil(e.params.slidesPerView);s+=1){const t=e.activeIndex+s;if(t>e.slides.length&&!n)break;i.push(o(t))}else i.push(o(e.activeIndex));for(s=0;s<i.length;s+=1)if(void 0!==i[s]){const t=i[s].offsetHeight;r=t>r?t:r}(r||0===r)&&(e.wrapperEl.style.height=`${r}px`)},updateSlidesOffset:function(){const t=this,e=t.slides,i=t.isElement?t.isHorizontal()?t.wrapperEl.offsetLeft:t.wrapperEl.offsetTop:0;for(let n=0;n<e.length;n+=1)e[n].swiperSlideOffset=(t.isHorizontal()?e[n].offsetLeft:e[n].offsetTop)-i-t.cssOverflowAdjustment()},updateSlidesProgress:function(t){void 0===t&&(t=this&&this.translate||0);const e=this,i=e.params,{slides:n,rtlTranslate:s,snapGrid:r}=e;if(0===n.length)return;void 0===n[0].swiperSlideOffset&&e.updateSlidesOffset();let o=-t;s&&(o=t),e.visibleSlidesIndexes=[],e.visibleSlides=[];let a=i.spaceBetween;"string"==typeof a&&a.indexOf("%")>=0?a=parseFloat(a.replace("%",""))/100*e.size:"string"==typeof a&&(a=parseFloat(a));for(let t=0;t<n.length;t+=1){const l=n[t];let c=l.swiperSlideOffset;i.cssMode&&i.centeredSlides&&(c-=n[0].swiperSlideOffset);const d=(o+(i.centeredSlides?e.minTranslate():0)-c)/(l.swiperSlideSize+a),u=(o-r[0]+(i.centeredSlides?e.minTranslate():0)-c)/(l.swiperSlideSize+a),h=-(o-c),p=h+e.slidesSizesGrid[t],f=h>=0&&h<=e.size-e.slidesSizesGrid[t],g=h>=0&&h<e.size-1||p>1&&p<=e.size||h<=0&&p>=e.size;g&&(e.visibleSlides.push(l),e.visibleSlidesIndexes.push(t)),yt(l,g,i.slideVisibleClass),yt(l,f,i.slideFullyVisibleClass),l.progress=s?-d:d,l.originalProgress=s?-u:u}},updateProgress:function(t){const e=this;if(void 0===t){const i=e.rtlTranslate?-1:1;t=e&&e.translate&&e.translate*i||0}const i=e.params,n=e.maxTranslate()-e.minTranslate();let{progress:s,isBeginning:r,isEnd:o,progressLoop:a}=e;const l=r,c=o;if(0===n)s=0,r=!0,o=!0;else{s=(t-e.minTranslate())/n;const i=Math.abs(t-e.minTranslate())<1,a=Math.abs(t-e.maxTranslate())<1;r=i||s<=0,o=a||s>=1,i&&(s=0),a&&(s=1)}if(i.loop){const i=e.getSlideIndexByData(0),n=e.getSlideIndexByData(e.slides.length-1),s=e.slidesGrid[i],r=e.slidesGrid[n],o=e.slidesGrid[e.slidesGrid.length-1],l=Math.abs(t);a=l>=s?(l-s)/o:(l+o-r)/o,a>1&&(a-=1)}Object.assign(e,{progress:s,progressLoop:a,isBeginning:r,isEnd:o}),(i.watchSlidesProgress||i.centeredSlides&&i.autoHeight)&&e.updateSlidesProgress(t),r&&!l&&e.emit("reachBeginning toEdge"),o&&!c&&e.emit("reachEnd toEdge"),(l&&!r||c&&!o)&&e.emit("fromEdge"),e.emit("progress",s)},updateSlidesClasses:function(){const t=this,{slides:e,params:i,slidesEl:n,activeIndex:s}=t,r=t.virtual&&i.virtual.enabled,o=t.grid&&i.grid&&i.grid.rows>1,a=t=>nt(n,`.${i.slideClass}${t}, swiper-slide${t}`)[0];let l,c,d;if(r)if(i.loop){let e=s-t.virtual.slidesBefore;e<0&&(e=t.virtual.slides.length+e),e>=t.virtual.slides.length&&(e-=t.virtual.slides.length),l=a(`[data-swiper-slide-index="${e}"]`)}else l=a(`[data-swiper-slide-index="${s}"]`);else o?(l=e.filter((t=>t.column===s))[0],d=e.filter((t=>t.column===s+1))[0],c=e.filter((t=>t.column===s-1))[0]):l=e[s];l&&(o||(d=function(t,e){const i=[];for(;t.nextElementSibling;){const n=t.nextElementSibling;e?n.matches(e)&&i.push(n):i.push(n),t=n}return i}(l,`.${i.slideClass}, swiper-slide`)[0],i.loop&&!d&&(d=e[0]),c=function(t,e){const i=[];for(;t.previousElementSibling;){const n=t.previousElementSibling;e?n.matches(e)&&i.push(n):i.push(n),t=n}return i}(l,`.${i.slideClass}, swiper-slide`)[0],i.loop&&0===!c&&(c=e[e.length-1]))),e.forEach((t=>{bt(t,t===l,i.slideActiveClass),bt(t,t===d,i.slideNextClass),bt(t,t===c,i.slidePrevClass)})),t.emitSlidesClasses()},updateActiveIndex:function(t){const e=this,i=e.rtlTranslate?e.translate:-e.translate,{snapGrid:n,params:s,activeIndex:r,realIndex:o,snapIndex:a}=e;let l,c=t;const d=t=>{let i=t-e.virtual.slidesBefore;return i<0&&(i=e.virtual.slides.length+i),i>=e.virtual.slides.length&&(i-=e.virtual.slides.length),i};if(void 0===c&&(c=function(t){const{slidesGrid:e,params:i}=t,n=t.rtlTranslate?t.translate:-t.translate;let s;for(let t=0;t<e.length;t+=1)void 0!==e[t+1]?n>=e[t]&&n<e[t+1]-(e[t+1]-e[t])/2?s=t:n>=e[t]&&n<e[t+1]&&(s=t+1):n>=e[t]&&(s=t);return i.normalizeSlideIndex&&(s<0||void 0===s)&&(s=0),s}(e)),n.indexOf(i)>=0)l=n.indexOf(i);else{const t=Math.min(s.slidesPerGroupSkip,c);l=t+Math.floor((c-t)/s.slidesPerGroup)}if(l>=n.length&&(l=n.length-1),c===r&&!e.params.loop)return void(l!==a&&(e.snapIndex=l,e.emit("snapIndexChange")));if(c===r&&e.params.loop&&e.virtual&&e.params.virtual.enabled)return void(e.realIndex=d(c));const u=e.grid&&s.grid&&s.grid.rows>1;let h;if(e.virtual&&s.virtual.enabled&&s.loop)h=d(c);else if(u){const t=e.slides.filter((t=>t.column===c))[0];let i=parseInt(t.getAttribute("data-swiper-slide-index"),10);Number.isNaN(i)&&(i=Math.max(e.slides.indexOf(t),0)),h=Math.floor(i/s.grid.rows)}else if(e.slides[c]){const t=e.slides[c].getAttribute("data-swiper-slide-index");h=t?parseInt(t,10):c}else h=c;Object.assign(e,{previousSnapIndex:a,snapIndex:l,previousRealIndex:o,realIndex:h,previousIndex:r,activeIndex:c}),e.initialized&&xt(e),e.emit("activeIndexChange"),e.emit("snapIndexChange"),(e.initialized||e.params.runCallbacksOnInit)&&(o!==h&&e.emit("realIndexChange"),e.emit("slideChange"))},updateClickedSlide:function(t,e){const i=this,n=i.params;let s=t.closest(`.${n.slideClass}, swiper-slide`);!s&&i.isElement&&e&&e.length>1&&e.includes(t)&&[...e.slice(e.indexOf(t)+1,e.length)].forEach((t=>{!s&&t.matches&&t.matches(`.${n.slideClass}, swiper-slide`)&&(s=t)}));let r,o=!1;if(s)for(let t=0;t<i.slides.length;t+=1)if(i.slides[t]===s){o=!0,r=t;break}if(!s||!o)return i.clickedSlide=void 0,void(i.clickedIndex=void 0);i.clickedSlide=s,i.virtual&&i.params.virtual.enabled?i.clickedIndex=parseInt(s.getAttribute("data-swiper-slide-index"),10):i.clickedIndex=r,n.slideToClickedSlide&&void 0!==i.clickedIndex&&i.clickedIndex!==i.activeIndex&&i.slideToClickedSlide()}};var St={getTranslate:function(t){void 0===t&&(t=this.isHorizontal()?"x":"y");const{params:e,rtlTranslate:i,translate:n,wrapperEl:s}=this;if(e.virtualTranslate)return i?-n:n;if(e.cssMode)return n;let r=Z(s,t);return r+=this.cssOverflowAdjustment(),i&&(r=-r),r||0},setTranslate:function(t,e){const i=this,{rtlTranslate:n,params:s,wrapperEl:r,progress:o}=i;let a,l=0,c=0;i.isHorizontal()?l=n?-t:t:c=t,s.roundLengths&&(l=Math.floor(l),c=Math.floor(c)),i.previousTranslate=i.translate,i.translate=i.isHorizontal()?l:c,s.cssMode?r[i.isHorizontal()?"scrollLeft":"scrollTop"]=i.isHorizontal()?-l:-c:s.virtualTranslate||(i.isHorizontal()?l-=i.cssOverflowAdjustment():c-=i.cssOverflowAdjustment(),r.style.transform=`translate3d(${l}px, ${c}px, 0px)`);const d=i.maxTranslate()-i.minTranslate();a=0===d?0:(t-i.minTranslate())/d,a!==o&&i.updateProgress(t),i.emit("setTranslate",i.translate,e)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]},translateTo:function(t,e,i,n,s){void 0===t&&(t=0),void 0===e&&(e=this.params.speed),void 0===i&&(i=!0),void 0===n&&(n=!0);const r=this,{params:o,wrapperEl:a}=r;if(r.animating&&o.preventInteractionOnTransition)return!1;const l=r.minTranslate(),c=r.maxTranslate();let d;if(d=n&&t>l?l:n&&t<c?c:t,r.updateProgress(d),o.cssMode){const t=r.isHorizontal();if(0===e)a[t?"scrollLeft":"scrollTop"]=-d;else{if(!r.support.smoothScroll)return it({swiper:r,targetPosition:-d,side:t?"left":"top"}),!0;a.scrollTo({[t?"left":"top"]:-d,behavior:"smooth"})}return!0}return 0===e?(r.setTransition(0),r.setTranslate(d),i&&(r.emit("beforeTransitionStart",e,s),r.emit("transitionEnd"))):(r.setTransition(e),r.setTranslate(d),i&&(r.emit("beforeTransitionStart",e,s),r.emit("transitionStart")),r.animating||(r.animating=!0,r.onTranslateToWrapperTransitionEnd||(r.onTranslateToWrapperTransitionEnd=function(t){r&&!r.destroyed&&t.target===this&&(r.wrapperEl.removeEventListener("transitionend",r.onTranslateToWrapperTransitionEnd),r.onTranslateToWrapperTransitionEnd=null,delete r.onTranslateToWrapperTransitionEnd,r.animating=!1,i&&r.emit("transitionEnd"))}),r.wrapperEl.addEventListener("transitionend",r.onTranslateToWrapperTransitionEnd))),!0}};function Et(t){let{swiper:e,runCallbacks:i,direction:n,step:s}=t;const{activeIndex:r,previousIndex:o}=e;let a=n;if(a||(a=r>o?"next":r<o?"prev":"reset"),e.emit(`transition${s}`),i&&r!==o){if("reset"===a)return void e.emit(`slideResetTransition${s}`);e.emit(`slideChangeTransition${s}`),"next"===a?e.emit(`slideNextTransition${s}`):e.emit(`slidePrevTransition${s}`)}}var Ct={slideTo:function(t,e,i,n,s){void 0===t&&(t=0),void 0===i&&(i=!0),"string"==typeof t&&(t=parseInt(t,10));const r=this;let o=t;o<0&&(o=0);const{params:a,snapGrid:l,slidesGrid:c,previousIndex:d,activeIndex:u,rtlTranslate:h,wrapperEl:p,enabled:f}=r;if(!f&&!n&&!s||r.destroyed||r.animating&&a.preventInteractionOnTransition)return!1;void 0===e&&(e=r.params.speed);const g=Math.min(r.params.slidesPerGroupSkip,o);let m=g+Math.floor((o-g)/r.params.slidesPerGroup);m>=l.length&&(m=l.length-1);const v=-l[m];if(a.normalizeSlideIndex)for(let t=0;t<c.length;t+=1){const e=-Math.floor(100*v),i=Math.floor(100*c[t]),n=Math.floor(100*c[t+1]);void 0!==c[t+1]?e>=i&&e<n-(n-i)/2?o=t:e>=i&&e<n&&(o=t+1):e>=i&&(o=t)}if(r.initialized&&o!==u){if(!r.allowSlideNext&&(h?v>r.translate&&v>r.minTranslate():v<r.translate&&v<r.minTranslate()))return!1;if(!r.allowSlidePrev&&v>r.translate&&v>r.maxTranslate()&&(u||0)!==o)return!1}let y;if(o!==(d||0)&&i&&r.emit("beforeSlideChangeStart"),r.updateProgress(v),y=o>u?"next":o<u?"prev":"reset",h&&-v===r.translate||!h&&v===r.translate)return r.updateActiveIndex(o),a.autoHeight&&r.updateAutoHeight(),r.updateSlidesClasses(),"slide"!==a.effect&&r.setTranslate(v),"reset"!==y&&(r.transitionStart(i,y),r.transitionEnd(i,y)),!1;if(a.cssMode){const t=r.isHorizontal(),i=h?v:-v;if(0===e){const e=r.virtual&&r.params.virtual.enabled;e&&(r.wrapperEl.style.scrollSnapType="none",r._immediateVirtual=!0),e&&!r._cssModeVirtualInitialSet&&r.params.initialSlide>0?(r._cssModeVirtualInitialSet=!0,requestAnimationFrame((()=>{p[t?"scrollLeft":"scrollTop"]=i}))):p[t?"scrollLeft":"scrollTop"]=i,e&&requestAnimationFrame((()=>{r.wrapperEl.style.scrollSnapType="",r._immediateVirtual=!1}))}else{if(!r.support.smoothScroll)return it({swiper:r,targetPosition:i,side:t?"left":"top"}),!0;p.scrollTo({[t?"left":"top"]:i,behavior:"smooth"})}return!0}return r.setTransition(e),r.setTranslate(v),r.updateActiveIndex(o),r.updateSlidesClasses(),r.emit("beforeTransitionStart",e,n),r.transitionStart(i,y),0===e?r.transitionEnd(i,y):r.animating||(r.animating=!0,r.onSlideToWrapperTransitionEnd||(r.onSlideToWrapperTransitionEnd=function(t){r&&!r.destroyed&&t.target===this&&(r.wrapperEl.removeEventListener("transitionend",r.onSlideToWrapperTransitionEnd),r.onSlideToWrapperTransitionEnd=null,delete r.onSlideToWrapperTransitionEnd,r.transitionEnd(i,y))}),r.wrapperEl.addEventListener("transitionend",r.onSlideToWrapperTransitionEnd)),!0},slideToLoop:function(t,e,i,n){if(void 0===t&&(t=0),void 0===i&&(i=!0),"string"==typeof t){t=parseInt(t,10)}const s=this;if(s.destroyed)return;void 0===e&&(e=s.params.speed);const r=s.grid&&s.params.grid&&s.params.grid.rows>1;let o=t;if(s.params.loop)if(s.virtual&&s.params.virtual.enabled)o+=s.virtual.slidesBefore;else{let t;if(r){const e=o*s.params.grid.rows;t=s.slides.filter((t=>1*t.getAttribute("data-swiper-slide-index")===e))[0].column}else t=s.getSlideIndexByData(o);const e=r?Math.ceil(s.slides.length/s.params.grid.rows):s.slides.length,{centeredSlides:i}=s.params;let a=s.params.slidesPerView;"auto"===a?a=s.slidesPerViewDynamic():(a=Math.ceil(parseFloat(s.params.slidesPerView,10)),i&&a%2==0&&(a+=1));let l=e-t<a;if(i&&(l=l||t<Math.ceil(a/2)),n&&i&&"auto"!==s.params.slidesPerView&&!r&&(l=!1),l){const n=i?t<s.activeIndex?"prev":"next":t-s.activeIndex-1<s.params.slidesPerView?"next":"prev";s.loopFix({direction:n,slideTo:!0,activeSlideIndex:"next"===n?t+1:t-e+1,slideRealIndex:"next"===n?s.realIndex:void 0})}if(r){const t=o*s.params.grid.rows;o=s.slides.filter((e=>1*e.getAttribute("data-swiper-slide-index")===t))[0].column}else o=s.getSlideIndexByData(o)}return requestAnimationFrame((()=>{s.slideTo(o,e,i,n)})),s},slideNext:function(t,e,i){void 0===e&&(e=!0);const n=this,{enabled:s,params:r,animating:o}=n;if(!s||n.destroyed)return n;void 0===t&&(t=n.params.speed);let a=r.slidesPerGroup;"auto"===r.slidesPerView&&1===r.slidesPerGroup&&r.slidesPerGroupAuto&&(a=Math.max(n.slidesPerViewDynamic("current",!0),1));const l=n.activeIndex<r.slidesPerGroupSkip?1:a,c=n.virtual&&r.virtual.enabled;if(r.loop){if(o&&!c&&r.loopPreventsSliding)return!1;if(n.loopFix({direction:"next"}),n._clientLeft=n.wrapperEl.clientLeft,n.activeIndex===n.slides.length-1&&r.cssMode)return requestAnimationFrame((()=>{n.slideTo(n.activeIndex+l,t,e,i)})),!0}return r.rewind&&n.isEnd?n.slideTo(0,t,e,i):n.slideTo(n.activeIndex+l,t,e,i)},slidePrev:function(t,e,i){void 0===e&&(e=!0);const n=this,{params:s,snapGrid:r,slidesGrid:o,rtlTranslate:a,enabled:l,animating:c}=n;if(!l||n.destroyed)return n;void 0===t&&(t=n.params.speed);const d=n.virtual&&s.virtual.enabled;if(s.loop){if(c&&!d&&s.loopPreventsSliding)return!1;n.loopFix({direction:"prev"}),n._clientLeft=n.wrapperEl.clientLeft}function u(t){return t<0?-Math.floor(Math.abs(t)):Math.floor(t)}const h=u(a?n.translate:-n.translate),p=r.map((t=>u(t)));let f=r[p.indexOf(h)-1];if(void 0===f&&s.cssMode){let t;r.forEach(((e,i)=>{h>=e&&(t=i)})),void 0!==t&&(f=r[t>0?t-1:t])}let g=0;if(void 0!==f&&(g=o.indexOf(f),g<0&&(g=n.activeIndex-1),"auto"===s.slidesPerView&&1===s.slidesPerGroup&&s.slidesPerGroupAuto&&(g=g-n.slidesPerViewDynamic("previous",!0)+1,g=Math.max(g,0))),s.rewind&&n.isBeginning){const s=n.params.virtual&&n.params.virtual.enabled&&n.virtual?n.virtual.slides.length-1:n.slides.length-1;return n.slideTo(s,t,e,i)}return s.loop&&0===n.activeIndex&&s.cssMode?(requestAnimationFrame((()=>{n.slideTo(g,t,e,i)})),!0):n.slideTo(g,t,e,i)},slideReset:function(t,e,i){void 0===e&&(e=!0);const n=this;if(!n.destroyed)return void 0===t&&(t=n.params.speed),n.slideTo(n.activeIndex,t,e,i)},slideToClosest:function(t,e,i,n){void 0===e&&(e=!0),void 0===n&&(n=.5);const s=this;if(s.destroyed)return;void 0===t&&(t=s.params.speed);let r=s.activeIndex;const o=Math.min(s.params.slidesPerGroupSkip,r),a=o+Math.floor((r-o)/s.params.slidesPerGroup),l=s.rtlTranslate?s.translate:-s.translate;if(l>=s.snapGrid[a]){const t=s.snapGrid[a];l-t>(s.snapGrid[a+1]-t)*n&&(r+=s.params.slidesPerGroup)}else{const t=s.snapGrid[a-1];l-t<=(s.snapGrid[a]-t)*n&&(r-=s.params.slidesPerGroup)}return r=Math.max(r,0),r=Math.min(r,s.slidesGrid.length-1),s.slideTo(r,t,e,i)},slideToClickedSlide:function(){const t=this;if(t.destroyed)return;const{params:e,slidesEl:i}=t,n="auto"===e.slidesPerView?t.slidesPerViewDynamic():e.slidesPerView;let s,r=t.clickedIndex;const o=t.isElement?"swiper-slide":`.${e.slideClass}`;if(e.loop){if(t.animating)return;s=parseInt(t.clickedSlide.getAttribute("data-swiper-slide-index"),10),e.centeredSlides?r<t.loopedSlides-n/2||r>t.slides.length-t.loopedSlides+n/2?(t.loopFix(),r=t.getSlideIndex(nt(i,`${o}[data-swiper-slide-index="${s}"]`)[0]),K((()=>{t.slideTo(r)}))):t.slideTo(r):r>t.slides.length-n?(t.loopFix(),r=t.getSlideIndex(nt(i,`${o}[data-swiper-slide-index="${s}"]`)[0]),K((()=>{t.slideTo(r)}))):t.slideTo(r)}else t.slideTo(r)}};var kt={loopCreate:function(t){const e=this,{params:i,slidesEl:n}=e;if(!i.loop||e.virtual&&e.params.virtual.enabled)return;const s=()=>{nt(n,`.${i.slideClass}, swiper-slide`).forEach(((t,e)=>{t.setAttribute("data-swiper-slide-index",e)}))},r=e.grid&&i.grid&&i.grid.rows>1,o=i.slidesPerGroup*(r?i.grid.rows:1),a=e.slides.length%o!=0,l=r&&e.slides.length%i.grid.rows!=0,c=t=>{for(let n=0;n<t;n+=1){const t=e.isElement?rt("swiper-slide",[i.slideBlankClass]):rt("div",[i.slideClass,i.slideBlankClass]);e.slidesEl.append(t)}};if(a){if(i.loopAddBlankSlides){c(o-e.slides.length%o),e.recalcSlides(),e.updateSlides()}else st("Swiper Loop Warning: The number of slides is not even to slidesPerGroup, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)");s()}else if(l){if(i.loopAddBlankSlides){c(i.grid.rows-e.slides.length%i.grid.rows),e.recalcSlides(),e.updateSlides()}else st("Swiper Loop Warning: The number of slides is not even to grid.rows, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)");s()}else s();e.loopFix({slideRealIndex:t,direction:i.centeredSlides?void 0:"next"})},loopFix:function(t){let{slideRealIndex:e,slideTo:i=!0,direction:n,setTranslate:s,activeSlideIndex:r,byController:o,byMousewheel:a}=void 0===t?{}:t;const l=this;if(!l.params.loop)return;l.emit("beforeLoopFix");const{slides:c,allowSlidePrev:d,allowSlideNext:u,slidesEl:h,params:p}=l,{centeredSlides:f}=p;if(l.allowSlidePrev=!0,l.allowSlideNext=!0,l.virtual&&p.virtual.enabled)return i&&(p.centeredSlides||0!==l.snapIndex?p.centeredSlides&&l.snapIndex<p.slidesPerView?l.slideTo(l.virtual.slides.length+l.snapIndex,0,!1,!0):l.snapIndex===l.snapGrid.length-1&&l.slideTo(l.virtual.slidesBefore,0,!1,!0):l.slideTo(l.virtual.slides.length,0,!1,!0)),l.allowSlidePrev=d,l.allowSlideNext=u,void l.emit("loopFix");let g=p.slidesPerView;"auto"===g?g=l.slidesPerViewDynamic():(g=Math.ceil(parseFloat(p.slidesPerView,10)),f&&g%2==0&&(g+=1));const m=p.slidesPerGroupAuto?g:p.slidesPerGroup;let v=m;v%m!=0&&(v+=m-v%m),v+=p.loopAdditionalSlides,l.loopedSlides=v;const y=l.grid&&p.grid&&p.grid.rows>1;c.length<g+v?st("Swiper Loop Warning: The number of slides is not enough for loop mode, it will be disabled and not function properly. You need to add more slides (or make duplicates) or lower the values of slidesPerView and slidesPerGroup parameters"):y&&"row"===p.grid.fill&&st("Swiper Loop Warning: Loop mode is not compatible with grid.fill = `row`");const b=[],w=[];let _=l.activeIndex;void 0===r?r=l.getSlideIndex(c.filter((t=>t.classList.contains(p.slideActiveClass)))[0]):_=r;const x="next"===n||!n,T="prev"===n||!n;let S=0,E=0;const C=y?Math.ceil(c.length/p.grid.rows):c.length,k=(y?c[r].column:r)+(f&&void 0===s?-g/2+.5:0);if(k<v){S=Math.max(v-k,m);for(let t=0;t<v-k;t+=1){const e=t-Math.floor(t/C)*C;if(y){const t=C-e-1;for(let e=c.length-1;e>=0;e-=1)c[e].column===t&&b.push(e)}else b.push(C-e-1)}}else if(k+g>C-v){E=Math.max(k-(C-2*v),m);for(let t=0;t<E;t+=1){const e=t-Math.floor(t/C)*C;y?c.forEach(((t,i)=>{t.column===e&&w.push(i)})):w.push(e)}}if(l.__preventObserver__=!0,requestAnimationFrame((()=>{l.__preventObserver__=!1})),T&&b.forEach((t=>{c[t].swiperLoopMoveDOM=!0,h.prepend(c[t]),c[t].swiperLoopMoveDOM=!1})),x&&w.forEach((t=>{c[t].swiperLoopMoveDOM=!0,h.append(c[t]),c[t].swiperLoopMoveDOM=!1})),l.recalcSlides(),"auto"===p.slidesPerView?l.updateSlides():y&&(b.length>0&&T||w.length>0&&x)&&l.slides.forEach(((t,e)=>{l.grid.updateSlide(e,t,l.slides)})),p.watchSlidesProgress&&l.updateSlidesOffset(),i)if(b.length>0&&T){if(void 0===e){const t=l.slidesGrid[_],e=l.slidesGrid[_+S]-t;a?l.setTranslate(l.translate-e):(l.slideTo(_+Math.ceil(S),0,!1,!0),s&&(l.touchEventsData.startTranslate=l.touchEventsData.startTranslate-e,l.touchEventsData.currentTranslate=l.touchEventsData.currentTranslate-e))}else if(s){const t=y?b.length/p.grid.rows:b.length;l.slideTo(l.activeIndex+t,0,!1,!0),l.touchEventsData.currentTranslate=l.translate}}else if(w.length>0&&x)if(void 0===e){const t=l.slidesGrid[_],e=l.slidesGrid[_-E]-t;a?l.setTranslate(l.translate-e):(l.slideTo(_-E,0,!1,!0),s&&(l.touchEventsData.startTranslate=l.touchEventsData.startTranslate-e,l.touchEventsData.currentTranslate=l.touchEventsData.currentTranslate-e))}else{const t=y?w.length/p.grid.rows:w.length;l.slideTo(l.activeIndex-t,0,!1,!0)}if(l.allowSlidePrev=d,l.allowSlideNext=u,l.controller&&l.controller.control&&!o){const t={slideRealIndex:e,direction:n,setTranslate:s,activeSlideIndex:r,byController:!0};Array.isArray(l.controller.control)?l.controller.control.forEach((e=>{!e.destroyed&&e.params.loop&&e.loopFix({...t,slideTo:e.params.slidesPerView===p.slidesPerView&&i})})):l.controller.control instanceof l.constructor&&l.controller.control.params.loop&&l.controller.control.loopFix({...t,slideTo:l.controller.control.params.slidesPerView===p.slidesPerView&&i})}l.emit("loopFix")},loopDestroy:function(){const t=this,{params:e,slidesEl:i}=t;if(!e.loop||t.virtual&&t.params.virtual.enabled)return;t.recalcSlides();const n=[];t.slides.forEach((t=>{const e=void 0===t.swiperSlideIndex?1*t.getAttribute("data-swiper-slide-index"):t.swiperSlideIndex;n[e]=t})),t.slides.forEach((t=>{t.removeAttribute("data-swiper-slide-index")})),n.forEach((t=>{i.append(t)})),t.recalcSlides(),t.slideTo(t.realIndex,0)}};function Mt(t,e,i){const n=U(),{params:s}=t,r=s.edgeSwipeDetection,o=s.edgeSwipeThreshold;return!r||!(i<=o||i>=n.innerWidth-o)||"prevent"===r&&(e.preventDefault(),!0)}function Ot(t){const e=this,i=X();let n=t;n.originalEvent&&(n=n.originalEvent);const s=e.touchEventsData;if("pointerdown"===n.type){if(null!==s.pointerId&&s.pointerId!==n.pointerId)return;s.pointerId=n.pointerId}else"touchstart"===n.type&&1===n.targetTouches.length&&(s.touchId=n.targetTouches[0].identifier);if("touchstart"===n.type)return void Mt(e,n,n.targetTouches[0].pageX);const{params:r,touches:o,enabled:a}=e;if(!a)return;if(!r.simulateTouch&&"mouse"===n.pointerType)return;if(e.animating&&r.preventInteractionOnTransition)return;!e.animating&&r.cssMode&&r.loop&&e.loopFix();let l=n.target;if("wrapper"===r.touchEventsTarget&&!function(t,e){const i=e.contains(t);if(!i&&e instanceof HTMLSlotElement)return[...e.assignedElements()].includes(t);return i}(l,e.wrapperEl))return;if("which"in n&&3===n.which)return;if("button"in n&&n.button>0)return;if(s.isTouched&&s.isMoved)return;const c=!!r.noSwipingClass&&""!==r.noSwipingClass,d=n.composedPath?n.composedPath():n.path;c&&n.target&&n.target.shadowRoot&&d&&(l=d[0]);const u=r.noSwipingSelector?r.noSwipingSelector:`.${r.noSwipingClass}`,h=!(!n.target||!n.target.shadowRoot);if(r.noSwiping&&(h?function(t,e){return void 0===e&&(e=this),function e(i){if(!i||i===X()||i===U())return null;i.assignedSlot&&(i=i.assignedSlot);const n=i.closest(t);return n||i.getRootNode?n||e(i.getRootNode().host):null}(e)}(u,l):l.closest(u)))return void(e.allowClick=!0);if(r.swipeHandler&&!l.closest(r.swipeHandler))return;o.currentX=n.pageX,o.currentY=n.pageY;const p=o.currentX,f=o.currentY;if(!Mt(e,n,p))return;Object.assign(s,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),o.startX=p,o.startY=f,s.touchStartTime=J(),e.allowClick=!0,e.updateSize(),e.swipeDirection=void 0,r.threshold>0&&(s.allowThresholdMove=!1);let g=!0;l.matches(s.focusableElements)&&(g=!1,"SELECT"===l.nodeName&&(s.isTouched=!1)),i.activeElement&&i.activeElement.matches(s.focusableElements)&&i.activeElement!==l&&i.activeElement.blur();const m=g&&e.allowTouchMove&&r.touchStartPreventDefault;!r.touchStartForcePreventDefault&&!m||l.isContentEditable||n.preventDefault(),r.freeMode&&r.freeMode.enabled&&e.freeMode&&e.animating&&!r.cssMode&&e.freeMode.onTouchStart(),e.emit("touchStart",n)}function At(t){const e=X(),i=this,n=i.touchEventsData,{params:s,touches:r,rtlTranslate:o,enabled:a}=i;if(!a)return;if(!s.simulateTouch&&"mouse"===t.pointerType)return;let l,c=t;if(c.originalEvent&&(c=c.originalEvent),"pointermove"===c.type){if(null!==n.touchId)return;if(c.pointerId!==n.pointerId)return}if("touchmove"===c.type){if(l=[...c.changedTouches].filter((t=>t.identifier===n.touchId))[0],!l||l.identifier!==n.touchId)return}else l=c;if(!n.isTouched)return void(n.startMoving&&n.isScrolling&&i.emit("touchMoveOpposite",c));const d=l.pageX,u=l.pageY;if(c.preventedByNestedSwiper)return r.startX=d,void(r.startY=u);if(!i.allowTouchMove)return c.target.matches(n.focusableElements)||(i.allowClick=!1),void(n.isTouched&&(Object.assign(r,{startX:d,startY:u,currentX:d,currentY:u}),n.touchStartTime=J()));if(s.touchReleaseOnEdges&&!s.loop)if(i.isVertical()){if(u<r.startY&&i.translate<=i.maxTranslate()||u>r.startY&&i.translate>=i.minTranslate())return n.isTouched=!1,void(n.isMoved=!1)}else if(d<r.startX&&i.translate<=i.maxTranslate()||d>r.startX&&i.translate>=i.minTranslate())return;if(e.activeElement&&c.target===e.activeElement&&c.target.matches(n.focusableElements))return n.isMoved=!0,void(i.allowClick=!1);n.allowTouchCallbacks&&i.emit("touchMove",c),r.previousX=r.currentX,r.previousY=r.currentY,r.currentX=d,r.currentY=u;const h=r.currentX-r.startX,p=r.currentY-r.startY;if(i.params.threshold&&Math.sqrt(h**2+p**2)<i.params.threshold)return;if(void 0===n.isScrolling){let t;i.isHorizontal()&&r.currentY===r.startY||i.isVertical()&&r.currentX===r.startX?n.isScrolling=!1:h*h+p*p>=25&&(t=180*Math.atan2(Math.abs(p),Math.abs(h))/Math.PI,n.isScrolling=i.isHorizontal()?t>s.touchAngle:90-t>s.touchAngle)}if(n.isScrolling&&i.emit("touchMoveOpposite",c),void 0===n.startMoving&&(r.currentX===r.startX&&r.currentY===r.startY||(n.startMoving=!0)),n.isScrolling||"touchmove"===c.type&&n.preventTouchMoveFromPointerMove)return void(n.isTouched=!1);if(!n.startMoving)return;i.allowClick=!1,!s.cssMode&&c.cancelable&&c.preventDefault(),s.touchMoveStopPropagation&&!s.nested&&c.stopPropagation();let f=i.isHorizontal()?h:p,g=i.isHorizontal()?r.currentX-r.previousX:r.currentY-r.previousY;s.oneWayMovement&&(f=Math.abs(f)*(o?1:-1),g=Math.abs(g)*(o?1:-1)),r.diff=f,f*=s.touchRatio,o&&(f=-f,g=-g);const m=i.touchesDirection;i.swipeDirection=f>0?"prev":"next",i.touchesDirection=g>0?"prev":"next";const v=i.params.loop&&!s.cssMode,y="next"===i.touchesDirection&&i.allowSlideNext||"prev"===i.touchesDirection&&i.allowSlidePrev;if(!n.isMoved){if(v&&y&&i.loopFix({direction:i.swipeDirection}),n.startTranslate=i.getTranslate(),i.setTransition(0),i.animating){const t=new window.CustomEvent("transitionend",{bubbles:!0,cancelable:!0,detail:{bySwiperTouchMove:!0}});i.wrapperEl.dispatchEvent(t)}n.allowMomentumBounce=!1,!s.grabCursor||!0!==i.allowSlideNext&&!0!==i.allowSlidePrev||i.setGrabCursor(!0),i.emit("sliderFirstMove",c)}if((new Date).getTime(),n.isMoved&&n.allowThresholdMove&&m!==i.touchesDirection&&v&&y&&Math.abs(f)>=1)return Object.assign(r,{startX:d,startY:u,currentX:d,currentY:u,startTranslate:n.currentTranslate}),n.loopSwapReset=!0,void(n.startTranslate=n.currentTranslate);i.emit("sliderMove",c),n.isMoved=!0,n.currentTranslate=f+n.startTranslate;let b=!0,w=s.resistanceRatio;if(s.touchReleaseOnEdges&&(w=0),f>0?(v&&y&&n.allowThresholdMove&&n.currentTranslate>(s.centeredSlides?i.minTranslate()-i.slidesSizesGrid[i.activeIndex+1]-("auto"!==s.slidesPerView&&i.slides.length-s.slidesPerView>=2?i.slidesSizesGrid[i.activeIndex+1]+i.params.spaceBetween:0)-i.params.spaceBetween:i.minTranslate())&&i.loopFix({direction:"prev",setTranslate:!0,activeSlideIndex:0}),n.currentTranslate>i.minTranslate()&&(b=!1,s.resistance&&(n.currentTranslate=i.minTranslate()-1+(-i.minTranslate()+n.startTranslate+f)**w))):f<0&&(v&&y&&n.allowThresholdMove&&n.currentTranslate<(s.centeredSlides?i.maxTranslate()+i.slidesSizesGrid[i.slidesSizesGrid.length-1]+i.params.spaceBetween+("auto"!==s.slidesPerView&&i.slides.length-s.slidesPerView>=2?i.slidesSizesGrid[i.slidesSizesGrid.length-1]+i.params.spaceBetween:0):i.maxTranslate())&&i.loopFix({direction:"next",setTranslate:!0,activeSlideIndex:i.slides.length-("auto"===s.slidesPerView?i.slidesPerViewDynamic():Math.ceil(parseFloat(s.slidesPerView,10)))}),n.currentTranslate<i.maxTranslate()&&(b=!1,s.resistance&&(n.currentTranslate=i.maxTranslate()+1-(i.maxTranslate()-n.startTranslate-f)**w))),b&&(c.preventedByNestedSwiper=!0),!i.allowSlideNext&&"next"===i.swipeDirection&&n.currentTranslate<n.startTranslate&&(n.currentTranslate=n.startTranslate),!i.allowSlidePrev&&"prev"===i.swipeDirection&&n.currentTranslate>n.startTranslate&&(n.currentTranslate=n.startTranslate),i.allowSlidePrev||i.allowSlideNext||(n.currentTranslate=n.startTranslate),s.threshold>0){if(!(Math.abs(f)>s.threshold||n.allowThresholdMove))return void(n.currentTranslate=n.startTranslate);if(!n.allowThresholdMove)return n.allowThresholdMove=!0,r.startX=r.currentX,r.startY=r.currentY,n.currentTranslate=n.startTranslate,void(r.diff=i.isHorizontal()?r.currentX-r.startX:r.currentY-r.startY)}s.followFinger&&!s.cssMode&&((s.freeMode&&s.freeMode.enabled&&i.freeMode||s.watchSlidesProgress)&&(i.updateActiveIndex(),i.updateSlidesClasses()),s.freeMode&&s.freeMode.enabled&&i.freeMode&&i.freeMode.onTouchMove(),i.updateProgress(n.currentTranslate),i.setTranslate(n.currentTranslate))}function It(t){const e=this,i=e.touchEventsData;let n,s=t;s.originalEvent&&(s=s.originalEvent);if("touchend"===s.type||"touchcancel"===s.type){if(n=[...s.changedTouches].filter((t=>t.identifier===i.touchId))[0],!n||n.identifier!==i.touchId)return}else{if(null!==i.touchId)return;if(s.pointerId!==i.pointerId)return;n=s}if(["pointercancel","pointerout","pointerleave","contextmenu"].includes(s.type)){if(!(["pointercancel","contextmenu"].includes(s.type)&&(e.browser.isSafari||e.browser.isWebView)))return}i.pointerId=null,i.touchId=null;const{params:r,touches:o,rtlTranslate:a,slidesGrid:l,enabled:c}=e;if(!c)return;if(!r.simulateTouch&&"mouse"===s.pointerType)return;if(i.allowTouchCallbacks&&e.emit("touchEnd",s),i.allowTouchCallbacks=!1,!i.isTouched)return i.isMoved&&r.grabCursor&&e.setGrabCursor(!1),i.isMoved=!1,void(i.startMoving=!1);r.grabCursor&&i.isMoved&&i.isTouched&&(!0===e.allowSlideNext||!0===e.allowSlidePrev)&&e.setGrabCursor(!1);const d=J(),u=d-i.touchStartTime;if(e.allowClick){const t=s.path||s.composedPath&&s.composedPath();e.updateClickedSlide(t&&t[0]||s.target,t),e.emit("tap click",s),u<300&&d-i.lastClickTime<300&&e.emit("doubleTap doubleClick",s)}if(i.lastClickTime=J(),K((()=>{e.destroyed||(e.allowClick=!0)})),!i.isTouched||!i.isMoved||!e.swipeDirection||0===o.diff&&!i.loopSwapReset||i.currentTranslate===i.startTranslate&&!i.loopSwapReset)return i.isTouched=!1,i.isMoved=!1,void(i.startMoving=!1);let h;if(i.isTouched=!1,i.isMoved=!1,i.startMoving=!1,h=r.followFinger?a?e.translate:-e.translate:-i.currentTranslate,r.cssMode)return;if(r.freeMode&&r.freeMode.enabled)return void e.freeMode.onTouchEnd({currentPos:h});const p=h>=-e.maxTranslate()&&!e.params.loop;let f=0,g=e.slidesSizesGrid[0];for(let t=0;t<l.length;t+=t<r.slidesPerGroupSkip?1:r.slidesPerGroup){const e=t<r.slidesPerGroupSkip-1?1:r.slidesPerGroup;void 0!==l[t+e]?(p||h>=l[t]&&h<l[t+e])&&(f=t,g=l[t+e]-l[t]):(p||h>=l[t])&&(f=t,g=l[l.length-1]-l[l.length-2])}let m=null,v=null;r.rewind&&(e.isBeginning?v=r.virtual&&r.virtual.enabled&&e.virtual?e.virtual.slides.length-1:e.slides.length-1:e.isEnd&&(m=0));const y=(h-l[f])/g,b=f<r.slidesPerGroupSkip-1?1:r.slidesPerGroup;if(u>r.longSwipesMs){if(!r.longSwipes)return void e.slideTo(e.activeIndex);"next"===e.swipeDirection&&(y>=r.longSwipesRatio?e.slideTo(r.rewind&&e.isEnd?m:f+b):e.slideTo(f)),"prev"===e.swipeDirection&&(y>1-r.longSwipesRatio?e.slideTo(f+b):null!==v&&y<0&&Math.abs(y)>r.longSwipesRatio?e.slideTo(v):e.slideTo(f))}else{if(!r.shortSwipes)return void e.slideTo(e.activeIndex);e.navigation&&(s.target===e.navigation.nextEl||s.target===e.navigation.prevEl)?s.target===e.navigation.nextEl?e.slideTo(f+b):e.slideTo(f):("next"===e.swipeDirection&&e.slideTo(null!==m?m:f+b),"prev"===e.swipeDirection&&e.slideTo(null!==v?v:f))}}function Pt(){const t=this,{params:e,el:i}=t;if(i&&0===i.offsetWidth)return;e.breakpoints&&t.setBreakpoint();const{allowSlideNext:n,allowSlidePrev:s,snapGrid:r}=t,o=t.virtual&&t.params.virtual.enabled;t.allowSlideNext=!0,t.allowSlidePrev=!0,t.updateSize(),t.updateSlides(),t.updateSlidesClasses();const a=o&&e.loop;!("auto"===e.slidesPerView||e.slidesPerView>1)||!t.isEnd||t.isBeginning||t.params.centeredSlides||a?t.params.loop&&!o?t.slideToLoop(t.realIndex,0,!1,!0):t.slideTo(t.activeIndex,0,!1,!0):t.slideTo(t.slides.length-1,0,!1,!0),t.autoplay&&t.autoplay.running&&t.autoplay.paused&&(clearTimeout(t.autoplay.resizeTimeout),t.autoplay.resizeTimeout=setTimeout((()=>{t.autoplay&&t.autoplay.running&&t.autoplay.paused&&t.autoplay.resume()}),500)),t.allowSlidePrev=s,t.allowSlideNext=n,t.params.watchOverflow&&r!==t.snapGrid&&t.checkOverflow()}function Lt(t){const e=this;e.enabled&&(e.allowClick||(e.params.preventClicks&&t.preventDefault(),e.params.preventClicksPropagation&&e.animating&&(t.stopPropagation(),t.stopImmediatePropagation())))}function Dt(){const t=this,{wrapperEl:e,rtlTranslate:i,enabled:n}=t;if(!n)return;let s;t.previousTranslate=t.translate,t.isHorizontal()?t.translate=-e.scrollLeft:t.translate=-e.scrollTop,0===t.translate&&(t.translate=0),t.updateActiveIndex(),t.updateSlidesClasses();const r=t.maxTranslate()-t.minTranslate();s=0===r?0:(t.translate-t.minTranslate())/r,s!==t.progress&&t.updateProgress(i?-t.translate:t.translate),t.emit("setTranslate",t.translate,!1)}function zt(t){const e=this;wt(e,t.target),e.params.cssMode||"auto"!==e.params.slidesPerView&&!e.params.autoHeight||e.update()}function Bt(){const t=this;t.documentTouchHandlerProceeded||(t.documentTouchHandlerProceeded=!0,t.params.touchReleaseOnEdges&&(t.el.style.touchAction="auto"))}const Ft=(t,e)=>{const i=X(),{params:n,el:s,wrapperEl:r,device:o}=t,a=!!n.nested,l="on"===e?"addEventListener":"removeEventListener",c=e;s&&"string"!=typeof s&&(i[l]("touchstart",t.onDocumentTouchStart,{passive:!1,capture:a}),s[l]("touchstart",t.onTouchStart,{passive:!1}),s[l]("pointerdown",t.onTouchStart,{passive:!1}),i[l]("touchmove",t.onTouchMove,{passive:!1,capture:a}),i[l]("pointermove",t.onTouchMove,{passive:!1,capture:a}),i[l]("touchend",t.onTouchEnd,{passive:!0}),i[l]("pointerup",t.onTouchEnd,{passive:!0}),i[l]("pointercancel",t.onTouchEnd,{passive:!0}),i[l]("touchcancel",t.onTouchEnd,{passive:!0}),i[l]("pointerout",t.onTouchEnd,{passive:!0}),i[l]("pointerleave",t.onTouchEnd,{passive:!0}),i[l]("contextmenu",t.onTouchEnd,{passive:!0}),(n.preventClicks||n.preventClicksPropagation)&&s[l]("click",t.onClick,!0),n.cssMode&&r[l]("scroll",t.onScroll),n.updateOnWindowResize?t[c](o.ios||o.android?"resize orientationchange observerUpdate":"resize observerUpdate",Pt,!0):t[c]("observerUpdate",Pt,!0),s[l]("load",t.onLoad,{capture:!0}))};const Rt=(t,e)=>t.grid&&e.grid&&e.grid.rows>1;var Ht={init:!0,direction:"horizontal",oneWayMovement:!1,swiperElementNodeName:"SWIPER-CONTAINER",touchEventsTarget:"wrapper",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,resizeObserver:!0,nested:!1,createElements:!1,eventsPrefix:"swiper",enabled:!0,focusableElements:"input, select, option, textarea, button, video, label",width:null,height:null,preventInteractionOnTransition:!1,userAgent:null,url:null,edgeSwipeDetection:!1,edgeSwipeThreshold:20,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,breakpointsBase:"window",spaceBetween:0,slidesPerView:1,slidesPerGroup:1,slidesPerGroupSkip:0,slidesPerGroupAuto:!1,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!0,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:5,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,loop:!1,loopAddBlankSlides:!0,loopAdditionalSlides:0,loopPreventsSliding:!0,rewind:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,maxBackfaceHiddenSlides:10,containerModifierClass:"swiper-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-blank",slideActiveClass:"swiper-slide-active",slideVisibleClass:"swiper-slide-visible",slideFullyVisibleClass:"swiper-slide-fully-visible",slideNextClass:"swiper-slide-next",slidePrevClass:"swiper-slide-prev",wrapperClass:"swiper-wrapper",lazyPreloaderClass:"swiper-lazy-preloader",lazyPreloadPrevNext:0,runCallbacksOnInit:!0,_emitClasses:!1};function Gt(t,e){return function(i){void 0===i&&(i={});const n=Object.keys(i)[0],s=i[n];"object"==typeof s&&null!==s?(!0===t[n]&&(t[n]={enabled:!0}),"navigation"===n&&t[n]&&t[n].enabled&&!t[n].prevEl&&!t[n].nextEl&&(t[n].auto=!0),["pagination","scrollbar"].indexOf(n)>=0&&t[n]&&t[n].enabled&&!t[n].el&&(t[n].auto=!0),n in t&&"enabled"in s?("object"!=typeof t[n]||"enabled"in t[n]||(t[n].enabled=!0),t[n]||(t[n]={enabled:!1}),tt(e,i)):tt(e,i)):tt(e,i)}}const Yt={eventsEmitter:vt,update:Tt,translate:St,transition:{setTransition:function(t,e){const i=this;i.params.cssMode||(i.wrapperEl.style.transitionDuration=`${t}ms`,i.wrapperEl.style.transitionDelay=0===t?"0ms":""),i.emit("setTransition",t,e)},transitionStart:function(t,e){void 0===t&&(t=!0);const i=this,{params:n}=i;n.cssMode||(n.autoHeight&&i.updateAutoHeight(),Et({swiper:i,runCallbacks:t,direction:e,step:"Start"}))},transitionEnd:function(t,e){void 0===t&&(t=!0);const i=this,{params:n}=i;i.animating=!1,n.cssMode||(i.setTransition(0),Et({swiper:i,runCallbacks:t,direction:e,step:"End"}))}},slide:Ct,loop:kt,grabCursor:{setGrabCursor:function(t){const e=this;if(!e.params.simulateTouch||e.params.watchOverflow&&e.isLocked||e.params.cssMode)return;const i="container"===e.params.touchEventsTarget?e.el:e.wrapperEl;e.isElement&&(e.__preventObserver__=!0),i.style.cursor="move",i.style.cursor=t?"grabbing":"grab",e.isElement&&requestAnimationFrame((()=>{e.__preventObserver__=!1}))},unsetGrabCursor:function(){const t=this;t.params.watchOverflow&&t.isLocked||t.params.cssMode||(t.isElement&&(t.__preventObserver__=!0),t["container"===t.params.touchEventsTarget?"el":"wrapperEl"].style.cursor="",t.isElement&&requestAnimationFrame((()=>{t.__preventObserver__=!1})))}},events:{attachEvents:function(){const t=this,{params:e}=t;t.onTouchStart=Ot.bind(t),t.onTouchMove=At.bind(t),t.onTouchEnd=It.bind(t),t.onDocumentTouchStart=Bt.bind(t),e.cssMode&&(t.onScroll=Dt.bind(t)),t.onClick=Lt.bind(t),t.onLoad=zt.bind(t),Ft(t,"on")},detachEvents:function(){Ft(this,"off")}},breakpoints:{setBreakpoint:function(){const t=this,{realIndex:e,initialized:i,params:n,el:s}=t,r=n.breakpoints;if(!r||r&&0===Object.keys(r).length)return;const o=t.getBreakpoint(r,t.params.breakpointsBase,t.el);if(!o||t.currentBreakpoint===o)return;const a=(o in r?r[o]:void 0)||t.originalParams,l=Rt(t,n),c=Rt(t,a),d=t.params.grabCursor,u=a.grabCursor,h=n.enabled;l&&!c?(s.classList.remove(`${n.containerModifierClass}grid`,`${n.containerModifierClass}grid-column`),t.emitContainerClasses()):!l&&c&&(s.classList.add(`${n.containerModifierClass}grid`),(a.grid.fill&&"column"===a.grid.fill||!a.grid.fill&&"column"===n.grid.fill)&&s.classList.add(`${n.containerModifierClass}grid-column`),t.emitContainerClasses()),d&&!u?t.unsetGrabCursor():!d&&u&&t.setGrabCursor(),["navigation","pagination","scrollbar"].forEach((e=>{if(void 0===a[e])return;const i=n[e]&&n[e].enabled,s=a[e]&&a[e].enabled;i&&!s&&t[e].disable(),!i&&s&&t[e].enable()}));const p=a.direction&&a.direction!==n.direction,f=n.loop&&(a.slidesPerView!==n.slidesPerView||p),g=n.loop;p&&i&&t.changeDirection(),tt(t.params,a);const m=t.params.enabled,v=t.params.loop;Object.assign(t,{allowTouchMove:t.params.allowTouchMove,allowSlideNext:t.params.allowSlideNext,allowSlidePrev:t.params.allowSlidePrev}),h&&!m?t.disable():!h&&m&&t.enable(),t.currentBreakpoint=o,t.emit("_beforeBreakpoint",a),i&&(f?(t.loopDestroy(),t.loopCreate(e),t.updateSlides()):!g&&v?(t.loopCreate(e),t.updateSlides()):g&&!v&&t.loopDestroy()),t.emit("breakpoint",a)},getBreakpoint:function(t,e,i){if(void 0===e&&(e="window"),!t||"container"===e&&!i)return;let n=!1;const s=U(),r="window"===e?s.innerHeight:i.clientHeight,o=Object.keys(t).map((t=>{if("string"==typeof t&&0===t.indexOf("@")){const e=parseFloat(t.substr(1));return{value:r*e,point:t}}return{value:t,point:t}}));o.sort(((t,e)=>parseInt(t.value,10)-parseInt(e.value,10)));for(let t=0;t<o.length;t+=1){const{point:r,value:a}=o[t];"window"===e?s.matchMedia(`(min-width: ${a}px)`).matches&&(n=r):a<=i.clientWidth&&(n=r)}return n||"max"}},checkOverflow:{checkOverflow:function(){const t=this,{isLocked:e,params:i}=t,{slidesOffsetBefore:n}=i;if(n){const e=t.slides.length-1,i=t.slidesGrid[e]+t.slidesSizesGrid[e]+2*n;t.isLocked=t.size>i}else t.isLocked=1===t.snapGrid.length;!0===i.allowSlideNext&&(t.allowSlideNext=!t.isLocked),!0===i.allowSlidePrev&&(t.allowSlidePrev=!t.isLocked),e&&e!==t.isLocked&&(t.isEnd=!1),e!==t.isLocked&&t.emit(t.isLocked?"lock":"unlock")}},classes:{addClasses:function(){const t=this,{classNames:e,params:i,rtl:n,el:s,device:r}=t,o=function(t,e){const i=[];return t.forEach((t=>{"object"==typeof t?Object.keys(t).forEach((n=>{t[n]&&i.push(e+n)})):"string"==typeof t&&i.push(e+t)})),i}(["initialized",i.direction,{"free-mode":t.params.freeMode&&i.freeMode.enabled},{autoheight:i.autoHeight},{rtl:n},{grid:i.grid&&i.grid.rows>1},{"grid-column":i.grid&&i.grid.rows>1&&"column"===i.grid.fill},{android:r.android},{ios:r.ios},{"css-mode":i.cssMode},{centered:i.cssMode&&i.centeredSlides},{"watch-progress":i.watchSlidesProgress}],i.containerModifierClass);e.push(...o),s.classList.add(...e),t.emitContainerClasses()},removeClasses:function(){const{el:t,classNames:e}=this;t&&"string"!=typeof t&&(t.classList.remove(...e),this.emitContainerClasses())}}},Nt={};class Vt{constructor(){let t,e;for(var i=arguments.length,n=new Array(i),s=0;s<i;s++)n[s]=arguments[s];1===n.length&&n[0].constructor&&"Object"===Object.prototype.toString.call(n[0]).slice(8,-1)?e=n[0]:[t,e]=n,e||(e={}),e=tt({},e),t&&!e.el&&(e.el=t);const r=X();if(e.el&&"string"==typeof e.el&&r.querySelectorAll(e.el).length>1){const t=[];return r.querySelectorAll(e.el).forEach((i=>{const n=tt({},e,{el:i});t.push(new Vt(n))})),t}const o=this;o.__swiper__=!0,o.support=ft(),o.device=gt({userAgent:e.userAgent}),o.browser=mt(),o.eventsListeners={},o.eventsAnyListeners=[],o.modules=[...o.__modules__],e.modules&&Array.isArray(e.modules)&&o.modules.push(...e.modules);const a={};o.modules.forEach((t=>{t({params:e,swiper:o,extendParams:Gt(e,a),on:o.on.bind(o),once:o.once.bind(o),off:o.off.bind(o),emit:o.emit.bind(o)})}));const l=tt({},Ht,a);return o.params=tt({},l,Nt,e),o.originalParams=tt({},o.params),o.passedParams=tt({},e),o.params&&o.params.on&&Object.keys(o.params.on).forEach((t=>{o.on(t,o.params.on[t])})),o.params&&o.params.onAny&&o.onAny(o.params.onAny),Object.assign(o,{enabled:o.params.enabled,el:t,classNames:[],slides:[],slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:()=>"horizontal"===o.params.direction,isVertical:()=>"vertical"===o.params.direction,activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,cssOverflowAdjustment(){return Math.trunc(this.translate/2**23)*2**23},allowSlideNext:o.params.allowSlideNext,allowSlidePrev:o.params.allowSlidePrev,touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,focusableElements:o.params.focusableElements,lastClickTime:0,clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,startMoving:void 0,pointerId:null,touchId:null},allowClick:!0,allowTouchMove:o.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),o.emit("_swiper"),o.params.init&&o.init(),o}getDirectionLabel(t){return this.isHorizontal()?t:{width:"height","margin-top":"margin-left","margin-bottom ":"margin-right","margin-left":"margin-top","margin-right":"margin-bottom","padding-left":"padding-top","padding-right":"padding-bottom",marginRight:"marginBottom"}[t]}getSlideIndex(t){const{slidesEl:e,params:i}=this,n=at(nt(e,`.${i.slideClass}, swiper-slide`)[0]);return at(t)-n}getSlideIndexByData(t){return this.getSlideIndex(this.slides.filter((e=>1*e.getAttribute("data-swiper-slide-index")===t))[0])}recalcSlides(){const{slidesEl:t,params:e}=this;this.slides=nt(t,`.${e.slideClass}, swiper-slide`)}enable(){const t=this;t.enabled||(t.enabled=!0,t.params.grabCursor&&t.setGrabCursor(),t.emit("enable"))}disable(){const t=this;t.enabled&&(t.enabled=!1,t.params.grabCursor&&t.unsetGrabCursor(),t.emit("disable"))}setProgress(t,e){const i=this;t=Math.min(Math.max(t,0),1);const n=i.minTranslate(),s=(i.maxTranslate()-n)*t+n;i.translateTo(s,void 0===e?0:e),i.updateActiveIndex(),i.updateSlidesClasses()}emitContainerClasses(){const t=this;if(!t.params._emitClasses||!t.el)return;const e=t.el.className.split(" ").filter((e=>0===e.indexOf("swiper")||0===e.indexOf(t.params.containerModifierClass)));t.emit("_containerClasses",e.join(" "))}getSlideClasses(t){const e=this;return e.destroyed?"":t.className.split(" ").filter((t=>0===t.indexOf("swiper-slide")||0===t.indexOf(e.params.slideClass))).join(" ")}emitSlidesClasses(){const t=this;if(!t.params._emitClasses||!t.el)return;const e=[];t.slides.forEach((i=>{const n=t.getSlideClasses(i);e.push({slideEl:i,classNames:n}),t.emit("_slideClass",i,n)})),t.emit("_slideClasses",e)}slidesPerViewDynamic(t,e){void 0===t&&(t="current"),void 0===e&&(e=!1);const{params:i,slides:n,slidesGrid:s,slidesSizesGrid:r,size:o,activeIndex:a}=this;let l=1;if("number"==typeof i.slidesPerView)return i.slidesPerView;if(i.centeredSlides){let t,e=n[a]?Math.ceil(n[a].swiperSlideSize):0;for(let i=a+1;i<n.length;i+=1)n[i]&&!t&&(e+=Math.ceil(n[i].swiperSlideSize),l+=1,e>o&&(t=!0));for(let i=a-1;i>=0;i-=1)n[i]&&!t&&(e+=n[i].swiperSlideSize,l+=1,e>o&&(t=!0))}else if("current"===t)for(let t=a+1;t<n.length;t+=1){(e?s[t]+r[t]-s[a]<o:s[t]-s[a]<o)&&(l+=1)}else for(let t=a-1;t>=0;t-=1){s[a]-s[t]<o&&(l+=1)}return l}update(){const t=this;if(!t||t.destroyed)return;const{snapGrid:e,params:i}=t;function n(){const e=t.rtlTranslate?-1*t.translate:t.translate,i=Math.min(Math.max(e,t.maxTranslate()),t.minTranslate());t.setTranslate(i),t.updateActiveIndex(),t.updateSlidesClasses()}let s;if(i.breakpoints&&t.setBreakpoint(),[...t.el.querySelectorAll('[loading="lazy"]')].forEach((e=>{e.complete&&wt(t,e)})),t.updateSize(),t.updateSlides(),t.updateProgress(),t.updateSlidesClasses(),i.freeMode&&i.freeMode.enabled&&!i.cssMode)n(),i.autoHeight&&t.updateAutoHeight();else{if(("auto"===i.slidesPerView||i.slidesPerView>1)&&t.isEnd&&!i.centeredSlides){const e=t.virtual&&i.virtual.enabled?t.virtual.slides:t.slides;s=t.slideTo(e.length-1,0,!1,!0)}else s=t.slideTo(t.activeIndex,0,!1,!0);s||n()}i.watchOverflow&&e!==t.snapGrid&&t.checkOverflow(),t.emit("update")}changeDirection(t,e){void 0===e&&(e=!0);const i=this,n=i.params.direction;return t||(t="horizontal"===n?"vertical":"horizontal"),t===n||"horizontal"!==t&&"vertical"!==t||(i.el.classList.remove(`${i.params.containerModifierClass}${n}`),i.el.classList.add(`${i.params.containerModifierClass}${t}`),i.emitContainerClasses(),i.params.direction=t,i.slides.forEach((e=>{"vertical"===t?e.style.width="":e.style.height=""})),i.emit("changeDirection"),e&&i.update()),i}changeLanguageDirection(t){const e=this;e.rtl&&"rtl"===t||!e.rtl&&"ltr"===t||(e.rtl="rtl"===t,e.rtlTranslate="horizontal"===e.params.direction&&e.rtl,e.rtl?(e.el.classList.add(`${e.params.containerModifierClass}rtl`),e.el.dir="rtl"):(e.el.classList.remove(`${e.params.containerModifierClass}rtl`),e.el.dir="ltr"),e.update())}mount(t){const e=this;if(e.mounted)return!0;let i=t||e.params.el;if("string"==typeof i&&(i=document.querySelector(i)),!i)return!1;i.swiper=e,i.parentNode&&i.parentNode.host&&i.parentNode.host.nodeName===e.params.swiperElementNodeName.toUpperCase()&&(e.isElement=!0);const n=()=>`.${(e.params.wrapperClass||"").trim().split(" ").join(".")}`;let s=(()=>{if(i&&i.shadowRoot&&i.shadowRoot.querySelector){return i.shadowRoot.querySelector(n())}return nt(i,n())[0]})();return!s&&e.params.createElements&&(s=rt("div",e.params.wrapperClass),i.append(s),nt(i,`.${e.params.slideClass}`).forEach((t=>{s.append(t)}))),Object.assign(e,{el:i,wrapperEl:s,slidesEl:e.isElement&&!i.parentNode.host.slideSlots?i.parentNode.host:s,hostEl:e.isElement?i.parentNode.host:i,mounted:!0,rtl:"rtl"===i.dir.toLowerCase()||"rtl"===ot(i,"direction"),rtlTranslate:"horizontal"===e.params.direction&&("rtl"===i.dir.toLowerCase()||"rtl"===ot(i,"direction")),wrongRTL:"-webkit-box"===ot(s,"display")}),!0}init(t){const e=this;if(e.initialized)return e;if(!1===e.mount(t))return e;e.emit("beforeInit"),e.params.breakpoints&&e.setBreakpoint(),e.addClasses(),e.updateSize(),e.updateSlides(),e.params.watchOverflow&&e.checkOverflow(),e.params.grabCursor&&e.enabled&&e.setGrabCursor(),e.params.loop&&e.virtual&&e.params.virtual.enabled?e.slideTo(e.params.initialSlide+e.virtual.slidesBefore,0,e.params.runCallbacksOnInit,!1,!0):e.slideTo(e.params.initialSlide,0,e.params.runCallbacksOnInit,!1,!0),e.params.loop&&e.loopCreate(),e.attachEvents();const i=[...e.el.querySelectorAll('[loading="lazy"]')];return e.isElement&&i.push(...e.hostEl.querySelectorAll('[loading="lazy"]')),i.forEach((t=>{t.complete?wt(e,t):t.addEventListener("load",(t=>{wt(e,t.target)}))})),xt(e),e.initialized=!0,xt(e),e.emit("init"),e.emit("afterInit"),e}destroy(t,e){void 0===t&&(t=!0),void 0===e&&(e=!0);const i=this,{params:n,el:s,wrapperEl:r,slides:o}=i;return void 0===i.params||i.destroyed||(i.emit("beforeDestroy"),i.initialized=!1,i.detachEvents(),n.loop&&i.loopDestroy(),e&&(i.removeClasses(),s&&"string"!=typeof s&&s.removeAttribute("style"),r&&r.removeAttribute("style"),o&&o.length&&o.forEach((t=>{t.classList.remove(n.slideVisibleClass,n.slideFullyVisibleClass,n.slideActiveClass,n.slideNextClass,n.slidePrevClass),t.removeAttribute("style"),t.removeAttribute("data-swiper-slide-index")}))),i.emit("destroy"),Object.keys(i.eventsListeners).forEach((t=>{i.off(t)})),!1!==t&&(i.el&&"string"!=typeof i.el&&(i.el.swiper=null),function(t){const e=t;Object.keys(e).forEach((t=>{try{e[t]=null}catch(t){}try{delete e[t]}catch(t){}}))}(i)),i.destroyed=!0),null}static extendDefaults(t){tt(Nt,t)}static get extendedDefaults(){return Nt}static get defaults(){return Ht}static installModule(t){Vt.prototype.__modules__||(Vt.prototype.__modules__=[]);const e=Vt.prototype.__modules__;"function"==typeof t&&e.indexOf(t)<0&&e.push(t)}static use(t){return Array.isArray(t)?(t.forEach((t=>Vt.installModule(t))),Vt):(Vt.installModule(t),Vt)}}function jt(t){return void 0===t&&(t=""),`.${t.trim().replace(/([\.:!+\/])/g,"\\$1").replace(/ /g,".")}`}Object.keys(Yt).forEach((t=>{Object.keys(Yt[t]).forEach((e=>{Vt.prototype[e]=Yt[t][e]}))})),Vt.use([function(t){let{swiper:e,on:i,emit:n}=t;const s=U();let r=null,o=null;const a=()=>{e&&!e.destroyed&&e.initialized&&(n("beforeResize"),n("resize"))},l=()=>{e&&!e.destroyed&&e.initialized&&n("orientationchange")};i("init",(()=>{e.params.resizeObserver&&void 0!==s.ResizeObserver?e&&!e.destroyed&&e.initialized&&(r=new ResizeObserver((t=>{o=s.requestAnimationFrame((()=>{const{width:i,height:n}=e;let s=i,r=n;t.forEach((t=>{let{contentBoxSize:i,contentRect:n,target:o}=t;o&&o!==e.el||(s=n?n.width:(i[0]||i).inlineSize,r=n?n.height:(i[0]||i).blockSize)})),s===i&&r===n||a()}))})),r.observe(e.el)):(s.addEventListener("resize",a),s.addEventListener("orientationchange",l))})),i("destroy",(()=>{o&&s.cancelAnimationFrame(o),r&&r.unobserve&&e.el&&(r.unobserve(e.el),r=null),s.removeEventListener("resize",a),s.removeEventListener("orientationchange",l)}))},function(t){let{swiper:e,extendParams:i,on:n,emit:s}=t;const r=[],o=U(),a=function(t,i){void 0===i&&(i={});const n=new(o.MutationObserver||o.WebkitMutationObserver)((t=>{if(e.__preventObserver__)return;if(1===t.length)return void s("observerUpdate",t[0]);const i=function(){s("observerUpdate",t[0])};o.requestAnimationFrame?o.requestAnimationFrame(i):o.setTimeout(i,0)}));n.observe(t,{attributes:void 0===i.attributes||i.attributes,childList:e.isElement||(void 0===i.childList||i).childList,characterData:void 0===i.characterData||i.characterData}),r.push(n)};i({observer:!1,observeParents:!1,observeSlideChildren:!1}),n("init",(()=>{if(e.params.observer){if(e.params.observeParents){const t=lt(e.hostEl);for(let e=0;e<t.length;e+=1)a(t[e])}a(e.hostEl,{childList:e.params.observeSlideChildren}),a(e.wrapperEl,{attributes:!1})}})),n("destroy",(()=>{r.forEach((t=>{t.disconnect()})),r.splice(0,r.length)}))}]);var Wt=s(7633);window.innerWidth>1024&&Promise.resolve().then(s.bind(s,7633)),s.e(822).then(s.bind(s,4822)),document.querySelector(".feed-chapter__bg-swiper")&&new Vt(".feed-chapter__bg-swiper",{modules:[function(t){let{swiper:e,extendParams:i,on:n,emit:s}=t;const r="swiper-pagination";let o;i({pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:t=>t,formatFractionTotal:t=>t,bulletClass:`${r}-bullet`,bulletActiveClass:`${r}-bullet-active`,modifierClass:`${r}-`,currentClass:`${r}-current`,totalClass:`${r}-total`,hiddenClass:`${r}-hidden`,progressbarFillClass:`${r}-progressbar-fill`,progressbarOppositeClass:`${r}-progressbar-opposite`,clickableClass:`${r}-clickable`,lockClass:`${r}-lock`,horizontalClass:`${r}-horizontal`,verticalClass:`${r}-vertical`,paginationDisabledClass:`${r}-disabled`}}),e.pagination={el:null,bullets:[]};let a=0;function l(){return!e.params.pagination.el||!e.pagination.el||Array.isArray(e.pagination.el)&&0===e.pagination.el.length}function c(t,i){const{bulletActiveClass:n}=e.params.pagination;t&&(t=t[("prev"===i?"previous":"next")+"ElementSibling"])&&(t.classList.add(`${n}-${i}`),(t=t[("prev"===i?"previous":"next")+"ElementSibling"])&&t.classList.add(`${n}-${i}-${i}`))}function d(t){const i=t.target.closest(jt(e.params.pagination.bulletClass));if(!i)return;t.preventDefault();const n=at(i)*e.params.slidesPerGroup;if(e.params.loop){if(e.realIndex===n)return;e.slideToLoop(n)}else e.slideTo(n)}function u(){const t=e.rtl,i=e.params.pagination;if(l())return;let n,r,d=e.pagination.el;d=dt(d);const u=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.slides.length,h=e.params.loop?Math.ceil(u/e.params.slidesPerGroup):e.snapGrid.length;if(e.params.loop?(r=e.previousRealIndex||0,n=e.params.slidesPerGroup>1?Math.floor(e.realIndex/e.params.slidesPerGroup):e.realIndex):void 0!==e.snapIndex?(n=e.snapIndex,r=e.previousSnapIndex):(r=e.previousIndex||0,n=e.activeIndex||0),"bullets"===i.type&&e.pagination.bullets&&e.pagination.bullets.length>0){const s=e.pagination.bullets;let l,u,h;if(i.dynamicBullets&&(o=ct(s[0],e.isHorizontal()?"width":"height",!0),d.forEach((t=>{t.style[e.isHorizontal()?"width":"height"]=o*(i.dynamicMainBullets+4)+"px"})),i.dynamicMainBullets>1&&void 0!==r&&(a+=n-(r||0),a>i.dynamicMainBullets-1?a=i.dynamicMainBullets-1:a<0&&(a=0)),l=Math.max(n-a,0),u=l+(Math.min(s.length,i.dynamicMainBullets)-1),h=(u+l)/2),s.forEach((t=>{const e=[...["","-next","-next-next","-prev","-prev-prev","-main"].map((t=>`${i.bulletActiveClass}${t}`))].map((t=>"string"==typeof t&&t.includes(" ")?t.split(" "):t)).flat();t.classList.remove(...e)})),d.length>1)s.forEach((t=>{const s=at(t);s===n?t.classList.add(...i.bulletActiveClass.split(" ")):e.isElement&&t.setAttribute("part","bullet"),i.dynamicBullets&&(s>=l&&s<=u&&t.classList.add(...`${i.bulletActiveClass}-main`.split(" ")),s===l&&c(t,"prev"),s===u&&c(t,"next"))}));else{const t=s[n];if(t&&t.classList.add(...i.bulletActiveClass.split(" ")),e.isElement&&s.forEach(((t,e)=>{t.setAttribute("part",e===n?"bullet-active":"bullet")})),i.dynamicBullets){const t=s[l],e=s[u];for(let t=l;t<=u;t+=1)s[t]&&s[t].classList.add(...`${i.bulletActiveClass}-main`.split(" "));c(t,"prev"),c(e,"next")}}if(i.dynamicBullets){const n=Math.min(s.length,i.dynamicMainBullets+4),r=(o*n-o)/2-h*o,a=t?"right":"left";s.forEach((t=>{t.style[e.isHorizontal()?a:"top"]=`${r}px`}))}}d.forEach(((t,r)=>{if("fraction"===i.type&&(t.querySelectorAll(jt(i.currentClass)).forEach((t=>{t.textContent=i.formatFractionCurrent(n+1)})),t.querySelectorAll(jt(i.totalClass)).forEach((t=>{t.textContent=i.formatFractionTotal(h)}))),"progressbar"===i.type){let s;s=i.progressbarOpposite?e.isHorizontal()?"vertical":"horizontal":e.isHorizontal()?"horizontal":"vertical";const r=(n+1)/h;let o=1,a=1;"horizontal"===s?o=r:a=r,t.querySelectorAll(jt(i.progressbarFillClass)).forEach((t=>{t.style.transform=`translate3d(0,0,0) scaleX(${o}) scaleY(${a})`,t.style.transitionDuration=`${e.params.speed}ms`}))}"custom"===i.type&&i.renderCustom?(t.innerHTML=i.renderCustom(e,n+1,h),0===r&&s("paginationRender",t)):(0===r&&s("paginationRender",t),s("paginationUpdate",t)),e.params.watchOverflow&&e.enabled&&t.classList[e.isLocked?"add":"remove"](i.lockClass)}))}function h(){const t=e.params.pagination;if(l())return;const i=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.grid&&e.params.grid.rows>1?e.slides.length/Math.ceil(e.params.grid.rows):e.slides.length;let n=e.pagination.el;n=dt(n);let r="";if("bullets"===t.type){let n=e.params.loop?Math.ceil(i/e.params.slidesPerGroup):e.snapGrid.length;e.params.freeMode&&e.params.freeMode.enabled&&n>i&&(n=i);for(let i=0;i<n;i+=1)t.renderBullet?r+=t.renderBullet.call(e,i,t.bulletClass):r+=`<${t.bulletElement} ${e.isElement?'part="bullet"':""} class="${t.bulletClass}"></${t.bulletElement}>`}"fraction"===t.type&&(r=t.renderFraction?t.renderFraction.call(e,t.currentClass,t.totalClass):`<span class="${t.currentClass}"></span> / <span class="${t.totalClass}"></span>`),"progressbar"===t.type&&(r=t.renderProgressbar?t.renderProgressbar.call(e,t.progressbarFillClass):`<span class="${t.progressbarFillClass}"></span>`),e.pagination.bullets=[],n.forEach((i=>{"custom"!==t.type&&(i.innerHTML=r||""),"bullets"===t.type&&e.pagination.bullets.push(...i.querySelectorAll(jt(t.bulletClass)))})),"custom"!==t.type&&s("paginationRender",n[0])}function p(){e.params.pagination=function(t,e,i,n){return t.params.createElements&&Object.keys(n).forEach((s=>{if(!i[s]&&!0===i.auto){let r=nt(t.el,`.${n[s]}`)[0];r||(r=rt("div",n[s]),r.className=n[s],t.el.append(r)),i[s]=r,e[s]=r}})),i}(e,e.originalParams.pagination,e.params.pagination,{el:"swiper-pagination"});const t=e.params.pagination;if(!t.el)return;let i;"string"==typeof t.el&&e.isElement&&(i=e.el.querySelector(t.el)),i||"string"!=typeof t.el||(i=[...document.querySelectorAll(t.el)]),i||(i=t.el),i&&0!==i.length&&(e.params.uniqueNavElements&&"string"==typeof t.el&&Array.isArray(i)&&i.length>1&&(i=[...e.el.querySelectorAll(t.el)],i.length>1&&(i=i.filter((t=>lt(t,".swiper")[0]===e.el))[0])),Array.isArray(i)&&1===i.length&&(i=i[0]),Object.assign(e.pagination,{el:i}),i=dt(i),i.forEach((i=>{"bullets"===t.type&&t.clickable&&i.classList.add(...(t.clickableClass||"").split(" ")),i.classList.add(t.modifierClass+t.type),i.classList.add(e.isHorizontal()?t.horizontalClass:t.verticalClass),"bullets"===t.type&&t.dynamicBullets&&(i.classList.add(`${t.modifierClass}${t.type}-dynamic`),a=0,t.dynamicMainBullets<1&&(t.dynamicMainBullets=1)),"progressbar"===t.type&&t.progressbarOpposite&&i.classList.add(t.progressbarOppositeClass),t.clickable&&i.addEventListener("click",d),e.enabled||i.classList.add(t.lockClass)})))}function f(){const t=e.params.pagination;if(l())return;let i=e.pagination.el;i&&(i=dt(i),i.forEach((i=>{i.classList.remove(t.hiddenClass),i.classList.remove(t.modifierClass+t.type),i.classList.remove(e.isHorizontal()?t.horizontalClass:t.verticalClass),t.clickable&&(i.classList.remove(...(t.clickableClass||"").split(" ")),i.removeEventListener("click",d))}))),e.pagination.bullets&&e.pagination.bullets.forEach((e=>e.classList.remove(...t.bulletActiveClass.split(" "))))}n("changeDirection",(()=>{if(!e.pagination||!e.pagination.el)return;const t=e.params.pagination;let{el:i}=e.pagination;i=dt(i),i.forEach((i=>{i.classList.remove(t.horizontalClass,t.verticalClass),i.classList.add(e.isHorizontal()?t.horizontalClass:t.verticalClass)}))})),n("init",(()=>{!1===e.params.pagination.enabled?g():(p(),h(),u())})),n("activeIndexChange",(()=>{void 0===e.snapIndex&&u()})),n("snapIndexChange",(()=>{u()})),n("snapGridLengthChange",(()=>{h(),u()})),n("destroy",(()=>{f()})),n("enable disable",(()=>{let{el:t}=e.pagination;t&&(t=dt(t),t.forEach((t=>t.classList[e.enabled?"remove":"add"](e.params.pagination.lockClass))))})),n("lock unlock",(()=>{u()})),n("click",((t,i)=>{const n=i.target,r=dt(e.pagination.el);if(e.params.pagination.el&&e.params.pagination.hideOnClick&&r&&r.length>0&&!n.classList.contains(e.params.pagination.bulletClass)){if(e.navigation&&(e.navigation.nextEl&&n===e.navigation.nextEl||e.navigation.prevEl&&n===e.navigation.prevEl))return;const t=r[0].classList.contains(e.params.pagination.hiddenClass);s(!0===t?"paginationShow":"paginationHide"),r.forEach((t=>t.classList.toggle(e.params.pagination.hiddenClass)))}}));const g=()=>{e.el.classList.add(e.params.pagination.paginationDisabledClass);let{el:t}=e.pagination;t&&(t=dt(t),t.forEach((t=>t.classList.add(e.params.pagination.paginationDisabledClass)))),f()};Object.assign(e.pagination,{enable:()=>{e.el.classList.remove(e.params.pagination.paginationDisabledClass);let{el:t}=e.pagination;t&&(t=dt(t),t.forEach((t=>t.classList.remove(e.params.pagination.paginationDisabledClass)))),p(),h(),u()},disable:g,render:h,update:u,init:p,destroy:f})}],loop:!0,pagination:{el:".feed-chapter__pagination",type:"bullets",clickable:!0},on:Wt.toggleScroll}),document.querySelector(".feed-chapter__images-swiper")&&new Vt(".feed-chapter__images-swiper",{loop:!0,slidesPerView:"auto",spaceBetween:window.innerWidth>768?17:8,freemode:!0,on:Wt.toggleScroll})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,