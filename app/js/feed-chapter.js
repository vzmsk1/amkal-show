/*! For license information please see feed-chapter.js.LICENSE.txt */
(()=>{"use strict";var t={};function e(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function i(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}();var n,s,r,o,a,l,c,d,u,h,p,f,g,m,v,y,b,w={autoSleep:120,force3D:"auto",nullTargetWarn:1,units:{lineHeight:""}},_={duration:.5,overwrite:!1,delay:0},x=1e8,T=1e-8,S=2*Math.PI,C=S/4,E=0,k=Math.sqrt,M=Math.cos,O=Math.sin,I=function(t){return"string"==typeof t},A=function(t){return"function"==typeof t},P=function(t){return"number"==typeof t},L=function(t){return void 0===t},D=function(t){return"object"==typeof t},z=function(t){return!1!==t},B=function(){return"undefined"!=typeof window},R=function(t){return A(t)||I(t)},F="function"==typeof ArrayBuffer&&ArrayBuffer.isView||function(){},H=Array.isArray,G=/(?:-?\.?\d|\.)+/gi,Y=/[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g,V=/[-+=.]*\d+[.e-]*\d*[a-z%]*/g,N=/[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi,j=/[+-]=-?[.\d]+/,W=/[^,'"\[\]\s]+/gi,$=/^[+\-=e\s\d]*\d+[.\d]*([a-z]*|%)\s*$/i,X={},q={},U=function(t){return(q=St(t,X))&&Ci},K=function(t,e){return console.warn("Invalid property",t,"set to",e,"Missing plugin? gsap.registerPlugin()")},Z=function(t,e){return!e&&console.warn(t)},Q=function(t,e){return t&&(X[t]=e)&&q&&(q[t]=e)||X},J=function(){return 0},tt={suppressEvents:!0,isStart:!0,kill:!1},et={suppressEvents:!0,kill:!1},it={suppressEvents:!0},nt={},st=[],rt={},ot={},at={},lt=30,ct=[],dt="",ut=function(t){var e,i,n=t[0];if(D(n)||A(n)||(t=[t]),!(e=(n._gsap||{}).harness)){for(i=ct.length;i--&&!ct[i].targetTest(n););e=ct[i]}for(i=t.length;i--;)t[i]&&(t[i]._gsap||(t[i]._gsap=new He(t[i],e)))||t.splice(i,1);return t},ht=function(t){return t._gsap||ut(ie(t))[0]._gsap},pt=function(t,e,i){return(i=t[e])&&A(i)?t[e]():L(i)&&t.getAttribute&&t.getAttribute(e)||i},ft=function(t,e){return(t=t.split(",")).forEach(e)||t},gt=function(t){return Math.round(1e5*t)/1e5||0},mt=function(t){return Math.round(1e7*t)/1e7||0},vt=function(t,e){var i=e.charAt(0),n=parseFloat(e.substr(2));return t=parseFloat(t),"+"===i?t+n:"-"===i?t-n:"*"===i?t*n:t/n},yt=function(t,e){for(var i=e.length,n=0;t.indexOf(e[n])<0&&++n<i;);return n<i},bt=function(){var t,e,i=st.length,n=st.slice(0);for(rt={},st.length=0,t=0;t<i;t++)(e=n[t])&&e._lazy&&(e.render(e._lazy[0],e._lazy[1],!0)._lazy=0)},wt=function(t,e,i,n){st.length&&!s&&bt(),t.render(e,i,n||s&&e<0&&(t._initted||t._startAt)),st.length&&!s&&bt()},_t=function(t){var e=parseFloat(t);return(e||0===e)&&(t+"").match(W).length<2?e:I(t)?t.trim():t},xt=function(t){return t},Tt=function(t,e){for(var i in e)i in t||(t[i]=e[i]);return t},St=function(t,e){for(var i in e)t[i]=e[i];return t},Ct=function t(e,i){for(var n in i)"__proto__"!==n&&"constructor"!==n&&"prototype"!==n&&(e[n]=D(i[n])?t(e[n]||(e[n]={}),i[n]):i[n]);return e},Et=function(t,e){var i,n={};for(i in t)i in e||(n[i]=t[i]);return n},kt=function(t){var e,i=t.parent||o,n=t.keyframes?(e=H(t.keyframes),function(t,i){for(var n in i)n in t||"duration"===n&&e||"ease"===n||(t[n]=i[n])}):Tt;if(z(t.inherit))for(;i;)n(t,i.vars.defaults),i=i.parent||i._dp;return t},Mt=function(t,e,i,n,s){void 0===i&&(i="_first"),void 0===n&&(n="_last");var r,o=t[n];if(s)for(r=e[s];o&&o[s]>r;)o=o._prev;return o?(e._next=o._next,o._next=e):(e._next=t[i],t[i]=e),e._next?e._next._prev=e:t[n]=e,e._prev=o,e.parent=e._dp=t,e},Ot=function(t,e,i,n){void 0===i&&(i="_first"),void 0===n&&(n="_last");var s=e._prev,r=e._next;s?s._next=r:t[i]===e&&(t[i]=r),r?r._prev=s:t[n]===e&&(t[n]=s),e._next=e._prev=e.parent=null},It=function(t,e){t.parent&&(!e||t.parent.autoRemoveChildren)&&t.parent.remove&&t.parent.remove(t),t._act=0},At=function(t,e){if(t&&(!e||e._end>t._dur||e._start<0))for(var i=t;i;)i._dirty=1,i=i.parent;return t},Pt=function(t,e,i,n){return t._startAt&&(s?t._startAt.revert(et):t.vars.immediateRender&&!t.vars.autoRevert||t._startAt.render(e,!0,n))},Lt=function t(e){return!e||e._ts&&t(e.parent)},Dt=function(t){return t._repeat?zt(t._tTime,t=t.duration()+t._rDelay)*t:0},zt=function(t,e){var i=Math.floor(t/=e);return t&&i===t?i-1:i},Bt=function(t,e){return(t-e._start)*e._ts+(e._ts>=0?0:e._dirty?e.totalDuration():e._tDur)},Rt=function(t){return t._end=mt(t._start+(t._tDur/Math.abs(t._ts||t._rts||T)||0))},Ft=function(t,e){var i=t._dp;return i&&i.smoothChildTiming&&t._ts&&(t._start=mt(i._time-(t._ts>0?e/t._ts:((t._dirty?t.totalDuration():t._tDur)-e)/-t._ts)),Rt(t),i._dirty||At(i,t)),t},Ht=function(t,e){var i;if((e._time||!e._dur&&e._initted||e._start<t._time&&(e._dur||!e.add))&&(i=Bt(t.rawTime(),e),(!e._dur||Zt(0,e.totalDuration(),i)-e._tTime>T)&&e.render(i,!0)),At(t,e)._dp&&t._initted&&t._time>=t._dur&&t._ts){if(t._dur<t.duration())for(i=t;i._dp;)i.rawTime()>=0&&i.totalTime(i._tTime),i=i._dp;t._zTime=-1e-8}},Gt=function(t,e,i,n){return e.parent&&It(e),e._start=mt((P(i)?i:i||t!==o?qt(t,i,e):t._time)+e._delay),e._end=mt(e._start+(e.totalDuration()/Math.abs(e.timeScale())||0)),Mt(t,e,"_first","_last",t._sort?"_start":0),jt(e)||(t._recent=e),n||Ht(t,e),t._ts<0&&Ft(t,t._tTime),t},Yt=function(t,e){return(X.ScrollTrigger||K("scrollTrigger",e))&&X.ScrollTrigger.create(e,t)},Vt=function(t,e,i,n,r){return Xe(t,e,r),t._initted?!i&&t._pt&&!s&&(t._dur&&!1!==t.vars.lazy||!t._dur&&t.vars.lazy)&&u!==Ee.frame?(st.push(t),t._lazy=[r,n],1):void 0:1},Nt=function t(e){var i=e.parent;return i&&i._ts&&i._initted&&!i._lock&&(i.rawTime()<0||t(i))},jt=function(t){var e=t.data;return"isFromStart"===e||"isStart"===e},Wt=function(t,e,i,n){var s=t._repeat,r=mt(e)||0,o=t._tTime/t._tDur;return o&&!n&&(t._time*=r/t._dur),t._dur=r,t._tDur=s?s<0?1e10:mt(r*(s+1)+t._rDelay*s):r,o>0&&!n&&Ft(t,t._tTime=t._tDur*o),t.parent&&Rt(t),i||At(t.parent,t),t},$t=function(t){return t instanceof Ye?At(t):Wt(t,t._dur)},Xt={_start:0,endTime:J,totalDuration:J},qt=function t(e,i,n){var s,r,o,a=e.labels,l=e._recent||Xt,c=e.duration()>=x?l.endTime(!1):e._dur;return I(i)&&(isNaN(i)||i in a)?(r=i.charAt(0),o="%"===i.substr(-1),s=i.indexOf("="),"<"===r||">"===r?(s>=0&&(i=i.replace(/=/,"")),("<"===r?l._start:l.endTime(l._repeat>=0))+(parseFloat(i.substr(1))||0)*(o?(s<0?l:n).totalDuration()/100:1)):s<0?(i in a||(a[i]=c),a[i]):(r=parseFloat(i.charAt(s-1)+i.substr(s+1)),o&&n&&(r=r/100*(H(n)?n[0]:n).totalDuration()),s>1?t(e,i.substr(0,s-1),n)+r:c+r)):null==i?c:+i},Ut=function(t,e,i){var n,s,r=P(e[1]),o=(r?2:1)+(t<2?0:1),a=e[o];if(r&&(a.duration=e[1]),a.parent=i,t){for(n=a,s=i;s&&!("immediateRender"in n);)n=s.vars.defaults||{},s=z(s.vars.inherit)&&s.parent;a.immediateRender=z(n.immediateRender),t<2?a.runBackwards=1:a.startAt=e[o-1]}return new Qe(e[0],a,e[o+1])},Kt=function(t,e){return t||0===t?e(t):e},Zt=function(t,e,i){return i<t?t:i>e?e:i},Qt=function(t,e){return I(t)&&(e=$.exec(t))?e[1]:""},Jt=[].slice,te=function(t,e){return t&&D(t)&&"length"in t&&(!e&&!t.length||t.length-1 in t&&D(t[0]))&&!t.nodeType&&t!==a},ee=function(t,e,i){return void 0===i&&(i=[]),t.forEach((function(t){var n;return I(t)&&!e||te(t,1)?(n=i).push.apply(n,ie(t)):i.push(t)}))||i},ie=function(t,e,i){return r&&!e&&r.selector?r.selector(t):!I(t)||i||!l&&ke()?H(t)?ee(t,i):te(t)?Jt.call(t,0):t?[t]:[]:Jt.call((e||c).querySelectorAll(t),0)},ne=function(t){return t=ie(t)[0]||Z("Invalid scope")||{},function(e){var i=t.current||t.nativeElement||t;return ie(e,i.querySelectorAll?i:i===t?Z("Invalid scope")||c.createElement("div"):t)}},se=function(t){return t.sort((function(){return.5-Math.random()}))},re=function(t){if(A(t))return t;var e=D(t)?t:{each:t},i=De(e.ease),n=e.from||0,s=parseFloat(e.base)||0,r={},o=n>0&&n<1,a=isNaN(n)||o,l=e.axis,c=n,d=n;return I(n)?c=d={center:.5,edges:.5,end:1}[n]||0:!o&&a&&(c=n[0],d=n[1]),function(t,o,u){var h,p,f,g,m,v,y,b,w,_=(u||e).length,T=r[_];if(!T){if(!(w="auto"===e.grid?0:(e.grid||[1,x])[1])){for(y=-x;y<(y=u[w++].getBoundingClientRect().left)&&w<_;);w<_&&w--}for(T=r[_]=[],h=a?Math.min(w,_)*c-.5:n%w,p=w===x?0:a?_*d/w-.5:n/w|0,y=0,b=x,v=0;v<_;v++)f=v%w-h,g=p-(v/w|0),T[v]=m=l?Math.abs("y"===l?g:f):k(f*f+g*g),m>y&&(y=m),m<b&&(b=m);"random"===n&&se(T),T.max=y-b,T.min=b,T.v=_=(parseFloat(e.amount)||parseFloat(e.each)*(w>_?_-1:l?"y"===l?_/w:w:Math.max(w,_/w))||0)*("edges"===n?-1:1),T.b=_<0?s-_:s,T.u=Qt(e.amount||e.each)||0,i=i&&_<0?Pe(i):i}return _=(T[t]-T.min)/T.max||0,mt(T.b+(i?i(_):_)*T.v)+T.u}},oe=function(t){var e=Math.pow(10,((t+"").split(".")[1]||"").length);return function(i){var n=mt(Math.round(parseFloat(i)/t)*t*e);return(n-n%1)/e+(P(i)?0:Qt(i))}},ae=function(t,e){var i,n,s=H(t);return!s&&D(t)&&(i=s=t.radius||x,t.values?(t=ie(t.values),(n=!P(t[0]))&&(i*=i)):t=oe(t.increment)),Kt(e,s?A(t)?function(e){return n=t(e),Math.abs(n-e)<=i?n:e}:function(e){for(var s,r,o=parseFloat(n?e.x:e),a=parseFloat(n?e.y:0),l=x,c=0,d=t.length;d--;)(s=n?(s=t[d].x-o)*s+(r=t[d].y-a)*r:Math.abs(t[d]-o))<l&&(l=s,c=d);return c=!i||l<=i?t[c]:e,n||c===e||P(e)?c:c+Qt(e)}:oe(t))},le=function(t,e,i,n){return Kt(H(t)?!e:!0===i?!!(i=0):!n,(function(){return H(t)?t[~~(Math.random()*t.length)]:(i=i||1e-5)&&(n=i<1?Math.pow(10,(i+"").length-2):1)&&Math.floor(Math.round((t-i/2+Math.random()*(e-t+.99*i))/i)*i*n)/n}))},ce=function(t,e,i){return Kt(i,(function(i){return t[~~e(i)]}))},de=function(t){for(var e,i,n,s,r=0,o="";~(e=t.indexOf("random(",r));)n=t.indexOf(")",e),s="["===t.charAt(e+7),i=t.substr(e+7,n-e-7).match(s?W:G),o+=t.substr(r,e-r)+le(s?i:+i[0],s?0:+i[1],+i[2]||1e-5),r=n+1;return o+t.substr(r,t.length-r)},ue=function(t,e,i,n,s){var r=e-t,o=n-i;return Kt(s,(function(e){return i+((e-t)/r*o||0)}))},he=function(t,e,i){var n,s,r,o=t.labels,a=x;for(n in o)(s=o[n]-e)<0==!!i&&s&&a>(s=Math.abs(s))&&(r=n,a=s);return r},pe=function(t,e,i){var n,s,o,a=t.vars,l=a[e],c=r,d=t._ctx;if(l)return n=a[e+"Params"],s=a.callbackScope||t,i&&st.length&&bt(),d&&(r=d),o=n?l.apply(s,n):l.call(s),r=c,o},fe=function(t){return It(t),t.scrollTrigger&&t.scrollTrigger.kill(!!s),t.progress()<1&&pe(t,"onInterrupt"),t},ge=[],me=function(t){if(t)if(t=!t.name&&t.default||t,B()||t.headless){var e=t.name,i=A(t),n=e&&!i&&t.init?function(){this._props=[]}:t,s={init:J,render:ai,add:We,kill:ci,modifier:li,rawVars:0},r={targetTest:0,get:0,getSetter:ni,aliases:{},register:0};if(ke(),t!==n){if(ot[e])return;Tt(n,Tt(Et(t,s),r)),St(n.prototype,St(s,Et(t,r))),ot[n.prop=e]=n,t.targetTest&&(ct.push(n),nt[e]=1),e=("css"===e?"CSS":e.charAt(0).toUpperCase()+e.substr(1))+"Plugin"}Q(e,n),t.register&&t.register(Ci,n,hi)}else ge.push(t)},ve=255,ye={aqua:[0,ve,ve],lime:[0,ve,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,ve],navy:[0,0,128],white:[ve,ve,ve],olive:[128,128,0],yellow:[ve,ve,0],orange:[ve,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[ve,0,0],pink:[ve,192,203],cyan:[0,ve,ve],transparent:[ve,ve,ve,0]},be=function(t,e,i){return(6*(t+=t<0?1:t>1?-1:0)<1?e+(i-e)*t*6:t<.5?i:3*t<2?e+(i-e)*(2/3-t)*6:e)*ve+.5|0},we=function(t,e,i){var n,s,r,o,a,l,c,d,u,h,p=t?P(t)?[t>>16,t>>8&ve,t&ve]:0:ye.black;if(!p){if(","===t.substr(-1)&&(t=t.substr(0,t.length-1)),ye[t])p=ye[t];else if("#"===t.charAt(0)){if(t.length<6&&(n=t.charAt(1),s=t.charAt(2),r=t.charAt(3),t="#"+n+n+s+s+r+r+(5===t.length?t.charAt(4)+t.charAt(4):"")),9===t.length)return[(p=parseInt(t.substr(1,6),16))>>16,p>>8&ve,p&ve,parseInt(t.substr(7),16)/255];p=[(t=parseInt(t.substr(1),16))>>16,t>>8&ve,t&ve]}else if("hsl"===t.substr(0,3))if(p=h=t.match(G),e){if(~t.indexOf("="))return p=t.match(Y),i&&p.length<4&&(p[3]=1),p}else o=+p[0]%360/360,a=+p[1]/100,n=2*(l=+p[2]/100)-(s=l<=.5?l*(a+1):l+a-l*a),p.length>3&&(p[3]*=1),p[0]=be(o+1/3,n,s),p[1]=be(o,n,s),p[2]=be(o-1/3,n,s);else p=t.match(G)||ye.transparent;p=p.map(Number)}return e&&!h&&(n=p[0]/ve,s=p[1]/ve,r=p[2]/ve,l=((c=Math.max(n,s,r))+(d=Math.min(n,s,r)))/2,c===d?o=a=0:(u=c-d,a=l>.5?u/(2-c-d):u/(c+d),o=c===n?(s-r)/u+(s<r?6:0):c===s?(r-n)/u+2:(n-s)/u+4,o*=60),p[0]=~~(o+.5),p[1]=~~(100*a+.5),p[2]=~~(100*l+.5)),i&&p.length<4&&(p[3]=1),p},_e=function(t){var e=[],i=[],n=-1;return t.split(Te).forEach((function(t){var s=t.match(V)||[];e.push.apply(e,s),i.push(n+=s.length+1)})),e.c=i,e},xe=function(t,e,i){var n,s,r,o,a="",l=(t+a).match(Te),c=e?"hsla(":"rgba(",d=0;if(!l)return t;if(l=l.map((function(t){return(t=we(t,e,1))&&c+(e?t[0]+","+t[1]+"%,"+t[2]+"%,"+t[3]:t.join(","))+")"})),i&&(r=_e(t),(n=i.c).join(a)!==r.c.join(a)))for(o=(s=t.replace(Te,"1").split(V)).length-1;d<o;d++)a+=s[d]+(~n.indexOf(d)?l.shift()||c+"0,0,0,0)":(r.length?r:l.length?l:i).shift());if(!s)for(o=(s=t.split(Te)).length-1;d<o;d++)a+=s[d]+l[d];return a+s[o]},Te=function(){var t,e="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b";for(t in ye)e+="|"+t+"\\b";return new RegExp(e+")","gi")}(),Se=/hsl[a]?\(/,Ce=function(t){var e,i=t.join(" ");if(Te.lastIndex=0,Te.test(i))return e=Se.test(i),t[1]=xe(t[1],e),t[0]=xe(t[0],e,_e(t[1])),!0},Ee=function(){var t,e,i,n,s,r,o=Date.now,u=500,h=33,f=o(),g=f,m=1e3/240,v=m,y=[],b=function i(a){var l,c,d,p,b=o()-g,w=!0===a;if((b>u||b<0)&&(f+=b-h),((l=(d=(g+=b)-f)-v)>0||w)&&(p=++n.frame,s=d-1e3*n.time,n.time=d/=1e3,v+=l+(l>=m?4:m-l),c=1),w||(t=e(i)),c)for(r=0;r<y.length;r++)y[r](d,s,p,a)};return n={time:0,frame:0,tick:function(){b(!0)},deltaRatio:function(t){return s/(1e3/(t||60))},wake:function(){d&&(!l&&B()&&(a=l=window,c=a.document||{},X.gsap=Ci,(a.gsapVersions||(a.gsapVersions=[])).push(Ci.version),U(q||a.GreenSockGlobals||!a.gsap&&a||{}),ge.forEach(me)),i="undefined"!=typeof requestAnimationFrame&&requestAnimationFrame,t&&n.sleep(),e=i||function(t){return setTimeout(t,v-1e3*n.time+1|0)},p=1,b(2))},sleep:function(){(i?cancelAnimationFrame:clearTimeout)(t),p=0,e=J},lagSmoothing:function(t,e){u=t||1/0,h=Math.min(e||33,u)},fps:function(t){m=1e3/(t||240),v=1e3*n.time+m},add:function(t,e,i){var s=e?function(e,i,r,o){t(e,i,r,o),n.remove(s)}:t;return n.remove(t),y[i?"unshift":"push"](s),ke(),s},remove:function(t,e){~(e=y.indexOf(t))&&y.splice(e,1)&&r>=e&&r--},_listeners:y}}(),ke=function(){return!p&&Ee.wake()},Me={},Oe=/^[\d.\-M][\d.\-,\s]/,Ie=/["']/g,Ae=function(t){for(var e,i,n,s={},r=t.substr(1,t.length-3).split(":"),o=r[0],a=1,l=r.length;a<l;a++)i=r[a],e=a!==l-1?i.lastIndexOf(","):i.length,n=i.substr(0,e),s[o]=isNaN(n)?n.replace(Ie,"").trim():+n,o=i.substr(e+1).trim();return s},Pe=function(t){return function(e){return 1-t(1-e)}},Le=function t(e,i){for(var n,s=e._first;s;)s instanceof Ye?t(s,i):!s.vars.yoyoEase||s._yoyo&&s._repeat||s._yoyo===i||(s.timeline?t(s.timeline,i):(n=s._ease,s._ease=s._yEase,s._yEase=n,s._yoyo=i)),s=s._next},De=function(t,e){return t&&(A(t)?t:Me[t]||function(t){var e,i,n,s,r=(t+"").split("("),o=Me[r[0]];return o&&r.length>1&&o.config?o.config.apply(null,~t.indexOf("{")?[Ae(r[1])]:(e=t,i=e.indexOf("(")+1,n=e.indexOf(")"),s=e.indexOf("(",i),e.substring(i,~s&&s<n?e.indexOf(")",n+1):n)).split(",").map(_t)):Me._CE&&Oe.test(t)?Me._CE("",t):o}(t))||e},ze=function(t,e,i,n){void 0===i&&(i=function(t){return 1-e(1-t)}),void 0===n&&(n=function(t){return t<.5?e(2*t)/2:1-e(2*(1-t))/2});var s,r={easeIn:e,easeOut:i,easeInOut:n};return ft(t,(function(t){for(var e in Me[t]=X[t]=r,Me[s=t.toLowerCase()]=i,r)Me[s+("easeIn"===e?".in":"easeOut"===e?".out":".inOut")]=Me[t+"."+e]=r[e]})),r},Be=function(t){return function(e){return e<.5?(1-t(1-2*e))/2:.5+t(2*(e-.5))/2}},Re=function t(e,i,n){var s=i>=1?i:1,r=(n||(e?.3:.45))/(i<1?i:1),o=r/S*(Math.asin(1/s)||0),a=function(t){return 1===t?1:s*Math.pow(2,-10*t)*O((t-o)*r)+1},l="out"===e?a:"in"===e?function(t){return 1-a(1-t)}:Be(a);return r=S/r,l.config=function(i,n){return t(e,i,n)},l},Fe=function t(e,i){void 0===i&&(i=1.70158);var n=function(t){return t?--t*t*((i+1)*t+i)+1:0},s="out"===e?n:"in"===e?function(t){return 1-n(1-t)}:Be(n);return s.config=function(i){return t(e,i)},s};ft("Linear,Quad,Cubic,Quart,Quint,Strong",(function(t,e){var i=e<5?e+1:e;ze(t+",Power"+(i-1),e?function(t){return Math.pow(t,i)}:function(t){return t},(function(t){return 1-Math.pow(1-t,i)}),(function(t){return t<.5?Math.pow(2*t,i)/2:1-Math.pow(2*(1-t),i)/2}))})),Me.Linear.easeNone=Me.none=Me.Linear.easeIn,ze("Elastic",Re("in"),Re("out"),Re()),f=7.5625,v=2*(m=1/(g=2.75)),y=2.5*m,ze("Bounce",(function(t){return 1-b(1-t)}),b=function(t){return t<m?f*t*t:t<v?f*Math.pow(t-1.5/g,2)+.75:t<y?f*(t-=2.25/g)*t+.9375:f*Math.pow(t-2.625/g,2)+.984375}),ze("Expo",(function(t){return t?Math.pow(2,10*(t-1)):0})),ze("Circ",(function(t){return-(k(1-t*t)-1)})),ze("Sine",(function(t){return 1===t?1:1-M(t*C)})),ze("Back",Fe("in"),Fe("out"),Fe()),Me.SteppedEase=Me.steps=X.SteppedEase={config:function(t,e){void 0===t&&(t=1);var i=1/t,n=t+(e?0:1),s=e?1:0;return function(t){return((n*Zt(0,.99999999,t)|0)+s)*i}}},_.ease=Me["quad.out"],ft("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt",(function(t){return dt+=t+","+t+"Params,"}));var He=function(t,e){this.id=E++,t._gsap=this,this.target=t,this.harness=e,this.get=e?e.get:pt,this.set=e?e.getSetter:ni},Ge=function(){function t(t){this.vars=t,this._delay=+t.delay||0,(this._repeat=t.repeat===1/0?-2:t.repeat||0)&&(this._rDelay=t.repeatDelay||0,this._yoyo=!!t.yoyo||!!t.yoyoEase),this._ts=1,Wt(this,+t.duration,1,1),this.data=t.data,r&&(this._ctx=r,r.data.push(this)),p||Ee.wake()}var e=t.prototype;return e.delay=function(t){return t||0===t?(this.parent&&this.parent.smoothChildTiming&&this.startTime(this._start+t-this._delay),this._delay=t,this):this._delay},e.duration=function(t){return arguments.length?this.totalDuration(this._repeat>0?t+(t+this._rDelay)*this._repeat:t):this.totalDuration()&&this._dur},e.totalDuration=function(t){return arguments.length?(this._dirty=0,Wt(this,this._repeat<0?t:(t-this._repeat*this._rDelay)/(this._repeat+1))):this._tDur},e.totalTime=function(t,e){if(ke(),!arguments.length)return this._tTime;var i=this._dp;if(i&&i.smoothChildTiming&&this._ts){for(Ft(this,t),!i._dp||i.parent||Ht(i,this);i&&i.parent;)i.parent._time!==i._start+(i._ts>=0?i._tTime/i._ts:(i.totalDuration()-i._tTime)/-i._ts)&&i.totalTime(i._tTime,!0),i=i.parent;!this.parent&&this._dp.autoRemoveChildren&&(this._ts>0&&t<this._tDur||this._ts<0&&t>0||!this._tDur&&!t)&&Gt(this._dp,this,this._start-this._delay)}return(this._tTime!==t||!this._dur&&!e||this._initted&&Math.abs(this._zTime)===T||!t&&!this._initted&&(this.add||this._ptLookup))&&(this._ts||(this._pTime=t),wt(this,t,e)),this},e.time=function(t,e){return arguments.length?this.totalTime(Math.min(this.totalDuration(),t+Dt(this))%(this._dur+this._rDelay)||(t?this._dur:0),e):this._time},e.totalProgress=function(t,e){return arguments.length?this.totalTime(this.totalDuration()*t,e):this.totalDuration()?Math.min(1,this._tTime/this._tDur):this.rawTime()>0?1:0},e.progress=function(t,e){return arguments.length?this.totalTime(this.duration()*(!this._yoyo||1&this.iteration()?t:1-t)+Dt(this),e):this.duration()?Math.min(1,this._time/this._dur):this.rawTime()>0?1:0},e.iteration=function(t,e){var i=this.duration()+this._rDelay;return arguments.length?this.totalTime(this._time+(t-1)*i,e):this._repeat?zt(this._tTime,i)+1:1},e.timeScale=function(t,e){if(!arguments.length)return-1e-8===this._rts?0:this._rts;if(this._rts===t)return this;var i=this.parent&&this._ts?Bt(this.parent._time,this):this._tTime;return this._rts=+t||0,this._ts=this._ps||-1e-8===t?0:this._rts,this.totalTime(Zt(-Math.abs(this._delay),this._tDur,i),!1!==e),Rt(this),function(t){for(var e=t.parent;e&&e.parent;)e._dirty=1,e.totalDuration(),e=e.parent;return t}(this)},e.paused=function(t){return arguments.length?(this._ps!==t&&(this._ps=t,t?(this._pTime=this._tTime||Math.max(-this._delay,this.rawTime()),this._ts=this._act=0):(ke(),this._ts=this._rts,this.totalTime(this.parent&&!this.parent.smoothChildTiming?this.rawTime():this._tTime||this._pTime,1===this.progress()&&Math.abs(this._zTime)!==T&&(this._tTime-=T)))),this):this._ps},e.startTime=function(t){if(arguments.length){this._start=t;var e=this.parent||this._dp;return e&&(e._sort||!this.parent)&&Gt(e,this,t-this._delay),this}return this._start},e.endTime=function(t){return this._start+(z(t)?this.totalDuration():this.duration())/Math.abs(this._ts||1)},e.rawTime=function(t){var e=this.parent||this._dp;return e?t&&(!this._ts||this._repeat&&this._time&&this.totalProgress()<1)?this._tTime%(this._dur+this._rDelay):this._ts?Bt(e.rawTime(t),this):this._tTime:this._tTime},e.revert=function(t){void 0===t&&(t=it);var e=s;return s=t,(this._initted||this._startAt)&&(this.timeline&&this.timeline.revert(t),this.totalTime(-.01,t.suppressEvents)),"nested"!==this.data&&!1!==t.kill&&this.kill(),s=e,this},e.globalTime=function(t){for(var e=this,i=arguments.length?t:e.rawTime();e;)i=e._start+i/(Math.abs(e._ts)||1),e=e._dp;return!this.parent&&this._sat?this._sat.globalTime(t):i},e.repeat=function(t){return arguments.length?(this._repeat=t===1/0?-2:t,$t(this)):-2===this._repeat?1/0:this._repeat},e.repeatDelay=function(t){if(arguments.length){var e=this._time;return this._rDelay=t,$t(this),e?this.time(e):this}return this._rDelay},e.yoyo=function(t){return arguments.length?(this._yoyo=t,this):this._yoyo},e.seek=function(t,e){return this.totalTime(qt(this,t),z(e))},e.restart=function(t,e){return this.play().totalTime(t?-this._delay:0,z(e))},e.play=function(t,e){return null!=t&&this.seek(t,e),this.reversed(!1).paused(!1)},e.reverse=function(t,e){return null!=t&&this.seek(t||this.totalDuration(),e),this.reversed(!0).paused(!1)},e.pause=function(t,e){return null!=t&&this.seek(t,e),this.paused(!0)},e.resume=function(){return this.paused(!1)},e.reversed=function(t){return arguments.length?(!!t!==this.reversed()&&this.timeScale(-this._rts||(t?-1e-8:0)),this):this._rts<0},e.invalidate=function(){return this._initted=this._act=0,this._zTime=-1e-8,this},e.isActive=function(){var t,e=this.parent||this._dp,i=this._start;return!(e&&!(this._ts&&this._initted&&e.isActive()&&(t=e.rawTime(!0))>=i&&t<this.endTime(!0)-T))},e.eventCallback=function(t,e,i){var n=this.vars;return arguments.length>1?(e?(n[t]=e,i&&(n[t+"Params"]=i),"onUpdate"===t&&(this._onUpdate=e)):delete n[t],this):n[t]},e.then=function(t){var e=this;return new Promise((function(i){var n=A(t)?t:xt,s=function(){var t=e.then;e.then=null,A(n)&&(n=n(e))&&(n.then||n===e)&&(e.then=t),i(n),e.then=t};e._initted&&1===e.totalProgress()&&e._ts>=0||!e._tTime&&e._ts<0?s():e._prom=s}))},e.kill=function(){fe(this)},t}();Tt(Ge.prototype,{_time:0,_start:0,_end:0,_tTime:0,_tDur:0,_dirty:0,_repeat:0,_yoyo:!1,parent:null,_initted:!1,_rDelay:0,_ts:1,_dp:0,ratio:0,_zTime:-1e-8,_prom:0,_ps:!1,_rts:1});var Ye=function(t){function n(i,n){var s;return void 0===i&&(i={}),(s=t.call(this,i)||this).labels={},s.smoothChildTiming=!!i.smoothChildTiming,s.autoRemoveChildren=!!i.autoRemoveChildren,s._sort=z(i.sortChildren),o&&Gt(i.parent||o,e(s),n),i.reversed&&s.reverse(),i.paused&&s.paused(!0),i.scrollTrigger&&Yt(e(s),i.scrollTrigger),s}i(n,t);var r=n.prototype;return r.to=function(t,e,i){return Ut(0,arguments,this),this},r.from=function(t,e,i){return Ut(1,arguments,this),this},r.fromTo=function(t,e,i,n){return Ut(2,arguments,this),this},r.set=function(t,e,i){return e.duration=0,e.parent=this,kt(e).repeatDelay||(e.repeat=0),e.immediateRender=!!e.immediateRender,new Qe(t,e,qt(this,i),1),this},r.call=function(t,e,i){return Gt(this,Qe.delayedCall(0,t,e),i)},r.staggerTo=function(t,e,i,n,s,r,o){return i.duration=e,i.stagger=i.stagger||n,i.onComplete=r,i.onCompleteParams=o,i.parent=this,new Qe(t,i,qt(this,s)),this},r.staggerFrom=function(t,e,i,n,s,r,o){return i.runBackwards=1,kt(i).immediateRender=z(i.immediateRender),this.staggerTo(t,e,i,n,s,r,o)},r.staggerFromTo=function(t,e,i,n,s,r,o,a){return n.startAt=i,kt(n).immediateRender=z(n.immediateRender),this.staggerTo(t,e,n,s,r,o,a)},r.render=function(t,e,i){var n,r,a,l,c,d,u,h,p,f,g,m,v=this._time,y=this._dirty?this.totalDuration():this._tDur,b=this._dur,w=t<=0?0:mt(t),_=this._zTime<0!=t<0&&(this._initted||!b);if(this!==o&&w>y&&t>=0&&(w=y),w!==this._tTime||i||_){if(v!==this._time&&b&&(w+=this._time-v,t+=this._time-v),n=w,p=this._start,d=!(h=this._ts),_&&(b||(v=this._zTime),(t||!e)&&(this._zTime=t)),this._repeat){if(g=this._yoyo,c=b+this._rDelay,this._repeat<-1&&t<0)return this.totalTime(100*c+t,e,i);if(n=mt(w%c),w===y?(l=this._repeat,n=b):((l=~~(w/c))&&l===w/c&&(n=b,l--),n>b&&(n=b)),f=zt(this._tTime,c),!v&&this._tTime&&f!==l&&this._tTime-f*c-this._dur<=0&&(f=l),g&&1&l&&(n=b-n,m=1),l!==f&&!this._lock){var x=g&&1&f,S=x===(g&&1&l);if(l<f&&(x=!x),v=x?0:w%b?b:w,this._lock=1,this.render(v||(m?0:mt(l*c)),e,!b)._lock=0,this._tTime=w,!e&&this.parent&&pe(this,"onRepeat"),this.vars.repeatRefresh&&!m&&(this.invalidate()._lock=1),v&&v!==this._time||d!==!this._ts||this.vars.onRepeat&&!this.parent&&!this._act)return this;if(b=this._dur,y=this._tDur,S&&(this._lock=2,v=x?b:-1e-4,this.render(v,!0),this.vars.repeatRefresh&&!m&&this.invalidate()),this._lock=0,!this._ts&&!d)return this;Le(this,m)}}if(this._hasPause&&!this._forcing&&this._lock<2&&(u=function(t,e,i){var n;if(i>e)for(n=t._first;n&&n._start<=i;){if("isPause"===n.data&&n._start>e)return n;n=n._next}else for(n=t._last;n&&n._start>=i;){if("isPause"===n.data&&n._start<e)return n;n=n._prev}}(this,mt(v),mt(n)),u&&(w-=n-(n=u._start))),this._tTime=w,this._time=n,this._act=!h,this._initted||(this._onUpdate=this.vars.onUpdate,this._initted=1,this._zTime=t,v=0),!v&&n&&!e&&!l&&(pe(this,"onStart"),this._tTime!==w))return this;if(n>=v&&t>=0)for(r=this._first;r;){if(a=r._next,(r._act||n>=r._start)&&r._ts&&u!==r){if(r.parent!==this)return this.render(t,e,i);if(r.render(r._ts>0?(n-r._start)*r._ts:(r._dirty?r.totalDuration():r._tDur)+(n-r._start)*r._ts,e,i),n!==this._time||!this._ts&&!d){u=0,a&&(w+=this._zTime=-1e-8);break}}r=a}else{r=this._last;for(var C=t<0?t:n;r;){if(a=r._prev,(r._act||C<=r._end)&&r._ts&&u!==r){if(r.parent!==this)return this.render(t,e,i);if(r.render(r._ts>0?(C-r._start)*r._ts:(r._dirty?r.totalDuration():r._tDur)+(C-r._start)*r._ts,e,i||s&&(r._initted||r._startAt)),n!==this._time||!this._ts&&!d){u=0,a&&(w+=this._zTime=C?-1e-8:T);break}}r=a}}if(u&&!e&&(this.pause(),u.render(n>=v?0:-1e-8)._zTime=n>=v?1:-1,this._ts))return this._start=p,Rt(this),this.render(t,e,i);this._onUpdate&&!e&&pe(this,"onUpdate",!0),(w===y&&this._tTime>=this.totalDuration()||!w&&v)&&(p!==this._start&&Math.abs(h)===Math.abs(this._ts)||this._lock||((t||!b)&&(w===y&&this._ts>0||!w&&this._ts<0)&&It(this,1),e||t<0&&!v||!w&&!v&&y||(pe(this,w===y&&t>=0?"onComplete":"onReverseComplete",!0),this._prom&&!(w<y&&this.timeScale()>0)&&this._prom())))}return this},r.add=function(t,e){var i=this;if(P(e)||(e=qt(this,e,t)),!(t instanceof Ge)){if(H(t))return t.forEach((function(t){return i.add(t,e)})),this;if(I(t))return this.addLabel(t,e);if(!A(t))return this;t=Qe.delayedCall(0,t)}return this!==t?Gt(this,t,e):this},r.getChildren=function(t,e,i,n){void 0===t&&(t=!0),void 0===e&&(e=!0),void 0===i&&(i=!0),void 0===n&&(n=-x);for(var s=[],r=this._first;r;)r._start>=n&&(r instanceof Qe?e&&s.push(r):(i&&s.push(r),t&&s.push.apply(s,r.getChildren(!0,e,i)))),r=r._next;return s},r.getById=function(t){for(var e=this.getChildren(1,1,1),i=e.length;i--;)if(e[i].vars.id===t)return e[i]},r.remove=function(t){return I(t)?this.removeLabel(t):A(t)?this.killTweensOf(t):(Ot(this,t),t===this._recent&&(this._recent=this._last),At(this))},r.totalTime=function(e,i){return arguments.length?(this._forcing=1,!this._dp&&this._ts&&(this._start=mt(Ee.time-(this._ts>0?e/this._ts:(this.totalDuration()-e)/-this._ts))),t.prototype.totalTime.call(this,e,i),this._forcing=0,this):this._tTime},r.addLabel=function(t,e){return this.labels[t]=qt(this,e),this},r.removeLabel=function(t){return delete this.labels[t],this},r.addPause=function(t,e,i){var n=Qe.delayedCall(0,e||J,i);return n.data="isPause",this._hasPause=1,Gt(this,n,qt(this,t))},r.removePause=function(t){var e=this._first;for(t=qt(this,t);e;)e._start===t&&"isPause"===e.data&&It(e),e=e._next},r.killTweensOf=function(t,e,i){for(var n=this.getTweensOf(t,i),s=n.length;s--;)Ve!==n[s]&&n[s].kill(t,e);return this},r.getTweensOf=function(t,e){for(var i,n=[],s=ie(t),r=this._first,o=P(e);r;)r instanceof Qe?yt(r._targets,s)&&(o?(!Ve||r._initted&&r._ts)&&r.globalTime(0)<=e&&r.globalTime(r.totalDuration())>e:!e||r.isActive())&&n.push(r):(i=r.getTweensOf(s,e)).length&&n.push.apply(n,i),r=r._next;return n},r.tweenTo=function(t,e){e=e||{};var i,n=this,s=qt(n,t),r=e,o=r.startAt,a=r.onStart,l=r.onStartParams,c=r.immediateRender,d=Qe.to(n,Tt({ease:e.ease||"none",lazy:!1,immediateRender:!1,time:s,overwrite:"auto",duration:e.duration||Math.abs((s-(o&&"time"in o?o.time:n._time))/n.timeScale())||T,onStart:function(){if(n.pause(),!i){var t=e.duration||Math.abs((s-(o&&"time"in o?o.time:n._time))/n.timeScale());d._dur!==t&&Wt(d,t,0,1).render(d._time,!0,!0),i=1}a&&a.apply(d,l||[])}},e));return c?d.render(0):d},r.tweenFromTo=function(t,e,i){return this.tweenTo(e,Tt({startAt:{time:qt(this,t)}},i))},r.recent=function(){return this._recent},r.nextLabel=function(t){return void 0===t&&(t=this._time),he(this,qt(this,t))},r.previousLabel=function(t){return void 0===t&&(t=this._time),he(this,qt(this,t),1)},r.currentLabel=function(t){return arguments.length?this.seek(t,!0):this.previousLabel(this._time+T)},r.shiftChildren=function(t,e,i){void 0===i&&(i=0);for(var n,s=this._first,r=this.labels;s;)s._start>=i&&(s._start+=t,s._end+=t),s=s._next;if(e)for(n in r)r[n]>=i&&(r[n]+=t);return At(this)},r.invalidate=function(e){var i=this._first;for(this._lock=0;i;)i.invalidate(e),i=i._next;return t.prototype.invalidate.call(this,e)},r.clear=function(t){void 0===t&&(t=!0);for(var e,i=this._first;i;)e=i._next,this.remove(i),i=e;return this._dp&&(this._time=this._tTime=this._pTime=0),t&&(this.labels={}),At(this)},r.totalDuration=function(t){var e,i,n,s=0,r=this,a=r._last,l=x;if(arguments.length)return r.timeScale((r._repeat<0?r.duration():r.totalDuration())/(r.reversed()?-t:t));if(r._dirty){for(n=r.parent;a;)e=a._prev,a._dirty&&a.totalDuration(),(i=a._start)>l&&r._sort&&a._ts&&!r._lock?(r._lock=1,Gt(r,a,i-a._delay,1)._lock=0):l=i,i<0&&a._ts&&(s-=i,(!n&&!r._dp||n&&n.smoothChildTiming)&&(r._start+=i/r._ts,r._time-=i,r._tTime-=i),r.shiftChildren(-i,!1,-Infinity),l=0),a._end>s&&a._ts&&(s=a._end),a=e;Wt(r,r===o&&r._time>s?r._time:s,1,1),r._dirty=0}return r._tDur},n.updateRoot=function(t){if(o._ts&&(wt(o,Bt(t,o)),u=Ee.frame),Ee.frame>=lt){lt+=w.autoSleep||120;var e=o._first;if((!e||!e._ts)&&w.autoSleep&&Ee._listeners.length<2){for(;e&&!e._ts;)e=e._next;e||Ee.sleep()}}},n}(Ge);Tt(Ye.prototype,{_lock:0,_hasPause:0,_forcing:0});var Ve,Ne,je=function(t,e,i,n,s,r,o){var a,l,c,d,u,h,p,f,g=new hi(this._pt,t,e,0,1,oi,null,s),m=0,v=0;for(g.b=i,g.e=n,i+="",(p=~(n+="").indexOf("random("))&&(n=de(n)),r&&(r(f=[i,n],t,e),i=f[0],n=f[1]),l=i.match(N)||[];a=N.exec(n);)d=a[0],u=n.substring(m,a.index),c?c=(c+1)%5:"rgba("===u.substr(-5)&&(c=1),d!==l[v++]&&(h=parseFloat(l[v-1])||0,g._pt={_next:g._pt,p:u||1===v?u:",",s:h,c:"="===d.charAt(1)?vt(h,d)-h:parseFloat(d)-h,m:c&&c<4?Math.round:0},m=N.lastIndex);return g.c=m<n.length?n.substring(m,n.length):"",g.fp=o,(j.test(n)||p)&&(g.e=0),this._pt=g,g},We=function(t,e,i,n,s,r,o,a,l,c){A(n)&&(n=n(s||0,t,r));var d,u=t[e],h="get"!==i?i:A(u)?l?t[e.indexOf("set")||!A(t["get"+e.substr(3)])?e:"get"+e.substr(3)](l):t[e]():u,p=A(u)?l?ei:ti:Je;if(I(n)&&(~n.indexOf("random(")&&(n=de(n)),"="===n.charAt(1)&&((d=vt(h,n)+(Qt(h)||0))||0===d)&&(n=d)),!c||h!==n||Ne)return isNaN(h*n)||""===n?(!u&&!(e in t)&&K(e,n),je.call(this,t,e,h,n,p,a||w.stringFilter,l)):(d=new hi(this._pt,t,e,+h||0,n-(h||0),"boolean"==typeof u?ri:si,0,p),l&&(d.fp=l),o&&d.modifier(o,this,t),this._pt=d)},$e=function(t,e,i,n,s,r){var o,a,l,c;if(ot[t]&&!1!==(o=new ot[t]).init(s,o.rawVars?e[t]:function(t,e,i,n,s){if(A(t)&&(t=Ue(t,s,e,i,n)),!D(t)||t.style&&t.nodeType||H(t)||F(t))return I(t)?Ue(t,s,e,i,n):t;var r,o={};for(r in t)o[r]=Ue(t[r],s,e,i,n);return o}(e[t],n,s,r,i),i,n,r)&&(i._pt=a=new hi(i._pt,s,t,0,1,o.render,o,0,o.priority),i!==h))for(l=i._ptLookup[i._targets.indexOf(s)],c=o._props.length;c--;)l[o._props[c]]=a;return o},Xe=function t(e,i,r){var a,l,c,d,u,h,p,f,g,m,v,y,b,w=e.vars,S=w.ease,C=w.startAt,E=w.immediateRender,k=w.lazy,M=w.onUpdate,O=w.runBackwards,I=w.yoyoEase,A=w.keyframes,P=w.autoRevert,L=e._dur,D=e._startAt,B=e._targets,R=e.parent,F=R&&"nested"===R.data?R.vars.targets:B,H="auto"===e._overwrite&&!n,G=e.timeline;if(G&&(!A||!S)&&(S="none"),e._ease=De(S,_.ease),e._yEase=I?Pe(De(!0===I?S:I,_.ease)):0,I&&e._yoyo&&!e._repeat&&(I=e._yEase,e._yEase=e._ease,e._ease=I),e._from=!G&&!!w.runBackwards,!G||A&&!w.stagger){if(y=(f=B[0]?ht(B[0]).harness:0)&&w[f.prop],a=Et(w,nt),D&&(D._zTime<0&&D.progress(1),i<0&&O&&E&&!P?D.render(-1,!0):D.revert(O&&L?et:tt),D._lazy=0),C){if(It(e._startAt=Qe.set(B,Tt({data:"isStart",overwrite:!1,parent:R,immediateRender:!0,lazy:!D&&z(k),startAt:null,delay:0,onUpdate:M&&function(){return pe(e,"onUpdate")},stagger:0},C))),e._startAt._dp=0,e._startAt._sat=e,i<0&&(s||!E&&!P)&&e._startAt.revert(et),E&&L&&i<=0&&r<=0)return void(i&&(e._zTime=i))}else if(O&&L&&!D)if(i&&(E=!1),c=Tt({overwrite:!1,data:"isFromStart",lazy:E&&!D&&z(k),immediateRender:E,stagger:0,parent:R},a),y&&(c[f.prop]=y),It(e._startAt=Qe.set(B,c)),e._startAt._dp=0,e._startAt._sat=e,i<0&&(s?e._startAt.revert(et):e._startAt.render(-1,!0)),e._zTime=i,E){if(!i)return}else t(e._startAt,T,T);for(e._pt=e._ptCache=0,k=L&&z(k)||k&&!L,l=0;l<B.length;l++){if(p=(u=B[l])._gsap||ut(B)[l]._gsap,e._ptLookup[l]=m={},rt[p.id]&&st.length&&bt(),v=F===B?l:F.indexOf(u),f&&!1!==(g=new f).init(u,y||a,e,v,F)&&(e._pt=d=new hi(e._pt,u,g.name,0,1,g.render,g,0,g.priority),g._props.forEach((function(t){m[t]=d})),g.priority&&(h=1)),!f||y)for(c in a)ot[c]&&(g=$e(c,a,e,v,u,F))?g.priority&&(h=1):m[c]=d=We.call(e,u,c,"get",a[c],v,F,0,w.stringFilter);e._op&&e._op[l]&&e.kill(u,e._op[l]),H&&e._pt&&(Ve=e,o.killTweensOf(u,m,e.globalTime(i)),b=!e.parent,Ve=0),e._pt&&k&&(rt[p.id]=1)}h&&ui(e),e._onInit&&e._onInit(e)}e._onUpdate=M,e._initted=(!e._op||e._pt)&&!b,A&&i<=0&&G.render(x,!0,!0)},qe=function(t,e,i,n){var s,r,o=e.ease||n||"power1.inOut";if(H(e))r=i[t]||(i[t]=[]),e.forEach((function(t,i){return r.push({t:i/(e.length-1)*100,v:t,e:o})}));else for(s in e)r=i[s]||(i[s]=[]),"ease"===s||r.push({t:parseFloat(t),v:e[s],e:o})},Ue=function(t,e,i,n,s){return A(t)?t.call(e,i,n,s):I(t)&&~t.indexOf("random(")?de(t):t},Ke=dt+"repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase,autoRevert",Ze={};ft(Ke+",id,stagger,delay,duration,paused,scrollTrigger",(function(t){return Ze[t]=1}));var Qe=function(t){function r(i,s,r,a){var l;"number"==typeof s&&(r.duration=s,s=r,r=null);var c,d,u,h,p,f,g,m,v=(l=t.call(this,a?s:kt(s))||this).vars,y=v.duration,b=v.delay,_=v.immediateRender,x=v.stagger,T=v.overwrite,S=v.keyframes,C=v.defaults,E=v.scrollTrigger,k=v.yoyoEase,M=s.parent||o,O=(H(i)||F(i)?P(i[0]):"length"in s)?[i]:ie(i);if(l._targets=O.length?ut(O):Z("GSAP target "+i+" not found. https://gsap.com",!w.nullTargetWarn)||[],l._ptLookup=[],l._overwrite=T,S||x||R(y)||R(b)){if(s=l.vars,(c=l.timeline=new Ye({data:"nested",defaults:C||{},targets:M&&"nested"===M.data?M.vars.targets:O})).kill(),c.parent=c._dp=e(l),c._start=0,x||R(y)||R(b)){if(h=O.length,g=x&&re(x),D(x))for(p in x)~Ke.indexOf(p)&&(m||(m={}),m[p]=x[p]);for(d=0;d<h;d++)(u=Et(s,Ze)).stagger=0,k&&(u.yoyoEase=k),m&&St(u,m),f=O[d],u.duration=+Ue(y,e(l),d,f,O),u.delay=(+Ue(b,e(l),d,f,O)||0)-l._delay,!x&&1===h&&u.delay&&(l._delay=b=u.delay,l._start+=b,u.delay=0),c.to(f,u,g?g(d,f,O):0),c._ease=Me.none;c.duration()?y=b=0:l.timeline=0}else if(S){kt(Tt(c.vars.defaults,{ease:"none"})),c._ease=De(S.ease||s.ease||"none");var I,A,L,B=0;if(H(S))S.forEach((function(t){return c.to(O,t,">")})),c.duration();else{for(p in u={},S)"ease"===p||"easeEach"===p||qe(p,S[p],u,S.easeEach);for(p in u)for(I=u[p].sort((function(t,e){return t.t-e.t})),B=0,d=0;d<I.length;d++)(L={ease:(A=I[d]).e,duration:(A.t-(d?I[d-1].t:0))/100*y})[p]=A.v,c.to(O,L,B),B+=L.duration;c.duration()<y&&c.to({},{duration:y-c.duration()})}}y||l.duration(y=c.duration())}else l.timeline=0;return!0!==T||n||(Ve=e(l),o.killTweensOf(O),Ve=0),Gt(M,e(l),r),s.reversed&&l.reverse(),s.paused&&l.paused(!0),(_||!y&&!S&&l._start===mt(M._time)&&z(_)&&Lt(e(l))&&"nested"!==M.data)&&(l._tTime=-1e-8,l.render(Math.max(0,-b)||0)),E&&Yt(e(l),E),l}i(r,t);var a=r.prototype;return a.render=function(t,e,i){var n,r,o,a,l,c,d,u,h,p=this._time,f=this._tDur,g=this._dur,m=t<0,v=t>f-T&&!m?f:t<T?0:t;if(g){if(v!==this._tTime||!t||i||!this._initted&&this._tTime||this._startAt&&this._zTime<0!==m){if(n=v,u=this.timeline,this._repeat){if(a=g+this._rDelay,this._repeat<-1&&m)return this.totalTime(100*a+t,e,i);if(n=mt(v%a),v===f?(o=this._repeat,n=g):((o=~~(v/a))&&o===mt(v/a)&&(n=g,o--),n>g&&(n=g)),(c=this._yoyo&&1&o)&&(h=this._yEase,n=g-n),l=zt(this._tTime,a),n===p&&!i&&this._initted&&o===l)return this._tTime=v,this;o!==l&&(u&&this._yEase&&Le(u,c),this.vars.repeatRefresh&&!c&&!this._lock&&this._time!==a&&this._initted&&(this._lock=i=1,this.render(mt(a*o),!0).invalidate()._lock=0))}if(!this._initted){if(Vt(this,m?t:n,i,e,v))return this._tTime=0,this;if(!(p===this._time||i&&this.vars.repeatRefresh&&o!==l))return this;if(g!==this._dur)return this.render(t,e,i)}if(this._tTime=v,this._time=n,!this._act&&this._ts&&(this._act=1,this._lazy=0),this.ratio=d=(h||this._ease)(n/g),this._from&&(this.ratio=d=1-d),n&&!p&&!e&&!o&&(pe(this,"onStart"),this._tTime!==v))return this;for(r=this._pt;r;)r.r(d,r.d),r=r._next;u&&u.render(t<0?t:u._dur*u._ease(n/this._dur),e,i)||this._startAt&&(this._zTime=t),this._onUpdate&&!e&&(m&&Pt(this,t,0,i),pe(this,"onUpdate")),this._repeat&&o!==l&&this.vars.onRepeat&&!e&&this.parent&&pe(this,"onRepeat"),v!==this._tDur&&v||this._tTime!==v||(m&&!this._onUpdate&&Pt(this,t,0,!0),(t||!g)&&(v===this._tDur&&this._ts>0||!v&&this._ts<0)&&It(this,1),e||m&&!p||!(v||p||c)||(pe(this,v===f?"onComplete":"onReverseComplete",!0),this._prom&&!(v<f&&this.timeScale()>0)&&this._prom()))}}else!function(t,e,i,n){var r,o,a,l=t.ratio,c=e<0||!e&&(!t._start&&Nt(t)&&(t._initted||!jt(t))||(t._ts<0||t._dp._ts<0)&&!jt(t))?0:1,d=t._rDelay,u=0;if(d&&t._repeat&&(u=Zt(0,t._tDur,e),o=zt(u,d),t._yoyo&&1&o&&(c=1-c),o!==zt(t._tTime,d)&&(l=1-c,t.vars.repeatRefresh&&t._initted&&t.invalidate())),c!==l||s||n||t._zTime===T||!e&&t._zTime){if(!t._initted&&Vt(t,e,n,i,u))return;for(a=t._zTime,t._zTime=e||(i?T:0),i||(i=e&&!a),t.ratio=c,t._from&&(c=1-c),t._time=0,t._tTime=u,r=t._pt;r;)r.r(c,r.d),r=r._next;e<0&&Pt(t,e,0,!0),t._onUpdate&&!i&&pe(t,"onUpdate"),u&&t._repeat&&!i&&t.parent&&pe(t,"onRepeat"),(e>=t._tDur||e<0)&&t.ratio===c&&(c&&It(t,1),i||s||(pe(t,c?"onComplete":"onReverseComplete",!0),t._prom&&t._prom()))}else t._zTime||(t._zTime=e)}(this,t,e,i);return this},a.targets=function(){return this._targets},a.invalidate=function(e){return(!e||!this.vars.runBackwards)&&(this._startAt=0),this._pt=this._op=this._onUpdate=this._lazy=this.ratio=0,this._ptLookup=[],this.timeline&&this.timeline.invalidate(e),t.prototype.invalidate.call(this,e)},a.resetTo=function(t,e,i,n,s){p||Ee.wake(),this._ts||this.play();var r=Math.min(this._dur,(this._dp._time-this._start)*this._ts);return this._initted||Xe(this,r),function(t,e,i,n,s,r,o,a){var l,c,d,u,h=(t._pt&&t._ptCache||(t._ptCache={}))[e];if(!h)for(h=t._ptCache[e]=[],d=t._ptLookup,u=t._targets.length;u--;){if((l=d[u][e])&&l.d&&l.d._pt)for(l=l.d._pt;l&&l.p!==e&&l.fp!==e;)l=l._next;if(!l)return Ne=1,t.vars[e]="+=0",Xe(t,o),Ne=0,a?Z(e+" not eligible for reset"):1;h.push(l)}for(u=h.length;u--;)(l=(c=h[u])._pt||c).s=!n&&0!==n||s?l.s+(n||0)+r*l.c:n,l.c=i-l.s,c.e&&(c.e=gt(i)+Qt(c.e)),c.b&&(c.b=l.s+Qt(c.b))}(this,t,e,i,n,this._ease(r/this._dur),r,s)?this.resetTo(t,e,i,n,1):(Ft(this,0),this.parent||Mt(this._dp,this,"_first","_last",this._dp._sort?"_start":0),this.render(0))},a.kill=function(t,e){if(void 0===e&&(e="all"),!(t||e&&"all"!==e))return this._lazy=this._pt=0,this.parent?fe(this):this;if(this.timeline){var i=this.timeline.totalDuration();return this.timeline.killTweensOf(t,e,Ve&&!0!==Ve.vars.overwrite)._first||fe(this),this.parent&&i!==this.timeline.totalDuration()&&Wt(this,this._dur*this.timeline._tDur/i,0,1),this}var n,s,r,o,a,l,c,d=this._targets,u=t?ie(t):d,h=this._ptLookup,p=this._pt;if((!e||"all"===e)&&function(t,e){for(var i=t.length,n=i===e.length;n&&i--&&t[i]===e[i];);return i<0}(d,u))return"all"===e&&(this._pt=0),fe(this);for(n=this._op=this._op||[],"all"!==e&&(I(e)&&(a={},ft(e,(function(t){return a[t]=1})),e=a),e=function(t,e){var i,n,s,r,o=t[0]?ht(t[0]).harness:0,a=o&&o.aliases;if(!a)return e;for(n in i=St({},e),a)if(n in i)for(s=(r=a[n].split(",")).length;s--;)i[r[s]]=i[n];return i}(d,e)),c=d.length;c--;)if(~u.indexOf(d[c]))for(a in s=h[c],"all"===e?(n[c]=e,o=s,r={}):(r=n[c]=n[c]||{},o=e),o)(l=s&&s[a])&&("kill"in l.d&&!0!==l.d.kill(a)||Ot(this,l,"_pt"),delete s[a]),"all"!==r&&(r[a]=1);return this._initted&&!this._pt&&p&&fe(this),this},r.to=function(t,e){return new r(t,e,arguments[2])},r.from=function(t,e){return Ut(1,arguments)},r.delayedCall=function(t,e,i,n){return new r(e,0,{immediateRender:!1,lazy:!1,overwrite:!1,delay:t,onComplete:e,onReverseComplete:e,onCompleteParams:i,onReverseCompleteParams:i,callbackScope:n})},r.fromTo=function(t,e,i){return Ut(2,arguments)},r.set=function(t,e){return e.duration=0,e.repeatDelay||(e.repeat=0),new r(t,e)},r.killTweensOf=function(t,e,i){return o.killTweensOf(t,e,i)},r}(Ge);Tt(Qe.prototype,{_targets:[],_lazy:0,_startAt:0,_op:0,_onInit:0}),ft("staggerTo,staggerFrom,staggerFromTo",(function(t){Qe[t]=function(){var e=new Ye,i=Jt.call(arguments,0);return i.splice("staggerFromTo"===t?5:4,0,0),e[t].apply(e,i)}}));var Je=function(t,e,i){return t[e]=i},ti=function(t,e,i){return t[e](i)},ei=function(t,e,i,n){return t[e](n.fp,i)},ii=function(t,e,i){return t.setAttribute(e,i)},ni=function(t,e){return A(t[e])?ti:L(t[e])&&t.setAttribute?ii:Je},si=function(t,e){return e.set(e.t,e.p,Math.round(1e6*(e.s+e.c*t))/1e6,e)},ri=function(t,e){return e.set(e.t,e.p,!!(e.s+e.c*t),e)},oi=function(t,e){var i=e._pt,n="";if(!t&&e.b)n=e.b;else if(1===t&&e.e)n=e.e;else{for(;i;)n=i.p+(i.m?i.m(i.s+i.c*t):Math.round(1e4*(i.s+i.c*t))/1e4)+n,i=i._next;n+=e.c}e.set(e.t,e.p,n,e)},ai=function(t,e){for(var i=e._pt;i;)i.r(t,i.d),i=i._next},li=function(t,e,i,n){for(var s,r=this._pt;r;)s=r._next,r.p===n&&r.modifier(t,e,i),r=s},ci=function(t){for(var e,i,n=this._pt;n;)i=n._next,n.p===t&&!n.op||n.op===t?Ot(this,n,"_pt"):n.dep||(e=1),n=i;return!e},di=function(t,e,i,n){n.mSet(t,e,n.m.call(n.tween,i,n.mt),n)},ui=function(t){for(var e,i,n,s,r=t._pt;r;){for(e=r._next,i=n;i&&i.pr>r.pr;)i=i._next;(r._prev=i?i._prev:s)?r._prev._next=r:n=r,(r._next=i)?i._prev=r:s=r,r=e}t._pt=n},hi=function(){function t(t,e,i,n,s,r,o,a,l){this.t=e,this.s=n,this.c=s,this.p=i,this.r=r||si,this.d=o||this,this.set=a||Je,this.pr=l||0,this._next=t,t&&(t._prev=this)}return t.prototype.modifier=function(t,e,i){this.mSet=this.mSet||this.set,this.set=di,this.m=t,this.mt=i,this.tween=e},t}();ft(dt+"parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger",(function(t){return nt[t]=1})),X.TweenMax=X.TweenLite=Qe,X.TimelineLite=X.TimelineMax=Ye,o=new Ye({sortChildren:!1,defaults:_,autoRemoveChildren:!0,id:"root",smoothChildTiming:!0}),w.stringFilter=Ce;var pi=[],fi={},gi=[],mi=0,vi=0,yi=function(t){return(fi[t]||gi).map((function(t){return t()}))},bi=function(){var t=Date.now(),e=[];t-mi>2&&(yi("matchMediaInit"),pi.forEach((function(t){var i,n,s,r,o=t.queries,l=t.conditions;for(n in o)(i=a.matchMedia(o[n]).matches)&&(s=1),i!==l[n]&&(l[n]=i,r=1);r&&(t.revert(),s&&e.push(t))})),yi("matchMediaRevert"),e.forEach((function(t){return t.onMatch(t,(function(e){return t.add(null,e)}))})),mi=t,yi("matchMedia"))},wi=function(){function t(t,e){this.selector=e&&ne(e),this.data=[],this._r=[],this.isReverted=!1,this.id=vi++,t&&this.add(t)}var e=t.prototype;return e.add=function(t,e,i){A(t)&&(i=e,e=t,t=A);var n=this,s=function(){var t,s=r,o=n.selector;return s&&s!==n&&s.data.push(n),i&&(n.selector=ne(i)),r=n,t=e.apply(n,arguments),A(t)&&n._r.push(t),r=s,n.selector=o,n.isReverted=!1,t};return n.last=s,t===A?s(n,(function(t){return n.add(null,t)})):t?n[t]=s:s},e.ignore=function(t){var e=r;r=null,t(this),r=e},e.getTweens=function(){var e=[];return this.data.forEach((function(i){return i instanceof t?e.push.apply(e,i.getTweens()):i instanceof Qe&&!(i.parent&&"nested"===i.parent.data)&&e.push(i)})),e},e.clear=function(){this._r.length=this.data.length=0},e.kill=function(t,e){var i=this;if(t?function(){for(var e,n=i.getTweens(),s=i.data.length;s--;)"isFlip"===(e=i.data[s]).data&&(e.revert(),e.getChildren(!0,!0,!1).forEach((function(t){return n.splice(n.indexOf(t),1)})));for(n.map((function(t){return{g:t._dur||t._delay||t._sat&&!t._sat.vars.immediateRender?t.globalTime(0):-1/0,t}})).sort((function(t,e){return e.g-t.g||-1/0})).forEach((function(e){return e.t.revert(t)})),s=i.data.length;s--;)(e=i.data[s])instanceof Ye?"nested"!==e.data&&(e.scrollTrigger&&e.scrollTrigger.revert(),e.kill()):!(e instanceof Qe)&&e.revert&&e.revert(t);i._r.forEach((function(e){return e(t,i)})),i.isReverted=!0}():this.data.forEach((function(t){return t.kill&&t.kill()})),this.clear(),e)for(var n=pi.length;n--;)pi[n].id===this.id&&pi.splice(n,1)},e.revert=function(t){this.kill(t||{})},t}(),_i=function(){function t(t){this.contexts=[],this.scope=t,r&&r.data.push(this)}var e=t.prototype;return e.add=function(t,e,i){D(t)||(t={matches:t});var n,s,o,l=new wi(0,i||this.scope),c=l.conditions={};for(s in r&&!l.selector&&(l.selector=r.selector),this.contexts.push(l),e=l.add("onMatch",e),l.queries=t,t)"all"===s?o=1:(n=a.matchMedia(t[s]))&&(pi.indexOf(l)<0&&pi.push(l),(c[s]=n.matches)&&(o=1),n.addListener?n.addListener(bi):n.addEventListener("change",bi));return o&&e(l,(function(t){return l.add(null,t)})),this},e.revert=function(t){this.kill(t||{})},e.kill=function(t){this.contexts.forEach((function(e){return e.kill(t,!0)}))},t}(),xi={registerPlugin:function(){for(var t=arguments.length,e=new Array(t),i=0;i<t;i++)e[i]=arguments[i];e.forEach((function(t){return me(t)}))},timeline:function(t){return new Ye(t)},getTweensOf:function(t,e){return o.getTweensOf(t,e)},getProperty:function(t,e,i,n){I(t)&&(t=ie(t)[0]);var s=ht(t||{}).get,r=i?xt:_t;return"native"===i&&(i=""),t?e?r((ot[e]&&ot[e].get||s)(t,e,i,n)):function(e,i,n){return r((ot[e]&&ot[e].get||s)(t,e,i,n))}:t},quickSetter:function(t,e,i){if((t=ie(t)).length>1){var n=t.map((function(t){return Ci.quickSetter(t,e,i)})),s=n.length;return function(t){for(var e=s;e--;)n[e](t)}}t=t[0]||{};var r=ot[e],o=ht(t),a=o.harness&&(o.harness.aliases||{})[e]||e,l=r?function(e){var n=new r;h._pt=0,n.init(t,i?e+i:e,h,0,[t]),n.render(1,n),h._pt&&ai(1,h)}:o.set(t,a);return r?l:function(e){return l(t,a,i?e+i:e,o,1)}},quickTo:function(t,e,i){var n,s=Ci.to(t,St(((n={})[e]="+=0.1",n.paused=!0,n),i||{})),r=function(t,i,n){return s.resetTo(e,t,i,n)};return r.tween=s,r},isTweening:function(t){return o.getTweensOf(t,!0).length>0},defaults:function(t){return t&&t.ease&&(t.ease=De(t.ease,_.ease)),Ct(_,t||{})},config:function(t){return Ct(w,t||{})},registerEffect:function(t){var e=t.name,i=t.effect,n=t.plugins,s=t.defaults,r=t.extendTimeline;(n||"").split(",").forEach((function(t){return t&&!ot[t]&&!X[t]&&Z(e+" effect requires "+t+" plugin.")})),at[e]=function(t,e,n){return i(ie(t),Tt(e||{},s),n)},r&&(Ye.prototype[e]=function(t,i,n){return this.add(at[e](t,D(i)?i:(n=i)&&{},this),n)})},registerEase:function(t,e){Me[t]=De(e)},parseEase:function(t,e){return arguments.length?De(t,e):Me},getById:function(t){return o.getById(t)},exportRoot:function(t,e){void 0===t&&(t={});var i,n,s=new Ye(t);for(s.smoothChildTiming=z(t.smoothChildTiming),o.remove(s),s._dp=0,s._time=s._tTime=o._time,i=o._first;i;)n=i._next,!e&&!i._dur&&i instanceof Qe&&i.vars.onComplete===i._targets[0]||Gt(s,i,i._start-i._delay),i=n;return Gt(o,s,0),s},context:function(t,e){return t?new wi(t,e):r},matchMedia:function(t){return new _i(t)},matchMediaRefresh:function(){return pi.forEach((function(t){var e,i,n=t.conditions;for(i in n)n[i]&&(n[i]=!1,e=1);e&&t.revert()}))||bi()},addEventListener:function(t,e){var i=fi[t]||(fi[t]=[]);~i.indexOf(e)||i.push(e)},removeEventListener:function(t,e){var i=fi[t],n=i&&i.indexOf(e);n>=0&&i.splice(n,1)},utils:{wrap:function t(e,i,n){var s=i-e;return H(e)?ce(e,t(0,e.length),i):Kt(n,(function(t){return(s+(t-e)%s)%s+e}))},wrapYoyo:function t(e,i,n){var s=i-e,r=2*s;return H(e)?ce(e,t(0,e.length-1),i):Kt(n,(function(t){return e+((t=(r+(t-e)%r)%r||0)>s?r-t:t)}))},distribute:re,random:le,snap:ae,normalize:function(t,e,i){return ue(t,e,0,1,i)},getUnit:Qt,clamp:function(t,e,i){return Kt(i,(function(i){return Zt(t,e,i)}))},splitColor:we,toArray:ie,selector:ne,mapRange:ue,pipe:function(){for(var t=arguments.length,e=new Array(t),i=0;i<t;i++)e[i]=arguments[i];return function(t){return e.reduce((function(t,e){return e(t)}),t)}},unitize:function(t,e){return function(i){return t(parseFloat(i))+(e||Qt(i))}},interpolate:function t(e,i,n,s){var r=isNaN(e+i)?0:function(t){return(1-t)*e+t*i};if(!r){var o,a,l,c,d,u=I(e),h={};if(!0===n&&(s=1)&&(n=null),u)e={p:e},i={p:i};else if(H(e)&&!H(i)){for(l=[],c=e.length,d=c-2,a=1;a<c;a++)l.push(t(e[a-1],e[a]));c--,r=function(t){t*=c;var e=Math.min(d,~~t);return l[e](t-e)},n=i}else s||(e=St(H(e)?[]:{},e));if(!l){for(o in i)We.call(h,e,o,"get",i[o]);r=function(t){return ai(t,h)||(u?e.p:e)}}}return Kt(n,r)},shuffle:se},install:U,effects:at,ticker:Ee,updateRoot:Ye.updateRoot,plugins:ot,globalTimeline:o,core:{PropTween:hi,globals:Q,Tween:Qe,Timeline:Ye,Animation:Ge,getCache:ht,_removeLinkedListItem:Ot,reverting:function(){return s},context:function(t){return t&&r&&(r.data.push(t),t._ctx=r),r},suppressOverwrites:function(t){return n=t}}};ft("to,from,fromTo,delayedCall,set,killTweensOf",(function(t){return xi[t]=Qe[t]})),Ee.add(Ye.updateRoot),h=xi.to({},{duration:0});var Ti=function(t,e){for(var i=t._pt;i&&i.p!==e&&i.op!==e&&i.fp!==e;)i=i._next;return i},Si=function(t,e){return{name:t,rawVars:1,init:function(t,i,n){n._onInit=function(t){var n,s;if(I(i)&&(n={},ft(i,(function(t){return n[t]=1})),i=n),e){for(s in n={},i)n[s]=e(i[s]);i=n}!function(t,e){var i,n,s,r=t._targets;for(i in e)for(n=r.length;n--;)(s=t._ptLookup[n][i])&&(s=s.d)&&(s._pt&&(s=Ti(s,i)),s&&s.modifier&&s.modifier(e[i],t,r[n],i))}(t,i)}}}},Ci=xi.registerPlugin({name:"attr",init:function(t,e,i,n,s){var r,o,a;for(r in this.tween=i,e)a=t.getAttribute(r)||"",(o=this.add(t,"setAttribute",(a||0)+"",e[r],n,s,0,0,r)).op=r,o.b=a,this._props.push(r)},render:function(t,e){for(var i=e._pt;i;)s?i.set(i.t,i.p,i.b,i):i.r(t,i.d),i=i._next}},{name:"endArray",init:function(t,e){for(var i=e.length;i--;)this.add(t,i,t[i]||0,e[i],0,0,0,0,0,1)}},Si("roundProps",oe),Si("modifiers"),Si("snap",ae))||xi;Qe.version=Ye.version=Ci.version="3.12.5",d=1,B()&&ke();Me.Power0,Me.Power1,Me.Power2,Me.Power3,Me.Power4,Me.Linear,Me.Quad,Me.Cubic,Me.Quart,Me.Quint,Me.Strong,Me.Elastic,Me.Back,Me.SteppedEase,Me.Bounce,Me.Sine,Me.Expo,Me.Circ;var Ei,ki,Mi,Oi,Ii,Ai,Pi,Li,Di={},zi=180/Math.PI,Bi=Math.PI/180,Ri=Math.atan2,Fi=/([A-Z])/g,Hi=/(left|right|width|margin|padding|x)/i,Gi=/[\s,\(]\S/,Yi={autoAlpha:"opacity,visibility",scale:"scaleX,scaleY",alpha:"opacity"},Vi=function(t,e){return e.set(e.t,e.p,Math.round(1e4*(e.s+e.c*t))/1e4+e.u,e)},Ni=function(t,e){return e.set(e.t,e.p,1===t?e.e:Math.round(1e4*(e.s+e.c*t))/1e4+e.u,e)},ji=function(t,e){return e.set(e.t,e.p,t?Math.round(1e4*(e.s+e.c*t))/1e4+e.u:e.b,e)},Wi=function(t,e){var i=e.s+e.c*t;e.set(e.t,e.p,~~(i+(i<0?-.5:.5))+e.u,e)},$i=function(t,e){return e.set(e.t,e.p,t?e.e:e.b,e)},Xi=function(t,e){return e.set(e.t,e.p,1!==t?e.b:e.e,e)},qi=function(t,e,i){return t.style[e]=i},Ui=function(t,e,i){return t.style.setProperty(e,i)},Ki=function(t,e,i){return t._gsap[e]=i},Zi=function(t,e,i){return t._gsap.scaleX=t._gsap.scaleY=i},Qi=function(t,e,i,n,s){var r=t._gsap;r.scaleX=r.scaleY=i,r.renderTransform(s,r)},Ji=function(t,e,i,n,s){var r=t._gsap;r[e]=i,r.renderTransform(s,r)},tn="transform",en=tn+"Origin",nn=function t(e,i){var n=this,s=this.target,r=s.style,o=s._gsap;if(e in Di&&r){if(this.tfm=this.tfm||{},"transform"===e)return Yi.transform.split(",").forEach((function(e){return t.call(n,e,i)}));if(~(e=Yi[e]||e).indexOf(",")?e.split(",").forEach((function(t){return n.tfm[t]=_n(s,t)})):this.tfm[e]=o.x?o[e]:_n(s,e),e===en&&(this.tfm.zOrigin=o.zOrigin),this.props.indexOf(tn)>=0)return;o.svg&&(this.svgo=s.getAttribute("data-svg-origin"),this.props.push(en,i,"")),e=tn}(r||i)&&this.props.push(e,i,r[e])},sn=function(t){t.translate&&(t.removeProperty("translate"),t.removeProperty("scale"),t.removeProperty("rotate"))},rn=function(){var t,e,i=this.props,n=this.target,s=n.style,r=n._gsap;for(t=0;t<i.length;t+=3)i[t+1]?n[i[t]]=i[t+2]:i[t+2]?s[i[t]]=i[t+2]:s.removeProperty("--"===i[t].substr(0,2)?i[t]:i[t].replace(Fi,"-$1").toLowerCase());if(this.tfm){for(e in this.tfm)r[e]=this.tfm[e];r.svg&&(r.renderTransform(),n.setAttribute("data-svg-origin",this.svgo||"")),(t=Pi())&&t.isStart||s[tn]||(sn(s),r.zOrigin&&s[en]&&(s[en]+=" "+r.zOrigin+"px",r.zOrigin=0,r.renderTransform()),r.uncache=1)}},on=function(t,e){var i={target:t,props:[],revert:rn,save:nn};return t._gsap||Ci.core.getCache(t),e&&e.split(",").forEach((function(t){return i.save(t)})),i},an=function(t,e){var i=ki.createElementNS?ki.createElementNS((e||"http://www.w3.org/1999/xhtml").replace(/^https/,"http"),t):ki.createElement(t);return i&&i.style?i:ki.createElement(t)},ln=function t(e,i,n){var s=getComputedStyle(e);return s[i]||s.getPropertyValue(i.replace(Fi,"-$1").toLowerCase())||s.getPropertyValue(i)||!n&&t(e,dn(i)||i,1)||""},cn="O,Moz,ms,Ms,Webkit".split(","),dn=function(t,e,i){var n=(e||Ii).style,s=5;if(t in n&&!i)return t;for(t=t.charAt(0).toUpperCase()+t.substr(1);s--&&!(cn[s]+t in n););return s<0?null:(3===s?"ms":s>=0?cn[s]:"")+t},un=function(){"undefined"!=typeof window&&window.document&&(Ei=window,ki=Ei.document,Mi=ki.documentElement,Ii=an("div")||{style:{}},an("div"),tn=dn(tn),en=tn+"Origin",Ii.style.cssText="border-width:0;line-height:0;position:absolute;padding:0",Li=!!dn("perspective"),Pi=Ci.core.reverting,Oi=1)},hn=function t(e){var i,n=an("svg",this.ownerSVGElement&&this.ownerSVGElement.getAttribute("xmlns")||"http://www.w3.org/2000/svg"),s=this.parentNode,r=this.nextSibling,o=this.style.cssText;if(Mi.appendChild(n),n.appendChild(this),this.style.display="block",e)try{i=this.getBBox(),this._gsapBBox=this.getBBox,this.getBBox=t}catch(t){}else this._gsapBBox&&(i=this._gsapBBox());return s&&(r?s.insertBefore(this,r):s.appendChild(this)),Mi.removeChild(n),this.style.cssText=o,i},pn=function(t,e){for(var i=e.length;i--;)if(t.hasAttribute(e[i]))return t.getAttribute(e[i])},fn=function(t){var e;try{e=t.getBBox()}catch(i){e=hn.call(t,!0)}return e&&(e.width||e.height)||t.getBBox===hn||(e=hn.call(t,!0)),!e||e.width||e.x||e.y?e:{x:+pn(t,["x","cx","x1"])||0,y:+pn(t,["y","cy","y1"])||0,width:0,height:0}},gn=function(t){return!(!t.getCTM||t.parentNode&&!t.ownerSVGElement||!fn(t))},mn=function(t,e){if(e){var i,n=t.style;e in Di&&e!==en&&(e=tn),n.removeProperty?("ms"!==(i=e.substr(0,2))&&"webkit"!==e.substr(0,6)||(e="-"+e),n.removeProperty("--"===i?e:e.replace(Fi,"-$1").toLowerCase())):n.removeAttribute(e)}},vn=function(t,e,i,n,s,r){var o=new hi(t._pt,e,i,0,1,r?Xi:$i);return t._pt=o,o.b=n,o.e=s,t._props.push(i),o},yn={deg:1,rad:1,turn:1},bn={grid:1,flex:1},wn=function t(e,i,n,s){var r,o,a,l,c=parseFloat(n)||0,d=(n+"").trim().substr((c+"").length)||"px",u=Ii.style,h=Hi.test(i),p="svg"===e.tagName.toLowerCase(),f=(p?"client":"offset")+(h?"Width":"Height"),g=100,m="px"===s,v="%"===s;if(s===d||!c||yn[s]||yn[d])return c;if("px"!==d&&!m&&(c=t(e,i,n,"px")),l=e.getCTM&&gn(e),(v||"%"===d)&&(Di[i]||~i.indexOf("adius")))return r=l?e.getBBox()[h?"width":"height"]:e[f],gt(v?c/r*g:c/100*r);if(u[h?"width":"height"]=g+(m?d:s),o=~i.indexOf("adius")||"em"===s&&e.appendChild&&!p?e:e.parentNode,l&&(o=(e.ownerSVGElement||{}).parentNode),o&&o!==ki&&o.appendChild||(o=ki.body),(a=o._gsap)&&v&&a.width&&h&&a.time===Ee.time&&!a.uncache)return gt(c/a.width*g);if(!v||"height"!==i&&"width"!==i)(v||"%"===d)&&!bn[ln(o,"display")]&&(u.position=ln(e,"position")),o===e&&(u.position="static"),o.appendChild(Ii),r=Ii[f],o.removeChild(Ii),u.position="absolute";else{var y=e.style[i];e.style[i]=g+s,r=e[f],y?e.style[i]=y:mn(e,i)}return h&&v&&((a=ht(o)).time=Ee.time,a.width=o[f]),gt(m?r*c/g:r&&c?g/r*c:0)},_n=function(t,e,i,n){var s;return Oi||un(),e in Yi&&"transform"!==e&&~(e=Yi[e]).indexOf(",")&&(e=e.split(",")[0]),Di[e]&&"transform"!==e?(s=Pn(t,n),s="transformOrigin"!==e?s[e]:s.svg?s.origin:Ln(ln(t,en))+" "+s.zOrigin+"px"):(!(s=t.style[e])||"auto"===s||n||~(s+"").indexOf("calc("))&&(s=Cn[e]&&Cn[e](t,e,i)||ln(t,e)||pt(t,e)||("opacity"===e?1:0)),i&&!~(s+"").trim().indexOf(" ")?wn(t,e,s,i)+i:s},xn=function(t,e,i,n){if(!i||"none"===i){var s=dn(e,t,1),r=s&&ln(t,s,1);r&&r!==i?(e=s,i=r):"borderColor"===e&&(i=ln(t,"borderTopColor"))}var o,a,l,c,d,u,h,p,f,g,m,v=new hi(this._pt,t.style,e,0,1,oi),y=0,b=0;if(v.b=i,v.e=n,i+="","auto"===(n+="")&&(u=t.style[e],t.style[e]=n,n=ln(t,e)||n,u?t.style[e]=u:mn(t,e)),Ce(o=[i,n]),n=o[1],l=(i=o[0]).match(V)||[],(n.match(V)||[]).length){for(;a=V.exec(n);)h=a[0],f=n.substring(y,a.index),d?d=(d+1)%5:"rgba("!==f.substr(-5)&&"hsla("!==f.substr(-5)||(d=1),h!==(u=l[b++]||"")&&(c=parseFloat(u)||0,m=u.substr((c+"").length),"="===h.charAt(1)&&(h=vt(c,h)+m),p=parseFloat(h),g=h.substr((p+"").length),y=V.lastIndex-g.length,g||(g=g||w.units[e]||m,y===n.length&&(n+=g,v.e+=g)),m!==g&&(c=wn(t,e,u,g)||0),v._pt={_next:v._pt,p:f||1===b?f:",",s:c,c:p-c,m:d&&d<4||"zIndex"===e?Math.round:0});v.c=y<n.length?n.substring(y,n.length):""}else v.r="display"===e&&"none"===n?Xi:$i;return j.test(n)&&(v.e=0),this._pt=v,v},Tn={top:"0%",bottom:"100%",left:"0%",right:"100%",center:"50%"},Sn=function(t,e){if(e.tween&&e.tween._time===e.tween._dur){var i,n,s,r=e.t,o=r.style,a=e.u,l=r._gsap;if("all"===a||!0===a)o.cssText="",n=1;else for(s=(a=a.split(",")).length;--s>-1;)i=a[s],Di[i]&&(n=1,i="transformOrigin"===i?en:tn),mn(r,i);n&&(mn(r,tn),l&&(l.svg&&r.removeAttribute("transform"),Pn(r,1),l.uncache=1,sn(o)))}},Cn={clearProps:function(t,e,i,n,s){if("isFromStart"!==s.data){var r=t._pt=new hi(t._pt,e,i,0,0,Sn);return r.u=n,r.pr=-10,r.tween=s,t._props.push(i),1}}},En=[1,0,0,1,0,0],kn={},Mn=function(t){return"matrix(1, 0, 0, 1, 0, 0)"===t||"none"===t||!t},On=function(t){var e=ln(t,tn);return Mn(e)?En:e.substr(7).match(Y).map(gt)},In=function(t,e){var i,n,s,r,o=t._gsap||ht(t),a=t.style,l=On(t);return o.svg&&t.getAttribute("transform")?"1,0,0,1,0,0"===(l=[(s=t.transform.baseVal.consolidate().matrix).a,s.b,s.c,s.d,s.e,s.f]).join(",")?En:l:(l!==En||t.offsetParent||t===Mi||o.svg||(s=a.display,a.display="block",(i=t.parentNode)&&t.offsetParent||(r=1,n=t.nextElementSibling,Mi.appendChild(t)),l=On(t),s?a.display=s:mn(t,"display"),r&&(n?i.insertBefore(t,n):i?i.appendChild(t):Mi.removeChild(t))),e&&l.length>6?[l[0],l[1],l[4],l[5],l[12],l[13]]:l)},An=function(t,e,i,n,s,r){var o,a,l,c=t._gsap,d=s||In(t,!0),u=c.xOrigin||0,h=c.yOrigin||0,p=c.xOffset||0,f=c.yOffset||0,g=d[0],m=d[1],v=d[2],y=d[3],b=d[4],w=d[5],_=e.split(" "),x=parseFloat(_[0])||0,T=parseFloat(_[1])||0;i?d!==En&&(a=g*y-m*v)&&(l=x*(-m/a)+T*(g/a)-(g*w-m*b)/a,x=x*(y/a)+T*(-v/a)+(v*w-y*b)/a,T=l):(x=(o=fn(t)).x+(~_[0].indexOf("%")?x/100*o.width:x),T=o.y+(~(_[1]||_[0]).indexOf("%")?T/100*o.height:T)),n||!1!==n&&c.smooth?(b=x-u,w=T-h,c.xOffset=p+(b*g+w*v)-b,c.yOffset=f+(b*m+w*y)-w):c.xOffset=c.yOffset=0,c.xOrigin=x,c.yOrigin=T,c.smooth=!!n,c.origin=e,c.originIsAbsolute=!!i,t.style[en]="0px 0px",r&&(vn(r,c,"xOrigin",u,x),vn(r,c,"yOrigin",h,T),vn(r,c,"xOffset",p,c.xOffset),vn(r,c,"yOffset",f,c.yOffset)),t.setAttribute("data-svg-origin",x+" "+T)},Pn=function(t,e){var i=t._gsap||new He(t);if("x"in i&&!e&&!i.uncache)return i;var n,s,r,o,a,l,c,d,u,h,p,f,g,m,v,y,b,_,x,T,S,C,E,k,M,O,I,A,P,L,D,z,B=t.style,R=i.scaleX<0,F="px",H="deg",G=getComputedStyle(t),Y=ln(t,en)||"0";return n=s=r=l=c=d=u=h=p=0,o=a=1,i.svg=!(!t.getCTM||!gn(t)),G.translate&&("none"===G.translate&&"none"===G.scale&&"none"===G.rotate||(B[tn]=("none"!==G.translate?"translate3d("+(G.translate+" 0 0").split(" ").slice(0,3).join(", ")+") ":"")+("none"!==G.rotate?"rotate("+G.rotate+") ":"")+("none"!==G.scale?"scale("+G.scale.split(" ").join(",")+") ":"")+("none"!==G[tn]?G[tn]:"")),B.scale=B.rotate=B.translate="none"),m=In(t,i.svg),i.svg&&(i.uncache?(M=t.getBBox(),Y=i.xOrigin-M.x+"px "+(i.yOrigin-M.y)+"px",k=""):k=!e&&t.getAttribute("data-svg-origin"),An(t,k||Y,!!k||i.originIsAbsolute,!1!==i.smooth,m)),f=i.xOrigin||0,g=i.yOrigin||0,m!==En&&(_=m[0],x=m[1],T=m[2],S=m[3],n=C=m[4],s=E=m[5],6===m.length?(o=Math.sqrt(_*_+x*x),a=Math.sqrt(S*S+T*T),l=_||x?Ri(x,_)*zi:0,(u=T||S?Ri(T,S)*zi+l:0)&&(a*=Math.abs(Math.cos(u*Bi))),i.svg&&(n-=f-(f*_+g*T),s-=g-(f*x+g*S))):(z=m[6],L=m[7],I=m[8],A=m[9],P=m[10],D=m[11],n=m[12],s=m[13],r=m[14],c=(v=Ri(z,P))*zi,v&&(k=C*(y=Math.cos(-v))+I*(b=Math.sin(-v)),M=E*y+A*b,O=z*y+P*b,I=C*-b+I*y,A=E*-b+A*y,P=z*-b+P*y,D=L*-b+D*y,C=k,E=M,z=O),d=(v=Ri(-T,P))*zi,v&&(y=Math.cos(-v),D=S*(b=Math.sin(-v))+D*y,_=k=_*y-I*b,x=M=x*y-A*b,T=O=T*y-P*b),l=(v=Ri(x,_))*zi,v&&(k=_*(y=Math.cos(v))+x*(b=Math.sin(v)),M=C*y+E*b,x=x*y-_*b,E=E*y-C*b,_=k,C=M),c&&Math.abs(c)+Math.abs(l)>359.9&&(c=l=0,d=180-d),o=gt(Math.sqrt(_*_+x*x+T*T)),a=gt(Math.sqrt(E*E+z*z)),v=Ri(C,E),u=Math.abs(v)>2e-4?v*zi:0,p=D?1/(D<0?-D:D):0),i.svg&&(k=t.getAttribute("transform"),i.forceCSS=t.setAttribute("transform","")||!Mn(ln(t,tn)),k&&t.setAttribute("transform",k))),Math.abs(u)>90&&Math.abs(u)<270&&(R?(o*=-1,u+=l<=0?180:-180,l+=l<=0?180:-180):(a*=-1,u+=u<=0?180:-180)),e=e||i.uncache,i.x=n-((i.xPercent=n&&(!e&&i.xPercent||(Math.round(t.offsetWidth/2)===Math.round(-n)?-50:0)))?t.offsetWidth*i.xPercent/100:0)+F,i.y=s-((i.yPercent=s&&(!e&&i.yPercent||(Math.round(t.offsetHeight/2)===Math.round(-s)?-50:0)))?t.offsetHeight*i.yPercent/100:0)+F,i.z=r+F,i.scaleX=gt(o),i.scaleY=gt(a),i.rotation=gt(l)+H,i.rotationX=gt(c)+H,i.rotationY=gt(d)+H,i.skewX=u+H,i.skewY=h+H,i.transformPerspective=p+F,(i.zOrigin=parseFloat(Y.split(" ")[2])||!e&&i.zOrigin||0)&&(B[en]=Ln(Y)),i.xOffset=i.yOffset=0,i.force3D=w.force3D,i.renderTransform=i.svg?Gn:Li?Hn:zn,i.uncache=0,i},Ln=function(t){return(t=t.split(" "))[0]+" "+t[1]},Dn=function(t,e,i){var n=Qt(e);return gt(parseFloat(e)+parseFloat(wn(t,"x",i+"px",n)))+n},zn=function(t,e){e.z="0px",e.rotationY=e.rotationX="0deg",e.force3D=0,Hn(t,e)},Bn="0deg",Rn="0px",Fn=") ",Hn=function(t,e){var i=e||this,n=i.xPercent,s=i.yPercent,r=i.x,o=i.y,a=i.z,l=i.rotation,c=i.rotationY,d=i.rotationX,u=i.skewX,h=i.skewY,p=i.scaleX,f=i.scaleY,g=i.transformPerspective,m=i.force3D,v=i.target,y=i.zOrigin,b="",w="auto"===m&&t&&1!==t||!0===m;if(y&&(d!==Bn||c!==Bn)){var _,x=parseFloat(c)*Bi,T=Math.sin(x),S=Math.cos(x);x=parseFloat(d)*Bi,_=Math.cos(x),r=Dn(v,r,T*_*-y),o=Dn(v,o,-Math.sin(x)*-y),a=Dn(v,a,S*_*-y+y)}g!==Rn&&(b+="perspective("+g+Fn),(n||s)&&(b+="translate("+n+"%, "+s+"%) "),(w||r!==Rn||o!==Rn||a!==Rn)&&(b+=a!==Rn||w?"translate3d("+r+", "+o+", "+a+") ":"translate("+r+", "+o+Fn),l!==Bn&&(b+="rotate("+l+Fn),c!==Bn&&(b+="rotateY("+c+Fn),d!==Bn&&(b+="rotateX("+d+Fn),u===Bn&&h===Bn||(b+="skew("+u+", "+h+Fn),1===p&&1===f||(b+="scale("+p+", "+f+Fn),v.style[tn]=b||"translate(0, 0)"},Gn=function(t,e){var i,n,s,r,o,a=e||this,l=a.xPercent,c=a.yPercent,d=a.x,u=a.y,h=a.rotation,p=a.skewX,f=a.skewY,g=a.scaleX,m=a.scaleY,v=a.target,y=a.xOrigin,b=a.yOrigin,w=a.xOffset,_=a.yOffset,x=a.forceCSS,T=parseFloat(d),S=parseFloat(u);h=parseFloat(h),p=parseFloat(p),(f=parseFloat(f))&&(p+=f=parseFloat(f),h+=f),h||p?(h*=Bi,p*=Bi,i=Math.cos(h)*g,n=Math.sin(h)*g,s=Math.sin(h-p)*-m,r=Math.cos(h-p)*m,p&&(f*=Bi,o=Math.tan(p-f),s*=o=Math.sqrt(1+o*o),r*=o,f&&(o=Math.tan(f),i*=o=Math.sqrt(1+o*o),n*=o)),i=gt(i),n=gt(n),s=gt(s),r=gt(r)):(i=g,r=m,n=s=0),(T&&!~(d+"").indexOf("px")||S&&!~(u+"").indexOf("px"))&&(T=wn(v,"x",d,"px"),S=wn(v,"y",u,"px")),(y||b||w||_)&&(T=gt(T+y-(y*i+b*s)+w),S=gt(S+b-(y*n+b*r)+_)),(l||c)&&(o=v.getBBox(),T=gt(T+l/100*o.width),S=gt(S+c/100*o.height)),o="matrix("+i+","+n+","+s+","+r+","+T+","+S+")",v.setAttribute("transform",o),x&&(v.style[tn]=o)},Yn=function(t,e,i,n,s){var r,o,a=360,l=I(s),c=parseFloat(s)*(l&&~s.indexOf("rad")?zi:1)-n,d=n+c+"deg";return l&&("short"===(r=s.split("_")[1])&&(c%=a)!==c%180&&(c+=c<0?a:-360),"cw"===r&&c<0?c=(c+36e9)%a-~~(c/a)*a:"ccw"===r&&c>0&&(c=(c-36e9)%a-~~(c/a)*a)),t._pt=o=new hi(t._pt,e,i,n,c,Ni),o.e=d,o.u="deg",t._props.push(i),o},Vn=function(t,e){for(var i in e)t[i]=e[i];return t},Nn=function(t,e,i){var n,s,r,o,a,l,c,d=Vn({},i._gsap),u=i.style;for(s in d.svg?(r=i.getAttribute("transform"),i.setAttribute("transform",""),u[tn]=e,n=Pn(i,1),mn(i,tn),i.setAttribute("transform",r)):(r=getComputedStyle(i)[tn],u[tn]=e,n=Pn(i,1),u[tn]=r),Di)(r=d[s])!==(o=n[s])&&"perspective,force3D,transformOrigin,svgOrigin".indexOf(s)<0&&(a=Qt(r)!==(c=Qt(o))?wn(i,s,r,c):parseFloat(r),l=parseFloat(o),t._pt=new hi(t._pt,n,s,a,l-a,Vi),t._pt.u=c||0,t._props.push(s));Vn(n,d)};ft("padding,margin,Width,Radius",(function(t,e){var i="Top",n="Right",s="Bottom",r="Left",o=(e<3?[i,n,s,r]:[i+r,i+n,s+n,s+r]).map((function(i){return e<2?t+i:"border"+i+t}));Cn[e>1?"border"+t:t]=function(t,e,i,n,s){var r,a;if(arguments.length<4)return r=o.map((function(e){return _n(t,e,i)})),5===(a=r.join(" ")).split(r[0]).length?r[0]:a;r=(n+"").split(" "),a={},o.forEach((function(t,e){return a[t]=r[e]=r[e]||r[(e-1)/2|0]})),t.init(e,a,s)}}));var jn,Wn,$n,Xn={name:"css",register:un,targetTest:function(t){return t.style&&t.nodeType},init:function(t,e,i,n,s){var r,o,a,l,c,d,u,h,p,f,g,m,v,y,b,_,x,T,S,C,E=this._props,k=t.style,M=i.vars.startAt;for(u in Oi||un(),this.styles=this.styles||on(t),_=this.styles.props,this.tween=i,e)if("autoRound"!==u&&(o=e[u],!ot[u]||!$e(u,e,i,n,t,s)))if(c=typeof o,d=Cn[u],"function"===c&&(c=typeof(o=o.call(i,n,t,s))),"string"===c&&~o.indexOf("random(")&&(o=de(o)),d)d(this,t,u,o,i)&&(b=1);else if("--"===u.substr(0,2))r=(getComputedStyle(t).getPropertyValue(u)+"").trim(),o+="",Te.lastIndex=0,Te.test(r)||(h=Qt(r),p=Qt(o)),p?h!==p&&(r=wn(t,u,r,p)+p):h&&(o+=h),this.add(k,"setProperty",r,o,n,s,0,0,u),E.push(u),_.push(u,0,k[u]);else if("undefined"!==c){if(M&&u in M?(r="function"==typeof M[u]?M[u].call(i,n,t,s):M[u],I(r)&&~r.indexOf("random(")&&(r=de(r)),Qt(r+"")||"auto"===r||(r+=w.units[u]||Qt(_n(t,u))||""),"="===(r+"").charAt(1)&&(r=_n(t,u))):r=_n(t,u),l=parseFloat(r),(f="string"===c&&"="===o.charAt(1)&&o.substr(0,2))&&(o=o.substr(2)),a=parseFloat(o),u in Yi&&("autoAlpha"===u&&(1===l&&"hidden"===_n(t,"visibility")&&a&&(l=0),_.push("visibility",0,k.visibility),vn(this,k,"visibility",l?"inherit":"hidden",a?"inherit":"hidden",!a)),"scale"!==u&&"transform"!==u&&~(u=Yi[u]).indexOf(",")&&(u=u.split(",")[0])),g=u in Di)if(this.styles.save(u),m||((v=t._gsap).renderTransform&&!e.parseTransform||Pn(t,e.parseTransform),y=!1!==e.smoothOrigin&&v.smooth,(m=this._pt=new hi(this._pt,k,tn,0,1,v.renderTransform,v,0,-1)).dep=1),"scale"===u)this._pt=new hi(this._pt,v,"scaleY",v.scaleY,(f?vt(v.scaleY,f+a):a)-v.scaleY||0,Vi),this._pt.u=0,E.push("scaleY",u),u+="X";else{if("transformOrigin"===u){_.push(en,0,k[en]),T=void 0,S=void 0,C=void 0,T=(x=o).split(" "),S=T[0],C=T[1]||"50%","top"!==S&&"bottom"!==S&&"left"!==C&&"right"!==C||(x=S,S=C,C=x),T[0]=Tn[S]||S,T[1]=Tn[C]||C,o=T.join(" "),v.svg?An(t,o,0,y,0,this):((p=parseFloat(o.split(" ")[2])||0)!==v.zOrigin&&vn(this,v,"zOrigin",v.zOrigin,p),vn(this,k,u,Ln(r),Ln(o)));continue}if("svgOrigin"===u){An(t,o,1,y,0,this);continue}if(u in kn){Yn(this,v,u,l,f?vt(l,f+o):o);continue}if("smoothOrigin"===u){vn(this,v,"smooth",v.smooth,o);continue}if("force3D"===u){v[u]=o;continue}if("transform"===u){Nn(this,o,t);continue}}else u in k||(u=dn(u)||u);if(g||(a||0===a)&&(l||0===l)&&!Gi.test(o)&&u in k)a||(a=0),(h=(r+"").substr((l+"").length))!==(p=Qt(o)||(u in w.units?w.units[u]:h))&&(l=wn(t,u,r,p)),this._pt=new hi(this._pt,g?v:k,u,l,(f?vt(l,f+a):a)-l,g||"px"!==p&&"zIndex"!==u||!1===e.autoRound?Vi:Wi),this._pt.u=p||0,h!==p&&"%"!==p&&(this._pt.b=r,this._pt.r=ji);else if(u in k)xn.call(this,t,u,r,f?f+o:o);else if(u in t)this.add(t,u,r||t[u],f?f+o:o,n,s);else if("parseTransform"!==u){K(u,o);continue}g||(u in k?_.push(u,0,k[u]):_.push(u,1,r||t[u])),E.push(u)}b&&ui(this)},render:function(t,e){if(e.tween._time||!Pi())for(var i=e._pt;i;)i.r(t,i.d),i=i._next;else e.styles.revert()},get:_n,aliases:Yi,getSetter:function(t,e,i){var n=Yi[e];return n&&n.indexOf(",")<0&&(e=n),e in Di&&e!==en&&(t._gsap.x||_n(t,"x"))?i&&Ai===i?"scale"===e?Zi:Ki:(Ai=i||{})&&("scale"===e?Qi:Ji):t.style&&!L(t.style[e])?qi:~e.indexOf("-")?Ui:ni(t,e)},core:{_removeProperty:mn,_getMatrix:In}};Ci.utils.checkPrefix=dn,Ci.core.getStyleSaver=on,$n=ft((jn="x,y,z,scale,scaleX,scaleY,xPercent,yPercent")+","+(Wn="rotation,rotationX,rotationY,skewX,skewY")+",transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective",(function(t){Di[t]=1})),ft(Wn,(function(t){w.units[t]="deg",kn[t]=1})),Yi[$n[13]]=jn+","+Wn,ft("0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY",(function(t){var e=t.split(":");Yi[e[1]]=$n[e[0]]})),ft("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective",(function(t){w.units[t]="px"})),Ci.registerPlugin(Xn);var qn=Ci.registerPlugin(Xn)||Ci;qn.core.Tween;function Un(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var Kn,Zn,Qn,Jn,ts,es,is,ns,ss,rs,os,as,ls,cs=function(){return Kn||"undefined"!=typeof window&&(Kn=window.gsap)&&Kn.registerPlugin&&Kn},ds=1,us=[],hs=[],ps=[],fs=Date.now,gs=function(t,e){return e},ms=function(t,e){return~ps.indexOf(t)&&ps[ps.indexOf(t)+1][e]},vs=function(t){return!!~rs.indexOf(t)},ys=function(t,e,i,n,s){return t.addEventListener(e,i,{passive:!1!==n,capture:!!s})},bs=function(t,e,i,n){return t.removeEventListener(e,i,!!n)},ws="scrollLeft",_s="scrollTop",xs=function(){return os&&os.isPressed||hs.cache++},Ts=function(t,e){var i=function i(n){if(n||0===n){ds&&(Qn.history.scrollRestoration="manual");var s=os&&os.isPressed;n=i.v=Math.round(n)||(os&&os.iOS?1:0),t(n),i.cacheID=hs.cache,s&&gs("ss",n)}else(e||hs.cache!==i.cacheID||gs("ref"))&&(i.cacheID=hs.cache,i.v=t());return i.v+i.offset};return i.offset=0,t&&i},Ss={s:ws,p:"left",p2:"Left",os:"right",os2:"Right",d:"width",d2:"Width",a:"x",sc:Ts((function(t){return arguments.length?Qn.scrollTo(t,Cs.sc()):Qn.pageXOffset||Jn[ws]||ts[ws]||es[ws]||0}))},Cs={s:_s,p:"top",p2:"Top",os:"bottom",os2:"Bottom",d:"height",d2:"Height",a:"y",op:Ss,sc:Ts((function(t){return arguments.length?Qn.scrollTo(Ss.sc(),t):Qn.pageYOffset||Jn[_s]||ts[_s]||es[_s]||0}))},Es=function(t,e){return(e&&e._ctx&&e._ctx.selector||Kn.utils.toArray)(t)[0]||("string"==typeof t&&!1!==Kn.config().nullTargetWarn?console.warn("Element not found:",t):null)},ks=function(t,e){var i=e.s,n=e.sc;vs(t)&&(t=Jn.scrollingElement||ts);var s=hs.indexOf(t),r=n===Cs.sc?1:2;!~s&&(s=hs.push(t)-1),hs[s+r]||ys(t,"scroll",xs);var o=hs[s+r],a=o||(hs[s+r]=Ts(ms(t,i),!0)||(vs(t)?n:Ts((function(e){return arguments.length?t[i]=e:t[i]}))));return a.target=t,o||(a.smooth="smooth"===Kn.getProperty(t,"scrollBehavior")),a},Ms=function(t,e,i){var n=t,s=t,r=fs(),o=r,a=e||50,l=Math.max(500,3*a),c=function(t,e){var l=fs();e||l-r>a?(s=n,n=t,o=r,r=l):i?n+=t:n=s+(t-s)/(l-o)*(r-o)};return{update:c,reset:function(){s=n=i?0:n,o=r=0},getVelocity:function(t){var e=o,a=s,d=fs();return(t||0===t)&&t!==n&&c(t),r===o||d-o>l?0:(n+(i?a:-a))/((i?d:r)-e)*1e3}}},Os=function(t,e){return e&&!t._gsapAllow&&t.preventDefault(),t.changedTouches?t.changedTouches[0]:t},Is=function(t){var e=Math.max.apply(Math,t),i=Math.min.apply(Math,t);return Math.abs(e)>=Math.abs(i)?e:i},As=function(){var t,e,i,n;(ss=Kn.core.globals().ScrollTrigger)&&ss.core&&(t=ss.core,e=t.bridge||{},i=t._scrollers,n=t._proxies,i.push.apply(i,hs),n.push.apply(n,ps),hs=i,ps=n,gs=function(t,i){return e[t](i)})},Ps=function(t){return Kn=t||cs(),!Zn&&Kn&&"undefined"!=typeof document&&document.body&&(Qn=window,Jn=document,ts=Jn.documentElement,es=Jn.body,rs=[Qn,Jn,ts,es],Kn.utils.clamp,ls=Kn.core.context||function(){},ns="onpointerenter"in es?"pointer":"mouse",is=Ls.isTouch=Qn.matchMedia&&Qn.matchMedia("(hover: none), (pointer: coarse)").matches?1:"ontouchstart"in Qn||navigator.maxTouchPoints>0||navigator.msMaxTouchPoints>0?2:0,as=Ls.eventTypes=("ontouchstart"in ts?"touchstart,touchmove,touchcancel,touchend":"onpointerdown"in ts?"pointerdown,pointermove,pointercancel,pointerup":"mousedown,mousemove,mouseup,mouseup").split(","),setTimeout((function(){return ds=0}),500),As(),Zn=1),Zn};Ss.op=Cs,hs.cache=0;var Ls=function(){function t(t){this.init(t)}var e,i,n;return t.prototype.init=function(t){Zn||Ps(Kn)||console.warn("Please gsap.registerPlugin(Observer)"),ss||As();var e=t.tolerance,i=t.dragMinimum,n=t.type,s=t.target,r=t.lineHeight,o=t.debounce,a=t.preventDefault,l=t.onStop,c=t.onStopDelay,d=t.ignore,u=t.wheelSpeed,h=t.event,p=t.onDragStart,f=t.onDragEnd,g=t.onDrag,m=t.onPress,v=t.onRelease,y=t.onRight,b=t.onLeft,w=t.onUp,_=t.onDown,x=t.onChangeX,T=t.onChangeY,S=t.onChange,C=t.onToggleX,E=t.onToggleY,k=t.onHover,M=t.onHoverEnd,O=t.onMove,I=t.ignoreCheck,A=t.isNormalizer,P=t.onGestureStart,L=t.onGestureEnd,D=t.onWheel,z=t.onEnable,B=t.onDisable,R=t.onClick,F=t.scrollSpeed,H=t.capture,G=t.allowClicks,Y=t.lockAxis,V=t.onLockAxis;this.target=s=Es(s)||ts,this.vars=t,d&&(d=Kn.utils.toArray(d)),e=e||1e-9,i=i||0,u=u||1,F=F||1,n=n||"wheel,touch,pointer",o=!1!==o,r||(r=parseFloat(Qn.getComputedStyle(es).lineHeight)||22);var N,j,W,$,X,q,U,K=this,Z=0,Q=0,J=t.passive||!a,tt=ks(s,Ss),et=ks(s,Cs),it=tt(),nt=et(),st=~n.indexOf("touch")&&!~n.indexOf("pointer")&&"pointerdown"===as[0],rt=vs(s),ot=s.ownerDocument||Jn,at=[0,0,0],lt=[0,0,0],ct=0,dt=function(){return ct=fs()},ut=function(t,e){return(K.event=t)&&d&&~d.indexOf(t.target)||e&&st&&"touch"!==t.pointerType||I&&I(t,e)},ht=function(){var t=K.deltaX=Is(at),i=K.deltaY=Is(lt),n=Math.abs(t)>=e,s=Math.abs(i)>=e;S&&(n||s)&&S(K,t,i,at,lt),n&&(y&&K.deltaX>0&&y(K),b&&K.deltaX<0&&b(K),x&&x(K),C&&K.deltaX<0!=Z<0&&C(K),Z=K.deltaX,at[0]=at[1]=at[2]=0),s&&(_&&K.deltaY>0&&_(K),w&&K.deltaY<0&&w(K),T&&T(K),E&&K.deltaY<0!=Q<0&&E(K),Q=K.deltaY,lt[0]=lt[1]=lt[2]=0),($||W)&&(O&&O(K),W&&(g(K),W=!1),$=!1),q&&!(q=!1)&&V&&V(K),X&&(D(K),X=!1),N=0},pt=function(t,e,i){at[i]+=t,lt[i]+=e,K._vx.update(t),K._vy.update(e),o?N||(N=requestAnimationFrame(ht)):ht()},ft=function(t,e){Y&&!U&&(K.axis=U=Math.abs(t)>Math.abs(e)?"x":"y",q=!0),"y"!==U&&(at[2]+=t,K._vx.update(t,!0)),"x"!==U&&(lt[2]+=e,K._vy.update(e,!0)),o?N||(N=requestAnimationFrame(ht)):ht()},gt=function(t){if(!ut(t,1)){var e=(t=Os(t,a)).clientX,n=t.clientY,s=e-K.x,r=n-K.y,o=K.isDragging;K.x=e,K.y=n,(o||Math.abs(K.startX-e)>=i||Math.abs(K.startY-n)>=i)&&(g&&(W=!0),o||(K.isDragging=!0),ft(s,r),o||p&&p(K))}},mt=K.onPress=function(t){ut(t,1)||t&&t.button||(K.axis=U=null,j.pause(),K.isPressed=!0,t=Os(t),Z=Q=0,K.startX=K.x=t.clientX,K.startY=K.y=t.clientY,K._vx.reset(),K._vy.reset(),ys(A?s:ot,as[1],gt,J,!0),K.deltaX=K.deltaY=0,m&&m(K))},vt=K.onRelease=function(t){if(!ut(t,1)){bs(A?s:ot,as[1],gt,!0);var e=!isNaN(K.y-K.startY),i=K.isDragging,n=i&&(Math.abs(K.x-K.startX)>3||Math.abs(K.y-K.startY)>3),r=Os(t);!n&&e&&(K._vx.reset(),K._vy.reset(),a&&G&&Kn.delayedCall(.08,(function(){if(fs()-ct>300&&!t.defaultPrevented)if(t.target.click)t.target.click();else if(ot.createEvent){var e=ot.createEvent("MouseEvents");e.initMouseEvent("click",!0,!0,Qn,1,r.screenX,r.screenY,r.clientX,r.clientY,!1,!1,!1,!1,0,null),t.target.dispatchEvent(e)}}))),K.isDragging=K.isGesturing=K.isPressed=!1,l&&i&&!A&&j.restart(!0),f&&i&&f(K),v&&v(K,n)}},yt=function(t){return t.touches&&t.touches.length>1&&(K.isGesturing=!0)&&P(t,K.isDragging)},bt=function(){return(K.isGesturing=!1)||L(K)},wt=function(t){if(!ut(t)){var e=tt(),i=et();pt((e-it)*F,(i-nt)*F,1),it=e,nt=i,l&&j.restart(!0)}},_t=function(t){if(!ut(t)){t=Os(t,a),D&&(X=!0);var e=(1===t.deltaMode?r:2===t.deltaMode?Qn.innerHeight:1)*u;pt(t.deltaX*e,t.deltaY*e,0),l&&!A&&j.restart(!0)}},xt=function(t){if(!ut(t)){var e=t.clientX,i=t.clientY,n=e-K.x,s=i-K.y;K.x=e,K.y=i,$=!0,l&&j.restart(!0),(n||s)&&ft(n,s)}},Tt=function(t){K.event=t,k(K)},St=function(t){K.event=t,M(K)},Ct=function(t){return ut(t)||Os(t,a)&&R(K)};j=K._dc=Kn.delayedCall(c||.25,(function(){K._vx.reset(),K._vy.reset(),j.pause(),l&&l(K)})).pause(),K.deltaX=K.deltaY=0,K._vx=Ms(0,50,!0),K._vy=Ms(0,50,!0),K.scrollX=tt,K.scrollY=et,K.isDragging=K.isGesturing=K.isPressed=!1,ls(this),K.enable=function(t){return K.isEnabled||(ys(rt?ot:s,"scroll",xs),n.indexOf("scroll")>=0&&ys(rt?ot:s,"scroll",wt,J,H),n.indexOf("wheel")>=0&&ys(s,"wheel",_t,J,H),(n.indexOf("touch")>=0&&is||n.indexOf("pointer")>=0)&&(ys(s,as[0],mt,J,H),ys(ot,as[2],vt),ys(ot,as[3],vt),G&&ys(s,"click",dt,!0,!0),R&&ys(s,"click",Ct),P&&ys(ot,"gesturestart",yt),L&&ys(ot,"gestureend",bt),k&&ys(s,ns+"enter",Tt),M&&ys(s,ns+"leave",St),O&&ys(s,ns+"move",xt)),K.isEnabled=!0,t&&t.type&&mt(t),z&&z(K)),K},K.disable=function(){K.isEnabled&&(us.filter((function(t){return t!==K&&vs(t.target)})).length||bs(rt?ot:s,"scroll",xs),K.isPressed&&(K._vx.reset(),K._vy.reset(),bs(A?s:ot,as[1],gt,!0)),bs(rt?ot:s,"scroll",wt,H),bs(s,"wheel",_t,H),bs(s,as[0],mt,H),bs(ot,as[2],vt),bs(ot,as[3],vt),bs(s,"click",dt,!0),bs(s,"click",Ct),bs(ot,"gesturestart",yt),bs(ot,"gestureend",bt),bs(s,ns+"enter",Tt),bs(s,ns+"leave",St),bs(s,ns+"move",xt),K.isEnabled=K.isPressed=K.isDragging=!1,B&&B(K))},K.kill=K.revert=function(){K.disable();var t=us.indexOf(K);t>=0&&us.splice(t,1),os===K&&(os=0)},us.push(K),A&&vs(s)&&(os=K),K.enable(h)},e=t,(i=[{key:"velocityX",get:function(){return this._vx.getVelocity()}},{key:"velocityY",get:function(){return this._vy.getVelocity()}}])&&Un(e.prototype,i),n&&Un(e,n),t}();Ls.version="3.12.5",Ls.create=function(t){return new Ls(t)},Ls.register=Ps,Ls.getAll=function(){return us.slice()},Ls.getById=function(t){return us.filter((function(e){return e.vars.id===t}))[0]},cs()&&Kn.registerPlugin(Ls);var Ds,zs,Bs,Rs,Fs,Hs,Gs,Ys,Vs,Ns,js,Ws,$s,Xs,qs,Us,Ks,Zs,Qs,Js,tr,er,ir,nr,sr,rr,or,ar,lr,cr,dr,ur,hr,pr,fr,gr,mr,vr,yr=1,br=Date.now,wr=br(),_r=0,xr=0,Tr=function(t,e,i){var n=Rr(t)&&("clamp("===t.substr(0,6)||t.indexOf("max")>-1);return i["_"+e+"Clamp"]=n,n?t.substr(6,t.length-7):t},Sr=function(t,e){return!e||Rr(t)&&"clamp("===t.substr(0,6)?t:"clamp("+t+")"},Cr=function t(){return xr&&requestAnimationFrame(t)},Er=function(){return Xs=1},kr=function(){return Xs=0},Mr=function(t){return t},Or=function(t){return Math.round(1e5*t)/1e5||0},Ir=function(){return"undefined"!=typeof window},Ar=function(){return Ds||Ir()&&(Ds=window.gsap)&&Ds.registerPlugin&&Ds},Pr=function(t){return!!~Gs.indexOf(t)},Lr=function(t){return("Height"===t?dr:Bs["inner"+t])||Fs["client"+t]||Hs["client"+t]},Dr=function(t){return ms(t,"getBoundingClientRect")||(Pr(t)?function(){return qo.width=Bs.innerWidth,qo.height=dr,qo}:function(){return oo(t)})},zr=function(t,e){var i=e.s,n=e.d2,s=e.d,r=e.a;return Math.max(0,(i="scroll"+n)&&(r=ms(t,i))?r()-Dr(t)()[s]:Pr(t)?(Fs[i]||Hs[i])-Lr(n):t[i]-t["offset"+n])},Br=function(t,e){for(var i=0;i<Qs.length;i+=3)(!e||~e.indexOf(Qs[i+1]))&&t(Qs[i],Qs[i+1],Qs[i+2])},Rr=function(t){return"string"==typeof t},Fr=function(t){return"function"==typeof t},Hr=function(t){return"number"==typeof t},Gr=function(t){return"object"==typeof t},Yr=function(t,e,i){return t&&t.progress(e?0:1)&&i&&t.pause()},Vr=function(t,e){if(t.enabled){var i=t._ctx?t._ctx.add((function(){return e(t)})):e(t);i&&i.totalTime&&(t.callbackAnimation=i)}},Nr=Math.abs,jr="left",Wr="right",$r="bottom",Xr="width",qr="height",Ur="Right",Kr="Left",Zr="Top",Qr="Bottom",Jr="padding",to="margin",eo="Width",io="Height",no="px",so=function(t){return Bs.getComputedStyle(t)},ro=function(t,e){for(var i in e)i in t||(t[i]=e[i]);return t},oo=function(t,e){var i=e&&"matrix(1, 0, 0, 1, 0, 0)"!==so(t)[qs]&&Ds.to(t,{x:0,y:0,xPercent:0,yPercent:0,rotation:0,rotationX:0,rotationY:0,scale:1,skewX:0,skewY:0}).progress(1),n=t.getBoundingClientRect();return i&&i.progress(0).kill(),n},ao=function(t,e){var i=e.d2;return t["offset"+i]||t["client"+i]||0},lo=function(t){var e,i=[],n=t.labels,s=t.duration();for(e in n)i.push(n[e]/s);return i},co=function(t){var e=Ds.utils.snap(t),i=Array.isArray(t)&&t.slice(0).sort((function(t,e){return t-e}));return i?function(t,n,s){var r;if(void 0===s&&(s=.001),!n)return e(t);if(n>0){for(t-=s,r=0;r<i.length;r++)if(i[r]>=t)return i[r];return i[r-1]}for(r=i.length,t+=s;r--;)if(i[r]<=t)return i[r];return i[0]}:function(i,n,s){void 0===s&&(s=.001);var r=e(i);return!n||Math.abs(r-i)<s||r-i<0==n<0?r:e(n<0?i-t:i+t)}},uo=function(t,e,i,n){return i.split(",").forEach((function(i){return t(e,i,n)}))},ho=function(t,e,i,n,s){return t.addEventListener(e,i,{passive:!n,capture:!!s})},po=function(t,e,i,n){return t.removeEventListener(e,i,!!n)},fo=function(t,e,i){(i=i&&i.wheelHandler)&&(t(e,"wheel",i),t(e,"touchmove",i))},go={startColor:"green",endColor:"red",indent:0,fontSize:"16px",fontWeight:"normal"},mo={toggleActions:"play",anticipatePin:0},vo={top:0,left:0,center:.5,bottom:1,right:1},yo=function(t,e){if(Rr(t)){var i=t.indexOf("="),n=~i?+(t.charAt(i-1)+1)*parseFloat(t.substr(i+1)):0;~i&&(t.indexOf("%")>i&&(n*=e/100),t=t.substr(0,i-1)),t=n+(t in vo?vo[t]*e:~t.indexOf("%")?parseFloat(t)*e/100:parseFloat(t)||0)}return t},bo=function(t,e,i,n,s,r,o,a){var l=s.startColor,c=s.endColor,d=s.fontSize,u=s.indent,h=s.fontWeight,p=Rs.createElement("div"),f=Pr(i)||"fixed"===ms(i,"pinType"),g=-1!==t.indexOf("scroller"),m=f?Hs:i,v=-1!==t.indexOf("start"),y=v?l:c,b="border-color:"+y+";font-size:"+d+";color:"+y+";font-weight:"+h+";pointer-events:none;white-space:nowrap;font-family:sans-serif,Arial;z-index:1000;padding:4px 8px;border-width:0;border-style:solid;";return b+="position:"+((g||a)&&f?"fixed;":"absolute;"),(g||a||!f)&&(b+=(n===Cs?Wr:$r)+":"+(r+parseFloat(u))+"px;"),o&&(b+="box-sizing:border-box;text-align:left;width:"+o.offsetWidth+"px;"),p._isStart=v,p.setAttribute("class","gsap-marker-"+t+(e?" marker-"+e:"")),p.style.cssText=b,p.innerText=e||0===e?t+"-"+e:t,m.children[0]?m.insertBefore(p,m.children[0]):m.appendChild(p),p._offset=p["offset"+n.op.d2],wo(p,0,n,v),p},wo=function(t,e,i,n){var s={display:"block"},r=i[n?"os2":"p2"],o=i[n?"p2":"os2"];t._isFlipped=n,s[i.a+"Percent"]=n?-100:0,s[i.a]=n?"1px":0,s["border"+r+eo]=1,s["border"+o+eo]=0,s[i.p]=e+"px",Ds.set(t,s)},_o=[],xo={},To=function(){return br()-_r>34&&(fr||(fr=requestAnimationFrame(Yo)))},So=function(){(!ir||!ir.isPressed||ir.startX>Hs.clientWidth)&&(hs.cache++,ir?fr||(fr=requestAnimationFrame(Yo)):Yo(),_r||Io("scrollStart"),_r=br())},Co=function(){rr=Bs.innerWidth,sr=Bs.innerHeight},Eo=function(){hs.cache++,!$s&&!er&&!Rs.fullscreenElement&&!Rs.webkitFullscreenElement&&(!nr||rr!==Bs.innerWidth||Math.abs(Bs.innerHeight-sr)>.25*Bs.innerHeight)&&Ys.restart(!0)},ko={},Mo=[],Oo=function t(){return po(ea,"scrollEnd",t)||Fo(!0)},Io=function(t){return ko[t]&&ko[t].map((function(t){return t()}))||Mo},Ao=[],Po=function(t){for(var e=0;e<Ao.length;e+=5)(!t||Ao[e+4]&&Ao[e+4].query===t)&&(Ao[e].style.cssText=Ao[e+1],Ao[e].getBBox&&Ao[e].setAttribute("transform",Ao[e+2]||""),Ao[e+3].uncache=1)},Lo=function(t,e){var i;for(Us=0;Us<_o.length;Us++)!(i=_o[Us])||e&&i._ctx!==e||(t?i.kill(1):i.revert(!0,!0));ur=!0,e&&Po(e),e||Io("revert")},Do=function(t,e){hs.cache++,(e||!gr)&&hs.forEach((function(t){return Fr(t)&&t.cacheID++&&(t.rec=0)})),Rr(t)&&(Bs.history.scrollRestoration=lr=t)},zo=0,Bo=function(){Hs.appendChild(cr),dr=!ir&&cr.offsetHeight||Bs.innerHeight,Hs.removeChild(cr)},Ro=function(t){return Vs(".gsap-marker-start, .gsap-marker-end, .gsap-marker-scroller-start, .gsap-marker-scroller-end").forEach((function(e){return e.style.display=t?"none":"block"}))},Fo=function(t,e){if(!_r||t||ur){Bo(),gr=ea.isRefreshing=!0,hs.forEach((function(t){return Fr(t)&&++t.cacheID&&(t.rec=t())}));var i=Io("refreshInit");Js&&ea.sort(),e||Lo(),hs.forEach((function(t){Fr(t)&&(t.smooth&&(t.target.style.scrollBehavior="auto"),t(0))})),_o.slice(0).forEach((function(t){return t.refresh()})),ur=!1,_o.forEach((function(t){if(t._subPinOffset&&t.pin){var e=t.vars.horizontal?"offsetWidth":"offsetHeight",i=t.pin[e];t.revert(!0,1),t.adjustPinSpacing(t.pin[e]-i),t.refresh()}})),hr=1,Ro(!0),_o.forEach((function(t){var e=zr(t.scroller,t._dir),i="max"===t.vars.end||t._endClamp&&t.end>e,n=t._startClamp&&t.start>=e;(i||n)&&t.setPositions(n?e-1:t.start,i?Math.max(n?e:t.start+1,e):t.end,!0)})),Ro(!1),hr=0,i.forEach((function(t){return t&&t.render&&t.render(-1)})),hs.forEach((function(t){Fr(t)&&(t.smooth&&requestAnimationFrame((function(){return t.target.style.scrollBehavior="smooth"})),t.rec&&t(t.rec))})),Do(lr,1),Ys.pause(),zo++,gr=2,Yo(2),_o.forEach((function(t){return Fr(t.vars.onRefresh)&&t.vars.onRefresh(t)})),gr=ea.isRefreshing=!1,Io("refresh")}else ho(ea,"scrollEnd",Oo)},Ho=0,Go=1,Yo=function(t){if(2===t||!gr&&!ur){ea.isUpdating=!0,vr&&vr.update(0);var e=_o.length,i=br(),n=i-wr>=50,s=e&&_o[0].scroll();if(Go=Ho>s?-1:1,gr||(Ho=s),n&&(_r&&!Xs&&i-_r>200&&(_r=0,Io("scrollEnd")),js=wr,wr=i),Go<0){for(Us=e;Us-- >0;)_o[Us]&&_o[Us].update(0,n);Go=1}else for(Us=0;Us<e;Us++)_o[Us]&&_o[Us].update(0,n);ea.isUpdating=!1}fr=0},Vo=[jr,"top",$r,Wr,to+Qr,to+Ur,to+Zr,to+Kr,"display","flexShrink","float","zIndex","gridColumnStart","gridColumnEnd","gridRowStart","gridRowEnd","gridArea","justifySelf","alignSelf","placeSelf","order"],No=Vo.concat([Xr,qr,"boxSizing","max"+eo,"max"+io,"position",to,Jr,Jr+Zr,Jr+Ur,Jr+Qr,Jr+Kr]),jo=function(t,e,i,n){if(!t._gsap.swappedIn){for(var s,r=Vo.length,o=e.style,a=t.style;r--;)o[s=Vo[r]]=i[s];o.position="absolute"===i.position?"absolute":"relative","inline"===i.display&&(o.display="inline-block"),a[$r]=a[Wr]="auto",o.flexBasis=i.flexBasis||"auto",o.overflow="visible",o.boxSizing="border-box",o[Xr]=ao(t,Ss)+no,o[qr]=ao(t,Cs)+no,o[Jr]=a[to]=a.top=a[jr]="0",$o(n),a[Xr]=a["max"+eo]=i[Xr],a[qr]=a["max"+io]=i[qr],a[Jr]=i[Jr],t.parentNode!==e&&(t.parentNode.insertBefore(e,t),e.appendChild(t)),t._gsap.swappedIn=!0}},Wo=/([A-Z])/g,$o=function(t){if(t){var e,i,n=t.t.style,s=t.length,r=0;for((t.t._gsap||Ds.core.getCache(t.t)).uncache=1;r<s;r+=2)i=t[r+1],e=t[r],i?n[e]=i:n[e]&&n.removeProperty(e.replace(Wo,"-$1").toLowerCase())}},Xo=function(t){for(var e=No.length,i=t.style,n=[],s=0;s<e;s++)n.push(No[s],i[No[s]]);return n.t=t,n},qo={left:0,top:0},Uo=function(t,e,i,n,s,r,o,a,l,c,d,u,h,p){Fr(t)&&(t=t(a)),Rr(t)&&"max"===t.substr(0,3)&&(t=u+("="===t.charAt(4)?yo("0"+t.substr(3),i):0));var f,g,m,v=h?h.time():0;if(h&&h.seek(0),isNaN(t)||(t=+t),Hr(t))h&&(t=Ds.utils.mapRange(h.scrollTrigger.start,h.scrollTrigger.end,0,u,t)),o&&wo(o,i,n,!0);else{Fr(e)&&(e=e(a));var y,b,w,_,x=(t||"0").split(" ");m=Es(e,a)||Hs,(y=oo(m)||{})&&(y.left||y.top)||"none"!==so(m).display||(_=m.style.display,m.style.display="block",y=oo(m),_?m.style.display=_:m.style.removeProperty("display")),b=yo(x[0],y[n.d]),w=yo(x[1]||"0",i),t=y[n.p]-l[n.p]-c+b+s-w,o&&wo(o,w,n,i-w<20||o._isStart&&w>20),i-=i-w}if(p&&(a[p]=t||-.001,t<0&&(t=0)),r){var T=t+i,S=r._isStart;f="scroll"+n.d2,wo(r,T,n,S&&T>20||!S&&(d?Math.max(Hs[f],Fs[f]):r.parentNode[f])<=T+1),d&&(l=oo(o),d&&(r.style[n.op.p]=l[n.op.p]-n.op.m-r._offset+no))}return h&&m&&(f=oo(m),h.seek(u),g=oo(m),h._caScrollDist=f[n.p]-g[n.p],t=t/h._caScrollDist*u),h&&h.seek(v),h?t:Math.round(t)},Ko=/(webkit|moz|length|cssText|inset)/i,Zo=function(t,e,i,n){if(t.parentNode!==e){var s,r,o=t.style;if(e===Hs){for(s in t._stOrig=o.cssText,r=so(t))+s||Ko.test(s)||!r[s]||"string"!=typeof o[s]||"0"===s||(o[s]=r[s]);o.top=i,o.left=n}else o.cssText=t._stOrig;Ds.core.getCache(t).uncache=1,e.appendChild(t)}},Qo=function(t,e,i){var n=e,s=n;return function(e){var r=Math.round(t());return r!==n&&r!==s&&Math.abs(r-n)>3&&Math.abs(r-s)>3&&(e=r,i&&i()),s=n,n=e,e}},Jo=function(t,e,i){var n={};n[e.p]="+="+i,Ds.set(t,n)},ta=function(t,e){var i=ks(t,e),n="_scroll"+e.p2,s=function e(s,r,o,a,l){var c=e.tween,d=r.onComplete,u={};o=o||i();var h=Qo(i,o,(function(){c.kill(),e.tween=0}));return l=a&&l||0,a=a||s-o,c&&c.kill(),r[n]=s,r.inherit=!1,r.modifiers=u,u[n]=function(){return h(o+a*c.ratio+l*c.ratio*c.ratio)},r.onUpdate=function(){hs.cache++,e.tween&&Yo()},r.onComplete=function(){e.tween=0,d&&d.call(c)},c=e.tween=Ds.to(t,r)};return t[n]=i,i.wheelHandler=function(){return s.tween&&s.tween.kill()&&(s.tween=0)},ho(t,"wheel",i.wheelHandler),ea.isTouch&&ho(t,"touchmove",i.wheelHandler),s},ea=function(){function t(e,i){zs||t.register(Ds)||console.warn("Please gsap.registerPlugin(ScrollTrigger)"),ar(this),this.init(e,i)}return t.prototype.init=function(e,i){if(this.progress=this.start=0,this.vars&&this.kill(!0,!0),xr){var n,s,r,o,a,l,c,d,u,h,p,f,g,m,v,y,b,w,_,x,T,S,C,E,k,M,O,I,A,P,L,D,z,B,R,F,H,G,Y,V,N,j,W=e=ro(Rr(e)||Hr(e)||e.nodeType?{trigger:e}:e,mo),$=W.onUpdate,X=W.toggleClass,q=W.id,U=W.onToggle,K=W.onRefresh,Z=W.scrub,Q=W.trigger,J=W.pin,tt=W.pinSpacing,et=W.invalidateOnRefresh,it=W.anticipatePin,nt=W.onScrubComplete,st=W.onSnapComplete,rt=W.once,ot=W.snap,at=W.pinReparent,lt=W.pinSpacer,ct=W.containerAnimation,dt=W.fastScrollEnd,ut=W.preventOverlaps,ht=e.horizontal||e.containerAnimation&&!1!==e.horizontal?Ss:Cs,pt=!Z&&0!==Z,ft=Es(e.scroller||Bs),gt=Ds.core.getCache(ft),mt=Pr(ft),vt="fixed"===("pinType"in e?e.pinType:ms(ft,"pinType")||mt&&"fixed"),yt=[e.onEnter,e.onLeave,e.onEnterBack,e.onLeaveBack],bt=pt&&e.toggleActions.split(" "),wt="markers"in e?e.markers:mo.markers,_t=mt?0:parseFloat(so(ft)["border"+ht.p2+eo])||0,xt=this,Tt=e.onRefreshInit&&function(){return e.onRefreshInit(xt)},St=function(t,e,i){var n=i.d,s=i.d2,r=i.a;return(r=ms(t,"getBoundingClientRect"))?function(){return r()[n]}:function(){return(e?Lr(s):t["client"+s])||0}}(ft,mt,ht),Ct=function(t,e){return!e||~ps.indexOf(t)?Dr(t):function(){return qo}}(ft,mt),Et=0,kt=0,Mt=0,Ot=ks(ft,ht);if(xt._startClamp=xt._endClamp=!1,xt._dir=ht,it*=45,xt.scroller=ft,xt.scroll=ct?ct.time.bind(ct):Ot,o=Ot(),xt.vars=e,i=i||e.animation,"refreshPriority"in e&&(Js=1,-9999===e.refreshPriority&&(vr=xt)),gt.tweenScroll=gt.tweenScroll||{top:ta(ft,Cs),left:ta(ft,Ss)},xt.tweenTo=n=gt.tweenScroll[ht.p],xt.scrubDuration=function(t){(z=Hr(t)&&t)?D?D.duration(t):D=Ds.to(i,{ease:"expo",totalProgress:"+=0",inherit:!1,duration:z,paused:!0,onComplete:function(){return nt&&nt(xt)}}):(D&&D.progress(1).kill(),D=0)},i&&(i.vars.lazy=!1,i._initted&&!xt.isReverted||!1!==i.vars.immediateRender&&!1!==e.immediateRender&&i.duration()&&i.render(0,!0,!0),xt.animation=i.pause(),i.scrollTrigger=xt,xt.scrubDuration(Z),P=0,q||(q=i.vars.id)),ot&&(Gr(ot)&&!ot.push||(ot={snapTo:ot}),"scrollBehavior"in Hs.style&&Ds.set(mt?[Hs,Fs]:ft,{scrollBehavior:"auto"}),hs.forEach((function(t){return Fr(t)&&t.target===(mt?Rs.scrollingElement||Fs:ft)&&(t.smooth=!1)})),r=Fr(ot.snapTo)?ot.snapTo:"labels"===ot.snapTo?function(t){return function(e){return Ds.utils.snap(lo(t),e)}}(i):"labelsDirectional"===ot.snapTo?(V=i,function(t,e){return co(lo(V))(t,e.direction)}):!1!==ot.directional?function(t,e){return co(ot.snapTo)(t,br()-kt<500?0:e.direction)}:Ds.utils.snap(ot.snapTo),B=ot.duration||{min:.1,max:2},B=Gr(B)?Ns(B.min,B.max):Ns(B,B),R=Ds.delayedCall(ot.delay||z/2||.1,(function(){var t=Ot(),e=br()-kt<500,s=n.tween;if(!(e||Math.abs(xt.getVelocity())<10)||s||Xs||Et===t)xt.isActive&&Et!==t&&R.restart(!0);else{var o,a,d=(t-l)/m,u=i&&!pt?i.totalProgress():d,h=e?0:(u-L)/(br()-js)*1e3||0,p=Ds.utils.clamp(-d,1-d,Nr(h/2)*h/.185),f=d+(!1===ot.inertia?0:p),g=ot,v=g.onStart,y=g.onInterrupt,b=g.onComplete;if(o=r(f,xt),Hr(o)||(o=f),a=Math.round(l+o*m),t<=c&&t>=l&&a!==t){if(s&&!s._initted&&s.data<=Nr(a-t))return;!1===ot.inertia&&(p=o-d),n(a,{duration:B(Nr(.185*Math.max(Nr(f-u),Nr(o-u))/h/.05||0)),ease:ot.ease||"power3",data:Nr(a-t),onInterrupt:function(){return R.restart(!0)&&y&&y(xt)},onComplete:function(){xt.update(),Et=Ot(),i&&(D?D.resetTo("totalProgress",o,i._tTime/i._tDur):i.progress(o)),P=L=i&&!pt?i.totalProgress():xt.progress,st&&st(xt),b&&b(xt)}},t,p*m,a-t-p*m),v&&v(xt,n.tween)}}})).pause()),q&&(xo[q]=xt),(Y=(Q=xt.trigger=Es(Q||!0!==J&&J))&&Q._gsap&&Q._gsap.stRevert)&&(Y=Y(xt)),J=!0===J?Q:Es(J),Rr(X)&&(X={targets:Q,className:X}),J&&(!1===tt||tt===to||(tt=!(!tt&&J.parentNode&&J.parentNode.style&&"flex"===so(J.parentNode).display)&&Jr),xt.pin=J,(s=Ds.core.getCache(J)).spacer?v=s.pinState:(lt&&((lt=Es(lt))&&!lt.nodeType&&(lt=lt.current||lt.nativeElement),s.spacerIsNative=!!lt,lt&&(s.spacerState=Xo(lt))),s.spacer=w=lt||Rs.createElement("div"),w.classList.add("pin-spacer"),q&&w.classList.add("pin-spacer-"+q),s.pinState=v=Xo(J)),!1!==e.force3D&&Ds.set(J,{force3D:!0}),xt.spacer=w=s.spacer,A=so(J),E=A[tt+ht.os2],x=Ds.getProperty(J),T=Ds.quickSetter(J,ht.a,no),jo(J,w,A),b=Xo(J)),wt){f=Gr(wt)?ro(wt,go):go,h=bo("scroller-start",q,ft,ht,f,0),p=bo("scroller-end",q,ft,ht,f,0,h),_=h["offset"+ht.op.d2];var It=Es(ms(ft,"content")||ft);d=this.markerStart=bo("start",q,It,ht,f,_,0,ct),u=this.markerEnd=bo("end",q,It,ht,f,_,0,ct),ct&&(G=Ds.quickSetter([d,u],ht.a,no)),vt||ps.length&&!0===ms(ft,"fixedMarkers")||(j=so(N=mt?Hs:ft).position,N.style.position="absolute"===j||"fixed"===j?j:"relative",Ds.set([h,p],{force3D:!0}),M=Ds.quickSetter(h,ht.a,no),I=Ds.quickSetter(p,ht.a,no))}if(ct){var At=ct.vars.onUpdate,Pt=ct.vars.onUpdateParams;ct.eventCallback("onUpdate",(function(){xt.update(0,0,1),At&&At.apply(ct,Pt||[])}))}if(xt.previous=function(){return _o[_o.indexOf(xt)-1]},xt.next=function(){return _o[_o.indexOf(xt)+1]},xt.revert=function(t,e){if(!e)return xt.kill(!0);var n=!1!==t||!xt.enabled,s=$s;n!==xt.isReverted&&(n&&(F=Math.max(Ot(),xt.scroll.rec||0),Mt=xt.progress,H=i&&i.progress()),d&&[d,u,h,p].forEach((function(t){return t.style.display=n?"none":"block"})),n&&($s=xt,xt.update(n)),!J||at&&xt.isActive||(n?function(t,e,i){$o(i);var n=t._gsap;if(n.spacerIsNative)$o(n.spacerState);else if(t._gsap.swappedIn){var s=e.parentNode;s&&(s.insertBefore(t,e),s.removeChild(e))}t._gsap.swappedIn=!1}(J,w,v):jo(J,w,so(J),k)),n||xt.update(n),$s=s,xt.isReverted=n)},xt.refresh=function(s,r,f,_){if(!$s&&xt.enabled||r)if(J&&s&&_r)ho(t,"scrollEnd",Oo);else{!gr&&Tt&&Tt(xt),$s=xt,n.tween&&!f&&(n.tween.kill(),n.tween=0),D&&D.pause(),et&&i&&i.revert({kill:!1}).invalidate(),xt.isReverted||xt.revert(!0,!0),xt._subPinOffset=!1;var T,E,M,I,A,P,L,z,B,G,Y,V,N,j=St(),W=Ct(),$=ct?ct.duration():zr(ft,ht),X=m<=.01,q=0,U=_||0,Z=Gr(f)?f.end:e.end,it=e.endTrigger||Q,nt=Gr(f)?f.start:e.start||(0!==e.start&&Q?J?"0 0":"0 100%":0),st=xt.pinnedContainer=e.pinnedContainer&&Es(e.pinnedContainer,xt),rt=Q&&Math.max(0,_o.indexOf(xt))||0,ot=rt;for(wt&&Gr(f)&&(V=Ds.getProperty(h,ht.p),N=Ds.getProperty(p,ht.p));ot--;)(P=_o[ot]).end||P.refresh(0,1)||($s=xt),!(L=P.pin)||L!==Q&&L!==J&&L!==st||P.isReverted||(G||(G=[]),G.unshift(P),P.revert(!0,!0)),P!==_o[ot]&&(rt--,ot--);for(Fr(nt)&&(nt=nt(xt)),nt=Tr(nt,"start",xt),l=Uo(nt,Q,j,ht,Ot(),d,h,xt,W,_t,vt,$,ct,xt._startClamp&&"_startClamp")||(J?-.001:0),Fr(Z)&&(Z=Z(xt)),Rr(Z)&&!Z.indexOf("+=")&&(~Z.indexOf(" ")?Z=(Rr(nt)?nt.split(" ")[0]:"")+Z:(q=yo(Z.substr(2),j),Z=Rr(nt)?nt:(ct?Ds.utils.mapRange(0,ct.duration(),ct.scrollTrigger.start,ct.scrollTrigger.end,l):l)+q,it=Q)),Z=Tr(Z,"end",xt),c=Math.max(l,Uo(Z||(it?"100% 0":$),it,j,ht,Ot()+q,u,p,xt,W,_t,vt,$,ct,xt._endClamp&&"_endClamp"))||-.001,q=0,ot=rt;ot--;)(L=(P=_o[ot]).pin)&&P.start-P._pinPush<=l&&!ct&&P.end>0&&(T=P.end-(xt._startClamp?Math.max(0,P.start):P.start),(L===Q&&P.start-P._pinPush<l||L===st)&&isNaN(nt)&&(q+=T*(1-P.progress)),L===J&&(U+=T));if(l+=q,c+=q,xt._startClamp&&(xt._startClamp+=q),xt._endClamp&&!gr&&(xt._endClamp=c||-.001,c=Math.min(c,zr(ft,ht))),m=c-l||(l-=.01)&&.001,X&&(Mt=Ds.utils.clamp(0,1,Ds.utils.normalize(l,c,F))),xt._pinPush=U,d&&q&&((T={})[ht.a]="+="+q,st&&(T[ht.p]="-="+Ot()),Ds.set([d,u],T)),!J||hr&&xt.end>=zr(ft,ht)){if(Q&&Ot()&&!ct)for(E=Q.parentNode;E&&E!==Hs;)E._pinOffset&&(l-=E._pinOffset,c-=E._pinOffset),E=E.parentNode}else T=so(J),I=ht===Cs,M=Ot(),S=parseFloat(x(ht.a))+U,!$&&c>1&&(Y={style:Y=(mt?Rs.scrollingElement||Fs:ft).style,value:Y["overflow"+ht.a.toUpperCase()]},mt&&"scroll"!==so(Hs)["overflow"+ht.a.toUpperCase()]&&(Y.style["overflow"+ht.a.toUpperCase()]="scroll")),jo(J,w,T),b=Xo(J),E=oo(J,!0),z=vt&&ks(ft,I?Ss:Cs)(),tt?((k=[tt+ht.os2,m+U+no]).t=w,(ot=tt===Jr?ao(J,ht)+m+U:0)&&(k.push(ht.d,ot+no),"auto"!==w.style.flexBasis&&(w.style.flexBasis=ot+no)),$o(k),st&&_o.forEach((function(t){t.pin===st&&!1!==t.vars.pinSpacing&&(t._subPinOffset=!0)})),vt&&Ot(F)):(ot=ao(J,ht))&&"auto"!==w.style.flexBasis&&(w.style.flexBasis=ot+no),vt&&((A={top:E.top+(I?M-l:z)+no,left:E.left+(I?z:M-l)+no,boxSizing:"border-box",position:"fixed"})[Xr]=A["max"+eo]=Math.ceil(E.width)+no,A[qr]=A["max"+io]=Math.ceil(E.height)+no,A[to]=A[to+Zr]=A[to+Ur]=A[to+Qr]=A[to+Kr]="0",A[Jr]=T[Jr],A[Jr+Zr]=T[Jr+Zr],A[Jr+Ur]=T[Jr+Ur],A[Jr+Qr]=T[Jr+Qr],A[Jr+Kr]=T[Jr+Kr],y=function(t,e,i){for(var n,s=[],r=t.length,o=i?8:0;o<r;o+=2)n=t[o],s.push(n,n in e?e[n]:t[o+1]);return s.t=t.t,s}(v,A,at),gr&&Ot(0)),i?(B=i._initted,tr(1),i.render(i.duration(),!0,!0),C=x(ht.a)-S+m+U,O=Math.abs(m-C)>1,vt&&O&&y.splice(y.length-2,2),i.render(0,!0,!0),B||i.invalidate(!0),i.parent||i.totalTime(i.totalTime()),tr(0)):C=m,Y&&(Y.value?Y.style["overflow"+ht.a.toUpperCase()]=Y.value:Y.style.removeProperty("overflow-"+ht.a));G&&G.forEach((function(t){return t.revert(!1,!0)})),xt.start=l,xt.end=c,o=a=gr?F:Ot(),ct||gr||(o<F&&Ot(F),xt.scroll.rec=0),xt.revert(!1,!0),kt=br(),R&&(Et=-1,R.restart(!0)),$s=0,i&&pt&&(i._initted||H)&&i.progress()!==H&&i.progress(H||0,!0).render(i.time(),!0,!0),(X||Mt!==xt.progress||ct||et)&&(i&&!pt&&i.totalProgress(ct&&l<-.001&&!Mt?Ds.utils.normalize(l,c,0):Mt,!0),xt.progress=X||(o-l)/m===Mt?0:Mt),J&&tt&&(w._pinOffset=Math.round(xt.progress*C)),D&&D.invalidate(),isNaN(V)||(V-=Ds.getProperty(h,ht.p),N-=Ds.getProperty(p,ht.p),Jo(h,ht,V),Jo(d,ht,V-(_||0)),Jo(p,ht,N),Jo(u,ht,N-(_||0))),X&&!gr&&xt.update(),!K||gr||g||(g=!0,K(xt),g=!1)}},xt.getVelocity=function(){return(Ot()-a)/(br()-js)*1e3||0},xt.endAnimation=function(){Yr(xt.callbackAnimation),i&&(D?D.progress(1):i.paused()?pt||Yr(i,xt.direction<0,1):Yr(i,i.reversed()))},xt.labelToScroll=function(t){return i&&i.labels&&(l||xt.refresh()||l)+i.labels[t]/i.duration()*m||0},xt.getTrailing=function(t){var e=_o.indexOf(xt),i=xt.direction>0?_o.slice(0,e).reverse():_o.slice(e+1);return(Rr(t)?i.filter((function(e){return e.vars.preventOverlaps===t})):i).filter((function(t){return xt.direction>0?t.end<=l:t.start>=c}))},xt.update=function(t,e,s){if(!ct||s||t){var r,d,u,p,f,g,v,_=!0===gr?F:xt.scroll(),x=t?0:(_-l)/m,k=x<0?0:x>1?1:x||0,A=xt.progress;if(e&&(a=o,o=ct?Ot():_,ot&&(L=P,P=i&&!pt?i.totalProgress():k)),it&&J&&!$s&&!yr&&_r&&(!k&&l<_+(_-a)/(br()-js)*it?k=1e-4:1===k&&c>_+(_-a)/(br()-js)*it&&(k=.9999)),k!==A&&xt.enabled){if(p=(f=(r=xt.isActive=!!k&&k<1)!==(!!A&&A<1))||!!k!=!!A,xt.direction=k>A?1:-1,xt.progress=k,p&&!$s&&(d=k&&!A?0:1===k?1:1===A?2:3,pt&&(u=!f&&"none"!==bt[d+1]&&bt[d+1]||bt[d],v=i&&("complete"===u||"reset"===u||u in i))),ut&&(f||v)&&(v||Z||!i)&&(Fr(ut)?ut(xt):xt.getTrailing(ut).forEach((function(t){return t.endAnimation()}))),pt||(!D||$s||yr?i&&i.totalProgress(k,!(!$s||!kt&&!t)):(D._dp._time-D._start!==D._time&&D.render(D._dp._time-D._start),D.resetTo?D.resetTo("totalProgress",k,i._tTime/i._tDur):(D.vars.totalProgress=k,D.invalidate().restart()))),J)if(t&&tt&&(w.style[tt+ht.os2]=E),vt){if(p){if(g=!t&&k>A&&c+1>_&&_+1>=zr(ft,ht),at)if(t||!r&&!g)Zo(J,w);else{var z=oo(J,!0),B=_-l;Zo(J,Hs,z.top+(ht===Cs?B:0)+no,z.left+(ht===Cs?0:B)+no)}$o(r||g?y:b),O&&k<1&&r||T(S+(1!==k||g?0:C))}}else T(Or(S+C*k));ot&&!n.tween&&!$s&&!yr&&R.restart(!0),X&&(f||rt&&k&&(k<1||!pr))&&Vs(X.targets).forEach((function(t){return t.classList[r||rt?"add":"remove"](X.className)})),$&&!pt&&!t&&$(xt),p&&!$s?(pt&&(v&&("complete"===u?i.pause().totalProgress(1):"reset"===u?i.restart(!0).pause():"restart"===u?i.restart(!0):i[u]()),$&&$(xt)),!f&&pr||(U&&f&&Vr(xt,U),yt[d]&&Vr(xt,yt[d]),rt&&(1===k?xt.kill(!1,1):yt[d]=0),f||yt[d=1===k?1:3]&&Vr(xt,yt[d])),dt&&!r&&Math.abs(xt.getVelocity())>(Hr(dt)?dt:2500)&&(Yr(xt.callbackAnimation),D?D.progress(1):Yr(i,"reverse"===u?1:!k,1))):pt&&$&&!$s&&$(xt)}if(I){var H=ct?_/ct.duration()*(ct._caScrollDist||0):_;M(H+(h._isFlipped?1:0)),I(H)}G&&G(-_/ct.duration()*(ct._caScrollDist||0))}},xt.enable=function(e,i){xt.enabled||(xt.enabled=!0,ho(ft,"resize",Eo),mt||ho(ft,"scroll",So),Tt&&ho(t,"refreshInit",Tt),!1!==e&&(xt.progress=Mt=0,o=a=Et=Ot()),!1!==i&&xt.refresh())},xt.getTween=function(t){return t&&n?n.tween:D},xt.setPositions=function(t,e,i,n){if(ct){var s=ct.scrollTrigger,r=ct.duration(),o=s.end-s.start;t=s.start+o*t/r,e=s.start+o*e/r}xt.refresh(!1,!1,{start:Sr(t,i&&!!xt._startClamp),end:Sr(e,i&&!!xt._endClamp)},n),xt.update()},xt.adjustPinSpacing=function(t){if(k&&t){var e=k.indexOf(ht.d)+1;k[e]=parseFloat(k[e])+t+no,k[1]=parseFloat(k[1])+t+no,$o(k)}},xt.disable=function(e,i){if(xt.enabled&&(!1!==e&&xt.revert(!0,!0),xt.enabled=xt.isActive=!1,i||D&&D.pause(),F=0,s&&(s.uncache=1),Tt&&po(t,"refreshInit",Tt),R&&(R.pause(),n.tween&&n.tween.kill()&&(n.tween=0)),!mt)){for(var r=_o.length;r--;)if(_o[r].scroller===ft&&_o[r]!==xt)return;po(ft,"resize",Eo),mt||po(ft,"scroll",So)}},xt.kill=function(t,n){xt.disable(t,n),D&&!n&&D.kill(),q&&delete xo[q];var r=_o.indexOf(xt);r>=0&&_o.splice(r,1),r===Us&&Go>0&&Us--,r=0,_o.forEach((function(t){return t.scroller===xt.scroller&&(r=1)})),r||gr||(xt.scroll.rec=0),i&&(i.scrollTrigger=null,t&&i.revert({kill:!1}),n||i.kill()),d&&[d,u,h,p].forEach((function(t){return t.parentNode&&t.parentNode.removeChild(t)})),vr===xt&&(vr=0),J&&(s&&(s.uncache=1),r=0,_o.forEach((function(t){return t.pin===J&&r++})),r||(s.spacer=0)),e.onKill&&e.onKill(xt)},_o.push(xt),xt.enable(!1,!1),Y&&Y(xt),i&&i.add&&!m){var Lt=xt.update;xt.update=function(){xt.update=Lt,l||c||xt.refresh()},Ds.delayedCall(.01,xt.update),m=.01,l=c=0}else xt.refresh();J&&function(){if(mr!==zo){var t=mr=zo;requestAnimationFrame((function(){return t===zo&&Fo(!0)}))}}()}else this.update=this.refresh=this.kill=Mr},t.register=function(e){return zs||(Ds=e||Ar(),Ir()&&window.document&&t.enable(),zs=xr),zs},t.defaults=function(t){if(t)for(var e in t)mo[e]=t[e];return mo},t.disable=function(t,e){xr=0,_o.forEach((function(i){return i[e?"kill":"disable"](t)})),po(Bs,"wheel",So),po(Rs,"scroll",So),clearInterval(Ws),po(Rs,"touchcancel",Mr),po(Hs,"touchstart",Mr),uo(po,Rs,"pointerdown,touchstart,mousedown",Er),uo(po,Rs,"pointerup,touchend,mouseup",kr),Ys.kill(),Br(po);for(var i=0;i<hs.length;i+=3)fo(po,hs[i],hs[i+1]),fo(po,hs[i],hs[i+2])},t.enable=function(){if(Bs=window,Rs=document,Fs=Rs.documentElement,Hs=Rs.body,Ds&&(Vs=Ds.utils.toArray,Ns=Ds.utils.clamp,ar=Ds.core.context||Mr,tr=Ds.core.suppressOverwrites||Mr,lr=Bs.history.scrollRestoration||"auto",Ho=Bs.pageYOffset,Ds.core.globals("ScrollTrigger",t),Hs)){xr=1,(cr=document.createElement("div")).style.height="100vh",cr.style.position="absolute",Bo(),Cr(),Ls.register(Ds),t.isTouch=Ls.isTouch,or=Ls.isTouch&&/(iPad|iPhone|iPod|Mac)/g.test(navigator.userAgent),nr=1===Ls.isTouch,ho(Bs,"wheel",So),Gs=[Bs,Rs,Fs,Hs],Ds.matchMedia?(t.matchMedia=function(t){var e,i=Ds.matchMedia();for(e in t)i.add(e,t[e]);return i},Ds.addEventListener("matchMediaInit",(function(){return Lo()})),Ds.addEventListener("matchMediaRevert",(function(){return Po()})),Ds.addEventListener("matchMedia",(function(){Fo(0,1),Io("matchMedia")})),Ds.matchMedia("(orientation: portrait)",(function(){return Co(),Co}))):console.warn("Requires GSAP 3.11.0 or later"),Co(),ho(Rs,"scroll",So);var e,i,n=Hs.style,s=n.borderTopStyle,r=Ds.core.Animation.prototype;for(r.revert||Object.defineProperty(r,"revert",{value:function(){return this.time(-.01,!0)}}),n.borderTopStyle="solid",e=oo(Hs),Cs.m=Math.round(e.top+Cs.sc())||0,Ss.m=Math.round(e.left+Ss.sc())||0,s?n.borderTopStyle=s:n.removeProperty("border-top-style"),Ws=setInterval(To,250),Ds.delayedCall(.5,(function(){return yr=0})),ho(Rs,"touchcancel",Mr),ho(Hs,"touchstart",Mr),uo(ho,Rs,"pointerdown,touchstart,mousedown",Er),uo(ho,Rs,"pointerup,touchend,mouseup",kr),qs=Ds.utils.checkPrefix("transform"),No.push(qs),zs=br(),Ys=Ds.delayedCall(.2,Fo).pause(),Qs=[Rs,"visibilitychange",function(){var t=Bs.innerWidth,e=Bs.innerHeight;Rs.hidden?(Ks=t,Zs=e):Ks===t&&Zs===e||Eo()},Rs,"DOMContentLoaded",Fo,Bs,"load",Fo,Bs,"resize",Eo],Br(ho),_o.forEach((function(t){return t.enable(0,1)})),i=0;i<hs.length;i+=3)fo(po,hs[i],hs[i+1]),fo(po,hs[i],hs[i+2])}},t.config=function(e){"limitCallbacks"in e&&(pr=!!e.limitCallbacks);var i=e.syncInterval;i&&clearInterval(Ws)||(Ws=i)&&setInterval(To,i),"ignoreMobileResize"in e&&(nr=1===t.isTouch&&e.ignoreMobileResize),"autoRefreshEvents"in e&&(Br(po)||Br(ho,e.autoRefreshEvents||"none"),er=-1===(e.autoRefreshEvents+"").indexOf("resize"))},t.scrollerProxy=function(t,e){var i=Es(t),n=hs.indexOf(i),s=Pr(i);~n&&hs.splice(n,s?6:2),e&&(s?ps.unshift(Bs,e,Hs,e,Fs,e):ps.unshift(i,e))},t.clearMatchMedia=function(t){_o.forEach((function(e){return e._ctx&&e._ctx.query===t&&e._ctx.kill(!0,!0)}))},t.isInViewport=function(t,e,i){var n=(Rr(t)?Es(t):t).getBoundingClientRect(),s=n[i?Xr:qr]*e||0;return i?n.right-s>0&&n.left+s<Bs.innerWidth:n.bottom-s>0&&n.top+s<Bs.innerHeight},t.positionInViewport=function(t,e,i){Rr(t)&&(t=Es(t));var n=t.getBoundingClientRect(),s=n[i?Xr:qr],r=null==e?s/2:e in vo?vo[e]*s:~e.indexOf("%")?parseFloat(e)*s/100:parseFloat(e)||0;return i?(n.left+r)/Bs.innerWidth:(n.top+r)/Bs.innerHeight},t.killAll=function(t){if(_o.slice(0).forEach((function(t){return"ScrollSmoother"!==t.vars.id&&t.kill()})),!0!==t){var e=ko.killAll||[];ko={},e.forEach((function(t){return t()}))}},t}();ea.version="3.12.5",ea.saveStyles=function(t){return t?Vs(t).forEach((function(t){if(t&&t.style){var e=Ao.indexOf(t);e>=0&&Ao.splice(e,5),Ao.push(t,t.style.cssText,t.getBBox&&t.getAttribute("transform"),Ds.core.getCache(t),ar())}})):Ao},ea.revert=function(t,e){return Lo(!t,e)},ea.create=function(t,e){return new ea(t,e)},ea.refresh=function(t){return t?Eo():(zs||ea.register())&&Fo(!0)},ea.update=function(t){return++hs.cache&&Yo(!0===t?2:0)},ea.clearScrollMemory=Do,ea.maxScroll=function(t,e){return zr(t,e?Ss:Cs)},ea.getScrollFunc=function(t,e){return ks(Es(t),e?Ss:Cs)},ea.getById=function(t){return xo[t]},ea.getAll=function(){return _o.filter((function(t){return"ScrollSmoother"!==t.vars.id}))},ea.isScrolling=function(){return!!_r},ea.snapDirectional=co,ea.addEventListener=function(t,e){var i=ko[t]||(ko[t]=[]);~i.indexOf(e)||i.push(e)},ea.removeEventListener=function(t,e){var i=ko[t],n=i&&i.indexOf(e);n>=0&&i.splice(n,1)},ea.batch=function(t,e){var i,n=[],s={},r=e.interval||.016,o=e.batchMax||1e9,a=function(t,e){var i=[],n=[],s=Ds.delayedCall(r,(function(){e(i,n),i=[],n=[]})).pause();return function(t){i.length||s.restart(!0),i.push(t.trigger),n.push(t),o<=i.length&&s.progress(1)}};for(i in e)s[i]="on"===i.substr(0,2)&&Fr(e[i])&&"onRefreshInit"!==i?a(0,e[i]):e[i];return Fr(o)&&(o=o(),ho(ea,"refresh",(function(){return o=e.batchMax()}))),Vs(t).forEach((function(t){var e={};for(i in s)e[i]=s[i];e.trigger=t,n.push(ea.create(e))})),n};var ia,na=function(t,e,i,n){return e>n?t(n):e<0&&t(0),i>n?(n-e)/(i-e):i<0?e/(e-i):1},sa=function t(e,i){!0===i?e.style.removeProperty("touch-action"):e.style.touchAction=!0===i?"auto":i?"pan-"+i+(Ls.isTouch?" pinch-zoom":""):"none",e===Fs&&t(Hs,i)},ra={auto:1,scroll:1},oa=function(t){var e,i=t.event,n=t.target,s=t.axis,r=(i.changedTouches?i.changedTouches[0]:i).target,o=r._gsap||Ds.core.getCache(r),a=br();if(!o._isScrollT||a-o._isScrollT>2e3){for(;r&&r!==Hs&&(r.scrollHeight<=r.clientHeight&&r.scrollWidth<=r.clientWidth||!ra[(e=so(r)).overflowY]&&!ra[e.overflowX]);)r=r.parentNode;o._isScroll=r&&r!==n&&!Pr(r)&&(ra[(e=so(r)).overflowY]||ra[e.overflowX]),o._isScrollT=a}(o._isScroll||"x"===s)&&(i.stopPropagation(),i._gsapAllow=!0)},aa=function(t,e,i,n){return Ls.create({target:t,capture:!0,debounce:!1,lockAxis:!0,type:e,onWheel:n=n&&oa,onPress:n,onDrag:n,onScroll:n,onEnable:function(){return i&&ho(Rs,Ls.eventTypes[0],ca,!1,!0)},onDisable:function(){return po(Rs,Ls.eventTypes[0],ca,!0)}})},la=/(input|label|select|textarea)/i,ca=function(t){var e=la.test(t.target.tagName);(e||ia)&&(t._gsapAllow=!0,ia=e)},da=function(t){Gr(t)||(t={}),t.preventDefault=t.isNormalizer=t.allowClicks=!0,t.type||(t.type="wheel,touch"),t.debounce=!!t.debounce,t.id=t.id||"normalizer";var e,i,n,s,r,o,a,l,c=t,d=c.normalizeScrollX,u=c.momentum,h=c.allowNestedScroll,p=c.onRelease,f=Es(t.target)||Fs,g=Ds.core.globals().ScrollSmoother,m=g&&g.get(),v=or&&(t.content&&Es(t.content)||m&&!1!==t.content&&!m.smooth()&&m.content()),y=ks(f,Cs),b=ks(f,Ss),w=1,_=(Ls.isTouch&&Bs.visualViewport?Bs.visualViewport.scale*Bs.visualViewport.width:Bs.outerWidth)/Bs.innerWidth,x=0,T=Fr(u)?function(){return u(e)}:function(){return u||2.8},S=aa(f,t.type,!0,h),C=function(){return s=!1},E=Mr,k=Mr,M=function(){i=zr(f,Cs),k=Ns(or?1:0,i),d&&(E=Ns(0,zr(f,Ss))),n=zo},O=function(){v._gsap.y=Or(parseFloat(v._gsap.y)+y.offset)+"px",v.style.transform="matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, "+parseFloat(v._gsap.y)+", 0, 1)",y.offset=y.cacheID=0},I=function(){M(),r.isActive()&&r.vars.scrollY>i&&(y()>i?r.progress(1)&&y(i):r.resetTo("scrollY",i))};return v&&Ds.set(v,{y:"+=0"}),t.ignoreCheck=function(t){return or&&"touchmove"===t.type&&function(){if(s){requestAnimationFrame(C);var t=Or(e.deltaY/2),i=k(y.v-t);if(v&&i!==y.v+y.offset){y.offset=i-y.v;var n=Or((parseFloat(v&&v._gsap.y)||0)-y.offset);v.style.transform="matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, "+n+", 0, 1)",v._gsap.y=n+"px",y.cacheID=hs.cache,Yo()}return!0}y.offset&&O(),s=!0}()||w>1.05&&"touchstart"!==t.type||e.isGesturing||t.touches&&t.touches.length>1},t.onPress=function(){s=!1;var t=w;w=Or((Bs.visualViewport&&Bs.visualViewport.scale||1)/_),r.pause(),t!==w&&sa(f,w>1.01||!d&&"x"),o=b(),a=y(),M(),n=zo},t.onRelease=t.onGestureStart=function(t,e){if(y.offset&&O(),e){hs.cache++;var n,s,o=T();d&&(s=(n=b())+.05*o*-t.velocityX/.227,o*=na(b,n,s,zr(f,Ss)),r.vars.scrollX=E(s)),s=(n=y())+.05*o*-t.velocityY/.227,o*=na(y,n,s,zr(f,Cs)),r.vars.scrollY=k(s),r.invalidate().duration(o).play(.01),(or&&r.vars.scrollY>=i||n>=i-1)&&Ds.to({},{onUpdate:I,duration:o})}else l.restart(!0);p&&p(t)},t.onWheel=function(){r._ts&&r.pause(),br()-x>1e3&&(n=0,x=br())},t.onChange=function(t,e,i,s,r){if(zo!==n&&M(),e&&d&&b(E(s[2]===e?o+(t.startX-t.x):b()+e-s[1])),i){y.offset&&O();var l=r[2]===i,c=l?a+t.startY-t.y:y()+i-r[1],u=k(c);l&&c!==u&&(a+=u-c),y(u)}(i||e)&&Yo()},t.onEnable=function(){sa(f,!d&&"x"),ea.addEventListener("refresh",I),ho(Bs,"resize",I),y.smooth&&(y.target.style.scrollBehavior="auto",y.smooth=b.smooth=!1),S.enable()},t.onDisable=function(){sa(f,!0),po(Bs,"resize",I),ea.removeEventListener("refresh",I),S.kill()},t.lockAxis=!1!==t.lockAxis,(e=new Ls(t)).iOS=or,or&&!y()&&y(1),or&&Ds.ticker.add(Mr),l=e._dc,r=Ds.to(e,{ease:"power4",paused:!0,inherit:!1,scrollX:d?"+=0.1":"+=0",scrollY:"+=0.1",modifiers:{scrollY:Qo(y,y(),(function(){return r.pause()}))},onUpdate:Yo,onComplete:l.vars.onComplete}),e};ea.sort=function(t){return _o.sort(t||function(t,e){return-1e6*(t.vars.refreshPriority||0)+t.start-(e.start+-1e6*(e.vars.refreshPriority||0))})},ea.observe=function(t){return new Ls(t)},ea.normalizeScroll=function(t){if(void 0===t)return ir;if(!0===t&&ir)return ir.enable();if(!1===t)return ir&&ir.kill(),void(ir=t);var e=t instanceof Ls?t:da(t);return ir&&ir.target===e.target&&ir.kill(),Pr(e.target)&&(ir=e),e},ea.core={_getVelocityProp:Ms,_inputObserver:aa,_scrollers:hs,_proxies:ps,bridge:{ss:function(){_r||Io("scrollStart"),_r=br()},ref:function(){return $s}}},Ar()&&Ds.registerPlugin(ea);qn.registerPlugin(ea);const ua=qn.matchMedia(),ha=(t,e)=>{((t,e)=>{for(var i=0;i<t.length;i++)t[i].classList.remove(e)})(e,"_is-active"),e[t]&&e[t].classList.add("_is-active")};var pa=function(){return pa=Object.assign||function(t){for(var e,i=1,n=arguments.length;i<n;i++)for(var s in e=arguments[i])Object.prototype.hasOwnProperty.call(e,s)&&(t[s]=e[s]);return t},pa.apply(this,arguments)};var fa="lgAfterAppendSlide",ga="lgInit",ma="lgHasVideo",va="lgContainerResize",ya="lgUpdateSlides",ba="lgAfterAppendSubHtml",wa="lgBeforeOpen",_a="lgAfterOpen",xa="lgSlideItemLoad",Ta="lgBeforeSlide",Sa="lgAfterSlide",Ca="lgPosterClick",Ea="lgDragStart",ka="lgDragMove",Ma="lgDragEnd",Oa="lgBeforeNextSlide",Ia="lgBeforePrevSlide",Aa="lgBeforeClose",Pa="lgAfterClose",La={mode:"lg-slide",easing:"ease",speed:400,licenseKey:"0000-0000-000-0000",height:"100%",width:"100%",addClass:"",startClass:"lg-start-zoom",backdropDuration:300,container:"",startAnimationDuration:400,zoomFromOrigin:!0,hideBarsDelay:0,showBarsAfter:1e4,slideDelay:0,supportLegacyBrowser:!0,allowMediaOverlap:!1,videoMaxSize:"1280-720",loadYouTubePoster:!0,defaultCaptionHeight:0,ariaLabelledby:"",ariaDescribedby:"",resetScrollPosition:!0,hideScrollbar:!1,closable:!0,swipeToClose:!0,closeOnTap:!0,showCloseIcon:!0,showMaximizeIcon:!1,loop:!0,escKey:!0,keyPress:!0,trapFocus:!0,controls:!0,slideEndAnimation:!0,hideControlOnEnd:!1,mousewheel:!1,getCaptionFromTitleOrAlt:!0,appendSubHtmlTo:".lg-sub-html",subHtmlSelectorRelative:!1,preload:2,numberOfSlideItemsInDom:10,selector:"",selectWithin:"",nextHtml:"",prevHtml:"",index:0,iframeWidth:"100%",iframeHeight:"100%",iframeMaxWidth:"100%",iframeMaxHeight:"100%",download:!0,counter:!0,appendCounterTo:".lg-toolbar",swipeThreshold:50,enableSwipe:!0,enableDrag:!0,dynamic:!1,dynamicEl:[],extraProps:[],exThumbImage:"",isMobile:void 0,mobileSettings:{controls:!1,showCloseIcon:!1,download:!1},plugins:[],strings:{closeGallery:"Close gallery",toggleMaximize:"Toggle maximize",previousSlide:"Previous slide",nextSlide:"Next slide",download:"Download",playVideo:"Play video",mediaLoadingFailed:"Oops... Failed to load content..."}};var Da=function(){function t(t){return this.cssVenderPrefixes=["TransitionDuration","TransitionTimingFunction","Transform","Transition"],this.selector=this._getSelector(t),this.firstElement=this._getFirstEl(),this}return t.generateUUID=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(t){var e=16*Math.random()|0;return("x"==t?e:3&e|8).toString(16)}))},t.prototype._getSelector=function(t,e){return void 0===e&&(e=document),"string"!=typeof t?t:(e=e||document,"#"===t.substring(0,1)?e.querySelector(t):e.querySelectorAll(t))},t.prototype._each=function(t){return this.selector?(void 0!==this.selector.length?[].forEach.call(this.selector,t):t(this.selector,0),this):this},t.prototype._setCssVendorPrefix=function(t,e,i){var n=e.replace(/-([a-z])/gi,(function(t,e){return e.toUpperCase()}));-1!==this.cssVenderPrefixes.indexOf(n)?(t.style[n.charAt(0).toLowerCase()+n.slice(1)]=i,t.style["webkit"+n]=i,t.style["moz"+n]=i,t.style["ms"+n]=i,t.style["o"+n]=i):t.style[n]=i},t.prototype._getFirstEl=function(){return this.selector&&void 0!==this.selector.length?this.selector[0]:this.selector},t.prototype.isEventMatched=function(t,e){var i=e.split(".");return t.split(".").filter((function(t){return t})).every((function(t){return-1!==i.indexOf(t)}))},t.prototype.attr=function(t,e){return void 0===e?this.firstElement?this.firstElement.getAttribute(t):"":(this._each((function(i){i.setAttribute(t,e)})),this)},t.prototype.find=function(t){return za(this._getSelector(t,this.selector))},t.prototype.first=function(){return this.selector&&void 0!==this.selector.length?za(this.selector[0]):za(this.selector)},t.prototype.eq=function(t){return za(this.selector[t])},t.prototype.parent=function(){return za(this.selector.parentElement)},t.prototype.get=function(){return this._getFirstEl()},t.prototype.removeAttr=function(t){var e=t.split(" ");return this._each((function(t){e.forEach((function(e){return t.removeAttribute(e)}))})),this},t.prototype.wrap=function(t){if(!this.firstElement)return this;var e=document.createElement("div");return e.className=t,this.firstElement.parentNode.insertBefore(e,this.firstElement),this.firstElement.parentNode.removeChild(this.firstElement),e.appendChild(this.firstElement),this},t.prototype.addClass=function(t){return void 0===t&&(t=""),this._each((function(e){t.split(" ").forEach((function(t){t&&e.classList.add(t)}))})),this},t.prototype.removeClass=function(t){return this._each((function(e){t.split(" ").forEach((function(t){t&&e.classList.remove(t)}))})),this},t.prototype.hasClass=function(t){return!!this.firstElement&&this.firstElement.classList.contains(t)},t.prototype.hasAttribute=function(t){return!!this.firstElement&&this.firstElement.hasAttribute(t)},t.prototype.toggleClass=function(t){return this.firstElement?(this.hasClass(t)?this.removeClass(t):this.addClass(t),this):this},t.prototype.css=function(t,e){var i=this;return this._each((function(n){i._setCssVendorPrefix(n,t,e)})),this},t.prototype.on=function(e,i){var n=this;return this.selector?(e.split(" ").forEach((function(e){Array.isArray(t.eventListeners[e])||(t.eventListeners[e]=[]),t.eventListeners[e].push(i),n.selector.addEventListener(e.split(".")[0],i)})),this):this},t.prototype.once=function(t,e){var i=this;return this.on(t,(function(){i.off(t),e(t)})),this},t.prototype.off=function(e){var i=this;return this.selector?(Object.keys(t.eventListeners).forEach((function(n){i.isEventMatched(e,n)&&(t.eventListeners[n].forEach((function(t){i.selector.removeEventListener(n.split(".")[0],t)})),t.eventListeners[n]=[])})),this):this},t.prototype.trigger=function(t,e){if(!this.firstElement)return this;var i=new CustomEvent(t.split(".")[0],{detail:e||null});return this.firstElement.dispatchEvent(i),this},t.prototype.load=function(t){var e=this;return fetch(t).then((function(t){return t.text()})).then((function(t){e.selector.innerHTML=t})),this},t.prototype.html=function(t){return void 0===t?this.firstElement?this.firstElement.innerHTML:"":(this._each((function(e){e.innerHTML=t})),this)},t.prototype.append=function(t){return this._each((function(e){"string"==typeof t?e.insertAdjacentHTML("beforeend",t):e.appendChild(t)})),this},t.prototype.prepend=function(t){return this._each((function(e){e.insertAdjacentHTML("afterbegin",t)})),this},t.prototype.remove=function(){return this._each((function(t){t.parentNode.removeChild(t)})),this},t.prototype.empty=function(){return this._each((function(t){t.innerHTML=""})),this},t.prototype.scrollTop=function(t){return void 0!==t?(document.body.scrollTop=t,document.documentElement.scrollTop=t,this):window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0},t.prototype.scrollLeft=function(t){return void 0!==t?(document.body.scrollLeft=t,document.documentElement.scrollLeft=t,this):window.pageXOffset||document.documentElement.scrollLeft||document.body.scrollLeft||0},t.prototype.offset=function(){if(!this.firstElement)return{left:0,top:0};var t=this.firstElement.getBoundingClientRect(),e=za("body").style().marginLeft;return{left:t.left-parseFloat(e)+this.scrollLeft(),top:t.top+this.scrollTop()}},t.prototype.style=function(){return this.firstElement?this.firstElement.currentStyle||window.getComputedStyle(this.firstElement):{}},t.prototype.width=function(){var t=this.style();return this.firstElement.clientWidth-parseFloat(t.paddingLeft)-parseFloat(t.paddingRight)},t.prototype.height=function(){var t=this.style();return this.firstElement.clientHeight-parseFloat(t.paddingTop)-parseFloat(t.paddingBottom)},t.eventListeners={},t}();function za(t){return function(){if("function"==typeof window.CustomEvent)return!1;window.CustomEvent=function(t,e){e=e||{bubbles:!1,cancelable:!1,detail:null};var i=document.createEvent("CustomEvent");return i.initCustomEvent(t,e.bubbles,e.cancelable,e.detail),i}}(),Element.prototype.matches||(Element.prototype.matches=Element.prototype.msMatchesSelector||Element.prototype.webkitMatchesSelector),new Da(t)}var Ba=["src","sources","subHtml","subHtmlUrl","html","video","poster","slideName","responsive","srcset","sizes","iframe","downloadUrl","download","width","facebookShareUrl","tweetText","iframeTitle","twitterShareUrl","pinterestShareUrl","pinterestText","fbHtml","disqusIdentifier","disqusUrl"];function Ra(t){return"href"===t?"src":t=(t=(t=t.replace("data-","")).charAt(0).toLowerCase()+t.slice(1)).replace(/-([a-z])/g,(function(t){return t[1].toUpperCase()}))}var Fa=function(t,e,i,n){void 0===i&&(i=0);var s=za(t).attr("data-lg-size")||n;if(s){var r=s.split(",");if(r[1])for(var o=window.innerWidth,a=0;a<r.length;a++){var l=r[a];if(parseInt(l.split("-")[2],10)>o){s=l;break}a===r.length-1&&(s=l)}var c=s.split("-"),d=parseInt(c[0],10),u=parseInt(c[1],10),h=e.width(),p=e.height()-i,f=Math.min(h,d),g=Math.min(p,u),m=Math.min(f/d,g/u);return{width:d*m,height:u*m}}},Ha=function(t,e,i,n,s){if(s){var r=za(t).find("img").first();if(r.get()){var o=e.get().getBoundingClientRect(),a=o.width,l=e.height()-(i+n),c=r.width(),d=r.height(),u=r.style(),h=(a-c)/2-r.offset().left+(parseFloat(u.paddingLeft)||0)+(parseFloat(u.borderLeft)||0)+za(window).scrollLeft()+o.left,p=(l-d)/2-r.offset().top+(parseFloat(u.paddingTop)||0)+(parseFloat(u.borderTop)||0)+za(window).scrollTop()+i;return"translate3d("+(h*=-1)+"px, "+(p*=-1)+"px, 0) scale3d("+c/s.width+", "+d/s.height+", 1)"}}},Ga=function(t,e,i,n,s,r){return'<div class="lg-video-cont lg-has-iframe" style="width:'+t+"; max-width:"+i+"; height: "+e+"; max-height:"+n+'">\n                    <iframe class="lg-object" frameborder="0" '+(r?'title="'+r+'"':"")+' src="'+s+'"  allowfullscreen="true"></iframe>\n                </div>'},Ya=function(t,e,i,n,s,r){var o="<img "+i+" "+(n?'srcset="'+n+'"':"")+"  "+(s?'sizes="'+s+'"':"")+' class="lg-object lg-image" data-index="'+t+'" src="'+e+'" />',a="";r&&(a=("string"==typeof r?JSON.parse(r):r).map((function(t){var e="";return Object.keys(t).forEach((function(i){e+=" "+i+'="'+t[i]+'"'})),"<source "+e+"></source>"})));return""+a+o},Va=function(t){for(var e=[],i=[],n="",s=0;s<t.length;s++){var r=t[s].split(" ");""===r[0]&&r.splice(0,1),i.push(r[0]),e.push(r[1])}for(var o=window.innerWidth,a=0;a<e.length;a++)if(parseInt(e[a],10)>o){n=i[a];break}return n},Na=function(t){return!!t&&(!!t.complete&&0!==t.naturalWidth)},ja=function(t,e,i,n,s){return'<div class="lg-video-cont '+(s&&s.youtube?"lg-has-youtube":s&&s.vimeo?"lg-has-vimeo":"lg-has-html5")+'" style="'+i+'">\n                <div class="lg-video-play-button">\n                <svg\n                    viewBox="0 0 20 20"\n                    preserveAspectRatio="xMidYMid"\n                    focusable="false"\n                    aria-labelledby="'+n+'"\n                    role="img"\n                    class="lg-video-play-icon"\n                >\n                    <title>'+n+'</title>\n                    <polygon class="lg-video-play-icon-inner" points="1,0 20,10 1,20"></polygon>\n                </svg>\n                <svg class="lg-video-play-icon-bg" viewBox="0 0 50 50" focusable="false">\n                    <circle cx="50%" cy="50%" r="20"></circle></svg>\n                <svg class="lg-video-play-icon-circle" viewBox="0 0 50 50" focusable="false">\n                    <circle cx="50%" cy="50%" r="20"></circle>\n                </svg>\n            </div>\n            '+(e||"")+'\n            <img class="lg-object lg-video-poster" src="'+t+'" />\n        </div>'},Wa=function(t){var e=t.querySelectorAll('a[href]:not([disabled]), button:not([disabled]), textarea:not([disabled]), input[type="text"]:not([disabled]), input[type="radio"]:not([disabled]), input[type="checkbox"]:not([disabled]), select:not([disabled])');return[].filter.call(e,(function(t){var e=window.getComputedStyle(t);return"none"!==e.display&&"hidden"!==e.visibility}))},$a=function(t,e,i,n){var s=[],r=function(){for(var t=0,e=0,i=arguments.length;e<i;e++)t+=arguments[e].length;var n=Array(t),s=0;for(e=0;e<i;e++)for(var r=arguments[e],o=0,a=r.length;o<a;o++,s++)n[s]=r[o];return n}(Ba,e);return[].forEach.call(t,(function(t){for(var e={},o=0;o<t.attributes.length;o++){var a=t.attributes[o];if(a.specified){var l=Ra(a.name),c="";r.indexOf(l)>-1&&(c=l),c&&(e[c]=a.value)}}var d=za(t),u=d.find("img").first().attr("alt"),h=d.attr("title"),p=n?d.attr(n):d.find("img").first().attr("src");e.thumb=p,i&&!e.subHtml&&(e.subHtml=h||u||""),e.alt=u||h||"",s.push(e)})),s},Xa=function(){return/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)},qa=function(t,e,i){if(!t)return e?{html5:!0}:void console.error("lightGallery :- data-src is not provided on slide item "+(i+1)+". Please make sure the selector property is properly configured. More info - https://www.lightgalleryjs.com/demos/html-markup/");var n=t.match(/\/\/(?:www\.)?youtu(?:\.be|be\.com|be-nocookie\.com)\/(?:watch\?v=|embed\/)?([a-z0-9\-\_\%]+)([\&|?][\S]*)*/i),s=t.match(/\/\/(?:www\.)?(?:player\.)?vimeo.com\/(?:video\/)?([0-9a-z\-_]+)(.*)?/i),r=t.match(/https?:\/\/(.+)?(wistia\.com|wi\.st)\/(medias|embed)\/([0-9a-z\-_]+)(.*)/);return n?{youtube:n}:s?{vimeo:s}:r?{wistia:r}:void 0},Ua=0,Ka=function(){function t(t,e){if(this.lgOpened=!1,this.index=0,this.plugins=[],this.lGalleryOn=!1,this.lgBusy=!1,this.currentItemsInDom=[],this.prevScrollTop=0,this.bodyPaddingRight=0,this.isDummyImageRemoved=!1,this.dragOrSwipeEnabled=!1,this.mediaContainerPosition={top:0,bottom:0},!t)return this;if(Ua++,this.lgId=Ua,this.el=t,this.LGel=za(t),this.generateSettings(e),this.buildModules(),this.settings.dynamic&&void 0!==this.settings.dynamicEl&&!Array.isArray(this.settings.dynamicEl))throw"When using dynamic mode, you must also define dynamicEl as an Array.";return this.galleryItems=this.getItems(),this.normalizeSettings(),this.init(),this.validateLicense(),this}return t.prototype.generateSettings=function(t){if(this.settings=pa(pa({},La),t),this.settings.isMobile&&"function"==typeof this.settings.isMobile?this.settings.isMobile():Xa()){var e=pa(pa({},this.settings.mobileSettings),this.settings.mobileSettings);this.settings=pa(pa({},this.settings),e)}},t.prototype.normalizeSettings=function(){this.settings.slideEndAnimation&&(this.settings.hideControlOnEnd=!1),this.settings.closable||(this.settings.swipeToClose=!1),this.zoomFromOrigin=this.settings.zoomFromOrigin,this.settings.dynamic&&(this.zoomFromOrigin=!1),this.settings.container||(this.settings.container=document.body),this.settings.preload=Math.min(this.settings.preload,this.galleryItems.length)},t.prototype.init=function(){var t=this;this.addSlideVideoInfo(this.galleryItems),this.buildStructure(),this.LGel.trigger(ga,{instance:this}),this.settings.keyPress&&this.keyPress(),setTimeout((function(){t.enableDrag(),t.enableSwipe(),t.triggerPosterClick()}),50),this.arrow(),this.settings.mousewheel&&this.mousewheel(),this.settings.dynamic||this.openGalleryOnItemClick()},t.prototype.openGalleryOnItemClick=function(){for(var t=this,e=function(e){var n=i.items[e],s=za(n),r=Da.generateUUID();s.attr("data-lg-id",r).on("click.lgcustom-item-"+r,(function(i){i.preventDefault();var s=t.settings.index||e;t.openGallery(s,n)}))},i=this,n=0;n<this.items.length;n++)e(n)},t.prototype.buildModules=function(){var t=this;this.settings.plugins.forEach((function(e){t.plugins.push(new e(t,za))}))},t.prototype.validateLicense=function(){this.settings.licenseKey?"0000-0000-000-0000"===this.settings.licenseKey&&console.warn("lightGallery: "+this.settings.licenseKey+" license key is not valid for production use"):console.error("Please provide a valid license key")},t.prototype.getSlideItem=function(t){return za(this.getSlideItemId(t))},t.prototype.getSlideItemId=function(t){return"#lg-item-"+this.lgId+"-"+t},t.prototype.getIdName=function(t){return t+"-"+this.lgId},t.prototype.getElementById=function(t){return za("#"+this.getIdName(t))},t.prototype.manageSingleSlideClassName=function(){this.galleryItems.length<2?this.outer.addClass("lg-single-item"):this.outer.removeClass("lg-single-item")},t.prototype.buildStructure=function(){var t=this;if(!(this.$container&&this.$container.get())){var e="",i="";this.settings.controls&&(e='<button type="button" id="'+this.getIdName("lg-prev")+'" aria-label="'+this.settings.strings.previousSlide+'" class="lg-prev lg-icon"> '+this.settings.prevHtml+' </button>\n                <button type="button" id="'+this.getIdName("lg-next")+'" aria-label="'+this.settings.strings.nextSlide+'" class="lg-next lg-icon"> '+this.settings.nextHtml+" </button>"),".lg-item"!==this.settings.appendSubHtmlTo&&(i='<div class="lg-sub-html" role="status" aria-live="polite"></div>');var n="";this.settings.allowMediaOverlap&&(n+="lg-media-overlap ");var s=this.settings.ariaLabelledby?'aria-labelledby="'+this.settings.ariaLabelledby+'"':"",r=this.settings.ariaDescribedby?'aria-describedby="'+this.settings.ariaDescribedby+'"':"",o="lg-container "+this.settings.addClass+" "+(document.body!==this.settings.container?"lg-inline":""),a=this.settings.closable&&this.settings.showCloseIcon?'<button type="button" aria-label="'+this.settings.strings.closeGallery+'" id="'+this.getIdName("lg-close")+'" class="lg-close lg-icon"></button>':"",l=this.settings.showMaximizeIcon?'<button type="button" aria-label="'+this.settings.strings.toggleMaximize+'" id="'+this.getIdName("lg-maximize")+'" class="lg-maximize lg-icon"></button>':"",c='\n        <div class="'+o+'" id="'+this.getIdName("lg-container")+'" tabindex="-1" aria-modal="true" '+s+" "+r+' role="dialog"\n        >\n            <div id="'+this.getIdName("lg-backdrop")+'" class="lg-backdrop"></div>\n\n            <div id="'+this.getIdName("lg-outer")+'" class="lg-outer lg-use-css3 lg-css3 lg-hide-items '+n+' ">\n\n              <div id="'+this.getIdName("lg-content")+'" class="lg-content">\n                <div id="'+this.getIdName("lg-inner")+'" class="lg-inner">\n                </div>\n                '+e+'\n              </div>\n                <div id="'+this.getIdName("lg-toolbar")+'" class="lg-toolbar lg-group">\n                    '+l+"\n                    "+a+"\n                    </div>\n                    "+(".lg-outer"===this.settings.appendSubHtmlTo?i:"")+'\n                <div id="'+this.getIdName("lg-components")+'" class="lg-components">\n                    '+(".lg-sub-html"===this.settings.appendSubHtmlTo?i:"")+"\n                </div>\n            </div>\n        </div>\n        ";za(this.settings.container).append(c),document.body!==this.settings.container&&za(this.settings.container).css("position","relative"),this.outer=this.getElementById("lg-outer"),this.$lgComponents=this.getElementById("lg-components"),this.$backdrop=this.getElementById("lg-backdrop"),this.$container=this.getElementById("lg-container"),this.$inner=this.getElementById("lg-inner"),this.$content=this.getElementById("lg-content"),this.$toolbar=this.getElementById("lg-toolbar"),this.$backdrop.css("transition-duration",this.settings.backdropDuration+"ms");var d=this.settings.mode+" ";this.manageSingleSlideClassName(),this.settings.enableDrag&&(d+="lg-grab "),this.outer.addClass(d),this.$inner.css("transition-timing-function",this.settings.easing),this.$inner.css("transition-duration",this.settings.speed+"ms"),this.settings.download&&this.$toolbar.append('<a id="'+this.getIdName("lg-download")+'" target="_blank" rel="noopener" aria-label="'+this.settings.strings.download+'" download class="lg-download lg-icon"></a>'),this.counter(),za(window).on("resize.lg.global"+this.lgId+" orientationchange.lg.global"+this.lgId,(function(){t.refreshOnResize()})),this.hideBars(),this.manageCloseGallery(),this.toggleMaximize(),this.initModules()}},t.prototype.refreshOnResize=function(){if(this.lgOpened){var t=this.galleryItems[this.index].__slideVideoInfo;this.mediaContainerPosition=this.getMediaContainerPosition();var e=this.mediaContainerPosition,i=e.top,n=e.bottom;if(this.currentImageSize=Fa(this.items[this.index],this.outer,i+n,t&&this.settings.videoMaxSize),t&&this.resizeVideoSlide(this.index,this.currentImageSize),this.zoomFromOrigin&&!this.isDummyImageRemoved){var s=this.getDummyImgStyles(this.currentImageSize);this.outer.find(".lg-current .lg-dummy-img").first().attr("style",s)}this.LGel.trigger(va)}},t.prototype.resizeVideoSlide=function(t,e){var i=this.getVideoContStyle(e);this.getSlideItem(t).find(".lg-video-cont").attr("style",i)},t.prototype.updateSlides=function(t,e){if(this.index>t.length-1&&(this.index=t.length-1),1===t.length&&(this.index=0),t.length){var i=this.galleryItems[e].src;this.galleryItems=t,this.updateControls(),this.$inner.empty(),this.currentItemsInDom=[];var n=0;this.galleryItems.some((function(t,e){return t.src===i&&(n=e,!0)})),this.currentItemsInDom=this.organizeSlideItems(n,-1),this.loadContent(n,!0),this.getSlideItem(n).addClass("lg-current"),this.index=n,this.updateCurrentCounter(n),this.LGel.trigger(ya)}else this.closeGallery()},t.prototype.getItems=function(){if(this.items=[],this.settings.dynamic)return this.settings.dynamicEl||[];if("this"===this.settings.selector)this.items.push(this.el);else if(this.settings.selector)if("string"==typeof this.settings.selector)if(this.settings.selectWithin){var t=za(this.settings.selectWithin);this.items=t.find(this.settings.selector).get()}else this.items=this.el.querySelectorAll(this.settings.selector);else this.items=this.settings.selector;else this.items=this.el.children;return $a(this.items,this.settings.extraProps,this.settings.getCaptionFromTitleOrAlt,this.settings.exThumbImage)},t.prototype.shouldHideScrollbar=function(){return this.settings.hideScrollbar&&document.body===this.settings.container},t.prototype.hideScrollbar=function(){if(this.shouldHideScrollbar()){this.bodyPaddingRight=parseFloat(za("body").style().paddingRight);var t=document.documentElement.getBoundingClientRect(),e=window.innerWidth-t.width;za(document.body).css("padding-right",e+this.bodyPaddingRight+"px"),za(document.body).addClass("lg-overlay-open")}},t.prototype.resetScrollBar=function(){this.shouldHideScrollbar()&&(za(document.body).css("padding-right",this.bodyPaddingRight+"px"),za(document.body).removeClass("lg-overlay-open"))},t.prototype.openGallery=function(t,e){var i=this;if(void 0===t&&(t=this.settings.index),!this.lgOpened){this.lgOpened=!0,this.outer.removeClass("lg-hide-items"),this.hideScrollbar(),this.$container.addClass("lg-show");var n=this.getItemsToBeInsertedToDom(t,t);this.currentItemsInDom=n;var s="";n.forEach((function(t){s=s+'<div id="'+t+'" class="lg-item"></div>'})),this.$inner.append(s),this.addHtml(t);var r="";this.mediaContainerPosition=this.getMediaContainerPosition();var o=this.mediaContainerPosition,a=o.top,l=o.bottom;this.settings.allowMediaOverlap||this.setMediaContainerPosition(a,l);var c=this.galleryItems[t].__slideVideoInfo;this.zoomFromOrigin&&e&&(this.currentImageSize=Fa(e,this.outer,a+l,c&&this.settings.videoMaxSize),r=Ha(e,this.outer,a,l,this.currentImageSize)),this.zoomFromOrigin&&r||(this.outer.addClass(this.settings.startClass),this.getSlideItem(t).removeClass("lg-complete"));var d=this.settings.zoomFromOrigin?100:this.settings.backdropDuration;setTimeout((function(){i.outer.addClass("lg-components-open")}),d),this.index=t,this.LGel.trigger(wa),this.getSlideItem(t).addClass("lg-current"),this.lGalleryOn=!1,this.prevScrollTop=za(window).scrollTop(),setTimeout((function(){if(i.zoomFromOrigin&&r){var e=i.getSlideItem(t);e.css("transform",r),setTimeout((function(){e.addClass("lg-start-progress lg-start-end-progress").css("transition-duration",i.settings.startAnimationDuration+"ms"),i.outer.addClass("lg-zoom-from-image")})),setTimeout((function(){e.css("transform","translate3d(0, 0, 0)")}),100)}setTimeout((function(){i.$backdrop.addClass("in"),i.$container.addClass("lg-show-in")}),10),setTimeout((function(){i.settings.trapFocus&&document.body===i.settings.container&&i.trapFocus()}),i.settings.backdropDuration+50),i.zoomFromOrigin&&r||setTimeout((function(){i.outer.addClass("lg-visible")}),i.settings.backdropDuration),i.slide(t,!1,!1,!1),i.LGel.trigger(_a)})),document.body===this.settings.container&&za("html").addClass("lg-on")}},t.prototype.getMediaContainerPosition=function(){if(this.settings.allowMediaOverlap)return{top:0,bottom:0};var t=this.$toolbar.get().clientHeight||0,e=this.outer.find(".lg-components .lg-sub-html").get(),i=this.settings.defaultCaptionHeight||e&&e.clientHeight||0,n=this.outer.find(".lg-thumb-outer").get();return{top:t,bottom:(n?n.clientHeight:0)+i}},t.prototype.setMediaContainerPosition=function(t,e){void 0===t&&(t=0),void 0===e&&(e=0),this.$content.css("top",t+"px").css("bottom",e+"px")},t.prototype.hideBars=function(){var t=this;setTimeout((function(){t.outer.removeClass("lg-hide-items"),t.settings.hideBarsDelay>0&&(t.outer.on("mousemove.lg click.lg touchstart.lg",(function(){t.outer.removeClass("lg-hide-items"),clearTimeout(t.hideBarTimeout),t.hideBarTimeout=setTimeout((function(){t.outer.addClass("lg-hide-items")}),t.settings.hideBarsDelay)})),t.outer.trigger("mousemove.lg"))}),this.settings.showBarsAfter)},t.prototype.initPictureFill=function(t){if(this.settings.supportLegacyBrowser)try{picturefill({elements:[t.get()]})}catch(t){console.warn("lightGallery :- If you want srcset or picture tag to be supported for older browser please include picturefil javascript library in your document.")}},t.prototype.counter=function(){if(this.settings.counter){var t='<div class="lg-counter" role="status" aria-live="polite">\n                <span id="'+this.getIdName("lg-counter-current")+'" class="lg-counter-current">'+(this.index+1)+' </span> /\n                <span id="'+this.getIdName("lg-counter-all")+'" class="lg-counter-all">'+this.galleryItems.length+" </span></div>";this.outer.find(this.settings.appendCounterTo).append(t)}},t.prototype.addHtml=function(t){var e,i;if(this.galleryItems[t].subHtmlUrl?i=this.galleryItems[t].subHtmlUrl:e=this.galleryItems[t].subHtml,!i)if(e){var n=e.substring(0,1);"."!==n&&"#"!==n||(e=this.settings.subHtmlSelectorRelative&&!this.settings.dynamic?za(this.items).eq(t).find(e).first().html():za(e).first().html())}else e="";if(".lg-item"!==this.settings.appendSubHtmlTo)i?this.outer.find(".lg-sub-html").load(i):this.outer.find(".lg-sub-html").html(e);else{var s=za(this.getSlideItemId(t));i?s.load(i):s.append('<div class="lg-sub-html">'+e+"</div>")}null!=e&&(""===e?this.outer.find(this.settings.appendSubHtmlTo).addClass("lg-empty-html"):this.outer.find(this.settings.appendSubHtmlTo).removeClass("lg-empty-html")),this.LGel.trigger(ba,{index:t})},t.prototype.preload=function(t){for(var e=1;e<=this.settings.preload&&!(e>=this.galleryItems.length-t);e++)this.loadContent(t+e,!1);for(var i=1;i<=this.settings.preload&&!(t-i<0);i++)this.loadContent(t-i,!1)},t.prototype.getDummyImgStyles=function(t){return t?"width:"+t.width+"px;\n                margin-left: -"+t.width/2+"px;\n                margin-top: -"+t.height/2+"px;\n                height:"+t.height+"px":""},t.prototype.getVideoContStyle=function(t){return t?"width:"+t.width+"px;\n                height:"+t.height+"px":""},t.prototype.getDummyImageContent=function(t,e,i){var n;if(this.settings.dynamic||(n=za(this.items).eq(e)),n){var s=void 0;if(!(s=this.settings.exThumbImage?n.attr(this.settings.exThumbImage):n.find("img").first().attr("src")))return"";var r="<img "+i+' style="'+this.getDummyImgStyles(this.currentImageSize)+'" class="lg-dummy-img" src="'+s+'" />';return t.addClass("lg-first-slide"),this.outer.addClass("lg-first-slide-loading"),r}return""},t.prototype.setImgMarkup=function(t,e,i){var n=this.galleryItems[i],s=n.alt,r=n.srcset,o=n.sizes,a=n.sources,l=s?'alt="'+s+'"':"",c='<picture class="lg-img-wrap"> '+(this.isFirstSlideWithZoomAnimation()?this.getDummyImageContent(e,i,l):Ya(i,t,l,r,o,a))+"</picture>";e.prepend(c)},t.prototype.onSlideObjectLoad=function(t,e,i,n){var s=t.find(".lg-object").first();Na(s.get())||e?i():(s.on("load.lg error.lg",(function(){i&&i()})),s.on("error.lg",(function(){n&&n()})))},t.prototype.onLgObjectLoad=function(t,e,i,n,s,r){var o=this;this.onSlideObjectLoad(t,r,(function(){o.triggerSlideItemLoad(t,e,i,n,s)}),(function(){t.addClass("lg-complete lg-complete_"),t.html('<span class="lg-error-msg">'+o.settings.strings.mediaLoadingFailed+"</span>")}))},t.prototype.triggerSlideItemLoad=function(t,e,i,n,s){var r=this,o=this.galleryItems[e],a=s&&"video"===this.getSlideType(o)&&!o.poster?n:0;setTimeout((function(){t.addClass("lg-complete lg-complete_"),r.LGel.trigger(xa,{index:e,delay:i||0,isFirstSlide:s})}),a)},t.prototype.isFirstSlideWithZoomAnimation=function(){return!(this.lGalleryOn||!this.zoomFromOrigin||!this.currentImageSize)},t.prototype.addSlideVideoInfo=function(t){var e=this;t.forEach((function(t,i){t.__slideVideoInfo=qa(t.src,!!t.video,i),t.__slideVideoInfo&&e.settings.loadYouTubePoster&&!t.poster&&t.__slideVideoInfo.youtube&&(t.poster="//img.youtube.com/vi/"+t.__slideVideoInfo.youtube[1]+"/maxresdefault.jpg")}))},t.prototype.loadContent=function(t,e){var i=this,n=this.galleryItems[t],s=za(this.getSlideItemId(t)),r=n.poster,o=n.srcset,a=n.sizes,l=n.sources,c=n.src,d=n.video,u=d&&"string"==typeof d?JSON.parse(d):d;if(n.responsive){var h=n.responsive.split(",");c=Va(h)||c}var p=n.__slideVideoInfo,f="",g=!!n.iframe,m=!this.lGalleryOn,v=0;if(m&&(v=this.zoomFromOrigin&&this.currentImageSize?this.settings.startAnimationDuration+10:this.settings.backdropDuration+10),!s.hasClass("lg-loaded")){if(p){var y=this.mediaContainerPosition,b=y.top,w=y.bottom,_=Fa(this.items[t],this.outer,b+w,p&&this.settings.videoMaxSize);f=this.getVideoContStyle(_)}if(g){var x=Ga(this.settings.iframeWidth,this.settings.iframeHeight,this.settings.iframeMaxWidth,this.settings.iframeMaxHeight,c,n.iframeTitle);s.prepend(x)}else if(r){var T="";m&&this.zoomFromOrigin&&this.currentImageSize&&(T=this.getDummyImageContent(s,t,""));x=ja(r,T||"",f,this.settings.strings.playVideo,p);s.prepend(x)}else if(p){x='<div class="lg-video-cont " style="'+f+'"></div>';s.prepend(x)}else if(this.setImgMarkup(c,s,t),o||l){var S=s.find(".lg-object");this.initPictureFill(S)}(r||p)&&this.LGel.trigger(ma,{index:t,src:c,html5Video:u,hasPoster:!!r}),this.LGel.trigger(fa,{index:t}),this.lGalleryOn&&".lg-item"===this.settings.appendSubHtmlTo&&this.addHtml(t)}var C=0;v&&!za(document.body).hasClass("lg-from-hash")&&(C=v),this.isFirstSlideWithZoomAnimation()&&(setTimeout((function(){s.removeClass("lg-start-end-progress lg-start-progress").removeAttr("style")}),this.settings.startAnimationDuration+100),s.hasClass("lg-loaded")||setTimeout((function(){if("image"===i.getSlideType(n)){var e=n.alt,d=e?'alt="'+e+'"':"";if(s.find(".lg-img-wrap").append(Ya(t,c,d,o,a,n.sources)),o||l){var u=s.find(".lg-object");i.initPictureFill(u)}}("image"===i.getSlideType(n)||"video"===i.getSlideType(n)&&r)&&(i.onLgObjectLoad(s,t,v,C,!0,!1),i.onSlideObjectLoad(s,!(!p||!p.html5||r),(function(){i.loadContentOnFirstSlideLoad(t,s,C)}),(function(){i.loadContentOnFirstSlideLoad(t,s,C)})))}),this.settings.startAnimationDuration+100)),s.addClass("lg-loaded"),this.isFirstSlideWithZoomAnimation()&&("video"!==this.getSlideType(n)||r)||this.onLgObjectLoad(s,t,v,C,m,!(!p||!p.html5||r)),this.zoomFromOrigin&&this.currentImageSize||!s.hasClass("lg-complete_")||this.lGalleryOn||setTimeout((function(){s.addClass("lg-complete")}),this.settings.backdropDuration),this.lGalleryOn=!0,!0===e&&(s.hasClass("lg-complete_")?this.preload(t):s.find(".lg-object").first().on("load.lg error.lg",(function(){i.preload(t)})))},t.prototype.loadContentOnFirstSlideLoad=function(t,e,i){var n=this;setTimeout((function(){e.find(".lg-dummy-img").remove(),e.removeClass("lg-first-slide"),n.outer.removeClass("lg-first-slide-loading"),n.isDummyImageRemoved=!0,n.preload(t)}),i+300)},t.prototype.getItemsToBeInsertedToDom=function(t,e,i){var n=this;void 0===i&&(i=0);var s=[],r=Math.max(i,3);r=Math.min(r,this.galleryItems.length);var o="lg-item-"+this.lgId+"-"+e;if(this.galleryItems.length<=3)return this.galleryItems.forEach((function(t,e){s.push("lg-item-"+n.lgId+"-"+e)})),s;if(t<(this.galleryItems.length-1)/2){for(var a=t;a>t-r/2&&a>=0;a--)s.push("lg-item-"+this.lgId+"-"+a);var l=s.length;for(a=0;a<r-l;a++)s.push("lg-item-"+this.lgId+"-"+(t+a+1))}else{for(a=t;a<=this.galleryItems.length-1&&a<t+r/2;a++)s.push("lg-item-"+this.lgId+"-"+a);for(l=s.length,a=0;a<r-l;a++)s.push("lg-item-"+this.lgId+"-"+(t-a-1))}return this.settings.loop&&(t===this.galleryItems.length-1?s.push("lg-item-"+this.lgId+"-0"):0===t&&s.push("lg-item-"+this.lgId+"-"+(this.galleryItems.length-1))),-1===s.indexOf(o)&&s.push("lg-item-"+this.lgId+"-"+e),s},t.prototype.organizeSlideItems=function(t,e){var i=this,n=this.getItemsToBeInsertedToDom(t,e,this.settings.numberOfSlideItemsInDom);return n.forEach((function(t){-1===i.currentItemsInDom.indexOf(t)&&i.$inner.append('<div id="'+t+'" class="lg-item"></div>')})),this.currentItemsInDom.forEach((function(t){-1===n.indexOf(t)&&za("#"+t).remove()})),n},t.prototype.getPreviousSlideIndex=function(){var t=0;try{var e=this.outer.find(".lg-current").first().attr("id");t=parseInt(e.split("-")[3])||0}catch(e){t=0}return t},t.prototype.setDownloadValue=function(t){if(this.settings.download){var e=this.galleryItems[t];if(!1===e.downloadUrl||"false"===e.downloadUrl)this.outer.addClass("lg-hide-download");else{var i=this.getElementById("lg-download");this.outer.removeClass("lg-hide-download"),i.attr("href",e.downloadUrl||e.src),e.download&&i.attr("download",e.download)}}},t.prototype.makeSlideAnimation=function(t,e,i){var n=this;this.lGalleryOn&&i.addClass("lg-slide-progress"),setTimeout((function(){n.outer.addClass("lg-no-trans"),n.outer.find(".lg-item").removeClass("lg-prev-slide lg-next-slide"),"prev"===t?(e.addClass("lg-prev-slide"),i.addClass("lg-next-slide")):(e.addClass("lg-next-slide"),i.addClass("lg-prev-slide")),setTimeout((function(){n.outer.find(".lg-item").removeClass("lg-current"),e.addClass("lg-current"),n.outer.removeClass("lg-no-trans")}),50)}),this.lGalleryOn?this.settings.slideDelay:0)},t.prototype.slide=function(t,e,i,n){var s=this,r=this.getPreviousSlideIndex();if(this.currentItemsInDom=this.organizeSlideItems(t,r),!this.lGalleryOn||r!==t){var o=this.galleryItems.length;if(!this.lgBusy){this.settings.counter&&this.updateCurrentCounter(t);var a=this.getSlideItem(t),l=this.getSlideItem(r),c=this.galleryItems[t],d=c.__slideVideoInfo;if(this.outer.attr("data-lg-slide-type",this.getSlideType(c)),this.setDownloadValue(t),d){var u=this.mediaContainerPosition,h=u.top,p=u.bottom,f=Fa(this.items[t],this.outer,h+p,d&&this.settings.videoMaxSize);this.resizeVideoSlide(t,f)}if(this.LGel.trigger(Ta,{prevIndex:r,index:t,fromTouch:!!e,fromThumb:!!i}),this.lgBusy=!0,clearTimeout(this.hideBarTimeout),this.arrowDisable(t),n||(t<r?n="prev":t>r&&(n="next")),e){this.outer.find(".lg-item").removeClass("lg-prev-slide lg-current lg-next-slide");var g=void 0,m=void 0;o>2?(g=t-1,m=t+1,(0===t&&r===o-1||t===o-1&&0===r)&&(m=0,g=o-1)):(g=0,m=1),"prev"===n?this.getSlideItem(m).addClass("lg-next-slide"):this.getSlideItem(g).addClass("lg-prev-slide"),a.addClass("lg-current")}else this.makeSlideAnimation(n,a,l);this.lGalleryOn?setTimeout((function(){s.loadContent(t,!0),".lg-item"!==s.settings.appendSubHtmlTo&&s.addHtml(t)}),this.settings.speed+50+(e?0:this.settings.slideDelay)):this.loadContent(t,!0),setTimeout((function(){s.lgBusy=!1,l.removeClass("lg-slide-progress"),s.LGel.trigger(Sa,{prevIndex:r,index:t,fromTouch:e,fromThumb:i})}),(this.lGalleryOn?this.settings.speed+100:100)+(e?0:this.settings.slideDelay))}this.index=t}},t.prototype.updateCurrentCounter=function(t){this.getElementById("lg-counter-current").html(t+1+"")},t.prototype.updateCounterTotal=function(){this.getElementById("lg-counter-all").html(this.galleryItems.length+"")},t.prototype.getSlideType=function(t){return t.__slideVideoInfo?"video":t.iframe?"iframe":"image"},t.prototype.touchMove=function(t,e,i){var n=e.pageX-t.pageX,s=e.pageY-t.pageY,r=!1;if(this.swipeDirection?r=!0:Math.abs(n)>15?(this.swipeDirection="horizontal",r=!0):Math.abs(s)>15&&(this.swipeDirection="vertical",r=!0),r){var o=this.getSlideItem(this.index);if("horizontal"===this.swipeDirection){null==i||i.preventDefault(),this.outer.addClass("lg-dragging"),this.setTranslate(o,n,0);var a=o.get().offsetWidth,l=15*a/100-Math.abs(10*n/100);this.setTranslate(this.outer.find(".lg-prev-slide").first(),-a+n-l,0),this.setTranslate(this.outer.find(".lg-next-slide").first(),a+n+l,0)}else if("vertical"===this.swipeDirection&&this.settings.swipeToClose){null==i||i.preventDefault(),this.$container.addClass("lg-dragging-vertical");var c=1-Math.abs(s)/window.innerHeight;this.$backdrop.css("opacity",c);var d=1-Math.abs(s)/(2*window.innerWidth);this.setTranslate(o,0,s,d,d),Math.abs(s)>100&&this.outer.addClass("lg-hide-items").removeClass("lg-components-open")}}},t.prototype.touchEnd=function(t,e,i){var n,s=this;"lg-slide"!==this.settings.mode&&this.outer.addClass("lg-slide"),setTimeout((function(){s.$container.removeClass("lg-dragging-vertical"),s.outer.removeClass("lg-dragging lg-hide-items").addClass("lg-components-open");var r=!0;if("horizontal"===s.swipeDirection){n=t.pageX-e.pageX;var o=Math.abs(t.pageX-e.pageX);n<0&&o>s.settings.swipeThreshold?(s.goToNextSlide(!0),r=!1):n>0&&o>s.settings.swipeThreshold&&(s.goToPrevSlide(!0),r=!1)}else if("vertical"===s.swipeDirection){if(n=Math.abs(t.pageY-e.pageY),s.settings.closable&&s.settings.swipeToClose&&n>100)return void s.closeGallery();s.$backdrop.css("opacity",1)}if(s.outer.find(".lg-item").removeAttr("style"),r&&Math.abs(t.pageX-e.pageX)<5){var a=za(i.target);s.isPosterElement(a)&&s.LGel.trigger(Ca)}s.swipeDirection=void 0})),setTimeout((function(){s.outer.hasClass("lg-dragging")||"lg-slide"===s.settings.mode||s.outer.removeClass("lg-slide")}),this.settings.speed+100)},t.prototype.enableSwipe=function(){var t=this,e={},i={},n=!1,s=!1;this.settings.enableSwipe&&(this.$inner.on("touchstart.lg",(function(i){t.dragOrSwipeEnabled=!0;var n=t.getSlideItem(t.index);!za(i.target).hasClass("lg-item")&&!n.get().contains(i.target)||t.outer.hasClass("lg-zoomed")||t.lgBusy||1!==i.touches.length||(s=!0,t.touchAction="swipe",t.manageSwipeClass(),e={pageX:i.touches[0].pageX,pageY:i.touches[0].pageY})})),this.$inner.on("touchmove.lg",(function(r){s&&"swipe"===t.touchAction&&1===r.touches.length&&(i={pageX:r.touches[0].pageX,pageY:r.touches[0].pageY},t.touchMove(e,i,r),n=!0)})),this.$inner.on("touchend.lg",(function(r){if("swipe"===t.touchAction){if(n)n=!1,t.touchEnd(i,e,r);else if(s){var o=za(r.target);t.isPosterElement(o)&&t.LGel.trigger(Ca)}t.touchAction=void 0,s=!1}})))},t.prototype.enableDrag=function(){var t=this,e={},i={},n=!1,s=!1;this.settings.enableDrag&&(this.outer.on("mousedown.lg",(function(i){t.dragOrSwipeEnabled=!0;var s=t.getSlideItem(t.index);(za(i.target).hasClass("lg-item")||s.get().contains(i.target))&&(t.outer.hasClass("lg-zoomed")||t.lgBusy||(i.preventDefault(),t.lgBusy||(t.manageSwipeClass(),e={pageX:i.pageX,pageY:i.pageY},n=!0,t.outer.get().scrollLeft+=1,t.outer.get().scrollLeft-=1,t.outer.removeClass("lg-grab").addClass("lg-grabbing"),t.LGel.trigger(Ea))))})),za(window).on("mousemove.lg.global"+this.lgId,(function(r){n&&t.lgOpened&&(s=!0,i={pageX:r.pageX,pageY:r.pageY},t.touchMove(e,i),t.LGel.trigger(ka))})),za(window).on("mouseup.lg.global"+this.lgId,(function(r){if(t.lgOpened){var o=za(r.target);s?(s=!1,t.touchEnd(i,e,r),t.LGel.trigger(Ma)):t.isPosterElement(o)&&t.LGel.trigger(Ca),n&&(n=!1,t.outer.removeClass("lg-grabbing").addClass("lg-grab"))}})))},t.prototype.triggerPosterClick=function(){var t=this;this.$inner.on("click.lg",(function(e){!t.dragOrSwipeEnabled&&t.isPosterElement(za(e.target))&&t.LGel.trigger(Ca)}))},t.prototype.manageSwipeClass=function(){var t=this.index+1,e=this.index-1;this.settings.loop&&this.galleryItems.length>2&&(0===this.index?e=this.galleryItems.length-1:this.index===this.galleryItems.length-1&&(t=0)),this.outer.find(".lg-item").removeClass("lg-next-slide lg-prev-slide"),e>-1&&this.getSlideItem(e).addClass("lg-prev-slide"),this.getSlideItem(t).addClass("lg-next-slide")},t.prototype.goToNextSlide=function(t){var e=this,i=this.settings.loop;t&&this.galleryItems.length<3&&(i=!1),this.lgBusy||(this.index+1<this.galleryItems.length?(this.index++,this.LGel.trigger(Oa,{index:this.index}),this.slide(this.index,!!t,!1,"next")):i?(this.index=0,this.LGel.trigger(Oa,{index:this.index}),this.slide(this.index,!!t,!1,"next")):this.settings.slideEndAnimation&&!t&&(this.outer.addClass("lg-right-end"),setTimeout((function(){e.outer.removeClass("lg-right-end")}),400)))},t.prototype.goToPrevSlide=function(t){var e=this,i=this.settings.loop;t&&this.galleryItems.length<3&&(i=!1),this.lgBusy||(this.index>0?(this.index--,this.LGel.trigger(Ia,{index:this.index,fromTouch:t}),this.slide(this.index,!!t,!1,"prev")):i?(this.index=this.galleryItems.length-1,this.LGel.trigger(Ia,{index:this.index,fromTouch:t}),this.slide(this.index,!!t,!1,"prev")):this.settings.slideEndAnimation&&!t&&(this.outer.addClass("lg-left-end"),setTimeout((function(){e.outer.removeClass("lg-left-end")}),400)))},t.prototype.keyPress=function(){var t=this;za(window).on("keydown.lg.global"+this.lgId,(function(e){t.lgOpened&&!0===t.settings.escKey&&27===e.keyCode&&(e.preventDefault(),t.settings.allowMediaOverlap&&t.outer.hasClass("lg-can-toggle")&&t.outer.hasClass("lg-components-open")?t.outer.removeClass("lg-components-open"):t.closeGallery()),t.lgOpened&&t.galleryItems.length>1&&(37===e.keyCode&&(e.preventDefault(),t.goToPrevSlide()),39===e.keyCode&&(e.preventDefault(),t.goToNextSlide()))}))},t.prototype.arrow=function(){var t=this;this.getElementById("lg-prev").on("click.lg",(function(){t.goToPrevSlide()})),this.getElementById("lg-next").on("click.lg",(function(){t.goToNextSlide()}))},t.prototype.arrowDisable=function(t){if(!this.settings.loop&&this.settings.hideControlOnEnd){var e=this.getElementById("lg-prev"),i=this.getElementById("lg-next");t+1===this.galleryItems.length?i.attr("disabled","disabled").addClass("disabled"):i.removeAttr("disabled").removeClass("disabled"),0===t?e.attr("disabled","disabled").addClass("disabled"):e.removeAttr("disabled").removeClass("disabled")}},t.prototype.setTranslate=function(t,e,i,n,s){void 0===n&&(n=1),void 0===s&&(s=1),t.css("transform","translate3d("+e+"px, "+i+"px, 0px) scale3d("+n+", "+s+", 1)")},t.prototype.mousewheel=function(){var t=this,e=0;this.outer.on("wheel.lg",(function(i){if(i.deltaY&&!(t.galleryItems.length<2)){i.preventDefault();var n=(new Date).getTime();n-e<1e3||(e=n,i.deltaY>0?t.goToNextSlide():i.deltaY<0&&t.goToPrevSlide())}}))},t.prototype.isSlideElement=function(t){return t.hasClass("lg-outer")||t.hasClass("lg-item")||t.hasClass("lg-img-wrap")},t.prototype.isPosterElement=function(t){var e=this.getSlideItem(this.index).find(".lg-video-play-button").get();return t.hasClass("lg-video-poster")||t.hasClass("lg-video-play-button")||e&&e.contains(t.get())},t.prototype.toggleMaximize=function(){var t=this;this.getElementById("lg-maximize").on("click.lg",(function(){t.$container.toggleClass("lg-inline"),t.refreshOnResize()}))},t.prototype.invalidateItems=function(){for(var t=0;t<this.items.length;t++){var e=za(this.items[t]);e.off("click.lgcustom-item-"+e.attr("data-lg-id"))}},t.prototype.trapFocus=function(){var t=this;this.$container.get().focus({preventScroll:!0}),za(window).on("keydown.lg.global"+this.lgId,(function(e){if(t.lgOpened&&("Tab"===e.key||9===e.keyCode)){var i=Wa(t.$container.get()),n=i[0],s=i[i.length-1];e.shiftKey?document.activeElement===n&&(s.focus(),e.preventDefault()):document.activeElement===s&&(n.focus(),e.preventDefault())}}))},t.prototype.manageCloseGallery=function(){var t=this;if(this.settings.closable){var e=!1;this.getElementById("lg-close").on("click.lg",(function(){t.closeGallery()})),this.settings.closeOnTap&&(this.outer.on("mousedown.lg",(function(i){var n=za(i.target);e=!!t.isSlideElement(n)})),this.outer.on("mousemove.lg",(function(){e=!1})),this.outer.on("mouseup.lg",(function(i){var n=za(i.target);t.isSlideElement(n)&&e&&(t.outer.hasClass("lg-dragging")||t.closeGallery())})))}},t.prototype.closeGallery=function(t){var e=this;if(!this.lgOpened||!this.settings.closable&&!t)return 0;this.LGel.trigger(Aa),this.settings.resetScrollPosition&&!this.settings.hideScrollbar&&za(window).scrollTop(this.prevScrollTop);var i,n=this.items[this.index];if(this.zoomFromOrigin&&n){var s=this.mediaContainerPosition,r=s.top,o=s.bottom,a=this.galleryItems[this.index],l=a.__slideVideoInfo,c=a.poster,d=Fa(n,this.outer,r+o,l&&c&&this.settings.videoMaxSize);i=Ha(n,this.outer,r,o,d)}this.zoomFromOrigin&&i?(this.outer.addClass("lg-closing lg-zoom-from-image"),this.getSlideItem(this.index).addClass("lg-start-end-progress").css("transition-duration",this.settings.startAnimationDuration+"ms").css("transform",i)):(this.outer.addClass("lg-hide-items"),this.outer.removeClass("lg-zoom-from-image")),this.destroyModules(),this.lGalleryOn=!1,this.isDummyImageRemoved=!1,this.zoomFromOrigin=this.settings.zoomFromOrigin,clearTimeout(this.hideBarTimeout),this.hideBarTimeout=!1,za("html").removeClass("lg-on"),this.outer.removeClass("lg-visible lg-components-open"),this.$backdrop.removeClass("in").css("opacity",0);var u=this.zoomFromOrigin&&i?Math.max(this.settings.startAnimationDuration,this.settings.backdropDuration):this.settings.backdropDuration;return this.$container.removeClass("lg-show-in"),setTimeout((function(){e.zoomFromOrigin&&i&&e.outer.removeClass("lg-zoom-from-image"),e.$container.removeClass("lg-show"),e.resetScrollBar(),e.$backdrop.removeAttr("style").css("transition-duration",e.settings.backdropDuration+"ms"),e.outer.removeClass("lg-closing "+e.settings.startClass),e.getSlideItem(e.index).removeClass("lg-start-end-progress"),e.$inner.empty(),e.lgOpened&&e.LGel.trigger(Pa,{instance:e}),e.$container.get()&&e.$container.get().blur(),e.lgOpened=!1}),u+100),u+100},t.prototype.initModules=function(){this.plugins.forEach((function(t){try{t.init()}catch(t){console.warn("lightGallery:- make sure lightGallery module is properly initiated")}}))},t.prototype.destroyModules=function(t){this.plugins.forEach((function(e){try{t?e.destroy():e.closeGallery&&e.closeGallery()}catch(t){console.warn("lightGallery:- make sure lightGallery module is properly destroyed")}}))},t.prototype.refresh=function(t){this.settings.dynamic||this.invalidateItems(),this.galleryItems=t||this.getItems(),this.updateControls(),this.openGalleryOnItemClick(),this.LGel.trigger(ya)},t.prototype.updateControls=function(){this.addSlideVideoInfo(this.galleryItems),this.updateCounterTotal(),this.manageSingleSlideClassName()},t.prototype.destroyGallery=function(){this.destroyModules(!0),this.settings.dynamic||this.invalidateItems(),za(window).off(".lg.global"+this.lgId),this.LGel.off(".lg"),this.$container.remove()},t.prototype.destroy=function(){var t=this.closeGallery(!0);return t?setTimeout(this.destroyGallery.bind(this),t):this.destroyGallery(),t},t}();const Za=function(t,e){return new Ka(t,e)};function Qa(t){return null!==t&&"object"==typeof t&&"constructor"in t&&t.constructor===Object}function Ja(t,e){void 0===t&&(t={}),void 0===e&&(e={}),Object.keys(e).forEach((i=>{void 0===t[i]?t[i]=e[i]:Qa(e[i])&&Qa(t[i])&&Object.keys(e[i]).length>0&&Ja(t[i],e[i])}))}(()=>{document.querySelectorAll(".feed-chapter__images-swiper .slide-feed-chapter__image-wrap");document.querySelectorAll("[data-lightgallery]").forEach((t=>{const e=t.dataset.description,i=Za(t,{speed:500,licenseKey:"7EC452A9-0CFD441C-BD984C7C-17C8456E",appendCounterTo:".lg-content",selector:".slide-feed-chapter__image-wrap",appendSubHtmlTo:".lg-item"});t.addEventListener("lgBeforeSlide",(t=>{document.querySelectorAll(".lg-item").forEach((t=>{t.querySelector(".lg-sub-html")&&"true"===t.querySelector(".lg-sub-html").innerHTML&&t.classList.add("_is-vertical")}))})),t.addEventListener("lgBeforeOpen",(t=>{const n=i.$container.firstElement.querySelector(".lg-outer"),s=document.createElement("div");s.classList.add("gallery-description"),s.innerHTML=e,e&&n.append(s);document.querySelectorAll(".lg-item").forEach((t=>{t.querySelector(".lg-sub-html")&&"true"===t.querySelector(".lg-sub-html").innerHTML&&t.classList.add("_is-vertical")}))}))}))})();const tl={body:{},addEventListener(){},removeEventListener(){},activeElement:{blur(){},nodeName:""},querySelector:()=>null,querySelectorAll:()=>[],getElementById:()=>null,createEvent:()=>({initEvent(){}}),createElement:()=>({children:[],childNodes:[],style:{},setAttribute(){},getElementsByTagName:()=>[]}),createElementNS:()=>({}),importNode:()=>null,location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};function el(){const t="undefined"!=typeof document?document:{};return Ja(t,tl),t}const il={document:tl,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState(){},pushState(){},go(){},back(){}},CustomEvent:function(){return this},addEventListener(){},removeEventListener(){},getComputedStyle:()=>({getPropertyValue:()=>""}),Image(){},Date(){},screen:{},setTimeout(){},clearTimeout(){},matchMedia:()=>({}),requestAnimationFrame:t=>"undefined"==typeof setTimeout?(t(),null):setTimeout(t,0),cancelAnimationFrame(t){"undefined"!=typeof setTimeout&&clearTimeout(t)}};function nl(){const t="undefined"!=typeof window?window:{};return Ja(t,il),t}function sl(t,e){return void 0===e&&(e=0),setTimeout(t,e)}function rl(){return Date.now()}function ol(t,e){void 0===e&&(e="x");const i=nl();let n,s,r;const o=function(t){const e=nl();let i;return e.getComputedStyle&&(i=e.getComputedStyle(t,null)),!i&&t.currentStyle&&(i=t.currentStyle),i||(i=t.style),i}(t);return i.WebKitCSSMatrix?(s=o.transform||o.webkitTransform,s.split(",").length>6&&(s=s.split(", ").map((t=>t.replace(",","."))).join(", ")),r=new i.WebKitCSSMatrix("none"===s?"":s)):(r=o.MozTransform||o.OTransform||o.MsTransform||o.msTransform||o.transform||o.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,"),n=r.toString().split(",")),"x"===e&&(s=i.WebKitCSSMatrix?r.m41:16===n.length?parseFloat(n[12]):parseFloat(n[4])),"y"===e&&(s=i.WebKitCSSMatrix?r.m42:16===n.length?parseFloat(n[13]):parseFloat(n[5])),s||0}function al(t){return"object"==typeof t&&null!==t&&t.constructor&&"Object"===Object.prototype.toString.call(t).slice(8,-1)}function ll(){const t=Object(arguments.length<=0?void 0:arguments[0]),e=["__proto__","constructor","prototype"];for(let n=1;n<arguments.length;n+=1){const s=n<0||arguments.length<=n?void 0:arguments[n];if(null!=s&&(i=s,!("undefined"!=typeof window&&void 0!==window.HTMLElement?i instanceof HTMLElement:i&&(1===i.nodeType||11===i.nodeType)))){const i=Object.keys(Object(s)).filter((t=>e.indexOf(t)<0));for(let e=0,n=i.length;e<n;e+=1){const n=i[e],r=Object.getOwnPropertyDescriptor(s,n);void 0!==r&&r.enumerable&&(al(t[n])&&al(s[n])?s[n].__swiper__?t[n]=s[n]:ll(t[n],s[n]):!al(t[n])&&al(s[n])?(t[n]={},s[n].__swiper__?t[n]=s[n]:ll(t[n],s[n])):t[n]=s[n])}}}var i;return t}function cl(t,e,i){t.style.setProperty(e,i)}function dl(t){let{swiper:e,targetPosition:i,side:n}=t;const s=nl(),r=-e.translate;let o,a=null;const l=e.params.speed;e.wrapperEl.style.scrollSnapType="none",s.cancelAnimationFrame(e.cssModeFrameID);const c=i>r?"next":"prev",d=(t,e)=>"next"===c&&t>=e||"prev"===c&&t<=e,u=()=>{o=(new Date).getTime(),null===a&&(a=o);const t=Math.max(Math.min((o-a)/l,1),0),c=.5-Math.cos(t*Math.PI)/2;let h=r+c*(i-r);if(d(h,i)&&(h=i),e.wrapperEl.scrollTo({[n]:h}),d(h,i))return e.wrapperEl.style.overflow="hidden",e.wrapperEl.style.scrollSnapType="",setTimeout((()=>{e.wrapperEl.style.overflow="",e.wrapperEl.scrollTo({[n]:h})})),void s.cancelAnimationFrame(e.cssModeFrameID);e.cssModeFrameID=s.requestAnimationFrame(u)};u()}function ul(t,e){return void 0===e&&(e=""),[...t.children].filter((t=>t.matches(e)))}function hl(t){try{return void console.warn(t)}catch(t){}}function pl(t,e){void 0===e&&(e=[]);const i=document.createElement(t);return i.classList.add(...Array.isArray(e)?e:function(t){return void 0===t&&(t=""),t.trim().split(" ").filter((t=>!!t.trim()))}(e)),i}function fl(t,e){return nl().getComputedStyle(t,null).getPropertyValue(e)}function gl(t){let e,i=t;if(i){for(e=0;null!==(i=i.previousSibling);)1===i.nodeType&&(e+=1);return e}}function ml(t,e){const i=[];let n=t.parentElement;for(;n;)e?n.matches(e)&&i.push(n):i.push(n),n=n.parentElement;return i}function vl(t,e,i){const n=nl();return i?t["width"===e?"offsetWidth":"offsetHeight"]+parseFloat(n.getComputedStyle(t,null).getPropertyValue("width"===e?"margin-right":"margin-top"))+parseFloat(n.getComputedStyle(t,null).getPropertyValue("width"===e?"margin-left":"margin-bottom")):t.offsetWidth}function yl(t){return(Array.isArray(t)?t:[t]).filter((t=>!!t))}let bl,wl,_l;function xl(){return bl||(bl=function(){const t=nl(),e=el();return{smoothScroll:e.documentElement&&e.documentElement.style&&"scrollBehavior"in e.documentElement.style,touch:!!("ontouchstart"in t||t.DocumentTouch&&e instanceof t.DocumentTouch)}}()),bl}function Tl(t){return void 0===t&&(t={}),wl||(wl=function(t){let{userAgent:e}=void 0===t?{}:t;const i=xl(),n=nl(),s=n.navigator.platform,r=e||n.navigator.userAgent,o={ios:!1,android:!1},a=n.screen.width,l=n.screen.height,c=r.match(/(Android);?[\s\/]+([\d.]+)?/);let d=r.match(/(iPad).*OS\s([\d_]+)/);const u=r.match(/(iPod)(.*OS\s([\d_]+))?/),h=!d&&r.match(/(iPhone\sOS|iOS)\s([\d_]+)/),p="Win32"===s;let f="MacIntel"===s;return!d&&f&&i.touch&&["1024x1366","1366x1024","834x1194","1194x834","834x1112","1112x834","768x1024","1024x768","820x1180","1180x820","810x1080","1080x810"].indexOf(`${a}x${l}`)>=0&&(d=r.match(/(Version)\/([\d.]+)/),d||(d=[0,1,"13_0_0"]),f=!1),c&&!p&&(o.os="android",o.android=!0),(d||h||u)&&(o.os="ios",o.ios=!0),o}(t)),wl}function Sl(){return _l||(_l=function(){const t=nl(),e=Tl();let i=!1;function n(){const e=t.navigator.userAgent.toLowerCase();return e.indexOf("safari")>=0&&e.indexOf("chrome")<0&&e.indexOf("android")<0}if(n()){const e=String(t.navigator.userAgent);if(e.includes("Version/")){const[t,n]=e.split("Version/")[1].split(" ")[0].split(".").map((t=>Number(t)));i=t<16||16===t&&n<2}}const s=/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(t.navigator.userAgent),r=n();return{isSafari:i||r,needPerspectiveFix:i,need3dFix:r||s&&e.ios,isWebView:s}}()),_l}var Cl={on(t,e,i){const n=this;if(!n.eventsListeners||n.destroyed)return n;if("function"!=typeof e)return n;const s=i?"unshift":"push";return t.split(" ").forEach((t=>{n.eventsListeners[t]||(n.eventsListeners[t]=[]),n.eventsListeners[t][s](e)})),n},once(t,e,i){const n=this;if(!n.eventsListeners||n.destroyed)return n;if("function"!=typeof e)return n;function s(){n.off(t,s),s.__emitterProxy&&delete s.__emitterProxy;for(var i=arguments.length,r=new Array(i),o=0;o<i;o++)r[o]=arguments[o];e.apply(n,r)}return s.__emitterProxy=e,n.on(t,s,i)},onAny(t,e){const i=this;if(!i.eventsListeners||i.destroyed)return i;if("function"!=typeof t)return i;const n=e?"unshift":"push";return i.eventsAnyListeners.indexOf(t)<0&&i.eventsAnyListeners[n](t),i},offAny(t){const e=this;if(!e.eventsListeners||e.destroyed)return e;if(!e.eventsAnyListeners)return e;const i=e.eventsAnyListeners.indexOf(t);return i>=0&&e.eventsAnyListeners.splice(i,1),e},off(t,e){const i=this;return!i.eventsListeners||i.destroyed?i:i.eventsListeners?(t.split(" ").forEach((t=>{void 0===e?i.eventsListeners[t]=[]:i.eventsListeners[t]&&i.eventsListeners[t].forEach(((n,s)=>{(n===e||n.__emitterProxy&&n.__emitterProxy===e)&&i.eventsListeners[t].splice(s,1)}))})),i):i},emit(){const t=this;if(!t.eventsListeners||t.destroyed)return t;if(!t.eventsListeners)return t;let e,i,n;for(var s=arguments.length,r=new Array(s),o=0;o<s;o++)r[o]=arguments[o];"string"==typeof r[0]||Array.isArray(r[0])?(e=r[0],i=r.slice(1,r.length),n=t):(e=r[0].events,i=r[0].data,n=r[0].context||t),i.unshift(n);return(Array.isArray(e)?e:e.split(" ")).forEach((e=>{t.eventsAnyListeners&&t.eventsAnyListeners.length&&t.eventsAnyListeners.forEach((t=>{t.apply(n,[e,...i])})),t.eventsListeners&&t.eventsListeners[e]&&t.eventsListeners[e].forEach((t=>{t.apply(n,i)}))})),t}};const El=(t,e,i)=>{e&&!t.classList.contains(i)?t.classList.add(i):!e&&t.classList.contains(i)&&t.classList.remove(i)};const kl=(t,e,i)=>{e&&!t.classList.contains(i)?t.classList.add(i):!e&&t.classList.contains(i)&&t.classList.remove(i)};const Ml=(t,e)=>{if(!t||t.destroyed||!t.params)return;const i=e.closest(t.isElement?"swiper-slide":`.${t.params.slideClass}`);if(i){let e=i.querySelector(`.${t.params.lazyPreloaderClass}`);!e&&t.isElement&&(i.shadowRoot?e=i.shadowRoot.querySelector(`.${t.params.lazyPreloaderClass}`):requestAnimationFrame((()=>{i.shadowRoot&&(e=i.shadowRoot.querySelector(`.${t.params.lazyPreloaderClass}`),e&&e.remove())}))),e&&e.remove()}},Ol=(t,e)=>{if(!t.slides[e])return;const i=t.slides[e].querySelector('[loading="lazy"]');i&&i.removeAttribute("loading")},Il=t=>{if(!t||t.destroyed||!t.params)return;let e=t.params.lazyPreloadPrevNext;const i=t.slides.length;if(!i||!e||e<0)return;e=Math.min(e,i);const n="auto"===t.params.slidesPerView?t.slidesPerViewDynamic():Math.ceil(t.params.slidesPerView),s=t.activeIndex;if(t.params.grid&&t.params.grid.rows>1){const i=s,r=[i-e];return r.push(...Array.from({length:e}).map(((t,e)=>i+n+e))),void t.slides.forEach(((e,i)=>{r.includes(e.column)&&Ol(t,i)}))}const r=s+n-1;if(t.params.rewind||t.params.loop)for(let n=s-e;n<=r+e;n+=1){const e=(n%i+i)%i;(e<s||e>r)&&Ol(t,e)}else for(let n=Math.max(s-e,0);n<=Math.min(r+e,i-1);n+=1)n!==s&&(n>r||n<s)&&Ol(t,n)};var Al={updateSize:function(){const t=this;let e,i;const n=t.el;e=void 0!==t.params.width&&null!==t.params.width?t.params.width:n.clientWidth,i=void 0!==t.params.height&&null!==t.params.height?t.params.height:n.clientHeight,0===e&&t.isHorizontal()||0===i&&t.isVertical()||(e=e-parseInt(fl(n,"padding-left")||0,10)-parseInt(fl(n,"padding-right")||0,10),i=i-parseInt(fl(n,"padding-top")||0,10)-parseInt(fl(n,"padding-bottom")||0,10),Number.isNaN(e)&&(e=0),Number.isNaN(i)&&(i=0),Object.assign(t,{width:e,height:i,size:t.isHorizontal()?e:i}))},updateSlides:function(){const t=this;function e(e,i){return parseFloat(e.getPropertyValue(t.getDirectionLabel(i))||0)}const i=t.params,{wrapperEl:n,slidesEl:s,size:r,rtlTranslate:o,wrongRTL:a}=t,l=t.virtual&&i.virtual.enabled,c=l?t.virtual.slides.length:t.slides.length,d=ul(s,`.${t.params.slideClass}, swiper-slide`),u=l?t.virtual.slides.length:d.length;let h=[];const p=[],f=[];let g=i.slidesOffsetBefore;"function"==typeof g&&(g=i.slidesOffsetBefore.call(t));let m=i.slidesOffsetAfter;"function"==typeof m&&(m=i.slidesOffsetAfter.call(t));const v=t.snapGrid.length,y=t.slidesGrid.length;let b=i.spaceBetween,w=-g,_=0,x=0;if(void 0===r)return;"string"==typeof b&&b.indexOf("%")>=0?b=parseFloat(b.replace("%",""))/100*r:"string"==typeof b&&(b=parseFloat(b)),t.virtualSize=-b,d.forEach((t=>{o?t.style.marginLeft="":t.style.marginRight="",t.style.marginBottom="",t.style.marginTop=""})),i.centeredSlides&&i.cssMode&&(cl(n,"--swiper-centered-offset-before",""),cl(n,"--swiper-centered-offset-after",""));const T=i.grid&&i.grid.rows>1&&t.grid;let S;T?t.grid.initSlides(d):t.grid&&t.grid.unsetSlides();const C="auto"===i.slidesPerView&&i.breakpoints&&Object.keys(i.breakpoints).filter((t=>void 0!==i.breakpoints[t].slidesPerView)).length>0;for(let n=0;n<u;n+=1){let s;if(S=0,d[n]&&(s=d[n]),T&&t.grid.updateSlide(n,s,d),!d[n]||"none"!==fl(s,"display")){if("auto"===i.slidesPerView){C&&(d[n].style[t.getDirectionLabel("width")]="");const r=getComputedStyle(s),o=s.style.transform,a=s.style.webkitTransform;if(o&&(s.style.transform="none"),a&&(s.style.webkitTransform="none"),i.roundLengths)S=t.isHorizontal()?vl(s,"width",!0):vl(s,"height",!0);else{const t=e(r,"width"),i=e(r,"padding-left"),n=e(r,"padding-right"),o=e(r,"margin-left"),a=e(r,"margin-right"),l=r.getPropertyValue("box-sizing");if(l&&"border-box"===l)S=t+o+a;else{const{clientWidth:e,offsetWidth:r}=s;S=t+i+n+o+a+(r-e)}}o&&(s.style.transform=o),a&&(s.style.webkitTransform=a),i.roundLengths&&(S=Math.floor(S))}else S=(r-(i.slidesPerView-1)*b)/i.slidesPerView,i.roundLengths&&(S=Math.floor(S)),d[n]&&(d[n].style[t.getDirectionLabel("width")]=`${S}px`);d[n]&&(d[n].swiperSlideSize=S),f.push(S),i.centeredSlides?(w=w+S/2+_/2+b,0===_&&0!==n&&(w=w-r/2-b),0===n&&(w=w-r/2-b),Math.abs(w)<.001&&(w=0),i.roundLengths&&(w=Math.floor(w)),x%i.slidesPerGroup==0&&h.push(w),p.push(w)):(i.roundLengths&&(w=Math.floor(w)),(x-Math.min(t.params.slidesPerGroupSkip,x))%t.params.slidesPerGroup==0&&h.push(w),p.push(w),w=w+S+b),t.virtualSize+=S+b,_=S,x+=1}}if(t.virtualSize=Math.max(t.virtualSize,r)+m,o&&a&&("slide"===i.effect||"coverflow"===i.effect)&&(n.style.width=`${t.virtualSize+b}px`),i.setWrapperSize&&(n.style[t.getDirectionLabel("width")]=`${t.virtualSize+b}px`),T&&t.grid.updateWrapperSize(S,h),!i.centeredSlides){const e=[];for(let n=0;n<h.length;n+=1){let s=h[n];i.roundLengths&&(s=Math.floor(s)),h[n]<=t.virtualSize-r&&e.push(s)}h=e,Math.floor(t.virtualSize-r)-Math.floor(h[h.length-1])>1&&h.push(t.virtualSize-r)}if(l&&i.loop){const e=f[0]+b;if(i.slidesPerGroup>1){const n=Math.ceil((t.virtual.slidesBefore+t.virtual.slidesAfter)/i.slidesPerGroup),s=e*i.slidesPerGroup;for(let t=0;t<n;t+=1)h.push(h[h.length-1]+s)}for(let n=0;n<t.virtual.slidesBefore+t.virtual.slidesAfter;n+=1)1===i.slidesPerGroup&&h.push(h[h.length-1]+e),p.push(p[p.length-1]+e),t.virtualSize+=e}if(0===h.length&&(h=[0]),0!==b){const e=t.isHorizontal()&&o?"marginLeft":t.getDirectionLabel("marginRight");d.filter(((t,e)=>!(i.cssMode&&!i.loop)||e!==d.length-1)).forEach((t=>{t.style[e]=`${b}px`}))}if(i.centeredSlides&&i.centeredSlidesBounds){let t=0;f.forEach((e=>{t+=e+(b||0)})),t-=b;const e=t-r;h=h.map((t=>t<=0?-g:t>e?e+m:t))}if(i.centerInsufficientSlides){let t=0;f.forEach((e=>{t+=e+(b||0)})),t-=b;const e=(i.slidesOffsetBefore||0)+(i.slidesOffsetAfter||0);if(t+e<r){const i=(r-t-e)/2;h.forEach(((t,e)=>{h[e]=t-i})),p.forEach(((t,e)=>{p[e]=t+i}))}}if(Object.assign(t,{slides:d,snapGrid:h,slidesGrid:p,slidesSizesGrid:f}),i.centeredSlides&&i.cssMode&&!i.centeredSlidesBounds){cl(n,"--swiper-centered-offset-before",-h[0]+"px"),cl(n,"--swiper-centered-offset-after",t.size/2-f[f.length-1]/2+"px");const e=-t.snapGrid[0],i=-t.slidesGrid[0];t.snapGrid=t.snapGrid.map((t=>t+e)),t.slidesGrid=t.slidesGrid.map((t=>t+i))}if(u!==c&&t.emit("slidesLengthChange"),h.length!==v&&(t.params.watchOverflow&&t.checkOverflow(),t.emit("snapGridLengthChange")),p.length!==y&&t.emit("slidesGridLengthChange"),i.watchSlidesProgress&&t.updateSlidesOffset(),t.emit("slidesUpdated"),!(l||i.cssMode||"slide"!==i.effect&&"fade"!==i.effect)){const e=`${i.containerModifierClass}backface-hidden`,n=t.el.classList.contains(e);u<=i.maxBackfaceHiddenSlides?n||t.el.classList.add(e):n&&t.el.classList.remove(e)}},updateAutoHeight:function(t){const e=this,i=[],n=e.virtual&&e.params.virtual.enabled;let s,r=0;"number"==typeof t?e.setTransition(t):!0===t&&e.setTransition(e.params.speed);const o=t=>n?e.slides[e.getSlideIndexByData(t)]:e.slides[t];if("auto"!==e.params.slidesPerView&&e.params.slidesPerView>1)if(e.params.centeredSlides)(e.visibleSlides||[]).forEach((t=>{i.push(t)}));else for(s=0;s<Math.ceil(e.params.slidesPerView);s+=1){const t=e.activeIndex+s;if(t>e.slides.length&&!n)break;i.push(o(t))}else i.push(o(e.activeIndex));for(s=0;s<i.length;s+=1)if(void 0!==i[s]){const t=i[s].offsetHeight;r=t>r?t:r}(r||0===r)&&(e.wrapperEl.style.height=`${r}px`)},updateSlidesOffset:function(){const t=this,e=t.slides,i=t.isElement?t.isHorizontal()?t.wrapperEl.offsetLeft:t.wrapperEl.offsetTop:0;for(let n=0;n<e.length;n+=1)e[n].swiperSlideOffset=(t.isHorizontal()?e[n].offsetLeft:e[n].offsetTop)-i-t.cssOverflowAdjustment()},updateSlidesProgress:function(t){void 0===t&&(t=this&&this.translate||0);const e=this,i=e.params,{slides:n,rtlTranslate:s,snapGrid:r}=e;if(0===n.length)return;void 0===n[0].swiperSlideOffset&&e.updateSlidesOffset();let o=-t;s&&(o=t),e.visibleSlidesIndexes=[],e.visibleSlides=[];let a=i.spaceBetween;"string"==typeof a&&a.indexOf("%")>=0?a=parseFloat(a.replace("%",""))/100*e.size:"string"==typeof a&&(a=parseFloat(a));for(let t=0;t<n.length;t+=1){const l=n[t];let c=l.swiperSlideOffset;i.cssMode&&i.centeredSlides&&(c-=n[0].swiperSlideOffset);const d=(o+(i.centeredSlides?e.minTranslate():0)-c)/(l.swiperSlideSize+a),u=(o-r[0]+(i.centeredSlides?e.minTranslate():0)-c)/(l.swiperSlideSize+a),h=-(o-c),p=h+e.slidesSizesGrid[t],f=h>=0&&h<=e.size-e.slidesSizesGrid[t],g=h>=0&&h<e.size-1||p>1&&p<=e.size||h<=0&&p>=e.size;g&&(e.visibleSlides.push(l),e.visibleSlidesIndexes.push(t)),El(l,g,i.slideVisibleClass),El(l,f,i.slideFullyVisibleClass),l.progress=s?-d:d,l.originalProgress=s?-u:u}},updateProgress:function(t){const e=this;if(void 0===t){const i=e.rtlTranslate?-1:1;t=e&&e.translate&&e.translate*i||0}const i=e.params,n=e.maxTranslate()-e.minTranslate();let{progress:s,isBeginning:r,isEnd:o,progressLoop:a}=e;const l=r,c=o;if(0===n)s=0,r=!0,o=!0;else{s=(t-e.minTranslate())/n;const i=Math.abs(t-e.minTranslate())<1,a=Math.abs(t-e.maxTranslate())<1;r=i||s<=0,o=a||s>=1,i&&(s=0),a&&(s=1)}if(i.loop){const i=e.getSlideIndexByData(0),n=e.getSlideIndexByData(e.slides.length-1),s=e.slidesGrid[i],r=e.slidesGrid[n],o=e.slidesGrid[e.slidesGrid.length-1],l=Math.abs(t);a=l>=s?(l-s)/o:(l+o-r)/o,a>1&&(a-=1)}Object.assign(e,{progress:s,progressLoop:a,isBeginning:r,isEnd:o}),(i.watchSlidesProgress||i.centeredSlides&&i.autoHeight)&&e.updateSlidesProgress(t),r&&!l&&e.emit("reachBeginning toEdge"),o&&!c&&e.emit("reachEnd toEdge"),(l&&!r||c&&!o)&&e.emit("fromEdge"),e.emit("progress",s)},updateSlidesClasses:function(){const t=this,{slides:e,params:i,slidesEl:n,activeIndex:s}=t,r=t.virtual&&i.virtual.enabled,o=t.grid&&i.grid&&i.grid.rows>1,a=t=>ul(n,`.${i.slideClass}${t}, swiper-slide${t}`)[0];let l,c,d;if(r)if(i.loop){let e=s-t.virtual.slidesBefore;e<0&&(e=t.virtual.slides.length+e),e>=t.virtual.slides.length&&(e-=t.virtual.slides.length),l=a(`[data-swiper-slide-index="${e}"]`)}else l=a(`[data-swiper-slide-index="${s}"]`);else o?(l=e.filter((t=>t.column===s))[0],d=e.filter((t=>t.column===s+1))[0],c=e.filter((t=>t.column===s-1))[0]):l=e[s];l&&(o||(d=function(t,e){const i=[];for(;t.nextElementSibling;){const n=t.nextElementSibling;e?n.matches(e)&&i.push(n):i.push(n),t=n}return i}(l,`.${i.slideClass}, swiper-slide`)[0],i.loop&&!d&&(d=e[0]),c=function(t,e){const i=[];for(;t.previousElementSibling;){const n=t.previousElementSibling;e?n.matches(e)&&i.push(n):i.push(n),t=n}return i}(l,`.${i.slideClass}, swiper-slide`)[0],i.loop&&0===!c&&(c=e[e.length-1]))),e.forEach((t=>{kl(t,t===l,i.slideActiveClass),kl(t,t===d,i.slideNextClass),kl(t,t===c,i.slidePrevClass)})),t.emitSlidesClasses()},updateActiveIndex:function(t){const e=this,i=e.rtlTranslate?e.translate:-e.translate,{snapGrid:n,params:s,activeIndex:r,realIndex:o,snapIndex:a}=e;let l,c=t;const d=t=>{let i=t-e.virtual.slidesBefore;return i<0&&(i=e.virtual.slides.length+i),i>=e.virtual.slides.length&&(i-=e.virtual.slides.length),i};if(void 0===c&&(c=function(t){const{slidesGrid:e,params:i}=t,n=t.rtlTranslate?t.translate:-t.translate;let s;for(let t=0;t<e.length;t+=1)void 0!==e[t+1]?n>=e[t]&&n<e[t+1]-(e[t+1]-e[t])/2?s=t:n>=e[t]&&n<e[t+1]&&(s=t+1):n>=e[t]&&(s=t);return i.normalizeSlideIndex&&(s<0||void 0===s)&&(s=0),s}(e)),n.indexOf(i)>=0)l=n.indexOf(i);else{const t=Math.min(s.slidesPerGroupSkip,c);l=t+Math.floor((c-t)/s.slidesPerGroup)}if(l>=n.length&&(l=n.length-1),c===r&&!e.params.loop)return void(l!==a&&(e.snapIndex=l,e.emit("snapIndexChange")));if(c===r&&e.params.loop&&e.virtual&&e.params.virtual.enabled)return void(e.realIndex=d(c));const u=e.grid&&s.grid&&s.grid.rows>1;let h;if(e.virtual&&s.virtual.enabled&&s.loop)h=d(c);else if(u){const t=e.slides.filter((t=>t.column===c))[0];let i=parseInt(t.getAttribute("data-swiper-slide-index"),10);Number.isNaN(i)&&(i=Math.max(e.slides.indexOf(t),0)),h=Math.floor(i/s.grid.rows)}else if(e.slides[c]){const t=e.slides[c].getAttribute("data-swiper-slide-index");h=t?parseInt(t,10):c}else h=c;Object.assign(e,{previousSnapIndex:a,snapIndex:l,previousRealIndex:o,realIndex:h,previousIndex:r,activeIndex:c}),e.initialized&&Il(e),e.emit("activeIndexChange"),e.emit("snapIndexChange"),(e.initialized||e.params.runCallbacksOnInit)&&(o!==h&&e.emit("realIndexChange"),e.emit("slideChange"))},updateClickedSlide:function(t,e){const i=this,n=i.params;let s=t.closest(`.${n.slideClass}, swiper-slide`);!s&&i.isElement&&e&&e.length>1&&e.includes(t)&&[...e.slice(e.indexOf(t)+1,e.length)].forEach((t=>{!s&&t.matches&&t.matches(`.${n.slideClass}, swiper-slide`)&&(s=t)}));let r,o=!1;if(s)for(let t=0;t<i.slides.length;t+=1)if(i.slides[t]===s){o=!0,r=t;break}if(!s||!o)return i.clickedSlide=void 0,void(i.clickedIndex=void 0);i.clickedSlide=s,i.virtual&&i.params.virtual.enabled?i.clickedIndex=parseInt(s.getAttribute("data-swiper-slide-index"),10):i.clickedIndex=r,n.slideToClickedSlide&&void 0!==i.clickedIndex&&i.clickedIndex!==i.activeIndex&&i.slideToClickedSlide()}};var Pl={getTranslate:function(t){void 0===t&&(t=this.isHorizontal()?"x":"y");const{params:e,rtlTranslate:i,translate:n,wrapperEl:s}=this;if(e.virtualTranslate)return i?-n:n;if(e.cssMode)return n;let r=ol(s,t);return r+=this.cssOverflowAdjustment(),i&&(r=-r),r||0},setTranslate:function(t,e){const i=this,{rtlTranslate:n,params:s,wrapperEl:r,progress:o}=i;let a,l=0,c=0;i.isHorizontal()?l=n?-t:t:c=t,s.roundLengths&&(l=Math.floor(l),c=Math.floor(c)),i.previousTranslate=i.translate,i.translate=i.isHorizontal()?l:c,s.cssMode?r[i.isHorizontal()?"scrollLeft":"scrollTop"]=i.isHorizontal()?-l:-c:s.virtualTranslate||(i.isHorizontal()?l-=i.cssOverflowAdjustment():c-=i.cssOverflowAdjustment(),r.style.transform=`translate3d(${l}px, ${c}px, 0px)`);const d=i.maxTranslate()-i.minTranslate();a=0===d?0:(t-i.minTranslate())/d,a!==o&&i.updateProgress(t),i.emit("setTranslate",i.translate,e)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]},translateTo:function(t,e,i,n,s){void 0===t&&(t=0),void 0===e&&(e=this.params.speed),void 0===i&&(i=!0),void 0===n&&(n=!0);const r=this,{params:o,wrapperEl:a}=r;if(r.animating&&o.preventInteractionOnTransition)return!1;const l=r.minTranslate(),c=r.maxTranslate();let d;if(d=n&&t>l?l:n&&t<c?c:t,r.updateProgress(d),o.cssMode){const t=r.isHorizontal();if(0===e)a[t?"scrollLeft":"scrollTop"]=-d;else{if(!r.support.smoothScroll)return dl({swiper:r,targetPosition:-d,side:t?"left":"top"}),!0;a.scrollTo({[t?"left":"top"]:-d,behavior:"smooth"})}return!0}return 0===e?(r.setTransition(0),r.setTranslate(d),i&&(r.emit("beforeTransitionStart",e,s),r.emit("transitionEnd"))):(r.setTransition(e),r.setTranslate(d),i&&(r.emit("beforeTransitionStart",e,s),r.emit("transitionStart")),r.animating||(r.animating=!0,r.onTranslateToWrapperTransitionEnd||(r.onTranslateToWrapperTransitionEnd=function(t){r&&!r.destroyed&&t.target===this&&(r.wrapperEl.removeEventListener("transitionend",r.onTranslateToWrapperTransitionEnd),r.onTranslateToWrapperTransitionEnd=null,delete r.onTranslateToWrapperTransitionEnd,r.animating=!1,i&&r.emit("transitionEnd"))}),r.wrapperEl.addEventListener("transitionend",r.onTranslateToWrapperTransitionEnd))),!0}};function Ll(t){let{swiper:e,runCallbacks:i,direction:n,step:s}=t;const{activeIndex:r,previousIndex:o}=e;let a=n;if(a||(a=r>o?"next":r<o?"prev":"reset"),e.emit(`transition${s}`),i&&r!==o){if("reset"===a)return void e.emit(`slideResetTransition${s}`);e.emit(`slideChangeTransition${s}`),"next"===a?e.emit(`slideNextTransition${s}`):e.emit(`slidePrevTransition${s}`)}}var Dl={slideTo:function(t,e,i,n,s){void 0===t&&(t=0),void 0===i&&(i=!0),"string"==typeof t&&(t=parseInt(t,10));const r=this;let o=t;o<0&&(o=0);const{params:a,snapGrid:l,slidesGrid:c,previousIndex:d,activeIndex:u,rtlTranslate:h,wrapperEl:p,enabled:f}=r;if(!f&&!n&&!s||r.destroyed||r.animating&&a.preventInteractionOnTransition)return!1;void 0===e&&(e=r.params.speed);const g=Math.min(r.params.slidesPerGroupSkip,o);let m=g+Math.floor((o-g)/r.params.slidesPerGroup);m>=l.length&&(m=l.length-1);const v=-l[m];if(a.normalizeSlideIndex)for(let t=0;t<c.length;t+=1){const e=-Math.floor(100*v),i=Math.floor(100*c[t]),n=Math.floor(100*c[t+1]);void 0!==c[t+1]?e>=i&&e<n-(n-i)/2?o=t:e>=i&&e<n&&(o=t+1):e>=i&&(o=t)}if(r.initialized&&o!==u){if(!r.allowSlideNext&&(h?v>r.translate&&v>r.minTranslate():v<r.translate&&v<r.minTranslate()))return!1;if(!r.allowSlidePrev&&v>r.translate&&v>r.maxTranslate()&&(u||0)!==o)return!1}let y;if(o!==(d||0)&&i&&r.emit("beforeSlideChangeStart"),r.updateProgress(v),y=o>u?"next":o<u?"prev":"reset",h&&-v===r.translate||!h&&v===r.translate)return r.updateActiveIndex(o),a.autoHeight&&r.updateAutoHeight(),r.updateSlidesClasses(),"slide"!==a.effect&&r.setTranslate(v),"reset"!==y&&(r.transitionStart(i,y),r.transitionEnd(i,y)),!1;if(a.cssMode){const t=r.isHorizontal(),i=h?v:-v;if(0===e){const e=r.virtual&&r.params.virtual.enabled;e&&(r.wrapperEl.style.scrollSnapType="none",r._immediateVirtual=!0),e&&!r._cssModeVirtualInitialSet&&r.params.initialSlide>0?(r._cssModeVirtualInitialSet=!0,requestAnimationFrame((()=>{p[t?"scrollLeft":"scrollTop"]=i}))):p[t?"scrollLeft":"scrollTop"]=i,e&&requestAnimationFrame((()=>{r.wrapperEl.style.scrollSnapType="",r._immediateVirtual=!1}))}else{if(!r.support.smoothScroll)return dl({swiper:r,targetPosition:i,side:t?"left":"top"}),!0;p.scrollTo({[t?"left":"top"]:i,behavior:"smooth"})}return!0}return r.setTransition(e),r.setTranslate(v),r.updateActiveIndex(o),r.updateSlidesClasses(),r.emit("beforeTransitionStart",e,n),r.transitionStart(i,y),0===e?r.transitionEnd(i,y):r.animating||(r.animating=!0,r.onSlideToWrapperTransitionEnd||(r.onSlideToWrapperTransitionEnd=function(t){r&&!r.destroyed&&t.target===this&&(r.wrapperEl.removeEventListener("transitionend",r.onSlideToWrapperTransitionEnd),r.onSlideToWrapperTransitionEnd=null,delete r.onSlideToWrapperTransitionEnd,r.transitionEnd(i,y))}),r.wrapperEl.addEventListener("transitionend",r.onSlideToWrapperTransitionEnd)),!0},slideToLoop:function(t,e,i,n){if(void 0===t&&(t=0),void 0===i&&(i=!0),"string"==typeof t){t=parseInt(t,10)}const s=this;if(s.destroyed)return;void 0===e&&(e=s.params.speed);const r=s.grid&&s.params.grid&&s.params.grid.rows>1;let o=t;if(s.params.loop)if(s.virtual&&s.params.virtual.enabled)o+=s.virtual.slidesBefore;else{let t;if(r){const e=o*s.params.grid.rows;t=s.slides.filter((t=>1*t.getAttribute("data-swiper-slide-index")===e))[0].column}else t=s.getSlideIndexByData(o);const e=r?Math.ceil(s.slides.length/s.params.grid.rows):s.slides.length,{centeredSlides:i}=s.params;let a=s.params.slidesPerView;"auto"===a?a=s.slidesPerViewDynamic():(a=Math.ceil(parseFloat(s.params.slidesPerView,10)),i&&a%2==0&&(a+=1));let l=e-t<a;if(i&&(l=l||t<Math.ceil(a/2)),n&&i&&"auto"!==s.params.slidesPerView&&!r&&(l=!1),l){const n=i?t<s.activeIndex?"prev":"next":t-s.activeIndex-1<s.params.slidesPerView?"next":"prev";s.loopFix({direction:n,slideTo:!0,activeSlideIndex:"next"===n?t+1:t-e+1,slideRealIndex:"next"===n?s.realIndex:void 0})}if(r){const t=o*s.params.grid.rows;o=s.slides.filter((e=>1*e.getAttribute("data-swiper-slide-index")===t))[0].column}else o=s.getSlideIndexByData(o)}return requestAnimationFrame((()=>{s.slideTo(o,e,i,n)})),s},slideNext:function(t,e,i){void 0===e&&(e=!0);const n=this,{enabled:s,params:r,animating:o}=n;if(!s||n.destroyed)return n;void 0===t&&(t=n.params.speed);let a=r.slidesPerGroup;"auto"===r.slidesPerView&&1===r.slidesPerGroup&&r.slidesPerGroupAuto&&(a=Math.max(n.slidesPerViewDynamic("current",!0),1));const l=n.activeIndex<r.slidesPerGroupSkip?1:a,c=n.virtual&&r.virtual.enabled;if(r.loop){if(o&&!c&&r.loopPreventsSliding)return!1;if(n.loopFix({direction:"next"}),n._clientLeft=n.wrapperEl.clientLeft,n.activeIndex===n.slides.length-1&&r.cssMode)return requestAnimationFrame((()=>{n.slideTo(n.activeIndex+l,t,e,i)})),!0}return r.rewind&&n.isEnd?n.slideTo(0,t,e,i):n.slideTo(n.activeIndex+l,t,e,i)},slidePrev:function(t,e,i){void 0===e&&(e=!0);const n=this,{params:s,snapGrid:r,slidesGrid:o,rtlTranslate:a,enabled:l,animating:c}=n;if(!l||n.destroyed)return n;void 0===t&&(t=n.params.speed);const d=n.virtual&&s.virtual.enabled;if(s.loop){if(c&&!d&&s.loopPreventsSliding)return!1;n.loopFix({direction:"prev"}),n._clientLeft=n.wrapperEl.clientLeft}function u(t){return t<0?-Math.floor(Math.abs(t)):Math.floor(t)}const h=u(a?n.translate:-n.translate),p=r.map((t=>u(t)));let f=r[p.indexOf(h)-1];if(void 0===f&&s.cssMode){let t;r.forEach(((e,i)=>{h>=e&&(t=i)})),void 0!==t&&(f=r[t>0?t-1:t])}let g=0;if(void 0!==f&&(g=o.indexOf(f),g<0&&(g=n.activeIndex-1),"auto"===s.slidesPerView&&1===s.slidesPerGroup&&s.slidesPerGroupAuto&&(g=g-n.slidesPerViewDynamic("previous",!0)+1,g=Math.max(g,0))),s.rewind&&n.isBeginning){const s=n.params.virtual&&n.params.virtual.enabled&&n.virtual?n.virtual.slides.length-1:n.slides.length-1;return n.slideTo(s,t,e,i)}return s.loop&&0===n.activeIndex&&s.cssMode?(requestAnimationFrame((()=>{n.slideTo(g,t,e,i)})),!0):n.slideTo(g,t,e,i)},slideReset:function(t,e,i){void 0===e&&(e=!0);const n=this;if(!n.destroyed)return void 0===t&&(t=n.params.speed),n.slideTo(n.activeIndex,t,e,i)},slideToClosest:function(t,e,i,n){void 0===e&&(e=!0),void 0===n&&(n=.5);const s=this;if(s.destroyed)return;void 0===t&&(t=s.params.speed);let r=s.activeIndex;const o=Math.min(s.params.slidesPerGroupSkip,r),a=o+Math.floor((r-o)/s.params.slidesPerGroup),l=s.rtlTranslate?s.translate:-s.translate;if(l>=s.snapGrid[a]){const t=s.snapGrid[a];l-t>(s.snapGrid[a+1]-t)*n&&(r+=s.params.slidesPerGroup)}else{const t=s.snapGrid[a-1];l-t<=(s.snapGrid[a]-t)*n&&(r-=s.params.slidesPerGroup)}return r=Math.max(r,0),r=Math.min(r,s.slidesGrid.length-1),s.slideTo(r,t,e,i)},slideToClickedSlide:function(){const t=this;if(t.destroyed)return;const{params:e,slidesEl:i}=t,n="auto"===e.slidesPerView?t.slidesPerViewDynamic():e.slidesPerView;let s,r=t.clickedIndex;const o=t.isElement?"swiper-slide":`.${e.slideClass}`;if(e.loop){if(t.animating)return;s=parseInt(t.clickedSlide.getAttribute("data-swiper-slide-index"),10),e.centeredSlides?r<t.loopedSlides-n/2||r>t.slides.length-t.loopedSlides+n/2?(t.loopFix(),r=t.getSlideIndex(ul(i,`${o}[data-swiper-slide-index="${s}"]`)[0]),sl((()=>{t.slideTo(r)}))):t.slideTo(r):r>t.slides.length-n?(t.loopFix(),r=t.getSlideIndex(ul(i,`${o}[data-swiper-slide-index="${s}"]`)[0]),sl((()=>{t.slideTo(r)}))):t.slideTo(r)}else t.slideTo(r)}};var zl={loopCreate:function(t){const e=this,{params:i,slidesEl:n}=e;if(!i.loop||e.virtual&&e.params.virtual.enabled)return;const s=()=>{ul(n,`.${i.slideClass}, swiper-slide`).forEach(((t,e)=>{t.setAttribute("data-swiper-slide-index",e)}))},r=e.grid&&i.grid&&i.grid.rows>1,o=i.slidesPerGroup*(r?i.grid.rows:1),a=e.slides.length%o!=0,l=r&&e.slides.length%i.grid.rows!=0,c=t=>{for(let n=0;n<t;n+=1){const t=e.isElement?pl("swiper-slide",[i.slideBlankClass]):pl("div",[i.slideClass,i.slideBlankClass]);e.slidesEl.append(t)}};if(a){if(i.loopAddBlankSlides){c(o-e.slides.length%o),e.recalcSlides(),e.updateSlides()}else hl("Swiper Loop Warning: The number of slides is not even to slidesPerGroup, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)");s()}else if(l){if(i.loopAddBlankSlides){c(i.grid.rows-e.slides.length%i.grid.rows),e.recalcSlides(),e.updateSlides()}else hl("Swiper Loop Warning: The number of slides is not even to grid.rows, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)");s()}else s();e.loopFix({slideRealIndex:t,direction:i.centeredSlides?void 0:"next"})},loopFix:function(t){let{slideRealIndex:e,slideTo:i=!0,direction:n,setTranslate:s,activeSlideIndex:r,byController:o,byMousewheel:a}=void 0===t?{}:t;const l=this;if(!l.params.loop)return;l.emit("beforeLoopFix");const{slides:c,allowSlidePrev:d,allowSlideNext:u,slidesEl:h,params:p}=l,{centeredSlides:f}=p;if(l.allowSlidePrev=!0,l.allowSlideNext=!0,l.virtual&&p.virtual.enabled)return i&&(p.centeredSlides||0!==l.snapIndex?p.centeredSlides&&l.snapIndex<p.slidesPerView?l.slideTo(l.virtual.slides.length+l.snapIndex,0,!1,!0):l.snapIndex===l.snapGrid.length-1&&l.slideTo(l.virtual.slidesBefore,0,!1,!0):l.slideTo(l.virtual.slides.length,0,!1,!0)),l.allowSlidePrev=d,l.allowSlideNext=u,void l.emit("loopFix");let g=p.slidesPerView;"auto"===g?g=l.slidesPerViewDynamic():(g=Math.ceil(parseFloat(p.slidesPerView,10)),f&&g%2==0&&(g+=1));const m=p.slidesPerGroupAuto?g:p.slidesPerGroup;let v=m;v%m!=0&&(v+=m-v%m),v+=p.loopAdditionalSlides,l.loopedSlides=v;const y=l.grid&&p.grid&&p.grid.rows>1;c.length<g+v?hl("Swiper Loop Warning: The number of slides is not enough for loop mode, it will be disabled and not function properly. You need to add more slides (or make duplicates) or lower the values of slidesPerView and slidesPerGroup parameters"):y&&"row"===p.grid.fill&&hl("Swiper Loop Warning: Loop mode is not compatible with grid.fill = `row`");const b=[],w=[];let _=l.activeIndex;void 0===r?r=l.getSlideIndex(c.filter((t=>t.classList.contains(p.slideActiveClass)))[0]):_=r;const x="next"===n||!n,T="prev"===n||!n;let S=0,C=0;const E=y?Math.ceil(c.length/p.grid.rows):c.length,k=(y?c[r].column:r)+(f&&void 0===s?-g/2+.5:0);if(k<v){S=Math.max(v-k,m);for(let t=0;t<v-k;t+=1){const e=t-Math.floor(t/E)*E;if(y){const t=E-e-1;for(let e=c.length-1;e>=0;e-=1)c[e].column===t&&b.push(e)}else b.push(E-e-1)}}else if(k+g>E-v){C=Math.max(k-(E-2*v),m);for(let t=0;t<C;t+=1){const e=t-Math.floor(t/E)*E;y?c.forEach(((t,i)=>{t.column===e&&w.push(i)})):w.push(e)}}if(l.__preventObserver__=!0,requestAnimationFrame((()=>{l.__preventObserver__=!1})),T&&b.forEach((t=>{c[t].swiperLoopMoveDOM=!0,h.prepend(c[t]),c[t].swiperLoopMoveDOM=!1})),x&&w.forEach((t=>{c[t].swiperLoopMoveDOM=!0,h.append(c[t]),c[t].swiperLoopMoveDOM=!1})),l.recalcSlides(),"auto"===p.slidesPerView?l.updateSlides():y&&(b.length>0&&T||w.length>0&&x)&&l.slides.forEach(((t,e)=>{l.grid.updateSlide(e,t,l.slides)})),p.watchSlidesProgress&&l.updateSlidesOffset(),i)if(b.length>0&&T){if(void 0===e){const t=l.slidesGrid[_],e=l.slidesGrid[_+S]-t;a?l.setTranslate(l.translate-e):(l.slideTo(_+Math.ceil(S),0,!1,!0),s&&(l.touchEventsData.startTranslate=l.touchEventsData.startTranslate-e,l.touchEventsData.currentTranslate=l.touchEventsData.currentTranslate-e))}else if(s){const t=y?b.length/p.grid.rows:b.length;l.slideTo(l.activeIndex+t,0,!1,!0),l.touchEventsData.currentTranslate=l.translate}}else if(w.length>0&&x)if(void 0===e){const t=l.slidesGrid[_],e=l.slidesGrid[_-C]-t;a?l.setTranslate(l.translate-e):(l.slideTo(_-C,0,!1,!0),s&&(l.touchEventsData.startTranslate=l.touchEventsData.startTranslate-e,l.touchEventsData.currentTranslate=l.touchEventsData.currentTranslate-e))}else{const t=y?w.length/p.grid.rows:w.length;l.slideTo(l.activeIndex-t,0,!1,!0)}if(l.allowSlidePrev=d,l.allowSlideNext=u,l.controller&&l.controller.control&&!o){const t={slideRealIndex:e,direction:n,setTranslate:s,activeSlideIndex:r,byController:!0};Array.isArray(l.controller.control)?l.controller.control.forEach((e=>{!e.destroyed&&e.params.loop&&e.loopFix({...t,slideTo:e.params.slidesPerView===p.slidesPerView&&i})})):l.controller.control instanceof l.constructor&&l.controller.control.params.loop&&l.controller.control.loopFix({...t,slideTo:l.controller.control.params.slidesPerView===p.slidesPerView&&i})}l.emit("loopFix")},loopDestroy:function(){const t=this,{params:e,slidesEl:i}=t;if(!e.loop||t.virtual&&t.params.virtual.enabled)return;t.recalcSlides();const n=[];t.slides.forEach((t=>{const e=void 0===t.swiperSlideIndex?1*t.getAttribute("data-swiper-slide-index"):t.swiperSlideIndex;n[e]=t})),t.slides.forEach((t=>{t.removeAttribute("data-swiper-slide-index")})),n.forEach((t=>{i.append(t)})),t.recalcSlides(),t.slideTo(t.realIndex,0)}};function Bl(t,e,i){const n=nl(),{params:s}=t,r=s.edgeSwipeDetection,o=s.edgeSwipeThreshold;return!r||!(i<=o||i>=n.innerWidth-o)||"prevent"===r&&(e.preventDefault(),!0)}function Rl(t){const e=this,i=el();let n=t;n.originalEvent&&(n=n.originalEvent);const s=e.touchEventsData;if("pointerdown"===n.type){if(null!==s.pointerId&&s.pointerId!==n.pointerId)return;s.pointerId=n.pointerId}else"touchstart"===n.type&&1===n.targetTouches.length&&(s.touchId=n.targetTouches[0].identifier);if("touchstart"===n.type)return void Bl(e,n,n.targetTouches[0].pageX);const{params:r,touches:o,enabled:a}=e;if(!a)return;if(!r.simulateTouch&&"mouse"===n.pointerType)return;if(e.animating&&r.preventInteractionOnTransition)return;!e.animating&&r.cssMode&&r.loop&&e.loopFix();let l=n.target;if("wrapper"===r.touchEventsTarget&&!e.wrapperEl.contains(l))return;if("which"in n&&3===n.which)return;if("button"in n&&n.button>0)return;if(s.isTouched&&s.isMoved)return;const c=!!r.noSwipingClass&&""!==r.noSwipingClass,d=n.composedPath?n.composedPath():n.path;c&&n.target&&n.target.shadowRoot&&d&&(l=d[0]);const u=r.noSwipingSelector?r.noSwipingSelector:`.${r.noSwipingClass}`,h=!(!n.target||!n.target.shadowRoot);if(r.noSwiping&&(h?function(t,e){return void 0===e&&(e=this),function e(i){if(!i||i===el()||i===nl())return null;i.assignedSlot&&(i=i.assignedSlot);const n=i.closest(t);return n||i.getRootNode?n||e(i.getRootNode().host):null}(e)}(u,l):l.closest(u)))return void(e.allowClick=!0);if(r.swipeHandler&&!l.closest(r.swipeHandler))return;o.currentX=n.pageX,o.currentY=n.pageY;const p=o.currentX,f=o.currentY;if(!Bl(e,n,p))return;Object.assign(s,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),o.startX=p,o.startY=f,s.touchStartTime=rl(),e.allowClick=!0,e.updateSize(),e.swipeDirection=void 0,r.threshold>0&&(s.allowThresholdMove=!1);let g=!0;l.matches(s.focusableElements)&&(g=!1,"SELECT"===l.nodeName&&(s.isTouched=!1)),i.activeElement&&i.activeElement.matches(s.focusableElements)&&i.activeElement!==l&&i.activeElement.blur();const m=g&&e.allowTouchMove&&r.touchStartPreventDefault;!r.touchStartForcePreventDefault&&!m||l.isContentEditable||n.preventDefault(),r.freeMode&&r.freeMode.enabled&&e.freeMode&&e.animating&&!r.cssMode&&e.freeMode.onTouchStart(),e.emit("touchStart",n)}function Fl(t){const e=el(),i=this,n=i.touchEventsData,{params:s,touches:r,rtlTranslate:o,enabled:a}=i;if(!a)return;if(!s.simulateTouch&&"mouse"===t.pointerType)return;let l,c=t;if(c.originalEvent&&(c=c.originalEvent),"pointermove"===c.type){if(null!==n.touchId)return;if(c.pointerId!==n.pointerId)return}if("touchmove"===c.type){if(l=[...c.changedTouches].filter((t=>t.identifier===n.touchId))[0],!l||l.identifier!==n.touchId)return}else l=c;if(!n.isTouched)return void(n.startMoving&&n.isScrolling&&i.emit("touchMoveOpposite",c));const d=l.pageX,u=l.pageY;if(c.preventedByNestedSwiper)return r.startX=d,void(r.startY=u);if(!i.allowTouchMove)return c.target.matches(n.focusableElements)||(i.allowClick=!1),void(n.isTouched&&(Object.assign(r,{startX:d,startY:u,currentX:d,currentY:u}),n.touchStartTime=rl()));if(s.touchReleaseOnEdges&&!s.loop)if(i.isVertical()){if(u<r.startY&&i.translate<=i.maxTranslate()||u>r.startY&&i.translate>=i.minTranslate())return n.isTouched=!1,void(n.isMoved=!1)}else if(d<r.startX&&i.translate<=i.maxTranslate()||d>r.startX&&i.translate>=i.minTranslate())return;if(e.activeElement&&c.target===e.activeElement&&c.target.matches(n.focusableElements))return n.isMoved=!0,void(i.allowClick=!1);n.allowTouchCallbacks&&i.emit("touchMove",c),r.previousX=r.currentX,r.previousY=r.currentY,r.currentX=d,r.currentY=u;const h=r.currentX-r.startX,p=r.currentY-r.startY;if(i.params.threshold&&Math.sqrt(h**2+p**2)<i.params.threshold)return;if(void 0===n.isScrolling){let t;i.isHorizontal()&&r.currentY===r.startY||i.isVertical()&&r.currentX===r.startX?n.isScrolling=!1:h*h+p*p>=25&&(t=180*Math.atan2(Math.abs(p),Math.abs(h))/Math.PI,n.isScrolling=i.isHorizontal()?t>s.touchAngle:90-t>s.touchAngle)}if(n.isScrolling&&i.emit("touchMoveOpposite",c),void 0===n.startMoving&&(r.currentX===r.startX&&r.currentY===r.startY||(n.startMoving=!0)),n.isScrolling||"touchmove"===c.type&&n.preventTouchMoveFromPointerMove)return void(n.isTouched=!1);if(!n.startMoving)return;i.allowClick=!1,!s.cssMode&&c.cancelable&&c.preventDefault(),s.touchMoveStopPropagation&&!s.nested&&c.stopPropagation();let f=i.isHorizontal()?h:p,g=i.isHorizontal()?r.currentX-r.previousX:r.currentY-r.previousY;s.oneWayMovement&&(f=Math.abs(f)*(o?1:-1),g=Math.abs(g)*(o?1:-1)),r.diff=f,f*=s.touchRatio,o&&(f=-f,g=-g);const m=i.touchesDirection;i.swipeDirection=f>0?"prev":"next",i.touchesDirection=g>0?"prev":"next";const v=i.params.loop&&!s.cssMode,y="next"===i.touchesDirection&&i.allowSlideNext||"prev"===i.touchesDirection&&i.allowSlidePrev;if(!n.isMoved){if(v&&y&&i.loopFix({direction:i.swipeDirection}),n.startTranslate=i.getTranslate(),i.setTransition(0),i.animating){const t=new window.CustomEvent("transitionend",{bubbles:!0,cancelable:!0,detail:{bySwiperTouchMove:!0}});i.wrapperEl.dispatchEvent(t)}n.allowMomentumBounce=!1,!s.grabCursor||!0!==i.allowSlideNext&&!0!==i.allowSlidePrev||i.setGrabCursor(!0),i.emit("sliderFirstMove",c)}if((new Date).getTime(),n.isMoved&&n.allowThresholdMove&&m!==i.touchesDirection&&v&&y&&Math.abs(f)>=1)return Object.assign(r,{startX:d,startY:u,currentX:d,currentY:u,startTranslate:n.currentTranslate}),n.loopSwapReset=!0,void(n.startTranslate=n.currentTranslate);i.emit("sliderMove",c),n.isMoved=!0,n.currentTranslate=f+n.startTranslate;let b=!0,w=s.resistanceRatio;if(s.touchReleaseOnEdges&&(w=0),f>0?(v&&y&&n.allowThresholdMove&&n.currentTranslate>(s.centeredSlides?i.minTranslate()-i.slidesSizesGrid[i.activeIndex+1]:i.minTranslate())&&i.loopFix({direction:"prev",setTranslate:!0,activeSlideIndex:0}),n.currentTranslate>i.minTranslate()&&(b=!1,s.resistance&&(n.currentTranslate=i.minTranslate()-1+(-i.minTranslate()+n.startTranslate+f)**w))):f<0&&(v&&y&&n.allowThresholdMove&&n.currentTranslate<(s.centeredSlides?i.maxTranslate()+i.slidesSizesGrid[i.slidesSizesGrid.length-1]:i.maxTranslate())&&i.loopFix({direction:"next",setTranslate:!0,activeSlideIndex:i.slides.length-("auto"===s.slidesPerView?i.slidesPerViewDynamic():Math.ceil(parseFloat(s.slidesPerView,10)))}),n.currentTranslate<i.maxTranslate()&&(b=!1,s.resistance&&(n.currentTranslate=i.maxTranslate()+1-(i.maxTranslate()-n.startTranslate-f)**w))),b&&(c.preventedByNestedSwiper=!0),!i.allowSlideNext&&"next"===i.swipeDirection&&n.currentTranslate<n.startTranslate&&(n.currentTranslate=n.startTranslate),!i.allowSlidePrev&&"prev"===i.swipeDirection&&n.currentTranslate>n.startTranslate&&(n.currentTranslate=n.startTranslate),i.allowSlidePrev||i.allowSlideNext||(n.currentTranslate=n.startTranslate),s.threshold>0){if(!(Math.abs(f)>s.threshold||n.allowThresholdMove))return void(n.currentTranslate=n.startTranslate);if(!n.allowThresholdMove)return n.allowThresholdMove=!0,r.startX=r.currentX,r.startY=r.currentY,n.currentTranslate=n.startTranslate,void(r.diff=i.isHorizontal()?r.currentX-r.startX:r.currentY-r.startY)}s.followFinger&&!s.cssMode&&((s.freeMode&&s.freeMode.enabled&&i.freeMode||s.watchSlidesProgress)&&(i.updateActiveIndex(),i.updateSlidesClasses()),s.freeMode&&s.freeMode.enabled&&i.freeMode&&i.freeMode.onTouchMove(),i.updateProgress(n.currentTranslate),i.setTranslate(n.currentTranslate))}function Hl(t){const e=this,i=e.touchEventsData;let n,s=t;s.originalEvent&&(s=s.originalEvent);if("touchend"===s.type||"touchcancel"===s.type){if(n=[...s.changedTouches].filter((t=>t.identifier===i.touchId))[0],!n||n.identifier!==i.touchId)return}else{if(null!==i.touchId)return;if(s.pointerId!==i.pointerId)return;n=s}if(["pointercancel","pointerout","pointerleave","contextmenu"].includes(s.type)){if(!(["pointercancel","contextmenu"].includes(s.type)&&(e.browser.isSafari||e.browser.isWebView)))return}i.pointerId=null,i.touchId=null;const{params:r,touches:o,rtlTranslate:a,slidesGrid:l,enabled:c}=e;if(!c)return;if(!r.simulateTouch&&"mouse"===s.pointerType)return;if(i.allowTouchCallbacks&&e.emit("touchEnd",s),i.allowTouchCallbacks=!1,!i.isTouched)return i.isMoved&&r.grabCursor&&e.setGrabCursor(!1),i.isMoved=!1,void(i.startMoving=!1);r.grabCursor&&i.isMoved&&i.isTouched&&(!0===e.allowSlideNext||!0===e.allowSlidePrev)&&e.setGrabCursor(!1);const d=rl(),u=d-i.touchStartTime;if(e.allowClick){const t=s.path||s.composedPath&&s.composedPath();e.updateClickedSlide(t&&t[0]||s.target,t),e.emit("tap click",s),u<300&&d-i.lastClickTime<300&&e.emit("doubleTap doubleClick",s)}if(i.lastClickTime=rl(),sl((()=>{e.destroyed||(e.allowClick=!0)})),!i.isTouched||!i.isMoved||!e.swipeDirection||0===o.diff&&!i.loopSwapReset||i.currentTranslate===i.startTranslate&&!i.loopSwapReset)return i.isTouched=!1,i.isMoved=!1,void(i.startMoving=!1);let h;if(i.isTouched=!1,i.isMoved=!1,i.startMoving=!1,h=r.followFinger?a?e.translate:-e.translate:-i.currentTranslate,r.cssMode)return;if(r.freeMode&&r.freeMode.enabled)return void e.freeMode.onTouchEnd({currentPos:h});const p=h>=-e.maxTranslate()&&!e.params.loop;let f=0,g=e.slidesSizesGrid[0];for(let t=0;t<l.length;t+=t<r.slidesPerGroupSkip?1:r.slidesPerGroup){const e=t<r.slidesPerGroupSkip-1?1:r.slidesPerGroup;void 0!==l[t+e]?(p||h>=l[t]&&h<l[t+e])&&(f=t,g=l[t+e]-l[t]):(p||h>=l[t])&&(f=t,g=l[l.length-1]-l[l.length-2])}let m=null,v=null;r.rewind&&(e.isBeginning?v=r.virtual&&r.virtual.enabled&&e.virtual?e.virtual.slides.length-1:e.slides.length-1:e.isEnd&&(m=0));const y=(h-l[f])/g,b=f<r.slidesPerGroupSkip-1?1:r.slidesPerGroup;if(u>r.longSwipesMs){if(!r.longSwipes)return void e.slideTo(e.activeIndex);"next"===e.swipeDirection&&(y>=r.longSwipesRatio?e.slideTo(r.rewind&&e.isEnd?m:f+b):e.slideTo(f)),"prev"===e.swipeDirection&&(y>1-r.longSwipesRatio?e.slideTo(f+b):null!==v&&y<0&&Math.abs(y)>r.longSwipesRatio?e.slideTo(v):e.slideTo(f))}else{if(!r.shortSwipes)return void e.slideTo(e.activeIndex);e.navigation&&(s.target===e.navigation.nextEl||s.target===e.navigation.prevEl)?s.target===e.navigation.nextEl?e.slideTo(f+b):e.slideTo(f):("next"===e.swipeDirection&&e.slideTo(null!==m?m:f+b),"prev"===e.swipeDirection&&e.slideTo(null!==v?v:f))}}function Gl(){const t=this,{params:e,el:i}=t;if(i&&0===i.offsetWidth)return;e.breakpoints&&t.setBreakpoint();const{allowSlideNext:n,allowSlidePrev:s,snapGrid:r}=t,o=t.virtual&&t.params.virtual.enabled;t.allowSlideNext=!0,t.allowSlidePrev=!0,t.updateSize(),t.updateSlides(),t.updateSlidesClasses();const a=o&&e.loop;!("auto"===e.slidesPerView||e.slidesPerView>1)||!t.isEnd||t.isBeginning||t.params.centeredSlides||a?t.params.loop&&!o?t.slideToLoop(t.realIndex,0,!1,!0):t.slideTo(t.activeIndex,0,!1,!0):t.slideTo(t.slides.length-1,0,!1,!0),t.autoplay&&t.autoplay.running&&t.autoplay.paused&&(clearTimeout(t.autoplay.resizeTimeout),t.autoplay.resizeTimeout=setTimeout((()=>{t.autoplay&&t.autoplay.running&&t.autoplay.paused&&t.autoplay.resume()}),500)),t.allowSlidePrev=s,t.allowSlideNext=n,t.params.watchOverflow&&r!==t.snapGrid&&t.checkOverflow()}function Yl(t){const e=this;e.enabled&&(e.allowClick||(e.params.preventClicks&&t.preventDefault(),e.params.preventClicksPropagation&&e.animating&&(t.stopPropagation(),t.stopImmediatePropagation())))}function Vl(){const t=this,{wrapperEl:e,rtlTranslate:i,enabled:n}=t;if(!n)return;let s;t.previousTranslate=t.translate,t.isHorizontal()?t.translate=-e.scrollLeft:t.translate=-e.scrollTop,0===t.translate&&(t.translate=0),t.updateActiveIndex(),t.updateSlidesClasses();const r=t.maxTranslate()-t.minTranslate();s=0===r?0:(t.translate-t.minTranslate())/r,s!==t.progress&&t.updateProgress(i?-t.translate:t.translate),t.emit("setTranslate",t.translate,!1)}function Nl(t){const e=this;Ml(e,t.target),e.params.cssMode||"auto"!==e.params.slidesPerView&&!e.params.autoHeight||e.update()}function jl(){const t=this;t.documentTouchHandlerProceeded||(t.documentTouchHandlerProceeded=!0,t.params.touchReleaseOnEdges&&(t.el.style.touchAction="auto"))}const Wl=(t,e)=>{const i=el(),{params:n,el:s,wrapperEl:r,device:o}=t,a=!!n.nested,l="on"===e?"addEventListener":"removeEventListener",c=e;s&&"string"!=typeof s&&(i[l]("touchstart",t.onDocumentTouchStart,{passive:!1,capture:a}),s[l]("touchstart",t.onTouchStart,{passive:!1}),s[l]("pointerdown",t.onTouchStart,{passive:!1}),i[l]("touchmove",t.onTouchMove,{passive:!1,capture:a}),i[l]("pointermove",t.onTouchMove,{passive:!1,capture:a}),i[l]("touchend",t.onTouchEnd,{passive:!0}),i[l]("pointerup",t.onTouchEnd,{passive:!0}),i[l]("pointercancel",t.onTouchEnd,{passive:!0}),i[l]("touchcancel",t.onTouchEnd,{passive:!0}),i[l]("pointerout",t.onTouchEnd,{passive:!0}),i[l]("pointerleave",t.onTouchEnd,{passive:!0}),i[l]("contextmenu",t.onTouchEnd,{passive:!0}),(n.preventClicks||n.preventClicksPropagation)&&s[l]("click",t.onClick,!0),n.cssMode&&r[l]("scroll",t.onScroll),n.updateOnWindowResize?t[c](o.ios||o.android?"resize orientationchange observerUpdate":"resize observerUpdate",Gl,!0):t[c]("observerUpdate",Gl,!0),s[l]("load",t.onLoad,{capture:!0}))};const $l=(t,e)=>t.grid&&e.grid&&e.grid.rows>1;var Xl={init:!0,direction:"horizontal",oneWayMovement:!1,swiperElementNodeName:"SWIPER-CONTAINER",touchEventsTarget:"wrapper",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,resizeObserver:!0,nested:!1,createElements:!1,eventsPrefix:"swiper",enabled:!0,focusableElements:"input, select, option, textarea, button, video, label",width:null,height:null,preventInteractionOnTransition:!1,userAgent:null,url:null,edgeSwipeDetection:!1,edgeSwipeThreshold:20,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,breakpointsBase:"window",spaceBetween:0,slidesPerView:1,slidesPerGroup:1,slidesPerGroupSkip:0,slidesPerGroupAuto:!1,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!0,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:5,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,loop:!1,loopAddBlankSlides:!0,loopAdditionalSlides:0,loopPreventsSliding:!0,rewind:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,maxBackfaceHiddenSlides:10,containerModifierClass:"swiper-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-blank",slideActiveClass:"swiper-slide-active",slideVisibleClass:"swiper-slide-visible",slideFullyVisibleClass:"swiper-slide-fully-visible",slideNextClass:"swiper-slide-next",slidePrevClass:"swiper-slide-prev",wrapperClass:"swiper-wrapper",lazyPreloaderClass:"swiper-lazy-preloader",lazyPreloadPrevNext:0,runCallbacksOnInit:!0,_emitClasses:!1};function ql(t,e){return function(i){void 0===i&&(i={});const n=Object.keys(i)[0],s=i[n];"object"==typeof s&&null!==s?(!0===t[n]&&(t[n]={enabled:!0}),"navigation"===n&&t[n]&&t[n].enabled&&!t[n].prevEl&&!t[n].nextEl&&(t[n].auto=!0),["pagination","scrollbar"].indexOf(n)>=0&&t[n]&&t[n].enabled&&!t[n].el&&(t[n].auto=!0),n in t&&"enabled"in s?("object"!=typeof t[n]||"enabled"in t[n]||(t[n].enabled=!0),t[n]||(t[n]={enabled:!1}),ll(e,i)):ll(e,i)):ll(e,i)}}const Ul={eventsEmitter:Cl,update:Al,translate:Pl,transition:{setTransition:function(t,e){const i=this;i.params.cssMode||(i.wrapperEl.style.transitionDuration=`${t}ms`,i.wrapperEl.style.transitionDelay=0===t?"0ms":""),i.emit("setTransition",t,e)},transitionStart:function(t,e){void 0===t&&(t=!0);const i=this,{params:n}=i;n.cssMode||(n.autoHeight&&i.updateAutoHeight(),Ll({swiper:i,runCallbacks:t,direction:e,step:"Start"}))},transitionEnd:function(t,e){void 0===t&&(t=!0);const i=this,{params:n}=i;i.animating=!1,n.cssMode||(i.setTransition(0),Ll({swiper:i,runCallbacks:t,direction:e,step:"End"}))}},slide:Dl,loop:zl,grabCursor:{setGrabCursor:function(t){const e=this;if(!e.params.simulateTouch||e.params.watchOverflow&&e.isLocked||e.params.cssMode)return;const i="container"===e.params.touchEventsTarget?e.el:e.wrapperEl;e.isElement&&(e.__preventObserver__=!0),i.style.cursor="move",i.style.cursor=t?"grabbing":"grab",e.isElement&&requestAnimationFrame((()=>{e.__preventObserver__=!1}))},unsetGrabCursor:function(){const t=this;t.params.watchOverflow&&t.isLocked||t.params.cssMode||(t.isElement&&(t.__preventObserver__=!0),t["container"===t.params.touchEventsTarget?"el":"wrapperEl"].style.cursor="",t.isElement&&requestAnimationFrame((()=>{t.__preventObserver__=!1})))}},events:{attachEvents:function(){const t=this,{params:e}=t;t.onTouchStart=Rl.bind(t),t.onTouchMove=Fl.bind(t),t.onTouchEnd=Hl.bind(t),t.onDocumentTouchStart=jl.bind(t),e.cssMode&&(t.onScroll=Vl.bind(t)),t.onClick=Yl.bind(t),t.onLoad=Nl.bind(t),Wl(t,"on")},detachEvents:function(){Wl(this,"off")}},breakpoints:{setBreakpoint:function(){const t=this,{realIndex:e,initialized:i,params:n,el:s}=t,r=n.breakpoints;if(!r||r&&0===Object.keys(r).length)return;const o=t.getBreakpoint(r,t.params.breakpointsBase,t.el);if(!o||t.currentBreakpoint===o)return;const a=(o in r?r[o]:void 0)||t.originalParams,l=$l(t,n),c=$l(t,a),d=t.params.grabCursor,u=a.grabCursor,h=n.enabled;l&&!c?(s.classList.remove(`${n.containerModifierClass}grid`,`${n.containerModifierClass}grid-column`),t.emitContainerClasses()):!l&&c&&(s.classList.add(`${n.containerModifierClass}grid`),(a.grid.fill&&"column"===a.grid.fill||!a.grid.fill&&"column"===n.grid.fill)&&s.classList.add(`${n.containerModifierClass}grid-column`),t.emitContainerClasses()),d&&!u?t.unsetGrabCursor():!d&&u&&t.setGrabCursor(),["navigation","pagination","scrollbar"].forEach((e=>{if(void 0===a[e])return;const i=n[e]&&n[e].enabled,s=a[e]&&a[e].enabled;i&&!s&&t[e].disable(),!i&&s&&t[e].enable()}));const p=a.direction&&a.direction!==n.direction,f=n.loop&&(a.slidesPerView!==n.slidesPerView||p),g=n.loop;p&&i&&t.changeDirection(),ll(t.params,a);const m=t.params.enabled,v=t.params.loop;Object.assign(t,{allowTouchMove:t.params.allowTouchMove,allowSlideNext:t.params.allowSlideNext,allowSlidePrev:t.params.allowSlidePrev}),h&&!m?t.disable():!h&&m&&t.enable(),t.currentBreakpoint=o,t.emit("_beforeBreakpoint",a),i&&(f?(t.loopDestroy(),t.loopCreate(e),t.updateSlides()):!g&&v?(t.loopCreate(e),t.updateSlides()):g&&!v&&t.loopDestroy()),t.emit("breakpoint",a)},getBreakpoint:function(t,e,i){if(void 0===e&&(e="window"),!t||"container"===e&&!i)return;let n=!1;const s=nl(),r="window"===e?s.innerHeight:i.clientHeight,o=Object.keys(t).map((t=>{if("string"==typeof t&&0===t.indexOf("@")){const e=parseFloat(t.substr(1));return{value:r*e,point:t}}return{value:t,point:t}}));o.sort(((t,e)=>parseInt(t.value,10)-parseInt(e.value,10)));for(let t=0;t<o.length;t+=1){const{point:r,value:a}=o[t];"window"===e?s.matchMedia(`(min-width: ${a}px)`).matches&&(n=r):a<=i.clientWidth&&(n=r)}return n||"max"}},checkOverflow:{checkOverflow:function(){const t=this,{isLocked:e,params:i}=t,{slidesOffsetBefore:n}=i;if(n){const e=t.slides.length-1,i=t.slidesGrid[e]+t.slidesSizesGrid[e]+2*n;t.isLocked=t.size>i}else t.isLocked=1===t.snapGrid.length;!0===i.allowSlideNext&&(t.allowSlideNext=!t.isLocked),!0===i.allowSlidePrev&&(t.allowSlidePrev=!t.isLocked),e&&e!==t.isLocked&&(t.isEnd=!1),e!==t.isLocked&&t.emit(t.isLocked?"lock":"unlock")}},classes:{addClasses:function(){const t=this,{classNames:e,params:i,rtl:n,el:s,device:r}=t,o=function(t,e){const i=[];return t.forEach((t=>{"object"==typeof t?Object.keys(t).forEach((n=>{t[n]&&i.push(e+n)})):"string"==typeof t&&i.push(e+t)})),i}(["initialized",i.direction,{"free-mode":t.params.freeMode&&i.freeMode.enabled},{autoheight:i.autoHeight},{rtl:n},{grid:i.grid&&i.grid.rows>1},{"grid-column":i.grid&&i.grid.rows>1&&"column"===i.grid.fill},{android:r.android},{ios:r.ios},{"css-mode":i.cssMode},{centered:i.cssMode&&i.centeredSlides},{"watch-progress":i.watchSlidesProgress}],i.containerModifierClass);e.push(...o),s.classList.add(...e),t.emitContainerClasses()},removeClasses:function(){const{el:t,classNames:e}=this;t&&"string"!=typeof t&&(t.classList.remove(...e),this.emitContainerClasses())}}},Kl={};class Zl{constructor(){let t,e;for(var i=arguments.length,n=new Array(i),s=0;s<i;s++)n[s]=arguments[s];1===n.length&&n[0].constructor&&"Object"===Object.prototype.toString.call(n[0]).slice(8,-1)?e=n[0]:[t,e]=n,e||(e={}),e=ll({},e),t&&!e.el&&(e.el=t);const r=el();if(e.el&&"string"==typeof e.el&&r.querySelectorAll(e.el).length>1){const t=[];return r.querySelectorAll(e.el).forEach((i=>{const n=ll({},e,{el:i});t.push(new Zl(n))})),t}const o=this;o.__swiper__=!0,o.support=xl(),o.device=Tl({userAgent:e.userAgent}),o.browser=Sl(),o.eventsListeners={},o.eventsAnyListeners=[],o.modules=[...o.__modules__],e.modules&&Array.isArray(e.modules)&&o.modules.push(...e.modules);const a={};o.modules.forEach((t=>{t({params:e,swiper:o,extendParams:ql(e,a),on:o.on.bind(o),once:o.once.bind(o),off:o.off.bind(o),emit:o.emit.bind(o)})}));const l=ll({},Xl,a);return o.params=ll({},l,Kl,e),o.originalParams=ll({},o.params),o.passedParams=ll({},e),o.params&&o.params.on&&Object.keys(o.params.on).forEach((t=>{o.on(t,o.params.on[t])})),o.params&&o.params.onAny&&o.onAny(o.params.onAny),Object.assign(o,{enabled:o.params.enabled,el:t,classNames:[],slides:[],slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:()=>"horizontal"===o.params.direction,isVertical:()=>"vertical"===o.params.direction,activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,cssOverflowAdjustment(){return Math.trunc(this.translate/2**23)*2**23},allowSlideNext:o.params.allowSlideNext,allowSlidePrev:o.params.allowSlidePrev,touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,focusableElements:o.params.focusableElements,lastClickTime:0,clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,startMoving:void 0,pointerId:null,touchId:null},allowClick:!0,allowTouchMove:o.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),o.emit("_swiper"),o.params.init&&o.init(),o}getDirectionLabel(t){return this.isHorizontal()?t:{width:"height","margin-top":"margin-left","margin-bottom ":"margin-right","margin-left":"margin-top","margin-right":"margin-bottom","padding-left":"padding-top","padding-right":"padding-bottom",marginRight:"marginBottom"}[t]}getSlideIndex(t){const{slidesEl:e,params:i}=this,n=gl(ul(e,`.${i.slideClass}, swiper-slide`)[0]);return gl(t)-n}getSlideIndexByData(t){return this.getSlideIndex(this.slides.filter((e=>1*e.getAttribute("data-swiper-slide-index")===t))[0])}recalcSlides(){const{slidesEl:t,params:e}=this;this.slides=ul(t,`.${e.slideClass}, swiper-slide`)}enable(){const t=this;t.enabled||(t.enabled=!0,t.params.grabCursor&&t.setGrabCursor(),t.emit("enable"))}disable(){const t=this;t.enabled&&(t.enabled=!1,t.params.grabCursor&&t.unsetGrabCursor(),t.emit("disable"))}setProgress(t,e){const i=this;t=Math.min(Math.max(t,0),1);const n=i.minTranslate(),s=(i.maxTranslate()-n)*t+n;i.translateTo(s,void 0===e?0:e),i.updateActiveIndex(),i.updateSlidesClasses()}emitContainerClasses(){const t=this;if(!t.params._emitClasses||!t.el)return;const e=t.el.className.split(" ").filter((e=>0===e.indexOf("swiper")||0===e.indexOf(t.params.containerModifierClass)));t.emit("_containerClasses",e.join(" "))}getSlideClasses(t){const e=this;return e.destroyed?"":t.className.split(" ").filter((t=>0===t.indexOf("swiper-slide")||0===t.indexOf(e.params.slideClass))).join(" ")}emitSlidesClasses(){const t=this;if(!t.params._emitClasses||!t.el)return;const e=[];t.slides.forEach((i=>{const n=t.getSlideClasses(i);e.push({slideEl:i,classNames:n}),t.emit("_slideClass",i,n)})),t.emit("_slideClasses",e)}slidesPerViewDynamic(t,e){void 0===t&&(t="current"),void 0===e&&(e=!1);const{params:i,slides:n,slidesGrid:s,slidesSizesGrid:r,size:o,activeIndex:a}=this;let l=1;if("number"==typeof i.slidesPerView)return i.slidesPerView;if(i.centeredSlides){let t,e=n[a]?Math.ceil(n[a].swiperSlideSize):0;for(let i=a+1;i<n.length;i+=1)n[i]&&!t&&(e+=Math.ceil(n[i].swiperSlideSize),l+=1,e>o&&(t=!0));for(let i=a-1;i>=0;i-=1)n[i]&&!t&&(e+=n[i].swiperSlideSize,l+=1,e>o&&(t=!0))}else if("current"===t)for(let t=a+1;t<n.length;t+=1){(e?s[t]+r[t]-s[a]<o:s[t]-s[a]<o)&&(l+=1)}else for(let t=a-1;t>=0;t-=1){s[a]-s[t]<o&&(l+=1)}return l}update(){const t=this;if(!t||t.destroyed)return;const{snapGrid:e,params:i}=t;function n(){const e=t.rtlTranslate?-1*t.translate:t.translate,i=Math.min(Math.max(e,t.maxTranslate()),t.minTranslate());t.setTranslate(i),t.updateActiveIndex(),t.updateSlidesClasses()}let s;if(i.breakpoints&&t.setBreakpoint(),[...t.el.querySelectorAll('[loading="lazy"]')].forEach((e=>{e.complete&&Ml(t,e)})),t.updateSize(),t.updateSlides(),t.updateProgress(),t.updateSlidesClasses(),i.freeMode&&i.freeMode.enabled&&!i.cssMode)n(),i.autoHeight&&t.updateAutoHeight();else{if(("auto"===i.slidesPerView||i.slidesPerView>1)&&t.isEnd&&!i.centeredSlides){const e=t.virtual&&i.virtual.enabled?t.virtual.slides:t.slides;s=t.slideTo(e.length-1,0,!1,!0)}else s=t.slideTo(t.activeIndex,0,!1,!0);s||n()}i.watchOverflow&&e!==t.snapGrid&&t.checkOverflow(),t.emit("update")}changeDirection(t,e){void 0===e&&(e=!0);const i=this,n=i.params.direction;return t||(t="horizontal"===n?"vertical":"horizontal"),t===n||"horizontal"!==t&&"vertical"!==t||(i.el.classList.remove(`${i.params.containerModifierClass}${n}`),i.el.classList.add(`${i.params.containerModifierClass}${t}`),i.emitContainerClasses(),i.params.direction=t,i.slides.forEach((e=>{"vertical"===t?e.style.width="":e.style.height=""})),i.emit("changeDirection"),e&&i.update()),i}changeLanguageDirection(t){const e=this;e.rtl&&"rtl"===t||!e.rtl&&"ltr"===t||(e.rtl="rtl"===t,e.rtlTranslate="horizontal"===e.params.direction&&e.rtl,e.rtl?(e.el.classList.add(`${e.params.containerModifierClass}rtl`),e.el.dir="rtl"):(e.el.classList.remove(`${e.params.containerModifierClass}rtl`),e.el.dir="ltr"),e.update())}mount(t){const e=this;if(e.mounted)return!0;let i=t||e.params.el;if("string"==typeof i&&(i=document.querySelector(i)),!i)return!1;i.swiper=e,i.parentNode&&i.parentNode.host&&i.parentNode.host.nodeName===e.params.swiperElementNodeName.toUpperCase()&&(e.isElement=!0);const n=()=>`.${(e.params.wrapperClass||"").trim().split(" ").join(".")}`;let s=(()=>{if(i&&i.shadowRoot&&i.shadowRoot.querySelector){return i.shadowRoot.querySelector(n())}return ul(i,n())[0]})();return!s&&e.params.createElements&&(s=pl("div",e.params.wrapperClass),i.append(s),ul(i,`.${e.params.slideClass}`).forEach((t=>{s.append(t)}))),Object.assign(e,{el:i,wrapperEl:s,slidesEl:e.isElement&&!i.parentNode.host.slideSlots?i.parentNode.host:s,hostEl:e.isElement?i.parentNode.host:i,mounted:!0,rtl:"rtl"===i.dir.toLowerCase()||"rtl"===fl(i,"direction"),rtlTranslate:"horizontal"===e.params.direction&&("rtl"===i.dir.toLowerCase()||"rtl"===fl(i,"direction")),wrongRTL:"-webkit-box"===fl(s,"display")}),!0}init(t){const e=this;if(e.initialized)return e;if(!1===e.mount(t))return e;e.emit("beforeInit"),e.params.breakpoints&&e.setBreakpoint(),e.addClasses(),e.updateSize(),e.updateSlides(),e.params.watchOverflow&&e.checkOverflow(),e.params.grabCursor&&e.enabled&&e.setGrabCursor(),e.params.loop&&e.virtual&&e.params.virtual.enabled?e.slideTo(e.params.initialSlide+e.virtual.slidesBefore,0,e.params.runCallbacksOnInit,!1,!0):e.slideTo(e.params.initialSlide,0,e.params.runCallbacksOnInit,!1,!0),e.params.loop&&e.loopCreate(),e.attachEvents();const i=[...e.el.querySelectorAll('[loading="lazy"]')];return e.isElement&&i.push(...e.hostEl.querySelectorAll('[loading="lazy"]')),i.forEach((t=>{t.complete?Ml(e,t):t.addEventListener("load",(t=>{Ml(e,t.target)}))})),Il(e),e.initialized=!0,Il(e),e.emit("init"),e.emit("afterInit"),e}destroy(t,e){void 0===t&&(t=!0),void 0===e&&(e=!0);const i=this,{params:n,el:s,wrapperEl:r,slides:o}=i;return void 0===i.params||i.destroyed||(i.emit("beforeDestroy"),i.initialized=!1,i.detachEvents(),n.loop&&i.loopDestroy(),e&&(i.removeClasses(),s&&"string"!=typeof s&&s.removeAttribute("style"),r&&r.removeAttribute("style"),o&&o.length&&o.forEach((t=>{t.classList.remove(n.slideVisibleClass,n.slideFullyVisibleClass,n.slideActiveClass,n.slideNextClass,n.slidePrevClass),t.removeAttribute("style"),t.removeAttribute("data-swiper-slide-index")}))),i.emit("destroy"),Object.keys(i.eventsListeners).forEach((t=>{i.off(t)})),!1!==t&&(i.el&&"string"!=typeof i.el&&(i.el.swiper=null),function(t){const e=t;Object.keys(e).forEach((t=>{try{e[t]=null}catch(t){}try{delete e[t]}catch(t){}}))}(i)),i.destroyed=!0),null}static extendDefaults(t){ll(Kl,t)}static get extendedDefaults(){return Kl}static get defaults(){return Xl}static installModule(t){Zl.prototype.__modules__||(Zl.prototype.__modules__=[]);const e=Zl.prototype.__modules__;"function"==typeof t&&e.indexOf(t)<0&&e.push(t)}static use(t){return Array.isArray(t)?(t.forEach((t=>Zl.installModule(t))),Zl):(Zl.installModule(t),Zl)}}function Ql(t){return void 0===t&&(t=""),`.${t.trim().replace(/([\.:!+\/])/g,"\\$1").replace(/ /g,".")}`}function Jl(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function tc(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function ec(t,e,i){return e&&tc(t.prototype,e),i&&tc(t,i),t}function ic(t,e,i){return e in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t}function nc(t,e){var i=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),i.push.apply(i,n)}return i}function sc(t){for(var e=1;e<arguments.length;e++){var i=null!=arguments[e]?arguments[e]:{};e%2?nc(Object(i),!0).forEach((function(e){ic(t,e,i[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(i)):nc(Object(i)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(i,e))}))}return t}function rc(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&ac(t,e)}function oc(t){return oc=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},oc(t)}function ac(t,e){return ac=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},ac(t,e)}function lc(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function cc(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var i,n=oc(t);if(e){var s=oc(this).constructor;i=Reflect.construct(n,arguments,s)}else i=n.apply(this,arguments);return function(t,e){return!e||"object"!=typeof e&&"function"!=typeof e?lc(t):e}(this,i)}}function dc(t,e,i){return dc="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,i){var n=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=oc(t)););return t}(t,e);if(n){var s=Object.getOwnPropertyDescriptor(n,e);return s.get?s.get.call(i):s.value}},dc(t,e,i||t)}function uc(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(t)))return;var i=[],n=!0,s=!1,r=void 0;try{for(var o,a=t[Symbol.iterator]();!(n=(o=a.next()).done)&&(i.push(o.value),!e||i.length!==e);n=!0);}catch(t){s=!0,r=t}finally{try{n||null==a.return||a.return()}finally{if(s)throw r}}return i}(t,e)||pc(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function hc(t){return function(t){if(Array.isArray(t))return fc(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||pc(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function pc(t,e){if(t){if("string"==typeof t)return fc(t,e);var i=Object.prototype.toString.call(t).slice(8,-1);return"Object"===i&&t.constructor&&(i=t.constructor.name),"Map"===i||"Set"===i?Array.from(t):"Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)?fc(t,e):void 0}}function fc(t,e){(null==e||e>t.length)&&(e=t.length);for(var i=0,n=new Array(e);i<e;i++)n[i]=t[i];return n}Object.keys(Ul).forEach((t=>{Object.keys(Ul[t]).forEach((e=>{Zl.prototype[e]=Ul[t][e]}))})),Zl.use([function(t){let{swiper:e,on:i,emit:n}=t;const s=nl();let r=null,o=null;const a=()=>{e&&!e.destroyed&&e.initialized&&(n("beforeResize"),n("resize"))},l=()=>{e&&!e.destroyed&&e.initialized&&n("orientationchange")};i("init",(()=>{e.params.resizeObserver&&void 0!==s.ResizeObserver?e&&!e.destroyed&&e.initialized&&(r=new ResizeObserver((t=>{o=s.requestAnimationFrame((()=>{const{width:i,height:n}=e;let s=i,r=n;t.forEach((t=>{let{contentBoxSize:i,contentRect:n,target:o}=t;o&&o!==e.el||(s=n?n.width:(i[0]||i).inlineSize,r=n?n.height:(i[0]||i).blockSize)})),s===i&&r===n||a()}))})),r.observe(e.el)):(s.addEventListener("resize",a),s.addEventListener("orientationchange",l))})),i("destroy",(()=>{o&&s.cancelAnimationFrame(o),r&&r.unobserve&&e.el&&(r.unobserve(e.el),r=null),s.removeEventListener("resize",a),s.removeEventListener("orientationchange",l)}))},function(t){let{swiper:e,extendParams:i,on:n,emit:s}=t;const r=[],o=nl(),a=function(t,i){void 0===i&&(i={});const n=new(o.MutationObserver||o.WebkitMutationObserver)((t=>{if(e.__preventObserver__)return;if(1===t.length)return void s("observerUpdate",t[0]);const i=function(){s("observerUpdate",t[0])};o.requestAnimationFrame?o.requestAnimationFrame(i):o.setTimeout(i,0)}));n.observe(t,{attributes:void 0===i.attributes||i.attributes,childList:void 0===i.childList||i.childList,characterData:void 0===i.characterData||i.characterData}),r.push(n)};i({observer:!1,observeParents:!1,observeSlideChildren:!1}),n("init",(()=>{if(e.params.observer){if(e.params.observeParents){const t=ml(e.hostEl);for(let e=0;e<t.length;e+=1)a(t[e])}a(e.hostEl,{childList:e.params.observeSlideChildren}),a(e.wrapperEl,{attributes:!1})}})),n("destroy",(()=>{r.forEach((t=>{t.disconnect()})),r.splice(0,r.length)}))}]);var gc={el:document,name:"scroll",offset:[0,0],repeat:!1,smooth:!1,initPosition:{x:0,y:0},direction:"vertical",gestureDirection:"vertical",reloadOnContextChange:!1,lerp:.1,class:"is-inview",scrollbarContainer:!1,scrollbarClass:"c-scrollbar",scrollingClass:"has-scroll-scrolling",draggingClass:"has-scroll-dragging",smoothClass:"has-scroll-smooth",initClass:"has-scroll-init",getSpeed:!1,getDirection:!1,scrollFromAnywhere:!1,multiplier:1,firefoxMultiplier:50,touchMultiplier:2,resetNativeScroll:!0,tablet:{smooth:!1,direction:"vertical",gestureDirection:"vertical",breakpoint:1024},smartphone:{smooth:!1,direction:"vertical",gestureDirection:"vertical"}},mc=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};Jl(this,t),Object.assign(this,gc,e),this.smartphone=gc.smartphone,e.smartphone&&Object.assign(this.smartphone,e.smartphone),this.tablet=gc.tablet,e.tablet&&Object.assign(this.tablet,e.tablet),this.namespace="locomotive",this.html=document.documentElement,this.windowHeight=window.innerHeight,this.windowWidth=window.innerWidth,this.windowMiddle={x:this.windowWidth/2,y:this.windowHeight/2},this.els={},this.currentElements={},this.listeners={},this.hasScrollTicking=!1,this.hasCallEventSet=!1,this.checkScroll=this.checkScroll.bind(this),this.checkResize=this.checkResize.bind(this),this.checkEvent=this.checkEvent.bind(this),this.instance={scroll:{x:0,y:0},limit:{x:this.html.offsetWidth,y:this.html.offsetHeight},currentElements:this.currentElements},this.isMobile?this.isTablet?this.context="tablet":this.context="smartphone":this.context="desktop",this.isMobile&&(this.direction=this[this.context].direction),"horizontal"===this.direction?this.directionAxis="x":this.directionAxis="y",this.getDirection&&(this.instance.direction=null),this.getDirection&&(this.instance.speed=0),this.html.classList.add(this.initClass),window.addEventListener("resize",this.checkResize,!1)}return ec(t,[{key:"init",value:function(){this.initEvents()}},{key:"checkScroll",value:function(){this.dispatchScroll()}},{key:"checkResize",value:function(){var t=this;this.resizeTick||(this.resizeTick=!0,requestAnimationFrame((function(){t.resize(),t.resizeTick=!1})))}},{key:"resize",value:function(){}},{key:"checkContext",value:function(){if(this.reloadOnContextChange){this.isMobile=/Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||"MacIntel"===navigator.platform&&navigator.maxTouchPoints>1||this.windowWidth<this.tablet.breakpoint,this.isTablet=this.isMobile&&this.windowWidth>=this.tablet.breakpoint;var t=this.context;if(this.isMobile?this.isTablet?this.context="tablet":this.context="smartphone":this.context="desktop",t!=this.context)("desktop"==t?this.smooth:this[t].smooth)!=("desktop"==this.context?this.smooth:this[this.context].smooth)&&window.location.reload()}}},{key:"initEvents",value:function(){var t=this;this.scrollToEls=this.el.querySelectorAll("[data-".concat(this.name,"-to]")),this.setScrollTo=this.setScrollTo.bind(this),this.scrollToEls.forEach((function(e){e.addEventListener("click",t.setScrollTo,!1)}))}},{key:"setScrollTo",value:function(t){t.preventDefault(),this.scrollTo(t.currentTarget.getAttribute("data-".concat(this.name,"-href"))||t.currentTarget.getAttribute("href"),{offset:t.currentTarget.getAttribute("data-".concat(this.name,"-offset"))})}},{key:"addElements",value:function(){}},{key:"detectElements",value:function(t){var e=this,i=this.instance.scroll.y,n=i+this.windowHeight,s=this.instance.scroll.x,r=s+this.windowWidth;Object.entries(this.els).forEach((function(o){var a=uc(o,2),l=a[0],c=a[1];if(!c||c.inView&&!t||("horizontal"===e.direction?r>=c.left&&s<c.right&&e.setInView(c,l):n>=c.top&&i<c.bottom&&e.setInView(c,l)),c&&c.inView)if("horizontal"===e.direction){var d=c.right-c.left;c.progress=(e.instance.scroll.x-(c.left-e.windowWidth))/(d+e.windowWidth),(r<c.left||s>c.right)&&e.setOutOfView(c,l)}else{var u=c.bottom-c.top;c.progress=(e.instance.scroll.y-(c.top-e.windowHeight))/(u+e.windowHeight),(n<c.top||i>c.bottom)&&e.setOutOfView(c,l)}})),this.hasScrollTicking=!1}},{key:"setInView",value:function(t,e){this.els[e].inView=!0,t.el.classList.add(t.class),this.currentElements[e]=t,t.call&&this.hasCallEventSet&&(this.dispatchCall(t,"enter"),t.repeat||(this.els[e].call=!1))}},{key:"setOutOfView",value:function(t,e){var i=this;this.els[e].inView=!1,Object.keys(this.currentElements).forEach((function(t){t===e&&delete i.currentElements[t]})),t.call&&this.hasCallEventSet&&this.dispatchCall(t,"exit"),t.repeat&&t.el.classList.remove(t.class)}},{key:"dispatchCall",value:function(t,e){this.callWay=e,this.callValue=t.call.split(",").map((function(t){return t.trim()})),this.callObj=t,1==this.callValue.length&&(this.callValue=this.callValue[0]);var i=new Event(this.namespace+"call");this.el.dispatchEvent(i)}},{key:"dispatchScroll",value:function(){var t=new Event(this.namespace+"scroll");this.el.dispatchEvent(t)}},{key:"setEvents",value:function(t,e){this.listeners[t]||(this.listeners[t]=[]);var i=this.listeners[t];i.push(e),1===i.length&&this.el.addEventListener(this.namespace+t,this.checkEvent,!1),"call"===t&&(this.hasCallEventSet=!0,this.detectElements(!0))}},{key:"unsetEvents",value:function(t,e){if(this.listeners[t]){var i=this.listeners[t],n=i.indexOf(e);n<0||(i.splice(n,1),0===i.index&&this.el.removeEventListener(this.namespace+t,this.checkEvent,!1))}}},{key:"checkEvent",value:function(t){var e=this,i=t.type.replace(this.namespace,""),n=this.listeners[i];n&&0!==n.length&&n.forEach((function(t){switch(i){case"scroll":return t(e.instance);case"call":return t(e.callValue,e.callWay,e.callObj);default:return t()}}))}},{key:"startScroll",value:function(){}},{key:"stopScroll",value:function(){}},{key:"setScroll",value:function(t,e){this.instance.scroll={x:0,y:0}}},{key:"destroy",value:function(){var t=this;window.removeEventListener("resize",this.checkResize,!1),Object.keys(this.listeners).forEach((function(e){t.el.removeEventListener(t.namespace+e,t.checkEvent,!1)})),this.listeners={},this.scrollToEls.forEach((function(e){e.removeEventListener("click",t.setScrollTo,!1)})),this.html.classList.remove(this.initClass)}}]),t}(),vc="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==t.g?t.g:"undefined"!=typeof self?self:{};function yc(t,e){return t(e={exports:{}},e.exports),e.exports}var bc=yc((function(t,e){t.exports={polyfill:function(){var t=window,e=document;if(!("scrollBehavior"in e.documentElement.style)||!0===t.__forceSmoothScrollPolyfill__){var i,n=t.HTMLElement||t.Element,s=468,r={scroll:t.scroll||t.scrollTo,scrollBy:t.scrollBy,elementScroll:n.prototype.scroll||l,scrollIntoView:n.prototype.scrollIntoView},o=t.performance&&t.performance.now?t.performance.now.bind(t.performance):Date.now,a=(i=t.navigator.userAgent,new RegExp(["MSIE ","Trident/","Edge/"].join("|")).test(i)?1:0);t.scroll=t.scrollTo=function(){void 0!==arguments[0]&&(!0!==c(arguments[0])?f.call(t,e.body,void 0!==arguments[0].left?~~arguments[0].left:t.scrollX||t.pageXOffset,void 0!==arguments[0].top?~~arguments[0].top:t.scrollY||t.pageYOffset):r.scroll.call(t,void 0!==arguments[0].left?arguments[0].left:"object"!=typeof arguments[0]?arguments[0]:t.scrollX||t.pageXOffset,void 0!==arguments[0].top?arguments[0].top:void 0!==arguments[1]?arguments[1]:t.scrollY||t.pageYOffset))},t.scrollBy=function(){void 0!==arguments[0]&&(c(arguments[0])?r.scrollBy.call(t,void 0!==arguments[0].left?arguments[0].left:"object"!=typeof arguments[0]?arguments[0]:0,void 0!==arguments[0].top?arguments[0].top:void 0!==arguments[1]?arguments[1]:0):f.call(t,e.body,~~arguments[0].left+(t.scrollX||t.pageXOffset),~~arguments[0].top+(t.scrollY||t.pageYOffset)))},n.prototype.scroll=n.prototype.scrollTo=function(){if(void 0!==arguments[0])if(!0!==c(arguments[0])){var t=arguments[0].left,e=arguments[0].top;f.call(this,this,void 0===t?this.scrollLeft:~~t,void 0===e?this.scrollTop:~~e)}else{if("number"==typeof arguments[0]&&void 0===arguments[1])throw new SyntaxError("Value could not be converted");r.elementScroll.call(this,void 0!==arguments[0].left?~~arguments[0].left:"object"!=typeof arguments[0]?~~arguments[0]:this.scrollLeft,void 0!==arguments[0].top?~~arguments[0].top:void 0!==arguments[1]?~~arguments[1]:this.scrollTop)}},n.prototype.scrollBy=function(){void 0!==arguments[0]&&(!0!==c(arguments[0])?this.scroll({left:~~arguments[0].left+this.scrollLeft,top:~~arguments[0].top+this.scrollTop,behavior:arguments[0].behavior}):r.elementScroll.call(this,void 0!==arguments[0].left?~~arguments[0].left+this.scrollLeft:~~arguments[0]+this.scrollLeft,void 0!==arguments[0].top?~~arguments[0].top+this.scrollTop:~~arguments[1]+this.scrollTop))},n.prototype.scrollIntoView=function(){if(!0!==c(arguments[0])){var i=function(t){for(;t!==e.body&&!1===h(t);)t=t.parentNode||t.host;return t}(this),n=i.getBoundingClientRect(),s=this.getBoundingClientRect();i!==e.body?(f.call(this,i,i.scrollLeft+s.left-n.left,i.scrollTop+s.top-n.top),"fixed"!==t.getComputedStyle(i).position&&t.scrollBy({left:n.left,top:n.top,behavior:"smooth"})):t.scrollBy({left:s.left,top:s.top,behavior:"smooth"})}else r.scrollIntoView.call(this,void 0===arguments[0]||arguments[0])}}function l(t,e){this.scrollLeft=t,this.scrollTop=e}function c(t){if(null===t||"object"!=typeof t||void 0===t.behavior||"auto"===t.behavior||"instant"===t.behavior)return!0;if("object"==typeof t&&"smooth"===t.behavior)return!1;throw new TypeError("behavior member of ScrollOptions "+t.behavior+" is not a valid value for enumeration ScrollBehavior.")}function d(t,e){return"Y"===e?t.clientHeight+a<t.scrollHeight:"X"===e?t.clientWidth+a<t.scrollWidth:void 0}function u(e,i){var n=t.getComputedStyle(e,null)["overflow"+i];return"auto"===n||"scroll"===n}function h(t){var e=d(t,"Y")&&u(t,"Y"),i=d(t,"X")&&u(t,"X");return e||i}function p(e){var i,n,r,a,l=(o()-e.startTime)/s;a=l=l>1?1:l,i=.5*(1-Math.cos(Math.PI*a)),n=e.startX+(e.x-e.startX)*i,r=e.startY+(e.y-e.startY)*i,e.method.call(e.scrollable,n,r),n===e.x&&r===e.y||t.requestAnimationFrame(p.bind(t,e))}function f(i,n,s){var a,c,d,u,h=o();i===e.body?(a=t,c=t.scrollX||t.pageXOffset,d=t.scrollY||t.pageYOffset,u=r.scroll):(a=i,c=i.scrollLeft,d=i.scrollTop,u=l),p({scrollable:a,method:u,startTime:h,startX:c,startY:d,x:n,y:s})}}}})),wc=(bc.polyfill,function(t){rc(i,t);var e=cc(i);function i(){var t,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return Jl(this,i),(t=e.call(this,n)).resetNativeScroll&&(history.scrollRestoration&&(history.scrollRestoration="manual"),window.scrollTo(0,0)),window.addEventListener("scroll",t.checkScroll,!1),void 0===window.smoothscrollPolyfill&&(window.smoothscrollPolyfill=bc,window.smoothscrollPolyfill.polyfill()),t}return ec(i,[{key:"init",value:function(){this.instance.scroll.y=window.pageYOffset,this.addElements(),this.detectElements(),dc(oc(i.prototype),"init",this).call(this)}},{key:"checkScroll",value:function(){var t=this;dc(oc(i.prototype),"checkScroll",this).call(this),this.getDirection&&this.addDirection(),this.getSpeed&&(this.addSpeed(),this.speedTs=Date.now()),this.instance.scroll.y=window.pageYOffset,Object.entries(this.els).length&&(this.hasScrollTicking||(requestAnimationFrame((function(){t.detectElements()})),this.hasScrollTicking=!0))}},{key:"addDirection",value:function(){window.pageYOffset>this.instance.scroll.y?"down"!==this.instance.direction&&(this.instance.direction="down"):window.pageYOffset<this.instance.scroll.y&&"up"!==this.instance.direction&&(this.instance.direction="up")}},{key:"addSpeed",value:function(){window.pageYOffset!=this.instance.scroll.y?this.instance.speed=(window.pageYOffset-this.instance.scroll.y)/Math.max(1,Date.now()-this.speedTs):this.instance.speed=0}},{key:"resize",value:function(){Object.entries(this.els).length&&(this.windowHeight=window.innerHeight,this.updateElements())}},{key:"addElements",value:function(){var t=this;this.els={},this.el.querySelectorAll("[data-"+this.name+"]").forEach((function(e,i){e.getBoundingClientRect();var n,s,r,o=e.dataset[t.name+"Class"]||t.class,a="string"==typeof e.dataset[t.name+"Id"]?e.dataset[t.name+"Id"]:i,l="string"==typeof e.dataset[t.name+"Offset"]?e.dataset[t.name+"Offset"].split(","):t.offset,c=e.dataset[t.name+"Repeat"],d=e.dataset[t.name+"Call"],u=e.dataset[t.name+"Target"],h=(r=void 0!==u?document.querySelector("".concat(u)):e).getBoundingClientRect();n=h.top+t.instance.scroll.y,s=h.left+t.instance.scroll.x;var p=n+r.offsetHeight,f=s+r.offsetWidth;c="false"!=c&&(null!=c||t.repeat);var g=t.getRelativeOffset(l),m={el:e,targetEl:r,id:a,class:o,top:n+=g[0],bottom:p-=g[1],left:s,right:f,offset:l,progress:0,repeat:c,inView:!1,call:d};t.els[a]=m,e.classList.contains(o)&&t.setInView(t.els[a],a)}))}},{key:"updateElements",value:function(){var t=this;Object.entries(this.els).forEach((function(e){var i=uc(e,2),n=i[0],s=i[1],r=s.targetEl.getBoundingClientRect().top+t.instance.scroll.y,o=r+s.targetEl.offsetHeight,a=t.getRelativeOffset(s.offset);t.els[n].top=r+a[0],t.els[n].bottom=o-a[1]})),this.hasScrollTicking=!1}},{key:"getRelativeOffset",value:function(t){var e=[0,0];if(t)for(var i=0;i<t.length;i++)"string"==typeof t[i]?t[i].includes("%")?e[i]=parseInt(t[i].replace("%","")*this.windowHeight/100):e[i]=parseInt(t[i]):e[i]=t[i];return e}},{key:"scrollTo",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=parseInt(e.offset)||0,n=!!e.callback&&e.callback;if("string"==typeof t){if("top"===t)t=this.html;else if("bottom"===t)t=this.html.offsetHeight-window.innerHeight;else if(!(t=document.querySelector(t)))return}else if("number"==typeof t)t=parseInt(t);else if(!t||!t.tagName)return void console.warn("`target` parameter is not valid");i="number"!=typeof t?t.getBoundingClientRect().top+i+this.instance.scroll.y:t+i;var s=function(){return parseInt(window.pageYOffset)===parseInt(i)};if(n){if(s())return void n();window.addEventListener("scroll",(function t(){s()&&(window.removeEventListener("scroll",t),n())}))}window.scrollTo({top:i,behavior:0===e.duration?"auto":"smooth"})}},{key:"update",value:function(){this.addElements(),this.detectElements()}},{key:"destroy",value:function(){dc(oc(i.prototype),"destroy",this).call(this),window.removeEventListener("scroll",this.checkScroll,!1)}}]),i}(mc)),_c=Object.getOwnPropertySymbols,xc=Object.prototype.hasOwnProperty,Tc=Object.prototype.propertyIsEnumerable;var Sc=function(){try{if(!Object.assign)return!1;var t=new String("abc");if(t[5]="de","5"===Object.getOwnPropertyNames(t)[0])return!1;for(var e={},i=0;i<10;i++)e["_"+String.fromCharCode(i)]=i;var n=Object.getOwnPropertyNames(e).map((function(t){return e[t]}));if("0123456789"!==n.join(""))return!1;var s={};return"abcdefghijklmnopqrst".split("").forEach((function(t){s[t]=t})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},s)).join("")}catch(t){return!1}}()?Object.assign:function(t,e){for(var i,n,s=function(t){if(null==t)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(t)}(t),r=1;r<arguments.length;r++){for(var o in i=Object(arguments[r]))xc.call(i,o)&&(s[o]=i[o]);if(_c){n=_c(i);for(var a=0;a<n.length;a++)Tc.call(i,n[a])&&(s[n[a]]=i[n[a]])}}return s};function Cc(){}Cc.prototype={on:function(t,e,i){var n=this.e||(this.e={});return(n[t]||(n[t]=[])).push({fn:e,ctx:i}),this},once:function(t,e,i){var n=this;function s(){n.off(t,s),e.apply(i,arguments)}return s._=e,this.on(t,s,i)},emit:function(t){for(var e=[].slice.call(arguments,1),i=((this.e||(this.e={}))[t]||[]).slice(),n=0,s=i.length;n<s;n++)i[n].fn.apply(i[n].ctx,e);return this},off:function(t,e){var i=this.e||(this.e={}),n=i[t],s=[];if(n&&e)for(var r=0,o=n.length;r<o;r++)n[r].fn!==e&&n[r].fn._!==e&&s.push(n[r]);return s.length?i[t]=s:delete i[t],this}};var Ec=Cc,kc=yc((function(t,e){(function(){(null!==e?e:this).Lethargy=function(){function t(t,e,i,n){this.stability=null!=t?Math.abs(t):8,this.sensitivity=null!=e?1+Math.abs(e):100,this.tolerance=null!=i?1+Math.abs(i):1.1,this.delay=null!=n?n:150,this.lastUpDeltas=function(){var t,e,i;for(i=[],t=1,e=2*this.stability;1<=e?t<=e:t>=e;1<=e?t++:t--)i.push(null);return i}.call(this),this.lastDownDeltas=function(){var t,e,i;for(i=[],t=1,e=2*this.stability;1<=e?t<=e:t>=e;1<=e?t++:t--)i.push(null);return i}.call(this),this.deltasTimestamp=function(){var t,e,i;for(i=[],t=1,e=2*this.stability;1<=e?t<=e:t>=e;1<=e?t++:t--)i.push(null);return i}.call(this)}return t.prototype.check=function(t){var e;return null!=(t=t.originalEvent||t).wheelDelta?e=t.wheelDelta:null!=t.deltaY?e=-40*t.deltaY:null==t.detail&&0!==t.detail||(e=-40*t.detail),this.deltasTimestamp.push(Date.now()),this.deltasTimestamp.shift(),e>0?(this.lastUpDeltas.push(e),this.lastUpDeltas.shift(),this.isInertia(1)):(this.lastDownDeltas.push(e),this.lastDownDeltas.shift(),this.isInertia(-1))},t.prototype.isInertia=function(t){var e,i,n,s,r,o,a;return null===(e=-1===t?this.lastDownDeltas:this.lastUpDeltas)[0]?t:!(this.deltasTimestamp[2*this.stability-2]+this.delay>Date.now()&&e[0]===e[2*this.stability-1])&&(n=e.slice(0,this.stability),i=e.slice(this.stability,2*this.stability),a=n.reduce((function(t,e){return t+e})),r=i.reduce((function(t,e){return t+e})),o=a/n.length,s=r/i.length,Math.abs(o)<Math.abs(s*this.tolerance)&&this.sensitivity<Math.abs(s)&&t)},t.prototype.showLastUpDeltas=function(){return this.lastUpDeltas},t.prototype.showLastDownDeltas=function(){return this.lastDownDeltas},t}()}).call(vc)})),Mc={hasWheelEvent:"onwheel"in document,hasMouseWheelEvent:"onmousewheel"in document,hasTouch:"ontouchstart"in window||window.TouchEvent||window.DocumentTouch&&document instanceof DocumentTouch,hasTouchWin:navigator.msMaxTouchPoints&&navigator.msMaxTouchPoints>1,hasPointer:!!window.navigator.msPointerEnabled,hasKeyDown:"onkeydown"in document,isFirefox:navigator.userAgent.indexOf("Firefox")>-1},Oc=Object.prototype.toString,Ic=Object.prototype.hasOwnProperty;function Ac(t,e){return function(){return t.apply(e,arguments)}}var Pc=kc.Lethargy,Lc="virtualscroll",Dc=Gc,zc=37,Bc=38,Rc=39,Fc=40,Hc=32;function Gc(t){!function(t){if(!t)return console.warn("bindAll requires at least one argument.");var e=Array.prototype.slice.call(arguments,1);if(0===e.length)for(var i in t)Ic.call(t,i)&&"function"==typeof t[i]&&"[object Function]"==Oc.call(t[i])&&e.push(i);for(var n=0;n<e.length;n++){var s=e[n];t[s]=Ac(t[s],t)}}(this,"_onWheel","_onMouseWheel","_onTouchStart","_onTouchMove","_onKeyDown"),this.el=window,t&&t.el&&(this.el=t.el,delete t.el),this.options=Sc({mouseMultiplier:1,touchMultiplier:2,firefoxMultiplier:15,keyStep:120,preventTouch:!1,unpreventTouchClass:"vs-touchmove-allowed",limitInertia:!1,useKeyboard:!0,useTouch:!0},t),this.options.limitInertia&&(this._lethargy=new Pc),this._emitter=new Ec,this._event={y:0,x:0,deltaX:0,deltaY:0},this.touchStartX=null,this.touchStartY=null,this.bodyTouchAction=null,void 0!==this.options.passive&&(this.listenerOptions={passive:this.options.passive})}function Yc(t,e,i){return(1-i)*t+i*e}function Vc(t){var e={};if(window.getComputedStyle){var i=getComputedStyle(t),n=i.transform||i.webkitTransform||i.mozTransform,s=n.match(/^matrix3d\((.+)\)$/);return s?(e.x=s?parseFloat(s[1].split(", ")[12]):0,e.y=s?parseFloat(s[1].split(", ")[13]):0):(s=n.match(/^matrix\((.+)\)$/),e.x=s?parseFloat(s[1].split(", ")[4]):0,e.y=s?parseFloat(s[1].split(", ")[5]):0),e}}function Nc(t){for(var e=[];t&&t!==document;t=t.parentNode)e.push(t);return e}Gc.prototype._notify=function(t){var e=this._event;e.x+=e.deltaX,e.y+=e.deltaY,this._emitter.emit(Lc,{x:e.x,y:e.y,deltaX:e.deltaX,deltaY:e.deltaY,originalEvent:t})},Gc.prototype._onWheel=function(t){var e=this.options;if(!this._lethargy||!1!==this._lethargy.check(t)){var i=this._event;i.deltaX=t.wheelDeltaX||-1*t.deltaX,i.deltaY=t.wheelDeltaY||-1*t.deltaY,Mc.isFirefox&&1==t.deltaMode&&(i.deltaX*=e.firefoxMultiplier,i.deltaY*=e.firefoxMultiplier),i.deltaX*=e.mouseMultiplier,i.deltaY*=e.mouseMultiplier,this._notify(t)}},Gc.prototype._onMouseWheel=function(t){if(!this.options.limitInertia||!1!==this._lethargy.check(t)){var e=this._event;e.deltaX=t.wheelDeltaX?t.wheelDeltaX:0,e.deltaY=t.wheelDeltaY?t.wheelDeltaY:t.wheelDelta,this._notify(t)}},Gc.prototype._onTouchStart=function(t){var e=t.targetTouches?t.targetTouches[0]:t;this.touchStartX=e.pageX,this.touchStartY=e.pageY},Gc.prototype._onTouchMove=function(t){var e=this.options;e.preventTouch&&!t.target.classList.contains(e.unpreventTouchClass)&&t.preventDefault();var i=this._event,n=t.targetTouches?t.targetTouches[0]:t;i.deltaX=(n.pageX-this.touchStartX)*e.touchMultiplier,i.deltaY=(n.pageY-this.touchStartY)*e.touchMultiplier,this.touchStartX=n.pageX,this.touchStartY=n.pageY,this._notify(t)},Gc.prototype._onKeyDown=function(t){var e=this._event;e.deltaX=e.deltaY=0;var i=window.innerHeight-40;switch(t.keyCode){case zc:case Bc:e.deltaY=this.options.keyStep;break;case Rc:case Fc:e.deltaY=-this.options.keyStep;break;case t.shiftKey:e.deltaY=i;break;case Hc:e.deltaY=-i;break;default:return}this._notify(t)},Gc.prototype._bind=function(){Mc.hasWheelEvent&&this.el.addEventListener("wheel",this._onWheel,this.listenerOptions),Mc.hasMouseWheelEvent&&this.el.addEventListener("mousewheel",this._onMouseWheel,this.listenerOptions),Mc.hasTouch&&this.options.useTouch&&(this.el.addEventListener("touchstart",this._onTouchStart,this.listenerOptions),this.el.addEventListener("touchmove",this._onTouchMove,this.listenerOptions)),Mc.hasPointer&&Mc.hasTouchWin&&(this.bodyTouchAction=document.body.style.msTouchAction,document.body.style.msTouchAction="none",this.el.addEventListener("MSPointerDown",this._onTouchStart,!0),this.el.addEventListener("MSPointerMove",this._onTouchMove,!0)),Mc.hasKeyDown&&this.options.useKeyboard&&document.addEventListener("keydown",this._onKeyDown)},Gc.prototype._unbind=function(){Mc.hasWheelEvent&&this.el.removeEventListener("wheel",this._onWheel),Mc.hasMouseWheelEvent&&this.el.removeEventListener("mousewheel",this._onMouseWheel),Mc.hasTouch&&(this.el.removeEventListener("touchstart",this._onTouchStart),this.el.removeEventListener("touchmove",this._onTouchMove)),Mc.hasPointer&&Mc.hasTouchWin&&(document.body.style.msTouchAction=this.bodyTouchAction,this.el.removeEventListener("MSPointerDown",this._onTouchStart,!0),this.el.removeEventListener("MSPointerMove",this._onTouchMove,!0)),Mc.hasKeyDown&&this.options.useKeyboard&&document.removeEventListener("keydown",this._onKeyDown)},Gc.prototype.on=function(t,e){this._emitter.on(Lc,t,e);var i=this._emitter.e;i&&i[Lc]&&1===i[Lc].length&&this._bind()},Gc.prototype.off=function(t,e){this._emitter.off(Lc,t,e);var i=this._emitter.e;(!i[Lc]||i[Lc].length<=0)&&this._unbind()},Gc.prototype.reset=function(){var t=this._event;t.x=0,t.y=0},Gc.prototype.destroy=function(){this._emitter.off(),this._unbind()};var jc=.1,Wc="function"==typeof Float32Array;function $c(t,e){return 1-3*e+3*t}function Xc(t,e){return 3*e-6*t}function qc(t){return 3*t}function Uc(t,e,i){return(($c(e,i)*t+Xc(e,i))*t+qc(e))*t}function Kc(t,e,i){return 3*$c(e,i)*t*t+2*Xc(e,i)*t+qc(e)}function Zc(t){return t}var Qc=function(t,e,i,n){if(!(0<=t&&t<=1&&0<=i&&i<=1))throw new Error("bezier x values must be in [0, 1] range");if(t===e&&i===n)return Zc;for(var s=Wc?new Float32Array(11):new Array(11),r=0;r<11;++r)s[r]=Uc(r*jc,t,i);function o(e){for(var n=0,r=1;10!==r&&s[r]<=e;++r)n+=jc;--r;var o=n+(e-s[r])/(s[r+1]-s[r])*jc,a=Kc(o,t,i);return a>=.001?function(t,e,i,n){for(var s=0;s<4;++s){var r=Kc(e,i,n);if(0===r)return e;e-=(Uc(e,i,n)-t)/r}return e}(e,o,t,i):0===a?o:function(t,e,i,n,s){var r,o,a=0;do{(r=Uc(o=e+(i-e)/2,n,s)-t)>0?i=o:e=o}while(Math.abs(r)>1e-7&&++a<10);return o}(e,n,n+jc,t,i)}return function(t){return 0===t?0:1===t?1:Uc(o(t),e,n)}},Jc=38,td=40,ed=32,id=9,nd=33,sd=34,rd=36,od=35,ad=function(t){rc(i,t);var e=cc(i);function i(){var t,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return Jl(this,i),history.scrollRestoration&&(history.scrollRestoration="manual"),window.scrollTo(0,0),(t=e.call(this,n)).inertia&&(t.lerp=.1*t.inertia),t.isScrolling=!1,t.isDraggingScrollbar=!1,t.isTicking=!1,t.hasScrollTicking=!1,t.parallaxElements={},t.stop=!1,t.scrollbarContainer=n.scrollbarContainer,t.checkKey=t.checkKey.bind(lc(t)),window.addEventListener("keydown",t.checkKey,!1),t}return ec(i,[{key:"init",value:function(){var t=this;this.html.classList.add(this.smoothClass),this.html.setAttribute("data-".concat(this.name,"-direction"),this.direction),this.instance=sc({delta:{x:this.initPosition.x,y:this.initPosition.y},scroll:{x:this.initPosition.x,y:this.initPosition.y}},this.instance),this.vs=new Dc({el:this.scrollFromAnywhere?document:this.el,mouseMultiplier:navigator.platform.indexOf("Win")>-1?1:.4,firefoxMultiplier:this.firefoxMultiplier,touchMultiplier:this.touchMultiplier,useKeyboard:!1,passive:!0}),this.vs.on((function(e){t.stop||t.isDraggingScrollbar||requestAnimationFrame((function(){t.updateDelta(e),t.isScrolling||t.startScrolling()}))})),this.setScrollLimit(),this.initScrollBar(),this.addSections(),this.addElements(),this.checkScroll(!0),this.transformElements(!0,!0),dc(oc(i.prototype),"init",this).call(this)}},{key:"setScrollLimit",value:function(){if(this.instance.limit.y=this.el.offsetHeight-this.windowHeight,"horizontal"===this.direction){for(var t=0,e=this.el.children,i=0;i<e.length;i++)t+=e[i].offsetWidth;this.instance.limit.x=t-this.windowWidth}}},{key:"startScrolling",value:function(){this.startScrollTs=Date.now(),this.isScrolling=!0,this.checkScroll(),this.html.classList.add(this.scrollingClass)}},{key:"stopScrolling",value:function(){cancelAnimationFrame(this.checkScrollRaf),this.startScrollTs=void 0,this.scrollToRaf&&(cancelAnimationFrame(this.scrollToRaf),this.scrollToRaf=null),this.isScrolling=!1,this.instance.scroll.y=Math.round(this.instance.scroll.y),this.html.classList.remove(this.scrollingClass)}},{key:"checkKey",value:function(t){var e=this;if(this.stop)t.keyCode==id&&requestAnimationFrame((function(){e.html.scrollTop=0,document.body.scrollTop=0,e.html.scrollLeft=0,document.body.scrollLeft=0}));else{switch(t.keyCode){case id:requestAnimationFrame((function(){e.html.scrollTop=0,document.body.scrollTop=0,e.html.scrollLeft=0,document.body.scrollLeft=0,e.scrollTo(document.activeElement,{offset:-window.innerHeight/2})}));break;case Jc:this.isActiveElementScrollSensitive()&&(this.instance.delta[this.directionAxis]-=240);break;case td:this.isActiveElementScrollSensitive()&&(this.instance.delta[this.directionAxis]+=240);break;case nd:this.instance.delta[this.directionAxis]-=window.innerHeight;break;case sd:this.instance.delta[this.directionAxis]+=window.innerHeight;break;case rd:this.instance.delta[this.directionAxis]-=this.instance.limit[this.directionAxis];break;case od:this.instance.delta[this.directionAxis]+=this.instance.limit[this.directionAxis];break;case ed:this.isActiveElementScrollSensitive()&&(t.shiftKey?this.instance.delta[this.directionAxis]-=window.innerHeight:this.instance.delta[this.directionAxis]+=window.innerHeight);break;default:return}this.instance.delta[this.directionAxis]<0&&(this.instance.delta[this.directionAxis]=0),this.instance.delta[this.directionAxis]>this.instance.limit[this.directionAxis]&&(this.instance.delta[this.directionAxis]=this.instance.limit[this.directionAxis]),this.stopScrolling(),this.isScrolling=!0,this.checkScroll(),this.html.classList.add(this.scrollingClass)}}},{key:"isActiveElementScrollSensitive",value:function(){return!(document.activeElement instanceof HTMLInputElement||document.activeElement instanceof HTMLTextAreaElement||document.activeElement instanceof HTMLButtonElement||document.activeElement instanceof HTMLSelectElement)}},{key:"checkScroll",value:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(e||this.isScrolling||this.isDraggingScrollbar){this.hasScrollTicking||(this.checkScrollRaf=requestAnimationFrame((function(){return t.checkScroll()})),this.hasScrollTicking=!0),this.updateScroll();var n=Math.abs(this.instance.delta[this.directionAxis]-this.instance.scroll[this.directionAxis]),s=Date.now()-this.startScrollTs;if(!this.animatingScroll&&s>100&&(n<.5&&0!=this.instance.delta[this.directionAxis]||n<.5&&0==this.instance.delta[this.directionAxis])&&this.stopScrolling(),Object.entries(this.sections).forEach((function(i){var n=uc(i,2),s=(n[0],n[1]);s.persistent||t.instance.scroll[t.directionAxis]>s.offset[t.directionAxis]&&t.instance.scroll[t.directionAxis]<s.limit[t.directionAxis]?("horizontal"===t.direction?t.transform(s.el,-t.instance.scroll[t.directionAxis],0):t.transform(s.el,0,-t.instance.scroll[t.directionAxis]),s.inView||(s.inView=!0,s.el.style.opacity=1,s.el.style.pointerEvents="all",s.el.setAttribute("data-".concat(t.name,"-section-inview"),""))):((s.inView||e)&&(s.inView=!1,s.el.style.opacity=0,s.el.style.pointerEvents="none",s.el.removeAttribute("data-".concat(t.name,"-section-inview"))),t.transform(s.el,0,0))})),this.getDirection&&this.addDirection(),this.getSpeed&&(this.addSpeed(),this.speedTs=Date.now()),this.detectElements(),this.transformElements(),this.hasScrollbar){var r=this.instance.scroll[this.directionAxis]/this.instance.limit[this.directionAxis]*this.scrollBarLimit[this.directionAxis];"horizontal"===this.direction?this.transform(this.scrollbarThumb,r,0):this.transform(this.scrollbarThumb,0,r)}dc(oc(i.prototype),"checkScroll",this).call(this),this.hasScrollTicking=!1}}},{key:"resize",value:function(){this.windowHeight=window.innerHeight,this.windowWidth=window.innerWidth,this.checkContext(),this.windowMiddle={x:this.windowWidth/2,y:this.windowHeight/2},this.update()}},{key:"updateDelta",value:function(t){var e,i=this[this.context]&&this[this.context].gestureDirection?this[this.context].gestureDirection:this.gestureDirection;e="both"===i?t.deltaX+t.deltaY:"vertical"===i?t.deltaY:"horizontal"===i?t.deltaX:t.deltaY,this.instance.delta[this.directionAxis]-=e*this.multiplier,this.instance.delta[this.directionAxis]<0&&(this.instance.delta[this.directionAxis]=0),this.instance.delta[this.directionAxis]>this.instance.limit[this.directionAxis]&&(this.instance.delta[this.directionAxis]=this.instance.limit[this.directionAxis])}},{key:"updateScroll",value:function(t){this.isScrolling||this.isDraggingScrollbar?this.instance.scroll[this.directionAxis]=Yc(this.instance.scroll[this.directionAxis],this.instance.delta[this.directionAxis],this.lerp):this.instance.scroll[this.directionAxis]>this.instance.limit[this.directionAxis]?this.setScroll(this.instance.scroll[this.directionAxis],this.instance.limit[this.directionAxis]):this.instance.scroll.y<0?this.setScroll(this.instance.scroll[this.directionAxis],0):this.setScroll(this.instance.scroll[this.directionAxis],this.instance.delta[this.directionAxis])}},{key:"addDirection",value:function(){this.instance.delta.y>this.instance.scroll.y?"down"!==this.instance.direction&&(this.instance.direction="down"):this.instance.delta.y<this.instance.scroll.y&&"up"!==this.instance.direction&&(this.instance.direction="up"),this.instance.delta.x>this.instance.scroll.x?"right"!==this.instance.direction&&(this.instance.direction="right"):this.instance.delta.x<this.instance.scroll.x&&"left"!==this.instance.direction&&(this.instance.direction="left")}},{key:"addSpeed",value:function(){this.instance.delta[this.directionAxis]!=this.instance.scroll[this.directionAxis]?this.instance.speed=(this.instance.delta[this.directionAxis]-this.instance.scroll[this.directionAxis])/Math.max(1,Date.now()-this.speedTs):this.instance.speed=0}},{key:"initScrollBar",value:function(){if(this.scrollbar=document.createElement("span"),this.scrollbarThumb=document.createElement("span"),this.scrollbar.classList.add("".concat(this.scrollbarClass)),this.scrollbarThumb.classList.add("".concat(this.scrollbarClass,"_thumb")),this.scrollbar.append(this.scrollbarThumb),this.scrollbarContainer?this.scrollbarContainer.append(this.scrollbar):document.body.append(this.scrollbar),this.getScrollBar=this.getScrollBar.bind(this),this.releaseScrollBar=this.releaseScrollBar.bind(this),this.moveScrollBar=this.moveScrollBar.bind(this),this.scrollbarThumb.addEventListener("mousedown",this.getScrollBar),window.addEventListener("mouseup",this.releaseScrollBar),window.addEventListener("mousemove",this.moveScrollBar),this.hasScrollbar=!1,"horizontal"==this.direction){if(this.instance.limit.x+this.windowWidth<=this.windowWidth)return}else if(this.instance.limit.y+this.windowHeight<=this.windowHeight)return;this.hasScrollbar=!0,this.scrollbarBCR=this.scrollbar.getBoundingClientRect(),this.scrollbarHeight=this.scrollbarBCR.height,this.scrollbarWidth=this.scrollbarBCR.width,"horizontal"===this.direction?this.scrollbarThumb.style.width="".concat(this.scrollbarWidth*this.scrollbarWidth/(this.instance.limit.x+this.scrollbarWidth),"px"):this.scrollbarThumb.style.height="".concat(this.scrollbarHeight*this.scrollbarHeight/(this.instance.limit.y+this.scrollbarHeight),"px"),this.scrollbarThumbBCR=this.scrollbarThumb.getBoundingClientRect(),this.scrollBarLimit={x:this.scrollbarWidth-this.scrollbarThumbBCR.width,y:this.scrollbarHeight-this.scrollbarThumbBCR.height}}},{key:"reinitScrollBar",value:function(){if(this.hasScrollbar=!1,"horizontal"==this.direction){if(this.instance.limit.x+this.windowWidth<=this.windowWidth)return}else if(this.instance.limit.y+this.windowHeight<=this.windowHeight)return;this.hasScrollbar=!0,this.scrollbarBCR=this.scrollbar.getBoundingClientRect(),this.scrollbarHeight=this.scrollbarBCR.height,this.scrollbarWidth=this.scrollbarBCR.width,"horizontal"===this.direction?this.scrollbarThumb.style.width="".concat(this.scrollbarWidth*this.scrollbarWidth/(this.instance.limit.x+this.scrollbarWidth),"px"):this.scrollbarThumb.style.height="".concat(this.scrollbarHeight*this.scrollbarHeight/(this.instance.limit.y+this.scrollbarHeight),"px"),this.scrollbarThumbBCR=this.scrollbarThumb.getBoundingClientRect(),this.scrollBarLimit={x:this.scrollbarWidth-this.scrollbarThumbBCR.width,y:this.scrollbarHeight-this.scrollbarThumbBCR.height}}},{key:"destroyScrollBar",value:function(){this.scrollbarThumb.removeEventListener("mousedown",this.getScrollBar),window.removeEventListener("mouseup",this.releaseScrollBar),window.removeEventListener("mousemove",this.moveScrollBar),this.scrollbar.remove()}},{key:"getScrollBar",value:function(t){this.isDraggingScrollbar=!0,this.checkScroll(),this.html.classList.remove(this.scrollingClass),this.html.classList.add(this.draggingClass)}},{key:"releaseScrollBar",value:function(t){this.isDraggingScrollbar=!1,this.isScrolling&&this.html.classList.add(this.scrollingClass),this.html.classList.remove(this.draggingClass)}},{key:"moveScrollBar",value:function(t){var e=this;this.isDraggingScrollbar&&requestAnimationFrame((function(){var i=100*(t.clientX-e.scrollbarBCR.left)/e.scrollbarWidth*e.instance.limit.x/100,n=100*(t.clientY-e.scrollbarBCR.top)/e.scrollbarHeight*e.instance.limit.y/100;n>0&&n<e.instance.limit.y&&(e.instance.delta.y=n),i>0&&i<e.instance.limit.x&&(e.instance.delta.x=i)}))}},{key:"addElements",value:function(){var t=this;this.els={},this.parallaxElements={},this.el.querySelectorAll("[data-".concat(this.name,"]")).forEach((function(e,i){var n,s,r,o=Nc(e),a=Object.entries(t.sections).map((function(t){var e=uc(t,2);e[0];return e[1]})).find((function(t){return o.includes(t.el)})),l=e.dataset[t.name+"Class"]||t.class,c="string"==typeof e.dataset[t.name+"Id"]?e.dataset[t.name+"Id"]:"el"+i,d=e.dataset[t.name+"Repeat"],u=e.dataset[t.name+"Call"],h=e.dataset[t.name+"Position"],p=e.dataset[t.name+"Delay"],f=e.dataset[t.name+"Direction"],g="string"==typeof e.dataset[t.name+"Sticky"],m=!!e.dataset[t.name+"Speed"]&&parseFloat(e.dataset[t.name+"Speed"])/10,v="string"==typeof e.dataset[t.name+"Offset"]?e.dataset[t.name+"Offset"].split(","):t.offset,y=e.dataset[t.name+"Target"],b=(r=void 0!==y?document.querySelector("".concat(y)):e).getBoundingClientRect();null===a||a.inView?(n=b.top+t.instance.scroll.y-Vc(r).y,s=b.left+t.instance.scroll.x-Vc(r).x):(n=b.top-Vc(a.el).y-Vc(r).y,s=b.left-Vc(a.el).x-Vc(r).x);var w=n+r.offsetHeight,_=s+r.offsetWidth,x={x:(_-s)/2+s,y:(w-n)/2+n};if(g){var T=e.getBoundingClientRect(),S=T.top,C=T.left,E={x:C-s,y:S-n};n+=window.innerHeight,s+=window.innerWidth,w=S+r.offsetHeight-e.offsetHeight-E[t.directionAxis],x={x:((_=C+r.offsetWidth-e.offsetWidth-E[t.directionAxis])-s)/2+s,y:(w-n)/2+n}}d="false"!=d&&(null!=d||t.repeat);var k=[0,0];if(v)if("horizontal"===t.direction){for(var M=0;M<v.length;M++)"string"==typeof v[M]?v[M].includes("%")?k[M]=parseInt(v[M].replace("%","")*t.windowWidth/100):k[M]=parseInt(v[M]):k[M]=v[M];s+=k[0],_-=k[1]}else{for(M=0;M<v.length;M++)"string"==typeof v[M]?v[M].includes("%")?k[M]=parseInt(v[M].replace("%","")*t.windowHeight/100):k[M]=parseInt(v[M]):k[M]=v[M];n+=k[0],w-=k[1]}var O={el:e,id:c,class:l,section:a,top:n,middle:x,bottom:w,left:s,right:_,offset:v,progress:0,repeat:d,inView:!1,call:u,speed:m,delay:p,position:h,target:r,direction:f,sticky:g};t.els[c]=O,e.classList.contains(l)&&t.setInView(t.els[c],c),(!1!==m||g)&&(t.parallaxElements[c]=O)}))}},{key:"addSections",value:function(){var t=this;this.sections={};var e=this.el.querySelectorAll("[data-".concat(this.name,"-section]"));0===e.length&&(e=[this.el]),e.forEach((function(e,i){var n="string"==typeof e.dataset[t.name+"Id"]?e.dataset[t.name+"Id"]:"section"+i,s=e.getBoundingClientRect(),r={x:s.left-1.5*window.innerWidth-Vc(e).x,y:s.top-1.5*window.innerHeight-Vc(e).y},o={x:r.x+s.width+2*window.innerWidth,y:r.y+s.height+2*window.innerHeight},a="string"==typeof e.dataset[t.name+"Persistent"];e.setAttribute("data-scroll-section-id",n);var l={el:e,offset:r,limit:o,inView:!1,persistent:a,id:n};t.sections[n]=l}))}},{key:"transform",value:function(t,e,i,n){var s;if(n){var r=Vc(t),o=Yc(r.x,e,n),a=Yc(r.y,i,n);s="matrix3d(1,0,0.00,0,0.00,1,0.00,0,0,0,1,0,".concat(o,",").concat(a,",0,1)")}else s="matrix3d(1,0,0.00,0,0.00,1,0.00,0,0,0,1,0,".concat(e,",").concat(i,",0,1)");t.style.webkitTransform=s,t.style.msTransform=s,t.style.transform=s}},{key:"transformElements",value:function(t){var e=this,i=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=this.instance.scroll.x+this.windowWidth,s=this.instance.scroll.y+this.windowHeight,r={x:this.instance.scroll.x+this.windowMiddle.x,y:this.instance.scroll.y+this.windowMiddle.y};Object.entries(this.parallaxElements).forEach((function(o){var a=uc(o,2),l=(a[0],a[1]),c=!1;if(t&&(c=0),l.inView||i)switch(l.position){case"top":case"left":c=e.instance.scroll[e.directionAxis]*-l.speed;break;case"elementTop":c=(s-l.top)*-l.speed;break;case"bottom":c=(e.instance.limit[e.directionAxis]-s+e.windowHeight)*l.speed;break;case"elementLeft":c=(n-l.left)*-l.speed;break;case"right":c=(e.instance.limit[e.directionAxis]-n+e.windowHeight)*l.speed;break;default:c=(r[e.directionAxis]-l.middle[e.directionAxis])*-l.speed}l.sticky&&(c=l.inView?"horizontal"===e.direction?e.instance.scroll.x-l.left+window.innerWidth:e.instance.scroll.y-l.top+window.innerHeight:"horizontal"===e.direction?e.instance.scroll.x<l.left-window.innerWidth&&e.instance.scroll.x<l.left-window.innerWidth/2?0:e.instance.scroll.x>l.right&&e.instance.scroll.x>l.right+100&&l.right-l.left+window.innerWidth:e.instance.scroll.y<l.top-window.innerHeight&&e.instance.scroll.y<l.top-window.innerHeight/2?0:e.instance.scroll.y>l.bottom&&e.instance.scroll.y>l.bottom+100&&l.bottom-l.top+window.innerHeight),!1!==c&&("horizontal"===l.direction||"horizontal"===e.direction&&"vertical"!==l.direction?e.transform(l.el,c,0,!t&&l.delay):e.transform(l.el,0,c,!t&&l.delay))}))}},{key:"scrollTo",value:function(t){var e=this,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=parseInt(i.offset)||0,s=isNaN(parseInt(i.duration))?1e3:parseInt(i.duration),r=i.easing||[.25,0,.35,1],o=!!i.disableLerp,a=!!i.callback&&i.callback;if(r=Qc.apply(void 0,hc(r)),"string"==typeof t){if("top"===t)t=0;else if("bottom"===t)t=this.instance.limit.y;else if("left"===t)t=0;else if("right"===t)t=this.instance.limit.x;else if(!(t=document.querySelector(t)))return}else if("number"==typeof t)t=parseInt(t);else if(!t||!t.tagName)return void console.warn("`target` parameter is not valid");if("number"!=typeof t){if(!Nc(t).includes(this.el))return;var l=t.getBoundingClientRect(),c=l.top,d=l.left,u=Nc(t).find((function(t){return Object.entries(e.sections).map((function(t){var e=uc(t,2);e[0];return e[1]})).find((function(e){return e.el==t}))})),h=0;h=u?Vc(u)[this.directionAxis]:-this.instance.scroll[this.directionAxis],n="horizontal"===this.direction?d+n-h:c+n-h}else n=t+n;var p=parseFloat(this.instance.delta[this.directionAxis]),f=Math.max(0,Math.min(n,this.instance.limit[this.directionAxis]))-p,g=function(t){o?"horizontal"===e.direction?e.setScroll(p+f*t,e.instance.delta.y):e.setScroll(e.instance.delta.x,p+f*t):e.instance.delta[e.directionAxis]=p+f*t};this.animatingScroll=!0,this.stopScrolling(),this.startScrolling();var m=Date.now();!function t(){var i=(Date.now()-m)/s;i>1?(g(1),e.animatingScroll=!1,0==s&&e.update(),a&&a()):(e.scrollToRaf=requestAnimationFrame(t),g(r(i)))}()}},{key:"update",value:function(){this.setScrollLimit(),this.addSections(),this.addElements(),this.detectElements(),this.updateScroll(),this.transformElements(!0),this.reinitScrollBar(),this.checkScroll(!0)}},{key:"startScroll",value:function(){this.stop=!1}},{key:"stopScroll",value:function(){this.stop=!0}},{key:"setScroll",value:function(t,e){this.instance=sc(sc({},this.instance),{},{scroll:{x:t,y:e},delta:{x:t,y:e},speed:0})}},{key:"destroy",value:function(){dc(oc(i.prototype),"destroy",this).call(this),this.stopScrolling(),this.html.classList.remove(this.smoothClass),this.vs.destroy(),this.destroyScrollBar(),window.removeEventListener("keydown",this.checkKey,!1)}}]),i}(mc);const ld=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};Jl(this,t),this.options=e,Object.assign(this,gc,e),this.smartphone=gc.smartphone,e.smartphone&&Object.assign(this.smartphone,e.smartphone),this.tablet=gc.tablet,e.tablet&&Object.assign(this.tablet,e.tablet),this.smooth||"horizontal"!=this.direction||console.warn("🚨 `smooth:false` & `horizontal` direction are not yet compatible"),this.tablet.smooth||"horizontal"!=this.tablet.direction||console.warn("🚨 `smooth:false` & `horizontal` direction are not yet compatible (tablet)"),this.smartphone.smooth||"horizontal"!=this.smartphone.direction||console.warn("🚨 `smooth:false` & `horizontal` direction are not yet compatible (smartphone)"),this.init()}return ec(t,[{key:"init",value:function(){if(this.options.isMobile=/Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||"MacIntel"===navigator.platform&&navigator.maxTouchPoints>1||window.innerWidth<this.tablet.breakpoint,this.options.isTablet=this.options.isMobile&&window.innerWidth>=this.tablet.breakpoint,this.smooth&&!this.options.isMobile||this.tablet.smooth&&this.options.isTablet||this.smartphone.smooth&&this.options.isMobile&&!this.options.isTablet?this.scroll=new ad(this.options):this.scroll=new wc(this.options),this.scroll.init(),window.location.hash){var t=window.location.hash.slice(1,window.location.hash.length),e=document.getElementById(t);e&&this.scroll.scrollTo(e)}}},{key:"update",value:function(){this.scroll.update()}},{key:"start",value:function(){this.scroll.startScroll()}},{key:"stop",value:function(){this.scroll.stopScroll()}},{key:"scrollTo",value:function(t,e){this.scroll.scrollTo(t,e)}},{key:"setScroll",value:function(t,e){this.scroll.setScroll(t,e)}},{key:"on",value:function(t,e){this.scroll.setEvents(t,e)}},{key:"off",value:function(t,e){this.scroll.unsetEvents(t,e)}},{key:"destroy",value:function(){this.scroll.destroy()}}]),t}();qn.registerPlugin(ea);const cd=new ld({el:document.querySelector(".wrapper"),smooth:!0,multiplier:1,mobile:{smooth:!1},tablet:{smooth:!1,breakpoint:1025}}),dd={touchStart:()=>{cd.stop()},touchEnd:()=>{cd.start()}};window.addEventListener("load",(function(){ea.scrollerProxy(cd.el,{scrollTop(t){return arguments.length?cd.scrollTo(t,0,0):cd.scroll.instance.scroll.y},getBoundingClientRect:()=>({top:0,left:0,width:window.innerWidth,height:window.innerHeight}),pinType:cd.el.style.transform?"transform":"fixed"}),ea.addEventListener("refresh",(()=>cd.update())),ea.defaults({scroller:cd.el}),setTimeout((()=>{ea.refresh(),ea.update()}),0),document.querySelector(".item-card__swiper")&&ua.add("(min-width: 1024px)",(()=>{const t=document.querySelectorAll(".item-card__thumbs-slide");document.querySelectorAll(".item-card__slide").forEach(((e,i)=>{qn.timeline({scrollTrigger:{trigger:e,start:"top top",end:"bottom bottom",onEnter:e=>{ha(i,t)},onEnterBack:e=>{ha(i,t)}}})}))})),setTimeout((()=>{cd.update()}),1e3)})),window.addEventListener("resize",(function(){cd.update()})),document.addEventListener("mouseover",(function(t){t.target.closest("[data-sb]")?cd.stop():cd.start()})),document.querySelector(".footer-main__anchor")&&document.querySelector(".footer-main__anchor").addEventListener("click",(function(){cd.scrollTo(0)})),document.querySelectorAll(".item-card__slide").length&&document.querySelectorAll(".item-card__slide").forEach(((t,e)=>{document.querySelectorAll(".item-card__thumbs-slide")[e].addEventListener("click",(function(){window.innerWidth>1024&&cd.scrollTo(t,{offset:-1,callback:()=>{ha(e,document.querySelectorAll(".item-card__thumbs-slide"))}})}))})),document.addEventListener("bodyLock",(function(){cd.stop()})),document.addEventListener("bodyUnlock",(function(){cd.start()})),document.querySelector(".feed-chapter__bg-swiper")&&new Zl(".feed-chapter__bg-swiper",{modules:[function(t){let{swiper:e,extendParams:i,on:n,emit:s}=t;const r="swiper-pagination";let o;i({pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:t=>t,formatFractionTotal:t=>t,bulletClass:`${r}-bullet`,bulletActiveClass:`${r}-bullet-active`,modifierClass:`${r}-`,currentClass:`${r}-current`,totalClass:`${r}-total`,hiddenClass:`${r}-hidden`,progressbarFillClass:`${r}-progressbar-fill`,progressbarOppositeClass:`${r}-progressbar-opposite`,clickableClass:`${r}-clickable`,lockClass:`${r}-lock`,horizontalClass:`${r}-horizontal`,verticalClass:`${r}-vertical`,paginationDisabledClass:`${r}-disabled`}}),e.pagination={el:null,bullets:[]};let a=0;function l(){return!e.params.pagination.el||!e.pagination.el||Array.isArray(e.pagination.el)&&0===e.pagination.el.length}function c(t,i){const{bulletActiveClass:n}=e.params.pagination;t&&(t=t[("prev"===i?"previous":"next")+"ElementSibling"])&&(t.classList.add(`${n}-${i}`),(t=t[("prev"===i?"previous":"next")+"ElementSibling"])&&t.classList.add(`${n}-${i}-${i}`))}function d(t){const i=t.target.closest(Ql(e.params.pagination.bulletClass));if(!i)return;t.preventDefault();const n=gl(i)*e.params.slidesPerGroup;if(e.params.loop){if(e.realIndex===n)return;e.slideToLoop(n)}else e.slideTo(n)}function u(){const t=e.rtl,i=e.params.pagination;if(l())return;let n,r,d=e.pagination.el;d=yl(d);const u=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.slides.length,h=e.params.loop?Math.ceil(u/e.params.slidesPerGroup):e.snapGrid.length;if(e.params.loop?(r=e.previousRealIndex||0,n=e.params.slidesPerGroup>1?Math.floor(e.realIndex/e.params.slidesPerGroup):e.realIndex):void 0!==e.snapIndex?(n=e.snapIndex,r=e.previousSnapIndex):(r=e.previousIndex||0,n=e.activeIndex||0),"bullets"===i.type&&e.pagination.bullets&&e.pagination.bullets.length>0){const s=e.pagination.bullets;let l,u,h;if(i.dynamicBullets&&(o=vl(s[0],e.isHorizontal()?"width":"height",!0),d.forEach((t=>{t.style[e.isHorizontal()?"width":"height"]=o*(i.dynamicMainBullets+4)+"px"})),i.dynamicMainBullets>1&&void 0!==r&&(a+=n-(r||0),a>i.dynamicMainBullets-1?a=i.dynamicMainBullets-1:a<0&&(a=0)),l=Math.max(n-a,0),u=l+(Math.min(s.length,i.dynamicMainBullets)-1),h=(u+l)/2),s.forEach((t=>{const e=[...["","-next","-next-next","-prev","-prev-prev","-main"].map((t=>`${i.bulletActiveClass}${t}`))].map((t=>"string"==typeof t&&t.includes(" ")?t.split(" "):t)).flat();t.classList.remove(...e)})),d.length>1)s.forEach((t=>{const s=gl(t);s===n?t.classList.add(...i.bulletActiveClass.split(" ")):e.isElement&&t.setAttribute("part","bullet"),i.dynamicBullets&&(s>=l&&s<=u&&t.classList.add(...`${i.bulletActiveClass}-main`.split(" ")),s===l&&c(t,"prev"),s===u&&c(t,"next"))}));else{const t=s[n];if(t&&t.classList.add(...i.bulletActiveClass.split(" ")),e.isElement&&s.forEach(((t,e)=>{t.setAttribute("part",e===n?"bullet-active":"bullet")})),i.dynamicBullets){const t=s[l],e=s[u];for(let t=l;t<=u;t+=1)s[t]&&s[t].classList.add(...`${i.bulletActiveClass}-main`.split(" "));c(t,"prev"),c(e,"next")}}if(i.dynamicBullets){const n=Math.min(s.length,i.dynamicMainBullets+4),r=(o*n-o)/2-h*o,a=t?"right":"left";s.forEach((t=>{t.style[e.isHorizontal()?a:"top"]=`${r}px`}))}}d.forEach(((t,r)=>{if("fraction"===i.type&&(t.querySelectorAll(Ql(i.currentClass)).forEach((t=>{t.textContent=i.formatFractionCurrent(n+1)})),t.querySelectorAll(Ql(i.totalClass)).forEach((t=>{t.textContent=i.formatFractionTotal(h)}))),"progressbar"===i.type){let s;s=i.progressbarOpposite?e.isHorizontal()?"vertical":"horizontal":e.isHorizontal()?"horizontal":"vertical";const r=(n+1)/h;let o=1,a=1;"horizontal"===s?o=r:a=r,t.querySelectorAll(Ql(i.progressbarFillClass)).forEach((t=>{t.style.transform=`translate3d(0,0,0) scaleX(${o}) scaleY(${a})`,t.style.transitionDuration=`${e.params.speed}ms`}))}"custom"===i.type&&i.renderCustom?(t.innerHTML=i.renderCustom(e,n+1,h),0===r&&s("paginationRender",t)):(0===r&&s("paginationRender",t),s("paginationUpdate",t)),e.params.watchOverflow&&e.enabled&&t.classList[e.isLocked?"add":"remove"](i.lockClass)}))}function h(){const t=e.params.pagination;if(l())return;const i=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.grid&&e.params.grid.rows>1?e.slides.length/Math.ceil(e.params.grid.rows):e.slides.length;let n=e.pagination.el;n=yl(n);let r="";if("bullets"===t.type){let n=e.params.loop?Math.ceil(i/e.params.slidesPerGroup):e.snapGrid.length;e.params.freeMode&&e.params.freeMode.enabled&&n>i&&(n=i);for(let i=0;i<n;i+=1)t.renderBullet?r+=t.renderBullet.call(e,i,t.bulletClass):r+=`<${t.bulletElement} ${e.isElement?'part="bullet"':""} class="${t.bulletClass}"></${t.bulletElement}>`}"fraction"===t.type&&(r=t.renderFraction?t.renderFraction.call(e,t.currentClass,t.totalClass):`<span class="${t.currentClass}"></span> / <span class="${t.totalClass}"></span>`),"progressbar"===t.type&&(r=t.renderProgressbar?t.renderProgressbar.call(e,t.progressbarFillClass):`<span class="${t.progressbarFillClass}"></span>`),e.pagination.bullets=[],n.forEach((i=>{"custom"!==t.type&&(i.innerHTML=r||""),"bullets"===t.type&&e.pagination.bullets.push(...i.querySelectorAll(Ql(t.bulletClass)))})),"custom"!==t.type&&s("paginationRender",n[0])}function p(){e.params.pagination=function(t,e,i,n){return t.params.createElements&&Object.keys(n).forEach((s=>{if(!i[s]&&!0===i.auto){let r=ul(t.el,`.${n[s]}`)[0];r||(r=pl("div",n[s]),r.className=n[s],t.el.append(r)),i[s]=r,e[s]=r}})),i}(e,e.originalParams.pagination,e.params.pagination,{el:"swiper-pagination"});const t=e.params.pagination;if(!t.el)return;let i;"string"==typeof t.el&&e.isElement&&(i=e.el.querySelector(t.el)),i||"string"!=typeof t.el||(i=[...document.querySelectorAll(t.el)]),i||(i=t.el),i&&0!==i.length&&(e.params.uniqueNavElements&&"string"==typeof t.el&&Array.isArray(i)&&i.length>1&&(i=[...e.el.querySelectorAll(t.el)],i.length>1&&(i=i.filter((t=>ml(t,".swiper")[0]===e.el))[0])),Array.isArray(i)&&1===i.length&&(i=i[0]),Object.assign(e.pagination,{el:i}),i=yl(i),i.forEach((i=>{"bullets"===t.type&&t.clickable&&i.classList.add(...(t.clickableClass||"").split(" ")),i.classList.add(t.modifierClass+t.type),i.classList.add(e.isHorizontal()?t.horizontalClass:t.verticalClass),"bullets"===t.type&&t.dynamicBullets&&(i.classList.add(`${t.modifierClass}${t.type}-dynamic`),a=0,t.dynamicMainBullets<1&&(t.dynamicMainBullets=1)),"progressbar"===t.type&&t.progressbarOpposite&&i.classList.add(t.progressbarOppositeClass),t.clickable&&i.addEventListener("click",d),e.enabled||i.classList.add(t.lockClass)})))}function f(){const t=e.params.pagination;if(l())return;let i=e.pagination.el;i&&(i=yl(i),i.forEach((i=>{i.classList.remove(t.hiddenClass),i.classList.remove(t.modifierClass+t.type),i.classList.remove(e.isHorizontal()?t.horizontalClass:t.verticalClass),t.clickable&&(i.classList.remove(...(t.clickableClass||"").split(" ")),i.removeEventListener("click",d))}))),e.pagination.bullets&&e.pagination.bullets.forEach((e=>e.classList.remove(...t.bulletActiveClass.split(" "))))}n("changeDirection",(()=>{if(!e.pagination||!e.pagination.el)return;const t=e.params.pagination;let{el:i}=e.pagination;i=yl(i),i.forEach((i=>{i.classList.remove(t.horizontalClass,t.verticalClass),i.classList.add(e.isHorizontal()?t.horizontalClass:t.verticalClass)}))})),n("init",(()=>{!1===e.params.pagination.enabled?g():(p(),h(),u())})),n("activeIndexChange",(()=>{void 0===e.snapIndex&&u()})),n("snapIndexChange",(()=>{u()})),n("snapGridLengthChange",(()=>{h(),u()})),n("destroy",(()=>{f()})),n("enable disable",(()=>{let{el:t}=e.pagination;t&&(t=yl(t),t.forEach((t=>t.classList[e.enabled?"remove":"add"](e.params.pagination.lockClass))))})),n("lock unlock",(()=>{u()})),n("click",((t,i)=>{const n=i.target,r=yl(e.pagination.el);if(e.params.pagination.el&&e.params.pagination.hideOnClick&&r&&r.length>0&&!n.classList.contains(e.params.pagination.bulletClass)){if(e.navigation&&(e.navigation.nextEl&&n===e.navigation.nextEl||e.navigation.prevEl&&n===e.navigation.prevEl))return;const t=r[0].classList.contains(e.params.pagination.hiddenClass);s(!0===t?"paginationShow":"paginationHide"),r.forEach((t=>t.classList.toggle(e.params.pagination.hiddenClass)))}}));const g=()=>{e.el.classList.add(e.params.pagination.paginationDisabledClass);let{el:t}=e.pagination;t&&(t=yl(t),t.forEach((t=>t.classList.add(e.params.pagination.paginationDisabledClass)))),f()};Object.assign(e.pagination,{enable:()=>{e.el.classList.remove(e.params.pagination.paginationDisabledClass);let{el:t}=e.pagination;t&&(t=yl(t),t.forEach((t=>t.classList.remove(e.params.pagination.paginationDisabledClass)))),p(),h(),u()},disable:g,render:h,update:u,init:p,destroy:f})}],loop:!0,pagination:{el:".feed-chapter__pagination",type:"bullets",clickable:!0},on:dd}),document.querySelector(".feed-chapter__images-swiper")&&new Zl(".feed-chapter__images-swiper",{loop:!0,slidesPerView:"auto",spaceBetween:window.innerWidth>768?17:8,freemode:!0,on:dd})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,