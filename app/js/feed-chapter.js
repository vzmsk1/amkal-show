/*! For license information please see feed-chapter.js.LICENSE.txt */
(()=>{"use strict";var t={1135:(t,e,i)=>{i.d(e,{E:()=>a,G:()=>l});var n=i(738),s=i(6575),r=i(1863);n.Ay.registerPlugin(s.u);const o=n.Ay.matchMedia(),a=(t,e)=>{(0,r.jo)(e,"_is-active"),e[t]&&e[t].classList.add("_is-active")},l=()=>{document.querySelector(".item-card__swiper")&&o.add("(min-width: 1024px)",(()=>{const t=document.querySelectorAll(".item-card__thumbs-slide");document.querySelectorAll(".item-card__slide").forEach(((e,i)=>{n.Ay.timeline({scrollTrigger:{trigger:e,start:"top top",end:"bottom bottom",onEnter:e=>{a(i,t)},onEnterBack:e=>{a(i,t)}}})}))}))}},7633:(t,e,i)=>{i.r(e),i.d(e,{locoScroll:()=>a,toggleScroll:()=>l});var n=i(6383),s=i(738),r=i(1135),o=i(6575);s.Ay.registerPlugin(o.u);const a=new n.Ay({el:document.querySelector(".wrapper"),smooth:!0,mobile:{smooth:!1},tablet:{smooth:!1,breakpoint:1025}});new ResizeObserver((()=>{setTimeout((()=>{a.destroy(),a.update(),a.init()}),100)})).observe(document.querySelector("main"));const l={touchStart:()=>{a.stop()},touchEnd:()=>{a.start()}};window.addEventListener("load",(function(){o.u.scrollerProxy(a.el,{scrollTop(t){return arguments.length?a.scrollTo(t,0,0):a.scroll.instance.scroll.y},getBoundingClientRect:()=>({top:0,left:0,width:window.innerWidth,height:window.innerHeight}),pinType:a.el.style.transform?"transform":"fixed"}),o.u.addEventListener("refresh",(()=>a.update())),o.u.defaults({scroller:a.el}),setTimeout((()=>{o.u.refresh(),o.u.update()}),0),(0,r.G)(),setTimeout((()=>{a.update()}),1e3)})),window.addEventListener("resize",(function(){a.update()})),document.addEventListener("mouseover",(function(t){t.target.closest("[data-sb]")?a.stop():a.start()})),document.querySelector(".footer-main__anchor")&&document.querySelector(".footer-main__anchor").addEventListener("click",(function(){a.scrollTo(0)})),document.querySelectorAll(".item-card__slide").length&&document.querySelectorAll(".item-card__slide").forEach(((t,e)=>{document.querySelectorAll(".item-card__thumbs-slide")[e].addEventListener("click",(function(){window.innerWidth>1024&&a.scrollTo(t,{offset:-1,callback:()=>{(0,r.E)(e,document.querySelectorAll(".item-card__thumbs-slide"))}})}))})),document.addEventListener("bodyLock",(function(){a.stop()})),document.addEventListener("bodyUnlock",(function(){a.start()}))},1863:(t,e,i)=>{i.d(e,{jo:()=>n});const n=(t,e)=>{for(var i=0;i<t.length;i++)t[i].classList.remove(e)}},2650:(t,e,i)=>{i.d(e,{H0:()=>St});var n,s,r,o,a,l,c,d,u=i(8607),h={},p=180/Math.PI,f=Math.PI/180,g=Math.atan2,m=/([A-Z])/g,v=/(left|right|width|margin|padding|x)/i,y=/[\s,\(]\S/,b={autoAlpha:"opacity,visibility",scale:"scaleX,scaleY",alpha:"opacity"},w=function(t,e){return e.set(e.t,e.p,Math.round(1e4*(e.s+e.c*t))/1e4+e.u,e)},_=function(t,e){return e.set(e.t,e.p,1===t?e.e:Math.round(1e4*(e.s+e.c*t))/1e4+e.u,e)},x=function(t,e){return e.set(e.t,e.p,t?Math.round(1e4*(e.s+e.c*t))/1e4+e.u:e.b,e)},T=function(t,e){var i=e.s+e.c*t;e.set(e.t,e.p,~~(i+(i<0?-.5:.5))+e.u,e)},S=function(t,e){return e.set(e.t,e.p,t?e.e:e.b,e)},E=function(t,e){return e.set(e.t,e.p,1!==t?e.b:e.e,e)},C=function(t,e,i){return t.style[e]=i},k=function(t,e,i){return t.style.setProperty(e,i)},M=function(t,e,i){return t._gsap[e]=i},O=function(t,e,i){return t._gsap.scaleX=t._gsap.scaleY=i},A=function(t,e,i,n,s){var r=t._gsap;r.scaleX=r.scaleY=i,r.renderTransform(s,r)},I=function(t,e,i,n,s){var r=t._gsap;r[e]=i,r.renderTransform(s,r)},P="transform",L=P+"Origin",D=function t(e,i){var n=this,s=this.target,r=s.style,o=s._gsap;if(e in h&&r){if(this.tfm=this.tfm||{},"transform"===e)return b.transform.split(",").forEach((function(e){return t.call(n,e,i)}));if(~(e=b[e]||e).indexOf(",")?e.split(",").forEach((function(t){return n.tfm[t]=Z(s,t)})):this.tfm[e]=o.x?o[e]:Z(s,e),e===L&&(this.tfm.zOrigin=o.zOrigin),this.props.indexOf(P)>=0)return;o.svg&&(this.svgo=s.getAttribute("data-svg-origin"),this.props.push(L,i,"")),e=P}(r||i)&&this.props.push(e,i,r[e])},z=function(t){t.translate&&(t.removeProperty("translate"),t.removeProperty("scale"),t.removeProperty("rotate"))},B=function(){var t,e,i=this.props,n=this.target,s=n.style,r=n._gsap;for(t=0;t<i.length;t+=3)i[t+1]?n[i[t]]=i[t+2]:i[t+2]?s[i[t]]=i[t+2]:s.removeProperty("--"===i[t].substr(0,2)?i[t]:i[t].replace(m,"-$1").toLowerCase());if(this.tfm){for(e in this.tfm)r[e]=this.tfm[e];r.svg&&(r.renderTransform(),n.setAttribute("data-svg-origin",this.svgo||"")),(t=c())&&t.isStart||s[P]||(z(s),r.zOrigin&&s[L]&&(s[L]+=" "+r.zOrigin+"px",r.zOrigin=0,r.renderTransform()),r.uncache=1)}},R=function(t,e){var i={target:t,props:[],revert:B,save:D};return t._gsap||u.os.core.getCache(t),e&&e.split(",").forEach((function(t){return i.save(t)})),i},F=function(t,e){var i=s.createElementNS?s.createElementNS((e||"http://www.w3.org/1999/xhtml").replace(/^https/,"http"),t):s.createElement(t);return i&&i.style?i:s.createElement(t)},H=function t(e,i,n){var s=getComputedStyle(e);return s[i]||s.getPropertyValue(i.replace(m,"-$1").toLowerCase())||s.getPropertyValue(i)||!n&&t(e,Y(i)||i,1)||""},G="O,Moz,ms,Ms,Webkit".split(","),Y=function(t,e,i){var n=(e||a).style,s=5;if(t in n&&!i)return t;for(t=t.charAt(0).toUpperCase()+t.substr(1);s--&&!(G[s]+t in n););return s<0?null:(3===s?"ms":s>=0?G[s]:"")+t},V=function(){"undefined"!=typeof window&&window.document&&(n=window,s=n.document,r=s.documentElement,a=F("div")||{style:{}},F("div"),P=Y(P),L=P+"Origin",a.style.cssText="border-width:0;line-height:0;position:absolute;padding:0",d=!!Y("perspective"),c=u.os.core.reverting,o=1)},j=function t(e){var i,n=F("svg",this.ownerSVGElement&&this.ownerSVGElement.getAttribute("xmlns")||"http://www.w3.org/2000/svg"),s=this.parentNode,o=this.nextSibling,a=this.style.cssText;if(r.appendChild(n),n.appendChild(this),this.style.display="block",e)try{i=this.getBBox(),this._gsapBBox=this.getBBox,this.getBBox=t}catch(t){}else this._gsapBBox&&(i=this._gsapBBox());return s&&(o?s.insertBefore(this,o):s.appendChild(this)),r.removeChild(n),this.style.cssText=a,i},N=function(t,e){for(var i=e.length;i--;)if(t.hasAttribute(e[i]))return t.getAttribute(e[i])},W=function(t){var e;try{e=t.getBBox()}catch(i){e=j.call(t,!0)}return e&&(e.width||e.height)||t.getBBox===j||(e=j.call(t,!0)),!e||e.width||e.x||e.y?e:{x:+N(t,["x","cx","x1"])||0,y:+N(t,["y","cy","y1"])||0,width:0,height:0}},X=function(t){return!(!t.getCTM||t.parentNode&&!t.ownerSVGElement||!W(t))},$=function(t,e){if(e){var i,n=t.style;e in h&&e!==L&&(e=P),n.removeProperty?("ms"!==(i=e.substr(0,2))&&"webkit"!==e.substr(0,6)||(e="-"+e),n.removeProperty("--"===i?e:e.replace(m,"-$1").toLowerCase())):n.removeAttribute(e)}},q=function(t,e,i,n,s,r){var o=new u.J7(t._pt,e,i,0,1,r?E:S);return t._pt=o,o.b=n,o.e=s,t._props.push(i),o},U={deg:1,rad:1,turn:1},K={grid:1,flex:1},J=function t(e,i,n,r){var o,l,c,d,p=parseFloat(n)||0,f=(n+"").trim().substr((p+"").length)||"px",g=a.style,m=v.test(i),y="svg"===e.tagName.toLowerCase(),b=(y?"client":"offset")+(m?"Width":"Height"),w=100,_="px"===r,x="%"===r;if(r===f||!p||U[r]||U[f])return p;if("px"!==f&&!_&&(p=t(e,i,n,"px")),d=e.getCTM&&X(e),(x||"%"===f)&&(h[i]||~i.indexOf("adius")))return o=d?e.getBBox()[m?"width":"height"]:e[b],(0,u.E_)(x?p/o*w:p/100*o);if(g[m?"width":"height"]=w+(_?f:r),l=~i.indexOf("adius")||"em"===r&&e.appendChild&&!y?e:e.parentNode,d&&(l=(e.ownerSVGElement||{}).parentNode),l&&l!==s&&l.appendChild||(l=s.body),(c=l._gsap)&&x&&c.width&&m&&c.time===u.au.time&&!c.uncache)return(0,u.E_)(p/c.width*w);if(!x||"height"!==i&&"width"!==i)(x||"%"===f)&&!K[H(l,"display")]&&(g.position=H(e,"position")),l===e&&(g.position="static"),l.appendChild(a),o=a[b],l.removeChild(a),g.position="absolute";else{var T=e.style[i];e.style[i]=w+r,o=e[b],T?e.style[i]=T:$(e,i)}return m&&x&&((c=(0,u.a0)(l)).time=u.au.time,c.width=l[b]),(0,u.E_)(_?o*p/w:o&&p?w/o*p:0)},Z=function(t,e,i,n){var s;return o||V(),e in b&&"transform"!==e&&~(e=b[e]).indexOf(",")&&(e=e.split(",")[0]),h[e]&&"transform"!==e?(s=ct(t,n),s="transformOrigin"!==e?s[e]:s.svg?s.origin:dt(H(t,L))+" "+s.zOrigin+"px"):(!(s=t.style[e])||"auto"===s||n||~(s+"").indexOf("calc("))&&(s=it[e]&&it[e](t,e,i)||H(t,e)||(0,u.n)(t,e)||("opacity"===e?1:0)),i&&!~(s+"").trim().indexOf(" ")?J(t,e,s,i)+i:s},Q=function(t,e,i,n){if(!i||"none"===i){var s=Y(e,t,1),r=s&&H(t,s,1);r&&r!==i?(e=s,i=r):"borderColor"===e&&(i=H(t,"borderTopColor"))}var o,a,l,c,d,h,p,f,g,m,v,y=new u.J7(this._pt,t.style,e,0,1,u.l1),b=0,w=0;if(y.b=i,y.e=n,i+="","auto"===(n+="")&&(h=t.style[e],t.style[e]=n,n=H(t,e)||n,h?t.style[e]=h:$(t,e)),o=[i,n],(0,u.Uc)(o),n=o[1],l=(i=o[0]).match(u.vM)||[],(n.match(u.vM)||[]).length){for(;a=u.vM.exec(n);)p=a[0],g=n.substring(b,a.index),d?d=(d+1)%5:"rgba("!==g.substr(-5)&&"hsla("!==g.substr(-5)||(d=1),p!==(h=l[w++]||"")&&(c=parseFloat(h)||0,v=h.substr((c+"").length),"="===p.charAt(1)&&(p=(0,u.B0)(c,p)+v),f=parseFloat(p),m=p.substr((f+"").length),b=u.vM.lastIndex-m.length,m||(m=m||u.Yz.units[e]||v,b===n.length&&(n+=m,y.e+=m)),v!==m&&(c=J(t,e,h,m)||0),y._pt={_next:y._pt,p:g||1===w?g:",",s:c,c:f-c,m:d&&d<4||"zIndex"===e?Math.round:0});y.c=b<n.length?n.substring(b,n.length):""}else y.r="display"===e&&"none"===n?E:S;return u.Ks.test(n)&&(y.e=0),this._pt=y,y},tt={top:"0%",bottom:"100%",left:"0%",right:"100%",center:"50%"},et=function(t,e){if(e.tween&&e.tween._time===e.tween._dur){var i,n,s,r=e.t,o=r.style,a=e.u,l=r._gsap;if("all"===a||!0===a)o.cssText="",n=1;else for(s=(a=a.split(",")).length;--s>-1;)i=a[s],h[i]&&(n=1,i="transformOrigin"===i?L:P),$(r,i);n&&($(r,P),l&&(l.svg&&r.removeAttribute("transform"),ct(r,1),l.uncache=1,z(o)))}},it={clearProps:function(t,e,i,n,s){if("isFromStart"!==s.data){var r=t._pt=new u.J7(t._pt,e,i,0,0,et);return r.u=n,r.pr=-10,r.tween=s,t._props.push(i),1}}},nt=[1,0,0,1,0,0],st={},rt=function(t){return"matrix(1, 0, 0, 1, 0, 0)"===t||"none"===t||!t},ot=function(t){var e=H(t,P);return rt(e)?nt:e.substr(7).match(u.vX).map(u.E_)},at=function(t,e){var i,n,s,o,a=t._gsap||(0,u.a0)(t),l=t.style,c=ot(t);return a.svg&&t.getAttribute("transform")?"1,0,0,1,0,0"===(c=[(s=t.transform.baseVal.consolidate().matrix).a,s.b,s.c,s.d,s.e,s.f]).join(",")?nt:c:(c!==nt||t.offsetParent||t===r||a.svg||(s=l.display,l.display="block",(i=t.parentNode)&&t.offsetParent||(o=1,n=t.nextElementSibling,r.appendChild(t)),c=ot(t),s?l.display=s:$(t,"display"),o&&(n?i.insertBefore(t,n):i?i.appendChild(t):r.removeChild(t))),e&&c.length>6?[c[0],c[1],c[4],c[5],c[12],c[13]]:c)},lt=function(t,e,i,n,s,r){var o,a,l,c=t._gsap,d=s||at(t,!0),u=c.xOrigin||0,h=c.yOrigin||0,p=c.xOffset||0,f=c.yOffset||0,g=d[0],m=d[1],v=d[2],y=d[3],b=d[4],w=d[5],_=e.split(" "),x=parseFloat(_[0])||0,T=parseFloat(_[1])||0;i?d!==nt&&(a=g*y-m*v)&&(l=x*(-m/a)+T*(g/a)-(g*w-m*b)/a,x=x*(y/a)+T*(-v/a)+(v*w-y*b)/a,T=l):(x=(o=W(t)).x+(~_[0].indexOf("%")?x/100*o.width:x),T=o.y+(~(_[1]||_[0]).indexOf("%")?T/100*o.height:T)),n||!1!==n&&c.smooth?(b=x-u,w=T-h,c.xOffset=p+(b*g+w*v)-b,c.yOffset=f+(b*m+w*y)-w):c.xOffset=c.yOffset=0,c.xOrigin=x,c.yOrigin=T,c.smooth=!!n,c.origin=e,c.originIsAbsolute=!!i,t.style[L]="0px 0px",r&&(q(r,c,"xOrigin",u,x),q(r,c,"yOrigin",h,T),q(r,c,"xOffset",p,c.xOffset),q(r,c,"yOffset",f,c.yOffset)),t.setAttribute("data-svg-origin",x+" "+T)},ct=function(t,e){var i=t._gsap||new u.n6(t);if("x"in i&&!e&&!i.uncache)return i;var n,s,r,o,a,l,c,h,m,v,y,b,w,_,x,T,S,E,C,k,M,O,A,I,D,z,B,R,F,G,Y,V,j=t.style,N=i.scaleX<0,W="px",$="deg",q=getComputedStyle(t),U=H(t,L)||"0";return n=s=r=l=c=h=m=v=y=0,o=a=1,i.svg=!(!t.getCTM||!X(t)),q.translate&&("none"===q.translate&&"none"===q.scale&&"none"===q.rotate||(j[P]=("none"!==q.translate?"translate3d("+(q.translate+" 0 0").split(" ").slice(0,3).join(", ")+") ":"")+("none"!==q.rotate?"rotate("+q.rotate+") ":"")+("none"!==q.scale?"scale("+q.scale.split(" ").join(",")+") ":"")+("none"!==q[P]?q[P]:"")),j.scale=j.rotate=j.translate="none"),_=at(t,i.svg),i.svg&&(i.uncache?(D=t.getBBox(),U=i.xOrigin-D.x+"px "+(i.yOrigin-D.y)+"px",I=""):I=!e&&t.getAttribute("data-svg-origin"),lt(t,I||U,!!I||i.originIsAbsolute,!1!==i.smooth,_)),b=i.xOrigin||0,w=i.yOrigin||0,_!==nt&&(E=_[0],C=_[1],k=_[2],M=_[3],n=O=_[4],s=A=_[5],6===_.length?(o=Math.sqrt(E*E+C*C),a=Math.sqrt(M*M+k*k),l=E||C?g(C,E)*p:0,(m=k||M?g(k,M)*p+l:0)&&(a*=Math.abs(Math.cos(m*f))),i.svg&&(n-=b-(b*E+w*k),s-=w-(b*C+w*M))):(V=_[6],G=_[7],B=_[8],R=_[9],F=_[10],Y=_[11],n=_[12],s=_[13],r=_[14],c=(x=g(V,F))*p,x&&(I=O*(T=Math.cos(-x))+B*(S=Math.sin(-x)),D=A*T+R*S,z=V*T+F*S,B=O*-S+B*T,R=A*-S+R*T,F=V*-S+F*T,Y=G*-S+Y*T,O=I,A=D,V=z),h=(x=g(-k,F))*p,x&&(T=Math.cos(-x),Y=M*(S=Math.sin(-x))+Y*T,E=I=E*T-B*S,C=D=C*T-R*S,k=z=k*T-F*S),l=(x=g(C,E))*p,x&&(I=E*(T=Math.cos(x))+C*(S=Math.sin(x)),D=O*T+A*S,C=C*T-E*S,A=A*T-O*S,E=I,O=D),c&&Math.abs(c)+Math.abs(l)>359.9&&(c=l=0,h=180-h),o=(0,u.E_)(Math.sqrt(E*E+C*C+k*k)),a=(0,u.E_)(Math.sqrt(A*A+V*V)),x=g(O,A),m=Math.abs(x)>2e-4?x*p:0,y=Y?1/(Y<0?-Y:Y):0),i.svg&&(I=t.getAttribute("transform"),i.forceCSS=t.setAttribute("transform","")||!rt(H(t,P)),I&&t.setAttribute("transform",I))),Math.abs(m)>90&&Math.abs(m)<270&&(N?(o*=-1,m+=l<=0?180:-180,l+=l<=0?180:-180):(a*=-1,m+=m<=0?180:-180)),e=e||i.uncache,i.x=n-((i.xPercent=n&&(!e&&i.xPercent||(Math.round(t.offsetWidth/2)===Math.round(-n)?-50:0)))?t.offsetWidth*i.xPercent/100:0)+W,i.y=s-((i.yPercent=s&&(!e&&i.yPercent||(Math.round(t.offsetHeight/2)===Math.round(-s)?-50:0)))?t.offsetHeight*i.yPercent/100:0)+W,i.z=r+W,i.scaleX=(0,u.E_)(o),i.scaleY=(0,u.E_)(a),i.rotation=(0,u.E_)(l)+$,i.rotationX=(0,u.E_)(c)+$,i.rotationY=(0,u.E_)(h)+$,i.skewX=m+$,i.skewY=v+$,i.transformPerspective=y+W,(i.zOrigin=parseFloat(U.split(" ")[2])||!e&&i.zOrigin||0)&&(j[L]=dt(U)),i.xOffset=i.yOffset=0,i.force3D=u.Yz.force3D,i.renderTransform=i.svg?vt:d?mt:ht,i.uncache=0,i},dt=function(t){return(t=t.split(" "))[0]+" "+t[1]},ut=function(t,e,i){var n=(0,u.l_)(e);return(0,u.E_)(parseFloat(e)+parseFloat(J(t,"x",i+"px",n)))+n},ht=function(t,e){e.z="0px",e.rotationY=e.rotationX="0deg",e.force3D=0,mt(t,e)},pt="0deg",ft="0px",gt=") ",mt=function(t,e){var i=e||this,n=i.xPercent,s=i.yPercent,r=i.x,o=i.y,a=i.z,l=i.rotation,c=i.rotationY,d=i.rotationX,u=i.skewX,h=i.skewY,p=i.scaleX,g=i.scaleY,m=i.transformPerspective,v=i.force3D,y=i.target,b=i.zOrigin,w="",_="auto"===v&&t&&1!==t||!0===v;if(b&&(d!==pt||c!==pt)){var x,T=parseFloat(c)*f,S=Math.sin(T),E=Math.cos(T);T=parseFloat(d)*f,x=Math.cos(T),r=ut(y,r,S*x*-b),o=ut(y,o,-Math.sin(T)*-b),a=ut(y,a,E*x*-b+b)}m!==ft&&(w+="perspective("+m+gt),(n||s)&&(w+="translate("+n+"%, "+s+"%) "),(_||r!==ft||o!==ft||a!==ft)&&(w+=a!==ft||_?"translate3d("+r+", "+o+", "+a+") ":"translate("+r+", "+o+gt),l!==pt&&(w+="rotate("+l+gt),c!==pt&&(w+="rotateY("+c+gt),d!==pt&&(w+="rotateX("+d+gt),u===pt&&h===pt||(w+="skew("+u+", "+h+gt),1===p&&1===g||(w+="scale("+p+", "+g+gt),y.style[P]=w||"translate(0, 0)"},vt=function(t,e){var i,n,s,r,o,a=e||this,l=a.xPercent,c=a.yPercent,d=a.x,h=a.y,p=a.rotation,g=a.skewX,m=a.skewY,v=a.scaleX,y=a.scaleY,b=a.target,w=a.xOrigin,_=a.yOrigin,x=a.xOffset,T=a.yOffset,S=a.forceCSS,E=parseFloat(d),C=parseFloat(h);p=parseFloat(p),g=parseFloat(g),(m=parseFloat(m))&&(g+=m=parseFloat(m),p+=m),p||g?(p*=f,g*=f,i=Math.cos(p)*v,n=Math.sin(p)*v,s=Math.sin(p-g)*-y,r=Math.cos(p-g)*y,g&&(m*=f,o=Math.tan(g-m),s*=o=Math.sqrt(1+o*o),r*=o,m&&(o=Math.tan(m),i*=o=Math.sqrt(1+o*o),n*=o)),i=(0,u.E_)(i),n=(0,u.E_)(n),s=(0,u.E_)(s),r=(0,u.E_)(r)):(i=v,r=y,n=s=0),(E&&!~(d+"").indexOf("px")||C&&!~(h+"").indexOf("px"))&&(E=J(b,"x",d,"px"),C=J(b,"y",h,"px")),(w||_||x||T)&&(E=(0,u.E_)(E+w-(w*i+_*s)+x),C=(0,u.E_)(C+_-(w*n+_*r)+T)),(l||c)&&(o=b.getBBox(),E=(0,u.E_)(E+l/100*o.width),C=(0,u.E_)(C+c/100*o.height)),o="matrix("+i+","+n+","+s+","+r+","+E+","+C+")",b.setAttribute("transform",o),S&&(b.style[P]=o)},yt=function(t,e,i,n,s){var r,o,a=360,l=(0,u.vQ)(s),c=parseFloat(s)*(l&&~s.indexOf("rad")?p:1)-n,d=n+c+"deg";return l&&("short"===(r=s.split("_")[1])&&(c%=a)!==c%180&&(c+=c<0?a:-360),"cw"===r&&c<0?c=(c+36e9)%a-~~(c/a)*a:"ccw"===r&&c>0&&(c=(c-36e9)%a-~~(c/a)*a)),t._pt=o=new u.J7(t._pt,e,i,n,c,_),o.e=d,o.u="deg",t._props.push(i),o},bt=function(t,e){for(var i in e)t[i]=e[i];return t},wt=function(t,e,i){var n,s,r,o,a,l,c,d=bt({},i._gsap),p=i.style;for(s in d.svg?(r=i.getAttribute("transform"),i.setAttribute("transform",""),p[P]=e,n=ct(i,1),$(i,P),i.setAttribute("transform",r)):(r=getComputedStyle(i)[P],p[P]=e,n=ct(i,1),p[P]=r),h)(r=d[s])!==(o=n[s])&&"perspective,force3D,transformOrigin,svgOrigin".indexOf(s)<0&&(a=(0,u.l_)(r)!==(c=(0,u.l_)(o))?J(i,s,r,c):parseFloat(r),l=parseFloat(o),t._pt=new u.J7(t._pt,n,s,a,l-a,w),t._pt.u=c||0,t._props.push(s));bt(n,d)};(0,u.fA)("padding,margin,Width,Radius",(function(t,e){var i="Top",n="Right",s="Bottom",r="Left",o=(e<3?[i,n,s,r]:[i+r,i+n,s+n,s+r]).map((function(i){return e<2?t+i:"border"+i+t}));it[e>1?"border"+t:t]=function(t,e,i,n,s){var r,a;if(arguments.length<4)return r=o.map((function(e){return Z(t,e,i)})),5===(a=r.join(" ")).split(r[0]).length?r[0]:a;r=(n+"").split(" "),a={},o.forEach((function(t,e){return a[t]=r[e]=r[e]||r[(e-1)/2|0]})),t.init(e,a,s)}}));var _t,xt,Tt,St={name:"css",register:V,targetTest:function(t){return t.style&&t.nodeType},init:function(t,e,i,n,s){var r,a,l,c,d,p,f,g,m,v,_,S,E,C,k,M,O,A,I,D,z=this._props,B=t.style,F=i.vars.startAt;for(f in o||V(),this.styles=this.styles||R(t),M=this.styles.props,this.tween=i,e)if("autoRound"!==f&&(a=e[f],!u.wU[f]||!(0,u.Zm)(f,e,i,n,t,s)))if(d=typeof a,p=it[f],"function"===d&&(d=typeof(a=a.call(i,n,t,s))),"string"===d&&~a.indexOf("random(")&&(a=(0,u.Vy)(a)),p)p(this,t,f,a,i)&&(k=1);else if("--"===f.substr(0,2))r=(getComputedStyle(t).getPropertyValue(f)+"").trim(),a+="",u.qA.lastIndex=0,u.qA.test(r)||(g=(0,u.l_)(r),m=(0,u.l_)(a)),m?g!==m&&(r=J(t,f,r,m)+m):g&&(a+=g),this.add(B,"setProperty",r,a,n,s,0,0,f),z.push(f),M.push(f,0,B[f]);else if("undefined"!==d){if(F&&f in F?(r="function"==typeof F[f]?F[f].call(i,n,t,s):F[f],(0,u.vQ)(r)&&~r.indexOf("random(")&&(r=(0,u.Vy)(r)),(0,u.l_)(r+"")||"auto"===r||(r+=u.Yz.units[f]||(0,u.l_)(Z(t,f))||""),"="===(r+"").charAt(1)&&(r=Z(t,f))):r=Z(t,f),c=parseFloat(r),(v="string"===d&&"="===a.charAt(1)&&a.substr(0,2))&&(a=a.substr(2)),l=parseFloat(a),f in b&&("autoAlpha"===f&&(1===c&&"hidden"===Z(t,"visibility")&&l&&(c=0),M.push("visibility",0,B.visibility),q(this,B,"visibility",c?"inherit":"hidden",l?"inherit":"hidden",!l)),"scale"!==f&&"transform"!==f&&~(f=b[f]).indexOf(",")&&(f=f.split(",")[0])),_=f in h)if(this.styles.save(f),S||((E=t._gsap).renderTransform&&!e.parseTransform||ct(t,e.parseTransform),C=!1!==e.smoothOrigin&&E.smooth,(S=this._pt=new u.J7(this._pt,B,P,0,1,E.renderTransform,E,0,-1)).dep=1),"scale"===f)this._pt=new u.J7(this._pt,E,"scaleY",E.scaleY,(v?(0,u.B0)(E.scaleY,v+l):l)-E.scaleY||0,w),this._pt.u=0,z.push("scaleY",f),f+="X";else{if("transformOrigin"===f){M.push(L,0,B[L]),A=void 0,I=void 0,D=void 0,A=(O=a).split(" "),I=A[0],D=A[1]||"50%","top"!==I&&"bottom"!==I&&"left"!==D&&"right"!==D||(O=I,I=D,D=O),A[0]=tt[I]||I,A[1]=tt[D]||D,a=A.join(" "),E.svg?lt(t,a,0,C,0,this):((m=parseFloat(a.split(" ")[2])||0)!==E.zOrigin&&q(this,E,"zOrigin",E.zOrigin,m),q(this,B,f,dt(r),dt(a)));continue}if("svgOrigin"===f){lt(t,a,1,C,0,this);continue}if(f in st){yt(this,E,f,c,v?(0,u.B0)(c,v+a):a);continue}if("smoothOrigin"===f){q(this,E,"smooth",E.smooth,a);continue}if("force3D"===f){E[f]=a;continue}if("transform"===f){wt(this,a,t);continue}}else f in B||(f=Y(f)||f);if(_||(l||0===l)&&(c||0===c)&&!y.test(a)&&f in B)l||(l=0),(g=(r+"").substr((c+"").length))!==(m=(0,u.l_)(a)||(f in u.Yz.units?u.Yz.units[f]:g))&&(c=J(t,f,r,m)),this._pt=new u.J7(this._pt,_?E:B,f,c,(v?(0,u.B0)(c,v+l):l)-c,_||"px"!==m&&"zIndex"!==f||!1===e.autoRound?w:T),this._pt.u=m||0,g!==m&&"%"!==m&&(this._pt.b=r,this._pt.r=x);else if(f in B)Q.call(this,t,f,r,v?v+a:a);else if(f in t)this.add(t,f,r||t[f],v?v+a:a,n,s);else if("parseTransform"!==f){(0,u.dg)(f,a);continue}_||(f in B?M.push(f,0,B[f]):M.push(f,1,r||t[f])),z.push(f)}k&&(0,u.St)(this)},render:function(t,e){if(e.tween._time||!c())for(var i=e._pt;i;)i.r(t,i.d),i=i._next;else e.styles.revert()},get:Z,aliases:b,getSetter:function(t,e,i){var n=b[e];return n&&n.indexOf(",")<0&&(e=n),e in h&&e!==L&&(t._gsap.x||Z(t,"x"))?i&&l===i?"scale"===e?O:M:(l=i||{})&&("scale"===e?A:I):t.style&&!(0,u.OF)(t.style[e])?C:~e.indexOf("-")?k:(0,u.Dx)(t,e)},core:{_removeProperty:$,_getMatrix:at}};u.os.utils.checkPrefix=Y,u.os.core.getStyleSaver=R,_t="x,y,z,scale,scaleX,scaleY,xPercent,yPercent",xt="rotation,rotationX,rotationY,skewX,skewY",Tt=(0,u.fA)(_t+","+xt+",transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective",(function(t){h[t]=1})),(0,u.fA)(xt,(function(t){u.Yz.units[t]="deg",st[t]=1})),b[Tt[13]]=_t+","+xt,(0,u.fA)("0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY",(function(t){var e=t.split(":");b[e[1]]=Tt[e[0]]})),(0,u.fA)("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective",(function(t){u.Yz.units[t]="px"})),u.os.registerPlugin(St)},6575:(t,e,i)=>{function n(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}i.d(e,{u:()=>li});var s,r,o,a,l,c,d,u,h,p,f,g,m,v=function(){return s||"undefined"!=typeof window&&(s=window.gsap)&&s.registerPlugin&&s},y=1,b=[],w=[],_=[],x=Date.now,T=function(t,e){return e},S=function(t,e){return~_.indexOf(t)&&_[_.indexOf(t)+1][e]},E=function(t){return!!~p.indexOf(t)},C=function(t,e,i,n,s){return t.addEventListener(e,i,{passive:!1!==n,capture:!!s})},k=function(t,e,i,n){return t.removeEventListener(e,i,!!n)},M="scrollLeft",O="scrollTop",A=function(){return f&&f.isPressed||w.cache++},I=function(t,e){var i=function i(n){if(n||0===n){y&&(o.history.scrollRestoration="manual");var s=f&&f.isPressed;n=i.v=Math.round(n)||(f&&f.iOS?1:0),t(n),i.cacheID=w.cache,s&&T("ss",n)}else(e||w.cache!==i.cacheID||T("ref"))&&(i.cacheID=w.cache,i.v=t());return i.v+i.offset};return i.offset=0,t&&i},P={s:M,p:"left",p2:"Left",os:"right",os2:"Right",d:"width",d2:"Width",a:"x",sc:I((function(t){return arguments.length?o.scrollTo(t,L.sc()):o.pageXOffset||a[M]||l[M]||c[M]||0}))},L={s:O,p:"top",p2:"Top",os:"bottom",os2:"Bottom",d:"height",d2:"Height",a:"y",op:P,sc:I((function(t){return arguments.length?o.scrollTo(P.sc(),t):o.pageYOffset||a[O]||l[O]||c[O]||0}))},D=function(t,e){return(e&&e._ctx&&e._ctx.selector||s.utils.toArray)(t)[0]||("string"==typeof t&&!1!==s.config().nullTargetWarn?console.warn("Element not found:",t):null)},z=function(t,e){var i=e.s,n=e.sc;E(t)&&(t=a.scrollingElement||l);var r=w.indexOf(t),o=n===L.sc?1:2;!~r&&(r=w.push(t)-1),w[r+o]||C(t,"scroll",A);var c=w[r+o],d=c||(w[r+o]=I(S(t,i),!0)||(E(t)?n:I((function(e){return arguments.length?t[i]=e:t[i]}))));return d.target=t,c||(d.smooth="smooth"===s.getProperty(t,"scrollBehavior")),d},B=function(t,e,i){var n=t,s=t,r=x(),o=r,a=e||50,l=Math.max(500,3*a),c=function(t,e){var l=x();e||l-r>a?(s=n,n=t,o=r,r=l):i?n+=t:n=s+(t-s)/(l-o)*(r-o)};return{update:c,reset:function(){s=n=i?0:n,o=r=0},getVelocity:function(t){var e=o,a=s,d=x();return(t||0===t)&&t!==n&&c(t),r===o||d-o>l?0:(n+(i?a:-a))/((i?d:r)-e)*1e3}}},R=function(t,e){return e&&!t._gsapAllow&&t.preventDefault(),t.changedTouches?t.changedTouches[0]:t},F=function(t){var e=Math.max.apply(Math,t),i=Math.min.apply(Math,t);return Math.abs(e)>=Math.abs(i)?e:i},H=function(){var t,e,i,n;(h=s.core.globals().ScrollTrigger)&&h.core&&(t=h.core,e=t.bridge||{},i=t._scrollers,n=t._proxies,i.push.apply(i,w),n.push.apply(n,_),w=i,_=n,T=function(t,i){return e[t](i)})},G=function(t){return s=t||v(),!r&&s&&"undefined"!=typeof document&&document.body&&(o=window,a=document,l=a.documentElement,c=a.body,p=[o,a,l,c],s.utils.clamp,m=s.core.context||function(){},u="onpointerenter"in c?"pointer":"mouse",d=Y.isTouch=o.matchMedia&&o.matchMedia("(hover: none), (pointer: coarse)").matches?1:"ontouchstart"in o||navigator.maxTouchPoints>0||navigator.msMaxTouchPoints>0?2:0,g=Y.eventTypes=("ontouchstart"in l?"touchstart,touchmove,touchcancel,touchend":"onpointerdown"in l?"pointerdown,pointermove,pointercancel,pointerup":"mousedown,mousemove,mouseup,mouseup").split(","),setTimeout((function(){return y=0}),500),H(),r=1),r};P.op=L,w.cache=0;var Y=function(){function t(t){this.init(t)}var e,i,p;return t.prototype.init=function(t){r||G(s)||console.warn("Please gsap.registerPlugin(Observer)"),h||H();var e=t.tolerance,i=t.dragMinimum,n=t.type,p=t.target,v=t.lineHeight,y=t.debounce,w=t.preventDefault,_=t.onStop,T=t.onStopDelay,S=t.ignore,M=t.wheelSpeed,O=t.event,I=t.onDragStart,Y=t.onDragEnd,V=t.onDrag,j=t.onPress,N=t.onRelease,W=t.onRight,X=t.onLeft,$=t.onUp,q=t.onDown,U=t.onChangeX,K=t.onChangeY,J=t.onChange,Z=t.onToggleX,Q=t.onToggleY,tt=t.onHover,et=t.onHoverEnd,it=t.onMove,nt=t.ignoreCheck,st=t.isNormalizer,rt=t.onGestureStart,ot=t.onGestureEnd,at=t.onWheel,lt=t.onEnable,ct=t.onDisable,dt=t.onClick,ut=t.scrollSpeed,ht=t.capture,pt=t.allowClicks,ft=t.lockAxis,gt=t.onLockAxis;this.target=p=D(p)||l,this.vars=t,S&&(S=s.utils.toArray(S)),e=e||1e-9,i=i||0,M=M||1,ut=ut||1,n=n||"wheel,touch,pointer",y=!1!==y,v||(v=parseFloat(o.getComputedStyle(c).lineHeight)||22);var mt,vt,yt,bt,wt,_t,xt,Tt=this,St=0,Et=0,Ct=t.passive||!w,kt=z(p,P),Mt=z(p,L),Ot=kt(),At=Mt(),It=~n.indexOf("touch")&&!~n.indexOf("pointer")&&"pointerdown"===g[0],Pt=E(p),Lt=p.ownerDocument||a,Dt=[0,0,0],zt=[0,0,0],Bt=0,Rt=function(){return Bt=x()},Ft=function(t,e){return(Tt.event=t)&&S&&~S.indexOf(t.target)||e&&It&&"touch"!==t.pointerType||nt&&nt(t,e)},Ht=function(){var t=Tt.deltaX=F(Dt),i=Tt.deltaY=F(zt),n=Math.abs(t)>=e,s=Math.abs(i)>=e;J&&(n||s)&&J(Tt,t,i,Dt,zt),n&&(W&&Tt.deltaX>0&&W(Tt),X&&Tt.deltaX<0&&X(Tt),U&&U(Tt),Z&&Tt.deltaX<0!=St<0&&Z(Tt),St=Tt.deltaX,Dt[0]=Dt[1]=Dt[2]=0),s&&(q&&Tt.deltaY>0&&q(Tt),$&&Tt.deltaY<0&&$(Tt),K&&K(Tt),Q&&Tt.deltaY<0!=Et<0&&Q(Tt),Et=Tt.deltaY,zt[0]=zt[1]=zt[2]=0),(bt||yt)&&(it&&it(Tt),yt&&(V(Tt),yt=!1),bt=!1),_t&&!(_t=!1)&&gt&&gt(Tt),wt&&(at(Tt),wt=!1),mt=0},Gt=function(t,e,i){Dt[i]+=t,zt[i]+=e,Tt._vx.update(t),Tt._vy.update(e),y?mt||(mt=requestAnimationFrame(Ht)):Ht()},Yt=function(t,e){ft&&!xt&&(Tt.axis=xt=Math.abs(t)>Math.abs(e)?"x":"y",_t=!0),"y"!==xt&&(Dt[2]+=t,Tt._vx.update(t,!0)),"x"!==xt&&(zt[2]+=e,Tt._vy.update(e,!0)),y?mt||(mt=requestAnimationFrame(Ht)):Ht()},Vt=function(t){if(!Ft(t,1)){var e=(t=R(t,w)).clientX,n=t.clientY,s=e-Tt.x,r=n-Tt.y,o=Tt.isDragging;Tt.x=e,Tt.y=n,(o||Math.abs(Tt.startX-e)>=i||Math.abs(Tt.startY-n)>=i)&&(V&&(yt=!0),o||(Tt.isDragging=!0),Yt(s,r),o||I&&I(Tt))}},jt=Tt.onPress=function(t){Ft(t,1)||t&&t.button||(Tt.axis=xt=null,vt.pause(),Tt.isPressed=!0,t=R(t),St=Et=0,Tt.startX=Tt.x=t.clientX,Tt.startY=Tt.y=t.clientY,Tt._vx.reset(),Tt._vy.reset(),C(st?p:Lt,g[1],Vt,Ct,!0),Tt.deltaX=Tt.deltaY=0,j&&j(Tt))},Nt=Tt.onRelease=function(t){if(!Ft(t,1)){k(st?p:Lt,g[1],Vt,!0);var e=!isNaN(Tt.y-Tt.startY),i=Tt.isDragging,n=i&&(Math.abs(Tt.x-Tt.startX)>3||Math.abs(Tt.y-Tt.startY)>3),r=R(t);!n&&e&&(Tt._vx.reset(),Tt._vy.reset(),w&&pt&&s.delayedCall(.08,(function(){if(x()-Bt>300&&!t.defaultPrevented)if(t.target.click)t.target.click();else if(Lt.createEvent){var e=Lt.createEvent("MouseEvents");e.initMouseEvent("click",!0,!0,o,1,r.screenX,r.screenY,r.clientX,r.clientY,!1,!1,!1,!1,0,null),t.target.dispatchEvent(e)}}))),Tt.isDragging=Tt.isGesturing=Tt.isPressed=!1,_&&i&&!st&&vt.restart(!0),Y&&i&&Y(Tt),N&&N(Tt,n)}},Wt=function(t){return t.touches&&t.touches.length>1&&(Tt.isGesturing=!0)&&rt(t,Tt.isDragging)},Xt=function(){return(Tt.isGesturing=!1)||ot(Tt)},$t=function(t){if(!Ft(t)){var e=kt(),i=Mt();Gt((e-Ot)*ut,(i-At)*ut,1),Ot=e,At=i,_&&vt.restart(!0)}},qt=function(t){if(!Ft(t)){t=R(t,w),at&&(wt=!0);var e=(1===t.deltaMode?v:2===t.deltaMode?o.innerHeight:1)*M;Gt(t.deltaX*e,t.deltaY*e,0),_&&!st&&vt.restart(!0)}},Ut=function(t){if(!Ft(t)){var e=t.clientX,i=t.clientY,n=e-Tt.x,s=i-Tt.y;Tt.x=e,Tt.y=i,bt=!0,_&&vt.restart(!0),(n||s)&&Yt(n,s)}},Kt=function(t){Tt.event=t,tt(Tt)},Jt=function(t){Tt.event=t,et(Tt)},Zt=function(t){return Ft(t)||R(t,w)&&dt(Tt)};vt=Tt._dc=s.delayedCall(T||.25,(function(){Tt._vx.reset(),Tt._vy.reset(),vt.pause(),_&&_(Tt)})).pause(),Tt.deltaX=Tt.deltaY=0,Tt._vx=B(0,50,!0),Tt._vy=B(0,50,!0),Tt.scrollX=kt,Tt.scrollY=Mt,Tt.isDragging=Tt.isGesturing=Tt.isPressed=!1,m(this),Tt.enable=function(t){return Tt.isEnabled||(C(Pt?Lt:p,"scroll",A),n.indexOf("scroll")>=0&&C(Pt?Lt:p,"scroll",$t,Ct,ht),n.indexOf("wheel")>=0&&C(p,"wheel",qt,Ct,ht),(n.indexOf("touch")>=0&&d||n.indexOf("pointer")>=0)&&(C(p,g[0],jt,Ct,ht),C(Lt,g[2],Nt),C(Lt,g[3],Nt),pt&&C(p,"click",Rt,!0,!0),dt&&C(p,"click",Zt),rt&&C(Lt,"gesturestart",Wt),ot&&C(Lt,"gestureend",Xt),tt&&C(p,u+"enter",Kt),et&&C(p,u+"leave",Jt),it&&C(p,u+"move",Ut)),Tt.isEnabled=!0,t&&t.type&&jt(t),lt&&lt(Tt)),Tt},Tt.disable=function(){Tt.isEnabled&&(b.filter((function(t){return t!==Tt&&E(t.target)})).length||k(Pt?Lt:p,"scroll",A),Tt.isPressed&&(Tt._vx.reset(),Tt._vy.reset(),k(st?p:Lt,g[1],Vt,!0)),k(Pt?Lt:p,"scroll",$t,ht),k(p,"wheel",qt,ht),k(p,g[0],jt,ht),k(Lt,g[2],Nt),k(Lt,g[3],Nt),k(p,"click",Rt,!0),k(p,"click",Zt),k(Lt,"gesturestart",Wt),k(Lt,"gestureend",Xt),k(p,u+"enter",Kt),k(p,u+"leave",Jt),k(p,u+"move",Ut),Tt.isEnabled=Tt.isPressed=Tt.isDragging=!1,ct&&ct(Tt))},Tt.kill=Tt.revert=function(){Tt.disable();var t=b.indexOf(Tt);t>=0&&b.splice(t,1),f===Tt&&(f=0)},b.push(Tt),st&&E(p)&&(f=Tt),Tt.enable(O)},e=t,(i=[{key:"velocityX",get:function(){return this._vx.getVelocity()}},{key:"velocityY",get:function(){return this._vy.getVelocity()}}])&&n(e.prototype,i),p&&n(e,p),t}();Y.version="3.12.5",Y.create=function(t){return new Y(t)},Y.register=G,Y.getAll=function(){return b.slice()},Y.getById=function(t){return b.filter((function(e){return e.vars.id===t}))[0]},v()&&s.registerPlugin(Y);var V,j,N,W,X,$,q,U,K,J,Z,Q,tt,et,it,nt,st,rt,ot,at,lt,ct,dt,ut,ht,pt,ft,gt,mt,vt,yt,bt,wt,_t,xt,Tt,St,Et,Ct=1,kt=Date.now,Mt=kt(),Ot=0,At=0,It=function(t,e,i){var n=Wt(t)&&("clamp("===t.substr(0,6)||t.indexOf("max")>-1);return i["_"+e+"Clamp"]=n,n?t.substr(6,t.length-7):t},Pt=function(t,e){return!e||Wt(t)&&"clamp("===t.substr(0,6)?t:"clamp("+t+")"},Lt=function t(){return At&&requestAnimationFrame(t)},Dt=function(){return et=1},zt=function(){return et=0},Bt=function(t){return t},Rt=function(t){return Math.round(1e5*t)/1e5||0},Ft=function(){return"undefined"!=typeof window},Ht=function(){return V||Ft()&&(V=window.gsap)&&V.registerPlugin&&V},Gt=function(t){return!!~q.indexOf(t)},Yt=function(t){return("Height"===t?yt:N["inner"+t])||X["client"+t]||$["client"+t]},Vt=function(t){return S(t,"getBoundingClientRect")||(Gt(t)?function(){return ei.width=N.innerWidth,ei.height=yt,ei}:function(){return fe(t)})},jt=function(t,e){var i=e.s,n=e.d2,s=e.d,r=e.a;return Math.max(0,(i="scroll"+n)&&(r=S(t,i))?r()-Vt(t)()[s]:Gt(t)?(X[i]||$[i])-Yt(n):t[i]-t["offset"+n])},Nt=function(t,e){for(var i=0;i<ot.length;i+=3)(!e||~e.indexOf(ot[i+1]))&&t(ot[i],ot[i+1],ot[i+2])},Wt=function(t){return"string"==typeof t},Xt=function(t){return"function"==typeof t},$t=function(t){return"number"==typeof t},qt=function(t){return"object"==typeof t},Ut=function(t,e,i){return t&&t.progress(e?0:1)&&i&&t.pause()},Kt=function(t,e){if(t.enabled){var i=t._ctx?t._ctx.add((function(){return e(t)})):e(t);i&&i.totalTime&&(t.callbackAnimation=i)}},Jt=Math.abs,Zt="left",Qt="right",te="bottom",ee="width",ie="height",ne="Right",se="Left",re="Top",oe="Bottom",ae="padding",le="margin",ce="Width",de="Height",ue="px",he=function(t){return N.getComputedStyle(t)},pe=function(t,e){for(var i in e)i in t||(t[i]=e[i]);return t},fe=function(t,e){var i=e&&"matrix(1, 0, 0, 1, 0, 0)"!==he(t)[it]&&V.to(t,{x:0,y:0,xPercent:0,yPercent:0,rotation:0,rotationX:0,rotationY:0,scale:1,skewX:0,skewY:0}).progress(1),n=t.getBoundingClientRect();return i&&i.progress(0).kill(),n},ge=function(t,e){var i=e.d2;return t["offset"+i]||t["client"+i]||0},me=function(t){var e,i=[],n=t.labels,s=t.duration();for(e in n)i.push(n[e]/s);return i},ve=function(t){var e=V.utils.snap(t),i=Array.isArray(t)&&t.slice(0).sort((function(t,e){return t-e}));return i?function(t,n,s){var r;if(void 0===s&&(s=.001),!n)return e(t);if(n>0){for(t-=s,r=0;r<i.length;r++)if(i[r]>=t)return i[r];return i[r-1]}for(r=i.length,t+=s;r--;)if(i[r]<=t)return i[r];return i[0]}:function(i,n,s){void 0===s&&(s=.001);var r=e(i);return!n||Math.abs(r-i)<s||r-i<0==n<0?r:e(n<0?i-t:i+t)}},ye=function(t,e,i,n){return i.split(",").forEach((function(i){return t(e,i,n)}))},be=function(t,e,i,n,s){return t.addEventListener(e,i,{passive:!n,capture:!!s})},we=function(t,e,i,n){return t.removeEventListener(e,i,!!n)},_e=function(t,e,i){(i=i&&i.wheelHandler)&&(t(e,"wheel",i),t(e,"touchmove",i))},xe={startColor:"green",endColor:"red",indent:0,fontSize:"16px",fontWeight:"normal"},Te={toggleActions:"play",anticipatePin:0},Se={top:0,left:0,center:.5,bottom:1,right:1},Ee=function(t,e){if(Wt(t)){var i=t.indexOf("="),n=~i?+(t.charAt(i-1)+1)*parseFloat(t.substr(i+1)):0;~i&&(t.indexOf("%")>i&&(n*=e/100),t=t.substr(0,i-1)),t=n+(t in Se?Se[t]*e:~t.indexOf("%")?parseFloat(t)*e/100:parseFloat(t)||0)}return t},Ce=function(t,e,i,n,s,r,o,a){var l=s.startColor,c=s.endColor,d=s.fontSize,u=s.indent,h=s.fontWeight,p=W.createElement("div"),f=Gt(i)||"fixed"===S(i,"pinType"),g=-1!==t.indexOf("scroller"),m=f?$:i,v=-1!==t.indexOf("start"),y=v?l:c,b="border-color:"+y+";font-size:"+d+";color:"+y+";font-weight:"+h+";pointer-events:none;white-space:nowrap;font-family:sans-serif,Arial;z-index:1000;padding:4px 8px;border-width:0;border-style:solid;";return b+="position:"+((g||a)&&f?"fixed;":"absolute;"),(g||a||!f)&&(b+=(n===L?Qt:te)+":"+(r+parseFloat(u))+"px;"),o&&(b+="box-sizing:border-box;text-align:left;width:"+o.offsetWidth+"px;"),p._isStart=v,p.setAttribute("class","gsap-marker-"+t+(e?" marker-"+e:"")),p.style.cssText=b,p.innerText=e||0===e?t+"-"+e:t,m.children[0]?m.insertBefore(p,m.children[0]):m.appendChild(p),p._offset=p["offset"+n.op.d2],ke(p,0,n,v),p},ke=function(t,e,i,n){var s={display:"block"},r=i[n?"os2":"p2"],o=i[n?"p2":"os2"];t._isFlipped=n,s[i.a+"Percent"]=n?-100:0,s[i.a]=n?"1px":0,s["border"+r+ce]=1,s["border"+o+ce]=0,s[i.p]=e+"px",V.set(t,s)},Me=[],Oe={},Ae=function(){return kt()-Ot>34&&(xt||(xt=requestAnimationFrame(qe)))},Ie=function(){(!dt||!dt.isPressed||dt.startX>$.clientWidth)&&(w.cache++,dt?xt||(xt=requestAnimationFrame(qe)):qe(),Ot||Re("scrollStart"),Ot=kt())},Pe=function(){pt=N.innerWidth,ht=N.innerHeight},Le=function(){w.cache++,!tt&&!ct&&!W.fullscreenElement&&!W.webkitFullscreenElement&&(!ut||pt!==N.innerWidth||Math.abs(N.innerHeight-ht)>.25*N.innerHeight)&&U.restart(!0)},De={},ze=[],Be=function t(){return we(li,"scrollEnd",t)||We(!0)},Re=function(t){return De[t]&&De[t].map((function(t){return t()}))||ze},Fe=[],He=function(t){for(var e=0;e<Fe.length;e+=5)(!t||Fe[e+4]&&Fe[e+4].query===t)&&(Fe[e].style.cssText=Fe[e+1],Fe[e].getBBox&&Fe[e].setAttribute("transform",Fe[e+2]||""),Fe[e+3].uncache=1)},Ge=function(t,e){var i;for(nt=0;nt<Me.length;nt++)!(i=Me[nt])||e&&i._ctx!==e||(t?i.kill(1):i.revert(!0,!0));bt=!0,e&&He(e),e||Re("revert")},Ye=function(t,e){w.cache++,(e||!Tt)&&w.forEach((function(t){return Xt(t)&&t.cacheID++&&(t.rec=0)})),Wt(t)&&(N.history.scrollRestoration=mt=t)},Ve=0,je=function(){$.appendChild(vt),yt=!dt&&vt.offsetHeight||N.innerHeight,$.removeChild(vt)},Ne=function(t){return K(".gsap-marker-start, .gsap-marker-end, .gsap-marker-scroller-start, .gsap-marker-scroller-end").forEach((function(e){return e.style.display=t?"none":"block"}))},We=function(t,e){if(!Ot||t||bt){je(),Tt=li.isRefreshing=!0,w.forEach((function(t){return Xt(t)&&++t.cacheID&&(t.rec=t())}));var i=Re("refreshInit");at&&li.sort(),e||Ge(),w.forEach((function(t){Xt(t)&&(t.smooth&&(t.target.style.scrollBehavior="auto"),t(0))})),Me.slice(0).forEach((function(t){return t.refresh()})),bt=!1,Me.forEach((function(t){if(t._subPinOffset&&t.pin){var e=t.vars.horizontal?"offsetWidth":"offsetHeight",i=t.pin[e];t.revert(!0,1),t.adjustPinSpacing(t.pin[e]-i),t.refresh()}})),wt=1,Ne(!0),Me.forEach((function(t){var e=jt(t.scroller,t._dir),i="max"===t.vars.end||t._endClamp&&t.end>e,n=t._startClamp&&t.start>=e;(i||n)&&t.setPositions(n?e-1:t.start,i?Math.max(n?e:t.start+1,e):t.end,!0)})),Ne(!1),wt=0,i.forEach((function(t){return t&&t.render&&t.render(-1)})),w.forEach((function(t){Xt(t)&&(t.smooth&&requestAnimationFrame((function(){return t.target.style.scrollBehavior="smooth"})),t.rec&&t(t.rec))})),Ye(mt,1),U.pause(),Ve++,Tt=2,qe(2),Me.forEach((function(t){return Xt(t.vars.onRefresh)&&t.vars.onRefresh(t)})),Tt=li.isRefreshing=!1,Re("refresh")}else be(li,"scrollEnd",Be)},Xe=0,$e=1,qe=function(t){if(2===t||!Tt&&!bt){li.isUpdating=!0,Et&&Et.update(0);var e=Me.length,i=kt(),n=i-Mt>=50,s=e&&Me[0].scroll();if($e=Xe>s?-1:1,Tt||(Xe=s),n&&(Ot&&!et&&i-Ot>200&&(Ot=0,Re("scrollEnd")),Z=Mt,Mt=i),$e<0){for(nt=e;nt-- >0;)Me[nt]&&Me[nt].update(0,n);$e=1}else for(nt=0;nt<e;nt++)Me[nt]&&Me[nt].update(0,n);li.isUpdating=!1}xt=0},Ue=[Zt,"top",te,Qt,le+oe,le+ne,le+re,le+se,"display","flexShrink","float","zIndex","gridColumnStart","gridColumnEnd","gridRowStart","gridRowEnd","gridArea","justifySelf","alignSelf","placeSelf","order"],Ke=Ue.concat([ee,ie,"boxSizing","max"+ce,"max"+de,"position",le,ae,ae+re,ae+ne,ae+oe,ae+se]),Je=function(t,e,i,n){if(!t._gsap.swappedIn){for(var s,r=Ue.length,o=e.style,a=t.style;r--;)o[s=Ue[r]]=i[s];o.position="absolute"===i.position?"absolute":"relative","inline"===i.display&&(o.display="inline-block"),a[te]=a[Qt]="auto",o.flexBasis=i.flexBasis||"auto",o.overflow="visible",o.boxSizing="border-box",o[ee]=ge(t,P)+ue,o[ie]=ge(t,L)+ue,o[ae]=a[le]=a.top=a[Zt]="0",Qe(n),a[ee]=a["max"+ce]=i[ee],a[ie]=a["max"+de]=i[ie],a[ae]=i[ae],t.parentNode!==e&&(t.parentNode.insertBefore(e,t),e.appendChild(t)),t._gsap.swappedIn=!0}},Ze=/([A-Z])/g,Qe=function(t){if(t){var e,i,n=t.t.style,s=t.length,r=0;for((t.t._gsap||V.core.getCache(t.t)).uncache=1;r<s;r+=2)i=t[r+1],e=t[r],i?n[e]=i:n[e]&&n.removeProperty(e.replace(Ze,"-$1").toLowerCase())}},ti=function(t){for(var e=Ke.length,i=t.style,n=[],s=0;s<e;s++)n.push(Ke[s],i[Ke[s]]);return n.t=t,n},ei={left:0,top:0},ii=function(t,e,i,n,s,r,o,a,l,c,d,u,h,p){Xt(t)&&(t=t(a)),Wt(t)&&"max"===t.substr(0,3)&&(t=u+("="===t.charAt(4)?Ee("0"+t.substr(3),i):0));var f,g,m,v=h?h.time():0;if(h&&h.seek(0),isNaN(t)||(t=+t),$t(t))h&&(t=V.utils.mapRange(h.scrollTrigger.start,h.scrollTrigger.end,0,u,t)),o&&ke(o,i,n,!0);else{Xt(e)&&(e=e(a));var y,b,w,_,x=(t||"0").split(" ");m=D(e,a)||$,(y=fe(m)||{})&&(y.left||y.top)||"none"!==he(m).display||(_=m.style.display,m.style.display="block",y=fe(m),_?m.style.display=_:m.style.removeProperty("display")),b=Ee(x[0],y[n.d]),w=Ee(x[1]||"0",i),t=y[n.p]-l[n.p]-c+b+s-w,o&&ke(o,w,n,i-w<20||o._isStart&&w>20),i-=i-w}if(p&&(a[p]=t||-.001,t<0&&(t=0)),r){var T=t+i,S=r._isStart;f="scroll"+n.d2,ke(r,T,n,S&&T>20||!S&&(d?Math.max($[f],X[f]):r.parentNode[f])<=T+1),d&&(l=fe(o),d&&(r.style[n.op.p]=l[n.op.p]-n.op.m-r._offset+ue))}return h&&m&&(f=fe(m),h.seek(u),g=fe(m),h._caScrollDist=f[n.p]-g[n.p],t=t/h._caScrollDist*u),h&&h.seek(v),h?t:Math.round(t)},ni=/(webkit|moz|length|cssText|inset)/i,si=function(t,e,i,n){if(t.parentNode!==e){var s,r,o=t.style;if(e===$){for(s in t._stOrig=o.cssText,r=he(t))+s||ni.test(s)||!r[s]||"string"!=typeof o[s]||"0"===s||(o[s]=r[s]);o.top=i,o.left=n}else o.cssText=t._stOrig;V.core.getCache(t).uncache=1,e.appendChild(t)}},ri=function(t,e,i){var n=e,s=n;return function(e){var r=Math.round(t());return r!==n&&r!==s&&Math.abs(r-n)>3&&Math.abs(r-s)>3&&(e=r,i&&i()),s=n,n=e,e}},oi=function(t,e,i){var n={};n[e.p]="+="+i,V.set(t,n)},ai=function(t,e){var i=z(t,e),n="_scroll"+e.p2,s=function e(s,r,o,a,l){var c=e.tween,d=r.onComplete,u={};o=o||i();var h=ri(i,o,(function(){c.kill(),e.tween=0}));return l=a&&l||0,a=a||s-o,c&&c.kill(),r[n]=s,r.inherit=!1,r.modifiers=u,u[n]=function(){return h(o+a*c.ratio+l*c.ratio*c.ratio)},r.onUpdate=function(){w.cache++,e.tween&&qe()},r.onComplete=function(){e.tween=0,d&&d.call(c)},c=e.tween=V.to(t,r)};return t[n]=i,i.wheelHandler=function(){return s.tween&&s.tween.kill()&&(s.tween=0)},be(t,"wheel",i.wheelHandler),li.isTouch&&be(t,"touchmove",i.wheelHandler),s},li=function(){function t(e,i){j||t.register(V)||console.warn("Please gsap.registerPlugin(ScrollTrigger)"),gt(this),this.init(e,i)}return t.prototype.init=function(e,i){if(this.progress=this.start=0,this.vars&&this.kill(!0,!0),At){var n,s,r,o,a,l,c,d,u,h,p,f,g,m,v,y,b,x,T,E,C,k,M,O,A,I,B,R,F,H,G,Y,j,q,U,Q,it,st,rt,ot,ct,dt,ut=e=pe(Wt(e)||$t(e)||e.nodeType?{trigger:e}:e,Te),ht=ut.onUpdate,pt=ut.toggleClass,ft=ut.id,gt=ut.onToggle,mt=ut.onRefresh,vt=ut.scrub,yt=ut.trigger,bt=ut.pin,xt=ut.pinSpacing,Mt=ut.invalidateOnRefresh,Lt=ut.anticipatePin,Dt=ut.onScrubComplete,zt=ut.onSnapComplete,Ft=ut.once,Ht=ut.snap,Nt=ut.pinReparent,Zt=ut.pinSpacer,Qt=ut.containerAnimation,te=ut.fastScrollEnd,ye=ut.preventOverlaps,_e=e.horizontal||e.containerAnimation&&!1!==e.horizontal?P:L,Se=!vt&&0!==vt,ke=D(e.scroller||N),Ae=V.core.getCache(ke),Pe=Gt(ke),De="fixed"===("pinType"in e?e.pinType:S(ke,"pinType")||Pe&&"fixed"),ze=[e.onEnter,e.onLeave,e.onEnterBack,e.onLeaveBack],Re=Se&&e.toggleActions.split(" "),Fe="markers"in e?e.markers:Te.markers,He=Pe?0:parseFloat(he(ke)["border"+_e.p2+ce])||0,Ge=this,Ye=e.onRefreshInit&&function(){return e.onRefreshInit(Ge)},je=function(t,e,i){var n=i.d,s=i.d2,r=i.a;return(r=S(t,"getBoundingClientRect"))?function(){return r()[n]}:function(){return(e?Yt(s):t["client"+s])||0}}(ke,Pe,_e),Ne=function(t,e){return!e||~_.indexOf(t)?Vt(t):function(){return ei}}(ke,Pe),Xe=0,qe=0,Ue=0,Ke=z(ke,_e);if(Ge._startClamp=Ge._endClamp=!1,Ge._dir=_e,Lt*=45,Ge.scroller=ke,Ge.scroll=Qt?Qt.time.bind(Qt):Ke,o=Ke(),Ge.vars=e,i=i||e.animation,"refreshPriority"in e&&(at=1,-9999===e.refreshPriority&&(Et=Ge)),Ae.tweenScroll=Ae.tweenScroll||{top:ai(ke,L),left:ai(ke,P)},Ge.tweenTo=n=Ae.tweenScroll[_e.p],Ge.scrubDuration=function(t){(j=$t(t)&&t)?Y?Y.duration(t):Y=V.to(i,{ease:"expo",totalProgress:"+=0",inherit:!1,duration:j,paused:!0,onComplete:function(){return Dt&&Dt(Ge)}}):(Y&&Y.progress(1).kill(),Y=0)},i&&(i.vars.lazy=!1,i._initted&&!Ge.isReverted||!1!==i.vars.immediateRender&&!1!==e.immediateRender&&i.duration()&&i.render(0,!0,!0),Ge.animation=i.pause(),i.scrollTrigger=Ge,Ge.scrubDuration(vt),H=0,ft||(ft=i.vars.id)),Ht&&(qt(Ht)&&!Ht.push||(Ht={snapTo:Ht}),"scrollBehavior"in $.style&&V.set(Pe?[$,X]:ke,{scrollBehavior:"auto"}),w.forEach((function(t){return Xt(t)&&t.target===(Pe?W.scrollingElement||X:ke)&&(t.smooth=!1)})),r=Xt(Ht.snapTo)?Ht.snapTo:"labels"===Ht.snapTo?function(t){return function(e){return V.utils.snap(me(t),e)}}(i):"labelsDirectional"===Ht.snapTo?(ot=i,function(t,e){return ve(me(ot))(t,e.direction)}):!1!==Ht.directional?function(t,e){return ve(Ht.snapTo)(t,kt()-qe<500?0:e.direction)}:V.utils.snap(Ht.snapTo),q=Ht.duration||{min:.1,max:2},q=qt(q)?J(q.min,q.max):J(q,q),U=V.delayedCall(Ht.delay||j/2||.1,(function(){var t=Ke(),e=kt()-qe<500,s=n.tween;if(!(e||Math.abs(Ge.getVelocity())<10)||s||et||Xe===t)Ge.isActive&&Xe!==t&&U.restart(!0);else{var o,a,d=(t-l)/m,u=i&&!Se?i.totalProgress():d,h=e?0:(u-G)/(kt()-Z)*1e3||0,p=V.utils.clamp(-d,1-d,Jt(h/2)*h/.185),f=d+(!1===Ht.inertia?0:p),g=Ht,v=g.onStart,y=g.onInterrupt,b=g.onComplete;if(o=r(f,Ge),$t(o)||(o=f),a=Math.round(l+o*m),t<=c&&t>=l&&a!==t){if(s&&!s._initted&&s.data<=Jt(a-t))return;!1===Ht.inertia&&(p=o-d),n(a,{duration:q(Jt(.185*Math.max(Jt(f-u),Jt(o-u))/h/.05||0)),ease:Ht.ease||"power3",data:Jt(a-t),onInterrupt:function(){return U.restart(!0)&&y&&y(Ge)},onComplete:function(){Ge.update(),Xe=Ke(),i&&(Y?Y.resetTo("totalProgress",o,i._tTime/i._tDur):i.progress(o)),H=G=i&&!Se?i.totalProgress():Ge.progress,zt&&zt(Ge),b&&b(Ge)}},t,p*m,a-t-p*m),v&&v(Ge,n.tween)}}})).pause()),ft&&(Oe[ft]=Ge),(rt=(yt=Ge.trigger=D(yt||!0!==bt&&bt))&&yt._gsap&&yt._gsap.stRevert)&&(rt=rt(Ge)),bt=!0===bt?yt:D(bt),Wt(pt)&&(pt={targets:yt,className:pt}),bt&&(!1===xt||xt===le||(xt=!(!xt&&bt.parentNode&&bt.parentNode.style&&"flex"===he(bt.parentNode).display)&&ae),Ge.pin=bt,(s=V.core.getCache(bt)).spacer?v=s.pinState:(Zt&&((Zt=D(Zt))&&!Zt.nodeType&&(Zt=Zt.current||Zt.nativeElement),s.spacerIsNative=!!Zt,Zt&&(s.spacerState=ti(Zt))),s.spacer=x=Zt||W.createElement("div"),x.classList.add("pin-spacer"),ft&&x.classList.add("pin-spacer-"+ft),s.pinState=v=ti(bt)),!1!==e.force3D&&V.set(bt,{force3D:!0}),Ge.spacer=x=s.spacer,F=he(bt),O=F[xt+_e.os2],E=V.getProperty(bt),C=V.quickSetter(bt,_e.a,ue),Je(bt,x,F),b=ti(bt)),Fe){f=qt(Fe)?pe(Fe,xe):xe,h=Ce("scroller-start",ft,ke,_e,f,0),p=Ce("scroller-end",ft,ke,_e,f,0,h),T=h["offset"+_e.op.d2];var Ze=D(S(ke,"content")||ke);d=this.markerStart=Ce("start",ft,Ze,_e,f,T,0,Qt),u=this.markerEnd=Ce("end",ft,Ze,_e,f,T,0,Qt),Qt&&(st=V.quickSetter([d,u],_e.a,ue)),De||_.length&&!0===S(ke,"fixedMarkers")||(dt=he(ct=Pe?$:ke).position,ct.style.position="absolute"===dt||"fixed"===dt?dt:"relative",V.set([h,p],{force3D:!0}),I=V.quickSetter(h,_e.a,ue),R=V.quickSetter(p,_e.a,ue))}if(Qt){var ni=Qt.vars.onUpdate,ri=Qt.vars.onUpdateParams;Qt.eventCallback("onUpdate",(function(){Ge.update(0,0,1),ni&&ni.apply(Qt,ri||[])}))}if(Ge.previous=function(){return Me[Me.indexOf(Ge)-1]},Ge.next=function(){return Me[Me.indexOf(Ge)+1]},Ge.revert=function(t,e){if(!e)return Ge.kill(!0);var n=!1!==t||!Ge.enabled,s=tt;n!==Ge.isReverted&&(n&&(Q=Math.max(Ke(),Ge.scroll.rec||0),Ue=Ge.progress,it=i&&i.progress()),d&&[d,u,h,p].forEach((function(t){return t.style.display=n?"none":"block"})),n&&(tt=Ge,Ge.update(n)),!bt||Nt&&Ge.isActive||(n?function(t,e,i){Qe(i);var n=t._gsap;if(n.spacerIsNative)Qe(n.spacerState);else if(t._gsap.swappedIn){var s=e.parentNode;s&&(s.insertBefore(t,e),s.removeChild(e))}t._gsap.swappedIn=!1}(bt,x,v):Je(bt,x,he(bt),A)),n||Ge.update(n),tt=s,Ge.isReverted=n)},Ge.refresh=function(s,r,f,w){if(!tt&&Ge.enabled||r)if(bt&&s&&Ot)be(t,"scrollEnd",Be);else{!Tt&&Ye&&Ye(Ge),tt=Ge,n.tween&&!f&&(n.tween.kill(),n.tween=0),Y&&Y.pause(),Mt&&i&&i.revert({kill:!1}).invalidate(),Ge.isReverted||Ge.revert(!0,!0),Ge._subPinOffset=!1;var _,T,S,C,O,I,R,F,H,G,j,N,q,K=je(),J=Ne(),Z=Qt?Qt.duration():jt(ke,_e),et=m<=.01,nt=0,st=w||0,rt=qt(f)?f.end:e.end,ot=e.endTrigger||yt,at=qt(f)?f.start:e.start||(0!==e.start&&yt?bt?"0 0":"0 100%":0),ct=Ge.pinnedContainer=e.pinnedContainer&&D(e.pinnedContainer,Ge),dt=yt&&Math.max(0,Me.indexOf(Ge))||0,ut=dt;for(Fe&&qt(f)&&(N=V.getProperty(h,_e.p),q=V.getProperty(p,_e.p));ut--;)(I=Me[ut]).end||I.refresh(0,1)||(tt=Ge),!(R=I.pin)||R!==yt&&R!==bt&&R!==ct||I.isReverted||(G||(G=[]),G.unshift(I),I.revert(!0,!0)),I!==Me[ut]&&(dt--,ut--);for(Xt(at)&&(at=at(Ge)),at=It(at,"start",Ge),l=ii(at,yt,K,_e,Ke(),d,h,Ge,J,He,De,Z,Qt,Ge._startClamp&&"_startClamp")||(bt?-.001:0),Xt(rt)&&(rt=rt(Ge)),Wt(rt)&&!rt.indexOf("+=")&&(~rt.indexOf(" ")?rt=(Wt(at)?at.split(" ")[0]:"")+rt:(nt=Ee(rt.substr(2),K),rt=Wt(at)?at:(Qt?V.utils.mapRange(0,Qt.duration(),Qt.scrollTrigger.start,Qt.scrollTrigger.end,l):l)+nt,ot=yt)),rt=It(rt,"end",Ge),c=Math.max(l,ii(rt||(ot?"100% 0":Z),ot,K,_e,Ke()+nt,u,p,Ge,J,He,De,Z,Qt,Ge._endClamp&&"_endClamp"))||-.001,nt=0,ut=dt;ut--;)(R=(I=Me[ut]).pin)&&I.start-I._pinPush<=l&&!Qt&&I.end>0&&(_=I.end-(Ge._startClamp?Math.max(0,I.start):I.start),(R===yt&&I.start-I._pinPush<l||R===ct)&&isNaN(at)&&(nt+=_*(1-I.progress)),R===bt&&(st+=_));if(l+=nt,c+=nt,Ge._startClamp&&(Ge._startClamp+=nt),Ge._endClamp&&!Tt&&(Ge._endClamp=c||-.001,c=Math.min(c,jt(ke,_e))),m=c-l||(l-=.01)&&.001,et&&(Ue=V.utils.clamp(0,1,V.utils.normalize(l,c,Q))),Ge._pinPush=st,d&&nt&&((_={})[_e.a]="+="+nt,ct&&(_[_e.p]="-="+Ke()),V.set([d,u],_)),!bt||wt&&Ge.end>=jt(ke,_e)){if(yt&&Ke()&&!Qt)for(T=yt.parentNode;T&&T!==$;)T._pinOffset&&(l-=T._pinOffset,c-=T._pinOffset),T=T.parentNode}else _=he(bt),C=_e===L,S=Ke(),k=parseFloat(E(_e.a))+st,!Z&&c>1&&(j={style:j=(Pe?W.scrollingElement||X:ke).style,value:j["overflow"+_e.a.toUpperCase()]},Pe&&"scroll"!==he($)["overflow"+_e.a.toUpperCase()]&&(j.style["overflow"+_e.a.toUpperCase()]="scroll")),Je(bt,x,_),b=ti(bt),T=fe(bt,!0),F=De&&z(ke,C?P:L)(),xt?((A=[xt+_e.os2,m+st+ue]).t=x,(ut=xt===ae?ge(bt,_e)+m+st:0)&&(A.push(_e.d,ut+ue),"auto"!==x.style.flexBasis&&(x.style.flexBasis=ut+ue)),Qe(A),ct&&Me.forEach((function(t){t.pin===ct&&!1!==t.vars.pinSpacing&&(t._subPinOffset=!0)})),De&&Ke(Q)):(ut=ge(bt,_e))&&"auto"!==x.style.flexBasis&&(x.style.flexBasis=ut+ue),De&&((O={top:T.top+(C?S-l:F)+ue,left:T.left+(C?F:S-l)+ue,boxSizing:"border-box",position:"fixed"})[ee]=O["max"+ce]=Math.ceil(T.width)+ue,O[ie]=O["max"+de]=Math.ceil(T.height)+ue,O[le]=O[le+re]=O[le+ne]=O[le+oe]=O[le+se]="0",O[ae]=_[ae],O[ae+re]=_[ae+re],O[ae+ne]=_[ae+ne],O[ae+oe]=_[ae+oe],O[ae+se]=_[ae+se],y=function(t,e,i){for(var n,s=[],r=t.length,o=i?8:0;o<r;o+=2)n=t[o],s.push(n,n in e?e[n]:t[o+1]);return s.t=t.t,s}(v,O,Nt),Tt&&Ke(0)),i?(H=i._initted,lt(1),i.render(i.duration(),!0,!0),M=E(_e.a)-k+m+st,B=Math.abs(m-M)>1,De&&B&&y.splice(y.length-2,2),i.render(0,!0,!0),H||i.invalidate(!0),i.parent||i.totalTime(i.totalTime()),lt(0)):M=m,j&&(j.value?j.style["overflow"+_e.a.toUpperCase()]=j.value:j.style.removeProperty("overflow-"+_e.a));G&&G.forEach((function(t){return t.revert(!1,!0)})),Ge.start=l,Ge.end=c,o=a=Tt?Q:Ke(),Qt||Tt||(o<Q&&Ke(Q),Ge.scroll.rec=0),Ge.revert(!1,!0),qe=kt(),U&&(Xe=-1,U.restart(!0)),tt=0,i&&Se&&(i._initted||it)&&i.progress()!==it&&i.progress(it||0,!0).render(i.time(),!0,!0),(et||Ue!==Ge.progress||Qt||Mt)&&(i&&!Se&&i.totalProgress(Qt&&l<-.001&&!Ue?V.utils.normalize(l,c,0):Ue,!0),Ge.progress=et||(o-l)/m===Ue?0:Ue),bt&&xt&&(x._pinOffset=Math.round(Ge.progress*M)),Y&&Y.invalidate(),isNaN(N)||(N-=V.getProperty(h,_e.p),q-=V.getProperty(p,_e.p),oi(h,_e,N),oi(d,_e,N-(w||0)),oi(p,_e,q),oi(u,_e,q-(w||0))),et&&!Tt&&Ge.update(),!mt||Tt||g||(g=!0,mt(Ge),g=!1)}},Ge.getVelocity=function(){return(Ke()-a)/(kt()-Z)*1e3||0},Ge.endAnimation=function(){Ut(Ge.callbackAnimation),i&&(Y?Y.progress(1):i.paused()?Se||Ut(i,Ge.direction<0,1):Ut(i,i.reversed()))},Ge.labelToScroll=function(t){return i&&i.labels&&(l||Ge.refresh()||l)+i.labels[t]/i.duration()*m||0},Ge.getTrailing=function(t){var e=Me.indexOf(Ge),i=Ge.direction>0?Me.slice(0,e).reverse():Me.slice(e+1);return(Wt(t)?i.filter((function(e){return e.vars.preventOverlaps===t})):i).filter((function(t){return Ge.direction>0?t.end<=l:t.start>=c}))},Ge.update=function(t,e,s){if(!Qt||s||t){var r,d,u,p,f,g,v,w=!0===Tt?Q:Ge.scroll(),_=t?0:(w-l)/m,T=_<0?0:_>1?1:_||0,S=Ge.progress;if(e&&(a=o,o=Qt?Ke():w,Ht&&(G=H,H=i&&!Se?i.totalProgress():T)),Lt&&bt&&!tt&&!Ct&&Ot&&(!T&&l<w+(w-a)/(kt()-Z)*Lt?T=1e-4:1===T&&c>w+(w-a)/(kt()-Z)*Lt&&(T=.9999)),T!==S&&Ge.enabled){if(p=(f=(r=Ge.isActive=!!T&&T<1)!==(!!S&&S<1))||!!T!=!!S,Ge.direction=T>S?1:-1,Ge.progress=T,p&&!tt&&(d=T&&!S?0:1===T?1:1===S?2:3,Se&&(u=!f&&"none"!==Re[d+1]&&Re[d+1]||Re[d],v=i&&("complete"===u||"reset"===u||u in i))),ye&&(f||v)&&(v||vt||!i)&&(Xt(ye)?ye(Ge):Ge.getTrailing(ye).forEach((function(t){return t.endAnimation()}))),Se||(!Y||tt||Ct?i&&i.totalProgress(T,!(!tt||!qe&&!t)):(Y._dp._time-Y._start!==Y._time&&Y.render(Y._dp._time-Y._start),Y.resetTo?Y.resetTo("totalProgress",T,i._tTime/i._tDur):(Y.vars.totalProgress=T,Y.invalidate().restart()))),bt)if(t&&xt&&(x.style[xt+_e.os2]=O),De){if(p){if(g=!t&&T>S&&c+1>w&&w+1>=jt(ke,_e),Nt)if(t||!r&&!g)si(bt,x);else{var E=fe(bt,!0),A=w-l;si(bt,$,E.top+(_e===L?A:0)+ue,E.left+(_e===L?0:A)+ue)}Qe(r||g?y:b),B&&T<1&&r||C(k+(1!==T||g?0:M))}}else C(Rt(k+M*T));Ht&&!n.tween&&!tt&&!Ct&&U.restart(!0),pt&&(f||Ft&&T&&(T<1||!_t))&&K(pt.targets).forEach((function(t){return t.classList[r||Ft?"add":"remove"](pt.className)})),ht&&!Se&&!t&&ht(Ge),p&&!tt?(Se&&(v&&("complete"===u?i.pause().totalProgress(1):"reset"===u?i.restart(!0).pause():"restart"===u?i.restart(!0):i[u]()),ht&&ht(Ge)),!f&&_t||(gt&&f&&Kt(Ge,gt),ze[d]&&Kt(Ge,ze[d]),Ft&&(1===T?Ge.kill(!1,1):ze[d]=0),f||ze[d=1===T?1:3]&&Kt(Ge,ze[d])),te&&!r&&Math.abs(Ge.getVelocity())>($t(te)?te:2500)&&(Ut(Ge.callbackAnimation),Y?Y.progress(1):Ut(i,"reverse"===u?1:!T,1))):Se&&ht&&!tt&&ht(Ge)}if(R){var P=Qt?w/Qt.duration()*(Qt._caScrollDist||0):w;I(P+(h._isFlipped?1:0)),R(P)}st&&st(-w/Qt.duration()*(Qt._caScrollDist||0))}},Ge.enable=function(e,i){Ge.enabled||(Ge.enabled=!0,be(ke,"resize",Le),Pe||be(ke,"scroll",Ie),Ye&&be(t,"refreshInit",Ye),!1!==e&&(Ge.progress=Ue=0,o=a=Xe=Ke()),!1!==i&&Ge.refresh())},Ge.getTween=function(t){return t&&n?n.tween:Y},Ge.setPositions=function(t,e,i,n){if(Qt){var s=Qt.scrollTrigger,r=Qt.duration(),o=s.end-s.start;t=s.start+o*t/r,e=s.start+o*e/r}Ge.refresh(!1,!1,{start:Pt(t,i&&!!Ge._startClamp),end:Pt(e,i&&!!Ge._endClamp)},n),Ge.update()},Ge.adjustPinSpacing=function(t){if(A&&t){var e=A.indexOf(_e.d)+1;A[e]=parseFloat(A[e])+t+ue,A[1]=parseFloat(A[1])+t+ue,Qe(A)}},Ge.disable=function(e,i){if(Ge.enabled&&(!1!==e&&Ge.revert(!0,!0),Ge.enabled=Ge.isActive=!1,i||Y&&Y.pause(),Q=0,s&&(s.uncache=1),Ye&&we(t,"refreshInit",Ye),U&&(U.pause(),n.tween&&n.tween.kill()&&(n.tween=0)),!Pe)){for(var r=Me.length;r--;)if(Me[r].scroller===ke&&Me[r]!==Ge)return;we(ke,"resize",Le),Pe||we(ke,"scroll",Ie)}},Ge.kill=function(t,n){Ge.disable(t,n),Y&&!n&&Y.kill(),ft&&delete Oe[ft];var r=Me.indexOf(Ge);r>=0&&Me.splice(r,1),r===nt&&$e>0&&nt--,r=0,Me.forEach((function(t){return t.scroller===Ge.scroller&&(r=1)})),r||Tt||(Ge.scroll.rec=0),i&&(i.scrollTrigger=null,t&&i.revert({kill:!1}),n||i.kill()),d&&[d,u,h,p].forEach((function(t){return t.parentNode&&t.parentNode.removeChild(t)})),Et===Ge&&(Et=0),bt&&(s&&(s.uncache=1),r=0,Me.forEach((function(t){return t.pin===bt&&r++})),r||(s.spacer=0)),e.onKill&&e.onKill(Ge)},Me.push(Ge),Ge.enable(!1,!1),rt&&rt(Ge),i&&i.add&&!m){var li=Ge.update;Ge.update=function(){Ge.update=li,l||c||Ge.refresh()},V.delayedCall(.01,Ge.update),m=.01,l=c=0}else Ge.refresh();bt&&function(){if(St!==Ve){var t=St=Ve;requestAnimationFrame((function(){return t===Ve&&We(!0)}))}}()}else this.update=this.refresh=this.kill=Bt},t.register=function(e){return j||(V=e||Ht(),Ft()&&window.document&&t.enable(),j=At),j},t.defaults=function(t){if(t)for(var e in t)Te[e]=t[e];return Te},t.disable=function(t,e){At=0,Me.forEach((function(i){return i[e?"kill":"disable"](t)})),we(N,"wheel",Ie),we(W,"scroll",Ie),clearInterval(Q),we(W,"touchcancel",Bt),we($,"touchstart",Bt),ye(we,W,"pointerdown,touchstart,mousedown",Dt),ye(we,W,"pointerup,touchend,mouseup",zt),U.kill(),Nt(we);for(var i=0;i<w.length;i+=3)_e(we,w[i],w[i+1]),_e(we,w[i],w[i+2])},t.enable=function(){if(N=window,W=document,X=W.documentElement,$=W.body,V&&(K=V.utils.toArray,J=V.utils.clamp,gt=V.core.context||Bt,lt=V.core.suppressOverwrites||Bt,mt=N.history.scrollRestoration||"auto",Xe=N.pageYOffset,V.core.globals("ScrollTrigger",t),$)){At=1,(vt=document.createElement("div")).style.height="100vh",vt.style.position="absolute",je(),Lt(),Y.register(V),t.isTouch=Y.isTouch,ft=Y.isTouch&&/(iPad|iPhone|iPod|Mac)/g.test(navigator.userAgent),ut=1===Y.isTouch,be(N,"wheel",Ie),q=[N,W,X,$],V.matchMedia?(t.matchMedia=function(t){var e,i=V.matchMedia();for(e in t)i.add(e,t[e]);return i},V.addEventListener("matchMediaInit",(function(){return Ge()})),V.addEventListener("matchMediaRevert",(function(){return He()})),V.addEventListener("matchMedia",(function(){We(0,1),Re("matchMedia")})),V.matchMedia("(orientation: portrait)",(function(){return Pe(),Pe}))):console.warn("Requires GSAP 3.11.0 or later"),Pe(),be(W,"scroll",Ie);var e,i,n=$.style,s=n.borderTopStyle,r=V.core.Animation.prototype;for(r.revert||Object.defineProperty(r,"revert",{value:function(){return this.time(-.01,!0)}}),n.borderTopStyle="solid",e=fe($),L.m=Math.round(e.top+L.sc())||0,P.m=Math.round(e.left+P.sc())||0,s?n.borderTopStyle=s:n.removeProperty("border-top-style"),Q=setInterval(Ae,250),V.delayedCall(.5,(function(){return Ct=0})),be(W,"touchcancel",Bt),be($,"touchstart",Bt),ye(be,W,"pointerdown,touchstart,mousedown",Dt),ye(be,W,"pointerup,touchend,mouseup",zt),it=V.utils.checkPrefix("transform"),Ke.push(it),j=kt(),U=V.delayedCall(.2,We).pause(),ot=[W,"visibilitychange",function(){var t=N.innerWidth,e=N.innerHeight;W.hidden?(st=t,rt=e):st===t&&rt===e||Le()},W,"DOMContentLoaded",We,N,"load",We,N,"resize",Le],Nt(be),Me.forEach((function(t){return t.enable(0,1)})),i=0;i<w.length;i+=3)_e(we,w[i],w[i+1]),_e(we,w[i],w[i+2])}},t.config=function(e){"limitCallbacks"in e&&(_t=!!e.limitCallbacks);var i=e.syncInterval;i&&clearInterval(Q)||(Q=i)&&setInterval(Ae,i),"ignoreMobileResize"in e&&(ut=1===t.isTouch&&e.ignoreMobileResize),"autoRefreshEvents"in e&&(Nt(we)||Nt(be,e.autoRefreshEvents||"none"),ct=-1===(e.autoRefreshEvents+"").indexOf("resize"))},t.scrollerProxy=function(t,e){var i=D(t),n=w.indexOf(i),s=Gt(i);~n&&w.splice(n,s?6:2),e&&(s?_.unshift(N,e,$,e,X,e):_.unshift(i,e))},t.clearMatchMedia=function(t){Me.forEach((function(e){return e._ctx&&e._ctx.query===t&&e._ctx.kill(!0,!0)}))},t.isInViewport=function(t,e,i){var n=(Wt(t)?D(t):t).getBoundingClientRect(),s=n[i?ee:ie]*e||0;return i?n.right-s>0&&n.left+s<N.innerWidth:n.bottom-s>0&&n.top+s<N.innerHeight},t.positionInViewport=function(t,e,i){Wt(t)&&(t=D(t));var n=t.getBoundingClientRect(),s=n[i?ee:ie],r=null==e?s/2:e in Se?Se[e]*s:~e.indexOf("%")?parseFloat(e)*s/100:parseFloat(e)||0;return i?(n.left+r)/N.innerWidth:(n.top+r)/N.innerHeight},t.killAll=function(t){if(Me.slice(0).forEach((function(t){return"ScrollSmoother"!==t.vars.id&&t.kill()})),!0!==t){var e=De.killAll||[];De={},e.forEach((function(t){return t()}))}},t}();li.version="3.12.5",li.saveStyles=function(t){return t?K(t).forEach((function(t){if(t&&t.style){var e=Fe.indexOf(t);e>=0&&Fe.splice(e,5),Fe.push(t,t.style.cssText,t.getBBox&&t.getAttribute("transform"),V.core.getCache(t),gt())}})):Fe},li.revert=function(t,e){return Ge(!t,e)},li.create=function(t,e){return new li(t,e)},li.refresh=function(t){return t?Le():(j||li.register())&&We(!0)},li.update=function(t){return++w.cache&&qe(!0===t?2:0)},li.clearScrollMemory=Ye,li.maxScroll=function(t,e){return jt(t,e?P:L)},li.getScrollFunc=function(t,e){return z(D(t),e?P:L)},li.getById=function(t){return Oe[t]},li.getAll=function(){return Me.filter((function(t){return"ScrollSmoother"!==t.vars.id}))},li.isScrolling=function(){return!!Ot},li.snapDirectional=ve,li.addEventListener=function(t,e){var i=De[t]||(De[t]=[]);~i.indexOf(e)||i.push(e)},li.removeEventListener=function(t,e){var i=De[t],n=i&&i.indexOf(e);n>=0&&i.splice(n,1)},li.batch=function(t,e){var i,n=[],s={},r=e.interval||.016,o=e.batchMax||1e9,a=function(t,e){var i=[],n=[],s=V.delayedCall(r,(function(){e(i,n),i=[],n=[]})).pause();return function(t){i.length||s.restart(!0),i.push(t.trigger),n.push(t),o<=i.length&&s.progress(1)}};for(i in e)s[i]="on"===i.substr(0,2)&&Xt(e[i])&&"onRefreshInit"!==i?a(0,e[i]):e[i];return Xt(o)&&(o=o(),be(li,"refresh",(function(){return o=e.batchMax()}))),K(t).forEach((function(t){var e={};for(i in s)e[i]=s[i];e.trigger=t,n.push(li.create(e))})),n};var ci,di=function(t,e,i,n){return e>n?t(n):e<0&&t(0),i>n?(n-e)/(i-e):i<0?e/(e-i):1},ui=function t(e,i){!0===i?e.style.removeProperty("touch-action"):e.style.touchAction=!0===i?"auto":i?"pan-"+i+(Y.isTouch?" pinch-zoom":""):"none",e===X&&t($,i)},hi={auto:1,scroll:1},pi=function(t){var e,i=t.event,n=t.target,s=t.axis,r=(i.changedTouches?i.changedTouches[0]:i).target,o=r._gsap||V.core.getCache(r),a=kt();if(!o._isScrollT||a-o._isScrollT>2e3){for(;r&&r!==$&&(r.scrollHeight<=r.clientHeight&&r.scrollWidth<=r.clientWidth||!hi[(e=he(r)).overflowY]&&!hi[e.overflowX]);)r=r.parentNode;o._isScroll=r&&r!==n&&!Gt(r)&&(hi[(e=he(r)).overflowY]||hi[e.overflowX]),o._isScrollT=a}(o._isScroll||"x"===s)&&(i.stopPropagation(),i._gsapAllow=!0)},fi=function(t,e,i,n){return Y.create({target:t,capture:!0,debounce:!1,lockAxis:!0,type:e,onWheel:n=n&&pi,onPress:n,onDrag:n,onScroll:n,onEnable:function(){return i&&be(W,Y.eventTypes[0],mi,!1,!0)},onDisable:function(){return we(W,Y.eventTypes[0],mi,!0)}})},gi=/(input|label|select|textarea)/i,mi=function(t){var e=gi.test(t.target.tagName);(e||ci)&&(t._gsapAllow=!0,ci=e)},vi=function(t){qt(t)||(t={}),t.preventDefault=t.isNormalizer=t.allowClicks=!0,t.type||(t.type="wheel,touch"),t.debounce=!!t.debounce,t.id=t.id||"normalizer";var e,i,n,s,r,o,a,l,c=t,d=c.normalizeScrollX,u=c.momentum,h=c.allowNestedScroll,p=c.onRelease,f=D(t.target)||X,g=V.core.globals().ScrollSmoother,m=g&&g.get(),v=ft&&(t.content&&D(t.content)||m&&!1!==t.content&&!m.smooth()&&m.content()),y=z(f,L),b=z(f,P),_=1,x=(Y.isTouch&&N.visualViewport?N.visualViewport.scale*N.visualViewport.width:N.outerWidth)/N.innerWidth,T=0,S=Xt(u)?function(){return u(e)}:function(){return u||2.8},E=fi(f,t.type,!0,h),C=function(){return s=!1},k=Bt,M=Bt,O=function(){i=jt(f,L),M=J(ft?1:0,i),d&&(k=J(0,jt(f,P))),n=Ve},A=function(){v._gsap.y=Rt(parseFloat(v._gsap.y)+y.offset)+"px",v.style.transform="matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, "+parseFloat(v._gsap.y)+", 0, 1)",y.offset=y.cacheID=0},I=function(){O(),r.isActive()&&r.vars.scrollY>i&&(y()>i?r.progress(1)&&y(i):r.resetTo("scrollY",i))};return v&&V.set(v,{y:"+=0"}),t.ignoreCheck=function(t){return ft&&"touchmove"===t.type&&function(){if(s){requestAnimationFrame(C);var t=Rt(e.deltaY/2),i=M(y.v-t);if(v&&i!==y.v+y.offset){y.offset=i-y.v;var n=Rt((parseFloat(v&&v._gsap.y)||0)-y.offset);v.style.transform="matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, "+n+", 0, 1)",v._gsap.y=n+"px",y.cacheID=w.cache,qe()}return!0}y.offset&&A(),s=!0}()||_>1.05&&"touchstart"!==t.type||e.isGesturing||t.touches&&t.touches.length>1},t.onPress=function(){s=!1;var t=_;_=Rt((N.visualViewport&&N.visualViewport.scale||1)/x),r.pause(),t!==_&&ui(f,_>1.01||!d&&"x"),o=b(),a=y(),O(),n=Ve},t.onRelease=t.onGestureStart=function(t,e){if(y.offset&&A(),e){w.cache++;var n,s,o=S();d&&(s=(n=b())+.05*o*-t.velocityX/.227,o*=di(b,n,s,jt(f,P)),r.vars.scrollX=k(s)),s=(n=y())+.05*o*-t.velocityY/.227,o*=di(y,n,s,jt(f,L)),r.vars.scrollY=M(s),r.invalidate().duration(o).play(.01),(ft&&r.vars.scrollY>=i||n>=i-1)&&V.to({},{onUpdate:I,duration:o})}else l.restart(!0);p&&p(t)},t.onWheel=function(){r._ts&&r.pause(),kt()-T>1e3&&(n=0,T=kt())},t.onChange=function(t,e,i,s,r){if(Ve!==n&&O(),e&&d&&b(k(s[2]===e?o+(t.startX-t.x):b()+e-s[1])),i){y.offset&&A();var l=r[2]===i,c=l?a+t.startY-t.y:y()+i-r[1],u=M(c);l&&c!==u&&(a+=u-c),y(u)}(i||e)&&qe()},t.onEnable=function(){ui(f,!d&&"x"),li.addEventListener("refresh",I),be(N,"resize",I),y.smooth&&(y.target.style.scrollBehavior="auto",y.smooth=b.smooth=!1),E.enable()},t.onDisable=function(){ui(f,!0),we(N,"resize",I),li.removeEventListener("refresh",I),E.kill()},t.lockAxis=!1!==t.lockAxis,(e=new Y(t)).iOS=ft,ft&&!y()&&y(1),ft&&V.ticker.add(Bt),l=e._dc,r=V.to(e,{ease:"power4",paused:!0,inherit:!1,scrollX:d?"+=0.1":"+=0",scrollY:"+=0.1",modifiers:{scrollY:ri(y,y(),(function(){return r.pause()}))},onUpdate:qe,onComplete:l.vars.onComplete}),e};li.sort=function(t){return Me.sort(t||function(t,e){return-1e6*(t.vars.refreshPriority||0)+t.start-(e.start+-1e6*(e.vars.refreshPriority||0))})},li.observe=function(t){return new Y(t)},li.normalizeScroll=function(t){if(void 0===t)return dt;if(!0===t&&dt)return dt.enable();if(!1===t)return dt&&dt.kill(),void(dt=t);var e=t instanceof Y?t:vi(t);return dt&&dt.target===e.target&&dt.kill(),Gt(e.target)&&(dt=e),e},li.core={_getVelocityProp:B,_inputObserver:fi,_scrollers:w,_proxies:_,bridge:{ss:function(){Ot||Re("scrollStart"),Ot=kt()},ref:function(){return tt}}},Ht()&&V.registerPlugin(li)},8607:(t,e,i)=>{function n(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function s(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}i.d(e,{B0:()=>bt,Dx:()=>ri,E_:()=>vt,J7:()=>fi,Ks:()=>X,OF:()=>z,St:()=>pi,Uc:()=>ke,Vy:()=>he,Yz:()=>x,Zm:()=>qe,a0:()=>ft,au:()=>Me,dg:()=>Z,fA:()=>mt,l1:()=>li,l_:()=>te,n:()=>gt,n6:()=>Ye,os:()=>ki,qA:()=>Ee,vM:()=>N,vQ:()=>P,vX:()=>j,wU:()=>lt});var r,o,a,l,c,d,u,h,p,f,g,m,v,y,b,w,_,x={autoSleep:120,force3D:"auto",nullTargetWarn:1,units:{lineHeight:""}},T={duration:.5,overwrite:!1,delay:0},S=1e8,E=1e-8,C=2*Math.PI,k=C/4,M=0,O=Math.sqrt,A=Math.cos,I=Math.sin,P=function(t){return"string"==typeof t},L=function(t){return"function"==typeof t},D=function(t){return"number"==typeof t},z=function(t){return void 0===t},B=function(t){return"object"==typeof t},R=function(t){return!1!==t},F=function(){return"undefined"!=typeof window},H=function(t){return L(t)||P(t)},G="function"==typeof ArrayBuffer&&ArrayBuffer.isView||function(){},Y=Array.isArray,V=/(?:-?\.?\d|\.)+/gi,j=/[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g,N=/[-+=.]*\d+[.e-]*\d*[a-z%]*/g,W=/[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi,X=/[+-]=-?[.\d]+/,$=/[^,'"\[\]\s]+/gi,q=/^[+\-=e\s\d]*\d+[.\d]*([a-z]*|%)\s*$/i,U={},K={},J=function(t){return(K=Ct(t,U))&&ki},Z=function(t,e){return console.warn("Invalid property",t,"set to",e,"Missing plugin? gsap.registerPlugin()")},Q=function(t,e){return!e&&console.warn(t)},tt=function(t,e){return t&&(U[t]=e)&&K&&(K[t]=e)||U},et=function(){return 0},it={suppressEvents:!0,isStart:!0,kill:!1},nt={suppressEvents:!0,kill:!1},st={suppressEvents:!0},rt={},ot=[],at={},lt={},ct={},dt=30,ut=[],ht="",pt=function(t){var e,i,n=t[0];if(B(n)||L(n)||(t=[t]),!(e=(n._gsap||{}).harness)){for(i=ut.length;i--&&!ut[i].targetTest(n););e=ut[i]}for(i=t.length;i--;)t[i]&&(t[i]._gsap||(t[i]._gsap=new Ye(t[i],e)))||t.splice(i,1);return t},ft=function(t){return t._gsap||pt(se(t))[0]._gsap},gt=function(t,e,i){return(i=t[e])&&L(i)?t[e]():z(i)&&t.getAttribute&&t.getAttribute(e)||i},mt=function(t,e){return(t=t.split(",")).forEach(e)||t},vt=function(t){return Math.round(1e5*t)/1e5||0},yt=function(t){return Math.round(1e7*t)/1e7||0},bt=function(t,e){var i=e.charAt(0),n=parseFloat(e.substr(2));return t=parseFloat(t),"+"===i?t+n:"-"===i?t-n:"*"===i?t*n:t/n},wt=function(t,e){for(var i=e.length,n=0;t.indexOf(e[n])<0&&++n<i;);return n<i},_t=function(){var t,e,i=ot.length,n=ot.slice(0);for(at={},ot.length=0,t=0;t<i;t++)(e=n[t])&&e._lazy&&(e.render(e._lazy[0],e._lazy[1],!0)._lazy=0)},xt=function(t,e,i,n){ot.length&&!o&&_t(),t.render(e,i,n||o&&e<0&&(t._initted||t._startAt)),ot.length&&!o&&_t()},Tt=function(t){var e=parseFloat(t);return(e||0===e)&&(t+"").match($).length<2?e:P(t)?t.trim():t},St=function(t){return t},Et=function(t,e){for(var i in e)i in t||(t[i]=e[i]);return t},Ct=function(t,e){for(var i in e)t[i]=e[i];return t},kt=function t(e,i){for(var n in i)"__proto__"!==n&&"constructor"!==n&&"prototype"!==n&&(e[n]=B(i[n])?t(e[n]||(e[n]={}),i[n]):i[n]);return e},Mt=function(t,e){var i,n={};for(i in t)i in e||(n[i]=t[i]);return n},Ot=function(t){var e,i=t.parent||l,n=t.keyframes?(e=Y(t.keyframes),function(t,i){for(var n in i)n in t||"duration"===n&&e||"ease"===n||(t[n]=i[n])}):Et;if(R(t.inherit))for(;i;)n(t,i.vars.defaults),i=i.parent||i._dp;return t},At=function(t,e,i,n,s){void 0===i&&(i="_first"),void 0===n&&(n="_last");var r,o=t[n];if(s)for(r=e[s];o&&o[s]>r;)o=o._prev;return o?(e._next=o._next,o._next=e):(e._next=t[i],t[i]=e),e._next?e._next._prev=e:t[n]=e,e._prev=o,e.parent=e._dp=t,e},It=function(t,e,i,n){void 0===i&&(i="_first"),void 0===n&&(n="_last");var s=e._prev,r=e._next;s?s._next=r:t[i]===e&&(t[i]=r),r?r._prev=s:t[n]===e&&(t[n]=s),e._next=e._prev=e.parent=null},Pt=function(t,e){t.parent&&(!e||t.parent.autoRemoveChildren)&&t.parent.remove&&t.parent.remove(t),t._act=0},Lt=function(t,e){if(t&&(!e||e._end>t._dur||e._start<0))for(var i=t;i;)i._dirty=1,i=i.parent;return t},Dt=function(t,e,i,n){return t._startAt&&(o?t._startAt.revert(nt):t.vars.immediateRender&&!t.vars.autoRevert||t._startAt.render(e,!0,n))},zt=function t(e){return!e||e._ts&&t(e.parent)},Bt=function(t){return t._repeat?Rt(t._tTime,t=t.duration()+t._rDelay)*t:0},Rt=function(t,e){var i=Math.floor(t/=e);return t&&i===t?i-1:i},Ft=function(t,e){return(t-e._start)*e._ts+(e._ts>=0?0:e._dirty?e.totalDuration():e._tDur)},Ht=function(t){return t._end=yt(t._start+(t._tDur/Math.abs(t._ts||t._rts||E)||0))},Gt=function(t,e){var i=t._dp;return i&&i.smoothChildTiming&&t._ts&&(t._start=yt(i._time-(t._ts>0?e/t._ts:((t._dirty?t.totalDuration():t._tDur)-e)/-t._ts)),Ht(t),i._dirty||Lt(i,t)),t},Yt=function(t,e){var i;if((e._time||!e._dur&&e._initted||e._start<t._time&&(e._dur||!e.add))&&(i=Ft(t.rawTime(),e),(!e._dur||Qt(0,e.totalDuration(),i)-e._tTime>E)&&e.render(i,!0)),Lt(t,e)._dp&&t._initted&&t._time>=t._dur&&t._ts){if(t._dur<t.duration())for(i=t;i._dp;)i.rawTime()>=0&&i.totalTime(i._tTime),i=i._dp;t._zTime=-1e-8}},Vt=function(t,e,i,n){return e.parent&&Pt(e),e._start=yt((D(i)?i:i||t!==l?Kt(t,i,e):t._time)+e._delay),e._end=yt(e._start+(e.totalDuration()/Math.abs(e.timeScale())||0)),At(t,e,"_first","_last",t._sort?"_start":0),Xt(e)||(t._recent=e),n||Yt(t,e),t._ts<0&&Gt(t,t._tTime),t},jt=function(t,e){return(U.ScrollTrigger||Z("scrollTrigger",e))&&U.ScrollTrigger.create(e,t)},Nt=function(t,e,i,n,s){return Ue(t,e,s),t._initted?!i&&t._pt&&!o&&(t._dur&&!1!==t.vars.lazy||!t._dur&&t.vars.lazy)&&p!==Me.frame?(ot.push(t),t._lazy=[s,n],1):void 0:1},Wt=function t(e){var i=e.parent;return i&&i._ts&&i._initted&&!i._lock&&(i.rawTime()<0||t(i))},Xt=function(t){var e=t.data;return"isFromStart"===e||"isStart"===e},$t=function(t,e,i,n){var s=t._repeat,r=yt(e)||0,o=t._tTime/t._tDur;return o&&!n&&(t._time*=r/t._dur),t._dur=r,t._tDur=s?s<0?1e10:yt(r*(s+1)+t._rDelay*s):r,o>0&&!n&&Gt(t,t._tTime=t._tDur*o),t.parent&&Ht(t),i||Lt(t.parent,t),t},qt=function(t){return t instanceof je?Lt(t):$t(t,t._dur)},Ut={_start:0,endTime:et,totalDuration:et},Kt=function t(e,i,n){var s,r,o,a=e.labels,l=e._recent||Ut,c=e.duration()>=S?l.endTime(!1):e._dur;return P(i)&&(isNaN(i)||i in a)?(r=i.charAt(0),o="%"===i.substr(-1),s=i.indexOf("="),"<"===r||">"===r?(s>=0&&(i=i.replace(/=/,"")),("<"===r?l._start:l.endTime(l._repeat>=0))+(parseFloat(i.substr(1))||0)*(o?(s<0?l:n).totalDuration()/100:1)):s<0?(i in a||(a[i]=c),a[i]):(r=parseFloat(i.charAt(s-1)+i.substr(s+1)),o&&n&&(r=r/100*(Y(n)?n[0]:n).totalDuration()),s>1?t(e,i.substr(0,s-1),n)+r:c+r)):null==i?c:+i},Jt=function(t,e,i){var n,s,r=D(e[1]),o=(r?2:1)+(t<2?0:1),a=e[o];if(r&&(a.duration=e[1]),a.parent=i,t){for(n=a,s=i;s&&!("immediateRender"in n);)n=s.vars.defaults||{},s=R(s.vars.inherit)&&s.parent;a.immediateRender=R(n.immediateRender),t<2?a.runBackwards=1:a.startAt=e[o-1]}return new ti(e[0],a,e[o+1])},Zt=function(t,e){return t||0===t?e(t):e},Qt=function(t,e,i){return i<t?t:i>e?e:i},te=function(t,e){return P(t)&&(e=q.exec(t))?e[1]:""},ee=[].slice,ie=function(t,e){return t&&B(t)&&"length"in t&&(!e&&!t.length||t.length-1 in t&&B(t[0]))&&!t.nodeType&&t!==c},ne=function(t,e,i){return void 0===i&&(i=[]),t.forEach((function(t){var n;return P(t)&&!e||ie(t,1)?(n=i).push.apply(n,se(t)):i.push(t)}))||i},se=function(t,e,i){return a&&!e&&a.selector?a.selector(t):!P(t)||i||!d&&Oe()?Y(t)?ne(t,i):ie(t)?ee.call(t,0):t?[t]:[]:ee.call((e||u).querySelectorAll(t),0)},re=function(t){return t=se(t)[0]||Q("Invalid scope")||{},function(e){var i=t.current||t.nativeElement||t;return se(e,i.querySelectorAll?i:i===t?Q("Invalid scope")||u.createElement("div"):t)}},oe=function(t){return t.sort((function(){return.5-Math.random()}))},ae=function(t){if(L(t))return t;var e=B(t)?t:{each:t},i=Be(e.ease),n=e.from||0,s=parseFloat(e.base)||0,r={},o=n>0&&n<1,a=isNaN(n)||o,l=e.axis,c=n,d=n;return P(n)?c=d={center:.5,edges:.5,end:1}[n]||0:!o&&a&&(c=n[0],d=n[1]),function(t,o,u){var h,p,f,g,m,v,y,b,w,_=(u||e).length,x=r[_];if(!x){if(!(w="auto"===e.grid?0:(e.grid||[1,S])[1])){for(y=-S;y<(y=u[w++].getBoundingClientRect().left)&&w<_;);w<_&&w--}for(x=r[_]=[],h=a?Math.min(w,_)*c-.5:n%w,p=w===S?0:a?_*d/w-.5:n/w|0,y=0,b=S,v=0;v<_;v++)f=v%w-h,g=p-(v/w|0),x[v]=m=l?Math.abs("y"===l?g:f):O(f*f+g*g),m>y&&(y=m),m<b&&(b=m);"random"===n&&oe(x),x.max=y-b,x.min=b,x.v=_=(parseFloat(e.amount)||parseFloat(e.each)*(w>_?_-1:l?"y"===l?_/w:w:Math.max(w,_/w))||0)*("edges"===n?-1:1),x.b=_<0?s-_:s,x.u=te(e.amount||e.each)||0,i=i&&_<0?De(i):i}return _=(x[t]-x.min)/x.max||0,yt(x.b+(i?i(_):_)*x.v)+x.u}},le=function(t){var e=Math.pow(10,((t+"").split(".")[1]||"").length);return function(i){var n=yt(Math.round(parseFloat(i)/t)*t*e);return(n-n%1)/e+(D(i)?0:te(i))}},ce=function(t,e){var i,n,s=Y(t);return!s&&B(t)&&(i=s=t.radius||S,t.values?(t=se(t.values),(n=!D(t[0]))&&(i*=i)):t=le(t.increment)),Zt(e,s?L(t)?function(e){return n=t(e),Math.abs(n-e)<=i?n:e}:function(e){for(var s,r,o=parseFloat(n?e.x:e),a=parseFloat(n?e.y:0),l=S,c=0,d=t.length;d--;)(s=n?(s=t[d].x-o)*s+(r=t[d].y-a)*r:Math.abs(t[d]-o))<l&&(l=s,c=d);return c=!i||l<=i?t[c]:e,n||c===e||D(e)?c:c+te(e)}:le(t))},de=function(t,e,i,n){return Zt(Y(t)?!e:!0===i?!!(i=0):!n,(function(){return Y(t)?t[~~(Math.random()*t.length)]:(i=i||1e-5)&&(n=i<1?Math.pow(10,(i+"").length-2):1)&&Math.floor(Math.round((t-i/2+Math.random()*(e-t+.99*i))/i)*i*n)/n}))},ue=function(t,e,i){return Zt(i,(function(i){return t[~~e(i)]}))},he=function(t){for(var e,i,n,s,r=0,o="";~(e=t.indexOf("random(",r));)n=t.indexOf(")",e),s="["===t.charAt(e+7),i=t.substr(e+7,n-e-7).match(s?$:V),o+=t.substr(r,e-r)+de(s?i:+i[0],s?0:+i[1],+i[2]||1e-5),r=n+1;return o+t.substr(r,t.length-r)},pe=function(t,e,i,n,s){var r=e-t,o=n-i;return Zt(s,(function(e){return i+((e-t)/r*o||0)}))},fe=function(t,e,i){var n,s,r,o=t.labels,a=S;for(n in o)(s=o[n]-e)<0==!!i&&s&&a>(s=Math.abs(s))&&(r=n,a=s);return r},ge=function(t,e,i){var n,s,r,o=t.vars,l=o[e],c=a,d=t._ctx;if(l)return n=o[e+"Params"],s=o.callbackScope||t,i&&ot.length&&_t(),d&&(a=d),r=n?l.apply(s,n):l.call(s),a=c,r},me=function(t){return Pt(t),t.scrollTrigger&&t.scrollTrigger.kill(!!o),t.progress()<1&&ge(t,"onInterrupt"),t},ve=[],ye=function(t){if(t)if(t=!t.name&&t.default||t,F()||t.headless){var e=t.name,i=L(t),n=e&&!i&&t.init?function(){this._props=[]}:t,s={init:et,render:ci,add:$e,kill:ui,modifier:di,rawVars:0},r={targetTest:0,get:0,getSetter:ri,aliases:{},register:0};if(Oe(),t!==n){if(lt[e])return;Et(n,Et(Mt(t,s),r)),Ct(n.prototype,Ct(s,Mt(t,r))),lt[n.prop=e]=n,t.targetTest&&(ut.push(n),rt[e]=1),e=("css"===e?"CSS":e.charAt(0).toUpperCase()+e.substr(1))+"Plugin"}tt(e,n),t.register&&t.register(ki,n,fi)}else ve.push(t)},be=255,we={aqua:[0,be,be],lime:[0,be,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,be],navy:[0,0,128],white:[be,be,be],olive:[128,128,0],yellow:[be,be,0],orange:[be,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[be,0,0],pink:[be,192,203],cyan:[0,be,be],transparent:[be,be,be,0]},_e=function(t,e,i){return(6*(t+=t<0?1:t>1?-1:0)<1?e+(i-e)*t*6:t<.5?i:3*t<2?e+(i-e)*(2/3-t)*6:e)*be+.5|0},xe=function(t,e,i){var n,s,r,o,a,l,c,d,u,h,p=t?D(t)?[t>>16,t>>8&be,t&be]:0:we.black;if(!p){if(","===t.substr(-1)&&(t=t.substr(0,t.length-1)),we[t])p=we[t];else if("#"===t.charAt(0)){if(t.length<6&&(n=t.charAt(1),s=t.charAt(2),r=t.charAt(3),t="#"+n+n+s+s+r+r+(5===t.length?t.charAt(4)+t.charAt(4):"")),9===t.length)return[(p=parseInt(t.substr(1,6),16))>>16,p>>8&be,p&be,parseInt(t.substr(7),16)/255];p=[(t=parseInt(t.substr(1),16))>>16,t>>8&be,t&be]}else if("hsl"===t.substr(0,3))if(p=h=t.match(V),e){if(~t.indexOf("="))return p=t.match(j),i&&p.length<4&&(p[3]=1),p}else o=+p[0]%360/360,a=+p[1]/100,n=2*(l=+p[2]/100)-(s=l<=.5?l*(a+1):l+a-l*a),p.length>3&&(p[3]*=1),p[0]=_e(o+1/3,n,s),p[1]=_e(o,n,s),p[2]=_e(o-1/3,n,s);else p=t.match(V)||we.transparent;p=p.map(Number)}return e&&!h&&(n=p[0]/be,s=p[1]/be,r=p[2]/be,l=((c=Math.max(n,s,r))+(d=Math.min(n,s,r)))/2,c===d?o=a=0:(u=c-d,a=l>.5?u/(2-c-d):u/(c+d),o=c===n?(s-r)/u+(s<r?6:0):c===s?(r-n)/u+2:(n-s)/u+4,o*=60),p[0]=~~(o+.5),p[1]=~~(100*a+.5),p[2]=~~(100*l+.5)),i&&p.length<4&&(p[3]=1),p},Te=function(t){var e=[],i=[],n=-1;return t.split(Ee).forEach((function(t){var s=t.match(N)||[];e.push.apply(e,s),i.push(n+=s.length+1)})),e.c=i,e},Se=function(t,e,i){var n,s,r,o,a="",l=(t+a).match(Ee),c=e?"hsla(":"rgba(",d=0;if(!l)return t;if(l=l.map((function(t){return(t=xe(t,e,1))&&c+(e?t[0]+","+t[1]+"%,"+t[2]+"%,"+t[3]:t.join(","))+")"})),i&&(r=Te(t),(n=i.c).join(a)!==r.c.join(a)))for(o=(s=t.replace(Ee,"1").split(N)).length-1;d<o;d++)a+=s[d]+(~n.indexOf(d)?l.shift()||c+"0,0,0,0)":(r.length?r:l.length?l:i).shift());if(!s)for(o=(s=t.split(Ee)).length-1;d<o;d++)a+=s[d]+l[d];return a+s[o]},Ee=function(){var t,e="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b";for(t in we)e+="|"+t+"\\b";return new RegExp(e+")","gi")}(),Ce=/hsl[a]?\(/,ke=function(t){var e,i=t.join(" ");if(Ee.lastIndex=0,Ee.test(i))return e=Ce.test(i),t[1]=Se(t[1],e),t[0]=Se(t[0],e,Te(t[1])),!0},Me=function(){var t,e,i,n,s,r,o=Date.now,a=500,l=33,p=o(),f=p,m=1e3/240,v=m,y=[],b=function i(c){var d,u,h,g,b=o()-f,w=!0===c;if((b>a||b<0)&&(p+=b-l),((d=(h=(f+=b)-p)-v)>0||w)&&(g=++n.frame,s=h-1e3*n.time,n.time=h/=1e3,v+=d+(d>=m?4:m-d),u=1),w||(t=e(i)),u)for(r=0;r<y.length;r++)y[r](h,s,g,c)};return n={time:0,frame:0,tick:function(){b(!0)},deltaRatio:function(t){return s/(1e3/(t||60))},wake:function(){h&&(!d&&F()&&(c=d=window,u=c.document||{},U.gsap=ki,(c.gsapVersions||(c.gsapVersions=[])).push(ki.version),J(K||c.GreenSockGlobals||!c.gsap&&c||{}),ve.forEach(ye)),i="undefined"!=typeof requestAnimationFrame&&requestAnimationFrame,t&&n.sleep(),e=i||function(t){return setTimeout(t,v-1e3*n.time+1|0)},g=1,b(2))},sleep:function(){(i?cancelAnimationFrame:clearTimeout)(t),g=0,e=et},lagSmoothing:function(t,e){a=t||1/0,l=Math.min(e||33,a)},fps:function(t){m=1e3/(t||240),v=1e3*n.time+m},add:function(t,e,i){var s=e?function(e,i,r,o){t(e,i,r,o),n.remove(s)}:t;return n.remove(t),y[i?"unshift":"push"](s),Oe(),s},remove:function(t,e){~(e=y.indexOf(t))&&y.splice(e,1)&&r>=e&&r--},_listeners:y}}(),Oe=function(){return!g&&Me.wake()},Ae={},Ie=/^[\d.\-M][\d.\-,\s]/,Pe=/["']/g,Le=function(t){for(var e,i,n,s={},r=t.substr(1,t.length-3).split(":"),o=r[0],a=1,l=r.length;a<l;a++)i=r[a],e=a!==l-1?i.lastIndexOf(","):i.length,n=i.substr(0,e),s[o]=isNaN(n)?n.replace(Pe,"").trim():+n,o=i.substr(e+1).trim();return s},De=function(t){return function(e){return 1-t(1-e)}},ze=function t(e,i){for(var n,s=e._first;s;)s instanceof je?t(s,i):!s.vars.yoyoEase||s._yoyo&&s._repeat||s._yoyo===i||(s.timeline?t(s.timeline,i):(n=s._ease,s._ease=s._yEase,s._yEase=n,s._yoyo=i)),s=s._next},Be=function(t,e){return t&&(L(t)?t:Ae[t]||function(t){var e,i,n,s,r=(t+"").split("("),o=Ae[r[0]];return o&&r.length>1&&o.config?o.config.apply(null,~t.indexOf("{")?[Le(r[1])]:(e=t,i=e.indexOf("(")+1,n=e.indexOf(")"),s=e.indexOf("(",i),e.substring(i,~s&&s<n?e.indexOf(")",n+1):n)).split(",").map(Tt)):Ae._CE&&Ie.test(t)?Ae._CE("",t):o}(t))||e},Re=function(t,e,i,n){void 0===i&&(i=function(t){return 1-e(1-t)}),void 0===n&&(n=function(t){return t<.5?e(2*t)/2:1-e(2*(1-t))/2});var s,r={easeIn:e,easeOut:i,easeInOut:n};return mt(t,(function(t){for(var e in Ae[t]=U[t]=r,Ae[s=t.toLowerCase()]=i,r)Ae[s+("easeIn"===e?".in":"easeOut"===e?".out":".inOut")]=Ae[t+"."+e]=r[e]})),r},Fe=function(t){return function(e){return e<.5?(1-t(1-2*e))/2:.5+t(2*(e-.5))/2}},He=function t(e,i,n){var s=i>=1?i:1,r=(n||(e?.3:.45))/(i<1?i:1),o=r/C*(Math.asin(1/s)||0),a=function(t){return 1===t?1:s*Math.pow(2,-10*t)*I((t-o)*r)+1},l="out"===e?a:"in"===e?function(t){return 1-a(1-t)}:Fe(a);return r=C/r,l.config=function(i,n){return t(e,i,n)},l},Ge=function t(e,i){void 0===i&&(i=1.70158);var n=function(t){return t?--t*t*((i+1)*t+i)+1:0},s="out"===e?n:"in"===e?function(t){return 1-n(1-t)}:Fe(n);return s.config=function(i){return t(e,i)},s};mt("Linear,Quad,Cubic,Quart,Quint,Strong",(function(t,e){var i=e<5?e+1:e;Re(t+",Power"+(i-1),e?function(t){return Math.pow(t,i)}:function(t){return t},(function(t){return 1-Math.pow(1-t,i)}),(function(t){return t<.5?Math.pow(2*t,i)/2:1-Math.pow(2*(1-t),i)/2}))})),Ae.Linear.easeNone=Ae.none=Ae.Linear.easeIn,Re("Elastic",He("in"),He("out"),He()),m=7.5625,b=2*(y=1/(v=2.75)),w=2.5*y,Re("Bounce",(function(t){return 1-_(1-t)}),_=function(t){return t<y?m*t*t:t<b?m*Math.pow(t-1.5/v,2)+.75:t<w?m*(t-=2.25/v)*t+.9375:m*Math.pow(t-2.625/v,2)+.984375}),Re("Expo",(function(t){return t?Math.pow(2,10*(t-1)):0})),Re("Circ",(function(t){return-(O(1-t*t)-1)})),Re("Sine",(function(t){return 1===t?1:1-A(t*k)})),Re("Back",Ge("in"),Ge("out"),Ge()),Ae.SteppedEase=Ae.steps=U.SteppedEase={config:function(t,e){void 0===t&&(t=1);var i=1/t,n=t+(e?0:1),s=e?1:0;return function(t){return((n*Qt(0,.99999999,t)|0)+s)*i}}},T.ease=Ae["quad.out"],mt("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt",(function(t){return ht+=t+","+t+"Params,"}));var Ye=function(t,e){this.id=M++,t._gsap=this,this.target=t,this.harness=e,this.get=e?e.get:gt,this.set=e?e.getSetter:ri},Ve=function(){function t(t){this.vars=t,this._delay=+t.delay||0,(this._repeat=t.repeat===1/0?-2:t.repeat||0)&&(this._rDelay=t.repeatDelay||0,this._yoyo=!!t.yoyo||!!t.yoyoEase),this._ts=1,$t(this,+t.duration,1,1),this.data=t.data,a&&(this._ctx=a,a.data.push(this)),g||Me.wake()}var e=t.prototype;return e.delay=function(t){return t||0===t?(this.parent&&this.parent.smoothChildTiming&&this.startTime(this._start+t-this._delay),this._delay=t,this):this._delay},e.duration=function(t){return arguments.length?this.totalDuration(this._repeat>0?t+(t+this._rDelay)*this._repeat:t):this.totalDuration()&&this._dur},e.totalDuration=function(t){return arguments.length?(this._dirty=0,$t(this,this._repeat<0?t:(t-this._repeat*this._rDelay)/(this._repeat+1))):this._tDur},e.totalTime=function(t,e){if(Oe(),!arguments.length)return this._tTime;var i=this._dp;if(i&&i.smoothChildTiming&&this._ts){for(Gt(this,t),!i._dp||i.parent||Yt(i,this);i&&i.parent;)i.parent._time!==i._start+(i._ts>=0?i._tTime/i._ts:(i.totalDuration()-i._tTime)/-i._ts)&&i.totalTime(i._tTime,!0),i=i.parent;!this.parent&&this._dp.autoRemoveChildren&&(this._ts>0&&t<this._tDur||this._ts<0&&t>0||!this._tDur&&!t)&&Vt(this._dp,this,this._start-this._delay)}return(this._tTime!==t||!this._dur&&!e||this._initted&&Math.abs(this._zTime)===E||!t&&!this._initted&&(this.add||this._ptLookup))&&(this._ts||(this._pTime=t),xt(this,t,e)),this},e.time=function(t,e){return arguments.length?this.totalTime(Math.min(this.totalDuration(),t+Bt(this))%(this._dur+this._rDelay)||(t?this._dur:0),e):this._time},e.totalProgress=function(t,e){return arguments.length?this.totalTime(this.totalDuration()*t,e):this.totalDuration()?Math.min(1,this._tTime/this._tDur):this.rawTime()>0?1:0},e.progress=function(t,e){return arguments.length?this.totalTime(this.duration()*(!this._yoyo||1&this.iteration()?t:1-t)+Bt(this),e):this.duration()?Math.min(1,this._time/this._dur):this.rawTime()>0?1:0},e.iteration=function(t,e){var i=this.duration()+this._rDelay;return arguments.length?this.totalTime(this._time+(t-1)*i,e):this._repeat?Rt(this._tTime,i)+1:1},e.timeScale=function(t,e){if(!arguments.length)return-1e-8===this._rts?0:this._rts;if(this._rts===t)return this;var i=this.parent&&this._ts?Ft(this.parent._time,this):this._tTime;return this._rts=+t||0,this._ts=this._ps||-1e-8===t?0:this._rts,this.totalTime(Qt(-Math.abs(this._delay),this._tDur,i),!1!==e),Ht(this),function(t){for(var e=t.parent;e&&e.parent;)e._dirty=1,e.totalDuration(),e=e.parent;return t}(this)},e.paused=function(t){return arguments.length?(this._ps!==t&&(this._ps=t,t?(this._pTime=this._tTime||Math.max(-this._delay,this.rawTime()),this._ts=this._act=0):(Oe(),this._ts=this._rts,this.totalTime(this.parent&&!this.parent.smoothChildTiming?this.rawTime():this._tTime||this._pTime,1===this.progress()&&Math.abs(this._zTime)!==E&&(this._tTime-=E)))),this):this._ps},e.startTime=function(t){if(arguments.length){this._start=t;var e=this.parent||this._dp;return e&&(e._sort||!this.parent)&&Vt(e,this,t-this._delay),this}return this._start},e.endTime=function(t){return this._start+(R(t)?this.totalDuration():this.duration())/Math.abs(this._ts||1)},e.rawTime=function(t){var e=this.parent||this._dp;return e?t&&(!this._ts||this._repeat&&this._time&&this.totalProgress()<1)?this._tTime%(this._dur+this._rDelay):this._ts?Ft(e.rawTime(t),this):this._tTime:this._tTime},e.revert=function(t){void 0===t&&(t=st);var e=o;return o=t,(this._initted||this._startAt)&&(this.timeline&&this.timeline.revert(t),this.totalTime(-.01,t.suppressEvents)),"nested"!==this.data&&!1!==t.kill&&this.kill(),o=e,this},e.globalTime=function(t){for(var e=this,i=arguments.length?t:e.rawTime();e;)i=e._start+i/(Math.abs(e._ts)||1),e=e._dp;return!this.parent&&this._sat?this._sat.globalTime(t):i},e.repeat=function(t){return arguments.length?(this._repeat=t===1/0?-2:t,qt(this)):-2===this._repeat?1/0:this._repeat},e.repeatDelay=function(t){if(arguments.length){var e=this._time;return this._rDelay=t,qt(this),e?this.time(e):this}return this._rDelay},e.yoyo=function(t){return arguments.length?(this._yoyo=t,this):this._yoyo},e.seek=function(t,e){return this.totalTime(Kt(this,t),R(e))},e.restart=function(t,e){return this.play().totalTime(t?-this._delay:0,R(e))},e.play=function(t,e){return null!=t&&this.seek(t,e),this.reversed(!1).paused(!1)},e.reverse=function(t,e){return null!=t&&this.seek(t||this.totalDuration(),e),this.reversed(!0).paused(!1)},e.pause=function(t,e){return null!=t&&this.seek(t,e),this.paused(!0)},e.resume=function(){return this.paused(!1)},e.reversed=function(t){return arguments.length?(!!t!==this.reversed()&&this.timeScale(-this._rts||(t?-1e-8:0)),this):this._rts<0},e.invalidate=function(){return this._initted=this._act=0,this._zTime=-1e-8,this},e.isActive=function(){var t,e=this.parent||this._dp,i=this._start;return!(e&&!(this._ts&&this._initted&&e.isActive()&&(t=e.rawTime(!0))>=i&&t<this.endTime(!0)-E))},e.eventCallback=function(t,e,i){var n=this.vars;return arguments.length>1?(e?(n[t]=e,i&&(n[t+"Params"]=i),"onUpdate"===t&&(this._onUpdate=e)):delete n[t],this):n[t]},e.then=function(t){var e=this;return new Promise((function(i){var n=L(t)?t:St,s=function(){var t=e.then;e.then=null,L(n)&&(n=n(e))&&(n.then||n===e)&&(e.then=t),i(n),e.then=t};e._initted&&1===e.totalProgress()&&e._ts>=0||!e._tTime&&e._ts<0?s():e._prom=s}))},e.kill=function(){me(this)},t}();Et(Ve.prototype,{_time:0,_start:0,_end:0,_tTime:0,_tDur:0,_dirty:0,_repeat:0,_yoyo:!1,parent:null,_initted:!1,_rDelay:0,_ts:1,_dp:0,ratio:0,_zTime:-1e-8,_prom:0,_ps:!1,_rts:1});var je=function(t){function e(e,i){var s;return void 0===e&&(e={}),(s=t.call(this,e)||this).labels={},s.smoothChildTiming=!!e.smoothChildTiming,s.autoRemoveChildren=!!e.autoRemoveChildren,s._sort=R(e.sortChildren),l&&Vt(e.parent||l,n(s),i),e.reversed&&s.reverse(),e.paused&&s.paused(!0),e.scrollTrigger&&jt(n(s),e.scrollTrigger),s}s(e,t);var i=e.prototype;return i.to=function(t,e,i){return Jt(0,arguments,this),this},i.from=function(t,e,i){return Jt(1,arguments,this),this},i.fromTo=function(t,e,i,n){return Jt(2,arguments,this),this},i.set=function(t,e,i){return e.duration=0,e.parent=this,Ot(e).repeatDelay||(e.repeat=0),e.immediateRender=!!e.immediateRender,new ti(t,e,Kt(this,i),1),this},i.call=function(t,e,i){return Vt(this,ti.delayedCall(0,t,e),i)},i.staggerTo=function(t,e,i,n,s,r,o){return i.duration=e,i.stagger=i.stagger||n,i.onComplete=r,i.onCompleteParams=o,i.parent=this,new ti(t,i,Kt(this,s)),this},i.staggerFrom=function(t,e,i,n,s,r,o){return i.runBackwards=1,Ot(i).immediateRender=R(i.immediateRender),this.staggerTo(t,e,i,n,s,r,o)},i.staggerFromTo=function(t,e,i,n,s,r,o,a){return n.startAt=i,Ot(n).immediateRender=R(n.immediateRender),this.staggerTo(t,e,n,s,r,o,a)},i.render=function(t,e,i){var n,s,r,a,c,d,u,h,p,f,g,m,v=this._time,y=this._dirty?this.totalDuration():this._tDur,b=this._dur,w=t<=0?0:yt(t),_=this._zTime<0!=t<0&&(this._initted||!b);if(this!==l&&w>y&&t>=0&&(w=y),w!==this._tTime||i||_){if(v!==this._time&&b&&(w+=this._time-v,t+=this._time-v),n=w,p=this._start,d=!(h=this._ts),_&&(b||(v=this._zTime),(t||!e)&&(this._zTime=t)),this._repeat){if(g=this._yoyo,c=b+this._rDelay,this._repeat<-1&&t<0)return this.totalTime(100*c+t,e,i);if(n=yt(w%c),w===y?(a=this._repeat,n=b):((a=~~(w/c))&&a===w/c&&(n=b,a--),n>b&&(n=b)),f=Rt(this._tTime,c),!v&&this._tTime&&f!==a&&this._tTime-f*c-this._dur<=0&&(f=a),g&&1&a&&(n=b-n,m=1),a!==f&&!this._lock){var x=g&&1&f,T=x===(g&&1&a);if(a<f&&(x=!x),v=x?0:w%b?b:w,this._lock=1,this.render(v||(m?0:yt(a*c)),e,!b)._lock=0,this._tTime=w,!e&&this.parent&&ge(this,"onRepeat"),this.vars.repeatRefresh&&!m&&(this.invalidate()._lock=1),v&&v!==this._time||d!==!this._ts||this.vars.onRepeat&&!this.parent&&!this._act)return this;if(b=this._dur,y=this._tDur,T&&(this._lock=2,v=x?b:-1e-4,this.render(v,!0),this.vars.repeatRefresh&&!m&&this.invalidate()),this._lock=0,!this._ts&&!d)return this;ze(this,m)}}if(this._hasPause&&!this._forcing&&this._lock<2&&(u=function(t,e,i){var n;if(i>e)for(n=t._first;n&&n._start<=i;){if("isPause"===n.data&&n._start>e)return n;n=n._next}else for(n=t._last;n&&n._start>=i;){if("isPause"===n.data&&n._start<e)return n;n=n._prev}}(this,yt(v),yt(n)),u&&(w-=n-(n=u._start))),this._tTime=w,this._time=n,this._act=!h,this._initted||(this._onUpdate=this.vars.onUpdate,this._initted=1,this._zTime=t,v=0),!v&&n&&!e&&!a&&(ge(this,"onStart"),this._tTime!==w))return this;if(n>=v&&t>=0)for(s=this._first;s;){if(r=s._next,(s._act||n>=s._start)&&s._ts&&u!==s){if(s.parent!==this)return this.render(t,e,i);if(s.render(s._ts>0?(n-s._start)*s._ts:(s._dirty?s.totalDuration():s._tDur)+(n-s._start)*s._ts,e,i),n!==this._time||!this._ts&&!d){u=0,r&&(w+=this._zTime=-1e-8);break}}s=r}else{s=this._last;for(var S=t<0?t:n;s;){if(r=s._prev,(s._act||S<=s._end)&&s._ts&&u!==s){if(s.parent!==this)return this.render(t,e,i);if(s.render(s._ts>0?(S-s._start)*s._ts:(s._dirty?s.totalDuration():s._tDur)+(S-s._start)*s._ts,e,i||o&&(s._initted||s._startAt)),n!==this._time||!this._ts&&!d){u=0,r&&(w+=this._zTime=S?-1e-8:E);break}}s=r}}if(u&&!e&&(this.pause(),u.render(n>=v?0:-1e-8)._zTime=n>=v?1:-1,this._ts))return this._start=p,Ht(this),this.render(t,e,i);this._onUpdate&&!e&&ge(this,"onUpdate",!0),(w===y&&this._tTime>=this.totalDuration()||!w&&v)&&(p!==this._start&&Math.abs(h)===Math.abs(this._ts)||this._lock||((t||!b)&&(w===y&&this._ts>0||!w&&this._ts<0)&&Pt(this,1),e||t<0&&!v||!w&&!v&&y||(ge(this,w===y&&t>=0?"onComplete":"onReverseComplete",!0),this._prom&&!(w<y&&this.timeScale()>0)&&this._prom())))}return this},i.add=function(t,e){var i=this;if(D(e)||(e=Kt(this,e,t)),!(t instanceof Ve)){if(Y(t))return t.forEach((function(t){return i.add(t,e)})),this;if(P(t))return this.addLabel(t,e);if(!L(t))return this;t=ti.delayedCall(0,t)}return this!==t?Vt(this,t,e):this},i.getChildren=function(t,e,i,n){void 0===t&&(t=!0),void 0===e&&(e=!0),void 0===i&&(i=!0),void 0===n&&(n=-S);for(var s=[],r=this._first;r;)r._start>=n&&(r instanceof ti?e&&s.push(r):(i&&s.push(r),t&&s.push.apply(s,r.getChildren(!0,e,i)))),r=r._next;return s},i.getById=function(t){for(var e=this.getChildren(1,1,1),i=e.length;i--;)if(e[i].vars.id===t)return e[i]},i.remove=function(t){return P(t)?this.removeLabel(t):L(t)?this.killTweensOf(t):(It(this,t),t===this._recent&&(this._recent=this._last),Lt(this))},i.totalTime=function(e,i){return arguments.length?(this._forcing=1,!this._dp&&this._ts&&(this._start=yt(Me.time-(this._ts>0?e/this._ts:(this.totalDuration()-e)/-this._ts))),t.prototype.totalTime.call(this,e,i),this._forcing=0,this):this._tTime},i.addLabel=function(t,e){return this.labels[t]=Kt(this,e),this},i.removeLabel=function(t){return delete this.labels[t],this},i.addPause=function(t,e,i){var n=ti.delayedCall(0,e||et,i);return n.data="isPause",this._hasPause=1,Vt(this,n,Kt(this,t))},i.removePause=function(t){var e=this._first;for(t=Kt(this,t);e;)e._start===t&&"isPause"===e.data&&Pt(e),e=e._next},i.killTweensOf=function(t,e,i){for(var n=this.getTweensOf(t,i),s=n.length;s--;)Ne!==n[s]&&n[s].kill(t,e);return this},i.getTweensOf=function(t,e){for(var i,n=[],s=se(t),r=this._first,o=D(e);r;)r instanceof ti?wt(r._targets,s)&&(o?(!Ne||r._initted&&r._ts)&&r.globalTime(0)<=e&&r.globalTime(r.totalDuration())>e:!e||r.isActive())&&n.push(r):(i=r.getTweensOf(s,e)).length&&n.push.apply(n,i),r=r._next;return n},i.tweenTo=function(t,e){e=e||{};var i,n=this,s=Kt(n,t),r=e,o=r.startAt,a=r.onStart,l=r.onStartParams,c=r.immediateRender,d=ti.to(n,Et({ease:e.ease||"none",lazy:!1,immediateRender:!1,time:s,overwrite:"auto",duration:e.duration||Math.abs((s-(o&&"time"in o?o.time:n._time))/n.timeScale())||E,onStart:function(){if(n.pause(),!i){var t=e.duration||Math.abs((s-(o&&"time"in o?o.time:n._time))/n.timeScale());d._dur!==t&&$t(d,t,0,1).render(d._time,!0,!0),i=1}a&&a.apply(d,l||[])}},e));return c?d.render(0):d},i.tweenFromTo=function(t,e,i){return this.tweenTo(e,Et({startAt:{time:Kt(this,t)}},i))},i.recent=function(){return this._recent},i.nextLabel=function(t){return void 0===t&&(t=this._time),fe(this,Kt(this,t))},i.previousLabel=function(t){return void 0===t&&(t=this._time),fe(this,Kt(this,t),1)},i.currentLabel=function(t){return arguments.length?this.seek(t,!0):this.previousLabel(this._time+E)},i.shiftChildren=function(t,e,i){void 0===i&&(i=0);for(var n,s=this._first,r=this.labels;s;)s._start>=i&&(s._start+=t,s._end+=t),s=s._next;if(e)for(n in r)r[n]>=i&&(r[n]+=t);return Lt(this)},i.invalidate=function(e){var i=this._first;for(this._lock=0;i;)i.invalidate(e),i=i._next;return t.prototype.invalidate.call(this,e)},i.clear=function(t){void 0===t&&(t=!0);for(var e,i=this._first;i;)e=i._next,this.remove(i),i=e;return this._dp&&(this._time=this._tTime=this._pTime=0),t&&(this.labels={}),Lt(this)},i.totalDuration=function(t){var e,i,n,s=0,r=this,o=r._last,a=S;if(arguments.length)return r.timeScale((r._repeat<0?r.duration():r.totalDuration())/(r.reversed()?-t:t));if(r._dirty){for(n=r.parent;o;)e=o._prev,o._dirty&&o.totalDuration(),(i=o._start)>a&&r._sort&&o._ts&&!r._lock?(r._lock=1,Vt(r,o,i-o._delay,1)._lock=0):a=i,i<0&&o._ts&&(s-=i,(!n&&!r._dp||n&&n.smoothChildTiming)&&(r._start+=i/r._ts,r._time-=i,r._tTime-=i),r.shiftChildren(-i,!1,-Infinity),a=0),o._end>s&&o._ts&&(s=o._end),o=e;$t(r,r===l&&r._time>s?r._time:s,1,1),r._dirty=0}return r._tDur},e.updateRoot=function(t){if(l._ts&&(xt(l,Ft(t,l)),p=Me.frame),Me.frame>=dt){dt+=x.autoSleep||120;var e=l._first;if((!e||!e._ts)&&x.autoSleep&&Me._listeners.length<2){for(;e&&!e._ts;)e=e._next;e||Me.sleep()}}},e}(Ve);Et(je.prototype,{_lock:0,_hasPause:0,_forcing:0});var Ne,We,Xe=function(t,e,i,n,s,r,o){var a,l,c,d,u,h,p,f,g=new fi(this._pt,t,e,0,1,li,null,s),m=0,v=0;for(g.b=i,g.e=n,i+="",(p=~(n+="").indexOf("random("))&&(n=he(n)),r&&(r(f=[i,n],t,e),i=f[0],n=f[1]),l=i.match(W)||[];a=W.exec(n);)d=a[0],u=n.substring(m,a.index),c?c=(c+1)%5:"rgba("===u.substr(-5)&&(c=1),d!==l[v++]&&(h=parseFloat(l[v-1])||0,g._pt={_next:g._pt,p:u||1===v?u:",",s:h,c:"="===d.charAt(1)?bt(h,d)-h:parseFloat(d)-h,m:c&&c<4?Math.round:0},m=W.lastIndex);return g.c=m<n.length?n.substring(m,n.length):"",g.fp=o,(X.test(n)||p)&&(g.e=0),this._pt=g,g},$e=function(t,e,i,n,s,r,o,a,l,c){L(n)&&(n=n(s||0,t,r));var d,u=t[e],h="get"!==i?i:L(u)?l?t[e.indexOf("set")||!L(t["get"+e.substr(3)])?e:"get"+e.substr(3)](l):t[e]():u,p=L(u)?l?ni:ii:ei;if(P(n)&&(~n.indexOf("random(")&&(n=he(n)),"="===n.charAt(1)&&((d=bt(h,n)+(te(h)||0))||0===d)&&(n=d)),!c||h!==n||We)return isNaN(h*n)||""===n?(!u&&!(e in t)&&Z(e,n),Xe.call(this,t,e,h,n,p,a||x.stringFilter,l)):(d=new fi(this._pt,t,e,+h||0,n-(h||0),"boolean"==typeof u?ai:oi,0,p),l&&(d.fp=l),o&&d.modifier(o,this,t),this._pt=d)},qe=function(t,e,i,n,s,r){var o,a,l,c;if(lt[t]&&!1!==(o=new lt[t]).init(s,o.rawVars?e[t]:function(t,e,i,n,s){if(L(t)&&(t=Je(t,s,e,i,n)),!B(t)||t.style&&t.nodeType||Y(t)||G(t))return P(t)?Je(t,s,e,i,n):t;var r,o={};for(r in t)o[r]=Je(t[r],s,e,i,n);return o}(e[t],n,s,r,i),i,n,r)&&(i._pt=a=new fi(i._pt,s,t,0,1,o.render,o,0,o.priority),i!==f))for(l=i._ptLookup[i._targets.indexOf(s)],c=o._props.length;c--;)l[o._props[c]]=a;return o},Ue=function t(e,i,n){var s,a,c,d,u,h,p,f,g,m,v,y,b,w=e.vars,_=w.ease,x=w.startAt,C=w.immediateRender,k=w.lazy,M=w.onUpdate,O=w.runBackwards,A=w.yoyoEase,I=w.keyframes,P=w.autoRevert,L=e._dur,D=e._startAt,z=e._targets,B=e.parent,F=B&&"nested"===B.data?B.vars.targets:z,H="auto"===e._overwrite&&!r,G=e.timeline;if(G&&(!I||!_)&&(_="none"),e._ease=Be(_,T.ease),e._yEase=A?De(Be(!0===A?_:A,T.ease)):0,A&&e._yoyo&&!e._repeat&&(A=e._yEase,e._yEase=e._ease,e._ease=A),e._from=!G&&!!w.runBackwards,!G||I&&!w.stagger){if(y=(f=z[0]?ft(z[0]).harness:0)&&w[f.prop],s=Mt(w,rt),D&&(D._zTime<0&&D.progress(1),i<0&&O&&C&&!P?D.render(-1,!0):D.revert(O&&L?nt:it),D._lazy=0),x){if(Pt(e._startAt=ti.set(z,Et({data:"isStart",overwrite:!1,parent:B,immediateRender:!0,lazy:!D&&R(k),startAt:null,delay:0,onUpdate:M&&function(){return ge(e,"onUpdate")},stagger:0},x))),e._startAt._dp=0,e._startAt._sat=e,i<0&&(o||!C&&!P)&&e._startAt.revert(nt),C&&L&&i<=0&&n<=0)return void(i&&(e._zTime=i))}else if(O&&L&&!D)if(i&&(C=!1),c=Et({overwrite:!1,data:"isFromStart",lazy:C&&!D&&R(k),immediateRender:C,stagger:0,parent:B},s),y&&(c[f.prop]=y),Pt(e._startAt=ti.set(z,c)),e._startAt._dp=0,e._startAt._sat=e,i<0&&(o?e._startAt.revert(nt):e._startAt.render(-1,!0)),e._zTime=i,C){if(!i)return}else t(e._startAt,E,E);for(e._pt=e._ptCache=0,k=L&&R(k)||k&&!L,a=0;a<z.length;a++){if(p=(u=z[a])._gsap||pt(z)[a]._gsap,e._ptLookup[a]=m={},at[p.id]&&ot.length&&_t(),v=F===z?a:F.indexOf(u),f&&!1!==(g=new f).init(u,y||s,e,v,F)&&(e._pt=d=new fi(e._pt,u,g.name,0,1,g.render,g,0,g.priority),g._props.forEach((function(t){m[t]=d})),g.priority&&(h=1)),!f||y)for(c in s)lt[c]&&(g=qe(c,s,e,v,u,F))?g.priority&&(h=1):m[c]=d=$e.call(e,u,c,"get",s[c],v,F,0,w.stringFilter);e._op&&e._op[a]&&e.kill(u,e._op[a]),H&&e._pt&&(Ne=e,l.killTweensOf(u,m,e.globalTime(i)),b=!e.parent,Ne=0),e._pt&&k&&(at[p.id]=1)}h&&pi(e),e._onInit&&e._onInit(e)}e._onUpdate=M,e._initted=(!e._op||e._pt)&&!b,I&&i<=0&&G.render(S,!0,!0)},Ke=function(t,e,i,n){var s,r,o=e.ease||n||"power1.inOut";if(Y(e))r=i[t]||(i[t]=[]),e.forEach((function(t,i){return r.push({t:i/(e.length-1)*100,v:t,e:o})}));else for(s in e)r=i[s]||(i[s]=[]),"ease"===s||r.push({t:parseFloat(t),v:e[s],e:o})},Je=function(t,e,i,n,s){return L(t)?t.call(e,i,n,s):P(t)&&~t.indexOf("random(")?he(t):t},Ze=ht+"repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase,autoRevert",Qe={};mt(Ze+",id,stagger,delay,duration,paused,scrollTrigger",(function(t){return Qe[t]=1}));var ti=function(t){function e(e,i,s,o){var a;"number"==typeof i&&(s.duration=i,i=s,s=null);var c,d,u,h,p,f,g,m,v=(a=t.call(this,o?i:Ot(i))||this).vars,y=v.duration,b=v.delay,w=v.immediateRender,_=v.stagger,T=v.overwrite,S=v.keyframes,E=v.defaults,C=v.scrollTrigger,k=v.yoyoEase,M=i.parent||l,O=(Y(e)||G(e)?D(e[0]):"length"in i)?[e]:se(e);if(a._targets=O.length?pt(O):Q("GSAP target "+e+" not found. https://gsap.com",!x.nullTargetWarn)||[],a._ptLookup=[],a._overwrite=T,S||_||H(y)||H(b)){if(i=a.vars,(c=a.timeline=new je({data:"nested",defaults:E||{},targets:M&&"nested"===M.data?M.vars.targets:O})).kill(),c.parent=c._dp=n(a),c._start=0,_||H(y)||H(b)){if(h=O.length,g=_&&ae(_),B(_))for(p in _)~Ze.indexOf(p)&&(m||(m={}),m[p]=_[p]);for(d=0;d<h;d++)(u=Mt(i,Qe)).stagger=0,k&&(u.yoyoEase=k),m&&Ct(u,m),f=O[d],u.duration=+Je(y,n(a),d,f,O),u.delay=(+Je(b,n(a),d,f,O)||0)-a._delay,!_&&1===h&&u.delay&&(a._delay=b=u.delay,a._start+=b,u.delay=0),c.to(f,u,g?g(d,f,O):0),c._ease=Ae.none;c.duration()?y=b=0:a.timeline=0}else if(S){Ot(Et(c.vars.defaults,{ease:"none"})),c._ease=Be(S.ease||i.ease||"none");var A,I,P,L=0;if(Y(S))S.forEach((function(t){return c.to(O,t,">")})),c.duration();else{for(p in u={},S)"ease"===p||"easeEach"===p||Ke(p,S[p],u,S.easeEach);for(p in u)for(A=u[p].sort((function(t,e){return t.t-e.t})),L=0,d=0;d<A.length;d++)(P={ease:(I=A[d]).e,duration:(I.t-(d?A[d-1].t:0))/100*y})[p]=I.v,c.to(O,P,L),L+=P.duration;c.duration()<y&&c.to({},{duration:y-c.duration()})}}y||a.duration(y=c.duration())}else a.timeline=0;return!0!==T||r||(Ne=n(a),l.killTweensOf(O),Ne=0),Vt(M,n(a),s),i.reversed&&a.reverse(),i.paused&&a.paused(!0),(w||!y&&!S&&a._start===yt(M._time)&&R(w)&&zt(n(a))&&"nested"!==M.data)&&(a._tTime=-1e-8,a.render(Math.max(0,-b)||0)),C&&jt(n(a),C),a}s(e,t);var i=e.prototype;return i.render=function(t,e,i){var n,s,r,a,l,c,d,u,h,p=this._time,f=this._tDur,g=this._dur,m=t<0,v=t>f-E&&!m?f:t<E?0:t;if(g){if(v!==this._tTime||!t||i||!this._initted&&this._tTime||this._startAt&&this._zTime<0!==m){if(n=v,u=this.timeline,this._repeat){if(a=g+this._rDelay,this._repeat<-1&&m)return this.totalTime(100*a+t,e,i);if(n=yt(v%a),v===f?(r=this._repeat,n=g):((r=~~(v/a))&&r===yt(v/a)&&(n=g,r--),n>g&&(n=g)),(c=this._yoyo&&1&r)&&(h=this._yEase,n=g-n),l=Rt(this._tTime,a),n===p&&!i&&this._initted&&r===l)return this._tTime=v,this;r!==l&&(u&&this._yEase&&ze(u,c),this.vars.repeatRefresh&&!c&&!this._lock&&this._time!==a&&this._initted&&(this._lock=i=1,this.render(yt(a*r),!0).invalidate()._lock=0))}if(!this._initted){if(Nt(this,m?t:n,i,e,v))return this._tTime=0,this;if(!(p===this._time||i&&this.vars.repeatRefresh&&r!==l))return this;if(g!==this._dur)return this.render(t,e,i)}if(this._tTime=v,this._time=n,!this._act&&this._ts&&(this._act=1,this._lazy=0),this.ratio=d=(h||this._ease)(n/g),this._from&&(this.ratio=d=1-d),n&&!p&&!e&&!r&&(ge(this,"onStart"),this._tTime!==v))return this;for(s=this._pt;s;)s.r(d,s.d),s=s._next;u&&u.render(t<0?t:u._dur*u._ease(n/this._dur),e,i)||this._startAt&&(this._zTime=t),this._onUpdate&&!e&&(m&&Dt(this,t,0,i),ge(this,"onUpdate")),this._repeat&&r!==l&&this.vars.onRepeat&&!e&&this.parent&&ge(this,"onRepeat"),v!==this._tDur&&v||this._tTime!==v||(m&&!this._onUpdate&&Dt(this,t,0,!0),(t||!g)&&(v===this._tDur&&this._ts>0||!v&&this._ts<0)&&Pt(this,1),e||m&&!p||!(v||p||c)||(ge(this,v===f?"onComplete":"onReverseComplete",!0),this._prom&&!(v<f&&this.timeScale()>0)&&this._prom()))}}else!function(t,e,i,n){var s,r,a,l=t.ratio,c=e<0||!e&&(!t._start&&Wt(t)&&(t._initted||!Xt(t))||(t._ts<0||t._dp._ts<0)&&!Xt(t))?0:1,d=t._rDelay,u=0;if(d&&t._repeat&&(u=Qt(0,t._tDur,e),r=Rt(u,d),t._yoyo&&1&r&&(c=1-c),r!==Rt(t._tTime,d)&&(l=1-c,t.vars.repeatRefresh&&t._initted&&t.invalidate())),c!==l||o||n||t._zTime===E||!e&&t._zTime){if(!t._initted&&Nt(t,e,n,i,u))return;for(a=t._zTime,t._zTime=e||(i?E:0),i||(i=e&&!a),t.ratio=c,t._from&&(c=1-c),t._time=0,t._tTime=u,s=t._pt;s;)s.r(c,s.d),s=s._next;e<0&&Dt(t,e,0,!0),t._onUpdate&&!i&&ge(t,"onUpdate"),u&&t._repeat&&!i&&t.parent&&ge(t,"onRepeat"),(e>=t._tDur||e<0)&&t.ratio===c&&(c&&Pt(t,1),i||o||(ge(t,c?"onComplete":"onReverseComplete",!0),t._prom&&t._prom()))}else t._zTime||(t._zTime=e)}(this,t,e,i);return this},i.targets=function(){return this._targets},i.invalidate=function(e){return(!e||!this.vars.runBackwards)&&(this._startAt=0),this._pt=this._op=this._onUpdate=this._lazy=this.ratio=0,this._ptLookup=[],this.timeline&&this.timeline.invalidate(e),t.prototype.invalidate.call(this,e)},i.resetTo=function(t,e,i,n,s){g||Me.wake(),this._ts||this.play();var r=Math.min(this._dur,(this._dp._time-this._start)*this._ts);return this._initted||Ue(this,r),function(t,e,i,n,s,r,o,a){var l,c,d,u,h=(t._pt&&t._ptCache||(t._ptCache={}))[e];if(!h)for(h=t._ptCache[e]=[],d=t._ptLookup,u=t._targets.length;u--;){if((l=d[u][e])&&l.d&&l.d._pt)for(l=l.d._pt;l&&l.p!==e&&l.fp!==e;)l=l._next;if(!l)return We=1,t.vars[e]="+=0",Ue(t,o),We=0,a?Q(e+" not eligible for reset"):1;h.push(l)}for(u=h.length;u--;)(l=(c=h[u])._pt||c).s=!n&&0!==n||s?l.s+(n||0)+r*l.c:n,l.c=i-l.s,c.e&&(c.e=vt(i)+te(c.e)),c.b&&(c.b=l.s+te(c.b))}(this,t,e,i,n,this._ease(r/this._dur),r,s)?this.resetTo(t,e,i,n,1):(Gt(this,0),this.parent||At(this._dp,this,"_first","_last",this._dp._sort?"_start":0),this.render(0))},i.kill=function(t,e){if(void 0===e&&(e="all"),!(t||e&&"all"!==e))return this._lazy=this._pt=0,this.parent?me(this):this;if(this.timeline){var i=this.timeline.totalDuration();return this.timeline.killTweensOf(t,e,Ne&&!0!==Ne.vars.overwrite)._first||me(this),this.parent&&i!==this.timeline.totalDuration()&&$t(this,this._dur*this.timeline._tDur/i,0,1),this}var n,s,r,o,a,l,c,d=this._targets,u=t?se(t):d,h=this._ptLookup,p=this._pt;if((!e||"all"===e)&&function(t,e){for(var i=t.length,n=i===e.length;n&&i--&&t[i]===e[i];);return i<0}(d,u))return"all"===e&&(this._pt=0),me(this);for(n=this._op=this._op||[],"all"!==e&&(P(e)&&(a={},mt(e,(function(t){return a[t]=1})),e=a),e=function(t,e){var i,n,s,r,o=t[0]?ft(t[0]).harness:0,a=o&&o.aliases;if(!a)return e;for(n in i=Ct({},e),a)if(n in i)for(s=(r=a[n].split(",")).length;s--;)i[r[s]]=i[n];return i}(d,e)),c=d.length;c--;)if(~u.indexOf(d[c]))for(a in s=h[c],"all"===e?(n[c]=e,o=s,r={}):(r=n[c]=n[c]||{},o=e),o)(l=s&&s[a])&&("kill"in l.d&&!0!==l.d.kill(a)||It(this,l,"_pt"),delete s[a]),"all"!==r&&(r[a]=1);return this._initted&&!this._pt&&p&&me(this),this},e.to=function(t,i){return new e(t,i,arguments[2])},e.from=function(t,e){return Jt(1,arguments)},e.delayedCall=function(t,i,n,s){return new e(i,0,{immediateRender:!1,lazy:!1,overwrite:!1,delay:t,onComplete:i,onReverseComplete:i,onCompleteParams:n,onReverseCompleteParams:n,callbackScope:s})},e.fromTo=function(t,e,i){return Jt(2,arguments)},e.set=function(t,i){return i.duration=0,i.repeatDelay||(i.repeat=0),new e(t,i)},e.killTweensOf=function(t,e,i){return l.killTweensOf(t,e,i)},e}(Ve);Et(ti.prototype,{_targets:[],_lazy:0,_startAt:0,_op:0,_onInit:0}),mt("staggerTo,staggerFrom,staggerFromTo",(function(t){ti[t]=function(){var e=new je,i=ee.call(arguments,0);return i.splice("staggerFromTo"===t?5:4,0,0),e[t].apply(e,i)}}));var ei=function(t,e,i){return t[e]=i},ii=function(t,e,i){return t[e](i)},ni=function(t,e,i,n){return t[e](n.fp,i)},si=function(t,e,i){return t.setAttribute(e,i)},ri=function(t,e){return L(t[e])?ii:z(t[e])&&t.setAttribute?si:ei},oi=function(t,e){return e.set(e.t,e.p,Math.round(1e6*(e.s+e.c*t))/1e6,e)},ai=function(t,e){return e.set(e.t,e.p,!!(e.s+e.c*t),e)},li=function(t,e){var i=e._pt,n="";if(!t&&e.b)n=e.b;else if(1===t&&e.e)n=e.e;else{for(;i;)n=i.p+(i.m?i.m(i.s+i.c*t):Math.round(1e4*(i.s+i.c*t))/1e4)+n,i=i._next;n+=e.c}e.set(e.t,e.p,n,e)},ci=function(t,e){for(var i=e._pt;i;)i.r(t,i.d),i=i._next},di=function(t,e,i,n){for(var s,r=this._pt;r;)s=r._next,r.p===n&&r.modifier(t,e,i),r=s},ui=function(t){for(var e,i,n=this._pt;n;)i=n._next,n.p===t&&!n.op||n.op===t?It(this,n,"_pt"):n.dep||(e=1),n=i;return!e},hi=function(t,e,i,n){n.mSet(t,e,n.m.call(n.tween,i,n.mt),n)},pi=function(t){for(var e,i,n,s,r=t._pt;r;){for(e=r._next,i=n;i&&i.pr>r.pr;)i=i._next;(r._prev=i?i._prev:s)?r._prev._next=r:n=r,(r._next=i)?i._prev=r:s=r,r=e}t._pt=n},fi=function(){function t(t,e,i,n,s,r,o,a,l){this.t=e,this.s=n,this.c=s,this.p=i,this.r=r||oi,this.d=o||this,this.set=a||ei,this.pr=l||0,this._next=t,t&&(t._prev=this)}return t.prototype.modifier=function(t,e,i){this.mSet=this.mSet||this.set,this.set=hi,this.m=t,this.mt=i,this.tween=e},t}();mt(ht+"parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger",(function(t){return rt[t]=1})),U.TweenMax=U.TweenLite=ti,U.TimelineLite=U.TimelineMax=je,l=new je({sortChildren:!1,defaults:T,autoRemoveChildren:!0,id:"root",smoothChildTiming:!0}),x.stringFilter=ke;var gi=[],mi={},vi=[],yi=0,bi=0,wi=function(t){return(mi[t]||vi).map((function(t){return t()}))},_i=function(){var t=Date.now(),e=[];t-yi>2&&(wi("matchMediaInit"),gi.forEach((function(t){var i,n,s,r,o=t.queries,a=t.conditions;for(n in o)(i=c.matchMedia(o[n]).matches)&&(s=1),i!==a[n]&&(a[n]=i,r=1);r&&(t.revert(),s&&e.push(t))})),wi("matchMediaRevert"),e.forEach((function(t){return t.onMatch(t,(function(e){return t.add(null,e)}))})),yi=t,wi("matchMedia"))},xi=function(){function t(t,e){this.selector=e&&re(e),this.data=[],this._r=[],this.isReverted=!1,this.id=bi++,t&&this.add(t)}var e=t.prototype;return e.add=function(t,e,i){L(t)&&(i=e,e=t,t=L);var n=this,s=function(){var t,s=a,r=n.selector;return s&&s!==n&&s.data.push(n),i&&(n.selector=re(i)),a=n,t=e.apply(n,arguments),L(t)&&n._r.push(t),a=s,n.selector=r,n.isReverted=!1,t};return n.last=s,t===L?s(n,(function(t){return n.add(null,t)})):t?n[t]=s:s},e.ignore=function(t){var e=a;a=null,t(this),a=e},e.getTweens=function(){var e=[];return this.data.forEach((function(i){return i instanceof t?e.push.apply(e,i.getTweens()):i instanceof ti&&!(i.parent&&"nested"===i.parent.data)&&e.push(i)})),e},e.clear=function(){this._r.length=this.data.length=0},e.kill=function(t,e){var i=this;if(t?function(){for(var e,n=i.getTweens(),s=i.data.length;s--;)"isFlip"===(e=i.data[s]).data&&(e.revert(),e.getChildren(!0,!0,!1).forEach((function(t){return n.splice(n.indexOf(t),1)})));for(n.map((function(t){return{g:t._dur||t._delay||t._sat&&!t._sat.vars.immediateRender?t.globalTime(0):-1/0,t}})).sort((function(t,e){return e.g-t.g||-1/0})).forEach((function(e){return e.t.revert(t)})),s=i.data.length;s--;)(e=i.data[s])instanceof je?"nested"!==e.data&&(e.scrollTrigger&&e.scrollTrigger.revert(),e.kill()):!(e instanceof ti)&&e.revert&&e.revert(t);i._r.forEach((function(e){return e(t,i)})),i.isReverted=!0}():this.data.forEach((function(t){return t.kill&&t.kill()})),this.clear(),e)for(var n=gi.length;n--;)gi[n].id===this.id&&gi.splice(n,1)},e.revert=function(t){this.kill(t||{})},t}(),Ti=function(){function t(t){this.contexts=[],this.scope=t,a&&a.data.push(this)}var e=t.prototype;return e.add=function(t,e,i){B(t)||(t={matches:t});var n,s,r,o=new xi(0,i||this.scope),l=o.conditions={};for(s in a&&!o.selector&&(o.selector=a.selector),this.contexts.push(o),e=o.add("onMatch",e),o.queries=t,t)"all"===s?r=1:(n=c.matchMedia(t[s]))&&(gi.indexOf(o)<0&&gi.push(o),(l[s]=n.matches)&&(r=1),n.addListener?n.addListener(_i):n.addEventListener("change",_i));return r&&e(o,(function(t){return o.add(null,t)})),this},e.revert=function(t){this.kill(t||{})},e.kill=function(t){this.contexts.forEach((function(e){return e.kill(t,!0)}))},t}(),Si={registerPlugin:function(){for(var t=arguments.length,e=new Array(t),i=0;i<t;i++)e[i]=arguments[i];e.forEach((function(t){return ye(t)}))},timeline:function(t){return new je(t)},getTweensOf:function(t,e){return l.getTweensOf(t,e)},getProperty:function(t,e,i,n){P(t)&&(t=se(t)[0]);var s=ft(t||{}).get,r=i?St:Tt;return"native"===i&&(i=""),t?e?r((lt[e]&&lt[e].get||s)(t,e,i,n)):function(e,i,n){return r((lt[e]&&lt[e].get||s)(t,e,i,n))}:t},quickSetter:function(t,e,i){if((t=se(t)).length>1){var n=t.map((function(t){return ki.quickSetter(t,e,i)})),s=n.length;return function(t){for(var e=s;e--;)n[e](t)}}t=t[0]||{};var r=lt[e],o=ft(t),a=o.harness&&(o.harness.aliases||{})[e]||e,l=r?function(e){var n=new r;f._pt=0,n.init(t,i?e+i:e,f,0,[t]),n.render(1,n),f._pt&&ci(1,f)}:o.set(t,a);return r?l:function(e){return l(t,a,i?e+i:e,o,1)}},quickTo:function(t,e,i){var n,s=ki.to(t,Ct(((n={})[e]="+=0.1",n.paused=!0,n),i||{})),r=function(t,i,n){return s.resetTo(e,t,i,n)};return r.tween=s,r},isTweening:function(t){return l.getTweensOf(t,!0).length>0},defaults:function(t){return t&&t.ease&&(t.ease=Be(t.ease,T.ease)),kt(T,t||{})},config:function(t){return kt(x,t||{})},registerEffect:function(t){var e=t.name,i=t.effect,n=t.plugins,s=t.defaults,r=t.extendTimeline;(n||"").split(",").forEach((function(t){return t&&!lt[t]&&!U[t]&&Q(e+" effect requires "+t+" plugin.")})),ct[e]=function(t,e,n){return i(se(t),Et(e||{},s),n)},r&&(je.prototype[e]=function(t,i,n){return this.add(ct[e](t,B(i)?i:(n=i)&&{},this),n)})},registerEase:function(t,e){Ae[t]=Be(e)},parseEase:function(t,e){return arguments.length?Be(t,e):Ae},getById:function(t){return l.getById(t)},exportRoot:function(t,e){void 0===t&&(t={});var i,n,s=new je(t);for(s.smoothChildTiming=R(t.smoothChildTiming),l.remove(s),s._dp=0,s._time=s._tTime=l._time,i=l._first;i;)n=i._next,!e&&!i._dur&&i instanceof ti&&i.vars.onComplete===i._targets[0]||Vt(s,i,i._start-i._delay),i=n;return Vt(l,s,0),s},context:function(t,e){return t?new xi(t,e):a},matchMedia:function(t){return new Ti(t)},matchMediaRefresh:function(){return gi.forEach((function(t){var e,i,n=t.conditions;for(i in n)n[i]&&(n[i]=!1,e=1);e&&t.revert()}))||_i()},addEventListener:function(t,e){var i=mi[t]||(mi[t]=[]);~i.indexOf(e)||i.push(e)},removeEventListener:function(t,e){var i=mi[t],n=i&&i.indexOf(e);n>=0&&i.splice(n,1)},utils:{wrap:function t(e,i,n){var s=i-e;return Y(e)?ue(e,t(0,e.length),i):Zt(n,(function(t){return(s+(t-e)%s)%s+e}))},wrapYoyo:function t(e,i,n){var s=i-e,r=2*s;return Y(e)?ue(e,t(0,e.length-1),i):Zt(n,(function(t){return e+((t=(r+(t-e)%r)%r||0)>s?r-t:t)}))},distribute:ae,random:de,snap:ce,normalize:function(t,e,i){return pe(t,e,0,1,i)},getUnit:te,clamp:function(t,e,i){return Zt(i,(function(i){return Qt(t,e,i)}))},splitColor:xe,toArray:se,selector:re,mapRange:pe,pipe:function(){for(var t=arguments.length,e=new Array(t),i=0;i<t;i++)e[i]=arguments[i];return function(t){return e.reduce((function(t,e){return e(t)}),t)}},unitize:function(t,e){return function(i){return t(parseFloat(i))+(e||te(i))}},interpolate:function t(e,i,n,s){var r=isNaN(e+i)?0:function(t){return(1-t)*e+t*i};if(!r){var o,a,l,c,d,u=P(e),h={};if(!0===n&&(s=1)&&(n=null),u)e={p:e},i={p:i};else if(Y(e)&&!Y(i)){for(l=[],c=e.length,d=c-2,a=1;a<c;a++)l.push(t(e[a-1],e[a]));c--,r=function(t){t*=c;var e=Math.min(d,~~t);return l[e](t-e)},n=i}else s||(e=Ct(Y(e)?[]:{},e));if(!l){for(o in i)$e.call(h,e,o,"get",i[o]);r=function(t){return ci(t,h)||(u?e.p:e)}}}return Zt(n,r)},shuffle:oe},install:J,effects:ct,ticker:Me,updateRoot:je.updateRoot,plugins:lt,globalTimeline:l,core:{PropTween:fi,globals:tt,Tween:ti,Timeline:je,Animation:Ve,getCache:ft,_removeLinkedListItem:It,reverting:function(){return o},context:function(t){return t&&a&&(a.data.push(t),t._ctx=a),a},suppressOverwrites:function(t){return r=t}}};mt("to,from,fromTo,delayedCall,set,killTweensOf",(function(t){return Si[t]=ti[t]})),Me.add(je.updateRoot),f=Si.to({},{duration:0});var Ei=function(t,e){for(var i=t._pt;i&&i.p!==e&&i.op!==e&&i.fp!==e;)i=i._next;return i},Ci=function(t,e){return{name:t,rawVars:1,init:function(t,i,n){n._onInit=function(t){var n,s;if(P(i)&&(n={},mt(i,(function(t){return n[t]=1})),i=n),e){for(s in n={},i)n[s]=e(i[s]);i=n}!function(t,e){var i,n,s,r=t._targets;for(i in e)for(n=r.length;n--;)(s=t._ptLookup[n][i])&&(s=s.d)&&(s._pt&&(s=Ei(s,i)),s&&s.modifier&&s.modifier(e[i],t,r[n],i))}(t,i)}}}},ki=Si.registerPlugin({name:"attr",init:function(t,e,i,n,s){var r,o,a;for(r in this.tween=i,e)a=t.getAttribute(r)||"",(o=this.add(t,"setAttribute",(a||0)+"",e[r],n,s,0,0,r)).op=r,o.b=a,this._props.push(r)},render:function(t,e){for(var i=e._pt;i;)o?i.set(i.t,i.p,i.b,i):i.r(t,i.d),i=i._next}},{name:"endArray",init:function(t,e){for(var i=e.length;i--;)this.add(t,i,t[i]||0,e[i],0,0,0,0,0,1)}},Ci("roundProps",le),Ci("modifiers"),Ci("snap",ce))||Si;ti.version=je.version=ki.version="3.12.5",h=1,F()&&Oe();Ae.Power0,Ae.Power1,Ae.Power2,Ae.Power3,Ae.Power4,Ae.Linear,Ae.Quad,Ae.Cubic,Ae.Quart,Ae.Quint,Ae.Strong,Ae.Elastic,Ae.Back,Ae.SteppedEase,Ae.Bounce,Ae.Sine,Ae.Expo,Ae.Circ},738:(t,e,i)=>{i.d(e,{Ay:()=>r});var n=i(8607),s=i(2650),r=n.os.registerPlugin(s.H0)||n.os;r.core.Tween},6383:(t,e,i)=>{function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function r(t,e,i){return e&&s(t.prototype,e),i&&s(t,i),t}function o(t,e,i){return e in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t}function a(t,e){var i=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),i.push.apply(i,n)}return i}function l(t){for(var e=1;e<arguments.length;e++){var i=null!=arguments[e]?arguments[e]:{};e%2?a(Object(i),!0).forEach((function(e){o(t,e,i[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(i)):a(Object(i)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(i,e))}))}return t}function c(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&u(t,e)}function d(t){return d=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},d(t)}function u(t,e){return u=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},u(t,e)}function h(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function p(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var i,n=d(t);if(e){var s=d(this).constructor;i=Reflect.construct(n,arguments,s)}else i=n.apply(this,arguments);return function(t,e){return!e||"object"!=typeof e&&"function"!=typeof e?h(t):e}(this,i)}}function f(t,e,i){return f="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,i){var n=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=d(t)););return t}(t,e);if(n){var s=Object.getOwnPropertyDescriptor(n,e);return s.get?s.get.call(i):s.value}},f(t,e,i||t)}function g(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(t)))return;var i=[],n=!0,s=!1,r=void 0;try{for(var o,a=t[Symbol.iterator]();!(n=(o=a.next()).done)&&(i.push(o.value),!e||i.length!==e);n=!0);}catch(t){s=!0,r=t}finally{try{n||null==a.return||a.return()}finally{if(s)throw r}}return i}(t,e)||v(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function m(t){return function(t){if(Array.isArray(t))return y(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||v(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function v(t,e){if(t){if("string"==typeof t)return y(t,e);var i=Object.prototype.toString.call(t).slice(8,-1);return"Object"===i&&t.constructor&&(i=t.constructor.name),"Map"===i||"Set"===i?Array.from(t):"Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)?y(t,e):void 0}}function y(t,e){(null==e||e>t.length)&&(e=t.length);for(var i=0,n=new Array(e);i<e;i++)n[i]=t[i];return n}i.d(e,{Ay:()=>ht});var b={el:document,name:"scroll",offset:[0,0],repeat:!1,smooth:!1,initPosition:{x:0,y:0},direction:"vertical",gestureDirection:"vertical",reloadOnContextChange:!1,lerp:.1,class:"is-inview",scrollbarContainer:!1,scrollbarClass:"c-scrollbar",scrollingClass:"has-scroll-scrolling",draggingClass:"has-scroll-dragging",smoothClass:"has-scroll-smooth",initClass:"has-scroll-init",getSpeed:!1,getDirection:!1,scrollFromAnywhere:!1,multiplier:1,firefoxMultiplier:50,touchMultiplier:2,resetNativeScroll:!0,tablet:{smooth:!1,direction:"vertical",gestureDirection:"vertical",breakpoint:1024},smartphone:{smooth:!1,direction:"vertical",gestureDirection:"vertical"}},w=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};n(this,t),Object.assign(this,b,e),this.smartphone=b.smartphone,e.smartphone&&Object.assign(this.smartphone,e.smartphone),this.tablet=b.tablet,e.tablet&&Object.assign(this.tablet,e.tablet),this.namespace="locomotive",this.html=document.documentElement,this.windowHeight=window.innerHeight,this.windowWidth=window.innerWidth,this.windowMiddle={x:this.windowWidth/2,y:this.windowHeight/2},this.els={},this.currentElements={},this.listeners={},this.hasScrollTicking=!1,this.hasCallEventSet=!1,this.checkScroll=this.checkScroll.bind(this),this.checkResize=this.checkResize.bind(this),this.checkEvent=this.checkEvent.bind(this),this.instance={scroll:{x:0,y:0},limit:{x:this.html.offsetWidth,y:this.html.offsetHeight},currentElements:this.currentElements},this.isMobile?this.isTablet?this.context="tablet":this.context="smartphone":this.context="desktop",this.isMobile&&(this.direction=this[this.context].direction),"horizontal"===this.direction?this.directionAxis="x":this.directionAxis="y",this.getDirection&&(this.instance.direction=null),this.getDirection&&(this.instance.speed=0),this.html.classList.add(this.initClass),window.addEventListener("resize",this.checkResize,!1)}return r(t,[{key:"init",value:function(){this.initEvents()}},{key:"checkScroll",value:function(){this.dispatchScroll()}},{key:"checkResize",value:function(){var t=this;this.resizeTick||(this.resizeTick=!0,requestAnimationFrame((function(){t.resize(),t.resizeTick=!1})))}},{key:"resize",value:function(){}},{key:"checkContext",value:function(){if(this.reloadOnContextChange){this.isMobile=/Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||"MacIntel"===navigator.platform&&navigator.maxTouchPoints>1||this.windowWidth<this.tablet.breakpoint,this.isTablet=this.isMobile&&this.windowWidth>=this.tablet.breakpoint;var t=this.context;if(this.isMobile?this.isTablet?this.context="tablet":this.context="smartphone":this.context="desktop",t!=this.context)("desktop"==t?this.smooth:this[t].smooth)!=("desktop"==this.context?this.smooth:this[this.context].smooth)&&window.location.reload()}}},{key:"initEvents",value:function(){var t=this;this.scrollToEls=this.el.querySelectorAll("[data-".concat(this.name,"-to]")),this.setScrollTo=this.setScrollTo.bind(this),this.scrollToEls.forEach((function(e){e.addEventListener("click",t.setScrollTo,!1)}))}},{key:"setScrollTo",value:function(t){t.preventDefault(),this.scrollTo(t.currentTarget.getAttribute("data-".concat(this.name,"-href"))||t.currentTarget.getAttribute("href"),{offset:t.currentTarget.getAttribute("data-".concat(this.name,"-offset"))})}},{key:"addElements",value:function(){}},{key:"detectElements",value:function(t){var e=this,i=this.instance.scroll.y,n=i+this.windowHeight,s=this.instance.scroll.x,r=s+this.windowWidth;Object.entries(this.els).forEach((function(o){var a=g(o,2),l=a[0],c=a[1];if(!c||c.inView&&!t||("horizontal"===e.direction?r>=c.left&&s<c.right&&e.setInView(c,l):n>=c.top&&i<c.bottom&&e.setInView(c,l)),c&&c.inView)if("horizontal"===e.direction){var d=c.right-c.left;c.progress=(e.instance.scroll.x-(c.left-e.windowWidth))/(d+e.windowWidth),(r<c.left||s>c.right)&&e.setOutOfView(c,l)}else{var u=c.bottom-c.top;c.progress=(e.instance.scroll.y-(c.top-e.windowHeight))/(u+e.windowHeight),(n<c.top||i>c.bottom)&&e.setOutOfView(c,l)}})),this.hasScrollTicking=!1}},{key:"setInView",value:function(t,e){this.els[e].inView=!0,t.el.classList.add(t.class),this.currentElements[e]=t,t.call&&this.hasCallEventSet&&(this.dispatchCall(t,"enter"),t.repeat||(this.els[e].call=!1))}},{key:"setOutOfView",value:function(t,e){var i=this;this.els[e].inView=!1,Object.keys(this.currentElements).forEach((function(t){t===e&&delete i.currentElements[t]})),t.call&&this.hasCallEventSet&&this.dispatchCall(t,"exit"),t.repeat&&t.el.classList.remove(t.class)}},{key:"dispatchCall",value:function(t,e){this.callWay=e,this.callValue=t.call.split(",").map((function(t){return t.trim()})),this.callObj=t,1==this.callValue.length&&(this.callValue=this.callValue[0]);var i=new Event(this.namespace+"call");this.el.dispatchEvent(i)}},{key:"dispatchScroll",value:function(){var t=new Event(this.namespace+"scroll");this.el.dispatchEvent(t)}},{key:"setEvents",value:function(t,e){this.listeners[t]||(this.listeners[t]=[]);var i=this.listeners[t];i.push(e),1===i.length&&this.el.addEventListener(this.namespace+t,this.checkEvent,!1),"call"===t&&(this.hasCallEventSet=!0,this.detectElements(!0))}},{key:"unsetEvents",value:function(t,e){if(this.listeners[t]){var i=this.listeners[t],n=i.indexOf(e);n<0||(i.splice(n,1),0===i.index&&this.el.removeEventListener(this.namespace+t,this.checkEvent,!1))}}},{key:"checkEvent",value:function(t){var e=this,i=t.type.replace(this.namespace,""),n=this.listeners[i];n&&0!==n.length&&n.forEach((function(t){switch(i){case"scroll":return t(e.instance);case"call":return t(e.callValue,e.callWay,e.callObj);default:return t()}}))}},{key:"startScroll",value:function(){}},{key:"stopScroll",value:function(){}},{key:"setScroll",value:function(t,e){this.instance.scroll={x:0,y:0}}},{key:"destroy",value:function(){var t=this;window.removeEventListener("resize",this.checkResize,!1),Object.keys(this.listeners).forEach((function(e){t.el.removeEventListener(t.namespace+e,t.checkEvent,!1)})),this.listeners={},this.scrollToEls.forEach((function(e){e.removeEventListener("click",t.setScrollTo,!1)})),this.html.classList.remove(this.initClass)}}]),t}(),_="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==i.g?i.g:"undefined"!=typeof self?self:{};function x(t,e){return t(e={exports:{}},e.exports),e.exports}var T=x((function(t,e){t.exports={polyfill:function(){var t=window,e=document;if(!("scrollBehavior"in e.documentElement.style)||!0===t.__forceSmoothScrollPolyfill__){var i,n=t.HTMLElement||t.Element,s=468,r={scroll:t.scroll||t.scrollTo,scrollBy:t.scrollBy,elementScroll:n.prototype.scroll||l,scrollIntoView:n.prototype.scrollIntoView},o=t.performance&&t.performance.now?t.performance.now.bind(t.performance):Date.now,a=(i=t.navigator.userAgent,new RegExp(["MSIE ","Trident/","Edge/"].join("|")).test(i)?1:0);t.scroll=t.scrollTo=function(){void 0!==arguments[0]&&(!0!==c(arguments[0])?f.call(t,e.body,void 0!==arguments[0].left?~~arguments[0].left:t.scrollX||t.pageXOffset,void 0!==arguments[0].top?~~arguments[0].top:t.scrollY||t.pageYOffset):r.scroll.call(t,void 0!==arguments[0].left?arguments[0].left:"object"!=typeof arguments[0]?arguments[0]:t.scrollX||t.pageXOffset,void 0!==arguments[0].top?arguments[0].top:void 0!==arguments[1]?arguments[1]:t.scrollY||t.pageYOffset))},t.scrollBy=function(){void 0!==arguments[0]&&(c(arguments[0])?r.scrollBy.call(t,void 0!==arguments[0].left?arguments[0].left:"object"!=typeof arguments[0]?arguments[0]:0,void 0!==arguments[0].top?arguments[0].top:void 0!==arguments[1]?arguments[1]:0):f.call(t,e.body,~~arguments[0].left+(t.scrollX||t.pageXOffset),~~arguments[0].top+(t.scrollY||t.pageYOffset)))},n.prototype.scroll=n.prototype.scrollTo=function(){if(void 0!==arguments[0])if(!0!==c(arguments[0])){var t=arguments[0].left,e=arguments[0].top;f.call(this,this,void 0===t?this.scrollLeft:~~t,void 0===e?this.scrollTop:~~e)}else{if("number"==typeof arguments[0]&&void 0===arguments[1])throw new SyntaxError("Value could not be converted");r.elementScroll.call(this,void 0!==arguments[0].left?~~arguments[0].left:"object"!=typeof arguments[0]?~~arguments[0]:this.scrollLeft,void 0!==arguments[0].top?~~arguments[0].top:void 0!==arguments[1]?~~arguments[1]:this.scrollTop)}},n.prototype.scrollBy=function(){void 0!==arguments[0]&&(!0!==c(arguments[0])?this.scroll({left:~~arguments[0].left+this.scrollLeft,top:~~arguments[0].top+this.scrollTop,behavior:arguments[0].behavior}):r.elementScroll.call(this,void 0!==arguments[0].left?~~arguments[0].left+this.scrollLeft:~~arguments[0]+this.scrollLeft,void 0!==arguments[0].top?~~arguments[0].top+this.scrollTop:~~arguments[1]+this.scrollTop))},n.prototype.scrollIntoView=function(){if(!0!==c(arguments[0])){var i=function(t){for(;t!==e.body&&!1===h(t);)t=t.parentNode||t.host;return t}(this),n=i.getBoundingClientRect(),s=this.getBoundingClientRect();i!==e.body?(f.call(this,i,i.scrollLeft+s.left-n.left,i.scrollTop+s.top-n.top),"fixed"!==t.getComputedStyle(i).position&&t.scrollBy({left:n.left,top:n.top,behavior:"smooth"})):t.scrollBy({left:s.left,top:s.top,behavior:"smooth"})}else r.scrollIntoView.call(this,void 0===arguments[0]||arguments[0])}}function l(t,e){this.scrollLeft=t,this.scrollTop=e}function c(t){if(null===t||"object"!=typeof t||void 0===t.behavior||"auto"===t.behavior||"instant"===t.behavior)return!0;if("object"==typeof t&&"smooth"===t.behavior)return!1;throw new TypeError("behavior member of ScrollOptions "+t.behavior+" is not a valid value for enumeration ScrollBehavior.")}function d(t,e){return"Y"===e?t.clientHeight+a<t.scrollHeight:"X"===e?t.clientWidth+a<t.scrollWidth:void 0}function u(e,i){var n=t.getComputedStyle(e,null)["overflow"+i];return"auto"===n||"scroll"===n}function h(t){var e=d(t,"Y")&&u(t,"Y"),i=d(t,"X")&&u(t,"X");return e||i}function p(e){var i,n,r,a,l=(o()-e.startTime)/s;a=l=l>1?1:l,i=.5*(1-Math.cos(Math.PI*a)),n=e.startX+(e.x-e.startX)*i,r=e.startY+(e.y-e.startY)*i,e.method.call(e.scrollable,n,r),n===e.x&&r===e.y||t.requestAnimationFrame(p.bind(t,e))}function f(i,n,s){var a,c,d,u,h=o();i===e.body?(a=t,c=t.scrollX||t.pageXOffset,d=t.scrollY||t.pageYOffset,u=r.scroll):(a=i,c=i.scrollLeft,d=i.scrollTop,u=l),p({scrollable:a,method:u,startTime:h,startX:c,startY:d,x:n,y:s})}}}})),S=(T.polyfill,function(t){c(i,t);var e=p(i);function i(){var t,s=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return n(this,i),(t=e.call(this,s)).resetNativeScroll&&(history.scrollRestoration&&(history.scrollRestoration="manual"),window.scrollTo(0,0)),window.addEventListener("scroll",t.checkScroll,!1),void 0===window.smoothscrollPolyfill&&(window.smoothscrollPolyfill=T,window.smoothscrollPolyfill.polyfill()),t}return r(i,[{key:"init",value:function(){this.instance.scroll.y=window.pageYOffset,this.addElements(),this.detectElements(),f(d(i.prototype),"init",this).call(this)}},{key:"checkScroll",value:function(){var t=this;f(d(i.prototype),"checkScroll",this).call(this),this.getDirection&&this.addDirection(),this.getSpeed&&(this.addSpeed(),this.speedTs=Date.now()),this.instance.scroll.y=window.pageYOffset,Object.entries(this.els).length&&(this.hasScrollTicking||(requestAnimationFrame((function(){t.detectElements()})),this.hasScrollTicking=!0))}},{key:"addDirection",value:function(){window.pageYOffset>this.instance.scroll.y?"down"!==this.instance.direction&&(this.instance.direction="down"):window.pageYOffset<this.instance.scroll.y&&"up"!==this.instance.direction&&(this.instance.direction="up")}},{key:"addSpeed",value:function(){window.pageYOffset!=this.instance.scroll.y?this.instance.speed=(window.pageYOffset-this.instance.scroll.y)/Math.max(1,Date.now()-this.speedTs):this.instance.speed=0}},{key:"resize",value:function(){Object.entries(this.els).length&&(this.windowHeight=window.innerHeight,this.updateElements())}},{key:"addElements",value:function(){var t=this;this.els={},this.el.querySelectorAll("[data-"+this.name+"]").forEach((function(e,i){e.getBoundingClientRect();var n,s,r,o=e.dataset[t.name+"Class"]||t.class,a="string"==typeof e.dataset[t.name+"Id"]?e.dataset[t.name+"Id"]:i,l="string"==typeof e.dataset[t.name+"Offset"]?e.dataset[t.name+"Offset"].split(","):t.offset,c=e.dataset[t.name+"Repeat"],d=e.dataset[t.name+"Call"],u=e.dataset[t.name+"Target"],h=(r=void 0!==u?document.querySelector("".concat(u)):e).getBoundingClientRect();n=h.top+t.instance.scroll.y,s=h.left+t.instance.scroll.x;var p=n+r.offsetHeight,f=s+r.offsetWidth;c="false"!=c&&(null!=c||t.repeat);var g=t.getRelativeOffset(l),m={el:e,targetEl:r,id:a,class:o,top:n+=g[0],bottom:p-=g[1],left:s,right:f,offset:l,progress:0,repeat:c,inView:!1,call:d};t.els[a]=m,e.classList.contains(o)&&t.setInView(t.els[a],a)}))}},{key:"updateElements",value:function(){var t=this;Object.entries(this.els).forEach((function(e){var i=g(e,2),n=i[0],s=i[1],r=s.targetEl.getBoundingClientRect().top+t.instance.scroll.y,o=r+s.targetEl.offsetHeight,a=t.getRelativeOffset(s.offset);t.els[n].top=r+a[0],t.els[n].bottom=o-a[1]})),this.hasScrollTicking=!1}},{key:"getRelativeOffset",value:function(t){var e=[0,0];if(t)for(var i=0;i<t.length;i++)"string"==typeof t[i]?t[i].includes("%")?e[i]=parseInt(t[i].replace("%","")*this.windowHeight/100):e[i]=parseInt(t[i]):e[i]=t[i];return e}},{key:"scrollTo",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=parseInt(e.offset)||0,n=!!e.callback&&e.callback;if("string"==typeof t){if("top"===t)t=this.html;else if("bottom"===t)t=this.html.offsetHeight-window.innerHeight;else if(!(t=document.querySelector(t)))return}else if("number"==typeof t)t=parseInt(t);else if(!t||!t.tagName)return void console.warn("`target` parameter is not valid");i="number"!=typeof t?t.getBoundingClientRect().top+i+this.instance.scroll.y:t+i;var s=function(){return parseInt(window.pageYOffset)===parseInt(i)};if(n){if(s())return void n();window.addEventListener("scroll",(function t(){s()&&(window.removeEventListener("scroll",t),n())}))}window.scrollTo({top:i,behavior:0===e.duration?"auto":"smooth"})}},{key:"update",value:function(){this.addElements(),this.detectElements()}},{key:"destroy",value:function(){f(d(i.prototype),"destroy",this).call(this),window.removeEventListener("scroll",this.checkScroll,!1)}}]),i}(w)),E=Object.getOwnPropertySymbols,C=Object.prototype.hasOwnProperty,k=Object.prototype.propertyIsEnumerable;var M=function(){try{if(!Object.assign)return!1;var t=new String("abc");if(t[5]="de","5"===Object.getOwnPropertyNames(t)[0])return!1;for(var e={},i=0;i<10;i++)e["_"+String.fromCharCode(i)]=i;if("0123456789"!==Object.getOwnPropertyNames(e).map((function(t){return e[t]})).join(""))return!1;var n={};return"abcdefghijklmnopqrst".split("").forEach((function(t){n[t]=t})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},n)).join("")}catch(t){return!1}}()?Object.assign:function(t,e){for(var i,n,s=function(t){if(null==t)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(t)}(t),r=1;r<arguments.length;r++){for(var o in i=Object(arguments[r]))C.call(i,o)&&(s[o]=i[o]);if(E){n=E(i);for(var a=0;a<n.length;a++)k.call(i,n[a])&&(s[n[a]]=i[n[a]])}}return s};function O(){}O.prototype={on:function(t,e,i){var n=this.e||(this.e={});return(n[t]||(n[t]=[])).push({fn:e,ctx:i}),this},once:function(t,e,i){var n=this;function s(){n.off(t,s),e.apply(i,arguments)}return s._=e,this.on(t,s,i)},emit:function(t){for(var e=[].slice.call(arguments,1),i=((this.e||(this.e={}))[t]||[]).slice(),n=0,s=i.length;n<s;n++)i[n].fn.apply(i[n].ctx,e);return this},off:function(t,e){var i=this.e||(this.e={}),n=i[t],s=[];if(n&&e)for(var r=0,o=n.length;r<o;r++)n[r].fn!==e&&n[r].fn._!==e&&s.push(n[r]);return s.length?i[t]=s:delete i[t],this}};var A=O,I=x((function(t,e){(function(){(null!==e?e:this).Lethargy=function(){function t(t,e,i,n){this.stability=null!=t?Math.abs(t):8,this.sensitivity=null!=e?1+Math.abs(e):100,this.tolerance=null!=i?1+Math.abs(i):1.1,this.delay=null!=n?n:150,this.lastUpDeltas=function(){var t,e,i;for(i=[],t=1,e=2*this.stability;1<=e?t<=e:t>=e;1<=e?t++:t--)i.push(null);return i}.call(this),this.lastDownDeltas=function(){var t,e,i;for(i=[],t=1,e=2*this.stability;1<=e?t<=e:t>=e;1<=e?t++:t--)i.push(null);return i}.call(this),this.deltasTimestamp=function(){var t,e,i;for(i=[],t=1,e=2*this.stability;1<=e?t<=e:t>=e;1<=e?t++:t--)i.push(null);return i}.call(this)}return t.prototype.check=function(t){var e;return null!=(t=t.originalEvent||t).wheelDelta?e=t.wheelDelta:null!=t.deltaY?e=-40*t.deltaY:null==t.detail&&0!==t.detail||(e=-40*t.detail),this.deltasTimestamp.push(Date.now()),this.deltasTimestamp.shift(),e>0?(this.lastUpDeltas.push(e),this.lastUpDeltas.shift(),this.isInertia(1)):(this.lastDownDeltas.push(e),this.lastDownDeltas.shift(),this.isInertia(-1))},t.prototype.isInertia=function(t){var e,i,n,s,r,o,a;return null===(e=-1===t?this.lastDownDeltas:this.lastUpDeltas)[0]?t:!(this.deltasTimestamp[2*this.stability-2]+this.delay>Date.now()&&e[0]===e[2*this.stability-1])&&(n=e.slice(0,this.stability),i=e.slice(this.stability,2*this.stability),a=n.reduce((function(t,e){return t+e})),r=i.reduce((function(t,e){return t+e})),o=a/n.length,s=r/i.length,Math.abs(o)<Math.abs(s*this.tolerance)&&this.sensitivity<Math.abs(s)&&t)},t.prototype.showLastUpDeltas=function(){return this.lastUpDeltas},t.prototype.showLastDownDeltas=function(){return this.lastDownDeltas},t}()}).call(_)})),P={hasWheelEvent:"onwheel"in document,hasMouseWheelEvent:"onmousewheel"in document,hasTouch:"ontouchstart"in window||window.TouchEvent||window.DocumentTouch&&document instanceof DocumentTouch,hasTouchWin:navigator.msMaxTouchPoints&&navigator.msMaxTouchPoints>1,hasPointer:!!window.navigator.msPointerEnabled,hasKeyDown:"onkeydown"in document,isFirefox:navigator.userAgent.indexOf("Firefox")>-1},L=Object.prototype.toString,D=Object.prototype.hasOwnProperty;function z(t,e){return function(){return t.apply(e,arguments)}}var B=I.Lethargy,R="virtualscroll",F=N,H=37,G=38,Y=39,V=40,j=32;function N(t){!function(t){if(!t)return console.warn("bindAll requires at least one argument.");var e=Array.prototype.slice.call(arguments,1);if(0===e.length)for(var i in t)D.call(t,i)&&"function"==typeof t[i]&&"[object Function]"==L.call(t[i])&&e.push(i);for(var n=0;n<e.length;n++){var s=e[n];t[s]=z(t[s],t)}}(this,"_onWheel","_onMouseWheel","_onTouchStart","_onTouchMove","_onKeyDown"),this.el=window,t&&t.el&&(this.el=t.el,delete t.el),this.options=M({mouseMultiplier:1,touchMultiplier:2,firefoxMultiplier:15,keyStep:120,preventTouch:!1,unpreventTouchClass:"vs-touchmove-allowed",limitInertia:!1,useKeyboard:!0,useTouch:!0},t),this.options.limitInertia&&(this._lethargy=new B),this._emitter=new A,this._event={y:0,x:0,deltaX:0,deltaY:0},this.touchStartX=null,this.touchStartY=null,this.bodyTouchAction=null,void 0!==this.options.passive&&(this.listenerOptions={passive:this.options.passive})}function W(t,e,i){return(1-i)*t+i*e}function X(t){var e={};if(window.getComputedStyle){var i=getComputedStyle(t),n=i.transform||i.webkitTransform||i.mozTransform,s=n.match(/^matrix3d\((.+)\)$/);return s?(e.x=s?parseFloat(s[1].split(", ")[12]):0,e.y=s?parseFloat(s[1].split(", ")[13]):0):(s=n.match(/^matrix\((.+)\)$/),e.x=s?parseFloat(s[1].split(", ")[4]):0,e.y=s?parseFloat(s[1].split(", ")[5]):0),e}}function $(t){for(var e=[];t&&t!==document;t=t.parentNode)e.push(t);return e}N.prototype._notify=function(t){var e=this._event;e.x+=e.deltaX,e.y+=e.deltaY,this._emitter.emit(R,{x:e.x,y:e.y,deltaX:e.deltaX,deltaY:e.deltaY,originalEvent:t})},N.prototype._onWheel=function(t){var e=this.options;if(!this._lethargy||!1!==this._lethargy.check(t)){var i=this._event;i.deltaX=t.wheelDeltaX||-1*t.deltaX,i.deltaY=t.wheelDeltaY||-1*t.deltaY,P.isFirefox&&1==t.deltaMode&&(i.deltaX*=e.firefoxMultiplier,i.deltaY*=e.firefoxMultiplier),i.deltaX*=e.mouseMultiplier,i.deltaY*=e.mouseMultiplier,this._notify(t)}},N.prototype._onMouseWheel=function(t){if(!this.options.limitInertia||!1!==this._lethargy.check(t)){var e=this._event;e.deltaX=t.wheelDeltaX?t.wheelDeltaX:0,e.deltaY=t.wheelDeltaY?t.wheelDeltaY:t.wheelDelta,this._notify(t)}},N.prototype._onTouchStart=function(t){var e=t.targetTouches?t.targetTouches[0]:t;this.touchStartX=e.pageX,this.touchStartY=e.pageY},N.prototype._onTouchMove=function(t){var e=this.options;e.preventTouch&&!t.target.classList.contains(e.unpreventTouchClass)&&t.preventDefault();var i=this._event,n=t.targetTouches?t.targetTouches[0]:t;i.deltaX=(n.pageX-this.touchStartX)*e.touchMultiplier,i.deltaY=(n.pageY-this.touchStartY)*e.touchMultiplier,this.touchStartX=n.pageX,this.touchStartY=n.pageY,this._notify(t)},N.prototype._onKeyDown=function(t){var e=this._event;e.deltaX=e.deltaY=0;var i=window.innerHeight-40;switch(t.keyCode){case H:case G:e.deltaY=this.options.keyStep;break;case Y:case V:e.deltaY=-this.options.keyStep;break;case t.shiftKey:e.deltaY=i;break;case j:e.deltaY=-i;break;default:return}this._notify(t)},N.prototype._bind=function(){P.hasWheelEvent&&this.el.addEventListener("wheel",this._onWheel,this.listenerOptions),P.hasMouseWheelEvent&&this.el.addEventListener("mousewheel",this._onMouseWheel,this.listenerOptions),P.hasTouch&&this.options.useTouch&&(this.el.addEventListener("touchstart",this._onTouchStart,this.listenerOptions),this.el.addEventListener("touchmove",this._onTouchMove,this.listenerOptions)),P.hasPointer&&P.hasTouchWin&&(this.bodyTouchAction=document.body.style.msTouchAction,document.body.style.msTouchAction="none",this.el.addEventListener("MSPointerDown",this._onTouchStart,!0),this.el.addEventListener("MSPointerMove",this._onTouchMove,!0)),P.hasKeyDown&&this.options.useKeyboard&&document.addEventListener("keydown",this._onKeyDown)},N.prototype._unbind=function(){P.hasWheelEvent&&this.el.removeEventListener("wheel",this._onWheel),P.hasMouseWheelEvent&&this.el.removeEventListener("mousewheel",this._onMouseWheel),P.hasTouch&&(this.el.removeEventListener("touchstart",this._onTouchStart),this.el.removeEventListener("touchmove",this._onTouchMove)),P.hasPointer&&P.hasTouchWin&&(document.body.style.msTouchAction=this.bodyTouchAction,this.el.removeEventListener("MSPointerDown",this._onTouchStart,!0),this.el.removeEventListener("MSPointerMove",this._onTouchMove,!0)),P.hasKeyDown&&this.options.useKeyboard&&document.removeEventListener("keydown",this._onKeyDown)},N.prototype.on=function(t,e){this._emitter.on(R,t,e);var i=this._emitter.e;i&&i[R]&&1===i[R].length&&this._bind()},N.prototype.off=function(t,e){this._emitter.off(R,t,e);var i=this._emitter.e;(!i[R]||i[R].length<=0)&&this._unbind()},N.prototype.reset=function(){var t=this._event;t.x=0,t.y=0},N.prototype.destroy=function(){this._emitter.off(),this._unbind()};var q=.1,U="function"==typeof Float32Array;function K(t,e){return 1-3*e+3*t}function J(t,e){return 3*e-6*t}function Z(t){return 3*t}function Q(t,e,i){return((K(e,i)*t+J(e,i))*t+Z(e))*t}function tt(t,e,i){return 3*K(e,i)*t*t+2*J(e,i)*t+Z(e)}function et(t){return t}var it=function(t,e,i,n){if(!(0<=t&&t<=1&&0<=i&&i<=1))throw new Error("bezier x values must be in [0, 1] range");if(t===e&&i===n)return et;for(var s=U?new Float32Array(11):new Array(11),r=0;r<11;++r)s[r]=Q(r*q,t,i);function o(e){for(var n=0,r=1;10!==r&&s[r]<=e;++r)n+=q;--r;var o=n+(e-s[r])/(s[r+1]-s[r])*q,a=tt(o,t,i);return a>=.001?function(t,e,i,n){for(var s=0;s<4;++s){var r=tt(e,i,n);if(0===r)return e;e-=(Q(e,i,n)-t)/r}return e}(e,o,t,i):0===a?o:function(t,e,i,n,s){var r,o,a=0;do{(r=Q(o=e+(i-e)/2,n,s)-t)>0?i=o:e=o}while(Math.abs(r)>1e-7&&++a<10);return o}(e,n,n+q,t,i)}return function(t){return 0===t?0:1===t?1:Q(o(t),e,n)}},nt=38,st=40,rt=32,ot=9,at=33,lt=34,ct=36,dt=35,ut=function(t){c(i,t);var e=p(i);function i(){var t,s=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return n(this,i),history.scrollRestoration&&(history.scrollRestoration="manual"),window.scrollTo(0,0),(t=e.call(this,s)).inertia&&(t.lerp=.1*t.inertia),t.isScrolling=!1,t.isDraggingScrollbar=!1,t.isTicking=!1,t.hasScrollTicking=!1,t.parallaxElements={},t.stop=!1,t.scrollbarContainer=s.scrollbarContainer,t.checkKey=t.checkKey.bind(h(t)),window.addEventListener("keydown",t.checkKey,!1),t}return r(i,[{key:"init",value:function(){var t=this;this.html.classList.add(this.smoothClass),this.html.setAttribute("data-".concat(this.name,"-direction"),this.direction),this.instance=l({delta:{x:this.initPosition.x,y:this.initPosition.y},scroll:{x:this.initPosition.x,y:this.initPosition.y}},this.instance),this.vs=new F({el:this.scrollFromAnywhere?document:this.el,mouseMultiplier:navigator.platform.indexOf("Win")>-1?1:.4,firefoxMultiplier:this.firefoxMultiplier,touchMultiplier:this.touchMultiplier,useKeyboard:!1,passive:!0}),this.vs.on((function(e){t.stop||t.isDraggingScrollbar||requestAnimationFrame((function(){t.updateDelta(e),t.isScrolling||t.startScrolling()}))})),this.setScrollLimit(),this.initScrollBar(),this.addSections(),this.addElements(),this.checkScroll(!0),this.transformElements(!0,!0),f(d(i.prototype),"init",this).call(this)}},{key:"setScrollLimit",value:function(){if(this.instance.limit.y=this.el.offsetHeight-this.windowHeight,"horizontal"===this.direction){for(var t=0,e=this.el.children,i=0;i<e.length;i++)t+=e[i].offsetWidth;this.instance.limit.x=t-this.windowWidth}}},{key:"startScrolling",value:function(){this.startScrollTs=Date.now(),this.isScrolling=!0,this.checkScroll(),this.html.classList.add(this.scrollingClass)}},{key:"stopScrolling",value:function(){cancelAnimationFrame(this.checkScrollRaf),this.startScrollTs=void 0,this.scrollToRaf&&(cancelAnimationFrame(this.scrollToRaf),this.scrollToRaf=null),this.isScrolling=!1,this.instance.scroll.y=Math.round(this.instance.scroll.y),this.html.classList.remove(this.scrollingClass)}},{key:"checkKey",value:function(t){var e=this;if(this.stop)t.keyCode==ot&&requestAnimationFrame((function(){e.html.scrollTop=0,document.body.scrollTop=0,e.html.scrollLeft=0,document.body.scrollLeft=0}));else{switch(t.keyCode){case ot:requestAnimationFrame((function(){e.html.scrollTop=0,document.body.scrollTop=0,e.html.scrollLeft=0,document.body.scrollLeft=0,e.scrollTo(document.activeElement,{offset:-window.innerHeight/2})}));break;case nt:this.isActiveElementScrollSensitive()&&(this.instance.delta[this.directionAxis]-=240);break;case st:this.isActiveElementScrollSensitive()&&(this.instance.delta[this.directionAxis]+=240);break;case at:this.instance.delta[this.directionAxis]-=window.innerHeight;break;case lt:this.instance.delta[this.directionAxis]+=window.innerHeight;break;case ct:this.instance.delta[this.directionAxis]-=this.instance.limit[this.directionAxis];break;case dt:this.instance.delta[this.directionAxis]+=this.instance.limit[this.directionAxis];break;case rt:this.isActiveElementScrollSensitive()&&(t.shiftKey?this.instance.delta[this.directionAxis]-=window.innerHeight:this.instance.delta[this.directionAxis]+=window.innerHeight);break;default:return}this.instance.delta[this.directionAxis]<0&&(this.instance.delta[this.directionAxis]=0),this.instance.delta[this.directionAxis]>this.instance.limit[this.directionAxis]&&(this.instance.delta[this.directionAxis]=this.instance.limit[this.directionAxis]),this.stopScrolling(),this.isScrolling=!0,this.checkScroll(),this.html.classList.add(this.scrollingClass)}}},{key:"isActiveElementScrollSensitive",value:function(){return!(document.activeElement instanceof HTMLInputElement||document.activeElement instanceof HTMLTextAreaElement||document.activeElement instanceof HTMLButtonElement||document.activeElement instanceof HTMLSelectElement)}},{key:"checkScroll",value:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(e||this.isScrolling||this.isDraggingScrollbar){this.hasScrollTicking||(this.checkScrollRaf=requestAnimationFrame((function(){return t.checkScroll()})),this.hasScrollTicking=!0),this.updateScroll();var n=Math.abs(this.instance.delta[this.directionAxis]-this.instance.scroll[this.directionAxis]),s=Date.now()-this.startScrollTs;if(!this.animatingScroll&&s>100&&(n<.5&&0!=this.instance.delta[this.directionAxis]||n<.5&&0==this.instance.delta[this.directionAxis])&&this.stopScrolling(),Object.entries(this.sections).forEach((function(i){var n=g(i,2),s=(n[0],n[1]);s.persistent||t.instance.scroll[t.directionAxis]>s.offset[t.directionAxis]&&t.instance.scroll[t.directionAxis]<s.limit[t.directionAxis]?("horizontal"===t.direction?t.transform(s.el,-t.instance.scroll[t.directionAxis],0):t.transform(s.el,0,-t.instance.scroll[t.directionAxis]),s.inView||(s.inView=!0,s.el.style.opacity=1,s.el.style.pointerEvents="all",s.el.setAttribute("data-".concat(t.name,"-section-inview"),""))):((s.inView||e)&&(s.inView=!1,s.el.style.opacity=0,s.el.style.pointerEvents="none",s.el.removeAttribute("data-".concat(t.name,"-section-inview"))),t.transform(s.el,0,0))})),this.getDirection&&this.addDirection(),this.getSpeed&&(this.addSpeed(),this.speedTs=Date.now()),this.detectElements(),this.transformElements(),this.hasScrollbar){var r=this.instance.scroll[this.directionAxis]/this.instance.limit[this.directionAxis]*this.scrollBarLimit[this.directionAxis];"horizontal"===this.direction?this.transform(this.scrollbarThumb,r,0):this.transform(this.scrollbarThumb,0,r)}f(d(i.prototype),"checkScroll",this).call(this),this.hasScrollTicking=!1}}},{key:"resize",value:function(){this.windowHeight=window.innerHeight,this.windowWidth=window.innerWidth,this.checkContext(),this.windowMiddle={x:this.windowWidth/2,y:this.windowHeight/2},this.update()}},{key:"updateDelta",value:function(t){var e,i=this[this.context]&&this[this.context].gestureDirection?this[this.context].gestureDirection:this.gestureDirection;e="both"===i?t.deltaX+t.deltaY:"vertical"===i?t.deltaY:"horizontal"===i?t.deltaX:t.deltaY,this.instance.delta[this.directionAxis]-=e*this.multiplier,this.instance.delta[this.directionAxis]<0&&(this.instance.delta[this.directionAxis]=0),this.instance.delta[this.directionAxis]>this.instance.limit[this.directionAxis]&&(this.instance.delta[this.directionAxis]=this.instance.limit[this.directionAxis])}},{key:"updateScroll",value:function(t){this.isScrolling||this.isDraggingScrollbar?this.instance.scroll[this.directionAxis]=W(this.instance.scroll[this.directionAxis],this.instance.delta[this.directionAxis],this.lerp):this.instance.scroll[this.directionAxis]>this.instance.limit[this.directionAxis]?this.setScroll(this.instance.scroll[this.directionAxis],this.instance.limit[this.directionAxis]):this.instance.scroll.y<0?this.setScroll(this.instance.scroll[this.directionAxis],0):this.setScroll(this.instance.scroll[this.directionAxis],this.instance.delta[this.directionAxis])}},{key:"addDirection",value:function(){this.instance.delta.y>this.instance.scroll.y?"down"!==this.instance.direction&&(this.instance.direction="down"):this.instance.delta.y<this.instance.scroll.y&&"up"!==this.instance.direction&&(this.instance.direction="up"),this.instance.delta.x>this.instance.scroll.x?"right"!==this.instance.direction&&(this.instance.direction="right"):this.instance.delta.x<this.instance.scroll.x&&"left"!==this.instance.direction&&(this.instance.direction="left")}},{key:"addSpeed",value:function(){this.instance.delta[this.directionAxis]!=this.instance.scroll[this.directionAxis]?this.instance.speed=(this.instance.delta[this.directionAxis]-this.instance.scroll[this.directionAxis])/Math.max(1,Date.now()-this.speedTs):this.instance.speed=0}},{key:"initScrollBar",value:function(){if(this.scrollbar=document.createElement("span"),this.scrollbarThumb=document.createElement("span"),this.scrollbar.classList.add("".concat(this.scrollbarClass)),this.scrollbarThumb.classList.add("".concat(this.scrollbarClass,"_thumb")),this.scrollbar.append(this.scrollbarThumb),this.scrollbarContainer?this.scrollbarContainer.append(this.scrollbar):document.body.append(this.scrollbar),this.getScrollBar=this.getScrollBar.bind(this),this.releaseScrollBar=this.releaseScrollBar.bind(this),this.moveScrollBar=this.moveScrollBar.bind(this),this.scrollbarThumb.addEventListener("mousedown",this.getScrollBar),window.addEventListener("mouseup",this.releaseScrollBar),window.addEventListener("mousemove",this.moveScrollBar),this.hasScrollbar=!1,"horizontal"==this.direction){if(this.instance.limit.x+this.windowWidth<=this.windowWidth)return}else if(this.instance.limit.y+this.windowHeight<=this.windowHeight)return;this.hasScrollbar=!0,this.scrollbarBCR=this.scrollbar.getBoundingClientRect(),this.scrollbarHeight=this.scrollbarBCR.height,this.scrollbarWidth=this.scrollbarBCR.width,"horizontal"===this.direction?this.scrollbarThumb.style.width="".concat(this.scrollbarWidth*this.scrollbarWidth/(this.instance.limit.x+this.scrollbarWidth),"px"):this.scrollbarThumb.style.height="".concat(this.scrollbarHeight*this.scrollbarHeight/(this.instance.limit.y+this.scrollbarHeight),"px"),this.scrollbarThumbBCR=this.scrollbarThumb.getBoundingClientRect(),this.scrollBarLimit={x:this.scrollbarWidth-this.scrollbarThumbBCR.width,y:this.scrollbarHeight-this.scrollbarThumbBCR.height}}},{key:"reinitScrollBar",value:function(){if(this.hasScrollbar=!1,"horizontal"==this.direction){if(this.instance.limit.x+this.windowWidth<=this.windowWidth)return}else if(this.instance.limit.y+this.windowHeight<=this.windowHeight)return;this.hasScrollbar=!0,this.scrollbarBCR=this.scrollbar.getBoundingClientRect(),this.scrollbarHeight=this.scrollbarBCR.height,this.scrollbarWidth=this.scrollbarBCR.width,"horizontal"===this.direction?this.scrollbarThumb.style.width="".concat(this.scrollbarWidth*this.scrollbarWidth/(this.instance.limit.x+this.scrollbarWidth),"px"):this.scrollbarThumb.style.height="".concat(this.scrollbarHeight*this.scrollbarHeight/(this.instance.limit.y+this.scrollbarHeight),"px"),this.scrollbarThumbBCR=this.scrollbarThumb.getBoundingClientRect(),this.scrollBarLimit={x:this.scrollbarWidth-this.scrollbarThumbBCR.width,y:this.scrollbarHeight-this.scrollbarThumbBCR.height}}},{key:"destroyScrollBar",value:function(){this.scrollbarThumb.removeEventListener("mousedown",this.getScrollBar),window.removeEventListener("mouseup",this.releaseScrollBar),window.removeEventListener("mousemove",this.moveScrollBar),this.scrollbar.remove()}},{key:"getScrollBar",value:function(t){this.isDraggingScrollbar=!0,this.checkScroll(),this.html.classList.remove(this.scrollingClass),this.html.classList.add(this.draggingClass)}},{key:"releaseScrollBar",value:function(t){this.isDraggingScrollbar=!1,this.isScrolling&&this.html.classList.add(this.scrollingClass),this.html.classList.remove(this.draggingClass)}},{key:"moveScrollBar",value:function(t){var e=this;this.isDraggingScrollbar&&requestAnimationFrame((function(){var i=100*(t.clientX-e.scrollbarBCR.left)/e.scrollbarWidth*e.instance.limit.x/100,n=100*(t.clientY-e.scrollbarBCR.top)/e.scrollbarHeight*e.instance.limit.y/100;n>0&&n<e.instance.limit.y&&(e.instance.delta.y=n),i>0&&i<e.instance.limit.x&&(e.instance.delta.x=i)}))}},{key:"addElements",value:function(){var t=this;this.els={},this.parallaxElements={},this.el.querySelectorAll("[data-".concat(this.name,"]")).forEach((function(e,i){var n,s,r,o=$(e),a=Object.entries(t.sections).map((function(t){var e=g(t,2);e[0];return e[1]})).find((function(t){return o.includes(t.el)})),l=e.dataset[t.name+"Class"]||t.class,c="string"==typeof e.dataset[t.name+"Id"]?e.dataset[t.name+"Id"]:"el"+i,d=e.dataset[t.name+"Repeat"],u=e.dataset[t.name+"Call"],h=e.dataset[t.name+"Position"],p=e.dataset[t.name+"Delay"],f=e.dataset[t.name+"Direction"],m="string"==typeof e.dataset[t.name+"Sticky"],v=!!e.dataset[t.name+"Speed"]&&parseFloat(e.dataset[t.name+"Speed"])/10,y="string"==typeof e.dataset[t.name+"Offset"]?e.dataset[t.name+"Offset"].split(","):t.offset,b=e.dataset[t.name+"Target"],w=(r=void 0!==b?document.querySelector("".concat(b)):e).getBoundingClientRect();null===a||a.inView?(n=w.top+t.instance.scroll.y-X(r).y,s=w.left+t.instance.scroll.x-X(r).x):(n=w.top-X(a.el).y-X(r).y,s=w.left-X(a.el).x-X(r).x);var _=n+r.offsetHeight,x=s+r.offsetWidth,T={x:(x-s)/2+s,y:(_-n)/2+n};if(m){var S=e.getBoundingClientRect(),E=S.top,C=S.left,k={x:C-s,y:E-n};n+=window.innerHeight,s+=window.innerWidth,_=E+r.offsetHeight-e.offsetHeight-k[t.directionAxis],T={x:((x=C+r.offsetWidth-e.offsetWidth-k[t.directionAxis])-s)/2+s,y:(_-n)/2+n}}d="false"!=d&&(null!=d||t.repeat);var M=[0,0];if(y)if("horizontal"===t.direction){for(var O=0;O<y.length;O++)"string"==typeof y[O]?y[O].includes("%")?M[O]=parseInt(y[O].replace("%","")*t.windowWidth/100):M[O]=parseInt(y[O]):M[O]=y[O];s+=M[0],x-=M[1]}else{for(O=0;O<y.length;O++)"string"==typeof y[O]?y[O].includes("%")?M[O]=parseInt(y[O].replace("%","")*t.windowHeight/100):M[O]=parseInt(y[O]):M[O]=y[O];n+=M[0],_-=M[1]}var A={el:e,id:c,class:l,section:a,top:n,middle:T,bottom:_,left:s,right:x,offset:y,progress:0,repeat:d,inView:!1,call:u,speed:v,delay:p,position:h,target:r,direction:f,sticky:m};t.els[c]=A,e.classList.contains(l)&&t.setInView(t.els[c],c),(!1!==v||m)&&(t.parallaxElements[c]=A)}))}},{key:"addSections",value:function(){var t=this;this.sections={};var e=this.el.querySelectorAll("[data-".concat(this.name,"-section]"));0===e.length&&(e=[this.el]),e.forEach((function(e,i){var n="string"==typeof e.dataset[t.name+"Id"]?e.dataset[t.name+"Id"]:"section"+i,s=e.getBoundingClientRect(),r={x:s.left-1.5*window.innerWidth-X(e).x,y:s.top-1.5*window.innerHeight-X(e).y},o={x:r.x+s.width+2*window.innerWidth,y:r.y+s.height+2*window.innerHeight},a="string"==typeof e.dataset[t.name+"Persistent"];e.setAttribute("data-scroll-section-id",n);var l={el:e,offset:r,limit:o,inView:!1,persistent:a,id:n};t.sections[n]=l}))}},{key:"transform",value:function(t,e,i,n){var s;if(n){var r=X(t),o=W(r.x,e,n),a=W(r.y,i,n);s="matrix3d(1,0,0.00,0,0.00,1,0.00,0,0,0,1,0,".concat(o,",").concat(a,",0,1)")}else s="matrix3d(1,0,0.00,0,0.00,1,0.00,0,0,0,1,0,".concat(e,",").concat(i,",0,1)");t.style.webkitTransform=s,t.style.msTransform=s,t.style.transform=s}},{key:"transformElements",value:function(t){var e=this,i=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=this.instance.scroll.x+this.windowWidth,s=this.instance.scroll.y+this.windowHeight,r={x:this.instance.scroll.x+this.windowMiddle.x,y:this.instance.scroll.y+this.windowMiddle.y};Object.entries(this.parallaxElements).forEach((function(o){var a=g(o,2),l=(a[0],a[1]),c=!1;if(t&&(c=0),l.inView||i)switch(l.position){case"top":case"left":c=e.instance.scroll[e.directionAxis]*-l.speed;break;case"elementTop":c=(s-l.top)*-l.speed;break;case"bottom":c=(e.instance.limit[e.directionAxis]-s+e.windowHeight)*l.speed;break;case"elementLeft":c=(n-l.left)*-l.speed;break;case"right":c=(e.instance.limit[e.directionAxis]-n+e.windowHeight)*l.speed;break;default:c=(r[e.directionAxis]-l.middle[e.directionAxis])*-l.speed}l.sticky&&(c=l.inView?"horizontal"===e.direction?e.instance.scroll.x-l.left+window.innerWidth:e.instance.scroll.y-l.top+window.innerHeight:"horizontal"===e.direction?e.instance.scroll.x<l.left-window.innerWidth&&e.instance.scroll.x<l.left-window.innerWidth/2?0:e.instance.scroll.x>l.right&&e.instance.scroll.x>l.right+100&&l.right-l.left+window.innerWidth:e.instance.scroll.y<l.top-window.innerHeight&&e.instance.scroll.y<l.top-window.innerHeight/2?0:e.instance.scroll.y>l.bottom&&e.instance.scroll.y>l.bottom+100&&l.bottom-l.top+window.innerHeight),!1!==c&&("horizontal"===l.direction||"horizontal"===e.direction&&"vertical"!==l.direction?e.transform(l.el,c,0,!t&&l.delay):e.transform(l.el,0,c,!t&&l.delay))}))}},{key:"scrollTo",value:function(t){var e=this,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=parseInt(i.offset)||0,s=isNaN(parseInt(i.duration))?1e3:parseInt(i.duration),r=i.easing||[.25,0,.35,1],o=!!i.disableLerp,a=!!i.callback&&i.callback;if(r=it.apply(void 0,m(r)),"string"==typeof t){if("top"===t)t=0;else if("bottom"===t)t=this.instance.limit.y;else if("left"===t)t=0;else if("right"===t)t=this.instance.limit.x;else if(!(t=document.querySelector(t)))return}else if("number"==typeof t)t=parseInt(t);else if(!t||!t.tagName)return void console.warn("`target` parameter is not valid");if("number"!=typeof t){if(!$(t).includes(this.el))return;var l=t.getBoundingClientRect(),c=l.top,d=l.left,u=$(t).find((function(t){return Object.entries(e.sections).map((function(t){var e=g(t,2);e[0];return e[1]})).find((function(e){return e.el==t}))})),h=0;h=u?X(u)[this.directionAxis]:-this.instance.scroll[this.directionAxis],n="horizontal"===this.direction?d+n-h:c+n-h}else n=t+n;var p=parseFloat(this.instance.delta[this.directionAxis]),f=Math.max(0,Math.min(n,this.instance.limit[this.directionAxis]))-p,v=function(t){o?"horizontal"===e.direction?e.setScroll(p+f*t,e.instance.delta.y):e.setScroll(e.instance.delta.x,p+f*t):e.instance.delta[e.directionAxis]=p+f*t};this.animatingScroll=!0,this.stopScrolling(),this.startScrolling();var y=Date.now();!function t(){var i=(Date.now()-y)/s;i>1?(v(1),e.animatingScroll=!1,0==s&&e.update(),a&&a()):(e.scrollToRaf=requestAnimationFrame(t),v(r(i)))}()}},{key:"update",value:function(){this.setScrollLimit(),this.addSections(),this.addElements(),this.detectElements(),this.updateScroll(),this.transformElements(!0),this.reinitScrollBar(),this.checkScroll(!0)}},{key:"startScroll",value:function(){this.stop=!1}},{key:"stopScroll",value:function(){this.stop=!0}},{key:"setScroll",value:function(t,e){this.instance=l(l({},this.instance),{},{scroll:{x:t,y:e},delta:{x:t,y:e},speed:0})}},{key:"destroy",value:function(){f(d(i.prototype),"destroy",this).call(this),this.stopScrolling(),this.html.classList.remove(this.smoothClass),this.vs.destroy(),this.destroyScrollBar(),window.removeEventListener("keydown",this.checkKey,!1)}}]),i}(w);const ht=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};n(this,t),this.options=e,Object.assign(this,b,e),this.smartphone=b.smartphone,e.smartphone&&Object.assign(this.smartphone,e.smartphone),this.tablet=b.tablet,e.tablet&&Object.assign(this.tablet,e.tablet),this.smooth||"horizontal"!=this.direction||console.warn("🚨 `smooth:false` & `horizontal` direction are not yet compatible"),this.tablet.smooth||"horizontal"!=this.tablet.direction||console.warn("🚨 `smooth:false` & `horizontal` direction are not yet compatible (tablet)"),this.smartphone.smooth||"horizontal"!=this.smartphone.direction||console.warn("🚨 `smooth:false` & `horizontal` direction are not yet compatible (smartphone)"),this.init()}return r(t,[{key:"init",value:function(){if(this.options.isMobile=/Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||"MacIntel"===navigator.platform&&navigator.maxTouchPoints>1||window.innerWidth<this.tablet.breakpoint,this.options.isTablet=this.options.isMobile&&window.innerWidth>=this.tablet.breakpoint,this.smooth&&!this.options.isMobile||this.tablet.smooth&&this.options.isTablet||this.smartphone.smooth&&this.options.isMobile&&!this.options.isTablet?this.scroll=new ut(this.options):this.scroll=new S(this.options),this.scroll.init(),window.location.hash){var t=window.location.hash.slice(1,window.location.hash.length),e=document.getElementById(t);e&&this.scroll.scrollTo(e)}}},{key:"update",value:function(){this.scroll.update()}},{key:"start",value:function(){this.scroll.startScroll()}},{key:"stop",value:function(){this.scroll.stopScroll()}},{key:"scrollTo",value:function(t,e){this.scroll.scrollTo(t,e)}},{key:"setScroll",value:function(t,e){this.scroll.setScroll(t,e)}},{key:"on",value:function(t,e){this.scroll.setEvents(t,e)}},{key:"off",value:function(t,e){this.scroll.unsetEvents(t,e)}},{key:"destroy",value:function(){this.scroll.destroy()}}]),t}()}},e={};function i(n){var s=e[n];if(void 0!==s)return s.exports;var r=e[n]={exports:{}};return t[n](r,r.exports,i),r.exports}i.d=(t,e)=>{for(var n in e)i.o(e,n)&&!i.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};i(1135);var n=function(){return n=Object.assign||function(t){for(var e,i=1,n=arguments.length;i<n;i++)for(var s in e=arguments[i])Object.prototype.hasOwnProperty.call(e,s)&&(t[s]=e[s]);return t},n.apply(this,arguments)};var s="lgAfterAppendSlide",r="lgInit",o="lgHasVideo",a="lgContainerResize",l="lgUpdateSlides",c="lgAfterAppendSubHtml",d="lgBeforeOpen",u="lgAfterOpen",h="lgSlideItemLoad",p="lgBeforeSlide",f="lgAfterSlide",g="lgPosterClick",m="lgDragStart",v="lgDragMove",y="lgDragEnd",b="lgBeforeNextSlide",w="lgBeforePrevSlide",_="lgBeforeClose",x="lgAfterClose",T={mode:"lg-slide",easing:"ease",speed:400,licenseKey:"0000-0000-000-0000",height:"100%",width:"100%",addClass:"",startClass:"lg-start-zoom",backdropDuration:300,container:"",startAnimationDuration:400,zoomFromOrigin:!0,hideBarsDelay:0,showBarsAfter:1e4,slideDelay:0,supportLegacyBrowser:!0,allowMediaOverlap:!1,videoMaxSize:"1280-720",loadYouTubePoster:!0,defaultCaptionHeight:0,ariaLabelledby:"",ariaDescribedby:"",resetScrollPosition:!0,hideScrollbar:!1,closable:!0,swipeToClose:!0,closeOnTap:!0,showCloseIcon:!0,showMaximizeIcon:!1,loop:!0,escKey:!0,keyPress:!0,trapFocus:!0,controls:!0,slideEndAnimation:!0,hideControlOnEnd:!1,mousewheel:!1,getCaptionFromTitleOrAlt:!0,appendSubHtmlTo:".lg-sub-html",subHtmlSelectorRelative:!1,preload:2,numberOfSlideItemsInDom:10,selector:"",selectWithin:"",nextHtml:"",prevHtml:"",index:0,iframeWidth:"100%",iframeHeight:"100%",iframeMaxWidth:"100%",iframeMaxHeight:"100%",download:!0,counter:!0,appendCounterTo:".lg-toolbar",swipeThreshold:50,enableSwipe:!0,enableDrag:!0,dynamic:!1,dynamicEl:[],extraProps:[],exThumbImage:"",isMobile:void 0,mobileSettings:{controls:!1,showCloseIcon:!1,download:!1},plugins:[],strings:{closeGallery:"Close gallery",toggleMaximize:"Toggle maximize",previousSlide:"Previous slide",nextSlide:"Next slide",download:"Download",playVideo:"Play video",mediaLoadingFailed:"Oops... Failed to load content..."}};var S=function(){function t(t){return this.cssVenderPrefixes=["TransitionDuration","TransitionTimingFunction","Transform","Transition"],this.selector=this._getSelector(t),this.firstElement=this._getFirstEl(),this}return t.generateUUID=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(t){var e=16*Math.random()|0;return("x"==t?e:3&e|8).toString(16)}))},t.prototype._getSelector=function(t,e){return void 0===e&&(e=document),"string"!=typeof t?t:(e=e||document,"#"===t.substring(0,1)?e.querySelector(t):e.querySelectorAll(t))},t.prototype._each=function(t){return this.selector?(void 0!==this.selector.length?[].forEach.call(this.selector,t):t(this.selector,0),this):this},t.prototype._setCssVendorPrefix=function(t,e,i){var n=e.replace(/-([a-z])/gi,(function(t,e){return e.toUpperCase()}));-1!==this.cssVenderPrefixes.indexOf(n)?(t.style[n.charAt(0).toLowerCase()+n.slice(1)]=i,t.style["webkit"+n]=i,t.style["moz"+n]=i,t.style["ms"+n]=i,t.style["o"+n]=i):t.style[n]=i},t.prototype._getFirstEl=function(){return this.selector&&void 0!==this.selector.length?this.selector[0]:this.selector},t.prototype.isEventMatched=function(t,e){var i=e.split(".");return t.split(".").filter((function(t){return t})).every((function(t){return-1!==i.indexOf(t)}))},t.prototype.attr=function(t,e){return void 0===e?this.firstElement?this.firstElement.getAttribute(t):"":(this._each((function(i){i.setAttribute(t,e)})),this)},t.prototype.find=function(t){return E(this._getSelector(t,this.selector))},t.prototype.first=function(){return this.selector&&void 0!==this.selector.length?E(this.selector[0]):E(this.selector)},t.prototype.eq=function(t){return E(this.selector[t])},t.prototype.parent=function(){return E(this.selector.parentElement)},t.prototype.get=function(){return this._getFirstEl()},t.prototype.removeAttr=function(t){var e=t.split(" ");return this._each((function(t){e.forEach((function(e){return t.removeAttribute(e)}))})),this},t.prototype.wrap=function(t){if(!this.firstElement)return this;var e=document.createElement("div");return e.className=t,this.firstElement.parentNode.insertBefore(e,this.firstElement),this.firstElement.parentNode.removeChild(this.firstElement),e.appendChild(this.firstElement),this},t.prototype.addClass=function(t){return void 0===t&&(t=""),this._each((function(e){t.split(" ").forEach((function(t){t&&e.classList.add(t)}))})),this},t.prototype.removeClass=function(t){return this._each((function(e){t.split(" ").forEach((function(t){t&&e.classList.remove(t)}))})),this},t.prototype.hasClass=function(t){return!!this.firstElement&&this.firstElement.classList.contains(t)},t.prototype.hasAttribute=function(t){return!!this.firstElement&&this.firstElement.hasAttribute(t)},t.prototype.toggleClass=function(t){return this.firstElement?(this.hasClass(t)?this.removeClass(t):this.addClass(t),this):this},t.prototype.css=function(t,e){var i=this;return this._each((function(n){i._setCssVendorPrefix(n,t,e)})),this},t.prototype.on=function(e,i){var n=this;return this.selector?(e.split(" ").forEach((function(e){Array.isArray(t.eventListeners[e])||(t.eventListeners[e]=[]),t.eventListeners[e].push(i),n.selector.addEventListener(e.split(".")[0],i)})),this):this},t.prototype.once=function(t,e){var i=this;return this.on(t,(function(){i.off(t),e(t)})),this},t.prototype.off=function(e){var i=this;return this.selector?(Object.keys(t.eventListeners).forEach((function(n){i.isEventMatched(e,n)&&(t.eventListeners[n].forEach((function(t){i.selector.removeEventListener(n.split(".")[0],t)})),t.eventListeners[n]=[])})),this):this},t.prototype.trigger=function(t,e){if(!this.firstElement)return this;var i=new CustomEvent(t.split(".")[0],{detail:e||null});return this.firstElement.dispatchEvent(i),this},t.prototype.load=function(t){var e=this;return fetch(t).then((function(t){return t.text()})).then((function(t){e.selector.innerHTML=t})),this},t.prototype.html=function(t){return void 0===t?this.firstElement?this.firstElement.innerHTML:"":(this._each((function(e){e.innerHTML=t})),this)},t.prototype.append=function(t){return this._each((function(e){"string"==typeof t?e.insertAdjacentHTML("beforeend",t):e.appendChild(t)})),this},t.prototype.prepend=function(t){return this._each((function(e){e.insertAdjacentHTML("afterbegin",t)})),this},t.prototype.remove=function(){return this._each((function(t){t.parentNode.removeChild(t)})),this},t.prototype.empty=function(){return this._each((function(t){t.innerHTML=""})),this},t.prototype.scrollTop=function(t){return void 0!==t?(document.body.scrollTop=t,document.documentElement.scrollTop=t,this):window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0},t.prototype.scrollLeft=function(t){return void 0!==t?(document.body.scrollLeft=t,document.documentElement.scrollLeft=t,this):window.pageXOffset||document.documentElement.scrollLeft||document.body.scrollLeft||0},t.prototype.offset=function(){if(!this.firstElement)return{left:0,top:0};var t=this.firstElement.getBoundingClientRect(),e=E("body").style().marginLeft;return{left:t.left-parseFloat(e)+this.scrollLeft(),top:t.top+this.scrollTop()}},t.prototype.style=function(){return this.firstElement?this.firstElement.currentStyle||window.getComputedStyle(this.firstElement):{}},t.prototype.width=function(){var t=this.style();return this.firstElement.clientWidth-parseFloat(t.paddingLeft)-parseFloat(t.paddingRight)},t.prototype.height=function(){var t=this.style();return this.firstElement.clientHeight-parseFloat(t.paddingTop)-parseFloat(t.paddingBottom)},t.eventListeners={},t}();function E(t){return function(){if("function"==typeof window.CustomEvent)return!1;window.CustomEvent=function(t,e){e=e||{bubbles:!1,cancelable:!1,detail:null};var i=document.createEvent("CustomEvent");return i.initCustomEvent(t,e.bubbles,e.cancelable,e.detail),i}}(),Element.prototype.matches||(Element.prototype.matches=Element.prototype.msMatchesSelector||Element.prototype.webkitMatchesSelector),new S(t)}var C=["src","sources","subHtml","subHtmlUrl","html","video","poster","slideName","responsive","srcset","sizes","iframe","downloadUrl","download","width","facebookShareUrl","tweetText","iframeTitle","twitterShareUrl","pinterestShareUrl","pinterestText","fbHtml","disqusIdentifier","disqusUrl"];function k(t){return"href"===t?"src":t=(t=(t=t.replace("data-","")).charAt(0).toLowerCase()+t.slice(1)).replace(/-([a-z])/g,(function(t){return t[1].toUpperCase()}))}var M=function(t,e,i,n){void 0===i&&(i=0);var s=E(t).attr("data-lg-size")||n;if(s){var r=s.split(",");if(r[1])for(var o=window.innerWidth,a=0;a<r.length;a++){var l=r[a];if(parseInt(l.split("-")[2],10)>o){s=l;break}a===r.length-1&&(s=l)}var c=s.split("-"),d=parseInt(c[0],10),u=parseInt(c[1],10),h=e.width(),p=e.height()-i,f=Math.min(h,d),g=Math.min(p,u),m=Math.min(f/d,g/u);return{width:d*m,height:u*m}}},O=function(t,e,i,n,s){if(s){var r=E(t).find("img").first();if(r.get()){var o=e.get().getBoundingClientRect(),a=o.width,l=e.height()-(i+n),c=r.width(),d=r.height(),u=r.style(),h=(a-c)/2-r.offset().left+(parseFloat(u.paddingLeft)||0)+(parseFloat(u.borderLeft)||0)+E(window).scrollLeft()+o.left,p=(l-d)/2-r.offset().top+(parseFloat(u.paddingTop)||0)+(parseFloat(u.borderTop)||0)+E(window).scrollTop()+i;return"translate3d("+(h*=-1)+"px, "+(p*=-1)+"px, 0) scale3d("+c/s.width+", "+d/s.height+", 1)"}}},A=function(t,e,i,n,s,r){return'<div class="lg-video-cont lg-has-iframe" style="width:'+t+"; max-width:"+i+"; height: "+e+"; max-height:"+n+'">\n                    <iframe class="lg-object" frameborder="0" '+(r?'title="'+r+'"':"")+' src="'+s+'"  allowfullscreen="true"></iframe>\n                </div>'},I=function(t,e,i,n,s,r){var o="<img "+i+" "+(n?'srcset="'+n+'"':"")+"  "+(s?'sizes="'+s+'"':"")+' class="lg-object lg-image" data-index="'+t+'" src="'+e+'" />',a="";r&&(a=("string"==typeof r?JSON.parse(r):r).map((function(t){var e="";return Object.keys(t).forEach((function(i){e+=" "+i+'="'+t[i]+'"'})),"<source "+e+"></source>"})));return""+a+o},P=function(t){for(var e=[],i=[],n="",s=0;s<t.length;s++){var r=t[s].split(" ");""===r[0]&&r.splice(0,1),i.push(r[0]),e.push(r[1])}for(var o=window.innerWidth,a=0;a<e.length;a++)if(parseInt(e[a],10)>o){n=i[a];break}return n},L=function(t){return!!t&&(!!t.complete&&0!==t.naturalWidth)},D=function(t,e,i,n,s){return'<div class="lg-video-cont '+(s&&s.youtube?"lg-has-youtube":s&&s.vimeo?"lg-has-vimeo":"lg-has-html5")+'" style="'+i+'">\n                <div class="lg-video-play-button">\n                <svg\n                    viewBox="0 0 20 20"\n                    preserveAspectRatio="xMidYMid"\n                    focusable="false"\n                    aria-labelledby="'+n+'"\n                    role="img"\n                    class="lg-video-play-icon"\n                >\n                    <title>'+n+'</title>\n                    <polygon class="lg-video-play-icon-inner" points="1,0 20,10 1,20"></polygon>\n                </svg>\n                <svg class="lg-video-play-icon-bg" viewBox="0 0 50 50" focusable="false">\n                    <circle cx="50%" cy="50%" r="20"></circle></svg>\n                <svg class="lg-video-play-icon-circle" viewBox="0 0 50 50" focusable="false">\n                    <circle cx="50%" cy="50%" r="20"></circle>\n                </svg>\n            </div>\n            '+(e||"")+'\n            <img class="lg-object lg-video-poster" src="'+t+'" />\n        </div>'},z=function(t){var e=t.querySelectorAll('a[href]:not([disabled]), button:not([disabled]), textarea:not([disabled]), input[type="text"]:not([disabled]), input[type="radio"]:not([disabled]), input[type="checkbox"]:not([disabled]), select:not([disabled])');return[].filter.call(e,(function(t){var e=window.getComputedStyle(t);return"none"!==e.display&&"hidden"!==e.visibility}))},B=function(t,e,i,n){var s=[],r=function(){for(var t=0,e=0,i=arguments.length;e<i;e++)t+=arguments[e].length;var n=Array(t),s=0;for(e=0;e<i;e++)for(var r=arguments[e],o=0,a=r.length;o<a;o++,s++)n[s]=r[o];return n}(C,e);return[].forEach.call(t,(function(t){for(var e={},o=0;o<t.attributes.length;o++){var a=t.attributes[o];if(a.specified){var l=k(a.name),c="";r.indexOf(l)>-1&&(c=l),c&&(e[c]=a.value)}}var d=E(t),u=d.find("img").first().attr("alt"),h=d.attr("title"),p=n?d.attr(n):d.find("img").first().attr("src");e.thumb=p,i&&!e.subHtml&&(e.subHtml=h||u||""),e.alt=u||h||"",s.push(e)})),s},R=function(){return/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)},F=function(t,e,i){if(!t)return e?{html5:!0}:void console.error("lightGallery :- data-src is not provided on slide item "+(i+1)+". Please make sure the selector property is properly configured. More info - https://www.lightgalleryjs.com/demos/html-markup/");var n=t.match(/\/\/(?:www\.)?youtu(?:\.be|be\.com|be-nocookie\.com)\/(?:watch\?v=|embed\/)?([a-z0-9\-\_\%]+)([\&|?][\S]*)*/i),s=t.match(/\/\/(?:www\.)?(?:player\.)?vimeo.com\/(?:video\/)?([0-9a-z\-_]+)(.*)?/i),r=t.match(/https?:\/\/(.+)?(wistia\.com|wi\.st)\/(medias|embed)\/([0-9a-z\-_]+)(.*)/);return n?{youtube:n}:s?{vimeo:s}:r?{wistia:r}:void 0},H=0,G=function(){function t(t,e){if(this.lgOpened=!1,this.index=0,this.plugins=[],this.lGalleryOn=!1,this.lgBusy=!1,this.currentItemsInDom=[],this.prevScrollTop=0,this.bodyPaddingRight=0,this.isDummyImageRemoved=!1,this.dragOrSwipeEnabled=!1,this.mediaContainerPosition={top:0,bottom:0},!t)return this;if(H++,this.lgId=H,this.el=t,this.LGel=E(t),this.generateSettings(e),this.buildModules(),this.settings.dynamic&&void 0!==this.settings.dynamicEl&&!Array.isArray(this.settings.dynamicEl))throw"When using dynamic mode, you must also define dynamicEl as an Array.";return this.galleryItems=this.getItems(),this.normalizeSettings(),this.init(),this.validateLicense(),this}return t.prototype.generateSettings=function(t){if(this.settings=n(n({},T),t),this.settings.isMobile&&"function"==typeof this.settings.isMobile?this.settings.isMobile():R()){var e=n(n({},this.settings.mobileSettings),this.settings.mobileSettings);this.settings=n(n({},this.settings),e)}},t.prototype.normalizeSettings=function(){this.settings.slideEndAnimation&&(this.settings.hideControlOnEnd=!1),this.settings.closable||(this.settings.swipeToClose=!1),this.zoomFromOrigin=this.settings.zoomFromOrigin,this.settings.dynamic&&(this.zoomFromOrigin=!1),this.settings.container||(this.settings.container=document.body),this.settings.preload=Math.min(this.settings.preload,this.galleryItems.length)},t.prototype.init=function(){var t=this;this.addSlideVideoInfo(this.galleryItems),this.buildStructure(),this.LGel.trigger(r,{instance:this}),this.settings.keyPress&&this.keyPress(),setTimeout((function(){t.enableDrag(),t.enableSwipe(),t.triggerPosterClick()}),50),this.arrow(),this.settings.mousewheel&&this.mousewheel(),this.settings.dynamic||this.openGalleryOnItemClick()},t.prototype.openGalleryOnItemClick=function(){for(var t=this,e=function(e){var n=i.items[e],s=E(n),r=S.generateUUID();s.attr("data-lg-id",r).on("click.lgcustom-item-"+r,(function(i){i.preventDefault();var s=t.settings.index||e;t.openGallery(s,n)}))},i=this,n=0;n<this.items.length;n++)e(n)},t.prototype.buildModules=function(){var t=this;this.settings.plugins.forEach((function(e){t.plugins.push(new e(t,E))}))},t.prototype.validateLicense=function(){this.settings.licenseKey?"0000-0000-000-0000"===this.settings.licenseKey&&console.warn("lightGallery: "+this.settings.licenseKey+" license key is not valid for production use"):console.error("Please provide a valid license key")},t.prototype.getSlideItem=function(t){return E(this.getSlideItemId(t))},t.prototype.getSlideItemId=function(t){return"#lg-item-"+this.lgId+"-"+t},t.prototype.getIdName=function(t){return t+"-"+this.lgId},t.prototype.getElementById=function(t){return E("#"+this.getIdName(t))},t.prototype.manageSingleSlideClassName=function(){this.galleryItems.length<2?this.outer.addClass("lg-single-item"):this.outer.removeClass("lg-single-item")},t.prototype.buildStructure=function(){var t=this;if(!(this.$container&&this.$container.get())){var e="",i="";this.settings.controls&&(e='<button type="button" id="'+this.getIdName("lg-prev")+'" aria-label="'+this.settings.strings.previousSlide+'" class="lg-prev lg-icon"> '+this.settings.prevHtml+' </button>\n                <button type="button" id="'+this.getIdName("lg-next")+'" aria-label="'+this.settings.strings.nextSlide+'" class="lg-next lg-icon"> '+this.settings.nextHtml+" </button>"),".lg-item"!==this.settings.appendSubHtmlTo&&(i='<div class="lg-sub-html" role="status" aria-live="polite"></div>');var n="";this.settings.allowMediaOverlap&&(n+="lg-media-overlap ");var s=this.settings.ariaLabelledby?'aria-labelledby="'+this.settings.ariaLabelledby+'"':"",r=this.settings.ariaDescribedby?'aria-describedby="'+this.settings.ariaDescribedby+'"':"",o="lg-container "+this.settings.addClass+" "+(document.body!==this.settings.container?"lg-inline":""),a=this.settings.closable&&this.settings.showCloseIcon?'<button type="button" aria-label="'+this.settings.strings.closeGallery+'" id="'+this.getIdName("lg-close")+'" class="lg-close lg-icon"></button>':"",l=this.settings.showMaximizeIcon?'<button type="button" aria-label="'+this.settings.strings.toggleMaximize+'" id="'+this.getIdName("lg-maximize")+'" class="lg-maximize lg-icon"></button>':"",c='\n        <div class="'+o+'" id="'+this.getIdName("lg-container")+'" tabindex="-1" aria-modal="true" '+s+" "+r+' role="dialog"\n        >\n            <div id="'+this.getIdName("lg-backdrop")+'" class="lg-backdrop"></div>\n\n            <div id="'+this.getIdName("lg-outer")+'" class="lg-outer lg-use-css3 lg-css3 lg-hide-items '+n+' ">\n\n              <div id="'+this.getIdName("lg-content")+'" class="lg-content">\n                <div id="'+this.getIdName("lg-inner")+'" class="lg-inner">\n                </div>\n                '+e+'\n              </div>\n                <div id="'+this.getIdName("lg-toolbar")+'" class="lg-toolbar lg-group">\n                    '+l+"\n                    "+a+"\n                    </div>\n                    "+(".lg-outer"===this.settings.appendSubHtmlTo?i:"")+'\n                <div id="'+this.getIdName("lg-components")+'" class="lg-components">\n                    '+(".lg-sub-html"===this.settings.appendSubHtmlTo?i:"")+"\n                </div>\n            </div>\n        </div>\n        ";E(this.settings.container).append(c),document.body!==this.settings.container&&E(this.settings.container).css("position","relative"),this.outer=this.getElementById("lg-outer"),this.$lgComponents=this.getElementById("lg-components"),this.$backdrop=this.getElementById("lg-backdrop"),this.$container=this.getElementById("lg-container"),this.$inner=this.getElementById("lg-inner"),this.$content=this.getElementById("lg-content"),this.$toolbar=this.getElementById("lg-toolbar"),this.$backdrop.css("transition-duration",this.settings.backdropDuration+"ms");var d=this.settings.mode+" ";this.manageSingleSlideClassName(),this.settings.enableDrag&&(d+="lg-grab "),this.outer.addClass(d),this.$inner.css("transition-timing-function",this.settings.easing),this.$inner.css("transition-duration",this.settings.speed+"ms"),this.settings.download&&this.$toolbar.append('<a id="'+this.getIdName("lg-download")+'" target="_blank" rel="noopener" aria-label="'+this.settings.strings.download+'" download class="lg-download lg-icon"></a>'),this.counter(),E(window).on("resize.lg.global"+this.lgId+" orientationchange.lg.global"+this.lgId,(function(){t.refreshOnResize()})),this.hideBars(),this.manageCloseGallery(),this.toggleMaximize(),this.initModules()}},t.prototype.refreshOnResize=function(){if(this.lgOpened){var t=this.galleryItems[this.index].__slideVideoInfo;this.mediaContainerPosition=this.getMediaContainerPosition();var e=this.mediaContainerPosition,i=e.top,n=e.bottom;if(this.currentImageSize=M(this.items[this.index],this.outer,i+n,t&&this.settings.videoMaxSize),t&&this.resizeVideoSlide(this.index,this.currentImageSize),this.zoomFromOrigin&&!this.isDummyImageRemoved){var s=this.getDummyImgStyles(this.currentImageSize);this.outer.find(".lg-current .lg-dummy-img").first().attr("style",s)}this.LGel.trigger(a)}},t.prototype.resizeVideoSlide=function(t,e){var i=this.getVideoContStyle(e);this.getSlideItem(t).find(".lg-video-cont").attr("style",i)},t.prototype.updateSlides=function(t,e){if(this.index>t.length-1&&(this.index=t.length-1),1===t.length&&(this.index=0),t.length){var i=this.galleryItems[e].src;this.galleryItems=t,this.updateControls(),this.$inner.empty(),this.currentItemsInDom=[];var n=0;this.galleryItems.some((function(t,e){return t.src===i&&(n=e,!0)})),this.currentItemsInDom=this.organizeSlideItems(n,-1),this.loadContent(n,!0),this.getSlideItem(n).addClass("lg-current"),this.index=n,this.updateCurrentCounter(n),this.LGel.trigger(l)}else this.closeGallery()},t.prototype.getItems=function(){if(this.items=[],this.settings.dynamic)return this.settings.dynamicEl||[];if("this"===this.settings.selector)this.items.push(this.el);else if(this.settings.selector)if("string"==typeof this.settings.selector)if(this.settings.selectWithin){var t=E(this.settings.selectWithin);this.items=t.find(this.settings.selector).get()}else this.items=this.el.querySelectorAll(this.settings.selector);else this.items=this.settings.selector;else this.items=this.el.children;return B(this.items,this.settings.extraProps,this.settings.getCaptionFromTitleOrAlt,this.settings.exThumbImage)},t.prototype.shouldHideScrollbar=function(){return this.settings.hideScrollbar&&document.body===this.settings.container},t.prototype.hideScrollbar=function(){if(this.shouldHideScrollbar()){this.bodyPaddingRight=parseFloat(E("body").style().paddingRight);var t=document.documentElement.getBoundingClientRect(),e=window.innerWidth-t.width;E(document.body).css("padding-right",e+this.bodyPaddingRight+"px"),E(document.body).addClass("lg-overlay-open")}},t.prototype.resetScrollBar=function(){this.shouldHideScrollbar()&&(E(document.body).css("padding-right",this.bodyPaddingRight+"px"),E(document.body).removeClass("lg-overlay-open"))},t.prototype.openGallery=function(t,e){var i=this;if(void 0===t&&(t=this.settings.index),!this.lgOpened){this.lgOpened=!0,this.outer.removeClass("lg-hide-items"),this.hideScrollbar(),this.$container.addClass("lg-show");var n=this.getItemsToBeInsertedToDom(t,t);this.currentItemsInDom=n;var s="";n.forEach((function(t){s=s+'<div id="'+t+'" class="lg-item"></div>'})),this.$inner.append(s),this.addHtml(t);var r="";this.mediaContainerPosition=this.getMediaContainerPosition();var o=this.mediaContainerPosition,a=o.top,l=o.bottom;this.settings.allowMediaOverlap||this.setMediaContainerPosition(a,l);var c=this.galleryItems[t].__slideVideoInfo;this.zoomFromOrigin&&e&&(this.currentImageSize=M(e,this.outer,a+l,c&&this.settings.videoMaxSize),r=O(e,this.outer,a,l,this.currentImageSize)),this.zoomFromOrigin&&r||(this.outer.addClass(this.settings.startClass),this.getSlideItem(t).removeClass("lg-complete"));var h=this.settings.zoomFromOrigin?100:this.settings.backdropDuration;setTimeout((function(){i.outer.addClass("lg-components-open")}),h),this.index=t,this.LGel.trigger(d),this.getSlideItem(t).addClass("lg-current"),this.lGalleryOn=!1,this.prevScrollTop=E(window).scrollTop(),setTimeout((function(){if(i.zoomFromOrigin&&r){var e=i.getSlideItem(t);e.css("transform",r),setTimeout((function(){e.addClass("lg-start-progress lg-start-end-progress").css("transition-duration",i.settings.startAnimationDuration+"ms"),i.outer.addClass("lg-zoom-from-image")})),setTimeout((function(){e.css("transform","translate3d(0, 0, 0)")}),100)}setTimeout((function(){i.$backdrop.addClass("in"),i.$container.addClass("lg-show-in")}),10),setTimeout((function(){i.settings.trapFocus&&document.body===i.settings.container&&i.trapFocus()}),i.settings.backdropDuration+50),i.zoomFromOrigin&&r||setTimeout((function(){i.outer.addClass("lg-visible")}),i.settings.backdropDuration),i.slide(t,!1,!1,!1),i.LGel.trigger(u)})),document.body===this.settings.container&&E("html").addClass("lg-on")}},t.prototype.getMediaContainerPosition=function(){if(this.settings.allowMediaOverlap)return{top:0,bottom:0};var t=this.$toolbar.get().clientHeight||0,e=this.outer.find(".lg-components .lg-sub-html").get(),i=this.settings.defaultCaptionHeight||e&&e.clientHeight||0,n=this.outer.find(".lg-thumb-outer").get();return{top:t,bottom:(n?n.clientHeight:0)+i}},t.prototype.setMediaContainerPosition=function(t,e){void 0===t&&(t=0),void 0===e&&(e=0),this.$content.css("top",t+"px").css("bottom",e+"px")},t.prototype.hideBars=function(){var t=this;setTimeout((function(){t.outer.removeClass("lg-hide-items"),t.settings.hideBarsDelay>0&&(t.outer.on("mousemove.lg click.lg touchstart.lg",(function(){t.outer.removeClass("lg-hide-items"),clearTimeout(t.hideBarTimeout),t.hideBarTimeout=setTimeout((function(){t.outer.addClass("lg-hide-items")}),t.settings.hideBarsDelay)})),t.outer.trigger("mousemove.lg"))}),this.settings.showBarsAfter)},t.prototype.initPictureFill=function(t){if(this.settings.supportLegacyBrowser)try{picturefill({elements:[t.get()]})}catch(t){console.warn("lightGallery :- If you want srcset or picture tag to be supported for older browser please include picturefil javascript library in your document.")}},t.prototype.counter=function(){if(this.settings.counter){var t='<div class="lg-counter" role="status" aria-live="polite">\n                <span id="'+this.getIdName("lg-counter-current")+'" class="lg-counter-current">'+(this.index+1)+' </span> /\n                <span id="'+this.getIdName("lg-counter-all")+'" class="lg-counter-all">'+this.galleryItems.length+" </span></div>";this.outer.find(this.settings.appendCounterTo).append(t)}},t.prototype.addHtml=function(t){var e,i;if(this.galleryItems[t].subHtmlUrl?i=this.galleryItems[t].subHtmlUrl:e=this.galleryItems[t].subHtml,!i)if(e){var n=e.substring(0,1);"."!==n&&"#"!==n||(e=this.settings.subHtmlSelectorRelative&&!this.settings.dynamic?E(this.items).eq(t).find(e).first().html():E(e).first().html())}else e="";if(".lg-item"!==this.settings.appendSubHtmlTo)i?this.outer.find(".lg-sub-html").load(i):this.outer.find(".lg-sub-html").html(e);else{var s=E(this.getSlideItemId(t));i?s.load(i):s.append('<div class="lg-sub-html">'+e+"</div>")}null!=e&&(""===e?this.outer.find(this.settings.appendSubHtmlTo).addClass("lg-empty-html"):this.outer.find(this.settings.appendSubHtmlTo).removeClass("lg-empty-html")),this.LGel.trigger(c,{index:t})},t.prototype.preload=function(t){for(var e=1;e<=this.settings.preload&&!(e>=this.galleryItems.length-t);e++)this.loadContent(t+e,!1);for(var i=1;i<=this.settings.preload&&!(t-i<0);i++)this.loadContent(t-i,!1)},t.prototype.getDummyImgStyles=function(t){return t?"width:"+t.width+"px;\n                margin-left: -"+t.width/2+"px;\n                margin-top: -"+t.height/2+"px;\n                height:"+t.height+"px":""},t.prototype.getVideoContStyle=function(t){return t?"width:"+t.width+"px;\n                height:"+t.height+"px":""},t.prototype.getDummyImageContent=function(t,e,i){var n;if(this.settings.dynamic||(n=E(this.items).eq(e)),n){var s=void 0;if(!(s=this.settings.exThumbImage?n.attr(this.settings.exThumbImage):n.find("img").first().attr("src")))return"";var r="<img "+i+' style="'+this.getDummyImgStyles(this.currentImageSize)+'" class="lg-dummy-img" src="'+s+'" />';return t.addClass("lg-first-slide"),this.outer.addClass("lg-first-slide-loading"),r}return""},t.prototype.setImgMarkup=function(t,e,i){var n=this.galleryItems[i],s=n.alt,r=n.srcset,o=n.sizes,a=n.sources,l=s?'alt="'+s+'"':"",c='<picture class="lg-img-wrap"> '+(this.isFirstSlideWithZoomAnimation()?this.getDummyImageContent(e,i,l):I(i,t,l,r,o,a))+"</picture>";e.prepend(c)},t.prototype.onSlideObjectLoad=function(t,e,i,n){var s=t.find(".lg-object").first();L(s.get())||e?i():(s.on("load.lg error.lg",(function(){i&&i()})),s.on("error.lg",(function(){n&&n()})))},t.prototype.onLgObjectLoad=function(t,e,i,n,s,r){var o=this;this.onSlideObjectLoad(t,r,(function(){o.triggerSlideItemLoad(t,e,i,n,s)}),(function(){t.addClass("lg-complete lg-complete_"),t.html('<span class="lg-error-msg">'+o.settings.strings.mediaLoadingFailed+"</span>")}))},t.prototype.triggerSlideItemLoad=function(t,e,i,n,s){var r=this,o=this.galleryItems[e],a=s&&"video"===this.getSlideType(o)&&!o.poster?n:0;setTimeout((function(){t.addClass("lg-complete lg-complete_"),r.LGel.trigger(h,{index:e,delay:i||0,isFirstSlide:s})}),a)},t.prototype.isFirstSlideWithZoomAnimation=function(){return!(this.lGalleryOn||!this.zoomFromOrigin||!this.currentImageSize)},t.prototype.addSlideVideoInfo=function(t){var e=this;t.forEach((function(t,i){t.__slideVideoInfo=F(t.src,!!t.video,i),t.__slideVideoInfo&&e.settings.loadYouTubePoster&&!t.poster&&t.__slideVideoInfo.youtube&&(t.poster="//img.youtube.com/vi/"+t.__slideVideoInfo.youtube[1]+"/maxresdefault.jpg")}))},t.prototype.loadContent=function(t,e){var i=this,n=this.galleryItems[t],r=E(this.getSlideItemId(t)),a=n.poster,l=n.srcset,c=n.sizes,d=n.sources,u=n.src,h=n.video,p=h&&"string"==typeof h?JSON.parse(h):h;if(n.responsive){var f=n.responsive.split(",");u=P(f)||u}var g=n.__slideVideoInfo,m="",v=!!n.iframe,y=!this.lGalleryOn,b=0;if(y&&(b=this.zoomFromOrigin&&this.currentImageSize?this.settings.startAnimationDuration+10:this.settings.backdropDuration+10),!r.hasClass("lg-loaded")){if(g){var w=this.mediaContainerPosition,_=w.top,x=w.bottom,T=M(this.items[t],this.outer,_+x,g&&this.settings.videoMaxSize);m=this.getVideoContStyle(T)}if(v){var S=A(this.settings.iframeWidth,this.settings.iframeHeight,this.settings.iframeMaxWidth,this.settings.iframeMaxHeight,u,n.iframeTitle);r.prepend(S)}else if(a){var C="";y&&this.zoomFromOrigin&&this.currentImageSize&&(C=this.getDummyImageContent(r,t,""));S=D(a,C||"",m,this.settings.strings.playVideo,g);r.prepend(S)}else if(g){S='<div class="lg-video-cont " style="'+m+'"></div>';r.prepend(S)}else if(this.setImgMarkup(u,r,t),l||d){var k=r.find(".lg-object");this.initPictureFill(k)}(a||g)&&this.LGel.trigger(o,{index:t,src:u,html5Video:p,hasPoster:!!a}),this.LGel.trigger(s,{index:t}),this.lGalleryOn&&".lg-item"===this.settings.appendSubHtmlTo&&this.addHtml(t)}var O=0;b&&!E(document.body).hasClass("lg-from-hash")&&(O=b),this.isFirstSlideWithZoomAnimation()&&(setTimeout((function(){r.removeClass("lg-start-end-progress lg-start-progress").removeAttr("style")}),this.settings.startAnimationDuration+100),r.hasClass("lg-loaded")||setTimeout((function(){if("image"===i.getSlideType(n)){var e=n.alt,s=e?'alt="'+e+'"':"";if(r.find(".lg-img-wrap").append(I(t,u,s,l,c,n.sources)),l||d){var o=r.find(".lg-object");i.initPictureFill(o)}}("image"===i.getSlideType(n)||"video"===i.getSlideType(n)&&a)&&(i.onLgObjectLoad(r,t,b,O,!0,!1),i.onSlideObjectLoad(r,!(!g||!g.html5||a),(function(){i.loadContentOnFirstSlideLoad(t,r,O)}),(function(){i.loadContentOnFirstSlideLoad(t,r,O)})))}),this.settings.startAnimationDuration+100)),r.addClass("lg-loaded"),this.isFirstSlideWithZoomAnimation()&&("video"!==this.getSlideType(n)||a)||this.onLgObjectLoad(r,t,b,O,y,!(!g||!g.html5||a)),this.zoomFromOrigin&&this.currentImageSize||!r.hasClass("lg-complete_")||this.lGalleryOn||setTimeout((function(){r.addClass("lg-complete")}),this.settings.backdropDuration),this.lGalleryOn=!0,!0===e&&(r.hasClass("lg-complete_")?this.preload(t):r.find(".lg-object").first().on("load.lg error.lg",(function(){i.preload(t)})))},t.prototype.loadContentOnFirstSlideLoad=function(t,e,i){var n=this;setTimeout((function(){e.find(".lg-dummy-img").remove(),e.removeClass("lg-first-slide"),n.outer.removeClass("lg-first-slide-loading"),n.isDummyImageRemoved=!0,n.preload(t)}),i+300)},t.prototype.getItemsToBeInsertedToDom=function(t,e,i){var n=this;void 0===i&&(i=0);var s=[],r=Math.max(i,3);r=Math.min(r,this.galleryItems.length);var o="lg-item-"+this.lgId+"-"+e;if(this.galleryItems.length<=3)return this.galleryItems.forEach((function(t,e){s.push("lg-item-"+n.lgId+"-"+e)})),s;if(t<(this.galleryItems.length-1)/2){for(var a=t;a>t-r/2&&a>=0;a--)s.push("lg-item-"+this.lgId+"-"+a);var l=s.length;for(a=0;a<r-l;a++)s.push("lg-item-"+this.lgId+"-"+(t+a+1))}else{for(a=t;a<=this.galleryItems.length-1&&a<t+r/2;a++)s.push("lg-item-"+this.lgId+"-"+a);for(l=s.length,a=0;a<r-l;a++)s.push("lg-item-"+this.lgId+"-"+(t-a-1))}return this.settings.loop&&(t===this.galleryItems.length-1?s.push("lg-item-"+this.lgId+"-0"):0===t&&s.push("lg-item-"+this.lgId+"-"+(this.galleryItems.length-1))),-1===s.indexOf(o)&&s.push("lg-item-"+this.lgId+"-"+e),s},t.prototype.organizeSlideItems=function(t,e){var i=this,n=this.getItemsToBeInsertedToDom(t,e,this.settings.numberOfSlideItemsInDom);return n.forEach((function(t){-1===i.currentItemsInDom.indexOf(t)&&i.$inner.append('<div id="'+t+'" class="lg-item"></div>')})),this.currentItemsInDom.forEach((function(t){-1===n.indexOf(t)&&E("#"+t).remove()})),n},t.prototype.getPreviousSlideIndex=function(){var t=0;try{var e=this.outer.find(".lg-current").first().attr("id");t=parseInt(e.split("-")[3])||0}catch(e){t=0}return t},t.prototype.setDownloadValue=function(t){if(this.settings.download){var e=this.galleryItems[t];if(!1===e.downloadUrl||"false"===e.downloadUrl)this.outer.addClass("lg-hide-download");else{var i=this.getElementById("lg-download");this.outer.removeClass("lg-hide-download"),i.attr("href",e.downloadUrl||e.src),e.download&&i.attr("download",e.download)}}},t.prototype.makeSlideAnimation=function(t,e,i){var n=this;this.lGalleryOn&&i.addClass("lg-slide-progress"),setTimeout((function(){n.outer.addClass("lg-no-trans"),n.outer.find(".lg-item").removeClass("lg-prev-slide lg-next-slide"),"prev"===t?(e.addClass("lg-prev-slide"),i.addClass("lg-next-slide")):(e.addClass("lg-next-slide"),i.addClass("lg-prev-slide")),setTimeout((function(){n.outer.find(".lg-item").removeClass("lg-current"),e.addClass("lg-current"),n.outer.removeClass("lg-no-trans")}),50)}),this.lGalleryOn?this.settings.slideDelay:0)},t.prototype.slide=function(t,e,i,n){var s=this,r=this.getPreviousSlideIndex();if(this.currentItemsInDom=this.organizeSlideItems(t,r),!this.lGalleryOn||r!==t){var o=this.galleryItems.length;if(!this.lgBusy){this.settings.counter&&this.updateCurrentCounter(t);var a=this.getSlideItem(t),l=this.getSlideItem(r),c=this.galleryItems[t],d=c.__slideVideoInfo;if(this.outer.attr("data-lg-slide-type",this.getSlideType(c)),this.setDownloadValue(t),d){var u=this.mediaContainerPosition,h=u.top,g=u.bottom,m=M(this.items[t],this.outer,h+g,d&&this.settings.videoMaxSize);this.resizeVideoSlide(t,m)}if(this.LGel.trigger(p,{prevIndex:r,index:t,fromTouch:!!e,fromThumb:!!i}),this.lgBusy=!0,clearTimeout(this.hideBarTimeout),this.arrowDisable(t),n||(t<r?n="prev":t>r&&(n="next")),e){this.outer.find(".lg-item").removeClass("lg-prev-slide lg-current lg-next-slide");var v=void 0,y=void 0;o>2?(v=t-1,y=t+1,(0===t&&r===o-1||t===o-1&&0===r)&&(y=0,v=o-1)):(v=0,y=1),"prev"===n?this.getSlideItem(y).addClass("lg-next-slide"):this.getSlideItem(v).addClass("lg-prev-slide"),a.addClass("lg-current")}else this.makeSlideAnimation(n,a,l);this.lGalleryOn?setTimeout((function(){s.loadContent(t,!0),".lg-item"!==s.settings.appendSubHtmlTo&&s.addHtml(t)}),this.settings.speed+50+(e?0:this.settings.slideDelay)):this.loadContent(t,!0),setTimeout((function(){s.lgBusy=!1,l.removeClass("lg-slide-progress"),s.LGel.trigger(f,{prevIndex:r,index:t,fromTouch:e,fromThumb:i})}),(this.lGalleryOn?this.settings.speed+100:100)+(e?0:this.settings.slideDelay))}this.index=t}},t.prototype.updateCurrentCounter=function(t){this.getElementById("lg-counter-current").html(t+1+"")},t.prototype.updateCounterTotal=function(){this.getElementById("lg-counter-all").html(this.galleryItems.length+"")},t.prototype.getSlideType=function(t){return t.__slideVideoInfo?"video":t.iframe?"iframe":"image"},t.prototype.touchMove=function(t,e,i){var n=e.pageX-t.pageX,s=e.pageY-t.pageY,r=!1;if(this.swipeDirection?r=!0:Math.abs(n)>15?(this.swipeDirection="horizontal",r=!0):Math.abs(s)>15&&(this.swipeDirection="vertical",r=!0),r){var o=this.getSlideItem(this.index);if("horizontal"===this.swipeDirection){null==i||i.preventDefault(),this.outer.addClass("lg-dragging"),this.setTranslate(o,n,0);var a=o.get().offsetWidth,l=15*a/100-Math.abs(10*n/100);this.setTranslate(this.outer.find(".lg-prev-slide").first(),-a+n-l,0),this.setTranslate(this.outer.find(".lg-next-slide").first(),a+n+l,0)}else if("vertical"===this.swipeDirection&&this.settings.swipeToClose){null==i||i.preventDefault(),this.$container.addClass("lg-dragging-vertical");var c=1-Math.abs(s)/window.innerHeight;this.$backdrop.css("opacity",c);var d=1-Math.abs(s)/(2*window.innerWidth);this.setTranslate(o,0,s,d,d),Math.abs(s)>100&&this.outer.addClass("lg-hide-items").removeClass("lg-components-open")}}},t.prototype.touchEnd=function(t,e,i){var n,s=this;"lg-slide"!==this.settings.mode&&this.outer.addClass("lg-slide"),setTimeout((function(){s.$container.removeClass("lg-dragging-vertical"),s.outer.removeClass("lg-dragging lg-hide-items").addClass("lg-components-open");var r=!0;if("horizontal"===s.swipeDirection){n=t.pageX-e.pageX;var o=Math.abs(t.pageX-e.pageX);n<0&&o>s.settings.swipeThreshold?(s.goToNextSlide(!0),r=!1):n>0&&o>s.settings.swipeThreshold&&(s.goToPrevSlide(!0),r=!1)}else if("vertical"===s.swipeDirection){if(n=Math.abs(t.pageY-e.pageY),s.settings.closable&&s.settings.swipeToClose&&n>100)return void s.closeGallery();s.$backdrop.css("opacity",1)}if(s.outer.find(".lg-item").removeAttr("style"),r&&Math.abs(t.pageX-e.pageX)<5){var a=E(i.target);s.isPosterElement(a)&&s.LGel.trigger(g)}s.swipeDirection=void 0})),setTimeout((function(){s.outer.hasClass("lg-dragging")||"lg-slide"===s.settings.mode||s.outer.removeClass("lg-slide")}),this.settings.speed+100)},t.prototype.enableSwipe=function(){var t=this,e={},i={},n=!1,s=!1;this.settings.enableSwipe&&(this.$inner.on("touchstart.lg",(function(i){t.dragOrSwipeEnabled=!0;var n=t.getSlideItem(t.index);!E(i.target).hasClass("lg-item")&&!n.get().contains(i.target)||t.outer.hasClass("lg-zoomed")||t.lgBusy||1!==i.touches.length||(s=!0,t.touchAction="swipe",t.manageSwipeClass(),e={pageX:i.touches[0].pageX,pageY:i.touches[0].pageY})})),this.$inner.on("touchmove.lg",(function(r){s&&"swipe"===t.touchAction&&1===r.touches.length&&(i={pageX:r.touches[0].pageX,pageY:r.touches[0].pageY},t.touchMove(e,i,r),n=!0)})),this.$inner.on("touchend.lg",(function(r){if("swipe"===t.touchAction){if(n)n=!1,t.touchEnd(i,e,r);else if(s){var o=E(r.target);t.isPosterElement(o)&&t.LGel.trigger(g)}t.touchAction=void 0,s=!1}})))},t.prototype.enableDrag=function(){var t=this,e={},i={},n=!1,s=!1;this.settings.enableDrag&&(this.outer.on("mousedown.lg",(function(i){t.dragOrSwipeEnabled=!0;var s=t.getSlideItem(t.index);(E(i.target).hasClass("lg-item")||s.get().contains(i.target))&&(t.outer.hasClass("lg-zoomed")||t.lgBusy||(i.preventDefault(),t.lgBusy||(t.manageSwipeClass(),e={pageX:i.pageX,pageY:i.pageY},n=!0,t.outer.get().scrollLeft+=1,t.outer.get().scrollLeft-=1,t.outer.removeClass("lg-grab").addClass("lg-grabbing"),t.LGel.trigger(m))))})),E(window).on("mousemove.lg.global"+this.lgId,(function(r){n&&t.lgOpened&&(s=!0,i={pageX:r.pageX,pageY:r.pageY},t.touchMove(e,i),t.LGel.trigger(v))})),E(window).on("mouseup.lg.global"+this.lgId,(function(r){if(t.lgOpened){var o=E(r.target);s?(s=!1,t.touchEnd(i,e,r),t.LGel.trigger(y)):t.isPosterElement(o)&&t.LGel.trigger(g),n&&(n=!1,t.outer.removeClass("lg-grabbing").addClass("lg-grab"))}})))},t.prototype.triggerPosterClick=function(){var t=this;this.$inner.on("click.lg",(function(e){!t.dragOrSwipeEnabled&&t.isPosterElement(E(e.target))&&t.LGel.trigger(g)}))},t.prototype.manageSwipeClass=function(){var t=this.index+1,e=this.index-1;this.settings.loop&&this.galleryItems.length>2&&(0===this.index?e=this.galleryItems.length-1:this.index===this.galleryItems.length-1&&(t=0)),this.outer.find(".lg-item").removeClass("lg-next-slide lg-prev-slide"),e>-1&&this.getSlideItem(e).addClass("lg-prev-slide"),this.getSlideItem(t).addClass("lg-next-slide")},t.prototype.goToNextSlide=function(t){var e=this,i=this.settings.loop;t&&this.galleryItems.length<3&&(i=!1),this.lgBusy||(this.index+1<this.galleryItems.length?(this.index++,this.LGel.trigger(b,{index:this.index}),this.slide(this.index,!!t,!1,"next")):i?(this.index=0,this.LGel.trigger(b,{index:this.index}),this.slide(this.index,!!t,!1,"next")):this.settings.slideEndAnimation&&!t&&(this.outer.addClass("lg-right-end"),setTimeout((function(){e.outer.removeClass("lg-right-end")}),400)))},t.prototype.goToPrevSlide=function(t){var e=this,i=this.settings.loop;t&&this.galleryItems.length<3&&(i=!1),this.lgBusy||(this.index>0?(this.index--,this.LGel.trigger(w,{index:this.index,fromTouch:t}),this.slide(this.index,!!t,!1,"prev")):i?(this.index=this.galleryItems.length-1,this.LGel.trigger(w,{index:this.index,fromTouch:t}),this.slide(this.index,!!t,!1,"prev")):this.settings.slideEndAnimation&&!t&&(this.outer.addClass("lg-left-end"),setTimeout((function(){e.outer.removeClass("lg-left-end")}),400)))},t.prototype.keyPress=function(){var t=this;E(window).on("keydown.lg.global"+this.lgId,(function(e){t.lgOpened&&!0===t.settings.escKey&&27===e.keyCode&&(e.preventDefault(),t.settings.allowMediaOverlap&&t.outer.hasClass("lg-can-toggle")&&t.outer.hasClass("lg-components-open")?t.outer.removeClass("lg-components-open"):t.closeGallery()),t.lgOpened&&t.galleryItems.length>1&&(37===e.keyCode&&(e.preventDefault(),t.goToPrevSlide()),39===e.keyCode&&(e.preventDefault(),t.goToNextSlide()))}))},t.prototype.arrow=function(){var t=this;this.getElementById("lg-prev").on("click.lg",(function(){t.goToPrevSlide()})),this.getElementById("lg-next").on("click.lg",(function(){t.goToNextSlide()}))},t.prototype.arrowDisable=function(t){if(!this.settings.loop&&this.settings.hideControlOnEnd){var e=this.getElementById("lg-prev"),i=this.getElementById("lg-next");t+1===this.galleryItems.length?i.attr("disabled","disabled").addClass("disabled"):i.removeAttr("disabled").removeClass("disabled"),0===t?e.attr("disabled","disabled").addClass("disabled"):e.removeAttr("disabled").removeClass("disabled")}},t.prototype.setTranslate=function(t,e,i,n,s){void 0===n&&(n=1),void 0===s&&(s=1),t.css("transform","translate3d("+e+"px, "+i+"px, 0px) scale3d("+n+", "+s+", 1)")},t.prototype.mousewheel=function(){var t=this,e=0;this.outer.on("wheel.lg",(function(i){if(i.deltaY&&!(t.galleryItems.length<2)){i.preventDefault();var n=(new Date).getTime();n-e<1e3||(e=n,i.deltaY>0?t.goToNextSlide():i.deltaY<0&&t.goToPrevSlide())}}))},t.prototype.isSlideElement=function(t){return t.hasClass("lg-outer")||t.hasClass("lg-item")||t.hasClass("lg-img-wrap")},t.prototype.isPosterElement=function(t){var e=this.getSlideItem(this.index).find(".lg-video-play-button").get();return t.hasClass("lg-video-poster")||t.hasClass("lg-video-play-button")||e&&e.contains(t.get())},t.prototype.toggleMaximize=function(){var t=this;this.getElementById("lg-maximize").on("click.lg",(function(){t.$container.toggleClass("lg-inline"),t.refreshOnResize()}))},t.prototype.invalidateItems=function(){for(var t=0;t<this.items.length;t++){var e=E(this.items[t]);e.off("click.lgcustom-item-"+e.attr("data-lg-id"))}},t.prototype.trapFocus=function(){var t=this;this.$container.get().focus({preventScroll:!0}),E(window).on("keydown.lg.global"+this.lgId,(function(e){if(t.lgOpened&&("Tab"===e.key||9===e.keyCode)){var i=z(t.$container.get()),n=i[0],s=i[i.length-1];e.shiftKey?document.activeElement===n&&(s.focus(),e.preventDefault()):document.activeElement===s&&(n.focus(),e.preventDefault())}}))},t.prototype.manageCloseGallery=function(){var t=this;if(this.settings.closable){var e=!1;this.getElementById("lg-close").on("click.lg",(function(){t.closeGallery()})),this.settings.closeOnTap&&(this.outer.on("mousedown.lg",(function(i){var n=E(i.target);e=!!t.isSlideElement(n)})),this.outer.on("mousemove.lg",(function(){e=!1})),this.outer.on("mouseup.lg",(function(i){var n=E(i.target);t.isSlideElement(n)&&e&&(t.outer.hasClass("lg-dragging")||t.closeGallery())})))}},t.prototype.closeGallery=function(t){var e=this;if(!this.lgOpened||!this.settings.closable&&!t)return 0;this.LGel.trigger(_),this.settings.resetScrollPosition&&!this.settings.hideScrollbar&&E(window).scrollTop(this.prevScrollTop);var i,n=this.items[this.index];if(this.zoomFromOrigin&&n){var s=this.mediaContainerPosition,r=s.top,o=s.bottom,a=this.galleryItems[this.index],l=a.__slideVideoInfo,c=a.poster,d=M(n,this.outer,r+o,l&&c&&this.settings.videoMaxSize);i=O(n,this.outer,r,o,d)}this.zoomFromOrigin&&i?(this.outer.addClass("lg-closing lg-zoom-from-image"),this.getSlideItem(this.index).addClass("lg-start-end-progress").css("transition-duration",this.settings.startAnimationDuration+"ms").css("transform",i)):(this.outer.addClass("lg-hide-items"),this.outer.removeClass("lg-zoom-from-image")),this.destroyModules(),this.lGalleryOn=!1,this.isDummyImageRemoved=!1,this.zoomFromOrigin=this.settings.zoomFromOrigin,clearTimeout(this.hideBarTimeout),this.hideBarTimeout=!1,E("html").removeClass("lg-on"),this.outer.removeClass("lg-visible lg-components-open"),this.$backdrop.removeClass("in").css("opacity",0);var u=this.zoomFromOrigin&&i?Math.max(this.settings.startAnimationDuration,this.settings.backdropDuration):this.settings.backdropDuration;return this.$container.removeClass("lg-show-in"),setTimeout((function(){e.zoomFromOrigin&&i&&e.outer.removeClass("lg-zoom-from-image"),e.$container.removeClass("lg-show"),e.resetScrollBar(),e.$backdrop.removeAttr("style").css("transition-duration",e.settings.backdropDuration+"ms"),e.outer.removeClass("lg-closing "+e.settings.startClass),e.getSlideItem(e.index).removeClass("lg-start-end-progress"),e.$inner.empty(),e.lgOpened&&e.LGel.trigger(x,{instance:e}),e.$container.get()&&e.$container.get().blur(),e.lgOpened=!1}),u+100),u+100},t.prototype.initModules=function(){this.plugins.forEach((function(t){try{t.init()}catch(t){console.warn("lightGallery:- make sure lightGallery module is properly initiated")}}))},t.prototype.destroyModules=function(t){this.plugins.forEach((function(e){try{t?e.destroy():e.closeGallery&&e.closeGallery()}catch(t){console.warn("lightGallery:- make sure lightGallery module is properly destroyed")}}))},t.prototype.refresh=function(t){this.settings.dynamic||this.invalidateItems(),this.galleryItems=t||this.getItems(),this.updateControls(),this.openGalleryOnItemClick(),this.LGel.trigger(l)},t.prototype.updateControls=function(){this.addSlideVideoInfo(this.galleryItems),this.updateCounterTotal(),this.manageSingleSlideClassName()},t.prototype.destroyGallery=function(){this.destroyModules(!0),this.settings.dynamic||this.invalidateItems(),E(window).off(".lg.global"+this.lgId),this.LGel.off(".lg"),this.$container.remove()},t.prototype.destroy=function(){var t=this.closeGallery(!0);return t?setTimeout(this.destroyGallery.bind(this),t):this.destroyGallery(),t},t}();const Y=function(t,e){return new G(t,e)};function V(t){return null!==t&&"object"==typeof t&&"constructor"in t&&t.constructor===Object}function j(t,e){void 0===t&&(t={}),void 0===e&&(e={}),Object.keys(e).forEach((i=>{void 0===t[i]?t[i]=e[i]:V(e[i])&&V(t[i])&&Object.keys(e[i]).length>0&&j(t[i],e[i])}))}(()=>{document.querySelectorAll(".feed-chapter__images-swiper .slide-feed-chapter__image-wrap");document.querySelectorAll("[data-lightgallery]").forEach((t=>{const e=t.dataset.description,i=Y(t,{speed:500,licenseKey:"7EC452A9-0CFD441C-BD984C7C-17C8456E",appendCounterTo:".lg-content",selector:".slide-feed-chapter__image-wrap",appendSubHtmlTo:".lg-item"});t.addEventListener("lgBeforeSlide",(t=>{document.querySelectorAll(".lg-item").forEach((t=>{t.querySelector(".lg-sub-html")&&"true"===t.querySelector(".lg-sub-html").innerHTML&&t.classList.add("_is-vertical")}))})),t.addEventListener("lgBeforeOpen",(t=>{const n=i.$container.firstElement.querySelector(".lg-outer"),s=document.createElement("div");s.classList.add("gallery-description"),s.innerHTML=e,e&&n.append(s);document.querySelectorAll(".lg-item").forEach((t=>{t.querySelector(".lg-sub-html")&&"true"===t.querySelector(".lg-sub-html").innerHTML&&t.classList.add("_is-vertical")}))}))}))})();const N={body:{},addEventListener(){},removeEventListener(){},activeElement:{blur(){},nodeName:""},querySelector:()=>null,querySelectorAll:()=>[],getElementById:()=>null,createEvent:()=>({initEvent(){}}),createElement:()=>({children:[],childNodes:[],style:{},setAttribute(){},getElementsByTagName:()=>[]}),createElementNS:()=>({}),importNode:()=>null,location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};function W(){const t="undefined"!=typeof document?document:{};return j(t,N),t}const X={document:N,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState(){},pushState(){},go(){},back(){}},CustomEvent:function(){return this},addEventListener(){},removeEventListener(){},getComputedStyle:()=>({getPropertyValue:()=>""}),Image(){},Date(){},screen:{},setTimeout(){},clearTimeout(){},matchMedia:()=>({}),requestAnimationFrame:t=>"undefined"==typeof setTimeout?(t(),null):setTimeout(t,0),cancelAnimationFrame(t){"undefined"!=typeof setTimeout&&clearTimeout(t)}};function $(){const t="undefined"!=typeof window?window:{};return j(t,X),t}function q(t,e){return void 0===e&&(e=0),setTimeout(t,e)}function U(){return Date.now()}function K(t,e){void 0===e&&(e="x");const i=$();let n,s,r;const o=function(t){const e=$();let i;return e.getComputedStyle&&(i=e.getComputedStyle(t,null)),!i&&t.currentStyle&&(i=t.currentStyle),i||(i=t.style),i}(t);return i.WebKitCSSMatrix?(s=o.transform||o.webkitTransform,s.split(",").length>6&&(s=s.split(", ").map((t=>t.replace(",","."))).join(", ")),r=new i.WebKitCSSMatrix("none"===s?"":s)):(r=o.MozTransform||o.OTransform||o.MsTransform||o.msTransform||o.transform||o.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,"),n=r.toString().split(",")),"x"===e&&(s=i.WebKitCSSMatrix?r.m41:16===n.length?parseFloat(n[12]):parseFloat(n[4])),"y"===e&&(s=i.WebKitCSSMatrix?r.m42:16===n.length?parseFloat(n[13]):parseFloat(n[5])),s||0}function J(t){return"object"==typeof t&&null!==t&&t.constructor&&"Object"===Object.prototype.toString.call(t).slice(8,-1)}function Z(){const t=Object(arguments.length<=0?void 0:arguments[0]),e=["__proto__","constructor","prototype"];for(let n=1;n<arguments.length;n+=1){const s=n<0||arguments.length<=n?void 0:arguments[n];if(null!=s&&(i=s,!("undefined"!=typeof window&&void 0!==window.HTMLElement?i instanceof HTMLElement:i&&(1===i.nodeType||11===i.nodeType)))){const i=Object.keys(Object(s)).filter((t=>e.indexOf(t)<0));for(let e=0,n=i.length;e<n;e+=1){const n=i[e],r=Object.getOwnPropertyDescriptor(s,n);void 0!==r&&r.enumerable&&(J(t[n])&&J(s[n])?s[n].__swiper__?t[n]=s[n]:Z(t[n],s[n]):!J(t[n])&&J(s[n])?(t[n]={},s[n].__swiper__?t[n]=s[n]:Z(t[n],s[n])):t[n]=s[n])}}}var i;return t}function Q(t,e,i){t.style.setProperty(e,i)}function tt(t){let{swiper:e,targetPosition:i,side:n}=t;const s=$(),r=-e.translate;let o,a=null;const l=e.params.speed;e.wrapperEl.style.scrollSnapType="none",s.cancelAnimationFrame(e.cssModeFrameID);const c=i>r?"next":"prev",d=(t,e)=>"next"===c&&t>=e||"prev"===c&&t<=e,u=()=>{o=(new Date).getTime(),null===a&&(a=o);const t=Math.max(Math.min((o-a)/l,1),0),c=.5-Math.cos(t*Math.PI)/2;let h=r+c*(i-r);if(d(h,i)&&(h=i),e.wrapperEl.scrollTo({[n]:h}),d(h,i))return e.wrapperEl.style.overflow="hidden",e.wrapperEl.style.scrollSnapType="",setTimeout((()=>{e.wrapperEl.style.overflow="",e.wrapperEl.scrollTo({[n]:h})})),void s.cancelAnimationFrame(e.cssModeFrameID);e.cssModeFrameID=s.requestAnimationFrame(u)};u()}function et(t,e){return void 0===e&&(e=""),[...t.children].filter((t=>t.matches(e)))}function it(t){try{return void console.warn(t)}catch(t){}}function nt(t,e){void 0===e&&(e=[]);const i=document.createElement(t);return i.classList.add(...Array.isArray(e)?e:function(t){return void 0===t&&(t=""),t.trim().split(" ").filter((t=>!!t.trim()))}(e)),i}function st(t,e){return $().getComputedStyle(t,null).getPropertyValue(e)}function rt(t){let e,i=t;if(i){for(e=0;null!==(i=i.previousSibling);)1===i.nodeType&&(e+=1);return e}}function ot(t,e){const i=[];let n=t.parentElement;for(;n;)e?n.matches(e)&&i.push(n):i.push(n),n=n.parentElement;return i}function at(t,e,i){const n=$();return i?t["width"===e?"offsetWidth":"offsetHeight"]+parseFloat(n.getComputedStyle(t,null).getPropertyValue("width"===e?"margin-right":"margin-top"))+parseFloat(n.getComputedStyle(t,null).getPropertyValue("width"===e?"margin-left":"margin-bottom")):t.offsetWidth}function lt(t){return(Array.isArray(t)?t:[t]).filter((t=>!!t))}let ct,dt,ut;function ht(){return ct||(ct=function(){const t=$(),e=W();return{smoothScroll:e.documentElement&&e.documentElement.style&&"scrollBehavior"in e.documentElement.style,touch:!!("ontouchstart"in t||t.DocumentTouch&&e instanceof t.DocumentTouch)}}()),ct}function pt(t){return void 0===t&&(t={}),dt||(dt=function(t){let{userAgent:e}=void 0===t?{}:t;const i=ht(),n=$(),s=n.navigator.platform,r=e||n.navigator.userAgent,o={ios:!1,android:!1},a=n.screen.width,l=n.screen.height,c=r.match(/(Android);?[\s\/]+([\d.]+)?/);let d=r.match(/(iPad).*OS\s([\d_]+)/);const u=r.match(/(iPod)(.*OS\s([\d_]+))?/),h=!d&&r.match(/(iPhone\sOS|iOS)\s([\d_]+)/),p="Win32"===s;let f="MacIntel"===s;return!d&&f&&i.touch&&["1024x1366","1366x1024","834x1194","1194x834","834x1112","1112x834","768x1024","1024x768","820x1180","1180x820","810x1080","1080x810"].indexOf(`${a}x${l}`)>=0&&(d=r.match(/(Version)\/([\d.]+)/),d||(d=[0,1,"13_0_0"]),f=!1),c&&!p&&(o.os="android",o.android=!0),(d||h||u)&&(o.os="ios",o.ios=!0),o}(t)),dt}function ft(){return ut||(ut=function(){const t=$(),e=pt();let i=!1;function n(){const e=t.navigator.userAgent.toLowerCase();return e.indexOf("safari")>=0&&e.indexOf("chrome")<0&&e.indexOf("android")<0}if(n()){const e=String(t.navigator.userAgent);if(e.includes("Version/")){const[t,n]=e.split("Version/")[1].split(" ")[0].split(".").map((t=>Number(t)));i=t<16||16===t&&n<2}}const s=/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(t.navigator.userAgent),r=n();return{isSafari:i||r,needPerspectiveFix:i,need3dFix:r||s&&e.ios,isWebView:s}}()),ut}var gt={on(t,e,i){const n=this;if(!n.eventsListeners||n.destroyed)return n;if("function"!=typeof e)return n;const s=i?"unshift":"push";return t.split(" ").forEach((t=>{n.eventsListeners[t]||(n.eventsListeners[t]=[]),n.eventsListeners[t][s](e)})),n},once(t,e,i){const n=this;if(!n.eventsListeners||n.destroyed)return n;if("function"!=typeof e)return n;function s(){n.off(t,s),s.__emitterProxy&&delete s.__emitterProxy;for(var i=arguments.length,r=new Array(i),o=0;o<i;o++)r[o]=arguments[o];e.apply(n,r)}return s.__emitterProxy=e,n.on(t,s,i)},onAny(t,e){const i=this;if(!i.eventsListeners||i.destroyed)return i;if("function"!=typeof t)return i;const n=e?"unshift":"push";return i.eventsAnyListeners.indexOf(t)<0&&i.eventsAnyListeners[n](t),i},offAny(t){const e=this;if(!e.eventsListeners||e.destroyed)return e;if(!e.eventsAnyListeners)return e;const i=e.eventsAnyListeners.indexOf(t);return i>=0&&e.eventsAnyListeners.splice(i,1),e},off(t,e){const i=this;return!i.eventsListeners||i.destroyed?i:i.eventsListeners?(t.split(" ").forEach((t=>{void 0===e?i.eventsListeners[t]=[]:i.eventsListeners[t]&&i.eventsListeners[t].forEach(((n,s)=>{(n===e||n.__emitterProxy&&n.__emitterProxy===e)&&i.eventsListeners[t].splice(s,1)}))})),i):i},emit(){const t=this;if(!t.eventsListeners||t.destroyed)return t;if(!t.eventsListeners)return t;let e,i,n;for(var s=arguments.length,r=new Array(s),o=0;o<s;o++)r[o]=arguments[o];"string"==typeof r[0]||Array.isArray(r[0])?(e=r[0],i=r.slice(1,r.length),n=t):(e=r[0].events,i=r[0].data,n=r[0].context||t),i.unshift(n);return(Array.isArray(e)?e:e.split(" ")).forEach((e=>{t.eventsAnyListeners&&t.eventsAnyListeners.length&&t.eventsAnyListeners.forEach((t=>{t.apply(n,[e,...i])})),t.eventsListeners&&t.eventsListeners[e]&&t.eventsListeners[e].forEach((t=>{t.apply(n,i)}))})),t}};const mt=(t,e,i)=>{e&&!t.classList.contains(i)?t.classList.add(i):!e&&t.classList.contains(i)&&t.classList.remove(i)};const vt=(t,e,i)=>{e&&!t.classList.contains(i)?t.classList.add(i):!e&&t.classList.contains(i)&&t.classList.remove(i)};const yt=(t,e)=>{if(!t||t.destroyed||!t.params)return;const i=e.closest(t.isElement?"swiper-slide":`.${t.params.slideClass}`);if(i){let e=i.querySelector(`.${t.params.lazyPreloaderClass}`);!e&&t.isElement&&(i.shadowRoot?e=i.shadowRoot.querySelector(`.${t.params.lazyPreloaderClass}`):requestAnimationFrame((()=>{i.shadowRoot&&(e=i.shadowRoot.querySelector(`.${t.params.lazyPreloaderClass}`),e&&e.remove())}))),e&&e.remove()}},bt=(t,e)=>{if(!t.slides[e])return;const i=t.slides[e].querySelector('[loading="lazy"]');i&&i.removeAttribute("loading")},wt=t=>{if(!t||t.destroyed||!t.params)return;let e=t.params.lazyPreloadPrevNext;const i=t.slides.length;if(!i||!e||e<0)return;e=Math.min(e,i);const n="auto"===t.params.slidesPerView?t.slidesPerViewDynamic():Math.ceil(t.params.slidesPerView),s=t.activeIndex;if(t.params.grid&&t.params.grid.rows>1){const i=s,r=[i-e];return r.push(...Array.from({length:e}).map(((t,e)=>i+n+e))),void t.slides.forEach(((e,i)=>{r.includes(e.column)&&bt(t,i)}))}const r=s+n-1;if(t.params.rewind||t.params.loop)for(let n=s-e;n<=r+e;n+=1){const e=(n%i+i)%i;(e<s||e>r)&&bt(t,e)}else for(let n=Math.max(s-e,0);n<=Math.min(r+e,i-1);n+=1)n!==s&&(n>r||n<s)&&bt(t,n)};var _t={updateSize:function(){const t=this;let e,i;const n=t.el;e=void 0!==t.params.width&&null!==t.params.width?t.params.width:n.clientWidth,i=void 0!==t.params.height&&null!==t.params.height?t.params.height:n.clientHeight,0===e&&t.isHorizontal()||0===i&&t.isVertical()||(e=e-parseInt(st(n,"padding-left")||0,10)-parseInt(st(n,"padding-right")||0,10),i=i-parseInt(st(n,"padding-top")||0,10)-parseInt(st(n,"padding-bottom")||0,10),Number.isNaN(e)&&(e=0),Number.isNaN(i)&&(i=0),Object.assign(t,{width:e,height:i,size:t.isHorizontal()?e:i}))},updateSlides:function(){const t=this;function e(e,i){return parseFloat(e.getPropertyValue(t.getDirectionLabel(i))||0)}const i=t.params,{wrapperEl:n,slidesEl:s,size:r,rtlTranslate:o,wrongRTL:a}=t,l=t.virtual&&i.virtual.enabled,c=l?t.virtual.slides.length:t.slides.length,d=et(s,`.${t.params.slideClass}, swiper-slide`),u=l?t.virtual.slides.length:d.length;let h=[];const p=[],f=[];let g=i.slidesOffsetBefore;"function"==typeof g&&(g=i.slidesOffsetBefore.call(t));let m=i.slidesOffsetAfter;"function"==typeof m&&(m=i.slidesOffsetAfter.call(t));const v=t.snapGrid.length,y=t.slidesGrid.length;let b=i.spaceBetween,w=-g,_=0,x=0;if(void 0===r)return;"string"==typeof b&&b.indexOf("%")>=0?b=parseFloat(b.replace("%",""))/100*r:"string"==typeof b&&(b=parseFloat(b)),t.virtualSize=-b,d.forEach((t=>{o?t.style.marginLeft="":t.style.marginRight="",t.style.marginBottom="",t.style.marginTop=""})),i.centeredSlides&&i.cssMode&&(Q(n,"--swiper-centered-offset-before",""),Q(n,"--swiper-centered-offset-after",""));const T=i.grid&&i.grid.rows>1&&t.grid;let S;T?t.grid.initSlides(d):t.grid&&t.grid.unsetSlides();const E="auto"===i.slidesPerView&&i.breakpoints&&Object.keys(i.breakpoints).filter((t=>void 0!==i.breakpoints[t].slidesPerView)).length>0;for(let n=0;n<u;n+=1){let s;if(S=0,d[n]&&(s=d[n]),T&&t.grid.updateSlide(n,s,d),!d[n]||"none"!==st(s,"display")){if("auto"===i.slidesPerView){E&&(d[n].style[t.getDirectionLabel("width")]="");const r=getComputedStyle(s),o=s.style.transform,a=s.style.webkitTransform;if(o&&(s.style.transform="none"),a&&(s.style.webkitTransform="none"),i.roundLengths)S=t.isHorizontal()?at(s,"width",!0):at(s,"height",!0);else{const t=e(r,"width"),i=e(r,"padding-left"),n=e(r,"padding-right"),o=e(r,"margin-left"),a=e(r,"margin-right"),l=r.getPropertyValue("box-sizing");if(l&&"border-box"===l)S=t+o+a;else{const{clientWidth:e,offsetWidth:r}=s;S=t+i+n+o+a+(r-e)}}o&&(s.style.transform=o),a&&(s.style.webkitTransform=a),i.roundLengths&&(S=Math.floor(S))}else S=(r-(i.slidesPerView-1)*b)/i.slidesPerView,i.roundLengths&&(S=Math.floor(S)),d[n]&&(d[n].style[t.getDirectionLabel("width")]=`${S}px`);d[n]&&(d[n].swiperSlideSize=S),f.push(S),i.centeredSlides?(w=w+S/2+_/2+b,0===_&&0!==n&&(w=w-r/2-b),0===n&&(w=w-r/2-b),Math.abs(w)<.001&&(w=0),i.roundLengths&&(w=Math.floor(w)),x%i.slidesPerGroup==0&&h.push(w),p.push(w)):(i.roundLengths&&(w=Math.floor(w)),(x-Math.min(t.params.slidesPerGroupSkip,x))%t.params.slidesPerGroup==0&&h.push(w),p.push(w),w=w+S+b),t.virtualSize+=S+b,_=S,x+=1}}if(t.virtualSize=Math.max(t.virtualSize,r)+m,o&&a&&("slide"===i.effect||"coverflow"===i.effect)&&(n.style.width=`${t.virtualSize+b}px`),i.setWrapperSize&&(n.style[t.getDirectionLabel("width")]=`${t.virtualSize+b}px`),T&&t.grid.updateWrapperSize(S,h),!i.centeredSlides){const e=[];for(let n=0;n<h.length;n+=1){let s=h[n];i.roundLengths&&(s=Math.floor(s)),h[n]<=t.virtualSize-r&&e.push(s)}h=e,Math.floor(t.virtualSize-r)-Math.floor(h[h.length-1])>1&&h.push(t.virtualSize-r)}if(l&&i.loop){const e=f[0]+b;if(i.slidesPerGroup>1){const n=Math.ceil((t.virtual.slidesBefore+t.virtual.slidesAfter)/i.slidesPerGroup),s=e*i.slidesPerGroup;for(let t=0;t<n;t+=1)h.push(h[h.length-1]+s)}for(let n=0;n<t.virtual.slidesBefore+t.virtual.slidesAfter;n+=1)1===i.slidesPerGroup&&h.push(h[h.length-1]+e),p.push(p[p.length-1]+e),t.virtualSize+=e}if(0===h.length&&(h=[0]),0!==b){const e=t.isHorizontal()&&o?"marginLeft":t.getDirectionLabel("marginRight");d.filter(((t,e)=>!(i.cssMode&&!i.loop)||e!==d.length-1)).forEach((t=>{t.style[e]=`${b}px`}))}if(i.centeredSlides&&i.centeredSlidesBounds){let t=0;f.forEach((e=>{t+=e+(b||0)})),t-=b;const e=t-r;h=h.map((t=>t<=0?-g:t>e?e+m:t))}if(i.centerInsufficientSlides){let t=0;f.forEach((e=>{t+=e+(b||0)})),t-=b;const e=(i.slidesOffsetBefore||0)+(i.slidesOffsetAfter||0);if(t+e<r){const i=(r-t-e)/2;h.forEach(((t,e)=>{h[e]=t-i})),p.forEach(((t,e)=>{p[e]=t+i}))}}if(Object.assign(t,{slides:d,snapGrid:h,slidesGrid:p,slidesSizesGrid:f}),i.centeredSlides&&i.cssMode&&!i.centeredSlidesBounds){Q(n,"--swiper-centered-offset-before",-h[0]+"px"),Q(n,"--swiper-centered-offset-after",t.size/2-f[f.length-1]/2+"px");const e=-t.snapGrid[0],i=-t.slidesGrid[0];t.snapGrid=t.snapGrid.map((t=>t+e)),t.slidesGrid=t.slidesGrid.map((t=>t+i))}if(u!==c&&t.emit("slidesLengthChange"),h.length!==v&&(t.params.watchOverflow&&t.checkOverflow(),t.emit("snapGridLengthChange")),p.length!==y&&t.emit("slidesGridLengthChange"),i.watchSlidesProgress&&t.updateSlidesOffset(),t.emit("slidesUpdated"),!(l||i.cssMode||"slide"!==i.effect&&"fade"!==i.effect)){const e=`${i.containerModifierClass}backface-hidden`,n=t.el.classList.contains(e);u<=i.maxBackfaceHiddenSlides?n||t.el.classList.add(e):n&&t.el.classList.remove(e)}},updateAutoHeight:function(t){const e=this,i=[],n=e.virtual&&e.params.virtual.enabled;let s,r=0;"number"==typeof t?e.setTransition(t):!0===t&&e.setTransition(e.params.speed);const o=t=>n?e.slides[e.getSlideIndexByData(t)]:e.slides[t];if("auto"!==e.params.slidesPerView&&e.params.slidesPerView>1)if(e.params.centeredSlides)(e.visibleSlides||[]).forEach((t=>{i.push(t)}));else for(s=0;s<Math.ceil(e.params.slidesPerView);s+=1){const t=e.activeIndex+s;if(t>e.slides.length&&!n)break;i.push(o(t))}else i.push(o(e.activeIndex));for(s=0;s<i.length;s+=1)if(void 0!==i[s]){const t=i[s].offsetHeight;r=t>r?t:r}(r||0===r)&&(e.wrapperEl.style.height=`${r}px`)},updateSlidesOffset:function(){const t=this,e=t.slides,i=t.isElement?t.isHorizontal()?t.wrapperEl.offsetLeft:t.wrapperEl.offsetTop:0;for(let n=0;n<e.length;n+=1)e[n].swiperSlideOffset=(t.isHorizontal()?e[n].offsetLeft:e[n].offsetTop)-i-t.cssOverflowAdjustment()},updateSlidesProgress:function(t){void 0===t&&(t=this&&this.translate||0);const e=this,i=e.params,{slides:n,rtlTranslate:s,snapGrid:r}=e;if(0===n.length)return;void 0===n[0].swiperSlideOffset&&e.updateSlidesOffset();let o=-t;s&&(o=t),e.visibleSlidesIndexes=[],e.visibleSlides=[];let a=i.spaceBetween;"string"==typeof a&&a.indexOf("%")>=0?a=parseFloat(a.replace("%",""))/100*e.size:"string"==typeof a&&(a=parseFloat(a));for(let t=0;t<n.length;t+=1){const l=n[t];let c=l.swiperSlideOffset;i.cssMode&&i.centeredSlides&&(c-=n[0].swiperSlideOffset);const d=(o+(i.centeredSlides?e.minTranslate():0)-c)/(l.swiperSlideSize+a),u=(o-r[0]+(i.centeredSlides?e.minTranslate():0)-c)/(l.swiperSlideSize+a),h=-(o-c),p=h+e.slidesSizesGrid[t],f=h>=0&&h<=e.size-e.slidesSizesGrid[t],g=h>=0&&h<e.size-1||p>1&&p<=e.size||h<=0&&p>=e.size;g&&(e.visibleSlides.push(l),e.visibleSlidesIndexes.push(t)),mt(l,g,i.slideVisibleClass),mt(l,f,i.slideFullyVisibleClass),l.progress=s?-d:d,l.originalProgress=s?-u:u}},updateProgress:function(t){const e=this;if(void 0===t){const i=e.rtlTranslate?-1:1;t=e&&e.translate&&e.translate*i||0}const i=e.params,n=e.maxTranslate()-e.minTranslate();let{progress:s,isBeginning:r,isEnd:o,progressLoop:a}=e;const l=r,c=o;if(0===n)s=0,r=!0,o=!0;else{s=(t-e.minTranslate())/n;const i=Math.abs(t-e.minTranslate())<1,a=Math.abs(t-e.maxTranslate())<1;r=i||s<=0,o=a||s>=1,i&&(s=0),a&&(s=1)}if(i.loop){const i=e.getSlideIndexByData(0),n=e.getSlideIndexByData(e.slides.length-1),s=e.slidesGrid[i],r=e.slidesGrid[n],o=e.slidesGrid[e.slidesGrid.length-1],l=Math.abs(t);a=l>=s?(l-s)/o:(l+o-r)/o,a>1&&(a-=1)}Object.assign(e,{progress:s,progressLoop:a,isBeginning:r,isEnd:o}),(i.watchSlidesProgress||i.centeredSlides&&i.autoHeight)&&e.updateSlidesProgress(t),r&&!l&&e.emit("reachBeginning toEdge"),o&&!c&&e.emit("reachEnd toEdge"),(l&&!r||c&&!o)&&e.emit("fromEdge"),e.emit("progress",s)},updateSlidesClasses:function(){const t=this,{slides:e,params:i,slidesEl:n,activeIndex:s}=t,r=t.virtual&&i.virtual.enabled,o=t.grid&&i.grid&&i.grid.rows>1,a=t=>et(n,`.${i.slideClass}${t}, swiper-slide${t}`)[0];let l,c,d;if(r)if(i.loop){let e=s-t.virtual.slidesBefore;e<0&&(e=t.virtual.slides.length+e),e>=t.virtual.slides.length&&(e-=t.virtual.slides.length),l=a(`[data-swiper-slide-index="${e}"]`)}else l=a(`[data-swiper-slide-index="${s}"]`);else o?(l=e.filter((t=>t.column===s))[0],d=e.filter((t=>t.column===s+1))[0],c=e.filter((t=>t.column===s-1))[0]):l=e[s];l&&(o||(d=function(t,e){const i=[];for(;t.nextElementSibling;){const n=t.nextElementSibling;e?n.matches(e)&&i.push(n):i.push(n),t=n}return i}(l,`.${i.slideClass}, swiper-slide`)[0],i.loop&&!d&&(d=e[0]),c=function(t,e){const i=[];for(;t.previousElementSibling;){const n=t.previousElementSibling;e?n.matches(e)&&i.push(n):i.push(n),t=n}return i}(l,`.${i.slideClass}, swiper-slide`)[0],i.loop&&0===!c&&(c=e[e.length-1]))),e.forEach((t=>{vt(t,t===l,i.slideActiveClass),vt(t,t===d,i.slideNextClass),vt(t,t===c,i.slidePrevClass)})),t.emitSlidesClasses()},updateActiveIndex:function(t){const e=this,i=e.rtlTranslate?e.translate:-e.translate,{snapGrid:n,params:s,activeIndex:r,realIndex:o,snapIndex:a}=e;let l,c=t;const d=t=>{let i=t-e.virtual.slidesBefore;return i<0&&(i=e.virtual.slides.length+i),i>=e.virtual.slides.length&&(i-=e.virtual.slides.length),i};if(void 0===c&&(c=function(t){const{slidesGrid:e,params:i}=t,n=t.rtlTranslate?t.translate:-t.translate;let s;for(let t=0;t<e.length;t+=1)void 0!==e[t+1]?n>=e[t]&&n<e[t+1]-(e[t+1]-e[t])/2?s=t:n>=e[t]&&n<e[t+1]&&(s=t+1):n>=e[t]&&(s=t);return i.normalizeSlideIndex&&(s<0||void 0===s)&&(s=0),s}(e)),n.indexOf(i)>=0)l=n.indexOf(i);else{const t=Math.min(s.slidesPerGroupSkip,c);l=t+Math.floor((c-t)/s.slidesPerGroup)}if(l>=n.length&&(l=n.length-1),c===r&&!e.params.loop)return void(l!==a&&(e.snapIndex=l,e.emit("snapIndexChange")));if(c===r&&e.params.loop&&e.virtual&&e.params.virtual.enabled)return void(e.realIndex=d(c));const u=e.grid&&s.grid&&s.grid.rows>1;let h;if(e.virtual&&s.virtual.enabled&&s.loop)h=d(c);else if(u){const t=e.slides.filter((t=>t.column===c))[0];let i=parseInt(t.getAttribute("data-swiper-slide-index"),10);Number.isNaN(i)&&(i=Math.max(e.slides.indexOf(t),0)),h=Math.floor(i/s.grid.rows)}else if(e.slides[c]){const t=e.slides[c].getAttribute("data-swiper-slide-index");h=t?parseInt(t,10):c}else h=c;Object.assign(e,{previousSnapIndex:a,snapIndex:l,previousRealIndex:o,realIndex:h,previousIndex:r,activeIndex:c}),e.initialized&&wt(e),e.emit("activeIndexChange"),e.emit("snapIndexChange"),(e.initialized||e.params.runCallbacksOnInit)&&(o!==h&&e.emit("realIndexChange"),e.emit("slideChange"))},updateClickedSlide:function(t,e){const i=this,n=i.params;let s=t.closest(`.${n.slideClass}, swiper-slide`);!s&&i.isElement&&e&&e.length>1&&e.includes(t)&&[...e.slice(e.indexOf(t)+1,e.length)].forEach((t=>{!s&&t.matches&&t.matches(`.${n.slideClass}, swiper-slide`)&&(s=t)}));let r,o=!1;if(s)for(let t=0;t<i.slides.length;t+=1)if(i.slides[t]===s){o=!0,r=t;break}if(!s||!o)return i.clickedSlide=void 0,void(i.clickedIndex=void 0);i.clickedSlide=s,i.virtual&&i.params.virtual.enabled?i.clickedIndex=parseInt(s.getAttribute("data-swiper-slide-index"),10):i.clickedIndex=r,n.slideToClickedSlide&&void 0!==i.clickedIndex&&i.clickedIndex!==i.activeIndex&&i.slideToClickedSlide()}};var xt={getTranslate:function(t){void 0===t&&(t=this.isHorizontal()?"x":"y");const{params:e,rtlTranslate:i,translate:n,wrapperEl:s}=this;if(e.virtualTranslate)return i?-n:n;if(e.cssMode)return n;let r=K(s,t);return r+=this.cssOverflowAdjustment(),i&&(r=-r),r||0},setTranslate:function(t,e){const i=this,{rtlTranslate:n,params:s,wrapperEl:r,progress:o}=i;let a,l=0,c=0;i.isHorizontal()?l=n?-t:t:c=t,s.roundLengths&&(l=Math.floor(l),c=Math.floor(c)),i.previousTranslate=i.translate,i.translate=i.isHorizontal()?l:c,s.cssMode?r[i.isHorizontal()?"scrollLeft":"scrollTop"]=i.isHorizontal()?-l:-c:s.virtualTranslate||(i.isHorizontal()?l-=i.cssOverflowAdjustment():c-=i.cssOverflowAdjustment(),r.style.transform=`translate3d(${l}px, ${c}px, 0px)`);const d=i.maxTranslate()-i.minTranslate();a=0===d?0:(t-i.minTranslate())/d,a!==o&&i.updateProgress(t),i.emit("setTranslate",i.translate,e)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]},translateTo:function(t,e,i,n,s){void 0===t&&(t=0),void 0===e&&(e=this.params.speed),void 0===i&&(i=!0),void 0===n&&(n=!0);const r=this,{params:o,wrapperEl:a}=r;if(r.animating&&o.preventInteractionOnTransition)return!1;const l=r.minTranslate(),c=r.maxTranslate();let d;if(d=n&&t>l?l:n&&t<c?c:t,r.updateProgress(d),o.cssMode){const t=r.isHorizontal();if(0===e)a[t?"scrollLeft":"scrollTop"]=-d;else{if(!r.support.smoothScroll)return tt({swiper:r,targetPosition:-d,side:t?"left":"top"}),!0;a.scrollTo({[t?"left":"top"]:-d,behavior:"smooth"})}return!0}return 0===e?(r.setTransition(0),r.setTranslate(d),i&&(r.emit("beforeTransitionStart",e,s),r.emit("transitionEnd"))):(r.setTransition(e),r.setTranslate(d),i&&(r.emit("beforeTransitionStart",e,s),r.emit("transitionStart")),r.animating||(r.animating=!0,r.onTranslateToWrapperTransitionEnd||(r.onTranslateToWrapperTransitionEnd=function(t){r&&!r.destroyed&&t.target===this&&(r.wrapperEl.removeEventListener("transitionend",r.onTranslateToWrapperTransitionEnd),r.onTranslateToWrapperTransitionEnd=null,delete r.onTranslateToWrapperTransitionEnd,r.animating=!1,i&&r.emit("transitionEnd"))}),r.wrapperEl.addEventListener("transitionend",r.onTranslateToWrapperTransitionEnd))),!0}};function Tt(t){let{swiper:e,runCallbacks:i,direction:n,step:s}=t;const{activeIndex:r,previousIndex:o}=e;let a=n;if(a||(a=r>o?"next":r<o?"prev":"reset"),e.emit(`transition${s}`),i&&r!==o){if("reset"===a)return void e.emit(`slideResetTransition${s}`);e.emit(`slideChangeTransition${s}`),"next"===a?e.emit(`slideNextTransition${s}`):e.emit(`slidePrevTransition${s}`)}}var St={slideTo:function(t,e,i,n,s){void 0===t&&(t=0),void 0===i&&(i=!0),"string"==typeof t&&(t=parseInt(t,10));const r=this;let o=t;o<0&&(o=0);const{params:a,snapGrid:l,slidesGrid:c,previousIndex:d,activeIndex:u,rtlTranslate:h,wrapperEl:p,enabled:f}=r;if(!f&&!n&&!s||r.destroyed||r.animating&&a.preventInteractionOnTransition)return!1;void 0===e&&(e=r.params.speed);const g=Math.min(r.params.slidesPerGroupSkip,o);let m=g+Math.floor((o-g)/r.params.slidesPerGroup);m>=l.length&&(m=l.length-1);const v=-l[m];if(a.normalizeSlideIndex)for(let t=0;t<c.length;t+=1){const e=-Math.floor(100*v),i=Math.floor(100*c[t]),n=Math.floor(100*c[t+1]);void 0!==c[t+1]?e>=i&&e<n-(n-i)/2?o=t:e>=i&&e<n&&(o=t+1):e>=i&&(o=t)}if(r.initialized&&o!==u){if(!r.allowSlideNext&&(h?v>r.translate&&v>r.minTranslate():v<r.translate&&v<r.minTranslate()))return!1;if(!r.allowSlidePrev&&v>r.translate&&v>r.maxTranslate()&&(u||0)!==o)return!1}let y;if(o!==(d||0)&&i&&r.emit("beforeSlideChangeStart"),r.updateProgress(v),y=o>u?"next":o<u?"prev":"reset",h&&-v===r.translate||!h&&v===r.translate)return r.updateActiveIndex(o),a.autoHeight&&r.updateAutoHeight(),r.updateSlidesClasses(),"slide"!==a.effect&&r.setTranslate(v),"reset"!==y&&(r.transitionStart(i,y),r.transitionEnd(i,y)),!1;if(a.cssMode){const t=r.isHorizontal(),i=h?v:-v;if(0===e){const e=r.virtual&&r.params.virtual.enabled;e&&(r.wrapperEl.style.scrollSnapType="none",r._immediateVirtual=!0),e&&!r._cssModeVirtualInitialSet&&r.params.initialSlide>0?(r._cssModeVirtualInitialSet=!0,requestAnimationFrame((()=>{p[t?"scrollLeft":"scrollTop"]=i}))):p[t?"scrollLeft":"scrollTop"]=i,e&&requestAnimationFrame((()=>{r.wrapperEl.style.scrollSnapType="",r._immediateVirtual=!1}))}else{if(!r.support.smoothScroll)return tt({swiper:r,targetPosition:i,side:t?"left":"top"}),!0;p.scrollTo({[t?"left":"top"]:i,behavior:"smooth"})}return!0}return r.setTransition(e),r.setTranslate(v),r.updateActiveIndex(o),r.updateSlidesClasses(),r.emit("beforeTransitionStart",e,n),r.transitionStart(i,y),0===e?r.transitionEnd(i,y):r.animating||(r.animating=!0,r.onSlideToWrapperTransitionEnd||(r.onSlideToWrapperTransitionEnd=function(t){r&&!r.destroyed&&t.target===this&&(r.wrapperEl.removeEventListener("transitionend",r.onSlideToWrapperTransitionEnd),r.onSlideToWrapperTransitionEnd=null,delete r.onSlideToWrapperTransitionEnd,r.transitionEnd(i,y))}),r.wrapperEl.addEventListener("transitionend",r.onSlideToWrapperTransitionEnd)),!0},slideToLoop:function(t,e,i,n){if(void 0===t&&(t=0),void 0===i&&(i=!0),"string"==typeof t){t=parseInt(t,10)}const s=this;if(s.destroyed)return;void 0===e&&(e=s.params.speed);const r=s.grid&&s.params.grid&&s.params.grid.rows>1;let o=t;if(s.params.loop)if(s.virtual&&s.params.virtual.enabled)o+=s.virtual.slidesBefore;else{let t;if(r){const e=o*s.params.grid.rows;t=s.slides.filter((t=>1*t.getAttribute("data-swiper-slide-index")===e))[0].column}else t=s.getSlideIndexByData(o);const e=r?Math.ceil(s.slides.length/s.params.grid.rows):s.slides.length,{centeredSlides:i}=s.params;let a=s.params.slidesPerView;"auto"===a?a=s.slidesPerViewDynamic():(a=Math.ceil(parseFloat(s.params.slidesPerView,10)),i&&a%2==0&&(a+=1));let l=e-t<a;if(i&&(l=l||t<Math.ceil(a/2)),n&&i&&"auto"!==s.params.slidesPerView&&!r&&(l=!1),l){const n=i?t<s.activeIndex?"prev":"next":t-s.activeIndex-1<s.params.slidesPerView?"next":"prev";s.loopFix({direction:n,slideTo:!0,activeSlideIndex:"next"===n?t+1:t-e+1,slideRealIndex:"next"===n?s.realIndex:void 0})}if(r){const t=o*s.params.grid.rows;o=s.slides.filter((e=>1*e.getAttribute("data-swiper-slide-index")===t))[0].column}else o=s.getSlideIndexByData(o)}return requestAnimationFrame((()=>{s.slideTo(o,e,i,n)})),s},slideNext:function(t,e,i){void 0===e&&(e=!0);const n=this,{enabled:s,params:r,animating:o}=n;if(!s||n.destroyed)return n;void 0===t&&(t=n.params.speed);let a=r.slidesPerGroup;"auto"===r.slidesPerView&&1===r.slidesPerGroup&&r.slidesPerGroupAuto&&(a=Math.max(n.slidesPerViewDynamic("current",!0),1));const l=n.activeIndex<r.slidesPerGroupSkip?1:a,c=n.virtual&&r.virtual.enabled;if(r.loop){if(o&&!c&&r.loopPreventsSliding)return!1;if(n.loopFix({direction:"next"}),n._clientLeft=n.wrapperEl.clientLeft,n.activeIndex===n.slides.length-1&&r.cssMode)return requestAnimationFrame((()=>{n.slideTo(n.activeIndex+l,t,e,i)})),!0}return r.rewind&&n.isEnd?n.slideTo(0,t,e,i):n.slideTo(n.activeIndex+l,t,e,i)},slidePrev:function(t,e,i){void 0===e&&(e=!0);const n=this,{params:s,snapGrid:r,slidesGrid:o,rtlTranslate:a,enabled:l,animating:c}=n;if(!l||n.destroyed)return n;void 0===t&&(t=n.params.speed);const d=n.virtual&&s.virtual.enabled;if(s.loop){if(c&&!d&&s.loopPreventsSliding)return!1;n.loopFix({direction:"prev"}),n._clientLeft=n.wrapperEl.clientLeft}function u(t){return t<0?-Math.floor(Math.abs(t)):Math.floor(t)}const h=u(a?n.translate:-n.translate),p=r.map((t=>u(t)));let f=r[p.indexOf(h)-1];if(void 0===f&&s.cssMode){let t;r.forEach(((e,i)=>{h>=e&&(t=i)})),void 0!==t&&(f=r[t>0?t-1:t])}let g=0;if(void 0!==f&&(g=o.indexOf(f),g<0&&(g=n.activeIndex-1),"auto"===s.slidesPerView&&1===s.slidesPerGroup&&s.slidesPerGroupAuto&&(g=g-n.slidesPerViewDynamic("previous",!0)+1,g=Math.max(g,0))),s.rewind&&n.isBeginning){const s=n.params.virtual&&n.params.virtual.enabled&&n.virtual?n.virtual.slides.length-1:n.slides.length-1;return n.slideTo(s,t,e,i)}return s.loop&&0===n.activeIndex&&s.cssMode?(requestAnimationFrame((()=>{n.slideTo(g,t,e,i)})),!0):n.slideTo(g,t,e,i)},slideReset:function(t,e,i){void 0===e&&(e=!0);const n=this;if(!n.destroyed)return void 0===t&&(t=n.params.speed),n.slideTo(n.activeIndex,t,e,i)},slideToClosest:function(t,e,i,n){void 0===e&&(e=!0),void 0===n&&(n=.5);const s=this;if(s.destroyed)return;void 0===t&&(t=s.params.speed);let r=s.activeIndex;const o=Math.min(s.params.slidesPerGroupSkip,r),a=o+Math.floor((r-o)/s.params.slidesPerGroup),l=s.rtlTranslate?s.translate:-s.translate;if(l>=s.snapGrid[a]){const t=s.snapGrid[a];l-t>(s.snapGrid[a+1]-t)*n&&(r+=s.params.slidesPerGroup)}else{const t=s.snapGrid[a-1];l-t<=(s.snapGrid[a]-t)*n&&(r-=s.params.slidesPerGroup)}return r=Math.max(r,0),r=Math.min(r,s.slidesGrid.length-1),s.slideTo(r,t,e,i)},slideToClickedSlide:function(){const t=this;if(t.destroyed)return;const{params:e,slidesEl:i}=t,n="auto"===e.slidesPerView?t.slidesPerViewDynamic():e.slidesPerView;let s,r=t.clickedIndex;const o=t.isElement?"swiper-slide":`.${e.slideClass}`;if(e.loop){if(t.animating)return;s=parseInt(t.clickedSlide.getAttribute("data-swiper-slide-index"),10),e.centeredSlides?r<t.loopedSlides-n/2||r>t.slides.length-t.loopedSlides+n/2?(t.loopFix(),r=t.getSlideIndex(et(i,`${o}[data-swiper-slide-index="${s}"]`)[0]),q((()=>{t.slideTo(r)}))):t.slideTo(r):r>t.slides.length-n?(t.loopFix(),r=t.getSlideIndex(et(i,`${o}[data-swiper-slide-index="${s}"]`)[0]),q((()=>{t.slideTo(r)}))):t.slideTo(r)}else t.slideTo(r)}};var Et={loopCreate:function(t){const e=this,{params:i,slidesEl:n}=e;if(!i.loop||e.virtual&&e.params.virtual.enabled)return;const s=()=>{et(n,`.${i.slideClass}, swiper-slide`).forEach(((t,e)=>{t.setAttribute("data-swiper-slide-index",e)}))},r=e.grid&&i.grid&&i.grid.rows>1,o=i.slidesPerGroup*(r?i.grid.rows:1),a=e.slides.length%o!=0,l=r&&e.slides.length%i.grid.rows!=0,c=t=>{for(let n=0;n<t;n+=1){const t=e.isElement?nt("swiper-slide",[i.slideBlankClass]):nt("div",[i.slideClass,i.slideBlankClass]);e.slidesEl.append(t)}};if(a){if(i.loopAddBlankSlides){c(o-e.slides.length%o),e.recalcSlides(),e.updateSlides()}else it("Swiper Loop Warning: The number of slides is not even to slidesPerGroup, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)");s()}else if(l){if(i.loopAddBlankSlides){c(i.grid.rows-e.slides.length%i.grid.rows),e.recalcSlides(),e.updateSlides()}else it("Swiper Loop Warning: The number of slides is not even to grid.rows, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)");s()}else s();e.loopFix({slideRealIndex:t,direction:i.centeredSlides?void 0:"next"})},loopFix:function(t){let{slideRealIndex:e,slideTo:i=!0,direction:n,setTranslate:s,activeSlideIndex:r,byController:o,byMousewheel:a}=void 0===t?{}:t;const l=this;if(!l.params.loop)return;l.emit("beforeLoopFix");const{slides:c,allowSlidePrev:d,allowSlideNext:u,slidesEl:h,params:p}=l,{centeredSlides:f}=p;if(l.allowSlidePrev=!0,l.allowSlideNext=!0,l.virtual&&p.virtual.enabled)return i&&(p.centeredSlides||0!==l.snapIndex?p.centeredSlides&&l.snapIndex<p.slidesPerView?l.slideTo(l.virtual.slides.length+l.snapIndex,0,!1,!0):l.snapIndex===l.snapGrid.length-1&&l.slideTo(l.virtual.slidesBefore,0,!1,!0):l.slideTo(l.virtual.slides.length,0,!1,!0)),l.allowSlidePrev=d,l.allowSlideNext=u,void l.emit("loopFix");let g=p.slidesPerView;"auto"===g?g=l.slidesPerViewDynamic():(g=Math.ceil(parseFloat(p.slidesPerView,10)),f&&g%2==0&&(g+=1));const m=p.slidesPerGroupAuto?g:p.slidesPerGroup;let v=m;v%m!=0&&(v+=m-v%m),v+=p.loopAdditionalSlides,l.loopedSlides=v;const y=l.grid&&p.grid&&p.grid.rows>1;c.length<g+v?it("Swiper Loop Warning: The number of slides is not enough for loop mode, it will be disabled and not function properly. You need to add more slides (or make duplicates) or lower the values of slidesPerView and slidesPerGroup parameters"):y&&"row"===p.grid.fill&&it("Swiper Loop Warning: Loop mode is not compatible with grid.fill = `row`");const b=[],w=[];let _=l.activeIndex;void 0===r?r=l.getSlideIndex(c.filter((t=>t.classList.contains(p.slideActiveClass)))[0]):_=r;const x="next"===n||!n,T="prev"===n||!n;let S=0,E=0;const C=y?Math.ceil(c.length/p.grid.rows):c.length,k=(y?c[r].column:r)+(f&&void 0===s?-g/2+.5:0);if(k<v){S=Math.max(v-k,m);for(let t=0;t<v-k;t+=1){const e=t-Math.floor(t/C)*C;if(y){const t=C-e-1;for(let e=c.length-1;e>=0;e-=1)c[e].column===t&&b.push(e)}else b.push(C-e-1)}}else if(k+g>C-v){E=Math.max(k-(C-2*v),m);for(let t=0;t<E;t+=1){const e=t-Math.floor(t/C)*C;y?c.forEach(((t,i)=>{t.column===e&&w.push(i)})):w.push(e)}}if(l.__preventObserver__=!0,requestAnimationFrame((()=>{l.__preventObserver__=!1})),T&&b.forEach((t=>{c[t].swiperLoopMoveDOM=!0,h.prepend(c[t]),c[t].swiperLoopMoveDOM=!1})),x&&w.forEach((t=>{c[t].swiperLoopMoveDOM=!0,h.append(c[t]),c[t].swiperLoopMoveDOM=!1})),l.recalcSlides(),"auto"===p.slidesPerView?l.updateSlides():y&&(b.length>0&&T||w.length>0&&x)&&l.slides.forEach(((t,e)=>{l.grid.updateSlide(e,t,l.slides)})),p.watchSlidesProgress&&l.updateSlidesOffset(),i)if(b.length>0&&T){if(void 0===e){const t=l.slidesGrid[_],e=l.slidesGrid[_+S]-t;a?l.setTranslate(l.translate-e):(l.slideTo(_+Math.ceil(S),0,!1,!0),s&&(l.touchEventsData.startTranslate=l.touchEventsData.startTranslate-e,l.touchEventsData.currentTranslate=l.touchEventsData.currentTranslate-e))}else if(s){const t=y?b.length/p.grid.rows:b.length;l.slideTo(l.activeIndex+t,0,!1,!0),l.touchEventsData.currentTranslate=l.translate}}else if(w.length>0&&x)if(void 0===e){const t=l.slidesGrid[_],e=l.slidesGrid[_-E]-t;a?l.setTranslate(l.translate-e):(l.slideTo(_-E,0,!1,!0),s&&(l.touchEventsData.startTranslate=l.touchEventsData.startTranslate-e,l.touchEventsData.currentTranslate=l.touchEventsData.currentTranslate-e))}else{const t=y?w.length/p.grid.rows:w.length;l.slideTo(l.activeIndex-t,0,!1,!0)}if(l.allowSlidePrev=d,l.allowSlideNext=u,l.controller&&l.controller.control&&!o){const t={slideRealIndex:e,direction:n,setTranslate:s,activeSlideIndex:r,byController:!0};Array.isArray(l.controller.control)?l.controller.control.forEach((e=>{!e.destroyed&&e.params.loop&&e.loopFix({...t,slideTo:e.params.slidesPerView===p.slidesPerView&&i})})):l.controller.control instanceof l.constructor&&l.controller.control.params.loop&&l.controller.control.loopFix({...t,slideTo:l.controller.control.params.slidesPerView===p.slidesPerView&&i})}l.emit("loopFix")},loopDestroy:function(){const t=this,{params:e,slidesEl:i}=t;if(!e.loop||t.virtual&&t.params.virtual.enabled)return;t.recalcSlides();const n=[];t.slides.forEach((t=>{const e=void 0===t.swiperSlideIndex?1*t.getAttribute("data-swiper-slide-index"):t.swiperSlideIndex;n[e]=t})),t.slides.forEach((t=>{t.removeAttribute("data-swiper-slide-index")})),n.forEach((t=>{i.append(t)})),t.recalcSlides(),t.slideTo(t.realIndex,0)}};function Ct(t,e,i){const n=$(),{params:s}=t,r=s.edgeSwipeDetection,o=s.edgeSwipeThreshold;return!r||!(i<=o||i>=n.innerWidth-o)||"prevent"===r&&(e.preventDefault(),!0)}function kt(t){const e=this,i=W();let n=t;n.originalEvent&&(n=n.originalEvent);const s=e.touchEventsData;if("pointerdown"===n.type){if(null!==s.pointerId&&s.pointerId!==n.pointerId)return;s.pointerId=n.pointerId}else"touchstart"===n.type&&1===n.targetTouches.length&&(s.touchId=n.targetTouches[0].identifier);if("touchstart"===n.type)return void Ct(e,n,n.targetTouches[0].pageX);const{params:r,touches:o,enabled:a}=e;if(!a)return;if(!r.simulateTouch&&"mouse"===n.pointerType)return;if(e.animating&&r.preventInteractionOnTransition)return;!e.animating&&r.cssMode&&r.loop&&e.loopFix();let l=n.target;if("wrapper"===r.touchEventsTarget&&!e.wrapperEl.contains(l))return;if("which"in n&&3===n.which)return;if("button"in n&&n.button>0)return;if(s.isTouched&&s.isMoved)return;const c=!!r.noSwipingClass&&""!==r.noSwipingClass,d=n.composedPath?n.composedPath():n.path;c&&n.target&&n.target.shadowRoot&&d&&(l=d[0]);const u=r.noSwipingSelector?r.noSwipingSelector:`.${r.noSwipingClass}`,h=!(!n.target||!n.target.shadowRoot);if(r.noSwiping&&(h?function(t,e){return void 0===e&&(e=this),function e(i){if(!i||i===W()||i===$())return null;i.assignedSlot&&(i=i.assignedSlot);const n=i.closest(t);return n||i.getRootNode?n||e(i.getRootNode().host):null}(e)}(u,l):l.closest(u)))return void(e.allowClick=!0);if(r.swipeHandler&&!l.closest(r.swipeHandler))return;o.currentX=n.pageX,o.currentY=n.pageY;const p=o.currentX,f=o.currentY;if(!Ct(e,n,p))return;Object.assign(s,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),o.startX=p,o.startY=f,s.touchStartTime=U(),e.allowClick=!0,e.updateSize(),e.swipeDirection=void 0,r.threshold>0&&(s.allowThresholdMove=!1);let g=!0;l.matches(s.focusableElements)&&(g=!1,"SELECT"===l.nodeName&&(s.isTouched=!1)),i.activeElement&&i.activeElement.matches(s.focusableElements)&&i.activeElement!==l&&i.activeElement.blur();const m=g&&e.allowTouchMove&&r.touchStartPreventDefault;!r.touchStartForcePreventDefault&&!m||l.isContentEditable||n.preventDefault(),r.freeMode&&r.freeMode.enabled&&e.freeMode&&e.animating&&!r.cssMode&&e.freeMode.onTouchStart(),e.emit("touchStart",n)}function Mt(t){const e=W(),i=this,n=i.touchEventsData,{params:s,touches:r,rtlTranslate:o,enabled:a}=i;if(!a)return;if(!s.simulateTouch&&"mouse"===t.pointerType)return;let l,c=t;if(c.originalEvent&&(c=c.originalEvent),"pointermove"===c.type){if(null!==n.touchId)return;if(c.pointerId!==n.pointerId)return}if("touchmove"===c.type){if(l=[...c.changedTouches].filter((t=>t.identifier===n.touchId))[0],!l||l.identifier!==n.touchId)return}else l=c;if(!n.isTouched)return void(n.startMoving&&n.isScrolling&&i.emit("touchMoveOpposite",c));const d=l.pageX,u=l.pageY;if(c.preventedByNestedSwiper)return r.startX=d,void(r.startY=u);if(!i.allowTouchMove)return c.target.matches(n.focusableElements)||(i.allowClick=!1),void(n.isTouched&&(Object.assign(r,{startX:d,startY:u,currentX:d,currentY:u}),n.touchStartTime=U()));if(s.touchReleaseOnEdges&&!s.loop)if(i.isVertical()){if(u<r.startY&&i.translate<=i.maxTranslate()||u>r.startY&&i.translate>=i.minTranslate())return n.isTouched=!1,void(n.isMoved=!1)}else if(d<r.startX&&i.translate<=i.maxTranslate()||d>r.startX&&i.translate>=i.minTranslate())return;if(e.activeElement&&c.target===e.activeElement&&c.target.matches(n.focusableElements))return n.isMoved=!0,void(i.allowClick=!1);n.allowTouchCallbacks&&i.emit("touchMove",c),r.previousX=r.currentX,r.previousY=r.currentY,r.currentX=d,r.currentY=u;const h=r.currentX-r.startX,p=r.currentY-r.startY;if(i.params.threshold&&Math.sqrt(h**2+p**2)<i.params.threshold)return;if(void 0===n.isScrolling){let t;i.isHorizontal()&&r.currentY===r.startY||i.isVertical()&&r.currentX===r.startX?n.isScrolling=!1:h*h+p*p>=25&&(t=180*Math.atan2(Math.abs(p),Math.abs(h))/Math.PI,n.isScrolling=i.isHorizontal()?t>s.touchAngle:90-t>s.touchAngle)}if(n.isScrolling&&i.emit("touchMoveOpposite",c),void 0===n.startMoving&&(r.currentX===r.startX&&r.currentY===r.startY||(n.startMoving=!0)),n.isScrolling||"touchmove"===c.type&&n.preventTouchMoveFromPointerMove)return void(n.isTouched=!1);if(!n.startMoving)return;i.allowClick=!1,!s.cssMode&&c.cancelable&&c.preventDefault(),s.touchMoveStopPropagation&&!s.nested&&c.stopPropagation();let f=i.isHorizontal()?h:p,g=i.isHorizontal()?r.currentX-r.previousX:r.currentY-r.previousY;s.oneWayMovement&&(f=Math.abs(f)*(o?1:-1),g=Math.abs(g)*(o?1:-1)),r.diff=f,f*=s.touchRatio,o&&(f=-f,g=-g);const m=i.touchesDirection;i.swipeDirection=f>0?"prev":"next",i.touchesDirection=g>0?"prev":"next";const v=i.params.loop&&!s.cssMode,y="next"===i.touchesDirection&&i.allowSlideNext||"prev"===i.touchesDirection&&i.allowSlidePrev;if(!n.isMoved){if(v&&y&&i.loopFix({direction:i.swipeDirection}),n.startTranslate=i.getTranslate(),i.setTransition(0),i.animating){const t=new window.CustomEvent("transitionend",{bubbles:!0,cancelable:!0,detail:{bySwiperTouchMove:!0}});i.wrapperEl.dispatchEvent(t)}n.allowMomentumBounce=!1,!s.grabCursor||!0!==i.allowSlideNext&&!0!==i.allowSlidePrev||i.setGrabCursor(!0),i.emit("sliderFirstMove",c)}if((new Date).getTime(),n.isMoved&&n.allowThresholdMove&&m!==i.touchesDirection&&v&&y&&Math.abs(f)>=1)return Object.assign(r,{startX:d,startY:u,currentX:d,currentY:u,startTranslate:n.currentTranslate}),n.loopSwapReset=!0,void(n.startTranslate=n.currentTranslate);i.emit("sliderMove",c),n.isMoved=!0,n.currentTranslate=f+n.startTranslate;let b=!0,w=s.resistanceRatio;if(s.touchReleaseOnEdges&&(w=0),f>0?(v&&y&&n.allowThresholdMove&&n.currentTranslate>(s.centeredSlides?i.minTranslate()-i.slidesSizesGrid[i.activeIndex+1]:i.minTranslate())&&i.loopFix({direction:"prev",setTranslate:!0,activeSlideIndex:0}),n.currentTranslate>i.minTranslate()&&(b=!1,s.resistance&&(n.currentTranslate=i.minTranslate()-1+(-i.minTranslate()+n.startTranslate+f)**w))):f<0&&(v&&y&&n.allowThresholdMove&&n.currentTranslate<(s.centeredSlides?i.maxTranslate()+i.slidesSizesGrid[i.slidesSizesGrid.length-1]:i.maxTranslate())&&i.loopFix({direction:"next",setTranslate:!0,activeSlideIndex:i.slides.length-("auto"===s.slidesPerView?i.slidesPerViewDynamic():Math.ceil(parseFloat(s.slidesPerView,10)))}),n.currentTranslate<i.maxTranslate()&&(b=!1,s.resistance&&(n.currentTranslate=i.maxTranslate()+1-(i.maxTranslate()-n.startTranslate-f)**w))),b&&(c.preventedByNestedSwiper=!0),!i.allowSlideNext&&"next"===i.swipeDirection&&n.currentTranslate<n.startTranslate&&(n.currentTranslate=n.startTranslate),!i.allowSlidePrev&&"prev"===i.swipeDirection&&n.currentTranslate>n.startTranslate&&(n.currentTranslate=n.startTranslate),i.allowSlidePrev||i.allowSlideNext||(n.currentTranslate=n.startTranslate),s.threshold>0){if(!(Math.abs(f)>s.threshold||n.allowThresholdMove))return void(n.currentTranslate=n.startTranslate);if(!n.allowThresholdMove)return n.allowThresholdMove=!0,r.startX=r.currentX,r.startY=r.currentY,n.currentTranslate=n.startTranslate,void(r.diff=i.isHorizontal()?r.currentX-r.startX:r.currentY-r.startY)}s.followFinger&&!s.cssMode&&((s.freeMode&&s.freeMode.enabled&&i.freeMode||s.watchSlidesProgress)&&(i.updateActiveIndex(),i.updateSlidesClasses()),s.freeMode&&s.freeMode.enabled&&i.freeMode&&i.freeMode.onTouchMove(),i.updateProgress(n.currentTranslate),i.setTranslate(n.currentTranslate))}function Ot(t){const e=this,i=e.touchEventsData;let n,s=t;s.originalEvent&&(s=s.originalEvent);if("touchend"===s.type||"touchcancel"===s.type){if(n=[...s.changedTouches].filter((t=>t.identifier===i.touchId))[0],!n||n.identifier!==i.touchId)return}else{if(null!==i.touchId)return;if(s.pointerId!==i.pointerId)return;n=s}if(["pointercancel","pointerout","pointerleave","contextmenu"].includes(s.type)){if(!(["pointercancel","contextmenu"].includes(s.type)&&(e.browser.isSafari||e.browser.isWebView)))return}i.pointerId=null,i.touchId=null;const{params:r,touches:o,rtlTranslate:a,slidesGrid:l,enabled:c}=e;if(!c)return;if(!r.simulateTouch&&"mouse"===s.pointerType)return;if(i.allowTouchCallbacks&&e.emit("touchEnd",s),i.allowTouchCallbacks=!1,!i.isTouched)return i.isMoved&&r.grabCursor&&e.setGrabCursor(!1),i.isMoved=!1,void(i.startMoving=!1);r.grabCursor&&i.isMoved&&i.isTouched&&(!0===e.allowSlideNext||!0===e.allowSlidePrev)&&e.setGrabCursor(!1);const d=U(),u=d-i.touchStartTime;if(e.allowClick){const t=s.path||s.composedPath&&s.composedPath();e.updateClickedSlide(t&&t[0]||s.target,t),e.emit("tap click",s),u<300&&d-i.lastClickTime<300&&e.emit("doubleTap doubleClick",s)}if(i.lastClickTime=U(),q((()=>{e.destroyed||(e.allowClick=!0)})),!i.isTouched||!i.isMoved||!e.swipeDirection||0===o.diff&&!i.loopSwapReset||i.currentTranslate===i.startTranslate&&!i.loopSwapReset)return i.isTouched=!1,i.isMoved=!1,void(i.startMoving=!1);let h;if(i.isTouched=!1,i.isMoved=!1,i.startMoving=!1,h=r.followFinger?a?e.translate:-e.translate:-i.currentTranslate,r.cssMode)return;if(r.freeMode&&r.freeMode.enabled)return void e.freeMode.onTouchEnd({currentPos:h});const p=h>=-e.maxTranslate()&&!e.params.loop;let f=0,g=e.slidesSizesGrid[0];for(let t=0;t<l.length;t+=t<r.slidesPerGroupSkip?1:r.slidesPerGroup){const e=t<r.slidesPerGroupSkip-1?1:r.slidesPerGroup;void 0!==l[t+e]?(p||h>=l[t]&&h<l[t+e])&&(f=t,g=l[t+e]-l[t]):(p||h>=l[t])&&(f=t,g=l[l.length-1]-l[l.length-2])}let m=null,v=null;r.rewind&&(e.isBeginning?v=r.virtual&&r.virtual.enabled&&e.virtual?e.virtual.slides.length-1:e.slides.length-1:e.isEnd&&(m=0));const y=(h-l[f])/g,b=f<r.slidesPerGroupSkip-1?1:r.slidesPerGroup;if(u>r.longSwipesMs){if(!r.longSwipes)return void e.slideTo(e.activeIndex);"next"===e.swipeDirection&&(y>=r.longSwipesRatio?e.slideTo(r.rewind&&e.isEnd?m:f+b):e.slideTo(f)),"prev"===e.swipeDirection&&(y>1-r.longSwipesRatio?e.slideTo(f+b):null!==v&&y<0&&Math.abs(y)>r.longSwipesRatio?e.slideTo(v):e.slideTo(f))}else{if(!r.shortSwipes)return void e.slideTo(e.activeIndex);e.navigation&&(s.target===e.navigation.nextEl||s.target===e.navigation.prevEl)?s.target===e.navigation.nextEl?e.slideTo(f+b):e.slideTo(f):("next"===e.swipeDirection&&e.slideTo(null!==m?m:f+b),"prev"===e.swipeDirection&&e.slideTo(null!==v?v:f))}}function At(){const t=this,{params:e,el:i}=t;if(i&&0===i.offsetWidth)return;e.breakpoints&&t.setBreakpoint();const{allowSlideNext:n,allowSlidePrev:s,snapGrid:r}=t,o=t.virtual&&t.params.virtual.enabled;t.allowSlideNext=!0,t.allowSlidePrev=!0,t.updateSize(),t.updateSlides(),t.updateSlidesClasses();const a=o&&e.loop;!("auto"===e.slidesPerView||e.slidesPerView>1)||!t.isEnd||t.isBeginning||t.params.centeredSlides||a?t.params.loop&&!o?t.slideToLoop(t.realIndex,0,!1,!0):t.slideTo(t.activeIndex,0,!1,!0):t.slideTo(t.slides.length-1,0,!1,!0),t.autoplay&&t.autoplay.running&&t.autoplay.paused&&(clearTimeout(t.autoplay.resizeTimeout),t.autoplay.resizeTimeout=setTimeout((()=>{t.autoplay&&t.autoplay.running&&t.autoplay.paused&&t.autoplay.resume()}),500)),t.allowSlidePrev=s,t.allowSlideNext=n,t.params.watchOverflow&&r!==t.snapGrid&&t.checkOverflow()}function It(t){const e=this;e.enabled&&(e.allowClick||(e.params.preventClicks&&t.preventDefault(),e.params.preventClicksPropagation&&e.animating&&(t.stopPropagation(),t.stopImmediatePropagation())))}function Pt(){const t=this,{wrapperEl:e,rtlTranslate:i,enabled:n}=t;if(!n)return;let s;t.previousTranslate=t.translate,t.isHorizontal()?t.translate=-e.scrollLeft:t.translate=-e.scrollTop,0===t.translate&&(t.translate=0),t.updateActiveIndex(),t.updateSlidesClasses();const r=t.maxTranslate()-t.minTranslate();s=0===r?0:(t.translate-t.minTranslate())/r,s!==t.progress&&t.updateProgress(i?-t.translate:t.translate),t.emit("setTranslate",t.translate,!1)}function Lt(t){const e=this;yt(e,t.target),e.params.cssMode||"auto"!==e.params.slidesPerView&&!e.params.autoHeight||e.update()}function Dt(){const t=this;t.documentTouchHandlerProceeded||(t.documentTouchHandlerProceeded=!0,t.params.touchReleaseOnEdges&&(t.el.style.touchAction="auto"))}const zt=(t,e)=>{const i=W(),{params:n,el:s,wrapperEl:r,device:o}=t,a=!!n.nested,l="on"===e?"addEventListener":"removeEventListener",c=e;s&&"string"!=typeof s&&(i[l]("touchstart",t.onDocumentTouchStart,{passive:!1,capture:a}),s[l]("touchstart",t.onTouchStart,{passive:!1}),s[l]("pointerdown",t.onTouchStart,{passive:!1}),i[l]("touchmove",t.onTouchMove,{passive:!1,capture:a}),i[l]("pointermove",t.onTouchMove,{passive:!1,capture:a}),i[l]("touchend",t.onTouchEnd,{passive:!0}),i[l]("pointerup",t.onTouchEnd,{passive:!0}),i[l]("pointercancel",t.onTouchEnd,{passive:!0}),i[l]("touchcancel",t.onTouchEnd,{passive:!0}),i[l]("pointerout",t.onTouchEnd,{passive:!0}),i[l]("pointerleave",t.onTouchEnd,{passive:!0}),i[l]("contextmenu",t.onTouchEnd,{passive:!0}),(n.preventClicks||n.preventClicksPropagation)&&s[l]("click",t.onClick,!0),n.cssMode&&r[l]("scroll",t.onScroll),n.updateOnWindowResize?t[c](o.ios||o.android?"resize orientationchange observerUpdate":"resize observerUpdate",At,!0):t[c]("observerUpdate",At,!0),s[l]("load",t.onLoad,{capture:!0}))};const Bt=(t,e)=>t.grid&&e.grid&&e.grid.rows>1;var Rt={init:!0,direction:"horizontal",oneWayMovement:!1,swiperElementNodeName:"SWIPER-CONTAINER",touchEventsTarget:"wrapper",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,resizeObserver:!0,nested:!1,createElements:!1,eventsPrefix:"swiper",enabled:!0,focusableElements:"input, select, option, textarea, button, video, label",width:null,height:null,preventInteractionOnTransition:!1,userAgent:null,url:null,edgeSwipeDetection:!1,edgeSwipeThreshold:20,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,breakpointsBase:"window",spaceBetween:0,slidesPerView:1,slidesPerGroup:1,slidesPerGroupSkip:0,slidesPerGroupAuto:!1,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!0,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:5,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,loop:!1,loopAddBlankSlides:!0,loopAdditionalSlides:0,loopPreventsSliding:!0,rewind:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,maxBackfaceHiddenSlides:10,containerModifierClass:"swiper-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-blank",slideActiveClass:"swiper-slide-active",slideVisibleClass:"swiper-slide-visible",slideFullyVisibleClass:"swiper-slide-fully-visible",slideNextClass:"swiper-slide-next",slidePrevClass:"swiper-slide-prev",wrapperClass:"swiper-wrapper",lazyPreloaderClass:"swiper-lazy-preloader",lazyPreloadPrevNext:0,runCallbacksOnInit:!0,_emitClasses:!1};function Ft(t,e){return function(i){void 0===i&&(i={});const n=Object.keys(i)[0],s=i[n];"object"==typeof s&&null!==s?(!0===t[n]&&(t[n]={enabled:!0}),"navigation"===n&&t[n]&&t[n].enabled&&!t[n].prevEl&&!t[n].nextEl&&(t[n].auto=!0),["pagination","scrollbar"].indexOf(n)>=0&&t[n]&&t[n].enabled&&!t[n].el&&(t[n].auto=!0),n in t&&"enabled"in s?("object"!=typeof t[n]||"enabled"in t[n]||(t[n].enabled=!0),t[n]||(t[n]={enabled:!1}),Z(e,i)):Z(e,i)):Z(e,i)}}const Ht={eventsEmitter:gt,update:_t,translate:xt,transition:{setTransition:function(t,e){const i=this;i.params.cssMode||(i.wrapperEl.style.transitionDuration=`${t}ms`,i.wrapperEl.style.transitionDelay=0===t?"0ms":""),i.emit("setTransition",t,e)},transitionStart:function(t,e){void 0===t&&(t=!0);const i=this,{params:n}=i;n.cssMode||(n.autoHeight&&i.updateAutoHeight(),Tt({swiper:i,runCallbacks:t,direction:e,step:"Start"}))},transitionEnd:function(t,e){void 0===t&&(t=!0);const i=this,{params:n}=i;i.animating=!1,n.cssMode||(i.setTransition(0),Tt({swiper:i,runCallbacks:t,direction:e,step:"End"}))}},slide:St,loop:Et,grabCursor:{setGrabCursor:function(t){const e=this;if(!e.params.simulateTouch||e.params.watchOverflow&&e.isLocked||e.params.cssMode)return;const i="container"===e.params.touchEventsTarget?e.el:e.wrapperEl;e.isElement&&(e.__preventObserver__=!0),i.style.cursor="move",i.style.cursor=t?"grabbing":"grab",e.isElement&&requestAnimationFrame((()=>{e.__preventObserver__=!1}))},unsetGrabCursor:function(){const t=this;t.params.watchOverflow&&t.isLocked||t.params.cssMode||(t.isElement&&(t.__preventObserver__=!0),t["container"===t.params.touchEventsTarget?"el":"wrapperEl"].style.cursor="",t.isElement&&requestAnimationFrame((()=>{t.__preventObserver__=!1})))}},events:{attachEvents:function(){const t=this,{params:e}=t;t.onTouchStart=kt.bind(t),t.onTouchMove=Mt.bind(t),t.onTouchEnd=Ot.bind(t),t.onDocumentTouchStart=Dt.bind(t),e.cssMode&&(t.onScroll=Pt.bind(t)),t.onClick=It.bind(t),t.onLoad=Lt.bind(t),zt(t,"on")},detachEvents:function(){zt(this,"off")}},breakpoints:{setBreakpoint:function(){const t=this,{realIndex:e,initialized:i,params:n,el:s}=t,r=n.breakpoints;if(!r||r&&0===Object.keys(r).length)return;const o=t.getBreakpoint(r,t.params.breakpointsBase,t.el);if(!o||t.currentBreakpoint===o)return;const a=(o in r?r[o]:void 0)||t.originalParams,l=Bt(t,n),c=Bt(t,a),d=t.params.grabCursor,u=a.grabCursor,h=n.enabled;l&&!c?(s.classList.remove(`${n.containerModifierClass}grid`,`${n.containerModifierClass}grid-column`),t.emitContainerClasses()):!l&&c&&(s.classList.add(`${n.containerModifierClass}grid`),(a.grid.fill&&"column"===a.grid.fill||!a.grid.fill&&"column"===n.grid.fill)&&s.classList.add(`${n.containerModifierClass}grid-column`),t.emitContainerClasses()),d&&!u?t.unsetGrabCursor():!d&&u&&t.setGrabCursor(),["navigation","pagination","scrollbar"].forEach((e=>{if(void 0===a[e])return;const i=n[e]&&n[e].enabled,s=a[e]&&a[e].enabled;i&&!s&&t[e].disable(),!i&&s&&t[e].enable()}));const p=a.direction&&a.direction!==n.direction,f=n.loop&&(a.slidesPerView!==n.slidesPerView||p),g=n.loop;p&&i&&t.changeDirection(),Z(t.params,a);const m=t.params.enabled,v=t.params.loop;Object.assign(t,{allowTouchMove:t.params.allowTouchMove,allowSlideNext:t.params.allowSlideNext,allowSlidePrev:t.params.allowSlidePrev}),h&&!m?t.disable():!h&&m&&t.enable(),t.currentBreakpoint=o,t.emit("_beforeBreakpoint",a),i&&(f?(t.loopDestroy(),t.loopCreate(e),t.updateSlides()):!g&&v?(t.loopCreate(e),t.updateSlides()):g&&!v&&t.loopDestroy()),t.emit("breakpoint",a)},getBreakpoint:function(t,e,i){if(void 0===e&&(e="window"),!t||"container"===e&&!i)return;let n=!1;const s=$(),r="window"===e?s.innerHeight:i.clientHeight,o=Object.keys(t).map((t=>{if("string"==typeof t&&0===t.indexOf("@")){const e=parseFloat(t.substr(1));return{value:r*e,point:t}}return{value:t,point:t}}));o.sort(((t,e)=>parseInt(t.value,10)-parseInt(e.value,10)));for(let t=0;t<o.length;t+=1){const{point:r,value:a}=o[t];"window"===e?s.matchMedia(`(min-width: ${a}px)`).matches&&(n=r):a<=i.clientWidth&&(n=r)}return n||"max"}},checkOverflow:{checkOverflow:function(){const t=this,{isLocked:e,params:i}=t,{slidesOffsetBefore:n}=i;if(n){const e=t.slides.length-1,i=t.slidesGrid[e]+t.slidesSizesGrid[e]+2*n;t.isLocked=t.size>i}else t.isLocked=1===t.snapGrid.length;!0===i.allowSlideNext&&(t.allowSlideNext=!t.isLocked),!0===i.allowSlidePrev&&(t.allowSlidePrev=!t.isLocked),e&&e!==t.isLocked&&(t.isEnd=!1),e!==t.isLocked&&t.emit(t.isLocked?"lock":"unlock")}},classes:{addClasses:function(){const t=this,{classNames:e,params:i,rtl:n,el:s,device:r}=t,o=function(t,e){const i=[];return t.forEach((t=>{"object"==typeof t?Object.keys(t).forEach((n=>{t[n]&&i.push(e+n)})):"string"==typeof t&&i.push(e+t)})),i}(["initialized",i.direction,{"free-mode":t.params.freeMode&&i.freeMode.enabled},{autoheight:i.autoHeight},{rtl:n},{grid:i.grid&&i.grid.rows>1},{"grid-column":i.grid&&i.grid.rows>1&&"column"===i.grid.fill},{android:r.android},{ios:r.ios},{"css-mode":i.cssMode},{centered:i.cssMode&&i.centeredSlides},{"watch-progress":i.watchSlidesProgress}],i.containerModifierClass);e.push(...o),s.classList.add(...e),t.emitContainerClasses()},removeClasses:function(){const{el:t,classNames:e}=this;t&&"string"!=typeof t&&(t.classList.remove(...e),this.emitContainerClasses())}}},Gt={};class Yt{constructor(){let t,e;for(var i=arguments.length,n=new Array(i),s=0;s<i;s++)n[s]=arguments[s];1===n.length&&n[0].constructor&&"Object"===Object.prototype.toString.call(n[0]).slice(8,-1)?e=n[0]:[t,e]=n,e||(e={}),e=Z({},e),t&&!e.el&&(e.el=t);const r=W();if(e.el&&"string"==typeof e.el&&r.querySelectorAll(e.el).length>1){const t=[];return r.querySelectorAll(e.el).forEach((i=>{const n=Z({},e,{el:i});t.push(new Yt(n))})),t}const o=this;o.__swiper__=!0,o.support=ht(),o.device=pt({userAgent:e.userAgent}),o.browser=ft(),o.eventsListeners={},o.eventsAnyListeners=[],o.modules=[...o.__modules__],e.modules&&Array.isArray(e.modules)&&o.modules.push(...e.modules);const a={};o.modules.forEach((t=>{t({params:e,swiper:o,extendParams:Ft(e,a),on:o.on.bind(o),once:o.once.bind(o),off:o.off.bind(o),emit:o.emit.bind(o)})}));const l=Z({},Rt,a);return o.params=Z({},l,Gt,e),o.originalParams=Z({},o.params),o.passedParams=Z({},e),o.params&&o.params.on&&Object.keys(o.params.on).forEach((t=>{o.on(t,o.params.on[t])})),o.params&&o.params.onAny&&o.onAny(o.params.onAny),Object.assign(o,{enabled:o.params.enabled,el:t,classNames:[],slides:[],slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:()=>"horizontal"===o.params.direction,isVertical:()=>"vertical"===o.params.direction,activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,cssOverflowAdjustment(){return Math.trunc(this.translate/2**23)*2**23},allowSlideNext:o.params.allowSlideNext,allowSlidePrev:o.params.allowSlidePrev,touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,focusableElements:o.params.focusableElements,lastClickTime:0,clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,startMoving:void 0,pointerId:null,touchId:null},allowClick:!0,allowTouchMove:o.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),o.emit("_swiper"),o.params.init&&o.init(),o}getDirectionLabel(t){return this.isHorizontal()?t:{width:"height","margin-top":"margin-left","margin-bottom ":"margin-right","margin-left":"margin-top","margin-right":"margin-bottom","padding-left":"padding-top","padding-right":"padding-bottom",marginRight:"marginBottom"}[t]}getSlideIndex(t){const{slidesEl:e,params:i}=this,n=rt(et(e,`.${i.slideClass}, swiper-slide`)[0]);return rt(t)-n}getSlideIndexByData(t){return this.getSlideIndex(this.slides.filter((e=>1*e.getAttribute("data-swiper-slide-index")===t))[0])}recalcSlides(){const{slidesEl:t,params:e}=this;this.slides=et(t,`.${e.slideClass}, swiper-slide`)}enable(){const t=this;t.enabled||(t.enabled=!0,t.params.grabCursor&&t.setGrabCursor(),t.emit("enable"))}disable(){const t=this;t.enabled&&(t.enabled=!1,t.params.grabCursor&&t.unsetGrabCursor(),t.emit("disable"))}setProgress(t,e){const i=this;t=Math.min(Math.max(t,0),1);const n=i.minTranslate(),s=(i.maxTranslate()-n)*t+n;i.translateTo(s,void 0===e?0:e),i.updateActiveIndex(),i.updateSlidesClasses()}emitContainerClasses(){const t=this;if(!t.params._emitClasses||!t.el)return;const e=t.el.className.split(" ").filter((e=>0===e.indexOf("swiper")||0===e.indexOf(t.params.containerModifierClass)));t.emit("_containerClasses",e.join(" "))}getSlideClasses(t){const e=this;return e.destroyed?"":t.className.split(" ").filter((t=>0===t.indexOf("swiper-slide")||0===t.indexOf(e.params.slideClass))).join(" ")}emitSlidesClasses(){const t=this;if(!t.params._emitClasses||!t.el)return;const e=[];t.slides.forEach((i=>{const n=t.getSlideClasses(i);e.push({slideEl:i,classNames:n}),t.emit("_slideClass",i,n)})),t.emit("_slideClasses",e)}slidesPerViewDynamic(t,e){void 0===t&&(t="current"),void 0===e&&(e=!1);const{params:i,slides:n,slidesGrid:s,slidesSizesGrid:r,size:o,activeIndex:a}=this;let l=1;if("number"==typeof i.slidesPerView)return i.slidesPerView;if(i.centeredSlides){let t,e=n[a]?Math.ceil(n[a].swiperSlideSize):0;for(let i=a+1;i<n.length;i+=1)n[i]&&!t&&(e+=Math.ceil(n[i].swiperSlideSize),l+=1,e>o&&(t=!0));for(let i=a-1;i>=0;i-=1)n[i]&&!t&&(e+=n[i].swiperSlideSize,l+=1,e>o&&(t=!0))}else if("current"===t)for(let t=a+1;t<n.length;t+=1){(e?s[t]+r[t]-s[a]<o:s[t]-s[a]<o)&&(l+=1)}else for(let t=a-1;t>=0;t-=1){s[a]-s[t]<o&&(l+=1)}return l}update(){const t=this;if(!t||t.destroyed)return;const{snapGrid:e,params:i}=t;function n(){const e=t.rtlTranslate?-1*t.translate:t.translate,i=Math.min(Math.max(e,t.maxTranslate()),t.minTranslate());t.setTranslate(i),t.updateActiveIndex(),t.updateSlidesClasses()}let s;if(i.breakpoints&&t.setBreakpoint(),[...t.el.querySelectorAll('[loading="lazy"]')].forEach((e=>{e.complete&&yt(t,e)})),t.updateSize(),t.updateSlides(),t.updateProgress(),t.updateSlidesClasses(),i.freeMode&&i.freeMode.enabled&&!i.cssMode)n(),i.autoHeight&&t.updateAutoHeight();else{if(("auto"===i.slidesPerView||i.slidesPerView>1)&&t.isEnd&&!i.centeredSlides){const e=t.virtual&&i.virtual.enabled?t.virtual.slides:t.slides;s=t.slideTo(e.length-1,0,!1,!0)}else s=t.slideTo(t.activeIndex,0,!1,!0);s||n()}i.watchOverflow&&e!==t.snapGrid&&t.checkOverflow(),t.emit("update")}changeDirection(t,e){void 0===e&&(e=!0);const i=this,n=i.params.direction;return t||(t="horizontal"===n?"vertical":"horizontal"),t===n||"horizontal"!==t&&"vertical"!==t||(i.el.classList.remove(`${i.params.containerModifierClass}${n}`),i.el.classList.add(`${i.params.containerModifierClass}${t}`),i.emitContainerClasses(),i.params.direction=t,i.slides.forEach((e=>{"vertical"===t?e.style.width="":e.style.height=""})),i.emit("changeDirection"),e&&i.update()),i}changeLanguageDirection(t){const e=this;e.rtl&&"rtl"===t||!e.rtl&&"ltr"===t||(e.rtl="rtl"===t,e.rtlTranslate="horizontal"===e.params.direction&&e.rtl,e.rtl?(e.el.classList.add(`${e.params.containerModifierClass}rtl`),e.el.dir="rtl"):(e.el.classList.remove(`${e.params.containerModifierClass}rtl`),e.el.dir="ltr"),e.update())}mount(t){const e=this;if(e.mounted)return!0;let i=t||e.params.el;if("string"==typeof i&&(i=document.querySelector(i)),!i)return!1;i.swiper=e,i.parentNode&&i.parentNode.host&&i.parentNode.host.nodeName===e.params.swiperElementNodeName.toUpperCase()&&(e.isElement=!0);const n=()=>`.${(e.params.wrapperClass||"").trim().split(" ").join(".")}`;let s=(()=>{if(i&&i.shadowRoot&&i.shadowRoot.querySelector){return i.shadowRoot.querySelector(n())}return et(i,n())[0]})();return!s&&e.params.createElements&&(s=nt("div",e.params.wrapperClass),i.append(s),et(i,`.${e.params.slideClass}`).forEach((t=>{s.append(t)}))),Object.assign(e,{el:i,wrapperEl:s,slidesEl:e.isElement&&!i.parentNode.host.slideSlots?i.parentNode.host:s,hostEl:e.isElement?i.parentNode.host:i,mounted:!0,rtl:"rtl"===i.dir.toLowerCase()||"rtl"===st(i,"direction"),rtlTranslate:"horizontal"===e.params.direction&&("rtl"===i.dir.toLowerCase()||"rtl"===st(i,"direction")),wrongRTL:"-webkit-box"===st(s,"display")}),!0}init(t){const e=this;if(e.initialized)return e;if(!1===e.mount(t))return e;e.emit("beforeInit"),e.params.breakpoints&&e.setBreakpoint(),e.addClasses(),e.updateSize(),e.updateSlides(),e.params.watchOverflow&&e.checkOverflow(),e.params.grabCursor&&e.enabled&&e.setGrabCursor(),e.params.loop&&e.virtual&&e.params.virtual.enabled?e.slideTo(e.params.initialSlide+e.virtual.slidesBefore,0,e.params.runCallbacksOnInit,!1,!0):e.slideTo(e.params.initialSlide,0,e.params.runCallbacksOnInit,!1,!0),e.params.loop&&e.loopCreate(),e.attachEvents();const i=[...e.el.querySelectorAll('[loading="lazy"]')];return e.isElement&&i.push(...e.hostEl.querySelectorAll('[loading="lazy"]')),i.forEach((t=>{t.complete?yt(e,t):t.addEventListener("load",(t=>{yt(e,t.target)}))})),wt(e),e.initialized=!0,wt(e),e.emit("init"),e.emit("afterInit"),e}destroy(t,e){void 0===t&&(t=!0),void 0===e&&(e=!0);const i=this,{params:n,el:s,wrapperEl:r,slides:o}=i;return void 0===i.params||i.destroyed||(i.emit("beforeDestroy"),i.initialized=!1,i.detachEvents(),n.loop&&i.loopDestroy(),e&&(i.removeClasses(),s&&"string"!=typeof s&&s.removeAttribute("style"),r&&r.removeAttribute("style"),o&&o.length&&o.forEach((t=>{t.classList.remove(n.slideVisibleClass,n.slideFullyVisibleClass,n.slideActiveClass,n.slideNextClass,n.slidePrevClass),t.removeAttribute("style"),t.removeAttribute("data-swiper-slide-index")}))),i.emit("destroy"),Object.keys(i.eventsListeners).forEach((t=>{i.off(t)})),!1!==t&&(i.el&&"string"!=typeof i.el&&(i.el.swiper=null),function(t){const e=t;Object.keys(e).forEach((t=>{try{e[t]=null}catch(t){}try{delete e[t]}catch(t){}}))}(i)),i.destroyed=!0),null}static extendDefaults(t){Z(Gt,t)}static get extendedDefaults(){return Gt}static get defaults(){return Rt}static installModule(t){Yt.prototype.__modules__||(Yt.prototype.__modules__=[]);const e=Yt.prototype.__modules__;"function"==typeof t&&e.indexOf(t)<0&&e.push(t)}static use(t){return Array.isArray(t)?(t.forEach((t=>Yt.installModule(t))),Yt):(Yt.installModule(t),Yt)}}function Vt(t){return void 0===t&&(t=""),`.${t.trim().replace(/([\.:!+\/])/g,"\\$1").replace(/ /g,".")}`}Object.keys(Ht).forEach((t=>{Object.keys(Ht[t]).forEach((e=>{Yt.prototype[e]=Ht[t][e]}))})),Yt.use([function(t){let{swiper:e,on:i,emit:n}=t;const s=$();let r=null,o=null;const a=()=>{e&&!e.destroyed&&e.initialized&&(n("beforeResize"),n("resize"))},l=()=>{e&&!e.destroyed&&e.initialized&&n("orientationchange")};i("init",(()=>{e.params.resizeObserver&&void 0!==s.ResizeObserver?e&&!e.destroyed&&e.initialized&&(r=new ResizeObserver((t=>{o=s.requestAnimationFrame((()=>{const{width:i,height:n}=e;let s=i,r=n;t.forEach((t=>{let{contentBoxSize:i,contentRect:n,target:o}=t;o&&o!==e.el||(s=n?n.width:(i[0]||i).inlineSize,r=n?n.height:(i[0]||i).blockSize)})),s===i&&r===n||a()}))})),r.observe(e.el)):(s.addEventListener("resize",a),s.addEventListener("orientationchange",l))})),i("destroy",(()=>{o&&s.cancelAnimationFrame(o),r&&r.unobserve&&e.el&&(r.unobserve(e.el),r=null),s.removeEventListener("resize",a),s.removeEventListener("orientationchange",l)}))},function(t){let{swiper:e,extendParams:i,on:n,emit:s}=t;const r=[],o=$(),a=function(t,i){void 0===i&&(i={});const n=new(o.MutationObserver||o.WebkitMutationObserver)((t=>{if(e.__preventObserver__)return;if(1===t.length)return void s("observerUpdate",t[0]);const i=function(){s("observerUpdate",t[0])};o.requestAnimationFrame?o.requestAnimationFrame(i):o.setTimeout(i,0)}));n.observe(t,{attributes:void 0===i.attributes||i.attributes,childList:void 0===i.childList||i.childList,characterData:void 0===i.characterData||i.characterData}),r.push(n)};i({observer:!1,observeParents:!1,observeSlideChildren:!1}),n("init",(()=>{if(e.params.observer){if(e.params.observeParents){const t=ot(e.hostEl);for(let e=0;e<t.length;e+=1)a(t[e])}a(e.hostEl,{childList:e.params.observeSlideChildren}),a(e.wrapperEl,{attributes:!1})}})),n("destroy",(()=>{r.forEach((t=>{t.disconnect()})),r.splice(0,r.length)}))}]);var jt=i(7633);window.innerWidth>1024&&Promise.resolve().then(i.bind(i,7633)),document.querySelector(".feed-chapter__bg-swiper")&&new Yt(".feed-chapter__bg-swiper",{modules:[function(t){let{swiper:e,extendParams:i,on:n,emit:s}=t;const r="swiper-pagination";let o;i({pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:t=>t,formatFractionTotal:t=>t,bulletClass:`${r}-bullet`,bulletActiveClass:`${r}-bullet-active`,modifierClass:`${r}-`,currentClass:`${r}-current`,totalClass:`${r}-total`,hiddenClass:`${r}-hidden`,progressbarFillClass:`${r}-progressbar-fill`,progressbarOppositeClass:`${r}-progressbar-opposite`,clickableClass:`${r}-clickable`,lockClass:`${r}-lock`,horizontalClass:`${r}-horizontal`,verticalClass:`${r}-vertical`,paginationDisabledClass:`${r}-disabled`}}),e.pagination={el:null,bullets:[]};let a=0;function l(){return!e.params.pagination.el||!e.pagination.el||Array.isArray(e.pagination.el)&&0===e.pagination.el.length}function c(t,i){const{bulletActiveClass:n}=e.params.pagination;t&&(t=t[("prev"===i?"previous":"next")+"ElementSibling"])&&(t.classList.add(`${n}-${i}`),(t=t[("prev"===i?"previous":"next")+"ElementSibling"])&&t.classList.add(`${n}-${i}-${i}`))}function d(t){const i=t.target.closest(Vt(e.params.pagination.bulletClass));if(!i)return;t.preventDefault();const n=rt(i)*e.params.slidesPerGroup;if(e.params.loop){if(e.realIndex===n)return;e.slideToLoop(n)}else e.slideTo(n)}function u(){const t=e.rtl,i=e.params.pagination;if(l())return;let n,r,d=e.pagination.el;d=lt(d);const u=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.slides.length,h=e.params.loop?Math.ceil(u/e.params.slidesPerGroup):e.snapGrid.length;if(e.params.loop?(r=e.previousRealIndex||0,n=e.params.slidesPerGroup>1?Math.floor(e.realIndex/e.params.slidesPerGroup):e.realIndex):void 0!==e.snapIndex?(n=e.snapIndex,r=e.previousSnapIndex):(r=e.previousIndex||0,n=e.activeIndex||0),"bullets"===i.type&&e.pagination.bullets&&e.pagination.bullets.length>0){const s=e.pagination.bullets;let l,u,h;if(i.dynamicBullets&&(o=at(s[0],e.isHorizontal()?"width":"height",!0),d.forEach((t=>{t.style[e.isHorizontal()?"width":"height"]=o*(i.dynamicMainBullets+4)+"px"})),i.dynamicMainBullets>1&&void 0!==r&&(a+=n-(r||0),a>i.dynamicMainBullets-1?a=i.dynamicMainBullets-1:a<0&&(a=0)),l=Math.max(n-a,0),u=l+(Math.min(s.length,i.dynamicMainBullets)-1),h=(u+l)/2),s.forEach((t=>{const e=[...["","-next","-next-next","-prev","-prev-prev","-main"].map((t=>`${i.bulletActiveClass}${t}`))].map((t=>"string"==typeof t&&t.includes(" ")?t.split(" "):t)).flat();t.classList.remove(...e)})),d.length>1)s.forEach((t=>{const s=rt(t);s===n?t.classList.add(...i.bulletActiveClass.split(" ")):e.isElement&&t.setAttribute("part","bullet"),i.dynamicBullets&&(s>=l&&s<=u&&t.classList.add(...`${i.bulletActiveClass}-main`.split(" ")),s===l&&c(t,"prev"),s===u&&c(t,"next"))}));else{const t=s[n];if(t&&t.classList.add(...i.bulletActiveClass.split(" ")),e.isElement&&s.forEach(((t,e)=>{t.setAttribute("part",e===n?"bullet-active":"bullet")})),i.dynamicBullets){const t=s[l],e=s[u];for(let t=l;t<=u;t+=1)s[t]&&s[t].classList.add(...`${i.bulletActiveClass}-main`.split(" "));c(t,"prev"),c(e,"next")}}if(i.dynamicBullets){const n=Math.min(s.length,i.dynamicMainBullets+4),r=(o*n-o)/2-h*o,a=t?"right":"left";s.forEach((t=>{t.style[e.isHorizontal()?a:"top"]=`${r}px`}))}}d.forEach(((t,r)=>{if("fraction"===i.type&&(t.querySelectorAll(Vt(i.currentClass)).forEach((t=>{t.textContent=i.formatFractionCurrent(n+1)})),t.querySelectorAll(Vt(i.totalClass)).forEach((t=>{t.textContent=i.formatFractionTotal(h)}))),"progressbar"===i.type){let s;s=i.progressbarOpposite?e.isHorizontal()?"vertical":"horizontal":e.isHorizontal()?"horizontal":"vertical";const r=(n+1)/h;let o=1,a=1;"horizontal"===s?o=r:a=r,t.querySelectorAll(Vt(i.progressbarFillClass)).forEach((t=>{t.style.transform=`translate3d(0,0,0) scaleX(${o}) scaleY(${a})`,t.style.transitionDuration=`${e.params.speed}ms`}))}"custom"===i.type&&i.renderCustom?(t.innerHTML=i.renderCustom(e,n+1,h),0===r&&s("paginationRender",t)):(0===r&&s("paginationRender",t),s("paginationUpdate",t)),e.params.watchOverflow&&e.enabled&&t.classList[e.isLocked?"add":"remove"](i.lockClass)}))}function h(){const t=e.params.pagination;if(l())return;const i=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.grid&&e.params.grid.rows>1?e.slides.length/Math.ceil(e.params.grid.rows):e.slides.length;let n=e.pagination.el;n=lt(n);let r="";if("bullets"===t.type){let n=e.params.loop?Math.ceil(i/e.params.slidesPerGroup):e.snapGrid.length;e.params.freeMode&&e.params.freeMode.enabled&&n>i&&(n=i);for(let i=0;i<n;i+=1)t.renderBullet?r+=t.renderBullet.call(e,i,t.bulletClass):r+=`<${t.bulletElement} ${e.isElement?'part="bullet"':""} class="${t.bulletClass}"></${t.bulletElement}>`}"fraction"===t.type&&(r=t.renderFraction?t.renderFraction.call(e,t.currentClass,t.totalClass):`<span class="${t.currentClass}"></span> / <span class="${t.totalClass}"></span>`),"progressbar"===t.type&&(r=t.renderProgressbar?t.renderProgressbar.call(e,t.progressbarFillClass):`<span class="${t.progressbarFillClass}"></span>`),e.pagination.bullets=[],n.forEach((i=>{"custom"!==t.type&&(i.innerHTML=r||""),"bullets"===t.type&&e.pagination.bullets.push(...i.querySelectorAll(Vt(t.bulletClass)))})),"custom"!==t.type&&s("paginationRender",n[0])}function p(){e.params.pagination=function(t,e,i,n){return t.params.createElements&&Object.keys(n).forEach((s=>{if(!i[s]&&!0===i.auto){let r=et(t.el,`.${n[s]}`)[0];r||(r=nt("div",n[s]),r.className=n[s],t.el.append(r)),i[s]=r,e[s]=r}})),i}(e,e.originalParams.pagination,e.params.pagination,{el:"swiper-pagination"});const t=e.params.pagination;if(!t.el)return;let i;"string"==typeof t.el&&e.isElement&&(i=e.el.querySelector(t.el)),i||"string"!=typeof t.el||(i=[...document.querySelectorAll(t.el)]),i||(i=t.el),i&&0!==i.length&&(e.params.uniqueNavElements&&"string"==typeof t.el&&Array.isArray(i)&&i.length>1&&(i=[...e.el.querySelectorAll(t.el)],i.length>1&&(i=i.filter((t=>ot(t,".swiper")[0]===e.el))[0])),Array.isArray(i)&&1===i.length&&(i=i[0]),Object.assign(e.pagination,{el:i}),i=lt(i),i.forEach((i=>{"bullets"===t.type&&t.clickable&&i.classList.add(...(t.clickableClass||"").split(" ")),i.classList.add(t.modifierClass+t.type),i.classList.add(e.isHorizontal()?t.horizontalClass:t.verticalClass),"bullets"===t.type&&t.dynamicBullets&&(i.classList.add(`${t.modifierClass}${t.type}-dynamic`),a=0,t.dynamicMainBullets<1&&(t.dynamicMainBullets=1)),"progressbar"===t.type&&t.progressbarOpposite&&i.classList.add(t.progressbarOppositeClass),t.clickable&&i.addEventListener("click",d),e.enabled||i.classList.add(t.lockClass)})))}function f(){const t=e.params.pagination;if(l())return;let i=e.pagination.el;i&&(i=lt(i),i.forEach((i=>{i.classList.remove(t.hiddenClass),i.classList.remove(t.modifierClass+t.type),i.classList.remove(e.isHorizontal()?t.horizontalClass:t.verticalClass),t.clickable&&(i.classList.remove(...(t.clickableClass||"").split(" ")),i.removeEventListener("click",d))}))),e.pagination.bullets&&e.pagination.bullets.forEach((e=>e.classList.remove(...t.bulletActiveClass.split(" "))))}n("changeDirection",(()=>{if(!e.pagination||!e.pagination.el)return;const t=e.params.pagination;let{el:i}=e.pagination;i=lt(i),i.forEach((i=>{i.classList.remove(t.horizontalClass,t.verticalClass),i.classList.add(e.isHorizontal()?t.horizontalClass:t.verticalClass)}))})),n("init",(()=>{!1===e.params.pagination.enabled?g():(p(),h(),u())})),n("activeIndexChange",(()=>{void 0===e.snapIndex&&u()})),n("snapIndexChange",(()=>{u()})),n("snapGridLengthChange",(()=>{h(),u()})),n("destroy",(()=>{f()})),n("enable disable",(()=>{let{el:t}=e.pagination;t&&(t=lt(t),t.forEach((t=>t.classList[e.enabled?"remove":"add"](e.params.pagination.lockClass))))})),n("lock unlock",(()=>{u()})),n("click",((t,i)=>{const n=i.target,r=lt(e.pagination.el);if(e.params.pagination.el&&e.params.pagination.hideOnClick&&r&&r.length>0&&!n.classList.contains(e.params.pagination.bulletClass)){if(e.navigation&&(e.navigation.nextEl&&n===e.navigation.nextEl||e.navigation.prevEl&&n===e.navigation.prevEl))return;const t=r[0].classList.contains(e.params.pagination.hiddenClass);s(!0===t?"paginationShow":"paginationHide"),r.forEach((t=>t.classList.toggle(e.params.pagination.hiddenClass)))}}));const g=()=>{e.el.classList.add(e.params.pagination.paginationDisabledClass);let{el:t}=e.pagination;t&&(t=lt(t),t.forEach((t=>t.classList.add(e.params.pagination.paginationDisabledClass)))),f()};Object.assign(e.pagination,{enable:()=>{e.el.classList.remove(e.params.pagination.paginationDisabledClass);let{el:t}=e.pagination;t&&(t=lt(t),t.forEach((t=>t.classList.remove(e.params.pagination.paginationDisabledClass)))),p(),h(),u()},disable:g,render:h,update:u,init:p,destroy:f})}],loop:!0,pagination:{el:".feed-chapter__pagination",type:"bullets",clickable:!0},on:jt.toggleScroll}),document.querySelector(".feed-chapter__images-swiper")&&new Yt(".feed-chapter__images-swiper",{loop:!0,slidesPerView:"auto",spaceBetween:window.innerWidth>768?17:8,freemode:!0,on:jt.toggleScroll})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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T0FBT3JrQixFQUFPcnZDLE9BQU9rd0QsV0FBV21CLGNBQ3RFLEtBRUYsTUFhTXA1RSxFQUFVLEtBQ2RvM0QsRUFBT3I4RSxHQUFHbEIsVUFBVUMsSUFBSXM5RSxFQUFPcnZDLE9BQU9rd0QsV0FBVzBCLHlCQUNqRCxJQUFJLEdBQ0Y1K0YsR0FDRXE4RSxFQUFPNmdCLFdBQ1BsOUYsSUFDRkEsRUFBSyxHQUFrQkEsR0FDdkJBLEVBQUdaLFNBQVFpZ0csR0FBU0EsRUFBTXZnRyxVQUFVQyxJQUFJczlFLEVBQU9ydkMsT0FBT2t3RCxXQUFXMEIsNEJBRW5FcitGLEdBQVMsRUFFWHFYLE9BQU8wMUMsT0FBTyt1QixFQUFPNmdCLFdBQVksQ0FDL0JuNEUsT0F6QmEsS0FDYnMzRCxFQUFPcjhFLEdBQUdsQixVQUFVZ0UsT0FBT3U1RSxFQUFPcnZDLE9BQU9rd0QsV0FBVzBCLHlCQUNwRCxJQUFJLEdBQ0Y1K0YsR0FDRXE4RSxFQUFPNmdCLFdBQ1BsOUYsSUFDRkEsRUFBSyxHQUFrQkEsR0FDdkJBLEVBQUdaLFNBQVFpZ0csR0FBU0EsRUFBTXZnRyxVQUFVZ0UsT0FBT3U1RSxFQUFPcnZDLE9BQU9rd0QsV0FBVzBCLDRCQUV0RW4rRixJQUNBdVcsSUFDQXhXLEdBQVEsRUFlUnlrQixVQUNBak8sU0FDQXhXLFNBQ0FDLE9BQ0FGLFdBRUosR0QxYUlxaEUsTUFBTSxFQUNOczdCLFdBQVksQ0FDVmw5RixHQUFJLDRCQUNKdUksS0FBTSxVQUNONjBGLFdBQVcsR0FHYnJvQyxHQUFJcDBELEdBQUFBLGVBR0oxQixTQUFTQyxjQUFjLGlDQUN6QixJQUFJNDVGLEdBQU8sK0JBQWdDLENBQ3pDbDNCLE1BQU0sRUFDTmlmLGNBQWUsT0FDZmdDLGFBQWM5aEYsT0FBT2UsV0FBYSxJQUFNLEdBQUssRUFDN0M2K0YsVUFBVSxFQUNWNXJDLEdBQUlwMEQsR0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWJwYWNrLXNldHVwLy4vc3JjL2pzL2FuaW0vaXRlbS1jYXJkLWNhcm91c2VsLmpzIiwid2VicGFjazovL3dlYnBhY2stc2V0dXAvLi9zcmMvanMvbGliL2xvY29tb3RpdmUtc2Nyb2xsLmpzIiwid2VicGFjazovL3dlYnBhY2stc2V0dXAvLi9zcmMvanMvdXRpbHMvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay1zZXR1cC8uL25vZGVfbW9kdWxlcy9nc2FwL0NTU1BsdWdpbi5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXNldHVwLy4vbm9kZV9tb2R1bGVzL2dzYXAvT2JzZXJ2ZXIuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay1zZXR1cC8uL25vZGVfbW9kdWxlcy9nc2FwL1Njcm9sbFRyaWdnZXIuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay1zZXR1cC8uL25vZGVfbW9kdWxlcy9nc2FwL2dzYXAtY29yZS5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXNldHVwLy4vbm9kZV9tb2R1bGVzL2dzYXAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2VicGFjay1zZXR1cC8uL25vZGVfbW9kdWxlcy9sb2NvbW90aXZlLXNjcm9sbC9kaXN0L2xvY29tb3RpdmUtc2Nyb2xsLmVzbS5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXNldHVwL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3dlYnBhY2stc2V0dXAvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3dlYnBhY2stc2V0dXAvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly93ZWJwYWNrLXNldHVwL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vd2VicGFjay1zZXR1cC93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL3dlYnBhY2stc2V0dXAvLi9ub2RlX21vZHVsZXMvbGlnaHRnYWxsZXJ5L2xpZ2h0Z2FsbGVyeS5lczUuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay1zZXR1cC8uL25vZGVfbW9kdWxlcy9zd2lwZXIvc2hhcmVkL3Nzci13aW5kb3cuZXNtLm1qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXNldHVwLy4vc3JjL2pzL2xpYi9saWdodGdhbGxlcnkuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay1zZXR1cC8uL25vZGVfbW9kdWxlcy9zd2lwZXIvc2hhcmVkL3V0aWxzLm1qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXNldHVwLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9zaGFyZWQvc3dpcGVyLWNvcmUubWpzIiwid2VicGFjazovL3dlYnBhY2stc2V0dXAvLi9ub2RlX21vZHVsZXMvc3dpcGVyL3NoYXJlZC9jbGFzc2VzLXRvLXNlbGVjdG9yLm1qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXNldHVwLy4vc3JjL2pzL3BhZ2VzL2ZlZWQtY2hhcHRlci5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXNldHVwLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9tb2R1bGVzL3BhZ2luYXRpb24ubWpzIiwid2VicGFjazovL3dlYnBhY2stc2V0dXAvLi9ub2RlX21vZHVsZXMvc3dpcGVyL3NoYXJlZC9jcmVhdGUtZWxlbWVudC1pZi1ub3QtZGVmaW5lZC5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGdzYXAgZnJvbSBcImdzYXBcIjtcbmltcG9ydCB7IFNjcm9sbFRyaWdnZXIgfSBmcm9tIFwiZ3NhcC9hbGxcIjtcbmltcG9ydCB7IHJlbW92ZUNsYXNzZXMgfSBmcm9tIFwiLi4vdXRpbHMvdXRpbHNcIjtcblxuZ3NhcC5yZWdpc3RlclBsdWdpbihTY3JvbGxUcmlnZ2VyKTtcblxuY29uc3QgbW0gPSBnc2FwLm1hdGNoTWVkaWEoKTtcblxuZXhwb3J0IGNvbnN0IHNldFRodW1ic0NsYXNzZXMgPSAoaWR4LCB0aHVtYnMpID0+IHtcbiAgcmVtb3ZlQ2xhc3Nlcyh0aHVtYnMsIFwiX2lzLWFjdGl2ZVwiKTtcbiAgdGh1bWJzW2lkeF0gJiYgdGh1bWJzW2lkeF0uY2xhc3NMaXN0LmFkZChcIl9pcy1hY3RpdmVcIik7XG59O1xuXG5leHBvcnQgY29uc3QgaW5pdEl0ZW1DYXJkQ2Fyb3VzZWwgPSAoKSA9PiB7XG4gIGlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLml0ZW0tY2FyZF9fc3dpcGVyXCIpKSB7XG4gICAgbW0uYWRkKFwiKG1pbi13aWR0aDogMTAyNHB4KVwiLCAoKSA9PiB7XG4gICAgICBjb25zdCB0aHVtYnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLml0ZW0tY2FyZF9fdGh1bWJzLXNsaWRlXCIpO1xuXG4gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLml0ZW0tY2FyZF9fc2xpZGVcIikuZm9yRWFjaCgoc2xpZGUsIGlkeCkgPT4ge1xuICAgICAgICBnc2FwLnRpbWVsaW5lKHtcbiAgICAgICAgICBzY3JvbGxUcmlnZ2VyOiB7XG4gICAgICAgICAgICB0cmlnZ2VyOiBzbGlkZSxcbiAgICAgICAgICAgIHN0YXJ0OiBcInRvcCB0b3BcIixcbiAgICAgICAgICAgIGVuZDogXCJib3R0b20gYm90dG9tXCIsXG4gICAgICAgICAgICBvbkVudGVyOiAoZSkgPT4ge1xuICAgICAgICAgICAgICBzZXRUaHVtYnNDbGFzc2VzKGlkeCwgdGh1bWJzKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvbkVudGVyQmFjazogKGUpID0+IHtcbiAgICAgICAgICAgICAgc2V0VGh1bWJzQ2xhc3NlcyhpZHgsIHRodW1icyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn07XG4iLCJpbXBvcnQgTG9jb21vdGl2ZVNjcm9sbCBmcm9tIFwibG9jb21vdGl2ZS1zY3JvbGxcIjtcbmltcG9ydCBcIi4uLy4uL3Njc3MvY29tbW9uL2xvY29tb3RpdmUtc2Nyb2xsLnNjc3NcIjtcbmltcG9ydCBnc2FwIGZyb20gXCJnc2FwXCI7XG5pbXBvcnQge1xuICBpbml0SXRlbUNhcmRDYXJvdXNlbCxcbiAgc2V0VGh1bWJzQ2xhc3Nlcyxcbn0gZnJvbSBcIi4uL2FuaW0vaXRlbS1jYXJkLWNhcm91c2VsXCI7XG5pbXBvcnQgeyBTY3JvbGxUcmlnZ2VyIH0gZnJvbSBcImdzYXAvYWxsXCI7XG5cbmdzYXAucmVnaXN0ZXJQbHVnaW4oU2Nyb2xsVHJpZ2dlcik7XG5cbmV4cG9ydCBjb25zdCBsb2NvU2Nyb2xsID0gbmV3IExvY29tb3RpdmVTY3JvbGwoe1xuICBlbDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi53cmFwcGVyXCIpLFxuICBzbW9vdGg6IHRydWUsXG4gIC8vIG11bHRpcGxpZXI6IDEsXG4gIG1vYmlsZToge1xuICAgIHNtb290aDogZmFsc2UsXG4gIH0sXG4gIHRhYmxldDoge1xuICAgIHNtb290aDogZmFsc2UsXG4gICAgYnJlYWtwb2ludDogMTAyNSxcbiAgfSxcbn0pO1xuXG5uZXcgUmVzaXplT2JzZXJ2ZXIoKCkgPT4ge1xuICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICBsb2NvU2Nyb2xsLmRlc3Ryb3koKTtcbiAgICBsb2NvU2Nyb2xsLnVwZGF0ZSgpO1xuICAgIGxvY29TY3JvbGwuaW5pdCgpO1xuICB9LCAxMDApO1xufSkub2JzZXJ2ZShkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwibWFpblwiKSk7XG5cbmNvbnN0IGZpeFNjcm9sbFRyaWdnZXIgPSAoKSA9PiB7XG4gIFNjcm9sbFRyaWdnZXIuc2Nyb2xsZXJQcm94eShsb2NvU2Nyb2xsLmVsLCB7XG4gICAgc2Nyb2xsVG9wKHZhbHVlKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgICA/IGxvY29TY3JvbGwuc2Nyb2xsVG8odmFsdWUsIDAsIDApXG4gICAgICAgIDogbG9jb1Njcm9sbC5zY3JvbGwuaW5zdGFuY2Uuc2Nyb2xsLnk7XG4gICAgfSxcbiAgICBnZXRCb3VuZGluZ0NsaWVudFJlY3QoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0b3A6IDAsXG4gICAgICAgIGxlZnQ6IDAsXG4gICAgICAgIHdpZHRoOiB3aW5kb3cuaW5uZXJXaWR0aCxcbiAgICAgICAgaGVpZ2h0OiB3aW5kb3cuaW5uZXJIZWlnaHQsXG4gICAgICB9O1xuICAgIH0sXG4gICAgcGluVHlwZTogbG9jb1Njcm9sbC5lbC5zdHlsZS50cmFuc2Zvcm0gPyBcInRyYW5zZm9ybVwiIDogXCJmaXhlZFwiLFxuICB9KTtcblxuICBTY3JvbGxUcmlnZ2VyLmFkZEV2ZW50TGlzdGVuZXIoXCJyZWZyZXNoXCIsICgpID0+IGxvY29TY3JvbGwudXBkYXRlKCkpO1xuICBTY3JvbGxUcmlnZ2VyLmRlZmF1bHRzKHsgc2Nyb2xsZXI6IGxvY29TY3JvbGwuZWwgfSk7XG5cbiAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgU2Nyb2xsVHJpZ2dlci5yZWZyZXNoKCk7XG4gICAgU2Nyb2xsVHJpZ2dlci51cGRhdGUoKTtcbiAgfSwgMCk7XG59O1xuXG5leHBvcnQgY29uc3QgdG9nZ2xlU2Nyb2xsID0ge1xuICB0b3VjaFN0YXJ0OiAoKSA9PiB7XG4gICAgbG9jb1Njcm9sbC5zdG9wKCk7XG4gIH0sXG4gIHRvdWNoRW5kOiAoKSA9PiB7XG4gICAgbG9jb1Njcm9sbC5zdGFydCgpO1xuICB9LFxufTtcblxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIGZ1bmN0aW9uICgpIHtcbiAgZml4U2Nyb2xsVHJpZ2dlcigpO1xuICBpbml0SXRlbUNhcmRDYXJvdXNlbCgpO1xuXG4gIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgIGxvY29TY3JvbGwudXBkYXRlKCk7XG4gIH0sIDEwMDApO1xufSk7XG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCBmdW5jdGlvbiAoKSB7XG4gIGxvY29TY3JvbGwudXBkYXRlKCk7XG59KTtcblxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlb3ZlclwiLCBmdW5jdGlvbiAoZSkge1xuICBpZiAoZS50YXJnZXQuY2xvc2VzdChcIltkYXRhLXNiXVwiKSkge1xuICAgIGxvY29TY3JvbGwuc3RvcCgpO1xuICB9IGVsc2Uge1xuICAgIGxvY29TY3JvbGwuc3RhcnQoKTtcbiAgfVxufSk7XG5cbmlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmZvb3Rlci1tYWluX19hbmNob3JcIikpIHtcbiAgZG9jdW1lbnRcbiAgICAucXVlcnlTZWxlY3RvcihcIi5mb290ZXItbWFpbl9fYW5jaG9yXCIpXG4gICAgLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBsb2NvU2Nyb2xsLnNjcm9sbFRvKDApO1xuICAgIH0pO1xufVxuXG5pZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5pdGVtLWNhcmRfX3NsaWRlXCIpLmxlbmd0aCkge1xuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLml0ZW0tY2FyZF9fc2xpZGVcIikuZm9yRWFjaCgoc2xpZGUsIGlkeCkgPT4ge1xuICAgIGRvY3VtZW50XG4gICAgICAucXVlcnlTZWxlY3RvckFsbChcIi5pdGVtLWNhcmRfX3RodW1icy1zbGlkZVwiKVxuICAgICAgW2lkeF0uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHdpbmRvdy5pbm5lcldpZHRoID4gMTAyNCkge1xuICAgICAgICAgIGxvY29TY3JvbGwuc2Nyb2xsVG8oc2xpZGUsIHtcbiAgICAgICAgICAgIG9mZnNldDogLTEsXG4gICAgICAgICAgICBjYWxsYmFjazogKCkgPT4ge1xuICAgICAgICAgICAgICBzZXRUaHVtYnNDbGFzc2VzKFxuICAgICAgICAgICAgICAgIGlkeCxcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLml0ZW0tY2FyZF9fdGh1bWJzLXNsaWRlXCIpLFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gIH0pO1xufVxuXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiYm9keUxvY2tcIiwgZnVuY3Rpb24gKCkge1xuICBsb2NvU2Nyb2xsLnN0b3AoKTtcbn0pO1xuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImJvZHlVbmxvY2tcIiwgZnVuY3Rpb24gKCkge1xuICBsb2NvU2Nyb2xsLnN0YXJ0KCk7XG59KTtcbiIsImV4cG9ydCBjb25zdCBzZXRTbGlkZUNvbnRlbnQgPSAoc2xpZGUpID0+IHtcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi50ZWFtX19uYW1lXCIpLmlubmVySFRNTCA9IHNsaWRlLmRhdGFzZXQubmFtZTtcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi50ZWFtX190ZXh0X3RlYW1cIikuaW5uZXJIVE1MID0gc2xpZGUuZGF0YXNldC50ZWFtO1xuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnRlYW1fX3RleHRfZGF0ZVwiKS5pbm5lckhUTUwgPSBzbGlkZS5kYXRhc2V0LmRhdGU7XG59O1xuXG4vKipcbiAqIHRvZ2dsZXMgYm9keSBsb2NrXG4gKiBAcGFyYW0ge251bWJlcn0gZGVsYXlcbiAqL1xuZXhwb3J0IGNvbnN0IGJvZHlMb2NrVG9nZ2xlID0gKGRlbGF5ID0gNTAwKSA9PiB7XG4gIGlmIChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKFwibG9ja1wiKSkge1xuICAgIGJvZHlVbmxvY2soMCk7XG4gIH0gZWxzZSB7XG4gICAgYm9keUxvY2soMCk7XG4gIH1cbn07XG4vKipcbiAqIHVubG9ja3MgYm9keVxuICogQHBhcmFtIHtudW1iZXJ9IGRlbGF5XG4gKi9cbmV4cG9ydCBjb25zdCBib2R5VW5sb2NrID0gKGRlbGF5ID0gNTAwKSA9PiB7XG4gIGlmICghZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5faXMtbG9ja2VkXCIpKSB7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcIl9sb2NrXCIpO1xuXG4gICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChcImJvZHlVbmxvY2tcIikpO1xuICAgIH0sIDApO1xuICB9XG59O1xuLyoqXG4gKiBsb2NrcyBib2R5XG4gKiBAcGFyYW0ge251bWJlcn0gZGVsYXlcbiAqL1xuZXhwb3J0IGNvbnN0IGJvZHlMb2NrID0gKGRlbGF5ID0gNTAwKSA9PiB7XG4gIGlmICghZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5faXMtbG9ja2VkXCIpKSB7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0LmFkZChcIl9sb2NrXCIpO1xuXG4gICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChcImJvZHlMb2NrXCIpKTtcbiAgICB9LCAwKTtcbiAgfVxufTtcblxuLyoqXG4gKiBjb252ZXJ0cyByZW0gdG8gcGl4ZWxzXG4gKiBAcGFyYW0ge251bWJlcn0gcmVtVmFsdWVcbiAqIEByZXR1cm5zIHN0cmluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gcmVtVG9QeChyZW1WYWx1ZSkge1xuICBjb25zdCBodG1sRm9udFNpemUgPSBwYXJzZUZsb2F0KFxuICAgIGdldENvbXB1dGVkU3R5bGUoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KS5mb250U2l6ZSxcbiAgKTtcblxuICBjb25zdCBweFZhbHVlID0gcmVtVmFsdWUgKiBodG1sRm9udFNpemU7XG5cbiAgcmV0dXJuIE1hdGgucm91bmQocHhWYWx1ZSkgKyBcInB4XCI7XG59XG5cbmV4cG9ydCBjb25zdCByZW1vdmVDbGFzc2VzID0gKGFycmF5LCBjbGFzc05hbWUpID0+IHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xuICAgIGFycmF5W2ldLmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTtcbiAgfVxufTtcbiIsIi8qIVxuICogQ1NTUGx1Z2luIDMuMTIuNVxuICogaHR0cHM6Ly9nc2FwLmNvbVxuICpcbiAqIENvcHlyaWdodCAyMDA4LTIwMjQsIEdyZWVuU29jay4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFN1YmplY3QgdG8gdGhlIHRlcm1zIGF0IGh0dHBzOi8vZ3NhcC5jb20vc3RhbmRhcmQtbGljZW5zZSBvciBmb3JcbiAqIENsdWIgR1NBUCBtZW1iZXJzLCB0aGUgYWdyZWVtZW50IGlzc3VlZCB3aXRoIHRoYXQgbWVtYmVyc2hpcC5cbiAqIEBhdXRob3I6IEphY2sgRG95bGUsIGphY2tAZ3JlZW5zb2NrLmNvbVxuKi9cblxuLyogZXNsaW50LWRpc2FibGUgKi9cbmltcG9ydCB7IGdzYXAsIF9nZXRQcm9wZXJ0eSwgX251bUV4cCwgX251bVdpdGhVbml0RXhwLCBnZXRVbml0LCBfaXNTdHJpbmcsIF9pc1VuZGVmaW5lZCwgX3JlbmRlckNvbXBsZXhTdHJpbmcsIF9yZWxFeHAsIF9mb3JFYWNoTmFtZSwgX3NvcnRQcm9wVHdlZW5zQnlQcmlvcml0eSwgX2NvbG9yU3RyaW5nRmlsdGVyLCBfY2hlY2tQbHVnaW4sIF9yZXBsYWNlUmFuZG9tLCBfcGx1Z2lucywgR1NDYWNoZSwgUHJvcFR3ZWVuLCBfY29uZmlnLCBfdGlja2VyLCBfcm91bmQsIF9taXNzaW5nUGx1Z2luLCBfZ2V0U2V0dGVyLCBfZ2V0Q2FjaGUsIF9jb2xvckV4cCwgX3BhcnNlUmVsYXRpdmUsIF9zZXREZWZhdWx0cywgX3JlbW92ZUxpbmtlZExpc3RJdGVtIC8vZm9yIHRoZSBjb21tZW50ZWQtb3V0IGNsYXNzTmFtZSBmZWF0dXJlLlxufSBmcm9tIFwiLi9nc2FwLWNvcmUuanNcIjtcblxudmFyIF93aW4sXG4gICAgX2RvYyxcbiAgICBfZG9jRWxlbWVudCxcbiAgICBfcGx1Z2luSW5pdHRlZCxcbiAgICBfdGVtcERpdixcbiAgICBfdGVtcERpdlN0eWxlcixcbiAgICBfcmVjZW50U2V0dGVyUGx1Z2luLFxuICAgIF9yZXZlcnRpbmcsXG4gICAgX3dpbmRvd0V4aXN0cyA9IGZ1bmN0aW9uIF93aW5kb3dFeGlzdHMoKSB7XG4gIHJldHVybiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiO1xufSxcbiAgICBfdHJhbnNmb3JtUHJvcHMgPSB7fSxcbiAgICBfUkFEMkRFRyA9IDE4MCAvIE1hdGguUEksXG4gICAgX0RFRzJSQUQgPSBNYXRoLlBJIC8gMTgwLFxuICAgIF9hdGFuMiA9IE1hdGguYXRhbjIsXG4gICAgX2JpZ051bSA9IDFlOCxcbiAgICBfY2Fwc0V4cCA9IC8oW0EtWl0pL2csXG4gICAgX2hvcml6b250YWxFeHAgPSAvKGxlZnR8cmlnaHR8d2lkdGh8bWFyZ2lufHBhZGRpbmd8eCkvaSxcbiAgICBfY29tcGxleEV4cCA9IC9bXFxzLFxcKF1cXFMvLFxuICAgIF9wcm9wZXJ0eUFsaWFzZXMgPSB7XG4gIGF1dG9BbHBoYTogXCJvcGFjaXR5LHZpc2liaWxpdHlcIixcbiAgc2NhbGU6IFwic2NhbGVYLHNjYWxlWVwiLFxuICBhbHBoYTogXCJvcGFjaXR5XCJcbn0sXG4gICAgX3JlbmRlckNTU1Byb3AgPSBmdW5jdGlvbiBfcmVuZGVyQ1NTUHJvcChyYXRpbywgZGF0YSkge1xuICByZXR1cm4gZGF0YS5zZXQoZGF0YS50LCBkYXRhLnAsIE1hdGgucm91bmQoKGRhdGEucyArIGRhdGEuYyAqIHJhdGlvKSAqIDEwMDAwKSAvIDEwMDAwICsgZGF0YS51LCBkYXRhKTtcbn0sXG4gICAgX3JlbmRlclByb3BXaXRoRW5kID0gZnVuY3Rpb24gX3JlbmRlclByb3BXaXRoRW5kKHJhdGlvLCBkYXRhKSB7XG4gIHJldHVybiBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgcmF0aW8gPT09IDEgPyBkYXRhLmUgOiBNYXRoLnJvdW5kKChkYXRhLnMgKyBkYXRhLmMgKiByYXRpbykgKiAxMDAwMCkgLyAxMDAwMCArIGRhdGEudSwgZGF0YSk7XG59LFxuICAgIF9yZW5kZXJDU1NQcm9wV2l0aEJlZ2lubmluZyA9IGZ1bmN0aW9uIF9yZW5kZXJDU1NQcm9wV2l0aEJlZ2lubmluZyhyYXRpbywgZGF0YSkge1xuICByZXR1cm4gZGF0YS5zZXQoZGF0YS50LCBkYXRhLnAsIHJhdGlvID8gTWF0aC5yb3VuZCgoZGF0YS5zICsgZGF0YS5jICogcmF0aW8pICogMTAwMDApIC8gMTAwMDAgKyBkYXRhLnUgOiBkYXRhLmIsIGRhdGEpO1xufSxcbiAgICAvL2lmIHVuaXRzIGNoYW5nZSwgd2UgbmVlZCBhIHdheSB0byByZW5kZXIgdGhlIG9yaWdpbmFsIHVuaXQvdmFsdWUgd2hlbiB0aGUgdHdlZW4gZ29lcyBhbGwgdGhlIHdheSBiYWNrIHRvIHRoZSBiZWdpbm5pbmcgKHJhdGlvOjApXG5fcmVuZGVyUm91bmRlZENTU1Byb3AgPSBmdW5jdGlvbiBfcmVuZGVyUm91bmRlZENTU1Byb3AocmF0aW8sIGRhdGEpIHtcbiAgdmFyIHZhbHVlID0gZGF0YS5zICsgZGF0YS5jICogcmF0aW87XG4gIGRhdGEuc2V0KGRhdGEudCwgZGF0YS5wLCB+fih2YWx1ZSArICh2YWx1ZSA8IDAgPyAtLjUgOiAuNSkpICsgZGF0YS51LCBkYXRhKTtcbn0sXG4gICAgX3JlbmRlck5vblR3ZWVuaW5nVmFsdWUgPSBmdW5jdGlvbiBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZShyYXRpbywgZGF0YSkge1xuICByZXR1cm4gZGF0YS5zZXQoZGF0YS50LCBkYXRhLnAsIHJhdGlvID8gZGF0YS5lIDogZGF0YS5iLCBkYXRhKTtcbn0sXG4gICAgX3JlbmRlck5vblR3ZWVuaW5nVmFsdWVPbmx5QXRFbmQgPSBmdW5jdGlvbiBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZU9ubHlBdEVuZChyYXRpbywgZGF0YSkge1xuICByZXR1cm4gZGF0YS5zZXQoZGF0YS50LCBkYXRhLnAsIHJhdGlvICE9PSAxID8gZGF0YS5iIDogZGF0YS5lLCBkYXRhKTtcbn0sXG4gICAgX3NldHRlckNTU1N0eWxlID0gZnVuY3Rpb24gX3NldHRlckNTU1N0eWxlKHRhcmdldCwgcHJvcGVydHksIHZhbHVlKSB7XG4gIHJldHVybiB0YXJnZXQuc3R5bGVbcHJvcGVydHldID0gdmFsdWU7XG59LFxuICAgIF9zZXR0ZXJDU1NQcm9wID0gZnVuY3Rpb24gX3NldHRlckNTU1Byb3AodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgcmV0dXJuIHRhcmdldC5zdHlsZS5zZXRQcm9wZXJ0eShwcm9wZXJ0eSwgdmFsdWUpO1xufSxcbiAgICBfc2V0dGVyVHJhbnNmb3JtID0gZnVuY3Rpb24gX3NldHRlclRyYW5zZm9ybSh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSkge1xuICByZXR1cm4gdGFyZ2V0Ll9nc2FwW3Byb3BlcnR5XSA9IHZhbHVlO1xufSxcbiAgICBfc2V0dGVyU2NhbGUgPSBmdW5jdGlvbiBfc2V0dGVyU2NhbGUodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgcmV0dXJuIHRhcmdldC5fZ3NhcC5zY2FsZVggPSB0YXJnZXQuX2dzYXAuc2NhbGVZID0gdmFsdWU7XG59LFxuICAgIF9zZXR0ZXJTY2FsZVdpdGhSZW5kZXIgPSBmdW5jdGlvbiBfc2V0dGVyU2NhbGVXaXRoUmVuZGVyKHRhcmdldCwgcHJvcGVydHksIHZhbHVlLCBkYXRhLCByYXRpbykge1xuICB2YXIgY2FjaGUgPSB0YXJnZXQuX2dzYXA7XG4gIGNhY2hlLnNjYWxlWCA9IGNhY2hlLnNjYWxlWSA9IHZhbHVlO1xuICBjYWNoZS5yZW5kZXJUcmFuc2Zvcm0ocmF0aW8sIGNhY2hlKTtcbn0sXG4gICAgX3NldHRlclRyYW5zZm9ybVdpdGhSZW5kZXIgPSBmdW5jdGlvbiBfc2V0dGVyVHJhbnNmb3JtV2l0aFJlbmRlcih0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSwgZGF0YSwgcmF0aW8pIHtcbiAgdmFyIGNhY2hlID0gdGFyZ2V0Ll9nc2FwO1xuICBjYWNoZVtwcm9wZXJ0eV0gPSB2YWx1ZTtcbiAgY2FjaGUucmVuZGVyVHJhbnNmb3JtKHJhdGlvLCBjYWNoZSk7XG59LFxuICAgIF90cmFuc2Zvcm1Qcm9wID0gXCJ0cmFuc2Zvcm1cIixcbiAgICBfdHJhbnNmb3JtT3JpZ2luUHJvcCA9IF90cmFuc2Zvcm1Qcm9wICsgXCJPcmlnaW5cIixcbiAgICBfc2F2ZVN0eWxlID0gZnVuY3Rpb24gX3NhdmVTdHlsZShwcm9wZXJ0eSwgaXNOb3RDU1MpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICB2YXIgdGFyZ2V0ID0gdGhpcy50YXJnZXQsXG4gICAgICBzdHlsZSA9IHRhcmdldC5zdHlsZSxcbiAgICAgIGNhY2hlID0gdGFyZ2V0Ll9nc2FwO1xuXG4gIGlmIChwcm9wZXJ0eSBpbiBfdHJhbnNmb3JtUHJvcHMgJiYgc3R5bGUpIHtcbiAgICB0aGlzLnRmbSA9IHRoaXMudGZtIHx8IHt9O1xuXG4gICAgaWYgKHByb3BlcnR5ICE9PSBcInRyYW5zZm9ybVwiKSB7XG4gICAgICBwcm9wZXJ0eSA9IF9wcm9wZXJ0eUFsaWFzZXNbcHJvcGVydHldIHx8IHByb3BlcnR5O1xuICAgICAgfnByb3BlcnR5LmluZGV4T2YoXCIsXCIpID8gcHJvcGVydHkuc3BsaXQoXCIsXCIpLmZvckVhY2goZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLnRmbVthXSA9IF9nZXQodGFyZ2V0LCBhKTtcbiAgICAgIH0pIDogdGhpcy50Zm1bcHJvcGVydHldID0gY2FjaGUueCA/IGNhY2hlW3Byb3BlcnR5XSA6IF9nZXQodGFyZ2V0LCBwcm9wZXJ0eSk7IC8vIG5vdGU6IHNjYWxlIHdvdWxkIG1hcCB0byBcInNjYWxlWCxzY2FsZVlcIiwgdGh1cyB3ZSBsb29wIGFuZCBhcHBseSB0aGVtIGJvdGguXG5cbiAgICAgIHByb3BlcnR5ID09PSBfdHJhbnNmb3JtT3JpZ2luUHJvcCAmJiAodGhpcy50Zm0uek9yaWdpbiA9IGNhY2hlLnpPcmlnaW4pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gX3Byb3BlcnR5QWxpYXNlcy50cmFuc2Zvcm0uc3BsaXQoXCIsXCIpLmZvckVhY2goZnVuY3Rpb24gKHApIHtcbiAgICAgICAgcmV0dXJuIF9zYXZlU3R5bGUuY2FsbChfdGhpcywgcCwgaXNOb3RDU1MpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucHJvcHMuaW5kZXhPZihfdHJhbnNmb3JtUHJvcCkgPj0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChjYWNoZS5zdmcpIHtcbiAgICAgIHRoaXMuc3ZnbyA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXN2Zy1vcmlnaW5cIik7XG4gICAgICB0aGlzLnByb3BzLnB1c2goX3RyYW5zZm9ybU9yaWdpblByb3AsIGlzTm90Q1NTLCBcIlwiKTtcbiAgICB9XG5cbiAgICBwcm9wZXJ0eSA9IF90cmFuc2Zvcm1Qcm9wO1xuICB9XG5cbiAgKHN0eWxlIHx8IGlzTm90Q1NTKSAmJiB0aGlzLnByb3BzLnB1c2gocHJvcGVydHksIGlzTm90Q1NTLCBzdHlsZVtwcm9wZXJ0eV0pO1xufSxcbiAgICBfcmVtb3ZlSW5kZXBlbmRlbnRUcmFuc2Zvcm1zID0gZnVuY3Rpb24gX3JlbW92ZUluZGVwZW5kZW50VHJhbnNmb3JtcyhzdHlsZSkge1xuICBpZiAoc3R5bGUudHJhbnNsYXRlKSB7XG4gICAgc3R5bGUucmVtb3ZlUHJvcGVydHkoXCJ0cmFuc2xhdGVcIik7XG4gICAgc3R5bGUucmVtb3ZlUHJvcGVydHkoXCJzY2FsZVwiKTtcbiAgICBzdHlsZS5yZW1vdmVQcm9wZXJ0eShcInJvdGF0ZVwiKTtcbiAgfVxufSxcbiAgICBfcmV2ZXJ0U3R5bGUgPSBmdW5jdGlvbiBfcmV2ZXJ0U3R5bGUoKSB7XG4gIHZhciBwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICB0YXJnZXQgPSB0aGlzLnRhcmdldCxcbiAgICAgIHN0eWxlID0gdGFyZ2V0LnN0eWxlLFxuICAgICAgY2FjaGUgPSB0YXJnZXQuX2dzYXAsXG4gICAgICBpLFxuICAgICAgcDtcblxuICBmb3IgKGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpICs9IDMpIHtcbiAgICAvLyBzdG9yZWQgbGlrZSB0aGlzOiBwcm9wZXJ0eSwgaXNOb3RDU1MsIHZhbHVlXG4gICAgcHJvcHNbaSArIDFdID8gdGFyZ2V0W3Byb3BzW2ldXSA9IHByb3BzW2kgKyAyXSA6IHByb3BzW2kgKyAyXSA/IHN0eWxlW3Byb3BzW2ldXSA9IHByb3BzW2kgKyAyXSA6IHN0eWxlLnJlbW92ZVByb3BlcnR5KHByb3BzW2ldLnN1YnN0cigwLCAyKSA9PT0gXCItLVwiID8gcHJvcHNbaV0gOiBwcm9wc1tpXS5yZXBsYWNlKF9jYXBzRXhwLCBcIi0kMVwiKS50b0xvd2VyQ2FzZSgpKTtcbiAgfVxuXG4gIGlmICh0aGlzLnRmbSkge1xuICAgIGZvciAocCBpbiB0aGlzLnRmbSkge1xuICAgICAgY2FjaGVbcF0gPSB0aGlzLnRmbVtwXTtcbiAgICB9XG5cbiAgICBpZiAoY2FjaGUuc3ZnKSB7XG4gICAgICBjYWNoZS5yZW5kZXJUcmFuc2Zvcm0oKTtcbiAgICAgIHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXN2Zy1vcmlnaW5cIiwgdGhpcy5zdmdvIHx8IFwiXCIpO1xuICAgIH1cblxuICAgIGkgPSBfcmV2ZXJ0aW5nKCk7XG5cbiAgICBpZiAoKCFpIHx8ICFpLmlzU3RhcnQpICYmICFzdHlsZVtfdHJhbnNmb3JtUHJvcF0pIHtcbiAgICAgIF9yZW1vdmVJbmRlcGVuZGVudFRyYW5zZm9ybXMoc3R5bGUpO1xuXG4gICAgICBpZiAoY2FjaGUuek9yaWdpbiAmJiBzdHlsZVtfdHJhbnNmb3JtT3JpZ2luUHJvcF0pIHtcbiAgICAgICAgc3R5bGVbX3RyYW5zZm9ybU9yaWdpblByb3BdICs9IFwiIFwiICsgY2FjaGUuek9yaWdpbiArIFwicHhcIjsgLy8gc2luY2Ugd2UncmUgdW5jYWNoaW5nLCB3ZSBtdXN0IHB1dCB0aGUgek9yaWdpbiBiYWNrIGludG8gdGhlIHRyYW5zZm9ybU9yaWdpbiBzbyB0aGF0IHdlIGNhbiBwdWxsIGl0IG91dCBhY2N1cmF0ZWx5IHdoZW4gd2UgcGFyc2UgYWdhaW4uIE90aGVyd2lzZSwgd2UnZCBsb3NlIHRoZSB6IHBvcnRpb24gb2YgdGhlIG9yaWdpbiBzaW5jZSB3ZSBleHRyYWN0IGl0IHRvIHByb3RlY3QgZnJvbSBTYWZhcmkgYnVncy5cblxuICAgICAgICBjYWNoZS56T3JpZ2luID0gMDtcbiAgICAgICAgY2FjaGUucmVuZGVyVHJhbnNmb3JtKCk7XG4gICAgICB9XG5cbiAgICAgIGNhY2hlLnVuY2FjaGUgPSAxOyAvLyBpZiBpdCdzIGEgc3RhcnRBdCB0aGF0J3MgYmVpbmcgcmV2ZXJ0ZWQgaW4gdGhlIF9pbml0VHdlZW4oKSBvZiB0aGUgY29yZSwgd2UgZG9uJ3QgbmVlZCB0byB1bmNhY2hlIHRyYW5zZm9ybXMuIFRoaXMgaXMgcHVyZWx5IGEgcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uLlxuICAgIH1cbiAgfVxufSxcbiAgICBfZ2V0U3R5bGVTYXZlciA9IGZ1bmN0aW9uIF9nZXRTdHlsZVNhdmVyKHRhcmdldCwgcHJvcGVydGllcykge1xuICB2YXIgc2F2ZXIgPSB7XG4gICAgdGFyZ2V0OiB0YXJnZXQsXG4gICAgcHJvcHM6IFtdLFxuICAgIHJldmVydDogX3JldmVydFN0eWxlLFxuICAgIHNhdmU6IF9zYXZlU3R5bGVcbiAgfTtcbiAgdGFyZ2V0Ll9nc2FwIHx8IGdzYXAuY29yZS5nZXRDYWNoZSh0YXJnZXQpOyAvLyBqdXN0IG1ha2Ugc3VyZSB0aGVyZSdzIGEgX2dzYXAgY2FjaGUgZGVmaW5lZCBiZWNhdXNlIHdlIHJlYWQgZnJvbSBpdCBpbiBfc2F2ZVN0eWxlKCkgYW5kIGl0J3MgbW9yZSBlZmZpY2llbnQgdG8ganVzdCBjaGVjayBpdCBoZXJlIG9uY2UuXG5cbiAgcHJvcGVydGllcyAmJiBwcm9wZXJ0aWVzLnNwbGl0KFwiLFwiKS5mb3JFYWNoKGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIHNhdmVyLnNhdmUocCk7XG4gIH0pO1xuICByZXR1cm4gc2F2ZXI7XG59LFxuICAgIF9zdXBwb3J0czNELFxuICAgIF9jcmVhdGVFbGVtZW50ID0gZnVuY3Rpb24gX2NyZWF0ZUVsZW1lbnQodHlwZSwgbnMpIHtcbiAgdmFyIGUgPSBfZG9jLmNyZWF0ZUVsZW1lbnROUyA/IF9kb2MuY3JlYXRlRWxlbWVudE5TKChucyB8fCBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIikucmVwbGFjZSgvXmh0dHBzLywgXCJodHRwXCIpLCB0eXBlKSA6IF9kb2MuY3JlYXRlRWxlbWVudCh0eXBlKTsgLy9zb21lIHNlcnZlcnMgc3dhcCBpbiBodHRwcyBmb3IgaHR0cCBpbiB0aGUgbmFtZXNwYWNlIHdoaWNoIGNhbiBicmVhayB0aGluZ3MsIG1ha2luZyBcInN0eWxlXCIgaW5hY2Nlc3NpYmxlLlxuXG4gIHJldHVybiBlICYmIGUuc3R5bGUgPyBlIDogX2RvYy5jcmVhdGVFbGVtZW50KHR5cGUpOyAvL3NvbWUgZW52aXJvbm1lbnRzIHdvbid0IGFsbG93IGFjY2VzcyB0byB0aGUgZWxlbWVudCdzIHN0eWxlIHdoZW4gY3JlYXRlZCB3aXRoIGEgbmFtZXNwYWNlIGluIHdoaWNoIGNhc2Ugd2UgZGVmYXVsdCB0byB0aGUgc3RhbmRhcmQgY3JlYXRlRWxlbWVudCgpIHRvIHdvcmsgYXJvdW5kIHRoZSBpc3N1ZS4gQWxzbyBub3RlIHRoYXQgd2hlbiBHU0FQIGlzIGVtYmVkZGVkIGRpcmVjdGx5IGluc2lkZSBhbiBTVkcgZmlsZSwgY3JlYXRlRWxlbWVudCgpIHdvbid0IGFsbG93IGFjY2VzcyB0byB0aGUgc3R5bGUgb2JqZWN0IGluIEZpcmVmb3ggKHNlZSBodHRwczovL2dzYXAuY29tL2ZvcnVtcy90b3BpYy8yMDIxNS1wcm9ibGVtLXVzaW5nLXR3ZWVubWF4LWluLXN0YW5kYWxvbmUtc2VsZi1jb250YWluaW5nLXN2Zy1maWxlLWVyci1jYW5ub3Qtc2V0LXByb3BlcnR5LWNzc3RleHQtb2YtdW5kZWZpbmVkLykuXG59LFxuICAgIF9nZXRDb21wdXRlZFByb3BlcnR5ID0gZnVuY3Rpb24gX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSwgc2tpcFByZWZpeEZhbGxiYWNrKSB7XG4gIHZhciBjcyA9IGdldENvbXB1dGVkU3R5bGUodGFyZ2V0KTtcbiAgcmV0dXJuIGNzW3Byb3BlcnR5XSB8fCBjcy5nZXRQcm9wZXJ0eVZhbHVlKHByb3BlcnR5LnJlcGxhY2UoX2NhcHNFeHAsIFwiLSQxXCIpLnRvTG93ZXJDYXNlKCkpIHx8IGNzLmdldFByb3BlcnR5VmFsdWUocHJvcGVydHkpIHx8ICFza2lwUHJlZml4RmFsbGJhY2sgJiYgX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBfY2hlY2tQcm9wUHJlZml4KHByb3BlcnR5KSB8fCBwcm9wZXJ0eSwgMSkgfHwgXCJcIjsgLy9jc3MgdmFyaWFibGVzIG1heSBub3QgbmVlZCBjYXBzIHN3YXBwZWQgb3V0IGZvciBkYXNoZXMgYW5kIGxvd2VyY2FzZS5cbn0sXG4gICAgX3ByZWZpeGVzID0gXCJPLE1veixtcyxNcyxXZWJraXRcIi5zcGxpdChcIixcIiksXG4gICAgX2NoZWNrUHJvcFByZWZpeCA9IGZ1bmN0aW9uIF9jaGVja1Byb3BQcmVmaXgocHJvcGVydHksIGVsZW1lbnQsIHByZWZlclByZWZpeCkge1xuICB2YXIgZSA9IGVsZW1lbnQgfHwgX3RlbXBEaXYsXG4gICAgICBzID0gZS5zdHlsZSxcbiAgICAgIGkgPSA1O1xuXG4gIGlmIChwcm9wZXJ0eSBpbiBzICYmICFwcmVmZXJQcmVmaXgpIHtcbiAgICByZXR1cm4gcHJvcGVydHk7XG4gIH1cblxuICBwcm9wZXJ0eSA9IHByb3BlcnR5LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcHJvcGVydHkuc3Vic3RyKDEpO1xuXG4gIHdoaWxlIChpLS0gJiYgIShfcHJlZml4ZXNbaV0gKyBwcm9wZXJ0eSBpbiBzKSkge31cblxuICByZXR1cm4gaSA8IDAgPyBudWxsIDogKGkgPT09IDMgPyBcIm1zXCIgOiBpID49IDAgPyBfcHJlZml4ZXNbaV0gOiBcIlwiKSArIHByb3BlcnR5O1xufSxcbiAgICBfaW5pdENvcmUgPSBmdW5jdGlvbiBfaW5pdENvcmUoKSB7XG4gIGlmIChfd2luZG93RXhpc3RzKCkgJiYgd2luZG93LmRvY3VtZW50KSB7XG4gICAgX3dpbiA9IHdpbmRvdztcbiAgICBfZG9jID0gX3dpbi5kb2N1bWVudDtcbiAgICBfZG9jRWxlbWVudCA9IF9kb2MuZG9jdW1lbnRFbGVtZW50O1xuICAgIF90ZW1wRGl2ID0gX2NyZWF0ZUVsZW1lbnQoXCJkaXZcIikgfHwge1xuICAgICAgc3R5bGU6IHt9XG4gICAgfTtcbiAgICBfdGVtcERpdlN0eWxlciA9IF9jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIF90cmFuc2Zvcm1Qcm9wID0gX2NoZWNrUHJvcFByZWZpeChfdHJhbnNmb3JtUHJvcCk7XG4gICAgX3RyYW5zZm9ybU9yaWdpblByb3AgPSBfdHJhbnNmb3JtUHJvcCArIFwiT3JpZ2luXCI7XG4gICAgX3RlbXBEaXYuc3R5bGUuY3NzVGV4dCA9IFwiYm9yZGVyLXdpZHRoOjA7bGluZS1oZWlnaHQ6MDtwb3NpdGlvbjphYnNvbHV0ZTtwYWRkaW5nOjBcIjsgLy9tYWtlIHN1cmUgdG8gb3ZlcnJpZGUgY2VydGFpbiBwcm9wZXJ0aWVzIHRoYXQgbWF5IGNvbnRhbWluYXRlIG1lYXN1cmVtZW50cywgaW4gY2FzZSB0aGUgdXNlciBoYXMgb3ZlcnJlYWNoaW5nIHN0eWxlIHNoZWV0cy5cblxuICAgIF9zdXBwb3J0czNEID0gISFfY2hlY2tQcm9wUHJlZml4KFwicGVyc3BlY3RpdmVcIik7XG4gICAgX3JldmVydGluZyA9IGdzYXAuY29yZS5yZXZlcnRpbmc7XG4gICAgX3BsdWdpbkluaXR0ZWQgPSAxO1xuICB9XG59LFxuICAgIF9nZXRCQm94SGFjayA9IGZ1bmN0aW9uIF9nZXRCQm94SGFjayhzd2FwSWZQb3NzaWJsZSkge1xuICAvL3dvcmtzIGFyb3VuZCBpc3N1ZXMgaW4gc29tZSBicm93c2VycyAobGlrZSBGaXJlZm94KSB0aGF0IGRvbid0IGNvcnJlY3RseSByZXBvcnQgZ2V0QkJveCgpIG9uIFNWRyBlbGVtZW50cyBpbnNpZGUgYSA8ZGVmcz4gZWxlbWVudCBhbmQvb3IgPG1hc2s+LiBXZSB0cnkgY3JlYXRpbmcgYW4gU1ZHLCBhZGRpbmcgaXQgdG8gdGhlIGRvY3VtZW50RWxlbWVudCBhbmQgdG9zcyB0aGUgZWxlbWVudCBpbiB0aGVyZSBzbyB0aGF0IGl0J3MgZGVmaW5pdGVseSBwYXJ0IG9mIHRoZSByZW5kZXJpbmcgdHJlZSwgdGhlbiBncmFiIHRoZSBiYm94IGFuZCBpZiBpdCB3b3Jrcywgd2UgYWN0dWFsbHkgc3dhcCBvdXQgdGhlIG9yaWdpbmFsIGdldEJCb3goKSBtZXRob2QgZm9yIG91ciBvd24gdGhhdCBkb2VzIHRoZXNlIGV4dHJhIHN0ZXBzIHdoZW5ldmVyIGdldEJCb3ggaXMgbmVlZGVkLiBUaGlzIGhlbHBzIGVuc3VyZSB0aGF0IHBlcmZvcm1hbmNlIGlzIG9wdGltYWwgKG9ubHkgZG8gYWxsIHRoZXNlIGV4dHJhIHN0ZXBzIHdoZW4gYWJzb2x1dGVseSBuZWNlc3NhcnkuLi5tb3N0IGVsZW1lbnRzIGRvbid0IG5lZWQgaXQpLlxuICB2YXIgc3ZnID0gX2NyZWF0ZUVsZW1lbnQoXCJzdmdcIiwgdGhpcy5vd25lclNWR0VsZW1lbnQgJiYgdGhpcy5vd25lclNWR0VsZW1lbnQuZ2V0QXR0cmlidXRlKFwieG1sbnNcIikgfHwgXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiKSxcbiAgICAgIG9sZFBhcmVudCA9IHRoaXMucGFyZW50Tm9kZSxcbiAgICAgIG9sZFNpYmxpbmcgPSB0aGlzLm5leHRTaWJsaW5nLFxuICAgICAgb2xkQ1NTID0gdGhpcy5zdHlsZS5jc3NUZXh0LFxuICAgICAgYmJveDtcblxuICBfZG9jRWxlbWVudC5hcHBlbmRDaGlsZChzdmcpO1xuXG4gIHN2Zy5hcHBlbmRDaGlsZCh0aGlzKTtcbiAgdGhpcy5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuXG4gIGlmIChzd2FwSWZQb3NzaWJsZSkge1xuICAgIHRyeSB7XG4gICAgICBiYm94ID0gdGhpcy5nZXRCQm94KCk7XG4gICAgICB0aGlzLl9nc2FwQkJveCA9IHRoaXMuZ2V0QkJveDsgLy9zdG9yZSB0aGUgb3JpZ2luYWxcblxuICAgICAgdGhpcy5nZXRCQm94ID0gX2dldEJCb3hIYWNrO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH0gZWxzZSBpZiAodGhpcy5fZ3NhcEJCb3gpIHtcbiAgICBiYm94ID0gdGhpcy5fZ3NhcEJCb3goKTtcbiAgfVxuXG4gIGlmIChvbGRQYXJlbnQpIHtcbiAgICBpZiAob2xkU2libGluZykge1xuICAgICAgb2xkUGFyZW50Lmluc2VydEJlZm9yZSh0aGlzLCBvbGRTaWJsaW5nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb2xkUGFyZW50LmFwcGVuZENoaWxkKHRoaXMpO1xuICAgIH1cbiAgfVxuXG4gIF9kb2NFbGVtZW50LnJlbW92ZUNoaWxkKHN2Zyk7XG5cbiAgdGhpcy5zdHlsZS5jc3NUZXh0ID0gb2xkQ1NTO1xuICByZXR1cm4gYmJveDtcbn0sXG4gICAgX2dldEF0dHJpYnV0ZUZhbGxiYWNrcyA9IGZ1bmN0aW9uIF9nZXRBdHRyaWJ1dGVGYWxsYmFja3ModGFyZ2V0LCBhdHRyaWJ1dGVzQXJyYXkpIHtcbiAgdmFyIGkgPSBhdHRyaWJ1dGVzQXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlIChpLS0pIHtcbiAgICBpZiAodGFyZ2V0Lmhhc0F0dHJpYnV0ZShhdHRyaWJ1dGVzQXJyYXlbaV0pKSB7XG4gICAgICByZXR1cm4gdGFyZ2V0LmdldEF0dHJpYnV0ZShhdHRyaWJ1dGVzQXJyYXlbaV0pO1xuICAgIH1cbiAgfVxufSxcbiAgICBfZ2V0QkJveCA9IGZ1bmN0aW9uIF9nZXRCQm94KHRhcmdldCkge1xuICB2YXIgYm91bmRzO1xuXG4gIHRyeSB7XG4gICAgYm91bmRzID0gdGFyZ2V0LmdldEJCb3goKTsgLy9GaXJlZm94IHRocm93cyBlcnJvcnMgaWYgeW91IHRyeSBjYWxsaW5nIGdldEJCb3goKSBvbiBhbiBTVkcgZWxlbWVudCB0aGF0J3Mgbm90IHJlbmRlcmVkIChsaWtlIGluIGEgPHN5bWJvbD4gb3IgPGRlZnM+KS4gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NjEyMTE4XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgYm91bmRzID0gX2dldEJCb3hIYWNrLmNhbGwodGFyZ2V0LCB0cnVlKTtcbiAgfVxuXG4gIGJvdW5kcyAmJiAoYm91bmRzLndpZHRoIHx8IGJvdW5kcy5oZWlnaHQpIHx8IHRhcmdldC5nZXRCQm94ID09PSBfZ2V0QkJveEhhY2sgfHwgKGJvdW5kcyA9IF9nZXRCQm94SGFjay5jYWxsKHRhcmdldCwgdHJ1ZSkpOyAvL3NvbWUgYnJvd3NlcnMgKGxpa2UgRmlyZWZveCkgbWlzcmVwb3J0IHRoZSBib3VuZHMgaWYgdGhlIGVsZW1lbnQgaGFzIHplcm8gd2lkdGggYW5kIGhlaWdodCAoaXQganVzdCBhc3N1bWVzIGl0J3MgYXQgeDowLCB5OjApLCB0aHVzIHdlIG5lZWQgdG8gbWFudWFsbHkgZ3JhYiB0aGUgcG9zaXRpb24gaW4gdGhhdCBjYXNlLlxuXG4gIHJldHVybiBib3VuZHMgJiYgIWJvdW5kcy53aWR0aCAmJiAhYm91bmRzLnggJiYgIWJvdW5kcy55ID8ge1xuICAgIHg6ICtfZ2V0QXR0cmlidXRlRmFsbGJhY2tzKHRhcmdldCwgW1wieFwiLCBcImN4XCIsIFwieDFcIl0pIHx8IDAsXG4gICAgeTogK19nZXRBdHRyaWJ1dGVGYWxsYmFja3ModGFyZ2V0LCBbXCJ5XCIsIFwiY3lcIiwgXCJ5MVwiXSkgfHwgMCxcbiAgICB3aWR0aDogMCxcbiAgICBoZWlnaHQ6IDBcbiAgfSA6IGJvdW5kcztcbn0sXG4gICAgX2lzU1ZHID0gZnVuY3Rpb24gX2lzU1ZHKGUpIHtcbiAgcmV0dXJuICEhKGUuZ2V0Q1RNICYmICghZS5wYXJlbnROb2RlIHx8IGUub3duZXJTVkdFbGVtZW50KSAmJiBfZ2V0QkJveChlKSk7XG59LFxuICAgIC8vcmVwb3J0cyBpZiB0aGUgZWxlbWVudCBpcyBhbiBTVkcgb24gd2hpY2ggZ2V0QkJveCgpIGFjdHVhbGx5IHdvcmtzXG5fcmVtb3ZlUHJvcGVydHkgPSBmdW5jdGlvbiBfcmVtb3ZlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSkge1xuICBpZiAocHJvcGVydHkpIHtcbiAgICB2YXIgc3R5bGUgPSB0YXJnZXQuc3R5bGUsXG4gICAgICAgIGZpcnN0MkNoYXJzO1xuXG4gICAgaWYgKHByb3BlcnR5IGluIF90cmFuc2Zvcm1Qcm9wcyAmJiBwcm9wZXJ0eSAhPT0gX3RyYW5zZm9ybU9yaWdpblByb3ApIHtcbiAgICAgIHByb3BlcnR5ID0gX3RyYW5zZm9ybVByb3A7XG4gICAgfVxuXG4gICAgaWYgKHN0eWxlLnJlbW92ZVByb3BlcnR5KSB7XG4gICAgICBmaXJzdDJDaGFycyA9IHByb3BlcnR5LnN1YnN0cigwLCAyKTtcblxuICAgICAgaWYgKGZpcnN0MkNoYXJzID09PSBcIm1zXCIgfHwgcHJvcGVydHkuc3Vic3RyKDAsIDYpID09PSBcIndlYmtpdFwiKSB7XG4gICAgICAgIC8vTWljcm9zb2Z0IGFuZCBzb21lIFdlYmtpdCBicm93c2VycyBkb24ndCBjb25mb3JtIHRvIHRoZSBzdGFuZGFyZCBvZiBjYXBpdGFsaXppbmcgdGhlIGZpcnN0IHByZWZpeCBjaGFyYWN0ZXIsIHNvIHdlIGFkanVzdCBzbyB0aGF0IHdoZW4gd2UgcHJlZml4IHRoZSBjYXBzIHdpdGggYSBkYXNoLCBpdCdzIGNvcnJlY3QgKG90aGVyd2lzZSBpdCdkIGJlIFwibXMtdHJhbnNmb3JtXCIgaW5zdGVhZCBvZiBcIi1tcy10cmFuc2Zvcm1cIiBmb3IgSUU5LCBmb3IgZXhhbXBsZSlcbiAgICAgICAgcHJvcGVydHkgPSBcIi1cIiArIHByb3BlcnR5O1xuICAgICAgfVxuXG4gICAgICBzdHlsZS5yZW1vdmVQcm9wZXJ0eShmaXJzdDJDaGFycyA9PT0gXCItLVwiID8gcHJvcGVydHkgOiBwcm9wZXJ0eS5yZXBsYWNlKF9jYXBzRXhwLCBcIi0kMVwiKS50b0xvd2VyQ2FzZSgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy9ub3RlOiBvbGQgdmVyc2lvbnMgb2YgSUUgdXNlIFwicmVtb3ZlQXR0cmlidXRlKClcIiBpbnN0ZWFkIG9mIFwicmVtb3ZlUHJvcGVydHkoKVwiXG4gICAgICBzdHlsZS5yZW1vdmVBdHRyaWJ1dGUocHJvcGVydHkpO1xuICAgIH1cbiAgfVxufSxcbiAgICBfYWRkTm9uVHdlZW5pbmdQVCA9IGZ1bmN0aW9uIF9hZGROb25Ud2VlbmluZ1BUKHBsdWdpbiwgdGFyZ2V0LCBwcm9wZXJ0eSwgYmVnaW5uaW5nLCBlbmQsIG9ubHlTZXRBdEVuZCkge1xuICB2YXIgcHQgPSBuZXcgUHJvcFR3ZWVuKHBsdWdpbi5fcHQsIHRhcmdldCwgcHJvcGVydHksIDAsIDEsIG9ubHlTZXRBdEVuZCA/IF9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlT25seUF0RW5kIDogX3JlbmRlck5vblR3ZWVuaW5nVmFsdWUpO1xuICBwbHVnaW4uX3B0ID0gcHQ7XG4gIHB0LmIgPSBiZWdpbm5pbmc7XG4gIHB0LmUgPSBlbmQ7XG5cbiAgcGx1Z2luLl9wcm9wcy5wdXNoKHByb3BlcnR5KTtcblxuICByZXR1cm4gcHQ7XG59LFxuICAgIF9ub25Db252ZXJ0aWJsZVVuaXRzID0ge1xuICBkZWc6IDEsXG4gIHJhZDogMSxcbiAgdHVybjogMVxufSxcbiAgICBfbm9uU3RhbmRhcmRMYXlvdXRzID0ge1xuICBncmlkOiAxLFxuICBmbGV4OiAxXG59LFxuICAgIC8vdGFrZXMgYSBzaW5nbGUgdmFsdWUgbGlrZSAyMHB4IGFuZCBjb252ZXJ0cyBpdCB0byB0aGUgdW5pdCBzcGVjaWZpZWQsIGxpa2UgXCIlXCIsIHJldHVybmluZyBvbmx5IHRoZSBudW1lcmljIGFtb3VudC5cbl9jb252ZXJ0VG9Vbml0ID0gZnVuY3Rpb24gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIHVuaXQpIHtcbiAgdmFyIGN1clZhbHVlID0gcGFyc2VGbG9hdCh2YWx1ZSkgfHwgMCxcbiAgICAgIGN1clVuaXQgPSAodmFsdWUgKyBcIlwiKS50cmltKCkuc3Vic3RyKChjdXJWYWx1ZSArIFwiXCIpLmxlbmd0aCkgfHwgXCJweFwiLFxuICAgICAgLy8gc29tZSBicm93c2VycyBsZWF2ZSBleHRyYSB3aGl0ZXNwYWNlIGF0IHRoZSBiZWdpbm5pbmcgb2YgQ1NTIHZhcmlhYmxlcywgaGVuY2UgdGhlIG5lZWQgdG8gdHJpbSgpXG4gIHN0eWxlID0gX3RlbXBEaXYuc3R5bGUsXG4gICAgICBob3Jpem9udGFsID0gX2hvcml6b250YWxFeHAudGVzdChwcm9wZXJ0eSksXG4gICAgICBpc1Jvb3RTVkcgPSB0YXJnZXQudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcInN2Z1wiLFxuICAgICAgbWVhc3VyZVByb3BlcnR5ID0gKGlzUm9vdFNWRyA/IFwiY2xpZW50XCIgOiBcIm9mZnNldFwiKSArIChob3Jpem9udGFsID8gXCJXaWR0aFwiIDogXCJIZWlnaHRcIiksXG4gICAgICBhbW91bnQgPSAxMDAsXG4gICAgICB0b1BpeGVscyA9IHVuaXQgPT09IFwicHhcIixcbiAgICAgIHRvUGVyY2VudCA9IHVuaXQgPT09IFwiJVwiLFxuICAgICAgcHgsXG4gICAgICBwYXJlbnQsXG4gICAgICBjYWNoZSxcbiAgICAgIGlzU1ZHO1xuXG4gIGlmICh1bml0ID09PSBjdXJVbml0IHx8ICFjdXJWYWx1ZSB8fCBfbm9uQ29udmVydGlibGVVbml0c1t1bml0XSB8fCBfbm9uQ29udmVydGlibGVVbml0c1tjdXJVbml0XSkge1xuICAgIHJldHVybiBjdXJWYWx1ZTtcbiAgfVxuXG4gIGN1clVuaXQgIT09IFwicHhcIiAmJiAhdG9QaXhlbHMgJiYgKGN1clZhbHVlID0gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIFwicHhcIikpO1xuICBpc1NWRyA9IHRhcmdldC5nZXRDVE0gJiYgX2lzU1ZHKHRhcmdldCk7XG5cbiAgaWYgKCh0b1BlcmNlbnQgfHwgY3VyVW5pdCA9PT0gXCIlXCIpICYmIChfdHJhbnNmb3JtUHJvcHNbcHJvcGVydHldIHx8IH5wcm9wZXJ0eS5pbmRleE9mKFwiYWRpdXNcIikpKSB7XG4gICAgcHggPSBpc1NWRyA/IHRhcmdldC5nZXRCQm94KClbaG9yaXpvbnRhbCA/IFwid2lkdGhcIiA6IFwiaGVpZ2h0XCJdIDogdGFyZ2V0W21lYXN1cmVQcm9wZXJ0eV07XG4gICAgcmV0dXJuIF9yb3VuZCh0b1BlcmNlbnQgPyBjdXJWYWx1ZSAvIHB4ICogYW1vdW50IDogY3VyVmFsdWUgLyAxMDAgKiBweCk7XG4gIH1cblxuICBzdHlsZVtob3Jpem9udGFsID8gXCJ3aWR0aFwiIDogXCJoZWlnaHRcIl0gPSBhbW91bnQgKyAodG9QaXhlbHMgPyBjdXJVbml0IDogdW5pdCk7XG4gIHBhcmVudCA9IH5wcm9wZXJ0eS5pbmRleE9mKFwiYWRpdXNcIikgfHwgdW5pdCA9PT0gXCJlbVwiICYmIHRhcmdldC5hcHBlbmRDaGlsZCAmJiAhaXNSb290U1ZHID8gdGFyZ2V0IDogdGFyZ2V0LnBhcmVudE5vZGU7XG5cbiAgaWYgKGlzU1ZHKSB7XG4gICAgcGFyZW50ID0gKHRhcmdldC5vd25lclNWR0VsZW1lbnQgfHwge30pLnBhcmVudE5vZGU7XG4gIH1cblxuICBpZiAoIXBhcmVudCB8fCBwYXJlbnQgPT09IF9kb2MgfHwgIXBhcmVudC5hcHBlbmRDaGlsZCkge1xuICAgIHBhcmVudCA9IF9kb2MuYm9keTtcbiAgfVxuXG4gIGNhY2hlID0gcGFyZW50Ll9nc2FwO1xuXG4gIGlmIChjYWNoZSAmJiB0b1BlcmNlbnQgJiYgY2FjaGUud2lkdGggJiYgaG9yaXpvbnRhbCAmJiBjYWNoZS50aW1lID09PSBfdGlja2VyLnRpbWUgJiYgIWNhY2hlLnVuY2FjaGUpIHtcbiAgICByZXR1cm4gX3JvdW5kKGN1clZhbHVlIC8gY2FjaGUud2lkdGggKiBhbW91bnQpO1xuICB9IGVsc2Uge1xuICAgIGlmICh0b1BlcmNlbnQgJiYgKHByb3BlcnR5ID09PSBcImhlaWdodFwiIHx8IHByb3BlcnR5ID09PSBcIndpZHRoXCIpKSB7XG4gICAgICAvLyBpZiB3ZSdyZSBkZWFsaW5nIHdpdGggd2lkdGgvaGVpZ2h0IHRoYXQncyBpbnNpZGUgYSBjb250YWluZXIgd2l0aCBwYWRkaW5nIGFuZC9vciBpdCdzIGEgZmxleGJveC9ncmlkIGNvbnRhaW5lciwgd2UgbXVzdCBhcHBseSBpdCB0byB0aGUgdGFyZ2V0IGl0c2VsZiByYXRoZXIgdGhhbiB0aGUgX3RlbXBEaXYgaW4gb3JkZXIgdG8gZW5zdXJlIGNvbXBsZXRlIGFjY3VyYWN5LCBmYWN0b3JpbmcgaW4gdGhlIHBhcmVudCdzIHBhZGRpbmcuXG4gICAgICB2YXIgdiA9IHRhcmdldC5zdHlsZVtwcm9wZXJ0eV07XG4gICAgICB0YXJnZXQuc3R5bGVbcHJvcGVydHldID0gYW1vdW50ICsgdW5pdDtcbiAgICAgIHB4ID0gdGFyZ2V0W21lYXN1cmVQcm9wZXJ0eV07XG4gICAgICB2ID8gdGFyZ2V0LnN0eWxlW3Byb3BlcnR5XSA9IHYgOiBfcmVtb3ZlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICh0b1BlcmNlbnQgfHwgY3VyVW5pdCA9PT0gXCIlXCIpICYmICFfbm9uU3RhbmRhcmRMYXlvdXRzW19nZXRDb21wdXRlZFByb3BlcnR5KHBhcmVudCwgXCJkaXNwbGF5XCIpXSAmJiAoc3R5bGUucG9zaXRpb24gPSBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIFwicG9zaXRpb25cIikpO1xuICAgICAgcGFyZW50ID09PSB0YXJnZXQgJiYgKHN0eWxlLnBvc2l0aW9uID0gXCJzdGF0aWNcIik7IC8vIGxpa2UgZm9yIGJvcmRlclJhZGl1cywgaWYgaXQncyBhICUgd2UgbXVzdCBoYXZlIGl0IHJlbGF0aXZlIHRvIHRoZSB0YXJnZXQgaXRzZWxmIGJ1dCB0aGF0IG1heSBub3QgaGF2ZSBwb3NpdGlvbjogcmVsYXRpdmUgb3IgcG9zaXRpb246IGFic29sdXRlIGluIHdoaWNoIGNhc2UgaXQnZCBnbyB1cCB0aGUgY2hhaW4gdW50aWwgaXQgZmluZHMgaXRzIG9mZnNldFBhcmVudCAoYmFkKS4gcG9zaXRpb246IHN0YXRpYyBwcm90ZWN0cyBhZ2FpbnN0IHRoYXQuXG5cbiAgICAgIHBhcmVudC5hcHBlbmRDaGlsZChfdGVtcERpdik7XG4gICAgICBweCA9IF90ZW1wRGl2W21lYXN1cmVQcm9wZXJ0eV07XG4gICAgICBwYXJlbnQucmVtb3ZlQ2hpbGQoX3RlbXBEaXYpO1xuICAgICAgc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG4gICAgfVxuXG4gICAgaWYgKGhvcml6b250YWwgJiYgdG9QZXJjZW50KSB7XG4gICAgICBjYWNoZSA9IF9nZXRDYWNoZShwYXJlbnQpO1xuICAgICAgY2FjaGUudGltZSA9IF90aWNrZXIudGltZTtcbiAgICAgIGNhY2hlLndpZHRoID0gcGFyZW50W21lYXN1cmVQcm9wZXJ0eV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIF9yb3VuZCh0b1BpeGVscyA/IHB4ICogY3VyVmFsdWUgLyBhbW91bnQgOiBweCAmJiBjdXJWYWx1ZSA/IGFtb3VudCAvIHB4ICogY3VyVmFsdWUgOiAwKTtcbn0sXG4gICAgX2dldCA9IGZ1bmN0aW9uIF9nZXQodGFyZ2V0LCBwcm9wZXJ0eSwgdW5pdCwgdW5jYWNoZSkge1xuICB2YXIgdmFsdWU7XG4gIF9wbHVnaW5Jbml0dGVkIHx8IF9pbml0Q29yZSgpO1xuXG4gIGlmIChwcm9wZXJ0eSBpbiBfcHJvcGVydHlBbGlhc2VzICYmIHByb3BlcnR5ICE9PSBcInRyYW5zZm9ybVwiKSB7XG4gICAgcHJvcGVydHkgPSBfcHJvcGVydHlBbGlhc2VzW3Byb3BlcnR5XTtcblxuICAgIGlmICh+cHJvcGVydHkuaW5kZXhPZihcIixcIikpIHtcbiAgICAgIHByb3BlcnR5ID0gcHJvcGVydHkuc3BsaXQoXCIsXCIpWzBdO1xuICAgIH1cbiAgfVxuXG4gIGlmIChfdHJhbnNmb3JtUHJvcHNbcHJvcGVydHldICYmIHByb3BlcnR5ICE9PSBcInRyYW5zZm9ybVwiKSB7XG4gICAgdmFsdWUgPSBfcGFyc2VUcmFuc2Zvcm0odGFyZ2V0LCB1bmNhY2hlKTtcbiAgICB2YWx1ZSA9IHByb3BlcnR5ICE9PSBcInRyYW5zZm9ybU9yaWdpblwiID8gdmFsdWVbcHJvcGVydHldIDogdmFsdWUuc3ZnID8gdmFsdWUub3JpZ2luIDogX2ZpcnN0VHdvT25seShfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIF90cmFuc2Zvcm1PcmlnaW5Qcm9wKSkgKyBcIiBcIiArIHZhbHVlLnpPcmlnaW4gKyBcInB4XCI7XG4gIH0gZWxzZSB7XG4gICAgdmFsdWUgPSB0YXJnZXQuc3R5bGVbcHJvcGVydHldO1xuXG4gICAgaWYgKCF2YWx1ZSB8fCB2YWx1ZSA9PT0gXCJhdXRvXCIgfHwgdW5jYWNoZSB8fCB+KHZhbHVlICsgXCJcIikuaW5kZXhPZihcImNhbGMoXCIpKSB7XG4gICAgICB2YWx1ZSA9IF9zcGVjaWFsUHJvcHNbcHJvcGVydHldICYmIF9zcGVjaWFsUHJvcHNbcHJvcGVydHldKHRhcmdldCwgcHJvcGVydHksIHVuaXQpIHx8IF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgcHJvcGVydHkpIHx8IF9nZXRQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5KSB8fCAocHJvcGVydHkgPT09IFwib3BhY2l0eVwiID8gMSA6IDApOyAvLyBub3RlOiBzb21lIGJyb3dzZXJzLCBsaWtlIEZpcmVmb3gsIGRvbid0IHJlcG9ydCBib3JkZXJSYWRpdXMgY29ycmVjdGx5ISBJbnN0ZWFkLCBpdCBvbmx5IHJlcG9ydHMgZXZlcnkgY29ybmVyIGxpa2UgIGJvcmRlclRvcExlZnRSYWRpdXNcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdW5pdCAmJiAhfih2YWx1ZSArIFwiXCIpLnRyaW0oKS5pbmRleE9mKFwiIFwiKSA/IF9jb252ZXJ0VG9Vbml0KHRhcmdldCwgcHJvcGVydHksIHZhbHVlLCB1bml0KSArIHVuaXQgOiB2YWx1ZTtcbn0sXG4gICAgX3R3ZWVuQ29tcGxleENTU1N0cmluZyA9IGZ1bmN0aW9uIF90d2VlbkNvbXBsZXhDU1NTdHJpbmcodGFyZ2V0LCBwcm9wLCBzdGFydCwgZW5kKSB7XG4gIC8vIG5vdGU6IHdlIGNhbGwgX3R3ZWVuQ29tcGxleENTU1N0cmluZy5jYWxsKHBsdWdpbkluc3RhbmNlLi4uKSB0byBlbnN1cmUgdGhhdCBpdCdzIHNjb3BlZCBwcm9wZXJseS4gV2UgbWF5IGNhbGwgaXQgZnJvbSB3aXRoaW4gYSBwbHVnaW4gdG9vLCB0aHVzIFwidGhpc1wiIHdvdWxkIHJlZmVyIHRvIHRoZSBwbHVnaW4uXG4gIGlmICghc3RhcnQgfHwgc3RhcnQgPT09IFwibm9uZVwiKSB7XG4gICAgLy8gc29tZSBicm93c2VycyBsaWtlIFNhZmFyaSBhY3R1YWxseSBQUkVGRVIgdGhlIHByZWZpeGVkIHByb3BlcnR5IGFuZCBtaXMtcmVwb3J0IHRoZSB1bnByZWZpeGVkIHZhbHVlIGxpa2UgY2xpcFBhdGggKEJVRykuIEluIG90aGVyIHdvcmRzLCBldmVuIHRob3VnaCBjbGlwUGF0aCBleGlzdHMgaW4gdGhlIHN0eWxlIChcImNsaXBQYXRoXCIgaW4gdGFyZ2V0LnN0eWxlKSBhbmQgaXQncyBzZXQgaW4gdGhlIENTUyBwcm9wZXJseSAoYWxvbmcgd2l0aCAtd2Via2l0LWNsaXAtcGF0aCksIFNhZmFyaSByZXBvcnRzIGNsaXBQYXRoIGFzIFwibm9uZVwiIHdoZXJlYXMgV2Via2l0Q2xpcFBhdGggcmVwb3J0cyBhY2N1cmF0ZWx5IGxpa2UgXCJlbGxpcHNlKDEwMCUgMCUgYXQgNTAlIDAlKVwiLCBzbyBpbiB0aGlzIGNhc2Ugd2UgbXVzdCBTV0lUQ0ggdG8gdXNpbmcgdGhlIHByZWZpeGVkIHByb3BlcnR5IGluc3RlYWQuIFNlZSBodHRwczovL2dzYXAuY29tL2ZvcnVtcy90b3BpYy8xODMxMC1jbGlwcGF0aC1kb2VzbnQtd29yay1vbi1pb3MvXG4gICAgdmFyIHAgPSBfY2hlY2tQcm9wUHJlZml4KHByb3AsIHRhcmdldCwgMSksXG4gICAgICAgIHMgPSBwICYmIF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgcCwgMSk7XG5cbiAgICBpZiAocyAmJiBzICE9PSBzdGFydCkge1xuICAgICAgcHJvcCA9IHA7XG4gICAgICBzdGFydCA9IHM7XG4gICAgfSBlbHNlIGlmIChwcm9wID09PSBcImJvcmRlckNvbG9yXCIpIHtcbiAgICAgIHN0YXJ0ID0gX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBcImJvcmRlclRvcENvbG9yXCIpOyAvLyBGaXJlZm94IGJ1ZzogYWx3YXlzIHJlcG9ydHMgXCJib3JkZXJDb2xvclwiIGFzIFwiXCIsIHNvIHdlIG11c3QgZmFsbCBiYWNrIHRvIGJvcmRlclRvcENvbG9yLiBTZWUgaHR0cHM6Ly9nc2FwLmNvbS9mb3J1bXMvdG9waWMvMjQ1ODMtaG93LXRvLXJldHVybi1jb2xvcnMtdGhhdC1pLWhhZC1hZnRlci1yZXZlcnNlL1xuICAgIH1cbiAgfVxuXG4gIHZhciBwdCA9IG5ldyBQcm9wVHdlZW4odGhpcy5fcHQsIHRhcmdldC5zdHlsZSwgcHJvcCwgMCwgMSwgX3JlbmRlckNvbXBsZXhTdHJpbmcpLFxuICAgICAgaW5kZXggPSAwLFxuICAgICAgbWF0Y2hJbmRleCA9IDAsXG4gICAgICBhLFxuICAgICAgcmVzdWx0LFxuICAgICAgc3RhcnRWYWx1ZXMsXG4gICAgICBzdGFydE51bSxcbiAgICAgIGNvbG9yLFxuICAgICAgc3RhcnRWYWx1ZSxcbiAgICAgIGVuZFZhbHVlLFxuICAgICAgZW5kTnVtLFxuICAgICAgY2h1bmssXG4gICAgICBlbmRVbml0LFxuICAgICAgc3RhcnRVbml0LFxuICAgICAgZW5kVmFsdWVzO1xuICBwdC5iID0gc3RhcnQ7XG4gIHB0LmUgPSBlbmQ7XG4gIHN0YXJ0ICs9IFwiXCI7IC8vIGVuc3VyZSB2YWx1ZXMgYXJlIHN0cmluZ3NcblxuICBlbmQgKz0gXCJcIjtcblxuICBpZiAoZW5kID09PSBcImF1dG9cIikge1xuICAgIHN0YXJ0VmFsdWUgPSB0YXJnZXQuc3R5bGVbcHJvcF07XG4gICAgdGFyZ2V0LnN0eWxlW3Byb3BdID0gZW5kO1xuICAgIGVuZCA9IF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgcHJvcCkgfHwgZW5kO1xuICAgIHN0YXJ0VmFsdWUgPyB0YXJnZXQuc3R5bGVbcHJvcF0gPSBzdGFydFZhbHVlIDogX3JlbW92ZVByb3BlcnR5KHRhcmdldCwgcHJvcCk7XG4gIH1cblxuICBhID0gW3N0YXJ0LCBlbmRdO1xuXG4gIF9jb2xvclN0cmluZ0ZpbHRlcihhKTsgLy8gcGFzcyBhbiBhcnJheSB3aXRoIHRoZSBzdGFydGluZyBhbmQgZW5kaW5nIHZhbHVlcyBhbmQgbGV0IHRoZSBmaWx0ZXIgZG8gd2hhdGV2ZXIgaXQgbmVlZHMgdG8gdGhlIHZhbHVlcy4gSWYgY29sb3JzIGFyZSBmb3VuZCwgaXQgcmV0dXJucyB0cnVlIGFuZCB0aGVuIHdlIG11c3QgbWF0Y2ggd2hlcmUgdGhlIGNvbG9yIHNob3dzIHVwIG9yZGVyLXdpc2UgYmVjYXVzZSBmb3IgdGhpbmdzIGxpa2UgYm94U2hhZG93LCBzb21ldGltZXMgdGhlIGJyb3dzZXIgcHJvdmlkZXMgdGhlIGNvbXB1dGVkIHZhbHVlcyB3aXRoIHRoZSBjb2xvciBGSVJTVCwgYnV0IHRoZSB1c2VyIHByb3ZpZGVzIGl0IHdpdGggdGhlIGNvbG9yIExBU1QsIHNvIGZsaXAgdGhlbSBpZiBuZWNlc3NhcnkuIFNhbWUgZm9yIGRyb3Atc2hhZG93KCkuXG5cblxuICBzdGFydCA9IGFbMF07XG4gIGVuZCA9IGFbMV07XG4gIHN0YXJ0VmFsdWVzID0gc3RhcnQubWF0Y2goX251bVdpdGhVbml0RXhwKSB8fCBbXTtcbiAgZW5kVmFsdWVzID0gZW5kLm1hdGNoKF9udW1XaXRoVW5pdEV4cCkgfHwgW107XG5cbiAgaWYgKGVuZFZhbHVlcy5sZW5ndGgpIHtcbiAgICB3aGlsZSAocmVzdWx0ID0gX251bVdpdGhVbml0RXhwLmV4ZWMoZW5kKSkge1xuICAgICAgZW5kVmFsdWUgPSByZXN1bHRbMF07XG4gICAgICBjaHVuayA9IGVuZC5zdWJzdHJpbmcoaW5kZXgsIHJlc3VsdC5pbmRleCk7XG5cbiAgICAgIGlmIChjb2xvcikge1xuICAgICAgICBjb2xvciA9IChjb2xvciArIDEpICUgNTtcbiAgICAgIH0gZWxzZSBpZiAoY2h1bmsuc3Vic3RyKC01KSA9PT0gXCJyZ2JhKFwiIHx8IGNodW5rLnN1YnN0cigtNSkgPT09IFwiaHNsYShcIikge1xuICAgICAgICBjb2xvciA9IDE7XG4gICAgICB9XG5cbiAgICAgIGlmIChlbmRWYWx1ZSAhPT0gKHN0YXJ0VmFsdWUgPSBzdGFydFZhbHVlc1ttYXRjaEluZGV4KytdIHx8IFwiXCIpKSB7XG4gICAgICAgIHN0YXJ0TnVtID0gcGFyc2VGbG9hdChzdGFydFZhbHVlKSB8fCAwO1xuICAgICAgICBzdGFydFVuaXQgPSBzdGFydFZhbHVlLnN1YnN0cigoc3RhcnROdW0gKyBcIlwiKS5sZW5ndGgpO1xuICAgICAgICBlbmRWYWx1ZS5jaGFyQXQoMSkgPT09IFwiPVwiICYmIChlbmRWYWx1ZSA9IF9wYXJzZVJlbGF0aXZlKHN0YXJ0TnVtLCBlbmRWYWx1ZSkgKyBzdGFydFVuaXQpO1xuICAgICAgICBlbmROdW0gPSBwYXJzZUZsb2F0KGVuZFZhbHVlKTtcbiAgICAgICAgZW5kVW5pdCA9IGVuZFZhbHVlLnN1YnN0cigoZW5kTnVtICsgXCJcIikubGVuZ3RoKTtcbiAgICAgICAgaW5kZXggPSBfbnVtV2l0aFVuaXRFeHAubGFzdEluZGV4IC0gZW5kVW5pdC5sZW5ndGg7XG5cbiAgICAgICAgaWYgKCFlbmRVbml0KSB7XG4gICAgICAgICAgLy9pZiBzb21ldGhpbmcgbGlrZSBcInBlcnNwZWN0aXZlOjMwMFwiIGlzIHBhc3NlZCBpbiBhbmQgd2UgbXVzdCBhZGQgYSB1bml0IHRvIHRoZSBlbmRcbiAgICAgICAgICBlbmRVbml0ID0gZW5kVW5pdCB8fCBfY29uZmlnLnVuaXRzW3Byb3BdIHx8IHN0YXJ0VW5pdDtcblxuICAgICAgICAgIGlmIChpbmRleCA9PT0gZW5kLmxlbmd0aCkge1xuICAgICAgICAgICAgZW5kICs9IGVuZFVuaXQ7XG4gICAgICAgICAgICBwdC5lICs9IGVuZFVuaXQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0YXJ0VW5pdCAhPT0gZW5kVW5pdCkge1xuICAgICAgICAgIHN0YXJ0TnVtID0gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBwcm9wLCBzdGFydFZhbHVlLCBlbmRVbml0KSB8fCAwO1xuICAgICAgICB9IC8vIHRoZXNlIG5lc3RlZCBQcm9wVHdlZW5zIGFyZSBoYW5kbGVkIGluIGEgc3BlY2lhbCB3YXkgLSB3ZSdsbCBuZXZlciBhY3R1YWxseSBjYWxsIGEgcmVuZGVyIG9yIHNldHRlciBtZXRob2Qgb24gdGhlbS4gV2UnbGwganVzdCBsb29wIHRocm91Z2ggdGhlbSBpbiB0aGUgcGFyZW50IGNvbXBsZXggc3RyaW5nIFByb3BUd2VlbidzIHJlbmRlciBtZXRob2QuXG5cblxuICAgICAgICBwdC5fcHQgPSB7XG4gICAgICAgICAgX25leHQ6IHB0Ll9wdCxcbiAgICAgICAgICBwOiBjaHVuayB8fCBtYXRjaEluZGV4ID09PSAxID8gY2h1bmsgOiBcIixcIixcbiAgICAgICAgICAvL25vdGU6IFNWRyBzcGVjIGFsbG93cyBvbWlzc2lvbiBvZiBjb21tYS9zcGFjZSB3aGVuIGEgbmVnYXRpdmUgc2lnbiBpcyB3ZWRnZWQgYmV0d2VlbiB0d28gbnVtYmVycywgbGlrZSAyLjUtNS4zIGluc3RlYWQgb2YgMi41LC01LjMgYnV0IHdoZW4gdHdlZW5pbmcsIHRoZSBuZWdhdGl2ZSB2YWx1ZSBtYXkgc3dpdGNoIHRvIHBvc2l0aXZlLCBzbyB3ZSBpbnNlcnQgdGhlIGNvbW1hIGp1c3QgaW4gY2FzZS5cbiAgICAgICAgICBzOiBzdGFydE51bSxcbiAgICAgICAgICBjOiBlbmROdW0gLSBzdGFydE51bSxcbiAgICAgICAgICBtOiBjb2xvciAmJiBjb2xvciA8IDQgfHwgcHJvcCA9PT0gXCJ6SW5kZXhcIiA/IE1hdGgucm91bmQgOiAwXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcHQuYyA9IGluZGV4IDwgZW5kLmxlbmd0aCA/IGVuZC5zdWJzdHJpbmcoaW5kZXgsIGVuZC5sZW5ndGgpIDogXCJcIjsgLy93ZSB1c2UgdGhlIFwiY1wiIG9mIHRoZSBQcm9wVHdlZW4gdG8gc3RvcmUgdGhlIGZpbmFsIHBhcnQgb2YgdGhlIHN0cmluZyAoYWZ0ZXIgdGhlIGxhc3QgbnVtYmVyKVxuICB9IGVsc2Uge1xuICAgIHB0LnIgPSBwcm9wID09PSBcImRpc3BsYXlcIiAmJiBlbmQgPT09IFwibm9uZVwiID8gX3JlbmRlck5vblR3ZWVuaW5nVmFsdWVPbmx5QXRFbmQgOiBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZTtcbiAgfVxuXG4gIF9yZWxFeHAudGVzdChlbmQpICYmIChwdC5lID0gMCk7IC8vaWYgdGhlIGVuZCBzdHJpbmcgY29udGFpbnMgcmVsYXRpdmUgdmFsdWVzIG9yIGR5bmFtaWMgcmFuZG9tKC4uLikgdmFsdWVzLCBkZWxldGUgdGhlIGVuZCBpdCBzbyB0aGF0IG9uIHRoZSBmaW5hbCByZW5kZXIgd2UgZG9uJ3QgYWN0dWFsbHkgc2V0IGl0IHRvIHRoZSBzdHJpbmcgd2l0aCArPSBvciAtPSBjaGFyYWN0ZXJzIChmb3JjZXMgaXQgdG8gdXNlIHRoZSBjYWxjdWxhdGVkIHZhbHVlKS5cblxuICB0aGlzLl9wdCA9IHB0OyAvL3N0YXJ0IHRoZSBsaW5rZWQgbGlzdCB3aXRoIHRoaXMgbmV3IFByb3BUd2Vlbi4gUmVtZW1iZXIsIHdlIGNhbGwgX3R3ZWVuQ29tcGxleENTU1N0cmluZy5jYWxsKHBsdWdpbkluc3RhbmNlLi4uKSB0byBlbnN1cmUgdGhhdCBpdCdzIHNjb3BlZCBwcm9wZXJseS4gV2UgbWF5IGNhbGwgaXQgZnJvbSB3aXRoaW4gYW5vdGhlciBwbHVnaW4gdG9vLCB0aHVzIFwidGhpc1wiIHdvdWxkIHJlZmVyIHRvIHRoZSBwbHVnaW4uXG5cbiAgcmV0dXJuIHB0O1xufSxcbiAgICBfa2V5d29yZFRvUGVyY2VudCA9IHtcbiAgdG9wOiBcIjAlXCIsXG4gIGJvdHRvbTogXCIxMDAlXCIsXG4gIGxlZnQ6IFwiMCVcIixcbiAgcmlnaHQ6IFwiMTAwJVwiLFxuICBjZW50ZXI6IFwiNTAlXCJcbn0sXG4gICAgX2NvbnZlcnRLZXl3b3Jkc1RvUGVyY2VudGFnZXMgPSBmdW5jdGlvbiBfY29udmVydEtleXdvcmRzVG9QZXJjZW50YWdlcyh2YWx1ZSkge1xuICB2YXIgc3BsaXQgPSB2YWx1ZS5zcGxpdChcIiBcIiksXG4gICAgICB4ID0gc3BsaXRbMF0sXG4gICAgICB5ID0gc3BsaXRbMV0gfHwgXCI1MCVcIjtcblxuICBpZiAoeCA9PT0gXCJ0b3BcIiB8fCB4ID09PSBcImJvdHRvbVwiIHx8IHkgPT09IFwibGVmdFwiIHx8IHkgPT09IFwicmlnaHRcIikge1xuICAgIC8vdGhlIHVzZXIgcHJvdmlkZWQgdGhlbSBpbiB0aGUgd3Jvbmcgb3JkZXIsIHNvIGZsaXAgdGhlbVxuICAgIHZhbHVlID0geDtcbiAgICB4ID0geTtcbiAgICB5ID0gdmFsdWU7XG4gIH1cblxuICBzcGxpdFswXSA9IF9rZXl3b3JkVG9QZXJjZW50W3hdIHx8IHg7XG4gIHNwbGl0WzFdID0gX2tleXdvcmRUb1BlcmNlbnRbeV0gfHwgeTtcbiAgcmV0dXJuIHNwbGl0LmpvaW4oXCIgXCIpO1xufSxcbiAgICBfcmVuZGVyQ2xlYXJQcm9wcyA9IGZ1bmN0aW9uIF9yZW5kZXJDbGVhclByb3BzKHJhdGlvLCBkYXRhKSB7XG4gIGlmIChkYXRhLnR3ZWVuICYmIGRhdGEudHdlZW4uX3RpbWUgPT09IGRhdGEudHdlZW4uX2R1cikge1xuICAgIHZhciB0YXJnZXQgPSBkYXRhLnQsXG4gICAgICAgIHN0eWxlID0gdGFyZ2V0LnN0eWxlLFxuICAgICAgICBwcm9wcyA9IGRhdGEudSxcbiAgICAgICAgY2FjaGUgPSB0YXJnZXQuX2dzYXAsXG4gICAgICAgIHByb3AsXG4gICAgICAgIGNsZWFyVHJhbnNmb3JtcyxcbiAgICAgICAgaTtcblxuICAgIGlmIChwcm9wcyA9PT0gXCJhbGxcIiB8fCBwcm9wcyA9PT0gdHJ1ZSkge1xuICAgICAgc3R5bGUuY3NzVGV4dCA9IFwiXCI7XG4gICAgICBjbGVhclRyYW5zZm9ybXMgPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9wcyA9IHByb3BzLnNwbGl0KFwiLFwiKTtcbiAgICAgIGkgPSBwcm9wcy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlICgtLWkgPiAtMSkge1xuICAgICAgICBwcm9wID0gcHJvcHNbaV07XG5cbiAgICAgICAgaWYgKF90cmFuc2Zvcm1Qcm9wc1twcm9wXSkge1xuICAgICAgICAgIGNsZWFyVHJhbnNmb3JtcyA9IDE7XG4gICAgICAgICAgcHJvcCA9IHByb3AgPT09IFwidHJhbnNmb3JtT3JpZ2luXCIgPyBfdHJhbnNmb3JtT3JpZ2luUHJvcCA6IF90cmFuc2Zvcm1Qcm9wO1xuICAgICAgICB9XG5cbiAgICAgICAgX3JlbW92ZVByb3BlcnR5KHRhcmdldCwgcHJvcCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNsZWFyVHJhbnNmb3Jtcykge1xuICAgICAgX3JlbW92ZVByb3BlcnR5KHRhcmdldCwgX3RyYW5zZm9ybVByb3ApO1xuXG4gICAgICBpZiAoY2FjaGUpIHtcbiAgICAgICAgY2FjaGUuc3ZnICYmIHRhcmdldC5yZW1vdmVBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIik7XG5cbiAgICAgICAgX3BhcnNlVHJhbnNmb3JtKHRhcmdldCwgMSk7IC8vIGZvcmNlIGFsbCB0aGUgY2FjaGVkIHZhbHVlcyBiYWNrIHRvIFwibm9ybWFsXCIvaWRlbnRpdHksIG90aGVyd2lzZSBpZiB0aGVyZSdzIGFub3RoZXIgdHdlZW4gdGhhdCdzIGFscmVhZHkgc2V0IHRvIHJlbmRlciB0cmFuc2Zvcm1zIG9uIHRoaXMgZWxlbWVudCwgaXQgY291bGQgZGlzcGxheSB0aGUgd3JvbmcgdmFsdWVzLlxuXG5cbiAgICAgICAgY2FjaGUudW5jYWNoZSA9IDE7XG5cbiAgICAgICAgX3JlbW92ZUluZGVwZW5kZW50VHJhbnNmb3JtcyhzdHlsZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59LFxuICAgIC8vIG5vdGU6IHNwZWNpYWxQcm9wcyBzaG91bGQgcmV0dXJuIDEgaWYgKGFuZCBvbmx5IGlmKSB0aGV5IGhhdmUgYSBub24temVybyBwcmlvcml0eS4gSXQgaW5kaWNhdGVzIHdlIG5lZWQgdG8gc29ydCB0aGUgbGlua2VkIGxpc3QuXG5fc3BlY2lhbFByb3BzID0ge1xuICBjbGVhclByb3BzOiBmdW5jdGlvbiBjbGVhclByb3BzKHBsdWdpbiwgdGFyZ2V0LCBwcm9wZXJ0eSwgZW5kVmFsdWUsIHR3ZWVuKSB7XG4gICAgaWYgKHR3ZWVuLmRhdGEgIT09IFwiaXNGcm9tU3RhcnRcIikge1xuICAgICAgdmFyIHB0ID0gcGx1Z2luLl9wdCA9IG5ldyBQcm9wVHdlZW4ocGx1Z2luLl9wdCwgdGFyZ2V0LCBwcm9wZXJ0eSwgMCwgMCwgX3JlbmRlckNsZWFyUHJvcHMpO1xuICAgICAgcHQudSA9IGVuZFZhbHVlO1xuICAgICAgcHQucHIgPSAtMTA7XG4gICAgICBwdC50d2VlbiA9IHR3ZWVuO1xuXG4gICAgICBwbHVnaW4uX3Byb3BzLnB1c2gocHJvcGVydHkpO1xuXG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gIH1cbiAgLyogY2xhc3NOYW1lIGZlYXR1cmUgKGFib3V0IDAuNGtiIGd6aXBwZWQpLlxuICAsIGNsYXNzTmFtZShwbHVnaW4sIHRhcmdldCwgcHJvcGVydHksIGVuZFZhbHVlLCB0d2Vlbikge1xuICBcdGxldCBfcmVuZGVyQ2xhc3NOYW1lID0gKHJhdGlvLCBkYXRhKSA9PiB7XG4gIFx0XHRcdGRhdGEuY3NzLnJlbmRlcihyYXRpbywgZGF0YS5jc3MpO1xuICBcdFx0XHRpZiAoIXJhdGlvIHx8IHJhdGlvID09PSAxKSB7XG4gIFx0XHRcdFx0bGV0IGlubGluZSA9IGRhdGEucm12LFxuICBcdFx0XHRcdFx0dGFyZ2V0ID0gZGF0YS50LFxuICBcdFx0XHRcdFx0cDtcbiAgXHRcdFx0XHR0YXJnZXQuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgcmF0aW8gPyBkYXRhLmUgOiBkYXRhLmIpO1xuICBcdFx0XHRcdGZvciAocCBpbiBpbmxpbmUpIHtcbiAgXHRcdFx0XHRcdF9yZW1vdmVQcm9wZXJ0eSh0YXJnZXQsIHApO1xuICBcdFx0XHRcdH1cbiAgXHRcdFx0fVxuICBcdFx0fSxcbiAgXHRcdF9nZXRBbGxTdHlsZXMgPSAodGFyZ2V0KSA9PiB7XG4gIFx0XHRcdGxldCBzdHlsZXMgPSB7fSxcbiAgXHRcdFx0XHRjb21wdXRlZCA9IGdldENvbXB1dGVkU3R5bGUodGFyZ2V0KSxcbiAgXHRcdFx0XHRwO1xuICBcdFx0XHRmb3IgKHAgaW4gY29tcHV0ZWQpIHtcbiAgXHRcdFx0XHRpZiAoaXNOYU4ocCkgJiYgcCAhPT0gXCJjc3NUZXh0XCIgJiYgcCAhPT0gXCJsZW5ndGhcIikge1xuICBcdFx0XHRcdFx0c3R5bGVzW3BdID0gY29tcHV0ZWRbcF07XG4gIFx0XHRcdFx0fVxuICBcdFx0XHR9XG4gIFx0XHRcdF9zZXREZWZhdWx0cyhzdHlsZXMsIF9wYXJzZVRyYW5zZm9ybSh0YXJnZXQsIDEpKTtcbiAgXHRcdFx0cmV0dXJuIHN0eWxlcztcbiAgXHRcdH0sXG4gIFx0XHRzdGFydENsYXNzTGlzdCA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSxcbiAgXHRcdHN0eWxlID0gdGFyZ2V0LnN0eWxlLFxuICBcdFx0Y3NzVGV4dCA9IHN0eWxlLmNzc1RleHQsXG4gIFx0XHRjYWNoZSA9IHRhcmdldC5fZ3NhcCxcbiAgXHRcdGNsYXNzUFQgPSBjYWNoZS5jbGFzc1BULFxuICBcdFx0aW5saW5lVG9SZW1vdmVBdEVuZCA9IHt9LFxuICBcdFx0ZGF0YSA9IHt0OnRhcmdldCwgcGx1Z2luOnBsdWdpbiwgcm12OmlubGluZVRvUmVtb3ZlQXRFbmQsIGI6c3RhcnRDbGFzc0xpc3QsIGU6KGVuZFZhbHVlLmNoYXJBdCgxKSAhPT0gXCI9XCIpID8gZW5kVmFsdWUgOiBzdGFydENsYXNzTGlzdC5yZXBsYWNlKG5ldyBSZWdFeHAoXCIoPzpcXFxcc3xeKVwiICsgZW5kVmFsdWUuc3Vic3RyKDIpICsgXCIoPyFbXFxcXHctXSlcIiksIFwiXCIpICsgKChlbmRWYWx1ZS5jaGFyQXQoMCkgPT09IFwiK1wiKSA/IFwiIFwiICsgZW5kVmFsdWUuc3Vic3RyKDIpIDogXCJcIil9LFxuICBcdFx0Y2hhbmdpbmdWYXJzID0ge30sXG4gIFx0XHRzdGFydFZhcnMgPSBfZ2V0QWxsU3R5bGVzKHRhcmdldCksXG4gIFx0XHR0cmFuc2Zvcm1SZWxhdGVkID0gLyh0cmFuc2Zvcm18cGVyc3BlY3RpdmUpL2ksXG4gIFx0XHRlbmRWYXJzLCBwO1xuICBcdGlmIChjbGFzc1BUKSB7XG4gIFx0XHRjbGFzc1BULnIoMSwgY2xhc3NQVC5kKTtcbiAgXHRcdF9yZW1vdmVMaW5rZWRMaXN0SXRlbShjbGFzc1BULmQucGx1Z2luLCBjbGFzc1BULCBcIl9wdFwiKTtcbiAgXHR9XG4gIFx0dGFyZ2V0LnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIGRhdGEuZSk7XG4gIFx0ZW5kVmFycyA9IF9nZXRBbGxTdHlsZXModGFyZ2V0LCB0cnVlKTtcbiAgXHR0YXJnZXQuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgc3RhcnRDbGFzc0xpc3QpO1xuICBcdGZvciAocCBpbiBlbmRWYXJzKSB7XG4gIFx0XHRpZiAoZW5kVmFyc1twXSAhPT0gc3RhcnRWYXJzW3BdICYmICF0cmFuc2Zvcm1SZWxhdGVkLnRlc3QocCkpIHtcbiAgXHRcdFx0Y2hhbmdpbmdWYXJzW3BdID0gZW5kVmFyc1twXTtcbiAgXHRcdFx0aWYgKCFzdHlsZVtwXSAmJiBzdHlsZVtwXSAhPT0gXCIwXCIpIHtcbiAgXHRcdFx0XHRpbmxpbmVUb1JlbW92ZUF0RW5kW3BdID0gMTtcbiAgXHRcdFx0fVxuICBcdFx0fVxuICBcdH1cbiAgXHRjYWNoZS5jbGFzc1BUID0gcGx1Z2luLl9wdCA9IG5ldyBQcm9wVHdlZW4ocGx1Z2luLl9wdCwgdGFyZ2V0LCBcImNsYXNzTmFtZVwiLCAwLCAwLCBfcmVuZGVyQ2xhc3NOYW1lLCBkYXRhLCAwLCAtMTEpO1xuICBcdGlmIChzdHlsZS5jc3NUZXh0ICE9PSBjc3NUZXh0KSB7IC8vb25seSBhcHBseSBpZiB0aGluZ3MgY2hhbmdlLiBPdGhlcndpc2UsIGluIGNhc2VzIGxpa2UgYSBiYWNrZ3JvdW5kLWltYWdlIHRoYXQncyBwdWxsZWQgZHluYW1pY2FsbHksIGl0IGNvdWxkIGNhdXNlIGEgcmVmcmVzaC4gU2VlIGh0dHBzOi8vZ3NhcC5jb20vZm9ydW1zL3RvcGljLzIwMzY4LXBvc3NpYmxlLWdzYXAtYnVnLXN3aXRjaGluZy1jbGFzc25hbWVzLWluLWNocm9tZS8uXG4gIFx0XHRzdHlsZS5jc3NUZXh0ID0gY3NzVGV4dDsgLy93ZSByZWNvcmRlZCBjc3NUZXh0IGJlZm9yZSB3ZSBzd2FwcGVkIGNsYXNzZXMgYW5kIHJhbiBfZ2V0QWxsU3R5bGVzKCkgYmVjYXVzZSBpbiBjYXNlcyB3aGVuIGEgY2xhc3NOYW1lIHR3ZWVuIGlzIG92ZXJ3cml0dGVuLCB3ZSByZW1vdmUgYWxsIHRoZSByZWxhdGVkIHR3ZWVuaW5nIHByb3BlcnRpZXMgZnJvbSB0aGF0IGNsYXNzIGNoYW5nZSAob3RoZXJ3aXNlIGNsYXNzLXNwZWNpZmljIHN0dWZmIGNhbid0IG92ZXJyaWRlIHByb3BlcnRpZXMgd2UndmUgZGlyZWN0bHkgc2V0IG9uIHRoZSB0YXJnZXQncyBzdHlsZSBvYmplY3QgZHVlIHRvIHNwZWNpZmljaXR5KS5cbiAgXHR9XG4gIFx0X3BhcnNlVHJhbnNmb3JtKHRhcmdldCwgdHJ1ZSk7IC8vdG8gY2xlYXIgdGhlIGNhY2hpbmcgb2YgdHJhbnNmb3Jtc1xuICBcdGRhdGEuY3NzID0gbmV3IGdzYXAucGx1Z2lucy5jc3MoKTtcbiAgXHRkYXRhLmNzcy5pbml0KHRhcmdldCwgY2hhbmdpbmdWYXJzLCB0d2Vlbik7XG4gIFx0cGx1Z2luLl9wcm9wcy5wdXNoKC4uLmRhdGEuY3NzLl9wcm9wcyk7XG4gIFx0cmV0dXJuIDE7XG4gIH1cbiAgKi9cblxufSxcblxuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBUUkFOU0ZPUk1TXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5faWRlbnRpdHkyRE1hdHJpeCA9IFsxLCAwLCAwLCAxLCAwLCAwXSxcbiAgICBfcm90YXRpb25hbFByb3BlcnRpZXMgPSB7fSxcbiAgICBfaXNOdWxsVHJhbnNmb3JtID0gZnVuY3Rpb24gX2lzTnVsbFRyYW5zZm9ybSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT09IFwibWF0cml4KDEsIDAsIDAsIDEsIDAsIDApXCIgfHwgdmFsdWUgPT09IFwibm9uZVwiIHx8ICF2YWx1ZTtcbn0sXG4gICAgX2dldENvbXB1dGVkVHJhbnNmb3JtTWF0cml4QXNBcnJheSA9IGZ1bmN0aW9uIF9nZXRDb21wdXRlZFRyYW5zZm9ybU1hdHJpeEFzQXJyYXkodGFyZ2V0KSB7XG4gIHZhciBtYXRyaXhTdHJpbmcgPSBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIF90cmFuc2Zvcm1Qcm9wKTtcblxuICByZXR1cm4gX2lzTnVsbFRyYW5zZm9ybShtYXRyaXhTdHJpbmcpID8gX2lkZW50aXR5MkRNYXRyaXggOiBtYXRyaXhTdHJpbmcuc3Vic3RyKDcpLm1hdGNoKF9udW1FeHApLm1hcChfcm91bmQpO1xufSxcbiAgICBfZ2V0TWF0cml4ID0gZnVuY3Rpb24gX2dldE1hdHJpeCh0YXJnZXQsIGZvcmNlMkQpIHtcbiAgdmFyIGNhY2hlID0gdGFyZ2V0Ll9nc2FwIHx8IF9nZXRDYWNoZSh0YXJnZXQpLFxuICAgICAgc3R5bGUgPSB0YXJnZXQuc3R5bGUsXG4gICAgICBtYXRyaXggPSBfZ2V0Q29tcHV0ZWRUcmFuc2Zvcm1NYXRyaXhBc0FycmF5KHRhcmdldCksXG4gICAgICBwYXJlbnQsXG4gICAgICBuZXh0U2libGluZyxcbiAgICAgIHRlbXAsXG4gICAgICBhZGRlZFRvRE9NO1xuXG4gIGlmIChjYWNoZS5zdmcgJiYgdGFyZ2V0LmdldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiKSkge1xuICAgIHRlbXAgPSB0YXJnZXQudHJhbnNmb3JtLmJhc2VWYWwuY29uc29saWRhdGUoKS5tYXRyaXg7IC8vZW5zdXJlcyB0aGF0IGV2ZW4gY29tcGxleCB2YWx1ZXMgbGlrZSBcInRyYW5zbGF0ZSg1MCw2MCkgcm90YXRlKDEzNSwwLDApXCIgYXJlIHBhcnNlZCBiZWNhdXNlIGl0IG1hc2hlcyBpdCBpbnRvIGEgbWF0cml4LlxuXG4gICAgbWF0cml4ID0gW3RlbXAuYSwgdGVtcC5iLCB0ZW1wLmMsIHRlbXAuZCwgdGVtcC5lLCB0ZW1wLmZdO1xuICAgIHJldHVybiBtYXRyaXguam9pbihcIixcIikgPT09IFwiMSwwLDAsMSwwLDBcIiA/IF9pZGVudGl0eTJETWF0cml4IDogbWF0cml4O1xuICB9IGVsc2UgaWYgKG1hdHJpeCA9PT0gX2lkZW50aXR5MkRNYXRyaXggJiYgIXRhcmdldC5vZmZzZXRQYXJlbnQgJiYgdGFyZ2V0ICE9PSBfZG9jRWxlbWVudCAmJiAhY2FjaGUuc3ZnKSB7XG4gICAgLy9ub3RlOiBpZiBvZmZzZXRQYXJlbnQgaXMgbnVsbCwgdGhhdCBtZWFucyB0aGUgZWxlbWVudCBpc24ndCBpbiB0aGUgbm9ybWFsIGRvY3VtZW50IGZsb3csIGxpa2UgaWYgaXQgaGFzIGRpc3BsYXk6bm9uZSBvciBvbmUgb2YgaXRzIGFuY2VzdG9ycyBoYXMgZGlzcGxheTpub25lKS4gRmlyZWZveCByZXR1cm5zIG51bGwgZm9yIGdldENvbXB1dGVkU3R5bGUoKSBpZiB0aGUgZWxlbWVudCBpcyBpbiBhbiBpZnJhbWUgdGhhdCBoYXMgZGlzcGxheTpub25lLiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD01NDgzOTdcbiAgICAvL2Jyb3dzZXJzIGRvbid0IHJlcG9ydCB0cmFuc2Zvcm1zIGFjY3VyYXRlbHkgdW5sZXNzIHRoZSBlbGVtZW50IGlzIGluIHRoZSBET00gYW5kIGhhcyBhIGRpc3BsYXkgdmFsdWUgdGhhdCdzIG5vdCBcIm5vbmVcIi4gRmlyZWZveCBhbmQgTWljcm9zb2Z0IGJyb3dzZXJzIGhhdmUgYSBwYXJ0aWFsIGJ1ZyB3aGVyZSB0aGV5J2xsIHJlcG9ydCB0cmFuc2Zvcm1zIGV2ZW4gaWYgZGlzcGxheTpub25lIEJVVCBub3QgYW55IHBlcmNlbnRhZ2UtYmFzZWQgdmFsdWVzIGxpa2UgdHJhbnNsYXRlKC01MCUsIDhweCkgd2lsbCBiZSByZXBvcnRlZCBhcyBpZiBpdCdzIHRyYW5zbGF0ZSgwLCA4cHgpLlxuICAgIHRlbXAgPSBzdHlsZS5kaXNwbGF5O1xuICAgIHN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgcGFyZW50ID0gdGFyZ2V0LnBhcmVudE5vZGU7XG5cbiAgICBpZiAoIXBhcmVudCB8fCAhdGFyZ2V0Lm9mZnNldFBhcmVudCkge1xuICAgICAgLy8gbm90ZTogaW4gMy4zLjAgd2Ugc3dpdGNoZWQgdGFyZ2V0Lm9mZnNldFBhcmVudCB0byBfZG9jLmJvZHkuY29udGFpbnModGFyZ2V0KSB0byBhdm9pZCBbc29tZXRpbWVzIHVubmVjZXNzYXJ5XSBNdXRhdGlvbk9ic2VydmVyIGNhbGxzIGJ1dCB0aGF0IHdhc24ndCBhZGVxdWF0ZSBiZWNhdXNlIHRoZXJlIGFyZSBlZGdlIGNhc2VzIHdoZXJlIG5lc3RlZCBwb3NpdGlvbjogZml4ZWQgZWxlbWVudHMgbmVlZCB0byBnZXQgcmVwYXJlbnRlZCB0byBhY2N1cmF0ZWx5IHNlbnNlIHRyYW5zZm9ybXMuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZ3JlZW5zb2NrL0dTQVAvaXNzdWVzLzM4OCBhbmQgaHR0cHM6Ly9naXRodWIuY29tL2dyZWVuc29jay9HU0FQL2lzc3Vlcy8zNzVcbiAgICAgIGFkZGVkVG9ET00gPSAxOyAvL2ZsYWdcblxuICAgICAgbmV4dFNpYmxpbmcgPSB0YXJnZXQubmV4dEVsZW1lbnRTaWJsaW5nO1xuXG4gICAgICBfZG9jRWxlbWVudC5hcHBlbmRDaGlsZCh0YXJnZXQpOyAvL3dlIG11c3QgYWRkIGl0IHRvIHRoZSBET00gaW4gb3JkZXIgdG8gZ2V0IHZhbHVlcyBwcm9wZXJseVxuXG4gICAgfVxuXG4gICAgbWF0cml4ID0gX2dldENvbXB1dGVkVHJhbnNmb3JtTWF0cml4QXNBcnJheSh0YXJnZXQpO1xuICAgIHRlbXAgPyBzdHlsZS5kaXNwbGF5ID0gdGVtcCA6IF9yZW1vdmVQcm9wZXJ0eSh0YXJnZXQsIFwiZGlzcGxheVwiKTtcblxuICAgIGlmIChhZGRlZFRvRE9NKSB7XG4gICAgICBuZXh0U2libGluZyA/IHBhcmVudC5pbnNlcnRCZWZvcmUodGFyZ2V0LCBuZXh0U2libGluZykgOiBwYXJlbnQgPyBwYXJlbnQuYXBwZW5kQ2hpbGQodGFyZ2V0KSA6IF9kb2NFbGVtZW50LnJlbW92ZUNoaWxkKHRhcmdldCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZvcmNlMkQgJiYgbWF0cml4Lmxlbmd0aCA+IDYgPyBbbWF0cml4WzBdLCBtYXRyaXhbMV0sIG1hdHJpeFs0XSwgbWF0cml4WzVdLCBtYXRyaXhbMTJdLCBtYXRyaXhbMTNdXSA6IG1hdHJpeDtcbn0sXG4gICAgX2FwcGx5U1ZHT3JpZ2luID0gZnVuY3Rpb24gX2FwcGx5U1ZHT3JpZ2luKHRhcmdldCwgb3JpZ2luLCBvcmlnaW5Jc0Fic29sdXRlLCBzbW9vdGgsIG1hdHJpeEFycmF5LCBwbHVnaW5Ub0FkZFByb3BUd2VlbnNUbykge1xuICB2YXIgY2FjaGUgPSB0YXJnZXQuX2dzYXAsXG4gICAgICBtYXRyaXggPSBtYXRyaXhBcnJheSB8fCBfZ2V0TWF0cml4KHRhcmdldCwgdHJ1ZSksXG4gICAgICB4T3JpZ2luT2xkID0gY2FjaGUueE9yaWdpbiB8fCAwLFxuICAgICAgeU9yaWdpbk9sZCA9IGNhY2hlLnlPcmlnaW4gfHwgMCxcbiAgICAgIHhPZmZzZXRPbGQgPSBjYWNoZS54T2Zmc2V0IHx8IDAsXG4gICAgICB5T2Zmc2V0T2xkID0gY2FjaGUueU9mZnNldCB8fCAwLFxuICAgICAgYSA9IG1hdHJpeFswXSxcbiAgICAgIGIgPSBtYXRyaXhbMV0sXG4gICAgICBjID0gbWF0cml4WzJdLFxuICAgICAgZCA9IG1hdHJpeFszXSxcbiAgICAgIHR4ID0gbWF0cml4WzRdLFxuICAgICAgdHkgPSBtYXRyaXhbNV0sXG4gICAgICBvcmlnaW5TcGxpdCA9IG9yaWdpbi5zcGxpdChcIiBcIiksXG4gICAgICB4T3JpZ2luID0gcGFyc2VGbG9hdChvcmlnaW5TcGxpdFswXSkgfHwgMCxcbiAgICAgIHlPcmlnaW4gPSBwYXJzZUZsb2F0KG9yaWdpblNwbGl0WzFdKSB8fCAwLFxuICAgICAgYm91bmRzLFxuICAgICAgZGV0ZXJtaW5hbnQsXG4gICAgICB4LFxuICAgICAgeTtcblxuICBpZiAoIW9yaWdpbklzQWJzb2x1dGUpIHtcbiAgICBib3VuZHMgPSBfZ2V0QkJveCh0YXJnZXQpO1xuICAgIHhPcmlnaW4gPSBib3VuZHMueCArICh+b3JpZ2luU3BsaXRbMF0uaW5kZXhPZihcIiVcIikgPyB4T3JpZ2luIC8gMTAwICogYm91bmRzLndpZHRoIDogeE9yaWdpbik7XG4gICAgeU9yaWdpbiA9IGJvdW5kcy55ICsgKH4ob3JpZ2luU3BsaXRbMV0gfHwgb3JpZ2luU3BsaXRbMF0pLmluZGV4T2YoXCIlXCIpID8geU9yaWdpbiAvIDEwMCAqIGJvdW5kcy5oZWlnaHQgOiB5T3JpZ2luKTsgLy8gaWYgKCEoXCJ4T3JpZ2luXCIgaW4gY2FjaGUpICYmICh4T3JpZ2luIHx8IHlPcmlnaW4pKSB7IC8vIGFkZGVkIGluIDMuMTIuMywgcmV2ZXJ0ZWQgaW4gMy4xMi40OyByZXF1aXJlcyBtb3JlIGV4cGxvcmF0aW9uXG4gICAgLy8gXHR4T3JpZ2luIC09IGJvdW5kcy54O1xuICAgIC8vIFx0eU9yaWdpbiAtPSBib3VuZHMueTtcbiAgICAvLyB9XG4gIH0gZWxzZSBpZiAobWF0cml4ICE9PSBfaWRlbnRpdHkyRE1hdHJpeCAmJiAoZGV0ZXJtaW5hbnQgPSBhICogZCAtIGIgKiBjKSkge1xuICAgIC8vaWYgaXQncyB6ZXJvIChsaWtlIGlmIHNjYWxlWCBhbmQgc2NhbGVZIGFyZSB6ZXJvKSwgc2tpcCBpdCB0byBhdm9pZCBlcnJvcnMgd2l0aCBkaXZpZGluZyBieSB6ZXJvLlxuICAgIHggPSB4T3JpZ2luICogKGQgLyBkZXRlcm1pbmFudCkgKyB5T3JpZ2luICogKC1jIC8gZGV0ZXJtaW5hbnQpICsgKGMgKiB0eSAtIGQgKiB0eCkgLyBkZXRlcm1pbmFudDtcbiAgICB5ID0geE9yaWdpbiAqICgtYiAvIGRldGVybWluYW50KSArIHlPcmlnaW4gKiAoYSAvIGRldGVybWluYW50KSAtIChhICogdHkgLSBiICogdHgpIC8gZGV0ZXJtaW5hbnQ7XG4gICAgeE9yaWdpbiA9IHg7XG4gICAgeU9yaWdpbiA9IHk7IC8vIHRoZW9yeTogd2Ugb25seSBoYWQgdG8gZG8gdGhpcyBmb3Igc21vb3RoaW5nIGFuZCBpdCBhc3N1bWVzIHRoYXQgdGhlIHByZXZpb3VzIG9uZSB3YXMgbm90IG9yaWdpbklzQWJzb2x1dGUuXG4gIH1cblxuICBpZiAoc21vb3RoIHx8IHNtb290aCAhPT0gZmFsc2UgJiYgY2FjaGUuc21vb3RoKSB7XG4gICAgdHggPSB4T3JpZ2luIC0geE9yaWdpbk9sZDtcbiAgICB0eSA9IHlPcmlnaW4gLSB5T3JpZ2luT2xkO1xuICAgIGNhY2hlLnhPZmZzZXQgPSB4T2Zmc2V0T2xkICsgKHR4ICogYSArIHR5ICogYykgLSB0eDtcbiAgICBjYWNoZS55T2Zmc2V0ID0geU9mZnNldE9sZCArICh0eCAqIGIgKyB0eSAqIGQpIC0gdHk7XG4gIH0gZWxzZSB7XG4gICAgY2FjaGUueE9mZnNldCA9IGNhY2hlLnlPZmZzZXQgPSAwO1xuICB9XG5cbiAgY2FjaGUueE9yaWdpbiA9IHhPcmlnaW47XG4gIGNhY2hlLnlPcmlnaW4gPSB5T3JpZ2luO1xuICBjYWNoZS5zbW9vdGggPSAhIXNtb290aDtcbiAgY2FjaGUub3JpZ2luID0gb3JpZ2luO1xuICBjYWNoZS5vcmlnaW5Jc0Fic29sdXRlID0gISFvcmlnaW5Jc0Fic29sdXRlO1xuICB0YXJnZXQuc3R5bGVbX3RyYW5zZm9ybU9yaWdpblByb3BdID0gXCIwcHggMHB4XCI7IC8vb3RoZXJ3aXNlLCBpZiBzb21lb25lIHNldHMgIGFuIG9yaWdpbiB2aWEgQ1NTLCBpdCB3aWxsIGxpa2VseSBpbnRlcmZlcmUgd2l0aCB0aGUgU1ZHIHRyYW5zZm9ybSBhdHRyaWJ1dGUgb25lcyAoYmVjYXVzZSByZW1lbWJlciwgd2UncmUgYmFraW5nIHRoZSBvcmlnaW4gaW50byB0aGUgbWF0cml4KCkgdmFsdWUpLlxuXG4gIGlmIChwbHVnaW5Ub0FkZFByb3BUd2VlbnNUbykge1xuICAgIF9hZGROb25Ud2VlbmluZ1BUKHBsdWdpblRvQWRkUHJvcFR3ZWVuc1RvLCBjYWNoZSwgXCJ4T3JpZ2luXCIsIHhPcmlnaW5PbGQsIHhPcmlnaW4pO1xuXG4gICAgX2FkZE5vblR3ZWVuaW5nUFQocGx1Z2luVG9BZGRQcm9wVHdlZW5zVG8sIGNhY2hlLCBcInlPcmlnaW5cIiwgeU9yaWdpbk9sZCwgeU9yaWdpbik7XG5cbiAgICBfYWRkTm9uVHdlZW5pbmdQVChwbHVnaW5Ub0FkZFByb3BUd2VlbnNUbywgY2FjaGUsIFwieE9mZnNldFwiLCB4T2Zmc2V0T2xkLCBjYWNoZS54T2Zmc2V0KTtcblxuICAgIF9hZGROb25Ud2VlbmluZ1BUKHBsdWdpblRvQWRkUHJvcFR3ZWVuc1RvLCBjYWNoZSwgXCJ5T2Zmc2V0XCIsIHlPZmZzZXRPbGQsIGNhY2hlLnlPZmZzZXQpO1xuICB9XG5cbiAgdGFyZ2V0LnNldEF0dHJpYnV0ZShcImRhdGEtc3ZnLW9yaWdpblwiLCB4T3JpZ2luICsgXCIgXCIgKyB5T3JpZ2luKTtcbn0sXG4gICAgX3BhcnNlVHJhbnNmb3JtID0gZnVuY3Rpb24gX3BhcnNlVHJhbnNmb3JtKHRhcmdldCwgdW5jYWNoZSkge1xuICB2YXIgY2FjaGUgPSB0YXJnZXQuX2dzYXAgfHwgbmV3IEdTQ2FjaGUodGFyZ2V0KTtcblxuICBpZiAoXCJ4XCIgaW4gY2FjaGUgJiYgIXVuY2FjaGUgJiYgIWNhY2hlLnVuY2FjaGUpIHtcbiAgICByZXR1cm4gY2FjaGU7XG4gIH1cblxuICB2YXIgc3R5bGUgPSB0YXJnZXQuc3R5bGUsXG4gICAgICBpbnZlcnRlZFNjYWxlWCA9IGNhY2hlLnNjYWxlWCA8IDAsXG4gICAgICBweCA9IFwicHhcIixcbiAgICAgIGRlZyA9IFwiZGVnXCIsXG4gICAgICBjcyA9IGdldENvbXB1dGVkU3R5bGUodGFyZ2V0KSxcbiAgICAgIG9yaWdpbiA9IF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgX3RyYW5zZm9ybU9yaWdpblByb3ApIHx8IFwiMFwiLFxuICAgICAgeCxcbiAgICAgIHksXG4gICAgICB6LFxuICAgICAgc2NhbGVYLFxuICAgICAgc2NhbGVZLFxuICAgICAgcm90YXRpb24sXG4gICAgICByb3RhdGlvblgsXG4gICAgICByb3RhdGlvblksXG4gICAgICBza2V3WCxcbiAgICAgIHNrZXdZLFxuICAgICAgcGVyc3BlY3RpdmUsXG4gICAgICB4T3JpZ2luLFxuICAgICAgeU9yaWdpbixcbiAgICAgIG1hdHJpeCxcbiAgICAgIGFuZ2xlLFxuICAgICAgY29zLFxuICAgICAgc2luLFxuICAgICAgYSxcbiAgICAgIGIsXG4gICAgICBjLFxuICAgICAgZCxcbiAgICAgIGExMixcbiAgICAgIGEyMixcbiAgICAgIHQxLFxuICAgICAgdDIsXG4gICAgICB0MyxcbiAgICAgIGExMyxcbiAgICAgIGEyMyxcbiAgICAgIGEzMyxcbiAgICAgIGE0MixcbiAgICAgIGE0MyxcbiAgICAgIGEzMjtcbiAgeCA9IHkgPSB6ID0gcm90YXRpb24gPSByb3RhdGlvblggPSByb3RhdGlvblkgPSBza2V3WCA9IHNrZXdZID0gcGVyc3BlY3RpdmUgPSAwO1xuICBzY2FsZVggPSBzY2FsZVkgPSAxO1xuICBjYWNoZS5zdmcgPSAhISh0YXJnZXQuZ2V0Q1RNICYmIF9pc1NWRyh0YXJnZXQpKTtcblxuICBpZiAoY3MudHJhbnNsYXRlKSB7XG4gICAgLy8gYWNjb21tb2RhdGUgaW5kZXBlbmRlbnQgdHJhbnNmb3JtcyBieSBjb21iaW5pbmcgdGhlbSBpbnRvIG5vcm1hbCBvbmVzLlxuICAgIGlmIChjcy50cmFuc2xhdGUgIT09IFwibm9uZVwiIHx8IGNzLnNjYWxlICE9PSBcIm5vbmVcIiB8fCBjcy5yb3RhdGUgIT09IFwibm9uZVwiKSB7XG4gICAgICBzdHlsZVtfdHJhbnNmb3JtUHJvcF0gPSAoY3MudHJhbnNsYXRlICE9PSBcIm5vbmVcIiA/IFwidHJhbnNsYXRlM2QoXCIgKyAoY3MudHJhbnNsYXRlICsgXCIgMCAwXCIpLnNwbGl0KFwiIFwiKS5zbGljZSgwLCAzKS5qb2luKFwiLCBcIikgKyBcIikgXCIgOiBcIlwiKSArIChjcy5yb3RhdGUgIT09IFwibm9uZVwiID8gXCJyb3RhdGUoXCIgKyBjcy5yb3RhdGUgKyBcIikgXCIgOiBcIlwiKSArIChjcy5zY2FsZSAhPT0gXCJub25lXCIgPyBcInNjYWxlKFwiICsgY3Muc2NhbGUuc3BsaXQoXCIgXCIpLmpvaW4oXCIsXCIpICsgXCIpIFwiIDogXCJcIikgKyAoY3NbX3RyYW5zZm9ybVByb3BdICE9PSBcIm5vbmVcIiA/IGNzW190cmFuc2Zvcm1Qcm9wXSA6IFwiXCIpO1xuICAgIH1cblxuICAgIHN0eWxlLnNjYWxlID0gc3R5bGUucm90YXRlID0gc3R5bGUudHJhbnNsYXRlID0gXCJub25lXCI7XG4gIH1cblxuICBtYXRyaXggPSBfZ2V0TWF0cml4KHRhcmdldCwgY2FjaGUuc3ZnKTtcblxuICBpZiAoY2FjaGUuc3ZnKSB7XG4gICAgaWYgKGNhY2hlLnVuY2FjaGUpIHtcbiAgICAgIC8vIGlmIGNhY2hlLnVuY2FjaGUgaXMgdHJ1ZSAoYW5kIG1heWJlIGlmIG9yaWdpbiBpcyAwLDApLCB3ZSBuZWVkIHRvIHNldCBlbGVtZW50LnN0eWxlLnRyYW5zZm9ybU9yaWdpbiA9IChjYWNoZS54T3JpZ2luIC0gYmJveC54KSArIFwicHggXCIgKyAoY2FjaGUueU9yaWdpbiAtIGJib3gueSkgKyBcInB4XCIuIFByZXZpb3VzbHkgd2UgbGV0IHRoZSBkYXRhLXN2Zy1vcmlnaW4gc3RheSBpbnN0ZWFkLCBidXQgd2hlbiBpbnRyb2R1Y2luZyByZXZlcnQoKSwgaXQgY29tcGxpY2F0ZWQgdGhpbmdzLlxuICAgICAgdDIgPSB0YXJnZXQuZ2V0QkJveCgpO1xuICAgICAgb3JpZ2luID0gY2FjaGUueE9yaWdpbiAtIHQyLnggKyBcInB4IFwiICsgKGNhY2hlLnlPcmlnaW4gLSB0Mi55KSArIFwicHhcIjtcbiAgICAgIHQxID0gXCJcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgdDEgPSAhdW5jYWNoZSAmJiB0YXJnZXQuZ2V0QXR0cmlidXRlKFwiZGF0YS1zdmctb3JpZ2luXCIpOyAvLyAgUmVtZW1iZXIsIHRvIHdvcmsgYXJvdW5kIGJyb3dzZXIgaW5jb25zaXN0ZW5jaWVzIHdlIGFsd2F5cyBmb3JjZSBTVkcgZWxlbWVudHMnIHRyYW5zZm9ybU9yaWdpbiB0byAwLDAgYW5kIG9mZnNldCB0aGUgdHJhbnNsYXRpb24gYWNjb3JkaW5nbHkuXG4gICAgfVxuXG4gICAgX2FwcGx5U1ZHT3JpZ2luKHRhcmdldCwgdDEgfHwgb3JpZ2luLCAhIXQxIHx8IGNhY2hlLm9yaWdpbklzQWJzb2x1dGUsIGNhY2hlLnNtb290aCAhPT0gZmFsc2UsIG1hdHJpeCk7XG4gIH1cblxuICB4T3JpZ2luID0gY2FjaGUueE9yaWdpbiB8fCAwO1xuICB5T3JpZ2luID0gY2FjaGUueU9yaWdpbiB8fCAwO1xuXG4gIGlmIChtYXRyaXggIT09IF9pZGVudGl0eTJETWF0cml4KSB7XG4gICAgYSA9IG1hdHJpeFswXTsgLy9hMTFcblxuICAgIGIgPSBtYXRyaXhbMV07IC8vYTIxXG5cbiAgICBjID0gbWF0cml4WzJdOyAvL2EzMVxuXG4gICAgZCA9IG1hdHJpeFszXTsgLy9hNDFcblxuICAgIHggPSBhMTIgPSBtYXRyaXhbNF07XG4gICAgeSA9IGEyMiA9IG1hdHJpeFs1XTsgLy8yRCBtYXRyaXhcblxuICAgIGlmIChtYXRyaXgubGVuZ3RoID09PSA2KSB7XG4gICAgICBzY2FsZVggPSBNYXRoLnNxcnQoYSAqIGEgKyBiICogYik7XG4gICAgICBzY2FsZVkgPSBNYXRoLnNxcnQoZCAqIGQgKyBjICogYyk7XG4gICAgICByb3RhdGlvbiA9IGEgfHwgYiA/IF9hdGFuMihiLCBhKSAqIF9SQUQyREVHIDogMDsgLy9ub3RlOiBpZiBzY2FsZVggaXMgMCwgd2UgY2Fubm90IGFjY3VyYXRlbHkgbWVhc3VyZSByb3RhdGlvbi4gU2FtZSBmb3Igc2tld1ggd2l0aCBhIHNjYWxlWSBvZiAwLiBUaGVyZWZvcmUsIHdlIGRlZmF1bHQgdG8gdGhlIHByZXZpb3VzbHkgcmVjb3JkZWQgdmFsdWUgKG9yIHplcm8gaWYgdGhhdCBkb2Vzbid0IGV4aXN0KS5cblxuICAgICAgc2tld1ggPSBjIHx8IGQgPyBfYXRhbjIoYywgZCkgKiBfUkFEMkRFRyArIHJvdGF0aW9uIDogMDtcbiAgICAgIHNrZXdYICYmIChzY2FsZVkgKj0gTWF0aC5hYnMoTWF0aC5jb3Moc2tld1ggKiBfREVHMlJBRCkpKTtcblxuICAgICAgaWYgKGNhY2hlLnN2Zykge1xuICAgICAgICB4IC09IHhPcmlnaW4gLSAoeE9yaWdpbiAqIGEgKyB5T3JpZ2luICogYyk7XG4gICAgICAgIHkgLT0geU9yaWdpbiAtICh4T3JpZ2luICogYiArIHlPcmlnaW4gKiBkKTtcbiAgICAgIH0gLy8zRCBtYXRyaXhcblxuICAgIH0gZWxzZSB7XG4gICAgICBhMzIgPSBtYXRyaXhbNl07XG4gICAgICBhNDIgPSBtYXRyaXhbN107XG4gICAgICBhMTMgPSBtYXRyaXhbOF07XG4gICAgICBhMjMgPSBtYXRyaXhbOV07XG4gICAgICBhMzMgPSBtYXRyaXhbMTBdO1xuICAgICAgYTQzID0gbWF0cml4WzExXTtcbiAgICAgIHggPSBtYXRyaXhbMTJdO1xuICAgICAgeSA9IG1hdHJpeFsxM107XG4gICAgICB6ID0gbWF0cml4WzE0XTtcbiAgICAgIGFuZ2xlID0gX2F0YW4yKGEzMiwgYTMzKTtcbiAgICAgIHJvdGF0aW9uWCA9IGFuZ2xlICogX1JBRDJERUc7IC8vcm90YXRpb25YXG5cbiAgICAgIGlmIChhbmdsZSkge1xuICAgICAgICBjb3MgPSBNYXRoLmNvcygtYW5nbGUpO1xuICAgICAgICBzaW4gPSBNYXRoLnNpbigtYW5nbGUpO1xuICAgICAgICB0MSA9IGExMiAqIGNvcyArIGExMyAqIHNpbjtcbiAgICAgICAgdDIgPSBhMjIgKiBjb3MgKyBhMjMgKiBzaW47XG4gICAgICAgIHQzID0gYTMyICogY29zICsgYTMzICogc2luO1xuICAgICAgICBhMTMgPSBhMTIgKiAtc2luICsgYTEzICogY29zO1xuICAgICAgICBhMjMgPSBhMjIgKiAtc2luICsgYTIzICogY29zO1xuICAgICAgICBhMzMgPSBhMzIgKiAtc2luICsgYTMzICogY29zO1xuICAgICAgICBhNDMgPSBhNDIgKiAtc2luICsgYTQzICogY29zO1xuICAgICAgICBhMTIgPSB0MTtcbiAgICAgICAgYTIyID0gdDI7XG4gICAgICAgIGEzMiA9IHQzO1xuICAgICAgfSAvL3JvdGF0aW9uWVxuXG5cbiAgICAgIGFuZ2xlID0gX2F0YW4yKC1jLCBhMzMpO1xuICAgICAgcm90YXRpb25ZID0gYW5nbGUgKiBfUkFEMkRFRztcblxuICAgICAgaWYgKGFuZ2xlKSB7XG4gICAgICAgIGNvcyA9IE1hdGguY29zKC1hbmdsZSk7XG4gICAgICAgIHNpbiA9IE1hdGguc2luKC1hbmdsZSk7XG4gICAgICAgIHQxID0gYSAqIGNvcyAtIGExMyAqIHNpbjtcbiAgICAgICAgdDIgPSBiICogY29zIC0gYTIzICogc2luO1xuICAgICAgICB0MyA9IGMgKiBjb3MgLSBhMzMgKiBzaW47XG4gICAgICAgIGE0MyA9IGQgKiBzaW4gKyBhNDMgKiBjb3M7XG4gICAgICAgIGEgPSB0MTtcbiAgICAgICAgYiA9IHQyO1xuICAgICAgICBjID0gdDM7XG4gICAgICB9IC8vcm90YXRpb25aXG5cblxuICAgICAgYW5nbGUgPSBfYXRhbjIoYiwgYSk7XG4gICAgICByb3RhdGlvbiA9IGFuZ2xlICogX1JBRDJERUc7XG5cbiAgICAgIGlmIChhbmdsZSkge1xuICAgICAgICBjb3MgPSBNYXRoLmNvcyhhbmdsZSk7XG4gICAgICAgIHNpbiA9IE1hdGguc2luKGFuZ2xlKTtcbiAgICAgICAgdDEgPSBhICogY29zICsgYiAqIHNpbjtcbiAgICAgICAgdDIgPSBhMTIgKiBjb3MgKyBhMjIgKiBzaW47XG4gICAgICAgIGIgPSBiICogY29zIC0gYSAqIHNpbjtcbiAgICAgICAgYTIyID0gYTIyICogY29zIC0gYTEyICogc2luO1xuICAgICAgICBhID0gdDE7XG4gICAgICAgIGExMiA9IHQyO1xuICAgICAgfVxuXG4gICAgICBpZiAocm90YXRpb25YICYmIE1hdGguYWJzKHJvdGF0aW9uWCkgKyBNYXRoLmFicyhyb3RhdGlvbikgPiAzNTkuOSkge1xuICAgICAgICAvL3doZW4gcm90YXRpb25ZIGlzIHNldCwgaXQgd2lsbCBvZnRlbiBiZSBwYXJzZWQgYXMgMTgwIGRlZ3JlZXMgZGlmZmVyZW50IHRoYW4gaXQgc2hvdWxkIGJlLCBhbmQgcm90YXRpb25YIGFuZCByb3RhdGlvbiBib3RoIGJlaW5nIDE4MCAoaXQgbG9va3MgdGhlIHNhbWUpLCBzbyB3ZSBhZGp1c3QgZm9yIHRoYXQgaGVyZS5cbiAgICAgICAgcm90YXRpb25YID0gcm90YXRpb24gPSAwO1xuICAgICAgICByb3RhdGlvblkgPSAxODAgLSByb3RhdGlvblk7XG4gICAgICB9XG5cbiAgICAgIHNjYWxlWCA9IF9yb3VuZChNYXRoLnNxcnQoYSAqIGEgKyBiICogYiArIGMgKiBjKSk7XG4gICAgICBzY2FsZVkgPSBfcm91bmQoTWF0aC5zcXJ0KGEyMiAqIGEyMiArIGEzMiAqIGEzMikpO1xuICAgICAgYW5nbGUgPSBfYXRhbjIoYTEyLCBhMjIpO1xuICAgICAgc2tld1ggPSBNYXRoLmFicyhhbmdsZSkgPiAwLjAwMDIgPyBhbmdsZSAqIF9SQUQyREVHIDogMDtcbiAgICAgIHBlcnNwZWN0aXZlID0gYTQzID8gMSAvIChhNDMgPCAwID8gLWE0MyA6IGE0MykgOiAwO1xuICAgIH1cblxuICAgIGlmIChjYWNoZS5zdmcpIHtcbiAgICAgIC8vc2Vuc2UgaWYgdGhlcmUgYXJlIENTUyB0cmFuc2Zvcm1zIGFwcGxpZWQgb24gYW4gU1ZHIGVsZW1lbnQgaW4gd2hpY2ggY2FzZSB3ZSBtdXN0IG92ZXJ3cml0ZSB0aGVtIHdoZW4gcmVuZGVyaW5nLiBUaGUgdHJhbnNmb3JtIGF0dHJpYnV0ZSBpcyBtb3JlIHJlbGlhYmxlIGNyb3NzLWJyb3dzZXIsIGJ1dCB3ZSBjYW4ndCBqdXN0IHJlbW92ZSB0aGUgQ1NTIG9uZXMgYmVjYXVzZSB0aGV5IG1heSBiZSBhcHBsaWVkIGluIGEgQ1NTIHJ1bGUgc29tZXdoZXJlIChub3QganVzdCBpbmxpbmUpLlxuICAgICAgdDEgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIpO1xuICAgICAgY2FjaGUuZm9yY2VDU1MgPSB0YXJnZXQuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIFwiXCIpIHx8ICFfaXNOdWxsVHJhbnNmb3JtKF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgX3RyYW5zZm9ybVByb3ApKTtcbiAgICAgIHQxICYmIHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIiwgdDEpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChNYXRoLmFicyhza2V3WCkgPiA5MCAmJiBNYXRoLmFicyhza2V3WCkgPCAyNzApIHtcbiAgICBpZiAoaW52ZXJ0ZWRTY2FsZVgpIHtcbiAgICAgIHNjYWxlWCAqPSAtMTtcbiAgICAgIHNrZXdYICs9IHJvdGF0aW9uIDw9IDAgPyAxODAgOiAtMTgwO1xuICAgICAgcm90YXRpb24gKz0gcm90YXRpb24gPD0gMCA/IDE4MCA6IC0xODA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNjYWxlWSAqPSAtMTtcbiAgICAgIHNrZXdYICs9IHNrZXdYIDw9IDAgPyAxODAgOiAtMTgwO1xuICAgIH1cbiAgfVxuXG4gIHVuY2FjaGUgPSB1bmNhY2hlIHx8IGNhY2hlLnVuY2FjaGU7XG4gIGNhY2hlLnggPSB4IC0gKChjYWNoZS54UGVyY2VudCA9IHggJiYgKCF1bmNhY2hlICYmIGNhY2hlLnhQZXJjZW50IHx8IChNYXRoLnJvdW5kKHRhcmdldC5vZmZzZXRXaWR0aCAvIDIpID09PSBNYXRoLnJvdW5kKC14KSA/IC01MCA6IDApKSkgPyB0YXJnZXQub2Zmc2V0V2lkdGggKiBjYWNoZS54UGVyY2VudCAvIDEwMCA6IDApICsgcHg7XG4gIGNhY2hlLnkgPSB5IC0gKChjYWNoZS55UGVyY2VudCA9IHkgJiYgKCF1bmNhY2hlICYmIGNhY2hlLnlQZXJjZW50IHx8IChNYXRoLnJvdW5kKHRhcmdldC5vZmZzZXRIZWlnaHQgLyAyKSA9PT0gTWF0aC5yb3VuZCgteSkgPyAtNTAgOiAwKSkpID8gdGFyZ2V0Lm9mZnNldEhlaWdodCAqIGNhY2hlLnlQZXJjZW50IC8gMTAwIDogMCkgKyBweDtcbiAgY2FjaGUueiA9IHogKyBweDtcbiAgY2FjaGUuc2NhbGVYID0gX3JvdW5kKHNjYWxlWCk7XG4gIGNhY2hlLnNjYWxlWSA9IF9yb3VuZChzY2FsZVkpO1xuICBjYWNoZS5yb3RhdGlvbiA9IF9yb3VuZChyb3RhdGlvbikgKyBkZWc7XG4gIGNhY2hlLnJvdGF0aW9uWCA9IF9yb3VuZChyb3RhdGlvblgpICsgZGVnO1xuICBjYWNoZS5yb3RhdGlvblkgPSBfcm91bmQocm90YXRpb25ZKSArIGRlZztcbiAgY2FjaGUuc2tld1ggPSBza2V3WCArIGRlZztcbiAgY2FjaGUuc2tld1kgPSBza2V3WSArIGRlZztcbiAgY2FjaGUudHJhbnNmb3JtUGVyc3BlY3RpdmUgPSBwZXJzcGVjdGl2ZSArIHB4O1xuXG4gIGlmIChjYWNoZS56T3JpZ2luID0gcGFyc2VGbG9hdChvcmlnaW4uc3BsaXQoXCIgXCIpWzJdKSB8fCAhdW5jYWNoZSAmJiBjYWNoZS56T3JpZ2luIHx8IDApIHtcbiAgICBzdHlsZVtfdHJhbnNmb3JtT3JpZ2luUHJvcF0gPSBfZmlyc3RUd29Pbmx5KG9yaWdpbik7XG4gIH1cblxuICBjYWNoZS54T2Zmc2V0ID0gY2FjaGUueU9mZnNldCA9IDA7XG4gIGNhY2hlLmZvcmNlM0QgPSBfY29uZmlnLmZvcmNlM0Q7XG4gIGNhY2hlLnJlbmRlclRyYW5zZm9ybSA9IGNhY2hlLnN2ZyA/IF9yZW5kZXJTVkdUcmFuc2Zvcm1zIDogX3N1cHBvcnRzM0QgPyBfcmVuZGVyQ1NTVHJhbnNmb3JtcyA6IF9yZW5kZXJOb24zRFRyYW5zZm9ybXM7XG4gIGNhY2hlLnVuY2FjaGUgPSAwO1xuICByZXR1cm4gY2FjaGU7XG59LFxuICAgIF9maXJzdFR3b09ubHkgPSBmdW5jdGlvbiBfZmlyc3RUd29Pbmx5KHZhbHVlKSB7XG4gIHJldHVybiAodmFsdWUgPSB2YWx1ZS5zcGxpdChcIiBcIikpWzBdICsgXCIgXCIgKyB2YWx1ZVsxXTtcbn0sXG4gICAgLy9mb3IgaGFuZGxpbmcgdHJhbnNmb3JtT3JpZ2luIHZhbHVlcywgc3RyaXBwaW5nIG91dCB0aGUgM3JkIGRpbWVuc2lvblxuX2FkZFB4VHJhbnNsYXRlID0gZnVuY3Rpb24gX2FkZFB4VHJhbnNsYXRlKHRhcmdldCwgc3RhcnQsIHZhbHVlKSB7XG4gIHZhciB1bml0ID0gZ2V0VW5pdChzdGFydCk7XG4gIHJldHVybiBfcm91bmQocGFyc2VGbG9hdChzdGFydCkgKyBwYXJzZUZsb2F0KF9jb252ZXJ0VG9Vbml0KHRhcmdldCwgXCJ4XCIsIHZhbHVlICsgXCJweFwiLCB1bml0KSkpICsgdW5pdDtcbn0sXG4gICAgX3JlbmRlck5vbjNEVHJhbnNmb3JtcyA9IGZ1bmN0aW9uIF9yZW5kZXJOb24zRFRyYW5zZm9ybXMocmF0aW8sIGNhY2hlKSB7XG4gIGNhY2hlLnogPSBcIjBweFwiO1xuICBjYWNoZS5yb3RhdGlvblkgPSBjYWNoZS5yb3RhdGlvblggPSBcIjBkZWdcIjtcbiAgY2FjaGUuZm9yY2UzRCA9IDA7XG5cbiAgX3JlbmRlckNTU1RyYW5zZm9ybXMocmF0aW8sIGNhY2hlKTtcbn0sXG4gICAgX3plcm9EZWcgPSBcIjBkZWdcIixcbiAgICBfemVyb1B4ID0gXCIwcHhcIixcbiAgICBfZW5kUGFyZW50aGVzaXMgPSBcIikgXCIsXG4gICAgX3JlbmRlckNTU1RyYW5zZm9ybXMgPSBmdW5jdGlvbiBfcmVuZGVyQ1NTVHJhbnNmb3JtcyhyYXRpbywgY2FjaGUpIHtcbiAgdmFyIF9yZWYgPSBjYWNoZSB8fCB0aGlzLFxuICAgICAgeFBlcmNlbnQgPSBfcmVmLnhQZXJjZW50LFxuICAgICAgeVBlcmNlbnQgPSBfcmVmLnlQZXJjZW50LFxuICAgICAgeCA9IF9yZWYueCxcbiAgICAgIHkgPSBfcmVmLnksXG4gICAgICB6ID0gX3JlZi56LFxuICAgICAgcm90YXRpb24gPSBfcmVmLnJvdGF0aW9uLFxuICAgICAgcm90YXRpb25ZID0gX3JlZi5yb3RhdGlvblksXG4gICAgICByb3RhdGlvblggPSBfcmVmLnJvdGF0aW9uWCxcbiAgICAgIHNrZXdYID0gX3JlZi5za2V3WCxcbiAgICAgIHNrZXdZID0gX3JlZi5za2V3WSxcbiAgICAgIHNjYWxlWCA9IF9yZWYuc2NhbGVYLFxuICAgICAgc2NhbGVZID0gX3JlZi5zY2FsZVksXG4gICAgICB0cmFuc2Zvcm1QZXJzcGVjdGl2ZSA9IF9yZWYudHJhbnNmb3JtUGVyc3BlY3RpdmUsXG4gICAgICBmb3JjZTNEID0gX3JlZi5mb3JjZTNELFxuICAgICAgdGFyZ2V0ID0gX3JlZi50YXJnZXQsXG4gICAgICB6T3JpZ2luID0gX3JlZi56T3JpZ2luLFxuICAgICAgdHJhbnNmb3JtcyA9IFwiXCIsXG4gICAgICB1c2UzRCA9IGZvcmNlM0QgPT09IFwiYXV0b1wiICYmIHJhdGlvICYmIHJhdGlvICE9PSAxIHx8IGZvcmNlM0QgPT09IHRydWU7IC8vIFNhZmFyaSBoYXMgYSBidWcgdGhhdCBjYXVzZXMgaXQgbm90IHRvIHJlbmRlciAzRCB0cmFuc2Zvcm0tb3JpZ2luIHZhbHVlcyBwcm9wZXJseSwgc28gd2UgZm9yY2UgdGhlIHogb3JpZ2luIHRvIDAsIHJlY29yZCBpdCBpbiB0aGUgY2FjaGUsIGFuZCB0aGVuIGRvIHRoZSBtYXRoIGhlcmUgdG8gb2Zmc2V0IHRoZSB0cmFuc2xhdGUgdmFsdWVzIGFjY29yZGluZ2x5IChiYXNpY2FsbHkgZG8gdGhlIDNEIHRyYW5zZm9ybS1vcmlnaW4gcGFydCBtYW51YWxseSlcblxuXG4gIGlmICh6T3JpZ2luICYmIChyb3RhdGlvblggIT09IF96ZXJvRGVnIHx8IHJvdGF0aW9uWSAhPT0gX3plcm9EZWcpKSB7XG4gICAgdmFyIGFuZ2xlID0gcGFyc2VGbG9hdChyb3RhdGlvblkpICogX0RFRzJSQUQsXG4gICAgICAgIGExMyA9IE1hdGguc2luKGFuZ2xlKSxcbiAgICAgICAgYTMzID0gTWF0aC5jb3MoYW5nbGUpLFxuICAgICAgICBjb3M7XG5cbiAgICBhbmdsZSA9IHBhcnNlRmxvYXQocm90YXRpb25YKSAqIF9ERUcyUkFEO1xuICAgIGNvcyA9IE1hdGguY29zKGFuZ2xlKTtcbiAgICB4ID0gX2FkZFB4VHJhbnNsYXRlKHRhcmdldCwgeCwgYTEzICogY29zICogLXpPcmlnaW4pO1xuICAgIHkgPSBfYWRkUHhUcmFuc2xhdGUodGFyZ2V0LCB5LCAtTWF0aC5zaW4oYW5nbGUpICogLXpPcmlnaW4pO1xuICAgIHogPSBfYWRkUHhUcmFuc2xhdGUodGFyZ2V0LCB6LCBhMzMgKiBjb3MgKiAtek9yaWdpbiArIHpPcmlnaW4pO1xuICB9XG5cbiAgaWYgKHRyYW5zZm9ybVBlcnNwZWN0aXZlICE9PSBfemVyb1B4KSB7XG4gICAgdHJhbnNmb3JtcyArPSBcInBlcnNwZWN0aXZlKFwiICsgdHJhbnNmb3JtUGVyc3BlY3RpdmUgKyBfZW5kUGFyZW50aGVzaXM7XG4gIH1cblxuICBpZiAoeFBlcmNlbnQgfHwgeVBlcmNlbnQpIHtcbiAgICB0cmFuc2Zvcm1zICs9IFwidHJhbnNsYXRlKFwiICsgeFBlcmNlbnQgKyBcIiUsIFwiICsgeVBlcmNlbnQgKyBcIiUpIFwiO1xuICB9XG5cbiAgaWYgKHVzZTNEIHx8IHggIT09IF96ZXJvUHggfHwgeSAhPT0gX3plcm9QeCB8fCB6ICE9PSBfemVyb1B4KSB7XG4gICAgdHJhbnNmb3JtcyArPSB6ICE9PSBfemVyb1B4IHx8IHVzZTNEID8gXCJ0cmFuc2xhdGUzZChcIiArIHggKyBcIiwgXCIgKyB5ICsgXCIsIFwiICsgeiArIFwiKSBcIiA6IFwidHJhbnNsYXRlKFwiICsgeCArIFwiLCBcIiArIHkgKyBfZW5kUGFyZW50aGVzaXM7XG4gIH1cblxuICBpZiAocm90YXRpb24gIT09IF96ZXJvRGVnKSB7XG4gICAgdHJhbnNmb3JtcyArPSBcInJvdGF0ZShcIiArIHJvdGF0aW9uICsgX2VuZFBhcmVudGhlc2lzO1xuICB9XG5cbiAgaWYgKHJvdGF0aW9uWSAhPT0gX3plcm9EZWcpIHtcbiAgICB0cmFuc2Zvcm1zICs9IFwicm90YXRlWShcIiArIHJvdGF0aW9uWSArIF9lbmRQYXJlbnRoZXNpcztcbiAgfVxuXG4gIGlmIChyb3RhdGlvblggIT09IF96ZXJvRGVnKSB7XG4gICAgdHJhbnNmb3JtcyArPSBcInJvdGF0ZVgoXCIgKyByb3RhdGlvblggKyBfZW5kUGFyZW50aGVzaXM7XG4gIH1cblxuICBpZiAoc2tld1ggIT09IF96ZXJvRGVnIHx8IHNrZXdZICE9PSBfemVyb0RlZykge1xuICAgIHRyYW5zZm9ybXMgKz0gXCJza2V3KFwiICsgc2tld1ggKyBcIiwgXCIgKyBza2V3WSArIF9lbmRQYXJlbnRoZXNpcztcbiAgfVxuXG4gIGlmIChzY2FsZVggIT09IDEgfHwgc2NhbGVZICE9PSAxKSB7XG4gICAgdHJhbnNmb3JtcyArPSBcInNjYWxlKFwiICsgc2NhbGVYICsgXCIsIFwiICsgc2NhbGVZICsgX2VuZFBhcmVudGhlc2lzO1xuICB9XG5cbiAgdGFyZ2V0LnN0eWxlW190cmFuc2Zvcm1Qcm9wXSA9IHRyYW5zZm9ybXMgfHwgXCJ0cmFuc2xhdGUoMCwgMClcIjtcbn0sXG4gICAgX3JlbmRlclNWR1RyYW5zZm9ybXMgPSBmdW5jdGlvbiBfcmVuZGVyU1ZHVHJhbnNmb3JtcyhyYXRpbywgY2FjaGUpIHtcbiAgdmFyIF9yZWYyID0gY2FjaGUgfHwgdGhpcyxcbiAgICAgIHhQZXJjZW50ID0gX3JlZjIueFBlcmNlbnQsXG4gICAgICB5UGVyY2VudCA9IF9yZWYyLnlQZXJjZW50LFxuICAgICAgeCA9IF9yZWYyLngsXG4gICAgICB5ID0gX3JlZjIueSxcbiAgICAgIHJvdGF0aW9uID0gX3JlZjIucm90YXRpb24sXG4gICAgICBza2V3WCA9IF9yZWYyLnNrZXdYLFxuICAgICAgc2tld1kgPSBfcmVmMi5za2V3WSxcbiAgICAgIHNjYWxlWCA9IF9yZWYyLnNjYWxlWCxcbiAgICAgIHNjYWxlWSA9IF9yZWYyLnNjYWxlWSxcbiAgICAgIHRhcmdldCA9IF9yZWYyLnRhcmdldCxcbiAgICAgIHhPcmlnaW4gPSBfcmVmMi54T3JpZ2luLFxuICAgICAgeU9yaWdpbiA9IF9yZWYyLnlPcmlnaW4sXG4gICAgICB4T2Zmc2V0ID0gX3JlZjIueE9mZnNldCxcbiAgICAgIHlPZmZzZXQgPSBfcmVmMi55T2Zmc2V0LFxuICAgICAgZm9yY2VDU1MgPSBfcmVmMi5mb3JjZUNTUyxcbiAgICAgIHR4ID0gcGFyc2VGbG9hdCh4KSxcbiAgICAgIHR5ID0gcGFyc2VGbG9hdCh5KSxcbiAgICAgIGExMSxcbiAgICAgIGEyMSxcbiAgICAgIGExMixcbiAgICAgIGEyMixcbiAgICAgIHRlbXA7XG5cbiAgcm90YXRpb24gPSBwYXJzZUZsb2F0KHJvdGF0aW9uKTtcbiAgc2tld1ggPSBwYXJzZUZsb2F0KHNrZXdYKTtcbiAgc2tld1kgPSBwYXJzZUZsb2F0KHNrZXdZKTtcblxuICBpZiAoc2tld1kpIHtcbiAgICAvL2ZvciBwZXJmb3JtYW5jZSByZWFzb25zLCB3ZSBjb21iaW5lIGFsbCBza2V3aW5nIGludG8gdGhlIHNrZXdYIGFuZCByb3RhdGlvbiB2YWx1ZXMuIFJlbWVtYmVyLCBhIHNrZXdZIG9mIDEwIGRlZ3JlZXMgbG9va3MgdGhlIHNhbWUgYXMgYSByb3RhdGlvbiBvZiAxMCBkZWdyZWVzIHBsdXMgYSBza2V3WCBvZiAxMCBkZWdyZWVzLlxuICAgIHNrZXdZID0gcGFyc2VGbG9hdChza2V3WSk7XG4gICAgc2tld1ggKz0gc2tld1k7XG4gICAgcm90YXRpb24gKz0gc2tld1k7XG4gIH1cblxuICBpZiAocm90YXRpb24gfHwgc2tld1gpIHtcbiAgICByb3RhdGlvbiAqPSBfREVHMlJBRDtcbiAgICBza2V3WCAqPSBfREVHMlJBRDtcbiAgICBhMTEgPSBNYXRoLmNvcyhyb3RhdGlvbikgKiBzY2FsZVg7XG4gICAgYTIxID0gTWF0aC5zaW4ocm90YXRpb24pICogc2NhbGVYO1xuICAgIGExMiA9IE1hdGguc2luKHJvdGF0aW9uIC0gc2tld1gpICogLXNjYWxlWTtcbiAgICBhMjIgPSBNYXRoLmNvcyhyb3RhdGlvbiAtIHNrZXdYKSAqIHNjYWxlWTtcblxuICAgIGlmIChza2V3WCkge1xuICAgICAgc2tld1kgKj0gX0RFRzJSQUQ7XG4gICAgICB0ZW1wID0gTWF0aC50YW4oc2tld1ggLSBza2V3WSk7XG4gICAgICB0ZW1wID0gTWF0aC5zcXJ0KDEgKyB0ZW1wICogdGVtcCk7XG4gICAgICBhMTIgKj0gdGVtcDtcbiAgICAgIGEyMiAqPSB0ZW1wO1xuXG4gICAgICBpZiAoc2tld1kpIHtcbiAgICAgICAgdGVtcCA9IE1hdGgudGFuKHNrZXdZKTtcbiAgICAgICAgdGVtcCA9IE1hdGguc3FydCgxICsgdGVtcCAqIHRlbXApO1xuICAgICAgICBhMTEgKj0gdGVtcDtcbiAgICAgICAgYTIxICo9IHRlbXA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgYTExID0gX3JvdW5kKGExMSk7XG4gICAgYTIxID0gX3JvdW5kKGEyMSk7XG4gICAgYTEyID0gX3JvdW5kKGExMik7XG4gICAgYTIyID0gX3JvdW5kKGEyMik7XG4gIH0gZWxzZSB7XG4gICAgYTExID0gc2NhbGVYO1xuICAgIGEyMiA9IHNjYWxlWTtcbiAgICBhMjEgPSBhMTIgPSAwO1xuICB9XG5cbiAgaWYgKHR4ICYmICF+KHggKyBcIlwiKS5pbmRleE9mKFwicHhcIikgfHwgdHkgJiYgIX4oeSArIFwiXCIpLmluZGV4T2YoXCJweFwiKSkge1xuICAgIHR4ID0gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBcInhcIiwgeCwgXCJweFwiKTtcbiAgICB0eSA9IF9jb252ZXJ0VG9Vbml0KHRhcmdldCwgXCJ5XCIsIHksIFwicHhcIik7XG4gIH1cblxuICBpZiAoeE9yaWdpbiB8fCB5T3JpZ2luIHx8IHhPZmZzZXQgfHwgeU9mZnNldCkge1xuICAgIHR4ID0gX3JvdW5kKHR4ICsgeE9yaWdpbiAtICh4T3JpZ2luICogYTExICsgeU9yaWdpbiAqIGExMikgKyB4T2Zmc2V0KTtcbiAgICB0eSA9IF9yb3VuZCh0eSArIHlPcmlnaW4gLSAoeE9yaWdpbiAqIGEyMSArIHlPcmlnaW4gKiBhMjIpICsgeU9mZnNldCk7XG4gIH1cblxuICBpZiAoeFBlcmNlbnQgfHwgeVBlcmNlbnQpIHtcbiAgICAvL1RoZSBTVkcgc3BlYyBkb2Vzbid0IHN1cHBvcnQgcGVyY2VudGFnZS1iYXNlZCB0cmFuc2xhdGlvbiBpbiB0aGUgXCJ0cmFuc2Zvcm1cIiBhdHRyaWJ1dGUsIHNvIHdlIG1lcmdlIGl0IGludG8gdGhlIHRyYW5zbGF0aW9uIHRvIHNpbXVsYXRlIGl0LlxuICAgIHRlbXAgPSB0YXJnZXQuZ2V0QkJveCgpO1xuICAgIHR4ID0gX3JvdW5kKHR4ICsgeFBlcmNlbnQgLyAxMDAgKiB0ZW1wLndpZHRoKTtcbiAgICB0eSA9IF9yb3VuZCh0eSArIHlQZXJjZW50IC8gMTAwICogdGVtcC5oZWlnaHQpO1xuICB9XG5cbiAgdGVtcCA9IFwibWF0cml4KFwiICsgYTExICsgXCIsXCIgKyBhMjEgKyBcIixcIiArIGExMiArIFwiLFwiICsgYTIyICsgXCIsXCIgKyB0eCArIFwiLFwiICsgdHkgKyBcIilcIjtcbiAgdGFyZ2V0LnNldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiLCB0ZW1wKTtcbiAgZm9yY2VDU1MgJiYgKHRhcmdldC5zdHlsZVtfdHJhbnNmb3JtUHJvcF0gPSB0ZW1wKTsgLy9zb21lIGJyb3dzZXJzIHByaW9yaXRpemUgQ1NTIHRyYW5zZm9ybXMgb3ZlciB0aGUgdHJhbnNmb3JtIGF0dHJpYnV0ZS4gV2hlbiB3ZSBzZW5zZSB0aGF0IHRoZSB1c2VyIGhhcyBDU1MgdHJhbnNmb3JtcyBhcHBsaWVkLCB3ZSBtdXN0IG92ZXJ3cml0ZSB0aGVtIHRoaXMgd2F5IChvdGhlcndpc2Ugc29tZSBicm93c2VyIHNpbXBseSB3b24ndCByZW5kZXIgdGhlIHRyYW5zZm9ybSBhdHRyaWJ1dGUgY2hhbmdlcyEpXG59LFxuICAgIF9hZGRSb3RhdGlvbmFsUHJvcFR3ZWVuID0gZnVuY3Rpb24gX2FkZFJvdGF0aW9uYWxQcm9wVHdlZW4ocGx1Z2luLCB0YXJnZXQsIHByb3BlcnR5LCBzdGFydE51bSwgZW5kVmFsdWUpIHtcbiAgdmFyIGNhcCA9IDM2MCxcbiAgICAgIGlzU3RyaW5nID0gX2lzU3RyaW5nKGVuZFZhbHVlKSxcbiAgICAgIGVuZE51bSA9IHBhcnNlRmxvYXQoZW5kVmFsdWUpICogKGlzU3RyaW5nICYmIH5lbmRWYWx1ZS5pbmRleE9mKFwicmFkXCIpID8gX1JBRDJERUcgOiAxKSxcbiAgICAgIGNoYW5nZSA9IGVuZE51bSAtIHN0YXJ0TnVtLFxuICAgICAgZmluYWxWYWx1ZSA9IHN0YXJ0TnVtICsgY2hhbmdlICsgXCJkZWdcIixcbiAgICAgIGRpcmVjdGlvbixcbiAgICAgIHB0O1xuXG4gIGlmIChpc1N0cmluZykge1xuICAgIGRpcmVjdGlvbiA9IGVuZFZhbHVlLnNwbGl0KFwiX1wiKVsxXTtcblxuICAgIGlmIChkaXJlY3Rpb24gPT09IFwic2hvcnRcIikge1xuICAgICAgY2hhbmdlICU9IGNhcDtcblxuICAgICAgaWYgKGNoYW5nZSAhPT0gY2hhbmdlICUgKGNhcCAvIDIpKSB7XG4gICAgICAgIGNoYW5nZSArPSBjaGFuZ2UgPCAwID8gY2FwIDogLWNhcDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZGlyZWN0aW9uID09PSBcImN3XCIgJiYgY2hhbmdlIDwgMCkge1xuICAgICAgY2hhbmdlID0gKGNoYW5nZSArIGNhcCAqIF9iaWdOdW0pICUgY2FwIC0gfn4oY2hhbmdlIC8gY2FwKSAqIGNhcDtcbiAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gXCJjY3dcIiAmJiBjaGFuZ2UgPiAwKSB7XG4gICAgICBjaGFuZ2UgPSAoY2hhbmdlIC0gY2FwICogX2JpZ051bSkgJSBjYXAgLSB+fihjaGFuZ2UgLyBjYXApICogY2FwO1xuICAgIH1cbiAgfVxuXG4gIHBsdWdpbi5fcHQgPSBwdCA9IG5ldyBQcm9wVHdlZW4ocGx1Z2luLl9wdCwgdGFyZ2V0LCBwcm9wZXJ0eSwgc3RhcnROdW0sIGNoYW5nZSwgX3JlbmRlclByb3BXaXRoRW5kKTtcbiAgcHQuZSA9IGZpbmFsVmFsdWU7XG4gIHB0LnUgPSBcImRlZ1wiO1xuXG4gIHBsdWdpbi5fcHJvcHMucHVzaChwcm9wZXJ0eSk7XG5cbiAgcmV0dXJuIHB0O1xufSxcbiAgICBfYXNzaWduID0gZnVuY3Rpb24gX2Fzc2lnbih0YXJnZXQsIHNvdXJjZSkge1xuICAvLyBJbnRlcm5ldCBFeHBsb3JlciBkb2Vzbid0IGhhdmUgT2JqZWN0LmFzc2lnbigpLCBzbyB3ZSByZWNyZWF0ZSBpdCBoZXJlLlxuICBmb3IgKHZhciBwIGluIHNvdXJjZSkge1xuICAgIHRhcmdldFtwXSA9IHNvdXJjZVtwXTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59LFxuICAgIF9hZGRSYXdUcmFuc2Zvcm1QVHMgPSBmdW5jdGlvbiBfYWRkUmF3VHJhbnNmb3JtUFRzKHBsdWdpbiwgdHJhbnNmb3JtcywgdGFyZ2V0KSB7XG4gIC8vZm9yIGhhbmRsaW5nIGNhc2VzIHdoZXJlIHNvbWVvbmUgcGFzc2VzIGluIGEgd2hvbGUgdHJhbnNmb3JtIHN0cmluZywgbGlrZSB0cmFuc2Zvcm06IFwic2NhbGUoMiwgMykgcm90YXRlKDIwZGVnKSB0cmFuc2xhdGVZKDMwZW0pXCJcbiAgdmFyIHN0YXJ0Q2FjaGUgPSBfYXNzaWduKHt9LCB0YXJnZXQuX2dzYXApLFxuICAgICAgZXhjbHVkZSA9IFwicGVyc3BlY3RpdmUsZm9yY2UzRCx0cmFuc2Zvcm1PcmlnaW4sc3ZnT3JpZ2luXCIsXG4gICAgICBzdHlsZSA9IHRhcmdldC5zdHlsZSxcbiAgICAgIGVuZENhY2hlLFxuICAgICAgcCxcbiAgICAgIHN0YXJ0VmFsdWUsXG4gICAgICBlbmRWYWx1ZSxcbiAgICAgIHN0YXJ0TnVtLFxuICAgICAgZW5kTnVtLFxuICAgICAgc3RhcnRVbml0LFxuICAgICAgZW5kVW5pdDtcblxuICBpZiAoc3RhcnRDYWNoZS5zdmcpIHtcbiAgICBzdGFydFZhbHVlID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiKTtcbiAgICB0YXJnZXQuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIFwiXCIpO1xuICAgIHN0eWxlW190cmFuc2Zvcm1Qcm9wXSA9IHRyYW5zZm9ybXM7XG4gICAgZW5kQ2FjaGUgPSBfcGFyc2VUcmFuc2Zvcm0odGFyZ2V0LCAxKTtcblxuICAgIF9yZW1vdmVQcm9wZXJ0eSh0YXJnZXQsIF90cmFuc2Zvcm1Qcm9wKTtcblxuICAgIHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIiwgc3RhcnRWYWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgc3RhcnRWYWx1ZSA9IGdldENvbXB1dGVkU3R5bGUodGFyZ2V0KVtfdHJhbnNmb3JtUHJvcF07XG4gICAgc3R5bGVbX3RyYW5zZm9ybVByb3BdID0gdHJhbnNmb3JtcztcbiAgICBlbmRDYWNoZSA9IF9wYXJzZVRyYW5zZm9ybSh0YXJnZXQsIDEpO1xuICAgIHN0eWxlW190cmFuc2Zvcm1Qcm9wXSA9IHN0YXJ0VmFsdWU7XG4gIH1cblxuICBmb3IgKHAgaW4gX3RyYW5zZm9ybVByb3BzKSB7XG4gICAgc3RhcnRWYWx1ZSA9IHN0YXJ0Q2FjaGVbcF07XG4gICAgZW5kVmFsdWUgPSBlbmRDYWNoZVtwXTtcblxuICAgIGlmIChzdGFydFZhbHVlICE9PSBlbmRWYWx1ZSAmJiBleGNsdWRlLmluZGV4T2YocCkgPCAwKSB7XG4gICAgICAvL3R3ZWVuaW5nIHRvIG5vIHBlcnNwZWN0aXZlIGdpdmVzIHZlcnkgdW5pbnR1aXRpdmUgcmVzdWx0cyAtIGp1c3Qga2VlcCB0aGUgc2FtZSBwZXJzcGVjdGl2ZSBpbiB0aGF0IGNhc2UuXG4gICAgICBzdGFydFVuaXQgPSBnZXRVbml0KHN0YXJ0VmFsdWUpO1xuICAgICAgZW5kVW5pdCA9IGdldFVuaXQoZW5kVmFsdWUpO1xuICAgICAgc3RhcnROdW0gPSBzdGFydFVuaXQgIT09IGVuZFVuaXQgPyBfY29udmVydFRvVW5pdCh0YXJnZXQsIHAsIHN0YXJ0VmFsdWUsIGVuZFVuaXQpIDogcGFyc2VGbG9hdChzdGFydFZhbHVlKTtcbiAgICAgIGVuZE51bSA9IHBhcnNlRmxvYXQoZW5kVmFsdWUpO1xuICAgICAgcGx1Z2luLl9wdCA9IG5ldyBQcm9wVHdlZW4ocGx1Z2luLl9wdCwgZW5kQ2FjaGUsIHAsIHN0YXJ0TnVtLCBlbmROdW0gLSBzdGFydE51bSwgX3JlbmRlckNTU1Byb3ApO1xuICAgICAgcGx1Z2luLl9wdC51ID0gZW5kVW5pdCB8fCAwO1xuXG4gICAgICBwbHVnaW4uX3Byb3BzLnB1c2gocCk7XG4gICAgfVxuICB9XG5cbiAgX2Fzc2lnbihlbmRDYWNoZSwgc3RhcnRDYWNoZSk7XG59OyAvLyBoYW5kbGUgc3BsaXR0aW5nIGFwYXJ0IHBhZGRpbmcsIG1hcmdpbiwgYm9yZGVyV2lkdGgsIGFuZCBib3JkZXJSYWRpdXMgaW50byB0aGVpciA0IGNvbXBvbmVudHMuIEZpcmVmb3gsIGZvciBleGFtcGxlLCB3b24ndCByZXBvcnQgYm9yZGVyUmFkaXVzIGNvcnJlY3RseSAtIGl0IHdpbGwgb25seSBkbyBib3JkZXJUb3BMZWZ0UmFkaXVzIGFuZCB0aGUgb3RoZXIgY29ybmVycy4gV2UgYWxzbyB3YW50IHRvIGhhbmRsZSBwYWRkaW5nVG9wLCBtYXJnaW5MZWZ0LCBib3JkZXJSaWdodFdpZHRoLCBldGMuXG5cblxuX2ZvckVhY2hOYW1lKFwicGFkZGluZyxtYXJnaW4sV2lkdGgsUmFkaXVzXCIsIGZ1bmN0aW9uIChuYW1lLCBpbmRleCkge1xuICB2YXIgdCA9IFwiVG9wXCIsXG4gICAgICByID0gXCJSaWdodFwiLFxuICAgICAgYiA9IFwiQm90dG9tXCIsXG4gICAgICBsID0gXCJMZWZ0XCIsXG4gICAgICBwcm9wcyA9IChpbmRleCA8IDMgPyBbdCwgciwgYiwgbF0gOiBbdCArIGwsIHQgKyByLCBiICsgciwgYiArIGxdKS5tYXAoZnVuY3Rpb24gKHNpZGUpIHtcbiAgICByZXR1cm4gaW5kZXggPCAyID8gbmFtZSArIHNpZGUgOiBcImJvcmRlclwiICsgc2lkZSArIG5hbWU7XG4gIH0pO1xuXG4gIF9zcGVjaWFsUHJvcHNbaW5kZXggPiAxID8gXCJib3JkZXJcIiArIG5hbWUgOiBuYW1lXSA9IGZ1bmN0aW9uIChwbHVnaW4sIHRhcmdldCwgcHJvcGVydHksIGVuZFZhbHVlLCB0d2Vlbikge1xuICAgIHZhciBhLCB2YXJzO1xuXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCA0KSB7XG4gICAgICAvLyBnZXR0ZXIsIHBhc3NlZCB0YXJnZXQsIHByb3BlcnR5LCBhbmQgdW5pdCAoZnJvbSBfZ2V0KCkpXG4gICAgICBhID0gcHJvcHMubWFwKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICAgIHJldHVybiBfZ2V0KHBsdWdpbiwgcHJvcCwgcHJvcGVydHkpO1xuICAgICAgfSk7XG4gICAgICB2YXJzID0gYS5qb2luKFwiIFwiKTtcbiAgICAgIHJldHVybiB2YXJzLnNwbGl0KGFbMF0pLmxlbmd0aCA9PT0gNSA/IGFbMF0gOiB2YXJzO1xuICAgIH1cblxuICAgIGEgPSAoZW5kVmFsdWUgKyBcIlwiKS5zcGxpdChcIiBcIik7XG4gICAgdmFycyA9IHt9O1xuICAgIHByb3BzLmZvckVhY2goZnVuY3Rpb24gKHByb3AsIGkpIHtcbiAgICAgIHJldHVybiB2YXJzW3Byb3BdID0gYVtpXSA9IGFbaV0gfHwgYVsoaSAtIDEpIC8gMiB8IDBdO1xuICAgIH0pO1xuICAgIHBsdWdpbi5pbml0KHRhcmdldCwgdmFycywgdHdlZW4pO1xuICB9O1xufSk7XG5cbmV4cG9ydCB2YXIgQ1NTUGx1Z2luID0ge1xuICBuYW1lOiBcImNzc1wiLFxuICByZWdpc3RlcjogX2luaXRDb3JlLFxuICB0YXJnZXRUZXN0OiBmdW5jdGlvbiB0YXJnZXRUZXN0KHRhcmdldCkge1xuICAgIHJldHVybiB0YXJnZXQuc3R5bGUgJiYgdGFyZ2V0Lm5vZGVUeXBlO1xuICB9LFxuICBpbml0OiBmdW5jdGlvbiBpbml0KHRhcmdldCwgdmFycywgdHdlZW4sIGluZGV4LCB0YXJnZXRzKSB7XG4gICAgdmFyIHByb3BzID0gdGhpcy5fcHJvcHMsXG4gICAgICAgIHN0eWxlID0gdGFyZ2V0LnN0eWxlLFxuICAgICAgICBzdGFydEF0ID0gdHdlZW4udmFycy5zdGFydEF0LFxuICAgICAgICBzdGFydFZhbHVlLFxuICAgICAgICBlbmRWYWx1ZSxcbiAgICAgICAgZW5kTnVtLFxuICAgICAgICBzdGFydE51bSxcbiAgICAgICAgdHlwZSxcbiAgICAgICAgc3BlY2lhbFByb3AsXG4gICAgICAgIHAsXG4gICAgICAgIHN0YXJ0VW5pdCxcbiAgICAgICAgZW5kVW5pdCxcbiAgICAgICAgcmVsYXRpdmUsXG4gICAgICAgIGlzVHJhbnNmb3JtUmVsYXRlZCxcbiAgICAgICAgdHJhbnNmb3JtUHJvcFR3ZWVuLFxuICAgICAgICBjYWNoZSxcbiAgICAgICAgc21vb3RoLFxuICAgICAgICBoYXNQcmlvcml0eSxcbiAgICAgICAgaW5saW5lUHJvcHM7XG4gICAgX3BsdWdpbkluaXR0ZWQgfHwgX2luaXRDb3JlKCk7IC8vIHdlIG1heSBjYWxsIGluaXQoKSBtdWx0aXBsZSB0aW1lcyBvbiB0aGUgc2FtZSBwbHVnaW4gaW5zdGFuY2UsIGxpa2Ugd2hlbiBhZGRpbmcgc3BlY2lhbCBwcm9wZXJ0aWVzLCBzbyBtYWtlIHN1cmUgd2UgZG9uJ3Qgb3ZlcndyaXRlIHRoZSByZXZlcnQgZGF0YSBvciBpbmxpbmVQcm9wc1xuXG4gICAgdGhpcy5zdHlsZXMgPSB0aGlzLnN0eWxlcyB8fCBfZ2V0U3R5bGVTYXZlcih0YXJnZXQpO1xuICAgIGlubGluZVByb3BzID0gdGhpcy5zdHlsZXMucHJvcHM7XG4gICAgdGhpcy50d2VlbiA9IHR3ZWVuO1xuXG4gICAgZm9yIChwIGluIHZhcnMpIHtcbiAgICAgIGlmIChwID09PSBcImF1dG9Sb3VuZFwiKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBlbmRWYWx1ZSA9IHZhcnNbcF07XG5cbiAgICAgIGlmIChfcGx1Z2luc1twXSAmJiBfY2hlY2tQbHVnaW4ocCwgdmFycywgdHdlZW4sIGluZGV4LCB0YXJnZXQsIHRhcmdldHMpKSB7XG4gICAgICAgIC8vIHBsdWdpbnNcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIHR5cGUgPSB0eXBlb2YgZW5kVmFsdWU7XG4gICAgICBzcGVjaWFsUHJvcCA9IF9zcGVjaWFsUHJvcHNbcF07XG5cbiAgICAgIGlmICh0eXBlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgZW5kVmFsdWUgPSBlbmRWYWx1ZS5jYWxsKHR3ZWVuLCBpbmRleCwgdGFyZ2V0LCB0YXJnZXRzKTtcbiAgICAgICAgdHlwZSA9IHR5cGVvZiBlbmRWYWx1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGUgPT09IFwic3RyaW5nXCIgJiYgfmVuZFZhbHVlLmluZGV4T2YoXCJyYW5kb20oXCIpKSB7XG4gICAgICAgIGVuZFZhbHVlID0gX3JlcGxhY2VSYW5kb20oZW5kVmFsdWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3BlY2lhbFByb3ApIHtcbiAgICAgICAgc3BlY2lhbFByb3AodGhpcywgdGFyZ2V0LCBwLCBlbmRWYWx1ZSwgdHdlZW4pICYmIChoYXNQcmlvcml0eSA9IDEpO1xuICAgICAgfSBlbHNlIGlmIChwLnN1YnN0cigwLCAyKSA9PT0gXCItLVwiKSB7XG4gICAgICAgIC8vQ1NTIHZhcmlhYmxlXG4gICAgICAgIHN0YXJ0VmFsdWUgPSAoZ2V0Q29tcHV0ZWRTdHlsZSh0YXJnZXQpLmdldFByb3BlcnR5VmFsdWUocCkgKyBcIlwiKS50cmltKCk7XG4gICAgICAgIGVuZFZhbHVlICs9IFwiXCI7XG4gICAgICAgIF9jb2xvckV4cC5sYXN0SW5kZXggPSAwO1xuXG4gICAgICAgIGlmICghX2NvbG9yRXhwLnRlc3Qoc3RhcnRWYWx1ZSkpIHtcbiAgICAgICAgICAvLyBjb2xvcnMgZG9uJ3QgaGF2ZSB1bml0c1xuICAgICAgICAgIHN0YXJ0VW5pdCA9IGdldFVuaXQoc3RhcnRWYWx1ZSk7XG4gICAgICAgICAgZW5kVW5pdCA9IGdldFVuaXQoZW5kVmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgZW5kVW5pdCA/IHN0YXJ0VW5pdCAhPT0gZW5kVW5pdCAmJiAoc3RhcnRWYWx1ZSA9IF9jb252ZXJ0VG9Vbml0KHRhcmdldCwgcCwgc3RhcnRWYWx1ZSwgZW5kVW5pdCkgKyBlbmRVbml0KSA6IHN0YXJ0VW5pdCAmJiAoZW5kVmFsdWUgKz0gc3RhcnRVbml0KTtcbiAgICAgICAgdGhpcy5hZGQoc3R5bGUsIFwic2V0UHJvcGVydHlcIiwgc3RhcnRWYWx1ZSwgZW5kVmFsdWUsIGluZGV4LCB0YXJnZXRzLCAwLCAwLCBwKTtcbiAgICAgICAgcHJvcHMucHVzaChwKTtcbiAgICAgICAgaW5saW5lUHJvcHMucHVzaChwLCAwLCBzdHlsZVtwXSk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHN0YXJ0QXQgJiYgcCBpbiBzdGFydEF0KSB7XG4gICAgICAgICAgLy8gaW4gY2FzZSBzb21lb25lIGhhcmQtY29kZXMgYSBjb21wbGV4IHZhbHVlIGFzIHRoZSBzdGFydCwgbGlrZSB0b3A6IFwiY2FsYygydmggLyAyKVwiLiBXaXRob3V0IHRoaXMsIGl0J2QgdXNlIHRoZSBjb21wdXRlZCB2YWx1ZSAoYWx3YXlzIGluIHB4KVxuICAgICAgICAgIHN0YXJ0VmFsdWUgPSB0eXBlb2Ygc3RhcnRBdFtwXSA9PT0gXCJmdW5jdGlvblwiID8gc3RhcnRBdFtwXS5jYWxsKHR3ZWVuLCBpbmRleCwgdGFyZ2V0LCB0YXJnZXRzKSA6IHN0YXJ0QXRbcF07XG4gICAgICAgICAgX2lzU3RyaW5nKHN0YXJ0VmFsdWUpICYmIH5zdGFydFZhbHVlLmluZGV4T2YoXCJyYW5kb20oXCIpICYmIChzdGFydFZhbHVlID0gX3JlcGxhY2VSYW5kb20oc3RhcnRWYWx1ZSkpO1xuICAgICAgICAgIGdldFVuaXQoc3RhcnRWYWx1ZSArIFwiXCIpIHx8IHN0YXJ0VmFsdWUgPT09IFwiYXV0b1wiIHx8IChzdGFydFZhbHVlICs9IF9jb25maWcudW5pdHNbcF0gfHwgZ2V0VW5pdChfZ2V0KHRhcmdldCwgcCkpIHx8IFwiXCIpOyAvLyBmb3IgY2FzZXMgd2hlbiBzb21lb25lIHBhc3NlcyBpbiBhIHVuaXRsZXNzIHZhbHVlIGxpa2Uge3g6IDEwMH07IGlmIHdlIHRyeSBzZXR0aW5nIHRyYW5zbGF0ZSgxMDAsIDBweCkgaXQgd29uJ3Qgd29yay5cblxuICAgICAgICAgIChzdGFydFZhbHVlICsgXCJcIikuY2hhckF0KDEpID09PSBcIj1cIiAmJiAoc3RhcnRWYWx1ZSA9IF9nZXQodGFyZ2V0LCBwKSk7IC8vIGNhbid0IHdvcmsgd2l0aCByZWxhdGl2ZSB2YWx1ZXNcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdGFydFZhbHVlID0gX2dldCh0YXJnZXQsIHApO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhcnROdW0gPSBwYXJzZUZsb2F0KHN0YXJ0VmFsdWUpO1xuICAgICAgICByZWxhdGl2ZSA9IHR5cGUgPT09IFwic3RyaW5nXCIgJiYgZW5kVmFsdWUuY2hhckF0KDEpID09PSBcIj1cIiAmJiBlbmRWYWx1ZS5zdWJzdHIoMCwgMik7XG4gICAgICAgIHJlbGF0aXZlICYmIChlbmRWYWx1ZSA9IGVuZFZhbHVlLnN1YnN0cigyKSk7XG4gICAgICAgIGVuZE51bSA9IHBhcnNlRmxvYXQoZW5kVmFsdWUpO1xuXG4gICAgICAgIGlmIChwIGluIF9wcm9wZXJ0eUFsaWFzZXMpIHtcbiAgICAgICAgICBpZiAocCA9PT0gXCJhdXRvQWxwaGFcIikge1xuICAgICAgICAgICAgLy9zcGVjaWFsIGNhc2Ugd2hlcmUgd2UgY29udHJvbCB0aGUgdmlzaWJpbGl0eSBhbG9uZyB3aXRoIG9wYWNpdHkuIFdlIHN0aWxsIGFsbG93IHRoZSBvcGFjaXR5IHZhbHVlIHRvIHBhc3MgdGhyb3VnaCBhbmQgZ2V0IHR3ZWVuZWQuXG4gICAgICAgICAgICBpZiAoc3RhcnROdW0gPT09IDEgJiYgX2dldCh0YXJnZXQsIFwidmlzaWJpbGl0eVwiKSA9PT0gXCJoaWRkZW5cIiAmJiBlbmROdW0pIHtcbiAgICAgICAgICAgICAgLy9pZiB2aXNpYmlsaXR5IGlzIGluaXRpYWxseSBzZXQgdG8gXCJoaWRkZW5cIiwgd2Ugc2hvdWxkIGludGVycHJldCB0aGF0IGFzIGludGVudCB0byBtYWtlIG9wYWNpdHkgMCAoYSBjb252ZW5pZW5jZSlcbiAgICAgICAgICAgICAgc3RhcnROdW0gPSAwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpbmxpbmVQcm9wcy5wdXNoKFwidmlzaWJpbGl0eVwiLCAwLCBzdHlsZS52aXNpYmlsaXR5KTtcblxuICAgICAgICAgICAgX2FkZE5vblR3ZWVuaW5nUFQodGhpcywgc3R5bGUsIFwidmlzaWJpbGl0eVwiLCBzdGFydE51bSA/IFwiaW5oZXJpdFwiIDogXCJoaWRkZW5cIiwgZW5kTnVtID8gXCJpbmhlcml0XCIgOiBcImhpZGRlblwiLCAhZW5kTnVtKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAocCAhPT0gXCJzY2FsZVwiICYmIHAgIT09IFwidHJhbnNmb3JtXCIpIHtcbiAgICAgICAgICAgIHAgPSBfcHJvcGVydHlBbGlhc2VzW3BdO1xuICAgICAgICAgICAgfnAuaW5kZXhPZihcIixcIikgJiYgKHAgPSBwLnNwbGl0KFwiLFwiKVswXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaXNUcmFuc2Zvcm1SZWxhdGVkID0gcCBpbiBfdHJhbnNmb3JtUHJvcHM7IC8vLS0tIFRSQU5TRk9STS1SRUxBVEVEIC0tLVxuXG4gICAgICAgIGlmIChpc1RyYW5zZm9ybVJlbGF0ZWQpIHtcbiAgICAgICAgICB0aGlzLnN0eWxlcy5zYXZlKHApO1xuXG4gICAgICAgICAgaWYgKCF0cmFuc2Zvcm1Qcm9wVHdlZW4pIHtcbiAgICAgICAgICAgIGNhY2hlID0gdGFyZ2V0Ll9nc2FwO1xuICAgICAgICAgICAgY2FjaGUucmVuZGVyVHJhbnNmb3JtICYmICF2YXJzLnBhcnNlVHJhbnNmb3JtIHx8IF9wYXJzZVRyYW5zZm9ybSh0YXJnZXQsIHZhcnMucGFyc2VUcmFuc2Zvcm0pOyAvLyBpZiwgZm9yIGV4YW1wbGUsIGdzYXAuc2V0KC4uLiB7dHJhbnNmb3JtOlwidHJhbnNsYXRlWCg1MHZ3KVwifSksIHRoZSBfZ2V0KCkgY2FsbCBkb2Vzbid0IHBhcnNlIHRoZSB0cmFuc2Zvcm0sIHRodXMgY2FjaGUucmVuZGVyVHJhbnNmb3JtIHdvbid0IGJlIHNldCB5ZXQgc28gZm9yY2UgdGhlIHBhcnNpbmcgb2YgdGhlIHRyYW5zZm9ybSBoZXJlLlxuXG4gICAgICAgICAgICBzbW9vdGggPSB2YXJzLnNtb290aE9yaWdpbiAhPT0gZmFsc2UgJiYgY2FjaGUuc21vb3RoO1xuICAgICAgICAgICAgdHJhbnNmb3JtUHJvcFR3ZWVuID0gdGhpcy5fcHQgPSBuZXcgUHJvcFR3ZWVuKHRoaXMuX3B0LCBzdHlsZSwgX3RyYW5zZm9ybVByb3AsIDAsIDEsIGNhY2hlLnJlbmRlclRyYW5zZm9ybSwgY2FjaGUsIDAsIC0xKTsgLy90aGUgZmlyc3QgdGltZSB0aHJvdWdoLCBjcmVhdGUgdGhlIHJlbmRlcmluZyBQcm9wVHdlZW4gc28gdGhhdCBpdCBydW5zIExBU1QgKGluIHRoZSBsaW5rZWQgbGlzdCwgd2Uga2VlcCBhZGRpbmcgdG8gdGhlIGJlZ2lubmluZylcblxuICAgICAgICAgICAgdHJhbnNmb3JtUHJvcFR3ZWVuLmRlcCA9IDE7IC8vZmxhZyBpdCBhcyBkZXBlbmRlbnQgc28gdGhhdCBpZiB0aGluZ3MgZ2V0IGtpbGxlZC9vdmVyd3JpdHRlbiBhbmQgdGhpcyBpcyB0aGUgb25seSBQcm9wVHdlZW4gbGVmdCwgd2UgY2FuIHNhZmVseSBraWxsIHRoZSB3aG9sZSB0d2Vlbi5cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAocCA9PT0gXCJzY2FsZVwiKSB7XG4gICAgICAgICAgICB0aGlzLl9wdCA9IG5ldyBQcm9wVHdlZW4odGhpcy5fcHQsIGNhY2hlLCBcInNjYWxlWVwiLCBjYWNoZS5zY2FsZVksIChyZWxhdGl2ZSA/IF9wYXJzZVJlbGF0aXZlKGNhY2hlLnNjYWxlWSwgcmVsYXRpdmUgKyBlbmROdW0pIDogZW5kTnVtKSAtIGNhY2hlLnNjYWxlWSB8fCAwLCBfcmVuZGVyQ1NTUHJvcCk7XG4gICAgICAgICAgICB0aGlzLl9wdC51ID0gMDtcbiAgICAgICAgICAgIHByb3BzLnB1c2goXCJzY2FsZVlcIiwgcCk7XG4gICAgICAgICAgICBwICs9IFwiWFwiO1xuICAgICAgICAgIH0gZWxzZSBpZiAocCA9PT0gXCJ0cmFuc2Zvcm1PcmlnaW5cIikge1xuICAgICAgICAgICAgaW5saW5lUHJvcHMucHVzaChfdHJhbnNmb3JtT3JpZ2luUHJvcCwgMCwgc3R5bGVbX3RyYW5zZm9ybU9yaWdpblByb3BdKTtcbiAgICAgICAgICAgIGVuZFZhbHVlID0gX2NvbnZlcnRLZXl3b3Jkc1RvUGVyY2VudGFnZXMoZW5kVmFsdWUpOyAvL2luIGNhc2Ugc29tZXRoaW5nIGxpa2UgXCJsZWZ0IHRvcFwiIG9yIFwiYm90dG9tIHJpZ2h0XCIgaXMgcGFzc2VkIGluLiBDb252ZXJ0IHRvIHBlcmNlbnRhZ2VzLlxuXG4gICAgICAgICAgICBpZiAoY2FjaGUuc3ZnKSB7XG4gICAgICAgICAgICAgIF9hcHBseVNWR09yaWdpbih0YXJnZXQsIGVuZFZhbHVlLCAwLCBzbW9vdGgsIDAsIHRoaXMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZW5kVW5pdCA9IHBhcnNlRmxvYXQoZW5kVmFsdWUuc3BsaXQoXCIgXCIpWzJdKSB8fCAwOyAvL2hhbmRsZSB0aGUgek9yaWdpbiBzZXBhcmF0ZWx5IVxuXG4gICAgICAgICAgICAgIGVuZFVuaXQgIT09IGNhY2hlLnpPcmlnaW4gJiYgX2FkZE5vblR3ZWVuaW5nUFQodGhpcywgY2FjaGUsIFwiek9yaWdpblwiLCBjYWNoZS56T3JpZ2luLCBlbmRVbml0KTtcblxuICAgICAgICAgICAgICBfYWRkTm9uVHdlZW5pbmdQVCh0aGlzLCBzdHlsZSwgcCwgX2ZpcnN0VHdvT25seShzdGFydFZhbHVlKSwgX2ZpcnN0VHdvT25seShlbmRWYWx1ZSkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHAgPT09IFwic3ZnT3JpZ2luXCIpIHtcbiAgICAgICAgICAgIF9hcHBseVNWR09yaWdpbih0YXJnZXQsIGVuZFZhbHVlLCAxLCBzbW9vdGgsIDAsIHRoaXMpO1xuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHAgaW4gX3JvdGF0aW9uYWxQcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICBfYWRkUm90YXRpb25hbFByb3BUd2Vlbih0aGlzLCBjYWNoZSwgcCwgc3RhcnROdW0sIHJlbGF0aXZlID8gX3BhcnNlUmVsYXRpdmUoc3RhcnROdW0sIHJlbGF0aXZlICsgZW5kVmFsdWUpIDogZW5kVmFsdWUpO1xuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHAgPT09IFwic21vb3RoT3JpZ2luXCIpIHtcbiAgICAgICAgICAgIF9hZGROb25Ud2VlbmluZ1BUKHRoaXMsIGNhY2hlLCBcInNtb290aFwiLCBjYWNoZS5zbW9vdGgsIGVuZFZhbHVlKTtcblxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfSBlbHNlIGlmIChwID09PSBcImZvcmNlM0RcIikge1xuICAgICAgICAgICAgY2FjaGVbcF0gPSBlbmRWYWx1ZTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH0gZWxzZSBpZiAocCA9PT0gXCJ0cmFuc2Zvcm1cIikge1xuICAgICAgICAgICAgX2FkZFJhd1RyYW5zZm9ybVBUcyh0aGlzLCBlbmRWYWx1ZSwgdGFyZ2V0KTtcblxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCEocCBpbiBzdHlsZSkpIHtcbiAgICAgICAgICBwID0gX2NoZWNrUHJvcFByZWZpeChwKSB8fCBwO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzVHJhbnNmb3JtUmVsYXRlZCB8fCAoZW5kTnVtIHx8IGVuZE51bSA9PT0gMCkgJiYgKHN0YXJ0TnVtIHx8IHN0YXJ0TnVtID09PSAwKSAmJiAhX2NvbXBsZXhFeHAudGVzdChlbmRWYWx1ZSkgJiYgcCBpbiBzdHlsZSkge1xuICAgICAgICAgIHN0YXJ0VW5pdCA9IChzdGFydFZhbHVlICsgXCJcIikuc3Vic3RyKChzdGFydE51bSArIFwiXCIpLmxlbmd0aCk7XG4gICAgICAgICAgZW5kTnVtIHx8IChlbmROdW0gPSAwKTsgLy8gcHJvdGVjdCBhZ2FpbnN0IE5hTlxuXG4gICAgICAgICAgZW5kVW5pdCA9IGdldFVuaXQoZW5kVmFsdWUpIHx8IChwIGluIF9jb25maWcudW5pdHMgPyBfY29uZmlnLnVuaXRzW3BdIDogc3RhcnRVbml0KTtcbiAgICAgICAgICBzdGFydFVuaXQgIT09IGVuZFVuaXQgJiYgKHN0YXJ0TnVtID0gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBwLCBzdGFydFZhbHVlLCBlbmRVbml0KSk7XG4gICAgICAgICAgdGhpcy5fcHQgPSBuZXcgUHJvcFR3ZWVuKHRoaXMuX3B0LCBpc1RyYW5zZm9ybVJlbGF0ZWQgPyBjYWNoZSA6IHN0eWxlLCBwLCBzdGFydE51bSwgKHJlbGF0aXZlID8gX3BhcnNlUmVsYXRpdmUoc3RhcnROdW0sIHJlbGF0aXZlICsgZW5kTnVtKSA6IGVuZE51bSkgLSBzdGFydE51bSwgIWlzVHJhbnNmb3JtUmVsYXRlZCAmJiAoZW5kVW5pdCA9PT0gXCJweFwiIHx8IHAgPT09IFwiekluZGV4XCIpICYmIHZhcnMuYXV0b1JvdW5kICE9PSBmYWxzZSA/IF9yZW5kZXJSb3VuZGVkQ1NTUHJvcCA6IF9yZW5kZXJDU1NQcm9wKTtcbiAgICAgICAgICB0aGlzLl9wdC51ID0gZW5kVW5pdCB8fCAwO1xuXG4gICAgICAgICAgaWYgKHN0YXJ0VW5pdCAhPT0gZW5kVW5pdCAmJiBlbmRVbml0ICE9PSBcIiVcIikge1xuICAgICAgICAgICAgLy93aGVuIHRoZSB0d2VlbiBnb2VzIGFsbCB0aGUgd2F5IGJhY2sgdG8gdGhlIGJlZ2lubmluZywgd2UgbmVlZCB0byByZXZlcnQgaXQgdG8gdGhlIE9MRC9PUklHSU5BTCB2YWx1ZSAod2l0aCB0aG9zZSB1bml0cykuIFdlIHJlY29yZCB0aGF0IGFzIGEgXCJiXCIgKGJlZ2lubmluZykgcHJvcGVydHkgYW5kIHBvaW50IHRvIGEgcmVuZGVyIG1ldGhvZCB0aGF0IGhhbmRsZXMgdGhhdC4gKHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbilcbiAgICAgICAgICAgIHRoaXMuX3B0LmIgPSBzdGFydFZhbHVlO1xuICAgICAgICAgICAgdGhpcy5fcHQuciA9IF9yZW5kZXJDU1NQcm9wV2l0aEJlZ2lubmluZztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoIShwIGluIHN0eWxlKSkge1xuICAgICAgICAgIGlmIChwIGluIHRhcmdldCkge1xuICAgICAgICAgICAgLy9tYXliZSBpdCdzIG5vdCBhIHN0eWxlIC0gaXQgY291bGQgYmUgYSBwcm9wZXJ0eSBhZGRlZCBkaXJlY3RseSB0byBhbiBlbGVtZW50IGluIHdoaWNoIGNhc2Ugd2UnbGwgdHJ5IHRvIGFuaW1hdGUgdGhhdC5cbiAgICAgICAgICAgIHRoaXMuYWRkKHRhcmdldCwgcCwgc3RhcnRWYWx1ZSB8fCB0YXJnZXRbcF0sIHJlbGF0aXZlID8gcmVsYXRpdmUgKyBlbmRWYWx1ZSA6IGVuZFZhbHVlLCBpbmRleCwgdGFyZ2V0cyk7XG4gICAgICAgICAgfSBlbHNlIGlmIChwICE9PSBcInBhcnNlVHJhbnNmb3JtXCIpIHtcbiAgICAgICAgICAgIF9taXNzaW5nUGx1Z2luKHAsIGVuZFZhbHVlKTtcblxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90d2VlbkNvbXBsZXhDU1NTdHJpbmcuY2FsbCh0aGlzLCB0YXJnZXQsIHAsIHN0YXJ0VmFsdWUsIHJlbGF0aXZlID8gcmVsYXRpdmUgKyBlbmRWYWx1ZSA6IGVuZFZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlzVHJhbnNmb3JtUmVsYXRlZCB8fCAocCBpbiBzdHlsZSA/IGlubGluZVByb3BzLnB1c2gocCwgMCwgc3R5bGVbcF0pIDogaW5saW5lUHJvcHMucHVzaChwLCAxLCBzdGFydFZhbHVlIHx8IHRhcmdldFtwXSkpO1xuICAgICAgICBwcm9wcy5wdXNoKHApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGhhc1ByaW9yaXR5ICYmIF9zb3J0UHJvcFR3ZWVuc0J5UHJpb3JpdHkodGhpcyk7XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKHJhdGlvLCBkYXRhKSB7XG4gICAgaWYgKGRhdGEudHdlZW4uX3RpbWUgfHwgIV9yZXZlcnRpbmcoKSkge1xuICAgICAgdmFyIHB0ID0gZGF0YS5fcHQ7XG5cbiAgICAgIHdoaWxlIChwdCkge1xuICAgICAgICBwdC5yKHJhdGlvLCBwdC5kKTtcbiAgICAgICAgcHQgPSBwdC5fbmV4dDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZGF0YS5zdHlsZXMucmV2ZXJ0KCk7XG4gICAgfVxuICB9LFxuICBnZXQ6IF9nZXQsXG4gIGFsaWFzZXM6IF9wcm9wZXJ0eUFsaWFzZXMsXG4gIGdldFNldHRlcjogZnVuY3Rpb24gZ2V0U2V0dGVyKHRhcmdldCwgcHJvcGVydHksIHBsdWdpbikge1xuICAgIC8vcmV0dXJucyBhIHNldHRlciBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgdGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUgYW5kIGFwcGxpZXMgaXQgYWNjb3JkaW5nbHkuIFJlbWVtYmVyLCBwcm9wZXJ0aWVzIGxpa2UgXCJ4XCIgYXJlbid0IGFzIHNpbXBsZSBhcyB0YXJnZXQuc3R5bGUucHJvcGVydHkgPSB2YWx1ZSBiZWNhdXNlIHRoZXkndmUgZ290IHRvIGJlIGFwcGxpZWQgdG8gYSBwcm94eSBvYmplY3QgYW5kIHRoZW4gbWVyZ2VkIGludG8gYSB0cmFuc2Zvcm0gc3RyaW5nIGluIGEgcmVuZGVyZXIuXG4gICAgdmFyIHAgPSBfcHJvcGVydHlBbGlhc2VzW3Byb3BlcnR5XTtcbiAgICBwICYmIHAuaW5kZXhPZihcIixcIikgPCAwICYmIChwcm9wZXJ0eSA9IHApO1xuICAgIHJldHVybiBwcm9wZXJ0eSBpbiBfdHJhbnNmb3JtUHJvcHMgJiYgcHJvcGVydHkgIT09IF90cmFuc2Zvcm1PcmlnaW5Qcm9wICYmICh0YXJnZXQuX2dzYXAueCB8fCBfZ2V0KHRhcmdldCwgXCJ4XCIpKSA/IHBsdWdpbiAmJiBfcmVjZW50U2V0dGVyUGx1Z2luID09PSBwbHVnaW4gPyBwcm9wZXJ0eSA9PT0gXCJzY2FsZVwiID8gX3NldHRlclNjYWxlIDogX3NldHRlclRyYW5zZm9ybSA6IChfcmVjZW50U2V0dGVyUGx1Z2luID0gcGx1Z2luIHx8IHt9KSAmJiAocHJvcGVydHkgPT09IFwic2NhbGVcIiA/IF9zZXR0ZXJTY2FsZVdpdGhSZW5kZXIgOiBfc2V0dGVyVHJhbnNmb3JtV2l0aFJlbmRlcikgOiB0YXJnZXQuc3R5bGUgJiYgIV9pc1VuZGVmaW5lZCh0YXJnZXQuc3R5bGVbcHJvcGVydHldKSA/IF9zZXR0ZXJDU1NTdHlsZSA6IH5wcm9wZXJ0eS5pbmRleE9mKFwiLVwiKSA/IF9zZXR0ZXJDU1NQcm9wIDogX2dldFNldHRlcih0YXJnZXQsIHByb3BlcnR5KTtcbiAgfSxcbiAgY29yZToge1xuICAgIF9yZW1vdmVQcm9wZXJ0eTogX3JlbW92ZVByb3BlcnR5LFxuICAgIF9nZXRNYXRyaXg6IF9nZXRNYXRyaXhcbiAgfVxufTtcbmdzYXAudXRpbHMuY2hlY2tQcmVmaXggPSBfY2hlY2tQcm9wUHJlZml4O1xuZ3NhcC5jb3JlLmdldFN0eWxlU2F2ZXIgPSBfZ2V0U3R5bGVTYXZlcjtcblxuKGZ1bmN0aW9uIChwb3NpdGlvbkFuZFNjYWxlLCByb3RhdGlvbiwgb3RoZXJzLCBhbGlhc2VzKSB7XG4gIHZhciBhbGwgPSBfZm9yRWFjaE5hbWUocG9zaXRpb25BbmRTY2FsZSArIFwiLFwiICsgcm90YXRpb24gKyBcIixcIiArIG90aGVycywgZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBfdHJhbnNmb3JtUHJvcHNbbmFtZV0gPSAxO1xuICB9KTtcblxuICBfZm9yRWFjaE5hbWUocm90YXRpb24sIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgX2NvbmZpZy51bml0c1tuYW1lXSA9IFwiZGVnXCI7XG4gICAgX3JvdGF0aW9uYWxQcm9wZXJ0aWVzW25hbWVdID0gMTtcbiAgfSk7XG5cbiAgX3Byb3BlcnR5QWxpYXNlc1thbGxbMTNdXSA9IHBvc2l0aW9uQW5kU2NhbGUgKyBcIixcIiArIHJvdGF0aW9uO1xuXG4gIF9mb3JFYWNoTmFtZShhbGlhc2VzLCBmdW5jdGlvbiAobmFtZSkge1xuICAgIHZhciBzcGxpdCA9IG5hbWUuc3BsaXQoXCI6XCIpO1xuICAgIF9wcm9wZXJ0eUFsaWFzZXNbc3BsaXRbMV1dID0gYWxsW3NwbGl0WzBdXTtcbiAgfSk7XG59KShcIngseSx6LHNjYWxlLHNjYWxlWCxzY2FsZVkseFBlcmNlbnQseVBlcmNlbnRcIiwgXCJyb3RhdGlvbixyb3RhdGlvblgscm90YXRpb25ZLHNrZXdYLHNrZXdZXCIsIFwidHJhbnNmb3JtLHRyYW5zZm9ybU9yaWdpbixzdmdPcmlnaW4sZm9yY2UzRCxzbW9vdGhPcmlnaW4sdHJhbnNmb3JtUGVyc3BlY3RpdmVcIiwgXCIwOnRyYW5zbGF0ZVgsMTp0cmFuc2xhdGVZLDI6dHJhbnNsYXRlWiw4OnJvdGF0ZSw4OnJvdGF0aW9uWiw4OnJvdGF0ZVosOTpyb3RhdGVYLDEwOnJvdGF0ZVlcIik7XG5cbl9mb3JFYWNoTmFtZShcIngseSx6LHRvcCxyaWdodCxib3R0b20sbGVmdCx3aWR0aCxoZWlnaHQsZm9udFNpemUscGFkZGluZyxtYXJnaW4scGVyc3BlY3RpdmVcIiwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgX2NvbmZpZy51bml0c1tuYW1lXSA9IFwicHhcIjtcbn0pO1xuXG5nc2FwLnJlZ2lzdGVyUGx1Z2luKENTU1BsdWdpbik7XG5leHBvcnQgeyBDU1NQbHVnaW4gYXMgZGVmYXVsdCwgX2dldEJCb3gsIF9jcmVhdGVFbGVtZW50LCBfY2hlY2tQcm9wUHJlZml4IGFzIGNoZWNrUHJlZml4IH07IiwiZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG4vKiFcbiAqIE9ic2VydmVyIDMuMTIuNVxuICogaHR0cHM6Ly9nc2FwLmNvbVxuICpcbiAqIEBsaWNlbnNlIENvcHlyaWdodCAyMDA4LTIwMjQsIEdyZWVuU29jay4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFN1YmplY3QgdG8gdGhlIHRlcm1zIGF0IGh0dHBzOi8vZ3NhcC5jb20vc3RhbmRhcmQtbGljZW5zZSBvciBmb3JcbiAqIENsdWIgR1NBUCBtZW1iZXJzLCB0aGUgYWdyZWVtZW50IGlzc3VlZCB3aXRoIHRoYXQgbWVtYmVyc2hpcC5cbiAqIEBhdXRob3I6IEphY2sgRG95bGUsIGphY2tAZ3JlZW5zb2NrLmNvbVxuKi9cblxuLyogZXNsaW50LWRpc2FibGUgKi9cbnZhciBnc2FwLFxuICAgIF9jb3JlSW5pdHRlZCxcbiAgICBfY2xhbXAsXG4gICAgX3dpbixcbiAgICBfZG9jLFxuICAgIF9kb2NFbCxcbiAgICBfYm9keSxcbiAgICBfaXNUb3VjaCxcbiAgICBfcG9pbnRlclR5cGUsXG4gICAgU2Nyb2xsVHJpZ2dlcixcbiAgICBfcm9vdCxcbiAgICBfbm9ybWFsaXplcixcbiAgICBfZXZlbnRUeXBlcyxcbiAgICBfY29udGV4dCxcbiAgICBfZ2V0R1NBUCA9IGZ1bmN0aW9uIF9nZXRHU0FQKCkge1xuICByZXR1cm4gZ3NhcCB8fCB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIChnc2FwID0gd2luZG93LmdzYXApICYmIGdzYXAucmVnaXN0ZXJQbHVnaW4gJiYgZ3NhcDtcbn0sXG4gICAgX3N0YXJ0dXAgPSAxLFxuICAgIF9vYnNlcnZlcnMgPSBbXSxcbiAgICBfc2Nyb2xsZXJzID0gW10sXG4gICAgX3Byb3hpZXMgPSBbXSxcbiAgICBfZ2V0VGltZSA9IERhdGUubm93LFxuICAgIF9icmlkZ2UgPSBmdW5jdGlvbiBfYnJpZGdlKG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZTtcbn0sXG4gICAgX2ludGVncmF0ZSA9IGZ1bmN0aW9uIF9pbnRlZ3JhdGUoKSB7XG4gIHZhciBjb3JlID0gU2Nyb2xsVHJpZ2dlci5jb3JlLFxuICAgICAgZGF0YSA9IGNvcmUuYnJpZGdlIHx8IHt9LFxuICAgICAgc2Nyb2xsZXJzID0gY29yZS5fc2Nyb2xsZXJzLFxuICAgICAgcHJveGllcyA9IGNvcmUuX3Byb3hpZXM7XG4gIHNjcm9sbGVycy5wdXNoLmFwcGx5KHNjcm9sbGVycywgX3Njcm9sbGVycyk7XG4gIHByb3hpZXMucHVzaC5hcHBseShwcm94aWVzLCBfcHJveGllcyk7XG4gIF9zY3JvbGxlcnMgPSBzY3JvbGxlcnM7XG4gIF9wcm94aWVzID0gcHJveGllcztcblxuICBfYnJpZGdlID0gZnVuY3Rpb24gX2JyaWRnZShuYW1lLCB2YWx1ZSkge1xuICAgIHJldHVybiBkYXRhW25hbWVdKHZhbHVlKTtcbiAgfTtcbn0sXG4gICAgX2dldFByb3h5UHJvcCA9IGZ1bmN0aW9uIF9nZXRQcm94eVByb3AoZWxlbWVudCwgcHJvcGVydHkpIHtcbiAgcmV0dXJuIH5fcHJveGllcy5pbmRleE9mKGVsZW1lbnQpICYmIF9wcm94aWVzW19wcm94aWVzLmluZGV4T2YoZWxlbWVudCkgKyAxXVtwcm9wZXJ0eV07XG59LFxuICAgIF9pc1ZpZXdwb3J0ID0gZnVuY3Rpb24gX2lzVmlld3BvcnQoZWwpIHtcbiAgcmV0dXJuICEhfl9yb290LmluZGV4T2YoZWwpO1xufSxcbiAgICBfYWRkTGlzdGVuZXIgPSBmdW5jdGlvbiBfYWRkTGlzdGVuZXIoZWxlbWVudCwgdHlwZSwgZnVuYywgcGFzc2l2ZSwgY2FwdHVyZSkge1xuICByZXR1cm4gZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGZ1bmMsIHtcbiAgICBwYXNzaXZlOiBwYXNzaXZlICE9PSBmYWxzZSxcbiAgICBjYXB0dXJlOiAhIWNhcHR1cmVcbiAgfSk7XG59LFxuICAgIF9yZW1vdmVMaXN0ZW5lciA9IGZ1bmN0aW9uIF9yZW1vdmVMaXN0ZW5lcihlbGVtZW50LCB0eXBlLCBmdW5jLCBjYXB0dXJlKSB7XG4gIHJldHVybiBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgZnVuYywgISFjYXB0dXJlKTtcbn0sXG4gICAgX3Njcm9sbExlZnQgPSBcInNjcm9sbExlZnRcIixcbiAgICBfc2Nyb2xsVG9wID0gXCJzY3JvbGxUb3BcIixcbiAgICBfb25TY3JvbGwgPSBmdW5jdGlvbiBfb25TY3JvbGwoKSB7XG4gIHJldHVybiBfbm9ybWFsaXplciAmJiBfbm9ybWFsaXplci5pc1ByZXNzZWQgfHwgX3Njcm9sbGVycy5jYWNoZSsrO1xufSxcbiAgICBfc2Nyb2xsQ2FjaGVGdW5jID0gZnVuY3Rpb24gX3Njcm9sbENhY2hlRnVuYyhmLCBkb05vdENhY2hlKSB7XG4gIHZhciBjYWNoaW5nRnVuYyA9IGZ1bmN0aW9uIGNhY2hpbmdGdW5jKHZhbHVlKSB7XG4gICAgLy8gc2luY2UgcmVhZGluZyB0aGUgc2Nyb2xsVG9wL3Njcm9sbExlZnQvcGFnZU9mZnNldFkvcGFnZU9mZnNldFggY2FuIHRyaWdnZXIgYSBsYXlvdXQsIHRoaXMgZnVuY3Rpb24gYWxsb3dzIHVzIHRvIGNhY2hlIHRoZSB2YWx1ZSBzbyBpdCBvbmx5IGdldHMgcmVhZCBmcmVzaCBhZnRlciBhIFwic2Nyb2xsXCIgZXZlbnQgZmlyZXMgKG9yIHdoaWxlIHdlJ3JlIHJlZnJlc2hpbmcgYmVjYXVzZSB0aGF0IGNhbiBsZW5ndGhlbiB0aGUgcGFnZSBhbmQgYWx0ZXIgdGhlIHNjcm9sbCBwb3NpdGlvbikuIHdoZW4gXCJzb2Z0XCIgaXMgdHJ1ZSwgdGhhdCBtZWFucyBkb24ndCBhY3R1YWxseSBzZXQgdGhlIHNjcm9sbCwgYnV0IGNhY2hlIHRoZSBuZXcgdmFsdWUgaW5zdGVhZCAodXNlZnVsIGluIFNjcm9sbFNtb290aGVyKVxuICAgIGlmICh2YWx1ZSB8fCB2YWx1ZSA9PT0gMCkge1xuICAgICAgX3N0YXJ0dXAgJiYgKF93aW4uaGlzdG9yeS5zY3JvbGxSZXN0b3JhdGlvbiA9IFwibWFudWFsXCIpOyAvLyBvdGhlcndpc2UgdGhlIG5ldyBwb3NpdGlvbiB3aWxsIGdldCBvdmVyd3JpdHRlbiBieSB0aGUgYnJvd3NlciBvbmxvYWQuXG5cbiAgICAgIHZhciBpc05vcm1hbGl6aW5nID0gX25vcm1hbGl6ZXIgJiYgX25vcm1hbGl6ZXIuaXNQcmVzc2VkO1xuICAgICAgdmFsdWUgPSBjYWNoaW5nRnVuYy52ID0gTWF0aC5yb3VuZCh2YWx1ZSkgfHwgKF9ub3JtYWxpemVyICYmIF9ub3JtYWxpemVyLmlPUyA/IDEgOiAwKTsgLy9UT0RPOiBpT1MgQnVnOiBpZiB5b3UgYWxsb3cgaXQgdG8gZ28gdG8gMCwgU2FmYXJpIGNhbiBzdGFydCB0byByZXBvcnQgc3VwZXIgc3RyYW5nZSAod2lsZGx5IGluYWNjdXJhdGUpIHRvdWNoIHBvc2l0aW9ucyFcblxuICAgICAgZih2YWx1ZSk7XG4gICAgICBjYWNoaW5nRnVuYy5jYWNoZUlEID0gX3Njcm9sbGVycy5jYWNoZTtcbiAgICAgIGlzTm9ybWFsaXppbmcgJiYgX2JyaWRnZShcInNzXCIsIHZhbHVlKTsgLy8gc2V0IHNjcm9sbCAobm90aWZ5IFNjcm9sbFRyaWdnZXIgc28gaXQgY2FuIGRpc3BhdGNoIGEgXCJzY3JvbGxTdGFydFwiIGV2ZW50IGlmIG5lY2Vzc2FyeVxuICAgIH0gZWxzZSBpZiAoZG9Ob3RDYWNoZSB8fCBfc2Nyb2xsZXJzLmNhY2hlICE9PSBjYWNoaW5nRnVuYy5jYWNoZUlEIHx8IF9icmlkZ2UoXCJyZWZcIikpIHtcbiAgICAgIGNhY2hpbmdGdW5jLmNhY2hlSUQgPSBfc2Nyb2xsZXJzLmNhY2hlO1xuICAgICAgY2FjaGluZ0Z1bmMudiA9IGYoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2FjaGluZ0Z1bmMudiArIGNhY2hpbmdGdW5jLm9mZnNldDtcbiAgfTtcblxuICBjYWNoaW5nRnVuYy5vZmZzZXQgPSAwO1xuICByZXR1cm4gZiAmJiBjYWNoaW5nRnVuYztcbn0sXG4gICAgX2hvcml6b250YWwgPSB7XG4gIHM6IF9zY3JvbGxMZWZ0LFxuICBwOiBcImxlZnRcIixcbiAgcDI6IFwiTGVmdFwiLFxuICBvczogXCJyaWdodFwiLFxuICBvczI6IFwiUmlnaHRcIixcbiAgZDogXCJ3aWR0aFwiLFxuICBkMjogXCJXaWR0aFwiLFxuICBhOiBcInhcIixcbiAgc2M6IF9zY3JvbGxDYWNoZUZ1bmMoZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyBfd2luLnNjcm9sbFRvKHZhbHVlLCBfdmVydGljYWwuc2MoKSkgOiBfd2luLnBhZ2VYT2Zmc2V0IHx8IF9kb2NbX3Njcm9sbExlZnRdIHx8IF9kb2NFbFtfc2Nyb2xsTGVmdF0gfHwgX2JvZHlbX3Njcm9sbExlZnRdIHx8IDA7XG4gIH0pXG59LFxuICAgIF92ZXJ0aWNhbCA9IHtcbiAgczogX3Njcm9sbFRvcCxcbiAgcDogXCJ0b3BcIixcbiAgcDI6IFwiVG9wXCIsXG4gIG9zOiBcImJvdHRvbVwiLFxuICBvczI6IFwiQm90dG9tXCIsXG4gIGQ6IFwiaGVpZ2h0XCIsXG4gIGQyOiBcIkhlaWdodFwiLFxuICBhOiBcInlcIixcbiAgb3A6IF9ob3Jpem9udGFsLFxuICBzYzogX3Njcm9sbENhY2hlRnVuYyhmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IF93aW4uc2Nyb2xsVG8oX2hvcml6b250YWwuc2MoKSwgdmFsdWUpIDogX3dpbi5wYWdlWU9mZnNldCB8fCBfZG9jW19zY3JvbGxUb3BdIHx8IF9kb2NFbFtfc2Nyb2xsVG9wXSB8fCBfYm9keVtfc2Nyb2xsVG9wXSB8fCAwO1xuICB9KVxufSxcbiAgICBfZ2V0VGFyZ2V0ID0gZnVuY3Rpb24gX2dldFRhcmdldCh0LCBzZWxmKSB7XG4gIHJldHVybiAoc2VsZiAmJiBzZWxmLl9jdHggJiYgc2VsZi5fY3R4LnNlbGVjdG9yIHx8IGdzYXAudXRpbHMudG9BcnJheSkodClbMF0gfHwgKHR5cGVvZiB0ID09PSBcInN0cmluZ1wiICYmIGdzYXAuY29uZmlnKCkubnVsbFRhcmdldFdhcm4gIT09IGZhbHNlID8gY29uc29sZS53YXJuKFwiRWxlbWVudCBub3QgZm91bmQ6XCIsIHQpIDogbnVsbCk7XG59LFxuICAgIF9nZXRTY3JvbGxGdW5jID0gZnVuY3Rpb24gX2dldFNjcm9sbEZ1bmMoZWxlbWVudCwgX3JlZikge1xuICB2YXIgcyA9IF9yZWYucyxcbiAgICAgIHNjID0gX3JlZi5zYztcbiAgLy8gd2Ugc3RvcmUgdGhlIHNjcm9sbGVyIGZ1bmN0aW9ucyBpbiBhbiBhbHRlcm5hdGluZyBzZXF1ZW5jZWQgQXJyYXkgbGlrZSBbZWxlbWVudCwgdmVydGljYWxTY3JvbGxGdW5jLCBob3Jpem9udGFsU2Nyb2xsRnVuYywgLi4uXSBzbyB0aGF0IHdlIGNhbiBtaW5pbWl6ZSBtZW1vcnksIG1heGltaXplIHBlcmZvcm1hbmNlLCBhbmQgd2UgYWxzbyByZWNvcmQgdGhlIGxhc3QgcG9zaXRpb24gYXMgYSBcIi5yZWNcIiBwcm9wZXJ0eSBpbiBvcmRlciB0byByZXZlcnQgdG8gdGhhdCBhZnRlciByZWZyZXNoaW5nIHRvIGVuc3VyZSB0aGluZ3MgZG9uJ3Qgc2hpZnQgYXJvdW5kLlxuICBfaXNWaWV3cG9ydChlbGVtZW50KSAmJiAoZWxlbWVudCA9IF9kb2Muc2Nyb2xsaW5nRWxlbWVudCB8fCBfZG9jRWwpO1xuXG4gIHZhciBpID0gX3Njcm9sbGVycy5pbmRleE9mKGVsZW1lbnQpLFxuICAgICAgb2Zmc2V0ID0gc2MgPT09IF92ZXJ0aWNhbC5zYyA/IDEgOiAyO1xuXG4gICF+aSAmJiAoaSA9IF9zY3JvbGxlcnMucHVzaChlbGVtZW50KSAtIDEpO1xuICBfc2Nyb2xsZXJzW2kgKyBvZmZzZXRdIHx8IF9hZGRMaXN0ZW5lcihlbGVtZW50LCBcInNjcm9sbFwiLCBfb25TY3JvbGwpOyAvLyBjbGVhciB0aGUgY2FjaGUgd2hlbiBhIHNjcm9sbCBvY2N1cnNcblxuICB2YXIgcHJldiA9IF9zY3JvbGxlcnNbaSArIG9mZnNldF0sXG4gICAgICBmdW5jID0gcHJldiB8fCAoX3Njcm9sbGVyc1tpICsgb2Zmc2V0XSA9IF9zY3JvbGxDYWNoZUZ1bmMoX2dldFByb3h5UHJvcChlbGVtZW50LCBzKSwgdHJ1ZSkgfHwgKF9pc1ZpZXdwb3J0KGVsZW1lbnQpID8gc2MgOiBfc2Nyb2xsQ2FjaGVGdW5jKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gZWxlbWVudFtzXSA9IHZhbHVlIDogZWxlbWVudFtzXTtcbiAgfSkpKTtcbiAgZnVuYy50YXJnZXQgPSBlbGVtZW50O1xuICBwcmV2IHx8IChmdW5jLnNtb290aCA9IGdzYXAuZ2V0UHJvcGVydHkoZWxlbWVudCwgXCJzY3JvbGxCZWhhdmlvclwiKSA9PT0gXCJzbW9vdGhcIik7IC8vIG9ubHkgc2V0IGl0IHRoZSBmaXJzdCB0aW1lIChkb24ndCByZXNldCBldmVyeSB0aW1lIGEgc2Nyb2xsRnVuYyBpcyByZXF1ZXN0ZWQgYmVjYXVzZSBwZXJoYXBzIGl0IGhhcHBlbnMgZHVyaW5nIGEgcmVmcmVzaCgpIHdoZW4gaXQncyBkaXNhYmxlZCBpbiBTY3JvbGxUcmlnZ2VyLlxuXG4gIHJldHVybiBmdW5jO1xufSxcbiAgICBfZ2V0VmVsb2NpdHlQcm9wID0gZnVuY3Rpb24gX2dldFZlbG9jaXR5UHJvcCh2YWx1ZSwgbWluVGltZVJlZnJlc2gsIHVzZURlbHRhKSB7XG4gIHZhciB2MSA9IHZhbHVlLFxuICAgICAgdjIgPSB2YWx1ZSxcbiAgICAgIHQxID0gX2dldFRpbWUoKSxcbiAgICAgIHQyID0gdDEsXG4gICAgICBtaW4gPSBtaW5UaW1lUmVmcmVzaCB8fCA1MCxcbiAgICAgIGRyb3BUb1plcm9UaW1lID0gTWF0aC5tYXgoNTAwLCBtaW4gKiAzKSxcbiAgICAgIHVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSh2YWx1ZSwgZm9yY2UpIHtcbiAgICB2YXIgdCA9IF9nZXRUaW1lKCk7XG5cbiAgICBpZiAoZm9yY2UgfHwgdCAtIHQxID4gbWluKSB7XG4gICAgICB2MiA9IHYxO1xuICAgICAgdjEgPSB2YWx1ZTtcbiAgICAgIHQyID0gdDE7XG4gICAgICB0MSA9IHQ7XG4gICAgfSBlbHNlIGlmICh1c2VEZWx0YSkge1xuICAgICAgdjEgKz0gdmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIG5vdCB0b3RhbGx5IG5lY2Vzc2FyeSwgYnV0IG1ha2VzIGl0IGEgYml0IG1vcmUgYWNjdXJhdGUgYnkgYWRqdXN0aW5nIHRoZSB2MSB2YWx1ZSBhY2NvcmRpbmcgdG8gdGhlIG5ldyBzbG9wZS4gVGhpcyB3YXkgd2UncmUgbm90IGp1c3QgaWdub3JpbmcgdGhlIGluY29taW5nIGRhdGEuIFJlbW92aW5nIGZvciBub3cgYmVjYXVzZSBpdCBkb2Vzbid0IHNlZW0gdG8gbWFrZSBtdWNoIHByYWN0aWNhbCBkaWZmZXJlbmNlIGFuZCBpdCdzIHByb2JhYmx5IG5vdCB3b3J0aCB0aGUga2IuXG4gICAgICB2MSA9IHYyICsgKHZhbHVlIC0gdjIpIC8gKHQgLSB0MikgKiAodDEgLSB0Mik7XG4gICAgfVxuICB9LFxuICAgICAgcmVzZXQgPSBmdW5jdGlvbiByZXNldCgpIHtcbiAgICB2MiA9IHYxID0gdXNlRGVsdGEgPyAwIDogdjE7XG4gICAgdDIgPSB0MSA9IDA7XG4gIH0sXG4gICAgICBnZXRWZWxvY2l0eSA9IGZ1bmN0aW9uIGdldFZlbG9jaXR5KGxhdGVzdFZhbHVlKSB7XG4gICAgdmFyIHRPbGQgPSB0MixcbiAgICAgICAgdk9sZCA9IHYyLFxuICAgICAgICB0ID0gX2dldFRpbWUoKTtcblxuICAgIChsYXRlc3RWYWx1ZSB8fCBsYXRlc3RWYWx1ZSA9PT0gMCkgJiYgbGF0ZXN0VmFsdWUgIT09IHYxICYmIHVwZGF0ZShsYXRlc3RWYWx1ZSk7XG4gICAgcmV0dXJuIHQxID09PSB0MiB8fCB0IC0gdDIgPiBkcm9wVG9aZXJvVGltZSA/IDAgOiAodjEgKyAodXNlRGVsdGEgPyB2T2xkIDogLXZPbGQpKSAvICgodXNlRGVsdGEgPyB0IDogdDEpIC0gdE9sZCkgKiAxMDAwO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiB1cGRhdGUsXG4gICAgcmVzZXQ6IHJlc2V0LFxuICAgIGdldFZlbG9jaXR5OiBnZXRWZWxvY2l0eVxuICB9O1xufSxcbiAgICBfZ2V0RXZlbnQgPSBmdW5jdGlvbiBfZ2V0RXZlbnQoZSwgcHJldmVudERlZmF1bHQpIHtcbiAgcHJldmVudERlZmF1bHQgJiYgIWUuX2dzYXBBbGxvdyAmJiBlLnByZXZlbnREZWZhdWx0KCk7XG4gIHJldHVybiBlLmNoYW5nZWRUb3VjaGVzID8gZS5jaGFuZ2VkVG91Y2hlc1swXSA6IGU7XG59LFxuICAgIF9nZXRBYnNvbHV0ZU1heCA9IGZ1bmN0aW9uIF9nZXRBYnNvbHV0ZU1heChhKSB7XG4gIHZhciBtYXggPSBNYXRoLm1heC5hcHBseShNYXRoLCBhKSxcbiAgICAgIG1pbiA9IE1hdGgubWluLmFwcGx5KE1hdGgsIGEpO1xuICByZXR1cm4gTWF0aC5hYnMobWF4KSA+PSBNYXRoLmFicyhtaW4pID8gbWF4IDogbWluO1xufSxcbiAgICBfc2V0U2Nyb2xsVHJpZ2dlciA9IGZ1bmN0aW9uIF9zZXRTY3JvbGxUcmlnZ2VyKCkge1xuICBTY3JvbGxUcmlnZ2VyID0gZ3NhcC5jb3JlLmdsb2JhbHMoKS5TY3JvbGxUcmlnZ2VyO1xuICBTY3JvbGxUcmlnZ2VyICYmIFNjcm9sbFRyaWdnZXIuY29yZSAmJiBfaW50ZWdyYXRlKCk7XG59LFxuICAgIF9pbml0Q29yZSA9IGZ1bmN0aW9uIF9pbml0Q29yZShjb3JlKSB7XG4gIGdzYXAgPSBjb3JlIHx8IF9nZXRHU0FQKCk7XG5cbiAgaWYgKCFfY29yZUluaXR0ZWQgJiYgZ3NhcCAmJiB0eXBlb2YgZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnQuYm9keSkge1xuICAgIF93aW4gPSB3aW5kb3c7XG4gICAgX2RvYyA9IGRvY3VtZW50O1xuICAgIF9kb2NFbCA9IF9kb2MuZG9jdW1lbnRFbGVtZW50O1xuICAgIF9ib2R5ID0gX2RvYy5ib2R5O1xuICAgIF9yb290ID0gW193aW4sIF9kb2MsIF9kb2NFbCwgX2JvZHldO1xuICAgIF9jbGFtcCA9IGdzYXAudXRpbHMuY2xhbXA7XG5cbiAgICBfY29udGV4dCA9IGdzYXAuY29yZS5jb250ZXh0IHx8IGZ1bmN0aW9uICgpIHt9O1xuXG4gICAgX3BvaW50ZXJUeXBlID0gXCJvbnBvaW50ZXJlbnRlclwiIGluIF9ib2R5ID8gXCJwb2ludGVyXCIgOiBcIm1vdXNlXCI7IC8vIGlzVG91Y2ggaXMgMCBpZiBubyB0b3VjaCwgMSBpZiBPTkxZIHRvdWNoLCBhbmQgMiBpZiBpdCBjYW4gYWNjb21tb2RhdGUgdG91Y2ggYnV0IGFsc28gb3RoZXIgdHlwZXMgbGlrZSBtb3VzZS9wb2ludGVyLlxuXG4gICAgX2lzVG91Y2ggPSBPYnNlcnZlci5pc1RvdWNoID0gX3dpbi5tYXRjaE1lZGlhICYmIF93aW4ubWF0Y2hNZWRpYShcIihob3Zlcjogbm9uZSksIChwb2ludGVyOiBjb2Fyc2UpXCIpLm1hdGNoZXMgPyAxIDogXCJvbnRvdWNoc3RhcnRcIiBpbiBfd2luIHx8IG5hdmlnYXRvci5tYXhUb3VjaFBvaW50cyA+IDAgfHwgbmF2aWdhdG9yLm1zTWF4VG91Y2hQb2ludHMgPiAwID8gMiA6IDA7XG4gICAgX2V2ZW50VHlwZXMgPSBPYnNlcnZlci5ldmVudFR5cGVzID0gKFwib250b3VjaHN0YXJ0XCIgaW4gX2RvY0VsID8gXCJ0b3VjaHN0YXJ0LHRvdWNobW92ZSx0b3VjaGNhbmNlbCx0b3VjaGVuZFwiIDogIShcIm9ucG9pbnRlcmRvd25cIiBpbiBfZG9jRWwpID8gXCJtb3VzZWRvd24sbW91c2Vtb3ZlLG1vdXNldXAsbW91c2V1cFwiIDogXCJwb2ludGVyZG93bixwb2ludGVybW92ZSxwb2ludGVyY2FuY2VsLHBvaW50ZXJ1cFwiKS5zcGxpdChcIixcIik7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3N0YXJ0dXAgPSAwO1xuICAgIH0sIDUwMCk7XG5cbiAgICBfc2V0U2Nyb2xsVHJpZ2dlcigpO1xuXG4gICAgX2NvcmVJbml0dGVkID0gMTtcbiAgfVxuXG4gIHJldHVybiBfY29yZUluaXR0ZWQ7XG59O1xuXG5faG9yaXpvbnRhbC5vcCA9IF92ZXJ0aWNhbDtcbl9zY3JvbGxlcnMuY2FjaGUgPSAwO1xuZXhwb3J0IHZhciBPYnNlcnZlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIE9ic2VydmVyKHZhcnMpIHtcbiAgICB0aGlzLmluaXQodmFycyk7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gT2JzZXJ2ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5pbml0ID0gZnVuY3Rpb24gaW5pdCh2YXJzKSB7XG4gICAgX2NvcmVJbml0dGVkIHx8IF9pbml0Q29yZShnc2FwKSB8fCBjb25zb2xlLndhcm4oXCJQbGVhc2UgZ3NhcC5yZWdpc3RlclBsdWdpbihPYnNlcnZlcilcIik7XG4gICAgU2Nyb2xsVHJpZ2dlciB8fCBfc2V0U2Nyb2xsVHJpZ2dlcigpO1xuICAgIHZhciB0b2xlcmFuY2UgPSB2YXJzLnRvbGVyYW5jZSxcbiAgICAgICAgZHJhZ01pbmltdW0gPSB2YXJzLmRyYWdNaW5pbXVtLFxuICAgICAgICB0eXBlID0gdmFycy50eXBlLFxuICAgICAgICB0YXJnZXQgPSB2YXJzLnRhcmdldCxcbiAgICAgICAgbGluZUhlaWdodCA9IHZhcnMubGluZUhlaWdodCxcbiAgICAgICAgZGVib3VuY2UgPSB2YXJzLmRlYm91bmNlLFxuICAgICAgICBwcmV2ZW50RGVmYXVsdCA9IHZhcnMucHJldmVudERlZmF1bHQsXG4gICAgICAgIG9uU3RvcCA9IHZhcnMub25TdG9wLFxuICAgICAgICBvblN0b3BEZWxheSA9IHZhcnMub25TdG9wRGVsYXksXG4gICAgICAgIGlnbm9yZSA9IHZhcnMuaWdub3JlLFxuICAgICAgICB3aGVlbFNwZWVkID0gdmFycy53aGVlbFNwZWVkLFxuICAgICAgICBldmVudCA9IHZhcnMuZXZlbnQsXG4gICAgICAgIG9uRHJhZ1N0YXJ0ID0gdmFycy5vbkRyYWdTdGFydCxcbiAgICAgICAgb25EcmFnRW5kID0gdmFycy5vbkRyYWdFbmQsXG4gICAgICAgIG9uRHJhZyA9IHZhcnMub25EcmFnLFxuICAgICAgICBvblByZXNzID0gdmFycy5vblByZXNzLFxuICAgICAgICBvblJlbGVhc2UgPSB2YXJzLm9uUmVsZWFzZSxcbiAgICAgICAgb25SaWdodCA9IHZhcnMub25SaWdodCxcbiAgICAgICAgb25MZWZ0ID0gdmFycy5vbkxlZnQsXG4gICAgICAgIG9uVXAgPSB2YXJzLm9uVXAsXG4gICAgICAgIG9uRG93biA9IHZhcnMub25Eb3duLFxuICAgICAgICBvbkNoYW5nZVggPSB2YXJzLm9uQ2hhbmdlWCxcbiAgICAgICAgb25DaGFuZ2VZID0gdmFycy5vbkNoYW5nZVksXG4gICAgICAgIG9uQ2hhbmdlID0gdmFycy5vbkNoYW5nZSxcbiAgICAgICAgb25Ub2dnbGVYID0gdmFycy5vblRvZ2dsZVgsXG4gICAgICAgIG9uVG9nZ2xlWSA9IHZhcnMub25Ub2dnbGVZLFxuICAgICAgICBvbkhvdmVyID0gdmFycy5vbkhvdmVyLFxuICAgICAgICBvbkhvdmVyRW5kID0gdmFycy5vbkhvdmVyRW5kLFxuICAgICAgICBvbk1vdmUgPSB2YXJzLm9uTW92ZSxcbiAgICAgICAgaWdub3JlQ2hlY2sgPSB2YXJzLmlnbm9yZUNoZWNrLFxuICAgICAgICBpc05vcm1hbGl6ZXIgPSB2YXJzLmlzTm9ybWFsaXplcixcbiAgICAgICAgb25HZXN0dXJlU3RhcnQgPSB2YXJzLm9uR2VzdHVyZVN0YXJ0LFxuICAgICAgICBvbkdlc3R1cmVFbmQgPSB2YXJzLm9uR2VzdHVyZUVuZCxcbiAgICAgICAgb25XaGVlbCA9IHZhcnMub25XaGVlbCxcbiAgICAgICAgb25FbmFibGUgPSB2YXJzLm9uRW5hYmxlLFxuICAgICAgICBvbkRpc2FibGUgPSB2YXJzLm9uRGlzYWJsZSxcbiAgICAgICAgb25DbGljayA9IHZhcnMub25DbGljayxcbiAgICAgICAgc2Nyb2xsU3BlZWQgPSB2YXJzLnNjcm9sbFNwZWVkLFxuICAgICAgICBjYXB0dXJlID0gdmFycy5jYXB0dXJlLFxuICAgICAgICBhbGxvd0NsaWNrcyA9IHZhcnMuYWxsb3dDbGlja3MsXG4gICAgICAgIGxvY2tBeGlzID0gdmFycy5sb2NrQXhpcyxcbiAgICAgICAgb25Mb2NrQXhpcyA9IHZhcnMub25Mb2NrQXhpcztcbiAgICB0aGlzLnRhcmdldCA9IHRhcmdldCA9IF9nZXRUYXJnZXQodGFyZ2V0KSB8fCBfZG9jRWw7XG4gICAgdGhpcy52YXJzID0gdmFycztcbiAgICBpZ25vcmUgJiYgKGlnbm9yZSA9IGdzYXAudXRpbHMudG9BcnJheShpZ25vcmUpKTtcbiAgICB0b2xlcmFuY2UgPSB0b2xlcmFuY2UgfHwgMWUtOTtcbiAgICBkcmFnTWluaW11bSA9IGRyYWdNaW5pbXVtIHx8IDA7XG4gICAgd2hlZWxTcGVlZCA9IHdoZWVsU3BlZWQgfHwgMTtcbiAgICBzY3JvbGxTcGVlZCA9IHNjcm9sbFNwZWVkIHx8IDE7XG4gICAgdHlwZSA9IHR5cGUgfHwgXCJ3aGVlbCx0b3VjaCxwb2ludGVyXCI7XG4gICAgZGVib3VuY2UgPSBkZWJvdW5jZSAhPT0gZmFsc2U7XG4gICAgbGluZUhlaWdodCB8fCAobGluZUhlaWdodCA9IHBhcnNlRmxvYXQoX3dpbi5nZXRDb21wdXRlZFN0eWxlKF9ib2R5KS5saW5lSGVpZ2h0KSB8fCAyMik7IC8vIG5vdGU6IGJyb3dzZXIgbWF5IHJlcG9ydCBcIm5vcm1hbFwiLCBzbyBkZWZhdWx0IHRvIDIyLlxuXG4gICAgdmFyIGlkLFxuICAgICAgICBvblN0b3BEZWxheWVkQ2FsbCxcbiAgICAgICAgZHJhZ2dlZCxcbiAgICAgICAgbW92ZWQsXG4gICAgICAgIHdoZWVsZWQsXG4gICAgICAgIGxvY2tlZCxcbiAgICAgICAgYXhpcyxcbiAgICAgICAgc2VsZiA9IHRoaXMsXG4gICAgICAgIHByZXZEZWx0YVggPSAwLFxuICAgICAgICBwcmV2RGVsdGFZID0gMCxcbiAgICAgICAgcGFzc2l2ZSA9IHZhcnMucGFzc2l2ZSB8fCAhcHJldmVudERlZmF1bHQsXG4gICAgICAgIHNjcm9sbEZ1bmNYID0gX2dldFNjcm9sbEZ1bmModGFyZ2V0LCBfaG9yaXpvbnRhbCksXG4gICAgICAgIHNjcm9sbEZ1bmNZID0gX2dldFNjcm9sbEZ1bmModGFyZ2V0LCBfdmVydGljYWwpLFxuICAgICAgICBzY3JvbGxYID0gc2Nyb2xsRnVuY1goKSxcbiAgICAgICAgc2Nyb2xsWSA9IHNjcm9sbEZ1bmNZKCksXG4gICAgICAgIGxpbWl0VG9Ub3VjaCA9IH50eXBlLmluZGV4T2YoXCJ0b3VjaFwiKSAmJiAhfnR5cGUuaW5kZXhPZihcInBvaW50ZXJcIikgJiYgX2V2ZW50VHlwZXNbMF0gPT09IFwicG9pbnRlcmRvd25cIixcbiAgICAgICAgLy8gZm9yIGRldmljZXMgdGhhdCBhY2NvbW1vZGF0ZSBtb3VzZSBldmVudHMgYW5kIHRvdWNoIGV2ZW50cywgd2UgbmVlZCB0byBkaXN0aW5ndWlzaC5cbiAgICBpc1ZpZXdwb3J0ID0gX2lzVmlld3BvcnQodGFyZ2V0KSxcbiAgICAgICAgb3duZXJEb2MgPSB0YXJnZXQub3duZXJEb2N1bWVudCB8fCBfZG9jLFxuICAgICAgICBkZWx0YVggPSBbMCwgMCwgMF0sXG4gICAgICAgIC8vIHdoZWVsLCBzY3JvbGwsIHBvaW50ZXIvdG91Y2hcbiAgICBkZWx0YVkgPSBbMCwgMCwgMF0sXG4gICAgICAgIG9uQ2xpY2tUaW1lID0gMCxcbiAgICAgICAgY2xpY2tDYXB0dXJlID0gZnVuY3Rpb24gY2xpY2tDYXB0dXJlKCkge1xuICAgICAgcmV0dXJuIG9uQ2xpY2tUaW1lID0gX2dldFRpbWUoKTtcbiAgICB9LFxuICAgICAgICBfaWdub3JlQ2hlY2sgPSBmdW5jdGlvbiBfaWdub3JlQ2hlY2soZSwgaXNQb2ludGVyT3JUb3VjaCkge1xuICAgICAgcmV0dXJuIChzZWxmLmV2ZW50ID0gZSkgJiYgaWdub3JlICYmIH5pZ25vcmUuaW5kZXhPZihlLnRhcmdldCkgfHwgaXNQb2ludGVyT3JUb3VjaCAmJiBsaW1pdFRvVG91Y2ggJiYgZS5wb2ludGVyVHlwZSAhPT0gXCJ0b3VjaFwiIHx8IGlnbm9yZUNoZWNrICYmIGlnbm9yZUNoZWNrKGUsIGlzUG9pbnRlck9yVG91Y2gpO1xuICAgIH0sXG4gICAgICAgIG9uU3RvcEZ1bmMgPSBmdW5jdGlvbiBvblN0b3BGdW5jKCkge1xuICAgICAgc2VsZi5fdngucmVzZXQoKTtcblxuICAgICAgc2VsZi5fdnkucmVzZXQoKTtcblxuICAgICAgb25TdG9wRGVsYXllZENhbGwucGF1c2UoKTtcbiAgICAgIG9uU3RvcCAmJiBvblN0b3Aoc2VsZik7XG4gICAgfSxcbiAgICAgICAgdXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgICAgdmFyIGR4ID0gc2VsZi5kZWx0YVggPSBfZ2V0QWJzb2x1dGVNYXgoZGVsdGFYKSxcbiAgICAgICAgICBkeSA9IHNlbGYuZGVsdGFZID0gX2dldEFic29sdXRlTWF4KGRlbHRhWSksXG4gICAgICAgICAgY2hhbmdlZFggPSBNYXRoLmFicyhkeCkgPj0gdG9sZXJhbmNlLFxuICAgICAgICAgIGNoYW5nZWRZID0gTWF0aC5hYnMoZHkpID49IHRvbGVyYW5jZTtcblxuICAgICAgb25DaGFuZ2UgJiYgKGNoYW5nZWRYIHx8IGNoYW5nZWRZKSAmJiBvbkNoYW5nZShzZWxmLCBkeCwgZHksIGRlbHRhWCwgZGVsdGFZKTsgLy8gaW4gU2Nyb2xsVHJpZ2dlci5ub3JtYWxpemVTY3JvbGwoKSwgd2UgbmVlZCB0byBrbm93IGlmIGl0IHdhcyB0b3VjaC9wb2ludGVyIHNvIHdlIG5lZWQgYWNjZXNzIHRvIHRoZSBkZWx0YVgvZGVsdGFZIEFycmF5cyBiZWZvcmUgd2UgY2xlYXIgdGhlbSBvdXQuXG5cbiAgICAgIGlmIChjaGFuZ2VkWCkge1xuICAgICAgICBvblJpZ2h0ICYmIHNlbGYuZGVsdGFYID4gMCAmJiBvblJpZ2h0KHNlbGYpO1xuICAgICAgICBvbkxlZnQgJiYgc2VsZi5kZWx0YVggPCAwICYmIG9uTGVmdChzZWxmKTtcbiAgICAgICAgb25DaGFuZ2VYICYmIG9uQ2hhbmdlWChzZWxmKTtcbiAgICAgICAgb25Ub2dnbGVYICYmIHNlbGYuZGVsdGFYIDwgMCAhPT0gcHJldkRlbHRhWCA8IDAgJiYgb25Ub2dnbGVYKHNlbGYpO1xuICAgICAgICBwcmV2RGVsdGFYID0gc2VsZi5kZWx0YVg7XG4gICAgICAgIGRlbHRhWFswXSA9IGRlbHRhWFsxXSA9IGRlbHRhWFsyXSA9IDA7XG4gICAgICB9XG5cbiAgICAgIGlmIChjaGFuZ2VkWSkge1xuICAgICAgICBvbkRvd24gJiYgc2VsZi5kZWx0YVkgPiAwICYmIG9uRG93bihzZWxmKTtcbiAgICAgICAgb25VcCAmJiBzZWxmLmRlbHRhWSA8IDAgJiYgb25VcChzZWxmKTtcbiAgICAgICAgb25DaGFuZ2VZICYmIG9uQ2hhbmdlWShzZWxmKTtcbiAgICAgICAgb25Ub2dnbGVZICYmIHNlbGYuZGVsdGFZIDwgMCAhPT0gcHJldkRlbHRhWSA8IDAgJiYgb25Ub2dnbGVZKHNlbGYpO1xuICAgICAgICBwcmV2RGVsdGFZID0gc2VsZi5kZWx0YVk7XG4gICAgICAgIGRlbHRhWVswXSA9IGRlbHRhWVsxXSA9IGRlbHRhWVsyXSA9IDA7XG4gICAgICB9XG5cbiAgICAgIGlmIChtb3ZlZCB8fCBkcmFnZ2VkKSB7XG4gICAgICAgIG9uTW92ZSAmJiBvbk1vdmUoc2VsZik7XG5cbiAgICAgICAgaWYgKGRyYWdnZWQpIHtcbiAgICAgICAgICBvbkRyYWcoc2VsZik7XG4gICAgICAgICAgZHJhZ2dlZCA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgbW92ZWQgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgbG9ja2VkICYmICEobG9ja2VkID0gZmFsc2UpICYmIG9uTG9ja0F4aXMgJiYgb25Mb2NrQXhpcyhzZWxmKTtcblxuICAgICAgaWYgKHdoZWVsZWQpIHtcbiAgICAgICAgb25XaGVlbChzZWxmKTtcbiAgICAgICAgd2hlZWxlZCA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZCA9IDA7XG4gICAgfSxcbiAgICAgICAgb25EZWx0YSA9IGZ1bmN0aW9uIG9uRGVsdGEoeCwgeSwgaW5kZXgpIHtcbiAgICAgIGRlbHRhWFtpbmRleF0gKz0geDtcbiAgICAgIGRlbHRhWVtpbmRleF0gKz0geTtcblxuICAgICAgc2VsZi5fdngudXBkYXRlKHgpO1xuXG4gICAgICBzZWxmLl92eS51cGRhdGUoeSk7XG5cbiAgICAgIGRlYm91bmNlID8gaWQgfHwgKGlkID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHVwZGF0ZSkpIDogdXBkYXRlKCk7XG4gICAgfSxcbiAgICAgICAgb25Ub3VjaE9yUG9pbnRlckRlbHRhID0gZnVuY3Rpb24gb25Ub3VjaE9yUG9pbnRlckRlbHRhKHgsIHkpIHtcbiAgICAgIGlmIChsb2NrQXhpcyAmJiAhYXhpcykge1xuICAgICAgICBzZWxmLmF4aXMgPSBheGlzID0gTWF0aC5hYnMoeCkgPiBNYXRoLmFicyh5KSA/IFwieFwiIDogXCJ5XCI7XG4gICAgICAgIGxvY2tlZCA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChheGlzICE9PSBcInlcIikge1xuICAgICAgICBkZWx0YVhbMl0gKz0geDtcblxuICAgICAgICBzZWxmLl92eC51cGRhdGUoeCwgdHJ1ZSk7IC8vIHVwZGF0ZSB0aGUgdmVsb2NpdHkgYXMgZnJlcXVlbnRseSBhcyBwb3NzaWJsZSBpbnN0ZWFkIG9mIGluIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gc28gdGhhdCB2ZXJ5IHF1aWNrIHRvdWNoLXNjcm9sbHMgKGZsaWNrcykgZmVlbCBuYXR1cmFsLiBJZiBpdCdzIHRoZSBtb3VzZS90b3VjaC9wb2ludGVyLCBmb3JjZSBpdCBzbyB0aGF0IHdlIGdldCBzbmFwcHkvYWNjdXJhdGUgbW9tZW50dW0gc2Nyb2xsLlxuXG4gICAgICB9XG5cbiAgICAgIGlmIChheGlzICE9PSBcInhcIikge1xuICAgICAgICBkZWx0YVlbMl0gKz0geTtcblxuICAgICAgICBzZWxmLl92eS51cGRhdGUoeSwgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIGRlYm91bmNlID8gaWQgfHwgKGlkID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHVwZGF0ZSkpIDogdXBkYXRlKCk7XG4gICAgfSxcbiAgICAgICAgX29uRHJhZyA9IGZ1bmN0aW9uIF9vbkRyYWcoZSkge1xuICAgICAgaWYgKF9pZ25vcmVDaGVjayhlLCAxKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGUgPSBfZ2V0RXZlbnQoZSwgcHJldmVudERlZmF1bHQpO1xuICAgICAgdmFyIHggPSBlLmNsaWVudFgsXG4gICAgICAgICAgeSA9IGUuY2xpZW50WSxcbiAgICAgICAgICBkeCA9IHggLSBzZWxmLngsXG4gICAgICAgICAgZHkgPSB5IC0gc2VsZi55LFxuICAgICAgICAgIGlzRHJhZ2dpbmcgPSBzZWxmLmlzRHJhZ2dpbmc7XG4gICAgICBzZWxmLnggPSB4O1xuICAgICAgc2VsZi55ID0geTtcblxuICAgICAgaWYgKGlzRHJhZ2dpbmcgfHwgTWF0aC5hYnMoc2VsZi5zdGFydFggLSB4KSA+PSBkcmFnTWluaW11bSB8fCBNYXRoLmFicyhzZWxmLnN0YXJ0WSAtIHkpID49IGRyYWdNaW5pbXVtKSB7XG4gICAgICAgIG9uRHJhZyAmJiAoZHJhZ2dlZCA9IHRydWUpO1xuICAgICAgICBpc0RyYWdnaW5nIHx8IChzZWxmLmlzRHJhZ2dpbmcgPSB0cnVlKTtcbiAgICAgICAgb25Ub3VjaE9yUG9pbnRlckRlbHRhKGR4LCBkeSk7XG4gICAgICAgIGlzRHJhZ2dpbmcgfHwgb25EcmFnU3RhcnQgJiYgb25EcmFnU3RhcnQoc2VsZik7XG4gICAgICB9XG4gICAgfSxcbiAgICAgICAgX29uUHJlc3MgPSBzZWxmLm9uUHJlc3MgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgaWYgKF9pZ25vcmVDaGVjayhlLCAxKSB8fCBlICYmIGUuYnV0dG9uKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgc2VsZi5heGlzID0gYXhpcyA9IG51bGw7XG4gICAgICBvblN0b3BEZWxheWVkQ2FsbC5wYXVzZSgpO1xuICAgICAgc2VsZi5pc1ByZXNzZWQgPSB0cnVlO1xuICAgICAgZSA9IF9nZXRFdmVudChlKTsgLy8gbm90ZTogbWF5IG5lZWQgdG8gcHJldmVudERlZmF1bHQoPykgV29uJ3Qgc2lkZS1zY3JvbGwgb24gaU9TIFNhZmFyaSBpZiB3ZSBkbywgdGhvdWdoLlxuXG4gICAgICBwcmV2RGVsdGFYID0gcHJldkRlbHRhWSA9IDA7XG4gICAgICBzZWxmLnN0YXJ0WCA9IHNlbGYueCA9IGUuY2xpZW50WDtcbiAgICAgIHNlbGYuc3RhcnRZID0gc2VsZi55ID0gZS5jbGllbnRZO1xuXG4gICAgICBzZWxmLl92eC5yZXNldCgpOyAvLyBvdGhlcndpc2UgdGhlIHQyIG1heSBiZSBzdGFsZSBpZiB0aGUgdXNlciB0b3VjaGVzIGFuZCBmbGlja3Mgc3VwZXIgZmFzdCBhbmQgcmVsZWFzZXMgaW4gbGVzcyB0aGFuIDIgcmVxdWVzdEFuaW1hdGlvbkZyYW1lIHRpY2tzLCBjYXVzaW5nIHZlbG9jaXR5IHRvIGJlIDAuXG5cblxuICAgICAgc2VsZi5fdnkucmVzZXQoKTtcblxuICAgICAgX2FkZExpc3RlbmVyKGlzTm9ybWFsaXplciA/IHRhcmdldCA6IG93bmVyRG9jLCBfZXZlbnRUeXBlc1sxXSwgX29uRHJhZywgcGFzc2l2ZSwgdHJ1ZSk7XG5cbiAgICAgIHNlbGYuZGVsdGFYID0gc2VsZi5kZWx0YVkgPSAwO1xuICAgICAgb25QcmVzcyAmJiBvblByZXNzKHNlbGYpO1xuICAgIH0sXG4gICAgICAgIF9vblJlbGVhc2UgPSBzZWxmLm9uUmVsZWFzZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoX2lnbm9yZUNoZWNrKGUsIDEpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgX3JlbW92ZUxpc3RlbmVyKGlzTm9ybWFsaXplciA/IHRhcmdldCA6IG93bmVyRG9jLCBfZXZlbnRUeXBlc1sxXSwgX29uRHJhZywgdHJ1ZSk7XG5cbiAgICAgIHZhciBpc1RyYWNraW5nRHJhZyA9ICFpc05hTihzZWxmLnkgLSBzZWxmLnN0YXJ0WSksXG4gICAgICAgICAgd2FzRHJhZ2dpbmcgPSBzZWxmLmlzRHJhZ2dpbmcsXG4gICAgICAgICAgaXNEcmFnTm90Q2xpY2sgPSB3YXNEcmFnZ2luZyAmJiAoTWF0aC5hYnMoc2VsZi54IC0gc2VsZi5zdGFydFgpID4gMyB8fCBNYXRoLmFicyhzZWxmLnkgLSBzZWxmLnN0YXJ0WSkgPiAzKSxcbiAgICAgICAgICAvLyBzb21lIHRvdWNoIGRldmljZXMgbmVlZCBzb21lIHdpZ2dsZSByb29tIGluIHRlcm1zIG9mIHNlbnNpbmcgY2xpY2tzIC0gdGhlIGZpbmdlciBtYXkgbW92ZSBhIGZldyBwaXhlbHMuXG4gICAgICBldmVudERhdGEgPSBfZ2V0RXZlbnQoZSk7XG5cbiAgICAgIGlmICghaXNEcmFnTm90Q2xpY2sgJiYgaXNUcmFja2luZ0RyYWcpIHtcbiAgICAgICAgc2VsZi5fdngucmVzZXQoKTtcblxuICAgICAgICBzZWxmLl92eS5yZXNldCgpOyAvL2lmIChwcmV2ZW50RGVmYXVsdCAmJiBhbGxvd0NsaWNrcyAmJiBzZWxmLmlzUHJlc3NlZCkgeyAvLyBjaGVjayBpc1ByZXNzZWQgYmVjYXVzZSBpbiBhIHJhcmUgZWRnZSBjYXNlLCB0aGUgaW5wdXRPYnNlcnZlciBpbiBTY3JvbGxUcmlnZ2VyIG1heSBzdG9wUHJvcGFnYXRpb24oKSBvbiB0aGUgcHJlc3MvZHJhZywgc28gdGhlIG9uUmVsZWFzZSBtYXkgZ2V0IGZpcmVkIHdpdGhvdXQgdGhlIG9uUHJlc3Mvb25EcmFnIGV2ZXIgZ2V0dGluZyBjYWxsZWQsIHRodXMgaXQgY291bGQgdHJpZ2dlciBhIGNsaWNrIHRvIG9jY3VyIG9uIGEgbGluayBhZnRlciBzY3JvbGwtZHJhZ2dpbmcgaXQuXG5cblxuICAgICAgICBpZiAocHJldmVudERlZmF1bHQgJiYgYWxsb3dDbGlja3MpIHtcbiAgICAgICAgICBnc2FwLmRlbGF5ZWRDYWxsKDAuMDgsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIHNvbWUgYnJvd3NlcnMgKGxpa2UgRmlyZWZveCkgd29uJ3QgdHJ1c3Qgc2NyaXB0LWdlbmVyYXRlZCBjbGlja3MsIHNvIGlmIHRoZSB1c2VyIHRyaWVzIHRvIGNsaWNrIG9uIGEgdmlkZW8gdG8gcGxheSBpdCwgZm9yIGV4YW1wbGUsIGl0IHNpbXBseSB3b24ndCB3b3JrLiBTaW5jZSBhIHJlZ3VsYXIgXCJjbGlja1wiIGV2ZW50IHdpbGwgbW9zdCBsaWtlbHkgYmUgZ2VuZXJhdGVkIGFueXdheSAob25lIHRoYXQgaGFzIGl0cyBpc1RydXN0ZWQgZmxhZyBzZXQgdG8gdHJ1ZSksIHdlIG11c3Qgc2xpZ2h0bHkgZGVsYXkgb3VyIHNjcmlwdC1nZW5lcmF0ZWQgY2xpY2sgc28gdGhhdCB0aGUgXCJyZWFsXCIvdHJ1c3RlZCBvbmUgaXMgcHJpb3JpdGl6ZWQuIFJlbWVtYmVyLCB3aGVuIHRoZXJlIGFyZSBkdXBsaWNhdGUgZXZlbnRzIGluIHF1aWNrIHN1Y2Nlc3Npb24sIHdlIHN1cHByZXNzIGFsbCBidXQgdGhlIGZpcnN0IG9uZS4gU29tZSBicm93c2VycyBkb24ndCBldmVuIHRyaWdnZXIgdGhlIFwicmVhbFwiIG9uZSBhdCBhbGwsIHNvIG91ciBzeW50aGV0aWMgb25lIGlzIGEgc2FmZXR5IHZhbHZlIHRoYXQgZW5zdXJlcyB0aGF0IG5vIG1hdHRlciB3aGF0LCBhIGNsaWNrIGV2ZW50IGRvZXMgZ2V0IGRpc3BhdGNoZWQuXG4gICAgICAgICAgICBpZiAoX2dldFRpbWUoKSAtIG9uQ2xpY2tUaW1lID4gMzAwICYmICFlLmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgICAgICAgaWYgKGUudGFyZ2V0LmNsaWNrKSB7XG4gICAgICAgICAgICAgICAgLy9zb21lIGJyb3dzZXJzIChsaWtlIG1vYmlsZSBTYWZhcmkpIGRvbid0IHByb3Blcmx5IHRyaWdnZXIgdGhlIGNsaWNrIGV2ZW50XG4gICAgICAgICAgICAgICAgZS50YXJnZXQuY2xpY2soKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChvd25lckRvYy5jcmVhdGVFdmVudCkge1xuICAgICAgICAgICAgICAgIHZhciBzeW50aGV0aWNFdmVudCA9IG93bmVyRG9jLmNyZWF0ZUV2ZW50KFwiTW91c2VFdmVudHNcIik7XG4gICAgICAgICAgICAgICAgc3ludGhldGljRXZlbnQuaW5pdE1vdXNlRXZlbnQoXCJjbGlja1wiLCB0cnVlLCB0cnVlLCBfd2luLCAxLCBldmVudERhdGEuc2NyZWVuWCwgZXZlbnREYXRhLnNjcmVlblksIGV2ZW50RGF0YS5jbGllbnRYLCBldmVudERhdGEuY2xpZW50WSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDAsIG51bGwpO1xuICAgICAgICAgICAgICAgIGUudGFyZ2V0LmRpc3BhdGNoRXZlbnQoc3ludGhldGljRXZlbnQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc2VsZi5pc0RyYWdnaW5nID0gc2VsZi5pc0dlc3R1cmluZyA9IHNlbGYuaXNQcmVzc2VkID0gZmFsc2U7XG4gICAgICBvblN0b3AgJiYgd2FzRHJhZ2dpbmcgJiYgIWlzTm9ybWFsaXplciAmJiBvblN0b3BEZWxheWVkQ2FsbC5yZXN0YXJ0KHRydWUpO1xuICAgICAgb25EcmFnRW5kICYmIHdhc0RyYWdnaW5nICYmIG9uRHJhZ0VuZChzZWxmKTtcbiAgICAgIG9uUmVsZWFzZSAmJiBvblJlbGVhc2Uoc2VsZiwgaXNEcmFnTm90Q2xpY2spO1xuICAgIH0sXG4gICAgICAgIF9vbkdlc3R1cmVTdGFydCA9IGZ1bmN0aW9uIF9vbkdlc3R1cmVTdGFydChlKSB7XG4gICAgICByZXR1cm4gZS50b3VjaGVzICYmIGUudG91Y2hlcy5sZW5ndGggPiAxICYmIChzZWxmLmlzR2VzdHVyaW5nID0gdHJ1ZSkgJiYgb25HZXN0dXJlU3RhcnQoZSwgc2VsZi5pc0RyYWdnaW5nKTtcbiAgICB9LFxuICAgICAgICBfb25HZXN0dXJlRW5kID0gZnVuY3Rpb24gX29uR2VzdHVyZUVuZCgpIHtcbiAgICAgIHJldHVybiAoc2VsZi5pc0dlc3R1cmluZyA9IGZhbHNlKSB8fCBvbkdlc3R1cmVFbmQoc2VsZik7XG4gICAgfSxcbiAgICAgICAgb25TY3JvbGwgPSBmdW5jdGlvbiBvblNjcm9sbChlKSB7XG4gICAgICBpZiAoX2lnbm9yZUNoZWNrKGUpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHggPSBzY3JvbGxGdW5jWCgpLFxuICAgICAgICAgIHkgPSBzY3JvbGxGdW5jWSgpO1xuICAgICAgb25EZWx0YSgoeCAtIHNjcm9sbFgpICogc2Nyb2xsU3BlZWQsICh5IC0gc2Nyb2xsWSkgKiBzY3JvbGxTcGVlZCwgMSk7XG4gICAgICBzY3JvbGxYID0geDtcbiAgICAgIHNjcm9sbFkgPSB5O1xuICAgICAgb25TdG9wICYmIG9uU3RvcERlbGF5ZWRDYWxsLnJlc3RhcnQodHJ1ZSk7XG4gICAgfSxcbiAgICAgICAgX29uV2hlZWwgPSBmdW5jdGlvbiBfb25XaGVlbChlKSB7XG4gICAgICBpZiAoX2lnbm9yZUNoZWNrKGUpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZSA9IF9nZXRFdmVudChlLCBwcmV2ZW50RGVmYXVsdCk7XG4gICAgICBvbldoZWVsICYmICh3aGVlbGVkID0gdHJ1ZSk7XG4gICAgICB2YXIgbXVsdGlwbGllciA9IChlLmRlbHRhTW9kZSA9PT0gMSA/IGxpbmVIZWlnaHQgOiBlLmRlbHRhTW9kZSA9PT0gMiA/IF93aW4uaW5uZXJIZWlnaHQgOiAxKSAqIHdoZWVsU3BlZWQ7XG4gICAgICBvbkRlbHRhKGUuZGVsdGFYICogbXVsdGlwbGllciwgZS5kZWx0YVkgKiBtdWx0aXBsaWVyLCAwKTtcbiAgICAgIG9uU3RvcCAmJiAhaXNOb3JtYWxpemVyICYmIG9uU3RvcERlbGF5ZWRDYWxsLnJlc3RhcnQodHJ1ZSk7XG4gICAgfSxcbiAgICAgICAgX29uTW92ZSA9IGZ1bmN0aW9uIF9vbk1vdmUoZSkge1xuICAgICAgaWYgKF9pZ25vcmVDaGVjayhlKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciB4ID0gZS5jbGllbnRYLFxuICAgICAgICAgIHkgPSBlLmNsaWVudFksXG4gICAgICAgICAgZHggPSB4IC0gc2VsZi54LFxuICAgICAgICAgIGR5ID0geSAtIHNlbGYueTtcbiAgICAgIHNlbGYueCA9IHg7XG4gICAgICBzZWxmLnkgPSB5O1xuICAgICAgbW92ZWQgPSB0cnVlO1xuICAgICAgb25TdG9wICYmIG9uU3RvcERlbGF5ZWRDYWxsLnJlc3RhcnQodHJ1ZSk7XG4gICAgICAoZHggfHwgZHkpICYmIG9uVG91Y2hPclBvaW50ZXJEZWx0YShkeCwgZHkpO1xuICAgIH0sXG4gICAgICAgIF9vbkhvdmVyID0gZnVuY3Rpb24gX29uSG92ZXIoZSkge1xuICAgICAgc2VsZi5ldmVudCA9IGU7XG4gICAgICBvbkhvdmVyKHNlbGYpO1xuICAgIH0sXG4gICAgICAgIF9vbkhvdmVyRW5kID0gZnVuY3Rpb24gX29uSG92ZXJFbmQoZSkge1xuICAgICAgc2VsZi5ldmVudCA9IGU7XG4gICAgICBvbkhvdmVyRW5kKHNlbGYpO1xuICAgIH0sXG4gICAgICAgIF9vbkNsaWNrID0gZnVuY3Rpb24gX29uQ2xpY2soZSkge1xuICAgICAgcmV0dXJuIF9pZ25vcmVDaGVjayhlKSB8fCBfZ2V0RXZlbnQoZSwgcHJldmVudERlZmF1bHQpICYmIG9uQ2xpY2soc2VsZik7XG4gICAgfTtcblxuICAgIG9uU3RvcERlbGF5ZWRDYWxsID0gc2VsZi5fZGMgPSBnc2FwLmRlbGF5ZWRDYWxsKG9uU3RvcERlbGF5IHx8IDAuMjUsIG9uU3RvcEZ1bmMpLnBhdXNlKCk7XG4gICAgc2VsZi5kZWx0YVggPSBzZWxmLmRlbHRhWSA9IDA7XG4gICAgc2VsZi5fdnggPSBfZ2V0VmVsb2NpdHlQcm9wKDAsIDUwLCB0cnVlKTtcbiAgICBzZWxmLl92eSA9IF9nZXRWZWxvY2l0eVByb3AoMCwgNTAsIHRydWUpO1xuICAgIHNlbGYuc2Nyb2xsWCA9IHNjcm9sbEZ1bmNYO1xuICAgIHNlbGYuc2Nyb2xsWSA9IHNjcm9sbEZ1bmNZO1xuICAgIHNlbGYuaXNEcmFnZ2luZyA9IHNlbGYuaXNHZXN0dXJpbmcgPSBzZWxmLmlzUHJlc3NlZCA9IGZhbHNlO1xuXG4gICAgX2NvbnRleHQodGhpcyk7XG5cbiAgICBzZWxmLmVuYWJsZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoIXNlbGYuaXNFbmFibGVkKSB7XG4gICAgICAgIF9hZGRMaXN0ZW5lcihpc1ZpZXdwb3J0ID8gb3duZXJEb2MgOiB0YXJnZXQsIFwic2Nyb2xsXCIsIF9vblNjcm9sbCk7XG5cbiAgICAgICAgdHlwZS5pbmRleE9mKFwic2Nyb2xsXCIpID49IDAgJiYgX2FkZExpc3RlbmVyKGlzVmlld3BvcnQgPyBvd25lckRvYyA6IHRhcmdldCwgXCJzY3JvbGxcIiwgb25TY3JvbGwsIHBhc3NpdmUsIGNhcHR1cmUpO1xuICAgICAgICB0eXBlLmluZGV4T2YoXCJ3aGVlbFwiKSA+PSAwICYmIF9hZGRMaXN0ZW5lcih0YXJnZXQsIFwid2hlZWxcIiwgX29uV2hlZWwsIHBhc3NpdmUsIGNhcHR1cmUpO1xuXG4gICAgICAgIGlmICh0eXBlLmluZGV4T2YoXCJ0b3VjaFwiKSA+PSAwICYmIF9pc1RvdWNoIHx8IHR5cGUuaW5kZXhPZihcInBvaW50ZXJcIikgPj0gMCkge1xuICAgICAgICAgIF9hZGRMaXN0ZW5lcih0YXJnZXQsIF9ldmVudFR5cGVzWzBdLCBfb25QcmVzcywgcGFzc2l2ZSwgY2FwdHVyZSk7XG5cbiAgICAgICAgICBfYWRkTGlzdGVuZXIob3duZXJEb2MsIF9ldmVudFR5cGVzWzJdLCBfb25SZWxlYXNlKTtcblxuICAgICAgICAgIF9hZGRMaXN0ZW5lcihvd25lckRvYywgX2V2ZW50VHlwZXNbM10sIF9vblJlbGVhc2UpO1xuXG4gICAgICAgICAgYWxsb3dDbGlja3MgJiYgX2FkZExpc3RlbmVyKHRhcmdldCwgXCJjbGlja1wiLCBjbGlja0NhcHR1cmUsIHRydWUsIHRydWUpO1xuICAgICAgICAgIG9uQ2xpY2sgJiYgX2FkZExpc3RlbmVyKHRhcmdldCwgXCJjbGlja1wiLCBfb25DbGljayk7XG4gICAgICAgICAgb25HZXN0dXJlU3RhcnQgJiYgX2FkZExpc3RlbmVyKG93bmVyRG9jLCBcImdlc3R1cmVzdGFydFwiLCBfb25HZXN0dXJlU3RhcnQpO1xuICAgICAgICAgIG9uR2VzdHVyZUVuZCAmJiBfYWRkTGlzdGVuZXIob3duZXJEb2MsIFwiZ2VzdHVyZWVuZFwiLCBfb25HZXN0dXJlRW5kKTtcbiAgICAgICAgICBvbkhvdmVyICYmIF9hZGRMaXN0ZW5lcih0YXJnZXQsIF9wb2ludGVyVHlwZSArIFwiZW50ZXJcIiwgX29uSG92ZXIpO1xuICAgICAgICAgIG9uSG92ZXJFbmQgJiYgX2FkZExpc3RlbmVyKHRhcmdldCwgX3BvaW50ZXJUeXBlICsgXCJsZWF2ZVwiLCBfb25Ib3ZlckVuZCk7XG4gICAgICAgICAgb25Nb3ZlICYmIF9hZGRMaXN0ZW5lcih0YXJnZXQsIF9wb2ludGVyVHlwZSArIFwibW92ZVwiLCBfb25Nb3ZlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNlbGYuaXNFbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgZSAmJiBlLnR5cGUgJiYgX29uUHJlc3MoZSk7XG4gICAgICAgIG9uRW5hYmxlICYmIG9uRW5hYmxlKHNlbGYpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9O1xuXG4gICAgc2VsZi5kaXNhYmxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHNlbGYuaXNFbmFibGVkKSB7XG4gICAgICAgIC8vIG9ubHkgcmVtb3ZlIHRoZSBfb25TY3JvbGwgbGlzdGVuZXIgaWYgdGhlcmUgYXJlbid0IGFueSBvdGhlcnMgdGhhdCByZWx5IG9uIHRoZSBmdW5jdGlvbmFsaXR5LlxuICAgICAgICBfb2JzZXJ2ZXJzLmZpbHRlcihmdW5jdGlvbiAobykge1xuICAgICAgICAgIHJldHVybiBvICE9PSBzZWxmICYmIF9pc1ZpZXdwb3J0KG8udGFyZ2V0KTtcbiAgICAgICAgfSkubGVuZ3RoIHx8IF9yZW1vdmVMaXN0ZW5lcihpc1ZpZXdwb3J0ID8gb3duZXJEb2MgOiB0YXJnZXQsIFwic2Nyb2xsXCIsIF9vblNjcm9sbCk7XG5cbiAgICAgICAgaWYgKHNlbGYuaXNQcmVzc2VkKSB7XG4gICAgICAgICAgc2VsZi5fdngucmVzZXQoKTtcblxuICAgICAgICAgIHNlbGYuX3Z5LnJlc2V0KCk7XG5cbiAgICAgICAgICBfcmVtb3ZlTGlzdGVuZXIoaXNOb3JtYWxpemVyID8gdGFyZ2V0IDogb3duZXJEb2MsIF9ldmVudFR5cGVzWzFdLCBfb25EcmFnLCB0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF9yZW1vdmVMaXN0ZW5lcihpc1ZpZXdwb3J0ID8gb3duZXJEb2MgOiB0YXJnZXQsIFwic2Nyb2xsXCIsIG9uU2Nyb2xsLCBjYXB0dXJlKTtcblxuICAgICAgICBfcmVtb3ZlTGlzdGVuZXIodGFyZ2V0LCBcIndoZWVsXCIsIF9vbldoZWVsLCBjYXB0dXJlKTtcblxuICAgICAgICBfcmVtb3ZlTGlzdGVuZXIodGFyZ2V0LCBfZXZlbnRUeXBlc1swXSwgX29uUHJlc3MsIGNhcHR1cmUpO1xuXG4gICAgICAgIF9yZW1vdmVMaXN0ZW5lcihvd25lckRvYywgX2V2ZW50VHlwZXNbMl0sIF9vblJlbGVhc2UpO1xuXG4gICAgICAgIF9yZW1vdmVMaXN0ZW5lcihvd25lckRvYywgX2V2ZW50VHlwZXNbM10sIF9vblJlbGVhc2UpO1xuXG4gICAgICAgIF9yZW1vdmVMaXN0ZW5lcih0YXJnZXQsIFwiY2xpY2tcIiwgY2xpY2tDYXB0dXJlLCB0cnVlKTtcblxuICAgICAgICBfcmVtb3ZlTGlzdGVuZXIodGFyZ2V0LCBcImNsaWNrXCIsIF9vbkNsaWNrKTtcblxuICAgICAgICBfcmVtb3ZlTGlzdGVuZXIob3duZXJEb2MsIFwiZ2VzdHVyZXN0YXJ0XCIsIF9vbkdlc3R1cmVTdGFydCk7XG5cbiAgICAgICAgX3JlbW92ZUxpc3RlbmVyKG93bmVyRG9jLCBcImdlc3R1cmVlbmRcIiwgX29uR2VzdHVyZUVuZCk7XG5cbiAgICAgICAgX3JlbW92ZUxpc3RlbmVyKHRhcmdldCwgX3BvaW50ZXJUeXBlICsgXCJlbnRlclwiLCBfb25Ib3Zlcik7XG5cbiAgICAgICAgX3JlbW92ZUxpc3RlbmVyKHRhcmdldCwgX3BvaW50ZXJUeXBlICsgXCJsZWF2ZVwiLCBfb25Ib3ZlckVuZCk7XG5cbiAgICAgICAgX3JlbW92ZUxpc3RlbmVyKHRhcmdldCwgX3BvaW50ZXJUeXBlICsgXCJtb3ZlXCIsIF9vbk1vdmUpO1xuXG4gICAgICAgIHNlbGYuaXNFbmFibGVkID0gc2VsZi5pc1ByZXNzZWQgPSBzZWxmLmlzRHJhZ2dpbmcgPSBmYWxzZTtcbiAgICAgICAgb25EaXNhYmxlICYmIG9uRGlzYWJsZShzZWxmKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgc2VsZi5raWxsID0gc2VsZi5yZXZlcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBzZWxmLmRpc2FibGUoKTtcblxuICAgICAgdmFyIGkgPSBfb2JzZXJ2ZXJzLmluZGV4T2Yoc2VsZik7XG5cbiAgICAgIGkgPj0gMCAmJiBfb2JzZXJ2ZXJzLnNwbGljZShpLCAxKTtcbiAgICAgIF9ub3JtYWxpemVyID09PSBzZWxmICYmIChfbm9ybWFsaXplciA9IDApO1xuICAgIH07XG5cbiAgICBfb2JzZXJ2ZXJzLnB1c2goc2VsZik7XG5cbiAgICBpc05vcm1hbGl6ZXIgJiYgX2lzVmlld3BvcnQodGFyZ2V0KSAmJiAoX25vcm1hbGl6ZXIgPSBzZWxmKTtcbiAgICBzZWxmLmVuYWJsZShldmVudCk7XG4gIH07XG5cbiAgX2NyZWF0ZUNsYXNzKE9ic2VydmVyLCBbe1xuICAgIGtleTogXCJ2ZWxvY2l0eVhcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl92eC5nZXRWZWxvY2l0eSgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ2ZWxvY2l0eVlcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl92eS5nZXRWZWxvY2l0eSgpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBPYnNlcnZlcjtcbn0oKTtcbk9ic2VydmVyLnZlcnNpb24gPSBcIjMuMTIuNVwiO1xuXG5PYnNlcnZlci5jcmVhdGUgPSBmdW5jdGlvbiAodmFycykge1xuICByZXR1cm4gbmV3IE9ic2VydmVyKHZhcnMpO1xufTtcblxuT2JzZXJ2ZXIucmVnaXN0ZXIgPSBfaW5pdENvcmU7XG5cbk9ic2VydmVyLmdldEFsbCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIF9vYnNlcnZlcnMuc2xpY2UoKTtcbn07XG5cbk9ic2VydmVyLmdldEJ5SWQgPSBmdW5jdGlvbiAoaWQpIHtcbiAgcmV0dXJuIF9vYnNlcnZlcnMuZmlsdGVyKGZ1bmN0aW9uIChvKSB7XG4gICAgcmV0dXJuIG8udmFycy5pZCA9PT0gaWQ7XG4gIH0pWzBdO1xufTtcblxuX2dldEdTQVAoKSAmJiBnc2FwLnJlZ2lzdGVyUGx1Z2luKE9ic2VydmVyKTtcbmV4cG9ydCB7IE9ic2VydmVyIGFzIGRlZmF1bHQsIF9pc1ZpZXdwb3J0LCBfc2Nyb2xsZXJzLCBfZ2V0U2Nyb2xsRnVuYywgX2dldFByb3h5UHJvcCwgX3Byb3hpZXMsIF9nZXRWZWxvY2l0eVByb3AsIF92ZXJ0aWNhbCwgX2hvcml6b250YWwsIF9nZXRUYXJnZXQgfTsiLCIvKiFcbiAqIFNjcm9sbFRyaWdnZXIgMy4xMi41XG4gKiBodHRwczovL2dzYXAuY29tXG4gKlxuICogQGxpY2Vuc2UgQ29weXJpZ2h0IDIwMDgtMjAyNCwgR3JlZW5Tb2NrLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogU3ViamVjdCB0byB0aGUgdGVybXMgYXQgaHR0cHM6Ly9nc2FwLmNvbS9zdGFuZGFyZC1saWNlbnNlIG9yIGZvclxuICogQ2x1YiBHU0FQIG1lbWJlcnMsIHRoZSBhZ3JlZW1lbnQgaXNzdWVkIHdpdGggdGhhdCBtZW1iZXJzaGlwLlxuICogQGF1dGhvcjogSmFjayBEb3lsZSwgamFja0BncmVlbnNvY2suY29tXG4qL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuaW1wb3J0IHsgT2JzZXJ2ZXIsIF9nZXRUYXJnZXQsIF92ZXJ0aWNhbCwgX2hvcml6b250YWwsIF9zY3JvbGxlcnMsIF9wcm94aWVzLCBfZ2V0U2Nyb2xsRnVuYywgX2dldFByb3h5UHJvcCwgX2dldFZlbG9jaXR5UHJvcCB9IGZyb20gXCIuL09ic2VydmVyLmpzXCI7XG5cbnZhciBnc2FwLFxuICAgIF9jb3JlSW5pdHRlZCxcbiAgICBfd2luLFxuICAgIF9kb2MsXG4gICAgX2RvY0VsLFxuICAgIF9ib2R5LFxuICAgIF9yb290LFxuICAgIF9yZXNpemVEZWxheSxcbiAgICBfdG9BcnJheSxcbiAgICBfY2xhbXAsXG4gICAgX3RpbWUyLFxuICAgIF9zeW5jSW50ZXJ2YWwsXG4gICAgX3JlZnJlc2hpbmcsXG4gICAgX3BvaW50ZXJJc0Rvd24sXG4gICAgX3RyYW5zZm9ybVByb3AsXG4gICAgX2ksXG4gICAgX3ByZXZXaWR0aCxcbiAgICBfcHJldkhlaWdodCxcbiAgICBfYXV0b1JlZnJlc2gsXG4gICAgX3NvcnQsXG4gICAgX3N1cHByZXNzT3ZlcndyaXRlcyxcbiAgICBfaWdub3JlUmVzaXplLFxuICAgIF9ub3JtYWxpemVyLFxuICAgIF9pZ25vcmVNb2JpbGVSZXNpemUsXG4gICAgX2Jhc2VTY3JlZW5IZWlnaHQsXG4gICAgX2Jhc2VTY3JlZW5XaWR0aCxcbiAgICBfZml4SU9TQnVnLFxuICAgIF9jb250ZXh0LFxuICAgIF9zY3JvbGxSZXN0b3JhdGlvbixcbiAgICBfZGl2MTAwdmgsXG4gICAgXzEwMHZoLFxuICAgIF9pc1JldmVydGVkLFxuICAgIF9jbGFtcGluZ01heCxcbiAgICBfbGltaXRDYWxsYmFja3MsXG4gICAgLy8gaWYgdHJ1ZSwgd2UnbGwgb25seSB0cmlnZ2VyIGNhbGxiYWNrcyBpZiB0aGUgYWN0aXZlIHN0YXRlIHRvZ2dsZXMsIHNvIGlmIHlvdSBzY3JvbGwgaW1tZWRpYXRlbHkgcGFzdCBib3RoIHRoZSBzdGFydCBhbmQgZW5kIHBvc2l0aW9ucyBvZiBhIFNjcm9sbFRyaWdnZXIgKHRodXMgaW5hY3RpdmUgdG8gaW5hY3RpdmUpLCBuZWl0aGVyIGl0cyBvbkVudGVyIG5vciBvbkxlYXZlIHdpbGwgYmUgY2FsbGVkLiBUaGlzIGlzIHVzZWZ1bCBkdXJpbmcgc3RhcnR1cC5cbl9zdGFydHVwID0gMSxcbiAgICBfZ2V0VGltZSA9IERhdGUubm93LFxuICAgIF90aW1lMSA9IF9nZXRUaW1lKCksXG4gICAgX2xhc3RTY3JvbGxUaW1lID0gMCxcbiAgICBfZW5hYmxlZCA9IDAsXG4gICAgX3BhcnNlQ2xhbXAgPSBmdW5jdGlvbiBfcGFyc2VDbGFtcCh2YWx1ZSwgdHlwZSwgc2VsZikge1xuICB2YXIgY2xhbXAgPSBfaXNTdHJpbmcodmFsdWUpICYmICh2YWx1ZS5zdWJzdHIoMCwgNikgPT09IFwiY2xhbXAoXCIgfHwgdmFsdWUuaW5kZXhPZihcIm1heFwiKSA+IC0xKTtcbiAgc2VsZltcIl9cIiArIHR5cGUgKyBcIkNsYW1wXCJdID0gY2xhbXA7XG4gIHJldHVybiBjbGFtcCA/IHZhbHVlLnN1YnN0cig2LCB2YWx1ZS5sZW5ndGggLSA3KSA6IHZhbHVlO1xufSxcbiAgICBfa2VlcENsYW1wID0gZnVuY3Rpb24gX2tlZXBDbGFtcCh2YWx1ZSwgY2xhbXApIHtcbiAgcmV0dXJuIGNsYW1wICYmICghX2lzU3RyaW5nKHZhbHVlKSB8fCB2YWx1ZS5zdWJzdHIoMCwgNikgIT09IFwiY2xhbXAoXCIpID8gXCJjbGFtcChcIiArIHZhbHVlICsgXCIpXCIgOiB2YWx1ZTtcbn0sXG4gICAgX3JhZkJ1Z0ZpeCA9IGZ1bmN0aW9uIF9yYWZCdWdGaXgoKSB7XG4gIHJldHVybiBfZW5hYmxlZCAmJiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoX3JhZkJ1Z0ZpeCk7XG59LFxuICAgIC8vIGluIHNvbWUgYnJvd3NlcnMgKGxpa2UgRmlyZWZveCksIHNjcmVlbiByZXBhaW50cyB3ZXJlbid0IGNvbnNpc3RlbnQgdW5sZXNzIHdlIGhhZCBTT01FVEhJTkcgcXVldWVkIHVwIGluIHJlcXVlc3RBbmltYXRpb25GcmFtZSgpISBTbyB0aGlzIGp1c3QgY3JlYXRlcyBhIHN1cGVyIHNpbXBsZSBsb29wIHRvIGtlZXAgaXQgYWxpdmUgYW5kIHNtb290aCBvdXQgcmVwYWludHMuXG5fcG9pbnRlckRvd25IYW5kbGVyID0gZnVuY3Rpb24gX3BvaW50ZXJEb3duSGFuZGxlcigpIHtcbiAgcmV0dXJuIF9wb2ludGVySXNEb3duID0gMTtcbn0sXG4gICAgX3BvaW50ZXJVcEhhbmRsZXIgPSBmdW5jdGlvbiBfcG9pbnRlclVwSGFuZGxlcigpIHtcbiAgcmV0dXJuIF9wb2ludGVySXNEb3duID0gMDtcbn0sXG4gICAgX3Bhc3NUaHJvdWdoID0gZnVuY3Rpb24gX3Bhc3NUaHJvdWdoKHYpIHtcbiAgcmV0dXJuIHY7XG59LFxuICAgIF9yb3VuZCA9IGZ1bmN0aW9uIF9yb3VuZCh2YWx1ZSkge1xuICByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSAqIDEwMDAwMCkgLyAxMDAwMDAgfHwgMDtcbn0sXG4gICAgX3dpbmRvd0V4aXN0cyA9IGZ1bmN0aW9uIF93aW5kb3dFeGlzdHMoKSB7XG4gIHJldHVybiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiO1xufSxcbiAgICBfZ2V0R1NBUCA9IGZ1bmN0aW9uIF9nZXRHU0FQKCkge1xuICByZXR1cm4gZ3NhcCB8fCBfd2luZG93RXhpc3RzKCkgJiYgKGdzYXAgPSB3aW5kb3cuZ3NhcCkgJiYgZ3NhcC5yZWdpc3RlclBsdWdpbiAmJiBnc2FwO1xufSxcbiAgICBfaXNWaWV3cG9ydCA9IGZ1bmN0aW9uIF9pc1ZpZXdwb3J0KGUpIHtcbiAgcmV0dXJuICEhfl9yb290LmluZGV4T2YoZSk7XG59LFxuICAgIF9nZXRWaWV3cG9ydERpbWVuc2lvbiA9IGZ1bmN0aW9uIF9nZXRWaWV3cG9ydERpbWVuc2lvbihkaW1lbnNpb25Qcm9wZXJ0eSkge1xuICByZXR1cm4gKGRpbWVuc2lvblByb3BlcnR5ID09PSBcIkhlaWdodFwiID8gXzEwMHZoIDogX3dpbltcImlubmVyXCIgKyBkaW1lbnNpb25Qcm9wZXJ0eV0pIHx8IF9kb2NFbFtcImNsaWVudFwiICsgZGltZW5zaW9uUHJvcGVydHldIHx8IF9ib2R5W1wiY2xpZW50XCIgKyBkaW1lbnNpb25Qcm9wZXJ0eV07XG59LFxuICAgIF9nZXRCb3VuZHNGdW5jID0gZnVuY3Rpb24gX2dldEJvdW5kc0Z1bmMoZWxlbWVudCkge1xuICByZXR1cm4gX2dldFByb3h5UHJvcChlbGVtZW50LCBcImdldEJvdW5kaW5nQ2xpZW50UmVjdFwiKSB8fCAoX2lzVmlld3BvcnQoZWxlbWVudCkgPyBmdW5jdGlvbiAoKSB7XG4gICAgX3dpbk9mZnNldHMud2lkdGggPSBfd2luLmlubmVyV2lkdGg7XG4gICAgX3dpbk9mZnNldHMuaGVpZ2h0ID0gXzEwMHZoO1xuICAgIHJldHVybiBfd2luT2Zmc2V0cztcbiAgfSA6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2dldEJvdW5kcyhlbGVtZW50KTtcbiAgfSk7XG59LFxuICAgIF9nZXRTaXplRnVuYyA9IGZ1bmN0aW9uIF9nZXRTaXplRnVuYyhzY3JvbGxlciwgaXNWaWV3cG9ydCwgX3JlZikge1xuICB2YXIgZCA9IF9yZWYuZCxcbiAgICAgIGQyID0gX3JlZi5kMixcbiAgICAgIGEgPSBfcmVmLmE7XG4gIHJldHVybiAoYSA9IF9nZXRQcm94eVByb3Aoc2Nyb2xsZXIsIFwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0XCIpKSA/IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gYSgpW2RdO1xuICB9IDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAoaXNWaWV3cG9ydCA/IF9nZXRWaWV3cG9ydERpbWVuc2lvbihkMikgOiBzY3JvbGxlcltcImNsaWVudFwiICsgZDJdKSB8fCAwO1xuICB9O1xufSxcbiAgICBfZ2V0T2Zmc2V0c0Z1bmMgPSBmdW5jdGlvbiBfZ2V0T2Zmc2V0c0Z1bmMoZWxlbWVudCwgaXNWaWV3cG9ydCkge1xuICByZXR1cm4gIWlzVmlld3BvcnQgfHwgfl9wcm94aWVzLmluZGV4T2YoZWxlbWVudCkgPyBfZ2V0Qm91bmRzRnVuYyhlbGVtZW50KSA6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX3dpbk9mZnNldHM7XG4gIH07XG59LFxuICAgIF9tYXhTY3JvbGwgPSBmdW5jdGlvbiBfbWF4U2Nyb2xsKGVsZW1lbnQsIF9yZWYyKSB7XG4gIHZhciBzID0gX3JlZjIucyxcbiAgICAgIGQyID0gX3JlZjIuZDIsXG4gICAgICBkID0gX3JlZjIuZCxcbiAgICAgIGEgPSBfcmVmMi5hO1xuICByZXR1cm4gTWF0aC5tYXgoMCwgKHMgPSBcInNjcm9sbFwiICsgZDIpICYmIChhID0gX2dldFByb3h5UHJvcChlbGVtZW50LCBzKSkgPyBhKCkgLSBfZ2V0Qm91bmRzRnVuYyhlbGVtZW50KSgpW2RdIDogX2lzVmlld3BvcnQoZWxlbWVudCkgPyAoX2RvY0VsW3NdIHx8IF9ib2R5W3NdKSAtIF9nZXRWaWV3cG9ydERpbWVuc2lvbihkMikgOiBlbGVtZW50W3NdIC0gZWxlbWVudFtcIm9mZnNldFwiICsgZDJdKTtcbn0sXG4gICAgX2l0ZXJhdGVBdXRvUmVmcmVzaCA9IGZ1bmN0aW9uIF9pdGVyYXRlQXV0b1JlZnJlc2goZnVuYywgZXZlbnRzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgX2F1dG9SZWZyZXNoLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgKCFldmVudHMgfHwgfmV2ZW50cy5pbmRleE9mKF9hdXRvUmVmcmVzaFtpICsgMV0pKSAmJiBmdW5jKF9hdXRvUmVmcmVzaFtpXSwgX2F1dG9SZWZyZXNoW2kgKyAxXSwgX2F1dG9SZWZyZXNoW2kgKyAyXSk7XG4gIH1cbn0sXG4gICAgX2lzU3RyaW5nID0gZnVuY3Rpb24gX2lzU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCI7XG59LFxuICAgIF9pc0Z1bmN0aW9uID0gZnVuY3Rpb24gX2lzRnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiO1xufSxcbiAgICBfaXNOdW1iZXIgPSBmdW5jdGlvbiBfaXNOdW1iZXIodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIjtcbn0sXG4gICAgX2lzT2JqZWN0ID0gZnVuY3Rpb24gX2lzT2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCI7XG59LFxuICAgIF9lbmRBbmltYXRpb24gPSBmdW5jdGlvbiBfZW5kQW5pbWF0aW9uKGFuaW1hdGlvbiwgcmV2ZXJzZWQsIHBhdXNlKSB7XG4gIHJldHVybiBhbmltYXRpb24gJiYgYW5pbWF0aW9uLnByb2dyZXNzKHJldmVyc2VkID8gMCA6IDEpICYmIHBhdXNlICYmIGFuaW1hdGlvbi5wYXVzZSgpO1xufSxcbiAgICBfY2FsbGJhY2sgPSBmdW5jdGlvbiBfY2FsbGJhY2soc2VsZiwgZnVuYykge1xuICBpZiAoc2VsZi5lbmFibGVkKSB7XG4gICAgdmFyIHJlc3VsdCA9IHNlbGYuX2N0eCA/IHNlbGYuX2N0eC5hZGQoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGZ1bmMoc2VsZik7XG4gICAgfSkgOiBmdW5jKHNlbGYpO1xuICAgIHJlc3VsdCAmJiByZXN1bHQudG90YWxUaW1lICYmIChzZWxmLmNhbGxiYWNrQW5pbWF0aW9uID0gcmVzdWx0KTtcbiAgfVxufSxcbiAgICBfYWJzID0gTWF0aC5hYnMsXG4gICAgX2xlZnQgPSBcImxlZnRcIixcbiAgICBfdG9wID0gXCJ0b3BcIixcbiAgICBfcmlnaHQgPSBcInJpZ2h0XCIsXG4gICAgX2JvdHRvbSA9IFwiYm90dG9tXCIsXG4gICAgX3dpZHRoID0gXCJ3aWR0aFwiLFxuICAgIF9oZWlnaHQgPSBcImhlaWdodFwiLFxuICAgIF9SaWdodCA9IFwiUmlnaHRcIixcbiAgICBfTGVmdCA9IFwiTGVmdFwiLFxuICAgIF9Ub3AgPSBcIlRvcFwiLFxuICAgIF9Cb3R0b20gPSBcIkJvdHRvbVwiLFxuICAgIF9wYWRkaW5nID0gXCJwYWRkaW5nXCIsXG4gICAgX21hcmdpbiA9IFwibWFyZ2luXCIsXG4gICAgX1dpZHRoID0gXCJXaWR0aFwiLFxuICAgIF9IZWlnaHQgPSBcIkhlaWdodFwiLFxuICAgIF9weCA9IFwicHhcIixcbiAgICBfZ2V0Q29tcHV0ZWRTdHlsZSA9IGZ1bmN0aW9uIF9nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpIHtcbiAgcmV0dXJuIF93aW4uZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcbn0sXG4gICAgX21ha2VQb3NpdGlvbmFibGUgPSBmdW5jdGlvbiBfbWFrZVBvc2l0aW9uYWJsZShlbGVtZW50KSB7XG4gIC8vIGlmIHRoZSBlbGVtZW50IGFscmVhZHkgaGFzIHBvc2l0aW9uOiBhYnNvbHV0ZSBvciBmaXhlZCwgbGVhdmUgdGhhdCwgb3RoZXJ3aXNlIG1ha2UgaXQgcG9zaXRpb246IHJlbGF0aXZlXG4gIHZhciBwb3NpdGlvbiA9IF9nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpLnBvc2l0aW9uO1xuXG4gIGVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSBwb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiIHx8IHBvc2l0aW9uID09PSBcImZpeGVkXCIgPyBwb3NpdGlvbiA6IFwicmVsYXRpdmVcIjtcbn0sXG4gICAgX3NldERlZmF1bHRzID0gZnVuY3Rpb24gX3NldERlZmF1bHRzKG9iaiwgZGVmYXVsdHMpIHtcbiAgZm9yICh2YXIgcCBpbiBkZWZhdWx0cykge1xuICAgIHAgaW4gb2JqIHx8IChvYmpbcF0gPSBkZWZhdWx0c1twXSk7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufSxcbiAgICBfZ2V0Qm91bmRzID0gZnVuY3Rpb24gX2dldEJvdW5kcyhlbGVtZW50LCB3aXRob3V0VHJhbnNmb3Jtcykge1xuICB2YXIgdHdlZW4gPSB3aXRob3V0VHJhbnNmb3JtcyAmJiBfZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KVtfdHJhbnNmb3JtUHJvcF0gIT09IFwibWF0cml4KDEsIDAsIDAsIDEsIDAsIDApXCIgJiYgZ3NhcC50byhlbGVtZW50LCB7XG4gICAgeDogMCxcbiAgICB5OiAwLFxuICAgIHhQZXJjZW50OiAwLFxuICAgIHlQZXJjZW50OiAwLFxuICAgIHJvdGF0aW9uOiAwLFxuICAgIHJvdGF0aW9uWDogMCxcbiAgICByb3RhdGlvblk6IDAsXG4gICAgc2NhbGU6IDEsXG4gICAgc2tld1g6IDAsXG4gICAgc2tld1k6IDBcbiAgfSkucHJvZ3Jlc3MoMSksXG4gICAgICBib3VuZHMgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICB0d2VlbiAmJiB0d2Vlbi5wcm9ncmVzcygwKS5raWxsKCk7XG4gIHJldHVybiBib3VuZHM7XG59LFxuICAgIF9nZXRTaXplID0gZnVuY3Rpb24gX2dldFNpemUoZWxlbWVudCwgX3JlZjMpIHtcbiAgdmFyIGQyID0gX3JlZjMuZDI7XG4gIHJldHVybiBlbGVtZW50W1wib2Zmc2V0XCIgKyBkMl0gfHwgZWxlbWVudFtcImNsaWVudFwiICsgZDJdIHx8IDA7XG59LFxuICAgIF9nZXRMYWJlbFJhdGlvQXJyYXkgPSBmdW5jdGlvbiBfZ2V0TGFiZWxSYXRpb0FycmF5KHRpbWVsaW5lKSB7XG4gIHZhciBhID0gW10sXG4gICAgICBsYWJlbHMgPSB0aW1lbGluZS5sYWJlbHMsXG4gICAgICBkdXJhdGlvbiA9IHRpbWVsaW5lLmR1cmF0aW9uKCksXG4gICAgICBwO1xuXG4gIGZvciAocCBpbiBsYWJlbHMpIHtcbiAgICBhLnB1c2gobGFiZWxzW3BdIC8gZHVyYXRpb24pO1xuICB9XG5cbiAgcmV0dXJuIGE7XG59LFxuICAgIF9nZXRDbG9zZXN0TGFiZWwgPSBmdW5jdGlvbiBfZ2V0Q2xvc2VzdExhYmVsKGFuaW1hdGlvbikge1xuICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIGdzYXAudXRpbHMuc25hcChfZ2V0TGFiZWxSYXRpb0FycmF5KGFuaW1hdGlvbiksIHZhbHVlKTtcbiAgfTtcbn0sXG4gICAgX3NuYXBEaXJlY3Rpb25hbCA9IGZ1bmN0aW9uIF9zbmFwRGlyZWN0aW9uYWwoc25hcEluY3JlbWVudE9yQXJyYXkpIHtcbiAgdmFyIHNuYXAgPSBnc2FwLnV0aWxzLnNuYXAoc25hcEluY3JlbWVudE9yQXJyYXkpLFxuICAgICAgYSA9IEFycmF5LmlzQXJyYXkoc25hcEluY3JlbWVudE9yQXJyYXkpICYmIHNuYXBJbmNyZW1lbnRPckFycmF5LnNsaWNlKDApLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gYSAtIGI7XG4gIH0pO1xuICByZXR1cm4gYSA/IGZ1bmN0aW9uICh2YWx1ZSwgZGlyZWN0aW9uLCB0aHJlc2hvbGQpIHtcbiAgICBpZiAodGhyZXNob2xkID09PSB2b2lkIDApIHtcbiAgICAgIHRocmVzaG9sZCA9IDFlLTM7XG4gICAgfVxuXG4gICAgdmFyIGk7XG5cbiAgICBpZiAoIWRpcmVjdGlvbikge1xuICAgICAgcmV0dXJuIHNuYXAodmFsdWUpO1xuICAgIH1cblxuICAgIGlmIChkaXJlY3Rpb24gPiAwKSB7XG4gICAgICB2YWx1ZSAtPSB0aHJlc2hvbGQ7IC8vIHRvIGF2b2lkIHJvdW5kaW5nIGVycm9ycy4gSWYgd2UncmUgdG9vIHN0cmljdCwgaXQgbWlnaHQgc25hcCBmb3J3YXJkLCB0aGVuIGltbWVkaWF0ZWx5IGFnYWluLCBhbmQgYWdhaW4uXG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChhW2ldID49IHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIGFbaV07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFbaSAtIDFdO1xuICAgIH0gZWxzZSB7XG4gICAgICBpID0gYS5sZW5ndGg7XG4gICAgICB2YWx1ZSArPSB0aHJlc2hvbGQ7XG5cbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgaWYgKGFbaV0gPD0gdmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gYVtpXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBhWzBdO1xuICB9IDogZnVuY3Rpb24gKHZhbHVlLCBkaXJlY3Rpb24sIHRocmVzaG9sZCkge1xuICAgIGlmICh0aHJlc2hvbGQgPT09IHZvaWQgMCkge1xuICAgICAgdGhyZXNob2xkID0gMWUtMztcbiAgICB9XG5cbiAgICB2YXIgc25hcHBlZCA9IHNuYXAodmFsdWUpO1xuICAgIHJldHVybiAhZGlyZWN0aW9uIHx8IE1hdGguYWJzKHNuYXBwZWQgLSB2YWx1ZSkgPCB0aHJlc2hvbGQgfHwgc25hcHBlZCAtIHZhbHVlIDwgMCA9PT0gZGlyZWN0aW9uIDwgMCA/IHNuYXBwZWQgOiBzbmFwKGRpcmVjdGlvbiA8IDAgPyB2YWx1ZSAtIHNuYXBJbmNyZW1lbnRPckFycmF5IDogdmFsdWUgKyBzbmFwSW5jcmVtZW50T3JBcnJheSk7XG4gIH07XG59LFxuICAgIF9nZXRMYWJlbEF0RGlyZWN0aW9uID0gZnVuY3Rpb24gX2dldExhYmVsQXREaXJlY3Rpb24odGltZWxpbmUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSwgc3QpIHtcbiAgICByZXR1cm4gX3NuYXBEaXJlY3Rpb25hbChfZ2V0TGFiZWxSYXRpb0FycmF5KHRpbWVsaW5lKSkodmFsdWUsIHN0LmRpcmVjdGlvbik7XG4gIH07XG59LFxuICAgIF9tdWx0aUxpc3RlbmVyID0gZnVuY3Rpb24gX211bHRpTGlzdGVuZXIoZnVuYywgZWxlbWVudCwgdHlwZXMsIGNhbGxiYWNrKSB7XG4gIHJldHVybiB0eXBlcy5zcGxpdChcIixcIikuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgIHJldHVybiBmdW5jKGVsZW1lbnQsIHR5cGUsIGNhbGxiYWNrKTtcbiAgfSk7XG59LFxuICAgIF9hZGRMaXN0ZW5lciA9IGZ1bmN0aW9uIF9hZGRMaXN0ZW5lcihlbGVtZW50LCB0eXBlLCBmdW5jLCBub25QYXNzaXZlLCBjYXB0dXJlKSB7XG4gIHJldHVybiBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgZnVuYywge1xuICAgIHBhc3NpdmU6ICFub25QYXNzaXZlLFxuICAgIGNhcHR1cmU6ICEhY2FwdHVyZVxuICB9KTtcbn0sXG4gICAgX3JlbW92ZUxpc3RlbmVyID0gZnVuY3Rpb24gX3JlbW92ZUxpc3RlbmVyKGVsZW1lbnQsIHR5cGUsIGZ1bmMsIGNhcHR1cmUpIHtcbiAgcmV0dXJuIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBmdW5jLCAhIWNhcHR1cmUpO1xufSxcbiAgICBfd2hlZWxMaXN0ZW5lciA9IGZ1bmN0aW9uIF93aGVlbExpc3RlbmVyKGZ1bmMsIGVsLCBzY3JvbGxGdW5jKSB7XG4gIHNjcm9sbEZ1bmMgPSBzY3JvbGxGdW5jICYmIHNjcm9sbEZ1bmMud2hlZWxIYW5kbGVyO1xuXG4gIGlmIChzY3JvbGxGdW5jKSB7XG4gICAgZnVuYyhlbCwgXCJ3aGVlbFwiLCBzY3JvbGxGdW5jKTtcbiAgICBmdW5jKGVsLCBcInRvdWNobW92ZVwiLCBzY3JvbGxGdW5jKTtcbiAgfVxufSxcbiAgICBfbWFya2VyRGVmYXVsdHMgPSB7XG4gIHN0YXJ0Q29sb3I6IFwiZ3JlZW5cIixcbiAgZW5kQ29sb3I6IFwicmVkXCIsXG4gIGluZGVudDogMCxcbiAgZm9udFNpemU6IFwiMTZweFwiLFxuICBmb250V2VpZ2h0OiBcIm5vcm1hbFwiXG59LFxuICAgIF9kZWZhdWx0cyA9IHtcbiAgdG9nZ2xlQWN0aW9uczogXCJwbGF5XCIsXG4gIGFudGljaXBhdGVQaW46IDBcbn0sXG4gICAgX2tleXdvcmRzID0ge1xuICB0b3A6IDAsXG4gIGxlZnQ6IDAsXG4gIGNlbnRlcjogMC41LFxuICBib3R0b206IDEsXG4gIHJpZ2h0OiAxXG59LFxuICAgIF9vZmZzZXRUb1B4ID0gZnVuY3Rpb24gX29mZnNldFRvUHgodmFsdWUsIHNpemUpIHtcbiAgaWYgKF9pc1N0cmluZyh2YWx1ZSkpIHtcbiAgICB2YXIgZXFJbmRleCA9IHZhbHVlLmluZGV4T2YoXCI9XCIpLFxuICAgICAgICByZWxhdGl2ZSA9IH5lcUluZGV4ID8gKyh2YWx1ZS5jaGFyQXQoZXFJbmRleCAtIDEpICsgMSkgKiBwYXJzZUZsb2F0KHZhbHVlLnN1YnN0cihlcUluZGV4ICsgMSkpIDogMDtcblxuICAgIGlmICh+ZXFJbmRleCkge1xuICAgICAgdmFsdWUuaW5kZXhPZihcIiVcIikgPiBlcUluZGV4ICYmIChyZWxhdGl2ZSAqPSBzaXplIC8gMTAwKTtcbiAgICAgIHZhbHVlID0gdmFsdWUuc3Vic3RyKDAsIGVxSW5kZXggLSAxKTtcbiAgICB9XG5cbiAgICB2YWx1ZSA9IHJlbGF0aXZlICsgKHZhbHVlIGluIF9rZXl3b3JkcyA/IF9rZXl3b3Jkc1t2YWx1ZV0gKiBzaXplIDogfnZhbHVlLmluZGV4T2YoXCIlXCIpID8gcGFyc2VGbG9hdCh2YWx1ZSkgKiBzaXplIC8gMTAwIDogcGFyc2VGbG9hdCh2YWx1ZSkgfHwgMCk7XG4gIH1cblxuICByZXR1cm4gdmFsdWU7XG59LFxuICAgIF9jcmVhdGVNYXJrZXIgPSBmdW5jdGlvbiBfY3JlYXRlTWFya2VyKHR5cGUsIG5hbWUsIGNvbnRhaW5lciwgZGlyZWN0aW9uLCBfcmVmNCwgb2Zmc2V0LCBtYXRjaFdpZHRoRWwsIGNvbnRhaW5lckFuaW1hdGlvbikge1xuICB2YXIgc3RhcnRDb2xvciA9IF9yZWY0LnN0YXJ0Q29sb3IsXG4gICAgICBlbmRDb2xvciA9IF9yZWY0LmVuZENvbG9yLFxuICAgICAgZm9udFNpemUgPSBfcmVmNC5mb250U2l6ZSxcbiAgICAgIGluZGVudCA9IF9yZWY0LmluZGVudCxcbiAgICAgIGZvbnRXZWlnaHQgPSBfcmVmNC5mb250V2VpZ2h0O1xuXG4gIHZhciBlID0gX2RvYy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLFxuICAgICAgdXNlRml4ZWRQb3NpdGlvbiA9IF9pc1ZpZXdwb3J0KGNvbnRhaW5lcikgfHwgX2dldFByb3h5UHJvcChjb250YWluZXIsIFwicGluVHlwZVwiKSA9PT0gXCJmaXhlZFwiLFxuICAgICAgaXNTY3JvbGxlciA9IHR5cGUuaW5kZXhPZihcInNjcm9sbGVyXCIpICE9PSAtMSxcbiAgICAgIHBhcmVudCA9IHVzZUZpeGVkUG9zaXRpb24gPyBfYm9keSA6IGNvbnRhaW5lcixcbiAgICAgIGlzU3RhcnQgPSB0eXBlLmluZGV4T2YoXCJzdGFydFwiKSAhPT0gLTEsXG4gICAgICBjb2xvciA9IGlzU3RhcnQgPyBzdGFydENvbG9yIDogZW5kQ29sb3IsXG4gICAgICBjc3MgPSBcImJvcmRlci1jb2xvcjpcIiArIGNvbG9yICsgXCI7Zm9udC1zaXplOlwiICsgZm9udFNpemUgKyBcIjtjb2xvcjpcIiArIGNvbG9yICsgXCI7Zm9udC13ZWlnaHQ6XCIgKyBmb250V2VpZ2h0ICsgXCI7cG9pbnRlci1ldmVudHM6bm9uZTt3aGl0ZS1zcGFjZTpub3dyYXA7Zm9udC1mYW1pbHk6c2Fucy1zZXJpZixBcmlhbDt6LWluZGV4OjEwMDA7cGFkZGluZzo0cHggOHB4O2JvcmRlci13aWR0aDowO2JvcmRlci1zdHlsZTpzb2xpZDtcIjtcblxuICBjc3MgKz0gXCJwb3NpdGlvbjpcIiArICgoaXNTY3JvbGxlciB8fCBjb250YWluZXJBbmltYXRpb24pICYmIHVzZUZpeGVkUG9zaXRpb24gPyBcImZpeGVkO1wiIDogXCJhYnNvbHV0ZTtcIik7XG4gIChpc1Njcm9sbGVyIHx8IGNvbnRhaW5lckFuaW1hdGlvbiB8fCAhdXNlRml4ZWRQb3NpdGlvbikgJiYgKGNzcyArPSAoZGlyZWN0aW9uID09PSBfdmVydGljYWwgPyBfcmlnaHQgOiBfYm90dG9tKSArIFwiOlwiICsgKG9mZnNldCArIHBhcnNlRmxvYXQoaW5kZW50KSkgKyBcInB4O1wiKTtcbiAgbWF0Y2hXaWR0aEVsICYmIChjc3MgKz0gXCJib3gtc2l6aW5nOmJvcmRlci1ib3g7dGV4dC1hbGlnbjpsZWZ0O3dpZHRoOlwiICsgbWF0Y2hXaWR0aEVsLm9mZnNldFdpZHRoICsgXCJweDtcIik7XG4gIGUuX2lzU3RhcnQgPSBpc1N0YXJ0O1xuICBlLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwiZ3NhcC1tYXJrZXItXCIgKyB0eXBlICsgKG5hbWUgPyBcIiBtYXJrZXItXCIgKyBuYW1lIDogXCJcIikpO1xuICBlLnN0eWxlLmNzc1RleHQgPSBjc3M7XG4gIGUuaW5uZXJUZXh0ID0gbmFtZSB8fCBuYW1lID09PSAwID8gdHlwZSArIFwiLVwiICsgbmFtZSA6IHR5cGU7XG4gIHBhcmVudC5jaGlsZHJlblswXSA/IHBhcmVudC5pbnNlcnRCZWZvcmUoZSwgcGFyZW50LmNoaWxkcmVuWzBdKSA6IHBhcmVudC5hcHBlbmRDaGlsZChlKTtcbiAgZS5fb2Zmc2V0ID0gZVtcIm9mZnNldFwiICsgZGlyZWN0aW9uLm9wLmQyXTtcblxuICBfcG9zaXRpb25NYXJrZXIoZSwgMCwgZGlyZWN0aW9uLCBpc1N0YXJ0KTtcblxuICByZXR1cm4gZTtcbn0sXG4gICAgX3Bvc2l0aW9uTWFya2VyID0gZnVuY3Rpb24gX3Bvc2l0aW9uTWFya2VyKG1hcmtlciwgc3RhcnQsIGRpcmVjdGlvbiwgZmxpcHBlZCkge1xuICB2YXIgdmFycyA9IHtcbiAgICBkaXNwbGF5OiBcImJsb2NrXCJcbiAgfSxcbiAgICAgIHNpZGUgPSBkaXJlY3Rpb25bZmxpcHBlZCA/IFwib3MyXCIgOiBcInAyXCJdLFxuICAgICAgb3Bwb3NpdGVTaWRlID0gZGlyZWN0aW9uW2ZsaXBwZWQgPyBcInAyXCIgOiBcIm9zMlwiXTtcbiAgbWFya2VyLl9pc0ZsaXBwZWQgPSBmbGlwcGVkO1xuICB2YXJzW2RpcmVjdGlvbi5hICsgXCJQZXJjZW50XCJdID0gZmxpcHBlZCA/IC0xMDAgOiAwO1xuICB2YXJzW2RpcmVjdGlvbi5hXSA9IGZsaXBwZWQgPyBcIjFweFwiIDogMDtcbiAgdmFyc1tcImJvcmRlclwiICsgc2lkZSArIF9XaWR0aF0gPSAxO1xuICB2YXJzW1wiYm9yZGVyXCIgKyBvcHBvc2l0ZVNpZGUgKyBfV2lkdGhdID0gMDtcbiAgdmFyc1tkaXJlY3Rpb24ucF0gPSBzdGFydCArIFwicHhcIjtcbiAgZ3NhcC5zZXQobWFya2VyLCB2YXJzKTtcbn0sXG4gICAgX3RyaWdnZXJzID0gW10sXG4gICAgX2lkcyA9IHt9LFxuICAgIF9yYWZJRCxcbiAgICBfc3luYyA9IGZ1bmN0aW9uIF9zeW5jKCkge1xuICByZXR1cm4gX2dldFRpbWUoKSAtIF9sYXN0U2Nyb2xsVGltZSA+IDM0ICYmIChfcmFmSUQgfHwgKF9yYWZJRCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShfdXBkYXRlQWxsKSkpO1xufSxcbiAgICBfb25TY3JvbGwgPSBmdW5jdGlvbiBfb25TY3JvbGwoKSB7XG4gIC8vIHByZXZpb3VzbHksIHdlIHRyaWVkIHRvIG9wdGltaXplIHBlcmZvcm1hbmNlIGJ5IGJhdGNoaW5nL2RlZmVycmluZyB0byB0aGUgbmV4dCByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKSwgYnV0IGRpc2NvdmVyZWQgdGhhdCBTYWZhcmkgaGFzIGEgZmV3IGJ1Z3MgdGhhdCBtYWtlIHRoaXMgdW53b3JrYWJsZSAoZXNwZWNpYWxseSBvbiBpT1MpLiBTZWUgaHR0cHM6Ly9jb2RlcGVuLmlvL0dyZWVuU29jay9wZW4vMTZjNDM1YjEyZWYwOWMzODEyNTIwNDgxOGU3YjQ1ZmM/ZWRpdG9ycz0wMDEwIGFuZCBodHRwczovL2NvZGVwZW4uaW8vR3JlZW5Tb2NrL3Blbi9Kak94WXBRLzNkZDY1Y2NlYzVhNjBmMWQ4NjJjMzU1ZDg0ZDE0NTYyP2VkaXRvcnM9MDAxMCBhbmQgaHR0cHM6Ly9jb2RlcGVuLmlvL0dyZWVuU29jay9wZW4vRXhiclBOYS8wODdjZWYxOTdkYzM1NDQ1YTA5NTFlODkzNWM0MTUwMz9lZGl0b3JzPTAwMTBcbiAgaWYgKCFfbm9ybWFsaXplciB8fCAhX25vcm1hbGl6ZXIuaXNQcmVzc2VkIHx8IF9ub3JtYWxpemVyLnN0YXJ0WCA+IF9ib2R5LmNsaWVudFdpZHRoKSB7XG4gICAgLy8gaWYgdGhlIHVzZXIgaXMgZHJhZ2dpbmcgdGhlIHNjcm9sbGJhciwgYWxsb3cgaXQuXG4gICAgX3Njcm9sbGVycy5jYWNoZSsrO1xuXG4gICAgaWYgKF9ub3JtYWxpemVyKSB7XG4gICAgICBfcmFmSUQgfHwgKF9yYWZJRCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShfdXBkYXRlQWxsKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIF91cGRhdGVBbGwoKTsgLy8gU2FmYXJpIGluIHBhcnRpY3VsYXIgKG9uIGRlc2t0b3ApIE5FRURTIHRoZSBpbW1lZGlhdGUgdXBkYXRlIHJhdGhlciB0aGFuIHdhaXRpbmcgZm9yIGEgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCkgd2hlcmVhcyBpT1Mgc2VlbXMgdG8gYmVuZWZpdCBmcm9tIHdhaXRpbmcgZm9yIHRoZSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKSB0aWNrLCBhdCBsZWFzdCB3aGVuIG5vcm1hbGl6aW5nLiBTZWUgaHR0cHM6Ly9jb2RlcGVuLmlvL0dyZWVuU29jay9wZW4vcUJZb3pxTz9lZGl0b3JzPTAxMTBcblxuICAgIH1cblxuICAgIF9sYXN0U2Nyb2xsVGltZSB8fCBfZGlzcGF0Y2goXCJzY3JvbGxTdGFydFwiKTtcbiAgICBfbGFzdFNjcm9sbFRpbWUgPSBfZ2V0VGltZSgpO1xuICB9XG59LFxuICAgIF9zZXRCYXNlRGltZW5zaW9ucyA9IGZ1bmN0aW9uIF9zZXRCYXNlRGltZW5zaW9ucygpIHtcbiAgX2Jhc2VTY3JlZW5XaWR0aCA9IF93aW4uaW5uZXJXaWR0aDtcbiAgX2Jhc2VTY3JlZW5IZWlnaHQgPSBfd2luLmlubmVySGVpZ2h0O1xufSxcbiAgICBfb25SZXNpemUgPSBmdW5jdGlvbiBfb25SZXNpemUoKSB7XG4gIF9zY3JvbGxlcnMuY2FjaGUrKztcbiAgIV9yZWZyZXNoaW5nICYmICFfaWdub3JlUmVzaXplICYmICFfZG9jLmZ1bGxzY3JlZW5FbGVtZW50ICYmICFfZG9jLndlYmtpdEZ1bGxzY3JlZW5FbGVtZW50ICYmICghX2lnbm9yZU1vYmlsZVJlc2l6ZSB8fCBfYmFzZVNjcmVlbldpZHRoICE9PSBfd2luLmlubmVyV2lkdGggfHwgTWF0aC5hYnMoX3dpbi5pbm5lckhlaWdodCAtIF9iYXNlU2NyZWVuSGVpZ2h0KSA+IF93aW4uaW5uZXJIZWlnaHQgKiAwLjI1KSAmJiBfcmVzaXplRGVsYXkucmVzdGFydCh0cnVlKTtcbn0sXG4gICAgLy8gaWdub3JlIHJlc2l6ZXMgdHJpZ2dlcmVkIGJ5IHJlZnJlc2goKVxuX2xpc3RlbmVycyA9IHt9LFxuICAgIF9lbXB0eUFycmF5ID0gW10sXG4gICAgX3NvZnRSZWZyZXNoID0gZnVuY3Rpb24gX3NvZnRSZWZyZXNoKCkge1xuICByZXR1cm4gX3JlbW92ZUxpc3RlbmVyKFNjcm9sbFRyaWdnZXIsIFwic2Nyb2xsRW5kXCIsIF9zb2Z0UmVmcmVzaCkgfHwgX3JlZnJlc2hBbGwodHJ1ZSk7XG59LFxuICAgIF9kaXNwYXRjaCA9IGZ1bmN0aW9uIF9kaXNwYXRjaCh0eXBlKSB7XG4gIHJldHVybiBfbGlzdGVuZXJzW3R5cGVdICYmIF9saXN0ZW5lcnNbdHlwZV0ubWFwKGZ1bmN0aW9uIChmKSB7XG4gICAgcmV0dXJuIGYoKTtcbiAgfSkgfHwgX2VtcHR5QXJyYXk7XG59LFxuICAgIF9zYXZlZFN0eWxlcyA9IFtdLFxuICAgIC8vIHdoZW4gU2Nyb2xsVHJpZ2dlci5zYXZlU3R5bGVzKCkgaXMgY2FsbGVkLCB0aGUgaW5saW5lIHN0eWxlcyBhcmUgcmVjb3JkZWQgaW4gdGhpcyBBcnJheSBpbiBhIHNlcXVlbnRpYWwgZm9ybWF0IGxpa2UgW2VsZW1lbnQsIGNzc1RleHQsIGdzQ2FjaGUsIG1lZGlhXS4gVGhpcyBrZWVwcyBpdCB2ZXJ5IG1lbW9yeS1lZmZpY2llbnQgYW5kIGZhc3QgdG8gaXRlcmF0ZSB0aHJvdWdoLlxuX3JldmVydFJlY29yZGVkID0gZnVuY3Rpb24gX3JldmVydFJlY29yZGVkKG1lZGlhKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgX3NhdmVkU3R5bGVzLmxlbmd0aDsgaSArPSA1KSB7XG4gICAgaWYgKCFtZWRpYSB8fCBfc2F2ZWRTdHlsZXNbaSArIDRdICYmIF9zYXZlZFN0eWxlc1tpICsgNF0ucXVlcnkgPT09IG1lZGlhKSB7XG4gICAgICBfc2F2ZWRTdHlsZXNbaV0uc3R5bGUuY3NzVGV4dCA9IF9zYXZlZFN0eWxlc1tpICsgMV07XG4gICAgICBfc2F2ZWRTdHlsZXNbaV0uZ2V0QkJveCAmJiBfc2F2ZWRTdHlsZXNbaV0uc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIF9zYXZlZFN0eWxlc1tpICsgMl0gfHwgXCJcIik7XG4gICAgICBfc2F2ZWRTdHlsZXNbaSArIDNdLnVuY2FjaGUgPSAxO1xuICAgIH1cbiAgfVxufSxcbiAgICBfcmV2ZXJ0QWxsID0gZnVuY3Rpb24gX3JldmVydEFsbChraWxsLCBtZWRpYSkge1xuICB2YXIgdHJpZ2dlcjtcblxuICBmb3IgKF9pID0gMDsgX2kgPCBfdHJpZ2dlcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgdHJpZ2dlciA9IF90cmlnZ2Vyc1tfaV07XG5cbiAgICBpZiAodHJpZ2dlciAmJiAoIW1lZGlhIHx8IHRyaWdnZXIuX2N0eCA9PT0gbWVkaWEpKSB7XG4gICAgICBpZiAoa2lsbCkge1xuICAgICAgICB0cmlnZ2VyLmtpbGwoMSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0cmlnZ2VyLnJldmVydCh0cnVlLCB0cnVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBfaXNSZXZlcnRlZCA9IHRydWU7XG4gIG1lZGlhICYmIF9yZXZlcnRSZWNvcmRlZChtZWRpYSk7XG4gIG1lZGlhIHx8IF9kaXNwYXRjaChcInJldmVydFwiKTtcbn0sXG4gICAgX2NsZWFyU2Nyb2xsTWVtb3J5ID0gZnVuY3Rpb24gX2NsZWFyU2Nyb2xsTWVtb3J5KHNjcm9sbFJlc3RvcmF0aW9uLCBmb3JjZSkge1xuICAvLyB6ZXJvLW91dCBhbGwgdGhlIHJlY29yZGVkIHNjcm9sbCBwb3NpdGlvbnMuIERvbid0IHVzZSBfdHJpZ2dlcnMgYmVjYXVzZSBpZiwgZm9yIGV4YW1wbGUsIC5tYXRjaE1lZGlhKCkgaXMgdXNlZCB0byBjcmVhdGUgc29tZSBTY3JvbGxUcmlnZ2VycyBhbmQgdGhlbiB0aGUgdXNlciByZXNpemVzIGFuZCBpdCByZW1vdmVzIEFMTCBTY3JvbGxUcmlnZ2VycywgYW5kIHRoZW4gZ28gYmFjayB0byBhIHNpemUgd2hlcmUgdGhlcmUgYXJlIFNjcm9sbFRyaWdnZXJzLCBpdCB3b3VsZCBoYXZlIGtlcHQgdGhlIHBvc2l0aW9uKHMpIHNhdmVkIGZyb20gdGhlIGluaXRpYWwgc3RhdGUuXG4gIF9zY3JvbGxlcnMuY2FjaGUrKztcbiAgKGZvcmNlIHx8ICFfcmVmcmVzaGluZ0FsbCkgJiYgX3Njcm9sbGVycy5mb3JFYWNoKGZ1bmN0aW9uIChvYmopIHtcbiAgICByZXR1cm4gX2lzRnVuY3Rpb24ob2JqKSAmJiBvYmouY2FjaGVJRCsrICYmIChvYmoucmVjID0gMCk7XG4gIH0pO1xuICBfaXNTdHJpbmcoc2Nyb2xsUmVzdG9yYXRpb24pICYmIChfd2luLmhpc3Rvcnkuc2Nyb2xsUmVzdG9yYXRpb24gPSBfc2Nyb2xsUmVzdG9yYXRpb24gPSBzY3JvbGxSZXN0b3JhdGlvbik7XG59LFxuICAgIF9yZWZyZXNoaW5nQWxsLFxuICAgIF9yZWZyZXNoSUQgPSAwLFxuICAgIF9xdWV1ZVJlZnJlc2hJRCxcbiAgICBfcXVldWVSZWZyZXNoQWxsID0gZnVuY3Rpb24gX3F1ZXVlUmVmcmVzaEFsbCgpIHtcbiAgLy8gd2UgZG9uJ3Qgd2FudCB0byBjYWxsIF9yZWZyZXNoQWxsKCkgZXZlcnkgdGltZSB3ZSBjcmVhdGUgYSBuZXcgU2Nyb2xsVHJpZ2dlciAoZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMpIC0gaXQncyBiZXR0ZXIgdG8gYmF0Y2ggdGhlbS4gU29tZSBmcmFtZXdvcmtzIGR5bmFtaWNhbGx5IGxvYWQgY29udGVudCBhbmQgd2UgY2FuJ3QgcmVseSBvbiB0aGUgd2luZG93J3MgXCJsb2FkXCIgb3IgXCJET01Db250ZW50TG9hZGVkXCIgZXZlbnRzIHRvIHRyaWdnZXIgaXQuXG4gIGlmIChfcXVldWVSZWZyZXNoSUQgIT09IF9yZWZyZXNoSUQpIHtcbiAgICB2YXIgaWQgPSBfcXVldWVSZWZyZXNoSUQgPSBfcmVmcmVzaElEO1xuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gaWQgPT09IF9yZWZyZXNoSUQgJiYgX3JlZnJlc2hBbGwodHJ1ZSk7XG4gICAgfSk7XG4gIH1cbn0sXG4gICAgX3JlZnJlc2gxMDB2aCA9IGZ1bmN0aW9uIF9yZWZyZXNoMTAwdmgoKSB7XG4gIF9ib2R5LmFwcGVuZENoaWxkKF9kaXYxMDB2aCk7XG5cbiAgXzEwMHZoID0gIV9ub3JtYWxpemVyICYmIF9kaXYxMDB2aC5vZmZzZXRIZWlnaHQgfHwgX3dpbi5pbm5lckhlaWdodDtcblxuICBfYm9keS5yZW1vdmVDaGlsZChfZGl2MTAwdmgpO1xufSxcbiAgICBfaGlkZUFsbE1hcmtlcnMgPSBmdW5jdGlvbiBfaGlkZUFsbE1hcmtlcnMoaGlkZSkge1xuICByZXR1cm4gX3RvQXJyYXkoXCIuZ3NhcC1tYXJrZXItc3RhcnQsIC5nc2FwLW1hcmtlci1lbmQsIC5nc2FwLW1hcmtlci1zY3JvbGxlci1zdGFydCwgLmdzYXAtbWFya2VyLXNjcm9sbGVyLWVuZFwiKS5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgIHJldHVybiBlbC5zdHlsZS5kaXNwbGF5ID0gaGlkZSA/IFwibm9uZVwiIDogXCJibG9ja1wiO1xuICB9KTtcbn0sXG4gICAgX3JlZnJlc2hBbGwgPSBmdW5jdGlvbiBfcmVmcmVzaEFsbChmb3JjZSwgc2tpcFJldmVydCkge1xuICBpZiAoX2xhc3RTY3JvbGxUaW1lICYmICFmb3JjZSAmJiAhX2lzUmV2ZXJ0ZWQpIHtcbiAgICBfYWRkTGlzdGVuZXIoU2Nyb2xsVHJpZ2dlciwgXCJzY3JvbGxFbmRcIiwgX3NvZnRSZWZyZXNoKTtcblxuICAgIHJldHVybjtcbiAgfVxuXG4gIF9yZWZyZXNoMTAwdmgoKTtcblxuICBfcmVmcmVzaGluZ0FsbCA9IFNjcm9sbFRyaWdnZXIuaXNSZWZyZXNoaW5nID0gdHJ1ZTtcblxuICBfc2Nyb2xsZXJzLmZvckVhY2goZnVuY3Rpb24gKG9iaikge1xuICAgIHJldHVybiBfaXNGdW5jdGlvbihvYmopICYmICsrb2JqLmNhY2hlSUQgJiYgKG9iai5yZWMgPSBvYmooKSk7XG4gIH0pOyAvLyBmb3JjZSB0aGUgY2xlYXJpbmcgb2YgdGhlIGNhY2hlIGJlY2F1c2Ugc29tZSBicm93c2VycyB0YWtlIGEgbGl0dGxlIHdoaWxlIHRvIGRpc3BhdGNoIHRoZSBcInNjcm9sbFwiIGV2ZW50IGFuZCB0aGUgdXNlciBtYXkgaGF2ZSBjaGFuZ2VkIHRoZSBzY3JvbGwgcG9zaXRpb24gYW5kIHRoZW4gY2FsbGVkIFNjcm9sbFRyaWdnZXIucmVmcmVzaCgpIHJpZ2h0IGF3YXlcblxuXG4gIHZhciByZWZyZXNoSW5pdHMgPSBfZGlzcGF0Y2goXCJyZWZyZXNoSW5pdFwiKTtcblxuICBfc29ydCAmJiBTY3JvbGxUcmlnZ2VyLnNvcnQoKTtcbiAgc2tpcFJldmVydCB8fCBfcmV2ZXJ0QWxsKCk7XG5cbiAgX3Njcm9sbGVycy5mb3JFYWNoKGZ1bmN0aW9uIChvYmopIHtcbiAgICBpZiAoX2lzRnVuY3Rpb24ob2JqKSkge1xuICAgICAgb2JqLnNtb290aCAmJiAob2JqLnRhcmdldC5zdHlsZS5zY3JvbGxCZWhhdmlvciA9IFwiYXV0b1wiKTsgLy8gc21vb3RoIHNjcm9sbGluZyBpbnRlcmZlcmVzXG5cbiAgICAgIG9iaigwKTtcbiAgICB9XG4gIH0pO1xuXG4gIF90cmlnZ2Vycy5zbGljZSgwKS5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XG4gICAgcmV0dXJuIHQucmVmcmVzaCgpO1xuICB9KTsgLy8gZG9uJ3QgbG9vcCB3aXRoIF9pIGJlY2F1c2UgZHVyaW5nIGEgcmVmcmVzaCgpIHNvbWVvbmUgY291bGQgY2FsbCBTY3JvbGxUcmlnZ2VyLnVwZGF0ZSgpIHdoaWNoIHdvdWxkIGl0ZXJhdGUgdGhyb3VnaCBfaSByZXN1bHRpbmcgaW4gYSBza2lwLlxuXG5cbiAgX2lzUmV2ZXJ0ZWQgPSBmYWxzZTtcblxuICBfdHJpZ2dlcnMuZm9yRWFjaChmdW5jdGlvbiAodCkge1xuICAgIC8vIG5lc3RlZCBwaW5zIChwaW5uZWRDb250YWluZXIpIHdpdGggcGluU3BhY2luZyBtYXkgZXhwYW5kIHRoZSBjb250YWluZXIsIHNvIHdlIG11c3QgYWNjb21tb2RhdGUgdGhhdCBoZXJlLlxuICAgIGlmICh0Ll9zdWJQaW5PZmZzZXQgJiYgdC5waW4pIHtcbiAgICAgIHZhciBwcm9wID0gdC52YXJzLmhvcml6b250YWwgPyBcIm9mZnNldFdpZHRoXCIgOiBcIm9mZnNldEhlaWdodFwiLFxuICAgICAgICAgIG9yaWdpbmFsID0gdC5waW5bcHJvcF07XG4gICAgICB0LnJldmVydCh0cnVlLCAxKTtcbiAgICAgIHQuYWRqdXN0UGluU3BhY2luZyh0LnBpbltwcm9wXSAtIG9yaWdpbmFsKTtcbiAgICAgIHQucmVmcmVzaCgpO1xuICAgIH1cbiAgfSk7XG5cbiAgX2NsYW1waW5nTWF4ID0gMTsgLy8gcGluU3BhY2luZyBtaWdodCBiZSBwcm9wcGluZyBhIHBhZ2Ugb3BlbiwgdGh1cyB3aGVuIHdlIC5zZXRQb3NpdGlvbnMoKSB0byBjbGFtcCBhIFNjcm9sbFRyaWdnZXIncyBlbmQgd2Ugc2hvdWxkIGxlYXZlIHRoZSBwaW5TcGFjaW5nIGFsb25lLiBUaGF0J3Mgd2hhdCB0aGlzIGZsYWcgaXMgZm9yLlxuXG4gIF9oaWRlQWxsTWFya2Vycyh0cnVlKTtcblxuICBfdHJpZ2dlcnMuZm9yRWFjaChmdW5jdGlvbiAodCkge1xuICAgIC8vIHRoZSBzY3JvbGxlcidzIG1heCBzY3JvbGwgcG9zaXRpb24gbWF5IGNoYW5nZSBhZnRlciBhbGwgdGhlIFNjcm9sbFRyaWdnZXJzIHJlZnJlc2hlZCAobGlrZSBwaW5uaW5nIGNvdWxkIHB1c2ggaXQgZG93biksIHNvIHdlIG5lZWQgdG8gbG9vcCBiYWNrIGFuZCBjb3JyZWN0IGFueSB3aXRoIGVuZDogXCJtYXhcIi4gU2FtZSBmb3IgYW55dGhpbmcgd2l0aCBhIGNsYW1wZWQgZW5kXG4gICAgdmFyIG1heCA9IF9tYXhTY3JvbGwodC5zY3JvbGxlciwgdC5fZGlyKSxcbiAgICAgICAgZW5kQ2xhbXAgPSB0LnZhcnMuZW5kID09PSBcIm1heFwiIHx8IHQuX2VuZENsYW1wICYmIHQuZW5kID4gbWF4LFxuICAgICAgICBzdGFydENsYW1wID0gdC5fc3RhcnRDbGFtcCAmJiB0LnN0YXJ0ID49IG1heDtcblxuICAgIChlbmRDbGFtcCB8fCBzdGFydENsYW1wKSAmJiB0LnNldFBvc2l0aW9ucyhzdGFydENsYW1wID8gbWF4IC0gMSA6IHQuc3RhcnQsIGVuZENsYW1wID8gTWF0aC5tYXgoc3RhcnRDbGFtcCA/IG1heCA6IHQuc3RhcnQgKyAxLCBtYXgpIDogdC5lbmQsIHRydWUpO1xuICB9KTtcblxuICBfaGlkZUFsbE1hcmtlcnMoZmFsc2UpO1xuXG4gIF9jbGFtcGluZ01heCA9IDA7XG4gIHJlZnJlc2hJbml0cy5mb3JFYWNoKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICByZXR1cm4gcmVzdWx0ICYmIHJlc3VsdC5yZW5kZXIgJiYgcmVzdWx0LnJlbmRlcigtMSk7XG4gIH0pOyAvLyBpZiB0aGUgb25SZWZyZXNoSW5pdCgpIHJldHVybnMgYW4gYW5pbWF0aW9uICh0eXBpY2FsbHkgYSBnc2FwLnNldCgpKSwgcmV2ZXJ0IGl0LiBUaGlzIG1ha2VzIGl0IGVhc3kgdG8gcHV0IHRoaW5ncyBpbiBhIGNlcnRhaW4gc3BvdCBiZWZvcmUgcmVmcmVzaGluZyBmb3IgbWVhc3VyZW1lbnQgcHVycG9zZXMsIGFuZCB0aGVuIHB1dCB0aGluZ3MgYmFjay5cblxuICBfc2Nyb2xsZXJzLmZvckVhY2goZnVuY3Rpb24gKG9iaikge1xuICAgIGlmIChfaXNGdW5jdGlvbihvYmopKSB7XG4gICAgICBvYmouc21vb3RoICYmIHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBvYmoudGFyZ2V0LnN0eWxlLnNjcm9sbEJlaGF2aW9yID0gXCJzbW9vdGhcIjtcbiAgICAgIH0pO1xuICAgICAgb2JqLnJlYyAmJiBvYmoob2JqLnJlYyk7XG4gICAgfVxuICB9KTtcblxuICBfY2xlYXJTY3JvbGxNZW1vcnkoX3Njcm9sbFJlc3RvcmF0aW9uLCAxKTtcblxuICBfcmVzaXplRGVsYXkucGF1c2UoKTtcblxuICBfcmVmcmVzaElEKys7XG4gIF9yZWZyZXNoaW5nQWxsID0gMjtcblxuICBfdXBkYXRlQWxsKDIpO1xuXG4gIF90cmlnZ2Vycy5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XG4gICAgcmV0dXJuIF9pc0Z1bmN0aW9uKHQudmFycy5vblJlZnJlc2gpICYmIHQudmFycy5vblJlZnJlc2godCk7XG4gIH0pO1xuXG4gIF9yZWZyZXNoaW5nQWxsID0gU2Nyb2xsVHJpZ2dlci5pc1JlZnJlc2hpbmcgPSBmYWxzZTtcblxuICBfZGlzcGF0Y2goXCJyZWZyZXNoXCIpO1xufSxcbiAgICBfbGFzdFNjcm9sbCA9IDAsXG4gICAgX2RpcmVjdGlvbiA9IDEsXG4gICAgX3ByaW1hcnksXG4gICAgX3VwZGF0ZUFsbCA9IGZ1bmN0aW9uIF91cGRhdGVBbGwoZm9yY2UpIHtcbiAgaWYgKGZvcmNlID09PSAyIHx8ICFfcmVmcmVzaGluZ0FsbCAmJiAhX2lzUmV2ZXJ0ZWQpIHtcbiAgICAvLyBfaXNSZXZlcnRlZCBjb3VsZCBiZSB0cnVlIGlmLCBmb3IgZXhhbXBsZSwgYSBtYXRjaE1lZGlhKCkgaXMgaW4gdGhlIHByb2Nlc3Mgb2YgZXhlY3V0aW5nLiBXZSBkb24ndCB3YW50IHRvIHVwZGF0ZSBkdXJpbmcgdGhlIHRpbWUgZXZlcnl0aGluZyBpcyByZXZlcnRlZC5cbiAgICBTY3JvbGxUcmlnZ2VyLmlzVXBkYXRpbmcgPSB0cnVlO1xuICAgIF9wcmltYXJ5ICYmIF9wcmltYXJ5LnVwZGF0ZSgwKTsgLy8gU2Nyb2xsU21vb3RoZXIgdXNlcyByZWZyZXNoUHJpb3JpdHkgLTk5OTkgdG8gYmVjb21lIHRoZSBwcmltYXJ5IHRoYXQgZ2V0cyB1cGRhdGVkIGJlZm9yZSBhbGwgb3RoZXJzIGJlY2F1c2UgaXQgYWZmZWN0cyB0aGUgc2Nyb2xsIHBvc2l0aW9uLlxuXG4gICAgdmFyIGwgPSBfdHJpZ2dlcnMubGVuZ3RoLFxuICAgICAgICB0aW1lID0gX2dldFRpbWUoKSxcbiAgICAgICAgcmVjb3JkVmVsb2NpdHkgPSB0aW1lIC0gX3RpbWUxID49IDUwLFxuICAgICAgICBzY3JvbGwgPSBsICYmIF90cmlnZ2Vyc1swXS5zY3JvbGwoKTtcblxuICAgIF9kaXJlY3Rpb24gPSBfbGFzdFNjcm9sbCA+IHNjcm9sbCA/IC0xIDogMTtcbiAgICBfcmVmcmVzaGluZ0FsbCB8fCAoX2xhc3RTY3JvbGwgPSBzY3JvbGwpO1xuXG4gICAgaWYgKHJlY29yZFZlbG9jaXR5KSB7XG4gICAgICBpZiAoX2xhc3RTY3JvbGxUaW1lICYmICFfcG9pbnRlcklzRG93biAmJiB0aW1lIC0gX2xhc3RTY3JvbGxUaW1lID4gMjAwKSB7XG4gICAgICAgIF9sYXN0U2Nyb2xsVGltZSA9IDA7XG5cbiAgICAgICAgX2Rpc3BhdGNoKFwic2Nyb2xsRW5kXCIpO1xuICAgICAgfVxuXG4gICAgICBfdGltZTIgPSBfdGltZTE7XG4gICAgICBfdGltZTEgPSB0aW1lO1xuICAgIH1cblxuICAgIGlmIChfZGlyZWN0aW9uIDwgMCkge1xuICAgICAgX2kgPSBsO1xuXG4gICAgICB3aGlsZSAoX2ktLSA+IDApIHtcbiAgICAgICAgX3RyaWdnZXJzW19pXSAmJiBfdHJpZ2dlcnNbX2ldLnVwZGF0ZSgwLCByZWNvcmRWZWxvY2l0eSk7XG4gICAgICB9XG5cbiAgICAgIF9kaXJlY3Rpb24gPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKF9pID0gMDsgX2kgPCBsOyBfaSsrKSB7XG4gICAgICAgIF90cmlnZ2Vyc1tfaV0gJiYgX3RyaWdnZXJzW19pXS51cGRhdGUoMCwgcmVjb3JkVmVsb2NpdHkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIFNjcm9sbFRyaWdnZXIuaXNVcGRhdGluZyA9IGZhbHNlO1xuICB9XG5cbiAgX3JhZklEID0gMDtcbn0sXG4gICAgX3Byb3BOYW1lc1RvQ29weSA9IFtfbGVmdCwgX3RvcCwgX2JvdHRvbSwgX3JpZ2h0LCBfbWFyZ2luICsgX0JvdHRvbSwgX21hcmdpbiArIF9SaWdodCwgX21hcmdpbiArIF9Ub3AsIF9tYXJnaW4gKyBfTGVmdCwgXCJkaXNwbGF5XCIsIFwiZmxleFNocmlua1wiLCBcImZsb2F0XCIsIFwiekluZGV4XCIsIFwiZ3JpZENvbHVtblN0YXJ0XCIsIFwiZ3JpZENvbHVtbkVuZFwiLCBcImdyaWRSb3dTdGFydFwiLCBcImdyaWRSb3dFbmRcIiwgXCJncmlkQXJlYVwiLCBcImp1c3RpZnlTZWxmXCIsIFwiYWxpZ25TZWxmXCIsIFwicGxhY2VTZWxmXCIsIFwib3JkZXJcIl0sXG4gICAgX3N0YXRlUHJvcHMgPSBfcHJvcE5hbWVzVG9Db3B5LmNvbmNhdChbX3dpZHRoLCBfaGVpZ2h0LCBcImJveFNpemluZ1wiLCBcIm1heFwiICsgX1dpZHRoLCBcIm1heFwiICsgX0hlaWdodCwgXCJwb3NpdGlvblwiLCBfbWFyZ2luLCBfcGFkZGluZywgX3BhZGRpbmcgKyBfVG9wLCBfcGFkZGluZyArIF9SaWdodCwgX3BhZGRpbmcgKyBfQm90dG9tLCBfcGFkZGluZyArIF9MZWZ0XSksXG4gICAgX3N3YXBQaW5PdXQgPSBmdW5jdGlvbiBfc3dhcFBpbk91dChwaW4sIHNwYWNlciwgc3RhdGUpIHtcbiAgX3NldFN0YXRlKHN0YXRlKTtcblxuICB2YXIgY2FjaGUgPSBwaW4uX2dzYXA7XG5cbiAgaWYgKGNhY2hlLnNwYWNlcklzTmF0aXZlKSB7XG4gICAgX3NldFN0YXRlKGNhY2hlLnNwYWNlclN0YXRlKTtcbiAgfSBlbHNlIGlmIChwaW4uX2dzYXAuc3dhcHBlZEluKSB7XG4gICAgdmFyIHBhcmVudCA9IHNwYWNlci5wYXJlbnROb2RlO1xuXG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgcGFyZW50Lmluc2VydEJlZm9yZShwaW4sIHNwYWNlcik7XG4gICAgICBwYXJlbnQucmVtb3ZlQ2hpbGQoc3BhY2VyKTtcbiAgICB9XG4gIH1cblxuICBwaW4uX2dzYXAuc3dhcHBlZEluID0gZmFsc2U7XG59LFxuICAgIF9zd2FwUGluSW4gPSBmdW5jdGlvbiBfc3dhcFBpbkluKHBpbiwgc3BhY2VyLCBjcywgc3BhY2VyU3RhdGUpIHtcbiAgaWYgKCFwaW4uX2dzYXAuc3dhcHBlZEluKSB7XG4gICAgdmFyIGkgPSBfcHJvcE5hbWVzVG9Db3B5Lmxlbmd0aCxcbiAgICAgICAgc3BhY2VyU3R5bGUgPSBzcGFjZXIuc3R5bGUsXG4gICAgICAgIHBpblN0eWxlID0gcGluLnN0eWxlLFxuICAgICAgICBwO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgcCA9IF9wcm9wTmFtZXNUb0NvcHlbaV07XG4gICAgICBzcGFjZXJTdHlsZVtwXSA9IGNzW3BdO1xuICAgIH1cblxuICAgIHNwYWNlclN0eWxlLnBvc2l0aW9uID0gY3MucG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIiA/IFwiYWJzb2x1dGVcIiA6IFwicmVsYXRpdmVcIjtcbiAgICBjcy5kaXNwbGF5ID09PSBcImlubGluZVwiICYmIChzcGFjZXJTdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmUtYmxvY2tcIik7XG4gICAgcGluU3R5bGVbX2JvdHRvbV0gPSBwaW5TdHlsZVtfcmlnaHRdID0gXCJhdXRvXCI7XG4gICAgc3BhY2VyU3R5bGUuZmxleEJhc2lzID0gY3MuZmxleEJhc2lzIHx8IFwiYXV0b1wiO1xuICAgIHNwYWNlclN0eWxlLm92ZXJmbG93ID0gXCJ2aXNpYmxlXCI7XG4gICAgc3BhY2VyU3R5bGUuYm94U2l6aW5nID0gXCJib3JkZXItYm94XCI7XG4gICAgc3BhY2VyU3R5bGVbX3dpZHRoXSA9IF9nZXRTaXplKHBpbiwgX2hvcml6b250YWwpICsgX3B4O1xuICAgIHNwYWNlclN0eWxlW19oZWlnaHRdID0gX2dldFNpemUocGluLCBfdmVydGljYWwpICsgX3B4O1xuICAgIHNwYWNlclN0eWxlW19wYWRkaW5nXSA9IHBpblN0eWxlW19tYXJnaW5dID0gcGluU3R5bGVbX3RvcF0gPSBwaW5TdHlsZVtfbGVmdF0gPSBcIjBcIjtcblxuICAgIF9zZXRTdGF0ZShzcGFjZXJTdGF0ZSk7XG5cbiAgICBwaW5TdHlsZVtfd2lkdGhdID0gcGluU3R5bGVbXCJtYXhcIiArIF9XaWR0aF0gPSBjc1tfd2lkdGhdO1xuICAgIHBpblN0eWxlW19oZWlnaHRdID0gcGluU3R5bGVbXCJtYXhcIiArIF9IZWlnaHRdID0gY3NbX2hlaWdodF07XG4gICAgcGluU3R5bGVbX3BhZGRpbmddID0gY3NbX3BhZGRpbmddO1xuXG4gICAgaWYgKHBpbi5wYXJlbnROb2RlICE9PSBzcGFjZXIpIHtcbiAgICAgIHBpbi5wYXJlbnROb2RlLmluc2VydEJlZm9yZShzcGFjZXIsIHBpbik7XG4gICAgICBzcGFjZXIuYXBwZW5kQ2hpbGQocGluKTtcbiAgICB9XG5cbiAgICBwaW4uX2dzYXAuc3dhcHBlZEluID0gdHJ1ZTtcbiAgfVxufSxcbiAgICBfY2Fwc0V4cCA9IC8oW0EtWl0pL2csXG4gICAgX3NldFN0YXRlID0gZnVuY3Rpb24gX3NldFN0YXRlKHN0YXRlKSB7XG4gIGlmIChzdGF0ZSkge1xuICAgIHZhciBzdHlsZSA9IHN0YXRlLnQuc3R5bGUsXG4gICAgICAgIGwgPSBzdGF0ZS5sZW5ndGgsXG4gICAgICAgIGkgPSAwLFxuICAgICAgICBwLFxuICAgICAgICB2YWx1ZTtcbiAgICAoc3RhdGUudC5fZ3NhcCB8fCBnc2FwLmNvcmUuZ2V0Q2FjaGUoc3RhdGUudCkpLnVuY2FjaGUgPSAxOyAvLyBvdGhlcndpc2UgdHJhbnNmb3JtcyBtYXkgYmUgb2ZmXG5cbiAgICBmb3IgKDsgaSA8IGw7IGkgKz0gMikge1xuICAgICAgdmFsdWUgPSBzdGF0ZVtpICsgMV07XG4gICAgICBwID0gc3RhdGVbaV07XG5cbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBzdHlsZVtwXSA9IHZhbHVlO1xuICAgICAgfSBlbHNlIGlmIChzdHlsZVtwXSkge1xuICAgICAgICBzdHlsZS5yZW1vdmVQcm9wZXJ0eShwLnJlcGxhY2UoX2NhcHNFeHAsIFwiLSQxXCIpLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufSxcbiAgICBfZ2V0U3RhdGUgPSBmdW5jdGlvbiBfZ2V0U3RhdGUoZWxlbWVudCkge1xuICAvLyByZXR1cm5zIGFuIEFycmF5IHdpdGggYWx0ZXJuYXRpbmcgdmFsdWVzIGxpa2UgW3Byb3BlcnR5LCB2YWx1ZSwgcHJvcGVydHksIHZhbHVlXSBhbmQgYSBcInRcIiBwcm9wZXJ0eSBwb2ludGluZyB0byB0aGUgdGFyZ2V0IChlbGVtZW50KS4gTWFrZXMgaXQgZmFzdCBhbmQgY2hlYXAuXG4gIHZhciBsID0gX3N0YXRlUHJvcHMubGVuZ3RoLFxuICAgICAgc3R5bGUgPSBlbGVtZW50LnN0eWxlLFxuICAgICAgc3RhdGUgPSBbXSxcbiAgICAgIGkgPSAwO1xuXG4gIGZvciAoOyBpIDwgbDsgaSsrKSB7XG4gICAgc3RhdGUucHVzaChfc3RhdGVQcm9wc1tpXSwgc3R5bGVbX3N0YXRlUHJvcHNbaV1dKTtcbiAgfVxuXG4gIHN0YXRlLnQgPSBlbGVtZW50O1xuICByZXR1cm4gc3RhdGU7XG59LFxuICAgIF9jb3B5U3RhdGUgPSBmdW5jdGlvbiBfY29weVN0YXRlKHN0YXRlLCBvdmVycmlkZSwgb21pdE9mZnNldHMpIHtcbiAgdmFyIHJlc3VsdCA9IFtdLFxuICAgICAgbCA9IHN0YXRlLmxlbmd0aCxcbiAgICAgIGkgPSBvbWl0T2Zmc2V0cyA/IDggOiAwLFxuICAgICAgLy8gc2tpcCB0b3AsIGxlZnQsIHJpZ2h0LCBib3R0b20gaWYgb21pdE9mZnNldHMgaXMgdHJ1ZVxuICBwO1xuXG4gIGZvciAoOyBpIDwgbDsgaSArPSAyKSB7XG4gICAgcCA9IHN0YXRlW2ldO1xuICAgIHJlc3VsdC5wdXNoKHAsIHAgaW4gb3ZlcnJpZGUgPyBvdmVycmlkZVtwXSA6IHN0YXRlW2kgKyAxXSk7XG4gIH1cblxuICByZXN1bHQudCA9IHN0YXRlLnQ7XG4gIHJldHVybiByZXN1bHQ7XG59LFxuICAgIF93aW5PZmZzZXRzID0ge1xuICBsZWZ0OiAwLFxuICB0b3A6IDBcbn0sXG4gICAgLy8gLy8gcG90ZW50aWFsIGZ1dHVyZSBmZWF0dXJlICg/KSBBbGxvdyB1c2VycyB0byBjYWxjdWxhdGUgd2hlcmUgYSB0cmlnZ2VyIGhpdHMgKHNjcm9sbCBwb3NpdGlvbikgbGlrZSBnZXRTY3JvbGxQb3NpdGlvbihcIiNpZFwiLCBcInRvcCBib3R0b21cIilcbi8vIF9nZXRTY3JvbGxQb3NpdGlvbiA9ICh0cmlnZ2VyLCBwb3NpdGlvbiwge3Njcm9sbGVyLCBjb250YWluZXJBbmltYXRpb24sIGhvcml6b250YWx9KSA9PiB7XG4vLyBcdHNjcm9sbGVyID0gX2dldFRhcmdldChzY3JvbGxlciB8fCBfd2luKTtcbi8vIFx0bGV0IGRpcmVjdGlvbiA9IGhvcml6b250YWwgPyBfaG9yaXpvbnRhbCA6IF92ZXJ0aWNhbCxcbi8vIFx0XHRpc1ZpZXdwb3J0ID0gX2lzVmlld3BvcnQoc2Nyb2xsZXIpO1xuLy8gXHRfZ2V0U2l6ZUZ1bmMoc2Nyb2xsZXIsIGlzVmlld3BvcnQsIGRpcmVjdGlvbik7XG4vLyBcdHJldHVybiBfcGFyc2VQb3NpdGlvbihwb3NpdGlvbiwgX2dldFRhcmdldCh0cmlnZ2VyKSwgX2dldFNpemVGdW5jKHNjcm9sbGVyLCBpc1ZpZXdwb3J0LCBkaXJlY3Rpb24pKCksIGRpcmVjdGlvbiwgX2dldFNjcm9sbEZ1bmMoc2Nyb2xsZXIsIGRpcmVjdGlvbikoKSwgMCwgMCwgMCwgX2dldE9mZnNldHNGdW5jKHNjcm9sbGVyLCBpc1ZpZXdwb3J0KSgpLCBpc1ZpZXdwb3J0ID8gMCA6IHBhcnNlRmxvYXQoX2dldENvbXB1dGVkU3R5bGUoc2Nyb2xsZXIpW1wiYm9yZGVyXCIgKyBkaXJlY3Rpb24ucDIgKyBfV2lkdGhdKSB8fCAwLCAwLCBjb250YWluZXJBbmltYXRpb24gPyBjb250YWluZXJBbmltYXRpb24uZHVyYXRpb24oKSA6IF9tYXhTY3JvbGwoc2Nyb2xsZXIpLCBjb250YWluZXJBbmltYXRpb24pO1xuLy8gfSxcbl9wYXJzZVBvc2l0aW9uID0gZnVuY3Rpb24gX3BhcnNlUG9zaXRpb24odmFsdWUsIHRyaWdnZXIsIHNjcm9sbGVyU2l6ZSwgZGlyZWN0aW9uLCBzY3JvbGwsIG1hcmtlciwgbWFya2VyU2Nyb2xsZXIsIHNlbGYsIHNjcm9sbGVyQm91bmRzLCBib3JkZXJXaWR0aCwgdXNlRml4ZWRQb3NpdGlvbiwgc2Nyb2xsZXJNYXgsIGNvbnRhaW5lckFuaW1hdGlvbiwgY2xhbXBaZXJvUHJvcCkge1xuICBfaXNGdW5jdGlvbih2YWx1ZSkgJiYgKHZhbHVlID0gdmFsdWUoc2VsZikpO1xuXG4gIGlmIChfaXNTdHJpbmcodmFsdWUpICYmIHZhbHVlLnN1YnN0cigwLCAzKSA9PT0gXCJtYXhcIikge1xuICAgIHZhbHVlID0gc2Nyb2xsZXJNYXggKyAodmFsdWUuY2hhckF0KDQpID09PSBcIj1cIiA/IF9vZmZzZXRUb1B4KFwiMFwiICsgdmFsdWUuc3Vic3RyKDMpLCBzY3JvbGxlclNpemUpIDogMCk7XG4gIH1cblxuICB2YXIgdGltZSA9IGNvbnRhaW5lckFuaW1hdGlvbiA/IGNvbnRhaW5lckFuaW1hdGlvbi50aW1lKCkgOiAwLFxuICAgICAgcDEsXG4gICAgICBwMixcbiAgICAgIGVsZW1lbnQ7XG4gIGNvbnRhaW5lckFuaW1hdGlvbiAmJiBjb250YWluZXJBbmltYXRpb24uc2VlaygwKTtcbiAgaXNOYU4odmFsdWUpIHx8ICh2YWx1ZSA9ICt2YWx1ZSk7IC8vIGNvbnZlcnQgYSBzdHJpbmcgbnVtYmVyIGxpa2UgXCI0NVwiIHRvIGFuIGFjdHVhbCBudW1iZXJcblxuICBpZiAoIV9pc051bWJlcih2YWx1ZSkpIHtcbiAgICBfaXNGdW5jdGlvbih0cmlnZ2VyKSAmJiAodHJpZ2dlciA9IHRyaWdnZXIoc2VsZikpO1xuICAgIHZhciBvZmZzZXRzID0gKHZhbHVlIHx8IFwiMFwiKS5zcGxpdChcIiBcIiksXG4gICAgICAgIGJvdW5kcyxcbiAgICAgICAgbG9jYWxPZmZzZXQsXG4gICAgICAgIGdsb2JhbE9mZnNldCxcbiAgICAgICAgZGlzcGxheTtcbiAgICBlbGVtZW50ID0gX2dldFRhcmdldCh0cmlnZ2VyLCBzZWxmKSB8fCBfYm9keTtcbiAgICBib3VuZHMgPSBfZ2V0Qm91bmRzKGVsZW1lbnQpIHx8IHt9O1xuXG4gICAgaWYgKCghYm91bmRzIHx8ICFib3VuZHMubGVmdCAmJiAhYm91bmRzLnRvcCkgJiYgX2dldENvbXB1dGVkU3R5bGUoZWxlbWVudCkuZGlzcGxheSA9PT0gXCJub25lXCIpIHtcbiAgICAgIC8vIGlmIGRpc3BsYXkgaXMgXCJub25lXCIsIGl0IHdvbid0IHJlcG9ydCBnZXRCb3VuZGluZ0NsaWVudFJlY3QoKSBwcm9wZXJseVxuICAgICAgZGlzcGxheSA9IGVsZW1lbnQuc3R5bGUuZGlzcGxheTtcbiAgICAgIGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICAgIGJvdW5kcyA9IF9nZXRCb3VuZHMoZWxlbWVudCk7XG4gICAgICBkaXNwbGF5ID8gZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gZGlzcGxheSA6IGVsZW1lbnQuc3R5bGUucmVtb3ZlUHJvcGVydHkoXCJkaXNwbGF5XCIpO1xuICAgIH1cblxuICAgIGxvY2FsT2Zmc2V0ID0gX29mZnNldFRvUHgob2Zmc2V0c1swXSwgYm91bmRzW2RpcmVjdGlvbi5kXSk7XG4gICAgZ2xvYmFsT2Zmc2V0ID0gX29mZnNldFRvUHgob2Zmc2V0c1sxXSB8fCBcIjBcIiwgc2Nyb2xsZXJTaXplKTtcbiAgICB2YWx1ZSA9IGJvdW5kc1tkaXJlY3Rpb24ucF0gLSBzY3JvbGxlckJvdW5kc1tkaXJlY3Rpb24ucF0gLSBib3JkZXJXaWR0aCArIGxvY2FsT2Zmc2V0ICsgc2Nyb2xsIC0gZ2xvYmFsT2Zmc2V0O1xuICAgIG1hcmtlclNjcm9sbGVyICYmIF9wb3NpdGlvbk1hcmtlcihtYXJrZXJTY3JvbGxlciwgZ2xvYmFsT2Zmc2V0LCBkaXJlY3Rpb24sIHNjcm9sbGVyU2l6ZSAtIGdsb2JhbE9mZnNldCA8IDIwIHx8IG1hcmtlclNjcm9sbGVyLl9pc1N0YXJ0ICYmIGdsb2JhbE9mZnNldCA+IDIwKTtcbiAgICBzY3JvbGxlclNpemUgLT0gc2Nyb2xsZXJTaXplIC0gZ2xvYmFsT2Zmc2V0OyAvLyBhZGp1c3QgZm9yIHRoZSBtYXJrZXJcbiAgfSBlbHNlIHtcbiAgICBjb250YWluZXJBbmltYXRpb24gJiYgKHZhbHVlID0gZ3NhcC51dGlscy5tYXBSYW5nZShjb250YWluZXJBbmltYXRpb24uc2Nyb2xsVHJpZ2dlci5zdGFydCwgY29udGFpbmVyQW5pbWF0aW9uLnNjcm9sbFRyaWdnZXIuZW5kLCAwLCBzY3JvbGxlck1heCwgdmFsdWUpKTtcbiAgICBtYXJrZXJTY3JvbGxlciAmJiBfcG9zaXRpb25NYXJrZXIobWFya2VyU2Nyb2xsZXIsIHNjcm9sbGVyU2l6ZSwgZGlyZWN0aW9uLCB0cnVlKTtcbiAgfVxuXG4gIGlmIChjbGFtcFplcm9Qcm9wKSB7XG4gICAgc2VsZltjbGFtcFplcm9Qcm9wXSA9IHZhbHVlIHx8IC0wLjAwMTtcbiAgICB2YWx1ZSA8IDAgJiYgKHZhbHVlID0gMCk7XG4gIH1cblxuICBpZiAobWFya2VyKSB7XG4gICAgdmFyIHBvc2l0aW9uID0gdmFsdWUgKyBzY3JvbGxlclNpemUsXG4gICAgICAgIGlzU3RhcnQgPSBtYXJrZXIuX2lzU3RhcnQ7XG4gICAgcDEgPSBcInNjcm9sbFwiICsgZGlyZWN0aW9uLmQyO1xuXG4gICAgX3Bvc2l0aW9uTWFya2VyKG1hcmtlciwgcG9zaXRpb24sIGRpcmVjdGlvbiwgaXNTdGFydCAmJiBwb3NpdGlvbiA+IDIwIHx8ICFpc1N0YXJ0ICYmICh1c2VGaXhlZFBvc2l0aW9uID8gTWF0aC5tYXgoX2JvZHlbcDFdLCBfZG9jRWxbcDFdKSA6IG1hcmtlci5wYXJlbnROb2RlW3AxXSkgPD0gcG9zaXRpb24gKyAxKTtcblxuICAgIGlmICh1c2VGaXhlZFBvc2l0aW9uKSB7XG4gICAgICBzY3JvbGxlckJvdW5kcyA9IF9nZXRCb3VuZHMobWFya2VyU2Nyb2xsZXIpO1xuICAgICAgdXNlRml4ZWRQb3NpdGlvbiAmJiAobWFya2VyLnN0eWxlW2RpcmVjdGlvbi5vcC5wXSA9IHNjcm9sbGVyQm91bmRzW2RpcmVjdGlvbi5vcC5wXSAtIGRpcmVjdGlvbi5vcC5tIC0gbWFya2VyLl9vZmZzZXQgKyBfcHgpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChjb250YWluZXJBbmltYXRpb24gJiYgZWxlbWVudCkge1xuICAgIHAxID0gX2dldEJvdW5kcyhlbGVtZW50KTtcbiAgICBjb250YWluZXJBbmltYXRpb24uc2VlayhzY3JvbGxlck1heCk7XG4gICAgcDIgPSBfZ2V0Qm91bmRzKGVsZW1lbnQpO1xuICAgIGNvbnRhaW5lckFuaW1hdGlvbi5fY2FTY3JvbGxEaXN0ID0gcDFbZGlyZWN0aW9uLnBdIC0gcDJbZGlyZWN0aW9uLnBdO1xuICAgIHZhbHVlID0gdmFsdWUgLyBjb250YWluZXJBbmltYXRpb24uX2NhU2Nyb2xsRGlzdCAqIHNjcm9sbGVyTWF4O1xuICB9XG5cbiAgY29udGFpbmVyQW5pbWF0aW9uICYmIGNvbnRhaW5lckFuaW1hdGlvbi5zZWVrKHRpbWUpO1xuICByZXR1cm4gY29udGFpbmVyQW5pbWF0aW9uID8gdmFsdWUgOiBNYXRoLnJvdW5kKHZhbHVlKTtcbn0sXG4gICAgX3ByZWZpeEV4cCA9IC8od2Via2l0fG1venxsZW5ndGh8Y3NzVGV4dHxpbnNldCkvaSxcbiAgICBfcmVwYXJlbnQgPSBmdW5jdGlvbiBfcmVwYXJlbnQoZWxlbWVudCwgcGFyZW50LCB0b3AsIGxlZnQpIHtcbiAgaWYgKGVsZW1lbnQucGFyZW50Tm9kZSAhPT0gcGFyZW50KSB7XG4gICAgdmFyIHN0eWxlID0gZWxlbWVudC5zdHlsZSxcbiAgICAgICAgcCxcbiAgICAgICAgY3M7XG5cbiAgICBpZiAocGFyZW50ID09PSBfYm9keSkge1xuICAgICAgZWxlbWVudC5fc3RPcmlnID0gc3R5bGUuY3NzVGV4dDsgLy8gcmVjb3JkIG9yaWdpbmFsIGlubGluZSBzdHlsZXMgc28gd2UgY2FuIHJldmVydCB0aGVtIGxhdGVyXG5cbiAgICAgIGNzID0gX2dldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG5cbiAgICAgIGZvciAocCBpbiBjcykge1xuICAgICAgICAvLyBtdXN0IGNvcHkgYWxsIHJlbGV2YW50IHN0eWxlcyB0byBlbnN1cmUgdGhhdCBub3RoaW5nIGNoYW5nZXMgdmlzdWFsbHkgd2hlbiB3ZSByZXBhcmVudCB0byB0aGUgPGJvZHk+LiBTa2lwIHRoZSB2ZW5kb3IgcHJlZml4ZWQgb25lcy5cbiAgICAgICAgaWYgKCErcCAmJiAhX3ByZWZpeEV4cC50ZXN0KHApICYmIGNzW3BdICYmIHR5cGVvZiBzdHlsZVtwXSA9PT0gXCJzdHJpbmdcIiAmJiBwICE9PSBcIjBcIikge1xuICAgICAgICAgIHN0eWxlW3BdID0gY3NbcF07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc3R5bGUudG9wID0gdG9wO1xuICAgICAgc3R5bGUubGVmdCA9IGxlZnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlLmNzc1RleHQgPSBlbGVtZW50Ll9zdE9yaWc7XG4gICAgfVxuXG4gICAgZ3NhcC5jb3JlLmdldENhY2hlKGVsZW1lbnQpLnVuY2FjaGUgPSAxO1xuICAgIHBhcmVudC5hcHBlbmRDaGlsZChlbGVtZW50KTtcbiAgfVxufSxcbiAgICBfaW50ZXJydXB0aW9uVHJhY2tlciA9IGZ1bmN0aW9uIF9pbnRlcnJ1cHRpb25UcmFja2VyKGdldFZhbHVlRnVuYywgaW5pdGlhbFZhbHVlLCBvbkludGVycnVwdCkge1xuICB2YXIgbGFzdDEgPSBpbml0aWFsVmFsdWUsXG4gICAgICBsYXN0MiA9IGxhc3QxO1xuICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgdmFyIGN1cnJlbnQgPSBNYXRoLnJvdW5kKGdldFZhbHVlRnVuYygpKTsgLy8gcm91bmQgYmVjYXVzZSBpbiBzb21lIFt2ZXJ5IHVuY29tbW9uXSBXaW5kb3dzIGVudmlyb25tZW50cywgc2Nyb2xsIGNhbiBnZXQgcmVwb3J0ZWQgd2l0aCBkZWNpbWFscyBldmVuIHRob3VnaCBpdCB3YXMgc2V0IHdpdGhvdXQuXG5cbiAgICBpZiAoY3VycmVudCAhPT0gbGFzdDEgJiYgY3VycmVudCAhPT0gbGFzdDIgJiYgTWF0aC5hYnMoY3VycmVudCAtIGxhc3QxKSA+IDMgJiYgTWF0aC5hYnMoY3VycmVudCAtIGxhc3QyKSA+IDMpIHtcbiAgICAgIC8vIGlmIHRoZSB1c2VyIHNjcm9sbHMsIGtpbGwgdGhlIHR3ZWVuLiBpT1MgU2FmYXJpIGludGVybWl0dGVudGx5IG1pc3JlcG9ydHMgdGhlIHNjcm9sbCBwb3NpdGlvbiwgaXQgbWF5IGJlIHRoZSBtb3N0IHJlY2VudGx5LXNldCBvbmUgb3IgdGhlIG9uZSBiZWZvcmUgdGhhdCEgV2hlbiBTYWZhcmkgaXMgem9vbWVkIChDTUQtKyksIGl0IG9mdGVuIG1pc3JlcG9ydHMgYXMgMSBwaXhlbCBvZmYgdG9vISBTbyBpZiB3ZSBzZXQgdGhlIHNjcm9sbCBwb3NpdGlvbiB0byAxMjUsIGZvciBleGFtcGxlLCBpdCdsbCBhY3R1YWxseSByZXBvcnQgaXQgYXMgMTI0LlxuICAgICAgdmFsdWUgPSBjdXJyZW50O1xuICAgICAgb25JbnRlcnJ1cHQgJiYgb25JbnRlcnJ1cHQoKTtcbiAgICB9XG5cbiAgICBsYXN0MiA9IGxhc3QxO1xuICAgIGxhc3QxID0gdmFsdWU7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9O1xufSxcbiAgICBfc2hpZnRNYXJrZXIgPSBmdW5jdGlvbiBfc2hpZnRNYXJrZXIobWFya2VyLCBkaXJlY3Rpb24sIHZhbHVlKSB7XG4gIHZhciB2YXJzID0ge307XG4gIHZhcnNbZGlyZWN0aW9uLnBdID0gXCIrPVwiICsgdmFsdWU7XG4gIGdzYXAuc2V0KG1hcmtlciwgdmFycyk7XG59LFxuICAgIC8vIF9tZXJnZUFuaW1hdGlvbnMgPSBhbmltYXRpb25zID0+IHtcbi8vIFx0bGV0IHRsID0gZ3NhcC50aW1lbGluZSh7c21vb3RoQ2hpbGRUaW1pbmc6IHRydWV9KS5zdGFydFRpbWUoTWF0aC5taW4oLi4uYW5pbWF0aW9ucy5tYXAoYSA9PiBhLmdsb2JhbFRpbWUoMCkpKSk7XG4vLyBcdGFuaW1hdGlvbnMuZm9yRWFjaChhID0+IHtsZXQgdGltZSA9IGEudG90YWxUaW1lKCk7IHRsLmFkZChhKTsgYS50b3RhbFRpbWUodGltZSk7IH0pO1xuLy8gXHR0bC5zbW9vdGhDaGlsZFRpbWluZyA9IGZhbHNlO1xuLy8gXHRyZXR1cm4gdGw7XG4vLyB9LFxuLy8gcmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgY2FuIGJlIHVzZWQgdG8gdHdlZW4gdGhlIHNjcm9sbCBwb3NpdGlvbiBpbiB0aGUgZGlyZWN0aW9uIHByb3ZpZGVkLCBhbmQgd2hlbiBkb2luZyBzbyBpdCdsbCBhZGQgYSAudHdlZW4gcHJvcGVydHkgdG8gdGhlIEZVTkNUSU9OIGl0c2VsZiwgYW5kIHJlbW92ZSBpdCB3aGVuIHRoZSB0d2VlbiBjb21wbGV0ZXMgb3IgZ2V0cyBraWxsZWQuIFRoaXMgZ2l2ZXMgdXMgYSB3YXkgdG8gaGF2ZSBtdWx0aXBsZSBTY3JvbGxUcmlnZ2VycyB1c2UgYSBjZW50cmFsIGZ1bmN0aW9uIGZvciBhbnkgZ2l2ZW4gc2Nyb2xsZXIgYW5kIHNlZSBpZiB0aGVyZSdzIGEgc2Nyb2xsIHR3ZWVuIHJ1bm5pbmcgKHdoaWNoIHdvdWxkIGFmZmVjdCBpZi9ob3cgdGhpbmdzIGdldCB1cGRhdGVkKVxuX2dldFR3ZWVuQ3JlYXRvciA9IGZ1bmN0aW9uIF9nZXRUd2VlbkNyZWF0b3Ioc2Nyb2xsZXIsIGRpcmVjdGlvbikge1xuICB2YXIgZ2V0U2Nyb2xsID0gX2dldFNjcm9sbEZ1bmMoc2Nyb2xsZXIsIGRpcmVjdGlvbiksXG4gICAgICBwcm9wID0gXCJfc2Nyb2xsXCIgKyBkaXJlY3Rpb24ucDIsXG4gICAgICAvLyBhZGQgYSB0d2VlbmFibGUgcHJvcGVydHkgdG8gdGhlIHNjcm9sbGVyIHRoYXQncyBhIGdldHRlci9zZXR0ZXIgZnVuY3Rpb24sIGxpa2UgX3Njcm9sbFRvcCBvciBfc2Nyb2xsTGVmdC4gVGhpcyB3YXksIGlmIHNvbWVvbmUgZG9lcyBnc2FwLmtpbGxUd2VlbnNPZihzY3JvbGxlcikgaXQnbGwga2lsbCB0aGUgc2Nyb2xsIHR3ZWVuLlxuICBnZXRUd2VlbiA9IGZ1bmN0aW9uIGdldFR3ZWVuKHNjcm9sbFRvLCB2YXJzLCBpbml0aWFsVmFsdWUsIGNoYW5nZTEsIGNoYW5nZTIpIHtcbiAgICB2YXIgdHdlZW4gPSBnZXRUd2Vlbi50d2VlbixcbiAgICAgICAgb25Db21wbGV0ZSA9IHZhcnMub25Db21wbGV0ZSxcbiAgICAgICAgbW9kaWZpZXJzID0ge307XG4gICAgaW5pdGlhbFZhbHVlID0gaW5pdGlhbFZhbHVlIHx8IGdldFNjcm9sbCgpO1xuXG4gICAgdmFyIGNoZWNrRm9ySW50ZXJydXB0aW9uID0gX2ludGVycnVwdGlvblRyYWNrZXIoZ2V0U2Nyb2xsLCBpbml0aWFsVmFsdWUsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHR3ZWVuLmtpbGwoKTtcbiAgICAgIGdldFR3ZWVuLnR3ZWVuID0gMDtcbiAgICB9KTtcblxuICAgIGNoYW5nZTIgPSBjaGFuZ2UxICYmIGNoYW5nZTIgfHwgMDsgLy8gaWYgY2hhbmdlMSBpcyAwLCB3ZSBzZXQgdGhhdCB0byB0aGUgZGlmZmVyZW5jZSBhbmQgaWdub3JlIGNoYW5nZTIuIE90aGVyd2lzZSwgdGhlcmUgd291bGQgYmUgYSBjb21wb3VuZCBlZmZlY3QuXG5cbiAgICBjaGFuZ2UxID0gY2hhbmdlMSB8fCBzY3JvbGxUbyAtIGluaXRpYWxWYWx1ZTtcbiAgICB0d2VlbiAmJiB0d2Vlbi5raWxsKCk7XG4gICAgdmFyc1twcm9wXSA9IHNjcm9sbFRvO1xuICAgIHZhcnMuaW5oZXJpdCA9IGZhbHNlO1xuICAgIHZhcnMubW9kaWZpZXJzID0gbW9kaWZpZXJzO1xuXG4gICAgbW9kaWZpZXJzW3Byb3BdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGNoZWNrRm9ySW50ZXJydXB0aW9uKGluaXRpYWxWYWx1ZSArIGNoYW5nZTEgKiB0d2Vlbi5yYXRpbyArIGNoYW5nZTIgKiB0d2Vlbi5yYXRpbyAqIHR3ZWVuLnJhdGlvKTtcbiAgICB9O1xuXG4gICAgdmFycy5vblVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF9zY3JvbGxlcnMuY2FjaGUrKztcbiAgICAgIGdldFR3ZWVuLnR3ZWVuICYmIF91cGRhdGVBbGwoKTsgLy8gaWYgaXQgd2FzIGludGVycnVwdGVkL2tpbGxlZCwgbGlrZSBpbiBhIGNvbnRleHQucmV2ZXJ0KCksIGRvbid0IGZvcmNlIGFuIHVwZGF0ZUFsbCgpXG4gICAgfTtcblxuICAgIHZhcnMub25Db21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGdldFR3ZWVuLnR3ZWVuID0gMDtcbiAgICAgIG9uQ29tcGxldGUgJiYgb25Db21wbGV0ZS5jYWxsKHR3ZWVuKTtcbiAgICB9O1xuXG4gICAgdHdlZW4gPSBnZXRUd2Vlbi50d2VlbiA9IGdzYXAudG8oc2Nyb2xsZXIsIHZhcnMpO1xuICAgIHJldHVybiB0d2VlbjtcbiAgfTtcblxuICBzY3JvbGxlcltwcm9wXSA9IGdldFNjcm9sbDtcblxuICBnZXRTY3JvbGwud2hlZWxIYW5kbGVyID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBnZXRUd2Vlbi50d2VlbiAmJiBnZXRUd2Vlbi50d2Vlbi5raWxsKCkgJiYgKGdldFR3ZWVuLnR3ZWVuID0gMCk7XG4gIH07XG5cbiAgX2FkZExpc3RlbmVyKHNjcm9sbGVyLCBcIndoZWVsXCIsIGdldFNjcm9sbC53aGVlbEhhbmRsZXIpOyAvLyBXaW5kb3dzIG1hY2hpbmVzIGhhbmRsZSBtb3VzZXdoZWVsIHNjcm9sbGluZyBpbiBjaHVua3MgKGxpa2UgXCIzIGxpbmVzIHBlciBzY3JvbGxcIikgbWVhbmluZyB0aGUgdHlwaWNhbCBzdHJhdGVneSBmb3IgY2FuY2VsbGluZyB0aGUgc2Nyb2xsIGlzbid0IGFzIHNlbnNpdGl2ZS4gSXQncyBtdWNoIG1vcmUgbGlrZWx5IHRvIG1hdGNoIG9uZSBvZiB0aGUgcHJldmlvdXMgMiBzY3JvbGwgZXZlbnQgcG9zaXRpb25zLiBTbyB3ZSBraWxsIGFueSBzbmFwcGluZyBhcyBzb29uIGFzIHRoZXJlJ3MgYSB3aGVlbCBldmVudC5cblxuXG4gIFNjcm9sbFRyaWdnZXIuaXNUb3VjaCAmJiBfYWRkTGlzdGVuZXIoc2Nyb2xsZXIsIFwidG91Y2htb3ZlXCIsIGdldFNjcm9sbC53aGVlbEhhbmRsZXIpO1xuICByZXR1cm4gZ2V0VHdlZW47XG59O1xuXG5leHBvcnQgdmFyIFNjcm9sbFRyaWdnZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTY3JvbGxUcmlnZ2VyKHZhcnMsIGFuaW1hdGlvbikge1xuICAgIF9jb3JlSW5pdHRlZCB8fCBTY3JvbGxUcmlnZ2VyLnJlZ2lzdGVyKGdzYXApIHx8IGNvbnNvbGUud2FybihcIlBsZWFzZSBnc2FwLnJlZ2lzdGVyUGx1Z2luKFNjcm9sbFRyaWdnZXIpXCIpO1xuXG4gICAgX2NvbnRleHQodGhpcyk7XG5cbiAgICB0aGlzLmluaXQodmFycywgYW5pbWF0aW9uKTtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTY3JvbGxUcmlnZ2VyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uaW5pdCA9IGZ1bmN0aW9uIGluaXQodmFycywgYW5pbWF0aW9uKSB7XG4gICAgdGhpcy5wcm9ncmVzcyA9IHRoaXMuc3RhcnQgPSAwO1xuICAgIHRoaXMudmFycyAmJiB0aGlzLmtpbGwodHJ1ZSwgdHJ1ZSk7IC8vIGluIGNhc2UgaXQncyBiZWluZyBpbml0dGVkIGFnYWluXG5cbiAgICBpZiAoIV9lbmFibGVkKSB7XG4gICAgICB0aGlzLnVwZGF0ZSA9IHRoaXMucmVmcmVzaCA9IHRoaXMua2lsbCA9IF9wYXNzVGhyb3VnaDtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXJzID0gX3NldERlZmF1bHRzKF9pc1N0cmluZyh2YXJzKSB8fCBfaXNOdW1iZXIodmFycykgfHwgdmFycy5ub2RlVHlwZSA/IHtcbiAgICAgIHRyaWdnZXI6IHZhcnNcbiAgICB9IDogdmFycywgX2RlZmF1bHRzKTtcblxuICAgIHZhciBfdmFycyA9IHZhcnMsXG4gICAgICAgIG9uVXBkYXRlID0gX3ZhcnMub25VcGRhdGUsXG4gICAgICAgIHRvZ2dsZUNsYXNzID0gX3ZhcnMudG9nZ2xlQ2xhc3MsXG4gICAgICAgIGlkID0gX3ZhcnMuaWQsXG4gICAgICAgIG9uVG9nZ2xlID0gX3ZhcnMub25Ub2dnbGUsXG4gICAgICAgIG9uUmVmcmVzaCA9IF92YXJzLm9uUmVmcmVzaCxcbiAgICAgICAgc2NydWIgPSBfdmFycy5zY3J1YixcbiAgICAgICAgdHJpZ2dlciA9IF92YXJzLnRyaWdnZXIsXG4gICAgICAgIHBpbiA9IF92YXJzLnBpbixcbiAgICAgICAgcGluU3BhY2luZyA9IF92YXJzLnBpblNwYWNpbmcsXG4gICAgICAgIGludmFsaWRhdGVPblJlZnJlc2ggPSBfdmFycy5pbnZhbGlkYXRlT25SZWZyZXNoLFxuICAgICAgICBhbnRpY2lwYXRlUGluID0gX3ZhcnMuYW50aWNpcGF0ZVBpbixcbiAgICAgICAgb25TY3J1YkNvbXBsZXRlID0gX3ZhcnMub25TY3J1YkNvbXBsZXRlLFxuICAgICAgICBvblNuYXBDb21wbGV0ZSA9IF92YXJzLm9uU25hcENvbXBsZXRlLFxuICAgICAgICBvbmNlID0gX3ZhcnMub25jZSxcbiAgICAgICAgc25hcCA9IF92YXJzLnNuYXAsXG4gICAgICAgIHBpblJlcGFyZW50ID0gX3ZhcnMucGluUmVwYXJlbnQsXG4gICAgICAgIHBpblNwYWNlciA9IF92YXJzLnBpblNwYWNlcixcbiAgICAgICAgY29udGFpbmVyQW5pbWF0aW9uID0gX3ZhcnMuY29udGFpbmVyQW5pbWF0aW9uLFxuICAgICAgICBmYXN0U2Nyb2xsRW5kID0gX3ZhcnMuZmFzdFNjcm9sbEVuZCxcbiAgICAgICAgcHJldmVudE92ZXJsYXBzID0gX3ZhcnMucHJldmVudE92ZXJsYXBzLFxuICAgICAgICBkaXJlY3Rpb24gPSB2YXJzLmhvcml6b250YWwgfHwgdmFycy5jb250YWluZXJBbmltYXRpb24gJiYgdmFycy5ob3Jpem9udGFsICE9PSBmYWxzZSA/IF9ob3Jpem9udGFsIDogX3ZlcnRpY2FsLFxuICAgICAgICBpc1RvZ2dsZSA9ICFzY3J1YiAmJiBzY3J1YiAhPT0gMCxcbiAgICAgICAgc2Nyb2xsZXIgPSBfZ2V0VGFyZ2V0KHZhcnMuc2Nyb2xsZXIgfHwgX3dpbiksXG4gICAgICAgIHNjcm9sbGVyQ2FjaGUgPSBnc2FwLmNvcmUuZ2V0Q2FjaGUoc2Nyb2xsZXIpLFxuICAgICAgICBpc1ZpZXdwb3J0ID0gX2lzVmlld3BvcnQoc2Nyb2xsZXIpLFxuICAgICAgICB1c2VGaXhlZFBvc2l0aW9uID0gKFwicGluVHlwZVwiIGluIHZhcnMgPyB2YXJzLnBpblR5cGUgOiBfZ2V0UHJveHlQcm9wKHNjcm9sbGVyLCBcInBpblR5cGVcIikgfHwgaXNWaWV3cG9ydCAmJiBcImZpeGVkXCIpID09PSBcImZpeGVkXCIsXG4gICAgICAgIGNhbGxiYWNrcyA9IFt2YXJzLm9uRW50ZXIsIHZhcnMub25MZWF2ZSwgdmFycy5vbkVudGVyQmFjaywgdmFycy5vbkxlYXZlQmFja10sXG4gICAgICAgIHRvZ2dsZUFjdGlvbnMgPSBpc1RvZ2dsZSAmJiB2YXJzLnRvZ2dsZUFjdGlvbnMuc3BsaXQoXCIgXCIpLFxuICAgICAgICBtYXJrZXJzID0gXCJtYXJrZXJzXCIgaW4gdmFycyA/IHZhcnMubWFya2VycyA6IF9kZWZhdWx0cy5tYXJrZXJzLFxuICAgICAgICBib3JkZXJXaWR0aCA9IGlzVmlld3BvcnQgPyAwIDogcGFyc2VGbG9hdChfZ2V0Q29tcHV0ZWRTdHlsZShzY3JvbGxlcilbXCJib3JkZXJcIiArIGRpcmVjdGlvbi5wMiArIF9XaWR0aF0pIHx8IDAsXG4gICAgICAgIHNlbGYgPSB0aGlzLFxuICAgICAgICBvblJlZnJlc2hJbml0ID0gdmFycy5vblJlZnJlc2hJbml0ICYmIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB2YXJzLm9uUmVmcmVzaEluaXQoc2VsZik7XG4gICAgfSxcbiAgICAgICAgZ2V0U2Nyb2xsZXJTaXplID0gX2dldFNpemVGdW5jKHNjcm9sbGVyLCBpc1ZpZXdwb3J0LCBkaXJlY3Rpb24pLFxuICAgICAgICBnZXRTY3JvbGxlck9mZnNldHMgPSBfZ2V0T2Zmc2V0c0Z1bmMoc2Nyb2xsZXIsIGlzVmlld3BvcnQpLFxuICAgICAgICBsYXN0U25hcCA9IDAsXG4gICAgICAgIGxhc3RSZWZyZXNoID0gMCxcbiAgICAgICAgcHJldlByb2dyZXNzID0gMCxcbiAgICAgICAgc2Nyb2xsRnVuYyA9IF9nZXRTY3JvbGxGdW5jKHNjcm9sbGVyLCBkaXJlY3Rpb24pLFxuICAgICAgICB0d2VlblRvLFxuICAgICAgICBwaW5DYWNoZSxcbiAgICAgICAgc25hcEZ1bmMsXG4gICAgICAgIHNjcm9sbDEsXG4gICAgICAgIHNjcm9sbDIsXG4gICAgICAgIHN0YXJ0LFxuICAgICAgICBlbmQsXG4gICAgICAgIG1hcmtlclN0YXJ0LFxuICAgICAgICBtYXJrZXJFbmQsXG4gICAgICAgIG1hcmtlclN0YXJ0VHJpZ2dlcixcbiAgICAgICAgbWFya2VyRW5kVHJpZ2dlcixcbiAgICAgICAgbWFya2VyVmFycyxcbiAgICAgICAgZXhlY3V0aW5nT25SZWZyZXNoLFxuICAgICAgICBjaGFuZ2UsXG4gICAgICAgIHBpbk9yaWdpbmFsU3RhdGUsXG4gICAgICAgIHBpbkFjdGl2ZVN0YXRlLFxuICAgICAgICBwaW5TdGF0ZSxcbiAgICAgICAgc3BhY2VyLFxuICAgICAgICBvZmZzZXQsXG4gICAgICAgIHBpbkdldHRlcixcbiAgICAgICAgcGluU2V0dGVyLFxuICAgICAgICBwaW5TdGFydCxcbiAgICAgICAgcGluQ2hhbmdlLFxuICAgICAgICBzcGFjaW5nU3RhcnQsXG4gICAgICAgIHNwYWNlclN0YXRlLFxuICAgICAgICBtYXJrZXJTdGFydFNldHRlcixcbiAgICAgICAgcGluTW92ZXMsXG4gICAgICAgIG1hcmtlckVuZFNldHRlcixcbiAgICAgICAgY3MsXG4gICAgICAgIHNuYXAxLFxuICAgICAgICBzbmFwMixcbiAgICAgICAgc2NydWJUd2VlbixcbiAgICAgICAgc2NydWJTbW9vdGgsXG4gICAgICAgIHNuYXBEdXJDbGFtcCxcbiAgICAgICAgc25hcERlbGF5ZWRDYWxsLFxuICAgICAgICBwcmV2U2Nyb2xsLFxuICAgICAgICBwcmV2QW5pbVByb2dyZXNzLFxuICAgICAgICBjYU1hcmtlclNldHRlcixcbiAgICAgICAgY3VzdG9tUmV2ZXJ0UmV0dXJuOyAvLyBmb3IgdGhlIHNha2Ugb2YgZWZmaWNpZW5jeSwgX3N0YXJ0Q2xhbXAvX2VuZENsYW1wIHNlcnZlIGxpa2UgYSB0cnV0aHkgdmFsdWUgaW5kaWNhdGluZyB0aGF0IGNsYW1waW5nIHdhcyBlbmFibGVkIG9uIHRoZSBzdGFydC9lbmQsIGFuZCBBTFNPIHN0b3JlIHRoZSBhY3R1YWwgcHJlLWNsYW1wZWQgbnVtZXJpYyB2YWx1ZS4gV2UgdGFwIGludG8gdGhhdCBpbiBTY3JvbGxTbW9vdGhlciBmb3Igc3BlZWQgZWZmZWN0cy4gU28gZm9yIGV4YW1wbGUsIGlmIHN0YXJ0PVwiY2xhbXAodG9wIGJvdHRvbSlcIiByZXN1bHRzIGluIGEgc3RhcnQgb2YgLTEwMCBuYXR1cmFsbHksIGl0IHdvdWxkIGdldCBjbGFtcGVkIHRvIDAgYnV0IC0xMDAgd291bGQgYmUgc3RvcmVkIGluIF9zdGFydENsYW1wLlxuXG5cbiAgICBzZWxmLl9zdGFydENsYW1wID0gc2VsZi5fZW5kQ2xhbXAgPSBmYWxzZTtcbiAgICBzZWxmLl9kaXIgPSBkaXJlY3Rpb247XG4gICAgYW50aWNpcGF0ZVBpbiAqPSA0NTtcbiAgICBzZWxmLnNjcm9sbGVyID0gc2Nyb2xsZXI7XG4gICAgc2VsZi5zY3JvbGwgPSBjb250YWluZXJBbmltYXRpb24gPyBjb250YWluZXJBbmltYXRpb24udGltZS5iaW5kKGNvbnRhaW5lckFuaW1hdGlvbikgOiBzY3JvbGxGdW5jO1xuICAgIHNjcm9sbDEgPSBzY3JvbGxGdW5jKCk7XG4gICAgc2VsZi52YXJzID0gdmFycztcbiAgICBhbmltYXRpb24gPSBhbmltYXRpb24gfHwgdmFycy5hbmltYXRpb247XG5cbiAgICBpZiAoXCJyZWZyZXNoUHJpb3JpdHlcIiBpbiB2YXJzKSB7XG4gICAgICBfc29ydCA9IDE7XG4gICAgICB2YXJzLnJlZnJlc2hQcmlvcml0eSA9PT0gLTk5OTkgJiYgKF9wcmltYXJ5ID0gc2VsZik7IC8vIHVzZWQgYnkgU2Nyb2xsU21vb3RoZXJcbiAgICB9XG5cbiAgICBzY3JvbGxlckNhY2hlLnR3ZWVuU2Nyb2xsID0gc2Nyb2xsZXJDYWNoZS50d2VlblNjcm9sbCB8fCB7XG4gICAgICB0b3A6IF9nZXRUd2VlbkNyZWF0b3Ioc2Nyb2xsZXIsIF92ZXJ0aWNhbCksXG4gICAgICBsZWZ0OiBfZ2V0VHdlZW5DcmVhdG9yKHNjcm9sbGVyLCBfaG9yaXpvbnRhbClcbiAgICB9O1xuICAgIHNlbGYudHdlZW5UbyA9IHR3ZWVuVG8gPSBzY3JvbGxlckNhY2hlLnR3ZWVuU2Nyb2xsW2RpcmVjdGlvbi5wXTtcblxuICAgIHNlbGYuc2NydWJEdXJhdGlvbiA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgc2NydWJTbW9vdGggPSBfaXNOdW1iZXIodmFsdWUpICYmIHZhbHVlO1xuXG4gICAgICBpZiAoIXNjcnViU21vb3RoKSB7XG4gICAgICAgIHNjcnViVHdlZW4gJiYgc2NydWJUd2Vlbi5wcm9ncmVzcygxKS5raWxsKCk7XG4gICAgICAgIHNjcnViVHdlZW4gPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2NydWJUd2VlbiA/IHNjcnViVHdlZW4uZHVyYXRpb24odmFsdWUpIDogc2NydWJUd2VlbiA9IGdzYXAudG8oYW5pbWF0aW9uLCB7XG4gICAgICAgICAgZWFzZTogXCJleHBvXCIsXG4gICAgICAgICAgdG90YWxQcm9ncmVzczogXCIrPTBcIixcbiAgICAgICAgICBpbmhlcml0OiBmYWxzZSxcbiAgICAgICAgICBkdXJhdGlvbjogc2NydWJTbW9vdGgsXG4gICAgICAgICAgcGF1c2VkOiB0cnVlLFxuICAgICAgICAgIG9uQ29tcGxldGU6IGZ1bmN0aW9uIG9uQ29tcGxldGUoKSB7XG4gICAgICAgICAgICByZXR1cm4gb25TY3J1YkNvbXBsZXRlICYmIG9uU2NydWJDb21wbGV0ZShzZWxmKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAoYW5pbWF0aW9uKSB7XG4gICAgICBhbmltYXRpb24udmFycy5sYXp5ID0gZmFsc2U7XG4gICAgICBhbmltYXRpb24uX2luaXR0ZWQgJiYgIXNlbGYuaXNSZXZlcnRlZCB8fCBhbmltYXRpb24udmFycy5pbW1lZGlhdGVSZW5kZXIgIT09IGZhbHNlICYmIHZhcnMuaW1tZWRpYXRlUmVuZGVyICE9PSBmYWxzZSAmJiBhbmltYXRpb24uZHVyYXRpb24oKSAmJiBhbmltYXRpb24ucmVuZGVyKDAsIHRydWUsIHRydWUpOyAvLyBzcGVjaWFsIGNhc2U6IGlmIHRoaXMgU2Nyb2xsVHJpZ2dlciBnZXRzIHJlLWluaXR0ZWQsIGEgZnJvbSgpIHR3ZWVuIHdpdGggYSBzdGFnZ2VyIGNvdWxkIGdldCBpbml0dGVkIGluaXRpYWxseSBhbmQgdGhlbiByZXZlcnRlZCBvbiB0aGUgcmUtaW5pdCB3aGljaCBtZWFucyBpdCdsbCBuZWVkIHRvIGdldCByZW5kZXJlZCBhZ2FpbiBoZXJlIHRvIHByb3Blcmx5IGRpc3BsYXkgdGhpbmdzLiBPdGhlcndpc2UsIFNlZSBodHRwczovL2dzYXAuY29tL2ZvcnVtcy90b3BpYy8zNjc3Ny1zY3JvbGxzbW9vdGhlci1zcGxpdHRleHQtbmV4dGpzLyBhbmQgaHR0cHM6Ly9jb2RlcGVuLmlvL0dyZWVuU29jay9wZW4vZVlQeVBwZD9lZGl0b3JzPTAwMTBcblxuICAgICAgc2VsZi5hbmltYXRpb24gPSBhbmltYXRpb24ucGF1c2UoKTtcbiAgICAgIGFuaW1hdGlvbi5zY3JvbGxUcmlnZ2VyID0gc2VsZjtcbiAgICAgIHNlbGYuc2NydWJEdXJhdGlvbihzY3J1Yik7XG4gICAgICBzbmFwMSA9IDA7XG4gICAgICBpZCB8fCAoaWQgPSBhbmltYXRpb24udmFycy5pZCk7XG4gICAgfVxuXG4gICAgaWYgKHNuYXApIHtcbiAgICAgIC8vIFRPRE86IHBvdGVudGlhbCBpZGVhOiB1c2UgbGVnaXRpbWF0ZSBDU1Mgc2Nyb2xsIHNuYXBwaW5nIGJ5IHB1c2hpbmcgaW52aXNpYmxlIGVsZW1lbnRzIGludG8gdGhlIERPTSB0aGF0IHNlcnZlIGFzIHNuYXAgcG9zaXRpb25zLCBhbmQgdG9nZ2xlIHRoZSBkb2N1bWVudC5zY3JvbGxpbmdFbGVtZW50LnN0eWxlLnNjcm9sbFNuYXBUeXBlIG9uVG9nZ2xlLiBTZWUgaHR0cHM6Ly9jb2RlcGVuLmlvL0dyZWVuU29jay9wZW4vSmpMcmdXTSBmb3IgYSBxdWljayBwcm9vZiBvZiBjb25jZXB0LlxuICAgICAgaWYgKCFfaXNPYmplY3Qoc25hcCkgfHwgc25hcC5wdXNoKSB7XG4gICAgICAgIHNuYXAgPSB7XG4gICAgICAgICAgc25hcFRvOiBzbmFwXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIFwic2Nyb2xsQmVoYXZpb3JcIiBpbiBfYm9keS5zdHlsZSAmJiBnc2FwLnNldChpc1ZpZXdwb3J0ID8gW19ib2R5LCBfZG9jRWxdIDogc2Nyb2xsZXIsIHtcbiAgICAgICAgc2Nyb2xsQmVoYXZpb3I6IFwiYXV0b1wiXG4gICAgICB9KTsgLy8gc21vb3RoIHNjcm9sbGluZyBkb2Vzbid0IHdvcmsgd2l0aCBzbmFwLlxuXG4gICAgICBfc2Nyb2xsZXJzLmZvckVhY2goZnVuY3Rpb24gKG8pIHtcbiAgICAgICAgcmV0dXJuIF9pc0Z1bmN0aW9uKG8pICYmIG8udGFyZ2V0ID09PSAoaXNWaWV3cG9ydCA/IF9kb2Muc2Nyb2xsaW5nRWxlbWVudCB8fCBfZG9jRWwgOiBzY3JvbGxlcikgJiYgKG8uc21vb3RoID0gZmFsc2UpO1xuICAgICAgfSk7IC8vIG5vdGU6IHNldCBzbW9vdGggdG8gZmFsc2Ugb24gYm90aCB0aGUgdmVydGljYWwgYW5kIGhvcml6b250YWwgc2Nyb2xsIGdldHRlcnMvc2V0dGVyc1xuXG5cbiAgICAgIHNuYXBGdW5jID0gX2lzRnVuY3Rpb24oc25hcC5zbmFwVG8pID8gc25hcC5zbmFwVG8gOiBzbmFwLnNuYXBUbyA9PT0gXCJsYWJlbHNcIiA/IF9nZXRDbG9zZXN0TGFiZWwoYW5pbWF0aW9uKSA6IHNuYXAuc25hcFRvID09PSBcImxhYmVsc0RpcmVjdGlvbmFsXCIgPyBfZ2V0TGFiZWxBdERpcmVjdGlvbihhbmltYXRpb24pIDogc25hcC5kaXJlY3Rpb25hbCAhPT0gZmFsc2UgPyBmdW5jdGlvbiAodmFsdWUsIHN0KSB7XG4gICAgICAgIHJldHVybiBfc25hcERpcmVjdGlvbmFsKHNuYXAuc25hcFRvKSh2YWx1ZSwgX2dldFRpbWUoKSAtIGxhc3RSZWZyZXNoIDwgNTAwID8gMCA6IHN0LmRpcmVjdGlvbik7XG4gICAgICB9IDogZ3NhcC51dGlscy5zbmFwKHNuYXAuc25hcFRvKTtcbiAgICAgIHNuYXBEdXJDbGFtcCA9IHNuYXAuZHVyYXRpb24gfHwge1xuICAgICAgICBtaW46IDAuMSxcbiAgICAgICAgbWF4OiAyXG4gICAgICB9O1xuICAgICAgc25hcER1ckNsYW1wID0gX2lzT2JqZWN0KHNuYXBEdXJDbGFtcCkgPyBfY2xhbXAoc25hcER1ckNsYW1wLm1pbiwgc25hcER1ckNsYW1wLm1heCkgOiBfY2xhbXAoc25hcER1ckNsYW1wLCBzbmFwRHVyQ2xhbXApO1xuICAgICAgc25hcERlbGF5ZWRDYWxsID0gZ3NhcC5kZWxheWVkQ2FsbChzbmFwLmRlbGF5IHx8IHNjcnViU21vb3RoIC8gMiB8fCAwLjEsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHNjcm9sbCA9IHNjcm9sbEZ1bmMoKSxcbiAgICAgICAgICAgIHJlZnJlc2hlZFJlY2VudGx5ID0gX2dldFRpbWUoKSAtIGxhc3RSZWZyZXNoIDwgNTAwLFxuICAgICAgICAgICAgdHdlZW4gPSB0d2VlblRvLnR3ZWVuO1xuXG4gICAgICAgIGlmICgocmVmcmVzaGVkUmVjZW50bHkgfHwgTWF0aC5hYnMoc2VsZi5nZXRWZWxvY2l0eSgpKSA8IDEwKSAmJiAhdHdlZW4gJiYgIV9wb2ludGVySXNEb3duICYmIGxhc3RTbmFwICE9PSBzY3JvbGwpIHtcbiAgICAgICAgICB2YXIgcHJvZ3Jlc3MgPSAoc2Nyb2xsIC0gc3RhcnQpIC8gY2hhbmdlLFxuICAgICAgICAgICAgICB0b3RhbFByb2dyZXNzID0gYW5pbWF0aW9uICYmICFpc1RvZ2dsZSA/IGFuaW1hdGlvbi50b3RhbFByb2dyZXNzKCkgOiBwcm9ncmVzcyxcbiAgICAgICAgICAgICAgdmVsb2NpdHkgPSByZWZyZXNoZWRSZWNlbnRseSA/IDAgOiAodG90YWxQcm9ncmVzcyAtIHNuYXAyKSAvIChfZ2V0VGltZSgpIC0gX3RpbWUyKSAqIDEwMDAgfHwgMCxcbiAgICAgICAgICAgICAgY2hhbmdlMSA9IGdzYXAudXRpbHMuY2xhbXAoLXByb2dyZXNzLCAxIC0gcHJvZ3Jlc3MsIF9hYnModmVsb2NpdHkgLyAyKSAqIHZlbG9jaXR5IC8gMC4xODUpLFxuICAgICAgICAgICAgICBuYXR1cmFsRW5kID0gcHJvZ3Jlc3MgKyAoc25hcC5pbmVydGlhID09PSBmYWxzZSA/IDAgOiBjaGFuZ2UxKSxcbiAgICAgICAgICAgICAgZW5kVmFsdWUsXG4gICAgICAgICAgICAgIGVuZFNjcm9sbCxcbiAgICAgICAgICAgICAgX3NuYXAgPSBzbmFwLFxuICAgICAgICAgICAgICBvblN0YXJ0ID0gX3NuYXAub25TdGFydCxcbiAgICAgICAgICAgICAgX29uSW50ZXJydXB0ID0gX3NuYXAub25JbnRlcnJ1cHQsXG4gICAgICAgICAgICAgIF9vbkNvbXBsZXRlID0gX3NuYXAub25Db21wbGV0ZTtcbiAgICAgICAgICBlbmRWYWx1ZSA9IHNuYXBGdW5jKG5hdHVyYWxFbmQsIHNlbGYpO1xuICAgICAgICAgIF9pc051bWJlcihlbmRWYWx1ZSkgfHwgKGVuZFZhbHVlID0gbmF0dXJhbEVuZCk7IC8vIGluIGNhc2UgdGhlIGZ1bmN0aW9uIGRpZG4ndCByZXR1cm4gYSBudW1iZXIsIGZhbGwgYmFjayB0byB1c2luZyB0aGUgbmF0dXJhbEVuZFxuXG4gICAgICAgICAgZW5kU2Nyb2xsID0gTWF0aC5yb3VuZChzdGFydCArIGVuZFZhbHVlICogY2hhbmdlKTtcblxuICAgICAgICAgIGlmIChzY3JvbGwgPD0gZW5kICYmIHNjcm9sbCA+PSBzdGFydCAmJiBlbmRTY3JvbGwgIT09IHNjcm9sbCkge1xuICAgICAgICAgICAgaWYgKHR3ZWVuICYmICF0d2Vlbi5faW5pdHRlZCAmJiB0d2Vlbi5kYXRhIDw9IF9hYnMoZW5kU2Nyb2xsIC0gc2Nyb2xsKSkge1xuICAgICAgICAgICAgICAvLyB0aGVyZSdzIGFuIG92ZXJsYXBwaW5nIHNuYXAhIFNvIHdlIG11c3QgZmlndXJlIG91dCB3aGljaCBvbmUgaXMgY2xvc2VyIGFuZCBsZXQgdGhhdCB0d2VlbiBsaXZlLlxuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChzbmFwLmluZXJ0aWEgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgIGNoYW5nZTEgPSBlbmRWYWx1ZSAtIHByb2dyZXNzO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0d2VlblRvKGVuZFNjcm9sbCwge1xuICAgICAgICAgICAgICBkdXJhdGlvbjogc25hcER1ckNsYW1wKF9hYnMoTWF0aC5tYXgoX2FicyhuYXR1cmFsRW5kIC0gdG90YWxQcm9ncmVzcyksIF9hYnMoZW5kVmFsdWUgLSB0b3RhbFByb2dyZXNzKSkgKiAwLjE4NSAvIHZlbG9jaXR5IC8gMC4wNSB8fCAwKSksXG4gICAgICAgICAgICAgIGVhc2U6IHNuYXAuZWFzZSB8fCBcInBvd2VyM1wiLFxuICAgICAgICAgICAgICBkYXRhOiBfYWJzKGVuZFNjcm9sbCAtIHNjcm9sbCksXG4gICAgICAgICAgICAgIC8vIHJlY29yZCB0aGUgZGlzdGFuY2Ugc28gdGhhdCBpZiBhbm90aGVyIHNuYXAgdHdlZW4gb2NjdXJzIChjb25mbGljdCkgd2UgY2FuIHByaW9yaXRpemUgdGhlIGNsb3Nlc3Qgc25hcC5cbiAgICAgICAgICAgICAgb25JbnRlcnJ1cHQ6IGZ1bmN0aW9uIG9uSW50ZXJydXB0KCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzbmFwRGVsYXllZENhbGwucmVzdGFydCh0cnVlKSAmJiBfb25JbnRlcnJ1cHQgJiYgX29uSW50ZXJydXB0KHNlbGYpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBvbkNvbXBsZXRlOiBmdW5jdGlvbiBvbkNvbXBsZXRlKCkge1xuICAgICAgICAgICAgICAgIHNlbGYudXBkYXRlKCk7XG4gICAgICAgICAgICAgICAgbGFzdFNuYXAgPSBzY3JvbGxGdW5jKCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoYW5pbWF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAvLyB0aGUgcmVzb2x1dGlvbiBvZiB0aGUgc2Nyb2xsYmFyIGlzIGxpbWl0ZWQsIHNvIHdlIHNob3VsZCBjb3JyZWN0IHRoZSBzY3J1YmJlZCBhbmltYXRpb24ncyBwbGF5aGVhZCBhdCB0aGUgZW5kIHRvIG1hdGNoIEVYQUNUTFkgd2hlcmUgaXQgd2FzIHN1cHBvc2VkIHRvIHNuYXBcbiAgICAgICAgICAgICAgICAgIHNjcnViVHdlZW4gPyBzY3J1YlR3ZWVuLnJlc2V0VG8oXCJ0b3RhbFByb2dyZXNzXCIsIGVuZFZhbHVlLCBhbmltYXRpb24uX3RUaW1lIC8gYW5pbWF0aW9uLl90RHVyKSA6IGFuaW1hdGlvbi5wcm9ncmVzcyhlbmRWYWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc25hcDEgPSBzbmFwMiA9IGFuaW1hdGlvbiAmJiAhaXNUb2dnbGUgPyBhbmltYXRpb24udG90YWxQcm9ncmVzcygpIDogc2VsZi5wcm9ncmVzcztcbiAgICAgICAgICAgICAgICBvblNuYXBDb21wbGV0ZSAmJiBvblNuYXBDb21wbGV0ZShzZWxmKTtcbiAgICAgICAgICAgICAgICBfb25Db21wbGV0ZSAmJiBfb25Db21wbGV0ZShzZWxmKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgc2Nyb2xsLCBjaGFuZ2UxICogY2hhbmdlLCBlbmRTY3JvbGwgLSBzY3JvbGwgLSBjaGFuZ2UxICogY2hhbmdlKTtcbiAgICAgICAgICAgIG9uU3RhcnQgJiYgb25TdGFydChzZWxmLCB0d2VlblRvLnR3ZWVuKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoc2VsZi5pc0FjdGl2ZSAmJiBsYXN0U25hcCAhPT0gc2Nyb2xsKSB7XG4gICAgICAgICAgc25hcERlbGF5ZWRDYWxsLnJlc3RhcnQodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pLnBhdXNlKCk7XG4gICAgfVxuXG4gICAgaWQgJiYgKF9pZHNbaWRdID0gc2VsZik7XG4gICAgdHJpZ2dlciA9IHNlbGYudHJpZ2dlciA9IF9nZXRUYXJnZXQodHJpZ2dlciB8fCBwaW4gIT09IHRydWUgJiYgcGluKTsgLy8gaWYgYSB0cmlnZ2VyIGhhcyBzb21lIGtpbmQgb2Ygc2Nyb2xsLXJlbGF0ZWQgZWZmZWN0IGFwcGxpZWQgdGhhdCBjb3VsZCBjb250YW1pbmF0ZSB0aGUgXCJ5XCIgb3IgXCJ4XCIgcG9zaXRpb24gKGxpa2UgYSBTY3JvbGxTbW9vdGhlciBlZmZlY3QpLCB3ZSBuZWVkZWQgYSB3YXkgdG8gdGVtcG9yYXJpbHkgcmV2ZXJ0IGl0LCBzbyB3ZSB1c2UgdGhlIHN0UmV2ZXJ0IHByb3BlcnR5IG9mIHRoZSBnc0NhY2hlLiBJdCBjYW4gcmV0dXJuIGFub3RoZXIgZnVuY3Rpb24gdGhhdCB3ZSdsbCBjYWxsIGF0IHRoZSBlbmQgc28gaXQgY2FuIHJldHVybiB0byBpdHMgbm9ybWFsIHN0YXRlLlxuXG4gICAgY3VzdG9tUmV2ZXJ0UmV0dXJuID0gdHJpZ2dlciAmJiB0cmlnZ2VyLl9nc2FwICYmIHRyaWdnZXIuX2dzYXAuc3RSZXZlcnQ7XG4gICAgY3VzdG9tUmV2ZXJ0UmV0dXJuICYmIChjdXN0b21SZXZlcnRSZXR1cm4gPSBjdXN0b21SZXZlcnRSZXR1cm4oc2VsZikpO1xuICAgIHBpbiA9IHBpbiA9PT0gdHJ1ZSA/IHRyaWdnZXIgOiBfZ2V0VGFyZ2V0KHBpbik7XG4gICAgX2lzU3RyaW5nKHRvZ2dsZUNsYXNzKSAmJiAodG9nZ2xlQ2xhc3MgPSB7XG4gICAgICB0YXJnZXRzOiB0cmlnZ2VyLFxuICAgICAgY2xhc3NOYW1lOiB0b2dnbGVDbGFzc1xuICAgIH0pO1xuXG4gICAgaWYgKHBpbikge1xuICAgICAgcGluU3BhY2luZyA9PT0gZmFsc2UgfHwgcGluU3BhY2luZyA9PT0gX21hcmdpbiB8fCAocGluU3BhY2luZyA9ICFwaW5TcGFjaW5nICYmIHBpbi5wYXJlbnROb2RlICYmIHBpbi5wYXJlbnROb2RlLnN0eWxlICYmIF9nZXRDb21wdXRlZFN0eWxlKHBpbi5wYXJlbnROb2RlKS5kaXNwbGF5ID09PSBcImZsZXhcIiA/IGZhbHNlIDogX3BhZGRpbmcpOyAvLyBpZiB0aGUgcGFyZW50IGlzIGRpc3BsYXk6IGZsZXgsIGRvbid0IGFwcGx5IHBpblNwYWNpbmcgYnkgZGVmYXVsdC4gV2Ugc2hvdWxkIGNoZWNrIHRoYXQgcGluLnBhcmVudE5vZGUgaXMgYW4gZWxlbWVudCAobm90IHNoYWRvdyBkb20gd2luZG93KVxuXG4gICAgICBzZWxmLnBpbiA9IHBpbjtcbiAgICAgIHBpbkNhY2hlID0gZ3NhcC5jb3JlLmdldENhY2hlKHBpbik7XG5cbiAgICAgIGlmICghcGluQ2FjaGUuc3BhY2VyKSB7XG4gICAgICAgIC8vIHJlY29yZCB0aGUgc3BhY2VyIGFuZCBwaW5PcmlnaW5hbFN0YXRlIG9uIHRoZSBjYWNoZSBpbiBjYXNlIHNvbWVvbmUgdHJpZXMgcGlubmluZyB0aGUgc2FtZSBlbGVtZW50IHdpdGggTVVMVElQTEUgU2Nyb2xsVHJpZ2dlcnMgLSB3ZSBkb24ndCB3YW50IHRvIGhhdmUgbXVsdGlwbGUgc3BhY2VycyBvciByZWNvcmQgdGhlIFwib3JpZ2luYWxcIiBwaW4gc3RhdGUgYWZ0ZXIgaXQgaGFzIGFscmVhZHkgYmVlbiBhZmZlY3RlZCBieSBhbm90aGVyIFNjcm9sbFRyaWdnZXIuXG4gICAgICAgIGlmIChwaW5TcGFjZXIpIHtcbiAgICAgICAgICBwaW5TcGFjZXIgPSBfZ2V0VGFyZ2V0KHBpblNwYWNlcik7XG4gICAgICAgICAgcGluU3BhY2VyICYmICFwaW5TcGFjZXIubm9kZVR5cGUgJiYgKHBpblNwYWNlciA9IHBpblNwYWNlci5jdXJyZW50IHx8IHBpblNwYWNlci5uYXRpdmVFbGVtZW50KTsgLy8gZm9yIFJlYWN0ICYgQW5ndWxhclxuXG4gICAgICAgICAgcGluQ2FjaGUuc3BhY2VySXNOYXRpdmUgPSAhIXBpblNwYWNlcjtcbiAgICAgICAgICBwaW5TcGFjZXIgJiYgKHBpbkNhY2hlLnNwYWNlclN0YXRlID0gX2dldFN0YXRlKHBpblNwYWNlcikpO1xuICAgICAgICB9XG5cbiAgICAgICAgcGluQ2FjaGUuc3BhY2VyID0gc3BhY2VyID0gcGluU3BhY2VyIHx8IF9kb2MuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgc3BhY2VyLmNsYXNzTGlzdC5hZGQoXCJwaW4tc3BhY2VyXCIpO1xuICAgICAgICBpZCAmJiBzcGFjZXIuY2xhc3NMaXN0LmFkZChcInBpbi1zcGFjZXItXCIgKyBpZCk7XG4gICAgICAgIHBpbkNhY2hlLnBpblN0YXRlID0gcGluT3JpZ2luYWxTdGF0ZSA9IF9nZXRTdGF0ZShwaW4pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGluT3JpZ2luYWxTdGF0ZSA9IHBpbkNhY2hlLnBpblN0YXRlO1xuICAgICAgfVxuXG4gICAgICB2YXJzLmZvcmNlM0QgIT09IGZhbHNlICYmIGdzYXAuc2V0KHBpbiwge1xuICAgICAgICBmb3JjZTNEOiB0cnVlXG4gICAgICB9KTtcbiAgICAgIHNlbGYuc3BhY2VyID0gc3BhY2VyID0gcGluQ2FjaGUuc3BhY2VyO1xuICAgICAgY3MgPSBfZ2V0Q29tcHV0ZWRTdHlsZShwaW4pO1xuICAgICAgc3BhY2luZ1N0YXJ0ID0gY3NbcGluU3BhY2luZyArIGRpcmVjdGlvbi5vczJdO1xuICAgICAgcGluR2V0dGVyID0gZ3NhcC5nZXRQcm9wZXJ0eShwaW4pO1xuICAgICAgcGluU2V0dGVyID0gZ3NhcC5xdWlja1NldHRlcihwaW4sIGRpcmVjdGlvbi5hLCBfcHgpOyAvLyBwaW4uZmlyc3RDaGlsZCAmJiAhX21heFNjcm9sbChwaW4sIGRpcmVjdGlvbikgJiYgKHBpbi5zdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCIpOyAvLyBwcm90ZWN0cyBmcm9tIGNvbGxhcHNpbmcgbWFyZ2lucywgYnV0IGNhbiBoYXZlIHVuaW50ZW5kZWQgY29uc2VxdWVuY2VzIGFzIGRlbW9uc3RyYXRlZCBoZXJlOiBodHRwczovL2NvZGVwZW4uaW8vR3JlZW5Tb2NrL3Blbi8xZTQyYzdhNzNiZmE0MDlkMmNmMWUxODRlN2E0MjQ4ZCBzbyBpdCB3YXMgcmVtb3ZlZCBpbiBmYXZvciBvZiBqdXN0IHRlbGxpbmcgcGVvcGxlIHRvIHNldCB1cCB0aGVpciBDU1MgdG8gYXZvaWQgdGhlIGNvbGxhcHNpbmcgbWFyZ2lucyAob3ZlcmZsb3c6IGhpZGRlbiB8IGF1dG8gaXMganVzdCBvbmUgb3B0aW9uLiBBbm90aGVyIGlzIGJvcmRlci10b3A6IDFweCBzb2xpZCB0cmFuc3BhcmVudCkuXG5cbiAgICAgIF9zd2FwUGluSW4ocGluLCBzcGFjZXIsIGNzKTtcblxuICAgICAgcGluU3RhdGUgPSBfZ2V0U3RhdGUocGluKTtcbiAgICB9XG5cbiAgICBpZiAobWFya2Vycykge1xuICAgICAgbWFya2VyVmFycyA9IF9pc09iamVjdChtYXJrZXJzKSA/IF9zZXREZWZhdWx0cyhtYXJrZXJzLCBfbWFya2VyRGVmYXVsdHMpIDogX21hcmtlckRlZmF1bHRzO1xuICAgICAgbWFya2VyU3RhcnRUcmlnZ2VyID0gX2NyZWF0ZU1hcmtlcihcInNjcm9sbGVyLXN0YXJ0XCIsIGlkLCBzY3JvbGxlciwgZGlyZWN0aW9uLCBtYXJrZXJWYXJzLCAwKTtcbiAgICAgIG1hcmtlckVuZFRyaWdnZXIgPSBfY3JlYXRlTWFya2VyKFwic2Nyb2xsZXItZW5kXCIsIGlkLCBzY3JvbGxlciwgZGlyZWN0aW9uLCBtYXJrZXJWYXJzLCAwLCBtYXJrZXJTdGFydFRyaWdnZXIpO1xuICAgICAgb2Zmc2V0ID0gbWFya2VyU3RhcnRUcmlnZ2VyW1wib2Zmc2V0XCIgKyBkaXJlY3Rpb24ub3AuZDJdO1xuXG4gICAgICB2YXIgY29udGVudCA9IF9nZXRUYXJnZXQoX2dldFByb3h5UHJvcChzY3JvbGxlciwgXCJjb250ZW50XCIpIHx8IHNjcm9sbGVyKTtcblxuICAgICAgbWFya2VyU3RhcnQgPSB0aGlzLm1hcmtlclN0YXJ0ID0gX2NyZWF0ZU1hcmtlcihcInN0YXJ0XCIsIGlkLCBjb250ZW50LCBkaXJlY3Rpb24sIG1hcmtlclZhcnMsIG9mZnNldCwgMCwgY29udGFpbmVyQW5pbWF0aW9uKTtcbiAgICAgIG1hcmtlckVuZCA9IHRoaXMubWFya2VyRW5kID0gX2NyZWF0ZU1hcmtlcihcImVuZFwiLCBpZCwgY29udGVudCwgZGlyZWN0aW9uLCBtYXJrZXJWYXJzLCBvZmZzZXQsIDAsIGNvbnRhaW5lckFuaW1hdGlvbik7XG4gICAgICBjb250YWluZXJBbmltYXRpb24gJiYgKGNhTWFya2VyU2V0dGVyID0gZ3NhcC5xdWlja1NldHRlcihbbWFya2VyU3RhcnQsIG1hcmtlckVuZF0sIGRpcmVjdGlvbi5hLCBfcHgpKTtcblxuICAgICAgaWYgKCF1c2VGaXhlZFBvc2l0aW9uICYmICEoX3Byb3hpZXMubGVuZ3RoICYmIF9nZXRQcm94eVByb3Aoc2Nyb2xsZXIsIFwiZml4ZWRNYXJrZXJzXCIpID09PSB0cnVlKSkge1xuICAgICAgICBfbWFrZVBvc2l0aW9uYWJsZShpc1ZpZXdwb3J0ID8gX2JvZHkgOiBzY3JvbGxlcik7XG5cbiAgICAgICAgZ3NhcC5zZXQoW21hcmtlclN0YXJ0VHJpZ2dlciwgbWFya2VyRW5kVHJpZ2dlcl0sIHtcbiAgICAgICAgICBmb3JjZTNEOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBtYXJrZXJTdGFydFNldHRlciA9IGdzYXAucXVpY2tTZXR0ZXIobWFya2VyU3RhcnRUcmlnZ2VyLCBkaXJlY3Rpb24uYSwgX3B4KTtcbiAgICAgICAgbWFya2VyRW5kU2V0dGVyID0gZ3NhcC5xdWlja1NldHRlcihtYXJrZXJFbmRUcmlnZ2VyLCBkaXJlY3Rpb24uYSwgX3B4KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY29udGFpbmVyQW5pbWF0aW9uKSB7XG4gICAgICB2YXIgb2xkT25VcGRhdGUgPSBjb250YWluZXJBbmltYXRpb24udmFycy5vblVwZGF0ZSxcbiAgICAgICAgICBvbGRQYXJhbXMgPSBjb250YWluZXJBbmltYXRpb24udmFycy5vblVwZGF0ZVBhcmFtcztcbiAgICAgIGNvbnRhaW5lckFuaW1hdGlvbi5ldmVudENhbGxiYWNrKFwib25VcGRhdGVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBzZWxmLnVwZGF0ZSgwLCAwLCAxKTtcbiAgICAgICAgb2xkT25VcGRhdGUgJiYgb2xkT25VcGRhdGUuYXBwbHkoY29udGFpbmVyQW5pbWF0aW9uLCBvbGRQYXJhbXMgfHwgW10pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgc2VsZi5wcmV2aW91cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfdHJpZ2dlcnNbX3RyaWdnZXJzLmluZGV4T2Yoc2VsZikgLSAxXTtcbiAgICB9O1xuXG4gICAgc2VsZi5uZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90cmlnZ2Vyc1tfdHJpZ2dlcnMuaW5kZXhPZihzZWxmKSArIDFdO1xuICAgIH07XG5cbiAgICBzZWxmLnJldmVydCA9IGZ1bmN0aW9uIChyZXZlcnQsIHRlbXApIHtcbiAgICAgIGlmICghdGVtcCkge1xuICAgICAgICByZXR1cm4gc2VsZi5raWxsKHRydWUpO1xuICAgICAgfSAvLyBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIGdzYXAuY29udGV4dCgpIGFuZCBnc2FwLm1hdGNoTWVkaWEoKSB3aGljaCBjYWxsIHJldmVydCgpXG5cblxuICAgICAgdmFyIHIgPSByZXZlcnQgIT09IGZhbHNlIHx8ICFzZWxmLmVuYWJsZWQsXG4gICAgICAgICAgcHJldlJlZnJlc2hpbmcgPSBfcmVmcmVzaGluZztcblxuICAgICAgaWYgKHIgIT09IHNlbGYuaXNSZXZlcnRlZCkge1xuICAgICAgICBpZiAocikge1xuICAgICAgICAgIHByZXZTY3JvbGwgPSBNYXRoLm1heChzY3JvbGxGdW5jKCksIHNlbGYuc2Nyb2xsLnJlYyB8fCAwKTsgLy8gcmVjb3JkIHRoZSBzY3JvbGwgc28gd2UgY2FuIHJldmVydCBsYXRlciAocmVwb3NpdGlvbmluZy9waW5uaW5nIHRoaW5ncyBjYW4gYWZmZWN0IHNjcm9sbCBwb3NpdGlvbikuIEluIHRoZSBzdGF0aWMgcmVmcmVzaCgpIG1ldGhvZCwgd2UgZmlyc3QgcmVjb3JkIGFsbCB0aGUgc2Nyb2xsIHBvc2l0aW9ucyBhcyBhIHJlZmVyZW5jZS5cblxuICAgICAgICAgIHByZXZQcm9ncmVzcyA9IHNlbGYucHJvZ3Jlc3M7XG4gICAgICAgICAgcHJldkFuaW1Qcm9ncmVzcyA9IGFuaW1hdGlvbiAmJiBhbmltYXRpb24ucHJvZ3Jlc3MoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG1hcmtlclN0YXJ0ICYmIFttYXJrZXJTdGFydCwgbWFya2VyRW5kLCBtYXJrZXJTdGFydFRyaWdnZXIsIG1hcmtlckVuZFRyaWdnZXJdLmZvckVhY2goZnVuY3Rpb24gKG0pIHtcbiAgICAgICAgICByZXR1cm4gbS5zdHlsZS5kaXNwbGF5ID0gciA/IFwibm9uZVwiIDogXCJibG9ja1wiO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAocikge1xuICAgICAgICAgIF9yZWZyZXNoaW5nID0gc2VsZjtcbiAgICAgICAgICBzZWxmLnVwZGF0ZShyKTsgLy8gbWFrZSBzdXJlIHRoZSBwaW4gaXMgYmFjayBpbiBpdHMgb3JpZ2luYWwgcG9zaXRpb24gc28gdGhhdCBhbGwgdGhlIG1lYXN1cmVtZW50cyBhcmUgY29ycmVjdC4gZG8gdGhpcyBCRUZPUkUgc3dhcHBpbmcgdGhlIHBpbiBvdXRcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwaW4gJiYgKCFwaW5SZXBhcmVudCB8fCAhc2VsZi5pc0FjdGl2ZSkpIHtcbiAgICAgICAgICBpZiAocikge1xuICAgICAgICAgICAgX3N3YXBQaW5PdXQocGluLCBzcGFjZXIsIHBpbk9yaWdpbmFsU3RhdGUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfc3dhcFBpbkluKHBpbiwgc3BhY2VyLCBfZ2V0Q29tcHV0ZWRTdHlsZShwaW4pLCBzcGFjZXJTdGF0ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgciB8fCBzZWxmLnVwZGF0ZShyKTsgLy8gd2hlbiB3ZSdyZSByZXN0b3JpbmcsIHRoZSB1cGRhdGUgc2hvdWxkIHJ1biBBRlRFUiBzd2FwcGluZyB0aGUgcGluIGludG8gaXRzIHBpbi1zcGFjZXIuXG5cbiAgICAgICAgX3JlZnJlc2hpbmcgPSBwcmV2UmVmcmVzaGluZzsgLy8gcmVzdG9yZS4gV2Ugc2V0IGl0IHRvIHRydWUgZHVyaW5nIHRoZSB1cGRhdGUoKSBzbyB0aGF0IHRoaW5ncyBmaXJlIHByb3Blcmx5IGluIHRoZXJlLlxuXG4gICAgICAgIHNlbGYuaXNSZXZlcnRlZCA9IHI7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHNlbGYucmVmcmVzaCA9IGZ1bmN0aW9uIChzb2Z0LCBmb3JjZSwgcG9zaXRpb24sIHBpbk9mZnNldCkge1xuICAgICAgLy8gcG9zaXRpb24gaXMgdHlwaWNhbGx5IG9ubHkgZGVmaW5lZCBpZiBpdCdzIGNvbWluZyBmcm9tIHNldFBvc2l0aW9ucygpIC0gaXQncyBhIHdheSB0byBza2lwIHRoZSBub3JtYWwgcGFyc2luZy4gcGluT2Zmc2V0IGlzIGFsc28gb25seSBmcm9tIHNldFBvc2l0aW9ucygpIGFuZCBpcyBtb3N0bHkgcmVsYXRlZCB0byBmYW5jeSBzdHVmZiB3ZSBuZWVkIHRvIGRvIGluIFNjcm9sbFNtb290aGVyIHdpdGggZWZmZWN0c1xuICAgICAgaWYgKChfcmVmcmVzaGluZyB8fCAhc2VsZi5lbmFibGVkKSAmJiAhZm9yY2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAocGluICYmIHNvZnQgJiYgX2xhc3RTY3JvbGxUaW1lKSB7XG4gICAgICAgIF9hZGRMaXN0ZW5lcihTY3JvbGxUcmlnZ2VyLCBcInNjcm9sbEVuZFwiLCBfc29mdFJlZnJlc2gpO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgIV9yZWZyZXNoaW5nQWxsICYmIG9uUmVmcmVzaEluaXQgJiYgb25SZWZyZXNoSW5pdChzZWxmKTtcbiAgICAgIF9yZWZyZXNoaW5nID0gc2VsZjtcblxuICAgICAgaWYgKHR3ZWVuVG8udHdlZW4gJiYgIXBvc2l0aW9uKSB7XG4gICAgICAgIC8vIHdlIHNraXAgdGhpcyBpZiBhIHBvc2l0aW9uIGlzIHBhc3NlZCBpbiBiZWNhdXNlIHR5cGljYWxseSB0aGF0J3MgZnJvbSAuc2V0UG9zaXRpb25zKCkgYW5kIGl0J3MgYmVzdCB0byBhbGxvdyBpbi1wcm9ncmVzcyBzbmFwcGluZyB0byBjb250aW51ZS5cbiAgICAgICAgdHdlZW5Uby50d2Vlbi5raWxsKCk7XG4gICAgICAgIHR3ZWVuVG8udHdlZW4gPSAwO1xuICAgICAgfVxuXG4gICAgICBzY3J1YlR3ZWVuICYmIHNjcnViVHdlZW4ucGF1c2UoKTtcbiAgICAgIGludmFsaWRhdGVPblJlZnJlc2ggJiYgYW5pbWF0aW9uICYmIGFuaW1hdGlvbi5yZXZlcnQoe1xuICAgICAgICBraWxsOiBmYWxzZVxuICAgICAgfSkuaW52YWxpZGF0ZSgpO1xuICAgICAgc2VsZi5pc1JldmVydGVkIHx8IHNlbGYucmV2ZXJ0KHRydWUsIHRydWUpO1xuICAgICAgc2VsZi5fc3ViUGluT2Zmc2V0ID0gZmFsc2U7IC8vIHdlJ2xsIHNldCB0aGlzIHRvIHRydWUgaW4gdGhlIHN1Yi1waW5zIGlmIHdlIGZpbmQgYW55XG5cbiAgICAgIHZhciBzaXplID0gZ2V0U2Nyb2xsZXJTaXplKCksXG4gICAgICAgICAgc2Nyb2xsZXJCb3VuZHMgPSBnZXRTY3JvbGxlck9mZnNldHMoKSxcbiAgICAgICAgICBtYXggPSBjb250YWluZXJBbmltYXRpb24gPyBjb250YWluZXJBbmltYXRpb24uZHVyYXRpb24oKSA6IF9tYXhTY3JvbGwoc2Nyb2xsZXIsIGRpcmVjdGlvbiksXG4gICAgICAgICAgaXNGaXJzdFJlZnJlc2ggPSBjaGFuZ2UgPD0gMC4wMSxcbiAgICAgICAgICBvZmZzZXQgPSAwLFxuICAgICAgICAgIG90aGVyUGluT2Zmc2V0ID0gcGluT2Zmc2V0IHx8IDAsXG4gICAgICAgICAgcGFyc2VkRW5kID0gX2lzT2JqZWN0KHBvc2l0aW9uKSA/IHBvc2l0aW9uLmVuZCA6IHZhcnMuZW5kLFxuICAgICAgICAgIHBhcnNlZEVuZFRyaWdnZXIgPSB2YXJzLmVuZFRyaWdnZXIgfHwgdHJpZ2dlcixcbiAgICAgICAgICBwYXJzZWRTdGFydCA9IF9pc09iamVjdChwb3NpdGlvbikgPyBwb3NpdGlvbi5zdGFydCA6IHZhcnMuc3RhcnQgfHwgKHZhcnMuc3RhcnQgPT09IDAgfHwgIXRyaWdnZXIgPyAwIDogcGluID8gXCIwIDBcIiA6IFwiMCAxMDAlXCIpLFxuICAgICAgICAgIHBpbm5lZENvbnRhaW5lciA9IHNlbGYucGlubmVkQ29udGFpbmVyID0gdmFycy5waW5uZWRDb250YWluZXIgJiYgX2dldFRhcmdldCh2YXJzLnBpbm5lZENvbnRhaW5lciwgc2VsZiksXG4gICAgICAgICAgdHJpZ2dlckluZGV4ID0gdHJpZ2dlciAmJiBNYXRoLm1heCgwLCBfdHJpZ2dlcnMuaW5kZXhPZihzZWxmKSkgfHwgMCxcbiAgICAgICAgICBpID0gdHJpZ2dlckluZGV4LFxuICAgICAgICAgIGNzLFxuICAgICAgICAgIGJvdW5kcyxcbiAgICAgICAgICBzY3JvbGwsXG4gICAgICAgICAgaXNWZXJ0aWNhbCxcbiAgICAgICAgICBvdmVycmlkZSxcbiAgICAgICAgICBjdXJUcmlnZ2VyLFxuICAgICAgICAgIGN1clBpbixcbiAgICAgICAgICBvcHBvc2l0ZVNjcm9sbCxcbiAgICAgICAgICBpbml0dGVkLFxuICAgICAgICAgIHJldmVydGVkUGlucyxcbiAgICAgICAgICBmb3JjZWRPdmVyZmxvdyxcbiAgICAgICAgICBtYXJrZXJTdGFydE9mZnNldCxcbiAgICAgICAgICBtYXJrZXJFbmRPZmZzZXQ7XG5cbiAgICAgIGlmIChtYXJrZXJzICYmIF9pc09iamVjdChwb3NpdGlvbikpIHtcbiAgICAgICAgLy8gaWYgd2UgYWx0ZXIgdGhlIHN0YXJ0L2VuZCBwb3NpdGlvbnMgd2l0aCAuc2V0UG9zaXRpb25zKCksIGl0IGdlbmVyYWxseSBmZWVkcyBpbiBhYnNvbHV0ZSBOVU1CRVJTIHdoaWNoIGRvbid0IGNvbnZleSBpbmZvcm1hdGlvbiBhYm91dCB3aGVyZSB0byBsaW5lIHVwIHRoZSBtYXJrZXJzLCBzbyB0byBrZWVwIGl0IGludHVpdGl2ZSwgd2UgcmVjb3JkIGhvdyBmYXIgdGhlIHRyaWdnZXIgcG9zaXRpb25zIHNoaWZ0IGFmdGVyIGFwcGx5aW5nIHRoZSBuZXcgbnVtYmVycyBhbmQgdGhlbiBvZmZzZXQgYnkgdGhhdCBtdWNoIGluIHRoZSBvcHBvc2l0ZSBkaXJlY3Rpb24uIFdlIGRvIHRoZSBzYW1lIHRvIHRoZSBhc3NvY2lhdGVkIHRyaWdnZXIgbWFya2VycyB0b28gb2YgY291cnNlLlxuICAgICAgICBtYXJrZXJTdGFydE9mZnNldCA9IGdzYXAuZ2V0UHJvcGVydHkobWFya2VyU3RhcnRUcmlnZ2VyLCBkaXJlY3Rpb24ucCk7XG4gICAgICAgIG1hcmtlckVuZE9mZnNldCA9IGdzYXAuZ2V0UHJvcGVydHkobWFya2VyRW5kVHJpZ2dlciwgZGlyZWN0aW9uLnApO1xuICAgICAgfVxuXG4gICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIC8vIHVzZXIgbWlnaHQgdHJ5IHRvIHBpbiB0aGUgc2FtZSBlbGVtZW50IG1vcmUgdGhhbiBvbmNlLCBzbyB3ZSBtdXN0IGZpbmQgYW55IHByaW9yIHRyaWdnZXJzIHdpdGggdGhlIHNhbWUgcGluLCByZXZlcnQgdGhlbSwgYW5kIGRldGVybWluZSBob3cgbG9uZyB0aGV5J3JlIHBpbm5pbmcgc28gdGhhdCB3ZSBjYW4gb2Zmc2V0IHRoaW5ncyBhcHByb3ByaWF0ZWx5LiBNYWtlIHN1cmUgd2UgcmV2ZXJ0IGZyb20gbGFzdCB0byBmaXJzdCBzbyB0aGF0IHRoaW5ncyBcInJld2luZFwiIHByb3Blcmx5LlxuICAgICAgICBjdXJUcmlnZ2VyID0gX3RyaWdnZXJzW2ldO1xuICAgICAgICBjdXJUcmlnZ2VyLmVuZCB8fCBjdXJUcmlnZ2VyLnJlZnJlc2goMCwgMSkgfHwgKF9yZWZyZXNoaW5nID0gc2VsZik7IC8vIGlmIGl0J3MgYSB0aW1lbGluZS1iYXNlZCB0cmlnZ2VyIHRoYXQgaGFzbid0IGJlZW4gZnVsbHkgaW5pdGlhbGl6ZWQgeWV0IGJlY2F1c2UgaXQncyB3YWl0aW5nIGZvciAxIHRpY2ssIGp1c3QgZm9yY2UgdGhlIHJlZnJlc2goKSBoZXJlLCBvdGhlcndpc2UgaWYgaXQgY29udGFpbnMgYSBwaW4gdGhhdCdzIHN1cHBvc2VkIHRvIGFmZmVjdCBvdGhlciBTY3JvbGxUcmlnZ2VycyBmdXJ0aGVyIGRvd24gdGhlIHBhZ2UsIHRoZXkgd29uJ3QgYmUgYWRqdXN0ZWQgcHJvcGVybHkuXG5cbiAgICAgICAgY3VyUGluID0gY3VyVHJpZ2dlci5waW47XG5cbiAgICAgICAgaWYgKGN1clBpbiAmJiAoY3VyUGluID09PSB0cmlnZ2VyIHx8IGN1clBpbiA9PT0gcGluIHx8IGN1clBpbiA9PT0gcGlubmVkQ29udGFpbmVyKSAmJiAhY3VyVHJpZ2dlci5pc1JldmVydGVkKSB7XG4gICAgICAgICAgcmV2ZXJ0ZWRQaW5zIHx8IChyZXZlcnRlZFBpbnMgPSBbXSk7XG4gICAgICAgICAgcmV2ZXJ0ZWRQaW5zLnVuc2hpZnQoY3VyVHJpZ2dlcik7IC8vIHdlJ2xsIHJldmVydCBmcm9tIGZpcnN0IHRvIGxhc3QgdG8gbWFrZSBzdXJlIHRoaW5ncyByZWFjaCB0aGVpciBlbmQgc3RhdGUgcHJvcGVybHlcblxuICAgICAgICAgIGN1clRyaWdnZXIucmV2ZXJ0KHRydWUsIHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGN1clRyaWdnZXIgIT09IF90cmlnZ2Vyc1tpXSkge1xuICAgICAgICAgIC8vIGluIGNhc2UgaXQgZ290IHJlbW92ZWQuXG4gICAgICAgICAgdHJpZ2dlckluZGV4LS07XG4gICAgICAgICAgaS0tO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIF9pc0Z1bmN0aW9uKHBhcnNlZFN0YXJ0KSAmJiAocGFyc2VkU3RhcnQgPSBwYXJzZWRTdGFydChzZWxmKSk7XG4gICAgICBwYXJzZWRTdGFydCA9IF9wYXJzZUNsYW1wKHBhcnNlZFN0YXJ0LCBcInN0YXJ0XCIsIHNlbGYpO1xuICAgICAgc3RhcnQgPSBfcGFyc2VQb3NpdGlvbihwYXJzZWRTdGFydCwgdHJpZ2dlciwgc2l6ZSwgZGlyZWN0aW9uLCBzY3JvbGxGdW5jKCksIG1hcmtlclN0YXJ0LCBtYXJrZXJTdGFydFRyaWdnZXIsIHNlbGYsIHNjcm9sbGVyQm91bmRzLCBib3JkZXJXaWR0aCwgdXNlRml4ZWRQb3NpdGlvbiwgbWF4LCBjb250YWluZXJBbmltYXRpb24sIHNlbGYuX3N0YXJ0Q2xhbXAgJiYgXCJfc3RhcnRDbGFtcFwiKSB8fCAocGluID8gLTAuMDAxIDogMCk7XG4gICAgICBfaXNGdW5jdGlvbihwYXJzZWRFbmQpICYmIChwYXJzZWRFbmQgPSBwYXJzZWRFbmQoc2VsZikpO1xuXG4gICAgICBpZiAoX2lzU3RyaW5nKHBhcnNlZEVuZCkgJiYgIXBhcnNlZEVuZC5pbmRleE9mKFwiKz1cIikpIHtcbiAgICAgICAgaWYgKH5wYXJzZWRFbmQuaW5kZXhPZihcIiBcIikpIHtcbiAgICAgICAgICBwYXJzZWRFbmQgPSAoX2lzU3RyaW5nKHBhcnNlZFN0YXJ0KSA/IHBhcnNlZFN0YXJ0LnNwbGl0KFwiIFwiKVswXSA6IFwiXCIpICsgcGFyc2VkRW5kO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9mZnNldCA9IF9vZmZzZXRUb1B4KHBhcnNlZEVuZC5zdWJzdHIoMiksIHNpemUpO1xuICAgICAgICAgIHBhcnNlZEVuZCA9IF9pc1N0cmluZyhwYXJzZWRTdGFydCkgPyBwYXJzZWRTdGFydCA6IChjb250YWluZXJBbmltYXRpb24gPyBnc2FwLnV0aWxzLm1hcFJhbmdlKDAsIGNvbnRhaW5lckFuaW1hdGlvbi5kdXJhdGlvbigpLCBjb250YWluZXJBbmltYXRpb24uc2Nyb2xsVHJpZ2dlci5zdGFydCwgY29udGFpbmVyQW5pbWF0aW9uLnNjcm9sbFRyaWdnZXIuZW5kLCBzdGFydCkgOiBzdGFydCkgKyBvZmZzZXQ7IC8vIF9wYXJzZVBvc2l0aW9uIHdvbid0IGZhY3RvciBpbiB0aGUgb2Zmc2V0IGlmIHRoZSBzdGFydCBpcyBhIG51bWJlciwgc28gZG8gaXQgaGVyZS5cblxuICAgICAgICAgIHBhcnNlZEVuZFRyaWdnZXIgPSB0cmlnZ2VyO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHBhcnNlZEVuZCA9IF9wYXJzZUNsYW1wKHBhcnNlZEVuZCwgXCJlbmRcIiwgc2VsZik7XG4gICAgICBlbmQgPSBNYXRoLm1heChzdGFydCwgX3BhcnNlUG9zaXRpb24ocGFyc2VkRW5kIHx8IChwYXJzZWRFbmRUcmlnZ2VyID8gXCIxMDAlIDBcIiA6IG1heCksIHBhcnNlZEVuZFRyaWdnZXIsIHNpemUsIGRpcmVjdGlvbiwgc2Nyb2xsRnVuYygpICsgb2Zmc2V0LCBtYXJrZXJFbmQsIG1hcmtlckVuZFRyaWdnZXIsIHNlbGYsIHNjcm9sbGVyQm91bmRzLCBib3JkZXJXaWR0aCwgdXNlRml4ZWRQb3NpdGlvbiwgbWF4LCBjb250YWluZXJBbmltYXRpb24sIHNlbGYuX2VuZENsYW1wICYmIFwiX2VuZENsYW1wXCIpKSB8fCAtMC4wMDE7XG4gICAgICBvZmZzZXQgPSAwO1xuICAgICAgaSA9IHRyaWdnZXJJbmRleDtcblxuICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICBjdXJUcmlnZ2VyID0gX3RyaWdnZXJzW2ldO1xuICAgICAgICBjdXJQaW4gPSBjdXJUcmlnZ2VyLnBpbjtcblxuICAgICAgICBpZiAoY3VyUGluICYmIGN1clRyaWdnZXIuc3RhcnQgLSBjdXJUcmlnZ2VyLl9waW5QdXNoIDw9IHN0YXJ0ICYmICFjb250YWluZXJBbmltYXRpb24gJiYgY3VyVHJpZ2dlci5lbmQgPiAwKSB7XG4gICAgICAgICAgY3MgPSBjdXJUcmlnZ2VyLmVuZCAtIChzZWxmLl9zdGFydENsYW1wID8gTWF0aC5tYXgoMCwgY3VyVHJpZ2dlci5zdGFydCkgOiBjdXJUcmlnZ2VyLnN0YXJ0KTtcblxuICAgICAgICAgIGlmICgoY3VyUGluID09PSB0cmlnZ2VyICYmIGN1clRyaWdnZXIuc3RhcnQgLSBjdXJUcmlnZ2VyLl9waW5QdXNoIDwgc3RhcnQgfHwgY3VyUGluID09PSBwaW5uZWRDb250YWluZXIpICYmIGlzTmFOKHBhcnNlZFN0YXJ0KSkge1xuICAgICAgICAgICAgLy8gbnVtZXJpYyBzdGFydCB2YWx1ZXMgc2hvdWxkbid0IGJlIG9mZnNldCBhdCBhbGwgLSB0cmVhdCB0aGVtIGFzIGFic29sdXRlXG4gICAgICAgICAgICBvZmZzZXQgKz0gY3MgKiAoMSAtIGN1clRyaWdnZXIucHJvZ3Jlc3MpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGN1clBpbiA9PT0gcGluICYmIChvdGhlclBpbk9mZnNldCArPSBjcyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc3RhcnQgKz0gb2Zmc2V0O1xuICAgICAgZW5kICs9IG9mZnNldDtcbiAgICAgIHNlbGYuX3N0YXJ0Q2xhbXAgJiYgKHNlbGYuX3N0YXJ0Q2xhbXAgKz0gb2Zmc2V0KTtcblxuICAgICAgaWYgKHNlbGYuX2VuZENsYW1wICYmICFfcmVmcmVzaGluZ0FsbCkge1xuICAgICAgICBzZWxmLl9lbmRDbGFtcCA9IGVuZCB8fCAtMC4wMDE7XG4gICAgICAgIGVuZCA9IE1hdGgubWluKGVuZCwgX21heFNjcm9sbChzY3JvbGxlciwgZGlyZWN0aW9uKSk7XG4gICAgICB9XG5cbiAgICAgIGNoYW5nZSA9IGVuZCAtIHN0YXJ0IHx8IChzdGFydCAtPSAwLjAxKSAmJiAwLjAwMTtcblxuICAgICAgaWYgKGlzRmlyc3RSZWZyZXNoKSB7XG4gICAgICAgIC8vIG9uIHRoZSB2ZXJ5IGZpcnN0IHJlZnJlc2goKSwgdGhlIHByZXZQcm9ncmVzcyBjb3VsZG4ndCBoYXZlIGJlZW4gYWNjdXJhdGUgeWV0IGJlY2F1c2UgdGhlIHN0YXJ0L2VuZCB3ZXJlIG5ldmVyIGNhbGN1bGF0ZWQsIHNvIHdlIHNldCBpdCBoZXJlLiBCZWZvcmUgMy4xMS41LCBpdCBjb3VsZCBsZWFkIHRvIGFuIGluYWNjdXJhdGUgc2Nyb2xsIHBvc2l0aW9uIHJlc3RvcmF0aW9uIHdpdGggc25hcHBpbmcuXG4gICAgICAgIHByZXZQcm9ncmVzcyA9IGdzYXAudXRpbHMuY2xhbXAoMCwgMSwgZ3NhcC51dGlscy5ub3JtYWxpemUoc3RhcnQsIGVuZCwgcHJldlNjcm9sbCkpO1xuICAgICAgfVxuXG4gICAgICBzZWxmLl9waW5QdXNoID0gb3RoZXJQaW5PZmZzZXQ7XG5cbiAgICAgIGlmIChtYXJrZXJTdGFydCAmJiBvZmZzZXQpIHtcbiAgICAgICAgLy8gb2Zmc2V0IHRoZSBtYXJrZXJzIGlmIG5lY2Vzc2FyeVxuICAgICAgICBjcyA9IHt9O1xuICAgICAgICBjc1tkaXJlY3Rpb24uYV0gPSBcIis9XCIgKyBvZmZzZXQ7XG4gICAgICAgIHBpbm5lZENvbnRhaW5lciAmJiAoY3NbZGlyZWN0aW9uLnBdID0gXCItPVwiICsgc2Nyb2xsRnVuYygpKTtcbiAgICAgICAgZ3NhcC5zZXQoW21hcmtlclN0YXJ0LCBtYXJrZXJFbmRdLCBjcyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChwaW4gJiYgIShfY2xhbXBpbmdNYXggJiYgc2VsZi5lbmQgPj0gX21heFNjcm9sbChzY3JvbGxlciwgZGlyZWN0aW9uKSkpIHtcbiAgICAgICAgY3MgPSBfZ2V0Q29tcHV0ZWRTdHlsZShwaW4pO1xuICAgICAgICBpc1ZlcnRpY2FsID0gZGlyZWN0aW9uID09PSBfdmVydGljYWw7XG4gICAgICAgIHNjcm9sbCA9IHNjcm9sbEZ1bmMoKTsgLy8gcmVjYWxjdWxhdGUgYmVjYXVzZSB0aGUgdHJpZ2dlcnMgY2FuIGFmZmVjdCB0aGUgc2Nyb2xsXG5cbiAgICAgICAgcGluU3RhcnQgPSBwYXJzZUZsb2F0KHBpbkdldHRlcihkaXJlY3Rpb24uYSkpICsgb3RoZXJQaW5PZmZzZXQ7XG5cbiAgICAgICAgaWYgKCFtYXggJiYgZW5kID4gMSkge1xuICAgICAgICAgIC8vIG1ha2VzIHN1cmUgdGhlIHNjcm9sbGVyIGhhcyBhIHNjcm9sbGJhciwgb3RoZXJ3aXNlIGlmIHNvbWV0aGluZyBoYXMgd2lkdGg6IDEwMCUsIGZvciBleGFtcGxlLCBpdCB3b3VsZCBiZSB0b28gYmlnIChleGNsdWRlIHRoZSBzY3JvbGxiYXIpLiBTZWUgaHR0cHM6Ly9nc2FwLmNvbS9mb3J1bXMvdG9waWMvMjUxODItc2Nyb2xsdHJpZ2dlci13aWR0aC1vZi1wYWdlLWluY3JlYXNlLXdoZXJlLW1hcmtlcnMtYXJlLXNldC10by1mYWxzZS9cbiAgICAgICAgICBmb3JjZWRPdmVyZmxvdyA9IChpc1ZpZXdwb3J0ID8gX2RvYy5zY3JvbGxpbmdFbGVtZW50IHx8IF9kb2NFbCA6IHNjcm9sbGVyKS5zdHlsZTtcbiAgICAgICAgICBmb3JjZWRPdmVyZmxvdyA9IHtcbiAgICAgICAgICAgIHN0eWxlOiBmb3JjZWRPdmVyZmxvdyxcbiAgICAgICAgICAgIHZhbHVlOiBmb3JjZWRPdmVyZmxvd1tcIm92ZXJmbG93XCIgKyBkaXJlY3Rpb24uYS50b1VwcGVyQ2FzZSgpXVxuICAgICAgICAgIH07XG5cbiAgICAgICAgICBpZiAoaXNWaWV3cG9ydCAmJiBfZ2V0Q29tcHV0ZWRTdHlsZShfYm9keSlbXCJvdmVyZmxvd1wiICsgZGlyZWN0aW9uLmEudG9VcHBlckNhc2UoKV0gIT09IFwic2Nyb2xsXCIpIHtcbiAgICAgICAgICAgIC8vIGF2b2lkIGFuIGV4dHJhIHNjcm9sbGJhciBpZiBCT1RIIDxodG1sPiBhbmQgPGJvZHk+IGhhdmUgb3ZlcmZsb3cgc2V0IHRvIFwic2Nyb2xsXCJcbiAgICAgICAgICAgIGZvcmNlZE92ZXJmbG93LnN0eWxlW1wib3ZlcmZsb3dcIiArIGRpcmVjdGlvbi5hLnRvVXBwZXJDYXNlKCldID0gXCJzY3JvbGxcIjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBfc3dhcFBpbkluKHBpbiwgc3BhY2VyLCBjcyk7XG5cbiAgICAgICAgcGluU3RhdGUgPSBfZ2V0U3RhdGUocGluKTsgLy8gdHJhbnNmb3JtcyB3aWxsIGludGVyZmVyZSB3aXRoIHRoZSB0b3AvbGVmdC9yaWdodC9ib3R0b20gcGxhY2VtZW50LCBzbyByZW1vdmUgdGhlbSB0ZW1wb3JhcmlseS4gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkgZmFjdG9ycyBpbiB0cmFuc2Zvcm1zLlxuXG4gICAgICAgIGJvdW5kcyA9IF9nZXRCb3VuZHMocGluLCB0cnVlKTtcbiAgICAgICAgb3Bwb3NpdGVTY3JvbGwgPSB1c2VGaXhlZFBvc2l0aW9uICYmIF9nZXRTY3JvbGxGdW5jKHNjcm9sbGVyLCBpc1ZlcnRpY2FsID8gX2hvcml6b250YWwgOiBfdmVydGljYWwpKCk7XG5cbiAgICAgICAgaWYgKHBpblNwYWNpbmcpIHtcbiAgICAgICAgICBzcGFjZXJTdGF0ZSA9IFtwaW5TcGFjaW5nICsgZGlyZWN0aW9uLm9zMiwgY2hhbmdlICsgb3RoZXJQaW5PZmZzZXQgKyBfcHhdO1xuICAgICAgICAgIHNwYWNlclN0YXRlLnQgPSBzcGFjZXI7XG4gICAgICAgICAgaSA9IHBpblNwYWNpbmcgPT09IF9wYWRkaW5nID8gX2dldFNpemUocGluLCBkaXJlY3Rpb24pICsgY2hhbmdlICsgb3RoZXJQaW5PZmZzZXQgOiAwO1xuXG4gICAgICAgICAgaWYgKGkpIHtcbiAgICAgICAgICAgIHNwYWNlclN0YXRlLnB1c2goZGlyZWN0aW9uLmQsIGkgKyBfcHgpOyAvLyBmb3IgYm94LXNpemluZzogYm9yZGVyLWJveCAobXVzdCBpbmNsdWRlIHBhZGRpbmcpLlxuXG4gICAgICAgICAgICBzcGFjZXIuc3R5bGUuZmxleEJhc2lzICE9PSBcImF1dG9cIiAmJiAoc3BhY2VyLnN0eWxlLmZsZXhCYXNpcyA9IGkgKyBfcHgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIF9zZXRTdGF0ZShzcGFjZXJTdGF0ZSk7XG5cbiAgICAgICAgICBpZiAocGlubmVkQ29udGFpbmVyKSB7XG4gICAgICAgICAgICAvLyBpbiBTY3JvbGxUcmlnZ2VyLnJlZnJlc2goKSwgd2UgbmVlZCB0byByZS1ldmFsdWF0ZSB0aGUgcGluQ29udGFpbmVyJ3Mgc2l6ZSBiZWNhdXNlIHRoaXMgcGluU3BhY2luZyBtYXkgc3RyZXRjaCBpdCBvdXQsIGJ1dCB3ZSBjYW4ndCBqdXN0IGFkZCB0aGUgZXhhY3QgZGlzdGFuY2UgYmVjYXVzZSBkZXBlbmRpbmcgb24gbGF5b3V0LCBpdCBtYXkgbm90IHB1c2ggdGhpbmdzIGRvd24gb3IgaXQgbWF5IG9ubHkgZG8gc28gcGFydGlhbGx5LlxuICAgICAgICAgICAgX3RyaWdnZXJzLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgaWYgKHQucGluID09PSBwaW5uZWRDb250YWluZXIgJiYgdC52YXJzLnBpblNwYWNpbmcgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgdC5fc3ViUGluT2Zmc2V0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdXNlRml4ZWRQb3NpdGlvbiAmJiBzY3JvbGxGdW5jKHByZXZTY3JvbGwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGkgPSBfZ2V0U2l6ZShwaW4sIGRpcmVjdGlvbik7XG4gICAgICAgICAgaSAmJiBzcGFjZXIuc3R5bGUuZmxleEJhc2lzICE9PSBcImF1dG9cIiAmJiAoc3BhY2VyLnN0eWxlLmZsZXhCYXNpcyA9IGkgKyBfcHgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHVzZUZpeGVkUG9zaXRpb24pIHtcbiAgICAgICAgICBvdmVycmlkZSA9IHtcbiAgICAgICAgICAgIHRvcDogYm91bmRzLnRvcCArIChpc1ZlcnRpY2FsID8gc2Nyb2xsIC0gc3RhcnQgOiBvcHBvc2l0ZVNjcm9sbCkgKyBfcHgsXG4gICAgICAgICAgICBsZWZ0OiBib3VuZHMubGVmdCArIChpc1ZlcnRpY2FsID8gb3Bwb3NpdGVTY3JvbGwgOiBzY3JvbGwgLSBzdGFydCkgKyBfcHgsXG4gICAgICAgICAgICBib3hTaXppbmc6IFwiYm9yZGVyLWJveFwiLFxuICAgICAgICAgICAgcG9zaXRpb246IFwiZml4ZWRcIlxuICAgICAgICAgIH07XG4gICAgICAgICAgb3ZlcnJpZGVbX3dpZHRoXSA9IG92ZXJyaWRlW1wibWF4XCIgKyBfV2lkdGhdID0gTWF0aC5jZWlsKGJvdW5kcy53aWR0aCkgKyBfcHg7XG4gICAgICAgICAgb3ZlcnJpZGVbX2hlaWdodF0gPSBvdmVycmlkZVtcIm1heFwiICsgX0hlaWdodF0gPSBNYXRoLmNlaWwoYm91bmRzLmhlaWdodCkgKyBfcHg7XG4gICAgICAgICAgb3ZlcnJpZGVbX21hcmdpbl0gPSBvdmVycmlkZVtfbWFyZ2luICsgX1RvcF0gPSBvdmVycmlkZVtfbWFyZ2luICsgX1JpZ2h0XSA9IG92ZXJyaWRlW19tYXJnaW4gKyBfQm90dG9tXSA9IG92ZXJyaWRlW19tYXJnaW4gKyBfTGVmdF0gPSBcIjBcIjtcbiAgICAgICAgICBvdmVycmlkZVtfcGFkZGluZ10gPSBjc1tfcGFkZGluZ107XG4gICAgICAgICAgb3ZlcnJpZGVbX3BhZGRpbmcgKyBfVG9wXSA9IGNzW19wYWRkaW5nICsgX1RvcF07XG4gICAgICAgICAgb3ZlcnJpZGVbX3BhZGRpbmcgKyBfUmlnaHRdID0gY3NbX3BhZGRpbmcgKyBfUmlnaHRdO1xuICAgICAgICAgIG92ZXJyaWRlW19wYWRkaW5nICsgX0JvdHRvbV0gPSBjc1tfcGFkZGluZyArIF9Cb3R0b21dO1xuICAgICAgICAgIG92ZXJyaWRlW19wYWRkaW5nICsgX0xlZnRdID0gY3NbX3BhZGRpbmcgKyBfTGVmdF07XG4gICAgICAgICAgcGluQWN0aXZlU3RhdGUgPSBfY29weVN0YXRlKHBpbk9yaWdpbmFsU3RhdGUsIG92ZXJyaWRlLCBwaW5SZXBhcmVudCk7XG4gICAgICAgICAgX3JlZnJlc2hpbmdBbGwgJiYgc2Nyb2xsRnVuYygwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhbmltYXRpb24pIHtcbiAgICAgICAgICAvLyB0aGUgYW5pbWF0aW9uIG1pZ2h0IGJlIGFmZmVjdGluZyB0aGUgdHJhbnNmb3JtLCBzbyB3ZSBtdXN0IGp1bXAgdG8gdGhlIGVuZCwgY2hlY2sgdGhlIHZhbHVlLCBhbmQgY29tcGVuc2F0ZSBhY2NvcmRpbmdseS4gT3RoZXJ3aXNlLCB3aGVuIGl0IGJlY29tZXMgdW5waW5uZWQsIHRoZSBwaW5TZXR0ZXIoKSB3aWxsIGdldCBzZXQgdG8gYSB2YWx1ZSB0aGF0IGRvZXNuJ3QgaW5jbHVkZSB3aGF0ZXZlciB0aGUgYW5pbWF0aW9uIGRpZC5cbiAgICAgICAgICBpbml0dGVkID0gYW5pbWF0aW9uLl9pbml0dGVkOyAvLyBpZiBub3QsIHdlIG11c3QgaW52YWxpZGF0ZSgpIGFmdGVyIHRoaXMgc3RlcCwgb3RoZXJ3aXNlIGl0IGNvdWxkIGxvY2sgaW4gc3RhcnRpbmcgdmFsdWVzIHByZW1hdHVyZWx5LlxuXG4gICAgICAgICAgX3N1cHByZXNzT3ZlcndyaXRlcygxKTtcblxuICAgICAgICAgIGFuaW1hdGlvbi5yZW5kZXIoYW5pbWF0aW9uLmR1cmF0aW9uKCksIHRydWUsIHRydWUpO1xuICAgICAgICAgIHBpbkNoYW5nZSA9IHBpbkdldHRlcihkaXJlY3Rpb24uYSkgLSBwaW5TdGFydCArIGNoYW5nZSArIG90aGVyUGluT2Zmc2V0O1xuICAgICAgICAgIHBpbk1vdmVzID0gTWF0aC5hYnMoY2hhbmdlIC0gcGluQ2hhbmdlKSA+IDE7XG4gICAgICAgICAgdXNlRml4ZWRQb3NpdGlvbiAmJiBwaW5Nb3ZlcyAmJiBwaW5BY3RpdmVTdGF0ZS5zcGxpY2UocGluQWN0aXZlU3RhdGUubGVuZ3RoIC0gMiwgMik7IC8vIHRyYW5zZm9ybSBpcyB0aGUgbGFzdCBwcm9wZXJ0eS92YWx1ZSBzZXQgaW4gdGhlIHN0YXRlIEFycmF5LiBTaW5jZSB0aGUgYW5pbWF0aW9uIGlzIGNvbnRyb2xsaW5nIHRoYXQsIHdlIHNob3VsZCBvbWl0IGl0LlxuXG4gICAgICAgICAgYW5pbWF0aW9uLnJlbmRlcigwLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgICBpbml0dGVkIHx8IGFuaW1hdGlvbi5pbnZhbGlkYXRlKHRydWUpO1xuICAgICAgICAgIGFuaW1hdGlvbi5wYXJlbnQgfHwgYW5pbWF0aW9uLnRvdGFsVGltZShhbmltYXRpb24udG90YWxUaW1lKCkpOyAvLyBpZiwgZm9yIGV4YW1wbGUsIGEgdG9nZ2xlQWN0aW9uIGNhbGxlZCBwbGF5KCkgYW5kIHRoZW4gcmVmcmVzaCgpIGhhcHBlbnMgYW5kIHdoZW4gd2UgcmVuZGVyKDEpIGFib3ZlLCBpdCB3b3VsZCBjYXVzZSB0aGUgYW5pbWF0aW9uIHRvIGNvbXBsZXRlIGFuZCBnZXQgcmVtb3ZlZCBmcm9tIGl0cyBwYXJlbnQsIHNvIHRoaXMgbWFrZXMgc3VyZSBpdCBnZXRzIHB1dCBiYWNrIGluLlxuXG4gICAgICAgICAgX3N1cHByZXNzT3ZlcndyaXRlcygwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwaW5DaGFuZ2UgPSBjaGFuZ2U7XG4gICAgICAgIH1cblxuICAgICAgICBmb3JjZWRPdmVyZmxvdyAmJiAoZm9yY2VkT3ZlcmZsb3cudmFsdWUgPyBmb3JjZWRPdmVyZmxvdy5zdHlsZVtcIm92ZXJmbG93XCIgKyBkaXJlY3Rpb24uYS50b1VwcGVyQ2FzZSgpXSA9IGZvcmNlZE92ZXJmbG93LnZhbHVlIDogZm9yY2VkT3ZlcmZsb3cuc3R5bGUucmVtb3ZlUHJvcGVydHkoXCJvdmVyZmxvdy1cIiArIGRpcmVjdGlvbi5hKSk7XG4gICAgICB9IGVsc2UgaWYgKHRyaWdnZXIgJiYgc2Nyb2xsRnVuYygpICYmICFjb250YWluZXJBbmltYXRpb24pIHtcbiAgICAgICAgLy8gaXQgbWF5IGJlIElOU0lERSBhIHBpbm5lZCBlbGVtZW50LCBzbyB3YWxrIHVwIHRoZSB0cmVlIGFuZCBsb29rIGZvciBhbnkgZWxlbWVudHMgd2l0aCBfcGluT2Zmc2V0IHRvIGNvbXBlbnNhdGUgYmVjYXVzZSBhbnl0aGluZyB3aXRoIHBpblNwYWNpbmcgdGhhdCdzIGFscmVhZHkgc2Nyb2xsZWQgd291bGQgdGhyb3cgb2ZmIHRoZSBtZWFzdXJlbWVudHMgaW4gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgICAgICAgYm91bmRzID0gdHJpZ2dlci5wYXJlbnROb2RlO1xuXG4gICAgICAgIHdoaWxlIChib3VuZHMgJiYgYm91bmRzICE9PSBfYm9keSkge1xuICAgICAgICAgIGlmIChib3VuZHMuX3Bpbk9mZnNldCkge1xuICAgICAgICAgICAgc3RhcnQgLT0gYm91bmRzLl9waW5PZmZzZXQ7XG4gICAgICAgICAgICBlbmQgLT0gYm91bmRzLl9waW5PZmZzZXQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYm91bmRzID0gYm91bmRzLnBhcmVudE5vZGU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV2ZXJ0ZWRQaW5zICYmIHJldmVydGVkUGlucy5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHJldHVybiB0LnJldmVydChmYWxzZSwgdHJ1ZSk7XG4gICAgICB9KTtcbiAgICAgIHNlbGYuc3RhcnQgPSBzdGFydDtcbiAgICAgIHNlbGYuZW5kID0gZW5kO1xuICAgICAgc2Nyb2xsMSA9IHNjcm9sbDIgPSBfcmVmcmVzaGluZ0FsbCA/IHByZXZTY3JvbGwgOiBzY3JvbGxGdW5jKCk7IC8vIHJlc2V0IHZlbG9jaXR5XG5cbiAgICAgIGlmICghY29udGFpbmVyQW5pbWF0aW9uICYmICFfcmVmcmVzaGluZ0FsbCkge1xuICAgICAgICBzY3JvbGwxIDwgcHJldlNjcm9sbCAmJiBzY3JvbGxGdW5jKHByZXZTY3JvbGwpO1xuICAgICAgICBzZWxmLnNjcm9sbC5yZWMgPSAwO1xuICAgICAgfVxuXG4gICAgICBzZWxmLnJldmVydChmYWxzZSwgdHJ1ZSk7XG4gICAgICBsYXN0UmVmcmVzaCA9IF9nZXRUaW1lKCk7XG5cbiAgICAgIGlmIChzbmFwRGVsYXllZENhbGwpIHtcbiAgICAgICAgbGFzdFNuYXAgPSAtMTsgLy8ganVzdCBzbyBzbmFwcGluZyBnZXRzIHJlLWVuYWJsZWQsIGNsZWFyIG91dCBhbnkgcmVjb3JkZWQgbGFzdCB2YWx1ZVxuICAgICAgICAvLyBzZWxmLmlzQWN0aXZlICYmIHNjcm9sbEZ1bmMoc3RhcnQgKyBjaGFuZ2UgKiBwcmV2UHJvZ3Jlc3MpOyAvLyBwcmV2aW91c2x5IHRoaXMgbGluZSB3YXMgaGVyZSB0byBlbnN1cmUgdGhhdCB3aGVuIHNuYXBwaW5nIGtpY2tzIGluLCBpdCdzIGZyb20gdGhlIHByZXZpb3VzIHByb2dyZXNzIGJ1dCBpbiBzb21lIGNhc2VzIHRoYXQncyBub3QgZGVzaXJhYmxlLCBsaWtlIGFuIGFsbC1wYWdlIFNjcm9sbFRyaWdnZXIgd2hlbiBuZXcgY29udGVudCBnZXRzIGFkZGVkIHRvIHRoZSBwYWdlLCB0aGF0J2QgdG90YWxseSBjaGFuZ2UgdGhlIHByb2dyZXNzLlxuXG4gICAgICAgIHNuYXBEZWxheWVkQ2FsbC5yZXN0YXJ0KHRydWUpO1xuICAgICAgfVxuXG4gICAgICBfcmVmcmVzaGluZyA9IDA7XG4gICAgICBhbmltYXRpb24gJiYgaXNUb2dnbGUgJiYgKGFuaW1hdGlvbi5faW5pdHRlZCB8fCBwcmV2QW5pbVByb2dyZXNzKSAmJiBhbmltYXRpb24ucHJvZ3Jlc3MoKSAhPT0gcHJldkFuaW1Qcm9ncmVzcyAmJiBhbmltYXRpb24ucHJvZ3Jlc3MocHJldkFuaW1Qcm9ncmVzcyB8fCAwLCB0cnVlKS5yZW5kZXIoYW5pbWF0aW9uLnRpbWUoKSwgdHJ1ZSwgdHJ1ZSk7IC8vIG11c3QgZm9yY2UgYSByZS1yZW5kZXIgYmVjYXVzZSBpZiBzYXZlU3R5bGVzKCkgd2FzIHVzZWQgb24gdGhlIHRhcmdldChzKSwgdGhlIHN0eWxlcyBjb3VsZCBoYXZlIGJlZW4gd2lwZWQgb3V0IGR1cmluZyB0aGUgcmVmcmVzaCgpLlxuXG4gICAgICBpZiAoaXNGaXJzdFJlZnJlc2ggfHwgcHJldlByb2dyZXNzICE9PSBzZWxmLnByb2dyZXNzIHx8IGNvbnRhaW5lckFuaW1hdGlvbiB8fCBpbnZhbGlkYXRlT25SZWZyZXNoKSB7XG4gICAgICAgIC8vIGVuc3VyZXMgdGhhdCB0aGUgZGlyZWN0aW9uIGlzIHNldCBwcm9wZXJseSAod2hlbiByZWZyZXNoaW5nLCBwcm9ncmVzcyBpcyBzZXQgYmFjayB0byAwIGluaXRpYWxseSwgdGhlbiBiYWNrIGFnYWluIHRvIHdoZXJldmVyIGl0IG5lZWRzIHRvIGJlKSBhbmQgdGhhdCBjYWxsYmFja3MgYXJlIHRyaWdnZXJlZC5cbiAgICAgICAgYW5pbWF0aW9uICYmICFpc1RvZ2dsZSAmJiBhbmltYXRpb24udG90YWxQcm9ncmVzcyhjb250YWluZXJBbmltYXRpb24gJiYgc3RhcnQgPCAtMC4wMDEgJiYgIXByZXZQcm9ncmVzcyA/IGdzYXAudXRpbHMubm9ybWFsaXplKHN0YXJ0LCBlbmQsIDApIDogcHJldlByb2dyZXNzLCB0cnVlKTsgLy8gdG8gYXZvaWQgaXNzdWVzIHdoZXJlIGFuaW1hdGlvbiBjYWxsYmFja3MgbGlrZSBvblN0YXJ0IGFyZW4ndCB0cmlnZ2VyZWQuXG5cbiAgICAgICAgc2VsZi5wcm9ncmVzcyA9IGlzRmlyc3RSZWZyZXNoIHx8IChzY3JvbGwxIC0gc3RhcnQpIC8gY2hhbmdlID09PSBwcmV2UHJvZ3Jlc3MgPyAwIDogcHJldlByb2dyZXNzO1xuICAgICAgfVxuXG4gICAgICBwaW4gJiYgcGluU3BhY2luZyAmJiAoc3BhY2VyLl9waW5PZmZzZXQgPSBNYXRoLnJvdW5kKHNlbGYucHJvZ3Jlc3MgKiBwaW5DaGFuZ2UpKTtcbiAgICAgIHNjcnViVHdlZW4gJiYgc2NydWJUd2Vlbi5pbnZhbGlkYXRlKCk7XG5cbiAgICAgIGlmICghaXNOYU4obWFya2VyU3RhcnRPZmZzZXQpKSB7XG4gICAgICAgIC8vIG51bWJlcnMgd2VyZSBwYXNzZWQgaW4gZm9yIHRoZSBwb3NpdGlvbiB3aGljaCBhcmUgYWJzb2x1dGUsIHNvIGluc3RlYWQgb2YganVzdCBwdXR0aW5nIHRoZSBtYXJrZXJzIGF0IHRoZSB2ZXJ5IGJvdHRvbSBvZiB0aGUgdmlld3BvcnQsIHdlIGZpZ3VyZSBvdXQgaG93IGZhciB0aGV5IHNoaWZ0ZWQgZG93biAoaXQncyBzYWZlIHRvIGFzc3VtZSB0aGV5IHdlcmUgb3JpZ2luYWxseSBwb3NpdGlvbmVkIGluIGNsb3NlciByZWxhdGlvbiB0byB0aGUgdHJpZ2dlciBlbGVtZW50IHdpdGggdmFsdWVzIGxpa2UgXCJ0b3BcIiwgXCJjZW50ZXJcIiwgYSBwZXJjZW50YWdlIG9yIHdoYXRldmVyLCBzbyB3ZSBvZmZzZXQgdGhhdCBtdWNoIGluIHRoZSBvcHBvc2l0ZSBkaXJlY3Rpb24gdG8gYmFzaWNhbGx5IHJldmVydCB0aGVtIHRvIHRoZSByZWxhdGl2ZSBwb3NpdGlvbiB0aHkgd2VyZSBhdCBwcmV2aW91c2x5LlxuICAgICAgICBtYXJrZXJTdGFydE9mZnNldCAtPSBnc2FwLmdldFByb3BlcnR5KG1hcmtlclN0YXJ0VHJpZ2dlciwgZGlyZWN0aW9uLnApO1xuICAgICAgICBtYXJrZXJFbmRPZmZzZXQgLT0gZ3NhcC5nZXRQcm9wZXJ0eShtYXJrZXJFbmRUcmlnZ2VyLCBkaXJlY3Rpb24ucCk7XG5cbiAgICAgICAgX3NoaWZ0TWFya2VyKG1hcmtlclN0YXJ0VHJpZ2dlciwgZGlyZWN0aW9uLCBtYXJrZXJTdGFydE9mZnNldCk7XG5cbiAgICAgICAgX3NoaWZ0TWFya2VyKG1hcmtlclN0YXJ0LCBkaXJlY3Rpb24sIG1hcmtlclN0YXJ0T2Zmc2V0IC0gKHBpbk9mZnNldCB8fCAwKSk7XG5cbiAgICAgICAgX3NoaWZ0TWFya2VyKG1hcmtlckVuZFRyaWdnZXIsIGRpcmVjdGlvbiwgbWFya2VyRW5kT2Zmc2V0KTtcblxuICAgICAgICBfc2hpZnRNYXJrZXIobWFya2VyRW5kLCBkaXJlY3Rpb24sIG1hcmtlckVuZE9mZnNldCAtIChwaW5PZmZzZXQgfHwgMCkpO1xuICAgICAgfVxuXG4gICAgICBpc0ZpcnN0UmVmcmVzaCAmJiAhX3JlZnJlc2hpbmdBbGwgJiYgc2VsZi51cGRhdGUoKTsgLy8gZWRnZSBjYXNlIC0gd2hlbiB5b3UgcmVsb2FkIGEgcGFnZSB3aGVuIGl0J3MgYWxyZWFkeSBzY3JvbGxlZCBkb3duLCBzb21lIGJyb3dzZXJzIGZpcmUgYSBcInNjcm9sbFwiIGV2ZW50IGJlZm9yZSBET01Db250ZW50TG9hZGVkLCB0cmlnZ2VyaW5nIGFuIHVwZGF0ZUFsbCgpLiBJZiB3ZSBkb24ndCB1cGRhdGUgdGhlIHNlbGYucHJvZ3Jlc3MgYXMgcGFydCBvZiByZWZyZXNoKCksIHRoZW4gd2hlbiBpdCBoYXBwZW5zIG5leHQsIGl0IG1heSByZWNvcmQgcHJldlByb2dyZXNzIGFzIDAgd2hlbiBpdCByZWFsbHkgc2hvdWxkbid0LCBwb3RlbnRpYWxseSBjYXVzaW5nIGEgY2FsbGJhY2sgaW4gYW4gYW5pbWF0aW9uIHRvIGZpcmUgYWdhaW4uXG5cbiAgICAgIGlmIChvblJlZnJlc2ggJiYgIV9yZWZyZXNoaW5nQWxsICYmICFleGVjdXRpbmdPblJlZnJlc2gpIHtcbiAgICAgICAgLy8gd2hlbiByZWZyZXNoaW5nIGFsbCwgd2UgZG8gZXh0cmEgd29yayB0byBjb3JyZWN0IHBpbm5lZENvbnRhaW5lciBzaXplcyBhbmQgZW5zdXJlIHRoaW5ncyBkb24ndCBleGNlZWQgdGhlIG1heFNjcm9sbCwgc28gd2Ugc2hvdWxkIGRvIGFsbCB0aGUgcmVmcmVzaGVzIGF0IHRoZSBlbmQgYWZ0ZXIgYWxsIHRoYXQgd29yayBzbyB0aGF0IHRoZSBzdGFydC9lbmQgdmFsdWVzIGFyZSBjb3JyZWN0ZWQuXG4gICAgICAgIGV4ZWN1dGluZ09uUmVmcmVzaCA9IHRydWU7XG4gICAgICAgIG9uUmVmcmVzaChzZWxmKTtcbiAgICAgICAgZXhlY3V0aW5nT25SZWZyZXNoID0gZmFsc2U7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHNlbGYuZ2V0VmVsb2NpdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gKHNjcm9sbEZ1bmMoKSAtIHNjcm9sbDIpIC8gKF9nZXRUaW1lKCkgLSBfdGltZTIpICogMTAwMCB8fCAwO1xuICAgIH07XG5cbiAgICBzZWxmLmVuZEFuaW1hdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF9lbmRBbmltYXRpb24oc2VsZi5jYWxsYmFja0FuaW1hdGlvbik7XG5cbiAgICAgIGlmIChhbmltYXRpb24pIHtcbiAgICAgICAgc2NydWJUd2VlbiA/IHNjcnViVHdlZW4ucHJvZ3Jlc3MoMSkgOiAhYW5pbWF0aW9uLnBhdXNlZCgpID8gX2VuZEFuaW1hdGlvbihhbmltYXRpb24sIGFuaW1hdGlvbi5yZXZlcnNlZCgpKSA6IGlzVG9nZ2xlIHx8IF9lbmRBbmltYXRpb24oYW5pbWF0aW9uLCBzZWxmLmRpcmVjdGlvbiA8IDAsIDEpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBzZWxmLmxhYmVsVG9TY3JvbGwgPSBmdW5jdGlvbiAobGFiZWwpIHtcbiAgICAgIHJldHVybiBhbmltYXRpb24gJiYgYW5pbWF0aW9uLmxhYmVscyAmJiAoc3RhcnQgfHwgc2VsZi5yZWZyZXNoKCkgfHwgc3RhcnQpICsgYW5pbWF0aW9uLmxhYmVsc1tsYWJlbF0gLyBhbmltYXRpb24uZHVyYXRpb24oKSAqIGNoYW5nZSB8fCAwO1xuICAgIH07XG5cbiAgICBzZWxmLmdldFRyYWlsaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIHZhciBpID0gX3RyaWdnZXJzLmluZGV4T2Yoc2VsZiksXG4gICAgICAgICAgYSA9IHNlbGYuZGlyZWN0aW9uID4gMCA/IF90cmlnZ2Vycy5zbGljZSgwLCBpKS5yZXZlcnNlKCkgOiBfdHJpZ2dlcnMuc2xpY2UoaSArIDEpO1xuXG4gICAgICByZXR1cm4gKF9pc1N0cmluZyhuYW1lKSA/IGEuZmlsdGVyKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHJldHVybiB0LnZhcnMucHJldmVudE92ZXJsYXBzID09PSBuYW1lO1xuICAgICAgfSkgOiBhKS5maWx0ZXIoZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgcmV0dXJuIHNlbGYuZGlyZWN0aW9uID4gMCA/IHQuZW5kIDw9IHN0YXJ0IDogdC5zdGFydCA+PSBlbmQ7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgc2VsZi51cGRhdGUgPSBmdW5jdGlvbiAocmVzZXQsIHJlY29yZFZlbG9jaXR5LCBmb3JjZUZha2UpIHtcbiAgICAgIGlmIChjb250YWluZXJBbmltYXRpb24gJiYgIWZvcmNlRmFrZSAmJiAhcmVzZXQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2Nyb2xsID0gX3JlZnJlc2hpbmdBbGwgPT09IHRydWUgPyBwcmV2U2Nyb2xsIDogc2VsZi5zY3JvbGwoKSxcbiAgICAgICAgICBwID0gcmVzZXQgPyAwIDogKHNjcm9sbCAtIHN0YXJ0KSAvIGNoYW5nZSxcbiAgICAgICAgICBjbGlwcGVkID0gcCA8IDAgPyAwIDogcCA+IDEgPyAxIDogcCB8fCAwLFxuICAgICAgICAgIHByZXZQcm9ncmVzcyA9IHNlbGYucHJvZ3Jlc3MsXG4gICAgICAgICAgaXNBY3RpdmUsXG4gICAgICAgICAgd2FzQWN0aXZlLFxuICAgICAgICAgIHRvZ2dsZVN0YXRlLFxuICAgICAgICAgIGFjdGlvbixcbiAgICAgICAgICBzdGF0ZUNoYW5nZWQsXG4gICAgICAgICAgdG9nZ2xlZCxcbiAgICAgICAgICBpc0F0TWF4LFxuICAgICAgICAgIGlzVGFraW5nQWN0aW9uO1xuXG4gICAgICBpZiAocmVjb3JkVmVsb2NpdHkpIHtcbiAgICAgICAgc2Nyb2xsMiA9IHNjcm9sbDE7XG4gICAgICAgIHNjcm9sbDEgPSBjb250YWluZXJBbmltYXRpb24gPyBzY3JvbGxGdW5jKCkgOiBzY3JvbGw7XG5cbiAgICAgICAgaWYgKHNuYXApIHtcbiAgICAgICAgICBzbmFwMiA9IHNuYXAxO1xuICAgICAgICAgIHNuYXAxID0gYW5pbWF0aW9uICYmICFpc1RvZ2dsZSA/IGFuaW1hdGlvbi50b3RhbFByb2dyZXNzKCkgOiBjbGlwcGVkO1xuICAgICAgICB9XG4gICAgICB9IC8vIGFudGljaXBhdGUgdGhlIHBpbm5pbmcgYSBmZXcgdGlja3MgYWhlYWQgb2YgdGltZSBiYXNlZCBvbiB2ZWxvY2l0eSB0byBhdm9pZCBhIHZpc3VhbCBnbGl0Y2ggZHVlIHRvIHRoZSBmYWN0IHRoYXQgbW9zdCBicm93c2VycyBkbyBzY3JvbGxpbmcgb24gYSBzZXBhcmF0ZSB0aHJlYWQgKG5vdCBzeW5jZWQgd2l0aCByZXF1ZXN0QW5pbWF0aW9uRnJhbWUpLlxuXG5cbiAgICAgIGlmIChhbnRpY2lwYXRlUGluICYmIHBpbiAmJiAhX3JlZnJlc2hpbmcgJiYgIV9zdGFydHVwICYmIF9sYXN0U2Nyb2xsVGltZSkge1xuICAgICAgICBpZiAoIWNsaXBwZWQgJiYgc3RhcnQgPCBzY3JvbGwgKyAoc2Nyb2xsIC0gc2Nyb2xsMikgLyAoX2dldFRpbWUoKSAtIF90aW1lMikgKiBhbnRpY2lwYXRlUGluKSB7XG4gICAgICAgICAgY2xpcHBlZCA9IDAuMDAwMTtcbiAgICAgICAgfSBlbHNlIGlmIChjbGlwcGVkID09PSAxICYmIGVuZCA+IHNjcm9sbCArIChzY3JvbGwgLSBzY3JvbGwyKSAvIChfZ2V0VGltZSgpIC0gX3RpbWUyKSAqIGFudGljaXBhdGVQaW4pIHtcbiAgICAgICAgICBjbGlwcGVkID0gMC45OTk5O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChjbGlwcGVkICE9PSBwcmV2UHJvZ3Jlc3MgJiYgc2VsZi5lbmFibGVkKSB7XG4gICAgICAgIGlzQWN0aXZlID0gc2VsZi5pc0FjdGl2ZSA9ICEhY2xpcHBlZCAmJiBjbGlwcGVkIDwgMTtcbiAgICAgICAgd2FzQWN0aXZlID0gISFwcmV2UHJvZ3Jlc3MgJiYgcHJldlByb2dyZXNzIDwgMTtcbiAgICAgICAgdG9nZ2xlZCA9IGlzQWN0aXZlICE9PSB3YXNBY3RpdmU7XG4gICAgICAgIHN0YXRlQ2hhbmdlZCA9IHRvZ2dsZWQgfHwgISFjbGlwcGVkICE9PSAhIXByZXZQcm9ncmVzczsgLy8gY291bGQgZ28gZnJvbSBzdGFydCBhbGwgdGhlIHdheSB0byBlbmQsIHRodXMgaXQgZGlkbid0IHRvZ2dsZSBidXQgaXQgZGlkIGNoYW5nZSBzdGF0ZSBpbiBhIHNlbnNlIChtYXkgbmVlZCB0byBmaXJlIGEgY2FsbGJhY2spXG5cbiAgICAgICAgc2VsZi5kaXJlY3Rpb24gPSBjbGlwcGVkID4gcHJldlByb2dyZXNzID8gMSA6IC0xO1xuICAgICAgICBzZWxmLnByb2dyZXNzID0gY2xpcHBlZDtcblxuICAgICAgICBpZiAoc3RhdGVDaGFuZ2VkICYmICFfcmVmcmVzaGluZykge1xuICAgICAgICAgIHRvZ2dsZVN0YXRlID0gY2xpcHBlZCAmJiAhcHJldlByb2dyZXNzID8gMCA6IGNsaXBwZWQgPT09IDEgPyAxIDogcHJldlByb2dyZXNzID09PSAxID8gMiA6IDM7IC8vIDAgPSBlbnRlciwgMSA9IGxlYXZlLCAyID0gZW50ZXJCYWNrLCAzID0gbGVhdmVCYWNrICh3ZSBwcmlvcml0aXplIHRoZSBGSVJTVCBlbmNvdW50ZXIsIHRodXMgaWYgeW91IHNjcm9sbCByZWFsbHkgZmFzdCBwYXN0IHRoZSBvbkVudGVyIGFuZCBvbkxlYXZlIGluIG9uZSB0aWNrLCBpdCdkIHByaW9yaXRpemUgb25FbnRlci5cblxuICAgICAgICAgIGlmIChpc1RvZ2dsZSkge1xuICAgICAgICAgICAgYWN0aW9uID0gIXRvZ2dsZWQgJiYgdG9nZ2xlQWN0aW9uc1t0b2dnbGVTdGF0ZSArIDFdICE9PSBcIm5vbmVcIiAmJiB0b2dnbGVBY3Rpb25zW3RvZ2dsZVN0YXRlICsgMV0gfHwgdG9nZ2xlQWN0aW9uc1t0b2dnbGVTdGF0ZV07IC8vIGlmIGl0IGRpZG4ndCB0b2dnbGUsIHRoYXQgbWVhbnMgaXQgc2hvdCByaWdodCBwYXN0IGFuZCBzaW5jZSB3ZSBwcmlvcml0aXplIHRoZSBcImVudGVyXCIgYWN0aW9uLCB3ZSBzaG91bGQgc3dpdGNoIHRvIHRoZSBcImxlYXZlXCIgaW4gdGhpcyBjYXNlIChidXQgb25seSBpZiBvbmUgaXMgZGVmaW5lZClcblxuICAgICAgICAgICAgaXNUYWtpbmdBY3Rpb24gPSBhbmltYXRpb24gJiYgKGFjdGlvbiA9PT0gXCJjb21wbGV0ZVwiIHx8IGFjdGlvbiA9PT0gXCJyZXNldFwiIHx8IGFjdGlvbiBpbiBhbmltYXRpb24pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHByZXZlbnRPdmVybGFwcyAmJiAodG9nZ2xlZCB8fCBpc1Rha2luZ0FjdGlvbikgJiYgKGlzVGFraW5nQWN0aW9uIHx8IHNjcnViIHx8ICFhbmltYXRpb24pICYmIChfaXNGdW5jdGlvbihwcmV2ZW50T3ZlcmxhcHMpID8gcHJldmVudE92ZXJsYXBzKHNlbGYpIDogc2VsZi5nZXRUcmFpbGluZyhwcmV2ZW50T3ZlcmxhcHMpLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICByZXR1cm4gdC5lbmRBbmltYXRpb24oKTtcbiAgICAgICAgfSkpO1xuXG4gICAgICAgIGlmICghaXNUb2dnbGUpIHtcbiAgICAgICAgICBpZiAoc2NydWJUd2VlbiAmJiAhX3JlZnJlc2hpbmcgJiYgIV9zdGFydHVwKSB7XG4gICAgICAgICAgICBzY3J1YlR3ZWVuLl9kcC5fdGltZSAtIHNjcnViVHdlZW4uX3N0YXJ0ICE9PSBzY3J1YlR3ZWVuLl90aW1lICYmIHNjcnViVHdlZW4ucmVuZGVyKHNjcnViVHdlZW4uX2RwLl90aW1lIC0gc2NydWJUd2Vlbi5fc3RhcnQpOyAvLyBpZiB0aGVyZSdzIGEgc2NydWIgb24gYm90aCB0aGUgY29udGFpbmVyIGFuaW1hdGlvbiBhbmQgdGhpcyBvbmUgKG9yIGEgU2Nyb2xsU21vb3RoZXIpLCB0aGUgdXBkYXRlIG9yZGVyIHdvdWxkIGNhdXNlIHRoaXMgb25lIG5vdCB0byBoYXZlIHJlbmRlcmVkIHlldCwgc28gaXQgd291bGRuJ3QgbWFrZSBhbnkgcHJvZ3Jlc3MgYmVmb3JlIHdlIC5yZXN0YXJ0KCkgaXQgaGVhZGluZyB0b3dhcmQgdGhlIG5ldyBwcm9ncmVzcyBzbyBpdCdkIGFwcGVhciBzdHVjayB0aHVzIHdlIGZvcmNlIGEgcmVuZGVyIGhlcmUuXG5cbiAgICAgICAgICAgIGlmIChzY3J1YlR3ZWVuLnJlc2V0VG8pIHtcbiAgICAgICAgICAgICAgc2NydWJUd2Vlbi5yZXNldFRvKFwidG90YWxQcm9ncmVzc1wiLCBjbGlwcGVkLCBhbmltYXRpb24uX3RUaW1lIC8gYW5pbWF0aW9uLl90RHVyKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIGxlZ2FjeSBzdXBwb3J0IChjb3VydGVzeSksIGJlZm9yZSAzLjEwLjBcbiAgICAgICAgICAgICAgc2NydWJUd2Vlbi52YXJzLnRvdGFsUHJvZ3Jlc3MgPSBjbGlwcGVkO1xuICAgICAgICAgICAgICBzY3J1YlR3ZWVuLmludmFsaWRhdGUoKS5yZXN0YXJ0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChhbmltYXRpb24pIHtcbiAgICAgICAgICAgIGFuaW1hdGlvbi50b3RhbFByb2dyZXNzKGNsaXBwZWQsICEhKF9yZWZyZXNoaW5nICYmIChsYXN0UmVmcmVzaCB8fCByZXNldCkpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGluKSB7XG4gICAgICAgICAgcmVzZXQgJiYgcGluU3BhY2luZyAmJiAoc3BhY2VyLnN0eWxlW3BpblNwYWNpbmcgKyBkaXJlY3Rpb24ub3MyXSA9IHNwYWNpbmdTdGFydCk7XG5cbiAgICAgICAgICBpZiAoIXVzZUZpeGVkUG9zaXRpb24pIHtcbiAgICAgICAgICAgIHBpblNldHRlcihfcm91bmQocGluU3RhcnQgKyBwaW5DaGFuZ2UgKiBjbGlwcGVkKSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChzdGF0ZUNoYW5nZWQpIHtcbiAgICAgICAgICAgIGlzQXRNYXggPSAhcmVzZXQgJiYgY2xpcHBlZCA+IHByZXZQcm9ncmVzcyAmJiBlbmQgKyAxID4gc2Nyb2xsICYmIHNjcm9sbCArIDEgPj0gX21heFNjcm9sbChzY3JvbGxlciwgZGlyZWN0aW9uKTsgLy8gaWYgaXQncyBhdCB0aGUgVkVSWSBlbmQgb2YgdGhlIHBhZ2UsIGRvbid0IHN3aXRjaCBhd2F5IGZyb20gcG9zaXRpb246IGZpeGVkIGJlY2F1c2UgaXQncyBwb2ludGxlc3MgYW5kIGl0IGNvdWxkIGNhdXNlIGEgYnJpZWYgZmxhc2ggd2hlbiB0aGUgdXNlciBzY3JvbGxzIGJhY2sgdXAgKHdoZW4gaXQgZ2V0cyBwaW5uZWQgYWdhaW4pXG5cbiAgICAgICAgICAgIGlmIChwaW5SZXBhcmVudCkge1xuICAgICAgICAgICAgICBpZiAoIXJlc2V0ICYmIChpc0FjdGl2ZSB8fCBpc0F0TWF4KSkge1xuICAgICAgICAgICAgICAgIHZhciBib3VuZHMgPSBfZ2V0Qm91bmRzKHBpbiwgdHJ1ZSksXG4gICAgICAgICAgICAgICAgICAgIF9vZmZzZXQgPSBzY3JvbGwgLSBzdGFydDtcblxuICAgICAgICAgICAgICAgIF9yZXBhcmVudChwaW4sIF9ib2R5LCBib3VuZHMudG9wICsgKGRpcmVjdGlvbiA9PT0gX3ZlcnRpY2FsID8gX29mZnNldCA6IDApICsgX3B4LCBib3VuZHMubGVmdCArIChkaXJlY3Rpb24gPT09IF92ZXJ0aWNhbCA/IDAgOiBfb2Zmc2V0KSArIF9weCk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgX3JlcGFyZW50KHBpbiwgc3BhY2VyKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfc2V0U3RhdGUoaXNBY3RpdmUgfHwgaXNBdE1heCA/IHBpbkFjdGl2ZVN0YXRlIDogcGluU3RhdGUpO1xuXG4gICAgICAgICAgICBwaW5Nb3ZlcyAmJiBjbGlwcGVkIDwgMSAmJiBpc0FjdGl2ZSB8fCBwaW5TZXR0ZXIocGluU3RhcnQgKyAoY2xpcHBlZCA9PT0gMSAmJiAhaXNBdE1heCA/IHBpbkNoYW5nZSA6IDApKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzbmFwICYmICF0d2VlblRvLnR3ZWVuICYmICFfcmVmcmVzaGluZyAmJiAhX3N0YXJ0dXAgJiYgc25hcERlbGF5ZWRDYWxsLnJlc3RhcnQodHJ1ZSk7XG4gICAgICAgIHRvZ2dsZUNsYXNzICYmICh0b2dnbGVkIHx8IG9uY2UgJiYgY2xpcHBlZCAmJiAoY2xpcHBlZCA8IDEgfHwgIV9saW1pdENhbGxiYWNrcykpICYmIF90b0FycmF5KHRvZ2dsZUNsYXNzLnRhcmdldHMpLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgICAgcmV0dXJuIGVsLmNsYXNzTGlzdFtpc0FjdGl2ZSB8fCBvbmNlID8gXCJhZGRcIiA6IFwicmVtb3ZlXCJdKHRvZ2dsZUNsYXNzLmNsYXNzTmFtZSk7XG4gICAgICAgIH0pOyAvLyBjbGFzc2VzIGNvdWxkIGFmZmVjdCBwb3NpdGlvbmluZywgc28gZG8gaXQgZXZlbiBpZiByZXNldCBvciByZWZyZXNoaW5nIGlzIHRydWUuXG5cbiAgICAgICAgb25VcGRhdGUgJiYgIWlzVG9nZ2xlICYmICFyZXNldCAmJiBvblVwZGF0ZShzZWxmKTtcblxuICAgICAgICBpZiAoc3RhdGVDaGFuZ2VkICYmICFfcmVmcmVzaGluZykge1xuICAgICAgICAgIGlmIChpc1RvZ2dsZSkge1xuICAgICAgICAgICAgaWYgKGlzVGFraW5nQWN0aW9uKSB7XG4gICAgICAgICAgICAgIGlmIChhY3Rpb24gPT09IFwiY29tcGxldGVcIikge1xuICAgICAgICAgICAgICAgIGFuaW1hdGlvbi5wYXVzZSgpLnRvdGFsUHJvZ3Jlc3MoMSk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoYWN0aW9uID09PSBcInJlc2V0XCIpIHtcbiAgICAgICAgICAgICAgICBhbmltYXRpb24ucmVzdGFydCh0cnVlKS5wYXVzZSgpO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGFjdGlvbiA9PT0gXCJyZXN0YXJ0XCIpIHtcbiAgICAgICAgICAgICAgICBhbmltYXRpb24ucmVzdGFydCh0cnVlKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhbmltYXRpb25bYWN0aW9uXSgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG9uVXBkYXRlICYmIG9uVXBkYXRlKHNlbGYpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0b2dnbGVkIHx8ICFfbGltaXRDYWxsYmFja3MpIHtcbiAgICAgICAgICAgIC8vIG9uIHN0YXJ0dXAsIHRoZSBwYWdlIGNvdWxkIGJlIHNjcm9sbGVkIGFuZCB3ZSBkb24ndCB3YW50IHRvIGZpcmUgY2FsbGJhY2tzIHRoYXQgZGlkbid0IHRvZ2dsZS4gRm9yIGV4YW1wbGUgb25FbnRlciBzaG91bGRuJ3QgZmlyZSBpZiB0aGUgU2Nyb2xsVHJpZ2dlciBpc24ndCBhY3R1YWxseSBlbnRlcmVkLlxuICAgICAgICAgICAgb25Ub2dnbGUgJiYgdG9nZ2xlZCAmJiBfY2FsbGJhY2soc2VsZiwgb25Ub2dnbGUpO1xuICAgICAgICAgICAgY2FsbGJhY2tzW3RvZ2dsZVN0YXRlXSAmJiBfY2FsbGJhY2soc2VsZiwgY2FsbGJhY2tzW3RvZ2dsZVN0YXRlXSk7XG4gICAgICAgICAgICBvbmNlICYmIChjbGlwcGVkID09PSAxID8gc2VsZi5raWxsKGZhbHNlLCAxKSA6IGNhbGxiYWNrc1t0b2dnbGVTdGF0ZV0gPSAwKTsgLy8gYSBjYWxsYmFjayBzaG91bGRuJ3QgYmUgY2FsbGVkIGFnYWluIGlmIG9uY2UgaXMgdHJ1ZS5cblxuICAgICAgICAgICAgaWYgKCF0b2dnbGVkKSB7XG4gICAgICAgICAgICAgIC8vIGl0J3MgcG9zc2libGUgdG8gZ28gY29tcGxldGVseSBwYXN0LCBsaWtlIGZyb20gYmVmb3JlIHRoZSBzdGFydCB0byBhZnRlciB0aGUgZW5kIChvciB2aWNlLXZlcnNhKSBpbiB3aGljaCBjYXNlIEJPVEggY2FsbGJhY2tzIHNob3VsZCBiZSBmaXJlZCBpbiB0aGF0IG9yZGVyXG4gICAgICAgICAgICAgIHRvZ2dsZVN0YXRlID0gY2xpcHBlZCA9PT0gMSA/IDEgOiAzO1xuICAgICAgICAgICAgICBjYWxsYmFja3NbdG9nZ2xlU3RhdGVdICYmIF9jYWxsYmFjayhzZWxmLCBjYWxsYmFja3NbdG9nZ2xlU3RhdGVdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoZmFzdFNjcm9sbEVuZCAmJiAhaXNBY3RpdmUgJiYgTWF0aC5hYnMoc2VsZi5nZXRWZWxvY2l0eSgpKSA+IChfaXNOdW1iZXIoZmFzdFNjcm9sbEVuZCkgPyBmYXN0U2Nyb2xsRW5kIDogMjUwMCkpIHtcbiAgICAgICAgICAgIF9lbmRBbmltYXRpb24oc2VsZi5jYWxsYmFja0FuaW1hdGlvbik7XG5cbiAgICAgICAgICAgIHNjcnViVHdlZW4gPyBzY3J1YlR3ZWVuLnByb2dyZXNzKDEpIDogX2VuZEFuaW1hdGlvbihhbmltYXRpb24sIGFjdGlvbiA9PT0gXCJyZXZlcnNlXCIgPyAxIDogIWNsaXBwZWQsIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChpc1RvZ2dsZSAmJiBvblVwZGF0ZSAmJiAhX3JlZnJlc2hpbmcpIHtcbiAgICAgICAgICBvblVwZGF0ZShzZWxmKTtcbiAgICAgICAgfVxuICAgICAgfSAvLyB1cGRhdGUgYWJzb2x1dGVseS1wb3NpdGlvbmVkIG1hcmtlcnMgKG9ubHkgaWYgdGhlIHNjcm9sbGVyIGlzbid0IHRoZSB2aWV3cG9ydClcblxuXG4gICAgICBpZiAobWFya2VyRW5kU2V0dGVyKSB7XG4gICAgICAgIHZhciBuID0gY29udGFpbmVyQW5pbWF0aW9uID8gc2Nyb2xsIC8gY29udGFpbmVyQW5pbWF0aW9uLmR1cmF0aW9uKCkgKiAoY29udGFpbmVyQW5pbWF0aW9uLl9jYVNjcm9sbERpc3QgfHwgMCkgOiBzY3JvbGw7XG4gICAgICAgIG1hcmtlclN0YXJ0U2V0dGVyKG4gKyAobWFya2VyU3RhcnRUcmlnZ2VyLl9pc0ZsaXBwZWQgPyAxIDogMCkpO1xuICAgICAgICBtYXJrZXJFbmRTZXR0ZXIobik7XG4gICAgICB9XG5cbiAgICAgIGNhTWFya2VyU2V0dGVyICYmIGNhTWFya2VyU2V0dGVyKC1zY3JvbGwgLyBjb250YWluZXJBbmltYXRpb24uZHVyYXRpb24oKSAqIChjb250YWluZXJBbmltYXRpb24uX2NhU2Nyb2xsRGlzdCB8fCAwKSk7XG4gICAgfTtcblxuICAgIHNlbGYuZW5hYmxlID0gZnVuY3Rpb24gKHJlc2V0LCByZWZyZXNoKSB7XG4gICAgICBpZiAoIXNlbGYuZW5hYmxlZCkge1xuICAgICAgICBzZWxmLmVuYWJsZWQgPSB0cnVlO1xuXG4gICAgICAgIF9hZGRMaXN0ZW5lcihzY3JvbGxlciwgXCJyZXNpemVcIiwgX29uUmVzaXplKTtcblxuICAgICAgICBpc1ZpZXdwb3J0IHx8IF9hZGRMaXN0ZW5lcihzY3JvbGxlciwgXCJzY3JvbGxcIiwgX29uU2Nyb2xsKTtcbiAgICAgICAgb25SZWZyZXNoSW5pdCAmJiBfYWRkTGlzdGVuZXIoU2Nyb2xsVHJpZ2dlciwgXCJyZWZyZXNoSW5pdFwiLCBvblJlZnJlc2hJbml0KTtcblxuICAgICAgICBpZiAocmVzZXQgIT09IGZhbHNlKSB7XG4gICAgICAgICAgc2VsZi5wcm9ncmVzcyA9IHByZXZQcm9ncmVzcyA9IDA7XG4gICAgICAgICAgc2Nyb2xsMSA9IHNjcm9sbDIgPSBsYXN0U25hcCA9IHNjcm9sbEZ1bmMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlZnJlc2ggIT09IGZhbHNlICYmIHNlbGYucmVmcmVzaCgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBzZWxmLmdldFR3ZWVuID0gZnVuY3Rpb24gKHNuYXApIHtcbiAgICAgIHJldHVybiBzbmFwICYmIHR3ZWVuVG8gPyB0d2VlblRvLnR3ZWVuIDogc2NydWJUd2VlbjtcbiAgICB9O1xuXG4gICAgc2VsZi5zZXRQb3NpdGlvbnMgPSBmdW5jdGlvbiAobmV3U3RhcnQsIG5ld0VuZCwga2VlcENsYW1wLCBwaW5PZmZzZXQpIHtcbiAgICAgIC8vIGRvZXNuJ3QgcGVyc2lzdCBhZnRlciByZWZyZXNoKCkhIEludGVuZGVkIHRvIGJlIGEgd2F5IHRvIG92ZXJyaWRlIHZhbHVlcyB0aGF0IHdlcmUgc2V0IGR1cmluZyByZWZyZXNoKCksIGxpa2UgeW91IGNvdWxkIHNldCBpdCBpbiBvblJlZnJlc2goKVxuICAgICAgaWYgKGNvbnRhaW5lckFuaW1hdGlvbikge1xuICAgICAgICAvLyBjb252ZXJ0IHJhdGlvcyBpbnRvIHNjcm9sbCBwb3NpdGlvbnMuIFJlbWVtYmVyLCBzdGFydC9lbmQgdmFsdWVzIG9uIFNjcm9sbFRyaWdnZXJzIHRoYXQgaGF2ZSBhIGNvbnRhaW5lckFuaW1hdGlvbiByZWZlciB0byB0aGUgdGltZSAoaW4gc2Vjb25kcyksIE5PVCBzY3JvbGwgcG9zaXRpb25zLlxuICAgICAgICB2YXIgc3QgPSBjb250YWluZXJBbmltYXRpb24uc2Nyb2xsVHJpZ2dlcixcbiAgICAgICAgICAgIGR1cmF0aW9uID0gY29udGFpbmVyQW5pbWF0aW9uLmR1cmF0aW9uKCksXG4gICAgICAgICAgICBfY2hhbmdlID0gc3QuZW5kIC0gc3Quc3RhcnQ7XG5cbiAgICAgICAgbmV3U3RhcnQgPSBzdC5zdGFydCArIF9jaGFuZ2UgKiBuZXdTdGFydCAvIGR1cmF0aW9uO1xuICAgICAgICBuZXdFbmQgPSBzdC5zdGFydCArIF9jaGFuZ2UgKiBuZXdFbmQgLyBkdXJhdGlvbjtcbiAgICAgIH1cblxuICAgICAgc2VsZi5yZWZyZXNoKGZhbHNlLCBmYWxzZSwge1xuICAgICAgICBzdGFydDogX2tlZXBDbGFtcChuZXdTdGFydCwga2VlcENsYW1wICYmICEhc2VsZi5fc3RhcnRDbGFtcCksXG4gICAgICAgIGVuZDogX2tlZXBDbGFtcChuZXdFbmQsIGtlZXBDbGFtcCAmJiAhIXNlbGYuX2VuZENsYW1wKVxuICAgICAgfSwgcGluT2Zmc2V0KTtcbiAgICAgIHNlbGYudXBkYXRlKCk7XG4gICAgfTtcblxuICAgIHNlbGYuYWRqdXN0UGluU3BhY2luZyA9IGZ1bmN0aW9uIChhbW91bnQpIHtcbiAgICAgIGlmIChzcGFjZXJTdGF0ZSAmJiBhbW91bnQpIHtcbiAgICAgICAgdmFyIGkgPSBzcGFjZXJTdGF0ZS5pbmRleE9mKGRpcmVjdGlvbi5kKSArIDE7XG4gICAgICAgIHNwYWNlclN0YXRlW2ldID0gcGFyc2VGbG9hdChzcGFjZXJTdGF0ZVtpXSkgKyBhbW91bnQgKyBfcHg7XG4gICAgICAgIHNwYWNlclN0YXRlWzFdID0gcGFyc2VGbG9hdChzcGFjZXJTdGF0ZVsxXSkgKyBhbW91bnQgKyBfcHg7XG5cbiAgICAgICAgX3NldFN0YXRlKHNwYWNlclN0YXRlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgc2VsZi5kaXNhYmxlID0gZnVuY3Rpb24gKHJlc2V0LCBhbGxvd0FuaW1hdGlvbikge1xuICAgICAgaWYgKHNlbGYuZW5hYmxlZCkge1xuICAgICAgICByZXNldCAhPT0gZmFsc2UgJiYgc2VsZi5yZXZlcnQodHJ1ZSwgdHJ1ZSk7XG4gICAgICAgIHNlbGYuZW5hYmxlZCA9IHNlbGYuaXNBY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgYWxsb3dBbmltYXRpb24gfHwgc2NydWJUd2VlbiAmJiBzY3J1YlR3ZWVuLnBhdXNlKCk7XG4gICAgICAgIHByZXZTY3JvbGwgPSAwO1xuICAgICAgICBwaW5DYWNoZSAmJiAocGluQ2FjaGUudW5jYWNoZSA9IDEpO1xuICAgICAgICBvblJlZnJlc2hJbml0ICYmIF9yZW1vdmVMaXN0ZW5lcihTY3JvbGxUcmlnZ2VyLCBcInJlZnJlc2hJbml0XCIsIG9uUmVmcmVzaEluaXQpO1xuXG4gICAgICAgIGlmIChzbmFwRGVsYXllZENhbGwpIHtcbiAgICAgICAgICBzbmFwRGVsYXllZENhbGwucGF1c2UoKTtcbiAgICAgICAgICB0d2VlblRvLnR3ZWVuICYmIHR3ZWVuVG8udHdlZW4ua2lsbCgpICYmICh0d2VlblRvLnR3ZWVuID0gMCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWlzVmlld3BvcnQpIHtcbiAgICAgICAgICB2YXIgaSA9IF90cmlnZ2Vycy5sZW5ndGg7XG5cbiAgICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgICBpZiAoX3RyaWdnZXJzW2ldLnNjcm9sbGVyID09PSBzY3JvbGxlciAmJiBfdHJpZ2dlcnNbaV0gIT09IHNlbGYpIHtcbiAgICAgICAgICAgICAgcmV0dXJuOyAvL2Rvbid0IHJlbW92ZSB0aGUgbGlzdGVuZXJzIGlmIHRoZXJlIGFyZSBzdGlsbCBvdGhlciB0cmlnZ2VycyByZWZlcmVuY2luZyBpdC5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBfcmVtb3ZlTGlzdGVuZXIoc2Nyb2xsZXIsIFwicmVzaXplXCIsIF9vblJlc2l6ZSk7XG5cbiAgICAgICAgICBpc1ZpZXdwb3J0IHx8IF9yZW1vdmVMaXN0ZW5lcihzY3JvbGxlciwgXCJzY3JvbGxcIiwgX29uU2Nyb2xsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBzZWxmLmtpbGwgPSBmdW5jdGlvbiAocmV2ZXJ0LCBhbGxvd0FuaW1hdGlvbikge1xuICAgICAgc2VsZi5kaXNhYmxlKHJldmVydCwgYWxsb3dBbmltYXRpb24pO1xuICAgICAgc2NydWJUd2VlbiAmJiAhYWxsb3dBbmltYXRpb24gJiYgc2NydWJUd2Vlbi5raWxsKCk7XG4gICAgICBpZCAmJiBkZWxldGUgX2lkc1tpZF07XG5cbiAgICAgIHZhciBpID0gX3RyaWdnZXJzLmluZGV4T2Yoc2VsZik7XG5cbiAgICAgIGkgPj0gMCAmJiBfdHJpZ2dlcnMuc3BsaWNlKGksIDEpO1xuICAgICAgaSA9PT0gX2kgJiYgX2RpcmVjdGlvbiA+IDAgJiYgX2ktLTsgLy8gaWYgd2UncmUgaW4gdGhlIG1pZGRsZSBvZiBhIHJlZnJlc2goKSBvciB1cGRhdGUoKSwgc3BsaWNpbmcgd291bGQgY2F1c2Ugc2tpcHMgaW4gdGhlIGluZGV4LCBzbyBhZGp1c3QuLi5cbiAgICAgIC8vIGlmIG5vIG90aGVyIFNjcm9sbFRyaWdnZXIgaW5zdGFuY2VzIG9mIHRoZSBzYW1lIHNjcm9sbGVyIGFyZSBmb3VuZCwgd2lwZSBvdXQgYW55IHJlY29yZGVkIHNjcm9sbCBwb3NpdGlvbi4gT3RoZXJ3aXNlLCBpbiBhIHNpbmdsZSBwYWdlIGFwcGxpY2F0aW9uLCBmb3IgZXhhbXBsZSwgaXQgY291bGQgbWFpbnRhaW4gc2Nyb2xsIHBvc2l0aW9uIHdoZW4gaXQgcmVhbGx5IHNob3VsZG4ndC5cblxuICAgICAgaSA9IDA7XG5cbiAgICAgIF90cmlnZ2Vycy5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHJldHVybiB0LnNjcm9sbGVyID09PSBzZWxmLnNjcm9sbGVyICYmIChpID0gMSk7XG4gICAgICB9KTtcblxuICAgICAgaSB8fCBfcmVmcmVzaGluZ0FsbCB8fCAoc2VsZi5zY3JvbGwucmVjID0gMCk7XG5cbiAgICAgIGlmIChhbmltYXRpb24pIHtcbiAgICAgICAgYW5pbWF0aW9uLnNjcm9sbFRyaWdnZXIgPSBudWxsO1xuICAgICAgICByZXZlcnQgJiYgYW5pbWF0aW9uLnJldmVydCh7XG4gICAgICAgICAga2lsbDogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICAgIGFsbG93QW5pbWF0aW9uIHx8IGFuaW1hdGlvbi5raWxsKCk7XG4gICAgICB9XG5cbiAgICAgIG1hcmtlclN0YXJ0ICYmIFttYXJrZXJTdGFydCwgbWFya2VyRW5kLCBtYXJrZXJTdGFydFRyaWdnZXIsIG1hcmtlckVuZFRyaWdnZXJdLmZvckVhY2goZnVuY3Rpb24gKG0pIHtcbiAgICAgICAgcmV0dXJuIG0ucGFyZW50Tm9kZSAmJiBtLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobSk7XG4gICAgICB9KTtcbiAgICAgIF9wcmltYXJ5ID09PSBzZWxmICYmIChfcHJpbWFyeSA9IDApO1xuXG4gICAgICBpZiAocGluKSB7XG4gICAgICAgIHBpbkNhY2hlICYmIChwaW5DYWNoZS51bmNhY2hlID0gMSk7XG4gICAgICAgIGkgPSAwO1xuXG4gICAgICAgIF90cmlnZ2Vycy5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgcmV0dXJuIHQucGluID09PSBwaW4gJiYgaSsrO1xuICAgICAgICB9KTtcblxuICAgICAgICBpIHx8IChwaW5DYWNoZS5zcGFjZXIgPSAwKTsgLy8gaWYgdGhlcmUgYXJlbid0IGFueSBtb3JlIFNjcm9sbFRyaWdnZXJzIHdpdGggdGhlIHNhbWUgcGluLCByZW1vdmUgdGhlIHNwYWNlciwgb3RoZXJ3aXNlIGl0IGNvdWxkIGJlIGNvbnRhbWluYXRlZCB3aXRoIG9sZC9zdGFsZSB2YWx1ZXMgaWYgdGhlIHVzZXIgcmUtY3JlYXRlcyBhIFNjcm9sbFRyaWdnZXIgZm9yIHRoZSBzYW1lIGVsZW1lbnQuXG4gICAgICB9XG5cbiAgICAgIHZhcnMub25LaWxsICYmIHZhcnMub25LaWxsKHNlbGYpO1xuICAgIH07XG5cbiAgICBfdHJpZ2dlcnMucHVzaChzZWxmKTtcblxuICAgIHNlbGYuZW5hYmxlKGZhbHNlLCBmYWxzZSk7XG4gICAgY3VzdG9tUmV2ZXJ0UmV0dXJuICYmIGN1c3RvbVJldmVydFJldHVybihzZWxmKTtcblxuICAgIGlmIChhbmltYXRpb24gJiYgYW5pbWF0aW9uLmFkZCAmJiAhY2hhbmdlKSB7XG4gICAgICAvLyBpZiB0aGUgYW5pbWF0aW9uIGlzIGEgdGltZWxpbmUsIGl0IG1heSBub3QgaGF2ZSBiZWVuIHBvcHVsYXRlZCB5ZXQsIHNvIGl0IHdvdWxkbid0IHJlbmRlciBhdCB0aGUgcHJvcGVyIHBsYWNlIG9uIHRoZSBmaXJzdCByZWZyZXNoKCksIHRodXMgd2Ugc2hvdWxkIHNjaGVkdWxlIG9uZSBmb3IgdGhlIG5leHQgdGljay4gSWYgXCJjaGFuZ2VcIiBpcyBkZWZpbmVkLCB3ZSBrbm93IGl0IG11c3QgYmUgcmUtZW5hYmxpbmcsIHRodXMgd2UgY2FuIHJlZnJlc2goKSByaWdodCBhd2F5LlxuICAgICAgdmFyIHVwZGF0ZUZ1bmMgPSBzZWxmLnVwZGF0ZTsgLy8gc29tZSBicm93c2VycyBtYXkgZmlyZSBhIHNjcm9sbCBldmVudCBCRUZPUkUgYSB0aWNrIGVsYXBzZXMgYW5kL29yIHRoZSBET01Db250ZW50TG9hZGVkIGZpcmVzLiBTbyB0aGVyZSdzIGEgY2hhbmNlIHVwZGF0ZSgpIHdpbGwgYmUgY2FsbGVkIEJFRk9SRSBhIHJlZnJlc2goKSBoYXMgaGFwcGVuZWQgb24gYSBUaW1lbGluZS1hdHRhY2hlZCBTY3JvbGxUcmlnZ2VyIHdoaWNoIG1lYW5zIHRoZSBzdGFydC9lbmQgd29uJ3QgYmUgY2FsY3VsYXRlZCB5ZXQuIFdlIGRvbid0IHdhbnQgdG8gYWRkIGNvbmRpdGlvbmFsIGxvZ2ljIGluc2lkZSB0aGUgdXBkYXRlKCkgbWV0aG9kIChsaWtlIGNoZWNrIHRvIHNlZSBpZiBlbmQgaXMgZGVmaW5lZCBhbmQgaWYgbm90LCBmb3JjZSBhIHJlZnJlc2goKSkgYmVjYXVzZSB0aGF0J3MgYSBmdW5jdGlvbiB0aGF0IGdldHMgaGl0IGEgTE9UIChwZXJmb3JtYW5jZSkuIFNvIHdlIHN3YXAgb3V0IHRoZSByZWFsIHVwZGF0ZSgpIG1ldGhvZCBmb3IgdGhpcyBvbmUgdGhhdCdsbCByZS1hdHRhY2ggaXQgdGhlIGZpcnN0IHRpbWUgaXQgZ2V0cyBjYWxsZWQgYW5kIG9mIGNvdXJzZSBmb3JjZXMgYSByZWZyZXNoKCkuXG5cbiAgICAgIHNlbGYudXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBzZWxmLnVwZGF0ZSA9IHVwZGF0ZUZ1bmM7XG4gICAgICAgIHN0YXJ0IHx8IGVuZCB8fCBzZWxmLnJlZnJlc2goKTtcbiAgICAgIH07XG5cbiAgICAgIGdzYXAuZGVsYXllZENhbGwoMC4wMSwgc2VsZi51cGRhdGUpO1xuICAgICAgY2hhbmdlID0gMC4wMTtcbiAgICAgIHN0YXJ0ID0gZW5kID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgc2VsZi5yZWZyZXNoKCk7XG4gICAgfVxuXG4gICAgcGluICYmIF9xdWV1ZVJlZnJlc2hBbGwoKTsgLy8gcGlubmluZyBjb3VsZCBhZmZlY3QgdGhlIHBvc2l0aW9ucyBvZiBvdGhlciB0aGluZ3MsIHNvIG1ha2Ugc3VyZSB3ZSBxdWV1ZSBhIGZ1bGwgcmVmcmVzaCgpXG4gIH07XG5cbiAgU2Nyb2xsVHJpZ2dlci5yZWdpc3RlciA9IGZ1bmN0aW9uIHJlZ2lzdGVyKGNvcmUpIHtcbiAgICBpZiAoIV9jb3JlSW5pdHRlZCkge1xuICAgICAgZ3NhcCA9IGNvcmUgfHwgX2dldEdTQVAoKTtcbiAgICAgIF93aW5kb3dFeGlzdHMoKSAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgU2Nyb2xsVHJpZ2dlci5lbmFibGUoKTtcbiAgICAgIF9jb3JlSW5pdHRlZCA9IF9lbmFibGVkO1xuICAgIH1cblxuICAgIHJldHVybiBfY29yZUluaXR0ZWQ7XG4gIH07XG5cbiAgU2Nyb2xsVHJpZ2dlci5kZWZhdWx0cyA9IGZ1bmN0aW9uIGRlZmF1bHRzKGNvbmZpZykge1xuICAgIGlmIChjb25maWcpIHtcbiAgICAgIGZvciAodmFyIHAgaW4gY29uZmlnKSB7XG4gICAgICAgIF9kZWZhdWx0c1twXSA9IGNvbmZpZ1twXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gX2RlZmF1bHRzO1xuICB9O1xuXG4gIFNjcm9sbFRyaWdnZXIuZGlzYWJsZSA9IGZ1bmN0aW9uIGRpc2FibGUocmVzZXQsIGtpbGwpIHtcbiAgICBfZW5hYmxlZCA9IDA7XG5cbiAgICBfdHJpZ2dlcnMuZm9yRWFjaChmdW5jdGlvbiAodHJpZ2dlcikge1xuICAgICAgcmV0dXJuIHRyaWdnZXJba2lsbCA/IFwia2lsbFwiIDogXCJkaXNhYmxlXCJdKHJlc2V0KTtcbiAgICB9KTtcblxuICAgIF9yZW1vdmVMaXN0ZW5lcihfd2luLCBcIndoZWVsXCIsIF9vblNjcm9sbCk7XG5cbiAgICBfcmVtb3ZlTGlzdGVuZXIoX2RvYywgXCJzY3JvbGxcIiwgX29uU2Nyb2xsKTtcblxuICAgIGNsZWFySW50ZXJ2YWwoX3N5bmNJbnRlcnZhbCk7XG5cbiAgICBfcmVtb3ZlTGlzdGVuZXIoX2RvYywgXCJ0b3VjaGNhbmNlbFwiLCBfcGFzc1Rocm91Z2gpO1xuXG4gICAgX3JlbW92ZUxpc3RlbmVyKF9ib2R5LCBcInRvdWNoc3RhcnRcIiwgX3Bhc3NUaHJvdWdoKTtcblxuICAgIF9tdWx0aUxpc3RlbmVyKF9yZW1vdmVMaXN0ZW5lciwgX2RvYywgXCJwb2ludGVyZG93bix0b3VjaHN0YXJ0LG1vdXNlZG93blwiLCBfcG9pbnRlckRvd25IYW5kbGVyKTtcblxuICAgIF9tdWx0aUxpc3RlbmVyKF9yZW1vdmVMaXN0ZW5lciwgX2RvYywgXCJwb2ludGVydXAsdG91Y2hlbmQsbW91c2V1cFwiLCBfcG9pbnRlclVwSGFuZGxlcik7XG5cbiAgICBfcmVzaXplRGVsYXkua2lsbCgpO1xuXG4gICAgX2l0ZXJhdGVBdXRvUmVmcmVzaChfcmVtb3ZlTGlzdGVuZXIpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBfc2Nyb2xsZXJzLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgICBfd2hlZWxMaXN0ZW5lcihfcmVtb3ZlTGlzdGVuZXIsIF9zY3JvbGxlcnNbaV0sIF9zY3JvbGxlcnNbaSArIDFdKTtcblxuICAgICAgX3doZWVsTGlzdGVuZXIoX3JlbW92ZUxpc3RlbmVyLCBfc2Nyb2xsZXJzW2ldLCBfc2Nyb2xsZXJzW2kgKyAyXSk7XG4gICAgfVxuICB9O1xuXG4gIFNjcm9sbFRyaWdnZXIuZW5hYmxlID0gZnVuY3Rpb24gZW5hYmxlKCkge1xuICAgIF93aW4gPSB3aW5kb3c7XG4gICAgX2RvYyA9IGRvY3VtZW50O1xuICAgIF9kb2NFbCA9IF9kb2MuZG9jdW1lbnRFbGVtZW50O1xuICAgIF9ib2R5ID0gX2RvYy5ib2R5O1xuXG4gICAgaWYgKGdzYXApIHtcbiAgICAgIF90b0FycmF5ID0gZ3NhcC51dGlscy50b0FycmF5O1xuICAgICAgX2NsYW1wID0gZ3NhcC51dGlscy5jbGFtcDtcbiAgICAgIF9jb250ZXh0ID0gZ3NhcC5jb3JlLmNvbnRleHQgfHwgX3Bhc3NUaHJvdWdoO1xuICAgICAgX3N1cHByZXNzT3ZlcndyaXRlcyA9IGdzYXAuY29yZS5zdXBwcmVzc092ZXJ3cml0ZXMgfHwgX3Bhc3NUaHJvdWdoO1xuICAgICAgX3Njcm9sbFJlc3RvcmF0aW9uID0gX3dpbi5oaXN0b3J5LnNjcm9sbFJlc3RvcmF0aW9uIHx8IFwiYXV0b1wiO1xuICAgICAgX2xhc3RTY3JvbGwgPSBfd2luLnBhZ2VZT2Zmc2V0O1xuICAgICAgZ3NhcC5jb3JlLmdsb2JhbHMoXCJTY3JvbGxUcmlnZ2VyXCIsIFNjcm9sbFRyaWdnZXIpOyAvLyBtdXN0IHJlZ2lzdGVyIHRoZSBnbG9iYWwgbWFudWFsbHkgYmVjYXVzZSBpbiBJbnRlcm5ldCBFeHBsb3JlciwgZnVuY3Rpb25zIChjbGFzc2VzKSBkb24ndCBoYXZlIGEgXCJuYW1lXCIgcHJvcGVydHkuXG5cbiAgICAgIGlmIChfYm9keSkge1xuICAgICAgICBfZW5hYmxlZCA9IDE7XG4gICAgICAgIF9kaXYxMDB2aCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7IC8vIHRvIHNvbHZlIG1vYmlsZSBicm93c2VyIGFkZHJlc3MgYmFyIHNob3cvaGlkZSByZXNpemluZywgd2Ugc2hvdWxkbid0IHJlbHkgb24gd2luZG93LmlubmVySGVpZ2h0LiBJbnN0ZWFkLCB1c2UgYSA8ZGl2PiB3aXRoIGl0cyBoZWlnaHQgc2V0IHRvIDEwMHZoIGFuZCBtZWFzdXJlIHRoYXQgc2luY2UgdGhhdCdzIHdoYXQgdGhlIHNjcm9sbGluZyBpcyBiYXNlZCBvbiBhbnl3YXkgYW5kIGl0J3Mgbm90IGFmZmVjdGVkIGJ5IGFkZHJlc3MgYmFyIHNob3dpbmcvaGlkaW5nLlxuXG4gICAgICAgIF9kaXYxMDB2aC5zdHlsZS5oZWlnaHQgPSBcIjEwMHZoXCI7XG4gICAgICAgIF9kaXYxMDB2aC5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcblxuICAgICAgICBfcmVmcmVzaDEwMHZoKCk7XG5cbiAgICAgICAgX3JhZkJ1Z0ZpeCgpO1xuXG4gICAgICAgIE9ic2VydmVyLnJlZ2lzdGVyKGdzYXApOyAvLyBpc1RvdWNoIGlzIDAgaWYgbm8gdG91Y2gsIDEgaWYgT05MWSB0b3VjaCwgYW5kIDIgaWYgaXQgY2FuIGFjY29tbW9kYXRlIHRvdWNoIGJ1dCBhbHNvIG90aGVyIHR5cGVzIGxpa2UgbW91c2UvcG9pbnRlci5cblxuICAgICAgICBTY3JvbGxUcmlnZ2VyLmlzVG91Y2ggPSBPYnNlcnZlci5pc1RvdWNoO1xuICAgICAgICBfZml4SU9TQnVnID0gT2JzZXJ2ZXIuaXNUb3VjaCAmJiAvKGlQYWR8aVBob25lfGlQb2R8TWFjKS9nLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7IC8vIHNpbmNlIDIwMTcsIGlPUyBoYXMgaGFkIGEgYnVnIHRoYXQgY2F1c2VzIGV2ZW50LmNsaWVudFgvWSB0byBiZSBpbmFjY3VyYXRlIHdoZW4gYSBzY3JvbGwgb2NjdXJzLCB0aHVzIHdlIG11c3QgYWx0ZXJuYXRlIGlnbm9yaW5nIGV2ZXJ5IG90aGVyIHRvdWNobW92ZSBldmVudCB0byB3b3JrIGFyb3VuZCBpdC4gU2VlIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xODE5NTQgYW5kIGh0dHBzOi8vY29kZXBlbi5pby9HcmVlblNvY2svcGVuL0V4YnJQTmEvMDg3Y2VmMTk3ZGMzNTQ0NWEwOTUxZTg5MzVjNDE1MDNcblxuICAgICAgICBfaWdub3JlTW9iaWxlUmVzaXplID0gT2JzZXJ2ZXIuaXNUb3VjaCA9PT0gMTtcblxuICAgICAgICBfYWRkTGlzdGVuZXIoX3dpbiwgXCJ3aGVlbFwiLCBfb25TY3JvbGwpOyAvLyBtb3N0bHkgZm9yIDNyZCBwYXJ0eSBzbW9vdGggc2Nyb2xsaW5nIGxpYnJhcmllcy5cblxuXG4gICAgICAgIF9yb290ID0gW193aW4sIF9kb2MsIF9kb2NFbCwgX2JvZHldO1xuXG4gICAgICAgIGlmIChnc2FwLm1hdGNoTWVkaWEpIHtcbiAgICAgICAgICBTY3JvbGxUcmlnZ2VyLm1hdGNoTWVkaWEgPSBmdW5jdGlvbiAodmFycykge1xuICAgICAgICAgICAgdmFyIG1tID0gZ3NhcC5tYXRjaE1lZGlhKCksXG4gICAgICAgICAgICAgICAgcDtcblxuICAgICAgICAgICAgZm9yIChwIGluIHZhcnMpIHtcbiAgICAgICAgICAgICAgbW0uYWRkKHAsIHZhcnNbcF0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gbW07XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIGdzYXAuYWRkRXZlbnRMaXN0ZW5lcihcIm1hdGNoTWVkaWFJbml0XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBfcmV2ZXJ0QWxsKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZ3NhcC5hZGRFdmVudExpc3RlbmVyKFwibWF0Y2hNZWRpYVJldmVydFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gX3JldmVydFJlY29yZGVkKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZ3NhcC5hZGRFdmVudExpc3RlbmVyKFwibWF0Y2hNZWRpYVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfcmVmcmVzaEFsbCgwLCAxKTtcblxuICAgICAgICAgICAgX2Rpc3BhdGNoKFwibWF0Y2hNZWRpYVwiKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBnc2FwLm1hdGNoTWVkaWEoXCIob3JpZW50YXRpb246IHBvcnRyYWl0KVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvLyB3aGVuIG9yaWVudGF0aW9uIGNoYW5nZXMsIHdlIHNob3VsZCB0YWtlIG5ldyBiYXNlIG1lYXN1cmVtZW50cyBmb3IgdGhlIGlnbm9yZU1vYmlsZVJlc2l6ZSBmZWF0dXJlLlxuICAgICAgICAgICAgX3NldEJhc2VEaW1lbnNpb25zKCk7XG5cbiAgICAgICAgICAgIHJldHVybiBfc2V0QmFzZURpbWVuc2lvbnM7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKFwiUmVxdWlyZXMgR1NBUCAzLjExLjAgb3IgbGF0ZXJcIik7XG4gICAgICAgIH1cblxuICAgICAgICBfc2V0QmFzZURpbWVuc2lvbnMoKTtcblxuICAgICAgICBfYWRkTGlzdGVuZXIoX2RvYywgXCJzY3JvbGxcIiwgX29uU2Nyb2xsKTsgLy8gc29tZSBicm93c2VycyAobGlrZSBDaHJvbWUpLCB0aGUgd2luZG93IHN0b3BzIGRpc3BhdGNoaW5nIHNjcm9sbCBldmVudHMgb24gdGhlIHdpbmRvdyBpZiB5b3Ugc2Nyb2xsIHJlYWxseSBmYXN0LCBidXQgaXQncyBjb25zaXN0ZW50IG9uIHRoZSBkb2N1bWVudCFcblxuXG4gICAgICAgIHZhciBib2R5U3R5bGUgPSBfYm9keS5zdHlsZSxcbiAgICAgICAgICAgIGJvcmRlciA9IGJvZHlTdHlsZS5ib3JkZXJUb3BTdHlsZSxcbiAgICAgICAgICAgIEFuaW1hdGlvblByb3RvID0gZ3NhcC5jb3JlLkFuaW1hdGlvbi5wcm90b3R5cGUsXG4gICAgICAgICAgICBib3VuZHMsXG4gICAgICAgICAgICBpO1xuICAgICAgICBBbmltYXRpb25Qcm90by5yZXZlcnQgfHwgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFuaW1hdGlvblByb3RvLCBcInJldmVydFwiLCB7XG4gICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudGltZSgtMC4wMSwgdHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTsgLy8gb25seSBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgKEFuaW1hdGlvbi5yZXZlcnQoKSB3YXMgYWRkZWQgYWZ0ZXIgMy4xMC40KVxuXG4gICAgICAgIGJvZHlTdHlsZS5ib3JkZXJUb3BTdHlsZSA9IFwic29saWRcIjsgLy8gd29ya3MgYXJvdW5kIGFuIGlzc3VlIHdoZXJlIGEgbWFyZ2luIG9mIGEgY2hpbGQgZWxlbWVudCBjb3VsZCB0aHJvdyBvZmYgdGhlIGJvdW5kcyBvZiB0aGUgX2JvZHksIG1ha2luZyBpdCBzZWVtIGxpa2UgdGhlcmUncyBhIG1hcmdpbiB3aGVuIHRoZXJlIGFjdHVhbGx5IGlzbid0LiBUaGUgYm9yZGVyIGVuc3VyZXMgdGhhdCB0aGUgYm91bmRzIGFyZSBhY2N1cmF0ZS5cblxuICAgICAgICBib3VuZHMgPSBfZ2V0Qm91bmRzKF9ib2R5KTtcbiAgICAgICAgX3ZlcnRpY2FsLm0gPSBNYXRoLnJvdW5kKGJvdW5kcy50b3AgKyBfdmVydGljYWwuc2MoKSkgfHwgMDsgLy8gYWNjb21tb2RhdGUgdGhlIG9mZnNldCBvZiB0aGUgPGJvZHk+IGNhdXNlZCBieSBtYXJnaW5zIGFuZC9vciBwYWRkaW5nXG5cbiAgICAgICAgX2hvcml6b250YWwubSA9IE1hdGgucm91bmQoYm91bmRzLmxlZnQgKyBfaG9yaXpvbnRhbC5zYygpKSB8fCAwO1xuICAgICAgICBib3JkZXIgPyBib2R5U3R5bGUuYm9yZGVyVG9wU3R5bGUgPSBib3JkZXIgOiBib2R5U3R5bGUucmVtb3ZlUHJvcGVydHkoXCJib3JkZXItdG9wLXN0eWxlXCIpOyAvLyBUT0RPOiAoPykgbWF5YmUgbW92ZSB0byBsZXZlcmFnaW5nIHRoZSB2ZWxvY2l0eSBtZWNoYW5pc20gaW4gT2JzZXJ2ZXIgYW5kIHNraXAgaW50ZXJ2YWxzLlxuXG4gICAgICAgIF9zeW5jSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChfc3luYywgMjUwKTtcbiAgICAgICAgZ3NhcC5kZWxheWVkQ2FsbCgwLjUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gX3N0YXJ0dXAgPSAwO1xuICAgICAgICB9KTtcblxuICAgICAgICBfYWRkTGlzdGVuZXIoX2RvYywgXCJ0b3VjaGNhbmNlbFwiLCBfcGFzc1Rocm91Z2gpOyAvLyBzb21lIG9sZGVyIEFuZHJvaWQgZGV2aWNlcyBpbnRlcm1pdHRlbnRseSBzdG9wIGRpc3BhdGNoaW5nIFwidG91Y2htb3ZlXCIgZXZlbnRzIGlmIHdlIGRvbid0IGxpc3RlbiBmb3IgXCJ0b3VjaGNhbmNlbFwiIG9uIHRoZSBkb2N1bWVudC5cblxuXG4gICAgICAgIF9hZGRMaXN0ZW5lcihfYm9keSwgXCJ0b3VjaHN0YXJ0XCIsIF9wYXNzVGhyb3VnaCk7IC8vd29ya3MgYXJvdW5kIFNhZmFyaSBidWc6IGh0dHBzOi8vZ3NhcC5jb20vZm9ydW1zL3RvcGljLzIxNDUwLWRyYWdnYWJsZS1pbi1pZnJhbWUtb24tbW9iaWxlLWlzLWJ1Z2d5L1xuXG5cbiAgICAgICAgX211bHRpTGlzdGVuZXIoX2FkZExpc3RlbmVyLCBfZG9jLCBcInBvaW50ZXJkb3duLHRvdWNoc3RhcnQsbW91c2Vkb3duXCIsIF9wb2ludGVyRG93bkhhbmRsZXIpO1xuXG4gICAgICAgIF9tdWx0aUxpc3RlbmVyKF9hZGRMaXN0ZW5lciwgX2RvYywgXCJwb2ludGVydXAsdG91Y2hlbmQsbW91c2V1cFwiLCBfcG9pbnRlclVwSGFuZGxlcik7XG5cbiAgICAgICAgX3RyYW5zZm9ybVByb3AgPSBnc2FwLnV0aWxzLmNoZWNrUHJlZml4KFwidHJhbnNmb3JtXCIpO1xuXG4gICAgICAgIF9zdGF0ZVByb3BzLnB1c2goX3RyYW5zZm9ybVByb3ApO1xuXG4gICAgICAgIF9jb3JlSW5pdHRlZCA9IF9nZXRUaW1lKCk7XG4gICAgICAgIF9yZXNpemVEZWxheSA9IGdzYXAuZGVsYXllZENhbGwoMC4yLCBfcmVmcmVzaEFsbCkucGF1c2UoKTtcbiAgICAgICAgX2F1dG9SZWZyZXNoID0gW19kb2MsIFwidmlzaWJpbGl0eWNoYW5nZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIHcgPSBfd2luLmlubmVyV2lkdGgsXG4gICAgICAgICAgICAgIGggPSBfd2luLmlubmVySGVpZ2h0O1xuXG4gICAgICAgICAgaWYgKF9kb2MuaGlkZGVuKSB7XG4gICAgICAgICAgICBfcHJldldpZHRoID0gdztcbiAgICAgICAgICAgIF9wcmV2SGVpZ2h0ID0gaDtcbiAgICAgICAgICB9IGVsc2UgaWYgKF9wcmV2V2lkdGggIT09IHcgfHwgX3ByZXZIZWlnaHQgIT09IGgpIHtcbiAgICAgICAgICAgIF9vblJlc2l6ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgX2RvYywgXCJET01Db250ZW50TG9hZGVkXCIsIF9yZWZyZXNoQWxsLCBfd2luLCBcImxvYWRcIiwgX3JlZnJlc2hBbGwsIF93aW4sIFwicmVzaXplXCIsIF9vblJlc2l6ZV07XG5cbiAgICAgICAgX2l0ZXJhdGVBdXRvUmVmcmVzaChfYWRkTGlzdGVuZXIpO1xuXG4gICAgICAgIF90cmlnZ2Vycy5mb3JFYWNoKGZ1bmN0aW9uICh0cmlnZ2VyKSB7XG4gICAgICAgICAgcmV0dXJuIHRyaWdnZXIuZW5hYmxlKDAsIDEpO1xuICAgICAgICB9KTtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgX3Njcm9sbGVycy5sZW5ndGg7IGkgKz0gMykge1xuICAgICAgICAgIF93aGVlbExpc3RlbmVyKF9yZW1vdmVMaXN0ZW5lciwgX3Njcm9sbGVyc1tpXSwgX3Njcm9sbGVyc1tpICsgMV0pO1xuXG4gICAgICAgICAgX3doZWVsTGlzdGVuZXIoX3JlbW92ZUxpc3RlbmVyLCBfc2Nyb2xsZXJzW2ldLCBfc2Nyb2xsZXJzW2kgKyAyXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgU2Nyb2xsVHJpZ2dlci5jb25maWcgPSBmdW5jdGlvbiBjb25maWcodmFycykge1xuICAgIFwibGltaXRDYWxsYmFja3NcIiBpbiB2YXJzICYmIChfbGltaXRDYWxsYmFja3MgPSAhIXZhcnMubGltaXRDYWxsYmFja3MpO1xuICAgIHZhciBtcyA9IHZhcnMuc3luY0ludGVydmFsO1xuICAgIG1zICYmIGNsZWFySW50ZXJ2YWwoX3N5bmNJbnRlcnZhbCkgfHwgKF9zeW5jSW50ZXJ2YWwgPSBtcykgJiYgc2V0SW50ZXJ2YWwoX3N5bmMsIG1zKTtcbiAgICBcImlnbm9yZU1vYmlsZVJlc2l6ZVwiIGluIHZhcnMgJiYgKF9pZ25vcmVNb2JpbGVSZXNpemUgPSBTY3JvbGxUcmlnZ2VyLmlzVG91Y2ggPT09IDEgJiYgdmFycy5pZ25vcmVNb2JpbGVSZXNpemUpO1xuXG4gICAgaWYgKFwiYXV0b1JlZnJlc2hFdmVudHNcIiBpbiB2YXJzKSB7XG4gICAgICBfaXRlcmF0ZUF1dG9SZWZyZXNoKF9yZW1vdmVMaXN0ZW5lcikgfHwgX2l0ZXJhdGVBdXRvUmVmcmVzaChfYWRkTGlzdGVuZXIsIHZhcnMuYXV0b1JlZnJlc2hFdmVudHMgfHwgXCJub25lXCIpO1xuICAgICAgX2lnbm9yZVJlc2l6ZSA9ICh2YXJzLmF1dG9SZWZyZXNoRXZlbnRzICsgXCJcIikuaW5kZXhPZihcInJlc2l6ZVwiKSA9PT0gLTE7XG4gICAgfVxuICB9O1xuXG4gIFNjcm9sbFRyaWdnZXIuc2Nyb2xsZXJQcm94eSA9IGZ1bmN0aW9uIHNjcm9sbGVyUHJveHkodGFyZ2V0LCB2YXJzKSB7XG4gICAgdmFyIHQgPSBfZ2V0VGFyZ2V0KHRhcmdldCksXG4gICAgICAgIGkgPSBfc2Nyb2xsZXJzLmluZGV4T2YodCksXG4gICAgICAgIGlzVmlld3BvcnQgPSBfaXNWaWV3cG9ydCh0KTtcblxuICAgIGlmICh+aSkge1xuICAgICAgX3Njcm9sbGVycy5zcGxpY2UoaSwgaXNWaWV3cG9ydCA/IDYgOiAyKTtcbiAgICB9XG5cbiAgICBpZiAodmFycykge1xuICAgICAgaXNWaWV3cG9ydCA/IF9wcm94aWVzLnVuc2hpZnQoX3dpbiwgdmFycywgX2JvZHksIHZhcnMsIF9kb2NFbCwgdmFycykgOiBfcHJveGllcy51bnNoaWZ0KHQsIHZhcnMpO1xuICAgIH1cbiAgfTtcblxuICBTY3JvbGxUcmlnZ2VyLmNsZWFyTWF0Y2hNZWRpYSA9IGZ1bmN0aW9uIGNsZWFyTWF0Y2hNZWRpYShxdWVyeSkge1xuICAgIF90cmlnZ2Vycy5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XG4gICAgICByZXR1cm4gdC5fY3R4ICYmIHQuX2N0eC5xdWVyeSA9PT0gcXVlcnkgJiYgdC5fY3R4LmtpbGwodHJ1ZSwgdHJ1ZSk7XG4gICAgfSk7XG4gIH07XG5cbiAgU2Nyb2xsVHJpZ2dlci5pc0luVmlld3BvcnQgPSBmdW5jdGlvbiBpc0luVmlld3BvcnQoZWxlbWVudCwgcmF0aW8sIGhvcml6b250YWwpIHtcbiAgICB2YXIgYm91bmRzID0gKF9pc1N0cmluZyhlbGVtZW50KSA/IF9nZXRUYXJnZXQoZWxlbWVudCkgOiBlbGVtZW50KS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgICAgb2Zmc2V0ID0gYm91bmRzW2hvcml6b250YWwgPyBfd2lkdGggOiBfaGVpZ2h0XSAqIHJhdGlvIHx8IDA7XG4gICAgcmV0dXJuIGhvcml6b250YWwgPyBib3VuZHMucmlnaHQgLSBvZmZzZXQgPiAwICYmIGJvdW5kcy5sZWZ0ICsgb2Zmc2V0IDwgX3dpbi5pbm5lcldpZHRoIDogYm91bmRzLmJvdHRvbSAtIG9mZnNldCA+IDAgJiYgYm91bmRzLnRvcCArIG9mZnNldCA8IF93aW4uaW5uZXJIZWlnaHQ7XG4gIH07XG5cbiAgU2Nyb2xsVHJpZ2dlci5wb3NpdGlvbkluVmlld3BvcnQgPSBmdW5jdGlvbiBwb3NpdGlvbkluVmlld3BvcnQoZWxlbWVudCwgcmVmZXJlbmNlUG9pbnQsIGhvcml6b250YWwpIHtcbiAgICBfaXNTdHJpbmcoZWxlbWVudCkgJiYgKGVsZW1lbnQgPSBfZ2V0VGFyZ2V0KGVsZW1lbnQpKTtcbiAgICB2YXIgYm91bmRzID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgICAgc2l6ZSA9IGJvdW5kc1tob3Jpem9udGFsID8gX3dpZHRoIDogX2hlaWdodF0sXG4gICAgICAgIG9mZnNldCA9IHJlZmVyZW5jZVBvaW50ID09IG51bGwgPyBzaXplIC8gMiA6IHJlZmVyZW5jZVBvaW50IGluIF9rZXl3b3JkcyA/IF9rZXl3b3Jkc1tyZWZlcmVuY2VQb2ludF0gKiBzaXplIDogfnJlZmVyZW5jZVBvaW50LmluZGV4T2YoXCIlXCIpID8gcGFyc2VGbG9hdChyZWZlcmVuY2VQb2ludCkgKiBzaXplIC8gMTAwIDogcGFyc2VGbG9hdChyZWZlcmVuY2VQb2ludCkgfHwgMDtcbiAgICByZXR1cm4gaG9yaXpvbnRhbCA/IChib3VuZHMubGVmdCArIG9mZnNldCkgLyBfd2luLmlubmVyV2lkdGggOiAoYm91bmRzLnRvcCArIG9mZnNldCkgLyBfd2luLmlubmVySGVpZ2h0O1xuICB9O1xuXG4gIFNjcm9sbFRyaWdnZXIua2lsbEFsbCA9IGZ1bmN0aW9uIGtpbGxBbGwoYWxsb3dMaXN0ZW5lcnMpIHtcbiAgICBfdHJpZ2dlcnMuc2xpY2UoMCkuZm9yRWFjaChmdW5jdGlvbiAodCkge1xuICAgICAgcmV0dXJuIHQudmFycy5pZCAhPT0gXCJTY3JvbGxTbW9vdGhlclwiICYmIHQua2lsbCgpO1xuICAgIH0pO1xuXG4gICAgaWYgKGFsbG93TGlzdGVuZXJzICE9PSB0cnVlKSB7XG4gICAgICB2YXIgbGlzdGVuZXJzID0gX2xpc3RlbmVycy5raWxsQWxsIHx8IFtdO1xuICAgICAgX2xpc3RlbmVycyA9IHt9O1xuICAgICAgbGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGYpIHtcbiAgICAgICAgcmV0dXJuIGYoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gU2Nyb2xsVHJpZ2dlcjtcbn0oKTtcblNjcm9sbFRyaWdnZXIudmVyc2lvbiA9IFwiMy4xMi41XCI7XG5cblNjcm9sbFRyaWdnZXIuc2F2ZVN0eWxlcyA9IGZ1bmN0aW9uICh0YXJnZXRzKSB7XG4gIHJldHVybiB0YXJnZXRzID8gX3RvQXJyYXkodGFyZ2V0cykuZm9yRWFjaChmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgLy8gc2F2ZWQgc3R5bGVzIGFyZSByZWNvcmRlZCBpbiBhIGNvbnNlY3V0aXZlIGFsdGVybmF0aW5nIEFycmF5LCBsaWtlIFtlbGVtZW50LCBjc3NUZXh0LCB0cmFuc2Zvcm0gYXR0cmlidXRlLCBjYWNoZSwgbWF0Y2hNZWRpYSwgLi4uXVxuICAgIGlmICh0YXJnZXQgJiYgdGFyZ2V0LnN0eWxlKSB7XG4gICAgICB2YXIgaSA9IF9zYXZlZFN0eWxlcy5pbmRleE9mKHRhcmdldCk7XG5cbiAgICAgIGkgPj0gMCAmJiBfc2F2ZWRTdHlsZXMuc3BsaWNlKGksIDUpO1xuXG4gICAgICBfc2F2ZWRTdHlsZXMucHVzaCh0YXJnZXQsIHRhcmdldC5zdHlsZS5jc3NUZXh0LCB0YXJnZXQuZ2V0QkJveCAmJiB0YXJnZXQuZ2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIpLCBnc2FwLmNvcmUuZ2V0Q2FjaGUodGFyZ2V0KSwgX2NvbnRleHQoKSk7XG4gICAgfVxuICB9KSA6IF9zYXZlZFN0eWxlcztcbn07XG5cblNjcm9sbFRyaWdnZXIucmV2ZXJ0ID0gZnVuY3Rpb24gKHNvZnQsIG1lZGlhKSB7XG4gIHJldHVybiBfcmV2ZXJ0QWxsKCFzb2Z0LCBtZWRpYSk7XG59O1xuXG5TY3JvbGxUcmlnZ2VyLmNyZWF0ZSA9IGZ1bmN0aW9uICh2YXJzLCBhbmltYXRpb24pIHtcbiAgcmV0dXJuIG5ldyBTY3JvbGxUcmlnZ2VyKHZhcnMsIGFuaW1hdGlvbik7XG59O1xuXG5TY3JvbGxUcmlnZ2VyLnJlZnJlc2ggPSBmdW5jdGlvbiAoc2FmZSkge1xuICByZXR1cm4gc2FmZSA/IF9vblJlc2l6ZSgpIDogKF9jb3JlSW5pdHRlZCB8fCBTY3JvbGxUcmlnZ2VyLnJlZ2lzdGVyKCkpICYmIF9yZWZyZXNoQWxsKHRydWUpO1xufTtcblxuU2Nyb2xsVHJpZ2dlci51cGRhdGUgPSBmdW5jdGlvbiAoZm9yY2UpIHtcbiAgcmV0dXJuICsrX3Njcm9sbGVycy5jYWNoZSAmJiBfdXBkYXRlQWxsKGZvcmNlID09PSB0cnVlID8gMiA6IDApO1xufTtcblxuU2Nyb2xsVHJpZ2dlci5jbGVhclNjcm9sbE1lbW9yeSA9IF9jbGVhclNjcm9sbE1lbW9yeTtcblxuU2Nyb2xsVHJpZ2dlci5tYXhTY3JvbGwgPSBmdW5jdGlvbiAoZWxlbWVudCwgaG9yaXpvbnRhbCkge1xuICByZXR1cm4gX21heFNjcm9sbChlbGVtZW50LCBob3Jpem9udGFsID8gX2hvcml6b250YWwgOiBfdmVydGljYWwpO1xufTtcblxuU2Nyb2xsVHJpZ2dlci5nZXRTY3JvbGxGdW5jID0gZnVuY3Rpb24gKGVsZW1lbnQsIGhvcml6b250YWwpIHtcbiAgcmV0dXJuIF9nZXRTY3JvbGxGdW5jKF9nZXRUYXJnZXQoZWxlbWVudCksIGhvcml6b250YWwgPyBfaG9yaXpvbnRhbCA6IF92ZXJ0aWNhbCk7XG59O1xuXG5TY3JvbGxUcmlnZ2VyLmdldEJ5SWQgPSBmdW5jdGlvbiAoaWQpIHtcbiAgcmV0dXJuIF9pZHNbaWRdO1xufTtcblxuU2Nyb2xsVHJpZ2dlci5nZXRBbGwgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBfdHJpZ2dlcnMuZmlsdGVyKGZ1bmN0aW9uICh0KSB7XG4gICAgcmV0dXJuIHQudmFycy5pZCAhPT0gXCJTY3JvbGxTbW9vdGhlclwiO1xuICB9KTtcbn07IC8vIGl0J3MgY29tbW9uIGZvciBwZW9wbGUgdG8gU2Nyb2xsVHJpZ2dlci5nZXRBbGwodCA9PiB0LmtpbGwoKSkgb24gcGFnZSByb3V0ZXMsIGZvciBleGFtcGxlLCBhbmQgd2UgZG9uJ3Qgd2FudCBpdCB0byBydWluIHNtb290aCBzY3JvbGxpbmcgYnkga2lsbGluZyB0aGUgbWFpbiBTY3JvbGxTbW9vdGhlciBvbmUuXG5cblxuU2Nyb2xsVHJpZ2dlci5pc1Njcm9sbGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICEhX2xhc3RTY3JvbGxUaW1lO1xufTtcblxuU2Nyb2xsVHJpZ2dlci5zbmFwRGlyZWN0aW9uYWwgPSBfc25hcERpcmVjdGlvbmFsO1xuXG5TY3JvbGxUcmlnZ2VyLmFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiAodHlwZSwgY2FsbGJhY2spIHtcbiAgdmFyIGEgPSBfbGlzdGVuZXJzW3R5cGVdIHx8IChfbGlzdGVuZXJzW3R5cGVdID0gW10pO1xuICB+YS5pbmRleE9mKGNhbGxiYWNrKSB8fCBhLnB1c2goY2FsbGJhY2spO1xufTtcblxuU2Nyb2xsVHJpZ2dlci5yZW1vdmVFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gKHR5cGUsIGNhbGxiYWNrKSB7XG4gIHZhciBhID0gX2xpc3RlbmVyc1t0eXBlXSxcbiAgICAgIGkgPSBhICYmIGEuaW5kZXhPZihjYWxsYmFjayk7XG4gIGkgPj0gMCAmJiBhLnNwbGljZShpLCAxKTtcbn07XG5cblNjcm9sbFRyaWdnZXIuYmF0Y2ggPSBmdW5jdGlvbiAodGFyZ2V0cywgdmFycykge1xuICB2YXIgcmVzdWx0ID0gW10sXG4gICAgICB2YXJzQ29weSA9IHt9LFxuICAgICAgaW50ZXJ2YWwgPSB2YXJzLmludGVydmFsIHx8IDAuMDE2LFxuICAgICAgYmF0Y2hNYXggPSB2YXJzLmJhdGNoTWF4IHx8IDFlOSxcbiAgICAgIHByb3h5Q2FsbGJhY2sgPSBmdW5jdGlvbiBwcm94eUNhbGxiYWNrKHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGVsZW1lbnRzID0gW10sXG4gICAgICAgIHRyaWdnZXJzID0gW10sXG4gICAgICAgIGRlbGF5ID0gZ3NhcC5kZWxheWVkQ2FsbChpbnRlcnZhbCwgZnVuY3Rpb24gKCkge1xuICAgICAgY2FsbGJhY2soZWxlbWVudHMsIHRyaWdnZXJzKTtcbiAgICAgIGVsZW1lbnRzID0gW107XG4gICAgICB0cmlnZ2VycyA9IFtdO1xuICAgIH0pLnBhdXNlKCk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzZWxmKSB7XG4gICAgICBlbGVtZW50cy5sZW5ndGggfHwgZGVsYXkucmVzdGFydCh0cnVlKTtcbiAgICAgIGVsZW1lbnRzLnB1c2goc2VsZi50cmlnZ2VyKTtcbiAgICAgIHRyaWdnZXJzLnB1c2goc2VsZik7XG4gICAgICBiYXRjaE1heCA8PSBlbGVtZW50cy5sZW5ndGggJiYgZGVsYXkucHJvZ3Jlc3MoMSk7XG4gICAgfTtcbiAgfSxcbiAgICAgIHA7XG5cbiAgZm9yIChwIGluIHZhcnMpIHtcbiAgICB2YXJzQ29weVtwXSA9IHAuc3Vic3RyKDAsIDIpID09PSBcIm9uXCIgJiYgX2lzRnVuY3Rpb24odmFyc1twXSkgJiYgcCAhPT0gXCJvblJlZnJlc2hJbml0XCIgPyBwcm94eUNhbGxiYWNrKHAsIHZhcnNbcF0pIDogdmFyc1twXTtcbiAgfVxuXG4gIGlmIChfaXNGdW5jdGlvbihiYXRjaE1heCkpIHtcbiAgICBiYXRjaE1heCA9IGJhdGNoTWF4KCk7XG5cbiAgICBfYWRkTGlzdGVuZXIoU2Nyb2xsVHJpZ2dlciwgXCJyZWZyZXNoXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBiYXRjaE1heCA9IHZhcnMuYmF0Y2hNYXgoKTtcbiAgICB9KTtcbiAgfVxuXG4gIF90b0FycmF5KHRhcmdldHMpLmZvckVhY2goZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIHZhciBjb25maWcgPSB7fTtcblxuICAgIGZvciAocCBpbiB2YXJzQ29weSkge1xuICAgICAgY29uZmlnW3BdID0gdmFyc0NvcHlbcF07XG4gICAgfVxuXG4gICAgY29uZmlnLnRyaWdnZXIgPSB0YXJnZXQ7XG4gICAgcmVzdWx0LnB1c2goU2Nyb2xsVHJpZ2dlci5jcmVhdGUoY29uZmlnKSk7XG4gIH0pO1xuXG4gIHJldHVybiByZXN1bHQ7XG59OyAvLyB0byByZWR1Y2UgZmlsZSBzaXplLiBjbGFtcHMgdGhlIHNjcm9sbCBhbmQgYWxzbyByZXR1cm5zIGEgZHVyYXRpb24gbXVsdGlwbGllciBzbyB0aGF0IGlmIHRoZSBzY3JvbGwgZ2V0cyBjaG9wcGVkIHNob3J0ZXIsIHRoZSBkdXJhdGlvbiBnZXRzIGN1cnRhaWxlZCBhcyB3ZWxsIChvdGhlcndpc2UgaWYgeW91J3JlIHZlcnkgY2xvc2UgdG8gdGhlIHRvcCBvZiB0aGUgcGFnZSwgZm9yIGV4YW1wbGUsIGFuZCBzd2lwZSB1cCByZWFsbHkgZmFzdCwgaXQnbGwgc3VkZGVubHkgc2xvdyBkb3duIGFuZCB0YWtlIGEgbG9uZyB0aW1lIHRvIHJlYWNoIHRoZSB0b3ApLlxuXG5cbnZhciBfY2xhbXBTY3JvbGxBbmRHZXREdXJhdGlvbk11bHRpcGxpZXIgPSBmdW5jdGlvbiBfY2xhbXBTY3JvbGxBbmRHZXREdXJhdGlvbk11bHRpcGxpZXIoc2Nyb2xsRnVuYywgY3VycmVudCwgZW5kLCBtYXgpIHtcbiAgY3VycmVudCA+IG1heCA/IHNjcm9sbEZ1bmMobWF4KSA6IGN1cnJlbnQgPCAwICYmIHNjcm9sbEZ1bmMoMCk7XG4gIHJldHVybiBlbmQgPiBtYXggPyAobWF4IC0gY3VycmVudCkgLyAoZW5kIC0gY3VycmVudCkgOiBlbmQgPCAwID8gY3VycmVudCAvIChjdXJyZW50IC0gZW5kKSA6IDE7XG59LFxuICAgIF9hbGxvd05hdGl2ZVBhbm5pbmcgPSBmdW5jdGlvbiBfYWxsb3dOYXRpdmVQYW5uaW5nKHRhcmdldCwgZGlyZWN0aW9uKSB7XG4gIGlmIChkaXJlY3Rpb24gPT09IHRydWUpIHtcbiAgICB0YXJnZXQuc3R5bGUucmVtb3ZlUHJvcGVydHkoXCJ0b3VjaC1hY3Rpb25cIik7XG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0LnN0eWxlLnRvdWNoQWN0aW9uID0gZGlyZWN0aW9uID09PSB0cnVlID8gXCJhdXRvXCIgOiBkaXJlY3Rpb24gPyBcInBhbi1cIiArIGRpcmVjdGlvbiArIChPYnNlcnZlci5pc1RvdWNoID8gXCIgcGluY2gtem9vbVwiIDogXCJcIikgOiBcIm5vbmVcIjsgLy8gbm90ZTogRmlyZWZveCBkb2Vzbid0IHN1cHBvcnQgaXQgcGluY2gtem9vbSBwcm9wZXJseSwgYXQgbGVhc3QgaW4gYWRkaXRpb24gdG8gYSBwYW4teCBvciBwYW4teS5cbiAgfVxuXG4gIHRhcmdldCA9PT0gX2RvY0VsICYmIF9hbGxvd05hdGl2ZVBhbm5pbmcoX2JvZHksIGRpcmVjdGlvbik7XG59LFxuICAgIF9vdmVyZmxvdyA9IHtcbiAgYXV0bzogMSxcbiAgc2Nyb2xsOiAxXG59LFxuICAgIF9uZXN0ZWRTY3JvbGwgPSBmdW5jdGlvbiBfbmVzdGVkU2Nyb2xsKF9yZWY1KSB7XG4gIHZhciBldmVudCA9IF9yZWY1LmV2ZW50LFxuICAgICAgdGFyZ2V0ID0gX3JlZjUudGFyZ2V0LFxuICAgICAgYXhpcyA9IF9yZWY1LmF4aXM7XG5cbiAgdmFyIG5vZGUgPSAoZXZlbnQuY2hhbmdlZFRvdWNoZXMgPyBldmVudC5jaGFuZ2VkVG91Y2hlc1swXSA6IGV2ZW50KS50YXJnZXQsXG4gICAgICBjYWNoZSA9IG5vZGUuX2dzYXAgfHwgZ3NhcC5jb3JlLmdldENhY2hlKG5vZGUpLFxuICAgICAgdGltZSA9IF9nZXRUaW1lKCksXG4gICAgICBjcztcblxuICBpZiAoIWNhY2hlLl9pc1Njcm9sbFQgfHwgdGltZSAtIGNhY2hlLl9pc1Njcm9sbFQgPiAyMDAwKSB7XG4gICAgLy8gY2FjaGUgZm9yIDIgc2Vjb25kcyB0byBpbXByb3ZlIHBlcmZvcm1hbmNlLlxuICAgIHdoaWxlIChub2RlICYmIG5vZGUgIT09IF9ib2R5ICYmIChub2RlLnNjcm9sbEhlaWdodCA8PSBub2RlLmNsaWVudEhlaWdodCAmJiBub2RlLnNjcm9sbFdpZHRoIDw9IG5vZGUuY2xpZW50V2lkdGggfHwgIShfb3ZlcmZsb3dbKGNzID0gX2dldENvbXB1dGVkU3R5bGUobm9kZSkpLm92ZXJmbG93WV0gfHwgX292ZXJmbG93W2NzLm92ZXJmbG93WF0pKSkge1xuICAgICAgbm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcbiAgICB9XG5cbiAgICBjYWNoZS5faXNTY3JvbGwgPSBub2RlICYmIG5vZGUgIT09IHRhcmdldCAmJiAhX2lzVmlld3BvcnQobm9kZSkgJiYgKF9vdmVyZmxvd1soY3MgPSBfZ2V0Q29tcHV0ZWRTdHlsZShub2RlKSkub3ZlcmZsb3dZXSB8fCBfb3ZlcmZsb3dbY3Mub3ZlcmZsb3dYXSk7XG4gICAgY2FjaGUuX2lzU2Nyb2xsVCA9IHRpbWU7XG4gIH1cblxuICBpZiAoY2FjaGUuX2lzU2Nyb2xsIHx8IGF4aXMgPT09IFwieFwiKSB7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgZXZlbnQuX2dzYXBBbGxvdyA9IHRydWU7XG4gIH1cbn0sXG4gICAgLy8gY2FwdHVyZSBldmVudHMgb24gc2Nyb2xsYWJsZSBlbGVtZW50cyBJTlNJREUgdGhlIDxib2R5PiBhbmQgYWxsb3cgdGhvc2UgYnkgY2FsbGluZyBzdG9wUHJvcGFnYXRpb24oKSB3aGVuIHdlIGZpbmQgYSBzY3JvbGxhYmxlIGFuY2VzdG9yXG5faW5wdXRPYnNlcnZlciA9IGZ1bmN0aW9uIF9pbnB1dE9ic2VydmVyKHRhcmdldCwgdHlwZSwgaW5wdXRzLCBuZXN0ZWQpIHtcbiAgcmV0dXJuIE9ic2VydmVyLmNyZWF0ZSh7XG4gICAgdGFyZ2V0OiB0YXJnZXQsXG4gICAgY2FwdHVyZTogdHJ1ZSxcbiAgICBkZWJvdW5jZTogZmFsc2UsXG4gICAgbG9ja0F4aXM6IHRydWUsXG4gICAgdHlwZTogdHlwZSxcbiAgICBvbldoZWVsOiBuZXN0ZWQgPSBuZXN0ZWQgJiYgX25lc3RlZFNjcm9sbCxcbiAgICBvblByZXNzOiBuZXN0ZWQsXG4gICAgb25EcmFnOiBuZXN0ZWQsXG4gICAgb25TY3JvbGw6IG5lc3RlZCxcbiAgICBvbkVuYWJsZTogZnVuY3Rpb24gb25FbmFibGUoKSB7XG4gICAgICByZXR1cm4gaW5wdXRzICYmIF9hZGRMaXN0ZW5lcihfZG9jLCBPYnNlcnZlci5ldmVudFR5cGVzWzBdLCBfY2FwdHVyZUlucHV0cywgZmFsc2UsIHRydWUpO1xuICAgIH0sXG4gICAgb25EaXNhYmxlOiBmdW5jdGlvbiBvbkRpc2FibGUoKSB7XG4gICAgICByZXR1cm4gX3JlbW92ZUxpc3RlbmVyKF9kb2MsIE9ic2VydmVyLmV2ZW50VHlwZXNbMF0sIF9jYXB0dXJlSW5wdXRzLCB0cnVlKTtcbiAgICB9XG4gIH0pO1xufSxcbiAgICBfaW5wdXRFeHAgPSAvKGlucHV0fGxhYmVsfHNlbGVjdHx0ZXh0YXJlYSkvaSxcbiAgICBfaW5wdXRJc0ZvY3VzZWQsXG4gICAgX2NhcHR1cmVJbnB1dHMgPSBmdW5jdGlvbiBfY2FwdHVyZUlucHV0cyhlKSB7XG4gIHZhciBpc0lucHV0ID0gX2lucHV0RXhwLnRlc3QoZS50YXJnZXQudGFnTmFtZSk7XG5cbiAgaWYgKGlzSW5wdXQgfHwgX2lucHV0SXNGb2N1c2VkKSB7XG4gICAgZS5fZ3NhcEFsbG93ID0gdHJ1ZTtcbiAgICBfaW5wdXRJc0ZvY3VzZWQgPSBpc0lucHV0O1xuICB9XG59LFxuICAgIF9nZXRTY3JvbGxOb3JtYWxpemVyID0gZnVuY3Rpb24gX2dldFNjcm9sbE5vcm1hbGl6ZXIodmFycykge1xuICBfaXNPYmplY3QodmFycykgfHwgKHZhcnMgPSB7fSk7XG4gIHZhcnMucHJldmVudERlZmF1bHQgPSB2YXJzLmlzTm9ybWFsaXplciA9IHZhcnMuYWxsb3dDbGlja3MgPSB0cnVlO1xuICB2YXJzLnR5cGUgfHwgKHZhcnMudHlwZSA9IFwid2hlZWwsdG91Y2hcIik7XG4gIHZhcnMuZGVib3VuY2UgPSAhIXZhcnMuZGVib3VuY2U7XG4gIHZhcnMuaWQgPSB2YXJzLmlkIHx8IFwibm9ybWFsaXplclwiO1xuXG4gIHZhciBfdmFyczIgPSB2YXJzLFxuICAgICAgbm9ybWFsaXplU2Nyb2xsWCA9IF92YXJzMi5ub3JtYWxpemVTY3JvbGxYLFxuICAgICAgbW9tZW50dW0gPSBfdmFyczIubW9tZW50dW0sXG4gICAgICBhbGxvd05lc3RlZFNjcm9sbCA9IF92YXJzMi5hbGxvd05lc3RlZFNjcm9sbCxcbiAgICAgIG9uUmVsZWFzZSA9IF92YXJzMi5vblJlbGVhc2UsXG4gICAgICBzZWxmLFxuICAgICAgbWF4WSxcbiAgICAgIHRhcmdldCA9IF9nZXRUYXJnZXQodmFycy50YXJnZXQpIHx8IF9kb2NFbCxcbiAgICAgIHNtb290aGVyID0gZ3NhcC5jb3JlLmdsb2JhbHMoKS5TY3JvbGxTbW9vdGhlcixcbiAgICAgIHNtb290aGVySW5zdGFuY2UgPSBzbW9vdGhlciAmJiBzbW9vdGhlci5nZXQoKSxcbiAgICAgIGNvbnRlbnQgPSBfZml4SU9TQnVnICYmICh2YXJzLmNvbnRlbnQgJiYgX2dldFRhcmdldCh2YXJzLmNvbnRlbnQpIHx8IHNtb290aGVySW5zdGFuY2UgJiYgdmFycy5jb250ZW50ICE9PSBmYWxzZSAmJiAhc21vb3RoZXJJbnN0YW5jZS5zbW9vdGgoKSAmJiBzbW9vdGhlckluc3RhbmNlLmNvbnRlbnQoKSksXG4gICAgICBzY3JvbGxGdW5jWSA9IF9nZXRTY3JvbGxGdW5jKHRhcmdldCwgX3ZlcnRpY2FsKSxcbiAgICAgIHNjcm9sbEZ1bmNYID0gX2dldFNjcm9sbEZ1bmModGFyZ2V0LCBfaG9yaXpvbnRhbCksXG4gICAgICBzY2FsZSA9IDEsXG4gICAgICBpbml0aWFsU2NhbGUgPSAoT2JzZXJ2ZXIuaXNUb3VjaCAmJiBfd2luLnZpc3VhbFZpZXdwb3J0ID8gX3dpbi52aXN1YWxWaWV3cG9ydC5zY2FsZSAqIF93aW4udmlzdWFsVmlld3BvcnQud2lkdGggOiBfd2luLm91dGVyV2lkdGgpIC8gX3dpbi5pbm5lcldpZHRoLFxuICAgICAgd2hlZWxSZWZyZXNoID0gMCxcbiAgICAgIHJlc29sdmVNb21lbnR1bUR1cmF0aW9uID0gX2lzRnVuY3Rpb24obW9tZW50dW0pID8gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBtb21lbnR1bShzZWxmKTtcbiAgfSA6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbW9tZW50dW0gfHwgMi44O1xuICB9LFxuICAgICAgbGFzdFJlZnJlc2hJRCxcbiAgICAgIHNraXBUb3VjaE1vdmUsXG4gICAgICBpbnB1dE9ic2VydmVyID0gX2lucHV0T2JzZXJ2ZXIodGFyZ2V0LCB2YXJzLnR5cGUsIHRydWUsIGFsbG93TmVzdGVkU2Nyb2xsKSxcbiAgICAgIHJlc3VtZVRvdWNoTW92ZSA9IGZ1bmN0aW9uIHJlc3VtZVRvdWNoTW92ZSgpIHtcbiAgICByZXR1cm4gc2tpcFRvdWNoTW92ZSA9IGZhbHNlO1xuICB9LFxuICAgICAgc2Nyb2xsQ2xhbXBYID0gX3Bhc3NUaHJvdWdoLFxuICAgICAgc2Nyb2xsQ2xhbXBZID0gX3Bhc3NUaHJvdWdoLFxuICAgICAgdXBkYXRlQ2xhbXBzID0gZnVuY3Rpb24gdXBkYXRlQ2xhbXBzKCkge1xuICAgIG1heFkgPSBfbWF4U2Nyb2xsKHRhcmdldCwgX3ZlcnRpY2FsKTtcbiAgICBzY3JvbGxDbGFtcFkgPSBfY2xhbXAoX2ZpeElPU0J1ZyA/IDEgOiAwLCBtYXhZKTtcbiAgICBub3JtYWxpemVTY3JvbGxYICYmIChzY3JvbGxDbGFtcFggPSBfY2xhbXAoMCwgX21heFNjcm9sbCh0YXJnZXQsIF9ob3Jpem9udGFsKSkpO1xuICAgIGxhc3RSZWZyZXNoSUQgPSBfcmVmcmVzaElEO1xuICB9LFxuICAgICAgcmVtb3ZlQ29udGVudE9mZnNldCA9IGZ1bmN0aW9uIHJlbW92ZUNvbnRlbnRPZmZzZXQoKSB7XG4gICAgY29udGVudC5fZ3NhcC55ID0gX3JvdW5kKHBhcnNlRmxvYXQoY29udGVudC5fZ3NhcC55KSArIHNjcm9sbEZ1bmNZLm9mZnNldCkgKyBcInB4XCI7XG4gICAgY29udGVudC5zdHlsZS50cmFuc2Zvcm0gPSBcIm1hdHJpeDNkKDEsIDAsIDAsIDAsIDAsIDEsIDAsIDAsIDAsIDAsIDEsIDAsIDAsIFwiICsgcGFyc2VGbG9hdChjb250ZW50Ll9nc2FwLnkpICsgXCIsIDAsIDEpXCI7XG4gICAgc2Nyb2xsRnVuY1kub2Zmc2V0ID0gc2Nyb2xsRnVuY1kuY2FjaGVJRCA9IDA7XG4gIH0sXG4gICAgICBpZ25vcmVEcmFnID0gZnVuY3Rpb24gaWdub3JlRHJhZygpIHtcbiAgICBpZiAoc2tpcFRvdWNoTW92ZSkge1xuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJlc3VtZVRvdWNoTW92ZSk7XG5cbiAgICAgIHZhciBvZmZzZXQgPSBfcm91bmQoc2VsZi5kZWx0YVkgLyAyKSxcbiAgICAgICAgICBzY3JvbGwgPSBzY3JvbGxDbGFtcFkoc2Nyb2xsRnVuY1kudiAtIG9mZnNldCk7XG5cbiAgICAgIGlmIChjb250ZW50ICYmIHNjcm9sbCAhPT0gc2Nyb2xsRnVuY1kudiArIHNjcm9sbEZ1bmNZLm9mZnNldCkge1xuICAgICAgICBzY3JvbGxGdW5jWS5vZmZzZXQgPSBzY3JvbGwgLSBzY3JvbGxGdW5jWS52O1xuXG4gICAgICAgIHZhciB5ID0gX3JvdW5kKChwYXJzZUZsb2F0KGNvbnRlbnQgJiYgY29udGVudC5fZ3NhcC55KSB8fCAwKSAtIHNjcm9sbEZ1bmNZLm9mZnNldCk7XG5cbiAgICAgICAgY29udGVudC5zdHlsZS50cmFuc2Zvcm0gPSBcIm1hdHJpeDNkKDEsIDAsIDAsIDAsIDAsIDEsIDAsIDAsIDAsIDAsIDEsIDAsIDAsIFwiICsgeSArIFwiLCAwLCAxKVwiO1xuICAgICAgICBjb250ZW50Ll9nc2FwLnkgPSB5ICsgXCJweFwiO1xuICAgICAgICBzY3JvbGxGdW5jWS5jYWNoZUlEID0gX3Njcm9sbGVycy5jYWNoZTtcblxuICAgICAgICBfdXBkYXRlQWxsKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHNjcm9sbEZ1bmNZLm9mZnNldCAmJiByZW1vdmVDb250ZW50T2Zmc2V0KCk7XG4gICAgc2tpcFRvdWNoTW92ZSA9IHRydWU7XG4gIH0sXG4gICAgICB0d2VlbixcbiAgICAgIHN0YXJ0U2Nyb2xsWCxcbiAgICAgIHN0YXJ0U2Nyb2xsWSxcbiAgICAgIG9uU3RvcERlbGF5ZWRDYWxsLFxuICAgICAgb25SZXNpemUgPSBmdW5jdGlvbiBvblJlc2l6ZSgpIHtcbiAgICAvLyBpZiB0aGUgd2luZG93IHJlc2l6ZXMsIGxpa2Ugb24gYW4gaVBob25lIHdoaWNoIEFwcGxlIEZPUkNFUyB0aGUgYWRkcmVzcyBiYXIgdG8gc2hvdy9oaWRlIGV2ZW4gaWYgd2UgZXZlbnQucHJldmVudERlZmF1bHQoKSwgaXQgbWF5IGJlIHNjcm9sbGluZyB0b28gZmFyIG5vdyB0aGF0IHRoZSBhZGRyZXNzIGJhciBpcyBzaG93aW5nLCBzbyB3ZSBtdXN0IGR5bmFtaWNhbGx5IGFkanVzdCB0aGUgbW9tZW50dW0gdHdlZW4uXG4gICAgdXBkYXRlQ2xhbXBzKCk7XG5cbiAgICBpZiAodHdlZW4uaXNBY3RpdmUoKSAmJiB0d2Vlbi52YXJzLnNjcm9sbFkgPiBtYXhZKSB7XG4gICAgICBzY3JvbGxGdW5jWSgpID4gbWF4WSA/IHR3ZWVuLnByb2dyZXNzKDEpICYmIHNjcm9sbEZ1bmNZKG1heFkpIDogdHdlZW4ucmVzZXRUbyhcInNjcm9sbFlcIiwgbWF4WSk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnRlbnQgJiYgZ3NhcC5zZXQoY29udGVudCwge1xuICAgIHk6IFwiKz0wXCJcbiAgfSk7IC8vIHRvIGVuc3VyZSB0aGVyZSdzIGEgY2FjaGUgKGVsZW1lbnQuX2dzYXApXG5cbiAgdmFycy5pZ25vcmVDaGVjayA9IGZ1bmN0aW9uIChlKSB7XG4gICAgcmV0dXJuIF9maXhJT1NCdWcgJiYgZS50eXBlID09PSBcInRvdWNobW92ZVwiICYmIGlnbm9yZURyYWcoZSkgfHwgc2NhbGUgPiAxLjA1ICYmIGUudHlwZSAhPT0gXCJ0b3VjaHN0YXJ0XCIgfHwgc2VsZi5pc0dlc3R1cmluZyB8fCBlLnRvdWNoZXMgJiYgZS50b3VjaGVzLmxlbmd0aCA+IDE7XG4gIH07XG5cbiAgdmFycy5vblByZXNzID0gZnVuY3Rpb24gKCkge1xuICAgIHNraXBUb3VjaE1vdmUgPSBmYWxzZTtcbiAgICB2YXIgcHJldlNjYWxlID0gc2NhbGU7XG4gICAgc2NhbGUgPSBfcm91bmQoKF93aW4udmlzdWFsVmlld3BvcnQgJiYgX3dpbi52aXN1YWxWaWV3cG9ydC5zY2FsZSB8fCAxKSAvIGluaXRpYWxTY2FsZSk7XG4gICAgdHdlZW4ucGF1c2UoKTtcbiAgICBwcmV2U2NhbGUgIT09IHNjYWxlICYmIF9hbGxvd05hdGl2ZVBhbm5pbmcodGFyZ2V0LCBzY2FsZSA+IDEuMDEgPyB0cnVlIDogbm9ybWFsaXplU2Nyb2xsWCA/IGZhbHNlIDogXCJ4XCIpO1xuICAgIHN0YXJ0U2Nyb2xsWCA9IHNjcm9sbEZ1bmNYKCk7XG4gICAgc3RhcnRTY3JvbGxZID0gc2Nyb2xsRnVuY1koKTtcbiAgICB1cGRhdGVDbGFtcHMoKTtcbiAgICBsYXN0UmVmcmVzaElEID0gX3JlZnJlc2hJRDtcbiAgfTtcblxuICB2YXJzLm9uUmVsZWFzZSA9IHZhcnMub25HZXN0dXJlU3RhcnQgPSBmdW5jdGlvbiAoc2VsZiwgd2FzRHJhZ2dpbmcpIHtcbiAgICBzY3JvbGxGdW5jWS5vZmZzZXQgJiYgcmVtb3ZlQ29udGVudE9mZnNldCgpO1xuXG4gICAgaWYgKCF3YXNEcmFnZ2luZykge1xuICAgICAgb25TdG9wRGVsYXllZENhbGwucmVzdGFydCh0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgX3Njcm9sbGVycy5jYWNoZSsrOyAvLyBtYWtlIHN1cmUgd2UncmUgcHVsbGluZyB0aGUgbm9uLWNhY2hlZCB2YWx1ZVxuICAgICAgLy8gYWx0ZXJuYXRlIGFsZ29yaXRobTogZHVyWCA9IE1hdGgubWluKDYsIE1hdGguYWJzKHNlbGYudmVsb2NpdHlYIC8gODAwKSksXHRkdXIgPSBNYXRoLm1heChkdXJYLCBNYXRoLm1pbig2LCBNYXRoLmFicyhzZWxmLnZlbG9jaXR5WSAvIDgwMCkpKTsgZHVyID0gZHVyICogKDAuNCArICgxIC0gX3Bvd2VyNEluKGR1ciAvIDYpKSAqIDAuNikpICogKG1vbWVudHVtU3BlZWQgfHwgMSlcblxuICAgICAgdmFyIGR1ciA9IHJlc29sdmVNb21lbnR1bUR1cmF0aW9uKCksXG4gICAgICAgICAgY3VycmVudFNjcm9sbCxcbiAgICAgICAgICBlbmRTY3JvbGw7XG5cbiAgICAgIGlmIChub3JtYWxpemVTY3JvbGxYKSB7XG4gICAgICAgIGN1cnJlbnRTY3JvbGwgPSBzY3JvbGxGdW5jWCgpO1xuICAgICAgICBlbmRTY3JvbGwgPSBjdXJyZW50U2Nyb2xsICsgZHVyICogMC4wNSAqIC1zZWxmLnZlbG9jaXR5WCAvIDAuMjI3OyAvLyB0aGUgY29uc3RhbnQgLjIyNyBpcyBmcm9tIHBvd2VyNCgwLjA1KS4gdmVsb2NpdHkgaXMgaW52ZXJ0ZWQgYmVjYXVzZSBzY3JvbGxpbmcgZ29lcyBpbiB0aGUgb3Bwb3NpdGUgZGlyZWN0aW9uLlxuXG4gICAgICAgIGR1ciAqPSBfY2xhbXBTY3JvbGxBbmRHZXREdXJhdGlvbk11bHRpcGxpZXIoc2Nyb2xsRnVuY1gsIGN1cnJlbnRTY3JvbGwsIGVuZFNjcm9sbCwgX21heFNjcm9sbCh0YXJnZXQsIF9ob3Jpem9udGFsKSk7XG4gICAgICAgIHR3ZWVuLnZhcnMuc2Nyb2xsWCA9IHNjcm9sbENsYW1wWChlbmRTY3JvbGwpO1xuICAgICAgfVxuXG4gICAgICBjdXJyZW50U2Nyb2xsID0gc2Nyb2xsRnVuY1koKTtcbiAgICAgIGVuZFNjcm9sbCA9IGN1cnJlbnRTY3JvbGwgKyBkdXIgKiAwLjA1ICogLXNlbGYudmVsb2NpdHlZIC8gMC4yMjc7IC8vIHRoZSBjb25zdGFudCAuMjI3IGlzIGZyb20gcG93ZXI0KDAuMDUpXG5cbiAgICAgIGR1ciAqPSBfY2xhbXBTY3JvbGxBbmRHZXREdXJhdGlvbk11bHRpcGxpZXIoc2Nyb2xsRnVuY1ksIGN1cnJlbnRTY3JvbGwsIGVuZFNjcm9sbCwgX21heFNjcm9sbCh0YXJnZXQsIF92ZXJ0aWNhbCkpO1xuICAgICAgdHdlZW4udmFycy5zY3JvbGxZID0gc2Nyb2xsQ2xhbXBZKGVuZFNjcm9sbCk7XG4gICAgICB0d2Vlbi5pbnZhbGlkYXRlKCkuZHVyYXRpb24oZHVyKS5wbGF5KDAuMDEpO1xuXG4gICAgICBpZiAoX2ZpeElPU0J1ZyAmJiB0d2Vlbi52YXJzLnNjcm9sbFkgPj0gbWF4WSB8fCBjdXJyZW50U2Nyb2xsID49IG1heFkgLSAxKSB7XG4gICAgICAgIC8vIGlPUyBidWc6IGl0J2xsIHNob3cgdGhlIGFkZHJlc3MgYmFyIGJ1dCBOT1QgZmlyZSB0aGUgd2luZG93IFwicmVzaXplXCIgZXZlbnQgdW50aWwgdGhlIGFuaW1hdGlvbiBpcyBkb25lIGJ1dCB3ZSBtdXN0IHByb3RlY3QgYWdhaW5zdCBvdmVyc2hvb3Qgc28gd2UgbGV2ZXJhZ2UgYW4gb25VcGRhdGUgdG8gZG8gc28uXG4gICAgICAgIGdzYXAudG8oe30sIHtcbiAgICAgICAgICBvblVwZGF0ZTogb25SZXNpemUsXG4gICAgICAgICAgZHVyYXRpb246IGR1clxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBvblJlbGVhc2UgJiYgb25SZWxlYXNlKHNlbGYpO1xuICB9O1xuXG4gIHZhcnMub25XaGVlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0d2Vlbi5fdHMgJiYgdHdlZW4ucGF1c2UoKTtcblxuICAgIGlmIChfZ2V0VGltZSgpIC0gd2hlZWxSZWZyZXNoID4gMTAwMCkge1xuICAgICAgLy8gYWZ0ZXIgMSBzZWNvbmQsIHJlZnJlc2ggdGhlIGNsYW1wcyBvdGhlcndpc2UgdGhhdCdsbCBvbmx5IGhhcHBlbiB3aGVuIFNjcm9sbFRyaWdnZXIucmVmcmVzaCgpIGlzIGNhbGxlZCBvciBmb3IgdG91Y2gtc2Nyb2xsaW5nLlxuICAgICAgbGFzdFJlZnJlc2hJRCA9IDA7XG4gICAgICB3aGVlbFJlZnJlc2ggPSBfZ2V0VGltZSgpO1xuICAgIH1cbiAgfTtcblxuICB2YXJzLm9uQ2hhbmdlID0gZnVuY3Rpb24gKHNlbGYsIGR4LCBkeSwgeEFycmF5LCB5QXJyYXkpIHtcbiAgICBfcmVmcmVzaElEICE9PSBsYXN0UmVmcmVzaElEICYmIHVwZGF0ZUNsYW1wcygpO1xuICAgIGR4ICYmIG5vcm1hbGl6ZVNjcm9sbFggJiYgc2Nyb2xsRnVuY1goc2Nyb2xsQ2xhbXBYKHhBcnJheVsyXSA9PT0gZHggPyBzdGFydFNjcm9sbFggKyAoc2VsZi5zdGFydFggLSBzZWxmLngpIDogc2Nyb2xsRnVuY1goKSArIGR4IC0geEFycmF5WzFdKSk7IC8vIGZvciBtb3JlIHByZWNpc2lvbiwgd2UgdHJhY2sgcG9pbnRlci90b3VjaCBtb3ZlbWVudCBmcm9tIHRoZSBzdGFydCwgb3RoZXJ3aXNlIGl0J2xsIGRyaWZ0LlxuXG4gICAgaWYgKGR5KSB7XG4gICAgICBzY3JvbGxGdW5jWS5vZmZzZXQgJiYgcmVtb3ZlQ29udGVudE9mZnNldCgpO1xuICAgICAgdmFyIGlzVG91Y2ggPSB5QXJyYXlbMl0gPT09IGR5LFxuICAgICAgICAgIHkgPSBpc1RvdWNoID8gc3RhcnRTY3JvbGxZICsgc2VsZi5zdGFydFkgLSBzZWxmLnkgOiBzY3JvbGxGdW5jWSgpICsgZHkgLSB5QXJyYXlbMV0sXG4gICAgICAgICAgeUNsYW1wZWQgPSBzY3JvbGxDbGFtcFkoeSk7XG4gICAgICBpc1RvdWNoICYmIHkgIT09IHlDbGFtcGVkICYmIChzdGFydFNjcm9sbFkgKz0geUNsYW1wZWQgLSB5KTtcbiAgICAgIHNjcm9sbEZ1bmNZKHlDbGFtcGVkKTtcbiAgICB9XG5cbiAgICAoZHkgfHwgZHgpICYmIF91cGRhdGVBbGwoKTtcbiAgfTtcblxuICB2YXJzLm9uRW5hYmxlID0gZnVuY3Rpb24gKCkge1xuICAgIF9hbGxvd05hdGl2ZVBhbm5pbmcodGFyZ2V0LCBub3JtYWxpemVTY3JvbGxYID8gZmFsc2UgOiBcInhcIik7XG5cbiAgICBTY3JvbGxUcmlnZ2VyLmFkZEV2ZW50TGlzdGVuZXIoXCJyZWZyZXNoXCIsIG9uUmVzaXplKTtcblxuICAgIF9hZGRMaXN0ZW5lcihfd2luLCBcInJlc2l6ZVwiLCBvblJlc2l6ZSk7XG5cbiAgICBpZiAoc2Nyb2xsRnVuY1kuc21vb3RoKSB7XG4gICAgICBzY3JvbGxGdW5jWS50YXJnZXQuc3R5bGUuc2Nyb2xsQmVoYXZpb3IgPSBcImF1dG9cIjtcbiAgICAgIHNjcm9sbEZ1bmNZLnNtb290aCA9IHNjcm9sbEZ1bmNYLnNtb290aCA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlucHV0T2JzZXJ2ZXIuZW5hYmxlKCk7XG4gIH07XG5cbiAgdmFycy5vbkRpc2FibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgX2FsbG93TmF0aXZlUGFubmluZyh0YXJnZXQsIHRydWUpO1xuXG4gICAgX3JlbW92ZUxpc3RlbmVyKF93aW4sIFwicmVzaXplXCIsIG9uUmVzaXplKTtcblxuICAgIFNjcm9sbFRyaWdnZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlZnJlc2hcIiwgb25SZXNpemUpO1xuICAgIGlucHV0T2JzZXJ2ZXIua2lsbCgpO1xuICB9O1xuXG4gIHZhcnMubG9ja0F4aXMgPSB2YXJzLmxvY2tBeGlzICE9PSBmYWxzZTtcbiAgc2VsZiA9IG5ldyBPYnNlcnZlcih2YXJzKTtcbiAgc2VsZi5pT1MgPSBfZml4SU9TQnVnOyAvLyB1c2VkIGluIHRoZSBPYnNlcnZlciBnZXRDYWNoZWRTY3JvbGwoKSBmdW5jdGlvbiB0byB3b3JrIGFyb3VuZCBhbiBpT1MgYnVnIHRoYXQgd3JlYWtzIGhhdm9jIHdpdGggVG91Y2hFdmVudC5jbGllbnRZIGlmIHdlIGFsbG93IHNjcm9sbCB0byBnbyBhbGwgdGhlIHdheSBiYWNrIHRvIDAuXG5cbiAgX2ZpeElPU0J1ZyAmJiAhc2Nyb2xsRnVuY1koKSAmJiBzY3JvbGxGdW5jWSgxKTsgLy8gaU9TIGJ1ZyBjYXVzZXMgZXZlbnQuY2xpZW50WSB2YWx1ZXMgdG8gZnJlYWsgb3V0ICh3aWxkbHkgaW5hY2N1cmF0ZSkgaWYgdGhlIHNjcm9sbCBwb3NpdGlvbiBpcyBleGFjdGx5IDAuXG5cbiAgX2ZpeElPU0J1ZyAmJiBnc2FwLnRpY2tlci5hZGQoX3Bhc3NUaHJvdWdoKTsgLy8gcHJldmVudCB0aGUgdGlja2VyIGZyb20gc2xlZXBpbmdcblxuICBvblN0b3BEZWxheWVkQ2FsbCA9IHNlbGYuX2RjO1xuICB0d2VlbiA9IGdzYXAudG8oc2VsZiwge1xuICAgIGVhc2U6IFwicG93ZXI0XCIsXG4gICAgcGF1c2VkOiB0cnVlLFxuICAgIGluaGVyaXQ6IGZhbHNlLFxuICAgIHNjcm9sbFg6IG5vcm1hbGl6ZVNjcm9sbFggPyBcIis9MC4xXCIgOiBcIis9MFwiLFxuICAgIHNjcm9sbFk6IFwiKz0wLjFcIixcbiAgICBtb2RpZmllcnM6IHtcbiAgICAgIHNjcm9sbFk6IF9pbnRlcnJ1cHRpb25UcmFja2VyKHNjcm9sbEZ1bmNZLCBzY3JvbGxGdW5jWSgpLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0d2Vlbi5wYXVzZSgpO1xuICAgICAgfSlcbiAgICB9LFxuICAgIG9uVXBkYXRlOiBfdXBkYXRlQWxsLFxuICAgIG9uQ29tcGxldGU6IG9uU3RvcERlbGF5ZWRDYWxsLnZhcnMub25Db21wbGV0ZVxuICB9KTsgLy8gd2UgbmVlZCB0aGUgbW9kaWZpZXIgdG8gc2Vuc2UgaWYgdGhlIHNjcm9sbCBwb3NpdGlvbiBpcyBhbHRlcmVkIG91dHNpZGUgb2YgdGhlIG1vbWVudHVtIHR3ZWVuIChsaWtlIHdpdGggYSBzY3JvbGxUbyB0d2Vlbikgc28gd2UgY2FuIHBhdXNlKCkgaXQgdG8gcHJldmVudCBjb25mbGljdHMuXG5cbiAgcmV0dXJuIHNlbGY7XG59O1xuXG5TY3JvbGxUcmlnZ2VyLnNvcnQgPSBmdW5jdGlvbiAoZnVuYykge1xuICByZXR1cm4gX3RyaWdnZXJzLnNvcnQoZnVuYyB8fCBmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiAoYS52YXJzLnJlZnJlc2hQcmlvcml0eSB8fCAwKSAqIC0xZTYgKyBhLnN0YXJ0IC0gKGIuc3RhcnQgKyAoYi52YXJzLnJlZnJlc2hQcmlvcml0eSB8fCAwKSAqIC0xZTYpO1xuICB9KTtcbn07XG5cblNjcm9sbFRyaWdnZXIub2JzZXJ2ZSA9IGZ1bmN0aW9uICh2YXJzKSB7XG4gIHJldHVybiBuZXcgT2JzZXJ2ZXIodmFycyk7XG59O1xuXG5TY3JvbGxUcmlnZ2VyLm5vcm1hbGl6ZVNjcm9sbCA9IGZ1bmN0aW9uICh2YXJzKSB7XG4gIGlmICh0eXBlb2YgdmFycyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybiBfbm9ybWFsaXplcjtcbiAgfVxuXG4gIGlmICh2YXJzID09PSB0cnVlICYmIF9ub3JtYWxpemVyKSB7XG4gICAgcmV0dXJuIF9ub3JtYWxpemVyLmVuYWJsZSgpO1xuICB9XG5cbiAgaWYgKHZhcnMgPT09IGZhbHNlKSB7XG4gICAgX25vcm1hbGl6ZXIgJiYgX25vcm1hbGl6ZXIua2lsbCgpO1xuICAgIF9ub3JtYWxpemVyID0gdmFycztcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgbm9ybWFsaXplciA9IHZhcnMgaW5zdGFuY2VvZiBPYnNlcnZlciA/IHZhcnMgOiBfZ2V0U2Nyb2xsTm9ybWFsaXplcih2YXJzKTtcbiAgX25vcm1hbGl6ZXIgJiYgX25vcm1hbGl6ZXIudGFyZ2V0ID09PSBub3JtYWxpemVyLnRhcmdldCAmJiBfbm9ybWFsaXplci5raWxsKCk7XG4gIF9pc1ZpZXdwb3J0KG5vcm1hbGl6ZXIudGFyZ2V0KSAmJiAoX25vcm1hbGl6ZXIgPSBub3JtYWxpemVyKTtcbiAgcmV0dXJuIG5vcm1hbGl6ZXI7XG59O1xuXG5TY3JvbGxUcmlnZ2VyLmNvcmUgPSB7XG4gIC8vIHNtYWxsZXIgZmlsZSBzaXplIHdheSB0byBsZXZlcmFnZSBpbiBTY3JvbGxTbW9vdGhlciBhbmQgT2JzZXJ2ZXJcbiAgX2dldFZlbG9jaXR5UHJvcDogX2dldFZlbG9jaXR5UHJvcCxcbiAgX2lucHV0T2JzZXJ2ZXI6IF9pbnB1dE9ic2VydmVyLFxuICBfc2Nyb2xsZXJzOiBfc2Nyb2xsZXJzLFxuICBfcHJveGllczogX3Byb3hpZXMsXG4gIGJyaWRnZToge1xuICAgIC8vIHdoZW4gbm9ybWFsaXplU2Nyb2xsIHNldHMgdGhlIHNjcm9sbCBwb3NpdGlvbiAoc3MgPSBzZXRTY3JvbGwpXG4gICAgc3M6IGZ1bmN0aW9uIHNzKCkge1xuICAgICAgX2xhc3RTY3JvbGxUaW1lIHx8IF9kaXNwYXRjaChcInNjcm9sbFN0YXJ0XCIpO1xuICAgICAgX2xhc3RTY3JvbGxUaW1lID0gX2dldFRpbWUoKTtcbiAgICB9LFxuICAgIC8vIGEgd2F5IHRvIGdldCB0aGUgX3JlZnJlc2hpbmcgdmFsdWUgaW4gT2JzZXJ2ZXJcbiAgICByZWY6IGZ1bmN0aW9uIHJlZigpIHtcbiAgICAgIHJldHVybiBfcmVmcmVzaGluZztcbiAgICB9XG4gIH1cbn07XG5fZ2V0R1NBUCgpICYmIGdzYXAucmVnaXN0ZXJQbHVnaW4oU2Nyb2xsVHJpZ2dlcik7XG5leHBvcnQgeyBTY3JvbGxUcmlnZ2VyIGFzIGRlZmF1bHQgfTsiLCJmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7IHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzOyBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbi8qIVxuICogR1NBUCAzLjEyLjVcbiAqIGh0dHBzOi8vZ3NhcC5jb21cbiAqXG4gKiBAbGljZW5zZSBDb3B5cmlnaHQgMjAwOC0yMDI0LCBHcmVlblNvY2suIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBTdWJqZWN0IHRvIHRoZSB0ZXJtcyBhdCBodHRwczovL2dzYXAuY29tL3N0YW5kYXJkLWxpY2Vuc2Ugb3IgZm9yXG4gKiBDbHViIEdTQVAgbWVtYmVycywgdGhlIGFncmVlbWVudCBpc3N1ZWQgd2l0aCB0aGF0IG1lbWJlcnNoaXAuXG4gKiBAYXV0aG9yOiBKYWNrIERveWxlLCBqYWNrQGdyZWVuc29jay5jb21cbiovXG5cbi8qIGVzbGludC1kaXNhYmxlICovXG52YXIgX2NvbmZpZyA9IHtcbiAgYXV0b1NsZWVwOiAxMjAsXG4gIGZvcmNlM0Q6IFwiYXV0b1wiLFxuICBudWxsVGFyZ2V0V2FybjogMSxcbiAgdW5pdHM6IHtcbiAgICBsaW5lSGVpZ2h0OiBcIlwiXG4gIH1cbn0sXG4gICAgX2RlZmF1bHRzID0ge1xuICBkdXJhdGlvbjogLjUsXG4gIG92ZXJ3cml0ZTogZmFsc2UsXG4gIGRlbGF5OiAwXG59LFxuICAgIF9zdXBwcmVzc092ZXJ3cml0ZXMsXG4gICAgX3JldmVydGluZyxcbiAgICBfY29udGV4dCxcbiAgICBfYmlnTnVtID0gMWU4LFxuICAgIF90aW55TnVtID0gMSAvIF9iaWdOdW0sXG4gICAgXzJQSSA9IE1hdGguUEkgKiAyLFxuICAgIF9IQUxGX1BJID0gXzJQSSAvIDQsXG4gICAgX2dzSUQgPSAwLFxuICAgIF9zcXJ0ID0gTWF0aC5zcXJ0LFxuICAgIF9jb3MgPSBNYXRoLmNvcyxcbiAgICBfc2luID0gTWF0aC5zaW4sXG4gICAgX2lzU3RyaW5nID0gZnVuY3Rpb24gX2lzU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCI7XG59LFxuICAgIF9pc0Z1bmN0aW9uID0gZnVuY3Rpb24gX2lzRnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiO1xufSxcbiAgICBfaXNOdW1iZXIgPSBmdW5jdGlvbiBfaXNOdW1iZXIodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIjtcbn0sXG4gICAgX2lzVW5kZWZpbmVkID0gZnVuY3Rpb24gX2lzVW5kZWZpbmVkKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwidW5kZWZpbmVkXCI7XG59LFxuICAgIF9pc09iamVjdCA9IGZ1bmN0aW9uIF9pc09iamVjdCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiO1xufSxcbiAgICBfaXNOb3RGYWxzZSA9IGZ1bmN0aW9uIF9pc05vdEZhbHNlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPT0gZmFsc2U7XG59LFxuICAgIF93aW5kb3dFeGlzdHMgPSBmdW5jdGlvbiBfd2luZG93RXhpc3RzKCkge1xuICByZXR1cm4gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIjtcbn0sXG4gICAgX2lzRnVuY09yU3RyaW5nID0gZnVuY3Rpb24gX2lzRnVuY09yU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBfaXNGdW5jdGlvbih2YWx1ZSkgfHwgX2lzU3RyaW5nKHZhbHVlKTtcbn0sXG4gICAgX2lzVHlwZWRBcnJheSA9IHR5cGVvZiBBcnJheUJ1ZmZlciA9PT0gXCJmdW5jdGlvblwiICYmIEFycmF5QnVmZmVyLmlzVmlldyB8fCBmdW5jdGlvbiAoKSB7fSxcbiAgICAvLyBub3RlOiBJRTEwIGhhcyBBcnJheUJ1ZmZlciwgYnV0IE5PVCBBcnJheUJ1ZmZlci5pc1ZpZXcoKS5cbl9pc0FycmF5ID0gQXJyYXkuaXNBcnJheSxcbiAgICBfc3RyaWN0TnVtRXhwID0gLyg/Oi0/XFwuP1xcZHxcXC4pKy9naSxcbiAgICAvL29ubHkgbnVtYmVycyAoaW5jbHVkaW5nIG5lZ2F0aXZlcyBhbmQgZGVjaW1hbHMpIGJ1dCBOT1QgcmVsYXRpdmUgdmFsdWVzLlxuX251bUV4cCA9IC9bLSs9Ll0qXFxkK1suZVxcLStdKlxcZCpbZVxcLStdKlxcZCovZyxcbiAgICAvL2ZpbmRzIGFueSBudW1iZXJzLCBpbmNsdWRpbmcgb25lcyB0aGF0IHN0YXJ0IHdpdGggKz0gb3IgLT0sIG5lZ2F0aXZlIG51bWJlcnMsIGFuZCBvbmVzIGluIHNjaWVudGlmaWMgbm90YXRpb24gbGlrZSAxZS04LlxuX251bVdpdGhVbml0RXhwID0gL1stKz0uXSpcXGQrWy5lLV0qXFxkKlthLXolXSovZyxcbiAgICBfY29tcGxleFN0cmluZ051bUV4cCA9IC9bLSs9Ll0qXFxkK1xcLj9cXGQqKD86ZS18ZVxcKyk/XFxkKi9naSxcbiAgICAvL2R1cGxpY2F0ZSBzbyB0aGF0IHdoaWxlIHdlJ3JlIGxvb3BpbmcgdGhyb3VnaCBtYXRjaGVzIGZyb20gZXhlYygpLCBpdCBkb2Vzbid0IGNvbnRhbWluYXRlIHRoZSBsYXN0SW5kZXggb2YgX251bUV4cCB3aGljaCB3ZSB1c2UgdG8gc2VhcmNoIGZvciBjb2xvcnMgdG9vLlxuX3JlbEV4cCA9IC9bKy1dPS0/Wy5cXGRdKy8sXG4gICAgX2RlbGltaXRlZFZhbHVlRXhwID0gL1teLCdcIlxcW1xcXVxcc10rL2dpLFxuICAgIC8vIHByZXZpb3VzbHkgL1sjXFwtKy5dKlxcYlthLXpcXGRcXC09KyUuXSsvZ2kgYnV0IGRpZG4ndCBjYXRjaCBzcGVjaWFsIGNoYXJhY3RlcnMuXG5fdW5pdEV4cCA9IC9eWytcXC09ZVxcc1xcZF0qXFxkK1suXFxkXSooW2Etel0qfCUpXFxzKiQvaSxcbiAgICBfZ2xvYmFsVGltZWxpbmUsXG4gICAgX3dpbixcbiAgICBfY29yZUluaXR0ZWQsXG4gICAgX2RvYyxcbiAgICBfZ2xvYmFscyA9IHt9LFxuICAgIF9pbnN0YWxsU2NvcGUgPSB7fSxcbiAgICBfY29yZVJlYWR5LFxuICAgIF9pbnN0YWxsID0gZnVuY3Rpb24gX2luc3RhbGwoc2NvcGUpIHtcbiAgcmV0dXJuIChfaW5zdGFsbFNjb3BlID0gX21lcmdlKHNjb3BlLCBfZ2xvYmFscykpICYmIGdzYXA7XG59LFxuICAgIF9taXNzaW5nUGx1Z2luID0gZnVuY3Rpb24gX21pc3NpbmdQbHVnaW4ocHJvcGVydHksIHZhbHVlKSB7XG4gIHJldHVybiBjb25zb2xlLndhcm4oXCJJbnZhbGlkIHByb3BlcnR5XCIsIHByb3BlcnR5LCBcInNldCB0b1wiLCB2YWx1ZSwgXCJNaXNzaW5nIHBsdWdpbj8gZ3NhcC5yZWdpc3RlclBsdWdpbigpXCIpO1xufSxcbiAgICBfd2FybiA9IGZ1bmN0aW9uIF93YXJuKG1lc3NhZ2UsIHN1cHByZXNzKSB7XG4gIHJldHVybiAhc3VwcHJlc3MgJiYgY29uc29sZS53YXJuKG1lc3NhZ2UpO1xufSxcbiAgICBfYWRkR2xvYmFsID0gZnVuY3Rpb24gX2FkZEdsb2JhbChuYW1lLCBvYmopIHtcbiAgcmV0dXJuIG5hbWUgJiYgKF9nbG9iYWxzW25hbWVdID0gb2JqKSAmJiBfaW5zdGFsbFNjb3BlICYmIChfaW5zdGFsbFNjb3BlW25hbWVdID0gb2JqKSB8fCBfZ2xvYmFscztcbn0sXG4gICAgX2VtcHR5RnVuYyA9IGZ1bmN0aW9uIF9lbXB0eUZ1bmMoKSB7XG4gIHJldHVybiAwO1xufSxcbiAgICBfc3RhcnRBdFJldmVydENvbmZpZyA9IHtcbiAgc3VwcHJlc3NFdmVudHM6IHRydWUsXG4gIGlzU3RhcnQ6IHRydWUsXG4gIGtpbGw6IGZhbHNlXG59LFxuICAgIF9yZXZlcnRDb25maWdOb0tpbGwgPSB7XG4gIHN1cHByZXNzRXZlbnRzOiB0cnVlLFxuICBraWxsOiBmYWxzZVxufSxcbiAgICBfcmV2ZXJ0Q29uZmlnID0ge1xuICBzdXBwcmVzc0V2ZW50czogdHJ1ZVxufSxcbiAgICBfcmVzZXJ2ZWRQcm9wcyA9IHt9LFxuICAgIF9sYXp5VHdlZW5zID0gW10sXG4gICAgX2xhenlMb29rdXAgPSB7fSxcbiAgICBfbGFzdFJlbmRlcmVkRnJhbWUsXG4gICAgX3BsdWdpbnMgPSB7fSxcbiAgICBfZWZmZWN0cyA9IHt9LFxuICAgIF9uZXh0R0NGcmFtZSA9IDMwLFxuICAgIF9oYXJuZXNzUGx1Z2lucyA9IFtdLFxuICAgIF9jYWxsYmFja05hbWVzID0gXCJcIixcbiAgICBfaGFybmVzcyA9IGZ1bmN0aW9uIF9oYXJuZXNzKHRhcmdldHMpIHtcbiAgdmFyIHRhcmdldCA9IHRhcmdldHNbMF0sXG4gICAgICBoYXJuZXNzUGx1Z2luLFxuICAgICAgaTtcbiAgX2lzT2JqZWN0KHRhcmdldCkgfHwgX2lzRnVuY3Rpb24odGFyZ2V0KSB8fCAodGFyZ2V0cyA9IFt0YXJnZXRzXSk7XG5cbiAgaWYgKCEoaGFybmVzc1BsdWdpbiA9ICh0YXJnZXQuX2dzYXAgfHwge30pLmhhcm5lc3MpKSB7XG4gICAgLy8gZmluZCB0aGUgZmlyc3QgdGFyZ2V0IHdpdGggYSBoYXJuZXNzLiBXZSBhc3N1bWUgdGFyZ2V0cyBwYXNzZWQgaW50byBhbiBhbmltYXRpb24gd2lsbCBiZSBvZiBzaW1pbGFyIHR5cGUsIG1lYW5pbmcgdGhlIHNhbWUga2luZCBvZiBoYXJuZXNzIGNhbiBiZSB1c2VkIGZvciB0aGVtIGFsbCAocGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uKVxuICAgIGkgPSBfaGFybmVzc1BsdWdpbnMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGktLSAmJiAhX2hhcm5lc3NQbHVnaW5zW2ldLnRhcmdldFRlc3QodGFyZ2V0KSkge31cblxuICAgIGhhcm5lc3NQbHVnaW4gPSBfaGFybmVzc1BsdWdpbnNbaV07XG4gIH1cblxuICBpID0gdGFyZ2V0cy5sZW5ndGg7XG5cbiAgd2hpbGUgKGktLSkge1xuICAgIHRhcmdldHNbaV0gJiYgKHRhcmdldHNbaV0uX2dzYXAgfHwgKHRhcmdldHNbaV0uX2dzYXAgPSBuZXcgR1NDYWNoZSh0YXJnZXRzW2ldLCBoYXJuZXNzUGx1Z2luKSkpIHx8IHRhcmdldHMuc3BsaWNlKGksIDEpO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldHM7XG59LFxuICAgIF9nZXRDYWNoZSA9IGZ1bmN0aW9uIF9nZXRDYWNoZSh0YXJnZXQpIHtcbiAgcmV0dXJuIHRhcmdldC5fZ3NhcCB8fCBfaGFybmVzcyh0b0FycmF5KHRhcmdldCkpWzBdLl9nc2FwO1xufSxcbiAgICBfZ2V0UHJvcGVydHkgPSBmdW5jdGlvbiBfZ2V0UHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSwgdikge1xuICByZXR1cm4gKHYgPSB0YXJnZXRbcHJvcGVydHldKSAmJiBfaXNGdW5jdGlvbih2KSA/IHRhcmdldFtwcm9wZXJ0eV0oKSA6IF9pc1VuZGVmaW5lZCh2KSAmJiB0YXJnZXQuZ2V0QXR0cmlidXRlICYmIHRhcmdldC5nZXRBdHRyaWJ1dGUocHJvcGVydHkpIHx8IHY7XG59LFxuICAgIF9mb3JFYWNoTmFtZSA9IGZ1bmN0aW9uIF9mb3JFYWNoTmFtZShuYW1lcywgZnVuYykge1xuICByZXR1cm4gKG5hbWVzID0gbmFtZXMuc3BsaXQoXCIsXCIpKS5mb3JFYWNoKGZ1bmMpIHx8IG5hbWVzO1xufSxcbiAgICAvL3NwbGl0IGEgY29tbWEtZGVsaW1pdGVkIGxpc3Qgb2YgbmFtZXMgaW50byBhbiBhcnJheSwgdGhlbiBydW4gYSBmb3JFYWNoKCkgZnVuY3Rpb24gYW5kIHJldHVybiB0aGUgc3BsaXQgYXJyYXkgKHRoaXMgaXMganVzdCBhIHdheSB0byBjb25zb2xpZGF0ZS9zaG9ydGVuIHNvbWUgY29kZSkuXG5fcm91bmQgPSBmdW5jdGlvbiBfcm91bmQodmFsdWUpIHtcbiAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUgKiAxMDAwMDApIC8gMTAwMDAwIHx8IDA7XG59LFxuICAgIF9yb3VuZFByZWNpc2UgPSBmdW5jdGlvbiBfcm91bmRQcmVjaXNlKHZhbHVlKSB7XG4gIHJldHVybiBNYXRoLnJvdW5kKHZhbHVlICogMTAwMDAwMDApIC8gMTAwMDAwMDAgfHwgMDtcbn0sXG4gICAgLy8gaW5jcmVhc2VkIHByZWNpc2lvbiBtb3N0bHkgZm9yIHRpbWluZyB2YWx1ZXMuXG5fcGFyc2VSZWxhdGl2ZSA9IGZ1bmN0aW9uIF9wYXJzZVJlbGF0aXZlKHN0YXJ0LCB2YWx1ZSkge1xuICB2YXIgb3BlcmF0b3IgPSB2YWx1ZS5jaGFyQXQoMCksXG4gICAgICBlbmQgPSBwYXJzZUZsb2F0KHZhbHVlLnN1YnN0cigyKSk7XG4gIHN0YXJ0ID0gcGFyc2VGbG9hdChzdGFydCk7XG4gIHJldHVybiBvcGVyYXRvciA9PT0gXCIrXCIgPyBzdGFydCArIGVuZCA6IG9wZXJhdG9yID09PSBcIi1cIiA/IHN0YXJ0IC0gZW5kIDogb3BlcmF0b3IgPT09IFwiKlwiID8gc3RhcnQgKiBlbmQgOiBzdGFydCAvIGVuZDtcbn0sXG4gICAgX2FycmF5Q29udGFpbnNBbnkgPSBmdW5jdGlvbiBfYXJyYXlDb250YWluc0FueSh0b1NlYXJjaCwgdG9GaW5kKSB7XG4gIC8vc2VhcmNoZXMgb25lIGFycmF5IHRvIGZpbmQgbWF0Y2hlcyBmb3IgYW55IG9mIHRoZSBpdGVtcyBpbiB0aGUgdG9GaW5kIGFycmF5LiBBcyBzb29uIGFzIG9uZSBpcyBmb3VuZCwgaXQgcmV0dXJucyB0cnVlLiBJdCBkb2VzIE5PVCByZXR1cm4gYWxsIHRoZSBtYXRjaGVzOyBpdCdzIHNpbXBseSBhIGJvb2xlYW4gc2VhcmNoLlxuICB2YXIgbCA9IHRvRmluZC5sZW5ndGgsXG4gICAgICBpID0gMDtcblxuICBmb3IgKDsgdG9TZWFyY2guaW5kZXhPZih0b0ZpbmRbaV0pIDwgMCAmJiArK2kgPCBsOykge31cblxuICByZXR1cm4gaSA8IGw7XG59LFxuICAgIF9sYXp5UmVuZGVyID0gZnVuY3Rpb24gX2xhenlSZW5kZXIoKSB7XG4gIHZhciBsID0gX2xhenlUd2VlbnMubGVuZ3RoLFxuICAgICAgYSA9IF9sYXp5VHdlZW5zLnNsaWNlKDApLFxuICAgICAgaSxcbiAgICAgIHR3ZWVuO1xuXG4gIF9sYXp5TG9va3VwID0ge307XG4gIF9sYXp5VHdlZW5zLmxlbmd0aCA9IDA7XG5cbiAgZm9yIChpID0gMDsgaSA8IGw7IGkrKykge1xuICAgIHR3ZWVuID0gYVtpXTtcbiAgICB0d2VlbiAmJiB0d2Vlbi5fbGF6eSAmJiAodHdlZW4ucmVuZGVyKHR3ZWVuLl9sYXp5WzBdLCB0d2Vlbi5fbGF6eVsxXSwgdHJ1ZSkuX2xhenkgPSAwKTtcbiAgfVxufSxcbiAgICBfbGF6eVNhZmVSZW5kZXIgPSBmdW5jdGlvbiBfbGF6eVNhZmVSZW5kZXIoYW5pbWF0aW9uLCB0aW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpIHtcbiAgX2xhenlUd2VlbnMubGVuZ3RoICYmICFfcmV2ZXJ0aW5nICYmIF9sYXp5UmVuZGVyKCk7XG4gIGFuaW1hdGlvbi5yZW5kZXIodGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlIHx8IF9yZXZlcnRpbmcgJiYgdGltZSA8IDAgJiYgKGFuaW1hdGlvbi5faW5pdHRlZCB8fCBhbmltYXRpb24uX3N0YXJ0QXQpKTtcbiAgX2xhenlUd2VlbnMubGVuZ3RoICYmICFfcmV2ZXJ0aW5nICYmIF9sYXp5UmVuZGVyKCk7IC8vaW4gY2FzZSByZW5kZXJpbmcgY2F1c2VkIGFueSB0d2VlbnMgdG8gbGF6eS1pbml0LCB3ZSBzaG91bGQgcmVuZGVyIHRoZW0gYmVjYXVzZSB0eXBpY2FsbHkgd2hlbiBzb21lb25lIGNhbGxzIHNlZWsoKSBvciB0aW1lKCkgb3IgcHJvZ3Jlc3MoKSwgdGhleSBleHBlY3QgYW4gaW1tZWRpYXRlIHJlbmRlci5cbn0sXG4gICAgX251bWVyaWNJZlBvc3NpYmxlID0gZnVuY3Rpb24gX251bWVyaWNJZlBvc3NpYmxlKHZhbHVlKSB7XG4gIHZhciBuID0gcGFyc2VGbG9hdCh2YWx1ZSk7XG4gIHJldHVybiAobiB8fCBuID09PSAwKSAmJiAodmFsdWUgKyBcIlwiKS5tYXRjaChfZGVsaW1pdGVkVmFsdWVFeHApLmxlbmd0aCA8IDIgPyBuIDogX2lzU3RyaW5nKHZhbHVlKSA/IHZhbHVlLnRyaW0oKSA6IHZhbHVlO1xufSxcbiAgICBfcGFzc1Rocm91Z2ggPSBmdW5jdGlvbiBfcGFzc1Rocm91Z2gocCkge1xuICByZXR1cm4gcDtcbn0sXG4gICAgX3NldERlZmF1bHRzID0gZnVuY3Rpb24gX3NldERlZmF1bHRzKG9iaiwgZGVmYXVsdHMpIHtcbiAgZm9yICh2YXIgcCBpbiBkZWZhdWx0cykge1xuICAgIHAgaW4gb2JqIHx8IChvYmpbcF0gPSBkZWZhdWx0c1twXSk7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufSxcbiAgICBfc2V0S2V5ZnJhbWVEZWZhdWx0cyA9IGZ1bmN0aW9uIF9zZXRLZXlmcmFtZURlZmF1bHRzKGV4Y2x1ZGVEdXJhdGlvbikge1xuICByZXR1cm4gZnVuY3Rpb24gKG9iaiwgZGVmYXVsdHMpIHtcbiAgICBmb3IgKHZhciBwIGluIGRlZmF1bHRzKSB7XG4gICAgICBwIGluIG9iaiB8fCBwID09PSBcImR1cmF0aW9uXCIgJiYgZXhjbHVkZUR1cmF0aW9uIHx8IHAgPT09IFwiZWFzZVwiIHx8IChvYmpbcF0gPSBkZWZhdWx0c1twXSk7XG4gICAgfVxuICB9O1xufSxcbiAgICBfbWVyZ2UgPSBmdW5jdGlvbiBfbWVyZ2UoYmFzZSwgdG9NZXJnZSkge1xuICBmb3IgKHZhciBwIGluIHRvTWVyZ2UpIHtcbiAgICBiYXNlW3BdID0gdG9NZXJnZVtwXTtcbiAgfVxuXG4gIHJldHVybiBiYXNlO1xufSxcbiAgICBfbWVyZ2VEZWVwID0gZnVuY3Rpb24gX21lcmdlRGVlcChiYXNlLCB0b01lcmdlKSB7XG4gIGZvciAodmFyIHAgaW4gdG9NZXJnZSkge1xuICAgIHAgIT09IFwiX19wcm90b19fXCIgJiYgcCAhPT0gXCJjb25zdHJ1Y3RvclwiICYmIHAgIT09IFwicHJvdG90eXBlXCIgJiYgKGJhc2VbcF0gPSBfaXNPYmplY3QodG9NZXJnZVtwXSkgPyBfbWVyZ2VEZWVwKGJhc2VbcF0gfHwgKGJhc2VbcF0gPSB7fSksIHRvTWVyZ2VbcF0pIDogdG9NZXJnZVtwXSk7XG4gIH1cblxuICByZXR1cm4gYmFzZTtcbn0sXG4gICAgX2NvcHlFeGNsdWRpbmcgPSBmdW5jdGlvbiBfY29weUV4Y2x1ZGluZyhvYmosIGV4Y2x1ZGluZykge1xuICB2YXIgY29weSA9IHt9LFxuICAgICAgcDtcblxuICBmb3IgKHAgaW4gb2JqKSB7XG4gICAgcCBpbiBleGNsdWRpbmcgfHwgKGNvcHlbcF0gPSBvYmpbcF0pO1xuICB9XG5cbiAgcmV0dXJuIGNvcHk7XG59LFxuICAgIF9pbmhlcml0RGVmYXVsdHMgPSBmdW5jdGlvbiBfaW5oZXJpdERlZmF1bHRzKHZhcnMpIHtcbiAgdmFyIHBhcmVudCA9IHZhcnMucGFyZW50IHx8IF9nbG9iYWxUaW1lbGluZSxcbiAgICAgIGZ1bmMgPSB2YXJzLmtleWZyYW1lcyA/IF9zZXRLZXlmcmFtZURlZmF1bHRzKF9pc0FycmF5KHZhcnMua2V5ZnJhbWVzKSkgOiBfc2V0RGVmYXVsdHM7XG5cbiAgaWYgKF9pc05vdEZhbHNlKHZhcnMuaW5oZXJpdCkpIHtcbiAgICB3aGlsZSAocGFyZW50KSB7XG4gICAgICBmdW5jKHZhcnMsIHBhcmVudC52YXJzLmRlZmF1bHRzKTtcbiAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQgfHwgcGFyZW50Ll9kcDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdmFycztcbn0sXG4gICAgX2FycmF5c01hdGNoID0gZnVuY3Rpb24gX2FycmF5c01hdGNoKGExLCBhMikge1xuICB2YXIgaSA9IGExLmxlbmd0aCxcbiAgICAgIG1hdGNoID0gaSA9PT0gYTIubGVuZ3RoO1xuXG4gIHdoaWxlIChtYXRjaCAmJiBpLS0gJiYgYTFbaV0gPT09IGEyW2ldKSB7fVxuXG4gIHJldHVybiBpIDwgMDtcbn0sXG4gICAgX2FkZExpbmtlZExpc3RJdGVtID0gZnVuY3Rpb24gX2FkZExpbmtlZExpc3RJdGVtKHBhcmVudCwgY2hpbGQsIGZpcnN0UHJvcCwgbGFzdFByb3AsIHNvcnRCeSkge1xuICBpZiAoZmlyc3RQcm9wID09PSB2b2lkIDApIHtcbiAgICBmaXJzdFByb3AgPSBcIl9maXJzdFwiO1xuICB9XG5cbiAgaWYgKGxhc3RQcm9wID09PSB2b2lkIDApIHtcbiAgICBsYXN0UHJvcCA9IFwiX2xhc3RcIjtcbiAgfVxuXG4gIHZhciBwcmV2ID0gcGFyZW50W2xhc3RQcm9wXSxcbiAgICAgIHQ7XG5cbiAgaWYgKHNvcnRCeSkge1xuICAgIHQgPSBjaGlsZFtzb3J0QnldO1xuXG4gICAgd2hpbGUgKHByZXYgJiYgcHJldltzb3J0QnldID4gdCkge1xuICAgICAgcHJldiA9IHByZXYuX3ByZXY7XG4gICAgfVxuICB9XG5cbiAgaWYgKHByZXYpIHtcbiAgICBjaGlsZC5fbmV4dCA9IHByZXYuX25leHQ7XG4gICAgcHJldi5fbmV4dCA9IGNoaWxkO1xuICB9IGVsc2Uge1xuICAgIGNoaWxkLl9uZXh0ID0gcGFyZW50W2ZpcnN0UHJvcF07XG4gICAgcGFyZW50W2ZpcnN0UHJvcF0gPSBjaGlsZDtcbiAgfVxuXG4gIGlmIChjaGlsZC5fbmV4dCkge1xuICAgIGNoaWxkLl9uZXh0Ll9wcmV2ID0gY2hpbGQ7XG4gIH0gZWxzZSB7XG4gICAgcGFyZW50W2xhc3RQcm9wXSA9IGNoaWxkO1xuICB9XG5cbiAgY2hpbGQuX3ByZXYgPSBwcmV2O1xuICBjaGlsZC5wYXJlbnQgPSBjaGlsZC5fZHAgPSBwYXJlbnQ7XG4gIHJldHVybiBjaGlsZDtcbn0sXG4gICAgX3JlbW92ZUxpbmtlZExpc3RJdGVtID0gZnVuY3Rpb24gX3JlbW92ZUxpbmtlZExpc3RJdGVtKHBhcmVudCwgY2hpbGQsIGZpcnN0UHJvcCwgbGFzdFByb3ApIHtcbiAgaWYgKGZpcnN0UHJvcCA9PT0gdm9pZCAwKSB7XG4gICAgZmlyc3RQcm9wID0gXCJfZmlyc3RcIjtcbiAgfVxuXG4gIGlmIChsYXN0UHJvcCA9PT0gdm9pZCAwKSB7XG4gICAgbGFzdFByb3AgPSBcIl9sYXN0XCI7XG4gIH1cblxuICB2YXIgcHJldiA9IGNoaWxkLl9wcmV2LFxuICAgICAgbmV4dCA9IGNoaWxkLl9uZXh0O1xuXG4gIGlmIChwcmV2KSB7XG4gICAgcHJldi5fbmV4dCA9IG5leHQ7XG4gIH0gZWxzZSBpZiAocGFyZW50W2ZpcnN0UHJvcF0gPT09IGNoaWxkKSB7XG4gICAgcGFyZW50W2ZpcnN0UHJvcF0gPSBuZXh0O1xuICB9XG5cbiAgaWYgKG5leHQpIHtcbiAgICBuZXh0Ll9wcmV2ID0gcHJldjtcbiAgfSBlbHNlIGlmIChwYXJlbnRbbGFzdFByb3BdID09PSBjaGlsZCkge1xuICAgIHBhcmVudFtsYXN0UHJvcF0gPSBwcmV2O1xuICB9XG5cbiAgY2hpbGQuX25leHQgPSBjaGlsZC5fcHJldiA9IGNoaWxkLnBhcmVudCA9IG51bGw7IC8vIGRvbid0IGRlbGV0ZSB0aGUgX2RwIGp1c3Qgc28gd2UgY2FuIHJldmVydCBpZiBuZWNlc3NhcnkuIEJ1dCBwYXJlbnQgc2hvdWxkIGJlIG51bGwgdG8gaW5kaWNhdGUgdGhlIGl0ZW0gaXNuJ3QgaW4gYSBsaW5rZWQgbGlzdC5cbn0sXG4gICAgX3JlbW92ZUZyb21QYXJlbnQgPSBmdW5jdGlvbiBfcmVtb3ZlRnJvbVBhcmVudChjaGlsZCwgb25seUlmUGFyZW50SGFzQXV0b1JlbW92ZSkge1xuICBjaGlsZC5wYXJlbnQgJiYgKCFvbmx5SWZQYXJlbnRIYXNBdXRvUmVtb3ZlIHx8IGNoaWxkLnBhcmVudC5hdXRvUmVtb3ZlQ2hpbGRyZW4pICYmIGNoaWxkLnBhcmVudC5yZW1vdmUgJiYgY2hpbGQucGFyZW50LnJlbW92ZShjaGlsZCk7XG4gIGNoaWxkLl9hY3QgPSAwO1xufSxcbiAgICBfdW5jYWNoZSA9IGZ1bmN0aW9uIF91bmNhY2hlKGFuaW1hdGlvbiwgY2hpbGQpIHtcbiAgaWYgKGFuaW1hdGlvbiAmJiAoIWNoaWxkIHx8IGNoaWxkLl9lbmQgPiBhbmltYXRpb24uX2R1ciB8fCBjaGlsZC5fc3RhcnQgPCAwKSkge1xuICAgIC8vIHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbjogaWYgYSBjaGlsZCBhbmltYXRpb24gaXMgcGFzc2VkIGluIHdlIHNob3VsZCBvbmx5IHVuY2FjaGUgaWYgdGhhdCBjaGlsZCBFWFRFTkRTIHRoZSBhbmltYXRpb24gKGl0cyBlbmQgdGltZSBpcyBiZXlvbmQgdGhlIGVuZClcbiAgICB2YXIgYSA9IGFuaW1hdGlvbjtcblxuICAgIHdoaWxlIChhKSB7XG4gICAgICBhLl9kaXJ0eSA9IDE7XG4gICAgICBhID0gYS5wYXJlbnQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGFuaW1hdGlvbjtcbn0sXG4gICAgX3JlY2FjaGVBbmNlc3RvcnMgPSBmdW5jdGlvbiBfcmVjYWNoZUFuY2VzdG9ycyhhbmltYXRpb24pIHtcbiAgdmFyIHBhcmVudCA9IGFuaW1hdGlvbi5wYXJlbnQ7XG5cbiAgd2hpbGUgKHBhcmVudCAmJiBwYXJlbnQucGFyZW50KSB7XG4gICAgLy9zb21ldGltZXMgd2UgbXVzdCBmb3JjZSBhIHJlLXNvcnQgb2YgYWxsIGNoaWxkcmVuIGFuZCB1cGRhdGUgdGhlIGR1cmF0aW9uL3RvdGFsRHVyYXRpb24gb2YgYWxsIGFuY2VzdG9yIHRpbWVsaW5lcyBpbW1lZGlhdGVseSBpbiBjYXNlLCBmb3IgZXhhbXBsZSwgaW4gdGhlIG1pZGRsZSBvZiBhIHJlbmRlciBsb29wLCBvbmUgdHdlZW4gYWx0ZXJzIGFub3RoZXIgdHdlZW4ncyB0aW1lU2NhbGUgd2hpY2ggc2hvdmVzIGl0cyBzdGFydFRpbWUgYmVmb3JlIDAsIGZvcmNpbmcgdGhlIHBhcmVudCB0aW1lbGluZSB0byBzaGlmdCBhcm91bmQgYW5kIHNoaWZ0Q2hpbGRyZW4oKSB3aGljaCBjb3VsZCBhZmZlY3QgdGhhdCBuZXh0IHR3ZWVuJ3MgcmVuZGVyIChzdGFydFRpbWUpLiBEb2Vzbid0IG1hdHRlciBmb3IgdGhlIHJvb3QgdGltZWxpbmUgdGhvdWdoLlxuICAgIHBhcmVudC5fZGlydHkgPSAxO1xuICAgIHBhcmVudC50b3RhbER1cmF0aW9uKCk7XG4gICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcbiAgfVxuXG4gIHJldHVybiBhbmltYXRpb247XG59LFxuICAgIF9yZXdpbmRTdGFydEF0ID0gZnVuY3Rpb24gX3Jld2luZFN0YXJ0QXQodHdlZW4sIHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKSB7XG4gIHJldHVybiB0d2Vlbi5fc3RhcnRBdCAmJiAoX3JldmVydGluZyA/IHR3ZWVuLl9zdGFydEF0LnJldmVydChfcmV2ZXJ0Q29uZmlnTm9LaWxsKSA6IHR3ZWVuLnZhcnMuaW1tZWRpYXRlUmVuZGVyICYmICF0d2Vlbi52YXJzLmF1dG9SZXZlcnQgfHwgdHdlZW4uX3N0YXJ0QXQucmVuZGVyKHRvdGFsVGltZSwgdHJ1ZSwgZm9yY2UpKTtcbn0sXG4gICAgX2hhc05vUGF1c2VkQW5jZXN0b3JzID0gZnVuY3Rpb24gX2hhc05vUGF1c2VkQW5jZXN0b3JzKGFuaW1hdGlvbikge1xuICByZXR1cm4gIWFuaW1hdGlvbiB8fCBhbmltYXRpb24uX3RzICYmIF9oYXNOb1BhdXNlZEFuY2VzdG9ycyhhbmltYXRpb24ucGFyZW50KTtcbn0sXG4gICAgX2VsYXBzZWRDeWNsZUR1cmF0aW9uID0gZnVuY3Rpb24gX2VsYXBzZWRDeWNsZUR1cmF0aW9uKGFuaW1hdGlvbikge1xuICByZXR1cm4gYW5pbWF0aW9uLl9yZXBlYXQgPyBfYW5pbWF0aW9uQ3ljbGUoYW5pbWF0aW9uLl90VGltZSwgYW5pbWF0aW9uID0gYW5pbWF0aW9uLmR1cmF0aW9uKCkgKyBhbmltYXRpb24uX3JEZWxheSkgKiBhbmltYXRpb24gOiAwO1xufSxcbiAgICAvLyBmZWVkIGluIHRoZSB0b3RhbFRpbWUgYW5kIGN5Y2xlRHVyYXRpb24gYW5kIGl0J2xsIHJldHVybiB0aGUgY3ljbGUgKGl0ZXJhdGlvbiBtaW51cyAxKSBhbmQgaWYgdGhlIHBsYXloZWFkIGlzIGV4YWN0bHkgYXQgdGhlIHZlcnkgRU5ELCBpdCB3aWxsIE5PVCBidW1wIHVwIHRvIHRoZSBuZXh0IGN5Y2xlLlxuX2FuaW1hdGlvbkN5Y2xlID0gZnVuY3Rpb24gX2FuaW1hdGlvbkN5Y2xlKHRUaW1lLCBjeWNsZUR1cmF0aW9uKSB7XG4gIHZhciB3aG9sZSA9IE1hdGguZmxvb3IodFRpbWUgLz0gY3ljbGVEdXJhdGlvbik7XG4gIHJldHVybiB0VGltZSAmJiB3aG9sZSA9PT0gdFRpbWUgPyB3aG9sZSAtIDEgOiB3aG9sZTtcbn0sXG4gICAgX3BhcmVudFRvQ2hpbGRUb3RhbFRpbWUgPSBmdW5jdGlvbiBfcGFyZW50VG9DaGlsZFRvdGFsVGltZShwYXJlbnRUaW1lLCBjaGlsZCkge1xuICByZXR1cm4gKHBhcmVudFRpbWUgLSBjaGlsZC5fc3RhcnQpICogY2hpbGQuX3RzICsgKGNoaWxkLl90cyA+PSAwID8gMCA6IGNoaWxkLl9kaXJ0eSA/IGNoaWxkLnRvdGFsRHVyYXRpb24oKSA6IGNoaWxkLl90RHVyKTtcbn0sXG4gICAgX3NldEVuZCA9IGZ1bmN0aW9uIF9zZXRFbmQoYW5pbWF0aW9uKSB7XG4gIHJldHVybiBhbmltYXRpb24uX2VuZCA9IF9yb3VuZFByZWNpc2UoYW5pbWF0aW9uLl9zdGFydCArIChhbmltYXRpb24uX3REdXIgLyBNYXRoLmFicyhhbmltYXRpb24uX3RzIHx8IGFuaW1hdGlvbi5fcnRzIHx8IF90aW55TnVtKSB8fCAwKSk7XG59LFxuICAgIF9hbGlnblBsYXloZWFkID0gZnVuY3Rpb24gX2FsaWduUGxheWhlYWQoYW5pbWF0aW9uLCB0b3RhbFRpbWUpIHtcbiAgLy8gYWRqdXN0cyB0aGUgYW5pbWF0aW9uJ3MgX3N0YXJ0IGFuZCBfZW5kIGFjY29yZGluZyB0byB0aGUgcHJvdmlkZWQgdG90YWxUaW1lIChvbmx5IGlmIHRoZSBwYXJlbnQncyBzbW9vdGhDaGlsZFRpbWluZyBpcyB0cnVlIGFuZCB0aGUgYW5pbWF0aW9uIGlzbid0IHBhdXNlZCkuIEl0IGRvZXNuJ3QgZG8gYW55IHJlbmRlcmluZyBvciBmb3JjaW5nIHRoaW5ncyBiYWNrIGludG8gcGFyZW50IHRpbWVsaW5lcywgZXRjLiAtIHRoYXQncyB3aGF0IHRvdGFsVGltZSgpIGlzIGZvci5cbiAgdmFyIHBhcmVudCA9IGFuaW1hdGlvbi5fZHA7XG5cbiAgaWYgKHBhcmVudCAmJiBwYXJlbnQuc21vb3RoQ2hpbGRUaW1pbmcgJiYgYW5pbWF0aW9uLl90cykge1xuICAgIGFuaW1hdGlvbi5fc3RhcnQgPSBfcm91bmRQcmVjaXNlKHBhcmVudC5fdGltZSAtIChhbmltYXRpb24uX3RzID4gMCA/IHRvdGFsVGltZSAvIGFuaW1hdGlvbi5fdHMgOiAoKGFuaW1hdGlvbi5fZGlydHkgPyBhbmltYXRpb24udG90YWxEdXJhdGlvbigpIDogYW5pbWF0aW9uLl90RHVyKSAtIHRvdGFsVGltZSkgLyAtYW5pbWF0aW9uLl90cykpO1xuXG4gICAgX3NldEVuZChhbmltYXRpb24pO1xuXG4gICAgcGFyZW50Ll9kaXJ0eSB8fCBfdW5jYWNoZShwYXJlbnQsIGFuaW1hdGlvbik7IC8vZm9yIHBlcmZvcm1hbmNlIGltcHJvdmVtZW50LiBJZiB0aGUgcGFyZW50J3MgY2FjaGUgaXMgYWxyZWFkeSBkaXJ0eSwgaXQgYWxyZWFkeSB0b29rIGNhcmUgb2YgbWFya2luZyB0aGUgYW5jZXN0b3JzIGFzIGRpcnR5IHRvbywgc28gc2tpcCB0aGUgZnVuY3Rpb24gY2FsbCBoZXJlLlxuICB9XG5cbiAgcmV0dXJuIGFuaW1hdGlvbjtcbn0sXG5cbi8qXG5fdG90YWxUaW1lVG9UaW1lID0gKGNsYW1wZWRUb3RhbFRpbWUsIGR1cmF0aW9uLCByZXBlYXQsIHJlcGVhdERlbGF5LCB5b3lvKSA9PiB7XG5cdGxldCBjeWNsZUR1cmF0aW9uID0gZHVyYXRpb24gKyByZXBlYXREZWxheSxcblx0XHR0aW1lID0gX3JvdW5kKGNsYW1wZWRUb3RhbFRpbWUgJSBjeWNsZUR1cmF0aW9uKTtcblx0aWYgKHRpbWUgPiBkdXJhdGlvbikge1xuXHRcdHRpbWUgPSBkdXJhdGlvbjtcblx0fVxuXHRyZXR1cm4gKHlveW8gJiYgKH5+KGNsYW1wZWRUb3RhbFRpbWUgLyBjeWNsZUR1cmF0aW9uKSAmIDEpKSA/IGR1cmF0aW9uIC0gdGltZSA6IHRpbWU7XG59LFxuKi9cbl9wb3N0QWRkQ2hlY2tzID0gZnVuY3Rpb24gX3Bvc3RBZGRDaGVja3ModGltZWxpbmUsIGNoaWxkKSB7XG4gIHZhciB0O1xuXG4gIGlmIChjaGlsZC5fdGltZSB8fCAhY2hpbGQuX2R1ciAmJiBjaGlsZC5faW5pdHRlZCB8fCBjaGlsZC5fc3RhcnQgPCB0aW1lbGluZS5fdGltZSAmJiAoY2hpbGQuX2R1ciB8fCAhY2hpbGQuYWRkKSkge1xuICAgIC8vIGluIGNhc2UsIGZvciBleGFtcGxlLCB0aGUgX3N0YXJ0IGlzIG1vdmVkIG9uIGEgdHdlZW4gdGhhdCBoYXMgYWxyZWFkeSByZW5kZXJlZCwgb3IgaWYgaXQncyBiZWluZyBpbnNlcnRlZCBpbnRvIGEgdGltZWxpbmUgQkVGT1JFIHdoZXJlIHRoZSBwbGF5aGVhZCBpcyBjdXJyZW50bHkuIEltYWdpbmUgaXQncyBhdCBpdHMgZW5kIHN0YXRlLCB0aGVuIHRoZSBzdGFydFRpbWUgaXMgbW92ZWQgV0FZIGxhdGVyIChhZnRlciB0aGUgZW5kIG9mIHRoaXMgdGltZWxpbmUpLCBpdCBzaG91bGQgcmVuZGVyIGF0IGl0cyBiZWdpbm5pbmcuIFNwZWNpYWwgY2FzZTogaWYgaXQncyBhIHRpbWVsaW5lIChoYXMgLmFkZCgpIG1ldGhvZCkgYW5kIG5vIGR1cmF0aW9uLCB3ZSBjYW4gc2tpcCByZW5kZXJpbmcgYmVjYXVzZSB0aGUgdXNlciBtYXkgYmUgcG9wdWxhdGluZyBpdCBBRlRFUiBhZGRpbmcgaXQgdG8gYSBwYXJlbnQgdGltZWxpbmUgKHVuY29udmVudGlvbmFsLCBidXQgcG9zc2libGUsIGFuZCB3ZSB3b3VsZG4ndCB3YW50IGl0IHRvIGdldCByZW1vdmVkIGlmIHRoZSBwYXJlbnQncyBhdXRvUmVtb3ZlQ2hpbGRyZW4gaXMgdHJ1ZSkuXG4gICAgdCA9IF9wYXJlbnRUb0NoaWxkVG90YWxUaW1lKHRpbWVsaW5lLnJhd1RpbWUoKSwgY2hpbGQpO1xuXG4gICAgaWYgKCFjaGlsZC5fZHVyIHx8IF9jbGFtcCgwLCBjaGlsZC50b3RhbER1cmF0aW9uKCksIHQpIC0gY2hpbGQuX3RUaW1lID4gX3RpbnlOdW0pIHtcbiAgICAgIGNoaWxkLnJlbmRlcih0LCB0cnVlKTtcbiAgICB9XG4gIH0gLy9pZiB0aGUgdGltZWxpbmUgaGFzIGFscmVhZHkgZW5kZWQgYnV0IHRoZSBpbnNlcnRlZCB0d2Vlbi90aW1lbGluZSBleHRlbmRzIHRoZSBkdXJhdGlvbiwgd2Ugc2hvdWxkIGVuYWJsZSB0aGlzIHRpbWVsaW5lIGFnYWluIHNvIHRoYXQgaXQgcmVuZGVycyBwcm9wZXJseS4gV2Ugc2hvdWxkIGFsc28gYWxpZ24gdGhlIHBsYXloZWFkIHdpdGggdGhlIHBhcmVudCB0aW1lbGluZSdzIHdoZW4gYXBwcm9wcmlhdGUuXG5cblxuICBpZiAoX3VuY2FjaGUodGltZWxpbmUsIGNoaWxkKS5fZHAgJiYgdGltZWxpbmUuX2luaXR0ZWQgJiYgdGltZWxpbmUuX3RpbWUgPj0gdGltZWxpbmUuX2R1ciAmJiB0aW1lbGluZS5fdHMpIHtcbiAgICAvL2luIGNhc2UgYW55IG9mIHRoZSBhbmNlc3RvcnMgaGFkIGNvbXBsZXRlZCBidXQgc2hvdWxkIG5vdyBiZSBlbmFibGVkLi4uXG4gICAgaWYgKHRpbWVsaW5lLl9kdXIgPCB0aW1lbGluZS5kdXJhdGlvbigpKSB7XG4gICAgICB0ID0gdGltZWxpbmU7XG5cbiAgICAgIHdoaWxlICh0Ll9kcCkge1xuICAgICAgICB0LnJhd1RpbWUoKSA+PSAwICYmIHQudG90YWxUaW1lKHQuX3RUaW1lKTsgLy9tb3ZlcyB0aGUgdGltZWxpbmUgKHNoaWZ0cyBpdHMgc3RhcnRUaW1lKSBpZiBuZWNlc3NhcnksIGFuZCBhbHNvIGVuYWJsZXMgaXQuIElmIGl0J3MgY3VycmVudGx5IHplcm8sIHRob3VnaCwgaXQgbWF5IG5vdCBiZSBzY2hlZHVsZWQgdG8gcmVuZGVyIHVudGlsIGxhdGVyIHNvIHRoZXJlJ3Mgbm8gbmVlZCB0byBmb3JjZSBpdCB0byBhbGlnbiB3aXRoIHRoZSBjdXJyZW50IHBsYXloZWFkIHBvc2l0aW9uLiBPbmx5IG1vdmUgdG8gY2F0Y2ggdXAgd2l0aCB0aGUgcGxheWhlYWQuXG5cbiAgICAgICAgdCA9IHQuX2RwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRpbWVsaW5lLl96VGltZSA9IC1fdGlueU51bTsgLy8gaGVscHMgZW5zdXJlIHRoYXQgdGhlIG5leHQgcmVuZGVyKCkgd2lsbCBiZSBmb3JjZWQgKGNyb3NzaW5nU3RhcnQgPSB0cnVlIGluIHJlbmRlcigpKSwgZXZlbiBpZiB0aGUgZHVyYXRpb24gaGFzbid0IGNoYW5nZWQgKHdlJ3JlIGFkZGluZyBhIGNoaWxkIHdoaWNoIHdvdWxkIG5lZWQgdG8gZ2V0IHJlbmRlcmVkKS4gRGVmaW5pdGVseSBhbiBlZGdlIGNhc2UuIE5vdGU6IHdlIE1VU1QgZG8gdGhpcyBBRlRFUiB0aGUgbG9vcCBhYm92ZSB3aGVyZSB0aGUgdG90YWxUaW1lKCkgbWlnaHQgdHJpZ2dlciBhIHJlbmRlcigpIGJlY2F1c2UgdGhpcyBfYWRkVG9UaW1lbGluZSgpIG1ldGhvZCBnZXRzIGNhbGxlZCBmcm9tIHRoZSBBbmltYXRpb24gY29uc3RydWN0b3IsIEJFRk9SRSB0d2VlbnMgZXZlbiByZWNvcmQgdGhlaXIgdGFyZ2V0cywgZXRjLiBzbyB3ZSB3b3VsZG4ndCB3YW50IHRoaW5ncyB0byBnZXQgdHJpZ2dlcmVkIGluIHRoZSB3cm9uZyBvcmRlci5cbiAgfVxufSxcbiAgICBfYWRkVG9UaW1lbGluZSA9IGZ1bmN0aW9uIF9hZGRUb1RpbWVsaW5lKHRpbWVsaW5lLCBjaGlsZCwgcG9zaXRpb24sIHNraXBDaGVja3MpIHtcbiAgY2hpbGQucGFyZW50ICYmIF9yZW1vdmVGcm9tUGFyZW50KGNoaWxkKTtcbiAgY2hpbGQuX3N0YXJ0ID0gX3JvdW5kUHJlY2lzZSgoX2lzTnVtYmVyKHBvc2l0aW9uKSA/IHBvc2l0aW9uIDogcG9zaXRpb24gfHwgdGltZWxpbmUgIT09IF9nbG9iYWxUaW1lbGluZSA/IF9wYXJzZVBvc2l0aW9uKHRpbWVsaW5lLCBwb3NpdGlvbiwgY2hpbGQpIDogdGltZWxpbmUuX3RpbWUpICsgY2hpbGQuX2RlbGF5KTtcbiAgY2hpbGQuX2VuZCA9IF9yb3VuZFByZWNpc2UoY2hpbGQuX3N0YXJ0ICsgKGNoaWxkLnRvdGFsRHVyYXRpb24oKSAvIE1hdGguYWJzKGNoaWxkLnRpbWVTY2FsZSgpKSB8fCAwKSk7XG5cbiAgX2FkZExpbmtlZExpc3RJdGVtKHRpbWVsaW5lLCBjaGlsZCwgXCJfZmlyc3RcIiwgXCJfbGFzdFwiLCB0aW1lbGluZS5fc29ydCA/IFwiX3N0YXJ0XCIgOiAwKTtcblxuICBfaXNGcm9tT3JGcm9tU3RhcnQoY2hpbGQpIHx8ICh0aW1lbGluZS5fcmVjZW50ID0gY2hpbGQpO1xuICBza2lwQ2hlY2tzIHx8IF9wb3N0QWRkQ2hlY2tzKHRpbWVsaW5lLCBjaGlsZCk7XG4gIHRpbWVsaW5lLl90cyA8IDAgJiYgX2FsaWduUGxheWhlYWQodGltZWxpbmUsIHRpbWVsaW5lLl90VGltZSk7IC8vIGlmIHRoZSB0aW1lbGluZSBpcyByZXZlcnNlZCBhbmQgdGhlIG5ldyBjaGlsZCBtYWtlcyBpdCBsb25nZXIsIHdlIG1heSBuZWVkIHRvIGFkanVzdCB0aGUgcGFyZW50J3MgX3N0YXJ0IChwdXNoIGl0IGJhY2spXG5cbiAgcmV0dXJuIHRpbWVsaW5lO1xufSxcbiAgICBfc2Nyb2xsVHJpZ2dlciA9IGZ1bmN0aW9uIF9zY3JvbGxUcmlnZ2VyKGFuaW1hdGlvbiwgdHJpZ2dlcikge1xuICByZXR1cm4gKF9nbG9iYWxzLlNjcm9sbFRyaWdnZXIgfHwgX21pc3NpbmdQbHVnaW4oXCJzY3JvbGxUcmlnZ2VyXCIsIHRyaWdnZXIpKSAmJiBfZ2xvYmFscy5TY3JvbGxUcmlnZ2VyLmNyZWF0ZSh0cmlnZ2VyLCBhbmltYXRpb24pO1xufSxcbiAgICBfYXR0ZW1wdEluaXRUd2VlbiA9IGZ1bmN0aW9uIF9hdHRlbXB0SW5pdFR3ZWVuKHR3ZWVuLCB0aW1lLCBmb3JjZSwgc3VwcHJlc3NFdmVudHMsIHRUaW1lKSB7XG4gIF9pbml0VHdlZW4odHdlZW4sIHRpbWUsIHRUaW1lKTtcblxuICBpZiAoIXR3ZWVuLl9pbml0dGVkKSB7XG4gICAgcmV0dXJuIDE7XG4gIH1cblxuICBpZiAoIWZvcmNlICYmIHR3ZWVuLl9wdCAmJiAhX3JldmVydGluZyAmJiAodHdlZW4uX2R1ciAmJiB0d2Vlbi52YXJzLmxhenkgIT09IGZhbHNlIHx8ICF0d2Vlbi5fZHVyICYmIHR3ZWVuLnZhcnMubGF6eSkgJiYgX2xhc3RSZW5kZXJlZEZyYW1lICE9PSBfdGlja2VyLmZyYW1lKSB7XG4gICAgX2xhenlUd2VlbnMucHVzaCh0d2Vlbik7XG5cbiAgICB0d2Vlbi5fbGF6eSA9IFt0VGltZSwgc3VwcHJlc3NFdmVudHNdO1xuICAgIHJldHVybiAxO1xuICB9XG59LFxuICAgIF9wYXJlbnRQbGF5aGVhZElzQmVmb3JlU3RhcnQgPSBmdW5jdGlvbiBfcGFyZW50UGxheWhlYWRJc0JlZm9yZVN0YXJ0KF9yZWYpIHtcbiAgdmFyIHBhcmVudCA9IF9yZWYucGFyZW50O1xuICByZXR1cm4gcGFyZW50ICYmIHBhcmVudC5fdHMgJiYgcGFyZW50Ll9pbml0dGVkICYmICFwYXJlbnQuX2xvY2sgJiYgKHBhcmVudC5yYXdUaW1lKCkgPCAwIHx8IF9wYXJlbnRQbGF5aGVhZElzQmVmb3JlU3RhcnQocGFyZW50KSk7XG59LFxuICAgIC8vIGNoZWNrIHBhcmVudCdzIF9sb2NrIGJlY2F1c2Ugd2hlbiBhIHRpbWVsaW5lIHJlcGVhdHMveW95b3MgYW5kIGRvZXMgaXRzIGFydGlmaWNpYWwgd3JhcHBpbmcsIHdlIHNob3VsZG4ndCBmb3JjZSB0aGUgcmF0aW8gYmFjayB0byAwXG5faXNGcm9tT3JGcm9tU3RhcnQgPSBmdW5jdGlvbiBfaXNGcm9tT3JGcm9tU3RhcnQoX3JlZjIpIHtcbiAgdmFyIGRhdGEgPSBfcmVmMi5kYXRhO1xuICByZXR1cm4gZGF0YSA9PT0gXCJpc0Zyb21TdGFydFwiIHx8IGRhdGEgPT09IFwiaXNTdGFydFwiO1xufSxcbiAgICBfcmVuZGVyWmVyb0R1cmF0aW9uVHdlZW4gPSBmdW5jdGlvbiBfcmVuZGVyWmVyb0R1cmF0aW9uVHdlZW4odHdlZW4sIHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKSB7XG4gIHZhciBwcmV2UmF0aW8gPSB0d2Vlbi5yYXRpbyxcbiAgICAgIHJhdGlvID0gdG90YWxUaW1lIDwgMCB8fCAhdG90YWxUaW1lICYmICghdHdlZW4uX3N0YXJ0ICYmIF9wYXJlbnRQbGF5aGVhZElzQmVmb3JlU3RhcnQodHdlZW4pICYmICEoIXR3ZWVuLl9pbml0dGVkICYmIF9pc0Zyb21PckZyb21TdGFydCh0d2VlbikpIHx8ICh0d2Vlbi5fdHMgPCAwIHx8IHR3ZWVuLl9kcC5fdHMgPCAwKSAmJiAhX2lzRnJvbU9yRnJvbVN0YXJ0KHR3ZWVuKSkgPyAwIDogMSxcbiAgICAgIC8vIGlmIHRoZSB0d2VlbiBvciBpdHMgcGFyZW50IGlzIHJldmVyc2VkIGFuZCB0aGUgdG90YWxUaW1lIGlzIDAsIHdlIHNob3VsZCBnbyB0byBhIHJhdGlvIG9mIDAuIEVkZ2UgY2FzZTogaWYgYSBmcm9tKCkgb3IgZnJvbVRvKCkgc3RhZ2dlciB0d2VlbiBpcyBwbGFjZWQgbGF0ZXIgaW4gYSB0aW1lbGluZSwgdGhlIFwic3RhcnRBdFwiIHplcm8tZHVyYXRpb24gdHdlZW4gY291bGQgaW5pdGlhbGx5IHJlbmRlciBhdCBhIHRpbWUgd2hlbiB0aGUgcGFyZW50IHRpbWVsaW5lJ3MgcGxheWhlYWQgaXMgdGVjaG5pY2FsbHkgQkVGT1JFIHdoZXJlIHRoaXMgdHdlZW4gaXMsIHNvIG1ha2Ugc3VyZSB0aGF0IGFueSBcImZyb21cIiBhbmQgXCJmcm9tVG9cIiBzdGFydEF0IHR3ZWVucyBhcmUgcmVuZGVyZWQgdGhlIGZpcnN0IHRpbWUgYXQgYSByYXRpbyBvZiAxLlxuICByZXBlYXREZWxheSA9IHR3ZWVuLl9yRGVsYXksXG4gICAgICB0VGltZSA9IDAsXG4gICAgICBwdCxcbiAgICAgIGl0ZXJhdGlvbixcbiAgICAgIHByZXZJdGVyYXRpb247XG5cbiAgaWYgKHJlcGVhdERlbGF5ICYmIHR3ZWVuLl9yZXBlYXQpIHtcbiAgICAvLyBpbiBjYXNlIHRoZXJlJ3MgYSB6ZXJvLWR1cmF0aW9uIHR3ZWVuIHRoYXQgaGFzIGEgcmVwZWF0IHdpdGggYSByZXBlYXREZWxheVxuICAgIHRUaW1lID0gX2NsYW1wKDAsIHR3ZWVuLl90RHVyLCB0b3RhbFRpbWUpO1xuICAgIGl0ZXJhdGlvbiA9IF9hbmltYXRpb25DeWNsZSh0VGltZSwgcmVwZWF0RGVsYXkpO1xuICAgIHR3ZWVuLl95b3lvICYmIGl0ZXJhdGlvbiAmIDEgJiYgKHJhdGlvID0gMSAtIHJhdGlvKTtcblxuICAgIGlmIChpdGVyYXRpb24gIT09IF9hbmltYXRpb25DeWNsZSh0d2Vlbi5fdFRpbWUsIHJlcGVhdERlbGF5KSkge1xuICAgICAgLy8gaWYgaXRlcmF0aW9uIGNoYW5nZWRcbiAgICAgIHByZXZSYXRpbyA9IDEgLSByYXRpbztcbiAgICAgIHR3ZWVuLnZhcnMucmVwZWF0UmVmcmVzaCAmJiB0d2Vlbi5faW5pdHRlZCAmJiB0d2Vlbi5pbnZhbGlkYXRlKCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHJhdGlvICE9PSBwcmV2UmF0aW8gfHwgX3JldmVydGluZyB8fCBmb3JjZSB8fCB0d2Vlbi5felRpbWUgPT09IF90aW55TnVtIHx8ICF0b3RhbFRpbWUgJiYgdHdlZW4uX3pUaW1lKSB7XG4gICAgaWYgKCF0d2Vlbi5faW5pdHRlZCAmJiBfYXR0ZW1wdEluaXRUd2Vlbih0d2VlbiwgdG90YWxUaW1lLCBmb3JjZSwgc3VwcHJlc3NFdmVudHMsIHRUaW1lKSkge1xuICAgICAgLy8gaWYgd2UgcmVuZGVyIHRoZSB2ZXJ5IGJlZ2lubmluZyAodGltZSA9PSAwKSBvZiBhIGZyb21UbygpLCB3ZSBtdXN0IGZvcmNlIHRoZSByZW5kZXIgKG5vcm1hbCB0d2VlbnMgd291bGRuJ3QgbmVlZCB0byByZW5kZXIgYXQgYSB0aW1lIG9mIDAgd2hlbiB0aGUgcHJldlRpbWUgd2FzIGFsc28gMCkuIFRoaXMgaXMgYWxzbyBtYW5kYXRvcnkgdG8gbWFrZSBzdXJlIG92ZXJ3cml0aW5nIGtpY2tzIGluIGltbWVkaWF0ZWx5LlxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHByZXZJdGVyYXRpb24gPSB0d2Vlbi5felRpbWU7XG4gICAgdHdlZW4uX3pUaW1lID0gdG90YWxUaW1lIHx8IChzdXBwcmVzc0V2ZW50cyA/IF90aW55TnVtIDogMCk7IC8vIHdoZW4gdGhlIHBsYXloZWFkIGFycml2ZXMgYXQgRVhBQ1RMWSB0aW1lIDAgKHJpZ2h0IG9uIHRvcCkgb2YgYSB6ZXJvLWR1cmF0aW9uIHR3ZWVuLCB3ZSBuZWVkIHRvIGRpc2Nlcm4gaWYgZXZlbnRzIGFyZSBzdXBwcmVzc2VkIHNvIHRoYXQgd2hlbiB0aGUgcGxheWhlYWQgbW92ZXMgYWdhaW4gKG5leHQgdGltZSksIGl0J2xsIHRyaWdnZXIgdGhlIGNhbGxiYWNrLiBJZiBldmVudHMgYXJlIE5PVCBzdXBwcmVzc2VkLCBvYnZpb3VzbHkgdGhlIGNhbGxiYWNrIHdvdWxkIGJlIHRyaWdnZXJlZCBpbiB0aGlzIHJlbmRlci4gQmFzaWNhbGx5LCB0aGUgY2FsbGJhY2sgc2hvdWxkIGZpcmUgZWl0aGVyIHdoZW4gdGhlIHBsYXloZWFkIEFSUklWRVMgb3IgTEVBVkVTIHRoaXMgZXhhY3Qgc3BvdCwgbm90IGJvdGguIEltYWdpbmUgZG9pbmcgYSB0aW1lbGluZS5zZWVrKDApIGFuZCB0aGVyZSdzIGEgY2FsbGJhY2sgdGhhdCBzaXRzIGF0IDAuIFNpbmNlIGV2ZW50cyBhcmUgc3VwcHJlc3NlZCBvbiB0aGF0IHNlZWsoKSBieSBkZWZhdWx0LCBub3RoaW5nIHdpbGwgZmlyZSwgYnV0IHdoZW4gdGhlIHBsYXloZWFkIG1vdmVzIG9mZiBvZiB0aGF0IHBvc2l0aW9uLCB0aGUgY2FsbGJhY2sgc2hvdWxkIGZpcmUuIFRoaXMgYmVoYXZpb3IgaXMgd2hhdCBwZW9wbGUgaW50dWl0aXZlbHkgZXhwZWN0LlxuXG4gICAgc3VwcHJlc3NFdmVudHMgfHwgKHN1cHByZXNzRXZlbnRzID0gdG90YWxUaW1lICYmICFwcmV2SXRlcmF0aW9uKTsgLy8gaWYgaXQgd2FzIHJlbmRlcmVkIHByZXZpb3VzbHkgYXQgZXhhY3RseSAwIChfelRpbWUpIGFuZCBub3cgdGhlIHBsYXloZWFkIGlzIG1vdmluZyBhd2F5LCBET04nVCBmaXJlIGNhbGxiYWNrcyBvdGhlcndpc2UgdGhleSdsbCBzZWVtIGxpa2UgZHVwbGljYXRlcy5cblxuICAgIHR3ZWVuLnJhdGlvID0gcmF0aW87XG4gICAgdHdlZW4uX2Zyb20gJiYgKHJhdGlvID0gMSAtIHJhdGlvKTtcbiAgICB0d2Vlbi5fdGltZSA9IDA7XG4gICAgdHdlZW4uX3RUaW1lID0gdFRpbWU7XG4gICAgcHQgPSB0d2Vlbi5fcHQ7XG5cbiAgICB3aGlsZSAocHQpIHtcbiAgICAgIHB0LnIocmF0aW8sIHB0LmQpO1xuICAgICAgcHQgPSBwdC5fbmV4dDtcbiAgICB9XG5cbiAgICB0b3RhbFRpbWUgPCAwICYmIF9yZXdpbmRTdGFydEF0KHR3ZWVuLCB0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCB0cnVlKTtcbiAgICB0d2Vlbi5fb25VcGRhdGUgJiYgIXN1cHByZXNzRXZlbnRzICYmIF9jYWxsYmFjayh0d2VlbiwgXCJvblVwZGF0ZVwiKTtcbiAgICB0VGltZSAmJiB0d2Vlbi5fcmVwZWF0ICYmICFzdXBwcmVzc0V2ZW50cyAmJiB0d2Vlbi5wYXJlbnQgJiYgX2NhbGxiYWNrKHR3ZWVuLCBcIm9uUmVwZWF0XCIpO1xuXG4gICAgaWYgKCh0b3RhbFRpbWUgPj0gdHdlZW4uX3REdXIgfHwgdG90YWxUaW1lIDwgMCkgJiYgdHdlZW4ucmF0aW8gPT09IHJhdGlvKSB7XG4gICAgICByYXRpbyAmJiBfcmVtb3ZlRnJvbVBhcmVudCh0d2VlbiwgMSk7XG5cbiAgICAgIGlmICghc3VwcHJlc3NFdmVudHMgJiYgIV9yZXZlcnRpbmcpIHtcbiAgICAgICAgX2NhbGxiYWNrKHR3ZWVuLCByYXRpbyA/IFwib25Db21wbGV0ZVwiIDogXCJvblJldmVyc2VDb21wbGV0ZVwiLCB0cnVlKTtcblxuICAgICAgICB0d2Vlbi5fcHJvbSAmJiB0d2Vlbi5fcHJvbSgpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmICghdHdlZW4uX3pUaW1lKSB7XG4gICAgdHdlZW4uX3pUaW1lID0gdG90YWxUaW1lO1xuICB9XG59LFxuICAgIF9maW5kTmV4dFBhdXNlVHdlZW4gPSBmdW5jdGlvbiBfZmluZE5leHRQYXVzZVR3ZWVuKGFuaW1hdGlvbiwgcHJldlRpbWUsIHRpbWUpIHtcbiAgdmFyIGNoaWxkO1xuXG4gIGlmICh0aW1lID4gcHJldlRpbWUpIHtcbiAgICBjaGlsZCA9IGFuaW1hdGlvbi5fZmlyc3Q7XG5cbiAgICB3aGlsZSAoY2hpbGQgJiYgY2hpbGQuX3N0YXJ0IDw9IHRpbWUpIHtcbiAgICAgIGlmIChjaGlsZC5kYXRhID09PSBcImlzUGF1c2VcIiAmJiBjaGlsZC5fc3RhcnQgPiBwcmV2VGltZSkge1xuICAgICAgICByZXR1cm4gY2hpbGQ7XG4gICAgICB9XG5cbiAgICAgIGNoaWxkID0gY2hpbGQuX25leHQ7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGNoaWxkID0gYW5pbWF0aW9uLl9sYXN0O1xuXG4gICAgd2hpbGUgKGNoaWxkICYmIGNoaWxkLl9zdGFydCA+PSB0aW1lKSB7XG4gICAgICBpZiAoY2hpbGQuZGF0YSA9PT0gXCJpc1BhdXNlXCIgJiYgY2hpbGQuX3N0YXJ0IDwgcHJldlRpbWUpIHtcbiAgICAgICAgcmV0dXJuIGNoaWxkO1xuICAgICAgfVxuXG4gICAgICBjaGlsZCA9IGNoaWxkLl9wcmV2O1xuICAgIH1cbiAgfVxufSxcbiAgICBfc2V0RHVyYXRpb24gPSBmdW5jdGlvbiBfc2V0RHVyYXRpb24oYW5pbWF0aW9uLCBkdXJhdGlvbiwgc2tpcFVuY2FjaGUsIGxlYXZlUGxheWhlYWQpIHtcbiAgdmFyIHJlcGVhdCA9IGFuaW1hdGlvbi5fcmVwZWF0LFxuICAgICAgZHVyID0gX3JvdW5kUHJlY2lzZShkdXJhdGlvbikgfHwgMCxcbiAgICAgIHRvdGFsUHJvZ3Jlc3MgPSBhbmltYXRpb24uX3RUaW1lIC8gYW5pbWF0aW9uLl90RHVyO1xuICB0b3RhbFByb2dyZXNzICYmICFsZWF2ZVBsYXloZWFkICYmIChhbmltYXRpb24uX3RpbWUgKj0gZHVyIC8gYW5pbWF0aW9uLl9kdXIpO1xuICBhbmltYXRpb24uX2R1ciA9IGR1cjtcbiAgYW5pbWF0aW9uLl90RHVyID0gIXJlcGVhdCA/IGR1ciA6IHJlcGVhdCA8IDAgPyAxZTEwIDogX3JvdW5kUHJlY2lzZShkdXIgKiAocmVwZWF0ICsgMSkgKyBhbmltYXRpb24uX3JEZWxheSAqIHJlcGVhdCk7XG4gIHRvdGFsUHJvZ3Jlc3MgPiAwICYmICFsZWF2ZVBsYXloZWFkICYmIF9hbGlnblBsYXloZWFkKGFuaW1hdGlvbiwgYW5pbWF0aW9uLl90VGltZSA9IGFuaW1hdGlvbi5fdER1ciAqIHRvdGFsUHJvZ3Jlc3MpO1xuICBhbmltYXRpb24ucGFyZW50ICYmIF9zZXRFbmQoYW5pbWF0aW9uKTtcbiAgc2tpcFVuY2FjaGUgfHwgX3VuY2FjaGUoYW5pbWF0aW9uLnBhcmVudCwgYW5pbWF0aW9uKTtcbiAgcmV0dXJuIGFuaW1hdGlvbjtcbn0sXG4gICAgX29uVXBkYXRlVG90YWxEdXJhdGlvbiA9IGZ1bmN0aW9uIF9vblVwZGF0ZVRvdGFsRHVyYXRpb24oYW5pbWF0aW9uKSB7XG4gIHJldHVybiBhbmltYXRpb24gaW5zdGFuY2VvZiBUaW1lbGluZSA/IF91bmNhY2hlKGFuaW1hdGlvbikgOiBfc2V0RHVyYXRpb24oYW5pbWF0aW9uLCBhbmltYXRpb24uX2R1cik7XG59LFxuICAgIF96ZXJvUG9zaXRpb24gPSB7XG4gIF9zdGFydDogMCxcbiAgZW5kVGltZTogX2VtcHR5RnVuYyxcbiAgdG90YWxEdXJhdGlvbjogX2VtcHR5RnVuY1xufSxcbiAgICBfcGFyc2VQb3NpdGlvbiA9IGZ1bmN0aW9uIF9wYXJzZVBvc2l0aW9uKGFuaW1hdGlvbiwgcG9zaXRpb24sIHBlcmNlbnRBbmltYXRpb24pIHtcbiAgdmFyIGxhYmVscyA9IGFuaW1hdGlvbi5sYWJlbHMsXG4gICAgICByZWNlbnQgPSBhbmltYXRpb24uX3JlY2VudCB8fCBfemVyb1Bvc2l0aW9uLFxuICAgICAgY2xpcHBlZER1cmF0aW9uID0gYW5pbWF0aW9uLmR1cmF0aW9uKCkgPj0gX2JpZ051bSA/IHJlY2VudC5lbmRUaW1lKGZhbHNlKSA6IGFuaW1hdGlvbi5fZHVyLFxuICAgICAgLy9pbiBjYXNlIHRoZXJlJ3MgYSBjaGlsZCB0aGF0IGluZmluaXRlbHkgcmVwZWF0cywgdXNlcnMgYWxtb3N0IG5ldmVyIGludGVuZCBmb3IgdGhlIGluc2VydGlvbiBwb2ludCBvZiBhIG5ldyBjaGlsZCB0byBiZSBiYXNlZCBvbiBhIFNVUEVSIGxvbmcgdmFsdWUgbGlrZSB0aGF0IHNvIHdlIGNsaXAgaXQgYW5kIGFzc3VtZSB0aGUgbW9zdCByZWNlbnRseS1hZGRlZCBjaGlsZCdzIGVuZFRpbWUgc2hvdWxkIGJlIHVzZWQgaW5zdGVhZC5cbiAgaSxcbiAgICAgIG9mZnNldCxcbiAgICAgIGlzUGVyY2VudDtcblxuICBpZiAoX2lzU3RyaW5nKHBvc2l0aW9uKSAmJiAoaXNOYU4ocG9zaXRpb24pIHx8IHBvc2l0aW9uIGluIGxhYmVscykpIHtcbiAgICAvL2lmIHRoZSBzdHJpbmcgaXMgYSBudW1iZXIgbGlrZSBcIjFcIiwgY2hlY2sgdG8gc2VlIGlmIHRoZXJlJ3MgYSBsYWJlbCB3aXRoIHRoYXQgbmFtZSwgb3RoZXJ3aXNlIGludGVycHJldCBpdCBhcyBhIG51bWJlciAoYWJzb2x1dGUgdmFsdWUpLlxuICAgIG9mZnNldCA9IHBvc2l0aW9uLmNoYXJBdCgwKTtcbiAgICBpc1BlcmNlbnQgPSBwb3NpdGlvbi5zdWJzdHIoLTEpID09PSBcIiVcIjtcbiAgICBpID0gcG9zaXRpb24uaW5kZXhPZihcIj1cIik7XG5cbiAgICBpZiAob2Zmc2V0ID09PSBcIjxcIiB8fCBvZmZzZXQgPT09IFwiPlwiKSB7XG4gICAgICBpID49IDAgJiYgKHBvc2l0aW9uID0gcG9zaXRpb24ucmVwbGFjZSgvPS8sIFwiXCIpKTtcbiAgICAgIHJldHVybiAob2Zmc2V0ID09PSBcIjxcIiA/IHJlY2VudC5fc3RhcnQgOiByZWNlbnQuZW5kVGltZShyZWNlbnQuX3JlcGVhdCA+PSAwKSkgKyAocGFyc2VGbG9hdChwb3NpdGlvbi5zdWJzdHIoMSkpIHx8IDApICogKGlzUGVyY2VudCA/IChpIDwgMCA/IHJlY2VudCA6IHBlcmNlbnRBbmltYXRpb24pLnRvdGFsRHVyYXRpb24oKSAvIDEwMCA6IDEpO1xuICAgIH1cblxuICAgIGlmIChpIDwgMCkge1xuICAgICAgcG9zaXRpb24gaW4gbGFiZWxzIHx8IChsYWJlbHNbcG9zaXRpb25dID0gY2xpcHBlZER1cmF0aW9uKTtcbiAgICAgIHJldHVybiBsYWJlbHNbcG9zaXRpb25dO1xuICAgIH1cblxuICAgIG9mZnNldCA9IHBhcnNlRmxvYXQocG9zaXRpb24uY2hhckF0KGkgLSAxKSArIHBvc2l0aW9uLnN1YnN0cihpICsgMSkpO1xuXG4gICAgaWYgKGlzUGVyY2VudCAmJiBwZXJjZW50QW5pbWF0aW9uKSB7XG4gICAgICBvZmZzZXQgPSBvZmZzZXQgLyAxMDAgKiAoX2lzQXJyYXkocGVyY2VudEFuaW1hdGlvbikgPyBwZXJjZW50QW5pbWF0aW9uWzBdIDogcGVyY2VudEFuaW1hdGlvbikudG90YWxEdXJhdGlvbigpO1xuICAgIH1cblxuICAgIHJldHVybiBpID4gMSA/IF9wYXJzZVBvc2l0aW9uKGFuaW1hdGlvbiwgcG9zaXRpb24uc3Vic3RyKDAsIGkgLSAxKSwgcGVyY2VudEFuaW1hdGlvbikgKyBvZmZzZXQgOiBjbGlwcGVkRHVyYXRpb24gKyBvZmZzZXQ7XG4gIH1cblxuICByZXR1cm4gcG9zaXRpb24gPT0gbnVsbCA/IGNsaXBwZWREdXJhdGlvbiA6ICtwb3NpdGlvbjtcbn0sXG4gICAgX2NyZWF0ZVR3ZWVuVHlwZSA9IGZ1bmN0aW9uIF9jcmVhdGVUd2VlblR5cGUodHlwZSwgcGFyYW1zLCB0aW1lbGluZSkge1xuICB2YXIgaXNMZWdhY3kgPSBfaXNOdW1iZXIocGFyYW1zWzFdKSxcbiAgICAgIHZhcnNJbmRleCA9IChpc0xlZ2FjeSA/IDIgOiAxKSArICh0eXBlIDwgMiA/IDAgOiAxKSxcbiAgICAgIHZhcnMgPSBwYXJhbXNbdmFyc0luZGV4XSxcbiAgICAgIGlyVmFycyxcbiAgICAgIHBhcmVudDtcblxuICBpc0xlZ2FjeSAmJiAodmFycy5kdXJhdGlvbiA9IHBhcmFtc1sxXSk7XG4gIHZhcnMucGFyZW50ID0gdGltZWxpbmU7XG5cbiAgaWYgKHR5cGUpIHtcbiAgICBpclZhcnMgPSB2YXJzO1xuICAgIHBhcmVudCA9IHRpbWVsaW5lO1xuXG4gICAgd2hpbGUgKHBhcmVudCAmJiAhKFwiaW1tZWRpYXRlUmVuZGVyXCIgaW4gaXJWYXJzKSkge1xuICAgICAgLy8gaW5oZXJpdGFuY2UgaGFzbid0IGhhcHBlbmVkIHlldCwgYnV0IHNvbWVvbmUgbWF5IGhhdmUgc2V0IGEgZGVmYXVsdCBpbiBhbiBhbmNlc3RvciB0aW1lbGluZS4gV2UgY291bGQgZG8gdmFycy5pbW1lZGlhdGVSZW5kZXIgPSBfaXNOb3RGYWxzZShfaW5oZXJpdERlZmF1bHRzKHZhcnMpLmltbWVkaWF0ZVJlbmRlcikgYnV0IHRoYXQnZCBleGFjdCBhIHNsaWdodCBwZXJmb3JtYW5jZSBwZW5hbHR5IGJlY2F1c2UgX2luaGVyaXREZWZhdWx0cygpIGFsc28gcnVucyBpbiB0aGUgVHdlZW4gY29uc3RydWN0b3IuIFdlJ3JlIHBheWluZyBhIHNtYWxsIGtiIHByaWNlIGhlcmUgdG8gZ2FpbiBzcGVlZC5cbiAgICAgIGlyVmFycyA9IHBhcmVudC52YXJzLmRlZmF1bHRzIHx8IHt9O1xuICAgICAgcGFyZW50ID0gX2lzTm90RmFsc2UocGFyZW50LnZhcnMuaW5oZXJpdCkgJiYgcGFyZW50LnBhcmVudDtcbiAgICB9XG5cbiAgICB2YXJzLmltbWVkaWF0ZVJlbmRlciA9IF9pc05vdEZhbHNlKGlyVmFycy5pbW1lZGlhdGVSZW5kZXIpO1xuICAgIHR5cGUgPCAyID8gdmFycy5ydW5CYWNrd2FyZHMgPSAxIDogdmFycy5zdGFydEF0ID0gcGFyYW1zW3ZhcnNJbmRleCAtIDFdOyAvLyBcImZyb21cIiB2YXJzXG4gIH1cblxuICByZXR1cm4gbmV3IFR3ZWVuKHBhcmFtc1swXSwgdmFycywgcGFyYW1zW3ZhcnNJbmRleCArIDFdKTtcbn0sXG4gICAgX2NvbmRpdGlvbmFsUmV0dXJuID0gZnVuY3Rpb24gX2NvbmRpdGlvbmFsUmV0dXJuKHZhbHVlLCBmdW5jKSB7XG4gIHJldHVybiB2YWx1ZSB8fCB2YWx1ZSA9PT0gMCA/IGZ1bmModmFsdWUpIDogZnVuYztcbn0sXG4gICAgX2NsYW1wID0gZnVuY3Rpb24gX2NsYW1wKG1pbiwgbWF4LCB2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPCBtaW4gPyBtaW4gOiB2YWx1ZSA+IG1heCA/IG1heCA6IHZhbHVlO1xufSxcbiAgICBnZXRVbml0ID0gZnVuY3Rpb24gZ2V0VW5pdCh2YWx1ZSwgdikge1xuICByZXR1cm4gIV9pc1N0cmluZyh2YWx1ZSkgfHwgISh2ID0gX3VuaXRFeHAuZXhlYyh2YWx1ZSkpID8gXCJcIiA6IHZbMV07XG59LFxuICAgIC8vIG5vdGU6IHByb3RlY3QgYWdhaW5zdCBwYWRkZWQgbnVtYmVycyBhcyBzdHJpbmdzLCBsaWtlIFwiMTAwLjEwMFwiLiBUaGF0IHNob3VsZG4ndCByZXR1cm4gXCIwMFwiIGFzIHRoZSB1bml0LiBJZiBpdCdzIG51bWVyaWMsIHJldHVybiBubyB1bml0LlxuY2xhbXAgPSBmdW5jdGlvbiBjbGFtcChtaW4sIG1heCwgdmFsdWUpIHtcbiAgcmV0dXJuIF9jb25kaXRpb25hbFJldHVybih2YWx1ZSwgZnVuY3Rpb24gKHYpIHtcbiAgICByZXR1cm4gX2NsYW1wKG1pbiwgbWF4LCB2KTtcbiAgfSk7XG59LFxuICAgIF9zbGljZSA9IFtdLnNsaWNlLFxuICAgIF9pc0FycmF5TGlrZSA9IGZ1bmN0aW9uIF9pc0FycmF5TGlrZSh2YWx1ZSwgbm9uRW1wdHkpIHtcbiAgcmV0dXJuIHZhbHVlICYmIF9pc09iamVjdCh2YWx1ZSkgJiYgXCJsZW5ndGhcIiBpbiB2YWx1ZSAmJiAoIW5vbkVtcHR5ICYmICF2YWx1ZS5sZW5ndGggfHwgdmFsdWUubGVuZ3RoIC0gMSBpbiB2YWx1ZSAmJiBfaXNPYmplY3QodmFsdWVbMF0pKSAmJiAhdmFsdWUubm9kZVR5cGUgJiYgdmFsdWUgIT09IF93aW47XG59LFxuICAgIF9mbGF0dGVuID0gZnVuY3Rpb24gX2ZsYXR0ZW4oYXIsIGxlYXZlU3RyaW5ncywgYWNjdW11bGF0b3IpIHtcbiAgaWYgKGFjY3VtdWxhdG9yID09PSB2b2lkIDApIHtcbiAgICBhY2N1bXVsYXRvciA9IFtdO1xuICB9XG5cbiAgcmV0dXJuIGFyLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgdmFyIF9hY2N1bXVsYXRvcjtcblxuICAgIHJldHVybiBfaXNTdHJpbmcodmFsdWUpICYmICFsZWF2ZVN0cmluZ3MgfHwgX2lzQXJyYXlMaWtlKHZhbHVlLCAxKSA/IChfYWNjdW11bGF0b3IgPSBhY2N1bXVsYXRvcikucHVzaC5hcHBseShfYWNjdW11bGF0b3IsIHRvQXJyYXkodmFsdWUpKSA6IGFjY3VtdWxhdG9yLnB1c2godmFsdWUpO1xuICB9KSB8fCBhY2N1bXVsYXRvcjtcbn0sXG4gICAgLy90YWtlcyBhbnkgdmFsdWUgYW5kIHJldHVybnMgYW4gYXJyYXkuIElmIGl0J3MgYSBzdHJpbmcgKGFuZCBsZWF2ZVN0cmluZ3MgaXNuJ3QgdHJ1ZSksIGl0J2xsIHVzZSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCkgYW5kIGNvbnZlcnQgdGhhdCB0byBhbiBhcnJheS4gSXQnbGwgYWxzbyBhY2NlcHQgaXRlcmFibGVzIGxpa2UgalF1ZXJ5IG9iamVjdHMuXG50b0FycmF5ID0gZnVuY3Rpb24gdG9BcnJheSh2YWx1ZSwgc2NvcGUsIGxlYXZlU3RyaW5ncykge1xuICByZXR1cm4gX2NvbnRleHQgJiYgIXNjb3BlICYmIF9jb250ZXh0LnNlbGVjdG9yID8gX2NvbnRleHQuc2VsZWN0b3IodmFsdWUpIDogX2lzU3RyaW5nKHZhbHVlKSAmJiAhbGVhdmVTdHJpbmdzICYmIChfY29yZUluaXR0ZWQgfHwgIV93YWtlKCkpID8gX3NsaWNlLmNhbGwoKHNjb3BlIHx8IF9kb2MpLnF1ZXJ5U2VsZWN0b3JBbGwodmFsdWUpLCAwKSA6IF9pc0FycmF5KHZhbHVlKSA/IF9mbGF0dGVuKHZhbHVlLCBsZWF2ZVN0cmluZ3MpIDogX2lzQXJyYXlMaWtlKHZhbHVlKSA/IF9zbGljZS5jYWxsKHZhbHVlLCAwKSA6IHZhbHVlID8gW3ZhbHVlXSA6IFtdO1xufSxcbiAgICBzZWxlY3RvciA9IGZ1bmN0aW9uIHNlbGVjdG9yKHZhbHVlKSB7XG4gIHZhbHVlID0gdG9BcnJheSh2YWx1ZSlbMF0gfHwgX3dhcm4oXCJJbnZhbGlkIHNjb3BlXCIpIHx8IHt9O1xuICByZXR1cm4gZnVuY3Rpb24gKHYpIHtcbiAgICB2YXIgZWwgPSB2YWx1ZS5jdXJyZW50IHx8IHZhbHVlLm5hdGl2ZUVsZW1lbnQgfHwgdmFsdWU7XG4gICAgcmV0dXJuIHRvQXJyYXkodiwgZWwucXVlcnlTZWxlY3RvckFsbCA/IGVsIDogZWwgPT09IHZhbHVlID8gX3dhcm4oXCJJbnZhbGlkIHNjb3BlXCIpIHx8IF9kb2MuY3JlYXRlRWxlbWVudChcImRpdlwiKSA6IHZhbHVlKTtcbiAgfTtcbn0sXG4gICAgc2h1ZmZsZSA9IGZ1bmN0aW9uIHNodWZmbGUoYSkge1xuICByZXR1cm4gYS5zb3J0KGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gLjUgLSBNYXRoLnJhbmRvbSgpO1xuICB9KTtcbn0sXG4gICAgLy8gYWx0ZXJuYXRpdmUgdGhhdCdzIGEgYml0IGZhc3RlciBhbmQgbW9yZSByZWxpYWJseSBkaXZlcnNlIGJ1dCBiaWdnZXI6ICAgZm9yIChsZXQgaiwgdiwgaSA9IGEubGVuZ3RoOyBpOyBqID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogaSksIHYgPSBhWy0taV0sIGFbaV0gPSBhW2pdLCBhW2pdID0gdik7IHJldHVybiBhO1xuLy9mb3IgZGlzdHJpYnV0aW5nIHZhbHVlcyBhY3Jvc3MgYW4gYXJyYXkuIENhbiBhY2NlcHQgYSBudW1iZXIsIGEgZnVuY3Rpb24gb3IgKG1vc3QgY29tbW9ubHkpIGEgZnVuY3Rpb24gd2hpY2ggY2FuIGNvbnRhaW4gdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOiB7YmFzZSwgYW1vdW50LCBmcm9tLCBlYXNlLCBncmlkLCBheGlzLCBsZW5ndGgsIGVhY2h9LiBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBleHBlY3RzIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVyczogaW5kZXgsIHRhcmdldCwgYXJyYXkuIFJlY29nbml6ZXMgdGhlIGZvbGxvd2luZ1xuZGlzdHJpYnV0ZSA9IGZ1bmN0aW9uIGRpc3RyaWJ1dGUodikge1xuICBpZiAoX2lzRnVuY3Rpb24odikpIHtcbiAgICByZXR1cm4gdjtcbiAgfVxuXG4gIHZhciB2YXJzID0gX2lzT2JqZWN0KHYpID8gdiA6IHtcbiAgICBlYWNoOiB2XG4gIH0sXG4gICAgICAvL246MSBpcyBqdXN0IHRvIGluZGljYXRlIHYgd2FzIGEgbnVtYmVyOyB3ZSBsZXZlcmFnZSB0aGF0IGxhdGVyIHRvIHNldCB2IGFjY29yZGluZyB0byB0aGUgbGVuZ3RoIHdlIGdldC4gSWYgYSBudW1iZXIgaXMgcGFzc2VkIGluLCB3ZSB0cmVhdCBpdCBsaWtlIHRoZSBvbGQgc3RhZ2dlciB2YWx1ZSB3aGVyZSAwLjEsIGZvciBleGFtcGxlLCB3b3VsZCBtZWFuIHRoYXQgdGhpbmdzIHdvdWxkIGJlIGRpc3RyaWJ1dGVkIHdpdGggMC4xIGJldHdlZW4gZWFjaCBlbGVtZW50IGluIHRoZSBhcnJheSByYXRoZXIgdGhhbiBhIHRvdGFsIFwiYW1vdW50XCIgdGhhdCdzIGNodW5rZWQgb3V0IGFtb25nIHRoZW0gYWxsLlxuICBlYXNlID0gX3BhcnNlRWFzZSh2YXJzLmVhc2UpLFxuICAgICAgZnJvbSA9IHZhcnMuZnJvbSB8fCAwLFxuICAgICAgYmFzZSA9IHBhcnNlRmxvYXQodmFycy5iYXNlKSB8fCAwLFxuICAgICAgY2FjaGUgPSB7fSxcbiAgICAgIGlzRGVjaW1hbCA9IGZyb20gPiAwICYmIGZyb20gPCAxLFxuICAgICAgcmF0aW9zID0gaXNOYU4oZnJvbSkgfHwgaXNEZWNpbWFsLFxuICAgICAgYXhpcyA9IHZhcnMuYXhpcyxcbiAgICAgIHJhdGlvWCA9IGZyb20sXG4gICAgICByYXRpb1kgPSBmcm9tO1xuXG4gIGlmIChfaXNTdHJpbmcoZnJvbSkpIHtcbiAgICByYXRpb1ggPSByYXRpb1kgPSB7XG4gICAgICBjZW50ZXI6IC41LFxuICAgICAgZWRnZXM6IC41LFxuICAgICAgZW5kOiAxXG4gICAgfVtmcm9tXSB8fCAwO1xuICB9IGVsc2UgaWYgKCFpc0RlY2ltYWwgJiYgcmF0aW9zKSB7XG4gICAgcmF0aW9YID0gZnJvbVswXTtcbiAgICByYXRpb1kgPSBmcm9tWzFdO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChpLCB0YXJnZXQsIGEpIHtcbiAgICB2YXIgbCA9IChhIHx8IHZhcnMpLmxlbmd0aCxcbiAgICAgICAgZGlzdGFuY2VzID0gY2FjaGVbbF0sXG4gICAgICAgIG9yaWdpblgsXG4gICAgICAgIG9yaWdpblksXG4gICAgICAgIHgsXG4gICAgICAgIHksXG4gICAgICAgIGQsXG4gICAgICAgIGosXG4gICAgICAgIG1heCxcbiAgICAgICAgbWluLFxuICAgICAgICB3cmFwQXQ7XG5cbiAgICBpZiAoIWRpc3RhbmNlcykge1xuICAgICAgd3JhcEF0ID0gdmFycy5ncmlkID09PSBcImF1dG9cIiA/IDAgOiAodmFycy5ncmlkIHx8IFsxLCBfYmlnTnVtXSlbMV07XG5cbiAgICAgIGlmICghd3JhcEF0KSB7XG4gICAgICAgIG1heCA9IC1fYmlnTnVtO1xuXG4gICAgICAgIHdoaWxlIChtYXggPCAobWF4ID0gYVt3cmFwQXQrK10uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCkgJiYgd3JhcEF0IDwgbCkge31cblxuICAgICAgICB3cmFwQXQgPCBsICYmIHdyYXBBdC0tO1xuICAgICAgfVxuXG4gICAgICBkaXN0YW5jZXMgPSBjYWNoZVtsXSA9IFtdO1xuICAgICAgb3JpZ2luWCA9IHJhdGlvcyA/IE1hdGgubWluKHdyYXBBdCwgbCkgKiByYXRpb1ggLSAuNSA6IGZyb20gJSB3cmFwQXQ7XG4gICAgICBvcmlnaW5ZID0gd3JhcEF0ID09PSBfYmlnTnVtID8gMCA6IHJhdGlvcyA/IGwgKiByYXRpb1kgLyB3cmFwQXQgLSAuNSA6IGZyb20gLyB3cmFwQXQgfCAwO1xuICAgICAgbWF4ID0gMDtcbiAgICAgIG1pbiA9IF9iaWdOdW07XG5cbiAgICAgIGZvciAoaiA9IDA7IGogPCBsOyBqKyspIHtcbiAgICAgICAgeCA9IGogJSB3cmFwQXQgLSBvcmlnaW5YO1xuICAgICAgICB5ID0gb3JpZ2luWSAtIChqIC8gd3JhcEF0IHwgMCk7XG4gICAgICAgIGRpc3RhbmNlc1tqXSA9IGQgPSAhYXhpcyA/IF9zcXJ0KHggKiB4ICsgeSAqIHkpIDogTWF0aC5hYnMoYXhpcyA9PT0gXCJ5XCIgPyB5IDogeCk7XG4gICAgICAgIGQgPiBtYXggJiYgKG1heCA9IGQpO1xuICAgICAgICBkIDwgbWluICYmIChtaW4gPSBkKTtcbiAgICAgIH1cblxuICAgICAgZnJvbSA9PT0gXCJyYW5kb21cIiAmJiBzaHVmZmxlKGRpc3RhbmNlcyk7XG4gICAgICBkaXN0YW5jZXMubWF4ID0gbWF4IC0gbWluO1xuICAgICAgZGlzdGFuY2VzLm1pbiA9IG1pbjtcbiAgICAgIGRpc3RhbmNlcy52ID0gbCA9IChwYXJzZUZsb2F0KHZhcnMuYW1vdW50KSB8fCBwYXJzZUZsb2F0KHZhcnMuZWFjaCkgKiAod3JhcEF0ID4gbCA/IGwgLSAxIDogIWF4aXMgPyBNYXRoLm1heCh3cmFwQXQsIGwgLyB3cmFwQXQpIDogYXhpcyA9PT0gXCJ5XCIgPyBsIC8gd3JhcEF0IDogd3JhcEF0KSB8fCAwKSAqIChmcm9tID09PSBcImVkZ2VzXCIgPyAtMSA6IDEpO1xuICAgICAgZGlzdGFuY2VzLmIgPSBsIDwgMCA/IGJhc2UgLSBsIDogYmFzZTtcbiAgICAgIGRpc3RhbmNlcy51ID0gZ2V0VW5pdCh2YXJzLmFtb3VudCB8fCB2YXJzLmVhY2gpIHx8IDA7IC8vdW5pdFxuXG4gICAgICBlYXNlID0gZWFzZSAmJiBsIDwgMCA/IF9pbnZlcnRFYXNlKGVhc2UpIDogZWFzZTtcbiAgICB9XG5cbiAgICBsID0gKGRpc3RhbmNlc1tpXSAtIGRpc3RhbmNlcy5taW4pIC8gZGlzdGFuY2VzLm1heCB8fCAwO1xuICAgIHJldHVybiBfcm91bmRQcmVjaXNlKGRpc3RhbmNlcy5iICsgKGVhc2UgPyBlYXNlKGwpIDogbCkgKiBkaXN0YW5jZXMudikgKyBkaXN0YW5jZXMudTsgLy9yb3VuZCBpbiBvcmRlciB0byB3b3JrIGFyb3VuZCBmbG9hdGluZyBwb2ludCBlcnJvcnNcbiAgfTtcbn0sXG4gICAgX3JvdW5kTW9kaWZpZXIgPSBmdW5jdGlvbiBfcm91bmRNb2RpZmllcih2KSB7XG4gIC8vcGFzcyBpbiAwLjEgZ2V0IGEgZnVuY3Rpb24gdGhhdCdsbCByb3VuZCB0byB0aGUgbmVhcmVzdCB0ZW50aCwgb3IgNSB0byByb3VuZCB0byB0aGUgY2xvc2VzdCA1LCBvciAwLjAwMSB0byB0aGUgY2xvc2VzdCAxMDAwdGgsIGV0Yy5cbiAgdmFyIHAgPSBNYXRoLnBvdygxMCwgKCh2ICsgXCJcIikuc3BsaXQoXCIuXCIpWzFdIHx8IFwiXCIpLmxlbmd0aCk7IC8vdG8gYXZvaWQgZmxvYXRpbmcgcG9pbnQgbWF0aCBlcnJvcnMgKGxpa2UgMjQgKiAwLjEgPT0gMi40MDAwMDAwMDAwMDAwMDA0KSwgd2UgY2hvcCBvZmYgYXQgYSBzcGVjaWZpYyBudW1iZXIgb2YgZGVjaW1hbCBwbGFjZXMgKG11Y2ggZmFzdGVyIHRoYW4gdG9GaXhlZCgpKVxuXG4gIHJldHVybiBmdW5jdGlvbiAocmF3KSB7XG4gICAgdmFyIG4gPSBfcm91bmRQcmVjaXNlKE1hdGgucm91bmQocGFyc2VGbG9hdChyYXcpIC8gdikgKiB2ICogcCk7XG5cbiAgICByZXR1cm4gKG4gLSBuICUgMSkgLyBwICsgKF9pc051bWJlcihyYXcpID8gMCA6IGdldFVuaXQocmF3KSk7IC8vIG4gLSBuICUgMSByZXBsYWNlcyBNYXRoLmZsb29yKCkgaW4gb3JkZXIgdG8gaGFuZGxlIG5lZ2F0aXZlIHZhbHVlcyBwcm9wZXJseS4gRm9yIGV4YW1wbGUsIE1hdGguZmxvb3IoLTE1MC4wMDAwMDAwMDAwMDAwMykgaXMgMTUxIVxuICB9O1xufSxcbiAgICBzbmFwID0gZnVuY3Rpb24gc25hcChzbmFwVG8sIHZhbHVlKSB7XG4gIHZhciBpc0FycmF5ID0gX2lzQXJyYXkoc25hcFRvKSxcbiAgICAgIHJhZGl1cyxcbiAgICAgIGlzMkQ7XG5cbiAgaWYgKCFpc0FycmF5ICYmIF9pc09iamVjdChzbmFwVG8pKSB7XG4gICAgcmFkaXVzID0gaXNBcnJheSA9IHNuYXBUby5yYWRpdXMgfHwgX2JpZ051bTtcblxuICAgIGlmIChzbmFwVG8udmFsdWVzKSB7XG4gICAgICBzbmFwVG8gPSB0b0FycmF5KHNuYXBUby52YWx1ZXMpO1xuXG4gICAgICBpZiAoaXMyRCA9ICFfaXNOdW1iZXIoc25hcFRvWzBdKSkge1xuICAgICAgICByYWRpdXMgKj0gcmFkaXVzOyAvL3BlcmZvcm1hbmNlIG9wdGltaXphdGlvbiBzbyB3ZSBkb24ndCBoYXZlIHRvIE1hdGguc3FydCgpIGluIHRoZSBsb29wLlxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzbmFwVG8gPSBfcm91bmRNb2RpZmllcihzbmFwVG8uaW5jcmVtZW50KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gX2NvbmRpdGlvbmFsUmV0dXJuKHZhbHVlLCAhaXNBcnJheSA/IF9yb3VuZE1vZGlmaWVyKHNuYXBUbykgOiBfaXNGdW5jdGlvbihzbmFwVG8pID8gZnVuY3Rpb24gKHJhdykge1xuICAgIGlzMkQgPSBzbmFwVG8ocmF3KTtcbiAgICByZXR1cm4gTWF0aC5hYnMoaXMyRCAtIHJhdykgPD0gcmFkaXVzID8gaXMyRCA6IHJhdztcbiAgfSA6IGZ1bmN0aW9uIChyYXcpIHtcbiAgICB2YXIgeCA9IHBhcnNlRmxvYXQoaXMyRCA/IHJhdy54IDogcmF3KSxcbiAgICAgICAgeSA9IHBhcnNlRmxvYXQoaXMyRCA/IHJhdy55IDogMCksXG4gICAgICAgIG1pbiA9IF9iaWdOdW0sXG4gICAgICAgIGNsb3Nlc3QgPSAwLFxuICAgICAgICBpID0gc25hcFRvLmxlbmd0aCxcbiAgICAgICAgZHgsXG4gICAgICAgIGR5O1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgaWYgKGlzMkQpIHtcbiAgICAgICAgZHggPSBzbmFwVG9baV0ueCAtIHg7XG4gICAgICAgIGR5ID0gc25hcFRvW2ldLnkgLSB5O1xuICAgICAgICBkeCA9IGR4ICogZHggKyBkeSAqIGR5O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZHggPSBNYXRoLmFicyhzbmFwVG9baV0gLSB4KTtcbiAgICAgIH1cblxuICAgICAgaWYgKGR4IDwgbWluKSB7XG4gICAgICAgIG1pbiA9IGR4O1xuICAgICAgICBjbG9zZXN0ID0gaTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjbG9zZXN0ID0gIXJhZGl1cyB8fCBtaW4gPD0gcmFkaXVzID8gc25hcFRvW2Nsb3Nlc3RdIDogcmF3O1xuICAgIHJldHVybiBpczJEIHx8IGNsb3Nlc3QgPT09IHJhdyB8fCBfaXNOdW1iZXIocmF3KSA/IGNsb3Nlc3QgOiBjbG9zZXN0ICsgZ2V0VW5pdChyYXcpO1xuICB9KTtcbn0sXG4gICAgcmFuZG9tID0gZnVuY3Rpb24gcmFuZG9tKG1pbiwgbWF4LCByb3VuZGluZ0luY3JlbWVudCwgcmV0dXJuRnVuY3Rpb24pIHtcbiAgcmV0dXJuIF9jb25kaXRpb25hbFJldHVybihfaXNBcnJheShtaW4pID8gIW1heCA6IHJvdW5kaW5nSW5jcmVtZW50ID09PSB0cnVlID8gISEocm91bmRpbmdJbmNyZW1lbnQgPSAwKSA6ICFyZXR1cm5GdW5jdGlvbiwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaXNBcnJheShtaW4pID8gbWluW35+KE1hdGgucmFuZG9tKCkgKiBtaW4ubGVuZ3RoKV0gOiAocm91bmRpbmdJbmNyZW1lbnQgPSByb3VuZGluZ0luY3JlbWVudCB8fCAxZS01KSAmJiAocmV0dXJuRnVuY3Rpb24gPSByb3VuZGluZ0luY3JlbWVudCA8IDEgPyBNYXRoLnBvdygxMCwgKHJvdW5kaW5nSW5jcmVtZW50ICsgXCJcIikubGVuZ3RoIC0gMikgOiAxKSAmJiBNYXRoLmZsb29yKE1hdGgucm91bmQoKG1pbiAtIHJvdW5kaW5nSW5jcmVtZW50IC8gMiArIE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluICsgcm91bmRpbmdJbmNyZW1lbnQgKiAuOTkpKSAvIHJvdW5kaW5nSW5jcmVtZW50KSAqIHJvdW5kaW5nSW5jcmVtZW50ICogcmV0dXJuRnVuY3Rpb24pIC8gcmV0dXJuRnVuY3Rpb247XG4gIH0pO1xufSxcbiAgICBwaXBlID0gZnVuY3Rpb24gcGlwZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGZ1bmN0aW9ucyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBmdW5jdGlvbnNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9ucy5yZWR1Y2UoZnVuY3Rpb24gKHYsIGYpIHtcbiAgICAgIHJldHVybiBmKHYpO1xuICAgIH0sIHZhbHVlKTtcbiAgfTtcbn0sXG4gICAgdW5pdGl6ZSA9IGZ1bmN0aW9uIHVuaXRpemUoZnVuYywgdW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmMocGFyc2VGbG9hdCh2YWx1ZSkpICsgKHVuaXQgfHwgZ2V0VW5pdCh2YWx1ZSkpO1xuICB9O1xufSxcbiAgICBub3JtYWxpemUgPSBmdW5jdGlvbiBub3JtYWxpemUobWluLCBtYXgsIHZhbHVlKSB7XG4gIHJldHVybiBtYXBSYW5nZShtaW4sIG1heCwgMCwgMSwgdmFsdWUpO1xufSxcbiAgICBfd3JhcEFycmF5ID0gZnVuY3Rpb24gX3dyYXBBcnJheShhLCB3cmFwcGVyLCB2YWx1ZSkge1xuICByZXR1cm4gX2NvbmRpdGlvbmFsUmV0dXJuKHZhbHVlLCBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICByZXR1cm4gYVt+fndyYXBwZXIoaW5kZXgpXTtcbiAgfSk7XG59LFxuICAgIHdyYXAgPSBmdW5jdGlvbiB3cmFwKG1pbiwgbWF4LCB2YWx1ZSkge1xuICAvLyBOT1RFOiB3cmFwKCkgQ0FOTk9UIGJlIGFuIGFycm93IGZ1bmN0aW9uISBBIHZlcnkgb2RkIGNvbXBpbGluZyBidWcgY2F1c2VzIHByb2JsZW1zICh1bnJlbGF0ZWQgdG8gR1NBUCkuXG4gIHZhciByYW5nZSA9IG1heCAtIG1pbjtcbiAgcmV0dXJuIF9pc0FycmF5KG1pbikgPyBfd3JhcEFycmF5KG1pbiwgd3JhcCgwLCBtaW4ubGVuZ3RoKSwgbWF4KSA6IF9jb25kaXRpb25hbFJldHVybih2YWx1ZSwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIChyYW5nZSArICh2YWx1ZSAtIG1pbikgJSByYW5nZSkgJSByYW5nZSArIG1pbjtcbiAgfSk7XG59LFxuICAgIHdyYXBZb3lvID0gZnVuY3Rpb24gd3JhcFlveW8obWluLCBtYXgsIHZhbHVlKSB7XG4gIHZhciByYW5nZSA9IG1heCAtIG1pbixcbiAgICAgIHRvdGFsID0gcmFuZ2UgKiAyO1xuICByZXR1cm4gX2lzQXJyYXkobWluKSA/IF93cmFwQXJyYXkobWluLCB3cmFwWW95bygwLCBtaW4ubGVuZ3RoIC0gMSksIG1heCkgOiBfY29uZGl0aW9uYWxSZXR1cm4odmFsdWUsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHZhbHVlID0gKHRvdGFsICsgKHZhbHVlIC0gbWluKSAlIHRvdGFsKSAlIHRvdGFsIHx8IDA7XG4gICAgcmV0dXJuIG1pbiArICh2YWx1ZSA+IHJhbmdlID8gdG90YWwgLSB2YWx1ZSA6IHZhbHVlKTtcbiAgfSk7XG59LFxuICAgIF9yZXBsYWNlUmFuZG9tID0gZnVuY3Rpb24gX3JlcGxhY2VSYW5kb20odmFsdWUpIHtcbiAgLy9yZXBsYWNlcyBhbGwgb2NjdXJyZW5jZXMgb2YgcmFuZG9tKC4uLikgaW4gYSBzdHJpbmcgd2l0aCB0aGUgY2FsY3VsYXRlZCByYW5kb20gdmFsdWUuIGNhbiBiZSBhIHJhbmdlIGxpa2UgcmFuZG9tKC0xMDAsIDEwMCwgNSkgb3IgYW4gYXJyYXkgbGlrZSByYW5kb20oWzAsIDEwMCwgNTAwXSlcbiAgdmFyIHByZXYgPSAwLFxuICAgICAgcyA9IFwiXCIsXG4gICAgICBpLFxuICAgICAgbnVtcyxcbiAgICAgIGVuZCxcbiAgICAgIGlzQXJyYXk7XG5cbiAgd2hpbGUgKH4oaSA9IHZhbHVlLmluZGV4T2YoXCJyYW5kb20oXCIsIHByZXYpKSkge1xuICAgIGVuZCA9IHZhbHVlLmluZGV4T2YoXCIpXCIsIGkpO1xuICAgIGlzQXJyYXkgPSB2YWx1ZS5jaGFyQXQoaSArIDcpID09PSBcIltcIjtcbiAgICBudW1zID0gdmFsdWUuc3Vic3RyKGkgKyA3LCBlbmQgLSBpIC0gNykubWF0Y2goaXNBcnJheSA/IF9kZWxpbWl0ZWRWYWx1ZUV4cCA6IF9zdHJpY3ROdW1FeHApO1xuICAgIHMgKz0gdmFsdWUuc3Vic3RyKHByZXYsIGkgLSBwcmV2KSArIHJhbmRvbShpc0FycmF5ID8gbnVtcyA6ICtudW1zWzBdLCBpc0FycmF5ID8gMCA6ICtudW1zWzFdLCArbnVtc1syXSB8fCAxZS01KTtcbiAgICBwcmV2ID0gZW5kICsgMTtcbiAgfVxuXG4gIHJldHVybiBzICsgdmFsdWUuc3Vic3RyKHByZXYsIHZhbHVlLmxlbmd0aCAtIHByZXYpO1xufSxcbiAgICBtYXBSYW5nZSA9IGZ1bmN0aW9uIG1hcFJhbmdlKGluTWluLCBpbk1heCwgb3V0TWluLCBvdXRNYXgsIHZhbHVlKSB7XG4gIHZhciBpblJhbmdlID0gaW5NYXggLSBpbk1pbixcbiAgICAgIG91dFJhbmdlID0gb3V0TWF4IC0gb3V0TWluO1xuICByZXR1cm4gX2NvbmRpdGlvbmFsUmV0dXJuKHZhbHVlLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gb3V0TWluICsgKCh2YWx1ZSAtIGluTWluKSAvIGluUmFuZ2UgKiBvdXRSYW5nZSB8fCAwKTtcbiAgfSk7XG59LFxuICAgIGludGVycG9sYXRlID0gZnVuY3Rpb24gaW50ZXJwb2xhdGUoc3RhcnQsIGVuZCwgcHJvZ3Jlc3MsIG11dGF0ZSkge1xuICB2YXIgZnVuYyA9IGlzTmFOKHN0YXJ0ICsgZW5kKSA/IDAgOiBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiAoMSAtIHApICogc3RhcnQgKyBwICogZW5kO1xuICB9O1xuXG4gIGlmICghZnVuYykge1xuICAgIHZhciBpc1N0cmluZyA9IF9pc1N0cmluZyhzdGFydCksXG4gICAgICAgIG1hc3RlciA9IHt9LFxuICAgICAgICBwLFxuICAgICAgICBpLFxuICAgICAgICBpbnRlcnBvbGF0b3JzLFxuICAgICAgICBsLFxuICAgICAgICBpbDtcblxuICAgIHByb2dyZXNzID09PSB0cnVlICYmIChtdXRhdGUgPSAxKSAmJiAocHJvZ3Jlc3MgPSBudWxsKTtcblxuICAgIGlmIChpc1N0cmluZykge1xuICAgICAgc3RhcnQgPSB7XG4gICAgICAgIHA6IHN0YXJ0XG4gICAgICB9O1xuICAgICAgZW5kID0ge1xuICAgICAgICBwOiBlbmRcbiAgICAgIH07XG4gICAgfSBlbHNlIGlmIChfaXNBcnJheShzdGFydCkgJiYgIV9pc0FycmF5KGVuZCkpIHtcbiAgICAgIGludGVycG9sYXRvcnMgPSBbXTtcbiAgICAgIGwgPSBzdGFydC5sZW5ndGg7XG4gICAgICBpbCA9IGwgLSAyO1xuXG4gICAgICBmb3IgKGkgPSAxOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGludGVycG9sYXRvcnMucHVzaChpbnRlcnBvbGF0ZShzdGFydFtpIC0gMV0sIHN0YXJ0W2ldKSk7IC8vYnVpbGQgdGhlIGludGVycG9sYXRvcnMgdXAgZnJvbnQgYXMgYSBwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb24gc28gdGhhdCB3aGVuIHRoZSBmdW5jdGlvbiBpcyBjYWxsZWQgbWFueSB0aW1lcywgaXQgY2FuIGp1c3QgcmV1c2UgdGhlbS5cbiAgICAgIH1cblxuICAgICAgbC0tO1xuXG4gICAgICBmdW5jID0gZnVuY3Rpb24gZnVuYyhwKSB7XG4gICAgICAgIHAgKj0gbDtcbiAgICAgICAgdmFyIGkgPSBNYXRoLm1pbihpbCwgfn5wKTtcbiAgICAgICAgcmV0dXJuIGludGVycG9sYXRvcnNbaV0ocCAtIGkpO1xuICAgICAgfTtcblxuICAgICAgcHJvZ3Jlc3MgPSBlbmQ7XG4gICAgfSBlbHNlIGlmICghbXV0YXRlKSB7XG4gICAgICBzdGFydCA9IF9tZXJnZShfaXNBcnJheShzdGFydCkgPyBbXSA6IHt9LCBzdGFydCk7XG4gICAgfVxuXG4gICAgaWYgKCFpbnRlcnBvbGF0b3JzKSB7XG4gICAgICBmb3IgKHAgaW4gZW5kKSB7XG4gICAgICAgIF9hZGRQcm9wVHdlZW4uY2FsbChtYXN0ZXIsIHN0YXJ0LCBwLCBcImdldFwiLCBlbmRbcF0pO1xuICAgICAgfVxuXG4gICAgICBmdW5jID0gZnVuY3Rpb24gZnVuYyhwKSB7XG4gICAgICAgIHJldHVybiBfcmVuZGVyUHJvcFR3ZWVucyhwLCBtYXN0ZXIpIHx8IChpc1N0cmluZyA/IHN0YXJ0LnAgOiBzdGFydCk7XG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBfY29uZGl0aW9uYWxSZXR1cm4ocHJvZ3Jlc3MsIGZ1bmMpO1xufSxcbiAgICBfZ2V0TGFiZWxJbkRpcmVjdGlvbiA9IGZ1bmN0aW9uIF9nZXRMYWJlbEluRGlyZWN0aW9uKHRpbWVsaW5lLCBmcm9tVGltZSwgYmFja3dhcmQpIHtcbiAgLy91c2VkIGZvciBuZXh0TGFiZWwoKSBhbmQgcHJldmlvdXNMYWJlbCgpXG4gIHZhciBsYWJlbHMgPSB0aW1lbGluZS5sYWJlbHMsXG4gICAgICBtaW4gPSBfYmlnTnVtLFxuICAgICAgcCxcbiAgICAgIGRpc3RhbmNlLFxuICAgICAgbGFiZWw7XG5cbiAgZm9yIChwIGluIGxhYmVscykge1xuICAgIGRpc3RhbmNlID0gbGFiZWxzW3BdIC0gZnJvbVRpbWU7XG5cbiAgICBpZiAoZGlzdGFuY2UgPCAwID09PSAhIWJhY2t3YXJkICYmIGRpc3RhbmNlICYmIG1pbiA+IChkaXN0YW5jZSA9IE1hdGguYWJzKGRpc3RhbmNlKSkpIHtcbiAgICAgIGxhYmVsID0gcDtcbiAgICAgIG1pbiA9IGRpc3RhbmNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBsYWJlbDtcbn0sXG4gICAgX2NhbGxiYWNrID0gZnVuY3Rpb24gX2NhbGxiYWNrKGFuaW1hdGlvbiwgdHlwZSwgZXhlY3V0ZUxhenlGaXJzdCkge1xuICB2YXIgdiA9IGFuaW1hdGlvbi52YXJzLFxuICAgICAgY2FsbGJhY2sgPSB2W3R5cGVdLFxuICAgICAgcHJldkNvbnRleHQgPSBfY29udGV4dCxcbiAgICAgIGNvbnRleHQgPSBhbmltYXRpb24uX2N0eCxcbiAgICAgIHBhcmFtcyxcbiAgICAgIHNjb3BlLFxuICAgICAgcmVzdWx0O1xuXG4gIGlmICghY2FsbGJhY2spIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBwYXJhbXMgPSB2W3R5cGUgKyBcIlBhcmFtc1wiXTtcbiAgc2NvcGUgPSB2LmNhbGxiYWNrU2NvcGUgfHwgYW5pbWF0aW9uO1xuICBleGVjdXRlTGF6eUZpcnN0ICYmIF9sYXp5VHdlZW5zLmxlbmd0aCAmJiBfbGF6eVJlbmRlcigpOyAvL2luIGNhc2UgcmVuZGVyaW5nIGNhdXNlZCBhbnkgdHdlZW5zIHRvIGxhenktaW5pdCwgd2Ugc2hvdWxkIHJlbmRlciB0aGVtIGJlY2F1c2UgdHlwaWNhbGx5IHdoZW4gYSB0aW1lbGluZSBmaW5pc2hlcywgdXNlcnMgZXhwZWN0IHRoaW5ncyB0byBoYXZlIHJlbmRlcmVkIGZ1bGx5LiBJbWFnaW5lIGFuIG9uVXBkYXRlIG9uIGEgdGltZWxpbmUgdGhhdCByZXBvcnRzL2NoZWNrcyB0d2VlbmVkIHZhbHVlcy5cblxuICBjb250ZXh0ICYmIChfY29udGV4dCA9IGNvbnRleHQpO1xuICByZXN1bHQgPSBwYXJhbXMgPyBjYWxsYmFjay5hcHBseShzY29wZSwgcGFyYW1zKSA6IGNhbGxiYWNrLmNhbGwoc2NvcGUpO1xuICBfY29udGV4dCA9IHByZXZDb250ZXh0O1xuICByZXR1cm4gcmVzdWx0O1xufSxcbiAgICBfaW50ZXJydXB0ID0gZnVuY3Rpb24gX2ludGVycnVwdChhbmltYXRpb24pIHtcbiAgX3JlbW92ZUZyb21QYXJlbnQoYW5pbWF0aW9uKTtcblxuICBhbmltYXRpb24uc2Nyb2xsVHJpZ2dlciAmJiBhbmltYXRpb24uc2Nyb2xsVHJpZ2dlci5raWxsKCEhX3JldmVydGluZyk7XG4gIGFuaW1hdGlvbi5wcm9ncmVzcygpIDwgMSAmJiBfY2FsbGJhY2soYW5pbWF0aW9uLCBcIm9uSW50ZXJydXB0XCIpO1xuICByZXR1cm4gYW5pbWF0aW9uO1xufSxcbiAgICBfcXVpY2tUd2VlbixcbiAgICBfcmVnaXN0ZXJQbHVnaW5RdWV1ZSA9IFtdLFxuICAgIF9jcmVhdGVQbHVnaW4gPSBmdW5jdGlvbiBfY3JlYXRlUGx1Z2luKGNvbmZpZykge1xuICBpZiAoIWNvbmZpZykgcmV0dXJuO1xuICBjb25maWcgPSAhY29uZmlnLm5hbWUgJiYgY29uZmlnW1wiZGVmYXVsdFwiXSB8fCBjb25maWc7IC8vIFVNRCBwYWNrYWdpbmcgd3JhcHMgdGhpbmdzIG9kZGx5LCBzbyBmb3IgZXhhbXBsZSBNb3Rpb25QYXRoSGVscGVyIGJlY29tZXMge01vdGlvblBhdGhIZWxwZXI6TW90aW9uUGF0aEhlbHBlciwgZGVmYXVsdDpNb3Rpb25QYXRoSGVscGVyfS5cblxuICBpZiAoX3dpbmRvd0V4aXN0cygpIHx8IGNvbmZpZy5oZWFkbGVzcykge1xuICAgIC8vIGVkZ2UgY2FzZTogc29tZSBidWlsZCB0b29scyBtYXkgcGFzcyBpbiBhIG51bGwvdW5kZWZpbmVkIHZhbHVlXG4gICAgdmFyIG5hbWUgPSBjb25maWcubmFtZSxcbiAgICAgICAgaXNGdW5jID0gX2lzRnVuY3Rpb24oY29uZmlnKSxcbiAgICAgICAgUGx1Z2luID0gbmFtZSAmJiAhaXNGdW5jICYmIGNvbmZpZy5pbml0ID8gZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5fcHJvcHMgPSBbXTtcbiAgICB9IDogY29uZmlnLFxuICAgICAgICAvL2luIGNhc2Ugc29tZW9uZSBwYXNzZXMgaW4gYW4gb2JqZWN0IHRoYXQncyBub3QgYSBwbHVnaW4sIGxpa2UgQ3VzdG9tRWFzZVxuICAgIGluc3RhbmNlRGVmYXVsdHMgPSB7XG4gICAgICBpbml0OiBfZW1wdHlGdW5jLFxuICAgICAgcmVuZGVyOiBfcmVuZGVyUHJvcFR3ZWVucyxcbiAgICAgIGFkZDogX2FkZFByb3BUd2VlbixcbiAgICAgIGtpbGw6IF9raWxsUHJvcFR3ZWVuc09mLFxuICAgICAgbW9kaWZpZXI6IF9hZGRQbHVnaW5Nb2RpZmllcixcbiAgICAgIHJhd1ZhcnM6IDBcbiAgICB9LFxuICAgICAgICBzdGF0aWNzID0ge1xuICAgICAgdGFyZ2V0VGVzdDogMCxcbiAgICAgIGdldDogMCxcbiAgICAgIGdldFNldHRlcjogX2dldFNldHRlcixcbiAgICAgIGFsaWFzZXM6IHt9LFxuICAgICAgcmVnaXN0ZXI6IDBcbiAgICB9O1xuXG4gICAgX3dha2UoKTtcblxuICAgIGlmIChjb25maWcgIT09IFBsdWdpbikge1xuICAgICAgaWYgKF9wbHVnaW5zW25hbWVdKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgX3NldERlZmF1bHRzKFBsdWdpbiwgX3NldERlZmF1bHRzKF9jb3B5RXhjbHVkaW5nKGNvbmZpZywgaW5zdGFuY2VEZWZhdWx0cyksIHN0YXRpY3MpKTsgLy9zdGF0aWMgbWV0aG9kc1xuXG5cbiAgICAgIF9tZXJnZShQbHVnaW4ucHJvdG90eXBlLCBfbWVyZ2UoaW5zdGFuY2VEZWZhdWx0cywgX2NvcHlFeGNsdWRpbmcoY29uZmlnLCBzdGF0aWNzKSkpOyAvL2luc3RhbmNlIG1ldGhvZHNcblxuXG4gICAgICBfcGx1Z2luc1tQbHVnaW4ucHJvcCA9IG5hbWVdID0gUGx1Z2luO1xuXG4gICAgICBpZiAoY29uZmlnLnRhcmdldFRlc3QpIHtcbiAgICAgICAgX2hhcm5lc3NQbHVnaW5zLnB1c2goUGx1Z2luKTtcblxuICAgICAgICBfcmVzZXJ2ZWRQcm9wc1tuYW1lXSA9IDE7XG4gICAgICB9XG5cbiAgICAgIG5hbWUgPSAobmFtZSA9PT0gXCJjc3NcIiA/IFwiQ1NTXCIgOiBuYW1lLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zdWJzdHIoMSkpICsgXCJQbHVnaW5cIjsgLy9mb3IgdGhlIGdsb2JhbCBuYW1lLiBcIm1vdGlvblBhdGhcIiBzaG91bGQgYmVjb21lIE1vdGlvblBhdGhQbHVnaW5cbiAgICB9XG5cbiAgICBfYWRkR2xvYmFsKG5hbWUsIFBsdWdpbik7XG5cbiAgICBjb25maWcucmVnaXN0ZXIgJiYgY29uZmlnLnJlZ2lzdGVyKGdzYXAsIFBsdWdpbiwgUHJvcFR3ZWVuKTtcbiAgfSBlbHNlIHtcbiAgICBfcmVnaXN0ZXJQbHVnaW5RdWV1ZS5wdXNoKGNvbmZpZyk7XG4gIH1cbn0sXG5cbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ09MT1JTXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5fMjU1ID0gMjU1LFxuICAgIF9jb2xvckxvb2t1cCA9IHtcbiAgYXF1YTogWzAsIF8yNTUsIF8yNTVdLFxuICBsaW1lOiBbMCwgXzI1NSwgMF0sXG4gIHNpbHZlcjogWzE5MiwgMTkyLCAxOTJdLFxuICBibGFjazogWzAsIDAsIDBdLFxuICBtYXJvb246IFsxMjgsIDAsIDBdLFxuICB0ZWFsOiBbMCwgMTI4LCAxMjhdLFxuICBibHVlOiBbMCwgMCwgXzI1NV0sXG4gIG5hdnk6IFswLCAwLCAxMjhdLFxuICB3aGl0ZTogW18yNTUsIF8yNTUsIF8yNTVdLFxuICBvbGl2ZTogWzEyOCwgMTI4LCAwXSxcbiAgeWVsbG93OiBbXzI1NSwgXzI1NSwgMF0sXG4gIG9yYW5nZTogW18yNTUsIDE2NSwgMF0sXG4gIGdyYXk6IFsxMjgsIDEyOCwgMTI4XSxcbiAgcHVycGxlOiBbMTI4LCAwLCAxMjhdLFxuICBncmVlbjogWzAsIDEyOCwgMF0sXG4gIHJlZDogW18yNTUsIDAsIDBdLFxuICBwaW5rOiBbXzI1NSwgMTkyLCAyMDNdLFxuICBjeWFuOiBbMCwgXzI1NSwgXzI1NV0sXG4gIHRyYW5zcGFyZW50OiBbXzI1NSwgXzI1NSwgXzI1NSwgMF1cbn0sXG4gICAgLy8gcG9zc2libGUgZnV0dXJlIGlkZWEgdG8gcmVwbGFjZSB0aGUgaGFyZC1jb2RlZCBjb2xvciBuYW1lIHZhbHVlcyAtIHB1dCB0aGlzIGluIHRoZSB0aWNrZXIud2FrZSgpIHdoZXJlIHdlIHNldCB0aGUgX2RvYzpcbi8vIGxldCBjdHggPSBfZG9jLmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIikuZ2V0Q29udGV4dChcIjJkXCIpO1xuLy8gX2ZvckVhY2hOYW1lKFwiYXF1YSxsaW1lLHNpbHZlcixibGFjayxtYXJvb24sdGVhbCxibHVlLG5hdnksd2hpdGUsb2xpdmUseWVsbG93LG9yYW5nZSxncmF5LHB1cnBsZSxncmVlbixyZWQscGluayxjeWFuXCIsIGNvbG9yID0+IHtjdHguZmlsbFN0eWxlID0gY29sb3I7IF9jb2xvckxvb2t1cFtjb2xvcl0gPSBzcGxpdENvbG9yKGN0eC5maWxsU3R5bGUpfSk7XG5faHVlID0gZnVuY3Rpb24gX2h1ZShoLCBtMSwgbTIpIHtcbiAgaCArPSBoIDwgMCA/IDEgOiBoID4gMSA/IC0xIDogMDtcbiAgcmV0dXJuIChoICogNiA8IDEgPyBtMSArIChtMiAtIG0xKSAqIGggKiA2IDogaCA8IC41ID8gbTIgOiBoICogMyA8IDIgPyBtMSArIChtMiAtIG0xKSAqICgyIC8gMyAtIGgpICogNiA6IG0xKSAqIF8yNTUgKyAuNSB8IDA7XG59LFxuICAgIHNwbGl0Q29sb3IgPSBmdW5jdGlvbiBzcGxpdENvbG9yKHYsIHRvSFNMLCBmb3JjZUFscGhhKSB7XG4gIHZhciBhID0gIXYgPyBfY29sb3JMb29rdXAuYmxhY2sgOiBfaXNOdW1iZXIodikgPyBbdiA+PiAxNiwgdiA+PiA4ICYgXzI1NSwgdiAmIF8yNTVdIDogMCxcbiAgICAgIHIsXG4gICAgICBnLFxuICAgICAgYixcbiAgICAgIGgsXG4gICAgICBzLFxuICAgICAgbCxcbiAgICAgIG1heCxcbiAgICAgIG1pbixcbiAgICAgIGQsXG4gICAgICB3YXNIU0w7XG5cbiAgaWYgKCFhKSB7XG4gICAgaWYgKHYuc3Vic3RyKC0xKSA9PT0gXCIsXCIpIHtcbiAgICAgIC8vc29tZXRpbWVzIGEgdHJhaWxpbmcgY29tbWEgaXMgaW5jbHVkZWQgYW5kIHdlIHNob3VsZCBjaG9wIGl0IG9mZiAodHlwaWNhbGx5IGZyb20gYSBjb21tYS1kZWxpbWl0ZWQgbGlzdCBvZiB2YWx1ZXMgbGlrZSBhIHRleHRTaGFkb3c6XCIycHggMnB4IDJweCBibHVlLCA1cHggNXB4IDVweCByZ2IoMjU1LDAsMClcIiAtIGluIHRoaXMgZXhhbXBsZSBcImJsdWUsXCIgaGFzIGEgdHJhaWxpbmcgY29tbWEuIFdlIGNvdWxkIHN0cmlwIGl0IG91dCBpbnNpZGUgcGFyc2VDb21wbGV4KCkgYnV0IHdlJ2QgbmVlZCB0byBkbyBpdCB0byB0aGUgYmVnaW5uaW5nIGFuZCBlbmRpbmcgdmFsdWVzIHBsdXMgaXQgd291bGRuJ3QgcHJvdmlkZSBwcm90ZWN0aW9uIGZyb20gb3RoZXIgcG90ZW50aWFsIHNjZW5hcmlvcyBsaWtlIGlmIHRoZSB1c2VyIHBhc3NlcyBpbiBhIHNpbWlsYXIgdmFsdWUuXG4gICAgICB2ID0gdi5zdWJzdHIoMCwgdi5sZW5ndGggLSAxKTtcbiAgICB9XG5cbiAgICBpZiAoX2NvbG9yTG9va3VwW3ZdKSB7XG4gICAgICBhID0gX2NvbG9yTG9va3VwW3ZdO1xuICAgIH0gZWxzZSBpZiAodi5jaGFyQXQoMCkgPT09IFwiI1wiKSB7XG4gICAgICBpZiAodi5sZW5ndGggPCA2KSB7XG4gICAgICAgIC8vZm9yIHNob3J0aGFuZCBsaWtlICM5RjAgb3IgIzlGMEYgKGNvdWxkIGhhdmUgYWxwaGEpXG4gICAgICAgIHIgPSB2LmNoYXJBdCgxKTtcbiAgICAgICAgZyA9IHYuY2hhckF0KDIpO1xuICAgICAgICBiID0gdi5jaGFyQXQoMyk7XG4gICAgICAgIHYgPSBcIiNcIiArIHIgKyByICsgZyArIGcgKyBiICsgYiArICh2Lmxlbmd0aCA9PT0gNSA/IHYuY2hhckF0KDQpICsgdi5jaGFyQXQoNCkgOiBcIlwiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHYubGVuZ3RoID09PSA5KSB7XG4gICAgICAgIC8vIGhleCB3aXRoIGFscGhhLCBsaWtlICNmZDVlNTNmZlxuICAgICAgICBhID0gcGFyc2VJbnQodi5zdWJzdHIoMSwgNiksIDE2KTtcbiAgICAgICAgcmV0dXJuIFthID4+IDE2LCBhID4+IDggJiBfMjU1LCBhICYgXzI1NSwgcGFyc2VJbnQodi5zdWJzdHIoNyksIDE2KSAvIDI1NV07XG4gICAgICB9XG5cbiAgICAgIHYgPSBwYXJzZUludCh2LnN1YnN0cigxKSwgMTYpO1xuICAgICAgYSA9IFt2ID4+IDE2LCB2ID4+IDggJiBfMjU1LCB2ICYgXzI1NV07XG4gICAgfSBlbHNlIGlmICh2LnN1YnN0cigwLCAzKSA9PT0gXCJoc2xcIikge1xuICAgICAgYSA9IHdhc0hTTCA9IHYubWF0Y2goX3N0cmljdE51bUV4cCk7XG5cbiAgICAgIGlmICghdG9IU0wpIHtcbiAgICAgICAgaCA9ICthWzBdICUgMzYwIC8gMzYwO1xuICAgICAgICBzID0gK2FbMV0gLyAxMDA7XG4gICAgICAgIGwgPSArYVsyXSAvIDEwMDtcbiAgICAgICAgZyA9IGwgPD0gLjUgPyBsICogKHMgKyAxKSA6IGwgKyBzIC0gbCAqIHM7XG4gICAgICAgIHIgPSBsICogMiAtIGc7XG4gICAgICAgIGEubGVuZ3RoID4gMyAmJiAoYVszXSAqPSAxKTsgLy9jYXN0IGFzIG51bWJlclxuXG4gICAgICAgIGFbMF0gPSBfaHVlKGggKyAxIC8gMywgciwgZyk7XG4gICAgICAgIGFbMV0gPSBfaHVlKGgsIHIsIGcpO1xuICAgICAgICBhWzJdID0gX2h1ZShoIC0gMSAvIDMsIHIsIGcpO1xuICAgICAgfSBlbHNlIGlmICh+di5pbmRleE9mKFwiPVwiKSkge1xuICAgICAgICAvL2lmIHJlbGF0aXZlIHZhbHVlcyBhcmUgZm91bmQsIGp1c3QgcmV0dXJuIHRoZSByYXcgc3RyaW5ncyB3aXRoIHRoZSByZWxhdGl2ZSBwcmVmaXhlcyBpbiBwbGFjZS5cbiAgICAgICAgYSA9IHYubWF0Y2goX251bUV4cCk7XG4gICAgICAgIGZvcmNlQWxwaGEgJiYgYS5sZW5ndGggPCA0ICYmIChhWzNdID0gMSk7XG4gICAgICAgIHJldHVybiBhO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBhID0gdi5tYXRjaChfc3RyaWN0TnVtRXhwKSB8fCBfY29sb3JMb29rdXAudHJhbnNwYXJlbnQ7XG4gICAgfVxuXG4gICAgYSA9IGEubWFwKE51bWJlcik7XG4gIH1cblxuICBpZiAodG9IU0wgJiYgIXdhc0hTTCkge1xuICAgIHIgPSBhWzBdIC8gXzI1NTtcbiAgICBnID0gYVsxXSAvIF8yNTU7XG4gICAgYiA9IGFbMl0gLyBfMjU1O1xuICAgIG1heCA9IE1hdGgubWF4KHIsIGcsIGIpO1xuICAgIG1pbiA9IE1hdGgubWluKHIsIGcsIGIpO1xuICAgIGwgPSAobWF4ICsgbWluKSAvIDI7XG5cbiAgICBpZiAobWF4ID09PSBtaW4pIHtcbiAgICAgIGggPSBzID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgZCA9IG1heCAtIG1pbjtcbiAgICAgIHMgPSBsID4gMC41ID8gZCAvICgyIC0gbWF4IC0gbWluKSA6IGQgLyAobWF4ICsgbWluKTtcbiAgICAgIGggPSBtYXggPT09IHIgPyAoZyAtIGIpIC8gZCArIChnIDwgYiA/IDYgOiAwKSA6IG1heCA9PT0gZyA/IChiIC0gcikgLyBkICsgMiA6IChyIC0gZykgLyBkICsgNDtcbiAgICAgIGggKj0gNjA7XG4gICAgfVxuXG4gICAgYVswXSA9IH5+KGggKyAuNSk7XG4gICAgYVsxXSA9IH5+KHMgKiAxMDAgKyAuNSk7XG4gICAgYVsyXSA9IH5+KGwgKiAxMDAgKyAuNSk7XG4gIH1cblxuICBmb3JjZUFscGhhICYmIGEubGVuZ3RoIDwgNCAmJiAoYVszXSA9IDEpO1xuICByZXR1cm4gYTtcbn0sXG4gICAgX2NvbG9yT3JkZXJEYXRhID0gZnVuY3Rpb24gX2NvbG9yT3JkZXJEYXRhKHYpIHtcbiAgLy8gc3RyaXBzIG91dCB0aGUgY29sb3JzIGZyb20gdGhlIHN0cmluZywgZmluZHMgYWxsIHRoZSBudW1lcmljIHNsb3RzICh3aXRoIHVuaXRzKSBhbmQgcmV0dXJucyBhbiBhcnJheSBvZiB0aG9zZS4gVGhlIEFycmF5IGFsc28gaGFzIGEgXCJjXCIgcHJvcGVydHkgd2hpY2ggaXMgYW4gQXJyYXkgb2YgdGhlIGluZGV4IHZhbHVlcyB3aGVyZSB0aGUgY29sb3JzIGJlbG9uZy4gVGhpcyBpcyB0byBoZWxwIHdvcmsgYXJvdW5kIGlzc3VlcyB3aGVyZSB0aGVyZSdzIGEgbWlzLW1hdGNoZWQgb3JkZXIgb2YgY29sb3IvbnVtZXJpYyBkYXRhIGxpa2UgZHJvcC1zaGFkb3coI2YwMCAwcHggMXB4IDJweCkgYW5kIGRyb3Atc2hhZG93KDB4IDFweCAycHggI2YwMCkuIFRoaXMgaXMgYmFzaWNhbGx5IGEgaGVscGVyIGZ1bmN0aW9uIHVzZWQgaW4gX2Zvcm1hdENvbG9ycygpXG4gIHZhciB2YWx1ZXMgPSBbXSxcbiAgICAgIGMgPSBbXSxcbiAgICAgIGkgPSAtMTtcbiAgdi5zcGxpdChfY29sb3JFeHApLmZvckVhY2goZnVuY3Rpb24gKHYpIHtcbiAgICB2YXIgYSA9IHYubWF0Y2goX251bVdpdGhVbml0RXhwKSB8fCBbXTtcbiAgICB2YWx1ZXMucHVzaC5hcHBseSh2YWx1ZXMsIGEpO1xuICAgIGMucHVzaChpICs9IGEubGVuZ3RoICsgMSk7XG4gIH0pO1xuICB2YWx1ZXMuYyA9IGM7XG4gIHJldHVybiB2YWx1ZXM7XG59LFxuICAgIF9mb3JtYXRDb2xvcnMgPSBmdW5jdGlvbiBfZm9ybWF0Q29sb3JzKHMsIHRvSFNMLCBvcmRlck1hdGNoRGF0YSkge1xuICB2YXIgcmVzdWx0ID0gXCJcIixcbiAgICAgIGNvbG9ycyA9IChzICsgcmVzdWx0KS5tYXRjaChfY29sb3JFeHApLFxuICAgICAgdHlwZSA9IHRvSFNMID8gXCJoc2xhKFwiIDogXCJyZ2JhKFwiLFxuICAgICAgaSA9IDAsXG4gICAgICBjLFxuICAgICAgc2hlbGwsXG4gICAgICBkLFxuICAgICAgbDtcblxuICBpZiAoIWNvbG9ycykge1xuICAgIHJldHVybiBzO1xuICB9XG5cbiAgY29sb3JzID0gY29sb3JzLm1hcChmdW5jdGlvbiAoY29sb3IpIHtcbiAgICByZXR1cm4gKGNvbG9yID0gc3BsaXRDb2xvcihjb2xvciwgdG9IU0wsIDEpKSAmJiB0eXBlICsgKHRvSFNMID8gY29sb3JbMF0gKyBcIixcIiArIGNvbG9yWzFdICsgXCIlLFwiICsgY29sb3JbMl0gKyBcIiUsXCIgKyBjb2xvclszXSA6IGNvbG9yLmpvaW4oXCIsXCIpKSArIFwiKVwiO1xuICB9KTtcblxuICBpZiAob3JkZXJNYXRjaERhdGEpIHtcbiAgICBkID0gX2NvbG9yT3JkZXJEYXRhKHMpO1xuICAgIGMgPSBvcmRlck1hdGNoRGF0YS5jO1xuXG4gICAgaWYgKGMuam9pbihyZXN1bHQpICE9PSBkLmMuam9pbihyZXN1bHQpKSB7XG4gICAgICBzaGVsbCA9IHMucmVwbGFjZShfY29sb3JFeHAsIFwiMVwiKS5zcGxpdChfbnVtV2l0aFVuaXRFeHApO1xuICAgICAgbCA9IHNoZWxsLmxlbmd0aCAtIDE7XG5cbiAgICAgIGZvciAoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHJlc3VsdCArPSBzaGVsbFtpXSArICh+Yy5pbmRleE9mKGkpID8gY29sb3JzLnNoaWZ0KCkgfHwgdHlwZSArIFwiMCwwLDAsMClcIiA6IChkLmxlbmd0aCA/IGQgOiBjb2xvcnMubGVuZ3RoID8gY29sb3JzIDogb3JkZXJNYXRjaERhdGEpLnNoaWZ0KCkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmICghc2hlbGwpIHtcbiAgICBzaGVsbCA9IHMuc3BsaXQoX2NvbG9yRXhwKTtcbiAgICBsID0gc2hlbGwubGVuZ3RoIC0gMTtcblxuICAgIGZvciAoOyBpIDwgbDsgaSsrKSB7XG4gICAgICByZXN1bHQgKz0gc2hlbGxbaV0gKyBjb2xvcnNbaV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdCArIHNoZWxsW2xdO1xufSxcbiAgICBfY29sb3JFeHAgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzID0gXCIoPzpcXFxcYig/Oig/OnJnYnxyZ2JhfGhzbHxoc2xhKVxcXFwoLis/XFxcXCkpfFxcXFxCIyg/OlswLTlhLWZdezMsNH0pezEsMn1cXFxcYlwiLFxuICAgICAgLy93ZSdsbCBkeW5hbWljYWxseSBidWlsZCB0aGlzIFJlZ3VsYXIgRXhwcmVzc2lvbiB0byBjb25zZXJ2ZSBmaWxlIHNpemUuIEFmdGVyIGJ1aWxkaW5nIGl0LCBpdCB3aWxsIGJlIGFibGUgdG8gZmluZCByZ2IoKSwgcmdiYSgpLCAjIChoZXhhZGVjaW1hbCksIGFuZCBuYW1lZCBjb2xvciB2YWx1ZXMgbGlrZSByZWQsIGJsdWUsIHB1cnBsZSwgZXRjLixcbiAgcDtcblxuICBmb3IgKHAgaW4gX2NvbG9yTG9va3VwKSB7XG4gICAgcyArPSBcInxcIiArIHAgKyBcIlxcXFxiXCI7XG4gIH1cblxuICByZXR1cm4gbmV3IFJlZ0V4cChzICsgXCIpXCIsIFwiZ2lcIik7XG59KCksXG4gICAgX2hzbEV4cCA9IC9oc2xbYV0/XFwoLyxcbiAgICBfY29sb3JTdHJpbmdGaWx0ZXIgPSBmdW5jdGlvbiBfY29sb3JTdHJpbmdGaWx0ZXIoYSkge1xuICB2YXIgY29tYmluZWQgPSBhLmpvaW4oXCIgXCIpLFxuICAgICAgdG9IU0w7XG4gIF9jb2xvckV4cC5sYXN0SW5kZXggPSAwO1xuXG4gIGlmIChfY29sb3JFeHAudGVzdChjb21iaW5lZCkpIHtcbiAgICB0b0hTTCA9IF9oc2xFeHAudGVzdChjb21iaW5lZCk7XG4gICAgYVsxXSA9IF9mb3JtYXRDb2xvcnMoYVsxXSwgdG9IU0wpO1xuICAgIGFbMF0gPSBfZm9ybWF0Q29sb3JzKGFbMF0sIHRvSFNMLCBfY29sb3JPcmRlckRhdGEoYVsxXSkpOyAvLyBtYWtlIHN1cmUgdGhlIG9yZGVyIG9mIG51bWJlcnMvY29sb3JzIG1hdGNoIHdpdGggdGhlIEVORCB2YWx1ZS5cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG59LFxuXG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIFRJQ0tFUlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuX3RpY2tlckFjdGl2ZSxcbiAgICBfdGlja2VyID0gZnVuY3Rpb24gKCkge1xuICB2YXIgX2dldFRpbWUgPSBEYXRlLm5vdyxcbiAgICAgIF9sYWdUaHJlc2hvbGQgPSA1MDAsXG4gICAgICBfYWRqdXN0ZWRMYWcgPSAzMyxcbiAgICAgIF9zdGFydFRpbWUgPSBfZ2V0VGltZSgpLFxuICAgICAgX2xhc3RVcGRhdGUgPSBfc3RhcnRUaW1lLFxuICAgICAgX2dhcCA9IDEwMDAgLyAyNDAsXG4gICAgICBfbmV4dFRpbWUgPSBfZ2FwLFxuICAgICAgX2xpc3RlbmVycyA9IFtdLFxuICAgICAgX2lkLFxuICAgICAgX3JlcSxcbiAgICAgIF9yYWYsXG4gICAgICBfc2VsZixcbiAgICAgIF9kZWx0YSxcbiAgICAgIF9pLFxuICAgICAgX3RpY2sgPSBmdW5jdGlvbiBfdGljayh2KSB7XG4gICAgdmFyIGVsYXBzZWQgPSBfZ2V0VGltZSgpIC0gX2xhc3RVcGRhdGUsXG4gICAgICAgIG1hbnVhbCA9IHYgPT09IHRydWUsXG4gICAgICAgIG92ZXJsYXAsXG4gICAgICAgIGRpc3BhdGNoLFxuICAgICAgICB0aW1lLFxuICAgICAgICBmcmFtZTtcblxuICAgIChlbGFwc2VkID4gX2xhZ1RocmVzaG9sZCB8fCBlbGFwc2VkIDwgMCkgJiYgKF9zdGFydFRpbWUgKz0gZWxhcHNlZCAtIF9hZGp1c3RlZExhZyk7XG4gICAgX2xhc3RVcGRhdGUgKz0gZWxhcHNlZDtcbiAgICB0aW1lID0gX2xhc3RVcGRhdGUgLSBfc3RhcnRUaW1lO1xuICAgIG92ZXJsYXAgPSB0aW1lIC0gX25leHRUaW1lO1xuXG4gICAgaWYgKG92ZXJsYXAgPiAwIHx8IG1hbnVhbCkge1xuICAgICAgZnJhbWUgPSArK19zZWxmLmZyYW1lO1xuICAgICAgX2RlbHRhID0gdGltZSAtIF9zZWxmLnRpbWUgKiAxMDAwO1xuICAgICAgX3NlbGYudGltZSA9IHRpbWUgPSB0aW1lIC8gMTAwMDtcbiAgICAgIF9uZXh0VGltZSArPSBvdmVybGFwICsgKG92ZXJsYXAgPj0gX2dhcCA/IDQgOiBfZ2FwIC0gb3ZlcmxhcCk7XG4gICAgICBkaXNwYXRjaCA9IDE7XG4gICAgfVxuXG4gICAgbWFudWFsIHx8IChfaWQgPSBfcmVxKF90aWNrKSk7IC8vbWFrZSBzdXJlIHRoZSByZXF1ZXN0IGlzIG1hZGUgYmVmb3JlIHdlIGRpc3BhdGNoIHRoZSBcInRpY2tcIiBldmVudCBzbyB0aGF0IHRpbWluZyBpcyBtYWludGFpbmVkLiBPdGhlcndpc2UsIGlmIHByb2Nlc3NpbmcgdGhlIFwidGlja1wiIHJlcXVpcmVzIGEgYnVuY2ggb2YgdGltZSAobGlrZSAxNW1zKSBhbmQgd2UncmUgdXNpbmcgYSBzZXRUaW1lb3V0KCkgdGhhdCdzIGJhc2VkIG9uIDE2LjdtcywgaXQnZCB0ZWNobmljYWxseSB0YWtlIDMxLjdtcyBiZXR3ZWVuIGZyYW1lcyBvdGhlcndpc2UuXG5cbiAgICBpZiAoZGlzcGF0Y2gpIHtcbiAgICAgIGZvciAoX2kgPSAwOyBfaSA8IF9saXN0ZW5lcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIC8vIHVzZSBfaSBhbmQgY2hlY2sgX2xpc3RlbmVycy5sZW5ndGggaW5zdGVhZCBvZiBhIHZhcmlhYmxlIGJlY2F1c2UgYSBsaXN0ZW5lciBjb3VsZCBnZXQgcmVtb3ZlZCBkdXJpbmcgdGhlIGxvb3AsIGFuZCBpZiB0aGF0IGhhcHBlbnMgdG8gYW4gZWxlbWVudCBsZXNzIHRoYW4gdGhlIGN1cnJlbnQgaW5kZXgsIGl0J2QgdGhyb3cgdGhpbmdzIG9mZiBpbiB0aGUgbG9vcC5cbiAgICAgICAgX2xpc3RlbmVyc1tfaV0odGltZSwgX2RlbHRhLCBmcmFtZSwgdik7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIF9zZWxmID0ge1xuICAgIHRpbWU6IDAsXG4gICAgZnJhbWU6IDAsXG4gICAgdGljazogZnVuY3Rpb24gdGljaygpIHtcbiAgICAgIF90aWNrKHRydWUpO1xuICAgIH0sXG4gICAgZGVsdGFSYXRpbzogZnVuY3Rpb24gZGVsdGFSYXRpbyhmcHMpIHtcbiAgICAgIHJldHVybiBfZGVsdGEgLyAoMTAwMCAvIChmcHMgfHwgNjApKTtcbiAgICB9LFxuICAgIHdha2U6IGZ1bmN0aW9uIHdha2UoKSB7XG4gICAgICBpZiAoX2NvcmVSZWFkeSkge1xuICAgICAgICBpZiAoIV9jb3JlSW5pdHRlZCAmJiBfd2luZG93RXhpc3RzKCkpIHtcbiAgICAgICAgICBfd2luID0gX2NvcmVJbml0dGVkID0gd2luZG93O1xuICAgICAgICAgIF9kb2MgPSBfd2luLmRvY3VtZW50IHx8IHt9O1xuICAgICAgICAgIF9nbG9iYWxzLmdzYXAgPSBnc2FwO1xuICAgICAgICAgIChfd2luLmdzYXBWZXJzaW9ucyB8fCAoX3dpbi5nc2FwVmVyc2lvbnMgPSBbXSkpLnB1c2goZ3NhcC52ZXJzaW9uKTtcblxuICAgICAgICAgIF9pbnN0YWxsKF9pbnN0YWxsU2NvcGUgfHwgX3dpbi5HcmVlblNvY2tHbG9iYWxzIHx8ICFfd2luLmdzYXAgJiYgX3dpbiB8fCB7fSk7XG5cbiAgICAgICAgICBfcmVnaXN0ZXJQbHVnaW5RdWV1ZS5mb3JFYWNoKF9jcmVhdGVQbHVnaW4pO1xuICAgICAgICB9XG5cbiAgICAgICAgX3JhZiA9IHR5cGVvZiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgcmVxdWVzdEFuaW1hdGlvbkZyYW1lO1xuICAgICAgICBfaWQgJiYgX3NlbGYuc2xlZXAoKTtcblxuICAgICAgICBfcmVxID0gX3JhZiB8fCBmdW5jdGlvbiAoZikge1xuICAgICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGYsIF9uZXh0VGltZSAtIF9zZWxmLnRpbWUgKiAxMDAwICsgMSB8IDApO1xuICAgICAgICB9O1xuXG4gICAgICAgIF90aWNrZXJBY3RpdmUgPSAxO1xuXG4gICAgICAgIF90aWNrKDIpO1xuICAgICAgfVxuICAgIH0sXG4gICAgc2xlZXA6IGZ1bmN0aW9uIHNsZWVwKCkge1xuICAgICAgKF9yYWYgPyBjYW5jZWxBbmltYXRpb25GcmFtZSA6IGNsZWFyVGltZW91dCkoX2lkKTtcbiAgICAgIF90aWNrZXJBY3RpdmUgPSAwO1xuICAgICAgX3JlcSA9IF9lbXB0eUZ1bmM7XG4gICAgfSxcbiAgICBsYWdTbW9vdGhpbmc6IGZ1bmN0aW9uIGxhZ1Ntb290aGluZyh0aHJlc2hvbGQsIGFkanVzdGVkTGFnKSB7XG4gICAgICBfbGFnVGhyZXNob2xkID0gdGhyZXNob2xkIHx8IEluZmluaXR5OyAvLyB6ZXJvIHNob3VsZCBiZSBpbnRlcnByZXRlZCBhcyBiYXNpY2FsbHkgdW5saW1pdGVkXG5cbiAgICAgIF9hZGp1c3RlZExhZyA9IE1hdGgubWluKGFkanVzdGVkTGFnIHx8IDMzLCBfbGFnVGhyZXNob2xkKTtcbiAgICB9LFxuICAgIGZwczogZnVuY3Rpb24gZnBzKF9mcHMpIHtcbiAgICAgIF9nYXAgPSAxMDAwIC8gKF9mcHMgfHwgMjQwKTtcbiAgICAgIF9uZXh0VGltZSA9IF9zZWxmLnRpbWUgKiAxMDAwICsgX2dhcDtcbiAgICB9LFxuICAgIGFkZDogZnVuY3Rpb24gYWRkKGNhbGxiYWNrLCBvbmNlLCBwcmlvcml0aXplKSB7XG4gICAgICB2YXIgZnVuYyA9IG9uY2UgPyBmdW5jdGlvbiAodCwgZCwgZiwgdikge1xuICAgICAgICBjYWxsYmFjayh0LCBkLCBmLCB2KTtcblxuICAgICAgICBfc2VsZi5yZW1vdmUoZnVuYyk7XG4gICAgICB9IDogY2FsbGJhY2s7XG5cbiAgICAgIF9zZWxmLnJlbW92ZShjYWxsYmFjayk7XG5cbiAgICAgIF9saXN0ZW5lcnNbcHJpb3JpdGl6ZSA/IFwidW5zaGlmdFwiIDogXCJwdXNoXCJdKGZ1bmMpO1xuXG4gICAgICBfd2FrZSgpO1xuXG4gICAgICByZXR1cm4gZnVuYztcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKGNhbGxiYWNrLCBpKSB7XG4gICAgICB+KGkgPSBfbGlzdGVuZXJzLmluZGV4T2YoY2FsbGJhY2spKSAmJiBfbGlzdGVuZXJzLnNwbGljZShpLCAxKSAmJiBfaSA+PSBpICYmIF9pLS07XG4gICAgfSxcbiAgICBfbGlzdGVuZXJzOiBfbGlzdGVuZXJzXG4gIH07XG4gIHJldHVybiBfc2VsZjtcbn0oKSxcbiAgICBfd2FrZSA9IGZ1bmN0aW9uIF93YWtlKCkge1xuICByZXR1cm4gIV90aWNrZXJBY3RpdmUgJiYgX3RpY2tlci53YWtlKCk7XG59LFxuICAgIC8vYWxzbyBlbnN1cmVzIHRoZSBjb3JlIGNsYXNzZXMgYXJlIGluaXRpYWxpemVkLlxuXG4vKlxuKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qIEVBU0lOR1xuKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qL1xuX2Vhc2VNYXAgPSB7fSxcbiAgICBfY3VzdG9tRWFzZUV4cCA9IC9eW1xcZC5cXC1NXVtcXGQuXFwtLFxcc10vLFxuICAgIF9xdW90ZXNFeHAgPSAvW1wiJ10vZyxcbiAgICBfcGFyc2VPYmplY3RJblN0cmluZyA9IGZ1bmN0aW9uIF9wYXJzZU9iamVjdEluU3RyaW5nKHZhbHVlKSB7XG4gIC8vdGFrZXMgYSBzdHJpbmcgbGlrZSBcInt3aWdnbGVzOjEwLCB0eXBlOmFudGljaXBhdGV9KVwiIGFuZCB0dXJucyBpdCBpbnRvIGEgcmVhbCBvYmplY3QuIE5vdGljZSBpdCBlbmRzIGluIFwiKVwiIGFuZCBpbmNsdWRlcyB0aGUge30gd3JhcHBlcnMuIFRoaXMgaXMgYmVjYXVzZSB3ZSBvbmx5IHVzZSB0aGlzIGZ1bmN0aW9uIGZvciBwYXJzaW5nIGVhc2UgY29uZmlncyBhbmQgcHJpb3JpdGl6ZWQgb3B0aW1pemF0aW9uIHJhdGhlciB0aGFuIHJldXNhYmlsaXR5LlxuICB2YXIgb2JqID0ge30sXG4gICAgICBzcGxpdCA9IHZhbHVlLnN1YnN0cigxLCB2YWx1ZS5sZW5ndGggLSAzKS5zcGxpdChcIjpcIiksXG4gICAgICBrZXkgPSBzcGxpdFswXSxcbiAgICAgIGkgPSAxLFxuICAgICAgbCA9IHNwbGl0Lmxlbmd0aCxcbiAgICAgIGluZGV4LFxuICAgICAgdmFsLFxuICAgICAgcGFyc2VkVmFsO1xuXG4gIGZvciAoOyBpIDwgbDsgaSsrKSB7XG4gICAgdmFsID0gc3BsaXRbaV07XG4gICAgaW5kZXggPSBpICE9PSBsIC0gMSA/IHZhbC5sYXN0SW5kZXhPZihcIixcIikgOiB2YWwubGVuZ3RoO1xuICAgIHBhcnNlZFZhbCA9IHZhbC5zdWJzdHIoMCwgaW5kZXgpO1xuICAgIG9ialtrZXldID0gaXNOYU4ocGFyc2VkVmFsKSA/IHBhcnNlZFZhbC5yZXBsYWNlKF9xdW90ZXNFeHAsIFwiXCIpLnRyaW0oKSA6ICtwYXJzZWRWYWw7XG4gICAga2V5ID0gdmFsLnN1YnN0cihpbmRleCArIDEpLnRyaW0oKTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59LFxuICAgIF92YWx1ZUluUGFyZW50aGVzZXMgPSBmdW5jdGlvbiBfdmFsdWVJblBhcmVudGhlc2VzKHZhbHVlKSB7XG4gIHZhciBvcGVuID0gdmFsdWUuaW5kZXhPZihcIihcIikgKyAxLFxuICAgICAgY2xvc2UgPSB2YWx1ZS5pbmRleE9mKFwiKVwiKSxcbiAgICAgIG5lc3RlZCA9IHZhbHVlLmluZGV4T2YoXCIoXCIsIG9wZW4pO1xuICByZXR1cm4gdmFsdWUuc3Vic3RyaW5nKG9wZW4sIH5uZXN0ZWQgJiYgbmVzdGVkIDwgY2xvc2UgPyB2YWx1ZS5pbmRleE9mKFwiKVwiLCBjbG9zZSArIDEpIDogY2xvc2UpO1xufSxcbiAgICBfY29uZmlnRWFzZUZyb21TdHJpbmcgPSBmdW5jdGlvbiBfY29uZmlnRWFzZUZyb21TdHJpbmcobmFtZSkge1xuICAvL25hbWUgY2FuIGJlIGEgc3RyaW5nIGxpa2UgXCJlbGFzdGljLm91dCgxLDAuNSlcIiwgYW5kIHBhc3MgaW4gX2Vhc2VNYXAgYXMgb2JqIGFuZCBpdCdsbCBwYXJzZSBpdCBvdXQgYW5kIGNhbGwgdGhlIGFjdHVhbCBmdW5jdGlvbiBsaWtlIF9lYXNlTWFwLkVsYXN0aWMuZWFzZU91dC5jb25maWcoMSwwLjUpLiBJdCB3aWxsIGFsc28gcGFyc2UgY3VzdG9tIGVhc2Ugc3RyaW5ncyBhcyBsb25nIGFzIEN1c3RvbUVhc2UgaXMgbG9hZGVkIGFuZCByZWdpc3RlcmVkIChpbnRlcm5hbGx5IGFzIF9lYXNlTWFwLl9DRSkuXG4gIHZhciBzcGxpdCA9IChuYW1lICsgXCJcIikuc3BsaXQoXCIoXCIpLFxuICAgICAgZWFzZSA9IF9lYXNlTWFwW3NwbGl0WzBdXTtcbiAgcmV0dXJuIGVhc2UgJiYgc3BsaXQubGVuZ3RoID4gMSAmJiBlYXNlLmNvbmZpZyA/IGVhc2UuY29uZmlnLmFwcGx5KG51bGwsIH5uYW1lLmluZGV4T2YoXCJ7XCIpID8gW19wYXJzZU9iamVjdEluU3RyaW5nKHNwbGl0WzFdKV0gOiBfdmFsdWVJblBhcmVudGhlc2VzKG5hbWUpLnNwbGl0KFwiLFwiKS5tYXAoX251bWVyaWNJZlBvc3NpYmxlKSkgOiBfZWFzZU1hcC5fQ0UgJiYgX2N1c3RvbUVhc2VFeHAudGVzdChuYW1lKSA/IF9lYXNlTWFwLl9DRShcIlwiLCBuYW1lKSA6IGVhc2U7XG59LFxuICAgIF9pbnZlcnRFYXNlID0gZnVuY3Rpb24gX2ludmVydEVhc2UoZWFzZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gMSAtIGVhc2UoMSAtIHApO1xuICB9O1xufSxcbiAgICAvLyBhbGxvdyB5b3lvRWFzZSB0byBiZSBzZXQgaW4gY2hpbGRyZW4gYW5kIGhhdmUgdGhvc2UgYWZmZWN0ZWQgd2hlbiB0aGUgcGFyZW50L2FuY2VzdG9yIHRpbWVsaW5lIHlveW9zLlxuX3Byb3BhZ2F0ZVlveW9FYXNlID0gZnVuY3Rpb24gX3Byb3BhZ2F0ZVlveW9FYXNlKHRpbWVsaW5lLCBpc1lveW8pIHtcbiAgdmFyIGNoaWxkID0gdGltZWxpbmUuX2ZpcnN0LFxuICAgICAgZWFzZTtcblxuICB3aGlsZSAoY2hpbGQpIHtcbiAgICBpZiAoY2hpbGQgaW5zdGFuY2VvZiBUaW1lbGluZSkge1xuICAgICAgX3Byb3BhZ2F0ZVlveW9FYXNlKGNoaWxkLCBpc1lveW8pO1xuICAgIH0gZWxzZSBpZiAoY2hpbGQudmFycy55b3lvRWFzZSAmJiAoIWNoaWxkLl95b3lvIHx8ICFjaGlsZC5fcmVwZWF0KSAmJiBjaGlsZC5feW95byAhPT0gaXNZb3lvKSB7XG4gICAgICBpZiAoY2hpbGQudGltZWxpbmUpIHtcbiAgICAgICAgX3Byb3BhZ2F0ZVlveW9FYXNlKGNoaWxkLnRpbWVsaW5lLCBpc1lveW8pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWFzZSA9IGNoaWxkLl9lYXNlO1xuICAgICAgICBjaGlsZC5fZWFzZSA9IGNoaWxkLl95RWFzZTtcbiAgICAgICAgY2hpbGQuX3lFYXNlID0gZWFzZTtcbiAgICAgICAgY2hpbGQuX3lveW8gPSBpc1lveW87XG4gICAgICB9XG4gICAgfVxuXG4gICAgY2hpbGQgPSBjaGlsZC5fbmV4dDtcbiAgfVxufSxcbiAgICBfcGFyc2VFYXNlID0gZnVuY3Rpb24gX3BhcnNlRWFzZShlYXNlLCBkZWZhdWx0RWFzZSkge1xuICByZXR1cm4gIWVhc2UgPyBkZWZhdWx0RWFzZSA6IChfaXNGdW5jdGlvbihlYXNlKSA/IGVhc2UgOiBfZWFzZU1hcFtlYXNlXSB8fCBfY29uZmlnRWFzZUZyb21TdHJpbmcoZWFzZSkpIHx8IGRlZmF1bHRFYXNlO1xufSxcbiAgICBfaW5zZXJ0RWFzZSA9IGZ1bmN0aW9uIF9pbnNlcnRFYXNlKG5hbWVzLCBlYXNlSW4sIGVhc2VPdXQsIGVhc2VJbk91dCkge1xuICBpZiAoZWFzZU91dCA9PT0gdm9pZCAwKSB7XG4gICAgZWFzZU91dCA9IGZ1bmN0aW9uIGVhc2VPdXQocCkge1xuICAgICAgcmV0dXJuIDEgLSBlYXNlSW4oMSAtIHApO1xuICAgIH07XG4gIH1cblxuICBpZiAoZWFzZUluT3V0ID09PSB2b2lkIDApIHtcbiAgICBlYXNlSW5PdXQgPSBmdW5jdGlvbiBlYXNlSW5PdXQocCkge1xuICAgICAgcmV0dXJuIHAgPCAuNSA/IGVhc2VJbihwICogMikgLyAyIDogMSAtIGVhc2VJbigoMSAtIHApICogMikgLyAyO1xuICAgIH07XG4gIH1cblxuICB2YXIgZWFzZSA9IHtcbiAgICBlYXNlSW46IGVhc2VJbixcbiAgICBlYXNlT3V0OiBlYXNlT3V0LFxuICAgIGVhc2VJbk91dDogZWFzZUluT3V0XG4gIH0sXG4gICAgICBsb3dlcmNhc2VOYW1lO1xuXG4gIF9mb3JFYWNoTmFtZShuYW1lcywgZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBfZWFzZU1hcFtuYW1lXSA9IF9nbG9iYWxzW25hbWVdID0gZWFzZTtcbiAgICBfZWFzZU1hcFtsb3dlcmNhc2VOYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpXSA9IGVhc2VPdXQ7XG5cbiAgICBmb3IgKHZhciBwIGluIGVhc2UpIHtcbiAgICAgIF9lYXNlTWFwW2xvd2VyY2FzZU5hbWUgKyAocCA9PT0gXCJlYXNlSW5cIiA/IFwiLmluXCIgOiBwID09PSBcImVhc2VPdXRcIiA/IFwiLm91dFwiIDogXCIuaW5PdXRcIildID0gX2Vhc2VNYXBbbmFtZSArIFwiLlwiICsgcF0gPSBlYXNlW3BdO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGVhc2U7XG59LFxuICAgIF9lYXNlSW5PdXRGcm9tT3V0ID0gZnVuY3Rpb24gX2Vhc2VJbk91dEZyb21PdXQoZWFzZU91dCkge1xuICByZXR1cm4gZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gcCA8IC41ID8gKDEgLSBlYXNlT3V0KDEgLSBwICogMikpIC8gMiA6IC41ICsgZWFzZU91dCgocCAtIC41KSAqIDIpIC8gMjtcbiAgfTtcbn0sXG4gICAgX2NvbmZpZ0VsYXN0aWMgPSBmdW5jdGlvbiBfY29uZmlnRWxhc3RpYyh0eXBlLCBhbXBsaXR1ZGUsIHBlcmlvZCkge1xuICB2YXIgcDEgPSBhbXBsaXR1ZGUgPj0gMSA/IGFtcGxpdHVkZSA6IDEsXG4gICAgICAvL25vdGU6IGlmIGFtcGxpdHVkZSBpcyA8IDEsIHdlIHNpbXBseSBhZGp1c3QgdGhlIHBlcmlvZCBmb3IgYSBtb3JlIG5hdHVyYWwgZmVlbC4gT3RoZXJ3aXNlIHRoZSBtYXRoIGRvZXNuJ3Qgd29yayByaWdodCBhbmQgdGhlIGN1cnZlIHN0YXJ0cyBhdCAxLlxuICBwMiA9IChwZXJpb2QgfHwgKHR5cGUgPyAuMyA6IC40NSkpIC8gKGFtcGxpdHVkZSA8IDEgPyBhbXBsaXR1ZGUgOiAxKSxcbiAgICAgIHAzID0gcDIgLyBfMlBJICogKE1hdGguYXNpbigxIC8gcDEpIHx8IDApLFxuICAgICAgZWFzZU91dCA9IGZ1bmN0aW9uIGVhc2VPdXQocCkge1xuICAgIHJldHVybiBwID09PSAxID8gMSA6IHAxICogTWF0aC5wb3coMiwgLTEwICogcCkgKiBfc2luKChwIC0gcDMpICogcDIpICsgMTtcbiAgfSxcbiAgICAgIGVhc2UgPSB0eXBlID09PSBcIm91dFwiID8gZWFzZU91dCA6IHR5cGUgPT09IFwiaW5cIiA/IGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIDEgLSBlYXNlT3V0KDEgLSBwKTtcbiAgfSA6IF9lYXNlSW5PdXRGcm9tT3V0KGVhc2VPdXQpO1xuXG4gIHAyID0gXzJQSSAvIHAyOyAvL3ByZWNhbGN1bGF0ZSB0byBvcHRpbWl6ZVxuXG4gIGVhc2UuY29uZmlnID0gZnVuY3Rpb24gKGFtcGxpdHVkZSwgcGVyaW9kKSB7XG4gICAgcmV0dXJuIF9jb25maWdFbGFzdGljKHR5cGUsIGFtcGxpdHVkZSwgcGVyaW9kKTtcbiAgfTtcblxuICByZXR1cm4gZWFzZTtcbn0sXG4gICAgX2NvbmZpZ0JhY2sgPSBmdW5jdGlvbiBfY29uZmlnQmFjayh0eXBlLCBvdmVyc2hvb3QpIHtcbiAgaWYgKG92ZXJzaG9vdCA9PT0gdm9pZCAwKSB7XG4gICAgb3ZlcnNob290ID0gMS43MDE1ODtcbiAgfVxuXG4gIHZhciBlYXNlT3V0ID0gZnVuY3Rpb24gZWFzZU91dChwKSB7XG4gICAgcmV0dXJuIHAgPyAtLXAgKiBwICogKChvdmVyc2hvb3QgKyAxKSAqIHAgKyBvdmVyc2hvb3QpICsgMSA6IDA7XG4gIH0sXG4gICAgICBlYXNlID0gdHlwZSA9PT0gXCJvdXRcIiA/IGVhc2VPdXQgOiB0eXBlID09PSBcImluXCIgPyBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiAxIC0gZWFzZU91dCgxIC0gcCk7XG4gIH0gOiBfZWFzZUluT3V0RnJvbU91dChlYXNlT3V0KTtcblxuICBlYXNlLmNvbmZpZyA9IGZ1bmN0aW9uIChvdmVyc2hvb3QpIHtcbiAgICByZXR1cm4gX2NvbmZpZ0JhY2sodHlwZSwgb3ZlcnNob290KTtcbiAgfTtcblxuICByZXR1cm4gZWFzZTtcbn07IC8vIGEgY2hlYXBlciAoa2IgYW5kIGNwdSkgYnV0IG1vcmUgbWlsZCB3YXkgdG8gZ2V0IGEgcGFyYW1ldGVyaXplZCB3ZWlnaHRlZCBlYXNlIGJ5IGZlZWRpbmcgaW4gYSB2YWx1ZSBiZXR3ZWVuIC0xIChlYXNlSW4pIGFuZCAxIChlYXNlT3V0KSB3aGVyZSAwIGlzIGxpbmVhci5cbi8vIF93ZWlnaHRlZEVhc2UgPSByYXRpbyA9PiB7XG4vLyBcdGxldCB5ID0gMC41ICsgcmF0aW8gLyAyO1xuLy8gXHRyZXR1cm4gcCA9PiAoMiAqICgxIC0gcCkgKiBwICogeSArIHAgKiBwKTtcbi8vIH0sXG4vLyBhIHN0cm9uZ2VyIChidXQgbW9yZSBleHBlbnNpdmUga2IvY3B1KSBwYXJhbWV0ZXJpemVkIHdlaWdodGVkIGVhc2UgdGhhdCBsZXRzIHlvdSBmZWVkIGluIGEgdmFsdWUgYmV0d2VlbiAtMSAoZWFzZUluKSBhbmQgMSAoZWFzZU91dCkgd2hlcmUgMCBpcyBsaW5lYXIuXG4vLyBfd2VpZ2h0ZWRFYXNlU3Ryb25nID0gcmF0aW8gPT4ge1xuLy8gXHRyYXRpbyA9IC41ICsgcmF0aW8gLyAyO1xuLy8gXHRsZXQgbyA9IDEgLyAzICogKHJhdGlvIDwgLjUgPyByYXRpbyA6IDEgLSByYXRpbyksXG4vLyBcdFx0YiA9IHJhdGlvIC0gbyxcbi8vIFx0XHRjID0gcmF0aW8gKyBvO1xuLy8gXHRyZXR1cm4gcCA9PiBwID09PSAxID8gcCA6IDMgKiBiICogKDEgLSBwKSAqICgxIC0gcCkgKiBwICsgMyAqIGMgKiAoMSAtIHApICogcCAqIHAgKyBwICogcCAqIHA7XG4vLyB9O1xuXG5cbl9mb3JFYWNoTmFtZShcIkxpbmVhcixRdWFkLEN1YmljLFF1YXJ0LFF1aW50LFN0cm9uZ1wiLCBmdW5jdGlvbiAobmFtZSwgaSkge1xuICB2YXIgcG93ZXIgPSBpIDwgNSA/IGkgKyAxIDogaTtcblxuICBfaW5zZXJ0RWFzZShuYW1lICsgXCIsUG93ZXJcIiArIChwb3dlciAtIDEpLCBpID8gZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gTWF0aC5wb3cocCwgcG93ZXIpO1xuICB9IDogZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gcDtcbiAgfSwgZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gMSAtIE1hdGgucG93KDEgLSBwLCBwb3dlcik7XG4gIH0sIGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIHAgPCAuNSA/IE1hdGgucG93KHAgKiAyLCBwb3dlcikgLyAyIDogMSAtIE1hdGgucG93KCgxIC0gcCkgKiAyLCBwb3dlcikgLyAyO1xuICB9KTtcbn0pO1xuXG5fZWFzZU1hcC5MaW5lYXIuZWFzZU5vbmUgPSBfZWFzZU1hcC5ub25lID0gX2Vhc2VNYXAuTGluZWFyLmVhc2VJbjtcblxuX2luc2VydEVhc2UoXCJFbGFzdGljXCIsIF9jb25maWdFbGFzdGljKFwiaW5cIiksIF9jb25maWdFbGFzdGljKFwib3V0XCIpLCBfY29uZmlnRWxhc3RpYygpKTtcblxuKGZ1bmN0aW9uIChuLCBjKSB7XG4gIHZhciBuMSA9IDEgLyBjLFxuICAgICAgbjIgPSAyICogbjEsXG4gICAgICBuMyA9IDIuNSAqIG4xLFxuICAgICAgZWFzZU91dCA9IGZ1bmN0aW9uIGVhc2VPdXQocCkge1xuICAgIHJldHVybiBwIDwgbjEgPyBuICogcCAqIHAgOiBwIDwgbjIgPyBuICogTWF0aC5wb3cocCAtIDEuNSAvIGMsIDIpICsgLjc1IDogcCA8IG4zID8gbiAqIChwIC09IDIuMjUgLyBjKSAqIHAgKyAuOTM3NSA6IG4gKiBNYXRoLnBvdyhwIC0gMi42MjUgLyBjLCAyKSArIC45ODQzNzU7XG4gIH07XG5cbiAgX2luc2VydEVhc2UoXCJCb3VuY2VcIiwgZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gMSAtIGVhc2VPdXQoMSAtIHApO1xuICB9LCBlYXNlT3V0KTtcbn0pKDcuNTYyNSwgMi43NSk7XG5cbl9pbnNlcnRFYXNlKFwiRXhwb1wiLCBmdW5jdGlvbiAocCkge1xuICByZXR1cm4gcCA/IE1hdGgucG93KDIsIDEwICogKHAgLSAxKSkgOiAwO1xufSk7XG5cbl9pbnNlcnRFYXNlKFwiQ2lyY1wiLCBmdW5jdGlvbiAocCkge1xuICByZXR1cm4gLShfc3FydCgxIC0gcCAqIHApIC0gMSk7XG59KTtcblxuX2luc2VydEVhc2UoXCJTaW5lXCIsIGZ1bmN0aW9uIChwKSB7XG4gIHJldHVybiBwID09PSAxID8gMSA6IC1fY29zKHAgKiBfSEFMRl9QSSkgKyAxO1xufSk7XG5cbl9pbnNlcnRFYXNlKFwiQmFja1wiLCBfY29uZmlnQmFjayhcImluXCIpLCBfY29uZmlnQmFjayhcIm91dFwiKSwgX2NvbmZpZ0JhY2soKSk7XG5cbl9lYXNlTWFwLlN0ZXBwZWRFYXNlID0gX2Vhc2VNYXAuc3RlcHMgPSBfZ2xvYmFscy5TdGVwcGVkRWFzZSA9IHtcbiAgY29uZmlnOiBmdW5jdGlvbiBjb25maWcoc3RlcHMsIGltbWVkaWF0ZVN0YXJ0KSB7XG4gICAgaWYgKHN0ZXBzID09PSB2b2lkIDApIHtcbiAgICAgIHN0ZXBzID0gMTtcbiAgICB9XG5cbiAgICB2YXIgcDEgPSAxIC8gc3RlcHMsXG4gICAgICAgIHAyID0gc3RlcHMgKyAoaW1tZWRpYXRlU3RhcnQgPyAwIDogMSksXG4gICAgICAgIHAzID0gaW1tZWRpYXRlU3RhcnQgPyAxIDogMCxcbiAgICAgICAgbWF4ID0gMSAtIF90aW55TnVtO1xuICAgIHJldHVybiBmdW5jdGlvbiAocCkge1xuICAgICAgcmV0dXJuICgocDIgKiBfY2xhbXAoMCwgbWF4LCBwKSB8IDApICsgcDMpICogcDE7XG4gICAgfTtcbiAgfVxufTtcbl9kZWZhdWx0cy5lYXNlID0gX2Vhc2VNYXBbXCJxdWFkLm91dFwiXTtcblxuX2ZvckVhY2hOYW1lKFwib25Db21wbGV0ZSxvblVwZGF0ZSxvblN0YXJ0LG9uUmVwZWF0LG9uUmV2ZXJzZUNvbXBsZXRlLG9uSW50ZXJydXB0XCIsIGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBfY2FsbGJhY2tOYW1lcyArPSBuYW1lICsgXCIsXCIgKyBuYW1lICsgXCJQYXJhbXMsXCI7XG59KTtcbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ0FDSEVcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuXG5leHBvcnQgdmFyIEdTQ2FjaGUgPSBmdW5jdGlvbiBHU0NhY2hlKHRhcmdldCwgaGFybmVzcykge1xuICB0aGlzLmlkID0gX2dzSUQrKztcbiAgdGFyZ2V0Ll9nc2FwID0gdGhpcztcbiAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gIHRoaXMuaGFybmVzcyA9IGhhcm5lc3M7XG4gIHRoaXMuZ2V0ID0gaGFybmVzcyA/IGhhcm5lc3MuZ2V0IDogX2dldFByb3BlcnR5O1xuICB0aGlzLnNldCA9IGhhcm5lc3MgPyBoYXJuZXNzLmdldFNldHRlciA6IF9nZXRTZXR0ZXI7XG59O1xuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBBTklNQVRJT05cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuZXhwb3J0IHZhciBBbmltYXRpb24gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBBbmltYXRpb24odmFycykge1xuICAgIHRoaXMudmFycyA9IHZhcnM7XG4gICAgdGhpcy5fZGVsYXkgPSArdmFycy5kZWxheSB8fCAwO1xuXG4gICAgaWYgKHRoaXMuX3JlcGVhdCA9IHZhcnMucmVwZWF0ID09PSBJbmZpbml0eSA/IC0yIDogdmFycy5yZXBlYXQgfHwgMCkge1xuICAgICAgLy8gVE9ETzogcmVwZWF0OiBJbmZpbml0eSBvbiBhIHRpbWVsaW5lJ3MgY2hpbGRyZW4gbXVzdCBmbGFnIHRoYXQgdGltZWxpbmUgaW50ZXJuYWxseSBhbmQgYWZmZWN0IGl0cyB0b3RhbER1cmF0aW9uLCBvdGhlcndpc2UgaXQnbGwgc3RvcCBpbiB0aGUgbmVnYXRpdmUgZGlyZWN0aW9uIHdoZW4gcmVhY2hpbmcgdGhlIHN0YXJ0LlxuICAgICAgdGhpcy5fckRlbGF5ID0gdmFycy5yZXBlYXREZWxheSB8fCAwO1xuICAgICAgdGhpcy5feW95byA9ICEhdmFycy55b3lvIHx8ICEhdmFycy55b3lvRWFzZTtcbiAgICB9XG5cbiAgICB0aGlzLl90cyA9IDE7XG5cbiAgICBfc2V0RHVyYXRpb24odGhpcywgK3ZhcnMuZHVyYXRpb24sIDEsIDEpO1xuXG4gICAgdGhpcy5kYXRhID0gdmFycy5kYXRhO1xuXG4gICAgaWYgKF9jb250ZXh0KSB7XG4gICAgICB0aGlzLl9jdHggPSBfY29udGV4dDtcblxuICAgICAgX2NvbnRleHQuZGF0YS5wdXNoKHRoaXMpO1xuICAgIH1cblxuICAgIF90aWNrZXJBY3RpdmUgfHwgX3RpY2tlci53YWtlKCk7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gQW5pbWF0aW9uLnByb3RvdHlwZTtcblxuICBfcHJvdG8uZGVsYXkgPSBmdW5jdGlvbiBkZWxheSh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSB8fCB2YWx1ZSA9PT0gMCkge1xuICAgICAgdGhpcy5wYXJlbnQgJiYgdGhpcy5wYXJlbnQuc21vb3RoQ2hpbGRUaW1pbmcgJiYgdGhpcy5zdGFydFRpbWUodGhpcy5fc3RhcnQgKyB2YWx1ZSAtIHRoaXMuX2RlbGF5KTtcbiAgICAgIHRoaXMuX2RlbGF5ID0gdmFsdWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fZGVsYXk7XG4gIH07XG5cbiAgX3Byb3RvLmR1cmF0aW9uID0gZnVuY3Rpb24gZHVyYXRpb24odmFsdWUpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRoaXMudG90YWxEdXJhdGlvbih0aGlzLl9yZXBlYXQgPiAwID8gdmFsdWUgKyAodmFsdWUgKyB0aGlzLl9yRGVsYXkpICogdGhpcy5fcmVwZWF0IDogdmFsdWUpIDogdGhpcy50b3RhbER1cmF0aW9uKCkgJiYgdGhpcy5fZHVyO1xuICB9O1xuXG4gIF9wcm90by50b3RhbER1cmF0aW9uID0gZnVuY3Rpb24gdG90YWxEdXJhdGlvbih2YWx1ZSkge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3REdXI7XG4gICAgfVxuXG4gICAgdGhpcy5fZGlydHkgPSAwO1xuICAgIHJldHVybiBfc2V0RHVyYXRpb24odGhpcywgdGhpcy5fcmVwZWF0IDwgMCA/IHZhbHVlIDogKHZhbHVlIC0gdGhpcy5fcmVwZWF0ICogdGhpcy5fckRlbGF5KSAvICh0aGlzLl9yZXBlYXQgKyAxKSk7XG4gIH07XG5cbiAgX3Byb3RvLnRvdGFsVGltZSA9IGZ1bmN0aW9uIHRvdGFsVGltZShfdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIF93YWtlKCk7XG5cbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB0aGlzLl90VGltZTtcbiAgICB9XG5cbiAgICB2YXIgcGFyZW50ID0gdGhpcy5fZHA7XG5cbiAgICBpZiAocGFyZW50ICYmIHBhcmVudC5zbW9vdGhDaGlsZFRpbWluZyAmJiB0aGlzLl90cykge1xuICAgICAgX2FsaWduUGxheWhlYWQodGhpcywgX3RvdGFsVGltZSk7XG5cbiAgICAgICFwYXJlbnQuX2RwIHx8IHBhcmVudC5wYXJlbnQgfHwgX3Bvc3RBZGRDaGVja3MocGFyZW50LCB0aGlzKTsgLy8gZWRnZSBjYXNlOiBpZiB0aGlzIGlzIGEgY2hpbGQgb2YgYSB0aW1lbGluZSB0aGF0IGFscmVhZHkgY29tcGxldGVkLCBmb3IgZXhhbXBsZSwgd2UgbXVzdCByZS1hY3RpdmF0ZSB0aGUgcGFyZW50LlxuICAgICAgLy9pbiBjYXNlIGFueSBvZiB0aGUgYW5jZXN0b3IgdGltZWxpbmVzIGhhZCBjb21wbGV0ZWQgYnV0IHNob3VsZCBub3cgYmUgZW5hYmxlZCwgd2Ugc2hvdWxkIHJlc2V0IHRoZWlyIHRvdGFsVGltZSgpIHdoaWNoIHdpbGwgYWxzbyBlbnN1cmUgdGhhdCB0aGV5J3JlIGxpbmVkIHVwIHByb3Blcmx5IGFuZCBlbmFibGVkLiBTa2lwIGZvciBhbmltYXRpb25zIHRoYXQgYXJlIG9uIHRoZSByb290ICh3YXN0ZWZ1bCkuIEV4YW1wbGU6IGEgVGltZWxpbmVMaXRlLmV4cG9ydFJvb3QoKSBpcyBwZXJmb3JtZWQgd2hlbiB0aGVyZSdzIGEgcGF1c2VkIHR3ZWVuIG9uIHRoZSByb290LCB0aGUgZXhwb3J0IHdpbGwgbm90IGNvbXBsZXRlIHVudGlsIHRoYXQgdHdlZW4gaXMgdW5wYXVzZWQsIGJ1dCBpbWFnaW5lIGEgY2hpbGQgZ2V0cyByZXN0YXJ0ZWQgbGF0ZXIsIGFmdGVyIGFsbCBbdW5wYXVzZWRdIHR3ZWVucyBoYXZlIGNvbXBsZXRlZC4gVGhlIHN0YXJ0IG9mIHRoYXQgY2hpbGQgd291bGQgZ2V0IHB1c2hlZCBvdXQsIGJ1dCBvbmUgb2YgdGhlIGFuY2VzdG9ycyBtYXkgaGF2ZSBjb21wbGV0ZWQuXG5cbiAgICAgIHdoaWxlIChwYXJlbnQgJiYgcGFyZW50LnBhcmVudCkge1xuICAgICAgICBpZiAocGFyZW50LnBhcmVudC5fdGltZSAhPT0gcGFyZW50Ll9zdGFydCArIChwYXJlbnQuX3RzID49IDAgPyBwYXJlbnQuX3RUaW1lIC8gcGFyZW50Ll90cyA6IChwYXJlbnQudG90YWxEdXJhdGlvbigpIC0gcGFyZW50Ll90VGltZSkgLyAtcGFyZW50Ll90cykpIHtcbiAgICAgICAgICBwYXJlbnQudG90YWxUaW1lKHBhcmVudC5fdFRpbWUsIHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLnBhcmVudCAmJiB0aGlzLl9kcC5hdXRvUmVtb3ZlQ2hpbGRyZW4gJiYgKHRoaXMuX3RzID4gMCAmJiBfdG90YWxUaW1lIDwgdGhpcy5fdER1ciB8fCB0aGlzLl90cyA8IDAgJiYgX3RvdGFsVGltZSA+IDAgfHwgIXRoaXMuX3REdXIgJiYgIV90b3RhbFRpbWUpKSB7XG4gICAgICAgIC8vaWYgdGhlIGFuaW1hdGlvbiBkb2Vzbid0IGhhdmUgYSBwYXJlbnQsIHB1dCBpdCBiYWNrIGludG8gaXRzIGxhc3QgcGFyZW50IChyZWNvcmRlZCBhcyBfZHAgZm9yIGV4YWN0bHkgY2FzZXMgbGlrZSB0aGlzKS4gTGltaXQgdG8gcGFyZW50cyB3aXRoIGF1dG9SZW1vdmVDaGlsZHJlbiAobGlrZSBnbG9iYWxUaW1lbGluZSkgc28gdGhhdCBpZiB0aGUgdXNlciBtYW51YWxseSByZW1vdmVzIGFuIGFuaW1hdGlvbiBmcm9tIGEgdGltZWxpbmUgYW5kIHRoZW4gYWx0ZXJzIGl0cyBwbGF5aGVhZCwgaXQgZG9lc24ndCBnZXQgYWRkZWQgYmFjayBpbi5cbiAgICAgICAgX2FkZFRvVGltZWxpbmUodGhpcy5fZHAsIHRoaXMsIHRoaXMuX3N0YXJ0IC0gdGhpcy5fZGVsYXkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLl90VGltZSAhPT0gX3RvdGFsVGltZSB8fCAhdGhpcy5fZHVyICYmICFzdXBwcmVzc0V2ZW50cyB8fCB0aGlzLl9pbml0dGVkICYmIE1hdGguYWJzKHRoaXMuX3pUaW1lKSA9PT0gX3RpbnlOdW0gfHwgIV90b3RhbFRpbWUgJiYgIXRoaXMuX2luaXR0ZWQgJiYgKHRoaXMuYWRkIHx8IHRoaXMuX3B0TG9va3VwKSkge1xuICAgICAgLy8gY2hlY2sgZm9yIF9wdExvb2t1cCBvbiBhIFR3ZWVuIGluc3RhbmNlIHRvIGVuc3VyZSBpdCBoYXMgYWN0dWFsbHkgZmluaXNoZWQgYmVpbmcgaW5zdGFudGlhdGVkLCBvdGhlcndpc2UgaWYgdGhpcy5yZXZlcnNlKCkgZ2V0cyBjYWxsZWQgaW4gdGhlIEFuaW1hdGlvbiBjb25zdHJ1Y3RvciwgaXQgY291bGQgdHJpZ2dlciBhIHJlbmRlcigpIGhlcmUgZXZlbiB0aG91Z2ggdGhlIF90YXJnZXRzIHdlcmVuJ3QgcG9wdWxhdGVkLCB0aHVzIHdoZW4gX2luaXQoKSBpcyBjYWxsZWQgdGhlcmUgd29uJ3QgYmUgYW55IFByb3BUd2VlbnMgKGl0J2xsIGFjdCBsaWtlIHRoZSB0d2VlbiBpcyBub24tZnVuY3Rpb25hbClcbiAgICAgIHRoaXMuX3RzIHx8ICh0aGlzLl9wVGltZSA9IF90b3RhbFRpbWUpOyAvLyBvdGhlcndpc2UsIGlmIGFuIGFuaW1hdGlvbiBpcyBwYXVzZWQsIHRoZW4gdGhlIHBsYXloZWFkIGlzIG1vdmVkIGJhY2sgdG8gemVybywgdGhlbiByZXN1bWVkLCBpdCdkIHJldmVydCBiYWNrIHRvIHRoZSBvcmlnaW5hbCB0aW1lIGF0IHRoZSBwYXVzZVxuICAgICAgLy9pZiAoIXRoaXMuX2xvY2spIHsgLy8gYXZvaWQgZW5kbGVzcyByZWN1cnNpb24gKG5vdCBzdXJlIHdlIG5lZWQgdGhpcyB5ZXQgb3IgaWYgaXQncyB3b3J0aCB0aGUgcGVyZm9ybWFuY2UgaGl0KVxuICAgICAgLy8gICB0aGlzLl9sb2NrID0gMTtcblxuICAgICAgX2xhenlTYWZlUmVuZGVyKHRoaXMsIF90b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzKTsgLy8gICB0aGlzLl9sb2NrID0gMDtcbiAgICAgIC8vfVxuXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvLnRpbWUgPSBmdW5jdGlvbiB0aW1lKHZhbHVlLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gdGhpcy50b3RhbFRpbWUoTWF0aC5taW4odGhpcy50b3RhbER1cmF0aW9uKCksIHZhbHVlICsgX2VsYXBzZWRDeWNsZUR1cmF0aW9uKHRoaXMpKSAlICh0aGlzLl9kdXIgKyB0aGlzLl9yRGVsYXkpIHx8ICh2YWx1ZSA/IHRoaXMuX2R1ciA6IDApLCBzdXBwcmVzc0V2ZW50cykgOiB0aGlzLl90aW1lOyAvLyBub3RlOiBpZiB0aGUgbW9kdWx1cyByZXN1bHRzIGluIDAsIHRoZSBwbGF5aGVhZCBjb3VsZCBiZSBleGFjdGx5IGF0IHRoZSBlbmQgb3IgdGhlIGJlZ2lubmluZywgYW5kIHdlIGFsd2F5cyBkZWZlciB0byB0aGUgRU5EIHdpdGggYSBub24temVybyB2YWx1ZSwgb3RoZXJ3aXNlIGlmIHlvdSBzZXQgdGhlIHRpbWUoKSB0byB0aGUgdmVyeSBlbmQgKGR1cmF0aW9uKCkpLCBpdCB3b3VsZCByZW5kZXIgYXQgdGhlIFNUQVJUIVxuICB9O1xuXG4gIF9wcm90by50b3RhbFByb2dyZXNzID0gZnVuY3Rpb24gdG90YWxQcm9ncmVzcyh2YWx1ZSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRoaXMudG90YWxUaW1lKHRoaXMudG90YWxEdXJhdGlvbigpICogdmFsdWUsIHN1cHByZXNzRXZlbnRzKSA6IHRoaXMudG90YWxEdXJhdGlvbigpID8gTWF0aC5taW4oMSwgdGhpcy5fdFRpbWUgLyB0aGlzLl90RHVyKSA6IHRoaXMucmF3VGltZSgpID4gMCA/IDEgOiAwO1xuICB9O1xuXG4gIF9wcm90by5wcm9ncmVzcyA9IGZ1bmN0aW9uIHByb2dyZXNzKHZhbHVlLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gdGhpcy50b3RhbFRpbWUodGhpcy5kdXJhdGlvbigpICogKHRoaXMuX3lveW8gJiYgISh0aGlzLml0ZXJhdGlvbigpICYgMSkgPyAxIC0gdmFsdWUgOiB2YWx1ZSkgKyBfZWxhcHNlZEN5Y2xlRHVyYXRpb24odGhpcyksIHN1cHByZXNzRXZlbnRzKSA6IHRoaXMuZHVyYXRpb24oKSA/IE1hdGgubWluKDEsIHRoaXMuX3RpbWUgLyB0aGlzLl9kdXIpIDogdGhpcy5yYXdUaW1lKCkgPiAwID8gMSA6IDA7XG4gIH07XG5cbiAgX3Byb3RvLml0ZXJhdGlvbiA9IGZ1bmN0aW9uIGl0ZXJhdGlvbih2YWx1ZSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICB2YXIgY3ljbGVEdXJhdGlvbiA9IHRoaXMuZHVyYXRpb24oKSArIHRoaXMuX3JEZWxheTtcblxuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gdGhpcy50b3RhbFRpbWUodGhpcy5fdGltZSArICh2YWx1ZSAtIDEpICogY3ljbGVEdXJhdGlvbiwgc3VwcHJlc3NFdmVudHMpIDogdGhpcy5fcmVwZWF0ID8gX2FuaW1hdGlvbkN5Y2xlKHRoaXMuX3RUaW1lLCBjeWNsZUR1cmF0aW9uKSArIDEgOiAxO1xuICB9IC8vIHBvdGVudGlhbCBmdXR1cmUgYWRkaXRpb246XG4gIC8vIGlzUGxheWluZ0JhY2t3YXJkcygpIHtcbiAgLy8gXHRsZXQgYW5pbWF0aW9uID0gdGhpcyxcbiAgLy8gXHRcdG9yaWVudGF0aW9uID0gMTsgLy8gMSA9IGZvcndhcmQsIC0xID0gYmFja3dhcmRcbiAgLy8gXHR3aGlsZSAoYW5pbWF0aW9uKSB7XG4gIC8vIFx0XHRvcmllbnRhdGlvbiAqPSBhbmltYXRpb24ucmV2ZXJzZWQoKSB8fCAoYW5pbWF0aW9uLnJlcGVhdCgpICYmICEoYW5pbWF0aW9uLml0ZXJhdGlvbigpICYgMSkpID8gLTEgOiAxO1xuICAvLyBcdFx0YW5pbWF0aW9uID0gYW5pbWF0aW9uLnBhcmVudDtcbiAgLy8gXHR9XG4gIC8vIFx0cmV0dXJuIG9yaWVudGF0aW9uIDwgMDtcbiAgLy8gfVxuICA7XG5cbiAgX3Byb3RvLnRpbWVTY2FsZSA9IGZ1bmN0aW9uIHRpbWVTY2FsZSh2YWx1ZSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9ydHMgPT09IC1fdGlueU51bSA/IDAgOiB0aGlzLl9ydHM7IC8vIHJlY29yZGVkIHRpbWVTY2FsZS4gU3BlY2lhbCBjYXNlOiBpZiBzb21lb25lIGNhbGxzIHJldmVyc2UoKSBvbiBhbiBhbmltYXRpb24gd2l0aCB0aW1lU2NhbGUgb2YgMCwgd2UgYXNzaWduIGl0IC1fdGlueU51bSB0byByZW1lbWJlciBpdCdzIHJldmVyc2VkLlxuICAgIH1cblxuICAgIGlmICh0aGlzLl9ydHMgPT09IHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB2YXIgdFRpbWUgPSB0aGlzLnBhcmVudCAmJiB0aGlzLl90cyA/IF9wYXJlbnRUb0NoaWxkVG90YWxUaW1lKHRoaXMucGFyZW50Ll90aW1lLCB0aGlzKSA6IHRoaXMuX3RUaW1lOyAvLyBtYWtlIHN1cmUgdG8gZG8gdGhlIHBhcmVudFRvQ2hpbGRUb3RhbFRpbWUoKSBCRUZPUkUgc2V0dGluZyB0aGUgbmV3IF90cyBiZWNhdXNlIHRoZSBvbGQgb25lIG11c3QgYmUgdXNlZCBpbiB0aGF0IGNhbGN1bGF0aW9uLlxuICAgIC8vIGZ1dHVyZSBhZGRpdGlvbj8gVXAgc2lkZTogZmFzdCBhbmQgbWluaW1hbCBmaWxlIHNpemUuIERvd24gc2lkZTogb25seSB3b3JrcyBvbiB0aGlzIGFuaW1hdGlvbjsgaWYgYSB0aW1lbGluZSBpcyByZXZlcnNlZCwgZm9yIGV4YW1wbGUsIGl0cyBjaGlsZHJlbnMnIG9uUmV2ZXJzZSB3b3VsZG4ndCBnZXQgY2FsbGVkLlxuICAgIC8vKCt2YWx1ZSA8IDAgJiYgdGhpcy5fcnRzID49IDApICYmIF9jYWxsYmFjayh0aGlzLCBcIm9uUmV2ZXJzZVwiLCB0cnVlKTtcbiAgICAvLyBwcmlvcml0aXplIHJlbmRlcmluZyB3aGVyZSB0aGUgcGFyZW50J3MgcGxheWhlYWQgbGluZXMgdXAgaW5zdGVhZCBvZiB0aGlzLl90VGltZSBiZWNhdXNlIHRoZXJlIGNvdWxkIGJlIGEgdHdlZW4gdGhhdCdzIGFuaW1hdGluZyBhbm90aGVyIHR3ZWVuJ3MgdGltZVNjYWxlIGluIHRoZSBzYW1lIHJlbmRlcmluZyBsb29wIChzYW1lIHBhcmVudCksIHRodXMgaWYgdGhlIHRpbWVTY2FsZSB0d2VlbiByZW5kZXJzIGZpcnN0LCBpdCB3b3VsZCBhbHRlciBfc3RhcnQgQkVGT1JFIF90VGltZSB3YXMgc2V0IG9uIHRoYXQgdGljayAoaW4gdGhlIHJlbmRlcmluZyBsb29wKSwgZWZmZWN0aXZlbHkgZnJlZXppbmcgaXQgdW50aWwgdGhlIHRpbWVTY2FsZSB0d2VlbiBmaW5pc2hlcy5cblxuICAgIHRoaXMuX3J0cyA9ICt2YWx1ZSB8fCAwO1xuICAgIHRoaXMuX3RzID0gdGhpcy5fcHMgfHwgdmFsdWUgPT09IC1fdGlueU51bSA/IDAgOiB0aGlzLl9ydHM7IC8vIF90cyBpcyB0aGUgZnVuY3Rpb25hbCB0aW1lU2NhbGUgd2hpY2ggd291bGQgYmUgMCBpZiB0aGUgYW5pbWF0aW9uIGlzIHBhdXNlZC5cblxuICAgIHRoaXMudG90YWxUaW1lKF9jbGFtcCgtTWF0aC5hYnModGhpcy5fZGVsYXkpLCB0aGlzLl90RHVyLCB0VGltZSksIHN1cHByZXNzRXZlbnRzICE9PSBmYWxzZSk7XG5cbiAgICBfc2V0RW5kKHRoaXMpOyAvLyBpZiBwYXJlbnQuc21vb3RoQ2hpbGRUaW1pbmcgd2FzIGZhbHNlLCB0aGUgZW5kIHRpbWUgZGlkbid0IGdldCB1cGRhdGVkIGluIHRoZSBfYWxpZ25QbGF5aGVhZCgpIG1ldGhvZCwgc28gZG8gaXQgaGVyZS5cblxuXG4gICAgcmV0dXJuIF9yZWNhY2hlQW5jZXN0b3JzKHRoaXMpO1xuICB9O1xuXG4gIF9wcm90by5wYXVzZWQgPSBmdW5jdGlvbiBwYXVzZWQodmFsdWUpIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9wcztcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fcHMgIT09IHZhbHVlKSB7XG4gICAgICB0aGlzLl9wcyA9IHZhbHVlO1xuXG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fcFRpbWUgPSB0aGlzLl90VGltZSB8fCBNYXRoLm1heCgtdGhpcy5fZGVsYXksIHRoaXMucmF3VGltZSgpKTsgLy8gaWYgdGhlIHBhdXNlIG9jY3VycyBkdXJpbmcgdGhlIGRlbGF5IHBoYXNlLCBtYWtlIHN1cmUgdGhhdCdzIGZhY3RvcmVkIGluIHdoZW4gcmVzdW1pbmcuXG5cbiAgICAgICAgdGhpcy5fdHMgPSB0aGlzLl9hY3QgPSAwOyAvLyBfdHMgaXMgdGhlIGZ1bmN0aW9uYWwgdGltZVNjYWxlLCBzbyBhIHBhdXNlZCB0d2VlbiB3b3VsZCBlZmZlY3RpdmVseSBoYXZlIGEgdGltZVNjYWxlIG9mIDAuIFdlIHJlY29yZCB0aGUgXCJyZWFsXCIgdGltZVNjYWxlIGFzIF9ydHMgKHJlY29yZGVkIHRpbWUgc2NhbGUpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfd2FrZSgpO1xuXG4gICAgICAgIHRoaXMuX3RzID0gdGhpcy5fcnRzOyAvL29ubHkgZGVmZXIgdG8gX3BUaW1lIChwYXVzZVRpbWUpIGlmIHRUaW1lIGlzIHplcm8uIFJlbWVtYmVyLCBzb21lb25lIGNvdWxkIHBhdXNlKCkgYW4gYW5pbWF0aW9uLCB0aGVuIHNjcnViIHRoZSBwbGF5aGVhZCBhbmQgcmVzdW1lKCkuIElmIHRoZSBwYXJlbnQgZG9lc24ndCBoYXZlIHNtb290aENoaWxkVGltaW5nLCB3ZSByZW5kZXIgYXQgdGhlIHJhd1RpbWUoKSBiZWNhdXNlIHRoZSBzdGFydFRpbWUgd29uJ3QgZ2V0IHVwZGF0ZWQuXG5cbiAgICAgICAgdGhpcy50b3RhbFRpbWUodGhpcy5wYXJlbnQgJiYgIXRoaXMucGFyZW50LnNtb290aENoaWxkVGltaW5nID8gdGhpcy5yYXdUaW1lKCkgOiB0aGlzLl90VGltZSB8fCB0aGlzLl9wVGltZSwgdGhpcy5wcm9ncmVzcygpID09PSAxICYmIE1hdGguYWJzKHRoaXMuX3pUaW1lKSAhPT0gX3RpbnlOdW0gJiYgKHRoaXMuX3RUaW1lIC09IF90aW55TnVtKSk7IC8vIGVkZ2UgY2FzZTogYW5pbWF0aW9uLnByb2dyZXNzKDEpLnBhdXNlKCkucGxheSgpIHdvdWxkbid0IHJlbmRlciBhZ2FpbiBiZWNhdXNlIHRoZSBwbGF5aGVhZCBpcyBhbHJlYWR5IGF0IHRoZSBlbmQsIGJ1dCB0aGUgY2FsbCB0byB0b3RhbFRpbWUoKSBiZWxvdyB3aWxsIGFkZCBpdCBiYWNrIHRvIGl0cyBwYXJlbnQuLi5hbmQgbm90IHJlbW92ZSBpdCBhZ2FpbiAoc2luY2UgcmVtb3Zpbmcgb25seSBoYXBwZW5zIHVwb24gcmVuZGVyaW5nIGF0IGEgbmV3IHRpbWUpLiBPZmZzZXR0aW5nIHRoZSBfdFRpbWUgc2xpZ2h0bHkgaXMgZG9uZSBzaW1wbHkgdG8gY2F1c2UgdGhlIGZpbmFsIHJlbmRlciBpbiB0b3RhbFRpbWUoKSB0aGF0J2xsIHBvcCBpdCBvZmYgaXRzIHRpbWVsaW5lIChpZiBhdXRvUmVtb3ZlQ2hpbGRyZW4gaXMgdHJ1ZSwgb2YgY291cnNlKS4gQ2hlY2sgdG8gbWFrZSBzdXJlIF96VGltZSBpc24ndCAtX3RpbnlOdW0gdG8gYXZvaWQgYW4gZWRnZSBjYXNlIHdoZXJlIHRoZSBwbGF5aGVhZCBpcyBwdXNoZWQgdG8gdGhlIGVuZCBidXQgSU5TSURFIGEgdHdlZW4vY2FsbGJhY2ssIHRoZSB0aW1lbGluZSBpdHNlbGYgaXMgcGF1c2VkIHRodXMgaGFsdGluZyByZW5kZXJpbmcgYW5kIGxlYXZpbmcgYSBmZXcgdW5yZW5kZXJlZC4gV2hlbiByZXN1bWluZywgaXQgd291bGRuJ3QgcmVuZGVyIHRob3NlIG90aGVyd2lzZS5cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8uc3RhcnRUaW1lID0gZnVuY3Rpb24gc3RhcnRUaW1lKHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuX3N0YXJ0ID0gdmFsdWU7XG4gICAgICB2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnQgfHwgdGhpcy5fZHA7XG4gICAgICBwYXJlbnQgJiYgKHBhcmVudC5fc29ydCB8fCAhdGhpcy5wYXJlbnQpICYmIF9hZGRUb1RpbWVsaW5lKHBhcmVudCwgdGhpcywgdmFsdWUgLSB0aGlzLl9kZWxheSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fc3RhcnQ7XG4gIH07XG5cbiAgX3Byb3RvLmVuZFRpbWUgPSBmdW5jdGlvbiBlbmRUaW1lKGluY2x1ZGVSZXBlYXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuX3N0YXJ0ICsgKF9pc05vdEZhbHNlKGluY2x1ZGVSZXBlYXRzKSA/IHRoaXMudG90YWxEdXJhdGlvbigpIDogdGhpcy5kdXJhdGlvbigpKSAvIE1hdGguYWJzKHRoaXMuX3RzIHx8IDEpO1xuICB9O1xuXG4gIF9wcm90by5yYXdUaW1lID0gZnVuY3Rpb24gcmF3VGltZSh3cmFwUmVwZWF0cykge1xuICAgIHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudCB8fCB0aGlzLl9kcDsgLy8gX2RwID0gZGV0YWNoZWQgcGFyZW50XG5cbiAgICByZXR1cm4gIXBhcmVudCA/IHRoaXMuX3RUaW1lIDogd3JhcFJlcGVhdHMgJiYgKCF0aGlzLl90cyB8fCB0aGlzLl9yZXBlYXQgJiYgdGhpcy5fdGltZSAmJiB0aGlzLnRvdGFsUHJvZ3Jlc3MoKSA8IDEpID8gdGhpcy5fdFRpbWUgJSAodGhpcy5fZHVyICsgdGhpcy5fckRlbGF5KSA6ICF0aGlzLl90cyA/IHRoaXMuX3RUaW1lIDogX3BhcmVudFRvQ2hpbGRUb3RhbFRpbWUocGFyZW50LnJhd1RpbWUod3JhcFJlcGVhdHMpLCB0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8ucmV2ZXJ0ID0gZnVuY3Rpb24gcmV2ZXJ0KGNvbmZpZykge1xuICAgIGlmIChjb25maWcgPT09IHZvaWQgMCkge1xuICAgICAgY29uZmlnID0gX3JldmVydENvbmZpZztcbiAgICB9XG5cbiAgICB2YXIgcHJldklzUmV2ZXJ0aW5nID0gX3JldmVydGluZztcbiAgICBfcmV2ZXJ0aW5nID0gY29uZmlnO1xuXG4gICAgaWYgKHRoaXMuX2luaXR0ZWQgfHwgdGhpcy5fc3RhcnRBdCkge1xuICAgICAgdGhpcy50aW1lbGluZSAmJiB0aGlzLnRpbWVsaW5lLnJldmVydChjb25maWcpO1xuICAgICAgdGhpcy50b3RhbFRpbWUoLTAuMDEsIGNvbmZpZy5zdXBwcmVzc0V2ZW50cyk7XG4gICAgfVxuXG4gICAgdGhpcy5kYXRhICE9PSBcIm5lc3RlZFwiICYmIGNvbmZpZy5raWxsICE9PSBmYWxzZSAmJiB0aGlzLmtpbGwoKTtcbiAgICBfcmV2ZXJ0aW5nID0gcHJldklzUmV2ZXJ0aW5nO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90by5nbG9iYWxUaW1lID0gZnVuY3Rpb24gZ2xvYmFsVGltZShyYXdUaW1lKSB7XG4gICAgdmFyIGFuaW1hdGlvbiA9IHRoaXMsXG4gICAgICAgIHRpbWUgPSBhcmd1bWVudHMubGVuZ3RoID8gcmF3VGltZSA6IGFuaW1hdGlvbi5yYXdUaW1lKCk7XG5cbiAgICB3aGlsZSAoYW5pbWF0aW9uKSB7XG4gICAgICB0aW1lID0gYW5pbWF0aW9uLl9zdGFydCArIHRpbWUgLyAoTWF0aC5hYnMoYW5pbWF0aW9uLl90cykgfHwgMSk7XG4gICAgICBhbmltYXRpb24gPSBhbmltYXRpb24uX2RwO1xuICAgIH1cblxuICAgIHJldHVybiAhdGhpcy5wYXJlbnQgJiYgdGhpcy5fc2F0ID8gdGhpcy5fc2F0Lmdsb2JhbFRpbWUocmF3VGltZSkgOiB0aW1lOyAvLyB0aGUgX3N0YXJ0QXQgdHdlZW5zIGZvciAuZnJvbVRvKCkgYW5kIC5mcm9tKCkgdGhhdCBoYXZlIGltbWVkaWF0ZVJlbmRlciBzaG91bGQgYWx3YXlzIGJlIEZJUlNUIGluIHRoZSB0aW1lbGluZSAoaW1wb3J0YW50IGZvciBjb250ZXh0LnJldmVydCgpKS4gXCJfc2F0XCIgc3RhbmRzIGZvciBfc3RhcnRBdFR3ZWVuLCByZWZlcnJpbmcgdG8gdGhlIHBhcmVudCB0d2VlbiB0aGF0IGNyZWF0ZWQgdGhlIF9zdGFydEF0LiBXZSBtdXN0IGRpc2Nlcm4gaWYgdGhhdCB0d2VlbiBoYWQgaW1tZWRpYXRlUmVuZGVyIHNvIHRoYXQgd2UgY2FuIGtub3cgd2hldGhlciBvciBub3QgdG8gcHJpb3JpdGl6ZSBpdCBpbiByZXZlcnQoKS5cbiAgfTtcblxuICBfcHJvdG8ucmVwZWF0ID0gZnVuY3Rpb24gcmVwZWF0KHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuX3JlcGVhdCA9IHZhbHVlID09PSBJbmZpbml0eSA/IC0yIDogdmFsdWU7XG4gICAgICByZXR1cm4gX29uVXBkYXRlVG90YWxEdXJhdGlvbih0aGlzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fcmVwZWF0ID09PSAtMiA/IEluZmluaXR5IDogdGhpcy5fcmVwZWF0O1xuICB9O1xuXG4gIF9wcm90by5yZXBlYXREZWxheSA9IGZ1bmN0aW9uIHJlcGVhdERlbGF5KHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHZhciB0aW1lID0gdGhpcy5fdGltZTtcbiAgICAgIHRoaXMuX3JEZWxheSA9IHZhbHVlO1xuXG4gICAgICBfb25VcGRhdGVUb3RhbER1cmF0aW9uKHRoaXMpO1xuXG4gICAgICByZXR1cm4gdGltZSA/IHRoaXMudGltZSh0aW1lKSA6IHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3JEZWxheTtcbiAgfTtcblxuICBfcHJvdG8ueW95byA9IGZ1bmN0aW9uIHlveW8odmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgdGhpcy5feW95byA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3lveW87XG4gIH07XG5cbiAgX3Byb3RvLnNlZWsgPSBmdW5jdGlvbiBzZWVrKHBvc2l0aW9uLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIHJldHVybiB0aGlzLnRvdGFsVGltZShfcGFyc2VQb3NpdGlvbih0aGlzLCBwb3NpdGlvbiksIF9pc05vdEZhbHNlKHN1cHByZXNzRXZlbnRzKSk7XG4gIH07XG5cbiAgX3Byb3RvLnJlc3RhcnQgPSBmdW5jdGlvbiByZXN0YXJ0KGluY2x1ZGVEZWxheSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICByZXR1cm4gdGhpcy5wbGF5KCkudG90YWxUaW1lKGluY2x1ZGVEZWxheSA/IC10aGlzLl9kZWxheSA6IDAsIF9pc05vdEZhbHNlKHN1cHByZXNzRXZlbnRzKSk7XG4gIH07XG5cbiAgX3Byb3RvLnBsYXkgPSBmdW5jdGlvbiBwbGF5KGZyb20sIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgZnJvbSAhPSBudWxsICYmIHRoaXMuc2Vlayhmcm9tLCBzdXBwcmVzc0V2ZW50cyk7XG4gICAgcmV0dXJuIHRoaXMucmV2ZXJzZWQoZmFsc2UpLnBhdXNlZChmYWxzZSk7XG4gIH07XG5cbiAgX3Byb3RvLnJldmVyc2UgPSBmdW5jdGlvbiByZXZlcnNlKGZyb20sIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgZnJvbSAhPSBudWxsICYmIHRoaXMuc2Vlayhmcm9tIHx8IHRoaXMudG90YWxEdXJhdGlvbigpLCBzdXBwcmVzc0V2ZW50cyk7XG4gICAgcmV0dXJuIHRoaXMucmV2ZXJzZWQodHJ1ZSkucGF1c2VkKGZhbHNlKTtcbiAgfTtcblxuICBfcHJvdG8ucGF1c2UgPSBmdW5jdGlvbiBwYXVzZShhdFRpbWUsIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgYXRUaW1lICE9IG51bGwgJiYgdGhpcy5zZWVrKGF0VGltZSwgc3VwcHJlc3NFdmVudHMpO1xuICAgIHJldHVybiB0aGlzLnBhdXNlZCh0cnVlKTtcbiAgfTtcblxuICBfcHJvdG8ucmVzdW1lID0gZnVuY3Rpb24gcmVzdW1lKCkge1xuICAgIHJldHVybiB0aGlzLnBhdXNlZChmYWxzZSk7XG4gIH07XG5cbiAgX3Byb3RvLnJldmVyc2VkID0gZnVuY3Rpb24gcmV2ZXJzZWQodmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgISF2YWx1ZSAhPT0gdGhpcy5yZXZlcnNlZCgpICYmIHRoaXMudGltZVNjYWxlKC10aGlzLl9ydHMgfHwgKHZhbHVlID8gLV90aW55TnVtIDogMCkpOyAvLyBpbiBjYXNlIHRpbWVTY2FsZSBpcyB6ZXJvLCByZXZlcnNpbmcgd291bGQgaGF2ZSBubyBlZmZlY3Qgc28gd2UgdXNlIF90aW55TnVtLlxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fcnRzIDwgMDtcbiAgfTtcblxuICBfcHJvdG8uaW52YWxpZGF0ZSA9IGZ1bmN0aW9uIGludmFsaWRhdGUoKSB7XG4gICAgdGhpcy5faW5pdHRlZCA9IHRoaXMuX2FjdCA9IDA7XG4gICAgdGhpcy5felRpbWUgPSAtX3RpbnlOdW07XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvLmlzQWN0aXZlID0gZnVuY3Rpb24gaXNBY3RpdmUoKSB7XG4gICAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50IHx8IHRoaXMuX2RwLFxuICAgICAgICBzdGFydCA9IHRoaXMuX3N0YXJ0LFxuICAgICAgICByYXdUaW1lO1xuICAgIHJldHVybiAhISghcGFyZW50IHx8IHRoaXMuX3RzICYmIHRoaXMuX2luaXR0ZWQgJiYgcGFyZW50LmlzQWN0aXZlKCkgJiYgKHJhd1RpbWUgPSBwYXJlbnQucmF3VGltZSh0cnVlKSkgPj0gc3RhcnQgJiYgcmF3VGltZSA8IHRoaXMuZW5kVGltZSh0cnVlKSAtIF90aW55TnVtKTtcbiAgfTtcblxuICBfcHJvdG8uZXZlbnRDYWxsYmFjayA9IGZ1bmN0aW9uIGV2ZW50Q2FsbGJhY2sodHlwZSwgY2FsbGJhY2ssIHBhcmFtcykge1xuICAgIHZhciB2YXJzID0gdGhpcy52YXJzO1xuXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgICAgIGRlbGV0ZSB2YXJzW3R5cGVdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyc1t0eXBlXSA9IGNhbGxiYWNrO1xuICAgICAgICBwYXJhbXMgJiYgKHZhcnNbdHlwZSArIFwiUGFyYW1zXCJdID0gcGFyYW1zKTtcbiAgICAgICAgdHlwZSA9PT0gXCJvblVwZGF0ZVwiICYmICh0aGlzLl9vblVwZGF0ZSA9IGNhbGxiYWNrKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhcnNbdHlwZV07XG4gIH07XG5cbiAgX3Byb3RvLnRoZW4gPSBmdW5jdGlvbiB0aGVuKG9uRnVsZmlsbGVkKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgdmFyIGYgPSBfaXNGdW5jdGlvbihvbkZ1bGZpbGxlZCkgPyBvbkZ1bGZpbGxlZCA6IF9wYXNzVGhyb3VnaCxcbiAgICAgICAgICBfcmVzb2x2ZSA9IGZ1bmN0aW9uIF9yZXNvbHZlKCkge1xuICAgICAgICB2YXIgX3RoZW4gPSBzZWxmLnRoZW47XG4gICAgICAgIHNlbGYudGhlbiA9IG51bGw7IC8vIHRlbXBvcmFyaWx5IG51bGwgdGhlIHRoZW4oKSBtZXRob2QgdG8gYXZvaWQgYW4gaW5maW5pdGUgbG9vcCAoc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ncmVlbnNvY2svR1NBUC9pc3N1ZXMvMzIyKVxuXG4gICAgICAgIF9pc0Z1bmN0aW9uKGYpICYmIChmID0gZihzZWxmKSkgJiYgKGYudGhlbiB8fCBmID09PSBzZWxmKSAmJiAoc2VsZi50aGVuID0gX3RoZW4pO1xuICAgICAgICByZXNvbHZlKGYpO1xuICAgICAgICBzZWxmLnRoZW4gPSBfdGhlbjtcbiAgICAgIH07XG5cbiAgICAgIGlmIChzZWxmLl9pbml0dGVkICYmIHNlbGYudG90YWxQcm9ncmVzcygpID09PSAxICYmIHNlbGYuX3RzID49IDAgfHwgIXNlbGYuX3RUaW1lICYmIHNlbGYuX3RzIDwgMCkge1xuICAgICAgICBfcmVzb2x2ZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VsZi5fcHJvbSA9IF9yZXNvbHZlO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5raWxsID0gZnVuY3Rpb24ga2lsbCgpIHtcbiAgICBfaW50ZXJydXB0KHRoaXMpO1xuICB9O1xuXG4gIHJldHVybiBBbmltYXRpb247XG59KCk7XG5cbl9zZXREZWZhdWx0cyhBbmltYXRpb24ucHJvdG90eXBlLCB7XG4gIF90aW1lOiAwLFxuICBfc3RhcnQ6IDAsXG4gIF9lbmQ6IDAsXG4gIF90VGltZTogMCxcbiAgX3REdXI6IDAsXG4gIF9kaXJ0eTogMCxcbiAgX3JlcGVhdDogMCxcbiAgX3lveW86IGZhbHNlLFxuICBwYXJlbnQ6IG51bGwsXG4gIF9pbml0dGVkOiBmYWxzZSxcbiAgX3JEZWxheTogMCxcbiAgX3RzOiAxLFxuICBfZHA6IDAsXG4gIHJhdGlvOiAwLFxuICBfelRpbWU6IC1fdGlueU51bSxcbiAgX3Byb206IDAsXG4gIF9wczogZmFsc2UsXG4gIF9ydHM6IDFcbn0pO1xuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIFRJTUVMSU5FXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuXG5leHBvcnQgdmFyIFRpbWVsaW5lID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQW5pbWF0aW9uKSB7XG4gIF9pbmhlcml0c0xvb3NlKFRpbWVsaW5lLCBfQW5pbWF0aW9uKTtcblxuICBmdW5jdGlvbiBUaW1lbGluZSh2YXJzLCBwb3NpdGlvbikge1xuICAgIHZhciBfdGhpcztcblxuICAgIGlmICh2YXJzID09PSB2b2lkIDApIHtcbiAgICAgIHZhcnMgPSB7fTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9BbmltYXRpb24uY2FsbCh0aGlzLCB2YXJzKSB8fCB0aGlzO1xuICAgIF90aGlzLmxhYmVscyA9IHt9O1xuICAgIF90aGlzLnNtb290aENoaWxkVGltaW5nID0gISF2YXJzLnNtb290aENoaWxkVGltaW5nO1xuICAgIF90aGlzLmF1dG9SZW1vdmVDaGlsZHJlbiA9ICEhdmFycy5hdXRvUmVtb3ZlQ2hpbGRyZW47XG4gICAgX3RoaXMuX3NvcnQgPSBfaXNOb3RGYWxzZSh2YXJzLnNvcnRDaGlsZHJlbik7XG4gICAgX2dsb2JhbFRpbWVsaW5lICYmIF9hZGRUb1RpbWVsaW5lKHZhcnMucGFyZW50IHx8IF9nbG9iYWxUaW1lbGluZSwgX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIHBvc2l0aW9uKTtcbiAgICB2YXJzLnJldmVyc2VkICYmIF90aGlzLnJldmVyc2UoKTtcbiAgICB2YXJzLnBhdXNlZCAmJiBfdGhpcy5wYXVzZWQodHJ1ZSk7XG4gICAgdmFycy5zY3JvbGxUcmlnZ2VyICYmIF9zY3JvbGxUcmlnZ2VyKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCB2YXJzLnNjcm9sbFRyaWdnZXIpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8yID0gVGltZWxpbmUucHJvdG90eXBlO1xuXG4gIF9wcm90bzIudG8gPSBmdW5jdGlvbiB0byh0YXJnZXRzLCB2YXJzLCBwb3NpdGlvbikge1xuICAgIF9jcmVhdGVUd2VlblR5cGUoMCwgYXJndW1lbnRzLCB0aGlzKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuZnJvbSA9IGZ1bmN0aW9uIGZyb20odGFyZ2V0cywgdmFycywgcG9zaXRpb24pIHtcbiAgICBfY3JlYXRlVHdlZW5UeXBlKDEsIGFyZ3VtZW50cywgdGhpcyk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLmZyb21UbyA9IGZ1bmN0aW9uIGZyb21Ubyh0YXJnZXRzLCBmcm9tVmFycywgdG9WYXJzLCBwb3NpdGlvbikge1xuICAgIF9jcmVhdGVUd2VlblR5cGUoMiwgYXJndW1lbnRzLCB0aGlzKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuc2V0ID0gZnVuY3Rpb24gc2V0KHRhcmdldHMsIHZhcnMsIHBvc2l0aW9uKSB7XG4gICAgdmFycy5kdXJhdGlvbiA9IDA7XG4gICAgdmFycy5wYXJlbnQgPSB0aGlzO1xuICAgIF9pbmhlcml0RGVmYXVsdHModmFycykucmVwZWF0RGVsYXkgfHwgKHZhcnMucmVwZWF0ID0gMCk7XG4gICAgdmFycy5pbW1lZGlhdGVSZW5kZXIgPSAhIXZhcnMuaW1tZWRpYXRlUmVuZGVyO1xuICAgIG5ldyBUd2Vlbih0YXJnZXRzLCB2YXJzLCBfcGFyc2VQb3NpdGlvbih0aGlzLCBwb3NpdGlvbiksIDEpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuY2FsbCA9IGZ1bmN0aW9uIGNhbGwoY2FsbGJhY2ssIHBhcmFtcywgcG9zaXRpb24pIHtcbiAgICByZXR1cm4gX2FkZFRvVGltZWxpbmUodGhpcywgVHdlZW4uZGVsYXllZENhbGwoMCwgY2FsbGJhY2ssIHBhcmFtcyksIHBvc2l0aW9uKTtcbiAgfSAvL09OTFkgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkhIE1heWJlIGRlbGV0ZT9cbiAgO1xuXG4gIF9wcm90bzIuc3RhZ2dlclRvID0gZnVuY3Rpb24gc3RhZ2dlclRvKHRhcmdldHMsIGR1cmF0aW9uLCB2YXJzLCBzdGFnZ2VyLCBwb3NpdGlvbiwgb25Db21wbGV0ZUFsbCwgb25Db21wbGV0ZUFsbFBhcmFtcykge1xuICAgIHZhcnMuZHVyYXRpb24gPSBkdXJhdGlvbjtcbiAgICB2YXJzLnN0YWdnZXIgPSB2YXJzLnN0YWdnZXIgfHwgc3RhZ2dlcjtcbiAgICB2YXJzLm9uQ29tcGxldGUgPSBvbkNvbXBsZXRlQWxsO1xuICAgIHZhcnMub25Db21wbGV0ZVBhcmFtcyA9IG9uQ29tcGxldGVBbGxQYXJhbXM7XG4gICAgdmFycy5wYXJlbnQgPSB0aGlzO1xuICAgIG5ldyBUd2Vlbih0YXJnZXRzLCB2YXJzLCBfcGFyc2VQb3NpdGlvbih0aGlzLCBwb3NpdGlvbikpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuc3RhZ2dlckZyb20gPSBmdW5jdGlvbiBzdGFnZ2VyRnJvbSh0YXJnZXRzLCBkdXJhdGlvbiwgdmFycywgc3RhZ2dlciwgcG9zaXRpb24sIG9uQ29tcGxldGVBbGwsIG9uQ29tcGxldGVBbGxQYXJhbXMpIHtcbiAgICB2YXJzLnJ1bkJhY2t3YXJkcyA9IDE7XG4gICAgX2luaGVyaXREZWZhdWx0cyh2YXJzKS5pbW1lZGlhdGVSZW5kZXIgPSBfaXNOb3RGYWxzZSh2YXJzLmltbWVkaWF0ZVJlbmRlcik7XG4gICAgcmV0dXJuIHRoaXMuc3RhZ2dlclRvKHRhcmdldHMsIGR1cmF0aW9uLCB2YXJzLCBzdGFnZ2VyLCBwb3NpdGlvbiwgb25Db21wbGV0ZUFsbCwgb25Db21wbGV0ZUFsbFBhcmFtcyk7XG4gIH07XG5cbiAgX3Byb3RvMi5zdGFnZ2VyRnJvbVRvID0gZnVuY3Rpb24gc3RhZ2dlckZyb21Ubyh0YXJnZXRzLCBkdXJhdGlvbiwgZnJvbVZhcnMsIHRvVmFycywgc3RhZ2dlciwgcG9zaXRpb24sIG9uQ29tcGxldGVBbGwsIG9uQ29tcGxldGVBbGxQYXJhbXMpIHtcbiAgICB0b1ZhcnMuc3RhcnRBdCA9IGZyb21WYXJzO1xuICAgIF9pbmhlcml0RGVmYXVsdHModG9WYXJzKS5pbW1lZGlhdGVSZW5kZXIgPSBfaXNOb3RGYWxzZSh0b1ZhcnMuaW1tZWRpYXRlUmVuZGVyKTtcbiAgICByZXR1cm4gdGhpcy5zdGFnZ2VyVG8odGFyZ2V0cywgZHVyYXRpb24sIHRvVmFycywgc3RhZ2dlciwgcG9zaXRpb24sIG9uQ29tcGxldGVBbGwsIG9uQ29tcGxldGVBbGxQYXJhbXMpO1xuICB9O1xuXG4gIF9wcm90bzIucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKSB7XG4gICAgdmFyIHByZXZUaW1lID0gdGhpcy5fdGltZSxcbiAgICAgICAgdER1ciA9IHRoaXMuX2RpcnR5ID8gdGhpcy50b3RhbER1cmF0aW9uKCkgOiB0aGlzLl90RHVyLFxuICAgICAgICBkdXIgPSB0aGlzLl9kdXIsXG4gICAgICAgIHRUaW1lID0gdG90YWxUaW1lIDw9IDAgPyAwIDogX3JvdW5kUHJlY2lzZSh0b3RhbFRpbWUpLFxuICAgICAgICAvLyBpZiBhIHBhdXNlZCB0aW1lbGluZSBpcyByZXN1bWVkIChvciBpdHMgX3N0YXJ0IGlzIHVwZGF0ZWQgZm9yIGFub3RoZXIgcmVhc29uLi4ud2hpY2ggcm91bmRzIGl0KSwgdGhhdCBjb3VsZCByZXN1bHQgaW4gdGhlIHBsYXloZWFkIHNoaWZ0aW5nIGEgKip0aW55KiogYW1vdW50IGFuZCBhIHplcm8tZHVyYXRpb24gY2hpbGQgYXQgdGhhdCBzcG90IG1heSBnZXQgcmVuZGVyZWQgYXQgYSBkaWZmZXJlbnQgcmF0aW8sIGxpa2UgaXRzIHRvdGFsVGltZSBpbiByZW5kZXIoKSBtYXkgYmUgMWUtMTcgaW5zdGVhZCBvZiAwLCBmb3IgZXhhbXBsZS5cbiAgICBjcm9zc2luZ1N0YXJ0ID0gdGhpcy5felRpbWUgPCAwICE9PSB0b3RhbFRpbWUgPCAwICYmICh0aGlzLl9pbml0dGVkIHx8ICFkdXIpLFxuICAgICAgICB0aW1lLFxuICAgICAgICBjaGlsZCxcbiAgICAgICAgbmV4dCxcbiAgICAgICAgaXRlcmF0aW9uLFxuICAgICAgICBjeWNsZUR1cmF0aW9uLFxuICAgICAgICBwcmV2UGF1c2VkLFxuICAgICAgICBwYXVzZVR3ZWVuLFxuICAgICAgICB0aW1lU2NhbGUsXG4gICAgICAgIHByZXZTdGFydCxcbiAgICAgICAgcHJldkl0ZXJhdGlvbixcbiAgICAgICAgeW95byxcbiAgICAgICAgaXNZb3lvO1xuICAgIHRoaXMgIT09IF9nbG9iYWxUaW1lbGluZSAmJiB0VGltZSA+IHREdXIgJiYgdG90YWxUaW1lID49IDAgJiYgKHRUaW1lID0gdER1cik7XG5cbiAgICBpZiAodFRpbWUgIT09IHRoaXMuX3RUaW1lIHx8IGZvcmNlIHx8IGNyb3NzaW5nU3RhcnQpIHtcbiAgICAgIGlmIChwcmV2VGltZSAhPT0gdGhpcy5fdGltZSAmJiBkdXIpIHtcbiAgICAgICAgLy9pZiB0b3RhbER1cmF0aW9uKCkgZmluZHMgYSBjaGlsZCB3aXRoIGEgbmVnYXRpdmUgc3RhcnRUaW1lIGFuZCBzbW9vdGhDaGlsZFRpbWluZyBpcyB0cnVlLCB0aGluZ3MgZ2V0IHNoaWZ0ZWQgYXJvdW5kIGludGVybmFsbHkgc28gd2UgbmVlZCB0byBhZGp1c3QgdGhlIHRpbWUgYWNjb3JkaW5nbHkuIEZvciBleGFtcGxlLCBpZiBhIHR3ZWVuIHN0YXJ0cyBhdCAtMzAgd2UgbXVzdCBzaGlmdCBFVkVSWVRISU5HIGZvcndhcmQgMzAgc2Vjb25kcyBhbmQgbW92ZSB0aGlzIHRpbWVsaW5lJ3Mgc3RhcnRUaW1lIGJhY2t3YXJkIGJ5IDMwIHNlY29uZHMgc28gdGhhdCB0aGluZ3MgYWxpZ24gd2l0aCB0aGUgcGxheWhlYWQgKG5vIGp1bXApLlxuICAgICAgICB0VGltZSArPSB0aGlzLl90aW1lIC0gcHJldlRpbWU7XG4gICAgICAgIHRvdGFsVGltZSArPSB0aGlzLl90aW1lIC0gcHJldlRpbWU7XG4gICAgICB9XG5cbiAgICAgIHRpbWUgPSB0VGltZTtcbiAgICAgIHByZXZTdGFydCA9IHRoaXMuX3N0YXJ0O1xuICAgICAgdGltZVNjYWxlID0gdGhpcy5fdHM7XG4gICAgICBwcmV2UGF1c2VkID0gIXRpbWVTY2FsZTtcblxuICAgICAgaWYgKGNyb3NzaW5nU3RhcnQpIHtcbiAgICAgICAgZHVyIHx8IChwcmV2VGltZSA9IHRoaXMuX3pUaW1lKTsgLy93aGVuIHRoZSBwbGF5aGVhZCBhcnJpdmVzIGF0IEVYQUNUTFkgdGltZSAwIChyaWdodCBvbiB0b3ApIG9mIGEgemVyby1kdXJhdGlvbiB0aW1lbGluZSwgd2UgbmVlZCB0byBkaXNjZXJuIGlmIGV2ZW50cyBhcmUgc3VwcHJlc3NlZCBzbyB0aGF0IHdoZW4gdGhlIHBsYXloZWFkIG1vdmVzIGFnYWluIChuZXh0IHRpbWUpLCBpdCdsbCB0cmlnZ2VyIHRoZSBjYWxsYmFjay4gSWYgZXZlbnRzIGFyZSBOT1Qgc3VwcHJlc3NlZCwgb2J2aW91c2x5IHRoZSBjYWxsYmFjayB3b3VsZCBiZSB0cmlnZ2VyZWQgaW4gdGhpcyByZW5kZXIuIEJhc2ljYWxseSwgdGhlIGNhbGxiYWNrIHNob3VsZCBmaXJlIGVpdGhlciB3aGVuIHRoZSBwbGF5aGVhZCBBUlJJVkVTIG9yIExFQVZFUyB0aGlzIGV4YWN0IHNwb3QsIG5vdCBib3RoLiBJbWFnaW5lIGRvaW5nIGEgdGltZWxpbmUuc2VlaygwKSBhbmQgdGhlcmUncyBhIGNhbGxiYWNrIHRoYXQgc2l0cyBhdCAwLiBTaW5jZSBldmVudHMgYXJlIHN1cHByZXNzZWQgb24gdGhhdCBzZWVrKCkgYnkgZGVmYXVsdCwgbm90aGluZyB3aWxsIGZpcmUsIGJ1dCB3aGVuIHRoZSBwbGF5aGVhZCBtb3ZlcyBvZmYgb2YgdGhhdCBwb3NpdGlvbiwgdGhlIGNhbGxiYWNrIHNob3VsZCBmaXJlLiBUaGlzIGJlaGF2aW9yIGlzIHdoYXQgcGVvcGxlIGludHVpdGl2ZWx5IGV4cGVjdC5cblxuICAgICAgICAodG90YWxUaW1lIHx8ICFzdXBwcmVzc0V2ZW50cykgJiYgKHRoaXMuX3pUaW1lID0gdG90YWxUaW1lKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX3JlcGVhdCkge1xuICAgICAgICAvL2FkanVzdCB0aGUgdGltZSBmb3IgcmVwZWF0cyBhbmQgeW95b3NcbiAgICAgICAgeW95byA9IHRoaXMuX3lveW87XG4gICAgICAgIGN5Y2xlRHVyYXRpb24gPSBkdXIgKyB0aGlzLl9yRGVsYXk7XG5cbiAgICAgICAgaWYgKHRoaXMuX3JlcGVhdCA8IC0xICYmIHRvdGFsVGltZSA8IDApIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy50b3RhbFRpbWUoY3ljbGVEdXJhdGlvbiAqIDEwMCArIHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRpbWUgPSBfcm91bmRQcmVjaXNlKHRUaW1lICUgY3ljbGVEdXJhdGlvbik7IC8vcm91bmQgdG8gYXZvaWQgZmxvYXRpbmcgcG9pbnQgZXJyb3JzLiAoNCAlIDAuOCBzaG91bGQgYmUgMCBidXQgc29tZSBicm93c2VycyByZXBvcnQgaXQgYXMgMC43OTk5OTk5OSEpXG5cbiAgICAgICAgaWYgKHRUaW1lID09PSB0RHVyKSB7XG4gICAgICAgICAgLy8gdGhlIHREdXIgPT09IHRUaW1lIGlzIGZvciBlZGdlIGNhc2VzIHdoZXJlIHRoZXJlJ3MgYSBsZW5ndGh5IGRlY2ltYWwgb24gdGhlIGR1cmF0aW9uIGFuZCBpdCBtYXkgcmVhY2ggdGhlIHZlcnkgZW5kIGJ1dCB0aGUgdGltZSBpcyByZW5kZXJlZCBhcyBub3QtcXVpdGUtdGhlcmUgKHJlbWVtYmVyLCB0RHVyIGlzIHJvdW5kZWQgdG8gNCBkZWNpbWFscyB3aGVyZWFzIGR1ciBpc24ndClcbiAgICAgICAgICBpdGVyYXRpb24gPSB0aGlzLl9yZXBlYXQ7XG4gICAgICAgICAgdGltZSA9IGR1cjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVyYXRpb24gPSB+fih0VGltZSAvIGN5Y2xlRHVyYXRpb24pO1xuXG4gICAgICAgICAgaWYgKGl0ZXJhdGlvbiAmJiBpdGVyYXRpb24gPT09IHRUaW1lIC8gY3ljbGVEdXJhdGlvbikge1xuICAgICAgICAgICAgdGltZSA9IGR1cjtcbiAgICAgICAgICAgIGl0ZXJhdGlvbi0tO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRpbWUgPiBkdXIgJiYgKHRpbWUgPSBkdXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJldkl0ZXJhdGlvbiA9IF9hbmltYXRpb25DeWNsZSh0aGlzLl90VGltZSwgY3ljbGVEdXJhdGlvbik7XG4gICAgICAgICFwcmV2VGltZSAmJiB0aGlzLl90VGltZSAmJiBwcmV2SXRlcmF0aW9uICE9PSBpdGVyYXRpb24gJiYgdGhpcy5fdFRpbWUgLSBwcmV2SXRlcmF0aW9uICogY3ljbGVEdXJhdGlvbiAtIHRoaXMuX2R1ciA8PSAwICYmIChwcmV2SXRlcmF0aW9uID0gaXRlcmF0aW9uKTsgLy8gZWRnZSBjYXNlIC0gaWYgc29tZW9uZSBkb2VzIGFkZFBhdXNlKCkgYXQgdGhlIHZlcnkgYmVnaW5uaW5nIG9mIGEgcmVwZWF0aW5nIHRpbWVsaW5lLCB0aGF0IHBhdXNlIGlzIHRlY2huaWNhbGx5IGF0IHRoZSBzYW1lIHNwb3QgYXMgdGhlIGVuZCB3aGljaCBjYXVzZXMgdGhpcy5fdGltZSB0byBnZXQgc2V0IHRvIDAgd2hlbiB0aGUgdG90YWxUaW1lIHdvdWxkIG5vcm1hbGx5IHBsYWNlIHRoZSBwbGF5aGVhZCBhdCB0aGUgZW5kLiBTZWUgaHR0cHM6Ly9nc2FwLmNvbS9mb3J1bXMvdG9waWMvMjM4MjMtY2xvc2luZy1uYXYtYW5pbWF0aW9uLW5vdC13b3JraW5nLW9uLWllLWFuZC1pcGhvbmUtNi1tYXliZS1vdGhlci1vbGRlci1icm93c2VyLz90YWI9Y29tbWVudHMjY29tbWVudC0xMTMwMDUgYWxzbywgdGhpcy5fdFRpbWUgLSBwcmV2SXRlcmF0aW9uICogY3ljbGVEdXJhdGlvbiAtIHRoaXMuX2R1ciA8PSAwIGp1c3QgY2hlY2tzIHRvIG1ha2Ugc3VyZSBpdCB3YXNuJ3QgcHJldmlvdXNseSBpbiB0aGUgXCJyZXBlYXREZWxheVwiIHBvcnRpb25cblxuICAgICAgICBpZiAoeW95byAmJiBpdGVyYXRpb24gJiAxKSB7XG4gICAgICAgICAgdGltZSA9IGR1ciAtIHRpbWU7XG4gICAgICAgICAgaXNZb3lvID0gMTtcbiAgICAgICAgfVxuICAgICAgICAvKlxuICAgICAgICBtYWtlIHN1cmUgY2hpbGRyZW4gYXQgdGhlIGVuZC9iZWdpbm5pbmcgb2YgdGhlIHRpbWVsaW5lIGFyZSByZW5kZXJlZCBwcm9wZXJseS4gSWYsIGZvciBleGFtcGxlLFxuICAgICAgICBhIDMtc2Vjb25kIGxvbmcgdGltZWxpbmUgcmVuZGVyZWQgYXQgMi45IHNlY29uZHMgcHJldmlvdXNseSwgYW5kIG5vdyByZW5kZXJzIGF0IDMuMiBzZWNvbmRzICh3aGljaFxuICAgICAgICB3b3VsZCBnZXQgdHJhbnNsYXRlZCB0byAyLjggc2Vjb25kcyBpZiB0aGUgdGltZWxpbmUgeW95b3Mgb3IgMC4yIHNlY29uZHMgaWYgaXQganVzdCByZXBlYXRzKSwgdGhlcmVcbiAgICAgICAgY291bGQgYmUgYSBjYWxsYmFjayBvciBhIHNob3J0IHR3ZWVuIHRoYXQncyBhdCAyLjk1IG9yIDMgc2Vjb25kcyBpbiB3aGljaCB3b3VsZG4ndCByZW5kZXIuIFNvXG4gICAgICAgIHdlIG5lZWQgdG8gcHVzaCB0aGUgdGltZWxpbmUgdG8gdGhlIGVuZCAoYW5kL29yIGJlZ2lubmluZyBkZXBlbmRpbmcgb24gaXRzIHlveW8gdmFsdWUpLiBBbHNvIHdlIG11c3RcbiAgICAgICAgZW5zdXJlIHRoYXQgemVyby1kdXJhdGlvbiB0d2VlbnMgYXQgdGhlIHZlcnkgYmVnaW5uaW5nIG9yIGVuZCBvZiB0aGUgVGltZWxpbmUgd29yay5cbiAgICAgICAgKi9cblxuXG4gICAgICAgIGlmIChpdGVyYXRpb24gIT09IHByZXZJdGVyYXRpb24gJiYgIXRoaXMuX2xvY2spIHtcbiAgICAgICAgICB2YXIgcmV3aW5kaW5nID0geW95byAmJiBwcmV2SXRlcmF0aW9uICYgMSxcbiAgICAgICAgICAgICAgZG9lc1dyYXAgPSByZXdpbmRpbmcgPT09ICh5b3lvICYmIGl0ZXJhdGlvbiAmIDEpO1xuICAgICAgICAgIGl0ZXJhdGlvbiA8IHByZXZJdGVyYXRpb24gJiYgKHJld2luZGluZyA9ICFyZXdpbmRpbmcpO1xuICAgICAgICAgIHByZXZUaW1lID0gcmV3aW5kaW5nID8gMCA6IHRUaW1lICUgZHVyID8gZHVyIDogdFRpbWU7IC8vIGlmIHRoZSBwbGF5aGVhZCBpcyBsYW5kaW5nIGV4YWN0bHkgYXQgdGhlIGVuZCBvZiBhbiBpdGVyYXRpb24sIHVzZSB0aGF0IHRvdGFsVGltZSByYXRoZXIgdGhhbiBvbmx5IHRoZSBkdXJhdGlvbiwgb3RoZXJ3aXNlIGl0J2xsIHNraXAgdGhlIDJuZCByZW5kZXIgc2luY2UgaXQncyBlZmZlY3RpdmVseSBhdCB0aGUgc2FtZSB0aW1lLlxuXG4gICAgICAgICAgdGhpcy5fbG9jayA9IDE7XG4gICAgICAgICAgdGhpcy5yZW5kZXIocHJldlRpbWUgfHwgKGlzWW95byA/IDAgOiBfcm91bmRQcmVjaXNlKGl0ZXJhdGlvbiAqIGN5Y2xlRHVyYXRpb24pKSwgc3VwcHJlc3NFdmVudHMsICFkdXIpLl9sb2NrID0gMDtcbiAgICAgICAgICB0aGlzLl90VGltZSA9IHRUaW1lOyAvLyBpZiBhIHVzZXIgZ2V0cyB0aGUgaXRlcmF0aW9uKCkgaW5zaWRlIHRoZSBvblJlcGVhdCwgZm9yIGV4YW1wbGUsIGl0IHNob3VsZCBiZSBhY2N1cmF0ZS5cblxuICAgICAgICAgICFzdXBwcmVzc0V2ZW50cyAmJiB0aGlzLnBhcmVudCAmJiBfY2FsbGJhY2sodGhpcywgXCJvblJlcGVhdFwiKTtcbiAgICAgICAgICB0aGlzLnZhcnMucmVwZWF0UmVmcmVzaCAmJiAhaXNZb3lvICYmICh0aGlzLmludmFsaWRhdGUoKS5fbG9jayA9IDEpO1xuXG4gICAgICAgICAgaWYgKHByZXZUaW1lICYmIHByZXZUaW1lICE9PSB0aGlzLl90aW1lIHx8IHByZXZQYXVzZWQgIT09ICF0aGlzLl90cyB8fCB0aGlzLnZhcnMub25SZXBlYXQgJiYgIXRoaXMucGFyZW50ICYmICF0aGlzLl9hY3QpIHtcbiAgICAgICAgICAgIC8vIGlmIHByZXZUaW1lIGlzIDAgYW5kIHdlIHJlbmRlciBhdCB0aGUgdmVyeSBlbmQsIF90aW1lIHdpbGwgYmUgdGhlIGVuZCwgdGh1cyB3b24ndCBtYXRjaC4gU28gaW4gdGhpcyBlZGdlIGNhc2UsIHByZXZUaW1lIHdvbid0IG1hdGNoIF90aW1lIGJ1dCB0aGF0J3Mgb2theS4gSWYgaXQgZ2V0cyBraWxsZWQgaW4gdGhlIG9uUmVwZWF0LCBlamVjdCBhcyB3ZWxsLlxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZHVyID0gdGhpcy5fZHVyOyAvLyBpbiBjYXNlIHRoZSBkdXJhdGlvbiBjaGFuZ2VkIGluIHRoZSBvblJlcGVhdFxuXG4gICAgICAgICAgdER1ciA9IHRoaXMuX3REdXI7XG5cbiAgICAgICAgICBpZiAoZG9lc1dyYXApIHtcbiAgICAgICAgICAgIHRoaXMuX2xvY2sgPSAyO1xuICAgICAgICAgICAgcHJldlRpbWUgPSByZXdpbmRpbmcgPyBkdXIgOiAtMC4wMDAxO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXIocHJldlRpbWUsIHRydWUpO1xuICAgICAgICAgICAgdGhpcy52YXJzLnJlcGVhdFJlZnJlc2ggJiYgIWlzWW95byAmJiB0aGlzLmludmFsaWRhdGUoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLl9sb2NrID0gMDtcblxuICAgICAgICAgIGlmICghdGhpcy5fdHMgJiYgIXByZXZQYXVzZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgIH0gLy9pbiBvcmRlciBmb3IgeW95b0Vhc2UgdG8gd29yayBwcm9wZXJseSB3aGVuIHRoZXJlJ3MgYSBzdGFnZ2VyLCB3ZSBtdXN0IHN3YXAgb3V0IHRoZSBlYXNlIGluIGVhY2ggc3ViLXR3ZWVuLlxuXG5cbiAgICAgICAgICBfcHJvcGFnYXRlWW95b0Vhc2UodGhpcywgaXNZb3lvKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5faGFzUGF1c2UgJiYgIXRoaXMuX2ZvcmNpbmcgJiYgdGhpcy5fbG9jayA8IDIpIHtcbiAgICAgICAgcGF1c2VUd2VlbiA9IF9maW5kTmV4dFBhdXNlVHdlZW4odGhpcywgX3JvdW5kUHJlY2lzZShwcmV2VGltZSksIF9yb3VuZFByZWNpc2UodGltZSkpO1xuXG4gICAgICAgIGlmIChwYXVzZVR3ZWVuKSB7XG4gICAgICAgICAgdFRpbWUgLT0gdGltZSAtICh0aW1lID0gcGF1c2VUd2Vlbi5fc3RhcnQpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3RUaW1lID0gdFRpbWU7XG4gICAgICB0aGlzLl90aW1lID0gdGltZTtcbiAgICAgIHRoaXMuX2FjdCA9ICF0aW1lU2NhbGU7IC8vYXMgbG9uZyBhcyBpdCdzIG5vdCBwYXVzZWQsIGZvcmNlIGl0IHRvIGJlIGFjdGl2ZSBzbyB0aGF0IGlmIHRoZSB1c2VyIHJlbmRlcnMgaW5kZXBlbmRlbnQgb2YgdGhlIHBhcmVudCB0aW1lbGluZSwgaXQnbGwgYmUgZm9yY2VkIHRvIHJlLXJlbmRlciBvbiB0aGUgbmV4dCB0aWNrLlxuXG4gICAgICBpZiAoIXRoaXMuX2luaXR0ZWQpIHtcbiAgICAgICAgdGhpcy5fb25VcGRhdGUgPSB0aGlzLnZhcnMub25VcGRhdGU7XG4gICAgICAgIHRoaXMuX2luaXR0ZWQgPSAxO1xuICAgICAgICB0aGlzLl96VGltZSA9IHRvdGFsVGltZTtcbiAgICAgICAgcHJldlRpbWUgPSAwOyAvLyB1cG9uIGluaXQsIHRoZSBwbGF5aGVhZCBzaG91bGQgYWx3YXlzIGdvIGZvcndhcmQ7IHNvbWVvbmUgY291bGQgaW52YWxpZGF0ZSgpIGEgY29tcGxldGVkIHRpbWVsaW5lIGFuZCB0aGVuIGlmIHRoZXkgcmVzdGFydCgpLCB0aGF0IHdvdWxkIG1ha2UgY2hpbGQgdHdlZW5zIHJlbmRlciBpbiByZXZlcnNlIG9yZGVyIHdoaWNoIGNvdWxkIGxvY2sgaW4gdGhlIHdyb25nIHN0YXJ0aW5nIHZhbHVlcyBpZiB0aGV5IGJ1aWxkIG9uIGVhY2ggb3RoZXIsIGxpa2UgdGwudG8ob2JqLCB7eDogMTAwfSkudG8ob2JqLCB7eDogMH0pLlxuICAgICAgfVxuXG4gICAgICBpZiAoIXByZXZUaW1lICYmIHRpbWUgJiYgIXN1cHByZXNzRXZlbnRzICYmICFpdGVyYXRpb24pIHtcbiAgICAgICAgX2NhbGxiYWNrKHRoaXMsIFwib25TdGFydFwiKTtcblxuICAgICAgICBpZiAodGhpcy5fdFRpbWUgIT09IHRUaW1lKSB7XG4gICAgICAgICAgLy8gaW4gY2FzZSB0aGUgb25TdGFydCB0cmlnZ2VyZWQgYSByZW5kZXIgYXQgYSBkaWZmZXJlbnQgc3BvdCwgZWplY3QuIExpa2UgaWYgc29tZW9uZSBkaWQgYW5pbWF0aW9uLnBhdXNlKDAuNSkgb3Igc29tZXRoaW5nIGluc2lkZSB0aGUgb25TdGFydC5cbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodGltZSA+PSBwcmV2VGltZSAmJiB0b3RhbFRpbWUgPj0gMCkge1xuICAgICAgICBjaGlsZCA9IHRoaXMuX2ZpcnN0O1xuXG4gICAgICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgICAgIG5leHQgPSBjaGlsZC5fbmV4dDtcblxuICAgICAgICAgIGlmICgoY2hpbGQuX2FjdCB8fCB0aW1lID49IGNoaWxkLl9zdGFydCkgJiYgY2hpbGQuX3RzICYmIHBhdXNlVHdlZW4gIT09IGNoaWxkKSB7XG4gICAgICAgICAgICBpZiAoY2hpbGQucGFyZW50ICE9PSB0aGlzKSB7XG4gICAgICAgICAgICAgIC8vIGFuIGV4dHJlbWUgZWRnZSBjYXNlIC0gdGhlIGNoaWxkJ3MgcmVuZGVyIGNvdWxkIGRvIHNvbWV0aGluZyBsaWtlIGtpbGwoKSB0aGUgXCJuZXh0XCIgb25lIGluIHRoZSBsaW5rZWQgbGlzdCwgb3IgcmVwYXJlbnQgaXQuIEluIHRoYXQgY2FzZSB3ZSBtdXN0IHJlLWluaXRpYXRlIHRoZSB3aG9sZSByZW5kZXIgdG8gYmUgc2FmZS5cbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyKHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY2hpbGQucmVuZGVyKGNoaWxkLl90cyA+IDAgPyAodGltZSAtIGNoaWxkLl9zdGFydCkgKiBjaGlsZC5fdHMgOiAoY2hpbGQuX2RpcnR5ID8gY2hpbGQudG90YWxEdXJhdGlvbigpIDogY2hpbGQuX3REdXIpICsgKHRpbWUgLSBjaGlsZC5fc3RhcnQpICogY2hpbGQuX3RzLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuXG4gICAgICAgICAgICBpZiAodGltZSAhPT0gdGhpcy5fdGltZSB8fCAhdGhpcy5fdHMgJiYgIXByZXZQYXVzZWQpIHtcbiAgICAgICAgICAgICAgLy9pbiBjYXNlIGEgdHdlZW4gcGF1c2VzIG9yIHNlZWtzIHRoZSB0aW1lbGluZSB3aGVuIHJlbmRlcmluZywgbGlrZSBpbnNpZGUgb2YgYW4gb25VcGRhdGUvb25Db21wbGV0ZVxuICAgICAgICAgICAgICBwYXVzZVR3ZWVuID0gMDtcbiAgICAgICAgICAgICAgbmV4dCAmJiAodFRpbWUgKz0gdGhpcy5felRpbWUgPSAtX3RpbnlOdW0pOyAvLyBpdCBkaWRuJ3QgZmluaXNoIHJlbmRlcmluZywgc28gZmxhZyB6VGltZSBhcyBuZWdhdGl2ZSBzbyB0aGF0IHNvIHRoYXQgdGhlIG5leHQgdGltZSByZW5kZXIoKSBpcyBjYWxsZWQgaXQnbGwgYmUgZm9yY2VkICh0byByZW5kZXIgYW55IHJlbWFpbmluZyBjaGlsZHJlbilcblxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjaGlsZCA9IG5leHQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNoaWxkID0gdGhpcy5fbGFzdDtcbiAgICAgICAgdmFyIGFkanVzdGVkVGltZSA9IHRvdGFsVGltZSA8IDAgPyB0b3RhbFRpbWUgOiB0aW1lOyAvL3doZW4gdGhlIHBsYXloZWFkIGdvZXMgYmFja3dhcmQgYmV5b25kIHRoZSBzdGFydCBvZiB0aGlzIHRpbWVsaW5lLCB3ZSBtdXN0IHBhc3MgdGhhdCBpbmZvcm1hdGlvbiBkb3duIHRvIHRoZSBjaGlsZCBhbmltYXRpb25zIHNvIHRoYXQgemVyby1kdXJhdGlvbiB0d2VlbnMga25vdyB3aGV0aGVyIHRvIHJlbmRlciB0aGVpciBzdGFydGluZyBvciBlbmRpbmcgdmFsdWVzLlxuXG4gICAgICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgICAgIG5leHQgPSBjaGlsZC5fcHJldjtcblxuICAgICAgICAgIGlmICgoY2hpbGQuX2FjdCB8fCBhZGp1c3RlZFRpbWUgPD0gY2hpbGQuX2VuZCkgJiYgY2hpbGQuX3RzICYmIHBhdXNlVHdlZW4gIT09IGNoaWxkKSB7XG4gICAgICAgICAgICBpZiAoY2hpbGQucGFyZW50ICE9PSB0aGlzKSB7XG4gICAgICAgICAgICAgIC8vIGFuIGV4dHJlbWUgZWRnZSBjYXNlIC0gdGhlIGNoaWxkJ3MgcmVuZGVyIGNvdWxkIGRvIHNvbWV0aGluZyBsaWtlIGtpbGwoKSB0aGUgXCJuZXh0XCIgb25lIGluIHRoZSBsaW5rZWQgbGlzdCwgb3IgcmVwYXJlbnQgaXQuIEluIHRoYXQgY2FzZSB3ZSBtdXN0IHJlLWluaXRpYXRlIHRoZSB3aG9sZSByZW5kZXIgdG8gYmUgc2FmZS5cbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyKHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY2hpbGQucmVuZGVyKGNoaWxkLl90cyA+IDAgPyAoYWRqdXN0ZWRUaW1lIC0gY2hpbGQuX3N0YXJ0KSAqIGNoaWxkLl90cyA6IChjaGlsZC5fZGlydHkgPyBjaGlsZC50b3RhbER1cmF0aW9uKCkgOiBjaGlsZC5fdER1cikgKyAoYWRqdXN0ZWRUaW1lIC0gY2hpbGQuX3N0YXJ0KSAqIGNoaWxkLl90cywgc3VwcHJlc3NFdmVudHMsIGZvcmNlIHx8IF9yZXZlcnRpbmcgJiYgKGNoaWxkLl9pbml0dGVkIHx8IGNoaWxkLl9zdGFydEF0KSk7IC8vIGlmIHJldmVydGluZywgd2Ugc2hvdWxkIGFsd2F5cyBmb3JjZSByZW5kZXJzIG9mIGluaXR0ZWQgdHdlZW5zIChidXQgcmVtZW1iZXIgdGhhdCAuZnJvbVRvKCkgb3IgLmZyb20oKSBtYXkgaGF2ZSBhIF9zdGFydEF0IGJ1dCBub3QgX2luaXR0ZWQgeWV0KS4gSWYsIGZvciBleGFtcGxlLCBhIC5mcm9tVG8oKSB0d2VlbiB3aXRoIGEgc3RhZ2dlciAod2hpY2ggY3JlYXRlcyBhbiBpbnRlcm5hbCB0aW1lbGluZSkgZ2V0cyByZXZlcnRlZCBCRUZPUkUgc29tZSBvZiBpdHMgY2hpbGQgdHdlZW5zIHJlbmRlciBmb3IgdGhlIGZpcnN0IHRpbWUsIGl0IG1heSBub3QgcHJvcGVybHkgdHJpZ2dlciB0aGVtIHRvIHJldmVydC5cblxuICAgICAgICAgICAgaWYgKHRpbWUgIT09IHRoaXMuX3RpbWUgfHwgIXRoaXMuX3RzICYmICFwcmV2UGF1c2VkKSB7XG4gICAgICAgICAgICAgIC8vaW4gY2FzZSBhIHR3ZWVuIHBhdXNlcyBvciBzZWVrcyB0aGUgdGltZWxpbmUgd2hlbiByZW5kZXJpbmcsIGxpa2UgaW5zaWRlIG9mIGFuIG9uVXBkYXRlL29uQ29tcGxldGVcbiAgICAgICAgICAgICAgcGF1c2VUd2VlbiA9IDA7XG4gICAgICAgICAgICAgIG5leHQgJiYgKHRUaW1lICs9IHRoaXMuX3pUaW1lID0gYWRqdXN0ZWRUaW1lID8gLV90aW55TnVtIDogX3RpbnlOdW0pOyAvLyBpdCBkaWRuJ3QgZmluaXNoIHJlbmRlcmluZywgc28gYWRqdXN0IHpUaW1lIHNvIHRoYXQgc28gdGhhdCB0aGUgbmV4dCB0aW1lIHJlbmRlcigpIGlzIGNhbGxlZCBpdCdsbCBiZSBmb3JjZWQgKHRvIHJlbmRlciBhbnkgcmVtYWluaW5nIGNoaWxkcmVuKVxuXG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGNoaWxkID0gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAocGF1c2VUd2VlbiAmJiAhc3VwcHJlc3NFdmVudHMpIHtcbiAgICAgICAgdGhpcy5wYXVzZSgpO1xuICAgICAgICBwYXVzZVR3ZWVuLnJlbmRlcih0aW1lID49IHByZXZUaW1lID8gMCA6IC1fdGlueU51bSkuX3pUaW1lID0gdGltZSA+PSBwcmV2VGltZSA/IDEgOiAtMTtcblxuICAgICAgICBpZiAodGhpcy5fdHMpIHtcbiAgICAgICAgICAvL3RoZSBjYWxsYmFjayByZXN1bWVkIHBsYXliYWNrISBTbyBzaW5jZSB3ZSBtYXkgaGF2ZSBoZWxkIGJhY2sgdGhlIHBsYXloZWFkIGR1ZSB0byB3aGVyZSB0aGUgcGF1c2UgaXMgcG9zaXRpb25lZCwgZ28gYWhlYWQgYW5kIGp1bXAgdG8gd2hlcmUgaXQncyBTVVBQT1NFRCB0byBiZSAoaWYgbm8gcGF1c2UgaGFwcGVuZWQpLlxuICAgICAgICAgIHRoaXMuX3N0YXJ0ID0gcHJldlN0YXJ0OyAvL2lmIHRoZSBwYXVzZSB3YXMgYXQgYW4gZWFybGllciB0aW1lIGFuZCB0aGUgdXNlciByZXN1bWVkIGluIHRoZSBjYWxsYmFjaywgaXQgY291bGQgcmVwb3NpdGlvbiB0aGUgdGltZWxpbmUgKGNoYW5naW5nIGl0cyBzdGFydFRpbWUpLCB0aHJvd2luZyB0aGluZ3Mgb2ZmIHNsaWdodGx5LCBzbyB3ZSBtYWtlIHN1cmUgdGhlIF9zdGFydCBkb2Vzbid0IHNoaWZ0LlxuXG4gICAgICAgICAgX3NldEVuZCh0aGlzKTtcblxuICAgICAgICAgIHJldHVybiB0aGlzLnJlbmRlcih0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5fb25VcGRhdGUgJiYgIXN1cHByZXNzRXZlbnRzICYmIF9jYWxsYmFjayh0aGlzLCBcIm9uVXBkYXRlXCIsIHRydWUpO1xuICAgICAgaWYgKHRUaW1lID09PSB0RHVyICYmIHRoaXMuX3RUaW1lID49IHRoaXMudG90YWxEdXJhdGlvbigpIHx8ICF0VGltZSAmJiBwcmV2VGltZSkgaWYgKHByZXZTdGFydCA9PT0gdGhpcy5fc3RhcnQgfHwgTWF0aC5hYnModGltZVNjYWxlKSAhPT0gTWF0aC5hYnModGhpcy5fdHMpKSBpZiAoIXRoaXMuX2xvY2spIHtcbiAgICAgICAgLy8gcmVtZW1iZXIsIGEgY2hpbGQncyBjYWxsYmFjayBtYXkgYWx0ZXIgdGhpcyB0aW1lbGluZSdzIHBsYXloZWFkIG9yIHRpbWVTY2FsZSB3aGljaCBpcyB3aHkgd2UgbmVlZCB0byBhZGQgc29tZSBvZiB0aGVzZSBjaGVja3MuXG4gICAgICAgICh0b3RhbFRpbWUgfHwgIWR1cikgJiYgKHRUaW1lID09PSB0RHVyICYmIHRoaXMuX3RzID4gMCB8fCAhdFRpbWUgJiYgdGhpcy5fdHMgPCAwKSAmJiBfcmVtb3ZlRnJvbVBhcmVudCh0aGlzLCAxKTsgLy8gZG9uJ3QgcmVtb3ZlIGlmIHRoZSB0aW1lbGluZSBpcyByZXZlcnNlZCBhbmQgdGhlIHBsYXloZWFkIGlzbid0IGF0IDAsIG90aGVyd2lzZSB0bC5wcm9ncmVzcygxKS5yZXZlcnNlKCkgd29uJ3Qgd29yay4gT25seSByZW1vdmUgaWYgdGhlIHBsYXloZWFkIGlzIGF0IHRoZSBlbmQgYW5kIHRpbWVTY2FsZSBpcyBwb3NpdGl2ZSwgb3IgaWYgdGhlIHBsYXloZWFkIGlzIGF0IDAgYW5kIHRoZSB0aW1lU2NhbGUgaXMgbmVnYXRpdmUuXG5cbiAgICAgICAgaWYgKCFzdXBwcmVzc0V2ZW50cyAmJiAhKHRvdGFsVGltZSA8IDAgJiYgIXByZXZUaW1lKSAmJiAodFRpbWUgfHwgcHJldlRpbWUgfHwgIXREdXIpKSB7XG4gICAgICAgICAgX2NhbGxiYWNrKHRoaXMsIHRUaW1lID09PSB0RHVyICYmIHRvdGFsVGltZSA+PSAwID8gXCJvbkNvbXBsZXRlXCIgOiBcIm9uUmV2ZXJzZUNvbXBsZXRlXCIsIHRydWUpO1xuXG4gICAgICAgICAgdGhpcy5fcHJvbSAmJiAhKHRUaW1lIDwgdER1ciAmJiB0aGlzLnRpbWVTY2FsZSgpID4gMCkgJiYgdGhpcy5fcHJvbSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvMi5hZGQgPSBmdW5jdGlvbiBhZGQoY2hpbGQsIHBvc2l0aW9uKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICBfaXNOdW1iZXIocG9zaXRpb24pIHx8IChwb3NpdGlvbiA9IF9wYXJzZVBvc2l0aW9uKHRoaXMsIHBvc2l0aW9uLCBjaGlsZCkpO1xuXG4gICAgaWYgKCEoY2hpbGQgaW5zdGFuY2VvZiBBbmltYXRpb24pKSB7XG4gICAgICBpZiAoX2lzQXJyYXkoY2hpbGQpKSB7XG4gICAgICAgIGNoaWxkLmZvckVhY2goZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgIHJldHVybiBfdGhpczIuYWRkKG9iaiwgcG9zaXRpb24pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIGlmIChfaXNTdHJpbmcoY2hpbGQpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFkZExhYmVsKGNoaWxkLCBwb3NpdGlvbik7XG4gICAgICB9XG5cbiAgICAgIGlmIChfaXNGdW5jdGlvbihjaGlsZCkpIHtcbiAgICAgICAgY2hpbGQgPSBUd2Vlbi5kZWxheWVkQ2FsbCgwLCBjaGlsZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcyAhPT0gY2hpbGQgPyBfYWRkVG9UaW1lbGluZSh0aGlzLCBjaGlsZCwgcG9zaXRpb24pIDogdGhpczsgLy9kb24ndCBhbGxvdyBhIHRpbWVsaW5lIHRvIGJlIGFkZGVkIHRvIGl0c2VsZiBhcyBhIGNoaWxkIVxuICB9O1xuXG4gIF9wcm90bzIuZ2V0Q2hpbGRyZW4gPSBmdW5jdGlvbiBnZXRDaGlsZHJlbihuZXN0ZWQsIHR3ZWVucywgdGltZWxpbmVzLCBpZ25vcmVCZWZvcmVUaW1lKSB7XG4gICAgaWYgKG5lc3RlZCA9PT0gdm9pZCAwKSB7XG4gICAgICBuZXN0ZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmICh0d2VlbnMgPT09IHZvaWQgMCkge1xuICAgICAgdHdlZW5zID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAodGltZWxpbmVzID09PSB2b2lkIDApIHtcbiAgICAgIHRpbWVsaW5lcyA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKGlnbm9yZUJlZm9yZVRpbWUgPT09IHZvaWQgMCkge1xuICAgICAgaWdub3JlQmVmb3JlVGltZSA9IC1fYmlnTnVtO1xuICAgIH1cblxuICAgIHZhciBhID0gW10sXG4gICAgICAgIGNoaWxkID0gdGhpcy5fZmlyc3Q7XG5cbiAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgIGlmIChjaGlsZC5fc3RhcnQgPj0gaWdub3JlQmVmb3JlVGltZSkge1xuICAgICAgICBpZiAoY2hpbGQgaW5zdGFuY2VvZiBUd2Vlbikge1xuICAgICAgICAgIHR3ZWVucyAmJiBhLnB1c2goY2hpbGQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRpbWVsaW5lcyAmJiBhLnB1c2goY2hpbGQpO1xuICAgICAgICAgIG5lc3RlZCAmJiBhLnB1c2guYXBwbHkoYSwgY2hpbGQuZ2V0Q2hpbGRyZW4odHJ1ZSwgdHdlZW5zLCB0aW1lbGluZXMpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjaGlsZCA9IGNoaWxkLl9uZXh0O1xuICAgIH1cblxuICAgIHJldHVybiBhO1xuICB9O1xuXG4gIF9wcm90bzIuZ2V0QnlJZCA9IGZ1bmN0aW9uIGdldEJ5SWQoaWQpIHtcbiAgICB2YXIgYW5pbWF0aW9ucyA9IHRoaXMuZ2V0Q2hpbGRyZW4oMSwgMSwgMSksXG4gICAgICAgIGkgPSBhbmltYXRpb25zLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGlmIChhbmltYXRpb25zW2ldLnZhcnMuaWQgPT09IGlkKSB7XG4gICAgICAgIHJldHVybiBhbmltYXRpb25zW2ldO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBfcHJvdG8yLnJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZShjaGlsZCkge1xuICAgIGlmIChfaXNTdHJpbmcoY2hpbGQpKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZW1vdmVMYWJlbChjaGlsZCk7XG4gICAgfVxuXG4gICAgaWYgKF9pc0Z1bmN0aW9uKGNoaWxkKSkge1xuICAgICAgcmV0dXJuIHRoaXMua2lsbFR3ZWVuc09mKGNoaWxkKTtcbiAgICB9XG5cbiAgICBfcmVtb3ZlTGlua2VkTGlzdEl0ZW0odGhpcywgY2hpbGQpO1xuXG4gICAgaWYgKGNoaWxkID09PSB0aGlzLl9yZWNlbnQpIHtcbiAgICAgIHRoaXMuX3JlY2VudCA9IHRoaXMuX2xhc3Q7XG4gICAgfVxuXG4gICAgcmV0dXJuIF91bmNhY2hlKHRoaXMpO1xuICB9O1xuXG4gIF9wcm90bzIudG90YWxUaW1lID0gZnVuY3Rpb24gdG90YWxUaW1lKF90b3RhbFRpbWUyLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3RUaW1lO1xuICAgIH1cblxuICAgIHRoaXMuX2ZvcmNpbmcgPSAxO1xuXG4gICAgaWYgKCF0aGlzLl9kcCAmJiB0aGlzLl90cykge1xuICAgICAgLy9zcGVjaWFsIGNhc2UgZm9yIHRoZSBnbG9iYWwgdGltZWxpbmUgKG9yIGFueSBvdGhlciB0aGF0IGhhcyBubyBwYXJlbnQgb3IgZGV0YWNoZWQgcGFyZW50KS5cbiAgICAgIHRoaXMuX3N0YXJ0ID0gX3JvdW5kUHJlY2lzZShfdGlja2VyLnRpbWUgLSAodGhpcy5fdHMgPiAwID8gX3RvdGFsVGltZTIgLyB0aGlzLl90cyA6ICh0aGlzLnRvdGFsRHVyYXRpb24oKSAtIF90b3RhbFRpbWUyKSAvIC10aGlzLl90cykpO1xuICAgIH1cblxuICAgIF9BbmltYXRpb24ucHJvdG90eXBlLnRvdGFsVGltZS5jYWxsKHRoaXMsIF90b3RhbFRpbWUyLCBzdXBwcmVzc0V2ZW50cyk7XG5cbiAgICB0aGlzLl9mb3JjaW5nID0gMDtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLmFkZExhYmVsID0gZnVuY3Rpb24gYWRkTGFiZWwobGFiZWwsIHBvc2l0aW9uKSB7XG4gICAgdGhpcy5sYWJlbHNbbGFiZWxdID0gX3BhcnNlUG9zaXRpb24odGhpcywgcG9zaXRpb24pO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIucmVtb3ZlTGFiZWwgPSBmdW5jdGlvbiByZW1vdmVMYWJlbChsYWJlbCkge1xuICAgIGRlbGV0ZSB0aGlzLmxhYmVsc1tsYWJlbF07XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvMi5hZGRQYXVzZSA9IGZ1bmN0aW9uIGFkZFBhdXNlKHBvc2l0aW9uLCBjYWxsYmFjaywgcGFyYW1zKSB7XG4gICAgdmFyIHQgPSBUd2Vlbi5kZWxheWVkQ2FsbCgwLCBjYWxsYmFjayB8fCBfZW1wdHlGdW5jLCBwYXJhbXMpO1xuICAgIHQuZGF0YSA9IFwiaXNQYXVzZVwiO1xuICAgIHRoaXMuX2hhc1BhdXNlID0gMTtcbiAgICByZXR1cm4gX2FkZFRvVGltZWxpbmUodGhpcywgdCwgX3BhcnNlUG9zaXRpb24odGhpcywgcG9zaXRpb24pKTtcbiAgfTtcblxuICBfcHJvdG8yLnJlbW92ZVBhdXNlID0gZnVuY3Rpb24gcmVtb3ZlUGF1c2UocG9zaXRpb24pIHtcbiAgICB2YXIgY2hpbGQgPSB0aGlzLl9maXJzdDtcbiAgICBwb3NpdGlvbiA9IF9wYXJzZVBvc2l0aW9uKHRoaXMsIHBvc2l0aW9uKTtcblxuICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgaWYgKGNoaWxkLl9zdGFydCA9PT0gcG9zaXRpb24gJiYgY2hpbGQuZGF0YSA9PT0gXCJpc1BhdXNlXCIpIHtcbiAgICAgICAgX3JlbW92ZUZyb21QYXJlbnQoY2hpbGQpO1xuICAgICAgfVxuXG4gICAgICBjaGlsZCA9IGNoaWxkLl9uZXh0O1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8yLmtpbGxUd2VlbnNPZiA9IGZ1bmN0aW9uIGtpbGxUd2VlbnNPZih0YXJnZXRzLCBwcm9wcywgb25seUFjdGl2ZSkge1xuICAgIHZhciB0d2VlbnMgPSB0aGlzLmdldFR3ZWVuc09mKHRhcmdldHMsIG9ubHlBY3RpdmUpLFxuICAgICAgICBpID0gdHdlZW5zLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIF9vdmVyd3JpdGluZ1R3ZWVuICE9PSB0d2VlbnNbaV0gJiYgdHdlZW5zW2ldLmtpbGwodGFyZ2V0cywgcHJvcHMpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuZ2V0VHdlZW5zT2YgPSBmdW5jdGlvbiBnZXRUd2VlbnNPZih0YXJnZXRzLCBvbmx5QWN0aXZlKSB7XG4gICAgdmFyIGEgPSBbXSxcbiAgICAgICAgcGFyc2VkVGFyZ2V0cyA9IHRvQXJyYXkodGFyZ2V0cyksXG4gICAgICAgIGNoaWxkID0gdGhpcy5fZmlyc3QsXG4gICAgICAgIGlzR2xvYmFsVGltZSA9IF9pc051bWJlcihvbmx5QWN0aXZlKSxcbiAgICAgICAgLy8gYSBudW1iZXIgaXMgaW50ZXJwcmV0ZWQgYXMgYSBnbG9iYWwgdGltZS4gSWYgdGhlIGFuaW1hdGlvbiBzcGFuc1xuICAgIGNoaWxkcmVuO1xuXG4gICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICBpZiAoY2hpbGQgaW5zdGFuY2VvZiBUd2Vlbikge1xuICAgICAgICBpZiAoX2FycmF5Q29udGFpbnNBbnkoY2hpbGQuX3RhcmdldHMsIHBhcnNlZFRhcmdldHMpICYmIChpc0dsb2JhbFRpbWUgPyAoIV9vdmVyd3JpdGluZ1R3ZWVuIHx8IGNoaWxkLl9pbml0dGVkICYmIGNoaWxkLl90cykgJiYgY2hpbGQuZ2xvYmFsVGltZSgwKSA8PSBvbmx5QWN0aXZlICYmIGNoaWxkLmdsb2JhbFRpbWUoY2hpbGQudG90YWxEdXJhdGlvbigpKSA+IG9ubHlBY3RpdmUgOiAhb25seUFjdGl2ZSB8fCBjaGlsZC5pc0FjdGl2ZSgpKSkge1xuICAgICAgICAgIC8vIG5vdGU6IGlmIHRoaXMgaXMgZm9yIG92ZXJ3cml0aW5nLCBpdCBzaG91bGQgb25seSBiZSBmb3IgdHdlZW5zIHRoYXQgYXJlbid0IHBhdXNlZCBhbmQgYXJlIGluaXR0ZWQuXG4gICAgICAgICAgYS5wdXNoKGNoaWxkKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICgoY2hpbGRyZW4gPSBjaGlsZC5nZXRUd2VlbnNPZihwYXJzZWRUYXJnZXRzLCBvbmx5QWN0aXZlKSkubGVuZ3RoKSB7XG4gICAgICAgIGEucHVzaC5hcHBseShhLCBjaGlsZHJlbik7XG4gICAgICB9XG5cbiAgICAgIGNoaWxkID0gY2hpbGQuX25leHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGE7XG4gIH0gLy8gcG90ZW50aWFsIGZ1dHVyZSBmZWF0dXJlIC0gdGFyZ2V0cygpIG9uIHRpbWVsaW5lc1xuICAvLyB0YXJnZXRzKCkge1xuICAvLyBcdGxldCByZXN1bHQgPSBbXTtcbiAgLy8gXHR0aGlzLmdldENoaWxkcmVuKHRydWUsIHRydWUsIGZhbHNlKS5mb3JFYWNoKHQgPT4gcmVzdWx0LnB1c2goLi4udC50YXJnZXRzKCkpKTtcbiAgLy8gXHRyZXR1cm4gcmVzdWx0LmZpbHRlcigodiwgaSkgPT4gcmVzdWx0LmluZGV4T2YodikgPT09IGkpO1xuICAvLyB9XG4gIDtcblxuICBfcHJvdG8yLnR3ZWVuVG8gPSBmdW5jdGlvbiB0d2VlblRvKHBvc2l0aW9uLCB2YXJzKSB7XG4gICAgdmFycyA9IHZhcnMgfHwge307XG5cbiAgICB2YXIgdGwgPSB0aGlzLFxuICAgICAgICBlbmRUaW1lID0gX3BhcnNlUG9zaXRpb24odGwsIHBvc2l0aW9uKSxcbiAgICAgICAgX3ZhcnMgPSB2YXJzLFxuICAgICAgICBzdGFydEF0ID0gX3ZhcnMuc3RhcnRBdCxcbiAgICAgICAgX29uU3RhcnQgPSBfdmFycy5vblN0YXJ0LFxuICAgICAgICBvblN0YXJ0UGFyYW1zID0gX3ZhcnMub25TdGFydFBhcmFtcyxcbiAgICAgICAgaW1tZWRpYXRlUmVuZGVyID0gX3ZhcnMuaW1tZWRpYXRlUmVuZGVyLFxuICAgICAgICBpbml0dGVkLFxuICAgICAgICB0d2VlbiA9IFR3ZWVuLnRvKHRsLCBfc2V0RGVmYXVsdHMoe1xuICAgICAgZWFzZTogdmFycy5lYXNlIHx8IFwibm9uZVwiLFxuICAgICAgbGF6eTogZmFsc2UsXG4gICAgICBpbW1lZGlhdGVSZW5kZXI6IGZhbHNlLFxuICAgICAgdGltZTogZW5kVGltZSxcbiAgICAgIG92ZXJ3cml0ZTogXCJhdXRvXCIsXG4gICAgICBkdXJhdGlvbjogdmFycy5kdXJhdGlvbiB8fCBNYXRoLmFicygoZW5kVGltZSAtIChzdGFydEF0ICYmIFwidGltZVwiIGluIHN0YXJ0QXQgPyBzdGFydEF0LnRpbWUgOiB0bC5fdGltZSkpIC8gdGwudGltZVNjYWxlKCkpIHx8IF90aW55TnVtLFxuICAgICAgb25TdGFydDogZnVuY3Rpb24gb25TdGFydCgpIHtcbiAgICAgICAgdGwucGF1c2UoKTtcblxuICAgICAgICBpZiAoIWluaXR0ZWQpIHtcbiAgICAgICAgICB2YXIgZHVyYXRpb24gPSB2YXJzLmR1cmF0aW9uIHx8IE1hdGguYWJzKChlbmRUaW1lIC0gKHN0YXJ0QXQgJiYgXCJ0aW1lXCIgaW4gc3RhcnRBdCA/IHN0YXJ0QXQudGltZSA6IHRsLl90aW1lKSkgLyB0bC50aW1lU2NhbGUoKSk7XG4gICAgICAgICAgdHdlZW4uX2R1ciAhPT0gZHVyYXRpb24gJiYgX3NldER1cmF0aW9uKHR3ZWVuLCBkdXJhdGlvbiwgMCwgMSkucmVuZGVyKHR3ZWVuLl90aW1lLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgICBpbml0dGVkID0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIF9vblN0YXJ0ICYmIF9vblN0YXJ0LmFwcGx5KHR3ZWVuLCBvblN0YXJ0UGFyYW1zIHx8IFtdKTsgLy9pbiBjYXNlIHRoZSB1c2VyIGhhZCBhbiBvblN0YXJ0IGluIHRoZSB2YXJzIC0gd2UgZG9uJ3Qgd2FudCB0byBvdmVyd3JpdGUgaXQuXG4gICAgICB9XG4gICAgfSwgdmFycykpO1xuXG4gICAgcmV0dXJuIGltbWVkaWF0ZVJlbmRlciA/IHR3ZWVuLnJlbmRlcigwKSA6IHR3ZWVuO1xuICB9O1xuXG4gIF9wcm90bzIudHdlZW5Gcm9tVG8gPSBmdW5jdGlvbiB0d2VlbkZyb21Ubyhmcm9tUG9zaXRpb24sIHRvUG9zaXRpb24sIHZhcnMpIHtcbiAgICByZXR1cm4gdGhpcy50d2VlblRvKHRvUG9zaXRpb24sIF9zZXREZWZhdWx0cyh7XG4gICAgICBzdGFydEF0OiB7XG4gICAgICAgIHRpbWU6IF9wYXJzZVBvc2l0aW9uKHRoaXMsIGZyb21Qb3NpdGlvbilcbiAgICAgIH1cbiAgICB9LCB2YXJzKSk7XG4gIH07XG5cbiAgX3Byb3RvMi5yZWNlbnQgPSBmdW5jdGlvbiByZWNlbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlY2VudDtcbiAgfTtcblxuICBfcHJvdG8yLm5leHRMYWJlbCA9IGZ1bmN0aW9uIG5leHRMYWJlbChhZnRlclRpbWUpIHtcbiAgICBpZiAoYWZ0ZXJUaW1lID09PSB2b2lkIDApIHtcbiAgICAgIGFmdGVyVGltZSA9IHRoaXMuX3RpbWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9nZXRMYWJlbEluRGlyZWN0aW9uKHRoaXMsIF9wYXJzZVBvc2l0aW9uKHRoaXMsIGFmdGVyVGltZSkpO1xuICB9O1xuXG4gIF9wcm90bzIucHJldmlvdXNMYWJlbCA9IGZ1bmN0aW9uIHByZXZpb3VzTGFiZWwoYmVmb3JlVGltZSkge1xuICAgIGlmIChiZWZvcmVUaW1lID09PSB2b2lkIDApIHtcbiAgICAgIGJlZm9yZVRpbWUgPSB0aGlzLl90aW1lO1xuICAgIH1cblxuICAgIHJldHVybiBfZ2V0TGFiZWxJbkRpcmVjdGlvbih0aGlzLCBfcGFyc2VQb3NpdGlvbih0aGlzLCBiZWZvcmVUaW1lKSwgMSk7XG4gIH07XG5cbiAgX3Byb3RvMi5jdXJyZW50TGFiZWwgPSBmdW5jdGlvbiBjdXJyZW50TGFiZWwodmFsdWUpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRoaXMuc2Vlayh2YWx1ZSwgdHJ1ZSkgOiB0aGlzLnByZXZpb3VzTGFiZWwodGhpcy5fdGltZSArIF90aW55TnVtKTtcbiAgfTtcblxuICBfcHJvdG8yLnNoaWZ0Q2hpbGRyZW4gPSBmdW5jdGlvbiBzaGlmdENoaWxkcmVuKGFtb3VudCwgYWRqdXN0TGFiZWxzLCBpZ25vcmVCZWZvcmVUaW1lKSB7XG4gICAgaWYgKGlnbm9yZUJlZm9yZVRpbWUgPT09IHZvaWQgMCkge1xuICAgICAgaWdub3JlQmVmb3JlVGltZSA9IDA7XG4gICAgfVxuXG4gICAgdmFyIGNoaWxkID0gdGhpcy5fZmlyc3QsXG4gICAgICAgIGxhYmVscyA9IHRoaXMubGFiZWxzLFxuICAgICAgICBwO1xuXG4gICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICBpZiAoY2hpbGQuX3N0YXJ0ID49IGlnbm9yZUJlZm9yZVRpbWUpIHtcbiAgICAgICAgY2hpbGQuX3N0YXJ0ICs9IGFtb3VudDtcbiAgICAgICAgY2hpbGQuX2VuZCArPSBhbW91bnQ7XG4gICAgICB9XG5cbiAgICAgIGNoaWxkID0gY2hpbGQuX25leHQ7XG4gICAgfVxuXG4gICAgaWYgKGFkanVzdExhYmVscykge1xuICAgICAgZm9yIChwIGluIGxhYmVscykge1xuICAgICAgICBpZiAobGFiZWxzW3BdID49IGlnbm9yZUJlZm9yZVRpbWUpIHtcbiAgICAgICAgICBsYWJlbHNbcF0gKz0gYW1vdW50O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIF91bmNhY2hlKHRoaXMpO1xuICB9O1xuXG4gIF9wcm90bzIuaW52YWxpZGF0ZSA9IGZ1bmN0aW9uIGludmFsaWRhdGUoc29mdCkge1xuICAgIHZhciBjaGlsZCA9IHRoaXMuX2ZpcnN0O1xuICAgIHRoaXMuX2xvY2sgPSAwO1xuXG4gICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICBjaGlsZC5pbnZhbGlkYXRlKHNvZnQpO1xuICAgICAgY2hpbGQgPSBjaGlsZC5fbmV4dDtcbiAgICB9XG5cbiAgICByZXR1cm4gX0FuaW1hdGlvbi5wcm90b3R5cGUuaW52YWxpZGF0ZS5jYWxsKHRoaXMsIHNvZnQpO1xuICB9O1xuXG4gIF9wcm90bzIuY2xlYXIgPSBmdW5jdGlvbiBjbGVhcihpbmNsdWRlTGFiZWxzKSB7XG4gICAgaWYgKGluY2x1ZGVMYWJlbHMgPT09IHZvaWQgMCkge1xuICAgICAgaW5jbHVkZUxhYmVscyA9IHRydWU7XG4gICAgfVxuXG4gICAgdmFyIGNoaWxkID0gdGhpcy5fZmlyc3QsXG4gICAgICAgIG5leHQ7XG5cbiAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgIG5leHQgPSBjaGlsZC5fbmV4dDtcbiAgICAgIHRoaXMucmVtb3ZlKGNoaWxkKTtcbiAgICAgIGNoaWxkID0gbmV4dDtcbiAgICB9XG5cbiAgICB0aGlzLl9kcCAmJiAodGhpcy5fdGltZSA9IHRoaXMuX3RUaW1lID0gdGhpcy5fcFRpbWUgPSAwKTtcbiAgICBpbmNsdWRlTGFiZWxzICYmICh0aGlzLmxhYmVscyA9IHt9KTtcbiAgICByZXR1cm4gX3VuY2FjaGUodGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvMi50b3RhbER1cmF0aW9uID0gZnVuY3Rpb24gdG90YWxEdXJhdGlvbih2YWx1ZSkge1xuICAgIHZhciBtYXggPSAwLFxuICAgICAgICBzZWxmID0gdGhpcyxcbiAgICAgICAgY2hpbGQgPSBzZWxmLl9sYXN0LFxuICAgICAgICBwcmV2U3RhcnQgPSBfYmlnTnVtLFxuICAgICAgICBwcmV2LFxuICAgICAgICBzdGFydCxcbiAgICAgICAgcGFyZW50O1xuXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBzZWxmLnRpbWVTY2FsZSgoc2VsZi5fcmVwZWF0IDwgMCA/IHNlbGYuZHVyYXRpb24oKSA6IHNlbGYudG90YWxEdXJhdGlvbigpKSAvIChzZWxmLnJldmVyc2VkKCkgPyAtdmFsdWUgOiB2YWx1ZSkpO1xuICAgIH1cblxuICAgIGlmIChzZWxmLl9kaXJ0eSkge1xuICAgICAgcGFyZW50ID0gc2VsZi5wYXJlbnQ7XG5cbiAgICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgICBwcmV2ID0gY2hpbGQuX3ByZXY7IC8vcmVjb3JkIGl0IGhlcmUgaW4gY2FzZSB0aGUgdHdlZW4gY2hhbmdlcyBwb3NpdGlvbiBpbiB0aGUgc2VxdWVuY2UuLi5cblxuICAgICAgICBjaGlsZC5fZGlydHkgJiYgY2hpbGQudG90YWxEdXJhdGlvbigpOyAvL2NvdWxkIGNoYW5nZSB0aGUgdHdlZW4uX3N0YXJ0VGltZSwgc28gbWFrZSBzdXJlIHRoZSBhbmltYXRpb24ncyBjYWNoZSBpcyBjbGVhbiBiZWZvcmUgYW5hbHl6aW5nIGl0LlxuXG4gICAgICAgIHN0YXJ0ID0gY2hpbGQuX3N0YXJ0O1xuXG4gICAgICAgIGlmIChzdGFydCA+IHByZXZTdGFydCAmJiBzZWxmLl9zb3J0ICYmIGNoaWxkLl90cyAmJiAhc2VsZi5fbG9jaykge1xuICAgICAgICAgIC8vaW4gY2FzZSBvbmUgb2YgdGhlIHR3ZWVucyBzaGlmdGVkIG91dCBvZiBvcmRlciwgaXQgbmVlZHMgdG8gYmUgcmUtaW5zZXJ0ZWQgaW50byB0aGUgY29ycmVjdCBwb3NpdGlvbiBpbiB0aGUgc2VxdWVuY2VcbiAgICAgICAgICBzZWxmLl9sb2NrID0gMTsgLy9wcmV2ZW50IGVuZGxlc3MgcmVjdXJzaXZlIGNhbGxzIC0gdGhlcmUgYXJlIG1ldGhvZHMgdGhhdCBnZXQgdHJpZ2dlcmVkIHRoYXQgY2hlY2sgZHVyYXRpb24vdG90YWxEdXJhdGlvbiB3aGVuIHdlIGFkZCgpLlxuXG4gICAgICAgICAgX2FkZFRvVGltZWxpbmUoc2VsZiwgY2hpbGQsIHN0YXJ0IC0gY2hpbGQuX2RlbGF5LCAxKS5fbG9jayA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJldlN0YXJ0ID0gc3RhcnQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RhcnQgPCAwICYmIGNoaWxkLl90cykge1xuICAgICAgICAgIC8vY2hpbGRyZW4gYXJlbid0IGFsbG93ZWQgdG8gaGF2ZSBuZWdhdGl2ZSBzdGFydFRpbWVzIHVubGVzcyBzbW9vdGhDaGlsZFRpbWluZyBpcyB0cnVlLCBzbyBhZGp1c3QgaGVyZSBpZiBvbmUgaXMgZm91bmQuXG4gICAgICAgICAgbWF4IC09IHN0YXJ0O1xuXG4gICAgICAgICAgaWYgKCFwYXJlbnQgJiYgIXNlbGYuX2RwIHx8IHBhcmVudCAmJiBwYXJlbnQuc21vb3RoQ2hpbGRUaW1pbmcpIHtcbiAgICAgICAgICAgIHNlbGYuX3N0YXJ0ICs9IHN0YXJ0IC8gc2VsZi5fdHM7XG4gICAgICAgICAgICBzZWxmLl90aW1lIC09IHN0YXJ0O1xuICAgICAgICAgICAgc2VsZi5fdFRpbWUgLT0gc3RhcnQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc2VsZi5zaGlmdENoaWxkcmVuKC1zdGFydCwgZmFsc2UsIC0xZTk5OSk7XG4gICAgICAgICAgcHJldlN0YXJ0ID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNoaWxkLl9lbmQgPiBtYXggJiYgY2hpbGQuX3RzICYmIChtYXggPSBjaGlsZC5fZW5kKTtcbiAgICAgICAgY2hpbGQgPSBwcmV2O1xuICAgICAgfVxuXG4gICAgICBfc2V0RHVyYXRpb24oc2VsZiwgc2VsZiA9PT0gX2dsb2JhbFRpbWVsaW5lICYmIHNlbGYuX3RpbWUgPiBtYXggPyBzZWxmLl90aW1lIDogbWF4LCAxLCAxKTtcblxuICAgICAgc2VsZi5fZGlydHkgPSAwO1xuICAgIH1cblxuICAgIHJldHVybiBzZWxmLl90RHVyO1xuICB9O1xuXG4gIFRpbWVsaW5lLnVwZGF0ZVJvb3QgPSBmdW5jdGlvbiB1cGRhdGVSb290KHRpbWUpIHtcbiAgICBpZiAoX2dsb2JhbFRpbWVsaW5lLl90cykge1xuICAgICAgX2xhenlTYWZlUmVuZGVyKF9nbG9iYWxUaW1lbGluZSwgX3BhcmVudFRvQ2hpbGRUb3RhbFRpbWUodGltZSwgX2dsb2JhbFRpbWVsaW5lKSk7XG5cbiAgICAgIF9sYXN0UmVuZGVyZWRGcmFtZSA9IF90aWNrZXIuZnJhbWU7XG4gICAgfVxuXG4gICAgaWYgKF90aWNrZXIuZnJhbWUgPj0gX25leHRHQ0ZyYW1lKSB7XG4gICAgICBfbmV4dEdDRnJhbWUgKz0gX2NvbmZpZy5hdXRvU2xlZXAgfHwgMTIwO1xuICAgICAgdmFyIGNoaWxkID0gX2dsb2JhbFRpbWVsaW5lLl9maXJzdDtcbiAgICAgIGlmICghY2hpbGQgfHwgIWNoaWxkLl90cykgaWYgKF9jb25maWcuYXV0b1NsZWVwICYmIF90aWNrZXIuX2xpc3RlbmVycy5sZW5ndGggPCAyKSB7XG4gICAgICAgIHdoaWxlIChjaGlsZCAmJiAhY2hpbGQuX3RzKSB7XG4gICAgICAgICAgY2hpbGQgPSBjaGlsZC5fbmV4dDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNoaWxkIHx8IF90aWNrZXIuc2xlZXAoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFRpbWVsaW5lO1xufShBbmltYXRpb24pO1xuXG5fc2V0RGVmYXVsdHMoVGltZWxpbmUucHJvdG90eXBlLCB7XG4gIF9sb2NrOiAwLFxuICBfaGFzUGF1c2U6IDAsXG4gIF9mb3JjaW5nOiAwXG59KTtcblxudmFyIF9hZGRDb21wbGV4U3RyaW5nUHJvcFR3ZWVuID0gZnVuY3Rpb24gX2FkZENvbXBsZXhTdHJpbmdQcm9wVHdlZW4odGFyZ2V0LCBwcm9wLCBzdGFydCwgZW5kLCBzZXR0ZXIsIHN0cmluZ0ZpbHRlciwgZnVuY1BhcmFtKSB7XG4gIC8vbm90ZTogd2UgY2FsbCBfYWRkQ29tcGxleFN0cmluZ1Byb3BUd2Vlbi5jYWxsKHR3ZWVuSW5zdGFuY2UuLi4pIHRvIGVuc3VyZSB0aGF0IGl0J3Mgc2NvcGVkIHByb3Blcmx5LiBXZSBtYXkgY2FsbCBpdCBmcm9tIHdpdGhpbiBhIHBsdWdpbiB0b28sIHRodXMgXCJ0aGlzXCIgd291bGQgcmVmZXIgdG8gdGhlIHBsdWdpbi5cbiAgdmFyIHB0ID0gbmV3IFByb3BUd2Vlbih0aGlzLl9wdCwgdGFyZ2V0LCBwcm9wLCAwLCAxLCBfcmVuZGVyQ29tcGxleFN0cmluZywgbnVsbCwgc2V0dGVyKSxcbiAgICAgIGluZGV4ID0gMCxcbiAgICAgIG1hdGNoSW5kZXggPSAwLFxuICAgICAgcmVzdWx0LFxuICAgICAgc3RhcnROdW1zLFxuICAgICAgY29sb3IsXG4gICAgICBlbmROdW0sXG4gICAgICBjaHVuayxcbiAgICAgIHN0YXJ0TnVtLFxuICAgICAgaGFzUmFuZG9tLFxuICAgICAgYTtcbiAgcHQuYiA9IHN0YXJ0O1xuICBwdC5lID0gZW5kO1xuICBzdGFydCArPSBcIlwiOyAvL2Vuc3VyZSB2YWx1ZXMgYXJlIHN0cmluZ3NcblxuICBlbmQgKz0gXCJcIjtcblxuICBpZiAoaGFzUmFuZG9tID0gfmVuZC5pbmRleE9mKFwicmFuZG9tKFwiKSkge1xuICAgIGVuZCA9IF9yZXBsYWNlUmFuZG9tKGVuZCk7XG4gIH1cblxuICBpZiAoc3RyaW5nRmlsdGVyKSB7XG4gICAgYSA9IFtzdGFydCwgZW5kXTtcbiAgICBzdHJpbmdGaWx0ZXIoYSwgdGFyZ2V0LCBwcm9wKTsgLy9wYXNzIGFuIGFycmF5IHdpdGggdGhlIHN0YXJ0aW5nIGFuZCBlbmRpbmcgdmFsdWVzIGFuZCBsZXQgdGhlIGZpbHRlciBkbyB3aGF0ZXZlciBpdCBuZWVkcyB0byB0aGUgdmFsdWVzLlxuXG4gICAgc3RhcnQgPSBhWzBdO1xuICAgIGVuZCA9IGFbMV07XG4gIH1cblxuICBzdGFydE51bXMgPSBzdGFydC5tYXRjaChfY29tcGxleFN0cmluZ051bUV4cCkgfHwgW107XG5cbiAgd2hpbGUgKHJlc3VsdCA9IF9jb21wbGV4U3RyaW5nTnVtRXhwLmV4ZWMoZW5kKSkge1xuICAgIGVuZE51bSA9IHJlc3VsdFswXTtcbiAgICBjaHVuayA9IGVuZC5zdWJzdHJpbmcoaW5kZXgsIHJlc3VsdC5pbmRleCk7XG5cbiAgICBpZiAoY29sb3IpIHtcbiAgICAgIGNvbG9yID0gKGNvbG9yICsgMSkgJSA1O1xuICAgIH0gZWxzZSBpZiAoY2h1bmsuc3Vic3RyKC01KSA9PT0gXCJyZ2JhKFwiKSB7XG4gICAgICBjb2xvciA9IDE7XG4gICAgfVxuXG4gICAgaWYgKGVuZE51bSAhPT0gc3RhcnROdW1zW21hdGNoSW5kZXgrK10pIHtcbiAgICAgIHN0YXJ0TnVtID0gcGFyc2VGbG9hdChzdGFydE51bXNbbWF0Y2hJbmRleCAtIDFdKSB8fCAwOyAvL3RoZXNlIG5lc3RlZCBQcm9wVHdlZW5zIGFyZSBoYW5kbGVkIGluIGEgc3BlY2lhbCB3YXkgLSB3ZSdsbCBuZXZlciBhY3R1YWxseSBjYWxsIGEgcmVuZGVyIG9yIHNldHRlciBtZXRob2Qgb24gdGhlbS4gV2UnbGwganVzdCBsb29wIHRocm91Z2ggdGhlbSBpbiB0aGUgcGFyZW50IGNvbXBsZXggc3RyaW5nIFByb3BUd2VlbidzIHJlbmRlciBtZXRob2QuXG5cbiAgICAgIHB0Ll9wdCA9IHtcbiAgICAgICAgX25leHQ6IHB0Ll9wdCxcbiAgICAgICAgcDogY2h1bmsgfHwgbWF0Y2hJbmRleCA9PT0gMSA/IGNodW5rIDogXCIsXCIsXG4gICAgICAgIC8vbm90ZTogU1ZHIHNwZWMgYWxsb3dzIG9taXNzaW9uIG9mIGNvbW1hL3NwYWNlIHdoZW4gYSBuZWdhdGl2ZSBzaWduIGlzIHdlZGdlZCBiZXR3ZWVuIHR3byBudW1iZXJzLCBsaWtlIDIuNS01LjMgaW5zdGVhZCBvZiAyLjUsLTUuMyBidXQgd2hlbiB0d2VlbmluZywgdGhlIG5lZ2F0aXZlIHZhbHVlIG1heSBzd2l0Y2ggdG8gcG9zaXRpdmUsIHNvIHdlIGluc2VydCB0aGUgY29tbWEganVzdCBpbiBjYXNlLlxuICAgICAgICBzOiBzdGFydE51bSxcbiAgICAgICAgYzogZW5kTnVtLmNoYXJBdCgxKSA9PT0gXCI9XCIgPyBfcGFyc2VSZWxhdGl2ZShzdGFydE51bSwgZW5kTnVtKSAtIHN0YXJ0TnVtIDogcGFyc2VGbG9hdChlbmROdW0pIC0gc3RhcnROdW0sXG4gICAgICAgIG06IGNvbG9yICYmIGNvbG9yIDwgNCA/IE1hdGgucm91bmQgOiAwXG4gICAgICB9O1xuICAgICAgaW5kZXggPSBfY29tcGxleFN0cmluZ051bUV4cC5sYXN0SW5kZXg7XG4gICAgfVxuICB9XG5cbiAgcHQuYyA9IGluZGV4IDwgZW5kLmxlbmd0aCA/IGVuZC5zdWJzdHJpbmcoaW5kZXgsIGVuZC5sZW5ndGgpIDogXCJcIjsgLy93ZSB1c2UgdGhlIFwiY1wiIG9mIHRoZSBQcm9wVHdlZW4gdG8gc3RvcmUgdGhlIGZpbmFsIHBhcnQgb2YgdGhlIHN0cmluZyAoYWZ0ZXIgdGhlIGxhc3QgbnVtYmVyKVxuXG4gIHB0LmZwID0gZnVuY1BhcmFtO1xuXG4gIGlmIChfcmVsRXhwLnRlc3QoZW5kKSB8fCBoYXNSYW5kb20pIHtcbiAgICBwdC5lID0gMDsgLy9pZiB0aGUgZW5kIHN0cmluZyBjb250YWlucyByZWxhdGl2ZSB2YWx1ZXMgb3IgZHluYW1pYyByYW5kb20oLi4uKSB2YWx1ZXMsIGRlbGV0ZSB0aGUgZW5kIGl0IHNvIHRoYXQgb24gdGhlIGZpbmFsIHJlbmRlciB3ZSBkb24ndCBhY3R1YWxseSBzZXQgaXQgdG8gdGhlIHN0cmluZyB3aXRoICs9IG9yIC09IGNoYXJhY3RlcnMgKGZvcmNlcyBpdCB0byB1c2UgdGhlIGNhbGN1bGF0ZWQgdmFsdWUpLlxuICB9XG5cbiAgdGhpcy5fcHQgPSBwdDsgLy9zdGFydCB0aGUgbGlua2VkIGxpc3Qgd2l0aCB0aGlzIG5ldyBQcm9wVHdlZW4uIFJlbWVtYmVyLCB3ZSBjYWxsIF9hZGRDb21wbGV4U3RyaW5nUHJvcFR3ZWVuLmNhbGwodHdlZW5JbnN0YW5jZS4uLikgdG8gZW5zdXJlIHRoYXQgaXQncyBzY29wZWQgcHJvcGVybHkuIFdlIG1heSBjYWxsIGl0IGZyb20gd2l0aGluIGEgcGx1Z2luIHRvbywgdGh1cyBcInRoaXNcIiB3b3VsZCByZWZlciB0byB0aGUgcGx1Z2luLlxuXG4gIHJldHVybiBwdDtcbn0sXG4gICAgX2FkZFByb3BUd2VlbiA9IGZ1bmN0aW9uIF9hZGRQcm9wVHdlZW4odGFyZ2V0LCBwcm9wLCBzdGFydCwgZW5kLCBpbmRleCwgdGFyZ2V0cywgbW9kaWZpZXIsIHN0cmluZ0ZpbHRlciwgZnVuY1BhcmFtLCBvcHRpb25hbCkge1xuICBfaXNGdW5jdGlvbihlbmQpICYmIChlbmQgPSBlbmQoaW5kZXggfHwgMCwgdGFyZ2V0LCB0YXJnZXRzKSk7XG4gIHZhciBjdXJyZW50VmFsdWUgPSB0YXJnZXRbcHJvcF0sXG4gICAgICBwYXJzZWRTdGFydCA9IHN0YXJ0ICE9PSBcImdldFwiID8gc3RhcnQgOiAhX2lzRnVuY3Rpb24oY3VycmVudFZhbHVlKSA/IGN1cnJlbnRWYWx1ZSA6IGZ1bmNQYXJhbSA/IHRhcmdldFtwcm9wLmluZGV4T2YoXCJzZXRcIikgfHwgIV9pc0Z1bmN0aW9uKHRhcmdldFtcImdldFwiICsgcHJvcC5zdWJzdHIoMyldKSA/IHByb3AgOiBcImdldFwiICsgcHJvcC5zdWJzdHIoMyldKGZ1bmNQYXJhbSkgOiB0YXJnZXRbcHJvcF0oKSxcbiAgICAgIHNldHRlciA9ICFfaXNGdW5jdGlvbihjdXJyZW50VmFsdWUpID8gX3NldHRlclBsYWluIDogZnVuY1BhcmFtID8gX3NldHRlckZ1bmNXaXRoUGFyYW0gOiBfc2V0dGVyRnVuYyxcbiAgICAgIHB0O1xuXG4gIGlmIChfaXNTdHJpbmcoZW5kKSkge1xuICAgIGlmICh+ZW5kLmluZGV4T2YoXCJyYW5kb20oXCIpKSB7XG4gICAgICBlbmQgPSBfcmVwbGFjZVJhbmRvbShlbmQpO1xuICAgIH1cblxuICAgIGlmIChlbmQuY2hhckF0KDEpID09PSBcIj1cIikge1xuICAgICAgcHQgPSBfcGFyc2VSZWxhdGl2ZShwYXJzZWRTdGFydCwgZW5kKSArIChnZXRVbml0KHBhcnNlZFN0YXJ0KSB8fCAwKTtcblxuICAgICAgaWYgKHB0IHx8IHB0ID09PSAwKSB7XG4gICAgICAgIC8vIHRvIGF2b2lkIGlzTmFOLCBsaWtlIGlmIHNvbWVvbmUgcGFzc2VzIGluIGEgdmFsdWUgbGlrZSBcIiE9IHdoYXRldmVyXCJcbiAgICAgICAgZW5kID0gcHQ7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKCFvcHRpb25hbCB8fCBwYXJzZWRTdGFydCAhPT0gZW5kIHx8IF9mb3JjZUFsbFByb3BUd2VlbnMpIHtcbiAgICBpZiAoIWlzTmFOKHBhcnNlZFN0YXJ0ICogZW5kKSAmJiBlbmQgIT09IFwiXCIpIHtcbiAgICAgIC8vIGZ1biBmYWN0OiBhbnkgbnVtYmVyIG11bHRpcGxpZWQgYnkgXCJcIiBpcyBldmFsdWF0ZWQgYXMgdGhlIG51bWJlciAwIVxuICAgICAgcHQgPSBuZXcgUHJvcFR3ZWVuKHRoaXMuX3B0LCB0YXJnZXQsIHByb3AsICtwYXJzZWRTdGFydCB8fCAwLCBlbmQgLSAocGFyc2VkU3RhcnQgfHwgMCksIHR5cGVvZiBjdXJyZW50VmFsdWUgPT09IFwiYm9vbGVhblwiID8gX3JlbmRlckJvb2xlYW4gOiBfcmVuZGVyUGxhaW4sIDAsIHNldHRlcik7XG4gICAgICBmdW5jUGFyYW0gJiYgKHB0LmZwID0gZnVuY1BhcmFtKTtcbiAgICAgIG1vZGlmaWVyICYmIHB0Lm1vZGlmaWVyKG1vZGlmaWVyLCB0aGlzLCB0YXJnZXQpO1xuICAgICAgcmV0dXJuIHRoaXMuX3B0ID0gcHQ7XG4gICAgfVxuXG4gICAgIWN1cnJlbnRWYWx1ZSAmJiAhKHByb3AgaW4gdGFyZ2V0KSAmJiBfbWlzc2luZ1BsdWdpbihwcm9wLCBlbmQpO1xuICAgIHJldHVybiBfYWRkQ29tcGxleFN0cmluZ1Byb3BUd2Vlbi5jYWxsKHRoaXMsIHRhcmdldCwgcHJvcCwgcGFyc2VkU3RhcnQsIGVuZCwgc2V0dGVyLCBzdHJpbmdGaWx0ZXIgfHwgX2NvbmZpZy5zdHJpbmdGaWx0ZXIsIGZ1bmNQYXJhbSk7XG4gIH1cbn0sXG4gICAgLy9jcmVhdGVzIGEgY29weSBvZiB0aGUgdmFycyBvYmplY3QgYW5kIHByb2Nlc3NlcyBhbnkgZnVuY3Rpb24tYmFzZWQgdmFsdWVzIChwdXR0aW5nIHRoZSByZXN1bHRpbmcgdmFsdWVzIGRpcmVjdGx5IGludG8gdGhlIGNvcHkpIGFzIHdlbGwgYXMgc3RyaW5ncyB3aXRoIFwicmFuZG9tKClcIiBpbiB0aGVtLiBJdCBkb2VzIE5PVCBwcm9jZXNzIHJlbGF0aXZlIHZhbHVlcy5cbl9wcm9jZXNzVmFycyA9IGZ1bmN0aW9uIF9wcm9jZXNzVmFycyh2YXJzLCBpbmRleCwgdGFyZ2V0LCB0YXJnZXRzLCB0d2Vlbikge1xuICBfaXNGdW5jdGlvbih2YXJzKSAmJiAodmFycyA9IF9wYXJzZUZ1bmNPclN0cmluZyh2YXJzLCB0d2VlbiwgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cykpO1xuXG4gIGlmICghX2lzT2JqZWN0KHZhcnMpIHx8IHZhcnMuc3R5bGUgJiYgdmFycy5ub2RlVHlwZSB8fCBfaXNBcnJheSh2YXJzKSB8fCBfaXNUeXBlZEFycmF5KHZhcnMpKSB7XG4gICAgcmV0dXJuIF9pc1N0cmluZyh2YXJzKSA/IF9wYXJzZUZ1bmNPclN0cmluZyh2YXJzLCB0d2VlbiwgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cykgOiB2YXJzO1xuICB9XG5cbiAgdmFyIGNvcHkgPSB7fSxcbiAgICAgIHA7XG5cbiAgZm9yIChwIGluIHZhcnMpIHtcbiAgICBjb3B5W3BdID0gX3BhcnNlRnVuY09yU3RyaW5nKHZhcnNbcF0sIHR3ZWVuLCBpbmRleCwgdGFyZ2V0LCB0YXJnZXRzKTtcbiAgfVxuXG4gIHJldHVybiBjb3B5O1xufSxcbiAgICBfY2hlY2tQbHVnaW4gPSBmdW5jdGlvbiBfY2hlY2tQbHVnaW4ocHJvcGVydHksIHZhcnMsIHR3ZWVuLCBpbmRleCwgdGFyZ2V0LCB0YXJnZXRzKSB7XG4gIHZhciBwbHVnaW4sIHB0LCBwdExvb2t1cCwgaTtcblxuICBpZiAoX3BsdWdpbnNbcHJvcGVydHldICYmIChwbHVnaW4gPSBuZXcgX3BsdWdpbnNbcHJvcGVydHldKCkpLmluaXQodGFyZ2V0LCBwbHVnaW4ucmF3VmFycyA/IHZhcnNbcHJvcGVydHldIDogX3Byb2Nlc3NWYXJzKHZhcnNbcHJvcGVydHldLCBpbmRleCwgdGFyZ2V0LCB0YXJnZXRzLCB0d2VlbiksIHR3ZWVuLCBpbmRleCwgdGFyZ2V0cykgIT09IGZhbHNlKSB7XG4gICAgdHdlZW4uX3B0ID0gcHQgPSBuZXcgUHJvcFR3ZWVuKHR3ZWVuLl9wdCwgdGFyZ2V0LCBwcm9wZXJ0eSwgMCwgMSwgcGx1Z2luLnJlbmRlciwgcGx1Z2luLCAwLCBwbHVnaW4ucHJpb3JpdHkpO1xuXG4gICAgaWYgKHR3ZWVuICE9PSBfcXVpY2tUd2Vlbikge1xuICAgICAgcHRMb29rdXAgPSB0d2Vlbi5fcHRMb29rdXBbdHdlZW4uX3RhcmdldHMuaW5kZXhPZih0YXJnZXQpXTsgLy9ub3RlOiB3ZSBjYW4ndCB1c2UgdHdlZW4uX3B0TG9va3VwW2luZGV4XSBiZWNhdXNlIGZvciBzdGFnZ2VyZWQgdHdlZW5zLCB0aGUgaW5kZXggZnJvbSB0aGUgZnVsbFRhcmdldHMgYXJyYXkgd29uJ3QgbWF0Y2ggd2hhdCBpdCBpcyBpbiBlYWNoIGluZGl2aWR1YWwgdHdlZW4gdGhhdCBzcGF3bnMgZnJvbSB0aGUgc3RhZ2dlci5cblxuICAgICAgaSA9IHBsdWdpbi5fcHJvcHMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIHB0TG9va3VwW3BsdWdpbi5fcHJvcHNbaV1dID0gcHQ7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHBsdWdpbjtcbn0sXG4gICAgX292ZXJ3cml0aW5nVHdlZW4sXG4gICAgLy9zdG9yZSBhIHJlZmVyZW5jZSB0ZW1wb3JhcmlseSBzbyB3ZSBjYW4gYXZvaWQgb3ZlcndyaXRpbmcgaXRzZWxmLlxuX2ZvcmNlQWxsUHJvcFR3ZWVucyxcbiAgICBfaW5pdFR3ZWVuID0gZnVuY3Rpb24gX2luaXRUd2Vlbih0d2VlbiwgdGltZSwgdFRpbWUpIHtcbiAgdmFyIHZhcnMgPSB0d2Vlbi52YXJzLFxuICAgICAgZWFzZSA9IHZhcnMuZWFzZSxcbiAgICAgIHN0YXJ0QXQgPSB2YXJzLnN0YXJ0QXQsXG4gICAgICBpbW1lZGlhdGVSZW5kZXIgPSB2YXJzLmltbWVkaWF0ZVJlbmRlcixcbiAgICAgIGxhenkgPSB2YXJzLmxhenksXG4gICAgICBvblVwZGF0ZSA9IHZhcnMub25VcGRhdGUsXG4gICAgICBydW5CYWNrd2FyZHMgPSB2YXJzLnJ1bkJhY2t3YXJkcyxcbiAgICAgIHlveW9FYXNlID0gdmFycy55b3lvRWFzZSxcbiAgICAgIGtleWZyYW1lcyA9IHZhcnMua2V5ZnJhbWVzLFxuICAgICAgYXV0b1JldmVydCA9IHZhcnMuYXV0b1JldmVydCxcbiAgICAgIGR1ciA9IHR3ZWVuLl9kdXIsXG4gICAgICBwcmV2U3RhcnRBdCA9IHR3ZWVuLl9zdGFydEF0LFxuICAgICAgdGFyZ2V0cyA9IHR3ZWVuLl90YXJnZXRzLFxuICAgICAgcGFyZW50ID0gdHdlZW4ucGFyZW50LFxuICAgICAgZnVsbFRhcmdldHMgPSBwYXJlbnQgJiYgcGFyZW50LmRhdGEgPT09IFwibmVzdGVkXCIgPyBwYXJlbnQudmFycy50YXJnZXRzIDogdGFyZ2V0cyxcbiAgICAgIGF1dG9PdmVyd3JpdGUgPSB0d2Vlbi5fb3ZlcndyaXRlID09PSBcImF1dG9cIiAmJiAhX3N1cHByZXNzT3ZlcndyaXRlcyxcbiAgICAgIHRsID0gdHdlZW4udGltZWxpbmUsXG4gICAgICBjbGVhblZhcnMsXG4gICAgICBpLFxuICAgICAgcCxcbiAgICAgIHB0LFxuICAgICAgdGFyZ2V0LFxuICAgICAgaGFzUHJpb3JpdHksXG4gICAgICBnc0RhdGEsXG4gICAgICBoYXJuZXNzLFxuICAgICAgcGx1Z2luLFxuICAgICAgcHRMb29rdXAsXG4gICAgICBpbmRleCxcbiAgICAgIGhhcm5lc3NWYXJzLFxuICAgICAgb3ZlcndyaXR0ZW47XG4gIHRsICYmICgha2V5ZnJhbWVzIHx8ICFlYXNlKSAmJiAoZWFzZSA9IFwibm9uZVwiKTtcbiAgdHdlZW4uX2Vhc2UgPSBfcGFyc2VFYXNlKGVhc2UsIF9kZWZhdWx0cy5lYXNlKTtcbiAgdHdlZW4uX3lFYXNlID0geW95b0Vhc2UgPyBfaW52ZXJ0RWFzZShfcGFyc2VFYXNlKHlveW9FYXNlID09PSB0cnVlID8gZWFzZSA6IHlveW9FYXNlLCBfZGVmYXVsdHMuZWFzZSkpIDogMDtcblxuICBpZiAoeW95b0Vhc2UgJiYgdHdlZW4uX3lveW8gJiYgIXR3ZWVuLl9yZXBlYXQpIHtcbiAgICAvL3RoZXJlIG11c3QgaGF2ZSBiZWVuIGEgcGFyZW50IHRpbWVsaW5lIHdpdGggeW95bzp0cnVlIHRoYXQgaXMgY3VycmVudGx5IGluIGl0cyB5b3lvIHBoYXNlLCBzbyBmbGlwIHRoZSBlYXNlcy5cbiAgICB5b3lvRWFzZSA9IHR3ZWVuLl95RWFzZTtcbiAgICB0d2Vlbi5feUVhc2UgPSB0d2Vlbi5fZWFzZTtcbiAgICB0d2Vlbi5fZWFzZSA9IHlveW9FYXNlO1xuICB9XG5cbiAgdHdlZW4uX2Zyb20gPSAhdGwgJiYgISF2YXJzLnJ1bkJhY2t3YXJkczsgLy9uZXN0ZWQgdGltZWxpbmVzIHNob3VsZCBuZXZlciBydW4gYmFja3dhcmRzIC0gdGhlIGJhY2t3YXJkcy1uZXNzIGlzIGluIHRoZSBjaGlsZCB0d2VlbnMuXG5cbiAgaWYgKCF0bCB8fCBrZXlmcmFtZXMgJiYgIXZhcnMuc3RhZ2dlcikge1xuICAgIC8vaWYgdGhlcmUncyBhbiBpbnRlcm5hbCB0aW1lbGluZSwgc2tpcCBhbGwgdGhlIHBhcnNpbmcgYmVjYXVzZSB3ZSBwYXNzZWQgdGhhdCB0YXNrIGRvd24gdGhlIGNoYWluLlxuICAgIGhhcm5lc3MgPSB0YXJnZXRzWzBdID8gX2dldENhY2hlKHRhcmdldHNbMF0pLmhhcm5lc3MgOiAwO1xuICAgIGhhcm5lc3NWYXJzID0gaGFybmVzcyAmJiB2YXJzW2hhcm5lc3MucHJvcF07IC8vc29tZW9uZSBtYXkgbmVlZCB0byBzcGVjaWZ5IENTUy1zcGVjaWZpYyB2YWx1ZXMgQU5EIG5vbi1DU1MgdmFsdWVzLCBsaWtlIGlmIHRoZSBlbGVtZW50IGhhcyBhbiBcInhcIiBwcm9wZXJ0eSBwbHVzIGl0J3MgYSBzdGFuZGFyZCBET00gZWxlbWVudC4gV2UgYWxsb3cgcGVvcGxlIHRvIGRpc3Rpbmd1aXNoIGJ5IHdyYXBwaW5nIHBsdWdpbi1zcGVjaWZpYyBzdHVmZiBpbiBhIGNzczp7fSBvYmplY3QgZm9yIGV4YW1wbGUuXG5cbiAgICBjbGVhblZhcnMgPSBfY29weUV4Y2x1ZGluZyh2YXJzLCBfcmVzZXJ2ZWRQcm9wcyk7XG5cbiAgICBpZiAocHJldlN0YXJ0QXQpIHtcbiAgICAgIHByZXZTdGFydEF0Ll96VGltZSA8IDAgJiYgcHJldlN0YXJ0QXQucHJvZ3Jlc3MoMSk7IC8vIGluIGNhc2UgaXQncyBhIGxhenkgc3RhcnRBdCB0aGF0IGhhc24ndCByZW5kZXJlZCB5ZXQuXG5cbiAgICAgIHRpbWUgPCAwICYmIHJ1bkJhY2t3YXJkcyAmJiBpbW1lZGlhdGVSZW5kZXIgJiYgIWF1dG9SZXZlcnQgPyBwcmV2U3RhcnRBdC5yZW5kZXIoLTEsIHRydWUpIDogcHJldlN0YXJ0QXQucmV2ZXJ0KHJ1bkJhY2t3YXJkcyAmJiBkdXIgPyBfcmV2ZXJ0Q29uZmlnTm9LaWxsIDogX3N0YXJ0QXRSZXZlcnRDb25maWcpOyAvLyBpZiBpdCdzIGEgXCJzdGFydEF0XCIgKG5vdCBcImZyb20oKVwiIG9yIHJ1bkJhY2t3YXJkczogdHJ1ZSksIHdlIG9ubHkgbmVlZCB0byBkbyBhIHNoYWxsb3cgcmV2ZXJ0IChrZWVwIHRyYW5zZm9ybXMgY2FjaGVkIGluIENTU1BsdWdpbilcbiAgICAgIC8vIGRvbid0IGp1c3QgX3JlbW92ZUZyb21QYXJlbnQocHJldlN0YXJ0QXQucmVuZGVyKC0xLCB0cnVlKSkgYmVjYXVzZSB0aGF0J2xsIGxlYXZlIGlubGluZSBzdHlsZXMuIFdlJ3JlIGNyZWF0aW5nIGEgbmV3IF9zdGFydEF0IGZvciBcInN0YXJ0QXRcIiB0d2VlbnMgdGhhdCByZS1jYXB0dXJlIHRoaW5ncyB0byBlbnN1cmUgdGhhdCBpZiB0aGUgcHJlLXR3ZWVuIHZhbHVlcyBjaGFuZ2VkIHNpbmNlIHRoZSB0d2VlbiB3YXMgY3JlYXRlZCwgdGhleSdyZSByZWNvcmRlZC5cblxuICAgICAgcHJldlN0YXJ0QXQuX2xhenkgPSAwO1xuICAgIH1cblxuICAgIGlmIChzdGFydEF0KSB7XG4gICAgICBfcmVtb3ZlRnJvbVBhcmVudCh0d2Vlbi5fc3RhcnRBdCA9IFR3ZWVuLnNldCh0YXJnZXRzLCBfc2V0RGVmYXVsdHMoe1xuICAgICAgICBkYXRhOiBcImlzU3RhcnRcIixcbiAgICAgICAgb3ZlcndyaXRlOiBmYWxzZSxcbiAgICAgICAgcGFyZW50OiBwYXJlbnQsXG4gICAgICAgIGltbWVkaWF0ZVJlbmRlcjogdHJ1ZSxcbiAgICAgICAgbGF6eTogIXByZXZTdGFydEF0ICYmIF9pc05vdEZhbHNlKGxhenkpLFxuICAgICAgICBzdGFydEF0OiBudWxsLFxuICAgICAgICBkZWxheTogMCxcbiAgICAgICAgb25VcGRhdGU6IG9uVXBkYXRlICYmIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gX2NhbGxiYWNrKHR3ZWVuLCBcIm9uVXBkYXRlXCIpO1xuICAgICAgICB9LFxuICAgICAgICBzdGFnZ2VyOiAwXG4gICAgICB9LCBzdGFydEF0KSkpOyAvL2NvcHkgdGhlIHByb3BlcnRpZXMvdmFsdWVzIGludG8gYSBuZXcgb2JqZWN0IHRvIGF2b2lkIGNvbGxpc2lvbnMsIGxpa2UgdmFyIHRvID0ge3g6MH0sIGZyb20gPSB7eDo1MDB9OyB0aW1lbGluZS5mcm9tVG8oZSwgZnJvbSwgdG8pLmZyb21UbyhlLCB0bywgZnJvbSk7XG5cblxuICAgICAgdHdlZW4uX3N0YXJ0QXQuX2RwID0gMDsgLy8gZG9uJ3QgYWxsb3cgaXQgdG8gZ2V0IHB1dCBiYWNrIGludG8gcm9vdCB0aW1lbGluZSEgTGlrZSB3aGVuIHJldmVydCgpIGlzIGNhbGxlZCBhbmQgdG90YWxUaW1lKCkgZ2V0cyBzZXQuXG5cbiAgICAgIHR3ZWVuLl9zdGFydEF0Ll9zYXQgPSB0d2VlbjsgLy8gdXNlZCBpbiBnbG9iYWxUaW1lKCkuIF9zYXQgc3RhbmRzIGZvciBfc3RhcnRBdFR3ZWVuXG5cbiAgICAgIHRpbWUgPCAwICYmIChfcmV2ZXJ0aW5nIHx8ICFpbW1lZGlhdGVSZW5kZXIgJiYgIWF1dG9SZXZlcnQpICYmIHR3ZWVuLl9zdGFydEF0LnJldmVydChfcmV2ZXJ0Q29uZmlnTm9LaWxsKTsgLy8gcmFyZSBlZGdlIGNhc2UsIGxpa2UgaWYgYSByZW5kZXIgaXMgZm9yY2VkIGluIHRoZSBuZWdhdGl2ZSBkaXJlY3Rpb24gb2YgYSBub24taW5pdHRlZCB0d2Vlbi5cblxuICAgICAgaWYgKGltbWVkaWF0ZVJlbmRlcikge1xuICAgICAgICBpZiAoZHVyICYmIHRpbWUgPD0gMCAmJiB0VGltZSA8PSAwKSB7XG4gICAgICAgICAgLy8gY2hlY2sgdFRpbWUgaGVyZSBiZWNhdXNlIGluIHRoZSBjYXNlIG9mIGEgeW95byB0d2VlbiB3aG9zZSBwbGF5aGVhZCBnZXRzIHB1c2hlZCB0byB0aGUgZW5kIGxpa2UgdHdlZW4ucHJvZ3Jlc3MoMSksIHdlIHNob3VsZCBhbGxvdyBpdCB0aHJvdWdoIHNvIHRoYXQgdGhlIG9uQ29tcGxldGUgZ2V0cyBmaXJlZCBwcm9wZXJseS5cbiAgICAgICAgICB0aW1lICYmICh0d2Vlbi5felRpbWUgPSB0aW1lKTtcbiAgICAgICAgICByZXR1cm47IC8vd2Ugc2tpcCBpbml0aWFsaXphdGlvbiBoZXJlIHNvIHRoYXQgb3ZlcndyaXRpbmcgZG9lc24ndCBvY2N1ciB1bnRpbCB0aGUgdHdlZW4gYWN0dWFsbHkgYmVnaW5zLiBPdGhlcndpc2UsIGlmIHlvdSBjcmVhdGUgc2V2ZXJhbCBpbW1lZGlhdGVSZW5kZXI6dHJ1ZSB0d2VlbnMgb2YgdGhlIHNhbWUgdGFyZ2V0L3Byb3BlcnRpZXMgdG8gZHJvcCBpbnRvIGEgVGltZWxpbmUsIHRoZSBsYXN0IG9uZSBjcmVhdGVkIHdvdWxkIG92ZXJ3cml0ZSB0aGUgZmlyc3Qgb25lcyBiZWNhdXNlIHRoZXkgZGlkbid0IGdldCBwbGFjZWQgaW50byB0aGUgdGltZWxpbmUgeWV0IGJlZm9yZSB0aGUgZmlyc3QgcmVuZGVyIG9jY3VycyBhbmQga2lja3MgaW4gb3ZlcndyaXRpbmcuXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHJ1bkJhY2t3YXJkcyAmJiBkdXIpIHtcbiAgICAgIC8vZnJvbSgpIHR3ZWVucyBtdXN0IGJlIGhhbmRsZWQgdW5pcXVlbHk6IHRoZWlyIGJlZ2lubmluZyB2YWx1ZXMgbXVzdCBiZSByZW5kZXJlZCBidXQgd2UgZG9uJ3Qgd2FudCBvdmVyd3JpdGluZyB0byBvY2N1ciB5ZXQgKHdoZW4gdGltZSBpcyBzdGlsbCAwKS4gV2FpdCB1bnRpbCB0aGUgdHdlZW4gYWN0dWFsbHkgYmVnaW5zIGJlZm9yZSBkb2luZyBhbGwgdGhlIHJvdXRpbmVzIGxpa2Ugb3ZlcndyaXRpbmcuIEF0IHRoYXQgdGltZSwgd2Ugc2hvdWxkIHJlbmRlciBhdCB0aGUgRU5EIG9mIHRoZSB0d2VlbiB0byBlbnN1cmUgdGhhdCB0aGluZ3MgaW5pdGlhbGl6ZSBjb3JyZWN0bHkgKHJlbWVtYmVyLCBmcm9tKCkgdHdlZW5zIGdvIGJhY2t3YXJkcylcbiAgICAgIGlmICghcHJldlN0YXJ0QXQpIHtcbiAgICAgICAgdGltZSAmJiAoaW1tZWRpYXRlUmVuZGVyID0gZmFsc2UpOyAvL2luIHJhcmUgY2FzZXMgKGxpa2UgaWYgYSBmcm9tKCkgdHdlZW4gcnVucyBhbmQgdGhlbiBpcyBpbnZhbGlkYXRlKCktZWQpLCBpbW1lZGlhdGVSZW5kZXIgY291bGQgYmUgdHJ1ZSBidXQgdGhlIGluaXRpYWwgZm9yY2VkLXJlbmRlciBnZXRzIHNraXBwZWQsIHNvIHRoZXJlJ3Mgbm8gbmVlZCB0byBmb3JjZSB0aGUgcmVuZGVyIGluIHRoaXMgY29udGV4dCB3aGVuIHRoZSBfdGltZSBpcyBncmVhdGVyIHRoYW4gMFxuXG4gICAgICAgIHAgPSBfc2V0RGVmYXVsdHMoe1xuICAgICAgICAgIG92ZXJ3cml0ZTogZmFsc2UsXG4gICAgICAgICAgZGF0YTogXCJpc0Zyb21TdGFydFwiLFxuICAgICAgICAgIC8vd2UgdGFnIHRoZSB0d2VlbiB3aXRoIGFzIFwiaXNGcm9tU3RhcnRcIiBzbyB0aGF0IGlmIFtpbnNpZGUgYSBwbHVnaW5dIHdlIG5lZWQgdG8gb25seSBkbyBzb21ldGhpbmcgYXQgdGhlIHZlcnkgRU5EIG9mIGEgdHdlZW4sIHdlIGhhdmUgYSB3YXkgb2YgaWRlbnRpZnlpbmcgdGhpcyB0d2VlbiBhcyBtZXJlbHkgdGhlIG9uZSB0aGF0J3Mgc2V0dGluZyB0aGUgYmVnaW5uaW5nIHZhbHVlcyBmb3IgYSBcImZyb20oKVwiIHR3ZWVuLiBGb3IgZXhhbXBsZSwgY2xlYXJQcm9wcyBpbiBDU1NQbHVnaW4gc2hvdWxkIG9ubHkgZ2V0IGFwcGxpZWQgYXQgdGhlIHZlcnkgRU5EIG9mIGEgdHdlZW4gYW5kIHdpdGhvdXQgdGhpcyB0YWcsIGZyb20oLi4ue2hlaWdodDoxMDAsIGNsZWFyUHJvcHM6XCJoZWlnaHRcIiwgZGVsYXk6MX0pIHdvdWxkIHdpcGUgdGhlIGhlaWdodCBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSB0d2VlbiBhbmQgYWZ0ZXIgMSBzZWNvbmQsIGl0J2Qga2ljayBiYWNrIGluLlxuICAgICAgICAgIGxhenk6IGltbWVkaWF0ZVJlbmRlciAmJiAhcHJldlN0YXJ0QXQgJiYgX2lzTm90RmFsc2UobGF6eSksXG4gICAgICAgICAgaW1tZWRpYXRlUmVuZGVyOiBpbW1lZGlhdGVSZW5kZXIsXG4gICAgICAgICAgLy96ZXJvLWR1cmF0aW9uIHR3ZWVucyByZW5kZXIgaW1tZWRpYXRlbHkgYnkgZGVmYXVsdCwgYnV0IGlmIHdlJ3JlIG5vdCBzcGVjaWZpY2FsbHkgaW5zdHJ1Y3RlZCB0byByZW5kZXIgdGhpcyB0d2VlbiBpbW1lZGlhdGVseSwgd2Ugc2hvdWxkIHNraXAgdGhpcyBhbmQgbWVyZWx5IF9pbml0KCkgdG8gcmVjb3JkIHRoZSBzdGFydGluZyB2YWx1ZXMgKHJlbmRlcmluZyB0aGVtIGltbWVkaWF0ZWx5IHdvdWxkIHB1c2ggdGhlbSB0byBjb21wbGV0aW9uIHdoaWNoIGlzIHdhc3RlZnVsIGluIHRoYXQgY2FzZSAtIHdlJ2QgaGF2ZSB0byByZW5kZXIoLTEpIGltbWVkaWF0ZWx5IGFmdGVyKVxuICAgICAgICAgIHN0YWdnZXI6IDAsXG4gICAgICAgICAgcGFyZW50OiBwYXJlbnQgLy9lbnN1cmVzIHRoYXQgbmVzdGVkIHR3ZWVucyB0aGF0IGhhZCBhIHN0YWdnZXIgYXJlIGhhbmRsZWQgcHJvcGVybHksIGxpa2UgZ3NhcC5mcm9tKFwiLmNsYXNzXCIsIHt5OiBnc2FwLnV0aWxzLndyYXAoWy0xMDAsMTAwXSksIHN0YWdnZXI6IDAuNX0pXG5cbiAgICAgICAgfSwgY2xlYW5WYXJzKTtcbiAgICAgICAgaGFybmVzc1ZhcnMgJiYgKHBbaGFybmVzcy5wcm9wXSA9IGhhcm5lc3NWYXJzKTsgLy8gaW4gY2FzZSBzb21lb25lIGRvZXMgc29tZXRoaW5nIGxpa2UgLmZyb20oLi4uLCB7Y3NzOnt9fSlcblxuICAgICAgICBfcmVtb3ZlRnJvbVBhcmVudCh0d2Vlbi5fc3RhcnRBdCA9IFR3ZWVuLnNldCh0YXJnZXRzLCBwKSk7XG5cbiAgICAgICAgdHdlZW4uX3N0YXJ0QXQuX2RwID0gMDsgLy8gZG9uJ3QgYWxsb3cgaXQgdG8gZ2V0IHB1dCBiYWNrIGludG8gcm9vdCB0aW1lbGluZSFcblxuICAgICAgICB0d2Vlbi5fc3RhcnRBdC5fc2F0ID0gdHdlZW47IC8vIHVzZWQgaW4gZ2xvYmFsVGltZSgpXG5cbiAgICAgICAgdGltZSA8IDAgJiYgKF9yZXZlcnRpbmcgPyB0d2Vlbi5fc3RhcnRBdC5yZXZlcnQoX3JldmVydENvbmZpZ05vS2lsbCkgOiB0d2Vlbi5fc3RhcnRBdC5yZW5kZXIoLTEsIHRydWUpKTtcbiAgICAgICAgdHdlZW4uX3pUaW1lID0gdGltZTtcblxuICAgICAgICBpZiAoIWltbWVkaWF0ZVJlbmRlcikge1xuICAgICAgICAgIF9pbml0VHdlZW4odHdlZW4uX3N0YXJ0QXQsIF90aW55TnVtLCBfdGlueU51bSk7IC8vZW5zdXJlcyB0aGF0IHRoZSBpbml0aWFsIHZhbHVlcyBhcmUgcmVjb3JkZWRcblxuICAgICAgICB9IGVsc2UgaWYgKCF0aW1lKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdHdlZW4uX3B0ID0gdHdlZW4uX3B0Q2FjaGUgPSAwO1xuICAgIGxhenkgPSBkdXIgJiYgX2lzTm90RmFsc2UobGF6eSkgfHwgbGF6eSAmJiAhZHVyO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IHRhcmdldHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRhcmdldCA9IHRhcmdldHNbaV07XG4gICAgICBnc0RhdGEgPSB0YXJnZXQuX2dzYXAgfHwgX2hhcm5lc3ModGFyZ2V0cylbaV0uX2dzYXA7XG4gICAgICB0d2Vlbi5fcHRMb29rdXBbaV0gPSBwdExvb2t1cCA9IHt9O1xuICAgICAgX2xhenlMb29rdXBbZ3NEYXRhLmlkXSAmJiBfbGF6eVR3ZWVucy5sZW5ndGggJiYgX2xhenlSZW5kZXIoKTsgLy9pZiBvdGhlciB0d2VlbnMgb2YgdGhlIHNhbWUgdGFyZ2V0IGhhdmUgcmVjZW50bHkgaW5pdHRlZCBidXQgaGF2ZW4ndCByZW5kZXJlZCB5ZXQsIHdlJ3ZlIGdvdCB0byBmb3JjZSB0aGUgcmVuZGVyIHNvIHRoYXQgdGhlIHN0YXJ0aW5nIHZhbHVlcyBhcmUgY29ycmVjdCAoaW1hZ2luZSBwb3B1bGF0aW5nIGEgdGltZWxpbmUgd2l0aCBhIGJ1bmNoIG9mIHNlcXVlbnRpYWwgdHdlZW5zIGFuZCB0aGVuIGp1bXBpbmcgdG8gdGhlIGVuZClcblxuICAgICAgaW5kZXggPSBmdWxsVGFyZ2V0cyA9PT0gdGFyZ2V0cyA/IGkgOiBmdWxsVGFyZ2V0cy5pbmRleE9mKHRhcmdldCk7XG5cbiAgICAgIGlmIChoYXJuZXNzICYmIChwbHVnaW4gPSBuZXcgaGFybmVzcygpKS5pbml0KHRhcmdldCwgaGFybmVzc1ZhcnMgfHwgY2xlYW5WYXJzLCB0d2VlbiwgaW5kZXgsIGZ1bGxUYXJnZXRzKSAhPT0gZmFsc2UpIHtcbiAgICAgICAgdHdlZW4uX3B0ID0gcHQgPSBuZXcgUHJvcFR3ZWVuKHR3ZWVuLl9wdCwgdGFyZ2V0LCBwbHVnaW4ubmFtZSwgMCwgMSwgcGx1Z2luLnJlbmRlciwgcGx1Z2luLCAwLCBwbHVnaW4ucHJpb3JpdHkpO1xuXG4gICAgICAgIHBsdWdpbi5fcHJvcHMuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgIHB0TG9va3VwW25hbWVdID0gcHQ7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHBsdWdpbi5wcmlvcml0eSAmJiAoaGFzUHJpb3JpdHkgPSAxKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFoYXJuZXNzIHx8IGhhcm5lc3NWYXJzKSB7XG4gICAgICAgIGZvciAocCBpbiBjbGVhblZhcnMpIHtcbiAgICAgICAgICBpZiAoX3BsdWdpbnNbcF0gJiYgKHBsdWdpbiA9IF9jaGVja1BsdWdpbihwLCBjbGVhblZhcnMsIHR3ZWVuLCBpbmRleCwgdGFyZ2V0LCBmdWxsVGFyZ2V0cykpKSB7XG4gICAgICAgICAgICBwbHVnaW4ucHJpb3JpdHkgJiYgKGhhc1ByaW9yaXR5ID0gMSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHB0TG9va3VwW3BdID0gcHQgPSBfYWRkUHJvcFR3ZWVuLmNhbGwodHdlZW4sIHRhcmdldCwgcCwgXCJnZXRcIiwgY2xlYW5WYXJzW3BdLCBpbmRleCwgZnVsbFRhcmdldHMsIDAsIHZhcnMuc3RyaW5nRmlsdGVyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdHdlZW4uX29wICYmIHR3ZWVuLl9vcFtpXSAmJiB0d2Vlbi5raWxsKHRhcmdldCwgdHdlZW4uX29wW2ldKTtcblxuICAgICAgaWYgKGF1dG9PdmVyd3JpdGUgJiYgdHdlZW4uX3B0KSB7XG4gICAgICAgIF9vdmVyd3JpdGluZ1R3ZWVuID0gdHdlZW47XG5cbiAgICAgICAgX2dsb2JhbFRpbWVsaW5lLmtpbGxUd2VlbnNPZih0YXJnZXQsIHB0TG9va3VwLCB0d2Vlbi5nbG9iYWxUaW1lKHRpbWUpKTsgLy8gbWFrZSBzdXJlIHRoZSBvdmVyd3JpdGluZyBkb2Vzbid0IG92ZXJ3cml0ZSBUSElTIHR3ZWVuISEhXG5cblxuICAgICAgICBvdmVyd3JpdHRlbiA9ICF0d2Vlbi5wYXJlbnQ7XG4gICAgICAgIF9vdmVyd3JpdGluZ1R3ZWVuID0gMDtcbiAgICAgIH1cblxuICAgICAgdHdlZW4uX3B0ICYmIGxhenkgJiYgKF9sYXp5TG9va3VwW2dzRGF0YS5pZF0gPSAxKTtcbiAgICB9XG5cbiAgICBoYXNQcmlvcml0eSAmJiBfc29ydFByb3BUd2VlbnNCeVByaW9yaXR5KHR3ZWVuKTtcbiAgICB0d2Vlbi5fb25Jbml0ICYmIHR3ZWVuLl9vbkluaXQodHdlZW4pOyAvL3BsdWdpbnMgbGlrZSBSb3VuZFByb3BzIG11c3Qgd2FpdCB1bnRpbCBBTEwgb2YgdGhlIFByb3BUd2VlbnMgYXJlIGluc3RhbnRpYXRlZC4gSW4gdGhlIHBsdWdpbidzIGluaXQoKSBmdW5jdGlvbiwgaXQgc2V0cyB0aGUgX29uSW5pdCBvbiB0aGUgdHdlZW4gaW5zdGFuY2UuIE1heSBub3QgYmUgcHJldHR5L2ludHVpdGl2ZSwgYnV0IGl0J3MgZmFzdCBhbmQga2VlcHMgZmlsZSBzaXplIGRvd24uXG4gIH1cblxuICB0d2Vlbi5fb25VcGRhdGUgPSBvblVwZGF0ZTtcbiAgdHdlZW4uX2luaXR0ZWQgPSAoIXR3ZWVuLl9vcCB8fCB0d2Vlbi5fcHQpICYmICFvdmVyd3JpdHRlbjsgLy8gaWYgb3ZlcndyaXR0ZW5Qcm9wcyByZXN1bHRlZCBpbiB0aGUgZW50aXJlIHR3ZWVuIGJlaW5nIGtpbGxlZCwgZG8gTk9UIGZsYWcgaXQgYXMgaW5pdHRlZCBvciBlbHNlIGl0IG1heSByZW5kZXIgZm9yIG9uZSB0aWNrLlxuXG4gIGtleWZyYW1lcyAmJiB0aW1lIDw9IDAgJiYgdGwucmVuZGVyKF9iaWdOdW0sIHRydWUsIHRydWUpOyAvLyBpZiB0aGVyZSdzIGEgMCUga2V5ZnJhbWUsIGl0J2xsIHJlbmRlciBpbiB0aGUgXCJiZWZvcmVcIiBzdGF0ZSBmb3IgYW55IHN0YWdnZXJlZC9kZWxheWVkIGFuaW1hdGlvbnMgdGh1cyB3aGVuIHRoZSBmb2xsb3dpbmcgdHdlZW4gaW5pdGlhbGl6ZXMsIGl0J2xsIHVzZSB0aGUgXCJiZWZvcmVcIiBzdGF0ZSBpbnN0ZWFkIG9mIHRoZSBcImFmdGVyXCIgc3RhdGUgYXMgdGhlIGluaXRpYWwgdmFsdWVzLlxufSxcbiAgICBfdXBkYXRlUHJvcFR3ZWVucyA9IGZ1bmN0aW9uIF91cGRhdGVQcm9wVHdlZW5zKHR3ZWVuLCBwcm9wZXJ0eSwgdmFsdWUsIHN0YXJ0LCBzdGFydElzUmVsYXRpdmUsIHJhdGlvLCB0aW1lLCBza2lwUmVjdXJzaW9uKSB7XG4gIHZhciBwdENhY2hlID0gKHR3ZWVuLl9wdCAmJiB0d2Vlbi5fcHRDYWNoZSB8fCAodHdlZW4uX3B0Q2FjaGUgPSB7fSkpW3Byb3BlcnR5XSxcbiAgICAgIHB0LFxuICAgICAgcm9vdFBULFxuICAgICAgbG9va3VwLFxuICAgICAgaTtcblxuICBpZiAoIXB0Q2FjaGUpIHtcbiAgICBwdENhY2hlID0gdHdlZW4uX3B0Q2FjaGVbcHJvcGVydHldID0gW107XG4gICAgbG9va3VwID0gdHdlZW4uX3B0TG9va3VwO1xuICAgIGkgPSB0d2Vlbi5fdGFyZ2V0cy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBwdCA9IGxvb2t1cFtpXVtwcm9wZXJ0eV07XG5cbiAgICAgIGlmIChwdCAmJiBwdC5kICYmIHB0LmQuX3B0KSB7XG4gICAgICAgIC8vIGl0J3MgYSBwbHVnaW4sIHNvIGZpbmQgdGhlIG5lc3RlZCBQcm9wVHdlZW5cbiAgICAgICAgcHQgPSBwdC5kLl9wdDtcblxuICAgICAgICB3aGlsZSAocHQgJiYgcHQucCAhPT0gcHJvcGVydHkgJiYgcHQuZnAgIT09IHByb3BlcnR5KSB7XG4gICAgICAgICAgLy8gXCJmcFwiIGlzIGZ1bmN0aW9uUGFyYW0gZm9yIHRoaW5ncyBsaWtlIHNldHRpbmcgQ1NTIHZhcmlhYmxlcyB3aGljaCByZXF1aXJlIC5zZXRQcm9wZXJ0eShcIi0tdmFyLW5hbWVcIiwgdmFsdWUpXG4gICAgICAgICAgcHQgPSBwdC5fbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIXB0KSB7XG4gICAgICAgIC8vIHRoZXJlIGlzIG5vIFByb3BUd2VlbiBhc3NvY2lhdGVkIHdpdGggdGhhdCBwcm9wZXJ0eSwgc28gd2UgbXVzdCBGT1JDRSBvbmUgdG8gYmUgY3JlYXRlZCBhbmQgZGl0Y2ggb3V0IG9mIHRoaXNcbiAgICAgICAgLy8gaWYgdGhlIHR3ZWVuIGhhcyBvdGhlciBwcm9wZXJ0aWVzIHRoYXQgYWxyZWFkeSByZW5kZXJlZCBhdCBuZXcgcG9zaXRpb25zLCB3ZSdkIG5vcm1hbGx5IGhhdmUgdG8gcmV3aW5kIHRvIHB1dCB0aGVtIGJhY2sgbGlrZSB0d2Vlbi5yZW5kZXIoMCwgdHJ1ZSkgYmVmb3JlIGZvcmNpbmcgYW4gX2luaXRUd2VlbigpLCBidXQgdGhhdCBjYW4gY3JlYXRlIGFub3RoZXIgZWRnZSBjYXNlIGxpa2UgdHdlZW5pbmcgYSB0aW1lbGluZSdzIHByb2dyZXNzIHdvdWxkIHRyaWdnZXIgb25VcGRhdGVzIHRvIGZpcmUgd2hpY2ggY291bGQgbW92ZSBvdGhlciB0aGluZ3MgYXJvdW5kLiBJdCdzIGJldHRlciB0byBqdXN0IGluZm9ybSB1c2VycyB0aGF0IC5yZXNldFRvKCkgc2hvdWxkIE9OTFkgYmUgdXNlZCBmb3IgdHdlZW5zIHRoYXQgYWxyZWFkeSBoYXZlIHRoYXQgcHJvcGVydHkuIEZvciBleGFtcGxlLCB5b3UgY2FuJ3QgZ3NhcC50byguLi57IHk6IDAgfSkgYW5kIHRoZW4gdHdlZW4ucmVzdFRvKFwieFwiLCAyMDApIGZvciBleGFtcGxlLlxuICAgICAgICBfZm9yY2VBbGxQcm9wVHdlZW5zID0gMTsgLy8gb3RoZXJ3aXNlLCB3aGVuIHdlIF9hZGRQcm9wVHdlZW4oKSBhbmQgaXQgZmluZHMgbm8gY2hhbmdlIGJldHdlZW4gdGhlIHN0YXJ0IGFuZCBlbmQgdmFsdWVzLCBpdCBza2lwcyBjcmVhdGluZyBhIFByb3BUd2VlbiAoZm9yIGVmZmljaWVuY3kuLi53aHkgdHdlZW4gd2hlbiB0aGVyZSdzIG5vIGRpZmZlcmVuY2U/KSBidXQgaW4gdGhpcyBjYXNlIHdlIE5FRUQgdGhhdCBQcm9wVHdlZW4gY3JlYXRlZCBzbyB3ZSBjYW4gZWRpdCBpdC5cblxuICAgICAgICB0d2Vlbi52YXJzW3Byb3BlcnR5XSA9IFwiKz0wXCI7XG5cbiAgICAgICAgX2luaXRUd2Vlbih0d2VlbiwgdGltZSk7XG5cbiAgICAgICAgX2ZvcmNlQWxsUHJvcFR3ZWVucyA9IDA7XG4gICAgICAgIHJldHVybiBza2lwUmVjdXJzaW9uID8gX3dhcm4ocHJvcGVydHkgKyBcIiBub3QgZWxpZ2libGUgZm9yIHJlc2V0XCIpIDogMTsgLy8gaWYgc29tZW9uZSB0cmllcyB0byBkbyBhIHF1aWNrVG8oKSBvbiBhIHNwZWNpYWwgcHJvcGVydHkgbGlrZSBib3JkZXJSYWRpdXMgd2hpY2ggbXVzdCBnZXQgc3BsaXQgaW50byA0IGRpZmZlcmVudCBwcm9wZXJ0aWVzLCB0aGF0J3Mgbm90IGVsaWdpYmxlIGZvciAucmVzZXRUbygpLlxuICAgICAgfVxuXG4gICAgICBwdENhY2hlLnB1c2gocHQpO1xuICAgIH1cbiAgfVxuXG4gIGkgPSBwdENhY2hlLmxlbmd0aDtcblxuICB3aGlsZSAoaS0tKSB7XG4gICAgcm9vdFBUID0gcHRDYWNoZVtpXTtcbiAgICBwdCA9IHJvb3RQVC5fcHQgfHwgcm9vdFBUOyAvLyBjb21wbGV4IHZhbHVlcyBtYXkgaGF2ZSBuZXN0ZWQgUHJvcFR3ZWVucy4gV2Ugb25seSBhY2NvbW1vZGF0ZSB0aGUgRklSU1QgdmFsdWUuXG5cbiAgICBwdC5zID0gKHN0YXJ0IHx8IHN0YXJ0ID09PSAwKSAmJiAhc3RhcnRJc1JlbGF0aXZlID8gc3RhcnQgOiBwdC5zICsgKHN0YXJ0IHx8IDApICsgcmF0aW8gKiBwdC5jO1xuICAgIHB0LmMgPSB2YWx1ZSAtIHB0LnM7XG4gICAgcm9vdFBULmUgJiYgKHJvb3RQVC5lID0gX3JvdW5kKHZhbHVlKSArIGdldFVuaXQocm9vdFBULmUpKTsgLy8gbWFpbmx5IGZvciBDU1NQbHVnaW4gKGVuZCB2YWx1ZSlcblxuICAgIHJvb3RQVC5iICYmIChyb290UFQuYiA9IHB0LnMgKyBnZXRVbml0KHJvb3RQVC5iKSk7IC8vIChiZWdpbm5pbmcgdmFsdWUpXG4gIH1cbn0sXG4gICAgX2FkZEFsaWFzZXNUb1ZhcnMgPSBmdW5jdGlvbiBfYWRkQWxpYXNlc1RvVmFycyh0YXJnZXRzLCB2YXJzKSB7XG4gIHZhciBoYXJuZXNzID0gdGFyZ2V0c1swXSA/IF9nZXRDYWNoZSh0YXJnZXRzWzBdKS5oYXJuZXNzIDogMCxcbiAgICAgIHByb3BlcnR5QWxpYXNlcyA9IGhhcm5lc3MgJiYgaGFybmVzcy5hbGlhc2VzLFxuICAgICAgY29weSxcbiAgICAgIHAsXG4gICAgICBpLFxuICAgICAgYWxpYXNlcztcblxuICBpZiAoIXByb3BlcnR5QWxpYXNlcykge1xuICAgIHJldHVybiB2YXJzO1xuICB9XG5cbiAgY29weSA9IF9tZXJnZSh7fSwgdmFycyk7XG5cbiAgZm9yIChwIGluIHByb3BlcnR5QWxpYXNlcykge1xuICAgIGlmIChwIGluIGNvcHkpIHtcbiAgICAgIGFsaWFzZXMgPSBwcm9wZXJ0eUFsaWFzZXNbcF0uc3BsaXQoXCIsXCIpO1xuICAgICAgaSA9IGFsaWFzZXMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIGNvcHlbYWxpYXNlc1tpXV0gPSBjb3B5W3BdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjb3B5O1xufSxcbiAgICAvLyBwYXJzZXMgbXVsdGlwbGUgZm9ybWF0cywgbGlrZSB7XCIwJVwiOiB7eDogMTAwfSwge1wiNTAlXCI6IHt4OiAtMjB9fSBhbmQgeyB4OiB7XCIwJVwiOiAxMDAsIFwiNTAlXCI6IC0yMH0gfSwgYW5kIGFuIFwiZWFzZVwiIGNhbiBiZSBzZXQgb24gYW55IG9iamVjdC4gV2UgcG9wdWxhdGUgYW4gXCJhbGxQcm9wc1wiIG9iamVjdCB3aXRoIGFuIEFycmF5IGZvciBlYWNoIHByb3BlcnR5LCBsaWtlIHt4OiBbe30sIHt9XSwgeTpbe30sIHt9XX0gd2l0aCBkYXRhIGZvciBlYWNoIHByb3BlcnR5IHR3ZWVuLiBUaGUgb2JqZWN0cyBoYXZlIGEgXCJ0XCIgKHRpbWUpLCBcInZcIiwgKHZhbHVlKSwgYW5kIFwiZVwiIChlYXNlKSBwcm9wZXJ0eS4gVGhpcyBhbGxvd3MgdXMgdG8gcGllY2UgdG9nZXRoZXIgYSB0aW1lbGluZSBsYXRlci5cbl9wYXJzZUtleWZyYW1lID0gZnVuY3Rpb24gX3BhcnNlS2V5ZnJhbWUocHJvcCwgb2JqLCBhbGxQcm9wcywgZWFzZUVhY2gpIHtcbiAgdmFyIGVhc2UgPSBvYmouZWFzZSB8fCBlYXNlRWFjaCB8fCBcInBvd2VyMS5pbk91dFwiLFxuICAgICAgcCxcbiAgICAgIGE7XG5cbiAgaWYgKF9pc0FycmF5KG9iaikpIHtcbiAgICBhID0gYWxsUHJvcHNbcHJvcF0gfHwgKGFsbFByb3BzW3Byb3BdID0gW10pOyAvLyB0ID0gdGltZSAob3V0IG9mIDEwMCksIHYgPSB2YWx1ZSwgZSA9IGVhc2VcblxuICAgIG9iai5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwgaSkge1xuICAgICAgcmV0dXJuIGEucHVzaCh7XG4gICAgICAgIHQ6IGkgLyAob2JqLmxlbmd0aCAtIDEpICogMTAwLFxuICAgICAgICB2OiB2YWx1ZSxcbiAgICAgICAgZTogZWFzZVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgZm9yIChwIGluIG9iaikge1xuICAgICAgYSA9IGFsbFByb3BzW3BdIHx8IChhbGxQcm9wc1twXSA9IFtdKTtcbiAgICAgIHAgPT09IFwiZWFzZVwiIHx8IGEucHVzaCh7XG4gICAgICAgIHQ6IHBhcnNlRmxvYXQocHJvcCksXG4gICAgICAgIHY6IG9ialtwXSxcbiAgICAgICAgZTogZWFzZVxuICAgICAgfSk7XG4gICAgfVxuICB9XG59LFxuICAgIF9wYXJzZUZ1bmNPclN0cmluZyA9IGZ1bmN0aW9uIF9wYXJzZUZ1bmNPclN0cmluZyh2YWx1ZSwgdHdlZW4sIGksIHRhcmdldCwgdGFyZ2V0cykge1xuICByZXR1cm4gX2lzRnVuY3Rpb24odmFsdWUpID8gdmFsdWUuY2FsbCh0d2VlbiwgaSwgdGFyZ2V0LCB0YXJnZXRzKSA6IF9pc1N0cmluZyh2YWx1ZSkgJiYgfnZhbHVlLmluZGV4T2YoXCJyYW5kb20oXCIpID8gX3JlcGxhY2VSYW5kb20odmFsdWUpIDogdmFsdWU7XG59LFxuICAgIF9zdGFnZ2VyVHdlZW5Qcm9wcyA9IF9jYWxsYmFja05hbWVzICsgXCJyZXBlYXQscmVwZWF0RGVsYXkseW95byxyZXBlYXRSZWZyZXNoLHlveW9FYXNlLGF1dG9SZXZlcnRcIixcbiAgICBfc3RhZ2dlclByb3BzVG9Ta2lwID0ge307XG5cbl9mb3JFYWNoTmFtZShfc3RhZ2dlclR3ZWVuUHJvcHMgKyBcIixpZCxzdGFnZ2VyLGRlbGF5LGR1cmF0aW9uLHBhdXNlZCxzY3JvbGxUcmlnZ2VyXCIsIGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBfc3RhZ2dlclByb3BzVG9Ta2lwW25hbWVdID0gMTtcbn0pO1xuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBUV0VFTlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5cbmV4cG9ydCB2YXIgVHdlZW4gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9BbmltYXRpb24yKSB7XG4gIF9pbmhlcml0c0xvb3NlKFR3ZWVuLCBfQW5pbWF0aW9uMik7XG5cbiAgZnVuY3Rpb24gVHdlZW4odGFyZ2V0cywgdmFycywgcG9zaXRpb24sIHNraXBJbmhlcml0KSB7XG4gICAgdmFyIF90aGlzMztcblxuICAgIGlmICh0eXBlb2YgdmFycyA9PT0gXCJudW1iZXJcIikge1xuICAgICAgcG9zaXRpb24uZHVyYXRpb24gPSB2YXJzO1xuICAgICAgdmFycyA9IHBvc2l0aW9uO1xuICAgICAgcG9zaXRpb24gPSBudWxsO1xuICAgIH1cblxuICAgIF90aGlzMyA9IF9BbmltYXRpb24yLmNhbGwodGhpcywgc2tpcEluaGVyaXQgPyB2YXJzIDogX2luaGVyaXREZWZhdWx0cyh2YXJzKSkgfHwgdGhpcztcbiAgICB2YXIgX3RoaXMzJHZhcnMgPSBfdGhpczMudmFycyxcbiAgICAgICAgZHVyYXRpb24gPSBfdGhpczMkdmFycy5kdXJhdGlvbixcbiAgICAgICAgZGVsYXkgPSBfdGhpczMkdmFycy5kZWxheSxcbiAgICAgICAgaW1tZWRpYXRlUmVuZGVyID0gX3RoaXMzJHZhcnMuaW1tZWRpYXRlUmVuZGVyLFxuICAgICAgICBzdGFnZ2VyID0gX3RoaXMzJHZhcnMuc3RhZ2dlcixcbiAgICAgICAgb3ZlcndyaXRlID0gX3RoaXMzJHZhcnMub3ZlcndyaXRlLFxuICAgICAgICBrZXlmcmFtZXMgPSBfdGhpczMkdmFycy5rZXlmcmFtZXMsXG4gICAgICAgIGRlZmF1bHRzID0gX3RoaXMzJHZhcnMuZGVmYXVsdHMsXG4gICAgICAgIHNjcm9sbFRyaWdnZXIgPSBfdGhpczMkdmFycy5zY3JvbGxUcmlnZ2VyLFxuICAgICAgICB5b3lvRWFzZSA9IF90aGlzMyR2YXJzLnlveW9FYXNlLFxuICAgICAgICBwYXJlbnQgPSB2YXJzLnBhcmVudCB8fCBfZ2xvYmFsVGltZWxpbmUsXG4gICAgICAgIHBhcnNlZFRhcmdldHMgPSAoX2lzQXJyYXkodGFyZ2V0cykgfHwgX2lzVHlwZWRBcnJheSh0YXJnZXRzKSA/IF9pc051bWJlcih0YXJnZXRzWzBdKSA6IFwibGVuZ3RoXCIgaW4gdmFycykgPyBbdGFyZ2V0c10gOiB0b0FycmF5KHRhcmdldHMpLFxuICAgICAgICB0bCxcbiAgICAgICAgaSxcbiAgICAgICAgY29weSxcbiAgICAgICAgbCxcbiAgICAgICAgcCxcbiAgICAgICAgY3VyVGFyZ2V0LFxuICAgICAgICBzdGFnZ2VyRnVuYyxcbiAgICAgICAgc3RhZ2dlclZhcnNUb01lcmdlO1xuICAgIF90aGlzMy5fdGFyZ2V0cyA9IHBhcnNlZFRhcmdldHMubGVuZ3RoID8gX2hhcm5lc3MocGFyc2VkVGFyZ2V0cykgOiBfd2FybihcIkdTQVAgdGFyZ2V0IFwiICsgdGFyZ2V0cyArIFwiIG5vdCBmb3VuZC4gaHR0cHM6Ly9nc2FwLmNvbVwiLCAhX2NvbmZpZy5udWxsVGFyZ2V0V2FybikgfHwgW107XG4gICAgX3RoaXMzLl9wdExvb2t1cCA9IFtdOyAvL1Byb3BUd2VlbiBsb29rdXAuIEFuIGFycmF5IGNvbnRhaW5pbmcgYW4gb2JqZWN0IGZvciBlYWNoIHRhcmdldCwgaGF2aW5nIGtleXMgZm9yIGVhY2ggdHdlZW5pbmcgcHJvcGVydHlcblxuICAgIF90aGlzMy5fb3ZlcndyaXRlID0gb3ZlcndyaXRlO1xuXG4gICAgaWYgKGtleWZyYW1lcyB8fCBzdGFnZ2VyIHx8IF9pc0Z1bmNPclN0cmluZyhkdXJhdGlvbikgfHwgX2lzRnVuY09yU3RyaW5nKGRlbGF5KSkge1xuICAgICAgdmFycyA9IF90aGlzMy52YXJzO1xuICAgICAgdGwgPSBfdGhpczMudGltZWxpbmUgPSBuZXcgVGltZWxpbmUoe1xuICAgICAgICBkYXRhOiBcIm5lc3RlZFwiLFxuICAgICAgICBkZWZhdWx0czogZGVmYXVsdHMgfHwge30sXG4gICAgICAgIHRhcmdldHM6IHBhcmVudCAmJiBwYXJlbnQuZGF0YSA9PT0gXCJuZXN0ZWRcIiA/IHBhcmVudC52YXJzLnRhcmdldHMgOiBwYXJzZWRUYXJnZXRzXG4gICAgICB9KTsgLy8gd2UgbmVlZCB0byBzdG9yZSB0aGUgdGFyZ2V0cyBiZWNhdXNlIGZvciBzdGFnZ2VycyBhbmQga2V5ZnJhbWVzLCB3ZSBlbmQgdXAgY3JlYXRpbmcgYW4gaW5kaXZpZHVhbCB0d2VlbiBmb3IgZWFjaCBidXQgZnVuY3Rpb24tYmFzZWQgdmFsdWVzIG5lZWQgdG8ga25vdyB0aGUgaW5kZXggYW5kIHRoZSB3aG9sZSBBcnJheSBvZiB0YXJnZXRzLlxuXG4gICAgICB0bC5raWxsKCk7XG4gICAgICB0bC5wYXJlbnQgPSB0bC5fZHAgPSBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMyk7XG4gICAgICB0bC5fc3RhcnQgPSAwO1xuXG4gICAgICBpZiAoc3RhZ2dlciB8fCBfaXNGdW5jT3JTdHJpbmcoZHVyYXRpb24pIHx8IF9pc0Z1bmNPclN0cmluZyhkZWxheSkpIHtcbiAgICAgICAgbCA9IHBhcnNlZFRhcmdldHMubGVuZ3RoO1xuICAgICAgICBzdGFnZ2VyRnVuYyA9IHN0YWdnZXIgJiYgZGlzdHJpYnV0ZShzdGFnZ2VyKTtcblxuICAgICAgICBpZiAoX2lzT2JqZWN0KHN0YWdnZXIpKSB7XG4gICAgICAgICAgLy91c2VycyBjYW4gcGFzcyBpbiBjYWxsYmFja3MgbGlrZSBvblN0YXJ0L29uQ29tcGxldGUgaW4gdGhlIHN0YWdnZXIgb2JqZWN0LiBUaGVzZSBzaG91bGQgZmlyZSB3aXRoIGVhY2ggaW5kaXZpZHVhbCB0d2Vlbi5cbiAgICAgICAgICBmb3IgKHAgaW4gc3RhZ2dlcikge1xuICAgICAgICAgICAgaWYgKH5fc3RhZ2dlclR3ZWVuUHJvcHMuaW5kZXhPZihwKSkge1xuICAgICAgICAgICAgICBzdGFnZ2VyVmFyc1RvTWVyZ2UgfHwgKHN0YWdnZXJWYXJzVG9NZXJnZSA9IHt9KTtcbiAgICAgICAgICAgICAgc3RhZ2dlclZhcnNUb01lcmdlW3BdID0gc3RhZ2dlcltwXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgY29weSA9IF9jb3B5RXhjbHVkaW5nKHZhcnMsIF9zdGFnZ2VyUHJvcHNUb1NraXApO1xuICAgICAgICAgIGNvcHkuc3RhZ2dlciA9IDA7XG4gICAgICAgICAgeW95b0Vhc2UgJiYgKGNvcHkueW95b0Vhc2UgPSB5b3lvRWFzZSk7XG4gICAgICAgICAgc3RhZ2dlclZhcnNUb01lcmdlICYmIF9tZXJnZShjb3B5LCBzdGFnZ2VyVmFyc1RvTWVyZ2UpO1xuICAgICAgICAgIGN1clRhcmdldCA9IHBhcnNlZFRhcmdldHNbaV07IC8vZG9uJ3QganVzdCBjb3B5IGR1cmF0aW9uIG9yIGRlbGF5IGJlY2F1c2UgaWYgdGhleSdyZSBhIHN0cmluZyBvciBmdW5jdGlvbiwgd2UnZCBlbmQgdXAgaW4gYW4gaW5maW5pdGUgbG9vcCBiZWNhdXNlIF9pc0Z1bmNPclN0cmluZygpIHdvdWxkIGV2YWx1YXRlIGFzIHRydWUgaW4gdGhlIGNoaWxkIHR3ZWVucywgZW50ZXJpbmcgdGhpcyBsb29wLCBldGMuIFNvIHdlIHBhcnNlIHRoZSB2YWx1ZSBzdHJhaWdodCBmcm9tIHZhcnMgYW5kIGRlZmF1bHQgdG8gMC5cblxuICAgICAgICAgIGNvcHkuZHVyYXRpb24gPSArX3BhcnNlRnVuY09yU3RyaW5nKGR1cmF0aW9uLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMyksIGksIGN1clRhcmdldCwgcGFyc2VkVGFyZ2V0cyk7XG4gICAgICAgICAgY29weS5kZWxheSA9ICgrX3BhcnNlRnVuY09yU3RyaW5nKGRlbGF5LCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMyksIGksIGN1clRhcmdldCwgcGFyc2VkVGFyZ2V0cykgfHwgMCkgLSBfdGhpczMuX2RlbGF5O1xuXG4gICAgICAgICAgaWYgKCFzdGFnZ2VyICYmIGwgPT09IDEgJiYgY29weS5kZWxheSkge1xuICAgICAgICAgICAgLy8gaWYgc29tZW9uZSBkb2VzIGRlbGF5OlwicmFuZG9tKDEsIDUpXCIsIHJlcGVhdDotMSwgZm9yIGV4YW1wbGUsIHRoZSBkZWxheSBzaG91bGRuJ3QgYmUgaW5zaWRlIHRoZSByZXBlYXQuXG4gICAgICAgICAgICBfdGhpczMuX2RlbGF5ID0gZGVsYXkgPSBjb3B5LmRlbGF5O1xuICAgICAgICAgICAgX3RoaXMzLl9zdGFydCArPSBkZWxheTtcbiAgICAgICAgICAgIGNvcHkuZGVsYXkgPSAwO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRsLnRvKGN1clRhcmdldCwgY29weSwgc3RhZ2dlckZ1bmMgPyBzdGFnZ2VyRnVuYyhpLCBjdXJUYXJnZXQsIHBhcnNlZFRhcmdldHMpIDogMCk7XG4gICAgICAgICAgdGwuX2Vhc2UgPSBfZWFzZU1hcC5ub25lO1xuICAgICAgICB9XG5cbiAgICAgICAgdGwuZHVyYXRpb24oKSA/IGR1cmF0aW9uID0gZGVsYXkgPSAwIDogX3RoaXMzLnRpbWVsaW5lID0gMDsgLy8gaWYgdGhlIHRpbWVsaW5lJ3MgZHVyYXRpb24gaXMgMCwgd2UgZG9uJ3QgbmVlZCBhIHRpbWVsaW5lIGludGVybmFsbHkhXG4gICAgICB9IGVsc2UgaWYgKGtleWZyYW1lcykge1xuICAgICAgICBfaW5oZXJpdERlZmF1bHRzKF9zZXREZWZhdWx0cyh0bC52YXJzLmRlZmF1bHRzLCB7XG4gICAgICAgICAgZWFzZTogXCJub25lXCJcbiAgICAgICAgfSkpO1xuXG4gICAgICAgIHRsLl9lYXNlID0gX3BhcnNlRWFzZShrZXlmcmFtZXMuZWFzZSB8fCB2YXJzLmVhc2UgfHwgXCJub25lXCIpO1xuICAgICAgICB2YXIgdGltZSA9IDAsXG4gICAgICAgICAgICBhLFxuICAgICAgICAgICAga2YsXG4gICAgICAgICAgICB2O1xuXG4gICAgICAgIGlmIChfaXNBcnJheShrZXlmcmFtZXMpKSB7XG4gICAgICAgICAga2V5ZnJhbWVzLmZvckVhY2goZnVuY3Rpb24gKGZyYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gdGwudG8ocGFyc2VkVGFyZ2V0cywgZnJhbWUsIFwiPlwiKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB0bC5kdXJhdGlvbigpOyAvLyB0byBlbnN1cmUgdGwuX2R1ciBpcyBjYWNoZWQgYmVjYXVzZSB3ZSB0YXAgaW50byBpdCBmb3IgcGVyZm9ybWFuY2UgcHVycG9zZXMgaW4gdGhlIHJlbmRlcigpIG1ldGhvZC5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb3B5ID0ge307XG5cbiAgICAgICAgICBmb3IgKHAgaW4ga2V5ZnJhbWVzKSB7XG4gICAgICAgICAgICBwID09PSBcImVhc2VcIiB8fCBwID09PSBcImVhc2VFYWNoXCIgfHwgX3BhcnNlS2V5ZnJhbWUocCwga2V5ZnJhbWVzW3BdLCBjb3B5LCBrZXlmcmFtZXMuZWFzZUVhY2gpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZvciAocCBpbiBjb3B5KSB7XG4gICAgICAgICAgICBhID0gY29weVtwXS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICAgIHJldHVybiBhLnQgLSBiLnQ7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRpbWUgPSAwO1xuXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICBrZiA9IGFbaV07XG4gICAgICAgICAgICAgIHYgPSB7XG4gICAgICAgICAgICAgICAgZWFzZToga2YuZSxcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogKGtmLnQgLSAoaSA/IGFbaSAtIDFdLnQgOiAwKSkgLyAxMDAgKiBkdXJhdGlvblxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICB2W3BdID0ga2YudjtcbiAgICAgICAgICAgICAgdGwudG8ocGFyc2VkVGFyZ2V0cywgdiwgdGltZSk7XG4gICAgICAgICAgICAgIHRpbWUgKz0gdi5kdXJhdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0bC5kdXJhdGlvbigpIDwgZHVyYXRpb24gJiYgdGwudG8oe30sIHtcbiAgICAgICAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbiAtIHRsLmR1cmF0aW9uKClcbiAgICAgICAgICB9KTsgLy8gaW4gY2FzZSBrZXlmcmFtZXMgZGlkbid0IGdvIHRvIDEwMCVcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBkdXJhdGlvbiB8fCBfdGhpczMuZHVyYXRpb24oZHVyYXRpb24gPSB0bC5kdXJhdGlvbigpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgX3RoaXMzLnRpbWVsaW5lID0gMDsgLy9zcGVlZCBvcHRpbWl6YXRpb24sIGZhc3RlciBsb29rdXBzIChubyBnb2luZyB1cCB0aGUgcHJvdG90eXBlIGNoYWluKVxuICAgIH1cblxuICAgIGlmIChvdmVyd3JpdGUgPT09IHRydWUgJiYgIV9zdXBwcmVzc092ZXJ3cml0ZXMpIHtcbiAgICAgIF9vdmVyd3JpdGluZ1R3ZWVuID0gX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczMpO1xuXG4gICAgICBfZ2xvYmFsVGltZWxpbmUua2lsbFR3ZWVuc09mKHBhcnNlZFRhcmdldHMpO1xuXG4gICAgICBfb3ZlcndyaXRpbmdUd2VlbiA9IDA7XG4gICAgfVxuXG4gICAgX2FkZFRvVGltZWxpbmUocGFyZW50LCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMyksIHBvc2l0aW9uKTtcblxuICAgIHZhcnMucmV2ZXJzZWQgJiYgX3RoaXMzLnJldmVyc2UoKTtcbiAgICB2YXJzLnBhdXNlZCAmJiBfdGhpczMucGF1c2VkKHRydWUpO1xuXG4gICAgaWYgKGltbWVkaWF0ZVJlbmRlciB8fCAhZHVyYXRpb24gJiYgIWtleWZyYW1lcyAmJiBfdGhpczMuX3N0YXJ0ID09PSBfcm91bmRQcmVjaXNlKHBhcmVudC5fdGltZSkgJiYgX2lzTm90RmFsc2UoaW1tZWRpYXRlUmVuZGVyKSAmJiBfaGFzTm9QYXVzZWRBbmNlc3RvcnMoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczMpKSAmJiBwYXJlbnQuZGF0YSAhPT0gXCJuZXN0ZWRcIikge1xuICAgICAgX3RoaXMzLl90VGltZSA9IC1fdGlueU51bTsgLy9mb3JjZXMgYSByZW5kZXIgd2l0aG91dCBoYXZpbmcgdG8gc2V0IHRoZSByZW5kZXIoKSBcImZvcmNlXCIgcGFyYW1ldGVyIHRvIHRydWUgYmVjYXVzZSB3ZSB3YW50IHRvIGFsbG93IGxhenlpbmcgYnkgZGVmYXVsdCAodXNpbmcgdGhlIFwiZm9yY2VcIiBwYXJhbWV0ZXIgYWx3YXlzIGZvcmNlcyBhbiBpbW1lZGlhdGUgZnVsbCByZW5kZXIpXG5cbiAgICAgIF90aGlzMy5yZW5kZXIoTWF0aC5tYXgoMCwgLWRlbGF5KSB8fCAwKTsgLy9pbiBjYXNlIGRlbGF5IGlzIG5lZ2F0aXZlXG5cbiAgICB9XG5cbiAgICBzY3JvbGxUcmlnZ2VyICYmIF9zY3JvbGxUcmlnZ2VyKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMzKSwgc2Nyb2xsVHJpZ2dlcik7XG4gICAgcmV0dXJuIF90aGlzMztcbiAgfVxuXG4gIHZhciBfcHJvdG8zID0gVHdlZW4ucHJvdG90eXBlO1xuXG4gIF9wcm90bzMucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKSB7XG4gICAgdmFyIHByZXZUaW1lID0gdGhpcy5fdGltZSxcbiAgICAgICAgdER1ciA9IHRoaXMuX3REdXIsXG4gICAgICAgIGR1ciA9IHRoaXMuX2R1cixcbiAgICAgICAgaXNOZWdhdGl2ZSA9IHRvdGFsVGltZSA8IDAsXG4gICAgICAgIHRUaW1lID0gdG90YWxUaW1lID4gdER1ciAtIF90aW55TnVtICYmICFpc05lZ2F0aXZlID8gdER1ciA6IHRvdGFsVGltZSA8IF90aW55TnVtID8gMCA6IHRvdGFsVGltZSxcbiAgICAgICAgdGltZSxcbiAgICAgICAgcHQsXG4gICAgICAgIGl0ZXJhdGlvbixcbiAgICAgICAgY3ljbGVEdXJhdGlvbixcbiAgICAgICAgcHJldkl0ZXJhdGlvbixcbiAgICAgICAgaXNZb3lvLFxuICAgICAgICByYXRpbyxcbiAgICAgICAgdGltZWxpbmUsXG4gICAgICAgIHlveW9FYXNlO1xuXG4gICAgaWYgKCFkdXIpIHtcbiAgICAgIF9yZW5kZXJaZXJvRHVyYXRpb25Ud2Vlbih0aGlzLCB0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG4gICAgfSBlbHNlIGlmICh0VGltZSAhPT0gdGhpcy5fdFRpbWUgfHwgIXRvdGFsVGltZSB8fCBmb3JjZSB8fCAhdGhpcy5faW5pdHRlZCAmJiB0aGlzLl90VGltZSB8fCB0aGlzLl9zdGFydEF0ICYmIHRoaXMuX3pUaW1lIDwgMCAhPT0gaXNOZWdhdGl2ZSkge1xuICAgICAgLy90aGlzIHNlbnNlcyBpZiB3ZSdyZSBjcm9zc2luZyBvdmVyIHRoZSBzdGFydCB0aW1lLCBpbiB3aGljaCBjYXNlIHdlIG11c3QgcmVjb3JkIF96VGltZSBhbmQgZm9yY2UgdGhlIHJlbmRlciwgYnV0IHdlIGRvIGl0IGluIHRoaXMgbGVuZ3RoeSBjb25kaXRpb25hbCB3YXkgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMgKHVzdWFsbHkgd2UgY2FuIHNraXAgdGhlIGNhbGN1bGF0aW9ucyk6IHRoaXMuX2luaXR0ZWQgJiYgKHRoaXMuX3pUaW1lIDwgMCkgIT09ICh0b3RhbFRpbWUgPCAwKVxuICAgICAgdGltZSA9IHRUaW1lO1xuICAgICAgdGltZWxpbmUgPSB0aGlzLnRpbWVsaW5lO1xuXG4gICAgICBpZiAodGhpcy5fcmVwZWF0KSB7XG4gICAgICAgIC8vYWRqdXN0IHRoZSB0aW1lIGZvciByZXBlYXRzIGFuZCB5b3lvc1xuICAgICAgICBjeWNsZUR1cmF0aW9uID0gZHVyICsgdGhpcy5fckRlbGF5O1xuXG4gICAgICAgIGlmICh0aGlzLl9yZXBlYXQgPCAtMSAmJiBpc05lZ2F0aXZlKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMudG90YWxUaW1lKGN5Y2xlRHVyYXRpb24gKiAxMDAgKyB0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aW1lID0gX3JvdW5kUHJlY2lzZSh0VGltZSAlIGN5Y2xlRHVyYXRpb24pOyAvL3JvdW5kIHRvIGF2b2lkIGZsb2F0aW5nIHBvaW50IGVycm9ycy4gKDQgJSAwLjggc2hvdWxkIGJlIDAgYnV0IHNvbWUgYnJvd3NlcnMgcmVwb3J0IGl0IGFzIDAuNzk5OTk5OTkhKVxuXG4gICAgICAgIGlmICh0VGltZSA9PT0gdER1cikge1xuICAgICAgICAgIC8vIHRoZSB0RHVyID09PSB0VGltZSBpcyBmb3IgZWRnZSBjYXNlcyB3aGVyZSB0aGVyZSdzIGEgbGVuZ3RoeSBkZWNpbWFsIG9uIHRoZSBkdXJhdGlvbiBhbmQgaXQgbWF5IHJlYWNoIHRoZSB2ZXJ5IGVuZCBidXQgdGhlIHRpbWUgaXMgcmVuZGVyZWQgYXMgbm90LXF1aXRlLXRoZXJlIChyZW1lbWJlciwgdER1ciBpcyByb3VuZGVkIHRvIDQgZGVjaW1hbHMgd2hlcmVhcyBkdXIgaXNuJ3QpXG4gICAgICAgICAgaXRlcmF0aW9uID0gdGhpcy5fcmVwZWF0O1xuICAgICAgICAgIHRpbWUgPSBkdXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlcmF0aW9uID0gfn4odFRpbWUgLyBjeWNsZUR1cmF0aW9uKTtcblxuICAgICAgICAgIGlmIChpdGVyYXRpb24gJiYgaXRlcmF0aW9uID09PSBfcm91bmRQcmVjaXNlKHRUaW1lIC8gY3ljbGVEdXJhdGlvbikpIHtcbiAgICAgICAgICAgIHRpbWUgPSBkdXI7XG4gICAgICAgICAgICBpdGVyYXRpb24tLTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aW1lID4gZHVyICYmICh0aW1lID0gZHVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlzWW95byA9IHRoaXMuX3lveW8gJiYgaXRlcmF0aW9uICYgMTtcblxuICAgICAgICBpZiAoaXNZb3lvKSB7XG4gICAgICAgICAgeW95b0Vhc2UgPSB0aGlzLl95RWFzZTtcbiAgICAgICAgICB0aW1lID0gZHVyIC0gdGltZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByZXZJdGVyYXRpb24gPSBfYW5pbWF0aW9uQ3ljbGUodGhpcy5fdFRpbWUsIGN5Y2xlRHVyYXRpb24pO1xuXG4gICAgICAgIGlmICh0aW1lID09PSBwcmV2VGltZSAmJiAhZm9yY2UgJiYgdGhpcy5faW5pdHRlZCAmJiBpdGVyYXRpb24gPT09IHByZXZJdGVyYXRpb24pIHtcbiAgICAgICAgICAvL2NvdWxkIGJlIGR1cmluZyB0aGUgcmVwZWF0RGVsYXkgcGFydC4gTm8gbmVlZCB0byByZW5kZXIgYW5kIGZpcmUgY2FsbGJhY2tzLlxuICAgICAgICAgIHRoaXMuX3RUaW1lID0gdFRpbWU7XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXRlcmF0aW9uICE9PSBwcmV2SXRlcmF0aW9uKSB7XG4gICAgICAgICAgdGltZWxpbmUgJiYgdGhpcy5feUVhc2UgJiYgX3Byb3BhZ2F0ZVlveW9FYXNlKHRpbWVsaW5lLCBpc1lveW8pOyAvL3JlcGVhdFJlZnJlc2ggZnVuY3Rpb25hbGl0eVxuXG4gICAgICAgICAgaWYgKHRoaXMudmFycy5yZXBlYXRSZWZyZXNoICYmICFpc1lveW8gJiYgIXRoaXMuX2xvY2sgJiYgdGhpcy5fdGltZSAhPT0gY3ljbGVEdXJhdGlvbiAmJiB0aGlzLl9pbml0dGVkKSB7XG4gICAgICAgICAgICAvLyB0aGlzLl90aW1lIHdpbGwgPT09IGN5Y2xlRHVyYXRpb24gd2hlbiB3ZSByZW5kZXIgYXQgRVhBQ1RMWSB0aGUgZW5kIG9mIGFuIGl0ZXJhdGlvbi4gV2l0aG91dCB0aGlzIGNvbmRpdGlvbiwgaXQnZCBvZnRlbiBkbyB0aGUgcmVwZWF0UmVmcmVzaCByZW5kZXIgVFdJQ0UgKGFnYWluIG9uIHRoZSB2ZXJ5IG5leHQgdGljaykuXG4gICAgICAgICAgICB0aGlzLl9sb2NrID0gZm9yY2UgPSAxOyAvL2ZvcmNlLCBvdGhlcndpc2UgaWYgbGF6eSBpcyB0cnVlLCB0aGUgX2F0dGVtcHRJbml0VHdlZW4oKSB3aWxsIHJldHVybiBhbmQgd2UnbGwganVtcCBvdXQgYW5kIGdldCBjYXVnaHQgYm91bmNpbmcgb24gZWFjaCB0aWNrLlxuXG4gICAgICAgICAgICB0aGlzLnJlbmRlcihfcm91bmRQcmVjaXNlKGN5Y2xlRHVyYXRpb24gKiBpdGVyYXRpb24pLCB0cnVlKS5pbnZhbGlkYXRlKCkuX2xvY2sgPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMuX2luaXR0ZWQpIHtcbiAgICAgICAgaWYgKF9hdHRlbXB0SW5pdFR3ZWVuKHRoaXMsIGlzTmVnYXRpdmUgPyB0b3RhbFRpbWUgOiB0aW1lLCBmb3JjZSwgc3VwcHJlc3NFdmVudHMsIHRUaW1lKSkge1xuICAgICAgICAgIHRoaXMuX3RUaW1lID0gMDsgLy8gaW4gY29uc3RydWN0b3IgaWYgaW1tZWRpYXRlUmVuZGVyIGlzIHRydWUsIHdlIHNldCBfdFRpbWUgdG8gLV90aW55TnVtIHRvIGhhdmUgdGhlIHBsYXloZWFkIGNyb3NzIHRoZSBzdGFydGluZyBwb2ludCBidXQgd2UgY2FuJ3QgbGVhdmUgX3RUaW1lIGFzIGEgbmVnYXRpdmUgbnVtYmVyLlxuXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocHJldlRpbWUgIT09IHRoaXMuX3RpbWUgJiYgIShmb3JjZSAmJiB0aGlzLnZhcnMucmVwZWF0UmVmcmVzaCAmJiBpdGVyYXRpb24gIT09IHByZXZJdGVyYXRpb24pKSB7XG4gICAgICAgICAgLy8gcmFyZSBlZGdlIGNhc2UgLSBkdXJpbmcgaW5pdGlhbGl6YXRpb24sIGFuIG9uVXBkYXRlIGluIHRoZSBfc3RhcnRBdCAoLmZyb21UbygpKSBtaWdodCBmb3JjZSB0aGlzIHR3ZWVuIHRvIHJlbmRlciBhdCBhIGRpZmZlcmVudCBzcG90IGluIHdoaWNoIGNhc2Ugd2Ugc2hvdWxkIGRpdGNoIHRoaXMgcmVuZGVyKCkgY2FsbCBzbyB0aGF0IGl0IGRvZXNuJ3QgcmV2ZXJ0IHRoZSB2YWx1ZXMuIEJ1dCB3ZSBhbHNvIGRvbid0IHdhbnQgdG8gZHVtcCBpZiB3ZSdyZSBkb2luZyBhIHJlcGVhdFJlZnJlc2ggcmVuZGVyIVxuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGR1ciAhPT0gdGhpcy5fZHVyKSB7XG4gICAgICAgICAgLy8gd2hpbGUgaW5pdHRpbmcsIGEgcGx1Z2luIGxpa2UgSW5lcnRpYVBsdWdpbiBtaWdodCBhbHRlciB0aGUgZHVyYXRpb24sIHNvIHJlcnVuIGZyb20gdGhlIHN0YXJ0IHRvIGVuc3VyZSBldmVyeXRoaW5nIHJlbmRlcnMgYXMgaXQgc2hvdWxkLlxuICAgICAgICAgIHJldHVybiB0aGlzLnJlbmRlcih0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5fdFRpbWUgPSB0VGltZTtcbiAgICAgIHRoaXMuX3RpbWUgPSB0aW1lO1xuXG4gICAgICBpZiAoIXRoaXMuX2FjdCAmJiB0aGlzLl90cykge1xuICAgICAgICB0aGlzLl9hY3QgPSAxOyAvL2FzIGxvbmcgYXMgaXQncyBub3QgcGF1c2VkLCBmb3JjZSBpdCB0byBiZSBhY3RpdmUgc28gdGhhdCBpZiB0aGUgdXNlciByZW5kZXJzIGluZGVwZW5kZW50IG9mIHRoZSBwYXJlbnQgdGltZWxpbmUsIGl0J2xsIGJlIGZvcmNlZCB0byByZS1yZW5kZXIgb24gdGhlIG5leHQgdGljay5cblxuICAgICAgICB0aGlzLl9sYXp5ID0gMDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5yYXRpbyA9IHJhdGlvID0gKHlveW9FYXNlIHx8IHRoaXMuX2Vhc2UpKHRpbWUgLyBkdXIpO1xuXG4gICAgICBpZiAodGhpcy5fZnJvbSkge1xuICAgICAgICB0aGlzLnJhdGlvID0gcmF0aW8gPSAxIC0gcmF0aW87XG4gICAgICB9XG5cbiAgICAgIGlmICh0aW1lICYmICFwcmV2VGltZSAmJiAhc3VwcHJlc3NFdmVudHMgJiYgIWl0ZXJhdGlvbikge1xuICAgICAgICBfY2FsbGJhY2sodGhpcywgXCJvblN0YXJ0XCIpO1xuXG4gICAgICAgIGlmICh0aGlzLl90VGltZSAhPT0gdFRpbWUpIHtcbiAgICAgICAgICAvLyBpbiBjYXNlIHRoZSBvblN0YXJ0IHRyaWdnZXJlZCBhIHJlbmRlciBhdCBhIGRpZmZlcmVudCBzcG90LCBlamVjdC4gTGlrZSBpZiBzb21lb25lIGRpZCBhbmltYXRpb24ucGF1c2UoMC41KSBvciBzb21ldGhpbmcgaW5zaWRlIHRoZSBvblN0YXJ0LlxuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHB0ID0gdGhpcy5fcHQ7XG5cbiAgICAgIHdoaWxlIChwdCkge1xuICAgICAgICBwdC5yKHJhdGlvLCBwdC5kKTtcbiAgICAgICAgcHQgPSBwdC5fbmV4dDtcbiAgICAgIH1cblxuICAgICAgdGltZWxpbmUgJiYgdGltZWxpbmUucmVuZGVyKHRvdGFsVGltZSA8IDAgPyB0b3RhbFRpbWUgOiB0aW1lbGluZS5fZHVyICogdGltZWxpbmUuX2Vhc2UodGltZSAvIHRoaXMuX2R1ciksIHN1cHByZXNzRXZlbnRzLCBmb3JjZSkgfHwgdGhpcy5fc3RhcnRBdCAmJiAodGhpcy5felRpbWUgPSB0b3RhbFRpbWUpO1xuXG4gICAgICBpZiAodGhpcy5fb25VcGRhdGUgJiYgIXN1cHByZXNzRXZlbnRzKSB7XG4gICAgICAgIGlzTmVnYXRpdmUgJiYgX3Jld2luZFN0YXJ0QXQodGhpcywgdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpOyAvL25vdGU6IGZvciBwZXJmb3JtYW5jZSByZWFzb25zLCB3ZSB0dWNrIHRoaXMgY29uZGl0aW9uYWwgbG9naWMgaW5zaWRlIGxlc3MgdHJhdmVsZWQgYXJlYXMgKG1vc3QgdHdlZW5zIGRvbid0IGhhdmUgYW4gb25VcGRhdGUpLiBXZSdkIGp1c3QgaGF2ZSBpdCBhdCB0aGUgZW5kIGJlZm9yZSB0aGUgb25Db21wbGV0ZSwgYnV0IHRoZSB2YWx1ZXMgc2hvdWxkIGJlIHVwZGF0ZWQgYmVmb3JlIGFueSBvblVwZGF0ZSBpcyBjYWxsZWQsIHNvIHdlIEFMU08gcHV0IGl0IGhlcmUgYW5kIHRoZW4gaWYgaXQncyBub3QgY2FsbGVkLCB3ZSBkbyBzbyBsYXRlciBuZWFyIHRoZSBvbkNvbXBsZXRlLlxuXG4gICAgICAgIF9jYWxsYmFjayh0aGlzLCBcIm9uVXBkYXRlXCIpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9yZXBlYXQgJiYgaXRlcmF0aW9uICE9PSBwcmV2SXRlcmF0aW9uICYmIHRoaXMudmFycy5vblJlcGVhdCAmJiAhc3VwcHJlc3NFdmVudHMgJiYgdGhpcy5wYXJlbnQgJiYgX2NhbGxiYWNrKHRoaXMsIFwib25SZXBlYXRcIik7XG5cbiAgICAgIGlmICgodFRpbWUgPT09IHRoaXMuX3REdXIgfHwgIXRUaW1lKSAmJiB0aGlzLl90VGltZSA9PT0gdFRpbWUpIHtcbiAgICAgICAgaXNOZWdhdGl2ZSAmJiAhdGhpcy5fb25VcGRhdGUgJiYgX3Jld2luZFN0YXJ0QXQodGhpcywgdG90YWxUaW1lLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgKHRvdGFsVGltZSB8fCAhZHVyKSAmJiAodFRpbWUgPT09IHRoaXMuX3REdXIgJiYgdGhpcy5fdHMgPiAwIHx8ICF0VGltZSAmJiB0aGlzLl90cyA8IDApICYmIF9yZW1vdmVGcm9tUGFyZW50KHRoaXMsIDEpOyAvLyBkb24ndCByZW1vdmUgaWYgd2UncmUgcmVuZGVyaW5nIGF0IGV4YWN0bHkgYSB0aW1lIG9mIDAsIGFzIHRoZXJlIGNvdWxkIGJlIGF1dG9SZXZlcnQgdmFsdWVzIHRoYXQgc2hvdWxkIGdldCBzZXQgb24gdGhlIG5leHQgdGljayAoaWYgdGhlIHBsYXloZWFkIGdvZXMgYmFja3dhcmQgYmV5b25kIHRoZSBzdGFydFRpbWUsIG5lZ2F0aXZlIHRvdGFsVGltZSkuIERvbid0IHJlbW92ZSBpZiB0aGUgdGltZWxpbmUgaXMgcmV2ZXJzZWQgYW5kIHRoZSBwbGF5aGVhZCBpc24ndCBhdCAwLCBvdGhlcndpc2UgdGwucHJvZ3Jlc3MoMSkucmV2ZXJzZSgpIHdvbid0IHdvcmsuIE9ubHkgcmVtb3ZlIGlmIHRoZSBwbGF5aGVhZCBpcyBhdCB0aGUgZW5kIGFuZCB0aW1lU2NhbGUgaXMgcG9zaXRpdmUsIG9yIGlmIHRoZSBwbGF5aGVhZCBpcyBhdCAwIGFuZCB0aGUgdGltZVNjYWxlIGlzIG5lZ2F0aXZlLlxuXG4gICAgICAgIGlmICghc3VwcHJlc3NFdmVudHMgJiYgIShpc05lZ2F0aXZlICYmICFwcmV2VGltZSkgJiYgKHRUaW1lIHx8IHByZXZUaW1lIHx8IGlzWW95bykpIHtcbiAgICAgICAgICAvLyBpZiBwcmV2VGltZSBhbmQgdFRpbWUgYXJlIHplcm8sIHdlIHNob3VsZG4ndCBmaXJlIHRoZSBvblJldmVyc2VDb21wbGV0ZS4gVGhpcyBjb3VsZCBoYXBwZW4gaWYgeW91IGdzYXAudG8oLi4uIHtwYXVzZWQ6dHJ1ZX0pLnBsYXkoKTtcbiAgICAgICAgICBfY2FsbGJhY2sodGhpcywgdFRpbWUgPT09IHREdXIgPyBcIm9uQ29tcGxldGVcIiA6IFwib25SZXZlcnNlQ29tcGxldGVcIiwgdHJ1ZSk7XG5cbiAgICAgICAgICB0aGlzLl9wcm9tICYmICEodFRpbWUgPCB0RHVyICYmIHRoaXMudGltZVNjYWxlKCkgPiAwKSAmJiB0aGlzLl9wcm9tKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8zLnRhcmdldHMgPSBmdW5jdGlvbiB0YXJnZXRzKCkge1xuICAgIHJldHVybiB0aGlzLl90YXJnZXRzO1xuICB9O1xuXG4gIF9wcm90bzMuaW52YWxpZGF0ZSA9IGZ1bmN0aW9uIGludmFsaWRhdGUoc29mdCkge1xuICAgIC8vIFwic29mdFwiIGdpdmVzIHVzIGEgd2F5IHRvIGNsZWFyIG91dCBldmVyeXRoaW5nIEVYQ0VQVCB0aGUgcmVjb3JkZWQgcHJlLVwiZnJvbVwiIHBvcnRpb24gb2YgZnJvbSgpIHR3ZWVucy4gT3RoZXJ3aXNlLCBmb3IgZXhhbXBsZSwgaWYgeW91IHR3ZWVuLnByb2dyZXNzKDEpLnJlbmRlcigwLCB0cnVlIHRydWUpLmludmFsaWRhdGUoKSwgdGhlIFwiZnJvbVwiIHZhbHVlcyB3b3VsZCBwZXJzaXN0IGFuZCB0aGVuIG9uIHRoZSBuZXh0IHJlbmRlciwgdGhlIGZyb20oKSB0d2VlbnMgd291bGQgaW5pdGlhbGl6ZSBhbmQgdGhlIGN1cnJlbnQgdmFsdWUgd291bGQgbWF0Y2ggdGhlIFwiZnJvbVwiIHZhbHVlcywgdGh1cyBhbmltYXRlIGZyb20gdGhlIHNhbWUgdmFsdWUgdG8gdGhlIHNhbWUgdmFsdWUgKG5vIGFuaW1hdGlvbikuIFdlIHRhcCBpbnRvIHRoaXMgaW4gU2Nyb2xsVHJpZ2dlcidzIHJlZnJlc2goKSB3aGVyZSB3ZSBtdXN0IHB1c2ggYSB0d2VlbiB0byBjb21wbGV0aW9uIGFuZCB0aGVuIGJhY2sgYWdhaW4gYnV0IGhvbm9yIGl0cyBpbml0IHN0YXRlIGluIGNhc2UgdGhlIHR3ZWVuIGlzIGRlcGVuZGVudCBvbiBhbm90aGVyIHR3ZWVuIGZ1cnRoZXIgdXAgb24gdGhlIHBhZ2UuXG4gICAgKCFzb2Z0IHx8ICF0aGlzLnZhcnMucnVuQmFja3dhcmRzKSAmJiAodGhpcy5fc3RhcnRBdCA9IDApO1xuICAgIHRoaXMuX3B0ID0gdGhpcy5fb3AgPSB0aGlzLl9vblVwZGF0ZSA9IHRoaXMuX2xhenkgPSB0aGlzLnJhdGlvID0gMDtcbiAgICB0aGlzLl9wdExvb2t1cCA9IFtdO1xuICAgIHRoaXMudGltZWxpbmUgJiYgdGhpcy50aW1lbGluZS5pbnZhbGlkYXRlKHNvZnQpO1xuICAgIHJldHVybiBfQW5pbWF0aW9uMi5wcm90b3R5cGUuaW52YWxpZGF0ZS5jYWxsKHRoaXMsIHNvZnQpO1xuICB9O1xuXG4gIF9wcm90bzMucmVzZXRUbyA9IGZ1bmN0aW9uIHJlc2V0VG8ocHJvcGVydHksIHZhbHVlLCBzdGFydCwgc3RhcnRJc1JlbGF0aXZlLCBza2lwUmVjdXJzaW9uKSB7XG4gICAgX3RpY2tlckFjdGl2ZSB8fCBfdGlja2VyLndha2UoKTtcbiAgICB0aGlzLl90cyB8fCB0aGlzLnBsYXkoKTtcbiAgICB2YXIgdGltZSA9IE1hdGgubWluKHRoaXMuX2R1ciwgKHRoaXMuX2RwLl90aW1lIC0gdGhpcy5fc3RhcnQpICogdGhpcy5fdHMpLFxuICAgICAgICByYXRpbztcbiAgICB0aGlzLl9pbml0dGVkIHx8IF9pbml0VHdlZW4odGhpcywgdGltZSk7XG4gICAgcmF0aW8gPSB0aGlzLl9lYXNlKHRpbWUgLyB0aGlzLl9kdXIpOyAvLyBkb24ndCBqdXN0IGdldCB0d2Vlbi5yYXRpbyBiZWNhdXNlIGl0IG1heSBub3QgaGF2ZSByZW5kZXJlZCB5ZXQuXG4gICAgLy8gcG9zc2libGUgZnV0dXJlIGFkZGl0aW9uIHRvIGFsbG93IGFuIG9iamVjdCB3aXRoIG11bHRpcGxlIHZhbHVlcyB0byB1cGRhdGUsIGxpa2UgdHdlZW4ucmVzZXRUbyh7eDogMTAwLCB5OiAyMDB9KTsgQXQgdGhpcyBwb2ludCwgaXQgZG9lc24ndCBzZWVtIHdvcnRoIHRoZSBhZGRlZCBrYiBnaXZlbiB0aGUgZmFjdCB0aGF0IG1vc3QgdXNlcnMgd2lsbCBsaWtlbHkgb3B0IGZvciB0aGUgY29udmVuaWVudCBnc2FwLnF1aWNrVG8oKSB3YXkgb2YgaW50ZXJhY3Rpbmcgd2l0aCB0aGlzIG1ldGhvZC5cbiAgICAvLyBpZiAoX2lzT2JqZWN0KHByb3BlcnR5KSkgeyAvLyBwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb25cbiAgICAvLyBcdGZvciAocCBpbiBwcm9wZXJ0eSkge1xuICAgIC8vIFx0XHRpZiAoX3VwZGF0ZVByb3BUd2VlbnModGhpcywgcCwgcHJvcGVydHlbcF0sIHZhbHVlID8gdmFsdWVbcF0gOiBudWxsLCBzdGFydCwgcmF0aW8sIHRpbWUpKSB7XG4gICAgLy8gXHRcdFx0cmV0dXJuIHRoaXMucmVzZXRUbyhwcm9wZXJ0eSwgdmFsdWUsIHN0YXJ0LCBzdGFydElzUmVsYXRpdmUpOyAvLyBpZiBhIFByb3BUd2VlbiB3YXNuJ3QgZm91bmQgZm9yIHRoZSBwcm9wZXJ0eSwgaXQnbGwgZ2V0IGZvcmNlZCB3aXRoIGEgcmUtaW5pdGlhbGl6YXRpb24gc28gd2UgbmVlZCB0byBqdW1wIG91dCBhbmQgc3RhcnQgb3ZlciBhZ2Fpbi5cbiAgICAvLyBcdFx0fVxuICAgIC8vIFx0fVxuICAgIC8vIH0gZWxzZSB7XG5cbiAgICBpZiAoX3VwZGF0ZVByb3BUd2VlbnModGhpcywgcHJvcGVydHksIHZhbHVlLCBzdGFydCwgc3RhcnRJc1JlbGF0aXZlLCByYXRpbywgdGltZSwgc2tpcFJlY3Vyc2lvbikpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlc2V0VG8ocHJvcGVydHksIHZhbHVlLCBzdGFydCwgc3RhcnRJc1JlbGF0aXZlLCAxKTsgLy8gaWYgYSBQcm9wVHdlZW4gd2Fzbid0IGZvdW5kIGZvciB0aGUgcHJvcGVydHksIGl0J2xsIGdldCBmb3JjZWQgd2l0aCBhIHJlLWluaXRpYWxpemF0aW9uIHNvIHdlIG5lZWQgdG8ganVtcCBvdXQgYW5kIHN0YXJ0IG92ZXIgYWdhaW4uXG4gICAgfSAvL31cblxuXG4gICAgX2FsaWduUGxheWhlYWQodGhpcywgMCk7XG5cbiAgICB0aGlzLnBhcmVudCB8fCBfYWRkTGlua2VkTGlzdEl0ZW0odGhpcy5fZHAsIHRoaXMsIFwiX2ZpcnN0XCIsIFwiX2xhc3RcIiwgdGhpcy5fZHAuX3NvcnQgPyBcIl9zdGFydFwiIDogMCk7XG4gICAgcmV0dXJuIHRoaXMucmVuZGVyKDApO1xuICB9O1xuXG4gIF9wcm90bzMua2lsbCA9IGZ1bmN0aW9uIGtpbGwodGFyZ2V0cywgdmFycykge1xuICAgIGlmICh2YXJzID09PSB2b2lkIDApIHtcbiAgICAgIHZhcnMgPSBcImFsbFwiO1xuICAgIH1cblxuICAgIGlmICghdGFyZ2V0cyAmJiAoIXZhcnMgfHwgdmFycyA9PT0gXCJhbGxcIikpIHtcbiAgICAgIHRoaXMuX2xhenkgPSB0aGlzLl9wdCA9IDA7XG4gICAgICByZXR1cm4gdGhpcy5wYXJlbnQgPyBfaW50ZXJydXB0KHRoaXMpIDogdGhpcztcbiAgICB9XG5cbiAgICBpZiAodGhpcy50aW1lbGluZSkge1xuICAgICAgdmFyIHREdXIgPSB0aGlzLnRpbWVsaW5lLnRvdGFsRHVyYXRpb24oKTtcbiAgICAgIHRoaXMudGltZWxpbmUua2lsbFR3ZWVuc09mKHRhcmdldHMsIHZhcnMsIF9vdmVyd3JpdGluZ1R3ZWVuICYmIF9vdmVyd3JpdGluZ1R3ZWVuLnZhcnMub3ZlcndyaXRlICE9PSB0cnVlKS5fZmlyc3QgfHwgX2ludGVycnVwdCh0aGlzKTsgLy8gaWYgbm90aGluZyBpcyBsZWZ0IHR3ZWVuaW5nLCBpbnRlcnJ1cHQuXG5cbiAgICAgIHRoaXMucGFyZW50ICYmIHREdXIgIT09IHRoaXMudGltZWxpbmUudG90YWxEdXJhdGlvbigpICYmIF9zZXREdXJhdGlvbih0aGlzLCB0aGlzLl9kdXIgKiB0aGlzLnRpbWVsaW5lLl90RHVyIC8gdER1ciwgMCwgMSk7IC8vIGlmIGEgbmVzdGVkIHR3ZWVuIGlzIGtpbGxlZCB0aGF0IGNoYW5nZXMgdGhlIGR1cmF0aW9uLCBpdCBzaG91bGQgYWZmZWN0IHRoaXMgdHdlZW4ncyBkdXJhdGlvbi4gV2UgbXVzdCB1c2UgdGhlIHJhdGlvLCB0aG91Z2gsIGJlY2F1c2Ugc29tZXRpbWVzIHRoZSBpbnRlcm5hbCB0aW1lbGluZSBpcyBzdHJldGNoZWQgbGlrZSBmb3Iga2V5ZnJhbWVzIHdoZXJlIHRoZXkgZG9uJ3QgYWxsIGFkZCB1cCB0byB3aGF0ZXZlciB0aGUgcGFyZW50IHR3ZWVuJ3MgZHVyYXRpb24gd2FzIHNldCB0by5cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdmFyIHBhcnNlZFRhcmdldHMgPSB0aGlzLl90YXJnZXRzLFxuICAgICAgICBraWxsaW5nVGFyZ2V0cyA9IHRhcmdldHMgPyB0b0FycmF5KHRhcmdldHMpIDogcGFyc2VkVGFyZ2V0cyxcbiAgICAgICAgcHJvcFR3ZWVuTG9va3VwID0gdGhpcy5fcHRMb29rdXAsXG4gICAgICAgIGZpcnN0UFQgPSB0aGlzLl9wdCxcbiAgICAgICAgb3ZlcndyaXR0ZW5Qcm9wcyxcbiAgICAgICAgY3VyTG9va3VwLFxuICAgICAgICBjdXJPdmVyd3JpdGVQcm9wcyxcbiAgICAgICAgcHJvcHMsXG4gICAgICAgIHAsXG4gICAgICAgIHB0LFxuICAgICAgICBpO1xuXG4gICAgaWYgKCghdmFycyB8fCB2YXJzID09PSBcImFsbFwiKSAmJiBfYXJyYXlzTWF0Y2gocGFyc2VkVGFyZ2V0cywga2lsbGluZ1RhcmdldHMpKSB7XG4gICAgICB2YXJzID09PSBcImFsbFwiICYmICh0aGlzLl9wdCA9IDApO1xuICAgICAgcmV0dXJuIF9pbnRlcnJ1cHQodGhpcyk7XG4gICAgfVxuXG4gICAgb3ZlcndyaXR0ZW5Qcm9wcyA9IHRoaXMuX29wID0gdGhpcy5fb3AgfHwgW107XG5cbiAgICBpZiAodmFycyAhPT0gXCJhbGxcIikge1xuICAgICAgLy9zbyBwZW9wbGUgY2FuIHBhc3MgaW4gYSBjb21tYS1kZWxpbWl0ZWQgbGlzdCBvZiBwcm9wZXJ0eSBuYW1lc1xuICAgICAgaWYgKF9pc1N0cmluZyh2YXJzKSkge1xuICAgICAgICBwID0ge307XG5cbiAgICAgICAgX2ZvckVhY2hOYW1lKHZhcnMsIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgcmV0dXJuIHBbbmFtZV0gPSAxO1xuICAgICAgICB9KTtcblxuICAgICAgICB2YXJzID0gcDtcbiAgICAgIH1cblxuICAgICAgdmFycyA9IF9hZGRBbGlhc2VzVG9WYXJzKHBhcnNlZFRhcmdldHMsIHZhcnMpO1xuICAgIH1cblxuICAgIGkgPSBwYXJzZWRUYXJnZXRzLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGlmICh+a2lsbGluZ1RhcmdldHMuaW5kZXhPZihwYXJzZWRUYXJnZXRzW2ldKSkge1xuICAgICAgICBjdXJMb29rdXAgPSBwcm9wVHdlZW5Mb29rdXBbaV07XG5cbiAgICAgICAgaWYgKHZhcnMgPT09IFwiYWxsXCIpIHtcbiAgICAgICAgICBvdmVyd3JpdHRlblByb3BzW2ldID0gdmFycztcbiAgICAgICAgICBwcm9wcyA9IGN1ckxvb2t1cDtcbiAgICAgICAgICBjdXJPdmVyd3JpdGVQcm9wcyA9IHt9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGN1ck92ZXJ3cml0ZVByb3BzID0gb3ZlcndyaXR0ZW5Qcm9wc1tpXSA9IG92ZXJ3cml0dGVuUHJvcHNbaV0gfHwge307XG4gICAgICAgICAgcHJvcHMgPSB2YXJzO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChwIGluIHByb3BzKSB7XG4gICAgICAgICAgcHQgPSBjdXJMb29rdXAgJiYgY3VyTG9va3VwW3BdO1xuXG4gICAgICAgICAgaWYgKHB0KSB7XG4gICAgICAgICAgICBpZiAoIShcImtpbGxcIiBpbiBwdC5kKSB8fCBwdC5kLmtpbGwocCkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgX3JlbW92ZUxpbmtlZExpc3RJdGVtKHRoaXMsIHB0LCBcIl9wdFwiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZGVsZXRlIGN1ckxvb2t1cFtwXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoY3VyT3ZlcndyaXRlUHJvcHMgIT09IFwiYWxsXCIpIHtcbiAgICAgICAgICAgIGN1ck92ZXJ3cml0ZVByb3BzW3BdID0gMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl9pbml0dGVkICYmICF0aGlzLl9wdCAmJiBmaXJzdFBUICYmIF9pbnRlcnJ1cHQodGhpcyk7IC8vaWYgYWxsIHR3ZWVuaW5nIHByb3BlcnRpZXMgYXJlIGtpbGxlZCwga2lsbCB0aGUgdHdlZW4uIFdpdGhvdXQgdGhpcyBsaW5lLCBpZiB0aGVyZSdzIGEgdHdlZW4gd2l0aCBtdWx0aXBsZSB0YXJnZXRzIGFuZCB0aGVuIHlvdSBraWxsVHdlZW5zT2YoKSBlYWNoIHRhcmdldCBpbmRpdmlkdWFsbHksIHRoZSB0d2VlbiB3b3VsZCB0ZWNobmljYWxseSBzdGlsbCByZW1haW4gYWN0aXZlIGFuZCBmaXJlIGl0cyBvbkNvbXBsZXRlIGV2ZW4gdGhvdWdoIHRoZXJlIGFyZW4ndCBhbnkgbW9yZSBwcm9wZXJ0aWVzIHR3ZWVuaW5nLlxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgVHdlZW4udG8gPSBmdW5jdGlvbiB0byh0YXJnZXRzLCB2YXJzKSB7XG4gICAgcmV0dXJuIG5ldyBUd2Vlbih0YXJnZXRzLCB2YXJzLCBhcmd1bWVudHNbMl0pO1xuICB9O1xuXG4gIFR3ZWVuLmZyb20gPSBmdW5jdGlvbiBmcm9tKHRhcmdldHMsIHZhcnMpIHtcbiAgICByZXR1cm4gX2NyZWF0ZVR3ZWVuVHlwZSgxLCBhcmd1bWVudHMpO1xuICB9O1xuXG4gIFR3ZWVuLmRlbGF5ZWRDYWxsID0gZnVuY3Rpb24gZGVsYXllZENhbGwoZGVsYXksIGNhbGxiYWNrLCBwYXJhbXMsIHNjb3BlKSB7XG4gICAgcmV0dXJuIG5ldyBUd2VlbihjYWxsYmFjaywgMCwge1xuICAgICAgaW1tZWRpYXRlUmVuZGVyOiBmYWxzZSxcbiAgICAgIGxhenk6IGZhbHNlLFxuICAgICAgb3ZlcndyaXRlOiBmYWxzZSxcbiAgICAgIGRlbGF5OiBkZWxheSxcbiAgICAgIG9uQ29tcGxldGU6IGNhbGxiYWNrLFxuICAgICAgb25SZXZlcnNlQ29tcGxldGU6IGNhbGxiYWNrLFxuICAgICAgb25Db21wbGV0ZVBhcmFtczogcGFyYW1zLFxuICAgICAgb25SZXZlcnNlQ29tcGxldGVQYXJhbXM6IHBhcmFtcyxcbiAgICAgIGNhbGxiYWNrU2NvcGU6IHNjb3BlXG4gICAgfSk7IC8vIHdlIG11c3QgdXNlIG9uUmV2ZXJzZUNvbXBsZXRlIHRvbyBmb3IgdGhpbmdzIGxpa2UgdGltZWxpbmUuYWRkKCgpID0+IHsuLi59KSB3aGljaCBzaG91bGQgYmUgdHJpZ2dlcmVkIGluIEJPVEggZGlyZWN0aW9ucyAoZm9yd2FyZCBhbmQgcmV2ZXJzZSlcbiAgfTtcblxuICBUd2Vlbi5mcm9tVG8gPSBmdW5jdGlvbiBmcm9tVG8odGFyZ2V0cywgZnJvbVZhcnMsIHRvVmFycykge1xuICAgIHJldHVybiBfY3JlYXRlVHdlZW5UeXBlKDIsIGFyZ3VtZW50cyk7XG4gIH07XG5cbiAgVHdlZW4uc2V0ID0gZnVuY3Rpb24gc2V0KHRhcmdldHMsIHZhcnMpIHtcbiAgICB2YXJzLmR1cmF0aW9uID0gMDtcbiAgICB2YXJzLnJlcGVhdERlbGF5IHx8ICh2YXJzLnJlcGVhdCA9IDApO1xuICAgIHJldHVybiBuZXcgVHdlZW4odGFyZ2V0cywgdmFycyk7XG4gIH07XG5cbiAgVHdlZW4ua2lsbFR3ZWVuc09mID0gZnVuY3Rpb24ga2lsbFR3ZWVuc09mKHRhcmdldHMsIHByb3BzLCBvbmx5QWN0aXZlKSB7XG4gICAgcmV0dXJuIF9nbG9iYWxUaW1lbGluZS5raWxsVHdlZW5zT2YodGFyZ2V0cywgcHJvcHMsIG9ubHlBY3RpdmUpO1xuICB9O1xuXG4gIHJldHVybiBUd2Vlbjtcbn0oQW5pbWF0aW9uKTtcblxuX3NldERlZmF1bHRzKFR3ZWVuLnByb3RvdHlwZSwge1xuICBfdGFyZ2V0czogW10sXG4gIF9sYXp5OiAwLFxuICBfc3RhcnRBdDogMCxcbiAgX29wOiAwLFxuICBfb25Jbml0OiAwXG59KTsgLy9hZGQgdGhlIHBlcnRpbmVudCB0aW1lbGluZSBtZXRob2RzIHRvIFR3ZWVuIGluc3RhbmNlcyBzbyB0aGF0IHVzZXJzIGNhbiBjaGFpbiBjb252ZW5pZW50bHkgYW5kIGNyZWF0ZSBhIHRpbWVsaW5lIGF1dG9tYXRpY2FsbHkuIChyZW1vdmVkIGR1ZSB0byBjb25jZXJucyB0aGF0IGl0J2QgdWx0aW1hdGVseSBhZGQgdG8gbW9yZSBjb25mdXNpb24gZXNwZWNpYWxseSBmb3IgYmVnaW5uZXJzKVxuLy8gX2ZvckVhY2hOYW1lKFwidG8sZnJvbSxmcm9tVG8sc2V0LGNhbGwsYWRkLGFkZExhYmVsLGFkZFBhdXNlXCIsIG5hbWUgPT4ge1xuLy8gXHRUd2Vlbi5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbigpIHtcbi8vIFx0XHRsZXQgdGwgPSBuZXcgVGltZWxpbmUoKTtcbi8vIFx0XHRyZXR1cm4gX2FkZFRvVGltZWxpbmUodGwsIHRoaXMpW25hbWVdLmFwcGx5KHRsLCB0b0FycmF5KGFyZ3VtZW50cykpO1xuLy8gXHR9XG4vLyB9KTtcbi8vZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkuIExldmVyYWdlIHRoZSB0aW1lbGluZSBjYWxscy5cblxuXG5fZm9yRWFjaE5hbWUoXCJzdGFnZ2VyVG8sc3RhZ2dlckZyb20sc3RhZ2dlckZyb21Ub1wiLCBmdW5jdGlvbiAobmFtZSkge1xuICBUd2VlbltuYW1lXSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGwgPSBuZXcgVGltZWxpbmUoKSxcbiAgICAgICAgcGFyYW1zID0gX3NsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcblxuICAgIHBhcmFtcy5zcGxpY2UobmFtZSA9PT0gXCJzdGFnZ2VyRnJvbVRvXCIgPyA1IDogNCwgMCwgMCk7XG4gICAgcmV0dXJuIHRsW25hbWVdLmFwcGx5KHRsLCBwYXJhbXMpO1xuICB9O1xufSk7XG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIFBST1BUV0VFTlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5cbnZhciBfc2V0dGVyUGxhaW4gPSBmdW5jdGlvbiBfc2V0dGVyUGxhaW4odGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgcmV0dXJuIHRhcmdldFtwcm9wZXJ0eV0gPSB2YWx1ZTtcbn0sXG4gICAgX3NldHRlckZ1bmMgPSBmdW5jdGlvbiBfc2V0dGVyRnVuYyh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSkge1xuICByZXR1cm4gdGFyZ2V0W3Byb3BlcnR5XSh2YWx1ZSk7XG59LFxuICAgIF9zZXR0ZXJGdW5jV2l0aFBhcmFtID0gZnVuY3Rpb24gX3NldHRlckZ1bmNXaXRoUGFyYW0odGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIGRhdGEpIHtcbiAgcmV0dXJuIHRhcmdldFtwcm9wZXJ0eV0oZGF0YS5mcCwgdmFsdWUpO1xufSxcbiAgICBfc2V0dGVyQXR0cmlidXRlID0gZnVuY3Rpb24gX3NldHRlckF0dHJpYnV0ZSh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSkge1xuICByZXR1cm4gdGFyZ2V0LnNldEF0dHJpYnV0ZShwcm9wZXJ0eSwgdmFsdWUpO1xufSxcbiAgICBfZ2V0U2V0dGVyID0gZnVuY3Rpb24gX2dldFNldHRlcih0YXJnZXQsIHByb3BlcnR5KSB7XG4gIHJldHVybiBfaXNGdW5jdGlvbih0YXJnZXRbcHJvcGVydHldKSA/IF9zZXR0ZXJGdW5jIDogX2lzVW5kZWZpbmVkKHRhcmdldFtwcm9wZXJ0eV0pICYmIHRhcmdldC5zZXRBdHRyaWJ1dGUgPyBfc2V0dGVyQXR0cmlidXRlIDogX3NldHRlclBsYWluO1xufSxcbiAgICBfcmVuZGVyUGxhaW4gPSBmdW5jdGlvbiBfcmVuZGVyUGxhaW4ocmF0aW8sIGRhdGEpIHtcbiAgcmV0dXJuIGRhdGEuc2V0KGRhdGEudCwgZGF0YS5wLCBNYXRoLnJvdW5kKChkYXRhLnMgKyBkYXRhLmMgKiByYXRpbykgKiAxMDAwMDAwKSAvIDEwMDAwMDAsIGRhdGEpO1xufSxcbiAgICBfcmVuZGVyQm9vbGVhbiA9IGZ1bmN0aW9uIF9yZW5kZXJCb29sZWFuKHJhdGlvLCBkYXRhKSB7XG4gIHJldHVybiBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgISEoZGF0YS5zICsgZGF0YS5jICogcmF0aW8pLCBkYXRhKTtcbn0sXG4gICAgX3JlbmRlckNvbXBsZXhTdHJpbmcgPSBmdW5jdGlvbiBfcmVuZGVyQ29tcGxleFN0cmluZyhyYXRpbywgZGF0YSkge1xuICB2YXIgcHQgPSBkYXRhLl9wdCxcbiAgICAgIHMgPSBcIlwiO1xuXG4gIGlmICghcmF0aW8gJiYgZGF0YS5iKSB7XG4gICAgLy9iID0gYmVnaW5uaW5nIHN0cmluZ1xuICAgIHMgPSBkYXRhLmI7XG4gIH0gZWxzZSBpZiAocmF0aW8gPT09IDEgJiYgZGF0YS5lKSB7XG4gICAgLy9lID0gZW5kaW5nIHN0cmluZ1xuICAgIHMgPSBkYXRhLmU7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHB0KSB7XG4gICAgICBzID0gcHQucCArIChwdC5tID8gcHQubShwdC5zICsgcHQuYyAqIHJhdGlvKSA6IE1hdGgucm91bmQoKHB0LnMgKyBwdC5jICogcmF0aW8pICogMTAwMDApIC8gMTAwMDApICsgczsgLy93ZSB1c2UgdGhlIFwicFwiIHByb3BlcnR5IGZvciB0aGUgdGV4dCBpbmJldHdlZW4gKGxpa2UgYSBzdWZmaXgpLiBBbmQgaW4gdGhlIGNvbnRleHQgb2YgYSBjb21wbGV4IHN0cmluZywgdGhlIG1vZGlmaWVyIChtKSBpcyB0eXBpY2FsbHkganVzdCBNYXRoLnJvdW5kKCksIGxpa2UgZm9yIFJHQiBjb2xvcnMuXG5cbiAgICAgIHB0ID0gcHQuX25leHQ7XG4gICAgfVxuXG4gICAgcyArPSBkYXRhLmM7IC8vd2UgdXNlIHRoZSBcImNcIiBvZiB0aGUgUHJvcFR3ZWVuIHRvIHN0b3JlIHRoZSBmaW5hbCBjaHVuayBvZiBub24tbnVtZXJpYyB0ZXh0LlxuICB9XG5cbiAgZGF0YS5zZXQoZGF0YS50LCBkYXRhLnAsIHMsIGRhdGEpO1xufSxcbiAgICBfcmVuZGVyUHJvcFR3ZWVucyA9IGZ1bmN0aW9uIF9yZW5kZXJQcm9wVHdlZW5zKHJhdGlvLCBkYXRhKSB7XG4gIHZhciBwdCA9IGRhdGEuX3B0O1xuXG4gIHdoaWxlIChwdCkge1xuICAgIHB0LnIocmF0aW8sIHB0LmQpO1xuICAgIHB0ID0gcHQuX25leHQ7XG4gIH1cbn0sXG4gICAgX2FkZFBsdWdpbk1vZGlmaWVyID0gZnVuY3Rpb24gX2FkZFBsdWdpbk1vZGlmaWVyKG1vZGlmaWVyLCB0d2VlbiwgdGFyZ2V0LCBwcm9wZXJ0eSkge1xuICB2YXIgcHQgPSB0aGlzLl9wdCxcbiAgICAgIG5leHQ7XG5cbiAgd2hpbGUgKHB0KSB7XG4gICAgbmV4dCA9IHB0Ll9uZXh0O1xuICAgIHB0LnAgPT09IHByb3BlcnR5ICYmIHB0Lm1vZGlmaWVyKG1vZGlmaWVyLCB0d2VlbiwgdGFyZ2V0KTtcbiAgICBwdCA9IG5leHQ7XG4gIH1cbn0sXG4gICAgX2tpbGxQcm9wVHdlZW5zT2YgPSBmdW5jdGlvbiBfa2lsbFByb3BUd2VlbnNPZihwcm9wZXJ0eSkge1xuICB2YXIgcHQgPSB0aGlzLl9wdCxcbiAgICAgIGhhc05vbkRlcGVuZGVudFJlbWFpbmluZyxcbiAgICAgIG5leHQ7XG5cbiAgd2hpbGUgKHB0KSB7XG4gICAgbmV4dCA9IHB0Ll9uZXh0O1xuXG4gICAgaWYgKHB0LnAgPT09IHByb3BlcnR5ICYmICFwdC5vcCB8fCBwdC5vcCA9PT0gcHJvcGVydHkpIHtcbiAgICAgIF9yZW1vdmVMaW5rZWRMaXN0SXRlbSh0aGlzLCBwdCwgXCJfcHRcIik7XG4gICAgfSBlbHNlIGlmICghcHQuZGVwKSB7XG4gICAgICBoYXNOb25EZXBlbmRlbnRSZW1haW5pbmcgPSAxO1xuICAgIH1cblxuICAgIHB0ID0gbmV4dDtcbiAgfVxuXG4gIHJldHVybiAhaGFzTm9uRGVwZW5kZW50UmVtYWluaW5nO1xufSxcbiAgICBfc2V0dGVyV2l0aE1vZGlmaWVyID0gZnVuY3Rpb24gX3NldHRlcldpdGhNb2RpZmllcih0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSwgZGF0YSkge1xuICBkYXRhLm1TZXQodGFyZ2V0LCBwcm9wZXJ0eSwgZGF0YS5tLmNhbGwoZGF0YS50d2VlbiwgdmFsdWUsIGRhdGEubXQpLCBkYXRhKTtcbn0sXG4gICAgX3NvcnRQcm9wVHdlZW5zQnlQcmlvcml0eSA9IGZ1bmN0aW9uIF9zb3J0UHJvcFR3ZWVuc0J5UHJpb3JpdHkocGFyZW50KSB7XG4gIHZhciBwdCA9IHBhcmVudC5fcHQsXG4gICAgICBuZXh0LFxuICAgICAgcHQyLFxuICAgICAgZmlyc3QsXG4gICAgICBsYXN0OyAvL3NvcnRzIHRoZSBQcm9wVHdlZW4gbGlua2VkIGxpc3QgaW4gb3JkZXIgb2YgcHJpb3JpdHkgYmVjYXVzZSBzb21lIHBsdWdpbnMgbmVlZCB0byBkbyB0aGVpciB3b3JrIGFmdGVyIEFMTCBvZiB0aGUgUHJvcFR3ZWVucyB3ZXJlIGNyZWF0ZWQgKGxpa2UgUm91bmRQcm9wc1BsdWdpbiBhbmQgTW9kaWZpZXJzUGx1Z2luKVxuXG4gIHdoaWxlIChwdCkge1xuICAgIG5leHQgPSBwdC5fbmV4dDtcbiAgICBwdDIgPSBmaXJzdDtcblxuICAgIHdoaWxlIChwdDIgJiYgcHQyLnByID4gcHQucHIpIHtcbiAgICAgIHB0MiA9IHB0Mi5fbmV4dDtcbiAgICB9XG5cbiAgICBpZiAocHQuX3ByZXYgPSBwdDIgPyBwdDIuX3ByZXYgOiBsYXN0KSB7XG4gICAgICBwdC5fcHJldi5fbmV4dCA9IHB0O1xuICAgIH0gZWxzZSB7XG4gICAgICBmaXJzdCA9IHB0O1xuICAgIH1cblxuICAgIGlmIChwdC5fbmV4dCA9IHB0Mikge1xuICAgICAgcHQyLl9wcmV2ID0gcHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxhc3QgPSBwdDtcbiAgICB9XG5cbiAgICBwdCA9IG5leHQ7XG4gIH1cblxuICBwYXJlbnQuX3B0ID0gZmlyc3Q7XG59OyAvL1Byb3BUd2VlbiBrZXk6IHQgPSB0YXJnZXQsIHAgPSBwcm9wLCByID0gcmVuZGVyZXIsIGQgPSBkYXRhLCBzID0gc3RhcnQsIGMgPSBjaGFuZ2UsIG9wID0gb3ZlcndyaXRlUHJvcGVydHkgKE9OTFkgcG9wdWxhdGVkIHdoZW4gaXQncyBkaWZmZXJlbnQgdGhhbiBwKSwgcHIgPSBwcmlvcml0eSwgX25leHQvX3ByZXYgZm9yIHRoZSBsaW5rZWQgbGlzdCBzaWJsaW5ncywgc2V0ID0gc2V0dGVyLCBtID0gbW9kaWZpZXIsIG1TZXQgPSBtb2RpZmllclNldHRlciAodGhlIG9yaWdpbmFsIHNldHRlciwgYmVmb3JlIGEgbW9kaWZpZXIgd2FzIGFkZGVkKVxuXG5cbmV4cG9ydCB2YXIgUHJvcFR3ZWVuID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUHJvcFR3ZWVuKG5leHQsIHRhcmdldCwgcHJvcCwgc3RhcnQsIGNoYW5nZSwgcmVuZGVyZXIsIGRhdGEsIHNldHRlciwgcHJpb3JpdHkpIHtcbiAgICB0aGlzLnQgPSB0YXJnZXQ7XG4gICAgdGhpcy5zID0gc3RhcnQ7XG4gICAgdGhpcy5jID0gY2hhbmdlO1xuICAgIHRoaXMucCA9IHByb3A7XG4gICAgdGhpcy5yID0gcmVuZGVyZXIgfHwgX3JlbmRlclBsYWluO1xuICAgIHRoaXMuZCA9IGRhdGEgfHwgdGhpcztcbiAgICB0aGlzLnNldCA9IHNldHRlciB8fCBfc2V0dGVyUGxhaW47XG4gICAgdGhpcy5wciA9IHByaW9yaXR5IHx8IDA7XG4gICAgdGhpcy5fbmV4dCA9IG5leHQ7XG5cbiAgICBpZiAobmV4dCkge1xuICAgICAgbmV4dC5fcHJldiA9IHRoaXM7XG4gICAgfVxuICB9XG5cbiAgdmFyIF9wcm90bzQgPSBQcm9wVHdlZW4ucHJvdG90eXBlO1xuXG4gIF9wcm90bzQubW9kaWZpZXIgPSBmdW5jdGlvbiBtb2RpZmllcihmdW5jLCB0d2VlbiwgdGFyZ2V0KSB7XG4gICAgdGhpcy5tU2V0ID0gdGhpcy5tU2V0IHx8IHRoaXMuc2V0OyAvL2luIGNhc2UgaXQgd2FzIGFscmVhZHkgc2V0IChhIFByb3BUd2VlbiBjYW4gb25seSBoYXZlIG9uZSBtb2RpZmllcilcblxuICAgIHRoaXMuc2V0ID0gX3NldHRlcldpdGhNb2RpZmllcjtcbiAgICB0aGlzLm0gPSBmdW5jO1xuICAgIHRoaXMubXQgPSB0YXJnZXQ7IC8vbW9kaWZpZXIgdGFyZ2V0XG5cbiAgICB0aGlzLnR3ZWVuID0gdHdlZW47XG4gIH07XG5cbiAgcmV0dXJuIFByb3BUd2Vlbjtcbn0oKTsgLy9Jbml0aWFsaXphdGlvbiB0YXNrc1xuXG5fZm9yRWFjaE5hbWUoX2NhbGxiYWNrTmFtZXMgKyBcInBhcmVudCxkdXJhdGlvbixlYXNlLGRlbGF5LG92ZXJ3cml0ZSxydW5CYWNrd2FyZHMsc3RhcnRBdCx5b3lvLGltbWVkaWF0ZVJlbmRlcixyZXBlYXQscmVwZWF0RGVsYXksZGF0YSxwYXVzZWQscmV2ZXJzZWQsbGF6eSxjYWxsYmFja1Njb3BlLHN0cmluZ0ZpbHRlcixpZCx5b3lvRWFzZSxzdGFnZ2VyLGluaGVyaXQscmVwZWF0UmVmcmVzaCxrZXlmcmFtZXMsYXV0b1JldmVydCxzY3JvbGxUcmlnZ2VyXCIsIGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBfcmVzZXJ2ZWRQcm9wc1tuYW1lXSA9IDE7XG59KTtcblxuX2dsb2JhbHMuVHdlZW5NYXggPSBfZ2xvYmFscy5Ud2VlbkxpdGUgPSBUd2Vlbjtcbl9nbG9iYWxzLlRpbWVsaW5lTGl0ZSA9IF9nbG9iYWxzLlRpbWVsaW5lTWF4ID0gVGltZWxpbmU7XG5fZ2xvYmFsVGltZWxpbmUgPSBuZXcgVGltZWxpbmUoe1xuICBzb3J0Q2hpbGRyZW46IGZhbHNlLFxuICBkZWZhdWx0czogX2RlZmF1bHRzLFxuICBhdXRvUmVtb3ZlQ2hpbGRyZW46IHRydWUsXG4gIGlkOiBcInJvb3RcIixcbiAgc21vb3RoQ2hpbGRUaW1pbmc6IHRydWVcbn0pO1xuX2NvbmZpZy5zdHJpbmdGaWx0ZXIgPSBfY29sb3JTdHJpbmdGaWx0ZXI7XG5cbnZhciBfbWVkaWEgPSBbXSxcbiAgICBfbGlzdGVuZXJzID0ge30sXG4gICAgX2VtcHR5QXJyYXkgPSBbXSxcbiAgICBfbGFzdE1lZGlhVGltZSA9IDAsXG4gICAgX2NvbnRleHRJRCA9IDAsXG4gICAgX2Rpc3BhdGNoID0gZnVuY3Rpb24gX2Rpc3BhdGNoKHR5cGUpIHtcbiAgcmV0dXJuIChfbGlzdGVuZXJzW3R5cGVdIHx8IF9lbXB0eUFycmF5KS5tYXAoZnVuY3Rpb24gKGYpIHtcbiAgICByZXR1cm4gZigpO1xuICB9KTtcbn0sXG4gICAgX29uTWVkaWFDaGFuZ2UgPSBmdW5jdGlvbiBfb25NZWRpYUNoYW5nZSgpIHtcbiAgdmFyIHRpbWUgPSBEYXRlLm5vdygpLFxuICAgICAgbWF0Y2hlcyA9IFtdO1xuXG4gIGlmICh0aW1lIC0gX2xhc3RNZWRpYVRpbWUgPiAyKSB7XG4gICAgX2Rpc3BhdGNoKFwibWF0Y2hNZWRpYUluaXRcIik7XG5cbiAgICBfbWVkaWEuZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgICAgdmFyIHF1ZXJpZXMgPSBjLnF1ZXJpZXMsXG4gICAgICAgICAgY29uZGl0aW9ucyA9IGMuY29uZGl0aW9ucyxcbiAgICAgICAgICBtYXRjaCxcbiAgICAgICAgICBwLFxuICAgICAgICAgIGFueU1hdGNoLFxuICAgICAgICAgIHRvZ2dsZWQ7XG5cbiAgICAgIGZvciAocCBpbiBxdWVyaWVzKSB7XG4gICAgICAgIG1hdGNoID0gX3dpbi5tYXRjaE1lZGlhKHF1ZXJpZXNbcF0pLm1hdGNoZXM7IC8vIEZpcmVmb3ggZG9lc24ndCB1cGRhdGUgdGhlIFwibWF0Y2hlc1wiIHByb3BlcnR5IG9mIHRoZSBNZWRpYVF1ZXJ5TGlzdCBvYmplY3QgY29ycmVjdGx5IC0gaXQgb25seSBkb2VzIHNvIGFzIGl0IGNhbGxzIGl0cyBjaGFuZ2UgaGFuZGxlciAtIHNvIHdlIG11c3QgcmUtY3JlYXRlIGEgbWVkaWEgcXVlcnkgaGVyZSB0byBlbnN1cmUgaXQncyBhY2N1cmF0ZS5cblxuICAgICAgICBtYXRjaCAmJiAoYW55TWF0Y2ggPSAxKTtcblxuICAgICAgICBpZiAobWF0Y2ggIT09IGNvbmRpdGlvbnNbcF0pIHtcbiAgICAgICAgICBjb25kaXRpb25zW3BdID0gbWF0Y2g7XG4gICAgICAgICAgdG9nZ2xlZCA9IDE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRvZ2dsZWQpIHtcbiAgICAgICAgYy5yZXZlcnQoKTtcbiAgICAgICAgYW55TWF0Y2ggJiYgbWF0Y2hlcy5wdXNoKGMpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX2Rpc3BhdGNoKFwibWF0Y2hNZWRpYVJldmVydFwiKTtcblxuICAgIG1hdGNoZXMuZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgICAgcmV0dXJuIGMub25NYXRjaChjLCBmdW5jdGlvbiAoZnVuYykge1xuICAgICAgICByZXR1cm4gYy5hZGQobnVsbCwgZnVuYyk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBfbGFzdE1lZGlhVGltZSA9IHRpbWU7XG5cbiAgICBfZGlzcGF0Y2goXCJtYXRjaE1lZGlhXCIpO1xuICB9XG59O1xuXG52YXIgQ29udGV4dCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIENvbnRleHQoZnVuYywgc2NvcGUpIHtcbiAgICB0aGlzLnNlbGVjdG9yID0gc2NvcGUgJiYgc2VsZWN0b3Ioc2NvcGUpO1xuICAgIHRoaXMuZGF0YSA9IFtdO1xuICAgIHRoaXMuX3IgPSBbXTsgLy8gcmV0dXJuZWQvY2xlYW51cCBmdW5jdGlvbnNcblxuICAgIHRoaXMuaXNSZXZlcnRlZCA9IGZhbHNlO1xuICAgIHRoaXMuaWQgPSBfY29udGV4dElEKys7IC8vIHRvIHdvcmsgYXJvdW5kIGlzc3VlcyB0aGF0IGZyYW1ld29ya3MgbGlrZSBWdWUgY2F1c2UgYnkgbWFraW5nIHRoaW5ncyBpbnRvIFByb3hpZXMgd2hpY2ggbWFrZSBpdCBpbXBvc3NpYmxlIHRvIGRvIHNvbWV0aGluZyBsaWtlIF9tZWRpYS5pbmRleE9mKHRoaXMpIGJlY2F1c2UgXCJ0aGlzXCIgd291bGQgbm8gbG9uZ2VyIHJlZmVyIHRvIHRoZSBDb250ZXh0IGluc3RhbmNlIGl0c2VsZiAtIGl0J2QgcmVmZXIgdG8gYSBQcm94eSEgV2UgbmVlZGVkIGEgd2F5IHRvIGlkZW50aWZ5IHRoZSBjb250ZXh0IHVuaXF1ZWx5XG5cbiAgICBmdW5jICYmIHRoaXMuYWRkKGZ1bmMpO1xuICB9XG5cbiAgdmFyIF9wcm90bzUgPSBDb250ZXh0LnByb3RvdHlwZTtcblxuICBfcHJvdG81LmFkZCA9IGZ1bmN0aW9uIGFkZChuYW1lLCBmdW5jLCBzY29wZSkge1xuICAgIC8vIHBvc3NpYmxlIGZ1dHVyZSBhZGRpdGlvbiBpZiB3ZSBuZWVkIHRoZSBhYmlsaXR5IHRvIGFkZCgpIGFuIGFuaW1hdGlvbiB0byBhIGNvbnRleHQgYW5kIGZvciB3aGF0ZXZlciByZWFzb24gY2Fubm90IGNyZWF0ZSB0aGF0IGFuaW1hdGlvbiBpbnNpZGUgb2YgYSBjb250ZXh0LmFkZCgoKSA9PiB7Li4ufSkgZnVuY3Rpb24uXG4gICAgLy8gaWYgKG5hbWUgJiYgX2lzRnVuY3Rpb24obmFtZS5yZXZlcnQpKSB7XG4gICAgLy8gXHR0aGlzLmRhdGEucHVzaChuYW1lKTtcbiAgICAvLyBcdHJldHVybiAobmFtZS5fY3R4ID0gdGhpcyk7XG4gICAgLy8gfVxuICAgIGlmIChfaXNGdW5jdGlvbihuYW1lKSkge1xuICAgICAgc2NvcGUgPSBmdW5jO1xuICAgICAgZnVuYyA9IG5hbWU7XG4gICAgICBuYW1lID0gX2lzRnVuY3Rpb247XG4gICAgfVxuXG4gICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgICBmID0gZnVuY3Rpb24gZigpIHtcbiAgICAgIHZhciBwcmV2ID0gX2NvbnRleHQsXG4gICAgICAgICAgcHJldlNlbGVjdG9yID0gc2VsZi5zZWxlY3RvcixcbiAgICAgICAgICByZXN1bHQ7XG4gICAgICBwcmV2ICYmIHByZXYgIT09IHNlbGYgJiYgcHJldi5kYXRhLnB1c2goc2VsZik7XG4gICAgICBzY29wZSAmJiAoc2VsZi5zZWxlY3RvciA9IHNlbGVjdG9yKHNjb3BlKSk7XG4gICAgICBfY29udGV4dCA9IHNlbGY7XG4gICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KHNlbGYsIGFyZ3VtZW50cyk7XG4gICAgICBfaXNGdW5jdGlvbihyZXN1bHQpICYmIHNlbGYuX3IucHVzaChyZXN1bHQpO1xuICAgICAgX2NvbnRleHQgPSBwcmV2O1xuICAgICAgc2VsZi5zZWxlY3RvciA9IHByZXZTZWxlY3RvcjtcbiAgICAgIHNlbGYuaXNSZXZlcnRlZCA9IGZhbHNlO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgc2VsZi5sYXN0ID0gZjtcbiAgICByZXR1cm4gbmFtZSA9PT0gX2lzRnVuY3Rpb24gPyBmKHNlbGYsIGZ1bmN0aW9uIChmdW5jKSB7XG4gICAgICByZXR1cm4gc2VsZi5hZGQobnVsbCwgZnVuYyk7XG4gICAgfSkgOiBuYW1lID8gc2VsZltuYW1lXSA9IGYgOiBmO1xuICB9O1xuXG4gIF9wcm90bzUuaWdub3JlID0gZnVuY3Rpb24gaWdub3JlKGZ1bmMpIHtcbiAgICB2YXIgcHJldiA9IF9jb250ZXh0O1xuICAgIF9jb250ZXh0ID0gbnVsbDtcbiAgICBmdW5jKHRoaXMpO1xuICAgIF9jb250ZXh0ID0gcHJldjtcbiAgfTtcblxuICBfcHJvdG81LmdldFR3ZWVucyA9IGZ1bmN0aW9uIGdldFR3ZWVucygpIHtcbiAgICB2YXIgYSA9IFtdO1xuICAgIHRoaXMuZGF0YS5mb3JFYWNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICByZXR1cm4gZSBpbnN0YW5jZW9mIENvbnRleHQgPyBhLnB1c2guYXBwbHkoYSwgZS5nZXRUd2VlbnMoKSkgOiBlIGluc3RhbmNlb2YgVHdlZW4gJiYgIShlLnBhcmVudCAmJiBlLnBhcmVudC5kYXRhID09PSBcIm5lc3RlZFwiKSAmJiBhLnB1c2goZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGE7XG4gIH07XG5cbiAgX3Byb3RvNS5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgIHRoaXMuX3IubGVuZ3RoID0gdGhpcy5kYXRhLmxlbmd0aCA9IDA7XG4gIH07XG5cbiAgX3Byb3RvNS5raWxsID0gZnVuY3Rpb24ga2lsbChyZXZlcnQsIG1hdGNoTWVkaWEpIHtcbiAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgIGlmIChyZXZlcnQpIHtcbiAgICAgIChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0d2VlbnMgPSBfdGhpczQuZ2V0VHdlZW5zKCksXG4gICAgICAgICAgICBpID0gX3RoaXM0LmRhdGEubGVuZ3RoLFxuICAgICAgICAgICAgdDtcblxuICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgLy8gRmxpcCBwbHVnaW4gdHdlZW5zIGFyZSB2ZXJ5IGRpZmZlcmVudCBpbiB0aGF0IHRoZXkgc2hvdWxkIGFjdHVhbGx5IGJlIHB1c2hlZCB0byB0aGVpciBlbmQuIFRoZSBwbHVnaW4gcmVwbGFjZXMgdGhlIHRpbWVsaW5lJ3MgLnJldmVydCgpIG1ldGhvZCB0byBkbyBleGFjdGx5IHRoYXQuIEJ1dCB3ZSBhbHNvIG5lZWQgdG8gcmVtb3ZlIGFueSBvZiB0aG9zZSBuZXN0ZWQgdHdlZW5zIGluc2lkZSB0aGUgZmxpcCB0aW1lbGluZSBzbyB0aGF0IHRoZXkgZG9uJ3QgZ2V0IGluZGl2aWR1YWxseSByZXZlcnRlZC5cbiAgICAgICAgICB0ID0gX3RoaXM0LmRhdGFbaV07XG5cbiAgICAgICAgICBpZiAodC5kYXRhID09PSBcImlzRmxpcFwiKSB7XG4gICAgICAgICAgICB0LnJldmVydCgpO1xuICAgICAgICAgICAgdC5nZXRDaGlsZHJlbih0cnVlLCB0cnVlLCBmYWxzZSkuZm9yRWFjaChmdW5jdGlvbiAodHdlZW4pIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHR3ZWVucy5zcGxpY2UodHdlZW5zLmluZGV4T2YodHdlZW4pLCAxKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSAvLyBzYXZlIGFzIGFuIG9iamVjdCBzbyB0aGF0IHdlIGNhbiBjYWNoZSB0aGUgZ2xvYmFsVGltZSBmb3IgZWFjaCB0d2VlbiB0byBvcHRpbWl6ZSBwZXJmb3JtYW5jZSBkdXJpbmcgdGhlIHNvcnRcblxuXG4gICAgICAgIHR3ZWVucy5tYXAoZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZzogdC5fZHVyIHx8IHQuX2RlbGF5IHx8IHQuX3NhdCAmJiAhdC5fc2F0LnZhcnMuaW1tZWRpYXRlUmVuZGVyID8gdC5nbG9iYWxUaW1lKDApIDogLUluZmluaXR5LFxuICAgICAgICAgICAgdDogdFxuICAgICAgICAgIH07XG4gICAgICAgIH0pLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICByZXR1cm4gYi5nIC0gYS5nIHx8IC1JbmZpbml0eTtcbiAgICAgICAgfSkuZm9yRWFjaChmdW5jdGlvbiAobykge1xuICAgICAgICAgIHJldHVybiBvLnQucmV2ZXJ0KHJldmVydCk7XG4gICAgICAgIH0pOyAvLyBub3RlOiBhbGwgb2YgdGhlIF9zdGFydEF0IHR3ZWVucyBzaG91bGQgYmUgcmV2ZXJ0ZWQgaW4gcmV2ZXJzZSBvcmRlciB0aGF0IHRoZXkgd2VyZSBjcmVhdGVkLCBhbmQgdGhleSdsbCBhbGwgaGF2ZSB0aGUgc2FtZSBnbG9iYWxUaW1lICgtMSkgc28gdGhlIFwiIHx8IC0xXCIgaW4gdGhlIHNvcnQga2VlcHMgdGhlIG9yZGVyIHByb3Blcmx5LlxuXG4gICAgICAgIGkgPSBfdGhpczQuZGF0YS5sZW5ndGg7XG5cbiAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgIC8vIG1ha2Ugc3VyZSB3ZSBsb29wIGJhY2t3YXJkcyBzbyB0aGF0LCBmb3IgZXhhbXBsZSwgU3BsaXRUZXh0cyB0aGF0IHdlcmUgY3JlYXRlZCBsYXRlciBvbiB0aGUgc2FtZSBlbGVtZW50IGdldCByZXZlcnRlZCBmaXJzdFxuICAgICAgICAgIHQgPSBfdGhpczQuZGF0YVtpXTtcblxuICAgICAgICAgIGlmICh0IGluc3RhbmNlb2YgVGltZWxpbmUpIHtcbiAgICAgICAgICAgIGlmICh0LmRhdGEgIT09IFwibmVzdGVkXCIpIHtcbiAgICAgICAgICAgICAgdC5zY3JvbGxUcmlnZ2VyICYmIHQuc2Nyb2xsVHJpZ2dlci5yZXZlcnQoKTtcbiAgICAgICAgICAgICAgdC5raWxsKCk7IC8vIGRvbid0IHJldmVydCgpIHRoZSB0aW1lbGluZSBiZWNhdXNlIHRoYXQncyBkdXBsaWNhdGluZyBlZmZvcnRzIHNpbmNlIHdlIGFscmVhZHkgcmV2ZXJ0ZWQgYWxsIHRoZSB0d2VlbnNcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgISh0IGluc3RhbmNlb2YgVHdlZW4pICYmIHQucmV2ZXJ0ICYmIHQucmV2ZXJ0KHJldmVydCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXM0Ll9yLmZvckVhY2goZnVuY3Rpb24gKGYpIHtcbiAgICAgICAgICByZXR1cm4gZihyZXZlcnQsIF90aGlzNCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIF90aGlzNC5pc1JldmVydGVkID0gdHJ1ZTtcbiAgICAgIH0pKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZGF0YS5mb3JFYWNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHJldHVybiBlLmtpbGwgJiYgZS5raWxsKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLmNsZWFyKCk7XG5cbiAgICBpZiAobWF0Y2hNZWRpYSkge1xuICAgICAgdmFyIGkgPSBfbWVkaWEubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIC8vIHByZXZpb3VzbHksIHdlIGNoZWNrZWQgX21lZGlhLmluZGV4T2YodGhpcyksIGJ1dCBzb21lIGZyYW1ld29ya3MgbGlrZSBWdWUgZW5mb3JjZSBQcm94eSBvYmplY3RzIHRoYXQgbWFrZSBpdCBpbXBvc3NpYmxlIHRvIGdldCB0aGUgcHJvcGVyIHJlc3VsdCB0aGF0IHdheSwgc28gd2UgbXVzdCB1c2UgYSB1bmlxdWUgSUQgbnVtYmVyIGluc3RlYWQuXG4gICAgICAgIF9tZWRpYVtpXS5pZCA9PT0gdGhpcy5pZCAmJiBfbWVkaWEuc3BsaWNlKGksIDEpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBfcHJvdG81LnJldmVydCA9IGZ1bmN0aW9uIHJldmVydChjb25maWcpIHtcbiAgICB0aGlzLmtpbGwoY29uZmlnIHx8IHt9KTtcbiAgfTtcblxuICByZXR1cm4gQ29udGV4dDtcbn0oKTtcblxudmFyIE1hdGNoTWVkaWEgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBNYXRjaE1lZGlhKHNjb3BlKSB7XG4gICAgdGhpcy5jb250ZXh0cyA9IFtdO1xuICAgIHRoaXMuc2NvcGUgPSBzY29wZTtcbiAgICBfY29udGV4dCAmJiBfY29udGV4dC5kYXRhLnB1c2godGhpcyk7XG4gIH1cblxuICB2YXIgX3Byb3RvNiA9IE1hdGNoTWVkaWEucHJvdG90eXBlO1xuXG4gIF9wcm90bzYuYWRkID0gZnVuY3Rpb24gYWRkKGNvbmRpdGlvbnMsIGZ1bmMsIHNjb3BlKSB7XG4gICAgX2lzT2JqZWN0KGNvbmRpdGlvbnMpIHx8IChjb25kaXRpb25zID0ge1xuICAgICAgbWF0Y2hlczogY29uZGl0aW9uc1xuICAgIH0pO1xuICAgIHZhciBjb250ZXh0ID0gbmV3IENvbnRleHQoMCwgc2NvcGUgfHwgdGhpcy5zY29wZSksXG4gICAgICAgIGNvbmQgPSBjb250ZXh0LmNvbmRpdGlvbnMgPSB7fSxcbiAgICAgICAgbXEsXG4gICAgICAgIHAsXG4gICAgICAgIGFjdGl2ZTtcbiAgICBfY29udGV4dCAmJiAhY29udGV4dC5zZWxlY3RvciAmJiAoY29udGV4dC5zZWxlY3RvciA9IF9jb250ZXh0LnNlbGVjdG9yKTsgLy8gaW4gY2FzZSBhIGNvbnRleHQgaXMgY3JlYXRlZCBpbnNpZGUgYSBjb250ZXh0LiBMaWtlIGEgZ3NhcC5tYXRjaE1lZGlhKCkgdGhhdCdzIGluc2lkZSBhIHNjb3BlZCBnc2FwLmNvbnRleHQoKVxuXG4gICAgdGhpcy5jb250ZXh0cy5wdXNoKGNvbnRleHQpO1xuICAgIGZ1bmMgPSBjb250ZXh0LmFkZChcIm9uTWF0Y2hcIiwgZnVuYyk7XG4gICAgY29udGV4dC5xdWVyaWVzID0gY29uZGl0aW9ucztcblxuICAgIGZvciAocCBpbiBjb25kaXRpb25zKSB7XG4gICAgICBpZiAocCA9PT0gXCJhbGxcIikge1xuICAgICAgICBhY3RpdmUgPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbXEgPSBfd2luLm1hdGNoTWVkaWEoY29uZGl0aW9uc1twXSk7XG5cbiAgICAgICAgaWYgKG1xKSB7XG4gICAgICAgICAgX21lZGlhLmluZGV4T2YoY29udGV4dCkgPCAwICYmIF9tZWRpYS5wdXNoKGNvbnRleHQpO1xuICAgICAgICAgIChjb25kW3BdID0gbXEubWF0Y2hlcykgJiYgKGFjdGl2ZSA9IDEpO1xuICAgICAgICAgIG1xLmFkZExpc3RlbmVyID8gbXEuYWRkTGlzdGVuZXIoX29uTWVkaWFDaGFuZ2UpIDogbXEuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCBfb25NZWRpYUNoYW5nZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBhY3RpdmUgJiYgZnVuYyhjb250ZXh0LCBmdW5jdGlvbiAoZikge1xuICAgICAgcmV0dXJuIGNvbnRleHQuYWRkKG51bGwsIGYpO1xuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9IC8vIHJlZnJlc2goKSB7XG4gIC8vIFx0bGV0IHRpbWUgPSBfbGFzdE1lZGlhVGltZSxcbiAgLy8gXHRcdG1lZGlhID0gX21lZGlhO1xuICAvLyBcdF9sYXN0TWVkaWFUaW1lID0gLTE7XG4gIC8vIFx0X21lZGlhID0gdGhpcy5jb250ZXh0cztcbiAgLy8gXHRfb25NZWRpYUNoYW5nZSgpO1xuICAvLyBcdF9sYXN0TWVkaWFUaW1lID0gdGltZTtcbiAgLy8gXHRfbWVkaWEgPSBtZWRpYTtcbiAgLy8gfVxuICA7XG5cbiAgX3Byb3RvNi5yZXZlcnQgPSBmdW5jdGlvbiByZXZlcnQoY29uZmlnKSB7XG4gICAgdGhpcy5raWxsKGNvbmZpZyB8fCB7fSk7XG4gIH07XG5cbiAgX3Byb3RvNi5raWxsID0gZnVuY3Rpb24ga2lsbChyZXZlcnQpIHtcbiAgICB0aGlzLmNvbnRleHRzLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgIHJldHVybiBjLmtpbGwocmV2ZXJ0LCB0cnVlKTtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gTWF0Y2hNZWRpYTtcbn0oKTtcbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogR1NBUFxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5cbnZhciBfZ3NhcCA9IHtcbiAgcmVnaXN0ZXJQbHVnaW46IGZ1bmN0aW9uIHJlZ2lzdGVyUGx1Z2luKCkge1xuICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgIH1cblxuICAgIGFyZ3MuZm9yRWFjaChmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgICByZXR1cm4gX2NyZWF0ZVBsdWdpbihjb25maWcpO1xuICAgIH0pO1xuICB9LFxuICB0aW1lbGluZTogZnVuY3Rpb24gdGltZWxpbmUodmFycykge1xuICAgIHJldHVybiBuZXcgVGltZWxpbmUodmFycyk7XG4gIH0sXG4gIGdldFR3ZWVuc09mOiBmdW5jdGlvbiBnZXRUd2VlbnNPZih0YXJnZXRzLCBvbmx5QWN0aXZlKSB7XG4gICAgcmV0dXJuIF9nbG9iYWxUaW1lbGluZS5nZXRUd2VlbnNPZih0YXJnZXRzLCBvbmx5QWN0aXZlKTtcbiAgfSxcbiAgZ2V0UHJvcGVydHk6IGZ1bmN0aW9uIGdldFByb3BlcnR5KHRhcmdldCwgcHJvcGVydHksIHVuaXQsIHVuY2FjaGUpIHtcbiAgICBfaXNTdHJpbmcodGFyZ2V0KSAmJiAodGFyZ2V0ID0gdG9BcnJheSh0YXJnZXQpWzBdKTsgLy9pbiBjYXNlIHNlbGVjdG9yIHRleHQgb3IgYW4gYXJyYXkgaXMgcGFzc2VkIGluXG5cbiAgICB2YXIgZ2V0dGVyID0gX2dldENhY2hlKHRhcmdldCB8fCB7fSkuZ2V0LFxuICAgICAgICBmb3JtYXQgPSB1bml0ID8gX3Bhc3NUaHJvdWdoIDogX251bWVyaWNJZlBvc3NpYmxlO1xuXG4gICAgdW5pdCA9PT0gXCJuYXRpdmVcIiAmJiAodW5pdCA9IFwiXCIpO1xuICAgIHJldHVybiAhdGFyZ2V0ID8gdGFyZ2V0IDogIXByb3BlcnR5ID8gZnVuY3Rpb24gKHByb3BlcnR5LCB1bml0LCB1bmNhY2hlKSB7XG4gICAgICByZXR1cm4gZm9ybWF0KChfcGx1Z2luc1twcm9wZXJ0eV0gJiYgX3BsdWdpbnNbcHJvcGVydHldLmdldCB8fCBnZXR0ZXIpKHRhcmdldCwgcHJvcGVydHksIHVuaXQsIHVuY2FjaGUpKTtcbiAgICB9IDogZm9ybWF0KChfcGx1Z2luc1twcm9wZXJ0eV0gJiYgX3BsdWdpbnNbcHJvcGVydHldLmdldCB8fCBnZXR0ZXIpKHRhcmdldCwgcHJvcGVydHksIHVuaXQsIHVuY2FjaGUpKTtcbiAgfSxcbiAgcXVpY2tTZXR0ZXI6IGZ1bmN0aW9uIHF1aWNrU2V0dGVyKHRhcmdldCwgcHJvcGVydHksIHVuaXQpIHtcbiAgICB0YXJnZXQgPSB0b0FycmF5KHRhcmdldCk7XG5cbiAgICBpZiAodGFyZ2V0Lmxlbmd0aCA+IDEpIHtcbiAgICAgIHZhciBzZXR0ZXJzID0gdGFyZ2V0Lm1hcChmdW5jdGlvbiAodCkge1xuICAgICAgICByZXR1cm4gZ3NhcC5xdWlja1NldHRlcih0LCBwcm9wZXJ0eSwgdW5pdCk7XG4gICAgICB9KSxcbiAgICAgICAgICBsID0gc2V0dGVycy5sZW5ndGg7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBpID0gbDtcblxuICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgc2V0dGVyc1tpXSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgdGFyZ2V0ID0gdGFyZ2V0WzBdIHx8IHt9O1xuXG4gICAgdmFyIFBsdWdpbiA9IF9wbHVnaW5zW3Byb3BlcnR5XSxcbiAgICAgICAgY2FjaGUgPSBfZ2V0Q2FjaGUodGFyZ2V0KSxcbiAgICAgICAgcCA9IGNhY2hlLmhhcm5lc3MgJiYgKGNhY2hlLmhhcm5lc3MuYWxpYXNlcyB8fCB7fSlbcHJvcGVydHldIHx8IHByb3BlcnR5LFxuICAgICAgICAvLyBpbiBjYXNlIGl0J3MgYW4gYWxpYXMsIGxpa2UgXCJyb3RhdGVcIiBmb3IgXCJyb3RhdGlvblwiLlxuICAgIHNldHRlciA9IFBsdWdpbiA/IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgdmFyIHAgPSBuZXcgUGx1Z2luKCk7XG4gICAgICBfcXVpY2tUd2Vlbi5fcHQgPSAwO1xuICAgICAgcC5pbml0KHRhcmdldCwgdW5pdCA/IHZhbHVlICsgdW5pdCA6IHZhbHVlLCBfcXVpY2tUd2VlbiwgMCwgW3RhcmdldF0pO1xuICAgICAgcC5yZW5kZXIoMSwgcCk7XG4gICAgICBfcXVpY2tUd2Vlbi5fcHQgJiYgX3JlbmRlclByb3BUd2VlbnMoMSwgX3F1aWNrVHdlZW4pO1xuICAgIH0gOiBjYWNoZS5zZXQodGFyZ2V0LCBwKTtcblxuICAgIHJldHVybiBQbHVnaW4gPyBzZXR0ZXIgOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiBzZXR0ZXIodGFyZ2V0LCBwLCB1bml0ID8gdmFsdWUgKyB1bml0IDogdmFsdWUsIGNhY2hlLCAxKTtcbiAgICB9O1xuICB9LFxuICBxdWlja1RvOiBmdW5jdGlvbiBxdWlja1RvKHRhcmdldCwgcHJvcGVydHksIHZhcnMpIHtcbiAgICB2YXIgX21lcmdlMjtcblxuICAgIHZhciB0d2VlbiA9IGdzYXAudG8odGFyZ2V0LCBfbWVyZ2UoKF9tZXJnZTIgPSB7fSwgX21lcmdlMltwcm9wZXJ0eV0gPSBcIis9MC4xXCIsIF9tZXJnZTIucGF1c2VkID0gdHJ1ZSwgX21lcmdlMiksIHZhcnMgfHwge30pKSxcbiAgICAgICAgZnVuYyA9IGZ1bmN0aW9uIGZ1bmModmFsdWUsIHN0YXJ0LCBzdGFydElzUmVsYXRpdmUpIHtcbiAgICAgIHJldHVybiB0d2Vlbi5yZXNldFRvKHByb3BlcnR5LCB2YWx1ZSwgc3RhcnQsIHN0YXJ0SXNSZWxhdGl2ZSk7XG4gICAgfTtcblxuICAgIGZ1bmMudHdlZW4gPSB0d2VlbjtcbiAgICByZXR1cm4gZnVuYztcbiAgfSxcbiAgaXNUd2VlbmluZzogZnVuY3Rpb24gaXNUd2VlbmluZyh0YXJnZXRzKSB7XG4gICAgcmV0dXJuIF9nbG9iYWxUaW1lbGluZS5nZXRUd2VlbnNPZih0YXJnZXRzLCB0cnVlKS5sZW5ndGggPiAwO1xuICB9LFxuICBkZWZhdWx0czogZnVuY3Rpb24gZGVmYXVsdHModmFsdWUpIHtcbiAgICB2YWx1ZSAmJiB2YWx1ZS5lYXNlICYmICh2YWx1ZS5lYXNlID0gX3BhcnNlRWFzZSh2YWx1ZS5lYXNlLCBfZGVmYXVsdHMuZWFzZSkpO1xuICAgIHJldHVybiBfbWVyZ2VEZWVwKF9kZWZhdWx0cywgdmFsdWUgfHwge30pO1xuICB9LFxuICBjb25maWc6IGZ1bmN0aW9uIGNvbmZpZyh2YWx1ZSkge1xuICAgIHJldHVybiBfbWVyZ2VEZWVwKF9jb25maWcsIHZhbHVlIHx8IHt9KTtcbiAgfSxcbiAgcmVnaXN0ZXJFZmZlY3Q6IGZ1bmN0aW9uIHJlZ2lzdGVyRWZmZWN0KF9yZWYzKSB7XG4gICAgdmFyIG5hbWUgPSBfcmVmMy5uYW1lLFxuICAgICAgICBlZmZlY3QgPSBfcmVmMy5lZmZlY3QsXG4gICAgICAgIHBsdWdpbnMgPSBfcmVmMy5wbHVnaW5zLFxuICAgICAgICBkZWZhdWx0cyA9IF9yZWYzLmRlZmF1bHRzLFxuICAgICAgICBleHRlbmRUaW1lbGluZSA9IF9yZWYzLmV4dGVuZFRpbWVsaW5lO1xuICAgIChwbHVnaW5zIHx8IFwiXCIpLnNwbGl0KFwiLFwiKS5mb3JFYWNoKGZ1bmN0aW9uIChwbHVnaW5OYW1lKSB7XG4gICAgICByZXR1cm4gcGx1Z2luTmFtZSAmJiAhX3BsdWdpbnNbcGx1Z2luTmFtZV0gJiYgIV9nbG9iYWxzW3BsdWdpbk5hbWVdICYmIF93YXJuKG5hbWUgKyBcIiBlZmZlY3QgcmVxdWlyZXMgXCIgKyBwbHVnaW5OYW1lICsgXCIgcGx1Z2luLlwiKTtcbiAgICB9KTtcblxuICAgIF9lZmZlY3RzW25hbWVdID0gZnVuY3Rpb24gKHRhcmdldHMsIHZhcnMsIHRsKSB7XG4gICAgICByZXR1cm4gZWZmZWN0KHRvQXJyYXkodGFyZ2V0cyksIF9zZXREZWZhdWx0cyh2YXJzIHx8IHt9LCBkZWZhdWx0cyksIHRsKTtcbiAgICB9O1xuXG4gICAgaWYgKGV4dGVuZFRpbWVsaW5lKSB7XG4gICAgICBUaW1lbGluZS5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbiAodGFyZ2V0cywgdmFycywgcG9zaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkKF9lZmZlY3RzW25hbWVdKHRhcmdldHMsIF9pc09iamVjdCh2YXJzKSA/IHZhcnMgOiAocG9zaXRpb24gPSB2YXJzKSAmJiB7fSwgdGhpcyksIHBvc2l0aW9uKTtcbiAgICAgIH07XG4gICAgfVxuICB9LFxuICByZWdpc3RlckVhc2U6IGZ1bmN0aW9uIHJlZ2lzdGVyRWFzZShuYW1lLCBlYXNlKSB7XG4gICAgX2Vhc2VNYXBbbmFtZV0gPSBfcGFyc2VFYXNlKGVhc2UpO1xuICB9LFxuICBwYXJzZUVhc2U6IGZ1bmN0aW9uIHBhcnNlRWFzZShlYXNlLCBkZWZhdWx0RWFzZSkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gX3BhcnNlRWFzZShlYXNlLCBkZWZhdWx0RWFzZSkgOiBfZWFzZU1hcDtcbiAgfSxcbiAgZ2V0QnlJZDogZnVuY3Rpb24gZ2V0QnlJZChpZCkge1xuICAgIHJldHVybiBfZ2xvYmFsVGltZWxpbmUuZ2V0QnlJZChpZCk7XG4gIH0sXG4gIGV4cG9ydFJvb3Q6IGZ1bmN0aW9uIGV4cG9ydFJvb3QodmFycywgaW5jbHVkZURlbGF5ZWRDYWxscykge1xuICAgIGlmICh2YXJzID09PSB2b2lkIDApIHtcbiAgICAgIHZhcnMgPSB7fTtcbiAgICB9XG5cbiAgICB2YXIgdGwgPSBuZXcgVGltZWxpbmUodmFycyksXG4gICAgICAgIGNoaWxkLFxuICAgICAgICBuZXh0O1xuICAgIHRsLnNtb290aENoaWxkVGltaW5nID0gX2lzTm90RmFsc2UodmFycy5zbW9vdGhDaGlsZFRpbWluZyk7XG5cbiAgICBfZ2xvYmFsVGltZWxpbmUucmVtb3ZlKHRsKTtcblxuICAgIHRsLl9kcCA9IDA7IC8vb3RoZXJ3aXNlIGl0J2xsIGdldCByZS1hY3RpdmF0ZWQgd2hlbiBhZGRpbmcgY2hpbGRyZW4gYW5kIGJlIHJlLWludHJvZHVjZWQgaW50byBfZ2xvYmFsVGltZWxpbmUncyBsaW5rZWQgbGlzdCAodGhlbiBhZGRlZCB0byBpdHNlbGYpLlxuXG4gICAgdGwuX3RpbWUgPSB0bC5fdFRpbWUgPSBfZ2xvYmFsVGltZWxpbmUuX3RpbWU7XG4gICAgY2hpbGQgPSBfZ2xvYmFsVGltZWxpbmUuX2ZpcnN0O1xuXG4gICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICBuZXh0ID0gY2hpbGQuX25leHQ7XG5cbiAgICAgIGlmIChpbmNsdWRlRGVsYXllZENhbGxzIHx8ICEoIWNoaWxkLl9kdXIgJiYgY2hpbGQgaW5zdGFuY2VvZiBUd2VlbiAmJiBjaGlsZC52YXJzLm9uQ29tcGxldGUgPT09IGNoaWxkLl90YXJnZXRzWzBdKSkge1xuICAgICAgICBfYWRkVG9UaW1lbGluZSh0bCwgY2hpbGQsIGNoaWxkLl9zdGFydCAtIGNoaWxkLl9kZWxheSk7XG4gICAgICB9XG5cbiAgICAgIGNoaWxkID0gbmV4dDtcbiAgICB9XG5cbiAgICBfYWRkVG9UaW1lbGluZShfZ2xvYmFsVGltZWxpbmUsIHRsLCAwKTtcblxuICAgIHJldHVybiB0bDtcbiAgfSxcbiAgY29udGV4dDogZnVuY3Rpb24gY29udGV4dChmdW5jLCBzY29wZSkge1xuICAgIHJldHVybiBmdW5jID8gbmV3IENvbnRleHQoZnVuYywgc2NvcGUpIDogX2NvbnRleHQ7XG4gIH0sXG4gIG1hdGNoTWVkaWE6IGZ1bmN0aW9uIG1hdGNoTWVkaWEoc2NvcGUpIHtcbiAgICByZXR1cm4gbmV3IE1hdGNoTWVkaWEoc2NvcGUpO1xuICB9LFxuICBtYXRjaE1lZGlhUmVmcmVzaDogZnVuY3Rpb24gbWF0Y2hNZWRpYVJlZnJlc2goKSB7XG4gICAgcmV0dXJuIF9tZWRpYS5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7XG4gICAgICB2YXIgY29uZCA9IGMuY29uZGl0aW9ucyxcbiAgICAgICAgICBmb3VuZCxcbiAgICAgICAgICBwO1xuXG4gICAgICBmb3IgKHAgaW4gY29uZCkge1xuICAgICAgICBpZiAoY29uZFtwXSkge1xuICAgICAgICAgIGNvbmRbcF0gPSBmYWxzZTtcbiAgICAgICAgICBmb3VuZCA9IDE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZm91bmQgJiYgYy5yZXZlcnQoKTtcbiAgICB9KSB8fCBfb25NZWRpYUNoYW5nZSgpO1xuICB9LFxuICBhZGRFdmVudExpc3RlbmVyOiBmdW5jdGlvbiBhZGRFdmVudExpc3RlbmVyKHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGEgPSBfbGlzdGVuZXJzW3R5cGVdIHx8IChfbGlzdGVuZXJzW3R5cGVdID0gW10pO1xuICAgIH5hLmluZGV4T2YoY2FsbGJhY2spIHx8IGEucHVzaChjYWxsYmFjayk7XG4gIH0sXG4gIHJlbW92ZUV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgY2FsbGJhY2spIHtcbiAgICB2YXIgYSA9IF9saXN0ZW5lcnNbdHlwZV0sXG4gICAgICAgIGkgPSBhICYmIGEuaW5kZXhPZihjYWxsYmFjayk7XG4gICAgaSA+PSAwICYmIGEuc3BsaWNlKGksIDEpO1xuICB9LFxuICB1dGlsczoge1xuICAgIHdyYXA6IHdyYXAsXG4gICAgd3JhcFlveW86IHdyYXBZb3lvLFxuICAgIGRpc3RyaWJ1dGU6IGRpc3RyaWJ1dGUsXG4gICAgcmFuZG9tOiByYW5kb20sXG4gICAgc25hcDogc25hcCxcbiAgICBub3JtYWxpemU6IG5vcm1hbGl6ZSxcbiAgICBnZXRVbml0OiBnZXRVbml0LFxuICAgIGNsYW1wOiBjbGFtcCxcbiAgICBzcGxpdENvbG9yOiBzcGxpdENvbG9yLFxuICAgIHRvQXJyYXk6IHRvQXJyYXksXG4gICAgc2VsZWN0b3I6IHNlbGVjdG9yLFxuICAgIG1hcFJhbmdlOiBtYXBSYW5nZSxcbiAgICBwaXBlOiBwaXBlLFxuICAgIHVuaXRpemU6IHVuaXRpemUsXG4gICAgaW50ZXJwb2xhdGU6IGludGVycG9sYXRlLFxuICAgIHNodWZmbGU6IHNodWZmbGVcbiAgfSxcbiAgaW5zdGFsbDogX2luc3RhbGwsXG4gIGVmZmVjdHM6IF9lZmZlY3RzLFxuICB0aWNrZXI6IF90aWNrZXIsXG4gIHVwZGF0ZVJvb3Q6IFRpbWVsaW5lLnVwZGF0ZVJvb3QsXG4gIHBsdWdpbnM6IF9wbHVnaW5zLFxuICBnbG9iYWxUaW1lbGluZTogX2dsb2JhbFRpbWVsaW5lLFxuICBjb3JlOiB7XG4gICAgUHJvcFR3ZWVuOiBQcm9wVHdlZW4sXG4gICAgZ2xvYmFsczogX2FkZEdsb2JhbCxcbiAgICBUd2VlbjogVHdlZW4sXG4gICAgVGltZWxpbmU6IFRpbWVsaW5lLFxuICAgIEFuaW1hdGlvbjogQW5pbWF0aW9uLFxuICAgIGdldENhY2hlOiBfZ2V0Q2FjaGUsXG4gICAgX3JlbW92ZUxpbmtlZExpc3RJdGVtOiBfcmVtb3ZlTGlua2VkTGlzdEl0ZW0sXG4gICAgcmV2ZXJ0aW5nOiBmdW5jdGlvbiByZXZlcnRpbmcoKSB7XG4gICAgICByZXR1cm4gX3JldmVydGluZztcbiAgICB9LFxuICAgIGNvbnRleHQ6IGZ1bmN0aW9uIGNvbnRleHQodG9BZGQpIHtcbiAgICAgIGlmICh0b0FkZCAmJiBfY29udGV4dCkge1xuICAgICAgICBfY29udGV4dC5kYXRhLnB1c2godG9BZGQpO1xuXG4gICAgICAgIHRvQWRkLl9jdHggPSBfY29udGV4dDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9jb250ZXh0O1xuICAgIH0sXG4gICAgc3VwcHJlc3NPdmVyd3JpdGVzOiBmdW5jdGlvbiBzdXBwcmVzc092ZXJ3cml0ZXModmFsdWUpIHtcbiAgICAgIHJldHVybiBfc3VwcHJlc3NPdmVyd3JpdGVzID0gdmFsdWU7XG4gICAgfVxuICB9XG59O1xuXG5fZm9yRWFjaE5hbWUoXCJ0byxmcm9tLGZyb21UbyxkZWxheWVkQ2FsbCxzZXQsa2lsbFR3ZWVuc09mXCIsIGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBfZ3NhcFtuYW1lXSA9IFR3ZWVuW25hbWVdO1xufSk7XG5cbl90aWNrZXIuYWRkKFRpbWVsaW5lLnVwZGF0ZVJvb3QpO1xuXG5fcXVpY2tUd2VlbiA9IF9nc2FwLnRvKHt9LCB7XG4gIGR1cmF0aW9uOiAwXG59KTsgLy8gLS0tLSBFWFRSQSBQTFVHSU5TIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbnZhciBfZ2V0UGx1Z2luUHJvcFR3ZWVuID0gZnVuY3Rpb24gX2dldFBsdWdpblByb3BUd2VlbihwbHVnaW4sIHByb3ApIHtcbiAgdmFyIHB0ID0gcGx1Z2luLl9wdDtcblxuICB3aGlsZSAocHQgJiYgcHQucCAhPT0gcHJvcCAmJiBwdC5vcCAhPT0gcHJvcCAmJiBwdC5mcCAhPT0gcHJvcCkge1xuICAgIHB0ID0gcHQuX25leHQ7XG4gIH1cblxuICByZXR1cm4gcHQ7XG59LFxuICAgIF9hZGRNb2RpZmllcnMgPSBmdW5jdGlvbiBfYWRkTW9kaWZpZXJzKHR3ZWVuLCBtb2RpZmllcnMpIHtcbiAgdmFyIHRhcmdldHMgPSB0d2Vlbi5fdGFyZ2V0cyxcbiAgICAgIHAsXG4gICAgICBpLFxuICAgICAgcHQ7XG5cbiAgZm9yIChwIGluIG1vZGlmaWVycykge1xuICAgIGkgPSB0YXJnZXRzLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHB0ID0gdHdlZW4uX3B0TG9va3VwW2ldW3BdO1xuXG4gICAgICBpZiAocHQgJiYgKHB0ID0gcHQuZCkpIHtcbiAgICAgICAgaWYgKHB0Ll9wdCkge1xuICAgICAgICAgIC8vIGlzIGEgcGx1Z2luXG4gICAgICAgICAgcHQgPSBfZ2V0UGx1Z2luUHJvcFR3ZWVuKHB0LCBwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB0ICYmIHB0Lm1vZGlmaWVyICYmIHB0Lm1vZGlmaWVyKG1vZGlmaWVyc1twXSwgdHdlZW4sIHRhcmdldHNbaV0sIHApO1xuICAgICAgfVxuICAgIH1cbiAgfVxufSxcbiAgICBfYnVpbGRNb2RpZmllclBsdWdpbiA9IGZ1bmN0aW9uIF9idWlsZE1vZGlmaWVyUGx1Z2luKG5hbWUsIG1vZGlmaWVyKSB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogbmFtZSxcbiAgICByYXdWYXJzOiAxLFxuICAgIC8vZG9uJ3QgcHJlLXByb2Nlc3MgZnVuY3Rpb24tYmFzZWQgdmFsdWVzIG9yIFwicmFuZG9tKClcIiBzdHJpbmdzLlxuICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQodGFyZ2V0LCB2YXJzLCB0d2Vlbikge1xuICAgICAgdHdlZW4uX29uSW5pdCA9IGZ1bmN0aW9uICh0d2Vlbikge1xuICAgICAgICB2YXIgdGVtcCwgcDtcblxuICAgICAgICBpZiAoX2lzU3RyaW5nKHZhcnMpKSB7XG4gICAgICAgICAgdGVtcCA9IHt9O1xuXG4gICAgICAgICAgX2ZvckVhY2hOYW1lKHZhcnMsIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gdGVtcFtuYW1lXSA9IDE7XG4gICAgICAgICAgfSk7IC8vaWYgdGhlIHVzZXIgcGFzc2VzIGluIGEgY29tbWEtZGVsaW1pdGVkIGxpc3Qgb2YgcHJvcGVydHkgbmFtZXMgdG8gcm91bmRQcm9wcywgbGlrZSBcIngseVwiLCB3ZSByb3VuZCB0byB3aG9sZSBudW1iZXJzLlxuXG5cbiAgICAgICAgICB2YXJzID0gdGVtcDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtb2RpZmllcikge1xuICAgICAgICAgIHRlbXAgPSB7fTtcblxuICAgICAgICAgIGZvciAocCBpbiB2YXJzKSB7XG4gICAgICAgICAgICB0ZW1wW3BdID0gbW9kaWZpZXIodmFyc1twXSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFycyA9IHRlbXA7XG4gICAgICAgIH1cblxuICAgICAgICBfYWRkTW9kaWZpZXJzKHR3ZWVuLCB2YXJzKTtcbiAgICAgIH07XG4gICAgfVxuICB9O1xufTsgLy9yZWdpc3RlciBjb3JlIHBsdWdpbnNcblxuXG5leHBvcnQgdmFyIGdzYXAgPSBfZ3NhcC5yZWdpc3RlclBsdWdpbih7XG4gIG5hbWU6IFwiYXR0clwiLFxuICBpbml0OiBmdW5jdGlvbiBpbml0KHRhcmdldCwgdmFycywgdHdlZW4sIGluZGV4LCB0YXJnZXRzKSB7XG4gICAgdmFyIHAsIHB0LCB2O1xuICAgIHRoaXMudHdlZW4gPSB0d2VlbjtcblxuICAgIGZvciAocCBpbiB2YXJzKSB7XG4gICAgICB2ID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShwKSB8fCBcIlwiO1xuICAgICAgcHQgPSB0aGlzLmFkZCh0YXJnZXQsIFwic2V0QXR0cmlidXRlXCIsICh2IHx8IDApICsgXCJcIiwgdmFyc1twXSwgaW5kZXgsIHRhcmdldHMsIDAsIDAsIHApO1xuICAgICAgcHQub3AgPSBwO1xuICAgICAgcHQuYiA9IHY7IC8vIHJlY29yZCB0aGUgYmVnaW5uaW5nIHZhbHVlIHNvIHdlIGNhbiByZXZlcnQoKVxuXG4gICAgICB0aGlzLl9wcm9wcy5wdXNoKHApO1xuICAgIH1cbiAgfSxcbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIocmF0aW8sIGRhdGEpIHtcbiAgICB2YXIgcHQgPSBkYXRhLl9wdDtcblxuICAgIHdoaWxlIChwdCkge1xuICAgICAgX3JldmVydGluZyA/IHB0LnNldChwdC50LCBwdC5wLCBwdC5iLCBwdCkgOiBwdC5yKHJhdGlvLCBwdC5kKTsgLy8gaWYgcmV2ZXJ0aW5nLCBnbyBiYWNrIHRvIHRoZSBvcmlnaW5hbCAocHQuYilcblxuICAgICAgcHQgPSBwdC5fbmV4dDtcbiAgICB9XG4gIH1cbn0sIHtcbiAgbmFtZTogXCJlbmRBcnJheVwiLFxuICBpbml0OiBmdW5jdGlvbiBpbml0KHRhcmdldCwgdmFsdWUpIHtcbiAgICB2YXIgaSA9IHZhbHVlLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHRoaXMuYWRkKHRhcmdldCwgaSwgdGFyZ2V0W2ldIHx8IDAsIHZhbHVlW2ldLCAwLCAwLCAwLCAwLCAwLCAxKTtcbiAgICB9XG4gIH1cbn0sIF9idWlsZE1vZGlmaWVyUGx1Z2luKFwicm91bmRQcm9wc1wiLCBfcm91bmRNb2RpZmllciksIF9idWlsZE1vZGlmaWVyUGx1Z2luKFwibW9kaWZpZXJzXCIpLCBfYnVpbGRNb2RpZmllclBsdWdpbihcInNuYXBcIiwgc25hcCkpIHx8IF9nc2FwOyAvL3RvIHByZXZlbnQgdGhlIGNvcmUgcGx1Z2lucyBmcm9tIGJlaW5nIGRyb3BwZWQgdmlhIGFnZ3Jlc3NpdmUgdHJlZSBzaGFraW5nLCB3ZSBtdXN0IGluY2x1ZGUgdGhlbSBpbiB0aGUgdmFyaWFibGUgZGVjbGFyYXRpb24gaW4gdGhpcyB3YXkuXG5cblR3ZWVuLnZlcnNpb24gPSBUaW1lbGluZS52ZXJzaW9uID0gZ3NhcC52ZXJzaW9uID0gXCIzLjEyLjVcIjtcbl9jb3JlUmVhZHkgPSAxO1xuX3dpbmRvd0V4aXN0cygpICYmIF93YWtlKCk7XG52YXIgUG93ZXIwID0gX2Vhc2VNYXAuUG93ZXIwLFxuICAgIFBvd2VyMSA9IF9lYXNlTWFwLlBvd2VyMSxcbiAgICBQb3dlcjIgPSBfZWFzZU1hcC5Qb3dlcjIsXG4gICAgUG93ZXIzID0gX2Vhc2VNYXAuUG93ZXIzLFxuICAgIFBvd2VyNCA9IF9lYXNlTWFwLlBvd2VyNCxcbiAgICBMaW5lYXIgPSBfZWFzZU1hcC5MaW5lYXIsXG4gICAgUXVhZCA9IF9lYXNlTWFwLlF1YWQsXG4gICAgQ3ViaWMgPSBfZWFzZU1hcC5DdWJpYyxcbiAgICBRdWFydCA9IF9lYXNlTWFwLlF1YXJ0LFxuICAgIFF1aW50ID0gX2Vhc2VNYXAuUXVpbnQsXG4gICAgU3Ryb25nID0gX2Vhc2VNYXAuU3Ryb25nLFxuICAgIEVsYXN0aWMgPSBfZWFzZU1hcC5FbGFzdGljLFxuICAgIEJhY2sgPSBfZWFzZU1hcC5CYWNrLFxuICAgIFN0ZXBwZWRFYXNlID0gX2Vhc2VNYXAuU3RlcHBlZEVhc2UsXG4gICAgQm91bmNlID0gX2Vhc2VNYXAuQm91bmNlLFxuICAgIFNpbmUgPSBfZWFzZU1hcC5TaW5lLFxuICAgIEV4cG8gPSBfZWFzZU1hcC5FeHBvLFxuICAgIENpcmMgPSBfZWFzZU1hcC5DaXJjO1xuZXhwb3J0IHsgUG93ZXIwLCBQb3dlcjEsIFBvd2VyMiwgUG93ZXIzLCBQb3dlcjQsIExpbmVhciwgUXVhZCwgQ3ViaWMsIFF1YXJ0LCBRdWludCwgU3Ryb25nLCBFbGFzdGljLCBCYWNrLCBTdGVwcGVkRWFzZSwgQm91bmNlLCBTaW5lLCBFeHBvLCBDaXJjIH07XG5leHBvcnQgeyBUd2VlbiBhcyBUd2Vlbk1heCwgVHdlZW4gYXMgVHdlZW5MaXRlLCBUaW1lbGluZSBhcyBUaW1lbGluZU1heCwgVGltZWxpbmUgYXMgVGltZWxpbmVMaXRlLCBnc2FwIGFzIGRlZmF1bHQsIHdyYXAsIHdyYXBZb3lvLCBkaXN0cmlidXRlLCByYW5kb20sIHNuYXAsIG5vcm1hbGl6ZSwgZ2V0VW5pdCwgY2xhbXAsIHNwbGl0Q29sb3IsIHRvQXJyYXksIHNlbGVjdG9yLCBtYXBSYW5nZSwgcGlwZSwgdW5pdGl6ZSwgaW50ZXJwb2xhdGUsIHNodWZmbGUgfTsgLy9leHBvcnQgc29tZSBpbnRlcm5hbCBtZXRob2RzL29yb2plY3RzIGZvciB1c2UgaW4gQ1NTUGx1Z2luIHNvIHRoYXQgd2UgY2FuIGV4dGVybmFsaXplIHRoYXQgZmlsZSBhbmQgYWxsb3cgY3VzdG9tIGJ1aWxkcyB0aGF0IGV4Y2x1ZGUgaXQuXG5cbmV4cG9ydCB7IF9nZXRQcm9wZXJ0eSwgX251bUV4cCwgX251bVdpdGhVbml0RXhwLCBfaXNTdHJpbmcsIF9pc1VuZGVmaW5lZCwgX3JlbmRlckNvbXBsZXhTdHJpbmcsIF9yZWxFeHAsIF9zZXREZWZhdWx0cywgX3JlbW92ZUxpbmtlZExpc3RJdGVtLCBfZm9yRWFjaE5hbWUsIF9zb3J0UHJvcFR3ZWVuc0J5UHJpb3JpdHksIF9jb2xvclN0cmluZ0ZpbHRlciwgX3JlcGxhY2VSYW5kb20sIF9jaGVja1BsdWdpbiwgX3BsdWdpbnMsIF90aWNrZXIsIF9jb25maWcsIF9yb3VuZE1vZGlmaWVyLCBfcm91bmQsIF9taXNzaW5nUGx1Z2luLCBfZ2V0U2V0dGVyLCBfZ2V0Q2FjaGUsIF9jb2xvckV4cCwgX3BhcnNlUmVsYXRpdmUgfTsiLCJpbXBvcnQgeyBnc2FwLCBQb3dlcjAsIFBvd2VyMSwgUG93ZXIyLCBQb3dlcjMsIFBvd2VyNCwgTGluZWFyLCBRdWFkLCBDdWJpYywgUXVhcnQsIFF1aW50LCBTdHJvbmcsIEVsYXN0aWMsIEJhY2ssIFN0ZXBwZWRFYXNlLCBCb3VuY2UsIFNpbmUsIEV4cG8sIENpcmMsIFR3ZWVuTGl0ZSwgVGltZWxpbmVMaXRlLCBUaW1lbGluZU1heCB9IGZyb20gXCIuL2dzYXAtY29yZS5qc1wiO1xuaW1wb3J0IHsgQ1NTUGx1Z2luIH0gZnJvbSBcIi4vQ1NTUGx1Z2luLmpzXCI7XG52YXIgZ3NhcFdpdGhDU1MgPSBnc2FwLnJlZ2lzdGVyUGx1Z2luKENTU1BsdWdpbikgfHwgZ3NhcCxcbiAgICAvLyB0byBwcm90ZWN0IGZyb20gdHJlZSBzaGFraW5nXG5Ud2Vlbk1heFdpdGhDU1MgPSBnc2FwV2l0aENTUy5jb3JlLlR3ZWVuO1xuZXhwb3J0IHsgZ3NhcFdpdGhDU1MgYXMgZ3NhcCwgZ3NhcFdpdGhDU1MgYXMgZGVmYXVsdCwgQ1NTUGx1Z2luLCBUd2Vlbk1heFdpdGhDU1MgYXMgVHdlZW5NYXgsIFR3ZWVuTGl0ZSwgVGltZWxpbmVNYXgsIFRpbWVsaW5lTGl0ZSwgUG93ZXIwLCBQb3dlcjEsIFBvd2VyMiwgUG93ZXIzLCBQb3dlcjQsIExpbmVhciwgUXVhZCwgQ3ViaWMsIFF1YXJ0LCBRdWludCwgU3Ryb25nLCBFbGFzdGljLCBCYWNrLCBTdGVwcGVkRWFzZSwgQm91bmNlLCBTaW5lLCBFeHBvLCBDaXJjIH07IiwiLyogbG9jb21vdGl2ZS1zY3JvbGwgdjQuMS4zIHwgTUlUIExpY2Vuc2UgfCBodHRwczovL2dpdGh1Yi5jb20vbG9jb21vdGl2ZW10bC9sb2NvbW90aXZlLXNjcm9sbCAqL1xuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgcmV0dXJuIENvbnN0cnVjdG9yO1xufVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn1cblxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTtcblxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpO1xuICAgIGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHtcbiAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlO1xuICAgIH0pO1xuICAgIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTtcbiAgfVxuXG4gIHJldHVybiBrZXlzO1xufVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkMih0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTtcblxuICAgIGlmIChpICUgMikge1xuICAgICAgb3duS2V5cyhPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7XG4gIH1cblxuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9XG4gIH0pO1xuICBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTtcbn1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcbiAgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcbiAgICByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pO1xuICB9O1xuICByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pO1xufVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgICBvLl9fcHJvdG9fXyA9IHA7XG4gICAgcmV0dXJuIG87XG4gIH07XG5cbiAgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTtcbn1cblxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHtcbiAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlO1xuICBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlO1xuICBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlO1xuXG4gIHRyeSB7XG4gICAgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHtcbiAgaWYgKHNlbGYgPT09IHZvaWQgMCkge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfVxuXG4gIHJldHVybiBzZWxmO1xufVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gIGlmIChjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkge1xuICAgIHJldHVybiBjYWxsO1xuICB9XG5cbiAgcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7XG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7XG4gIHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpO1xuXG4gIHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHtcbiAgICB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksXG4gICAgICAgIHJlc3VsdDtcblxuICAgIGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7XG4gICAgICB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yO1xuXG4gICAgICByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBfc3VwZXJQcm9wQmFzZShvYmplY3QsIHByb3BlcnR5KSB7XG4gIHdoaWxlICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpKSB7XG4gICAgb2JqZWN0ID0gX2dldFByb3RvdHlwZU9mKG9iamVjdCk7XG4gICAgaWYgKG9iamVjdCA9PT0gbnVsbCkgYnJlYWs7XG4gIH1cblxuICByZXR1cm4gb2JqZWN0O1xufVxuXG5mdW5jdGlvbiBfZ2V0KHRhcmdldCwgcHJvcGVydHksIHJlY2VpdmVyKSB7XG4gIGlmICh0eXBlb2YgUmVmbGVjdCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBSZWZsZWN0LmdldCkge1xuICAgIF9nZXQgPSBSZWZsZWN0LmdldDtcbiAgfSBlbHNlIHtcbiAgICBfZ2V0ID0gZnVuY3Rpb24gX2dldCh0YXJnZXQsIHByb3BlcnR5LCByZWNlaXZlcikge1xuICAgICAgdmFyIGJhc2UgPSBfc3VwZXJQcm9wQmFzZSh0YXJnZXQsIHByb3BlcnR5KTtcblxuICAgICAgaWYgKCFiYXNlKSByZXR1cm47XG4gICAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYmFzZSwgcHJvcGVydHkpO1xuXG4gICAgICBpZiAoZGVzYy5nZXQpIHtcbiAgICAgICAgcmV0dXJuIGRlc2MuZ2V0LmNhbGwocmVjZWl2ZXIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZGVzYy52YWx1ZTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIF9nZXQodGFyZ2V0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIgfHwgdGFyZ2V0KTtcbn1cblxuZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7XG4gIHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7XG59XG5cbmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHtcbiAgcmV0dXJuIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfbm9uSXRlcmFibGVTcHJlYWQoKTtcbn1cblxuZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkoYXJyKTtcbn1cblxuZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyO1xufVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHtcbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSkgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7XG59XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHtcbiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwidW5kZWZpbmVkXCIgfHwgIShTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpKSByZXR1cm47XG4gIHZhciBfYXJyID0gW107XG4gIHZhciBfbiA9IHRydWU7XG4gIHZhciBfZCA9IGZhbHNlO1xuICB2YXIgX2UgPSB1bmRlZmluZWQ7XG5cbiAgdHJ5IHtcbiAgICBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7XG4gICAgICBfYXJyLnB1c2goX3MudmFsdWUpO1xuXG4gICAgICBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBfZCA9IHRydWU7XG4gICAgX2UgPSBlcnI7XG4gIH0gZmluYWxseSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaWYgKF9kKSB0aHJvdyBfZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gX2Fycjtcbn1cblxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikge1xuICBpZiAoIW8pIHJldHVybjtcbiAgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbiAgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpO1xuICBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lO1xuICBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTtcbiAgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xufVxuXG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikge1xuICBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDtcblxuICBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIGFycjJbaV0gPSBhcnJbaV07XG5cbiAgcmV0dXJuIGFycjI7XG59XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59XG5cbnZhciBkZWZhdWx0cyA9IHtcbiAgZWw6IGRvY3VtZW50LFxuICBuYW1lOiAnc2Nyb2xsJyxcbiAgb2Zmc2V0OiBbMCwgMF0sXG4gIHJlcGVhdDogZmFsc2UsXG4gIHNtb290aDogZmFsc2UsXG4gIGluaXRQb3NpdGlvbjoge1xuICAgIHg6IDAsXG4gICAgeTogMFxuICB9LFxuICBkaXJlY3Rpb246ICd2ZXJ0aWNhbCcsXG4gIGdlc3R1cmVEaXJlY3Rpb246ICd2ZXJ0aWNhbCcsXG4gIHJlbG9hZE9uQ29udGV4dENoYW5nZTogZmFsc2UsXG4gIGxlcnA6IDAuMSxcbiAgXCJjbGFzc1wiOiAnaXMtaW52aWV3JyxcbiAgc2Nyb2xsYmFyQ29udGFpbmVyOiBmYWxzZSxcbiAgc2Nyb2xsYmFyQ2xhc3M6ICdjLXNjcm9sbGJhcicsXG4gIHNjcm9sbGluZ0NsYXNzOiAnaGFzLXNjcm9sbC1zY3JvbGxpbmcnLFxuICBkcmFnZ2luZ0NsYXNzOiAnaGFzLXNjcm9sbC1kcmFnZ2luZycsXG4gIHNtb290aENsYXNzOiAnaGFzLXNjcm9sbC1zbW9vdGgnLFxuICBpbml0Q2xhc3M6ICdoYXMtc2Nyb2xsLWluaXQnLFxuICBnZXRTcGVlZDogZmFsc2UsXG4gIGdldERpcmVjdGlvbjogZmFsc2UsXG4gIHNjcm9sbEZyb21Bbnl3aGVyZTogZmFsc2UsXG4gIG11bHRpcGxpZXI6IDEsXG4gIGZpcmVmb3hNdWx0aXBsaWVyOiA1MCxcbiAgdG91Y2hNdWx0aXBsaWVyOiAyLFxuICByZXNldE5hdGl2ZVNjcm9sbDogdHJ1ZSxcbiAgdGFibGV0OiB7XG4gICAgc21vb3RoOiBmYWxzZSxcbiAgICBkaXJlY3Rpb246ICd2ZXJ0aWNhbCcsXG4gICAgZ2VzdHVyZURpcmVjdGlvbjogJ3ZlcnRpY2FsJyxcbiAgICBicmVha3BvaW50OiAxMDI0XG4gIH0sXG4gIHNtYXJ0cGhvbmU6IHtcbiAgICBzbW9vdGg6IGZhbHNlLFxuICAgIGRpcmVjdGlvbjogJ3ZlcnRpY2FsJyxcbiAgICBnZXN0dXJlRGlyZWN0aW9uOiAndmVydGljYWwnXG4gIH1cbn07XG5cbnZhciBfZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIF9kZWZhdWx0KCkge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBfZGVmYXVsdCk7XG5cbiAgICBPYmplY3QuYXNzaWduKHRoaXMsIGRlZmF1bHRzLCBvcHRpb25zKTtcbiAgICB0aGlzLnNtYXJ0cGhvbmUgPSBkZWZhdWx0cy5zbWFydHBob25lO1xuICAgIGlmIChvcHRpb25zLnNtYXJ0cGhvbmUpIE9iamVjdC5hc3NpZ24odGhpcy5zbWFydHBob25lLCBvcHRpb25zLnNtYXJ0cGhvbmUpO1xuICAgIHRoaXMudGFibGV0ID0gZGVmYXVsdHMudGFibGV0O1xuICAgIGlmIChvcHRpb25zLnRhYmxldCkgT2JqZWN0LmFzc2lnbih0aGlzLnRhYmxldCwgb3B0aW9ucy50YWJsZXQpO1xuICAgIHRoaXMubmFtZXNwYWNlID0gJ2xvY29tb3RpdmUnO1xuICAgIHRoaXMuaHRtbCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICB0aGlzLndpbmRvd0hlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICB0aGlzLndpbmRvd1dpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XG4gICAgdGhpcy53aW5kb3dNaWRkbGUgPSB7XG4gICAgICB4OiB0aGlzLndpbmRvd1dpZHRoIC8gMixcbiAgICAgIHk6IHRoaXMud2luZG93SGVpZ2h0IC8gMlxuICAgIH07XG4gICAgdGhpcy5lbHMgPSB7fTtcbiAgICB0aGlzLmN1cnJlbnRFbGVtZW50cyA9IHt9O1xuICAgIHRoaXMubGlzdGVuZXJzID0ge307XG4gICAgdGhpcy5oYXNTY3JvbGxUaWNraW5nID0gZmFsc2U7XG4gICAgdGhpcy5oYXNDYWxsRXZlbnRTZXQgPSBmYWxzZTtcbiAgICB0aGlzLmNoZWNrU2Nyb2xsID0gdGhpcy5jaGVja1Njcm9sbC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuY2hlY2tSZXNpemUgPSB0aGlzLmNoZWNrUmVzaXplLmJpbmQodGhpcyk7XG4gICAgdGhpcy5jaGVja0V2ZW50ID0gdGhpcy5jaGVja0V2ZW50LmJpbmQodGhpcyk7XG4gICAgdGhpcy5pbnN0YW5jZSA9IHtcbiAgICAgIHNjcm9sbDoge1xuICAgICAgICB4OiAwLFxuICAgICAgICB5OiAwXG4gICAgICB9LFxuICAgICAgbGltaXQ6IHtcbiAgICAgICAgeDogdGhpcy5odG1sLm9mZnNldFdpZHRoLFxuICAgICAgICB5OiB0aGlzLmh0bWwub2Zmc2V0SGVpZ2h0XG4gICAgICB9LFxuICAgICAgY3VycmVudEVsZW1lbnRzOiB0aGlzLmN1cnJlbnRFbGVtZW50c1xuICAgIH07XG5cbiAgICBpZiAodGhpcy5pc01vYmlsZSkge1xuICAgICAgaWYgKHRoaXMuaXNUYWJsZXQpIHtcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gJ3RhYmxldCc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNvbnRleHQgPSAnc21hcnRwaG9uZSc7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY29udGV4dCA9ICdkZXNrdG9wJztcbiAgICB9XG5cbiAgICBpZiAodGhpcy5pc01vYmlsZSkgdGhpcy5kaXJlY3Rpb24gPSB0aGlzW3RoaXMuY29udGV4dF0uZGlyZWN0aW9uO1xuXG4gICAgaWYgKHRoaXMuZGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgIHRoaXMuZGlyZWN0aW9uQXhpcyA9ICd4JztcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kaXJlY3Rpb25BeGlzID0gJ3knO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmdldERpcmVjdGlvbikge1xuICAgICAgdGhpcy5pbnN0YW5jZS5kaXJlY3Rpb24gPSBudWxsO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmdldERpcmVjdGlvbikge1xuICAgICAgdGhpcy5pbnN0YW5jZS5zcGVlZCA9IDA7XG4gICAgfVxuXG4gICAgdGhpcy5odG1sLmNsYXNzTGlzdC5hZGQodGhpcy5pbml0Q2xhc3MpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLmNoZWNrUmVzaXplLCBmYWxzZSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoX2RlZmF1bHQsIFt7XG4gICAga2V5OiBcImluaXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgIHRoaXMuaW5pdEV2ZW50cygpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjaGVja1Njcm9sbFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjaGVja1Njcm9sbCgpIHtcbiAgICAgIHRoaXMuZGlzcGF0Y2hTY3JvbGwoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY2hlY2tSZXNpemVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2hlY2tSZXNpemUoKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBpZiAoIXRoaXMucmVzaXplVGljaykge1xuICAgICAgICB0aGlzLnJlc2l6ZVRpY2sgPSB0cnVlO1xuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzLnJlc2l6ZSgpO1xuXG4gICAgICAgICAgX3RoaXMucmVzaXplVGljayA9IGZhbHNlO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVzaXplXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlc2l6ZSgpIHt9XG4gIH0sIHtcbiAgICBrZXk6IFwiY2hlY2tDb250ZXh0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNoZWNrQ29udGV4dCgpIHtcbiAgICAgIGlmICghdGhpcy5yZWxvYWRPbkNvbnRleHRDaGFuZ2UpIHJldHVybjtcbiAgICAgIHRoaXMuaXNNb2JpbGUgPSAvQW5kcm9pZHxpUGhvbmV8aVBhZHxpUG9kfEJsYWNrQmVycnl8SUVNb2JpbGV8T3BlcmEgTWluaS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkgfHwgbmF2aWdhdG9yLnBsYXRmb3JtID09PSAnTWFjSW50ZWwnICYmIG5hdmlnYXRvci5tYXhUb3VjaFBvaW50cyA+IDEgfHwgdGhpcy53aW5kb3dXaWR0aCA8IHRoaXMudGFibGV0LmJyZWFrcG9pbnQ7XG4gICAgICB0aGlzLmlzVGFibGV0ID0gdGhpcy5pc01vYmlsZSAmJiB0aGlzLndpbmRvd1dpZHRoID49IHRoaXMudGFibGV0LmJyZWFrcG9pbnQ7XG4gICAgICB2YXIgb2xkQ29udGV4dCA9IHRoaXMuY29udGV4dDtcblxuICAgICAgaWYgKHRoaXMuaXNNb2JpbGUpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNUYWJsZXQpIHtcbiAgICAgICAgICB0aGlzLmNvbnRleHQgPSAndGFibGV0JztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmNvbnRleHQgPSAnc21hcnRwaG9uZSc7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuY29udGV4dCA9ICdkZXNrdG9wJztcbiAgICAgIH1cblxuICAgICAgaWYgKG9sZENvbnRleHQgIT0gdGhpcy5jb250ZXh0KSB7XG4gICAgICAgIHZhciBvbGRTbW9vdGggPSBvbGRDb250ZXh0ID09ICdkZXNrdG9wJyA/IHRoaXMuc21vb3RoIDogdGhpc1tvbGRDb250ZXh0XS5zbW9vdGg7XG4gICAgICAgIHZhciBuZXdTbW9vdGggPSB0aGlzLmNvbnRleHQgPT0gJ2Rlc2t0b3AnID8gdGhpcy5zbW9vdGggOiB0aGlzW3RoaXMuY29udGV4dF0uc21vb3RoO1xuICAgICAgICBpZiAob2xkU21vb3RoICE9IG5ld1Ntb290aCkgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJpbml0RXZlbnRzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluaXRFdmVudHMoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdGhpcy5zY3JvbGxUb0VscyA9IHRoaXMuZWwucXVlcnlTZWxlY3RvckFsbChcIltkYXRhLVwiLmNvbmNhdCh0aGlzLm5hbWUsIFwiLXRvXVwiKSk7XG4gICAgICB0aGlzLnNldFNjcm9sbFRvID0gdGhpcy5zZXRTY3JvbGxUby5iaW5kKHRoaXMpO1xuICAgICAgdGhpcy5zY3JvbGxUb0Vscy5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIF90aGlzMi5zZXRTY3JvbGxUbywgZmFsc2UpO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNldFNjcm9sbFRvXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFNjcm9sbFRvKGV2ZW50KSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgdGhpcy5zY3JvbGxUbyhldmVudC5jdXJyZW50VGFyZ2V0LmdldEF0dHJpYnV0ZShcImRhdGEtXCIuY29uY2F0KHRoaXMubmFtZSwgXCItaHJlZlwiKSkgfHwgZXZlbnQuY3VycmVudFRhcmdldC5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSwge1xuICAgICAgICBvZmZzZXQ6IGV2ZW50LmN1cnJlbnRUYXJnZXQuZ2V0QXR0cmlidXRlKFwiZGF0YS1cIi5jb25jYXQodGhpcy5uYW1lLCBcIi1vZmZzZXRcIikpXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiYWRkRWxlbWVudHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkRWxlbWVudHMoKSB7fVxuICB9LCB7XG4gICAga2V5OiBcImRldGVjdEVsZW1lbnRzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRldGVjdEVsZW1lbnRzKGhhc0NhbGxFdmVudFNldCkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIHZhciBzY3JvbGxUb3AgPSB0aGlzLmluc3RhbmNlLnNjcm9sbC55O1xuICAgICAgdmFyIHNjcm9sbEJvdHRvbSA9IHNjcm9sbFRvcCArIHRoaXMud2luZG93SGVpZ2h0O1xuICAgICAgdmFyIHNjcm9sbExlZnQgPSB0aGlzLmluc3RhbmNlLnNjcm9sbC54O1xuICAgICAgdmFyIHNjcm9sbFJpZ2h0ID0gc2Nyb2xsTGVmdCArIHRoaXMud2luZG93V2lkdGg7XG4gICAgICBPYmplY3QuZW50cmllcyh0aGlzLmVscykuZm9yRWFjaChmdW5jdGlvbiAoX3JlZikge1xuICAgICAgICB2YXIgX3JlZjIgPSBfc2xpY2VkVG9BcnJheShfcmVmLCAyKSxcbiAgICAgICAgICAgIGkgPSBfcmVmMlswXSxcbiAgICAgICAgICAgIGVsID0gX3JlZjJbMV07XG5cbiAgICAgICAgaWYgKGVsICYmICghZWwuaW5WaWV3IHx8IGhhc0NhbGxFdmVudFNldCkpIHtcbiAgICAgICAgICBpZiAoX3RoaXMzLmRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnKSB7XG4gICAgICAgICAgICBpZiAoc2Nyb2xsUmlnaHQgPj0gZWwubGVmdCAmJiBzY3JvbGxMZWZ0IDwgZWwucmlnaHQpIHtcbiAgICAgICAgICAgICAgX3RoaXMzLnNldEluVmlldyhlbCwgaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChzY3JvbGxCb3R0b20gPj0gZWwudG9wICYmIHNjcm9sbFRvcCA8IGVsLmJvdHRvbSkge1xuICAgICAgICAgICAgICBfdGhpczMuc2V0SW5WaWV3KGVsLCBpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZWwgJiYgZWwuaW5WaWV3KSB7XG4gICAgICAgICAgaWYgKF90aGlzMy5kaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJykge1xuICAgICAgICAgICAgdmFyIHdpZHRoID0gZWwucmlnaHQgLSBlbC5sZWZ0O1xuICAgICAgICAgICAgZWwucHJvZ3Jlc3MgPSAoX3RoaXMzLmluc3RhbmNlLnNjcm9sbC54IC0gKGVsLmxlZnQgLSBfdGhpczMud2luZG93V2lkdGgpKSAvICh3aWR0aCArIF90aGlzMy53aW5kb3dXaWR0aCk7XG5cbiAgICAgICAgICAgIGlmIChzY3JvbGxSaWdodCA8IGVsLmxlZnQgfHwgc2Nyb2xsTGVmdCA+IGVsLnJpZ2h0KSB7XG4gICAgICAgICAgICAgIF90aGlzMy5zZXRPdXRPZlZpZXcoZWwsIGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgaGVpZ2h0ID0gZWwuYm90dG9tIC0gZWwudG9wO1xuICAgICAgICAgICAgZWwucHJvZ3Jlc3MgPSAoX3RoaXMzLmluc3RhbmNlLnNjcm9sbC55IC0gKGVsLnRvcCAtIF90aGlzMy53aW5kb3dIZWlnaHQpKSAvIChoZWlnaHQgKyBfdGhpczMud2luZG93SGVpZ2h0KTtcblxuICAgICAgICAgICAgaWYgKHNjcm9sbEJvdHRvbSA8IGVsLnRvcCB8fCBzY3JvbGxUb3AgPiBlbC5ib3R0b20pIHtcbiAgICAgICAgICAgICAgX3RoaXMzLnNldE91dE9mVmlldyhlbCwgaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTsgLy8gdGhpcy5lbHMgPSB0aGlzLmVscy5maWx0ZXIoKGN1cnJlbnQsIGkpID0+IHtcbiAgICAgIC8vICAgICByZXR1cm4gY3VycmVudCAhPT0gbnVsbDtcbiAgICAgIC8vIH0pO1xuXG4gICAgICB0aGlzLmhhc1Njcm9sbFRpY2tpbmcgPSBmYWxzZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2V0SW5WaWV3XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldEluVmlldyhjdXJyZW50LCBpKSB7XG4gICAgICB0aGlzLmVsc1tpXS5pblZpZXcgPSB0cnVlO1xuICAgICAgY3VycmVudC5lbC5jbGFzc0xpc3QuYWRkKGN1cnJlbnRbXCJjbGFzc1wiXSk7XG4gICAgICB0aGlzLmN1cnJlbnRFbGVtZW50c1tpXSA9IGN1cnJlbnQ7XG5cbiAgICAgIGlmIChjdXJyZW50LmNhbGwgJiYgdGhpcy5oYXNDYWxsRXZlbnRTZXQpIHtcbiAgICAgICAgdGhpcy5kaXNwYXRjaENhbGwoY3VycmVudCwgJ2VudGVyJyk7XG5cbiAgICAgICAgaWYgKCFjdXJyZW50LnJlcGVhdCkge1xuICAgICAgICAgIHRoaXMuZWxzW2ldLmNhbGwgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSAvLyBpZiAoIWN1cnJlbnQucmVwZWF0ICYmICFjdXJyZW50LnNwZWVkICYmICFjdXJyZW50LnN0aWNreSkge1xuICAgICAgLy8gICAgIGlmICghY3VycmVudC5jYWxsIHx8IGN1cnJlbnQuY2FsbCAmJiB0aGlzLmhhc0NhbGxFdmVudFNldCkge1xuICAgICAgLy8gICAgICAgIHRoaXMuZWxzW2ldID0gbnVsbFxuICAgICAgLy8gICAgIH1cbiAgICAgIC8vIH1cblxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZXRPdXRPZlZpZXdcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0T3V0T2ZWaWV3KGN1cnJlbnQsIGkpIHtcbiAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgICAvLyBpZiAoY3VycmVudC5yZXBlYXQgfHwgY3VycmVudC5zcGVlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLmVsc1tpXS5pblZpZXcgPSBmYWxzZTsgLy8gfVxuXG4gICAgICBPYmplY3Qua2V5cyh0aGlzLmN1cnJlbnRFbGVtZW50cykuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgZWwgPT09IGkgJiYgZGVsZXRlIF90aGlzNC5jdXJyZW50RWxlbWVudHNbZWxdO1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChjdXJyZW50LmNhbGwgJiYgdGhpcy5oYXNDYWxsRXZlbnRTZXQpIHtcbiAgICAgICAgdGhpcy5kaXNwYXRjaENhbGwoY3VycmVudCwgJ2V4aXQnKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGN1cnJlbnQucmVwZWF0KSB7XG4gICAgICAgIGN1cnJlbnQuZWwuY2xhc3NMaXN0LnJlbW92ZShjdXJyZW50W1wiY2xhc3NcIl0pO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJkaXNwYXRjaENhbGxcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGlzcGF0Y2hDYWxsKGN1cnJlbnQsIHdheSkge1xuICAgICAgdGhpcy5jYWxsV2F5ID0gd2F5O1xuICAgICAgdGhpcy5jYWxsVmFsdWUgPSBjdXJyZW50LmNhbGwuc3BsaXQoJywnKS5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0udHJpbSgpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLmNhbGxPYmogPSBjdXJyZW50O1xuICAgICAgaWYgKHRoaXMuY2FsbFZhbHVlLmxlbmd0aCA9PSAxKSB0aGlzLmNhbGxWYWx1ZSA9IHRoaXMuY2FsbFZhbHVlWzBdO1xuICAgICAgdmFyIGNhbGxFdmVudCA9IG5ldyBFdmVudCh0aGlzLm5hbWVzcGFjZSArICdjYWxsJyk7XG4gICAgICB0aGlzLmVsLmRpc3BhdGNoRXZlbnQoY2FsbEV2ZW50KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZGlzcGF0Y2hTY3JvbGxcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGlzcGF0Y2hTY3JvbGwoKSB7XG4gICAgICB2YXIgc2Nyb2xsRXZlbnQgPSBuZXcgRXZlbnQodGhpcy5uYW1lc3BhY2UgKyAnc2Nyb2xsJyk7XG4gICAgICB0aGlzLmVsLmRpc3BhdGNoRXZlbnQoc2Nyb2xsRXZlbnQpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZXRFdmVudHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0RXZlbnRzKGV2ZW50LCBmdW5jKSB7XG4gICAgICBpZiAoIXRoaXMubGlzdGVuZXJzW2V2ZW50XSkge1xuICAgICAgICB0aGlzLmxpc3RlbmVyc1tldmVudF0gPSBbXTtcbiAgICAgIH1cblxuICAgICAgdmFyIGxpc3QgPSB0aGlzLmxpc3RlbmVyc1tldmVudF07XG4gICAgICBsaXN0LnB1c2goZnVuYyk7XG5cbiAgICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgICB0aGlzLmVsLmFkZEV2ZW50TGlzdGVuZXIodGhpcy5uYW1lc3BhY2UgKyBldmVudCwgdGhpcy5jaGVja0V2ZW50LCBmYWxzZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChldmVudCA9PT0gJ2NhbGwnKSB7XG4gICAgICAgIHRoaXMuaGFzQ2FsbEV2ZW50U2V0ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5kZXRlY3RFbGVtZW50cyh0cnVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidW5zZXRFdmVudHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdW5zZXRFdmVudHMoZXZlbnQsIGZ1bmMpIHtcbiAgICAgIGlmICghdGhpcy5saXN0ZW5lcnNbZXZlbnRdKSByZXR1cm47XG4gICAgICB2YXIgbGlzdCA9IHRoaXMubGlzdGVuZXJzW2V2ZW50XTtcbiAgICAgIHZhciBpbmRleCA9IGxpc3QuaW5kZXhPZihmdW5jKTtcbiAgICAgIGlmIChpbmRleCA8IDApIHJldHVybjtcbiAgICAgIGxpc3Quc3BsaWNlKGluZGV4LCAxKTtcblxuICAgICAgaWYgKGxpc3QuaW5kZXggPT09IDApIHtcbiAgICAgICAgdGhpcy5lbC5yZW1vdmVFdmVudExpc3RlbmVyKHRoaXMubmFtZXNwYWNlICsgZXZlbnQsIHRoaXMuY2hlY2tFdmVudCwgZmFsc2UpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjaGVja0V2ZW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNoZWNrRXZlbnQoZXZlbnQpIHtcbiAgICAgIHZhciBfdGhpczUgPSB0aGlzO1xuXG4gICAgICB2YXIgbmFtZSA9IGV2ZW50LnR5cGUucmVwbGFjZSh0aGlzLm5hbWVzcGFjZSwgJycpO1xuICAgICAgdmFyIGxpc3QgPSB0aGlzLmxpc3RlbmVyc1tuYW1lXTtcbiAgICAgIGlmICghbGlzdCB8fCBsaXN0Lmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgICAgbGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChmdW5jKSB7XG4gICAgICAgIHN3aXRjaCAobmFtZSkge1xuICAgICAgICAgIGNhc2UgJ3Njcm9sbCc6XG4gICAgICAgICAgICByZXR1cm4gZnVuYyhfdGhpczUuaW5zdGFuY2UpO1xuXG4gICAgICAgICAgY2FzZSAnY2FsbCc6XG4gICAgICAgICAgICByZXR1cm4gZnVuYyhfdGhpczUuY2FsbFZhbHVlLCBfdGhpczUuY2FsbFdheSwgX3RoaXM1LmNhbGxPYmopO1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBmdW5jKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzdGFydFNjcm9sbFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdGFydFNjcm9sbCgpIHt9XG4gIH0sIHtcbiAgICBrZXk6IFwic3RvcFNjcm9sbFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdG9wU2Nyb2xsKCkge31cbiAgfSwge1xuICAgIGtleTogXCJzZXRTY3JvbGxcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0U2Nyb2xsKHgsIHkpIHtcbiAgICAgIHRoaXMuaW5zdGFuY2Uuc2Nyb2xsID0ge1xuICAgICAgICB4OiAwLFxuICAgICAgICB5OiAwXG4gICAgICB9O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJkZXN0cm95XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICB2YXIgX3RoaXM2ID0gdGhpcztcblxuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuY2hlY2tSZXNpemUsIGZhbHNlKTtcbiAgICAgIE9iamVjdC5rZXlzKHRoaXMubGlzdGVuZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBfdGhpczYuZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihfdGhpczYubmFtZXNwYWNlICsgZXZlbnQsIF90aGlzNi5jaGVja0V2ZW50LCBmYWxzZSk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMubGlzdGVuZXJzID0ge307XG4gICAgICB0aGlzLnNjcm9sbFRvRWxzLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgX3RoaXM2LnNldFNjcm9sbFRvLCBmYWxzZSk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMuaHRtbC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuaW5pdENsYXNzKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gX2RlZmF1bHQ7XG59KCk7XG5cbnZhciBjb21tb25qc0dsb2JhbCA9IHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbFRoaXMgOiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnID8gc2VsZiA6IHt9O1xuXG5mdW5jdGlvbiBjcmVhdGVDb21tb25qc01vZHVsZShmbiwgbW9kdWxlKSB7XG5cdHJldHVybiBtb2R1bGUgPSB7IGV4cG9ydHM6IHt9IH0sIGZuKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMpLCBtb2R1bGUuZXhwb3J0cztcbn1cblxudmFyIHNtb290aHNjcm9sbCA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHtcbi8qIHNtb290aHNjcm9sbCB2MC40LjQgLSAyMDE5IC0gRHVzdGFuIEthc3RlbiwgSmVyZW1pYXMgTWVuaWNoZWxsaSAtIE1JVCBMaWNlbnNlICovXG4oZnVuY3Rpb24gKCkge1xuXG4gIC8vIHBvbHlmaWxsXG4gIGZ1bmN0aW9uIHBvbHlmaWxsKCkge1xuICAgIC8vIGFsaWFzZXNcbiAgICB2YXIgdyA9IHdpbmRvdztcbiAgICB2YXIgZCA9IGRvY3VtZW50O1xuXG4gICAgLy8gcmV0dXJuIGlmIHNjcm9sbCBiZWhhdmlvciBpcyBzdXBwb3J0ZWQgYW5kIHBvbHlmaWxsIGlzIG5vdCBmb3JjZWRcbiAgICBpZiAoXG4gICAgICAnc2Nyb2xsQmVoYXZpb3InIGluIGQuZG9jdW1lbnRFbGVtZW50LnN0eWxlICYmXG4gICAgICB3Ll9fZm9yY2VTbW9vdGhTY3JvbGxQb2x5ZmlsbF9fICE9PSB0cnVlXG4gICAgKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gZ2xvYmFsc1xuICAgIHZhciBFbGVtZW50ID0gdy5IVE1MRWxlbWVudCB8fCB3LkVsZW1lbnQ7XG4gICAgdmFyIFNDUk9MTF9USU1FID0gNDY4O1xuXG4gICAgLy8gb2JqZWN0IGdhdGhlcmluZyBvcmlnaW5hbCBzY3JvbGwgbWV0aG9kc1xuICAgIHZhciBvcmlnaW5hbCA9IHtcbiAgICAgIHNjcm9sbDogdy5zY3JvbGwgfHwgdy5zY3JvbGxUbyxcbiAgICAgIHNjcm9sbEJ5OiB3LnNjcm9sbEJ5LFxuICAgICAgZWxlbWVudFNjcm9sbDogRWxlbWVudC5wcm90b3R5cGUuc2Nyb2xsIHx8IHNjcm9sbEVsZW1lbnQsXG4gICAgICBzY3JvbGxJbnRvVmlldzogRWxlbWVudC5wcm90b3R5cGUuc2Nyb2xsSW50b1ZpZXdcbiAgICB9O1xuXG4gICAgLy8gZGVmaW5lIHRpbWluZyBtZXRob2RcbiAgICB2YXIgbm93ID1cbiAgICAgIHcucGVyZm9ybWFuY2UgJiYgdy5wZXJmb3JtYW5jZS5ub3dcbiAgICAgICAgPyB3LnBlcmZvcm1hbmNlLm5vdy5iaW5kKHcucGVyZm9ybWFuY2UpXG4gICAgICAgIDogRGF0ZS5ub3c7XG5cbiAgICAvKipcbiAgICAgKiBpbmRpY2F0ZXMgaWYgYSB0aGUgY3VycmVudCBicm93c2VyIGlzIG1hZGUgYnkgTWljcm9zb2Z0XG4gICAgICogQG1ldGhvZCBpc01pY3Jvc29mdEJyb3dzZXJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdXNlckFnZW50XG4gICAgICogQHJldHVybnMge0Jvb2xlYW59XG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNNaWNyb3NvZnRCcm93c2VyKHVzZXJBZ2VudCkge1xuICAgICAgdmFyIHVzZXJBZ2VudFBhdHRlcm5zID0gWydNU0lFICcsICdUcmlkZW50LycsICdFZGdlLyddO1xuXG4gICAgICByZXR1cm4gbmV3IFJlZ0V4cCh1c2VyQWdlbnRQYXR0ZXJucy5qb2luKCd8JykpLnRlc3QodXNlckFnZW50KTtcbiAgICB9XG5cbiAgICAvKlxuICAgICAqIElFIGhhcyByb3VuZGluZyBidWcgcm91bmRpbmcgZG93biBjbGllbnRIZWlnaHQgYW5kIGNsaWVudFdpZHRoIGFuZFxuICAgICAqIHJvdW5kaW5nIHVwIHNjcm9sbEhlaWdodCBhbmQgc2Nyb2xsV2lkdGggY2F1c2luZyBmYWxzZSBwb3NpdGl2ZXNcbiAgICAgKiBvbiBoYXNTY3JvbGxhYmxlU3BhY2VcbiAgICAgKi9cbiAgICB2YXIgUk9VTkRJTkdfVE9MRVJBTkNFID0gaXNNaWNyb3NvZnRCcm93c2VyKHcubmF2aWdhdG9yLnVzZXJBZ2VudCkgPyAxIDogMDtcblxuICAgIC8qKlxuICAgICAqIGNoYW5nZXMgc2Nyb2xsIHBvc2l0aW9uIGluc2lkZSBhbiBlbGVtZW50XG4gICAgICogQG1ldGhvZCBzY3JvbGxFbGVtZW50XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHhcbiAgICAgKiBAcGFyYW0ge051bWJlcn0geVxuICAgICAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gICAgICovXG4gICAgZnVuY3Rpb24gc2Nyb2xsRWxlbWVudCh4LCB5KSB7XG4gICAgICB0aGlzLnNjcm9sbExlZnQgPSB4O1xuICAgICAgdGhpcy5zY3JvbGxUb3AgPSB5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHJldHVybnMgcmVzdWx0IG9mIGFwcGx5aW5nIGVhc2UgbWF0aCBmdW5jdGlvbiB0byBhIG51bWJlclxuICAgICAqIEBtZXRob2QgZWFzZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBrXG4gICAgICogQHJldHVybnMge051bWJlcn1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlYXNlKGspIHtcbiAgICAgIHJldHVybiAwLjUgKiAoMSAtIE1hdGguY29zKE1hdGguUEkgKiBrKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogaW5kaWNhdGVzIGlmIGEgc21vb3RoIGJlaGF2aW9yIHNob3VsZCBiZSBhcHBsaWVkXG4gICAgICogQG1ldGhvZCBzaG91bGRCYWlsT3V0XG4gICAgICogQHBhcmFtIHtOdW1iZXJ8T2JqZWN0fSBmaXJzdEFyZ1xuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNob3VsZEJhaWxPdXQoZmlyc3RBcmcpIHtcbiAgICAgIGlmIChcbiAgICAgICAgZmlyc3RBcmcgPT09IG51bGwgfHxcbiAgICAgICAgdHlwZW9mIGZpcnN0QXJnICE9PSAnb2JqZWN0JyB8fFxuICAgICAgICBmaXJzdEFyZy5iZWhhdmlvciA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgIGZpcnN0QXJnLmJlaGF2aW9yID09PSAnYXV0bycgfHxcbiAgICAgICAgZmlyc3RBcmcuYmVoYXZpb3IgPT09ICdpbnN0YW50J1xuICAgICAgKSB7XG4gICAgICAgIC8vIGZpcnN0IGFyZ3VtZW50IGlzIG5vdCBhbiBvYmplY3QvbnVsbFxuICAgICAgICAvLyBvciBiZWhhdmlvciBpcyBhdXRvLCBpbnN0YW50IG9yIHVuZGVmaW5lZFxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBmaXJzdEFyZyA9PT0gJ29iamVjdCcgJiYgZmlyc3RBcmcuYmVoYXZpb3IgPT09ICdzbW9vdGgnKSB7XG4gICAgICAgIC8vIGZpcnN0IGFyZ3VtZW50IGlzIGFuIG9iamVjdCBhbmQgYmVoYXZpb3IgaXMgc21vb3RoXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgLy8gdGhyb3cgZXJyb3Igd2hlbiBiZWhhdmlvciBpcyBub3Qgc3VwcG9ydGVkXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAnYmVoYXZpb3IgbWVtYmVyIG9mIFNjcm9sbE9wdGlvbnMgJyArXG4gICAgICAgICAgZmlyc3RBcmcuYmVoYXZpb3IgK1xuICAgICAgICAgICcgaXMgbm90IGEgdmFsaWQgdmFsdWUgZm9yIGVudW1lcmF0aW9uIFNjcm9sbEJlaGF2aW9yLidcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogaW5kaWNhdGVzIGlmIGFuIGVsZW1lbnQgaGFzIHNjcm9sbGFibGUgc3BhY2UgaW4gdGhlIHByb3ZpZGVkIGF4aXNcbiAgICAgKiBAbWV0aG9kIGhhc1Njcm9sbGFibGVTcGFjZVxuICAgICAqIEBwYXJhbSB7Tm9kZX0gZWxcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gYXhpc1xuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc1Njcm9sbGFibGVTcGFjZShlbCwgYXhpcykge1xuICAgICAgaWYgKGF4aXMgPT09ICdZJykge1xuICAgICAgICByZXR1cm4gZWwuY2xpZW50SGVpZ2h0ICsgUk9VTkRJTkdfVE9MRVJBTkNFIDwgZWwuc2Nyb2xsSGVpZ2h0O1xuICAgICAgfVxuXG4gICAgICBpZiAoYXhpcyA9PT0gJ1gnKSB7XG4gICAgICAgIHJldHVybiBlbC5jbGllbnRXaWR0aCArIFJPVU5ESU5HX1RPTEVSQU5DRSA8IGVsLnNjcm9sbFdpZHRoO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGluZGljYXRlcyBpZiBhbiBlbGVtZW50IGhhcyBhIHNjcm9sbGFibGUgb3ZlcmZsb3cgcHJvcGVydHkgaW4gdGhlIGF4aXNcbiAgICAgKiBAbWV0aG9kIGNhbk92ZXJmbG93XG4gICAgICogQHBhcmFtIHtOb2RlfSBlbFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBheGlzXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59XG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FuT3ZlcmZsb3coZWwsIGF4aXMpIHtcbiAgICAgIHZhciBvdmVyZmxvd1ZhbHVlID0gdy5nZXRDb21wdXRlZFN0eWxlKGVsLCBudWxsKVsnb3ZlcmZsb3cnICsgYXhpc107XG5cbiAgICAgIHJldHVybiBvdmVyZmxvd1ZhbHVlID09PSAnYXV0bycgfHwgb3ZlcmZsb3dWYWx1ZSA9PT0gJ3Njcm9sbCc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogaW5kaWNhdGVzIGlmIGFuIGVsZW1lbnQgY2FuIGJlIHNjcm9sbGVkIGluIGVpdGhlciBheGlzXG4gICAgICogQG1ldGhvZCBpc1Njcm9sbGFibGVcbiAgICAgKiBAcGFyYW0ge05vZGV9IGVsXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGF4aXNcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1Njcm9sbGFibGUoZWwpIHtcbiAgICAgIHZhciBpc1Njcm9sbGFibGVZID0gaGFzU2Nyb2xsYWJsZVNwYWNlKGVsLCAnWScpICYmIGNhbk92ZXJmbG93KGVsLCAnWScpO1xuICAgICAgdmFyIGlzU2Nyb2xsYWJsZVggPSBoYXNTY3JvbGxhYmxlU3BhY2UoZWwsICdYJykgJiYgY2FuT3ZlcmZsb3coZWwsICdYJyk7XG5cbiAgICAgIHJldHVybiBpc1Njcm9sbGFibGVZIHx8IGlzU2Nyb2xsYWJsZVg7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZmluZHMgc2Nyb2xsYWJsZSBwYXJlbnQgb2YgYW4gZWxlbWVudFxuICAgICAqIEBtZXRob2QgZmluZFNjcm9sbGFibGVQYXJlbnRcbiAgICAgKiBAcGFyYW0ge05vZGV9IGVsXG4gICAgICogQHJldHVybnMge05vZGV9IGVsXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmluZFNjcm9sbGFibGVQYXJlbnQoZWwpIHtcbiAgICAgIHdoaWxlIChlbCAhPT0gZC5ib2R5ICYmIGlzU2Nyb2xsYWJsZShlbCkgPT09IGZhbHNlKSB7XG4gICAgICAgIGVsID0gZWwucGFyZW50Tm9kZSB8fCBlbC5ob3N0O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZWw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogc2VsZiBpbnZva2VkIGZ1bmN0aW9uIHRoYXQsIGdpdmVuIGEgY29udGV4dCwgc3RlcHMgdGhyb3VnaCBzY3JvbGxpbmdcbiAgICAgKiBAbWV0aG9kIHN0ZXBcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY29udGV4dFxuICAgICAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RlcChjb250ZXh0KSB7XG4gICAgICB2YXIgdGltZSA9IG5vdygpO1xuICAgICAgdmFyIHZhbHVlO1xuICAgICAgdmFyIGN1cnJlbnRYO1xuICAgICAgdmFyIGN1cnJlbnRZO1xuICAgICAgdmFyIGVsYXBzZWQgPSAodGltZSAtIGNvbnRleHQuc3RhcnRUaW1lKSAvIFNDUk9MTF9USU1FO1xuXG4gICAgICAvLyBhdm9pZCBlbGFwc2VkIHRpbWVzIGhpZ2hlciB0aGFuIG9uZVxuICAgICAgZWxhcHNlZCA9IGVsYXBzZWQgPiAxID8gMSA6IGVsYXBzZWQ7XG5cbiAgICAgIC8vIGFwcGx5IGVhc2luZyB0byBlbGFwc2VkIHRpbWVcbiAgICAgIHZhbHVlID0gZWFzZShlbGFwc2VkKTtcblxuICAgICAgY3VycmVudFggPSBjb250ZXh0LnN0YXJ0WCArIChjb250ZXh0LnggLSBjb250ZXh0LnN0YXJ0WCkgKiB2YWx1ZTtcbiAgICAgIGN1cnJlbnRZID0gY29udGV4dC5zdGFydFkgKyAoY29udGV4dC55IC0gY29udGV4dC5zdGFydFkpICogdmFsdWU7XG5cbiAgICAgIGNvbnRleHQubWV0aG9kLmNhbGwoY29udGV4dC5zY3JvbGxhYmxlLCBjdXJyZW50WCwgY3VycmVudFkpO1xuXG4gICAgICAvLyBzY3JvbGwgbW9yZSBpZiB3ZSBoYXZlIG5vdCByZWFjaGVkIG91ciBkZXN0aW5hdGlvblxuICAgICAgaWYgKGN1cnJlbnRYICE9PSBjb250ZXh0LnggfHwgY3VycmVudFkgIT09IGNvbnRleHQueSkge1xuICAgICAgICB3LnJlcXVlc3RBbmltYXRpb25GcmFtZShzdGVwLmJpbmQodywgY29udGV4dCkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHNjcm9sbHMgd2luZG93IG9yIGVsZW1lbnQgd2l0aCBhIHNtb290aCBiZWhhdmlvclxuICAgICAqIEBtZXRob2Qgc21vb3RoU2Nyb2xsXG4gICAgICogQHBhcmFtIHtPYmplY3R8Tm9kZX0gZWxcbiAgICAgKiBAcGFyYW0ge051bWJlcn0geFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB5XG4gICAgICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzbW9vdGhTY3JvbGwoZWwsIHgsIHkpIHtcbiAgICAgIHZhciBzY3JvbGxhYmxlO1xuICAgICAgdmFyIHN0YXJ0WDtcbiAgICAgIHZhciBzdGFydFk7XG4gICAgICB2YXIgbWV0aG9kO1xuICAgICAgdmFyIHN0YXJ0VGltZSA9IG5vdygpO1xuXG4gICAgICAvLyBkZWZpbmUgc2Nyb2xsIGNvbnRleHRcbiAgICAgIGlmIChlbCA9PT0gZC5ib2R5KSB7XG4gICAgICAgIHNjcm9sbGFibGUgPSB3O1xuICAgICAgICBzdGFydFggPSB3LnNjcm9sbFggfHwgdy5wYWdlWE9mZnNldDtcbiAgICAgICAgc3RhcnRZID0gdy5zY3JvbGxZIHx8IHcucGFnZVlPZmZzZXQ7XG4gICAgICAgIG1ldGhvZCA9IG9yaWdpbmFsLnNjcm9sbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNjcm9sbGFibGUgPSBlbDtcbiAgICAgICAgc3RhcnRYID0gZWwuc2Nyb2xsTGVmdDtcbiAgICAgICAgc3RhcnRZID0gZWwuc2Nyb2xsVG9wO1xuICAgICAgICBtZXRob2QgPSBzY3JvbGxFbGVtZW50O1xuICAgICAgfVxuXG4gICAgICAvLyBzY3JvbGwgbG9vcGluZyBvdmVyIGEgZnJhbWVcbiAgICAgIHN0ZXAoe1xuICAgICAgICBzY3JvbGxhYmxlOiBzY3JvbGxhYmxlLFxuICAgICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgICAgc3RhcnRUaW1lOiBzdGFydFRpbWUsXG4gICAgICAgIHN0YXJ0WDogc3RhcnRYLFxuICAgICAgICBzdGFydFk6IHN0YXJ0WSxcbiAgICAgICAgeDogeCxcbiAgICAgICAgeTogeVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gT1JJR0lOQUwgTUVUSE9EUyBPVkVSUklERVNcbiAgICAvLyB3LnNjcm9sbCBhbmQgdy5zY3JvbGxUb1xuICAgIHcuc2Nyb2xsID0gdy5zY3JvbGxUbyA9IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gYXZvaWQgYWN0aW9uIHdoZW4gbm8gYXJndW1lbnRzIGFyZSBwYXNzZWRcbiAgICAgIGlmIChhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIGF2b2lkIHNtb290aCBiZWhhdmlvciBpZiBub3QgcmVxdWlyZWRcbiAgICAgIGlmIChzaG91bGRCYWlsT3V0KGFyZ3VtZW50c1swXSkgPT09IHRydWUpIHtcbiAgICAgICAgb3JpZ2luYWwuc2Nyb2xsLmNhbGwoXG4gICAgICAgICAgdyxcbiAgICAgICAgICBhcmd1bWVudHNbMF0ubGVmdCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IGFyZ3VtZW50c1swXS5sZWZ0XG4gICAgICAgICAgICA6IHR5cGVvZiBhcmd1bWVudHNbMF0gIT09ICdvYmplY3QnXG4gICAgICAgICAgICAgID8gYXJndW1lbnRzWzBdXG4gICAgICAgICAgICAgIDogdy5zY3JvbGxYIHx8IHcucGFnZVhPZmZzZXQsXG4gICAgICAgICAgLy8gdXNlIHRvcCBwcm9wLCBzZWNvbmQgYXJndW1lbnQgaWYgcHJlc2VudCBvciBmYWxsYmFjayB0byBzY3JvbGxZXG4gICAgICAgICAgYXJndW1lbnRzWzBdLnRvcCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IGFyZ3VtZW50c1swXS50b3BcbiAgICAgICAgICAgIDogYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgPyBhcmd1bWVudHNbMV1cbiAgICAgICAgICAgICAgOiB3LnNjcm9sbFkgfHwgdy5wYWdlWU9mZnNldFxuICAgICAgICApO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gTEVUIFRIRSBTTU9PVEhORVNTIEJFR0lOIVxuICAgICAgc21vb3RoU2Nyb2xsLmNhbGwoXG4gICAgICAgIHcsXG4gICAgICAgIGQuYm9keSxcbiAgICAgICAgYXJndW1lbnRzWzBdLmxlZnQgIT09IHVuZGVmaW5lZFxuICAgICAgICAgID8gfn5hcmd1bWVudHNbMF0ubGVmdFxuICAgICAgICAgIDogdy5zY3JvbGxYIHx8IHcucGFnZVhPZmZzZXQsXG4gICAgICAgIGFyZ3VtZW50c1swXS50b3AgIT09IHVuZGVmaW5lZFxuICAgICAgICAgID8gfn5hcmd1bWVudHNbMF0udG9wXG4gICAgICAgICAgOiB3LnNjcm9sbFkgfHwgdy5wYWdlWU9mZnNldFxuICAgICAgKTtcbiAgICB9O1xuXG4gICAgLy8gdy5zY3JvbGxCeVxuICAgIHcuc2Nyb2xsQnkgPSBmdW5jdGlvbigpIHtcbiAgICAgIC8vIGF2b2lkIGFjdGlvbiB3aGVuIG5vIGFyZ3VtZW50cyBhcmUgcGFzc2VkXG4gICAgICBpZiAoYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBhdm9pZCBzbW9vdGggYmVoYXZpb3IgaWYgbm90IHJlcXVpcmVkXG4gICAgICBpZiAoc2hvdWxkQmFpbE91dChhcmd1bWVudHNbMF0pKSB7XG4gICAgICAgIG9yaWdpbmFsLnNjcm9sbEJ5LmNhbGwoXG4gICAgICAgICAgdyxcbiAgICAgICAgICBhcmd1bWVudHNbMF0ubGVmdCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IGFyZ3VtZW50c1swXS5sZWZ0XG4gICAgICAgICAgICA6IHR5cGVvZiBhcmd1bWVudHNbMF0gIT09ICdvYmplY3QnID8gYXJndW1lbnRzWzBdIDogMCxcbiAgICAgICAgICBhcmd1bWVudHNbMF0udG9wICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgID8gYXJndW1lbnRzWzBdLnRvcFxuICAgICAgICAgICAgOiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDBcbiAgICAgICAgKTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIExFVCBUSEUgU01PT1RITkVTUyBCRUdJTiFcbiAgICAgIHNtb290aFNjcm9sbC5jYWxsKFxuICAgICAgICB3LFxuICAgICAgICBkLmJvZHksXG4gICAgICAgIH5+YXJndW1lbnRzWzBdLmxlZnQgKyAody5zY3JvbGxYIHx8IHcucGFnZVhPZmZzZXQpLFxuICAgICAgICB+fmFyZ3VtZW50c1swXS50b3AgKyAody5zY3JvbGxZIHx8IHcucGFnZVlPZmZzZXQpXG4gICAgICApO1xuICAgIH07XG5cbiAgICAvLyBFbGVtZW50LnByb3RvdHlwZS5zY3JvbGwgYW5kIEVsZW1lbnQucHJvdG90eXBlLnNjcm9sbFRvXG4gICAgRWxlbWVudC5wcm90b3R5cGUuc2Nyb2xsID0gRWxlbWVudC5wcm90b3R5cGUuc2Nyb2xsVG8gPSBmdW5jdGlvbigpIHtcbiAgICAgIC8vIGF2b2lkIGFjdGlvbiB3aGVuIG5vIGFyZ3VtZW50cyBhcmUgcGFzc2VkXG4gICAgICBpZiAoYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBhdm9pZCBzbW9vdGggYmVoYXZpb3IgaWYgbm90IHJlcXVpcmVkXG4gICAgICBpZiAoc2hvdWxkQmFpbE91dChhcmd1bWVudHNbMF0pID09PSB0cnVlKSB7XG4gICAgICAgIC8vIGlmIG9uZSBudW1iZXIgaXMgcGFzc2VkLCB0aHJvdyBlcnJvciB0byBtYXRjaCBGaXJlZm94IGltcGxlbWVudGF0aW9uXG4gICAgICAgIGlmICh0eXBlb2YgYXJndW1lbnRzWzBdID09PSAnbnVtYmVyJyAmJiBhcmd1bWVudHNbMV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcignVmFsdWUgY291bGQgbm90IGJlIGNvbnZlcnRlZCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgb3JpZ2luYWwuZWxlbWVudFNjcm9sbC5jYWxsKFxuICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgLy8gdXNlIGxlZnQgcHJvcCwgZmlyc3QgbnVtYmVyIGFyZ3VtZW50IG9yIGZhbGxiYWNrIHRvIHNjcm9sbExlZnRcbiAgICAgICAgICBhcmd1bWVudHNbMF0ubGVmdCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IH5+YXJndW1lbnRzWzBdLmxlZnRcbiAgICAgICAgICAgIDogdHlwZW9mIGFyZ3VtZW50c1swXSAhPT0gJ29iamVjdCcgPyB+fmFyZ3VtZW50c1swXSA6IHRoaXMuc2Nyb2xsTGVmdCxcbiAgICAgICAgICAvLyB1c2UgdG9wIHByb3AsIHNlY29uZCBhcmd1bWVudCBvciBmYWxsYmFjayB0byBzY3JvbGxUb3BcbiAgICAgICAgICBhcmd1bWVudHNbMF0udG9wICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgID8gfn5hcmd1bWVudHNbMF0udG9wXG4gICAgICAgICAgICA6IGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gfn5hcmd1bWVudHNbMV0gOiB0aGlzLnNjcm9sbFRvcFxuICAgICAgICApO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGxlZnQgPSBhcmd1bWVudHNbMF0ubGVmdDtcbiAgICAgIHZhciB0b3AgPSBhcmd1bWVudHNbMF0udG9wO1xuXG4gICAgICAvLyBMRVQgVEhFIFNNT09USE5FU1MgQkVHSU4hXG4gICAgICBzbW9vdGhTY3JvbGwuY2FsbChcbiAgICAgICAgdGhpcyxcbiAgICAgICAgdGhpcyxcbiAgICAgICAgdHlwZW9mIGxlZnQgPT09ICd1bmRlZmluZWQnID8gdGhpcy5zY3JvbGxMZWZ0IDogfn5sZWZ0LFxuICAgICAgICB0eXBlb2YgdG9wID09PSAndW5kZWZpbmVkJyA/IHRoaXMuc2Nyb2xsVG9wIDogfn50b3BcbiAgICAgICk7XG4gICAgfTtcblxuICAgIC8vIEVsZW1lbnQucHJvdG90eXBlLnNjcm9sbEJ5XG4gICAgRWxlbWVudC5wcm90b3R5cGUuc2Nyb2xsQnkgPSBmdW5jdGlvbigpIHtcbiAgICAgIC8vIGF2b2lkIGFjdGlvbiB3aGVuIG5vIGFyZ3VtZW50cyBhcmUgcGFzc2VkXG4gICAgICBpZiAoYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBhdm9pZCBzbW9vdGggYmVoYXZpb3IgaWYgbm90IHJlcXVpcmVkXG4gICAgICBpZiAoc2hvdWxkQmFpbE91dChhcmd1bWVudHNbMF0pID09PSB0cnVlKSB7XG4gICAgICAgIG9yaWdpbmFsLmVsZW1lbnRTY3JvbGwuY2FsbChcbiAgICAgICAgICB0aGlzLFxuICAgICAgICAgIGFyZ3VtZW50c1swXS5sZWZ0ICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgID8gfn5hcmd1bWVudHNbMF0ubGVmdCArIHRoaXMuc2Nyb2xsTGVmdFxuICAgICAgICAgICAgOiB+fmFyZ3VtZW50c1swXSArIHRoaXMuc2Nyb2xsTGVmdCxcbiAgICAgICAgICBhcmd1bWVudHNbMF0udG9wICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgID8gfn5hcmd1bWVudHNbMF0udG9wICsgdGhpcy5zY3JvbGxUb3BcbiAgICAgICAgICAgIDogfn5hcmd1bWVudHNbMV0gKyB0aGlzLnNjcm9sbFRvcFxuICAgICAgICApO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zY3JvbGwoe1xuICAgICAgICBsZWZ0OiB+fmFyZ3VtZW50c1swXS5sZWZ0ICsgdGhpcy5zY3JvbGxMZWZ0LFxuICAgICAgICB0b3A6IH5+YXJndW1lbnRzWzBdLnRvcCArIHRoaXMuc2Nyb2xsVG9wLFxuICAgICAgICBiZWhhdmlvcjogYXJndW1lbnRzWzBdLmJlaGF2aW9yXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgLy8gRWxlbWVudC5wcm90b3R5cGUuc2Nyb2xsSW50b1ZpZXdcbiAgICBFbGVtZW50LnByb3RvdHlwZS5zY3JvbGxJbnRvVmlldyA9IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gYXZvaWQgc21vb3RoIGJlaGF2aW9yIGlmIG5vdCByZXF1aXJlZFxuICAgICAgaWYgKHNob3VsZEJhaWxPdXQoYXJndW1lbnRzWzBdKSA9PT0gdHJ1ZSkge1xuICAgICAgICBvcmlnaW5hbC5zY3JvbGxJbnRvVmlldy5jYWxsKFxuICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyB0cnVlIDogYXJndW1lbnRzWzBdXG4gICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBMRVQgVEhFIFNNT09USE5FU1MgQkVHSU4hXG4gICAgICB2YXIgc2Nyb2xsYWJsZVBhcmVudCA9IGZpbmRTY3JvbGxhYmxlUGFyZW50KHRoaXMpO1xuICAgICAgdmFyIHBhcmVudFJlY3RzID0gc2Nyb2xsYWJsZVBhcmVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIHZhciBjbGllbnRSZWN0cyA9IHRoaXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICAgIGlmIChzY3JvbGxhYmxlUGFyZW50ICE9PSBkLmJvZHkpIHtcbiAgICAgICAgLy8gcmV2ZWFsIGVsZW1lbnQgaW5zaWRlIHBhcmVudFxuICAgICAgICBzbW9vdGhTY3JvbGwuY2FsbChcbiAgICAgICAgICB0aGlzLFxuICAgICAgICAgIHNjcm9sbGFibGVQYXJlbnQsXG4gICAgICAgICAgc2Nyb2xsYWJsZVBhcmVudC5zY3JvbGxMZWZ0ICsgY2xpZW50UmVjdHMubGVmdCAtIHBhcmVudFJlY3RzLmxlZnQsXG4gICAgICAgICAgc2Nyb2xsYWJsZVBhcmVudC5zY3JvbGxUb3AgKyBjbGllbnRSZWN0cy50b3AgLSBwYXJlbnRSZWN0cy50b3BcbiAgICAgICAgKTtcblxuICAgICAgICAvLyByZXZlYWwgcGFyZW50IGluIHZpZXdwb3J0IHVubGVzcyBpcyBmaXhlZFxuICAgICAgICBpZiAody5nZXRDb21wdXRlZFN0eWxlKHNjcm9sbGFibGVQYXJlbnQpLnBvc2l0aW9uICE9PSAnZml4ZWQnKSB7XG4gICAgICAgICAgdy5zY3JvbGxCeSh7XG4gICAgICAgICAgICBsZWZ0OiBwYXJlbnRSZWN0cy5sZWZ0LFxuICAgICAgICAgICAgdG9wOiBwYXJlbnRSZWN0cy50b3AsXG4gICAgICAgICAgICBiZWhhdmlvcjogJ3Ntb290aCdcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gcmV2ZWFsIGVsZW1lbnQgaW4gdmlld3BvcnRcbiAgICAgICAgdy5zY3JvbGxCeSh7XG4gICAgICAgICAgbGVmdDogY2xpZW50UmVjdHMubGVmdCxcbiAgICAgICAgICB0b3A6IGNsaWVudFJlY3RzLnRvcCxcbiAgICAgICAgICBiZWhhdmlvcjogJ3Ntb290aCdcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIHtcbiAgICAvLyBjb21tb25qc1xuICAgIG1vZHVsZS5leHBvcnRzID0geyBwb2x5ZmlsbDogcG9seWZpbGwgfTtcbiAgfVxuXG59KCkpO1xufSk7XG52YXIgc21vb3Roc2Nyb2xsXzEgPSBzbW9vdGhzY3JvbGwucG9seWZpbGw7XG5cbnZhciBfZGVmYXVsdCQxID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQ29yZSkge1xuICBfaW5oZXJpdHMoX2RlZmF1bHQsIF9Db3JlKTtcblxuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKF9kZWZhdWx0KTtcblxuICBmdW5jdGlvbiBfZGVmYXVsdCgpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgX2RlZmF1bHQpO1xuXG4gICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBvcHRpb25zKTtcblxuICAgIGlmIChfdGhpcy5yZXNldE5hdGl2ZVNjcm9sbCkge1xuICAgICAgaWYgKGhpc3Rvcnkuc2Nyb2xsUmVzdG9yYXRpb24pIHtcbiAgICAgICAgaGlzdG9yeS5zY3JvbGxSZXN0b3JhdGlvbiA9ICdtYW51YWwnO1xuICAgICAgfVxuXG4gICAgICB3aW5kb3cuc2Nyb2xsVG8oMCwgMCk7XG4gICAgfVxuXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIF90aGlzLmNoZWNrU2Nyb2xsLCBmYWxzZSk7XG5cbiAgICBpZiAod2luZG93LnNtb290aHNjcm9sbFBvbHlmaWxsID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHdpbmRvdy5zbW9vdGhzY3JvbGxQb2x5ZmlsbCA9IHNtb290aHNjcm9sbDtcbiAgICAgIHdpbmRvdy5zbW9vdGhzY3JvbGxQb2x5ZmlsbC5wb2x5ZmlsbCgpO1xuICAgIH1cblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhfZGVmYXVsdCwgW3tcbiAgICBrZXk6IFwiaW5pdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgdGhpcy5pbnN0YW5jZS5zY3JvbGwueSA9IHdpbmRvdy5wYWdlWU9mZnNldDtcbiAgICAgIHRoaXMuYWRkRWxlbWVudHMoKTtcbiAgICAgIHRoaXMuZGV0ZWN0RWxlbWVudHMoKTtcblxuICAgICAgX2dldChfZ2V0UHJvdG90eXBlT2YoX2RlZmF1bHQucHJvdG90eXBlKSwgXCJpbml0XCIsIHRoaXMpLmNhbGwodGhpcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNoZWNrU2Nyb2xsXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNoZWNrU2Nyb2xsKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIF9nZXQoX2dldFByb3RvdHlwZU9mKF9kZWZhdWx0LnByb3RvdHlwZSksIFwiY2hlY2tTY3JvbGxcIiwgdGhpcykuY2FsbCh0aGlzKTtcblxuICAgICAgaWYgKHRoaXMuZ2V0RGlyZWN0aW9uKSB7XG4gICAgICAgIHRoaXMuYWRkRGlyZWN0aW9uKCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmdldFNwZWVkKSB7XG4gICAgICAgIHRoaXMuYWRkU3BlZWQoKTtcbiAgICAgICAgdGhpcy5zcGVlZFRzID0gRGF0ZS5ub3coKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5pbnN0YW5jZS5zY3JvbGwueSA9IHdpbmRvdy5wYWdlWU9mZnNldDtcblxuICAgICAgaWYgKE9iamVjdC5lbnRyaWVzKHRoaXMuZWxzKS5sZW5ndGgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmhhc1Njcm9sbFRpY2tpbmcpIHtcbiAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMyLmRldGVjdEVsZW1lbnRzKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdGhpcy5oYXNTY3JvbGxUaWNraW5nID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJhZGREaXJlY3Rpb25cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkRGlyZWN0aW9uKCkge1xuICAgICAgaWYgKHdpbmRvdy5wYWdlWU9mZnNldCA+IHRoaXMuaW5zdGFuY2Uuc2Nyb2xsLnkpIHtcbiAgICAgICAgaWYgKHRoaXMuaW5zdGFuY2UuZGlyZWN0aW9uICE9PSAnZG93bicpIHtcbiAgICAgICAgICB0aGlzLmluc3RhbmNlLmRpcmVjdGlvbiA9ICdkb3duJztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh3aW5kb3cucGFnZVlPZmZzZXQgPCB0aGlzLmluc3RhbmNlLnNjcm9sbC55KSB7XG4gICAgICAgIGlmICh0aGlzLmluc3RhbmNlLmRpcmVjdGlvbiAhPT0gJ3VwJykge1xuICAgICAgICAgIHRoaXMuaW5zdGFuY2UuZGlyZWN0aW9uID0gJ3VwJztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJhZGRTcGVlZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRTcGVlZCgpIHtcbiAgICAgIGlmICh3aW5kb3cucGFnZVlPZmZzZXQgIT0gdGhpcy5pbnN0YW5jZS5zY3JvbGwueSkge1xuICAgICAgICB0aGlzLmluc3RhbmNlLnNwZWVkID0gKHdpbmRvdy5wYWdlWU9mZnNldCAtIHRoaXMuaW5zdGFuY2Uuc2Nyb2xsLnkpIC8gTWF0aC5tYXgoMSwgRGF0ZS5ub3coKSAtIHRoaXMuc3BlZWRUcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmluc3RhbmNlLnNwZWVkID0gMDtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVzaXplXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlc2l6ZSgpIHtcbiAgICAgIGlmIChPYmplY3QuZW50cmllcyh0aGlzLmVscykubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMud2luZG93SGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xuICAgICAgICB0aGlzLnVwZGF0ZUVsZW1lbnRzKCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImFkZEVsZW1lbnRzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZEVsZW1lbnRzKCkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIHRoaXMuZWxzID0ge307XG4gICAgICB2YXIgZWxzID0gdGhpcy5lbC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS0nICsgdGhpcy5uYW1lICsgJ10nKTtcbiAgICAgIGVscy5mb3JFYWNoKGZ1bmN0aW9uIChlbCwgaW5kZXgpIHtcbiAgICAgICAgdmFyIEJDUiA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICB2YXIgY2wgPSBlbC5kYXRhc2V0W190aGlzMy5uYW1lICsgJ0NsYXNzJ10gfHwgX3RoaXMzW1wiY2xhc3NcIl07XG4gICAgICAgIHZhciBpZCA9IHR5cGVvZiBlbC5kYXRhc2V0W190aGlzMy5uYW1lICsgJ0lkJ10gPT09ICdzdHJpbmcnID8gZWwuZGF0YXNldFtfdGhpczMubmFtZSArICdJZCddIDogaW5kZXg7XG4gICAgICAgIHZhciB0b3A7XG4gICAgICAgIHZhciBsZWZ0O1xuICAgICAgICB2YXIgb2Zmc2V0ID0gdHlwZW9mIGVsLmRhdGFzZXRbX3RoaXMzLm5hbWUgKyAnT2Zmc2V0J10gPT09ICdzdHJpbmcnID8gZWwuZGF0YXNldFtfdGhpczMubmFtZSArICdPZmZzZXQnXS5zcGxpdCgnLCcpIDogX3RoaXMzLm9mZnNldDtcbiAgICAgICAgdmFyIHJlcGVhdCA9IGVsLmRhdGFzZXRbX3RoaXMzLm5hbWUgKyAnUmVwZWF0J107XG4gICAgICAgIHZhciBjYWxsID0gZWwuZGF0YXNldFtfdGhpczMubmFtZSArICdDYWxsJ107XG4gICAgICAgIHZhciB0YXJnZXQgPSBlbC5kYXRhc2V0W190aGlzMy5uYW1lICsgJ1RhcmdldCddO1xuICAgICAgICB2YXIgdGFyZ2V0RWw7XG5cbiAgICAgICAgaWYgKHRhcmdldCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdGFyZ2V0RWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiXCIuY29uY2F0KHRhcmdldCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRhcmdldEVsID0gZWw7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdGFyZ2V0RWxCQ1IgPSB0YXJnZXRFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgdG9wID0gdGFyZ2V0RWxCQ1IudG9wICsgX3RoaXMzLmluc3RhbmNlLnNjcm9sbC55O1xuICAgICAgICBsZWZ0ID0gdGFyZ2V0RWxCQ1IubGVmdCArIF90aGlzMy5pbnN0YW5jZS5zY3JvbGwueDtcbiAgICAgICAgdmFyIGJvdHRvbSA9IHRvcCArIHRhcmdldEVsLm9mZnNldEhlaWdodDtcbiAgICAgICAgdmFyIHJpZ2h0ID0gbGVmdCArIHRhcmdldEVsLm9mZnNldFdpZHRoO1xuXG4gICAgICAgIGlmIChyZXBlYXQgPT0gJ2ZhbHNlJykge1xuICAgICAgICAgIHJlcGVhdCA9IGZhbHNlO1xuICAgICAgICB9IGVsc2UgaWYgKHJlcGVhdCAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICByZXBlYXQgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlcGVhdCA9IF90aGlzMy5yZXBlYXQ7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcmVsYXRpdmVPZmZzZXQgPSBfdGhpczMuZ2V0UmVsYXRpdmVPZmZzZXQob2Zmc2V0KTtcblxuICAgICAgICB0b3AgPSB0b3AgKyByZWxhdGl2ZU9mZnNldFswXTtcbiAgICAgICAgYm90dG9tID0gYm90dG9tIC0gcmVsYXRpdmVPZmZzZXRbMV07XG4gICAgICAgIHZhciBtYXBwZWRFbCA9IHtcbiAgICAgICAgICBlbDogZWwsXG4gICAgICAgICAgdGFyZ2V0RWw6IHRhcmdldEVsLFxuICAgICAgICAgIGlkOiBpZCxcbiAgICAgICAgICBcImNsYXNzXCI6IGNsLFxuICAgICAgICAgIHRvcDogdG9wLFxuICAgICAgICAgIGJvdHRvbTogYm90dG9tLFxuICAgICAgICAgIGxlZnQ6IGxlZnQsXG4gICAgICAgICAgcmlnaHQ6IHJpZ2h0LFxuICAgICAgICAgIG9mZnNldDogb2Zmc2V0LFxuICAgICAgICAgIHByb2dyZXNzOiAwLFxuICAgICAgICAgIHJlcGVhdDogcmVwZWF0LFxuICAgICAgICAgIGluVmlldzogZmFsc2UsXG4gICAgICAgICAgY2FsbDogY2FsbFxuICAgICAgICB9O1xuICAgICAgICBfdGhpczMuZWxzW2lkXSA9IG1hcHBlZEVsO1xuXG4gICAgICAgIGlmIChlbC5jbGFzc0xpc3QuY29udGFpbnMoY2wpKSB7XG4gICAgICAgICAgX3RoaXMzLnNldEluVmlldyhfdGhpczMuZWxzW2lkXSwgaWQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidXBkYXRlRWxlbWVudHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlRWxlbWVudHMoKSB7XG4gICAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgICAgT2JqZWN0LmVudHJpZXModGhpcy5lbHMpLmZvckVhY2goZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgICAgdmFyIF9yZWYyID0gX3NsaWNlZFRvQXJyYXkoX3JlZiwgMiksXG4gICAgICAgICAgICBpID0gX3JlZjJbMF0sXG4gICAgICAgICAgICBlbCA9IF9yZWYyWzFdO1xuXG4gICAgICAgIHZhciB0b3AgPSBlbC50YXJnZXRFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AgKyBfdGhpczQuaW5zdGFuY2Uuc2Nyb2xsLnk7XG5cbiAgICAgICAgdmFyIGJvdHRvbSA9IHRvcCArIGVsLnRhcmdldEVsLm9mZnNldEhlaWdodDtcblxuICAgICAgICB2YXIgcmVsYXRpdmVPZmZzZXQgPSBfdGhpczQuZ2V0UmVsYXRpdmVPZmZzZXQoZWwub2Zmc2V0KTtcblxuICAgICAgICBfdGhpczQuZWxzW2ldLnRvcCA9IHRvcCArIHJlbGF0aXZlT2Zmc2V0WzBdO1xuICAgICAgICBfdGhpczQuZWxzW2ldLmJvdHRvbSA9IGJvdHRvbSAtIHJlbGF0aXZlT2Zmc2V0WzFdO1xuICAgICAgfSk7XG4gICAgICB0aGlzLmhhc1Njcm9sbFRpY2tpbmcgPSBmYWxzZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0UmVsYXRpdmVPZmZzZXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UmVsYXRpdmVPZmZzZXQob2Zmc2V0KSB7XG4gICAgICB2YXIgcmVsYXRpdmVPZmZzZXQgPSBbMCwgMF07XG5cbiAgICAgIGlmIChvZmZzZXQpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvZmZzZXQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAodHlwZW9mIG9mZnNldFtpXSA9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgaWYgKG9mZnNldFtpXS5pbmNsdWRlcygnJScpKSB7XG4gICAgICAgICAgICAgIHJlbGF0aXZlT2Zmc2V0W2ldID0gcGFyc2VJbnQob2Zmc2V0W2ldLnJlcGxhY2UoJyUnLCAnJykgKiB0aGlzLndpbmRvd0hlaWdodCAvIDEwMCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZWxhdGl2ZU9mZnNldFtpXSA9IHBhcnNlSW50KG9mZnNldFtpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlbGF0aXZlT2Zmc2V0W2ldID0gb2Zmc2V0W2ldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVsYXRpdmVPZmZzZXQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNjcm9sbCB0byBhIGRlc2lyZWQgdGFyZ2V0LlxuICAgICAqXG4gICAgICogQHBhcmFtICBBdmFpbGFibGUgb3B0aW9ucyA6XG4gICAgICogICAgICAgICAgdGFyZ2V0IHtub2RlLCBzdHJpbmcsIFwidG9wXCIsIFwiYm90dG9tXCIsIGludH0gLSBUaGUgRE9NIGVsZW1lbnQgd2Ugd2FudCB0byBzY3JvbGwgdG9cbiAgICAgKiAgICAgICAgICBvcHRpb25zIHtvYmplY3R9IC0gT3B0aW9ucyBvYmplY3QgZm9yIGFkZGl0aW9ubmFsIHNldHRpbmdzLlxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJzY3JvbGxUb1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzY3JvbGxUbyh0YXJnZXQpIHtcbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICAgIC8vIFBhcnNlIG9wdGlvbnNcbiAgICAgIHZhciBvZmZzZXQgPSBwYXJzZUludChvcHRpb25zLm9mZnNldCkgfHwgMDsgLy8gQW4gb2Zmc2V0IHRvIGFwcGx5IG9uIHRvcCBvZiBnaXZlbiBgdGFyZ2V0YCBvciBgc291cmNlRWxlbWAncyB0YXJnZXRcblxuICAgICAgdmFyIGNhbGxiYWNrID0gb3B0aW9ucy5jYWxsYmFjayA/IG9wdGlvbnMuY2FsbGJhY2sgOiBmYWxzZTsgLy8gZnVuY3Rpb24gY2FsbGVkIHdoZW4gc2Nyb2xsVG8gY29tcGxldGVzIChub3RlIHRoYXQgaXQgd29uJ3Qgd2FpdCBmb3IgbGVycCB0byBzdGFiaWxpemUpXG5cbiAgICAgIGlmICh0eXBlb2YgdGFyZ2V0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAvLyBTZWxlY3RvciBvciBib3VuZGFyaWVzXG4gICAgICAgIGlmICh0YXJnZXQgPT09ICd0b3AnKSB7XG4gICAgICAgICAgdGFyZ2V0ID0gdGhpcy5odG1sO1xuICAgICAgICB9IGVsc2UgaWYgKHRhcmdldCA9PT0gJ2JvdHRvbScpIHtcbiAgICAgICAgICB0YXJnZXQgPSB0aGlzLmh0bWwub2Zmc2V0SGVpZ2h0IC0gd2luZG93LmlubmVySGVpZ2h0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gSWYgdGhlIHF1ZXJ5IGZhaWxzLCBhYm9ydFxuXG4gICAgICAgICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHRhcmdldCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgLy8gQWJzb2x1dGUgY29vcmRpbmF0ZVxuICAgICAgICB0YXJnZXQgPSBwYXJzZUludCh0YXJnZXQpO1xuICAgICAgfSBlbHNlIGlmICh0YXJnZXQgJiYgdGFyZ2V0LnRhZ05hbWUpIDsgZWxzZSB7XG4gICAgICAgIGNvbnNvbGUud2FybignYHRhcmdldGAgcGFyYW1ldGVyIGlzIG5vdCB2YWxpZCcpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIFdlIGhhdmUgYSB0YXJnZXQgdGhhdCBpcyBub3QgYSBjb29yZGluYXRlIHlldCwgZ2V0IGl0XG5cblxuICAgICAgaWYgKHR5cGVvZiB0YXJnZXQgIT09ICdudW1iZXInKSB7XG4gICAgICAgIG9mZnNldCA9IHRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AgKyBvZmZzZXQgKyB0aGlzLmluc3RhbmNlLnNjcm9sbC55O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb2Zmc2V0ID0gdGFyZ2V0ICsgb2Zmc2V0O1xuICAgICAgfVxuXG4gICAgICB2YXIgaXNUYXJnZXRSZWFjaGVkID0gZnVuY3Rpb24gaXNUYXJnZXRSZWFjaGVkKCkge1xuICAgICAgICByZXR1cm4gcGFyc2VJbnQod2luZG93LnBhZ2VZT2Zmc2V0KSA9PT0gcGFyc2VJbnQob2Zmc2V0KTtcbiAgICAgIH07XG5cbiAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICBpZiAoaXNUYXJnZXRSZWFjaGVkKCkpIHtcbiAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgb25TY3JvbGwgPSBmdW5jdGlvbiBvblNjcm9sbCgpIHtcbiAgICAgICAgICAgIGlmIChpc1RhcmdldFJlYWNoZWQoKSkge1xuICAgICAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgb25TY3JvbGwpO1xuICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG5cbiAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgb25TY3JvbGwpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHdpbmRvdy5zY3JvbGxUbyh7XG4gICAgICAgIHRvcDogb2Zmc2V0LFxuICAgICAgICBiZWhhdmlvcjogb3B0aW9ucy5kdXJhdGlvbiA9PT0gMCA/ICdhdXRvJyA6ICdzbW9vdGgnXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidXBkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICAgIHRoaXMuYWRkRWxlbWVudHMoKTtcbiAgICAgIHRoaXMuZGV0ZWN0RWxlbWVudHMoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZGVzdHJveVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgX2dldChfZ2V0UHJvdG90eXBlT2YoX2RlZmF1bHQucHJvdG90eXBlKSwgXCJkZXN0cm95XCIsIHRoaXMpLmNhbGwodGhpcyk7XG5cbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB0aGlzLmNoZWNrU2Nyb2xsLCBmYWxzZSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIF9kZWZhdWx0O1xufShfZGVmYXVsdCk7XG5cbi8qXG5vYmplY3QtYXNzaWduXG4oYykgU2luZHJlIFNvcmh1c1xuQGxpY2Vuc2UgTUlUXG4qL1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblx0XHR0ZXN0MVs1XSA9ICdkZSc7XG5cdFx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QxKVswXSA9PT0gJzUnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MiA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuXHRcdFx0dGVzdDJbJ18nICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xuXHRcdH1cblx0XHR2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbiAobikge1xuXHRcdFx0cmV0dXJuIHRlc3QyW25dO1xuXHRcdH0pO1xuXHRcdGlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDMgPSB7fTtcblx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHtcblx0XHRcdHRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7XG5cdFx0fSk7XG5cdFx0aWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09XG5cdFx0XHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxudmFyIG9iamVjdEFzc2lnbiA9IHNob3VsZFVzZU5hdGl2ZSgpID8gT2JqZWN0LmFzc2lnbiA6IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuXHR2YXIgZnJvbTtcblx0dmFyIHRvID0gdG9PYmplY3QodGFyZ2V0KTtcblx0dmFyIHN5bWJvbHM7XG5cblx0Zm9yICh2YXIgcyA9IDE7IHMgPCBhcmd1bWVudHMubGVuZ3RoOyBzKyspIHtcblx0XHRmcm9tID0gT2JqZWN0KGFyZ3VtZW50c1tzXSk7XG5cblx0XHRmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuXHRcdFx0aWYgKGhhc093blByb3BlcnR5LmNhbGwoZnJvbSwga2V5KSkge1xuXHRcdFx0XHR0b1trZXldID0gZnJvbVtrZXldO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcblx0XHRcdHN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZnJvbSk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKHByb3BJc0VudW1lcmFibGUuY2FsbChmcm9tLCBzeW1ib2xzW2ldKSkge1xuXHRcdFx0XHRcdHRvW3N5bWJvbHNbaV1dID0gZnJvbVtzeW1ib2xzW2ldXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0bztcbn07XG5cbmZ1bmN0aW9uIEUgKCkge1xuICAvLyBLZWVwIHRoaXMgZW1wdHkgc28gaXQncyBlYXNpZXIgdG8gaW5oZXJpdCBmcm9tXG4gIC8vICh2aWEgaHR0cHM6Ly9naXRodWIuY29tL2xpcHNtYWNrIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL3Njb3R0Y29yZ2FuL3RpbnktZW1pdHRlci9pc3N1ZXMvMylcbn1cblxuRS5wcm90b3R5cGUgPSB7XG4gIG9uOiBmdW5jdGlvbiAobmFtZSwgY2FsbGJhY2ssIGN0eCkge1xuICAgIHZhciBlID0gdGhpcy5lIHx8ICh0aGlzLmUgPSB7fSk7XG5cbiAgICAoZVtuYW1lXSB8fCAoZVtuYW1lXSA9IFtdKSkucHVzaCh7XG4gICAgICBmbjogY2FsbGJhY2ssXG4gICAgICBjdHg6IGN0eFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgb25jZTogZnVuY3Rpb24gKG5hbWUsIGNhbGxiYWNrLCBjdHgpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgZnVuY3Rpb24gbGlzdGVuZXIgKCkge1xuICAgICAgc2VsZi5vZmYobmFtZSwgbGlzdGVuZXIpO1xuICAgICAgY2FsbGJhY2suYXBwbHkoY3R4LCBhcmd1bWVudHMpO1xuICAgIH1cbiAgICBsaXN0ZW5lci5fID0gY2FsbGJhY2s7XG4gICAgcmV0dXJuIHRoaXMub24obmFtZSwgbGlzdGVuZXIsIGN0eCk7XG4gIH0sXG5cbiAgZW1pdDogZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB2YXIgZGF0YSA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICB2YXIgZXZ0QXJyID0gKCh0aGlzLmUgfHwgKHRoaXMuZSA9IHt9KSlbbmFtZV0gfHwgW10pLnNsaWNlKCk7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBsZW4gPSBldnRBcnIubGVuZ3RoO1xuXG4gICAgZm9yIChpOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGV2dEFycltpXS5mbi5hcHBseShldnRBcnJbaV0uY3R4LCBkYXRhKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICBvZmY6IGZ1bmN0aW9uIChuYW1lLCBjYWxsYmFjaykge1xuICAgIHZhciBlID0gdGhpcy5lIHx8ICh0aGlzLmUgPSB7fSk7XG4gICAgdmFyIGV2dHMgPSBlW25hbWVdO1xuICAgIHZhciBsaXZlRXZlbnRzID0gW107XG5cbiAgICBpZiAoZXZ0cyAmJiBjYWxsYmFjaykge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGV2dHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgaWYgKGV2dHNbaV0uZm4gIT09IGNhbGxiYWNrICYmIGV2dHNbaV0uZm4uXyAhPT0gY2FsbGJhY2spXG4gICAgICAgICAgbGl2ZUV2ZW50cy5wdXNoKGV2dHNbaV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJlbW92ZSBldmVudCBmcm9tIHF1ZXVlIHRvIHByZXZlbnQgbWVtb3J5IGxlYWtcbiAgICAvLyBTdWdnZXN0ZWQgYnkgaHR0cHM6Ly9naXRodWIuY29tL2xhemRcbiAgICAvLyBSZWY6IGh0dHBzOi8vZ2l0aHViLmNvbS9zY290dGNvcmdhbi90aW55LWVtaXR0ZXIvY29tbWl0L2M2ZWJmYWE5YmM5NzNiMzNkMTEwYTg0YTMwNzc0MmI3Y2Y5NGM5NTMjY29tbWl0Y29tbWVudC01MDI0OTEwXG5cbiAgICAobGl2ZUV2ZW50cy5sZW5ndGgpXG4gICAgICA/IGVbbmFtZV0gPSBsaXZlRXZlbnRzXG4gICAgICA6IGRlbGV0ZSBlW25hbWVdO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn07XG5cbnZhciB0aW55RW1pdHRlciA9IEU7XG5cbnZhciBsZXRoYXJneSA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHtcbi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS45LjJcbihmdW5jdGlvbigpIHtcbiAgdmFyIHJvb3Q7XG5cbiAgcm9vdCA9ICBleHBvcnRzICE9PSBudWxsID8gZXhwb3J0cyA6IHRoaXM7XG5cbiAgcm9vdC5MZXRoYXJneSA9IChmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiBMZXRoYXJneShzdGFiaWxpdHksIHNlbnNpdGl2aXR5LCB0b2xlcmFuY2UsIGRlbGF5KSB7XG4gICAgICB0aGlzLnN0YWJpbGl0eSA9IHN0YWJpbGl0eSAhPSBudWxsID8gTWF0aC5hYnMoc3RhYmlsaXR5KSA6IDg7XG4gICAgICB0aGlzLnNlbnNpdGl2aXR5ID0gc2Vuc2l0aXZpdHkgIT0gbnVsbCA/IDEgKyBNYXRoLmFicyhzZW5zaXRpdml0eSkgOiAxMDA7XG4gICAgICB0aGlzLnRvbGVyYW5jZSA9IHRvbGVyYW5jZSAhPSBudWxsID8gMSArIE1hdGguYWJzKHRvbGVyYW5jZSkgOiAxLjE7XG4gICAgICB0aGlzLmRlbGF5ID0gZGVsYXkgIT0gbnVsbCA/IGRlbGF5IDogMTUwO1xuICAgICAgdGhpcy5sYXN0VXBEZWx0YXMgPSAoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBpLCByZWYsIHJlc3VsdHM7XG4gICAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgICAgZm9yIChpID0gMSwgcmVmID0gdGhpcy5zdGFiaWxpdHkgKiAyOyAxIDw9IHJlZiA/IGkgPD0gcmVmIDogaSA+PSByZWY7IDEgPD0gcmVmID8gaSsrIDogaS0tKSB7XG4gICAgICAgICAgcmVzdWx0cy5wdXNoKG51bGwpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgICAgfSkuY2FsbCh0aGlzKTtcbiAgICAgIHRoaXMubGFzdERvd25EZWx0YXMgPSAoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBpLCByZWYsIHJlc3VsdHM7XG4gICAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgICAgZm9yIChpID0gMSwgcmVmID0gdGhpcy5zdGFiaWxpdHkgKiAyOyAxIDw9IHJlZiA/IGkgPD0gcmVmIDogaSA+PSByZWY7IDEgPD0gcmVmID8gaSsrIDogaS0tKSB7XG4gICAgICAgICAgcmVzdWx0cy5wdXNoKG51bGwpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgICAgfSkuY2FsbCh0aGlzKTtcbiAgICAgIHRoaXMuZGVsdGFzVGltZXN0YW1wID0gKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgaSwgcmVmLCByZXN1bHRzO1xuICAgICAgICByZXN1bHRzID0gW107XG4gICAgICAgIGZvciAoaSA9IDEsIHJlZiA9IHRoaXMuc3RhYmlsaXR5ICogMjsgMSA8PSByZWYgPyBpIDw9IHJlZiA6IGkgPj0gcmVmOyAxIDw9IHJlZiA/IGkrKyA6IGktLSkge1xuICAgICAgICAgIHJlc3VsdHMucHVzaChudWxsKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICAgIH0pLmNhbGwodGhpcyk7XG4gICAgfVxuXG4gICAgTGV0aGFyZ3kucHJvdG90eXBlLmNoZWNrID0gZnVuY3Rpb24oZSkge1xuICAgICAgdmFyIGxhc3REZWx0YTtcbiAgICAgIGUgPSBlLm9yaWdpbmFsRXZlbnQgfHwgZTtcbiAgICAgIGlmIChlLndoZWVsRGVsdGEgIT0gbnVsbCkge1xuICAgICAgICBsYXN0RGVsdGEgPSBlLndoZWVsRGVsdGE7XG4gICAgICB9IGVsc2UgaWYgKGUuZGVsdGFZICE9IG51bGwpIHtcbiAgICAgICAgbGFzdERlbHRhID0gZS5kZWx0YVkgKiAtNDA7XG4gICAgICB9IGVsc2UgaWYgKChlLmRldGFpbCAhPSBudWxsKSB8fCBlLmRldGFpbCA9PT0gMCkge1xuICAgICAgICBsYXN0RGVsdGEgPSBlLmRldGFpbCAqIC00MDtcbiAgICAgIH1cbiAgICAgIHRoaXMuZGVsdGFzVGltZXN0YW1wLnB1c2goRGF0ZS5ub3coKSk7XG4gICAgICB0aGlzLmRlbHRhc1RpbWVzdGFtcC5zaGlmdCgpO1xuICAgICAgaWYgKGxhc3REZWx0YSA+IDApIHtcbiAgICAgICAgdGhpcy5sYXN0VXBEZWx0YXMucHVzaChsYXN0RGVsdGEpO1xuICAgICAgICB0aGlzLmxhc3RVcERlbHRhcy5zaGlmdCgpO1xuICAgICAgICByZXR1cm4gdGhpcy5pc0luZXJ0aWEoMSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmxhc3REb3duRGVsdGFzLnB1c2gobGFzdERlbHRhKTtcbiAgICAgICAgdGhpcy5sYXN0RG93bkRlbHRhcy5zaGlmdCgpO1xuICAgICAgICByZXR1cm4gdGhpcy5pc0luZXJ0aWEoLTEpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBMZXRoYXJneS5wcm90b3R5cGUuaXNJbmVydGlhID0gZnVuY3Rpb24oZGlyZWN0aW9uKSB7XG4gICAgICB2YXIgbGFzdERlbHRhcywgbGFzdERlbHRhc05ldywgbGFzdERlbHRhc09sZCwgbmV3QXZlcmFnZSwgbmV3U3VtLCBvbGRBdmVyYWdlLCBvbGRTdW07XG4gICAgICBsYXN0RGVsdGFzID0gZGlyZWN0aW9uID09PSAtMSA/IHRoaXMubGFzdERvd25EZWx0YXMgOiB0aGlzLmxhc3RVcERlbHRhcztcbiAgICAgIGlmIChsYXN0RGVsdGFzWzBdID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBkaXJlY3Rpb247XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5kZWx0YXNUaW1lc3RhbXBbKHRoaXMuc3RhYmlsaXR5ICogMikgLSAyXSArIHRoaXMuZGVsYXkgPiBEYXRlLm5vdygpICYmIGxhc3REZWx0YXNbMF0gPT09IGxhc3REZWx0YXNbKHRoaXMuc3RhYmlsaXR5ICogMikgLSAxXSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBsYXN0RGVsdGFzT2xkID0gbGFzdERlbHRhcy5zbGljZSgwLCB0aGlzLnN0YWJpbGl0eSk7XG4gICAgICBsYXN0RGVsdGFzTmV3ID0gbGFzdERlbHRhcy5zbGljZSh0aGlzLnN0YWJpbGl0eSwgdGhpcy5zdGFiaWxpdHkgKiAyKTtcbiAgICAgIG9sZFN1bSA9IGxhc3REZWx0YXNPbGQucmVkdWNlKGZ1bmN0aW9uKHQsIHMpIHtcbiAgICAgICAgcmV0dXJuIHQgKyBzO1xuICAgICAgfSk7XG4gICAgICBuZXdTdW0gPSBsYXN0RGVsdGFzTmV3LnJlZHVjZShmdW5jdGlvbih0LCBzKSB7XG4gICAgICAgIHJldHVybiB0ICsgcztcbiAgICAgIH0pO1xuICAgICAgb2xkQXZlcmFnZSA9IG9sZFN1bSAvIGxhc3REZWx0YXNPbGQubGVuZ3RoO1xuICAgICAgbmV3QXZlcmFnZSA9IG5ld1N1bSAvIGxhc3REZWx0YXNOZXcubGVuZ3RoO1xuICAgICAgaWYgKE1hdGguYWJzKG9sZEF2ZXJhZ2UpIDwgTWF0aC5hYnMobmV3QXZlcmFnZSAqIHRoaXMudG9sZXJhbmNlKSAmJiAodGhpcy5zZW5zaXRpdml0eSA8IE1hdGguYWJzKG5ld0F2ZXJhZ2UpKSkge1xuICAgICAgICByZXR1cm4gZGlyZWN0aW9uO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBMZXRoYXJneS5wcm90b3R5cGUuc2hvd0xhc3RVcERlbHRhcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMubGFzdFVwRGVsdGFzO1xuICAgIH07XG5cbiAgICBMZXRoYXJneS5wcm90b3R5cGUuc2hvd0xhc3REb3duRGVsdGFzID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5sYXN0RG93bkRlbHRhcztcbiAgICB9O1xuXG4gICAgcmV0dXJuIExldGhhcmd5O1xuXG4gIH0pKCk7XG5cbn0pLmNhbGwoY29tbW9uanNHbG9iYWwpO1xufSk7XG5cbnZhciBzdXBwb3J0ID0gKGZ1bmN0aW9uIGdldFN1cHBvcnQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaGFzV2hlZWxFdmVudDogJ29ud2hlZWwnIGluIGRvY3VtZW50LFxuICAgICAgICBoYXNNb3VzZVdoZWVsRXZlbnQ6ICdvbm1vdXNld2hlZWwnIGluIGRvY3VtZW50LFxuICAgICAgICBoYXNUb3VjaDogKCdvbnRvdWNoc3RhcnQnIGluIHdpbmRvdykgfHwgd2luZG93LlRvdWNoRXZlbnQgfHwgd2luZG93LkRvY3VtZW50VG91Y2ggJiYgZG9jdW1lbnQgaW5zdGFuY2VvZiBEb2N1bWVudFRvdWNoLFxuICAgICAgICBoYXNUb3VjaFdpbjogbmF2aWdhdG9yLm1zTWF4VG91Y2hQb2ludHMgJiYgbmF2aWdhdG9yLm1zTWF4VG91Y2hQb2ludHMgPiAxLFxuICAgICAgICBoYXNQb2ludGVyOiAhIXdpbmRvdy5uYXZpZ2F0b3IubXNQb2ludGVyRW5hYmxlZCxcbiAgICAgICAgaGFzS2V5RG93bjogJ29ua2V5ZG93bicgaW4gZG9jdW1lbnQsXG4gICAgICAgIGlzRmlyZWZveDogbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdGaXJlZm94JykgPiAtMVxuICAgIH07XG59KSgpO1xuXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLFxuICAgIGhhc093blByb3BlcnR5JDEgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG52YXIgYmluZGFsbFN0YW5kYWxvbmUgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICBpZighb2JqZWN0KSByZXR1cm4gY29uc29sZS53YXJuKCdiaW5kQWxsIHJlcXVpcmVzIGF0IGxlYXN0IG9uZSBhcmd1bWVudC4nKTtcblxuICAgIHZhciBmdW5jdGlvbnMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuXG4gICAgaWYgKGZ1bmN0aW9ucy5sZW5ndGggPT09IDApIHtcblxuICAgICAgICBmb3IgKHZhciBtZXRob2QgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgICBpZihoYXNPd25Qcm9wZXJ0eSQxLmNhbGwob2JqZWN0LCBtZXRob2QpKSB7XG4gICAgICAgICAgICAgICAgaWYodHlwZW9mIG9iamVjdFttZXRob2RdID09ICdmdW5jdGlvbicgJiYgdG9TdHJpbmcuY2FsbChvYmplY3RbbWV0aG9kXSkgPT0gXCJbb2JqZWN0IEZ1bmN0aW9uXVwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9ucy5wdXNoKG1ldGhvZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZm9yKHZhciBpID0gMDsgaSA8IGZ1bmN0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgZiA9IGZ1bmN0aW9uc1tpXTtcbiAgICAgICAgb2JqZWN0W2ZdID0gYmluZChvYmplY3RbZl0sIG9iamVjdCk7XG4gICAgfVxufTtcblxuLypcbiAgICBGYXN0ZXIgYmluZCB3aXRob3V0IHNwZWNpZmljLWNhc2UgY2hlY2tpbmcuIChzZWUgaHR0cHM6Ly9jb2RlcndhbGwuY29tL3Avb2kzajN3KS5cbiAgICBiaW5kQWxsIGlzIG9ubHkgbmVlZGVkIGZvciBldmVudHMgYmluZGluZyBzbyBubyBuZWVkIHRvIG1ha2Ugc2xvdyBmaXhlcyBmb3IgY29uc3RydWN0b3JcbiAgICBvciBwYXJ0aWFsIGFwcGxpY2F0aW9uLlxuKi9cbmZ1bmN0aW9uIGJpbmQoZnVuYywgY29udGV4dCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGZ1bmMuYXBwbHkoY29udGV4dCwgYXJndW1lbnRzKTtcbiAgfTtcbn1cblxudmFyIExldGhhcmd5ID0gbGV0aGFyZ3kuTGV0aGFyZ3k7XG5cblxuXG52YXIgRVZUX0lEID0gJ3ZpcnR1YWxzY3JvbGwnO1xuXG52YXIgc3JjID0gVmlydHVhbFNjcm9sbDtcblxudmFyIGtleUNvZGVzID0ge1xuICAgIExFRlQ6IDM3LFxuICAgIFVQOiAzOCxcbiAgICBSSUdIVDogMzksXG4gICAgRE9XTjogNDAsXG4gICAgU1BBQ0U6IDMyXG59O1xuXG5mdW5jdGlvbiBWaXJ0dWFsU2Nyb2xsKG9wdGlvbnMpIHtcbiAgICBiaW5kYWxsU3RhbmRhbG9uZSh0aGlzLCAnX29uV2hlZWwnLCAnX29uTW91c2VXaGVlbCcsICdfb25Ub3VjaFN0YXJ0JywgJ19vblRvdWNoTW92ZScsICdfb25LZXlEb3duJyk7XG5cbiAgICB0aGlzLmVsID0gd2luZG93O1xuICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuZWwpIHtcbiAgICAgICAgdGhpcy5lbCA9IG9wdGlvbnMuZWw7XG4gICAgICAgIGRlbGV0ZSBvcHRpb25zLmVsO1xuICAgIH1cbiAgICB0aGlzLm9wdGlvbnMgPSBvYmplY3RBc3NpZ24oe1xuICAgICAgICBtb3VzZU11bHRpcGxpZXI6IDEsXG4gICAgICAgIHRvdWNoTXVsdGlwbGllcjogMixcbiAgICAgICAgZmlyZWZveE11bHRpcGxpZXI6IDE1LFxuICAgICAgICBrZXlTdGVwOiAxMjAsXG4gICAgICAgIHByZXZlbnRUb3VjaDogZmFsc2UsXG4gICAgICAgIHVucHJldmVudFRvdWNoQ2xhc3M6ICd2cy10b3VjaG1vdmUtYWxsb3dlZCcsXG4gICAgICAgIGxpbWl0SW5lcnRpYTogZmFsc2UsXG4gICAgICAgIHVzZUtleWJvYXJkOiB0cnVlLFxuICAgICAgICB1c2VUb3VjaDogdHJ1ZVxuICAgIH0sIG9wdGlvbnMpO1xuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5saW1pdEluZXJ0aWEpIHRoaXMuX2xldGhhcmd5ID0gbmV3IExldGhhcmd5KCk7XG5cbiAgICB0aGlzLl9lbWl0dGVyID0gbmV3IHRpbnlFbWl0dGVyKCk7XG4gICAgdGhpcy5fZXZlbnQgPSB7XG4gICAgICAgIHk6IDAsXG4gICAgICAgIHg6IDAsXG4gICAgICAgIGRlbHRhWDogMCxcbiAgICAgICAgZGVsdGFZOiAwXG4gICAgfTtcbiAgICB0aGlzLnRvdWNoU3RhcnRYID0gbnVsbDtcbiAgICB0aGlzLnRvdWNoU3RhcnRZID0gbnVsbDtcbiAgICB0aGlzLmJvZHlUb3VjaEFjdGlvbiA9IG51bGw7XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLnBhc3NpdmUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLmxpc3RlbmVyT3B0aW9ucyA9IHtwYXNzaXZlOiB0aGlzLm9wdGlvbnMucGFzc2l2ZX07XG4gICAgfVxufVxuXG5WaXJ0dWFsU2Nyb2xsLnByb3RvdHlwZS5fbm90aWZ5ID0gZnVuY3Rpb24oZSkge1xuICAgIHZhciBldnQgPSB0aGlzLl9ldmVudDtcbiAgICBldnQueCArPSBldnQuZGVsdGFYO1xuICAgIGV2dC55ICs9IGV2dC5kZWx0YVk7XG5cbiAgIHRoaXMuX2VtaXR0ZXIuZW1pdChFVlRfSUQsIHtcbiAgICAgICAgeDogZXZ0LngsXG4gICAgICAgIHk6IGV2dC55LFxuICAgICAgICBkZWx0YVg6IGV2dC5kZWx0YVgsXG4gICAgICAgIGRlbHRhWTogZXZ0LmRlbHRhWSxcbiAgICAgICAgb3JpZ2luYWxFdmVudDogZVxuICAgfSk7XG59O1xuXG5WaXJ0dWFsU2Nyb2xsLnByb3RvdHlwZS5fb25XaGVlbCA9IGZ1bmN0aW9uKGUpIHtcbiAgICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICBpZiAodGhpcy5fbGV0aGFyZ3kgJiYgdGhpcy5fbGV0aGFyZ3kuY2hlY2soZSkgPT09IGZhbHNlKSByZXR1cm47XG4gICAgdmFyIGV2dCA9IHRoaXMuX2V2ZW50O1xuXG4gICAgLy8gSW4gQ2hyb21lIGFuZCBpbiBGaXJlZm94IChhdCBsZWFzdCB0aGUgbmV3IG9uZSlcbiAgICBldnQuZGVsdGFYID0gZS53aGVlbERlbHRhWCB8fCBlLmRlbHRhWCAqIC0xO1xuICAgIGV2dC5kZWx0YVkgPSBlLndoZWVsRGVsdGFZIHx8IGUuZGVsdGFZICogLTE7XG5cbiAgICAvLyBmb3Igb3VyIHB1cnBvc2UgZGVsdGFtb2RlID0gMSBtZWFucyB1c2VyIGlzIG9uIGEgd2hlZWwgbW91c2UsIG5vdCB0b3VjaCBwYWRcbiAgICAvLyByZWFsIG1lYW5pbmc6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9XaGVlbEV2ZW50I0RlbHRhX21vZGVzXG4gICAgaWYoc3VwcG9ydC5pc0ZpcmVmb3ggJiYgZS5kZWx0YU1vZGUgPT0gMSkge1xuICAgICAgICBldnQuZGVsdGFYICo9IG9wdGlvbnMuZmlyZWZveE11bHRpcGxpZXI7XG4gICAgICAgIGV2dC5kZWx0YVkgKj0gb3B0aW9ucy5maXJlZm94TXVsdGlwbGllcjtcbiAgICB9XG5cbiAgICBldnQuZGVsdGFYICo9IG9wdGlvbnMubW91c2VNdWx0aXBsaWVyO1xuICAgIGV2dC5kZWx0YVkgKj0gb3B0aW9ucy5tb3VzZU11bHRpcGxpZXI7XG5cbiAgICB0aGlzLl9ub3RpZnkoZSk7XG59O1xuXG5WaXJ0dWFsU2Nyb2xsLnByb3RvdHlwZS5fb25Nb3VzZVdoZWVsID0gZnVuY3Rpb24oZSkge1xuICAgIGlmICh0aGlzLm9wdGlvbnMubGltaXRJbmVydGlhICYmIHRoaXMuX2xldGhhcmd5LmNoZWNrKGUpID09PSBmYWxzZSkgcmV0dXJuO1xuXG4gICAgdmFyIGV2dCA9IHRoaXMuX2V2ZW50O1xuXG4gICAgLy8gSW4gU2FmYXJpLCBJRSBhbmQgaW4gQ2hyb21lIGlmICd3aGVlbCcgaXNuJ3QgZGVmaW5lZFxuICAgIGV2dC5kZWx0YVggPSAoZS53aGVlbERlbHRhWCkgPyBlLndoZWVsRGVsdGFYIDogMDtcbiAgICBldnQuZGVsdGFZID0gKGUud2hlZWxEZWx0YVkpID8gZS53aGVlbERlbHRhWSA6IGUud2hlZWxEZWx0YTtcblxuICAgIHRoaXMuX25vdGlmeShlKTtcbn07XG5cblZpcnR1YWxTY3JvbGwucHJvdG90eXBlLl9vblRvdWNoU3RhcnQgPSBmdW5jdGlvbihlKSB7XG4gICAgdmFyIHQgPSAoZS50YXJnZXRUb3VjaGVzKSA/IGUudGFyZ2V0VG91Y2hlc1swXSA6IGU7XG4gICAgdGhpcy50b3VjaFN0YXJ0WCA9IHQucGFnZVg7XG4gICAgdGhpcy50b3VjaFN0YXJ0WSA9IHQucGFnZVk7XG59O1xuXG5WaXJ0dWFsU2Nyb2xsLnByb3RvdHlwZS5fb25Ub3VjaE1vdmUgPSBmdW5jdGlvbihlKSB7XG4gICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgaWYob3B0aW9ucy5wcmV2ZW50VG91Y2hcbiAgICAgICAgJiYgIWUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhvcHRpb25zLnVucHJldmVudFRvdWNoQ2xhc3MpKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG5cbiAgICB2YXIgZXZ0ID0gdGhpcy5fZXZlbnQ7XG5cbiAgICB2YXIgdCA9IChlLnRhcmdldFRvdWNoZXMpID8gZS50YXJnZXRUb3VjaGVzWzBdIDogZTtcblxuICAgIGV2dC5kZWx0YVggPSAodC5wYWdlWCAtIHRoaXMudG91Y2hTdGFydFgpICogb3B0aW9ucy50b3VjaE11bHRpcGxpZXI7XG4gICAgZXZ0LmRlbHRhWSA9ICh0LnBhZ2VZIC0gdGhpcy50b3VjaFN0YXJ0WSkgKiBvcHRpb25zLnRvdWNoTXVsdGlwbGllcjtcblxuICAgIHRoaXMudG91Y2hTdGFydFggPSB0LnBhZ2VYO1xuICAgIHRoaXMudG91Y2hTdGFydFkgPSB0LnBhZ2VZO1xuXG4gICAgdGhpcy5fbm90aWZ5KGUpO1xufTtcblxuVmlydHVhbFNjcm9sbC5wcm90b3R5cGUuX29uS2V5RG93biA9IGZ1bmN0aW9uKGUpIHtcbiAgICB2YXIgZXZ0ID0gdGhpcy5fZXZlbnQ7XG4gICAgZXZ0LmRlbHRhWCA9IGV2dC5kZWx0YVkgPSAwO1xuICAgIHZhciB3aW5kb3dIZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQgLSA0MDtcblxuICAgIHN3aXRjaChlLmtleUNvZGUpIHtcbiAgICAgICAgY2FzZSBrZXlDb2Rlcy5MRUZUOlxuICAgICAgICBjYXNlIGtleUNvZGVzLlVQOlxuICAgICAgICAgICAgZXZ0LmRlbHRhWSA9IHRoaXMub3B0aW9ucy5rZXlTdGVwO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBrZXlDb2Rlcy5SSUdIVDpcbiAgICAgICAgY2FzZSBrZXlDb2Rlcy5ET1dOOlxuICAgICAgICAgICAgZXZ0LmRlbHRhWSA9IC0gdGhpcy5vcHRpb25zLmtleVN0ZXA7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAgZS5zaGlmdEtleTpcbiAgICAgICAgICAgIGV2dC5kZWx0YVkgPSB3aW5kb3dIZWlnaHQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBrZXlDb2Rlcy5TUEFDRTpcbiAgICAgICAgICAgIGV2dC5kZWx0YVkgPSAtIHdpbmRvd0hlaWdodDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX25vdGlmeShlKTtcbn07XG5cblZpcnR1YWxTY3JvbGwucHJvdG90eXBlLl9iaW5kID0gZnVuY3Rpb24oKSB7XG4gICAgaWYoc3VwcG9ydC5oYXNXaGVlbEV2ZW50KSB0aGlzLmVsLmFkZEV2ZW50TGlzdGVuZXIoJ3doZWVsJywgdGhpcy5fb25XaGVlbCwgdGhpcy5saXN0ZW5lck9wdGlvbnMpO1xuICAgIGlmKHN1cHBvcnQuaGFzTW91c2VXaGVlbEV2ZW50KSB0aGlzLmVsLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNld2hlZWwnLCB0aGlzLl9vbk1vdXNlV2hlZWwsIHRoaXMubGlzdGVuZXJPcHRpb25zKTtcblxuICAgIGlmKHN1cHBvcnQuaGFzVG91Y2ggJiYgdGhpcy5vcHRpb25zLnVzZVRvdWNoKSB7XG4gICAgICAgIHRoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHRoaXMuX29uVG91Y2hTdGFydCwgdGhpcy5saXN0ZW5lck9wdGlvbnMpO1xuICAgICAgICB0aGlzLmVsLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIHRoaXMuX29uVG91Y2hNb3ZlLCB0aGlzLmxpc3RlbmVyT3B0aW9ucyk7XG4gICAgfVxuXG4gICAgaWYoc3VwcG9ydC5oYXNQb2ludGVyICYmIHN1cHBvcnQuaGFzVG91Y2hXaW4pIHtcbiAgICAgICAgdGhpcy5ib2R5VG91Y2hBY3Rpb24gPSBkb2N1bWVudC5ib2R5LnN0eWxlLm1zVG91Y2hBY3Rpb247XG4gICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUubXNUb3VjaEFjdGlvbiA9ICdub25lJztcbiAgICAgICAgdGhpcy5lbC5hZGRFdmVudExpc3RlbmVyKCdNU1BvaW50ZXJEb3duJywgdGhpcy5fb25Ub3VjaFN0YXJ0LCB0cnVlKTtcbiAgICAgICAgdGhpcy5lbC5hZGRFdmVudExpc3RlbmVyKCdNU1BvaW50ZXJNb3ZlJywgdGhpcy5fb25Ub3VjaE1vdmUsIHRydWUpO1xuICAgIH1cblxuICAgIGlmKHN1cHBvcnQuaGFzS2V5RG93biAmJiB0aGlzLm9wdGlvbnMudXNlS2V5Ym9hcmQpIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLl9vbktleURvd24pO1xufTtcblxuVmlydHVhbFNjcm9sbC5wcm90b3R5cGUuX3VuYmluZCA9IGZ1bmN0aW9uKCkge1xuICAgIGlmKHN1cHBvcnQuaGFzV2hlZWxFdmVudCkgdGhpcy5lbC5yZW1vdmVFdmVudExpc3RlbmVyKCd3aGVlbCcsIHRoaXMuX29uV2hlZWwpO1xuICAgIGlmKHN1cHBvcnQuaGFzTW91c2VXaGVlbEV2ZW50KSB0aGlzLmVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNld2hlZWwnLCB0aGlzLl9vbk1vdXNlV2hlZWwpO1xuXG4gICAgaWYoc3VwcG9ydC5oYXNUb3VjaCkge1xuICAgICAgICB0aGlzLmVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLl9vblRvdWNoU3RhcnQpO1xuICAgICAgICB0aGlzLmVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIHRoaXMuX29uVG91Y2hNb3ZlKTtcbiAgICB9XG5cbiAgICBpZihzdXBwb3J0Lmhhc1BvaW50ZXIgJiYgc3VwcG9ydC5oYXNUb3VjaFdpbikge1xuICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLm1zVG91Y2hBY3Rpb24gPSB0aGlzLmJvZHlUb3VjaEFjdGlvbjtcbiAgICAgICAgdGhpcy5lbC5yZW1vdmVFdmVudExpc3RlbmVyKCdNU1BvaW50ZXJEb3duJywgdGhpcy5fb25Ub3VjaFN0YXJ0LCB0cnVlKTtcbiAgICAgICAgdGhpcy5lbC5yZW1vdmVFdmVudExpc3RlbmVyKCdNU1BvaW50ZXJNb3ZlJywgdGhpcy5fb25Ub3VjaE1vdmUsIHRydWUpO1xuICAgIH1cblxuICAgIGlmKHN1cHBvcnQuaGFzS2V5RG93biAmJiB0aGlzLm9wdGlvbnMudXNlS2V5Ym9hcmQpIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLl9vbktleURvd24pO1xufTtcblxuVmlydHVhbFNjcm9sbC5wcm90b3R5cGUub24gPSBmdW5jdGlvbihjYiwgY3R4KSB7XG4gIHRoaXMuX2VtaXR0ZXIub24oRVZUX0lELCBjYiwgY3R4KTtcblxuICB2YXIgZXZlbnRzID0gdGhpcy5fZW1pdHRlci5lO1xuICBpZiAoZXZlbnRzICYmIGV2ZW50c1tFVlRfSURdICYmIGV2ZW50c1tFVlRfSURdLmxlbmd0aCA9PT0gMSkgdGhpcy5fYmluZCgpO1xufTtcblxuVmlydHVhbFNjcm9sbC5wcm90b3R5cGUub2ZmID0gZnVuY3Rpb24oY2IsIGN0eCkge1xuICB0aGlzLl9lbWl0dGVyLm9mZihFVlRfSUQsIGNiLCBjdHgpO1xuXG4gIHZhciBldmVudHMgPSB0aGlzLl9lbWl0dGVyLmU7XG4gIGlmICghZXZlbnRzW0VWVF9JRF0gfHwgZXZlbnRzW0VWVF9JRF0ubGVuZ3RoIDw9IDApIHRoaXMuX3VuYmluZCgpO1xufTtcblxuVmlydHVhbFNjcm9sbC5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZXZ0ID0gdGhpcy5fZXZlbnQ7XG4gICAgZXZ0LnggPSAwO1xuICAgIGV2dC55ID0gMDtcbn07XG5cblZpcnR1YWxTY3JvbGwucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9lbWl0dGVyLm9mZigpO1xuICAgIHRoaXMuX3VuYmluZCgpO1xufTtcblxuZnVuY3Rpb24gbGVycChzdGFydCwgZW5kLCBhbXQpIHtcbiAgcmV0dXJuICgxIC0gYW10KSAqIHN0YXJ0ICsgYW10ICogZW5kO1xufVxuXG5mdW5jdGlvbiBnZXRUcmFuc2xhdGUoZWwpIHtcbiAgdmFyIHRyYW5zbGF0ZSA9IHt9O1xuICBpZiAoIXdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKSByZXR1cm47XG4gIHZhciBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoZWwpO1xuICB2YXIgdHJhbnNmb3JtID0gc3R5bGUudHJhbnNmb3JtIHx8IHN0eWxlLndlYmtpdFRyYW5zZm9ybSB8fCBzdHlsZS5tb3pUcmFuc2Zvcm07XG4gIHZhciBtYXQgPSB0cmFuc2Zvcm0ubWF0Y2goL15tYXRyaXgzZFxcKCguKylcXCkkLyk7XG5cbiAgaWYgKG1hdCkge1xuICAgIHRyYW5zbGF0ZS54ID0gbWF0ID8gcGFyc2VGbG9hdChtYXRbMV0uc3BsaXQoJywgJylbMTJdKSA6IDA7XG4gICAgdHJhbnNsYXRlLnkgPSBtYXQgPyBwYXJzZUZsb2F0KG1hdFsxXS5zcGxpdCgnLCAnKVsxM10pIDogMDtcbiAgfSBlbHNlIHtcbiAgICBtYXQgPSB0cmFuc2Zvcm0ubWF0Y2goL15tYXRyaXhcXCgoLispXFwpJC8pO1xuICAgIHRyYW5zbGF0ZS54ID0gbWF0ID8gcGFyc2VGbG9hdChtYXRbMV0uc3BsaXQoJywgJylbNF0pIDogMDtcbiAgICB0cmFuc2xhdGUueSA9IG1hdCA/IHBhcnNlRmxvYXQobWF0WzFdLnNwbGl0KCcsICcpWzVdKSA6IDA7XG4gIH1cblxuICByZXR1cm4gdHJhbnNsYXRlO1xufVxuXG4vKipcbiAqIFJldHVybnMgYW4gYXJyYXkgY29udGFpbmluZyBhbGwgdGhlIHBhcmVudCBub2RlcyBvZiB0aGUgZ2l2ZW4gbm9kZVxuICogQHBhcmFtICB7b2JqZWN0fSBub2RlXG4gKiBAcmV0dXJuIHthcnJheX0gcGFyZW50IG5vZGVzXG4gKi9cbmZ1bmN0aW9uIGdldFBhcmVudHMoZWxlbSkge1xuICAvLyBTZXQgdXAgYSBwYXJlbnQgYXJyYXlcbiAgdmFyIHBhcmVudHMgPSBbXTsgLy8gUHVzaCBlYWNoIHBhcmVudCBlbGVtZW50IHRvIHRoZSBhcnJheVxuXG4gIGZvciAoOyBlbGVtICYmIGVsZW0gIT09IGRvY3VtZW50OyBlbGVtID0gZWxlbS5wYXJlbnROb2RlKSB7XG4gICAgcGFyZW50cy5wdXNoKGVsZW0pO1xuICB9IC8vIFJldHVybiBvdXIgcGFyZW50IGFycmF5XG5cblxuICByZXR1cm4gcGFyZW50cztcbn0gLy8gaHR0cHM6Ly9nb21ha2V0aGluZ3MuY29tL2hvdy10by1nZXQtdGhlLWNsb3Nlc3QtcGFyZW50LWVsZW1lbnQtd2l0aC1hLW1hdGNoaW5nLXNlbGVjdG9yLXVzaW5nLXZhbmlsbGEtamF2YXNjcmlwdC9cblxuLyoqXG4gKiBodHRwczovL2dpdGh1Yi5jb20vZ3JlL2Jlemllci1lYXNpbmdcbiAqIEJlemllckVhc2luZyAtIHVzZSBiZXppZXIgY3VydmUgZm9yIHRyYW5zaXRpb24gZWFzaW5nIGZ1bmN0aW9uXG4gKiBieSBHYcOrdGFuIFJlbmF1ZGVhdSAyMDE0IC0gMjAxNSDigJMgTUlUIExpY2Vuc2VcbiAqL1xuXG4vLyBUaGVzZSB2YWx1ZXMgYXJlIGVzdGFibGlzaGVkIGJ5IGVtcGlyaWNpc20gd2l0aCB0ZXN0cyAodHJhZGVvZmY6IHBlcmZvcm1hbmNlIFZTIHByZWNpc2lvbilcbnZhciBORVdUT05fSVRFUkFUSU9OUyA9IDQ7XG52YXIgTkVXVE9OX01JTl9TTE9QRSA9IDAuMDAxO1xudmFyIFNVQkRJVklTSU9OX1BSRUNJU0lPTiA9IDAuMDAwMDAwMTtcbnZhciBTVUJESVZJU0lPTl9NQVhfSVRFUkFUSU9OUyA9IDEwO1xuXG52YXIga1NwbGluZVRhYmxlU2l6ZSA9IDExO1xudmFyIGtTYW1wbGVTdGVwU2l6ZSA9IDEuMCAvIChrU3BsaW5lVGFibGVTaXplIC0gMS4wKTtcblxudmFyIGZsb2F0MzJBcnJheVN1cHBvcnRlZCA9IHR5cGVvZiBGbG9hdDMyQXJyYXkgPT09ICdmdW5jdGlvbic7XG5cbmZ1bmN0aW9uIEEgKGFBMSwgYUEyKSB7IHJldHVybiAxLjAgLSAzLjAgKiBhQTIgKyAzLjAgKiBhQTE7IH1cbmZ1bmN0aW9uIEIgKGFBMSwgYUEyKSB7IHJldHVybiAzLjAgKiBhQTIgLSA2LjAgKiBhQTE7IH1cbmZ1bmN0aW9uIEMgKGFBMSkgICAgICB7IHJldHVybiAzLjAgKiBhQTE7IH1cblxuLy8gUmV0dXJucyB4KHQpIGdpdmVuIHQsIHgxLCBhbmQgeDIsIG9yIHkodCkgZ2l2ZW4gdCwgeTEsIGFuZCB5Mi5cbmZ1bmN0aW9uIGNhbGNCZXppZXIgKGFULCBhQTEsIGFBMikgeyByZXR1cm4gKChBKGFBMSwgYUEyKSAqIGFUICsgQihhQTEsIGFBMikpICogYVQgKyBDKGFBMSkpICogYVQ7IH1cblxuLy8gUmV0dXJucyBkeC9kdCBnaXZlbiB0LCB4MSwgYW5kIHgyLCBvciBkeS9kdCBnaXZlbiB0LCB5MSwgYW5kIHkyLlxuZnVuY3Rpb24gZ2V0U2xvcGUgKGFULCBhQTEsIGFBMikgeyByZXR1cm4gMy4wICogQShhQTEsIGFBMikgKiBhVCAqIGFUICsgMi4wICogQihhQTEsIGFBMikgKiBhVCArIEMoYUExKTsgfVxuXG5mdW5jdGlvbiBiaW5hcnlTdWJkaXZpZGUgKGFYLCBhQSwgYUIsIG1YMSwgbVgyKSB7XG4gIHZhciBjdXJyZW50WCwgY3VycmVudFQsIGkgPSAwO1xuICBkbyB7XG4gICAgY3VycmVudFQgPSBhQSArIChhQiAtIGFBKSAvIDIuMDtcbiAgICBjdXJyZW50WCA9IGNhbGNCZXppZXIoY3VycmVudFQsIG1YMSwgbVgyKSAtIGFYO1xuICAgIGlmIChjdXJyZW50WCA+IDAuMCkge1xuICAgICAgYUIgPSBjdXJyZW50VDtcbiAgICB9IGVsc2Uge1xuICAgICAgYUEgPSBjdXJyZW50VDtcbiAgICB9XG4gIH0gd2hpbGUgKE1hdGguYWJzKGN1cnJlbnRYKSA+IFNVQkRJVklTSU9OX1BSRUNJU0lPTiAmJiArK2kgPCBTVUJESVZJU0lPTl9NQVhfSVRFUkFUSU9OUyk7XG4gIHJldHVybiBjdXJyZW50VDtcbn1cblxuZnVuY3Rpb24gbmV3dG9uUmFwaHNvbkl0ZXJhdGUgKGFYLCBhR3Vlc3NULCBtWDEsIG1YMikge1xuIGZvciAodmFyIGkgPSAwOyBpIDwgTkVXVE9OX0lURVJBVElPTlM7ICsraSkge1xuICAgdmFyIGN1cnJlbnRTbG9wZSA9IGdldFNsb3BlKGFHdWVzc1QsIG1YMSwgbVgyKTtcbiAgIGlmIChjdXJyZW50U2xvcGUgPT09IDAuMCkge1xuICAgICByZXR1cm4gYUd1ZXNzVDtcbiAgIH1cbiAgIHZhciBjdXJyZW50WCA9IGNhbGNCZXppZXIoYUd1ZXNzVCwgbVgxLCBtWDIpIC0gYVg7XG4gICBhR3Vlc3NUIC09IGN1cnJlbnRYIC8gY3VycmVudFNsb3BlO1xuIH1cbiByZXR1cm4gYUd1ZXNzVDtcbn1cblxuZnVuY3Rpb24gTGluZWFyRWFzaW5nICh4KSB7XG4gIHJldHVybiB4O1xufVxuXG52YXIgc3JjJDEgPSBmdW5jdGlvbiBiZXppZXIgKG1YMSwgbVkxLCBtWDIsIG1ZMikge1xuICBpZiAoISgwIDw9IG1YMSAmJiBtWDEgPD0gMSAmJiAwIDw9IG1YMiAmJiBtWDIgPD0gMSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2JlemllciB4IHZhbHVlcyBtdXN0IGJlIGluIFswLCAxXSByYW5nZScpO1xuICB9XG5cbiAgaWYgKG1YMSA9PT0gbVkxICYmIG1YMiA9PT0gbVkyKSB7XG4gICAgcmV0dXJuIExpbmVhckVhc2luZztcbiAgfVxuXG4gIC8vIFByZWNvbXB1dGUgc2FtcGxlcyB0YWJsZVxuICB2YXIgc2FtcGxlVmFsdWVzID0gZmxvYXQzMkFycmF5U3VwcG9ydGVkID8gbmV3IEZsb2F0MzJBcnJheShrU3BsaW5lVGFibGVTaXplKSA6IG5ldyBBcnJheShrU3BsaW5lVGFibGVTaXplKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrU3BsaW5lVGFibGVTaXplOyArK2kpIHtcbiAgICBzYW1wbGVWYWx1ZXNbaV0gPSBjYWxjQmV6aWVyKGkgKiBrU2FtcGxlU3RlcFNpemUsIG1YMSwgbVgyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFRGb3JYIChhWCkge1xuICAgIHZhciBpbnRlcnZhbFN0YXJ0ID0gMC4wO1xuICAgIHZhciBjdXJyZW50U2FtcGxlID0gMTtcbiAgICB2YXIgbGFzdFNhbXBsZSA9IGtTcGxpbmVUYWJsZVNpemUgLSAxO1xuXG4gICAgZm9yICg7IGN1cnJlbnRTYW1wbGUgIT09IGxhc3RTYW1wbGUgJiYgc2FtcGxlVmFsdWVzW2N1cnJlbnRTYW1wbGVdIDw9IGFYOyArK2N1cnJlbnRTYW1wbGUpIHtcbiAgICAgIGludGVydmFsU3RhcnQgKz0ga1NhbXBsZVN0ZXBTaXplO1xuICAgIH1cbiAgICAtLWN1cnJlbnRTYW1wbGU7XG5cbiAgICAvLyBJbnRlcnBvbGF0ZSB0byBwcm92aWRlIGFuIGluaXRpYWwgZ3Vlc3MgZm9yIHRcbiAgICB2YXIgZGlzdCA9IChhWCAtIHNhbXBsZVZhbHVlc1tjdXJyZW50U2FtcGxlXSkgLyAoc2FtcGxlVmFsdWVzW2N1cnJlbnRTYW1wbGUgKyAxXSAtIHNhbXBsZVZhbHVlc1tjdXJyZW50U2FtcGxlXSk7XG4gICAgdmFyIGd1ZXNzRm9yVCA9IGludGVydmFsU3RhcnQgKyBkaXN0ICoga1NhbXBsZVN0ZXBTaXplO1xuXG4gICAgdmFyIGluaXRpYWxTbG9wZSA9IGdldFNsb3BlKGd1ZXNzRm9yVCwgbVgxLCBtWDIpO1xuICAgIGlmIChpbml0aWFsU2xvcGUgPj0gTkVXVE9OX01JTl9TTE9QRSkge1xuICAgICAgcmV0dXJuIG5ld3RvblJhcGhzb25JdGVyYXRlKGFYLCBndWVzc0ZvclQsIG1YMSwgbVgyKTtcbiAgICB9IGVsc2UgaWYgKGluaXRpYWxTbG9wZSA9PT0gMC4wKSB7XG4gICAgICByZXR1cm4gZ3Vlc3NGb3JUO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYmluYXJ5U3ViZGl2aWRlKGFYLCBpbnRlcnZhbFN0YXJ0LCBpbnRlcnZhbFN0YXJ0ICsga1NhbXBsZVN0ZXBTaXplLCBtWDEsIG1YMik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIEJlemllckVhc2luZyAoeCkge1xuICAgIC8vIEJlY2F1c2UgSmF2YVNjcmlwdCBudW1iZXIgYXJlIGltcHJlY2lzZSwgd2Ugc2hvdWxkIGd1YXJhbnRlZSB0aGUgZXh0cmVtZXMgYXJlIHJpZ2h0LlxuICAgIGlmICh4ID09PSAwKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgaWYgKHggPT09IDEpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgICByZXR1cm4gY2FsY0JlemllcihnZXRURm9yWCh4KSwgbVkxLCBtWTIpO1xuICB9O1xufTtcblxudmFyIGtleUNvZGVzJDEgPSB7XG4gIExFRlQ6IDM3LFxuICBVUDogMzgsXG4gIFJJR0hUOiAzOSxcbiAgRE9XTjogNDAsXG4gIFNQQUNFOiAzMixcbiAgVEFCOiA5LFxuICBQQUdFVVA6IDMzLFxuICBQQUdFRE9XTjogMzQsXG4gIEhPTUU6IDM2LFxuICBFTkQ6IDM1XG59O1xuXG52YXIgX2RlZmF1bHQkMiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0NvcmUpIHtcbiAgX2luaGVyaXRzKF9kZWZhdWx0LCBfQ29yZSk7XG5cbiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihfZGVmYXVsdCk7XG5cbiAgZnVuY3Rpb24gX2RlZmF1bHQoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIF9kZWZhdWx0KTtcblxuICAgIGlmIChoaXN0b3J5LnNjcm9sbFJlc3RvcmF0aW9uKSB7XG4gICAgICBoaXN0b3J5LnNjcm9sbFJlc3RvcmF0aW9uID0gJ21hbnVhbCc7XG4gICAgfVxuXG4gICAgd2luZG93LnNjcm9sbFRvKDAsIDApO1xuICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgb3B0aW9ucyk7XG4gICAgaWYgKF90aGlzLmluZXJ0aWEpIF90aGlzLmxlcnAgPSBfdGhpcy5pbmVydGlhICogMC4xO1xuICAgIF90aGlzLmlzU2Nyb2xsaW5nID0gZmFsc2U7XG4gICAgX3RoaXMuaXNEcmFnZ2luZ1Njcm9sbGJhciA9IGZhbHNlO1xuICAgIF90aGlzLmlzVGlja2luZyA9IGZhbHNlO1xuICAgIF90aGlzLmhhc1Njcm9sbFRpY2tpbmcgPSBmYWxzZTtcbiAgICBfdGhpcy5wYXJhbGxheEVsZW1lbnRzID0ge307XG4gICAgX3RoaXMuc3RvcCA9IGZhbHNlO1xuICAgIF90aGlzLnNjcm9sbGJhckNvbnRhaW5lciA9IG9wdGlvbnMuc2Nyb2xsYmFyQ29udGFpbmVyO1xuICAgIF90aGlzLmNoZWNrS2V5ID0gX3RoaXMuY2hlY2tLZXkuYmluZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBfdGhpcy5jaGVja0tleSwgZmFsc2UpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhfZGVmYXVsdCwgW3tcbiAgICBrZXk6IFwiaW5pdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHRoaXMuaHRtbC5jbGFzc0xpc3QuYWRkKHRoaXMuc21vb3RoQ2xhc3MpO1xuICAgICAgdGhpcy5odG1sLnNldEF0dHJpYnV0ZShcImRhdGEtXCIuY29uY2F0KHRoaXMubmFtZSwgXCItZGlyZWN0aW9uXCIpLCB0aGlzLmRpcmVjdGlvbik7XG4gICAgICB0aGlzLmluc3RhbmNlID0gX29iamVjdFNwcmVhZDIoe1xuICAgICAgICBkZWx0YToge1xuICAgICAgICAgIHg6IHRoaXMuaW5pdFBvc2l0aW9uLngsXG4gICAgICAgICAgeTogdGhpcy5pbml0UG9zaXRpb24ueVxuICAgICAgICB9LFxuICAgICAgICBzY3JvbGw6IHtcbiAgICAgICAgICB4OiB0aGlzLmluaXRQb3NpdGlvbi54LFxuICAgICAgICAgIHk6IHRoaXMuaW5pdFBvc2l0aW9uLnlcbiAgICAgICAgfVxuICAgICAgfSwgdGhpcy5pbnN0YW5jZSk7XG4gICAgICB0aGlzLnZzID0gbmV3IHNyYyh7XG4gICAgICAgIGVsOiB0aGlzLnNjcm9sbEZyb21Bbnl3aGVyZSA/IGRvY3VtZW50IDogdGhpcy5lbCxcbiAgICAgICAgbW91c2VNdWx0aXBsaWVyOiBuYXZpZ2F0b3IucGxhdGZvcm0uaW5kZXhPZignV2luJykgPiAtMSA/IDEgOiAwLjQsXG4gICAgICAgIGZpcmVmb3hNdWx0aXBsaWVyOiB0aGlzLmZpcmVmb3hNdWx0aXBsaWVyLFxuICAgICAgICB0b3VjaE11bHRpcGxpZXI6IHRoaXMudG91Y2hNdWx0aXBsaWVyLFxuICAgICAgICB1c2VLZXlib2FyZDogZmFsc2UsXG4gICAgICAgIHBhc3NpdmU6IHRydWVcbiAgICAgIH0pO1xuICAgICAgdGhpcy52cy5vbihmdW5jdGlvbiAoZSkge1xuICAgICAgICBpZiAoX3RoaXMyLnN0b3ApIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIV90aGlzMi5pc0RyYWdnaW5nU2Nyb2xsYmFyKSB7XG4gICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzMi51cGRhdGVEZWx0YShlKTtcblxuICAgICAgICAgICAgaWYgKCFfdGhpczIuaXNTY3JvbGxpbmcpIF90aGlzMi5zdGFydFNjcm9sbGluZygpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHRoaXMuc2V0U2Nyb2xsTGltaXQoKTtcbiAgICAgIHRoaXMuaW5pdFNjcm9sbEJhcigpO1xuICAgICAgdGhpcy5hZGRTZWN0aW9ucygpO1xuICAgICAgdGhpcy5hZGRFbGVtZW50cygpO1xuICAgICAgdGhpcy5jaGVja1Njcm9sbCh0cnVlKTtcbiAgICAgIHRoaXMudHJhbnNmb3JtRWxlbWVudHModHJ1ZSwgdHJ1ZSk7XG5cbiAgICAgIF9nZXQoX2dldFByb3RvdHlwZU9mKF9kZWZhdWx0LnByb3RvdHlwZSksIFwiaW5pdFwiLCB0aGlzKS5jYWxsKHRoaXMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZXRTY3JvbGxMaW1pdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRTY3JvbGxMaW1pdCgpIHtcbiAgICAgIHRoaXMuaW5zdGFuY2UubGltaXQueSA9IHRoaXMuZWwub2Zmc2V0SGVpZ2h0IC0gdGhpcy53aW5kb3dIZWlnaHQ7XG5cbiAgICAgIGlmICh0aGlzLmRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnKSB7XG4gICAgICAgIHZhciB0b3RhbFdpZHRoID0gMDtcbiAgICAgICAgdmFyIG5vZGVzID0gdGhpcy5lbC5jaGlsZHJlbjtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdG90YWxXaWR0aCArPSBub2Rlc1tpXS5vZmZzZXRXaWR0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuaW5zdGFuY2UubGltaXQueCA9IHRvdGFsV2lkdGggLSB0aGlzLndpbmRvd1dpZHRoO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzdGFydFNjcm9sbGluZ1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdGFydFNjcm9sbGluZygpIHtcbiAgICAgIHRoaXMuc3RhcnRTY3JvbGxUcyA9IERhdGUubm93KCk7IC8vIFJlY29yZCB0aW1lc3RhbXBcblxuICAgICAgdGhpcy5pc1Njcm9sbGluZyA9IHRydWU7XG4gICAgICB0aGlzLmNoZWNrU2Nyb2xsKCk7XG4gICAgICB0aGlzLmh0bWwuY2xhc3NMaXN0LmFkZCh0aGlzLnNjcm9sbGluZ0NsYXNzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic3RvcFNjcm9sbGluZ1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdG9wU2Nyb2xsaW5nKCkge1xuICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy5jaGVja1Njcm9sbFJhZik7IC8vIFByZXZlbnQgY2hlY2tTY3JvbGwgdG8gY29udGludWUgbG9vcGluZ1xuICAgICAgLy9QZXZlbnQgc2Nyb2xsYmFyIGdsaXRjaC9sb2NraW5nXG5cbiAgICAgIHRoaXMuc3RhcnRTY3JvbGxUcyA9IHVuZGVmaW5lZDtcblxuICAgICAgaWYgKHRoaXMuc2Nyb2xsVG9SYWYpIHtcbiAgICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy5zY3JvbGxUb1JhZik7XG4gICAgICAgIHRoaXMuc2Nyb2xsVG9SYWYgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmlzU2Nyb2xsaW5nID0gZmFsc2U7XG4gICAgICB0aGlzLmluc3RhbmNlLnNjcm9sbC55ID0gTWF0aC5yb3VuZCh0aGlzLmluc3RhbmNlLnNjcm9sbC55KTtcbiAgICAgIHRoaXMuaHRtbC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuc2Nyb2xsaW5nQ2xhc3MpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjaGVja0tleVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjaGVja0tleShlKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgaWYgKHRoaXMuc3RvcCkge1xuICAgICAgICAvLyBJZiB3ZSBhcmUgc3RvcHBlZCwgd2UgZG9uJ3Qgd2FudCBhbnkgc2Nyb2xsIHRvIG9jY3VyIGJlY2F1c2Ugb2YgYSBrZXlwcmVzc1xuICAgICAgICAvLyBQcmV2ZW50IHRhYiB0byBzY3JvbGwgdG8gYWN0aXZlRWxlbWVudFxuICAgICAgICBpZiAoZS5rZXlDb2RlID09IGtleUNvZGVzJDEuVEFCKSB7XG4gICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSBuYXRpdmUgc2Nyb2xsIGlzIGFsd2F5cyBhdCB0b3Agb2YgcGFnZVxuICAgICAgICAgICAgX3RoaXMzLmh0bWwuc2Nyb2xsVG9wID0gMDtcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wID0gMDtcbiAgICAgICAgICAgIF90aGlzMy5odG1sLnNjcm9sbExlZnQgPSAwO1xuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5zY3JvbGxMZWZ0ID0gMDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgc3dpdGNoIChlLmtleUNvZGUpIHtcbiAgICAgICAgY2FzZSBrZXlDb2RlcyQxLlRBQjpcbiAgICAgICAgICAvLyBEbyBub3QgcmVtb3ZlIHRoZSBSQUZcbiAgICAgICAgICAvLyBJdCBhbGxvd3MgdG8gb3ZlcnJpZGUgdGhlIGJyb3dzZXIncyBuYXRpdmUgc2Nyb2xsVG8sIHdoaWNoIGlzIGVzc2VudGlhbFxuICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvLyBNYWtlIHN1cmUgbmF0aXZlIHNjcm9sbCBpcyBhbHdheXMgYXQgdG9wIG9mIHBhZ2VcbiAgICAgICAgICAgIF90aGlzMy5odG1sLnNjcm9sbFRvcCA9IDA7XG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCA9IDA7XG4gICAgICAgICAgICBfdGhpczMuaHRtbC5zY3JvbGxMZWZ0ID0gMDtcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc2Nyb2xsTGVmdCA9IDA7IC8vIFJlcXVlc3Qgc2Nyb2xsVG8gb24gdGhlIGZvY3VzZWRFbGVtZW50LCBwdXR0aW5nIGl0IGF0IHRoZSBjZW50ZXIgb2YgdGhlIHNjcmVlblxuXG4gICAgICAgICAgICBfdGhpczMuc2Nyb2xsVG8oZG9jdW1lbnQuYWN0aXZlRWxlbWVudCwge1xuICAgICAgICAgICAgICBvZmZzZXQ6IC13aW5kb3cuaW5uZXJIZWlnaHQgLyAyXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIGtleUNvZGVzJDEuVVA6XG4gICAgICAgICAgaWYgKHRoaXMuaXNBY3RpdmVFbGVtZW50U2Nyb2xsU2Vuc2l0aXZlKCkpIHtcbiAgICAgICAgICAgIHRoaXMuaW5zdGFuY2UuZGVsdGFbdGhpcy5kaXJlY3Rpb25BeGlzXSAtPSAyNDA7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBrZXlDb2RlcyQxLkRPV046XG4gICAgICAgICAgaWYgKHRoaXMuaXNBY3RpdmVFbGVtZW50U2Nyb2xsU2Vuc2l0aXZlKCkpIHtcbiAgICAgICAgICAgIHRoaXMuaW5zdGFuY2UuZGVsdGFbdGhpcy5kaXJlY3Rpb25BeGlzXSArPSAyNDA7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBrZXlDb2RlcyQxLlBBR0VVUDpcbiAgICAgICAgICB0aGlzLmluc3RhbmNlLmRlbHRhW3RoaXMuZGlyZWN0aW9uQXhpc10gLT0gd2luZG93LmlubmVySGVpZ2h0O1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2Uga2V5Q29kZXMkMS5QQUdFRE9XTjpcbiAgICAgICAgICB0aGlzLmluc3RhbmNlLmRlbHRhW3RoaXMuZGlyZWN0aW9uQXhpc10gKz0gd2luZG93LmlubmVySGVpZ2h0O1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2Uga2V5Q29kZXMkMS5IT01FOlxuICAgICAgICAgIHRoaXMuaW5zdGFuY2UuZGVsdGFbdGhpcy5kaXJlY3Rpb25BeGlzXSAtPSB0aGlzLmluc3RhbmNlLmxpbWl0W3RoaXMuZGlyZWN0aW9uQXhpc107XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBrZXlDb2RlcyQxLkVORDpcbiAgICAgICAgICB0aGlzLmluc3RhbmNlLmRlbHRhW3RoaXMuZGlyZWN0aW9uQXhpc10gKz0gdGhpcy5pbnN0YW5jZS5saW1pdFt0aGlzLmRpcmVjdGlvbkF4aXNdO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2Uga2V5Q29kZXMkMS5TUEFDRTpcbiAgICAgICAgICBpZiAodGhpcy5pc0FjdGl2ZUVsZW1lbnRTY3JvbGxTZW5zaXRpdmUoKSkge1xuICAgICAgICAgICAgaWYgKGUuc2hpZnRLZXkpIHtcbiAgICAgICAgICAgICAgdGhpcy5pbnN0YW5jZS5kZWx0YVt0aGlzLmRpcmVjdGlvbkF4aXNdIC09IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRoaXMuaW5zdGFuY2UuZGVsdGFbdGhpcy5kaXJlY3Rpb25BeGlzXSArPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmluc3RhbmNlLmRlbHRhW3RoaXMuZGlyZWN0aW9uQXhpc10gPCAwKSB0aGlzLmluc3RhbmNlLmRlbHRhW3RoaXMuZGlyZWN0aW9uQXhpc10gPSAwO1xuICAgICAgaWYgKHRoaXMuaW5zdGFuY2UuZGVsdGFbdGhpcy5kaXJlY3Rpb25BeGlzXSA+IHRoaXMuaW5zdGFuY2UubGltaXRbdGhpcy5kaXJlY3Rpb25BeGlzXSkgdGhpcy5pbnN0YW5jZS5kZWx0YVt0aGlzLmRpcmVjdGlvbkF4aXNdID0gdGhpcy5pbnN0YW5jZS5saW1pdFt0aGlzLmRpcmVjdGlvbkF4aXNdO1xuICAgICAgdGhpcy5zdG9wU2Nyb2xsaW5nKCk7IC8vIFN0b3AgYW55IG1vdmVtZW50LCBhbGxvd3MgdG8ga2lsbCBhbnkgb3RoZXIgYHNjcm9sbFRvYCBzdGlsbCBoYXBwZW5pbmdcblxuICAgICAgdGhpcy5pc1Njcm9sbGluZyA9IHRydWU7XG4gICAgICB0aGlzLmNoZWNrU2Nyb2xsKCk7XG4gICAgICB0aGlzLmh0bWwuY2xhc3NMaXN0LmFkZCh0aGlzLnNjcm9sbGluZ0NsYXNzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiaXNBY3RpdmVFbGVtZW50U2Nyb2xsU2Vuc2l0aXZlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGlzQWN0aXZlRWxlbWVudFNjcm9sbFNlbnNpdGl2ZSgpIHtcbiAgICAgIHJldHVybiAhKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgaW5zdGFuY2VvZiBIVE1MSW5wdXRFbGVtZW50KSAmJiAhKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgaW5zdGFuY2VvZiBIVE1MVGV4dEFyZWFFbGVtZW50KSAmJiAhKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgaW5zdGFuY2VvZiBIVE1MQnV0dG9uRWxlbWVudCkgJiYgIShkb2N1bWVudC5hY3RpdmVFbGVtZW50IGluc3RhbmNlb2YgSFRNTFNlbGVjdEVsZW1lbnQpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjaGVja1Njcm9sbFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjaGVja1Njcm9sbCgpIHtcbiAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgICB2YXIgZm9yY2VkID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBmYWxzZTtcblxuICAgICAgaWYgKGZvcmNlZCB8fCB0aGlzLmlzU2Nyb2xsaW5nIHx8IHRoaXMuaXNEcmFnZ2luZ1Njcm9sbGJhcikge1xuICAgICAgICBpZiAoIXRoaXMuaGFzU2Nyb2xsVGlja2luZykge1xuICAgICAgICAgIHRoaXMuY2hlY2tTY3JvbGxSYWYgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzNC5jaGVja1Njcm9sbCgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHRoaXMuaGFzU2Nyb2xsVGlja2luZyA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnVwZGF0ZVNjcm9sbCgpO1xuICAgICAgICB2YXIgZGlzdGFuY2UgPSBNYXRoLmFicyh0aGlzLmluc3RhbmNlLmRlbHRhW3RoaXMuZGlyZWN0aW9uQXhpc10gLSB0aGlzLmluc3RhbmNlLnNjcm9sbFt0aGlzLmRpcmVjdGlvbkF4aXNdKTtcbiAgICAgICAgdmFyIHRpbWVTaW5jZVN0YXJ0ID0gRGF0ZS5ub3coKSAtIHRoaXMuc3RhcnRTY3JvbGxUczsgLy8gR2V0IHRoZSB0aW1lIHNpbmNlIHRoZSBzY3JvbGwgd2FzIHN0YXJ0ZWQ6IHRoZSBzY3JvbGwgY2FuIGJlIHN0b3BwZWQgYWdhaW4gb25seSBwYXN0IDEwMG1zXG5cbiAgICAgICAgaWYgKCF0aGlzLmFuaW1hdGluZ1Njcm9sbCAmJiB0aW1lU2luY2VTdGFydCA+IDEwMCAmJiAoZGlzdGFuY2UgPCAwLjUgJiYgdGhpcy5pbnN0YW5jZS5kZWx0YVt0aGlzLmRpcmVjdGlvbkF4aXNdICE9IDAgfHwgZGlzdGFuY2UgPCAwLjUgJiYgdGhpcy5pbnN0YW5jZS5kZWx0YVt0aGlzLmRpcmVjdGlvbkF4aXNdID09IDApKSB7XG4gICAgICAgICAgdGhpcy5zdG9wU2Nyb2xsaW5nKCk7XG4gICAgICAgIH1cblxuICAgICAgICBPYmplY3QuZW50cmllcyh0aGlzLnNlY3Rpb25zKS5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICAgICAgdmFyIF9yZWYyID0gX3NsaWNlZFRvQXJyYXkoX3JlZiwgMiksXG4gICAgICAgICAgICAgIGkgPSBfcmVmMlswXSxcbiAgICAgICAgICAgICAgc2VjdGlvbiA9IF9yZWYyWzFdO1xuXG4gICAgICAgICAgaWYgKHNlY3Rpb24ucGVyc2lzdGVudCB8fCBfdGhpczQuaW5zdGFuY2Uuc2Nyb2xsW190aGlzNC5kaXJlY3Rpb25BeGlzXSA+IHNlY3Rpb24ub2Zmc2V0W190aGlzNC5kaXJlY3Rpb25BeGlzXSAmJiBfdGhpczQuaW5zdGFuY2Uuc2Nyb2xsW190aGlzNC5kaXJlY3Rpb25BeGlzXSA8IHNlY3Rpb24ubGltaXRbX3RoaXM0LmRpcmVjdGlvbkF4aXNdKSB7XG4gICAgICAgICAgICBpZiAoX3RoaXM0LmRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnKSB7XG4gICAgICAgICAgICAgIF90aGlzNC50cmFuc2Zvcm0oc2VjdGlvbi5lbCwgLV90aGlzNC5pbnN0YW5jZS5zY3JvbGxbX3RoaXM0LmRpcmVjdGlvbkF4aXNdLCAwKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIF90aGlzNC50cmFuc2Zvcm0oc2VjdGlvbi5lbCwgMCwgLV90aGlzNC5pbnN0YW5jZS5zY3JvbGxbX3RoaXM0LmRpcmVjdGlvbkF4aXNdKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFzZWN0aW9uLmluVmlldykge1xuICAgICAgICAgICAgICBzZWN0aW9uLmluVmlldyA9IHRydWU7XG4gICAgICAgICAgICAgIHNlY3Rpb24uZWwuc3R5bGUub3BhY2l0eSA9IDE7XG4gICAgICAgICAgICAgIHNlY3Rpb24uZWwuc3R5bGUucG9pbnRlckV2ZW50cyA9ICdhbGwnO1xuICAgICAgICAgICAgICBzZWN0aW9uLmVsLnNldEF0dHJpYnV0ZShcImRhdGEtXCIuY29uY2F0KF90aGlzNC5uYW1lLCBcIi1zZWN0aW9uLWludmlld1wiKSwgJycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoc2VjdGlvbi5pblZpZXcgfHwgZm9yY2VkKSB7XG4gICAgICAgICAgICAgIHNlY3Rpb24uaW5WaWV3ID0gZmFsc2U7XG4gICAgICAgICAgICAgIHNlY3Rpb24uZWwuc3R5bGUub3BhY2l0eSA9IDA7XG4gICAgICAgICAgICAgIHNlY3Rpb24uZWwuc3R5bGUucG9pbnRlckV2ZW50cyA9ICdub25lJztcbiAgICAgICAgICAgICAgc2VjdGlvbi5lbC5yZW1vdmVBdHRyaWJ1dGUoXCJkYXRhLVwiLmNvbmNhdChfdGhpczQubmFtZSwgXCItc2VjdGlvbi1pbnZpZXdcIikpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfdGhpczQudHJhbnNmb3JtKHNlY3Rpb24uZWwsIDAsIDApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHRoaXMuZ2V0RGlyZWN0aW9uKSB7XG4gICAgICAgICAgdGhpcy5hZGREaXJlY3Rpb24oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmdldFNwZWVkKSB7XG4gICAgICAgICAgdGhpcy5hZGRTcGVlZCgpO1xuICAgICAgICAgIHRoaXMuc3BlZWRUcyA9IERhdGUubm93KCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmRldGVjdEVsZW1lbnRzKCk7XG4gICAgICAgIHRoaXMudHJhbnNmb3JtRWxlbWVudHMoKTtcblxuICAgICAgICBpZiAodGhpcy5oYXNTY3JvbGxiYXIpIHtcbiAgICAgICAgICB2YXIgc2Nyb2xsQmFyVHJhbnNsYXRpb24gPSB0aGlzLmluc3RhbmNlLnNjcm9sbFt0aGlzLmRpcmVjdGlvbkF4aXNdIC8gdGhpcy5pbnN0YW5jZS5saW1pdFt0aGlzLmRpcmVjdGlvbkF4aXNdICogdGhpcy5zY3JvbGxCYXJMaW1pdFt0aGlzLmRpcmVjdGlvbkF4aXNdO1xuXG4gICAgICAgICAgaWYgKHRoaXMuZGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgICAgICAgIHRoaXMudHJhbnNmb3JtKHRoaXMuc2Nyb2xsYmFyVGh1bWIsIHNjcm9sbEJhclRyYW5zbGF0aW9uLCAwKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy50cmFuc2Zvcm0odGhpcy5zY3JvbGxiYXJUaHVtYiwgMCwgc2Nyb2xsQmFyVHJhbnNsYXRpb24pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIF9nZXQoX2dldFByb3RvdHlwZU9mKF9kZWZhdWx0LnByb3RvdHlwZSksIFwiY2hlY2tTY3JvbGxcIiwgdGhpcykuY2FsbCh0aGlzKTtcblxuICAgICAgICB0aGlzLmhhc1Njcm9sbFRpY2tpbmcgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVzaXplXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlc2l6ZSgpIHtcbiAgICAgIHRoaXMud2luZG93SGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xuICAgICAgdGhpcy53aW5kb3dXaWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuICAgICAgdGhpcy5jaGVja0NvbnRleHQoKTtcbiAgICAgIHRoaXMud2luZG93TWlkZGxlID0ge1xuICAgICAgICB4OiB0aGlzLndpbmRvd1dpZHRoIC8gMixcbiAgICAgICAgeTogdGhpcy53aW5kb3dIZWlnaHQgLyAyXG4gICAgICB9O1xuICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidXBkYXRlRGVsdGFcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlRGVsdGEoZSkge1xuICAgICAgdmFyIGRlbHRhO1xuICAgICAgdmFyIGdlc3R1cmVEaXJlY3Rpb24gPSB0aGlzW3RoaXMuY29udGV4dF0gJiYgdGhpc1t0aGlzLmNvbnRleHRdLmdlc3R1cmVEaXJlY3Rpb24gPyB0aGlzW3RoaXMuY29udGV4dF0uZ2VzdHVyZURpcmVjdGlvbiA6IHRoaXMuZ2VzdHVyZURpcmVjdGlvbjtcblxuICAgICAgaWYgKGdlc3R1cmVEaXJlY3Rpb24gPT09ICdib3RoJykge1xuICAgICAgICBkZWx0YSA9IGUuZGVsdGFYICsgZS5kZWx0YVk7XG4gICAgICB9IGVsc2UgaWYgKGdlc3R1cmVEaXJlY3Rpb24gPT09ICd2ZXJ0aWNhbCcpIHtcbiAgICAgICAgZGVsdGEgPSBlLmRlbHRhWTtcbiAgICAgIH0gZWxzZSBpZiAoZ2VzdHVyZURpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnKSB7XG4gICAgICAgIGRlbHRhID0gZS5kZWx0YVg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZWx0YSA9IGUuZGVsdGFZO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmluc3RhbmNlLmRlbHRhW3RoaXMuZGlyZWN0aW9uQXhpc10gLT0gZGVsdGEgKiB0aGlzLm11bHRpcGxpZXI7XG4gICAgICBpZiAodGhpcy5pbnN0YW5jZS5kZWx0YVt0aGlzLmRpcmVjdGlvbkF4aXNdIDwgMCkgdGhpcy5pbnN0YW5jZS5kZWx0YVt0aGlzLmRpcmVjdGlvbkF4aXNdID0gMDtcbiAgICAgIGlmICh0aGlzLmluc3RhbmNlLmRlbHRhW3RoaXMuZGlyZWN0aW9uQXhpc10gPiB0aGlzLmluc3RhbmNlLmxpbWl0W3RoaXMuZGlyZWN0aW9uQXhpc10pIHRoaXMuaW5zdGFuY2UuZGVsdGFbdGhpcy5kaXJlY3Rpb25BeGlzXSA9IHRoaXMuaW5zdGFuY2UubGltaXRbdGhpcy5kaXJlY3Rpb25BeGlzXTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidXBkYXRlU2Nyb2xsXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZVNjcm9sbChlKSB7XG4gICAgICBpZiAodGhpcy5pc1Njcm9sbGluZyB8fCB0aGlzLmlzRHJhZ2dpbmdTY3JvbGxiYXIpIHtcbiAgICAgICAgdGhpcy5pbnN0YW5jZS5zY3JvbGxbdGhpcy5kaXJlY3Rpb25BeGlzXSA9IGxlcnAodGhpcy5pbnN0YW5jZS5zY3JvbGxbdGhpcy5kaXJlY3Rpb25BeGlzXSwgdGhpcy5pbnN0YW5jZS5kZWx0YVt0aGlzLmRpcmVjdGlvbkF4aXNdLCB0aGlzLmxlcnApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHRoaXMuaW5zdGFuY2Uuc2Nyb2xsW3RoaXMuZGlyZWN0aW9uQXhpc10gPiB0aGlzLmluc3RhbmNlLmxpbWl0W3RoaXMuZGlyZWN0aW9uQXhpc10pIHtcbiAgICAgICAgICB0aGlzLnNldFNjcm9sbCh0aGlzLmluc3RhbmNlLnNjcm9sbFt0aGlzLmRpcmVjdGlvbkF4aXNdLCB0aGlzLmluc3RhbmNlLmxpbWl0W3RoaXMuZGlyZWN0aW9uQXhpc10pO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaW5zdGFuY2Uuc2Nyb2xsLnkgPCAwKSB7XG4gICAgICAgICAgdGhpcy5zZXRTY3JvbGwodGhpcy5pbnN0YW5jZS5zY3JvbGxbdGhpcy5kaXJlY3Rpb25BeGlzXSwgMCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5zZXRTY3JvbGwodGhpcy5pbnN0YW5jZS5zY3JvbGxbdGhpcy5kaXJlY3Rpb25BeGlzXSwgdGhpcy5pbnN0YW5jZS5kZWx0YVt0aGlzLmRpcmVjdGlvbkF4aXNdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJhZGREaXJlY3Rpb25cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkRGlyZWN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuaW5zdGFuY2UuZGVsdGEueSA+IHRoaXMuaW5zdGFuY2Uuc2Nyb2xsLnkpIHtcbiAgICAgICAgaWYgKHRoaXMuaW5zdGFuY2UuZGlyZWN0aW9uICE9PSAnZG93bicpIHtcbiAgICAgICAgICB0aGlzLmluc3RhbmNlLmRpcmVjdGlvbiA9ICdkb3duJztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0aGlzLmluc3RhbmNlLmRlbHRhLnkgPCB0aGlzLmluc3RhbmNlLnNjcm9sbC55KSB7XG4gICAgICAgIGlmICh0aGlzLmluc3RhbmNlLmRpcmVjdGlvbiAhPT0gJ3VwJykge1xuICAgICAgICAgIHRoaXMuaW5zdGFuY2UuZGlyZWN0aW9uID0gJ3VwJztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5pbnN0YW5jZS5kZWx0YS54ID4gdGhpcy5pbnN0YW5jZS5zY3JvbGwueCkge1xuICAgICAgICBpZiAodGhpcy5pbnN0YW5jZS5kaXJlY3Rpb24gIT09ICdyaWdodCcpIHtcbiAgICAgICAgICB0aGlzLmluc3RhbmNlLmRpcmVjdGlvbiA9ICdyaWdodCc7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodGhpcy5pbnN0YW5jZS5kZWx0YS54IDwgdGhpcy5pbnN0YW5jZS5zY3JvbGwueCkge1xuICAgICAgICBpZiAodGhpcy5pbnN0YW5jZS5kaXJlY3Rpb24gIT09ICdsZWZ0Jykge1xuICAgICAgICAgIHRoaXMuaW5zdGFuY2UuZGlyZWN0aW9uID0gJ2xlZnQnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImFkZFNwZWVkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZFNwZWVkKCkge1xuICAgICAgaWYgKHRoaXMuaW5zdGFuY2UuZGVsdGFbdGhpcy5kaXJlY3Rpb25BeGlzXSAhPSB0aGlzLmluc3RhbmNlLnNjcm9sbFt0aGlzLmRpcmVjdGlvbkF4aXNdKSB7XG4gICAgICAgIHRoaXMuaW5zdGFuY2Uuc3BlZWQgPSAodGhpcy5pbnN0YW5jZS5kZWx0YVt0aGlzLmRpcmVjdGlvbkF4aXNdIC0gdGhpcy5pbnN0YW5jZS5zY3JvbGxbdGhpcy5kaXJlY3Rpb25BeGlzXSkgLyBNYXRoLm1heCgxLCBEYXRlLm5vdygpIC0gdGhpcy5zcGVlZFRzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuaW5zdGFuY2Uuc3BlZWQgPSAwO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJpbml0U2Nyb2xsQmFyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluaXRTY3JvbGxCYXIoKSB7XG4gICAgICB0aGlzLnNjcm9sbGJhciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICAgIHRoaXMuc2Nyb2xsYmFyVGh1bWIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICB0aGlzLnNjcm9sbGJhci5jbGFzc0xpc3QuYWRkKFwiXCIuY29uY2F0KHRoaXMuc2Nyb2xsYmFyQ2xhc3MpKTtcbiAgICAgIHRoaXMuc2Nyb2xsYmFyVGh1bWIuY2xhc3NMaXN0LmFkZChcIlwiLmNvbmNhdCh0aGlzLnNjcm9sbGJhckNsYXNzLCBcIl90aHVtYlwiKSk7XG4gICAgICB0aGlzLnNjcm9sbGJhci5hcHBlbmQodGhpcy5zY3JvbGxiYXJUaHVtYik7XG5cbiAgICAgIGlmICh0aGlzLnNjcm9sbGJhckNvbnRhaW5lcikge1xuICAgICAgICB0aGlzLnNjcm9sbGJhckNvbnRhaW5lci5hcHBlbmQodGhpcy5zY3JvbGxiYXIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmQodGhpcy5zY3JvbGxiYXIpO1xuICAgICAgfSAvLyBTY3JvbGxiYXIgRXZlbnRzXG5cblxuICAgICAgdGhpcy5nZXRTY3JvbGxCYXIgPSB0aGlzLmdldFNjcm9sbEJhci5iaW5kKHRoaXMpO1xuICAgICAgdGhpcy5yZWxlYXNlU2Nyb2xsQmFyID0gdGhpcy5yZWxlYXNlU2Nyb2xsQmFyLmJpbmQodGhpcyk7XG4gICAgICB0aGlzLm1vdmVTY3JvbGxCYXIgPSB0aGlzLm1vdmVTY3JvbGxCYXIuYmluZCh0aGlzKTtcbiAgICAgIHRoaXMuc2Nyb2xsYmFyVGh1bWIuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5nZXRTY3JvbGxCYXIpO1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCB0aGlzLnJlbGVhc2VTY3JvbGxCYXIpO1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMubW92ZVNjcm9sbEJhcik7IC8vIFNldCBzY3JvbGxiYXIgdmFsdWVzXG5cbiAgICAgIHRoaXMuaGFzU2Nyb2xsYmFyID0gZmFsc2U7XG5cbiAgICAgIGlmICh0aGlzLmRpcmVjdGlvbiA9PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgICAgaWYgKHRoaXMuaW5zdGFuY2UubGltaXQueCArIHRoaXMud2luZG93V2lkdGggPD0gdGhpcy53aW5kb3dXaWR0aCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHRoaXMuaW5zdGFuY2UubGltaXQueSArIHRoaXMud2luZG93SGVpZ2h0IDw9IHRoaXMud2luZG93SGVpZ2h0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuaGFzU2Nyb2xsYmFyID0gdHJ1ZTtcbiAgICAgIHRoaXMuc2Nyb2xsYmFyQkNSID0gdGhpcy5zY3JvbGxiYXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICB0aGlzLnNjcm9sbGJhckhlaWdodCA9IHRoaXMuc2Nyb2xsYmFyQkNSLmhlaWdodDtcbiAgICAgIHRoaXMuc2Nyb2xsYmFyV2lkdGggPSB0aGlzLnNjcm9sbGJhckJDUi53aWR0aDtcblxuICAgICAgaWYgKHRoaXMuZGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgICAgdGhpcy5zY3JvbGxiYXJUaHVtYi5zdHlsZS53aWR0aCA9IFwiXCIuY29uY2F0KHRoaXMuc2Nyb2xsYmFyV2lkdGggKiB0aGlzLnNjcm9sbGJhcldpZHRoIC8gKHRoaXMuaW5zdGFuY2UubGltaXQueCArIHRoaXMuc2Nyb2xsYmFyV2lkdGgpLCBcInB4XCIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zY3JvbGxiYXJUaHVtYi5zdHlsZS5oZWlnaHQgPSBcIlwiLmNvbmNhdCh0aGlzLnNjcm9sbGJhckhlaWdodCAqIHRoaXMuc2Nyb2xsYmFySGVpZ2h0IC8gKHRoaXMuaW5zdGFuY2UubGltaXQueSArIHRoaXMuc2Nyb2xsYmFySGVpZ2h0KSwgXCJweFwiKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zY3JvbGxiYXJUaHVtYkJDUiA9IHRoaXMuc2Nyb2xsYmFyVGh1bWIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICB0aGlzLnNjcm9sbEJhckxpbWl0ID0ge1xuICAgICAgICB4OiB0aGlzLnNjcm9sbGJhcldpZHRoIC0gdGhpcy5zY3JvbGxiYXJUaHVtYkJDUi53aWR0aCxcbiAgICAgICAgeTogdGhpcy5zY3JvbGxiYXJIZWlnaHQgLSB0aGlzLnNjcm9sbGJhclRodW1iQkNSLmhlaWdodFxuICAgICAgfTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVpbml0U2Nyb2xsQmFyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlaW5pdFNjcm9sbEJhcigpIHtcbiAgICAgIHRoaXMuaGFzU2Nyb2xsYmFyID0gZmFsc2U7XG5cbiAgICAgIGlmICh0aGlzLmRpcmVjdGlvbiA9PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgICAgaWYgKHRoaXMuaW5zdGFuY2UubGltaXQueCArIHRoaXMud2luZG93V2lkdGggPD0gdGhpcy53aW5kb3dXaWR0aCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHRoaXMuaW5zdGFuY2UubGltaXQueSArIHRoaXMud2luZG93SGVpZ2h0IDw9IHRoaXMud2luZG93SGVpZ2h0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuaGFzU2Nyb2xsYmFyID0gdHJ1ZTtcbiAgICAgIHRoaXMuc2Nyb2xsYmFyQkNSID0gdGhpcy5zY3JvbGxiYXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICB0aGlzLnNjcm9sbGJhckhlaWdodCA9IHRoaXMuc2Nyb2xsYmFyQkNSLmhlaWdodDtcbiAgICAgIHRoaXMuc2Nyb2xsYmFyV2lkdGggPSB0aGlzLnNjcm9sbGJhckJDUi53aWR0aDtcblxuICAgICAgaWYgKHRoaXMuZGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgICAgdGhpcy5zY3JvbGxiYXJUaHVtYi5zdHlsZS53aWR0aCA9IFwiXCIuY29uY2F0KHRoaXMuc2Nyb2xsYmFyV2lkdGggKiB0aGlzLnNjcm9sbGJhcldpZHRoIC8gKHRoaXMuaW5zdGFuY2UubGltaXQueCArIHRoaXMuc2Nyb2xsYmFyV2lkdGgpLCBcInB4XCIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zY3JvbGxiYXJUaHVtYi5zdHlsZS5oZWlnaHQgPSBcIlwiLmNvbmNhdCh0aGlzLnNjcm9sbGJhckhlaWdodCAqIHRoaXMuc2Nyb2xsYmFySGVpZ2h0IC8gKHRoaXMuaW5zdGFuY2UubGltaXQueSArIHRoaXMuc2Nyb2xsYmFySGVpZ2h0KSwgXCJweFwiKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zY3JvbGxiYXJUaHVtYkJDUiA9IHRoaXMuc2Nyb2xsYmFyVGh1bWIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICB0aGlzLnNjcm9sbEJhckxpbWl0ID0ge1xuICAgICAgICB4OiB0aGlzLnNjcm9sbGJhcldpZHRoIC0gdGhpcy5zY3JvbGxiYXJUaHVtYkJDUi53aWR0aCxcbiAgICAgICAgeTogdGhpcy5zY3JvbGxiYXJIZWlnaHQgLSB0aGlzLnNjcm9sbGJhclRodW1iQkNSLmhlaWdodFxuICAgICAgfTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZGVzdHJveVNjcm9sbEJhclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZXN0cm95U2Nyb2xsQmFyKCkge1xuICAgICAgdGhpcy5zY3JvbGxiYXJUaHVtYi5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLmdldFNjcm9sbEJhcik7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMucmVsZWFzZVNjcm9sbEJhcik7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5tb3ZlU2Nyb2xsQmFyKTtcbiAgICAgIHRoaXMuc2Nyb2xsYmFyLnJlbW92ZSgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRTY3JvbGxCYXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U2Nyb2xsQmFyKGUpIHtcbiAgICAgIHRoaXMuaXNEcmFnZ2luZ1Njcm9sbGJhciA9IHRydWU7XG4gICAgICB0aGlzLmNoZWNrU2Nyb2xsKCk7XG4gICAgICB0aGlzLmh0bWwuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLnNjcm9sbGluZ0NsYXNzKTtcbiAgICAgIHRoaXMuaHRtbC5jbGFzc0xpc3QuYWRkKHRoaXMuZHJhZ2dpbmdDbGFzcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbGVhc2VTY3JvbGxCYXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVsZWFzZVNjcm9sbEJhcihlKSB7XG4gICAgICB0aGlzLmlzRHJhZ2dpbmdTY3JvbGxiYXIgPSBmYWxzZTtcblxuICAgICAgaWYgKHRoaXMuaXNTY3JvbGxpbmcpIHtcbiAgICAgICAgdGhpcy5odG1sLmNsYXNzTGlzdC5hZGQodGhpcy5zY3JvbGxpbmdDbGFzcyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuaHRtbC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuZHJhZ2dpbmdDbGFzcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIm1vdmVTY3JvbGxCYXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbW92ZVNjcm9sbEJhcihlKSB7XG4gICAgICB2YXIgX3RoaXM1ID0gdGhpcztcblxuICAgICAgaWYgKHRoaXMuaXNEcmFnZ2luZ1Njcm9sbGJhcikge1xuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciB4ID0gKGUuY2xpZW50WCAtIF90aGlzNS5zY3JvbGxiYXJCQ1IubGVmdCkgKiAxMDAgLyBfdGhpczUuc2Nyb2xsYmFyV2lkdGggKiBfdGhpczUuaW5zdGFuY2UubGltaXQueCAvIDEwMDtcbiAgICAgICAgICB2YXIgeSA9IChlLmNsaWVudFkgLSBfdGhpczUuc2Nyb2xsYmFyQkNSLnRvcCkgKiAxMDAgLyBfdGhpczUuc2Nyb2xsYmFySGVpZ2h0ICogX3RoaXM1Lmluc3RhbmNlLmxpbWl0LnkgLyAxMDA7XG5cbiAgICAgICAgICBpZiAoeSA+IDAgJiYgeSA8IF90aGlzNS5pbnN0YW5jZS5saW1pdC55KSB7XG4gICAgICAgICAgICBfdGhpczUuaW5zdGFuY2UuZGVsdGEueSA9IHk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHggPiAwICYmIHggPCBfdGhpczUuaW5zdGFuY2UubGltaXQueCkge1xuICAgICAgICAgICAgX3RoaXM1Lmluc3RhbmNlLmRlbHRhLnggPSB4O1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImFkZEVsZW1lbnRzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZEVsZW1lbnRzKCkge1xuICAgICAgdmFyIF90aGlzNiA9IHRoaXM7XG5cbiAgICAgIHRoaXMuZWxzID0ge307XG4gICAgICB0aGlzLnBhcmFsbGF4RWxlbWVudHMgPSB7fTsgLy8gdGhpcy5zZWN0aW9ucy5mb3JFYWNoKChzZWN0aW9uLCB5KSA9PiB7XG5cbiAgICAgIHZhciBlbHMgPSB0aGlzLmVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbZGF0YS1cIi5jb25jYXQodGhpcy5uYW1lLCBcIl1cIikpO1xuICAgICAgZWxzLmZvckVhY2goZnVuY3Rpb24gKGVsLCBpbmRleCkge1xuICAgICAgICAvLyBUcnkgYW5kIGZpbmQgdGhlIHRhcmdldCdzIHBhcmVudCBzZWN0aW9uXG4gICAgICAgIHZhciB0YXJnZXRQYXJlbnRzID0gZ2V0UGFyZW50cyhlbCk7XG4gICAgICAgIHZhciBzZWN0aW9uID0gT2JqZWN0LmVudHJpZXMoX3RoaXM2LnNlY3Rpb25zKS5tYXAoZnVuY3Rpb24gKF9yZWYzKSB7XG4gICAgICAgICAgdmFyIF9yZWY0ID0gX3NsaWNlZFRvQXJyYXkoX3JlZjMsIDIpLFxuICAgICAgICAgICAgICBrZXkgPSBfcmVmNFswXSxcbiAgICAgICAgICAgICAgc2VjdGlvbiA9IF9yZWY0WzFdO1xuXG4gICAgICAgICAgcmV0dXJuIHNlY3Rpb247XG4gICAgICAgIH0pLmZpbmQoZnVuY3Rpb24gKHNlY3Rpb24pIHtcbiAgICAgICAgICByZXR1cm4gdGFyZ2V0UGFyZW50cy5pbmNsdWRlcyhzZWN0aW9uLmVsKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBjbCA9IGVsLmRhdGFzZXRbX3RoaXM2Lm5hbWUgKyAnQ2xhc3MnXSB8fCBfdGhpczZbXCJjbGFzc1wiXTtcbiAgICAgICAgdmFyIGlkID0gdHlwZW9mIGVsLmRhdGFzZXRbX3RoaXM2Lm5hbWUgKyAnSWQnXSA9PT0gJ3N0cmluZycgPyBlbC5kYXRhc2V0W190aGlzNi5uYW1lICsgJ0lkJ10gOiAnZWwnICsgaW5kZXg7XG4gICAgICAgIHZhciB0b3A7XG4gICAgICAgIHZhciBsZWZ0O1xuICAgICAgICB2YXIgcmVwZWF0ID0gZWwuZGF0YXNldFtfdGhpczYubmFtZSArICdSZXBlYXQnXTtcbiAgICAgICAgdmFyIGNhbGwgPSBlbC5kYXRhc2V0W190aGlzNi5uYW1lICsgJ0NhbGwnXTtcbiAgICAgICAgdmFyIHBvc2l0aW9uID0gZWwuZGF0YXNldFtfdGhpczYubmFtZSArICdQb3NpdGlvbiddO1xuICAgICAgICB2YXIgZGVsYXkgPSBlbC5kYXRhc2V0W190aGlzNi5uYW1lICsgJ0RlbGF5J107XG4gICAgICAgIHZhciBkaXJlY3Rpb24gPSBlbC5kYXRhc2V0W190aGlzNi5uYW1lICsgJ0RpcmVjdGlvbiddO1xuICAgICAgICB2YXIgc3RpY2t5ID0gdHlwZW9mIGVsLmRhdGFzZXRbX3RoaXM2Lm5hbWUgKyAnU3RpY2t5J10gPT09ICdzdHJpbmcnO1xuICAgICAgICB2YXIgc3BlZWQgPSBlbC5kYXRhc2V0W190aGlzNi5uYW1lICsgJ1NwZWVkJ10gPyBwYXJzZUZsb2F0KGVsLmRhdGFzZXRbX3RoaXM2Lm5hbWUgKyAnU3BlZWQnXSkgLyAxMCA6IGZhbHNlO1xuICAgICAgICB2YXIgb2Zmc2V0ID0gdHlwZW9mIGVsLmRhdGFzZXRbX3RoaXM2Lm5hbWUgKyAnT2Zmc2V0J10gPT09ICdzdHJpbmcnID8gZWwuZGF0YXNldFtfdGhpczYubmFtZSArICdPZmZzZXQnXS5zcGxpdCgnLCcpIDogX3RoaXM2Lm9mZnNldDtcbiAgICAgICAgdmFyIHRhcmdldCA9IGVsLmRhdGFzZXRbX3RoaXM2Lm5hbWUgKyAnVGFyZ2V0J107XG4gICAgICAgIHZhciB0YXJnZXRFbDtcblxuICAgICAgICBpZiAodGFyZ2V0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0YXJnZXRFbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJcIi5jb25jYXQodGFyZ2V0KSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGFyZ2V0RWwgPSBlbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0YXJnZXRFbEJDUiA9IHRhcmdldEVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgICAgIGlmIChzZWN0aW9uID09PSBudWxsKSB7XG4gICAgICAgICAgdG9wID0gdGFyZ2V0RWxCQ1IudG9wICsgX3RoaXM2Lmluc3RhbmNlLnNjcm9sbC55IC0gZ2V0VHJhbnNsYXRlKHRhcmdldEVsKS55O1xuICAgICAgICAgIGxlZnQgPSB0YXJnZXRFbEJDUi5sZWZ0ICsgX3RoaXM2Lmluc3RhbmNlLnNjcm9sbC54IC0gZ2V0VHJhbnNsYXRlKHRhcmdldEVsKS54O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICghc2VjdGlvbi5pblZpZXcpIHtcbiAgICAgICAgICAgIHRvcCA9IHRhcmdldEVsQkNSLnRvcCAtIGdldFRyYW5zbGF0ZShzZWN0aW9uLmVsKS55IC0gZ2V0VHJhbnNsYXRlKHRhcmdldEVsKS55O1xuICAgICAgICAgICAgbGVmdCA9IHRhcmdldEVsQkNSLmxlZnQgLSBnZXRUcmFuc2xhdGUoc2VjdGlvbi5lbCkueCAtIGdldFRyYW5zbGF0ZSh0YXJnZXRFbCkueDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdG9wID0gdGFyZ2V0RWxCQ1IudG9wICsgX3RoaXM2Lmluc3RhbmNlLnNjcm9sbC55IC0gZ2V0VHJhbnNsYXRlKHRhcmdldEVsKS55O1xuICAgICAgICAgICAgbGVmdCA9IHRhcmdldEVsQkNSLmxlZnQgKyBfdGhpczYuaW5zdGFuY2Uuc2Nyb2xsLnggLSBnZXRUcmFuc2xhdGUodGFyZ2V0RWwpLng7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGJvdHRvbSA9IHRvcCArIHRhcmdldEVsLm9mZnNldEhlaWdodDtcbiAgICAgICAgdmFyIHJpZ2h0ID0gbGVmdCArIHRhcmdldEVsLm9mZnNldFdpZHRoO1xuICAgICAgICB2YXIgbWlkZGxlID0ge1xuICAgICAgICAgIHg6IChyaWdodCAtIGxlZnQpIC8gMiArIGxlZnQsXG4gICAgICAgICAgeTogKGJvdHRvbSAtIHRvcCkgLyAyICsgdG9wXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKHN0aWNreSkge1xuICAgICAgICAgIHZhciBlbEJDUiA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgIHZhciBlbFRvcCA9IGVsQkNSLnRvcDtcbiAgICAgICAgICB2YXIgZWxMZWZ0ID0gZWxCQ1IubGVmdDtcbiAgICAgICAgICB2YXIgZWxEaXN0YW5jZSA9IHtcbiAgICAgICAgICAgIHg6IGVsTGVmdCAtIGxlZnQsXG4gICAgICAgICAgICB5OiBlbFRvcCAtIHRvcFxuICAgICAgICAgIH07XG4gICAgICAgICAgdG9wICs9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICAgICAgICBsZWZ0ICs9IHdpbmRvdy5pbm5lcldpZHRoO1xuICAgICAgICAgIGJvdHRvbSA9IGVsVG9wICsgdGFyZ2V0RWwub2Zmc2V0SGVpZ2h0IC0gZWwub2Zmc2V0SGVpZ2h0IC0gZWxEaXN0YW5jZVtfdGhpczYuZGlyZWN0aW9uQXhpc107XG4gICAgICAgICAgcmlnaHQgPSBlbExlZnQgKyB0YXJnZXRFbC5vZmZzZXRXaWR0aCAtIGVsLm9mZnNldFdpZHRoIC0gZWxEaXN0YW5jZVtfdGhpczYuZGlyZWN0aW9uQXhpc107XG4gICAgICAgICAgbWlkZGxlID0ge1xuICAgICAgICAgICAgeDogKHJpZ2h0IC0gbGVmdCkgLyAyICsgbGVmdCxcbiAgICAgICAgICAgIHk6IChib3R0b20gLSB0b3ApIC8gMiArIHRvcFxuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocmVwZWF0ID09ICdmYWxzZScpIHtcbiAgICAgICAgICByZXBlYXQgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIGlmIChyZXBlYXQgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmVwZWF0ID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXBlYXQgPSBfdGhpczYucmVwZWF0O1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHJlbGF0aXZlT2Zmc2V0ID0gWzAsIDBdO1xuXG4gICAgICAgIGlmIChvZmZzZXQpIHtcbiAgICAgICAgICBpZiAoX3RoaXM2LmRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9mZnNldC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICBpZiAodHlwZW9mIG9mZnNldFtpXSA9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGlmIChvZmZzZXRbaV0uaW5jbHVkZXMoJyUnKSkge1xuICAgICAgICAgICAgICAgICAgcmVsYXRpdmVPZmZzZXRbaV0gPSBwYXJzZUludChvZmZzZXRbaV0ucmVwbGFjZSgnJScsICcnKSAqIF90aGlzNi53aW5kb3dXaWR0aCAvIDEwMCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHJlbGF0aXZlT2Zmc2V0W2ldID0gcGFyc2VJbnQob2Zmc2V0W2ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVsYXRpdmVPZmZzZXRbaV0gPSBvZmZzZXRbaV07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGVmdCA9IGxlZnQgKyByZWxhdGl2ZU9mZnNldFswXTtcbiAgICAgICAgICAgIHJpZ2h0ID0gcmlnaHQgLSByZWxhdGl2ZU9mZnNldFsxXTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvZmZzZXQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvZmZzZXRbaV0gPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBpZiAob2Zmc2V0W2ldLmluY2x1ZGVzKCclJykpIHtcbiAgICAgICAgICAgICAgICAgIHJlbGF0aXZlT2Zmc2V0W2ldID0gcGFyc2VJbnQob2Zmc2V0W2ldLnJlcGxhY2UoJyUnLCAnJykgKiBfdGhpczYud2luZG93SGVpZ2h0IC8gMTAwKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgcmVsYXRpdmVPZmZzZXRbaV0gPSBwYXJzZUludChvZmZzZXRbaV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZWxhdGl2ZU9mZnNldFtpXSA9IG9mZnNldFtpXTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0b3AgPSB0b3AgKyByZWxhdGl2ZU9mZnNldFswXTtcbiAgICAgICAgICAgIGJvdHRvbSA9IGJvdHRvbSAtIHJlbGF0aXZlT2Zmc2V0WzFdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBtYXBwZWRFbCA9IHtcbiAgICAgICAgICBlbDogZWwsXG4gICAgICAgICAgaWQ6IGlkLFxuICAgICAgICAgIFwiY2xhc3NcIjogY2wsXG4gICAgICAgICAgc2VjdGlvbjogc2VjdGlvbixcbiAgICAgICAgICB0b3A6IHRvcCxcbiAgICAgICAgICBtaWRkbGU6IG1pZGRsZSxcbiAgICAgICAgICBib3R0b206IGJvdHRvbSxcbiAgICAgICAgICBsZWZ0OiBsZWZ0LFxuICAgICAgICAgIHJpZ2h0OiByaWdodCxcbiAgICAgICAgICBvZmZzZXQ6IG9mZnNldCxcbiAgICAgICAgICBwcm9ncmVzczogMCxcbiAgICAgICAgICByZXBlYXQ6IHJlcGVhdCxcbiAgICAgICAgICBpblZpZXc6IGZhbHNlLFxuICAgICAgICAgIGNhbGw6IGNhbGwsXG4gICAgICAgICAgc3BlZWQ6IHNwZWVkLFxuICAgICAgICAgIGRlbGF5OiBkZWxheSxcbiAgICAgICAgICBwb3NpdGlvbjogcG9zaXRpb24sXG4gICAgICAgICAgdGFyZ2V0OiB0YXJnZXRFbCxcbiAgICAgICAgICBkaXJlY3Rpb246IGRpcmVjdGlvbixcbiAgICAgICAgICBzdGlja3k6IHN0aWNreVxuICAgICAgICB9O1xuICAgICAgICBfdGhpczYuZWxzW2lkXSA9IG1hcHBlZEVsO1xuXG4gICAgICAgIGlmIChlbC5jbGFzc0xpc3QuY29udGFpbnMoY2wpKSB7XG4gICAgICAgICAgX3RoaXM2LnNldEluVmlldyhfdGhpczYuZWxzW2lkXSwgaWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNwZWVkICE9PSBmYWxzZSB8fCBzdGlja3kpIHtcbiAgICAgICAgICBfdGhpczYucGFyYWxsYXhFbGVtZW50c1tpZF0gPSBtYXBwZWRFbDtcbiAgICAgICAgfVxuICAgICAgfSk7IC8vIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJhZGRTZWN0aW9uc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRTZWN0aW9ucygpIHtcbiAgICAgIHZhciBfdGhpczcgPSB0aGlzO1xuXG4gICAgICB0aGlzLnNlY3Rpb25zID0ge307XG4gICAgICB2YXIgc2VjdGlvbnMgPSB0aGlzLmVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbZGF0YS1cIi5jb25jYXQodGhpcy5uYW1lLCBcIi1zZWN0aW9uXVwiKSk7XG5cbiAgICAgIGlmIChzZWN0aW9ucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgc2VjdGlvbnMgPSBbdGhpcy5lbF07XG4gICAgICB9XG5cbiAgICAgIHNlY3Rpb25zLmZvckVhY2goZnVuY3Rpb24gKHNlY3Rpb24sIGluZGV4KSB7XG4gICAgICAgIHZhciBpZCA9IHR5cGVvZiBzZWN0aW9uLmRhdGFzZXRbX3RoaXM3Lm5hbWUgKyAnSWQnXSA9PT0gJ3N0cmluZycgPyBzZWN0aW9uLmRhdGFzZXRbX3RoaXM3Lm5hbWUgKyAnSWQnXSA6ICdzZWN0aW9uJyArIGluZGV4O1xuICAgICAgICB2YXIgc2VjdGlvbkJDUiA9IHNlY3Rpb24uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIHZhciBvZmZzZXQgPSB7XG4gICAgICAgICAgeDogc2VjdGlvbkJDUi5sZWZ0IC0gd2luZG93LmlubmVyV2lkdGggKiAxLjUgLSBnZXRUcmFuc2xhdGUoc2VjdGlvbikueCxcbiAgICAgICAgICB5OiBzZWN0aW9uQkNSLnRvcCAtIHdpbmRvdy5pbm5lckhlaWdodCAqIDEuNSAtIGdldFRyYW5zbGF0ZShzZWN0aW9uKS55XG4gICAgICAgIH07XG4gICAgICAgIHZhciBsaW1pdCA9IHtcbiAgICAgICAgICB4OiBvZmZzZXQueCArIHNlY3Rpb25CQ1Iud2lkdGggKyB3aW5kb3cuaW5uZXJXaWR0aCAqIDIsXG4gICAgICAgICAgeTogb2Zmc2V0LnkgKyBzZWN0aW9uQkNSLmhlaWdodCArIHdpbmRvdy5pbm5lckhlaWdodCAqIDJcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHBlcnNpc3RlbnQgPSB0eXBlb2Ygc2VjdGlvbi5kYXRhc2V0W190aGlzNy5uYW1lICsgJ1BlcnNpc3RlbnQnXSA9PT0gJ3N0cmluZyc7XG4gICAgICAgIHNlY3Rpb24uc2V0QXR0cmlidXRlKCdkYXRhLXNjcm9sbC1zZWN0aW9uLWlkJywgaWQpO1xuICAgICAgICB2YXIgbWFwcGVkU2VjdGlvbiA9IHtcbiAgICAgICAgICBlbDogc2VjdGlvbixcbiAgICAgICAgICBvZmZzZXQ6IG9mZnNldCxcbiAgICAgICAgICBsaW1pdDogbGltaXQsXG4gICAgICAgICAgaW5WaWV3OiBmYWxzZSxcbiAgICAgICAgICBwZXJzaXN0ZW50OiBwZXJzaXN0ZW50LFxuICAgICAgICAgIGlkOiBpZFxuICAgICAgICB9O1xuICAgICAgICBfdGhpczcuc2VjdGlvbnNbaWRdID0gbWFwcGVkU2VjdGlvbjtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ0cmFuc2Zvcm1cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdHJhbnNmb3JtKGVsZW1lbnQsIHgsIHksIGRlbGF5KSB7XG4gICAgICB2YXIgdHJhbnNmb3JtO1xuXG4gICAgICBpZiAoIWRlbGF5KSB7XG4gICAgICAgIHRyYW5zZm9ybSA9IFwibWF0cml4M2QoMSwwLDAuMDAsMCwwLjAwLDEsMC4wMCwwLDAsMCwxLDAsXCIuY29uY2F0KHgsIFwiLFwiKS5jb25jYXQoeSwgXCIsMCwxKVwiKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBzdGFydCA9IGdldFRyYW5zbGF0ZShlbGVtZW50KTtcbiAgICAgICAgdmFyIGxlcnBYID0gbGVycChzdGFydC54LCB4LCBkZWxheSk7XG4gICAgICAgIHZhciBsZXJwWSA9IGxlcnAoc3RhcnQueSwgeSwgZGVsYXkpO1xuICAgICAgICB0cmFuc2Zvcm0gPSBcIm1hdHJpeDNkKDEsMCwwLjAwLDAsMC4wMCwxLDAuMDAsMCwwLDAsMSwwLFwiLmNvbmNhdChsZXJwWCwgXCIsXCIpLmNvbmNhdChsZXJwWSwgXCIsMCwxKVwiKTtcbiAgICAgIH1cblxuICAgICAgZWxlbWVudC5zdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG4gICAgICBlbGVtZW50LnN0eWxlLm1zVHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICAgICAgZWxlbWVudC5zdHlsZS50cmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInRyYW5zZm9ybUVsZW1lbnRzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRyYW5zZm9ybUVsZW1lbnRzKGlzRm9yY2VkKSB7XG4gICAgICB2YXIgX3RoaXM4ID0gdGhpcztcblxuICAgICAgdmFyIHNldEFsbEVsZW1lbnRzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmYWxzZTtcbiAgICAgIHZhciBzY3JvbGxSaWdodCA9IHRoaXMuaW5zdGFuY2Uuc2Nyb2xsLnggKyB0aGlzLndpbmRvd1dpZHRoO1xuICAgICAgdmFyIHNjcm9sbEJvdHRvbSA9IHRoaXMuaW5zdGFuY2Uuc2Nyb2xsLnkgKyB0aGlzLndpbmRvd0hlaWdodDtcbiAgICAgIHZhciBzY3JvbGxNaWRkbGUgPSB7XG4gICAgICAgIHg6IHRoaXMuaW5zdGFuY2Uuc2Nyb2xsLnggKyB0aGlzLndpbmRvd01pZGRsZS54LFxuICAgICAgICB5OiB0aGlzLmluc3RhbmNlLnNjcm9sbC55ICsgdGhpcy53aW5kb3dNaWRkbGUueVxuICAgICAgfTtcbiAgICAgIE9iamVjdC5lbnRyaWVzKHRoaXMucGFyYWxsYXhFbGVtZW50cykuZm9yRWFjaChmdW5jdGlvbiAoX3JlZjUpIHtcbiAgICAgICAgdmFyIF9yZWY2ID0gX3NsaWNlZFRvQXJyYXkoX3JlZjUsIDIpLFxuICAgICAgICAgICAgaSA9IF9yZWY2WzBdLFxuICAgICAgICAgICAgY3VycmVudCA9IF9yZWY2WzFdO1xuXG4gICAgICAgIHZhciB0cmFuc2Zvcm1EaXN0YW5jZSA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChpc0ZvcmNlZCkge1xuICAgICAgICAgIHRyYW5zZm9ybURpc3RhbmNlID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjdXJyZW50LmluVmlldyB8fCBzZXRBbGxFbGVtZW50cykge1xuICAgICAgICAgIHN3aXRjaCAoY3VycmVudC5wb3NpdGlvbikge1xuICAgICAgICAgICAgY2FzZSAndG9wJzpcbiAgICAgICAgICAgICAgdHJhbnNmb3JtRGlzdGFuY2UgPSBfdGhpczguaW5zdGFuY2Uuc2Nyb2xsW190aGlzOC5kaXJlY3Rpb25BeGlzXSAqIC1jdXJyZW50LnNwZWVkO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAnZWxlbWVudFRvcCc6XG4gICAgICAgICAgICAgIHRyYW5zZm9ybURpc3RhbmNlID0gKHNjcm9sbEJvdHRvbSAtIGN1cnJlbnQudG9wKSAqIC1jdXJyZW50LnNwZWVkO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAnYm90dG9tJzpcbiAgICAgICAgICAgICAgdHJhbnNmb3JtRGlzdGFuY2UgPSAoX3RoaXM4Lmluc3RhbmNlLmxpbWl0W190aGlzOC5kaXJlY3Rpb25BeGlzXSAtIHNjcm9sbEJvdHRvbSArIF90aGlzOC53aW5kb3dIZWlnaHQpICogY3VycmVudC5zcGVlZDtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ2xlZnQnOlxuICAgICAgICAgICAgICB0cmFuc2Zvcm1EaXN0YW5jZSA9IF90aGlzOC5pbnN0YW5jZS5zY3JvbGxbX3RoaXM4LmRpcmVjdGlvbkF4aXNdICogLWN1cnJlbnQuc3BlZWQ7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICdlbGVtZW50TGVmdCc6XG4gICAgICAgICAgICAgIHRyYW5zZm9ybURpc3RhbmNlID0gKHNjcm9sbFJpZ2h0IC0gY3VycmVudC5sZWZ0KSAqIC1jdXJyZW50LnNwZWVkO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAncmlnaHQnOlxuICAgICAgICAgICAgICB0cmFuc2Zvcm1EaXN0YW5jZSA9IChfdGhpczguaW5zdGFuY2UubGltaXRbX3RoaXM4LmRpcmVjdGlvbkF4aXNdIC0gc2Nyb2xsUmlnaHQgKyBfdGhpczgud2luZG93SGVpZ2h0KSAqIGN1cnJlbnQuc3BlZWQ7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICB0cmFuc2Zvcm1EaXN0YW5jZSA9IChzY3JvbGxNaWRkbGVbX3RoaXM4LmRpcmVjdGlvbkF4aXNdIC0gY3VycmVudC5taWRkbGVbX3RoaXM4LmRpcmVjdGlvbkF4aXNdKSAqIC1jdXJyZW50LnNwZWVkO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY3VycmVudC5zdGlja3kpIHtcbiAgICAgICAgICBpZiAoY3VycmVudC5pblZpZXcpIHtcbiAgICAgICAgICAgIGlmIChfdGhpczguZGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgICAgICAgICAgdHJhbnNmb3JtRGlzdGFuY2UgPSBfdGhpczguaW5zdGFuY2Uuc2Nyb2xsLnggLSBjdXJyZW50LmxlZnQgKyB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRyYW5zZm9ybURpc3RhbmNlID0gX3RoaXM4Lmluc3RhbmNlLnNjcm9sbC55IC0gY3VycmVudC50b3AgKyB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChfdGhpczguZGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgICAgICAgICAgaWYgKF90aGlzOC5pbnN0YW5jZS5zY3JvbGwueCA8IGN1cnJlbnQubGVmdCAtIHdpbmRvdy5pbm5lcldpZHRoICYmIF90aGlzOC5pbnN0YW5jZS5zY3JvbGwueCA8IGN1cnJlbnQubGVmdCAtIHdpbmRvdy5pbm5lcldpZHRoIC8gMikge1xuICAgICAgICAgICAgICAgIHRyYW5zZm9ybURpc3RhbmNlID0gMDtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChfdGhpczguaW5zdGFuY2Uuc2Nyb2xsLnggPiBjdXJyZW50LnJpZ2h0ICYmIF90aGlzOC5pbnN0YW5jZS5zY3JvbGwueCA+IGN1cnJlbnQucmlnaHQgKyAxMDApIHtcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm1EaXN0YW5jZSA9IGN1cnJlbnQucmlnaHQgLSBjdXJyZW50LmxlZnQgKyB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm1EaXN0YW5jZSA9IGZhbHNlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpZiAoX3RoaXM4Lmluc3RhbmNlLnNjcm9sbC55IDwgY3VycmVudC50b3AgLSB3aW5kb3cuaW5uZXJIZWlnaHQgJiYgX3RoaXM4Lmluc3RhbmNlLnNjcm9sbC55IDwgY3VycmVudC50b3AgLSB3aW5kb3cuaW5uZXJIZWlnaHQgLyAyKSB7XG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtRGlzdGFuY2UgPSAwO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKF90aGlzOC5pbnN0YW5jZS5zY3JvbGwueSA+IGN1cnJlbnQuYm90dG9tICYmIF90aGlzOC5pbnN0YW5jZS5zY3JvbGwueSA+IGN1cnJlbnQuYm90dG9tICsgMTAwKSB7XG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtRGlzdGFuY2UgPSBjdXJyZW50LmJvdHRvbSAtIGN1cnJlbnQudG9wICsgd2luZG93LmlubmVySGVpZ2h0O1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRyYW5zZm9ybURpc3RhbmNlID0gZmFsc2U7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHJhbnNmb3JtRGlzdGFuY2UgIT09IGZhbHNlKSB7XG4gICAgICAgICAgaWYgKGN1cnJlbnQuZGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcgfHwgX3RoaXM4LmRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnICYmIGN1cnJlbnQuZGlyZWN0aW9uICE9PSAndmVydGljYWwnKSB7XG4gICAgICAgICAgICBfdGhpczgudHJhbnNmb3JtKGN1cnJlbnQuZWwsIHRyYW5zZm9ybURpc3RhbmNlLCAwLCBpc0ZvcmNlZCA/IGZhbHNlIDogY3VycmVudC5kZWxheSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF90aGlzOC50cmFuc2Zvcm0oY3VycmVudC5lbCwgMCwgdHJhbnNmb3JtRGlzdGFuY2UsIGlzRm9yY2VkID8gZmFsc2UgOiBjdXJyZW50LmRlbGF5KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTY3JvbGwgdG8gYSBkZXNpcmVkIHRhcmdldC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAgQXZhaWxhYmxlIG9wdGlvbnMgOlxuICAgICAqICAgICAgICAgIHRhcmdldCB7bm9kZSwgc3RyaW5nLCBcInRvcFwiLCBcImJvdHRvbVwiLCBpbnR9IC0gVGhlIERPTSBlbGVtZW50IHdlIHdhbnQgdG8gc2Nyb2xsIHRvXG4gICAgICogICAgICAgICAgb3B0aW9ucyB7b2JqZWN0fSAtIE9wdGlvbnMgb2JqZWN0IGZvciBhZGRpdGlvbm5hbCBzZXR0aW5ncy5cbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwic2Nyb2xsVG9cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2Nyb2xsVG8odGFyZ2V0KSB7XG4gICAgICB2YXIgX3RoaXM5ID0gdGhpcztcblxuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgICAgLy8gUGFyc2Ugb3B0aW9uc1xuICAgICAgdmFyIG9mZnNldCA9IHBhcnNlSW50KG9wdGlvbnMub2Zmc2V0KSB8fCAwOyAvLyBBbiBvZmZzZXQgdG8gYXBwbHkgb24gdG9wIG9mIGdpdmVuIGB0YXJnZXRgIG9yIGBzb3VyY2VFbGVtYCdzIHRhcmdldFxuXG4gICAgICB2YXIgZHVyYXRpb24gPSAhaXNOYU4ocGFyc2VJbnQob3B0aW9ucy5kdXJhdGlvbikpID8gcGFyc2VJbnQob3B0aW9ucy5kdXJhdGlvbikgOiAxMDAwOyAvLyBEdXJhdGlvbiBvZiB0aGUgc2Nyb2xsIGFuaW1hdGlvbiBpbiBtaWxsaXNlY29uZHNcblxuICAgICAgdmFyIGVhc2luZyA9IG9wdGlvbnMuZWFzaW5nIHx8IFswLjI1LCAwLjAsIDAuMzUsIDEuMF07IC8vIEFuIGFycmF5IG9mIDQgZmxvYXRzIGJldHdlZW4gMCBhbmQgMSBkZWZpbmluZyB0aGUgYmV6aWVyIGN1cnZlIGZvciB0aGUgYW5pbWF0aW9uJ3MgZWFzaW5nLiBTZWUgaHR0cDovL2dyZXdlYi5tZS9iZXppZXItZWFzaW5nLWVkaXRvci9leGFtcGxlL1xuXG4gICAgICB2YXIgZGlzYWJsZUxlcnAgPSBvcHRpb25zLmRpc2FibGVMZXJwID8gdHJ1ZSA6IGZhbHNlOyAvLyBMZXJwIGVmZmVjdCB3b24ndCBiZSBhcHBsaWVkIGlmIHNldCB0byB0cnVlXG5cbiAgICAgIHZhciBjYWxsYmFjayA9IG9wdGlvbnMuY2FsbGJhY2sgPyBvcHRpb25zLmNhbGxiYWNrIDogZmFsc2U7IC8vIGZ1bmN0aW9uIGNhbGxlZCB3aGVuIHNjcm9sbFRvIGNvbXBsZXRlcyAobm90ZSB0aGF0IGl0IHdvbid0IHdhaXQgZm9yIGxlcnAgdG8gc3RhYmlsaXplKVxuXG4gICAgICBlYXNpbmcgPSBzcmMkMS5hcHBseSh2b2lkIDAsIF90b0NvbnN1bWFibGVBcnJheShlYXNpbmcpKTtcblxuICAgICAgaWYgKHR5cGVvZiB0YXJnZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIC8vIFNlbGVjdG9yIG9yIGJvdW5kYXJpZXNcbiAgICAgICAgaWYgKHRhcmdldCA9PT0gJ3RvcCcpIHtcbiAgICAgICAgICB0YXJnZXQgPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKHRhcmdldCA9PT0gJ2JvdHRvbScpIHtcbiAgICAgICAgICB0YXJnZXQgPSB0aGlzLmluc3RhbmNlLmxpbWl0Lnk7XG4gICAgICAgIH0gZWxzZSBpZiAodGFyZ2V0ID09PSAnbGVmdCcpIHtcbiAgICAgICAgICB0YXJnZXQgPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKHRhcmdldCA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICAgIHRhcmdldCA9IHRoaXMuaW5zdGFuY2UubGltaXQueDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0YXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7IC8vIElmIHRoZSBxdWVyeSBmYWlscywgYWJvcnRcblxuICAgICAgICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0YXJnZXQgPT09ICdudW1iZXInKSB7XG4gICAgICAgIC8vIEFic29sdXRlIGNvb3JkaW5hdGVcbiAgICAgICAgdGFyZ2V0ID0gcGFyc2VJbnQodGFyZ2V0KTtcbiAgICAgIH0gZWxzZSBpZiAodGFyZ2V0ICYmIHRhcmdldC50YWdOYW1lKSA7IGVsc2Uge1xuICAgICAgICBjb25zb2xlLndhcm4oJ2B0YXJnZXRgIHBhcmFtZXRlciBpcyBub3QgdmFsaWQnKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBXZSBoYXZlIGEgdGFyZ2V0IHRoYXQgaXMgbm90IGEgY29vcmRpbmF0ZSB5ZXQsIGdldCBpdFxuXG5cbiAgICAgIGlmICh0eXBlb2YgdGFyZ2V0ICE9PSAnbnVtYmVyJykge1xuICAgICAgICAvLyBWZXJpZnkgdGhlIGdpdmVuIHRhcmdldCBiZWxvbmdzIHRvIHRoaXMgc2Nyb2xsIHNjb3BlXG4gICAgICAgIHZhciB0YXJnZXRJblNjb3BlID0gZ2V0UGFyZW50cyh0YXJnZXQpLmluY2x1ZGVzKHRoaXMuZWwpO1xuXG4gICAgICAgIGlmICghdGFyZ2V0SW5TY29wZSkge1xuICAgICAgICAgIC8vIElmIHRoZSB0YXJnZXQgaXNuJ3QgaW5zaWRlIG91ciBtYWluIGVsZW1lbnQsIGFib3J0IGFueSBhY3Rpb25cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gLy8gR2V0IHRhcmdldCBvZmZzZXQgZnJvbSB0b3BcblxuXG4gICAgICAgIHZhciB0YXJnZXRCQ1IgPSB0YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIHZhciBvZmZzZXRUb3AgPSB0YXJnZXRCQ1IudG9wO1xuICAgICAgICB2YXIgb2Zmc2V0TGVmdCA9IHRhcmdldEJDUi5sZWZ0OyAvLyBUcnkgYW5kIGZpbmQgdGhlIHRhcmdldCdzIHBhcmVudCBzZWN0aW9uXG5cbiAgICAgICAgdmFyIHRhcmdldFBhcmVudHMgPSBnZXRQYXJlbnRzKHRhcmdldCk7XG4gICAgICAgIHZhciBwYXJlbnRTZWN0aW9uID0gdGFyZ2V0UGFyZW50cy5maW5kKGZ1bmN0aW9uIChjYW5kaWRhdGUpIHtcbiAgICAgICAgICByZXR1cm4gT2JqZWN0LmVudHJpZXMoX3RoaXM5LnNlY3Rpb25zKSAvLyBHZXQgc2VjdGlvbnMgYXNzb2NpYXRpdmUgYXJyYXkgYXMgYSByZWd1bGFyIGFycmF5XG4gICAgICAgICAgLm1hcChmdW5jdGlvbiAoX3JlZjcpIHtcbiAgICAgICAgICAgIHZhciBfcmVmOCA9IF9zbGljZWRUb0FycmF5KF9yZWY3LCAyKSxcbiAgICAgICAgICAgICAgICBrZXkgPSBfcmVmOFswXSxcbiAgICAgICAgICAgICAgICBzZWN0aW9uID0gX3JlZjhbMV07XG5cbiAgICAgICAgICAgIHJldHVybiBzZWN0aW9uO1xuICAgICAgICAgIH0pIC8vIG1hcCB0byBzZWN0aW9uIG9ubHkgKHdlIGRvbnQgbmVlZCB0aGUga2V5IGhlcmUpXG4gICAgICAgICAgLmZpbmQoZnVuY3Rpb24gKHNlY3Rpb24pIHtcbiAgICAgICAgICAgIHJldHVybiBzZWN0aW9uLmVsID09IGNhbmRpZGF0ZTtcbiAgICAgICAgICB9KTsgLy8gZmluYWxseSBmaW5kIHRoZSBzZWN0aW9uIHRoYXQgbWF0Y2hlcyB0aGUgY2FuZGlkYXRlXG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgcGFyZW50U2VjdGlvbk9mZnNldCA9IDA7XG5cbiAgICAgICAgaWYgKHBhcmVudFNlY3Rpb24pIHtcbiAgICAgICAgICBwYXJlbnRTZWN0aW9uT2Zmc2V0ID0gZ2V0VHJhbnNsYXRlKHBhcmVudFNlY3Rpb24pW3RoaXMuZGlyZWN0aW9uQXhpc107IC8vIFdlIGdvdCBhIHBhcmVudCBzZWN0aW9uLCBzdG9yZSBpdCdzIGN1cnJlbnQgb2Zmc2V0IHRvIHJlbW92ZSBpdCBsYXRlclxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGlmIG5vIHBhcmVudCBzZWN0aW9uIGlzIGZvdW5kIHdlIG5lZWQgdG8gdXNlIGluc3RhbmNlIHNjcm9sbCBkaXJlY3RseVxuICAgICAgICAgIHBhcmVudFNlY3Rpb25PZmZzZXQgPSAtdGhpcy5pbnN0YW5jZS5zY3JvbGxbdGhpcy5kaXJlY3Rpb25BeGlzXTtcbiAgICAgICAgfSAvLyBGaW5hbCB2YWx1ZSBvZiBzY3JvbGwgZGVzdGluYXRpb24gOiBvZmZzZXRUb3AgKyAob3B0aW9uYWwgb2Zmc2V0IGdpdmVuIGluIG9wdGlvbnMpIC0gKHBhcmVudCdzIHNlY3Rpb24gdHJhbnNsYXRlKVxuXG5cbiAgICAgICAgaWYgKHRoaXMuZGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgICAgICBvZmZzZXQgPSBvZmZzZXRMZWZ0ICsgb2Zmc2V0IC0gcGFyZW50U2VjdGlvbk9mZnNldDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvZmZzZXQgPSBvZmZzZXRUb3AgKyBvZmZzZXQgLSBwYXJlbnRTZWN0aW9uT2Zmc2V0O1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvZmZzZXQgPSB0YXJnZXQgKyBvZmZzZXQ7XG4gICAgICB9IC8vIEFjdHVhbCBzY3JvbGx0b1xuICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAgIC8vIFNldHVwXG5cblxuICAgICAgdmFyIHNjcm9sbFN0YXJ0ID0gcGFyc2VGbG9hdCh0aGlzLmluc3RhbmNlLmRlbHRhW3RoaXMuZGlyZWN0aW9uQXhpc10pO1xuICAgICAgdmFyIHNjcm9sbFRhcmdldCA9IE1hdGgubWF4KDAsIE1hdGgubWluKG9mZnNldCwgdGhpcy5pbnN0YW5jZS5saW1pdFt0aGlzLmRpcmVjdGlvbkF4aXNdKSk7IC8vIE1ha2Ugc3VyZSBvdXIgdGFyZ2V0IGlzIGluIHRoZSBzY3JvbGwgYm91bmRhcmllc1xuXG4gICAgICB2YXIgc2Nyb2xsRGlmZiA9IHNjcm9sbFRhcmdldCAtIHNjcm9sbFN0YXJ0O1xuXG4gICAgICB2YXIgcmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKHApIHtcbiAgICAgICAgaWYgKGRpc2FibGVMZXJwKSB7XG4gICAgICAgICAgaWYgKF90aGlzOS5kaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJykge1xuICAgICAgICAgICAgX3RoaXM5LnNldFNjcm9sbChzY3JvbGxTdGFydCArIHNjcm9sbERpZmYgKiBwLCBfdGhpczkuaW5zdGFuY2UuZGVsdGEueSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF90aGlzOS5zZXRTY3JvbGwoX3RoaXM5Lmluc3RhbmNlLmRlbHRhLngsIHNjcm9sbFN0YXJ0ICsgc2Nyb2xsRGlmZiAqIHApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdGhpczkuaW5zdGFuY2UuZGVsdGFbX3RoaXM5LmRpcmVjdGlvbkF4aXNdID0gc2Nyb2xsU3RhcnQgKyBzY3JvbGxEaWZmICogcDtcbiAgICAgICAgfVxuICAgICAgfTsgLy8gUHJlcGFyZSB0aGUgc2Nyb2xsXG5cblxuICAgICAgdGhpcy5hbmltYXRpbmdTY3JvbGwgPSB0cnVlOyAvLyBUaGlzIGJvb2xlYW4gYWxsb3dzIHRvIHByZXZlbnQgYGNoZWNrU2Nyb2xsKClgIGZyb20gY2FsbGluZyBgc3RvcFNjcm9sbGluZ2Agd2hlbiB0aGUgYW5pbWF0aW9uIGlzIHNsb3cgKGkuZS4gYXQgdGhlIGJlZ2lubmluZyBvZiBhbiBFYXNlSW4pXG5cbiAgICAgIHRoaXMuc3RvcFNjcm9sbGluZygpOyAvLyBTdG9wIGFueSBtb3ZlbWVudCwgYWxsb3dzIHRvIGtpbGwgYW55IG90aGVyIGBzY3JvbGxUb2Agc3RpbGwgaGFwcGVuaW5nXG5cbiAgICAgIHRoaXMuc3RhcnRTY3JvbGxpbmcoKTsgLy8gUmVzdGFydCB0aGUgc2Nyb2xsXG4gICAgICAvLyBTdGFydCB0aGUgYW5pbWF0aW9uIGxvb3BcblxuICAgICAgdmFyIHN0YXJ0ID0gRGF0ZS5ub3coKTtcblxuICAgICAgdmFyIGxvb3AgPSBmdW5jdGlvbiBsb29wKCkge1xuICAgICAgICB2YXIgcCA9IChEYXRlLm5vdygpIC0gc3RhcnQpIC8gZHVyYXRpb247IC8vIEFuaW1hdGlvbiBwcm9ncmVzc1xuXG4gICAgICAgIGlmIChwID4gMSkge1xuICAgICAgICAgIC8vIEFuaW1hdGlvbiBlbmRzXG4gICAgICAgICAgcmVuZGVyKDEpO1xuICAgICAgICAgIF90aGlzOS5hbmltYXRpbmdTY3JvbGwgPSBmYWxzZTtcbiAgICAgICAgICBpZiAoZHVyYXRpb24gPT0gMCkgX3RoaXM5LnVwZGF0ZSgpO1xuICAgICAgICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2soKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdGhpczkuc2Nyb2xsVG9SYWYgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUobG9vcCk7XG4gICAgICAgICAgcmVuZGVyKGVhc2luZyhwKSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGxvb3AoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidXBkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICAgIHRoaXMuc2V0U2Nyb2xsTGltaXQoKTtcbiAgICAgIHRoaXMuYWRkU2VjdGlvbnMoKTtcbiAgICAgIHRoaXMuYWRkRWxlbWVudHMoKTtcbiAgICAgIHRoaXMuZGV0ZWN0RWxlbWVudHMoKTtcbiAgICAgIHRoaXMudXBkYXRlU2Nyb2xsKCk7XG4gICAgICB0aGlzLnRyYW5zZm9ybUVsZW1lbnRzKHRydWUpO1xuICAgICAgdGhpcy5yZWluaXRTY3JvbGxCYXIoKTtcbiAgICAgIHRoaXMuY2hlY2tTY3JvbGwodHJ1ZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInN0YXJ0U2Nyb2xsXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN0YXJ0U2Nyb2xsKCkge1xuICAgICAgdGhpcy5zdG9wID0gZmFsc2U7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInN0b3BTY3JvbGxcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3RvcFNjcm9sbCgpIHtcbiAgICAgIHRoaXMuc3RvcCA9IHRydWU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNldFNjcm9sbFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRTY3JvbGwoeCwgeSkge1xuICAgICAgdGhpcy5pbnN0YW5jZSA9IF9vYmplY3RTcHJlYWQyKF9vYmplY3RTcHJlYWQyKHt9LCB0aGlzLmluc3RhbmNlKSwge30sIHtcbiAgICAgICAgc2Nyb2xsOiB7XG4gICAgICAgICAgeDogeCxcbiAgICAgICAgICB5OiB5XG4gICAgICAgIH0sXG4gICAgICAgIGRlbHRhOiB7XG4gICAgICAgICAgeDogeCxcbiAgICAgICAgICB5OiB5XG4gICAgICAgIH0sXG4gICAgICAgIHNwZWVkOiAwXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZGVzdHJveVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgX2dldChfZ2V0UHJvdG90eXBlT2YoX2RlZmF1bHQucHJvdG90eXBlKSwgXCJkZXN0cm95XCIsIHRoaXMpLmNhbGwodGhpcyk7XG5cbiAgICAgIHRoaXMuc3RvcFNjcm9sbGluZygpO1xuICAgICAgdGhpcy5odG1sLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5zbW9vdGhDbGFzcyk7XG4gICAgICB0aGlzLnZzLmRlc3Ryb3koKTtcbiAgICAgIHRoaXMuZGVzdHJveVNjcm9sbEJhcigpO1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLmNoZWNrS2V5LCBmYWxzZSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIF9kZWZhdWx0O1xufShfZGVmYXVsdCk7XG5cbnZhciBTbW9vdGggPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTbW9vdGgoKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNtb290aCk7XG5cbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zOyAvLyBPdmVycmlkZSBkZWZhdWx0IG9wdGlvbnMgd2l0aCBnaXZlbiBvbmVzXG5cbiAgICBPYmplY3QuYXNzaWduKHRoaXMsIGRlZmF1bHRzLCBvcHRpb25zKTtcbiAgICB0aGlzLnNtYXJ0cGhvbmUgPSBkZWZhdWx0cy5zbWFydHBob25lO1xuICAgIGlmIChvcHRpb25zLnNtYXJ0cGhvbmUpIE9iamVjdC5hc3NpZ24odGhpcy5zbWFydHBob25lLCBvcHRpb25zLnNtYXJ0cGhvbmUpO1xuICAgIHRoaXMudGFibGV0ID0gZGVmYXVsdHMudGFibGV0O1xuICAgIGlmIChvcHRpb25zLnRhYmxldCkgT2JqZWN0LmFzc2lnbih0aGlzLnRhYmxldCwgb3B0aW9ucy50YWJsZXQpO1xuICAgIGlmICghdGhpcy5zbW9vdGggJiYgdGhpcy5kaXJlY3Rpb24gPT0gJ2hvcml6b250YWwnKSBjb25zb2xlLndhcm4oJ/CfmqggYHNtb290aDpmYWxzZWAgJiBgaG9yaXpvbnRhbGAgZGlyZWN0aW9uIGFyZSBub3QgeWV0IGNvbXBhdGlibGUnKTtcbiAgICBpZiAoIXRoaXMudGFibGV0LnNtb290aCAmJiB0aGlzLnRhYmxldC5kaXJlY3Rpb24gPT0gJ2hvcml6b250YWwnKSBjb25zb2xlLndhcm4oJ/CfmqggYHNtb290aDpmYWxzZWAgJiBgaG9yaXpvbnRhbGAgZGlyZWN0aW9uIGFyZSBub3QgeWV0IGNvbXBhdGlibGUgKHRhYmxldCknKTtcbiAgICBpZiAoIXRoaXMuc21hcnRwaG9uZS5zbW9vdGggJiYgdGhpcy5zbWFydHBob25lLmRpcmVjdGlvbiA9PSAnaG9yaXpvbnRhbCcpIGNvbnNvbGUud2Fybign8J+aqCBgc21vb3RoOmZhbHNlYCAmIGBob3Jpem9udGFsYCBkaXJlY3Rpb24gYXJlIG5vdCB5ZXQgY29tcGF0aWJsZSAoc21hcnRwaG9uZSknKTtcbiAgICB0aGlzLmluaXQoKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhTbW9vdGgsIFt7XG4gICAga2V5OiBcImluaXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5pc01vYmlsZSA9IC9BbmRyb2lkfGlQaG9uZXxpUGFkfGlQb2R8QmxhY2tCZXJyeXxJRU1vYmlsZXxPcGVyYSBNaW5pL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSB8fCBuYXZpZ2F0b3IucGxhdGZvcm0gPT09ICdNYWNJbnRlbCcgJiYgbmF2aWdhdG9yLm1heFRvdWNoUG9pbnRzID4gMSB8fCB3aW5kb3cuaW5uZXJXaWR0aCA8IHRoaXMudGFibGV0LmJyZWFrcG9pbnQ7XG4gICAgICB0aGlzLm9wdGlvbnMuaXNUYWJsZXQgPSB0aGlzLm9wdGlvbnMuaXNNb2JpbGUgJiYgd2luZG93LmlubmVyV2lkdGggPj0gdGhpcy50YWJsZXQuYnJlYWtwb2ludDtcblxuICAgICAgaWYgKHRoaXMuc21vb3RoICYmICF0aGlzLm9wdGlvbnMuaXNNb2JpbGUgfHwgdGhpcy50YWJsZXQuc21vb3RoICYmIHRoaXMub3B0aW9ucy5pc1RhYmxldCB8fCB0aGlzLnNtYXJ0cGhvbmUuc21vb3RoICYmIHRoaXMub3B0aW9ucy5pc01vYmlsZSAmJiAhdGhpcy5vcHRpb25zLmlzVGFibGV0KSB7XG4gICAgICAgIHRoaXMuc2Nyb2xsID0gbmV3IF9kZWZhdWx0JDIodGhpcy5vcHRpb25zKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc2Nyb2xsID0gbmV3IF9kZWZhdWx0JDEodGhpcy5vcHRpb25zKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zY3JvbGwuaW5pdCgpO1xuXG4gICAgICBpZiAod2luZG93LmxvY2F0aW9uLmhhc2gpIHtcbiAgICAgICAgLy8gR2V0IHRoZSBoYXNoIHdpdGhvdXQgdGhlICcjJyBhbmQgZmluZCB0aGUgbWF0Y2hpbmcgZWxlbWVudFxuICAgICAgICB2YXIgaWQgPSB3aW5kb3cubG9jYXRpb24uaGFzaC5zbGljZSgxLCB3aW5kb3cubG9jYXRpb24uaGFzaC5sZW5ndGgpO1xuICAgICAgICB2YXIgdGFyZ2V0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpOyAvLyBJZiBmb3VuZCwgc2Nyb2xsIHRvIHRoZSBlbGVtZW50XG5cbiAgICAgICAgaWYgKHRhcmdldCkgdGhpcy5zY3JvbGwuc2Nyb2xsVG8odGFyZ2V0KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidXBkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICAgIHRoaXMuc2Nyb2xsLnVwZGF0ZSgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzdGFydFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdGFydCgpIHtcbiAgICAgIHRoaXMuc2Nyb2xsLnN0YXJ0U2Nyb2xsKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInN0b3BcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3RvcCgpIHtcbiAgICAgIHRoaXMuc2Nyb2xsLnN0b3BTY3JvbGwoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2Nyb2xsVG9cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2Nyb2xsVG8odGFyZ2V0LCBvcHRpb25zKSB7XG4gICAgICB0aGlzLnNjcm9sbC5zY3JvbGxUbyh0YXJnZXQsIG9wdGlvbnMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZXRTY3JvbGxcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0U2Nyb2xsKHgsIHkpIHtcbiAgICAgIHRoaXMuc2Nyb2xsLnNldFNjcm9sbCh4LCB5KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwib25cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gb24oZXZlbnQsIGZ1bmMpIHtcbiAgICAgIHRoaXMuc2Nyb2xsLnNldEV2ZW50cyhldmVudCwgZnVuYyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIm9mZlwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvZmYoZXZlbnQsIGZ1bmMpIHtcbiAgICAgIHRoaXMuc2Nyb2xsLnVuc2V0RXZlbnRzKGV2ZW50LCBmdW5jKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZGVzdHJveVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgdGhpcy5zY3JvbGwuZGVzdHJveSgpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTbW9vdGg7XG59KCk7XG5cbnZhciBOYXRpdmUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBOYXRpdmUoKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE5hdGl2ZSk7XG5cbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zOyAvLyBPdmVycmlkZSBkZWZhdWx0IG9wdGlvbnMgd2l0aCBnaXZlbiBvbmVzXG5cbiAgICBPYmplY3QuYXNzaWduKHRoaXMsIGRlZmF1bHRzLCBvcHRpb25zKTtcbiAgICB0aGlzLnNtYXJ0cGhvbmUgPSBkZWZhdWx0cy5zbWFydHBob25lO1xuICAgIGlmIChvcHRpb25zLnNtYXJ0cGhvbmUpIE9iamVjdC5hc3NpZ24odGhpcy5zbWFydHBob25lLCBvcHRpb25zLnNtYXJ0cGhvbmUpO1xuICAgIHRoaXMudGFibGV0ID0gZGVmYXVsdHMudGFibGV0O1xuICAgIGlmIChvcHRpb25zLnRhYmxldCkgT2JqZWN0LmFzc2lnbih0aGlzLnRhYmxldCwgb3B0aW9ucy50YWJsZXQpO1xuICAgIHRoaXMuaW5pdCgpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKE5hdGl2ZSwgW3tcbiAgICBrZXk6IFwiaW5pdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgdGhpcy5zY3JvbGwgPSBuZXcgX2RlZmF1bHQkMSh0aGlzLm9wdGlvbnMpO1xuICAgICAgdGhpcy5zY3JvbGwuaW5pdCgpO1xuXG4gICAgICBpZiAod2luZG93LmxvY2F0aW9uLmhhc2gpIHtcbiAgICAgICAgLy8gR2V0IHRoZSBoYXNoIHdpdGhvdXQgdGhlICcjJyBhbmQgZmluZCB0aGUgbWF0Y2hpbmcgZWxlbWVudFxuICAgICAgICB2YXIgaWQgPSB3aW5kb3cubG9jYXRpb24uaGFzaC5zbGljZSgxLCB3aW5kb3cubG9jYXRpb24uaGFzaC5sZW5ndGgpO1xuICAgICAgICB2YXIgdGFyZ2V0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpOyAvLyBJZiBmb3VuZCwgc2Nyb2xsIHRvIHRoZSBlbGVtZW50XG5cbiAgICAgICAgaWYgKHRhcmdldCkgdGhpcy5zY3JvbGwuc2Nyb2xsVG8odGFyZ2V0KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidXBkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICAgIHRoaXMuc2Nyb2xsLnVwZGF0ZSgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzdGFydFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdGFydCgpIHtcbiAgICAgIHRoaXMuc2Nyb2xsLnN0YXJ0U2Nyb2xsKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInN0b3BcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3RvcCgpIHtcbiAgICAgIHRoaXMuc2Nyb2xsLnN0b3BTY3JvbGwoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2Nyb2xsVG9cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2Nyb2xsVG8odGFyZ2V0LCBvcHRpb25zKSB7XG4gICAgICB0aGlzLnNjcm9sbC5zY3JvbGxUbyh0YXJnZXQsIG9wdGlvbnMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZXRTY3JvbGxcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0U2Nyb2xsKHgsIHkpIHtcbiAgICAgIHRoaXMuc2Nyb2xsLnNldFNjcm9sbCh4LCB5KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwib25cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gb24oZXZlbnQsIGZ1bmMpIHtcbiAgICAgIHRoaXMuc2Nyb2xsLnNldEV2ZW50cyhldmVudCwgZnVuYyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIm9mZlwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvZmYoZXZlbnQsIGZ1bmMpIHtcbiAgICAgIHRoaXMuc2Nyb2xsLnVuc2V0RXZlbnRzKGV2ZW50LCBmdW5jKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZGVzdHJveVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgdGhpcy5zY3JvbGwuZGVzdHJveSgpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBOYXRpdmU7XG59KCk7XG5cbmV4cG9ydCBkZWZhdWx0IFNtb290aDtcbmV4cG9ydCB7IE5hdGl2ZSwgU21vb3RoIH07XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiLyohXG4gKiBsaWdodGdhbGxlcnkgfCAyLjcuMiB8IFNlcHRlbWJlciAyMHRoIDIwMjNcbiAqIGh0dHA6Ly93d3cubGlnaHRnYWxsZXJ5anMuY29tL1xuICogQ29weXJpZ2h0IChjKSAyMDIwIFNhY2hpbiBOZXJhdmF0aDtcbiAqIEBsaWNlbnNlIEdQTHYzXG4gKi9cblxuLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxyXG5cclxuUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XHJcbnB1cnBvc2Ugd2l0aCBvciB3aXRob3V0IGZlZSBpcyBoZXJlYnkgZ3JhbnRlZC5cclxuXHJcblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEhcclxuUkVHQVJEIFRPIFRISVMgU09GVFdBUkUgSU5DTFVESU5HIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZXHJcbkFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIFNQRUNJQUwsIERJUkVDVCxcclxuSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NXHJcbkxPU1MgT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBORUdMSUdFTkNFIE9SXHJcbk9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1JcclxuUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuXHJcbnZhciBfX2Fzc2lnbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uIF9fYXNzaWduKHQpIHtcclxuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKSB0W3BdID0gc1twXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHQ7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbn07XHJcblxyXG5mdW5jdGlvbiBfX3NwcmVhZEFycmF5cygpIHtcclxuICAgIGZvciAodmFyIHMgPSAwLCBpID0gMCwgaWwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykgcyArPSBhcmd1bWVudHNbaV0ubGVuZ3RoO1xyXG4gICAgZm9yICh2YXIgciA9IEFycmF5KHMpLCBrID0gMCwgaSA9IDA7IGkgPCBpbDsgaSsrKVxyXG4gICAgICAgIGZvciAodmFyIGEgPSBhcmd1bWVudHNbaV0sIGogPSAwLCBqbCA9IGEubGVuZ3RoOyBqIDwgamw7IGorKywgaysrKVxyXG4gICAgICAgICAgICByW2tdID0gYVtqXTtcclxuICAgIHJldHVybiByO1xyXG59XG5cbi8qKlxyXG4gKiBMaXN0IG9mIGxpZ2h0R2FsbGVyeSBldmVudHNcclxuICogQWxsIGV2ZW50cyBzaG91bGQgYmUgZG9jdW1lbnRlZCBoZXJlXHJcbiAqIEJlbG93IGludGVyZmFjZXMgYXJlIHVzZWQgdG8gYnVpbGQgdGhlIHdlYnNpdGUgZG9jdW1lbnRhdGlvbnNcclxuICogKi9cclxudmFyIGxHRXZlbnRzID0ge1xyXG4gICAgYWZ0ZXJBcHBlbmRTbGlkZTogJ2xnQWZ0ZXJBcHBlbmRTbGlkZScsXHJcbiAgICBpbml0OiAnbGdJbml0JyxcclxuICAgIGhhc1ZpZGVvOiAnbGdIYXNWaWRlbycsXHJcbiAgICBjb250YWluZXJSZXNpemU6ICdsZ0NvbnRhaW5lclJlc2l6ZScsXHJcbiAgICB1cGRhdGVTbGlkZXM6ICdsZ1VwZGF0ZVNsaWRlcycsXHJcbiAgICBhZnRlckFwcGVuZFN1Ykh0bWw6ICdsZ0FmdGVyQXBwZW5kU3ViSHRtbCcsXHJcbiAgICBiZWZvcmVPcGVuOiAnbGdCZWZvcmVPcGVuJyxcclxuICAgIGFmdGVyT3BlbjogJ2xnQWZ0ZXJPcGVuJyxcclxuICAgIHNsaWRlSXRlbUxvYWQ6ICdsZ1NsaWRlSXRlbUxvYWQnLFxyXG4gICAgYmVmb3JlU2xpZGU6ICdsZ0JlZm9yZVNsaWRlJyxcclxuICAgIGFmdGVyU2xpZGU6ICdsZ0FmdGVyU2xpZGUnLFxyXG4gICAgcG9zdGVyQ2xpY2s6ICdsZ1Bvc3RlckNsaWNrJyxcclxuICAgIGRyYWdTdGFydDogJ2xnRHJhZ1N0YXJ0JyxcclxuICAgIGRyYWdNb3ZlOiAnbGdEcmFnTW92ZScsXHJcbiAgICBkcmFnRW5kOiAnbGdEcmFnRW5kJyxcclxuICAgIGJlZm9yZU5leHRTbGlkZTogJ2xnQmVmb3JlTmV4dFNsaWRlJyxcclxuICAgIGJlZm9yZVByZXZTbGlkZTogJ2xnQmVmb3JlUHJldlNsaWRlJyxcclxuICAgIGJlZm9yZUNsb3NlOiAnbGdCZWZvcmVDbG9zZScsXHJcbiAgICBhZnRlckNsb3NlOiAnbGdBZnRlckNsb3NlJyxcclxuICAgIHJvdGF0ZUxlZnQ6ICdsZ1JvdGF0ZUxlZnQnLFxyXG4gICAgcm90YXRlUmlnaHQ6ICdsZ1JvdGF0ZVJpZ2h0JyxcclxuICAgIGZsaXBIb3Jpem9udGFsOiAnbGdGbGlwSG9yaXpvbnRhbCcsXHJcbiAgICBmbGlwVmVydGljYWw6ICdsZ0ZsaXBWZXJ0aWNhbCcsXHJcbiAgICBhdXRvcGxheTogJ2xnQXV0b3BsYXknLFxyXG4gICAgYXV0b3BsYXlTdGFydDogJ2xnQXV0b3BsYXlTdGFydCcsXHJcbiAgICBhdXRvcGxheVN0b3A6ICdsZ0F1dG9wbGF5U3RvcCcsXHJcbn07XG5cbnZhciBsaWdodEdhbGxlcnlDb3JlU2V0dGluZ3MgPSB7XHJcbiAgICBtb2RlOiAnbGctc2xpZGUnLFxyXG4gICAgZWFzaW5nOiAnZWFzZScsXHJcbiAgICBzcGVlZDogNDAwLFxyXG4gICAgbGljZW5zZUtleTogJzAwMDAtMDAwMC0wMDAtMDAwMCcsXHJcbiAgICBoZWlnaHQ6ICcxMDAlJyxcclxuICAgIHdpZHRoOiAnMTAwJScsXHJcbiAgICBhZGRDbGFzczogJycsXHJcbiAgICBzdGFydENsYXNzOiAnbGctc3RhcnQtem9vbScsXHJcbiAgICBiYWNrZHJvcER1cmF0aW9uOiAzMDAsXHJcbiAgICBjb250YWluZXI6ICcnLFxyXG4gICAgc3RhcnRBbmltYXRpb25EdXJhdGlvbjogNDAwLFxyXG4gICAgem9vbUZyb21PcmlnaW46IHRydWUsXHJcbiAgICBoaWRlQmFyc0RlbGF5OiAwLFxyXG4gICAgc2hvd0JhcnNBZnRlcjogMTAwMDAsXHJcbiAgICBzbGlkZURlbGF5OiAwLFxyXG4gICAgc3VwcG9ydExlZ2FjeUJyb3dzZXI6IHRydWUsXHJcbiAgICBhbGxvd01lZGlhT3ZlcmxhcDogZmFsc2UsXHJcbiAgICB2aWRlb01heFNpemU6ICcxMjgwLTcyMCcsXHJcbiAgICBsb2FkWW91VHViZVBvc3RlcjogdHJ1ZSxcclxuICAgIGRlZmF1bHRDYXB0aW9uSGVpZ2h0OiAwLFxyXG4gICAgYXJpYUxhYmVsbGVkYnk6ICcnLFxyXG4gICAgYXJpYURlc2NyaWJlZGJ5OiAnJyxcclxuICAgIHJlc2V0U2Nyb2xsUG9zaXRpb246IHRydWUsXHJcbiAgICBoaWRlU2Nyb2xsYmFyOiBmYWxzZSxcclxuICAgIGNsb3NhYmxlOiB0cnVlLFxyXG4gICAgc3dpcGVUb0Nsb3NlOiB0cnVlLFxyXG4gICAgY2xvc2VPblRhcDogdHJ1ZSxcclxuICAgIHNob3dDbG9zZUljb246IHRydWUsXHJcbiAgICBzaG93TWF4aW1pemVJY29uOiBmYWxzZSxcclxuICAgIGxvb3A6IHRydWUsXHJcbiAgICBlc2NLZXk6IHRydWUsXHJcbiAgICBrZXlQcmVzczogdHJ1ZSxcclxuICAgIHRyYXBGb2N1czogdHJ1ZSxcclxuICAgIGNvbnRyb2xzOiB0cnVlLFxyXG4gICAgc2xpZGVFbmRBbmltYXRpb246IHRydWUsXHJcbiAgICBoaWRlQ29udHJvbE9uRW5kOiBmYWxzZSxcclxuICAgIG1vdXNld2hlZWw6IGZhbHNlLFxyXG4gICAgZ2V0Q2FwdGlvbkZyb21UaXRsZU9yQWx0OiB0cnVlLFxyXG4gICAgYXBwZW5kU3ViSHRtbFRvOiAnLmxnLXN1Yi1odG1sJyxcclxuICAgIHN1Ykh0bWxTZWxlY3RvclJlbGF0aXZlOiBmYWxzZSxcclxuICAgIHByZWxvYWQ6IDIsXHJcbiAgICBudW1iZXJPZlNsaWRlSXRlbXNJbkRvbTogMTAsXHJcbiAgICBzZWxlY3RvcjogJycsXHJcbiAgICBzZWxlY3RXaXRoaW46ICcnLFxyXG4gICAgbmV4dEh0bWw6ICcnLFxyXG4gICAgcHJldkh0bWw6ICcnLFxyXG4gICAgaW5kZXg6IDAsXHJcbiAgICBpZnJhbWVXaWR0aDogJzEwMCUnLFxyXG4gICAgaWZyYW1lSGVpZ2h0OiAnMTAwJScsXHJcbiAgICBpZnJhbWVNYXhXaWR0aDogJzEwMCUnLFxyXG4gICAgaWZyYW1lTWF4SGVpZ2h0OiAnMTAwJScsXHJcbiAgICBkb3dubG9hZDogdHJ1ZSxcclxuICAgIGNvdW50ZXI6IHRydWUsXHJcbiAgICBhcHBlbmRDb3VudGVyVG86ICcubGctdG9vbGJhcicsXHJcbiAgICBzd2lwZVRocmVzaG9sZDogNTAsXHJcbiAgICBlbmFibGVTd2lwZTogdHJ1ZSxcclxuICAgIGVuYWJsZURyYWc6IHRydWUsXHJcbiAgICBkeW5hbWljOiBmYWxzZSxcclxuICAgIGR5bmFtaWNFbDogW10sXHJcbiAgICBleHRyYVByb3BzOiBbXSxcclxuICAgIGV4VGh1bWJJbWFnZTogJycsXHJcbiAgICBpc01vYmlsZTogdW5kZWZpbmVkLFxyXG4gICAgbW9iaWxlU2V0dGluZ3M6IHtcclxuICAgICAgICBjb250cm9sczogZmFsc2UsXHJcbiAgICAgICAgc2hvd0Nsb3NlSWNvbjogZmFsc2UsXHJcbiAgICAgICAgZG93bmxvYWQ6IGZhbHNlLFxyXG4gICAgfSxcclxuICAgIHBsdWdpbnM6IFtdLFxyXG4gICAgc3RyaW5nczoge1xyXG4gICAgICAgIGNsb3NlR2FsbGVyeTogJ0Nsb3NlIGdhbGxlcnknLFxyXG4gICAgICAgIHRvZ2dsZU1heGltaXplOiAnVG9nZ2xlIG1heGltaXplJyxcclxuICAgICAgICBwcmV2aW91c1NsaWRlOiAnUHJldmlvdXMgc2xpZGUnLFxyXG4gICAgICAgIG5leHRTbGlkZTogJ05leHQgc2xpZGUnLFxyXG4gICAgICAgIGRvd25sb2FkOiAnRG93bmxvYWQnLFxyXG4gICAgICAgIHBsYXlWaWRlbzogJ1BsYXkgdmlkZW8nLFxyXG4gICAgICAgIG1lZGlhTG9hZGluZ0ZhaWxlZDogJ09vcHMuLi4gRmFpbGVkIHRvIGxvYWQgY29udGVudC4uLicsXHJcbiAgICB9LFxyXG59O1xuXG5mdW5jdGlvbiBpbml0TGdQb2x5ZmlsbHMoKSB7XHJcbiAgICAoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0eXBlb2Ygd2luZG93LkN1c3RvbUV2ZW50ID09PSAnZnVuY3Rpb24nKVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgZnVuY3Rpb24gQ3VzdG9tRXZlbnQoZXZlbnQsIHBhcmFtcykge1xyXG4gICAgICAgICAgICBwYXJhbXMgPSBwYXJhbXMgfHwge1xyXG4gICAgICAgICAgICAgICAgYnViYmxlczogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBjYW5jZWxhYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGRldGFpbDogbnVsbCxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgdmFyIGV2dCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdDdXN0b21FdmVudCcpO1xyXG4gICAgICAgICAgICBldnQuaW5pdEN1c3RvbUV2ZW50KGV2ZW50LCBwYXJhbXMuYnViYmxlcywgcGFyYW1zLmNhbmNlbGFibGUsIHBhcmFtcy5kZXRhaWwpO1xyXG4gICAgICAgICAgICByZXR1cm4gZXZ0O1xyXG4gICAgICAgIH1cclxuICAgICAgICB3aW5kb3cuQ3VzdG9tRXZlbnQgPSBDdXN0b21FdmVudDtcclxuICAgIH0pKCk7XHJcbiAgICAoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICghRWxlbWVudC5wcm90b3R5cGUubWF0Y2hlcykge1xyXG4gICAgICAgICAgICBFbGVtZW50LnByb3RvdHlwZS5tYXRjaGVzID1cclxuICAgICAgICAgICAgICAgIEVsZW1lbnQucHJvdG90eXBlLm1zTWF0Y2hlc1NlbGVjdG9yIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgRWxlbWVudC5wcm90b3R5cGUud2Via2l0TWF0Y2hlc1NlbGVjdG9yO1xyXG4gICAgICAgIH1cclxuICAgIH0pKCk7XHJcbn1cclxudmFyIGxnUXVlcnkgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBsZ1F1ZXJ5KHNlbGVjdG9yKSB7XHJcbiAgICAgICAgdGhpcy5jc3NWZW5kZXJQcmVmaXhlcyA9IFtcclxuICAgICAgICAgICAgJ1RyYW5zaXRpb25EdXJhdGlvbicsXHJcbiAgICAgICAgICAgICdUcmFuc2l0aW9uVGltaW5nRnVuY3Rpb24nLFxyXG4gICAgICAgICAgICAnVHJhbnNmb3JtJyxcclxuICAgICAgICAgICAgJ1RyYW5zaXRpb24nLFxyXG4gICAgICAgIF07XHJcbiAgICAgICAgdGhpcy5zZWxlY3RvciA9IHRoaXMuX2dldFNlbGVjdG9yKHNlbGVjdG9yKTtcclxuICAgICAgICB0aGlzLmZpcnN0RWxlbWVudCA9IHRoaXMuX2dldEZpcnN0RWwoKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIGxnUXVlcnkuZ2VuZXJhdGVVVUlEID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiAneHh4eHh4eHgteHh4eC00eHh4LXl4eHgteHh4eHh4eHh4eHh4Jy5yZXBsYWNlKC9beHldL2csIGZ1bmN0aW9uIChjKSB7XHJcbiAgICAgICAgICAgIHZhciByID0gKE1hdGgucmFuZG9tKCkgKiAxNikgfCAwLCB2ID0gYyA9PSAneCcgPyByIDogKHIgJiAweDMpIHwgMHg4O1xyXG4gICAgICAgICAgICByZXR1cm4gdi50b1N0cmluZygxNik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgbGdRdWVyeS5wcm90b3R5cGUuX2dldFNlbGVjdG9yID0gZnVuY3Rpb24gKHNlbGVjdG9yLCBjb250ZXh0KSB7XHJcbiAgICAgICAgaWYgKGNvbnRleHQgPT09IHZvaWQgMCkgeyBjb250ZXh0ID0gZG9jdW1lbnQ7IH1cclxuICAgICAgICBpZiAodHlwZW9mIHNlbGVjdG9yICE9PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICByZXR1cm4gc2VsZWN0b3I7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50O1xyXG4gICAgICAgIHZhciBmbCA9IHNlbGVjdG9yLnN1YnN0cmluZygwLCAxKTtcclxuICAgICAgICBpZiAoZmwgPT09ICcjJykge1xyXG4gICAgICAgICAgICByZXR1cm4gY29udGV4dC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBsZ1F1ZXJ5LnByb3RvdHlwZS5fZWFjaCA9IGZ1bmN0aW9uIChmdW5jKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnNlbGVjdG9yKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5zZWxlY3Rvci5sZW5ndGggIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBbXS5mb3JFYWNoLmNhbGwodGhpcy5zZWxlY3RvciwgZnVuYyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBmdW5jKHRoaXMuc2VsZWN0b3IsIDApO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICBsZ1F1ZXJ5LnByb3RvdHlwZS5fc2V0Q3NzVmVuZG9yUHJlZml4ID0gZnVuY3Rpb24gKGVsLCBjc3NQcm9wZXJ0eSwgdmFsdWUpIHtcclxuICAgICAgICAvLyBwcmV0dGllci1pZ25vcmVcclxuICAgICAgICB2YXIgcHJvcGVydHkgPSBjc3NQcm9wZXJ0eS5yZXBsYWNlKC8tKFthLXpdKS9naSwgZnVuY3Rpb24gKHMsIGdyb3VwMSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZ3JvdXAxLnRvVXBwZXJDYXNlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKHRoaXMuY3NzVmVuZGVyUHJlZml4ZXMuaW5kZXhPZihwcm9wZXJ0eSkgIT09IC0xKSB7XHJcbiAgICAgICAgICAgIGVsLnN0eWxlW3Byb3BlcnR5LmNoYXJBdCgwKS50b0xvd2VyQ2FzZSgpICsgcHJvcGVydHkuc2xpY2UoMSldID0gdmFsdWU7XHJcbiAgICAgICAgICAgIGVsLnN0eWxlWyd3ZWJraXQnICsgcHJvcGVydHldID0gdmFsdWU7XHJcbiAgICAgICAgICAgIGVsLnN0eWxlWydtb3onICsgcHJvcGVydHldID0gdmFsdWU7XHJcbiAgICAgICAgICAgIGVsLnN0eWxlWydtcycgKyBwcm9wZXJ0eV0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgZWwuc3R5bGVbJ28nICsgcHJvcGVydHldID0gdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBlbC5zdHlsZVtwcm9wZXJ0eV0gPSB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgbGdRdWVyeS5wcm90b3R5cGUuX2dldEZpcnN0RWwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc2VsZWN0b3IgJiYgdGhpcy5zZWxlY3Rvci5sZW5ndGggIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZWxlY3RvclswXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNlbGVjdG9yO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBsZ1F1ZXJ5LnByb3RvdHlwZS5pc0V2ZW50TWF0Y2hlZCA9IGZ1bmN0aW9uIChldmVudCwgZXZlbnROYW1lKSB7XHJcbiAgICAgICAgdmFyIGV2ZW50TmFtZXNwYWNlID0gZXZlbnROYW1lLnNwbGl0KCcuJyk7XHJcbiAgICAgICAgcmV0dXJuIGV2ZW50XHJcbiAgICAgICAgICAgIC5zcGxpdCgnLicpXHJcbiAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGU7IH0pXHJcbiAgICAgICAgICAgIC5ldmVyeShmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXZlbnROYW1lc3BhY2UuaW5kZXhPZihlKSAhPT0gLTE7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgbGdRdWVyeS5wcm90b3R5cGUuYXR0ciA9IGZ1bmN0aW9uIChhdHRyLCB2YWx1ZSkge1xyXG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5maXJzdEVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5maXJzdEVsZW1lbnQuZ2V0QXR0cmlidXRlKGF0dHIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9lYWNoKGZ1bmN0aW9uIChlbCkge1xyXG4gICAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoYXR0ciwgdmFsdWUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIGxnUXVlcnkucHJvdG90eXBlLmZpbmQgPSBmdW5jdGlvbiAoc2VsZWN0b3IpIHtcclxuICAgICAgICByZXR1cm4gJExHKHRoaXMuX2dldFNlbGVjdG9yKHNlbGVjdG9yLCB0aGlzLnNlbGVjdG9yKSk7XHJcbiAgICB9O1xyXG4gICAgbGdRdWVyeS5wcm90b3R5cGUuZmlyc3QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc2VsZWN0b3IgJiYgdGhpcy5zZWxlY3Rvci5sZW5ndGggIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gJExHKHRoaXMuc2VsZWN0b3JbMF0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuICRMRyh0aGlzLnNlbGVjdG9yKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgbGdRdWVyeS5wcm90b3R5cGUuZXEgPSBmdW5jdGlvbiAoaW5kZXgpIHtcclxuICAgICAgICByZXR1cm4gJExHKHRoaXMuc2VsZWN0b3JbaW5kZXhdKTtcclxuICAgIH07XHJcbiAgICBsZ1F1ZXJ5LnByb3RvdHlwZS5wYXJlbnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuICRMRyh0aGlzLnNlbGVjdG9yLnBhcmVudEVsZW1lbnQpO1xyXG4gICAgfTtcclxuICAgIGxnUXVlcnkucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0Rmlyc3RFbCgpO1xyXG4gICAgfTtcclxuICAgIGxnUXVlcnkucHJvdG90eXBlLnJlbW92ZUF0dHIgPSBmdW5jdGlvbiAoYXR0cmlidXRlcykge1xyXG4gICAgICAgIHZhciBhdHRycyA9IGF0dHJpYnV0ZXMuc3BsaXQoJyAnKTtcclxuICAgICAgICB0aGlzLl9lYWNoKGZ1bmN0aW9uIChlbCkge1xyXG4gICAgICAgICAgICBhdHRycy5mb3JFYWNoKGZ1bmN0aW9uIChhdHRyKSB7IHJldHVybiBlbC5yZW1vdmVBdHRyaWJ1dGUoYXR0cik7IH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIGxnUXVlcnkucHJvdG90eXBlLndyYXAgPSBmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmZpcnN0RWxlbWVudCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHdyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICB3cmFwcGVyLmNsYXNzTmFtZSA9IGNsYXNzTmFtZTtcclxuICAgICAgICB0aGlzLmZpcnN0RWxlbWVudC5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh3cmFwcGVyLCB0aGlzLmZpcnN0RWxlbWVudCk7XHJcbiAgICAgICAgdGhpcy5maXJzdEVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmZpcnN0RWxlbWVudCk7XHJcbiAgICAgICAgd3JhcHBlci5hcHBlbmRDaGlsZCh0aGlzLmZpcnN0RWxlbWVudCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgbGdRdWVyeS5wcm90b3R5cGUuYWRkQ2xhc3MgPSBmdW5jdGlvbiAoY2xhc3NOYW1lcykge1xyXG4gICAgICAgIGlmIChjbGFzc05hbWVzID09PSB2b2lkIDApIHsgY2xhc3NOYW1lcyA9ICcnOyB9XHJcbiAgICAgICAgdGhpcy5fZWFjaChmdW5jdGlvbiAoZWwpIHtcclxuICAgICAgICAgICAgLy8gSUUgZG9lc24ndCBzdXBwb3J0IG11bHRpcGxlIGFyZ3VtZW50c1xyXG4gICAgICAgICAgICBjbGFzc05hbWVzLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2xhc3NOYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZWwuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICBsZ1F1ZXJ5LnByb3RvdHlwZS5yZW1vdmVDbGFzcyA9IGZ1bmN0aW9uIChjbGFzc05hbWVzKSB7XHJcbiAgICAgICAgdGhpcy5fZWFjaChmdW5jdGlvbiAoZWwpIHtcclxuICAgICAgICAgICAgLy8gSUUgZG9lc24ndCBzdXBwb3J0IG11bHRpcGxlIGFyZ3VtZW50c1xyXG4gICAgICAgICAgICBjbGFzc05hbWVzLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2xhc3NOYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICBsZ1F1ZXJ5LnByb3RvdHlwZS5oYXNDbGFzcyA9IGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcclxuICAgICAgICBpZiAoIXRoaXMuZmlyc3RFbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZmlyc3RFbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpO1xyXG4gICAgfTtcclxuICAgIGxnUXVlcnkucHJvdG90eXBlLmhhc0F0dHJpYnV0ZSA9IGZ1bmN0aW9uIChhdHRyaWJ1dGUpIHtcclxuICAgICAgICBpZiAoIXRoaXMuZmlyc3RFbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZmlyc3RFbGVtZW50Lmhhc0F0dHJpYnV0ZShhdHRyaWJ1dGUpO1xyXG4gICAgfTtcclxuICAgIGxnUXVlcnkucHJvdG90eXBlLnRvZ2dsZUNsYXNzID0gZnVuY3Rpb24gKGNsYXNzTmFtZSkge1xyXG4gICAgICAgIGlmICghdGhpcy5maXJzdEVsZW1lbnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmhhc0NsYXNzKGNsYXNzTmFtZSkpIHtcclxuICAgICAgICAgICAgdGhpcy5yZW1vdmVDbGFzcyhjbGFzc05hbWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5hZGRDbGFzcyhjbGFzc05hbWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICBsZ1F1ZXJ5LnByb3RvdHlwZS5jc3MgPSBmdW5jdGlvbiAocHJvcGVydHksIHZhbHVlKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLl9lYWNoKGZ1bmN0aW9uIChlbCkge1xyXG4gICAgICAgICAgICBfdGhpcy5fc2V0Q3NzVmVuZG9yUHJlZml4KGVsLCBwcm9wZXJ0eSwgdmFsdWUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIC8vIE5lZWQgdG8gcGFzcyBzZXBhcmF0ZSBuYW1lc3BhY2VzIGZvciBzZXBhcmF0ZSBlbGVtZW50c1xyXG4gICAgbGdRdWVyeS5wcm90b3R5cGUub24gPSBmdW5jdGlvbiAoZXZlbnRzLCBsaXN0ZW5lcikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgaWYgKCF0aGlzLnNlbGVjdG9yKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBldmVudHMuc3BsaXQoJyAnKS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkobGdRdWVyeS5ldmVudExpc3RlbmVyc1tldmVudF0pKSB7XHJcbiAgICAgICAgICAgICAgICBsZ1F1ZXJ5LmV2ZW50TGlzdGVuZXJzW2V2ZW50XSA9IFtdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxnUXVlcnkuZXZlbnRMaXN0ZW5lcnNbZXZlbnRdLnB1c2gobGlzdGVuZXIpO1xyXG4gICAgICAgICAgICBfdGhpcy5zZWxlY3Rvci5hZGRFdmVudExpc3RlbmVyKGV2ZW50LnNwbGl0KCcuJylbMF0sIGxpc3RlbmVyKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICAvLyBAdG9kbyAtIHRlc3QgdGhpc1xyXG4gICAgbGdRdWVyeS5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uIChldmVudCwgbGlzdGVuZXIpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMub24oZXZlbnQsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgX3RoaXMub2ZmKGV2ZW50KTtcclxuICAgICAgICAgICAgbGlzdGVuZXIoZXZlbnQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIGxnUXVlcnkucHJvdG90eXBlLm9mZiA9IGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgaWYgKCF0aGlzLnNlbGVjdG9yKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBPYmplY3Qua2V5cyhsZ1F1ZXJ5LmV2ZW50TGlzdGVuZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudE5hbWUpIHtcclxuICAgICAgICAgICAgaWYgKF90aGlzLmlzRXZlbnRNYXRjaGVkKGV2ZW50LCBldmVudE5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICBsZ1F1ZXJ5LmV2ZW50TGlzdGVuZXJzW2V2ZW50TmFtZV0uZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5zZWxlY3Rvci5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZS5zcGxpdCgnLicpWzBdLCBsaXN0ZW5lcik7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGxnUXVlcnkuZXZlbnRMaXN0ZW5lcnNbZXZlbnROYW1lXSA9IFtdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgbGdRdWVyeS5wcm90b3R5cGUudHJpZ2dlciA9IGZ1bmN0aW9uIChldmVudCwgZGV0YWlsKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmZpcnN0RWxlbWVudCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGN1c3RvbUV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KGV2ZW50LnNwbGl0KCcuJylbMF0sIHtcclxuICAgICAgICAgICAgZGV0YWlsOiBkZXRhaWwgfHwgbnVsbCxcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmZpcnN0RWxlbWVudC5kaXNwYXRjaEV2ZW50KGN1c3RvbUV2ZW50KTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICAvLyBEb2VzIG5vdCBzdXBwb3J0IElFXHJcbiAgICBsZ1F1ZXJ5LnByb3RvdHlwZS5sb2FkID0gZnVuY3Rpb24gKHVybCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgZmV0Y2godXJsKVxyXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzKSB7IHJldHVybiByZXMudGV4dCgpOyB9KVxyXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoaHRtbCkge1xyXG4gICAgICAgICAgICBfdGhpcy5zZWxlY3Rvci5pbm5lckhUTUwgPSBodG1sO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIGxnUXVlcnkucHJvdG90eXBlLmh0bWwgPSBmdW5jdGlvbiAoaHRtbCkge1xyXG4gICAgICAgIGlmIChodG1sID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmZpcnN0RWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZpcnN0RWxlbWVudC5pbm5lckhUTUw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX2VhY2goZnVuY3Rpb24gKGVsKSB7XHJcbiAgICAgICAgICAgIGVsLmlubmVySFRNTCA9IGh0bWw7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgbGdRdWVyeS5wcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24gKGh0bWwpIHtcclxuICAgICAgICB0aGlzLl9lYWNoKGZ1bmN0aW9uIChlbCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGh0bWwgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICBlbC5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsIGh0bWwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZWwuYXBwZW5kQ2hpbGQoaHRtbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICBsZ1F1ZXJ5LnByb3RvdHlwZS5wcmVwZW5kID0gZnVuY3Rpb24gKGh0bWwpIHtcclxuICAgICAgICB0aGlzLl9lYWNoKGZ1bmN0aW9uIChlbCkge1xyXG4gICAgICAgICAgICBlbC5pbnNlcnRBZGphY2VudEhUTUwoJ2FmdGVyYmVnaW4nLCBodG1sKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICBsZ1F1ZXJ5LnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5fZWFjaChmdW5jdGlvbiAoZWwpIHtcclxuICAgICAgICAgICAgZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgbGdRdWVyeS5wcm90b3R5cGUuZW1wdHkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5fZWFjaChmdW5jdGlvbiAoZWwpIHtcclxuICAgICAgICAgICAgZWwuaW5uZXJIVE1MID0gJyc7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgbGdRdWVyeS5wcm90b3R5cGUuc2Nyb2xsVG9wID0gZnVuY3Rpb24gKHNjcm9sbFRvcCkge1xyXG4gICAgICAgIGlmIChzY3JvbGxUb3AgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCA9IHNjcm9sbFRvcDtcclxuICAgICAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCA9IHNjcm9sbFRvcDtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gKHdpbmRvdy5wYWdlWU9mZnNldCB8fFxyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCB8fFxyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5zY3JvbGxUb3AgfHxcclxuICAgICAgICAgICAgICAgIDApO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBsZ1F1ZXJ5LnByb3RvdHlwZS5zY3JvbGxMZWZ0ID0gZnVuY3Rpb24gKHNjcm9sbExlZnQpIHtcclxuICAgICAgICBpZiAoc2Nyb2xsTGVmdCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc2Nyb2xsTGVmdCA9IHNjcm9sbExlZnQ7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0ID0gc2Nyb2xsTGVmdDtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gKHdpbmRvdy5wYWdlWE9mZnNldCB8fFxyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnQgfHxcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc2Nyb2xsTGVmdCB8fFxyXG4gICAgICAgICAgICAgICAgMCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGxnUXVlcnkucHJvdG90eXBlLm9mZnNldCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuZmlyc3RFbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBsZWZ0OiAwLFxyXG4gICAgICAgICAgICAgICAgdG9wOiAwLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgcmVjdCA9IHRoaXMuZmlyc3RFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgIHZhciBib2R5TWFyZ2luTGVmdCA9ICRMRygnYm9keScpLnN0eWxlKCkubWFyZ2luTGVmdDtcclxuICAgICAgICAvLyBNaW51cyBib2R5IG1hcmdpbiAtIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzMwNzExNTQ4L2lzLWdldGJvdW5kaW5nY2xpZW50cmVjdC1sZWZ0LXJldHVybmluZy1hLXdyb25nLXZhbHVlXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgbGVmdDogcmVjdC5sZWZ0IC0gcGFyc2VGbG9hdChib2R5TWFyZ2luTGVmdCkgKyB0aGlzLnNjcm9sbExlZnQoKSxcclxuICAgICAgICAgICAgdG9wOiByZWN0LnRvcCArIHRoaXMuc2Nyb2xsVG9wKCksXHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcbiAgICBsZ1F1ZXJ5LnByb3RvdHlwZS5zdHlsZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuZmlyc3RFbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7fTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLmZpcnN0RWxlbWVudC5jdXJyZW50U3R5bGUgfHxcclxuICAgICAgICAgICAgd2luZG93LmdldENvbXB1dGVkU3R5bGUodGhpcy5maXJzdEVsZW1lbnQpKTtcclxuICAgIH07XHJcbiAgICAvLyBXaWR0aCB3aXRob3V0IHBhZGRpbmcgYW5kIGJvcmRlciBldmVuIGlmIGJveC1zaXppbmcgaXMgdXNlZC5cclxuICAgIGxnUXVlcnkucHJvdG90eXBlLndpZHRoID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBzdHlsZSA9IHRoaXMuc3R5bGUoKTtcclxuICAgICAgICByZXR1cm4gKHRoaXMuZmlyc3RFbGVtZW50LmNsaWVudFdpZHRoIC1cclxuICAgICAgICAgICAgcGFyc2VGbG9hdChzdHlsZS5wYWRkaW5nTGVmdCkgLVxyXG4gICAgICAgICAgICBwYXJzZUZsb2F0KHN0eWxlLnBhZGRpbmdSaWdodCkpO1xyXG4gICAgfTtcclxuICAgIC8vIEhlaWdodCB3aXRob3V0IHBhZGRpbmcgYW5kIGJvcmRlciBldmVuIGlmIGJveC1zaXppbmcgaXMgdXNlZC5cclxuICAgIGxnUXVlcnkucHJvdG90eXBlLmhlaWdodCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgc3R5bGUgPSB0aGlzLnN0eWxlKCk7XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLmZpcnN0RWxlbWVudC5jbGllbnRIZWlnaHQgLVxyXG4gICAgICAgICAgICBwYXJzZUZsb2F0KHN0eWxlLnBhZGRpbmdUb3ApIC1cclxuICAgICAgICAgICAgcGFyc2VGbG9hdChzdHlsZS5wYWRkaW5nQm90dG9tKSk7XHJcbiAgICB9O1xyXG4gICAgbGdRdWVyeS5ldmVudExpc3RlbmVycyA9IHt9O1xyXG4gICAgcmV0dXJuIGxnUXVlcnk7XHJcbn0oKSk7XHJcbmZ1bmN0aW9uICRMRyhzZWxlY3Rvcikge1xyXG4gICAgaW5pdExnUG9seWZpbGxzKCk7XHJcbiAgICByZXR1cm4gbmV3IGxnUXVlcnkoc2VsZWN0b3IpO1xyXG59XG5cbnZhciBkZWZhdWx0RHluYW1pY09wdGlvbnMgPSBbXHJcbiAgICAnc3JjJyxcclxuICAgICdzb3VyY2VzJyxcclxuICAgICdzdWJIdG1sJyxcclxuICAgICdzdWJIdG1sVXJsJyxcclxuICAgICdodG1sJyxcclxuICAgICd2aWRlbycsXHJcbiAgICAncG9zdGVyJyxcclxuICAgICdzbGlkZU5hbWUnLFxyXG4gICAgJ3Jlc3BvbnNpdmUnLFxyXG4gICAgJ3NyY3NldCcsXHJcbiAgICAnc2l6ZXMnLFxyXG4gICAgJ2lmcmFtZScsXHJcbiAgICAnZG93bmxvYWRVcmwnLFxyXG4gICAgJ2Rvd25sb2FkJyxcclxuICAgICd3aWR0aCcsXHJcbiAgICAnZmFjZWJvb2tTaGFyZVVybCcsXHJcbiAgICAndHdlZXRUZXh0JyxcclxuICAgICdpZnJhbWVUaXRsZScsXHJcbiAgICAndHdpdHRlclNoYXJlVXJsJyxcclxuICAgICdwaW50ZXJlc3RTaGFyZVVybCcsXHJcbiAgICAncGludGVyZXN0VGV4dCcsXHJcbiAgICAnZmJIdG1sJyxcclxuICAgICdkaXNxdXNJZGVudGlmaWVyJyxcclxuICAgICdkaXNxdXNVcmwnLFxyXG5dO1xyXG4vLyBDb252ZXJ0IGh0bWwgZGF0YS1hdHRyaWJ1dGUgdG8gY2FtYWxjYXNlXHJcbmZ1bmN0aW9uIGNvbnZlcnRUb0RhdGEoYXR0cikge1xyXG4gICAgLy8gRkluZCBhIHdheSBmb3IgbGdzaXplXHJcbiAgICBpZiAoYXR0ciA9PT0gJ2hyZWYnKSB7XHJcbiAgICAgICAgcmV0dXJuICdzcmMnO1xyXG4gICAgfVxyXG4gICAgYXR0ciA9IGF0dHIucmVwbGFjZSgnZGF0YS0nLCAnJyk7XHJcbiAgICBhdHRyID0gYXR0ci5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKSArIGF0dHIuc2xpY2UoMSk7XHJcbiAgICBhdHRyID0gYXR0ci5yZXBsYWNlKC8tKFthLXpdKS9nLCBmdW5jdGlvbiAoZykgeyByZXR1cm4gZ1sxXS50b1VwcGVyQ2FzZSgpOyB9KTtcclxuICAgIHJldHVybiBhdHRyO1xyXG59XHJcbnZhciB1dGlscyA9IHtcclxuICAgIC8qKlxyXG4gICAgICogZ2V0IHBvc3NpYmxlIHdpZHRoIGFuZCBoZWlnaHQgZnJvbSB0aGUgbGdTaXplIGF0dHJpYnV0ZS4gVXNlZCBmb3IgWm9vbUZyb21PcmlnaW4gb3B0aW9uXHJcbiAgICAgKi9cclxuICAgIGdldFNpemU6IGZ1bmN0aW9uIChlbCwgY29udGFpbmVyLCBzcGFjaW5nLCBkZWZhdWx0TGdTaXplKSB7XHJcbiAgICAgICAgaWYgKHNwYWNpbmcgPT09IHZvaWQgMCkgeyBzcGFjaW5nID0gMDsgfVxyXG4gICAgICAgIHZhciBMR2VsID0gJExHKGVsKTtcclxuICAgICAgICB2YXIgbGdTaXplID0gTEdlbC5hdHRyKCdkYXRhLWxnLXNpemUnKSB8fCBkZWZhdWx0TGdTaXplO1xyXG4gICAgICAgIGlmICghbGdTaXplKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGlzUmVzcG9uc2l2ZVNpemVzID0gbGdTaXplLnNwbGl0KCcsJyk7XHJcbiAgICAgICAgLy8gaWYgYXQtbGVhc3QgdHdvIHZpZXdwb3J0IHNpemVzIGFyZSBhdmFpbGFibGVcclxuICAgICAgICBpZiAoaXNSZXNwb25zaXZlU2l6ZXNbMV0pIHtcclxuICAgICAgICAgICAgdmFyIHdXaWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGlzUmVzcG9uc2l2ZVNpemVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgc2l6ZV8xID0gaXNSZXNwb25zaXZlU2l6ZXNbaV07XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVzcG9uc2l2ZVdpZHRoID0gcGFyc2VJbnQoc2l6ZV8xLnNwbGl0KCctJylbMl0sIDEwKTtcclxuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zaXZlV2lkdGggPiB3V2lkdGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZ1NpemUgPSBzaXplXzE7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyB0YWtlIGxhc3QgaXRlbSBhcyBsYXN0IG9wdGlvblxyXG4gICAgICAgICAgICAgICAgaWYgKGkgPT09IGlzUmVzcG9uc2l2ZVNpemVzLmxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZ1NpemUgPSBzaXplXzE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHNpemUgPSBsZ1NpemUuc3BsaXQoJy0nKTtcclxuICAgICAgICB2YXIgd2lkdGggPSBwYXJzZUludChzaXplWzBdLCAxMCk7XHJcbiAgICAgICAgdmFyIGhlaWdodCA9IHBhcnNlSW50KHNpemVbMV0sIDEwKTtcclxuICAgICAgICB2YXIgY1dpZHRoID0gY29udGFpbmVyLndpZHRoKCk7XHJcbiAgICAgICAgdmFyIGNIZWlnaHQgPSBjb250YWluZXIuaGVpZ2h0KCkgLSBzcGFjaW5nO1xyXG4gICAgICAgIHZhciBtYXhXaWR0aCA9IE1hdGgubWluKGNXaWR0aCwgd2lkdGgpO1xyXG4gICAgICAgIHZhciBtYXhIZWlnaHQgPSBNYXRoLm1pbihjSGVpZ2h0LCBoZWlnaHQpO1xyXG4gICAgICAgIHZhciByYXRpbyA9IE1hdGgubWluKG1heFdpZHRoIC8gd2lkdGgsIG1heEhlaWdodCAvIGhlaWdodCk7XHJcbiAgICAgICAgcmV0dXJuIHsgd2lkdGg6IHdpZHRoICogcmF0aW8sIGhlaWdodDogaGVpZ2h0ICogcmF0aW8gfTtcclxuICAgIH0sXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjIEdldCB0cmFuc2Zvcm0gdmFsdWUgYmFzZWQgb24gdGhlIGltYWdlU2l6ZS4gVXNlZCBmb3IgWm9vbUZyb21PcmlnaW4gb3B0aW9uXHJcbiAgICAgKiBAcGFyYW0ge2pRdWVyeSBFbGVtZW50fVxyXG4gICAgICogQHJldHVybnMge1N0cmluZ30gVHJhbnNmb3JtIENTUyBzdHJpbmdcclxuICAgICAqL1xyXG4gICAgZ2V0VHJhbnNmb3JtOiBmdW5jdGlvbiAoZWwsIGNvbnRhaW5lciwgdG9wLCBib3R0b20sIGltYWdlU2l6ZSkge1xyXG4gICAgICAgIGlmICghaW1hZ2VTaXplKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIExHZWwgPSAkTEcoZWwpLmZpbmQoJ2ltZycpLmZpcnN0KCk7XHJcbiAgICAgICAgaWYgKCFMR2VsLmdldCgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGNvbnRhaW5lclJlY3QgPSBjb250YWluZXIuZ2V0KCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgdmFyIHdXaWR0aCA9IGNvbnRhaW5lclJlY3Qud2lkdGg7XHJcbiAgICAgICAgLy8gdXNpbmcgaW5uZXJXaWR0aCB0byBpbmNsdWRlIG1vYmlsZSBzYWZhcmkgYm90dG9tIGJhclxyXG4gICAgICAgIHZhciB3SGVpZ2h0ID0gY29udGFpbmVyLmhlaWdodCgpIC0gKHRvcCArIGJvdHRvbSk7XHJcbiAgICAgICAgdmFyIGVsV2lkdGggPSBMR2VsLndpZHRoKCk7XHJcbiAgICAgICAgdmFyIGVsSGVpZ2h0ID0gTEdlbC5oZWlnaHQoKTtcclxuICAgICAgICB2YXIgZWxTdHlsZSA9IExHZWwuc3R5bGUoKTtcclxuICAgICAgICB2YXIgeCA9ICh3V2lkdGggLSBlbFdpZHRoKSAvIDIgLVxyXG4gICAgICAgICAgICBMR2VsLm9mZnNldCgpLmxlZnQgK1xyXG4gICAgICAgICAgICAocGFyc2VGbG9hdChlbFN0eWxlLnBhZGRpbmdMZWZ0KSB8fCAwKSArXHJcbiAgICAgICAgICAgIChwYXJzZUZsb2F0KGVsU3R5bGUuYm9yZGVyTGVmdCkgfHwgMCkgK1xyXG4gICAgICAgICAgICAkTEcod2luZG93KS5zY3JvbGxMZWZ0KCkgK1xyXG4gICAgICAgICAgICBjb250YWluZXJSZWN0LmxlZnQ7XHJcbiAgICAgICAgdmFyIHkgPSAod0hlaWdodCAtIGVsSGVpZ2h0KSAvIDIgLVxyXG4gICAgICAgICAgICBMR2VsLm9mZnNldCgpLnRvcCArXHJcbiAgICAgICAgICAgIChwYXJzZUZsb2F0KGVsU3R5bGUucGFkZGluZ1RvcCkgfHwgMCkgK1xyXG4gICAgICAgICAgICAocGFyc2VGbG9hdChlbFN0eWxlLmJvcmRlclRvcCkgfHwgMCkgK1xyXG4gICAgICAgICAgICAkTEcod2luZG93KS5zY3JvbGxUb3AoKSArXHJcbiAgICAgICAgICAgIHRvcDtcclxuICAgICAgICB2YXIgc2NYID0gZWxXaWR0aCAvIGltYWdlU2l6ZS53aWR0aDtcclxuICAgICAgICB2YXIgc2NZID0gZWxIZWlnaHQgLyBpbWFnZVNpemUuaGVpZ2h0O1xyXG4gICAgICAgIHZhciB0cmFuc2Zvcm0gPSAndHJhbnNsYXRlM2QoJyArXHJcbiAgICAgICAgICAgICh4ICo9IC0xKSArXHJcbiAgICAgICAgICAgICdweCwgJyArXHJcbiAgICAgICAgICAgICh5ICo9IC0xKSArXHJcbiAgICAgICAgICAgICdweCwgMCkgc2NhbGUzZCgnICtcclxuICAgICAgICAgICAgc2NYICtcclxuICAgICAgICAgICAgJywgJyArXHJcbiAgICAgICAgICAgIHNjWSArXHJcbiAgICAgICAgICAgICcsIDEpJztcclxuICAgICAgICByZXR1cm4gdHJhbnNmb3JtO1xyXG4gICAgfSxcclxuICAgIGdldElmcmFtZU1hcmt1cDogZnVuY3Rpb24gKGlmcmFtZVdpZHRoLCBpZnJhbWVIZWlnaHQsIGlmcmFtZU1heFdpZHRoLCBpZnJhbWVNYXhIZWlnaHQsIHNyYywgaWZyYW1lVGl0bGUpIHtcclxuICAgICAgICB2YXIgdGl0bGUgPSBpZnJhbWVUaXRsZSA/ICd0aXRsZT1cIicgKyBpZnJhbWVUaXRsZSArICdcIicgOiAnJztcclxuICAgICAgICByZXR1cm4gXCI8ZGl2IGNsYXNzPVxcXCJsZy12aWRlby1jb250IGxnLWhhcy1pZnJhbWVcXFwiIHN0eWxlPVxcXCJ3aWR0aDpcIiArIGlmcmFtZVdpZHRoICsgXCI7IG1heC13aWR0aDpcIiArIGlmcmFtZU1heFdpZHRoICsgXCI7IGhlaWdodDogXCIgKyBpZnJhbWVIZWlnaHQgKyBcIjsgbWF4LWhlaWdodDpcIiArIGlmcmFtZU1heEhlaWdodCArIFwiXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxpZnJhbWUgY2xhc3M9XFxcImxnLW9iamVjdFxcXCIgZnJhbWVib3JkZXI9XFxcIjBcXFwiIFwiICsgdGl0bGUgKyBcIiBzcmM9XFxcIlwiICsgc3JjICsgXCJcXFwiICBhbGxvd2Z1bGxzY3JlZW49XFxcInRydWVcXFwiPjwvaWZyYW1lPlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cIjtcclxuICAgIH0sXHJcbiAgICBnZXRJbWdNYXJrdXA6IGZ1bmN0aW9uIChpbmRleCwgc3JjLCBhbHRBdHRyLCBzcmNzZXQsIHNpemVzLCBzb3VyY2VzKSB7XHJcbiAgICAgICAgdmFyIHNyY3NldEF0dHIgPSBzcmNzZXQgPyBcInNyY3NldD1cXFwiXCIgKyBzcmNzZXQgKyBcIlxcXCJcIiA6ICcnO1xyXG4gICAgICAgIHZhciBzaXplc0F0dHIgPSBzaXplcyA/IFwic2l6ZXM9XFxcIlwiICsgc2l6ZXMgKyBcIlxcXCJcIiA6ICcnO1xyXG4gICAgICAgIHZhciBpbWdNYXJrdXAgPSBcIjxpbWcgXCIgKyBhbHRBdHRyICsgXCIgXCIgKyBzcmNzZXRBdHRyICsgXCIgIFwiICsgc2l6ZXNBdHRyICsgXCIgY2xhc3M9XFxcImxnLW9iamVjdCBsZy1pbWFnZVxcXCIgZGF0YS1pbmRleD1cXFwiXCIgKyBpbmRleCArIFwiXFxcIiBzcmM9XFxcIlwiICsgc3JjICsgXCJcXFwiIC8+XCI7XHJcbiAgICAgICAgdmFyIHNvdXJjZVRhZyA9ICcnO1xyXG4gICAgICAgIGlmIChzb3VyY2VzKSB7XHJcbiAgICAgICAgICAgIHZhciBzb3VyY2VPYmogPSB0eXBlb2Ygc291cmNlcyA9PT0gJ3N0cmluZycgPyBKU09OLnBhcnNlKHNvdXJjZXMpIDogc291cmNlcztcclxuICAgICAgICAgICAgc291cmNlVGFnID0gc291cmNlT2JqLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYXR0cnMgPSAnJztcclxuICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gRG8gbm90IHJlbW92ZSB0aGUgZmlyc3Qgc3BhY2UgYXMgaXQgaXMgcmVxdWlyZWQgdG8gc2VwYXJhdGUgdGhlIGF0dHJpYnV0ZXNcclxuICAgICAgICAgICAgICAgICAgICBhdHRycyArPSBcIiBcIiArIGtleSArIFwiPVxcXCJcIiArIHNvdXJjZVtrZXldICsgXCJcXFwiXCI7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcIjxzb3VyY2UgXCIgKyBhdHRycyArIFwiPjwvc291cmNlPlwiO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFwiXCIgKyBzb3VyY2VUYWcgKyBpbWdNYXJrdXA7XHJcbiAgICB9LFxyXG4gICAgLy8gR2V0IHNyYyBmcm9tIHJlc3BvbnNpdmUgc3JjXHJcbiAgICBnZXRSZXNwb25zaXZlU3JjOiBmdW5jdGlvbiAoc3JjSXRtcykge1xyXG4gICAgICAgIHZhciByc1dpZHRoID0gW107XHJcbiAgICAgICAgdmFyIHJzU3JjID0gW107XHJcbiAgICAgICAgdmFyIHNyYyA9ICcnO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3JjSXRtcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB2YXIgX3NyYyA9IHNyY0l0bXNbaV0uc3BsaXQoJyAnKTtcclxuICAgICAgICAgICAgLy8gTWFuYWdlIGVtcHR5IHNwYWNlXHJcbiAgICAgICAgICAgIGlmIChfc3JjWzBdID09PSAnJykge1xyXG4gICAgICAgICAgICAgICAgX3NyYy5zcGxpY2UoMCwgMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcnNTcmMucHVzaChfc3JjWzBdKTtcclxuICAgICAgICAgICAgcnNXaWR0aC5wdXNoKF9zcmNbMV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgd1dpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XHJcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCByc1dpZHRoLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgIGlmIChwYXJzZUludChyc1dpZHRoW2pdLCAxMCkgPiB3V2lkdGgpIHtcclxuICAgICAgICAgICAgICAgIHNyYyA9IHJzU3JjW2pdO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHNyYztcclxuICAgIH0sXHJcbiAgICBpc0ltYWdlTG9hZGVkOiBmdW5jdGlvbiAoaW1nKSB7XHJcbiAgICAgICAgaWYgKCFpbWcpXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAvLyBEdXJpbmcgdGhlIG9ubG9hZCBldmVudCwgSUUgY29ycmVjdGx5IGlkZW50aWZpZXMgYW55IGltYWdlcyB0aGF0XHJcbiAgICAgICAgLy8gd2VyZW7igJl0IGRvd25sb2FkZWQgYXMgbm90IGNvbXBsZXRlLiBPdGhlcnMgc2hvdWxkIHRvby4gR2Vja28tYmFzZWRcclxuICAgICAgICAvLyBicm93c2VycyBhY3QgbGlrZSBOUzQgaW4gdGhhdCB0aGV5IHJlcG9ydCB0aGlzIGluY29ycmVjdGx5LlxyXG4gICAgICAgIGlmICghaW1nLmNvbXBsZXRlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gSG93ZXZlciwgdGhleSBkbyBoYXZlIHR3byB2ZXJ5IHVzZWZ1bCBwcm9wZXJ0aWVzOiBuYXR1cmFsV2lkdGggYW5kXHJcbiAgICAgICAgLy8gbmF0dXJhbEhlaWdodC4gVGhlc2UgZ2l2ZSB0aGUgdHJ1ZSBzaXplIG9mIHRoZSBpbWFnZS4gSWYgaXQgZmFpbGVkXHJcbiAgICAgICAgLy8gdG8gbG9hZCwgZWl0aGVyIG9mIHRoZXNlIHNob3VsZCBiZSB6ZXJvLlxyXG4gICAgICAgIGlmIChpbWcubmF0dXJhbFdpZHRoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gTm8gb3RoZXIgd2F5IG9mIGNoZWNraW5nOiBhc3N1bWUgaXTigJlzIG9rLlxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfSxcclxuICAgIGdldFZpZGVvUG9zdGVyTWFya3VwOiBmdW5jdGlvbiAoX3Bvc3RlciwgZHVtbXlJbWcsIHZpZGVvQ29udFN0eWxlLCBwbGF5VmlkZW9TdHJpbmcsIF9pc1ZpZGVvKSB7XHJcbiAgICAgICAgdmFyIHZpZGVvQ2xhc3MgPSAnJztcclxuICAgICAgICBpZiAoX2lzVmlkZW8gJiYgX2lzVmlkZW8ueW91dHViZSkge1xyXG4gICAgICAgICAgICB2aWRlb0NsYXNzID0gJ2xnLWhhcy15b3V0dWJlJztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoX2lzVmlkZW8gJiYgX2lzVmlkZW8udmltZW8pIHtcclxuICAgICAgICAgICAgdmlkZW9DbGFzcyA9ICdsZy1oYXMtdmltZW8nO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmlkZW9DbGFzcyA9ICdsZy1oYXMtaHRtbDUnO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gXCI8ZGl2IGNsYXNzPVxcXCJsZy12aWRlby1jb250IFwiICsgdmlkZW9DbGFzcyArIFwiXFxcIiBzdHlsZT1cXFwiXCIgKyB2aWRlb0NvbnRTdHlsZSArIFwiXFxcIj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwibGctdmlkZW8tcGxheS1idXR0b25cXFwiPlxcbiAgICAgICAgICAgICAgICA8c3ZnXFxuICAgICAgICAgICAgICAgICAgICB2aWV3Qm94PVxcXCIwIDAgMjAgMjBcXFwiXFxuICAgICAgICAgICAgICAgICAgICBwcmVzZXJ2ZUFzcGVjdFJhdGlvPVxcXCJ4TWlkWU1pZFxcXCJcXG4gICAgICAgICAgICAgICAgICAgIGZvY3VzYWJsZT1cXFwiZmFsc2VcXFwiXFxuICAgICAgICAgICAgICAgICAgICBhcmlhLWxhYmVsbGVkYnk9XFxcIlwiICsgcGxheVZpZGVvU3RyaW5nICsgXCJcXFwiXFxuICAgICAgICAgICAgICAgICAgICByb2xlPVxcXCJpbWdcXFwiXFxuICAgICAgICAgICAgICAgICAgICBjbGFzcz1cXFwibGctdmlkZW8tcGxheS1pY29uXFxcIlxcbiAgICAgICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgICAgICA8dGl0bGU+XCIgKyBwbGF5VmlkZW9TdHJpbmcgKyBcIjwvdGl0bGU+XFxuICAgICAgICAgICAgICAgICAgICA8cG9seWdvbiBjbGFzcz1cXFwibGctdmlkZW8tcGxheS1pY29uLWlubmVyXFxcIiBwb2ludHM9XFxcIjEsMCAyMCwxMCAxLDIwXFxcIj48L3BvbHlnb24+XFxuICAgICAgICAgICAgICAgIDwvc3ZnPlxcbiAgICAgICAgICAgICAgICA8c3ZnIGNsYXNzPVxcXCJsZy12aWRlby1wbGF5LWljb24tYmdcXFwiIHZpZXdCb3g9XFxcIjAgMCA1MCA1MFxcXCIgZm9jdXNhYmxlPVxcXCJmYWxzZVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8Y2lyY2xlIGN4PVxcXCI1MCVcXFwiIGN5PVxcXCI1MCVcXFwiIHI9XFxcIjIwXFxcIj48L2NpcmNsZT48L3N2Zz5cXG4gICAgICAgICAgICAgICAgPHN2ZyBjbGFzcz1cXFwibGctdmlkZW8tcGxheS1pY29uLWNpcmNsZVxcXCIgdmlld0JveD1cXFwiMCAwIDUwIDUwXFxcIiBmb2N1c2FibGU9XFxcImZhbHNlXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxjaXJjbGUgY3g9XFxcIjUwJVxcXCIgY3k9XFxcIjUwJVxcXCIgcj1cXFwiMjBcXFwiPjwvY2lyY2xlPlxcbiAgICAgICAgICAgICAgICA8L3N2Zz5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICBcIiArIChkdW1teUltZyB8fCAnJykgKyBcIlxcbiAgICAgICAgICAgIDxpbWcgY2xhc3M9XFxcImxnLW9iamVjdCBsZy12aWRlby1wb3N0ZXJcXFwiIHNyYz1cXFwiXCIgKyBfcG9zdGVyICsgXCJcXFwiIC8+XFxuICAgICAgICA8L2Rpdj5cIjtcclxuICAgIH0sXHJcbiAgICBnZXRGb2N1c2FibGVFbGVtZW50czogZnVuY3Rpb24gKGNvbnRhaW5lcikge1xyXG4gICAgICAgIHZhciBlbGVtZW50cyA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCdhW2hyZWZdOm5vdChbZGlzYWJsZWRdKSwgYnV0dG9uOm5vdChbZGlzYWJsZWRdKSwgdGV4dGFyZWE6bm90KFtkaXNhYmxlZF0pLCBpbnB1dFt0eXBlPVwidGV4dFwiXTpub3QoW2Rpc2FibGVkXSksIGlucHV0W3R5cGU9XCJyYWRpb1wiXTpub3QoW2Rpc2FibGVkXSksIGlucHV0W3R5cGU9XCJjaGVja2JveFwiXTpub3QoW2Rpc2FibGVkXSksIHNlbGVjdDpub3QoW2Rpc2FibGVkXSknKTtcclxuICAgICAgICB2YXIgdmlzaWJsZUVsZW1lbnRzID0gW10uZmlsdGVyLmNhbGwoZWxlbWVudHMsIGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHZhciBzdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xyXG4gICAgICAgICAgICByZXR1cm4gc3R5bGUuZGlzcGxheSAhPT0gJ25vbmUnICYmIHN0eWxlLnZpc2liaWxpdHkgIT09ICdoaWRkZW4nO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiB2aXNpYmxlRWxlbWVudHM7XHJcbiAgICB9LFxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzYyBDcmVhdGUgZHluYW1pYyBlbGVtZW50cyBhcnJheSBmcm9tIGdhbGxlcnkgaXRlbXMgd2hlbiBkeW5hbWljIG9wdGlvbiBpcyBmYWxzZVxyXG4gICAgICogSXQgaGVscHMgdG8gYXZvaWQgZnJlcXVlbnQgRE9NIGludGVyYWN0aW9uXHJcbiAgICAgKiBhbmQgYXZvaWQgbXVsdGlwbGUgY2hlY2tzIGZvciBkeW5hbWljIGVsbWVudHNcclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IGR5bmFtaWNFbFxyXG4gICAgICovXHJcbiAgICBnZXREeW5hbWljT3B0aW9uczogZnVuY3Rpb24gKGl0ZW1zLCBleHRyYVByb3BzLCBnZXRDYXB0aW9uRnJvbVRpdGxlT3JBbHQsIGV4VGh1bWJJbWFnZSkge1xyXG4gICAgICAgIHZhciBkeW5hbWljRWxlbWVudHMgPSBbXTtcclxuICAgICAgICB2YXIgYXZhaWxhYmxlRHluYW1pY09wdGlvbnMgPSBfX3NwcmVhZEFycmF5cyhkZWZhdWx0RHluYW1pY09wdGlvbnMsIGV4dHJhUHJvcHMpO1xyXG4gICAgICAgIFtdLmZvckVhY2guY2FsbChpdGVtcywgZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICAgICAgdmFyIGR5bmFtaWNFbCA9IHt9O1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGl0ZW0uYXR0cmlidXRlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGF0dHIgPSBpdGVtLmF0dHJpYnV0ZXNbaV07XHJcbiAgICAgICAgICAgICAgICBpZiAoYXR0ci5zcGVjaWZpZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZHluYW1pY0F0dHIgPSBjb252ZXJ0VG9EYXRhKGF0dHIubmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxhYmVsID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGF2YWlsYWJsZUR5bmFtaWNPcHRpb25zLmluZGV4T2YoZHluYW1pY0F0dHIpID4gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWwgPSBkeW5hbWljQXR0cjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGR5bmFtaWNFbFtsYWJlbF0gPSBhdHRyLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgY3VycmVudEl0ZW0gPSAkTEcoaXRlbSk7XHJcbiAgICAgICAgICAgIHZhciBhbHQgPSBjdXJyZW50SXRlbS5maW5kKCdpbWcnKS5maXJzdCgpLmF0dHIoJ2FsdCcpO1xyXG4gICAgICAgICAgICB2YXIgdGl0bGUgPSBjdXJyZW50SXRlbS5hdHRyKCd0aXRsZScpO1xyXG4gICAgICAgICAgICB2YXIgdGh1bWIgPSBleFRodW1iSW1hZ2VcclxuICAgICAgICAgICAgICAgID8gY3VycmVudEl0ZW0uYXR0cihleFRodW1iSW1hZ2UpXHJcbiAgICAgICAgICAgICAgICA6IGN1cnJlbnRJdGVtLmZpbmQoJ2ltZycpLmZpcnN0KCkuYXR0cignc3JjJyk7XHJcbiAgICAgICAgICAgIGR5bmFtaWNFbC50aHVtYiA9IHRodW1iO1xyXG4gICAgICAgICAgICBpZiAoZ2V0Q2FwdGlvbkZyb21UaXRsZU9yQWx0ICYmICFkeW5hbWljRWwuc3ViSHRtbCkge1xyXG4gICAgICAgICAgICAgICAgZHluYW1pY0VsLnN1Ykh0bWwgPSB0aXRsZSB8fCBhbHQgfHwgJyc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZHluYW1pY0VsLmFsdCA9IGFsdCB8fCB0aXRsZSB8fCAnJztcclxuICAgICAgICAgICAgZHluYW1pY0VsZW1lbnRzLnB1c2goZHluYW1pY0VsKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gZHluYW1pY0VsZW1lbnRzO1xyXG4gICAgfSxcclxuICAgIGlzTW9iaWxlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIC9pUGhvbmV8aVBhZHxpUG9kfEFuZHJvaWQvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xyXG4gICAgfSxcclxuICAgIC8qKlxyXG4gICAgICogQGRlc2MgQ2hlY2sgdGhlIGdpdmVuIHNyYyBpcyB2aWRlb1xyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHNyY1xyXG4gICAgICogQHJldHVybiB7T2JqZWN0fSB2aWRlbyB0eXBlXHJcbiAgICAgKiBFeDp7IHlvdXR1YmUgIDogIFtcIi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9YzBhc0pnU3l4Y1lcIiwgXCJjMGFzSmdTeXhjWVwiXSB9XHJcbiAgICAgKlxyXG4gICAgICogQHRvZG8gLSB0aGlzIGluZm9ybWF0aW9uIGNhbiBiZSBtb3ZlZCB0byBkeW5hbWljRWwgdG8gYXZvaWQgZnJlcXVlbnQgY2FsbHNcclxuICAgICAqL1xyXG4gICAgaXNWaWRlbzogZnVuY3Rpb24gKHNyYywgaXNIVE1MNVZJZGVvLCBpbmRleCkge1xyXG4gICAgICAgIGlmICghc3JjKSB7XHJcbiAgICAgICAgICAgIGlmIChpc0hUTUw1VklkZW8pIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaHRtbDU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignbGlnaHRHYWxsZXJ5IDotIGRhdGEtc3JjIGlzIG5vdCBwcm92aWRlZCBvbiBzbGlkZSBpdGVtICcgK1xyXG4gICAgICAgICAgICAgICAgICAgIChpbmRleCArIDEpICtcclxuICAgICAgICAgICAgICAgICAgICAnLiBQbGVhc2UgbWFrZSBzdXJlIHRoZSBzZWxlY3RvciBwcm9wZXJ0eSBpcyBwcm9wZXJseSBjb25maWd1cmVkLiBNb3JlIGluZm8gLSBodHRwczovL3d3dy5saWdodGdhbGxlcnlqcy5jb20vZGVtb3MvaHRtbC1tYXJrdXAvJyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHlvdXR1YmUgPSBzcmMubWF0Y2goL1xcL1xcLyg/Ond3d1xcLik/eW91dHUoPzpcXC5iZXxiZVxcLmNvbXxiZS1ub2Nvb2tpZVxcLmNvbSlcXC8oPzp3YXRjaFxcP3Y9fGVtYmVkXFwvKT8oW2EtejAtOVxcLVxcX1xcJV0rKShbXFwmfD9dW1xcU10qKSovaSk7XHJcbiAgICAgICAgdmFyIHZpbWVvID0gc3JjLm1hdGNoKC9cXC9cXC8oPzp3d3dcXC4pPyg/OnBsYXllclxcLik/dmltZW8uY29tXFwvKD86dmlkZW9cXC8pPyhbMC05YS16XFwtX10rKSguKik/L2kpO1xyXG4gICAgICAgIHZhciB3aXN0aWEgPSBzcmMubWF0Y2goL2h0dHBzPzpcXC9cXC8oLispPyh3aXN0aWFcXC5jb218d2lcXC5zdClcXC8obWVkaWFzfGVtYmVkKVxcLyhbMC05YS16XFwtX10rKSguKikvKTtcclxuICAgICAgICBpZiAoeW91dHViZSkge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgeW91dHViZTogeW91dHViZSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodmltZW8pIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHZpbWVvOiB2aW1lbyxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAod2lzdGlhKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICB3aXN0aWE6IHdpc3RpYSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG59O1xuXG4vLyBAcmVmIC0gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzk3MTg0MS9ob3ctdG8tcmVzaXplLWltYWdlcy1wcm9wb3J0aW9uYWxseS1rZWVwaW5nLXRoZS1hc3BlY3QtcmF0aW9cclxuLy8gQHJlZiAtIGh0dHBzOi8vMmFsaXR5LmNvbS8yMDE3LzA0L3NldHRpbmctdXAtbXVsdGktcGxhdGZvcm0tcGFja2FnZXMuaHRtbFxyXG4vLyBVbmlxdWUgaWQgZm9yIGVhY2ggZ2FsbGVyeVxyXG52YXIgbGdJZCA9IDA7XHJcbnZhciBMaWdodEdhbGxlcnkgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBMaWdodEdhbGxlcnkoZWxlbWVudCwgb3B0aW9ucykge1xyXG4gICAgICAgIHRoaXMubGdPcGVuZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmluZGV4ID0gMDtcclxuICAgICAgICAvLyBsaWdodEdhbGxlcnkgbW9kdWxlc1xyXG4gICAgICAgIHRoaXMucGx1Z2lucyA9IFtdO1xyXG4gICAgICAgIC8vIGZhbHNlIHdoZW4gbGlnaHRHYWxsZXJ5IGxvYWQgZmlyc3Qgc2xpZGUgY29udGVudDtcclxuICAgICAgICB0aGlzLmxHYWxsZXJ5T24gPSBmYWxzZTtcclxuICAgICAgICAvLyBUcnVlIHdoZW4gYSBzbGlkZSBhbmltYXRpb24gaXMgaW4gcHJvZ3Jlc3NcclxuICAgICAgICB0aGlzLmxnQnVzeSA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuY3VycmVudEl0ZW1zSW5Eb20gPSBbXTtcclxuICAgICAgICAvLyBTY3JvbGwgdG9wIHZhbHVlIGJlZm9yZSBsaWdodEdhbGxlcnkgaXMgb3BlbmVkXHJcbiAgICAgICAgdGhpcy5wcmV2U2Nyb2xsVG9wID0gMDtcclxuICAgICAgICB0aGlzLmJvZHlQYWRkaW5nUmlnaHQgPSAwO1xyXG4gICAgICAgIHRoaXMuaXNEdW1teUltYWdlUmVtb3ZlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuZHJhZ09yU3dpcGVFbmFibGVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5tZWRpYUNvbnRhaW5lclBvc2l0aW9uID0ge1xyXG4gICAgICAgICAgICB0b3A6IDAsXHJcbiAgICAgICAgICAgIGJvdHRvbTogMCxcclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmICghZWxlbWVudCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcbiAgICAgICAgbGdJZCsrO1xyXG4gICAgICAgIHRoaXMubGdJZCA9IGxnSWQ7XHJcbiAgICAgICAgdGhpcy5lbCA9IGVsZW1lbnQ7XHJcbiAgICAgICAgdGhpcy5MR2VsID0gJExHKGVsZW1lbnQpO1xyXG4gICAgICAgIHRoaXMuZ2VuZXJhdGVTZXR0aW5ncyhvcHRpb25zKTtcclxuICAgICAgICB0aGlzLmJ1aWxkTW9kdWxlcygpO1xyXG4gICAgICAgIC8vIFdoZW4gdXNpbmcgZHluYW1pYyBtb2RlLCBlbnN1cmUgZHluYW1pY0VsIGlzIGFuIGFycmF5XHJcbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuZHluYW1pYyAmJlxyXG4gICAgICAgICAgICB0aGlzLnNldHRpbmdzLmR5bmFtaWNFbCAhPT0gdW5kZWZpbmVkICYmXHJcbiAgICAgICAgICAgICFBcnJheS5pc0FycmF5KHRoaXMuc2V0dGluZ3MuZHluYW1pY0VsKSkge1xyXG4gICAgICAgICAgICB0aHJvdyAnV2hlbiB1c2luZyBkeW5hbWljIG1vZGUsIHlvdSBtdXN0IGFsc28gZGVmaW5lIGR5bmFtaWNFbCBhcyBhbiBBcnJheS4nO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmdhbGxlcnlJdGVtcyA9IHRoaXMuZ2V0SXRlbXMoKTtcclxuICAgICAgICB0aGlzLm5vcm1hbGl6ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgLy8gR2FsbGVyeSBpdGVtc1xyXG4gICAgICAgIHRoaXMuaW5pdCgpO1xyXG4gICAgICAgIHRoaXMudmFsaWRhdGVMaWNlbnNlKCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLmdlbmVyYXRlU2V0dGluZ3MgPSBmdW5jdGlvbiAob3B0aW9ucykge1xyXG4gICAgICAgIC8vIGxpZ2h0R2FsbGVyeSBzZXR0aW5nc1xyXG4gICAgICAgIHRoaXMuc2V0dGluZ3MgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgbGlnaHRHYWxsZXJ5Q29yZVNldHRpbmdzKSwgb3B0aW9ucyk7XHJcbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuaXNNb2JpbGUgJiZcclxuICAgICAgICAgICAgdHlwZW9mIHRoaXMuc2V0dGluZ3MuaXNNb2JpbGUgPT09ICdmdW5jdGlvbidcclxuICAgICAgICAgICAgPyB0aGlzLnNldHRpbmdzLmlzTW9iaWxlKClcclxuICAgICAgICAgICAgOiB1dGlscy5pc01vYmlsZSgpKSB7XHJcbiAgICAgICAgICAgIHZhciBtb2JpbGVTZXR0aW5ncyA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCB0aGlzLnNldHRpbmdzLm1vYmlsZVNldHRpbmdzKSwgdGhpcy5zZXR0aW5ncy5tb2JpbGVTZXR0aW5ncyk7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0dGluZ3MgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgdGhpcy5zZXR0aW5ncyksIG1vYmlsZVNldHRpbmdzKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS5ub3JtYWxpemVTZXR0aW5ncyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5zbGlkZUVuZEFuaW1hdGlvbikge1xyXG4gICAgICAgICAgICB0aGlzLnNldHRpbmdzLmhpZGVDb250cm9sT25FbmQgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCF0aGlzLnNldHRpbmdzLmNsb3NhYmxlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0dGluZ3Muc3dpcGVUb0Nsb3NlID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIEFuZCByZXNldCBpdCBvbiBjbG9zZSB0byBnZXQgdGhlIGNvcnJlY3QgdmFsdWUgbmV4dCB0aW1lXHJcbiAgICAgICAgdGhpcy56b29tRnJvbU9yaWdpbiA9IHRoaXMuc2V0dGluZ3Muem9vbUZyb21PcmlnaW47XHJcbiAgICAgICAgLy8gQXQgdGhlIG1vbWVudCwgWm9vbSBmcm9tIGltYWdlIGRvZXNuJ3Qgc3VwcG9ydCBkeW5hbWljIG9wdGlvbnNcclxuICAgICAgICAvLyBAdG9kbyBhZGQgem9vbUZyb21PcmlnaW4gc3VwcG9ydCBmb3IgZHluYW1pYyBpbWFnZXNcclxuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5keW5hbWljKSB7XHJcbiAgICAgICAgICAgIHRoaXMuem9vbUZyb21PcmlnaW4gPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCF0aGlzLnNldHRpbmdzLmNvbnRhaW5lcikge1xyXG4gICAgICAgICAgICB0aGlzLnNldHRpbmdzLmNvbnRhaW5lciA9IGRvY3VtZW50LmJvZHk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHNldHRpbmdzLnByZWxvYWQgc2hvdWxkIG5vdCBiZSBncmF0ZXIgdGhhbiAkaXRlbS5sZW5ndGhcclxuICAgICAgICB0aGlzLnNldHRpbmdzLnByZWxvYWQgPSBNYXRoLm1pbih0aGlzLnNldHRpbmdzLnByZWxvYWQsIHRoaXMuZ2FsbGVyeUl0ZW1zLmxlbmd0aCk7XHJcbiAgICB9O1xyXG4gICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5hZGRTbGlkZVZpZGVvSW5mbyh0aGlzLmdhbGxlcnlJdGVtcyk7XHJcbiAgICAgICAgdGhpcy5idWlsZFN0cnVjdHVyZSgpO1xyXG4gICAgICAgIHRoaXMuTEdlbC50cmlnZ2VyKGxHRXZlbnRzLmluaXQsIHtcclxuICAgICAgICAgICAgaW5zdGFuY2U6IHRoaXMsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3Mua2V5UHJlc3MpIHtcclxuICAgICAgICAgICAgdGhpcy5rZXlQcmVzcygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgX3RoaXMuZW5hYmxlRHJhZygpO1xyXG4gICAgICAgICAgICBfdGhpcy5lbmFibGVTd2lwZSgpO1xyXG4gICAgICAgICAgICBfdGhpcy50cmlnZ2VyUG9zdGVyQ2xpY2soKTtcclxuICAgICAgICB9LCA1MCk7XHJcbiAgICAgICAgdGhpcy5hcnJvdygpO1xyXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLm1vdXNld2hlZWwpIHtcclxuICAgICAgICAgICAgdGhpcy5tb3VzZXdoZWVsKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghdGhpcy5zZXR0aW5ncy5keW5hbWljKSB7XHJcbiAgICAgICAgICAgIHRoaXMub3BlbkdhbGxlcnlPbkl0ZW1DbGljaygpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLm9wZW5HYWxsZXJ5T25JdGVtQ2xpY2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uIChpbmRleCkge1xyXG4gICAgICAgICAgICB2YXIgZWxlbWVudCA9IHRoaXNfMS5pdGVtc1tpbmRleF07XHJcbiAgICAgICAgICAgIHZhciAkZWxlbWVudCA9ICRMRyhlbGVtZW50KTtcclxuICAgICAgICAgICAgLy8gVXNpbmcgZGlmZmVyZW50IG5hbWVzcGFjZSBmb3IgY2xpY2sgYmVjYXVzZSBjbGljayBldmVudCBzaG91bGQgbm90IHVuYmluZCBpZiBzZWxlY3RvciBpcyBzYW1lIG9iamVjdCgndGhpcycpXHJcbiAgICAgICAgICAgIC8vIEB0b2RvIG1hbmFnZSBhbGwgZXZlbnQgbGlzdG5lcnMgLSBzaG91bGQgaGF2ZSBuYW1lc3BhY2UgdGhhdCByZXByZXNlbnQgZWxlbWVudFxyXG4gICAgICAgICAgICB2YXIgdXVpZCA9IGxnUXVlcnkuZ2VuZXJhdGVVVUlEKCk7XHJcbiAgICAgICAgICAgICRlbGVtZW50XHJcbiAgICAgICAgICAgICAgICAuYXR0cignZGF0YS1sZy1pZCcsIHV1aWQpXHJcbiAgICAgICAgICAgICAgICAub24oXCJjbGljay5sZ2N1c3RvbS1pdGVtLVwiICsgdXVpZCwgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50SXRlbUluZGV4ID0gX3RoaXMuc2V0dGluZ3MuaW5kZXggfHwgaW5kZXg7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5vcGVuR2FsbGVyeShjdXJyZW50SXRlbUluZGV4LCBlbGVtZW50KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB2YXIgdGhpc18xID0gdGhpcztcclxuICAgICAgICAvLyBVc2luZyBmb3IgbG9vcCBpbnN0ZWFkIG9mIHVzaW5nIGJ1YmJsaW5nIGFzIHRoZSBpdGVtcyBjYW4gYmUgYW55IGh0bWwgZWxlbWVudC5cclxuICAgICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5pdGVtcy5sZW5ndGg7IGluZGV4KyspIHtcclxuICAgICAgICAgICAgX2xvb3BfMShpbmRleCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogTW9kdWxlIGNvbnN0cnVjdG9yXHJcbiAgICAgKiBNb2R1bGVzIGFyZSBidWlsZCBpbmNyZW1lbnRhbGx5LlxyXG4gICAgICogR2FsbGVyeSBzaG91bGQgYmUgb3BlbmVkIG9ubHkgb25jZSBhbGwgdGhlIG1vZHVsZXMgYXJlIGluaXRpYWxpemVkLlxyXG4gICAgICogdXNlIG1vZHVsZUJ1aWxkVGltZW91dCB0byBtYWtlIHN1cmUgdGhpc1xyXG4gICAgICovXHJcbiAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLmJ1aWxkTW9kdWxlcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuc2V0dGluZ3MucGx1Z2lucy5mb3JFYWNoKGZ1bmN0aW9uIChwbHVnaW4pIHtcclxuICAgICAgICAgICAgX3RoaXMucGx1Z2lucy5wdXNoKG5ldyBwbHVnaW4oX3RoaXMsICRMRykpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIExpZ2h0R2FsbGVyeS5wcm90b3R5cGUudmFsaWRhdGVMaWNlbnNlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5zZXR0aW5ncy5saWNlbnNlS2V5KSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1BsZWFzZSBwcm92aWRlIGEgdmFsaWQgbGljZW5zZSBrZXknKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy5zZXR0aW5ncy5saWNlbnNlS2V5ID09PSAnMDAwMC0wMDAwLTAwMC0wMDAwJykge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJsaWdodEdhbGxlcnk6IFwiICsgdGhpcy5zZXR0aW5ncy5saWNlbnNlS2V5ICsgXCIgbGljZW5zZSBrZXkgaXMgbm90IHZhbGlkIGZvciBwcm9kdWN0aW9uIHVzZVwiKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS5nZXRTbGlkZUl0ZW0gPSBmdW5jdGlvbiAoaW5kZXgpIHtcclxuICAgICAgICByZXR1cm4gJExHKHRoaXMuZ2V0U2xpZGVJdGVtSWQoaW5kZXgpKTtcclxuICAgIH07XHJcbiAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLmdldFNsaWRlSXRlbUlkID0gZnVuY3Rpb24gKGluZGV4KSB7XHJcbiAgICAgICAgcmV0dXJuIFwiI2xnLWl0ZW0tXCIgKyB0aGlzLmxnSWQgKyBcIi1cIiArIGluZGV4O1xyXG4gICAgfTtcclxuICAgIExpZ2h0R2FsbGVyeS5wcm90b3R5cGUuZ2V0SWROYW1lID0gZnVuY3Rpb24gKGlkKSB7XHJcbiAgICAgICAgcmV0dXJuIGlkICsgXCItXCIgKyB0aGlzLmxnSWQ7XHJcbiAgICB9O1xyXG4gICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS5nZXRFbGVtZW50QnlJZCA9IGZ1bmN0aW9uIChpZCkge1xyXG4gICAgICAgIHJldHVybiAkTEcoXCIjXCIgKyB0aGlzLmdldElkTmFtZShpZCkpO1xyXG4gICAgfTtcclxuICAgIExpZ2h0R2FsbGVyeS5wcm90b3R5cGUubWFuYWdlU2luZ2xlU2xpZGVDbGFzc05hbWUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZ2FsbGVyeUl0ZW1zLmxlbmd0aCA8IDIpIHtcclxuICAgICAgICAgICAgdGhpcy5vdXRlci5hZGRDbGFzcygnbGctc2luZ2xlLWl0ZW0nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMub3V0ZXIucmVtb3ZlQ2xhc3MoJ2xnLXNpbmdsZS1pdGVtJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIExpZ2h0R2FsbGVyeS5wcm90b3R5cGUuYnVpbGRTdHJ1Y3R1cmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgY29udGFpbmVyID0gdGhpcy4kY29udGFpbmVyICYmIHRoaXMuJGNvbnRhaW5lci5nZXQoKTtcclxuICAgICAgICBpZiAoY29udGFpbmVyKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGNvbnRyb2xzID0gJyc7XHJcbiAgICAgICAgdmFyIHN1Ykh0bWxDb250ID0gJyc7XHJcbiAgICAgICAgLy8gQ3JlYXRlIGNvbnRyb2xzXHJcbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuY29udHJvbHMpIHtcclxuICAgICAgICAgICAgY29udHJvbHMgPSBcIjxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBpZD1cXFwiXCIgKyB0aGlzLmdldElkTmFtZSgnbGctcHJldicpICsgXCJcXFwiIGFyaWEtbGFiZWw9XFxcIlwiICsgdGhpcy5zZXR0aW5ncy5zdHJpbmdzWydwcmV2aW91c1NsaWRlJ10gKyBcIlxcXCIgY2xhc3M9XFxcImxnLXByZXYgbGctaWNvblxcXCI+IFwiICsgdGhpcy5zZXR0aW5ncy5wcmV2SHRtbCArIFwiIDwvYnV0dG9uPlxcbiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgaWQ9XFxcIlwiICsgdGhpcy5nZXRJZE5hbWUoJ2xnLW5leHQnKSArIFwiXFxcIiBhcmlhLWxhYmVsPVxcXCJcIiArIHRoaXMuc2V0dGluZ3Muc3RyaW5nc1snbmV4dFNsaWRlJ10gKyBcIlxcXCIgY2xhc3M9XFxcImxnLW5leHQgbGctaWNvblxcXCI+IFwiICsgdGhpcy5zZXR0aW5ncy5uZXh0SHRtbCArIFwiIDwvYnV0dG9uPlwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5hcHBlbmRTdWJIdG1sVG8gIT09ICcubGctaXRlbScpIHtcclxuICAgICAgICAgICAgc3ViSHRtbENvbnQgPVxyXG4gICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJsZy1zdWItaHRtbFwiIHJvbGU9XCJzdGF0dXNcIiBhcmlhLWxpdmU9XCJwb2xpdGVcIj48L2Rpdj4nO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgYWRkQ2xhc3NlcyA9ICcnO1xyXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmFsbG93TWVkaWFPdmVybGFwKSB7XHJcbiAgICAgICAgICAgIC8vIERvIG5vdCByZW1vdmUgc3BhY2UgYmVmb3JlIGxhc3Qgc2luZ2xlIHF1b3RlXHJcbiAgICAgICAgICAgIGFkZENsYXNzZXMgKz0gJ2xnLW1lZGlhLW92ZXJsYXAgJztcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGFyaWFMYWJlbGxlZGJ5ID0gdGhpcy5zZXR0aW5ncy5hcmlhTGFiZWxsZWRieVxyXG4gICAgICAgICAgICA/ICdhcmlhLWxhYmVsbGVkYnk9XCInICsgdGhpcy5zZXR0aW5ncy5hcmlhTGFiZWxsZWRieSArICdcIidcclxuICAgICAgICAgICAgOiAnJztcclxuICAgICAgICB2YXIgYXJpYURlc2NyaWJlZGJ5ID0gdGhpcy5zZXR0aW5ncy5hcmlhRGVzY3JpYmVkYnlcclxuICAgICAgICAgICAgPyAnYXJpYS1kZXNjcmliZWRieT1cIicgKyB0aGlzLnNldHRpbmdzLmFyaWFEZXNjcmliZWRieSArICdcIidcclxuICAgICAgICAgICAgOiAnJztcclxuICAgICAgICB2YXIgY29udGFpbmVyQ2xhc3NOYW1lID0gXCJsZy1jb250YWluZXIgXCIgKyB0aGlzLnNldHRpbmdzLmFkZENsYXNzICsgXCIgXCIgKyAoZG9jdW1lbnQuYm9keSAhPT0gdGhpcy5zZXR0aW5ncy5jb250YWluZXIgPyAnbGctaW5saW5lJyA6ICcnKTtcclxuICAgICAgICB2YXIgY2xvc2VJY29uID0gdGhpcy5zZXR0aW5ncy5jbG9zYWJsZSAmJiB0aGlzLnNldHRpbmdzLnNob3dDbG9zZUljb25cclxuICAgICAgICAgICAgPyBcIjxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBhcmlhLWxhYmVsPVxcXCJcIiArIHRoaXMuc2V0dGluZ3Muc3RyaW5nc1snY2xvc2VHYWxsZXJ5J10gKyBcIlxcXCIgaWQ9XFxcIlwiICsgdGhpcy5nZXRJZE5hbWUoJ2xnLWNsb3NlJykgKyBcIlxcXCIgY2xhc3M9XFxcImxnLWNsb3NlIGxnLWljb25cXFwiPjwvYnV0dG9uPlwiXHJcbiAgICAgICAgICAgIDogJyc7XHJcbiAgICAgICAgdmFyIG1heGltaXplSWNvbiA9IHRoaXMuc2V0dGluZ3Muc2hvd01heGltaXplSWNvblxyXG4gICAgICAgICAgICA/IFwiPGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGFyaWEtbGFiZWw9XFxcIlwiICsgdGhpcy5zZXR0aW5ncy5zdHJpbmdzWyd0b2dnbGVNYXhpbWl6ZSddICsgXCJcXFwiIGlkPVxcXCJcIiArIHRoaXMuZ2V0SWROYW1lKCdsZy1tYXhpbWl6ZScpICsgXCJcXFwiIGNsYXNzPVxcXCJsZy1tYXhpbWl6ZSBsZy1pY29uXFxcIj48L2J1dHRvbj5cIlxyXG4gICAgICAgICAgICA6ICcnO1xyXG4gICAgICAgIHZhciB0ZW1wbGF0ZSA9IFwiXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJcIiArIGNvbnRhaW5lckNsYXNzTmFtZSArIFwiXFxcIiBpZD1cXFwiXCIgKyB0aGlzLmdldElkTmFtZSgnbGctY29udGFpbmVyJykgKyBcIlxcXCIgdGFiaW5kZXg9XFxcIi0xXFxcIiBhcmlhLW1vZGFsPVxcXCJ0cnVlXFxcIiBcIiArIGFyaWFMYWJlbGxlZGJ5ICsgXCIgXCIgKyBhcmlhRGVzY3JpYmVkYnkgKyBcIiByb2xlPVxcXCJkaWFsb2dcXFwiXFxuICAgICAgICA+XFxuICAgICAgICAgICAgPGRpdiBpZD1cXFwiXCIgKyB0aGlzLmdldElkTmFtZSgnbGctYmFja2Ryb3AnKSArIFwiXFxcIiBjbGFzcz1cXFwibGctYmFja2Ryb3BcXFwiPjwvZGl2PlxcblxcbiAgICAgICAgICAgIDxkaXYgaWQ9XFxcIlwiICsgdGhpcy5nZXRJZE5hbWUoJ2xnLW91dGVyJykgKyBcIlxcXCIgY2xhc3M9XFxcImxnLW91dGVyIGxnLXVzZS1jc3MzIGxnLWNzczMgbGctaGlkZS1pdGVtcyBcIiArIGFkZENsYXNzZXMgKyBcIiBcXFwiPlxcblxcbiAgICAgICAgICAgICAgPGRpdiBpZD1cXFwiXCIgKyB0aGlzLmdldElkTmFtZSgnbGctY29udGVudCcpICsgXCJcXFwiIGNsYXNzPVxcXCJsZy1jb250ZW50XFxcIj5cXG4gICAgICAgICAgICAgICAgPGRpdiBpZD1cXFwiXCIgKyB0aGlzLmdldElkTmFtZSgnbGctaW5uZXInKSArIFwiXFxcIiBjbGFzcz1cXFwibGctaW5uZXJcXFwiPlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgXCIgKyBjb250cm9scyArIFwiXFxuICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgPGRpdiBpZD1cXFwiXCIgKyB0aGlzLmdldElkTmFtZSgnbGctdG9vbGJhcicpICsgXCJcXFwiIGNsYXNzPVxcXCJsZy10b29sYmFyIGxnLWdyb3VwXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIFwiICsgbWF4aW1pemVJY29uICsgXCJcXG4gICAgICAgICAgICAgICAgICAgIFwiICsgY2xvc2VJY29uICsgXCJcXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgXCIgKyAodGhpcy5zZXR0aW5ncy5hcHBlbmRTdWJIdG1sVG8gPT09ICcubGctb3V0ZXInXHJcbiAgICAgICAgICAgID8gc3ViSHRtbENvbnRcclxuICAgICAgICAgICAgOiAnJykgKyBcIlxcbiAgICAgICAgICAgICAgICA8ZGl2IGlkPVxcXCJcIiArIHRoaXMuZ2V0SWROYW1lKCdsZy1jb21wb25lbnRzJykgKyBcIlxcXCIgY2xhc3M9XFxcImxnLWNvbXBvbmVudHNcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgXCIgKyAodGhpcy5zZXR0aW5ncy5hcHBlbmRTdWJIdG1sVG8gPT09ICcubGctc3ViLWh0bWwnXHJcbiAgICAgICAgICAgID8gc3ViSHRtbENvbnRcclxuICAgICAgICAgICAgOiAnJykgKyBcIlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICAgICAgXCI7XHJcbiAgICAgICAgJExHKHRoaXMuc2V0dGluZ3MuY29udGFpbmVyKS5hcHBlbmQodGVtcGxhdGUpO1xyXG4gICAgICAgIGlmIChkb2N1bWVudC5ib2R5ICE9PSB0aGlzLnNldHRpbmdzLmNvbnRhaW5lcikge1xyXG4gICAgICAgICAgICAkTEcodGhpcy5zZXR0aW5ncy5jb250YWluZXIpLmNzcygncG9zaXRpb24nLCAncmVsYXRpdmUnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5vdXRlciA9IHRoaXMuZ2V0RWxlbWVudEJ5SWQoJ2xnLW91dGVyJyk7XHJcbiAgICAgICAgdGhpcy4kbGdDb21wb25lbnRzID0gdGhpcy5nZXRFbGVtZW50QnlJZCgnbGctY29tcG9uZW50cycpO1xyXG4gICAgICAgIHRoaXMuJGJhY2tkcm9wID0gdGhpcy5nZXRFbGVtZW50QnlJZCgnbGctYmFja2Ryb3AnKTtcclxuICAgICAgICB0aGlzLiRjb250YWluZXIgPSB0aGlzLmdldEVsZW1lbnRCeUlkKCdsZy1jb250YWluZXInKTtcclxuICAgICAgICB0aGlzLiRpbm5lciA9IHRoaXMuZ2V0RWxlbWVudEJ5SWQoJ2xnLWlubmVyJyk7XHJcbiAgICAgICAgdGhpcy4kY29udGVudCA9IHRoaXMuZ2V0RWxlbWVudEJ5SWQoJ2xnLWNvbnRlbnQnKTtcclxuICAgICAgICB0aGlzLiR0b29sYmFyID0gdGhpcy5nZXRFbGVtZW50QnlJZCgnbGctdG9vbGJhcicpO1xyXG4gICAgICAgIHRoaXMuJGJhY2tkcm9wLmNzcygndHJhbnNpdGlvbi1kdXJhdGlvbicsIHRoaXMuc2V0dGluZ3MuYmFja2Ryb3BEdXJhdGlvbiArICdtcycpO1xyXG4gICAgICAgIHZhciBvdXRlckNsYXNzTmFtZXMgPSB0aGlzLnNldHRpbmdzLm1vZGUgKyBcIiBcIjtcclxuICAgICAgICB0aGlzLm1hbmFnZVNpbmdsZVNsaWRlQ2xhc3NOYW1lKCk7XHJcbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuZW5hYmxlRHJhZykge1xyXG4gICAgICAgICAgICBvdXRlckNsYXNzTmFtZXMgKz0gJ2xnLWdyYWIgJztcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5vdXRlci5hZGRDbGFzcyhvdXRlckNsYXNzTmFtZXMpO1xyXG4gICAgICAgIHRoaXMuJGlubmVyLmNzcygndHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb24nLCB0aGlzLnNldHRpbmdzLmVhc2luZyk7XHJcbiAgICAgICAgdGhpcy4kaW5uZXIuY3NzKCd0cmFuc2l0aW9uLWR1cmF0aW9uJywgdGhpcy5zZXR0aW5ncy5zcGVlZCArICdtcycpO1xyXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmRvd25sb2FkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuJHRvb2xiYXIuYXBwZW5kKFwiPGEgaWQ9XFxcIlwiICsgdGhpcy5nZXRJZE5hbWUoJ2xnLWRvd25sb2FkJykgKyBcIlxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiIHJlbD1cXFwibm9vcGVuZXJcXFwiIGFyaWEtbGFiZWw9XFxcIlwiICsgdGhpcy5zZXR0aW5ncy5zdHJpbmdzWydkb3dubG9hZCddICsgXCJcXFwiIGRvd25sb2FkIGNsYXNzPVxcXCJsZy1kb3dubG9hZCBsZy1pY29uXFxcIj48L2E+XCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNvdW50ZXIoKTtcclxuICAgICAgICAkTEcod2luZG93KS5vbihcInJlc2l6ZS5sZy5nbG9iYWxcIiArIHRoaXMubGdJZCArIFwiIG9yaWVudGF0aW9uY2hhbmdlLmxnLmdsb2JhbFwiICsgdGhpcy5sZ0lkLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIF90aGlzLnJlZnJlc2hPblJlc2l6ZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuaGlkZUJhcnMoKTtcclxuICAgICAgICB0aGlzLm1hbmFnZUNsb3NlR2FsbGVyeSgpO1xyXG4gICAgICAgIHRoaXMudG9nZ2xlTWF4aW1pemUoKTtcclxuICAgICAgICB0aGlzLmluaXRNb2R1bGVzKCk7XHJcbiAgICB9O1xyXG4gICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS5yZWZyZXNoT25SZXNpemUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMubGdPcGVuZWQpIHtcclxuICAgICAgICAgICAgdmFyIGN1cnJlbnRHYWxsZXJ5SXRlbSA9IHRoaXMuZ2FsbGVyeUl0ZW1zW3RoaXMuaW5kZXhdO1xyXG4gICAgICAgICAgICB2YXIgX19zbGlkZVZpZGVvSW5mbyA9IGN1cnJlbnRHYWxsZXJ5SXRlbS5fX3NsaWRlVmlkZW9JbmZvO1xyXG4gICAgICAgICAgICB0aGlzLm1lZGlhQ29udGFpbmVyUG9zaXRpb24gPSB0aGlzLmdldE1lZGlhQ29udGFpbmVyUG9zaXRpb24oKTtcclxuICAgICAgICAgICAgdmFyIF9hID0gdGhpcy5tZWRpYUNvbnRhaW5lclBvc2l0aW9uLCB0b3BfMSA9IF9hLnRvcCwgYm90dG9tID0gX2EuYm90dG9tO1xyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRJbWFnZVNpemUgPSB1dGlscy5nZXRTaXplKHRoaXMuaXRlbXNbdGhpcy5pbmRleF0sIHRoaXMub3V0ZXIsIHRvcF8xICsgYm90dG9tLCBfX3NsaWRlVmlkZW9JbmZvICYmIHRoaXMuc2V0dGluZ3MudmlkZW9NYXhTaXplKTtcclxuICAgICAgICAgICAgaWYgKF9fc2xpZGVWaWRlb0luZm8pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVzaXplVmlkZW9TbGlkZSh0aGlzLmluZGV4LCB0aGlzLmN1cnJlbnRJbWFnZVNpemUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnpvb21Gcm9tT3JpZ2luICYmICF0aGlzLmlzRHVtbXlJbWFnZVJlbW92ZWQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBpbWdTdHlsZSA9IHRoaXMuZ2V0RHVtbXlJbWdTdHlsZXModGhpcy5jdXJyZW50SW1hZ2VTaXplKTtcclxuICAgICAgICAgICAgICAgIHRoaXMub3V0ZXJcclxuICAgICAgICAgICAgICAgICAgICAuZmluZCgnLmxnLWN1cnJlbnQgLmxnLWR1bW15LWltZycpXHJcbiAgICAgICAgICAgICAgICAgICAgLmZpcnN0KClcclxuICAgICAgICAgICAgICAgICAgICAuYXR0cignc3R5bGUnLCBpbWdTdHlsZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5MR2VsLnRyaWdnZXIobEdFdmVudHMuY29udGFpbmVyUmVzaXplKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS5yZXNpemVWaWRlb1NsaWRlID0gZnVuY3Rpb24gKGluZGV4LCBpbWFnZVNpemUpIHtcclxuICAgICAgICB2YXIgbGdWaWRlb1N0eWxlID0gdGhpcy5nZXRWaWRlb0NvbnRTdHlsZShpbWFnZVNpemUpO1xyXG4gICAgICAgIHZhciBjdXJyZW50U2xpZGUgPSB0aGlzLmdldFNsaWRlSXRlbShpbmRleCk7XHJcbiAgICAgICAgY3VycmVudFNsaWRlLmZpbmQoJy5sZy12aWRlby1jb250JykuYXR0cignc3R5bGUnLCBsZ1ZpZGVvU3R5bGUpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogVXBkYXRlIHNsaWRlcyBkeW5hbWljYWxseS5cclxuICAgICAqIEFkZCwgZWRpdCBvciBkZWxldGUgc2xpZGVzIGR5bmFtaWNhbGx5IHdoZW4gbGlnaHRHYWxsZXJ5IGlzIG9wZW5lZC5cclxuICAgICAqIE1vZGlmeSB0aGUgY3VycmVudCBnYWxsZXJ5IGl0ZW1zIGFuZCBwYXNzIGl0IHZpYSB1cGRhdGVTbGlkZXMgbWV0aG9kXHJcbiAgICAgKiBAbm90ZVxyXG4gICAgICogLSBEbyBub3QgbXV0YXRlIGV4aXN0aW5nIGxpZ2h0R2FsbGVyeSBpdGVtcyBkaXJlY3RseS5cclxuICAgICAqIC0gQWx3YXlzIHBhc3MgbmV3IGxpc3Qgb2YgZ2FsbGVyeSBpdGVtc1xyXG4gICAgICogLSBZb3UgbmVlZCB0byB0YWtlIGNhcmUgb2YgdGh1bWJuYWlscyBvdXRzaWRlIHRoZSBnYWxsZXJ5IGlmIGFueVxyXG4gICAgICogLSB1c2VyIHRoaXMgbWV0aG9kIG9ubHkgaWYgeW91IHdhbnQgdG8gdXBkYXRlIHNsaWRlcyB3aGVuIHRoZSBnYWxsZXJ5IGlzIG9wZW5lZC4gT3RoZXJ3aXNlLCB1c2UgYHJlZnJlc2goKWAgbWV0aG9kLlxyXG4gICAgICogQHBhcmFtIGl0ZW1zIEdhbGxlcnkgaXRlbXNcclxuICAgICAqIEBwYXJhbSBpbmRleCBBZnRlciB0aGUgdXBkYXRlIG9wZXJhdGlvbiwgd2hpY2ggc2xpZGUgZ2FsbGVyeSBzaG91bGQgbmF2aWdhdGUgdG9cclxuICAgICAqIEBjYXRlZ29yeSBsR1B1YmxpY01ldGhvZHNcclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKiBjb25zdCBwbHVnaW4gPSBsaWdodEdhbGxlcnkoKTtcclxuICAgICAqXHJcbiAgICAgKiAvLyBBZGRpbmcgc2xpZGVzIGR5bmFtaWNhbGx5XHJcbiAgICAgKiBsZXQgZ2FsbGVyeUl0ZW1zID0gW1xyXG4gICAgICogLy8gQWNjZXNzIGV4aXN0aW5nIGxpZ2h0R2FsbGVyeSBpdGVtc1xyXG4gICAgICogLy8gZ2FsbGVyeUl0ZW1zIGFyZSBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZCBpbnRlcm5hbGx5IGZyb20gdGhlIGdhbGxlcnkgSFRNTCBtYXJrdXBcclxuICAgICAqIC8vIG9yIGRpcmVjdGx5IGZyb20gZ2FsbGVyeUl0ZW1zIHdoZW4gZHluYW1pYyBnYWxsZXJ5IGlzIHVzZWRcclxuICAgICAqICAgLi4ucGx1Z2luLmdhbGxlcnlJdGVtcyxcclxuICAgICAqICAgICAuLi5bXHJcbiAgICAgKiAgICAgICB7XHJcbiAgICAgKiAgICAgICAgIHNyYzogJ2ltZy9pbWctMS5wbmcnLFxyXG4gICAgICogICAgICAgICAgIHRodW1iOiAnaW1nL3RodW1iMS5wbmcnLFxyXG4gICAgICogICAgICAgICB9LFxyXG4gICAgICogICAgIF0sXHJcbiAgICAgKiAgIF07XHJcbiAgICAgKiAgIHBsdWdpbi51cGRhdGVTbGlkZXMoXHJcbiAgICAgKiAgICAgZ2FsbGVyeUl0ZW1zLFxyXG4gICAgICogICAgIHBsdWdpbi5pbmRleCxcclxuICAgICAqICAgKTtcclxuICAgICAqXHJcbiAgICAgKlxyXG4gICAgICogLy8gUmVtb3ZlIHNsaWRlcyBkeW5hbWljYWxseVxyXG4gICAgICogZ2FsbGVyeUl0ZW1zID0gSlNPTi5wYXJzZShcclxuICAgICAqICAgSlNPTi5zdHJpbmdpZnkodXBkYXRlU2xpZGVJbnN0YW5jZS5nYWxsZXJ5SXRlbXMpLFxyXG4gICAgICogKTtcclxuICAgICAqIGdhbGxlcnlJdGVtcy5zaGlmdCgpO1xyXG4gICAgICogdXBkYXRlU2xpZGVJbnN0YW5jZS51cGRhdGVTbGlkZXMoZ2FsbGVyeUl0ZW1zLCAxKTtcclxuICAgICAqIEBzZWUgPGEgaHJlZj1cIi9kZW1vcy91cGRhdGUtc2xpZGVzL1wiPkRlbW88L2E+XHJcbiAgICAgKi9cclxuICAgIExpZ2h0R2FsbGVyeS5wcm90b3R5cGUudXBkYXRlU2xpZGVzID0gZnVuY3Rpb24gKGl0ZW1zLCBpbmRleCkge1xyXG4gICAgICAgIGlmICh0aGlzLmluZGV4ID4gaXRlbXMubGVuZ3RoIC0gMSkge1xyXG4gICAgICAgICAgICB0aGlzLmluZGV4ID0gaXRlbXMubGVuZ3RoIC0gMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGl0ZW1zLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICB0aGlzLmluZGV4ID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFpdGVtcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdGhpcy5jbG9zZUdhbGxlcnkoKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgY3VycmVudFNyYyA9IHRoaXMuZ2FsbGVyeUl0ZW1zW2luZGV4XS5zcmM7XHJcbiAgICAgICAgdGhpcy5nYWxsZXJ5SXRlbXMgPSBpdGVtcztcclxuICAgICAgICB0aGlzLnVwZGF0ZUNvbnRyb2xzKCk7XHJcbiAgICAgICAgdGhpcy4kaW5uZXIuZW1wdHkoKTtcclxuICAgICAgICB0aGlzLmN1cnJlbnRJdGVtc0luRG9tID0gW107XHJcbiAgICAgICAgdmFyIF9pbmRleCA9IDA7XHJcbiAgICAgICAgLy8gRmluZCB0aGUgY3VycmVudCBpbmRleCBiYXNlZCBvbiBzb3VyY2UgdmFsdWUgb2YgdGhlIHNsaWRlXHJcbiAgICAgICAgdGhpcy5nYWxsZXJ5SXRlbXMuc29tZShmdW5jdGlvbiAoZ2FsbGVyeUl0ZW0sIGl0ZW1JbmRleCkge1xyXG4gICAgICAgICAgICBpZiAoZ2FsbGVyeUl0ZW0uc3JjID09PSBjdXJyZW50U3JjKSB7XHJcbiAgICAgICAgICAgICAgICBfaW5kZXggPSBpdGVtSW5kZXg7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50SXRlbXNJbkRvbSA9IHRoaXMub3JnYW5pemVTbGlkZUl0ZW1zKF9pbmRleCwgLTEpO1xyXG4gICAgICAgIHRoaXMubG9hZENvbnRlbnQoX2luZGV4LCB0cnVlKTtcclxuICAgICAgICB0aGlzLmdldFNsaWRlSXRlbShfaW5kZXgpLmFkZENsYXNzKCdsZy1jdXJyZW50Jyk7XHJcbiAgICAgICAgdGhpcy5pbmRleCA9IF9pbmRleDtcclxuICAgICAgICB0aGlzLnVwZGF0ZUN1cnJlbnRDb3VudGVyKF9pbmRleCk7XHJcbiAgICAgICAgdGhpcy5MR2VsLnRyaWdnZXIobEdFdmVudHMudXBkYXRlU2xpZGVzKTtcclxuICAgIH07XHJcbiAgICAvLyBHZXQgZ2FsbGVyeSBpdGVtcyBiYXNlZCBvbiBtdWx0aXBsZSBjb25kaXRpb25zXHJcbiAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLmdldEl0ZW1zID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vIEdhbGxlcnkgaXRlbXNcclxuICAgICAgICB0aGlzLml0ZW1zID0gW107XHJcbiAgICAgICAgaWYgKCF0aGlzLnNldHRpbmdzLmR5bmFtaWMpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3Muc2VsZWN0b3IgPT09ICd0aGlzJykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pdGVtcy5wdXNoKHRoaXMuZWwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuc2V0dGluZ3Muc2VsZWN0b3IpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5zZXR0aW5ncy5zZWxlY3RvciA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5zZWxlY3RXaXRoaW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlbGVjdFdpdGhpbiA9ICRMRyh0aGlzLnNldHRpbmdzLnNlbGVjdFdpdGhpbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaXRlbXMgPSBzZWxlY3RXaXRoaW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5maW5kKHRoaXMuc2V0dGluZ3Muc2VsZWN0b3IpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZ2V0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLml0ZW1zID0gdGhpcy5lbC5xdWVyeVNlbGVjdG9yQWxsKHRoaXMuc2V0dGluZ3Muc2VsZWN0b3IpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXRlbXMgPSB0aGlzLnNldHRpbmdzLnNlbGVjdG9yO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pdGVtcyA9IHRoaXMuZWwuY2hpbGRyZW47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHV0aWxzLmdldER5bmFtaWNPcHRpb25zKHRoaXMuaXRlbXMsIHRoaXMuc2V0dGluZ3MuZXh0cmFQcm9wcywgdGhpcy5zZXR0aW5ncy5nZXRDYXB0aW9uRnJvbVRpdGxlT3JBbHQsIHRoaXMuc2V0dGluZ3MuZXhUaHVtYkltYWdlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNldHRpbmdzLmR5bmFtaWNFbCB8fCBbXTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS5zaG91bGRIaWRlU2Nyb2xsYmFyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiAodGhpcy5zZXR0aW5ncy5oaWRlU2Nyb2xsYmFyICYmXHJcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkgPT09IHRoaXMuc2V0dGluZ3MuY29udGFpbmVyKTtcclxuICAgIH07XHJcbiAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLmhpZGVTY3JvbGxiYXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnNob3VsZEhpZGVTY3JvbGxiYXIoKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuYm9keVBhZGRpbmdSaWdodCA9IHBhcnNlRmxvYXQoJExHKCdib2R5Jykuc3R5bGUoKS5wYWRkaW5nUmlnaHQpO1xyXG4gICAgICAgIHZhciBib2R5UmVjdCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICB2YXIgc2Nyb2xsYmFyV2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aCAtIGJvZHlSZWN0LndpZHRoO1xyXG4gICAgICAgICRMRyhkb2N1bWVudC5ib2R5KS5jc3MoJ3BhZGRpbmctcmlnaHQnLCBzY3JvbGxiYXJXaWR0aCArIHRoaXMuYm9keVBhZGRpbmdSaWdodCArICdweCcpO1xyXG4gICAgICAgICRMRyhkb2N1bWVudC5ib2R5KS5hZGRDbGFzcygnbGctb3ZlcmxheS1vcGVuJyk7XHJcbiAgICB9O1xyXG4gICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS5yZXNldFNjcm9sbEJhciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuc2hvdWxkSGlkZVNjcm9sbGJhcigpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgJExHKGRvY3VtZW50LmJvZHkpLmNzcygncGFkZGluZy1yaWdodCcsIHRoaXMuYm9keVBhZGRpbmdSaWdodCArICdweCcpO1xyXG4gICAgICAgICRMRyhkb2N1bWVudC5ib2R5KS5yZW1vdmVDbGFzcygnbGctb3ZlcmxheS1vcGVuJyk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBPcGVuIGxpZ2h0R2FsbGVyeS5cclxuICAgICAqIE9wZW4gZ2FsbGVyeSB3aXRoIHNwZWNpZmljIHNsaWRlIGJ5IHBhc3NpbmcgaW5kZXggb2YgdGhlIHNsaWRlIGFzIHBhcmFtZXRlci5cclxuICAgICAqIEBjYXRlZ29yeSBsR1B1YmxpY01ldGhvZHNcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBpbmRleCAgLSBpbmRleCBvZiB0aGUgc2xpZGVcclxuICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnQgLSBXaGljaCBpbWFnZSBsaWdodEdhbGxlcnkgc2hvdWxkIHpvb20gZnJvbVxyXG4gICAgICpcclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKiBjb25zdCAkZHluYW1pY0dhbGxlcnkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZHluYW1pYy1nYWxsZXJ5LWRlbW8nKTtcclxuICAgICAqIGNvbnN0IGR5bmFtaWNHYWxsZXJ5ID0gbGlnaHRHYWxsZXJ5KCRkeW5hbWljR2FsbGVyeSwge1xyXG4gICAgICogICAgIGR5bmFtaWM6IHRydWUsXHJcbiAgICAgKiAgICAgZHluYW1pY0VsOiBbXHJcbiAgICAgKiAgICAgICAgIHtcclxuICAgICAqICAgICAgICAgICAgICBzcmM6ICdpbWcvMS5qcGcnLFxyXG4gICAgICogICAgICAgICAgICAgIHRodW1iOiAnaW1nL3RodW1iLTEuanBnJyxcclxuICAgICAqICAgICAgICAgICAgICBzdWJIdG1sOiAnPGg0PkltYWdlIDEgdGl0bGU8L2g0PjxwPkltYWdlIDEgZGVzY3JpcHRpb25zLjwvcD4nLFxyXG4gICAgICogICAgICAgICB9LFxyXG4gICAgICogICAgICAgICAuLi5cclxuICAgICAqICAgICBdLFxyXG4gICAgICogfSk7XHJcbiAgICAgKiAkZHluYW1pY0dhbGxlcnkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgKiAgICAgLy8gU3RhcnRzIHdpdGggdGhpcmQgaXRlbS4oT3B0aW9uYWwpLlxyXG4gICAgICogICAgIC8vIFRoaXMgaXMgdXNlZnVsIGlmIHlvdSB3YW50IHVzZSBkeW5hbWljIG1vZGUgd2l0aFxyXG4gICAgICogICAgIC8vIGN1c3RvbSB0aHVtYm5haWxzICh0aHVtYm5haWxzIG91dHNpZGUgZ2FsbGVyeSksXHJcbiAgICAgKiAgICAgZHluYW1pY0dhbGxlcnkub3BlbkdhbGxlcnkoMik7XHJcbiAgICAgKiB9KTtcclxuICAgICAqXHJcbiAgICAgKi9cclxuICAgIExpZ2h0R2FsbGVyeS5wcm90b3R5cGUub3BlbkdhbGxlcnkgPSBmdW5jdGlvbiAoaW5kZXgsIGVsZW1lbnQpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGlmIChpbmRleCA9PT0gdm9pZCAwKSB7IGluZGV4ID0gdGhpcy5zZXR0aW5ncy5pbmRleDsgfVxyXG4gICAgICAgIC8vIHByZXZlbnQgYWNjaWRlbnRhbCBkb3VibGUgZXhlY3V0aW9uXHJcbiAgICAgICAgaWYgKHRoaXMubGdPcGVuZWQpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB0aGlzLmxnT3BlbmVkID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLm91dGVyLnJlbW92ZUNsYXNzKCdsZy1oaWRlLWl0ZW1zJyk7XHJcbiAgICAgICAgdGhpcy5oaWRlU2Nyb2xsYmFyKCk7XHJcbiAgICAgICAgLy8gQWRkIGRpc3BsYXkgYmxvY2ssIGJ1dCBzdGlsbCBoYXMgb3BhY2l0eSAwXHJcbiAgICAgICAgdGhpcy4kY29udGFpbmVyLmFkZENsYXNzKCdsZy1zaG93Jyk7XHJcbiAgICAgICAgdmFyIGl0ZW1zVG9CZUluc2VydGVkVG9Eb20gPSB0aGlzLmdldEl0ZW1zVG9CZUluc2VydGVkVG9Eb20oaW5kZXgsIGluZGV4KTtcclxuICAgICAgICB0aGlzLmN1cnJlbnRJdGVtc0luRG9tID0gaXRlbXNUb0JlSW5zZXJ0ZWRUb0RvbTtcclxuICAgICAgICB2YXIgaXRlbXMgPSAnJztcclxuICAgICAgICBpdGVtc1RvQmVJbnNlcnRlZFRvRG9tLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICAgICAgaXRlbXMgPSBpdGVtcyArIChcIjxkaXYgaWQ9XFxcIlwiICsgaXRlbSArIFwiXFxcIiBjbGFzcz1cXFwibGctaXRlbVxcXCI+PC9kaXY+XCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuJGlubmVyLmFwcGVuZChpdGVtcyk7XHJcbiAgICAgICAgdGhpcy5hZGRIdG1sKGluZGV4KTtcclxuICAgICAgICB2YXIgdHJhbnNmb3JtID0gJyc7XHJcbiAgICAgICAgdGhpcy5tZWRpYUNvbnRhaW5lclBvc2l0aW9uID0gdGhpcy5nZXRNZWRpYUNvbnRhaW5lclBvc2l0aW9uKCk7XHJcbiAgICAgICAgdmFyIF9hID0gdGhpcy5tZWRpYUNvbnRhaW5lclBvc2l0aW9uLCB0b3AgPSBfYS50b3AsIGJvdHRvbSA9IF9hLmJvdHRvbTtcclxuICAgICAgICBpZiAoIXRoaXMuc2V0dGluZ3MuYWxsb3dNZWRpYU92ZXJsYXApIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRNZWRpYUNvbnRhaW5lclBvc2l0aW9uKHRvcCwgYm90dG9tKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIF9fc2xpZGVWaWRlb0luZm8gPSB0aGlzLmdhbGxlcnlJdGVtc1tpbmRleF0uX19zbGlkZVZpZGVvSW5mbztcclxuICAgICAgICBpZiAodGhpcy56b29tRnJvbU9yaWdpbiAmJiBlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudEltYWdlU2l6ZSA9IHV0aWxzLmdldFNpemUoZWxlbWVudCwgdGhpcy5vdXRlciwgdG9wICsgYm90dG9tLCBfX3NsaWRlVmlkZW9JbmZvICYmIHRoaXMuc2V0dGluZ3MudmlkZW9NYXhTaXplKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtID0gdXRpbHMuZ2V0VHJhbnNmb3JtKGVsZW1lbnQsIHRoaXMub3V0ZXIsIHRvcCwgYm90dG9tLCB0aGlzLmN1cnJlbnRJbWFnZVNpemUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXRoaXMuem9vbUZyb21PcmlnaW4gfHwgIXRyYW5zZm9ybSkge1xyXG4gICAgICAgICAgICB0aGlzLm91dGVyLmFkZENsYXNzKHRoaXMuc2V0dGluZ3Muc3RhcnRDbGFzcyk7XHJcbiAgICAgICAgICAgIHRoaXMuZ2V0U2xpZGVJdGVtKGluZGV4KS5yZW1vdmVDbGFzcygnbGctY29tcGxldGUnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHRpbWVvdXQgPSB0aGlzLnNldHRpbmdzLnpvb21Gcm9tT3JpZ2luXHJcbiAgICAgICAgICAgID8gMTAwXHJcbiAgICAgICAgICAgIDogdGhpcy5zZXR0aW5ncy5iYWNrZHJvcER1cmF0aW9uO1xyXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBfdGhpcy5vdXRlci5hZGRDbGFzcygnbGctY29tcG9uZW50cy1vcGVuJyk7XHJcbiAgICAgICAgfSwgdGltZW91dCk7XHJcbiAgICAgICAgdGhpcy5pbmRleCA9IGluZGV4O1xyXG4gICAgICAgIHRoaXMuTEdlbC50cmlnZ2VyKGxHRXZlbnRzLmJlZm9yZU9wZW4pO1xyXG4gICAgICAgIC8vIGFkZCBjbGFzcyBsZy1jdXJyZW50IHRvIHJlbW92ZSBpbml0aWFsIHRyYW5zaXRpb25cclxuICAgICAgICB0aGlzLmdldFNsaWRlSXRlbShpbmRleCkuYWRkQ2xhc3MoJ2xnLWN1cnJlbnQnKTtcclxuICAgICAgICB0aGlzLmxHYWxsZXJ5T24gPSBmYWxzZTtcclxuICAgICAgICAvLyBTdG9yZSB0aGUgY3VycmVudCBzY3JvbGwgdG9wIHZhbHVlIHRvIHNjcm9sbCBiYWNrIGFmdGVyIGNsb3NpbmcgdGhlIGdhbGxlcnkuLlxyXG4gICAgICAgIHRoaXMucHJldlNjcm9sbFRvcCA9ICRMRyh3aW5kb3cpLnNjcm9sbFRvcCgpO1xyXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAvLyBOZWVkIHRvIGNoZWNrIGJvdGggem9vbUZyb21PcmlnaW4gYW5kIHRyYW5zZm9ybSB2YWx1ZXMgYXMgd2UgbmVlZCB0byBzZXQgc2V0IHRoZVxyXG4gICAgICAgICAgICAvLyBkZWZhdWx0IG9wZW5pbmcgYW5pbWF0aW9uIGlmIHVzZXIgbWlzc2VkIHRvIGFkZCB0aGUgbGctc2l6ZSBhdHRyaWJ1dGVcclxuICAgICAgICAgICAgaWYgKF90aGlzLnpvb21Gcm9tT3JpZ2luICYmIHRyYW5zZm9ybSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRTbGlkZV8xID0gX3RoaXMuZ2V0U2xpZGVJdGVtKGluZGV4KTtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnRTbGlkZV8xLmNzcygndHJhbnNmb3JtJywgdHJhbnNmb3JtKTtcclxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRTbGlkZV8xXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnbGctc3RhcnQtcHJvZ3Jlc3MgbGctc3RhcnQtZW5kLXByb2dyZXNzJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmNzcygndHJhbnNpdGlvbi1kdXJhdGlvbicsIF90aGlzLnNldHRpbmdzLnN0YXJ0QW5pbWF0aW9uRHVyYXRpb24gKyAnbXMnKTtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5vdXRlci5hZGRDbGFzcygnbGctem9vbS1mcm9tLWltYWdlJyk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRTbGlkZV8xLmNzcygndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZTNkKDAsIDAsIDApJyk7XHJcbiAgICAgICAgICAgICAgICB9LCAxMDApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuJGJhY2tkcm9wLmFkZENsYXNzKCdpbicpO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuJGNvbnRhaW5lci5hZGRDbGFzcygnbGctc2hvdy1pbicpO1xyXG4gICAgICAgICAgICB9LCAxMCk7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLnNldHRpbmdzLnRyYXBGb2N1cyAmJlxyXG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkgPT09IF90aGlzLnNldHRpbmdzLmNvbnRhaW5lcikge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnRyYXBGb2N1cygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCBfdGhpcy5zZXR0aW5ncy5iYWNrZHJvcER1cmF0aW9uICsgNTApO1xyXG4gICAgICAgICAgICAvLyBsZy12aXNpYmxlIGNsYXNzIHJlc2V0cyBnYWxsZXJ5IG9wYWNpdHkgdG8gMVxyXG4gICAgICAgICAgICBpZiAoIV90aGlzLnpvb21Gcm9tT3JpZ2luIHx8ICF0cmFuc2Zvcm0pIHtcclxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLm91dGVyLmFkZENsYXNzKCdsZy12aXNpYmxlJyk7XHJcbiAgICAgICAgICAgICAgICB9LCBfdGhpcy5zZXR0aW5ncy5iYWNrZHJvcER1cmF0aW9uKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBpbml0aWF0ZSBzbGlkZSBmdW5jdGlvblxyXG4gICAgICAgICAgICBfdGhpcy5zbGlkZShpbmRleCwgZmFsc2UsIGZhbHNlLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIF90aGlzLkxHZWwudHJpZ2dlcihsR0V2ZW50cy5hZnRlck9wZW4pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmIChkb2N1bWVudC5ib2R5ID09PSB0aGlzLnNldHRpbmdzLmNvbnRhaW5lcikge1xyXG4gICAgICAgICAgICAkTEcoJ2h0bWwnKS5hZGRDbGFzcygnbGctb24nKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBOb3RlIC0gQ2hhbmdpbmcgdGhlIHBvc2l0aW9uIG9mIHRoZSBtZWRpYSBvbiBldmVyeSBzbGlkZSB0cmFuc2l0aW9uIGNyZWF0ZXMgYSBmbGlja2VyaW5nIGVmZmVjdC5cclxuICAgICAqIFRoZXJlZm9yZSzCoFRoZSBoZWlnaHQgb2YgdGhlIGNhcHRpb24gaXMgY2FsY3VsYXRlZCBkeW5hbWljYWxseSwgb25seSBvbmNlIGJhc2VkIG9uIHRoZSBmaXJzdCBzbGlkZSBjYXB0aW9uLlxyXG4gICAgICogaWYgeW91IGhhdmUgZHluYW1pYyBjYXB0aW9ucyBmb3IgZWFjaCBtZWRpYSxcclxuICAgICAqIHlvdSBjYW4gcHJvdmlkZSBhbiBhcHByb3ByaWF0ZSBoZWlnaHQgZm9yIHRoZSBjYXB0aW9ucyB2aWEgYWxsb3dNZWRpYU92ZXJsYXAgb3B0aW9uXHJcbiAgICAgKi9cclxuICAgIExpZ2h0R2FsbGVyeS5wcm90b3R5cGUuZ2V0TWVkaWFDb250YWluZXJQb3NpdGlvbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5hbGxvd01lZGlhT3ZlcmxhcCkge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgdG9wOiAwLFxyXG4gICAgICAgICAgICAgICAgYm90dG9tOiAwLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgdG9wID0gdGhpcy4kdG9vbGJhci5nZXQoKS5jbGllbnRIZWlnaHQgfHwgMDtcclxuICAgICAgICB2YXIgc3ViSHRtbCA9IHRoaXMub3V0ZXIuZmluZCgnLmxnLWNvbXBvbmVudHMgLmxnLXN1Yi1odG1sJykuZ2V0KCk7XHJcbiAgICAgICAgdmFyIGNhcHRpb25IZWlnaHQgPSB0aGlzLnNldHRpbmdzLmRlZmF1bHRDYXB0aW9uSGVpZ2h0IHx8XHJcbiAgICAgICAgICAgIChzdWJIdG1sICYmIHN1Ykh0bWwuY2xpZW50SGVpZ2h0KSB8fFxyXG4gICAgICAgICAgICAwO1xyXG4gICAgICAgIHZhciB0aHVtYkNvbnRhaW5lciA9IHRoaXMub3V0ZXIuZmluZCgnLmxnLXRodW1iLW91dGVyJykuZ2V0KCk7XHJcbiAgICAgICAgdmFyIHRodW1iSGVpZ2h0ID0gdGh1bWJDb250YWluZXIgPyB0aHVtYkNvbnRhaW5lci5jbGllbnRIZWlnaHQgOiAwO1xyXG4gICAgICAgIHZhciBib3R0b20gPSB0aHVtYkhlaWdodCArIGNhcHRpb25IZWlnaHQ7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdG9wOiB0b3AsXHJcbiAgICAgICAgICAgIGJvdHRvbTogYm90dG9tLFxyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG4gICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS5zZXRNZWRpYUNvbnRhaW5lclBvc2l0aW9uID0gZnVuY3Rpb24gKHRvcCwgYm90dG9tKSB7XHJcbiAgICAgICAgaWYgKHRvcCA9PT0gdm9pZCAwKSB7IHRvcCA9IDA7IH1cclxuICAgICAgICBpZiAoYm90dG9tID09PSB2b2lkIDApIHsgYm90dG9tID0gMDsgfVxyXG4gICAgICAgIHRoaXMuJGNvbnRlbnQuY3NzKCd0b3AnLCB0b3AgKyAncHgnKS5jc3MoJ2JvdHRvbScsIGJvdHRvbSArICdweCcpO1xyXG4gICAgfTtcclxuICAgIExpZ2h0R2FsbGVyeS5wcm90b3R5cGUuaGlkZUJhcnMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAvLyBIaWRlIGNvbnRyb2xsZXJzIGlmIG1vdXNlIGRvZXNuJ3QgbW92ZSBmb3Igc29tZSBwZXJpb2RcclxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgX3RoaXMub3V0ZXIucmVtb3ZlQ2xhc3MoJ2xnLWhpZGUtaXRlbXMnKTtcclxuICAgICAgICAgICAgaWYgKF90aGlzLnNldHRpbmdzLmhpZGVCYXJzRGVsYXkgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5vdXRlci5vbignbW91c2Vtb3ZlLmxnIGNsaWNrLmxnIHRvdWNoc3RhcnQubGcnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMub3V0ZXIucmVtb3ZlQ2xhc3MoJ2xnLWhpZGUtaXRlbXMnKTtcclxuICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoX3RoaXMuaGlkZUJhclRpbWVvdXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFRpbWVvdXQgd2lsbCBiZSBjbGVhcmVkIG9uIGVhY2ggc2xpZGUgbW92ZW1lbnQgYWxzb1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmhpZGVCYXJUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLm91dGVyLmFkZENsYXNzKCdsZy1oaWRlLWl0ZW1zJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgX3RoaXMuc2V0dGluZ3MuaGlkZUJhcnNEZWxheSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIF90aGlzLm91dGVyLnRyaWdnZXIoJ21vdXNlbW92ZS5sZycpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgdGhpcy5zZXR0aW5ncy5zaG93QmFyc0FmdGVyKTtcclxuICAgIH07XHJcbiAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLmluaXRQaWN0dXJlRmlsbCA9IGZ1bmN0aW9uICgkaW1nKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3Muc3VwcG9ydExlZ2FjeUJyb3dzZXIpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIHBpY3R1cmVmaWxsKHtcclxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50czogWyRpbWcuZ2V0KCldLFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignbGlnaHRHYWxsZXJ5IDotIElmIHlvdSB3YW50IHNyY3NldCBvciBwaWN0dXJlIHRhZyB0byBiZSBzdXBwb3J0ZWQgZm9yIG9sZGVyIGJyb3dzZXIgcGxlYXNlIGluY2x1ZGUgcGljdHVyZWZpbCBqYXZhc2NyaXB0IGxpYnJhcnkgaW4geW91ciBkb2N1bWVudC4nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqICBAZGVzYyBDcmVhdGUgaW1hZ2UgY291bnRlclxyXG4gICAgICogIEV4OiAxLzEwXHJcbiAgICAgKi9cclxuICAgIExpZ2h0R2FsbGVyeS5wcm90b3R5cGUuY291bnRlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5jb3VudGVyKSB7XHJcbiAgICAgICAgICAgIHZhciBjb3VudGVySHRtbCA9IFwiPGRpdiBjbGFzcz1cXFwibGctY291bnRlclxcXCIgcm9sZT1cXFwic3RhdHVzXFxcIiBhcmlhLWxpdmU9XFxcInBvbGl0ZVxcXCI+XFxuICAgICAgICAgICAgICAgIDxzcGFuIGlkPVxcXCJcIiArIHRoaXMuZ2V0SWROYW1lKCdsZy1jb3VudGVyLWN1cnJlbnQnKSArIFwiXFxcIiBjbGFzcz1cXFwibGctY291bnRlci1jdXJyZW50XFxcIj5cIiArICh0aGlzLmluZGV4ICsgMSkgKyBcIiA8L3NwYW4+IC9cXG4gICAgICAgICAgICAgICAgPHNwYW4gaWQ9XFxcIlwiICsgdGhpcy5nZXRJZE5hbWUoJ2xnLWNvdW50ZXItYWxsJykgKyBcIlxcXCIgY2xhc3M9XFxcImxnLWNvdW50ZXItYWxsXFxcIj5cIiArIHRoaXMuZ2FsbGVyeUl0ZW1zLmxlbmd0aCArIFwiIDwvc3Bhbj48L2Rpdj5cIjtcclxuICAgICAgICAgICAgdGhpcy5vdXRlci5maW5kKHRoaXMuc2V0dGluZ3MuYXBwZW5kQ291bnRlclRvKS5hcHBlbmQoY291bnRlckh0bWwpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqICBAZGVzYyBhZGQgc3ViLWh0bWwgaW50byB0aGUgc2xpZGVcclxuICAgICAqICBAcGFyYW0ge051bWJlcn0gaW5kZXggLSBpbmRleCBvZiB0aGUgc2xpZGVcclxuICAgICAqL1xyXG4gICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS5hZGRIdG1sID0gZnVuY3Rpb24gKGluZGV4KSB7XHJcbiAgICAgICAgdmFyIHN1Ykh0bWw7XHJcbiAgICAgICAgdmFyIHN1Ykh0bWxVcmw7XHJcbiAgICAgICAgaWYgKHRoaXMuZ2FsbGVyeUl0ZW1zW2luZGV4XS5zdWJIdG1sVXJsKSB7XHJcbiAgICAgICAgICAgIHN1Ykh0bWxVcmwgPSB0aGlzLmdhbGxlcnlJdGVtc1tpbmRleF0uc3ViSHRtbFVybDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHN1Ykh0bWwgPSB0aGlzLmdhbGxlcnlJdGVtc1tpbmRleF0uc3ViSHRtbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFzdWJIdG1sVXJsKSB7XHJcbiAgICAgICAgICAgIGlmIChzdWJIdG1sKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBnZXQgZmlyc3QgbGV0dGVyIG9mIHN1Yi1odG1sXHJcbiAgICAgICAgICAgICAgICAvLyBpZiBmaXJzdCBsZXR0ZXIgc3RhcnRzIHdpdGggLiBvciAjIGdldCB0aGUgaHRtbCBmb3JtIHRoZSBqUXVlcnkgb2JqZWN0XHJcbiAgICAgICAgICAgICAgICB2YXIgZkwgPSBzdWJIdG1sLnN1YnN0cmluZygwLCAxKTtcclxuICAgICAgICAgICAgICAgIGlmIChmTCA9PT0gJy4nIHx8IGZMID09PSAnIycpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5zdWJIdG1sU2VsZWN0b3JSZWxhdGl2ZSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAhdGhpcy5zZXR0aW5ncy5keW5hbWljKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Ykh0bWwgPSAkTEcodGhpcy5pdGVtcylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5lcShpbmRleClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5maW5kKHN1Ykh0bWwpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmlyc3QoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmh0bWwoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Ykh0bWwgPSAkTEcoc3ViSHRtbCkuZmlyc3QoKS5odG1sKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgc3ViSHRtbCA9ICcnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmFwcGVuZFN1Ykh0bWxUbyAhPT0gJy5sZy1pdGVtJykge1xyXG4gICAgICAgICAgICBpZiAoc3ViSHRtbFVybCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vdXRlci5maW5kKCcubGctc3ViLWh0bWwnKS5sb2FkKHN1Ykh0bWxVcmwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vdXRlci5maW5kKCcubGctc3ViLWh0bWwnKS5odG1sKHN1Ykh0bWwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgY3VycmVudFNsaWRlID0gJExHKHRoaXMuZ2V0U2xpZGVJdGVtSWQoaW5kZXgpKTtcclxuICAgICAgICAgICAgaWYgKHN1Ykh0bWxVcmwpIHtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnRTbGlkZS5sb2FkKHN1Ykh0bWxVcmwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY3VycmVudFNsaWRlLmFwcGVuZChcIjxkaXYgY2xhc3M9XFxcImxnLXN1Yi1odG1sXFxcIj5cIiArIHN1Ykh0bWwgKyBcIjwvZGl2PlwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBBZGQgbGctZW1wdHktaHRtbCBjbGFzcyBpZiB0aXRsZSBkb2Vzbid0IGV4aXN0XHJcbiAgICAgICAgaWYgKHR5cGVvZiBzdWJIdG1sICE9PSAndW5kZWZpbmVkJyAmJiBzdWJIdG1sICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGlmIChzdWJIdG1sID09PSAnJykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vdXRlclxyXG4gICAgICAgICAgICAgICAgICAgIC5maW5kKHRoaXMuc2V0dGluZ3MuYXBwZW5kU3ViSHRtbFRvKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnbGctZW1wdHktaHRtbCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vdXRlclxyXG4gICAgICAgICAgICAgICAgICAgIC5maW5kKHRoaXMuc2V0dGluZ3MuYXBwZW5kU3ViSHRtbFRvKVxyXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnbGctZW1wdHktaHRtbCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuTEdlbC50cmlnZ2VyKGxHRXZlbnRzLmFmdGVyQXBwZW5kU3ViSHRtbCwge1xyXG4gICAgICAgICAgICBpbmRleDogaW5kZXgsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiAgQGRlc2MgUHJlbG9hZCBzbGlkZXNcclxuICAgICAqICBAcGFyYW0ge051bWJlcn0gaW5kZXggLSBpbmRleCBvZiB0aGUgc2xpZGVcclxuICAgICAqIEB0b2RvIHByZWxvYWQgbm90IHdvcmtpbmcgZm9yIHRoZSBmaXJzdCBzbGlkZSwgQWxzbywgc2hvdWxkIHdvcmsgZm9yIHRoZSBmaXJzdCBhbmQgbGFzdCBzbGlkZSBhcyB3ZWxsXHJcbiAgICAgKi9cclxuICAgIExpZ2h0R2FsbGVyeS5wcm90b3R5cGUucHJlbG9hZCA9IGZ1bmN0aW9uIChpbmRleCkge1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDw9IHRoaXMuc2V0dGluZ3MucHJlbG9hZDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChpID49IHRoaXMuZ2FsbGVyeUl0ZW1zLmxlbmd0aCAtIGluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmxvYWRDb250ZW50KGluZGV4ICsgaSwgZmFsc2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKHZhciBqID0gMTsgaiA8PSB0aGlzLnNldHRpbmdzLnByZWxvYWQ7IGorKykge1xyXG4gICAgICAgICAgICBpZiAoaW5kZXggLSBqIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5sb2FkQ29udGVudChpbmRleCAtIGosIGZhbHNlKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS5nZXREdW1teUltZ1N0eWxlcyA9IGZ1bmN0aW9uIChpbWFnZVNpemUpIHtcclxuICAgICAgICBpZiAoIWltYWdlU2l6ZSlcclxuICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgIHJldHVybiBcIndpZHRoOlwiICsgaW1hZ2VTaXplLndpZHRoICsgXCJweDtcXG4gICAgICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IC1cIiArIGltYWdlU2l6ZS53aWR0aCAvIDIgKyBcInB4O1xcbiAgICAgICAgICAgICAgICBtYXJnaW4tdG9wOiAtXCIgKyBpbWFnZVNpemUuaGVpZ2h0IC8gMiArIFwicHg7XFxuICAgICAgICAgICAgICAgIGhlaWdodDpcIiArIGltYWdlU2l6ZS5oZWlnaHQgKyBcInB4XCI7XHJcbiAgICB9O1xyXG4gICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS5nZXRWaWRlb0NvbnRTdHlsZSA9IGZ1bmN0aW9uIChpbWFnZVNpemUpIHtcclxuICAgICAgICBpZiAoIWltYWdlU2l6ZSlcclxuICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgIHJldHVybiBcIndpZHRoOlwiICsgaW1hZ2VTaXplLndpZHRoICsgXCJweDtcXG4gICAgICAgICAgICAgICAgaGVpZ2h0OlwiICsgaW1hZ2VTaXplLmhlaWdodCArIFwicHhcIjtcclxuICAgIH07XHJcbiAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLmdldER1bW15SW1hZ2VDb250ZW50ID0gZnVuY3Rpb24gKCRjdXJyZW50U2xpZGUsIGluZGV4LCBhbHQpIHtcclxuICAgICAgICB2YXIgJGN1cnJlbnRJdGVtO1xyXG4gICAgICAgIGlmICghdGhpcy5zZXR0aW5ncy5keW5hbWljKSB7XHJcbiAgICAgICAgICAgICRjdXJyZW50SXRlbSA9ICRMRyh0aGlzLml0ZW1zKS5lcShpbmRleCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICgkY3VycmVudEl0ZW0pIHtcclxuICAgICAgICAgICAgdmFyIF9kdW1teUltZ1NyYyA9IHZvaWQgMDtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLnNldHRpbmdzLmV4VGh1bWJJbWFnZSkge1xyXG4gICAgICAgICAgICAgICAgX2R1bW15SW1nU3JjID0gJGN1cnJlbnRJdGVtLmZpbmQoJ2ltZycpLmZpcnN0KCkuYXR0cignc3JjJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBfZHVtbXlJbWdTcmMgPSAkY3VycmVudEl0ZW0uYXR0cih0aGlzLnNldHRpbmdzLmV4VGh1bWJJbWFnZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCFfZHVtbXlJbWdTcmMpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgICAgIHZhciBpbWdTdHlsZSA9IHRoaXMuZ2V0RHVtbXlJbWdTdHlsZXModGhpcy5jdXJyZW50SW1hZ2VTaXplKTtcclxuICAgICAgICAgICAgdmFyIGR1bW15SW1nQ29udGVudCA9IFwiPGltZyBcIiArIGFsdCArIFwiIHN0eWxlPVxcXCJcIiArIGltZ1N0eWxlICsgXCJcXFwiIGNsYXNzPVxcXCJsZy1kdW1teS1pbWdcXFwiIHNyYz1cXFwiXCIgKyBfZHVtbXlJbWdTcmMgKyBcIlxcXCIgLz5cIjtcclxuICAgICAgICAgICAgJGN1cnJlbnRTbGlkZS5hZGRDbGFzcygnbGctZmlyc3Qtc2xpZGUnKTtcclxuICAgICAgICAgICAgdGhpcy5vdXRlci5hZGRDbGFzcygnbGctZmlyc3Qtc2xpZGUtbG9hZGluZycpO1xyXG4gICAgICAgICAgICByZXR1cm4gZHVtbXlJbWdDb250ZW50O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gJyc7XHJcbiAgICB9O1xyXG4gICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS5zZXRJbWdNYXJrdXAgPSBmdW5jdGlvbiAoc3JjLCAkY3VycmVudFNsaWRlLCBpbmRleCkge1xyXG4gICAgICAgIHZhciBjdXJyZW50R2FsbGVyeUl0ZW0gPSB0aGlzLmdhbGxlcnlJdGVtc1tpbmRleF07XHJcbiAgICAgICAgdmFyIGFsdCA9IGN1cnJlbnRHYWxsZXJ5SXRlbS5hbHQsIHNyY3NldCA9IGN1cnJlbnRHYWxsZXJ5SXRlbS5zcmNzZXQsIHNpemVzID0gY3VycmVudEdhbGxlcnlJdGVtLnNpemVzLCBzb3VyY2VzID0gY3VycmVudEdhbGxlcnlJdGVtLnNvdXJjZXM7XHJcbiAgICAgICAgLy8gVXNlIHRoZSB0aHVtYm5haWwgYXMgZHVtbXkgaW1hZ2Ugd2hpY2ggd2lsbCBiZSByZXNpemVkIHRvIGFjdHVhbCBpbWFnZSBzaXplIGFuZFxyXG4gICAgICAgIC8vIGRpc3BsYXllZCBvbiB0b3Agb2YgYWN0dWFsIGltYWdlXHJcbiAgICAgICAgdmFyIGltZ0NvbnRlbnQgPSAnJztcclxuICAgICAgICB2YXIgYWx0QXR0ciA9IGFsdCA/ICdhbHQ9XCInICsgYWx0ICsgJ1wiJyA6ICcnO1xyXG4gICAgICAgIGlmICh0aGlzLmlzRmlyc3RTbGlkZVdpdGhab29tQW5pbWF0aW9uKCkpIHtcclxuICAgICAgICAgICAgaW1nQ29udGVudCA9IHRoaXMuZ2V0RHVtbXlJbWFnZUNvbnRlbnQoJGN1cnJlbnRTbGlkZSwgaW5kZXgsIGFsdEF0dHIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaW1nQ29udGVudCA9IHV0aWxzLmdldEltZ01hcmt1cChpbmRleCwgc3JjLCBhbHRBdHRyLCBzcmNzZXQsIHNpemVzLCBzb3VyY2VzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGltZ01hcmt1cCA9IFwiPHBpY3R1cmUgY2xhc3M9XFxcImxnLWltZy13cmFwXFxcIj4gXCIgKyBpbWdDb250ZW50ICsgXCI8L3BpY3R1cmU+XCI7XHJcbiAgICAgICAgJGN1cnJlbnRTbGlkZS5wcmVwZW5kKGltZ01hcmt1cCk7XHJcbiAgICB9O1xyXG4gICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS5vblNsaWRlT2JqZWN0TG9hZCA9IGZ1bmN0aW9uICgkc2xpZGUsIGlzSFRNTDVWaWRlb1dpdGhvdXRQb3N0ZXIsIG9uTG9hZCwgb25FcnJvcikge1xyXG4gICAgICAgIHZhciBtZWRpYU9iamVjdCA9ICRzbGlkZS5maW5kKCcubGctb2JqZWN0JykuZmlyc3QoKTtcclxuICAgICAgICBpZiAodXRpbHMuaXNJbWFnZUxvYWRlZChtZWRpYU9iamVjdC5nZXQoKSkgfHxcclxuICAgICAgICAgICAgaXNIVE1MNVZpZGVvV2l0aG91dFBvc3Rlcikge1xyXG4gICAgICAgICAgICBvbkxvYWQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIG1lZGlhT2JqZWN0Lm9uKCdsb2FkLmxnIGVycm9yLmxnJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgb25Mb2FkICYmIG9uTG9hZCgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgbWVkaWFPYmplY3Qub24oJ2Vycm9yLmxnJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgb25FcnJvciAmJiBvbkVycm9yKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gJGVsIEN1cnJlbnQgc2xpZGUgaXRlbVxyXG4gICAgICogQHBhcmFtIGluZGV4XHJcbiAgICAgKiBAcGFyYW0gZGVsYXkgRGVsYXkgaXMgMCBleGNlcHQgZmlyc3QgdGltZVxyXG4gICAgICogQHBhcmFtIHNwZWVkIFNwZWVkIGlzIHNhbWUgYXMgZGVsYXksIGV4Y2VwdCBpdCBpcyAwIGlmIGdhbGxlcnkgaXMgb3BlbmVkIHZpYSBoYXNoIHBsdWdpblxyXG4gICAgICogQHBhcmFtIGlzRmlyc3RTbGlkZVxyXG4gICAgICovXHJcbiAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLm9uTGdPYmplY3RMb2FkID0gZnVuY3Rpb24gKGN1cnJlbnRTbGlkZSwgaW5kZXgsIGRlbGF5LCBzcGVlZCwgaXNGaXJzdFNsaWRlLCBpc0hUTUw1VmlkZW9XaXRob3V0UG9zdGVyKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLm9uU2xpZGVPYmplY3RMb2FkKGN1cnJlbnRTbGlkZSwgaXNIVE1MNVZpZGVvV2l0aG91dFBvc3RlciwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBfdGhpcy50cmlnZ2VyU2xpZGVJdGVtTG9hZChjdXJyZW50U2xpZGUsIGluZGV4LCBkZWxheSwgc3BlZWQsIGlzRmlyc3RTbGlkZSk7XHJcbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBjdXJyZW50U2xpZGUuYWRkQ2xhc3MoJ2xnLWNvbXBsZXRlIGxnLWNvbXBsZXRlXycpO1xyXG4gICAgICAgICAgICBjdXJyZW50U2xpZGUuaHRtbCgnPHNwYW4gY2xhc3M9XCJsZy1lcnJvci1tc2dcIj4nICtcclxuICAgICAgICAgICAgICAgIF90aGlzLnNldHRpbmdzLnN0cmluZ3NbJ21lZGlhTG9hZGluZ0ZhaWxlZCddICtcclxuICAgICAgICAgICAgICAgICc8L3NwYW4+Jyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS50cmlnZ2VyU2xpZGVJdGVtTG9hZCA9IGZ1bmN0aW9uICgkY3VycmVudFNsaWRlLCBpbmRleCwgZGVsYXksIHNwZWVkLCBpc0ZpcnN0U2xpZGUpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBjdXJyZW50R2FsbGVyeUl0ZW0gPSB0aGlzLmdhbGxlcnlJdGVtc1tpbmRleF07XHJcbiAgICAgICAgLy8gQWRkaW5nIGRlbGF5IGZvciB2aWRlbyBzbGlkZXMgd2l0aG91dCBwb3N0ZXIgZm9yIGJldHRlciBwZXJmb3JtYW5jZSBhbmQgdXNlciBleHBlcmllbmNlXHJcbiAgICAgICAgLy8gVmlkZW9zIHNob3VsZCBzdGFydCBwbGF5aW5nIG9uY2Ugb25jZSB0aGUgZ2FsbGVyeSBpcyBjb21wbGV0ZWx5IGxvYWRlZFxyXG4gICAgICAgIHZhciBfc3BlZWQgPSBpc0ZpcnN0U2xpZGUgJiZcclxuICAgICAgICAgICAgdGhpcy5nZXRTbGlkZVR5cGUoY3VycmVudEdhbGxlcnlJdGVtKSA9PT0gJ3ZpZGVvJyAmJlxyXG4gICAgICAgICAgICAhY3VycmVudEdhbGxlcnlJdGVtLnBvc3RlclxyXG4gICAgICAgICAgICA/IHNwZWVkXHJcbiAgICAgICAgICAgIDogMDtcclxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgJGN1cnJlbnRTbGlkZS5hZGRDbGFzcygnbGctY29tcGxldGUgbGctY29tcGxldGVfJyk7XHJcbiAgICAgICAgICAgIF90aGlzLkxHZWwudHJpZ2dlcihsR0V2ZW50cy5zbGlkZUl0ZW1Mb2FkLCB7XHJcbiAgICAgICAgICAgICAgICBpbmRleDogaW5kZXgsXHJcbiAgICAgICAgICAgICAgICBkZWxheTogZGVsYXkgfHwgMCxcclxuICAgICAgICAgICAgICAgIGlzRmlyc3RTbGlkZTogaXNGaXJzdFNsaWRlLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LCBfc3BlZWQpO1xyXG4gICAgfTtcclxuICAgIExpZ2h0R2FsbGVyeS5wcm90b3R5cGUuaXNGaXJzdFNsaWRlV2l0aFpvb21BbmltYXRpb24gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuICEhKCF0aGlzLmxHYWxsZXJ5T24gJiZcclxuICAgICAgICAgICAgdGhpcy56b29tRnJvbU9yaWdpbiAmJlxyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRJbWFnZVNpemUpO1xyXG4gICAgfTtcclxuICAgIC8vIEFkZCB2aWRlbyBzbGlkZUluZm9cclxuICAgIExpZ2h0R2FsbGVyeS5wcm90b3R5cGUuYWRkU2xpZGVWaWRlb0luZm8gPSBmdW5jdGlvbiAoaXRlbXMpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGl0ZW1zLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQsIGluZGV4KSB7XHJcbiAgICAgICAgICAgIGVsZW1lbnQuX19zbGlkZVZpZGVvSW5mbyA9IHV0aWxzLmlzVmlkZW8oZWxlbWVudC5zcmMsICEhZWxlbWVudC52aWRlbywgaW5kZXgpO1xyXG4gICAgICAgICAgICBpZiAoZWxlbWVudC5fX3NsaWRlVmlkZW9JbmZvICYmXHJcbiAgICAgICAgICAgICAgICBfdGhpcy5zZXR0aW5ncy5sb2FkWW91VHViZVBvc3RlciAmJlxyXG4gICAgICAgICAgICAgICAgIWVsZW1lbnQucG9zdGVyICYmXHJcbiAgICAgICAgICAgICAgICBlbGVtZW50Ll9fc2xpZGVWaWRlb0luZm8ueW91dHViZSkge1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudC5wb3N0ZXIgPSBcIi8vaW1nLnlvdXR1YmUuY29tL3ZpL1wiICsgZWxlbWVudC5fX3NsaWRlVmlkZW9JbmZvLnlvdXR1YmVbMV0gKyBcIi9tYXhyZXNkZWZhdWx0LmpwZ1wiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiAgTG9hZCBzbGlkZSBjb250ZW50IGludG8gc2xpZGUuXHJcbiAgICAgKiAgVGhpcyBpcyB1c2VkIHRvIGxvYWQgY29udGVudCBpbnRvIHNsaWRlcyB0aGF0IGlzIG5vdCB2aXNpYmxlIHRvb1xyXG4gICAgICogIEBwYXJhbSB7TnVtYmVyfSBpbmRleCAtIGluZGV4IG9mIHRoZSBzbGlkZS5cclxuICAgICAqICBAcGFyYW0ge0Jvb2xlYW59IHJlYyAtIGlmIHRydWUgY2FsbCBsb2FkY29udGVudCgpIGZ1bmN0aW9uIGFnYWluLlxyXG4gICAgICovXHJcbiAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLmxvYWRDb250ZW50ID0gZnVuY3Rpb24gKGluZGV4LCByZWMpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBjdXJyZW50R2FsbGVyeUl0ZW0gPSB0aGlzLmdhbGxlcnlJdGVtc1tpbmRleF07XHJcbiAgICAgICAgdmFyICRjdXJyZW50U2xpZGUgPSAkTEcodGhpcy5nZXRTbGlkZUl0ZW1JZChpbmRleCkpO1xyXG4gICAgICAgIHZhciBwb3N0ZXIgPSBjdXJyZW50R2FsbGVyeUl0ZW0ucG9zdGVyLCBzcmNzZXQgPSBjdXJyZW50R2FsbGVyeUl0ZW0uc3Jjc2V0LCBzaXplcyA9IGN1cnJlbnRHYWxsZXJ5SXRlbS5zaXplcywgc291cmNlcyA9IGN1cnJlbnRHYWxsZXJ5SXRlbS5zb3VyY2VzO1xyXG4gICAgICAgIHZhciBzcmMgPSBjdXJyZW50R2FsbGVyeUl0ZW0uc3JjO1xyXG4gICAgICAgIHZhciB2aWRlbyA9IGN1cnJlbnRHYWxsZXJ5SXRlbS52aWRlbztcclxuICAgICAgICB2YXIgX2h0bWw1VmlkZW8gPSB2aWRlbyAmJiB0eXBlb2YgdmlkZW8gPT09ICdzdHJpbmcnID8gSlNPTi5wYXJzZSh2aWRlbykgOiB2aWRlbztcclxuICAgICAgICBpZiAoY3VycmVudEdhbGxlcnlJdGVtLnJlc3BvbnNpdmUpIHtcclxuICAgICAgICAgICAgdmFyIHNyY0R5SXRtcyA9IGN1cnJlbnRHYWxsZXJ5SXRlbS5yZXNwb25zaXZlLnNwbGl0KCcsJyk7XHJcbiAgICAgICAgICAgIHNyYyA9IHV0aWxzLmdldFJlc3BvbnNpdmVTcmMoc3JjRHlJdG1zKSB8fCBzcmM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciB2aWRlb0luZm8gPSBjdXJyZW50R2FsbGVyeUl0ZW0uX19zbGlkZVZpZGVvSW5mbztcclxuICAgICAgICB2YXIgbGdWaWRlb1N0eWxlID0gJyc7XHJcbiAgICAgICAgdmFyIGlmcmFtZSA9ICEhY3VycmVudEdhbGxlcnlJdGVtLmlmcmFtZTtcclxuICAgICAgICB2YXIgaXNGaXJzdFNsaWRlID0gIXRoaXMubEdhbGxlcnlPbjtcclxuICAgICAgICAvLyBkZWxheSBmb3IgYWRkaW5nIGNvbXBsZXRlIGNsYXNzLiBpdCBpcyAwIGV4Y2VwdCBmaXJzdCB0aW1lLlxyXG4gICAgICAgIHZhciBkZWxheSA9IDA7XHJcbiAgICAgICAgaWYgKGlzRmlyc3RTbGlkZSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy56b29tRnJvbU9yaWdpbiAmJiB0aGlzLmN1cnJlbnRJbWFnZVNpemUpIHtcclxuICAgICAgICAgICAgICAgIGRlbGF5ID0gdGhpcy5zZXR0aW5ncy5zdGFydEFuaW1hdGlvbkR1cmF0aW9uICsgMTA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBkZWxheSA9IHRoaXMuc2V0dGluZ3MuYmFja2Ryb3BEdXJhdGlvbiArIDEwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghJGN1cnJlbnRTbGlkZS5oYXNDbGFzcygnbGctbG9hZGVkJykpIHtcclxuICAgICAgICAgICAgaWYgKHZpZGVvSW5mbykge1xyXG4gICAgICAgICAgICAgICAgdmFyIF9hID0gdGhpcy5tZWRpYUNvbnRhaW5lclBvc2l0aW9uLCB0b3BfMiA9IF9hLnRvcCwgYm90dG9tID0gX2EuYm90dG9tO1xyXG4gICAgICAgICAgICAgICAgdmFyIHZpZGVvU2l6ZSA9IHV0aWxzLmdldFNpemUodGhpcy5pdGVtc1tpbmRleF0sIHRoaXMub3V0ZXIsIHRvcF8yICsgYm90dG9tLCB2aWRlb0luZm8gJiYgdGhpcy5zZXR0aW5ncy52aWRlb01heFNpemUpO1xyXG4gICAgICAgICAgICAgICAgbGdWaWRlb1N0eWxlID0gdGhpcy5nZXRWaWRlb0NvbnRTdHlsZSh2aWRlb1NpemUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChpZnJhbWUpIHtcclxuICAgICAgICAgICAgICAgIHZhciBtYXJrdXAgPSB1dGlscy5nZXRJZnJhbWVNYXJrdXAodGhpcy5zZXR0aW5ncy5pZnJhbWVXaWR0aCwgdGhpcy5zZXR0aW5ncy5pZnJhbWVIZWlnaHQsIHRoaXMuc2V0dGluZ3MuaWZyYW1lTWF4V2lkdGgsIHRoaXMuc2V0dGluZ3MuaWZyYW1lTWF4SGVpZ2h0LCBzcmMsIGN1cnJlbnRHYWxsZXJ5SXRlbS5pZnJhbWVUaXRsZSk7XHJcbiAgICAgICAgICAgICAgICAkY3VycmVudFNsaWRlLnByZXBlbmQobWFya3VwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChwb3N0ZXIpIHtcclxuICAgICAgICAgICAgICAgIHZhciBkdW1teUltZyA9ICcnO1xyXG4gICAgICAgICAgICAgICAgdmFyIGhhc1N0YXJ0QW5pbWF0aW9uID0gaXNGaXJzdFNsaWRlICYmXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy56b29tRnJvbU9yaWdpbiAmJlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudEltYWdlU2l6ZTtcclxuICAgICAgICAgICAgICAgIGlmIChoYXNTdGFydEFuaW1hdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGR1bW15SW1nID0gdGhpcy5nZXREdW1teUltYWdlQ29udGVudCgkY3VycmVudFNsaWRlLCBpbmRleCwgJycpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFyIG1hcmt1cCA9IHV0aWxzLmdldFZpZGVvUG9zdGVyTWFya3VwKHBvc3RlciwgZHVtbXlJbWcgfHwgJycsIGxnVmlkZW9TdHlsZSwgdGhpcy5zZXR0aW5ncy5zdHJpbmdzWydwbGF5VmlkZW8nXSwgdmlkZW9JbmZvKTtcclxuICAgICAgICAgICAgICAgICRjdXJyZW50U2xpZGUucHJlcGVuZChtYXJrdXApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHZpZGVvSW5mbykge1xyXG4gICAgICAgICAgICAgICAgdmFyIG1hcmt1cCA9IFwiPGRpdiBjbGFzcz1cXFwibGctdmlkZW8tY29udCBcXFwiIHN0eWxlPVxcXCJcIiArIGxnVmlkZW9TdHlsZSArIFwiXFxcIj48L2Rpdj5cIjtcclxuICAgICAgICAgICAgICAgICRjdXJyZW50U2xpZGUucHJlcGVuZChtYXJrdXApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRJbWdNYXJrdXAoc3JjLCAkY3VycmVudFNsaWRlLCBpbmRleCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3Jjc2V0IHx8IHNvdXJjZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgJGltZyA9ICRjdXJyZW50U2xpZGUuZmluZCgnLmxnLW9iamVjdCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5pdFBpY3R1cmVGaWxsKCRpbWcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChwb3N0ZXIgfHwgdmlkZW9JbmZvKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLkxHZWwudHJpZ2dlcihsR0V2ZW50cy5oYXNWaWRlbywge1xyXG4gICAgICAgICAgICAgICAgICAgIGluZGV4OiBpbmRleCxcclxuICAgICAgICAgICAgICAgICAgICBzcmM6IHNyYyxcclxuICAgICAgICAgICAgICAgICAgICBodG1sNVZpZGVvOiBfaHRtbDVWaWRlbyxcclxuICAgICAgICAgICAgICAgICAgICBoYXNQb3N0ZXI6ICEhcG9zdGVyLFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5MR2VsLnRyaWdnZXIobEdFdmVudHMuYWZ0ZXJBcHBlbmRTbGlkZSwgeyBpbmRleDogaW5kZXggfSk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmxHYWxsZXJ5T24gJiZcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0dGluZ3MuYXBwZW5kU3ViSHRtbFRvID09PSAnLmxnLWl0ZW0nKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFkZEh0bWwoaW5kZXgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIEZvciBmaXJzdCB0aW1lIGFkZCBzb21lIGRlbGF5IGZvciBkaXNwbGF5aW5nIHRoZSBzdGFydCBhbmltYXRpb24uXHJcbiAgICAgICAgdmFyIF9zcGVlZCA9IDA7XHJcbiAgICAgICAgLy8gRG8gbm90IGNoYW5nZSB0aGUgZGVsYXkgdmFsdWUgYmVjYXVzZSBpdCBpcyByZXF1aXJlZCBmb3Igem9vbSBwbHVnaW4uXHJcbiAgICAgICAgLy8gSWYgZ2FsbGVyeSBvcGVuZWQgZnJvbSBkaXJlY3QgdXJsIChoYXNoKSBzcGVlZCB2YWx1ZSBzaG91bGQgYmUgMFxyXG4gICAgICAgIGlmIChkZWxheSAmJiAhJExHKGRvY3VtZW50LmJvZHkpLmhhc0NsYXNzKCdsZy1mcm9tLWhhc2gnKSkge1xyXG4gICAgICAgICAgICBfc3BlZWQgPSBkZWxheTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gT25seSBmb3IgZmlyc3Qgc2xpZGUgYW5kIHpvb21Gcm9tT3JpZ2luIGlzIGVuYWJsZWRcclxuICAgICAgICBpZiAodGhpcy5pc0ZpcnN0U2xpZGVXaXRoWm9vbUFuaW1hdGlvbigpKSB7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgJGN1cnJlbnRTbGlkZVxyXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnbGctc3RhcnQtZW5kLXByb2dyZXNzIGxnLXN0YXJ0LXByb2dyZXNzJylcclxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignc3R5bGUnKTtcclxuICAgICAgICAgICAgfSwgdGhpcy5zZXR0aW5ncy5zdGFydEFuaW1hdGlvbkR1cmF0aW9uICsgMTAwKTtcclxuICAgICAgICAgICAgaWYgKCEkY3VycmVudFNsaWRlLmhhc0NsYXNzKCdsZy1sb2FkZWQnKSkge1xyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLmdldFNsaWRlVHlwZShjdXJyZW50R2FsbGVyeUl0ZW0pID09PSAnaW1hZ2UnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhbHQgPSBjdXJyZW50R2FsbGVyeUl0ZW0uYWx0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWx0QXR0ciA9IGFsdCA/ICdhbHQ9XCInICsgYWx0ICsgJ1wiJyA6ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkY3VycmVudFNsaWRlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmluZCgnLmxnLWltZy13cmFwJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQodXRpbHMuZ2V0SW1nTWFya3VwKGluZGV4LCBzcmMsIGFsdEF0dHIsIHNyY3NldCwgc2l6ZXMsIGN1cnJlbnRHYWxsZXJ5SXRlbS5zb3VyY2VzKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzcmNzZXQgfHwgc291cmNlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRpbWcgPSAkY3VycmVudFNsaWRlLmZpbmQoJy5sZy1vYmplY3QnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmluaXRQaWN0dXJlRmlsbCgkaW1nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuZ2V0U2xpZGVUeXBlKGN1cnJlbnRHYWxsZXJ5SXRlbSkgPT09ICdpbWFnZScgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgKF90aGlzLmdldFNsaWRlVHlwZShjdXJyZW50R2FsbGVyeUl0ZW0pID09PSAndmlkZW8nICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3N0ZXIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLm9uTGdPYmplY3RMb2FkKCRjdXJyZW50U2xpZGUsIGluZGV4LCBkZWxheSwgX3NwZWVkLCB0cnVlLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxvYWQgcmVtYWluaW5nIHNsaWRlcyBvbmNlIHRoZSBzbGlkZSBpcyBjb21wbGV0ZWx5IGxvYWRlZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5vblNsaWRlT2JqZWN0TG9hZCgkY3VycmVudFNsaWRlLCAhISh2aWRlb0luZm8gJiYgdmlkZW9JbmZvLmh0bWw1ICYmICFwb3N0ZXIpLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5sb2FkQ29udGVudE9uRmlyc3RTbGlkZUxvYWQoaW5kZXgsICRjdXJyZW50U2xpZGUsIF9zcGVlZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmxvYWRDb250ZW50T25GaXJzdFNsaWRlTG9hZChpbmRleCwgJGN1cnJlbnRTbGlkZSwgX3NwZWVkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSwgdGhpcy5zZXR0aW5ncy5zdGFydEFuaW1hdGlvbkR1cmF0aW9uICsgMTAwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBTTGlkZSBjb250ZW50IGhhcyBiZWVuIGFkZGVkIHRvIGRvbVxyXG4gICAgICAgICRjdXJyZW50U2xpZGUuYWRkQ2xhc3MoJ2xnLWxvYWRlZCcpO1xyXG4gICAgICAgIGlmICghdGhpcy5pc0ZpcnN0U2xpZGVXaXRoWm9vbUFuaW1hdGlvbigpIHx8XHJcbiAgICAgICAgICAgICh0aGlzLmdldFNsaWRlVHlwZShjdXJyZW50R2FsbGVyeUl0ZW0pID09PSAndmlkZW8nICYmICFwb3N0ZXIpKSB7XHJcbiAgICAgICAgICAgIHRoaXMub25MZ09iamVjdExvYWQoJGN1cnJlbnRTbGlkZSwgaW5kZXgsIGRlbGF5LCBfc3BlZWQsIGlzRmlyc3RTbGlkZSwgISEodmlkZW9JbmZvICYmIHZpZGVvSW5mby5odG1sNSAmJiAhcG9zdGVyKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFdoZW4gZ2FsbGVyeSBpcyBvcGVuZWQgb25jZSBjb250ZW50IGlzIGxvYWRlZCAoc2Vjb25kIHRpbWUpIG5lZWQgdG8gYWRkIGxnLWNvbXBsZXRlIGNsYXNzIGZvciBjc3Mgc3R5bGluZ1xyXG4gICAgICAgIGlmICgoIXRoaXMuem9vbUZyb21PcmlnaW4gfHwgIXRoaXMuY3VycmVudEltYWdlU2l6ZSkgJiZcclxuICAgICAgICAgICAgJGN1cnJlbnRTbGlkZS5oYXNDbGFzcygnbGctY29tcGxldGVfJykgJiZcclxuICAgICAgICAgICAgIXRoaXMubEdhbGxlcnlPbikge1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICRjdXJyZW50U2xpZGUuYWRkQ2xhc3MoJ2xnLWNvbXBsZXRlJyk7XHJcbiAgICAgICAgICAgIH0sIHRoaXMuc2V0dGluZ3MuYmFja2Ryb3BEdXJhdGlvbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIENvbnRlbnQgbG9hZGVkXHJcbiAgICAgICAgLy8gTmVlZCB0byBzZXQgbEdhbGxlcnlPbiBiZWZvcmUgY2FsbGluZyBwcmVsb2FkIGZ1bmN0aW9uXHJcbiAgICAgICAgdGhpcy5sR2FsbGVyeU9uID0gdHJ1ZTtcclxuICAgICAgICBpZiAocmVjID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIGlmICghJGN1cnJlbnRTbGlkZS5oYXNDbGFzcygnbGctY29tcGxldGVfJykpIHtcclxuICAgICAgICAgICAgICAgICRjdXJyZW50U2xpZGVcclxuICAgICAgICAgICAgICAgICAgICAuZmluZCgnLmxnLW9iamVjdCcpXHJcbiAgICAgICAgICAgICAgICAgICAgLmZpcnN0KClcclxuICAgICAgICAgICAgICAgICAgICAub24oJ2xvYWQubGcgZXJyb3IubGcnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMucHJlbG9hZChpbmRleCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucHJlbG9hZChpbmRleCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzYyBSZW1vdmUgZHVtbXkgaW1hZ2UgY29udGVudCBhbmQgbG9hZCBuZXh0IHNsaWRlc1xyXG4gICAgICogQ2FsbGVkIG9ubHkgZm9yIHRoZSBmaXJzdCB0aW1lIGlmIHpvb21Gcm9tT3JpZ2luIGFuaW1hdGlvbiBpcyBlbmFibGVkXHJcbiAgICAgKiBAcGFyYW0gaW5kZXhcclxuICAgICAqIEBwYXJhbSAkY3VycmVudFNsaWRlXHJcbiAgICAgKiBAcGFyYW0gc3BlZWRcclxuICAgICAqL1xyXG4gICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS5sb2FkQ29udGVudE9uRmlyc3RTbGlkZUxvYWQgPSBmdW5jdGlvbiAoaW5kZXgsICRjdXJyZW50U2xpZGUsIHNwZWVkKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgJGN1cnJlbnRTbGlkZS5maW5kKCcubGctZHVtbXktaW1nJykucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICRjdXJyZW50U2xpZGUucmVtb3ZlQ2xhc3MoJ2xnLWZpcnN0LXNsaWRlJyk7XHJcbiAgICAgICAgICAgIF90aGlzLm91dGVyLnJlbW92ZUNsYXNzKCdsZy1maXJzdC1zbGlkZS1sb2FkaW5nJyk7XHJcbiAgICAgICAgICAgIF90aGlzLmlzRHVtbXlJbWFnZVJlbW92ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICBfdGhpcy5wcmVsb2FkKGluZGV4KTtcclxuICAgICAgICB9LCBzcGVlZCArIDMwMCk7XHJcbiAgICB9O1xyXG4gICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS5nZXRJdGVtc1RvQmVJbnNlcnRlZFRvRG9tID0gZnVuY3Rpb24gKGluZGV4LCBwcmV2SW5kZXgsIG51bWJlck9mSXRlbXMpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGlmIChudW1iZXJPZkl0ZW1zID09PSB2b2lkIDApIHsgbnVtYmVyT2ZJdGVtcyA9IDA7IH1cclxuICAgICAgICB2YXIgaXRlbXNUb0JlSW5zZXJ0ZWRUb0RvbSA9IFtdO1xyXG4gICAgICAgIC8vIE1pbmltdW0gMiBpdGVtcyBzaG91bGQgYmUgdGhlcmVcclxuICAgICAgICB2YXIgcG9zc2libGVOdW1iZXJPZkl0ZW1zID0gTWF0aC5tYXgobnVtYmVyT2ZJdGVtcywgMyk7XHJcbiAgICAgICAgcG9zc2libGVOdW1iZXJPZkl0ZW1zID0gTWF0aC5taW4ocG9zc2libGVOdW1iZXJPZkl0ZW1zLCB0aGlzLmdhbGxlcnlJdGVtcy5sZW5ndGgpO1xyXG4gICAgICAgIHZhciBwcmV2SW5kZXhJdGVtID0gXCJsZy1pdGVtLVwiICsgdGhpcy5sZ0lkICsgXCItXCIgKyBwcmV2SW5kZXg7XHJcbiAgICAgICAgaWYgKHRoaXMuZ2FsbGVyeUl0ZW1zLmxlbmd0aCA8PSAzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZ2FsbGVyeUl0ZW1zLmZvckVhY2goZnVuY3Rpb24gKF9lbGVtZW50LCBpbmRleCkge1xyXG4gICAgICAgICAgICAgICAgaXRlbXNUb0JlSW5zZXJ0ZWRUb0RvbS5wdXNoKFwibGctaXRlbS1cIiArIF90aGlzLmxnSWQgKyBcIi1cIiArIGluZGV4KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiBpdGVtc1RvQmVJbnNlcnRlZFRvRG9tO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaW5kZXggPCAodGhpcy5nYWxsZXJ5SXRlbXMubGVuZ3RoIC0gMSkgLyAyKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGlkeCA9IGluZGV4OyBpZHggPiBpbmRleCAtIHBvc3NpYmxlTnVtYmVyT2ZJdGVtcyAvIDIgJiYgaWR4ID49IDA7IGlkeC0tKSB7XHJcbiAgICAgICAgICAgICAgICBpdGVtc1RvQmVJbnNlcnRlZFRvRG9tLnB1c2goXCJsZy1pdGVtLVwiICsgdGhpcy5sZ0lkICsgXCItXCIgKyBpZHgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBudW1iZXJPZkV4aXN0aW5nSXRlbXMgPSBpdGVtc1RvQmVJbnNlcnRlZFRvRG9tLmxlbmd0aDtcclxuICAgICAgICAgICAgZm9yICh2YXIgaWR4ID0gMDsgaWR4IDwgcG9zc2libGVOdW1iZXJPZkl0ZW1zIC0gbnVtYmVyT2ZFeGlzdGluZ0l0ZW1zOyBpZHgrKykge1xyXG4gICAgICAgICAgICAgICAgaXRlbXNUb0JlSW5zZXJ0ZWRUb0RvbS5wdXNoKFwibGctaXRlbS1cIiArIHRoaXMubGdJZCArIFwiLVwiICsgKGluZGV4ICsgaWR4ICsgMSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpZHggPSBpbmRleDsgaWR4IDw9IHRoaXMuZ2FsbGVyeUl0ZW1zLmxlbmd0aCAtIDEgJiZcclxuICAgICAgICAgICAgICAgIGlkeCA8IGluZGV4ICsgcG9zc2libGVOdW1iZXJPZkl0ZW1zIC8gMjsgaWR4KyspIHtcclxuICAgICAgICAgICAgICAgIGl0ZW1zVG9CZUluc2VydGVkVG9Eb20ucHVzaChcImxnLWl0ZW0tXCIgKyB0aGlzLmxnSWQgKyBcIi1cIiArIGlkeCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIG51bWJlck9mRXhpc3RpbmdJdGVtcyA9IGl0ZW1zVG9CZUluc2VydGVkVG9Eb20ubGVuZ3RoO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpZHggPSAwOyBpZHggPCBwb3NzaWJsZU51bWJlck9mSXRlbXMgLSBudW1iZXJPZkV4aXN0aW5nSXRlbXM7IGlkeCsrKSB7XHJcbiAgICAgICAgICAgICAgICBpdGVtc1RvQmVJbnNlcnRlZFRvRG9tLnB1c2goXCJsZy1pdGVtLVwiICsgdGhpcy5sZ0lkICsgXCItXCIgKyAoaW5kZXggLSBpZHggLSAxKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MubG9vcCkge1xyXG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IHRoaXMuZ2FsbGVyeUl0ZW1zLmxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgICAgICAgIGl0ZW1zVG9CZUluc2VydGVkVG9Eb20ucHVzaChcImxnLWl0ZW0tXCIgKyB0aGlzLmxnSWQgKyBcIi1cIiArIDApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGluZGV4ID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBpdGVtc1RvQmVJbnNlcnRlZFRvRG9tLnB1c2goXCJsZy1pdGVtLVwiICsgdGhpcy5sZ0lkICsgXCItXCIgKyAodGhpcy5nYWxsZXJ5SXRlbXMubGVuZ3RoIC0gMSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChpdGVtc1RvQmVJbnNlcnRlZFRvRG9tLmluZGV4T2YocHJldkluZGV4SXRlbSkgPT09IC0xKSB7XHJcbiAgICAgICAgICAgIGl0ZW1zVG9CZUluc2VydGVkVG9Eb20ucHVzaChcImxnLWl0ZW0tXCIgKyB0aGlzLmxnSWQgKyBcIi1cIiArIHByZXZJbmRleCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBpdGVtc1RvQmVJbnNlcnRlZFRvRG9tO1xyXG4gICAgfTtcclxuICAgIExpZ2h0R2FsbGVyeS5wcm90b3R5cGUub3JnYW5pemVTbGlkZUl0ZW1zID0gZnVuY3Rpb24gKGluZGV4LCBwcmV2SW5kZXgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBpdGVtc1RvQmVJbnNlcnRlZFRvRG9tID0gdGhpcy5nZXRJdGVtc1RvQmVJbnNlcnRlZFRvRG9tKGluZGV4LCBwcmV2SW5kZXgsIHRoaXMuc2V0dGluZ3MubnVtYmVyT2ZTbGlkZUl0ZW1zSW5Eb20pO1xyXG4gICAgICAgIGl0ZW1zVG9CZUluc2VydGVkVG9Eb20uZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgICAgICBpZiAoX3RoaXMuY3VycmVudEl0ZW1zSW5Eb20uaW5kZXhPZihpdGVtKSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLiRpbm5lci5hcHBlbmQoXCI8ZGl2IGlkPVxcXCJcIiArIGl0ZW0gKyBcIlxcXCIgY2xhc3M9XFxcImxnLWl0ZW1cXFwiPjwvZGl2PlwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuY3VycmVudEl0ZW1zSW5Eb20uZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgICAgICBpZiAoaXRlbXNUb0JlSW5zZXJ0ZWRUb0RvbS5pbmRleE9mKGl0ZW0pID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgJExHKFwiI1wiICsgaXRlbSkucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gaXRlbXNUb0JlSW5zZXJ0ZWRUb0RvbTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEdldCBwcmV2aW91cyBpbmRleCBvZiB0aGUgc2xpZGVcclxuICAgICAqL1xyXG4gICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS5nZXRQcmV2aW91c1NsaWRlSW5kZXggPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHByZXZJbmRleCA9IDA7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgdmFyIGN1cnJlbnRJdGVtSWQgPSB0aGlzLm91dGVyXHJcbiAgICAgICAgICAgICAgICAuZmluZCgnLmxnLWN1cnJlbnQnKVxyXG4gICAgICAgICAgICAgICAgLmZpcnN0KClcclxuICAgICAgICAgICAgICAgIC5hdHRyKCdpZCcpO1xyXG4gICAgICAgICAgICBwcmV2SW5kZXggPSBwYXJzZUludChjdXJyZW50SXRlbUlkLnNwbGl0KCctJylbM10pIHx8IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBwcmV2SW5kZXggPSAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcHJldkluZGV4O1xyXG4gICAgfTtcclxuICAgIExpZ2h0R2FsbGVyeS5wcm90b3R5cGUuc2V0RG93bmxvYWRWYWx1ZSA9IGZ1bmN0aW9uIChpbmRleCkge1xyXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmRvd25sb2FkKSB7XHJcbiAgICAgICAgICAgIHZhciBjdXJyZW50R2FsbGVyeUl0ZW0gPSB0aGlzLmdhbGxlcnlJdGVtc1tpbmRleF07XHJcbiAgICAgICAgICAgIHZhciBoaWRlRG93bmxvYWRCdG4gPSBjdXJyZW50R2FsbGVyeUl0ZW0uZG93bmxvYWRVcmwgPT09IGZhbHNlIHx8XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50R2FsbGVyeUl0ZW0uZG93bmxvYWRVcmwgPT09ICdmYWxzZSc7XHJcbiAgICAgICAgICAgIGlmIChoaWRlRG93bmxvYWRCdG4pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMub3V0ZXIuYWRkQ2xhc3MoJ2xnLWhpZGUtZG93bmxvYWQnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZhciAkZG93bmxvYWQgPSB0aGlzLmdldEVsZW1lbnRCeUlkKCdsZy1kb3dubG9hZCcpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vdXRlci5yZW1vdmVDbGFzcygnbGctaGlkZS1kb3dubG9hZCcpO1xyXG4gICAgICAgICAgICAgICAgJGRvd25sb2FkLmF0dHIoJ2hyZWYnLCBjdXJyZW50R2FsbGVyeUl0ZW0uZG93bmxvYWRVcmwgfHxcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50R2FsbGVyeUl0ZW0uc3JjKTtcclxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50R2FsbGVyeUl0ZW0uZG93bmxvYWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAkZG93bmxvYWQuYXR0cignZG93bmxvYWQnLCBjdXJyZW50R2FsbGVyeUl0ZW0uZG93bmxvYWQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIExpZ2h0R2FsbGVyeS5wcm90b3R5cGUubWFrZVNsaWRlQW5pbWF0aW9uID0gZnVuY3Rpb24gKGRpcmVjdGlvbiwgY3VycmVudFNsaWRlSXRlbSwgcHJldmlvdXNTbGlkZUl0ZW0pIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGlmICh0aGlzLmxHYWxsZXJ5T24pIHtcclxuICAgICAgICAgICAgcHJldmlvdXNTbGlkZUl0ZW0uYWRkQ2xhc3MoJ2xnLXNsaWRlLXByb2dyZXNzJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAvLyByZW1vdmUgYWxsIHRyYW5zaXRpb25zXHJcbiAgICAgICAgICAgIF90aGlzLm91dGVyLmFkZENsYXNzKCdsZy1uby10cmFucycpO1xyXG4gICAgICAgICAgICBfdGhpcy5vdXRlclxyXG4gICAgICAgICAgICAgICAgLmZpbmQoJy5sZy1pdGVtJylcclxuICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnbGctcHJldi1zbGlkZSBsZy1uZXh0LXNsaWRlJyk7XHJcbiAgICAgICAgICAgIGlmIChkaXJlY3Rpb24gPT09ICdwcmV2Jykge1xyXG4gICAgICAgICAgICAgICAgLy9wcmV2c2xpZGVcclxuICAgICAgICAgICAgICAgIGN1cnJlbnRTbGlkZUl0ZW0uYWRkQ2xhc3MoJ2xnLXByZXYtc2xpZGUnKTtcclxuICAgICAgICAgICAgICAgIHByZXZpb3VzU2xpZGVJdGVtLmFkZENsYXNzKCdsZy1uZXh0LXNsaWRlJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBuZXh0IHNsaWRlXHJcbiAgICAgICAgICAgICAgICBjdXJyZW50U2xpZGVJdGVtLmFkZENsYXNzKCdsZy1uZXh0LXNsaWRlJyk7XHJcbiAgICAgICAgICAgICAgICBwcmV2aW91c1NsaWRlSXRlbS5hZGRDbGFzcygnbGctcHJldi1zbGlkZScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGdpdmUgNTAgbXMgZm9yIGJyb3dzZXIgdG8gYWRkL3JlbW92ZSBjbGFzc1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLm91dGVyLmZpbmQoJy5sZy1pdGVtJykucmVtb3ZlQ2xhc3MoJ2xnLWN1cnJlbnQnKTtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnRTbGlkZUl0ZW0uYWRkQ2xhc3MoJ2xnLWN1cnJlbnQnKTtcclxuICAgICAgICAgICAgICAgIC8vIHJlc2V0IGFsbCB0cmFuc2l0aW9uc1xyXG4gICAgICAgICAgICAgICAgX3RoaXMub3V0ZXIucmVtb3ZlQ2xhc3MoJ2xnLW5vLXRyYW5zJyk7XHJcbiAgICAgICAgICAgIH0sIDUwKTtcclxuICAgICAgICB9LCB0aGlzLmxHYWxsZXJ5T24gPyB0aGlzLnNldHRpbmdzLnNsaWRlRGVsYXkgOiAwKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEdvdG8gYSBzcGVjaWZpYyBzbGlkZS5cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBpbmRleCAtIGluZGV4IG9mIHRoZSBzbGlkZVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBmcm9tVG91Y2ggLSB0cnVlIGlmIHNsaWRlIGZ1bmN0aW9uIGNhbGxlZCB2aWEgdG91Y2ggZXZlbnQgb3IgbW91c2UgZHJhZ1xyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBmcm9tVGh1bWIgLSB0cnVlIGlmIHNsaWRlIGZ1bmN0aW9uIGNhbGxlZCB2aWEgdGh1bWJuYWlsIGNsaWNrXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZGlyZWN0aW9uIC0gRGlyZWN0aW9uIG9mIHRoZSBzbGlkZShuZXh0L3ByZXYpXHJcbiAgICAgKiBAY2F0ZWdvcnkgbEdQdWJsaWNNZXRob2RzXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogIGNvbnN0IHBsdWdpbiA9IGxpZ2h0R2FsbGVyeSgpO1xyXG4gICAgICogIC8vIHRvIGdvIHRvIDNyZCBzbGlkZVxyXG4gICAgICogIHBsdWdpbi5zbGlkZSgyKTtcclxuICAgICAqXHJcbiAgICAgKi9cclxuICAgIExpZ2h0R2FsbGVyeS5wcm90b3R5cGUuc2xpZGUgPSBmdW5jdGlvbiAoaW5kZXgsIGZyb21Ub3VjaCwgZnJvbVRodW1iLCBkaXJlY3Rpb24pIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBwcmV2SW5kZXggPSB0aGlzLmdldFByZXZpb3VzU2xpZGVJbmRleCgpO1xyXG4gICAgICAgIHRoaXMuY3VycmVudEl0ZW1zSW5Eb20gPSB0aGlzLm9yZ2FuaXplU2xpZGVJdGVtcyhpbmRleCwgcHJldkluZGV4KTtcclxuICAgICAgICAvLyBQcmV2ZW50IG11bHRpcGxlIGNhbGwsIFJlcXVpcmVkIGZvciBoc2ggcGx1Z2luXHJcbiAgICAgICAgaWYgKHRoaXMubEdhbGxlcnlPbiAmJiBwcmV2SW5kZXggPT09IGluZGV4KSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIG51bWJlck9mR2FsbGVyeUl0ZW1zID0gdGhpcy5nYWxsZXJ5SXRlbXMubGVuZ3RoO1xyXG4gICAgICAgIGlmICghdGhpcy5sZ0J1c3kpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuY291bnRlcikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVDdXJyZW50Q291bnRlcihpbmRleCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGN1cnJlbnRTbGlkZUl0ZW0gPSB0aGlzLmdldFNsaWRlSXRlbShpbmRleCk7XHJcbiAgICAgICAgICAgIHZhciBwcmV2aW91c1NsaWRlSXRlbV8xID0gdGhpcy5nZXRTbGlkZUl0ZW0ocHJldkluZGV4KTtcclxuICAgICAgICAgICAgdmFyIGN1cnJlbnRHYWxsZXJ5SXRlbSA9IHRoaXMuZ2FsbGVyeUl0ZW1zW2luZGV4XTtcclxuICAgICAgICAgICAgdmFyIHZpZGVvSW5mbyA9IGN1cnJlbnRHYWxsZXJ5SXRlbS5fX3NsaWRlVmlkZW9JbmZvO1xyXG4gICAgICAgICAgICB0aGlzLm91dGVyLmF0dHIoJ2RhdGEtbGctc2xpZGUtdHlwZScsIHRoaXMuZ2V0U2xpZGVUeXBlKGN1cnJlbnRHYWxsZXJ5SXRlbSkpO1xyXG4gICAgICAgICAgICB0aGlzLnNldERvd25sb2FkVmFsdWUoaW5kZXgpO1xyXG4gICAgICAgICAgICBpZiAodmlkZW9JbmZvKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgX2EgPSB0aGlzLm1lZGlhQ29udGFpbmVyUG9zaXRpb24sIHRvcF8zID0gX2EudG9wLCBib3R0b20gPSBfYS5ib3R0b207XHJcbiAgICAgICAgICAgICAgICB2YXIgdmlkZW9TaXplID0gdXRpbHMuZ2V0U2l6ZSh0aGlzLml0ZW1zW2luZGV4XSwgdGhpcy5vdXRlciwgdG9wXzMgKyBib3R0b20sIHZpZGVvSW5mbyAmJiB0aGlzLnNldHRpbmdzLnZpZGVvTWF4U2l6ZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlc2l6ZVZpZGVvU2xpZGUoaW5kZXgsIHZpZGVvU2l6ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5MR2VsLnRyaWdnZXIobEdFdmVudHMuYmVmb3JlU2xpZGUsIHtcclxuICAgICAgICAgICAgICAgIHByZXZJbmRleDogcHJldkluZGV4LFxyXG4gICAgICAgICAgICAgICAgaW5kZXg6IGluZGV4LFxyXG4gICAgICAgICAgICAgICAgZnJvbVRvdWNoOiAhIWZyb21Ub3VjaCxcclxuICAgICAgICAgICAgICAgIGZyb21UaHVtYjogISFmcm9tVGh1bWIsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB0aGlzLmxnQnVzeSA9IHRydWU7XHJcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLmhpZGVCYXJUaW1lb3V0KTtcclxuICAgICAgICAgICAgdGhpcy5hcnJvd0Rpc2FibGUoaW5kZXgpO1xyXG4gICAgICAgICAgICBpZiAoIWRpcmVjdGlvbikge1xyXG4gICAgICAgICAgICAgICAgaWYgKGluZGV4IDwgcHJldkluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aW9uID0gJ3ByZXYnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaW5kZXggPiBwcmV2SW5kZXgpIHtcclxuICAgICAgICAgICAgICAgICAgICBkaXJlY3Rpb24gPSAnbmV4dCc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCFmcm9tVG91Y2gpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubWFrZVNsaWRlQW5pbWF0aW9uKGRpcmVjdGlvbiwgY3VycmVudFNsaWRlSXRlbSwgcHJldmlvdXNTbGlkZUl0ZW1fMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm91dGVyXHJcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoJy5sZy1pdGVtJylcclxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ2xnLXByZXYtc2xpZGUgbGctY3VycmVudCBsZy1uZXh0LXNsaWRlJyk7XHJcbiAgICAgICAgICAgICAgICB2YXIgdG91Y2hQcmV2ID0gdm9pZCAwO1xyXG4gICAgICAgICAgICAgICAgdmFyIHRvdWNoTmV4dCA9IHZvaWQgMDtcclxuICAgICAgICAgICAgICAgIGlmIChudW1iZXJPZkdhbGxlcnlJdGVtcyA+IDIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0b3VjaFByZXYgPSBpbmRleCAtIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgdG91Y2hOZXh0ID0gaW5kZXggKyAxO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCA9PT0gMCAmJiBwcmV2SW5kZXggPT09IG51bWJlck9mR2FsbGVyeUl0ZW1zIC0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBuZXh0IHNsaWRlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdWNoTmV4dCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdWNoUHJldiA9IG51bWJlck9mR2FsbGVyeUl0ZW1zIC0gMTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoaW5kZXggPT09IG51bWJlck9mR2FsbGVyeUl0ZW1zIC0gMSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2SW5kZXggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcHJldiBzbGlkZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3VjaE5leHQgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3VjaFByZXYgPSBudW1iZXJPZkdhbGxlcnlJdGVtcyAtIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdG91Y2hQcmV2ID0gMDtcclxuICAgICAgICAgICAgICAgICAgICB0b3VjaE5leHQgPSAxO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gJ3ByZXYnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nZXRTbGlkZUl0ZW0odG91Y2hOZXh0KS5hZGRDbGFzcygnbGctbmV4dC1zbGlkZScpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nZXRTbGlkZUl0ZW0odG91Y2hQcmV2KS5hZGRDbGFzcygnbGctcHJldi1zbGlkZScpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY3VycmVudFNsaWRlSXRlbS5hZGRDbGFzcygnbGctY3VycmVudCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIERvIG5vdCBwdXQgbG9hZCBjb250ZW50IGluIHNldCB0aW1lb3V0IGFzIGl0IG5lZWRzIHRvIGxvYWQgaW1tZWRpYXRlbHkgd2hlbiB0aGUgZ2FsbGVyeSBpcyBvcGVuZWRcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmxHYWxsZXJ5T24pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubG9hZENvbnRlbnQoaW5kZXgsIHRydWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMubG9hZENvbnRlbnQoaW5kZXgsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEFkZCB0aXRsZSBpZiB0aGlzLnNldHRpbmdzLmFwcGVuZFN1Ykh0bWxUbyA9PT0gbGctc3ViLWh0bWxcclxuICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuc2V0dGluZ3MuYXBwZW5kU3ViSHRtbFRvICE9PSAnLmxnLWl0ZW0nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmFkZEh0bWwoaW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sIHRoaXMuc2V0dGluZ3Muc3BlZWQgKyA1MCArIChmcm9tVG91Y2ggPyAwIDogdGhpcy5zZXR0aW5ncy5zbGlkZURlbGF5KSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5sZ0J1c3kgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHByZXZpb3VzU2xpZGVJdGVtXzEucmVtb3ZlQ2xhc3MoJ2xnLXNsaWRlLXByb2dyZXNzJyk7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5MR2VsLnRyaWdnZXIobEdFdmVudHMuYWZ0ZXJTbGlkZSwge1xyXG4gICAgICAgICAgICAgICAgICAgIHByZXZJbmRleDogcHJldkluZGV4LFxyXG4gICAgICAgICAgICAgICAgICAgIGluZGV4OiBpbmRleCxcclxuICAgICAgICAgICAgICAgICAgICBmcm9tVG91Y2g6IGZyb21Ub3VjaCxcclxuICAgICAgICAgICAgICAgICAgICBmcm9tVGh1bWI6IGZyb21UaHVtYixcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9LCAodGhpcy5sR2FsbGVyeU9uID8gdGhpcy5zZXR0aW5ncy5zcGVlZCArIDEwMCA6IDEwMCkgKyAoZnJvbVRvdWNoID8gMCA6IHRoaXMuc2V0dGluZ3Muc2xpZGVEZWxheSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmluZGV4ID0gaW5kZXg7XHJcbiAgICB9O1xyXG4gICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS51cGRhdGVDdXJyZW50Q291bnRlciA9IGZ1bmN0aW9uIChpbmRleCkge1xyXG4gICAgICAgIHRoaXMuZ2V0RWxlbWVudEJ5SWQoJ2xnLWNvdW50ZXItY3VycmVudCcpLmh0bWwoaW5kZXggKyAxICsgJycpO1xyXG4gICAgfTtcclxuICAgIExpZ2h0R2FsbGVyeS5wcm90b3R5cGUudXBkYXRlQ291bnRlclRvdGFsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuZ2V0RWxlbWVudEJ5SWQoJ2xnLWNvdW50ZXItYWxsJykuaHRtbCh0aGlzLmdhbGxlcnlJdGVtcy5sZW5ndGggKyAnJyk7XHJcbiAgICB9O1xyXG4gICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS5nZXRTbGlkZVR5cGUgPSBmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgIGlmIChpdGVtLl9fc2xpZGVWaWRlb0luZm8pIHtcclxuICAgICAgICAgICAgcmV0dXJuICd2aWRlbyc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGl0ZW0uaWZyYW1lKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnaWZyYW1lJztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnaW1hZ2UnO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLnRvdWNoTW92ZSA9IGZ1bmN0aW9uIChzdGFydENvb3JkcywgZW5kQ29vcmRzLCBlKSB7XHJcbiAgICAgICAgdmFyIGRpc3RhbmNlWCA9IGVuZENvb3Jkcy5wYWdlWCAtIHN0YXJ0Q29vcmRzLnBhZ2VYO1xyXG4gICAgICAgIHZhciBkaXN0YW5jZVkgPSBlbmRDb29yZHMucGFnZVkgLSBzdGFydENvb3Jkcy5wYWdlWTtcclxuICAgICAgICB2YXIgYWxsb3dTd2lwZSA9IGZhbHNlO1xyXG4gICAgICAgIGlmICh0aGlzLnN3aXBlRGlyZWN0aW9uKSB7XHJcbiAgICAgICAgICAgIGFsbG93U3dpcGUgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKE1hdGguYWJzKGRpc3RhbmNlWCkgPiAxNSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zd2lwZURpcmVjdGlvbiA9ICdob3Jpem9udGFsJztcclxuICAgICAgICAgICAgICAgIGFsbG93U3dpcGUgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKE1hdGguYWJzKGRpc3RhbmNlWSkgPiAxNSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zd2lwZURpcmVjdGlvbiA9ICd2ZXJ0aWNhbCc7XHJcbiAgICAgICAgICAgICAgICBhbGxvd1N3aXBlID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIWFsbG93U3dpcGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgJGN1cnJlbnRTbGlkZSA9IHRoaXMuZ2V0U2xpZGVJdGVtKHRoaXMuaW5kZXgpO1xyXG4gICAgICAgIGlmICh0aGlzLnN3aXBlRGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcpIHtcclxuICAgICAgICAgICAgZSA9PT0gbnVsbCB8fCBlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIC8vIHJlc2V0IG9wYWNpdHkgYW5kIHRyYW5zaXRpb24gZHVyYXRpb25cclxuICAgICAgICAgICAgdGhpcy5vdXRlci5hZGRDbGFzcygnbGctZHJhZ2dpbmcnKTtcclxuICAgICAgICAgICAgLy8gbW92ZSBjdXJyZW50IHNsaWRlXHJcbiAgICAgICAgICAgIHRoaXMuc2V0VHJhbnNsYXRlKCRjdXJyZW50U2xpZGUsIGRpc3RhbmNlWCwgMCk7XHJcbiAgICAgICAgICAgIC8vIG1vdmUgbmV4dCBhbmQgcHJldiBzbGlkZSB3aXRoIGN1cnJlbnQgc2xpZGVcclxuICAgICAgICAgICAgdmFyIHdpZHRoID0gJGN1cnJlbnRTbGlkZS5nZXQoKS5vZmZzZXRXaWR0aDtcclxuICAgICAgICAgICAgdmFyIHNsaWRlV2lkdGhBbW91bnQgPSAod2lkdGggKiAxNSkgLyAxMDA7XHJcbiAgICAgICAgICAgIHZhciBndXR0ZXIgPSBzbGlkZVdpZHRoQW1vdW50IC0gTWF0aC5hYnMoKGRpc3RhbmNlWCAqIDEwKSAvIDEwMCk7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0VHJhbnNsYXRlKHRoaXMub3V0ZXIuZmluZCgnLmxnLXByZXYtc2xpZGUnKS5maXJzdCgpLCAtd2lkdGggKyBkaXN0YW5jZVggLSBndXR0ZXIsIDApO1xyXG4gICAgICAgICAgICB0aGlzLnNldFRyYW5zbGF0ZSh0aGlzLm91dGVyLmZpbmQoJy5sZy1uZXh0LXNsaWRlJykuZmlyc3QoKSwgd2lkdGggKyBkaXN0YW5jZVggKyBndXR0ZXIsIDApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0aGlzLnN3aXBlRGlyZWN0aW9uID09PSAndmVydGljYWwnKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLnN3aXBlVG9DbG9zZSkge1xyXG4gICAgICAgICAgICAgICAgZSA9PT0gbnVsbCB8fCBlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRjb250YWluZXIuYWRkQ2xhc3MoJ2xnLWRyYWdnaW5nLXZlcnRpY2FsJyk7XHJcbiAgICAgICAgICAgICAgICB2YXIgb3BhY2l0eSA9IDEgLSBNYXRoLmFicyhkaXN0YW5jZVkpIC8gd2luZG93LmlubmVySGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgdGhpcy4kYmFja2Ryb3AuY3NzKCdvcGFjaXR5Jywgb3BhY2l0eSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgc2NhbGUgPSAxIC0gTWF0aC5hYnMoZGlzdGFuY2VZKSAvICh3aW5kb3cuaW5uZXJXaWR0aCAqIDIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRUcmFuc2xhdGUoJGN1cnJlbnRTbGlkZSwgMCwgZGlzdGFuY2VZLCBzY2FsZSwgc2NhbGUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKE1hdGguYWJzKGRpc3RhbmNlWSkgPiAxMDApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm91dGVyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnbGctaGlkZS1pdGVtcycpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnbGctY29tcG9uZW50cy1vcGVuJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS50b3VjaEVuZCA9IGZ1bmN0aW9uIChlbmRDb29yZHMsIHN0YXJ0Q29vcmRzLCBldmVudCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIGRpc3RhbmNlO1xyXG4gICAgICAgIC8vIGtlZXAgc2xpZGUgYW5pbWF0aW9uIGZvciBhbnkgbW9kZSB3aGlsZSBkcmFnZy9zd2lwZVxyXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLm1vZGUgIT09ICdsZy1zbGlkZScpIHtcclxuICAgICAgICAgICAgdGhpcy5vdXRlci5hZGRDbGFzcygnbGctc2xpZGUnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gc2V0IHRyYW5zaXRpb24gZHVyYXRpb25cclxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgX3RoaXMuJGNvbnRhaW5lci5yZW1vdmVDbGFzcygnbGctZHJhZ2dpbmctdmVydGljYWwnKTtcclxuICAgICAgICAgICAgX3RoaXMub3V0ZXJcclxuICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnbGctZHJhZ2dpbmcgbGctaGlkZS1pdGVtcycpXHJcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ2xnLWNvbXBvbmVudHMtb3BlbicpO1xyXG4gICAgICAgICAgICB2YXIgdHJpZ2dlckNsaWNrID0gdHJ1ZTtcclxuICAgICAgICAgICAgaWYgKF90aGlzLnN3aXBlRGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcpIHtcclxuICAgICAgICAgICAgICAgIGRpc3RhbmNlID0gZW5kQ29vcmRzLnBhZ2VYIC0gc3RhcnRDb29yZHMucGFnZVg7XHJcbiAgICAgICAgICAgICAgICB2YXIgZGlzdGFuY2VBYnMgPSBNYXRoLmFicyhlbmRDb29yZHMucGFnZVggLSBzdGFydENvb3Jkcy5wYWdlWCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGlzdGFuY2UgPCAwICYmXHJcbiAgICAgICAgICAgICAgICAgICAgZGlzdGFuY2VBYnMgPiBfdGhpcy5zZXR0aW5ncy5zd2lwZVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmdvVG9OZXh0U2xpZGUodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlckNsaWNrID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChkaXN0YW5jZSA+IDAgJiZcclxuICAgICAgICAgICAgICAgICAgICBkaXN0YW5jZUFicyA+IF90aGlzLnNldHRpbmdzLnN3aXBlVGhyZXNob2xkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuZ29Ub1ByZXZTbGlkZSh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyQ2xpY2sgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChfdGhpcy5zd2lwZURpcmVjdGlvbiA9PT0gJ3ZlcnRpY2FsJykge1xyXG4gICAgICAgICAgICAgICAgZGlzdGFuY2UgPSBNYXRoLmFicyhlbmRDb29yZHMucGFnZVkgLSBzdGFydENvb3Jkcy5wYWdlWSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMuc2V0dGluZ3MuY2xvc2FibGUgJiZcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5zZXR0aW5ncy5zd2lwZVRvQ2xvc2UgJiZcclxuICAgICAgICAgICAgICAgICAgICBkaXN0YW5jZSA+IDEwMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmNsb3NlR2FsbGVyeSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLiRiYWNrZHJvcC5jc3MoJ29wYWNpdHknLCAxKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBfdGhpcy5vdXRlci5maW5kKCcubGctaXRlbScpLnJlbW92ZUF0dHIoJ3N0eWxlJyk7XHJcbiAgICAgICAgICAgIGlmICh0cmlnZ2VyQ2xpY2sgJiZcclxuICAgICAgICAgICAgICAgIE1hdGguYWJzKGVuZENvb3Jkcy5wYWdlWCAtIHN0YXJ0Q29vcmRzLnBhZ2VYKSA8IDUpIHtcclxuICAgICAgICAgICAgICAgIC8vIFRyaWdnZXIgY2xpY2sgaWYgZGlzdGFuY2UgaXMgbGVzcyB0aGFuIDUgcGl4XHJcbiAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gJExHKGV2ZW50LnRhcmdldCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMuaXNQb3N0ZXJFbGVtZW50KHRhcmdldCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5MR2VsLnRyaWdnZXIobEdFdmVudHMucG9zdGVyQ2xpY2spO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF90aGlzLnN3aXBlRGlyZWN0aW9uID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vIHJlbW92ZSBzbGlkZSBjbGFzcyBvbmNlIGRyYWcvc3dpcGUgaXMgY29tcGxldGVkIGlmIG1vZGUgaXMgbm90IHNsaWRlXHJcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICghX3RoaXMub3V0ZXIuaGFzQ2xhc3MoJ2xnLWRyYWdnaW5nJykgJiZcclxuICAgICAgICAgICAgICAgIF90aGlzLnNldHRpbmdzLm1vZGUgIT09ICdsZy1zbGlkZScpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLm91dGVyLnJlbW92ZUNsYXNzKCdsZy1zbGlkZScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgdGhpcy5zZXR0aW5ncy5zcGVlZCArIDEwMCk7XHJcbiAgICB9O1xyXG4gICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS5lbmFibGVTd2lwZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBzdGFydENvb3JkcyA9IHt9O1xyXG4gICAgICAgIHZhciBlbmRDb29yZHMgPSB7fTtcclxuICAgICAgICB2YXIgaXNNb3ZlZCA9IGZhbHNlO1xyXG4gICAgICAgIHZhciBpc1N3aXBpbmcgPSBmYWxzZTtcclxuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5lbmFibGVTd2lwZSkge1xyXG4gICAgICAgICAgICB0aGlzLiRpbm5lci5vbigndG91Y2hzdGFydC5sZycsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5kcmFnT3JTd2lwZUVuYWJsZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgdmFyICRpdGVtID0gX3RoaXMuZ2V0U2xpZGVJdGVtKF90aGlzLmluZGV4KTtcclxuICAgICAgICAgICAgICAgIGlmICgoJExHKGUudGFyZ2V0KS5oYXNDbGFzcygnbGctaXRlbScpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgJGl0ZW0uZ2V0KCkuY29udGFpbnMoZS50YXJnZXQpKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICFfdGhpcy5vdXRlci5oYXNDbGFzcygnbGctem9vbWVkJykgJiZcclxuICAgICAgICAgICAgICAgICAgICAhX3RoaXMubGdCdXN5ICYmXHJcbiAgICAgICAgICAgICAgICAgICAgZS50b3VjaGVzLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlzU3dpcGluZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMudG91Y2hBY3Rpb24gPSAnc3dpcGUnO1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLm1hbmFnZVN3aXBlQ2xhc3MoKTtcclxuICAgICAgICAgICAgICAgICAgICBzdGFydENvb3JkcyA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFnZVg6IGUudG91Y2hlc1swXS5wYWdlWCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFnZVk6IGUudG91Y2hlc1swXS5wYWdlWSxcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy4kaW5uZXIub24oJ3RvdWNobW92ZS5sZycsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNTd2lwaW5nICYmXHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMudG91Y2hBY3Rpb24gPT09ICdzd2lwZScgJiZcclxuICAgICAgICAgICAgICAgICAgICBlLnRvdWNoZXMubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZW5kQ29vcmRzID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYWdlWDogZS50b3VjaGVzWzBdLnBhZ2VYLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYWdlWTogZS50b3VjaGVzWzBdLnBhZ2VZLFxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMudG91Y2hNb3ZlKHN0YXJ0Q29vcmRzLCBlbmRDb29yZHMsIGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlzTW92ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy4kaW5uZXIub24oJ3RvdWNoZW5kLmxnJywgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMudG91Y2hBY3Rpb24gPT09ICdzd2lwZScpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNNb3ZlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpc01vdmVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnRvdWNoRW5kKGVuZENvb3Jkcywgc3RhcnRDb29yZHMsIGV2ZW50KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoaXNTd2lwaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSAkTEcoZXZlbnQudGFyZ2V0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLmlzUG9zdGVyRWxlbWVudCh0YXJnZXQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5MR2VsLnRyaWdnZXIobEdFdmVudHMucG9zdGVyQ2xpY2spO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnRvdWNoQWN0aW9uID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgIGlzU3dpcGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS5lbmFibGVEcmFnID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHN0YXJ0Q29vcmRzID0ge307XHJcbiAgICAgICAgdmFyIGVuZENvb3JkcyA9IHt9O1xyXG4gICAgICAgIHZhciBpc0RyYWdpbmcgPSBmYWxzZTtcclxuICAgICAgICB2YXIgaXNNb3ZlZCA9IGZhbHNlO1xyXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmVuYWJsZURyYWcpIHtcclxuICAgICAgICAgICAgdGhpcy5vdXRlci5vbignbW91c2Vkb3duLmxnJywgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLmRyYWdPclN3aXBlRW5hYmxlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB2YXIgJGl0ZW0gPSBfdGhpcy5nZXRTbGlkZUl0ZW0oX3RoaXMuaW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCRMRyhlLnRhcmdldCkuaGFzQ2xhc3MoJ2xnLWl0ZW0nKSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICRpdGVtLmdldCgpLmNvbnRhaW5zKGUudGFyZ2V0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghX3RoaXMub3V0ZXIuaGFzQ2xhc3MoJ2xnLXpvb21lZCcpICYmICFfdGhpcy5sZ0J1c3kpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIV90aGlzLmxnQnVzeSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMubWFuYWdlU3dpcGVDbGFzcygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRDb29yZHMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnZVg6IGUucGFnZVgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnZVk6IGUucGFnZVksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNEcmFnaW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICoqIEZpeCBmb3Igd2Via2l0IGN1cnNvciBpc3N1ZSBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9MjY3MjNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLm91dGVyLmdldCgpLnNjcm9sbExlZnQgKz0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLm91dGVyLmdldCgpLnNjcm9sbExlZnQgLT0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLm91dGVyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdsZy1ncmFiJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ2xnLWdyYWJiaW5nJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5MR2VsLnRyaWdnZXIobEdFdmVudHMuZHJhZ1N0YXJ0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICRMRyh3aW5kb3cpLm9uKFwibW91c2Vtb3ZlLmxnLmdsb2JhbFwiICsgdGhpcy5sZ0lkLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGlzRHJhZ2luZyAmJiBfdGhpcy5sZ09wZW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlzTW92ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGVuZENvb3JkcyA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFnZVg6IGUucGFnZVgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2VZOiBlLnBhZ2VZLFxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMudG91Y2hNb3ZlKHN0YXJ0Q29vcmRzLCBlbmRDb29yZHMpO1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLkxHZWwudHJpZ2dlcihsR0V2ZW50cy5kcmFnTW92ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAkTEcod2luZG93KS5vbihcIm1vdXNldXAubGcuZ2xvYmFsXCIgKyB0aGlzLmxnSWQsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFfdGhpcy5sZ09wZW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSAkTEcoZXZlbnQudGFyZ2V0KTtcclxuICAgICAgICAgICAgICAgIGlmIChpc01vdmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXNNb3ZlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnRvdWNoRW5kKGVuZENvb3Jkcywgc3RhcnRDb29yZHMsIGV2ZW50KTtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5MR2VsLnRyaWdnZXIobEdFdmVudHMuZHJhZ0VuZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChfdGhpcy5pc1Bvc3RlckVsZW1lbnQodGFyZ2V0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLkxHZWwudHJpZ2dlcihsR0V2ZW50cy5wb3N0ZXJDbGljayk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBQcmV2ZW50IGV4ZWN1dGlvbiBvbiBjbGlja1xyXG4gICAgICAgICAgICAgICAgaWYgKGlzRHJhZ2luZykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlzRHJhZ2luZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLm91dGVyLnJlbW92ZUNsYXNzKCdsZy1ncmFiYmluZycpLmFkZENsYXNzKCdsZy1ncmFiJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLnRyaWdnZXJQb3N0ZXJDbGljayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuJGlubmVyLm9uKCdjbGljay5sZycsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICBpZiAoIV90aGlzLmRyYWdPclN3aXBlRW5hYmxlZCAmJlxyXG4gICAgICAgICAgICAgICAgX3RoaXMuaXNQb3N0ZXJFbGVtZW50KCRMRyhldmVudC50YXJnZXQpKSkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuTEdlbC50cmlnZ2VyKGxHRXZlbnRzLnBvc3RlckNsaWNrKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIExpZ2h0R2FsbGVyeS5wcm90b3R5cGUubWFuYWdlU3dpcGVDbGFzcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RvdWNoTmV4dCA9IHRoaXMuaW5kZXggKyAxO1xyXG4gICAgICAgIHZhciBfdG91Y2hQcmV2ID0gdGhpcy5pbmRleCAtIDE7XHJcbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MubG9vcCAmJiB0aGlzLmdhbGxlcnlJdGVtcy5sZW5ndGggPiAyKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmluZGV4ID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBfdG91Y2hQcmV2ID0gdGhpcy5nYWxsZXJ5SXRlbXMubGVuZ3RoIC0gMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLmluZGV4ID09PSB0aGlzLmdhbGxlcnlJdGVtcy5sZW5ndGggLSAxKSB7XHJcbiAgICAgICAgICAgICAgICBfdG91Y2hOZXh0ID0gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLm91dGVyLmZpbmQoJy5sZy1pdGVtJykucmVtb3ZlQ2xhc3MoJ2xnLW5leHQtc2xpZGUgbGctcHJldi1zbGlkZScpO1xyXG4gICAgICAgIGlmIChfdG91Y2hQcmV2ID4gLTEpIHtcclxuICAgICAgICAgICAgdGhpcy5nZXRTbGlkZUl0ZW0oX3RvdWNoUHJldikuYWRkQ2xhc3MoJ2xnLXByZXYtc2xpZGUnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5nZXRTbGlkZUl0ZW0oX3RvdWNoTmV4dCkuYWRkQ2xhc3MoJ2xnLW5leHQtc2xpZGUnKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEdvIHRvIG5leHQgc2xpZGVcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gZnJvbVRvdWNoIC0gdHJ1ZSBpZiBzbGlkZSBmdW5jdGlvbiBjYWxsZWQgdmlhIHRvdWNoIGV2ZW50XHJcbiAgICAgKiBAY2F0ZWdvcnkgbEdQdWJsaWNNZXRob2RzXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogIGNvbnN0IHBsdWdpbiA9IGxpZ2h0R2FsbGVyeSgpO1xyXG4gICAgICogIHBsdWdpbi5nb1RvTmV4dFNsaWRlKCk7XHJcbiAgICAgKiBAc2VlIDxhIGhyZWY9XCIvZGVtb3MvbWV0aG9kcy9cIj5EZW1vPC9hPlxyXG4gICAgICovXHJcbiAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLmdvVG9OZXh0U2xpZGUgPSBmdW5jdGlvbiAoZnJvbVRvdWNoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgX2xvb3AgPSB0aGlzLnNldHRpbmdzLmxvb3A7XHJcbiAgICAgICAgaWYgKGZyb21Ub3VjaCAmJiB0aGlzLmdhbGxlcnlJdGVtcy5sZW5ndGggPCAzKSB7XHJcbiAgICAgICAgICAgIF9sb29wID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghdGhpcy5sZ0J1c3kpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaW5kZXggKyAxIDwgdGhpcy5nYWxsZXJ5SXRlbXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmluZGV4Kys7XHJcbiAgICAgICAgICAgICAgICB0aGlzLkxHZWwudHJpZ2dlcihsR0V2ZW50cy5iZWZvcmVOZXh0U2xpZGUsIHtcclxuICAgICAgICAgICAgICAgICAgICBpbmRleDogdGhpcy5pbmRleCxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zbGlkZSh0aGlzLmluZGV4LCAhIWZyb21Ub3VjaCwgZmFsc2UsICduZXh0Jyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoX2xvb3ApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmluZGV4ID0gMDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLkxHZWwudHJpZ2dlcihsR0V2ZW50cy5iZWZvcmVOZXh0U2xpZGUsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXg6IHRoaXMuaW5kZXgsXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zbGlkZSh0aGlzLmluZGV4LCAhIWZyb21Ub3VjaCwgZmFsc2UsICduZXh0Jyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzLnNldHRpbmdzLnNsaWRlRW5kQW5pbWF0aW9uICYmICFmcm9tVG91Y2gpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm91dGVyLmFkZENsYXNzKCdsZy1yaWdodC1lbmQnKTtcclxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMub3V0ZXIucmVtb3ZlQ2xhc3MoJ2xnLXJpZ2h0LWVuZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIDQwMCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBHbyB0byBwcmV2aW91cyBzbGlkZXNcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gZnJvbVRvdWNoIC0gdHJ1ZSBpZiBzbGlkZSBmdW5jdGlvbiBjYWxsZWQgdmlhIHRvdWNoIGV2ZW50XHJcbiAgICAgKiBAY2F0ZWdvcnkgbEdQdWJsaWNNZXRob2RzXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogIGNvbnN0IHBsdWdpbiA9IGxpZ2h0R2FsbGVyeSh7fSk7XHJcbiAgICAgKiAgcGx1Z2luLmdvVG9QcmV2U2xpZGUoKTtcclxuICAgICAqIEBzZWUgPGEgaHJlZj1cIi9kZW1vcy9tZXRob2RzL1wiPkRlbW88L2E+XHJcbiAgICAgKlxyXG4gICAgICovXHJcbiAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLmdvVG9QcmV2U2xpZGUgPSBmdW5jdGlvbiAoZnJvbVRvdWNoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgX2xvb3AgPSB0aGlzLnNldHRpbmdzLmxvb3A7XHJcbiAgICAgICAgaWYgKGZyb21Ub3VjaCAmJiB0aGlzLmdhbGxlcnlJdGVtcy5sZW5ndGggPCAzKSB7XHJcbiAgICAgICAgICAgIF9sb29wID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghdGhpcy5sZ0J1c3kpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaW5kZXggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmluZGV4LS07XHJcbiAgICAgICAgICAgICAgICB0aGlzLkxHZWwudHJpZ2dlcihsR0V2ZW50cy5iZWZvcmVQcmV2U2xpZGUsIHtcclxuICAgICAgICAgICAgICAgICAgICBpbmRleDogdGhpcy5pbmRleCxcclxuICAgICAgICAgICAgICAgICAgICBmcm9tVG91Y2g6IGZyb21Ub3VjaCxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zbGlkZSh0aGlzLmluZGV4LCAhIWZyb21Ub3VjaCwgZmFsc2UsICdwcmV2Jyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoX2xvb3ApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmluZGV4ID0gdGhpcy5nYWxsZXJ5SXRlbXMubGVuZ3RoIC0gMTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLkxHZWwudHJpZ2dlcihsR0V2ZW50cy5iZWZvcmVQcmV2U2xpZGUsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXg6IHRoaXMuaW5kZXgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyb21Ub3VjaDogZnJvbVRvdWNoLFxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2xpZGUodGhpcy5pbmRleCwgISFmcm9tVG91Y2gsIGZhbHNlLCAncHJldicpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5zZXR0aW5ncy5zbGlkZUVuZEFuaW1hdGlvbiAmJiAhZnJvbVRvdWNoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vdXRlci5hZGRDbGFzcygnbGctbGVmdC1lbmQnKTtcclxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMub3V0ZXIucmVtb3ZlQ2xhc3MoJ2xnLWxlZnQtZW5kJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgNDAwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLmtleVByZXNzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgJExHKHdpbmRvdykub24oXCJrZXlkb3duLmxnLmdsb2JhbFwiICsgdGhpcy5sZ0lkLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBpZiAoX3RoaXMubGdPcGVuZWQgJiZcclxuICAgICAgICAgICAgICAgIF90aGlzLnNldHRpbmdzLmVzY0tleSA9PT0gdHJ1ZSAmJlxyXG4gICAgICAgICAgICAgICAgZS5rZXlDb2RlID09PSAyNykge1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLnNldHRpbmdzLmFsbG93TWVkaWFPdmVybGFwICYmXHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMub3V0ZXIuaGFzQ2xhc3MoJ2xnLWNhbi10b2dnbGUnKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLm91dGVyLmhhc0NsYXNzKCdsZy1jb21wb25lbnRzLW9wZW4nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLm91dGVyLnJlbW92ZUNsYXNzKCdsZy1jb21wb25lbnRzLW9wZW4nKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmNsb3NlR2FsbGVyeSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChfdGhpcy5sZ09wZW5lZCAmJiBfdGhpcy5nYWxsZXJ5SXRlbXMubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGUua2V5Q29kZSA9PT0gMzcpIHtcclxuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuZ29Ub1ByZXZTbGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGUua2V5Q29kZSA9PT0gMzkpIHtcclxuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuZ29Ub05leHRTbGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS5hcnJvdyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuZ2V0RWxlbWVudEJ5SWQoJ2xnLXByZXYnKS5vbignY2xpY2subGcnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIF90aGlzLmdvVG9QcmV2U2xpZGUoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmdldEVsZW1lbnRCeUlkKCdsZy1uZXh0Jykub24oJ2NsaWNrLmxnJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBfdGhpcy5nb1RvTmV4dFNsaWRlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS5hcnJvd0Rpc2FibGUgPSBmdW5jdGlvbiAoaW5kZXgpIHtcclxuICAgICAgICAvLyBEaXNhYmxlIGFycm93cyBpZiBzZXR0aW5ncy5oaWRlQ29udHJvbE9uRW5kIGlzIHRydWVcclxuICAgICAgICBpZiAoIXRoaXMuc2V0dGluZ3MubG9vcCAmJiB0aGlzLnNldHRpbmdzLmhpZGVDb250cm9sT25FbmQpIHtcclxuICAgICAgICAgICAgdmFyICRwcmV2ID0gdGhpcy5nZXRFbGVtZW50QnlJZCgnbGctcHJldicpO1xyXG4gICAgICAgICAgICB2YXIgJG5leHQgPSB0aGlzLmdldEVsZW1lbnRCeUlkKCdsZy1uZXh0Jyk7XHJcbiAgICAgICAgICAgIGlmIChpbmRleCArIDEgPT09IHRoaXMuZ2FsbGVyeUl0ZW1zLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgJG5leHQuYXR0cignZGlzYWJsZWQnLCAnZGlzYWJsZWQnKS5hZGRDbGFzcygnZGlzYWJsZWQnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICRuZXh0LnJlbW92ZUF0dHIoJ2Rpc2FibGVkJykucmVtb3ZlQ2xhc3MoJ2Rpc2FibGVkJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGluZGV4ID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAkcHJldi5hdHRyKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpLmFkZENsYXNzKCdkaXNhYmxlZCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgJHByZXYucmVtb3ZlQXR0cignZGlzYWJsZWQnKS5yZW1vdmVDbGFzcygnZGlzYWJsZWQnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLnNldFRyYW5zbGF0ZSA9IGZ1bmN0aW9uICgkZWwsIHhWYWx1ZSwgeVZhbHVlLCBzY2FsZVgsIHNjYWxlWSkge1xyXG4gICAgICAgIGlmIChzY2FsZVggPT09IHZvaWQgMCkgeyBzY2FsZVggPSAxOyB9XHJcbiAgICAgICAgaWYgKHNjYWxlWSA9PT0gdm9pZCAwKSB7IHNjYWxlWSA9IDE7IH1cclxuICAgICAgICAkZWwuY3NzKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlM2QoJyArXHJcbiAgICAgICAgICAgIHhWYWx1ZSArXHJcbiAgICAgICAgICAgICdweCwgJyArXHJcbiAgICAgICAgICAgIHlWYWx1ZSArXHJcbiAgICAgICAgICAgICdweCwgMHB4KSBzY2FsZTNkKCcgK1xyXG4gICAgICAgICAgICBzY2FsZVggK1xyXG4gICAgICAgICAgICAnLCAnICtcclxuICAgICAgICAgICAgc2NhbGVZICtcclxuICAgICAgICAgICAgJywgMSknKTtcclxuICAgIH07XHJcbiAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLm1vdXNld2hlZWwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgbGFzdENhbGwgPSAwO1xyXG4gICAgICAgIHRoaXMub3V0ZXIub24oJ3doZWVsLmxnJywgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgaWYgKCFlLmRlbHRhWSB8fCBfdGhpcy5nYWxsZXJ5SXRlbXMubGVuZ3RoIDwgMikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgdmFyIG5vdyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG4gICAgICAgICAgICBpZiAobm93IC0gbGFzdENhbGwgPCAxMDAwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbGFzdENhbGwgPSBub3c7XHJcbiAgICAgICAgICAgIGlmIChlLmRlbHRhWSA+IDApIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLmdvVG9OZXh0U2xpZGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChlLmRlbHRhWSA8IDApIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLmdvVG9QcmV2U2xpZGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIExpZ2h0R2FsbGVyeS5wcm90b3R5cGUuaXNTbGlkZUVsZW1lbnQgPSBmdW5jdGlvbiAodGFyZ2V0KSB7XHJcbiAgICAgICAgcmV0dXJuICh0YXJnZXQuaGFzQ2xhc3MoJ2xnLW91dGVyJykgfHxcclxuICAgICAgICAgICAgdGFyZ2V0Lmhhc0NsYXNzKCdsZy1pdGVtJykgfHxcclxuICAgICAgICAgICAgdGFyZ2V0Lmhhc0NsYXNzKCdsZy1pbWctd3JhcCcpKTtcclxuICAgIH07XHJcbiAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLmlzUG9zdGVyRWxlbWVudCA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcclxuICAgICAgICB2YXIgcGxheUJ1dHRvbiA9IHRoaXMuZ2V0U2xpZGVJdGVtKHRoaXMuaW5kZXgpXHJcbiAgICAgICAgICAgIC5maW5kKCcubGctdmlkZW8tcGxheS1idXR0b24nKVxyXG4gICAgICAgICAgICAuZ2V0KCk7XHJcbiAgICAgICAgcmV0dXJuICh0YXJnZXQuaGFzQ2xhc3MoJ2xnLXZpZGVvLXBvc3RlcicpIHx8XHJcbiAgICAgICAgICAgIHRhcmdldC5oYXNDbGFzcygnbGctdmlkZW8tcGxheS1idXR0b24nKSB8fFxyXG4gICAgICAgICAgICAocGxheUJ1dHRvbiAmJiBwbGF5QnV0dG9uLmNvbnRhaW5zKHRhcmdldC5nZXQoKSkpKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIE1heGltaXplIG1pbmltaXplIGlubGluZSBnYWxsZXJ5LlxyXG4gICAgICogQGNhdGVnb3J5IGxHUHVibGljTWV0aG9kc1xyXG4gICAgICovXHJcbiAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLnRvZ2dsZU1heGltaXplID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5nZXRFbGVtZW50QnlJZCgnbGctbWF4aW1pemUnKS5vbignY2xpY2subGcnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIF90aGlzLiRjb250YWluZXIudG9nZ2xlQ2xhc3MoJ2xnLWlubGluZScpO1xyXG4gICAgICAgICAgICBfdGhpcy5yZWZyZXNoT25SZXNpemUoKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLmludmFsaWRhdGVJdGVtcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5pdGVtcy5sZW5ndGg7IGluZGV4KyspIHtcclxuICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzLml0ZW1zW2luZGV4XTtcclxuICAgICAgICAgICAgdmFyICRlbGVtZW50ID0gJExHKGVsZW1lbnQpO1xyXG4gICAgICAgICAgICAkZWxlbWVudC5vZmYoXCJjbGljay5sZ2N1c3RvbS1pdGVtLVwiICsgJGVsZW1lbnQuYXR0cignZGF0YS1sZy1pZCcpKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS50cmFwRm9jdXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLiRjb250YWluZXIuZ2V0KCkuZm9jdXMoe1xyXG4gICAgICAgICAgICBwcmV2ZW50U2Nyb2xsOiB0cnVlLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgICRMRyh3aW5kb3cpLm9uKFwia2V5ZG93bi5sZy5nbG9iYWxcIiArIHRoaXMubGdJZCwgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgaWYgKCFfdGhpcy5sZ09wZW5lZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBpc1RhYlByZXNzZWQgPSBlLmtleSA9PT0gJ1RhYicgfHwgZS5rZXlDb2RlID09PSA5O1xyXG4gICAgICAgICAgICBpZiAoIWlzVGFiUHJlc3NlZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBmb2N1c2FibGVFbHMgPSB1dGlscy5nZXRGb2N1c2FibGVFbGVtZW50cyhfdGhpcy4kY29udGFpbmVyLmdldCgpKTtcclxuICAgICAgICAgICAgdmFyIGZpcnN0Rm9jdXNhYmxlRWwgPSBmb2N1c2FibGVFbHNbMF07XHJcbiAgICAgICAgICAgIHZhciBsYXN0Rm9jdXNhYmxlRWwgPSBmb2N1c2FibGVFbHNbZm9jdXNhYmxlRWxzLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgICBpZiAoZS5zaGlmdEtleSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IGZpcnN0Rm9jdXNhYmxlRWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBsYXN0Rm9jdXNhYmxlRWwuZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCA9PT0gbGFzdEZvY3VzYWJsZUVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlyc3RGb2N1c2FibGVFbC5mb2N1cygpO1xyXG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIExpZ2h0R2FsbGVyeS5wcm90b3R5cGUubWFuYWdlQ2xvc2VHYWxsZXJ5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgaWYgKCF0aGlzLnNldHRpbmdzLmNsb3NhYmxlKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgdmFyIG1vdXNlZG93biA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuZ2V0RWxlbWVudEJ5SWQoJ2xnLWNsb3NlJykub24oJ2NsaWNrLmxnJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBfdGhpcy5jbG9zZUdhbGxlcnkoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5jbG9zZU9uVGFwKSB7XHJcbiAgICAgICAgICAgIC8vIElmIHlvdSBkcmFnIHRoZSBzbGlkZSBhbmQgcmVsZWFzZSBvdXRzaWRlIGdhbGxlcnkgZ2V0cyBjbG9zZSBvbiBjaHJvbWVcclxuICAgICAgICAgICAgLy8gZm9yIHByZXZlbnRpbmcgdGhpcyBjaGVjayBtb3VzZWRvd24gYW5kIG1vdXNldXAgaGFwcGVuZWQgb24gLmxnLWl0ZW0gb3IgbGctb3V0ZXJcclxuICAgICAgICAgICAgdGhpcy5vdXRlci5vbignbW91c2Vkb3duLmxnJywgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSAkTEcoZS50YXJnZXQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLmlzU2xpZGVFbGVtZW50KHRhcmdldCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBtb3VzZWRvd24gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbW91c2Vkb3duID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB0aGlzLm91dGVyLm9uKCdtb3VzZW1vdmUubGcnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBtb3VzZWRvd24gPSBmYWxzZTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRoaXMub3V0ZXIub24oJ21vdXNldXAubGcnLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9ICRMRyhlLnRhcmdldCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMuaXNTbGlkZUVsZW1lbnQodGFyZ2V0KSAmJiBtb3VzZWRvd24pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIV90aGlzLm91dGVyLmhhc0NsYXNzKCdsZy1kcmFnZ2luZycpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmNsb3NlR2FsbGVyeSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQ2xvc2UgbGlnaHRHYWxsZXJ5IGlmIGl0IGlzIG9wZW5lZC5cclxuICAgICAqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gSWYgY2xvc2FibGUgaXMgZmFsc2UgaW4gdGhlIHNldHRpbmdzLCB5b3UgbmVlZCB0byBwYXNzIHRydWUgdmlhIGNsb3NlR2FsbGVyeSBtZXRob2QgdG8gZm9yY2UgY2xvc2UgZ2FsbGVyeVxyXG4gICAgICogQHJldHVybiByZXR1cm5zIHRoZSBlc3RpbWF0ZWQgdGltZSB0byBjbG9zZSBnYWxsZXJ5IGNvbXBsZXRlbHkgaW5jbHVkaW5nIHRoZSBjbG9zZSBhbmltYXRpb24gZHVyYXRpb25cclxuICAgICAqIEBjYXRlZ29yeSBsR1B1YmxpY01ldGhvZHNcclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKiAgY29uc3QgcGx1Z2luID0gbGlnaHRHYWxsZXJ5KCk7XHJcbiAgICAgKiAgcGx1Z2luLmNsb3NlR2FsbGVyeSgpO1xyXG4gICAgICpcclxuICAgICAqL1xyXG4gICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS5jbG9zZUdhbGxlcnkgPSBmdW5jdGlvbiAoZm9yY2UpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGlmICghdGhpcy5sZ09wZW5lZCB8fCAoIXRoaXMuc2V0dGluZ3MuY2xvc2FibGUgJiYgIWZvcmNlKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5MR2VsLnRyaWdnZXIobEdFdmVudHMuYmVmb3JlQ2xvc2UpO1xyXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLnJlc2V0U2Nyb2xsUG9zaXRpb24gJiYgIXRoaXMuc2V0dGluZ3MuaGlkZVNjcm9sbGJhcikge1xyXG4gICAgICAgICAgICAkTEcod2luZG93KS5zY3JvbGxUb3AodGhpcy5wcmV2U2Nyb2xsVG9wKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGN1cnJlbnRJdGVtID0gdGhpcy5pdGVtc1t0aGlzLmluZGV4XTtcclxuICAgICAgICB2YXIgdHJhbnNmb3JtO1xyXG4gICAgICAgIGlmICh0aGlzLnpvb21Gcm9tT3JpZ2luICYmIGN1cnJlbnRJdGVtKSB7XHJcbiAgICAgICAgICAgIHZhciBfYSA9IHRoaXMubWVkaWFDb250YWluZXJQb3NpdGlvbiwgdG9wXzQgPSBfYS50b3AsIGJvdHRvbSA9IF9hLmJvdHRvbTtcclxuICAgICAgICAgICAgdmFyIF9iID0gdGhpcy5nYWxsZXJ5SXRlbXNbdGhpcy5pbmRleF0sIF9fc2xpZGVWaWRlb0luZm8gPSBfYi5fX3NsaWRlVmlkZW9JbmZvLCBwb3N0ZXIgPSBfYi5wb3N0ZXI7XHJcbiAgICAgICAgICAgIHZhciBpbWFnZVNpemUgPSB1dGlscy5nZXRTaXplKGN1cnJlbnRJdGVtLCB0aGlzLm91dGVyLCB0b3BfNCArIGJvdHRvbSwgX19zbGlkZVZpZGVvSW5mbyAmJiBwb3N0ZXIgJiYgdGhpcy5zZXR0aW5ncy52aWRlb01heFNpemUpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm0gPSB1dGlscy5nZXRUcmFuc2Zvcm0oY3VycmVudEl0ZW0sIHRoaXMub3V0ZXIsIHRvcF80LCBib3R0b20sIGltYWdlU2l6ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnpvb21Gcm9tT3JpZ2luICYmIHRyYW5zZm9ybSkge1xyXG4gICAgICAgICAgICB0aGlzLm91dGVyLmFkZENsYXNzKCdsZy1jbG9zaW5nIGxnLXpvb20tZnJvbS1pbWFnZScpO1xyXG4gICAgICAgICAgICB0aGlzLmdldFNsaWRlSXRlbSh0aGlzLmluZGV4KVxyXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKCdsZy1zdGFydC1lbmQtcHJvZ3Jlc3MnKVxyXG4gICAgICAgICAgICAgICAgLmNzcygndHJhbnNpdGlvbi1kdXJhdGlvbicsIHRoaXMuc2V0dGluZ3Muc3RhcnRBbmltYXRpb25EdXJhdGlvbiArICdtcycpXHJcbiAgICAgICAgICAgICAgICAuY3NzKCd0cmFuc2Zvcm0nLCB0cmFuc2Zvcm0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5vdXRlci5hZGRDbGFzcygnbGctaGlkZS1pdGVtcycpO1xyXG4gICAgICAgICAgICAvLyBsZy16b29tLWZyb20taW1hZ2UgaXMgdXNlZCBmb3Igc2V0dGluZyB0aGUgb3BhY2l0eSB0byAxIGlmIHpvb21Gcm9tT3JpZ2luIGlzIHRydWVcclxuICAgICAgICAgICAgLy8gSWYgdGhlIGNsb3NpbmcgaXRlbSBkb2Vzbid0IGhhdmUgdGhlIGxnLXNpemUgYXR0cmlidXRlLCByZW1vdmUgdGhpcyBjbGFzcyB0byBhdm9pZCB0aGUgY2xvc2luZyBjc3MgY29uZmxpY3RzXHJcbiAgICAgICAgICAgIHRoaXMub3V0ZXIucmVtb3ZlQ2xhc3MoJ2xnLXpvb20tZnJvbS1pbWFnZScpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBVbmJpbmQgYWxsIGV2ZW50cyBhZGRlZCBieSBsaWdodEdhbGxlcnlcclxuICAgICAgICAvLyBAdG9kb1xyXG4gICAgICAgIC8vdGhpcy4kZWwub2ZmKCcubGcudG0nKTtcclxuICAgICAgICB0aGlzLmRlc3Ryb3lNb2R1bGVzKCk7XHJcbiAgICAgICAgdGhpcy5sR2FsbGVyeU9uID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5pc0R1bW15SW1hZ2VSZW1vdmVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy56b29tRnJvbU9yaWdpbiA9IHRoaXMuc2V0dGluZ3Muem9vbUZyb21PcmlnaW47XHJcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuaGlkZUJhclRpbWVvdXQpO1xyXG4gICAgICAgIHRoaXMuaGlkZUJhclRpbWVvdXQgPSBmYWxzZTtcclxuICAgICAgICAkTEcoJ2h0bWwnKS5yZW1vdmVDbGFzcygnbGctb24nKTtcclxuICAgICAgICB0aGlzLm91dGVyLnJlbW92ZUNsYXNzKCdsZy12aXNpYmxlIGxnLWNvbXBvbmVudHMtb3BlbicpO1xyXG4gICAgICAgIC8vIFJlc2V0dGluZyBvcGFjaXR5IHRvIDAgaXNkIHJlcXVpcmVkIGFzICB2ZXJ0aWNhbCBzd2lwZSB0byBjbG9zZSBmdW5jdGlvbiBhZGRzIGlubGluZSBvcGFjaXR5LlxyXG4gICAgICAgIHRoaXMuJGJhY2tkcm9wLnJlbW92ZUNsYXNzKCdpbicpLmNzcygnb3BhY2l0eScsIDApO1xyXG4gICAgICAgIHZhciByZW1vdmVUaW1lb3V0ID0gdGhpcy56b29tRnJvbU9yaWdpbiAmJiB0cmFuc2Zvcm1cclxuICAgICAgICAgICAgPyBNYXRoLm1heCh0aGlzLnNldHRpbmdzLnN0YXJ0QW5pbWF0aW9uRHVyYXRpb24sIHRoaXMuc2V0dGluZ3MuYmFja2Ryb3BEdXJhdGlvbilcclxuICAgICAgICAgICAgOiB0aGlzLnNldHRpbmdzLmJhY2tkcm9wRHVyYXRpb247XHJcbiAgICAgICAgdGhpcy4kY29udGFpbmVyLnJlbW92ZUNsYXNzKCdsZy1zaG93LWluJyk7XHJcbiAgICAgICAgLy8gT25jZSB0aGUgY2xvc2lnbiBhbmltYXRpb24gaXMgY29tcGxldGVkIGFuZCBnYWxsZXJ5IGlzIGludmlzaWJsZVxyXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoX3RoaXMuem9vbUZyb21PcmlnaW4gJiYgdHJhbnNmb3JtKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5vdXRlci5yZW1vdmVDbGFzcygnbGctem9vbS1mcm9tLWltYWdlJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgX3RoaXMuJGNvbnRhaW5lci5yZW1vdmVDbGFzcygnbGctc2hvdycpO1xyXG4gICAgICAgICAgICAvLyBSZXNldCBzY3JvbGxiYXJcclxuICAgICAgICAgICAgX3RoaXMucmVzZXRTY3JvbGxCYXIoKTtcclxuICAgICAgICAgICAgLy8gTmVlZCB0byByZW1vdmUgaW5saW5lIG9wYWNpdHkgYXMgaXQgaXMgdXNlZCBpbiB0aGUgc3R5bGVzaGVldCBhcyB3ZWxsXHJcbiAgICAgICAgICAgIF90aGlzLiRiYWNrZHJvcFxyXG4gICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ3N0eWxlJylcclxuICAgICAgICAgICAgICAgIC5jc3MoJ3RyYW5zaXRpb24tZHVyYXRpb24nLCBfdGhpcy5zZXR0aW5ncy5iYWNrZHJvcER1cmF0aW9uICsgJ21zJyk7XHJcbiAgICAgICAgICAgIF90aGlzLm91dGVyLnJlbW92ZUNsYXNzKFwibGctY2xvc2luZyBcIiArIF90aGlzLnNldHRpbmdzLnN0YXJ0Q2xhc3MpO1xyXG4gICAgICAgICAgICBfdGhpcy5nZXRTbGlkZUl0ZW0oX3RoaXMuaW5kZXgpLnJlbW92ZUNsYXNzKCdsZy1zdGFydC1lbmQtcHJvZ3Jlc3MnKTtcclxuICAgICAgICAgICAgX3RoaXMuJGlubmVyLmVtcHR5KCk7XHJcbiAgICAgICAgICAgIGlmIChfdGhpcy5sZ09wZW5lZCkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuTEdlbC50cmlnZ2VyKGxHRXZlbnRzLmFmdGVyQ2xvc2UsIHtcclxuICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZTogX3RoaXMsXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoX3RoaXMuJGNvbnRhaW5lci5nZXQoKSkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuJGNvbnRhaW5lci5nZXQoKS5ibHVyKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgX3RoaXMubGdPcGVuZWQgPSBmYWxzZTtcclxuICAgICAgICB9LCByZW1vdmVUaW1lb3V0ICsgMTAwKTtcclxuICAgICAgICByZXR1cm4gcmVtb3ZlVGltZW91dCArIDEwMDtcclxuICAgIH07XHJcbiAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLmluaXRNb2R1bGVzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMucGx1Z2lucy5mb3JFYWNoKGZ1bmN0aW9uIChtb2R1bGUpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIG1vZHVsZS5pbml0KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwibGlnaHRHYWxsZXJ5Oi0gbWFrZSBzdXJlIGxpZ2h0R2FsbGVyeSBtb2R1bGUgaXMgcHJvcGVybHkgaW5pdGlhdGVkXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS5kZXN0cm95TW9kdWxlcyA9IGZ1bmN0aW9uIChkZXN0cm95KSB7XHJcbiAgICAgICAgdGhpcy5wbHVnaW5zLmZvckVhY2goZnVuY3Rpb24gKG1vZHVsZSkge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGRlc3Ryb3kpIHtcclxuICAgICAgICAgICAgICAgICAgICBtb2R1bGUuZGVzdHJveSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kdWxlLmNsb3NlR2FsbGVyeSAmJiBtb2R1bGUuY2xvc2VHYWxsZXJ5KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwibGlnaHRHYWxsZXJ5Oi0gbWFrZSBzdXJlIGxpZ2h0R2FsbGVyeSBtb2R1bGUgaXMgcHJvcGVybHkgZGVzdHJveWVkXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZWZyZXNoIGxpZ2h0R2FsbGVyeSB3aXRoIG5ldyBzZXQgb2YgY2hpbGRyZW4uXHJcbiAgICAgKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIFRoaXMgaXMgdXNlZnVsIHRvIHVwZGF0ZSB0aGUgZ2FsbGVyeSB3aGVuIHRoZSBjaGlsZCBlbGVtZW50cyBhcmUgY2hhbmdlZCB3aXRob3V0IGNhbGxpbmcgZGVzdHJveSBtZXRob2QuXHJcbiAgICAgKlxyXG4gICAgICogSWYgeW91IGFyZSB1c2luZyBkeW5hbWljIG1vZGUsIHlvdSBjYW4gcGFzcyB0aGUgbW9kaWZpZWQgYXJyYXkgb2YgZHluYW1pY0VsIGFzIHRoZSBmaXJzdCBwYXJhbWV0ZXIgdG8gcmVmcmVzaCB0aGUgZHluYW1pYyBnYWxsZXJ5XHJcbiAgICAgKiBAc2VlIDxhIGhyZWY9XCIvZGVtb3MvZHluYW1pYy1tb2RlL1wiPkRlbW88L2E+XHJcbiAgICAgKiBAY2F0ZWdvcnkgbEdQdWJsaWNNZXRob2RzXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogIGNvbnN0IHBsdWdpbiA9IGxpZ2h0R2FsbGVyeSgpO1xyXG4gICAgICogIC8vIERlbGV0ZSBvciBhZGQgY2hpbGRyZW4sIHRoZW4gY2FsbFxyXG4gICAgICogIHBsdWdpbi5yZWZyZXNoKCk7XHJcbiAgICAgKlxyXG4gICAgICovXHJcbiAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLnJlZnJlc2ggPSBmdW5jdGlvbiAoZ2FsbGVyeUl0ZW1zKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnNldHRpbmdzLmR5bmFtaWMpIHtcclxuICAgICAgICAgICAgdGhpcy5pbnZhbGlkYXRlSXRlbXMoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGdhbGxlcnlJdGVtcykge1xyXG4gICAgICAgICAgICB0aGlzLmdhbGxlcnlJdGVtcyA9IGdhbGxlcnlJdGVtcztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuZ2FsbGVyeUl0ZW1zID0gdGhpcy5nZXRJdGVtcygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnVwZGF0ZUNvbnRyb2xzKCk7XHJcbiAgICAgICAgdGhpcy5vcGVuR2FsbGVyeU9uSXRlbUNsaWNrKCk7XHJcbiAgICAgICAgdGhpcy5MR2VsLnRyaWdnZXIobEdFdmVudHMudXBkYXRlU2xpZGVzKTtcclxuICAgIH07XHJcbiAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLnVwZGF0ZUNvbnRyb2xzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuYWRkU2xpZGVWaWRlb0luZm8odGhpcy5nYWxsZXJ5SXRlbXMpO1xyXG4gICAgICAgIHRoaXMudXBkYXRlQ291bnRlclRvdGFsKCk7XHJcbiAgICAgICAgdGhpcy5tYW5hZ2VTaW5nbGVTbGlkZUNsYXNzTmFtZSgpO1xyXG4gICAgfTtcclxuICAgIExpZ2h0R2FsbGVyeS5wcm90b3R5cGUuZGVzdHJveUdhbGxlcnkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5kZXN0cm95TW9kdWxlcyh0cnVlKTtcclxuICAgICAgICBpZiAoIXRoaXMuc2V0dGluZ3MuZHluYW1pYykge1xyXG4gICAgICAgICAgICB0aGlzLmludmFsaWRhdGVJdGVtcygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAkTEcod2luZG93KS5vZmYoXCIubGcuZ2xvYmFsXCIgKyB0aGlzLmxnSWQpO1xyXG4gICAgICAgIHRoaXMuTEdlbC5vZmYoJy5sZycpO1xyXG4gICAgICAgIHRoaXMuJGNvbnRhaW5lci5yZW1vdmUoKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIERlc3Ryb3kgbGlnaHRHYWxsZXJ5LlxyXG4gICAgICogRGVzdHJveSBsaWdodEdhbGxlcnkgYW5kIGl0cyBwbHVnaW4gaW5zdGFuY2VzIGNvbXBsZXRlbHlcclxuICAgICAqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gVGhpcyBtZXRob2QgYWxzbyBjYWxscyBDbG9zZUdhbGxlcnkgZnVuY3Rpb24gaW50ZXJuYWxseS4gUmV0dXJucyB0aGUgdGltZSB0YWtlcyB0byBjb21wbGV0ZWx5IGNsb3NlIGFuZCBkZXN0cm95IHRoZSBpbnN0YW5jZS5cclxuICAgICAqIEluIGNhc2UgaWYgeW91IHdhbnQgdG8gcmUtaW5pdGlhbGl6ZSBsaWdodEdhbGxlcnkgcmlnaHQgYWZ0ZXIgZGVzdHJveWluZyBpdCwgaW5pdGlhbGl6ZSBpdCBvbmx5IG9uY2UgdGhlIGRlc3Ryb3kgcHJvY2VzcyBpcyBjb21wbGV0ZWQuXHJcbiAgICAgKiBZb3UgY2FuIHVzZSByZWZyZXNoIG1ldGhvZCBtb3N0IG9mIHRoZSB0aW1lcy5cclxuICAgICAqIEBjYXRlZ29yeSBsR1B1YmxpY01ldGhvZHNcclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKiAgY29uc3QgcGx1Z2luID0gbGlnaHRHYWxsZXJ5KCk7XHJcbiAgICAgKiAgcGx1Z2luLmRlc3Ryb3koKTtcclxuICAgICAqXHJcbiAgICAgKi9cclxuICAgIExpZ2h0R2FsbGVyeS5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgY2xvc2VUaW1lb3V0ID0gdGhpcy5jbG9zZUdhbGxlcnkodHJ1ZSk7XHJcbiAgICAgICAgaWYgKGNsb3NlVGltZW91dCkge1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KHRoaXMuZGVzdHJveUdhbGxlcnkuYmluZCh0aGlzKSwgY2xvc2VUaW1lb3V0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGVzdHJveUdhbGxlcnkoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNsb3NlVGltZW91dDtcclxuICAgIH07XHJcbiAgICByZXR1cm4gTGlnaHRHYWxsZXJ5O1xyXG59KCkpO1xuXG5mdW5jdGlvbiBsaWdodEdhbGxlcnkoZWwsIG9wdGlvbnMpIHtcclxuICAgIHJldHVybiBuZXcgTGlnaHRHYWxsZXJ5KGVsLCBvcHRpb25zKTtcclxufVxuXG5leHBvcnQgZGVmYXVsdCBsaWdodEdhbGxlcnk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1saWdodGdhbGxlcnkuZXM1LmpzLm1hcFxuIiwiLyoqXG4gKiBTU1IgV2luZG93IDQuMC4yXG4gKiBCZXR0ZXIgaGFuZGxpbmcgZm9yIHdpbmRvdyBvYmplY3QgaW4gU1NSIGVudmlyb25tZW50XG4gKiBodHRwczovL2dpdGh1Yi5jb20vbm9saW1pdHM0d2ViL3Nzci13aW5kb3dcbiAqXG4gKiBDb3B5cmlnaHQgMjAyMSwgVmxhZGltaXIgS2hhcmxhbXBpZGlcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciBNSVRcbiAqXG4gKiBSZWxlYXNlZCBvbjogRGVjZW1iZXIgMTMsIDIwMjFcbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tcGFyYW0tcmVhc3NpZ24gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KG9iaikge1xuICByZXR1cm4gb2JqICE9PSBudWxsICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmICdjb25zdHJ1Y3RvcicgaW4gb2JqICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0O1xufVxuZnVuY3Rpb24gZXh0ZW5kKHRhcmdldCwgc3JjKSB7XG4gIGlmICh0YXJnZXQgPT09IHZvaWQgMCkge1xuICAgIHRhcmdldCA9IHt9O1xuICB9XG4gIGlmIChzcmMgPT09IHZvaWQgMCkge1xuICAgIHNyYyA9IHt9O1xuICB9XG4gIE9iamVjdC5rZXlzKHNyYykuZm9yRWFjaChrZXkgPT4ge1xuICAgIGlmICh0eXBlb2YgdGFyZ2V0W2tleV0gPT09ICd1bmRlZmluZWQnKSB0YXJnZXRba2V5XSA9IHNyY1trZXldO2Vsc2UgaWYgKGlzT2JqZWN0KHNyY1trZXldKSAmJiBpc09iamVjdCh0YXJnZXRba2V5XSkgJiYgT2JqZWN0LmtleXMoc3JjW2tleV0pLmxlbmd0aCA+IDApIHtcbiAgICAgIGV4dGVuZCh0YXJnZXRba2V5XSwgc3JjW2tleV0pO1xuICAgIH1cbiAgfSk7XG59XG5jb25zdCBzc3JEb2N1bWVudCA9IHtcbiAgYm9keToge30sXG4gIGFkZEV2ZW50TGlzdGVuZXIoKSB7fSxcbiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcigpIHt9LFxuICBhY3RpdmVFbGVtZW50OiB7XG4gICAgYmx1cigpIHt9LFxuICAgIG5vZGVOYW1lOiAnJ1xuICB9LFxuICBxdWVyeVNlbGVjdG9yKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9LFxuICBxdWVyeVNlbGVjdG9yQWxsKCkge1xuICAgIHJldHVybiBbXTtcbiAgfSxcbiAgZ2V0RWxlbWVudEJ5SWQoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG4gIGNyZWF0ZUV2ZW50KCkge1xuICAgIHJldHVybiB7XG4gICAgICBpbml0RXZlbnQoKSB7fVxuICAgIH07XG4gIH0sXG4gIGNyZWF0ZUVsZW1lbnQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNoaWxkcmVuOiBbXSxcbiAgICAgIGNoaWxkTm9kZXM6IFtdLFxuICAgICAgc3R5bGU6IHt9LFxuICAgICAgc2V0QXR0cmlidXRlKCkge30sXG4gICAgICBnZXRFbGVtZW50c0J5VGFnTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgIH07XG4gIH0sXG4gIGNyZWF0ZUVsZW1lbnROUygpIHtcbiAgICByZXR1cm4ge307XG4gIH0sXG4gIGltcG9ydE5vZGUoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG4gIGxvY2F0aW9uOiB7XG4gICAgaGFzaDogJycsXG4gICAgaG9zdDogJycsXG4gICAgaG9zdG5hbWU6ICcnLFxuICAgIGhyZWY6ICcnLFxuICAgIG9yaWdpbjogJycsXG4gICAgcGF0aG5hbWU6ICcnLFxuICAgIHByb3RvY29sOiAnJyxcbiAgICBzZWFyY2g6ICcnXG4gIH1cbn07XG5mdW5jdGlvbiBnZXREb2N1bWVudCgpIHtcbiAgY29uc3QgZG9jID0gdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyA/IGRvY3VtZW50IDoge307XG4gIGV4dGVuZChkb2MsIHNzckRvY3VtZW50KTtcbiAgcmV0dXJuIGRvYztcbn1cbmNvbnN0IHNzcldpbmRvdyA9IHtcbiAgZG9jdW1lbnQ6IHNzckRvY3VtZW50LFxuICBuYXZpZ2F0b3I6IHtcbiAgICB1c2VyQWdlbnQ6ICcnXG4gIH0sXG4gIGxvY2F0aW9uOiB7XG4gICAgaGFzaDogJycsXG4gICAgaG9zdDogJycsXG4gICAgaG9zdG5hbWU6ICcnLFxuICAgIGhyZWY6ICcnLFxuICAgIG9yaWdpbjogJycsXG4gICAgcGF0aG5hbWU6ICcnLFxuICAgIHByb3RvY29sOiAnJyxcbiAgICBzZWFyY2g6ICcnXG4gIH0sXG4gIGhpc3Rvcnk6IHtcbiAgICByZXBsYWNlU3RhdGUoKSB7fSxcbiAgICBwdXNoU3RhdGUoKSB7fSxcbiAgICBnbygpIHt9LFxuICAgIGJhY2soKSB7fVxuICB9LFxuICBDdXN0b21FdmVudDogZnVuY3Rpb24gQ3VzdG9tRXZlbnQoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIGFkZEV2ZW50TGlzdGVuZXIoKSB7fSxcbiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcigpIHt9LFxuICBnZXRDb21wdXRlZFN0eWxlKCkge1xuICAgIHJldHVybiB7XG4gICAgICBnZXRQcm9wZXJ0eVZhbHVlKCkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG4gICAgfTtcbiAgfSxcbiAgSW1hZ2UoKSB7fSxcbiAgRGF0ZSgpIHt9LFxuICBzY3JlZW46IHt9LFxuICBzZXRUaW1lb3V0KCkge30sXG4gIGNsZWFyVGltZW91dCgpIHt9LFxuICBtYXRjaE1lZGlhKCkge1xuICAgIHJldHVybiB7fTtcbiAgfSxcbiAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGNhbGxiYWNrKSB7XG4gICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgY2FsbGJhY2soKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gc2V0VGltZW91dChjYWxsYmFjaywgMCk7XG4gIH0sXG4gIGNhbmNlbEFuaW1hdGlvbkZyYW1lKGlkKSB7XG4gICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjbGVhclRpbWVvdXQoaWQpO1xuICB9XG59O1xuZnVuY3Rpb24gZ2V0V2luZG93KCkge1xuICBjb25zdCB3aW4gPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHt9O1xuICBleHRlbmQod2luLCBzc3JXaW5kb3cpO1xuICByZXR1cm4gd2luO1xufVxuXG5leHBvcnQgeyBnZXRXaW5kb3cgYXMgYSwgZ2V0RG9jdW1lbnQgYXMgZyB9O1xuIiwiaW1wb3J0IGxpZ2h0R2FsbGVyeSBmcm9tIFwibGlnaHRnYWxsZXJ5XCI7XG5pbXBvcnQgXCIuLi8uLi9zY3NzL2NvbW1vbi9saWdodGdhbGxlcnkuc2Nzc1wiO1xuaW1wb3J0IFwibGlnaHRnYWxsZXJ5L2Nzcy9saWdodGdhbGxlcnktYnVuZGxlLm1pbi5jc3NcIjtcblxuY29uc3QgaW5pdExpZ2h0R2FsbGVyeSA9ICgpID0+IHtcbiAgY29uc3QgaW1hZ2VzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcbiAgICBcIi5mZWVkLWNoYXB0ZXJfX2ltYWdlcy1zd2lwZXIgLnNsaWRlLWZlZWQtY2hhcHRlcl9faW1hZ2Utd3JhcFwiLFxuICApO1xuXG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbZGF0YS1saWdodGdhbGxlcnldXCIpLmZvckVhY2goKGdhbGxlcnkpID0+IHtcbiAgICBjb25zdCBkZXNjcmlwdGlvbiA9IGdhbGxlcnkuZGF0YXNldC5kZXNjcmlwdGlvbjtcblxuICAgIGNvbnN0IGxnID0gbGlnaHRHYWxsZXJ5KGdhbGxlcnksIHtcbiAgICAgIHNwZWVkOiA1MDAsXG4gICAgICBsaWNlbnNlS2V5OiBcIjdFQzQ1MkE5LTBDRkQ0NDFDLUJEOTg0QzdDLTE3Qzg0NTZFXCIsXG4gICAgICBhcHBlbmRDb3VudGVyVG86IFwiLmxnLWNvbnRlbnRcIixcbiAgICAgIHNlbGVjdG9yOiBcIi5zbGlkZS1mZWVkLWNoYXB0ZXJfX2ltYWdlLXdyYXBcIixcbiAgICAgIGFwcGVuZFN1Ykh0bWxUbzogXCIubGctaXRlbVwiLFxuICAgIH0pO1xuXG4gICAgZ2FsbGVyeS5hZGRFdmVudExpc3RlbmVyKFwibGdCZWZvcmVTbGlkZVwiLCAoZSkgPT4ge1xuICAgICAgY29uc3QgaXRlbXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmxnLWl0ZW1cIik7XG5cbiAgICAgIGl0ZW1zLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGl0ZW0ucXVlcnlTZWxlY3RvcihcIi5sZy1zdWItaHRtbFwiKSAmJlxuICAgICAgICAgIGl0ZW0ucXVlcnlTZWxlY3RvcihcIi5sZy1zdWItaHRtbFwiKS5pbm5lckhUTUwgPT09IFwidHJ1ZVwiXG4gICAgICAgICkge1xuICAgICAgICAgIGl0ZW0uY2xhc3NMaXN0LmFkZChcIl9pcy12ZXJ0aWNhbFwiKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgZ2FsbGVyeS5hZGRFdmVudExpc3RlbmVyKFwibGdCZWZvcmVPcGVuXCIsIChlKSA9PiB7XG4gICAgICBjb25zdCBjb250YWluZXIgPSBsZy4kY29udGFpbmVyLmZpcnN0RWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmxnLW91dGVyXCIpO1xuICAgICAgY29uc3QgZGVzYyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cbiAgICAgIGRlc2MuY2xhc3NMaXN0LmFkZChcImdhbGxlcnktZGVzY3JpcHRpb25cIik7XG4gICAgICBkZXNjLmlubmVySFRNTCA9IGRlc2NyaXB0aW9uO1xuICAgICAgZGVzY3JpcHRpb24gJiYgY29udGFpbmVyLmFwcGVuZChkZXNjKTtcblxuICAgICAgY29uc3QgaXRlbXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmxnLWl0ZW1cIik7XG5cbiAgICAgIGl0ZW1zLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGl0ZW0ucXVlcnlTZWxlY3RvcihcIi5sZy1zdWItaHRtbFwiKSAmJlxuICAgICAgICAgIGl0ZW0ucXVlcnlTZWxlY3RvcihcIi5sZy1zdWItaHRtbFwiKS5pbm5lckhUTUwgPT09IFwidHJ1ZVwiXG4gICAgICAgICkge1xuICAgICAgICAgIGl0ZW0uY2xhc3NMaXN0LmFkZChcIl9pcy12ZXJ0aWNhbFwiKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xufTtcbmluaXRMaWdodEdhbGxlcnkoKTtcbiIsImltcG9ydCB7IGEgYXMgZ2V0V2luZG93LCBnIGFzIGdldERvY3VtZW50IH0gZnJvbSAnLi9zc3Itd2luZG93LmVzbS5tanMnO1xuXG5mdW5jdGlvbiBjbGFzc2VzVG9Ub2tlbnMoY2xhc3Nlcykge1xuICBpZiAoY2xhc3NlcyA9PT0gdm9pZCAwKSB7XG4gICAgY2xhc3NlcyA9ICcnO1xuICB9XG4gIHJldHVybiBjbGFzc2VzLnRyaW0oKS5zcGxpdCgnICcpLmZpbHRlcihjID0+ICEhYy50cmltKCkpO1xufVxuXG5mdW5jdGlvbiBkZWxldGVQcm9wcyhvYmopIHtcbiAgY29uc3Qgb2JqZWN0ID0gb2JqO1xuICBPYmplY3Qua2V5cyhvYmplY3QpLmZvckVhY2goa2V5ID0+IHtcbiAgICB0cnkge1xuICAgICAgb2JqZWN0W2tleV0gPSBudWxsO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIG5vIGdldHRlciBmb3Igb2JqZWN0XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBkZWxldGUgb2JqZWN0W2tleV07XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gc29tZXRoaW5nIGdvdCB3cm9uZ1xuICAgIH1cbiAgfSk7XG59XG5mdW5jdGlvbiBuZXh0VGljayhjYWxsYmFjaywgZGVsYXkpIHtcbiAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHtcbiAgICBkZWxheSA9IDA7XG4gIH1cbiAgcmV0dXJuIHNldFRpbWVvdXQoY2FsbGJhY2ssIGRlbGF5KTtcbn1cbmZ1bmN0aW9uIG5vdygpIHtcbiAgcmV0dXJuIERhdGUubm93KCk7XG59XG5mdW5jdGlvbiBnZXRDb21wdXRlZFN0eWxlKGVsKSB7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBsZXQgc3R5bGU7XG4gIGlmICh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSkge1xuICAgIHN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwsIG51bGwpO1xuICB9XG4gIGlmICghc3R5bGUgJiYgZWwuY3VycmVudFN0eWxlKSB7XG4gICAgc3R5bGUgPSBlbC5jdXJyZW50U3R5bGU7XG4gIH1cbiAgaWYgKCFzdHlsZSkge1xuICAgIHN0eWxlID0gZWwuc3R5bGU7XG4gIH1cbiAgcmV0dXJuIHN0eWxlO1xufVxuZnVuY3Rpb24gZ2V0VHJhbnNsYXRlKGVsLCBheGlzKSB7XG4gIGlmIChheGlzID09PSB2b2lkIDApIHtcbiAgICBheGlzID0gJ3gnO1xuICB9XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBsZXQgbWF0cml4O1xuICBsZXQgY3VyVHJhbnNmb3JtO1xuICBsZXQgdHJhbnNmb3JtTWF0cml4O1xuICBjb25zdCBjdXJTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoZWwpO1xuICBpZiAod2luZG93LldlYktpdENTU01hdHJpeCkge1xuICAgIGN1clRyYW5zZm9ybSA9IGN1clN0eWxlLnRyYW5zZm9ybSB8fCBjdXJTdHlsZS53ZWJraXRUcmFuc2Zvcm07XG4gICAgaWYgKGN1clRyYW5zZm9ybS5zcGxpdCgnLCcpLmxlbmd0aCA+IDYpIHtcbiAgICAgIGN1clRyYW5zZm9ybSA9IGN1clRyYW5zZm9ybS5zcGxpdCgnLCAnKS5tYXAoYSA9PiBhLnJlcGxhY2UoJywnLCAnLicpKS5qb2luKCcsICcpO1xuICAgIH1cbiAgICAvLyBTb21lIG9sZCB2ZXJzaW9ucyBvZiBXZWJraXQgY2hva2Ugd2hlbiAnbm9uZScgaXMgcGFzc2VkOyBwYXNzXG4gICAgLy8gZW1wdHkgc3RyaW5nIGluc3RlYWQgaW4gdGhpcyBjYXNlXG4gICAgdHJhbnNmb3JtTWF0cml4ID0gbmV3IHdpbmRvdy5XZWJLaXRDU1NNYXRyaXgoY3VyVHJhbnNmb3JtID09PSAnbm9uZScgPyAnJyA6IGN1clRyYW5zZm9ybSk7XG4gIH0gZWxzZSB7XG4gICAgdHJhbnNmb3JtTWF0cml4ID0gY3VyU3R5bGUuTW96VHJhbnNmb3JtIHx8IGN1clN0eWxlLk9UcmFuc2Zvcm0gfHwgY3VyU3R5bGUuTXNUcmFuc2Zvcm0gfHwgY3VyU3R5bGUubXNUcmFuc2Zvcm0gfHwgY3VyU3R5bGUudHJhbnNmb3JtIHx8IGN1clN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ3RyYW5zZm9ybScpLnJlcGxhY2UoJ3RyYW5zbGF0ZSgnLCAnbWF0cml4KDEsIDAsIDAsIDEsJyk7XG4gICAgbWF0cml4ID0gdHJhbnNmb3JtTWF0cml4LnRvU3RyaW5nKCkuc3BsaXQoJywnKTtcbiAgfVxuICBpZiAoYXhpcyA9PT0gJ3gnKSB7XG4gICAgLy8gTGF0ZXN0IENocm9tZSBhbmQgd2Via2l0cyBGaXhcbiAgICBpZiAod2luZG93LldlYktpdENTU01hdHJpeCkgY3VyVHJhbnNmb3JtID0gdHJhbnNmb3JtTWF0cml4Lm00MTtcbiAgICAvLyBDcmF6eSBJRTEwIE1hdHJpeFxuICAgIGVsc2UgaWYgKG1hdHJpeC5sZW5ndGggPT09IDE2KSBjdXJUcmFuc2Zvcm0gPSBwYXJzZUZsb2F0KG1hdHJpeFsxMl0pO1xuICAgIC8vIE5vcm1hbCBCcm93c2Vyc1xuICAgIGVsc2UgY3VyVHJhbnNmb3JtID0gcGFyc2VGbG9hdChtYXRyaXhbNF0pO1xuICB9XG4gIGlmIChheGlzID09PSAneScpIHtcbiAgICAvLyBMYXRlc3QgQ2hyb21lIGFuZCB3ZWJraXRzIEZpeFxuICAgIGlmICh3aW5kb3cuV2ViS2l0Q1NTTWF0cml4KSBjdXJUcmFuc2Zvcm0gPSB0cmFuc2Zvcm1NYXRyaXgubTQyO1xuICAgIC8vIENyYXp5IElFMTAgTWF0cml4XG4gICAgZWxzZSBpZiAobWF0cml4Lmxlbmd0aCA9PT0gMTYpIGN1clRyYW5zZm9ybSA9IHBhcnNlRmxvYXQobWF0cml4WzEzXSk7XG4gICAgLy8gTm9ybWFsIEJyb3dzZXJzXG4gICAgZWxzZSBjdXJUcmFuc2Zvcm0gPSBwYXJzZUZsb2F0KG1hdHJpeFs1XSk7XG4gIH1cbiAgcmV0dXJuIGN1clRyYW5zZm9ybSB8fCAwO1xufVxuZnVuY3Rpb24gaXNPYmplY3Qobykge1xuICByZXR1cm4gdHlwZW9mIG8gPT09ICdvYmplY3QnICYmIG8gIT09IG51bGwgJiYgby5jb25zdHJ1Y3RvciAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpID09PSAnT2JqZWN0Jztcbn1cbmZ1bmN0aW9uIGlzTm9kZShub2RlKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5IVE1MRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbm9kZSBpbnN0YW5jZW9mIEhUTUxFbGVtZW50O1xuICB9XG4gIHJldHVybiBub2RlICYmIChub2RlLm5vZGVUeXBlID09PSAxIHx8IG5vZGUubm9kZVR5cGUgPT09IDExKTtcbn1cbmZ1bmN0aW9uIGV4dGVuZCgpIHtcbiAgY29uc3QgdG8gPSBPYmplY3QoYXJndW1lbnRzLmxlbmd0aCA8PSAwID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzBdKTtcbiAgY29uc3Qgbm9FeHRlbmQgPSBbJ19fcHJvdG9fXycsICdjb25zdHJ1Y3RvcicsICdwcm90b3R5cGUnXTtcbiAgZm9yIChsZXQgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25zdCBuZXh0U291cmNlID0gaSA8IDAgfHwgYXJndW1lbnRzLmxlbmd0aCA8PSBpID8gdW5kZWZpbmVkIDogYXJndW1lbnRzW2ldO1xuICAgIGlmIChuZXh0U291cmNlICE9PSB1bmRlZmluZWQgJiYgbmV4dFNvdXJjZSAhPT0gbnVsbCAmJiAhaXNOb2RlKG5leHRTb3VyY2UpKSB7XG4gICAgICBjb25zdCBrZXlzQXJyYXkgPSBPYmplY3Qua2V5cyhPYmplY3QobmV4dFNvdXJjZSkpLmZpbHRlcihrZXkgPT4gbm9FeHRlbmQuaW5kZXhPZihrZXkpIDwgMCk7XG4gICAgICBmb3IgKGxldCBuZXh0SW5kZXggPSAwLCBsZW4gPSBrZXlzQXJyYXkubGVuZ3RoOyBuZXh0SW5kZXggPCBsZW47IG5leHRJbmRleCArPSAxKSB7XG4gICAgICAgIGNvbnN0IG5leHRLZXkgPSBrZXlzQXJyYXlbbmV4dEluZGV4XTtcbiAgICAgICAgY29uc3QgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobmV4dFNvdXJjZSwgbmV4dEtleSk7XG4gICAgICAgIGlmIChkZXNjICE9PSB1bmRlZmluZWQgJiYgZGVzYy5lbnVtZXJhYmxlKSB7XG4gICAgICAgICAgaWYgKGlzT2JqZWN0KHRvW25leHRLZXldKSAmJiBpc09iamVjdChuZXh0U291cmNlW25leHRLZXldKSkge1xuICAgICAgICAgICAgaWYgKG5leHRTb3VyY2VbbmV4dEtleV0uX19zd2lwZXJfXykge1xuICAgICAgICAgICAgICB0b1tuZXh0S2V5XSA9IG5leHRTb3VyY2VbbmV4dEtleV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBleHRlbmQodG9bbmV4dEtleV0sIG5leHRTb3VyY2VbbmV4dEtleV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoIWlzT2JqZWN0KHRvW25leHRLZXldKSAmJiBpc09iamVjdChuZXh0U291cmNlW25leHRLZXldKSkge1xuICAgICAgICAgICAgdG9bbmV4dEtleV0gPSB7fTtcbiAgICAgICAgICAgIGlmIChuZXh0U291cmNlW25leHRLZXldLl9fc3dpcGVyX18pIHtcbiAgICAgICAgICAgICAgdG9bbmV4dEtleV0gPSBuZXh0U291cmNlW25leHRLZXldO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZXh0ZW5kKHRvW25leHRLZXldLCBuZXh0U291cmNlW25leHRLZXldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdG9bbmV4dEtleV0gPSBuZXh0U291cmNlW25leHRLZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gdG87XG59XG5mdW5jdGlvbiBzZXRDU1NQcm9wZXJ0eShlbCwgdmFyTmFtZSwgdmFyVmFsdWUpIHtcbiAgZWwuc3R5bGUuc2V0UHJvcGVydHkodmFyTmFtZSwgdmFyVmFsdWUpO1xufVxuZnVuY3Rpb24gYW5pbWF0ZUNTU01vZGVTY3JvbGwoX3JlZikge1xuICBsZXQge1xuICAgIHN3aXBlcixcbiAgICB0YXJnZXRQb3NpdGlvbixcbiAgICBzaWRlXG4gIH0gPSBfcmVmO1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgY29uc3Qgc3RhcnRQb3NpdGlvbiA9IC1zd2lwZXIudHJhbnNsYXRlO1xuICBsZXQgc3RhcnRUaW1lID0gbnVsbDtcbiAgbGV0IHRpbWU7XG4gIGNvbnN0IGR1cmF0aW9uID0gc3dpcGVyLnBhcmFtcy5zcGVlZDtcbiAgc3dpcGVyLndyYXBwZXJFbC5zdHlsZS5zY3JvbGxTbmFwVHlwZSA9ICdub25lJztcbiAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKHN3aXBlci5jc3NNb2RlRnJhbWVJRCk7XG4gIGNvbnN0IGRpciA9IHRhcmdldFBvc2l0aW9uID4gc3RhcnRQb3NpdGlvbiA/ICduZXh0JyA6ICdwcmV2JztcbiAgY29uc3QgaXNPdXRPZkJvdW5kID0gKGN1cnJlbnQsIHRhcmdldCkgPT4ge1xuICAgIHJldHVybiBkaXIgPT09ICduZXh0JyAmJiBjdXJyZW50ID49IHRhcmdldCB8fCBkaXIgPT09ICdwcmV2JyAmJiBjdXJyZW50IDw9IHRhcmdldDtcbiAgfTtcbiAgY29uc3QgYW5pbWF0ZSA9ICgpID0+IHtcbiAgICB0aW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgaWYgKHN0YXJ0VGltZSA9PT0gbnVsbCkge1xuICAgICAgc3RhcnRUaW1lID0gdGltZTtcbiAgICB9XG4gICAgY29uc3QgcHJvZ3Jlc3MgPSBNYXRoLm1heChNYXRoLm1pbigodGltZSAtIHN0YXJ0VGltZSkgLyBkdXJhdGlvbiwgMSksIDApO1xuICAgIGNvbnN0IGVhc2VQcm9ncmVzcyA9IDAuNSAtIE1hdGguY29zKHByb2dyZXNzICogTWF0aC5QSSkgLyAyO1xuICAgIGxldCBjdXJyZW50UG9zaXRpb24gPSBzdGFydFBvc2l0aW9uICsgZWFzZVByb2dyZXNzICogKHRhcmdldFBvc2l0aW9uIC0gc3RhcnRQb3NpdGlvbik7XG4gICAgaWYgKGlzT3V0T2ZCb3VuZChjdXJyZW50UG9zaXRpb24sIHRhcmdldFBvc2l0aW9uKSkge1xuICAgICAgY3VycmVudFBvc2l0aW9uID0gdGFyZ2V0UG9zaXRpb247XG4gICAgfVxuICAgIHN3aXBlci53cmFwcGVyRWwuc2Nyb2xsVG8oe1xuICAgICAgW3NpZGVdOiBjdXJyZW50UG9zaXRpb25cbiAgICB9KTtcbiAgICBpZiAoaXNPdXRPZkJvdW5kKGN1cnJlbnRQb3NpdGlvbiwgdGFyZ2V0UG9zaXRpb24pKSB7XG4gICAgICBzd2lwZXIud3JhcHBlckVsLnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7XG4gICAgICBzd2lwZXIud3JhcHBlckVsLnN0eWxlLnNjcm9sbFNuYXBUeXBlID0gJyc7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgc3dpcGVyLndyYXBwZXJFbC5zdHlsZS5vdmVyZmxvdyA9ICcnO1xuICAgICAgICBzd2lwZXIud3JhcHBlckVsLnNjcm9sbFRvKHtcbiAgICAgICAgICBbc2lkZV06IGN1cnJlbnRQb3NpdGlvblxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKHN3aXBlci5jc3NNb2RlRnJhbWVJRCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHN3aXBlci5jc3NNb2RlRnJhbWVJRCA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYW5pbWF0ZSk7XG4gIH07XG4gIGFuaW1hdGUoKTtcbn1cbmZ1bmN0aW9uIGdldFNsaWRlVHJhbnNmb3JtRWwoc2xpZGVFbCkge1xuICByZXR1cm4gc2xpZGVFbC5xdWVyeVNlbGVjdG9yKCcuc3dpcGVyLXNsaWRlLXRyYW5zZm9ybScpIHx8IHNsaWRlRWwuc2hhZG93Um9vdCAmJiBzbGlkZUVsLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcignLnN3aXBlci1zbGlkZS10cmFuc2Zvcm0nKSB8fCBzbGlkZUVsO1xufVxuZnVuY3Rpb24gZWxlbWVudENoaWxkcmVuKGVsZW1lbnQsIHNlbGVjdG9yKSB7XG4gIGlmIChzZWxlY3RvciA9PT0gdm9pZCAwKSB7XG4gICAgc2VsZWN0b3IgPSAnJztcbiAgfVxuICByZXR1cm4gWy4uLmVsZW1lbnQuY2hpbGRyZW5dLmZpbHRlcihlbCA9PiBlbC5tYXRjaGVzKHNlbGVjdG9yKSk7XG59XG5mdW5jdGlvbiBzaG93V2FybmluZyh0ZXh0KSB7XG4gIHRyeSB7XG4gICAgY29uc29sZS53YXJuKHRleHQpO1xuICAgIHJldHVybjtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gZXJyXG4gIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQodGFnLCBjbGFzc2VzKSB7XG4gIGlmIChjbGFzc2VzID09PSB2b2lkIDApIHtcbiAgICBjbGFzc2VzID0gW107XG4gIH1cbiAgY29uc3QgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZyk7XG4gIGVsLmNsYXNzTGlzdC5hZGQoLi4uKEFycmF5LmlzQXJyYXkoY2xhc3NlcykgPyBjbGFzc2VzIDogY2xhc3Nlc1RvVG9rZW5zKGNsYXNzZXMpKSk7XG4gIHJldHVybiBlbDtcbn1cbmZ1bmN0aW9uIGVsZW1lbnRPZmZzZXQoZWwpIHtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgY29uc3QgYm94ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIGNvbnN0IGJvZHkgPSBkb2N1bWVudC5ib2R5O1xuICBjb25zdCBjbGllbnRUb3AgPSBlbC5jbGllbnRUb3AgfHwgYm9keS5jbGllbnRUb3AgfHwgMDtcbiAgY29uc3QgY2xpZW50TGVmdCA9IGVsLmNsaWVudExlZnQgfHwgYm9keS5jbGllbnRMZWZ0IHx8IDA7XG4gIGNvbnN0IHNjcm9sbFRvcCA9IGVsID09PSB3aW5kb3cgPyB3aW5kb3cuc2Nyb2xsWSA6IGVsLnNjcm9sbFRvcDtcbiAgY29uc3Qgc2Nyb2xsTGVmdCA9IGVsID09PSB3aW5kb3cgPyB3aW5kb3cuc2Nyb2xsWCA6IGVsLnNjcm9sbExlZnQ7XG4gIHJldHVybiB7XG4gICAgdG9wOiBib3gudG9wICsgc2Nyb2xsVG9wIC0gY2xpZW50VG9wLFxuICAgIGxlZnQ6IGJveC5sZWZ0ICsgc2Nyb2xsTGVmdCAtIGNsaWVudExlZnRcbiAgfTtcbn1cbmZ1bmN0aW9uIGVsZW1lbnRQcmV2QWxsKGVsLCBzZWxlY3Rvcikge1xuICBjb25zdCBwcmV2RWxzID0gW107XG4gIHdoaWxlIChlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nKSB7XG4gICAgY29uc3QgcHJldiA9IGVsLnByZXZpb3VzRWxlbWVudFNpYmxpbmc7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgIGlmIChwcmV2Lm1hdGNoZXMoc2VsZWN0b3IpKSBwcmV2RWxzLnB1c2gocHJldik7XG4gICAgfSBlbHNlIHByZXZFbHMucHVzaChwcmV2KTtcbiAgICBlbCA9IHByZXY7XG4gIH1cbiAgcmV0dXJuIHByZXZFbHM7XG59XG5mdW5jdGlvbiBlbGVtZW50TmV4dEFsbChlbCwgc2VsZWN0b3IpIHtcbiAgY29uc3QgbmV4dEVscyA9IFtdO1xuICB3aGlsZSAoZWwubmV4dEVsZW1lbnRTaWJsaW5nKSB7XG4gICAgY29uc3QgbmV4dCA9IGVsLm5leHRFbGVtZW50U2libGluZzsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgaWYgKG5leHQubWF0Y2hlcyhzZWxlY3RvcikpIG5leHRFbHMucHVzaChuZXh0KTtcbiAgICB9IGVsc2UgbmV4dEVscy5wdXNoKG5leHQpO1xuICAgIGVsID0gbmV4dDtcbiAgfVxuICByZXR1cm4gbmV4dEVscztcbn1cbmZ1bmN0aW9uIGVsZW1lbnRTdHlsZShlbCwgcHJvcCkge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgcmV0dXJuIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKHByb3ApO1xufVxuZnVuY3Rpb24gZWxlbWVudEluZGV4KGVsKSB7XG4gIGxldCBjaGlsZCA9IGVsO1xuICBsZXQgaTtcbiAgaWYgKGNoaWxkKSB7XG4gICAgaSA9IDA7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgd2hpbGUgKChjaGlsZCA9IGNoaWxkLnByZXZpb3VzU2libGluZykgIT09IG51bGwpIHtcbiAgICAgIGlmIChjaGlsZC5ub2RlVHlwZSA9PT0gMSkgaSArPSAxO1xuICAgIH1cbiAgICByZXR1cm4gaTtcbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuZnVuY3Rpb24gZWxlbWVudFBhcmVudHMoZWwsIHNlbGVjdG9yKSB7XG4gIGNvbnN0IHBhcmVudHMgPSBbXTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICBsZXQgcGFyZW50ID0gZWwucGFyZW50RWxlbWVudDsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICB3aGlsZSAocGFyZW50KSB7XG4gICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICBpZiAocGFyZW50Lm1hdGNoZXMoc2VsZWN0b3IpKSBwYXJlbnRzLnB1c2gocGFyZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGFyZW50cy5wdXNoKHBhcmVudCk7XG4gICAgfVxuICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnRFbGVtZW50O1xuICB9XG4gIHJldHVybiBwYXJlbnRzO1xufVxuZnVuY3Rpb24gZWxlbWVudFRyYW5zaXRpb25FbmQoZWwsIGNhbGxiYWNrKSB7XG4gIGZ1bmN0aW9uIGZpcmVDYWxsQmFjayhlKSB7XG4gICAgaWYgKGUudGFyZ2V0ICE9PSBlbCkgcmV0dXJuO1xuICAgIGNhbGxiYWNrLmNhbGwoZWwsIGUpO1xuICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBmaXJlQ2FsbEJhY2spO1xuICB9XG4gIGlmIChjYWxsYmFjaykge1xuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBmaXJlQ2FsbEJhY2spO1xuICB9XG59XG5mdW5jdGlvbiBlbGVtZW50T3V0ZXJTaXplKGVsLCBzaXplLCBpbmNsdWRlTWFyZ2lucykge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgaWYgKGluY2x1ZGVNYXJnaW5zKSB7XG4gICAgcmV0dXJuIGVsW3NpemUgPT09ICd3aWR0aCcgPyAnb2Zmc2V0V2lkdGgnIDogJ29mZnNldEhlaWdodCddICsgcGFyc2VGbG9hdCh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZShzaXplID09PSAnd2lkdGgnID8gJ21hcmdpbi1yaWdodCcgOiAnbWFyZ2luLXRvcCcpKSArIHBhcnNlRmxvYXQod2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwsIG51bGwpLmdldFByb3BlcnR5VmFsdWUoc2l6ZSA9PT0gJ3dpZHRoJyA/ICdtYXJnaW4tbGVmdCcgOiAnbWFyZ2luLWJvdHRvbScpKTtcbiAgfVxuICByZXR1cm4gZWwub2Zmc2V0V2lkdGg7XG59XG5mdW5jdGlvbiBtYWtlRWxlbWVudHNBcnJheShlbCkge1xuICByZXR1cm4gKEFycmF5LmlzQXJyYXkoZWwpID8gZWwgOiBbZWxdKS5maWx0ZXIoZSA9PiAhIWUpO1xufVxuXG5leHBvcnQgeyBlbGVtZW50UGFyZW50cyBhcyBhLCBlbGVtZW50T2Zmc2V0IGFzIGIsIGNyZWF0ZUVsZW1lbnQgYXMgYywgbm93IGFzIGQsIGVsZW1lbnRDaGlsZHJlbiBhcyBlLCBlbGVtZW50T3V0ZXJTaXplIGFzIGYsIGdldFNsaWRlVHJhbnNmb3JtRWwgYXMgZywgZWxlbWVudEluZGV4IGFzIGgsIGNsYXNzZXNUb1Rva2VucyBhcyBpLCBnZXRUcmFuc2xhdGUgYXMgaiwgZWxlbWVudFRyYW5zaXRpb25FbmQgYXMgaywgaXNPYmplY3QgYXMgbCwgbWFrZUVsZW1lbnRzQXJyYXkgYXMgbSwgbmV4dFRpY2sgYXMgbiwgZWxlbWVudFN0eWxlIGFzIG8sIGVsZW1lbnROZXh0QWxsIGFzIHAsIGVsZW1lbnRQcmV2QWxsIGFzIHEsIGFuaW1hdGVDU1NNb2RlU2Nyb2xsIGFzIHIsIHNldENTU1Byb3BlcnR5IGFzIHMsIHNob3dXYXJuaW5nIGFzIHQsIGV4dGVuZCBhcyB1LCBkZWxldGVQcm9wcyBhcyB2IH07XG4iLCJpbXBvcnQgeyBhIGFzIGdldFdpbmRvdywgZyBhcyBnZXREb2N1bWVudCB9IGZyb20gJy4vc3NyLXdpbmRvdy5lc20ubWpzJztcbmltcG9ydCB7IGEgYXMgZWxlbWVudFBhcmVudHMsIG8gYXMgZWxlbWVudFN0eWxlLCBlIGFzIGVsZW1lbnRDaGlsZHJlbiwgcyBhcyBzZXRDU1NQcm9wZXJ0eSwgZiBhcyBlbGVtZW50T3V0ZXJTaXplLCBwIGFzIGVsZW1lbnROZXh0QWxsLCBxIGFzIGVsZW1lbnRQcmV2QWxsLCBqIGFzIGdldFRyYW5zbGF0ZSwgciBhcyBhbmltYXRlQ1NTTW9kZVNjcm9sbCwgbiBhcyBuZXh0VGljaywgdCBhcyBzaG93V2FybmluZywgYyBhcyBjcmVhdGVFbGVtZW50LCBkIGFzIG5vdywgdSBhcyBleHRlbmQsIGggYXMgZWxlbWVudEluZGV4LCB2IGFzIGRlbGV0ZVByb3BzIH0gZnJvbSAnLi91dGlscy5tanMnO1xuXG5sZXQgc3VwcG9ydDtcbmZ1bmN0aW9uIGNhbGNTdXBwb3J0KCkge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICByZXR1cm4ge1xuICAgIHNtb290aFNjcm9sbDogZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSAmJiAnc2Nyb2xsQmVoYXZpb3InIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSxcbiAgICB0b3VjaDogISEoJ29udG91Y2hzdGFydCcgaW4gd2luZG93IHx8IHdpbmRvdy5Eb2N1bWVudFRvdWNoICYmIGRvY3VtZW50IGluc3RhbmNlb2Ygd2luZG93LkRvY3VtZW50VG91Y2gpXG4gIH07XG59XG5mdW5jdGlvbiBnZXRTdXBwb3J0KCkge1xuICBpZiAoIXN1cHBvcnQpIHtcbiAgICBzdXBwb3J0ID0gY2FsY1N1cHBvcnQoKTtcbiAgfVxuICByZXR1cm4gc3VwcG9ydDtcbn1cblxubGV0IGRldmljZUNhY2hlZDtcbmZ1bmN0aW9uIGNhbGNEZXZpY2UoX3RlbXApIHtcbiAgbGV0IHtcbiAgICB1c2VyQWdlbnRcbiAgfSA9IF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wO1xuICBjb25zdCBzdXBwb3J0ID0gZ2V0U3VwcG9ydCgpO1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgY29uc3QgcGxhdGZvcm0gPSB3aW5kb3cubmF2aWdhdG9yLnBsYXRmb3JtO1xuICBjb25zdCB1YSA9IHVzZXJBZ2VudCB8fCB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgY29uc3QgZGV2aWNlID0ge1xuICAgIGlvczogZmFsc2UsXG4gICAgYW5kcm9pZDogZmFsc2VcbiAgfTtcbiAgY29uc3Qgc2NyZWVuV2lkdGggPSB3aW5kb3cuc2NyZWVuLndpZHRoO1xuICBjb25zdCBzY3JlZW5IZWlnaHQgPSB3aW5kb3cuc2NyZWVuLmhlaWdodDtcbiAgY29uc3QgYW5kcm9pZCA9IHVhLm1hdGNoKC8oQW5kcm9pZCk7P1tcXHNcXC9dKyhbXFxkLl0rKT8vKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICBsZXQgaXBhZCA9IHVhLm1hdGNoKC8oaVBhZCkuKk9TXFxzKFtcXGRfXSspLyk7XG4gIGNvbnN0IGlwb2QgPSB1YS5tYXRjaCgvKGlQb2QpKC4qT1NcXHMoW1xcZF9dKykpPy8pO1xuICBjb25zdCBpcGhvbmUgPSAhaXBhZCAmJiB1YS5tYXRjaCgvKGlQaG9uZVxcc09TfGlPUylcXHMoW1xcZF9dKykvKTtcbiAgY29uc3Qgd2luZG93cyA9IHBsYXRmb3JtID09PSAnV2luMzInO1xuICBsZXQgbWFjb3MgPSBwbGF0Zm9ybSA9PT0gJ01hY0ludGVsJztcblxuICAvLyBpUGFkT3MgMTMgZml4XG4gIGNvbnN0IGlQYWRTY3JlZW5zID0gWycxMDI0eDEzNjYnLCAnMTM2NngxMDI0JywgJzgzNHgxMTk0JywgJzExOTR4ODM0JywgJzgzNHgxMTEyJywgJzExMTJ4ODM0JywgJzc2OHgxMDI0JywgJzEwMjR4NzY4JywgJzgyMHgxMTgwJywgJzExODB4ODIwJywgJzgxMHgxMDgwJywgJzEwODB4ODEwJ107XG4gIGlmICghaXBhZCAmJiBtYWNvcyAmJiBzdXBwb3J0LnRvdWNoICYmIGlQYWRTY3JlZW5zLmluZGV4T2YoYCR7c2NyZWVuV2lkdGh9eCR7c2NyZWVuSGVpZ2h0fWApID49IDApIHtcbiAgICBpcGFkID0gdWEubWF0Y2goLyhWZXJzaW9uKVxcLyhbXFxkLl0rKS8pO1xuICAgIGlmICghaXBhZCkgaXBhZCA9IFswLCAxLCAnMTNfMF8wJ107XG4gICAgbWFjb3MgPSBmYWxzZTtcbiAgfVxuXG4gIC8vIEFuZHJvaWRcbiAgaWYgKGFuZHJvaWQgJiYgIXdpbmRvd3MpIHtcbiAgICBkZXZpY2Uub3MgPSAnYW5kcm9pZCc7XG4gICAgZGV2aWNlLmFuZHJvaWQgPSB0cnVlO1xuICB9XG4gIGlmIChpcGFkIHx8IGlwaG9uZSB8fCBpcG9kKSB7XG4gICAgZGV2aWNlLm9zID0gJ2lvcyc7XG4gICAgZGV2aWNlLmlvcyA9IHRydWU7XG4gIH1cblxuICAvLyBFeHBvcnQgb2JqZWN0XG4gIHJldHVybiBkZXZpY2U7XG59XG5mdW5jdGlvbiBnZXREZXZpY2Uob3ZlcnJpZGVzKSB7XG4gIGlmIChvdmVycmlkZXMgPT09IHZvaWQgMCkge1xuICAgIG92ZXJyaWRlcyA9IHt9O1xuICB9XG4gIGlmICghZGV2aWNlQ2FjaGVkKSB7XG4gICAgZGV2aWNlQ2FjaGVkID0gY2FsY0RldmljZShvdmVycmlkZXMpO1xuICB9XG4gIHJldHVybiBkZXZpY2VDYWNoZWQ7XG59XG5cbmxldCBicm93c2VyO1xuZnVuY3Rpb24gY2FsY0Jyb3dzZXIoKSB7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBjb25zdCBkZXZpY2UgPSBnZXREZXZpY2UoKTtcbiAgbGV0IG5lZWRQZXJzcGVjdGl2ZUZpeCA9IGZhbHNlO1xuICBmdW5jdGlvbiBpc1NhZmFyaSgpIHtcbiAgICBjb25zdCB1YSA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCk7XG4gICAgcmV0dXJuIHVhLmluZGV4T2YoJ3NhZmFyaScpID49IDAgJiYgdWEuaW5kZXhPZignY2hyb21lJykgPCAwICYmIHVhLmluZGV4T2YoJ2FuZHJvaWQnKSA8IDA7XG4gIH1cbiAgaWYgKGlzU2FmYXJpKCkpIHtcbiAgICBjb25zdCB1YSA9IFN0cmluZyh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgaWYgKHVhLmluY2x1ZGVzKCdWZXJzaW9uLycpKSB7XG4gICAgICBjb25zdCBbbWFqb3IsIG1pbm9yXSA9IHVhLnNwbGl0KCdWZXJzaW9uLycpWzFdLnNwbGl0KCcgJylbMF0uc3BsaXQoJy4nKS5tYXAobnVtID0+IE51bWJlcihudW0pKTtcbiAgICAgIG5lZWRQZXJzcGVjdGl2ZUZpeCA9IG1ham9yIDwgMTYgfHwgbWFqb3IgPT09IDE2ICYmIG1pbm9yIDwgMjtcbiAgICB9XG4gIH1cbiAgY29uc3QgaXNXZWJWaWV3ID0gLyhpUGhvbmV8aVBvZHxpUGFkKS4qQXBwbGVXZWJLaXQoPyEuKlNhZmFyaSkvaS50ZXN0KHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgY29uc3QgaXNTYWZhcmlCcm93c2VyID0gaXNTYWZhcmkoKTtcbiAgY29uc3QgbmVlZDNkRml4ID0gaXNTYWZhcmlCcm93c2VyIHx8IGlzV2ViVmlldyAmJiBkZXZpY2UuaW9zO1xuICByZXR1cm4ge1xuICAgIGlzU2FmYXJpOiBuZWVkUGVyc3BlY3RpdmVGaXggfHwgaXNTYWZhcmlCcm93c2VyLFxuICAgIG5lZWRQZXJzcGVjdGl2ZUZpeCxcbiAgICBuZWVkM2RGaXgsXG4gICAgaXNXZWJWaWV3XG4gIH07XG59XG5mdW5jdGlvbiBnZXRCcm93c2VyKCkge1xuICBpZiAoIWJyb3dzZXIpIHtcbiAgICBicm93c2VyID0gY2FsY0Jyb3dzZXIoKTtcbiAgfVxuICByZXR1cm4gYnJvd3Nlcjtcbn1cblxuZnVuY3Rpb24gUmVzaXplKF9yZWYpIHtcbiAgbGV0IHtcbiAgICBzd2lwZXIsXG4gICAgb24sXG4gICAgZW1pdFxuICB9ID0gX3JlZjtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGxldCBvYnNlcnZlciA9IG51bGw7XG4gIGxldCBhbmltYXRpb25GcmFtZSA9IG51bGw7XG4gIGNvbnN0IHJlc2l6ZUhhbmRsZXIgPSAoKSA9PiB7XG4gICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLmluaXRpYWxpemVkKSByZXR1cm47XG4gICAgZW1pdCgnYmVmb3JlUmVzaXplJyk7XG4gICAgZW1pdCgncmVzaXplJyk7XG4gIH07XG4gIGNvbnN0IGNyZWF0ZU9ic2VydmVyID0gKCkgPT4ge1xuICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQgfHwgIXN3aXBlci5pbml0aWFsaXplZCkgcmV0dXJuO1xuICAgIG9ic2VydmVyID0gbmV3IFJlc2l6ZU9ic2VydmVyKGVudHJpZXMgPT4ge1xuICAgICAgYW5pbWF0aW9uRnJhbWUgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgIHdpZHRoLFxuICAgICAgICAgIGhlaWdodFxuICAgICAgICB9ID0gc3dpcGVyO1xuICAgICAgICBsZXQgbmV3V2lkdGggPSB3aWR0aDtcbiAgICAgICAgbGV0IG5ld0hlaWdodCA9IGhlaWdodDtcbiAgICAgICAgZW50cmllcy5mb3JFYWNoKF9yZWYyID0+IHtcbiAgICAgICAgICBsZXQge1xuICAgICAgICAgICAgY29udGVudEJveFNpemUsXG4gICAgICAgICAgICBjb250ZW50UmVjdCxcbiAgICAgICAgICAgIHRhcmdldFxuICAgICAgICAgIH0gPSBfcmVmMjtcbiAgICAgICAgICBpZiAodGFyZ2V0ICYmIHRhcmdldCAhPT0gc3dpcGVyLmVsKSByZXR1cm47XG4gICAgICAgICAgbmV3V2lkdGggPSBjb250ZW50UmVjdCA/IGNvbnRlbnRSZWN0LndpZHRoIDogKGNvbnRlbnRCb3hTaXplWzBdIHx8IGNvbnRlbnRCb3hTaXplKS5pbmxpbmVTaXplO1xuICAgICAgICAgIG5ld0hlaWdodCA9IGNvbnRlbnRSZWN0ID8gY29udGVudFJlY3QuaGVpZ2h0IDogKGNvbnRlbnRCb3hTaXplWzBdIHx8IGNvbnRlbnRCb3hTaXplKS5ibG9ja1NpemU7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAobmV3V2lkdGggIT09IHdpZHRoIHx8IG5ld0hlaWdodCAhPT0gaGVpZ2h0KSB7XG4gICAgICAgICAgcmVzaXplSGFuZGxlcigpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBvYnNlcnZlci5vYnNlcnZlKHN3aXBlci5lbCk7XG4gIH07XG4gIGNvbnN0IHJlbW92ZU9ic2VydmVyID0gKCkgPT4ge1xuICAgIGlmIChhbmltYXRpb25GcmFtZSkge1xuICAgICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKGFuaW1hdGlvbkZyYW1lKTtcbiAgICB9XG4gICAgaWYgKG9ic2VydmVyICYmIG9ic2VydmVyLnVub2JzZXJ2ZSAmJiBzd2lwZXIuZWwpIHtcbiAgICAgIG9ic2VydmVyLnVub2JzZXJ2ZShzd2lwZXIuZWwpO1xuICAgICAgb2JzZXJ2ZXIgPSBudWxsO1xuICAgIH1cbiAgfTtcbiAgY29uc3Qgb3JpZW50YXRpb25DaGFuZ2VIYW5kbGVyID0gKCkgPT4ge1xuICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQgfHwgIXN3aXBlci5pbml0aWFsaXplZCkgcmV0dXJuO1xuICAgIGVtaXQoJ29yaWVudGF0aW9uY2hhbmdlJyk7XG4gIH07XG4gIG9uKCdpbml0JywgKCkgPT4ge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLnJlc2l6ZU9ic2VydmVyICYmIHR5cGVvZiB3aW5kb3cuUmVzaXplT2JzZXJ2ZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjcmVhdGVPYnNlcnZlcigpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgcmVzaXplSGFuZGxlcik7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ29yaWVudGF0aW9uY2hhbmdlJywgb3JpZW50YXRpb25DaGFuZ2VIYW5kbGVyKTtcbiAgfSk7XG4gIG9uKCdkZXN0cm95JywgKCkgPT4ge1xuICAgIHJlbW92ZU9ic2VydmVyKCk7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHJlc2l6ZUhhbmRsZXIpO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdvcmllbnRhdGlvbmNoYW5nZScsIG9yaWVudGF0aW9uQ2hhbmdlSGFuZGxlcik7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBPYnNlcnZlcihfcmVmKSB7XG4gIGxldCB7XG4gICAgc3dpcGVyLFxuICAgIGV4dGVuZFBhcmFtcyxcbiAgICBvbixcbiAgICBlbWl0XG4gIH0gPSBfcmVmO1xuICBjb25zdCBvYnNlcnZlcnMgPSBbXTtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGNvbnN0IGF0dGFjaCA9IGZ1bmN0aW9uICh0YXJnZXQsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuICAgIGNvbnN0IE9ic2VydmVyRnVuYyA9IHdpbmRvdy5NdXRhdGlvbk9ic2VydmVyIHx8IHdpbmRvdy5XZWJraXRNdXRhdGlvbk9ic2VydmVyO1xuICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IE9ic2VydmVyRnVuYyhtdXRhdGlvbnMgPT4ge1xuICAgICAgLy8gVGhlIG9ic2VydmVyVXBkYXRlIGV2ZW50IHNob3VsZCBvbmx5IGJlIHRyaWdnZXJlZFxuICAgICAgLy8gb25jZSBkZXNwaXRlIHRoZSBudW1iZXIgb2YgbXV0YXRpb25zLiAgQWRkaXRpb25hbFxuICAgICAgLy8gdHJpZ2dlcnMgYXJlIHJlZHVuZGFudCBhbmQgYXJlIHZlcnkgY29zdGx5XG4gICAgICBpZiAoc3dpcGVyLl9fcHJldmVudE9ic2VydmVyX18pIHJldHVybjtcbiAgICAgIGlmIChtdXRhdGlvbnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIGVtaXQoJ29ic2VydmVyVXBkYXRlJywgbXV0YXRpb25zWzBdKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3Qgb2JzZXJ2ZXJVcGRhdGUgPSBmdW5jdGlvbiBvYnNlcnZlclVwZGF0ZSgpIHtcbiAgICAgICAgZW1pdCgnb2JzZXJ2ZXJVcGRhdGUnLCBtdXRhdGlvbnNbMF0pO1xuICAgICAgfTtcbiAgICAgIGlmICh3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKSB7XG4gICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUob2JzZXJ2ZXJVcGRhdGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2luZG93LnNldFRpbWVvdXQob2JzZXJ2ZXJVcGRhdGUsIDApO1xuICAgICAgfVxuICAgIH0pO1xuICAgIG9ic2VydmVyLm9ic2VydmUodGFyZ2V0LCB7XG4gICAgICBhdHRyaWJ1dGVzOiB0eXBlb2Ygb3B0aW9ucy5hdHRyaWJ1dGVzID09PSAndW5kZWZpbmVkJyA/IHRydWUgOiBvcHRpb25zLmF0dHJpYnV0ZXMsXG4gICAgICBjaGlsZExpc3Q6IHR5cGVvZiBvcHRpb25zLmNoaWxkTGlzdCA9PT0gJ3VuZGVmaW5lZCcgPyB0cnVlIDogb3B0aW9ucy5jaGlsZExpc3QsXG4gICAgICBjaGFyYWN0ZXJEYXRhOiB0eXBlb2Ygb3B0aW9ucy5jaGFyYWN0ZXJEYXRhID09PSAndW5kZWZpbmVkJyA/IHRydWUgOiBvcHRpb25zLmNoYXJhY3RlckRhdGFcbiAgICB9KTtcbiAgICBvYnNlcnZlcnMucHVzaChvYnNlcnZlcik7XG4gIH07XG4gIGNvbnN0IGluaXQgPSAoKSA9PiB7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLm9ic2VydmVyKSByZXR1cm47XG4gICAgaWYgKHN3aXBlci5wYXJhbXMub2JzZXJ2ZVBhcmVudHMpIHtcbiAgICAgIGNvbnN0IGNvbnRhaW5lclBhcmVudHMgPSBlbGVtZW50UGFyZW50cyhzd2lwZXIuaG9zdEVsKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29udGFpbmVyUGFyZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBhdHRhY2goY29udGFpbmVyUGFyZW50c1tpXSk7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIE9ic2VydmUgY29udGFpbmVyXG4gICAgYXR0YWNoKHN3aXBlci5ob3N0RWwsIHtcbiAgICAgIGNoaWxkTGlzdDogc3dpcGVyLnBhcmFtcy5vYnNlcnZlU2xpZGVDaGlsZHJlblxuICAgIH0pO1xuXG4gICAgLy8gT2JzZXJ2ZSB3cmFwcGVyXG4gICAgYXR0YWNoKHN3aXBlci53cmFwcGVyRWwsIHtcbiAgICAgIGF0dHJpYnV0ZXM6IGZhbHNlXG4gICAgfSk7XG4gIH07XG4gIGNvbnN0IGRlc3Ryb3kgPSAoKSA9PiB7XG4gICAgb2JzZXJ2ZXJzLmZvckVhY2gob2JzZXJ2ZXIgPT4ge1xuICAgICAgb2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgIH0pO1xuICAgIG9ic2VydmVycy5zcGxpY2UoMCwgb2JzZXJ2ZXJzLmxlbmd0aCk7XG4gIH07XG4gIGV4dGVuZFBhcmFtcyh7XG4gICAgb2JzZXJ2ZXI6IGZhbHNlLFxuICAgIG9ic2VydmVQYXJlbnRzOiBmYWxzZSxcbiAgICBvYnNlcnZlU2xpZGVDaGlsZHJlbjogZmFsc2VcbiAgfSk7XG4gIG9uKCdpbml0JywgaW5pdCk7XG4gIG9uKCdkZXN0cm95JywgZGVzdHJveSk7XG59XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVyc2NvcmUtZGFuZ2xlICovXG5cbnZhciBldmVudHNFbWl0dGVyID0ge1xuICBvbihldmVudHMsIGhhbmRsZXIsIHByaW9yaXR5KSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgaWYgKCFzZWxmLmV2ZW50c0xpc3RlbmVycyB8fCBzZWxmLmRlc3Ryb3llZCkgcmV0dXJuIHNlbGY7XG4gICAgaWYgKHR5cGVvZiBoYW5kbGVyICE9PSAnZnVuY3Rpb24nKSByZXR1cm4gc2VsZjtcbiAgICBjb25zdCBtZXRob2QgPSBwcmlvcml0eSA/ICd1bnNoaWZ0JyA6ICdwdXNoJztcbiAgICBldmVudHMuc3BsaXQoJyAnKS5mb3JFYWNoKGV2ZW50ID0+IHtcbiAgICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdKSBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0gPSBbXTtcbiAgICAgIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XVttZXRob2RdKGhhbmRsZXIpO1xuICAgIH0pO1xuICAgIHJldHVybiBzZWxmO1xuICB9LFxuICBvbmNlKGV2ZW50cywgaGFuZGxlciwgcHJpb3JpdHkpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBpZiAoIXNlbGYuZXZlbnRzTGlzdGVuZXJzIHx8IHNlbGYuZGVzdHJveWVkKSByZXR1cm4gc2VsZjtcbiAgICBpZiAodHlwZW9mIGhhbmRsZXIgIT09ICdmdW5jdGlvbicpIHJldHVybiBzZWxmO1xuICAgIGZ1bmN0aW9uIG9uY2VIYW5kbGVyKCkge1xuICAgICAgc2VsZi5vZmYoZXZlbnRzLCBvbmNlSGFuZGxlcik7XG4gICAgICBpZiAob25jZUhhbmRsZXIuX19lbWl0dGVyUHJveHkpIHtcbiAgICAgICAgZGVsZXRlIG9uY2VIYW5kbGVyLl9fZW1pdHRlclByb3h5O1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG4gICAgICBoYW5kbGVyLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICAgIH1cbiAgICBvbmNlSGFuZGxlci5fX2VtaXR0ZXJQcm94eSA9IGhhbmRsZXI7XG4gICAgcmV0dXJuIHNlbGYub24oZXZlbnRzLCBvbmNlSGFuZGxlciwgcHJpb3JpdHkpO1xuICB9LFxuICBvbkFueShoYW5kbGVyLCBwcmlvcml0eSkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnMgfHwgc2VsZi5kZXN0cm95ZWQpIHJldHVybiBzZWxmO1xuICAgIGlmICh0eXBlb2YgaGFuZGxlciAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHNlbGY7XG4gICAgY29uc3QgbWV0aG9kID0gcHJpb3JpdHkgPyAndW5zaGlmdCcgOiAncHVzaCc7XG4gICAgaWYgKHNlbGYuZXZlbnRzQW55TGlzdGVuZXJzLmluZGV4T2YoaGFuZGxlcikgPCAwKSB7XG4gICAgICBzZWxmLmV2ZW50c0FueUxpc3RlbmVyc1ttZXRob2RdKGhhbmRsZXIpO1xuICAgIH1cbiAgICByZXR1cm4gc2VsZjtcbiAgfSxcbiAgb2ZmQW55KGhhbmRsZXIpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBpZiAoIXNlbGYuZXZlbnRzTGlzdGVuZXJzIHx8IHNlbGYuZGVzdHJveWVkKSByZXR1cm4gc2VsZjtcbiAgICBpZiAoIXNlbGYuZXZlbnRzQW55TGlzdGVuZXJzKSByZXR1cm4gc2VsZjtcbiAgICBjb25zdCBpbmRleCA9IHNlbGYuZXZlbnRzQW55TGlzdGVuZXJzLmluZGV4T2YoaGFuZGxlcik7XG4gICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgIHNlbGYuZXZlbnRzQW55TGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuICAgIHJldHVybiBzZWxmO1xuICB9LFxuICBvZmYoZXZlbnRzLCBoYW5kbGVyKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgaWYgKCFzZWxmLmV2ZW50c0xpc3RlbmVycyB8fCBzZWxmLmRlc3Ryb3llZCkgcmV0dXJuIHNlbGY7XG4gICAgaWYgKCFzZWxmLmV2ZW50c0xpc3RlbmVycykgcmV0dXJuIHNlbGY7XG4gICAgZXZlbnRzLnNwbGl0KCcgJykuZm9yRWFjaChldmVudCA9PiB7XG4gICAgICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XSA9IFtdO1xuICAgICAgfSBlbHNlIGlmIChzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0pIHtcbiAgICAgICAgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdLmZvckVhY2goKGV2ZW50SGFuZGxlciwgaW5kZXgpID0+IHtcbiAgICAgICAgICBpZiAoZXZlbnRIYW5kbGVyID09PSBoYW5kbGVyIHx8IGV2ZW50SGFuZGxlci5fX2VtaXR0ZXJQcm94eSAmJiBldmVudEhhbmRsZXIuX19lbWl0dGVyUHJveHkgPT09IGhhbmRsZXIpIHtcbiAgICAgICAgICAgIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHNlbGY7XG4gIH0sXG4gIGVtaXQoKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgaWYgKCFzZWxmLmV2ZW50c0xpc3RlbmVycyB8fCBzZWxmLmRlc3Ryb3llZCkgcmV0dXJuIHNlbGY7XG4gICAgaWYgKCFzZWxmLmV2ZW50c0xpc3RlbmVycykgcmV0dXJuIHNlbGY7XG4gICAgbGV0IGV2ZW50cztcbiAgICBsZXQgZGF0YTtcbiAgICBsZXQgY29udGV4dDtcbiAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBhcmdzWzBdID09PSAnc3RyaW5nJyB8fCBBcnJheS5pc0FycmF5KGFyZ3NbMF0pKSB7XG4gICAgICBldmVudHMgPSBhcmdzWzBdO1xuICAgICAgZGF0YSA9IGFyZ3Muc2xpY2UoMSwgYXJncy5sZW5ndGgpO1xuICAgICAgY29udGV4dCA9IHNlbGY7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV2ZW50cyA9IGFyZ3NbMF0uZXZlbnRzO1xuICAgICAgZGF0YSA9IGFyZ3NbMF0uZGF0YTtcbiAgICAgIGNvbnRleHQgPSBhcmdzWzBdLmNvbnRleHQgfHwgc2VsZjtcbiAgICB9XG4gICAgZGF0YS51bnNoaWZ0KGNvbnRleHQpO1xuICAgIGNvbnN0IGV2ZW50c0FycmF5ID0gQXJyYXkuaXNBcnJheShldmVudHMpID8gZXZlbnRzIDogZXZlbnRzLnNwbGl0KCcgJyk7XG4gICAgZXZlbnRzQXJyYXkuZm9yRWFjaChldmVudCA9PiB7XG4gICAgICBpZiAoc2VsZi5ldmVudHNBbnlMaXN0ZW5lcnMgJiYgc2VsZi5ldmVudHNBbnlMaXN0ZW5lcnMubGVuZ3RoKSB7XG4gICAgICAgIHNlbGYuZXZlbnRzQW55TGlzdGVuZXJzLmZvckVhY2goZXZlbnRIYW5kbGVyID0+IHtcbiAgICAgICAgICBldmVudEhhbmRsZXIuYXBwbHkoY29udGV4dCwgW2V2ZW50LCAuLi5kYXRhXSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKHNlbGYuZXZlbnRzTGlzdGVuZXJzICYmIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XSkge1xuICAgICAgICBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0uZm9yRWFjaChldmVudEhhbmRsZXIgPT4ge1xuICAgICAgICAgIGV2ZW50SGFuZGxlci5hcHBseShjb250ZXh0LCBkYXRhKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHNlbGY7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHVwZGF0ZVNpemUoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGxldCB3aWR0aDtcbiAgbGV0IGhlaWdodDtcbiAgY29uc3QgZWwgPSBzd2lwZXIuZWw7XG4gIGlmICh0eXBlb2Ygc3dpcGVyLnBhcmFtcy53aWR0aCAhPT0gJ3VuZGVmaW5lZCcgJiYgc3dpcGVyLnBhcmFtcy53aWR0aCAhPT0gbnVsbCkge1xuICAgIHdpZHRoID0gc3dpcGVyLnBhcmFtcy53aWR0aDtcbiAgfSBlbHNlIHtcbiAgICB3aWR0aCA9IGVsLmNsaWVudFdpZHRoO1xuICB9XG4gIGlmICh0eXBlb2Ygc3dpcGVyLnBhcmFtcy5oZWlnaHQgIT09ICd1bmRlZmluZWQnICYmIHN3aXBlci5wYXJhbXMuaGVpZ2h0ICE9PSBudWxsKSB7XG4gICAgaGVpZ2h0ID0gc3dpcGVyLnBhcmFtcy5oZWlnaHQ7XG4gIH0gZWxzZSB7XG4gICAgaGVpZ2h0ID0gZWwuY2xpZW50SGVpZ2h0O1xuICB9XG4gIGlmICh3aWR0aCA9PT0gMCAmJiBzd2lwZXIuaXNIb3Jpem9udGFsKCkgfHwgaGVpZ2h0ID09PSAwICYmIHN3aXBlci5pc1ZlcnRpY2FsKCkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBTdWJ0cmFjdCBwYWRkaW5nc1xuICB3aWR0aCA9IHdpZHRoIC0gcGFyc2VJbnQoZWxlbWVudFN0eWxlKGVsLCAncGFkZGluZy1sZWZ0JykgfHwgMCwgMTApIC0gcGFyc2VJbnQoZWxlbWVudFN0eWxlKGVsLCAncGFkZGluZy1yaWdodCcpIHx8IDAsIDEwKTtcbiAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoZWxlbWVudFN0eWxlKGVsLCAncGFkZGluZy10b3AnKSB8fCAwLCAxMCkgLSBwYXJzZUludChlbGVtZW50U3R5bGUoZWwsICdwYWRkaW5nLWJvdHRvbScpIHx8IDAsIDEwKTtcbiAgaWYgKE51bWJlci5pc05hTih3aWR0aCkpIHdpZHRoID0gMDtcbiAgaWYgKE51bWJlci5pc05hTihoZWlnaHQpKSBoZWlnaHQgPSAwO1xuICBPYmplY3QuYXNzaWduKHN3aXBlciwge1xuICAgIHdpZHRoLFxuICAgIGhlaWdodCxcbiAgICBzaXplOiBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyB3aWR0aCA6IGhlaWdodFxuICB9KTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlU2xpZGVzKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBmdW5jdGlvbiBnZXREaXJlY3Rpb25Qcm9wZXJ0eVZhbHVlKG5vZGUsIGxhYmVsKSB7XG4gICAgcmV0dXJuIHBhcnNlRmxvYXQobm9kZS5nZXRQcm9wZXJ0eVZhbHVlKHN3aXBlci5nZXREaXJlY3Rpb25MYWJlbChsYWJlbCkpIHx8IDApO1xuICB9XG4gIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gIGNvbnN0IHtcbiAgICB3cmFwcGVyRWwsXG4gICAgc2xpZGVzRWwsXG4gICAgc2l6ZTogc3dpcGVyU2l6ZSxcbiAgICBydGxUcmFuc2xhdGU6IHJ0bCxcbiAgICB3cm9uZ1JUTFxuICB9ID0gc3dpcGVyO1xuICBjb25zdCBpc1ZpcnR1YWwgPSBzd2lwZXIudmlydHVhbCAmJiBwYXJhbXMudmlydHVhbC5lbmFibGVkO1xuICBjb25zdCBwcmV2aW91c1NsaWRlc0xlbmd0aCA9IGlzVmlydHVhbCA/IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggOiBzd2lwZXIuc2xpZGVzLmxlbmd0aDtcbiAgY29uc3Qgc2xpZGVzID0gZWxlbWVudENoaWxkcmVuKHNsaWRlc0VsLCBgLiR7c3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzfSwgc3dpcGVyLXNsaWRlYCk7XG4gIGNvbnN0IHNsaWRlc0xlbmd0aCA9IGlzVmlydHVhbCA/IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggOiBzbGlkZXMubGVuZ3RoO1xuICBsZXQgc25hcEdyaWQgPSBbXTtcbiAgY29uc3Qgc2xpZGVzR3JpZCA9IFtdO1xuICBjb25zdCBzbGlkZXNTaXplc0dyaWQgPSBbXTtcbiAgbGV0IG9mZnNldEJlZm9yZSA9IHBhcmFtcy5zbGlkZXNPZmZzZXRCZWZvcmU7XG4gIGlmICh0eXBlb2Ygb2Zmc2V0QmVmb3JlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgb2Zmc2V0QmVmb3JlID0gcGFyYW1zLnNsaWRlc09mZnNldEJlZm9yZS5jYWxsKHN3aXBlcik7XG4gIH1cbiAgbGV0IG9mZnNldEFmdGVyID0gcGFyYW1zLnNsaWRlc09mZnNldEFmdGVyO1xuICBpZiAodHlwZW9mIG9mZnNldEFmdGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgb2Zmc2V0QWZ0ZXIgPSBwYXJhbXMuc2xpZGVzT2Zmc2V0QWZ0ZXIuY2FsbChzd2lwZXIpO1xuICB9XG4gIGNvbnN0IHByZXZpb3VzU25hcEdyaWRMZW5ndGggPSBzd2lwZXIuc25hcEdyaWQubGVuZ3RoO1xuICBjb25zdCBwcmV2aW91c1NsaWRlc0dyaWRMZW5ndGggPSBzd2lwZXIuc2xpZGVzR3JpZC5sZW5ndGg7XG4gIGxldCBzcGFjZUJldHdlZW4gPSBwYXJhbXMuc3BhY2VCZXR3ZWVuO1xuICBsZXQgc2xpZGVQb3NpdGlvbiA9IC1vZmZzZXRCZWZvcmU7XG4gIGxldCBwcmV2U2xpZGVTaXplID0gMDtcbiAgbGV0IGluZGV4ID0gMDtcbiAgaWYgKHR5cGVvZiBzd2lwZXJTaXplID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAodHlwZW9mIHNwYWNlQmV0d2VlbiA9PT0gJ3N0cmluZycgJiYgc3BhY2VCZXR3ZWVuLmluZGV4T2YoJyUnKSA+PSAwKSB7XG4gICAgc3BhY2VCZXR3ZWVuID0gcGFyc2VGbG9hdChzcGFjZUJldHdlZW4ucmVwbGFjZSgnJScsICcnKSkgLyAxMDAgKiBzd2lwZXJTaXplO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBzcGFjZUJldHdlZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgc3BhY2VCZXR3ZWVuID0gcGFyc2VGbG9hdChzcGFjZUJldHdlZW4pO1xuICB9XG4gIHN3aXBlci52aXJ0dWFsU2l6ZSA9IC1zcGFjZUJldHdlZW47XG5cbiAgLy8gcmVzZXQgbWFyZ2luc1xuICBzbGlkZXMuZm9yRWFjaChzbGlkZUVsID0+IHtcbiAgICBpZiAocnRsKSB7XG4gICAgICBzbGlkZUVsLnN0eWxlLm1hcmdpbkxlZnQgPSAnJztcbiAgICB9IGVsc2Uge1xuICAgICAgc2xpZGVFbC5zdHlsZS5tYXJnaW5SaWdodCA9ICcnO1xuICAgIH1cbiAgICBzbGlkZUVsLnN0eWxlLm1hcmdpbkJvdHRvbSA9ICcnO1xuICAgIHNsaWRlRWwuc3R5bGUubWFyZ2luVG9wID0gJyc7XG4gIH0pO1xuXG4gIC8vIHJlc2V0IGNzc01vZGUgb2Zmc2V0c1xuICBpZiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzICYmIHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgc2V0Q1NTUHJvcGVydHkod3JhcHBlckVsLCAnLS1zd2lwZXItY2VudGVyZWQtb2Zmc2V0LWJlZm9yZScsICcnKTtcbiAgICBzZXRDU1NQcm9wZXJ0eSh3cmFwcGVyRWwsICctLXN3aXBlci1jZW50ZXJlZC1vZmZzZXQtYWZ0ZXInLCAnJyk7XG4gIH1cbiAgY29uc3QgZ3JpZEVuYWJsZWQgPSBwYXJhbXMuZ3JpZCAmJiBwYXJhbXMuZ3JpZC5yb3dzID4gMSAmJiBzd2lwZXIuZ3JpZDtcbiAgaWYgKGdyaWRFbmFibGVkKSB7XG4gICAgc3dpcGVyLmdyaWQuaW5pdFNsaWRlcyhzbGlkZXMpO1xuICB9IGVsc2UgaWYgKHN3aXBlci5ncmlkKSB7XG4gICAgc3dpcGVyLmdyaWQudW5zZXRTbGlkZXMoKTtcbiAgfVxuXG4gIC8vIENhbGMgc2xpZGVzXG4gIGxldCBzbGlkZVNpemU7XG4gIGNvbnN0IHNob3VsZFJlc2V0U2xpZGVTaXplID0gcGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyAmJiBwYXJhbXMuYnJlYWtwb2ludHMgJiYgT2JqZWN0LmtleXMocGFyYW1zLmJyZWFrcG9pbnRzKS5maWx0ZXIoa2V5ID0+IHtcbiAgICByZXR1cm4gdHlwZW9mIHBhcmFtcy5icmVha3BvaW50c1trZXldLnNsaWRlc1BlclZpZXcgIT09ICd1bmRlZmluZWQnO1xuICB9KS5sZW5ndGggPiAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlc0xlbmd0aDsgaSArPSAxKSB7XG4gICAgc2xpZGVTaXplID0gMDtcbiAgICBsZXQgc2xpZGU7XG4gICAgaWYgKHNsaWRlc1tpXSkgc2xpZGUgPSBzbGlkZXNbaV07XG4gICAgaWYgKGdyaWRFbmFibGVkKSB7XG4gICAgICBzd2lwZXIuZ3JpZC51cGRhdGVTbGlkZShpLCBzbGlkZSwgc2xpZGVzKTtcbiAgICB9XG4gICAgaWYgKHNsaWRlc1tpXSAmJiBlbGVtZW50U3R5bGUoc2xpZGUsICdkaXNwbGF5JykgPT09ICdub25lJykgY29udGludWU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICAgIGlmIChwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nKSB7XG4gICAgICBpZiAoc2hvdWxkUmVzZXRTbGlkZVNpemUpIHtcbiAgICAgICAgc2xpZGVzW2ldLnN0eWxlW3N3aXBlci5nZXREaXJlY3Rpb25MYWJlbCgnd2lkdGgnKV0gPSBgYDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHNsaWRlU3R5bGVzID0gZ2V0Q29tcHV0ZWRTdHlsZShzbGlkZSk7XG4gICAgICBjb25zdCBjdXJyZW50VHJhbnNmb3JtID0gc2xpZGUuc3R5bGUudHJhbnNmb3JtO1xuICAgICAgY29uc3QgY3VycmVudFdlYktpdFRyYW5zZm9ybSA9IHNsaWRlLnN0eWxlLndlYmtpdFRyYW5zZm9ybTtcbiAgICAgIGlmIChjdXJyZW50VHJhbnNmb3JtKSB7XG4gICAgICAgIHNsaWRlLnN0eWxlLnRyYW5zZm9ybSA9ICdub25lJztcbiAgICAgIH1cbiAgICAgIGlmIChjdXJyZW50V2ViS2l0VHJhbnNmb3JtKSB7XG4gICAgICAgIHNsaWRlLnN0eWxlLndlYmtpdFRyYW5zZm9ybSA9ICdub25lJztcbiAgICAgIH1cbiAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSB7XG4gICAgICAgIHNsaWRlU2l6ZSA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IGVsZW1lbnRPdXRlclNpemUoc2xpZGUsICd3aWR0aCcsIHRydWUpIDogZWxlbWVudE91dGVyU2l6ZShzbGlkZSwgJ2hlaWdodCcsIHRydWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgIGNvbnN0IHdpZHRoID0gZ2V0RGlyZWN0aW9uUHJvcGVydHlWYWx1ZShzbGlkZVN0eWxlcywgJ3dpZHRoJyk7XG4gICAgICAgIGNvbnN0IHBhZGRpbmdMZWZ0ID0gZ2V0RGlyZWN0aW9uUHJvcGVydHlWYWx1ZShzbGlkZVN0eWxlcywgJ3BhZGRpbmctbGVmdCcpO1xuICAgICAgICBjb25zdCBwYWRkaW5nUmlnaHQgPSBnZXREaXJlY3Rpb25Qcm9wZXJ0eVZhbHVlKHNsaWRlU3R5bGVzLCAncGFkZGluZy1yaWdodCcpO1xuICAgICAgICBjb25zdCBtYXJnaW5MZWZ0ID0gZ2V0RGlyZWN0aW9uUHJvcGVydHlWYWx1ZShzbGlkZVN0eWxlcywgJ21hcmdpbi1sZWZ0Jyk7XG4gICAgICAgIGNvbnN0IG1hcmdpblJpZ2h0ID0gZ2V0RGlyZWN0aW9uUHJvcGVydHlWYWx1ZShzbGlkZVN0eWxlcywgJ21hcmdpbi1yaWdodCcpO1xuICAgICAgICBjb25zdCBib3hTaXppbmcgPSBzbGlkZVN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCdib3gtc2l6aW5nJyk7XG4gICAgICAgIGlmIChib3hTaXppbmcgJiYgYm94U2l6aW5nID09PSAnYm9yZGVyLWJveCcpIHtcbiAgICAgICAgICBzbGlkZVNpemUgPSB3aWR0aCArIG1hcmdpbkxlZnQgKyBtYXJnaW5SaWdodDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBjbGllbnRXaWR0aCxcbiAgICAgICAgICAgIG9mZnNldFdpZHRoXG4gICAgICAgICAgfSA9IHNsaWRlO1xuICAgICAgICAgIHNsaWRlU2l6ZSA9IHdpZHRoICsgcGFkZGluZ0xlZnQgKyBwYWRkaW5nUmlnaHQgKyBtYXJnaW5MZWZ0ICsgbWFyZ2luUmlnaHQgKyAob2Zmc2V0V2lkdGggLSBjbGllbnRXaWR0aCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChjdXJyZW50VHJhbnNmb3JtKSB7XG4gICAgICAgIHNsaWRlLnN0eWxlLnRyYW5zZm9ybSA9IGN1cnJlbnRUcmFuc2Zvcm07XG4gICAgICB9XG4gICAgICBpZiAoY3VycmVudFdlYktpdFRyYW5zZm9ybSkge1xuICAgICAgICBzbGlkZS5zdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSBjdXJyZW50V2ViS2l0VHJhbnNmb3JtO1xuICAgICAgfVxuICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHNsaWRlU2l6ZSA9IE1hdGguZmxvb3Ioc2xpZGVTaXplKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2xpZGVTaXplID0gKHN3aXBlclNpemUgLSAocGFyYW1zLnNsaWRlc1BlclZpZXcgLSAxKSAqIHNwYWNlQmV0d2VlbikgLyBwYXJhbXMuc2xpZGVzUGVyVmlldztcbiAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSBzbGlkZVNpemUgPSBNYXRoLmZsb29yKHNsaWRlU2l6ZSk7XG4gICAgICBpZiAoc2xpZGVzW2ldKSB7XG4gICAgICAgIHNsaWRlc1tpXS5zdHlsZVtzd2lwZXIuZ2V0RGlyZWN0aW9uTGFiZWwoJ3dpZHRoJyldID0gYCR7c2xpZGVTaXplfXB4YDtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHNsaWRlc1tpXSkge1xuICAgICAgc2xpZGVzW2ldLnN3aXBlclNsaWRlU2l6ZSA9IHNsaWRlU2l6ZTtcbiAgICB9XG4gICAgc2xpZGVzU2l6ZXNHcmlkLnB1c2goc2xpZGVTaXplKTtcbiAgICBpZiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICBzbGlkZVBvc2l0aW9uID0gc2xpZGVQb3NpdGlvbiArIHNsaWRlU2l6ZSAvIDIgKyBwcmV2U2xpZGVTaXplIC8gMiArIHNwYWNlQmV0d2VlbjtcbiAgICAgIGlmIChwcmV2U2xpZGVTaXplID09PSAwICYmIGkgIT09IDApIHNsaWRlUG9zaXRpb24gPSBzbGlkZVBvc2l0aW9uIC0gc3dpcGVyU2l6ZSAvIDIgLSBzcGFjZUJldHdlZW47XG4gICAgICBpZiAoaSA9PT0gMCkgc2xpZGVQb3NpdGlvbiA9IHNsaWRlUG9zaXRpb24gLSBzd2lwZXJTaXplIC8gMiAtIHNwYWNlQmV0d2VlbjtcbiAgICAgIGlmIChNYXRoLmFicyhzbGlkZVBvc2l0aW9uKSA8IDEgLyAxMDAwKSBzbGlkZVBvc2l0aW9uID0gMDtcbiAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSBzbGlkZVBvc2l0aW9uID0gTWF0aC5mbG9vcihzbGlkZVBvc2l0aW9uKTtcbiAgICAgIGlmIChpbmRleCAlIHBhcmFtcy5zbGlkZXNQZXJHcm91cCA9PT0gMCkgc25hcEdyaWQucHVzaChzbGlkZVBvc2l0aW9uKTtcbiAgICAgIHNsaWRlc0dyaWQucHVzaChzbGlkZVBvc2l0aW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHNsaWRlUG9zaXRpb24gPSBNYXRoLmZsb29yKHNsaWRlUG9zaXRpb24pO1xuICAgICAgaWYgKChpbmRleCAtIE1hdGgubWluKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwLCBpbmRleCkpICUgc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCA9PT0gMCkgc25hcEdyaWQucHVzaChzbGlkZVBvc2l0aW9uKTtcbiAgICAgIHNsaWRlc0dyaWQucHVzaChzbGlkZVBvc2l0aW9uKTtcbiAgICAgIHNsaWRlUG9zaXRpb24gPSBzbGlkZVBvc2l0aW9uICsgc2xpZGVTaXplICsgc3BhY2VCZXR3ZWVuO1xuICAgIH1cbiAgICBzd2lwZXIudmlydHVhbFNpemUgKz0gc2xpZGVTaXplICsgc3BhY2VCZXR3ZWVuO1xuICAgIHByZXZTbGlkZVNpemUgPSBzbGlkZVNpemU7XG4gICAgaW5kZXggKz0gMTtcbiAgfVxuICBzd2lwZXIudmlydHVhbFNpemUgPSBNYXRoLm1heChzd2lwZXIudmlydHVhbFNpemUsIHN3aXBlclNpemUpICsgb2Zmc2V0QWZ0ZXI7XG4gIGlmIChydGwgJiYgd3JvbmdSVEwgJiYgKHBhcmFtcy5lZmZlY3QgPT09ICdzbGlkZScgfHwgcGFyYW1zLmVmZmVjdCA9PT0gJ2NvdmVyZmxvdycpKSB7XG4gICAgd3JhcHBlckVsLnN0eWxlLndpZHRoID0gYCR7c3dpcGVyLnZpcnR1YWxTaXplICsgc3BhY2VCZXR3ZWVufXB4YDtcbiAgfVxuICBpZiAocGFyYW1zLnNldFdyYXBwZXJTaXplKSB7XG4gICAgd3JhcHBlckVsLnN0eWxlW3N3aXBlci5nZXREaXJlY3Rpb25MYWJlbCgnd2lkdGgnKV0gPSBgJHtzd2lwZXIudmlydHVhbFNpemUgKyBzcGFjZUJldHdlZW59cHhgO1xuICB9XG4gIGlmIChncmlkRW5hYmxlZCkge1xuICAgIHN3aXBlci5ncmlkLnVwZGF0ZVdyYXBwZXJTaXplKHNsaWRlU2l6ZSwgc25hcEdyaWQpO1xuICB9XG5cbiAgLy8gUmVtb3ZlIGxhc3QgZ3JpZCBlbGVtZW50cyBkZXBlbmRpbmcgb24gd2lkdGhcbiAgaWYgKCFwYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICBjb25zdCBuZXdTbGlkZXNHcmlkID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbmFwR3JpZC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgbGV0IHNsaWRlc0dyaWRJdGVtID0gc25hcEdyaWRbaV07XG4gICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykgc2xpZGVzR3JpZEl0ZW0gPSBNYXRoLmZsb29yKHNsaWRlc0dyaWRJdGVtKTtcbiAgICAgIGlmIChzbmFwR3JpZFtpXSA8PSBzd2lwZXIudmlydHVhbFNpemUgLSBzd2lwZXJTaXplKSB7XG4gICAgICAgIG5ld1NsaWRlc0dyaWQucHVzaChzbGlkZXNHcmlkSXRlbSk7XG4gICAgICB9XG4gICAgfVxuICAgIHNuYXBHcmlkID0gbmV3U2xpZGVzR3JpZDtcbiAgICBpZiAoTWF0aC5mbG9vcihzd2lwZXIudmlydHVhbFNpemUgLSBzd2lwZXJTaXplKSAtIE1hdGguZmxvb3Ioc25hcEdyaWRbc25hcEdyaWQubGVuZ3RoIC0gMV0pID4gMSkge1xuICAgICAgc25hcEdyaWQucHVzaChzd2lwZXIudmlydHVhbFNpemUgLSBzd2lwZXJTaXplKTtcbiAgICB9XG4gIH1cbiAgaWYgKGlzVmlydHVhbCAmJiBwYXJhbXMubG9vcCkge1xuICAgIGNvbnN0IHNpemUgPSBzbGlkZXNTaXplc0dyaWRbMF0gKyBzcGFjZUJldHdlZW47XG4gICAgaWYgKHBhcmFtcy5zbGlkZXNQZXJHcm91cCA+IDEpIHtcbiAgICAgIGNvbnN0IGdyb3VwcyA9IE1hdGguY2VpbCgoc3dpcGVyLnZpcnR1YWwuc2xpZGVzQmVmb3JlICsgc3dpcGVyLnZpcnR1YWwuc2xpZGVzQWZ0ZXIpIC8gcGFyYW1zLnNsaWRlc1Blckdyb3VwKTtcbiAgICAgIGNvbnN0IGdyb3VwU2l6ZSA9IHNpemUgKiBwYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGdyb3VwczsgaSArPSAxKSB7XG4gICAgICAgIHNuYXBHcmlkLnB1c2goc25hcEdyaWRbc25hcEdyaWQubGVuZ3RoIC0gMV0gKyBncm91cFNpemUpO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN3aXBlci52aXJ0dWFsLnNsaWRlc0JlZm9yZSArIHN3aXBlci52aXJ0dWFsLnNsaWRlc0FmdGVyOyBpICs9IDEpIHtcbiAgICAgIGlmIChwYXJhbXMuc2xpZGVzUGVyR3JvdXAgPT09IDEpIHtcbiAgICAgICAgc25hcEdyaWQucHVzaChzbmFwR3JpZFtzbmFwR3JpZC5sZW5ndGggLSAxXSArIHNpemUpO1xuICAgICAgfVxuICAgICAgc2xpZGVzR3JpZC5wdXNoKHNsaWRlc0dyaWRbc2xpZGVzR3JpZC5sZW5ndGggLSAxXSArIHNpemUpO1xuICAgICAgc3dpcGVyLnZpcnR1YWxTaXplICs9IHNpemU7XG4gICAgfVxuICB9XG4gIGlmIChzbmFwR3JpZC5sZW5ndGggPT09IDApIHNuYXBHcmlkID0gWzBdO1xuICBpZiAoc3BhY2VCZXR3ZWVuICE9PSAwKSB7XG4gICAgY29uc3Qga2V5ID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpICYmIHJ0bCA/ICdtYXJnaW5MZWZ0JyA6IHN3aXBlci5nZXREaXJlY3Rpb25MYWJlbCgnbWFyZ2luUmlnaHQnKTtcbiAgICBzbGlkZXMuZmlsdGVyKChfLCBzbGlkZUluZGV4KSA9PiB7XG4gICAgICBpZiAoIXBhcmFtcy5jc3NNb2RlIHx8IHBhcmFtcy5sb29wKSByZXR1cm4gdHJ1ZTtcbiAgICAgIGlmIChzbGlkZUluZGV4ID09PSBzbGlkZXMubGVuZ3RoIC0gMSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KS5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgICAgc2xpZGVFbC5zdHlsZVtrZXldID0gYCR7c3BhY2VCZXR3ZWVufXB4YDtcbiAgICB9KTtcbiAgfVxuICBpZiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzICYmIHBhcmFtcy5jZW50ZXJlZFNsaWRlc0JvdW5kcykge1xuICAgIGxldCBhbGxTbGlkZXNTaXplID0gMDtcbiAgICBzbGlkZXNTaXplc0dyaWQuZm9yRWFjaChzbGlkZVNpemVWYWx1ZSA9PiB7XG4gICAgICBhbGxTbGlkZXNTaXplICs9IHNsaWRlU2l6ZVZhbHVlICsgKHNwYWNlQmV0d2VlbiB8fCAwKTtcbiAgICB9KTtcbiAgICBhbGxTbGlkZXNTaXplIC09IHNwYWNlQmV0d2VlbjtcbiAgICBjb25zdCBtYXhTbmFwID0gYWxsU2xpZGVzU2l6ZSAtIHN3aXBlclNpemU7XG4gICAgc25hcEdyaWQgPSBzbmFwR3JpZC5tYXAoc25hcCA9PiB7XG4gICAgICBpZiAoc25hcCA8PSAwKSByZXR1cm4gLW9mZnNldEJlZm9yZTtcbiAgICAgIGlmIChzbmFwID4gbWF4U25hcCkgcmV0dXJuIG1heFNuYXAgKyBvZmZzZXRBZnRlcjtcbiAgICAgIHJldHVybiBzbmFwO1xuICAgIH0pO1xuICB9XG4gIGlmIChwYXJhbXMuY2VudGVySW5zdWZmaWNpZW50U2xpZGVzKSB7XG4gICAgbGV0IGFsbFNsaWRlc1NpemUgPSAwO1xuICAgIHNsaWRlc1NpemVzR3JpZC5mb3JFYWNoKHNsaWRlU2l6ZVZhbHVlID0+IHtcbiAgICAgIGFsbFNsaWRlc1NpemUgKz0gc2xpZGVTaXplVmFsdWUgKyAoc3BhY2VCZXR3ZWVuIHx8IDApO1xuICAgIH0pO1xuICAgIGFsbFNsaWRlc1NpemUgLT0gc3BhY2VCZXR3ZWVuO1xuICAgIGNvbnN0IG9mZnNldFNpemUgPSAocGFyYW1zLnNsaWRlc09mZnNldEJlZm9yZSB8fCAwKSArIChwYXJhbXMuc2xpZGVzT2Zmc2V0QWZ0ZXIgfHwgMCk7XG4gICAgaWYgKGFsbFNsaWRlc1NpemUgKyBvZmZzZXRTaXplIDwgc3dpcGVyU2l6ZSkge1xuICAgICAgY29uc3QgYWxsU2xpZGVzT2Zmc2V0ID0gKHN3aXBlclNpemUgLSBhbGxTbGlkZXNTaXplIC0gb2Zmc2V0U2l6ZSkgLyAyO1xuICAgICAgc25hcEdyaWQuZm9yRWFjaCgoc25hcCwgc25hcEluZGV4KSA9PiB7XG4gICAgICAgIHNuYXBHcmlkW3NuYXBJbmRleF0gPSBzbmFwIC0gYWxsU2xpZGVzT2Zmc2V0O1xuICAgICAgfSk7XG4gICAgICBzbGlkZXNHcmlkLmZvckVhY2goKHNuYXAsIHNuYXBJbmRleCkgPT4ge1xuICAgICAgICBzbGlkZXNHcmlkW3NuYXBJbmRleF0gPSBzbmFwICsgYWxsU2xpZGVzT2Zmc2V0O1xuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIE9iamVjdC5hc3NpZ24oc3dpcGVyLCB7XG4gICAgc2xpZGVzLFxuICAgIHNuYXBHcmlkLFxuICAgIHNsaWRlc0dyaWQsXG4gICAgc2xpZGVzU2l6ZXNHcmlkXG4gIH0pO1xuICBpZiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzICYmIHBhcmFtcy5jc3NNb2RlICYmICFwYXJhbXMuY2VudGVyZWRTbGlkZXNCb3VuZHMpIHtcbiAgICBzZXRDU1NQcm9wZXJ0eSh3cmFwcGVyRWwsICctLXN3aXBlci1jZW50ZXJlZC1vZmZzZXQtYmVmb3JlJywgYCR7LXNuYXBHcmlkWzBdfXB4YCk7XG4gICAgc2V0Q1NTUHJvcGVydHkod3JhcHBlckVsLCAnLS1zd2lwZXItY2VudGVyZWQtb2Zmc2V0LWFmdGVyJywgYCR7c3dpcGVyLnNpemUgLyAyIC0gc2xpZGVzU2l6ZXNHcmlkW3NsaWRlc1NpemVzR3JpZC5sZW5ndGggLSAxXSAvIDJ9cHhgKTtcbiAgICBjb25zdCBhZGRUb1NuYXBHcmlkID0gLXN3aXBlci5zbmFwR3JpZFswXTtcbiAgICBjb25zdCBhZGRUb1NsaWRlc0dyaWQgPSAtc3dpcGVyLnNsaWRlc0dyaWRbMF07XG4gICAgc3dpcGVyLnNuYXBHcmlkID0gc3dpcGVyLnNuYXBHcmlkLm1hcCh2ID0+IHYgKyBhZGRUb1NuYXBHcmlkKTtcbiAgICBzd2lwZXIuc2xpZGVzR3JpZCA9IHN3aXBlci5zbGlkZXNHcmlkLm1hcCh2ID0+IHYgKyBhZGRUb1NsaWRlc0dyaWQpO1xuICB9XG4gIGlmIChzbGlkZXNMZW5ndGggIT09IHByZXZpb3VzU2xpZGVzTGVuZ3RoKSB7XG4gICAgc3dpcGVyLmVtaXQoJ3NsaWRlc0xlbmd0aENoYW5nZScpO1xuICB9XG4gIGlmIChzbmFwR3JpZC5sZW5ndGggIT09IHByZXZpb3VzU25hcEdyaWRMZW5ndGgpIHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93KSBzd2lwZXIuY2hlY2tPdmVyZmxvdygpO1xuICAgIHN3aXBlci5lbWl0KCdzbmFwR3JpZExlbmd0aENoYW5nZScpO1xuICB9XG4gIGlmIChzbGlkZXNHcmlkLmxlbmd0aCAhPT0gcHJldmlvdXNTbGlkZXNHcmlkTGVuZ3RoKSB7XG4gICAgc3dpcGVyLmVtaXQoJ3NsaWRlc0dyaWRMZW5ndGhDaGFuZ2UnKTtcbiAgfVxuICBpZiAocGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MpIHtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzT2Zmc2V0KCk7XG4gIH1cbiAgc3dpcGVyLmVtaXQoJ3NsaWRlc1VwZGF0ZWQnKTtcbiAgaWYgKCFpc1ZpcnR1YWwgJiYgIXBhcmFtcy5jc3NNb2RlICYmIChwYXJhbXMuZWZmZWN0ID09PSAnc2xpZGUnIHx8IHBhcmFtcy5lZmZlY3QgPT09ICdmYWRlJykpIHtcbiAgICBjb25zdCBiYWNrRmFjZUhpZGRlbkNsYXNzID0gYCR7cGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9YmFja2ZhY2UtaGlkZGVuYDtcbiAgICBjb25zdCBoYXNDbGFzc0JhY2tmYWNlQ2xhc3NBZGRlZCA9IHN3aXBlci5lbC5jbGFzc0xpc3QuY29udGFpbnMoYmFja0ZhY2VIaWRkZW5DbGFzcyk7XG4gICAgaWYgKHNsaWRlc0xlbmd0aCA8PSBwYXJhbXMubWF4QmFja2ZhY2VIaWRkZW5TbGlkZXMpIHtcbiAgICAgIGlmICghaGFzQ2xhc3NCYWNrZmFjZUNsYXNzQWRkZWQpIHN3aXBlci5lbC5jbGFzc0xpc3QuYWRkKGJhY2tGYWNlSGlkZGVuQ2xhc3MpO1xuICAgIH0gZWxzZSBpZiAoaGFzQ2xhc3NCYWNrZmFjZUNsYXNzQWRkZWQpIHtcbiAgICAgIHN3aXBlci5lbC5jbGFzc0xpc3QucmVtb3ZlKGJhY2tGYWNlSGlkZGVuQ2xhc3MpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiB1cGRhdGVBdXRvSGVpZ2h0KHNwZWVkKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IGFjdGl2ZVNsaWRlcyA9IFtdO1xuICBjb25zdCBpc1ZpcnR1YWwgPSBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZDtcbiAgbGV0IG5ld0hlaWdodCA9IDA7XG4gIGxldCBpO1xuICBpZiAodHlwZW9mIHNwZWVkID09PSAnbnVtYmVyJykge1xuICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKHNwZWVkKTtcbiAgfSBlbHNlIGlmIChzcGVlZCA9PT0gdHJ1ZSkge1xuICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKHN3aXBlci5wYXJhbXMuc3BlZWQpO1xuICB9XG4gIGNvbnN0IGdldFNsaWRlQnlJbmRleCA9IGluZGV4ID0+IHtcbiAgICBpZiAoaXNWaXJ0dWFsKSB7XG4gICAgICByZXR1cm4gc3dpcGVyLnNsaWRlc1tzd2lwZXIuZ2V0U2xpZGVJbmRleEJ5RGF0YShpbmRleCldO1xuICAgIH1cbiAgICByZXR1cm4gc3dpcGVyLnNsaWRlc1tpbmRleF07XG4gIH07XG4gIC8vIEZpbmQgc2xpZGVzIGN1cnJlbnRseSBpbiB2aWV3XG4gIGlmIChzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcgIT09ICdhdXRvJyAmJiBzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcgPiAxKSB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgIChzd2lwZXIudmlzaWJsZVNsaWRlcyB8fCBbXSkuZm9yRWFjaChzbGlkZSA9PiB7XG4gICAgICAgIGFjdGl2ZVNsaWRlcy5wdXNoKHNsaWRlKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgTWF0aC5jZWlsKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyk7IGkgKz0gMSkge1xuICAgICAgICBjb25zdCBpbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleCArIGk7XG4gICAgICAgIGlmIChpbmRleCA+IHN3aXBlci5zbGlkZXMubGVuZ3RoICYmICFpc1ZpcnR1YWwpIGJyZWFrO1xuICAgICAgICBhY3RpdmVTbGlkZXMucHVzaChnZXRTbGlkZUJ5SW5kZXgoaW5kZXgpKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgYWN0aXZlU2xpZGVzLnB1c2goZ2V0U2xpZGVCeUluZGV4KHN3aXBlci5hY3RpdmVJbmRleCkpO1xuICB9XG5cbiAgLy8gRmluZCBuZXcgaGVpZ2h0IGZyb20gaGlnaGVzdCBzbGlkZSBpbiB2aWV3XG4gIGZvciAoaSA9IDA7IGkgPCBhY3RpdmVTbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAodHlwZW9mIGFjdGl2ZVNsaWRlc1tpXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnN0IGhlaWdodCA9IGFjdGl2ZVNsaWRlc1tpXS5vZmZzZXRIZWlnaHQ7XG4gICAgICBuZXdIZWlnaHQgPSBoZWlnaHQgPiBuZXdIZWlnaHQgPyBoZWlnaHQgOiBuZXdIZWlnaHQ7XG4gICAgfVxuICB9XG5cbiAgLy8gVXBkYXRlIEhlaWdodFxuICBpZiAobmV3SGVpZ2h0IHx8IG5ld0hlaWdodCA9PT0gMCkgc3dpcGVyLndyYXBwZXJFbC5zdHlsZS5oZWlnaHQgPSBgJHtuZXdIZWlnaHR9cHhgO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVTbGlkZXNPZmZzZXQoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHNsaWRlcyA9IHN3aXBlci5zbGlkZXM7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBjb25zdCBtaW51c09mZnNldCA9IHN3aXBlci5pc0VsZW1lbnQgPyBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBzd2lwZXIud3JhcHBlckVsLm9mZnNldExlZnQgOiBzd2lwZXIud3JhcHBlckVsLm9mZnNldFRvcCA6IDA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgc2xpZGVzW2ldLnN3aXBlclNsaWRlT2Zmc2V0ID0gKHN3aXBlci5pc0hvcml6b250YWwoKSA/IHNsaWRlc1tpXS5vZmZzZXRMZWZ0IDogc2xpZGVzW2ldLm9mZnNldFRvcCkgLSBtaW51c09mZnNldCAtIHN3aXBlci5jc3NPdmVyZmxvd0FkanVzdG1lbnQoKTtcbiAgfVxufVxuXG5jb25zdCB0b2dnbGVTbGlkZUNsYXNzZXMkMSA9IChzbGlkZUVsLCBjb25kaXRpb24sIGNsYXNzTmFtZSkgPT4ge1xuICBpZiAoY29uZGl0aW9uICYmICFzbGlkZUVsLmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpKSB7XG4gICAgc2xpZGVFbC5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7XG4gIH0gZWxzZSBpZiAoIWNvbmRpdGlvbiAmJiBzbGlkZUVsLmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpKSB7XG4gICAgc2xpZGVFbC5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZSk7XG4gIH1cbn07XG5mdW5jdGlvbiB1cGRhdGVTbGlkZXNQcm9ncmVzcyh0cmFuc2xhdGUpIHtcbiAgaWYgKHRyYW5zbGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgdHJhbnNsYXRlID0gdGhpcyAmJiB0aGlzLnRyYW5zbGF0ZSB8fCAwO1xuICB9XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gIGNvbnN0IHtcbiAgICBzbGlkZXMsXG4gICAgcnRsVHJhbnNsYXRlOiBydGwsXG4gICAgc25hcEdyaWRcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKHNsaWRlcy5sZW5ndGggPT09IDApIHJldHVybjtcbiAgaWYgKHR5cGVvZiBzbGlkZXNbMF0uc3dpcGVyU2xpZGVPZmZzZXQgPT09ICd1bmRlZmluZWQnKSBzd2lwZXIudXBkYXRlU2xpZGVzT2Zmc2V0KCk7XG4gIGxldCBvZmZzZXRDZW50ZXIgPSAtdHJhbnNsYXRlO1xuICBpZiAocnRsKSBvZmZzZXRDZW50ZXIgPSB0cmFuc2xhdGU7XG4gIHN3aXBlci52aXNpYmxlU2xpZGVzSW5kZXhlcyA9IFtdO1xuICBzd2lwZXIudmlzaWJsZVNsaWRlcyA9IFtdO1xuICBsZXQgc3BhY2VCZXR3ZWVuID0gcGFyYW1zLnNwYWNlQmV0d2VlbjtcbiAgaWYgKHR5cGVvZiBzcGFjZUJldHdlZW4gPT09ICdzdHJpbmcnICYmIHNwYWNlQmV0d2Vlbi5pbmRleE9mKCclJykgPj0gMCkge1xuICAgIHNwYWNlQmV0d2VlbiA9IHBhcnNlRmxvYXQoc3BhY2VCZXR3ZWVuLnJlcGxhY2UoJyUnLCAnJykpIC8gMTAwICogc3dpcGVyLnNpemU7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHNwYWNlQmV0d2VlbiA9PT0gJ3N0cmluZycpIHtcbiAgICBzcGFjZUJldHdlZW4gPSBwYXJzZUZsb2F0KHNwYWNlQmV0d2Vlbik7XG4gIH1cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25zdCBzbGlkZSA9IHNsaWRlc1tpXTtcbiAgICBsZXQgc2xpZGVPZmZzZXQgPSBzbGlkZS5zd2lwZXJTbGlkZU9mZnNldDtcbiAgICBpZiAocGFyYW1zLmNzc01vZGUgJiYgcGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICBzbGlkZU9mZnNldCAtPSBzbGlkZXNbMF0uc3dpcGVyU2xpZGVPZmZzZXQ7XG4gICAgfVxuICAgIGNvbnN0IHNsaWRlUHJvZ3Jlc3MgPSAob2Zmc2V0Q2VudGVyICsgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcyA/IHN3aXBlci5taW5UcmFuc2xhdGUoKSA6IDApIC0gc2xpZGVPZmZzZXQpIC8gKHNsaWRlLnN3aXBlclNsaWRlU2l6ZSArIHNwYWNlQmV0d2Vlbik7XG4gICAgY29uc3Qgb3JpZ2luYWxTbGlkZVByb2dyZXNzID0gKG9mZnNldENlbnRlciAtIHNuYXBHcmlkWzBdICsgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcyA/IHN3aXBlci5taW5UcmFuc2xhdGUoKSA6IDApIC0gc2xpZGVPZmZzZXQpIC8gKHNsaWRlLnN3aXBlclNsaWRlU2l6ZSArIHNwYWNlQmV0d2Vlbik7XG4gICAgY29uc3Qgc2xpZGVCZWZvcmUgPSAtKG9mZnNldENlbnRlciAtIHNsaWRlT2Zmc2V0KTtcbiAgICBjb25zdCBzbGlkZUFmdGVyID0gc2xpZGVCZWZvcmUgKyBzd2lwZXIuc2xpZGVzU2l6ZXNHcmlkW2ldO1xuICAgIGNvbnN0IGlzRnVsbHlWaXNpYmxlID0gc2xpZGVCZWZvcmUgPj0gMCAmJiBzbGlkZUJlZm9yZSA8PSBzd2lwZXIuc2l6ZSAtIHN3aXBlci5zbGlkZXNTaXplc0dyaWRbaV07XG4gICAgY29uc3QgaXNWaXNpYmxlID0gc2xpZGVCZWZvcmUgPj0gMCAmJiBzbGlkZUJlZm9yZSA8IHN3aXBlci5zaXplIC0gMSB8fCBzbGlkZUFmdGVyID4gMSAmJiBzbGlkZUFmdGVyIDw9IHN3aXBlci5zaXplIHx8IHNsaWRlQmVmb3JlIDw9IDAgJiYgc2xpZGVBZnRlciA+PSBzd2lwZXIuc2l6ZTtcbiAgICBpZiAoaXNWaXNpYmxlKSB7XG4gICAgICBzd2lwZXIudmlzaWJsZVNsaWRlcy5wdXNoKHNsaWRlKTtcbiAgICAgIHN3aXBlci52aXNpYmxlU2xpZGVzSW5kZXhlcy5wdXNoKGkpO1xuICAgIH1cbiAgICB0b2dnbGVTbGlkZUNsYXNzZXMkMShzbGlkZSwgaXNWaXNpYmxlLCBwYXJhbXMuc2xpZGVWaXNpYmxlQ2xhc3MpO1xuICAgIHRvZ2dsZVNsaWRlQ2xhc3NlcyQxKHNsaWRlLCBpc0Z1bGx5VmlzaWJsZSwgcGFyYW1zLnNsaWRlRnVsbHlWaXNpYmxlQ2xhc3MpO1xuICAgIHNsaWRlLnByb2dyZXNzID0gcnRsID8gLXNsaWRlUHJvZ3Jlc3MgOiBzbGlkZVByb2dyZXNzO1xuICAgIHNsaWRlLm9yaWdpbmFsUHJvZ3Jlc3MgPSBydGwgPyAtb3JpZ2luYWxTbGlkZVByb2dyZXNzIDogb3JpZ2luYWxTbGlkZVByb2dyZXNzO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZVByb2dyZXNzKHRyYW5zbGF0ZSkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBpZiAodHlwZW9mIHRyYW5zbGF0ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjb25zdCBtdWx0aXBsaWVyID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZSA/IC0xIDogMTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICB0cmFuc2xhdGUgPSBzd2lwZXIgJiYgc3dpcGVyLnRyYW5zbGF0ZSAmJiBzd2lwZXIudHJhbnNsYXRlICogbXVsdGlwbGllciB8fCAwO1xuICB9XG4gIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gIGNvbnN0IHRyYW5zbGF0ZXNEaWZmID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpO1xuICBsZXQge1xuICAgIHByb2dyZXNzLFxuICAgIGlzQmVnaW5uaW5nLFxuICAgIGlzRW5kLFxuICAgIHByb2dyZXNzTG9vcFxuICB9ID0gc3dpcGVyO1xuICBjb25zdCB3YXNCZWdpbm5pbmcgPSBpc0JlZ2lubmluZztcbiAgY29uc3Qgd2FzRW5kID0gaXNFbmQ7XG4gIGlmICh0cmFuc2xhdGVzRGlmZiA9PT0gMCkge1xuICAgIHByb2dyZXNzID0gMDtcbiAgICBpc0JlZ2lubmluZyA9IHRydWU7XG4gICAgaXNFbmQgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHByb2dyZXNzID0gKHRyYW5zbGF0ZSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKSkgLyB0cmFuc2xhdGVzRGlmZjtcbiAgICBjb25zdCBpc0JlZ2lubmluZ1JvdW5kZWQgPSBNYXRoLmFicyh0cmFuc2xhdGUgLSBzd2lwZXIubWluVHJhbnNsYXRlKCkpIDwgMTtcbiAgICBjb25zdCBpc0VuZFJvdW5kZWQgPSBNYXRoLmFicyh0cmFuc2xhdGUgLSBzd2lwZXIubWF4VHJhbnNsYXRlKCkpIDwgMTtcbiAgICBpc0JlZ2lubmluZyA9IGlzQmVnaW5uaW5nUm91bmRlZCB8fCBwcm9ncmVzcyA8PSAwO1xuICAgIGlzRW5kID0gaXNFbmRSb3VuZGVkIHx8IHByb2dyZXNzID49IDE7XG4gICAgaWYgKGlzQmVnaW5uaW5nUm91bmRlZCkgcHJvZ3Jlc3MgPSAwO1xuICAgIGlmIChpc0VuZFJvdW5kZWQpIHByb2dyZXNzID0gMTtcbiAgfVxuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBjb25zdCBmaXJzdFNsaWRlSW5kZXggPSBzd2lwZXIuZ2V0U2xpZGVJbmRleEJ5RGF0YSgwKTtcbiAgICBjb25zdCBsYXN0U2xpZGVJbmRleCA9IHN3aXBlci5nZXRTbGlkZUluZGV4QnlEYXRhKHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gMSk7XG4gICAgY29uc3QgZmlyc3RTbGlkZVRyYW5zbGF0ZSA9IHN3aXBlci5zbGlkZXNHcmlkW2ZpcnN0U2xpZGVJbmRleF07XG4gICAgY29uc3QgbGFzdFNsaWRlVHJhbnNsYXRlID0gc3dpcGVyLnNsaWRlc0dyaWRbbGFzdFNsaWRlSW5kZXhdO1xuICAgIGNvbnN0IHRyYW5zbGF0ZU1heCA9IHN3aXBlci5zbGlkZXNHcmlkW3N3aXBlci5zbGlkZXNHcmlkLmxlbmd0aCAtIDFdO1xuICAgIGNvbnN0IHRyYW5zbGF0ZUFicyA9IE1hdGguYWJzKHRyYW5zbGF0ZSk7XG4gICAgaWYgKHRyYW5zbGF0ZUFicyA+PSBmaXJzdFNsaWRlVHJhbnNsYXRlKSB7XG4gICAgICBwcm9ncmVzc0xvb3AgPSAodHJhbnNsYXRlQWJzIC0gZmlyc3RTbGlkZVRyYW5zbGF0ZSkgLyB0cmFuc2xhdGVNYXg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb2dyZXNzTG9vcCA9ICh0cmFuc2xhdGVBYnMgKyB0cmFuc2xhdGVNYXggLSBsYXN0U2xpZGVUcmFuc2xhdGUpIC8gdHJhbnNsYXRlTWF4O1xuICAgIH1cbiAgICBpZiAocHJvZ3Jlc3NMb29wID4gMSkgcHJvZ3Jlc3NMb29wIC09IDE7XG4gIH1cbiAgT2JqZWN0LmFzc2lnbihzd2lwZXIsIHtcbiAgICBwcm9ncmVzcyxcbiAgICBwcm9ncmVzc0xvb3AsXG4gICAgaXNCZWdpbm5pbmcsXG4gICAgaXNFbmRcbiAgfSk7XG4gIGlmIChwYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcyB8fCBwYXJhbXMuY2VudGVyZWRTbGlkZXMgJiYgcGFyYW1zLmF1dG9IZWlnaHQpIHN3aXBlci51cGRhdGVTbGlkZXNQcm9ncmVzcyh0cmFuc2xhdGUpO1xuICBpZiAoaXNCZWdpbm5pbmcgJiYgIXdhc0JlZ2lubmluZykge1xuICAgIHN3aXBlci5lbWl0KCdyZWFjaEJlZ2lubmluZyB0b0VkZ2UnKTtcbiAgfVxuICBpZiAoaXNFbmQgJiYgIXdhc0VuZCkge1xuICAgIHN3aXBlci5lbWl0KCdyZWFjaEVuZCB0b0VkZ2UnKTtcbiAgfVxuICBpZiAod2FzQmVnaW5uaW5nICYmICFpc0JlZ2lubmluZyB8fCB3YXNFbmQgJiYgIWlzRW5kKSB7XG4gICAgc3dpcGVyLmVtaXQoJ2Zyb21FZGdlJyk7XG4gIH1cbiAgc3dpcGVyLmVtaXQoJ3Byb2dyZXNzJywgcHJvZ3Jlc3MpO1xufVxuXG5jb25zdCB0b2dnbGVTbGlkZUNsYXNzZXMgPSAoc2xpZGVFbCwgY29uZGl0aW9uLCBjbGFzc05hbWUpID0+IHtcbiAgaWYgKGNvbmRpdGlvbiAmJiAhc2xpZGVFbC5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKSkge1xuICAgIHNsaWRlRWwuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO1xuICB9IGVsc2UgaWYgKCFjb25kaXRpb24gJiYgc2xpZGVFbC5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKSkge1xuICAgIHNsaWRlRWwuY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpO1xuICB9XG59O1xuZnVuY3Rpb24gdXBkYXRlU2xpZGVzQ2xhc3NlcygpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHNsaWRlcyxcbiAgICBwYXJhbXMsXG4gICAgc2xpZGVzRWwsXG4gICAgYWN0aXZlSW5kZXhcbiAgfSA9IHN3aXBlcjtcbiAgY29uc3QgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgcGFyYW1zLnZpcnR1YWwuZW5hYmxlZDtcbiAgY29uc3QgZ3JpZEVuYWJsZWQgPSBzd2lwZXIuZ3JpZCAmJiBwYXJhbXMuZ3JpZCAmJiBwYXJhbXMuZ3JpZC5yb3dzID4gMTtcbiAgY29uc3QgZ2V0RmlsdGVyZWRTbGlkZSA9IHNlbGVjdG9yID0+IHtcbiAgICByZXR1cm4gZWxlbWVudENoaWxkcmVuKHNsaWRlc0VsLCBgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9JHtzZWxlY3Rvcn0sIHN3aXBlci1zbGlkZSR7c2VsZWN0b3J9YClbMF07XG4gIH07XG4gIGxldCBhY3RpdmVTbGlkZTtcbiAgbGV0IHByZXZTbGlkZTtcbiAgbGV0IG5leHRTbGlkZTtcbiAgaWYgKGlzVmlydHVhbCkge1xuICAgIGlmIChwYXJhbXMubG9vcCkge1xuICAgICAgbGV0IHNsaWRlSW5kZXggPSBhY3RpdmVJbmRleCAtIHN3aXBlci52aXJ0dWFsLnNsaWRlc0JlZm9yZTtcbiAgICAgIGlmIChzbGlkZUluZGV4IDwgMCkgc2xpZGVJbmRleCA9IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggKyBzbGlkZUluZGV4O1xuICAgICAgaWYgKHNsaWRlSW5kZXggPj0gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCkgc2xpZGVJbmRleCAtPSBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoO1xuICAgICAgYWN0aXZlU2xpZGUgPSBnZXRGaWx0ZXJlZFNsaWRlKGBbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke3NsaWRlSW5kZXh9XCJdYCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFjdGl2ZVNsaWRlID0gZ2V0RmlsdGVyZWRTbGlkZShgW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHthY3RpdmVJbmRleH1cIl1gKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGdyaWRFbmFibGVkKSB7XG4gICAgICBhY3RpdmVTbGlkZSA9IHNsaWRlcy5maWx0ZXIoc2xpZGVFbCA9PiBzbGlkZUVsLmNvbHVtbiA9PT0gYWN0aXZlSW5kZXgpWzBdO1xuICAgICAgbmV4dFNsaWRlID0gc2xpZGVzLmZpbHRlcihzbGlkZUVsID0+IHNsaWRlRWwuY29sdW1uID09PSBhY3RpdmVJbmRleCArIDEpWzBdO1xuICAgICAgcHJldlNsaWRlID0gc2xpZGVzLmZpbHRlcihzbGlkZUVsID0+IHNsaWRlRWwuY29sdW1uID09PSBhY3RpdmVJbmRleCAtIDEpWzBdO1xuICAgIH0gZWxzZSB7XG4gICAgICBhY3RpdmVTbGlkZSA9IHNsaWRlc1thY3RpdmVJbmRleF07XG4gICAgfVxuICB9XG4gIGlmIChhY3RpdmVTbGlkZSkge1xuICAgIGlmICghZ3JpZEVuYWJsZWQpIHtcbiAgICAgIC8vIE5leHQgU2xpZGVcbiAgICAgIG5leHRTbGlkZSA9IGVsZW1lbnROZXh0QWxsKGFjdGl2ZVNsaWRlLCBgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKVswXTtcbiAgICAgIGlmIChwYXJhbXMubG9vcCAmJiAhbmV4dFNsaWRlKSB7XG4gICAgICAgIG5leHRTbGlkZSA9IHNsaWRlc1swXTtcbiAgICAgIH1cblxuICAgICAgLy8gUHJldiBTbGlkZVxuICAgICAgcHJldlNsaWRlID0gZWxlbWVudFByZXZBbGwoYWN0aXZlU2xpZGUsIGAuJHtwYXJhbXMuc2xpZGVDbGFzc30sIHN3aXBlci1zbGlkZWApWzBdO1xuICAgICAgaWYgKHBhcmFtcy5sb29wICYmICFwcmV2U2xpZGUgPT09IDApIHtcbiAgICAgICAgcHJldlNsaWRlID0gc2xpZGVzW3NsaWRlcy5sZW5ndGggLSAxXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgc2xpZGVzLmZvckVhY2goc2xpZGVFbCA9PiB7XG4gICAgdG9nZ2xlU2xpZGVDbGFzc2VzKHNsaWRlRWwsIHNsaWRlRWwgPT09IGFjdGl2ZVNsaWRlLCBwYXJhbXMuc2xpZGVBY3RpdmVDbGFzcyk7XG4gICAgdG9nZ2xlU2xpZGVDbGFzc2VzKHNsaWRlRWwsIHNsaWRlRWwgPT09IG5leHRTbGlkZSwgcGFyYW1zLnNsaWRlTmV4dENsYXNzKTtcbiAgICB0b2dnbGVTbGlkZUNsYXNzZXMoc2xpZGVFbCwgc2xpZGVFbCA9PT0gcHJldlNsaWRlLCBwYXJhbXMuc2xpZGVQcmV2Q2xhc3MpO1xuICB9KTtcbiAgc3dpcGVyLmVtaXRTbGlkZXNDbGFzc2VzKCk7XG59XG5cbmNvbnN0IHByb2Nlc3NMYXp5UHJlbG9hZGVyID0gKHN3aXBlciwgaW1hZ2VFbCkgPT4ge1xuICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIucGFyYW1zKSByZXR1cm47XG4gIGNvbnN0IHNsaWRlU2VsZWN0b3IgPSAoKSA9PiBzd2lwZXIuaXNFbGVtZW50ID8gYHN3aXBlci1zbGlkZWAgOiBgLiR7c3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzfWA7XG4gIGNvbnN0IHNsaWRlRWwgPSBpbWFnZUVsLmNsb3Nlc3Qoc2xpZGVTZWxlY3RvcigpKTtcbiAgaWYgKHNsaWRlRWwpIHtcbiAgICBsZXQgbGF6eUVsID0gc2xpZGVFbC5xdWVyeVNlbGVjdG9yKGAuJHtzd2lwZXIucGFyYW1zLmxhenlQcmVsb2FkZXJDbGFzc31gKTtcbiAgICBpZiAoIWxhenlFbCAmJiBzd2lwZXIuaXNFbGVtZW50KSB7XG4gICAgICBpZiAoc2xpZGVFbC5zaGFkb3dSb290KSB7XG4gICAgICAgIGxhenlFbCA9IHNsaWRlRWwuc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKGAuJHtzd2lwZXIucGFyYW1zLmxhenlQcmVsb2FkZXJDbGFzc31gKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGluaXQgbGF0ZXJcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICBpZiAoc2xpZGVFbC5zaGFkb3dSb290KSB7XG4gICAgICAgICAgICBsYXp5RWwgPSBzbGlkZUVsLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcihgLiR7c3dpcGVyLnBhcmFtcy5sYXp5UHJlbG9hZGVyQ2xhc3N9YCk7XG4gICAgICAgICAgICBpZiAobGF6eUVsKSBsYXp5RWwucmVtb3ZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGxhenlFbCkgbGF6eUVsLnJlbW92ZSgpO1xuICB9XG59O1xuY29uc3QgdW5sYXp5ID0gKHN3aXBlciwgaW5kZXgpID0+IHtcbiAgaWYgKCFzd2lwZXIuc2xpZGVzW2luZGV4XSkgcmV0dXJuO1xuICBjb25zdCBpbWFnZUVsID0gc3dpcGVyLnNsaWRlc1tpbmRleF0ucXVlcnlTZWxlY3RvcignW2xvYWRpbmc9XCJsYXp5XCJdJyk7XG4gIGlmIChpbWFnZUVsKSBpbWFnZUVsLnJlbW92ZUF0dHJpYnV0ZSgnbG9hZGluZycpO1xufTtcbmNvbnN0IHByZWxvYWQgPSBzd2lwZXIgPT4ge1xuICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIucGFyYW1zKSByZXR1cm47XG4gIGxldCBhbW91bnQgPSBzd2lwZXIucGFyYW1zLmxhenlQcmVsb2FkUHJldk5leHQ7XG4gIGNvbnN0IGxlbiA9IHN3aXBlci5zbGlkZXMubGVuZ3RoO1xuICBpZiAoIWxlbiB8fCAhYW1vdW50IHx8IGFtb3VudCA8IDApIHJldHVybjtcbiAgYW1vdW50ID0gTWF0aC5taW4oYW1vdW50LCBsZW4pO1xuICBjb25zdCBzbGlkZXNQZXJWaWV3ID0gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgPyBzd2lwZXIuc2xpZGVzUGVyVmlld0R5bmFtaWMoKSA6IE1hdGguY2VpbChzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcpO1xuICBjb25zdCBhY3RpdmVJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleDtcbiAgaWYgKHN3aXBlci5wYXJhbXMuZ3JpZCAmJiBzd2lwZXIucGFyYW1zLmdyaWQucm93cyA+IDEpIHtcbiAgICBjb25zdCBhY3RpdmVDb2x1bW4gPSBhY3RpdmVJbmRleDtcbiAgICBjb25zdCBwcmVsb2FkQ29sdW1ucyA9IFthY3RpdmVDb2x1bW4gLSBhbW91bnRdO1xuICAgIHByZWxvYWRDb2x1bW5zLnB1c2goLi4uQXJyYXkuZnJvbSh7XG4gICAgICBsZW5ndGg6IGFtb3VudFxuICAgIH0pLm1hcCgoXywgaSkgPT4ge1xuICAgICAgcmV0dXJuIGFjdGl2ZUNvbHVtbiArIHNsaWRlc1BlclZpZXcgKyBpO1xuICAgIH0pKTtcbiAgICBzd2lwZXIuc2xpZGVzLmZvckVhY2goKHNsaWRlRWwsIGkpID0+IHtcbiAgICAgIGlmIChwcmVsb2FkQ29sdW1ucy5pbmNsdWRlcyhzbGlkZUVsLmNvbHVtbikpIHVubGF6eShzd2lwZXIsIGkpO1xuICAgIH0pO1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBzbGlkZUluZGV4TGFzdEluVmlldyA9IGFjdGl2ZUluZGV4ICsgc2xpZGVzUGVyVmlldyAtIDE7XG4gIGlmIChzd2lwZXIucGFyYW1zLnJld2luZCB8fCBzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICBmb3IgKGxldCBpID0gYWN0aXZlSW5kZXggLSBhbW91bnQ7IGkgPD0gc2xpZGVJbmRleExhc3RJblZpZXcgKyBhbW91bnQ7IGkgKz0gMSkge1xuICAgICAgY29uc3QgcmVhbEluZGV4ID0gKGkgJSBsZW4gKyBsZW4pICUgbGVuO1xuICAgICAgaWYgKHJlYWxJbmRleCA8IGFjdGl2ZUluZGV4IHx8IHJlYWxJbmRleCA+IHNsaWRlSW5kZXhMYXN0SW5WaWV3KSB1bmxhenkoc3dpcGVyLCByZWFsSW5kZXgpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBmb3IgKGxldCBpID0gTWF0aC5tYXgoYWN0aXZlSW5kZXggLSBhbW91bnQsIDApOyBpIDw9IE1hdGgubWluKHNsaWRlSW5kZXhMYXN0SW5WaWV3ICsgYW1vdW50LCBsZW4gLSAxKTsgaSArPSAxKSB7XG4gICAgICBpZiAoaSAhPT0gYWN0aXZlSW5kZXggJiYgKGkgPiBzbGlkZUluZGV4TGFzdEluVmlldyB8fCBpIDwgYWN0aXZlSW5kZXgpKSB7XG4gICAgICAgIHVubGF6eShzd2lwZXIsIGkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gZ2V0QWN0aXZlSW5kZXhCeVRyYW5zbGF0ZShzd2lwZXIpIHtcbiAgY29uc3Qge1xuICAgIHNsaWRlc0dyaWQsXG4gICAgcGFyYW1zXG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IHRyYW5zbGF0ZSA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyBzd2lwZXIudHJhbnNsYXRlIDogLXN3aXBlci50cmFuc2xhdGU7XG4gIGxldCBhY3RpdmVJbmRleDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXNHcmlkLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKHR5cGVvZiBzbGlkZXNHcmlkW2kgKyAxXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGlmICh0cmFuc2xhdGUgPj0gc2xpZGVzR3JpZFtpXSAmJiB0cmFuc2xhdGUgPCBzbGlkZXNHcmlkW2kgKyAxXSAtIChzbGlkZXNHcmlkW2kgKyAxXSAtIHNsaWRlc0dyaWRbaV0pIC8gMikge1xuICAgICAgICBhY3RpdmVJbmRleCA9IGk7XG4gICAgICB9IGVsc2UgaWYgKHRyYW5zbGF0ZSA+PSBzbGlkZXNHcmlkW2ldICYmIHRyYW5zbGF0ZSA8IHNsaWRlc0dyaWRbaSArIDFdKSB7XG4gICAgICAgIGFjdGl2ZUluZGV4ID0gaSArIDE7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0cmFuc2xhdGUgPj0gc2xpZGVzR3JpZFtpXSkge1xuICAgICAgYWN0aXZlSW5kZXggPSBpO1xuICAgIH1cbiAgfVxuICAvLyBOb3JtYWxpemUgc2xpZGVJbmRleFxuICBpZiAocGFyYW1zLm5vcm1hbGl6ZVNsaWRlSW5kZXgpIHtcbiAgICBpZiAoYWN0aXZlSW5kZXggPCAwIHx8IHR5cGVvZiBhY3RpdmVJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIGFjdGl2ZUluZGV4ID0gMDtcbiAgfVxuICByZXR1cm4gYWN0aXZlSW5kZXg7XG59XG5mdW5jdGlvbiB1cGRhdGVBY3RpdmVJbmRleChuZXdBY3RpdmVJbmRleCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB0cmFuc2xhdGUgPSBzd2lwZXIucnRsVHJhbnNsYXRlID8gc3dpcGVyLnRyYW5zbGF0ZSA6IC1zd2lwZXIudHJhbnNsYXRlO1xuICBjb25zdCB7XG4gICAgc25hcEdyaWQsXG4gICAgcGFyYW1zLFxuICAgIGFjdGl2ZUluZGV4OiBwcmV2aW91c0luZGV4LFxuICAgIHJlYWxJbmRleDogcHJldmlvdXNSZWFsSW5kZXgsXG4gICAgc25hcEluZGV4OiBwcmV2aW91c1NuYXBJbmRleFxuICB9ID0gc3dpcGVyO1xuICBsZXQgYWN0aXZlSW5kZXggPSBuZXdBY3RpdmVJbmRleDtcbiAgbGV0IHNuYXBJbmRleDtcbiAgY29uc3QgZ2V0VmlydHVhbFJlYWxJbmRleCA9IGFJbmRleCA9PiB7XG4gICAgbGV0IHJlYWxJbmRleCA9IGFJbmRleCAtIHN3aXBlci52aXJ0dWFsLnNsaWRlc0JlZm9yZTtcbiAgICBpZiAocmVhbEluZGV4IDwgMCkge1xuICAgICAgcmVhbEluZGV4ID0gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCArIHJlYWxJbmRleDtcbiAgICB9XG4gICAgaWYgKHJlYWxJbmRleCA+PSBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoKSB7XG4gICAgICByZWFsSW5kZXggLT0gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aDtcbiAgICB9XG4gICAgcmV0dXJuIHJlYWxJbmRleDtcbiAgfTtcbiAgaWYgKHR5cGVvZiBhY3RpdmVJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBhY3RpdmVJbmRleCA9IGdldEFjdGl2ZUluZGV4QnlUcmFuc2xhdGUoc3dpcGVyKTtcbiAgfVxuICBpZiAoc25hcEdyaWQuaW5kZXhPZih0cmFuc2xhdGUpID49IDApIHtcbiAgICBzbmFwSW5kZXggPSBzbmFwR3JpZC5pbmRleE9mKHRyYW5zbGF0ZSk7XG4gIH0gZWxzZSB7XG4gICAgY29uc3Qgc2tpcCA9IE1hdGgubWluKHBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAsIGFjdGl2ZUluZGV4KTtcbiAgICBzbmFwSW5kZXggPSBza2lwICsgTWF0aC5mbG9vcigoYWN0aXZlSW5kZXggLSBza2lwKSAvIHBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG4gIH1cbiAgaWYgKHNuYXBJbmRleCA+PSBzbmFwR3JpZC5sZW5ndGgpIHNuYXBJbmRleCA9IHNuYXBHcmlkLmxlbmd0aCAtIDE7XG4gIGlmIChhY3RpdmVJbmRleCA9PT0gcHJldmlvdXNJbmRleCAmJiAhc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgaWYgKHNuYXBJbmRleCAhPT0gcHJldmlvdXNTbmFwSW5kZXgpIHtcbiAgICAgIHN3aXBlci5zbmFwSW5kZXggPSBzbmFwSW5kZXg7XG4gICAgICBzd2lwZXIuZW1pdCgnc25hcEluZGV4Q2hhbmdlJyk7XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuICBpZiAoYWN0aXZlSW5kZXggPT09IHByZXZpb3VzSW5kZXggJiYgc3dpcGVyLnBhcmFtcy5sb29wICYmIHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkKSB7XG4gICAgc3dpcGVyLnJlYWxJbmRleCA9IGdldFZpcnR1YWxSZWFsSW5kZXgoYWN0aXZlSW5kZXgpO1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBncmlkRW5hYmxlZCA9IHN3aXBlci5ncmlkICYmIHBhcmFtcy5ncmlkICYmIHBhcmFtcy5ncmlkLnJvd3MgPiAxO1xuXG4gIC8vIEdldCByZWFsIGluZGV4XG4gIGxldCByZWFsSW5kZXg7XG4gIGlmIChzd2lwZXIudmlydHVhbCAmJiBwYXJhbXMudmlydHVhbC5lbmFibGVkICYmIHBhcmFtcy5sb29wKSB7XG4gICAgcmVhbEluZGV4ID0gZ2V0VmlydHVhbFJlYWxJbmRleChhY3RpdmVJbmRleCk7XG4gIH0gZWxzZSBpZiAoZ3JpZEVuYWJsZWQpIHtcbiAgICBjb25zdCBmaXJzdFNsaWRlSW5Db2x1bW4gPSBzd2lwZXIuc2xpZGVzLmZpbHRlcihzbGlkZUVsID0+IHNsaWRlRWwuY29sdW1uID09PSBhY3RpdmVJbmRleClbMF07XG4gICAgbGV0IGFjdGl2ZVNsaWRlSW5kZXggPSBwYXJzZUludChmaXJzdFNsaWRlSW5Db2x1bW4uZ2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpLCAxMCk7XG4gICAgaWYgKE51bWJlci5pc05hTihhY3RpdmVTbGlkZUluZGV4KSkge1xuICAgICAgYWN0aXZlU2xpZGVJbmRleCA9IE1hdGgubWF4KHN3aXBlci5zbGlkZXMuaW5kZXhPZihmaXJzdFNsaWRlSW5Db2x1bW4pLCAwKTtcbiAgICB9XG4gICAgcmVhbEluZGV4ID0gTWF0aC5mbG9vcihhY3RpdmVTbGlkZUluZGV4IC8gcGFyYW1zLmdyaWQucm93cyk7XG4gIH0gZWxzZSBpZiAoc3dpcGVyLnNsaWRlc1thY3RpdmVJbmRleF0pIHtcbiAgICBjb25zdCBzbGlkZUluZGV4ID0gc3dpcGVyLnNsaWRlc1thY3RpdmVJbmRleF0uZ2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpO1xuICAgIGlmIChzbGlkZUluZGV4KSB7XG4gICAgICByZWFsSW5kZXggPSBwYXJzZUludChzbGlkZUluZGV4LCAxMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlYWxJbmRleCA9IGFjdGl2ZUluZGV4O1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZWFsSW5kZXggPSBhY3RpdmVJbmRleDtcbiAgfVxuICBPYmplY3QuYXNzaWduKHN3aXBlciwge1xuICAgIHByZXZpb3VzU25hcEluZGV4LFxuICAgIHNuYXBJbmRleCxcbiAgICBwcmV2aW91c1JlYWxJbmRleCxcbiAgICByZWFsSW5kZXgsXG4gICAgcHJldmlvdXNJbmRleCxcbiAgICBhY3RpdmVJbmRleFxuICB9KTtcbiAgaWYgKHN3aXBlci5pbml0aWFsaXplZCkge1xuICAgIHByZWxvYWQoc3dpcGVyKTtcbiAgfVxuICBzd2lwZXIuZW1pdCgnYWN0aXZlSW5kZXhDaGFuZ2UnKTtcbiAgc3dpcGVyLmVtaXQoJ3NuYXBJbmRleENoYW5nZScpO1xuICBpZiAoc3dpcGVyLmluaXRpYWxpemVkIHx8IHN3aXBlci5wYXJhbXMucnVuQ2FsbGJhY2tzT25Jbml0KSB7XG4gICAgaWYgKHByZXZpb3VzUmVhbEluZGV4ICE9PSByZWFsSW5kZXgpIHtcbiAgICAgIHN3aXBlci5lbWl0KCdyZWFsSW5kZXhDaGFuZ2UnKTtcbiAgICB9XG4gICAgc3dpcGVyLmVtaXQoJ3NsaWRlQ2hhbmdlJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlQ2xpY2tlZFNsaWRlKGVsLCBwYXRoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gIGxldCBzbGlkZSA9IGVsLmNsb3Nlc3QoYC4ke3BhcmFtcy5zbGlkZUNsYXNzfSwgc3dpcGVyLXNsaWRlYCk7XG4gIGlmICghc2xpZGUgJiYgc3dpcGVyLmlzRWxlbWVudCAmJiBwYXRoICYmIHBhdGgubGVuZ3RoID4gMSAmJiBwYXRoLmluY2x1ZGVzKGVsKSkge1xuICAgIFsuLi5wYXRoLnNsaWNlKHBhdGguaW5kZXhPZihlbCkgKyAxLCBwYXRoLmxlbmd0aCldLmZvckVhY2gocGF0aEVsID0+IHtcbiAgICAgIGlmICghc2xpZGUgJiYgcGF0aEVsLm1hdGNoZXMgJiYgcGF0aEVsLm1hdGNoZXMoYC4ke3BhcmFtcy5zbGlkZUNsYXNzfSwgc3dpcGVyLXNsaWRlYCkpIHtcbiAgICAgICAgc2xpZGUgPSBwYXRoRWw7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgbGV0IHNsaWRlRm91bmQgPSBmYWxzZTtcbiAgbGV0IHNsaWRlSW5kZXg7XG4gIGlmIChzbGlkZSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3dpcGVyLnNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKHN3aXBlci5zbGlkZXNbaV0gPT09IHNsaWRlKSB7XG4gICAgICAgIHNsaWRlRm91bmQgPSB0cnVlO1xuICAgICAgICBzbGlkZUluZGV4ID0gaTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChzbGlkZSAmJiBzbGlkZUZvdW5kKSB7XG4gICAgc3dpcGVyLmNsaWNrZWRTbGlkZSA9IHNsaWRlO1xuICAgIGlmIChzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCkge1xuICAgICAgc3dpcGVyLmNsaWNrZWRJbmRleCA9IHBhcnNlSW50KHNsaWRlLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSwgMTApO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuY2xpY2tlZEluZGV4ID0gc2xpZGVJbmRleDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyLmNsaWNrZWRTbGlkZSA9IHVuZGVmaW5lZDtcbiAgICBzd2lwZXIuY2xpY2tlZEluZGV4ID0gdW5kZWZpbmVkO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocGFyYW1zLnNsaWRlVG9DbGlja2VkU2xpZGUgJiYgc3dpcGVyLmNsaWNrZWRJbmRleCAhPT0gdW5kZWZpbmVkICYmIHN3aXBlci5jbGlja2VkSW5kZXggIT09IHN3aXBlci5hY3RpdmVJbmRleCkge1xuICAgIHN3aXBlci5zbGlkZVRvQ2xpY2tlZFNsaWRlKCk7XG4gIH1cbn1cblxudmFyIHVwZGF0ZSA9IHtcbiAgdXBkYXRlU2l6ZSxcbiAgdXBkYXRlU2xpZGVzLFxuICB1cGRhdGVBdXRvSGVpZ2h0LFxuICB1cGRhdGVTbGlkZXNPZmZzZXQsXG4gIHVwZGF0ZVNsaWRlc1Byb2dyZXNzLFxuICB1cGRhdGVQcm9ncmVzcyxcbiAgdXBkYXRlU2xpZGVzQ2xhc3NlcyxcbiAgdXBkYXRlQWN0aXZlSW5kZXgsXG4gIHVwZGF0ZUNsaWNrZWRTbGlkZVxufTtcblxuZnVuY3Rpb24gZ2V0U3dpcGVyVHJhbnNsYXRlKGF4aXMpIHtcbiAgaWYgKGF4aXMgPT09IHZvaWQgMCkge1xuICAgIGF4aXMgPSB0aGlzLmlzSG9yaXpvbnRhbCgpID8gJ3gnIDogJ3knO1xuICB9XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgcnRsVHJhbnNsYXRlOiBydGwsXG4gICAgdHJhbnNsYXRlLFxuICAgIHdyYXBwZXJFbFxuICB9ID0gc3dpcGVyO1xuICBpZiAocGFyYW1zLnZpcnR1YWxUcmFuc2xhdGUpIHtcbiAgICByZXR1cm4gcnRsID8gLXRyYW5zbGF0ZSA6IHRyYW5zbGF0ZTtcbiAgfVxuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICByZXR1cm4gdHJhbnNsYXRlO1xuICB9XG4gIGxldCBjdXJyZW50VHJhbnNsYXRlID0gZ2V0VHJhbnNsYXRlKHdyYXBwZXJFbCwgYXhpcyk7XG4gIGN1cnJlbnRUcmFuc2xhdGUgKz0gc3dpcGVyLmNzc092ZXJmbG93QWRqdXN0bWVudCgpO1xuICBpZiAocnRsKSBjdXJyZW50VHJhbnNsYXRlID0gLWN1cnJlbnRUcmFuc2xhdGU7XG4gIHJldHVybiBjdXJyZW50VHJhbnNsYXRlIHx8IDA7XG59XG5cbmZ1bmN0aW9uIHNldFRyYW5zbGF0ZSh0cmFuc2xhdGUsIGJ5Q29udHJvbGxlcikge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcnRsVHJhbnNsYXRlOiBydGwsXG4gICAgcGFyYW1zLFxuICAgIHdyYXBwZXJFbCxcbiAgICBwcm9ncmVzc1xuICB9ID0gc3dpcGVyO1xuICBsZXQgeCA9IDA7XG4gIGxldCB5ID0gMDtcbiAgY29uc3QgeiA9IDA7XG4gIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICB4ID0gcnRsID8gLXRyYW5zbGF0ZSA6IHRyYW5zbGF0ZTtcbiAgfSBlbHNlIHtcbiAgICB5ID0gdHJhbnNsYXRlO1xuICB9XG4gIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSB7XG4gICAgeCA9IE1hdGguZmxvb3IoeCk7XG4gICAgeSA9IE1hdGguZmxvb3IoeSk7XG4gIH1cbiAgc3dpcGVyLnByZXZpb3VzVHJhbnNsYXRlID0gc3dpcGVyLnRyYW5zbGF0ZTtcbiAgc3dpcGVyLnRyYW5zbGF0ZSA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHggOiB5O1xuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICB3cmFwcGVyRWxbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ3Njcm9sbExlZnQnIDogJ3Njcm9sbFRvcCddID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gLXggOiAteTtcbiAgfSBlbHNlIGlmICghcGFyYW1zLnZpcnR1YWxUcmFuc2xhdGUpIHtcbiAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICB4IC09IHN3aXBlci5jc3NPdmVyZmxvd0FkanVzdG1lbnQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgeSAtPSBzd2lwZXIuY3NzT3ZlcmZsb3dBZGp1c3RtZW50KCk7XG4gICAgfVxuICAgIHdyYXBwZXJFbC5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlM2QoJHt4fXB4LCAke3l9cHgsICR7en1weClgO1xuICB9XG5cbiAgLy8gQ2hlY2sgaWYgd2UgbmVlZCB0byB1cGRhdGUgcHJvZ3Jlc3NcbiAgbGV0IG5ld1Byb2dyZXNzO1xuICBjb25zdCB0cmFuc2xhdGVzRGlmZiA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKTtcbiAgaWYgKHRyYW5zbGF0ZXNEaWZmID09PSAwKSB7XG4gICAgbmV3UHJvZ3Jlc3MgPSAwO1xuICB9IGVsc2Uge1xuICAgIG5ld1Byb2dyZXNzID0gKHRyYW5zbGF0ZSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKSkgLyB0cmFuc2xhdGVzRGlmZjtcbiAgfVxuICBpZiAobmV3UHJvZ3Jlc3MgIT09IHByb2dyZXNzKSB7XG4gICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKHRyYW5zbGF0ZSk7XG4gIH1cbiAgc3dpcGVyLmVtaXQoJ3NldFRyYW5zbGF0ZScsIHN3aXBlci50cmFuc2xhdGUsIGJ5Q29udHJvbGxlcik7XG59XG5cbmZ1bmN0aW9uIG1pblRyYW5zbGF0ZSgpIHtcbiAgcmV0dXJuIC10aGlzLnNuYXBHcmlkWzBdO1xufVxuXG5mdW5jdGlvbiBtYXhUcmFuc2xhdGUoKSB7XG4gIHJldHVybiAtdGhpcy5zbmFwR3JpZFt0aGlzLnNuYXBHcmlkLmxlbmd0aCAtIDFdO1xufVxuXG5mdW5jdGlvbiB0cmFuc2xhdGVUbyh0cmFuc2xhdGUsIHNwZWVkLCBydW5DYWxsYmFja3MsIHRyYW5zbGF0ZUJvdW5kcywgaW50ZXJuYWwpIHtcbiAgaWYgKHRyYW5zbGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgdHJhbnNsYXRlID0gMDtcbiAgfVxuICBpZiAoc3BlZWQgPT09IHZvaWQgMCkge1xuICAgIHNwZWVkID0gdGhpcy5wYXJhbXMuc3BlZWQ7XG4gIH1cbiAgaWYgKHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwKSB7XG4gICAgcnVuQ2FsbGJhY2tzID0gdHJ1ZTtcbiAgfVxuICBpZiAodHJhbnNsYXRlQm91bmRzID09PSB2b2lkIDApIHtcbiAgICB0cmFuc2xhdGVCb3VuZHMgPSB0cnVlO1xuICB9XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgd3JhcHBlckVsXG4gIH0gPSBzd2lwZXI7XG4gIGlmIChzd2lwZXIuYW5pbWF0aW5nICYmIHBhcmFtcy5wcmV2ZW50SW50ZXJhY3Rpb25PblRyYW5zaXRpb24pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgY29uc3QgbWluVHJhbnNsYXRlID0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpO1xuICBjb25zdCBtYXhUcmFuc2xhdGUgPSBzd2lwZXIubWF4VHJhbnNsYXRlKCk7XG4gIGxldCBuZXdUcmFuc2xhdGU7XG4gIGlmICh0cmFuc2xhdGVCb3VuZHMgJiYgdHJhbnNsYXRlID4gbWluVHJhbnNsYXRlKSBuZXdUcmFuc2xhdGUgPSBtaW5UcmFuc2xhdGU7ZWxzZSBpZiAodHJhbnNsYXRlQm91bmRzICYmIHRyYW5zbGF0ZSA8IG1heFRyYW5zbGF0ZSkgbmV3VHJhbnNsYXRlID0gbWF4VHJhbnNsYXRlO2Vsc2UgbmV3VHJhbnNsYXRlID0gdHJhbnNsYXRlO1xuXG4gIC8vIFVwZGF0ZSBwcm9ncmVzc1xuICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MobmV3VHJhbnNsYXRlKTtcbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgY29uc3QgaXNIID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpO1xuICAgIGlmIChzcGVlZCA9PT0gMCkge1xuICAgICAgd3JhcHBlckVsW2lzSCA/ICdzY3JvbGxMZWZ0JyA6ICdzY3JvbGxUb3AnXSA9IC1uZXdUcmFuc2xhdGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghc3dpcGVyLnN1cHBvcnQuc21vb3RoU2Nyb2xsKSB7XG4gICAgICAgIGFuaW1hdGVDU1NNb2RlU2Nyb2xsKHtcbiAgICAgICAgICBzd2lwZXIsXG4gICAgICAgICAgdGFyZ2V0UG9zaXRpb246IC1uZXdUcmFuc2xhdGUsXG4gICAgICAgICAgc2lkZTogaXNIID8gJ2xlZnQnIDogJ3RvcCdcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgd3JhcHBlckVsLnNjcm9sbFRvKHtcbiAgICAgICAgW2lzSCA/ICdsZWZ0JyA6ICd0b3AnXTogLW5ld1RyYW5zbGF0ZSxcbiAgICAgICAgYmVoYXZpb3I6ICdzbW9vdGgnXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKHNwZWVkID09PSAwKSB7XG4gICAgc3dpcGVyLnNldFRyYW5zaXRpb24oMCk7XG4gICAgc3dpcGVyLnNldFRyYW5zbGF0ZShuZXdUcmFuc2xhdGUpO1xuICAgIGlmIChydW5DYWxsYmFja3MpIHtcbiAgICAgIHN3aXBlci5lbWl0KCdiZWZvcmVUcmFuc2l0aW9uU3RhcnQnLCBzcGVlZCwgaW50ZXJuYWwpO1xuICAgICAgc3dpcGVyLmVtaXQoJ3RyYW5zaXRpb25FbmQnKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyLnNldFRyYW5zaXRpb24oc3BlZWQpO1xuICAgIHN3aXBlci5zZXRUcmFuc2xhdGUobmV3VHJhbnNsYXRlKTtcbiAgICBpZiAocnVuQ2FsbGJhY2tzKSB7XG4gICAgICBzd2lwZXIuZW1pdCgnYmVmb3JlVHJhbnNpdGlvblN0YXJ0Jywgc3BlZWQsIGludGVybmFsKTtcbiAgICAgIHN3aXBlci5lbWl0KCd0cmFuc2l0aW9uU3RhcnQnKTtcbiAgICB9XG4gICAgaWYgKCFzd2lwZXIuYW5pbWF0aW5nKSB7XG4gICAgICBzd2lwZXIuYW5pbWF0aW5nID0gdHJ1ZTtcbiAgICAgIGlmICghc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCkge1xuICAgICAgICBzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kID0gZnVuY3Rpb24gdHJhbnNpdGlvbkVuZChlKSB7XG4gICAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgICAgICAgIGlmIChlLnRhcmdldCAhPT0gdGhpcykgcmV0dXJuO1xuICAgICAgICAgIHN3aXBlci53cmFwcGVyRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIHN3aXBlci5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpO1xuICAgICAgICAgIHN3aXBlci5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQgPSBudWxsO1xuICAgICAgICAgIGRlbGV0ZSBzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kO1xuICAgICAgICAgIHN3aXBlci5hbmltYXRpbmcgPSBmYWxzZTtcbiAgICAgICAgICBpZiAocnVuQ2FsbGJhY2tzKSB7XG4gICAgICAgICAgICBzd2lwZXIuZW1pdCgndHJhbnNpdGlvbkVuZCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHN3aXBlci53cmFwcGVyRWwuYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIHN3aXBlci5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxudmFyIHRyYW5zbGF0ZSA9IHtcbiAgZ2V0VHJhbnNsYXRlOiBnZXRTd2lwZXJUcmFuc2xhdGUsXG4gIHNldFRyYW5zbGF0ZSxcbiAgbWluVHJhbnNsYXRlLFxuICBtYXhUcmFuc2xhdGUsXG4gIHRyYW5zbGF0ZVRvXG59O1xuXG5mdW5jdGlvbiBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uLCBieUNvbnRyb2xsZXIpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgaWYgKCFzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICBzd2lwZXIud3JhcHBlckVsLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IGAke2R1cmF0aW9ufW1zYDtcbiAgICBzd2lwZXIud3JhcHBlckVsLnN0eWxlLnRyYW5zaXRpb25EZWxheSA9IGR1cmF0aW9uID09PSAwID8gYDBtc2AgOiAnJztcbiAgfVxuICBzd2lwZXIuZW1pdCgnc2V0VHJhbnNpdGlvbicsIGR1cmF0aW9uLCBieUNvbnRyb2xsZXIpO1xufVxuXG5mdW5jdGlvbiB0cmFuc2l0aW9uRW1pdChfcmVmKSB7XG4gIGxldCB7XG4gICAgc3dpcGVyLFxuICAgIHJ1bkNhbGxiYWNrcyxcbiAgICBkaXJlY3Rpb24sXG4gICAgc3RlcFxuICB9ID0gX3JlZjtcbiAgY29uc3Qge1xuICAgIGFjdGl2ZUluZGV4LFxuICAgIHByZXZpb3VzSW5kZXhcbiAgfSA9IHN3aXBlcjtcbiAgbGV0IGRpciA9IGRpcmVjdGlvbjtcbiAgaWYgKCFkaXIpIHtcbiAgICBpZiAoYWN0aXZlSW5kZXggPiBwcmV2aW91c0luZGV4KSBkaXIgPSAnbmV4dCc7ZWxzZSBpZiAoYWN0aXZlSW5kZXggPCBwcmV2aW91c0luZGV4KSBkaXIgPSAncHJldic7ZWxzZSBkaXIgPSAncmVzZXQnO1xuICB9XG4gIHN3aXBlci5lbWl0KGB0cmFuc2l0aW9uJHtzdGVwfWApO1xuICBpZiAocnVuQ2FsbGJhY2tzICYmIGFjdGl2ZUluZGV4ICE9PSBwcmV2aW91c0luZGV4KSB7XG4gICAgaWYgKGRpciA9PT0gJ3Jlc2V0Jykge1xuICAgICAgc3dpcGVyLmVtaXQoYHNsaWRlUmVzZXRUcmFuc2l0aW9uJHtzdGVwfWApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzd2lwZXIuZW1pdChgc2xpZGVDaGFuZ2VUcmFuc2l0aW9uJHtzdGVwfWApO1xuICAgIGlmIChkaXIgPT09ICduZXh0Jykge1xuICAgICAgc3dpcGVyLmVtaXQoYHNsaWRlTmV4dFRyYW5zaXRpb24ke3N0ZXB9YCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5lbWl0KGBzbGlkZVByZXZUcmFuc2l0aW9uJHtzdGVwfWApO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiB0cmFuc2l0aW9uU3RhcnQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pIHtcbiAgaWYgKHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwKSB7XG4gICAgcnVuQ2FsbGJhY2tzID0gdHJ1ZTtcbiAgfVxuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcGFyYW1zXG4gIH0gPSBzd2lwZXI7XG4gIGlmIChwYXJhbXMuY3NzTW9kZSkgcmV0dXJuO1xuICBpZiAocGFyYW1zLmF1dG9IZWlnaHQpIHtcbiAgICBzd2lwZXIudXBkYXRlQXV0b0hlaWdodCgpO1xuICB9XG4gIHRyYW5zaXRpb25FbWl0KHtcbiAgICBzd2lwZXIsXG4gICAgcnVuQ2FsbGJhY2tzLFxuICAgIGRpcmVjdGlvbixcbiAgICBzdGVwOiAnU3RhcnQnXG4gIH0pO1xufVxuXG5mdW5jdGlvbiB0cmFuc2l0aW9uRW5kKHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKSB7XG4gIGlmIChydW5DYWxsYmFja3MgPT09IHZvaWQgMCkge1xuICAgIHJ1bkNhbGxiYWNrcyA9IHRydWU7XG4gIH1cbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHBhcmFtc1xuICB9ID0gc3dpcGVyO1xuICBzd2lwZXIuYW5pbWF0aW5nID0gZmFsc2U7XG4gIGlmIChwYXJhbXMuY3NzTW9kZSkgcmV0dXJuO1xuICBzd2lwZXIuc2V0VHJhbnNpdGlvbigwKTtcbiAgdHJhbnNpdGlvbkVtaXQoe1xuICAgIHN3aXBlcixcbiAgICBydW5DYWxsYmFja3MsXG4gICAgZGlyZWN0aW9uLFxuICAgIHN0ZXA6ICdFbmQnXG4gIH0pO1xufVxuXG52YXIgdHJhbnNpdGlvbiA9IHtcbiAgc2V0VHJhbnNpdGlvbixcbiAgdHJhbnNpdGlvblN0YXJ0LFxuICB0cmFuc2l0aW9uRW5kXG59O1xuXG5mdW5jdGlvbiBzbGlkZVRvKGluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCwgaW5pdGlhbCkge1xuICBpZiAoaW5kZXggPT09IHZvaWQgMCkge1xuICAgIGluZGV4ID0gMDtcbiAgfVxuICBpZiAocnVuQ2FsbGJhY2tzID09PSB2b2lkIDApIHtcbiAgICBydW5DYWxsYmFja3MgPSB0cnVlO1xuICB9XG4gIGlmICh0eXBlb2YgaW5kZXggPT09ICdzdHJpbmcnKSB7XG4gICAgaW5kZXggPSBwYXJzZUludChpbmRleCwgMTApO1xuICB9XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGxldCBzbGlkZUluZGV4ID0gaW5kZXg7XG4gIGlmIChzbGlkZUluZGV4IDwgMCkgc2xpZGVJbmRleCA9IDA7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgc25hcEdyaWQsXG4gICAgc2xpZGVzR3JpZCxcbiAgICBwcmV2aW91c0luZGV4LFxuICAgIGFjdGl2ZUluZGV4LFxuICAgIHJ0bFRyYW5zbGF0ZTogcnRsLFxuICAgIHdyYXBwZXJFbCxcbiAgICBlbmFibGVkXG4gIH0gPSBzd2lwZXI7XG4gIGlmICghZW5hYmxlZCAmJiAhaW50ZXJuYWwgJiYgIWluaXRpYWwgfHwgc3dpcGVyLmRlc3Ryb3llZCB8fCBzd2lwZXIuYW5pbWF0aW5nICYmIHBhcmFtcy5wcmV2ZW50SW50ZXJhY3Rpb25PblRyYW5zaXRpb24pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKHR5cGVvZiBzcGVlZCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBzcGVlZCA9IHN3aXBlci5wYXJhbXMuc3BlZWQ7XG4gIH1cbiAgY29uc3Qgc2tpcCA9IE1hdGgubWluKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwLCBzbGlkZUluZGV4KTtcbiAgbGV0IHNuYXBJbmRleCA9IHNraXAgKyBNYXRoLmZsb29yKChzbGlkZUluZGV4IC0gc2tpcCkgLyBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwKTtcbiAgaWYgKHNuYXBJbmRleCA+PSBzbmFwR3JpZC5sZW5ndGgpIHNuYXBJbmRleCA9IHNuYXBHcmlkLmxlbmd0aCAtIDE7XG4gIGNvbnN0IHRyYW5zbGF0ZSA9IC1zbmFwR3JpZFtzbmFwSW5kZXhdO1xuICAvLyBOb3JtYWxpemUgc2xpZGVJbmRleFxuICBpZiAocGFyYW1zLm5vcm1hbGl6ZVNsaWRlSW5kZXgpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlc0dyaWQubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGNvbnN0IG5vcm1hbGl6ZWRUcmFuc2xhdGUgPSAtTWF0aC5mbG9vcih0cmFuc2xhdGUgKiAxMDApO1xuICAgICAgY29uc3Qgbm9ybWFsaXplZEdyaWQgPSBNYXRoLmZsb29yKHNsaWRlc0dyaWRbaV0gKiAxMDApO1xuICAgICAgY29uc3Qgbm9ybWFsaXplZEdyaWROZXh0ID0gTWF0aC5mbG9vcihzbGlkZXNHcmlkW2kgKyAxXSAqIDEwMCk7XG4gICAgICBpZiAodHlwZW9mIHNsaWRlc0dyaWRbaSArIDFdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBpZiAobm9ybWFsaXplZFRyYW5zbGF0ZSA+PSBub3JtYWxpemVkR3JpZCAmJiBub3JtYWxpemVkVHJhbnNsYXRlIDwgbm9ybWFsaXplZEdyaWROZXh0IC0gKG5vcm1hbGl6ZWRHcmlkTmV4dCAtIG5vcm1hbGl6ZWRHcmlkKSAvIDIpIHtcbiAgICAgICAgICBzbGlkZUluZGV4ID0gaTtcbiAgICAgICAgfSBlbHNlIGlmIChub3JtYWxpemVkVHJhbnNsYXRlID49IG5vcm1hbGl6ZWRHcmlkICYmIG5vcm1hbGl6ZWRUcmFuc2xhdGUgPCBub3JtYWxpemVkR3JpZE5leHQpIHtcbiAgICAgICAgICBzbGlkZUluZGV4ID0gaSArIDE7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAobm9ybWFsaXplZFRyYW5zbGF0ZSA+PSBub3JtYWxpemVkR3JpZCkge1xuICAgICAgICBzbGlkZUluZGV4ID0gaTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLy8gRGlyZWN0aW9ucyBsb2Nrc1xuICBpZiAoc3dpcGVyLmluaXRpYWxpemVkICYmIHNsaWRlSW5kZXggIT09IGFjdGl2ZUluZGV4KSB7XG4gICAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZU5leHQgJiYgKHJ0bCA/IHRyYW5zbGF0ZSA+IHN3aXBlci50cmFuc2xhdGUgJiYgdHJhbnNsYXRlID4gc3dpcGVyLm1pblRyYW5zbGF0ZSgpIDogdHJhbnNsYXRlIDwgc3dpcGVyLnRyYW5zbGF0ZSAmJiB0cmFuc2xhdGUgPCBzd2lwZXIubWluVHJhbnNsYXRlKCkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICghc3dpcGVyLmFsbG93U2xpZGVQcmV2ICYmIHRyYW5zbGF0ZSA+IHN3aXBlci50cmFuc2xhdGUgJiYgdHJhbnNsYXRlID4gc3dpcGVyLm1heFRyYW5zbGF0ZSgpKSB7XG4gICAgICBpZiAoKGFjdGl2ZUluZGV4IHx8IDApICE9PSBzbGlkZUluZGV4KSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKHNsaWRlSW5kZXggIT09IChwcmV2aW91c0luZGV4IHx8IDApICYmIHJ1bkNhbGxiYWNrcykge1xuICAgIHN3aXBlci5lbWl0KCdiZWZvcmVTbGlkZUNoYW5nZVN0YXJ0Jyk7XG4gIH1cblxuICAvLyBVcGRhdGUgcHJvZ3Jlc3NcbiAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKHRyYW5zbGF0ZSk7XG4gIGxldCBkaXJlY3Rpb247XG4gIGlmIChzbGlkZUluZGV4ID4gYWN0aXZlSW5kZXgpIGRpcmVjdGlvbiA9ICduZXh0JztlbHNlIGlmIChzbGlkZUluZGV4IDwgYWN0aXZlSW5kZXgpIGRpcmVjdGlvbiA9ICdwcmV2JztlbHNlIGRpcmVjdGlvbiA9ICdyZXNldCc7XG5cbiAgLy8gVXBkYXRlIEluZGV4XG4gIGlmIChydGwgJiYgLXRyYW5zbGF0ZSA9PT0gc3dpcGVyLnRyYW5zbGF0ZSB8fCAhcnRsICYmIHRyYW5zbGF0ZSA9PT0gc3dpcGVyLnRyYW5zbGF0ZSkge1xuICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleChzbGlkZUluZGV4KTtcbiAgICAvLyBVcGRhdGUgSGVpZ2h0XG4gICAgaWYgKHBhcmFtcy5hdXRvSGVpZ2h0KSB7XG4gICAgICBzd2lwZXIudXBkYXRlQXV0b0hlaWdodCgpO1xuICAgIH1cbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgIGlmIChwYXJhbXMuZWZmZWN0ICE9PSAnc2xpZGUnKSB7XG4gICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKHRyYW5zbGF0ZSk7XG4gICAgfVxuICAgIGlmIChkaXJlY3Rpb24gIT09ICdyZXNldCcpIHtcbiAgICAgIHN3aXBlci50cmFuc2l0aW9uU3RhcnQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pO1xuICAgICAgc3dpcGVyLnRyYW5zaXRpb25FbmQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgY29uc3QgaXNIID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpO1xuICAgIGNvbnN0IHQgPSBydGwgPyB0cmFuc2xhdGUgOiAtdHJhbnNsYXRlO1xuICAgIGlmIChzcGVlZCA9PT0gMCkge1xuICAgICAgY29uc3QgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG4gICAgICBpZiAoaXNWaXJ0dWFsKSB7XG4gICAgICAgIHN3aXBlci53cmFwcGVyRWwuc3R5bGUuc2Nyb2xsU25hcFR5cGUgPSAnbm9uZSc7XG4gICAgICAgIHN3aXBlci5faW1tZWRpYXRlVmlydHVhbCA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoaXNWaXJ0dWFsICYmICFzd2lwZXIuX2Nzc01vZGVWaXJ0dWFsSW5pdGlhbFNldCAmJiBzd2lwZXIucGFyYW1zLmluaXRpYWxTbGlkZSA+IDApIHtcbiAgICAgICAgc3dpcGVyLl9jc3NNb2RlVmlydHVhbEluaXRpYWxTZXQgPSB0cnVlO1xuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgIHdyYXBwZXJFbFtpc0ggPyAnc2Nyb2xsTGVmdCcgOiAnc2Nyb2xsVG9wJ10gPSB0O1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdyYXBwZXJFbFtpc0ggPyAnc2Nyb2xsTGVmdCcgOiAnc2Nyb2xsVG9wJ10gPSB0O1xuICAgICAgfVxuICAgICAgaWYgKGlzVmlydHVhbCkge1xuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgIHN3aXBlci53cmFwcGVyRWwuc3R5bGUuc2Nyb2xsU25hcFR5cGUgPSAnJztcbiAgICAgICAgICBzd2lwZXIuX2ltbWVkaWF0ZVZpcnR1YWwgPSBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghc3dpcGVyLnN1cHBvcnQuc21vb3RoU2Nyb2xsKSB7XG4gICAgICAgIGFuaW1hdGVDU1NNb2RlU2Nyb2xsKHtcbiAgICAgICAgICBzd2lwZXIsXG4gICAgICAgICAgdGFyZ2V0UG9zaXRpb246IHQsXG4gICAgICAgICAgc2lkZTogaXNIID8gJ2xlZnQnIDogJ3RvcCdcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgd3JhcHBlckVsLnNjcm9sbFRvKHtcbiAgICAgICAgW2lzSCA/ICdsZWZ0JyA6ICd0b3AnXTogdCxcbiAgICAgICAgYmVoYXZpb3I6ICdzbW9vdGgnXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgc3dpcGVyLnNldFRyYW5zaXRpb24oc3BlZWQpO1xuICBzd2lwZXIuc2V0VHJhbnNsYXRlKHRyYW5zbGF0ZSk7XG4gIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleChzbGlkZUluZGV4KTtcbiAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgc3dpcGVyLmVtaXQoJ2JlZm9yZVRyYW5zaXRpb25TdGFydCcsIHNwZWVkLCBpbnRlcm5hbCk7XG4gIHN3aXBlci50cmFuc2l0aW9uU3RhcnQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pO1xuICBpZiAoc3BlZWQgPT09IDApIHtcbiAgICBzd2lwZXIudHJhbnNpdGlvbkVuZChydW5DYWxsYmFja3MsIGRpcmVjdGlvbik7XG4gIH0gZWxzZSBpZiAoIXN3aXBlci5hbmltYXRpbmcpIHtcbiAgICBzd2lwZXIuYW5pbWF0aW5nID0gdHJ1ZTtcbiAgICBpZiAoIXN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCkge1xuICAgICAgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kID0gZnVuY3Rpb24gdHJhbnNpdGlvbkVuZChlKSB7XG4gICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICAgICAgaWYgKGUudGFyZ2V0ICE9PSB0aGlzKSByZXR1cm47XG4gICAgICAgIHN3aXBlci53cmFwcGVyRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIHN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCk7XG4gICAgICAgIHN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCA9IG51bGw7XG4gICAgICAgIGRlbGV0ZSBzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQ7XG4gICAgICAgIHN3aXBlci50cmFuc2l0aW9uRW5kKHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKTtcbiAgICAgIH07XG4gICAgfVxuICAgIHN3aXBlci53cmFwcGVyRWwuYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIHN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCk7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHNsaWRlVG9Mb29wKGluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCkge1xuICBpZiAoaW5kZXggPT09IHZvaWQgMCkge1xuICAgIGluZGV4ID0gMDtcbiAgfVxuICBpZiAocnVuQ2FsbGJhY2tzID09PSB2b2lkIDApIHtcbiAgICBydW5DYWxsYmFja3MgPSB0cnVlO1xuICB9XG4gIGlmICh0eXBlb2YgaW5kZXggPT09ICdzdHJpbmcnKSB7XG4gICAgY29uc3QgaW5kZXhBc051bWJlciA9IHBhcnNlSW50KGluZGV4LCAxMCk7XG4gICAgaW5kZXggPSBpbmRleEFzTnVtYmVyO1xuICB9XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGlmIChzd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XG4gIGlmICh0eXBlb2Ygc3BlZWQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgc3BlZWQgPSBzd2lwZXIucGFyYW1zLnNwZWVkO1xuICB9XG4gIGNvbnN0IGdyaWRFbmFibGVkID0gc3dpcGVyLmdyaWQgJiYgc3dpcGVyLnBhcmFtcy5ncmlkICYmIHN3aXBlci5wYXJhbXMuZ3JpZC5yb3dzID4gMTtcbiAgbGV0IG5ld0luZGV4ID0gaW5kZXg7XG4gIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICBpZiAoc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgbmV3SW5kZXggPSBuZXdJbmRleCArIHN3aXBlci52aXJ0dWFsLnNsaWRlc0JlZm9yZTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IHRhcmdldFNsaWRlSW5kZXg7XG4gICAgICBpZiAoZ3JpZEVuYWJsZWQpIHtcbiAgICAgICAgY29uc3Qgc2xpZGVJbmRleCA9IG5ld0luZGV4ICogc3dpcGVyLnBhcmFtcy5ncmlkLnJvd3M7XG4gICAgICAgIHRhcmdldFNsaWRlSW5kZXggPSBzd2lwZXIuc2xpZGVzLmZpbHRlcihzbGlkZUVsID0+IHNsaWRlRWwuZ2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpICogMSA9PT0gc2xpZGVJbmRleClbMF0uY29sdW1uO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGFyZ2V0U2xpZGVJbmRleCA9IHN3aXBlci5nZXRTbGlkZUluZGV4QnlEYXRhKG5ld0luZGV4KTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGNvbHMgPSBncmlkRW5hYmxlZCA/IE1hdGguY2VpbChzd2lwZXIuc2xpZGVzLmxlbmd0aCAvIHN3aXBlci5wYXJhbXMuZ3JpZC5yb3dzKSA6IHN3aXBlci5zbGlkZXMubGVuZ3RoO1xuICAgICAgY29uc3Qge1xuICAgICAgICBjZW50ZXJlZFNsaWRlc1xuICAgICAgfSA9IHN3aXBlci5wYXJhbXM7XG4gICAgICBsZXQgc2xpZGVzUGVyVmlldyA9IHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldztcbiAgICAgIGlmIChzbGlkZXNQZXJWaWV3ID09PSAnYXV0bycpIHtcbiAgICAgICAgc2xpZGVzUGVyVmlldyA9IHN3aXBlci5zbGlkZXNQZXJWaWV3RHluYW1pYygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2xpZGVzUGVyVmlldyA9IE1hdGguY2VpbChwYXJzZUZsb2F0KHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldywgMTApKTtcbiAgICAgICAgaWYgKGNlbnRlcmVkU2xpZGVzICYmIHNsaWRlc1BlclZpZXcgJSAyID09PSAwKSB7XG4gICAgICAgICAgc2xpZGVzUGVyVmlldyA9IHNsaWRlc1BlclZpZXcgKyAxO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsZXQgbmVlZExvb3BGaXggPSBjb2xzIC0gdGFyZ2V0U2xpZGVJbmRleCA8IHNsaWRlc1BlclZpZXc7XG4gICAgICBpZiAoY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgICAgbmVlZExvb3BGaXggPSBuZWVkTG9vcEZpeCB8fCB0YXJnZXRTbGlkZUluZGV4IDwgTWF0aC5jZWlsKHNsaWRlc1BlclZpZXcgLyAyKTtcbiAgICAgIH1cbiAgICAgIGlmIChpbnRlcm5hbCAmJiBjZW50ZXJlZFNsaWRlcyAmJiBzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcgIT09ICdhdXRvJyAmJiAhZ3JpZEVuYWJsZWQpIHtcbiAgICAgICAgbmVlZExvb3BGaXggPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChuZWVkTG9vcEZpeCkge1xuICAgICAgICBjb25zdCBkaXJlY3Rpb24gPSBjZW50ZXJlZFNsaWRlcyA/IHRhcmdldFNsaWRlSW5kZXggPCBzd2lwZXIuYWN0aXZlSW5kZXggPyAncHJldicgOiAnbmV4dCcgOiB0YXJnZXRTbGlkZUluZGV4IC0gc3dpcGVyLmFjdGl2ZUluZGV4IC0gMSA8IHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyA/ICduZXh0JyA6ICdwcmV2JztcbiAgICAgICAgc3dpcGVyLmxvb3BGaXgoe1xuICAgICAgICAgIGRpcmVjdGlvbixcbiAgICAgICAgICBzbGlkZVRvOiB0cnVlLFxuICAgICAgICAgIGFjdGl2ZVNsaWRlSW5kZXg6IGRpcmVjdGlvbiA9PT0gJ25leHQnID8gdGFyZ2V0U2xpZGVJbmRleCArIDEgOiB0YXJnZXRTbGlkZUluZGV4IC0gY29scyArIDEsXG4gICAgICAgICAgc2xpZGVSZWFsSW5kZXg6IGRpcmVjdGlvbiA9PT0gJ25leHQnID8gc3dpcGVyLnJlYWxJbmRleCA6IHVuZGVmaW5lZFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChncmlkRW5hYmxlZCkge1xuICAgICAgICBjb25zdCBzbGlkZUluZGV4ID0gbmV3SW5kZXggKiBzd2lwZXIucGFyYW1zLmdyaWQucm93cztcbiAgICAgICAgbmV3SW5kZXggPSBzd2lwZXIuc2xpZGVzLmZpbHRlcihzbGlkZUVsID0+IHNsaWRlRWwuZ2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpICogMSA9PT0gc2xpZGVJbmRleClbMF0uY29sdW1uO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV3SW5kZXggPSBzd2lwZXIuZ2V0U2xpZGVJbmRleEJ5RGF0YShuZXdJbmRleCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgc3dpcGVyLnNsaWRlVG8obmV3SW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbiAgfSk7XG4gIHJldHVybiBzd2lwZXI7XG59XG5cbi8qIGVzbGludCBuby11bnVzZWQtdmFyczogXCJvZmZcIiAqL1xuZnVuY3Rpb24gc2xpZGVOZXh0KHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKSB7XG4gIGlmIChydW5DYWxsYmFja3MgPT09IHZvaWQgMCkge1xuICAgIHJ1bkNhbGxiYWNrcyA9IHRydWU7XG4gIH1cbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIGVuYWJsZWQsXG4gICAgcGFyYW1zLFxuICAgIGFuaW1hdGluZ1xuICB9ID0gc3dpcGVyO1xuICBpZiAoIWVuYWJsZWQgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuIHN3aXBlcjtcbiAgaWYgKHR5cGVvZiBzcGVlZCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBzcGVlZCA9IHN3aXBlci5wYXJhbXMuc3BlZWQ7XG4gIH1cbiAgbGV0IHBlckdyb3VwID0gcGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuICBpZiAocGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyAmJiBwYXJhbXMuc2xpZGVzUGVyR3JvdXAgPT09IDEgJiYgcGFyYW1zLnNsaWRlc1Blckdyb3VwQXV0bykge1xuICAgIHBlckdyb3VwID0gTWF0aC5tYXgoc3dpcGVyLnNsaWRlc1BlclZpZXdEeW5hbWljKCdjdXJyZW50JywgdHJ1ZSksIDEpO1xuICB9XG4gIGNvbnN0IGluY3JlbWVudCA9IHN3aXBlci5hY3RpdmVJbmRleCA8IHBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAgPyAxIDogcGVyR3JvdXA7XG4gIGNvbnN0IGlzVmlydHVhbCA9IHN3aXBlci52aXJ0dWFsICYmIHBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIGlmIChhbmltYXRpbmcgJiYgIWlzVmlydHVhbCAmJiBwYXJhbXMubG9vcFByZXZlbnRzU2xpZGluZykgcmV0dXJuIGZhbHNlO1xuICAgIHN3aXBlci5sb29wRml4KHtcbiAgICAgIGRpcmVjdGlvbjogJ25leHQnXG4gICAgfSk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgc3dpcGVyLl9jbGllbnRMZWZ0ID0gc3dpcGVyLndyYXBwZXJFbC5jbGllbnRMZWZ0O1xuICAgIGlmIChzd2lwZXIuYWN0aXZlSW5kZXggPT09IHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gMSAmJiBwYXJhbXMuY3NzTW9kZSkge1xuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4ICsgaW5jcmVtZW50LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICBpZiAocGFyYW1zLnJld2luZCAmJiBzd2lwZXIuaXNFbmQpIHtcbiAgICByZXR1cm4gc3dpcGVyLnNsaWRlVG8oMCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xuICB9XG4gIHJldHVybiBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXggKyBpbmNyZW1lbnQsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbn1cblxuLyogZXNsaW50IG5vLXVudXNlZC12YXJzOiBcIm9mZlwiICovXG5mdW5jdGlvbiBzbGlkZVByZXYoc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpIHtcbiAgaWYgKHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwKSB7XG4gICAgcnVuQ2FsbGJhY2tzID0gdHJ1ZTtcbiAgfVxuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgIHNuYXBHcmlkLFxuICAgIHNsaWRlc0dyaWQsXG4gICAgcnRsVHJhbnNsYXRlLFxuICAgIGVuYWJsZWQsXG4gICAgYW5pbWF0aW5nXG4gIH0gPSBzd2lwZXI7XG4gIGlmICghZW5hYmxlZCB8fCBzd2lwZXIuZGVzdHJveWVkKSByZXR1cm4gc3dpcGVyO1xuICBpZiAodHlwZW9mIHNwZWVkID09PSAndW5kZWZpbmVkJykge1xuICAgIHNwZWVkID0gc3dpcGVyLnBhcmFtcy5zcGVlZDtcbiAgfVxuICBjb25zdCBpc1ZpcnR1YWwgPSBzd2lwZXIudmlydHVhbCAmJiBwYXJhbXMudmlydHVhbC5lbmFibGVkO1xuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBpZiAoYW5pbWF0aW5nICYmICFpc1ZpcnR1YWwgJiYgcGFyYW1zLmxvb3BQcmV2ZW50c1NsaWRpbmcpIHJldHVybiBmYWxzZTtcbiAgICBzd2lwZXIubG9vcEZpeCh7XG4gICAgICBkaXJlY3Rpb246ICdwcmV2J1xuICAgIH0pO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgIHN3aXBlci5fY2xpZW50TGVmdCA9IHN3aXBlci53cmFwcGVyRWwuY2xpZW50TGVmdDtcbiAgfVxuICBjb25zdCB0cmFuc2xhdGUgPSBydGxUcmFuc2xhdGUgPyBzd2lwZXIudHJhbnNsYXRlIDogLXN3aXBlci50cmFuc2xhdGU7XG4gIGZ1bmN0aW9uIG5vcm1hbGl6ZSh2YWwpIHtcbiAgICBpZiAodmFsIDwgMCkgcmV0dXJuIC1NYXRoLmZsb29yKE1hdGguYWJzKHZhbCkpO1xuICAgIHJldHVybiBNYXRoLmZsb29yKHZhbCk7XG4gIH1cbiAgY29uc3Qgbm9ybWFsaXplZFRyYW5zbGF0ZSA9IG5vcm1hbGl6ZSh0cmFuc2xhdGUpO1xuICBjb25zdCBub3JtYWxpemVkU25hcEdyaWQgPSBzbmFwR3JpZC5tYXAodmFsID0+IG5vcm1hbGl6ZSh2YWwpKTtcbiAgbGV0IHByZXZTbmFwID0gc25hcEdyaWRbbm9ybWFsaXplZFNuYXBHcmlkLmluZGV4T2Yobm9ybWFsaXplZFRyYW5zbGF0ZSkgLSAxXTtcbiAgaWYgKHR5cGVvZiBwcmV2U25hcCA9PT0gJ3VuZGVmaW5lZCcgJiYgcGFyYW1zLmNzc01vZGUpIHtcbiAgICBsZXQgcHJldlNuYXBJbmRleDtcbiAgICBzbmFwR3JpZC5mb3JFYWNoKChzbmFwLCBzbmFwSW5kZXgpID0+IHtcbiAgICAgIGlmIChub3JtYWxpemVkVHJhbnNsYXRlID49IHNuYXApIHtcbiAgICAgICAgLy8gcHJldlNuYXAgPSBzbmFwO1xuICAgICAgICBwcmV2U25hcEluZGV4ID0gc25hcEluZGV4O1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmICh0eXBlb2YgcHJldlNuYXBJbmRleCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHByZXZTbmFwID0gc25hcEdyaWRbcHJldlNuYXBJbmRleCA+IDAgPyBwcmV2U25hcEluZGV4IC0gMSA6IHByZXZTbmFwSW5kZXhdO1xuICAgIH1cbiAgfVxuICBsZXQgcHJldkluZGV4ID0gMDtcbiAgaWYgKHR5cGVvZiBwcmV2U25hcCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBwcmV2SW5kZXggPSBzbGlkZXNHcmlkLmluZGV4T2YocHJldlNuYXApO1xuICAgIGlmIChwcmV2SW5kZXggPCAwKSBwcmV2SW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXggLSAxO1xuICAgIGlmIChwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nICYmIHBhcmFtcy5zbGlkZXNQZXJHcm91cCA9PT0gMSAmJiBwYXJhbXMuc2xpZGVzUGVyR3JvdXBBdXRvKSB7XG4gICAgICBwcmV2SW5kZXggPSBwcmV2SW5kZXggLSBzd2lwZXIuc2xpZGVzUGVyVmlld0R5bmFtaWMoJ3ByZXZpb3VzJywgdHJ1ZSkgKyAxO1xuICAgICAgcHJldkluZGV4ID0gTWF0aC5tYXgocHJldkluZGV4LCAwKTtcbiAgICB9XG4gIH1cbiAgaWYgKHBhcmFtcy5yZXdpbmQgJiYgc3dpcGVyLmlzQmVnaW5uaW5nKSB7XG4gICAgY29uc3QgbGFzdEluZGV4ID0gc3dpcGVyLnBhcmFtcy52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkICYmIHN3aXBlci52aXJ0dWFsID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCAtIDEgOiBzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIDE7XG4gICAgcmV0dXJuIHN3aXBlci5zbGlkZVRvKGxhc3RJbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xuICB9IGVsc2UgaWYgKHBhcmFtcy5sb29wICYmIHN3aXBlci5hY3RpdmVJbmRleCA9PT0gMCAmJiBwYXJhbXMuY3NzTW9kZSkge1xuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhwcmV2SW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gc3dpcGVyLnNsaWRlVG8ocHJldkluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG59XG5cbi8qIGVzbGludCBuby11bnVzZWQtdmFyczogXCJvZmZcIiAqL1xuZnVuY3Rpb24gc2xpZGVSZXNldChzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCkge1xuICBpZiAocnVuQ2FsbGJhY2tzID09PSB2b2lkIDApIHtcbiAgICBydW5DYWxsYmFja3MgPSB0cnVlO1xuICB9XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGlmIChzd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XG4gIGlmICh0eXBlb2Ygc3BlZWQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgc3BlZWQgPSBzd2lwZXIucGFyYW1zLnNwZWVkO1xuICB9XG4gIHJldHVybiBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbn1cblxuLyogZXNsaW50IG5vLXVudXNlZC12YXJzOiBcIm9mZlwiICovXG5mdW5jdGlvbiBzbGlkZVRvQ2xvc2VzdChzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCwgdGhyZXNob2xkKSB7XG4gIGlmIChydW5DYWxsYmFja3MgPT09IHZvaWQgMCkge1xuICAgIHJ1bkNhbGxiYWNrcyA9IHRydWU7XG4gIH1cbiAgaWYgKHRocmVzaG9sZCA9PT0gdm9pZCAwKSB7XG4gICAgdGhyZXNob2xkID0gMC41O1xuICB9XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGlmIChzd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XG4gIGlmICh0eXBlb2Ygc3BlZWQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgc3BlZWQgPSBzd2lwZXIucGFyYW1zLnNwZWVkO1xuICB9XG4gIGxldCBpbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleDtcbiAgY29uc3Qgc2tpcCA9IE1hdGgubWluKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwLCBpbmRleCk7XG4gIGNvbnN0IHNuYXBJbmRleCA9IHNraXAgKyBNYXRoLmZsb29yKChpbmRleCAtIHNraXApIC8gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG4gIGNvbnN0IHRyYW5zbGF0ZSA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyBzd2lwZXIudHJhbnNsYXRlIDogLXN3aXBlci50cmFuc2xhdGU7XG4gIGlmICh0cmFuc2xhdGUgPj0gc3dpcGVyLnNuYXBHcmlkW3NuYXBJbmRleF0pIHtcbiAgICAvLyBUaGUgY3VycmVudCB0cmFuc2xhdGUgaXMgb24gb3IgYWZ0ZXIgdGhlIGN1cnJlbnQgc25hcCBpbmRleCwgc28gdGhlIGNob2ljZVxuICAgIC8vIGlzIGJldHdlZW4gdGhlIGN1cnJlbnQgaW5kZXggYW5kIHRoZSBvbmUgYWZ0ZXIgaXQuXG4gICAgY29uc3QgY3VycmVudFNuYXAgPSBzd2lwZXIuc25hcEdyaWRbc25hcEluZGV4XTtcbiAgICBjb25zdCBuZXh0U25hcCA9IHN3aXBlci5zbmFwR3JpZFtzbmFwSW5kZXggKyAxXTtcbiAgICBpZiAodHJhbnNsYXRlIC0gY3VycmVudFNuYXAgPiAobmV4dFNuYXAgLSBjdXJyZW50U25hcCkgKiB0aHJlc2hvbGQpIHtcbiAgICAgIGluZGV4ICs9IHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIFRoZSBjdXJyZW50IHRyYW5zbGF0ZSBpcyBiZWZvcmUgdGhlIGN1cnJlbnQgc25hcCBpbmRleCwgc28gdGhlIGNob2ljZVxuICAgIC8vIGlzIGJldHdlZW4gdGhlIGN1cnJlbnQgaW5kZXggYW5kIHRoZSBvbmUgYmVmb3JlIGl0LlxuICAgIGNvbnN0IHByZXZTbmFwID0gc3dpcGVyLnNuYXBHcmlkW3NuYXBJbmRleCAtIDFdO1xuICAgIGNvbnN0IGN1cnJlbnRTbmFwID0gc3dpcGVyLnNuYXBHcmlkW3NuYXBJbmRleF07XG4gICAgaWYgKHRyYW5zbGF0ZSAtIHByZXZTbmFwIDw9IChjdXJyZW50U25hcCAtIHByZXZTbmFwKSAqIHRocmVzaG9sZCkge1xuICAgICAgaW5kZXggLT0gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cDtcbiAgICB9XG4gIH1cbiAgaW5kZXggPSBNYXRoLm1heChpbmRleCwgMCk7XG4gIGluZGV4ID0gTWF0aC5taW4oaW5kZXgsIHN3aXBlci5zbGlkZXNHcmlkLmxlbmd0aCAtIDEpO1xuICByZXR1cm4gc3dpcGVyLnNsaWRlVG8oaW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbn1cblxuZnVuY3Rpb24gc2xpZGVUb0NsaWNrZWRTbGlkZSgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgaWYgKHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICBzbGlkZXNFbFxuICB9ID0gc3dpcGVyO1xuICBjb25zdCBzbGlkZXNQZXJWaWV3ID0gcGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyA/IHN3aXBlci5zbGlkZXNQZXJWaWV3RHluYW1pYygpIDogcGFyYW1zLnNsaWRlc1BlclZpZXc7XG4gIGxldCBzbGlkZVRvSW5kZXggPSBzd2lwZXIuY2xpY2tlZEluZGV4O1xuICBsZXQgcmVhbEluZGV4O1xuICBjb25zdCBzbGlkZVNlbGVjdG9yID0gc3dpcGVyLmlzRWxlbWVudCA/IGBzd2lwZXItc2xpZGVgIDogYC4ke3BhcmFtcy5zbGlkZUNsYXNzfWA7XG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIGlmIChzd2lwZXIuYW5pbWF0aW5nKSByZXR1cm47XG4gICAgcmVhbEluZGV4ID0gcGFyc2VJbnQoc3dpcGVyLmNsaWNrZWRTbGlkZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JyksIDEwKTtcbiAgICBpZiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICBpZiAoc2xpZGVUb0luZGV4IDwgc3dpcGVyLmxvb3BlZFNsaWRlcyAtIHNsaWRlc1BlclZpZXcgLyAyIHx8IHNsaWRlVG9JbmRleCA+IHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gc3dpcGVyLmxvb3BlZFNsaWRlcyArIHNsaWRlc1BlclZpZXcgLyAyKSB7XG4gICAgICAgIHN3aXBlci5sb29wRml4KCk7XG4gICAgICAgIHNsaWRlVG9JbmRleCA9IHN3aXBlci5nZXRTbGlkZUluZGV4KGVsZW1lbnRDaGlsZHJlbihzbGlkZXNFbCwgYCR7c2xpZGVTZWxlY3Rvcn1bZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke3JlYWxJbmRleH1cIl1gKVswXSk7XG4gICAgICAgIG5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhzbGlkZVRvSW5kZXgpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChzbGlkZVRvSW5kZXggPiBzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIHNsaWRlc1BlclZpZXcpIHtcbiAgICAgIHN3aXBlci5sb29wRml4KCk7XG4gICAgICBzbGlkZVRvSW5kZXggPSBzd2lwZXIuZ2V0U2xpZGVJbmRleChlbGVtZW50Q2hpbGRyZW4oc2xpZGVzRWwsIGAke3NsaWRlU2VsZWN0b3J9W2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHtyZWFsSW5kZXh9XCJdYClbMF0pO1xuICAgICAgbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzbGlkZVRvSW5kZXgpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHN3aXBlci5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gIH1cbn1cblxudmFyIHNsaWRlID0ge1xuICBzbGlkZVRvLFxuICBzbGlkZVRvTG9vcCxcbiAgc2xpZGVOZXh0LFxuICBzbGlkZVByZXYsXG4gIHNsaWRlUmVzZXQsXG4gIHNsaWRlVG9DbG9zZXN0LFxuICBzbGlkZVRvQ2xpY2tlZFNsaWRlXG59O1xuXG5mdW5jdGlvbiBsb29wQ3JlYXRlKHNsaWRlUmVhbEluZGV4KSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgc2xpZGVzRWxcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKCFwYXJhbXMubG9vcCB8fCBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCkgcmV0dXJuO1xuICBjb25zdCBpbml0U2xpZGVzID0gKCkgPT4ge1xuICAgIGNvbnN0IHNsaWRlcyA9IGVsZW1lbnRDaGlsZHJlbihzbGlkZXNFbCwgYC4ke3BhcmFtcy5zbGlkZUNsYXNzfSwgc3dpcGVyLXNsaWRlYCk7XG4gICAgc2xpZGVzLmZvckVhY2goKGVsLCBpbmRleCkgPT4ge1xuICAgICAgZWwuc2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcsIGluZGV4KTtcbiAgICB9KTtcbiAgfTtcbiAgY29uc3QgZ3JpZEVuYWJsZWQgPSBzd2lwZXIuZ3JpZCAmJiBwYXJhbXMuZ3JpZCAmJiBwYXJhbXMuZ3JpZC5yb3dzID4gMTtcbiAgY29uc3Qgc2xpZGVzUGVyR3JvdXAgPSBwYXJhbXMuc2xpZGVzUGVyR3JvdXAgKiAoZ3JpZEVuYWJsZWQgPyBwYXJhbXMuZ3JpZC5yb3dzIDogMSk7XG4gIGNvbnN0IHNob3VsZEZpbGxHcm91cCA9IHN3aXBlci5zbGlkZXMubGVuZ3RoICUgc2xpZGVzUGVyR3JvdXAgIT09IDA7XG4gIGNvbnN0IHNob3VsZEZpbGxHcmlkID0gZ3JpZEVuYWJsZWQgJiYgc3dpcGVyLnNsaWRlcy5sZW5ndGggJSBwYXJhbXMuZ3JpZC5yb3dzICE9PSAwO1xuICBjb25zdCBhZGRCbGFua1NsaWRlcyA9IGFtb3VudE9mU2xpZGVzID0+IHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFtb3VudE9mU2xpZGVzOyBpICs9IDEpIHtcbiAgICAgIGNvbnN0IHNsaWRlRWwgPSBzd2lwZXIuaXNFbGVtZW50ID8gY3JlYXRlRWxlbWVudCgnc3dpcGVyLXNsaWRlJywgW3BhcmFtcy5zbGlkZUJsYW5rQ2xhc3NdKSA6IGNyZWF0ZUVsZW1lbnQoJ2RpdicsIFtwYXJhbXMuc2xpZGVDbGFzcywgcGFyYW1zLnNsaWRlQmxhbmtDbGFzc10pO1xuICAgICAgc3dpcGVyLnNsaWRlc0VsLmFwcGVuZChzbGlkZUVsKTtcbiAgICB9XG4gIH07XG4gIGlmIChzaG91bGRGaWxsR3JvdXApIHtcbiAgICBpZiAocGFyYW1zLmxvb3BBZGRCbGFua1NsaWRlcykge1xuICAgICAgY29uc3Qgc2xpZGVzVG9BZGQgPSBzbGlkZXNQZXJHcm91cCAtIHN3aXBlci5zbGlkZXMubGVuZ3RoICUgc2xpZGVzUGVyR3JvdXA7XG4gICAgICBhZGRCbGFua1NsaWRlcyhzbGlkZXNUb0FkZCk7XG4gICAgICBzd2lwZXIucmVjYWxjU2xpZGVzKCk7XG4gICAgICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNob3dXYXJuaW5nKCdTd2lwZXIgTG9vcCBXYXJuaW5nOiBUaGUgbnVtYmVyIG9mIHNsaWRlcyBpcyBub3QgZXZlbiB0byBzbGlkZXNQZXJHcm91cCwgbG9vcCBtb2RlIG1heSBub3QgZnVuY3Rpb24gcHJvcGVybHkuIFlvdSBuZWVkIHRvIGFkZCBtb3JlIHNsaWRlcyAob3IgbWFrZSBkdXBsaWNhdGVzLCBvciBlbXB0eSBzbGlkZXMpJyk7XG4gICAgfVxuICAgIGluaXRTbGlkZXMoKTtcbiAgfSBlbHNlIGlmIChzaG91bGRGaWxsR3JpZCkge1xuICAgIGlmIChwYXJhbXMubG9vcEFkZEJsYW5rU2xpZGVzKSB7XG4gICAgICBjb25zdCBzbGlkZXNUb0FkZCA9IHBhcmFtcy5ncmlkLnJvd3MgLSBzd2lwZXIuc2xpZGVzLmxlbmd0aCAlIHBhcmFtcy5ncmlkLnJvd3M7XG4gICAgICBhZGRCbGFua1NsaWRlcyhzbGlkZXNUb0FkZCk7XG4gICAgICBzd2lwZXIucmVjYWxjU2xpZGVzKCk7XG4gICAgICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNob3dXYXJuaW5nKCdTd2lwZXIgTG9vcCBXYXJuaW5nOiBUaGUgbnVtYmVyIG9mIHNsaWRlcyBpcyBub3QgZXZlbiB0byBncmlkLnJvd3MsIGxvb3AgbW9kZSBtYXkgbm90IGZ1bmN0aW9uIHByb3Blcmx5LiBZb3UgbmVlZCB0byBhZGQgbW9yZSBzbGlkZXMgKG9yIG1ha2UgZHVwbGljYXRlcywgb3IgZW1wdHkgc2xpZGVzKScpO1xuICAgIH1cbiAgICBpbml0U2xpZGVzKCk7XG4gIH0gZWxzZSB7XG4gICAgaW5pdFNsaWRlcygpO1xuICB9XG4gIHN3aXBlci5sb29wRml4KHtcbiAgICBzbGlkZVJlYWxJbmRleCxcbiAgICBkaXJlY3Rpb246IHBhcmFtcy5jZW50ZXJlZFNsaWRlcyA/IHVuZGVmaW5lZCA6ICduZXh0J1xuICB9KTtcbn1cblxuZnVuY3Rpb24gbG9vcEZpeChfdGVtcCkge1xuICBsZXQge1xuICAgIHNsaWRlUmVhbEluZGV4LFxuICAgIHNsaWRlVG8gPSB0cnVlLFxuICAgIGRpcmVjdGlvbixcbiAgICBzZXRUcmFuc2xhdGUsXG4gICAgYWN0aXZlU2xpZGVJbmRleCxcbiAgICBieUNvbnRyb2xsZXIsXG4gICAgYnlNb3VzZXdoZWVsXG4gIH0gPSBfdGVtcCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgaWYgKCFzd2lwZXIucGFyYW1zLmxvb3ApIHJldHVybjtcbiAgc3dpcGVyLmVtaXQoJ2JlZm9yZUxvb3BGaXgnKTtcbiAgY29uc3Qge1xuICAgIHNsaWRlcyxcbiAgICBhbGxvd1NsaWRlUHJldixcbiAgICBhbGxvd1NsaWRlTmV4dCxcbiAgICBzbGlkZXNFbCxcbiAgICBwYXJhbXNcbiAgfSA9IHN3aXBlcjtcbiAgY29uc3Qge1xuICAgIGNlbnRlcmVkU2xpZGVzXG4gIH0gPSBwYXJhbXM7XG4gIHN3aXBlci5hbGxvd1NsaWRlUHJldiA9IHRydWU7XG4gIHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9IHRydWU7XG4gIGlmIChzd2lwZXIudmlydHVhbCAmJiBwYXJhbXMudmlydHVhbC5lbmFibGVkKSB7XG4gICAgaWYgKHNsaWRlVG8pIHtcbiAgICAgIGlmICghcGFyYW1zLmNlbnRlcmVkU2xpZGVzICYmIHN3aXBlci5zbmFwSW5kZXggPT09IDApIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCwgMCwgZmFsc2UsIHRydWUpO1xuICAgICAgfSBlbHNlIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMgJiYgc3dpcGVyLnNuYXBJbmRleCA8IHBhcmFtcy5zbGlkZXNQZXJWaWV3KSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggKyBzd2lwZXIuc25hcEluZGV4LCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICB9IGVsc2UgaWYgKHN3aXBlci5zbmFwSW5kZXggPT09IHN3aXBlci5zbmFwR3JpZC5sZW5ndGggLSAxKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci52aXJ0dWFsLnNsaWRlc0JlZm9yZSwgMCwgZmFsc2UsIHRydWUpO1xuICAgICAgfVxuICAgIH1cbiAgICBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPSBhbGxvd1NsaWRlUHJldjtcbiAgICBzd2lwZXIuYWxsb3dTbGlkZU5leHQgPSBhbGxvd1NsaWRlTmV4dDtcbiAgICBzd2lwZXIuZW1pdCgnbG9vcEZpeCcpO1xuICAgIHJldHVybjtcbiAgfVxuICBsZXQgc2xpZGVzUGVyVmlldyA9IHBhcmFtcy5zbGlkZXNQZXJWaWV3O1xuICBpZiAoc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nKSB7XG4gICAgc2xpZGVzUGVyVmlldyA9IHN3aXBlci5zbGlkZXNQZXJWaWV3RHluYW1pYygpO1xuICB9IGVsc2Uge1xuICAgIHNsaWRlc1BlclZpZXcgPSBNYXRoLmNlaWwocGFyc2VGbG9hdChwYXJhbXMuc2xpZGVzUGVyVmlldywgMTApKTtcbiAgICBpZiAoY2VudGVyZWRTbGlkZXMgJiYgc2xpZGVzUGVyVmlldyAlIDIgPT09IDApIHtcbiAgICAgIHNsaWRlc1BlclZpZXcgPSBzbGlkZXNQZXJWaWV3ICsgMTtcbiAgICB9XG4gIH1cbiAgY29uc3Qgc2xpZGVzUGVyR3JvdXAgPSBwYXJhbXMuc2xpZGVzUGVyR3JvdXBBdXRvID8gc2xpZGVzUGVyVmlldyA6IHBhcmFtcy5zbGlkZXNQZXJHcm91cDtcbiAgbGV0IGxvb3BlZFNsaWRlcyA9IHNsaWRlc1Blckdyb3VwO1xuICBpZiAobG9vcGVkU2xpZGVzICUgc2xpZGVzUGVyR3JvdXAgIT09IDApIHtcbiAgICBsb29wZWRTbGlkZXMgKz0gc2xpZGVzUGVyR3JvdXAgLSBsb29wZWRTbGlkZXMgJSBzbGlkZXNQZXJHcm91cDtcbiAgfVxuICBsb29wZWRTbGlkZXMgKz0gcGFyYW1zLmxvb3BBZGRpdGlvbmFsU2xpZGVzO1xuICBzd2lwZXIubG9vcGVkU2xpZGVzID0gbG9vcGVkU2xpZGVzO1xuICBjb25zdCBncmlkRW5hYmxlZCA9IHN3aXBlci5ncmlkICYmIHBhcmFtcy5ncmlkICYmIHBhcmFtcy5ncmlkLnJvd3MgPiAxO1xuICBpZiAoc2xpZGVzLmxlbmd0aCA8IHNsaWRlc1BlclZpZXcgKyBsb29wZWRTbGlkZXMpIHtcbiAgICBzaG93V2FybmluZygnU3dpcGVyIExvb3AgV2FybmluZzogVGhlIG51bWJlciBvZiBzbGlkZXMgaXMgbm90IGVub3VnaCBmb3IgbG9vcCBtb2RlLCBpdCB3aWxsIGJlIGRpc2FibGVkIGFuZCBub3QgZnVuY3Rpb24gcHJvcGVybHkuIFlvdSBuZWVkIHRvIGFkZCBtb3JlIHNsaWRlcyAob3IgbWFrZSBkdXBsaWNhdGVzKSBvciBsb3dlciB0aGUgdmFsdWVzIG9mIHNsaWRlc1BlclZpZXcgYW5kIHNsaWRlc1Blckdyb3VwIHBhcmFtZXRlcnMnKTtcbiAgfSBlbHNlIGlmIChncmlkRW5hYmxlZCAmJiBwYXJhbXMuZ3JpZC5maWxsID09PSAncm93Jykge1xuICAgIHNob3dXYXJuaW5nKCdTd2lwZXIgTG9vcCBXYXJuaW5nOiBMb29wIG1vZGUgaXMgbm90IGNvbXBhdGlibGUgd2l0aCBncmlkLmZpbGwgPSBgcm93YCcpO1xuICB9XG4gIGNvbnN0IHByZXBlbmRTbGlkZXNJbmRleGVzID0gW107XG4gIGNvbnN0IGFwcGVuZFNsaWRlc0luZGV4ZXMgPSBbXTtcbiAgbGV0IGFjdGl2ZUluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4O1xuICBpZiAodHlwZW9mIGFjdGl2ZVNsaWRlSW5kZXggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgYWN0aXZlU2xpZGVJbmRleCA9IHN3aXBlci5nZXRTbGlkZUluZGV4KHNsaWRlcy5maWx0ZXIoZWwgPT4gZWwuY2xhc3NMaXN0LmNvbnRhaW5zKHBhcmFtcy5zbGlkZUFjdGl2ZUNsYXNzKSlbMF0pO1xuICB9IGVsc2Uge1xuICAgIGFjdGl2ZUluZGV4ID0gYWN0aXZlU2xpZGVJbmRleDtcbiAgfVxuICBjb25zdCBpc05leHQgPSBkaXJlY3Rpb24gPT09ICduZXh0JyB8fCAhZGlyZWN0aW9uO1xuICBjb25zdCBpc1ByZXYgPSBkaXJlY3Rpb24gPT09ICdwcmV2JyB8fCAhZGlyZWN0aW9uO1xuICBsZXQgc2xpZGVzUHJlcGVuZGVkID0gMDtcbiAgbGV0IHNsaWRlc0FwcGVuZGVkID0gMDtcbiAgY29uc3QgY29scyA9IGdyaWRFbmFibGVkID8gTWF0aC5jZWlsKHNsaWRlcy5sZW5ndGggLyBwYXJhbXMuZ3JpZC5yb3dzKSA6IHNsaWRlcy5sZW5ndGg7XG4gIGNvbnN0IGFjdGl2ZUNvbEluZGV4ID0gZ3JpZEVuYWJsZWQgPyBzbGlkZXNbYWN0aXZlU2xpZGVJbmRleF0uY29sdW1uIDogYWN0aXZlU2xpZGVJbmRleDtcbiAgY29uc3QgYWN0aXZlQ29sSW5kZXhXaXRoU2hpZnQgPSBhY3RpdmVDb2xJbmRleCArIChjZW50ZXJlZFNsaWRlcyAmJiB0eXBlb2Ygc2V0VHJhbnNsYXRlID09PSAndW5kZWZpbmVkJyA/IC1zbGlkZXNQZXJWaWV3IC8gMiArIDAuNSA6IDApO1xuICAvLyBwcmVwZW5kIGxhc3Qgc2xpZGVzIGJlZm9yZSBzdGFydFxuICBpZiAoYWN0aXZlQ29sSW5kZXhXaXRoU2hpZnQgPCBsb29wZWRTbGlkZXMpIHtcbiAgICBzbGlkZXNQcmVwZW5kZWQgPSBNYXRoLm1heChsb29wZWRTbGlkZXMgLSBhY3RpdmVDb2xJbmRleFdpdGhTaGlmdCwgc2xpZGVzUGVyR3JvdXApO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbG9vcGVkU2xpZGVzIC0gYWN0aXZlQ29sSW5kZXhXaXRoU2hpZnQ7IGkgKz0gMSkge1xuICAgICAgY29uc3QgaW5kZXggPSBpIC0gTWF0aC5mbG9vcihpIC8gY29scykgKiBjb2xzO1xuICAgICAgaWYgKGdyaWRFbmFibGVkKSB7XG4gICAgICAgIGNvbnN0IGNvbEluZGV4VG9QcmVwZW5kID0gY29scyAtIGluZGV4IC0gMTtcbiAgICAgICAgZm9yIChsZXQgaSA9IHNsaWRlcy5sZW5ndGggLSAxOyBpID49IDA7IGkgLT0gMSkge1xuICAgICAgICAgIGlmIChzbGlkZXNbaV0uY29sdW1uID09PSBjb2xJbmRleFRvUHJlcGVuZCkgcHJlcGVuZFNsaWRlc0luZGV4ZXMucHVzaChpKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBzbGlkZXMuZm9yRWFjaCgoc2xpZGUsIHNsaWRlSW5kZXgpID0+IHtcbiAgICAgICAgLy8gICBpZiAoc2xpZGUuY29sdW1uID09PSBjb2xJbmRleFRvUHJlcGVuZCkgcHJlcGVuZFNsaWRlc0luZGV4ZXMucHVzaChzbGlkZUluZGV4KTtcbiAgICAgICAgLy8gfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcmVwZW5kU2xpZGVzSW5kZXhlcy5wdXNoKGNvbHMgLSBpbmRleCAtIDEpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChhY3RpdmVDb2xJbmRleFdpdGhTaGlmdCArIHNsaWRlc1BlclZpZXcgPiBjb2xzIC0gbG9vcGVkU2xpZGVzKSB7XG4gICAgc2xpZGVzQXBwZW5kZWQgPSBNYXRoLm1heChhY3RpdmVDb2xJbmRleFdpdGhTaGlmdCAtIChjb2xzIC0gbG9vcGVkU2xpZGVzICogMiksIHNsaWRlc1Blckdyb3VwKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlc0FwcGVuZGVkOyBpICs9IDEpIHtcbiAgICAgIGNvbnN0IGluZGV4ID0gaSAtIE1hdGguZmxvb3IoaSAvIGNvbHMpICogY29scztcbiAgICAgIGlmIChncmlkRW5hYmxlZCkge1xuICAgICAgICBzbGlkZXMuZm9yRWFjaCgoc2xpZGUsIHNsaWRlSW5kZXgpID0+IHtcbiAgICAgICAgICBpZiAoc2xpZGUuY29sdW1uID09PSBpbmRleCkgYXBwZW5kU2xpZGVzSW5kZXhlcy5wdXNoKHNsaWRlSW5kZXgpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFwcGVuZFNsaWRlc0luZGV4ZXMucHVzaChpbmRleCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHN3aXBlci5fX3ByZXZlbnRPYnNlcnZlcl9fID0gdHJ1ZTtcbiAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICBzd2lwZXIuX19wcmV2ZW50T2JzZXJ2ZXJfXyA9IGZhbHNlO1xuICB9KTtcbiAgaWYgKGlzUHJldikge1xuICAgIHByZXBlbmRTbGlkZXNJbmRleGVzLmZvckVhY2goaW5kZXggPT4ge1xuICAgICAgc2xpZGVzW2luZGV4XS5zd2lwZXJMb29wTW92ZURPTSA9IHRydWU7XG4gICAgICBzbGlkZXNFbC5wcmVwZW5kKHNsaWRlc1tpbmRleF0pO1xuICAgICAgc2xpZGVzW2luZGV4XS5zd2lwZXJMb29wTW92ZURPTSA9IGZhbHNlO1xuICAgIH0pO1xuICB9XG4gIGlmIChpc05leHQpIHtcbiAgICBhcHBlbmRTbGlkZXNJbmRleGVzLmZvckVhY2goaW5kZXggPT4ge1xuICAgICAgc2xpZGVzW2luZGV4XS5zd2lwZXJMb29wTW92ZURPTSA9IHRydWU7XG4gICAgICBzbGlkZXNFbC5hcHBlbmQoc2xpZGVzW2luZGV4XSk7XG4gICAgICBzbGlkZXNbaW5kZXhdLnN3aXBlckxvb3BNb3ZlRE9NID0gZmFsc2U7XG4gICAgfSk7XG4gIH1cbiAgc3dpcGVyLnJlY2FsY1NsaWRlcygpO1xuICBpZiAocGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJykge1xuICAgIHN3aXBlci51cGRhdGVTbGlkZXMoKTtcbiAgfSBlbHNlIGlmIChncmlkRW5hYmxlZCAmJiAocHJlcGVuZFNsaWRlc0luZGV4ZXMubGVuZ3RoID4gMCAmJiBpc1ByZXYgfHwgYXBwZW5kU2xpZGVzSW5kZXhlcy5sZW5ndGggPiAwICYmIGlzTmV4dCkpIHtcbiAgICBzd2lwZXIuc2xpZGVzLmZvckVhY2goKHNsaWRlLCBzbGlkZUluZGV4KSA9PiB7XG4gICAgICBzd2lwZXIuZ3JpZC51cGRhdGVTbGlkZShzbGlkZUluZGV4LCBzbGlkZSwgc3dpcGVyLnNsaWRlcyk7XG4gICAgfSk7XG4gIH1cbiAgaWYgKHBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzKSB7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc09mZnNldCgpO1xuICB9XG4gIGlmIChzbGlkZVRvKSB7XG4gICAgaWYgKHByZXBlbmRTbGlkZXNJbmRleGVzLmxlbmd0aCA+IDAgJiYgaXNQcmV2KSB7XG4gICAgICBpZiAodHlwZW9mIHNsaWRlUmVhbEluZGV4ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb25zdCBjdXJyZW50U2xpZGVUcmFuc2xhdGUgPSBzd2lwZXIuc2xpZGVzR3JpZFthY3RpdmVJbmRleF07XG4gICAgICAgIGNvbnN0IG5ld1NsaWRlVHJhbnNsYXRlID0gc3dpcGVyLnNsaWRlc0dyaWRbYWN0aXZlSW5kZXggKyBzbGlkZXNQcmVwZW5kZWRdO1xuICAgICAgICBjb25zdCBkaWZmID0gbmV3U2xpZGVUcmFuc2xhdGUgLSBjdXJyZW50U2xpZGVUcmFuc2xhdGU7XG4gICAgICAgIGlmIChieU1vdXNld2hlZWwpIHtcbiAgICAgICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKHN3aXBlci50cmFuc2xhdGUgLSBkaWZmKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhhY3RpdmVJbmRleCArIE1hdGguY2VpbChzbGlkZXNQcmVwZW5kZWQpLCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgICAgaWYgKHNldFRyYW5zbGF0ZSkge1xuICAgICAgICAgICAgc3dpcGVyLnRvdWNoRXZlbnRzRGF0YS5zdGFydFRyYW5zbGF0ZSA9IHN3aXBlci50b3VjaEV2ZW50c0RhdGEuc3RhcnRUcmFuc2xhdGUgLSBkaWZmO1xuICAgICAgICAgICAgc3dpcGVyLnRvdWNoRXZlbnRzRGF0YS5jdXJyZW50VHJhbnNsYXRlID0gc3dpcGVyLnRvdWNoRXZlbnRzRGF0YS5jdXJyZW50VHJhbnNsYXRlIC0gZGlmZjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChzZXRUcmFuc2xhdGUpIHtcbiAgICAgICAgICBjb25zdCBzaGlmdCA9IGdyaWRFbmFibGVkID8gcHJlcGVuZFNsaWRlc0luZGV4ZXMubGVuZ3RoIC8gcGFyYW1zLmdyaWQucm93cyA6IHByZXBlbmRTbGlkZXNJbmRleGVzLmxlbmd0aDtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXggKyBzaGlmdCwgMCwgZmFsc2UsIHRydWUpO1xuICAgICAgICAgIHN3aXBlci50b3VjaEV2ZW50c0RhdGEuY3VycmVudFRyYW5zbGF0ZSA9IHN3aXBlci50cmFuc2xhdGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGFwcGVuZFNsaWRlc0luZGV4ZXMubGVuZ3RoID4gMCAmJiBpc05leHQpIHtcbiAgICAgIGlmICh0eXBlb2Ygc2xpZGVSZWFsSW5kZXggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRTbGlkZVRyYW5zbGF0ZSA9IHN3aXBlci5zbGlkZXNHcmlkW2FjdGl2ZUluZGV4XTtcbiAgICAgICAgY29uc3QgbmV3U2xpZGVUcmFuc2xhdGUgPSBzd2lwZXIuc2xpZGVzR3JpZFthY3RpdmVJbmRleCAtIHNsaWRlc0FwcGVuZGVkXTtcbiAgICAgICAgY29uc3QgZGlmZiA9IG5ld1NsaWRlVHJhbnNsYXRlIC0gY3VycmVudFNsaWRlVHJhbnNsYXRlO1xuICAgICAgICBpZiAoYnlNb3VzZXdoZWVsKSB7XG4gICAgICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZShzd2lwZXIudHJhbnNsYXRlIC0gZGlmZik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlVG8oYWN0aXZlSW5kZXggLSBzbGlkZXNBcHBlbmRlZCwgMCwgZmFsc2UsIHRydWUpO1xuICAgICAgICAgIGlmIChzZXRUcmFuc2xhdGUpIHtcbiAgICAgICAgICAgIHN3aXBlci50b3VjaEV2ZW50c0RhdGEuc3RhcnRUcmFuc2xhdGUgPSBzd2lwZXIudG91Y2hFdmVudHNEYXRhLnN0YXJ0VHJhbnNsYXRlIC0gZGlmZjtcbiAgICAgICAgICAgIHN3aXBlci50b3VjaEV2ZW50c0RhdGEuY3VycmVudFRyYW5zbGF0ZSA9IHN3aXBlci50b3VjaEV2ZW50c0RhdGEuY3VycmVudFRyYW5zbGF0ZSAtIGRpZmY7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBzaGlmdCA9IGdyaWRFbmFibGVkID8gYXBwZW5kU2xpZGVzSW5kZXhlcy5sZW5ndGggLyBwYXJhbXMuZ3JpZC5yb3dzIDogYXBwZW5kU2xpZGVzSW5kZXhlcy5sZW5ndGg7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCAtIHNoaWZ0LCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHN3aXBlci5hbGxvd1NsaWRlUHJldiA9IGFsbG93U2xpZGVQcmV2O1xuICBzd2lwZXIuYWxsb3dTbGlkZU5leHQgPSBhbGxvd1NsaWRlTmV4dDtcbiAgaWYgKHN3aXBlci5jb250cm9sbGVyICYmIHN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wgJiYgIWJ5Q29udHJvbGxlcikge1xuICAgIGNvbnN0IGxvb3BQYXJhbXMgPSB7XG4gICAgICBzbGlkZVJlYWxJbmRleCxcbiAgICAgIGRpcmVjdGlvbixcbiAgICAgIHNldFRyYW5zbGF0ZSxcbiAgICAgIGFjdGl2ZVNsaWRlSW5kZXgsXG4gICAgICBieUNvbnRyb2xsZXI6IHRydWVcbiAgICB9O1xuICAgIGlmIChBcnJheS5pc0FycmF5KHN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wpKSB7XG4gICAgICBzd2lwZXIuY29udHJvbGxlci5jb250cm9sLmZvckVhY2goYyA9PiB7XG4gICAgICAgIGlmICghYy5kZXN0cm95ZWQgJiYgYy5wYXJhbXMubG9vcCkgYy5sb29wRml4KHtcbiAgICAgICAgICAuLi5sb29wUGFyYW1zLFxuICAgICAgICAgIHNsaWRlVG86IGMucGFyYW1zLnNsaWRlc1BlclZpZXcgPT09IHBhcmFtcy5zbGlkZXNQZXJWaWV3ID8gc2xpZGVUbyA6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChzd2lwZXIuY29udHJvbGxlci5jb250cm9sIGluc3RhbmNlb2Ygc3dpcGVyLmNvbnN0cnVjdG9yICYmIHN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wucGFyYW1zLmxvb3ApIHtcbiAgICAgIHN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wubG9vcEZpeCh7XG4gICAgICAgIC4uLmxvb3BQYXJhbXMsXG4gICAgICAgIHNsaWRlVG86IHN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wucGFyYW1zLnNsaWRlc1BlclZpZXcgPT09IHBhcmFtcy5zbGlkZXNQZXJWaWV3ID8gc2xpZGVUbyA6IGZhbHNlXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgc3dpcGVyLmVtaXQoJ2xvb3BGaXgnKTtcbn1cblxuZnVuY3Rpb24gbG9vcERlc3Ryb3koKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgc2xpZGVzRWxcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKCFwYXJhbXMubG9vcCB8fCBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCkgcmV0dXJuO1xuICBzd2lwZXIucmVjYWxjU2xpZGVzKCk7XG4gIGNvbnN0IG5ld1NsaWRlc09yZGVyID0gW107XG4gIHN3aXBlci5zbGlkZXMuZm9yRWFjaChzbGlkZUVsID0+IHtcbiAgICBjb25zdCBpbmRleCA9IHR5cGVvZiBzbGlkZUVsLnN3aXBlclNsaWRlSW5kZXggPT09ICd1bmRlZmluZWQnID8gc2xpZGVFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JykgKiAxIDogc2xpZGVFbC5zd2lwZXJTbGlkZUluZGV4O1xuICAgIG5ld1NsaWRlc09yZGVyW2luZGV4XSA9IHNsaWRlRWw7XG4gIH0pO1xuICBzd2lwZXIuc2xpZGVzLmZvckVhY2goc2xpZGVFbCA9PiB7XG4gICAgc2xpZGVFbC5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4Jyk7XG4gIH0pO1xuICBuZXdTbGlkZXNPcmRlci5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgIHNsaWRlc0VsLmFwcGVuZChzbGlkZUVsKTtcbiAgfSk7XG4gIHN3aXBlci5yZWNhbGNTbGlkZXMoKTtcbiAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnJlYWxJbmRleCwgMCk7XG59XG5cbnZhciBsb29wID0ge1xuICBsb29wQ3JlYXRlLFxuICBsb29wRml4LFxuICBsb29wRGVzdHJveVxufTtcblxuZnVuY3Rpb24gc2V0R3JhYkN1cnNvcihtb3ZpbmcpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgaWYgKCFzd2lwZXIucGFyYW1zLnNpbXVsYXRlVG91Y2ggfHwgc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHN3aXBlci5pc0xvY2tlZCB8fCBzd2lwZXIucGFyYW1zLmNzc01vZGUpIHJldHVybjtcbiAgY29uc3QgZWwgPSBzd2lwZXIucGFyYW1zLnRvdWNoRXZlbnRzVGFyZ2V0ID09PSAnY29udGFpbmVyJyA/IHN3aXBlci5lbCA6IHN3aXBlci53cmFwcGVyRWw7XG4gIGlmIChzd2lwZXIuaXNFbGVtZW50KSB7XG4gICAgc3dpcGVyLl9fcHJldmVudE9ic2VydmVyX18gPSB0cnVlO1xuICB9XG4gIGVsLnN0eWxlLmN1cnNvciA9ICdtb3ZlJztcbiAgZWwuc3R5bGUuY3Vyc29yID0gbW92aW5nID8gJ2dyYWJiaW5nJyA6ICdncmFiJztcbiAgaWYgKHN3aXBlci5pc0VsZW1lbnQpIHtcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgc3dpcGVyLl9fcHJldmVudE9ic2VydmVyX18gPSBmYWxzZTtcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiB1bnNldEdyYWJDdXJzb3IoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGlmIChzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc3dpcGVyLmlzTG9ja2VkIHx8IHN3aXBlci5wYXJhbXMuY3NzTW9kZSkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoc3dpcGVyLmlzRWxlbWVudCkge1xuICAgIHN3aXBlci5fX3ByZXZlbnRPYnNlcnZlcl9fID0gdHJ1ZTtcbiAgfVxuICBzd2lwZXJbc3dpcGVyLnBhcmFtcy50b3VjaEV2ZW50c1RhcmdldCA9PT0gJ2NvbnRhaW5lcicgPyAnZWwnIDogJ3dyYXBwZXJFbCddLnN0eWxlLmN1cnNvciA9ICcnO1xuICBpZiAoc3dpcGVyLmlzRWxlbWVudCkge1xuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICBzd2lwZXIuX19wcmV2ZW50T2JzZXJ2ZXJfXyA9IGZhbHNlO1xuICAgIH0pO1xuICB9XG59XG5cbnZhciBncmFiQ3Vyc29yID0ge1xuICBzZXRHcmFiQ3Vyc29yLFxuICB1bnNldEdyYWJDdXJzb3Jcbn07XG5cbi8vIE1vZGlmaWVkIGZyb20gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNTQ1MjA1NTQvY3VzdG9tLWVsZW1lbnQtZ2V0cm9vdG5vZGUtY2xvc2VzdC1mdW5jdGlvbi1jcm9zc2luZy1tdWx0aXBsZS1wYXJlbnQtc2hhZG93ZFxuZnVuY3Rpb24gY2xvc2VzdEVsZW1lbnQoc2VsZWN0b3IsIGJhc2UpIHtcbiAgaWYgKGJhc2UgPT09IHZvaWQgMCkge1xuICAgIGJhc2UgPSB0aGlzO1xuICB9XG4gIGZ1bmN0aW9uIF9fY2xvc2VzdEZyb20oZWwpIHtcbiAgICBpZiAoIWVsIHx8IGVsID09PSBnZXREb2N1bWVudCgpIHx8IGVsID09PSBnZXRXaW5kb3coKSkgcmV0dXJuIG51bGw7XG4gICAgaWYgKGVsLmFzc2lnbmVkU2xvdCkgZWwgPSBlbC5hc3NpZ25lZFNsb3Q7XG4gICAgY29uc3QgZm91bmQgPSBlbC5jbG9zZXN0KHNlbGVjdG9yKTtcbiAgICBpZiAoIWZvdW5kICYmICFlbC5nZXRSb290Tm9kZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBmb3VuZCB8fCBfX2Nsb3Nlc3RGcm9tKGVsLmdldFJvb3ROb2RlKCkuaG9zdCk7XG4gIH1cbiAgcmV0dXJuIF9fY2xvc2VzdEZyb20oYmFzZSk7XG59XG5mdW5jdGlvbiBwcmV2ZW50RWRnZVN3aXBlKHN3aXBlciwgZXZlbnQsIHN0YXJ0WCkge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgY29uc3Qge1xuICAgIHBhcmFtc1xuICB9ID0gc3dpcGVyO1xuICBjb25zdCBlZGdlU3dpcGVEZXRlY3Rpb24gPSBwYXJhbXMuZWRnZVN3aXBlRGV0ZWN0aW9uO1xuICBjb25zdCBlZGdlU3dpcGVUaHJlc2hvbGQgPSBwYXJhbXMuZWRnZVN3aXBlVGhyZXNob2xkO1xuICBpZiAoZWRnZVN3aXBlRGV0ZWN0aW9uICYmIChzdGFydFggPD0gZWRnZVN3aXBlVGhyZXNob2xkIHx8IHN0YXJ0WCA+PSB3aW5kb3cuaW5uZXJXaWR0aCAtIGVkZ2VTd2lwZVRocmVzaG9sZCkpIHtcbiAgICBpZiAoZWRnZVN3aXBlRGV0ZWN0aW9uID09PSAncHJldmVudCcpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gb25Ub3VjaFN0YXJ0KGV2ZW50KSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgbGV0IGUgPSBldmVudDtcbiAgaWYgKGUub3JpZ2luYWxFdmVudCkgZSA9IGUub3JpZ2luYWxFdmVudDtcbiAgY29uc3QgZGF0YSA9IHN3aXBlci50b3VjaEV2ZW50c0RhdGE7XG4gIGlmIChlLnR5cGUgPT09ICdwb2ludGVyZG93bicpIHtcbiAgICBpZiAoZGF0YS5wb2ludGVySWQgIT09IG51bGwgJiYgZGF0YS5wb2ludGVySWQgIT09IGUucG9pbnRlcklkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGRhdGEucG9pbnRlcklkID0gZS5wb2ludGVySWQ7XG4gIH0gZWxzZSBpZiAoZS50eXBlID09PSAndG91Y2hzdGFydCcgJiYgZS50YXJnZXRUb3VjaGVzLmxlbmd0aCA9PT0gMSkge1xuICAgIGRhdGEudG91Y2hJZCA9IGUudGFyZ2V0VG91Y2hlc1swXS5pZGVudGlmaWVyO1xuICB9XG4gIGlmIChlLnR5cGUgPT09ICd0b3VjaHN0YXJ0Jykge1xuICAgIC8vIGRvbid0IHByb2NlZWQgdG91Y2ggZXZlbnRcbiAgICBwcmV2ZW50RWRnZVN3aXBlKHN3aXBlciwgZSwgZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VYKTtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICB0b3VjaGVzLFxuICAgIGVuYWJsZWRcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKCFlbmFibGVkKSByZXR1cm47XG4gIGlmICghcGFyYW1zLnNpbXVsYXRlVG91Y2ggJiYgZS5wb2ludGVyVHlwZSA9PT0gJ21vdXNlJykgcmV0dXJuO1xuICBpZiAoc3dpcGVyLmFuaW1hdGluZyAmJiBwYXJhbXMucHJldmVudEludGVyYWN0aW9uT25UcmFuc2l0aW9uKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICghc3dpcGVyLmFuaW1hdGluZyAmJiBwYXJhbXMuY3NzTW9kZSAmJiBwYXJhbXMubG9vcCkge1xuICAgIHN3aXBlci5sb29wRml4KCk7XG4gIH1cbiAgbGV0IHRhcmdldEVsID0gZS50YXJnZXQ7XG4gIGlmIChwYXJhbXMudG91Y2hFdmVudHNUYXJnZXQgPT09ICd3cmFwcGVyJykge1xuICAgIGlmICghc3dpcGVyLndyYXBwZXJFbC5jb250YWlucyh0YXJnZXRFbCkpIHJldHVybjtcbiAgfVxuICBpZiAoJ3doaWNoJyBpbiBlICYmIGUud2hpY2ggPT09IDMpIHJldHVybjtcbiAgaWYgKCdidXR0b24nIGluIGUgJiYgZS5idXR0b24gPiAwKSByZXR1cm47XG4gIGlmIChkYXRhLmlzVG91Y2hlZCAmJiBkYXRhLmlzTW92ZWQpIHJldHVybjtcblxuICAvLyBjaGFuZ2UgdGFyZ2V0IGVsIGZvciBzaGFkb3cgcm9vdCBjb21wb25lbnRcbiAgY29uc3Qgc3dpcGluZ0NsYXNzSGFzVmFsdWUgPSAhIXBhcmFtcy5ub1N3aXBpbmdDbGFzcyAmJiBwYXJhbXMubm9Td2lwaW5nQ2xhc3MgIT09ICcnO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgY29uc3QgZXZlbnRQYXRoID0gZS5jb21wb3NlZFBhdGggPyBlLmNvbXBvc2VkUGF0aCgpIDogZS5wYXRoO1xuICBpZiAoc3dpcGluZ0NsYXNzSGFzVmFsdWUgJiYgZS50YXJnZXQgJiYgZS50YXJnZXQuc2hhZG93Um9vdCAmJiBldmVudFBhdGgpIHtcbiAgICB0YXJnZXRFbCA9IGV2ZW50UGF0aFswXTtcbiAgfVxuICBjb25zdCBub1N3aXBpbmdTZWxlY3RvciA9IHBhcmFtcy5ub1N3aXBpbmdTZWxlY3RvciA/IHBhcmFtcy5ub1N3aXBpbmdTZWxlY3RvciA6IGAuJHtwYXJhbXMubm9Td2lwaW5nQ2xhc3N9YDtcbiAgY29uc3QgaXNUYXJnZXRTaGFkb3cgPSAhIShlLnRhcmdldCAmJiBlLnRhcmdldC5zaGFkb3dSb290KTtcblxuICAvLyB1c2UgY2xvc2VzdEVsZW1lbnQgZm9yIHNoYWRvdyByb290IGVsZW1lbnQgdG8gZ2V0IHRoZSBhY3R1YWwgY2xvc2VzdCBmb3IgbmVzdGVkIHNoYWRvdyByb290IGVsZW1lbnRcbiAgaWYgKHBhcmFtcy5ub1N3aXBpbmcgJiYgKGlzVGFyZ2V0U2hhZG93ID8gY2xvc2VzdEVsZW1lbnQobm9Td2lwaW5nU2VsZWN0b3IsIHRhcmdldEVsKSA6IHRhcmdldEVsLmNsb3Nlc3Qobm9Td2lwaW5nU2VsZWN0b3IpKSkge1xuICAgIHN3aXBlci5hbGxvd0NsaWNrID0gdHJ1ZTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHBhcmFtcy5zd2lwZUhhbmRsZXIpIHtcbiAgICBpZiAoIXRhcmdldEVsLmNsb3Nlc3QocGFyYW1zLnN3aXBlSGFuZGxlcikpIHJldHVybjtcbiAgfVxuICB0b3VjaGVzLmN1cnJlbnRYID0gZS5wYWdlWDtcbiAgdG91Y2hlcy5jdXJyZW50WSA9IGUucGFnZVk7XG4gIGNvbnN0IHN0YXJ0WCA9IHRvdWNoZXMuY3VycmVudFg7XG4gIGNvbnN0IHN0YXJ0WSA9IHRvdWNoZXMuY3VycmVudFk7XG5cbiAgLy8gRG8gTk9UIHN0YXJ0IGlmIGlPUyBlZGdlIHN3aXBlIGlzIGRldGVjdGVkLiBPdGhlcndpc2UgaU9TIGFwcCBjYW5ub3Qgc3dpcGUtdG8tZ28tYmFjayBhbnltb3JlXG5cbiAgaWYgKCFwcmV2ZW50RWRnZVN3aXBlKHN3aXBlciwgZSwgc3RhcnRYKSkge1xuICAgIHJldHVybjtcbiAgfVxuICBPYmplY3QuYXNzaWduKGRhdGEsIHtcbiAgICBpc1RvdWNoZWQ6IHRydWUsXG4gICAgaXNNb3ZlZDogZmFsc2UsXG4gICAgYWxsb3dUb3VjaENhbGxiYWNrczogdHJ1ZSxcbiAgICBpc1Njcm9sbGluZzogdW5kZWZpbmVkLFxuICAgIHN0YXJ0TW92aW5nOiB1bmRlZmluZWRcbiAgfSk7XG4gIHRvdWNoZXMuc3RhcnRYID0gc3RhcnRYO1xuICB0b3VjaGVzLnN0YXJ0WSA9IHN0YXJ0WTtcbiAgZGF0YS50b3VjaFN0YXJ0VGltZSA9IG5vdygpO1xuICBzd2lwZXIuYWxsb3dDbGljayA9IHRydWU7XG4gIHN3aXBlci51cGRhdGVTaXplKCk7XG4gIHN3aXBlci5zd2lwZURpcmVjdGlvbiA9IHVuZGVmaW5lZDtcbiAgaWYgKHBhcmFtcy50aHJlc2hvbGQgPiAwKSBkYXRhLmFsbG93VGhyZXNob2xkTW92ZSA9IGZhbHNlO1xuICBsZXQgcHJldmVudERlZmF1bHQgPSB0cnVlO1xuICBpZiAodGFyZ2V0RWwubWF0Y2hlcyhkYXRhLmZvY3VzYWJsZUVsZW1lbnRzKSkge1xuICAgIHByZXZlbnREZWZhdWx0ID0gZmFsc2U7XG4gICAgaWYgKHRhcmdldEVsLm5vZGVOYW1lID09PSAnU0VMRUNUJykge1xuICAgICAgZGF0YS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgaWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5tYXRjaGVzKGRhdGEuZm9jdXNhYmxlRWxlbWVudHMpICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgIT09IHRhcmdldEVsKSB7XG4gICAgZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5ibHVyKCk7XG4gIH1cbiAgY29uc3Qgc2hvdWxkUHJldmVudERlZmF1bHQgPSBwcmV2ZW50RGVmYXVsdCAmJiBzd2lwZXIuYWxsb3dUb3VjaE1vdmUgJiYgcGFyYW1zLnRvdWNoU3RhcnRQcmV2ZW50RGVmYXVsdDtcbiAgaWYgKChwYXJhbXMudG91Y2hTdGFydEZvcmNlUHJldmVudERlZmF1bHQgfHwgc2hvdWxkUHJldmVudERlZmF1bHQpICYmICF0YXJnZXRFbC5pc0NvbnRlbnRFZGl0YWJsZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgfVxuICBpZiAocGFyYW1zLmZyZWVNb2RlICYmIHBhcmFtcy5mcmVlTW9kZS5lbmFibGVkICYmIHN3aXBlci5mcmVlTW9kZSAmJiBzd2lwZXIuYW5pbWF0aW5nICYmICFwYXJhbXMuY3NzTW9kZSkge1xuICAgIHN3aXBlci5mcmVlTW9kZS5vblRvdWNoU3RhcnQoKTtcbiAgfVxuICBzd2lwZXIuZW1pdCgndG91Y2hTdGFydCcsIGUpO1xufVxuXG5mdW5jdGlvbiBvblRvdWNoTW92ZShldmVudCkge1xuICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IGRhdGEgPSBzd2lwZXIudG91Y2hFdmVudHNEYXRhO1xuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgIHRvdWNoZXMsXG4gICAgcnRsVHJhbnNsYXRlOiBydGwsXG4gICAgZW5hYmxlZFxuICB9ID0gc3dpcGVyO1xuICBpZiAoIWVuYWJsZWQpIHJldHVybjtcbiAgaWYgKCFwYXJhbXMuc2ltdWxhdGVUb3VjaCAmJiBldmVudC5wb2ludGVyVHlwZSA9PT0gJ21vdXNlJykgcmV0dXJuO1xuICBsZXQgZSA9IGV2ZW50O1xuICBpZiAoZS5vcmlnaW5hbEV2ZW50KSBlID0gZS5vcmlnaW5hbEV2ZW50O1xuICBpZiAoZS50eXBlID09PSAncG9pbnRlcm1vdmUnKSB7XG4gICAgaWYgKGRhdGEudG91Y2hJZCAhPT0gbnVsbCkgcmV0dXJuOyAvLyByZXR1cm4gZnJvbSBwb2ludGVyIGlmIHdlIHVzZSB0b3VjaFxuICAgIGNvbnN0IGlkID0gZS5wb2ludGVySWQ7XG4gICAgaWYgKGlkICE9PSBkYXRhLnBvaW50ZXJJZCkgcmV0dXJuO1xuICB9XG4gIGxldCB0YXJnZXRUb3VjaDtcbiAgaWYgKGUudHlwZSA9PT0gJ3RvdWNobW92ZScpIHtcbiAgICB0YXJnZXRUb3VjaCA9IFsuLi5lLmNoYW5nZWRUb3VjaGVzXS5maWx0ZXIodCA9PiB0LmlkZW50aWZpZXIgPT09IGRhdGEudG91Y2hJZClbMF07XG4gICAgaWYgKCF0YXJnZXRUb3VjaCB8fCB0YXJnZXRUb3VjaC5pZGVudGlmaWVyICE9PSBkYXRhLnRvdWNoSWQpIHJldHVybjtcbiAgfSBlbHNlIHtcbiAgICB0YXJnZXRUb3VjaCA9IGU7XG4gIH1cbiAgaWYgKCFkYXRhLmlzVG91Y2hlZCkge1xuICAgIGlmIChkYXRhLnN0YXJ0TW92aW5nICYmIGRhdGEuaXNTY3JvbGxpbmcpIHtcbiAgICAgIHN3aXBlci5lbWl0KCd0b3VjaE1vdmVPcHBvc2l0ZScsIGUpO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgcGFnZVggPSB0YXJnZXRUb3VjaC5wYWdlWDtcbiAgY29uc3QgcGFnZVkgPSB0YXJnZXRUb3VjaC5wYWdlWTtcbiAgaWYgKGUucHJldmVudGVkQnlOZXN0ZWRTd2lwZXIpIHtcbiAgICB0b3VjaGVzLnN0YXJ0WCA9IHBhZ2VYO1xuICAgIHRvdWNoZXMuc3RhcnRZID0gcGFnZVk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICghc3dpcGVyLmFsbG93VG91Y2hNb3ZlKSB7XG4gICAgaWYgKCFlLnRhcmdldC5tYXRjaGVzKGRhdGEuZm9jdXNhYmxlRWxlbWVudHMpKSB7XG4gICAgICBzd2lwZXIuYWxsb3dDbGljayA9IGZhbHNlO1xuICAgIH1cbiAgICBpZiAoZGF0YS5pc1RvdWNoZWQpIHtcbiAgICAgIE9iamVjdC5hc3NpZ24odG91Y2hlcywge1xuICAgICAgICBzdGFydFg6IHBhZ2VYLFxuICAgICAgICBzdGFydFk6IHBhZ2VZLFxuICAgICAgICBjdXJyZW50WDogcGFnZVgsXG4gICAgICAgIGN1cnJlbnRZOiBwYWdlWVxuICAgICAgfSk7XG4gICAgICBkYXRhLnRvdWNoU3RhcnRUaW1lID0gbm93KCk7XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuICBpZiAocGFyYW1zLnRvdWNoUmVsZWFzZU9uRWRnZXMgJiYgIXBhcmFtcy5sb29wKSB7XG4gICAgaWYgKHN3aXBlci5pc1ZlcnRpY2FsKCkpIHtcbiAgICAgIC8vIFZlcnRpY2FsXG4gICAgICBpZiAocGFnZVkgPCB0b3VjaGVzLnN0YXJ0WSAmJiBzd2lwZXIudHJhbnNsYXRlIDw9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSB8fCBwYWdlWSA+IHRvdWNoZXMuc3RhcnRZICYmIHN3aXBlci50cmFuc2xhdGUgPj0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSB7XG4gICAgICAgIGRhdGEuaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgICAgIGRhdGEuaXNNb3ZlZCA9IGZhbHNlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChwYWdlWCA8IHRvdWNoZXMuc3RhcnRYICYmIHN3aXBlci50cmFuc2xhdGUgPD0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpIHx8IHBhZ2VYID4gdG91Y2hlcy5zdGFydFggJiYgc3dpcGVyLnRyYW5zbGF0ZSA+PSBzd2lwZXIubWluVHJhbnNsYXRlKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbiAgaWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpIHtcbiAgICBpZiAoZS50YXJnZXQgPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgZS50YXJnZXQubWF0Y2hlcyhkYXRhLmZvY3VzYWJsZUVsZW1lbnRzKSkge1xuICAgICAgZGF0YS5pc01vdmVkID0gdHJ1ZTtcbiAgICAgIHN3aXBlci5hbGxvd0NsaWNrID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG4gIGlmIChkYXRhLmFsbG93VG91Y2hDYWxsYmFja3MpIHtcbiAgICBzd2lwZXIuZW1pdCgndG91Y2hNb3ZlJywgZSk7XG4gIH1cbiAgdG91Y2hlcy5wcmV2aW91c1ggPSB0b3VjaGVzLmN1cnJlbnRYO1xuICB0b3VjaGVzLnByZXZpb3VzWSA9IHRvdWNoZXMuY3VycmVudFk7XG4gIHRvdWNoZXMuY3VycmVudFggPSBwYWdlWDtcbiAgdG91Y2hlcy5jdXJyZW50WSA9IHBhZ2VZO1xuICBjb25zdCBkaWZmWCA9IHRvdWNoZXMuY3VycmVudFggLSB0b3VjaGVzLnN0YXJ0WDtcbiAgY29uc3QgZGlmZlkgPSB0b3VjaGVzLmN1cnJlbnRZIC0gdG91Y2hlcy5zdGFydFk7XG4gIGlmIChzd2lwZXIucGFyYW1zLnRocmVzaG9sZCAmJiBNYXRoLnNxcnQoZGlmZlggKiogMiArIGRpZmZZICoqIDIpIDwgc3dpcGVyLnBhcmFtcy50aHJlc2hvbGQpIHJldHVybjtcbiAgaWYgKHR5cGVvZiBkYXRhLmlzU2Nyb2xsaW5nID09PSAndW5kZWZpbmVkJykge1xuICAgIGxldCB0b3VjaEFuZ2xlO1xuICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkgJiYgdG91Y2hlcy5jdXJyZW50WSA9PT0gdG91Y2hlcy5zdGFydFkgfHwgc3dpcGVyLmlzVmVydGljYWwoKSAmJiB0b3VjaGVzLmN1cnJlbnRYID09PSB0b3VjaGVzLnN0YXJ0WCkge1xuICAgICAgZGF0YS5pc1Njcm9sbGluZyA9IGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIGlmIChkaWZmWCAqIGRpZmZYICsgZGlmZlkgKiBkaWZmWSA+PSAyNSkge1xuICAgICAgICB0b3VjaEFuZ2xlID0gTWF0aC5hdGFuMihNYXRoLmFicyhkaWZmWSksIE1hdGguYWJzKGRpZmZYKSkgKiAxODAgLyBNYXRoLlBJO1xuICAgICAgICBkYXRhLmlzU2Nyb2xsaW5nID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gdG91Y2hBbmdsZSA+IHBhcmFtcy50b3VjaEFuZ2xlIDogOTAgLSB0b3VjaEFuZ2xlID4gcGFyYW1zLnRvdWNoQW5nbGU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChkYXRhLmlzU2Nyb2xsaW5nKSB7XG4gICAgc3dpcGVyLmVtaXQoJ3RvdWNoTW92ZU9wcG9zaXRlJywgZSk7XG4gIH1cbiAgaWYgKHR5cGVvZiBkYXRhLnN0YXJ0TW92aW5nID09PSAndW5kZWZpbmVkJykge1xuICAgIGlmICh0b3VjaGVzLmN1cnJlbnRYICE9PSB0b3VjaGVzLnN0YXJ0WCB8fCB0b3VjaGVzLmN1cnJlbnRZICE9PSB0b3VjaGVzLnN0YXJ0WSkge1xuICAgICAgZGF0YS5zdGFydE1vdmluZyA9IHRydWU7XG4gICAgfVxuICB9XG4gIGlmIChkYXRhLmlzU2Nyb2xsaW5nIHx8IGUudHlwZSA9PT0gJ3RvdWNobW92ZScgJiYgZGF0YS5wcmV2ZW50VG91Y2hNb3ZlRnJvbVBvaW50ZXJNb3ZlKSB7XG4gICAgZGF0YS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKCFkYXRhLnN0YXJ0TW92aW5nKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHN3aXBlci5hbGxvd0NsaWNrID0gZmFsc2U7XG4gIGlmICghcGFyYW1zLmNzc01vZGUgJiYgZS5jYW5jZWxhYmxlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICB9XG4gIGlmIChwYXJhbXMudG91Y2hNb3ZlU3RvcFByb3BhZ2F0aW9uICYmICFwYXJhbXMubmVzdGVkKSB7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgfVxuICBsZXQgZGlmZiA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IGRpZmZYIDogZGlmZlk7XG4gIGxldCB0b3VjaGVzRGlmZiA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHRvdWNoZXMuY3VycmVudFggLSB0b3VjaGVzLnByZXZpb3VzWCA6IHRvdWNoZXMuY3VycmVudFkgLSB0b3VjaGVzLnByZXZpb3VzWTtcbiAgaWYgKHBhcmFtcy5vbmVXYXlNb3ZlbWVudCkge1xuICAgIGRpZmYgPSBNYXRoLmFicyhkaWZmKSAqIChydGwgPyAxIDogLTEpO1xuICAgIHRvdWNoZXNEaWZmID0gTWF0aC5hYnModG91Y2hlc0RpZmYpICogKHJ0bCA/IDEgOiAtMSk7XG4gIH1cbiAgdG91Y2hlcy5kaWZmID0gZGlmZjtcbiAgZGlmZiAqPSBwYXJhbXMudG91Y2hSYXRpbztcbiAgaWYgKHJ0bCkge1xuICAgIGRpZmYgPSAtZGlmZjtcbiAgICB0b3VjaGVzRGlmZiA9IC10b3VjaGVzRGlmZjtcbiAgfVxuICBjb25zdCBwcmV2VG91Y2hlc0RpcmVjdGlvbiA9IHN3aXBlci50b3VjaGVzRGlyZWN0aW9uO1xuICBzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPSBkaWZmID4gMCA/ICdwcmV2JyA6ICduZXh0JztcbiAgc3dpcGVyLnRvdWNoZXNEaXJlY3Rpb24gPSB0b3VjaGVzRGlmZiA+IDAgPyAncHJldicgOiAnbmV4dCc7XG4gIGNvbnN0IGlzTG9vcCA9IHN3aXBlci5wYXJhbXMubG9vcCAmJiAhcGFyYW1zLmNzc01vZGU7XG4gIGNvbnN0IGFsbG93TG9vcEZpeCA9IHN3aXBlci50b3VjaGVzRGlyZWN0aW9uID09PSAnbmV4dCcgJiYgc3dpcGVyLmFsbG93U2xpZGVOZXh0IHx8IHN3aXBlci50b3VjaGVzRGlyZWN0aW9uID09PSAncHJldicgJiYgc3dpcGVyLmFsbG93U2xpZGVQcmV2O1xuICBpZiAoIWRhdGEuaXNNb3ZlZCkge1xuICAgIGlmIChpc0xvb3AgJiYgYWxsb3dMb29wRml4KSB7XG4gICAgICBzd2lwZXIubG9vcEZpeCh7XG4gICAgICAgIGRpcmVjdGlvbjogc3dpcGVyLnN3aXBlRGlyZWN0aW9uXG4gICAgICB9KTtcbiAgICB9XG4gICAgZGF0YS5zdGFydFRyYW5zbGF0ZSA9IHN3aXBlci5nZXRUcmFuc2xhdGUoKTtcbiAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbigwKTtcbiAgICBpZiAoc3dpcGVyLmFuaW1hdGluZykge1xuICAgICAgY29uc3QgZXZ0ID0gbmV3IHdpbmRvdy5DdXN0b21FdmVudCgndHJhbnNpdGlvbmVuZCcsIHtcbiAgICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgICAgY2FuY2VsYWJsZTogdHJ1ZSxcbiAgICAgICAgZGV0YWlsOiB7XG4gICAgICAgICAgYnlTd2lwZXJUb3VjaE1vdmU6IHRydWVcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBzd2lwZXIud3JhcHBlckVsLmRpc3BhdGNoRXZlbnQoZXZ0KTtcbiAgICB9XG4gICAgZGF0YS5hbGxvd01vbWVudHVtQm91bmNlID0gZmFsc2U7XG4gICAgLy8gR3JhYiBDdXJzb3JcbiAgICBpZiAocGFyYW1zLmdyYWJDdXJzb3IgJiYgKHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9PT0gdHJ1ZSB8fCBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPT09IHRydWUpKSB7XG4gICAgICBzd2lwZXIuc2V0R3JhYkN1cnNvcih0cnVlKTtcbiAgICB9XG4gICAgc3dpcGVyLmVtaXQoJ3NsaWRlckZpcnN0TW92ZScsIGUpO1xuICB9XG4gIGxldCBsb29wRml4ZWQ7XG4gIG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICBpZiAoZGF0YS5pc01vdmVkICYmIGRhdGEuYWxsb3dUaHJlc2hvbGRNb3ZlICYmIHByZXZUb3VjaGVzRGlyZWN0aW9uICE9PSBzd2lwZXIudG91Y2hlc0RpcmVjdGlvbiAmJiBpc0xvb3AgJiYgYWxsb3dMb29wRml4ICYmIE1hdGguYWJzKGRpZmYpID49IDEpIHtcbiAgICBPYmplY3QuYXNzaWduKHRvdWNoZXMsIHtcbiAgICAgIHN0YXJ0WDogcGFnZVgsXG4gICAgICBzdGFydFk6IHBhZ2VZLFxuICAgICAgY3VycmVudFg6IHBhZ2VYLFxuICAgICAgY3VycmVudFk6IHBhZ2VZLFxuICAgICAgc3RhcnRUcmFuc2xhdGU6IGRhdGEuY3VycmVudFRyYW5zbGF0ZVxuICAgIH0pO1xuICAgIGRhdGEubG9vcFN3YXBSZXNldCA9IHRydWU7XG4gICAgZGF0YS5zdGFydFRyYW5zbGF0ZSA9IGRhdGEuY3VycmVudFRyYW5zbGF0ZTtcbiAgICByZXR1cm47XG4gIH1cbiAgc3dpcGVyLmVtaXQoJ3NsaWRlck1vdmUnLCBlKTtcbiAgZGF0YS5pc01vdmVkID0gdHJ1ZTtcbiAgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gZGlmZiArIGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gIGxldCBkaXNhYmxlUGFyZW50U3dpcGVyID0gdHJ1ZTtcbiAgbGV0IHJlc2lzdGFuY2VSYXRpbyA9IHBhcmFtcy5yZXNpc3RhbmNlUmF0aW87XG4gIGlmIChwYXJhbXMudG91Y2hSZWxlYXNlT25FZGdlcykge1xuICAgIHJlc2lzdGFuY2VSYXRpbyA9IDA7XG4gIH1cbiAgaWYgKGRpZmYgPiAwKSB7XG4gICAgaWYgKGlzTG9vcCAmJiBhbGxvd0xvb3BGaXggJiYgIWxvb3BGaXhlZCAmJiBkYXRhLmFsbG93VGhyZXNob2xkTW92ZSAmJiBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzID8gc3dpcGVyLm1pblRyYW5zbGF0ZSgpIC0gc3dpcGVyLnNsaWRlc1NpemVzR3JpZFtzd2lwZXIuYWN0aXZlSW5kZXggKyAxXSA6IHN3aXBlci5taW5UcmFuc2xhdGUoKSkpIHtcbiAgICAgIHN3aXBlci5sb29wRml4KHtcbiAgICAgICAgZGlyZWN0aW9uOiAncHJldicsXG4gICAgICAgIHNldFRyYW5zbGF0ZTogdHJ1ZSxcbiAgICAgICAgYWN0aXZlU2xpZGVJbmRleDogMFxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPiBzd2lwZXIubWluVHJhbnNsYXRlKCkpIHtcbiAgICAgIGRpc2FibGVQYXJlbnRTd2lwZXIgPSBmYWxzZTtcbiAgICAgIGlmIChwYXJhbXMucmVzaXN0YW5jZSkge1xuICAgICAgICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBzd2lwZXIubWluVHJhbnNsYXRlKCkgLSAxICsgKC1zd2lwZXIubWluVHJhbnNsYXRlKCkgKyBkYXRhLnN0YXJ0VHJhbnNsYXRlICsgZGlmZikgKiogcmVzaXN0YW5jZVJhdGlvO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChkaWZmIDwgMCkge1xuICAgIGlmIChpc0xvb3AgJiYgYWxsb3dMb29wRml4ICYmICFsb29wRml4ZWQgJiYgZGF0YS5hbGxvd1RocmVzaG9sZE1vdmUgJiYgZGF0YS5jdXJyZW50VHJhbnNsYXRlIDwgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcyA/IHN3aXBlci5tYXhUcmFuc2xhdGUoKSArIHN3aXBlci5zbGlkZXNTaXplc0dyaWRbc3dpcGVyLnNsaWRlc1NpemVzR3JpZC5sZW5ndGggLSAxXSA6IHN3aXBlci5tYXhUcmFuc2xhdGUoKSkpIHtcbiAgICAgIHN3aXBlci5sb29wRml4KHtcbiAgICAgICAgZGlyZWN0aW9uOiAnbmV4dCcsXG4gICAgICAgIHNldFRyYW5zbGF0ZTogdHJ1ZSxcbiAgICAgICAgYWN0aXZlU2xpZGVJbmRleDogc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAocGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyA/IHN3aXBlci5zbGlkZXNQZXJWaWV3RHluYW1pYygpIDogTWF0aC5jZWlsKHBhcnNlRmxvYXQocGFyYW1zLnNsaWRlc1BlclZpZXcsIDEwKSkpXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGRhdGEuY3VycmVudFRyYW5zbGF0ZSA8IHN3aXBlci5tYXhUcmFuc2xhdGUoKSkge1xuICAgICAgZGlzYWJsZVBhcmVudFN3aXBlciA9IGZhbHNlO1xuICAgICAgaWYgKHBhcmFtcy5yZXNpc3RhbmNlKSB7XG4gICAgICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSArIDEgLSAoc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gZGF0YS5zdGFydFRyYW5zbGF0ZSAtIGRpZmYpICoqIHJlc2lzdGFuY2VSYXRpbztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKGRpc2FibGVQYXJlbnRTd2lwZXIpIHtcbiAgICBlLnByZXZlbnRlZEJ5TmVzdGVkU3dpcGVyID0gdHJ1ZTtcbiAgfVxuXG4gIC8vIERpcmVjdGlvbnMgbG9ja3NcbiAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZU5leHQgJiYgc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAnbmV4dCcgJiYgZGF0YS5jdXJyZW50VHJhbnNsYXRlIDwgZGF0YS5zdGFydFRyYW5zbGF0ZSkge1xuICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gIH1cbiAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZVByZXYgJiYgc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAncHJldicgJiYgZGF0YS5jdXJyZW50VHJhbnNsYXRlID4gZGF0YS5zdGFydFRyYW5zbGF0ZSkge1xuICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gIH1cbiAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZVByZXYgJiYgIXN3aXBlci5hbGxvd1NsaWRlTmV4dCkge1xuICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gIH1cblxuICAvLyBUaHJlc2hvbGRcbiAgaWYgKHBhcmFtcy50aHJlc2hvbGQgPiAwKSB7XG4gICAgaWYgKE1hdGguYWJzKGRpZmYpID4gcGFyYW1zLnRocmVzaG9sZCB8fCBkYXRhLmFsbG93VGhyZXNob2xkTW92ZSkge1xuICAgICAgaWYgKCFkYXRhLmFsbG93VGhyZXNob2xkTW92ZSkge1xuICAgICAgICBkYXRhLmFsbG93VGhyZXNob2xkTW92ZSA9IHRydWU7XG4gICAgICAgIHRvdWNoZXMuc3RhcnRYID0gdG91Y2hlcy5jdXJyZW50WDtcbiAgICAgICAgdG91Y2hlcy5zdGFydFkgPSB0b3VjaGVzLmN1cnJlbnRZO1xuICAgICAgICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBkYXRhLnN0YXJ0VHJhbnNsYXRlO1xuICAgICAgICB0b3VjaGVzLmRpZmYgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyB0b3VjaGVzLmN1cnJlbnRYIC0gdG91Y2hlcy5zdGFydFggOiB0b3VjaGVzLmN1cnJlbnRZIC0gdG91Y2hlcy5zdGFydFk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gZGF0YS5zdGFydFRyYW5zbGF0ZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbiAgaWYgKCFwYXJhbXMuZm9sbG93RmluZ2VyIHx8IHBhcmFtcy5jc3NNb2RlKSByZXR1cm47XG5cbiAgLy8gVXBkYXRlIGFjdGl2ZSBpbmRleCBpbiBmcmVlIG1vZGVcbiAgaWYgKHBhcmFtcy5mcmVlTW9kZSAmJiBwYXJhbXMuZnJlZU1vZGUuZW5hYmxlZCAmJiBzd2lwZXIuZnJlZU1vZGUgfHwgcGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MpIHtcbiAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICB9XG4gIGlmIChwYXJhbXMuZnJlZU1vZGUgJiYgcGFyYW1zLmZyZWVNb2RlLmVuYWJsZWQgJiYgc3dpcGVyLmZyZWVNb2RlKSB7XG4gICAgc3dpcGVyLmZyZWVNb2RlLm9uVG91Y2hNb3ZlKCk7XG4gIH1cbiAgLy8gVXBkYXRlIHByb2dyZXNzXG4gIHN3aXBlci51cGRhdGVQcm9ncmVzcyhkYXRhLmN1cnJlbnRUcmFuc2xhdGUpO1xuICAvLyBVcGRhdGUgdHJhbnNsYXRlXG4gIHN3aXBlci5zZXRUcmFuc2xhdGUoZGF0YS5jdXJyZW50VHJhbnNsYXRlKTtcbn1cblxuZnVuY3Rpb24gb25Ub3VjaEVuZChldmVudCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBkYXRhID0gc3dpcGVyLnRvdWNoRXZlbnRzRGF0YTtcbiAgbGV0IGUgPSBldmVudDtcbiAgaWYgKGUub3JpZ2luYWxFdmVudCkgZSA9IGUub3JpZ2luYWxFdmVudDtcbiAgbGV0IHRhcmdldFRvdWNoO1xuICBjb25zdCBpc1RvdWNoRXZlbnQgPSBlLnR5cGUgPT09ICd0b3VjaGVuZCcgfHwgZS50eXBlID09PSAndG91Y2hjYW5jZWwnO1xuICBpZiAoIWlzVG91Y2hFdmVudCkge1xuICAgIGlmIChkYXRhLnRvdWNoSWQgIT09IG51bGwpIHJldHVybjsgLy8gcmV0dXJuIGZyb20gcG9pbnRlciBpZiB3ZSB1c2UgdG91Y2hcbiAgICBpZiAoZS5wb2ludGVySWQgIT09IGRhdGEucG9pbnRlcklkKSByZXR1cm47XG4gICAgdGFyZ2V0VG91Y2ggPSBlO1xuICB9IGVsc2Uge1xuICAgIHRhcmdldFRvdWNoID0gWy4uLmUuY2hhbmdlZFRvdWNoZXNdLmZpbHRlcih0ID0+IHQuaWRlbnRpZmllciA9PT0gZGF0YS50b3VjaElkKVswXTtcbiAgICBpZiAoIXRhcmdldFRvdWNoIHx8IHRhcmdldFRvdWNoLmlkZW50aWZpZXIgIT09IGRhdGEudG91Y2hJZCkgcmV0dXJuO1xuICB9XG4gIGlmIChbJ3BvaW50ZXJjYW5jZWwnLCAncG9pbnRlcm91dCcsICdwb2ludGVybGVhdmUnLCAnY29udGV4dG1lbnUnXS5pbmNsdWRlcyhlLnR5cGUpKSB7XG4gICAgY29uc3QgcHJvY2VlZCA9IFsncG9pbnRlcmNhbmNlbCcsICdjb250ZXh0bWVudSddLmluY2x1ZGVzKGUudHlwZSkgJiYgKHN3aXBlci5icm93c2VyLmlzU2FmYXJpIHx8IHN3aXBlci5icm93c2VyLmlzV2ViVmlldyk7XG4gICAgaWYgKCFwcm9jZWVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG4gIGRhdGEucG9pbnRlcklkID0gbnVsbDtcbiAgZGF0YS50b3VjaElkID0gbnVsbDtcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICB0b3VjaGVzLFxuICAgIHJ0bFRyYW5zbGF0ZTogcnRsLFxuICAgIHNsaWRlc0dyaWQsXG4gICAgZW5hYmxlZFxuICB9ID0gc3dpcGVyO1xuICBpZiAoIWVuYWJsZWQpIHJldHVybjtcbiAgaWYgKCFwYXJhbXMuc2ltdWxhdGVUb3VjaCAmJiBlLnBvaW50ZXJUeXBlID09PSAnbW91c2UnKSByZXR1cm47XG4gIGlmIChkYXRhLmFsbG93VG91Y2hDYWxsYmFja3MpIHtcbiAgICBzd2lwZXIuZW1pdCgndG91Y2hFbmQnLCBlKTtcbiAgfVxuICBkYXRhLmFsbG93VG91Y2hDYWxsYmFja3MgPSBmYWxzZTtcbiAgaWYgKCFkYXRhLmlzVG91Y2hlZCkge1xuICAgIGlmIChkYXRhLmlzTW92ZWQgJiYgcGFyYW1zLmdyYWJDdXJzb3IpIHtcbiAgICAgIHN3aXBlci5zZXRHcmFiQ3Vyc29yKGZhbHNlKTtcbiAgICB9XG4gICAgZGF0YS5pc01vdmVkID0gZmFsc2U7XG4gICAgZGF0YS5zdGFydE1vdmluZyA9IGZhbHNlO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIFJldHVybiBHcmFiIEN1cnNvclxuICBpZiAocGFyYW1zLmdyYWJDdXJzb3IgJiYgZGF0YS5pc01vdmVkICYmIGRhdGEuaXNUb3VjaGVkICYmIChzd2lwZXIuYWxsb3dTbGlkZU5leHQgPT09IHRydWUgfHwgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID09PSB0cnVlKSkge1xuICAgIHN3aXBlci5zZXRHcmFiQ3Vyc29yKGZhbHNlKTtcbiAgfVxuXG4gIC8vIFRpbWUgZGlmZlxuICBjb25zdCB0b3VjaEVuZFRpbWUgPSBub3coKTtcbiAgY29uc3QgdGltZURpZmYgPSB0b3VjaEVuZFRpbWUgLSBkYXRhLnRvdWNoU3RhcnRUaW1lO1xuXG4gIC8vIFRhcCwgZG91YmxlVGFwLCBDbGlja1xuICBpZiAoc3dpcGVyLmFsbG93Q2xpY2spIHtcbiAgICBjb25zdCBwYXRoVHJlZSA9IGUucGF0aCB8fCBlLmNvbXBvc2VkUGF0aCAmJiBlLmNvbXBvc2VkUGF0aCgpO1xuICAgIHN3aXBlci51cGRhdGVDbGlja2VkU2xpZGUocGF0aFRyZWUgJiYgcGF0aFRyZWVbMF0gfHwgZS50YXJnZXQsIHBhdGhUcmVlKTtcbiAgICBzd2lwZXIuZW1pdCgndGFwIGNsaWNrJywgZSk7XG4gICAgaWYgKHRpbWVEaWZmIDwgMzAwICYmIHRvdWNoRW5kVGltZSAtIGRhdGEubGFzdENsaWNrVGltZSA8IDMwMCkge1xuICAgICAgc3dpcGVyLmVtaXQoJ2RvdWJsZVRhcCBkb3VibGVDbGljaycsIGUpO1xuICAgIH1cbiAgfVxuICBkYXRhLmxhc3RDbGlja1RpbWUgPSBub3coKTtcbiAgbmV4dFRpY2soKCkgPT4ge1xuICAgIGlmICghc3dpcGVyLmRlc3Ryb3llZCkgc3dpcGVyLmFsbG93Q2xpY2sgPSB0cnVlO1xuICB9KTtcbiAgaWYgKCFkYXRhLmlzVG91Y2hlZCB8fCAhZGF0YS5pc01vdmVkIHx8ICFzd2lwZXIuc3dpcGVEaXJlY3Rpb24gfHwgdG91Y2hlcy5kaWZmID09PSAwICYmICFkYXRhLmxvb3BTd2FwUmVzZXQgfHwgZGF0YS5jdXJyZW50VHJhbnNsYXRlID09PSBkYXRhLnN0YXJ0VHJhbnNsYXRlICYmICFkYXRhLmxvb3BTd2FwUmVzZXQpIHtcbiAgICBkYXRhLmlzVG91Y2hlZCA9IGZhbHNlO1xuICAgIGRhdGEuaXNNb3ZlZCA9IGZhbHNlO1xuICAgIGRhdGEuc3RhcnRNb3ZpbmcgPSBmYWxzZTtcbiAgICByZXR1cm47XG4gIH1cbiAgZGF0YS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgZGF0YS5pc01vdmVkID0gZmFsc2U7XG4gIGRhdGEuc3RhcnRNb3ZpbmcgPSBmYWxzZTtcbiAgbGV0IGN1cnJlbnRQb3M7XG4gIGlmIChwYXJhbXMuZm9sbG93RmluZ2VyKSB7XG4gICAgY3VycmVudFBvcyA9IHJ0bCA/IHN3aXBlci50cmFuc2xhdGUgOiAtc3dpcGVyLnRyYW5zbGF0ZTtcbiAgfSBlbHNlIHtcbiAgICBjdXJyZW50UG9zID0gLWRhdGEuY3VycmVudFRyYW5zbGF0ZTtcbiAgfVxuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHBhcmFtcy5mcmVlTW9kZSAmJiBwYXJhbXMuZnJlZU1vZGUuZW5hYmxlZCkge1xuICAgIHN3aXBlci5mcmVlTW9kZS5vblRvdWNoRW5kKHtcbiAgICAgIGN1cnJlbnRQb3NcbiAgICB9KTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBGaW5kIGN1cnJlbnQgc2xpZGVcbiAgY29uc3Qgc3dpcGVUb0xhc3QgPSBjdXJyZW50UG9zID49IC1zd2lwZXIubWF4VHJhbnNsYXRlKCkgJiYgIXN3aXBlci5wYXJhbXMubG9vcDtcbiAgbGV0IHN0b3BJbmRleCA9IDA7XG4gIGxldCBncm91cFNpemUgPSBzd2lwZXIuc2xpZGVzU2l6ZXNHcmlkWzBdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlc0dyaWQubGVuZ3RoOyBpICs9IGkgPCBwYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwID8gMSA6IHBhcmFtcy5zbGlkZXNQZXJHcm91cCkge1xuICAgIGNvbnN0IGluY3JlbWVudCA9IGkgPCBwYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwIC0gMSA/IDEgOiBwYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG4gICAgaWYgKHR5cGVvZiBzbGlkZXNHcmlkW2kgKyBpbmNyZW1lbnRdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgaWYgKHN3aXBlVG9MYXN0IHx8IGN1cnJlbnRQb3MgPj0gc2xpZGVzR3JpZFtpXSAmJiBjdXJyZW50UG9zIDwgc2xpZGVzR3JpZFtpICsgaW5jcmVtZW50XSkge1xuICAgICAgICBzdG9wSW5kZXggPSBpO1xuICAgICAgICBncm91cFNpemUgPSBzbGlkZXNHcmlkW2kgKyBpbmNyZW1lbnRdIC0gc2xpZGVzR3JpZFtpXTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHN3aXBlVG9MYXN0IHx8IGN1cnJlbnRQb3MgPj0gc2xpZGVzR3JpZFtpXSkge1xuICAgICAgc3RvcEluZGV4ID0gaTtcbiAgICAgIGdyb3VwU2l6ZSA9IHNsaWRlc0dyaWRbc2xpZGVzR3JpZC5sZW5ndGggLSAxXSAtIHNsaWRlc0dyaWRbc2xpZGVzR3JpZC5sZW5ndGggLSAyXTtcbiAgICB9XG4gIH1cbiAgbGV0IHJld2luZEZpcnN0SW5kZXggPSBudWxsO1xuICBsZXQgcmV3aW5kTGFzdEluZGV4ID0gbnVsbDtcbiAgaWYgKHBhcmFtcy5yZXdpbmQpIHtcbiAgICBpZiAoc3dpcGVyLmlzQmVnaW5uaW5nKSB7XG4gICAgICByZXdpbmRMYXN0SW5kZXggPSBwYXJhbXMudmlydHVhbCAmJiBwYXJhbXMudmlydHVhbC5lbmFibGVkICYmIHN3aXBlci52aXJ0dWFsID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCAtIDEgOiBzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIDE7XG4gICAgfSBlbHNlIGlmIChzd2lwZXIuaXNFbmQpIHtcbiAgICAgIHJld2luZEZpcnN0SW5kZXggPSAwO1xuICAgIH1cbiAgfVxuICAvLyBGaW5kIGN1cnJlbnQgc2xpZGUgc2l6ZVxuICBjb25zdCByYXRpbyA9IChjdXJyZW50UG9zIC0gc2xpZGVzR3JpZFtzdG9wSW5kZXhdKSAvIGdyb3VwU2l6ZTtcbiAgY29uc3QgaW5jcmVtZW50ID0gc3RvcEluZGV4IDwgcGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCAtIDEgPyAxIDogcGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuICBpZiAodGltZURpZmYgPiBwYXJhbXMubG9uZ1N3aXBlc01zKSB7XG4gICAgLy8gTG9uZyB0b3VjaGVzXG4gICAgaWYgKCFwYXJhbXMubG9uZ1N3aXBlcykge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ25leHQnKSB7XG4gICAgICBpZiAocmF0aW8gPj0gcGFyYW1zLmxvbmdTd2lwZXNSYXRpbykgc3dpcGVyLnNsaWRlVG8ocGFyYW1zLnJld2luZCAmJiBzd2lwZXIuaXNFbmQgPyByZXdpbmRGaXJzdEluZGV4IDogc3RvcEluZGV4ICsgaW5jcmVtZW50KTtlbHNlIHN3aXBlci5zbGlkZVRvKHN0b3BJbmRleCk7XG4gICAgfVxuICAgIGlmIChzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPT09ICdwcmV2Jykge1xuICAgICAgaWYgKHJhdGlvID4gMSAtIHBhcmFtcy5sb25nU3dpcGVzUmF0aW8pIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4ICsgaW5jcmVtZW50KTtcbiAgICAgIH0gZWxzZSBpZiAocmV3aW5kTGFzdEluZGV4ICE9PSBudWxsICYmIHJhdGlvIDwgMCAmJiBNYXRoLmFicyhyYXRpbykgPiBwYXJhbXMubG9uZ1N3aXBlc1JhdGlvKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHJld2luZExhc3RJbmRleCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXgpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBTaG9ydCBzd2lwZXNcbiAgICBpZiAoIXBhcmFtcy5zaG9ydFN3aXBlcykge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgaXNOYXZCdXR0b25UYXJnZXQgPSBzd2lwZXIubmF2aWdhdGlvbiAmJiAoZS50YXJnZXQgPT09IHN3aXBlci5uYXZpZ2F0aW9uLm5leHRFbCB8fCBlLnRhcmdldCA9PT0gc3dpcGVyLm5hdmlnYXRpb24ucHJldkVsKTtcbiAgICBpZiAoIWlzTmF2QnV0dG9uVGFyZ2V0KSB7XG4gICAgICBpZiAoc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAnbmV4dCcpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8ocmV3aW5kRmlyc3RJbmRleCAhPT0gbnVsbCA/IHJld2luZEZpcnN0SW5kZXggOiBzdG9wSW5kZXggKyBpbmNyZW1lbnQpO1xuICAgICAgfVxuICAgICAgaWYgKHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ3ByZXYnKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHJld2luZExhc3RJbmRleCAhPT0gbnVsbCA/IHJld2luZExhc3RJbmRleCA6IHN0b3BJbmRleCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChlLnRhcmdldCA9PT0gc3dpcGVyLm5hdmlnYXRpb24ubmV4dEVsKSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXggKyBpbmNyZW1lbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXgpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBvblJlc2l6ZSgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICBlbFxuICB9ID0gc3dpcGVyO1xuICBpZiAoZWwgJiYgZWwub2Zmc2V0V2lkdGggPT09IDApIHJldHVybjtcblxuICAvLyBCcmVha3BvaW50c1xuICBpZiAocGFyYW1zLmJyZWFrcG9pbnRzKSB7XG4gICAgc3dpcGVyLnNldEJyZWFrcG9pbnQoKTtcbiAgfVxuXG4gIC8vIFNhdmUgbG9ja3NcbiAgY29uc3Qge1xuICAgIGFsbG93U2xpZGVOZXh0LFxuICAgIGFsbG93U2xpZGVQcmV2LFxuICAgIHNuYXBHcmlkXG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IGlzVmlydHVhbCA9IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkO1xuXG4gIC8vIERpc2FibGUgbG9ja3Mgb24gcmVzaXplXG4gIHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9IHRydWU7XG4gIHN3aXBlci5hbGxvd1NsaWRlUHJldiA9IHRydWU7XG4gIHN3aXBlci51cGRhdGVTaXplKCk7XG4gIHN3aXBlci51cGRhdGVTbGlkZXMoKTtcbiAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgY29uc3QgaXNWaXJ0dWFsTG9vcCA9IGlzVmlydHVhbCAmJiBwYXJhbXMubG9vcDtcbiAgaWYgKChwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nIHx8IHBhcmFtcy5zbGlkZXNQZXJWaWV3ID4gMSkgJiYgc3dpcGVyLmlzRW5kICYmICFzd2lwZXIuaXNCZWdpbm5pbmcgJiYgIXN3aXBlci5wYXJhbXMuY2VudGVyZWRTbGlkZXMgJiYgIWlzVmlydHVhbExvb3ApIHtcbiAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIDEsIDAsIGZhbHNlLCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wICYmICFpc1ZpcnR1YWwpIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvTG9vcChzd2lwZXIucmVhbEluZGV4LCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCwgMCwgZmFsc2UsIHRydWUpO1xuICAgIH1cbiAgfVxuICBpZiAoc3dpcGVyLmF1dG9wbGF5ICYmIHN3aXBlci5hdXRvcGxheS5ydW5uaW5nICYmIHN3aXBlci5hdXRvcGxheS5wYXVzZWQpIHtcbiAgICBjbGVhclRpbWVvdXQoc3dpcGVyLmF1dG9wbGF5LnJlc2l6ZVRpbWVvdXQpO1xuICAgIHN3aXBlci5hdXRvcGxheS5yZXNpemVUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBpZiAoc3dpcGVyLmF1dG9wbGF5ICYmIHN3aXBlci5hdXRvcGxheS5ydW5uaW5nICYmIHN3aXBlci5hdXRvcGxheS5wYXVzZWQpIHtcbiAgICAgICAgc3dpcGVyLmF1dG9wbGF5LnJlc3VtZSgpO1xuICAgICAgfVxuICAgIH0sIDUwMCk7XG4gIH1cbiAgLy8gUmV0dXJuIGxvY2tzIGFmdGVyIHJlc2l6ZVxuICBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPSBhbGxvd1NsaWRlUHJldjtcbiAgc3dpcGVyLmFsbG93U2xpZGVOZXh0ID0gYWxsb3dTbGlkZU5leHQ7XG4gIGlmIChzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc25hcEdyaWQgIT09IHN3aXBlci5zbmFwR3JpZCkge1xuICAgIHN3aXBlci5jaGVja092ZXJmbG93KCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gb25DbGljayhlKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGlmICghc3dpcGVyLmVuYWJsZWQpIHJldHVybjtcbiAgaWYgKCFzd2lwZXIuYWxsb3dDbGljaykge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLnByZXZlbnRDbGlja3MpIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5wcmV2ZW50Q2xpY2tzUHJvcGFnYXRpb24gJiYgc3dpcGVyLmFuaW1hdGluZykge1xuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIG9uU2Nyb2xsKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgd3JhcHBlckVsLFxuICAgIHJ0bFRyYW5zbGF0ZSxcbiAgICBlbmFibGVkXG4gIH0gPSBzd2lwZXI7XG4gIGlmICghZW5hYmxlZCkgcmV0dXJuO1xuICBzd2lwZXIucHJldmlvdXNUcmFuc2xhdGUgPSBzd2lwZXIudHJhbnNsYXRlO1xuICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgc3dpcGVyLnRyYW5zbGF0ZSA9IC13cmFwcGVyRWwuc2Nyb2xsTGVmdDtcbiAgfSBlbHNlIHtcbiAgICBzd2lwZXIudHJhbnNsYXRlID0gLXdyYXBwZXJFbC5zY3JvbGxUb3A7XG4gIH1cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gIGlmIChzd2lwZXIudHJhbnNsYXRlID09PSAwKSBzd2lwZXIudHJhbnNsYXRlID0gMDtcbiAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gIGxldCBuZXdQcm9ncmVzcztcbiAgY29uc3QgdHJhbnNsYXRlc0RpZmYgPSBzd2lwZXIubWF4VHJhbnNsYXRlKCkgLSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG4gIGlmICh0cmFuc2xhdGVzRGlmZiA9PT0gMCkge1xuICAgIG5ld1Byb2dyZXNzID0gMDtcbiAgfSBlbHNlIHtcbiAgICBuZXdQcm9ncmVzcyA9IChzd2lwZXIudHJhbnNsYXRlIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSAvIHRyYW5zbGF0ZXNEaWZmO1xuICB9XG4gIGlmIChuZXdQcm9ncmVzcyAhPT0gc3dpcGVyLnByb2dyZXNzKSB7XG4gICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKHJ0bFRyYW5zbGF0ZSA/IC1zd2lwZXIudHJhbnNsYXRlIDogc3dpcGVyLnRyYW5zbGF0ZSk7XG4gIH1cbiAgc3dpcGVyLmVtaXQoJ3NldFRyYW5zbGF0ZScsIHN3aXBlci50cmFuc2xhdGUsIGZhbHNlKTtcbn1cblxuZnVuY3Rpb24gb25Mb2FkKGUpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgcHJvY2Vzc0xhenlQcmVsb2FkZXIoc3dpcGVyLCBlLnRhcmdldCk7XG4gIGlmIChzd2lwZXIucGFyYW1zLmNzc01vZGUgfHwgc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ICE9PSAnYXV0bycgJiYgIXN3aXBlci5wYXJhbXMuYXV0b0hlaWdodCkge1xuICAgIHJldHVybjtcbiAgfVxuICBzd2lwZXIudXBkYXRlKCk7XG59XG5cbmZ1bmN0aW9uIG9uRG9jdW1lbnRUb3VjaFN0YXJ0KCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBpZiAoc3dpcGVyLmRvY3VtZW50VG91Y2hIYW5kbGVyUHJvY2VlZGVkKSByZXR1cm47XG4gIHN3aXBlci5kb2N1bWVudFRvdWNoSGFuZGxlclByb2NlZWRlZCA9IHRydWU7XG4gIGlmIChzd2lwZXIucGFyYW1zLnRvdWNoUmVsZWFzZU9uRWRnZXMpIHtcbiAgICBzd2lwZXIuZWwuc3R5bGUudG91Y2hBY3Rpb24gPSAnYXV0byc7XG4gIH1cbn1cblxuY29uc3QgZXZlbnRzID0gKHN3aXBlciwgbWV0aG9kKSA9PiB7XG4gIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICBlbCxcbiAgICB3cmFwcGVyRWwsXG4gICAgZGV2aWNlXG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IGNhcHR1cmUgPSAhIXBhcmFtcy5uZXN0ZWQ7XG4gIGNvbnN0IGRvbU1ldGhvZCA9IG1ldGhvZCA9PT0gJ29uJyA/ICdhZGRFdmVudExpc3RlbmVyJyA6ICdyZW1vdmVFdmVudExpc3RlbmVyJztcbiAgY29uc3Qgc3dpcGVyTWV0aG9kID0gbWV0aG9kO1xuICBpZiAoIWVsIHx8IHR5cGVvZiBlbCA9PT0gJ3N0cmluZycpIHJldHVybjtcblxuICAvLyBUb3VjaCBFdmVudHNcbiAgZG9jdW1lbnRbZG9tTWV0aG9kXSgndG91Y2hzdGFydCcsIHN3aXBlci5vbkRvY3VtZW50VG91Y2hTdGFydCwge1xuICAgIHBhc3NpdmU6IGZhbHNlLFxuICAgIGNhcHR1cmVcbiAgfSk7XG4gIGVsW2RvbU1ldGhvZF0oJ3RvdWNoc3RhcnQnLCBzd2lwZXIub25Ub3VjaFN0YXJ0LCB7XG4gICAgcGFzc2l2ZTogZmFsc2VcbiAgfSk7XG4gIGVsW2RvbU1ldGhvZF0oJ3BvaW50ZXJkb3duJywgc3dpcGVyLm9uVG91Y2hTdGFydCwge1xuICAgIHBhc3NpdmU6IGZhbHNlXG4gIH0pO1xuICBkb2N1bWVudFtkb21NZXRob2RdKCd0b3VjaG1vdmUnLCBzd2lwZXIub25Ub3VjaE1vdmUsIHtcbiAgICBwYXNzaXZlOiBmYWxzZSxcbiAgICBjYXB0dXJlXG4gIH0pO1xuICBkb2N1bWVudFtkb21NZXRob2RdKCdwb2ludGVybW92ZScsIHN3aXBlci5vblRvdWNoTW92ZSwge1xuICAgIHBhc3NpdmU6IGZhbHNlLFxuICAgIGNhcHR1cmVcbiAgfSk7XG4gIGRvY3VtZW50W2RvbU1ldGhvZF0oJ3RvdWNoZW5kJywgc3dpcGVyLm9uVG91Y2hFbmQsIHtcbiAgICBwYXNzaXZlOiB0cnVlXG4gIH0pO1xuICBkb2N1bWVudFtkb21NZXRob2RdKCdwb2ludGVydXAnLCBzd2lwZXIub25Ub3VjaEVuZCwge1xuICAgIHBhc3NpdmU6IHRydWVcbiAgfSk7XG4gIGRvY3VtZW50W2RvbU1ldGhvZF0oJ3BvaW50ZXJjYW5jZWwnLCBzd2lwZXIub25Ub3VjaEVuZCwge1xuICAgIHBhc3NpdmU6IHRydWVcbiAgfSk7XG4gIGRvY3VtZW50W2RvbU1ldGhvZF0oJ3RvdWNoY2FuY2VsJywgc3dpcGVyLm9uVG91Y2hFbmQsIHtcbiAgICBwYXNzaXZlOiB0cnVlXG4gIH0pO1xuICBkb2N1bWVudFtkb21NZXRob2RdKCdwb2ludGVyb3V0Jywgc3dpcGVyLm9uVG91Y2hFbmQsIHtcbiAgICBwYXNzaXZlOiB0cnVlXG4gIH0pO1xuICBkb2N1bWVudFtkb21NZXRob2RdKCdwb2ludGVybGVhdmUnLCBzd2lwZXIub25Ub3VjaEVuZCwge1xuICAgIHBhc3NpdmU6IHRydWVcbiAgfSk7XG4gIGRvY3VtZW50W2RvbU1ldGhvZF0oJ2NvbnRleHRtZW51Jywgc3dpcGVyLm9uVG91Y2hFbmQsIHtcbiAgICBwYXNzaXZlOiB0cnVlXG4gIH0pO1xuXG4gIC8vIFByZXZlbnQgTGlua3MgQ2xpY2tzXG4gIGlmIChwYXJhbXMucHJldmVudENsaWNrcyB8fCBwYXJhbXMucHJldmVudENsaWNrc1Byb3BhZ2F0aW9uKSB7XG4gICAgZWxbZG9tTWV0aG9kXSgnY2xpY2snLCBzd2lwZXIub25DbGljaywgdHJ1ZSk7XG4gIH1cbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgd3JhcHBlckVsW2RvbU1ldGhvZF0oJ3Njcm9sbCcsIHN3aXBlci5vblNjcm9sbCk7XG4gIH1cblxuICAvLyBSZXNpemUgaGFuZGxlclxuICBpZiAocGFyYW1zLnVwZGF0ZU9uV2luZG93UmVzaXplKSB7XG4gICAgc3dpcGVyW3N3aXBlck1ldGhvZF0oZGV2aWNlLmlvcyB8fCBkZXZpY2UuYW5kcm9pZCA/ICdyZXNpemUgb3JpZW50YXRpb25jaGFuZ2Ugb2JzZXJ2ZXJVcGRhdGUnIDogJ3Jlc2l6ZSBvYnNlcnZlclVwZGF0ZScsIG9uUmVzaXplLCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBzd2lwZXJbc3dpcGVyTWV0aG9kXSgnb2JzZXJ2ZXJVcGRhdGUnLCBvblJlc2l6ZSwgdHJ1ZSk7XG4gIH1cblxuICAvLyBJbWFnZXMgbG9hZGVyXG4gIGVsW2RvbU1ldGhvZF0oJ2xvYWQnLCBzd2lwZXIub25Mb2FkLCB7XG4gICAgY2FwdHVyZTogdHJ1ZVxuICB9KTtcbn07XG5mdW5jdGlvbiBhdHRhY2hFdmVudHMoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXNcbiAgfSA9IHN3aXBlcjtcbiAgc3dpcGVyLm9uVG91Y2hTdGFydCA9IG9uVG91Y2hTdGFydC5iaW5kKHN3aXBlcik7XG4gIHN3aXBlci5vblRvdWNoTW92ZSA9IG9uVG91Y2hNb3ZlLmJpbmQoc3dpcGVyKTtcbiAgc3dpcGVyLm9uVG91Y2hFbmQgPSBvblRvdWNoRW5kLmJpbmQoc3dpcGVyKTtcbiAgc3dpcGVyLm9uRG9jdW1lbnRUb3VjaFN0YXJ0ID0gb25Eb2N1bWVudFRvdWNoU3RhcnQuYmluZChzd2lwZXIpO1xuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICBzd2lwZXIub25TY3JvbGwgPSBvblNjcm9sbC5iaW5kKHN3aXBlcik7XG4gIH1cbiAgc3dpcGVyLm9uQ2xpY2sgPSBvbkNsaWNrLmJpbmQoc3dpcGVyKTtcbiAgc3dpcGVyLm9uTG9hZCA9IG9uTG9hZC5iaW5kKHN3aXBlcik7XG4gIGV2ZW50cyhzd2lwZXIsICdvbicpO1xufVxuZnVuY3Rpb24gZGV0YWNoRXZlbnRzKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBldmVudHMoc3dpcGVyLCAnb2ZmJyk7XG59XG52YXIgZXZlbnRzJDEgPSB7XG4gIGF0dGFjaEV2ZW50cyxcbiAgZGV0YWNoRXZlbnRzXG59O1xuXG5jb25zdCBpc0dyaWRFbmFibGVkID0gKHN3aXBlciwgcGFyYW1zKSA9PiB7XG4gIHJldHVybiBzd2lwZXIuZ3JpZCAmJiBwYXJhbXMuZ3JpZCAmJiBwYXJhbXMuZ3JpZC5yb3dzID4gMTtcbn07XG5mdW5jdGlvbiBzZXRCcmVha3BvaW50KCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcmVhbEluZGV4LFxuICAgIGluaXRpYWxpemVkLFxuICAgIHBhcmFtcyxcbiAgICBlbFxuICB9ID0gc3dpcGVyO1xuICBjb25zdCBicmVha3BvaW50cyA9IHBhcmFtcy5icmVha3BvaW50cztcbiAgaWYgKCFicmVha3BvaW50cyB8fCBicmVha3BvaW50cyAmJiBPYmplY3Qua2V5cyhicmVha3BvaW50cykubGVuZ3RoID09PSAwKSByZXR1cm47XG5cbiAgLy8gR2V0IGJyZWFrcG9pbnQgZm9yIHdpbmRvdyB3aWR0aCBhbmQgdXBkYXRlIHBhcmFtZXRlcnNcbiAgY29uc3QgYnJlYWtwb2ludCA9IHN3aXBlci5nZXRCcmVha3BvaW50KGJyZWFrcG9pbnRzLCBzd2lwZXIucGFyYW1zLmJyZWFrcG9pbnRzQmFzZSwgc3dpcGVyLmVsKTtcbiAgaWYgKCFicmVha3BvaW50IHx8IHN3aXBlci5jdXJyZW50QnJlYWtwb2ludCA9PT0gYnJlYWtwb2ludCkgcmV0dXJuO1xuICBjb25zdCBicmVha3BvaW50T25seVBhcmFtcyA9IGJyZWFrcG9pbnQgaW4gYnJlYWtwb2ludHMgPyBicmVha3BvaW50c1ticmVha3BvaW50XSA6IHVuZGVmaW5lZDtcbiAgY29uc3QgYnJlYWtwb2ludFBhcmFtcyA9IGJyZWFrcG9pbnRPbmx5UGFyYW1zIHx8IHN3aXBlci5vcmlnaW5hbFBhcmFtcztcbiAgY29uc3Qgd2FzTXVsdGlSb3cgPSBpc0dyaWRFbmFibGVkKHN3aXBlciwgcGFyYW1zKTtcbiAgY29uc3QgaXNNdWx0aVJvdyA9IGlzR3JpZEVuYWJsZWQoc3dpcGVyLCBicmVha3BvaW50UGFyYW1zKTtcbiAgY29uc3Qgd2FzR3JhYkN1cnNvciA9IHN3aXBlci5wYXJhbXMuZ3JhYkN1cnNvcjtcbiAgY29uc3QgaXNHcmFiQ3Vyc29yID0gYnJlYWtwb2ludFBhcmFtcy5ncmFiQ3Vyc29yO1xuICBjb25zdCB3YXNFbmFibGVkID0gcGFyYW1zLmVuYWJsZWQ7XG4gIGlmICh3YXNNdWx0aVJvdyAmJiAhaXNNdWx0aVJvdykge1xuICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoYCR7cGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9Z3JpZGAsIGAke3BhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfWdyaWQtY29sdW1uYCk7XG4gICAgc3dpcGVyLmVtaXRDb250YWluZXJDbGFzc2VzKCk7XG4gIH0gZWxzZSBpZiAoIXdhc011bHRpUm93ICYmIGlzTXVsdGlSb3cpIHtcbiAgICBlbC5jbGFzc0xpc3QuYWRkKGAke3BhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfWdyaWRgKTtcbiAgICBpZiAoYnJlYWtwb2ludFBhcmFtcy5ncmlkLmZpbGwgJiYgYnJlYWtwb2ludFBhcmFtcy5ncmlkLmZpbGwgPT09ICdjb2x1bW4nIHx8ICFicmVha3BvaW50UGFyYW1zLmdyaWQuZmlsbCAmJiBwYXJhbXMuZ3JpZC5maWxsID09PSAnY29sdW1uJykge1xuICAgICAgZWwuY2xhc3NMaXN0LmFkZChgJHtwYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc31ncmlkLWNvbHVtbmApO1xuICAgIH1cbiAgICBzd2lwZXIuZW1pdENvbnRhaW5lckNsYXNzZXMoKTtcbiAgfVxuICBpZiAod2FzR3JhYkN1cnNvciAmJiAhaXNHcmFiQ3Vyc29yKSB7XG4gICAgc3dpcGVyLnVuc2V0R3JhYkN1cnNvcigpO1xuICB9IGVsc2UgaWYgKCF3YXNHcmFiQ3Vyc29yICYmIGlzR3JhYkN1cnNvcikge1xuICAgIHN3aXBlci5zZXRHcmFiQ3Vyc29yKCk7XG4gIH1cblxuICAvLyBUb2dnbGUgbmF2aWdhdGlvbiwgcGFnaW5hdGlvbiwgc2Nyb2xsYmFyXG4gIFsnbmF2aWdhdGlvbicsICdwYWdpbmF0aW9uJywgJ3Njcm9sbGJhciddLmZvckVhY2gocHJvcCA9PiB7XG4gICAgaWYgKHR5cGVvZiBicmVha3BvaW50UGFyYW1zW3Byb3BdID09PSAndW5kZWZpbmVkJykgcmV0dXJuO1xuICAgIGNvbnN0IHdhc01vZHVsZUVuYWJsZWQgPSBwYXJhbXNbcHJvcF0gJiYgcGFyYW1zW3Byb3BdLmVuYWJsZWQ7XG4gICAgY29uc3QgaXNNb2R1bGVFbmFibGVkID0gYnJlYWtwb2ludFBhcmFtc1twcm9wXSAmJiBicmVha3BvaW50UGFyYW1zW3Byb3BdLmVuYWJsZWQ7XG4gICAgaWYgKHdhc01vZHVsZUVuYWJsZWQgJiYgIWlzTW9kdWxlRW5hYmxlZCkge1xuICAgICAgc3dpcGVyW3Byb3BdLmRpc2FibGUoKTtcbiAgICB9XG4gICAgaWYgKCF3YXNNb2R1bGVFbmFibGVkICYmIGlzTW9kdWxlRW5hYmxlZCkge1xuICAgICAgc3dpcGVyW3Byb3BdLmVuYWJsZSgpO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGRpcmVjdGlvbkNoYW5nZWQgPSBicmVha3BvaW50UGFyYW1zLmRpcmVjdGlvbiAmJiBicmVha3BvaW50UGFyYW1zLmRpcmVjdGlvbiAhPT0gcGFyYW1zLmRpcmVjdGlvbjtcbiAgY29uc3QgbmVlZHNSZUxvb3AgPSBwYXJhbXMubG9vcCAmJiAoYnJlYWtwb2ludFBhcmFtcy5zbGlkZXNQZXJWaWV3ICE9PSBwYXJhbXMuc2xpZGVzUGVyVmlldyB8fCBkaXJlY3Rpb25DaGFuZ2VkKTtcbiAgY29uc3Qgd2FzTG9vcCA9IHBhcmFtcy5sb29wO1xuICBpZiAoZGlyZWN0aW9uQ2hhbmdlZCAmJiBpbml0aWFsaXplZCkge1xuICAgIHN3aXBlci5jaGFuZ2VEaXJlY3Rpb24oKTtcbiAgfVxuICBleHRlbmQoc3dpcGVyLnBhcmFtcywgYnJlYWtwb2ludFBhcmFtcyk7XG4gIGNvbnN0IGlzRW5hYmxlZCA9IHN3aXBlci5wYXJhbXMuZW5hYmxlZDtcbiAgY29uc3QgaGFzTG9vcCA9IHN3aXBlci5wYXJhbXMubG9vcDtcbiAgT2JqZWN0LmFzc2lnbihzd2lwZXIsIHtcbiAgICBhbGxvd1RvdWNoTW92ZTogc3dpcGVyLnBhcmFtcy5hbGxvd1RvdWNoTW92ZSxcbiAgICBhbGxvd1NsaWRlTmV4dDogc3dpcGVyLnBhcmFtcy5hbGxvd1NsaWRlTmV4dCxcbiAgICBhbGxvd1NsaWRlUHJldjogc3dpcGVyLnBhcmFtcy5hbGxvd1NsaWRlUHJldlxuICB9KTtcbiAgaWYgKHdhc0VuYWJsZWQgJiYgIWlzRW5hYmxlZCkge1xuICAgIHN3aXBlci5kaXNhYmxlKCk7XG4gIH0gZWxzZSBpZiAoIXdhc0VuYWJsZWQgJiYgaXNFbmFibGVkKSB7XG4gICAgc3dpcGVyLmVuYWJsZSgpO1xuICB9XG4gIHN3aXBlci5jdXJyZW50QnJlYWtwb2ludCA9IGJyZWFrcG9pbnQ7XG4gIHN3aXBlci5lbWl0KCdfYmVmb3JlQnJlYWtwb2ludCcsIGJyZWFrcG9pbnRQYXJhbXMpO1xuICBpZiAoaW5pdGlhbGl6ZWQpIHtcbiAgICBpZiAobmVlZHNSZUxvb3ApIHtcbiAgICAgIHN3aXBlci5sb29wRGVzdHJveSgpO1xuICAgICAgc3dpcGVyLmxvb3BDcmVhdGUocmVhbEluZGV4KTtcbiAgICAgIHN3aXBlci51cGRhdGVTbGlkZXMoKTtcbiAgICB9IGVsc2UgaWYgKCF3YXNMb29wICYmIGhhc0xvb3ApIHtcbiAgICAgIHN3aXBlci5sb29wQ3JlYXRlKHJlYWxJbmRleCk7XG4gICAgICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG4gICAgfSBlbHNlIGlmICh3YXNMb29wICYmICFoYXNMb29wKSB7XG4gICAgICBzd2lwZXIubG9vcERlc3Ryb3koKTtcbiAgICB9XG4gIH1cbiAgc3dpcGVyLmVtaXQoJ2JyZWFrcG9pbnQnLCBicmVha3BvaW50UGFyYW1zKTtcbn1cblxuZnVuY3Rpb24gZ2V0QnJlYWtwb2ludChicmVha3BvaW50cywgYmFzZSwgY29udGFpbmVyRWwpIHtcbiAgaWYgKGJhc2UgPT09IHZvaWQgMCkge1xuICAgIGJhc2UgPSAnd2luZG93JztcbiAgfVxuICBpZiAoIWJyZWFrcG9pbnRzIHx8IGJhc2UgPT09ICdjb250YWluZXInICYmICFjb250YWluZXJFbCkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgbGV0IGJyZWFrcG9pbnQgPSBmYWxzZTtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGNvbnN0IGN1cnJlbnRIZWlnaHQgPSBiYXNlID09PSAnd2luZG93JyA/IHdpbmRvdy5pbm5lckhlaWdodCA6IGNvbnRhaW5lckVsLmNsaWVudEhlaWdodDtcbiAgY29uc3QgcG9pbnRzID0gT2JqZWN0LmtleXMoYnJlYWtwb2ludHMpLm1hcChwb2ludCA9PiB7XG4gICAgaWYgKHR5cGVvZiBwb2ludCA9PT0gJ3N0cmluZycgJiYgcG9pbnQuaW5kZXhPZignQCcpID09PSAwKSB7XG4gICAgICBjb25zdCBtaW5SYXRpbyA9IHBhcnNlRmxvYXQocG9pbnQuc3Vic3RyKDEpKTtcbiAgICAgIGNvbnN0IHZhbHVlID0gY3VycmVudEhlaWdodCAqIG1pblJhdGlvO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIHBvaW50XG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWU6IHBvaW50LFxuICAgICAgcG9pbnRcbiAgICB9O1xuICB9KTtcbiAgcG9pbnRzLnNvcnQoKGEsIGIpID0+IHBhcnNlSW50KGEudmFsdWUsIDEwKSAtIHBhcnNlSW50KGIudmFsdWUsIDEwKSk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgY29uc3Qge1xuICAgICAgcG9pbnQsXG4gICAgICB2YWx1ZVxuICAgIH0gPSBwb2ludHNbaV07XG4gICAgaWYgKGJhc2UgPT09ICd3aW5kb3cnKSB7XG4gICAgICBpZiAod2luZG93Lm1hdGNoTWVkaWEoYChtaW4td2lkdGg6ICR7dmFsdWV9cHgpYCkubWF0Y2hlcykge1xuICAgICAgICBicmVha3BvaW50ID0gcG9pbnQ7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh2YWx1ZSA8PSBjb250YWluZXJFbC5jbGllbnRXaWR0aCkge1xuICAgICAgYnJlYWtwb2ludCA9IHBvaW50O1xuICAgIH1cbiAgfVxuICByZXR1cm4gYnJlYWtwb2ludCB8fCAnbWF4Jztcbn1cblxudmFyIGJyZWFrcG9pbnRzID0ge1xuICBzZXRCcmVha3BvaW50LFxuICBnZXRCcmVha3BvaW50XG59O1xuXG5mdW5jdGlvbiBwcmVwYXJlQ2xhc3NlcyhlbnRyaWVzLCBwcmVmaXgpIHtcbiAgY29uc3QgcmVzdWx0Q2xhc3NlcyA9IFtdO1xuICBlbnRyaWVzLmZvckVhY2goaXRlbSA9PiB7XG4gICAgaWYgKHR5cGVvZiBpdGVtID09PSAnb2JqZWN0Jykge1xuICAgICAgT2JqZWN0LmtleXMoaXRlbSkuZm9yRWFjaChjbGFzc05hbWVzID0+IHtcbiAgICAgICAgaWYgKGl0ZW1bY2xhc3NOYW1lc10pIHtcbiAgICAgICAgICByZXN1bHRDbGFzc2VzLnB1c2gocHJlZml4ICsgY2xhc3NOYW1lcyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGl0ZW0gPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXN1bHRDbGFzc2VzLnB1c2gocHJlZml4ICsgaXRlbSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc3VsdENsYXNzZXM7XG59XG5mdW5jdGlvbiBhZGRDbGFzc2VzKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgY2xhc3NOYW1lcyxcbiAgICBwYXJhbXMsXG4gICAgcnRsLFxuICAgIGVsLFxuICAgIGRldmljZVxuICB9ID0gc3dpcGVyO1xuICAvLyBwcmV0dGllci1pZ25vcmVcbiAgY29uc3Qgc3VmZml4ZXMgPSBwcmVwYXJlQ2xhc3NlcyhbJ2luaXRpYWxpemVkJywgcGFyYW1zLmRpcmVjdGlvbiwge1xuICAgICdmcmVlLW1vZGUnOiBzd2lwZXIucGFyYW1zLmZyZWVNb2RlICYmIHBhcmFtcy5mcmVlTW9kZS5lbmFibGVkXG4gIH0sIHtcbiAgICAnYXV0b2hlaWdodCc6IHBhcmFtcy5hdXRvSGVpZ2h0XG4gIH0sIHtcbiAgICAncnRsJzogcnRsXG4gIH0sIHtcbiAgICAnZ3JpZCc6IHBhcmFtcy5ncmlkICYmIHBhcmFtcy5ncmlkLnJvd3MgPiAxXG4gIH0sIHtcbiAgICAnZ3JpZC1jb2x1bW4nOiBwYXJhbXMuZ3JpZCAmJiBwYXJhbXMuZ3JpZC5yb3dzID4gMSAmJiBwYXJhbXMuZ3JpZC5maWxsID09PSAnY29sdW1uJ1xuICB9LCB7XG4gICAgJ2FuZHJvaWQnOiBkZXZpY2UuYW5kcm9pZFxuICB9LCB7XG4gICAgJ2lvcyc6IGRldmljZS5pb3NcbiAgfSwge1xuICAgICdjc3MtbW9kZSc6IHBhcmFtcy5jc3NNb2RlXG4gIH0sIHtcbiAgICAnY2VudGVyZWQnOiBwYXJhbXMuY3NzTW9kZSAmJiBwYXJhbXMuY2VudGVyZWRTbGlkZXNcbiAgfSwge1xuICAgICd3YXRjaC1wcm9ncmVzcyc6IHBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzXG4gIH1dLCBwYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcyk7XG4gIGNsYXNzTmFtZXMucHVzaCguLi5zdWZmaXhlcyk7XG4gIGVsLmNsYXNzTGlzdC5hZGQoLi4uY2xhc3NOYW1lcyk7XG4gIHN3aXBlci5lbWl0Q29udGFpbmVyQ2xhc3NlcygpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVDbGFzc2VzKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgZWwsXG4gICAgY2xhc3NOYW1lc1xuICB9ID0gc3dpcGVyO1xuICBpZiAoIWVsIHx8IHR5cGVvZiBlbCA9PT0gJ3N0cmluZycpIHJldHVybjtcbiAgZWwuY2xhc3NMaXN0LnJlbW92ZSguLi5jbGFzc05hbWVzKTtcbiAgc3dpcGVyLmVtaXRDb250YWluZXJDbGFzc2VzKCk7XG59XG5cbnZhciBjbGFzc2VzID0ge1xuICBhZGRDbGFzc2VzLFxuICByZW1vdmVDbGFzc2VzXG59O1xuXG5mdW5jdGlvbiBjaGVja092ZXJmbG93KCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgaXNMb2NrZWQ6IHdhc0xvY2tlZCxcbiAgICBwYXJhbXNcbiAgfSA9IHN3aXBlcjtcbiAgY29uc3Qge1xuICAgIHNsaWRlc09mZnNldEJlZm9yZVxuICB9ID0gcGFyYW1zO1xuICBpZiAoc2xpZGVzT2Zmc2V0QmVmb3JlKSB7XG4gICAgY29uc3QgbGFzdFNsaWRlSW5kZXggPSBzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIDE7XG4gICAgY29uc3QgbGFzdFNsaWRlUmlnaHRFZGdlID0gc3dpcGVyLnNsaWRlc0dyaWRbbGFzdFNsaWRlSW5kZXhdICsgc3dpcGVyLnNsaWRlc1NpemVzR3JpZFtsYXN0U2xpZGVJbmRleF0gKyBzbGlkZXNPZmZzZXRCZWZvcmUgKiAyO1xuICAgIHN3aXBlci5pc0xvY2tlZCA9IHN3aXBlci5zaXplID4gbGFzdFNsaWRlUmlnaHRFZGdlO1xuICB9IGVsc2Uge1xuICAgIHN3aXBlci5pc0xvY2tlZCA9IHN3aXBlci5zbmFwR3JpZC5sZW5ndGggPT09IDE7XG4gIH1cbiAgaWYgKHBhcmFtcy5hbGxvd1NsaWRlTmV4dCA9PT0gdHJ1ZSkge1xuICAgIHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9ICFzd2lwZXIuaXNMb2NrZWQ7XG4gIH1cbiAgaWYgKHBhcmFtcy5hbGxvd1NsaWRlUHJldiA9PT0gdHJ1ZSkge1xuICAgIHN3aXBlci5hbGxvd1NsaWRlUHJldiA9ICFzd2lwZXIuaXNMb2NrZWQ7XG4gIH1cbiAgaWYgKHdhc0xvY2tlZCAmJiB3YXNMb2NrZWQgIT09IHN3aXBlci5pc0xvY2tlZCkge1xuICAgIHN3aXBlci5pc0VuZCA9IGZhbHNlO1xuICB9XG4gIGlmICh3YXNMb2NrZWQgIT09IHN3aXBlci5pc0xvY2tlZCkge1xuICAgIHN3aXBlci5lbWl0KHN3aXBlci5pc0xvY2tlZCA/ICdsb2NrJyA6ICd1bmxvY2snKTtcbiAgfVxufVxudmFyIGNoZWNrT3ZlcmZsb3ckMSA9IHtcbiAgY2hlY2tPdmVyZmxvd1xufTtcblxudmFyIGRlZmF1bHRzID0ge1xuICBpbml0OiB0cnVlLFxuICBkaXJlY3Rpb246ICdob3Jpem9udGFsJyxcbiAgb25lV2F5TW92ZW1lbnQ6IGZhbHNlLFxuICBzd2lwZXJFbGVtZW50Tm9kZU5hbWU6ICdTV0lQRVItQ09OVEFJTkVSJyxcbiAgdG91Y2hFdmVudHNUYXJnZXQ6ICd3cmFwcGVyJyxcbiAgaW5pdGlhbFNsaWRlOiAwLFxuICBzcGVlZDogMzAwLFxuICBjc3NNb2RlOiBmYWxzZSxcbiAgdXBkYXRlT25XaW5kb3dSZXNpemU6IHRydWUsXG4gIHJlc2l6ZU9ic2VydmVyOiB0cnVlLFxuICBuZXN0ZWQ6IGZhbHNlLFxuICBjcmVhdGVFbGVtZW50czogZmFsc2UsXG4gIGV2ZW50c1ByZWZpeDogJ3N3aXBlcicsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIGZvY3VzYWJsZUVsZW1lbnRzOiAnaW5wdXQsIHNlbGVjdCwgb3B0aW9uLCB0ZXh0YXJlYSwgYnV0dG9uLCB2aWRlbywgbGFiZWwnLFxuICAvLyBPdmVycmlkZXNcbiAgd2lkdGg6IG51bGwsXG4gIGhlaWdodDogbnVsbCxcbiAgLy9cbiAgcHJldmVudEludGVyYWN0aW9uT25UcmFuc2l0aW9uOiBmYWxzZSxcbiAgLy8gc3NyXG4gIHVzZXJBZ2VudDogbnVsbCxcbiAgdXJsOiBudWxsLFxuICAvLyBUbyBzdXBwb3J0IGlPUydzIHN3aXBlLXRvLWdvLWJhY2sgZ2VzdHVyZSAod2hlbiBiZWluZyB1c2VkIGluLWFwcCkuXG4gIGVkZ2VTd2lwZURldGVjdGlvbjogZmFsc2UsXG4gIGVkZ2VTd2lwZVRocmVzaG9sZDogMjAsXG4gIC8vIEF1dG9oZWlnaHRcbiAgYXV0b0hlaWdodDogZmFsc2UsXG4gIC8vIFNldCB3cmFwcGVyIHdpZHRoXG4gIHNldFdyYXBwZXJTaXplOiBmYWxzZSxcbiAgLy8gVmlydHVhbCBUcmFuc2xhdGVcbiAgdmlydHVhbFRyYW5zbGF0ZTogZmFsc2UsXG4gIC8vIEVmZmVjdHNcbiAgZWZmZWN0OiAnc2xpZGUnLFxuICAvLyAnc2xpZGUnIG9yICdmYWRlJyBvciAnY3ViZScgb3IgJ2NvdmVyZmxvdycgb3IgJ2ZsaXAnXG5cbiAgLy8gQnJlYWtwb2ludHNcbiAgYnJlYWtwb2ludHM6IHVuZGVmaW5lZCxcbiAgYnJlYWtwb2ludHNCYXNlOiAnd2luZG93JyxcbiAgLy8gU2xpZGVzIGdyaWRcbiAgc3BhY2VCZXR3ZWVuOiAwLFxuICBzbGlkZXNQZXJWaWV3OiAxLFxuICBzbGlkZXNQZXJHcm91cDogMSxcbiAgc2xpZGVzUGVyR3JvdXBTa2lwOiAwLFxuICBzbGlkZXNQZXJHcm91cEF1dG86IGZhbHNlLFxuICBjZW50ZXJlZFNsaWRlczogZmFsc2UsXG4gIGNlbnRlcmVkU2xpZGVzQm91bmRzOiBmYWxzZSxcbiAgc2xpZGVzT2Zmc2V0QmVmb3JlOiAwLFxuICAvLyBpbiBweFxuICBzbGlkZXNPZmZzZXRBZnRlcjogMCxcbiAgLy8gaW4gcHhcbiAgbm9ybWFsaXplU2xpZGVJbmRleDogdHJ1ZSxcbiAgY2VudGVySW5zdWZmaWNpZW50U2xpZGVzOiBmYWxzZSxcbiAgLy8gRGlzYWJsZSBzd2lwZXIgYW5kIGhpZGUgbmF2aWdhdGlvbiB3aGVuIGNvbnRhaW5lciBub3Qgb3ZlcmZsb3dcbiAgd2F0Y2hPdmVyZmxvdzogdHJ1ZSxcbiAgLy8gUm91bmQgbGVuZ3RoXG4gIHJvdW5kTGVuZ3RoczogZmFsc2UsXG4gIC8vIFRvdWNoZXNcbiAgdG91Y2hSYXRpbzogMSxcbiAgdG91Y2hBbmdsZTogNDUsXG4gIHNpbXVsYXRlVG91Y2g6IHRydWUsXG4gIHNob3J0U3dpcGVzOiB0cnVlLFxuICBsb25nU3dpcGVzOiB0cnVlLFxuICBsb25nU3dpcGVzUmF0aW86IDAuNSxcbiAgbG9uZ1N3aXBlc01zOiAzMDAsXG4gIGZvbGxvd0ZpbmdlcjogdHJ1ZSxcbiAgYWxsb3dUb3VjaE1vdmU6IHRydWUsXG4gIHRocmVzaG9sZDogNSxcbiAgdG91Y2hNb3ZlU3RvcFByb3BhZ2F0aW9uOiBmYWxzZSxcbiAgdG91Y2hTdGFydFByZXZlbnREZWZhdWx0OiB0cnVlLFxuICB0b3VjaFN0YXJ0Rm9yY2VQcmV2ZW50RGVmYXVsdDogZmFsc2UsXG4gIHRvdWNoUmVsZWFzZU9uRWRnZXM6IGZhbHNlLFxuICAvLyBVbmlxdWUgTmF2aWdhdGlvbiBFbGVtZW50c1xuICB1bmlxdWVOYXZFbGVtZW50czogdHJ1ZSxcbiAgLy8gUmVzaXN0YW5jZVxuICByZXNpc3RhbmNlOiB0cnVlLFxuICByZXNpc3RhbmNlUmF0aW86IDAuODUsXG4gIC8vIFByb2dyZXNzXG4gIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IGZhbHNlLFxuICAvLyBDdXJzb3JcbiAgZ3JhYkN1cnNvcjogZmFsc2UsXG4gIC8vIENsaWNrc1xuICBwcmV2ZW50Q2xpY2tzOiB0cnVlLFxuICBwcmV2ZW50Q2xpY2tzUHJvcGFnYXRpb246IHRydWUsXG4gIHNsaWRlVG9DbGlja2VkU2xpZGU6IGZhbHNlLFxuICAvLyBsb29wXG4gIGxvb3A6IGZhbHNlLFxuICBsb29wQWRkQmxhbmtTbGlkZXM6IHRydWUsXG4gIGxvb3BBZGRpdGlvbmFsU2xpZGVzOiAwLFxuICBsb29wUHJldmVudHNTbGlkaW5nOiB0cnVlLFxuICAvLyByZXdpbmRcbiAgcmV3aW5kOiBmYWxzZSxcbiAgLy8gU3dpcGluZy9ubyBzd2lwaW5nXG4gIGFsbG93U2xpZGVQcmV2OiB0cnVlLFxuICBhbGxvd1NsaWRlTmV4dDogdHJ1ZSxcbiAgc3dpcGVIYW5kbGVyOiBudWxsLFxuICAvLyAnLnN3aXBlLWhhbmRsZXInLFxuICBub1N3aXBpbmc6IHRydWUsXG4gIG5vU3dpcGluZ0NsYXNzOiAnc3dpcGVyLW5vLXN3aXBpbmcnLFxuICBub1N3aXBpbmdTZWxlY3RvcjogbnVsbCxcbiAgLy8gUGFzc2l2ZSBMaXN0ZW5lcnNcbiAgcGFzc2l2ZUxpc3RlbmVyczogdHJ1ZSxcbiAgbWF4QmFja2ZhY2VIaWRkZW5TbGlkZXM6IDEwLFxuICAvLyBOU1xuICBjb250YWluZXJNb2RpZmllckNsYXNzOiAnc3dpcGVyLScsXG4gIC8vIE5FV1xuICBzbGlkZUNsYXNzOiAnc3dpcGVyLXNsaWRlJyxcbiAgc2xpZGVCbGFua0NsYXNzOiAnc3dpcGVyLXNsaWRlLWJsYW5rJyxcbiAgc2xpZGVBY3RpdmVDbGFzczogJ3N3aXBlci1zbGlkZS1hY3RpdmUnLFxuICBzbGlkZVZpc2libGVDbGFzczogJ3N3aXBlci1zbGlkZS12aXNpYmxlJyxcbiAgc2xpZGVGdWxseVZpc2libGVDbGFzczogJ3N3aXBlci1zbGlkZS1mdWxseS12aXNpYmxlJyxcbiAgc2xpZGVOZXh0Q2xhc3M6ICdzd2lwZXItc2xpZGUtbmV4dCcsXG4gIHNsaWRlUHJldkNsYXNzOiAnc3dpcGVyLXNsaWRlLXByZXYnLFxuICB3cmFwcGVyQ2xhc3M6ICdzd2lwZXItd3JhcHBlcicsXG4gIGxhenlQcmVsb2FkZXJDbGFzczogJ3N3aXBlci1sYXp5LXByZWxvYWRlcicsXG4gIGxhenlQcmVsb2FkUHJldk5leHQ6IDAsXG4gIC8vIENhbGxiYWNrc1xuICBydW5DYWxsYmFja3NPbkluaXQ6IHRydWUsXG4gIC8vIEludGVybmFsc1xuICBfZW1pdENsYXNzZXM6IGZhbHNlXG59O1xuXG5mdW5jdGlvbiBtb2R1bGVFeHRlbmRQYXJhbXMocGFyYW1zLCBhbGxNb2R1bGVzUGFyYW1zKSB7XG4gIHJldHVybiBmdW5jdGlvbiBleHRlbmRQYXJhbXMob2JqKSB7XG4gICAgaWYgKG9iaiA9PT0gdm9pZCAwKSB7XG4gICAgICBvYmogPSB7fTtcbiAgICB9XG4gICAgY29uc3QgbW9kdWxlUGFyYW1OYW1lID0gT2JqZWN0LmtleXMob2JqKVswXTtcbiAgICBjb25zdCBtb2R1bGVQYXJhbXMgPSBvYmpbbW9kdWxlUGFyYW1OYW1lXTtcbiAgICBpZiAodHlwZW9mIG1vZHVsZVBhcmFtcyAhPT0gJ29iamVjdCcgfHwgbW9kdWxlUGFyYW1zID09PSBudWxsKSB7XG4gICAgICBleHRlbmQoYWxsTW9kdWxlc1BhcmFtcywgb2JqKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdID09PSB0cnVlKSB7XG4gICAgICBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSA9IHtcbiAgICAgICAgZW5hYmxlZDogdHJ1ZVxuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKG1vZHVsZVBhcmFtTmFtZSA9PT0gJ25hdmlnYXRpb24nICYmIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdICYmIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdLmVuYWJsZWQgJiYgIXBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdLnByZXZFbCAmJiAhcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0ubmV4dEVsKSB7XG4gICAgICBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXS5hdXRvID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKFsncGFnaW5hdGlvbicsICdzY3JvbGxiYXInXS5pbmRleE9mKG1vZHVsZVBhcmFtTmFtZSkgPj0gMCAmJiBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSAmJiBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXS5lbmFibGVkICYmICFwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXS5lbCkge1xuICAgICAgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0uYXV0byA9IHRydWU7XG4gICAgfVxuICAgIGlmICghKG1vZHVsZVBhcmFtTmFtZSBpbiBwYXJhbXMgJiYgJ2VuYWJsZWQnIGluIG1vZHVsZVBhcmFtcykpIHtcbiAgICAgIGV4dGVuZChhbGxNb2R1bGVzUGFyYW1zLCBvYmopO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdID09PSAnb2JqZWN0JyAmJiAhKCdlbmFibGVkJyBpbiBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSkpIHtcbiAgICAgIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdLmVuYWJsZWQgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoIXBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdKSBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSA9IHtcbiAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgfTtcbiAgICBleHRlbmQoYWxsTW9kdWxlc1BhcmFtcywgb2JqKTtcbiAgfTtcbn1cblxuLyogZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOiBcIm9mZlwiICovXG5jb25zdCBwcm90b3R5cGVzID0ge1xuICBldmVudHNFbWl0dGVyLFxuICB1cGRhdGUsXG4gIHRyYW5zbGF0ZSxcbiAgdHJhbnNpdGlvbixcbiAgc2xpZGUsXG4gIGxvb3AsXG4gIGdyYWJDdXJzb3IsXG4gIGV2ZW50czogZXZlbnRzJDEsXG4gIGJyZWFrcG9pbnRzLFxuICBjaGVja092ZXJmbG93OiBjaGVja092ZXJmbG93JDEsXG4gIGNsYXNzZXNcbn07XG5jb25zdCBleHRlbmRlZERlZmF1bHRzID0ge307XG5jbGFzcyBTd2lwZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBsZXQgZWw7XG4gICAgbGV0IHBhcmFtcztcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMSAmJiBhcmdzWzBdLmNvbnN0cnVjdG9yICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcmdzWzBdKS5zbGljZSg4LCAtMSkgPT09ICdPYmplY3QnKSB7XG4gICAgICBwYXJhbXMgPSBhcmdzWzBdO1xuICAgIH0gZWxzZSB7XG4gICAgICBbZWwsIHBhcmFtc10gPSBhcmdzO1xuICAgIH1cbiAgICBpZiAoIXBhcmFtcykgcGFyYW1zID0ge307XG4gICAgcGFyYW1zID0gZXh0ZW5kKHt9LCBwYXJhbXMpO1xuICAgIGlmIChlbCAmJiAhcGFyYW1zLmVsKSBwYXJhbXMuZWwgPSBlbDtcbiAgICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gICAgaWYgKHBhcmFtcy5lbCAmJiB0eXBlb2YgcGFyYW1zLmVsID09PSAnc3RyaW5nJyAmJiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHBhcmFtcy5lbCkubGVuZ3RoID4gMSkge1xuICAgICAgY29uc3Qgc3dpcGVycyA9IFtdO1xuICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChwYXJhbXMuZWwpLmZvckVhY2goY29udGFpbmVyRWwgPT4ge1xuICAgICAgICBjb25zdCBuZXdQYXJhbXMgPSBleHRlbmQoe30sIHBhcmFtcywge1xuICAgICAgICAgIGVsOiBjb250YWluZXJFbFxuICAgICAgICB9KTtcbiAgICAgICAgc3dpcGVycy5wdXNoKG5ldyBTd2lwZXIobmV3UGFyYW1zKSk7XG4gICAgICB9KTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdHJ1Y3Rvci1yZXR1cm5cbiAgICAgIHJldHVybiBzd2lwZXJzO1xuICAgIH1cblxuICAgIC8vIFN3aXBlciBJbnN0YW5jZVxuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgc3dpcGVyLl9fc3dpcGVyX18gPSB0cnVlO1xuICAgIHN3aXBlci5zdXBwb3J0ID0gZ2V0U3VwcG9ydCgpO1xuICAgIHN3aXBlci5kZXZpY2UgPSBnZXREZXZpY2Uoe1xuICAgICAgdXNlckFnZW50OiBwYXJhbXMudXNlckFnZW50XG4gICAgfSk7XG4gICAgc3dpcGVyLmJyb3dzZXIgPSBnZXRCcm93c2VyKCk7XG4gICAgc3dpcGVyLmV2ZW50c0xpc3RlbmVycyA9IHt9O1xuICAgIHN3aXBlci5ldmVudHNBbnlMaXN0ZW5lcnMgPSBbXTtcbiAgICBzd2lwZXIubW9kdWxlcyA9IFsuLi5zd2lwZXIuX19tb2R1bGVzX19dO1xuICAgIGlmIChwYXJhbXMubW9kdWxlcyAmJiBBcnJheS5pc0FycmF5KHBhcmFtcy5tb2R1bGVzKSkge1xuICAgICAgc3dpcGVyLm1vZHVsZXMucHVzaCguLi5wYXJhbXMubW9kdWxlcyk7XG4gICAgfVxuICAgIGNvbnN0IGFsbE1vZHVsZXNQYXJhbXMgPSB7fTtcbiAgICBzd2lwZXIubW9kdWxlcy5mb3JFYWNoKG1vZCA9PiB7XG4gICAgICBtb2Qoe1xuICAgICAgICBwYXJhbXMsXG4gICAgICAgIHN3aXBlcixcbiAgICAgICAgZXh0ZW5kUGFyYW1zOiBtb2R1bGVFeHRlbmRQYXJhbXMocGFyYW1zLCBhbGxNb2R1bGVzUGFyYW1zKSxcbiAgICAgICAgb246IHN3aXBlci5vbi5iaW5kKHN3aXBlciksXG4gICAgICAgIG9uY2U6IHN3aXBlci5vbmNlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgb2ZmOiBzd2lwZXIub2ZmLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgZW1pdDogc3dpcGVyLmVtaXQuYmluZChzd2lwZXIpXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8vIEV4dGVuZCBkZWZhdWx0cyB3aXRoIG1vZHVsZXMgcGFyYW1zXG4gICAgY29uc3Qgc3dpcGVyUGFyYW1zID0gZXh0ZW5kKHt9LCBkZWZhdWx0cywgYWxsTW9kdWxlc1BhcmFtcyk7XG5cbiAgICAvLyBFeHRlbmQgZGVmYXVsdHMgd2l0aCBwYXNzZWQgcGFyYW1zXG4gICAgc3dpcGVyLnBhcmFtcyA9IGV4dGVuZCh7fSwgc3dpcGVyUGFyYW1zLCBleHRlbmRlZERlZmF1bHRzLCBwYXJhbXMpO1xuICAgIHN3aXBlci5vcmlnaW5hbFBhcmFtcyA9IGV4dGVuZCh7fSwgc3dpcGVyLnBhcmFtcyk7XG4gICAgc3dpcGVyLnBhc3NlZFBhcmFtcyA9IGV4dGVuZCh7fSwgcGFyYW1zKTtcblxuICAgIC8vIGFkZCBldmVudCBsaXN0ZW5lcnNcbiAgICBpZiAoc3dpcGVyLnBhcmFtcyAmJiBzd2lwZXIucGFyYW1zLm9uKSB7XG4gICAgICBPYmplY3Qua2V5cyhzd2lwZXIucGFyYW1zLm9uKS5mb3JFYWNoKGV2ZW50TmFtZSA9PiB7XG4gICAgICAgIHN3aXBlci5vbihldmVudE5hbWUsIHN3aXBlci5wYXJhbXMub25bZXZlbnROYW1lXSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKHN3aXBlci5wYXJhbXMgJiYgc3dpcGVyLnBhcmFtcy5vbkFueSkge1xuICAgICAgc3dpcGVyLm9uQW55KHN3aXBlci5wYXJhbXMub25BbnkpO1xuICAgIH1cblxuICAgIC8vIEV4dGVuZCBTd2lwZXJcbiAgICBPYmplY3QuYXNzaWduKHN3aXBlciwge1xuICAgICAgZW5hYmxlZDogc3dpcGVyLnBhcmFtcy5lbmFibGVkLFxuICAgICAgZWwsXG4gICAgICAvLyBDbGFzc2VzXG4gICAgICBjbGFzc05hbWVzOiBbXSxcbiAgICAgIC8vIFNsaWRlc1xuICAgICAgc2xpZGVzOiBbXSxcbiAgICAgIHNsaWRlc0dyaWQ6IFtdLFxuICAgICAgc25hcEdyaWQ6IFtdLFxuICAgICAgc2xpZGVzU2l6ZXNHcmlkOiBbXSxcbiAgICAgIC8vIGlzRGlyZWN0aW9uXG4gICAgICBpc0hvcml6b250YWwoKSB7XG4gICAgICAgIHJldHVybiBzd2lwZXIucGFyYW1zLmRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnO1xuICAgICAgfSxcbiAgICAgIGlzVmVydGljYWwoKSB7XG4gICAgICAgIHJldHVybiBzd2lwZXIucGFyYW1zLmRpcmVjdGlvbiA9PT0gJ3ZlcnRpY2FsJztcbiAgICAgIH0sXG4gICAgICAvLyBJbmRleGVzXG4gICAgICBhY3RpdmVJbmRleDogMCxcbiAgICAgIHJlYWxJbmRleDogMCxcbiAgICAgIC8vXG4gICAgICBpc0JlZ2lubmluZzogdHJ1ZSxcbiAgICAgIGlzRW5kOiBmYWxzZSxcbiAgICAgIC8vIFByb3BzXG4gICAgICB0cmFuc2xhdGU6IDAsXG4gICAgICBwcmV2aW91c1RyYW5zbGF0ZTogMCxcbiAgICAgIHByb2dyZXNzOiAwLFxuICAgICAgdmVsb2NpdHk6IDAsXG4gICAgICBhbmltYXRpbmc6IGZhbHNlLFxuICAgICAgY3NzT3ZlcmZsb3dBZGp1c3RtZW50KCkge1xuICAgICAgICAvLyBSZXR1cm5zIDAgdW5sZXNzIGB0cmFuc2xhdGVgIGlzID4gMioqMjNcbiAgICAgICAgLy8gU2hvdWxkIGJlIHN1YnRyYWN0ZWQgZnJvbSBjc3MgdmFsdWVzIHRvIHByZXZlbnQgb3ZlcmZsb3dcbiAgICAgICAgcmV0dXJuIE1hdGgudHJ1bmModGhpcy50cmFuc2xhdGUgLyAyICoqIDIzKSAqIDIgKiogMjM7XG4gICAgICB9LFxuICAgICAgLy8gTG9ja3NcbiAgICAgIGFsbG93U2xpZGVOZXh0OiBzd2lwZXIucGFyYW1zLmFsbG93U2xpZGVOZXh0LFxuICAgICAgYWxsb3dTbGlkZVByZXY6IHN3aXBlci5wYXJhbXMuYWxsb3dTbGlkZVByZXYsXG4gICAgICAvLyBUb3VjaCBFdmVudHNcbiAgICAgIHRvdWNoRXZlbnRzRGF0YToge1xuICAgICAgICBpc1RvdWNoZWQ6IHVuZGVmaW5lZCxcbiAgICAgICAgaXNNb3ZlZDogdW5kZWZpbmVkLFxuICAgICAgICBhbGxvd1RvdWNoQ2FsbGJhY2tzOiB1bmRlZmluZWQsXG4gICAgICAgIHRvdWNoU3RhcnRUaW1lOiB1bmRlZmluZWQsXG4gICAgICAgIGlzU2Nyb2xsaW5nOiB1bmRlZmluZWQsXG4gICAgICAgIGN1cnJlbnRUcmFuc2xhdGU6IHVuZGVmaW5lZCxcbiAgICAgICAgc3RhcnRUcmFuc2xhdGU6IHVuZGVmaW5lZCxcbiAgICAgICAgYWxsb3dUaHJlc2hvbGRNb3ZlOiB1bmRlZmluZWQsXG4gICAgICAgIC8vIEZvcm0gZWxlbWVudHMgdG8gbWF0Y2hcbiAgICAgICAgZm9jdXNhYmxlRWxlbWVudHM6IHN3aXBlci5wYXJhbXMuZm9jdXNhYmxlRWxlbWVudHMsXG4gICAgICAgIC8vIExhc3QgY2xpY2sgdGltZVxuICAgICAgICBsYXN0Q2xpY2tUaW1lOiAwLFxuICAgICAgICBjbGlja1RpbWVvdXQ6IHVuZGVmaW5lZCxcbiAgICAgICAgLy8gVmVsb2NpdGllc1xuICAgICAgICB2ZWxvY2l0aWVzOiBbXSxcbiAgICAgICAgYWxsb3dNb21lbnR1bUJvdW5jZTogdW5kZWZpbmVkLFxuICAgICAgICBzdGFydE1vdmluZzogdW5kZWZpbmVkLFxuICAgICAgICBwb2ludGVySWQ6IG51bGwsXG4gICAgICAgIHRvdWNoSWQ6IG51bGxcbiAgICAgIH0sXG4gICAgICAvLyBDbGlja3NcbiAgICAgIGFsbG93Q2xpY2s6IHRydWUsXG4gICAgICAvLyBUb3VjaGVzXG4gICAgICBhbGxvd1RvdWNoTW92ZTogc3dpcGVyLnBhcmFtcy5hbGxvd1RvdWNoTW92ZSxcbiAgICAgIHRvdWNoZXM6IHtcbiAgICAgICAgc3RhcnRYOiAwLFxuICAgICAgICBzdGFydFk6IDAsXG4gICAgICAgIGN1cnJlbnRYOiAwLFxuICAgICAgICBjdXJyZW50WTogMCxcbiAgICAgICAgZGlmZjogMFxuICAgICAgfSxcbiAgICAgIC8vIEltYWdlc1xuICAgICAgaW1hZ2VzVG9Mb2FkOiBbXSxcbiAgICAgIGltYWdlc0xvYWRlZDogMFxuICAgIH0pO1xuICAgIHN3aXBlci5lbWl0KCdfc3dpcGVyJyk7XG5cbiAgICAvLyBJbml0XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuaW5pdCkge1xuICAgICAgc3dpcGVyLmluaXQoKTtcbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYXBwIGluc3RhbmNlXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnN0cnVjdG9yLXJldHVyblxuICAgIHJldHVybiBzd2lwZXI7XG4gIH1cbiAgZ2V0RGlyZWN0aW9uTGFiZWwocHJvcGVydHkpIHtcbiAgICBpZiAodGhpcy5pc0hvcml6b250YWwoKSkge1xuICAgICAgcmV0dXJuIHByb3BlcnR5O1xuICAgIH1cbiAgICAvLyBwcmV0dGllci1pZ25vcmVcbiAgICByZXR1cm4ge1xuICAgICAgJ3dpZHRoJzogJ2hlaWdodCcsXG4gICAgICAnbWFyZ2luLXRvcCc6ICdtYXJnaW4tbGVmdCcsXG4gICAgICAnbWFyZ2luLWJvdHRvbSAnOiAnbWFyZ2luLXJpZ2h0JyxcbiAgICAgICdtYXJnaW4tbGVmdCc6ICdtYXJnaW4tdG9wJyxcbiAgICAgICdtYXJnaW4tcmlnaHQnOiAnbWFyZ2luLWJvdHRvbScsXG4gICAgICAncGFkZGluZy1sZWZ0JzogJ3BhZGRpbmctdG9wJyxcbiAgICAgICdwYWRkaW5nLXJpZ2h0JzogJ3BhZGRpbmctYm90dG9tJyxcbiAgICAgICdtYXJnaW5SaWdodCc6ICdtYXJnaW5Cb3R0b20nXG4gICAgfVtwcm9wZXJ0eV07XG4gIH1cbiAgZ2V0U2xpZGVJbmRleChzbGlkZUVsKSB7XG4gICAgY29uc3Qge1xuICAgICAgc2xpZGVzRWwsXG4gICAgICBwYXJhbXNcbiAgICB9ID0gdGhpcztcbiAgICBjb25zdCBzbGlkZXMgPSBlbGVtZW50Q2hpbGRyZW4oc2xpZGVzRWwsIGAuJHtwYXJhbXMuc2xpZGVDbGFzc30sIHN3aXBlci1zbGlkZWApO1xuICAgIGNvbnN0IGZpcnN0U2xpZGVJbmRleCA9IGVsZW1lbnRJbmRleChzbGlkZXNbMF0pO1xuICAgIHJldHVybiBlbGVtZW50SW5kZXgoc2xpZGVFbCkgLSBmaXJzdFNsaWRlSW5kZXg7XG4gIH1cbiAgZ2V0U2xpZGVJbmRleEJ5RGF0YShpbmRleCkge1xuICAgIHJldHVybiB0aGlzLmdldFNsaWRlSW5kZXgodGhpcy5zbGlkZXMuZmlsdGVyKHNsaWRlRWwgPT4gc2xpZGVFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JykgKiAxID09PSBpbmRleClbMF0pO1xuICB9XG4gIHJlY2FsY1NsaWRlcygpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHtcbiAgICAgIHNsaWRlc0VsLFxuICAgICAgcGFyYW1zXG4gICAgfSA9IHN3aXBlcjtcbiAgICBzd2lwZXIuc2xpZGVzID0gZWxlbWVudENoaWxkcmVuKHNsaWRlc0VsLCBgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKTtcbiAgfVxuICBlbmFibGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoc3dpcGVyLmVuYWJsZWQpIHJldHVybjtcbiAgICBzd2lwZXIuZW5hYmxlZCA9IHRydWU7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuZ3JhYkN1cnNvcikge1xuICAgICAgc3dpcGVyLnNldEdyYWJDdXJzb3IoKTtcbiAgICB9XG4gICAgc3dpcGVyLmVtaXQoJ2VuYWJsZScpO1xuICB9XG4gIGRpc2FibGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlci5lbmFibGVkKSByZXR1cm47XG4gICAgc3dpcGVyLmVuYWJsZWQgPSBmYWxzZTtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5ncmFiQ3Vyc29yKSB7XG4gICAgICBzd2lwZXIudW5zZXRHcmFiQ3Vyc29yKCk7XG4gICAgfVxuICAgIHN3aXBlci5lbWl0KCdkaXNhYmxlJyk7XG4gIH1cbiAgc2V0UHJvZ3Jlc3MocHJvZ3Jlc3MsIHNwZWVkKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBwcm9ncmVzcyA9IE1hdGgubWluKE1hdGgubWF4KHByb2dyZXNzLCAwKSwgMSk7XG4gICAgY29uc3QgbWluID0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpO1xuICAgIGNvbnN0IG1heCA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKTtcbiAgICBjb25zdCBjdXJyZW50ID0gKG1heCAtIG1pbikgKiBwcm9ncmVzcyArIG1pbjtcbiAgICBzd2lwZXIudHJhbnNsYXRlVG8oY3VycmVudCwgdHlwZW9mIHNwZWVkID09PSAndW5kZWZpbmVkJyA/IDAgOiBzcGVlZCk7XG4gICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgfVxuICBlbWl0Q29udGFpbmVyQ2xhc3NlcygpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5fZW1pdENsYXNzZXMgfHwgIXN3aXBlci5lbCkgcmV0dXJuO1xuICAgIGNvbnN0IGNscyA9IHN3aXBlci5lbC5jbGFzc05hbWUuc3BsaXQoJyAnKS5maWx0ZXIoY2xhc3NOYW1lID0+IHtcbiAgICAgIHJldHVybiBjbGFzc05hbWUuaW5kZXhPZignc3dpcGVyJykgPT09IDAgfHwgY2xhc3NOYW1lLmluZGV4T2Yoc3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzKSA9PT0gMDtcbiAgICB9KTtcbiAgICBzd2lwZXIuZW1pdCgnX2NvbnRhaW5lckNsYXNzZXMnLCBjbHMuam9pbignICcpKTtcbiAgfVxuICBnZXRTbGlkZUNsYXNzZXMoc2xpZGVFbCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKHN3aXBlci5kZXN0cm95ZWQpIHJldHVybiAnJztcbiAgICByZXR1cm4gc2xpZGVFbC5jbGFzc05hbWUuc3BsaXQoJyAnKS5maWx0ZXIoY2xhc3NOYW1lID0+IHtcbiAgICAgIHJldHVybiBjbGFzc05hbWUuaW5kZXhPZignc3dpcGVyLXNsaWRlJykgPT09IDAgfHwgY2xhc3NOYW1lLmluZGV4T2Yoc3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzKSA9PT0gMDtcbiAgICB9KS5qb2luKCcgJyk7XG4gIH1cbiAgZW1pdFNsaWRlc0NsYXNzZXMoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuX2VtaXRDbGFzc2VzIHx8ICFzd2lwZXIuZWwpIHJldHVybjtcbiAgICBjb25zdCB1cGRhdGVzID0gW107XG4gICAgc3dpcGVyLnNsaWRlcy5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgICAgY29uc3QgY2xhc3NOYW1lcyA9IHN3aXBlci5nZXRTbGlkZUNsYXNzZXMoc2xpZGVFbCk7XG4gICAgICB1cGRhdGVzLnB1c2goe1xuICAgICAgICBzbGlkZUVsLFxuICAgICAgICBjbGFzc05hbWVzXG4gICAgICB9KTtcbiAgICAgIHN3aXBlci5lbWl0KCdfc2xpZGVDbGFzcycsIHNsaWRlRWwsIGNsYXNzTmFtZXMpO1xuICAgIH0pO1xuICAgIHN3aXBlci5lbWl0KCdfc2xpZGVDbGFzc2VzJywgdXBkYXRlcyk7XG4gIH1cbiAgc2xpZGVzUGVyVmlld0R5bmFtaWModmlldywgZXhhY3QpIHtcbiAgICBpZiAodmlldyA9PT0gdm9pZCAwKSB7XG4gICAgICB2aWV3ID0gJ2N1cnJlbnQnO1xuICAgIH1cbiAgICBpZiAoZXhhY3QgPT09IHZvaWQgMCkge1xuICAgICAgZXhhY3QgPSBmYWxzZTtcbiAgICB9XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB7XG4gICAgICBwYXJhbXMsXG4gICAgICBzbGlkZXMsXG4gICAgICBzbGlkZXNHcmlkLFxuICAgICAgc2xpZGVzU2l6ZXNHcmlkLFxuICAgICAgc2l6ZTogc3dpcGVyU2l6ZSxcbiAgICAgIGFjdGl2ZUluZGV4XG4gICAgfSA9IHN3aXBlcjtcbiAgICBsZXQgc3B2ID0gMTtcbiAgICBpZiAodHlwZW9mIHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnbnVtYmVyJykgcmV0dXJuIHBhcmFtcy5zbGlkZXNQZXJWaWV3O1xuICAgIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgIGxldCBzbGlkZVNpemUgPSBzbGlkZXNbYWN0aXZlSW5kZXhdID8gTWF0aC5jZWlsKHNsaWRlc1thY3RpdmVJbmRleF0uc3dpcGVyU2xpZGVTaXplKSA6IDA7XG4gICAgICBsZXQgYnJlYWtMb29wO1xuICAgICAgZm9yIChsZXQgaSA9IGFjdGl2ZUluZGV4ICsgMTsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAoc2xpZGVzW2ldICYmICFicmVha0xvb3ApIHtcbiAgICAgICAgICBzbGlkZVNpemUgKz0gTWF0aC5jZWlsKHNsaWRlc1tpXS5zd2lwZXJTbGlkZVNpemUpO1xuICAgICAgICAgIHNwdiArPSAxO1xuICAgICAgICAgIGlmIChzbGlkZVNpemUgPiBzd2lwZXJTaXplKSBicmVha0xvb3AgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmb3IgKGxldCBpID0gYWN0aXZlSW5kZXggLSAxOyBpID49IDA7IGkgLT0gMSkge1xuICAgICAgICBpZiAoc2xpZGVzW2ldICYmICFicmVha0xvb3ApIHtcbiAgICAgICAgICBzbGlkZVNpemUgKz0gc2xpZGVzW2ldLnN3aXBlclNsaWRlU2l6ZTtcbiAgICAgICAgICBzcHYgKz0gMTtcbiAgICAgICAgICBpZiAoc2xpZGVTaXplID4gc3dpcGVyU2l6ZSkgYnJlYWtMb29wID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIGlmICh2aWV3ID09PSAnY3VycmVudCcpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IGFjdGl2ZUluZGV4ICsgMTsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgIGNvbnN0IHNsaWRlSW5WaWV3ID0gZXhhY3QgPyBzbGlkZXNHcmlkW2ldICsgc2xpZGVzU2l6ZXNHcmlkW2ldIC0gc2xpZGVzR3JpZFthY3RpdmVJbmRleF0gPCBzd2lwZXJTaXplIDogc2xpZGVzR3JpZFtpXSAtIHNsaWRlc0dyaWRbYWN0aXZlSW5kZXhdIDwgc3dpcGVyU2l6ZTtcbiAgICAgICAgICBpZiAoc2xpZGVJblZpZXcpIHtcbiAgICAgICAgICAgIHNwdiArPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gcHJldmlvdXNcbiAgICAgICAgZm9yIChsZXQgaSA9IGFjdGl2ZUluZGV4IC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgICAgICBjb25zdCBzbGlkZUluVmlldyA9IHNsaWRlc0dyaWRbYWN0aXZlSW5kZXhdIC0gc2xpZGVzR3JpZFtpXSA8IHN3aXBlclNpemU7XG4gICAgICAgICAgaWYgKHNsaWRlSW5WaWV3KSB7XG4gICAgICAgICAgICBzcHYgKz0gMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHNwdjtcbiAgfVxuICB1cGRhdGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XG4gICAgY29uc3Qge1xuICAgICAgc25hcEdyaWQsXG4gICAgICBwYXJhbXNcbiAgICB9ID0gc3dpcGVyO1xuICAgIC8vIEJyZWFrcG9pbnRzXG4gICAgaWYgKHBhcmFtcy5icmVha3BvaW50cykge1xuICAgICAgc3dpcGVyLnNldEJyZWFrcG9pbnQoKTtcbiAgICB9XG4gICAgWy4uLnN3aXBlci5lbC5xdWVyeVNlbGVjdG9yQWxsKCdbbG9hZGluZz1cImxhenlcIl0nKV0uZm9yRWFjaChpbWFnZUVsID0+IHtcbiAgICAgIGlmIChpbWFnZUVsLmNvbXBsZXRlKSB7XG4gICAgICAgIHByb2Nlc3NMYXp5UHJlbG9hZGVyKHN3aXBlciwgaW1hZ2VFbCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgc3dpcGVyLnVwZGF0ZVNpemUoKTtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG4gICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKCk7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICBmdW5jdGlvbiBzZXRUcmFuc2xhdGUoKSB7XG4gICAgICBjb25zdCB0cmFuc2xhdGVWYWx1ZSA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyBzd2lwZXIudHJhbnNsYXRlICogLTEgOiBzd2lwZXIudHJhbnNsYXRlO1xuICAgICAgY29uc3QgbmV3VHJhbnNsYXRlID0gTWF0aC5taW4oTWF0aC5tYXgodHJhbnNsYXRlVmFsdWUsIHN3aXBlci5tYXhUcmFuc2xhdGUoKSksIHN3aXBlci5taW5UcmFuc2xhdGUoKSk7XG4gICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKG5ld1RyYW5zbGF0ZSk7XG4gICAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gICAgfVxuICAgIGxldCB0cmFuc2xhdGVkO1xuICAgIGlmIChwYXJhbXMuZnJlZU1vZGUgJiYgcGFyYW1zLmZyZWVNb2RlLmVuYWJsZWQgJiYgIXBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICBzZXRUcmFuc2xhdGUoKTtcbiAgICAgIGlmIChwYXJhbXMuYXV0b0hlaWdodCkge1xuICAgICAgICBzd2lwZXIudXBkYXRlQXV0b0hlaWdodCgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoKHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgfHwgcGFyYW1zLnNsaWRlc1BlclZpZXcgPiAxKSAmJiBzd2lwZXIuaXNFbmQgJiYgIXBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgICBjb25zdCBzbGlkZXMgPSBzd2lwZXIudmlydHVhbCAmJiBwYXJhbXMudmlydHVhbC5lbmFibGVkID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzIDogc3dpcGVyLnNsaWRlcztcbiAgICAgICAgdHJhbnNsYXRlZCA9IHN3aXBlci5zbGlkZVRvKHNsaWRlcy5sZW5ndGggLSAxLCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0cmFuc2xhdGVkID0gc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4LCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgICBpZiAoIXRyYW5zbGF0ZWQpIHtcbiAgICAgICAgc2V0VHJhbnNsYXRlKCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzbmFwR3JpZCAhPT0gc3dpcGVyLnNuYXBHcmlkKSB7XG4gICAgICBzd2lwZXIuY2hlY2tPdmVyZmxvdygpO1xuICAgIH1cbiAgICBzd2lwZXIuZW1pdCgndXBkYXRlJyk7XG4gIH1cbiAgY2hhbmdlRGlyZWN0aW9uKG5ld0RpcmVjdGlvbiwgbmVlZFVwZGF0ZSkge1xuICAgIGlmIChuZWVkVXBkYXRlID09PSB2b2lkIDApIHtcbiAgICAgIG5lZWRVcGRhdGUgPSB0cnVlO1xuICAgIH1cbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IGN1cnJlbnREaXJlY3Rpb24gPSBzd2lwZXIucGFyYW1zLmRpcmVjdGlvbjtcbiAgICBpZiAoIW5ld0RpcmVjdGlvbikge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICBuZXdEaXJlY3Rpb24gPSBjdXJyZW50RGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcgPyAndmVydGljYWwnIDogJ2hvcml6b250YWwnO1xuICAgIH1cbiAgICBpZiAobmV3RGlyZWN0aW9uID09PSBjdXJyZW50RGlyZWN0aW9uIHx8IG5ld0RpcmVjdGlvbiAhPT0gJ2hvcml6b250YWwnICYmIG5ld0RpcmVjdGlvbiAhPT0gJ3ZlcnRpY2FsJykge1xuICAgICAgcmV0dXJuIHN3aXBlcjtcbiAgICB9XG4gICAgc3dpcGVyLmVsLmNsYXNzTGlzdC5yZW1vdmUoYCR7c3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfSR7Y3VycmVudERpcmVjdGlvbn1gKTtcbiAgICBzd2lwZXIuZWwuY2xhc3NMaXN0LmFkZChgJHtzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9JHtuZXdEaXJlY3Rpb259YCk7XG4gICAgc3dpcGVyLmVtaXRDb250YWluZXJDbGFzc2VzKCk7XG4gICAgc3dpcGVyLnBhcmFtcy5kaXJlY3Rpb24gPSBuZXdEaXJlY3Rpb247XG4gICAgc3dpcGVyLnNsaWRlcy5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgICAgaWYgKG5ld0RpcmVjdGlvbiA9PT0gJ3ZlcnRpY2FsJykge1xuICAgICAgICBzbGlkZUVsLnN0eWxlLndpZHRoID0gJyc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzbGlkZUVsLnN0eWxlLmhlaWdodCA9ICcnO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHN3aXBlci5lbWl0KCdjaGFuZ2VEaXJlY3Rpb24nKTtcbiAgICBpZiAobmVlZFVwZGF0ZSkgc3dpcGVyLnVwZGF0ZSgpO1xuICAgIHJldHVybiBzd2lwZXI7XG4gIH1cbiAgY2hhbmdlTGFuZ3VhZ2VEaXJlY3Rpb24oZGlyZWN0aW9uKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoc3dpcGVyLnJ0bCAmJiBkaXJlY3Rpb24gPT09ICdydGwnIHx8ICFzd2lwZXIucnRsICYmIGRpcmVjdGlvbiA9PT0gJ2x0cicpIHJldHVybjtcbiAgICBzd2lwZXIucnRsID0gZGlyZWN0aW9uID09PSAncnRsJztcbiAgICBzd2lwZXIucnRsVHJhbnNsYXRlID0gc3dpcGVyLnBhcmFtcy5kaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJyAmJiBzd2lwZXIucnRsO1xuICAgIGlmIChzd2lwZXIucnRsKSB7XG4gICAgICBzd2lwZXIuZWwuY2xhc3NMaXN0LmFkZChgJHtzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9cnRsYCk7XG4gICAgICBzd2lwZXIuZWwuZGlyID0gJ3J0bCc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5lbC5jbGFzc0xpc3QucmVtb3ZlKGAke3N3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc31ydGxgKTtcbiAgICAgIHN3aXBlci5lbC5kaXIgPSAnbHRyJztcbiAgICB9XG4gICAgc3dpcGVyLnVwZGF0ZSgpO1xuICB9XG4gIG1vdW50KGVsZW1lbnQpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmIChzd2lwZXIubW91bnRlZCkgcmV0dXJuIHRydWU7XG5cbiAgICAvLyBGaW5kIGVsXG4gICAgbGV0IGVsID0gZWxlbWVudCB8fCBzd2lwZXIucGFyYW1zLmVsO1xuICAgIGlmICh0eXBlb2YgZWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZWwpO1xuICAgIH1cbiAgICBpZiAoIWVsKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGVsLnN3aXBlciA9IHN3aXBlcjtcbiAgICBpZiAoZWwucGFyZW50Tm9kZSAmJiBlbC5wYXJlbnROb2RlLmhvc3QgJiYgZWwucGFyZW50Tm9kZS5ob3N0Lm5vZGVOYW1lID09PSBzd2lwZXIucGFyYW1zLnN3aXBlckVsZW1lbnROb2RlTmFtZS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICBzd2lwZXIuaXNFbGVtZW50ID0gdHJ1ZTtcbiAgICB9XG4gICAgY29uc3QgZ2V0V3JhcHBlclNlbGVjdG9yID0gKCkgPT4ge1xuICAgICAgcmV0dXJuIGAuJHsoc3dpcGVyLnBhcmFtcy53cmFwcGVyQ2xhc3MgfHwgJycpLnRyaW0oKS5zcGxpdCgnICcpLmpvaW4oJy4nKX1gO1xuICAgIH07XG4gICAgY29uc3QgZ2V0V3JhcHBlciA9ICgpID0+IHtcbiAgICAgIGlmIChlbCAmJiBlbC5zaGFkb3dSb290ICYmIGVsLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3Rvcikge1xuICAgICAgICBjb25zdCByZXMgPSBlbC5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoZ2V0V3JhcHBlclNlbGVjdG9yKCkpO1xuICAgICAgICAvLyBDaGlsZHJlbiBuZWVkcyB0byByZXR1cm4gc2xvdCBpdGVtc1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGVsZW1lbnRDaGlsZHJlbihlbCwgZ2V0V3JhcHBlclNlbGVjdG9yKCkpWzBdO1xuICAgIH07XG4gICAgLy8gRmluZCBXcmFwcGVyXG4gICAgbGV0IHdyYXBwZXJFbCA9IGdldFdyYXBwZXIoKTtcbiAgICBpZiAoIXdyYXBwZXJFbCAmJiBzd2lwZXIucGFyYW1zLmNyZWF0ZUVsZW1lbnRzKSB7XG4gICAgICB3cmFwcGVyRWwgPSBjcmVhdGVFbGVtZW50KCdkaXYnLCBzd2lwZXIucGFyYW1zLndyYXBwZXJDbGFzcyk7XG4gICAgICBlbC5hcHBlbmQod3JhcHBlckVsKTtcbiAgICAgIGVsZW1lbnRDaGlsZHJlbihlbCwgYC4ke3N3aXBlci5wYXJhbXMuc2xpZGVDbGFzc31gKS5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgICAgICB3cmFwcGVyRWwuYXBwZW5kKHNsaWRlRWwpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIE9iamVjdC5hc3NpZ24oc3dpcGVyLCB7XG4gICAgICBlbCxcbiAgICAgIHdyYXBwZXJFbCxcbiAgICAgIHNsaWRlc0VsOiBzd2lwZXIuaXNFbGVtZW50ICYmICFlbC5wYXJlbnROb2RlLmhvc3Quc2xpZGVTbG90cyA/IGVsLnBhcmVudE5vZGUuaG9zdCA6IHdyYXBwZXJFbCxcbiAgICAgIGhvc3RFbDogc3dpcGVyLmlzRWxlbWVudCA/IGVsLnBhcmVudE5vZGUuaG9zdCA6IGVsLFxuICAgICAgbW91bnRlZDogdHJ1ZSxcbiAgICAgIC8vIFJUTFxuICAgICAgcnRsOiBlbC5kaXIudG9Mb3dlckNhc2UoKSA9PT0gJ3J0bCcgfHwgZWxlbWVudFN0eWxlKGVsLCAnZGlyZWN0aW9uJykgPT09ICdydGwnLFxuICAgICAgcnRsVHJhbnNsYXRlOiBzd2lwZXIucGFyYW1zLmRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnICYmIChlbC5kaXIudG9Mb3dlckNhc2UoKSA9PT0gJ3J0bCcgfHwgZWxlbWVudFN0eWxlKGVsLCAnZGlyZWN0aW9uJykgPT09ICdydGwnKSxcbiAgICAgIHdyb25nUlRMOiBlbGVtZW50U3R5bGUod3JhcHBlckVsLCAnZGlzcGxheScpID09PSAnLXdlYmtpdC1ib3gnXG4gICAgfSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaW5pdChlbCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKHN3aXBlci5pbml0aWFsaXplZCkgcmV0dXJuIHN3aXBlcjtcbiAgICBjb25zdCBtb3VudGVkID0gc3dpcGVyLm1vdW50KGVsKTtcbiAgICBpZiAobW91bnRlZCA9PT0gZmFsc2UpIHJldHVybiBzd2lwZXI7XG4gICAgc3dpcGVyLmVtaXQoJ2JlZm9yZUluaXQnKTtcblxuICAgIC8vIFNldCBicmVha3BvaW50XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuYnJlYWtwb2ludHMpIHtcbiAgICAgIHN3aXBlci5zZXRCcmVha3BvaW50KCk7XG4gICAgfVxuXG4gICAgLy8gQWRkIENsYXNzZXNcbiAgICBzd2lwZXIuYWRkQ2xhc3NlcygpO1xuXG4gICAgLy8gVXBkYXRlIHNpemVcbiAgICBzd2lwZXIudXBkYXRlU2l6ZSgpO1xuXG4gICAgLy8gVXBkYXRlIHNsaWRlc1xuICAgIHN3aXBlci51cGRhdGVTbGlkZXMoKTtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93KSB7XG4gICAgICBzd2lwZXIuY2hlY2tPdmVyZmxvdygpO1xuICAgIH1cblxuICAgIC8vIFNldCBHcmFiIEN1cnNvclxuICAgIGlmIChzd2lwZXIucGFyYW1zLmdyYWJDdXJzb3IgJiYgc3dpcGVyLmVuYWJsZWQpIHtcbiAgICAgIHN3aXBlci5zZXRHcmFiQ3Vyc29yKCk7XG4gICAgfVxuXG4gICAgLy8gU2xpZGUgVG8gSW5pdGlhbCBTbGlkZVxuICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3AgJiYgc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5wYXJhbXMuaW5pdGlhbFNsaWRlICsgc3dpcGVyLnZpcnR1YWwuc2xpZGVzQmVmb3JlLCAwLCBzd2lwZXIucGFyYW1zLnJ1bkNhbGxiYWNrc09uSW5pdCwgZmFsc2UsIHRydWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIucGFyYW1zLmluaXRpYWxTbGlkZSwgMCwgc3dpcGVyLnBhcmFtcy5ydW5DYWxsYmFja3NPbkluaXQsIGZhbHNlLCB0cnVlKTtcbiAgICB9XG5cbiAgICAvLyBDcmVhdGUgbG9vcFxuICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgIHN3aXBlci5sb29wQ3JlYXRlKCk7XG4gICAgfVxuXG4gICAgLy8gQXR0YWNoIGV2ZW50c1xuICAgIHN3aXBlci5hdHRhY2hFdmVudHMoKTtcbiAgICBjb25zdCBsYXp5RWxlbWVudHMgPSBbLi4uc3dpcGVyLmVsLnF1ZXJ5U2VsZWN0b3JBbGwoJ1tsb2FkaW5nPVwibGF6eVwiXScpXTtcbiAgICBpZiAoc3dpcGVyLmlzRWxlbWVudCkge1xuICAgICAgbGF6eUVsZW1lbnRzLnB1c2goLi4uc3dpcGVyLmhvc3RFbC5xdWVyeVNlbGVjdG9yQWxsKCdbbG9hZGluZz1cImxhenlcIl0nKSk7XG4gICAgfVxuICAgIGxhenlFbGVtZW50cy5mb3JFYWNoKGltYWdlRWwgPT4ge1xuICAgICAgaWYgKGltYWdlRWwuY29tcGxldGUpIHtcbiAgICAgICAgcHJvY2Vzc0xhenlQcmVsb2FkZXIoc3dpcGVyLCBpbWFnZUVsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGltYWdlRWwuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGUgPT4ge1xuICAgICAgICAgIHByb2Nlc3NMYXp5UHJlbG9hZGVyKHN3aXBlciwgZS50YXJnZXQpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBwcmVsb2FkKHN3aXBlcik7XG5cbiAgICAvLyBJbml0IEZsYWdcbiAgICBzd2lwZXIuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgIHByZWxvYWQoc3dpcGVyKTtcblxuICAgIC8vIEVtaXRcbiAgICBzd2lwZXIuZW1pdCgnaW5pdCcpO1xuICAgIHN3aXBlci5lbWl0KCdhZnRlckluaXQnKTtcbiAgICByZXR1cm4gc3dpcGVyO1xuICB9XG4gIGRlc3Ryb3koZGVsZXRlSW5zdGFuY2UsIGNsZWFuU3R5bGVzKSB7XG4gICAgaWYgKGRlbGV0ZUluc3RhbmNlID09PSB2b2lkIDApIHtcbiAgICAgIGRlbGV0ZUluc3RhbmNlID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKGNsZWFuU3R5bGVzID09PSB2b2lkIDApIHtcbiAgICAgIGNsZWFuU3R5bGVzID0gdHJ1ZTtcbiAgICB9XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB7XG4gICAgICBwYXJhbXMsXG4gICAgICBlbCxcbiAgICAgIHdyYXBwZXJFbCxcbiAgICAgIHNsaWRlc1xuICAgIH0gPSBzd2lwZXI7XG4gICAgaWYgKHR5cGVvZiBzd2lwZXIucGFyYW1zID09PSAndW5kZWZpbmVkJyB8fCBzd2lwZXIuZGVzdHJveWVkKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgc3dpcGVyLmVtaXQoJ2JlZm9yZURlc3Ryb3knKTtcblxuICAgIC8vIEluaXQgRmxhZ1xuICAgIHN3aXBlci5pbml0aWFsaXplZCA9IGZhbHNlO1xuXG4gICAgLy8gRGV0YWNoIGV2ZW50c1xuICAgIHN3aXBlci5kZXRhY2hFdmVudHMoKTtcblxuICAgIC8vIERlc3Ryb3kgbG9vcFxuICAgIGlmIChwYXJhbXMubG9vcCkge1xuICAgICAgc3dpcGVyLmxvb3BEZXN0cm95KCk7XG4gICAgfVxuXG4gICAgLy8gQ2xlYW51cCBzdHlsZXNcbiAgICBpZiAoY2xlYW5TdHlsZXMpIHtcbiAgICAgIHN3aXBlci5yZW1vdmVDbGFzc2VzKCk7XG4gICAgICBpZiAoZWwgJiYgdHlwZW9mIGVsICE9PSAnc3RyaW5nJykge1xuICAgICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoJ3N0eWxlJyk7XG4gICAgICB9XG4gICAgICBpZiAod3JhcHBlckVsKSB7XG4gICAgICAgIHdyYXBwZXJFbC5yZW1vdmVBdHRyaWJ1dGUoJ3N0eWxlJyk7XG4gICAgICB9XG4gICAgICBpZiAoc2xpZGVzICYmIHNsaWRlcy5sZW5ndGgpIHtcbiAgICAgICAgc2xpZGVzLmZvckVhY2goc2xpZGVFbCA9PiB7XG4gICAgICAgICAgc2xpZGVFbC5jbGFzc0xpc3QucmVtb3ZlKHBhcmFtcy5zbGlkZVZpc2libGVDbGFzcywgcGFyYW1zLnNsaWRlRnVsbHlWaXNpYmxlQ2xhc3MsIHBhcmFtcy5zbGlkZUFjdGl2ZUNsYXNzLCBwYXJhbXMuc2xpZGVOZXh0Q2xhc3MsIHBhcmFtcy5zbGlkZVByZXZDbGFzcyk7XG4gICAgICAgICAgc2xpZGVFbC5yZW1vdmVBdHRyaWJ1dGUoJ3N0eWxlJyk7XG4gICAgICAgICAgc2xpZGVFbC5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4Jyk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICBzd2lwZXIuZW1pdCgnZGVzdHJveScpO1xuXG4gICAgLy8gRGV0YWNoIGVtaXR0ZXIgZXZlbnRzXG4gICAgT2JqZWN0LmtleXMoc3dpcGVyLmV2ZW50c0xpc3RlbmVycykuZm9yRWFjaChldmVudE5hbWUgPT4ge1xuICAgICAgc3dpcGVyLm9mZihldmVudE5hbWUpO1xuICAgIH0pO1xuICAgIGlmIChkZWxldGVJbnN0YW5jZSAhPT0gZmFsc2UpIHtcbiAgICAgIGlmIChzd2lwZXIuZWwgJiYgdHlwZW9mIHN3aXBlci5lbCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgc3dpcGVyLmVsLnN3aXBlciA9IG51bGw7XG4gICAgICB9XG4gICAgICBkZWxldGVQcm9wcyhzd2lwZXIpO1xuICAgIH1cbiAgICBzd2lwZXIuZGVzdHJveWVkID0gdHJ1ZTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBzdGF0aWMgZXh0ZW5kRGVmYXVsdHMobmV3RGVmYXVsdHMpIHtcbiAgICBleHRlbmQoZXh0ZW5kZWREZWZhdWx0cywgbmV3RGVmYXVsdHMpO1xuICB9XG4gIHN0YXRpYyBnZXQgZXh0ZW5kZWREZWZhdWx0cygpIHtcbiAgICByZXR1cm4gZXh0ZW5kZWREZWZhdWx0cztcbiAgfVxuICBzdGF0aWMgZ2V0IGRlZmF1bHRzKCkge1xuICAgIHJldHVybiBkZWZhdWx0cztcbiAgfVxuICBzdGF0aWMgaW5zdGFsbE1vZHVsZShtb2QpIHtcbiAgICBpZiAoIVN3aXBlci5wcm90b3R5cGUuX19tb2R1bGVzX18pIFN3aXBlci5wcm90b3R5cGUuX19tb2R1bGVzX18gPSBbXTtcbiAgICBjb25zdCBtb2R1bGVzID0gU3dpcGVyLnByb3RvdHlwZS5fX21vZHVsZXNfXztcbiAgICBpZiAodHlwZW9mIG1vZCA9PT0gJ2Z1bmN0aW9uJyAmJiBtb2R1bGVzLmluZGV4T2YobW9kKSA8IDApIHtcbiAgICAgIG1vZHVsZXMucHVzaChtb2QpO1xuICAgIH1cbiAgfVxuICBzdGF0aWMgdXNlKG1vZHVsZSkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KG1vZHVsZSkpIHtcbiAgICAgIG1vZHVsZS5mb3JFYWNoKG0gPT4gU3dpcGVyLmluc3RhbGxNb2R1bGUobSkpO1xuICAgICAgcmV0dXJuIFN3aXBlcjtcbiAgICB9XG4gICAgU3dpcGVyLmluc3RhbGxNb2R1bGUobW9kdWxlKTtcbiAgICByZXR1cm4gU3dpcGVyO1xuICB9XG59XG5PYmplY3Qua2V5cyhwcm90b3R5cGVzKS5mb3JFYWNoKHByb3RvdHlwZUdyb3VwID0+IHtcbiAgT2JqZWN0LmtleXMocHJvdG90eXBlc1twcm90b3R5cGVHcm91cF0pLmZvckVhY2gocHJvdG9NZXRob2QgPT4ge1xuICAgIFN3aXBlci5wcm90b3R5cGVbcHJvdG9NZXRob2RdID0gcHJvdG90eXBlc1twcm90b3R5cGVHcm91cF1bcHJvdG9NZXRob2RdO1xuICB9KTtcbn0pO1xuU3dpcGVyLnVzZShbUmVzaXplLCBPYnNlcnZlcl0pO1xuXG5leHBvcnQgeyBTd2lwZXIgYXMgUywgZGVmYXVsdHMgYXMgZCB9O1xuIiwiZnVuY3Rpb24gY2xhc3Nlc1RvU2VsZWN0b3IoY2xhc3Nlcykge1xuICBpZiAoY2xhc3NlcyA9PT0gdm9pZCAwKSB7XG4gICAgY2xhc3NlcyA9ICcnO1xuICB9XG4gIHJldHVybiBgLiR7Y2xhc3Nlcy50cmltKCkucmVwbGFjZSgvKFtcXC46IStcXC9dKS9nLCAnXFxcXCQxJykgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAucmVwbGFjZSgvIC9nLCAnLicpfWA7XG59XG5cbmV4cG9ydCB7IGNsYXNzZXNUb1NlbGVjdG9yIGFzIGMgfTtcbiIsImltcG9ydCBcIi4uLy4uL3Njc3Mvc2VjdGlvbnMvZmVlZC1jaGFwdGVyLnNjc3NcIjtcbmltcG9ydCBcIi4uLy4uL3Njc3Mvc2VjdGlvbnMvaXRlbXMtY2Fyb3VzZWwuc2Nzc1wiO1xud2luZG93LmlubmVyV2lkdGggPiAxMDI0ICYmIGltcG9ydChcIi4uL2xpYi9sb2NvbW90aXZlLXNjcm9sbFwiKTtcblxuaW1wb3J0IFwiLi4vYW5pbS9pdGVtLWNhcmQtY2Fyb3VzZWxcIjtcbmltcG9ydCBcIi4uL2xpYi9saWdodGdhbGxlcnlcIjtcbmltcG9ydCBTd2lwZXIgZnJvbSBcInN3aXBlclwiO1xuaW1wb3J0IHsgUGFnaW5hdGlvbiB9IGZyb20gXCJzd2lwZXIvbW9kdWxlc1wiO1xuaW1wb3J0IFwic3dpcGVyL2Nzc1wiO1xuaW1wb3J0IHsgdG9nZ2xlU2Nyb2xsIH0gZnJvbSBcIi4uL2xpYi9sb2NvbW90aXZlLXNjcm9sbFwiO1xuXG5pZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5mZWVkLWNoYXB0ZXJfX2JnLXN3aXBlclwiKSkge1xuICBuZXcgU3dpcGVyKFwiLmZlZWQtY2hhcHRlcl9fYmctc3dpcGVyXCIsIHtcbiAgICBtb2R1bGVzOiBbUGFnaW5hdGlvbl0sXG4gICAgbG9vcDogdHJ1ZSxcbiAgICBwYWdpbmF0aW9uOiB7XG4gICAgICBlbDogXCIuZmVlZC1jaGFwdGVyX19wYWdpbmF0aW9uXCIsXG4gICAgICB0eXBlOiBcImJ1bGxldHNcIixcbiAgICAgIGNsaWNrYWJsZTogdHJ1ZSxcbiAgICB9LFxuXG4gICAgb246IHRvZ2dsZVNjcm9sbCxcbiAgfSk7XG59XG5pZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5mZWVkLWNoYXB0ZXJfX2ltYWdlcy1zd2lwZXJcIikpIHtcbiAgbmV3IFN3aXBlcihcIi5mZWVkLWNoYXB0ZXJfX2ltYWdlcy1zd2lwZXJcIiwge1xuICAgIGxvb3A6IHRydWUsXG4gICAgc2xpZGVzUGVyVmlldzogXCJhdXRvXCIsXG4gICAgc3BhY2VCZXR3ZWVuOiB3aW5kb3cuaW5uZXJXaWR0aCA+IDc2OCA/IDE3IDogOCxcbiAgICBmcmVlbW9kZTogdHJ1ZSxcbiAgICBvbjogdG9nZ2xlU2Nyb2xsLFxuICB9KTtcbn1cbiIsImltcG9ydCB7IGMgYXMgY2xhc3Nlc1RvU2VsZWN0b3IgfSBmcm9tICcuLi9zaGFyZWQvY2xhc3Nlcy10by1zZWxlY3Rvci5tanMnO1xuaW1wb3J0IHsgYyBhcyBjcmVhdGVFbGVtZW50SWZOb3REZWZpbmVkIH0gZnJvbSAnLi4vc2hhcmVkL2NyZWF0ZS1lbGVtZW50LWlmLW5vdC1kZWZpbmVkLm1qcyc7XG5pbXBvcnQgeyBtIGFzIG1ha2VFbGVtZW50c0FycmF5LCBmIGFzIGVsZW1lbnRPdXRlclNpemUsIGggYXMgZWxlbWVudEluZGV4LCBhIGFzIGVsZW1lbnRQYXJlbnRzIH0gZnJvbSAnLi4vc2hhcmVkL3V0aWxzLm1qcyc7XG5cbmZ1bmN0aW9uIFBhZ2luYXRpb24oX3JlZikge1xuICBsZXQge1xuICAgIHN3aXBlcixcbiAgICBleHRlbmRQYXJhbXMsXG4gICAgb24sXG4gICAgZW1pdFxuICB9ID0gX3JlZjtcbiAgY29uc3QgcGZ4ID0gJ3N3aXBlci1wYWdpbmF0aW9uJztcbiAgZXh0ZW5kUGFyYW1zKHtcbiAgICBwYWdpbmF0aW9uOiB7XG4gICAgICBlbDogbnVsbCxcbiAgICAgIGJ1bGxldEVsZW1lbnQ6ICdzcGFuJyxcbiAgICAgIGNsaWNrYWJsZTogZmFsc2UsXG4gICAgICBoaWRlT25DbGljazogZmFsc2UsXG4gICAgICByZW5kZXJCdWxsZXQ6IG51bGwsXG4gICAgICByZW5kZXJQcm9ncmVzc2JhcjogbnVsbCxcbiAgICAgIHJlbmRlckZyYWN0aW9uOiBudWxsLFxuICAgICAgcmVuZGVyQ3VzdG9tOiBudWxsLFxuICAgICAgcHJvZ3Jlc3NiYXJPcHBvc2l0ZTogZmFsc2UsXG4gICAgICB0eXBlOiAnYnVsbGV0cycsXG4gICAgICAvLyAnYnVsbGV0cycgb3IgJ3Byb2dyZXNzYmFyJyBvciAnZnJhY3Rpb24nIG9yICdjdXN0b20nXG4gICAgICBkeW5hbWljQnVsbGV0czogZmFsc2UsXG4gICAgICBkeW5hbWljTWFpbkJ1bGxldHM6IDEsXG4gICAgICBmb3JtYXRGcmFjdGlvbkN1cnJlbnQ6IG51bWJlciA9PiBudW1iZXIsXG4gICAgICBmb3JtYXRGcmFjdGlvblRvdGFsOiBudW1iZXIgPT4gbnVtYmVyLFxuICAgICAgYnVsbGV0Q2xhc3M6IGAke3BmeH0tYnVsbGV0YCxcbiAgICAgIGJ1bGxldEFjdGl2ZUNsYXNzOiBgJHtwZnh9LWJ1bGxldC1hY3RpdmVgLFxuICAgICAgbW9kaWZpZXJDbGFzczogYCR7cGZ4fS1gLFxuICAgICAgY3VycmVudENsYXNzOiBgJHtwZnh9LWN1cnJlbnRgLFxuICAgICAgdG90YWxDbGFzczogYCR7cGZ4fS10b3RhbGAsXG4gICAgICBoaWRkZW5DbGFzczogYCR7cGZ4fS1oaWRkZW5gLFxuICAgICAgcHJvZ3Jlc3NiYXJGaWxsQ2xhc3M6IGAke3BmeH0tcHJvZ3Jlc3NiYXItZmlsbGAsXG4gICAgICBwcm9ncmVzc2Jhck9wcG9zaXRlQ2xhc3M6IGAke3BmeH0tcHJvZ3Jlc3NiYXItb3Bwb3NpdGVgLFxuICAgICAgY2xpY2thYmxlQ2xhc3M6IGAke3BmeH0tY2xpY2thYmxlYCxcbiAgICAgIGxvY2tDbGFzczogYCR7cGZ4fS1sb2NrYCxcbiAgICAgIGhvcml6b250YWxDbGFzczogYCR7cGZ4fS1ob3Jpem9udGFsYCxcbiAgICAgIHZlcnRpY2FsQ2xhc3M6IGAke3BmeH0tdmVydGljYWxgLFxuICAgICAgcGFnaW5hdGlvbkRpc2FibGVkQ2xhc3M6IGAke3BmeH0tZGlzYWJsZWRgXG4gICAgfVxuICB9KTtcbiAgc3dpcGVyLnBhZ2luYXRpb24gPSB7XG4gICAgZWw6IG51bGwsXG4gICAgYnVsbGV0czogW11cbiAgfTtcbiAgbGV0IGJ1bGxldFNpemU7XG4gIGxldCBkeW5hbWljQnVsbGV0SW5kZXggPSAwO1xuICBmdW5jdGlvbiBpc1BhZ2luYXRpb25EaXNhYmxlZCgpIHtcbiAgICByZXR1cm4gIXN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5lbCB8fCAhc3dpcGVyLnBhZ2luYXRpb24uZWwgfHwgQXJyYXkuaXNBcnJheShzd2lwZXIucGFnaW5hdGlvbi5lbCkgJiYgc3dpcGVyLnBhZ2luYXRpb24uZWwubGVuZ3RoID09PSAwO1xuICB9XG4gIGZ1bmN0aW9uIHNldFNpZGVCdWxsZXRzKGJ1bGxldEVsLCBwb3NpdGlvbikge1xuICAgIGNvbnN0IHtcbiAgICAgIGJ1bGxldEFjdGl2ZUNsYXNzXG4gICAgfSA9IHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbjtcbiAgICBpZiAoIWJ1bGxldEVsKSByZXR1cm47XG4gICAgYnVsbGV0RWwgPSBidWxsZXRFbFtgJHtwb3NpdGlvbiA9PT0gJ3ByZXYnID8gJ3ByZXZpb3VzJyA6ICduZXh0J31FbGVtZW50U2libGluZ2BdO1xuICAgIGlmIChidWxsZXRFbCkge1xuICAgICAgYnVsbGV0RWwuY2xhc3NMaXN0LmFkZChgJHtidWxsZXRBY3RpdmVDbGFzc30tJHtwb3NpdGlvbn1gKTtcbiAgICAgIGJ1bGxldEVsID0gYnVsbGV0RWxbYCR7cG9zaXRpb24gPT09ICdwcmV2JyA/ICdwcmV2aW91cycgOiAnbmV4dCd9RWxlbWVudFNpYmxpbmdgXTtcbiAgICAgIGlmIChidWxsZXRFbCkge1xuICAgICAgICBidWxsZXRFbC5jbGFzc0xpc3QuYWRkKGAke2J1bGxldEFjdGl2ZUNsYXNzfS0ke3Bvc2l0aW9ufS0ke3Bvc2l0aW9ufWApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBvbkJ1bGxldENsaWNrKGUpIHtcbiAgICBjb25zdCBidWxsZXRFbCA9IGUudGFyZ2V0LmNsb3Nlc3QoY2xhc3Nlc1RvU2VsZWN0b3Ioc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmJ1bGxldENsYXNzKSk7XG4gICAgaWYgKCFidWxsZXRFbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgY29uc3QgaW5kZXggPSBlbGVtZW50SW5kZXgoYnVsbGV0RWwpICogc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cDtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICBpZiAoc3dpcGVyLnJlYWxJbmRleCA9PT0gaW5kZXgpIHJldHVybjtcbiAgICAgIHN3aXBlci5zbGlkZVRvTG9vcChpbmRleCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKGluZGV4KTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgIC8vIFJlbmRlciB8fCBVcGRhdGUgUGFnaW5hdGlvbiBidWxsZXRzL2l0ZW1zXG4gICAgY29uc3QgcnRsID0gc3dpcGVyLnJ0bDtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb247XG4gICAgaWYgKGlzUGFnaW5hdGlvbkRpc2FibGVkKCkpIHJldHVybjtcbiAgICBsZXQgZWwgPSBzd2lwZXIucGFnaW5hdGlvbi5lbDtcbiAgICBlbCA9IG1ha2VFbGVtZW50c0FycmF5KGVsKTtcbiAgICAvLyBDdXJyZW50L1RvdGFsXG4gICAgbGV0IGN1cnJlbnQ7XG4gICAgbGV0IHByZXZpb3VzSW5kZXg7XG4gICAgY29uc3Qgc2xpZGVzTGVuZ3RoID0gc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQgPyBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoIDogc3dpcGVyLnNsaWRlcy5sZW5ndGg7XG4gICAgY29uc3QgdG90YWwgPSBzd2lwZXIucGFyYW1zLmxvb3AgPyBNYXRoLmNlaWwoc2xpZGVzTGVuZ3RoIC8gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCkgOiBzd2lwZXIuc25hcEdyaWQubGVuZ3RoO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgIHByZXZpb3VzSW5kZXggPSBzd2lwZXIucHJldmlvdXNSZWFsSW5kZXggfHwgMDtcbiAgICAgIGN1cnJlbnQgPSBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwID4gMSA/IE1hdGguZmxvb3Ioc3dpcGVyLnJlYWxJbmRleCAvIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXApIDogc3dpcGVyLnJlYWxJbmRleDtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBzd2lwZXIuc25hcEluZGV4ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY3VycmVudCA9IHN3aXBlci5zbmFwSW5kZXg7XG4gICAgICBwcmV2aW91c0luZGV4ID0gc3dpcGVyLnByZXZpb3VzU25hcEluZGV4O1xuICAgIH0gZWxzZSB7XG4gICAgICBwcmV2aW91c0luZGV4ID0gc3dpcGVyLnByZXZpb3VzSW5kZXggfHwgMDtcbiAgICAgIGN1cnJlbnQgPSBzd2lwZXIuYWN0aXZlSW5kZXggfHwgMDtcbiAgICB9XG4gICAgLy8gVHlwZXNcbiAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdidWxsZXRzJyAmJiBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzICYmIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgYnVsbGV0cyA9IHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHM7XG4gICAgICBsZXQgZmlyc3RJbmRleDtcbiAgICAgIGxldCBsYXN0SW5kZXg7XG4gICAgICBsZXQgbWlkSW5kZXg7XG4gICAgICBpZiAocGFyYW1zLmR5bmFtaWNCdWxsZXRzKSB7XG4gICAgICAgIGJ1bGxldFNpemUgPSBlbGVtZW50T3V0ZXJTaXplKGJ1bGxldHNbMF0sIHN3aXBlci5pc0hvcml6b250YWwoKSA/ICd3aWR0aCcgOiAnaGVpZ2h0JywgdHJ1ZSk7XG4gICAgICAgIGVsLmZvckVhY2goc3ViRWwgPT4ge1xuICAgICAgICAgIHN1YkVsLnN0eWxlW3N3aXBlci5pc0hvcml6b250YWwoKSA/ICd3aWR0aCcgOiAnaGVpZ2h0J10gPSBgJHtidWxsZXRTaXplICogKHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMgKyA0KX1weGA7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAocGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyA+IDEgJiYgcHJldmlvdXNJbmRleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgZHluYW1pY0J1bGxldEluZGV4ICs9IGN1cnJlbnQgLSAocHJldmlvdXNJbmRleCB8fCAwKTtcbiAgICAgICAgICBpZiAoZHluYW1pY0J1bGxldEluZGV4ID4gcGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyAtIDEpIHtcbiAgICAgICAgICAgIGR5bmFtaWNCdWxsZXRJbmRleCA9IHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMgLSAxO1xuICAgICAgICAgIH0gZWxzZSBpZiAoZHluYW1pY0J1bGxldEluZGV4IDwgMCkge1xuICAgICAgICAgICAgZHluYW1pY0J1bGxldEluZGV4ID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZmlyc3RJbmRleCA9IE1hdGgubWF4KGN1cnJlbnQgLSBkeW5hbWljQnVsbGV0SW5kZXgsIDApO1xuICAgICAgICBsYXN0SW5kZXggPSBmaXJzdEluZGV4ICsgKE1hdGgubWluKGJ1bGxldHMubGVuZ3RoLCBwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzKSAtIDEpO1xuICAgICAgICBtaWRJbmRleCA9IChsYXN0SW5kZXggKyBmaXJzdEluZGV4KSAvIDI7XG4gICAgICB9XG4gICAgICBidWxsZXRzLmZvckVhY2goYnVsbGV0RWwgPT4ge1xuICAgICAgICBjb25zdCBjbGFzc2VzVG9SZW1vdmUgPSBbLi4uWycnLCAnLW5leHQnLCAnLW5leHQtbmV4dCcsICctcHJldicsICctcHJldi1wcmV2JywgJy1tYWluJ10ubWFwKHN1ZmZpeCA9PiBgJHtwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3N9JHtzdWZmaXh9YCldLm1hcChzID0+IHR5cGVvZiBzID09PSAnc3RyaW5nJyAmJiBzLmluY2x1ZGVzKCcgJykgPyBzLnNwbGl0KCcgJykgOiBzKS5mbGF0KCk7XG4gICAgICAgIGJ1bGxldEVsLmNsYXNzTGlzdC5yZW1vdmUoLi4uY2xhc3Nlc1RvUmVtb3ZlKTtcbiAgICAgIH0pO1xuICAgICAgaWYgKGVsLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgYnVsbGV0cy5mb3JFYWNoKGJ1bGxldCA9PiB7XG4gICAgICAgICAgY29uc3QgYnVsbGV0SW5kZXggPSBlbGVtZW50SW5kZXgoYnVsbGV0KTtcbiAgICAgICAgICBpZiAoYnVsbGV0SW5kZXggPT09IGN1cnJlbnQpIHtcbiAgICAgICAgICAgIGJ1bGxldC5jbGFzc0xpc3QuYWRkKC4uLnBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcy5zcGxpdCgnICcpKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHN3aXBlci5pc0VsZW1lbnQpIHtcbiAgICAgICAgICAgIGJ1bGxldC5zZXRBdHRyaWJ1dGUoJ3BhcnQnLCAnYnVsbGV0Jyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChwYXJhbXMuZHluYW1pY0J1bGxldHMpIHtcbiAgICAgICAgICAgIGlmIChidWxsZXRJbmRleCA+PSBmaXJzdEluZGV4ICYmIGJ1bGxldEluZGV4IDw9IGxhc3RJbmRleCkge1xuICAgICAgICAgICAgICBidWxsZXQuY2xhc3NMaXN0LmFkZCguLi5gJHtwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3N9LW1haW5gLnNwbGl0KCcgJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGJ1bGxldEluZGV4ID09PSBmaXJzdEluZGV4KSB7XG4gICAgICAgICAgICAgIHNldFNpZGVCdWxsZXRzKGJ1bGxldCwgJ3ByZXYnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChidWxsZXRJbmRleCA9PT0gbGFzdEluZGV4KSB7XG4gICAgICAgICAgICAgIHNldFNpZGVCdWxsZXRzKGJ1bGxldCwgJ25leHQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgYnVsbGV0ID0gYnVsbGV0c1tjdXJyZW50XTtcbiAgICAgICAgaWYgKGJ1bGxldCkge1xuICAgICAgICAgIGJ1bGxldC5jbGFzc0xpc3QuYWRkKC4uLnBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcy5zcGxpdCgnICcpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3dpcGVyLmlzRWxlbWVudCkge1xuICAgICAgICAgIGJ1bGxldHMuZm9yRWFjaCgoYnVsbGV0RWwsIGJ1bGxldEluZGV4KSA9PiB7XG4gICAgICAgICAgICBidWxsZXRFbC5zZXRBdHRyaWJ1dGUoJ3BhcnQnLCBidWxsZXRJbmRleCA9PT0gY3VycmVudCA/ICdidWxsZXQtYWN0aXZlJyA6ICdidWxsZXQnKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFyYW1zLmR5bmFtaWNCdWxsZXRzKSB7XG4gICAgICAgICAgY29uc3QgZmlyc3REaXNwbGF5ZWRCdWxsZXQgPSBidWxsZXRzW2ZpcnN0SW5kZXhdO1xuICAgICAgICAgIGNvbnN0IGxhc3REaXNwbGF5ZWRCdWxsZXQgPSBidWxsZXRzW2xhc3RJbmRleF07XG4gICAgICAgICAgZm9yIChsZXQgaSA9IGZpcnN0SW5kZXg7IGkgPD0gbGFzdEluZGV4OyBpICs9IDEpIHtcbiAgICAgICAgICAgIGlmIChidWxsZXRzW2ldKSB7XG4gICAgICAgICAgICAgIGJ1bGxldHNbaV0uY2xhc3NMaXN0LmFkZCguLi5gJHtwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3N9LW1haW5gLnNwbGl0KCcgJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBzZXRTaWRlQnVsbGV0cyhmaXJzdERpc3BsYXllZEJ1bGxldCwgJ3ByZXYnKTtcbiAgICAgICAgICBzZXRTaWRlQnVsbGV0cyhsYXN0RGlzcGxheWVkQnVsbGV0LCAnbmV4dCcpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocGFyYW1zLmR5bmFtaWNCdWxsZXRzKSB7XG4gICAgICAgIGNvbnN0IGR5bmFtaWNCdWxsZXRzTGVuZ3RoID0gTWF0aC5taW4oYnVsbGV0cy5sZW5ndGgsIHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMgKyA0KTtcbiAgICAgICAgY29uc3QgYnVsbGV0c09mZnNldCA9IChidWxsZXRTaXplICogZHluYW1pY0J1bGxldHNMZW5ndGggLSBidWxsZXRTaXplKSAvIDIgLSBtaWRJbmRleCAqIGJ1bGxldFNpemU7XG4gICAgICAgIGNvbnN0IG9mZnNldFByb3AgPSBydGwgPyAncmlnaHQnIDogJ2xlZnQnO1xuICAgICAgICBidWxsZXRzLmZvckVhY2goYnVsbGV0ID0+IHtcbiAgICAgICAgICBidWxsZXQuc3R5bGVbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gb2Zmc2V0UHJvcCA6ICd0b3AnXSA9IGAke2J1bGxldHNPZmZzZXR9cHhgO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWwuZm9yRWFjaCgoc3ViRWwsIHN1YkVsSW5kZXgpID0+IHtcbiAgICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2ZyYWN0aW9uJykge1xuICAgICAgICBzdWJFbC5xdWVyeVNlbGVjdG9yQWxsKGNsYXNzZXNUb1NlbGVjdG9yKHBhcmFtcy5jdXJyZW50Q2xhc3MpKS5mb3JFYWNoKGZyYWN0aW9uRWwgPT4ge1xuICAgICAgICAgIGZyYWN0aW9uRWwudGV4dENvbnRlbnQgPSBwYXJhbXMuZm9ybWF0RnJhY3Rpb25DdXJyZW50KGN1cnJlbnQgKyAxKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHN1YkVsLnF1ZXJ5U2VsZWN0b3JBbGwoY2xhc3Nlc1RvU2VsZWN0b3IocGFyYW1zLnRvdGFsQ2xhc3MpKS5mb3JFYWNoKHRvdGFsRWwgPT4ge1xuICAgICAgICAgIHRvdGFsRWwudGV4dENvbnRlbnQgPSBwYXJhbXMuZm9ybWF0RnJhY3Rpb25Ub3RhbCh0b3RhbCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKHBhcmFtcy50eXBlID09PSAncHJvZ3Jlc3NiYXInKSB7XG4gICAgICAgIGxldCBwcm9ncmVzc2JhckRpcmVjdGlvbjtcbiAgICAgICAgaWYgKHBhcmFtcy5wcm9ncmVzc2Jhck9wcG9zaXRlKSB7XG4gICAgICAgICAgcHJvZ3Jlc3NiYXJEaXJlY3Rpb24gPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAndmVydGljYWwnIDogJ2hvcml6b250YWwnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByb2dyZXNzYmFyRGlyZWN0aW9uID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ2hvcml6b250YWwnIDogJ3ZlcnRpY2FsJztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzY2FsZSA9IChjdXJyZW50ICsgMSkgLyB0b3RhbDtcbiAgICAgICAgbGV0IHNjYWxlWCA9IDE7XG4gICAgICAgIGxldCBzY2FsZVkgPSAxO1xuICAgICAgICBpZiAocHJvZ3Jlc3NiYXJEaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJykge1xuICAgICAgICAgIHNjYWxlWCA9IHNjYWxlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNjYWxlWSA9IHNjYWxlO1xuICAgICAgICB9XG4gICAgICAgIHN1YkVsLnF1ZXJ5U2VsZWN0b3JBbGwoY2xhc3Nlc1RvU2VsZWN0b3IocGFyYW1zLnByb2dyZXNzYmFyRmlsbENsYXNzKSkuZm9yRWFjaChwcm9ncmVzc0VsID0+IHtcbiAgICAgICAgICBwcm9ncmVzc0VsLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUzZCgwLDAsMCkgc2NhbGVYKCR7c2NhbGVYfSkgc2NhbGVZKCR7c2NhbGVZfSlgO1xuICAgICAgICAgIHByb2dyZXNzRWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gYCR7c3dpcGVyLnBhcmFtcy5zcGVlZH1tc2A7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKHBhcmFtcy50eXBlID09PSAnY3VzdG9tJyAmJiBwYXJhbXMucmVuZGVyQ3VzdG9tKSB7XG4gICAgICAgIHN1YkVsLmlubmVySFRNTCA9IHBhcmFtcy5yZW5kZXJDdXN0b20oc3dpcGVyLCBjdXJyZW50ICsgMSwgdG90YWwpO1xuICAgICAgICBpZiAoc3ViRWxJbmRleCA9PT0gMCkgZW1pdCgncGFnaW5hdGlvblJlbmRlcicsIHN1YkVsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChzdWJFbEluZGV4ID09PSAwKSBlbWl0KCdwYWdpbmF0aW9uUmVuZGVyJywgc3ViRWwpO1xuICAgICAgICBlbWl0KCdwYWdpbmF0aW9uVXBkYXRlJywgc3ViRWwpO1xuICAgICAgfVxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzd2lwZXIuZW5hYmxlZCkge1xuICAgICAgICBzdWJFbC5jbGFzc0xpc3Rbc3dpcGVyLmlzTG9ja2VkID8gJ2FkZCcgOiAncmVtb3ZlJ10ocGFyYW1zLmxvY2tDbGFzcyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIC8vIFJlbmRlciBDb250YWluZXJcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb247XG4gICAgaWYgKGlzUGFnaW5hdGlvbkRpc2FibGVkKCkpIHJldHVybjtcbiAgICBjb25zdCBzbGlkZXNMZW5ndGggPSBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCA/IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggOiBzd2lwZXIuZ3JpZCAmJiBzd2lwZXIucGFyYW1zLmdyaWQucm93cyA+IDEgPyBzd2lwZXIuc2xpZGVzLmxlbmd0aCAvIE1hdGguY2VpbChzd2lwZXIucGFyYW1zLmdyaWQucm93cykgOiBzd2lwZXIuc2xpZGVzLmxlbmd0aDtcbiAgICBsZXQgZWwgPSBzd2lwZXIucGFnaW5hdGlvbi5lbDtcbiAgICBlbCA9IG1ha2VFbGVtZW50c0FycmF5KGVsKTtcbiAgICBsZXQgcGFnaW5hdGlvbkhUTUwgPSAnJztcbiAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdidWxsZXRzJykge1xuICAgICAgbGV0IG51bWJlck9mQnVsbGV0cyA9IHN3aXBlci5wYXJhbXMubG9vcCA/IE1hdGguY2VpbChzbGlkZXNMZW5ndGggLyBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwKSA6IHN3aXBlci5zbmFwR3JpZC5sZW5ndGg7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5mcmVlTW9kZSAmJiBzd2lwZXIucGFyYW1zLmZyZWVNb2RlLmVuYWJsZWQgJiYgbnVtYmVyT2ZCdWxsZXRzID4gc2xpZGVzTGVuZ3RoKSB7XG4gICAgICAgIG51bWJlck9mQnVsbGV0cyA9IHNsaWRlc0xlbmd0aDtcbiAgICAgIH1cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtYmVyT2ZCdWxsZXRzOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKHBhcmFtcy5yZW5kZXJCdWxsZXQpIHtcbiAgICAgICAgICBwYWdpbmF0aW9uSFRNTCArPSBwYXJhbXMucmVuZGVyQnVsbGV0LmNhbGwoc3dpcGVyLCBpLCBwYXJhbXMuYnVsbGV0Q2xhc3MpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIHByZXR0aWVyLWlnbm9yZVxuICAgICAgICAgIHBhZ2luYXRpb25IVE1MICs9IGA8JHtwYXJhbXMuYnVsbGV0RWxlbWVudH0gJHtzd2lwZXIuaXNFbGVtZW50ID8gJ3BhcnQ9XCJidWxsZXRcIicgOiAnJ30gY2xhc3M9XCIke3BhcmFtcy5idWxsZXRDbGFzc31cIj48LyR7cGFyYW1zLmJ1bGxldEVsZW1lbnR9PmA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHBhcmFtcy50eXBlID09PSAnZnJhY3Rpb24nKSB7XG4gICAgICBpZiAocGFyYW1zLnJlbmRlckZyYWN0aW9uKSB7XG4gICAgICAgIHBhZ2luYXRpb25IVE1MID0gcGFyYW1zLnJlbmRlckZyYWN0aW9uLmNhbGwoc3dpcGVyLCBwYXJhbXMuY3VycmVudENsYXNzLCBwYXJhbXMudG90YWxDbGFzcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYWdpbmF0aW9uSFRNTCA9IGA8c3BhbiBjbGFzcz1cIiR7cGFyYW1zLmN1cnJlbnRDbGFzc31cIj48L3NwYW4+YCArICcgLyAnICsgYDxzcGFuIGNsYXNzPVwiJHtwYXJhbXMudG90YWxDbGFzc31cIj48L3NwYW4+YDtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHBhcmFtcy50eXBlID09PSAncHJvZ3Jlc3NiYXInKSB7XG4gICAgICBpZiAocGFyYW1zLnJlbmRlclByb2dyZXNzYmFyKSB7XG4gICAgICAgIHBhZ2luYXRpb25IVE1MID0gcGFyYW1zLnJlbmRlclByb2dyZXNzYmFyLmNhbGwoc3dpcGVyLCBwYXJhbXMucHJvZ3Jlc3NiYXJGaWxsQ2xhc3MpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFnaW5hdGlvbkhUTUwgPSBgPHNwYW4gY2xhc3M9XCIke3BhcmFtcy5wcm9ncmVzc2JhckZpbGxDbGFzc31cIj48L3NwYW4+YDtcbiAgICAgIH1cbiAgICB9XG4gICAgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cyA9IFtdO1xuICAgIGVsLmZvckVhY2goc3ViRWwgPT4ge1xuICAgICAgaWYgKHBhcmFtcy50eXBlICE9PSAnY3VzdG9tJykge1xuICAgICAgICBzdWJFbC5pbm5lckhUTUwgPSBwYWdpbmF0aW9uSFRNTCB8fCAnJztcbiAgICAgIH1cbiAgICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2J1bGxldHMnKSB7XG4gICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMucHVzaCguLi5zdWJFbC5xdWVyeVNlbGVjdG9yQWxsKGNsYXNzZXNUb1NlbGVjdG9yKHBhcmFtcy5idWxsZXRDbGFzcykpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAocGFyYW1zLnR5cGUgIT09ICdjdXN0b20nKSB7XG4gICAgICBlbWl0KCdwYWdpbmF0aW9uUmVuZGVyJywgZWxbMF0pO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBpbml0KCkge1xuICAgIHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbiA9IGNyZWF0ZUVsZW1lbnRJZk5vdERlZmluZWQoc3dpcGVyLCBzd2lwZXIub3JpZ2luYWxQYXJhbXMucGFnaW5hdGlvbiwgc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLCB7XG4gICAgICBlbDogJ3N3aXBlci1wYWdpbmF0aW9uJ1xuICAgIH0pO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbjtcbiAgICBpZiAoIXBhcmFtcy5lbCkgcmV0dXJuO1xuICAgIGxldCBlbDtcbiAgICBpZiAodHlwZW9mIHBhcmFtcy5lbCA9PT0gJ3N0cmluZycgJiYgc3dpcGVyLmlzRWxlbWVudCkge1xuICAgICAgZWwgPSBzd2lwZXIuZWwucXVlcnlTZWxlY3RvcihwYXJhbXMuZWwpO1xuICAgIH1cbiAgICBpZiAoIWVsICYmIHR5cGVvZiBwYXJhbXMuZWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbCA9IFsuLi5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHBhcmFtcy5lbCldO1xuICAgIH1cbiAgICBpZiAoIWVsKSB7XG4gICAgICBlbCA9IHBhcmFtcy5lbDtcbiAgICB9XG4gICAgaWYgKCFlbCB8fCBlbC5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy51bmlxdWVOYXZFbGVtZW50cyAmJiB0eXBlb2YgcGFyYW1zLmVsID09PSAnc3RyaW5nJyAmJiBBcnJheS5pc0FycmF5KGVsKSAmJiBlbC5sZW5ndGggPiAxKSB7XG4gICAgICBlbCA9IFsuLi5zd2lwZXIuZWwucXVlcnlTZWxlY3RvckFsbChwYXJhbXMuZWwpXTtcbiAgICAgIC8vIGNoZWNrIGlmIGl0IGJlbG9uZ3MgdG8gYW5vdGhlciBuZXN0ZWQgU3dpcGVyXG4gICAgICBpZiAoZWwubGVuZ3RoID4gMSkge1xuICAgICAgICBlbCA9IGVsLmZpbHRlcihzdWJFbCA9PiB7XG4gICAgICAgICAgaWYgKGVsZW1lbnRQYXJlbnRzKHN1YkVsLCAnLnN3aXBlcicpWzBdICE9PSBzd2lwZXIuZWwpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSlbMF07XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KGVsKSAmJiBlbC5sZW5ndGggPT09IDEpIGVsID0gZWxbMF07XG4gICAgT2JqZWN0LmFzc2lnbihzd2lwZXIucGFnaW5hdGlvbiwge1xuICAgICAgZWxcbiAgICB9KTtcbiAgICBlbCA9IG1ha2VFbGVtZW50c0FycmF5KGVsKTtcbiAgICBlbC5mb3JFYWNoKHN1YkVsID0+IHtcbiAgICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2J1bGxldHMnICYmIHBhcmFtcy5jbGlja2FibGUpIHtcbiAgICAgICAgc3ViRWwuY2xhc3NMaXN0LmFkZCguLi4ocGFyYW1zLmNsaWNrYWJsZUNsYXNzIHx8ICcnKS5zcGxpdCgnICcpKTtcbiAgICAgIH1cbiAgICAgIHN1YkVsLmNsYXNzTGlzdC5hZGQocGFyYW1zLm1vZGlmaWVyQ2xhc3MgKyBwYXJhbXMudHlwZSk7XG4gICAgICBzdWJFbC5jbGFzc0xpc3QuYWRkKHN3aXBlci5pc0hvcml6b250YWwoKSA/IHBhcmFtcy5ob3Jpem9udGFsQ2xhc3MgOiBwYXJhbXMudmVydGljYWxDbGFzcyk7XG4gICAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdidWxsZXRzJyAmJiBwYXJhbXMuZHluYW1pY0J1bGxldHMpIHtcbiAgICAgICAgc3ViRWwuY2xhc3NMaXN0LmFkZChgJHtwYXJhbXMubW9kaWZpZXJDbGFzc30ke3BhcmFtcy50eXBlfS1keW5hbWljYCk7XG4gICAgICAgIGR5bmFtaWNCdWxsZXRJbmRleCA9IDA7XG4gICAgICAgIGlmIChwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzIDwgMSkge1xuICAgICAgICAgIHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMgPSAxO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdwcm9ncmVzc2JhcicgJiYgcGFyYW1zLnByb2dyZXNzYmFyT3Bwb3NpdGUpIHtcbiAgICAgICAgc3ViRWwuY2xhc3NMaXN0LmFkZChwYXJhbXMucHJvZ3Jlc3NiYXJPcHBvc2l0ZUNsYXNzKTtcbiAgICAgIH1cbiAgICAgIGlmIChwYXJhbXMuY2xpY2thYmxlKSB7XG4gICAgICAgIHN1YkVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25CdWxsZXRDbGljayk7XG4gICAgICB9XG4gICAgICBpZiAoIXN3aXBlci5lbmFibGVkKSB7XG4gICAgICAgIHN1YkVsLmNsYXNzTGlzdC5hZGQocGFyYW1zLmxvY2tDbGFzcyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb247XG4gICAgaWYgKGlzUGFnaW5hdGlvbkRpc2FibGVkKCkpIHJldHVybjtcbiAgICBsZXQgZWwgPSBzd2lwZXIucGFnaW5hdGlvbi5lbDtcbiAgICBpZiAoZWwpIHtcbiAgICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgICAgZWwuZm9yRWFjaChzdWJFbCA9PiB7XG4gICAgICAgIHN1YkVsLmNsYXNzTGlzdC5yZW1vdmUocGFyYW1zLmhpZGRlbkNsYXNzKTtcbiAgICAgICAgc3ViRWwuY2xhc3NMaXN0LnJlbW92ZShwYXJhbXMubW9kaWZpZXJDbGFzcyArIHBhcmFtcy50eXBlKTtcbiAgICAgICAgc3ViRWwuY2xhc3NMaXN0LnJlbW92ZShzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBwYXJhbXMuaG9yaXpvbnRhbENsYXNzIDogcGFyYW1zLnZlcnRpY2FsQ2xhc3MpO1xuICAgICAgICBpZiAocGFyYW1zLmNsaWNrYWJsZSkge1xuICAgICAgICAgIHN1YkVsLmNsYXNzTGlzdC5yZW1vdmUoLi4uKHBhcmFtcy5jbGlja2FibGVDbGFzcyB8fCAnJykuc3BsaXQoJyAnKSk7XG4gICAgICAgICAgc3ViRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbkJ1bGxldENsaWNrKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzKSBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzLmZvckVhY2goc3ViRWwgPT4gc3ViRWwuY2xhc3NMaXN0LnJlbW92ZSguLi5wYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3Muc3BsaXQoJyAnKSkpO1xuICB9XG4gIG9uKCdjaGFuZ2VEaXJlY3Rpb24nLCAoKSA9PiB7XG4gICAgaWYgKCFzd2lwZXIucGFnaW5hdGlvbiB8fCAhc3dpcGVyLnBhZ2luYXRpb24uZWwpIHJldHVybjtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb247XG4gICAgbGV0IHtcbiAgICAgIGVsXG4gICAgfSA9IHN3aXBlci5wYWdpbmF0aW9uO1xuICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgIGVsLmZvckVhY2goc3ViRWwgPT4ge1xuICAgICAgc3ViRWwuY2xhc3NMaXN0LnJlbW92ZShwYXJhbXMuaG9yaXpvbnRhbENsYXNzLCBwYXJhbXMudmVydGljYWxDbGFzcyk7XG4gICAgICBzdWJFbC5jbGFzc0xpc3QuYWRkKHN3aXBlci5pc0hvcml6b250YWwoKSA/IHBhcmFtcy5ob3Jpem9udGFsQ2xhc3MgOiBwYXJhbXMudmVydGljYWxDbGFzcyk7XG4gICAgfSk7XG4gIH0pO1xuICBvbignaW5pdCcsICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmVuYWJsZWQgPT09IGZhbHNlKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIGRpc2FibGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5pdCgpO1xuICAgICAgcmVuZGVyKCk7XG4gICAgICB1cGRhdGUoKTtcbiAgICB9XG4gIH0pO1xuICBvbignYWN0aXZlSW5kZXhDaGFuZ2UnLCAoKSA9PiB7XG4gICAgaWYgKHR5cGVvZiBzd2lwZXIuc25hcEluZGV4ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdXBkYXRlKCk7XG4gICAgfVxuICB9KTtcbiAgb24oJ3NuYXBJbmRleENoYW5nZScsICgpID0+IHtcbiAgICB1cGRhdGUoKTtcbiAgfSk7XG4gIG9uKCdzbmFwR3JpZExlbmd0aENoYW5nZScsICgpID0+IHtcbiAgICByZW5kZXIoKTtcbiAgICB1cGRhdGUoKTtcbiAgfSk7XG4gIG9uKCdkZXN0cm95JywgKCkgPT4ge1xuICAgIGRlc3Ryb3koKTtcbiAgfSk7XG4gIG9uKCdlbmFibGUgZGlzYWJsZScsICgpID0+IHtcbiAgICBsZXQge1xuICAgICAgZWxcbiAgICB9ID0gc3dpcGVyLnBhZ2luYXRpb247XG4gICAgaWYgKGVsKSB7XG4gICAgICBlbCA9IG1ha2VFbGVtZW50c0FycmF5KGVsKTtcbiAgICAgIGVsLmZvckVhY2goc3ViRWwgPT4gc3ViRWwuY2xhc3NMaXN0W3N3aXBlci5lbmFibGVkID8gJ3JlbW92ZScgOiAnYWRkJ10oc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmxvY2tDbGFzcykpO1xuICAgIH1cbiAgfSk7XG4gIG9uKCdsb2NrIHVubG9jaycsICgpID0+IHtcbiAgICB1cGRhdGUoKTtcbiAgfSk7XG4gIG9uKCdjbGljaycsIChfcywgZSkgPT4ge1xuICAgIGNvbnN0IHRhcmdldEVsID0gZS50YXJnZXQ7XG4gICAgY29uc3QgZWwgPSBtYWtlRWxlbWVudHNBcnJheShzd2lwZXIucGFnaW5hdGlvbi5lbCk7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5lbCAmJiBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uaGlkZU9uQ2xpY2sgJiYgZWwgJiYgZWwubGVuZ3RoID4gMCAmJiAhdGFyZ2V0RWwuY2xhc3NMaXN0LmNvbnRhaW5zKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5idWxsZXRDbGFzcykpIHtcbiAgICAgIGlmIChzd2lwZXIubmF2aWdhdGlvbiAmJiAoc3dpcGVyLm5hdmlnYXRpb24ubmV4dEVsICYmIHRhcmdldEVsID09PSBzd2lwZXIubmF2aWdhdGlvbi5uZXh0RWwgfHwgc3dpcGVyLm5hdmlnYXRpb24ucHJldkVsICYmIHRhcmdldEVsID09PSBzd2lwZXIubmF2aWdhdGlvbi5wcmV2RWwpKSByZXR1cm47XG4gICAgICBjb25zdCBpc0hpZGRlbiA9IGVsWzBdLmNsYXNzTGlzdC5jb250YWlucyhzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uaGlkZGVuQ2xhc3MpO1xuICAgICAgaWYgKGlzSGlkZGVuID09PSB0cnVlKSB7XG4gICAgICAgIGVtaXQoJ3BhZ2luYXRpb25TaG93Jyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbWl0KCdwYWdpbmF0aW9uSGlkZScpO1xuICAgICAgfVxuICAgICAgZWwuZm9yRWFjaChzdWJFbCA9PiBzdWJFbC5jbGFzc0xpc3QudG9nZ2xlKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5oaWRkZW5DbGFzcykpO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGVuYWJsZSA9ICgpID0+IHtcbiAgICBzd2lwZXIuZWwuY2xhc3NMaXN0LnJlbW92ZShzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24ucGFnaW5hdGlvbkRpc2FibGVkQ2xhc3MpO1xuICAgIGxldCB7XG4gICAgICBlbFxuICAgIH0gPSBzd2lwZXIucGFnaW5hdGlvbjtcbiAgICBpZiAoZWwpIHtcbiAgICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgICAgZWwuZm9yRWFjaChzdWJFbCA9PiBzdWJFbC5jbGFzc0xpc3QucmVtb3ZlKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5wYWdpbmF0aW9uRGlzYWJsZWRDbGFzcykpO1xuICAgIH1cbiAgICBpbml0KCk7XG4gICAgcmVuZGVyKCk7XG4gICAgdXBkYXRlKCk7XG4gIH07XG4gIGNvbnN0IGRpc2FibGUgPSAoKSA9PiB7XG4gICAgc3dpcGVyLmVsLmNsYXNzTGlzdC5hZGQoc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLnBhZ2luYXRpb25EaXNhYmxlZENsYXNzKTtcbiAgICBsZXQge1xuICAgICAgZWxcbiAgICB9ID0gc3dpcGVyLnBhZ2luYXRpb247XG4gICAgaWYgKGVsKSB7XG4gICAgICBlbCA9IG1ha2VFbGVtZW50c0FycmF5KGVsKTtcbiAgICAgIGVsLmZvckVhY2goc3ViRWwgPT4gc3ViRWwuY2xhc3NMaXN0LmFkZChzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24ucGFnaW5hdGlvbkRpc2FibGVkQ2xhc3MpKTtcbiAgICB9XG4gICAgZGVzdHJveSgpO1xuICB9O1xuICBPYmplY3QuYXNzaWduKHN3aXBlci5wYWdpbmF0aW9uLCB7XG4gICAgZW5hYmxlLFxuICAgIGRpc2FibGUsXG4gICAgcmVuZGVyLFxuICAgIHVwZGF0ZSxcbiAgICBpbml0LFxuICAgIGRlc3Ryb3lcbiAgfSk7XG59XG5cbmV4cG9ydCB7IFBhZ2luYXRpb24gYXMgZGVmYXVsdCB9O1xuIiwiaW1wb3J0IHsgZSBhcyBlbGVtZW50Q2hpbGRyZW4sIGMgYXMgY3JlYXRlRWxlbWVudCB9IGZyb20gJy4vdXRpbHMubWpzJztcblxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudElmTm90RGVmaW5lZChzd2lwZXIsIG9yaWdpbmFsUGFyYW1zLCBwYXJhbXMsIGNoZWNrUHJvcHMpIHtcbiAgaWYgKHN3aXBlci5wYXJhbXMuY3JlYXRlRWxlbWVudHMpIHtcbiAgICBPYmplY3Qua2V5cyhjaGVja1Byb3BzKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICBpZiAoIXBhcmFtc1trZXldICYmIHBhcmFtcy5hdXRvID09PSB0cnVlKSB7XG4gICAgICAgIGxldCBlbGVtZW50ID0gZWxlbWVudENoaWxkcmVuKHN3aXBlci5lbCwgYC4ke2NoZWNrUHJvcHNba2V5XX1gKVswXTtcbiAgICAgICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgICAgZWxlbWVudCA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicsIGNoZWNrUHJvcHNba2V5XSk7XG4gICAgICAgICAgZWxlbWVudC5jbGFzc05hbWUgPSBjaGVja1Byb3BzW2tleV07XG4gICAgICAgICAgc3dpcGVyLmVsLmFwcGVuZChlbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgICBwYXJhbXNba2V5XSA9IGVsZW1lbnQ7XG4gICAgICAgIG9yaWdpbmFsUGFyYW1zW2tleV0gPSBlbGVtZW50O1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBwYXJhbXM7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZUVsZW1lbnRJZk5vdERlZmluZWQgYXMgYyB9O1xuIl0sIm5hbWVzIjpbImdzYXAiLCJyZWdpc3RlclBsdWdpbiIsIlNjcm9sbFRyaWdnZXIiLCJtbSIsIm1hdGNoTWVkaWEiLCJzZXRUaHVtYnNDbGFzc2VzIiwiaWR4IiwidGh1bWJzIiwicmVtb3ZlQ2xhc3NlcyIsImNsYXNzTGlzdCIsImFkZCIsImluaXRJdGVtQ2FyZENhcm91c2VsIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwicXVlcnlTZWxlY3RvckFsbCIsImZvckVhY2giLCJzbGlkZSIsInRpbWVsaW5lIiwic2Nyb2xsVHJpZ2dlciIsInRyaWdnZXIiLCJzdGFydCIsImVuZCIsIm9uRW50ZXIiLCJlIiwib25FbnRlckJhY2siLCJsb2NvU2Nyb2xsIiwiTG9jb21vdGl2ZVNjcm9sbCIsImVsIiwic21vb3RoIiwibW9iaWxlIiwidGFibGV0IiwiYnJlYWtwb2ludCIsIlJlc2l6ZU9ic2VydmVyIiwic2V0VGltZW91dCIsImRlc3Ryb3kiLCJ1cGRhdGUiLCJpbml0Iiwib2JzZXJ2ZSIsInRvZ2dsZVNjcm9sbCIsInRvdWNoU3RhcnQiLCJzdG9wIiwidG91Y2hFbmQiLCJ3aW5kb3ciLCJhZGRFdmVudExpc3RlbmVyIiwic2Nyb2xsZXJQcm94eSIsInNjcm9sbFRvcCIsInZhbHVlIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic2Nyb2xsVG8iLCJzY3JvbGwiLCJpbnN0YW5jZSIsInkiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJ0b3AiLCJsZWZ0Iiwid2lkdGgiLCJpbm5lcldpZHRoIiwiaGVpZ2h0IiwiaW5uZXJIZWlnaHQiLCJwaW5UeXBlIiwic3R5bGUiLCJ0cmFuc2Zvcm0iLCJkZWZhdWx0cyIsInNjcm9sbGVyIiwicmVmcmVzaCIsInRhcmdldCIsImNsb3Nlc3QiLCJvZmZzZXQiLCJjYWxsYmFjayIsImFycmF5IiwiY2xhc3NOYW1lIiwiaSIsInJlbW92ZSIsIl93aW4iLCJfZG9jIiwiX2RvY0VsZW1lbnQiLCJfcGx1Z2luSW5pdHRlZCIsIl90ZW1wRGl2IiwiX3JlY2VudFNldHRlclBsdWdpbiIsIl9yZXZlcnRpbmciLCJfc3VwcG9ydHMzRCIsIl90cmFuc2Zvcm1Qcm9wcyIsIl9SQUQyREVHIiwiTWF0aCIsIlBJIiwiX0RFRzJSQUQiLCJfYXRhbjIiLCJhdGFuMiIsIl9jYXBzRXhwIiwiX2hvcml6b250YWxFeHAiLCJfY29tcGxleEV4cCIsIl9wcm9wZXJ0eUFsaWFzZXMiLCJhdXRvQWxwaGEiLCJzY2FsZSIsImFscGhhIiwiX3JlbmRlckNTU1Byb3AiLCJyYXRpbyIsImRhdGEiLCJzZXQiLCJ0IiwicCIsInJvdW5kIiwicyIsImMiLCJ1IiwiX3JlbmRlclByb3BXaXRoRW5kIiwiX3JlbmRlckNTU1Byb3BXaXRoQmVnaW5uaW5nIiwiYiIsIl9yZW5kZXJSb3VuZGVkQ1NTUHJvcCIsIl9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlIiwiX3JlbmRlck5vblR3ZWVuaW5nVmFsdWVPbmx5QXRFbmQiLCJfc2V0dGVyQ1NTU3R5bGUiLCJwcm9wZXJ0eSIsIl9zZXR0ZXJDU1NQcm9wIiwic2V0UHJvcGVydHkiLCJfc2V0dGVyVHJhbnNmb3JtIiwiX2dzYXAiLCJfc2V0dGVyU2NhbGUiLCJzY2FsZVgiLCJzY2FsZVkiLCJfc2V0dGVyU2NhbGVXaXRoUmVuZGVyIiwiY2FjaGUiLCJyZW5kZXJUcmFuc2Zvcm0iLCJfc2V0dGVyVHJhbnNmb3JtV2l0aFJlbmRlciIsIl90cmFuc2Zvcm1Qcm9wIiwiX3RyYW5zZm9ybU9yaWdpblByb3AiLCJfc2F2ZVN0eWxlIiwiaXNOb3RDU1MiLCJfdGhpcyIsInRoaXMiLCJ0Zm0iLCJzcGxpdCIsImNhbGwiLCJpbmRleE9mIiwiYSIsIl9nZXQiLCJ4Iiwiek9yaWdpbiIsInByb3BzIiwic3ZnIiwic3ZnbyIsImdldEF0dHJpYnV0ZSIsInB1c2giLCJfcmVtb3ZlSW5kZXBlbmRlbnRUcmFuc2Zvcm1zIiwidHJhbnNsYXRlIiwicmVtb3ZlUHJvcGVydHkiLCJfcmV2ZXJ0U3R5bGUiLCJzdWJzdHIiLCJyZXBsYWNlIiwidG9Mb3dlckNhc2UiLCJzZXRBdHRyaWJ1dGUiLCJpc1N0YXJ0IiwidW5jYWNoZSIsIl9nZXRTdHlsZVNhdmVyIiwicHJvcGVydGllcyIsInNhdmVyIiwicmV2ZXJ0Iiwic2F2ZSIsImNvcmUiLCJnZXRDYWNoZSIsIl9jcmVhdGVFbGVtZW50IiwidHlwZSIsIm5zIiwiY3JlYXRlRWxlbWVudE5TIiwiY3JlYXRlRWxlbWVudCIsIl9nZXRDb21wdXRlZFByb3BlcnR5Iiwic2tpcFByZWZpeEZhbGxiYWNrIiwiY3MiLCJnZXRDb21wdXRlZFN0eWxlIiwiZ2V0UHJvcGVydHlWYWx1ZSIsIl9jaGVja1Byb3BQcmVmaXgiLCJfcHJlZml4ZXMiLCJlbGVtZW50IiwicHJlZmVyUHJlZml4IiwiY2hhckF0IiwidG9VcHBlckNhc2UiLCJfaW5pdENvcmUiLCJkb2N1bWVudEVsZW1lbnQiLCJjc3NUZXh0IiwicmV2ZXJ0aW5nIiwiX2dldEJCb3hIYWNrIiwic3dhcElmUG9zc2libGUiLCJiYm94Iiwib3duZXJTVkdFbGVtZW50Iiwib2xkUGFyZW50IiwicGFyZW50Tm9kZSIsIm9sZFNpYmxpbmciLCJuZXh0U2libGluZyIsIm9sZENTUyIsImFwcGVuZENoaWxkIiwiZGlzcGxheSIsImdldEJCb3giLCJfZ3NhcEJCb3giLCJpbnNlcnRCZWZvcmUiLCJyZW1vdmVDaGlsZCIsIl9nZXRBdHRyaWJ1dGVGYWxsYmFja3MiLCJhdHRyaWJ1dGVzQXJyYXkiLCJoYXNBdHRyaWJ1dGUiLCJfZ2V0QkJveCIsImJvdW5kcyIsImVycm9yIiwiX2lzU1ZHIiwiZ2V0Q1RNIiwiX3JlbW92ZVByb3BlcnR5IiwiZmlyc3QyQ2hhcnMiLCJyZW1vdmVBdHRyaWJ1dGUiLCJfYWRkTm9uVHdlZW5pbmdQVCIsInBsdWdpbiIsImJlZ2lubmluZyIsIm9ubHlTZXRBdEVuZCIsInB0IiwiX3B0IiwiX3Byb3BzIiwiX25vbkNvbnZlcnRpYmxlVW5pdHMiLCJkZWciLCJyYWQiLCJ0dXJuIiwiX25vblN0YW5kYXJkTGF5b3V0cyIsImdyaWQiLCJmbGV4IiwiX2NvbnZlcnRUb1VuaXQiLCJ1bml0IiwicHgiLCJwYXJlbnQiLCJpc1NWRyIsImN1clZhbHVlIiwicGFyc2VGbG9hdCIsImN1clVuaXQiLCJ0cmltIiwiaG9yaXpvbnRhbCIsInRlc3QiLCJpc1Jvb3RTVkciLCJ0YWdOYW1lIiwibWVhc3VyZVByb3BlcnR5IiwiYW1vdW50IiwidG9QaXhlbHMiLCJ0b1BlcmNlbnQiLCJib2R5IiwidGltZSIsInBvc2l0aW9uIiwidiIsIl9wYXJzZVRyYW5zZm9ybSIsIm9yaWdpbiIsIl9maXJzdFR3b09ubHkiLCJfc3BlY2lhbFByb3BzIiwiX3R3ZWVuQ29tcGxleENTU1N0cmluZyIsInByb3AiLCJyZXN1bHQiLCJzdGFydFZhbHVlcyIsInN0YXJ0TnVtIiwiY29sb3IiLCJzdGFydFZhbHVlIiwiZW5kVmFsdWUiLCJlbmROdW0iLCJjaHVuayIsImVuZFVuaXQiLCJzdGFydFVuaXQiLCJpbmRleCIsIm1hdGNoSW5kZXgiLCJtYXRjaCIsImV4ZWMiLCJzdWJzdHJpbmciLCJsYXN0SW5kZXgiLCJ1bml0cyIsIl9uZXh0IiwibSIsInIiLCJfa2V5d29yZFRvUGVyY2VudCIsImJvdHRvbSIsInJpZ2h0IiwiY2VudGVyIiwiX3JlbmRlckNsZWFyUHJvcHMiLCJ0d2VlbiIsIl90aW1lIiwiX2R1ciIsImNsZWFyVHJhbnNmb3JtcyIsImNsZWFyUHJvcHMiLCJwciIsIl9pZGVudGl0eTJETWF0cml4IiwiX3JvdGF0aW9uYWxQcm9wZXJ0aWVzIiwiX2lzTnVsbFRyYW5zZm9ybSIsIl9nZXRDb21wdXRlZFRyYW5zZm9ybU1hdHJpeEFzQXJyYXkiLCJtYXRyaXhTdHJpbmciLCJtYXAiLCJfZ2V0TWF0cml4IiwiZm9yY2UyRCIsInRlbXAiLCJhZGRlZFRvRE9NIiwibWF0cml4IiwiYmFzZVZhbCIsImNvbnNvbGlkYXRlIiwiZCIsImYiLCJqb2luIiwib2Zmc2V0UGFyZW50IiwibmV4dEVsZW1lbnRTaWJsaW5nIiwiX2FwcGx5U1ZHT3JpZ2luIiwib3JpZ2luSXNBYnNvbHV0ZSIsIm1hdHJpeEFycmF5IiwicGx1Z2luVG9BZGRQcm9wVHdlZW5zVG8iLCJkZXRlcm1pbmFudCIsInhPcmlnaW5PbGQiLCJ4T3JpZ2luIiwieU9yaWdpbk9sZCIsInlPcmlnaW4iLCJ4T2Zmc2V0T2xkIiwieE9mZnNldCIsInlPZmZzZXRPbGQiLCJ5T2Zmc2V0IiwidHgiLCJ0eSIsIm9yaWdpblNwbGl0IiwieiIsInJvdGF0aW9uIiwicm90YXRpb25YIiwicm90YXRpb25ZIiwic2tld1giLCJza2V3WSIsInBlcnNwZWN0aXZlIiwiYW5nbGUiLCJjb3MiLCJzaW4iLCJhMTIiLCJhMjIiLCJ0MSIsInQyIiwidDMiLCJhMTMiLCJhMjMiLCJhMzMiLCJhNDIiLCJhNDMiLCJhMzIiLCJpbnZlcnRlZFNjYWxlWCIsInJvdGF0ZSIsInNsaWNlIiwic3FydCIsImFicyIsImZvcmNlQ1NTIiwieFBlcmNlbnQiLCJvZmZzZXRXaWR0aCIsInlQZXJjZW50Iiwib2Zmc2V0SGVpZ2h0IiwidHJhbnNmb3JtUGVyc3BlY3RpdmUiLCJmb3JjZTNEIiwiX3JlbmRlclNWR1RyYW5zZm9ybXMiLCJfcmVuZGVyQ1NTVHJhbnNmb3JtcyIsIl9yZW5kZXJOb24zRFRyYW5zZm9ybXMiLCJfYWRkUHhUcmFuc2xhdGUiLCJfemVyb0RlZyIsIl96ZXJvUHgiLCJfZW5kUGFyZW50aGVzaXMiLCJfcmVmIiwidHJhbnNmb3JtcyIsInVzZTNEIiwiYTExIiwiYTIxIiwiX3JlZjIiLCJ0YW4iLCJfYWRkUm90YXRpb25hbFByb3BUd2VlbiIsImRpcmVjdGlvbiIsImNhcCIsImlzU3RyaW5nIiwiY2hhbmdlIiwiZmluYWxWYWx1ZSIsIl9hc3NpZ24iLCJzb3VyY2UiLCJfYWRkUmF3VHJhbnNmb3JtUFRzIiwiZW5kQ2FjaGUiLCJzdGFydENhY2hlIiwibmFtZSIsImwiLCJzaWRlIiwidmFycyIsInBvc2l0aW9uQW5kU2NhbGUiLCJhbGwiLCJDU1NQbHVnaW4iLCJyZWdpc3RlciIsInRhcmdldFRlc3QiLCJub2RlVHlwZSIsInRhcmdldHMiLCJzcGVjaWFsUHJvcCIsInJlbGF0aXZlIiwiaXNUcmFuc2Zvcm1SZWxhdGVkIiwidHJhbnNmb3JtUHJvcFR3ZWVuIiwiaGFzUHJpb3JpdHkiLCJpbmxpbmVQcm9wcyIsInN0YXJ0QXQiLCJzdHlsZXMiLCJ2aXNpYmlsaXR5IiwicGFyc2VUcmFuc2Zvcm0iLCJzbW9vdGhPcmlnaW4iLCJkZXAiLCJhdXRvUm91bmQiLCJyZW5kZXIiLCJnZXQiLCJhbGlhc2VzIiwiZ2V0U2V0dGVyIiwidXRpbHMiLCJjaGVja1ByZWZpeCIsImdldFN0eWxlU2F2ZXIiLCJfZGVmaW5lUHJvcGVydGllcyIsImRlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImtleSIsIl9jb3JlSW5pdHRlZCIsIl9kb2NFbCIsIl9ib2R5IiwiX2lzVG91Y2giLCJfcG9pbnRlclR5cGUiLCJfcm9vdCIsIl9ub3JtYWxpemVyIiwiX2V2ZW50VHlwZXMiLCJfY29udGV4dCIsIl9nZXRHU0FQIiwiX3N0YXJ0dXAiLCJfb2JzZXJ2ZXJzIiwiX3Njcm9sbGVycyIsIl9wcm94aWVzIiwiX2dldFRpbWUiLCJEYXRlIiwibm93IiwiX2JyaWRnZSIsIl9nZXRQcm94eVByb3AiLCJfaXNWaWV3cG9ydCIsIl9hZGRMaXN0ZW5lciIsImZ1bmMiLCJwYXNzaXZlIiwiY2FwdHVyZSIsIl9yZW1vdmVMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJfc2Nyb2xsTGVmdCIsIl9zY3JvbGxUb3AiLCJfb25TY3JvbGwiLCJpc1ByZXNzZWQiLCJfc2Nyb2xsQ2FjaGVGdW5jIiwiZG9Ob3RDYWNoZSIsImNhY2hpbmdGdW5jIiwiaGlzdG9yeSIsInNjcm9sbFJlc3RvcmF0aW9uIiwiaXNOb3JtYWxpemluZyIsImlPUyIsImNhY2hlSUQiLCJfaG9yaXpvbnRhbCIsInAyIiwib3MiLCJvczIiLCJkMiIsInNjIiwiX3ZlcnRpY2FsIiwicGFnZVhPZmZzZXQiLCJvcCIsInBhZ2VZT2Zmc2V0IiwiX2dldFRhcmdldCIsInNlbGYiLCJfY3R4Iiwic2VsZWN0b3IiLCJ0b0FycmF5IiwiY29uZmlnIiwibnVsbFRhcmdldFdhcm4iLCJjb25zb2xlIiwid2FybiIsIl9nZXRTY3JvbGxGdW5jIiwic2Nyb2xsaW5nRWxlbWVudCIsInByZXYiLCJnZXRQcm9wZXJ0eSIsIl9nZXRWZWxvY2l0eVByb3AiLCJtaW5UaW1lUmVmcmVzaCIsInVzZURlbHRhIiwidjEiLCJ2MiIsIm1pbiIsImRyb3BUb1plcm9UaW1lIiwibWF4IiwiZm9yY2UiLCJyZXNldCIsImdldFZlbG9jaXR5IiwibGF0ZXN0VmFsdWUiLCJ0T2xkIiwidk9sZCIsIl9nZXRFdmVudCIsInByZXZlbnREZWZhdWx0IiwiX2dzYXBBbGxvdyIsImNoYW5nZWRUb3VjaGVzIiwiX2dldEFic29sdXRlTWF4IiwiYXBwbHkiLCJfc2V0U2Nyb2xsVHJpZ2dlciIsInNjcm9sbGVycyIsInByb3hpZXMiLCJnbG9iYWxzIiwiYnJpZGdlIiwiY2xhbXAiLCJjb250ZXh0IiwiT2JzZXJ2ZXIiLCJpc1RvdWNoIiwibWF0Y2hlcyIsIm5hdmlnYXRvciIsIm1heFRvdWNoUG9pbnRzIiwibXNNYXhUb3VjaFBvaW50cyIsImV2ZW50VHlwZXMiLCJDb25zdHJ1Y3RvciIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsInByb3RvdHlwZSIsInRvbGVyYW5jZSIsImRyYWdNaW5pbXVtIiwibGluZUhlaWdodCIsImRlYm91bmNlIiwib25TdG9wIiwib25TdG9wRGVsYXkiLCJpZ25vcmUiLCJ3aGVlbFNwZWVkIiwiZXZlbnQiLCJvbkRyYWdTdGFydCIsIm9uRHJhZ0VuZCIsIm9uRHJhZyIsIm9uUHJlc3MiLCJvblJlbGVhc2UiLCJvblJpZ2h0Iiwib25MZWZ0Iiwib25VcCIsIm9uRG93biIsIm9uQ2hhbmdlWCIsIm9uQ2hhbmdlWSIsIm9uQ2hhbmdlIiwib25Ub2dnbGVYIiwib25Ub2dnbGVZIiwib25Ib3ZlciIsIm9uSG92ZXJFbmQiLCJvbk1vdmUiLCJpZ25vcmVDaGVjayIsImlzTm9ybWFsaXplciIsIm9uR2VzdHVyZVN0YXJ0Iiwib25HZXN0dXJlRW5kIiwib25XaGVlbCIsIm9uRW5hYmxlIiwib25EaXNhYmxlIiwib25DbGljayIsInNjcm9sbFNwZWVkIiwiYWxsb3dDbGlja3MiLCJsb2NrQXhpcyIsIm9uTG9ja0F4aXMiLCJpZCIsIm9uU3RvcERlbGF5ZWRDYWxsIiwiZHJhZ2dlZCIsIm1vdmVkIiwid2hlZWxlZCIsImxvY2tlZCIsImF4aXMiLCJwcmV2RGVsdGFYIiwicHJldkRlbHRhWSIsInNjcm9sbEZ1bmNYIiwic2Nyb2xsRnVuY1kiLCJzY3JvbGxYIiwic2Nyb2xsWSIsImxpbWl0VG9Ub3VjaCIsImlzVmlld3BvcnQiLCJvd25lckRvYyIsIm93bmVyRG9jdW1lbnQiLCJkZWx0YVgiLCJkZWx0YVkiLCJvbkNsaWNrVGltZSIsImNsaWNrQ2FwdHVyZSIsIl9pZ25vcmVDaGVjayIsImlzUG9pbnRlck9yVG91Y2giLCJwb2ludGVyVHlwZSIsImR4IiwiZHkiLCJjaGFuZ2VkWCIsImNoYW5nZWRZIiwib25EZWx0YSIsIl92eCIsIl92eSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIm9uVG91Y2hPclBvaW50ZXJEZWx0YSIsIl9vbkRyYWciLCJjbGllbnRYIiwiY2xpZW50WSIsImlzRHJhZ2dpbmciLCJzdGFydFgiLCJzdGFydFkiLCJfb25QcmVzcyIsImJ1dHRvbiIsInBhdXNlIiwiX29uUmVsZWFzZSIsImlzVHJhY2tpbmdEcmFnIiwiaXNOYU4iLCJ3YXNEcmFnZ2luZyIsImlzRHJhZ05vdENsaWNrIiwiZXZlbnREYXRhIiwiZGVsYXllZENhbGwiLCJkZWZhdWx0UHJldmVudGVkIiwiY2xpY2siLCJjcmVhdGVFdmVudCIsInN5bnRoZXRpY0V2ZW50IiwiaW5pdE1vdXNlRXZlbnQiLCJzY3JlZW5YIiwic2NyZWVuWSIsImRpc3BhdGNoRXZlbnQiLCJpc0dlc3R1cmluZyIsInJlc3RhcnQiLCJfb25HZXN0dXJlU3RhcnQiLCJ0b3VjaGVzIiwiX29uR2VzdHVyZUVuZCIsIm9uU2Nyb2xsIiwiX29uV2hlZWwiLCJtdWx0aXBsaWVyIiwiZGVsdGFNb2RlIiwiX29uTW92ZSIsIl9vbkhvdmVyIiwiX29uSG92ZXJFbmQiLCJfb25DbGljayIsIl9kYyIsImVuYWJsZSIsImlzRW5hYmxlZCIsImRpc2FibGUiLCJmaWx0ZXIiLCJvIiwia2lsbCIsInNwbGljZSIsInZlcnNpb24iLCJjcmVhdGUiLCJnZXRBbGwiLCJnZXRCeUlkIiwiX3Jlc2l6ZURlbGF5IiwiX3RvQXJyYXkiLCJfdGltZTIiLCJfc3luY0ludGVydmFsIiwiX3JlZnJlc2hpbmciLCJfcG9pbnRlcklzRG93biIsIl9pIiwiX3ByZXZXaWR0aCIsIl9wcmV2SGVpZ2h0IiwiX2F1dG9SZWZyZXNoIiwiX3NvcnQiLCJfc3VwcHJlc3NPdmVyd3JpdGVzIiwiX2lnbm9yZVJlc2l6ZSIsIl9pZ25vcmVNb2JpbGVSZXNpemUiLCJfYmFzZVNjcmVlbkhlaWdodCIsIl9iYXNlU2NyZWVuV2lkdGgiLCJfZml4SU9TQnVnIiwiX3Njcm9sbFJlc3RvcmF0aW9uIiwiX2RpdjEwMHZoIiwiXzEwMHZoIiwiX2lzUmV2ZXJ0ZWQiLCJfY2xhbXBpbmdNYXgiLCJfbGltaXRDYWxsYmFja3MiLCJfcmFmSUQiLCJfcmVmcmVzaGluZ0FsbCIsIl9xdWV1ZVJlZnJlc2hJRCIsIl9wcmltYXJ5IiwiX3RpbWUxIiwiX2xhc3RTY3JvbGxUaW1lIiwiX2VuYWJsZWQiLCJfcGFyc2VDbGFtcCIsIl9pc1N0cmluZyIsIl9rZWVwQ2xhbXAiLCJfcmFmQnVnRml4IiwiX3BvaW50ZXJEb3duSGFuZGxlciIsIl9wb2ludGVyVXBIYW5kbGVyIiwiX3Bhc3NUaHJvdWdoIiwiX3JvdW5kIiwiX3dpbmRvd0V4aXN0cyIsIl9nZXRWaWV3cG9ydERpbWVuc2lvbiIsImRpbWVuc2lvblByb3BlcnR5IiwiX2dldEJvdW5kc0Z1bmMiLCJfd2luT2Zmc2V0cyIsIl9nZXRCb3VuZHMiLCJfbWF4U2Nyb2xsIiwiX2l0ZXJhdGVBdXRvUmVmcmVzaCIsImV2ZW50cyIsIl9pc0Z1bmN0aW9uIiwiX2lzTnVtYmVyIiwiX2lzT2JqZWN0IiwiX2VuZEFuaW1hdGlvbiIsImFuaW1hdGlvbiIsInJldmVyc2VkIiwicHJvZ3Jlc3MiLCJfY2FsbGJhY2siLCJlbmFibGVkIiwidG90YWxUaW1lIiwiY2FsbGJhY2tBbmltYXRpb24iLCJfYWJzIiwiX2xlZnQiLCJfcmlnaHQiLCJfYm90dG9tIiwiX3dpZHRoIiwiX2hlaWdodCIsIl9SaWdodCIsIl9MZWZ0IiwiX1RvcCIsIl9Cb3R0b20iLCJfcGFkZGluZyIsIl9tYXJnaW4iLCJfV2lkdGgiLCJfSGVpZ2h0IiwiX3B4IiwiX2dldENvbXB1dGVkU3R5bGUiLCJfc2V0RGVmYXVsdHMiLCJvYmoiLCJ3aXRob3V0VHJhbnNmb3JtcyIsInRvIiwiX2dldFNpemUiLCJfcmVmMyIsIl9nZXRMYWJlbFJhdGlvQXJyYXkiLCJsYWJlbHMiLCJkdXJhdGlvbiIsIl9zbmFwRGlyZWN0aW9uYWwiLCJzbmFwSW5jcmVtZW50T3JBcnJheSIsInNuYXAiLCJBcnJheSIsImlzQXJyYXkiLCJzb3J0IiwidGhyZXNob2xkIiwic25hcHBlZCIsIl9tdWx0aUxpc3RlbmVyIiwidHlwZXMiLCJub25QYXNzaXZlIiwiX3doZWVsTGlzdGVuZXIiLCJzY3JvbGxGdW5jIiwid2hlZWxIYW5kbGVyIiwiX21hcmtlckRlZmF1bHRzIiwic3RhcnRDb2xvciIsImVuZENvbG9yIiwiaW5kZW50IiwiZm9udFNpemUiLCJmb250V2VpZ2h0IiwiX2RlZmF1bHRzIiwidG9nZ2xlQWN0aW9ucyIsImFudGljaXBhdGVQaW4iLCJfa2V5d29yZHMiLCJfb2Zmc2V0VG9QeCIsInNpemUiLCJlcUluZGV4IiwiX2NyZWF0ZU1hcmtlciIsImNvbnRhaW5lciIsIl9yZWY0IiwibWF0Y2hXaWR0aEVsIiwiY29udGFpbmVyQW5pbWF0aW9uIiwidXNlRml4ZWRQb3NpdGlvbiIsImlzU2Nyb2xsZXIiLCJjc3MiLCJfaXNTdGFydCIsImlubmVyVGV4dCIsImNoaWxkcmVuIiwiX29mZnNldCIsIl9wb3NpdGlvbk1hcmtlciIsIm1hcmtlciIsImZsaXBwZWQiLCJvcHBvc2l0ZVNpZGUiLCJfaXNGbGlwcGVkIiwiX3RyaWdnZXJzIiwiX2lkcyIsIl9zeW5jIiwiX3VwZGF0ZUFsbCIsImNsaWVudFdpZHRoIiwiX2Rpc3BhdGNoIiwiX3NldEJhc2VEaW1lbnNpb25zIiwiX29uUmVzaXplIiwiZnVsbHNjcmVlbkVsZW1lbnQiLCJ3ZWJraXRGdWxsc2NyZWVuRWxlbWVudCIsIl9saXN0ZW5lcnMiLCJfZW1wdHlBcnJheSIsIl9zb2Z0UmVmcmVzaCIsIl9yZWZyZXNoQWxsIiwiX3NhdmVkU3R5bGVzIiwiX3JldmVydFJlY29yZGVkIiwibWVkaWEiLCJxdWVyeSIsIl9yZXZlcnRBbGwiLCJfY2xlYXJTY3JvbGxNZW1vcnkiLCJyZWMiLCJfcmVmcmVzaElEIiwiX3JlZnJlc2gxMDB2aCIsIl9oaWRlQWxsTWFya2VycyIsImhpZGUiLCJza2lwUmV2ZXJ0IiwiaXNSZWZyZXNoaW5nIiwicmVmcmVzaEluaXRzIiwic2Nyb2xsQmVoYXZpb3IiLCJfc3ViUGluT2Zmc2V0IiwicGluIiwib3JpZ2luYWwiLCJhZGp1c3RQaW5TcGFjaW5nIiwiX2RpciIsImVuZENsYW1wIiwiX2VuZENsYW1wIiwic3RhcnRDbGFtcCIsIl9zdGFydENsYW1wIiwic2V0UG9zaXRpb25zIiwib25SZWZyZXNoIiwiX2xhc3RTY3JvbGwiLCJfZGlyZWN0aW9uIiwiaXNVcGRhdGluZyIsInJlY29yZFZlbG9jaXR5IiwiX3Byb3BOYW1lc1RvQ29weSIsIl9zdGF0ZVByb3BzIiwiY29uY2F0IiwiX3N3YXBQaW5JbiIsInNwYWNlciIsInNwYWNlclN0YXRlIiwic3dhcHBlZEluIiwic3BhY2VyU3R5bGUiLCJwaW5TdHlsZSIsImZsZXhCYXNpcyIsIm92ZXJmbG93IiwiYm94U2l6aW5nIiwiX3NldFN0YXRlIiwic3RhdGUiLCJfZ2V0U3RhdGUiLCJfcGFyc2VQb3NpdGlvbiIsInNjcm9sbGVyU2l6ZSIsIm1hcmtlclNjcm9sbGVyIiwic2Nyb2xsZXJCb3VuZHMiLCJib3JkZXJXaWR0aCIsInNjcm9sbGVyTWF4IiwiY2xhbXBaZXJvUHJvcCIsInAxIiwic2VlayIsIm1hcFJhbmdlIiwibG9jYWxPZmZzZXQiLCJnbG9iYWxPZmZzZXQiLCJvZmZzZXRzIiwiX2NhU2Nyb2xsRGlzdCIsIl9wcmVmaXhFeHAiLCJfcmVwYXJlbnQiLCJfc3RPcmlnIiwiX2ludGVycnVwdGlvblRyYWNrZXIiLCJnZXRWYWx1ZUZ1bmMiLCJpbml0aWFsVmFsdWUiLCJvbkludGVycnVwdCIsImxhc3QxIiwibGFzdDIiLCJjdXJyZW50IiwiX3NoaWZ0TWFya2VyIiwiX2dldFR3ZWVuQ3JlYXRvciIsImdldFNjcm9sbCIsImdldFR3ZWVuIiwiY2hhbmdlMSIsImNoYW5nZTIiLCJvbkNvbXBsZXRlIiwibW9kaWZpZXJzIiwiY2hlY2tGb3JJbnRlcnJ1cHRpb24iLCJpbmhlcml0Iiwib25VcGRhdGUiLCJ0d2VlblRvIiwicGluQ2FjaGUiLCJzbmFwRnVuYyIsInNjcm9sbDEiLCJzY3JvbGwyIiwibWFya2VyU3RhcnQiLCJtYXJrZXJFbmQiLCJtYXJrZXJTdGFydFRyaWdnZXIiLCJtYXJrZXJFbmRUcmlnZ2VyIiwibWFya2VyVmFycyIsImV4ZWN1dGluZ09uUmVmcmVzaCIsInBpbk9yaWdpbmFsU3RhdGUiLCJwaW5BY3RpdmVTdGF0ZSIsInBpblN0YXRlIiwicGluR2V0dGVyIiwicGluU2V0dGVyIiwicGluU3RhcnQiLCJwaW5DaGFuZ2UiLCJzcGFjaW5nU3RhcnQiLCJtYXJrZXJTdGFydFNldHRlciIsInBpbk1vdmVzIiwibWFya2VyRW5kU2V0dGVyIiwic25hcDEiLCJzbmFwMiIsInNjcnViVHdlZW4iLCJzY3J1YlNtb290aCIsInNuYXBEdXJDbGFtcCIsInNuYXBEZWxheWVkQ2FsbCIsInByZXZTY3JvbGwiLCJwcmV2QW5pbVByb2dyZXNzIiwiY2FNYXJrZXJTZXR0ZXIiLCJjdXN0b21SZXZlcnRSZXR1cm4iLCJfdmFycyIsInRvZ2dsZUNsYXNzIiwib25Ub2dnbGUiLCJzY3J1YiIsInBpblNwYWNpbmciLCJpbnZhbGlkYXRlT25SZWZyZXNoIiwib25TY3J1YkNvbXBsZXRlIiwib25TbmFwQ29tcGxldGUiLCJvbmNlIiwicGluUmVwYXJlbnQiLCJwaW5TcGFjZXIiLCJmYXN0U2Nyb2xsRW5kIiwicHJldmVudE92ZXJsYXBzIiwiaXNUb2dnbGUiLCJzY3JvbGxlckNhY2hlIiwiY2FsbGJhY2tzIiwib25MZWF2ZSIsIm9uTGVhdmVCYWNrIiwibWFya2VycyIsIm9uUmVmcmVzaEluaXQiLCJnZXRTY3JvbGxlclNpemUiLCJfZ2V0U2l6ZUZ1bmMiLCJnZXRTY3JvbGxlck9mZnNldHMiLCJfZ2V0T2Zmc2V0c0Z1bmMiLCJsYXN0U25hcCIsImxhc3RSZWZyZXNoIiwicHJldlByb2dyZXNzIiwiYmluZCIsInJlZnJlc2hQcmlvcml0eSIsInR3ZWVuU2Nyb2xsIiwic2NydWJEdXJhdGlvbiIsImVhc2UiLCJ0b3RhbFByb2dyZXNzIiwicGF1c2VkIiwibGF6eSIsIl9pbml0dGVkIiwiaXNSZXZlcnRlZCIsImltbWVkaWF0ZVJlbmRlciIsInNuYXBUbyIsIl9nZXRDbG9zZXN0TGFiZWwiLCJzdCIsImRpcmVjdGlvbmFsIiwiZGVsYXkiLCJyZWZyZXNoZWRSZWNlbnRseSIsImlzQWN0aXZlIiwiZW5kU2Nyb2xsIiwidmVsb2NpdHkiLCJuYXR1cmFsRW5kIiwiaW5lcnRpYSIsIl9zbmFwIiwib25TdGFydCIsIl9vbkludGVycnVwdCIsIl9vbkNvbXBsZXRlIiwicmVzZXRUbyIsIl90VGltZSIsIl90RHVyIiwic3RSZXZlcnQiLCJuYXRpdmVFbGVtZW50Iiwic3BhY2VySXNOYXRpdmUiLCJxdWlja1NldHRlciIsImNvbnRlbnQiLCJvbGRPblVwZGF0ZSIsIm9sZFBhcmFtcyIsIm9uVXBkYXRlUGFyYW1zIiwiZXZlbnRDYWxsYmFjayIsInByZXZpb3VzIiwibmV4dCIsInByZXZSZWZyZXNoaW5nIiwiX3N3YXBQaW5PdXQiLCJzb2Z0IiwicGluT2Zmc2V0IiwiaW52YWxpZGF0ZSIsImlzVmVydGljYWwiLCJvdmVycmlkZSIsImN1clRyaWdnZXIiLCJjdXJQaW4iLCJvcHBvc2l0ZVNjcm9sbCIsImluaXR0ZWQiLCJyZXZlcnRlZFBpbnMiLCJmb3JjZWRPdmVyZmxvdyIsIm1hcmtlclN0YXJ0T2Zmc2V0IiwibWFya2VyRW5kT2Zmc2V0IiwiaXNGaXJzdFJlZnJlc2giLCJvdGhlclBpbk9mZnNldCIsInBhcnNlZEVuZCIsInBhcnNlZEVuZFRyaWdnZXIiLCJlbmRUcmlnZ2VyIiwicGFyc2VkU3RhcnQiLCJwaW5uZWRDb250YWluZXIiLCJ0cmlnZ2VySW5kZXgiLCJ1bnNoaWZ0IiwiX3BpblB1c2giLCJub3JtYWxpemUiLCJfcGluT2Zmc2V0IiwiY2VpbCIsIm9taXRPZmZzZXRzIiwiX2NvcHlTdGF0ZSIsImVuZEFuaW1hdGlvbiIsImxhYmVsVG9TY3JvbGwiLCJsYWJlbCIsImdldFRyYWlsaW5nIiwicmV2ZXJzZSIsImZvcmNlRmFrZSIsInRvZ2dsZVN0YXRlIiwiYWN0aW9uIiwic3RhdGVDaGFuZ2VkIiwidG9nZ2xlZCIsImlzQXRNYXgiLCJpc1Rha2luZ0FjdGlvbiIsImNsaXBwZWQiLCJfZHAiLCJfc3RhcnQiLCJuIiwibmV3U3RhcnQiLCJuZXdFbmQiLCJrZWVwQ2xhbXAiLCJfY2hhbmdlIiwiYWxsb3dBbmltYXRpb24iLCJvbktpbGwiLCJ1cGRhdGVGdW5jIiwiX3F1ZXVlUmVmcmVzaEFsbCIsImNsZWFySW50ZXJ2YWwiLCJzdXBwcmVzc092ZXJ3cml0ZXMiLCJ1c2VyQWdlbnQiLCJib2R5U3R5bGUiLCJib3JkZXIiLCJib3JkZXJUb3BTdHlsZSIsIkFuaW1hdGlvblByb3RvIiwiQW5pbWF0aW9uIiwic2V0SW50ZXJ2YWwiLCJ3IiwiaCIsImhpZGRlbiIsImxpbWl0Q2FsbGJhY2tzIiwibXMiLCJzeW5jSW50ZXJ2YWwiLCJpZ25vcmVNb2JpbGVSZXNpemUiLCJhdXRvUmVmcmVzaEV2ZW50cyIsImNsZWFyTWF0Y2hNZWRpYSIsImlzSW5WaWV3cG9ydCIsInBvc2l0aW9uSW5WaWV3cG9ydCIsInJlZmVyZW5jZVBvaW50Iiwia2lsbEFsbCIsImFsbG93TGlzdGVuZXJzIiwibGlzdGVuZXJzIiwic2F2ZVN0eWxlcyIsInNhZmUiLCJjbGVhclNjcm9sbE1lbW9yeSIsIm1heFNjcm9sbCIsImdldFNjcm9sbEZ1bmMiLCJpc1Njcm9sbGluZyIsInNuYXBEaXJlY3Rpb25hbCIsImJhdGNoIiwidmFyc0NvcHkiLCJpbnRlcnZhbCIsImJhdGNoTWF4IiwicHJveHlDYWxsYmFjayIsImVsZW1lbnRzIiwidHJpZ2dlcnMiLCJfaW5wdXRJc0ZvY3VzZWQiLCJfY2xhbXBTY3JvbGxBbmRHZXREdXJhdGlvbk11bHRpcGxpZXIiLCJfYWxsb3dOYXRpdmVQYW5uaW5nIiwidG91Y2hBY3Rpb24iLCJfb3ZlcmZsb3ciLCJhdXRvIiwiX25lc3RlZFNjcm9sbCIsIl9yZWY1Iiwibm9kZSIsIl9pc1Njcm9sbFQiLCJzY3JvbGxIZWlnaHQiLCJjbGllbnRIZWlnaHQiLCJzY3JvbGxXaWR0aCIsIm92ZXJmbG93WSIsIm92ZXJmbG93WCIsIl9pc1Njcm9sbCIsInN0b3BQcm9wYWdhdGlvbiIsIl9pbnB1dE9ic2VydmVyIiwiaW5wdXRzIiwibmVzdGVkIiwiX2NhcHR1cmVJbnB1dHMiLCJfaW5wdXRFeHAiLCJpc0lucHV0IiwiX2dldFNjcm9sbE5vcm1hbGl6ZXIiLCJtYXhZIiwibGFzdFJlZnJlc2hJRCIsInNraXBUb3VjaE1vdmUiLCJzdGFydFNjcm9sbFgiLCJzdGFydFNjcm9sbFkiLCJfdmFyczIiLCJub3JtYWxpemVTY3JvbGxYIiwibW9tZW50dW0iLCJhbGxvd05lc3RlZFNjcm9sbCIsInNtb290aGVyIiwiU2Nyb2xsU21vb3RoZXIiLCJzbW9vdGhlckluc3RhbmNlIiwiaW5pdGlhbFNjYWxlIiwidmlzdWFsVmlld3BvcnQiLCJvdXRlcldpZHRoIiwid2hlZWxSZWZyZXNoIiwicmVzb2x2ZU1vbWVudHVtRHVyYXRpb24iLCJpbnB1dE9ic2VydmVyIiwicmVzdW1lVG91Y2hNb3ZlIiwic2Nyb2xsQ2xhbXBYIiwic2Nyb2xsQ2xhbXBZIiwidXBkYXRlQ2xhbXBzIiwicmVtb3ZlQ29udGVudE9mZnNldCIsIm9uUmVzaXplIiwiaWdub3JlRHJhZyIsInByZXZTY2FsZSIsImN1cnJlbnRTY3JvbGwiLCJkdXIiLCJ2ZWxvY2l0eVgiLCJ2ZWxvY2l0eVkiLCJwbGF5IiwiX3RzIiwieEFycmF5IiwieUFycmF5IiwieUNsYW1wZWQiLCJ0aWNrZXIiLCJub3JtYWxpemVTY3JvbGwiLCJub3JtYWxpemVyIiwic3MiLCJyZWYiLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwiUmVmZXJlbmNlRXJyb3IiLCJfaW5oZXJpdHNMb29zZSIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImNvbnN0cnVjdG9yIiwiX19wcm90b19fIiwiX2dsb2JhbFRpbWVsaW5lIiwiX2NvcmVSZWFkeSIsIl9sYXN0UmVuZGVyZWRGcmFtZSIsIl9xdWlja1R3ZWVuIiwiX3RpY2tlckFjdGl2ZSIsIm4xIiwibjIiLCJuMyIsImVhc2VPdXQiLCJfY29uZmlnIiwiYXV0b1NsZWVwIiwib3ZlcndyaXRlIiwiX2JpZ051bSIsIl90aW55TnVtIiwiXzJQSSIsIl9IQUxGX1BJIiwiX2dzSUQiLCJfc3FydCIsIl9jb3MiLCJfc2luIiwiX2lzVW5kZWZpbmVkIiwiX2lzTm90RmFsc2UiLCJfaXNGdW5jT3JTdHJpbmciLCJfaXNUeXBlZEFycmF5IiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJfaXNBcnJheSIsIl9zdHJpY3ROdW1FeHAiLCJfbnVtRXhwIiwiX251bVdpdGhVbml0RXhwIiwiX2NvbXBsZXhTdHJpbmdOdW1FeHAiLCJfcmVsRXhwIiwiX2RlbGltaXRlZFZhbHVlRXhwIiwiX3VuaXRFeHAiLCJfZ2xvYmFscyIsIl9pbnN0YWxsU2NvcGUiLCJfaW5zdGFsbCIsInNjb3BlIiwiX21lcmdlIiwiX21pc3NpbmdQbHVnaW4iLCJfd2FybiIsIm1lc3NhZ2UiLCJzdXBwcmVzcyIsIl9hZGRHbG9iYWwiLCJfZW1wdHlGdW5jIiwiX3N0YXJ0QXRSZXZlcnRDb25maWciLCJzdXBwcmVzc0V2ZW50cyIsIl9yZXZlcnRDb25maWdOb0tpbGwiLCJfcmV2ZXJ0Q29uZmlnIiwiX3Jlc2VydmVkUHJvcHMiLCJfbGF6eVR3ZWVucyIsIl9sYXp5TG9va3VwIiwiX3BsdWdpbnMiLCJfZWZmZWN0cyIsIl9uZXh0R0NGcmFtZSIsIl9oYXJuZXNzUGx1Z2lucyIsIl9jYWxsYmFja05hbWVzIiwiX2hhcm5lc3MiLCJoYXJuZXNzUGx1Z2luIiwiaGFybmVzcyIsIkdTQ2FjaGUiLCJfZ2V0Q2FjaGUiLCJfZ2V0UHJvcGVydHkiLCJfZm9yRWFjaE5hbWUiLCJuYW1lcyIsIl9yb3VuZFByZWNpc2UiLCJfcGFyc2VSZWxhdGl2ZSIsIm9wZXJhdG9yIiwiX2FycmF5Q29udGFpbnNBbnkiLCJ0b1NlYXJjaCIsInRvRmluZCIsIl9sYXp5UmVuZGVyIiwiX2xhenkiLCJfbGF6eVNhZmVSZW5kZXIiLCJfc3RhcnRBdCIsIl9udW1lcmljSWZQb3NzaWJsZSIsImJhc2UiLCJ0b01lcmdlIiwiX21lcmdlRGVlcCIsIl9jb3B5RXhjbHVkaW5nIiwiZXhjbHVkaW5nIiwiY29weSIsIl9pbmhlcml0RGVmYXVsdHMiLCJleGNsdWRlRHVyYXRpb24iLCJrZXlmcmFtZXMiLCJfYWRkTGlua2VkTGlzdEl0ZW0iLCJjaGlsZCIsImZpcnN0UHJvcCIsImxhc3RQcm9wIiwic29ydEJ5IiwiX3ByZXYiLCJfcmVtb3ZlTGlua2VkTGlzdEl0ZW0iLCJfcmVtb3ZlRnJvbVBhcmVudCIsIm9ubHlJZlBhcmVudEhhc0F1dG9SZW1vdmUiLCJhdXRvUmVtb3ZlQ2hpbGRyZW4iLCJfYWN0IiwiX3VuY2FjaGUiLCJfZW5kIiwiX2RpcnR5IiwiX3Jld2luZFN0YXJ0QXQiLCJhdXRvUmV2ZXJ0IiwiX2hhc05vUGF1c2VkQW5jZXN0b3JzIiwiX2VsYXBzZWRDeWNsZUR1cmF0aW9uIiwiX3JlcGVhdCIsIl9hbmltYXRpb25DeWNsZSIsIl9yRGVsYXkiLCJ0VGltZSIsImN5Y2xlRHVyYXRpb24iLCJ3aG9sZSIsImZsb29yIiwiX3BhcmVudFRvQ2hpbGRUb3RhbFRpbWUiLCJwYXJlbnRUaW1lIiwidG90YWxEdXJhdGlvbiIsIl9zZXRFbmQiLCJfcnRzIiwiX2FsaWduUGxheWhlYWQiLCJzbW9vdGhDaGlsZFRpbWluZyIsIl9wb3N0QWRkQ2hlY2tzIiwicmF3VGltZSIsIl9jbGFtcCIsIl96VGltZSIsIl9hZGRUb1RpbWVsaW5lIiwic2tpcENoZWNrcyIsIl9kZWxheSIsInRpbWVTY2FsZSIsIl9pc0Zyb21PckZyb21TdGFydCIsIl9yZWNlbnQiLCJfc2Nyb2xsVHJpZ2dlciIsIl9hdHRlbXB0SW5pdFR3ZWVuIiwiX2luaXRUd2VlbiIsIl90aWNrZXIiLCJmcmFtZSIsIl9wYXJlbnRQbGF5aGVhZElzQmVmb3JlU3RhcnQiLCJfbG9jayIsIl9zZXREdXJhdGlvbiIsInNraXBVbmNhY2hlIiwibGVhdmVQbGF5aGVhZCIsInJlcGVhdCIsIl9vblVwZGF0ZVRvdGFsRHVyYXRpb24iLCJUaW1lbGluZSIsIl96ZXJvUG9zaXRpb24iLCJlbmRUaW1lIiwicGVyY2VudEFuaW1hdGlvbiIsImlzUGVyY2VudCIsInJlY2VudCIsImNsaXBwZWREdXJhdGlvbiIsIl9jcmVhdGVUd2VlblR5cGUiLCJwYXJhbXMiLCJpclZhcnMiLCJpc0xlZ2FjeSIsInZhcnNJbmRleCIsInJ1bkJhY2t3YXJkcyIsIlR3ZWVuIiwiX2NvbmRpdGlvbmFsUmV0dXJuIiwiZ2V0VW5pdCIsIl9zbGljZSIsIl9pc0FycmF5TGlrZSIsIm5vbkVtcHR5IiwiX2ZsYXR0ZW4iLCJhciIsImxlYXZlU3RyaW5ncyIsImFjY3VtdWxhdG9yIiwiX2FjY3VtdWxhdG9yIiwiX3dha2UiLCJzaHVmZmxlIiwicmFuZG9tIiwiZGlzdHJpYnV0ZSIsImVhY2giLCJfcGFyc2VFYXNlIiwiZnJvbSIsImlzRGVjaW1hbCIsInJhdGlvcyIsInJhdGlvWCIsInJhdGlvWSIsImVkZ2VzIiwib3JpZ2luWCIsIm9yaWdpblkiLCJqIiwid3JhcEF0IiwiZGlzdGFuY2VzIiwiX2ludmVydEVhc2UiLCJfcm91bmRNb2RpZmllciIsInBvdyIsInJhdyIsInJhZGl1cyIsImlzMkQiLCJ2YWx1ZXMiLCJpbmNyZW1lbnQiLCJyb3VuZGluZ0luY3JlbWVudCIsInJldHVybkZ1bmN0aW9uIiwiX3dyYXBBcnJheSIsIndyYXBwZXIiLCJfcmVwbGFjZVJhbmRvbSIsIm51bXMiLCJpbk1pbiIsImluTWF4Iiwib3V0TWluIiwib3V0TWF4IiwiaW5SYW5nZSIsIm91dFJhbmdlIiwiX2dldExhYmVsSW5EaXJlY3Rpb24iLCJmcm9tVGltZSIsImJhY2t3YXJkIiwiZGlzdGFuY2UiLCJleGVjdXRlTGF6eUZpcnN0IiwicHJldkNvbnRleHQiLCJjYWxsYmFja1Njb3BlIiwiX2ludGVycnVwdCIsIl9yZWdpc3RlclBsdWdpblF1ZXVlIiwiX2NyZWF0ZVBsdWdpbiIsImhlYWRsZXNzIiwiaXNGdW5jIiwiUGx1Z2luIiwiaW5zdGFuY2VEZWZhdWx0cyIsIl9yZW5kZXJQcm9wVHdlZW5zIiwiX2FkZFByb3BUd2VlbiIsIl9raWxsUHJvcFR3ZWVuc09mIiwibW9kaWZpZXIiLCJfYWRkUGx1Z2luTW9kaWZpZXIiLCJyYXdWYXJzIiwic3RhdGljcyIsIl9nZXRTZXR0ZXIiLCJQcm9wVHdlZW4iLCJfMjU1IiwiX2NvbG9yTG9va3VwIiwiYXF1YSIsImxpbWUiLCJzaWx2ZXIiLCJibGFjayIsIm1hcm9vbiIsInRlYWwiLCJibHVlIiwibmF2eSIsIndoaXRlIiwib2xpdmUiLCJ5ZWxsb3ciLCJvcmFuZ2UiLCJncmF5IiwicHVycGxlIiwiZ3JlZW4iLCJyZWQiLCJwaW5rIiwiY3lhbiIsInRyYW5zcGFyZW50IiwiX2h1ZSIsIm0xIiwibTIiLCJzcGxpdENvbG9yIiwidG9IU0wiLCJmb3JjZUFscGhhIiwiZyIsIndhc0hTTCIsInBhcnNlSW50IiwiTnVtYmVyIiwiX2NvbG9yT3JkZXJEYXRhIiwiX2NvbG9yRXhwIiwiX2Zvcm1hdENvbG9ycyIsIm9yZGVyTWF0Y2hEYXRhIiwic2hlbGwiLCJjb2xvcnMiLCJzaGlmdCIsIlJlZ0V4cCIsIl9oc2xFeHAiLCJfY29sb3JTdHJpbmdGaWx0ZXIiLCJjb21iaW5lZCIsIl9pZCIsIl9yZXEiLCJfcmFmIiwiX3NlbGYiLCJfZGVsdGEiLCJfbGFnVGhyZXNob2xkIiwiX2FkanVzdGVkTGFnIiwiX3N0YXJ0VGltZSIsIl9sYXN0VXBkYXRlIiwiX2dhcCIsIl9uZXh0VGltZSIsIl90aWNrIiwib3ZlcmxhcCIsImRpc3BhdGNoIiwiZWxhcHNlZCIsIm1hbnVhbCIsInRpY2siLCJkZWx0YVJhdGlvIiwiZnBzIiwid2FrZSIsImdzYXBWZXJzaW9ucyIsIkdyZWVuU29ja0dsb2JhbHMiLCJzbGVlcCIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwiY2xlYXJUaW1lb3V0IiwibGFnU21vb3RoaW5nIiwiYWRqdXN0ZWRMYWciLCJJbmZpbml0eSIsIl9mcHMiLCJwcmlvcml0aXplIiwiX2Vhc2VNYXAiLCJfY3VzdG9tRWFzZUV4cCIsIl9xdW90ZXNFeHAiLCJfcGFyc2VPYmplY3RJblN0cmluZyIsInZhbCIsInBhcnNlZFZhbCIsImxhc3RJbmRleE9mIiwiX3Byb3BhZ2F0ZVlveW9FYXNlIiwiaXNZb3lvIiwiX2ZpcnN0IiwieW95b0Vhc2UiLCJfeW95byIsIl9lYXNlIiwiX3lFYXNlIiwiZGVmYXVsdEVhc2UiLCJvcGVuIiwiY2xvc2UiLCJfQ0UiLCJfY29uZmlnRWFzZUZyb21TdHJpbmciLCJfaW5zZXJ0RWFzZSIsImVhc2VJbiIsImVhc2VJbk91dCIsImxvd2VyY2FzZU5hbWUiLCJfZWFzZUluT3V0RnJvbU91dCIsIl9jb25maWdFbGFzdGljIiwiYW1wbGl0dWRlIiwicGVyaW9kIiwicDMiLCJhc2luIiwiX2NvbmZpZ0JhY2siLCJvdmVyc2hvb3QiLCJwb3dlciIsIkxpbmVhciIsImVhc2VOb25lIiwibm9uZSIsIlN0ZXBwZWRFYXNlIiwic3RlcHMiLCJpbW1lZGlhdGVTdGFydCIsInJlcGVhdERlbGF5IiwieW95byIsIl9wcm90byIsInN0YXJ0VGltZSIsIl90b3RhbFRpbWUiLCJfcHRMb29rdXAiLCJfcFRpbWUiLCJpdGVyYXRpb24iLCJfcHMiLCJfcmVjYWNoZUFuY2VzdG9ycyIsImluY2x1ZGVSZXBlYXRzIiwid3JhcFJlcGVhdHMiLCJwcmV2SXNSZXZlcnRpbmciLCJnbG9iYWxUaW1lIiwiX3NhdCIsImluY2x1ZGVEZWxheSIsImF0VGltZSIsInJlc3VtZSIsIl9vblVwZGF0ZSIsInRoZW4iLCJvbkZ1bGZpbGxlZCIsIlByb21pc2UiLCJyZXNvbHZlIiwiX3Jlc29sdmUiLCJfdGhlbiIsIl9wcm9tIiwiX0FuaW1hdGlvbiIsInNvcnRDaGlsZHJlbiIsIl9wcm90bzIiLCJmcm9tVG8iLCJmcm9tVmFycyIsInRvVmFycyIsInN0YWdnZXJUbyIsInN0YWdnZXIiLCJvbkNvbXBsZXRlQWxsIiwib25Db21wbGV0ZUFsbFBhcmFtcyIsIm9uQ29tcGxldGVQYXJhbXMiLCJzdGFnZ2VyRnJvbSIsInN0YWdnZXJGcm9tVG8iLCJwcmV2UGF1c2VkIiwicGF1c2VUd2VlbiIsInByZXZTdGFydCIsInByZXZJdGVyYXRpb24iLCJwcmV2VGltZSIsInREdXIiLCJjcm9zc2luZ1N0YXJ0IiwicmV3aW5kaW5nIiwiZG9lc1dyYXAiLCJyZXBlYXRSZWZyZXNoIiwib25SZXBlYXQiLCJfaGFzUGF1c2UiLCJfZm9yY2luZyIsIl9sYXN0IiwiX2ZpbmROZXh0UGF1c2VUd2VlbiIsImFkanVzdGVkVGltZSIsIl90aGlzMiIsImFkZExhYmVsIiwiZ2V0Q2hpbGRyZW4iLCJ0d2VlbnMiLCJ0aW1lbGluZXMiLCJpZ25vcmVCZWZvcmVUaW1lIiwiYW5pbWF0aW9ucyIsInJlbW92ZUxhYmVsIiwia2lsbFR3ZWVuc09mIiwiX3RvdGFsVGltZTIiLCJhZGRQYXVzZSIsInJlbW92ZVBhdXNlIiwib25seUFjdGl2ZSIsImdldFR3ZWVuc09mIiwiX292ZXJ3cml0aW5nVHdlZW4iLCJwYXJzZWRUYXJnZXRzIiwiaXNHbG9iYWxUaW1lIiwiX3RhcmdldHMiLCJ0bCIsIl9vblN0YXJ0Iiwib25TdGFydFBhcmFtcyIsInR3ZWVuRnJvbVRvIiwiZnJvbVBvc2l0aW9uIiwidG9Qb3NpdGlvbiIsIm5leHRMYWJlbCIsImFmdGVyVGltZSIsInByZXZpb3VzTGFiZWwiLCJiZWZvcmVUaW1lIiwiY3VycmVudExhYmVsIiwic2hpZnRDaGlsZHJlbiIsImFkanVzdExhYmVscyIsImNsZWFyIiwiaW5jbHVkZUxhYmVscyIsInVwZGF0ZVJvb3QiLCJfZm9yY2VBbGxQcm9wVHdlZW5zIiwiX2FkZENvbXBsZXhTdHJpbmdQcm9wVHdlZW4iLCJzZXR0ZXIiLCJzdHJpbmdGaWx0ZXIiLCJmdW5jUGFyYW0iLCJzdGFydE51bXMiLCJoYXNSYW5kb20iLCJfcmVuZGVyQ29tcGxleFN0cmluZyIsImZwIiwib3B0aW9uYWwiLCJjdXJyZW50VmFsdWUiLCJfc2V0dGVyRnVuY1dpdGhQYXJhbSIsIl9zZXR0ZXJGdW5jIiwiX3NldHRlclBsYWluIiwiX3JlbmRlckJvb2xlYW4iLCJfcmVuZGVyUGxhaW4iLCJfY2hlY2tQbHVnaW4iLCJwdExvb2t1cCIsIl9wYXJzZUZ1bmNPclN0cmluZyIsIl9wcm9jZXNzVmFycyIsInByaW9yaXR5IiwiY2xlYW5WYXJzIiwiZ3NEYXRhIiwiaGFybmVzc1ZhcnMiLCJvdmVyd3JpdHRlbiIsInByZXZTdGFydEF0IiwiZnVsbFRhcmdldHMiLCJhdXRvT3ZlcndyaXRlIiwiX292ZXJ3cml0ZSIsIl9mcm9tIiwiX3B0Q2FjaGUiLCJfb3AiLCJfc29ydFByb3BUd2VlbnNCeVByaW9yaXR5IiwiX29uSW5pdCIsIl9wYXJzZUtleWZyYW1lIiwiYWxsUHJvcHMiLCJlYXNlRWFjaCIsIl9zdGFnZ2VyVHdlZW5Qcm9wcyIsIl9zdGFnZ2VyUHJvcHNUb1NraXAiLCJfQW5pbWF0aW9uMiIsInNraXBJbmhlcml0IiwiX3RoaXMzIiwiY3VyVGFyZ2V0Iiwic3RhZ2dlckZ1bmMiLCJzdGFnZ2VyVmFyc1RvTWVyZ2UiLCJfdGhpczMkdmFycyIsImtmIiwiX3Byb3RvMyIsImlzTmVnYXRpdmUiLCJwcmV2UmF0aW8iLCJfcmVuZGVyWmVyb0R1cmF0aW9uVHdlZW4iLCJzdGFydElzUmVsYXRpdmUiLCJza2lwUmVjdXJzaW9uIiwicm9vdFBUIiwibG9va3VwIiwicHRDYWNoZSIsIl91cGRhdGVQcm9wVHdlZW5zIiwib3ZlcndyaXR0ZW5Qcm9wcyIsImN1ckxvb2t1cCIsImN1ck92ZXJ3cml0ZVByb3BzIiwia2lsbGluZ1RhcmdldHMiLCJwcm9wVHdlZW5Mb29rdXAiLCJmaXJzdFBUIiwiYTEiLCJhMiIsIl9hcnJheXNNYXRjaCIsInByb3BlcnR5QWxpYXNlcyIsIl9hZGRBbGlhc2VzVG9WYXJzIiwib25SZXZlcnNlQ29tcGxldGUiLCJvblJldmVyc2VDb21wbGV0ZVBhcmFtcyIsIl9zZXR0ZXJBdHRyaWJ1dGUiLCJoYXNOb25EZXBlbmRlbnRSZW1haW5pbmciLCJfc2V0dGVyV2l0aE1vZGlmaWVyIiwibVNldCIsIm10IiwicHQyIiwiZmlyc3QiLCJsYXN0IiwicmVuZGVyZXIiLCJUd2Vlbk1heCIsIlR3ZWVuTGl0ZSIsIlRpbWVsaW5lTGl0ZSIsIlRpbWVsaW5lTWF4IiwiX21lZGlhIiwiX2xhc3RNZWRpYVRpbWUiLCJfY29udGV4dElEIiwiX29uTWVkaWFDaGFuZ2UiLCJhbnlNYXRjaCIsInF1ZXJpZXMiLCJjb25kaXRpb25zIiwib25NYXRjaCIsIkNvbnRleHQiLCJfciIsIl9wcm90bzUiLCJwcmV2U2VsZWN0b3IiLCJnZXRUd2VlbnMiLCJfdGhpczQiLCJNYXRjaE1lZGlhIiwiY29udGV4dHMiLCJfcHJvdG82IiwibXEiLCJhY3RpdmUiLCJjb25kIiwiYWRkTGlzdGVuZXIiLCJfbGVuMiIsImFyZ3MiLCJfa2V5MiIsImdldHRlciIsImZvcm1hdCIsInNldHRlcnMiLCJxdWlja1RvIiwiX21lcmdlMiIsImlzVHdlZW5pbmciLCJyZWdpc3RlckVmZmVjdCIsImVmZmVjdCIsInBsdWdpbnMiLCJleHRlbmRUaW1lbGluZSIsInBsdWdpbk5hbWUiLCJyZWdpc3RlckVhc2UiLCJwYXJzZUVhc2UiLCJleHBvcnRSb290IiwiaW5jbHVkZURlbGF5ZWRDYWxscyIsIm1hdGNoTWVkaWFSZWZyZXNoIiwiZm91bmQiLCJ3cmFwIiwicmFuZ2UiLCJ3cmFwWW95byIsInRvdGFsIiwicGlwZSIsIl9sZW4iLCJmdW5jdGlvbnMiLCJfa2V5IiwicmVkdWNlIiwidW5pdGl6ZSIsImludGVycG9sYXRlIiwibXV0YXRlIiwiaW50ZXJwb2xhdG9ycyIsImlsIiwibWFzdGVyIiwiaW5zdGFsbCIsImVmZmVjdHMiLCJnbG9iYWxUaW1lbGluZSIsInRvQWRkIiwiX2dldFBsdWdpblByb3BUd2VlbiIsIl9idWlsZE1vZGlmaWVyUGx1Z2luIiwiX2FkZE1vZGlmaWVycyIsIlBvd2VyMCIsIlBvd2VyMSIsIlBvd2VyMiIsIlBvd2VyMyIsIlBvd2VyNCIsIlF1YWQiLCJDdWJpYyIsIlF1YXJ0IiwiUXVpbnQiLCJTdHJvbmciLCJFbGFzdGljIiwiQmFjayIsIkJvdW5jZSIsIlNpbmUiLCJFeHBvIiwiQ2lyYyIsImdzYXBXaXRoQ1NTIiwiX2NsYXNzQ2FsbENoZWNrIiwiVHlwZUVycm9yIiwiX2NyZWF0ZUNsYXNzIiwiX2RlZmluZVByb3BlcnR5Iiwib3duS2V5cyIsIm9iamVjdCIsImVudW1lcmFibGVPbmx5Iiwia2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsInN5bWJvbHMiLCJzeW0iLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfb2JqZWN0U3ByZWFkMiIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiX2luaGVyaXRzIiwiX3NldFByb3RvdHlwZU9mIiwiX2dldFByb3RvdHlwZU9mIiwic2V0UHJvdG90eXBlT2YiLCJnZXRQcm90b3R5cGVPZiIsIl9jcmVhdGVTdXBlciIsIkRlcml2ZWQiLCJoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsInNoYW0iLCJQcm94eSIsInRvU3RyaW5nIiwiX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIlN1cGVyIiwiTmV3VGFyZ2V0IiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJyZWNlaXZlciIsImhhc093blByb3BlcnR5IiwiX3N1cGVyUHJvcEJhc2UiLCJkZXNjIiwiX3NsaWNlZFRvQXJyYXkiLCJhcnIiLCJfYXJyYXlXaXRoSG9sZXMiLCJTeW1ib2wiLCJpdGVyYXRvciIsIl9hcnIiLCJfbiIsIl9kIiwiX2UiLCJ1bmRlZmluZWQiLCJfcyIsImRvbmUiLCJlcnIiLCJfaXRlcmFibGVUb0FycmF5TGltaXQiLCJfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCJfbm9uSXRlcmFibGVSZXN0IiwiX3RvQ29uc3VtYWJsZUFycmF5IiwiX2FycmF5TGlrZVRvQXJyYXkiLCJfYXJyYXlXaXRob3V0SG9sZXMiLCJpdGVyIiwiX2l0ZXJhYmxlVG9BcnJheSIsIl9ub25JdGVyYWJsZVNwcmVhZCIsIm1pbkxlbiIsImxlbiIsImFycjIiLCJpbml0UG9zaXRpb24iLCJnZXN0dXJlRGlyZWN0aW9uIiwicmVsb2FkT25Db250ZXh0Q2hhbmdlIiwibGVycCIsInNjcm9sbGJhckNvbnRhaW5lciIsInNjcm9sbGJhckNsYXNzIiwic2Nyb2xsaW5nQ2xhc3MiLCJkcmFnZ2luZ0NsYXNzIiwic21vb3RoQ2xhc3MiLCJpbml0Q2xhc3MiLCJnZXRTcGVlZCIsImdldERpcmVjdGlvbiIsInNjcm9sbEZyb21Bbnl3aGVyZSIsImZpcmVmb3hNdWx0aXBsaWVyIiwidG91Y2hNdWx0aXBsaWVyIiwicmVzZXROYXRpdmVTY3JvbGwiLCJzbWFydHBob25lIiwiX2RlZmF1bHQiLCJvcHRpb25zIiwiYXNzaWduIiwibmFtZXNwYWNlIiwiaHRtbCIsIndpbmRvd0hlaWdodCIsIndpbmRvd1dpZHRoIiwid2luZG93TWlkZGxlIiwiZWxzIiwiY3VycmVudEVsZW1lbnRzIiwiaGFzU2Nyb2xsVGlja2luZyIsImhhc0NhbGxFdmVudFNldCIsImNoZWNrU2Nyb2xsIiwiY2hlY2tSZXNpemUiLCJjaGVja0V2ZW50IiwibGltaXQiLCJpc01vYmlsZSIsImlzVGFibGV0IiwiZGlyZWN0aW9uQXhpcyIsInNwZWVkIiwiaW5pdEV2ZW50cyIsImRpc3BhdGNoU2Nyb2xsIiwicmVzaXplVGljayIsInJlc2l6ZSIsInBsYXRmb3JtIiwib2xkQ29udGV4dCIsImxvY2F0aW9uIiwicmVsb2FkIiwic2Nyb2xsVG9FbHMiLCJzZXRTY3JvbGxUbyIsImN1cnJlbnRUYXJnZXQiLCJzY3JvbGxCb3R0b20iLCJzY3JvbGxMZWZ0Iiwic2Nyb2xsUmlnaHQiLCJlbnRyaWVzIiwiaW5WaWV3Iiwic2V0SW5WaWV3Iiwic2V0T3V0T2ZWaWV3IiwiZGlzcGF0Y2hDYWxsIiwid2F5IiwiY2FsbFdheSIsImNhbGxWYWx1ZSIsIml0ZW0iLCJjYWxsT2JqIiwiY2FsbEV2ZW50IiwiRXZlbnQiLCJzY3JvbGxFdmVudCIsImxpc3QiLCJkZXRlY3RFbGVtZW50cyIsIl90aGlzNSIsIl90aGlzNiIsImNvbW1vbmpzR2xvYmFsIiwiZ2xvYmFsVGhpcyIsImNyZWF0ZUNvbW1vbmpzTW9kdWxlIiwiZm4iLCJtb2R1bGUiLCJleHBvcnRzIiwic21vb3Roc2Nyb2xsIiwicG9seWZpbGwiLCJfX2ZvcmNlU21vb3RoU2Nyb2xsUG9seWZpbGxfXyIsIkVsZW1lbnQiLCJIVE1MRWxlbWVudCIsIlNDUk9MTF9USU1FIiwic2Nyb2xsQnkiLCJlbGVtZW50U2Nyb2xsIiwic2Nyb2xsRWxlbWVudCIsInNjcm9sbEludG9WaWV3IiwicGVyZm9ybWFuY2UiLCJST1VORElOR19UT0xFUkFOQ0UiLCJzaG91bGRCYWlsT3V0Iiwic21vb3RoU2Nyb2xsIiwiU3ludGF4RXJyb3IiLCJiZWhhdmlvciIsInNjcm9sbGFibGVQYXJlbnQiLCJpc1Njcm9sbGFibGUiLCJob3N0IiwiZmluZFNjcm9sbGFibGVQYXJlbnQiLCJwYXJlbnRSZWN0cyIsImNsaWVudFJlY3RzIiwiZmlyc3RBcmciLCJoYXNTY3JvbGxhYmxlU3BhY2UiLCJjYW5PdmVyZmxvdyIsIm92ZXJmbG93VmFsdWUiLCJpc1Njcm9sbGFibGVZIiwiaXNTY3JvbGxhYmxlWCIsInN0ZXAiLCJjdXJyZW50WCIsImN1cnJlbnRZIiwiayIsIm1ldGhvZCIsInNjcm9sbGFibGUiLCJfZGVmYXVsdCQxIiwiX0NvcmUiLCJfc3VwZXIiLCJzbW9vdGhzY3JvbGxQb2x5ZmlsbCIsImFkZEVsZW1lbnRzIiwiYWRkRGlyZWN0aW9uIiwiYWRkU3BlZWQiLCJzcGVlZFRzIiwidXBkYXRlRWxlbWVudHMiLCJ0YXJnZXRFbCIsImNsIiwiZGF0YXNldCIsInRhcmdldEVsQkNSIiwicmVsYXRpdmVPZmZzZXQiLCJnZXRSZWxhdGl2ZU9mZnNldCIsIm1hcHBlZEVsIiwiY29udGFpbnMiLCJpbmNsdWRlcyIsImlzVGFyZ2V0UmVhY2hlZCIsInByb3BJc0VudW1lcmFibGUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIm9iamVjdEFzc2lnbiIsInRlc3QxIiwiU3RyaW5nIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsInRlc3QyIiwiZnJvbUNoYXJDb2RlIiwidGVzdDMiLCJsZXR0ZXIiLCJzaG91bGRVc2VOYXRpdmUiLCJ0b09iamVjdCIsIkUiLCJvbiIsImN0eCIsImxpc3RlbmVyIiwib2ZmIiwiXyIsImVtaXQiLCJldnRBcnIiLCJldnRzIiwibGl2ZUV2ZW50cyIsInRpbnlFbWl0dGVyIiwibGV0aGFyZ3kiLCJMZXRoYXJneSIsInN0YWJpbGl0eSIsInNlbnNpdGl2aXR5IiwibGFzdFVwRGVsdGFzIiwicmVzdWx0cyIsImxhc3REb3duRGVsdGFzIiwiZGVsdGFzVGltZXN0YW1wIiwiY2hlY2siLCJsYXN0RGVsdGEiLCJvcmlnaW5hbEV2ZW50Iiwid2hlZWxEZWx0YSIsImRldGFpbCIsImlzSW5lcnRpYSIsImxhc3REZWx0YXMiLCJsYXN0RGVsdGFzTmV3IiwibGFzdERlbHRhc09sZCIsIm5ld0F2ZXJhZ2UiLCJuZXdTdW0iLCJvbGRBdmVyYWdlIiwib2xkU3VtIiwic2hvd0xhc3RVcERlbHRhcyIsInNob3dMYXN0RG93bkRlbHRhcyIsInN1cHBvcnQiLCJoYXNXaGVlbEV2ZW50IiwiaGFzTW91c2VXaGVlbEV2ZW50IiwiaGFzVG91Y2giLCJUb3VjaEV2ZW50IiwiRG9jdW1lbnRUb3VjaCIsImhhc1RvdWNoV2luIiwiaGFzUG9pbnRlciIsIm1zUG9pbnRlckVuYWJsZWQiLCJoYXNLZXlEb3duIiwiaXNGaXJlZm94IiwiaGFzT3duUHJvcGVydHkkMSIsIkVWVF9JRCIsInNyYyIsIlZpcnR1YWxTY3JvbGwiLCJrZXlDb2RlcyIsImJpbmRhbGxTdGFuZGFsb25lIiwibW91c2VNdWx0aXBsaWVyIiwia2V5U3RlcCIsInByZXZlbnRUb3VjaCIsInVucHJldmVudFRvdWNoQ2xhc3MiLCJsaW1pdEluZXJ0aWEiLCJ1c2VLZXlib2FyZCIsInVzZVRvdWNoIiwiX2xldGhhcmd5IiwiX2VtaXR0ZXIiLCJfZXZlbnQiLCJ0b3VjaFN0YXJ0WCIsInRvdWNoU3RhcnRZIiwiYm9keVRvdWNoQWN0aW9uIiwibGlzdGVuZXJPcHRpb25zIiwiYW10IiwiZ2V0VHJhbnNsYXRlIiwid2Via2l0VHJhbnNmb3JtIiwibW96VHJhbnNmb3JtIiwibWF0IiwiZ2V0UGFyZW50cyIsImVsZW0iLCJwYXJlbnRzIiwiX25vdGlmeSIsImV2dCIsIndoZWVsRGVsdGFYIiwid2hlZWxEZWx0YVkiLCJfb25Nb3VzZVdoZWVsIiwiX29uVG91Y2hTdGFydCIsInRhcmdldFRvdWNoZXMiLCJwYWdlWCIsInBhZ2VZIiwiX29uVG91Y2hNb3ZlIiwiX29uS2V5RG93biIsImtleUNvZGUiLCJzaGlmdEtleSIsIl9iaW5kIiwibXNUb3VjaEFjdGlvbiIsIl91bmJpbmQiLCJjYiIsImtTYW1wbGVTdGVwU2l6ZSIsImZsb2F0MzJBcnJheVN1cHBvcnRlZCIsIkZsb2F0MzJBcnJheSIsIkEiLCJhQTEiLCJhQTIiLCJCIiwiQyIsImNhbGNCZXppZXIiLCJhVCIsImdldFNsb3BlIiwiTGluZWFyRWFzaW5nIiwic3JjJDEiLCJtWDEiLCJtWTEiLCJtWDIiLCJtWTIiLCJFcnJvciIsInNhbXBsZVZhbHVlcyIsImdldFRGb3JYIiwiYVgiLCJpbnRlcnZhbFN0YXJ0IiwiY3VycmVudFNhbXBsZSIsImtTcGxpbmVUYWJsZVNpemUiLCJndWVzc0ZvclQiLCJpbml0aWFsU2xvcGUiLCJhR3Vlc3NUIiwiY3VycmVudFNsb3BlIiwibmV3dG9uUmFwaHNvbkl0ZXJhdGUiLCJhQSIsImFCIiwiY3VycmVudFQiLCJiaW5hcnlTdWJkaXZpZGUiLCJrZXlDb2RlcyQxIiwiX2RlZmF1bHQkMiIsImlzRHJhZ2dpbmdTY3JvbGxiYXIiLCJpc1RpY2tpbmciLCJwYXJhbGxheEVsZW1lbnRzIiwiY2hlY2tLZXkiLCJkZWx0YSIsInZzIiwidXBkYXRlRGVsdGEiLCJzdGFydFNjcm9sbGluZyIsInNldFNjcm9sbExpbWl0IiwiaW5pdFNjcm9sbEJhciIsImFkZFNlY3Rpb25zIiwidHJhbnNmb3JtRWxlbWVudHMiLCJ0b3RhbFdpZHRoIiwibm9kZXMiLCJzdGFydFNjcm9sbFRzIiwiY2hlY2tTY3JvbGxSYWYiLCJzY3JvbGxUb1JhZiIsImFjdGl2ZUVsZW1lbnQiLCJpc0FjdGl2ZUVsZW1lbnRTY3JvbGxTZW5zaXRpdmUiLCJzdG9wU2Nyb2xsaW5nIiwiSFRNTElucHV0RWxlbWVudCIsIkhUTUxUZXh0QXJlYUVsZW1lbnQiLCJIVE1MQnV0dG9uRWxlbWVudCIsIkhUTUxTZWxlY3RFbGVtZW50IiwiZm9yY2VkIiwidXBkYXRlU2Nyb2xsIiwidGltZVNpbmNlU3RhcnQiLCJhbmltYXRpbmdTY3JvbGwiLCJzZWN0aW9ucyIsInNlY3Rpb24iLCJwZXJzaXN0ZW50Iiwib3BhY2l0eSIsInBvaW50ZXJFdmVudHMiLCJoYXNTY3JvbGxiYXIiLCJzY3JvbGxCYXJUcmFuc2xhdGlvbiIsInNjcm9sbEJhckxpbWl0Iiwic2Nyb2xsYmFyVGh1bWIiLCJjaGVja0NvbnRleHQiLCJzZXRTY3JvbGwiLCJzY3JvbGxiYXIiLCJhcHBlbmQiLCJnZXRTY3JvbGxCYXIiLCJyZWxlYXNlU2Nyb2xsQmFyIiwibW92ZVNjcm9sbEJhciIsInNjcm9sbGJhckJDUiIsInNjcm9sbGJhckhlaWdodCIsInNjcm9sbGJhcldpZHRoIiwic2Nyb2xsYmFyVGh1bWJCQ1IiLCJ0YXJnZXRQYXJlbnRzIiwiZmluZCIsInN0aWNreSIsIm1pZGRsZSIsImVsQkNSIiwiZWxUb3AiLCJlbExlZnQiLCJlbERpc3RhbmNlIiwiX3RoaXM3Iiwic2VjdGlvbkJDUiIsIm1hcHBlZFNlY3Rpb24iLCJsZXJwWCIsImxlcnBZIiwibXNUcmFuc2Zvcm0iLCJpc0ZvcmNlZCIsIl90aGlzOCIsInNldEFsbEVsZW1lbnRzIiwic2Nyb2xsTWlkZGxlIiwiX3JlZjYiLCJ0cmFuc2Zvcm1EaXN0YW5jZSIsIl90aGlzOSIsImVhc2luZyIsImRpc2FibGVMZXJwIiwidGFyZ2V0QkNSIiwib2Zmc2V0VG9wIiwib2Zmc2V0TGVmdCIsInBhcmVudFNlY3Rpb24iLCJjYW5kaWRhdGUiLCJfcmVmNyIsIl9yZWY4IiwicGFyZW50U2VjdGlvbk9mZnNldCIsInNjcm9sbFN0YXJ0Iiwic2Nyb2xsRGlmZiIsImxvb3AiLCJyZWluaXRTY3JvbGxCYXIiLCJkZXN0cm95U2Nyb2xsQmFyIiwiU21vb3RoIiwiaGFzaCIsImdldEVsZW1lbnRCeUlkIiwic3RhcnRTY3JvbGwiLCJzdG9wU2Nyb2xsIiwic2V0RXZlbnRzIiwidW5zZXRFdmVudHMiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZGVmaW5pdGlvbiIsIkZ1bmN0aW9uIiwidG9TdHJpbmdUYWciLCJfX2Fzc2lnbiIsImxHRXZlbnRzIiwibGlnaHRHYWxsZXJ5Q29yZVNldHRpbmdzIiwibW9kZSIsImxpY2Vuc2VLZXkiLCJhZGRDbGFzcyIsInN0YXJ0Q2xhc3MiLCJiYWNrZHJvcER1cmF0aW9uIiwic3RhcnRBbmltYXRpb25EdXJhdGlvbiIsInpvb21Gcm9tT3JpZ2luIiwiaGlkZUJhcnNEZWxheSIsInNob3dCYXJzQWZ0ZXIiLCJzbGlkZURlbGF5Iiwic3VwcG9ydExlZ2FjeUJyb3dzZXIiLCJhbGxvd01lZGlhT3ZlcmxhcCIsInZpZGVvTWF4U2l6ZSIsImxvYWRZb3VUdWJlUG9zdGVyIiwiZGVmYXVsdENhcHRpb25IZWlnaHQiLCJhcmlhTGFiZWxsZWRieSIsImFyaWFEZXNjcmliZWRieSIsInJlc2V0U2Nyb2xsUG9zaXRpb24iLCJoaWRlU2Nyb2xsYmFyIiwiY2xvc2FibGUiLCJzd2lwZVRvQ2xvc2UiLCJjbG9zZU9uVGFwIiwic2hvd0Nsb3NlSWNvbiIsInNob3dNYXhpbWl6ZUljb24iLCJlc2NLZXkiLCJrZXlQcmVzcyIsInRyYXBGb2N1cyIsImNvbnRyb2xzIiwic2xpZGVFbmRBbmltYXRpb24iLCJoaWRlQ29udHJvbE9uRW5kIiwibW91c2V3aGVlbCIsImdldENhcHRpb25Gcm9tVGl0bGVPckFsdCIsImFwcGVuZFN1Ykh0bWxUbyIsInN1Ykh0bWxTZWxlY3RvclJlbGF0aXZlIiwicHJlbG9hZCIsIm51bWJlck9mU2xpZGVJdGVtc0luRG9tIiwic2VsZWN0V2l0aGluIiwibmV4dEh0bWwiLCJwcmV2SHRtbCIsImlmcmFtZVdpZHRoIiwiaWZyYW1lSGVpZ2h0IiwiaWZyYW1lTWF4V2lkdGgiLCJpZnJhbWVNYXhIZWlnaHQiLCJkb3dubG9hZCIsImNvdW50ZXIiLCJhcHBlbmRDb3VudGVyVG8iLCJzd2lwZVRocmVzaG9sZCIsImVuYWJsZVN3aXBlIiwiZW5hYmxlRHJhZyIsImR5bmFtaWMiLCJkeW5hbWljRWwiLCJleHRyYVByb3BzIiwiZXhUaHVtYkltYWdlIiwibW9iaWxlU2V0dGluZ3MiLCJzdHJpbmdzIiwiY2xvc2VHYWxsZXJ5IiwidG9nZ2xlTWF4aW1pemUiLCJwcmV2aW91c1NsaWRlIiwibmV4dFNsaWRlIiwicGxheVZpZGVvIiwibWVkaWFMb2FkaW5nRmFpbGVkIiwibGdRdWVyeSIsImNzc1ZlbmRlclByZWZpeGVzIiwiX2dldFNlbGVjdG9yIiwiZmlyc3RFbGVtZW50IiwiX2dldEZpcnN0RWwiLCJnZW5lcmF0ZVVVSUQiLCJfZWFjaCIsIl9zZXRDc3NWZW5kb3JQcmVmaXgiLCJjc3NQcm9wZXJ0eSIsImdyb3VwMSIsImlzRXZlbnRNYXRjaGVkIiwiZXZlbnROYW1lIiwiZXZlbnROYW1lc3BhY2UiLCJldmVyeSIsImF0dHIiLCIkTEciLCJlcSIsInBhcmVudEVsZW1lbnQiLCJyZW1vdmVBdHRyIiwiYXR0cmlidXRlcyIsImF0dHJzIiwiY2xhc3NOYW1lcyIsInJlbW92ZUNsYXNzIiwiaGFzQ2xhc3MiLCJhdHRyaWJ1dGUiLCJldmVudExpc3RlbmVycyIsImN1c3RvbUV2ZW50IiwiQ3VzdG9tRXZlbnQiLCJsb2FkIiwidXJsIiwiZmV0Y2giLCJyZXMiLCJ0ZXh0IiwiaW5uZXJIVE1MIiwiaW5zZXJ0QWRqYWNlbnRIVE1MIiwicHJlcGVuZCIsImVtcHR5IiwicmVjdCIsImJvZHlNYXJnaW5MZWZ0IiwibWFyZ2luTGVmdCIsImN1cnJlbnRTdHlsZSIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ1JpZ2h0IiwicGFkZGluZ1RvcCIsInBhZGRpbmdCb3R0b20iLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsImluaXRDdXN0b21FdmVudCIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwiZGVmYXVsdER5bmFtaWNPcHRpb25zIiwiY29udmVydFRvRGF0YSIsInNwYWNpbmciLCJkZWZhdWx0TGdTaXplIiwibGdTaXplIiwiaXNSZXNwb25zaXZlU2l6ZXMiLCJ3V2lkdGgiLCJzaXplXzEiLCJjV2lkdGgiLCJjSGVpZ2h0IiwibWF4V2lkdGgiLCJtYXhIZWlnaHQiLCJpbWFnZVNpemUiLCJMR2VsIiwiY29udGFpbmVyUmVjdCIsIndIZWlnaHQiLCJlbFdpZHRoIiwiZWxIZWlnaHQiLCJlbFN0eWxlIiwiYm9yZGVyTGVmdCIsImJvcmRlclRvcCIsImlmcmFtZVRpdGxlIiwiYWx0QXR0ciIsInNyY3NldCIsInNpemVzIiwic291cmNlcyIsImltZ01hcmt1cCIsInNvdXJjZVRhZyIsIkpTT04iLCJwYXJzZSIsInNyY0l0bXMiLCJyc1dpZHRoIiwicnNTcmMiLCJfc3JjIiwiaW1nIiwiY29tcGxldGUiLCJuYXR1cmFsV2lkdGgiLCJfcG9zdGVyIiwiZHVtbXlJbWciLCJ2aWRlb0NvbnRTdHlsZSIsInBsYXlWaWRlb1N0cmluZyIsIl9pc1ZpZGVvIiwieW91dHViZSIsInZpbWVvIiwiaXRlbXMiLCJkeW5hbWljRWxlbWVudHMiLCJhdmFpbGFibGVEeW5hbWljT3B0aW9ucyIsImpsIiwiX19zcHJlYWRBcnJheXMiLCJzcGVjaWZpZWQiLCJkeW5hbWljQXR0ciIsImN1cnJlbnRJdGVtIiwiYWx0IiwidGl0bGUiLCJ0aHVtYiIsInN1Ykh0bWwiLCJpc0hUTUw1VklkZW8iLCJodG1sNSIsIndpc3RpYSIsImxnSWQiLCJMaWdodEdhbGxlcnkiLCJsZ09wZW5lZCIsImxHYWxsZXJ5T24iLCJsZ0J1c3kiLCJjdXJyZW50SXRlbXNJbkRvbSIsInByZXZTY3JvbGxUb3AiLCJib2R5UGFkZGluZ1JpZ2h0IiwiaXNEdW1teUltYWdlUmVtb3ZlZCIsImRyYWdPclN3aXBlRW5hYmxlZCIsIm1lZGlhQ29udGFpbmVyUG9zaXRpb24iLCJnZW5lcmF0ZVNldHRpbmdzIiwiYnVpbGRNb2R1bGVzIiwic2V0dGluZ3MiLCJnYWxsZXJ5SXRlbXMiLCJnZXRJdGVtcyIsIm5vcm1hbGl6ZVNldHRpbmdzIiwidmFsaWRhdGVMaWNlbnNlIiwiYWRkU2xpZGVWaWRlb0luZm8iLCJidWlsZFN0cnVjdHVyZSIsInRyaWdnZXJQb3N0ZXJDbGljayIsImFycm93Iiwib3BlbkdhbGxlcnlPbkl0ZW1DbGljayIsIl9sb29wXzEiLCJ0aGlzXzEiLCIkZWxlbWVudCIsInV1aWQiLCJjdXJyZW50SXRlbUluZGV4Iiwib3BlbkdhbGxlcnkiLCJnZXRTbGlkZUl0ZW0iLCJnZXRTbGlkZUl0ZW1JZCIsImdldElkTmFtZSIsIm1hbmFnZVNpbmdsZVNsaWRlQ2xhc3NOYW1lIiwib3V0ZXIiLCIkY29udGFpbmVyIiwic3ViSHRtbENvbnQiLCJhZGRDbGFzc2VzIiwiY29udGFpbmVyQ2xhc3NOYW1lIiwiY2xvc2VJY29uIiwibWF4aW1pemVJY29uIiwidGVtcGxhdGUiLCIkbGdDb21wb25lbnRzIiwiJGJhY2tkcm9wIiwiJGlubmVyIiwiJGNvbnRlbnQiLCIkdG9vbGJhciIsIm91dGVyQ2xhc3NOYW1lcyIsInJlZnJlc2hPblJlc2l6ZSIsImhpZGVCYXJzIiwibWFuYWdlQ2xvc2VHYWxsZXJ5IiwiaW5pdE1vZHVsZXMiLCJfX3NsaWRlVmlkZW9JbmZvIiwiZ2V0TWVkaWFDb250YWluZXJQb3NpdGlvbiIsIl9hIiwidG9wXzEiLCJjdXJyZW50SW1hZ2VTaXplIiwicmVzaXplVmlkZW9TbGlkZSIsImltZ1N0eWxlIiwiZ2V0RHVtbXlJbWdTdHlsZXMiLCJsZ1ZpZGVvU3R5bGUiLCJnZXRWaWRlb0NvbnRTdHlsZSIsInVwZGF0ZVNsaWRlcyIsImN1cnJlbnRTcmMiLCJ1cGRhdGVDb250cm9scyIsIl9pbmRleCIsInNvbWUiLCJnYWxsZXJ5SXRlbSIsIml0ZW1JbmRleCIsIm9yZ2FuaXplU2xpZGVJdGVtcyIsImxvYWRDb250ZW50IiwidXBkYXRlQ3VycmVudENvdW50ZXIiLCJzaG91bGRIaWRlU2Nyb2xsYmFyIiwiYm9keVJlY3QiLCJyZXNldFNjcm9sbEJhciIsIml0ZW1zVG9CZUluc2VydGVkVG9Eb20iLCJnZXRJdGVtc1RvQmVJbnNlcnRlZFRvRG9tIiwiYWRkSHRtbCIsInNldE1lZGlhQ29udGFpbmVyUG9zaXRpb24iLCJ0aW1lb3V0IiwiY3VycmVudFNsaWRlXzEiLCJjYXB0aW9uSGVpZ2h0IiwidGh1bWJDb250YWluZXIiLCJoaWRlQmFyVGltZW91dCIsImluaXRQaWN0dXJlRmlsbCIsIiRpbWciLCJwaWN0dXJlZmlsbCIsImNvdW50ZXJIdG1sIiwic3ViSHRtbFVybCIsImZMIiwiY3VycmVudFNsaWRlIiwiZ2V0RHVtbXlJbWFnZUNvbnRlbnQiLCIkY3VycmVudFNsaWRlIiwiJGN1cnJlbnRJdGVtIiwiX2R1bW15SW1nU3JjIiwiZHVtbXlJbWdDb250ZW50Iiwic2V0SW1nTWFya3VwIiwiY3VycmVudEdhbGxlcnlJdGVtIiwiaXNGaXJzdFNsaWRlV2l0aFpvb21BbmltYXRpb24iLCJvblNsaWRlT2JqZWN0TG9hZCIsIiRzbGlkZSIsImlzSFRNTDVWaWRlb1dpdGhvdXRQb3N0ZXIiLCJvbkxvYWQiLCJvbkVycm9yIiwibWVkaWFPYmplY3QiLCJvbkxnT2JqZWN0TG9hZCIsImlzRmlyc3RTbGlkZSIsInRyaWdnZXJTbGlkZUl0ZW1Mb2FkIiwiX3NwZWVkIiwiZ2V0U2xpZGVUeXBlIiwicG9zdGVyIiwidmlkZW8iLCJfaHRtbDVWaWRlbyIsInJlc3BvbnNpdmUiLCJzcmNEeUl0bXMiLCJ2aWRlb0luZm8iLCJpZnJhbWUiLCJ0b3BfMiIsInZpZGVvU2l6ZSIsIm1hcmt1cCIsImh0bWw1VmlkZW8iLCJoYXNQb3N0ZXIiLCJsb2FkQ29udGVudE9uRmlyc3RTbGlkZUxvYWQiLCJwcmV2SW5kZXgiLCJudW1iZXJPZkl0ZW1zIiwicG9zc2libGVOdW1iZXJPZkl0ZW1zIiwicHJldkluZGV4SXRlbSIsIl9lbGVtZW50IiwibnVtYmVyT2ZFeGlzdGluZ0l0ZW1zIiwiZ2V0UHJldmlvdXNTbGlkZUluZGV4IiwiY3VycmVudEl0ZW1JZCIsInNldERvd25sb2FkVmFsdWUiLCJkb3dubG9hZFVybCIsIiRkb3dubG9hZCIsIm1ha2VTbGlkZUFuaW1hdGlvbiIsImN1cnJlbnRTbGlkZUl0ZW0iLCJwcmV2aW91c1NsaWRlSXRlbSIsImZyb21Ub3VjaCIsImZyb21UaHVtYiIsIm51bWJlck9mR2FsbGVyeUl0ZW1zIiwicHJldmlvdXNTbGlkZUl0ZW1fMSIsInRvcF8zIiwiYXJyb3dEaXNhYmxlIiwidG91Y2hQcmV2IiwidG91Y2hOZXh0IiwidXBkYXRlQ291bnRlclRvdGFsIiwidG91Y2hNb3ZlIiwic3RhcnRDb29yZHMiLCJlbmRDb29yZHMiLCJkaXN0YW5jZVgiLCJkaXN0YW5jZVkiLCJhbGxvd1N3aXBlIiwic3dpcGVEaXJlY3Rpb24iLCJzZXRUcmFuc2xhdGUiLCJndXR0ZXIiLCJ0cmlnZ2VyQ2xpY2siLCJkaXN0YW5jZUFicyIsImdvVG9OZXh0U2xpZGUiLCJnb1RvUHJldlNsaWRlIiwiaXNQb3N0ZXJFbGVtZW50IiwiaXNNb3ZlZCIsImlzU3dpcGluZyIsIiRpdGVtIiwibWFuYWdlU3dpcGVDbGFzcyIsImlzRHJhZ2luZyIsIl90b3VjaE5leHQiLCJfdG91Y2hQcmV2IiwiX2xvb3AiLCIkcHJldiIsIiRuZXh0IiwiJGVsIiwieFZhbHVlIiwieVZhbHVlIiwibGFzdENhbGwiLCJnZXRUaW1lIiwiaXNTbGlkZUVsZW1lbnQiLCJwbGF5QnV0dG9uIiwiaW52YWxpZGF0ZUl0ZW1zIiwiZm9jdXMiLCJwcmV2ZW50U2Nyb2xsIiwiZm9jdXNhYmxlRWxzIiwiZmlyc3RGb2N1c2FibGVFbCIsImxhc3RGb2N1c2FibGVFbCIsIm1vdXNlZG93biIsInRvcF80IiwiX2IiLCJkZXN0cm95TW9kdWxlcyIsInJlbW92ZVRpbWVvdXQiLCJibHVyIiwiZGVzdHJveUdhbGxlcnkiLCJjbG9zZVRpbWVvdXQiLCJleHRlbmQiLCJpbml0TGlnaHRHYWxsZXJ5IiwiZ2FsbGVyeSIsImRlc2NyaXB0aW9uIiwibGciLCJsaWdodEdhbGxlcnkiLCJzc3JEb2N1bWVudCIsIm5vZGVOYW1lIiwiaW5pdEV2ZW50IiwiY2hpbGROb2RlcyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiaW1wb3J0Tm9kZSIsImhvc3RuYW1lIiwiaHJlZiIsInBhdGhuYW1lIiwicHJvdG9jb2wiLCJzZWFyY2giLCJkb2MiLCJzc3JXaW5kb3ciLCJyZXBsYWNlU3RhdGUiLCJwdXNoU3RhdGUiLCJnbyIsImJhY2siLCJJbWFnZSIsInNjcmVlbiIsIndpbiIsImN1clRyYW5zZm9ybSIsInRyYW5zZm9ybU1hdHJpeCIsImN1clN0eWxlIiwiV2ViS2l0Q1NTTWF0cml4IiwiTW96VHJhbnNmb3JtIiwiT1RyYW5zZm9ybSIsIk1zVHJhbnNmb3JtIiwibTQxIiwibTQyIiwibm9FeHRlbmQiLCJuZXh0U291cmNlIiwia2V5c0FycmF5IiwibmV4dEluZGV4IiwibmV4dEtleSIsIl9fc3dpcGVyX18iLCJ2YXJOYW1lIiwidmFyVmFsdWUiLCJhbmltYXRlQ1NTTW9kZVNjcm9sbCIsInN3aXBlciIsInRhcmdldFBvc2l0aW9uIiwic3RhcnRQb3NpdGlvbiIsIndyYXBwZXJFbCIsInNjcm9sbFNuYXBUeXBlIiwiY3NzTW9kZUZyYW1lSUQiLCJkaXIiLCJpc091dE9mQm91bmQiLCJhbmltYXRlIiwiZWFzZVByb2dyZXNzIiwiY3VycmVudFBvc2l0aW9uIiwic2hvd1dhcm5pbmciLCJ0YWciLCJjbGFzc2VzIiwiZWxlbWVudFN0eWxlIiwicHJldmlvdXNTaWJsaW5nIiwiZWxlbWVudE91dGVyU2l6ZSIsImluY2x1ZGVNYXJnaW5zIiwiZGV2aWNlQ2FjaGVkIiwiYnJvd3NlciIsImdldFN1cHBvcnQiLCJ0b3VjaCIsImNhbGNTdXBwb3J0IiwiZ2V0RGV2aWNlIiwib3ZlcnJpZGVzIiwiX3RlbXAiLCJ1YSIsImRldmljZSIsImlvcyIsImFuZHJvaWQiLCJzY3JlZW5XaWR0aCIsInNjcmVlbkhlaWdodCIsImlwYWQiLCJpcG9kIiwiaXBob25lIiwid2luZG93cyIsIm1hY29zIiwiY2FsY0RldmljZSIsImdldEJyb3dzZXIiLCJuZWVkUGVyc3BlY3RpdmVGaXgiLCJpc1NhZmFyaSIsIm1ham9yIiwibWlub3IiLCJudW0iLCJpc1dlYlZpZXciLCJpc1NhZmFyaUJyb3dzZXIiLCJuZWVkM2RGaXgiLCJjYWxjQnJvd3NlciIsImV2ZW50c0VtaXR0ZXIiLCJoYW5kbGVyIiwiZXZlbnRzTGlzdGVuZXJzIiwiZGVzdHJveWVkIiwib25jZUhhbmRsZXIiLCJfX2VtaXR0ZXJQcm94eSIsIm9uQW55IiwiZXZlbnRzQW55TGlzdGVuZXJzIiwib2ZmQW55IiwiZXZlbnRIYW5kbGVyIiwidG9nZ2xlU2xpZGVDbGFzc2VzJDEiLCJzbGlkZUVsIiwiY29uZGl0aW9uIiwidG9nZ2xlU2xpZGVDbGFzc2VzIiwicHJvY2Vzc0xhenlQcmVsb2FkZXIiLCJpbWFnZUVsIiwiaXNFbGVtZW50Iiwic2xpZGVDbGFzcyIsImxhenlFbCIsImxhenlQcmVsb2FkZXJDbGFzcyIsInNoYWRvd1Jvb3QiLCJ1bmxhenkiLCJzbGlkZXMiLCJsYXp5UHJlbG9hZFByZXZOZXh0Iiwic2xpZGVzUGVyVmlldyIsInNsaWRlc1BlclZpZXdEeW5hbWljIiwiYWN0aXZlSW5kZXgiLCJyb3dzIiwiYWN0aXZlQ29sdW1uIiwicHJlbG9hZENvbHVtbnMiLCJjb2x1bW4iLCJzbGlkZUluZGV4TGFzdEluVmlldyIsInJld2luZCIsInJlYWxJbmRleCIsInVwZGF0ZVNpemUiLCJpc0hvcml6b250YWwiLCJnZXREaXJlY3Rpb25Qcm9wZXJ0eVZhbHVlIiwiZ2V0RGlyZWN0aW9uTGFiZWwiLCJzbGlkZXNFbCIsInN3aXBlclNpemUiLCJydGxUcmFuc2xhdGUiLCJydGwiLCJ3cm9uZ1JUTCIsImlzVmlydHVhbCIsInZpcnR1YWwiLCJwcmV2aW91c1NsaWRlc0xlbmd0aCIsInNsaWRlc0xlbmd0aCIsInNuYXBHcmlkIiwic2xpZGVzR3JpZCIsInNsaWRlc1NpemVzR3JpZCIsIm9mZnNldEJlZm9yZSIsInNsaWRlc09mZnNldEJlZm9yZSIsIm9mZnNldEFmdGVyIiwic2xpZGVzT2Zmc2V0QWZ0ZXIiLCJwcmV2aW91c1NuYXBHcmlkTGVuZ3RoIiwicHJldmlvdXNTbGlkZXNHcmlkTGVuZ3RoIiwic3BhY2VCZXR3ZWVuIiwic2xpZGVQb3NpdGlvbiIsInByZXZTbGlkZVNpemUiLCJ2aXJ0dWFsU2l6ZSIsIm1hcmdpblJpZ2h0IiwibWFyZ2luQm90dG9tIiwibWFyZ2luVG9wIiwiY2VudGVyZWRTbGlkZXMiLCJjc3NNb2RlIiwiZ3JpZEVuYWJsZWQiLCJzbGlkZVNpemUiLCJpbml0U2xpZGVzIiwidW5zZXRTbGlkZXMiLCJzaG91bGRSZXNldFNsaWRlU2l6ZSIsImJyZWFrcG9pbnRzIiwidXBkYXRlU2xpZGUiLCJzbGlkZVN0eWxlcyIsImN1cnJlbnRUcmFuc2Zvcm0iLCJjdXJyZW50V2ViS2l0VHJhbnNmb3JtIiwicm91bmRMZW5ndGhzIiwic3dpcGVyU2xpZGVTaXplIiwic2xpZGVzUGVyR3JvdXAiLCJzbGlkZXNQZXJHcm91cFNraXAiLCJzZXRXcmFwcGVyU2l6ZSIsInVwZGF0ZVdyYXBwZXJTaXplIiwibmV3U2xpZGVzR3JpZCIsInNsaWRlc0dyaWRJdGVtIiwiZ3JvdXBzIiwic2xpZGVzQmVmb3JlIiwic2xpZGVzQWZ0ZXIiLCJncm91cFNpemUiLCJzbGlkZUluZGV4IiwiY2VudGVyZWRTbGlkZXNCb3VuZHMiLCJhbGxTbGlkZXNTaXplIiwic2xpZGVTaXplVmFsdWUiLCJtYXhTbmFwIiwiY2VudGVySW5zdWZmaWNpZW50U2xpZGVzIiwib2Zmc2V0U2l6ZSIsImFsbFNsaWRlc09mZnNldCIsInNuYXBJbmRleCIsImFkZFRvU25hcEdyaWQiLCJhZGRUb1NsaWRlc0dyaWQiLCJ3YXRjaE92ZXJmbG93IiwiY2hlY2tPdmVyZmxvdyIsIndhdGNoU2xpZGVzUHJvZ3Jlc3MiLCJ1cGRhdGVTbGlkZXNPZmZzZXQiLCJiYWNrRmFjZUhpZGRlbkNsYXNzIiwiY29udGFpbmVyTW9kaWZpZXJDbGFzcyIsImhhc0NsYXNzQmFja2ZhY2VDbGFzc0FkZGVkIiwibWF4QmFja2ZhY2VIaWRkZW5TbGlkZXMiLCJ1cGRhdGVBdXRvSGVpZ2h0IiwiYWN0aXZlU2xpZGVzIiwibmV3SGVpZ2h0Iiwic2V0VHJhbnNpdGlvbiIsImdldFNsaWRlQnlJbmRleCIsImdldFNsaWRlSW5kZXhCeURhdGEiLCJ2aXNpYmxlU2xpZGVzIiwibWludXNPZmZzZXQiLCJzd2lwZXJTbGlkZU9mZnNldCIsImNzc092ZXJmbG93QWRqdXN0bWVudCIsInVwZGF0ZVNsaWRlc1Byb2dyZXNzIiwib2Zmc2V0Q2VudGVyIiwidmlzaWJsZVNsaWRlc0luZGV4ZXMiLCJzbGlkZU9mZnNldCIsInNsaWRlUHJvZ3Jlc3MiLCJtaW5UcmFuc2xhdGUiLCJvcmlnaW5hbFNsaWRlUHJvZ3Jlc3MiLCJzbGlkZUJlZm9yZSIsInNsaWRlQWZ0ZXIiLCJpc0Z1bGx5VmlzaWJsZSIsImlzVmlzaWJsZSIsInNsaWRlVmlzaWJsZUNsYXNzIiwic2xpZGVGdWxseVZpc2libGVDbGFzcyIsIm9yaWdpbmFsUHJvZ3Jlc3MiLCJ1cGRhdGVQcm9ncmVzcyIsInRyYW5zbGF0ZXNEaWZmIiwibWF4VHJhbnNsYXRlIiwiaXNCZWdpbm5pbmciLCJpc0VuZCIsInByb2dyZXNzTG9vcCIsIndhc0JlZ2lubmluZyIsIndhc0VuZCIsImlzQmVnaW5uaW5nUm91bmRlZCIsImlzRW5kUm91bmRlZCIsImZpcnN0U2xpZGVJbmRleCIsImxhc3RTbGlkZUluZGV4IiwiZmlyc3RTbGlkZVRyYW5zbGF0ZSIsImxhc3RTbGlkZVRyYW5zbGF0ZSIsInRyYW5zbGF0ZU1heCIsInRyYW5zbGF0ZUFicyIsImF1dG9IZWlnaHQiLCJ1cGRhdGVTbGlkZXNDbGFzc2VzIiwiZ2V0RmlsdGVyZWRTbGlkZSIsImFjdGl2ZVNsaWRlIiwicHJldlNsaWRlIiwibmV4dEVscyIsImVsZW1lbnROZXh0QWxsIiwicHJldkVscyIsInByZXZpb3VzRWxlbWVudFNpYmxpbmciLCJlbGVtZW50UHJldkFsbCIsInNsaWRlQWN0aXZlQ2xhc3MiLCJzbGlkZU5leHRDbGFzcyIsInNsaWRlUHJldkNsYXNzIiwiZW1pdFNsaWRlc0NsYXNzZXMiLCJ1cGRhdGVBY3RpdmVJbmRleCIsIm5ld0FjdGl2ZUluZGV4IiwicHJldmlvdXNJbmRleCIsInByZXZpb3VzUmVhbEluZGV4IiwicHJldmlvdXNTbmFwSW5kZXgiLCJnZXRWaXJ0dWFsUmVhbEluZGV4IiwiYUluZGV4Iiwibm9ybWFsaXplU2xpZGVJbmRleCIsImdldEFjdGl2ZUluZGV4QnlUcmFuc2xhdGUiLCJza2lwIiwiZmlyc3RTbGlkZUluQ29sdW1uIiwiYWN0aXZlU2xpZGVJbmRleCIsImluaXRpYWxpemVkIiwicnVuQ2FsbGJhY2tzT25Jbml0IiwidXBkYXRlQ2xpY2tlZFNsaWRlIiwicGF0aCIsInBhdGhFbCIsInNsaWRlRm91bmQiLCJjbGlja2VkU2xpZGUiLCJjbGlja2VkSW5kZXgiLCJzbGlkZVRvQ2xpY2tlZFNsaWRlIiwidmlydHVhbFRyYW5zbGF0ZSIsImN1cnJlbnRUcmFuc2xhdGUiLCJieUNvbnRyb2xsZXIiLCJuZXdQcm9ncmVzcyIsInByZXZpb3VzVHJhbnNsYXRlIiwidHJhbnNsYXRlVG8iLCJydW5DYWxsYmFja3MiLCJ0cmFuc2xhdGVCb3VuZHMiLCJpbnRlcm5hbCIsImFuaW1hdGluZyIsInByZXZlbnRJbnRlcmFjdGlvbk9uVHJhbnNpdGlvbiIsIm5ld1RyYW5zbGF0ZSIsImlzSCIsIm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCIsInRyYW5zaXRpb25FbWl0Iiwic2xpZGVUbyIsImluaXRpYWwiLCJub3JtYWxpemVkVHJhbnNsYXRlIiwibm9ybWFsaXplZEdyaWQiLCJub3JtYWxpemVkR3JpZE5leHQiLCJhbGxvd1NsaWRlTmV4dCIsImFsbG93U2xpZGVQcmV2IiwidHJhbnNpdGlvblN0YXJ0IiwidHJhbnNpdGlvbkVuZCIsIl9pbW1lZGlhdGVWaXJ0dWFsIiwiX2Nzc01vZGVWaXJ0dWFsSW5pdGlhbFNldCIsImluaXRpYWxTbGlkZSIsIm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kIiwic2xpZGVUb0xvb3AiLCJuZXdJbmRleCIsInRhcmdldFNsaWRlSW5kZXgiLCJjb2xzIiwibmVlZExvb3BGaXgiLCJsb29wRml4Iiwic2xpZGVSZWFsSW5kZXgiLCJzbGlkZU5leHQiLCJwZXJHcm91cCIsInNsaWRlc1Blckdyb3VwQXV0byIsImxvb3BQcmV2ZW50c1NsaWRpbmciLCJfY2xpZW50TGVmdCIsImNsaWVudExlZnQiLCJzbGlkZVByZXYiLCJub3JtYWxpemVkU25hcEdyaWQiLCJwcmV2U25hcCIsInByZXZTbmFwSW5kZXgiLCJzbGlkZVJlc2V0Iiwic2xpZGVUb0Nsb3Nlc3QiLCJjdXJyZW50U25hcCIsInNsaWRlVG9JbmRleCIsInNsaWRlU2VsZWN0b3IiLCJsb29wZWRTbGlkZXMiLCJnZXRTbGlkZUluZGV4IiwibG9vcENyZWF0ZSIsInNob3VsZEZpbGxHcm91cCIsInNob3VsZEZpbGxHcmlkIiwiYWRkQmxhbmtTbGlkZXMiLCJhbW91bnRPZlNsaWRlcyIsInNsaWRlQmxhbmtDbGFzcyIsImxvb3BBZGRCbGFua1NsaWRlcyIsInJlY2FsY1NsaWRlcyIsImJ5TW91c2V3aGVlbCIsImxvb3BBZGRpdGlvbmFsU2xpZGVzIiwiZmlsbCIsInByZXBlbmRTbGlkZXNJbmRleGVzIiwiYXBwZW5kU2xpZGVzSW5kZXhlcyIsImlzTmV4dCIsImlzUHJldiIsInNsaWRlc1ByZXBlbmRlZCIsInNsaWRlc0FwcGVuZGVkIiwiYWN0aXZlQ29sSW5kZXhXaXRoU2hpZnQiLCJjb2xJbmRleFRvUHJlcGVuZCIsIl9fcHJldmVudE9ic2VydmVyX18iLCJzd2lwZXJMb29wTW92ZURPTSIsImN1cnJlbnRTbGlkZVRyYW5zbGF0ZSIsImRpZmYiLCJ0b3VjaEV2ZW50c0RhdGEiLCJzdGFydFRyYW5zbGF0ZSIsImNvbnRyb2xsZXIiLCJjb250cm9sIiwibG9vcFBhcmFtcyIsImxvb3BEZXN0cm95IiwibmV3U2xpZGVzT3JkZXIiLCJzd2lwZXJTbGlkZUluZGV4IiwicHJldmVudEVkZ2VTd2lwZSIsImVkZ2VTd2lwZURldGVjdGlvbiIsImVkZ2VTd2lwZVRocmVzaG9sZCIsIm9uVG91Y2hTdGFydCIsInBvaW50ZXJJZCIsInRvdWNoSWQiLCJpZGVudGlmaWVyIiwic2ltdWxhdGVUb3VjaCIsInRvdWNoRXZlbnRzVGFyZ2V0Iiwid2hpY2giLCJpc1RvdWNoZWQiLCJzd2lwaW5nQ2xhc3NIYXNWYWx1ZSIsIm5vU3dpcGluZ0NsYXNzIiwiZXZlbnRQYXRoIiwiY29tcG9zZWRQYXRoIiwibm9Td2lwaW5nU2VsZWN0b3IiLCJpc1RhcmdldFNoYWRvdyIsIm5vU3dpcGluZyIsIl9fY2xvc2VzdEZyb20iLCJhc3NpZ25lZFNsb3QiLCJnZXRSb290Tm9kZSIsImNsb3Nlc3RFbGVtZW50IiwiYWxsb3dDbGljayIsInN3aXBlSGFuZGxlciIsImFsbG93VG91Y2hDYWxsYmFja3MiLCJzdGFydE1vdmluZyIsInRvdWNoU3RhcnRUaW1lIiwiYWxsb3dUaHJlc2hvbGRNb3ZlIiwiZm9jdXNhYmxlRWxlbWVudHMiLCJzaG91bGRQcmV2ZW50RGVmYXVsdCIsImFsbG93VG91Y2hNb3ZlIiwidG91Y2hTdGFydFByZXZlbnREZWZhdWx0IiwidG91Y2hTdGFydEZvcmNlUHJldmVudERlZmF1bHQiLCJpc0NvbnRlbnRFZGl0YWJsZSIsImZyZWVNb2RlIiwib25Ub3VjaE1vdmUiLCJ0YXJnZXRUb3VjaCIsInByZXZlbnRlZEJ5TmVzdGVkU3dpcGVyIiwidG91Y2hSZWxlYXNlT25FZGdlcyIsInByZXZpb3VzWCIsInByZXZpb3VzWSIsImRpZmZYIiwiZGlmZlkiLCJ0b3VjaEFuZ2xlIiwicHJldmVudFRvdWNoTW92ZUZyb21Qb2ludGVyTW92ZSIsInRvdWNoTW92ZVN0b3BQcm9wYWdhdGlvbiIsInRvdWNoZXNEaWZmIiwib25lV2F5TW92ZW1lbnQiLCJ0b3VjaFJhdGlvIiwicHJldlRvdWNoZXNEaXJlY3Rpb24iLCJ0b3VjaGVzRGlyZWN0aW9uIiwiaXNMb29wIiwiYWxsb3dMb29wRml4IiwiYnlTd2lwZXJUb3VjaE1vdmUiLCJhbGxvd01vbWVudHVtQm91bmNlIiwiZ3JhYkN1cnNvciIsInNldEdyYWJDdXJzb3IiLCJsb29wU3dhcFJlc2V0IiwiZGlzYWJsZVBhcmVudFN3aXBlciIsInJlc2lzdGFuY2VSYXRpbyIsInJlc2lzdGFuY2UiLCJmb2xsb3dGaW5nZXIiLCJvblRvdWNoRW5kIiwidG91Y2hFbmRUaW1lIiwidGltZURpZmYiLCJwYXRoVHJlZSIsImxhc3RDbGlja1RpbWUiLCJjdXJyZW50UG9zIiwic3dpcGVUb0xhc3QiLCJzdG9wSW5kZXgiLCJyZXdpbmRGaXJzdEluZGV4IiwicmV3aW5kTGFzdEluZGV4IiwibG9uZ1N3aXBlc01zIiwibG9uZ1N3aXBlcyIsImxvbmdTd2lwZXNSYXRpbyIsInNob3J0U3dpcGVzIiwibmF2aWdhdGlvbiIsIm5leHRFbCIsInByZXZFbCIsInNldEJyZWFrcG9pbnQiLCJpc1ZpcnR1YWxMb29wIiwiYXV0b3BsYXkiLCJydW5uaW5nIiwicmVzaXplVGltZW91dCIsInByZXZlbnRDbGlja3MiLCJwcmV2ZW50Q2xpY2tzUHJvcGFnYXRpb24iLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJvbkRvY3VtZW50VG91Y2hTdGFydCIsImRvY3VtZW50VG91Y2hIYW5kbGVyUHJvY2VlZGVkIiwiZG9tTWV0aG9kIiwic3dpcGVyTWV0aG9kIiwidXBkYXRlT25XaW5kb3dSZXNpemUiLCJpc0dyaWRFbmFibGVkIiwic3dpcGVyRWxlbWVudE5vZGVOYW1lIiwicmVzaXplT2JzZXJ2ZXIiLCJjcmVhdGVFbGVtZW50cyIsImV2ZW50c1ByZWZpeCIsImJyZWFrcG9pbnRzQmFzZSIsInVuaXF1ZU5hdkVsZW1lbnRzIiwicGFzc2l2ZUxpc3RlbmVycyIsIndyYXBwZXJDbGFzcyIsIl9lbWl0Q2xhc3NlcyIsIm1vZHVsZUV4dGVuZFBhcmFtcyIsImFsbE1vZHVsZXNQYXJhbXMiLCJtb2R1bGVQYXJhbU5hbWUiLCJtb2R1bGVQYXJhbXMiLCJwcm90b3R5cGVzIiwidHJhbnNpdGlvbiIsInRyYW5zaXRpb25EdXJhdGlvbiIsInRyYW5zaXRpb25EZWxheSIsIm1vdmluZyIsImlzTG9ja2VkIiwiY3Vyc29yIiwidW5zZXRHcmFiQ3Vyc29yIiwiYXR0YWNoRXZlbnRzIiwiZGV0YWNoRXZlbnRzIiwiZ2V0QnJlYWtwb2ludCIsImN1cnJlbnRCcmVha3BvaW50IiwiYnJlYWtwb2ludFBhcmFtcyIsIm9yaWdpbmFsUGFyYW1zIiwid2FzTXVsdGlSb3ciLCJpc011bHRpUm93Iiwid2FzR3JhYkN1cnNvciIsImlzR3JhYkN1cnNvciIsIndhc0VuYWJsZWQiLCJlbWl0Q29udGFpbmVyQ2xhc3NlcyIsIndhc01vZHVsZUVuYWJsZWQiLCJpc01vZHVsZUVuYWJsZWQiLCJkaXJlY3Rpb25DaGFuZ2VkIiwibmVlZHNSZUxvb3AiLCJ3YXNMb29wIiwiY2hhbmdlRGlyZWN0aW9uIiwiaGFzTG9vcCIsImNvbnRhaW5lckVsIiwiY3VycmVudEhlaWdodCIsInBvaW50cyIsInBvaW50IiwibWluUmF0aW8iLCJ3YXNMb2NrZWQiLCJsYXN0U2xpZGVSaWdodEVkZ2UiLCJzdWZmaXhlcyIsInByZWZpeCIsInJlc3VsdENsYXNzZXMiLCJwcmVwYXJlQ2xhc3NlcyIsImV4dGVuZGVkRGVmYXVsdHMiLCJTd2lwZXIiLCJzd2lwZXJzIiwibmV3UGFyYW1zIiwibW9kdWxlcyIsIl9fbW9kdWxlc19fIiwibW9kIiwiZXh0ZW5kUGFyYW1zIiwic3dpcGVyUGFyYW1zIiwicGFzc2VkUGFyYW1zIiwidHJ1bmMiLCJjbGlja1RpbWVvdXQiLCJ2ZWxvY2l0aWVzIiwiaW1hZ2VzVG9Mb2FkIiwiaW1hZ2VzTG9hZGVkIiwic2V0UHJvZ3Jlc3MiLCJjbHMiLCJnZXRTbGlkZUNsYXNzZXMiLCJ1cGRhdGVzIiwidmlldyIsImV4YWN0Iiwic3B2IiwiYnJlYWtMb29wIiwidHJhbnNsYXRlVmFsdWUiLCJ0cmFuc2xhdGVkIiwibmV3RGlyZWN0aW9uIiwibmVlZFVwZGF0ZSIsImN1cnJlbnREaXJlY3Rpb24iLCJjaGFuZ2VMYW5ndWFnZURpcmVjdGlvbiIsIm1vdW50IiwibW91bnRlZCIsImdldFdyYXBwZXJTZWxlY3RvciIsImdldFdyYXBwZXIiLCJzbGlkZVNsb3RzIiwiaG9zdEVsIiwibGF6eUVsZW1lbnRzIiwiZGVsZXRlSW5zdGFuY2UiLCJjbGVhblN0eWxlcyIsImRlbGV0ZVByb3BzIiwiZXh0ZW5kRGVmYXVsdHMiLCJuZXdEZWZhdWx0cyIsImluc3RhbGxNb2R1bGUiLCJ1c2UiLCJwcm90b3R5cGVHcm91cCIsInByb3RvTWV0aG9kIiwib2JzZXJ2ZXIiLCJhbmltYXRpb25GcmFtZSIsInJlc2l6ZUhhbmRsZXIiLCJvcmllbnRhdGlvbkNoYW5nZUhhbmRsZXIiLCJuZXdXaWR0aCIsImNvbnRlbnRCb3hTaXplIiwiY29udGVudFJlY3QiLCJpbmxpbmVTaXplIiwiYmxvY2tTaXplIiwidW5vYnNlcnZlIiwib2JzZXJ2ZXJzIiwiYXR0YWNoIiwiTXV0YXRpb25PYnNlcnZlciIsIldlYmtpdE11dGF0aW9uT2JzZXJ2ZXIiLCJtdXRhdGlvbnMiLCJvYnNlcnZlclVwZGF0ZSIsImNoaWxkTGlzdCIsImNoYXJhY3RlckRhdGEiLCJvYnNlcnZlUGFyZW50cyIsIm9ic2VydmVTbGlkZUNoaWxkcmVuIiwiY29udGFpbmVyUGFyZW50cyIsImRpc2Nvbm5lY3QiLCJwZngiLCJidWxsZXRTaXplIiwicGFnaW5hdGlvbiIsImJ1bGxldEVsZW1lbnQiLCJjbGlja2FibGUiLCJoaWRlT25DbGljayIsInJlbmRlckJ1bGxldCIsInJlbmRlclByb2dyZXNzYmFyIiwicmVuZGVyRnJhY3Rpb24iLCJyZW5kZXJDdXN0b20iLCJwcm9ncmVzc2Jhck9wcG9zaXRlIiwiZHluYW1pY0J1bGxldHMiLCJkeW5hbWljTWFpbkJ1bGxldHMiLCJmb3JtYXRGcmFjdGlvbkN1cnJlbnQiLCJudW1iZXIiLCJmb3JtYXRGcmFjdGlvblRvdGFsIiwiYnVsbGV0Q2xhc3MiLCJidWxsZXRBY3RpdmVDbGFzcyIsIm1vZGlmaWVyQ2xhc3MiLCJjdXJyZW50Q2xhc3MiLCJ0b3RhbENsYXNzIiwiaGlkZGVuQ2xhc3MiLCJwcm9ncmVzc2JhckZpbGxDbGFzcyIsInByb2dyZXNzYmFyT3Bwb3NpdGVDbGFzcyIsImNsaWNrYWJsZUNsYXNzIiwibG9ja0NsYXNzIiwiaG9yaXpvbnRhbENsYXNzIiwidmVydGljYWxDbGFzcyIsInBhZ2luYXRpb25EaXNhYmxlZENsYXNzIiwiYnVsbGV0cyIsImR5bmFtaWNCdWxsZXRJbmRleCIsImlzUGFnaW5hdGlvbkRpc2FibGVkIiwic2V0U2lkZUJ1bGxldHMiLCJidWxsZXRFbCIsIm9uQnVsbGV0Q2xpY2siLCJmaXJzdEluZGV4IiwibWlkSW5kZXgiLCJzdWJFbCIsImNsYXNzZXNUb1JlbW92ZSIsInN1ZmZpeCIsImZsYXQiLCJidWxsZXQiLCJidWxsZXRJbmRleCIsImZpcnN0RGlzcGxheWVkQnVsbGV0IiwibGFzdERpc3BsYXllZEJ1bGxldCIsImR5bmFtaWNCdWxsZXRzTGVuZ3RoIiwiYnVsbGV0c09mZnNldCIsIm9mZnNldFByb3AiLCJzdWJFbEluZGV4IiwiZnJhY3Rpb25FbCIsInRleHRDb250ZW50IiwidG90YWxFbCIsInByb2dyZXNzYmFyRGlyZWN0aW9uIiwicHJvZ3Jlc3NFbCIsInBhZ2luYXRpb25IVE1MIiwibnVtYmVyT2ZCdWxsZXRzIiwiY2hlY2tQcm9wcyIsImlzSGlkZGVuIiwidG9nZ2xlIiwiZnJlZW1vZGUiXSwic291cmNlUm9vdCI6IiJ9