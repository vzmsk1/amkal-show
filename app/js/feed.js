/*! For license information please see feed.js.LICENSE.txt */
(()=>{"use strict";var t={};function e(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function i(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}();var n,r,s,o,a,l,c,h,u,f,d,p,m,g,v,_,y,b={autoSleep:120,force3D:"auto",nullTargetWarn:1,units:{lineHeight:""}},w={duration:.5,overwrite:!1,delay:0},x=1e8,T=1e-8,k=2*Math.PI,S=k/4,E=0,O=Math.sqrt,A=Math.cos,M=Math.sin,C=function(t){return"string"==typeof t},D=function(t){return"function"==typeof t},P=function(t){return"number"==typeof t},R=function(t){return void 0===t},L=function(t){return"object"==typeof t},B=function(t){return!1!==t},z=function(){return"undefined"!=typeof window},I=function(t){return D(t)||C(t)},Y="function"==typeof ArrayBuffer&&ArrayBuffer.isView||function(){},F=Array.isArray,W=/(?:-?\.?\d|\.)+/gi,j=/[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g,H=/[-+=.]*\d+[.e-]*\d*[a-z%]*/g,X=/[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi,q=/[+-]=-?[.\d]+/,V=/[^,'"\[\]\s]+/gi,N=/^[+\-=e\s\d]*\d+[.\d]*([a-z]*|%)\s*$/i,U={},K={},G=function(t){return(K=kt(t,U))&&Si},$=function(t,e){return console.warn("Invalid property",t,"set to",e,"Missing plugin? gsap.registerPlugin()")},Q=function(t,e){return!e&&console.warn(t)},Z=function(t,e){return t&&(U[t]=e)&&K&&(K[t]=e)||U},J=function(){return 0},tt={suppressEvents:!0,isStart:!0,kill:!1},et={suppressEvents:!0,kill:!1},it={suppressEvents:!0},nt={},rt=[],st={},ot={},at={},lt=30,ct=[],ht="",ut=function(t){var e,i,n=t[0];if(L(n)||D(n)||(t=[t]),!(e=(n._gsap||{}).harness)){for(i=ct.length;i--&&!ct[i].targetTest(n););e=ct[i]}for(i=t.length;i--;)t[i]&&(t[i]._gsap||(t[i]._gsap=new Fe(t[i],e)))||t.splice(i,1);return t},ft=function(t){return t._gsap||ut(ie(t))[0]._gsap},dt=function(t,e,i){return(i=t[e])&&D(i)?t[e]():R(i)&&t.getAttribute&&t.getAttribute(e)||i},pt=function(t,e){return(t=t.split(",")).forEach(e)||t},mt=function(t){return Math.round(1e5*t)/1e5||0},gt=function(t){return Math.round(1e7*t)/1e7||0},vt=function(t,e){var i=e.charAt(0),n=parseFloat(e.substr(2));return t=parseFloat(t),"+"===i?t+n:"-"===i?t-n:"*"===i?t*n:t/n},_t=function(t,e){for(var i=e.length,n=0;t.indexOf(e[n])<0&&++n<i;);return n<i},yt=function(){var t,e,i=rt.length,n=rt.slice(0);for(st={},rt.length=0,t=0;t<i;t++)(e=n[t])&&e._lazy&&(e.render(e._lazy[0],e._lazy[1],!0)._lazy=0)},bt=function(t,e,i,n){rt.length&&!r&&yt(),t.render(e,i,n||r&&e<0&&(t._initted||t._startAt)),rt.length&&!r&&yt()},wt=function(t){var e=parseFloat(t);return(e||0===e)&&(t+"").match(V).length<2?e:C(t)?t.trim():t},xt=function(t){return t},Tt=function(t,e){for(var i in e)i in t||(t[i]=e[i]);return t},kt=function(t,e){for(var i in e)t[i]=e[i];return t},St=function t(e,i){for(var n in i)"__proto__"!==n&&"constructor"!==n&&"prototype"!==n&&(e[n]=L(i[n])?t(e[n]||(e[n]={}),i[n]):i[n]);return e},Et=function(t,e){var i,n={};for(i in t)i in e||(n[i]=t[i]);return n},Ot=function(t){var e,i=t.parent||o,n=t.keyframes?(e=F(t.keyframes),function(t,i){for(var n in i)n in t||"duration"===n&&e||"ease"===n||(t[n]=i[n])}):Tt;if(B(t.inherit))for(;i;)n(t,i.vars.defaults),i=i.parent||i._dp;return t},At=function(t,e,i,n,r){void 0===i&&(i="_first"),void 0===n&&(n="_last");var s,o=t[n];if(r)for(s=e[r];o&&o[r]>s;)o=o._prev;return o?(e._next=o._next,o._next=e):(e._next=t[i],t[i]=e),e._next?e._next._prev=e:t[n]=e,e._prev=o,e.parent=e._dp=t,e},Mt=function(t,e,i,n){void 0===i&&(i="_first"),void 0===n&&(n="_last");var r=e._prev,s=e._next;r?r._next=s:t[i]===e&&(t[i]=s),s?s._prev=r:t[n]===e&&(t[n]=r),e._next=e._prev=e.parent=null},Ct=function(t,e){t.parent&&(!e||t.parent.autoRemoveChildren)&&t.parent.remove&&t.parent.remove(t),t._act=0},Dt=function(t,e){if(t&&(!e||e._end>t._dur||e._start<0))for(var i=t;i;)i._dirty=1,i=i.parent;return t},Pt=function(t,e,i,n){return t._startAt&&(r?t._startAt.revert(et):t.vars.immediateRender&&!t.vars.autoRevert||t._startAt.render(e,!0,n))},Rt=function t(e){return!e||e._ts&&t(e.parent)},Lt=function(t){return t._repeat?Bt(t._tTime,t=t.duration()+t._rDelay)*t:0},Bt=function(t,e){var i=Math.floor(t/=e);return t&&i===t?i-1:i},zt=function(t,e){return(t-e._start)*e._ts+(e._ts>=0?0:e._dirty?e.totalDuration():e._tDur)},It=function(t){return t._end=gt(t._start+(t._tDur/Math.abs(t._ts||t._rts||T)||0))},Yt=function(t,e){var i=t._dp;return i&&i.smoothChildTiming&&t._ts&&(t._start=gt(i._time-(t._ts>0?e/t._ts:((t._dirty?t.totalDuration():t._tDur)-e)/-t._ts)),It(t),i._dirty||Dt(i,t)),t},Ft=function(t,e){var i;if((e._time||!e._dur&&e._initted||e._start<t._time&&(e._dur||!e.add))&&(i=zt(t.rawTime(),e),(!e._dur||Qt(0,e.totalDuration(),i)-e._tTime>T)&&e.render(i,!0)),Dt(t,e)._dp&&t._initted&&t._time>=t._dur&&t._ts){if(t._dur<t.duration())for(i=t;i._dp;)i.rawTime()>=0&&i.totalTime(i._tTime),i=i._dp;t._zTime=-1e-8}},Wt=function(t,e,i,n){return e.parent&&Ct(e),e._start=gt((P(i)?i:i||t!==o?Kt(t,i,e):t._time)+e._delay),e._end=gt(e._start+(e.totalDuration()/Math.abs(e.timeScale())||0)),At(t,e,"_first","_last",t._sort?"_start":0),qt(e)||(t._recent=e),n||Ft(t,e),t._ts<0&&Yt(t,t._tTime),t},jt=function(t,e){return(U.ScrollTrigger||$("scrollTrigger",e))&&U.ScrollTrigger.create(e,t)},Ht=function(t,e,i,n,s){return Ue(t,e,s),t._initted?!i&&t._pt&&!r&&(t._dur&&!1!==t.vars.lazy||!t._dur&&t.vars.lazy)&&u!==Ee.frame?(rt.push(t),t._lazy=[s,n],1):void 0:1},Xt=function t(e){var i=e.parent;return i&&i._ts&&i._initted&&!i._lock&&(i.rawTime()<0||t(i))},qt=function(t){var e=t.data;return"isFromStart"===e||"isStart"===e},Vt=function(t,e,i,n){var r=t._repeat,s=gt(e)||0,o=t._tTime/t._tDur;return o&&!n&&(t._time*=s/t._dur),t._dur=s,t._tDur=r?r<0?1e10:gt(s*(r+1)+t._rDelay*r):s,o>0&&!n&&Yt(t,t._tTime=t._tDur*o),t.parent&&It(t),i||Dt(t.parent,t),t},Nt=function(t){return t instanceof je?Dt(t):Vt(t,t._dur)},Ut={_start:0,endTime:J,totalDuration:J},Kt=function t(e,i,n){var r,s,o,a=e.labels,l=e._recent||Ut,c=e.duration()>=x?l.endTime(!1):e._dur;return C(i)&&(isNaN(i)||i in a)?(s=i.charAt(0),o="%"===i.substr(-1),r=i.indexOf("="),"<"===s||">"===s?(r>=0&&(i=i.replace(/=/,"")),("<"===s?l._start:l.endTime(l._repeat>=0))+(parseFloat(i.substr(1))||0)*(o?(r<0?l:n).totalDuration()/100:1)):r<0?(i in a||(a[i]=c),a[i]):(s=parseFloat(i.charAt(r-1)+i.substr(r+1)),o&&n&&(s=s/100*(F(n)?n[0]:n).totalDuration()),r>1?t(e,i.substr(0,r-1),n)+s:c+s)):null==i?c:+i},Gt=function(t,e,i){var n,r,s=P(e[1]),o=(s?2:1)+(t<2?0:1),a=e[o];if(s&&(a.duration=e[1]),a.parent=i,t){for(n=a,r=i;r&&!("immediateRender"in n);)n=r.vars.defaults||{},r=B(r.vars.inherit)&&r.parent;a.immediateRender=B(n.immediateRender),t<2?a.runBackwards=1:a.startAt=e[o-1]}return new Ze(e[0],a,e[o+1])},$t=function(t,e){return t||0===t?e(t):e},Qt=function(t,e,i){return i<t?t:i>e?e:i},Zt=function(t,e){return C(t)&&(e=N.exec(t))?e[1]:""},Jt=[].slice,te=function(t,e){return t&&L(t)&&"length"in t&&(!e&&!t.length||t.length-1 in t&&L(t[0]))&&!t.nodeType&&t!==a},ee=function(t,e,i){return void 0===i&&(i=[]),t.forEach((function(t){var n;return C(t)&&!e||te(t,1)?(n=i).push.apply(n,ie(t)):i.push(t)}))||i},ie=function(t,e,i){return s&&!e&&s.selector?s.selector(t):!C(t)||i||!l&&Oe()?F(t)?ee(t,i):te(t)?Jt.call(t,0):t?[t]:[]:Jt.call((e||c).querySelectorAll(t),0)},ne=function(t){return t=ie(t)[0]||Q("Invalid scope")||{},function(e){var i=t.current||t.nativeElement||t;return ie(e,i.querySelectorAll?i:i===t?Q("Invalid scope")||c.createElement("div"):t)}},re=function(t){return t.sort((function(){return.5-Math.random()}))},se=function(t){if(D(t))return t;var e=L(t)?t:{each:t},i=Le(e.ease),n=e.from||0,r=parseFloat(e.base)||0,s={},o=n>0&&n<1,a=isNaN(n)||o,l=e.axis,c=n,h=n;return C(n)?c=h={center:.5,edges:.5,end:1}[n]||0:!o&&a&&(c=n[0],h=n[1]),function(t,o,u){var f,d,p,m,g,v,_,y,b,w=(u||e).length,T=s[w];if(!T){if(!(b="auto"===e.grid?0:(e.grid||[1,x])[1])){for(_=-x;_<(_=u[b++].getBoundingClientRect().left)&&b<w;);b<w&&b--}for(T=s[w]=[],f=a?Math.min(b,w)*c-.5:n%b,d=b===x?0:a?w*h/b-.5:n/b|0,_=0,y=x,v=0;v<w;v++)p=v%b-f,m=d-(v/b|0),T[v]=g=l?Math.abs("y"===l?m:p):O(p*p+m*m),g>_&&(_=g),g<y&&(y=g);"random"===n&&re(T),T.max=_-y,T.min=y,T.v=w=(parseFloat(e.amount)||parseFloat(e.each)*(b>w?w-1:l?"y"===l?w/b:b:Math.max(b,w/b))||0)*("edges"===n?-1:1),T.b=w<0?r-w:r,T.u=Zt(e.amount||e.each)||0,i=i&&w<0?Pe(i):i}return w=(T[t]-T.min)/T.max||0,gt(T.b+(i?i(w):w)*T.v)+T.u}},oe=function(t){var e=Math.pow(10,((t+"").split(".")[1]||"").length);return function(i){var n=gt(Math.round(parseFloat(i)/t)*t*e);return(n-n%1)/e+(P(i)?0:Zt(i))}},ae=function(t,e){var i,n,r=F(t);return!r&&L(t)&&(i=r=t.radius||x,t.values?(t=ie(t.values),(n=!P(t[0]))&&(i*=i)):t=oe(t.increment)),$t(e,r?D(t)?function(e){return n=t(e),Math.abs(n-e)<=i?n:e}:function(e){for(var r,s,o=parseFloat(n?e.x:e),a=parseFloat(n?e.y:0),l=x,c=0,h=t.length;h--;)(r=n?(r=t[h].x-o)*r+(s=t[h].y-a)*s:Math.abs(t[h]-o))<l&&(l=r,c=h);return c=!i||l<=i?t[c]:e,n||c===e||P(e)?c:c+Zt(e)}:oe(t))},le=function(t,e,i,n){return $t(F(t)?!e:!0===i?!!(i=0):!n,(function(){return F(t)?t[~~(Math.random()*t.length)]:(i=i||1e-5)&&(n=i<1?Math.pow(10,(i+"").length-2):1)&&Math.floor(Math.round((t-i/2+Math.random()*(e-t+.99*i))/i)*i*n)/n}))},ce=function(t,e,i){return $t(i,(function(i){return t[~~e(i)]}))},he=function(t){for(var e,i,n,r,s=0,o="";~(e=t.indexOf("random(",s));)n=t.indexOf(")",e),r="["===t.charAt(e+7),i=t.substr(e+7,n-e-7).match(r?V:W),o+=t.substr(s,e-s)+le(r?i:+i[0],r?0:+i[1],+i[2]||1e-5),s=n+1;return o+t.substr(s,t.length-s)},ue=function(t,e,i,n,r){var s=e-t,o=n-i;return $t(r,(function(e){return i+((e-t)/s*o||0)}))},fe=function(t,e,i){var n,r,s,o=t.labels,a=x;for(n in o)(r=o[n]-e)<0==!!i&&r&&a>(r=Math.abs(r))&&(s=n,a=r);return s},de=function(t,e,i){var n,r,o,a=t.vars,l=a[e],c=s,h=t._ctx;if(l)return n=a[e+"Params"],r=a.callbackScope||t,i&&rt.length&&yt(),h&&(s=h),o=n?l.apply(r,n):l.call(r),s=c,o},pe=function(t){return Ct(t),t.scrollTrigger&&t.scrollTrigger.kill(!!r),t.progress()<1&&de(t,"onInterrupt"),t},me=[],ge=function(t){if(t)if(t=!t.name&&t.default||t,z()||t.headless){var e=t.name,i=D(t),n=e&&!i&&t.init?function(){this._props=[]}:t,r={init:J,render:ai,add:Ve,kill:ci,modifier:li,rawVars:0},s={targetTest:0,get:0,getSetter:ni,aliases:{},register:0};if(Oe(),t!==n){if(ot[e])return;Tt(n,Tt(Et(t,r),s)),kt(n.prototype,kt(r,Et(t,s))),ot[n.prop=e]=n,t.targetTest&&(ct.push(n),nt[e]=1),e=("css"===e?"CSS":e.charAt(0).toUpperCase()+e.substr(1))+"Plugin"}Z(e,n),t.register&&t.register(Si,n,fi)}else me.push(t)},ve=255,_e={aqua:[0,ve,ve],lime:[0,ve,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,ve],navy:[0,0,128],white:[ve,ve,ve],olive:[128,128,0],yellow:[ve,ve,0],orange:[ve,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[ve,0,0],pink:[ve,192,203],cyan:[0,ve,ve],transparent:[ve,ve,ve,0]},ye=function(t,e,i){return(6*(t+=t<0?1:t>1?-1:0)<1?e+(i-e)*t*6:t<.5?i:3*t<2?e+(i-e)*(2/3-t)*6:e)*ve+.5|0},be=function(t,e,i){var n,r,s,o,a,l,c,h,u,f,d=t?P(t)?[t>>16,t>>8&ve,t&ve]:0:_e.black;if(!d){if(","===t.substr(-1)&&(t=t.substr(0,t.length-1)),_e[t])d=_e[t];else if("#"===t.charAt(0)){if(t.length<6&&(n=t.charAt(1),r=t.charAt(2),s=t.charAt(3),t="#"+n+n+r+r+s+s+(5===t.length?t.charAt(4)+t.charAt(4):"")),9===t.length)return[(d=parseInt(t.substr(1,6),16))>>16,d>>8&ve,d&ve,parseInt(t.substr(7),16)/255];d=[(t=parseInt(t.substr(1),16))>>16,t>>8&ve,t&ve]}else if("hsl"===t.substr(0,3))if(d=f=t.match(W),e){if(~t.indexOf("="))return d=t.match(j),i&&d.length<4&&(d[3]=1),d}else o=+d[0]%360/360,a=+d[1]/100,n=2*(l=+d[2]/100)-(r=l<=.5?l*(a+1):l+a-l*a),d.length>3&&(d[3]*=1),d[0]=ye(o+1/3,n,r),d[1]=ye(o,n,r),d[2]=ye(o-1/3,n,r);else d=t.match(W)||_e.transparent;d=d.map(Number)}return e&&!f&&(n=d[0]/ve,r=d[1]/ve,s=d[2]/ve,l=((c=Math.max(n,r,s))+(h=Math.min(n,r,s)))/2,c===h?o=a=0:(u=c-h,a=l>.5?u/(2-c-h):u/(c+h),o=c===n?(r-s)/u+(r<s?6:0):c===r?(s-n)/u+2:(n-r)/u+4,o*=60),d[0]=~~(o+.5),d[1]=~~(100*a+.5),d[2]=~~(100*l+.5)),i&&d.length<4&&(d[3]=1),d},we=function(t){var e=[],i=[],n=-1;return t.split(Te).forEach((function(t){var r=t.match(H)||[];e.push.apply(e,r),i.push(n+=r.length+1)})),e.c=i,e},xe=function(t,e,i){var n,r,s,o,a="",l=(t+a).match(Te),c=e?"hsla(":"rgba(",h=0;if(!l)return t;if(l=l.map((function(t){return(t=be(t,e,1))&&c+(e?t[0]+","+t[1]+"%,"+t[2]+"%,"+t[3]:t.join(","))+")"})),i&&(s=we(t),(n=i.c).join(a)!==s.c.join(a)))for(o=(r=t.replace(Te,"1").split(H)).length-1;h<o;h++)a+=r[h]+(~n.indexOf(h)?l.shift()||c+"0,0,0,0)":(s.length?s:l.length?l:i).shift());if(!r)for(o=(r=t.split(Te)).length-1;h<o;h++)a+=r[h]+l[h];return a+r[o]},Te=function(){var t,e="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b";for(t in _e)e+="|"+t+"\\b";return new RegExp(e+")","gi")}(),ke=/hsl[a]?\(/,Se=function(t){var e,i=t.join(" ");if(Te.lastIndex=0,Te.test(i))return e=ke.test(i),t[1]=xe(t[1],e),t[0]=xe(t[0],e,we(t[1])),!0},Ee=function(){var t,e,i,n,r,s,o=Date.now,u=500,f=33,p=o(),m=p,g=1e3/240,v=g,_=[],y=function i(a){var l,c,h,d,y=o()-m,b=!0===a;if((y>u||y<0)&&(p+=y-f),((l=(h=(m+=y)-p)-v)>0||b)&&(d=++n.frame,r=h-1e3*n.time,n.time=h/=1e3,v+=l+(l>=g?4:g-l),c=1),b||(t=e(i)),c)for(s=0;s<_.length;s++)_[s](h,r,d,a)};return n={time:0,frame:0,tick:function(){y(!0)},deltaRatio:function(t){return r/(1e3/(t||60))},wake:function(){h&&(!l&&z()&&(a=l=window,c=a.document||{},U.gsap=Si,(a.gsapVersions||(a.gsapVersions=[])).push(Si.version),G(K||a.GreenSockGlobals||!a.gsap&&a||{}),me.forEach(ge)),i="undefined"!=typeof requestAnimationFrame&&requestAnimationFrame,t&&n.sleep(),e=i||function(t){return setTimeout(t,v-1e3*n.time+1|0)},d=1,y(2))},sleep:function(){(i?cancelAnimationFrame:clearTimeout)(t),d=0,e=J},lagSmoothing:function(t,e){u=t||1/0,f=Math.min(e||33,u)},fps:function(t){g=1e3/(t||240),v=1e3*n.time+g},add:function(t,e,i){var r=e?function(e,i,s,o){t(e,i,s,o),n.remove(r)}:t;return n.remove(t),_[i?"unshift":"push"](r),Oe(),r},remove:function(t,e){~(e=_.indexOf(t))&&_.splice(e,1)&&s>=e&&s--},_listeners:_}}(),Oe=function(){return!d&&Ee.wake()},Ae={},Me=/^[\d.\-M][\d.\-,\s]/,Ce=/["']/g,De=function(t){for(var e,i,n,r={},s=t.substr(1,t.length-3).split(":"),o=s[0],a=1,l=s.length;a<l;a++)i=s[a],e=a!==l-1?i.lastIndexOf(","):i.length,n=i.substr(0,e),r[o]=isNaN(n)?n.replace(Ce,"").trim():+n,o=i.substr(e+1).trim();return r},Pe=function(t){return function(e){return 1-t(1-e)}},Re=function t(e,i){for(var n,r=e._first;r;)r instanceof je?t(r,i):!r.vars.yoyoEase||r._yoyo&&r._repeat||r._yoyo===i||(r.timeline?t(r.timeline,i):(n=r._ease,r._ease=r._yEase,r._yEase=n,r._yoyo=i)),r=r._next},Le=function(t,e){return t&&(D(t)?t:Ae[t]||function(t){var e,i,n,r,s=(t+"").split("("),o=Ae[s[0]];return o&&s.length>1&&o.config?o.config.apply(null,~t.indexOf("{")?[De(s[1])]:(e=t,i=e.indexOf("(")+1,n=e.indexOf(")"),r=e.indexOf("(",i),e.substring(i,~r&&r<n?e.indexOf(")",n+1):n)).split(",").map(wt)):Ae._CE&&Me.test(t)?Ae._CE("",t):o}(t))||e},Be=function(t,e,i,n){void 0===i&&(i=function(t){return 1-e(1-t)}),void 0===n&&(n=function(t){return t<.5?e(2*t)/2:1-e(2*(1-t))/2});var r,s={easeIn:e,easeOut:i,easeInOut:n};return pt(t,(function(t){for(var e in Ae[t]=U[t]=s,Ae[r=t.toLowerCase()]=i,s)Ae[r+("easeIn"===e?".in":"easeOut"===e?".out":".inOut")]=Ae[t+"."+e]=s[e]})),s},ze=function(t){return function(e){return e<.5?(1-t(1-2*e))/2:.5+t(2*(e-.5))/2}},Ie=function t(e,i,n){var r=i>=1?i:1,s=(n||(e?.3:.45))/(i<1?i:1),o=s/k*(Math.asin(1/r)||0),a=function(t){return 1===t?1:r*Math.pow(2,-10*t)*M((t-o)*s)+1},l="out"===e?a:"in"===e?function(t){return 1-a(1-t)}:ze(a);return s=k/s,l.config=function(i,n){return t(e,i,n)},l},Ye=function t(e,i){void 0===i&&(i=1.70158);var n=function(t){return t?--t*t*((i+1)*t+i)+1:0},r="out"===e?n:"in"===e?function(t){return 1-n(1-t)}:ze(n);return r.config=function(i){return t(e,i)},r};pt("Linear,Quad,Cubic,Quart,Quint,Strong",(function(t,e){var i=e<5?e+1:e;Be(t+",Power"+(i-1),e?function(t){return Math.pow(t,i)}:function(t){return t},(function(t){return 1-Math.pow(1-t,i)}),(function(t){return t<.5?Math.pow(2*t,i)/2:1-Math.pow(2*(1-t),i)/2}))})),Ae.Linear.easeNone=Ae.none=Ae.Linear.easeIn,Be("Elastic",Ie("in"),Ie("out"),Ie()),p=7.5625,v=2*(g=1/(m=2.75)),_=2.5*g,Be("Bounce",(function(t){return 1-y(1-t)}),y=function(t){return t<g?p*t*t:t<v?p*Math.pow(t-1.5/m,2)+.75:t<_?p*(t-=2.25/m)*t+.9375:p*Math.pow(t-2.625/m,2)+.984375}),Be("Expo",(function(t){return t?Math.pow(2,10*(t-1)):0})),Be("Circ",(function(t){return-(O(1-t*t)-1)})),Be("Sine",(function(t){return 1===t?1:1-A(t*S)})),Be("Back",Ye("in"),Ye("out"),Ye()),Ae.SteppedEase=Ae.steps=U.SteppedEase={config:function(t,e){void 0===t&&(t=1);var i=1/t,n=t+(e?0:1),r=e?1:0;return function(t){return((n*Qt(0,.99999999,t)|0)+r)*i}}},w.ease=Ae["quad.out"],pt("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt",(function(t){return ht+=t+","+t+"Params,"}));var Fe=function(t,e){this.id=E++,t._gsap=this,this.target=t,this.harness=e,this.get=e?e.get:dt,this.set=e?e.getSetter:ni},We=function(){function t(t){this.vars=t,this._delay=+t.delay||0,(this._repeat=t.repeat===1/0?-2:t.repeat||0)&&(this._rDelay=t.repeatDelay||0,this._yoyo=!!t.yoyo||!!t.yoyoEase),this._ts=1,Vt(this,+t.duration,1,1),this.data=t.data,s&&(this._ctx=s,s.data.push(this)),d||Ee.wake()}var e=t.prototype;return e.delay=function(t){return t||0===t?(this.parent&&this.parent.smoothChildTiming&&this.startTime(this._start+t-this._delay),this._delay=t,this):this._delay},e.duration=function(t){return arguments.length?this.totalDuration(this._repeat>0?t+(t+this._rDelay)*this._repeat:t):this.totalDuration()&&this._dur},e.totalDuration=function(t){return arguments.length?(this._dirty=0,Vt(this,this._repeat<0?t:(t-this._repeat*this._rDelay)/(this._repeat+1))):this._tDur},e.totalTime=function(t,e){if(Oe(),!arguments.length)return this._tTime;var i=this._dp;if(i&&i.smoothChildTiming&&this._ts){for(Yt(this,t),!i._dp||i.parent||Ft(i,this);i&&i.parent;)i.parent._time!==i._start+(i._ts>=0?i._tTime/i._ts:(i.totalDuration()-i._tTime)/-i._ts)&&i.totalTime(i._tTime,!0),i=i.parent;!this.parent&&this._dp.autoRemoveChildren&&(this._ts>0&&t<this._tDur||this._ts<0&&t>0||!this._tDur&&!t)&&Wt(this._dp,this,this._start-this._delay)}return(this._tTime!==t||!this._dur&&!e||this._initted&&Math.abs(this._zTime)===T||!t&&!this._initted&&(this.add||this._ptLookup))&&(this._ts||(this._pTime=t),bt(this,t,e)),this},e.time=function(t,e){return arguments.length?this.totalTime(Math.min(this.totalDuration(),t+Lt(this))%(this._dur+this._rDelay)||(t?this._dur:0),e):this._time},e.totalProgress=function(t,e){return arguments.length?this.totalTime(this.totalDuration()*t,e):this.totalDuration()?Math.min(1,this._tTime/this._tDur):this.rawTime()>0?1:0},e.progress=function(t,e){return arguments.length?this.totalTime(this.duration()*(!this._yoyo||1&this.iteration()?t:1-t)+Lt(this),e):this.duration()?Math.min(1,this._time/this._dur):this.rawTime()>0?1:0},e.iteration=function(t,e){var i=this.duration()+this._rDelay;return arguments.length?this.totalTime(this._time+(t-1)*i,e):this._repeat?Bt(this._tTime,i)+1:1},e.timeScale=function(t,e){if(!arguments.length)return-1e-8===this._rts?0:this._rts;if(this._rts===t)return this;var i=this.parent&&this._ts?zt(this.parent._time,this):this._tTime;return this._rts=+t||0,this._ts=this._ps||-1e-8===t?0:this._rts,this.totalTime(Qt(-Math.abs(this._delay),this._tDur,i),!1!==e),It(this),function(t){for(var e=t.parent;e&&e.parent;)e._dirty=1,e.totalDuration(),e=e.parent;return t}(this)},e.paused=function(t){return arguments.length?(this._ps!==t&&(this._ps=t,t?(this._pTime=this._tTime||Math.max(-this._delay,this.rawTime()),this._ts=this._act=0):(Oe(),this._ts=this._rts,this.totalTime(this.parent&&!this.parent.smoothChildTiming?this.rawTime():this._tTime||this._pTime,1===this.progress()&&Math.abs(this._zTime)!==T&&(this._tTime-=T)))),this):this._ps},e.startTime=function(t){if(arguments.length){this._start=t;var e=this.parent||this._dp;return e&&(e._sort||!this.parent)&&Wt(e,this,t-this._delay),this}return this._start},e.endTime=function(t){return this._start+(B(t)?this.totalDuration():this.duration())/Math.abs(this._ts||1)},e.rawTime=function(t){var e=this.parent||this._dp;return e?t&&(!this._ts||this._repeat&&this._time&&this.totalProgress()<1)?this._tTime%(this._dur+this._rDelay):this._ts?zt(e.rawTime(t),this):this._tTime:this._tTime},e.revert=function(t){void 0===t&&(t=it);var e=r;return r=t,(this._initted||this._startAt)&&(this.timeline&&this.timeline.revert(t),this.totalTime(-.01,t.suppressEvents)),"nested"!==this.data&&!1!==t.kill&&this.kill(),r=e,this},e.globalTime=function(t){for(var e=this,i=arguments.length?t:e.rawTime();e;)i=e._start+i/(Math.abs(e._ts)||1),e=e._dp;return!this.parent&&this._sat?this._sat.globalTime(t):i},e.repeat=function(t){return arguments.length?(this._repeat=t===1/0?-2:t,Nt(this)):-2===this._repeat?1/0:this._repeat},e.repeatDelay=function(t){if(arguments.length){var e=this._time;return this._rDelay=t,Nt(this),e?this.time(e):this}return this._rDelay},e.yoyo=function(t){return arguments.length?(this._yoyo=t,this):this._yoyo},e.seek=function(t,e){return this.totalTime(Kt(this,t),B(e))},e.restart=function(t,e){return this.play().totalTime(t?-this._delay:0,B(e))},e.play=function(t,e){return null!=t&&this.seek(t,e),this.reversed(!1).paused(!1)},e.reverse=function(t,e){return null!=t&&this.seek(t||this.totalDuration(),e),this.reversed(!0).paused(!1)},e.pause=function(t,e){return null!=t&&this.seek(t,e),this.paused(!0)},e.resume=function(){return this.paused(!1)},e.reversed=function(t){return arguments.length?(!!t!==this.reversed()&&this.timeScale(-this._rts||(t?-1e-8:0)),this):this._rts<0},e.invalidate=function(){return this._initted=this._act=0,this._zTime=-1e-8,this},e.isActive=function(){var t,e=this.parent||this._dp,i=this._start;return!(e&&!(this._ts&&this._initted&&e.isActive()&&(t=e.rawTime(!0))>=i&&t<this.endTime(!0)-T))},e.eventCallback=function(t,e,i){var n=this.vars;return arguments.length>1?(e?(n[t]=e,i&&(n[t+"Params"]=i),"onUpdate"===t&&(this._onUpdate=e)):delete n[t],this):n[t]},e.then=function(t){var e=this;return new Promise((function(i){var n=D(t)?t:xt,r=function(){var t=e.then;e.then=null,D(n)&&(n=n(e))&&(n.then||n===e)&&(e.then=t),i(n),e.then=t};e._initted&&1===e.totalProgress()&&e._ts>=0||!e._tTime&&e._ts<0?r():e._prom=r}))},e.kill=function(){pe(this)},t}();Tt(We.prototype,{_time:0,_start:0,_end:0,_tTime:0,_tDur:0,_dirty:0,_repeat:0,_yoyo:!1,parent:null,_initted:!1,_rDelay:0,_ts:1,_dp:0,ratio:0,_zTime:-1e-8,_prom:0,_ps:!1,_rts:1});var je=function(t){function n(i,n){var r;return void 0===i&&(i={}),(r=t.call(this,i)||this).labels={},r.smoothChildTiming=!!i.smoothChildTiming,r.autoRemoveChildren=!!i.autoRemoveChildren,r._sort=B(i.sortChildren),o&&Wt(i.parent||o,e(r),n),i.reversed&&r.reverse(),i.paused&&r.paused(!0),i.scrollTrigger&&jt(e(r),i.scrollTrigger),r}i(n,t);var s=n.prototype;return s.to=function(t,e,i){return Gt(0,arguments,this),this},s.from=function(t,e,i){return Gt(1,arguments,this),this},s.fromTo=function(t,e,i,n){return Gt(2,arguments,this),this},s.set=function(t,e,i){return e.duration=0,e.parent=this,Ot(e).repeatDelay||(e.repeat=0),e.immediateRender=!!e.immediateRender,new Ze(t,e,Kt(this,i),1),this},s.call=function(t,e,i){return Wt(this,Ze.delayedCall(0,t,e),i)},s.staggerTo=function(t,e,i,n,r,s,o){return i.duration=e,i.stagger=i.stagger||n,i.onComplete=s,i.onCompleteParams=o,i.parent=this,new Ze(t,i,Kt(this,r)),this},s.staggerFrom=function(t,e,i,n,r,s,o){return i.runBackwards=1,Ot(i).immediateRender=B(i.immediateRender),this.staggerTo(t,e,i,n,r,s,o)},s.staggerFromTo=function(t,e,i,n,r,s,o,a){return n.startAt=i,Ot(n).immediateRender=B(n.immediateRender),this.staggerTo(t,e,n,r,s,o,a)},s.render=function(t,e,i){var n,s,a,l,c,h,u,f,d,p,m,g,v=this._time,_=this._dirty?this.totalDuration():this._tDur,y=this._dur,b=t<=0?0:gt(t),w=this._zTime<0!=t<0&&(this._initted||!y);if(this!==o&&b>_&&t>=0&&(b=_),b!==this._tTime||i||w){if(v!==this._time&&y&&(b+=this._time-v,t+=this._time-v),n=b,d=this._start,h=!(f=this._ts),w&&(y||(v=this._zTime),(t||!e)&&(this._zTime=t)),this._repeat){if(m=this._yoyo,c=y+this._rDelay,this._repeat<-1&&t<0)return this.totalTime(100*c+t,e,i);if(n=gt(b%c),b===_?(l=this._repeat,n=y):((l=~~(b/c))&&l===b/c&&(n=y,l--),n>y&&(n=y)),p=Bt(this._tTime,c),!v&&this._tTime&&p!==l&&this._tTime-p*c-this._dur<=0&&(p=l),m&&1&l&&(n=y-n,g=1),l!==p&&!this._lock){var x=m&&1&p,k=x===(m&&1&l);if(l<p&&(x=!x),v=x?0:b%y?y:b,this._lock=1,this.render(v||(g?0:gt(l*c)),e,!y)._lock=0,this._tTime=b,!e&&this.parent&&de(this,"onRepeat"),this.vars.repeatRefresh&&!g&&(this.invalidate()._lock=1),v&&v!==this._time||h!==!this._ts||this.vars.onRepeat&&!this.parent&&!this._act)return this;if(y=this._dur,_=this._tDur,k&&(this._lock=2,v=x?y:-1e-4,this.render(v,!0),this.vars.repeatRefresh&&!g&&this.invalidate()),this._lock=0,!this._ts&&!h)return this;Re(this,g)}}if(this._hasPause&&!this._forcing&&this._lock<2&&(u=function(t,e,i){var n;if(i>e)for(n=t._first;n&&n._start<=i;){if("isPause"===n.data&&n._start>e)return n;n=n._next}else for(n=t._last;n&&n._start>=i;){if("isPause"===n.data&&n._start<e)return n;n=n._prev}}(this,gt(v),gt(n)),u&&(b-=n-(n=u._start))),this._tTime=b,this._time=n,this._act=!f,this._initted||(this._onUpdate=this.vars.onUpdate,this._initted=1,this._zTime=t,v=0),!v&&n&&!e&&!l&&(de(this,"onStart"),this._tTime!==b))return this;if(n>=v&&t>=0)for(s=this._first;s;){if(a=s._next,(s._act||n>=s._start)&&s._ts&&u!==s){if(s.parent!==this)return this.render(t,e,i);if(s.render(s._ts>0?(n-s._start)*s._ts:(s._dirty?s.totalDuration():s._tDur)+(n-s._start)*s._ts,e,i),n!==this._time||!this._ts&&!h){u=0,a&&(b+=this._zTime=-1e-8);break}}s=a}else{s=this._last;for(var S=t<0?t:n;s;){if(a=s._prev,(s._act||S<=s._end)&&s._ts&&u!==s){if(s.parent!==this)return this.render(t,e,i);if(s.render(s._ts>0?(S-s._start)*s._ts:(s._dirty?s.totalDuration():s._tDur)+(S-s._start)*s._ts,e,i||r&&(s._initted||s._startAt)),n!==this._time||!this._ts&&!h){u=0,a&&(b+=this._zTime=S?-1e-8:T);break}}s=a}}if(u&&!e&&(this.pause(),u.render(n>=v?0:-1e-8)._zTime=n>=v?1:-1,this._ts))return this._start=d,It(this),this.render(t,e,i);this._onUpdate&&!e&&de(this,"onUpdate",!0),(b===_&&this._tTime>=this.totalDuration()||!b&&v)&&(d!==this._start&&Math.abs(f)===Math.abs(this._ts)||this._lock||((t||!y)&&(b===_&&this._ts>0||!b&&this._ts<0)&&Ct(this,1),e||t<0&&!v||!b&&!v&&_||(de(this,b===_&&t>=0?"onComplete":"onReverseComplete",!0),this._prom&&!(b<_&&this.timeScale()>0)&&this._prom())))}return this},s.add=function(t,e){var i=this;if(P(e)||(e=Kt(this,e,t)),!(t instanceof We)){if(F(t))return t.forEach((function(t){return i.add(t,e)})),this;if(C(t))return this.addLabel(t,e);if(!D(t))return this;t=Ze.delayedCall(0,t)}return this!==t?Wt(this,t,e):this},s.getChildren=function(t,e,i,n){void 0===t&&(t=!0),void 0===e&&(e=!0),void 0===i&&(i=!0),void 0===n&&(n=-x);for(var r=[],s=this._first;s;)s._start>=n&&(s instanceof Ze?e&&r.push(s):(i&&r.push(s),t&&r.push.apply(r,s.getChildren(!0,e,i)))),s=s._next;return r},s.getById=function(t){for(var e=this.getChildren(1,1,1),i=e.length;i--;)if(e[i].vars.id===t)return e[i]},s.remove=function(t){return C(t)?this.removeLabel(t):D(t)?this.killTweensOf(t):(Mt(this,t),t===this._recent&&(this._recent=this._last),Dt(this))},s.totalTime=function(e,i){return arguments.length?(this._forcing=1,!this._dp&&this._ts&&(this._start=gt(Ee.time-(this._ts>0?e/this._ts:(this.totalDuration()-e)/-this._ts))),t.prototype.totalTime.call(this,e,i),this._forcing=0,this):this._tTime},s.addLabel=function(t,e){return this.labels[t]=Kt(this,e),this},s.removeLabel=function(t){return delete this.labels[t],this},s.addPause=function(t,e,i){var n=Ze.delayedCall(0,e||J,i);return n.data="isPause",this._hasPause=1,Wt(this,n,Kt(this,t))},s.removePause=function(t){var e=this._first;for(t=Kt(this,t);e;)e._start===t&&"isPause"===e.data&&Ct(e),e=e._next},s.killTweensOf=function(t,e,i){for(var n=this.getTweensOf(t,i),r=n.length;r--;)He!==n[r]&&n[r].kill(t,e);return this},s.getTweensOf=function(t,e){for(var i,n=[],r=ie(t),s=this._first,o=P(e);s;)s instanceof Ze?_t(s._targets,r)&&(o?(!He||s._initted&&s._ts)&&s.globalTime(0)<=e&&s.globalTime(s.totalDuration())>e:!e||s.isActive())&&n.push(s):(i=s.getTweensOf(r,e)).length&&n.push.apply(n,i),s=s._next;return n},s.tweenTo=function(t,e){e=e||{};var i,n=this,r=Kt(n,t),s=e,o=s.startAt,a=s.onStart,l=s.onStartParams,c=s.immediateRender,h=Ze.to(n,Tt({ease:e.ease||"none",lazy:!1,immediateRender:!1,time:r,overwrite:"auto",duration:e.duration||Math.abs((r-(o&&"time"in o?o.time:n._time))/n.timeScale())||T,onStart:function(){if(n.pause(),!i){var t=e.duration||Math.abs((r-(o&&"time"in o?o.time:n._time))/n.timeScale());h._dur!==t&&Vt(h,t,0,1).render(h._time,!0,!0),i=1}a&&a.apply(h,l||[])}},e));return c?h.render(0):h},s.tweenFromTo=function(t,e,i){return this.tweenTo(e,Tt({startAt:{time:Kt(this,t)}},i))},s.recent=function(){return this._recent},s.nextLabel=function(t){return void 0===t&&(t=this._time),fe(this,Kt(this,t))},s.previousLabel=function(t){return void 0===t&&(t=this._time),fe(this,Kt(this,t),1)},s.currentLabel=function(t){return arguments.length?this.seek(t,!0):this.previousLabel(this._time+T)},s.shiftChildren=function(t,e,i){void 0===i&&(i=0);for(var n,r=this._first,s=this.labels;r;)r._start>=i&&(r._start+=t,r._end+=t),r=r._next;if(e)for(n in s)s[n]>=i&&(s[n]+=t);return Dt(this)},s.invalidate=function(e){var i=this._first;for(this._lock=0;i;)i.invalidate(e),i=i._next;return t.prototype.invalidate.call(this,e)},s.clear=function(t){void 0===t&&(t=!0);for(var e,i=this._first;i;)e=i._next,this.remove(i),i=e;return this._dp&&(this._time=this._tTime=this._pTime=0),t&&(this.labels={}),Dt(this)},s.totalDuration=function(t){var e,i,n,r=0,s=this,a=s._last,l=x;if(arguments.length)return s.timeScale((s._repeat<0?s.duration():s.totalDuration())/(s.reversed()?-t:t));if(s._dirty){for(n=s.parent;a;)e=a._prev,a._dirty&&a.totalDuration(),(i=a._start)>l&&s._sort&&a._ts&&!s._lock?(s._lock=1,Wt(s,a,i-a._delay,1)._lock=0):l=i,i<0&&a._ts&&(r-=i,(!n&&!s._dp||n&&n.smoothChildTiming)&&(s._start+=i/s._ts,s._time-=i,s._tTime-=i),s.shiftChildren(-i,!1,-Infinity),l=0),a._end>r&&a._ts&&(r=a._end),a=e;Vt(s,s===o&&s._time>r?s._time:r,1,1),s._dirty=0}return s._tDur},n.updateRoot=function(t){if(o._ts&&(bt(o,zt(t,o)),u=Ee.frame),Ee.frame>=lt){lt+=b.autoSleep||120;var e=o._first;if((!e||!e._ts)&&b.autoSleep&&Ee._listeners.length<2){for(;e&&!e._ts;)e=e._next;e||Ee.sleep()}}},n}(We);Tt(je.prototype,{_lock:0,_hasPause:0,_forcing:0});var He,Xe,qe=function(t,e,i,n,r,s,o){var a,l,c,h,u,f,d,p,m=new fi(this._pt,t,e,0,1,oi,null,r),g=0,v=0;for(m.b=i,m.e=n,i+="",(d=~(n+="").indexOf("random("))&&(n=he(n)),s&&(s(p=[i,n],t,e),i=p[0],n=p[1]),l=i.match(X)||[];a=X.exec(n);)h=a[0],u=n.substring(g,a.index),c?c=(c+1)%5:"rgba("===u.substr(-5)&&(c=1),h!==l[v++]&&(f=parseFloat(l[v-1])||0,m._pt={_next:m._pt,p:u||1===v?u:",",s:f,c:"="===h.charAt(1)?vt(f,h)-f:parseFloat(h)-f,m:c&&c<4?Math.round:0},g=X.lastIndex);return m.c=g<n.length?n.substring(g,n.length):"",m.fp=o,(q.test(n)||d)&&(m.e=0),this._pt=m,m},Ve=function(t,e,i,n,r,s,o,a,l,c){D(n)&&(n=n(r||0,t,s));var h,u=t[e],f="get"!==i?i:D(u)?l?t[e.indexOf("set")||!D(t["get"+e.substr(3)])?e:"get"+e.substr(3)](l):t[e]():u,d=D(u)?l?ei:ti:Je;if(C(n)&&(~n.indexOf("random(")&&(n=he(n)),"="===n.charAt(1)&&((h=vt(f,n)+(Zt(f)||0))||0===h)&&(n=h)),!c||f!==n||Xe)return isNaN(f*n)||""===n?(!u&&!(e in t)&&$(e,n),qe.call(this,t,e,f,n,d,a||b.stringFilter,l)):(h=new fi(this._pt,t,e,+f||0,n-(f||0),"boolean"==typeof u?si:ri,0,d),l&&(h.fp=l),o&&h.modifier(o,this,t),this._pt=h)},Ne=function(t,e,i,n,r,s){var o,a,l,c;if(ot[t]&&!1!==(o=new ot[t]).init(r,o.rawVars?e[t]:function(t,e,i,n,r){if(D(t)&&(t=Ge(t,r,e,i,n)),!L(t)||t.style&&t.nodeType||F(t)||Y(t))return C(t)?Ge(t,r,e,i,n):t;var s,o={};for(s in t)o[s]=Ge(t[s],r,e,i,n);return o}(e[t],n,r,s,i),i,n,s)&&(i._pt=a=new fi(i._pt,r,t,0,1,o.render,o,0,o.priority),i!==f))for(l=i._ptLookup[i._targets.indexOf(r)],c=o._props.length;c--;)l[o._props[c]]=a;return o},Ue=function t(e,i,s){var a,l,c,h,u,f,d,p,m,g,v,_,y,b=e.vars,k=b.ease,S=b.startAt,E=b.immediateRender,O=b.lazy,A=b.onUpdate,M=b.runBackwards,C=b.yoyoEase,D=b.keyframes,P=b.autoRevert,R=e._dur,L=e._startAt,z=e._targets,I=e.parent,Y=I&&"nested"===I.data?I.vars.targets:z,F="auto"===e._overwrite&&!n,W=e.timeline;if(W&&(!D||!k)&&(k="none"),e._ease=Le(k,w.ease),e._yEase=C?Pe(Le(!0===C?k:C,w.ease)):0,C&&e._yoyo&&!e._repeat&&(C=e._yEase,e._yEase=e._ease,e._ease=C),e._from=!W&&!!b.runBackwards,!W||D&&!b.stagger){if(_=(p=z[0]?ft(z[0]).harness:0)&&b[p.prop],a=Et(b,nt),L&&(L._zTime<0&&L.progress(1),i<0&&M&&E&&!P?L.render(-1,!0):L.revert(M&&R?et:tt),L._lazy=0),S){if(Ct(e._startAt=Ze.set(z,Tt({data:"isStart",overwrite:!1,parent:I,immediateRender:!0,lazy:!L&&B(O),startAt:null,delay:0,onUpdate:A&&function(){return de(e,"onUpdate")},stagger:0},S))),e._startAt._dp=0,e._startAt._sat=e,i<0&&(r||!E&&!P)&&e._startAt.revert(et),E&&R&&i<=0&&s<=0)return void(i&&(e._zTime=i))}else if(M&&R&&!L)if(i&&(E=!1),c=Tt({overwrite:!1,data:"isFromStart",lazy:E&&!L&&B(O),immediateRender:E,stagger:0,parent:I},a),_&&(c[p.prop]=_),Ct(e._startAt=Ze.set(z,c)),e._startAt._dp=0,e._startAt._sat=e,i<0&&(r?e._startAt.revert(et):e._startAt.render(-1,!0)),e._zTime=i,E){if(!i)return}else t(e._startAt,T,T);for(e._pt=e._ptCache=0,O=R&&B(O)||O&&!R,l=0;l<z.length;l++){if(d=(u=z[l])._gsap||ut(z)[l]._gsap,e._ptLookup[l]=g={},st[d.id]&&rt.length&&yt(),v=Y===z?l:Y.indexOf(u),p&&!1!==(m=new p).init(u,_||a,e,v,Y)&&(e._pt=h=new fi(e._pt,u,m.name,0,1,m.render,m,0,m.priority),m._props.forEach((function(t){g[t]=h})),m.priority&&(f=1)),!p||_)for(c in a)ot[c]&&(m=Ne(c,a,e,v,u,Y))?m.priority&&(f=1):g[c]=h=Ve.call(e,u,c,"get",a[c],v,Y,0,b.stringFilter);e._op&&e._op[l]&&e.kill(u,e._op[l]),F&&e._pt&&(He=e,o.killTweensOf(u,g,e.globalTime(i)),y=!e.parent,He=0),e._pt&&O&&(st[d.id]=1)}f&&ui(e),e._onInit&&e._onInit(e)}e._onUpdate=A,e._initted=(!e._op||e._pt)&&!y,D&&i<=0&&W.render(x,!0,!0)},Ke=function(t,e,i,n){var r,s,o=e.ease||n||"power1.inOut";if(F(e))s=i[t]||(i[t]=[]),e.forEach((function(t,i){return s.push({t:i/(e.length-1)*100,v:t,e:o})}));else for(r in e)s=i[r]||(i[r]=[]),"ease"===r||s.push({t:parseFloat(t),v:e[r],e:o})},Ge=function(t,e,i,n,r){return D(t)?t.call(e,i,n,r):C(t)&&~t.indexOf("random(")?he(t):t},$e=ht+"repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase,autoRevert",Qe={};pt($e+",id,stagger,delay,duration,paused,scrollTrigger",(function(t){return Qe[t]=1}));var Ze=function(t){function s(i,r,s,a){var l;"number"==typeof r&&(s.duration=r,r=s,s=null);var c,h,u,f,d,p,m,g,v=(l=t.call(this,a?r:Ot(r))||this).vars,_=v.duration,y=v.delay,w=v.immediateRender,x=v.stagger,T=v.overwrite,k=v.keyframes,S=v.defaults,E=v.scrollTrigger,O=v.yoyoEase,A=r.parent||o,M=(F(i)||Y(i)?P(i[0]):"length"in r)?[i]:ie(i);if(l._targets=M.length?ut(M):Q("GSAP target "+i+" not found. https://gsap.com",!b.nullTargetWarn)||[],l._ptLookup=[],l._overwrite=T,k||x||I(_)||I(y)){if(r=l.vars,(c=l.timeline=new je({data:"nested",defaults:S||{},targets:A&&"nested"===A.data?A.vars.targets:M})).kill(),c.parent=c._dp=e(l),c._start=0,x||I(_)||I(y)){if(f=M.length,m=x&&se(x),L(x))for(d in x)~$e.indexOf(d)&&(g||(g={}),g[d]=x[d]);for(h=0;h<f;h++)(u=Et(r,Qe)).stagger=0,O&&(u.yoyoEase=O),g&&kt(u,g),p=M[h],u.duration=+Ge(_,e(l),h,p,M),u.delay=(+Ge(y,e(l),h,p,M)||0)-l._delay,!x&&1===f&&u.delay&&(l._delay=y=u.delay,l._start+=y,u.delay=0),c.to(p,u,m?m(h,p,M):0),c._ease=Ae.none;c.duration()?_=y=0:l.timeline=0}else if(k){Ot(Tt(c.vars.defaults,{ease:"none"})),c._ease=Le(k.ease||r.ease||"none");var C,D,R,z=0;if(F(k))k.forEach((function(t){return c.to(M,t,">")})),c.duration();else{for(d in u={},k)"ease"===d||"easeEach"===d||Ke(d,k[d],u,k.easeEach);for(d in u)for(C=u[d].sort((function(t,e){return t.t-e.t})),z=0,h=0;h<C.length;h++)(R={ease:(D=C[h]).e,duration:(D.t-(h?C[h-1].t:0))/100*_})[d]=D.v,c.to(M,R,z),z+=R.duration;c.duration()<_&&c.to({},{duration:_-c.duration()})}}_||l.duration(_=c.duration())}else l.timeline=0;return!0!==T||n||(He=e(l),o.killTweensOf(M),He=0),Wt(A,e(l),s),r.reversed&&l.reverse(),r.paused&&l.paused(!0),(w||!_&&!k&&l._start===gt(A._time)&&B(w)&&Rt(e(l))&&"nested"!==A.data)&&(l._tTime=-1e-8,l.render(Math.max(0,-y)||0)),E&&jt(e(l),E),l}i(s,t);var a=s.prototype;return a.render=function(t,e,i){var n,s,o,a,l,c,h,u,f,d=this._time,p=this._tDur,m=this._dur,g=t<0,v=t>p-T&&!g?p:t<T?0:t;if(m){if(v!==this._tTime||!t||i||!this._initted&&this._tTime||this._startAt&&this._zTime<0!==g){if(n=v,u=this.timeline,this._repeat){if(a=m+this._rDelay,this._repeat<-1&&g)return this.totalTime(100*a+t,e,i);if(n=gt(v%a),v===p?(o=this._repeat,n=m):((o=~~(v/a))&&o===gt(v/a)&&(n=m,o--),n>m&&(n=m)),(c=this._yoyo&&1&o)&&(f=this._yEase,n=m-n),l=Bt(this._tTime,a),n===d&&!i&&this._initted&&o===l)return this._tTime=v,this;o!==l&&(u&&this._yEase&&Re(u,c),this.vars.repeatRefresh&&!c&&!this._lock&&this._time!==a&&this._initted&&(this._lock=i=1,this.render(gt(a*o),!0).invalidate()._lock=0))}if(!this._initted){if(Ht(this,g?t:n,i,e,v))return this._tTime=0,this;if(!(d===this._time||i&&this.vars.repeatRefresh&&o!==l))return this;if(m!==this._dur)return this.render(t,e,i)}if(this._tTime=v,this._time=n,!this._act&&this._ts&&(this._act=1,this._lazy=0),this.ratio=h=(f||this._ease)(n/m),this._from&&(this.ratio=h=1-h),n&&!d&&!e&&!o&&(de(this,"onStart"),this._tTime!==v))return this;for(s=this._pt;s;)s.r(h,s.d),s=s._next;u&&u.render(t<0?t:u._dur*u._ease(n/this._dur),e,i)||this._startAt&&(this._zTime=t),this._onUpdate&&!e&&(g&&Pt(this,t,0,i),de(this,"onUpdate")),this._repeat&&o!==l&&this.vars.onRepeat&&!e&&this.parent&&de(this,"onRepeat"),v!==this._tDur&&v||this._tTime!==v||(g&&!this._onUpdate&&Pt(this,t,0,!0),(t||!m)&&(v===this._tDur&&this._ts>0||!v&&this._ts<0)&&Ct(this,1),e||g&&!d||!(v||d||c)||(de(this,v===p?"onComplete":"onReverseComplete",!0),this._prom&&!(v<p&&this.timeScale()>0)&&this._prom()))}}else!function(t,e,i,n){var s,o,a,l=t.ratio,c=e<0||!e&&(!t._start&&Xt(t)&&(t._initted||!qt(t))||(t._ts<0||t._dp._ts<0)&&!qt(t))?0:1,h=t._rDelay,u=0;if(h&&t._repeat&&(u=Qt(0,t._tDur,e),o=Bt(u,h),t._yoyo&&1&o&&(c=1-c),o!==Bt(t._tTime,h)&&(l=1-c,t.vars.repeatRefresh&&t._initted&&t.invalidate())),c!==l||r||n||t._zTime===T||!e&&t._zTime){if(!t._initted&&Ht(t,e,n,i,u))return;for(a=t._zTime,t._zTime=e||(i?T:0),i||(i=e&&!a),t.ratio=c,t._from&&(c=1-c),t._time=0,t._tTime=u,s=t._pt;s;)s.r(c,s.d),s=s._next;e<0&&Pt(t,e,0,!0),t._onUpdate&&!i&&de(t,"onUpdate"),u&&t._repeat&&!i&&t.parent&&de(t,"onRepeat"),(e>=t._tDur||e<0)&&t.ratio===c&&(c&&Ct(t,1),i||r||(de(t,c?"onComplete":"onReverseComplete",!0),t._prom&&t._prom()))}else t._zTime||(t._zTime=e)}(this,t,e,i);return this},a.targets=function(){return this._targets},a.invalidate=function(e){return(!e||!this.vars.runBackwards)&&(this._startAt=0),this._pt=this._op=this._onUpdate=this._lazy=this.ratio=0,this._ptLookup=[],this.timeline&&this.timeline.invalidate(e),t.prototype.invalidate.call(this,e)},a.resetTo=function(t,e,i,n,r){d||Ee.wake(),this._ts||this.play();var s=Math.min(this._dur,(this._dp._time-this._start)*this._ts);return this._initted||Ue(this,s),function(t,e,i,n,r,s,o,a){var l,c,h,u,f=(t._pt&&t._ptCache||(t._ptCache={}))[e];if(!f)for(f=t._ptCache[e]=[],h=t._ptLookup,u=t._targets.length;u--;){if((l=h[u][e])&&l.d&&l.d._pt)for(l=l.d._pt;l&&l.p!==e&&l.fp!==e;)l=l._next;if(!l)return Xe=1,t.vars[e]="+=0",Ue(t,o),Xe=0,a?Q(e+" not eligible for reset"):1;f.push(l)}for(u=f.length;u--;)(l=(c=f[u])._pt||c).s=!n&&0!==n||r?l.s+(n||0)+s*l.c:n,l.c=i-l.s,c.e&&(c.e=mt(i)+Zt(c.e)),c.b&&(c.b=l.s+Zt(c.b))}(this,t,e,i,n,this._ease(s/this._dur),s,r)?this.resetTo(t,e,i,n,1):(Yt(this,0),this.parent||At(this._dp,this,"_first","_last",this._dp._sort?"_start":0),this.render(0))},a.kill=function(t,e){if(void 0===e&&(e="all"),!(t||e&&"all"!==e))return this._lazy=this._pt=0,this.parent?pe(this):this;if(this.timeline){var i=this.timeline.totalDuration();return this.timeline.killTweensOf(t,e,He&&!0!==He.vars.overwrite)._first||pe(this),this.parent&&i!==this.timeline.totalDuration()&&Vt(this,this._dur*this.timeline._tDur/i,0,1),this}var n,r,s,o,a,l,c,h=this._targets,u=t?ie(t):h,f=this._ptLookup,d=this._pt;if((!e||"all"===e)&&function(t,e){for(var i=t.length,n=i===e.length;n&&i--&&t[i]===e[i];);return i<0}(h,u))return"all"===e&&(this._pt=0),pe(this);for(n=this._op=this._op||[],"all"!==e&&(C(e)&&(a={},pt(e,(function(t){return a[t]=1})),e=a),e=function(t,e){var i,n,r,s,o=t[0]?ft(t[0]).harness:0,a=o&&o.aliases;if(!a)return e;for(n in i=kt({},e),a)if(n in i)for(r=(s=a[n].split(",")).length;r--;)i[s[r]]=i[n];return i}(h,e)),c=h.length;c--;)if(~u.indexOf(h[c]))for(a in r=f[c],"all"===e?(n[c]=e,o=r,s={}):(s=n[c]=n[c]||{},o=e),o)(l=r&&r[a])&&("kill"in l.d&&!0!==l.d.kill(a)||Mt(this,l,"_pt"),delete r[a]),"all"!==s&&(s[a]=1);return this._initted&&!this._pt&&d&&pe(this),this},s.to=function(t,e){return new s(t,e,arguments[2])},s.from=function(t,e){return Gt(1,arguments)},s.delayedCall=function(t,e,i,n){return new s(e,0,{immediateRender:!1,lazy:!1,overwrite:!1,delay:t,onComplete:e,onReverseComplete:e,onCompleteParams:i,onReverseCompleteParams:i,callbackScope:n})},s.fromTo=function(t,e,i){return Gt(2,arguments)},s.set=function(t,e){return e.duration=0,e.repeatDelay||(e.repeat=0),new s(t,e)},s.killTweensOf=function(t,e,i){return o.killTweensOf(t,e,i)},s}(We);Tt(Ze.prototype,{_targets:[],_lazy:0,_startAt:0,_op:0,_onInit:0}),pt("staggerTo,staggerFrom,staggerFromTo",(function(t){Ze[t]=function(){var e=new je,i=Jt.call(arguments,0);return i.splice("staggerFromTo"===t?5:4,0,0),e[t].apply(e,i)}}));var Je=function(t,e,i){return t[e]=i},ti=function(t,e,i){return t[e](i)},ei=function(t,e,i,n){return t[e](n.fp,i)},ii=function(t,e,i){return t.setAttribute(e,i)},ni=function(t,e){return D(t[e])?ti:R(t[e])&&t.setAttribute?ii:Je},ri=function(t,e){return e.set(e.t,e.p,Math.round(1e6*(e.s+e.c*t))/1e6,e)},si=function(t,e){return e.set(e.t,e.p,!!(e.s+e.c*t),e)},oi=function(t,e){var i=e._pt,n="";if(!t&&e.b)n=e.b;else if(1===t&&e.e)n=e.e;else{for(;i;)n=i.p+(i.m?i.m(i.s+i.c*t):Math.round(1e4*(i.s+i.c*t))/1e4)+n,i=i._next;n+=e.c}e.set(e.t,e.p,n,e)},ai=function(t,e){for(var i=e._pt;i;)i.r(t,i.d),i=i._next},li=function(t,e,i,n){for(var r,s=this._pt;s;)r=s._next,s.p===n&&s.modifier(t,e,i),s=r},ci=function(t){for(var e,i,n=this._pt;n;)i=n._next,n.p===t&&!n.op||n.op===t?Mt(this,n,"_pt"):n.dep||(e=1),n=i;return!e},hi=function(t,e,i,n){n.mSet(t,e,n.m.call(n.tween,i,n.mt),n)},ui=function(t){for(var e,i,n,r,s=t._pt;s;){for(e=s._next,i=n;i&&i.pr>s.pr;)i=i._next;(s._prev=i?i._prev:r)?s._prev._next=s:n=s,(s._next=i)?i._prev=s:r=s,s=e}t._pt=n},fi=function(){function t(t,e,i,n,r,s,o,a,l){this.t=e,this.s=n,this.c=r,this.p=i,this.r=s||ri,this.d=o||this,this.set=a||Je,this.pr=l||0,this._next=t,t&&(t._prev=this)}return t.prototype.modifier=function(t,e,i){this.mSet=this.mSet||this.set,this.set=hi,this.m=t,this.mt=i,this.tween=e},t}();pt(ht+"parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger",(function(t){return nt[t]=1})),U.TweenMax=U.TweenLite=Ze,U.TimelineLite=U.TimelineMax=je,o=new je({sortChildren:!1,defaults:w,autoRemoveChildren:!0,id:"root",smoothChildTiming:!0}),b.stringFilter=Se;var di=[],pi={},mi=[],gi=0,vi=0,_i=function(t){return(pi[t]||mi).map((function(t){return t()}))},yi=function(){var t=Date.now(),e=[];t-gi>2&&(_i("matchMediaInit"),di.forEach((function(t){var i,n,r,s,o=t.queries,l=t.conditions;for(n in o)(i=a.matchMedia(o[n]).matches)&&(r=1),i!==l[n]&&(l[n]=i,s=1);s&&(t.revert(),r&&e.push(t))})),_i("matchMediaRevert"),e.forEach((function(t){return t.onMatch(t,(function(e){return t.add(null,e)}))})),gi=t,_i("matchMedia"))},bi=function(){function t(t,e){this.selector=e&&ne(e),this.data=[],this._r=[],this.isReverted=!1,this.id=vi++,t&&this.add(t)}var e=t.prototype;return e.add=function(t,e,i){D(t)&&(i=e,e=t,t=D);var n=this,r=function(){var t,r=s,o=n.selector;return r&&r!==n&&r.data.push(n),i&&(n.selector=ne(i)),s=n,t=e.apply(n,arguments),D(t)&&n._r.push(t),s=r,n.selector=o,n.isReverted=!1,t};return n.last=r,t===D?r(n,(function(t){return n.add(null,t)})):t?n[t]=r:r},e.ignore=function(t){var e=s;s=null,t(this),s=e},e.getTweens=function(){var e=[];return this.data.forEach((function(i){return i instanceof t?e.push.apply(e,i.getTweens()):i instanceof Ze&&!(i.parent&&"nested"===i.parent.data)&&e.push(i)})),e},e.clear=function(){this._r.length=this.data.length=0},e.kill=function(t,e){var i=this;if(t?function(){for(var e,n=i.getTweens(),r=i.data.length;r--;)"isFlip"===(e=i.data[r]).data&&(e.revert(),e.getChildren(!0,!0,!1).forEach((function(t){return n.splice(n.indexOf(t),1)})));for(n.map((function(t){return{g:t._dur||t._delay||t._sat&&!t._sat.vars.immediateRender?t.globalTime(0):-1/0,t}})).sort((function(t,e){return e.g-t.g||-1/0})).forEach((function(e){return e.t.revert(t)})),r=i.data.length;r--;)(e=i.data[r])instanceof je?"nested"!==e.data&&(e.scrollTrigger&&e.scrollTrigger.revert(),e.kill()):!(e instanceof Ze)&&e.revert&&e.revert(t);i._r.forEach((function(e){return e(t,i)})),i.isReverted=!0}():this.data.forEach((function(t){return t.kill&&t.kill()})),this.clear(),e)for(var n=di.length;n--;)di[n].id===this.id&&di.splice(n,1)},e.revert=function(t){this.kill(t||{})},t}(),wi=function(){function t(t){this.contexts=[],this.scope=t,s&&s.data.push(this)}var e=t.prototype;return e.add=function(t,e,i){L(t)||(t={matches:t});var n,r,o,l=new bi(0,i||this.scope),c=l.conditions={};for(r in s&&!l.selector&&(l.selector=s.selector),this.contexts.push(l),e=l.add("onMatch",e),l.queries=t,t)"all"===r?o=1:(n=a.matchMedia(t[r]))&&(di.indexOf(l)<0&&di.push(l),(c[r]=n.matches)&&(o=1),n.addListener?n.addListener(yi):n.addEventListener("change",yi));return o&&e(l,(function(t){return l.add(null,t)})),this},e.revert=function(t){this.kill(t||{})},e.kill=function(t){this.contexts.forEach((function(e){return e.kill(t,!0)}))},t}(),xi={registerPlugin:function(){for(var t=arguments.length,e=new Array(t),i=0;i<t;i++)e[i]=arguments[i];e.forEach((function(t){return ge(t)}))},timeline:function(t){return new je(t)},getTweensOf:function(t,e){return o.getTweensOf(t,e)},getProperty:function(t,e,i,n){C(t)&&(t=ie(t)[0]);var r=ft(t||{}).get,s=i?xt:wt;return"native"===i&&(i=""),t?e?s((ot[e]&&ot[e].get||r)(t,e,i,n)):function(e,i,n){return s((ot[e]&&ot[e].get||r)(t,e,i,n))}:t},quickSetter:function(t,e,i){if((t=ie(t)).length>1){var n=t.map((function(t){return Si.quickSetter(t,e,i)})),r=n.length;return function(t){for(var e=r;e--;)n[e](t)}}t=t[0]||{};var s=ot[e],o=ft(t),a=o.harness&&(o.harness.aliases||{})[e]||e,l=s?function(e){var n=new s;f._pt=0,n.init(t,i?e+i:e,f,0,[t]),n.render(1,n),f._pt&&ai(1,f)}:o.set(t,a);return s?l:function(e){return l(t,a,i?e+i:e,o,1)}},quickTo:function(t,e,i){var n,r=Si.to(t,kt(((n={})[e]="+=0.1",n.paused=!0,n),i||{})),s=function(t,i,n){return r.resetTo(e,t,i,n)};return s.tween=r,s},isTweening:function(t){return o.getTweensOf(t,!0).length>0},defaults:function(t){return t&&t.ease&&(t.ease=Le(t.ease,w.ease)),St(w,t||{})},config:function(t){return St(b,t||{})},registerEffect:function(t){var e=t.name,i=t.effect,n=t.plugins,r=t.defaults,s=t.extendTimeline;(n||"").split(",").forEach((function(t){return t&&!ot[t]&&!U[t]&&Q(e+" effect requires "+t+" plugin.")})),at[e]=function(t,e,n){return i(ie(t),Tt(e||{},r),n)},s&&(je.prototype[e]=function(t,i,n){return this.add(at[e](t,L(i)?i:(n=i)&&{},this),n)})},registerEase:function(t,e){Ae[t]=Le(e)},parseEase:function(t,e){return arguments.length?Le(t,e):Ae},getById:function(t){return o.getById(t)},exportRoot:function(t,e){void 0===t&&(t={});var i,n,r=new je(t);for(r.smoothChildTiming=B(t.smoothChildTiming),o.remove(r),r._dp=0,r._time=r._tTime=o._time,i=o._first;i;)n=i._next,!e&&!i._dur&&i instanceof Ze&&i.vars.onComplete===i._targets[0]||Wt(r,i,i._start-i._delay),i=n;return Wt(o,r,0),r},context:function(t,e){return t?new bi(t,e):s},matchMedia:function(t){return new wi(t)},matchMediaRefresh:function(){return di.forEach((function(t){var e,i,n=t.conditions;for(i in n)n[i]&&(n[i]=!1,e=1);e&&t.revert()}))||yi()},addEventListener:function(t,e){var i=pi[t]||(pi[t]=[]);~i.indexOf(e)||i.push(e)},removeEventListener:function(t,e){var i=pi[t],n=i&&i.indexOf(e);n>=0&&i.splice(n,1)},utils:{wrap:function t(e,i,n){var r=i-e;return F(e)?ce(e,t(0,e.length),i):$t(n,(function(t){return(r+(t-e)%r)%r+e}))},wrapYoyo:function t(e,i,n){var r=i-e,s=2*r;return F(e)?ce(e,t(0,e.length-1),i):$t(n,(function(t){return e+((t=(s+(t-e)%s)%s||0)>r?s-t:t)}))},distribute:se,random:le,snap:ae,normalize:function(t,e,i){return ue(t,e,0,1,i)},getUnit:Zt,clamp:function(t,e,i){return $t(i,(function(i){return Qt(t,e,i)}))},splitColor:be,toArray:ie,selector:ne,mapRange:ue,pipe:function(){for(var t=arguments.length,e=new Array(t),i=0;i<t;i++)e[i]=arguments[i];return function(t){return e.reduce((function(t,e){return e(t)}),t)}},unitize:function(t,e){return function(i){return t(parseFloat(i))+(e||Zt(i))}},interpolate:function t(e,i,n,r){var s=isNaN(e+i)?0:function(t){return(1-t)*e+t*i};if(!s){var o,a,l,c,h,u=C(e),f={};if(!0===n&&(r=1)&&(n=null),u)e={p:e},i={p:i};else if(F(e)&&!F(i)){for(l=[],c=e.length,h=c-2,a=1;a<c;a++)l.push(t(e[a-1],e[a]));c--,s=function(t){t*=c;var e=Math.min(h,~~t);return l[e](t-e)},n=i}else r||(e=kt(F(e)?[]:{},e));if(!l){for(o in i)Ve.call(f,e,o,"get",i[o]);s=function(t){return ai(t,f)||(u?e.p:e)}}}return $t(n,s)},shuffle:re},install:G,effects:at,ticker:Ee,updateRoot:je.updateRoot,plugins:ot,globalTimeline:o,core:{PropTween:fi,globals:Z,Tween:Ze,Timeline:je,Animation:We,getCache:ft,_removeLinkedListItem:Mt,reverting:function(){return r},context:function(t){return t&&s&&(s.data.push(t),t._ctx=s),s},suppressOverwrites:function(t){return n=t}}};pt("to,from,fromTo,delayedCall,set,killTweensOf",(function(t){return xi[t]=Ze[t]})),Ee.add(je.updateRoot),f=xi.to({},{duration:0});var Ti=function(t,e){for(var i=t._pt;i&&i.p!==e&&i.op!==e&&i.fp!==e;)i=i._next;return i},ki=function(t,e){return{name:t,rawVars:1,init:function(t,i,n){n._onInit=function(t){var n,r;if(C(i)&&(n={},pt(i,(function(t){return n[t]=1})),i=n),e){for(r in n={},i)n[r]=e(i[r]);i=n}!function(t,e){var i,n,r,s=t._targets;for(i in e)for(n=s.length;n--;)(r=t._ptLookup[n][i])&&(r=r.d)&&(r._pt&&(r=Ti(r,i)),r&&r.modifier&&r.modifier(e[i],t,s[n],i))}(t,i)}}}},Si=xi.registerPlugin({name:"attr",init:function(t,e,i,n,r){var s,o,a;for(s in this.tween=i,e)a=t.getAttribute(s)||"",(o=this.add(t,"setAttribute",(a||0)+"",e[s],n,r,0,0,s)).op=s,o.b=a,this._props.push(s)},render:function(t,e){for(var i=e._pt;i;)r?i.set(i.t,i.p,i.b,i):i.r(t,i.d),i=i._next}},{name:"endArray",init:function(t,e){for(var i=e.length;i--;)this.add(t,i,t[i]||0,e[i],0,0,0,0,0,1)}},ki("roundProps",oe),ki("modifiers"),ki("snap",ae))||xi;Ze.version=je.version=Si.version="3.12.5",h=1,z()&&Oe();Ae.Power0,Ae.Power1,Ae.Power2,Ae.Power3,Ae.Power4,Ae.Linear,Ae.Quad,Ae.Cubic,Ae.Quart,Ae.Quint,Ae.Strong,Ae.Elastic,Ae.Back,Ae.SteppedEase,Ae.Bounce,Ae.Sine,Ae.Expo,Ae.Circ;var Ei,Oi,Ai,Mi,Ci,Di,Pi,Ri,Li={},Bi=180/Math.PI,zi=Math.PI/180,Ii=Math.atan2,Yi=/([A-Z])/g,Fi=/(left|right|width|margin|padding|x)/i,Wi=/[\s,\(]\S/,ji={autoAlpha:"opacity,visibility",scale:"scaleX,scaleY",alpha:"opacity"},Hi=function(t,e){return e.set(e.t,e.p,Math.round(1e4*(e.s+e.c*t))/1e4+e.u,e)},Xi=function(t,e){return e.set(e.t,e.p,1===t?e.e:Math.round(1e4*(e.s+e.c*t))/1e4+e.u,e)},qi=function(t,e){return e.set(e.t,e.p,t?Math.round(1e4*(e.s+e.c*t))/1e4+e.u:e.b,e)},Vi=function(t,e){var i=e.s+e.c*t;e.set(e.t,e.p,~~(i+(i<0?-.5:.5))+e.u,e)},Ni=function(t,e){return e.set(e.t,e.p,t?e.e:e.b,e)},Ui=function(t,e){return e.set(e.t,e.p,1!==t?e.b:e.e,e)},Ki=function(t,e,i){return t.style[e]=i},Gi=function(t,e,i){return t.style.setProperty(e,i)},$i=function(t,e,i){return t._gsap[e]=i},Qi=function(t,e,i){return t._gsap.scaleX=t._gsap.scaleY=i},Zi=function(t,e,i,n,r){var s=t._gsap;s.scaleX=s.scaleY=i,s.renderTransform(r,s)},Ji=function(t,e,i,n,r){var s=t._gsap;s[e]=i,s.renderTransform(r,s)},tn="transform",en=tn+"Origin",nn=function t(e,i){var n=this,r=this.target,s=r.style,o=r._gsap;if(e in Li&&s){if(this.tfm=this.tfm||{},"transform"===e)return ji.transform.split(",").forEach((function(e){return t.call(n,e,i)}));if(~(e=ji[e]||e).indexOf(",")?e.split(",").forEach((function(t){return n.tfm[t]=wn(r,t)})):this.tfm[e]=o.x?o[e]:wn(r,e),e===en&&(this.tfm.zOrigin=o.zOrigin),this.props.indexOf(tn)>=0)return;o.svg&&(this.svgo=r.getAttribute("data-svg-origin"),this.props.push(en,i,"")),e=tn}(s||i)&&this.props.push(e,i,s[e])},rn=function(t){t.translate&&(t.removeProperty("translate"),t.removeProperty("scale"),t.removeProperty("rotate"))},sn=function(){var t,e,i=this.props,n=this.target,r=n.style,s=n._gsap;for(t=0;t<i.length;t+=3)i[t+1]?n[i[t]]=i[t+2]:i[t+2]?r[i[t]]=i[t+2]:r.removeProperty("--"===i[t].substr(0,2)?i[t]:i[t].replace(Yi,"-$1").toLowerCase());if(this.tfm){for(e in this.tfm)s[e]=this.tfm[e];s.svg&&(s.renderTransform(),n.setAttribute("data-svg-origin",this.svgo||"")),(t=Pi())&&t.isStart||r[tn]||(rn(r),s.zOrigin&&r[en]&&(r[en]+=" "+s.zOrigin+"px",s.zOrigin=0,s.renderTransform()),s.uncache=1)}},on=function(t,e){var i={target:t,props:[],revert:sn,save:nn};return t._gsap||Si.core.getCache(t),e&&e.split(",").forEach((function(t){return i.save(t)})),i},an=function(t,e){var i=Oi.createElementNS?Oi.createElementNS((e||"http://www.w3.org/1999/xhtml").replace(/^https/,"http"),t):Oi.createElement(t);return i&&i.style?i:Oi.createElement(t)},ln=function t(e,i,n){var r=getComputedStyle(e);return r[i]||r.getPropertyValue(i.replace(Yi,"-$1").toLowerCase())||r.getPropertyValue(i)||!n&&t(e,hn(i)||i,1)||""},cn="O,Moz,ms,Ms,Webkit".split(","),hn=function(t,e,i){var n=(e||Ci).style,r=5;if(t in n&&!i)return t;for(t=t.charAt(0).toUpperCase()+t.substr(1);r--&&!(cn[r]+t in n););return r<0?null:(3===r?"ms":r>=0?cn[r]:"")+t},un=function(){"undefined"!=typeof window&&window.document&&(Ei=window,Oi=Ei.document,Ai=Oi.documentElement,Ci=an("div")||{style:{}},an("div"),tn=hn(tn),en=tn+"Origin",Ci.style.cssText="border-width:0;line-height:0;position:absolute;padding:0",Ri=!!hn("perspective"),Pi=Si.core.reverting,Mi=1)},fn=function t(e){var i,n=an("svg",this.ownerSVGElement&&this.ownerSVGElement.getAttribute("xmlns")||"http://www.w3.org/2000/svg"),r=this.parentNode,s=this.nextSibling,o=this.style.cssText;if(Ai.appendChild(n),n.appendChild(this),this.style.display="block",e)try{i=this.getBBox(),this._gsapBBox=this.getBBox,this.getBBox=t}catch(t){}else this._gsapBBox&&(i=this._gsapBBox());return r&&(s?r.insertBefore(this,s):r.appendChild(this)),Ai.removeChild(n),this.style.cssText=o,i},dn=function(t,e){for(var i=e.length;i--;)if(t.hasAttribute(e[i]))return t.getAttribute(e[i])},pn=function(t){var e;try{e=t.getBBox()}catch(i){e=fn.call(t,!0)}return e&&(e.width||e.height)||t.getBBox===fn||(e=fn.call(t,!0)),!e||e.width||e.x||e.y?e:{x:+dn(t,["x","cx","x1"])||0,y:+dn(t,["y","cy","y1"])||0,width:0,height:0}},mn=function(t){return!(!t.getCTM||t.parentNode&&!t.ownerSVGElement||!pn(t))},gn=function(t,e){if(e){var i,n=t.style;e in Li&&e!==en&&(e=tn),n.removeProperty?("ms"!==(i=e.substr(0,2))&&"webkit"!==e.substr(0,6)||(e="-"+e),n.removeProperty("--"===i?e:e.replace(Yi,"-$1").toLowerCase())):n.removeAttribute(e)}},vn=function(t,e,i,n,r,s){var o=new fi(t._pt,e,i,0,1,s?Ui:Ni);return t._pt=o,o.b=n,o.e=r,t._props.push(i),o},_n={deg:1,rad:1,turn:1},yn={grid:1,flex:1},bn=function t(e,i,n,r){var s,o,a,l,c=parseFloat(n)||0,h=(n+"").trim().substr((c+"").length)||"px",u=Ci.style,f=Fi.test(i),d="svg"===e.tagName.toLowerCase(),p=(d?"client":"offset")+(f?"Width":"Height"),m=100,g="px"===r,v="%"===r;if(r===h||!c||_n[r]||_n[h])return c;if("px"!==h&&!g&&(c=t(e,i,n,"px")),l=e.getCTM&&mn(e),(v||"%"===h)&&(Li[i]||~i.indexOf("adius")))return s=l?e.getBBox()[f?"width":"height"]:e[p],mt(v?c/s*m:c/100*s);if(u[f?"width":"height"]=m+(g?h:r),o=~i.indexOf("adius")||"em"===r&&e.appendChild&&!d?e:e.parentNode,l&&(o=(e.ownerSVGElement||{}).parentNode),o&&o!==Oi&&o.appendChild||(o=Oi.body),(a=o._gsap)&&v&&a.width&&f&&a.time===Ee.time&&!a.uncache)return mt(c/a.width*m);if(!v||"height"!==i&&"width"!==i)(v||"%"===h)&&!yn[ln(o,"display")]&&(u.position=ln(e,"position")),o===e&&(u.position="static"),o.appendChild(Ci),s=Ci[p],o.removeChild(Ci),u.position="absolute";else{var _=e.style[i];e.style[i]=m+r,s=e[p],_?e.style[i]=_:gn(e,i)}return f&&v&&((a=ft(o)).time=Ee.time,a.width=o[p]),mt(g?s*c/m:s&&c?m/s*c:0)},wn=function(t,e,i,n){var r;return Mi||un(),e in ji&&"transform"!==e&&~(e=ji[e]).indexOf(",")&&(e=e.split(",")[0]),Li[e]&&"transform"!==e?(r=Pn(t,n),r="transformOrigin"!==e?r[e]:r.svg?r.origin:Rn(ln(t,en))+" "+r.zOrigin+"px"):(!(r=t.style[e])||"auto"===r||n||~(r+"").indexOf("calc("))&&(r=Sn[e]&&Sn[e](t,e,i)||ln(t,e)||dt(t,e)||("opacity"===e?1:0)),i&&!~(r+"").trim().indexOf(" ")?bn(t,e,r,i)+i:r},xn=function(t,e,i,n){if(!i||"none"===i){var r=hn(e,t,1),s=r&&ln(t,r,1);s&&s!==i?(e=r,i=s):"borderColor"===e&&(i=ln(t,"borderTopColor"))}var o,a,l,c,h,u,f,d,p,m,g,v=new fi(this._pt,t.style,e,0,1,oi),_=0,y=0;if(v.b=i,v.e=n,i+="","auto"===(n+="")&&(u=t.style[e],t.style[e]=n,n=ln(t,e)||n,u?t.style[e]=u:gn(t,e)),Se(o=[i,n]),n=o[1],l=(i=o[0]).match(H)||[],(n.match(H)||[]).length){for(;a=H.exec(n);)f=a[0],p=n.substring(_,a.index),h?h=(h+1)%5:"rgba("!==p.substr(-5)&&"hsla("!==p.substr(-5)||(h=1),f!==(u=l[y++]||"")&&(c=parseFloat(u)||0,g=u.substr((c+"").length),"="===f.charAt(1)&&(f=vt(c,f)+g),d=parseFloat(f),m=f.substr((d+"").length),_=H.lastIndex-m.length,m||(m=m||b.units[e]||g,_===n.length&&(n+=m,v.e+=m)),g!==m&&(c=bn(t,e,u,m)||0),v._pt={_next:v._pt,p:p||1===y?p:",",s:c,c:d-c,m:h&&h<4||"zIndex"===e?Math.round:0});v.c=_<n.length?n.substring(_,n.length):""}else v.r="display"===e&&"none"===n?Ui:Ni;return q.test(n)&&(v.e=0),this._pt=v,v},Tn={top:"0%",bottom:"100%",left:"0%",right:"100%",center:"50%"},kn=function(t,e){if(e.tween&&e.tween._time===e.tween._dur){var i,n,r,s=e.t,o=s.style,a=e.u,l=s._gsap;if("all"===a||!0===a)o.cssText="",n=1;else for(r=(a=a.split(",")).length;--r>-1;)i=a[r],Li[i]&&(n=1,i="transformOrigin"===i?en:tn),gn(s,i);n&&(gn(s,tn),l&&(l.svg&&s.removeAttribute("transform"),Pn(s,1),l.uncache=1,rn(o)))}},Sn={clearProps:function(t,e,i,n,r){if("isFromStart"!==r.data){var s=t._pt=new fi(t._pt,e,i,0,0,kn);return s.u=n,s.pr=-10,s.tween=r,t._props.push(i),1}}},En=[1,0,0,1,0,0],On={},An=function(t){return"matrix(1, 0, 0, 1, 0, 0)"===t||"none"===t||!t},Mn=function(t){var e=ln(t,tn);return An(e)?En:e.substr(7).match(j).map(mt)},Cn=function(t,e){var i,n,r,s,o=t._gsap||ft(t),a=t.style,l=Mn(t);return o.svg&&t.getAttribute("transform")?"1,0,0,1,0,0"===(l=[(r=t.transform.baseVal.consolidate().matrix).a,r.b,r.c,r.d,r.e,r.f]).join(",")?En:l:(l!==En||t.offsetParent||t===Ai||o.svg||(r=a.display,a.display="block",(i=t.parentNode)&&t.offsetParent||(s=1,n=t.nextElementSibling,Ai.appendChild(t)),l=Mn(t),r?a.display=r:gn(t,"display"),s&&(n?i.insertBefore(t,n):i?i.appendChild(t):Ai.removeChild(t))),e&&l.length>6?[l[0],l[1],l[4],l[5],l[12],l[13]]:l)},Dn=function(t,e,i,n,r,s){var o,a,l,c=t._gsap,h=r||Cn(t,!0),u=c.xOrigin||0,f=c.yOrigin||0,d=c.xOffset||0,p=c.yOffset||0,m=h[0],g=h[1],v=h[2],_=h[3],y=h[4],b=h[5],w=e.split(" "),x=parseFloat(w[0])||0,T=parseFloat(w[1])||0;i?h!==En&&(a=m*_-g*v)&&(l=x*(-g/a)+T*(m/a)-(m*b-g*y)/a,x=x*(_/a)+T*(-v/a)+(v*b-_*y)/a,T=l):(x=(o=pn(t)).x+(~w[0].indexOf("%")?x/100*o.width:x),T=o.y+(~(w[1]||w[0]).indexOf("%")?T/100*o.height:T)),n||!1!==n&&c.smooth?(y=x-u,b=T-f,c.xOffset=d+(y*m+b*v)-y,c.yOffset=p+(y*g+b*_)-b):c.xOffset=c.yOffset=0,c.xOrigin=x,c.yOrigin=T,c.smooth=!!n,c.origin=e,c.originIsAbsolute=!!i,t.style[en]="0px 0px",s&&(vn(s,c,"xOrigin",u,x),vn(s,c,"yOrigin",f,T),vn(s,c,"xOffset",d,c.xOffset),vn(s,c,"yOffset",p,c.yOffset)),t.setAttribute("data-svg-origin",x+" "+T)},Pn=function(t,e){var i=t._gsap||new Fe(t);if("x"in i&&!e&&!i.uncache)return i;var n,r,s,o,a,l,c,h,u,f,d,p,m,g,v,_,y,w,x,T,k,S,E,O,A,M,C,D,P,R,L,B,z=t.style,I=i.scaleX<0,Y="px",F="deg",W=getComputedStyle(t),j=ln(t,en)||"0";return n=r=s=l=c=h=u=f=d=0,o=a=1,i.svg=!(!t.getCTM||!mn(t)),W.translate&&("none"===W.translate&&"none"===W.scale&&"none"===W.rotate||(z[tn]=("none"!==W.translate?"translate3d("+(W.translate+" 0 0").split(" ").slice(0,3).join(", ")+") ":"")+("none"!==W.rotate?"rotate("+W.rotate+") ":"")+("none"!==W.scale?"scale("+W.scale.split(" ").join(",")+") ":"")+("none"!==W[tn]?W[tn]:"")),z.scale=z.rotate=z.translate="none"),g=Cn(t,i.svg),i.svg&&(i.uncache?(A=t.getBBox(),j=i.xOrigin-A.x+"px "+(i.yOrigin-A.y)+"px",O=""):O=!e&&t.getAttribute("data-svg-origin"),Dn(t,O||j,!!O||i.originIsAbsolute,!1!==i.smooth,g)),p=i.xOrigin||0,m=i.yOrigin||0,g!==En&&(w=g[0],x=g[1],T=g[2],k=g[3],n=S=g[4],r=E=g[5],6===g.length?(o=Math.sqrt(w*w+x*x),a=Math.sqrt(k*k+T*T),l=w||x?Ii(x,w)*Bi:0,(u=T||k?Ii(T,k)*Bi+l:0)&&(a*=Math.abs(Math.cos(u*zi))),i.svg&&(n-=p-(p*w+m*T),r-=m-(p*x+m*k))):(B=g[6],R=g[7],C=g[8],D=g[9],P=g[10],L=g[11],n=g[12],r=g[13],s=g[14],c=(v=Ii(B,P))*Bi,v&&(O=S*(_=Math.cos(-v))+C*(y=Math.sin(-v)),A=E*_+D*y,M=B*_+P*y,C=S*-y+C*_,D=E*-y+D*_,P=B*-y+P*_,L=R*-y+L*_,S=O,E=A,B=M),h=(v=Ii(-T,P))*Bi,v&&(_=Math.cos(-v),L=k*(y=Math.sin(-v))+L*_,w=O=w*_-C*y,x=A=x*_-D*y,T=M=T*_-P*y),l=(v=Ii(x,w))*Bi,v&&(O=w*(_=Math.cos(v))+x*(y=Math.sin(v)),A=S*_+E*y,x=x*_-w*y,E=E*_-S*y,w=O,S=A),c&&Math.abs(c)+Math.abs(l)>359.9&&(c=l=0,h=180-h),o=mt(Math.sqrt(w*w+x*x+T*T)),a=mt(Math.sqrt(E*E+B*B)),v=Ii(S,E),u=Math.abs(v)>2e-4?v*Bi:0,d=L?1/(L<0?-L:L):0),i.svg&&(O=t.getAttribute("transform"),i.forceCSS=t.setAttribute("transform","")||!An(ln(t,tn)),O&&t.setAttribute("transform",O))),Math.abs(u)>90&&Math.abs(u)<270&&(I?(o*=-1,u+=l<=0?180:-180,l+=l<=0?180:-180):(a*=-1,u+=u<=0?180:-180)),e=e||i.uncache,i.x=n-((i.xPercent=n&&(!e&&i.xPercent||(Math.round(t.offsetWidth/2)===Math.round(-n)?-50:0)))?t.offsetWidth*i.xPercent/100:0)+Y,i.y=r-((i.yPercent=r&&(!e&&i.yPercent||(Math.round(t.offsetHeight/2)===Math.round(-r)?-50:0)))?t.offsetHeight*i.yPercent/100:0)+Y,i.z=s+Y,i.scaleX=mt(o),i.scaleY=mt(a),i.rotation=mt(l)+F,i.rotationX=mt(c)+F,i.rotationY=mt(h)+F,i.skewX=u+F,i.skewY=f+F,i.transformPerspective=d+Y,(i.zOrigin=parseFloat(j.split(" ")[2])||!e&&i.zOrigin||0)&&(z[en]=Rn(j)),i.xOffset=i.yOffset=0,i.force3D=b.force3D,i.renderTransform=i.svg?Wn:Ri?Fn:Bn,i.uncache=0,i},Rn=function(t){return(t=t.split(" "))[0]+" "+t[1]},Ln=function(t,e,i){var n=Zt(e);return mt(parseFloat(e)+parseFloat(bn(t,"x",i+"px",n)))+n},Bn=function(t,e){e.z="0px",e.rotationY=e.rotationX="0deg",e.force3D=0,Fn(t,e)},zn="0deg",In="0px",Yn=") ",Fn=function(t,e){var i=e||this,n=i.xPercent,r=i.yPercent,s=i.x,o=i.y,a=i.z,l=i.rotation,c=i.rotationY,h=i.rotationX,u=i.skewX,f=i.skewY,d=i.scaleX,p=i.scaleY,m=i.transformPerspective,g=i.force3D,v=i.target,_=i.zOrigin,y="",b="auto"===g&&t&&1!==t||!0===g;if(_&&(h!==zn||c!==zn)){var w,x=parseFloat(c)*zi,T=Math.sin(x),k=Math.cos(x);x=parseFloat(h)*zi,w=Math.cos(x),s=Ln(v,s,T*w*-_),o=Ln(v,o,-Math.sin(x)*-_),a=Ln(v,a,k*w*-_+_)}m!==In&&(y+="perspective("+m+Yn),(n||r)&&(y+="translate("+n+"%, "+r+"%) "),(b||s!==In||o!==In||a!==In)&&(y+=a!==In||b?"translate3d("+s+", "+o+", "+a+") ":"translate("+s+", "+o+Yn),l!==zn&&(y+="rotate("+l+Yn),c!==zn&&(y+="rotateY("+c+Yn),h!==zn&&(y+="rotateX("+h+Yn),u===zn&&f===zn||(y+="skew("+u+", "+f+Yn),1===d&&1===p||(y+="scale("+d+", "+p+Yn),v.style[tn]=y||"translate(0, 0)"},Wn=function(t,e){var i,n,r,s,o,a=e||this,l=a.xPercent,c=a.yPercent,h=a.x,u=a.y,f=a.rotation,d=a.skewX,p=a.skewY,m=a.scaleX,g=a.scaleY,v=a.target,_=a.xOrigin,y=a.yOrigin,b=a.xOffset,w=a.yOffset,x=a.forceCSS,T=parseFloat(h),k=parseFloat(u);f=parseFloat(f),d=parseFloat(d),(p=parseFloat(p))&&(d+=p=parseFloat(p),f+=p),f||d?(f*=zi,d*=zi,i=Math.cos(f)*m,n=Math.sin(f)*m,r=Math.sin(f-d)*-g,s=Math.cos(f-d)*g,d&&(p*=zi,o=Math.tan(d-p),r*=o=Math.sqrt(1+o*o),s*=o,p&&(o=Math.tan(p),i*=o=Math.sqrt(1+o*o),n*=o)),i=mt(i),n=mt(n),r=mt(r),s=mt(s)):(i=m,s=g,n=r=0),(T&&!~(h+"").indexOf("px")||k&&!~(u+"").indexOf("px"))&&(T=bn(v,"x",h,"px"),k=bn(v,"y",u,"px")),(_||y||b||w)&&(T=mt(T+_-(_*i+y*r)+b),k=mt(k+y-(_*n+y*s)+w)),(l||c)&&(o=v.getBBox(),T=mt(T+l/100*o.width),k=mt(k+c/100*o.height)),o="matrix("+i+","+n+","+r+","+s+","+T+","+k+")",v.setAttribute("transform",o),x&&(v.style[tn]=o)},jn=function(t,e,i,n,r){var s,o,a=360,l=C(r),c=parseFloat(r)*(l&&~r.indexOf("rad")?Bi:1)-n,h=n+c+"deg";return l&&("short"===(s=r.split("_")[1])&&(c%=a)!==c%180&&(c+=c<0?a:-360),"cw"===s&&c<0?c=(c+36e9)%a-~~(c/a)*a:"ccw"===s&&c>0&&(c=(c-36e9)%a-~~(c/a)*a)),t._pt=o=new fi(t._pt,e,i,n,c,Xi),o.e=h,o.u="deg",t._props.push(i),o},Hn=function(t,e){for(var i in e)t[i]=e[i];return t},Xn=function(t,e,i){var n,r,s,o,a,l,c,h=Hn({},i._gsap),u=i.style;for(r in h.svg?(s=i.getAttribute("transform"),i.setAttribute("transform",""),u[tn]=e,n=Pn(i,1),gn(i,tn),i.setAttribute("transform",s)):(s=getComputedStyle(i)[tn],u[tn]=e,n=Pn(i,1),u[tn]=s),Li)(s=h[r])!==(o=n[r])&&"perspective,force3D,transformOrigin,svgOrigin".indexOf(r)<0&&(a=Zt(s)!==(c=Zt(o))?bn(i,r,s,c):parseFloat(s),l=parseFloat(o),t._pt=new fi(t._pt,n,r,a,l-a,Hi),t._pt.u=c||0,t._props.push(r));Hn(n,h)};pt("padding,margin,Width,Radius",(function(t,e){var i="Top",n="Right",r="Bottom",s="Left",o=(e<3?[i,n,r,s]:[i+s,i+n,r+n,r+s]).map((function(i){return e<2?t+i:"border"+i+t}));Sn[e>1?"border"+t:t]=function(t,e,i,n,r){var s,a;if(arguments.length<4)return s=o.map((function(e){return wn(t,e,i)})),5===(a=s.join(" ")).split(s[0]).length?s[0]:a;s=(n+"").split(" "),a={},o.forEach((function(t,e){return a[t]=s[e]=s[e]||s[(e-1)/2|0]})),t.init(e,a,r)}}));var qn,Vn,Nn,Un={name:"css",register:un,targetTest:function(t){return t.style&&t.nodeType},init:function(t,e,i,n,r){var s,o,a,l,c,h,u,f,d,p,m,g,v,_,y,w,x,T,k,S,E=this._props,O=t.style,A=i.vars.startAt;for(u in Mi||un(),this.styles=this.styles||on(t),w=this.styles.props,this.tween=i,e)if("autoRound"!==u&&(o=e[u],!ot[u]||!Ne(u,e,i,n,t,r)))if(c=typeof o,h=Sn[u],"function"===c&&(c=typeof(o=o.call(i,n,t,r))),"string"===c&&~o.indexOf("random(")&&(o=he(o)),h)h(this,t,u,o,i)&&(y=1);else if("--"===u.substr(0,2))s=(getComputedStyle(t).getPropertyValue(u)+"").trim(),o+="",Te.lastIndex=0,Te.test(s)||(f=Zt(s),d=Zt(o)),d?f!==d&&(s=bn(t,u,s,d)+d):f&&(o+=f),this.add(O,"setProperty",s,o,n,r,0,0,u),E.push(u),w.push(u,0,O[u]);else if("undefined"!==c){if(A&&u in A?(s="function"==typeof A[u]?A[u].call(i,n,t,r):A[u],C(s)&&~s.indexOf("random(")&&(s=he(s)),Zt(s+"")||"auto"===s||(s+=b.units[u]||Zt(wn(t,u))||""),"="===(s+"").charAt(1)&&(s=wn(t,u))):s=wn(t,u),l=parseFloat(s),(p="string"===c&&"="===o.charAt(1)&&o.substr(0,2))&&(o=o.substr(2)),a=parseFloat(o),u in ji&&("autoAlpha"===u&&(1===l&&"hidden"===wn(t,"visibility")&&a&&(l=0),w.push("visibility",0,O.visibility),vn(this,O,"visibility",l?"inherit":"hidden",a?"inherit":"hidden",!a)),"scale"!==u&&"transform"!==u&&~(u=ji[u]).indexOf(",")&&(u=u.split(",")[0])),m=u in Li)if(this.styles.save(u),g||((v=t._gsap).renderTransform&&!e.parseTransform||Pn(t,e.parseTransform),_=!1!==e.smoothOrigin&&v.smooth,(g=this._pt=new fi(this._pt,O,tn,0,1,v.renderTransform,v,0,-1)).dep=1),"scale"===u)this._pt=new fi(this._pt,v,"scaleY",v.scaleY,(p?vt(v.scaleY,p+a):a)-v.scaleY||0,Hi),this._pt.u=0,E.push("scaleY",u),u+="X";else{if("transformOrigin"===u){w.push(en,0,O[en]),T=void 0,k=void 0,S=void 0,T=(x=o).split(" "),k=T[0],S=T[1]||"50%","top"!==k&&"bottom"!==k&&"left"!==S&&"right"!==S||(x=k,k=S,S=x),T[0]=Tn[k]||k,T[1]=Tn[S]||S,o=T.join(" "),v.svg?Dn(t,o,0,_,0,this):((d=parseFloat(o.split(" ")[2])||0)!==v.zOrigin&&vn(this,v,"zOrigin",v.zOrigin,d),vn(this,O,u,Rn(s),Rn(o)));continue}if("svgOrigin"===u){Dn(t,o,1,_,0,this);continue}if(u in On){jn(this,v,u,l,p?vt(l,p+o):o);continue}if("smoothOrigin"===u){vn(this,v,"smooth",v.smooth,o);continue}if("force3D"===u){v[u]=o;continue}if("transform"===u){Xn(this,o,t);continue}}else u in O||(u=hn(u)||u);if(m||(a||0===a)&&(l||0===l)&&!Wi.test(o)&&u in O)a||(a=0),(f=(s+"").substr((l+"").length))!==(d=Zt(o)||(u in b.units?b.units[u]:f))&&(l=bn(t,u,s,d)),this._pt=new fi(this._pt,m?v:O,u,l,(p?vt(l,p+a):a)-l,m||"px"!==d&&"zIndex"!==u||!1===e.autoRound?Hi:Vi),this._pt.u=d||0,f!==d&&"%"!==d&&(this._pt.b=s,this._pt.r=qi);else if(u in O)xn.call(this,t,u,s,p?p+o:o);else if(u in t)this.add(t,u,s||t[u],p?p+o:o,n,r);else if("parseTransform"!==u){$(u,o);continue}m||(u in O?w.push(u,0,O[u]):w.push(u,1,s||t[u])),E.push(u)}y&&ui(this)},render:function(t,e){if(e.tween._time||!Pi())for(var i=e._pt;i;)i.r(t,i.d),i=i._next;else e.styles.revert()},get:wn,aliases:ji,getSetter:function(t,e,i){var n=ji[e];return n&&n.indexOf(",")<0&&(e=n),e in Li&&e!==en&&(t._gsap.x||wn(t,"x"))?i&&Di===i?"scale"===e?Qi:$i:(Di=i||{})&&("scale"===e?Zi:Ji):t.style&&!R(t.style[e])?Ki:~e.indexOf("-")?Gi:ni(t,e)},core:{_removeProperty:gn,_getMatrix:Cn}};Si.utils.checkPrefix=hn,Si.core.getStyleSaver=on,Nn=pt((qn="x,y,z,scale,scaleX,scaleY,xPercent,yPercent")+","+(Vn="rotation,rotationX,rotationY,skewX,skewY")+",transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective",(function(t){Li[t]=1})),pt(Vn,(function(t){b.units[t]="deg",On[t]=1})),ji[Nn[13]]=qn+","+Vn,pt("0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY",(function(t){var e=t.split(":");ji[e[1]]=Nn[e[0]]})),pt("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective",(function(t){b.units[t]="px"})),Si.registerPlugin(Un);var Kn=Si.registerPlugin(Un)||Si;Kn.core.Tween;function Gn(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function $n(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function Qn(t,e,i){return e&&$n(t.prototype,e),i&&$n(t,i),t}function Zn(t,e,i){return e in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t}function Jn(t,e){var i=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),i.push.apply(i,n)}return i}function tr(t){for(var e=1;e<arguments.length;e++){var i=null!=arguments[e]?arguments[e]:{};e%2?Jn(Object(i),!0).forEach((function(e){Zn(t,e,i[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(i)):Jn(Object(i)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(i,e))}))}return t}function er(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&nr(t,e)}function ir(t){return ir=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},ir(t)}function nr(t,e){return nr=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},nr(t,e)}function rr(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function sr(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var i,n=ir(t);if(e){var r=ir(this).constructor;i=Reflect.construct(n,arguments,r)}else i=n.apply(this,arguments);return function(t,e){return!e||"object"!=typeof e&&"function"!=typeof e?rr(t):e}(this,i)}}function or(t,e,i){return or="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,i){var n=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=ir(t)););return t}(t,e);if(n){var r=Object.getOwnPropertyDescriptor(n,e);return r.get?r.get.call(i):r.value}},or(t,e,i||t)}function ar(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(t)))return;var i=[],n=!0,r=!1,s=void 0;try{for(var o,a=t[Symbol.iterator]();!(n=(o=a.next()).done)&&(i.push(o.value),!e||i.length!==e);n=!0);}catch(t){r=!0,s=t}finally{try{n||null==a.return||a.return()}finally{if(r)throw s}}return i}(t,e)||cr(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function lr(t){return function(t){if(Array.isArray(t))return hr(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||cr(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function cr(t,e){if(t){if("string"==typeof t)return hr(t,e);var i=Object.prototype.toString.call(t).slice(8,-1);return"Object"===i&&t.constructor&&(i=t.constructor.name),"Map"===i||"Set"===i?Array.from(t):"Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)?hr(t,e):void 0}}function hr(t,e){(null==e||e>t.length)&&(e=t.length);for(var i=0,n=new Array(e);i<e;i++)n[i]=t[i];return n}var ur={el:document,name:"scroll",offset:[0,0],repeat:!1,smooth:!1,initPosition:{x:0,y:0},direction:"vertical",gestureDirection:"vertical",reloadOnContextChange:!1,lerp:.1,class:"is-inview",scrollbarContainer:!1,scrollbarClass:"c-scrollbar",scrollingClass:"has-scroll-scrolling",draggingClass:"has-scroll-dragging",smoothClass:"has-scroll-smooth",initClass:"has-scroll-init",getSpeed:!1,getDirection:!1,scrollFromAnywhere:!1,multiplier:1,firefoxMultiplier:50,touchMultiplier:2,resetNativeScroll:!0,tablet:{smooth:!1,direction:"vertical",gestureDirection:"vertical",breakpoint:1024},smartphone:{smooth:!1,direction:"vertical",gestureDirection:"vertical"}},fr=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};Gn(this,t),Object.assign(this,ur,e),this.smartphone=ur.smartphone,e.smartphone&&Object.assign(this.smartphone,e.smartphone),this.tablet=ur.tablet,e.tablet&&Object.assign(this.tablet,e.tablet),this.namespace="locomotive",this.html=document.documentElement,this.windowHeight=window.innerHeight,this.windowWidth=window.innerWidth,this.windowMiddle={x:this.windowWidth/2,y:this.windowHeight/2},this.els={},this.currentElements={},this.listeners={},this.hasScrollTicking=!1,this.hasCallEventSet=!1,this.checkScroll=this.checkScroll.bind(this),this.checkResize=this.checkResize.bind(this),this.checkEvent=this.checkEvent.bind(this),this.instance={scroll:{x:0,y:0},limit:{x:this.html.offsetWidth,y:this.html.offsetHeight},currentElements:this.currentElements},this.isMobile?this.isTablet?this.context="tablet":this.context="smartphone":this.context="desktop",this.isMobile&&(this.direction=this[this.context].direction),"horizontal"===this.direction?this.directionAxis="x":this.directionAxis="y",this.getDirection&&(this.instance.direction=null),this.getDirection&&(this.instance.speed=0),this.html.classList.add(this.initClass),window.addEventListener("resize",this.checkResize,!1)}return Qn(t,[{key:"init",value:function(){this.initEvents()}},{key:"checkScroll",value:function(){this.dispatchScroll()}},{key:"checkResize",value:function(){var t=this;this.resizeTick||(this.resizeTick=!0,requestAnimationFrame((function(){t.resize(),t.resizeTick=!1})))}},{key:"resize",value:function(){}},{key:"checkContext",value:function(){if(this.reloadOnContextChange){this.isMobile=/Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||"MacIntel"===navigator.platform&&navigator.maxTouchPoints>1||this.windowWidth<this.tablet.breakpoint,this.isTablet=this.isMobile&&this.windowWidth>=this.tablet.breakpoint;var t=this.context;if(this.isMobile?this.isTablet?this.context="tablet":this.context="smartphone":this.context="desktop",t!=this.context)("desktop"==t?this.smooth:this[t].smooth)!=("desktop"==this.context?this.smooth:this[this.context].smooth)&&window.location.reload()}}},{key:"initEvents",value:function(){var t=this;this.scrollToEls=this.el.querySelectorAll("[data-".concat(this.name,"-to]")),this.setScrollTo=this.setScrollTo.bind(this),this.scrollToEls.forEach((function(e){e.addEventListener("click",t.setScrollTo,!1)}))}},{key:"setScrollTo",value:function(t){t.preventDefault(),this.scrollTo(t.currentTarget.getAttribute("data-".concat(this.name,"-href"))||t.currentTarget.getAttribute("href"),{offset:t.currentTarget.getAttribute("data-".concat(this.name,"-offset"))})}},{key:"addElements",value:function(){}},{key:"detectElements",value:function(t){var e=this,i=this.instance.scroll.y,n=i+this.windowHeight,r=this.instance.scroll.x,s=r+this.windowWidth;Object.entries(this.els).forEach((function(o){var a=ar(o,2),l=a[0],c=a[1];if(!c||c.inView&&!t||("horizontal"===e.direction?s>=c.left&&r<c.right&&e.setInView(c,l):n>=c.top&&i<c.bottom&&e.setInView(c,l)),c&&c.inView)if("horizontal"===e.direction){var h=c.right-c.left;c.progress=(e.instance.scroll.x-(c.left-e.windowWidth))/(h+e.windowWidth),(s<c.left||r>c.right)&&e.setOutOfView(c,l)}else{var u=c.bottom-c.top;c.progress=(e.instance.scroll.y-(c.top-e.windowHeight))/(u+e.windowHeight),(n<c.top||i>c.bottom)&&e.setOutOfView(c,l)}})),this.hasScrollTicking=!1}},{key:"setInView",value:function(t,e){this.els[e].inView=!0,t.el.classList.add(t.class),this.currentElements[e]=t,t.call&&this.hasCallEventSet&&(this.dispatchCall(t,"enter"),t.repeat||(this.els[e].call=!1))}},{key:"setOutOfView",value:function(t,e){var i=this;this.els[e].inView=!1,Object.keys(this.currentElements).forEach((function(t){t===e&&delete i.currentElements[t]})),t.call&&this.hasCallEventSet&&this.dispatchCall(t,"exit"),t.repeat&&t.el.classList.remove(t.class)}},{key:"dispatchCall",value:function(t,e){this.callWay=e,this.callValue=t.call.split(",").map((function(t){return t.trim()})),this.callObj=t,1==this.callValue.length&&(this.callValue=this.callValue[0]);var i=new Event(this.namespace+"call");this.el.dispatchEvent(i)}},{key:"dispatchScroll",value:function(){var t=new Event(this.namespace+"scroll");this.el.dispatchEvent(t)}},{key:"setEvents",value:function(t,e){this.listeners[t]||(this.listeners[t]=[]);var i=this.listeners[t];i.push(e),1===i.length&&this.el.addEventListener(this.namespace+t,this.checkEvent,!1),"call"===t&&(this.hasCallEventSet=!0,this.detectElements(!0))}},{key:"unsetEvents",value:function(t,e){if(this.listeners[t]){var i=this.listeners[t],n=i.indexOf(e);n<0||(i.splice(n,1),0===i.index&&this.el.removeEventListener(this.namespace+t,this.checkEvent,!1))}}},{key:"checkEvent",value:function(t){var e=this,i=t.type.replace(this.namespace,""),n=this.listeners[i];n&&0!==n.length&&n.forEach((function(t){switch(i){case"scroll":return t(e.instance);case"call":return t(e.callValue,e.callWay,e.callObj);default:return t()}}))}},{key:"startScroll",value:function(){}},{key:"stopScroll",value:function(){}},{key:"setScroll",value:function(t,e){this.instance.scroll={x:0,y:0}}},{key:"destroy",value:function(){var t=this;window.removeEventListener("resize",this.checkResize,!1),Object.keys(this.listeners).forEach((function(e){t.el.removeEventListener(t.namespace+e,t.checkEvent,!1)})),this.listeners={},this.scrollToEls.forEach((function(e){e.removeEventListener("click",t.setScrollTo,!1)})),this.html.classList.remove(this.initClass)}}]),t}(),dr="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==t.g?t.g:"undefined"!=typeof self?self:{};function pr(t,e){return t(e={exports:{}},e.exports),e.exports}var mr=pr((function(t,e){t.exports={polyfill:function(){var t=window,e=document;if(!("scrollBehavior"in e.documentElement.style)||!0===t.__forceSmoothScrollPolyfill__){var i,n=t.HTMLElement||t.Element,r=468,s={scroll:t.scroll||t.scrollTo,scrollBy:t.scrollBy,elementScroll:n.prototype.scroll||l,scrollIntoView:n.prototype.scrollIntoView},o=t.performance&&t.performance.now?t.performance.now.bind(t.performance):Date.now,a=(i=t.navigator.userAgent,new RegExp(["MSIE ","Trident/","Edge/"].join("|")).test(i)?1:0);t.scroll=t.scrollTo=function(){void 0!==arguments[0]&&(!0!==c(arguments[0])?p.call(t,e.body,void 0!==arguments[0].left?~~arguments[0].left:t.scrollX||t.pageXOffset,void 0!==arguments[0].top?~~arguments[0].top:t.scrollY||t.pageYOffset):s.scroll.call(t,void 0!==arguments[0].left?arguments[0].left:"object"!=typeof arguments[0]?arguments[0]:t.scrollX||t.pageXOffset,void 0!==arguments[0].top?arguments[0].top:void 0!==arguments[1]?arguments[1]:t.scrollY||t.pageYOffset))},t.scrollBy=function(){void 0!==arguments[0]&&(c(arguments[0])?s.scrollBy.call(t,void 0!==arguments[0].left?arguments[0].left:"object"!=typeof arguments[0]?arguments[0]:0,void 0!==arguments[0].top?arguments[0].top:void 0!==arguments[1]?arguments[1]:0):p.call(t,e.body,~~arguments[0].left+(t.scrollX||t.pageXOffset),~~arguments[0].top+(t.scrollY||t.pageYOffset)))},n.prototype.scroll=n.prototype.scrollTo=function(){if(void 0!==arguments[0])if(!0!==c(arguments[0])){var t=arguments[0].left,e=arguments[0].top;p.call(this,this,void 0===t?this.scrollLeft:~~t,void 0===e?this.scrollTop:~~e)}else{if("number"==typeof arguments[0]&&void 0===arguments[1])throw new SyntaxError("Value could not be converted");s.elementScroll.call(this,void 0!==arguments[0].left?~~arguments[0].left:"object"!=typeof arguments[0]?~~arguments[0]:this.scrollLeft,void 0!==arguments[0].top?~~arguments[0].top:void 0!==arguments[1]?~~arguments[1]:this.scrollTop)}},n.prototype.scrollBy=function(){void 0!==arguments[0]&&(!0!==c(arguments[0])?this.scroll({left:~~arguments[0].left+this.scrollLeft,top:~~arguments[0].top+this.scrollTop,behavior:arguments[0].behavior}):s.elementScroll.call(this,void 0!==arguments[0].left?~~arguments[0].left+this.scrollLeft:~~arguments[0]+this.scrollLeft,void 0!==arguments[0].top?~~arguments[0].top+this.scrollTop:~~arguments[1]+this.scrollTop))},n.prototype.scrollIntoView=function(){if(!0!==c(arguments[0])){var i=function(t){for(;t!==e.body&&!1===f(t);)t=t.parentNode||t.host;return t}(this),n=i.getBoundingClientRect(),r=this.getBoundingClientRect();i!==e.body?(p.call(this,i,i.scrollLeft+r.left-n.left,i.scrollTop+r.top-n.top),"fixed"!==t.getComputedStyle(i).position&&t.scrollBy({left:n.left,top:n.top,behavior:"smooth"})):t.scrollBy({left:r.left,top:r.top,behavior:"smooth"})}else s.scrollIntoView.call(this,void 0===arguments[0]||arguments[0])}}function l(t,e){this.scrollLeft=t,this.scrollTop=e}function c(t){if(null===t||"object"!=typeof t||void 0===t.behavior||"auto"===t.behavior||"instant"===t.behavior)return!0;if("object"==typeof t&&"smooth"===t.behavior)return!1;throw new TypeError("behavior member of ScrollOptions "+t.behavior+" is not a valid value for enumeration ScrollBehavior.")}function h(t,e){return"Y"===e?t.clientHeight+a<t.scrollHeight:"X"===e?t.clientWidth+a<t.scrollWidth:void 0}function u(e,i){var n=t.getComputedStyle(e,null)["overflow"+i];return"auto"===n||"scroll"===n}function f(t){var e=h(t,"Y")&&u(t,"Y"),i=h(t,"X")&&u(t,"X");return e||i}function d(e){var i,n,s,a,l=(o()-e.startTime)/r;a=l=l>1?1:l,i=.5*(1-Math.cos(Math.PI*a)),n=e.startX+(e.x-e.startX)*i,s=e.startY+(e.y-e.startY)*i,e.method.call(e.scrollable,n,s),n===e.x&&s===e.y||t.requestAnimationFrame(d.bind(t,e))}function p(i,n,r){var a,c,h,u,f=o();i===e.body?(a=t,c=t.scrollX||t.pageXOffset,h=t.scrollY||t.pageYOffset,u=s.scroll):(a=i,c=i.scrollLeft,h=i.scrollTop,u=l),d({scrollable:a,method:u,startTime:f,startX:c,startY:h,x:n,y:r})}}}})),gr=(mr.polyfill,function(t){er(i,t);var e=sr(i);function i(){var t,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return Gn(this,i),(t=e.call(this,n)).resetNativeScroll&&(history.scrollRestoration&&(history.scrollRestoration="manual"),window.scrollTo(0,0)),window.addEventListener("scroll",t.checkScroll,!1),void 0===window.smoothscrollPolyfill&&(window.smoothscrollPolyfill=mr,window.smoothscrollPolyfill.polyfill()),t}return Qn(i,[{key:"init",value:function(){this.instance.scroll.y=window.pageYOffset,this.addElements(),this.detectElements(),or(ir(i.prototype),"init",this).call(this)}},{key:"checkScroll",value:function(){var t=this;or(ir(i.prototype),"checkScroll",this).call(this),this.getDirection&&this.addDirection(),this.getSpeed&&(this.addSpeed(),this.speedTs=Date.now()),this.instance.scroll.y=window.pageYOffset,Object.entries(this.els).length&&(this.hasScrollTicking||(requestAnimationFrame((function(){t.detectElements()})),this.hasScrollTicking=!0))}},{key:"addDirection",value:function(){window.pageYOffset>this.instance.scroll.y?"down"!==this.instance.direction&&(this.instance.direction="down"):window.pageYOffset<this.instance.scroll.y&&"up"!==this.instance.direction&&(this.instance.direction="up")}},{key:"addSpeed",value:function(){window.pageYOffset!=this.instance.scroll.y?this.instance.speed=(window.pageYOffset-this.instance.scroll.y)/Math.max(1,Date.now()-this.speedTs):this.instance.speed=0}},{key:"resize",value:function(){Object.entries(this.els).length&&(this.windowHeight=window.innerHeight,this.updateElements())}},{key:"addElements",value:function(){var t=this;this.els={},this.el.querySelectorAll("[data-"+this.name+"]").forEach((function(e,i){e.getBoundingClientRect();var n,r,s,o=e.dataset[t.name+"Class"]||t.class,a="string"==typeof e.dataset[t.name+"Id"]?e.dataset[t.name+"Id"]:i,l="string"==typeof e.dataset[t.name+"Offset"]?e.dataset[t.name+"Offset"].split(","):t.offset,c=e.dataset[t.name+"Repeat"],h=e.dataset[t.name+"Call"],u=e.dataset[t.name+"Target"],f=(s=void 0!==u?document.querySelector("".concat(u)):e).getBoundingClientRect();n=f.top+t.instance.scroll.y,r=f.left+t.instance.scroll.x;var d=n+s.offsetHeight,p=r+s.offsetWidth;c="false"!=c&&(null!=c||t.repeat);var m=t.getRelativeOffset(l),g={el:e,targetEl:s,id:a,class:o,top:n+=m[0],bottom:d-=m[1],left:r,right:p,offset:l,progress:0,repeat:c,inView:!1,call:h};t.els[a]=g,e.classList.contains(o)&&t.setInView(t.els[a],a)}))}},{key:"updateElements",value:function(){var t=this;Object.entries(this.els).forEach((function(e){var i=ar(e,2),n=i[0],r=i[1],s=r.targetEl.getBoundingClientRect().top+t.instance.scroll.y,o=s+r.targetEl.offsetHeight,a=t.getRelativeOffset(r.offset);t.els[n].top=s+a[0],t.els[n].bottom=o-a[1]})),this.hasScrollTicking=!1}},{key:"getRelativeOffset",value:function(t){var e=[0,0];if(t)for(var i=0;i<t.length;i++)"string"==typeof t[i]?t[i].includes("%")?e[i]=parseInt(t[i].replace("%","")*this.windowHeight/100):e[i]=parseInt(t[i]):e[i]=t[i];return e}},{key:"scrollTo",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=parseInt(e.offset)||0,n=!!e.callback&&e.callback;if("string"==typeof t){if("top"===t)t=this.html;else if("bottom"===t)t=this.html.offsetHeight-window.innerHeight;else if(!(t=document.querySelector(t)))return}else if("number"==typeof t)t=parseInt(t);else if(!t||!t.tagName)return void console.warn("`target` parameter is not valid");i="number"!=typeof t?t.getBoundingClientRect().top+i+this.instance.scroll.y:t+i;var r=function(){return parseInt(window.pageYOffset)===parseInt(i)};if(n){if(r())return void n();window.addEventListener("scroll",(function t(){r()&&(window.removeEventListener("scroll",t),n())}))}window.scrollTo({top:i,behavior:0===e.duration?"auto":"smooth"})}},{key:"update",value:function(){this.addElements(),this.detectElements()}},{key:"destroy",value:function(){or(ir(i.prototype),"destroy",this).call(this),window.removeEventListener("scroll",this.checkScroll,!1)}}]),i}(fr)),vr=Object.getOwnPropertySymbols,_r=Object.prototype.hasOwnProperty,yr=Object.prototype.propertyIsEnumerable;var br=function(){try{if(!Object.assign)return!1;var t=new String("abc");if(t[5]="de","5"===Object.getOwnPropertyNames(t)[0])return!1;for(var e={},i=0;i<10;i++)e["_"+String.fromCharCode(i)]=i;var n=Object.getOwnPropertyNames(e).map((function(t){return e[t]}));if("0123456789"!==n.join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(t){r[t]=t})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(t){return!1}}()?Object.assign:function(t,e){for(var i,n,r=function(t){if(null==t)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(t)}(t),s=1;s<arguments.length;s++){for(var o in i=Object(arguments[s]))_r.call(i,o)&&(r[o]=i[o]);if(vr){n=vr(i);for(var a=0;a<n.length;a++)yr.call(i,n[a])&&(r[n[a]]=i[n[a]])}}return r};function wr(){}wr.prototype={on:function(t,e,i){var n=this.e||(this.e={});return(n[t]||(n[t]=[])).push({fn:e,ctx:i}),this},once:function(t,e,i){var n=this;function r(){n.off(t,r),e.apply(i,arguments)}return r._=e,this.on(t,r,i)},emit:function(t){for(var e=[].slice.call(arguments,1),i=((this.e||(this.e={}))[t]||[]).slice(),n=0,r=i.length;n<r;n++)i[n].fn.apply(i[n].ctx,e);return this},off:function(t,e){var i=this.e||(this.e={}),n=i[t],r=[];if(n&&e)for(var s=0,o=n.length;s<o;s++)n[s].fn!==e&&n[s].fn._!==e&&r.push(n[s]);return r.length?i[t]=r:delete i[t],this}};var xr=wr,Tr=pr((function(t,e){(function(){(null!==e?e:this).Lethargy=function(){function t(t,e,i,n){this.stability=null!=t?Math.abs(t):8,this.sensitivity=null!=e?1+Math.abs(e):100,this.tolerance=null!=i?1+Math.abs(i):1.1,this.delay=null!=n?n:150,this.lastUpDeltas=function(){var t,e,i;for(i=[],t=1,e=2*this.stability;1<=e?t<=e:t>=e;1<=e?t++:t--)i.push(null);return i}.call(this),this.lastDownDeltas=function(){var t,e,i;for(i=[],t=1,e=2*this.stability;1<=e?t<=e:t>=e;1<=e?t++:t--)i.push(null);return i}.call(this),this.deltasTimestamp=function(){var t,e,i;for(i=[],t=1,e=2*this.stability;1<=e?t<=e:t>=e;1<=e?t++:t--)i.push(null);return i}.call(this)}return t.prototype.check=function(t){var e;return null!=(t=t.originalEvent||t).wheelDelta?e=t.wheelDelta:null!=t.deltaY?e=-40*t.deltaY:null==t.detail&&0!==t.detail||(e=-40*t.detail),this.deltasTimestamp.push(Date.now()),this.deltasTimestamp.shift(),e>0?(this.lastUpDeltas.push(e),this.lastUpDeltas.shift(),this.isInertia(1)):(this.lastDownDeltas.push(e),this.lastDownDeltas.shift(),this.isInertia(-1))},t.prototype.isInertia=function(t){var e,i,n,r,s,o,a;return null===(e=-1===t?this.lastDownDeltas:this.lastUpDeltas)[0]?t:!(this.deltasTimestamp[2*this.stability-2]+this.delay>Date.now()&&e[0]===e[2*this.stability-1])&&(n=e.slice(0,this.stability),i=e.slice(this.stability,2*this.stability),a=n.reduce((function(t,e){return t+e})),s=i.reduce((function(t,e){return t+e})),o=a/n.length,r=s/i.length,Math.abs(o)<Math.abs(r*this.tolerance)&&this.sensitivity<Math.abs(r)&&t)},t.prototype.showLastUpDeltas=function(){return this.lastUpDeltas},t.prototype.showLastDownDeltas=function(){return this.lastDownDeltas},t}()}).call(dr)})),kr={hasWheelEvent:"onwheel"in document,hasMouseWheelEvent:"onmousewheel"in document,hasTouch:"ontouchstart"in window||window.TouchEvent||window.DocumentTouch&&document instanceof DocumentTouch,hasTouchWin:navigator.msMaxTouchPoints&&navigator.msMaxTouchPoints>1,hasPointer:!!window.navigator.msPointerEnabled,hasKeyDown:"onkeydown"in document,isFirefox:navigator.userAgent.indexOf("Firefox")>-1},Sr=Object.prototype.toString,Er=Object.prototype.hasOwnProperty;function Or(t,e){return function(){return t.apply(e,arguments)}}var Ar=Tr.Lethargy,Mr="virtualscroll",Cr=zr,Dr=37,Pr=38,Rr=39,Lr=40,Br=32;function zr(t){!function(t){if(!t)return console.warn("bindAll requires at least one argument.");var e=Array.prototype.slice.call(arguments,1);if(0===e.length)for(var i in t)Er.call(t,i)&&"function"==typeof t[i]&&"[object Function]"==Sr.call(t[i])&&e.push(i);for(var n=0;n<e.length;n++){var r=e[n];t[r]=Or(t[r],t)}}(this,"_onWheel","_onMouseWheel","_onTouchStart","_onTouchMove","_onKeyDown"),this.el=window,t&&t.el&&(this.el=t.el,delete t.el),this.options=br({mouseMultiplier:1,touchMultiplier:2,firefoxMultiplier:15,keyStep:120,preventTouch:!1,unpreventTouchClass:"vs-touchmove-allowed",limitInertia:!1,useKeyboard:!0,useTouch:!0},t),this.options.limitInertia&&(this._lethargy=new Ar),this._emitter=new xr,this._event={y:0,x:0,deltaX:0,deltaY:0},this.touchStartX=null,this.touchStartY=null,this.bodyTouchAction=null,void 0!==this.options.passive&&(this.listenerOptions={passive:this.options.passive})}function Ir(t,e,i){return(1-i)*t+i*e}function Yr(t){var e={};if(window.getComputedStyle){var i=getComputedStyle(t),n=i.transform||i.webkitTransform||i.mozTransform,r=n.match(/^matrix3d\((.+)\)$/);return r?(e.x=r?parseFloat(r[1].split(", ")[12]):0,e.y=r?parseFloat(r[1].split(", ")[13]):0):(r=n.match(/^matrix\((.+)\)$/),e.x=r?parseFloat(r[1].split(", ")[4]):0,e.y=r?parseFloat(r[1].split(", ")[5]):0),e}}function Fr(t){for(var e=[];t&&t!==document;t=t.parentNode)e.push(t);return e}zr.prototype._notify=function(t){var e=this._event;e.x+=e.deltaX,e.y+=e.deltaY,this._emitter.emit(Mr,{x:e.x,y:e.y,deltaX:e.deltaX,deltaY:e.deltaY,originalEvent:t})},zr.prototype._onWheel=function(t){var e=this.options;if(!this._lethargy||!1!==this._lethargy.check(t)){var i=this._event;i.deltaX=t.wheelDeltaX||-1*t.deltaX,i.deltaY=t.wheelDeltaY||-1*t.deltaY,kr.isFirefox&&1==t.deltaMode&&(i.deltaX*=e.firefoxMultiplier,i.deltaY*=e.firefoxMultiplier),i.deltaX*=e.mouseMultiplier,i.deltaY*=e.mouseMultiplier,this._notify(t)}},zr.prototype._onMouseWheel=function(t){if(!this.options.limitInertia||!1!==this._lethargy.check(t)){var e=this._event;e.deltaX=t.wheelDeltaX?t.wheelDeltaX:0,e.deltaY=t.wheelDeltaY?t.wheelDeltaY:t.wheelDelta,this._notify(t)}},zr.prototype._onTouchStart=function(t){var e=t.targetTouches?t.targetTouches[0]:t;this.touchStartX=e.pageX,this.touchStartY=e.pageY},zr.prototype._onTouchMove=function(t){var e=this.options;e.preventTouch&&!t.target.classList.contains(e.unpreventTouchClass)&&t.preventDefault();var i=this._event,n=t.targetTouches?t.targetTouches[0]:t;i.deltaX=(n.pageX-this.touchStartX)*e.touchMultiplier,i.deltaY=(n.pageY-this.touchStartY)*e.touchMultiplier,this.touchStartX=n.pageX,this.touchStartY=n.pageY,this._notify(t)},zr.prototype._onKeyDown=function(t){var e=this._event;e.deltaX=e.deltaY=0;var i=window.innerHeight-40;switch(t.keyCode){case Dr:case Pr:e.deltaY=this.options.keyStep;break;case Rr:case Lr:e.deltaY=-this.options.keyStep;break;case t.shiftKey:e.deltaY=i;break;case Br:e.deltaY=-i;break;default:return}this._notify(t)},zr.prototype._bind=function(){kr.hasWheelEvent&&this.el.addEventListener("wheel",this._onWheel,this.listenerOptions),kr.hasMouseWheelEvent&&this.el.addEventListener("mousewheel",this._onMouseWheel,this.listenerOptions),kr.hasTouch&&this.options.useTouch&&(this.el.addEventListener("touchstart",this._onTouchStart,this.listenerOptions),this.el.addEventListener("touchmove",this._onTouchMove,this.listenerOptions)),kr.hasPointer&&kr.hasTouchWin&&(this.bodyTouchAction=document.body.style.msTouchAction,document.body.style.msTouchAction="none",this.el.addEventListener("MSPointerDown",this._onTouchStart,!0),this.el.addEventListener("MSPointerMove",this._onTouchMove,!0)),kr.hasKeyDown&&this.options.useKeyboard&&document.addEventListener("keydown",this._onKeyDown)},zr.prototype._unbind=function(){kr.hasWheelEvent&&this.el.removeEventListener("wheel",this._onWheel),kr.hasMouseWheelEvent&&this.el.removeEventListener("mousewheel",this._onMouseWheel),kr.hasTouch&&(this.el.removeEventListener("touchstart",this._onTouchStart),this.el.removeEventListener("touchmove",this._onTouchMove)),kr.hasPointer&&kr.hasTouchWin&&(document.body.style.msTouchAction=this.bodyTouchAction,this.el.removeEventListener("MSPointerDown",this._onTouchStart,!0),this.el.removeEventListener("MSPointerMove",this._onTouchMove,!0)),kr.hasKeyDown&&this.options.useKeyboard&&document.removeEventListener("keydown",this._onKeyDown)},zr.prototype.on=function(t,e){this._emitter.on(Mr,t,e);var i=this._emitter.e;i&&i[Mr]&&1===i[Mr].length&&this._bind()},zr.prototype.off=function(t,e){this._emitter.off(Mr,t,e);var i=this._emitter.e;(!i[Mr]||i[Mr].length<=0)&&this._unbind()},zr.prototype.reset=function(){var t=this._event;t.x=0,t.y=0},zr.prototype.destroy=function(){this._emitter.off(),this._unbind()};var Wr=.1,jr="function"==typeof Float32Array;function Hr(t,e){return 1-3*e+3*t}function Xr(t,e){return 3*e-6*t}function qr(t){return 3*t}function Vr(t,e,i){return((Hr(e,i)*t+Xr(e,i))*t+qr(e))*t}function Nr(t,e,i){return 3*Hr(e,i)*t*t+2*Xr(e,i)*t+qr(e)}function Ur(t){return t}var Kr=function(t,e,i,n){if(!(0<=t&&t<=1&&0<=i&&i<=1))throw new Error("bezier x values must be in [0, 1] range");if(t===e&&i===n)return Ur;for(var r=jr?new Float32Array(11):new Array(11),s=0;s<11;++s)r[s]=Vr(s*Wr,t,i);function o(e){for(var n=0,s=1;10!==s&&r[s]<=e;++s)n+=Wr;--s;var o=n+(e-r[s])/(r[s+1]-r[s])*Wr,a=Nr(o,t,i);return a>=.001?function(t,e,i,n){for(var r=0;r<4;++r){var s=Nr(e,i,n);if(0===s)return e;e-=(Vr(e,i,n)-t)/s}return e}(e,o,t,i):0===a?o:function(t,e,i,n,r){var s,o,a=0;do{(s=Vr(o=e+(i-e)/2,n,r)-t)>0?i=o:e=o}while(Math.abs(s)>1e-7&&++a<10);return o}(e,n,n+Wr,t,i)}return function(t){return 0===t?0:1===t?1:Vr(o(t),e,n)}},Gr=38,$r=40,Qr=32,Zr=9,Jr=33,ts=34,es=36,is=35,ns=function(t){er(i,t);var e=sr(i);function i(){var t,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return Gn(this,i),history.scrollRestoration&&(history.scrollRestoration="manual"),window.scrollTo(0,0),(t=e.call(this,n)).inertia&&(t.lerp=.1*t.inertia),t.isScrolling=!1,t.isDraggingScrollbar=!1,t.isTicking=!1,t.hasScrollTicking=!1,t.parallaxElements={},t.stop=!1,t.scrollbarContainer=n.scrollbarContainer,t.checkKey=t.checkKey.bind(rr(t)),window.addEventListener("keydown",t.checkKey,!1),t}return Qn(i,[{key:"init",value:function(){var t=this;this.html.classList.add(this.smoothClass),this.html.setAttribute("data-".concat(this.name,"-direction"),this.direction),this.instance=tr({delta:{x:this.initPosition.x,y:this.initPosition.y},scroll:{x:this.initPosition.x,y:this.initPosition.y}},this.instance),this.vs=new Cr({el:this.scrollFromAnywhere?document:this.el,mouseMultiplier:navigator.platform.indexOf("Win")>-1?1:.4,firefoxMultiplier:this.firefoxMultiplier,touchMultiplier:this.touchMultiplier,useKeyboard:!1,passive:!0}),this.vs.on((function(e){t.stop||t.isDraggingScrollbar||requestAnimationFrame((function(){t.updateDelta(e),t.isScrolling||t.startScrolling()}))})),this.setScrollLimit(),this.initScrollBar(),this.addSections(),this.addElements(),this.checkScroll(!0),this.transformElements(!0,!0),or(ir(i.prototype),"init",this).call(this)}},{key:"setScrollLimit",value:function(){if(this.instance.limit.y=this.el.offsetHeight-this.windowHeight,"horizontal"===this.direction){for(var t=0,e=this.el.children,i=0;i<e.length;i++)t+=e[i].offsetWidth;this.instance.limit.x=t-this.windowWidth}}},{key:"startScrolling",value:function(){this.startScrollTs=Date.now(),this.isScrolling=!0,this.checkScroll(),this.html.classList.add(this.scrollingClass)}},{key:"stopScrolling",value:function(){cancelAnimationFrame(this.checkScrollRaf),this.startScrollTs=void 0,this.scrollToRaf&&(cancelAnimationFrame(this.scrollToRaf),this.scrollToRaf=null),this.isScrolling=!1,this.instance.scroll.y=Math.round(this.instance.scroll.y),this.html.classList.remove(this.scrollingClass)}},{key:"checkKey",value:function(t){var e=this;if(this.stop)t.keyCode==Zr&&requestAnimationFrame((function(){e.html.scrollTop=0,document.body.scrollTop=0,e.html.scrollLeft=0,document.body.scrollLeft=0}));else{switch(t.keyCode){case Zr:requestAnimationFrame((function(){e.html.scrollTop=0,document.body.scrollTop=0,e.html.scrollLeft=0,document.body.scrollLeft=0,e.scrollTo(document.activeElement,{offset:-window.innerHeight/2})}));break;case Gr:this.isActiveElementScrollSensitive()&&(this.instance.delta[this.directionAxis]-=240);break;case $r:this.isActiveElementScrollSensitive()&&(this.instance.delta[this.directionAxis]+=240);break;case Jr:this.instance.delta[this.directionAxis]-=window.innerHeight;break;case ts:this.instance.delta[this.directionAxis]+=window.innerHeight;break;case es:this.instance.delta[this.directionAxis]-=this.instance.limit[this.directionAxis];break;case is:this.instance.delta[this.directionAxis]+=this.instance.limit[this.directionAxis];break;case Qr:this.isActiveElementScrollSensitive()&&(t.shiftKey?this.instance.delta[this.directionAxis]-=window.innerHeight:this.instance.delta[this.directionAxis]+=window.innerHeight);break;default:return}this.instance.delta[this.directionAxis]<0&&(this.instance.delta[this.directionAxis]=0),this.instance.delta[this.directionAxis]>this.instance.limit[this.directionAxis]&&(this.instance.delta[this.directionAxis]=this.instance.limit[this.directionAxis]),this.stopScrolling(),this.isScrolling=!0,this.checkScroll(),this.html.classList.add(this.scrollingClass)}}},{key:"isActiveElementScrollSensitive",value:function(){return!(document.activeElement instanceof HTMLInputElement||document.activeElement instanceof HTMLTextAreaElement||document.activeElement instanceof HTMLButtonElement||document.activeElement instanceof HTMLSelectElement)}},{key:"checkScroll",value:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(e||this.isScrolling||this.isDraggingScrollbar){this.hasScrollTicking||(this.checkScrollRaf=requestAnimationFrame((function(){return t.checkScroll()})),this.hasScrollTicking=!0),this.updateScroll();var n=Math.abs(this.instance.delta[this.directionAxis]-this.instance.scroll[this.directionAxis]),r=Date.now()-this.startScrollTs;if(!this.animatingScroll&&r>100&&(n<.5&&0!=this.instance.delta[this.directionAxis]||n<.5&&0==this.instance.delta[this.directionAxis])&&this.stopScrolling(),Object.entries(this.sections).forEach((function(i){var n=ar(i,2),r=(n[0],n[1]);r.persistent||t.instance.scroll[t.directionAxis]>r.offset[t.directionAxis]&&t.instance.scroll[t.directionAxis]<r.limit[t.directionAxis]?("horizontal"===t.direction?t.transform(r.el,-t.instance.scroll[t.directionAxis],0):t.transform(r.el,0,-t.instance.scroll[t.directionAxis]),r.inView||(r.inView=!0,r.el.style.opacity=1,r.el.style.pointerEvents="all",r.el.setAttribute("data-".concat(t.name,"-section-inview"),""))):((r.inView||e)&&(r.inView=!1,r.el.style.opacity=0,r.el.style.pointerEvents="none",r.el.removeAttribute("data-".concat(t.name,"-section-inview"))),t.transform(r.el,0,0))})),this.getDirection&&this.addDirection(),this.getSpeed&&(this.addSpeed(),this.speedTs=Date.now()),this.detectElements(),this.transformElements(),this.hasScrollbar){var s=this.instance.scroll[this.directionAxis]/this.instance.limit[this.directionAxis]*this.scrollBarLimit[this.directionAxis];"horizontal"===this.direction?this.transform(this.scrollbarThumb,s,0):this.transform(this.scrollbarThumb,0,s)}or(ir(i.prototype),"checkScroll",this).call(this),this.hasScrollTicking=!1}}},{key:"resize",value:function(){this.windowHeight=window.innerHeight,this.windowWidth=window.innerWidth,this.checkContext(),this.windowMiddle={x:this.windowWidth/2,y:this.windowHeight/2},this.update()}},{key:"updateDelta",value:function(t){var e,i=this[this.context]&&this[this.context].gestureDirection?this[this.context].gestureDirection:this.gestureDirection;e="both"===i?t.deltaX+t.deltaY:"vertical"===i?t.deltaY:"horizontal"===i?t.deltaX:t.deltaY,this.instance.delta[this.directionAxis]-=e*this.multiplier,this.instance.delta[this.directionAxis]<0&&(this.instance.delta[this.directionAxis]=0),this.instance.delta[this.directionAxis]>this.instance.limit[this.directionAxis]&&(this.instance.delta[this.directionAxis]=this.instance.limit[this.directionAxis])}},{key:"updateScroll",value:function(t){this.isScrolling||this.isDraggingScrollbar?this.instance.scroll[this.directionAxis]=Ir(this.instance.scroll[this.directionAxis],this.instance.delta[this.directionAxis],this.lerp):this.instance.scroll[this.directionAxis]>this.instance.limit[this.directionAxis]?this.setScroll(this.instance.scroll[this.directionAxis],this.instance.limit[this.directionAxis]):this.instance.scroll.y<0?this.setScroll(this.instance.scroll[this.directionAxis],0):this.setScroll(this.instance.scroll[this.directionAxis],this.instance.delta[this.directionAxis])}},{key:"addDirection",value:function(){this.instance.delta.y>this.instance.scroll.y?"down"!==this.instance.direction&&(this.instance.direction="down"):this.instance.delta.y<this.instance.scroll.y&&"up"!==this.instance.direction&&(this.instance.direction="up"),this.instance.delta.x>this.instance.scroll.x?"right"!==this.instance.direction&&(this.instance.direction="right"):this.instance.delta.x<this.instance.scroll.x&&"left"!==this.instance.direction&&(this.instance.direction="left")}},{key:"addSpeed",value:function(){this.instance.delta[this.directionAxis]!=this.instance.scroll[this.directionAxis]?this.instance.speed=(this.instance.delta[this.directionAxis]-this.instance.scroll[this.directionAxis])/Math.max(1,Date.now()-this.speedTs):this.instance.speed=0}},{key:"initScrollBar",value:function(){if(this.scrollbar=document.createElement("span"),this.scrollbarThumb=document.createElement("span"),this.scrollbar.classList.add("".concat(this.scrollbarClass)),this.scrollbarThumb.classList.add("".concat(this.scrollbarClass,"_thumb")),this.scrollbar.append(this.scrollbarThumb),this.scrollbarContainer?this.scrollbarContainer.append(this.scrollbar):document.body.append(this.scrollbar),this.getScrollBar=this.getScrollBar.bind(this),this.releaseScrollBar=this.releaseScrollBar.bind(this),this.moveScrollBar=this.moveScrollBar.bind(this),this.scrollbarThumb.addEventListener("mousedown",this.getScrollBar),window.addEventListener("mouseup",this.releaseScrollBar),window.addEventListener("mousemove",this.moveScrollBar),this.hasScrollbar=!1,"horizontal"==this.direction){if(this.instance.limit.x+this.windowWidth<=this.windowWidth)return}else if(this.instance.limit.y+this.windowHeight<=this.windowHeight)return;this.hasScrollbar=!0,this.scrollbarBCR=this.scrollbar.getBoundingClientRect(),this.scrollbarHeight=this.scrollbarBCR.height,this.scrollbarWidth=this.scrollbarBCR.width,"horizontal"===this.direction?this.scrollbarThumb.style.width="".concat(this.scrollbarWidth*this.scrollbarWidth/(this.instance.limit.x+this.scrollbarWidth),"px"):this.scrollbarThumb.style.height="".concat(this.scrollbarHeight*this.scrollbarHeight/(this.instance.limit.y+this.scrollbarHeight),"px"),this.scrollbarThumbBCR=this.scrollbarThumb.getBoundingClientRect(),this.scrollBarLimit={x:this.scrollbarWidth-this.scrollbarThumbBCR.width,y:this.scrollbarHeight-this.scrollbarThumbBCR.height}}},{key:"reinitScrollBar",value:function(){if(this.hasScrollbar=!1,"horizontal"==this.direction){if(this.instance.limit.x+this.windowWidth<=this.windowWidth)return}else if(this.instance.limit.y+this.windowHeight<=this.windowHeight)return;this.hasScrollbar=!0,this.scrollbarBCR=this.scrollbar.getBoundingClientRect(),this.scrollbarHeight=this.scrollbarBCR.height,this.scrollbarWidth=this.scrollbarBCR.width,"horizontal"===this.direction?this.scrollbarThumb.style.width="".concat(this.scrollbarWidth*this.scrollbarWidth/(this.instance.limit.x+this.scrollbarWidth),"px"):this.scrollbarThumb.style.height="".concat(this.scrollbarHeight*this.scrollbarHeight/(this.instance.limit.y+this.scrollbarHeight),"px"),this.scrollbarThumbBCR=this.scrollbarThumb.getBoundingClientRect(),this.scrollBarLimit={x:this.scrollbarWidth-this.scrollbarThumbBCR.width,y:this.scrollbarHeight-this.scrollbarThumbBCR.height}}},{key:"destroyScrollBar",value:function(){this.scrollbarThumb.removeEventListener("mousedown",this.getScrollBar),window.removeEventListener("mouseup",this.releaseScrollBar),window.removeEventListener("mousemove",this.moveScrollBar),this.scrollbar.remove()}},{key:"getScrollBar",value:function(t){this.isDraggingScrollbar=!0,this.checkScroll(),this.html.classList.remove(this.scrollingClass),this.html.classList.add(this.draggingClass)}},{key:"releaseScrollBar",value:function(t){this.isDraggingScrollbar=!1,this.isScrolling&&this.html.classList.add(this.scrollingClass),this.html.classList.remove(this.draggingClass)}},{key:"moveScrollBar",value:function(t){var e=this;this.isDraggingScrollbar&&requestAnimationFrame((function(){var i=100*(t.clientX-e.scrollbarBCR.left)/e.scrollbarWidth*e.instance.limit.x/100,n=100*(t.clientY-e.scrollbarBCR.top)/e.scrollbarHeight*e.instance.limit.y/100;n>0&&n<e.instance.limit.y&&(e.instance.delta.y=n),i>0&&i<e.instance.limit.x&&(e.instance.delta.x=i)}))}},{key:"addElements",value:function(){var t=this;this.els={},this.parallaxElements={},this.el.querySelectorAll("[data-".concat(this.name,"]")).forEach((function(e,i){var n,r,s,o=Fr(e),a=Object.entries(t.sections).map((function(t){var e=ar(t,2);e[0];return e[1]})).find((function(t){return o.includes(t.el)})),l=e.dataset[t.name+"Class"]||t.class,c="string"==typeof e.dataset[t.name+"Id"]?e.dataset[t.name+"Id"]:"el"+i,h=e.dataset[t.name+"Repeat"],u=e.dataset[t.name+"Call"],f=e.dataset[t.name+"Position"],d=e.dataset[t.name+"Delay"],p=e.dataset[t.name+"Direction"],m="string"==typeof e.dataset[t.name+"Sticky"],g=!!e.dataset[t.name+"Speed"]&&parseFloat(e.dataset[t.name+"Speed"])/10,v="string"==typeof e.dataset[t.name+"Offset"]?e.dataset[t.name+"Offset"].split(","):t.offset,_=e.dataset[t.name+"Target"],y=(s=void 0!==_?document.querySelector("".concat(_)):e).getBoundingClientRect();null===a||a.inView?(n=y.top+t.instance.scroll.y-Yr(s).y,r=y.left+t.instance.scroll.x-Yr(s).x):(n=y.top-Yr(a.el).y-Yr(s).y,r=y.left-Yr(a.el).x-Yr(s).x);var b=n+s.offsetHeight,w=r+s.offsetWidth,x={x:(w-r)/2+r,y:(b-n)/2+n};if(m){var T=e.getBoundingClientRect(),k=T.top,S=T.left,E={x:S-r,y:k-n};n+=window.innerHeight,r+=window.innerWidth,b=k+s.offsetHeight-e.offsetHeight-E[t.directionAxis],x={x:((w=S+s.offsetWidth-e.offsetWidth-E[t.directionAxis])-r)/2+r,y:(b-n)/2+n}}h="false"!=h&&(null!=h||t.repeat);var O=[0,0];if(v)if("horizontal"===t.direction){for(var A=0;A<v.length;A++)"string"==typeof v[A]?v[A].includes("%")?O[A]=parseInt(v[A].replace("%","")*t.windowWidth/100):O[A]=parseInt(v[A]):O[A]=v[A];r+=O[0],w-=O[1]}else{for(A=0;A<v.length;A++)"string"==typeof v[A]?v[A].includes("%")?O[A]=parseInt(v[A].replace("%","")*t.windowHeight/100):O[A]=parseInt(v[A]):O[A]=v[A];n+=O[0],b-=O[1]}var M={el:e,id:c,class:l,section:a,top:n,middle:x,bottom:b,left:r,right:w,offset:v,progress:0,repeat:h,inView:!1,call:u,speed:g,delay:d,position:f,target:s,direction:p,sticky:m};t.els[c]=M,e.classList.contains(l)&&t.setInView(t.els[c],c),(!1!==g||m)&&(t.parallaxElements[c]=M)}))}},{key:"addSections",value:function(){var t=this;this.sections={};var e=this.el.querySelectorAll("[data-".concat(this.name,"-section]"));0===e.length&&(e=[this.el]),e.forEach((function(e,i){var n="string"==typeof e.dataset[t.name+"Id"]?e.dataset[t.name+"Id"]:"section"+i,r=e.getBoundingClientRect(),s={x:r.left-1.5*window.innerWidth-Yr(e).x,y:r.top-1.5*window.innerHeight-Yr(e).y},o={x:s.x+r.width+2*window.innerWidth,y:s.y+r.height+2*window.innerHeight},a="string"==typeof e.dataset[t.name+"Persistent"];e.setAttribute("data-scroll-section-id",n);var l={el:e,offset:s,limit:o,inView:!1,persistent:a,id:n};t.sections[n]=l}))}},{key:"transform",value:function(t,e,i,n){var r;if(n){var s=Yr(t),o=Ir(s.x,e,n),a=Ir(s.y,i,n);r="matrix3d(1,0,0.00,0,0.00,1,0.00,0,0,0,1,0,".concat(o,",").concat(a,",0,1)")}else r="matrix3d(1,0,0.00,0,0.00,1,0.00,0,0,0,1,0,".concat(e,",").concat(i,",0,1)");t.style.webkitTransform=r,t.style.msTransform=r,t.style.transform=r}},{key:"transformElements",value:function(t){var e=this,i=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=this.instance.scroll.x+this.windowWidth,r=this.instance.scroll.y+this.windowHeight,s={x:this.instance.scroll.x+this.windowMiddle.x,y:this.instance.scroll.y+this.windowMiddle.y};Object.entries(this.parallaxElements).forEach((function(o){var a=ar(o,2),l=(a[0],a[1]),c=!1;if(t&&(c=0),l.inView||i)switch(l.position){case"top":case"left":c=e.instance.scroll[e.directionAxis]*-l.speed;break;case"elementTop":c=(r-l.top)*-l.speed;break;case"bottom":c=(e.instance.limit[e.directionAxis]-r+e.windowHeight)*l.speed;break;case"elementLeft":c=(n-l.left)*-l.speed;break;case"right":c=(e.instance.limit[e.directionAxis]-n+e.windowHeight)*l.speed;break;default:c=(s[e.directionAxis]-l.middle[e.directionAxis])*-l.speed}l.sticky&&(c=l.inView?"horizontal"===e.direction?e.instance.scroll.x-l.left+window.innerWidth:e.instance.scroll.y-l.top+window.innerHeight:"horizontal"===e.direction?e.instance.scroll.x<l.left-window.innerWidth&&e.instance.scroll.x<l.left-window.innerWidth/2?0:e.instance.scroll.x>l.right&&e.instance.scroll.x>l.right+100&&l.right-l.left+window.innerWidth:e.instance.scroll.y<l.top-window.innerHeight&&e.instance.scroll.y<l.top-window.innerHeight/2?0:e.instance.scroll.y>l.bottom&&e.instance.scroll.y>l.bottom+100&&l.bottom-l.top+window.innerHeight),!1!==c&&("horizontal"===l.direction||"horizontal"===e.direction&&"vertical"!==l.direction?e.transform(l.el,c,0,!t&&l.delay):e.transform(l.el,0,c,!t&&l.delay))}))}},{key:"scrollTo",value:function(t){var e=this,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=parseInt(i.offset)||0,r=isNaN(parseInt(i.duration))?1e3:parseInt(i.duration),s=i.easing||[.25,0,.35,1],o=!!i.disableLerp,a=!!i.callback&&i.callback;if(s=Kr.apply(void 0,lr(s)),"string"==typeof t){if("top"===t)t=0;else if("bottom"===t)t=this.instance.limit.y;else if("left"===t)t=0;else if("right"===t)t=this.instance.limit.x;else if(!(t=document.querySelector(t)))return}else if("number"==typeof t)t=parseInt(t);else if(!t||!t.tagName)return void console.warn("`target` parameter is not valid");if("number"!=typeof t){if(!Fr(t).includes(this.el))return;var l=t.getBoundingClientRect(),c=l.top,h=l.left,u=Fr(t).find((function(t){return Object.entries(e.sections).map((function(t){var e=ar(t,2);e[0];return e[1]})).find((function(e){return e.el==t}))})),f=0;f=u?Yr(u)[this.directionAxis]:-this.instance.scroll[this.directionAxis],n="horizontal"===this.direction?h+n-f:c+n-f}else n=t+n;var d=parseFloat(this.instance.delta[this.directionAxis]),p=Math.max(0,Math.min(n,this.instance.limit[this.directionAxis]))-d,m=function(t){o?"horizontal"===e.direction?e.setScroll(d+p*t,e.instance.delta.y):e.setScroll(e.instance.delta.x,d+p*t):e.instance.delta[e.directionAxis]=d+p*t};this.animatingScroll=!0,this.stopScrolling(),this.startScrolling();var g=Date.now();!function t(){var i=(Date.now()-g)/r;i>1?(m(1),e.animatingScroll=!1,0==r&&e.update(),a&&a()):(e.scrollToRaf=requestAnimationFrame(t),m(s(i)))}()}},{key:"update",value:function(){this.setScrollLimit(),this.addSections(),this.addElements(),this.detectElements(),this.updateScroll(),this.transformElements(!0),this.reinitScrollBar(),this.checkScroll(!0)}},{key:"startScroll",value:function(){this.stop=!1}},{key:"stopScroll",value:function(){this.stop=!0}},{key:"setScroll",value:function(t,e){this.instance=tr(tr({},this.instance),{},{scroll:{x:t,y:e},delta:{x:t,y:e},speed:0})}},{key:"destroy",value:function(){or(ir(i.prototype),"destroy",this).call(this),this.stopScrolling(),this.html.classList.remove(this.smoothClass),this.vs.destroy(),this.destroyScrollBar(),window.removeEventListener("keydown",this.checkKey,!1)}}]),i}(fr);const rs=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};Gn(this,t),this.options=e,Object.assign(this,ur,e),this.smartphone=ur.smartphone,e.smartphone&&Object.assign(this.smartphone,e.smartphone),this.tablet=ur.tablet,e.tablet&&Object.assign(this.tablet,e.tablet),this.smooth||"horizontal"!=this.direction||console.warn("🚨 `smooth:false` & `horizontal` direction are not yet compatible"),this.tablet.smooth||"horizontal"!=this.tablet.direction||console.warn("🚨 `smooth:false` & `horizontal` direction are not yet compatible (tablet)"),this.smartphone.smooth||"horizontal"!=this.smartphone.direction||console.warn("🚨 `smooth:false` & `horizontal` direction are not yet compatible (smartphone)"),this.init()}return Qn(t,[{key:"init",value:function(){if(this.options.isMobile=/Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||"MacIntel"===navigator.platform&&navigator.maxTouchPoints>1||window.innerWidth<this.tablet.breakpoint,this.options.isTablet=this.options.isMobile&&window.innerWidth>=this.tablet.breakpoint,this.smooth&&!this.options.isMobile||this.tablet.smooth&&this.options.isTablet||this.smartphone.smooth&&this.options.isMobile&&!this.options.isTablet?this.scroll=new ns(this.options):this.scroll=new gr(this.options),this.scroll.init(),window.location.hash){var t=window.location.hash.slice(1,window.location.hash.length),e=document.getElementById(t);e&&this.scroll.scrollTo(e)}}},{key:"update",value:function(){this.scroll.update()}},{key:"start",value:function(){this.scroll.startScroll()}},{key:"stop",value:function(){this.scroll.stopScroll()}},{key:"scrollTo",value:function(t,e){this.scroll.scrollTo(t,e)}},{key:"setScroll",value:function(t,e){this.scroll.setScroll(t,e)}},{key:"on",value:function(t,e){this.scroll.setEvents(t,e)}},{key:"off",value:function(t,e){this.scroll.unsetEvents(t,e)}},{key:"destroy",value:function(){this.scroll.destroy()}}]),t}();function ss(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var os,as,ls,cs,hs,us,fs,ds,ps,ms,gs,vs,_s,ys=function(){return os||"undefined"!=typeof window&&(os=window.gsap)&&os.registerPlugin&&os},bs=1,ws=[],xs=[],Ts=[],ks=Date.now,Ss=function(t,e){return e},Es=function(t,e){return~Ts.indexOf(t)&&Ts[Ts.indexOf(t)+1][e]},Os=function(t){return!!~ms.indexOf(t)},As=function(t,e,i,n,r){return t.addEventListener(e,i,{passive:!1!==n,capture:!!r})},Ms=function(t,e,i,n){return t.removeEventListener(e,i,!!n)},Cs="scrollLeft",Ds="scrollTop",Ps=function(){return gs&&gs.isPressed||xs.cache++},Rs=function(t,e){var i=function i(n){if(n||0===n){bs&&(ls.history.scrollRestoration="manual");var r=gs&&gs.isPressed;n=i.v=Math.round(n)||(gs&&gs.iOS?1:0),t(n),i.cacheID=xs.cache,r&&Ss("ss",n)}else(e||xs.cache!==i.cacheID||Ss("ref"))&&(i.cacheID=xs.cache,i.v=t());return i.v+i.offset};return i.offset=0,t&&i},Ls={s:Cs,p:"left",p2:"Left",os:"right",os2:"Right",d:"width",d2:"Width",a:"x",sc:Rs((function(t){return arguments.length?ls.scrollTo(t,Bs.sc()):ls.pageXOffset||cs[Cs]||hs[Cs]||us[Cs]||0}))},Bs={s:Ds,p:"top",p2:"Top",os:"bottom",os2:"Bottom",d:"height",d2:"Height",a:"y",op:Ls,sc:Rs((function(t){return arguments.length?ls.scrollTo(Ls.sc(),t):ls.pageYOffset||cs[Ds]||hs[Ds]||us[Ds]||0}))},zs=function(t,e){return(e&&e._ctx&&e._ctx.selector||os.utils.toArray)(t)[0]||("string"==typeof t&&!1!==os.config().nullTargetWarn?console.warn("Element not found:",t):null)},Is=function(t,e){var i=e.s,n=e.sc;Os(t)&&(t=cs.scrollingElement||hs);var r=xs.indexOf(t),s=n===Bs.sc?1:2;!~r&&(r=xs.push(t)-1),xs[r+s]||As(t,"scroll",Ps);var o=xs[r+s],a=o||(xs[r+s]=Rs(Es(t,i),!0)||(Os(t)?n:Rs((function(e){return arguments.length?t[i]=e:t[i]}))));return a.target=t,o||(a.smooth="smooth"===os.getProperty(t,"scrollBehavior")),a},Ys=function(t,e,i){var n=t,r=t,s=ks(),o=s,a=e||50,l=Math.max(500,3*a),c=function(t,e){var l=ks();e||l-s>a?(r=n,n=t,o=s,s=l):i?n+=t:n=r+(t-r)/(l-o)*(s-o)};return{update:c,reset:function(){r=n=i?0:n,o=s=0},getVelocity:function(t){var e=o,a=r,h=ks();return(t||0===t)&&t!==n&&c(t),s===o||h-o>l?0:(n+(i?a:-a))/((i?h:s)-e)*1e3}}},Fs=function(t,e){return e&&!t._gsapAllow&&t.preventDefault(),t.changedTouches?t.changedTouches[0]:t},Ws=function(t){var e=Math.max.apply(Math,t),i=Math.min.apply(Math,t);return Math.abs(e)>=Math.abs(i)?e:i},js=function(){var t,e,i,n;(ps=os.core.globals().ScrollTrigger)&&ps.core&&(t=ps.core,e=t.bridge||{},i=t._scrollers,n=t._proxies,i.push.apply(i,xs),n.push.apply(n,Ts),xs=i,Ts=n,Ss=function(t,i){return e[t](i)})},Hs=function(t){return os=t||ys(),!as&&os&&"undefined"!=typeof document&&document.body&&(ls=window,cs=document,hs=cs.documentElement,us=cs.body,ms=[ls,cs,hs,us],os.utils.clamp,_s=os.core.context||function(){},ds="onpointerenter"in us?"pointer":"mouse",fs=Xs.isTouch=ls.matchMedia&&ls.matchMedia("(hover: none), (pointer: coarse)").matches?1:"ontouchstart"in ls||navigator.maxTouchPoints>0||navigator.msMaxTouchPoints>0?2:0,vs=Xs.eventTypes=("ontouchstart"in hs?"touchstart,touchmove,touchcancel,touchend":"onpointerdown"in hs?"pointerdown,pointermove,pointercancel,pointerup":"mousedown,mousemove,mouseup,mouseup").split(","),setTimeout((function(){return bs=0}),500),js(),as=1),as};Ls.op=Bs,xs.cache=0;var Xs=function(){function t(t){this.init(t)}var e,i,n;return t.prototype.init=function(t){as||Hs(os)||console.warn("Please gsap.registerPlugin(Observer)"),ps||js();var e=t.tolerance,i=t.dragMinimum,n=t.type,r=t.target,s=t.lineHeight,o=t.debounce,a=t.preventDefault,l=t.onStop,c=t.onStopDelay,h=t.ignore,u=t.wheelSpeed,f=t.event,d=t.onDragStart,p=t.onDragEnd,m=t.onDrag,g=t.onPress,v=t.onRelease,_=t.onRight,y=t.onLeft,b=t.onUp,w=t.onDown,x=t.onChangeX,T=t.onChangeY,k=t.onChange,S=t.onToggleX,E=t.onToggleY,O=t.onHover,A=t.onHoverEnd,M=t.onMove,C=t.ignoreCheck,D=t.isNormalizer,P=t.onGestureStart,R=t.onGestureEnd,L=t.onWheel,B=t.onEnable,z=t.onDisable,I=t.onClick,Y=t.scrollSpeed,F=t.capture,W=t.allowClicks,j=t.lockAxis,H=t.onLockAxis;this.target=r=zs(r)||hs,this.vars=t,h&&(h=os.utils.toArray(h)),e=e||1e-9,i=i||0,u=u||1,Y=Y||1,n=n||"wheel,touch,pointer",o=!1!==o,s||(s=parseFloat(ls.getComputedStyle(us).lineHeight)||22);var X,q,V,N,U,K,G,$=this,Q=0,Z=0,J=t.passive||!a,tt=Is(r,Ls),et=Is(r,Bs),it=tt(),nt=et(),rt=~n.indexOf("touch")&&!~n.indexOf("pointer")&&"pointerdown"===vs[0],st=Os(r),ot=r.ownerDocument||cs,at=[0,0,0],lt=[0,0,0],ct=0,ht=function(){return ct=ks()},ut=function(t,e){return($.event=t)&&h&&~h.indexOf(t.target)||e&&rt&&"touch"!==t.pointerType||C&&C(t,e)},ft=function(){var t=$.deltaX=Ws(at),i=$.deltaY=Ws(lt),n=Math.abs(t)>=e,r=Math.abs(i)>=e;k&&(n||r)&&k($,t,i,at,lt),n&&(_&&$.deltaX>0&&_($),y&&$.deltaX<0&&y($),x&&x($),S&&$.deltaX<0!=Q<0&&S($),Q=$.deltaX,at[0]=at[1]=at[2]=0),r&&(w&&$.deltaY>0&&w($),b&&$.deltaY<0&&b($),T&&T($),E&&$.deltaY<0!=Z<0&&E($),Z=$.deltaY,lt[0]=lt[1]=lt[2]=0),(N||V)&&(M&&M($),V&&(m($),V=!1),N=!1),K&&!(K=!1)&&H&&H($),U&&(L($),U=!1),X=0},dt=function(t,e,i){at[i]+=t,lt[i]+=e,$._vx.update(t),$._vy.update(e),o?X||(X=requestAnimationFrame(ft)):ft()},pt=function(t,e){j&&!G&&($.axis=G=Math.abs(t)>Math.abs(e)?"x":"y",K=!0),"y"!==G&&(at[2]+=t,$._vx.update(t,!0)),"x"!==G&&(lt[2]+=e,$._vy.update(e,!0)),o?X||(X=requestAnimationFrame(ft)):ft()},mt=function(t){if(!ut(t,1)){var e=(t=Fs(t,a)).clientX,n=t.clientY,r=e-$.x,s=n-$.y,o=$.isDragging;$.x=e,$.y=n,(o||Math.abs($.startX-e)>=i||Math.abs($.startY-n)>=i)&&(m&&(V=!0),o||($.isDragging=!0),pt(r,s),o||d&&d($))}},gt=$.onPress=function(t){ut(t,1)||t&&t.button||($.axis=G=null,q.pause(),$.isPressed=!0,t=Fs(t),Q=Z=0,$.startX=$.x=t.clientX,$.startY=$.y=t.clientY,$._vx.reset(),$._vy.reset(),As(D?r:ot,vs[1],mt,J,!0),$.deltaX=$.deltaY=0,g&&g($))},vt=$.onRelease=function(t){if(!ut(t,1)){Ms(D?r:ot,vs[1],mt,!0);var e=!isNaN($.y-$.startY),i=$.isDragging,n=i&&(Math.abs($.x-$.startX)>3||Math.abs($.y-$.startY)>3),s=Fs(t);!n&&e&&($._vx.reset(),$._vy.reset(),a&&W&&os.delayedCall(.08,(function(){if(ks()-ct>300&&!t.defaultPrevented)if(t.target.click)t.target.click();else if(ot.createEvent){var e=ot.createEvent("MouseEvents");e.initMouseEvent("click",!0,!0,ls,1,s.screenX,s.screenY,s.clientX,s.clientY,!1,!1,!1,!1,0,null),t.target.dispatchEvent(e)}}))),$.isDragging=$.isGesturing=$.isPressed=!1,l&&i&&!D&&q.restart(!0),p&&i&&p($),v&&v($,n)}},_t=function(t){return t.touches&&t.touches.length>1&&($.isGesturing=!0)&&P(t,$.isDragging)},yt=function(){return($.isGesturing=!1)||R($)},bt=function(t){if(!ut(t)){var e=tt(),i=et();dt((e-it)*Y,(i-nt)*Y,1),it=e,nt=i,l&&q.restart(!0)}},wt=function(t){if(!ut(t)){t=Fs(t,a),L&&(U=!0);var e=(1===t.deltaMode?s:2===t.deltaMode?ls.innerHeight:1)*u;dt(t.deltaX*e,t.deltaY*e,0),l&&!D&&q.restart(!0)}},xt=function(t){if(!ut(t)){var e=t.clientX,i=t.clientY,n=e-$.x,r=i-$.y;$.x=e,$.y=i,N=!0,l&&q.restart(!0),(n||r)&&pt(n,r)}},Tt=function(t){$.event=t,O($)},kt=function(t){$.event=t,A($)},St=function(t){return ut(t)||Fs(t,a)&&I($)};q=$._dc=os.delayedCall(c||.25,(function(){$._vx.reset(),$._vy.reset(),q.pause(),l&&l($)})).pause(),$.deltaX=$.deltaY=0,$._vx=Ys(0,50,!0),$._vy=Ys(0,50,!0),$.scrollX=tt,$.scrollY=et,$.isDragging=$.isGesturing=$.isPressed=!1,_s(this),$.enable=function(t){return $.isEnabled||(As(st?ot:r,"scroll",Ps),n.indexOf("scroll")>=0&&As(st?ot:r,"scroll",bt,J,F),n.indexOf("wheel")>=0&&As(r,"wheel",wt,J,F),(n.indexOf("touch")>=0&&fs||n.indexOf("pointer")>=0)&&(As(r,vs[0],gt,J,F),As(ot,vs[2],vt),As(ot,vs[3],vt),W&&As(r,"click",ht,!0,!0),I&&As(r,"click",St),P&&As(ot,"gesturestart",_t),R&&As(ot,"gestureend",yt),O&&As(r,ds+"enter",Tt),A&&As(r,ds+"leave",kt),M&&As(r,ds+"move",xt)),$.isEnabled=!0,t&&t.type&&gt(t),B&&B($)),$},$.disable=function(){$.isEnabled&&(ws.filter((function(t){return t!==$&&Os(t.target)})).length||Ms(st?ot:r,"scroll",Ps),$.isPressed&&($._vx.reset(),$._vy.reset(),Ms(D?r:ot,vs[1],mt,!0)),Ms(st?ot:r,"scroll",bt,F),Ms(r,"wheel",wt,F),Ms(r,vs[0],gt,F),Ms(ot,vs[2],vt),Ms(ot,vs[3],vt),Ms(r,"click",ht,!0),Ms(r,"click",St),Ms(ot,"gesturestart",_t),Ms(ot,"gestureend",yt),Ms(r,ds+"enter",Tt),Ms(r,ds+"leave",kt),Ms(r,ds+"move",xt),$.isEnabled=$.isPressed=$.isDragging=!1,z&&z($))},$.kill=$.revert=function(){$.disable();var t=ws.indexOf($);t>=0&&ws.splice(t,1),gs===$&&(gs=0)},ws.push($),D&&Os(r)&&(gs=$),$.enable(f)},e=t,(i=[{key:"velocityX",get:function(){return this._vx.getVelocity()}},{key:"velocityY",get:function(){return this._vy.getVelocity()}}])&&ss(e.prototype,i),n&&ss(e,n),t}();Xs.version="3.12.5",Xs.create=function(t){return new Xs(t)},Xs.register=Hs,Xs.getAll=function(){return ws.slice()},Xs.getById=function(t){return ws.filter((function(e){return e.vars.id===t}))[0]},ys()&&os.registerPlugin(Xs);var qs,Vs,Ns,Us,Ks,Gs,$s,Qs,Zs,Js,to,eo,io,no,ro,so,oo,ao,lo,co,ho,uo,fo,po,mo,go,vo,_o,yo,bo,wo,xo,To,ko,So,Eo,Oo,Ao,Mo=1,Co=Date.now,Do=Co(),Po=0,Ro=0,Lo=function(t,e,i){var n=Ko(t)&&("clamp("===t.substr(0,6)||t.indexOf("max")>-1);return i["_"+e+"Clamp"]=n,n?t.substr(6,t.length-7):t},Bo=function(t,e){return!e||Ko(t)&&"clamp("===t.substr(0,6)?t:"clamp("+t+")"},zo=function t(){return Ro&&requestAnimationFrame(t)},Io=function(){return no=1},Yo=function(){return no=0},Fo=function(t){return t},Wo=function(t){return Math.round(1e5*t)/1e5||0},jo=function(){return"undefined"!=typeof window},Ho=function(){return qs||jo()&&(qs=window.gsap)&&qs.registerPlugin&&qs},Xo=function(t){return!!~$s.indexOf(t)},qo=function(t){return("Height"===t?wo:Ns["inner"+t])||Ks["client"+t]||Gs["client"+t]},Vo=function(t){return Es(t,"getBoundingClientRect")||(Xo(t)?function(){return rl.width=Ns.innerWidth,rl.height=wo,rl}:function(){return va(t)})},No=function(t,e){var i=e.s,n=e.d2,r=e.d,s=e.a;return Math.max(0,(i="scroll"+n)&&(s=Es(t,i))?s()-Vo(t)()[r]:Xo(t)?(Ks[i]||Gs[i])-qo(n):t[i]-t["offset"+n])},Uo=function(t,e){for(var i=0;i<lo.length;i+=3)(!e||~e.indexOf(lo[i+1]))&&t(lo[i],lo[i+1],lo[i+2])},Ko=function(t){return"string"==typeof t},Go=function(t){return"function"==typeof t},$o=function(t){return"number"==typeof t},Qo=function(t){return"object"==typeof t},Zo=function(t,e,i){return t&&t.progress(e?0:1)&&i&&t.pause()},Jo=function(t,e){if(t.enabled){var i=t._ctx?t._ctx.add((function(){return e(t)})):e(t);i&&i.totalTime&&(t.callbackAnimation=i)}},ta=Math.abs,ea="left",ia="right",na="bottom",ra="width",sa="height",oa="Right",aa="Left",la="Top",ca="Bottom",ha="padding",ua="margin",fa="Width",da="Height",pa="px",ma=function(t){return Ns.getComputedStyle(t)},ga=function(t,e){for(var i in e)i in t||(t[i]=e[i]);return t},va=function(t,e){var i=e&&"matrix(1, 0, 0, 1, 0, 0)"!==ma(t)[ro]&&qs.to(t,{x:0,y:0,xPercent:0,yPercent:0,rotation:0,rotationX:0,rotationY:0,scale:1,skewX:0,skewY:0}).progress(1),n=t.getBoundingClientRect();return i&&i.progress(0).kill(),n},_a=function(t,e){var i=e.d2;return t["offset"+i]||t["client"+i]||0},ya=function(t){var e,i=[],n=t.labels,r=t.duration();for(e in n)i.push(n[e]/r);return i},ba=function(t){var e=qs.utils.snap(t),i=Array.isArray(t)&&t.slice(0).sort((function(t,e){return t-e}));return i?function(t,n,r){var s;if(void 0===r&&(r=.001),!n)return e(t);if(n>0){for(t-=r,s=0;s<i.length;s++)if(i[s]>=t)return i[s];return i[s-1]}for(s=i.length,t+=r;s--;)if(i[s]<=t)return i[s];return i[0]}:function(i,n,r){void 0===r&&(r=.001);var s=e(i);return!n||Math.abs(s-i)<r||s-i<0==n<0?s:e(n<0?i-t:i+t)}},wa=function(t,e,i,n){return i.split(",").forEach((function(i){return t(e,i,n)}))},xa=function(t,e,i,n,r){return t.addEventListener(e,i,{passive:!n,capture:!!r})},Ta=function(t,e,i,n){return t.removeEventListener(e,i,!!n)},ka=function(t,e,i){(i=i&&i.wheelHandler)&&(t(e,"wheel",i),t(e,"touchmove",i))},Sa={startColor:"green",endColor:"red",indent:0,fontSize:"16px",fontWeight:"normal"},Ea={toggleActions:"play",anticipatePin:0},Oa={top:0,left:0,center:.5,bottom:1,right:1},Aa=function(t,e){if(Ko(t)){var i=t.indexOf("="),n=~i?+(t.charAt(i-1)+1)*parseFloat(t.substr(i+1)):0;~i&&(t.indexOf("%")>i&&(n*=e/100),t=t.substr(0,i-1)),t=n+(t in Oa?Oa[t]*e:~t.indexOf("%")?parseFloat(t)*e/100:parseFloat(t)||0)}return t},Ma=function(t,e,i,n,r,s,o,a){var l=r.startColor,c=r.endColor,h=r.fontSize,u=r.indent,f=r.fontWeight,d=Us.createElement("div"),p=Xo(i)||"fixed"===Es(i,"pinType"),m=-1!==t.indexOf("scroller"),g=p?Gs:i,v=-1!==t.indexOf("start"),_=v?l:c,y="border-color:"+_+";font-size:"+h+";color:"+_+";font-weight:"+f+";pointer-events:none;white-space:nowrap;font-family:sans-serif,Arial;z-index:1000;padding:4px 8px;border-width:0;border-style:solid;";return y+="position:"+((m||a)&&p?"fixed;":"absolute;"),(m||a||!p)&&(y+=(n===Bs?ia:na)+":"+(s+parseFloat(u))+"px;"),o&&(y+="box-sizing:border-box;text-align:left;width:"+o.offsetWidth+"px;"),d._isStart=v,d.setAttribute("class","gsap-marker-"+t+(e?" marker-"+e:"")),d.style.cssText=y,d.innerText=e||0===e?t+"-"+e:t,g.children[0]?g.insertBefore(d,g.children[0]):g.appendChild(d),d._offset=d["offset"+n.op.d2],Ca(d,0,n,v),d},Ca=function(t,e,i,n){var r={display:"block"},s=i[n?"os2":"p2"],o=i[n?"p2":"os2"];t._isFlipped=n,r[i.a+"Percent"]=n?-100:0,r[i.a]=n?"1px":0,r["border"+s+fa]=1,r["border"+o+fa]=0,r[i.p]=e+"px",qs.set(t,r)},Da=[],Pa={},Ra=function(){return Co()-Po>34&&(So||(So=requestAnimationFrame(Qa)))},La=function(){(!fo||!fo.isPressed||fo.startX>Gs.clientWidth)&&(xs.cache++,fo?So||(So=requestAnimationFrame(Qa)):Qa(),Po||Wa("scrollStart"),Po=Co())},Ba=function(){go=Ns.innerWidth,mo=Ns.innerHeight},za=function(){xs.cache++,!io&&!uo&&!Us.fullscreenElement&&!Us.webkitFullscreenElement&&(!po||go!==Ns.innerWidth||Math.abs(Ns.innerHeight-mo)>.25*Ns.innerHeight)&&Qs.restart(!0)},Ia={},Ya=[],Fa=function t(){return Ta(ul,"scrollEnd",t)||Ka(!0)},Wa=function(t){return Ia[t]&&Ia[t].map((function(t){return t()}))||Ya},ja=[],Ha=function(t){for(var e=0;e<ja.length;e+=5)(!t||ja[e+4]&&ja[e+4].query===t)&&(ja[e].style.cssText=ja[e+1],ja[e].getBBox&&ja[e].setAttribute("transform",ja[e+2]||""),ja[e+3].uncache=1)},Xa=function(t,e){var i;for(so=0;so<Da.length;so++)!(i=Da[so])||e&&i._ctx!==e||(t?i.kill(1):i.revert(!0,!0));xo=!0,e&&Ha(e),e||Wa("revert")},qa=function(t,e){xs.cache++,(e||!Eo)&&xs.forEach((function(t){return Go(t)&&t.cacheID++&&(t.rec=0)})),Ko(t)&&(Ns.history.scrollRestoration=yo=t)},Va=0,Na=function(){Gs.appendChild(bo),wo=!fo&&bo.offsetHeight||Ns.innerHeight,Gs.removeChild(bo)},Ua=function(t){return Zs(".gsap-marker-start, .gsap-marker-end, .gsap-marker-scroller-start, .gsap-marker-scroller-end").forEach((function(e){return e.style.display=t?"none":"block"}))},Ka=function(t,e){if(!Po||t||xo){Na(),Eo=ul.isRefreshing=!0,xs.forEach((function(t){return Go(t)&&++t.cacheID&&(t.rec=t())}));var i=Wa("refreshInit");co&&ul.sort(),e||Xa(),xs.forEach((function(t){Go(t)&&(t.smooth&&(t.target.style.scrollBehavior="auto"),t(0))})),Da.slice(0).forEach((function(t){return t.refresh()})),xo=!1,Da.forEach((function(t){if(t._subPinOffset&&t.pin){var e=t.vars.horizontal?"offsetWidth":"offsetHeight",i=t.pin[e];t.revert(!0,1),t.adjustPinSpacing(t.pin[e]-i),t.refresh()}})),To=1,Ua(!0),Da.forEach((function(t){var e=No(t.scroller,t._dir),i="max"===t.vars.end||t._endClamp&&t.end>e,n=t._startClamp&&t.start>=e;(i||n)&&t.setPositions(n?e-1:t.start,i?Math.max(n?e:t.start+1,e):t.end,!0)})),Ua(!1),To=0,i.forEach((function(t){return t&&t.render&&t.render(-1)})),xs.forEach((function(t){Go(t)&&(t.smooth&&requestAnimationFrame((function(){return t.target.style.scrollBehavior="smooth"})),t.rec&&t(t.rec))})),qa(yo,1),Qs.pause(),Va++,Eo=2,Qa(2),Da.forEach((function(t){return Go(t.vars.onRefresh)&&t.vars.onRefresh(t)})),Eo=ul.isRefreshing=!1,Wa("refresh")}else xa(ul,"scrollEnd",Fa)},Ga=0,$a=1,Qa=function(t){if(2===t||!Eo&&!xo){ul.isUpdating=!0,Ao&&Ao.update(0);var e=Da.length,i=Co(),n=i-Do>=50,r=e&&Da[0].scroll();if($a=Ga>r?-1:1,Eo||(Ga=r),n&&(Po&&!no&&i-Po>200&&(Po=0,Wa("scrollEnd")),to=Do,Do=i),$a<0){for(so=e;so-- >0;)Da[so]&&Da[so].update(0,n);$a=1}else for(so=0;so<e;so++)Da[so]&&Da[so].update(0,n);ul.isUpdating=!1}So=0},Za=[ea,"top",na,ia,ua+ca,ua+oa,ua+la,ua+aa,"display","flexShrink","float","zIndex","gridColumnStart","gridColumnEnd","gridRowStart","gridRowEnd","gridArea","justifySelf","alignSelf","placeSelf","order"],Ja=Za.concat([ra,sa,"boxSizing","max"+fa,"max"+da,"position",ua,ha,ha+la,ha+oa,ha+ca,ha+aa]),tl=function(t,e,i,n){if(!t._gsap.swappedIn){for(var r,s=Za.length,o=e.style,a=t.style;s--;)o[r=Za[s]]=i[r];o.position="absolute"===i.position?"absolute":"relative","inline"===i.display&&(o.display="inline-block"),a[na]=a[ia]="auto",o.flexBasis=i.flexBasis||"auto",o.overflow="visible",o.boxSizing="border-box",o[ra]=_a(t,Ls)+pa,o[sa]=_a(t,Bs)+pa,o[ha]=a[ua]=a.top=a[ea]="0",il(n),a[ra]=a["max"+fa]=i[ra],a[sa]=a["max"+da]=i[sa],a[ha]=i[ha],t.parentNode!==e&&(t.parentNode.insertBefore(e,t),e.appendChild(t)),t._gsap.swappedIn=!0}},el=/([A-Z])/g,il=function(t){if(t){var e,i,n=t.t.style,r=t.length,s=0;for((t.t._gsap||qs.core.getCache(t.t)).uncache=1;s<r;s+=2)i=t[s+1],e=t[s],i?n[e]=i:n[e]&&n.removeProperty(e.replace(el,"-$1").toLowerCase())}},nl=function(t){for(var e=Ja.length,i=t.style,n=[],r=0;r<e;r++)n.push(Ja[r],i[Ja[r]]);return n.t=t,n},rl={left:0,top:0},sl=function(t,e,i,n,r,s,o,a,l,c,h,u,f,d){Go(t)&&(t=t(a)),Ko(t)&&"max"===t.substr(0,3)&&(t=u+("="===t.charAt(4)?Aa("0"+t.substr(3),i):0));var p,m,g,v=f?f.time():0;if(f&&f.seek(0),isNaN(t)||(t=+t),$o(t))f&&(t=qs.utils.mapRange(f.scrollTrigger.start,f.scrollTrigger.end,0,u,t)),o&&Ca(o,i,n,!0);else{Go(e)&&(e=e(a));var _,y,b,w,x=(t||"0").split(" ");g=zs(e,a)||Gs,(_=va(g)||{})&&(_.left||_.top)||"none"!==ma(g).display||(w=g.style.display,g.style.display="block",_=va(g),w?g.style.display=w:g.style.removeProperty("display")),y=Aa(x[0],_[n.d]),b=Aa(x[1]||"0",i),t=_[n.p]-l[n.p]-c+y+r-b,o&&Ca(o,b,n,i-b<20||o._isStart&&b>20),i-=i-b}if(d&&(a[d]=t||-.001,t<0&&(t=0)),s){var T=t+i,k=s._isStart;p="scroll"+n.d2,Ca(s,T,n,k&&T>20||!k&&(h?Math.max(Gs[p],Ks[p]):s.parentNode[p])<=T+1),h&&(l=va(o),h&&(s.style[n.op.p]=l[n.op.p]-n.op.m-s._offset+pa))}return f&&g&&(p=va(g),f.seek(u),m=va(g),f._caScrollDist=p[n.p]-m[n.p],t=t/f._caScrollDist*u),f&&f.seek(v),f?t:Math.round(t)},ol=/(webkit|moz|length|cssText|inset)/i,al=function(t,e,i,n){if(t.parentNode!==e){var r,s,o=t.style;if(e===Gs){for(r in t._stOrig=o.cssText,s=ma(t))+r||ol.test(r)||!s[r]||"string"!=typeof o[r]||"0"===r||(o[r]=s[r]);o.top=i,o.left=n}else o.cssText=t._stOrig;qs.core.getCache(t).uncache=1,e.appendChild(t)}},ll=function(t,e,i){var n=e,r=n;return function(e){var s=Math.round(t());return s!==n&&s!==r&&Math.abs(s-n)>3&&Math.abs(s-r)>3&&(e=s,i&&i()),r=n,n=e,e}},cl=function(t,e,i){var n={};n[e.p]="+="+i,qs.set(t,n)},hl=function(t,e){var i=Is(t,e),n="_scroll"+e.p2,r=function e(r,s,o,a,l){var c=e.tween,h=s.onComplete,u={};o=o||i();var f=ll(i,o,(function(){c.kill(),e.tween=0}));return l=a&&l||0,a=a||r-o,c&&c.kill(),s[n]=r,s.inherit=!1,s.modifiers=u,u[n]=function(){return f(o+a*c.ratio+l*c.ratio*c.ratio)},s.onUpdate=function(){xs.cache++,e.tween&&Qa()},s.onComplete=function(){e.tween=0,h&&h.call(c)},c=e.tween=qs.to(t,s)};return t[n]=i,i.wheelHandler=function(){return r.tween&&r.tween.kill()&&(r.tween=0)},xa(t,"wheel",i.wheelHandler),ul.isTouch&&xa(t,"touchmove",i.wheelHandler),r},ul=function(){function t(e,i){Vs||t.register(qs)||console.warn("Please gsap.registerPlugin(ScrollTrigger)"),_o(this),this.init(e,i)}return t.prototype.init=function(e,i){if(this.progress=this.start=0,this.vars&&this.kill(!0,!0),Ro){var n,r,s,o,a,l,c,h,u,f,d,p,m,g,v,_,y,b,w,x,T,k,S,E,O,A,M,C,D,P,R,L,B,z,I,Y,F,W,j,H,X,q,V=e=ga(Ko(e)||$o(e)||e.nodeType?{trigger:e}:e,Ea),N=V.onUpdate,U=V.toggleClass,K=V.id,G=V.onToggle,$=V.onRefresh,Q=V.scrub,Z=V.trigger,J=V.pin,tt=V.pinSpacing,et=V.invalidateOnRefresh,it=V.anticipatePin,nt=V.onScrubComplete,rt=V.onSnapComplete,st=V.once,ot=V.snap,at=V.pinReparent,lt=V.pinSpacer,ct=V.containerAnimation,ht=V.fastScrollEnd,ut=V.preventOverlaps,ft=e.horizontal||e.containerAnimation&&!1!==e.horizontal?Ls:Bs,dt=!Q&&0!==Q,pt=zs(e.scroller||Ns),mt=qs.core.getCache(pt),gt=Xo(pt),vt="fixed"===("pinType"in e?e.pinType:Es(pt,"pinType")||gt&&"fixed"),_t=[e.onEnter,e.onLeave,e.onEnterBack,e.onLeaveBack],yt=dt&&e.toggleActions.split(" "),bt="markers"in e?e.markers:Ea.markers,wt=gt?0:parseFloat(ma(pt)["border"+ft.p2+fa])||0,xt=this,Tt=e.onRefreshInit&&function(){return e.onRefreshInit(xt)},kt=function(t,e,i){var n=i.d,r=i.d2,s=i.a;return(s=Es(t,"getBoundingClientRect"))?function(){return s()[n]}:function(){return(e?qo(r):t["client"+r])||0}}(pt,gt,ft),St=function(t,e){return!e||~Ts.indexOf(t)?Vo(t):function(){return rl}}(pt,gt),Et=0,Ot=0,At=0,Mt=Is(pt,ft);if(xt._startClamp=xt._endClamp=!1,xt._dir=ft,it*=45,xt.scroller=pt,xt.scroll=ct?ct.time.bind(ct):Mt,o=Mt(),xt.vars=e,i=i||e.animation,"refreshPriority"in e&&(co=1,-9999===e.refreshPriority&&(Ao=xt)),mt.tweenScroll=mt.tweenScroll||{top:hl(pt,Bs),left:hl(pt,Ls)},xt.tweenTo=n=mt.tweenScroll[ft.p],xt.scrubDuration=function(t){(B=$o(t)&&t)?L?L.duration(t):L=qs.to(i,{ease:"expo",totalProgress:"+=0",inherit:!1,duration:B,paused:!0,onComplete:function(){return nt&&nt(xt)}}):(L&&L.progress(1).kill(),L=0)},i&&(i.vars.lazy=!1,i._initted&&!xt.isReverted||!1!==i.vars.immediateRender&&!1!==e.immediateRender&&i.duration()&&i.render(0,!0,!0),xt.animation=i.pause(),i.scrollTrigger=xt,xt.scrubDuration(Q),P=0,K||(K=i.vars.id)),ot&&(Qo(ot)&&!ot.push||(ot={snapTo:ot}),"scrollBehavior"in Gs.style&&qs.set(gt?[Gs,Ks]:pt,{scrollBehavior:"auto"}),xs.forEach((function(t){return Go(t)&&t.target===(gt?Us.scrollingElement||Ks:pt)&&(t.smooth=!1)})),s=Go(ot.snapTo)?ot.snapTo:"labels"===ot.snapTo?function(t){return function(e){return qs.utils.snap(ya(t),e)}}(i):"labelsDirectional"===ot.snapTo?(H=i,function(t,e){return ba(ya(H))(t,e.direction)}):!1!==ot.directional?function(t,e){return ba(ot.snapTo)(t,Co()-Ot<500?0:e.direction)}:qs.utils.snap(ot.snapTo),z=ot.duration||{min:.1,max:2},z=Qo(z)?Js(z.min,z.max):Js(z,z),I=qs.delayedCall(ot.delay||B/2||.1,(function(){var t=Mt(),e=Co()-Ot<500,r=n.tween;if(!(e||Math.abs(xt.getVelocity())<10)||r||no||Et===t)xt.isActive&&Et!==t&&I.restart(!0);else{var o,a,h=(t-l)/g,u=i&&!dt?i.totalProgress():h,f=e?0:(u-R)/(Co()-to)*1e3||0,d=qs.utils.clamp(-h,1-h,ta(f/2)*f/.185),p=h+(!1===ot.inertia?0:d),m=ot,v=m.onStart,_=m.onInterrupt,y=m.onComplete;if(o=s(p,xt),$o(o)||(o=p),a=Math.round(l+o*g),t<=c&&t>=l&&a!==t){if(r&&!r._initted&&r.data<=ta(a-t))return;!1===ot.inertia&&(d=o-h),n(a,{duration:z(ta(.185*Math.max(ta(p-u),ta(o-u))/f/.05||0)),ease:ot.ease||"power3",data:ta(a-t),onInterrupt:function(){return I.restart(!0)&&_&&_(xt)},onComplete:function(){xt.update(),Et=Mt(),i&&(L?L.resetTo("totalProgress",o,i._tTime/i._tDur):i.progress(o)),P=R=i&&!dt?i.totalProgress():xt.progress,rt&&rt(xt),y&&y(xt)}},t,d*g,a-t-d*g),v&&v(xt,n.tween)}}})).pause()),K&&(Pa[K]=xt),(j=(Z=xt.trigger=zs(Z||!0!==J&&J))&&Z._gsap&&Z._gsap.stRevert)&&(j=j(xt)),J=!0===J?Z:zs(J),Ko(U)&&(U={targets:Z,className:U}),J&&(!1===tt||tt===ua||(tt=!(!tt&&J.parentNode&&J.parentNode.style&&"flex"===ma(J.parentNode).display)&&ha),xt.pin=J,(r=qs.core.getCache(J)).spacer?v=r.pinState:(lt&&((lt=zs(lt))&&!lt.nodeType&&(lt=lt.current||lt.nativeElement),r.spacerIsNative=!!lt,lt&&(r.spacerState=nl(lt))),r.spacer=b=lt||Us.createElement("div"),b.classList.add("pin-spacer"),K&&b.classList.add("pin-spacer-"+K),r.pinState=v=nl(J)),!1!==e.force3D&&qs.set(J,{force3D:!0}),xt.spacer=b=r.spacer,D=ma(J),E=D[tt+ft.os2],x=qs.getProperty(J),T=qs.quickSetter(J,ft.a,pa),tl(J,b,D),y=nl(J)),bt){p=Qo(bt)?ga(bt,Sa):Sa,f=Ma("scroller-start",K,pt,ft,p,0),d=Ma("scroller-end",K,pt,ft,p,0,f),w=f["offset"+ft.op.d2];var Ct=zs(Es(pt,"content")||pt);h=this.markerStart=Ma("start",K,Ct,ft,p,w,0,ct),u=this.markerEnd=Ma("end",K,Ct,ft,p,w,0,ct),ct&&(W=qs.quickSetter([h,u],ft.a,pa)),vt||Ts.length&&!0===Es(pt,"fixedMarkers")||(q=ma(X=gt?Gs:pt).position,X.style.position="absolute"===q||"fixed"===q?q:"relative",qs.set([f,d],{force3D:!0}),A=qs.quickSetter(f,ft.a,pa),C=qs.quickSetter(d,ft.a,pa))}if(ct){var Dt=ct.vars.onUpdate,Pt=ct.vars.onUpdateParams;ct.eventCallback("onUpdate",(function(){xt.update(0,0,1),Dt&&Dt.apply(ct,Pt||[])}))}if(xt.previous=function(){return Da[Da.indexOf(xt)-1]},xt.next=function(){return Da[Da.indexOf(xt)+1]},xt.revert=function(t,e){if(!e)return xt.kill(!0);var n=!1!==t||!xt.enabled,r=io;n!==xt.isReverted&&(n&&(Y=Math.max(Mt(),xt.scroll.rec||0),At=xt.progress,F=i&&i.progress()),h&&[h,u,f,d].forEach((function(t){return t.style.display=n?"none":"block"})),n&&(io=xt,xt.update(n)),!J||at&&xt.isActive||(n?function(t,e,i){il(i);var n=t._gsap;if(n.spacerIsNative)il(n.spacerState);else if(t._gsap.swappedIn){var r=e.parentNode;r&&(r.insertBefore(t,e),r.removeChild(e))}t._gsap.swappedIn=!1}(J,b,v):tl(J,b,ma(J),O)),n||xt.update(n),io=r,xt.isReverted=n)},xt.refresh=function(r,s,p,w){if(!io&&xt.enabled||s)if(J&&r&&Po)xa(t,"scrollEnd",Fa);else{!Eo&&Tt&&Tt(xt),io=xt,n.tween&&!p&&(n.tween.kill(),n.tween=0),L&&L.pause(),et&&i&&i.revert({kill:!1}).invalidate(),xt.isReverted||xt.revert(!0,!0),xt._subPinOffset=!1;var T,E,A,C,D,P,R,B,z,W,j,H,X,q=kt(),V=St(),N=ct?ct.duration():No(pt,ft),U=g<=.01,K=0,G=w||0,Q=Qo(p)?p.end:e.end,it=e.endTrigger||Z,nt=Qo(p)?p.start:e.start||(0!==e.start&&Z?J?"0 0":"0 100%":0),rt=xt.pinnedContainer=e.pinnedContainer&&zs(e.pinnedContainer,xt),st=Z&&Math.max(0,Da.indexOf(xt))||0,ot=st;for(bt&&Qo(p)&&(H=qs.getProperty(f,ft.p),X=qs.getProperty(d,ft.p));ot--;)(P=Da[ot]).end||P.refresh(0,1)||(io=xt),!(R=P.pin)||R!==Z&&R!==J&&R!==rt||P.isReverted||(W||(W=[]),W.unshift(P),P.revert(!0,!0)),P!==Da[ot]&&(st--,ot--);for(Go(nt)&&(nt=nt(xt)),nt=Lo(nt,"start",xt),l=sl(nt,Z,q,ft,Mt(),h,f,xt,V,wt,vt,N,ct,xt._startClamp&&"_startClamp")||(J?-.001:0),Go(Q)&&(Q=Q(xt)),Ko(Q)&&!Q.indexOf("+=")&&(~Q.indexOf(" ")?Q=(Ko(nt)?nt.split(" ")[0]:"")+Q:(K=Aa(Q.substr(2),q),Q=Ko(nt)?nt:(ct?qs.utils.mapRange(0,ct.duration(),ct.scrollTrigger.start,ct.scrollTrigger.end,l):l)+K,it=Z)),Q=Lo(Q,"end",xt),c=Math.max(l,sl(Q||(it?"100% 0":N),it,q,ft,Mt()+K,u,d,xt,V,wt,vt,N,ct,xt._endClamp&&"_endClamp"))||-.001,K=0,ot=st;ot--;)(R=(P=Da[ot]).pin)&&P.start-P._pinPush<=l&&!ct&&P.end>0&&(T=P.end-(xt._startClamp?Math.max(0,P.start):P.start),(R===Z&&P.start-P._pinPush<l||R===rt)&&isNaN(nt)&&(K+=T*(1-P.progress)),R===J&&(G+=T));if(l+=K,c+=K,xt._startClamp&&(xt._startClamp+=K),xt._endClamp&&!Eo&&(xt._endClamp=c||-.001,c=Math.min(c,No(pt,ft))),g=c-l||(l-=.01)&&.001,U&&(At=qs.utils.clamp(0,1,qs.utils.normalize(l,c,Y))),xt._pinPush=G,h&&K&&((T={})[ft.a]="+="+K,rt&&(T[ft.p]="-="+Mt()),qs.set([h,u],T)),!J||To&&xt.end>=No(pt,ft)){if(Z&&Mt()&&!ct)for(E=Z.parentNode;E&&E!==Gs;)E._pinOffset&&(l-=E._pinOffset,c-=E._pinOffset),E=E.parentNode}else T=ma(J),C=ft===Bs,A=Mt(),k=parseFloat(x(ft.a))+G,!N&&c>1&&(j={style:j=(gt?Us.scrollingElement||Ks:pt).style,value:j["overflow"+ft.a.toUpperCase()]},gt&&"scroll"!==ma(Gs)["overflow"+ft.a.toUpperCase()]&&(j.style["overflow"+ft.a.toUpperCase()]="scroll")),tl(J,b,T),y=nl(J),E=va(J,!0),B=vt&&Is(pt,C?Ls:Bs)(),tt?((O=[tt+ft.os2,g+G+pa]).t=b,(ot=tt===ha?_a(J,ft)+g+G:0)&&(O.push(ft.d,ot+pa),"auto"!==b.style.flexBasis&&(b.style.flexBasis=ot+pa)),il(O),rt&&Da.forEach((function(t){t.pin===rt&&!1!==t.vars.pinSpacing&&(t._subPinOffset=!0)})),vt&&Mt(Y)):(ot=_a(J,ft))&&"auto"!==b.style.flexBasis&&(b.style.flexBasis=ot+pa),vt&&((D={top:E.top+(C?A-l:B)+pa,left:E.left+(C?B:A-l)+pa,boxSizing:"border-box",position:"fixed"})[ra]=D["max"+fa]=Math.ceil(E.width)+pa,D[sa]=D["max"+da]=Math.ceil(E.height)+pa,D[ua]=D[ua+la]=D[ua+oa]=D[ua+ca]=D[ua+aa]="0",D[ha]=T[ha],D[ha+la]=T[ha+la],D[ha+oa]=T[ha+oa],D[ha+ca]=T[ha+ca],D[ha+aa]=T[ha+aa],_=function(t,e,i){for(var n,r=[],s=t.length,o=i?8:0;o<s;o+=2)n=t[o],r.push(n,n in e?e[n]:t[o+1]);return r.t=t.t,r}(v,D,at),Eo&&Mt(0)),i?(z=i._initted,ho(1),i.render(i.duration(),!0,!0),S=x(ft.a)-k+g+G,M=Math.abs(g-S)>1,vt&&M&&_.splice(_.length-2,2),i.render(0,!0,!0),z||i.invalidate(!0),i.parent||i.totalTime(i.totalTime()),ho(0)):S=g,j&&(j.value?j.style["overflow"+ft.a.toUpperCase()]=j.value:j.style.removeProperty("overflow-"+ft.a));W&&W.forEach((function(t){return t.revert(!1,!0)})),xt.start=l,xt.end=c,o=a=Eo?Y:Mt(),ct||Eo||(o<Y&&Mt(Y),xt.scroll.rec=0),xt.revert(!1,!0),Ot=Co(),I&&(Et=-1,I.restart(!0)),io=0,i&&dt&&(i._initted||F)&&i.progress()!==F&&i.progress(F||0,!0).render(i.time(),!0,!0),(U||At!==xt.progress||ct||et)&&(i&&!dt&&i.totalProgress(ct&&l<-.001&&!At?qs.utils.normalize(l,c,0):At,!0),xt.progress=U||(o-l)/g===At?0:At),J&&tt&&(b._pinOffset=Math.round(xt.progress*S)),L&&L.invalidate(),isNaN(H)||(H-=qs.getProperty(f,ft.p),X-=qs.getProperty(d,ft.p),cl(f,ft,H),cl(h,ft,H-(w||0)),cl(d,ft,X),cl(u,ft,X-(w||0))),U&&!Eo&&xt.update(),!$||Eo||m||(m=!0,$(xt),m=!1)}},xt.getVelocity=function(){return(Mt()-a)/(Co()-to)*1e3||0},xt.endAnimation=function(){Zo(xt.callbackAnimation),i&&(L?L.progress(1):i.paused()?dt||Zo(i,xt.direction<0,1):Zo(i,i.reversed()))},xt.labelToScroll=function(t){return i&&i.labels&&(l||xt.refresh()||l)+i.labels[t]/i.duration()*g||0},xt.getTrailing=function(t){var e=Da.indexOf(xt),i=xt.direction>0?Da.slice(0,e).reverse():Da.slice(e+1);return(Ko(t)?i.filter((function(e){return e.vars.preventOverlaps===t})):i).filter((function(t){return xt.direction>0?t.end<=l:t.start>=c}))},xt.update=function(t,e,r){if(!ct||r||t){var s,h,u,d,p,m,v,w=!0===Eo?Y:xt.scroll(),x=t?0:(w-l)/g,O=x<0?0:x>1?1:x||0,D=xt.progress;if(e&&(a=o,o=ct?Mt():w,ot&&(R=P,P=i&&!dt?i.totalProgress():O)),it&&J&&!io&&!Mo&&Po&&(!O&&l<w+(w-a)/(Co()-to)*it?O=1e-4:1===O&&c>w+(w-a)/(Co()-to)*it&&(O=.9999)),O!==D&&xt.enabled){if(d=(p=(s=xt.isActive=!!O&&O<1)!==(!!D&&D<1))||!!O!=!!D,xt.direction=O>D?1:-1,xt.progress=O,d&&!io&&(h=O&&!D?0:1===O?1:1===D?2:3,dt&&(u=!p&&"none"!==yt[h+1]&&yt[h+1]||yt[h],v=i&&("complete"===u||"reset"===u||u in i))),ut&&(p||v)&&(v||Q||!i)&&(Go(ut)?ut(xt):xt.getTrailing(ut).forEach((function(t){return t.endAnimation()}))),dt||(!L||io||Mo?i&&i.totalProgress(O,!(!io||!Ot&&!t)):(L._dp._time-L._start!==L._time&&L.render(L._dp._time-L._start),L.resetTo?L.resetTo("totalProgress",O,i._tTime/i._tDur):(L.vars.totalProgress=O,L.invalidate().restart()))),J)if(t&&tt&&(b.style[tt+ft.os2]=E),vt){if(d){if(m=!t&&O>D&&c+1>w&&w+1>=No(pt,ft),at)if(t||!s&&!m)al(J,b);else{var B=va(J,!0),z=w-l;al(J,Gs,B.top+(ft===Bs?z:0)+pa,B.left+(ft===Bs?0:z)+pa)}il(s||m?_:y),M&&O<1&&s||T(k+(1!==O||m?0:S))}}else T(Wo(k+S*O));ot&&!n.tween&&!io&&!Mo&&I.restart(!0),U&&(p||st&&O&&(O<1||!ko))&&Zs(U.targets).forEach((function(t){return t.classList[s||st?"add":"remove"](U.className)})),N&&!dt&&!t&&N(xt),d&&!io?(dt&&(v&&("complete"===u?i.pause().totalProgress(1):"reset"===u?i.restart(!0).pause():"restart"===u?i.restart(!0):i[u]()),N&&N(xt)),!p&&ko||(G&&p&&Jo(xt,G),_t[h]&&Jo(xt,_t[h]),st&&(1===O?xt.kill(!1,1):_t[h]=0),p||_t[h=1===O?1:3]&&Jo(xt,_t[h])),ht&&!s&&Math.abs(xt.getVelocity())>($o(ht)?ht:2500)&&(Zo(xt.callbackAnimation),L?L.progress(1):Zo(i,"reverse"===u?1:!O,1))):dt&&N&&!io&&N(xt)}if(C){var F=ct?w/ct.duration()*(ct._caScrollDist||0):w;A(F+(f._isFlipped?1:0)),C(F)}W&&W(-w/ct.duration()*(ct._caScrollDist||0))}},xt.enable=function(e,i){xt.enabled||(xt.enabled=!0,xa(pt,"resize",za),gt||xa(pt,"scroll",La),Tt&&xa(t,"refreshInit",Tt),!1!==e&&(xt.progress=At=0,o=a=Et=Mt()),!1!==i&&xt.refresh())},xt.getTween=function(t){return t&&n?n.tween:L},xt.setPositions=function(t,e,i,n){if(ct){var r=ct.scrollTrigger,s=ct.duration(),o=r.end-r.start;t=r.start+o*t/s,e=r.start+o*e/s}xt.refresh(!1,!1,{start:Bo(t,i&&!!xt._startClamp),end:Bo(e,i&&!!xt._endClamp)},n),xt.update()},xt.adjustPinSpacing=function(t){if(O&&t){var e=O.indexOf(ft.d)+1;O[e]=parseFloat(O[e])+t+pa,O[1]=parseFloat(O[1])+t+pa,il(O)}},xt.disable=function(e,i){if(xt.enabled&&(!1!==e&&xt.revert(!0,!0),xt.enabled=xt.isActive=!1,i||L&&L.pause(),Y=0,r&&(r.uncache=1),Tt&&Ta(t,"refreshInit",Tt),I&&(I.pause(),n.tween&&n.tween.kill()&&(n.tween=0)),!gt)){for(var s=Da.length;s--;)if(Da[s].scroller===pt&&Da[s]!==xt)return;Ta(pt,"resize",za),gt||Ta(pt,"scroll",La)}},xt.kill=function(t,n){xt.disable(t,n),L&&!n&&L.kill(),K&&delete Pa[K];var s=Da.indexOf(xt);s>=0&&Da.splice(s,1),s===so&&$a>0&&so--,s=0,Da.forEach((function(t){return t.scroller===xt.scroller&&(s=1)})),s||Eo||(xt.scroll.rec=0),i&&(i.scrollTrigger=null,t&&i.revert({kill:!1}),n||i.kill()),h&&[h,u,f,d].forEach((function(t){return t.parentNode&&t.parentNode.removeChild(t)})),Ao===xt&&(Ao=0),J&&(r&&(r.uncache=1),s=0,Da.forEach((function(t){return t.pin===J&&s++})),s||(r.spacer=0)),e.onKill&&e.onKill(xt)},Da.push(xt),xt.enable(!1,!1),j&&j(xt),i&&i.add&&!g){var Rt=xt.update;xt.update=function(){xt.update=Rt,l||c||xt.refresh()},qs.delayedCall(.01,xt.update),g=.01,l=c=0}else xt.refresh();J&&function(){if(Oo!==Va){var t=Oo=Va;requestAnimationFrame((function(){return t===Va&&Ka(!0)}))}}()}else this.update=this.refresh=this.kill=Fo},t.register=function(e){return Vs||(qs=e||Ho(),jo()&&window.document&&t.enable(),Vs=Ro),Vs},t.defaults=function(t){if(t)for(var e in t)Ea[e]=t[e];return Ea},t.disable=function(t,e){Ro=0,Da.forEach((function(i){return i[e?"kill":"disable"](t)})),Ta(Ns,"wheel",La),Ta(Us,"scroll",La),clearInterval(eo),Ta(Us,"touchcancel",Fo),Ta(Gs,"touchstart",Fo),wa(Ta,Us,"pointerdown,touchstart,mousedown",Io),wa(Ta,Us,"pointerup,touchend,mouseup",Yo),Qs.kill(),Uo(Ta);for(var i=0;i<xs.length;i+=3)ka(Ta,xs[i],xs[i+1]),ka(Ta,xs[i],xs[i+2])},t.enable=function(){if(Ns=window,Us=document,Ks=Us.documentElement,Gs=Us.body,qs&&(Zs=qs.utils.toArray,Js=qs.utils.clamp,_o=qs.core.context||Fo,ho=qs.core.suppressOverwrites||Fo,yo=Ns.history.scrollRestoration||"auto",Ga=Ns.pageYOffset,qs.core.globals("ScrollTrigger",t),Gs)){Ro=1,(bo=document.createElement("div")).style.height="100vh",bo.style.position="absolute",Na(),zo(),Xs.register(qs),t.isTouch=Xs.isTouch,vo=Xs.isTouch&&/(iPad|iPhone|iPod|Mac)/g.test(navigator.userAgent),po=1===Xs.isTouch,xa(Ns,"wheel",La),$s=[Ns,Us,Ks,Gs],qs.matchMedia?(t.matchMedia=function(t){var e,i=qs.matchMedia();for(e in t)i.add(e,t[e]);return i},qs.addEventListener("matchMediaInit",(function(){return Xa()})),qs.addEventListener("matchMediaRevert",(function(){return Ha()})),qs.addEventListener("matchMedia",(function(){Ka(0,1),Wa("matchMedia")})),qs.matchMedia("(orientation: portrait)",(function(){return Ba(),Ba}))):console.warn("Requires GSAP 3.11.0 or later"),Ba(),xa(Us,"scroll",La);var e,i,n=Gs.style,r=n.borderTopStyle,s=qs.core.Animation.prototype;for(s.revert||Object.defineProperty(s,"revert",{value:function(){return this.time(-.01,!0)}}),n.borderTopStyle="solid",e=va(Gs),Bs.m=Math.round(e.top+Bs.sc())||0,Ls.m=Math.round(e.left+Ls.sc())||0,r?n.borderTopStyle=r:n.removeProperty("border-top-style"),eo=setInterval(Ra,250),qs.delayedCall(.5,(function(){return Mo=0})),xa(Us,"touchcancel",Fo),xa(Gs,"touchstart",Fo),wa(xa,Us,"pointerdown,touchstart,mousedown",Io),wa(xa,Us,"pointerup,touchend,mouseup",Yo),ro=qs.utils.checkPrefix("transform"),Ja.push(ro),Vs=Co(),Qs=qs.delayedCall(.2,Ka).pause(),lo=[Us,"visibilitychange",function(){var t=Ns.innerWidth,e=Ns.innerHeight;Us.hidden?(oo=t,ao=e):oo===t&&ao===e||za()},Us,"DOMContentLoaded",Ka,Ns,"load",Ka,Ns,"resize",za],Uo(xa),Da.forEach((function(t){return t.enable(0,1)})),i=0;i<xs.length;i+=3)ka(Ta,xs[i],xs[i+1]),ka(Ta,xs[i],xs[i+2])}},t.config=function(e){"limitCallbacks"in e&&(ko=!!e.limitCallbacks);var i=e.syncInterval;i&&clearInterval(eo)||(eo=i)&&setInterval(Ra,i),"ignoreMobileResize"in e&&(po=1===t.isTouch&&e.ignoreMobileResize),"autoRefreshEvents"in e&&(Uo(Ta)||Uo(xa,e.autoRefreshEvents||"none"),uo=-1===(e.autoRefreshEvents+"").indexOf("resize"))},t.scrollerProxy=function(t,e){var i=zs(t),n=xs.indexOf(i),r=Xo(i);~n&&xs.splice(n,r?6:2),e&&(r?Ts.unshift(Ns,e,Gs,e,Ks,e):Ts.unshift(i,e))},t.clearMatchMedia=function(t){Da.forEach((function(e){return e._ctx&&e._ctx.query===t&&e._ctx.kill(!0,!0)}))},t.isInViewport=function(t,e,i){var n=(Ko(t)?zs(t):t).getBoundingClientRect(),r=n[i?ra:sa]*e||0;return i?n.right-r>0&&n.left+r<Ns.innerWidth:n.bottom-r>0&&n.top+r<Ns.innerHeight},t.positionInViewport=function(t,e,i){Ko(t)&&(t=zs(t));var n=t.getBoundingClientRect(),r=n[i?ra:sa],s=null==e?r/2:e in Oa?Oa[e]*r:~e.indexOf("%")?parseFloat(e)*r/100:parseFloat(e)||0;return i?(n.left+s)/Ns.innerWidth:(n.top+s)/Ns.innerHeight},t.killAll=function(t){if(Da.slice(0).forEach((function(t){return"ScrollSmoother"!==t.vars.id&&t.kill()})),!0!==t){var e=Ia.killAll||[];Ia={},e.forEach((function(t){return t()}))}},t}();ul.version="3.12.5",ul.saveStyles=function(t){return t?Zs(t).forEach((function(t){if(t&&t.style){var e=ja.indexOf(t);e>=0&&ja.splice(e,5),ja.push(t,t.style.cssText,t.getBBox&&t.getAttribute("transform"),qs.core.getCache(t),_o())}})):ja},ul.revert=function(t,e){return Xa(!t,e)},ul.create=function(t,e){return new ul(t,e)},ul.refresh=function(t){return t?za():(Vs||ul.register())&&Ka(!0)},ul.update=function(t){return++xs.cache&&Qa(!0===t?2:0)},ul.clearScrollMemory=qa,ul.maxScroll=function(t,e){return No(t,e?Ls:Bs)},ul.getScrollFunc=function(t,e){return Is(zs(t),e?Ls:Bs)},ul.getById=function(t){return Pa[t]},ul.getAll=function(){return Da.filter((function(t){return"ScrollSmoother"!==t.vars.id}))},ul.isScrolling=function(){return!!Po},ul.snapDirectional=ba,ul.addEventListener=function(t,e){var i=Ia[t]||(Ia[t]=[]);~i.indexOf(e)||i.push(e)},ul.removeEventListener=function(t,e){var i=Ia[t],n=i&&i.indexOf(e);n>=0&&i.splice(n,1)},ul.batch=function(t,e){var i,n=[],r={},s=e.interval||.016,o=e.batchMax||1e9,a=function(t,e){var i=[],n=[],r=qs.delayedCall(s,(function(){e(i,n),i=[],n=[]})).pause();return function(t){i.length||r.restart(!0),i.push(t.trigger),n.push(t),o<=i.length&&r.progress(1)}};for(i in e)r[i]="on"===i.substr(0,2)&&Go(e[i])&&"onRefreshInit"!==i?a(0,e[i]):e[i];return Go(o)&&(o=o(),xa(ul,"refresh",(function(){return o=e.batchMax()}))),Zs(t).forEach((function(t){var e={};for(i in r)e[i]=r[i];e.trigger=t,n.push(ul.create(e))})),n};var fl,dl=function(t,e,i,n){return e>n?t(n):e<0&&t(0),i>n?(n-e)/(i-e):i<0?e/(e-i):1},pl=function t(e,i){!0===i?e.style.removeProperty("touch-action"):e.style.touchAction=!0===i?"auto":i?"pan-"+i+(Xs.isTouch?" pinch-zoom":""):"none",e===Ks&&t(Gs,i)},ml={auto:1,scroll:1},gl=function(t){var e,i=t.event,n=t.target,r=t.axis,s=(i.changedTouches?i.changedTouches[0]:i).target,o=s._gsap||qs.core.getCache(s),a=Co();if(!o._isScrollT||a-o._isScrollT>2e3){for(;s&&s!==Gs&&(s.scrollHeight<=s.clientHeight&&s.scrollWidth<=s.clientWidth||!ml[(e=ma(s)).overflowY]&&!ml[e.overflowX]);)s=s.parentNode;o._isScroll=s&&s!==n&&!Xo(s)&&(ml[(e=ma(s)).overflowY]||ml[e.overflowX]),o._isScrollT=a}(o._isScroll||"x"===r)&&(i.stopPropagation(),i._gsapAllow=!0)},vl=function(t,e,i,n){return Xs.create({target:t,capture:!0,debounce:!1,lockAxis:!0,type:e,onWheel:n=n&&gl,onPress:n,onDrag:n,onScroll:n,onEnable:function(){return i&&xa(Us,Xs.eventTypes[0],yl,!1,!0)},onDisable:function(){return Ta(Us,Xs.eventTypes[0],yl,!0)}})},_l=/(input|label|select|textarea)/i,yl=function(t){var e=_l.test(t.target.tagName);(e||fl)&&(t._gsapAllow=!0,fl=e)},bl=function(t){Qo(t)||(t={}),t.preventDefault=t.isNormalizer=t.allowClicks=!0,t.type||(t.type="wheel,touch"),t.debounce=!!t.debounce,t.id=t.id||"normalizer";var e,i,n,r,s,o,a,l,c=t,h=c.normalizeScrollX,u=c.momentum,f=c.allowNestedScroll,d=c.onRelease,p=zs(t.target)||Ks,m=qs.core.globals().ScrollSmoother,g=m&&m.get(),v=vo&&(t.content&&zs(t.content)||g&&!1!==t.content&&!g.smooth()&&g.content()),_=Is(p,Bs),y=Is(p,Ls),b=1,w=(Xs.isTouch&&Ns.visualViewport?Ns.visualViewport.scale*Ns.visualViewport.width:Ns.outerWidth)/Ns.innerWidth,x=0,T=Go(u)?function(){return u(e)}:function(){return u||2.8},k=vl(p,t.type,!0,f),S=function(){return r=!1},E=Fo,O=Fo,A=function(){i=No(p,Bs),O=Js(vo?1:0,i),h&&(E=Js(0,No(p,Ls))),n=Va},M=function(){v._gsap.y=Wo(parseFloat(v._gsap.y)+_.offset)+"px",v.style.transform="matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, "+parseFloat(v._gsap.y)+", 0, 1)",_.offset=_.cacheID=0},C=function(){A(),s.isActive()&&s.vars.scrollY>i&&(_()>i?s.progress(1)&&_(i):s.resetTo("scrollY",i))};return v&&qs.set(v,{y:"+=0"}),t.ignoreCheck=function(t){return vo&&"touchmove"===t.type&&function(){if(r){requestAnimationFrame(S);var t=Wo(e.deltaY/2),i=O(_.v-t);if(v&&i!==_.v+_.offset){_.offset=i-_.v;var n=Wo((parseFloat(v&&v._gsap.y)||0)-_.offset);v.style.transform="matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, "+n+", 0, 1)",v._gsap.y=n+"px",_.cacheID=xs.cache,Qa()}return!0}_.offset&&M(),r=!0}()||b>1.05&&"touchstart"!==t.type||e.isGesturing||t.touches&&t.touches.length>1},t.onPress=function(){r=!1;var t=b;b=Wo((Ns.visualViewport&&Ns.visualViewport.scale||1)/w),s.pause(),t!==b&&pl(p,b>1.01||!h&&"x"),o=y(),a=_(),A(),n=Va},t.onRelease=t.onGestureStart=function(t,e){if(_.offset&&M(),e){xs.cache++;var n,r,o=T();h&&(r=(n=y())+.05*o*-t.velocityX/.227,o*=dl(y,n,r,No(p,Ls)),s.vars.scrollX=E(r)),r=(n=_())+.05*o*-t.velocityY/.227,o*=dl(_,n,r,No(p,Bs)),s.vars.scrollY=O(r),s.invalidate().duration(o).play(.01),(vo&&s.vars.scrollY>=i||n>=i-1)&&qs.to({},{onUpdate:C,duration:o})}else l.restart(!0);d&&d(t)},t.onWheel=function(){s._ts&&s.pause(),Co()-x>1e3&&(n=0,x=Co())},t.onChange=function(t,e,i,r,s){if(Va!==n&&A(),e&&h&&y(E(r[2]===e?o+(t.startX-t.x):y()+e-r[1])),i){_.offset&&M();var l=s[2]===i,c=l?a+t.startY-t.y:_()+i-s[1],u=O(c);l&&c!==u&&(a+=u-c),_(u)}(i||e)&&Qa()},t.onEnable=function(){pl(p,!h&&"x"),ul.addEventListener("refresh",C),xa(Ns,"resize",C),_.smooth&&(_.target.style.scrollBehavior="auto",_.smooth=y.smooth=!1),k.enable()},t.onDisable=function(){pl(p,!0),Ta(Ns,"resize",C),ul.removeEventListener("refresh",C),k.kill()},t.lockAxis=!1!==t.lockAxis,(e=new Xs(t)).iOS=vo,vo&&!_()&&_(1),vo&&qs.ticker.add(Fo),l=e._dc,s=qs.to(e,{ease:"power4",paused:!0,inherit:!1,scrollX:h?"+=0.1":"+=0",scrollY:"+=0.1",modifiers:{scrollY:ll(_,_(),(function(){return s.pause()}))},onUpdate:Qa,onComplete:l.vars.onComplete}),e};ul.sort=function(t){return Da.sort(t||function(t,e){return-1e6*(t.vars.refreshPriority||0)+t.start-(e.start+-1e6*(e.vars.refreshPriority||0))})},ul.observe=function(t){return new Xs(t)},ul.normalizeScroll=function(t){if(void 0===t)return fo;if(!0===t&&fo)return fo.enable();if(!1===t)return fo&&fo.kill(),void(fo=t);var e=t instanceof Xs?t:bl(t);return fo&&fo.target===e.target&&fo.kill(),Xo(e.target)&&(fo=e),e},ul.core={_getVelocityProp:Ys,_inputObserver:vl,_scrollers:xs,_proxies:Ts,bridge:{ss:function(){Po||Wa("scrollStart"),Po=Co()},ref:function(){return io}}},Ho()&&qs.registerPlugin(ul);Kn.registerPlugin(ul);const wl=Kn.matchMedia(),xl=(t,e)=>{((t,e)=>{for(var i=0;i<t.length;i++)t[i].classList.remove(e)})(e,"_is-active"),e[t]&&e[t].classList.add("_is-active")};Kn.registerPlugin(ul);const Tl=new rs({el:document.querySelector(".wrapper"),smooth:!0,mobile:{smooth:!1},tablet:{smooth:!1,breakpoint:1025}});window.addEventListener("load",(function(){ul.scrollerProxy(Tl.el,{scrollTop(t){return arguments.length?Tl.scrollTo(t,0,0):Tl.scroll.instance.scroll.y},getBoundingClientRect:()=>({top:0,left:0,width:window.innerWidth,height:window.innerHeight}),pinType:Tl.el.style.transform?"transform":"fixed"}),ul.addEventListener("refresh",(()=>Tl.update())),ul.defaults({scroller:Tl.el}),setTimeout((()=>{ul.refresh(),ul.update()}),0),document.querySelector(".item-card__swiper")&&wl.add("(min-width: 1024px)",(()=>{const t=document.querySelectorAll(".item-card__thumbs-slide");document.querySelectorAll(".item-card__slide").forEach(((e,i)=>{Kn.timeline({scrollTrigger:{trigger:e,start:"top top",end:"bottom bottom",onEnter:e=>{xl(i,t)},onEnterBack:e=>{xl(i,t)}}})}))})),setTimeout((()=>{Tl.update()}),1e3)})),window.addEventListener("resize",(function(){Tl.update()})),document.addEventListener("mouseover",(function(t){t.target.closest("[data-sb]")?Tl.stop():Tl.start()})),document.querySelector(".footer-main__anchor")&&document.querySelector(".footer-main__anchor").addEventListener("click",(function(){Tl.scrollTo(0)})),document.querySelectorAll(".item-card__slide").length&&document.querySelectorAll(".item-card__slide").forEach(((t,e)=>{document.querySelectorAll(".item-card__thumbs-slide")[e].addEventListener("click",(function(){window.innerWidth>1024&&Tl.scrollTo(t,{offset:-1,callback:()=>{xl(e,document.querySelectorAll(".item-card__thumbs-slide"))}})}))})),document.addEventListener("bodyLock",(function(){Tl.stop()})),document.addEventListener("bodyUnlock",(function(){Tl.start()})),Kn.registerPlugin(ul)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,