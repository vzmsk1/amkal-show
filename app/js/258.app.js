(self.webpackChunkwebpack_setup=self.webpackChunkwebpack_setup||[]).push([[258],{296:(e,t,o)=>{"use strict";o.d(t,{S:()=>s,c:()=>i});var a=o(350),r=o(659),l=o(358),c=o(82);l.ZP.registerPlugin(c.i);const n=l.ZP.matchMedia(),i=(e,t)=>{(0,r.GK)(t,"_is-active"),t[e]&&t[e].classList.add("_is-active")},s=()=>{document.querySelector(".item-card__swiper")&&n.add("(min-width: 1024px)",(()=>{const e=document.querySelectorAll(".item-card__thumbs-slide");document.querySelectorAll(".item-card__slide").forEach(((t,o)=>{e[o].addEventListener("click",(function(){window.innerWidth>1024&&a.locoScroll.scrollTo(t,{offset:-1,callback:()=>{i(o,e)}})})),l.ZP.timeline({scrollTrigger:{trigger:t,start:"top center",end:"bottom bottom",onEnter:t=>{i(o,e)},onEnterBack:t=>{i(o,e)}}})}))}))}},350:(e,t,o)=>{"use strict";o.r(t),o.d(t,{locoScroll:()=>n});var a=o(296),r=o(267),l=o(358),c=o(82);l.ZP.registerPlugin(c.i);const n=document.querySelector(".hero")?null:new r.ZP({el:document.querySelector(".wrapper"),smooth:!0,multiplier:1,mobile:{smooth:!1},tablet:{smooth:!1,breakpoint:1025}});if(n){const e=()=>{c.i.scrollerProxy(n.el,{scrollTop(e){return arguments.length?n.scrollTo(e,0,0):n.scroll.instance.scroll.y},getBoundingClientRect:()=>({top:0,left:0,width:window.innerWidth,height:window.innerHeight}),pinType:n.el.style.transform?"transform":"fixed"}),c.i.addEventListener("refresh",(()=>n.update())),c.i.defaults({scroller:n.el}),setTimeout((()=>{c.i.refresh(),c.i.update()}),0)};window.addEventListener("load",(function(){e(),(0,a.S)(),setTimeout((()=>{n.update()}),1e3)})),window.addEventListener("resize",(function(){n.update()}))}},62:(e,t,o)=>{"use strict";o.r(t);var a=o(659),r=o(358),l=o(41),c=o.n(l);document.querySelectorAll("[data-splitting]").length&&c()();const n={defaults:{duration:.5}},i=r.ZP.timeline({...n,paused:!0}),s=r.ZP.timeline({...n,paused:!0,onComplete:()=>{setTimeout((()=>{f(4,5)}),500)}});window.addEventListener("load",(function(){s.to(".feed-screen__head, .swiper-slide-active .feed-card__inner",{opacity:0}).to(".swiper-slide-next .feed-card__inner, .swiper-slide-next + .swiper-slide .feed-card__inner",{opacity:0},.3).to(".feed-screen",{"--y":0,onComplete:()=>{document.querySelector("body").classList.add("_light-theme")}},1),i.to(".feed-screen",{"--y":"-100vh",delay:.3}).to(".swiper-slide-active .feed-card__inner, .swiper-slide-next .feed-card__inner, .swiper-slide-next + .swiper-slide .feed-card__inner",{opacity:1,stagger:.2},.5).to(".feed-screen__navigation",{opacity:1},.9)}));const d=r.ZP.timeline({...n,paused:!0}),u=r.ZP.timeline({...n,paused:!0,onComplete:()=>{i.play(),f(3,4)}});u.to('.lang__title [data-animate-text="1"], .lang__image-wrap_right',{opacity:0,translateX:"100vw"}).to('.lang__title [data-animate-text="2"], .lang__image-wrap_left',{opacity:0,translateX:"100vw"},.3),d.to(".lang__title [data-animate-text='1'], .lang__title .glitch-text",{opacity:1,translateX:0,onStart:()=>{r.ZP.to(".lang__title .glitch-text",{translateX:76,opacity:1}),document.querySelectorAll(".lang__title .glitch-text .letter").forEach((e=>{r.ZP.to(e.querySelectorAll(".glitch"),{translateX:0,skewX:"0deg",stagger:.03,opacity:1,duration:.1})}))}}).to(".lang__title [data-animate-text='2']",{opacity:1,translateX:493}).to(".lang__image-wrap_right",{opacity:1,translateX:0},.5).to(".lang__image-wrap_left",{opacity:1,translateX:0,onStart:()=>{r.ZP.to(".lang__text .char",{opacity:1,stagger:.01,ease:"power1.out"})}},1);const m=r.ZP.timeline({...n,paused:!0}),_=r.ZP.timeline({...n,paused:!0});m.to(".victory__container",{"--gradient":"10%",opacity:1}).to(".victory__container",{"--y":"100%",duration:.7,onComplete:()=>{r.ZP.to(".victory__container",{"--opacity":0,"--y":0,"--deg1":"0deg","--deg2":"180deg","--gradient":"100%",duration:0})}},0).to(".victory__video-wrap",{opacity:1,onStart:()=>{document.querySelectorAll(".victory__title .glitch-text .letter").forEach((e=>{r.ZP.to(e.querySelectorAll(".glitch"),{translateX:0,skewX:"0deg",stagger:.03,opacity:1,duration:.1})}))}},0).to(".victory__text .char",{duration:.3,opacity:1,stagger:.001,ease:"power1.out"},.3),_.to(".victory__container",{"--opacity":1,"--gradient":"0%",onComplete:()=>{d.play(),f(2,3)}});const h=r.ZP.timeline({...n,paused:!0}),g=r.ZP.timeline({...n,paused:!0}).to(".about__text .char",{opacity:1,stagger:.01}).to(".about__image-wrap",{translateX:0,opacity:1},0);var y=o(371);var p=o(361);r.ZP.registerPlugin(p.Qj);const w=Array.from(document.querySelectorAll("[data-screen]")),f=(e,t)=>{w[e].dataset.screen="",w[t].dataset.screen="active"},S=()=>{if(w.length){const e=p.Qj.create({target:".mainpage",type:"wheel,touch",tolerance:200,onUp:e=>{t(document.querySelector('[data-screen="active"]'),!1)},onDown:e=>{t(document.querySelector('[data-screen="active"]'),!0)}}),t=(t,o)=>{const a=w.indexOf(t);w[a-1]&&w[a-1];if(e.disable(),o)switch(a){case 0:y.Z.getPlayer(document.querySelector(".hero__video").id)&&y.Z.getPlayer(document.querySelector(".hero__video").id).pause(),q.restart();break;case 1:h.play(0);break;case 2:_.play();break;case 3:document.querySelectorAll(".lang__title .glitch-text .letter").forEach((e=>{r.ZP.to(".lang__text",{opacity:0,delay:.3}),r.ZP.to(e.querySelectorAll(".glitch"),{translateX:"100%",skewX:"10deg",stagger:.03,duration:.1,onComplete:()=>{u.play()}})}));break;case 4:r.ZP.to(".feed-screen",{"--y":"100vh","--bgc":"#ffffff",duration:0}),s.play()}else{if(1===a)f(1,0),v.restart();console.log(a)}setTimeout(e.enable,1e3)}}},v=r.ZP.timeline({...n,delay:.5,onStart:()=>{document.querySelector("body").classList.remove("_light-theme"),r.ZP.to("body",{backgroundColor:"#000000",duration:.5})}}),q=r.ZP.timeline({...n,paused:!0,onComplete:()=>{r.ZP.to("body",{backgroundColor:"#caff34",duration:.5,onComplete:()=>{h.revert(),g.revert(),g.play(0),document.querySelectorAll(".about__title .glitch-text .letter").forEach((e=>{r.ZP.to(e.querySelectorAll(".glitch"),{scaleX:1,stagger:.02,translateX:0,opacity:1}),r.ZP.to(e.querySelectorAll(".glitch span"),{left:0,stagger:.02,delay:.1})})),document.querySelector("body").classList.add("_light-theme"),r.ZP.to("header",{opacity:1,duration:.5}),f(0,1)}}),r.ZP.to("header",{opacity:0,duration:.5})}});q.to(".hero__title span:first-child",{translateX:"-110%"}).to(".hero__title span:last-child",{translateX:"110%",onStart:()=>{r.ZP.to(".hero__text .char",{opacity:0,stagger:-.01,ease:"power1.out"})}},0).to(".hero__video-wrap",{opacity:0},.5);var P=o(350);const b=()=>{document.querySelectorAll("[data-videojs]").forEach((e=>{const t=e.closest(".hero"),o=(0,y.Z)(e,{autoplay:"muted",loop:!t,playsinline:!0,normalizeAutoplay:!0,noUITitleAttributes:!0,disablePictureInPicture:!0,controlBar:!1,controls:!1,bigPlayButton:!1,titleBar:!1,textTrackDisplay:!1,children:["mediaLoader"],children_:[]});setTimeout((()=>{o.ready((()=>{o.play()}))}),100)}))};!document.querySelector(".mainpage")&&b();const L=()=>{document.documentElement.classList.add("_page-loaded"),A(),r.ZP.to(".loader",{opacity:0,duration:.7}),setTimeout((()=>{document.querySelector(".loader").remove(),b(),S(),r.ZP.to(document.querySelectorAll("[data-header-anim]"),{opacity:1,stagger:.2}),v.to(".hero__container, .hero__video-wrap",{opacity:1},0),v.to(".hero__title span",{translateX:0},.5),v.to(".hero__text .char",{opacity:1,stagger:.01,ease:"power1.out"},0)}),700)};document.querySelector(".loader")?((0,a.qg)(),(0,a.C7)("DrukTextWideCyr").then((()=>{document.documentElement.classList.add("_fonts-loaded"),r.ZP.to(".loader__text .char",{duration:.3,opacity:1,stagger:.1,ease:"power1.out"})})).catch((()=>{console.warn("font could not be loaded")})),window.addEventListener("load",L)):window.addEventListener("load",(function(){document.documentElement.classList.add("_page-loaded")}));const x=r.ZP.matchMedia(),Z=window.matchMedia("(max-width: 64.05em)"),E=window.matchMedia("(max-width: 48em)"),k=document.querySelector(".header"),A=()=>{if(document.querySelectorAll(".glitch-text").length){const e=document.querySelectorAll(".glitch-text"),t=(e,t)=>e.split("").map((e=>(e=>{let o='<div class="letter">';for(let a=1;a<=10;a++)o+=`<div class="glitch" style="transform: translateX(${-30*a}px) scaleX(${1/a});opacity: 0"><span style="top: -${a*((t.dataset.glitchSize?+t.dataset.glitchSize:170)/10)}px">${e}</span></div>`;return o+="</div>",o})(e))).join("");e.forEach((e=>{const o=e.querySelector(".glitch-text-content");o.innerHTML=t(o.innerHTML,e);const a=e.querySelectorAll(".letter");for(let t=1;t<a.length;t++){const o=a[t];e.closest(".victory")?o.style.transform=`translateX(-${31*t}px)`:e.closest(".lang")?o.style.transform=`translateX(-${22*t}px)`:o.style.transform=`translateX(-${13*t}px)`}})),r.ZP.set(".hero__container, .hero__video-wrap, .victory__container,.feed-screen__slide:first-child .feed-card__inner, .feed-screen__slide:nth-child(2) .feed-card__inner, .feed-screen__slide:nth-child(3) .feed-card__inner, .feed-screen__navigation",{opacity:0}),r.ZP.set(".lang__image-wrap",{opacity:0,translateX:-65}),r.ZP.set(".hero__title span:first-child",{translateX:"-110%"}),r.ZP.set(".hero__title span:last-child",{translateX:"110%"}),r.ZP.set(document.querySelectorAll("[data-header-anim]"),{opacity:0}),r.ZP.set(".about__image-wrap",{translateX:-450,opacity:0}),r.ZP.set(".lang__title [data-animate-text='1'], .lang__title [data-animate-text='2'], .lang__title .glitch-text",{translateX:"-100%",opacity:0}),r.ZP.set(".glitch",{})}},X=()=>{document.documentElement.classList.remove("_show-cart-widget"),(0,a.xF)()},T=()=>{document.documentElement.classList.remove("_show-header-menu"),k.classList.remove("_dark-theme"),(0,a.xF)()},C=e=>{P.locoScroll&&x.add("(min-width: 48em)",(()=>(e.classList.contains("header")&&e.classList.add("fixed"),e.setAttribute("data-scroll",""),e.setAttribute("data-scroll-sticky",""),e.setAttribute("data-scroll-target","#item-card"),P.locoScroll.update(),()=>{e.classList.contains("header")&&e.classList.remove("fixed"),e.removeAttribute("style"),e.removeAttribute("data-scroll"),e.removeAttribute("data-scroll-sticky"),e.removeAttribute("data-scroll-target"),P.locoScroll.update()})))};document.addEventListener("click",(e=>{const{target:t}=e;t.closest(".nav-row__hamburger")&&(document.documentElement.classList.toggle("_show-header-menu"),document.querySelector("._show-header-menu")?((0,a.qg)(),k.classList.add("_dark-theme")):T()),Z.matches&&(t.closest(".actions-nav-row__item_cart .actions-nav-row__txt")&&(document.documentElement.classList.remove("_show-header-menu"),document.documentElement.classList.toggle("_show-cart-widget"),document.querySelector("._show-cart-widget")&&k.classList.remove("_dark-theme")),!document.querySelector("._show-cart-widget")||t.closest(".actions-nav-row__item_cart")&&!t.closest(".cart-widget__close-btn")||X()),t.closest(".filter__btn")?(document.documentElement.classList.toggle("_show-filters"),E.matches&&(0,a.BQ)()):!t.closest(".filter__close-btn")&&t.closest(".filter__body")||(document.documentElement.classList.remove("_show-filters"),E.matches&&(0,a.xF)())})),Z.addEventListener("change",(()=>{Z.matches?document.documentElement.classList.remove("_is-locked"):(document.querySelector("section._fw")&&document.documentElement.classList.add("_is-locked"),document.querySelector("._show-header-menu")&&T()),!E.matches&&document.querySelector("._show-cart-widget")&&X()})),document.addEventListener("DOMContentLoaded",(function(){document.getElementById("item-card")&&P.locoScroll&&(C(document.querySelector(".header")),C(document.querySelector(".item-card__thumbs-swiper")),C(document.querySelector(".item-card__content")),P.locoScroll.update()),document.querySelector(".footer-main__anchor")&&P.locoScroll&&document.querySelector(".footer-main__anchor").addEventListener("click",(function(){P.locoScroll.scrollTo(0)})),document.querySelector(".item-card")&&document.querySelector(".header").classList.add("fixed"),document.querySelector("section._fw")&&(!Z.matches&&document.documentElement.classList.add("_is-locked"),document.querySelector("header").classList.add("absolute")),document.querySelector("body._light-theme")&&document.querySelector("header").classList.add("_dark-theme"),document.querySelector(".hero")&&document.documentElement.classList.add("mainpage")})),P.locoScroll&&document.addEventListener("mouseover",(function(e){e.target.closest("[data-sb]")?P.locoScroll.stop():P.locoScroll.start()})),window.innerWidth>1024&&Promise.resolve().then(o.bind(o,350)),Promise.all([o.e(57),o.e(247)]).then(o.bind(o,247)),o.e(92).then(o.bind(o,92)),Promise.all([o.e(430),o.e(678)]).then(o.bind(o,404)),o.e(34).then(o.t.bind(o,34,23)),a.TU(),a.og(),o.e(691).then(o.bind(o,691))},659:(e,t,o)=>{"use strict";o.d(t,{BQ:()=>l,C7:()=>u,GK:()=>i,TU:()=>s,og:()=>d,qg:()=>n,xF:()=>c});var a=o(350),r=o(358);window.matchMedia("(max-width: 48em)"),window.matchMedia("(max-width: 64.05em)");const l=function(){document.documentElement.classList.contains("lock")?c(0):n(0)},c=function(){document.querySelector(".hero")?r.ZP.set("body",{clearProps:"overflow, touch-action"}):document.querySelector("._is-locked")||setTimeout((()=>{a.locoScroll.start(),console.log("unlock"),document.documentElement.classList.remove("_lock")}),0)},n=function(){document.querySelector(".hero")?r.ZP.set("body",{overflow:"hidden","touch-action":"none"}):document.querySelector("._is-locked")||setTimeout((()=>{a.locoScroll.stop(),console.log("lock"),document.documentElement.classList.add("_lock")}),0)};const i=(e,t)=>{for(var o=0;o<e.length;o++)e[o].classList.remove(t)},s=()=>{document.querySelectorAll(".current-year").length&&document.querySelectorAll(".current-year").forEach((e=>{e.innerHTML=(new Date).getFullYear()}))},d=()=>{document.querySelectorAll("[data-toggle-class]").length&&document.querySelectorAll("[data-toggle-class]").forEach((e=>{e.querySelectorAll("*").forEach((t=>{t.addEventListener("click",(function(){i(e.getElementsByTagName("*"),e.dataset.toggleClass),t.classList.add(e.dataset.toggleClass)}))}))}))},u=e=>new Promise(((t,o)=>{if(document.fonts&&document.fonts.ready)document.fonts.ready.then(t);else{new FontFaceObserver(e,{weight:"normal"}).load().then(t).catch(o)}}))},893:()=>{}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUc4SCxXQUFZLElBQUl1QixNQUFPQyxhQUFhLEdBRTNDLEVBR1dDLEVBQWNBLEtBQ3JCNUssU0FBU0UsaUJBQWlCLHVCQUF1QjhCLFFBQ25EaEMsU0FBU0UsaUJBQWlCLHVCQUF1QkMsU0FBUzBLLElBQ3hEQSxFQUFRM0ssaUJBQWlCLEtBQUtDLFNBQVNrQixJQUNyQ0EsRUFBR2hCLGlCQUFpQixTQUFTLFdBQzNCVCxFQUNFaUwsRUFBUUMscUJBQXFCLEtBQzdCRCxFQUFRL0YsUUFBUThGLGFBRWxCdkosRUFBR3hCLFVBQVVDLElBQUkrSyxFQUFRL0YsUUFBUThGLFlBQ25DLEdBQUUsR0FDRixHQUVOLEVBR1czQyxFQUFvQjhDLEdBQ3hCLElBQUlDLFNBQVEsQ0FBQ0MsRUFBU0MsS0FFM0IsR0FBSWxMLFNBQVNtTCxPQUFTbkwsU0FBU21MLE1BQU12RCxNQUNuQzVILFNBQVNtTCxNQUFNdkQsTUFBTU0sS0FBSytDLE9BQ3JCLENBRVksSUFBSUcsaUJBQWlCTCxFQUFVLENBQzlDTSxPQUFRLFdBR0RDLE9BQU9wRCxLQUFLK0MsR0FBUzlDLE1BQU0rQyxFQUN0QyxJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2VicGFjay1zZXR1cC8uL3NyYy9qcy9hbmltL2l0ZW0tY2FyZC1jYXJvdXNlbC5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXNldHVwLy4vc3JjL2pzL2xpYi9sb2NvbW90aXZlLXNjcm9sbC5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXNldHVwLy4vc3JjL2pzL2FuaW0vdHJhbnNpdGlvbnMuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay1zZXR1cC8uL3NyYy9qcy9hbmltL3RyYW5zaXRpb25zL2ZlZWQuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay1zZXR1cC8uL3NyYy9qcy9hbmltL3NjcmVlbi9mZWVkLmpzIiwid2VicGFjazovL3dlYnBhY2stc2V0dXAvLi9zcmMvanMvYW5pbS90cmFuc2l0aW9ucy9sYW5nLmpzIiwid2VicGFjazovL3dlYnBhY2stc2V0dXAvLi9zcmMvanMvYW5pbS9zY3JlZW4vbGFuZy5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXNldHVwLy4vc3JjL2pzL2FuaW0vdHJhbnNpdGlvbnMvdmljdG9yeS5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXNldHVwLy4vc3JjL2pzL2FuaW0vc2NyZWVuL3ZpY3RvcnkuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay1zZXR1cC8uL3NyYy9qcy9hbmltL3RyYW5zaXRpb25zL2Fib3V0LmpzIiwid2VicGFjazovL3dlYnBhY2stc2V0dXAvLi9zcmMvanMvYW5pbS9tYWlucGFnZS1zY3JvbGwuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay1zZXR1cC8uL3NyYy9qcy9hbmltL3NjcmVlbi9oZXJvLmpzIiwid2VicGFjazovL3dlYnBhY2stc2V0dXAvLi9zcmMvanMvYW5pbS9zY3JlZW4vYWJvdXQuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay1zZXR1cC8uL3NyYy9qcy9hbmltL3RyYW5zaXRpb25zL2hlcm8uanMiLCJ3ZWJwYWNrOi8vd2VicGFjay1zZXR1cC8uL3NyYy9qcy9saWIvdmlkZW8uanMiLCJ3ZWJwYWNrOi8vd2VicGFjay1zZXR1cC8uL3NyYy9qcy91dGlscy9zY3JpcHQuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay1zZXR1cC8uL3NyYy9qcy9hbmltL3RyYW5zaXRpb25zL2hlYWRlci5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXNldHVwLy4vc3JjL2pzL3BhZ2VzL2ZlZWQuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay1zZXR1cC8uL3NyYy9qcy91dGlscy91dGlscy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBsb2NvU2Nyb2xsIH0gZnJvbSBcIkBqcy9saWIvbG9jb21vdGl2ZS1zY3JvbGxcIjtcbmltcG9ydCB7IHJlbW92ZUNsYXNzZXMgfSBmcm9tIFwiQGpzL3V0aWxzL3V0aWxzXCI7XG5pbXBvcnQgZ3NhcCBmcm9tIFwiZ3NhcFwiO1xuaW1wb3J0IHsgU2Nyb2xsVHJpZ2dlciB9IGZyb20gXCJnc2FwL2FsbFwiO1xuXG5nc2FwLnJlZ2lzdGVyUGx1Z2luKFNjcm9sbFRyaWdnZXIpO1xuXG5jb25zdCBtbSA9IGdzYXAubWF0Y2hNZWRpYSgpO1xuXG5leHBvcnQgY29uc3Qgc2V0VGh1bWJzQ2xhc3NlcyA9IChpZHgsIHRodW1icykgPT4ge1xuICByZW1vdmVDbGFzc2VzKHRodW1icywgXCJfaXMtYWN0aXZlXCIpO1xuICB0aHVtYnNbaWR4XSAmJiB0aHVtYnNbaWR4XS5jbGFzc0xpc3QuYWRkKFwiX2lzLWFjdGl2ZVwiKTtcbn07XG5cbmV4cG9ydCBjb25zdCBpbml0SXRlbUNhcmRDYXJvdXNlbCA9ICgpID0+IHtcbiAgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuaXRlbS1jYXJkX19zd2lwZXJcIikpIHtcbiAgICBtbS5hZGQoXCIobWluLXdpZHRoOiAxMDI0cHgpXCIsICgpID0+IHtcbiAgICAgIGNvbnN0IHRodW1icyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuaXRlbS1jYXJkX190aHVtYnMtc2xpZGVcIik7XG5cbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuaXRlbS1jYXJkX19zbGlkZVwiKS5mb3JFYWNoKChzbGlkZSwgaWR4KSA9PiB7XG4gICAgICAgIHRodW1ic1tpZHhdLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKHdpbmRvdy5pbm5lcldpZHRoID4gMTAyNCkge1xuICAgICAgICAgICAgbG9jb1Njcm9sbC5zY3JvbGxUbyhzbGlkZSwge1xuICAgICAgICAgICAgICBvZmZzZXQ6IC0xLFxuICAgICAgICAgICAgICBjYWxsYmFjazogKCkgPT4ge1xuICAgICAgICAgICAgICAgIHNldFRodW1ic0NsYXNzZXMoaWR4LCB0aHVtYnMpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBnc2FwLnRpbWVsaW5lKHtcbiAgICAgICAgICBzY3JvbGxUcmlnZ2VyOiB7XG4gICAgICAgICAgICB0cmlnZ2VyOiBzbGlkZSxcbiAgICAgICAgICAgIHN0YXJ0OiBcInRvcCBjZW50ZXJcIixcbiAgICAgICAgICAgIGVuZDogXCJib3R0b20gYm90dG9tXCIsXG4gICAgICAgICAgICBvbkVudGVyOiAoZSkgPT4ge1xuICAgICAgICAgICAgICBzZXRUaHVtYnNDbGFzc2VzKGlkeCwgdGh1bWJzKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvbkVudGVyQmFjazogKGUpID0+IHtcbiAgICAgICAgICAgICAgc2V0VGh1bWJzQ2xhc3NlcyhpZHgsIHRodW1icyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn07XG4iLCJpbXBvcnQgeyBpbml0SXRlbUNhcmRDYXJvdXNlbCB9IGZyb20gXCJAanMvYW5pbS9pdGVtLWNhcmQtY2Fyb3VzZWxcIjtcbmltcG9ydCBMb2NvbW90aXZlU2Nyb2xsIGZyb20gXCJsb2NvbW90aXZlLXNjcm9sbFwiO1xuaW1wb3J0IGdzYXAgZnJvbSBcImdzYXBcIjtcbmltcG9ydCB7IFNjcm9sbFRyaWdnZXIgfSBmcm9tIFwiZ3NhcC9hbGxcIjtcbmltcG9ydCBcIi4uLy4uL3Njc3MvY29tbW9uL2xvY29tb3RpdmUtc2Nyb2xsLnNjc3NcIjtcblxuZ3NhcC5yZWdpc3RlclBsdWdpbihTY3JvbGxUcmlnZ2VyKTtcblxuZXhwb3J0IGNvbnN0IGxvY29TY3JvbGwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmhlcm9cIilcbiAgPyBudWxsXG4gIDogbmV3IExvY29tb3RpdmVTY3JvbGwoe1xuICAgICAgZWw6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIud3JhcHBlclwiKSxcbiAgICAgIHNtb290aDogdHJ1ZSxcbiAgICAgIG11bHRpcGxpZXI6IDEsXG4gICAgICBtb2JpbGU6IHtcbiAgICAgICAgc21vb3RoOiBmYWxzZSxcbiAgICAgIH0sXG4gICAgICB0YWJsZXQ6IHtcbiAgICAgICAgc21vb3RoOiBmYWxzZSxcbiAgICAgICAgYnJlYWtwb2ludDogMTAyNSxcbiAgICAgIH0sXG4gICAgfSk7XG5cbmlmIChsb2NvU2Nyb2xsKSB7XG4gIGNvbnN0IGZpeFNjcm9sbFRyaWdnZXIgPSAoKSA9PiB7XG4gICAgU2Nyb2xsVHJpZ2dlci5zY3JvbGxlclByb3h5KGxvY29TY3JvbGwuZWwsIHtcbiAgICAgIHNjcm9sbFRvcCh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgICAgID8gbG9jb1Njcm9sbC5zY3JvbGxUbyh2YWx1ZSwgMCwgMClcbiAgICAgICAgICA6IGxvY29TY3JvbGwuc2Nyb2xsLmluc3RhbmNlLnNjcm9sbC55O1xuICAgICAgfSxcbiAgICAgIGdldEJvdW5kaW5nQ2xpZW50UmVjdCgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB0b3A6IDAsXG4gICAgICAgICAgbGVmdDogMCxcbiAgICAgICAgICB3aWR0aDogd2luZG93LmlubmVyV2lkdGgsXG4gICAgICAgICAgaGVpZ2h0OiB3aW5kb3cuaW5uZXJIZWlnaHQsXG4gICAgICAgIH07XG4gICAgICB9LFxuICAgICAgcGluVHlwZTogbG9jb1Njcm9sbC5lbC5zdHlsZS50cmFuc2Zvcm0gPyBcInRyYW5zZm9ybVwiIDogXCJmaXhlZFwiLFxuICAgIH0pO1xuXG4gICAgU2Nyb2xsVHJpZ2dlci5hZGRFdmVudExpc3RlbmVyKFwicmVmcmVzaFwiLCAoKSA9PiBsb2NvU2Nyb2xsLnVwZGF0ZSgpKTtcbiAgICBTY3JvbGxUcmlnZ2VyLmRlZmF1bHRzKHsgc2Nyb2xsZXI6IGxvY29TY3JvbGwuZWwgfSk7XG5cbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIFNjcm9sbFRyaWdnZXIucmVmcmVzaCgpO1xuICAgICAgU2Nyb2xsVHJpZ2dlci51cGRhdGUoKTtcbiAgICB9LCAwKTtcbiAgfTtcblxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgZnVuY3Rpb24gKCkge1xuICAgIGZpeFNjcm9sbFRyaWdnZXIoKTtcbiAgICBpbml0SXRlbUNhcmRDYXJvdXNlbCgpO1xuXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBsb2NvU2Nyb2xsLnVwZGF0ZSgpO1xuICAgIH0sIDEwMDApO1xuICB9KTtcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgZnVuY3Rpb24gKCkge1xuICAgIGxvY29TY3JvbGwudXBkYXRlKCk7XG4gIH0pO1xufVxuIiwiaW1wb3J0IGdzYXAgZnJvbSBcImdzYXBcIjtcbmltcG9ydCBTcGxpdHRpbmcgZnJvbSBcInNwbGl0dGluZ1wiO1xuXG5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiW2RhdGEtc3BsaXR0aW5nXVwiKS5sZW5ndGggJiYgU3BsaXR0aW5nKCk7XG5cbmV4cG9ydCBjb25zdCBkZWZhdWx0cyA9IHsgZGVmYXVsdHM6IHsgZHVyYXRpb246IDAuNSB9IH07XG5cbmV4cG9ydCBjb25zdCBzZXREZWZhdWx0cyA9ICgpID0+IHtcbiAgZ3NhcC5zZXQoXG4gICAgXCIuaGVyb19fY29udGFpbmVyLCAuaGVyb19fdmlkZW8td3JhcCwgLnZpY3RvcnlfX2NvbnRhaW5lciwuZmVlZC1zY3JlZW5fX3NsaWRlOmZpcnN0LWNoaWxkIC5mZWVkLWNhcmRfX2lubmVyLCAuZmVlZC1zY3JlZW5fX3NsaWRlOm50aC1jaGlsZCgyKSAuZmVlZC1jYXJkX19pbm5lciwgLmZlZWQtc2NyZWVuX19zbGlkZTpudGgtY2hpbGQoMykgLmZlZWQtY2FyZF9faW5uZXIsIC5mZWVkLXNjcmVlbl9fbmF2aWdhdGlvblwiLFxuICAgIHtcbiAgICAgIG9wYWNpdHk6IDAsXG4gICAgfSxcbiAgKTtcbiAgZ3NhcC5zZXQoXCIubGFuZ19faW1hZ2Utd3JhcFwiLCB7IG9wYWNpdHk6IDAsIHRyYW5zbGF0ZVg6IC02NSB9KTtcbiAgZ3NhcC5zZXQoXCIuaGVyb19fdGl0bGUgc3BhbjpmaXJzdC1jaGlsZFwiLCB7IHRyYW5zbGF0ZVg6IFwiLTExMCVcIiB9KTtcbiAgZ3NhcC5zZXQoXCIuaGVyb19fdGl0bGUgc3BhbjpsYXN0LWNoaWxkXCIsIHsgdHJhbnNsYXRlWDogXCIxMTAlXCIgfSk7XG4gIGdzYXAuc2V0KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbZGF0YS1oZWFkZXItYW5pbV1cIiksIHsgb3BhY2l0eTogMCB9KTtcbiAgZ3NhcC5zZXQoXCIuYWJvdXRfX2ltYWdlLXdyYXBcIiwgeyB0cmFuc2xhdGVYOiAtNDUwLCBvcGFjaXR5OiAwIH0pO1xuICBnc2FwLnNldChcbiAgICBcIi5sYW5nX190aXRsZSBbZGF0YS1hbmltYXRlLXRleHQ9JzEnXSwgLmxhbmdfX3RpdGxlIFtkYXRhLWFuaW1hdGUtdGV4dD0nMiddLCAubGFuZ19fdGl0bGUgLmdsaXRjaC10ZXh0XCIsXG4gICAge1xuICAgICAgdHJhbnNsYXRlWDogXCItMTAwJVwiLFxuICAgICAgb3BhY2l0eTogMCxcbiAgICB9LFxuICApO1xuICBnc2FwLnNldChcIi5nbGl0Y2hcIiwge1xuICAgIC8vIG9wYWNpdHk6IDAsXG4gIH0pO1xufTtcbiIsImltcG9ydCB7IHNldEFjdGl2ZVNjcmVlbiB9IGZyb20gXCJAanMvYW5pbS9tYWlucGFnZS1zY3JvbGxcIjtcbmltcG9ydCB7IGRlZmF1bHRzIH0gZnJvbSBcIkBqcy9hbmltL3RyYW5zaXRpb25zXCI7XG5pbXBvcnQgZ3NhcCBmcm9tIFwiZ3NhcFwiO1xuXG5leHBvcnQgY29uc3QgZmVlZFRsID0gZ3NhcC50aW1lbGluZSh7IC4uLmRlZmF1bHRzLCBwYXVzZWQ6IHRydWUgfSk7XG5leHBvcnQgY29uc3QgZmVlZExlYXZlVGwgPSBnc2FwLnRpbWVsaW5lKHtcbiAgLi4uZGVmYXVsdHMsXG4gIHBhdXNlZDogdHJ1ZSxcbiAgb25Db21wbGV0ZTogKCkgPT4ge1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgc2V0QWN0aXZlU2NyZWVuKDQsIDUpO1xuICAgIH0sIDUwMCk7XG4gIH0sXG59KTtcblxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIGZ1bmN0aW9uICgpIHtcbiAgZmVlZExlYXZlVGxcbiAgICAudG8oXCIuZmVlZC1zY3JlZW5fX2hlYWQsIC5zd2lwZXItc2xpZGUtYWN0aXZlIC5mZWVkLWNhcmRfX2lubmVyXCIsIHtcbiAgICAgIG9wYWNpdHk6IDAsXG4gICAgfSlcbiAgICAudG8oXG4gICAgICBcIi5zd2lwZXItc2xpZGUtbmV4dCAuZmVlZC1jYXJkX19pbm5lciwgLnN3aXBlci1zbGlkZS1uZXh0ICsgLnN3aXBlci1zbGlkZSAuZmVlZC1jYXJkX19pbm5lclwiLFxuICAgICAgeyBvcGFjaXR5OiAwIH0sXG4gICAgICAwLjMsXG4gICAgKVxuICAgIC50byhcbiAgICAgIFwiLmZlZWQtc2NyZWVuXCIsXG4gICAgICB7XG4gICAgICAgIFwiLS15XCI6IDAsXG4gICAgICAgIG9uQ29tcGxldGU6ICgpID0+IHtcbiAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiYm9keVwiKS5jbGFzc0xpc3QuYWRkKFwiX2xpZ2h0LXRoZW1lXCIpO1xuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIDEsXG4gICAgKTtcblxuICBmZWVkVGxcbiAgICAudG8oXCIuZmVlZC1zY3JlZW5cIiwgeyBcIi0teVwiOiBcIi0xMDB2aFwiLCBkZWxheTogMC4zIH0pXG4gICAgLnRvKFxuICAgICAgXCIuc3dpcGVyLXNsaWRlLWFjdGl2ZSAuZmVlZC1jYXJkX19pbm5lciwgLnN3aXBlci1zbGlkZS1uZXh0IC5mZWVkLWNhcmRfX2lubmVyLCAuc3dpcGVyLXNsaWRlLW5leHQgKyAuc3dpcGVyLXNsaWRlIC5mZWVkLWNhcmRfX2lubmVyXCIsXG4gICAgICB7XG4gICAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAgIHN0YWdnZXI6IDAuMixcbiAgICAgIH0sXG4gICAgICAwLjUsXG4gICAgKVxuICAgIC50byhcIi5mZWVkLXNjcmVlbl9fbmF2aWdhdGlvblwiLCB7IG9wYWNpdHk6IDEgfSwgMC45KTtcbn0pO1xuIiwiaW1wb3J0IHsgZGVmYXVsdHMgfSBmcm9tIFwiQGpzL2FuaW0vdHJhbnNpdGlvbnNcIjtcbmltcG9ydCB7IGZlZWRMZWF2ZVRsLCBmZWVkVGwgfSBmcm9tIFwiQGpzL2FuaW0vdHJhbnNpdGlvbnMvZmVlZFwiO1xuaW1wb3J0IGdzYXAgZnJvbSBcImdzYXBcIjtcblxuZXhwb3J0IGNvbnN0IGVudGVyRmVlZFNjcmVlbiA9ICgpID0+IHtcbiAgZmVlZFRsLnBsYXkoKTtcbn07XG5cbmV4cG9ydCBjb25zdCBsZWF2ZUZlZWRTY3JlZW4gPSAoKSA9PiB7XG4gIGdzYXAudG8oXCIuZmVlZC1zY3JlZW5cIiwgeyBcIi0teVwiOiBcIjEwMHZoXCIsIFwiLS1iZ2NcIjogXCIjZmZmZmZmXCIsIGR1cmF0aW9uOiAwIH0pO1xuICBmZWVkTGVhdmVUbC5wbGF5KCk7XG59O1xuIiwiaW1wb3J0IHsgc2V0QWN0aXZlU2NyZWVuIH0gZnJvbSBcIkBqcy9hbmltL21haW5wYWdlLXNjcm9sbFwiO1xuaW1wb3J0IHsgZW50ZXJGZWVkU2NyZWVuIH0gZnJvbSBcIkBqcy9hbmltL3NjcmVlbi9mZWVkXCI7XG5pbXBvcnQgeyBkZWZhdWx0cyB9IGZyb20gXCJAanMvYW5pbS90cmFuc2l0aW9uc1wiO1xuaW1wb3J0IGdzYXAgZnJvbSBcImdzYXBcIjtcblxuZXhwb3J0IGNvbnN0IGxhbmdUbCA9IGdzYXAudGltZWxpbmUoeyAuLi5kZWZhdWx0cywgcGF1c2VkOiB0cnVlIH0pO1xuZXhwb3J0IGNvbnN0IGxhbmdMZWF2ZVRsID0gZ3NhcC50aW1lbGluZSh7XG4gIC4uLmRlZmF1bHRzLFxuICBwYXVzZWQ6IHRydWUsXG4gIG9uQ29tcGxldGU6ICgpID0+IHtcbiAgICBlbnRlckZlZWRTY3JlZW4oKTtcbiAgICBzZXRBY3RpdmVTY3JlZW4oMywgNCk7XG4gIH0sXG59KTtcblxubGFuZ0xlYXZlVGxcbiAgLnRvKCcubGFuZ19fdGl0bGUgW2RhdGEtYW5pbWF0ZS10ZXh0PVwiMVwiXSwgLmxhbmdfX2ltYWdlLXdyYXBfcmlnaHQnLCB7XG4gICAgb3BhY2l0eTogMCxcbiAgICB0cmFuc2xhdGVYOiBcIjEwMHZ3XCIsXG4gIH0pXG4gIC50byhcbiAgICAnLmxhbmdfX3RpdGxlIFtkYXRhLWFuaW1hdGUtdGV4dD1cIjJcIl0sIC5sYW5nX19pbWFnZS13cmFwX2xlZnQnLFxuICAgIHsgb3BhY2l0eTogMCwgdHJhbnNsYXRlWDogXCIxMDB2d1wiIH0sXG4gICAgMC4zLFxuICApO1xuXG5sYW5nVGxcbiAgLnRvKFwiLmxhbmdfX3RpdGxlIFtkYXRhLWFuaW1hdGUtdGV4dD0nMSddLCAubGFuZ19fdGl0bGUgLmdsaXRjaC10ZXh0XCIsIHtcbiAgICBvcGFjaXR5OiAxLFxuICAgIHRyYW5zbGF0ZVg6IDAsXG4gICAgb25TdGFydDogKCkgPT4ge1xuICAgICAgZ3NhcC50byhcIi5sYW5nX190aXRsZSAuZ2xpdGNoLXRleHRcIiwgeyB0cmFuc2xhdGVYOiA3Niwgb3BhY2l0eTogMSB9KTtcbiAgICAgIGRvY3VtZW50XG4gICAgICAgIC5xdWVyeVNlbGVjdG9yQWxsKFwiLmxhbmdfX3RpdGxlIC5nbGl0Y2gtdGV4dCAubGV0dGVyXCIpXG4gICAgICAgIC5mb3JFYWNoKChlbCkgPT4ge1xuICAgICAgICAgIGdzYXAudG8oZWwucXVlcnlTZWxlY3RvckFsbChcIi5nbGl0Y2hcIiksIHtcbiAgICAgICAgICAgIHRyYW5zbGF0ZVg6IDAsXG4gICAgICAgICAgICBza2V3WDogXCIwZGVnXCIsXG4gICAgICAgICAgICBzdGFnZ2VyOiAwLjAzLFxuICAgICAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgICAgIGR1cmF0aW9uOiAwLjEsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH0sXG4gIH0pXG4gIC50byhcIi5sYW5nX190aXRsZSBbZGF0YS1hbmltYXRlLXRleHQ9JzInXVwiLCB7XG4gICAgb3BhY2l0eTogMSxcbiAgICB0cmFuc2xhdGVYOiA0OTMsXG4gIH0pXG4gIC50byhcIi5sYW5nX19pbWFnZS13cmFwX3JpZ2h0XCIsIHsgb3BhY2l0eTogMSwgdHJhbnNsYXRlWDogMCB9LCAwLjUpXG4gIC50byhcbiAgICBcIi5sYW5nX19pbWFnZS13cmFwX2xlZnRcIixcbiAgICB7XG4gICAgICBvcGFjaXR5OiAxLFxuICAgICAgdHJhbnNsYXRlWDogMCxcbiAgICAgIG9uU3RhcnQ6ICgpID0+IHtcbiAgICAgICAgZ3NhcC50byhcIi5sYW5nX190ZXh0IC5jaGFyXCIsIHtcbiAgICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICAgIHN0YWdnZXI6IDAuMDEsXG4gICAgICAgICAgZWFzZTogXCJwb3dlcjEub3V0XCIsXG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICB9LFxuICAgIDEsXG4gICk7XG4iLCJpbXBvcnQgeyBsYW5nTGVhdmVUbCwgbGFuZ1RsIH0gZnJvbSBcIkBqcy9hbmltL3RyYW5zaXRpb25zL2xhbmdcIjtcbmltcG9ydCBnc2FwIGZyb20gXCJnc2FwXCI7XG5cbmV4cG9ydCBjb25zdCBlbnRlckxhbmdTY3JlZW4gPSAoKSA9PiB7XG4gIGxhbmdUbC5wbGF5KCk7XG59O1xuXG5leHBvcnQgY29uc3QgbGVhdmVMYW5nU2NyZWVuID0gKCkgPT4ge1xuICBkb2N1bWVudFxuICAgIC5xdWVyeVNlbGVjdG9yQWxsKFwiLmxhbmdfX3RpdGxlIC5nbGl0Y2gtdGV4dCAubGV0dGVyXCIpXG4gICAgLmZvckVhY2goKGVsKSA9PiB7XG4gICAgICBnc2FwLnRvKFwiLmxhbmdfX3RleHRcIiwgeyBvcGFjaXR5OiAwLCBkZWxheTogMC4zIH0pO1xuICAgICAgZ3NhcC50byhlbC5xdWVyeVNlbGVjdG9yQWxsKFwiLmdsaXRjaFwiKSwge1xuICAgICAgICB0cmFuc2xhdGVYOiBcIjEwMCVcIixcbiAgICAgICAgc2tld1g6IFwiMTBkZWdcIixcbiAgICAgICAgc3RhZ2dlcjogMC4wMyxcbiAgICAgICAgZHVyYXRpb246IDAuMSxcbiAgICAgICAgb25Db21wbGV0ZTogKCkgPT4ge1xuICAgICAgICAgIGxhbmdMZWF2ZVRsLnBsYXkoKTtcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgIH0pO1xufTtcbiIsImltcG9ydCB7IHNldEFjdGl2ZVNjcmVlbiB9IGZyb20gXCJAanMvYW5pbS9tYWlucGFnZS1zY3JvbGxcIjtcbmltcG9ydCB7IGVudGVyTGFuZ1NjcmVlbiB9IGZyb20gXCJAanMvYW5pbS9zY3JlZW4vbGFuZ1wiO1xuaW1wb3J0IHsgZGVmYXVsdHMgfSBmcm9tIFwiQGpzL2FuaW0vdHJhbnNpdGlvbnNcIjtcbmltcG9ydCBnc2FwIGZyb20gXCJnc2FwXCI7XG5cbmV4cG9ydCBjb25zdCB2aWN0b3J5VGwgPSBnc2FwLnRpbWVsaW5lKHsgLi4uZGVmYXVsdHMsIHBhdXNlZDogdHJ1ZSB9KTtcbmV4cG9ydCBjb25zdCB2aWN0b3J5TGVhdmVUbCA9IGdzYXAudGltZWxpbmUoeyAuLi5kZWZhdWx0cywgcGF1c2VkOiB0cnVlIH0pO1xuXG52aWN0b3J5VGxcbiAgLnRvKFwiLnZpY3RvcnlfX2NvbnRhaW5lclwiLCB7IFwiLS1ncmFkaWVudFwiOiBcIjEwJVwiLCBvcGFjaXR5OiAxIH0pXG4gIC50byhcbiAgICBcIi52aWN0b3J5X19jb250YWluZXJcIixcbiAgICB7XG4gICAgICBcIi0teVwiOiBcIjEwMCVcIixcbiAgICAgIGR1cmF0aW9uOiAwLjcsXG4gICAgICBvbkNvbXBsZXRlOiAoKSA9PiB7XG4gICAgICAgIGdzYXAudG8oXCIudmljdG9yeV9fY29udGFpbmVyXCIsIHtcbiAgICAgICAgICBcIi0tb3BhY2l0eVwiOiAwLFxuICAgICAgICAgIFwiLS15XCI6IDAsXG4gICAgICAgICAgXCItLWRlZzFcIjogXCIwZGVnXCIsXG4gICAgICAgICAgXCItLWRlZzJcIjogXCIxODBkZWdcIixcbiAgICAgICAgICBcIi0tZ3JhZGllbnRcIjogXCIxMDAlXCIsXG4gICAgICAgICAgZHVyYXRpb246IDAsXG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICB9LFxuICAgIDAsXG4gIClcbiAgLnRvKFxuICAgIFwiLnZpY3RvcnlfX3ZpZGVvLXdyYXBcIixcbiAgICB7XG4gICAgICBvcGFjaXR5OiAxLFxuICAgICAgb25TdGFydDogKCkgPT4ge1xuICAgICAgICBkb2N1bWVudFxuICAgICAgICAgIC5xdWVyeVNlbGVjdG9yQWxsKFwiLnZpY3RvcnlfX3RpdGxlIC5nbGl0Y2gtdGV4dCAubGV0dGVyXCIpXG4gICAgICAgICAgLmZvckVhY2goKGVsKSA9PiB7XG4gICAgICAgICAgICBnc2FwLnRvKGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCIuZ2xpdGNoXCIpLCB7XG4gICAgICAgICAgICAgIHRyYW5zbGF0ZVg6IDAsXG4gICAgICAgICAgICAgIHNrZXdYOiBcIjBkZWdcIixcbiAgICAgICAgICAgICAgc3RhZ2dlcjogMC4wMyxcbiAgICAgICAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgICAgICAgZHVyYXRpb246IDAuMSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgfSxcbiAgICB9LFxuICAgIDAsXG4gIClcbiAgLnRvKFxuICAgIFwiLnZpY3RvcnlfX3RleHQgLmNoYXJcIixcbiAgICB7XG4gICAgICBkdXJhdGlvbjogMC4zLFxuICAgICAgb3BhY2l0eTogMSxcbiAgICAgIHN0YWdnZXI6IDAuMDAxLFxuICAgICAgZWFzZTogXCJwb3dlcjEub3V0XCIsXG4gICAgfSxcbiAgICAwLjMsXG4gICk7XG5cbnZpY3RvcnlMZWF2ZVRsLnRvKFwiLnZpY3RvcnlfX2NvbnRhaW5lclwiLCB7XG4gIFwiLS1vcGFjaXR5XCI6IDEsXG4gIFwiLS1ncmFkaWVudFwiOiBcIjAlXCIsXG4gIG9uQ29tcGxldGU6ICgpID0+IHtcbiAgICBlbnRlckxhbmdTY3JlZW4oKTtcbiAgICBzZXRBY3RpdmVTY3JlZW4oMiwgMyk7XG4gIH0sXG59KTtcbiIsImltcG9ydCB7IHZpY3RvcnlMZWF2ZVRsLCB2aWN0b3J5VGwgfSBmcm9tIFwiQGpzL2FuaW0vdHJhbnNpdGlvbnMvdmljdG9yeVwiO1xuXG5leHBvcnQgY29uc3QgZW50ZXJWaWN0b3J5U2NyZWVuID0gKCkgPT4ge1xuICB2aWN0b3J5VGwucGxheSgpO1xufTtcblxuZXhwb3J0IGNvbnN0IGxlYXZlVmljdG9yeVNjcmVlbiA9ICgpID0+IHtcbiAgdmljdG9yeUxlYXZlVGwucGxheSgpO1xufTtcbiIsImltcG9ydCB7IHNldEFjdGl2ZVNjcmVlbiB9IGZyb20gXCJAanMvYW5pbS9tYWlucGFnZS1zY3JvbGxcIjtcbmltcG9ydCB7IGVudGVyVmljdG9yeVNjcmVlbiB9IGZyb20gXCJAanMvYW5pbS9zY3JlZW4vdmljdG9yeVwiO1xuaW1wb3J0IHsgZGVmYXVsdHMgfSBmcm9tIFwiQGpzL2FuaW0vdHJhbnNpdGlvbnNcIjtcbmltcG9ydCBnc2FwIGZyb20gXCJnc2FwXCI7XG5cbmV4cG9ydCBjb25zdCBsZWF2ZUFib3V0VGwgPSBnc2FwLnRpbWVsaW5lKHtcbiAgLi4uZGVmYXVsdHMsXG4gIHBhdXNlZDogdHJ1ZSxcbn0pO1xuXG5leHBvcnQgY29uc3QgYWJvdXRUbCA9IGdzYXBcbiAgLnRpbWVsaW5lKHsgLi4uZGVmYXVsdHMsIHBhdXNlZDogdHJ1ZSB9KVxuICAudG8oXCIuYWJvdXRfX3RleHQgLmNoYXJcIiwgeyBvcGFjaXR5OiAxLCBzdGFnZ2VyOiAwLjAxIH0pXG4gIC50byhcbiAgICBcIi5hYm91dF9faW1hZ2Utd3JhcFwiLFxuICAgIHtcbiAgICAgIHRyYW5zbGF0ZVg6IDAsXG4gICAgICBvcGFjaXR5OiAxLFxuICAgIH0sXG4gICAgMCxcbiAgKTtcbiIsImltcG9ydCB7IGVudGVyQWJvdXRTY3JlZW4sIGxlYXZlQWJvdXRTY3JlZW4gfSBmcm9tIFwiQGpzL2FuaW0vc2NyZWVuL2Fib3V0XCI7XG5pbXBvcnQgeyBsZWF2ZUZlZWRTY3JlZW4gfSBmcm9tIFwiQGpzL2FuaW0vc2NyZWVuL2ZlZWRcIjtcbmltcG9ydCB7IGxlYXZlSGVyb1NjcmVlbiB9IGZyb20gXCJAanMvYW5pbS9zY3JlZW4vaGVyb1wiO1xuaW1wb3J0IHsgbGVhdmVMYW5nU2NyZWVuIH0gZnJvbSBcIkBqcy9hbmltL3NjcmVlbi9sYW5nXCI7XG5pbXBvcnQge1xuICBlbnRlclZpY3RvcnlTY3JlZW4sXG4gIGxlYXZlVmljdG9yeVNjcmVlbixcbn0gZnJvbSBcIkBqcy9hbmltL3NjcmVlbi92aWN0b3J5XCI7XG5pbXBvcnQgeyBoZXJvVGwgfSBmcm9tIFwiQGpzL2FuaW0vdHJhbnNpdGlvbnMvaGVyb1wiO1xuaW1wb3J0IHsgbGFuZ0xlYXZlVGwgfSBmcm9tIFwiQGpzL2FuaW0vdHJhbnNpdGlvbnMvbGFuZ1wiO1xuaW1wb3J0IGdzYXAgZnJvbSBcImdzYXBcIjtcbmltcG9ydCB7IE9ic2VydmVyIH0gZnJvbSBcImdzYXAvT2JzZXJ2ZXJcIjtcblxuZ3NhcC5yZWdpc3RlclBsdWdpbihPYnNlcnZlcik7XG5cbmNvbnN0IHNjcmVlbnMgPSBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbZGF0YS1zY3JlZW5dXCIpKTtcblxuZXhwb3J0IGNvbnN0IHNldEFjdGl2ZVNjcmVlbiA9IChwcmV2LCBhY3RpdmUpID0+IHtcbiAgc2NyZWVuc1twcmV2XS5kYXRhc2V0LnNjcmVlbiA9IFwiXCI7XG4gIHNjcmVlbnNbYWN0aXZlXS5kYXRhc2V0LnNjcmVlbiA9IFwiYWN0aXZlXCI7XG59O1xuXG5leHBvcnQgY29uc3QgaW5pdE1haW5wYWdlU2Nyb2xsID0gKCkgPT4ge1xuICBpZiAoc2NyZWVucy5sZW5ndGgpIHtcbiAgICBjb25zdCBvYnNlcnZlciA9IE9ic2VydmVyLmNyZWF0ZSh7XG4gICAgICB0YXJnZXQ6IFwiLm1haW5wYWdlXCIsXG4gICAgICB0eXBlOiBcIndoZWVsLHRvdWNoXCIsXG4gICAgICB0b2xlcmFuY2U6IDIwMCxcbiAgICAgIG9uVXA6IChlKSA9PiB7XG4gICAgICAgIHNjcm9sbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1zY3JlZW49XCJhY3RpdmVcIl0nKSwgZmFsc2UpO1xuICAgICAgfSxcbiAgICAgIG9uRG93bjogKGUpID0+IHtcbiAgICAgICAgc2Nyb2xsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLXNjcmVlbj1cImFjdGl2ZVwiXScpLCB0cnVlKTtcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICBjb25zdCBzY3JvbGwgPSAoYWN0aXZlLCBpc05leHQpID0+IHtcbiAgICAgIGNvbnN0IGFjdGl2ZUlkeCA9IHNjcmVlbnMuaW5kZXhPZihhY3RpdmUpO1xuICAgICAgY29uc3QgcHJldmlvdXMgPSBzY3JlZW5zW2FjdGl2ZUlkeCAtIDFdID8gc2NyZWVuc1thY3RpdmVJZHggLSAxXSA6IG51bGw7XG5cbiAgICAgIG9ic2VydmVyLmRpc2FibGUoKTtcblxuICAgICAgaWYgKGlzTmV4dCkge1xuICAgICAgICBzd2l0Y2ggKGFjdGl2ZUlkeCkge1xuICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIGxlYXZlSGVyb1NjcmVlbigpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgbGVhdmVBYm91dFNjcmVlbigpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgbGVhdmVWaWN0b3J5U2NyZWVuKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICBsZWF2ZUxhbmdTY3JlZW4oKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgIGxlYXZlRmVlZFNjcmVlbigpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2l0Y2ggKGFjdGl2ZUlkeCkge1xuICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIHNldEFjdGl2ZVNjcmVlbigxLCAwKTtcbiAgICAgICAgICAgIGhlcm9UbC5yZXN0YXJ0KCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmxvZyhhY3RpdmVJZHgpO1xuICAgICAgfVxuXG4gICAgICBzZXRUaW1lb3V0KG9ic2VydmVyLmVuYWJsZSwgMTAwMCk7XG4gICAgfTtcbiAgfVxufTtcbiIsImltcG9ydCB7IGhlcm9MZWF2ZVRsIH0gZnJvbSBcIkBqcy9hbmltL3RyYW5zaXRpb25zL2hlcm9cIjtcbmltcG9ydCB2aWRlb2pzIGZyb20gXCJ2aWRlby5qc1wiO1xuXG5leHBvcnQgY29uc3QgbGVhdmVIZXJvU2NyZWVuID0gKCkgPT4ge1xuICB2aWRlb2pzLmdldFBsYXllcihkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmhlcm9fX3ZpZGVvXCIpLmlkKSAmJlxuICAgIHZpZGVvanMuZ2V0UGxheWVyKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuaGVyb19fdmlkZW9cIikuaWQpLnBhdXNlKCk7XG4gIGhlcm9MZWF2ZVRsLnJlc3RhcnQoKTtcbn07XG4iLCJpbXBvcnQgeyBhYm91dFRsLCBsZWF2ZUFib3V0VGwgfSBmcm9tIFwiQGpzL2FuaW0vdHJhbnNpdGlvbnMvYWJvdXRcIjtcbmltcG9ydCBnc2FwIGZyb20gXCJnc2FwXCI7XG5cbmV4cG9ydCBjb25zdCBsZWF2ZUFib3V0U2NyZWVuID0gKCkgPT4ge1xuICBsZWF2ZUFib3V0VGwucGxheSgwKTtcbn07XG5cbmV4cG9ydCBjb25zdCBlbnRlckFib3V0U2NyZWVuID0gKCkgPT4ge1xuICBsZWF2ZUFib3V0VGwucmV2ZXJ0KCk7XG4gIGFib3V0VGwucmV2ZXJ0KCk7XG4gIGFib3V0VGwucGxheSgwKTtcbiAgZG9jdW1lbnRcbiAgICAucXVlcnlTZWxlY3RvckFsbChcIi5hYm91dF9fdGl0bGUgLmdsaXRjaC10ZXh0IC5sZXR0ZXJcIilcbiAgICAuZm9yRWFjaCgoZWwpID0+IHtcbiAgICAgIGdzYXAudG8oZWwucXVlcnlTZWxlY3RvckFsbChcIi5nbGl0Y2hcIiksIHtcbiAgICAgICAgc2NhbGVYOiAxLFxuICAgICAgICBzdGFnZ2VyOiAwLjAyLFxuICAgICAgICB0cmFuc2xhdGVYOiAwLFxuICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgfSk7XG4gICAgICBnc2FwLnRvKGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCIuZ2xpdGNoIHNwYW5cIiksIHtcbiAgICAgICAgbGVmdDogMCxcbiAgICAgICAgc3RhZ2dlcjogMC4wMixcbiAgICAgICAgZGVsYXk6IDAuMSxcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJib2R5XCIpLmNsYXNzTGlzdC5hZGQoXCJfbGlnaHQtdGhlbWVcIik7XG4gIGdzYXAudG8oXCJoZWFkZXJcIiwgeyBvcGFjaXR5OiAxLCBkdXJhdGlvbjogMC41IH0pO1xufTtcbiIsImltcG9ydCB7IHNldEFjdGl2ZVNjcmVlbiB9IGZyb20gXCJAanMvYW5pbS9tYWlucGFnZS1zY3JvbGxcIjtcbmltcG9ydCB7IGVudGVyQWJvdXRTY3JlZW4gfSBmcm9tIFwiQGpzL2FuaW0vc2NyZWVuL2Fib3V0XCI7XG5pbXBvcnQgeyBkZWZhdWx0cyB9IGZyb20gXCJAanMvYW5pbS90cmFuc2l0aW9uc1wiO1xuaW1wb3J0IGdzYXAgZnJvbSBcImdzYXBcIjtcblxuZXhwb3J0IGNvbnN0IGhlcm9UbCA9IGdzYXAudGltZWxpbmUoe1xuICAuLi5kZWZhdWx0cyxcbiAgZGVsYXk6IDAuNSxcbiAgb25TdGFydDogKCkgPT4ge1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJib2R5XCIpLmNsYXNzTGlzdC5yZW1vdmUoXCJfbGlnaHQtdGhlbWVcIik7XG4gICAgZ3NhcC50byhcImJvZHlcIiwge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiBcIiMwMDAwMDBcIixcbiAgICAgIGR1cmF0aW9uOiAwLjUsXG4gICAgfSk7XG4gIH0sXG59KTtcbmV4cG9ydCBjb25zdCBoZXJvTGVhdmVUbCA9IGdzYXAudGltZWxpbmUoe1xuICAuLi5kZWZhdWx0cyxcbiAgcGF1c2VkOiB0cnVlLFxuICBvbkNvbXBsZXRlOiAoKSA9PiB7XG4gICAgZ3NhcC50byhcImJvZHlcIiwge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiBcIiNjYWZmMzRcIixcbiAgICAgIGR1cmF0aW9uOiAwLjUsXG4gICAgICBvbkNvbXBsZXRlOiAoKSA9PiB7XG4gICAgICAgIGVudGVyQWJvdXRTY3JlZW4oKTtcbiAgICAgICAgc2V0QWN0aXZlU2NyZWVuKDAsIDEpO1xuICAgICAgfSxcbiAgICB9KTtcbiAgICBnc2FwLnRvKFwiaGVhZGVyXCIsIHsgb3BhY2l0eTogMCwgZHVyYXRpb246IDAuNSB9KTtcbiAgfSxcbn0pO1xuXG5leHBvcnQgY29uc3QgYW5pbWF0ZUhlcm8gPSAoKSA9PiB7XG4gIGhlcm9UbC50byhcIi5oZXJvX19jb250YWluZXIsIC5oZXJvX192aWRlby13cmFwXCIsIHsgb3BhY2l0eTogMSB9LCAwKTtcbiAgaGVyb1RsLnRvKFxuICAgIFwiLmhlcm9fX3RpdGxlIHNwYW5cIixcbiAgICB7XG4gICAgICB0cmFuc2xhdGVYOiAwLFxuICAgIH0sXG4gICAgMC41LFxuICApO1xuICBoZXJvVGwudG8oXG4gICAgXCIuaGVyb19fdGV4dCAuY2hhclwiLFxuICAgIHtcbiAgICAgIG9wYWNpdHk6IDEsXG4gICAgICBzdGFnZ2VyOiAwLjAxLFxuICAgICAgZWFzZTogXCJwb3dlcjEub3V0XCIsXG4gICAgfSxcbiAgICAwLFxuICApO1xufTtcblxuaGVyb0xlYXZlVGxcbiAgLnRvKFwiLmhlcm9fX3RpdGxlIHNwYW46Zmlyc3QtY2hpbGRcIiwge1xuICAgIHRyYW5zbGF0ZVg6IFwiLTExMCVcIixcbiAgfSlcbiAgLnRvKFxuICAgIFwiLmhlcm9fX3RpdGxlIHNwYW46bGFzdC1jaGlsZFwiLFxuICAgIHtcbiAgICAgIHRyYW5zbGF0ZVg6IFwiMTEwJVwiLFxuICAgICAgb25TdGFydDogKCkgPT4ge1xuICAgICAgICBnc2FwLnRvKFwiLmhlcm9fX3RleHQgLmNoYXJcIiwge1xuICAgICAgICAgIG9wYWNpdHk6IDAsXG4gICAgICAgICAgc3RhZ2dlcjogLTAuMDEsXG4gICAgICAgICAgZWFzZTogXCJwb3dlcjEub3V0XCIsXG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICB9LFxuICAgIDAsXG4gIClcbiAgLnRvKFwiLmhlcm9fX3ZpZGVvLXdyYXBcIiwgeyBvcGFjaXR5OiAwIH0sIDAuNSk7XG4iLCJpbXBvcnQgdmlkZW9qcyBmcm9tIFwidmlkZW8uanNcIjtcblxuZXhwb3J0IGNvbnN0IGluaXRWaWRlb0pTID0gKCkgPT4ge1xuICBjb25zdCB2aWRlb3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiW2RhdGEtdmlkZW9qc11cIik7XG4gIHZpZGVvcy5mb3JFYWNoKCh2aWRlbykgPT4ge1xuICAgIGNvbnN0IGlzSGVybyA9IHZpZGVvLmNsb3Nlc3QoXCIuaGVyb1wiKTtcblxuICAgIGNvbnN0IHBsYXllciA9IHZpZGVvanModmlkZW8sIHtcbiAgICAgIGF1dG9wbGF5OiBcIm11dGVkXCIsXG4gICAgICBsb29wOiAhaXNIZXJvLFxuICAgICAgcGxheXNpbmxpbmU6IHRydWUsXG4gICAgICBub3JtYWxpemVBdXRvcGxheTogdHJ1ZSxcbiAgICAgIG5vVUlUaXRsZUF0dHJpYnV0ZXM6IHRydWUsXG4gICAgICBkaXNhYmxlUGljdHVyZUluUGljdHVyZTogdHJ1ZSxcbiAgICAgIGNvbnRyb2xCYXI6IGZhbHNlLFxuICAgICAgY29udHJvbHM6IGZhbHNlLFxuICAgICAgYmlnUGxheUJ1dHRvbjogZmFsc2UsXG4gICAgICB0aXRsZUJhcjogZmFsc2UsXG4gICAgICB0ZXh0VHJhY2tEaXNwbGF5OiBmYWxzZSxcbiAgICAgIGNoaWxkcmVuOiBbXCJtZWRpYUxvYWRlclwiXSxcbiAgICAgIGNoaWxkcmVuXzogW10sXG4gICAgfSk7XG5cbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHBsYXllci5yZWFkeSgoKSA9PiB7XG4gICAgICAgIHBsYXllci5wbGF5KCk7XG4gICAgICB9KTtcbiAgICB9LCAxMDApO1xuICB9KTtcbn07XG5cbiFkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1haW5wYWdlXCIpICYmIGluaXRWaWRlb0pTKCk7XG4iLCJpbXBvcnQgeyBzZXREZWZhdWx0cyB9IGZyb20gXCJAanMvYW5pbS90cmFuc2l0aW9uc1wiO1xuaW1wb3J0IHsgYW5pbWF0ZUhlYWRlciB9IGZyb20gXCJAanMvYW5pbS90cmFuc2l0aW9ucy9oZWFkZXJcIjtcbmltcG9ydCB7IGFuaW1hdGVIZXJvIH0gZnJvbSBcIkBqcy9hbmltL3RyYW5zaXRpb25zL2hlcm9cIjtcbmltcG9ydCB7IGxvY29TY3JvbGwgfSBmcm9tIFwiQGpzL2xpYi9sb2NvbW90aXZlLXNjcm9sbFwiO1xuaW1wb3J0IHsgaW5pdFZpZGVvSlMgfSBmcm9tIFwiQGpzL2xpYi92aWRlb1wiO1xuaW1wb3J0IHtcbiAgYm9keUxvY2ssXG4gIGJvZHlMb2NrVG9nZ2xlLFxuICBib2R5VW5sb2NrLFxuICBjaGVja0ZvbnRzTG9hZGVkLFxufSBmcm9tIFwiQGpzL3V0aWxzL3V0aWxzXCI7XG5pbXBvcnQgeyBpbml0TWFpbnBhZ2VTY3JvbGwgfSBmcm9tIFwiLi4vYW5pbS9tYWlucGFnZS1zY3JvbGxcIjtcbmltcG9ydCBnc2FwIGZyb20gXCJnc2FwXCI7XG5cbmNvbnN0IHJlbW92ZUxvYWRlciA9ICgpID0+IHtcbiAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJfcGFnZS1sb2FkZWRcIik7XG5cbiAgc3BsaXRHbGl0Y2hUZXh0KCk7XG5cbiAgZ3NhcC50byhcIi5sb2FkZXJcIiwge1xuICAgIG9wYWNpdHk6IDAsXG4gICAgZHVyYXRpb246IDAuNyxcbiAgfSk7XG5cbiAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5sb2FkZXJcIikucmVtb3ZlKCk7XG5cbiAgICBpbml0VmlkZW9KUygpO1xuXG4gICAgaW5pdE1haW5wYWdlU2Nyb2xsKCk7XG5cbiAgICBhbmltYXRlSGVhZGVyKCk7XG4gICAgYW5pbWF0ZUhlcm8oKTtcbiAgfSwgNzAwKTtcbn07XG5cbmlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmxvYWRlclwiKSkge1xuICBib2R5TG9jaygpO1xuXG4gIGNoZWNrRm9udHNMb2FkZWQoXCJEcnVrVGV4dFdpZGVDeXJcIilcbiAgICAudGhlbigoKSA9PiB7XG4gICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0LmFkZChcIl9mb250cy1sb2FkZWRcIik7XG5cbiAgICAgIGdzYXAudG8oXCIubG9hZGVyX190ZXh0IC5jaGFyXCIsIHtcbiAgICAgICAgZHVyYXRpb246IDAuMyxcbiAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgc3RhZ2dlcjogMC4xLFxuICAgICAgICBlYXNlOiBcInBvd2VyMS5vdXRcIixcbiAgICAgIH0pO1xuICAgIH0pXG4gICAgLmNhdGNoKCgpID0+IHtcbiAgICAgIGNvbnNvbGUud2FybihcImZvbnQgY291bGQgbm90IGJlIGxvYWRlZFwiKTtcbiAgICB9KTtcblxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgcmVtb3ZlTG9hZGVyKTtcbn0gZWxzZSB7XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJfcGFnZS1sb2FkZWRcIik7XG4gIH0pO1xufVxuXG5jb25zdCBtZCA9IGdzYXAubWF0Y2hNZWRpYSgpO1xuY29uc3QgdG0gPSB3aW5kb3cubWF0Y2hNZWRpYShcIihtYXgtd2lkdGg6IDY0LjA1ZW0pXCIpO1xuY29uc3QgbW0gPSB3aW5kb3cubWF0Y2hNZWRpYShcIihtYXgtd2lkdGg6IDQ4ZW0pXCIpO1xuY29uc3QgaGVhZGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5oZWFkZXJcIik7XG5cbmNvbnN0IHNwbGl0R2xpdGNoVGV4dCA9ICgpID0+IHtcbiAgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuZ2xpdGNoLXRleHRcIikubGVuZ3RoKSB7XG4gICAgY29uc3QgaXRlbXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmdsaXRjaC10ZXh0XCIpO1xuXG4gICAgY29uc3Qgc3BsaXQgPSAodCwgaXRlbSkgPT4ge1xuICAgICAgbGV0IHJlcGVhdCA9ICh0KSA9PiB7XG4gICAgICAgIGxldCBzdHJpbmcgPSBgPGRpdiBjbGFzcz1cImxldHRlclwiPmA7XG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IDEwOyBpKyspIHtcbiAgICAgICAgICBjb25zdCBzaXplID0gaXRlbS5kYXRhc2V0LmdsaXRjaFNpemUgPyAraXRlbS5kYXRhc2V0LmdsaXRjaFNpemUgOiAxNzA7XG5cbiAgICAgICAgICBzdHJpbmcgKz0gYDxkaXYgY2xhc3M9XCJnbGl0Y2hcIiBzdHlsZT1cInRyYW5zZm9ybTogdHJhbnNsYXRlWCgke2kgKiAtMzB9cHgpIHNjYWxlWCgkezEgLyBpfSk7b3BhY2l0eTogMFwiPjxzcGFuIHN0eWxlPVwidG9wOiAtJHtpICogKHNpemUgLyAxMCl9cHhcIj4ke3R9PC9zcGFuPjwvZGl2PmA7XG4gICAgICAgIH1cbiAgICAgICAgc3RyaW5nICs9IGA8L2Rpdj5gO1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfTtcbiAgICAgIHJldHVybiB0XG4gICAgICAgIC5zcGxpdChcIlwiKVxuICAgICAgICAubWFwKCh0KSA9PiByZXBlYXQodCkpXG4gICAgICAgIC5qb2luKFwiXCIpO1xuICAgIH07XG5cbiAgICBpdGVtcy5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICBjb25zdCB0ZXh0ID0gaXRlbS5xdWVyeVNlbGVjdG9yKFwiLmdsaXRjaC10ZXh0LWNvbnRlbnRcIik7XG5cbiAgICAgIHRleHQuaW5uZXJIVE1MID0gc3BsaXQodGV4dC5pbm5lckhUTUwsIGl0ZW0pO1xuXG4gICAgICBjb25zdCBsZXR0ZXJzID0gaXRlbS5xdWVyeVNlbGVjdG9yQWxsKFwiLmxldHRlclwiKTtcblxuICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBsZXR0ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGxldHRlciA9IGxldHRlcnNbaV07XG5cbiAgICAgICAgaWYgKGl0ZW0uY2xvc2VzdChcIi52aWN0b3J5XCIpKSB7XG4gICAgICAgICAgbGV0dGVyLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGVYKC0ke2kgKiAzMX1weClgO1xuICAgICAgICB9IGVsc2UgaWYgKGl0ZW0uY2xvc2VzdChcIi5sYW5nXCIpKSB7XG4gICAgICAgICAgbGV0dGVyLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGVYKC0ke2kgKiAyMn1weClgO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxldHRlci5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlWCgtJHtpICogMTN9cHgpYDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgc2V0RGVmYXVsdHMoKTtcbiAgfVxufTtcblxuY29uc3QgY2xvc2VDYXJ0V2lkZ2V0ID0gKCkgPT4ge1xuICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcIl9zaG93LWNhcnQtd2lkZ2V0XCIpO1xuICBib2R5VW5sb2NrKCk7XG59O1xuXG5jb25zdCBjbG9zZUhlYWRlck1lbnUgPSAoKSA9PiB7XG4gIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwiX3Nob3ctaGVhZGVyLW1lbnVcIik7XG4gIGhlYWRlci5jbGFzc0xpc3QucmVtb3ZlKFwiX2RhcmstdGhlbWVcIik7XG4gIGJvZHlVbmxvY2soKTtcbn07XG5cbmNvbnN0IGluaXRIYW1idXJnZXJNZW51ID0gKCkgPT4ge1xuICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0LnRvZ2dsZShcIl9zaG93LWhlYWRlci1tZW51XCIpO1xuXG4gIGlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLl9zaG93LWhlYWRlci1tZW51XCIpKSB7XG4gICAgYm9keUxvY2soKTtcbiAgICBoZWFkZXIuY2xhc3NMaXN0LmFkZChcIl9kYXJrLXRoZW1lXCIpO1xuICB9IGVsc2Uge1xuICAgIGNsb3NlSGVhZGVyTWVudSgpO1xuICB9XG59O1xuXG5jb25zdCBpbml0Q2FydFdpZGdldCA9ICgpID0+IHtcbiAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJfc2hvdy1oZWFkZXItbWVudVwiKTtcbiAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsYXNzTGlzdC50b2dnbGUoXCJfc2hvdy1jYXJ0LXdpZGdldFwiKTtcblxuICBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5fc2hvdy1jYXJ0LXdpZGdldFwiKSkge1xuICAgIGhlYWRlci5jbGFzc0xpc3QucmVtb3ZlKFwiX2RhcmstdGhlbWVcIik7XG4gIH1cbn07XG5cbmNvbnN0IG9uQ2xpY2tIYW5kbGVyID0gKGUpID0+IHtcbiAgY29uc3QgeyB0YXJnZXQgfSA9IGU7XG5cbiAgaWYgKHRhcmdldC5jbG9zZXN0KFwiLm5hdi1yb3dfX2hhbWJ1cmdlclwiKSkge1xuICAgIGluaXRIYW1idXJnZXJNZW51KCk7XG4gIH1cblxuICBpZiAodG0ubWF0Y2hlcykge1xuICAgIGlmICh0YXJnZXQuY2xvc2VzdChcIi5hY3Rpb25zLW5hdi1yb3dfX2l0ZW1fY2FydCAuYWN0aW9ucy1uYXYtcm93X190eHRcIikpIHtcbiAgICAgIGluaXRDYXJ0V2lkZ2V0KCk7XG4gICAgfVxuICAgIGlmIChcbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuX3Nob3ctY2FydC13aWRnZXRcIikgJiZcbiAgICAgICghdGFyZ2V0LmNsb3Nlc3QoXCIuYWN0aW9ucy1uYXYtcm93X19pdGVtX2NhcnRcIikgfHxcbiAgICAgICAgdGFyZ2V0LmNsb3Nlc3QoXCIuY2FydC13aWRnZXRfX2Nsb3NlLWJ0blwiKSlcbiAgICApIHtcbiAgICAgIGNsb3NlQ2FydFdpZGdldCgpO1xuICAgIH1cbiAgfVxuXG4gIGlmICh0YXJnZXQuY2xvc2VzdChcIi5maWx0ZXJfX2J0blwiKSkge1xuICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKFwiX3Nob3ctZmlsdGVyc1wiKTtcblxuICAgIG1tLm1hdGNoZXMgJiYgYm9keUxvY2tUb2dnbGUoKTtcbiAgfSBlbHNlIGlmIChcbiAgICB0YXJnZXQuY2xvc2VzdChcIi5maWx0ZXJfX2Nsb3NlLWJ0blwiKSB8fFxuICAgICF0YXJnZXQuY2xvc2VzdChcIi5maWx0ZXJfX2JvZHlcIilcbiAgKSB7XG4gICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJfc2hvdy1maWx0ZXJzXCIpO1xuXG4gICAgbW0ubWF0Y2hlcyAmJiBib2R5VW5sb2NrKCk7XG4gIH1cbn07XG5cbmNvbnN0IG9uTWF0Y2hNZWRpYUNoYW5nZUhhbmRsZXIgPSAoKSA9PiB7XG4gIGlmICghdG0ubWF0Y2hlcykge1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJzZWN0aW9uLl9md1wiKSAmJlxuICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJfaXMtbG9ja2VkXCIpO1xuXG4gICAgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuX3Nob3ctaGVhZGVyLW1lbnVcIikpIHtcbiAgICAgIGNsb3NlSGVhZGVyTWVudSgpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcIl9pcy1sb2NrZWRcIik7XG4gIH1cblxuICBpZiAoIW1tLm1hdGNoZXMgJiYgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5fc2hvdy1jYXJ0LXdpZGdldFwiKSkge1xuICAgIGNsb3NlQ2FydFdpZGdldCgpO1xuICB9XG59O1xuXG5jb25zdCBzZXRMb2NvU2Nyb2xsQXR0ciA9IChlbCkgPT4ge1xuICBpZiAobG9jb1Njcm9sbCkge1xuICAgIG1kLmFkZChcIihtaW4td2lkdGg6IDQ4ZW0pXCIsICgpID0+IHtcbiAgICAgIGVsLmNsYXNzTGlzdC5jb250YWlucyhcImhlYWRlclwiKSAmJiBlbC5jbGFzc0xpc3QuYWRkKFwiZml4ZWRcIik7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXNjcm9sbFwiLCBcIlwiKTtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZShcImRhdGEtc2Nyb2xsLXN0aWNreVwiLCBcIlwiKTtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZShcImRhdGEtc2Nyb2xsLXRhcmdldFwiLCBcIiNpdGVtLWNhcmRcIik7XG4gICAgICBsb2NvU2Nyb2xsLnVwZGF0ZSgpO1xuXG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBlbC5jbGFzc0xpc3QuY29udGFpbnMoXCJoZWFkZXJcIikgJiYgZWwuY2xhc3NMaXN0LnJlbW92ZShcImZpeGVkXCIpO1xuICAgICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoXCJzdHlsZVwiKTtcbiAgICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKFwiZGF0YS1zY3JvbGxcIik7XG4gICAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShcImRhdGEtc2Nyb2xsLXN0aWNreVwiKTtcbiAgICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKFwiZGF0YS1zY3JvbGwtdGFyZ2V0XCIpO1xuICAgICAgICBsb2NvU2Nyb2xsLnVwZGF0ZSgpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxufTtcblxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIG9uQ2xpY2tIYW5kbGVyKTtcbnRtLmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgb25NYXRjaE1lZGlhQ2hhbmdlSGFuZGxlcik7XG5cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsIGZ1bmN0aW9uICgpIHtcbiAgaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiaXRlbS1jYXJkXCIpICYmIGxvY29TY3JvbGwpIHtcbiAgICBzZXRMb2NvU2Nyb2xsQXR0cihkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmhlYWRlclwiKSk7XG4gICAgc2V0TG9jb1Njcm9sbEF0dHIoZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5pdGVtLWNhcmRfX3RodW1icy1zd2lwZXJcIikpO1xuICAgIHNldExvY29TY3JvbGxBdHRyKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuaXRlbS1jYXJkX19jb250ZW50XCIpKTtcbiAgICBsb2NvU2Nyb2xsLnVwZGF0ZSgpO1xuICB9XG5cbiAgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZm9vdGVyLW1haW5fX2FuY2hvclwiKSAmJiBsb2NvU2Nyb2xsKSB7XG4gICAgZG9jdW1lbnRcbiAgICAgIC5xdWVyeVNlbGVjdG9yKFwiLmZvb3Rlci1tYWluX19hbmNob3JcIilcbiAgICAgIC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBsb2NvU2Nyb2xsLnNjcm9sbFRvKDApO1xuICAgICAgfSk7XG4gIH1cblxuICBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5pdGVtLWNhcmRcIikpIHtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmhlYWRlclwiKS5jbGFzc0xpc3QuYWRkKFwiZml4ZWRcIik7XG4gIH1cblxuICBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcInNlY3Rpb24uX2Z3XCIpKSB7XG4gICAgIXRtLm1hdGNoZXMgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJfaXMtbG9ja2VkXCIpO1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJoZWFkZXJcIikuY2xhc3NMaXN0LmFkZChcImFic29sdXRlXCIpO1xuICB9XG5cbiAgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJib2R5Ll9saWdodC10aGVtZVwiKSkge1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJoZWFkZXJcIikuY2xhc3NMaXN0LmFkZChcIl9kYXJrLXRoZW1lXCIpO1xuICB9XG5cbiAgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuaGVyb1wiKSlcbiAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0LmFkZChcIm1haW5wYWdlXCIpO1xufSk7XG5cbmlmIChsb2NvU2Nyb2xsKSB7XG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW92ZXJcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICBpZiAoZS50YXJnZXQuY2xvc2VzdChcIltkYXRhLXNiXVwiKSkge1xuICAgICAgbG9jb1Njcm9sbC5zdG9wKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY29TY3JvbGwuc3RhcnQoKTtcbiAgICB9XG4gIH0pO1xufVxuIiwiaW1wb3J0IGdzYXAgZnJvbSBcImdzYXBcIjtcblxuZXhwb3J0IGNvbnN0IGFuaW1hdGVIZWFkZXIgPSAoKSA9PiB7XG4gIGdzYXAudG8oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIltkYXRhLWhlYWRlci1hbmltXVwiKSwge1xuICAgIG9wYWNpdHk6IDEsXG4gICAgc3RhZ2dlcjogMC4yLFxuICB9KTtcbn07XG4iLCJpbXBvcnQgXCIuLi8uLi9zY3NzL3N0eWxlLnNjc3NcIjtcbmltcG9ydCBcIi4uLy4uL3Njc3MvcGFnZXMvZmVlZC5zY3NzXCI7XG5cbndpbmRvdy5pbm5lcldpZHRoID4gMTAyNCAmJiBpbXBvcnQoXCIuLi9saWIvbG9jb21vdGl2ZS1zY3JvbGxcIik7XG5pbXBvcnQoXCIuLi9saWIvc3dpcGVyXCIpO1xuaW1wb3J0KFwiLi4vbGliL2xpZ2h0Z2FsbGVyeVwiKTtcbmltcG9ydChcIi4uL2xpYi9zaW1wbGViYXJcIik7XG5pbXBvcnQoXCIuLi9saWIvZGRcIik7XG5cbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gXCIuLi91dGlscy91dGlsc1wiO1xudXRpbHMuc2V0Q3VycmVudFllYXIoKTtcbnV0aWxzLnRvZ2dsZUNsYXNzKCk7XG5cbmltcG9ydChcIi4uL3V0aWxzL3F1YW50aXR5XCIpO1xuaW1wb3J0IFwiLi4vdXRpbHMvc2NyaXB0XCI7XG4iLCJpbXBvcnQgeyBsb2NvU2Nyb2xsIH0gZnJvbSBcIkBqcy9saWIvbG9jb21vdGl2ZS1zY3JvbGxcIjtcbmltcG9ydCBnc2FwIGZyb20gXCJnc2FwXCI7XG5cbmNvbnN0IG1tID0gd2luZG93Lm1hdGNoTWVkaWEoXCIobWF4LXdpZHRoOiA0OGVtKVwiKTtcbmNvbnN0IHRtID0gd2luZG93Lm1hdGNoTWVkaWEoXCIobWF4LXdpZHRoOiA2NC4wNWVtKVwiKTtcblxuLyoqXG4gKiBzZXQgaGFzaCB0byB1cmxcbiAqIEBwYXJhbSB7c3RyaW5nfSBoYXNoXG4gKi9cbmV4cG9ydCBjb25zdCBzZXRIYXNoID0gKGhhc2gpID0+IHtcbiAgaGFzaCA9IGhhc2ggPyBgIyR7aGFzaH1gIDogd2luZG93LmxvY2F0aW9uLmhyZWYuc3BsaXQoXCIjXCIpWzBdO1xuICBoaXN0b3J5LnB1c2hTdGF0ZShcIlwiLCBcIlwiLCBoYXNoKTtcbn07XG5cbi8qKlxuICogZ2V0IGhhc2ggZnJvbSB1cmxcbiAqIEByZXR1cm5zIHN0cmluZ1xuICovXG5leHBvcnQgY29uc3QgZ2V0SGFzaCA9ICgpID0+IHtcbiAgaWYgKGxvY2F0aW9uLmhhc2gpIHtcbiAgICByZXR1cm4gbG9jYXRpb24uaGFzaC5yZXBsYWNlKFwiI1wiLCBcIlwiKTtcbiAgfVxufTtcblxuLy8gYm9keSBsb2NrXG5leHBvcnQgbGV0IGJvZHlMb2NrU3RhdHVzID0gdHJ1ZTtcbi8qKlxuICogdG9nZ2xlcyBib2R5IGxvY2tcbiAqIEBwYXJhbSB7bnVtYmVyfSBkZWxheVxuICovXG5leHBvcnQgY29uc3QgYm9keUxvY2tUb2dnbGUgPSAoZGVsYXkgPSA1MDApID0+IHtcbiAgaWYgKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoXCJsb2NrXCIpKSB7XG4gICAgYm9keVVubG9jaygwKTtcbiAgfSBlbHNlIHtcbiAgICBib2R5TG9jaygwKTtcbiAgfVxufTtcbi8qKlxuICogdW5sb2NrcyBib2R5XG4gKiBAcGFyYW0ge251bWJlcn0gZGVsYXlcbiAqL1xuZXhwb3J0IGNvbnN0IGJvZHlVbmxvY2sgPSAoZGVsYXkgPSA1MDApID0+IHtcbiAgaWYgKCFkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmhlcm9cIikpIHtcbiAgICBpZiAoIWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuX2lzLWxvY2tlZFwiKSkge1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGxvY29TY3JvbGwuc3RhcnQoKTtcblxuICAgICAgICBjb25zb2xlLmxvZyhcInVubG9ja1wiKTtcblxuICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcIl9sb2NrXCIpO1xuICAgICAgfSwgMCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGdzYXAuc2V0KFwiYm9keVwiLCB7IGNsZWFyUHJvcHM6IFwib3ZlcmZsb3csIHRvdWNoLWFjdGlvblwiIH0pO1xuICB9XG59O1xuLyoqXG4gKiBsb2NrcyBib2R5XG4gKiBAcGFyYW0ge251bWJlcn0gZGVsYXlcbiAqL1xuZXhwb3J0IGNvbnN0IGJvZHlMb2NrID0gKGRlbGF5ID0gNTAwKSA9PiB7XG4gIGlmICghZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5oZXJvXCIpKSB7XG4gICAgaWYgKCFkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLl9pcy1sb2NrZWRcIikpIHtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBsb2NvU2Nyb2xsLnN0b3AoKTtcblxuICAgICAgICBjb25zb2xlLmxvZyhcImxvY2tcIik7XG5cbiAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJfbG9ja1wiKTtcbiAgICAgIH0sIDApO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBnc2FwLnNldChcImJvZHlcIiwgeyBvdmVyZmxvdzogXCJoaWRkZW5cIiwgXCJ0b3VjaC1hY3Rpb25cIjogXCJub25lXCIgfSk7XG4gIH1cbn07XG5cbi8qKlxuICogbWFrZSB0aGUgYXJyYXkgdW5pcXVlXG4gKiBAcGFyYW0ge2FycmF5fSBhcnJheVxuICogQHJldHVybnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVuaXF1ZUFycmF5KGFycmF5KSB7XG4gIHJldHVybiBhcnJheS5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0sIGluZGV4LCBzZWxmKSB7XG4gICAgcmV0dXJuIHNlbGYuaW5kZXhPZihpdGVtKSA9PT0gaW5kZXg7XG4gIH0pO1xufVxuXG4vKipcbiAqXG4gKiBAcGFyYW0ge2FycmF5fSBhcnJheVxuICogQHBhcmFtIHtudW1iZXJ9IGRhdGFTZXRWYWx1ZVxuICogcHJvY2VzcyBtZWRpYSByZXF1ZXN0cyBmcm9tIGF0dHJpYnV0ZXNcbiAqL1xuZXhwb3J0IGNvbnN0IGRhdGFNZWRpYVF1ZXJpZXMgPSAoYXJyYXksIGRhdGFTZXRWYWx1ZSkgPT4ge1xuICAvLyBnZXQgb2JqZWN0cyB3aXRoIG1lZGlhIHF1ZXJpZXNcbiAgY29uc3QgbWVkaWEgPSBBcnJheS5mcm9tKGFycmF5KS5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0sIGluZGV4LCBzZWxmKSB7XG4gICAgaWYgKGl0ZW0uZGF0YXNldFtkYXRhU2V0VmFsdWVdKSB7XG4gICAgICByZXR1cm4gaXRlbS5kYXRhc2V0W2RhdGFTZXRWYWx1ZV0uc3BsaXQoXCIsXCIpWzBdO1xuICAgIH1cbiAgfSk7XG4gIC8vIG9iamVjdHMgd2l0aCBtZWRpYSBxdWVyaWVzIGluaXRpYWxpemF0aW9uXG4gIGlmIChtZWRpYS5sZW5ndGgpIHtcbiAgICBjb25zdCBicmVha3BvaW50c0FycmF5ID0gW107XG4gICAgbWVkaWEuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgY29uc3QgcGFyYW1zID0gaXRlbS5kYXRhc2V0W2RhdGFTZXRWYWx1ZV07XG4gICAgICBjb25zdCBicmVha3BvaW50ID0ge307XG4gICAgICBjb25zdCBwYXJhbXNBcnJheSA9IHBhcmFtcy5zcGxpdChcIixcIik7XG4gICAgICBicmVha3BvaW50LnZhbHVlID0gcGFyYW1zQXJyYXlbMF07XG4gICAgICBicmVha3BvaW50LnR5cGUgPSBwYXJhbXNBcnJheVsxXSA/IHBhcmFtc0FycmF5WzFdLnRyaW0oKSA6IFwibWF4XCI7XG4gICAgICBicmVha3BvaW50Lml0ZW0gPSBpdGVtO1xuICAgICAgYnJlYWtwb2ludHNBcnJheS5wdXNoKGJyZWFrcG9pbnQpO1xuICAgIH0pO1xuICAgIC8vIGdldCB1bmlxdWUgYnJlYWtwb2ludHNcbiAgICBsZXQgbWRRdWVyaWVzID0gYnJlYWtwb2ludHNBcnJheS5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIFwiKFwiICtcbiAgICAgICAgaXRlbS50eXBlICtcbiAgICAgICAgXCItd2lkdGg6IFwiICtcbiAgICAgICAgaXRlbS52YWx1ZSArXG4gICAgICAgIFwicHgpLFwiICtcbiAgICAgICAgaXRlbS52YWx1ZSArXG4gICAgICAgIFwiLFwiICtcbiAgICAgICAgaXRlbS50eXBlXG4gICAgICApO1xuICAgIH0pO1xuICAgIG1kUXVlcmllcyA9IHVuaXF1ZUFycmF5KG1kUXVlcmllcyk7XG4gICAgY29uc3QgbWRRdWVyaWVzQXJyYXkgPSBbXTtcblxuICAgIGlmIChtZFF1ZXJpZXMubGVuZ3RoKSB7XG4gICAgICAvLyB3b3JrIHdpdGggZXZlcnkgYnJlYWtwb2ludFxuICAgICAgbWRRdWVyaWVzLmZvckVhY2goKGJyZWFrcG9pbnQpID0+IHtcbiAgICAgICAgY29uc3QgcGFyYW1zQXJyYXkgPSBicmVha3BvaW50LnNwbGl0KFwiLFwiKTtcbiAgICAgICAgY29uc3QgbWVkaWFCcmVha3BvaW50ID0gcGFyYW1zQXJyYXlbMV07XG4gICAgICAgIGNvbnN0IG1lZGlhVHlwZSA9IHBhcmFtc0FycmF5WzJdO1xuICAgICAgICBjb25zdCBtYXRjaE1lZGlhID0gd2luZG93Lm1hdGNoTWVkaWEocGFyYW1zQXJyYXlbMF0pO1xuICAgICAgICAvLyBvYmplY3RzIHdpdGggY29uZGl0aW9uc1xuICAgICAgICBjb25zdCBpdGVtc0FycmF5ID0gYnJlYWtwb2ludHNBcnJheS5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICBpZiAoaXRlbS52YWx1ZSA9PT0gbWVkaWFCcmVha3BvaW50ICYmIGl0ZW0udHlwZSA9PT0gbWVkaWFUeXBlKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBtZFF1ZXJpZXNBcnJheS5wdXNoKHtcbiAgICAgICAgICBpdGVtc0FycmF5LFxuICAgICAgICAgIG1hdGNoTWVkaWEsXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gbWRRdWVyaWVzQXJyYXk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIHNtb290aGx5IHNsaWRlcyB1cFxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gdGFyZ2V0XG4gKiBAcGFyYW0ge251bWJlcn0gZHVyYXRpb25cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gc2hvd21vcmVcbiAqL1xuZXhwb3J0IGNvbnN0IF9zbGlkZVVwID0gKHRhcmdldCwgZHVyYXRpb24gPSA1MDAsIHNob3dtb3JlID0gMCkgPT4ge1xuICBpZiAoIXRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJfc2xpZGVcIikpIHtcbiAgICB0YXJnZXQuY2xhc3NMaXN0LmFkZChcIl9zbGlkZVwiKTtcbiAgICB0YXJnZXQuc3R5bGUudHJhbnNpdGlvblByb3BlcnR5ID0gXCJoZWlnaHQsIG1hcmdpbiwgcGFkZGluZ1wiO1xuICAgIHRhcmdldC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBkdXJhdGlvbiArIFwibXNcIjtcbiAgICB0YXJnZXQuc3R5bGUuaGVpZ2h0ID0gYCR7dGFyZ2V0Lm9mZnNldEhlaWdodH1weGA7XG4gICAgdGFyZ2V0Lm9mZnNldEhlaWdodDtcbiAgICB0YXJnZXQuc3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiO1xuICAgIHRhcmdldC5zdHlsZS5oZWlnaHQgPSBzaG93bW9yZSA/IGAke3Nob3dtb3JlfXJlbWAgOiBgMGA7XG4gICAgdGFyZ2V0LnN0eWxlLnBhZGRpbmdUb3AgPSAwO1xuICAgIHRhcmdldC5zdHlsZS5wYWRkaW5nQm90dG9tID0gMDtcbiAgICB0YXJnZXQuc3R5bGUubWFyZ2luVG9wID0gMDtcbiAgICB0YXJnZXQuc3R5bGUubWFyZ2luQm90dG9tID0gMDtcbiAgICB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0YXJnZXQuaGlkZGVuID0gIXNob3dtb3JlID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgIXNob3dtb3JlID8gdGFyZ2V0LnN0eWxlLnJlbW92ZVByb3BlcnR5KFwiaGVpZ2h0XCIpIDogbnVsbDtcbiAgICAgIHRhcmdldC5zdHlsZS5yZW1vdmVQcm9wZXJ0eShcInBhZGRpbmctdG9wXCIpO1xuICAgICAgdGFyZ2V0LnN0eWxlLnJlbW92ZVByb3BlcnR5KFwicGFkZGluZy1ib3R0b21cIik7XG4gICAgICB0YXJnZXQuc3R5bGUucmVtb3ZlUHJvcGVydHkoXCJtYXJnaW4tdG9wXCIpO1xuICAgICAgdGFyZ2V0LnN0eWxlLnJlbW92ZVByb3BlcnR5KFwibWFyZ2luLWJvdHRvbVwiKTtcbiAgICAgICFzaG93bW9yZSA/IHRhcmdldC5zdHlsZS5yZW1vdmVQcm9wZXJ0eShcIm92ZXJmbG93XCIpIDogbnVsbDtcbiAgICAgIHRhcmdldC5zdHlsZS5yZW1vdmVQcm9wZXJ0eShcInRyYW5zaXRpb24tZHVyYXRpb25cIik7XG4gICAgICB0YXJnZXQuc3R5bGUucmVtb3ZlUHJvcGVydHkoXCJ0cmFuc2l0aW9uLXByb3BlcnR5XCIpO1xuICAgICAgdGFyZ2V0LmNsYXNzTGlzdC5yZW1vdmUoXCJfc2xpZGVcIik7XG4gICAgICAvLyBjcmVhdGUgZXZlbnRcbiAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQoXG4gICAgICAgIG5ldyBDdXN0b21FdmVudChcInNsaWRlVXBEb25lXCIsIHtcbiAgICAgICAgICBkZXRhaWw6IHtcbiAgICAgICAgICAgIHRhcmdldDogdGFyZ2V0LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pLFxuICAgICAgKTtcbiAgICB9LCBkdXJhdGlvbik7XG4gIH1cbn07XG5cbi8qKlxuICogc21vb3RobHkgc2xpZGVzIGRvd25cbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHRhcmdldFxuICogQHBhcmFtIHtudW1iZXJ9IGR1cmF0aW9uXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHNob3dtb3JlXG4gKi9cbmV4cG9ydCBjb25zdCBfc2xpZGVEb3duID0gKHRhcmdldCwgZHVyYXRpb24gPSA1MDAsIHNob3dtb3JlID0gMCkgPT4ge1xuICBpZiAoIXRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJfc2xpZGVcIikpIHtcbiAgICB0YXJnZXQuY2xhc3NMaXN0LmFkZChcIl9zbGlkZVwiKTtcbiAgICB0YXJnZXQuaGlkZGVuID0gdGFyZ2V0LmhpZGRlbiA/IGZhbHNlIDogbnVsbDtcbiAgICBzaG93bW9yZSA/IHRhcmdldC5zdHlsZS5yZW1vdmVQcm9wZXJ0eShcImhlaWdodFwiKSA6IG51bGw7XG4gICAgbGV0IGhlaWdodCA9IHRhcmdldC5vZmZzZXRIZWlnaHQ7XG4gICAgdGFyZ2V0LnN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIjtcbiAgICB0YXJnZXQuc3R5bGUuaGVpZ2h0ID0gc2hvd21vcmUgPyBgJHtzaG93bW9yZX1yZW1gIDogYDBgO1xuICAgIHRhcmdldC5zdHlsZS5wYWRkaW5nVG9wID0gMDtcbiAgICB0YXJnZXQuc3R5bGUucGFkZGluZ0JvdHRvbSA9IDA7XG4gICAgdGFyZ2V0LnN0eWxlLm1hcmdpblRvcCA9IDA7XG4gICAgdGFyZ2V0LnN0eWxlLm1hcmdpbkJvdHRvbSA9IDA7XG4gICAgdGFyZ2V0Lm9mZnNldEhlaWdodDtcbiAgICB0YXJnZXQuc3R5bGUudHJhbnNpdGlvblByb3BlcnR5ID0gXCJoZWlnaHQsIG1hcmdpbiwgcGFkZGluZ1wiO1xuICAgIHRhcmdldC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBkdXJhdGlvbiArIFwibXNcIjtcbiAgICB0YXJnZXQuc3R5bGUuaGVpZ2h0ID0gaGVpZ2h0ICsgXCJweFwiO1xuICAgIHRhcmdldC5zdHlsZS5yZW1vdmVQcm9wZXJ0eShcInBhZGRpbmctdG9wXCIpO1xuICAgIHRhcmdldC5zdHlsZS5yZW1vdmVQcm9wZXJ0eShcInBhZGRpbmctYm90dG9tXCIpO1xuICAgIHRhcmdldC5zdHlsZS5yZW1vdmVQcm9wZXJ0eShcIm1hcmdpbi10b3BcIik7XG4gICAgdGFyZ2V0LnN0eWxlLnJlbW92ZVByb3BlcnR5KFwibWFyZ2luLWJvdHRvbVwiKTtcbiAgICB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0YXJnZXQuc3R5bGUucmVtb3ZlUHJvcGVydHkoXCJoZWlnaHRcIik7XG4gICAgICB0YXJnZXQuc3R5bGUucmVtb3ZlUHJvcGVydHkoXCJvdmVyZmxvd1wiKTtcbiAgICAgIHRhcmdldC5zdHlsZS5yZW1vdmVQcm9wZXJ0eShcInRyYW5zaXRpb24tZHVyYXRpb25cIik7XG4gICAgICB0YXJnZXQuc3R5bGUucmVtb3ZlUHJvcGVydHkoXCJ0cmFuc2l0aW9uLXByb3BlcnR5XCIpO1xuICAgICAgdGFyZ2V0LmNsYXNzTGlzdC5yZW1vdmUoXCJfc2xpZGVcIik7XG4gICAgICAvLyBjcmVhdGUgZXZlbnRcbiAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQoXG4gICAgICAgIG5ldyBDdXN0b21FdmVudChcInNsaWRlRG93bkRvbmVcIiwge1xuICAgICAgICAgIGRldGFpbDoge1xuICAgICAgICAgICAgdGFyZ2V0OiB0YXJnZXQsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSksXG4gICAgICApO1xuICAgIH0sIGR1cmF0aW9uKTtcbiAgfVxufTtcblxuLyoqXG4gKiB0b2dnbGVzIHNtb290aCBzbGlkZVxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gdGFyZ2V0XG4gKiBAcGFyYW0ge251bWJlcn0gZHVyYXRpb25cbiAqIEByZXR1cm5zIGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBfc2xpZGVUb2dnbGUgPSAodGFyZ2V0LCBkdXJhdGlvbiA9IDUwMCkgPT4ge1xuICBpZiAodGFyZ2V0LmhpZGRlbikge1xuICAgIHJldHVybiBfc2xpZGVEb3duKHRhcmdldCwgZHVyYXRpb24pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBfc2xpZGVVcCh0YXJnZXQsIGR1cmF0aW9uKTtcbiAgfVxufTtcblxuLyoqXG4gKiBjb252ZXJ0cyByZW0gdG8gcGl4ZWxzXG4gKiBAcGFyYW0ge251bWJlcn0gcmVtVmFsdWVcbiAqIEByZXR1cm5zIHN0cmluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gcmVtVG9QeChyZW1WYWx1ZSkge1xuICBjb25zdCBodG1sRm9udFNpemUgPSBwYXJzZUZsb2F0KFxuICAgIGdldENvbXB1dGVkU3R5bGUoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KS5mb250U2l6ZSxcbiAgKTtcblxuICBjb25zdCBweFZhbHVlID0gcmVtVmFsdWUgKiBodG1sRm9udFNpemU7XG5cbiAgcmV0dXJuIE1hdGgucm91bmQocHhWYWx1ZSkgKyBcInB4XCI7XG59XG5cbi8vIHJlbW92ZSBjbGFzcyBmcm9tIGFsbCBhcnJheSBlbGVtZW50c1xuZXhwb3J0IGNvbnN0IHJlbW92ZUNsYXNzZXMgPSAoYXJyYXksIGNsYXNzTmFtZSkgPT4ge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgYXJyYXlbaV0uY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpO1xuICB9XG59O1xuXG4vKipcbiAqIHNldCBjdXJyZW50IHllYXJcbiAqL1xuZXhwb3J0IGNvbnN0IHNldEN1cnJlbnRZZWFyID0gKCkgPT4ge1xuICBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5jdXJyZW50LXllYXJcIikubGVuZ3RoKSB7XG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5jdXJyZW50LXllYXJcIikuZm9yRWFjaCgoZWwpID0+IHtcbiAgICAgIGVsLmlubmVySFRNTCA9IG5ldyBEYXRlKCkuZ2V0RnVsbFllYXIoKTtcbiAgICB9KTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IHRvZ2dsZUNsYXNzID0gKCkgPT4ge1xuICBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIltkYXRhLXRvZ2dsZS1jbGFzc11cIikubGVuZ3RoKSB7XG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIltkYXRhLXRvZ2dsZS1jbGFzc11cIikuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiKlwiKS5mb3JFYWNoKChlbCkgPT4ge1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJlbW92ZUNsYXNzZXMoXG4gICAgICAgICAgICBlbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKSxcbiAgICAgICAgICAgIGVsZW1lbnQuZGF0YXNldC50b2dnbGVDbGFzcyxcbiAgICAgICAgICApO1xuICAgICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoZWxlbWVudC5kYXRhc2V0LnRvZ2dsZUNsYXNzKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGNoZWNrRm9udHNMb2FkZWQgPSAoZm9udE5hbWUpID0+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAvLyBVc2UgRm9udEZhY2VTZXQgQVBJIGlmIGF2YWlsYWJsZVxuICAgIGlmIChkb2N1bWVudC5mb250cyAmJiBkb2N1bWVudC5mb250cy5yZWFkeSkge1xuICAgICAgZG9jdW1lbnQuZm9udHMucmVhZHkudGhlbihyZXNvbHZlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gRmFsbGJhY2sgdG8gdXNpbmcgRm9udEZhY2VPYnNlcnZlciBmb3Igb2xkZXIgYnJvd3NlcnNcbiAgICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IEZvbnRGYWNlT2JzZXJ2ZXIoZm9udE5hbWUsIHtcbiAgICAgICAgd2VpZ2h0OiBcIm5vcm1hbFwiLFxuICAgICAgfSk7XG5cbiAgICAgIG9ic2VydmVyLmxvYWQoKS50aGVuKHJlc29sdmUpLmNhdGNoKHJlamVjdCk7XG4gICAgfVxuICB9KTtcbn07XG4iXSwibmFtZXMiOlsiZ3NhcCIsInJlZ2lzdGVyUGx1Z2luIiwiU2Nyb2xsVHJpZ2dlciIsIm1tIiwibWF0Y2hNZWRpYSIsInNldFRodW1ic0NsYXNzZXMiLCJpZHgiLCJ0aHVtYnMiLCJyZW1vdmVDbGFzc2VzIiwiY2xhc3NMaXN0IiwiYWRkIiwiaW5pdEl0ZW1DYXJkQ2Fyb3VzZWwiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9yRWFjaCIsInNsaWRlIiwiYWRkRXZlbnRMaXN0ZW5lciIsIndpbmRvdyIsImlubmVyV2lkdGgiLCJsb2NvU2Nyb2xsIiwic2Nyb2xsVG8iLCJvZmZzZXQiLCJjYWxsYmFjayIsInRpbWVsaW5lIiwic2Nyb2xsVHJpZ2dlciIsInRyaWdnZXIiLCJzdGFydCIsImVuZCIsIm9uRW50ZXIiLCJlIiwib25FbnRlckJhY2siLCJMb2NvbW90aXZlU2Nyb2xsIiwiZWwiLCJzbW9vdGgiLCJtdWx0aXBsaWVyIiwibW9iaWxlIiwidGFibGV0IiwiYnJlYWtwb2ludCIsImZpeFNjcm9sbFRyaWdnZXIiLCJzY3JvbGxlclByb3h5Iiwic2Nyb2xsVG9wIiwidmFsdWUiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzY3JvbGwiLCJpbnN0YW5jZSIsInkiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJ0b3AiLCJsZWZ0Iiwid2lkdGgiLCJoZWlnaHQiLCJpbm5lckhlaWdodCIsInBpblR5cGUiLCJzdHlsZSIsInRyYW5zZm9ybSIsInVwZGF0ZSIsImRlZmF1bHRzIiwic2Nyb2xsZXIiLCJzZXRUaW1lb3V0IiwicmVmcmVzaCIsIlNwbGl0dGluZyIsImR1cmF0aW9uIiwiZmVlZFRsIiwicGF1c2VkIiwiZmVlZExlYXZlVGwiLCJvbkNvbXBsZXRlIiwic2V0QWN0aXZlU2NyZWVuIiwidG8iLCJvcGFjaXR5IiwiZGVsYXkiLCJzdGFnZ2VyIiwibGFuZ1RsIiwibGFuZ0xlYXZlVGwiLCJwbGF5IiwidHJhbnNsYXRlWCIsIm9uU3RhcnQiLCJza2V3WCIsImVhc2UiLCJ2aWN0b3J5VGwiLCJ2aWN0b3J5TGVhdmVUbCIsImxlYXZlQWJvdXRUbCIsImFib3V0VGwiLCJPYnNlcnZlciIsInNjcmVlbnMiLCJBcnJheSIsImZyb20iLCJwcmV2IiwiYWN0aXZlIiwiZGF0YXNldCIsInNjcmVlbiIsImluaXRNYWlucGFnZVNjcm9sbCIsIm9ic2VydmVyIiwiY3JlYXRlIiwidGFyZ2V0IiwidHlwZSIsInRvbGVyYW5jZSIsIm9uVXAiLCJvbkRvd24iLCJpc05leHQiLCJhY3RpdmVJZHgiLCJpbmRleE9mIiwiZGlzYWJsZSIsInZpZGVvanMiLCJnZXRQbGF5ZXIiLCJpZCIsInBhdXNlIiwiaGVyb0xlYXZlVGwiLCJyZXN0YXJ0IiwiaGVyb1RsIiwiY29uc29sZSIsImxvZyIsImVuYWJsZSIsInJlbW92ZSIsImJhY2tncm91bmRDb2xvciIsInJldmVydCIsInNjYWxlWCIsImluaXRWaWRlb0pTIiwidmlkZW8iLCJpc0hlcm8iLCJjbG9zZXN0IiwicGxheWVyIiwiYXV0b3BsYXkiLCJsb29wIiwicGxheXNpbmxpbmUiLCJub3JtYWxpemVBdXRvcGxheSIsIm5vVUlUaXRsZUF0dHJpYnV0ZXMiLCJkaXNhYmxlUGljdHVyZUluUGljdHVyZSIsImNvbnRyb2xCYXIiLCJjb250cm9scyIsImJpZ1BsYXlCdXR0b24iLCJ0aXRsZUJhciIsInRleHRUcmFja0Rpc3BsYXkiLCJjaGlsZHJlbiIsImNoaWxkcmVuXyIsInJlYWR5IiwicmVtb3ZlTG9hZGVyIiwiZG9jdW1lbnRFbGVtZW50Iiwic3BsaXRHbGl0Y2hUZXh0IiwiYm9keUxvY2siLCJjaGVja0ZvbnRzTG9hZGVkIiwidGhlbiIsImNhdGNoIiwid2FybiIsIm1kIiwidG0iLCJoZWFkZXIiLCJpdGVtcyIsInNwbGl0IiwidCIsIml0ZW0iLCJtYXAiLCJzdHJpbmciLCJpIiwiZ2xpdGNoU2l6ZSIsInJlcGVhdCIsImpvaW4iLCJ0ZXh0IiwiaW5uZXJIVE1MIiwibGV0dGVycyIsImxldHRlciIsInNldCIsImNsb3NlQ2FydFdpZGdldCIsImJvZHlVbmxvY2siLCJjbG9zZUhlYWRlck1lbnUiLCJzZXRMb2NvU2Nyb2xsQXR0ciIsImNvbnRhaW5zIiwic2V0QXR0cmlidXRlIiwicmVtb3ZlQXR0cmlidXRlIiwidG9nZ2xlIiwibWF0Y2hlcyIsImJvZHlMb2NrVG9nZ2xlIiwib25NYXRjaE1lZGlhQ2hhbmdlSGFuZGxlciIsImdldEVsZW1lbnRCeUlkIiwic3RvcCIsInV0aWxzIiwiY2xlYXJQcm9wcyIsIm92ZXJmbG93IiwiYXJyYXkiLCJjbGFzc05hbWUiLCJzZXRDdXJyZW50WWVhciIsIkRhdGUiLCJnZXRGdWxsWWVhciIsInRvZ2dsZUNsYXNzIiwiZWxlbWVudCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiZm9udE5hbWUiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImZvbnRzIiwiRm9udEZhY2VPYnNlcnZlciIsIndlaWdodCIsImxvYWQiXSwic291cmNlUm9vdCI6IiJ9