(()=>{var e={202:()=>{(()=>{if(document.querySelectorAll(".cart .item-cart__price-value").length){const e=[];if(document.querySelectorAll(".cart .item-cart__price-value").forEach((t=>{const i=+t.innerHTML;!isNaN(i)&&e.push(+t.innerHTML)})),e.length){const t=e.reduce(((e,t)=>e+t),0);document.getElementById("totalPrice").innerHTML=t}}})()},34:()=>{"use strict";function e(e){this.type=e}e.prototype.init=function(){const e=this;this.оbjects=[],this.daClassname="_dynamic_adapt_",this.nodes=document.querySelectorAll("[data-da]");for(let e=0;e<this.nodes.length;e++){const t=this.nodes[e],i=t.dataset.da.trim().split(","),s={};s.element=t,s.parent=t.parentNode,s.destination=document.querySelector(i[0].trim()),s.breakpoint=i[1]?i[1].trim():"767",s.place=i[2]?i[2].trim():"last",s.index=this.indexInParent(s.parent,s.element),this.оbjects.push(s)}this.arraySort(this.оbjects),this.mediaQueries=Array.prototype.map.call(this.оbjects,(function(e){return"("+this.type+"-width: "+e.breakpoint+"px),"+e.breakpoint}),this),this.mediaQueries=Array.prototype.filter.call(this.mediaQueries,(function(e,t,i){return Array.prototype.indexOf.call(i,e)===t}));for(let t=0;t<this.mediaQueries.length;t++){const i=this.mediaQueries[t],s=String.prototype.split.call(i,","),r=window.matchMedia(s[0]),n=s[1],o=Array.prototype.filter.call(this.оbjects,(function(e){return e.breakpoint===n}));r.addListener((function(){e.mediaHandler(r,o)})),this.mediaHandler(r,o)}},e.prototype.mediaHandler=function(e,t){if(e.matches)for(let e=0;e<t.length;e++){const i=t[e];i.index=this.indexInParent(i.parent,i.element),this.moveTo(i.place,i.element,i.destination)}else for(let e=t.length-1;e>=0;e--){const i=t[e];i.element.classList.contains(this.daClassname)&&this.moveBack(i.parent,i.element,i.index)}},e.prototype.moveTo=function(e,t,i){t.classList.add(this.daClassname),"last"===e||e>=i.children.length?i.insertAdjacentElement("beforeend",t):"first"!==e?i.children[e].insertAdjacentElement("beforebegin",t):i.insertAdjacentElement("afterbegin",t)},e.prototype.moveBack=function(e,t,i){t.classList.remove(this.daClassname),void 0!==e.children[i]?e.children[i].insertAdjacentElement("beforebegin",t):e.insertAdjacentElement("beforeend",t)},e.prototype.indexInParent=function(e,t){const i=Array.prototype.slice.call(e.children);return Array.prototype.indexOf.call(i,t)},e.prototype.arraySort=function(e){"min"===this.type?Array.prototype.sort.call(e,(function(e,t){return e.breakpoint===t.breakpoint?e.place===t.place?0:"first"===e.place||"last"===t.place?-1:"last"===e.place||"first"===t.place?1:e.place-t.place:e.breakpoint-t.breakpoint})):Array.prototype.sort.call(e,(function(e,t){return e.breakpoint===t.breakpoint?e.place===t.place?0:"first"===e.place||"last"===t.place?1:"last"===e.place||"first"===t.place?-1:t.place-e.place:t.breakpoint-e.breakpoint}))};new e("max").init()},976:()=>{const e=e=>{e.target.classList.remove("_has-error")};document.querySelectorAll(".textarea__counter").length&&document.querySelectorAll(".textarea").forEach((e=>{const t=e.querySelector("textarea"),i=e.querySelector(".textarea__counter-current");t.addEventListener("input",(function(){i.innerHTML=t.value.trim().length}))}));document.querySelectorAll("form[data-validate]").length&&document.querySelectorAll("form[data-validate]").forEach((t=>{t.addEventListener("submit",(function(i){((t,i)=>{i.preventDefault(),t.querySelectorAll("input, textarea").forEach((t=>{t.value.length||t.classList.add("_has-error"),t.addEventListener("focusin",e)})),!t.querySelector("input._has-error")&&t.submit()})(t,i)}))}))},691:()=>{document.querySelectorAll(".quantity").length&&document.querySelectorAll(".quantity").forEach((e=>{const t=e.querySelector(".quantity__input"),i=e.querySelector(".quantity__count_minus"),s=e.querySelector(".quantity__count_add"),r=parseInt(t.min),n=parseInt(t.max),o=new RegExp(/(^\d*$)|(Backspace|Tab|Delete|ArrowLeft|ArrowRight)/);t.addEventListener("keypress",(function(e){!e.key.match(o)&&e.preventDefault()})),t.addEventListener("change",(function(){const e=parseInt(t.value);isNaN(e)||e<=r?(t.value=r,i.removeAttribute("disabled"),s.removeAttribute("disabled")):(i.removeAttribute("disabled"),e>=n?(t.value=n,s.setAttribute("disabled","")):(t.value=e,s.removeAttribute("disabled")))})),e.addEventListener("click",(function(e){if(e.target.closest(".quantity__count")){const o=e.target.closest(".quantity__count").dataset.action;let a=parseInt(t.value);"add"===o?(a+=1,a>=r+1&&s.removeAttribute("disabled"),a>=n&&s.setAttribute("disabled","")):(a=a<=r?r:a-=1,a===r&&i.setAttribute("disabled",""),a<n&&i.removeAttribute("disabled")),t.value=a}}))}))}},t={};function i(s){var r=t[s];if(void 0!==r)return r.exports;var n=t[s]={exports:{}};return e[s](n,n.exports,i),n.exports}(()=>{"use strict";i(34);function e(e){return null!==e&&"object"==typeof e&&"constructor"in e&&e.constructor===Object}function t(i,s){void 0===i&&(i={}),void 0===s&&(s={}),Object.keys(s).forEach((r=>{void 0===i[r]?i[r]=s[r]:e(s[r])&&e(i[r])&&Object.keys(s[r]).length>0&&t(i[r],s[r])}))}const s={body:{},addEventListener(){},removeEventListener(){},activeElement:{blur(){},nodeName:""},querySelector:()=>null,querySelectorAll:()=>[],getElementById:()=>null,createEvent:()=>({initEvent(){}}),createElement:()=>({children:[],childNodes:[],style:{},setAttribute(){},getElementsByTagName:()=>[]}),createElementNS:()=>({}),importNode:()=>null,location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};function r(){const e="undefined"!=typeof document?document:{};return t(e,s),e}const n={document:s,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState(){},pushState(){},go(){},back(){}},CustomEvent:function(){return this},addEventListener(){},removeEventListener(){},getComputedStyle:()=>({getPropertyValue:()=>""}),Image(){},Date(){},screen:{},setTimeout(){},clearTimeout(){},matchMedia:()=>({}),requestAnimationFrame:e=>"undefined"==typeof setTimeout?(e(),null):setTimeout(e,0),cancelAnimationFrame(e){"undefined"!=typeof setTimeout&&clearTimeout(e)}};function o(){const e="undefined"!=typeof window?window:{};return t(e,n),e}function a(e,t){return void 0===t&&(t=0),setTimeout(e,t)}function l(){return Date.now()}function d(e,t){void 0===t&&(t="x");const i=o();let s,r,n;const a=function(e){const t=o();let i;return t.getComputedStyle&&(i=t.getComputedStyle(e,null)),!i&&e.currentStyle&&(i=e.currentStyle),i||(i=e.style),i}(e);return i.WebKitCSSMatrix?(r=a.transform||a.webkitTransform,r.split(",").length>6&&(r=r.split(", ").map((e=>e.replace(",","."))).join(", ")),n=new i.WebKitCSSMatrix("none"===r?"":r)):(n=a.MozTransform||a.OTransform||a.MsTransform||a.msTransform||a.transform||a.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,"),s=n.toString().split(",")),"x"===t&&(r=i.WebKitCSSMatrix?n.m41:16===s.length?parseFloat(s[12]):parseFloat(s[4])),"y"===t&&(r=i.WebKitCSSMatrix?n.m42:16===s.length?parseFloat(s[13]):parseFloat(s[5])),r||0}function c(e){return"object"==typeof e&&null!==e&&e.constructor&&"Object"===Object.prototype.toString.call(e).slice(8,-1)}function u(){const e=Object(arguments.length<=0?void 0:arguments[0]),t=["__proto__","constructor","prototype"];for(let s=1;s<arguments.length;s+=1){const r=s<0||arguments.length<=s?void 0:arguments[s];if(null!=r&&(i=r,!("undefined"!=typeof window&&void 0!==window.HTMLElement?i instanceof HTMLElement:i&&(1===i.nodeType||11===i.nodeType)))){const i=Object.keys(Object(r)).filter((e=>t.indexOf(e)<0));for(let t=0,s=i.length;t<s;t+=1){const s=i[t],n=Object.getOwnPropertyDescriptor(r,s);void 0!==n&&n.enumerable&&(c(e[s])&&c(r[s])?r[s].__swiper__?e[s]=r[s]:u(e[s],r[s]):!c(e[s])&&c(r[s])?(e[s]={},r[s].__swiper__?e[s]=r[s]:u(e[s],r[s])):e[s]=r[s])}}}var i;return e}function p(e,t,i){e.style.setProperty(t,i)}function h(e){let{swiper:t,targetPosition:i,side:s}=e;const r=o(),n=-t.translate;let a,l=null;const d=t.params.speed;t.wrapperEl.style.scrollSnapType="none",r.cancelAnimationFrame(t.cssModeFrameID);const c=i>n?"next":"prev",u=(e,t)=>"next"===c&&e>=t||"prev"===c&&e<=t,p=()=>{a=(new Date).getTime(),null===l&&(l=a);const e=Math.max(Math.min((a-l)/d,1),0),o=.5-Math.cos(e*Math.PI)/2;let c=n+o*(i-n);if(u(c,i)&&(c=i),t.wrapperEl.scrollTo({[s]:c}),u(c,i))return t.wrapperEl.style.overflow="hidden",t.wrapperEl.style.scrollSnapType="",setTimeout((()=>{t.wrapperEl.style.overflow="",t.wrapperEl.scrollTo({[s]:c})})),void r.cancelAnimationFrame(t.cssModeFrameID);t.cssModeFrameID=r.requestAnimationFrame(p)};p()}function g(e,t){return void 0===t&&(t=""),[...e.children].filter((e=>e.matches(t)))}function m(e){try{return void console.warn(e)}catch(e){}}function f(e,t){void 0===t&&(t=[]);const i=document.createElement(e);return i.classList.add(...Array.isArray(t)?t:function(e){return void 0===e&&(e=""),e.trim().split(" ").filter((e=>!!e.trim()))}(t)),i}function v(e,t){return o().getComputedStyle(e,null).getPropertyValue(t)}function y(e){let t,i=e;if(i){for(t=0;null!==(i=i.previousSibling);)1===i.nodeType&&(t+=1);return t}}function b(e,t,i){const s=o();return i?e["width"===t?"offsetWidth":"offsetHeight"]+parseFloat(s.getComputedStyle(e,null).getPropertyValue("width"===t?"margin-right":"margin-top"))+parseFloat(s.getComputedStyle(e,null).getPropertyValue("width"===t?"margin-left":"margin-bottom")):e.offsetWidth}function w(e){return(Array.isArray(e)?e:[e]).filter((e=>!!e))}let S,T,x;function E(){return S||(S=function(){const e=o(),t=r();return{smoothScroll:t.documentElement&&t.documentElement.style&&"scrollBehavior"in t.documentElement.style,touch:!!("ontouchstart"in e||e.DocumentTouch&&t instanceof e.DocumentTouch)}}()),S}function C(e){return void 0===e&&(e={}),T||(T=function(e){let{userAgent:t}=void 0===e?{}:e;const i=E(),s=o(),r=s.navigator.platform,n=t||s.navigator.userAgent,a={ios:!1,android:!1},l=s.screen.width,d=s.screen.height,c=n.match(/(Android);?[\s\/]+([\d.]+)?/);let u=n.match(/(iPad).*OS\s([\d_]+)/);const p=n.match(/(iPod)(.*OS\s([\d_]+))?/),h=!u&&n.match(/(iPhone\sOS|iOS)\s([\d_]+)/),g="Win32"===r;let m="MacIntel"===r;return!u&&m&&i.touch&&["1024x1366","1366x1024","834x1194","1194x834","834x1112","1112x834","768x1024","1024x768","820x1180","1180x820","810x1080","1080x810"].indexOf(`${l}x${d}`)>=0&&(u=n.match(/(Version)\/([\d.]+)/),u||(u=[0,1,"13_0_0"]),m=!1),c&&!g&&(a.os="android",a.android=!0),(u||h||p)&&(a.os="ios",a.ios=!0),a}(e)),T}function I(){return x||(x=function(){const e=o(),t=C();let i=!1;function s(){const t=e.navigator.userAgent.toLowerCase();return t.indexOf("safari")>=0&&t.indexOf("chrome")<0&&t.indexOf("android")<0}if(s()){const t=String(e.navigator.userAgent);if(t.includes("Version/")){const[e,s]=t.split("Version/")[1].split(" ")[0].split(".").map((e=>Number(e)));i=e<16||16===e&&s<2}}const r=/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(e.navigator.userAgent),n=s();return{isSafari:i||n,needPerspectiveFix:i,need3dFix:n||r&&t.ios,isWebView:r}}()),x}var M={on(e,t,i){const s=this;if(!s.eventsListeners||s.destroyed)return s;if("function"!=typeof t)return s;const r=i?"unshift":"push";return e.split(" ").forEach((e=>{s.eventsListeners[e]||(s.eventsListeners[e]=[]),s.eventsListeners[e][r](t)})),s},once(e,t,i){const s=this;if(!s.eventsListeners||s.destroyed)return s;if("function"!=typeof t)return s;function r(){s.off(e,r),r.__emitterProxy&&delete r.__emitterProxy;for(var i=arguments.length,n=new Array(i),o=0;o<i;o++)n[o]=arguments[o];t.apply(s,n)}return r.__emitterProxy=t,s.on(e,r,i)},onAny(e,t){const i=this;if(!i.eventsListeners||i.destroyed)return i;if("function"!=typeof e)return i;const s=t?"unshift":"push";return i.eventsAnyListeners.indexOf(e)<0&&i.eventsAnyListeners[s](e),i},offAny(e){const t=this;if(!t.eventsListeners||t.destroyed)return t;if(!t.eventsAnyListeners)return t;const i=t.eventsAnyListeners.indexOf(e);return i>=0&&t.eventsAnyListeners.splice(i,1),t},off(e,t){const i=this;return!i.eventsListeners||i.destroyed?i:i.eventsListeners?(e.split(" ").forEach((e=>{void 0===t?i.eventsListeners[e]=[]:i.eventsListeners[e]&&i.eventsListeners[e].forEach(((s,r)=>{(s===t||s.__emitterProxy&&s.__emitterProxy===t)&&i.eventsListeners[e].splice(r,1)}))})),i):i},emit(){const e=this;if(!e.eventsListeners||e.destroyed)return e;if(!e.eventsListeners)return e;let t,i,s;for(var r=arguments.length,n=new Array(r),o=0;o<r;o++)n[o]=arguments[o];"string"==typeof n[0]||Array.isArray(n[0])?(t=n[0],i=n.slice(1,n.length),s=e):(t=n[0].events,i=n[0].data,s=n[0].context||e),i.unshift(s);return(Array.isArray(t)?t:t.split(" ")).forEach((t=>{e.eventsAnyListeners&&e.eventsAnyListeners.length&&e.eventsAnyListeners.forEach((e=>{e.apply(s,[t,...i])})),e.eventsListeners&&e.eventsListeners[t]&&e.eventsListeners[t].forEach((e=>{e.apply(s,i)}))})),e}};const L=(e,t,i)=>{t&&!e.classList.contains(i)?e.classList.add(i):!t&&e.classList.contains(i)&&e.classList.remove(i)};const P=(e,t,i)=>{t&&!e.classList.contains(i)?e.classList.add(i):!t&&e.classList.contains(i)&&e.classList.remove(i)};const k=(e,t)=>{if(!e||e.destroyed||!e.params)return;const i=t.closest(e.isElement?"swiper-slide":`.${e.params.slideClass}`);if(i){let t=i.querySelector(`.${e.params.lazyPreloaderClass}`);!t&&e.isElement&&(i.shadowRoot?t=i.shadowRoot.querySelector(`.${e.params.lazyPreloaderClass}`):requestAnimationFrame((()=>{i.shadowRoot&&(t=i.shadowRoot.querySelector(`.${e.params.lazyPreloaderClass}`),t&&t.remove())}))),t&&t.remove()}},O=(e,t)=>{if(!e.slides[t])return;const i=e.slides[t].querySelector('[loading="lazy"]');i&&i.removeAttribute("loading")},A=e=>{if(!e||e.destroyed||!e.params)return;let t=e.params.lazyPreloadPrevNext;const i=e.slides.length;if(!i||!t||t<0)return;t=Math.min(t,i);const s="auto"===e.params.slidesPerView?e.slidesPerViewDynamic():Math.ceil(e.params.slidesPerView),r=e.activeIndex;if(e.params.grid&&e.params.grid.rows>1){const i=r,n=[i-t];return n.push(...Array.from({length:t}).map(((e,t)=>i+s+t))),void e.slides.forEach(((t,i)=>{n.includes(t.column)&&O(e,i)}))}const n=r+s-1;if(e.params.rewind||e.params.loop)for(let s=r-t;s<=n+t;s+=1){const t=(s%i+i)%i;(t<r||t>n)&&O(e,t)}else for(let s=Math.max(r-t,0);s<=Math.min(n+t,i-1);s+=1)s!==r&&(s>n||s<r)&&O(e,s)};var _={updateSize:function(){const e=this;let t,i;const s=e.el;t=void 0!==e.params.width&&null!==e.params.width?e.params.width:s.clientWidth,i=void 0!==e.params.height&&null!==e.params.height?e.params.height:s.clientHeight,0===t&&e.isHorizontal()||0===i&&e.isVertical()||(t=t-parseInt(v(s,"padding-left")||0,10)-parseInt(v(s,"padding-right")||0,10),i=i-parseInt(v(s,"padding-top")||0,10)-parseInt(v(s,"padding-bottom")||0,10),Number.isNaN(t)&&(t=0),Number.isNaN(i)&&(i=0),Object.assign(e,{width:t,height:i,size:e.isHorizontal()?t:i}))},updateSlides:function(){const e=this;function t(t,i){return parseFloat(t.getPropertyValue(e.getDirectionLabel(i))||0)}const i=e.params,{wrapperEl:s,slidesEl:r,size:n,rtlTranslate:o,wrongRTL:a}=e,l=e.virtual&&i.virtual.enabled,d=l?e.virtual.slides.length:e.slides.length,c=g(r,`.${e.params.slideClass}, swiper-slide`),u=l?e.virtual.slides.length:c.length;let h=[];const m=[],f=[];let y=i.slidesOffsetBefore;"function"==typeof y&&(y=i.slidesOffsetBefore.call(e));let w=i.slidesOffsetAfter;"function"==typeof w&&(w=i.slidesOffsetAfter.call(e));const S=e.snapGrid.length,T=e.slidesGrid.length;let x=i.spaceBetween,E=-y,C=0,I=0;if(void 0===n)return;"string"==typeof x&&x.indexOf("%")>=0?x=parseFloat(x.replace("%",""))/100*n:"string"==typeof x&&(x=parseFloat(x)),e.virtualSize=-x,c.forEach((e=>{o?e.style.marginLeft="":e.style.marginRight="",e.style.marginBottom="",e.style.marginTop=""})),i.centeredSlides&&i.cssMode&&(p(s,"--swiper-centered-offset-before",""),p(s,"--swiper-centered-offset-after",""));const M=i.grid&&i.grid.rows>1&&e.grid;let L;M?e.grid.initSlides(c):e.grid&&e.grid.unsetSlides();const P="auto"===i.slidesPerView&&i.breakpoints&&Object.keys(i.breakpoints).filter((e=>void 0!==i.breakpoints[e].slidesPerView)).length>0;for(let s=0;s<u;s+=1){let r;if(L=0,c[s]&&(r=c[s]),M&&e.grid.updateSlide(s,r,c),!c[s]||"none"!==v(r,"display")){if("auto"===i.slidesPerView){P&&(c[s].style[e.getDirectionLabel("width")]="");const n=getComputedStyle(r),o=r.style.transform,a=r.style.webkitTransform;if(o&&(r.style.transform="none"),a&&(r.style.webkitTransform="none"),i.roundLengths)L=e.isHorizontal()?b(r,"width",!0):b(r,"height",!0);else{const e=t(n,"width"),i=t(n,"padding-left"),s=t(n,"padding-right"),o=t(n,"margin-left"),a=t(n,"margin-right"),l=n.getPropertyValue("box-sizing");if(l&&"border-box"===l)L=e+o+a;else{const{clientWidth:t,offsetWidth:n}=r;L=e+i+s+o+a+(n-t)}}o&&(r.style.transform=o),a&&(r.style.webkitTransform=a),i.roundLengths&&(L=Math.floor(L))}else L=(n-(i.slidesPerView-1)*x)/i.slidesPerView,i.roundLengths&&(L=Math.floor(L)),c[s]&&(c[s].style[e.getDirectionLabel("width")]=`${L}px`);c[s]&&(c[s].swiperSlideSize=L),f.push(L),i.centeredSlides?(E=E+L/2+C/2+x,0===C&&0!==s&&(E=E-n/2-x),0===s&&(E=E-n/2-x),Math.abs(E)<.001&&(E=0),i.roundLengths&&(E=Math.floor(E)),I%i.slidesPerGroup==0&&h.push(E),m.push(E)):(i.roundLengths&&(E=Math.floor(E)),(I-Math.min(e.params.slidesPerGroupSkip,I))%e.params.slidesPerGroup==0&&h.push(E),m.push(E),E=E+L+x),e.virtualSize+=L+x,C=L,I+=1}}if(e.virtualSize=Math.max(e.virtualSize,n)+w,o&&a&&("slide"===i.effect||"coverflow"===i.effect)&&(s.style.width=`${e.virtualSize+x}px`),i.setWrapperSize&&(s.style[e.getDirectionLabel("width")]=`${e.virtualSize+x}px`),M&&e.grid.updateWrapperSize(L,h),!i.centeredSlides){const t=[];for(let s=0;s<h.length;s+=1){let r=h[s];i.roundLengths&&(r=Math.floor(r)),h[s]<=e.virtualSize-n&&t.push(r)}h=t,Math.floor(e.virtualSize-n)-Math.floor(h[h.length-1])>1&&h.push(e.virtualSize-n)}if(l&&i.loop){const t=f[0]+x;if(i.slidesPerGroup>1){const s=Math.ceil((e.virtual.slidesBefore+e.virtual.slidesAfter)/i.slidesPerGroup),r=t*i.slidesPerGroup;for(let e=0;e<s;e+=1)h.push(h[h.length-1]+r)}for(let s=0;s<e.virtual.slidesBefore+e.virtual.slidesAfter;s+=1)1===i.slidesPerGroup&&h.push(h[h.length-1]+t),m.push(m[m.length-1]+t),e.virtualSize+=t}if(0===h.length&&(h=[0]),0!==x){const t=e.isHorizontal()&&o?"marginLeft":e.getDirectionLabel("marginRight");c.filter(((e,t)=>!(i.cssMode&&!i.loop)||t!==c.length-1)).forEach((e=>{e.style[t]=`${x}px`}))}if(i.centeredSlides&&i.centeredSlidesBounds){let e=0;f.forEach((t=>{e+=t+(x||0)})),e-=x;const t=e-n;h=h.map((e=>e<=0?-y:e>t?t+w:e))}if(i.centerInsufficientSlides){let e=0;f.forEach((t=>{e+=t+(x||0)})),e-=x;const t=(i.slidesOffsetBefore||0)+(i.slidesOffsetAfter||0);if(e+t<n){const i=(n-e-t)/2;h.forEach(((e,t)=>{h[t]=e-i})),m.forEach(((e,t)=>{m[t]=e+i}))}}if(Object.assign(e,{slides:c,snapGrid:h,slidesGrid:m,slidesSizesGrid:f}),i.centeredSlides&&i.cssMode&&!i.centeredSlidesBounds){p(s,"--swiper-centered-offset-before",-h[0]+"px"),p(s,"--swiper-centered-offset-after",e.size/2-f[f.length-1]/2+"px");const t=-e.snapGrid[0],i=-e.slidesGrid[0];e.snapGrid=e.snapGrid.map((e=>e+t)),e.slidesGrid=e.slidesGrid.map((e=>e+i))}if(u!==d&&e.emit("slidesLengthChange"),h.length!==S&&(e.params.watchOverflow&&e.checkOverflow(),e.emit("snapGridLengthChange")),m.length!==T&&e.emit("slidesGridLengthChange"),i.watchSlidesProgress&&e.updateSlidesOffset(),e.emit("slidesUpdated"),!(l||i.cssMode||"slide"!==i.effect&&"fade"!==i.effect)){const t=`${i.containerModifierClass}backface-hidden`,s=e.el.classList.contains(t);u<=i.maxBackfaceHiddenSlides?s||e.el.classList.add(t):s&&e.el.classList.remove(t)}},updateAutoHeight:function(e){const t=this,i=[],s=t.virtual&&t.params.virtual.enabled;let r,n=0;"number"==typeof e?t.setTransition(e):!0===e&&t.setTransition(t.params.speed);const o=e=>s?t.slides[t.getSlideIndexByData(e)]:t.slides[e];if("auto"!==t.params.slidesPerView&&t.params.slidesPerView>1)if(t.params.centeredSlides)(t.visibleSlides||[]).forEach((e=>{i.push(e)}));else for(r=0;r<Math.ceil(t.params.slidesPerView);r+=1){const e=t.activeIndex+r;if(e>t.slides.length&&!s)break;i.push(o(e))}else i.push(o(t.activeIndex));for(r=0;r<i.length;r+=1)if(void 0!==i[r]){const e=i[r].offsetHeight;n=e>n?e:n}(n||0===n)&&(t.wrapperEl.style.height=`${n}px`)},updateSlidesOffset:function(){const e=this,t=e.slides,i=e.isElement?e.isHorizontal()?e.wrapperEl.offsetLeft:e.wrapperEl.offsetTop:0;for(let s=0;s<t.length;s+=1)t[s].swiperSlideOffset=(e.isHorizontal()?t[s].offsetLeft:t[s].offsetTop)-i-e.cssOverflowAdjustment()},updateSlidesProgress:function(e){void 0===e&&(e=this&&this.translate||0);const t=this,i=t.params,{slides:s,rtlTranslate:r,snapGrid:n}=t;if(0===s.length)return;void 0===s[0].swiperSlideOffset&&t.updateSlidesOffset();let o=-e;r&&(o=e),t.visibleSlidesIndexes=[],t.visibleSlides=[];let a=i.spaceBetween;"string"==typeof a&&a.indexOf("%")>=0?a=parseFloat(a.replace("%",""))/100*t.size:"string"==typeof a&&(a=parseFloat(a));for(let e=0;e<s.length;e+=1){const l=s[e];let d=l.swiperSlideOffset;i.cssMode&&i.centeredSlides&&(d-=s[0].swiperSlideOffset);const c=(o+(i.centeredSlides?t.minTranslate():0)-d)/(l.swiperSlideSize+a),u=(o-n[0]+(i.centeredSlides?t.minTranslate():0)-d)/(l.swiperSlideSize+a),p=-(o-d),h=p+t.slidesSizesGrid[e],g=p>=0&&p<=t.size-t.slidesSizesGrid[e],m=p>=0&&p<t.size-1||h>1&&h<=t.size||p<=0&&h>=t.size;m&&(t.visibleSlides.push(l),t.visibleSlidesIndexes.push(e)),L(l,m,i.slideVisibleClass),L(l,g,i.slideFullyVisibleClass),l.progress=r?-c:c,l.originalProgress=r?-u:u}},updateProgress:function(e){const t=this;if(void 0===e){const i=t.rtlTranslate?-1:1;e=t&&t.translate&&t.translate*i||0}const i=t.params,s=t.maxTranslate()-t.minTranslate();let{progress:r,isBeginning:n,isEnd:o,progressLoop:a}=t;const l=n,d=o;if(0===s)r=0,n=!0,o=!0;else{r=(e-t.minTranslate())/s;const i=Math.abs(e-t.minTranslate())<1,a=Math.abs(e-t.maxTranslate())<1;n=i||r<=0,o=a||r>=1,i&&(r=0),a&&(r=1)}if(i.loop){const i=t.getSlideIndexByData(0),s=t.getSlideIndexByData(t.slides.length-1),r=t.slidesGrid[i],n=t.slidesGrid[s],o=t.slidesGrid[t.slidesGrid.length-1],l=Math.abs(e);a=l>=r?(l-r)/o:(l+o-n)/o,a>1&&(a-=1)}Object.assign(t,{progress:r,progressLoop:a,isBeginning:n,isEnd:o}),(i.watchSlidesProgress||i.centeredSlides&&i.autoHeight)&&t.updateSlidesProgress(e),n&&!l&&t.emit("reachBeginning toEdge"),o&&!d&&t.emit("reachEnd toEdge"),(l&&!n||d&&!o)&&t.emit("fromEdge"),t.emit("progress",r)},updateSlidesClasses:function(){const e=this,{slides:t,params:i,slidesEl:s,activeIndex:r}=e,n=e.virtual&&i.virtual.enabled,o=e.grid&&i.grid&&i.grid.rows>1,a=e=>g(s,`.${i.slideClass}${e}, swiper-slide${e}`)[0];let l,d,c;if(n)if(i.loop){let t=r-e.virtual.slidesBefore;t<0&&(t=e.virtual.slides.length+t),t>=e.virtual.slides.length&&(t-=e.virtual.slides.length),l=a(`[data-swiper-slide-index="${t}"]`)}else l=a(`[data-swiper-slide-index="${r}"]`);else o?(l=t.filter((e=>e.column===r))[0],c=t.filter((e=>e.column===r+1))[0],d=t.filter((e=>e.column===r-1))[0]):l=t[r];l&&(o||(c=function(e,t){const i=[];for(;e.nextElementSibling;){const s=e.nextElementSibling;t?s.matches(t)&&i.push(s):i.push(s),e=s}return i}(l,`.${i.slideClass}, swiper-slide`)[0],i.loop&&!c&&(c=t[0]),d=function(e,t){const i=[];for(;e.previousElementSibling;){const s=e.previousElementSibling;t?s.matches(t)&&i.push(s):i.push(s),e=s}return i}(l,`.${i.slideClass}, swiper-slide`)[0],i.loop&&0===!d&&(d=t[t.length-1]))),t.forEach((e=>{P(e,e===l,i.slideActiveClass),P(e,e===c,i.slideNextClass),P(e,e===d,i.slidePrevClass)})),e.emitSlidesClasses()},updateActiveIndex:function(e){const t=this,i=t.rtlTranslate?t.translate:-t.translate,{snapGrid:s,params:r,activeIndex:n,realIndex:o,snapIndex:a}=t;let l,d=e;const c=e=>{let i=e-t.virtual.slidesBefore;return i<0&&(i=t.virtual.slides.length+i),i>=t.virtual.slides.length&&(i-=t.virtual.slides.length),i};if(void 0===d&&(d=function(e){const{slidesGrid:t,params:i}=e,s=e.rtlTranslate?e.translate:-e.translate;let r;for(let e=0;e<t.length;e+=1)void 0!==t[e+1]?s>=t[e]&&s<t[e+1]-(t[e+1]-t[e])/2?r=e:s>=t[e]&&s<t[e+1]&&(r=e+1):s>=t[e]&&(r=e);return i.normalizeSlideIndex&&(r<0||void 0===r)&&(r=0),r}(t)),s.indexOf(i)>=0)l=s.indexOf(i);else{const e=Math.min(r.slidesPerGroupSkip,d);l=e+Math.floor((d-e)/r.slidesPerGroup)}if(l>=s.length&&(l=s.length-1),d===n&&!t.params.loop)return void(l!==a&&(t.snapIndex=l,t.emit("snapIndexChange")));if(d===n&&t.params.loop&&t.virtual&&t.params.virtual.enabled)return void(t.realIndex=c(d));const u=t.grid&&r.grid&&r.grid.rows>1;let p;if(t.virtual&&r.virtual.enabled&&r.loop)p=c(d);else if(u){const e=t.slides.filter((e=>e.column===d))[0];let i=parseInt(e.getAttribute("data-swiper-slide-index"),10);Number.isNaN(i)&&(i=Math.max(t.slides.indexOf(e),0)),p=Math.floor(i/r.grid.rows)}else if(t.slides[d]){const e=t.slides[d].getAttribute("data-swiper-slide-index");p=e?parseInt(e,10):d}else p=d;Object.assign(t,{previousSnapIndex:a,snapIndex:l,previousRealIndex:o,realIndex:p,previousIndex:n,activeIndex:d}),t.initialized&&A(t),t.emit("activeIndexChange"),t.emit("snapIndexChange"),(t.initialized||t.params.runCallbacksOnInit)&&(o!==p&&t.emit("realIndexChange"),t.emit("slideChange"))},updateClickedSlide:function(e,t){const i=this,s=i.params;let r=e.closest(`.${s.slideClass}, swiper-slide`);!r&&i.isElement&&t&&t.length>1&&t.includes(e)&&[...t.slice(t.indexOf(e)+1,t.length)].forEach((e=>{!r&&e.matches&&e.matches(`.${s.slideClass}, swiper-slide`)&&(r=e)}));let n,o=!1;if(r)for(let e=0;e<i.slides.length;e+=1)if(i.slides[e]===r){o=!0,n=e;break}if(!r||!o)return i.clickedSlide=void 0,void(i.clickedIndex=void 0);i.clickedSlide=r,i.virtual&&i.params.virtual.enabled?i.clickedIndex=parseInt(r.getAttribute("data-swiper-slide-index"),10):i.clickedIndex=n,s.slideToClickedSlide&&void 0!==i.clickedIndex&&i.clickedIndex!==i.activeIndex&&i.slideToClickedSlide()}};var z={getTranslate:function(e){void 0===e&&(e=this.isHorizontal()?"x":"y");const{params:t,rtlTranslate:i,translate:s,wrapperEl:r}=this;if(t.virtualTranslate)return i?-s:s;if(t.cssMode)return s;let n=d(r,e);return n+=this.cssOverflowAdjustment(),i&&(n=-n),n||0},setTranslate:function(e,t){const i=this,{rtlTranslate:s,params:r,wrapperEl:n,progress:o}=i;let a,l=0,d=0;i.isHorizontal()?l=s?-e:e:d=e,r.roundLengths&&(l=Math.floor(l),d=Math.floor(d)),i.previousTranslate=i.translate,i.translate=i.isHorizontal()?l:d,r.cssMode?n[i.isHorizontal()?"scrollLeft":"scrollTop"]=i.isHorizontal()?-l:-d:r.virtualTranslate||(i.isHorizontal()?l-=i.cssOverflowAdjustment():d-=i.cssOverflowAdjustment(),n.style.transform=`translate3d(${l}px, ${d}px, 0px)`);const c=i.maxTranslate()-i.minTranslate();a=0===c?0:(e-i.minTranslate())/c,a!==o&&i.updateProgress(e),i.emit("setTranslate",i.translate,t)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]},translateTo:function(e,t,i,s,r){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===i&&(i=!0),void 0===s&&(s=!0);const n=this,{params:o,wrapperEl:a}=n;if(n.animating&&o.preventInteractionOnTransition)return!1;const l=n.minTranslate(),d=n.maxTranslate();let c;if(c=s&&e>l?l:s&&e<d?d:e,n.updateProgress(c),o.cssMode){const e=n.isHorizontal();if(0===t)a[e?"scrollLeft":"scrollTop"]=-c;else{if(!n.support.smoothScroll)return h({swiper:n,targetPosition:-c,side:e?"left":"top"}),!0;a.scrollTo({[e?"left":"top"]:-c,behavior:"smooth"})}return!0}return 0===t?(n.setTransition(0),n.setTranslate(c),i&&(n.emit("beforeTransitionStart",t,r),n.emit("transitionEnd"))):(n.setTransition(t),n.setTranslate(c),i&&(n.emit("beforeTransitionStart",t,r),n.emit("transitionStart")),n.animating||(n.animating=!0,n.onTranslateToWrapperTransitionEnd||(n.onTranslateToWrapperTransitionEnd=function(e){n&&!n.destroyed&&e.target===this&&(n.wrapperEl.removeEventListener("transitionend",n.onTranslateToWrapperTransitionEnd),n.onTranslateToWrapperTransitionEnd=null,delete n.onTranslateToWrapperTransitionEnd,n.animating=!1,i&&n.emit("transitionEnd"))}),n.wrapperEl.addEventListener("transitionend",n.onTranslateToWrapperTransitionEnd))),!0}};function D(e){let{swiper:t,runCallbacks:i,direction:s,step:r}=e;const{activeIndex:n,previousIndex:o}=t;let a=s;if(a||(a=n>o?"next":n<o?"prev":"reset"),t.emit(`transition${r}`),i&&n!==o){if("reset"===a)return void t.emit(`slideResetTransition${r}`);t.emit(`slideChangeTransition${r}`),"next"===a?t.emit(`slideNextTransition${r}`):t.emit(`slidePrevTransition${r}`)}}var G={slideTo:function(e,t,i,s,r){void 0===e&&(e=0),void 0===i&&(i=!0),"string"==typeof e&&(e=parseInt(e,10));const n=this;let o=e;o<0&&(o=0);const{params:a,snapGrid:l,slidesGrid:d,previousIndex:c,activeIndex:u,rtlTranslate:p,wrapperEl:g,enabled:m}=n;if(!m&&!s&&!r||n.destroyed||n.animating&&a.preventInteractionOnTransition)return!1;void 0===t&&(t=n.params.speed);const f=Math.min(n.params.slidesPerGroupSkip,o);let v=f+Math.floor((o-f)/n.params.slidesPerGroup);v>=l.length&&(v=l.length-1);const y=-l[v];if(a.normalizeSlideIndex)for(let e=0;e<d.length;e+=1){const t=-Math.floor(100*y),i=Math.floor(100*d[e]),s=Math.floor(100*d[e+1]);void 0!==d[e+1]?t>=i&&t<s-(s-i)/2?o=e:t>=i&&t<s&&(o=e+1):t>=i&&(o=e)}if(n.initialized&&o!==u){if(!n.allowSlideNext&&(p?y>n.translate&&y>n.minTranslate():y<n.translate&&y<n.minTranslate()))return!1;if(!n.allowSlidePrev&&y>n.translate&&y>n.maxTranslate()&&(u||0)!==o)return!1}let b;if(o!==(c||0)&&i&&n.emit("beforeSlideChangeStart"),n.updateProgress(y),b=o>u?"next":o<u?"prev":"reset",p&&-y===n.translate||!p&&y===n.translate)return n.updateActiveIndex(o),a.autoHeight&&n.updateAutoHeight(),n.updateSlidesClasses(),"slide"!==a.effect&&n.setTranslate(y),"reset"!==b&&(n.transitionStart(i,b),n.transitionEnd(i,b)),!1;if(a.cssMode){const e=n.isHorizontal(),i=p?y:-y;if(0===t){const t=n.virtual&&n.params.virtual.enabled;t&&(n.wrapperEl.style.scrollSnapType="none",n._immediateVirtual=!0),t&&!n._cssModeVirtualInitialSet&&n.params.initialSlide>0?(n._cssModeVirtualInitialSet=!0,requestAnimationFrame((()=>{g[e?"scrollLeft":"scrollTop"]=i}))):g[e?"scrollLeft":"scrollTop"]=i,t&&requestAnimationFrame((()=>{n.wrapperEl.style.scrollSnapType="",n._immediateVirtual=!1}))}else{if(!n.support.smoothScroll)return h({swiper:n,targetPosition:i,side:e?"left":"top"}),!0;g.scrollTo({[e?"left":"top"]:i,behavior:"smooth"})}return!0}return n.setTransition(t),n.setTranslate(y),n.updateActiveIndex(o),n.updateSlidesClasses(),n.emit("beforeTransitionStart",t,s),n.transitionStart(i,b),0===t?n.transitionEnd(i,b):n.animating||(n.animating=!0,n.onSlideToWrapperTransitionEnd||(n.onSlideToWrapperTransitionEnd=function(e){n&&!n.destroyed&&e.target===this&&(n.wrapperEl.removeEventListener("transitionend",n.onSlideToWrapperTransitionEnd),n.onSlideToWrapperTransitionEnd=null,delete n.onSlideToWrapperTransitionEnd,n.transitionEnd(i,b))}),n.wrapperEl.addEventListener("transitionend",n.onSlideToWrapperTransitionEnd)),!0},slideToLoop:function(e,t,i,s){if(void 0===e&&(e=0),void 0===i&&(i=!0),"string"==typeof e){e=parseInt(e,10)}const r=this;if(r.destroyed)return;void 0===t&&(t=r.params.speed);const n=r.grid&&r.params.grid&&r.params.grid.rows>1;let o=e;if(r.params.loop)if(r.virtual&&r.params.virtual.enabled)o+=r.virtual.slidesBefore;else{let e;if(n){const t=o*r.params.grid.rows;e=r.slides.filter((e=>1*e.getAttribute("data-swiper-slide-index")===t))[0].column}else e=r.getSlideIndexByData(o);const t=n?Math.ceil(r.slides.length/r.params.grid.rows):r.slides.length,{centeredSlides:i}=r.params;let a=r.params.slidesPerView;"auto"===a?a=r.slidesPerViewDynamic():(a=Math.ceil(parseFloat(r.params.slidesPerView,10)),i&&a%2==0&&(a+=1));let l=t-e<a;if(i&&(l=l||e<Math.ceil(a/2)),s&&i&&"auto"!==r.params.slidesPerView&&!n&&(l=!1),l){const s=i?e<r.activeIndex?"prev":"next":e-r.activeIndex-1<r.params.slidesPerView?"next":"prev";r.loopFix({direction:s,slideTo:!0,activeSlideIndex:"next"===s?e+1:e-t+1,slideRealIndex:"next"===s?r.realIndex:void 0})}if(n){const e=o*r.params.grid.rows;o=r.slides.filter((t=>1*t.getAttribute("data-swiper-slide-index")===e))[0].column}else o=r.getSlideIndexByData(o)}return requestAnimationFrame((()=>{r.slideTo(o,t,i,s)})),r},slideNext:function(e,t,i){void 0===t&&(t=!0);const s=this,{enabled:r,params:n,animating:o}=s;if(!r||s.destroyed)return s;void 0===e&&(e=s.params.speed);let a=n.slidesPerGroup;"auto"===n.slidesPerView&&1===n.slidesPerGroup&&n.slidesPerGroupAuto&&(a=Math.max(s.slidesPerViewDynamic("current",!0),1));const l=s.activeIndex<n.slidesPerGroupSkip?1:a,d=s.virtual&&n.virtual.enabled;if(n.loop){if(o&&!d&&n.loopPreventsSliding)return!1;if(s.loopFix({direction:"next"}),s._clientLeft=s.wrapperEl.clientLeft,s.activeIndex===s.slides.length-1&&n.cssMode)return requestAnimationFrame((()=>{s.slideTo(s.activeIndex+l,e,t,i)})),!0}return n.rewind&&s.isEnd?s.slideTo(0,e,t,i):s.slideTo(s.activeIndex+l,e,t,i)},slidePrev:function(e,t,i){void 0===t&&(t=!0);const s=this,{params:r,snapGrid:n,slidesGrid:o,rtlTranslate:a,enabled:l,animating:d}=s;if(!l||s.destroyed)return s;void 0===e&&(e=s.params.speed);const c=s.virtual&&r.virtual.enabled;if(r.loop){if(d&&!c&&r.loopPreventsSliding)return!1;s.loopFix({direction:"prev"}),s._clientLeft=s.wrapperEl.clientLeft}function u(e){return e<0?-Math.floor(Math.abs(e)):Math.floor(e)}const p=u(a?s.translate:-s.translate),h=n.map((e=>u(e)));let g=n[h.indexOf(p)-1];if(void 0===g&&r.cssMode){let e;n.forEach(((t,i)=>{p>=t&&(e=i)})),void 0!==e&&(g=n[e>0?e-1:e])}let m=0;if(void 0!==g&&(m=o.indexOf(g),m<0&&(m=s.activeIndex-1),"auto"===r.slidesPerView&&1===r.slidesPerGroup&&r.slidesPerGroupAuto&&(m=m-s.slidesPerViewDynamic("previous",!0)+1,m=Math.max(m,0))),r.rewind&&s.isBeginning){const r=s.params.virtual&&s.params.virtual.enabled&&s.virtual?s.virtual.slides.length-1:s.slides.length-1;return s.slideTo(r,e,t,i)}return r.loop&&0===s.activeIndex&&r.cssMode?(requestAnimationFrame((()=>{s.slideTo(m,e,t,i)})),!0):s.slideTo(m,e,t,i)},slideReset:function(e,t,i){void 0===t&&(t=!0);const s=this;if(!s.destroyed)return void 0===e&&(e=s.params.speed),s.slideTo(s.activeIndex,e,t,i)},slideToClosest:function(e,t,i,s){void 0===t&&(t=!0),void 0===s&&(s=.5);const r=this;if(r.destroyed)return;void 0===e&&(e=r.params.speed);let n=r.activeIndex;const o=Math.min(r.params.slidesPerGroupSkip,n),a=o+Math.floor((n-o)/r.params.slidesPerGroup),l=r.rtlTranslate?r.translate:-r.translate;if(l>=r.snapGrid[a]){const e=r.snapGrid[a];l-e>(r.snapGrid[a+1]-e)*s&&(n+=r.params.slidesPerGroup)}else{const e=r.snapGrid[a-1];l-e<=(r.snapGrid[a]-e)*s&&(n-=r.params.slidesPerGroup)}return n=Math.max(n,0),n=Math.min(n,r.slidesGrid.length-1),r.slideTo(n,e,t,i)},slideToClickedSlide:function(){const e=this;if(e.destroyed)return;const{params:t,slidesEl:i}=e,s="auto"===t.slidesPerView?e.slidesPerViewDynamic():t.slidesPerView;let r,n=e.clickedIndex;const o=e.isElement?"swiper-slide":`.${t.slideClass}`;if(t.loop){if(e.animating)return;r=parseInt(e.clickedSlide.getAttribute("data-swiper-slide-index"),10),t.centeredSlides?n<e.loopedSlides-s/2||n>e.slides.length-e.loopedSlides+s/2?(e.loopFix(),n=e.getSlideIndex(g(i,`${o}[data-swiper-slide-index="${r}"]`)[0]),a((()=>{e.slideTo(n)}))):e.slideTo(n):n>e.slides.length-s?(e.loopFix(),n=e.getSlideIndex(g(i,`${o}[data-swiper-slide-index="${r}"]`)[0]),a((()=>{e.slideTo(n)}))):e.slideTo(n)}else e.slideTo(n)}};var B={loopCreate:function(e){const t=this,{params:i,slidesEl:s}=t;if(!i.loop||t.virtual&&t.params.virtual.enabled)return;const r=()=>{g(s,`.${i.slideClass}, swiper-slide`).forEach(((e,t)=>{e.setAttribute("data-swiper-slide-index",t)}))},n=t.grid&&i.grid&&i.grid.rows>1,o=i.slidesPerGroup*(n?i.grid.rows:1),a=t.slides.length%o!=0,l=n&&t.slides.length%i.grid.rows!=0,d=e=>{for(let s=0;s<e;s+=1){const e=t.isElement?f("swiper-slide",[i.slideBlankClass]):f("div",[i.slideClass,i.slideBlankClass]);t.slidesEl.append(e)}};if(a){if(i.loopAddBlankSlides){d(o-t.slides.length%o),t.recalcSlides(),t.updateSlides()}else m("Swiper Loop Warning: The number of slides is not even to slidesPerGroup, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)");r()}else if(l){if(i.loopAddBlankSlides){d(i.grid.rows-t.slides.length%i.grid.rows),t.recalcSlides(),t.updateSlides()}else m("Swiper Loop Warning: The number of slides is not even to grid.rows, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)");r()}else r();t.loopFix({slideRealIndex:e,direction:i.centeredSlides?void 0:"next"})},loopFix:function(e){let{slideRealIndex:t,slideTo:i=!0,direction:s,setTranslate:r,activeSlideIndex:n,byController:o,byMousewheel:a}=void 0===e?{}:e;const l=this;if(!l.params.loop)return;l.emit("beforeLoopFix");const{slides:d,allowSlidePrev:c,allowSlideNext:u,slidesEl:p,params:h}=l,{centeredSlides:g}=h;if(l.allowSlidePrev=!0,l.allowSlideNext=!0,l.virtual&&h.virtual.enabled)return i&&(h.centeredSlides||0!==l.snapIndex?h.centeredSlides&&l.snapIndex<h.slidesPerView?l.slideTo(l.virtual.slides.length+l.snapIndex,0,!1,!0):l.snapIndex===l.snapGrid.length-1&&l.slideTo(l.virtual.slidesBefore,0,!1,!0):l.slideTo(l.virtual.slides.length,0,!1,!0)),l.allowSlidePrev=c,l.allowSlideNext=u,void l.emit("loopFix");let f=h.slidesPerView;"auto"===f?f=l.slidesPerViewDynamic():(f=Math.ceil(parseFloat(h.slidesPerView,10)),g&&f%2==0&&(f+=1));const v=h.slidesPerGroupAuto?f:h.slidesPerGroup;let y=v;y%v!=0&&(y+=v-y%v),y+=h.loopAdditionalSlides,l.loopedSlides=y;const b=l.grid&&h.grid&&h.grid.rows>1;d.length<f+y?m("Swiper Loop Warning: The number of slides is not enough for loop mode, it will be disabled and not function properly. You need to add more slides (or make duplicates) or lower the values of slidesPerView and slidesPerGroup parameters"):b&&"row"===h.grid.fill&&m("Swiper Loop Warning: Loop mode is not compatible with grid.fill = `row`");const w=[],S=[];let T=l.activeIndex;void 0===n?n=l.getSlideIndex(d.filter((e=>e.classList.contains(h.slideActiveClass)))[0]):T=n;const x="next"===s||!s,E="prev"===s||!s;let C=0,I=0;const M=b?Math.ceil(d.length/h.grid.rows):d.length,L=(b?d[n].column:n)+(g&&void 0===r?-f/2+.5:0);if(L<y){C=Math.max(y-L,v);for(let e=0;e<y-L;e+=1){const t=e-Math.floor(e/M)*M;if(b){const e=M-t-1;for(let t=d.length-1;t>=0;t-=1)d[t].column===e&&w.push(t)}else w.push(M-t-1)}}else if(L+f>M-y){I=Math.max(L-(M-2*y),v);for(let e=0;e<I;e+=1){const t=e-Math.floor(e/M)*M;b?d.forEach(((e,i)=>{e.column===t&&S.push(i)})):S.push(t)}}if(l.__preventObserver__=!0,requestAnimationFrame((()=>{l.__preventObserver__=!1})),E&&w.forEach((e=>{d[e].swiperLoopMoveDOM=!0,p.prepend(d[e]),d[e].swiperLoopMoveDOM=!1})),x&&S.forEach((e=>{d[e].swiperLoopMoveDOM=!0,p.append(d[e]),d[e].swiperLoopMoveDOM=!1})),l.recalcSlides(),"auto"===h.slidesPerView?l.updateSlides():b&&(w.length>0&&E||S.length>0&&x)&&l.slides.forEach(((e,t)=>{l.grid.updateSlide(t,e,l.slides)})),h.watchSlidesProgress&&l.updateSlidesOffset(),i)if(w.length>0&&E){if(void 0===t){const e=l.slidesGrid[T],t=l.slidesGrid[T+C]-e;a?l.setTranslate(l.translate-t):(l.slideTo(T+Math.ceil(C),0,!1,!0),r&&(l.touchEventsData.startTranslate=l.touchEventsData.startTranslate-t,l.touchEventsData.currentTranslate=l.touchEventsData.currentTranslate-t))}else if(r){const e=b?w.length/h.grid.rows:w.length;l.slideTo(l.activeIndex+e,0,!1,!0),l.touchEventsData.currentTranslate=l.translate}}else if(S.length>0&&x)if(void 0===t){const e=l.slidesGrid[T],t=l.slidesGrid[T-I]-e;a?l.setTranslate(l.translate-t):(l.slideTo(T-I,0,!1,!0),r&&(l.touchEventsData.startTranslate=l.touchEventsData.startTranslate-t,l.touchEventsData.currentTranslate=l.touchEventsData.currentTranslate-t))}else{const e=b?S.length/h.grid.rows:S.length;l.slideTo(l.activeIndex-e,0,!1,!0)}if(l.allowSlidePrev=c,l.allowSlideNext=u,l.controller&&l.controller.control&&!o){const e={slideRealIndex:t,direction:s,setTranslate:r,activeSlideIndex:n,byController:!0};Array.isArray(l.controller.control)?l.controller.control.forEach((t=>{!t.destroyed&&t.params.loop&&t.loopFix({...e,slideTo:t.params.slidesPerView===h.slidesPerView&&i})})):l.controller.control instanceof l.constructor&&l.controller.control.params.loop&&l.controller.control.loopFix({...e,slideTo:l.controller.control.params.slidesPerView===h.slidesPerView&&i})}l.emit("loopFix")},loopDestroy:function(){const e=this,{params:t,slidesEl:i}=e;if(!t.loop||e.virtual&&e.params.virtual.enabled)return;e.recalcSlides();const s=[];e.slides.forEach((e=>{const t=void 0===e.swiperSlideIndex?1*e.getAttribute("data-swiper-slide-index"):e.swiperSlideIndex;s[t]=e})),e.slides.forEach((e=>{e.removeAttribute("data-swiper-slide-index")})),s.forEach((e=>{i.append(e)})),e.recalcSlides(),e.slideTo(e.realIndex,0)}};function F(e,t,i){const s=o(),{params:r}=e,n=r.edgeSwipeDetection,a=r.edgeSwipeThreshold;return!n||!(i<=a||i>=s.innerWidth-a)||"prevent"===n&&(t.preventDefault(),!0)}function N(e){const t=this,i=r();let s=e;s.originalEvent&&(s=s.originalEvent);const n=t.touchEventsData;if("pointerdown"===s.type){if(null!==n.pointerId&&n.pointerId!==s.pointerId)return;n.pointerId=s.pointerId}else"touchstart"===s.type&&1===s.targetTouches.length&&(n.touchId=s.targetTouches[0].identifier);if("touchstart"===s.type)return void F(t,s,s.targetTouches[0].pageX);const{params:a,touches:d,enabled:c}=t;if(!c)return;if(!a.simulateTouch&&"mouse"===s.pointerType)return;if(t.animating&&a.preventInteractionOnTransition)return;!t.animating&&a.cssMode&&a.loop&&t.loopFix();let u=s.target;if("wrapper"===a.touchEventsTarget&&!t.wrapperEl.contains(u))return;if("which"in s&&3===s.which)return;if("button"in s&&s.button>0)return;if(n.isTouched&&n.isMoved)return;const p=!!a.noSwipingClass&&""!==a.noSwipingClass,h=s.composedPath?s.composedPath():s.path;p&&s.target&&s.target.shadowRoot&&h&&(u=h[0]);const g=a.noSwipingSelector?a.noSwipingSelector:`.${a.noSwipingClass}`,m=!(!s.target||!s.target.shadowRoot);if(a.noSwiping&&(m?function(e,t){return void 0===t&&(t=this),function t(i){if(!i||i===r()||i===o())return null;i.assignedSlot&&(i=i.assignedSlot);const s=i.closest(e);return s||i.getRootNode?s||t(i.getRootNode().host):null}(t)}(g,u):u.closest(g)))return void(t.allowClick=!0);if(a.swipeHandler&&!u.closest(a.swipeHandler))return;d.currentX=s.pageX,d.currentY=s.pageY;const f=d.currentX,v=d.currentY;if(!F(t,s,f))return;Object.assign(n,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),d.startX=f,d.startY=v,n.touchStartTime=l(),t.allowClick=!0,t.updateSize(),t.swipeDirection=void 0,a.threshold>0&&(n.allowThresholdMove=!1);let y=!0;u.matches(n.focusableElements)&&(y=!1,"SELECT"===u.nodeName&&(n.isTouched=!1)),i.activeElement&&i.activeElement.matches(n.focusableElements)&&i.activeElement!==u&&i.activeElement.blur();const b=y&&t.allowTouchMove&&a.touchStartPreventDefault;!a.touchStartForcePreventDefault&&!b||u.isContentEditable||s.preventDefault(),a.freeMode&&a.freeMode.enabled&&t.freeMode&&t.animating&&!a.cssMode&&t.freeMode.onTouchStart(),t.emit("touchStart",s)}function H(e){const t=r(),i=this,s=i.touchEventsData,{params:n,touches:o,rtlTranslate:a,enabled:d}=i;if(!d)return;if(!n.simulateTouch&&"mouse"===e.pointerType)return;let c,u=e;if(u.originalEvent&&(u=u.originalEvent),"pointermove"===u.type){if(null!==s.touchId)return;if(u.pointerId!==s.pointerId)return}if("touchmove"===u.type){if(c=[...u.changedTouches].filter((e=>e.identifier===s.touchId))[0],!c||c.identifier!==s.touchId)return}else c=u;if(!s.isTouched)return void(s.startMoving&&s.isScrolling&&i.emit("touchMoveOpposite",u));const p=c.pageX,h=c.pageY;if(u.preventedByNestedSwiper)return o.startX=p,void(o.startY=h);if(!i.allowTouchMove)return u.target.matches(s.focusableElements)||(i.allowClick=!1),void(s.isTouched&&(Object.assign(o,{startX:p,startY:h,currentX:p,currentY:h}),s.touchStartTime=l()));if(n.touchReleaseOnEdges&&!n.loop)if(i.isVertical()){if(h<o.startY&&i.translate<=i.maxTranslate()||h>o.startY&&i.translate>=i.minTranslate())return s.isTouched=!1,void(s.isMoved=!1)}else if(p<o.startX&&i.translate<=i.maxTranslate()||p>o.startX&&i.translate>=i.minTranslate())return;if(t.activeElement&&u.target===t.activeElement&&u.target.matches(s.focusableElements))return s.isMoved=!0,void(i.allowClick=!1);s.allowTouchCallbacks&&i.emit("touchMove",u),o.previousX=o.currentX,o.previousY=o.currentY,o.currentX=p,o.currentY=h;const g=o.currentX-o.startX,m=o.currentY-o.startY;if(i.params.threshold&&Math.sqrt(g**2+m**2)<i.params.threshold)return;if(void 0===s.isScrolling){let e;i.isHorizontal()&&o.currentY===o.startY||i.isVertical()&&o.currentX===o.startX?s.isScrolling=!1:g*g+m*m>=25&&(e=180*Math.atan2(Math.abs(m),Math.abs(g))/Math.PI,s.isScrolling=i.isHorizontal()?e>n.touchAngle:90-e>n.touchAngle)}if(s.isScrolling&&i.emit("touchMoveOpposite",u),void 0===s.startMoving&&(o.currentX===o.startX&&o.currentY===o.startY||(s.startMoving=!0)),s.isScrolling||"touchmove"===u.type&&s.preventTouchMoveFromPointerMove)return void(s.isTouched=!1);if(!s.startMoving)return;i.allowClick=!1,!n.cssMode&&u.cancelable&&u.preventDefault(),n.touchMoveStopPropagation&&!n.nested&&u.stopPropagation();let f=i.isHorizontal()?g:m,v=i.isHorizontal()?o.currentX-o.previousX:o.currentY-o.previousY;n.oneWayMovement&&(f=Math.abs(f)*(a?1:-1),v=Math.abs(v)*(a?1:-1)),o.diff=f,f*=n.touchRatio,a&&(f=-f,v=-v);const y=i.touchesDirection;i.swipeDirection=f>0?"prev":"next",i.touchesDirection=v>0?"prev":"next";const b=i.params.loop&&!n.cssMode,w="next"===i.touchesDirection&&i.allowSlideNext||"prev"===i.touchesDirection&&i.allowSlidePrev;if(!s.isMoved){if(b&&w&&i.loopFix({direction:i.swipeDirection}),s.startTranslate=i.getTranslate(),i.setTransition(0),i.animating){const e=new window.CustomEvent("transitionend",{bubbles:!0,cancelable:!0,detail:{bySwiperTouchMove:!0}});i.wrapperEl.dispatchEvent(e)}s.allowMomentumBounce=!1,!n.grabCursor||!0!==i.allowSlideNext&&!0!==i.allowSlidePrev||i.setGrabCursor(!0),i.emit("sliderFirstMove",u)}if((new Date).getTime(),s.isMoved&&s.allowThresholdMove&&y!==i.touchesDirection&&b&&w&&Math.abs(f)>=1)return Object.assign(o,{startX:p,startY:h,currentX:p,currentY:h,startTranslate:s.currentTranslate}),s.loopSwapReset=!0,void(s.startTranslate=s.currentTranslate);i.emit("sliderMove",u),s.isMoved=!0,s.currentTranslate=f+s.startTranslate;let S=!0,T=n.resistanceRatio;if(n.touchReleaseOnEdges&&(T=0),f>0?(b&&w&&s.allowThresholdMove&&s.currentTranslate>(n.centeredSlides?i.minTranslate()-i.slidesSizesGrid[i.activeIndex+1]:i.minTranslate())&&i.loopFix({direction:"prev",setTranslate:!0,activeSlideIndex:0}),s.currentTranslate>i.minTranslate()&&(S=!1,n.resistance&&(s.currentTranslate=i.minTranslate()-1+(-i.minTranslate()+s.startTranslate+f)**T))):f<0&&(b&&w&&s.allowThresholdMove&&s.currentTranslate<(n.centeredSlides?i.maxTranslate()+i.slidesSizesGrid[i.slidesSizesGrid.length-1]:i.maxTranslate())&&i.loopFix({direction:"next",setTranslate:!0,activeSlideIndex:i.slides.length-("auto"===n.slidesPerView?i.slidesPerViewDynamic():Math.ceil(parseFloat(n.slidesPerView,10)))}),s.currentTranslate<i.maxTranslate()&&(S=!1,n.resistance&&(s.currentTranslate=i.maxTranslate()+1-(i.maxTranslate()-s.startTranslate-f)**T))),S&&(u.preventedByNestedSwiper=!0),!i.allowSlideNext&&"next"===i.swipeDirection&&s.currentTranslate<s.startTranslate&&(s.currentTranslate=s.startTranslate),!i.allowSlidePrev&&"prev"===i.swipeDirection&&s.currentTranslate>s.startTranslate&&(s.currentTranslate=s.startTranslate),i.allowSlidePrev||i.allowSlideNext||(s.currentTranslate=s.startTranslate),n.threshold>0){if(!(Math.abs(f)>n.threshold||s.allowThresholdMove))return void(s.currentTranslate=s.startTranslate);if(!s.allowThresholdMove)return s.allowThresholdMove=!0,o.startX=o.currentX,o.startY=o.currentY,s.currentTranslate=s.startTranslate,void(o.diff=i.isHorizontal()?o.currentX-o.startX:o.currentY-o.startY)}n.followFinger&&!n.cssMode&&((n.freeMode&&n.freeMode.enabled&&i.freeMode||n.watchSlidesProgress)&&(i.updateActiveIndex(),i.updateSlidesClasses()),n.freeMode&&n.freeMode.enabled&&i.freeMode&&i.freeMode.onTouchMove(),i.updateProgress(s.currentTranslate),i.setTranslate(s.currentTranslate))}function V(e){const t=this,i=t.touchEventsData;let s,r=e;r.originalEvent&&(r=r.originalEvent);if("touchend"===r.type||"touchcancel"===r.type){if(s=[...r.changedTouches].filter((e=>e.identifier===i.touchId))[0],!s||s.identifier!==i.touchId)return}else{if(null!==i.touchId)return;if(r.pointerId!==i.pointerId)return;s=r}if(["pointercancel","pointerout","pointerleave","contextmenu"].includes(r.type)){if(!(["pointercancel","contextmenu"].includes(r.type)&&(t.browser.isSafari||t.browser.isWebView)))return}i.pointerId=null,i.touchId=null;const{params:n,touches:o,rtlTranslate:d,slidesGrid:c,enabled:u}=t;if(!u)return;if(!n.simulateTouch&&"mouse"===r.pointerType)return;if(i.allowTouchCallbacks&&t.emit("touchEnd",r),i.allowTouchCallbacks=!1,!i.isTouched)return i.isMoved&&n.grabCursor&&t.setGrabCursor(!1),i.isMoved=!1,void(i.startMoving=!1);n.grabCursor&&i.isMoved&&i.isTouched&&(!0===t.allowSlideNext||!0===t.allowSlidePrev)&&t.setGrabCursor(!1);const p=l(),h=p-i.touchStartTime;if(t.allowClick){const e=r.path||r.composedPath&&r.composedPath();t.updateClickedSlide(e&&e[0]||r.target,e),t.emit("tap click",r),h<300&&p-i.lastClickTime<300&&t.emit("doubleTap doubleClick",r)}if(i.lastClickTime=l(),a((()=>{t.destroyed||(t.allowClick=!0)})),!i.isTouched||!i.isMoved||!t.swipeDirection||0===o.diff&&!i.loopSwapReset||i.currentTranslate===i.startTranslate&&!i.loopSwapReset)return i.isTouched=!1,i.isMoved=!1,void(i.startMoving=!1);let g;if(i.isTouched=!1,i.isMoved=!1,i.startMoving=!1,g=n.followFinger?d?t.translate:-t.translate:-i.currentTranslate,n.cssMode)return;if(n.freeMode&&n.freeMode.enabled)return void t.freeMode.onTouchEnd({currentPos:g});const m=g>=-t.maxTranslate()&&!t.params.loop;let f=0,v=t.slidesSizesGrid[0];for(let e=0;e<c.length;e+=e<n.slidesPerGroupSkip?1:n.slidesPerGroup){const t=e<n.slidesPerGroupSkip-1?1:n.slidesPerGroup;void 0!==c[e+t]?(m||g>=c[e]&&g<c[e+t])&&(f=e,v=c[e+t]-c[e]):(m||g>=c[e])&&(f=e,v=c[c.length-1]-c[c.length-2])}let y=null,b=null;n.rewind&&(t.isBeginning?b=n.virtual&&n.virtual.enabled&&t.virtual?t.virtual.slides.length-1:t.slides.length-1:t.isEnd&&(y=0));const w=(g-c[f])/v,S=f<n.slidesPerGroupSkip-1?1:n.slidesPerGroup;if(h>n.longSwipesMs){if(!n.longSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&(w>=n.longSwipesRatio?t.slideTo(n.rewind&&t.isEnd?y:f+S):t.slideTo(f)),"prev"===t.swipeDirection&&(w>1-n.longSwipesRatio?t.slideTo(f+S):null!==b&&w<0&&Math.abs(w)>n.longSwipesRatio?t.slideTo(b):t.slideTo(f))}else{if(!n.shortSwipes)return void t.slideTo(t.activeIndex);t.navigation&&(r.target===t.navigation.nextEl||r.target===t.navigation.prevEl)?r.target===t.navigation.nextEl?t.slideTo(f+S):t.slideTo(f):("next"===t.swipeDirection&&t.slideTo(null!==y?y:f+S),"prev"===t.swipeDirection&&t.slideTo(null!==b?b:f))}}function $(){const e=this,{params:t,el:i}=e;if(i&&0===i.offsetWidth)return;t.breakpoints&&e.setBreakpoint();const{allowSlideNext:s,allowSlidePrev:r,snapGrid:n}=e,o=e.virtual&&e.params.virtual.enabled;e.allowSlideNext=!0,e.allowSlidePrev=!0,e.updateSize(),e.updateSlides(),e.updateSlidesClasses();const a=o&&t.loop;!("auto"===t.slidesPerView||t.slidesPerView>1)||!e.isEnd||e.isBeginning||e.params.centeredSlides||a?e.params.loop&&!o?e.slideToLoop(e.realIndex,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0):e.slideTo(e.slides.length-1,0,!1,!0),e.autoplay&&e.autoplay.running&&e.autoplay.paused&&(clearTimeout(e.autoplay.resizeTimeout),e.autoplay.resizeTimeout=setTimeout((()=>{e.autoplay&&e.autoplay.running&&e.autoplay.paused&&e.autoplay.resume()}),500)),e.allowSlidePrev=r,e.allowSlideNext=s,e.params.watchOverflow&&n!==e.snapGrid&&e.checkOverflow()}function q(e){const t=this;t.enabled&&(t.allowClick||(t.params.preventClicks&&e.preventDefault(),t.params.preventClicksPropagation&&t.animating&&(e.stopPropagation(),e.stopImmediatePropagation())))}function j(){const e=this,{wrapperEl:t,rtlTranslate:i,enabled:s}=e;if(!s)return;let r;e.previousTranslate=e.translate,e.isHorizontal()?e.translate=-t.scrollLeft:e.translate=-t.scrollTop,0===e.translate&&(e.translate=0),e.updateActiveIndex(),e.updateSlidesClasses();const n=e.maxTranslate()-e.minTranslate();r=0===n?0:(e.translate-e.minTranslate())/n,r!==e.progress&&e.updateProgress(i?-e.translate:e.translate),e.emit("setTranslate",e.translate,!1)}function R(e){const t=this;k(t,e.target),t.params.cssMode||"auto"!==t.params.slidesPerView&&!t.params.autoHeight||t.update()}function W(){const e=this;e.documentTouchHandlerProceeded||(e.documentTouchHandlerProceeded=!0,e.params.touchReleaseOnEdges&&(e.el.style.touchAction="auto"))}const Y=(e,t)=>{const i=r(),{params:s,el:n,wrapperEl:o,device:a}=e,l=!!s.nested,d="on"===t?"addEventListener":"removeEventListener",c=t;n&&"string"!=typeof n&&(i[d]("touchstart",e.onDocumentTouchStart,{passive:!1,capture:l}),n[d]("touchstart",e.onTouchStart,{passive:!1}),n[d]("pointerdown",e.onTouchStart,{passive:!1}),i[d]("touchmove",e.onTouchMove,{passive:!1,capture:l}),i[d]("pointermove",e.onTouchMove,{passive:!1,capture:l}),i[d]("touchend",e.onTouchEnd,{passive:!0}),i[d]("pointerup",e.onTouchEnd,{passive:!0}),i[d]("pointercancel",e.onTouchEnd,{passive:!0}),i[d]("touchcancel",e.onTouchEnd,{passive:!0}),i[d]("pointerout",e.onTouchEnd,{passive:!0}),i[d]("pointerleave",e.onTouchEnd,{passive:!0}),i[d]("contextmenu",e.onTouchEnd,{passive:!0}),(s.preventClicks||s.preventClicksPropagation)&&n[d]("click",e.onClick,!0),s.cssMode&&o[d]("scroll",e.onScroll),s.updateOnWindowResize?e[c](a.ios||a.android?"resize orientationchange observerUpdate":"resize observerUpdate",$,!0):e[c]("observerUpdate",$,!0),n[d]("load",e.onLoad,{capture:!0}))};const X=(e,t)=>e.grid&&t.grid&&t.grid.rows>1;var U={init:!0,direction:"horizontal",oneWayMovement:!1,swiperElementNodeName:"SWIPER-CONTAINER",touchEventsTarget:"wrapper",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,resizeObserver:!0,nested:!1,createElements:!1,eventsPrefix:"swiper",enabled:!0,focusableElements:"input, select, option, textarea, button, video, label",width:null,height:null,preventInteractionOnTransition:!1,userAgent:null,url:null,edgeSwipeDetection:!1,edgeSwipeThreshold:20,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,breakpointsBase:"window",spaceBetween:0,slidesPerView:1,slidesPerGroup:1,slidesPerGroupSkip:0,slidesPerGroupAuto:!1,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!0,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:5,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,loop:!1,loopAddBlankSlides:!0,loopAdditionalSlides:0,loopPreventsSliding:!0,rewind:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,maxBackfaceHiddenSlides:10,containerModifierClass:"swiper-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-blank",slideActiveClass:"swiper-slide-active",slideVisibleClass:"swiper-slide-visible",slideFullyVisibleClass:"swiper-slide-fully-visible",slideNextClass:"swiper-slide-next",slidePrevClass:"swiper-slide-prev",wrapperClass:"swiper-wrapper",lazyPreloaderClass:"swiper-lazy-preloader",lazyPreloadPrevNext:0,runCallbacksOnInit:!0,_emitClasses:!1};function K(e,t){return function(i){void 0===i&&(i={});const s=Object.keys(i)[0],r=i[s];"object"==typeof r&&null!==r?(!0===e[s]&&(e[s]={enabled:!0}),"navigation"===s&&e[s]&&e[s].enabled&&!e[s].prevEl&&!e[s].nextEl&&(e[s].auto=!0),["pagination","scrollbar"].indexOf(s)>=0&&e[s]&&e[s].enabled&&!e[s].el&&(e[s].auto=!0),s in e&&"enabled"in r?("object"!=typeof e[s]||"enabled"in e[s]||(e[s].enabled=!0),e[s]||(e[s]={enabled:!1}),u(t,i)):u(t,i)):u(t,i)}}const Q={eventsEmitter:M,update:_,translate:z,transition:{setTransition:function(e,t){const i=this;i.params.cssMode||(i.wrapperEl.style.transitionDuration=`${e}ms`,i.wrapperEl.style.transitionDelay=0===e?"0ms":""),i.emit("setTransition",e,t)},transitionStart:function(e,t){void 0===e&&(e=!0);const i=this,{params:s}=i;s.cssMode||(s.autoHeight&&i.updateAutoHeight(),D({swiper:i,runCallbacks:e,direction:t,step:"Start"}))},transitionEnd:function(e,t){void 0===e&&(e=!0);const i=this,{params:s}=i;i.animating=!1,s.cssMode||(i.setTransition(0),D({swiper:i,runCallbacks:e,direction:t,step:"End"}))}},slide:G,loop:B,grabCursor:{setGrabCursor:function(e){const t=this;if(!t.params.simulateTouch||t.params.watchOverflow&&t.isLocked||t.params.cssMode)return;const i="container"===t.params.touchEventsTarget?t.el:t.wrapperEl;t.isElement&&(t.__preventObserver__=!0),i.style.cursor="move",i.style.cursor=e?"grabbing":"grab",t.isElement&&requestAnimationFrame((()=>{t.__preventObserver__=!1}))},unsetGrabCursor:function(){const e=this;e.params.watchOverflow&&e.isLocked||e.params.cssMode||(e.isElement&&(e.__preventObserver__=!0),e["container"===e.params.touchEventsTarget?"el":"wrapperEl"].style.cursor="",e.isElement&&requestAnimationFrame((()=>{e.__preventObserver__=!1})))}},events:{attachEvents:function(){const e=this,{params:t}=e;e.onTouchStart=N.bind(e),e.onTouchMove=H.bind(e),e.onTouchEnd=V.bind(e),e.onDocumentTouchStart=W.bind(e),t.cssMode&&(e.onScroll=j.bind(e)),e.onClick=q.bind(e),e.onLoad=R.bind(e),Y(e,"on")},detachEvents:function(){Y(this,"off")}},breakpoints:{setBreakpoint:function(){const e=this,{realIndex:t,initialized:i,params:s,el:r}=e,n=s.breakpoints;if(!n||n&&0===Object.keys(n).length)return;const o=e.getBreakpoint(n,e.params.breakpointsBase,e.el);if(!o||e.currentBreakpoint===o)return;const a=(o in n?n[o]:void 0)||e.originalParams,l=X(e,s),d=X(e,a),c=e.params.grabCursor,p=a.grabCursor,h=s.enabled;l&&!d?(r.classList.remove(`${s.containerModifierClass}grid`,`${s.containerModifierClass}grid-column`),e.emitContainerClasses()):!l&&d&&(r.classList.add(`${s.containerModifierClass}grid`),(a.grid.fill&&"column"===a.grid.fill||!a.grid.fill&&"column"===s.grid.fill)&&r.classList.add(`${s.containerModifierClass}grid-column`),e.emitContainerClasses()),c&&!p?e.unsetGrabCursor():!c&&p&&e.setGrabCursor(),["navigation","pagination","scrollbar"].forEach((t=>{if(void 0===a[t])return;const i=s[t]&&s[t].enabled,r=a[t]&&a[t].enabled;i&&!r&&e[t].disable(),!i&&r&&e[t].enable()}));const g=a.direction&&a.direction!==s.direction,m=s.loop&&(a.slidesPerView!==s.slidesPerView||g),f=s.loop;g&&i&&e.changeDirection(),u(e.params,a);const v=e.params.enabled,y=e.params.loop;Object.assign(e,{allowTouchMove:e.params.allowTouchMove,allowSlideNext:e.params.allowSlideNext,allowSlidePrev:e.params.allowSlidePrev}),h&&!v?e.disable():!h&&v&&e.enable(),e.currentBreakpoint=o,e.emit("_beforeBreakpoint",a),i&&(m?(e.loopDestroy(),e.loopCreate(t),e.updateSlides()):!f&&y?(e.loopCreate(t),e.updateSlides()):f&&!y&&e.loopDestroy()),e.emit("breakpoint",a)},getBreakpoint:function(e,t,i){if(void 0===t&&(t="window"),!e||"container"===t&&!i)return;let s=!1;const r=o(),n="window"===t?r.innerHeight:i.clientHeight,a=Object.keys(e).map((e=>{if("string"==typeof e&&0===e.indexOf("@")){const t=parseFloat(e.substr(1));return{value:n*t,point:e}}return{value:e,point:e}}));a.sort(((e,t)=>parseInt(e.value,10)-parseInt(t.value,10)));for(let e=0;e<a.length;e+=1){const{point:n,value:o}=a[e];"window"===t?r.matchMedia(`(min-width: ${o}px)`).matches&&(s=n):o<=i.clientWidth&&(s=n)}return s||"max"}},checkOverflow:{checkOverflow:function(){const e=this,{isLocked:t,params:i}=e,{slidesOffsetBefore:s}=i;if(s){const t=e.slides.length-1,i=e.slidesGrid[t]+e.slidesSizesGrid[t]+2*s;e.isLocked=e.size>i}else e.isLocked=1===e.snapGrid.length;!0===i.allowSlideNext&&(e.allowSlideNext=!e.isLocked),!0===i.allowSlidePrev&&(e.allowSlidePrev=!e.isLocked),t&&t!==e.isLocked&&(e.isEnd=!1),t!==e.isLocked&&e.emit(e.isLocked?"lock":"unlock")}},classes:{addClasses:function(){const e=this,{classNames:t,params:i,rtl:s,el:r,device:n}=e,o=function(e,t){const i=[];return e.forEach((e=>{"object"==typeof e?Object.keys(e).forEach((s=>{e[s]&&i.push(t+s)})):"string"==typeof e&&i.push(t+e)})),i}(["initialized",i.direction,{"free-mode":e.params.freeMode&&i.freeMode.enabled},{autoheight:i.autoHeight},{rtl:s},{grid:i.grid&&i.grid.rows>1},{"grid-column":i.grid&&i.grid.rows>1&&"column"===i.grid.fill},{android:n.android},{ios:n.ios},{"css-mode":i.cssMode},{centered:i.cssMode&&i.centeredSlides},{"watch-progress":i.watchSlidesProgress}],i.containerModifierClass);t.push(...o),r.classList.add(...t),e.emitContainerClasses()},removeClasses:function(){const{el:e,classNames:t}=this;e&&"string"!=typeof e&&(e.classList.remove(...t),this.emitContainerClasses())}}},Z={};class J{constructor(){let e,t;for(var i=arguments.length,s=new Array(i),n=0;n<i;n++)s[n]=arguments[n];1===s.length&&s[0].constructor&&"Object"===Object.prototype.toString.call(s[0]).slice(8,-1)?t=s[0]:[e,t]=s,t||(t={}),t=u({},t),e&&!t.el&&(t.el=e);const o=r();if(t.el&&"string"==typeof t.el&&o.querySelectorAll(t.el).length>1){const e=[];return o.querySelectorAll(t.el).forEach((i=>{const s=u({},t,{el:i});e.push(new J(s))})),e}const a=this;a.__swiper__=!0,a.support=E(),a.device=C({userAgent:t.userAgent}),a.browser=I(),a.eventsListeners={},a.eventsAnyListeners=[],a.modules=[...a.__modules__],t.modules&&Array.isArray(t.modules)&&a.modules.push(...t.modules);const l={};a.modules.forEach((e=>{e({params:t,swiper:a,extendParams:K(t,l),on:a.on.bind(a),once:a.once.bind(a),off:a.off.bind(a),emit:a.emit.bind(a)})}));const d=u({},U,l);return a.params=u({},d,Z,t),a.originalParams=u({},a.params),a.passedParams=u({},t),a.params&&a.params.on&&Object.keys(a.params.on).forEach((e=>{a.on(e,a.params.on[e])})),a.params&&a.params.onAny&&a.onAny(a.params.onAny),Object.assign(a,{enabled:a.params.enabled,el:e,classNames:[],slides:[],slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:()=>"horizontal"===a.params.direction,isVertical:()=>"vertical"===a.params.direction,activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,cssOverflowAdjustment(){return Math.trunc(this.translate/2**23)*2**23},allowSlideNext:a.params.allowSlideNext,allowSlidePrev:a.params.allowSlidePrev,touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,focusableElements:a.params.focusableElements,lastClickTime:0,clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,startMoving:void 0,pointerId:null,touchId:null},allowClick:!0,allowTouchMove:a.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),a.emit("_swiper"),a.params.init&&a.init(),a}getDirectionLabel(e){return this.isHorizontal()?e:{width:"height","margin-top":"margin-left","margin-bottom ":"margin-right","margin-left":"margin-top","margin-right":"margin-bottom","padding-left":"padding-top","padding-right":"padding-bottom",marginRight:"marginBottom"}[e]}getSlideIndex(e){const{slidesEl:t,params:i}=this,s=y(g(t,`.${i.slideClass}, swiper-slide`)[0]);return y(e)-s}getSlideIndexByData(e){return this.getSlideIndex(this.slides.filter((t=>1*t.getAttribute("data-swiper-slide-index")===e))[0])}recalcSlides(){const{slidesEl:e,params:t}=this;this.slides=g(e,`.${t.slideClass}, swiper-slide`)}enable(){const e=this;e.enabled||(e.enabled=!0,e.params.grabCursor&&e.setGrabCursor(),e.emit("enable"))}disable(){const e=this;e.enabled&&(e.enabled=!1,e.params.grabCursor&&e.unsetGrabCursor(),e.emit("disable"))}setProgress(e,t){const i=this;e=Math.min(Math.max(e,0),1);const s=i.minTranslate(),r=(i.maxTranslate()-s)*e+s;i.translateTo(r,void 0===t?0:t),i.updateActiveIndex(),i.updateSlidesClasses()}emitContainerClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const t=e.el.className.split(" ").filter((t=>0===t.indexOf("swiper")||0===t.indexOf(e.params.containerModifierClass)));e.emit("_containerClasses",t.join(" "))}getSlideClasses(e){const t=this;return t.destroyed?"":e.className.split(" ").filter((e=>0===e.indexOf("swiper-slide")||0===e.indexOf(t.params.slideClass))).join(" ")}emitSlidesClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const t=[];e.slides.forEach((i=>{const s=e.getSlideClasses(i);t.push({slideEl:i,classNames:s}),e.emit("_slideClass",i,s)})),e.emit("_slideClasses",t)}slidesPerViewDynamic(e,t){void 0===e&&(e="current"),void 0===t&&(t=!1);const{params:i,slides:s,slidesGrid:r,slidesSizesGrid:n,size:o,activeIndex:a}=this;let l=1;if("number"==typeof i.slidesPerView)return i.slidesPerView;if(i.centeredSlides){let e,t=s[a]?Math.ceil(s[a].swiperSlideSize):0;for(let i=a+1;i<s.length;i+=1)s[i]&&!e&&(t+=Math.ceil(s[i].swiperSlideSize),l+=1,t>o&&(e=!0));for(let i=a-1;i>=0;i-=1)s[i]&&!e&&(t+=s[i].swiperSlideSize,l+=1,t>o&&(e=!0))}else if("current"===e)for(let e=a+1;e<s.length;e+=1){(t?r[e]+n[e]-r[a]<o:r[e]-r[a]<o)&&(l+=1)}else for(let e=a-1;e>=0;e-=1){r[a]-r[e]<o&&(l+=1)}return l}update(){const e=this;if(!e||e.destroyed)return;const{snapGrid:t,params:i}=e;function s(){const t=e.rtlTranslate?-1*e.translate:e.translate,i=Math.min(Math.max(t,e.maxTranslate()),e.minTranslate());e.setTranslate(i),e.updateActiveIndex(),e.updateSlidesClasses()}let r;if(i.breakpoints&&e.setBreakpoint(),[...e.el.querySelectorAll('[loading="lazy"]')].forEach((t=>{t.complete&&k(e,t)})),e.updateSize(),e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),i.freeMode&&i.freeMode.enabled&&!i.cssMode)s(),i.autoHeight&&e.updateAutoHeight();else{if(("auto"===i.slidesPerView||i.slidesPerView>1)&&e.isEnd&&!i.centeredSlides){const t=e.virtual&&i.virtual.enabled?e.virtual.slides:e.slides;r=e.slideTo(t.length-1,0,!1,!0)}else r=e.slideTo(e.activeIndex,0,!1,!0);r||s()}i.watchOverflow&&t!==e.snapGrid&&e.checkOverflow(),e.emit("update")}changeDirection(e,t){void 0===t&&(t=!0);const i=this,s=i.params.direction;return e||(e="horizontal"===s?"vertical":"horizontal"),e===s||"horizontal"!==e&&"vertical"!==e||(i.el.classList.remove(`${i.params.containerModifierClass}${s}`),i.el.classList.add(`${i.params.containerModifierClass}${e}`),i.emitContainerClasses(),i.params.direction=e,i.slides.forEach((t=>{"vertical"===e?t.style.width="":t.style.height=""})),i.emit("changeDirection"),t&&i.update()),i}changeLanguageDirection(e){const t=this;t.rtl&&"rtl"===e||!t.rtl&&"ltr"===e||(t.rtl="rtl"===e,t.rtlTranslate="horizontal"===t.params.direction&&t.rtl,t.rtl?(t.el.classList.add(`${t.params.containerModifierClass}rtl`),t.el.dir="rtl"):(t.el.classList.remove(`${t.params.containerModifierClass}rtl`),t.el.dir="ltr"),t.update())}mount(e){const t=this;if(t.mounted)return!0;let i=e||t.params.el;if("string"==typeof i&&(i=document.querySelector(i)),!i)return!1;i.swiper=t,i.parentNode&&i.parentNode.host&&i.parentNode.host.nodeName===t.params.swiperElementNodeName.toUpperCase()&&(t.isElement=!0);const s=()=>`.${(t.params.wrapperClass||"").trim().split(" ").join(".")}`;let r=(()=>{if(i&&i.shadowRoot&&i.shadowRoot.querySelector){return i.shadowRoot.querySelector(s())}return g(i,s())[0]})();return!r&&t.params.createElements&&(r=f("div",t.params.wrapperClass),i.append(r),g(i,`.${t.params.slideClass}`).forEach((e=>{r.append(e)}))),Object.assign(t,{el:i,wrapperEl:r,slidesEl:t.isElement&&!i.parentNode.host.slideSlots?i.parentNode.host:r,hostEl:t.isElement?i.parentNode.host:i,mounted:!0,rtl:"rtl"===i.dir.toLowerCase()||"rtl"===v(i,"direction"),rtlTranslate:"horizontal"===t.params.direction&&("rtl"===i.dir.toLowerCase()||"rtl"===v(i,"direction")),wrongRTL:"-webkit-box"===v(r,"display")}),!0}init(e){const t=this;if(t.initialized)return t;if(!1===t.mount(e))return t;t.emit("beforeInit"),t.params.breakpoints&&t.setBreakpoint(),t.addClasses(),t.updateSize(),t.updateSlides(),t.params.watchOverflow&&t.checkOverflow(),t.params.grabCursor&&t.enabled&&t.setGrabCursor(),t.params.loop&&t.virtual&&t.params.virtual.enabled?t.slideTo(t.params.initialSlide+t.virtual.slidesBefore,0,t.params.runCallbacksOnInit,!1,!0):t.slideTo(t.params.initialSlide,0,t.params.runCallbacksOnInit,!1,!0),t.params.loop&&t.loopCreate(),t.attachEvents();const i=[...t.el.querySelectorAll('[loading="lazy"]')];return t.isElement&&i.push(...t.hostEl.querySelectorAll('[loading="lazy"]')),i.forEach((e=>{e.complete?k(t,e):e.addEventListener("load",(e=>{k(t,e.target)}))})),A(t),t.initialized=!0,A(t),t.emit("init"),t.emit("afterInit"),t}destroy(e,t){void 0===e&&(e=!0),void 0===t&&(t=!0);const i=this,{params:s,el:r,wrapperEl:n,slides:o}=i;return void 0===i.params||i.destroyed||(i.emit("beforeDestroy"),i.initialized=!1,i.detachEvents(),s.loop&&i.loopDestroy(),t&&(i.removeClasses(),r&&"string"!=typeof r&&r.removeAttribute("style"),n&&n.removeAttribute("style"),o&&o.length&&o.forEach((e=>{e.classList.remove(s.slideVisibleClass,s.slideFullyVisibleClass,s.slideActiveClass,s.slideNextClass,s.slidePrevClass),e.removeAttribute("style"),e.removeAttribute("data-swiper-slide-index")}))),i.emit("destroy"),Object.keys(i.eventsListeners).forEach((e=>{i.off(e)})),!1!==e&&(i.el&&"string"!=typeof i.el&&(i.el.swiper=null),function(e){const t=e;Object.keys(t).forEach((e=>{try{t[e]=null}catch(e){}try{delete t[e]}catch(e){}}))}(i)),i.destroyed=!0),null}static extendDefaults(e){u(Z,e)}static get extendedDefaults(){return Z}static get defaults(){return U}static installModule(e){J.prototype.__modules__||(J.prototype.__modules__=[]);const t=J.prototype.__modules__;"function"==typeof e&&t.indexOf(e)<0&&t.push(e)}static use(e){return Array.isArray(e)?(e.forEach((e=>J.installModule(e))),J):(J.installModule(e),J)}}function ee(e){let{swiper:t,extendParams:i,on:s,emit:r}=e;function n(e){let i;return e&&"string"==typeof e&&t.isElement&&(i=t.el.querySelector(e),i)?i:(e&&("string"==typeof e&&(i=[...document.querySelectorAll(e)]),t.params.uniqueNavElements&&"string"==typeof e&&i&&i.length>1&&1===t.el.querySelectorAll(e).length?i=t.el.querySelector(e):i&&1===i.length&&(i=i[0])),e&&!i?e:i)}function o(e,i){const s=t.params.navigation;(e=w(e)).forEach((e=>{e&&(e.classList[i?"add":"remove"](...s.disabledClass.split(" ")),"BUTTON"===e.tagName&&(e.disabled=i),t.params.watchOverflow&&t.enabled&&e.classList[t.isLocked?"add":"remove"](s.lockClass))}))}function a(){const{nextEl:e,prevEl:i}=t.navigation;if(t.params.loop)return o(i,!1),void o(e,!1);o(i,t.isBeginning&&!t.params.rewind),o(e,t.isEnd&&!t.params.rewind)}function l(e){e.preventDefault(),(!t.isBeginning||t.params.loop||t.params.rewind)&&(t.slidePrev(),r("navigationPrev"))}function d(e){e.preventDefault(),(!t.isEnd||t.params.loop||t.params.rewind)&&(t.slideNext(),r("navigationNext"))}function c(){const e=t.params.navigation;if(t.params.navigation=function(e,t,i,s){return e.params.createElements&&Object.keys(s).forEach((r=>{if(!i[r]&&!0===i.auto){let n=g(e.el,`.${s[r]}`)[0];n||(n=f("div",s[r]),n.className=s[r],e.el.append(n)),i[r]=n,t[r]=n}})),i}(t,t.originalParams.navigation,t.params.navigation,{nextEl:"swiper-button-next",prevEl:"swiper-button-prev"}),!e.nextEl&&!e.prevEl)return;let i=n(e.nextEl),s=n(e.prevEl);Object.assign(t.navigation,{nextEl:i,prevEl:s}),i=w(i),s=w(s);const r=(i,s)=>{i&&i.addEventListener("click","next"===s?d:l),!t.enabled&&i&&i.classList.add(...e.lockClass.split(" "))};i.forEach((e=>r(e,"next"))),s.forEach((e=>r(e,"prev")))}function u(){let{nextEl:e,prevEl:i}=t.navigation;e=w(e),i=w(i);const s=(e,i)=>{e.removeEventListener("click","next"===i?d:l),e.classList.remove(...t.params.navigation.disabledClass.split(" "))};e.forEach((e=>s(e,"next"))),i.forEach((e=>s(e,"prev")))}i({navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock",navigationDisabledClass:"swiper-navigation-disabled"}}),t.navigation={nextEl:null,prevEl:null},s("init",(()=>{!1===t.params.navigation.enabled?p():(c(),a())})),s("toEdge fromEdge lock unlock",(()=>{a()})),s("destroy",(()=>{u()})),s("enable disable",(()=>{let{nextEl:e,prevEl:i}=t.navigation;e=w(e),i=w(i),t.enabled?a():[...e,...i].filter((e=>!!e)).forEach((e=>e.classList.add(t.params.navigation.lockClass)))})),s("click",((e,i)=>{let{nextEl:s,prevEl:n}=t.navigation;s=w(s),n=w(n);const o=i.target;let a=n.includes(o)||s.includes(o);if(t.isElement&&!a){const e=i.path||i.composedPath&&i.composedPath();e&&(a=e.find((e=>s.includes(e)||n.includes(e))))}if(t.params.navigation.hideOnClick&&!a){if(t.pagination&&t.params.pagination&&t.params.pagination.clickable&&(t.pagination.el===o||t.pagination.el.contains(o)))return;let e;s.length?e=s[0].classList.contains(t.params.navigation.hiddenClass):n.length&&(e=n[0].classList.contains(t.params.navigation.hiddenClass)),r(!0===e?"navigationShow":"navigationHide"),[...s,...n].filter((e=>!!e)).forEach((e=>e.classList.toggle(t.params.navigation.hiddenClass)))}}));const p=()=>{t.el.classList.add(...t.params.navigation.navigationDisabledClass.split(" ")),u()};Object.assign(t.navigation,{enable:()=>{t.el.classList.remove(...t.params.navigation.navigationDisabledClass.split(" ")),c(),a()},disable:p,update:a,init:c,destroy:u})}Object.keys(Q).forEach((e=>{Object.keys(Q[e]).forEach((t=>{J.prototype[t]=Q[e][t]}))})),J.use([function(e){let{swiper:t,on:i,emit:s}=e;const r=o();let n=null,a=null;const l=()=>{t&&!t.destroyed&&t.initialized&&(s("beforeResize"),s("resize"))},d=()=>{t&&!t.destroyed&&t.initialized&&s("orientationchange")};i("init",(()=>{t.params.resizeObserver&&void 0!==r.ResizeObserver?t&&!t.destroyed&&t.initialized&&(n=new ResizeObserver((e=>{a=r.requestAnimationFrame((()=>{const{width:i,height:s}=t;let r=i,n=s;e.forEach((e=>{let{contentBoxSize:i,contentRect:s,target:o}=e;o&&o!==t.el||(r=s?s.width:(i[0]||i).inlineSize,n=s?s.height:(i[0]||i).blockSize)})),r===i&&n===s||l()}))})),n.observe(t.el)):(r.addEventListener("resize",l),r.addEventListener("orientationchange",d))})),i("destroy",(()=>{a&&r.cancelAnimationFrame(a),n&&n.unobserve&&t.el&&(n.unobserve(t.el),n=null),r.removeEventListener("resize",l),r.removeEventListener("orientationchange",d)}))},function(e){let{swiper:t,extendParams:i,on:s,emit:r}=e;const n=[],a=o(),l=function(e,i){void 0===i&&(i={});const s=new(a.MutationObserver||a.WebkitMutationObserver)((e=>{if(t.__preventObserver__)return;if(1===e.length)return void r("observerUpdate",e[0]);const i=function(){r("observerUpdate",e[0])};a.requestAnimationFrame?a.requestAnimationFrame(i):a.setTimeout(i,0)}));s.observe(e,{attributes:void 0===i.attributes||i.attributes,childList:void 0===i.childList||i.childList,characterData:void 0===i.characterData||i.characterData}),n.push(s)};i({observer:!1,observeParents:!1,observeSlideChildren:!1}),s("init",(()=>{if(t.params.observer){if(t.params.observeParents){const e=function(e,t){const i=[];let s=e.parentElement;for(;s;)t?s.matches(t)&&i.push(s):i.push(s),s=s.parentElement;return i}(t.hostEl);for(let t=0;t<e.length;t+=1)l(e[t])}l(t.hostEl,{childList:t.params.observeSlideChildren}),l(t.wrapperEl,{attributes:!1})}})),s("destroy",(()=>{n.forEach((e=>{e.disconnect()})),n.splice(0,n.length)}))}]);window.addEventListener("load",(()=>{document.querySelector(".items-carousel__swiper")&&new J(".items-carousel__swiper",{modules:[ee],slidesPerView:3,spaceBetween:203})}));
/*!
 * lightgallery | 2.7.2 | September 20th 2023
 * http://www.lightgalleryjs.com/
 * Copyright (c) 2020 Sachin Neravath;
 * @license GPLv3
 */
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
var te=function(){return te=Object.assign||function(e){for(var t,i=1,s=arguments.length;i<s;i++)for(var r in t=arguments[i])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e},te.apply(this,arguments)};var ie="lgAfterAppendSlide",se="lgInit",re="lgHasVideo",ne="lgContainerResize",oe="lgUpdateSlides",ae="lgAfterAppendSubHtml",le="lgBeforeOpen",de="lgAfterOpen",ce="lgSlideItemLoad",ue="lgBeforeSlide",pe="lgAfterSlide",he="lgPosterClick",ge="lgDragStart",me="lgDragMove",fe="lgDragEnd",ve="lgBeforeNextSlide",ye="lgBeforePrevSlide",be="lgBeforeClose",we="lgAfterClose",Se={mode:"lg-slide",easing:"ease",speed:400,licenseKey:"0000-0000-000-0000",height:"100%",width:"100%",addClass:"",startClass:"lg-start-zoom",backdropDuration:300,container:"",startAnimationDuration:400,zoomFromOrigin:!0,hideBarsDelay:0,showBarsAfter:1e4,slideDelay:0,supportLegacyBrowser:!0,allowMediaOverlap:!1,videoMaxSize:"1280-720",loadYouTubePoster:!0,defaultCaptionHeight:0,ariaLabelledby:"",ariaDescribedby:"",resetScrollPosition:!0,hideScrollbar:!1,closable:!0,swipeToClose:!0,closeOnTap:!0,showCloseIcon:!0,showMaximizeIcon:!1,loop:!0,escKey:!0,keyPress:!0,trapFocus:!0,controls:!0,slideEndAnimation:!0,hideControlOnEnd:!1,mousewheel:!1,getCaptionFromTitleOrAlt:!0,appendSubHtmlTo:".lg-sub-html",subHtmlSelectorRelative:!1,preload:2,numberOfSlideItemsInDom:10,selector:"",selectWithin:"",nextHtml:"",prevHtml:"",index:0,iframeWidth:"100%",iframeHeight:"100%",iframeMaxWidth:"100%",iframeMaxHeight:"100%",download:!0,counter:!0,appendCounterTo:".lg-toolbar",swipeThreshold:50,enableSwipe:!0,enableDrag:!0,dynamic:!1,dynamicEl:[],extraProps:[],exThumbImage:"",isMobile:void 0,mobileSettings:{controls:!1,showCloseIcon:!1,download:!1},plugins:[],strings:{closeGallery:"Close gallery",toggleMaximize:"Toggle maximize",previousSlide:"Previous slide",nextSlide:"Next slide",download:"Download",playVideo:"Play video",mediaLoadingFailed:"Oops... Failed to load content..."}};var Te=function(){function e(e){return this.cssVenderPrefixes=["TransitionDuration","TransitionTimingFunction","Transform","Transition"],this.selector=this._getSelector(e),this.firstElement=this._getFirstEl(),this}return e.generateUUID=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(e){var t=16*Math.random()|0;return("x"==e?t:3&t|8).toString(16)}))},e.prototype._getSelector=function(e,t){return void 0===t&&(t=document),"string"!=typeof e?e:(t=t||document,"#"===e.substring(0,1)?t.querySelector(e):t.querySelectorAll(e))},e.prototype._each=function(e){return this.selector?(void 0!==this.selector.length?[].forEach.call(this.selector,e):e(this.selector,0),this):this},e.prototype._setCssVendorPrefix=function(e,t,i){var s=t.replace(/-([a-z])/gi,(function(e,t){return t.toUpperCase()}));-1!==this.cssVenderPrefixes.indexOf(s)?(e.style[s.charAt(0).toLowerCase()+s.slice(1)]=i,e.style["webkit"+s]=i,e.style["moz"+s]=i,e.style["ms"+s]=i,e.style["o"+s]=i):e.style[s]=i},e.prototype._getFirstEl=function(){return this.selector&&void 0!==this.selector.length?this.selector[0]:this.selector},e.prototype.isEventMatched=function(e,t){var i=t.split(".");return e.split(".").filter((function(e){return e})).every((function(e){return-1!==i.indexOf(e)}))},e.prototype.attr=function(e,t){return void 0===t?this.firstElement?this.firstElement.getAttribute(e):"":(this._each((function(i){i.setAttribute(e,t)})),this)},e.prototype.find=function(e){return xe(this._getSelector(e,this.selector))},e.prototype.first=function(){return this.selector&&void 0!==this.selector.length?xe(this.selector[0]):xe(this.selector)},e.prototype.eq=function(e){return xe(this.selector[e])},e.prototype.parent=function(){return xe(this.selector.parentElement)},e.prototype.get=function(){return this._getFirstEl()},e.prototype.removeAttr=function(e){var t=e.split(" ");return this._each((function(e){t.forEach((function(t){return e.removeAttribute(t)}))})),this},e.prototype.wrap=function(e){if(!this.firstElement)return this;var t=document.createElement("div");return t.className=e,this.firstElement.parentNode.insertBefore(t,this.firstElement),this.firstElement.parentNode.removeChild(this.firstElement),t.appendChild(this.firstElement),this},e.prototype.addClass=function(e){return void 0===e&&(e=""),this._each((function(t){e.split(" ").forEach((function(e){e&&t.classList.add(e)}))})),this},e.prototype.removeClass=function(e){return this._each((function(t){e.split(" ").forEach((function(e){e&&t.classList.remove(e)}))})),this},e.prototype.hasClass=function(e){return!!this.firstElement&&this.firstElement.classList.contains(e)},e.prototype.hasAttribute=function(e){return!!this.firstElement&&this.firstElement.hasAttribute(e)},e.prototype.toggleClass=function(e){return this.firstElement?(this.hasClass(e)?this.removeClass(e):this.addClass(e),this):this},e.prototype.css=function(e,t){var i=this;return this._each((function(s){i._setCssVendorPrefix(s,e,t)})),this},e.prototype.on=function(t,i){var s=this;return this.selector?(t.split(" ").forEach((function(t){Array.isArray(e.eventListeners[t])||(e.eventListeners[t]=[]),e.eventListeners[t].push(i),s.selector.addEventListener(t.split(".")[0],i)})),this):this},e.prototype.once=function(e,t){var i=this;return this.on(e,(function(){i.off(e),t(e)})),this},e.prototype.off=function(t){var i=this;return this.selector?(Object.keys(e.eventListeners).forEach((function(s){i.isEventMatched(t,s)&&(e.eventListeners[s].forEach((function(e){i.selector.removeEventListener(s.split(".")[0],e)})),e.eventListeners[s]=[])})),this):this},e.prototype.trigger=function(e,t){if(!this.firstElement)return this;var i=new CustomEvent(e.split(".")[0],{detail:t||null});return this.firstElement.dispatchEvent(i),this},e.prototype.load=function(e){var t=this;return fetch(e).then((function(e){return e.text()})).then((function(e){t.selector.innerHTML=e})),this},e.prototype.html=function(e){return void 0===e?this.firstElement?this.firstElement.innerHTML:"":(this._each((function(t){t.innerHTML=e})),this)},e.prototype.append=function(e){return this._each((function(t){"string"==typeof e?t.insertAdjacentHTML("beforeend",e):t.appendChild(e)})),this},e.prototype.prepend=function(e){return this._each((function(t){t.insertAdjacentHTML("afterbegin",e)})),this},e.prototype.remove=function(){return this._each((function(e){e.parentNode.removeChild(e)})),this},e.prototype.empty=function(){return this._each((function(e){e.innerHTML=""})),this},e.prototype.scrollTop=function(e){return void 0!==e?(document.body.scrollTop=e,document.documentElement.scrollTop=e,this):window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0},e.prototype.scrollLeft=function(e){return void 0!==e?(document.body.scrollLeft=e,document.documentElement.scrollLeft=e,this):window.pageXOffset||document.documentElement.scrollLeft||document.body.scrollLeft||0},e.prototype.offset=function(){if(!this.firstElement)return{left:0,top:0};var e=this.firstElement.getBoundingClientRect(),t=xe("body").style().marginLeft;return{left:e.left-parseFloat(t)+this.scrollLeft(),top:e.top+this.scrollTop()}},e.prototype.style=function(){return this.firstElement?this.firstElement.currentStyle||window.getComputedStyle(this.firstElement):{}},e.prototype.width=function(){var e=this.style();return this.firstElement.clientWidth-parseFloat(e.paddingLeft)-parseFloat(e.paddingRight)},e.prototype.height=function(){var e=this.style();return this.firstElement.clientHeight-parseFloat(e.paddingTop)-parseFloat(e.paddingBottom)},e.eventListeners={},e}();function xe(e){return function(){if("function"==typeof window.CustomEvent)return!1;window.CustomEvent=function(e,t){t=t||{bubbles:!1,cancelable:!1,detail:null};var i=document.createEvent("CustomEvent");return i.initCustomEvent(e,t.bubbles,t.cancelable,t.detail),i}}(),Element.prototype.matches||(Element.prototype.matches=Element.prototype.msMatchesSelector||Element.prototype.webkitMatchesSelector),new Te(e)}var Ee=["src","sources","subHtml","subHtmlUrl","html","video","poster","slideName","responsive","srcset","sizes","iframe","downloadUrl","download","width","facebookShareUrl","tweetText","iframeTitle","twitterShareUrl","pinterestShareUrl","pinterestText","fbHtml","disqusIdentifier","disqusUrl"];function Ce(e){return"href"===e?"src":e=(e=(e=e.replace("data-","")).charAt(0).toLowerCase()+e.slice(1)).replace(/-([a-z])/g,(function(e){return e[1].toUpperCase()}))}var Ie=function(e,t,i,s){void 0===i&&(i=0);var r=xe(e).attr("data-lg-size")||s;if(r){var n=r.split(",");if(n[1])for(var o=window.innerWidth,a=0;a<n.length;a++){var l=n[a];if(parseInt(l.split("-")[2],10)>o){r=l;break}a===n.length-1&&(r=l)}var d=r.split("-"),c=parseInt(d[0],10),u=parseInt(d[1],10),p=t.width(),h=t.height()-i,g=Math.min(p,c),m=Math.min(h,u),f=Math.min(g/c,m/u);return{width:c*f,height:u*f}}},Me=function(e,t,i,s,r){if(r){var n=xe(e).find("img").first();if(n.get()){var o=t.get().getBoundingClientRect(),a=o.width,l=t.height()-(i+s),d=n.width(),c=n.height(),u=n.style(),p=(a-d)/2-n.offset().left+(parseFloat(u.paddingLeft)||0)+(parseFloat(u.borderLeft)||0)+xe(window).scrollLeft()+o.left,h=(l-c)/2-n.offset().top+(parseFloat(u.paddingTop)||0)+(parseFloat(u.borderTop)||0)+xe(window).scrollTop()+i;return"translate3d("+(p*=-1)+"px, "+(h*=-1)+"px, 0) scale3d("+d/r.width+", "+c/r.height+", 1)"}}},Le=function(e,t,i,s,r,n){return'<div class="lg-video-cont lg-has-iframe" style="width:'+e+"; max-width:"+i+"; height: "+t+"; max-height:"+s+'">\n                    <iframe class="lg-object" frameborder="0" '+(n?'title="'+n+'"':"")+' src="'+r+'"  allowfullscreen="true"></iframe>\n                </div>'},Pe=function(e,t,i,s,r,n){var o="<img "+i+" "+(s?'srcset="'+s+'"':"")+"  "+(r?'sizes="'+r+'"':"")+' class="lg-object lg-image" data-index="'+e+'" src="'+t+'" />',a="";n&&(a=("string"==typeof n?JSON.parse(n):n).map((function(e){var t="";return Object.keys(e).forEach((function(i){t+=" "+i+'="'+e[i]+'"'})),"<source "+t+"></source>"})));return""+a+o},ke=function(e){for(var t=[],i=[],s="",r=0;r<e.length;r++){var n=e[r].split(" ");""===n[0]&&n.splice(0,1),i.push(n[0]),t.push(n[1])}for(var o=window.innerWidth,a=0;a<t.length;a++)if(parseInt(t[a],10)>o){s=i[a];break}return s},Oe=function(e){return!!e&&(!!e.complete&&0!==e.naturalWidth)},Ae=function(e,t,i,s,r){return'<div class="lg-video-cont '+(r&&r.youtube?"lg-has-youtube":r&&r.vimeo?"lg-has-vimeo":"lg-has-html5")+'" style="'+i+'">\n                <div class="lg-video-play-button">\n                <svg\n                    viewBox="0 0 20 20"\n                    preserveAspectRatio="xMidYMid"\n                    focusable="false"\n                    aria-labelledby="'+s+'"\n                    role="img"\n                    class="lg-video-play-icon"\n                >\n                    <title>'+s+'</title>\n                    <polygon class="lg-video-play-icon-inner" points="1,0 20,10 1,20"></polygon>\n                </svg>\n                <svg class="lg-video-play-icon-bg" viewBox="0 0 50 50" focusable="false">\n                    <circle cx="50%" cy="50%" r="20"></circle></svg>\n                <svg class="lg-video-play-icon-circle" viewBox="0 0 50 50" focusable="false">\n                    <circle cx="50%" cy="50%" r="20"></circle>\n                </svg>\n            </div>\n            '+(t||"")+'\n            <img class="lg-object lg-video-poster" src="'+e+'" />\n        </div>'},_e=function(e){var t=e.querySelectorAll('a[href]:not([disabled]), button:not([disabled]), textarea:not([disabled]), input[type="text"]:not([disabled]), input[type="radio"]:not([disabled]), input[type="checkbox"]:not([disabled]), select:not([disabled])');return[].filter.call(t,(function(e){var t=window.getComputedStyle(e);return"none"!==t.display&&"hidden"!==t.visibility}))},ze=function(e,t,i,s){var r=[],n=function(){for(var e=0,t=0,i=arguments.length;t<i;t++)e+=arguments[t].length;var s=Array(e),r=0;for(t=0;t<i;t++)for(var n=arguments[t],o=0,a=n.length;o<a;o++,r++)s[r]=n[o];return s}(Ee,t);return[].forEach.call(e,(function(e){for(var t={},o=0;o<e.attributes.length;o++){var a=e.attributes[o];if(a.specified){var l=Ce(a.name),d="";n.indexOf(l)>-1&&(d=l),d&&(t[d]=a.value)}}var c=xe(e),u=c.find("img").first().attr("alt"),p=c.attr("title"),h=s?c.attr(s):c.find("img").first().attr("src");t.thumb=h,i&&!t.subHtml&&(t.subHtml=p||u||""),t.alt=u||p||"",r.push(t)})),r},De=function(){return/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)},Ge=function(e,t,i){if(!e)return t?{html5:!0}:void console.error("lightGallery :- data-src is not provided on slide item "+(i+1)+". Please make sure the selector property is properly configured. More info - https://www.lightgalleryjs.com/demos/html-markup/");var s=e.match(/\/\/(?:www\.)?youtu(?:\.be|be\.com|be-nocookie\.com)\/(?:watch\?v=|embed\/)?([a-z0-9\-\_\%]+)([\&|?][\S]*)*/i),r=e.match(/\/\/(?:www\.)?(?:player\.)?vimeo.com\/(?:video\/)?([0-9a-z\-_]+)(.*)?/i),n=e.match(/https?:\/\/(.+)?(wistia\.com|wi\.st)\/(medias|embed)\/([0-9a-z\-_]+)(.*)/);return s?{youtube:s}:r?{vimeo:r}:n?{wistia:n}:void 0},Be=0,Fe=function(){function e(e,t){if(this.lgOpened=!1,this.index=0,this.plugins=[],this.lGalleryOn=!1,this.lgBusy=!1,this.currentItemsInDom=[],this.prevScrollTop=0,this.bodyPaddingRight=0,this.isDummyImageRemoved=!1,this.dragOrSwipeEnabled=!1,this.mediaContainerPosition={top:0,bottom:0},!e)return this;if(Be++,this.lgId=Be,this.el=e,this.LGel=xe(e),this.generateSettings(t),this.buildModules(),this.settings.dynamic&&void 0!==this.settings.dynamicEl&&!Array.isArray(this.settings.dynamicEl))throw"When using dynamic mode, you must also define dynamicEl as an Array.";return this.galleryItems=this.getItems(),this.normalizeSettings(),this.init(),this.validateLicense(),this}return e.prototype.generateSettings=function(e){if(this.settings=te(te({},Se),e),this.settings.isMobile&&"function"==typeof this.settings.isMobile?this.settings.isMobile():De()){var t=te(te({},this.settings.mobileSettings),this.settings.mobileSettings);this.settings=te(te({},this.settings),t)}},e.prototype.normalizeSettings=function(){this.settings.slideEndAnimation&&(this.settings.hideControlOnEnd=!1),this.settings.closable||(this.settings.swipeToClose=!1),this.zoomFromOrigin=this.settings.zoomFromOrigin,this.settings.dynamic&&(this.zoomFromOrigin=!1),this.settings.container||(this.settings.container=document.body),this.settings.preload=Math.min(this.settings.preload,this.galleryItems.length)},e.prototype.init=function(){var e=this;this.addSlideVideoInfo(this.galleryItems),this.buildStructure(),this.LGel.trigger(se,{instance:this}),this.settings.keyPress&&this.keyPress(),setTimeout((function(){e.enableDrag(),e.enableSwipe(),e.triggerPosterClick()}),50),this.arrow(),this.settings.mousewheel&&this.mousewheel(),this.settings.dynamic||this.openGalleryOnItemClick()},e.prototype.openGalleryOnItemClick=function(){for(var e=this,t=function(t){var s=i.items[t],r=xe(s),n=Te.generateUUID();r.attr("data-lg-id",n).on("click.lgcustom-item-"+n,(function(i){i.preventDefault();var r=e.settings.index||t;e.openGallery(r,s)}))},i=this,s=0;s<this.items.length;s++)t(s)},e.prototype.buildModules=function(){var e=this;this.settings.plugins.forEach((function(t){e.plugins.push(new t(e,xe))}))},e.prototype.validateLicense=function(){this.settings.licenseKey?"0000-0000-000-0000"===this.settings.licenseKey&&console.warn("lightGallery: "+this.settings.licenseKey+" license key is not valid for production use"):console.error("Please provide a valid license key")},e.prototype.getSlideItem=function(e){return xe(this.getSlideItemId(e))},e.prototype.getSlideItemId=function(e){return"#lg-item-"+this.lgId+"-"+e},e.prototype.getIdName=function(e){return e+"-"+this.lgId},e.prototype.getElementById=function(e){return xe("#"+this.getIdName(e))},e.prototype.manageSingleSlideClassName=function(){this.galleryItems.length<2?this.outer.addClass("lg-single-item"):this.outer.removeClass("lg-single-item")},e.prototype.buildStructure=function(){var e=this;if(!(this.$container&&this.$container.get())){var t="",i="";this.settings.controls&&(t='<button type="button" id="'+this.getIdName("lg-prev")+'" aria-label="'+this.settings.strings.previousSlide+'" class="lg-prev lg-icon"> '+this.settings.prevHtml+' </button>\n                <button type="button" id="'+this.getIdName("lg-next")+'" aria-label="'+this.settings.strings.nextSlide+'" class="lg-next lg-icon"> '+this.settings.nextHtml+" </button>"),".lg-item"!==this.settings.appendSubHtmlTo&&(i='<div class="lg-sub-html" role="status" aria-live="polite"></div>');var s="";this.settings.allowMediaOverlap&&(s+="lg-media-overlap ");var r=this.settings.ariaLabelledby?'aria-labelledby="'+this.settings.ariaLabelledby+'"':"",n=this.settings.ariaDescribedby?'aria-describedby="'+this.settings.ariaDescribedby+'"':"",o="lg-container "+this.settings.addClass+" "+(document.body!==this.settings.container?"lg-inline":""),a=this.settings.closable&&this.settings.showCloseIcon?'<button type="button" aria-label="'+this.settings.strings.closeGallery+'" id="'+this.getIdName("lg-close")+'" class="lg-close lg-icon"></button>':"",l=this.settings.showMaximizeIcon?'<button type="button" aria-label="'+this.settings.strings.toggleMaximize+'" id="'+this.getIdName("lg-maximize")+'" class="lg-maximize lg-icon"></button>':"",d='\n        <div class="'+o+'" id="'+this.getIdName("lg-container")+'" tabindex="-1" aria-modal="true" '+r+" "+n+' role="dialog"\n        >\n            <div id="'+this.getIdName("lg-backdrop")+'" class="lg-backdrop"></div>\n\n            <div id="'+this.getIdName("lg-outer")+'" class="lg-outer lg-use-css3 lg-css3 lg-hide-items '+s+' ">\n\n              <div id="'+this.getIdName("lg-content")+'" class="lg-content">\n                <div id="'+this.getIdName("lg-inner")+'" class="lg-inner">\n                </div>\n                '+t+'\n              </div>\n                <div id="'+this.getIdName("lg-toolbar")+'" class="lg-toolbar lg-group">\n                    '+l+"\n                    "+a+"\n                    </div>\n                    "+(".lg-outer"===this.settings.appendSubHtmlTo?i:"")+'\n                <div id="'+this.getIdName("lg-components")+'" class="lg-components">\n                    '+(".lg-sub-html"===this.settings.appendSubHtmlTo?i:"")+"\n                </div>\n            </div>\n        </div>\n        ";xe(this.settings.container).append(d),document.body!==this.settings.container&&xe(this.settings.container).css("position","relative"),this.outer=this.getElementById("lg-outer"),this.$lgComponents=this.getElementById("lg-components"),this.$backdrop=this.getElementById("lg-backdrop"),this.$container=this.getElementById("lg-container"),this.$inner=this.getElementById("lg-inner"),this.$content=this.getElementById("lg-content"),this.$toolbar=this.getElementById("lg-toolbar"),this.$backdrop.css("transition-duration",this.settings.backdropDuration+"ms");var c=this.settings.mode+" ";this.manageSingleSlideClassName(),this.settings.enableDrag&&(c+="lg-grab "),this.outer.addClass(c),this.$inner.css("transition-timing-function",this.settings.easing),this.$inner.css("transition-duration",this.settings.speed+"ms"),this.settings.download&&this.$toolbar.append('<a id="'+this.getIdName("lg-download")+'" target="_blank" rel="noopener" aria-label="'+this.settings.strings.download+'" download class="lg-download lg-icon"></a>'),this.counter(),xe(window).on("resize.lg.global"+this.lgId+" orientationchange.lg.global"+this.lgId,(function(){e.refreshOnResize()})),this.hideBars(),this.manageCloseGallery(),this.toggleMaximize(),this.initModules()}},e.prototype.refreshOnResize=function(){if(this.lgOpened){var e=this.galleryItems[this.index].__slideVideoInfo;this.mediaContainerPosition=this.getMediaContainerPosition();var t=this.mediaContainerPosition,i=t.top,s=t.bottom;if(this.currentImageSize=Ie(this.items[this.index],this.outer,i+s,e&&this.settings.videoMaxSize),e&&this.resizeVideoSlide(this.index,this.currentImageSize),this.zoomFromOrigin&&!this.isDummyImageRemoved){var r=this.getDummyImgStyles(this.currentImageSize);this.outer.find(".lg-current .lg-dummy-img").first().attr("style",r)}this.LGel.trigger(ne)}},e.prototype.resizeVideoSlide=function(e,t){var i=this.getVideoContStyle(t);this.getSlideItem(e).find(".lg-video-cont").attr("style",i)},e.prototype.updateSlides=function(e,t){if(this.index>e.length-1&&(this.index=e.length-1),1===e.length&&(this.index=0),e.length){var i=this.galleryItems[t].src;this.galleryItems=e,this.updateControls(),this.$inner.empty(),this.currentItemsInDom=[];var s=0;this.galleryItems.some((function(e,t){return e.src===i&&(s=t,!0)})),this.currentItemsInDom=this.organizeSlideItems(s,-1),this.loadContent(s,!0),this.getSlideItem(s).addClass("lg-current"),this.index=s,this.updateCurrentCounter(s),this.LGel.trigger(oe)}else this.closeGallery()},e.prototype.getItems=function(){if(this.items=[],this.settings.dynamic)return this.settings.dynamicEl||[];if("this"===this.settings.selector)this.items.push(this.el);else if(this.settings.selector)if("string"==typeof this.settings.selector)if(this.settings.selectWithin){var e=xe(this.settings.selectWithin);this.items=e.find(this.settings.selector).get()}else this.items=this.el.querySelectorAll(this.settings.selector);else this.items=this.settings.selector;else this.items=this.el.children;return ze(this.items,this.settings.extraProps,this.settings.getCaptionFromTitleOrAlt,this.settings.exThumbImage)},e.prototype.shouldHideScrollbar=function(){return this.settings.hideScrollbar&&document.body===this.settings.container},e.prototype.hideScrollbar=function(){if(this.shouldHideScrollbar()){this.bodyPaddingRight=parseFloat(xe("body").style().paddingRight);var e=document.documentElement.getBoundingClientRect(),t=window.innerWidth-e.width;xe(document.body).css("padding-right",t+this.bodyPaddingRight+"px"),xe(document.body).addClass("lg-overlay-open")}},e.prototype.resetScrollBar=function(){this.shouldHideScrollbar()&&(xe(document.body).css("padding-right",this.bodyPaddingRight+"px"),xe(document.body).removeClass("lg-overlay-open"))},e.prototype.openGallery=function(e,t){var i=this;if(void 0===e&&(e=this.settings.index),!this.lgOpened){this.lgOpened=!0,this.outer.removeClass("lg-hide-items"),this.hideScrollbar(),this.$container.addClass("lg-show");var s=this.getItemsToBeInsertedToDom(e,e);this.currentItemsInDom=s;var r="";s.forEach((function(e){r=r+'<div id="'+e+'" class="lg-item"></div>'})),this.$inner.append(r),this.addHtml(e);var n="";this.mediaContainerPosition=this.getMediaContainerPosition();var o=this.mediaContainerPosition,a=o.top,l=o.bottom;this.settings.allowMediaOverlap||this.setMediaContainerPosition(a,l);var d=this.galleryItems[e].__slideVideoInfo;this.zoomFromOrigin&&t&&(this.currentImageSize=Ie(t,this.outer,a+l,d&&this.settings.videoMaxSize),n=Me(t,this.outer,a,l,this.currentImageSize)),this.zoomFromOrigin&&n||(this.outer.addClass(this.settings.startClass),this.getSlideItem(e).removeClass("lg-complete"));var c=this.settings.zoomFromOrigin?100:this.settings.backdropDuration;setTimeout((function(){i.outer.addClass("lg-components-open")}),c),this.index=e,this.LGel.trigger(le),this.getSlideItem(e).addClass("lg-current"),this.lGalleryOn=!1,this.prevScrollTop=xe(window).scrollTop(),setTimeout((function(){if(i.zoomFromOrigin&&n){var t=i.getSlideItem(e);t.css("transform",n),setTimeout((function(){t.addClass("lg-start-progress lg-start-end-progress").css("transition-duration",i.settings.startAnimationDuration+"ms"),i.outer.addClass("lg-zoom-from-image")})),setTimeout((function(){t.css("transform","translate3d(0, 0, 0)")}),100)}setTimeout((function(){i.$backdrop.addClass("in"),i.$container.addClass("lg-show-in")}),10),setTimeout((function(){i.settings.trapFocus&&document.body===i.settings.container&&i.trapFocus()}),i.settings.backdropDuration+50),i.zoomFromOrigin&&n||setTimeout((function(){i.outer.addClass("lg-visible")}),i.settings.backdropDuration),i.slide(e,!1,!1,!1),i.LGel.trigger(de)})),document.body===this.settings.container&&xe("html").addClass("lg-on")}},e.prototype.getMediaContainerPosition=function(){if(this.settings.allowMediaOverlap)return{top:0,bottom:0};var e=this.$toolbar.get().clientHeight||0,t=this.outer.find(".lg-components .lg-sub-html").get(),i=this.settings.defaultCaptionHeight||t&&t.clientHeight||0,s=this.outer.find(".lg-thumb-outer").get();return{top:e,bottom:(s?s.clientHeight:0)+i}},e.prototype.setMediaContainerPosition=function(e,t){void 0===e&&(e=0),void 0===t&&(t=0),this.$content.css("top",e+"px").css("bottom",t+"px")},e.prototype.hideBars=function(){var e=this;setTimeout((function(){e.outer.removeClass("lg-hide-items"),e.settings.hideBarsDelay>0&&(e.outer.on("mousemove.lg click.lg touchstart.lg",(function(){e.outer.removeClass("lg-hide-items"),clearTimeout(e.hideBarTimeout),e.hideBarTimeout=setTimeout((function(){e.outer.addClass("lg-hide-items")}),e.settings.hideBarsDelay)})),e.outer.trigger("mousemove.lg"))}),this.settings.showBarsAfter)},e.prototype.initPictureFill=function(e){if(this.settings.supportLegacyBrowser)try{picturefill({elements:[e.get()]})}catch(e){console.warn("lightGallery :- If you want srcset or picture tag to be supported for older browser please include picturefil javascript library in your document.")}},e.prototype.counter=function(){if(this.settings.counter){var e='<div class="lg-counter" role="status" aria-live="polite">\n                <span id="'+this.getIdName("lg-counter-current")+'" class="lg-counter-current">'+(this.index+1)+' </span> /\n                <span id="'+this.getIdName("lg-counter-all")+'" class="lg-counter-all">'+this.galleryItems.length+" </span></div>";this.outer.find(this.settings.appendCounterTo).append(e)}},e.prototype.addHtml=function(e){var t,i;if(this.galleryItems[e].subHtmlUrl?i=this.galleryItems[e].subHtmlUrl:t=this.galleryItems[e].subHtml,!i)if(t){var s=t.substring(0,1);"."!==s&&"#"!==s||(t=this.settings.subHtmlSelectorRelative&&!this.settings.dynamic?xe(this.items).eq(e).find(t).first().html():xe(t).first().html())}else t="";if(".lg-item"!==this.settings.appendSubHtmlTo)i?this.outer.find(".lg-sub-html").load(i):this.outer.find(".lg-sub-html").html(t);else{var r=xe(this.getSlideItemId(e));i?r.load(i):r.append('<div class="lg-sub-html">'+t+"</div>")}null!=t&&(""===t?this.outer.find(this.settings.appendSubHtmlTo).addClass("lg-empty-html"):this.outer.find(this.settings.appendSubHtmlTo).removeClass("lg-empty-html")),this.LGel.trigger(ae,{index:e})},e.prototype.preload=function(e){for(var t=1;t<=this.settings.preload&&!(t>=this.galleryItems.length-e);t++)this.loadContent(e+t,!1);for(var i=1;i<=this.settings.preload&&!(e-i<0);i++)this.loadContent(e-i,!1)},e.prototype.getDummyImgStyles=function(e){return e?"width:"+e.width+"px;\n                margin-left: -"+e.width/2+"px;\n                margin-top: -"+e.height/2+"px;\n                height:"+e.height+"px":""},e.prototype.getVideoContStyle=function(e){return e?"width:"+e.width+"px;\n                height:"+e.height+"px":""},e.prototype.getDummyImageContent=function(e,t,i){var s;if(this.settings.dynamic||(s=xe(this.items).eq(t)),s){var r=void 0;if(!(r=this.settings.exThumbImage?s.attr(this.settings.exThumbImage):s.find("img").first().attr("src")))return"";var n="<img "+i+' style="'+this.getDummyImgStyles(this.currentImageSize)+'" class="lg-dummy-img" src="'+r+'" />';return e.addClass("lg-first-slide"),this.outer.addClass("lg-first-slide-loading"),n}return""},e.prototype.setImgMarkup=function(e,t,i){var s=this.galleryItems[i],r=s.alt,n=s.srcset,o=s.sizes,a=s.sources,l=r?'alt="'+r+'"':"",d='<picture class="lg-img-wrap"> '+(this.isFirstSlideWithZoomAnimation()?this.getDummyImageContent(t,i,l):Pe(i,e,l,n,o,a))+"</picture>";t.prepend(d)},e.prototype.onSlideObjectLoad=function(e,t,i,s){var r=e.find(".lg-object").first();Oe(r.get())||t?i():(r.on("load.lg error.lg",(function(){i&&i()})),r.on("error.lg",(function(){s&&s()})))},e.prototype.onLgObjectLoad=function(e,t,i,s,r,n){var o=this;this.onSlideObjectLoad(e,n,(function(){o.triggerSlideItemLoad(e,t,i,s,r)}),(function(){e.addClass("lg-complete lg-complete_"),e.html('<span class="lg-error-msg">'+o.settings.strings.mediaLoadingFailed+"</span>")}))},e.prototype.triggerSlideItemLoad=function(e,t,i,s,r){var n=this,o=this.galleryItems[t],a=r&&"video"===this.getSlideType(o)&&!o.poster?s:0;setTimeout((function(){e.addClass("lg-complete lg-complete_"),n.LGel.trigger(ce,{index:t,delay:i||0,isFirstSlide:r})}),a)},e.prototype.isFirstSlideWithZoomAnimation=function(){return!(this.lGalleryOn||!this.zoomFromOrigin||!this.currentImageSize)},e.prototype.addSlideVideoInfo=function(e){var t=this;e.forEach((function(e,i){e.__slideVideoInfo=Ge(e.src,!!e.video,i),e.__slideVideoInfo&&t.settings.loadYouTubePoster&&!e.poster&&e.__slideVideoInfo.youtube&&(e.poster="//img.youtube.com/vi/"+e.__slideVideoInfo.youtube[1]+"/maxresdefault.jpg")}))},e.prototype.loadContent=function(e,t){var i=this,s=this.galleryItems[e],r=xe(this.getSlideItemId(e)),n=s.poster,o=s.srcset,a=s.sizes,l=s.sources,d=s.src,c=s.video,u=c&&"string"==typeof c?JSON.parse(c):c;if(s.responsive){var p=s.responsive.split(",");d=ke(p)||d}var h=s.__slideVideoInfo,g="",m=!!s.iframe,f=!this.lGalleryOn,v=0;if(f&&(v=this.zoomFromOrigin&&this.currentImageSize?this.settings.startAnimationDuration+10:this.settings.backdropDuration+10),!r.hasClass("lg-loaded")){if(h){var y=this.mediaContainerPosition,b=y.top,w=y.bottom,S=Ie(this.items[e],this.outer,b+w,h&&this.settings.videoMaxSize);g=this.getVideoContStyle(S)}if(m){var T=Le(this.settings.iframeWidth,this.settings.iframeHeight,this.settings.iframeMaxWidth,this.settings.iframeMaxHeight,d,s.iframeTitle);r.prepend(T)}else if(n){var x="";f&&this.zoomFromOrigin&&this.currentImageSize&&(x=this.getDummyImageContent(r,e,""));T=Ae(n,x||"",g,this.settings.strings.playVideo,h);r.prepend(T)}else if(h){T='<div class="lg-video-cont " style="'+g+'"></div>';r.prepend(T)}else if(this.setImgMarkup(d,r,e),o||l){var E=r.find(".lg-object");this.initPictureFill(E)}(n||h)&&this.LGel.trigger(re,{index:e,src:d,html5Video:u,hasPoster:!!n}),this.LGel.trigger(ie,{index:e}),this.lGalleryOn&&".lg-item"===this.settings.appendSubHtmlTo&&this.addHtml(e)}var C=0;v&&!xe(document.body).hasClass("lg-from-hash")&&(C=v),this.isFirstSlideWithZoomAnimation()&&(setTimeout((function(){r.removeClass("lg-start-end-progress lg-start-progress").removeAttr("style")}),this.settings.startAnimationDuration+100),r.hasClass("lg-loaded")||setTimeout((function(){if("image"===i.getSlideType(s)){var t=s.alt,c=t?'alt="'+t+'"':"";if(r.find(".lg-img-wrap").append(Pe(e,d,c,o,a,s.sources)),o||l){var u=r.find(".lg-object");i.initPictureFill(u)}}("image"===i.getSlideType(s)||"video"===i.getSlideType(s)&&n)&&(i.onLgObjectLoad(r,e,v,C,!0,!1),i.onSlideObjectLoad(r,!(!h||!h.html5||n),(function(){i.loadContentOnFirstSlideLoad(e,r,C)}),(function(){i.loadContentOnFirstSlideLoad(e,r,C)})))}),this.settings.startAnimationDuration+100)),r.addClass("lg-loaded"),this.isFirstSlideWithZoomAnimation()&&("video"!==this.getSlideType(s)||n)||this.onLgObjectLoad(r,e,v,C,f,!(!h||!h.html5||n)),this.zoomFromOrigin&&this.currentImageSize||!r.hasClass("lg-complete_")||this.lGalleryOn||setTimeout((function(){r.addClass("lg-complete")}),this.settings.backdropDuration),this.lGalleryOn=!0,!0===t&&(r.hasClass("lg-complete_")?this.preload(e):r.find(".lg-object").first().on("load.lg error.lg",(function(){i.preload(e)})))},e.prototype.loadContentOnFirstSlideLoad=function(e,t,i){var s=this;setTimeout((function(){t.find(".lg-dummy-img").remove(),t.removeClass("lg-first-slide"),s.outer.removeClass("lg-first-slide-loading"),s.isDummyImageRemoved=!0,s.preload(e)}),i+300)},e.prototype.getItemsToBeInsertedToDom=function(e,t,i){var s=this;void 0===i&&(i=0);var r=[],n=Math.max(i,3);n=Math.min(n,this.galleryItems.length);var o="lg-item-"+this.lgId+"-"+t;if(this.galleryItems.length<=3)return this.galleryItems.forEach((function(e,t){r.push("lg-item-"+s.lgId+"-"+t)})),r;if(e<(this.galleryItems.length-1)/2){for(var a=e;a>e-n/2&&a>=0;a--)r.push("lg-item-"+this.lgId+"-"+a);var l=r.length;for(a=0;a<n-l;a++)r.push("lg-item-"+this.lgId+"-"+(e+a+1))}else{for(a=e;a<=this.galleryItems.length-1&&a<e+n/2;a++)r.push("lg-item-"+this.lgId+"-"+a);for(l=r.length,a=0;a<n-l;a++)r.push("lg-item-"+this.lgId+"-"+(e-a-1))}return this.settings.loop&&(e===this.galleryItems.length-1?r.push("lg-item-"+this.lgId+"-0"):0===e&&r.push("lg-item-"+this.lgId+"-"+(this.galleryItems.length-1))),-1===r.indexOf(o)&&r.push("lg-item-"+this.lgId+"-"+t),r},e.prototype.organizeSlideItems=function(e,t){var i=this,s=this.getItemsToBeInsertedToDom(e,t,this.settings.numberOfSlideItemsInDom);return s.forEach((function(e){-1===i.currentItemsInDom.indexOf(e)&&i.$inner.append('<div id="'+e+'" class="lg-item"></div>')})),this.currentItemsInDom.forEach((function(e){-1===s.indexOf(e)&&xe("#"+e).remove()})),s},e.prototype.getPreviousSlideIndex=function(){var e=0;try{var t=this.outer.find(".lg-current").first().attr("id");e=parseInt(t.split("-")[3])||0}catch(t){e=0}return e},e.prototype.setDownloadValue=function(e){if(this.settings.download){var t=this.galleryItems[e];if(!1===t.downloadUrl||"false"===t.downloadUrl)this.outer.addClass("lg-hide-download");else{var i=this.getElementById("lg-download");this.outer.removeClass("lg-hide-download"),i.attr("href",t.downloadUrl||t.src),t.download&&i.attr("download",t.download)}}},e.prototype.makeSlideAnimation=function(e,t,i){var s=this;this.lGalleryOn&&i.addClass("lg-slide-progress"),setTimeout((function(){s.outer.addClass("lg-no-trans"),s.outer.find(".lg-item").removeClass("lg-prev-slide lg-next-slide"),"prev"===e?(t.addClass("lg-prev-slide"),i.addClass("lg-next-slide")):(t.addClass("lg-next-slide"),i.addClass("lg-prev-slide")),setTimeout((function(){s.outer.find(".lg-item").removeClass("lg-current"),t.addClass("lg-current"),s.outer.removeClass("lg-no-trans")}),50)}),this.lGalleryOn?this.settings.slideDelay:0)},e.prototype.slide=function(e,t,i,s){var r=this,n=this.getPreviousSlideIndex();if(this.currentItemsInDom=this.organizeSlideItems(e,n),!this.lGalleryOn||n!==e){var o=this.galleryItems.length;if(!this.lgBusy){this.settings.counter&&this.updateCurrentCounter(e);var a=this.getSlideItem(e),l=this.getSlideItem(n),d=this.galleryItems[e],c=d.__slideVideoInfo;if(this.outer.attr("data-lg-slide-type",this.getSlideType(d)),this.setDownloadValue(e),c){var u=this.mediaContainerPosition,p=u.top,h=u.bottom,g=Ie(this.items[e],this.outer,p+h,c&&this.settings.videoMaxSize);this.resizeVideoSlide(e,g)}if(this.LGel.trigger(ue,{prevIndex:n,index:e,fromTouch:!!t,fromThumb:!!i}),this.lgBusy=!0,clearTimeout(this.hideBarTimeout),this.arrowDisable(e),s||(e<n?s="prev":e>n&&(s="next")),t){this.outer.find(".lg-item").removeClass("lg-prev-slide lg-current lg-next-slide");var m=void 0,f=void 0;o>2?(m=e-1,f=e+1,(0===e&&n===o-1||e===o-1&&0===n)&&(f=0,m=o-1)):(m=0,f=1),"prev"===s?this.getSlideItem(f).addClass("lg-next-slide"):this.getSlideItem(m).addClass("lg-prev-slide"),a.addClass("lg-current")}else this.makeSlideAnimation(s,a,l);this.lGalleryOn?setTimeout((function(){r.loadContent(e,!0),".lg-item"!==r.settings.appendSubHtmlTo&&r.addHtml(e)}),this.settings.speed+50+(t?0:this.settings.slideDelay)):this.loadContent(e,!0),setTimeout((function(){r.lgBusy=!1,l.removeClass("lg-slide-progress"),r.LGel.trigger(pe,{prevIndex:n,index:e,fromTouch:t,fromThumb:i})}),(this.lGalleryOn?this.settings.speed+100:100)+(t?0:this.settings.slideDelay))}this.index=e}},e.prototype.updateCurrentCounter=function(e){this.getElementById("lg-counter-current").html(e+1+"")},e.prototype.updateCounterTotal=function(){this.getElementById("lg-counter-all").html(this.galleryItems.length+"")},e.prototype.getSlideType=function(e){return e.__slideVideoInfo?"video":e.iframe?"iframe":"image"},e.prototype.touchMove=function(e,t,i){var s=t.pageX-e.pageX,r=t.pageY-e.pageY,n=!1;if(this.swipeDirection?n=!0:Math.abs(s)>15?(this.swipeDirection="horizontal",n=!0):Math.abs(r)>15&&(this.swipeDirection="vertical",n=!0),n){var o=this.getSlideItem(this.index);if("horizontal"===this.swipeDirection){null==i||i.preventDefault(),this.outer.addClass("lg-dragging"),this.setTranslate(o,s,0);var a=o.get().offsetWidth,l=15*a/100-Math.abs(10*s/100);this.setTranslate(this.outer.find(".lg-prev-slide").first(),-a+s-l,0),this.setTranslate(this.outer.find(".lg-next-slide").first(),a+s+l,0)}else if("vertical"===this.swipeDirection&&this.settings.swipeToClose){null==i||i.preventDefault(),this.$container.addClass("lg-dragging-vertical");var d=1-Math.abs(r)/window.innerHeight;this.$backdrop.css("opacity",d);var c=1-Math.abs(r)/(2*window.innerWidth);this.setTranslate(o,0,r,c,c),Math.abs(r)>100&&this.outer.addClass("lg-hide-items").removeClass("lg-components-open")}}},e.prototype.touchEnd=function(e,t,i){var s,r=this;"lg-slide"!==this.settings.mode&&this.outer.addClass("lg-slide"),setTimeout((function(){r.$container.removeClass("lg-dragging-vertical"),r.outer.removeClass("lg-dragging lg-hide-items").addClass("lg-components-open");var n=!0;if("horizontal"===r.swipeDirection){s=e.pageX-t.pageX;var o=Math.abs(e.pageX-t.pageX);s<0&&o>r.settings.swipeThreshold?(r.goToNextSlide(!0),n=!1):s>0&&o>r.settings.swipeThreshold&&(r.goToPrevSlide(!0),n=!1)}else if("vertical"===r.swipeDirection){if(s=Math.abs(e.pageY-t.pageY),r.settings.closable&&r.settings.swipeToClose&&s>100)return void r.closeGallery();r.$backdrop.css("opacity",1)}if(r.outer.find(".lg-item").removeAttr("style"),n&&Math.abs(e.pageX-t.pageX)<5){var a=xe(i.target);r.isPosterElement(a)&&r.LGel.trigger(he)}r.swipeDirection=void 0})),setTimeout((function(){r.outer.hasClass("lg-dragging")||"lg-slide"===r.settings.mode||r.outer.removeClass("lg-slide")}),this.settings.speed+100)},e.prototype.enableSwipe=function(){var e=this,t={},i={},s=!1,r=!1;this.settings.enableSwipe&&(this.$inner.on("touchstart.lg",(function(i){e.dragOrSwipeEnabled=!0;var s=e.getSlideItem(e.index);!xe(i.target).hasClass("lg-item")&&!s.get().contains(i.target)||e.outer.hasClass("lg-zoomed")||e.lgBusy||1!==i.touches.length||(r=!0,e.touchAction="swipe",e.manageSwipeClass(),t={pageX:i.touches[0].pageX,pageY:i.touches[0].pageY})})),this.$inner.on("touchmove.lg",(function(n){r&&"swipe"===e.touchAction&&1===n.touches.length&&(i={pageX:n.touches[0].pageX,pageY:n.touches[0].pageY},e.touchMove(t,i,n),s=!0)})),this.$inner.on("touchend.lg",(function(n){if("swipe"===e.touchAction){if(s)s=!1,e.touchEnd(i,t,n);else if(r){var o=xe(n.target);e.isPosterElement(o)&&e.LGel.trigger(he)}e.touchAction=void 0,r=!1}})))},e.prototype.enableDrag=function(){var e=this,t={},i={},s=!1,r=!1;this.settings.enableDrag&&(this.outer.on("mousedown.lg",(function(i){e.dragOrSwipeEnabled=!0;var r=e.getSlideItem(e.index);(xe(i.target).hasClass("lg-item")||r.get().contains(i.target))&&(e.outer.hasClass("lg-zoomed")||e.lgBusy||(i.preventDefault(),e.lgBusy||(e.manageSwipeClass(),t={pageX:i.pageX,pageY:i.pageY},s=!0,e.outer.get().scrollLeft+=1,e.outer.get().scrollLeft-=1,e.outer.removeClass("lg-grab").addClass("lg-grabbing"),e.LGel.trigger(ge))))})),xe(window).on("mousemove.lg.global"+this.lgId,(function(n){s&&e.lgOpened&&(r=!0,i={pageX:n.pageX,pageY:n.pageY},e.touchMove(t,i),e.LGel.trigger(me))})),xe(window).on("mouseup.lg.global"+this.lgId,(function(n){if(e.lgOpened){var o=xe(n.target);r?(r=!1,e.touchEnd(i,t,n),e.LGel.trigger(fe)):e.isPosterElement(o)&&e.LGel.trigger(he),s&&(s=!1,e.outer.removeClass("lg-grabbing").addClass("lg-grab"))}})))},e.prototype.triggerPosterClick=function(){var e=this;this.$inner.on("click.lg",(function(t){!e.dragOrSwipeEnabled&&e.isPosterElement(xe(t.target))&&e.LGel.trigger(he)}))},e.prototype.manageSwipeClass=function(){var e=this.index+1,t=this.index-1;this.settings.loop&&this.galleryItems.length>2&&(0===this.index?t=this.galleryItems.length-1:this.index===this.galleryItems.length-1&&(e=0)),this.outer.find(".lg-item").removeClass("lg-next-slide lg-prev-slide"),t>-1&&this.getSlideItem(t).addClass("lg-prev-slide"),this.getSlideItem(e).addClass("lg-next-slide")},e.prototype.goToNextSlide=function(e){var t=this,i=this.settings.loop;e&&this.galleryItems.length<3&&(i=!1),this.lgBusy||(this.index+1<this.galleryItems.length?(this.index++,this.LGel.trigger(ve,{index:this.index}),this.slide(this.index,!!e,!1,"next")):i?(this.index=0,this.LGel.trigger(ve,{index:this.index}),this.slide(this.index,!!e,!1,"next")):this.settings.slideEndAnimation&&!e&&(this.outer.addClass("lg-right-end"),setTimeout((function(){t.outer.removeClass("lg-right-end")}),400)))},e.prototype.goToPrevSlide=function(e){var t=this,i=this.settings.loop;e&&this.galleryItems.length<3&&(i=!1),this.lgBusy||(this.index>0?(this.index--,this.LGel.trigger(ye,{index:this.index,fromTouch:e}),this.slide(this.index,!!e,!1,"prev")):i?(this.index=this.galleryItems.length-1,this.LGel.trigger(ye,{index:this.index,fromTouch:e}),this.slide(this.index,!!e,!1,"prev")):this.settings.slideEndAnimation&&!e&&(this.outer.addClass("lg-left-end"),setTimeout((function(){t.outer.removeClass("lg-left-end")}),400)))},e.prototype.keyPress=function(){var e=this;xe(window).on("keydown.lg.global"+this.lgId,(function(t){e.lgOpened&&!0===e.settings.escKey&&27===t.keyCode&&(t.preventDefault(),e.settings.allowMediaOverlap&&e.outer.hasClass("lg-can-toggle")&&e.outer.hasClass("lg-components-open")?e.outer.removeClass("lg-components-open"):e.closeGallery()),e.lgOpened&&e.galleryItems.length>1&&(37===t.keyCode&&(t.preventDefault(),e.goToPrevSlide()),39===t.keyCode&&(t.preventDefault(),e.goToNextSlide()))}))},e.prototype.arrow=function(){var e=this;this.getElementById("lg-prev").on("click.lg",(function(){e.goToPrevSlide()})),this.getElementById("lg-next").on("click.lg",(function(){e.goToNextSlide()}))},e.prototype.arrowDisable=function(e){if(!this.settings.loop&&this.settings.hideControlOnEnd){var t=this.getElementById("lg-prev"),i=this.getElementById("lg-next");e+1===this.galleryItems.length?i.attr("disabled","disabled").addClass("disabled"):i.removeAttr("disabled").removeClass("disabled"),0===e?t.attr("disabled","disabled").addClass("disabled"):t.removeAttr("disabled").removeClass("disabled")}},e.prototype.setTranslate=function(e,t,i,s,r){void 0===s&&(s=1),void 0===r&&(r=1),e.css("transform","translate3d("+t+"px, "+i+"px, 0px) scale3d("+s+", "+r+", 1)")},e.prototype.mousewheel=function(){var e=this,t=0;this.outer.on("wheel.lg",(function(i){if(i.deltaY&&!(e.galleryItems.length<2)){i.preventDefault();var s=(new Date).getTime();s-t<1e3||(t=s,i.deltaY>0?e.goToNextSlide():i.deltaY<0&&e.goToPrevSlide())}}))},e.prototype.isSlideElement=function(e){return e.hasClass("lg-outer")||e.hasClass("lg-item")||e.hasClass("lg-img-wrap")},e.prototype.isPosterElement=function(e){var t=this.getSlideItem(this.index).find(".lg-video-play-button").get();return e.hasClass("lg-video-poster")||e.hasClass("lg-video-play-button")||t&&t.contains(e.get())},e.prototype.toggleMaximize=function(){var e=this;this.getElementById("lg-maximize").on("click.lg",(function(){e.$container.toggleClass("lg-inline"),e.refreshOnResize()}))},e.prototype.invalidateItems=function(){for(var e=0;e<this.items.length;e++){var t=xe(this.items[e]);t.off("click.lgcustom-item-"+t.attr("data-lg-id"))}},e.prototype.trapFocus=function(){var e=this;this.$container.get().focus({preventScroll:!0}),xe(window).on("keydown.lg.global"+this.lgId,(function(t){if(e.lgOpened&&("Tab"===t.key||9===t.keyCode)){var i=_e(e.$container.get()),s=i[0],r=i[i.length-1];t.shiftKey?document.activeElement===s&&(r.focus(),t.preventDefault()):document.activeElement===r&&(s.focus(),t.preventDefault())}}))},e.prototype.manageCloseGallery=function(){var e=this;if(this.settings.closable){var t=!1;this.getElementById("lg-close").on("click.lg",(function(){e.closeGallery()})),this.settings.closeOnTap&&(this.outer.on("mousedown.lg",(function(i){var s=xe(i.target);t=!!e.isSlideElement(s)})),this.outer.on("mousemove.lg",(function(){t=!1})),this.outer.on("mouseup.lg",(function(i){var s=xe(i.target);e.isSlideElement(s)&&t&&(e.outer.hasClass("lg-dragging")||e.closeGallery())})))}},e.prototype.closeGallery=function(e){var t=this;if(!this.lgOpened||!this.settings.closable&&!e)return 0;this.LGel.trigger(be),this.settings.resetScrollPosition&&!this.settings.hideScrollbar&&xe(window).scrollTop(this.prevScrollTop);var i,s=this.items[this.index];if(this.zoomFromOrigin&&s){var r=this.mediaContainerPosition,n=r.top,o=r.bottom,a=this.galleryItems[this.index],l=a.__slideVideoInfo,d=a.poster,c=Ie(s,this.outer,n+o,l&&d&&this.settings.videoMaxSize);i=Me(s,this.outer,n,o,c)}this.zoomFromOrigin&&i?(this.outer.addClass("lg-closing lg-zoom-from-image"),this.getSlideItem(this.index).addClass("lg-start-end-progress").css("transition-duration",this.settings.startAnimationDuration+"ms").css("transform",i)):(this.outer.addClass("lg-hide-items"),this.outer.removeClass("lg-zoom-from-image")),this.destroyModules(),this.lGalleryOn=!1,this.isDummyImageRemoved=!1,this.zoomFromOrigin=this.settings.zoomFromOrigin,clearTimeout(this.hideBarTimeout),this.hideBarTimeout=!1,xe("html").removeClass("lg-on"),this.outer.removeClass("lg-visible lg-components-open"),this.$backdrop.removeClass("in").css("opacity",0);var u=this.zoomFromOrigin&&i?Math.max(this.settings.startAnimationDuration,this.settings.backdropDuration):this.settings.backdropDuration;return this.$container.removeClass("lg-show-in"),setTimeout((function(){t.zoomFromOrigin&&i&&t.outer.removeClass("lg-zoom-from-image"),t.$container.removeClass("lg-show"),t.resetScrollBar(),t.$backdrop.removeAttr("style").css("transition-duration",t.settings.backdropDuration+"ms"),t.outer.removeClass("lg-closing "+t.settings.startClass),t.getSlideItem(t.index).removeClass("lg-start-end-progress"),t.$inner.empty(),t.lgOpened&&t.LGel.trigger(we,{instance:t}),t.$container.get()&&t.$container.get().blur(),t.lgOpened=!1}),u+100),u+100},e.prototype.initModules=function(){this.plugins.forEach((function(e){try{e.init()}catch(e){console.warn("lightGallery:- make sure lightGallery module is properly initiated")}}))},e.prototype.destroyModules=function(e){this.plugins.forEach((function(t){try{e?t.destroy():t.closeGallery&&t.closeGallery()}catch(e){console.warn("lightGallery:- make sure lightGallery module is properly destroyed")}}))},e.prototype.refresh=function(e){this.settings.dynamic||this.invalidateItems(),this.galleryItems=e||this.getItems(),this.updateControls(),this.openGalleryOnItemClick(),this.LGel.trigger(oe)},e.prototype.updateControls=function(){this.addSlideVideoInfo(this.galleryItems),this.updateCounterTotal(),this.manageSingleSlideClassName()},e.prototype.destroyGallery=function(){this.destroyModules(!0),this.settings.dynamic||this.invalidateItems(),xe(window).off(".lg.global"+this.lgId),this.LGel.off(".lg"),this.$container.remove()},e.prototype.destroy=function(){var e=this.closeGallery(!0);return e?setTimeout(this.destroyGallery.bind(this),e):this.destroyGallery(),e},e}();const Ne=function(e,t){return new Fe(e,t)};document.querySelectorAll("[data-lightgallery]").length&&document.querySelectorAll("[data-lightgallery]").forEach((e=>{const t=e.querySelector(".media__text"),i=e.querySelector(".media__description"),s=Ne(e,{speed:500,licenseKey:"7EC452A9-0CFD441C-BD984C7C-17C8456E",appendCounterTo:".lg-content",selector:".media__image-wrap"});e.addEventListener("lgBeforeOpen",(e=>{const r=s.$container.firstElement.querySelector(".lg-outer");t&&r.append(t),i&&r.append(i)}))}));let He=!0;const Ve=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:500;He&&(setTimeout((()=>{document.documentElement.classList.remove("lock")}),e),He=!1,setTimeout((function(){He=!0}),e))},$e=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:500;He&&(document.documentElement.classList.add("lock"),He=!1,setTimeout((function(){He=!0}),e))};i(976),i(691);const qe=window.matchMedia("(max-width: 64.05em)"),je=window.matchMedia("(max-width: 48em)"),Re=document.querySelector(".header"),We=()=>{document.documentElement.classList.remove("_show-cart-widget"),Ve()},Ye=()=>{document.documentElement.classList.remove("_show-header-menu"),Re.classList.remove("_dark-theme"),Ve()};document.addEventListener("click",(e=>{const{target:t}=e;t.closest(".header__hamburger")&&(document.documentElement.classList.toggle("_show-header-menu"),document.querySelector("._show-header-menu")?($e(),Re.classList.add("_dark-theme")):Ye()),qe.matches&&(t.closest(".actions-header__item_cart .actions-header__txt")&&(document.documentElement.classList.remove("_show-header-menu"),document.documentElement.classList.toggle("_show-cart-widget"),document.querySelector("body._light-theme")?(Re.classList.add("_dark-theme"),Ve()):document.querySelector("._show-cart-widget")?(Re.classList.remove("_dark-theme"),je.matches?$e():Ve()):Ve()),!document.querySelector("._show-cart-widget")||t.closest(".actions-header__item_cart")&&!t.closest(".cart-widget__close-btn")||We())})),qe.addEventListener("change",(()=>{!qe.matches&&document.querySelector("._show-header-menu")&&Ye(),!je.matches&&document.querySelector("._show-cart-widget")&&We()})),window.addEventListener("load",(function(){document.documentElement.classList.add("_page-loaded")}));i(202);document.getElementById("currentYear")&&(document.getElementById("currentYear").innerHTML=(new Date).getFullYear())})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,