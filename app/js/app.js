(()=>{"use strict";var e={34:()=>{function e(e){this.type=e}e.prototype.init=function(){const e=this;this.оbjects=[],this.daClassname="_dynamic_adapt_",this.nodes=document.querySelectorAll("[data-da]");for(let e=0;e<this.nodes.length;e++){const t=this.nodes[e],n=t.dataset.da.trim().split(","),i={};i.element=t,i.parent=t.parentNode,i.destination=document.querySelector(n[0].trim()),i.breakpoint=n[1]?n[1].trim():"767",i.place=n[2]?n[2].trim():"last",i.index=this.indexInParent(i.parent,i.element),this.оbjects.push(i)}this.arraySort(this.оbjects),this.mediaQueries=Array.prototype.map.call(this.оbjects,(function(e){return"("+this.type+"-width: "+e.breakpoint+"px),"+e.breakpoint}),this),this.mediaQueries=Array.prototype.filter.call(this.mediaQueries,(function(e,t,n){return Array.prototype.indexOf.call(n,e)===t}));for(let t=0;t<this.mediaQueries.length;t++){const n=this.mediaQueries[t],i=String.prototype.split.call(n,","),r=window.matchMedia(i[0]),a=i[1],o=Array.prototype.filter.call(this.оbjects,(function(e){return e.breakpoint===a}));r.addListener((function(){e.mediaHandler(r,o)})),this.mediaHandler(r,o)}},e.prototype.mediaHandler=function(e,t){if(e.matches)for(let e=0;e<t.length;e++){const n=t[e];n.index=this.indexInParent(n.parent,n.element),this.moveTo(n.place,n.element,n.destination)}else for(let e=t.length-1;e>=0;e--){const n=t[e];n.element.classList.contains(this.daClassname)&&this.moveBack(n.parent,n.element,n.index)}},e.prototype.moveTo=function(e,t,n){t.classList.add(this.daClassname),"last"===e||e>=n.children.length?n.insertAdjacentElement("beforeend",t):"first"!==e?n.children[e].insertAdjacentElement("beforebegin",t):n.insertAdjacentElement("afterbegin",t)},e.prototype.moveBack=function(e,t,n){t.classList.remove(this.daClassname),void 0!==e.children[n]?e.children[n].insertAdjacentElement("beforebegin",t):e.insertAdjacentElement("beforeend",t)},e.prototype.indexInParent=function(e,t){const n=Array.prototype.slice.call(e.children);return Array.prototype.indexOf.call(n,t)},e.prototype.arraySort=function(e){"min"===this.type?Array.prototype.sort.call(e,(function(e,t){return e.breakpoint===t.breakpoint?e.place===t.place?0:"first"===e.place||"last"===t.place?-1:"last"===e.place||"first"===t.place?1:e.place-t.place:e.breakpoint-t.breakpoint})):Array.prototype.sort.call(e,(function(e,t){return e.breakpoint===t.breakpoint?e.place===t.place?0:"first"===e.place||"last"===t.place?1:"last"===e.place||"first"===t.place?-1:t.place-e.place:t.breakpoint-e.breakpoint}))};new e("max").init()}},t={};function n(i){var r=t[i];if(void 0!==r)return r.exports;var a=t[i]={exports:{}};return e[i](a,a.exports,n),a.exports}(()=>{n(34);let e=!0;const t=function(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:500;e&&(setTimeout((()=>{document.documentElement.classList.remove("lock")}),t),e=!1,setTimeout((function(){e=!0}),t))},i=function(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:500;e&&(document.documentElement.classList.add("lock"),e=!1,setTimeout((function(){e=!0}),t))};document.addEventListener("click",(function(e){const{target:n}=e;n.closest(".header__hamburger")&&(document.documentElement.classList.toggle("_show-header-menu"),function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:500;document.documentElement.classList.contains("lock")?t(e):i(e)}())}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,