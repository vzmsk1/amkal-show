(()=>{var e,t,i={34:()=>{"use strict";function e(e){this.type=e}e.prototype.init=function(){const e=this;this.оbjects=[],this.daClassname="_dynamic_adapt_",this.nodes=document.querySelectorAll("[data-da]");for(let e=0;e<this.nodes.length;e++){const t=this.nodes[e],i=t.dataset.da.trim().split(","),r={};r.element=t,r.parent=t.parentNode,r.destination=document.querySelector(i[0].trim()),r.breakpoint=i[1]?i[1].trim():"767",r.place=i[2]?i[2].trim():"last",r.index=this.indexInParent(r.parent,r.element),this.оbjects.push(r)}this.arraySort(this.оbjects),this.mediaQueries=Array.prototype.map.call(this.оbjects,(function(e){return"("+this.type+"-width: "+e.breakpoint+"px),"+e.breakpoint}),this),this.mediaQueries=Array.prototype.filter.call(this.mediaQueries,(function(e,t,i){return Array.prototype.indexOf.call(i,e)===t}));for(let t=0;t<this.mediaQueries.length;t++){const i=this.mediaQueries[t],r=String.prototype.split.call(i,","),s=window.matchMedia(r[0]),n=r[1],a=Array.prototype.filter.call(this.оbjects,(function(e){return e.breakpoint===n}));s.addListener((function(){e.mediaHandler(s,a)})),this.mediaHandler(s,a)}},e.prototype.mediaHandler=function(e,t){if(e.matches)for(let e=0;e<t.length;e++){const i=t[e];i.index=this.indexInParent(i.parent,i.element),this.moveTo(i.place,i.element,i.destination)}else for(let e=t.length-1;e>=0;e--){const i=t[e];i.element.classList.contains(this.daClassname)&&this.moveBack(i.parent,i.element,i.index)}},e.prototype.moveTo=function(e,t,i){t.classList.add(this.daClassname),"last"===e||e>=i.children.length?i.insertAdjacentElement("beforeend",t):"first"!==e?i.children[e].insertAdjacentElement("beforebegin",t):i.insertAdjacentElement("afterbegin",t)},e.prototype.moveBack=function(e,t,i){t.classList.remove(this.daClassname),void 0!==e.children[i]?e.children[i].insertAdjacentElement("beforebegin",t):e.insertAdjacentElement("beforeend",t)},e.prototype.indexInParent=function(e,t){const i=Array.prototype.slice.call(e.children);return Array.prototype.indexOf.call(i,t)},e.prototype.arraySort=function(e){"min"===this.type?Array.prototype.sort.call(e,(function(e,t){return e.breakpoint===t.breakpoint?e.place===t.place?0:"first"===e.place||"last"===t.place?-1:"last"===e.place||"first"===t.place?1:e.place-t.place:e.breakpoint-t.breakpoint})):Array.prototype.sort.call(e,(function(e,t){return e.breakpoint===t.breakpoint?e.place===t.place?0:"first"===e.place||"last"===t.place?1:"last"===e.place||"first"===t.place?-1:t.place-e.place:t.breakpoint-e.breakpoint}))};new e("max").init()},976:()=>{const e=e=>{e.target.classList.remove("_has-error"),e.target.removeAttribute("style")};document.querySelectorAll(".textarea__counter").length&&document.querySelectorAll(".textarea").forEach((e=>{const t=e.querySelector("textarea"),i=e.querySelector(".textarea__counter-current");t.addEventListener("input",(function(){i.innerHTML=t.value.trim().length}))}));document.querySelectorAll("form[data-validate]").length&&document.querySelectorAll("form[data-validate]").forEach((t=>{t.addEventListener("submit",(function(i){((t,i)=>{i.preventDefault(),t.querySelectorAll("input, textarea").forEach((t=>{t.value.length||(t.classList.add("_has-error"),"INPUT"===t.tagName?t.style.borderBottom="0.5px solid #ff7373":"TEXTAREA"===t.tagName&&(t.style.border="0.5px solid #ff7373")),t.addEventListener("focusin",e)})),!t.querySelector("input._has-error")&&t.submit()})(t,i)}))}))},691:()=>{document.querySelectorAll(".quantity").length&&document.querySelectorAll(".quantity").forEach((e=>{const t=e.querySelector(".quantity__input"),i=e.querySelector(".quantity__count_minus"),r=e.querySelector(".quantity__count_add"),s=parseInt(t.min),n=parseInt(t.max),a=new RegExp(/(^\d*$)|(Backspace|Tab|Delete|ArrowLeft|ArrowRight)/);t.addEventListener("keypress",(function(e){!e.key.match(a)&&e.preventDefault()})),t.addEventListener("change",(function(){const e=parseInt(t.value);isNaN(e)||e<=s?(t.value=s,i.removeAttribute("disabled"),r.removeAttribute("disabled")):(i.removeAttribute("disabled"),e>=n?(t.value=n,r.setAttribute("disabled","")):(t.value=e,r.removeAttribute("disabled")))})),e.addEventListener("click",(function(e){if(e.target.closest(".quantity__count")){const a=e.target.closest(".quantity__count").dataset.action;let o=parseInt(t.value);"add"===a?(o+=1,o>=s+1&&r.removeAttribute("disabled"),o>=n&&r.setAttribute("disabled","")):(o=o<=s?s:o-=1,o===s&&i.setAttribute("disabled",""),o<n&&i.removeAttribute("disabled")),t.value=o}}))}))},41:function(e){e.exports=function(){"use strict";var e=document,t=e.createTextNode.bind(e);function i(e,t,i){e.style.setProperty(t,i)}function r(e,t){return e.appendChild(t)}function s(t,i,s,n){var a=e.createElement("span");return i&&(a.className=i),s&&(!n&&a.setAttribute("data-"+i,s),a.textContent=s),t&&r(t,a)||a}function n(e,t){return e.getAttribute("data-"+t)}function a(t,i){return t&&0!=t.length?t.nodeName?[t]:[].slice.call(t[0].nodeName?t:(i||e).querySelectorAll(t)):[]}function o(e){for(var t=[];e--;)t[e]=[];return t}function l(e,t){e&&e.some(t)}function d(e){return function(t){return e[t]}}function c(e,t,r){var s="--"+t,n=s+"-index";l(r,(function(e,t){Array.isArray(e)?l(e,(function(e){i(e,n,t)})):i(e,n,t)})),i(e,s+"-total",r.length)}var u={};function h(e,t,i){var r=i.indexOf(e);if(-1==r){i.unshift(e);var s=u[e];if(!s)throw new Error("plugin not loaded: "+e);l(s.depends,(function(t){h(t,e,i)}))}else{var n=i.indexOf(t);i.splice(r,1),i.splice(n,0,e)}return i}function p(e,t,i,r){return{by:e,depends:t,key:i,split:r}}function f(e){return h(e,0,[]).map(d(u))}function g(e){u[e.by]=e}function m(e,i,n,o,d){e.normalize();var c=[],u=document.createDocumentFragment();o&&c.push(e.previousSibling);var h=[];return a(e.childNodes).some((function(e){if(!e.tagName||e.hasChildNodes()){if(e.childNodes&&e.childNodes.length)return h.push(e),void c.push.apply(c,m(e,i,n,o,d));var r=e.wholeText||"",a=r.trim();a.length&&(" "===r[0]&&h.push(t(" ")),l(""===n&&"function"==typeof Intl.Segmenter?Array.from((new Intl.Segmenter).segment(a)).map((function(e){return e.segment})):a.split(n),(function(e,t){t&&d&&h.push(s(u,"whitespace"," ",d));var r=s(u,i,e);c.push(r),h.push(r)}))," "===r[r.length-1]&&h.push(t(" ")))}else h.push(e)})),l(h,(function(e){r(u,e)})),e.innerHTML="",r(e,u),c}var v=0;function y(e,t){for(var i in t)e[i]=t[i];return e}var _="words",b=p(_,v,"word",(function(e){return m(e,"word",/\s+/,0,1)})),w="chars",x=p(w,[_],"char",(function(e,t,i){var r=[];return l(i[_],(function(e,i){r.push.apply(r,m(e,"char","",t.whitespace&&i))})),r}));function T(e){var t=(e=e||{}).key;return a(e.target||"[data-splitting]").map((function(i){var r=i["🍌"];if(!e.force&&r)return r;r=i["🍌"]={el:i};var s=e.by||n(i,"splitting");s&&"true"!=s||(s=w);var a=f(s),o=y({},e);return l(a,(function(e){if(e.split){var s=e.by,n=(t?"-"+t:"")+e.key,a=e.split(i,o,r);n&&c(i,n,a),r[s]=a,i.classList.add(s)}})),i.classList.add("splitting"),r}))}function S(e){var t=(e=e||{}).target=s();return t.innerHTML=e.content,T(e),t.outerHTML}function C(e,t,i){var r=a(t.matching||e.children,e),s={};return l(r,(function(e){var t=Math.round(e[i]);(s[t]||(s[t]=[])).push(e)})),Object.keys(s).map(Number).sort(E).map(d(s))}function E(e,t){return e-t}T.html=S,T.add=g;var M=p("lines",[_],"line",(function(e,t,i){return C(e,{matching:i[_]},"offsetTop")})),I=p("items",v,"item",(function(e,t){return a(t.matching||e.children,e)})),k=p("rows",v,"row",(function(e,t){return C(e,t,"offsetTop")})),O=p("cols",v,"col",(function(e,t){return C(e,t,"offsetLeft")})),A=p("grid",["rows","cols"]),P="layout",L=p(P,v,v,(function(e,t){var o=t.rows=+(t.rows||n(e,"rows")||1),l=t.columns=+(t.columns||n(e,"columns")||1);if(t.image=t.image||n(e,"image")||e.currentSrc||e.src,t.image){var d=a("img",e)[0];t.image=d&&(d.currentSrc||d.src)}t.image&&i(e,"background-image","url("+t.image+")");for(var c=o*l,u=[],h=s(v,"cell-grid");c--;){var p=s(h,"cell");s(p,"cell-inner"),u.push(p)}return r(e,h),u})),D=p("cellRows",[P],"row",(function(e,t,i){var r=t.rows,s=o(r);return l(i[P],(function(e,t,i){s[Math.floor(t/(i.length/r))].push(e)})),s})),z=p("cellColumns",[P],"col",(function(e,t,i){var r=t.columns,s=o(r);return l(i[P],(function(e,t){s[t%r].push(e)})),s})),B=p("cells",["cellRows","cellColumns"],"cell",(function(e,t,i){return i[P]}));return g(b),g(x),g(M),g(I),g(k),g(O),g(A),g(L),g(D),g(z),g(B),T}()}},r={};function s(e){var t=r[e];if(void 0!==t)return t.exports;var n=r[e]={exports:{}};return i[e].call(n.exports,n,n.exports,s),n.exports}s.m=i,s.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return s.d(t,{a:t}),t},s.d=(e,t)=>{for(var i in t)s.o(t,i)&&!s.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},s.f={},s.e=e=>Promise.all(Object.keys(s.f).reduce(((t,i)=>(s.f[i](e,t),t)),[])),s.u=e=>"js/"+e+".app.js",s.miniCssF=e=>"css/"+e+".style.css",s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="webpack-setup:",s.l=(i,r,n,a)=>{if(e[i])e[i].push(r);else{var o,l;if(void 0!==n)for(var d=document.getElementsByTagName("script"),c=0;c<d.length;c++){var u=d[c];if(u.getAttribute("src")==i||u.getAttribute("data-webpack")==t+n){o=u;break}}o||(l=!0,(o=document.createElement("script")).charset="utf-8",o.timeout=120,s.nc&&o.setAttribute("nonce",s.nc),o.setAttribute("data-webpack",t+n),o.src=i),e[i]=[r];var h=(t,r)=>{o.onerror=o.onload=null,clearTimeout(p);var s=e[i];if(delete e[i],o.parentNode&&o.parentNode.removeChild(o),s&&s.forEach((e=>e(r))),t)return t(r)},p=setTimeout(h.bind(null,void 0,{type:"timeout",target:o}),12e4);o.onerror=h.bind(null,o.onerror),o.onload=h.bind(null,o.onload),l&&document.head.appendChild(o)}},s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;s.g.importScripts&&(e=s.g.location+"");var t=s.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var i=t.getElementsByTagName("script");if(i.length)for(var r=i.length-1;r>-1&&!e;)e=i[r--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),s.p=e+"../"})(),(()=>{if("undefined"!=typeof document){var e=e=>new Promise(((t,i)=>{var r=s.miniCssF(e),n=s.p+r;if(((e,t)=>{for(var i=document.getElementsByTagName("link"),r=0;r<i.length;r++){var s=(a=i[r]).getAttribute("data-href")||a.getAttribute("href");if("stylesheet"===a.rel&&(s===e||s===t))return a}var n=document.getElementsByTagName("style");for(r=0;r<n.length;r++){var a;if((s=(a=n[r]).getAttribute("data-href"))===e||s===t)return a}})(r,n))return t();((e,t,i,r,s)=>{var n=document.createElement("link");n.rel="stylesheet",n.type="text/css",n.onerror=n.onload=i=>{if(n.onerror=n.onload=null,"load"===i.type)r();else{var a=i&&i.type,o=i&&i.target&&i.target.href||t,l=new Error("Loading CSS chunk "+e+" failed.\n("+a+": "+o+")");l.name="ChunkLoadError",l.code="CSS_CHUNK_LOAD_FAILED",l.type=a,l.request=o,n.parentNode&&n.parentNode.removeChild(n),s(l)}},n.href=t,i?i.parentNode.insertBefore(n,i.nextSibling):document.head.appendChild(n)})(e,n,null,t,i)})),t={179:0};s.f.miniCss=(i,r)=>{t[i]?r.push(t[i]):0!==t[i]&&{340:1,784:1}[i]&&r.push(t[i]=e(i).then((()=>{t[i]=0}),(e=>{throw delete t[i],e})))}}})(),(()=>{var e={179:0};s.f.j=(t,i)=>{var r=s.o(e,t)?e[t]:void 0;if(0!==r)if(r)i.push(r[2]);else{var n=new Promise(((i,s)=>r=e[t]=[i,s]));i.push(r[2]=n);var a=s.p+s.u(t),o=new Error;s.l(a,(i=>{if(s.o(e,t)&&(0!==(r=e[t])&&(e[t]=void 0),r)){var n=i&&("load"===i.type?"missing":i.type),a=i&&i.target&&i.target.src;o.message="Loading chunk "+t+" failed.\n("+n+": "+a+")",o.name="ChunkLoadError",o.type=n,o.request=a,r[1](o)}}),"chunk-"+t,t)}};var t=(t,i)=>{var r,n,a=i[0],o=i[1],l=i[2],d=0;if(a.some((t=>0!==e[t]))){for(r in o)s.o(o,r)&&(s.m[r]=o[r]);if(l)l(s)}for(t&&t(i);d<a.length;d++)n=a[d],s.o(e,n)&&e[n]&&e[n][0](),e[n]=0},i=self.webpackChunkwebpack_setup=self.webpackChunkwebpack_setup||[];i.forEach(t.bind(null,0)),i.push=t.bind(null,i.push.bind(i))})(),(()=>{"use strict";s(34);function e(e){return null!==e&&"object"==typeof e&&"constructor"in e&&e.constructor===Object}function t(i,r){void 0===i&&(i={}),void 0===r&&(r={}),Object.keys(r).forEach((s=>{void 0===i[s]?i[s]=r[s]:e(r[s])&&e(i[s])&&Object.keys(r[s]).length>0&&t(i[s],r[s])}))}const i={body:{},addEventListener(){},removeEventListener(){},activeElement:{blur(){},nodeName:""},querySelector:()=>null,querySelectorAll:()=>[],getElementById:()=>null,createEvent:()=>({initEvent(){}}),createElement:()=>({children:[],childNodes:[],style:{},setAttribute(){},getElementsByTagName:()=>[]}),createElementNS:()=>({}),importNode:()=>null,location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};function r(){const e="undefined"!=typeof document?document:{};return t(e,i),e}const n={document:i,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState(){},pushState(){},go(){},back(){}},CustomEvent:function(){return this},addEventListener(){},removeEventListener(){},getComputedStyle:()=>({getPropertyValue:()=>""}),Image(){},Date(){},screen:{},setTimeout(){},clearTimeout(){},matchMedia:()=>({}),requestAnimationFrame:e=>"undefined"==typeof setTimeout?(e(),null):setTimeout(e,0),cancelAnimationFrame(e){"undefined"!=typeof setTimeout&&clearTimeout(e)}};function a(){const e="undefined"!=typeof window?window:{};return t(e,n),e}function o(e,t){return void 0===t&&(t=0),setTimeout(e,t)}function l(){return Date.now()}function d(e,t){void 0===t&&(t="x");const i=a();let r,s,n;const o=function(e){const t=a();let i;return t.getComputedStyle&&(i=t.getComputedStyle(e,null)),!i&&e.currentStyle&&(i=e.currentStyle),i||(i=e.style),i}(e);return i.WebKitCSSMatrix?(s=o.transform||o.webkitTransform,s.split(",").length>6&&(s=s.split(", ").map((e=>e.replace(",","."))).join(", ")),n=new i.WebKitCSSMatrix("none"===s?"":s)):(n=o.MozTransform||o.OTransform||o.MsTransform||o.msTransform||o.transform||o.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,"),r=n.toString().split(",")),"x"===t&&(s=i.WebKitCSSMatrix?n.m41:16===r.length?parseFloat(r[12]):parseFloat(r[4])),"y"===t&&(s=i.WebKitCSSMatrix?n.m42:16===r.length?parseFloat(r[13]):parseFloat(r[5])),s||0}function c(e){return"object"==typeof e&&null!==e&&e.constructor&&"Object"===Object.prototype.toString.call(e).slice(8,-1)}function u(){const e=Object(arguments.length<=0?void 0:arguments[0]),t=["__proto__","constructor","prototype"];for(let r=1;r<arguments.length;r+=1){const s=r<0||arguments.length<=r?void 0:arguments[r];if(null!=s&&(i=s,!("undefined"!=typeof window&&void 0!==window.HTMLElement?i instanceof HTMLElement:i&&(1===i.nodeType||11===i.nodeType)))){const i=Object.keys(Object(s)).filter((e=>t.indexOf(e)<0));for(let t=0,r=i.length;t<r;t+=1){const r=i[t],n=Object.getOwnPropertyDescriptor(s,r);void 0!==n&&n.enumerable&&(c(e[r])&&c(s[r])?s[r].__swiper__?e[r]=s[r]:u(e[r],s[r]):!c(e[r])&&c(s[r])?(e[r]={},s[r].__swiper__?e[r]=s[r]:u(e[r],s[r])):e[r]=s[r])}}}var i;return e}function h(e,t,i){e.style.setProperty(t,i)}function p(e){let{swiper:t,targetPosition:i,side:r}=e;const s=a(),n=-t.translate;let o,l=null;const d=t.params.speed;t.wrapperEl.style.scrollSnapType="none",s.cancelAnimationFrame(t.cssModeFrameID);const c=i>n?"next":"prev",u=(e,t)=>"next"===c&&e>=t||"prev"===c&&e<=t,h=()=>{o=(new Date).getTime(),null===l&&(l=o);const e=Math.max(Math.min((o-l)/d,1),0),a=.5-Math.cos(e*Math.PI)/2;let c=n+a*(i-n);if(u(c,i)&&(c=i),t.wrapperEl.scrollTo({[r]:c}),u(c,i))return t.wrapperEl.style.overflow="hidden",t.wrapperEl.style.scrollSnapType="",setTimeout((()=>{t.wrapperEl.style.overflow="",t.wrapperEl.scrollTo({[r]:c})})),void s.cancelAnimationFrame(t.cssModeFrameID);t.cssModeFrameID=s.requestAnimationFrame(h)};h()}function f(e,t){return void 0===t&&(t=""),[...e.children].filter((e=>e.matches(t)))}function g(e){try{return void console.warn(e)}catch(e){}}function m(e,t){void 0===t&&(t=[]);const i=document.createElement(e);return i.classList.add(...Array.isArray(t)?t:function(e){return void 0===e&&(e=""),e.trim().split(" ").filter((e=>!!e.trim()))}(t)),i}function v(e,t){return a().getComputedStyle(e,null).getPropertyValue(t)}function y(e){let t,i=e;if(i){for(t=0;null!==(i=i.previousSibling);)1===i.nodeType&&(t+=1);return t}}function _(e,t){const i=[];let r=e.parentElement;for(;r;)t?r.matches(t)&&i.push(r):i.push(r),r=r.parentElement;return i}function b(e,t,i){const r=a();return i?e["width"===t?"offsetWidth":"offsetHeight"]+parseFloat(r.getComputedStyle(e,null).getPropertyValue("width"===t?"margin-right":"margin-top"))+parseFloat(r.getComputedStyle(e,null).getPropertyValue("width"===t?"margin-left":"margin-bottom")):e.offsetWidth}function w(e){return(Array.isArray(e)?e:[e]).filter((e=>!!e))}let x,T,S;function C(){return x||(x=function(){const e=a(),t=r();return{smoothScroll:t.documentElement&&t.documentElement.style&&"scrollBehavior"in t.documentElement.style,touch:!!("ontouchstart"in e||e.DocumentTouch&&t instanceof e.DocumentTouch)}}()),x}function E(e){return void 0===e&&(e={}),T||(T=function(e){let{userAgent:t}=void 0===e?{}:e;const i=C(),r=a(),s=r.navigator.platform,n=t||r.navigator.userAgent,o={ios:!1,android:!1},l=r.screen.width,d=r.screen.height,c=n.match(/(Android);?[\s\/]+([\d.]+)?/);let u=n.match(/(iPad).*OS\s([\d_]+)/);const h=n.match(/(iPod)(.*OS\s([\d_]+))?/),p=!u&&n.match(/(iPhone\sOS|iOS)\s([\d_]+)/),f="Win32"===s;let g="MacIntel"===s;return!u&&g&&i.touch&&["1024x1366","1366x1024","834x1194","1194x834","834x1112","1112x834","768x1024","1024x768","820x1180","1180x820","810x1080","1080x810"].indexOf(`${l}x${d}`)>=0&&(u=n.match(/(Version)\/([\d.]+)/),u||(u=[0,1,"13_0_0"]),g=!1),c&&!f&&(o.os="android",o.android=!0),(u||p||h)&&(o.os="ios",o.ios=!0),o}(e)),T}function M(){return S||(S=function(){const e=a(),t=E();let i=!1;function r(){const t=e.navigator.userAgent.toLowerCase();return t.indexOf("safari")>=0&&t.indexOf("chrome")<0&&t.indexOf("android")<0}if(r()){const t=String(e.navigator.userAgent);if(t.includes("Version/")){const[e,r]=t.split("Version/")[1].split(" ")[0].split(".").map((e=>Number(e)));i=e<16||16===e&&r<2}}const s=/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(e.navigator.userAgent),n=r();return{isSafari:i||n,needPerspectiveFix:i,need3dFix:n||s&&t.ios,isWebView:s}}()),S}var I={on(e,t,i){const r=this;if(!r.eventsListeners||r.destroyed)return r;if("function"!=typeof t)return r;const s=i?"unshift":"push";return e.split(" ").forEach((e=>{r.eventsListeners[e]||(r.eventsListeners[e]=[]),r.eventsListeners[e][s](t)})),r},once(e,t,i){const r=this;if(!r.eventsListeners||r.destroyed)return r;if("function"!=typeof t)return r;function s(){r.off(e,s),s.__emitterProxy&&delete s.__emitterProxy;for(var i=arguments.length,n=new Array(i),a=0;a<i;a++)n[a]=arguments[a];t.apply(r,n)}return s.__emitterProxy=t,r.on(e,s,i)},onAny(e,t){const i=this;if(!i.eventsListeners||i.destroyed)return i;if("function"!=typeof e)return i;const r=t?"unshift":"push";return i.eventsAnyListeners.indexOf(e)<0&&i.eventsAnyListeners[r](e),i},offAny(e){const t=this;if(!t.eventsListeners||t.destroyed)return t;if(!t.eventsAnyListeners)return t;const i=t.eventsAnyListeners.indexOf(e);return i>=0&&t.eventsAnyListeners.splice(i,1),t},off(e,t){const i=this;return!i.eventsListeners||i.destroyed?i:i.eventsListeners?(e.split(" ").forEach((e=>{void 0===t?i.eventsListeners[e]=[]:i.eventsListeners[e]&&i.eventsListeners[e].forEach(((r,s)=>{(r===t||r.__emitterProxy&&r.__emitterProxy===t)&&i.eventsListeners[e].splice(s,1)}))})),i):i},emit(){const e=this;if(!e.eventsListeners||e.destroyed)return e;if(!e.eventsListeners)return e;let t,i,r;for(var s=arguments.length,n=new Array(s),a=0;a<s;a++)n[a]=arguments[a];"string"==typeof n[0]||Array.isArray(n[0])?(t=n[0],i=n.slice(1,n.length),r=e):(t=n[0].events,i=n[0].data,r=n[0].context||e),i.unshift(r);return(Array.isArray(t)?t:t.split(" ")).forEach((t=>{e.eventsAnyListeners&&e.eventsAnyListeners.length&&e.eventsAnyListeners.forEach((e=>{e.apply(r,[t,...i])})),e.eventsListeners&&e.eventsListeners[t]&&e.eventsListeners[t].forEach((e=>{e.apply(r,i)}))})),e}};const k=(e,t,i)=>{t&&!e.classList.contains(i)?e.classList.add(i):!t&&e.classList.contains(i)&&e.classList.remove(i)};const O=(e,t,i)=>{t&&!e.classList.contains(i)?e.classList.add(i):!t&&e.classList.contains(i)&&e.classList.remove(i)};const A=(e,t)=>{if(!e||e.destroyed||!e.params)return;const i=t.closest(e.isElement?"swiper-slide":`.${e.params.slideClass}`);if(i){let t=i.querySelector(`.${e.params.lazyPreloaderClass}`);!t&&e.isElement&&(i.shadowRoot?t=i.shadowRoot.querySelector(`.${e.params.lazyPreloaderClass}`):requestAnimationFrame((()=>{i.shadowRoot&&(t=i.shadowRoot.querySelector(`.${e.params.lazyPreloaderClass}`),t&&t.remove())}))),t&&t.remove()}},P=(e,t)=>{if(!e.slides[t])return;const i=e.slides[t].querySelector('[loading="lazy"]');i&&i.removeAttribute("loading")},L=e=>{if(!e||e.destroyed||!e.params)return;let t=e.params.lazyPreloadPrevNext;const i=e.slides.length;if(!i||!t||t<0)return;t=Math.min(t,i);const r="auto"===e.params.slidesPerView?e.slidesPerViewDynamic():Math.ceil(e.params.slidesPerView),s=e.activeIndex;if(e.params.grid&&e.params.grid.rows>1){const i=s,n=[i-t];return n.push(...Array.from({length:t}).map(((e,t)=>i+r+t))),void e.slides.forEach(((t,i)=>{n.includes(t.column)&&P(e,i)}))}const n=s+r-1;if(e.params.rewind||e.params.loop)for(let r=s-t;r<=n+t;r+=1){const t=(r%i+i)%i;(t<s||t>n)&&P(e,t)}else for(let r=Math.max(s-t,0);r<=Math.min(n+t,i-1);r+=1)r!==s&&(r>n||r<s)&&P(e,r)};var D={updateSize:function(){const e=this;let t,i;const r=e.el;t=void 0!==e.params.width&&null!==e.params.width?e.params.width:r.clientWidth,i=void 0!==e.params.height&&null!==e.params.height?e.params.height:r.clientHeight,0===t&&e.isHorizontal()||0===i&&e.isVertical()||(t=t-parseInt(v(r,"padding-left")||0,10)-parseInt(v(r,"padding-right")||0,10),i=i-parseInt(v(r,"padding-top")||0,10)-parseInt(v(r,"padding-bottom")||0,10),Number.isNaN(t)&&(t=0),Number.isNaN(i)&&(i=0),Object.assign(e,{width:t,height:i,size:e.isHorizontal()?t:i}))},updateSlides:function(){const e=this;function t(t,i){return parseFloat(t.getPropertyValue(e.getDirectionLabel(i))||0)}const i=e.params,{wrapperEl:r,slidesEl:s,size:n,rtlTranslate:a,wrongRTL:o}=e,l=e.virtual&&i.virtual.enabled,d=l?e.virtual.slides.length:e.slides.length,c=f(s,`.${e.params.slideClass}, swiper-slide`),u=l?e.virtual.slides.length:c.length;let p=[];const g=[],m=[];let y=i.slidesOffsetBefore;"function"==typeof y&&(y=i.slidesOffsetBefore.call(e));let _=i.slidesOffsetAfter;"function"==typeof _&&(_=i.slidesOffsetAfter.call(e));const w=e.snapGrid.length,x=e.slidesGrid.length;let T=i.spaceBetween,S=-y,C=0,E=0;if(void 0===n)return;"string"==typeof T&&T.indexOf("%")>=0?T=parseFloat(T.replace("%",""))/100*n:"string"==typeof T&&(T=parseFloat(T)),e.virtualSize=-T,c.forEach((e=>{a?e.style.marginLeft="":e.style.marginRight="",e.style.marginBottom="",e.style.marginTop=""})),i.centeredSlides&&i.cssMode&&(h(r,"--swiper-centered-offset-before",""),h(r,"--swiper-centered-offset-after",""));const M=i.grid&&i.grid.rows>1&&e.grid;let I;M?e.grid.initSlides(c):e.grid&&e.grid.unsetSlides();const k="auto"===i.slidesPerView&&i.breakpoints&&Object.keys(i.breakpoints).filter((e=>void 0!==i.breakpoints[e].slidesPerView)).length>0;for(let r=0;r<u;r+=1){let s;if(I=0,c[r]&&(s=c[r]),M&&e.grid.updateSlide(r,s,c),!c[r]||"none"!==v(s,"display")){if("auto"===i.slidesPerView){k&&(c[r].style[e.getDirectionLabel("width")]="");const n=getComputedStyle(s),a=s.style.transform,o=s.style.webkitTransform;if(a&&(s.style.transform="none"),o&&(s.style.webkitTransform="none"),i.roundLengths)I=e.isHorizontal()?b(s,"width",!0):b(s,"height",!0);else{const e=t(n,"width"),i=t(n,"padding-left"),r=t(n,"padding-right"),a=t(n,"margin-left"),o=t(n,"margin-right"),l=n.getPropertyValue("box-sizing");if(l&&"border-box"===l)I=e+a+o;else{const{clientWidth:t,offsetWidth:n}=s;I=e+i+r+a+o+(n-t)}}a&&(s.style.transform=a),o&&(s.style.webkitTransform=o),i.roundLengths&&(I=Math.floor(I))}else I=(n-(i.slidesPerView-1)*T)/i.slidesPerView,i.roundLengths&&(I=Math.floor(I)),c[r]&&(c[r].style[e.getDirectionLabel("width")]=`${I}px`);c[r]&&(c[r].swiperSlideSize=I),m.push(I),i.centeredSlides?(S=S+I/2+C/2+T,0===C&&0!==r&&(S=S-n/2-T),0===r&&(S=S-n/2-T),Math.abs(S)<.001&&(S=0),i.roundLengths&&(S=Math.floor(S)),E%i.slidesPerGroup==0&&p.push(S),g.push(S)):(i.roundLengths&&(S=Math.floor(S)),(E-Math.min(e.params.slidesPerGroupSkip,E))%e.params.slidesPerGroup==0&&p.push(S),g.push(S),S=S+I+T),e.virtualSize+=I+T,C=I,E+=1}}if(e.virtualSize=Math.max(e.virtualSize,n)+_,a&&o&&("slide"===i.effect||"coverflow"===i.effect)&&(r.style.width=`${e.virtualSize+T}px`),i.setWrapperSize&&(r.style[e.getDirectionLabel("width")]=`${e.virtualSize+T}px`),M&&e.grid.updateWrapperSize(I,p),!i.centeredSlides){const t=[];for(let r=0;r<p.length;r+=1){let s=p[r];i.roundLengths&&(s=Math.floor(s)),p[r]<=e.virtualSize-n&&t.push(s)}p=t,Math.floor(e.virtualSize-n)-Math.floor(p[p.length-1])>1&&p.push(e.virtualSize-n)}if(l&&i.loop){const t=m[0]+T;if(i.slidesPerGroup>1){const r=Math.ceil((e.virtual.slidesBefore+e.virtual.slidesAfter)/i.slidesPerGroup),s=t*i.slidesPerGroup;for(let e=0;e<r;e+=1)p.push(p[p.length-1]+s)}for(let r=0;r<e.virtual.slidesBefore+e.virtual.slidesAfter;r+=1)1===i.slidesPerGroup&&p.push(p[p.length-1]+t),g.push(g[g.length-1]+t),e.virtualSize+=t}if(0===p.length&&(p=[0]),0!==T){const t=e.isHorizontal()&&a?"marginLeft":e.getDirectionLabel("marginRight");c.filter(((e,t)=>!(i.cssMode&&!i.loop)||t!==c.length-1)).forEach((e=>{e.style[t]=`${T}px`}))}if(i.centeredSlides&&i.centeredSlidesBounds){let e=0;m.forEach((t=>{e+=t+(T||0)})),e-=T;const t=e-n;p=p.map((e=>e<=0?-y:e>t?t+_:e))}if(i.centerInsufficientSlides){let e=0;m.forEach((t=>{e+=t+(T||0)})),e-=T;const t=(i.slidesOffsetBefore||0)+(i.slidesOffsetAfter||0);if(e+t<n){const i=(n-e-t)/2;p.forEach(((e,t)=>{p[t]=e-i})),g.forEach(((e,t)=>{g[t]=e+i}))}}if(Object.assign(e,{slides:c,snapGrid:p,slidesGrid:g,slidesSizesGrid:m}),i.centeredSlides&&i.cssMode&&!i.centeredSlidesBounds){h(r,"--swiper-centered-offset-before",-p[0]+"px"),h(r,"--swiper-centered-offset-after",e.size/2-m[m.length-1]/2+"px");const t=-e.snapGrid[0],i=-e.slidesGrid[0];e.snapGrid=e.snapGrid.map((e=>e+t)),e.slidesGrid=e.slidesGrid.map((e=>e+i))}if(u!==d&&e.emit("slidesLengthChange"),p.length!==w&&(e.params.watchOverflow&&e.checkOverflow(),e.emit("snapGridLengthChange")),g.length!==x&&e.emit("slidesGridLengthChange"),i.watchSlidesProgress&&e.updateSlidesOffset(),e.emit("slidesUpdated"),!(l||i.cssMode||"slide"!==i.effect&&"fade"!==i.effect)){const t=`${i.containerModifierClass}backface-hidden`,r=e.el.classList.contains(t);u<=i.maxBackfaceHiddenSlides?r||e.el.classList.add(t):r&&e.el.classList.remove(t)}},updateAutoHeight:function(e){const t=this,i=[],r=t.virtual&&t.params.virtual.enabled;let s,n=0;"number"==typeof e?t.setTransition(e):!0===e&&t.setTransition(t.params.speed);const a=e=>r?t.slides[t.getSlideIndexByData(e)]:t.slides[e];if("auto"!==t.params.slidesPerView&&t.params.slidesPerView>1)if(t.params.centeredSlides)(t.visibleSlides||[]).forEach((e=>{i.push(e)}));else for(s=0;s<Math.ceil(t.params.slidesPerView);s+=1){const e=t.activeIndex+s;if(e>t.slides.length&&!r)break;i.push(a(e))}else i.push(a(t.activeIndex));for(s=0;s<i.length;s+=1)if(void 0!==i[s]){const e=i[s].offsetHeight;n=e>n?e:n}(n||0===n)&&(t.wrapperEl.style.height=`${n}px`)},updateSlidesOffset:function(){const e=this,t=e.slides,i=e.isElement?e.isHorizontal()?e.wrapperEl.offsetLeft:e.wrapperEl.offsetTop:0;for(let r=0;r<t.length;r+=1)t[r].swiperSlideOffset=(e.isHorizontal()?t[r].offsetLeft:t[r].offsetTop)-i-e.cssOverflowAdjustment()},updateSlidesProgress:function(e){void 0===e&&(e=this&&this.translate||0);const t=this,i=t.params,{slides:r,rtlTranslate:s,snapGrid:n}=t;if(0===r.length)return;void 0===r[0].swiperSlideOffset&&t.updateSlidesOffset();let a=-e;s&&(a=e),t.visibleSlidesIndexes=[],t.visibleSlides=[];let o=i.spaceBetween;"string"==typeof o&&o.indexOf("%")>=0?o=parseFloat(o.replace("%",""))/100*t.size:"string"==typeof o&&(o=parseFloat(o));for(let e=0;e<r.length;e+=1){const l=r[e];let d=l.swiperSlideOffset;i.cssMode&&i.centeredSlides&&(d-=r[0].swiperSlideOffset);const c=(a+(i.centeredSlides?t.minTranslate():0)-d)/(l.swiperSlideSize+o),u=(a-n[0]+(i.centeredSlides?t.minTranslate():0)-d)/(l.swiperSlideSize+o),h=-(a-d),p=h+t.slidesSizesGrid[e],f=h>=0&&h<=t.size-t.slidesSizesGrid[e],g=h>=0&&h<t.size-1||p>1&&p<=t.size||h<=0&&p>=t.size;g&&(t.visibleSlides.push(l),t.visibleSlidesIndexes.push(e)),k(l,g,i.slideVisibleClass),k(l,f,i.slideFullyVisibleClass),l.progress=s?-c:c,l.originalProgress=s?-u:u}},updateProgress:function(e){const t=this;if(void 0===e){const i=t.rtlTranslate?-1:1;e=t&&t.translate&&t.translate*i||0}const i=t.params,r=t.maxTranslate()-t.minTranslate();let{progress:s,isBeginning:n,isEnd:a,progressLoop:o}=t;const l=n,d=a;if(0===r)s=0,n=!0,a=!0;else{s=(e-t.minTranslate())/r;const i=Math.abs(e-t.minTranslate())<1,o=Math.abs(e-t.maxTranslate())<1;n=i||s<=0,a=o||s>=1,i&&(s=0),o&&(s=1)}if(i.loop){const i=t.getSlideIndexByData(0),r=t.getSlideIndexByData(t.slides.length-1),s=t.slidesGrid[i],n=t.slidesGrid[r],a=t.slidesGrid[t.slidesGrid.length-1],l=Math.abs(e);o=l>=s?(l-s)/a:(l+a-n)/a,o>1&&(o-=1)}Object.assign(t,{progress:s,progressLoop:o,isBeginning:n,isEnd:a}),(i.watchSlidesProgress||i.centeredSlides&&i.autoHeight)&&t.updateSlidesProgress(e),n&&!l&&t.emit("reachBeginning toEdge"),a&&!d&&t.emit("reachEnd toEdge"),(l&&!n||d&&!a)&&t.emit("fromEdge"),t.emit("progress",s)},updateSlidesClasses:function(){const e=this,{slides:t,params:i,slidesEl:r,activeIndex:s}=e,n=e.virtual&&i.virtual.enabled,a=e.grid&&i.grid&&i.grid.rows>1,o=e=>f(r,`.${i.slideClass}${e}, swiper-slide${e}`)[0];let l,d,c;if(n)if(i.loop){let t=s-e.virtual.slidesBefore;t<0&&(t=e.virtual.slides.length+t),t>=e.virtual.slides.length&&(t-=e.virtual.slides.length),l=o(`[data-swiper-slide-index="${t}"]`)}else l=o(`[data-swiper-slide-index="${s}"]`);else a?(l=t.filter((e=>e.column===s))[0],c=t.filter((e=>e.column===s+1))[0],d=t.filter((e=>e.column===s-1))[0]):l=t[s];l&&(a||(c=function(e,t){const i=[];for(;e.nextElementSibling;){const r=e.nextElementSibling;t?r.matches(t)&&i.push(r):i.push(r),e=r}return i}(l,`.${i.slideClass}, swiper-slide`)[0],i.loop&&!c&&(c=t[0]),d=function(e,t){const i=[];for(;e.previousElementSibling;){const r=e.previousElementSibling;t?r.matches(t)&&i.push(r):i.push(r),e=r}return i}(l,`.${i.slideClass}, swiper-slide`)[0],i.loop&&0===!d&&(d=t[t.length-1]))),t.forEach((e=>{O(e,e===l,i.slideActiveClass),O(e,e===c,i.slideNextClass),O(e,e===d,i.slidePrevClass)})),e.emitSlidesClasses()},updateActiveIndex:function(e){const t=this,i=t.rtlTranslate?t.translate:-t.translate,{snapGrid:r,params:s,activeIndex:n,realIndex:a,snapIndex:o}=t;let l,d=e;const c=e=>{let i=e-t.virtual.slidesBefore;return i<0&&(i=t.virtual.slides.length+i),i>=t.virtual.slides.length&&(i-=t.virtual.slides.length),i};if(void 0===d&&(d=function(e){const{slidesGrid:t,params:i}=e,r=e.rtlTranslate?e.translate:-e.translate;let s;for(let e=0;e<t.length;e+=1)void 0!==t[e+1]?r>=t[e]&&r<t[e+1]-(t[e+1]-t[e])/2?s=e:r>=t[e]&&r<t[e+1]&&(s=e+1):r>=t[e]&&(s=e);return i.normalizeSlideIndex&&(s<0||void 0===s)&&(s=0),s}(t)),r.indexOf(i)>=0)l=r.indexOf(i);else{const e=Math.min(s.slidesPerGroupSkip,d);l=e+Math.floor((d-e)/s.slidesPerGroup)}if(l>=r.length&&(l=r.length-1),d===n&&!t.params.loop)return void(l!==o&&(t.snapIndex=l,t.emit("snapIndexChange")));if(d===n&&t.params.loop&&t.virtual&&t.params.virtual.enabled)return void(t.realIndex=c(d));const u=t.grid&&s.grid&&s.grid.rows>1;let h;if(t.virtual&&s.virtual.enabled&&s.loop)h=c(d);else if(u){const e=t.slides.filter((e=>e.column===d))[0];let i=parseInt(e.getAttribute("data-swiper-slide-index"),10);Number.isNaN(i)&&(i=Math.max(t.slides.indexOf(e),0)),h=Math.floor(i/s.grid.rows)}else if(t.slides[d]){const e=t.slides[d].getAttribute("data-swiper-slide-index");h=e?parseInt(e,10):d}else h=d;Object.assign(t,{previousSnapIndex:o,snapIndex:l,previousRealIndex:a,realIndex:h,previousIndex:n,activeIndex:d}),t.initialized&&L(t),t.emit("activeIndexChange"),t.emit("snapIndexChange"),(t.initialized||t.params.runCallbacksOnInit)&&(a!==h&&t.emit("realIndexChange"),t.emit("slideChange"))},updateClickedSlide:function(e,t){const i=this,r=i.params;let s=e.closest(`.${r.slideClass}, swiper-slide`);!s&&i.isElement&&t&&t.length>1&&t.includes(e)&&[...t.slice(t.indexOf(e)+1,t.length)].forEach((e=>{!s&&e.matches&&e.matches(`.${r.slideClass}, swiper-slide`)&&(s=e)}));let n,a=!1;if(s)for(let e=0;e<i.slides.length;e+=1)if(i.slides[e]===s){a=!0,n=e;break}if(!s||!a)return i.clickedSlide=void 0,void(i.clickedIndex=void 0);i.clickedSlide=s,i.virtual&&i.params.virtual.enabled?i.clickedIndex=parseInt(s.getAttribute("data-swiper-slide-index"),10):i.clickedIndex=n,r.slideToClickedSlide&&void 0!==i.clickedIndex&&i.clickedIndex!==i.activeIndex&&i.slideToClickedSlide()}};var z={getTranslate:function(e){void 0===e&&(e=this.isHorizontal()?"x":"y");const{params:t,rtlTranslate:i,translate:r,wrapperEl:s}=this;if(t.virtualTranslate)return i?-r:r;if(t.cssMode)return r;let n=d(s,e);return n+=this.cssOverflowAdjustment(),i&&(n=-n),n||0},setTranslate:function(e,t){const i=this,{rtlTranslate:r,params:s,wrapperEl:n,progress:a}=i;let o,l=0,d=0;i.isHorizontal()?l=r?-e:e:d=e,s.roundLengths&&(l=Math.floor(l),d=Math.floor(d)),i.previousTranslate=i.translate,i.translate=i.isHorizontal()?l:d,s.cssMode?n[i.isHorizontal()?"scrollLeft":"scrollTop"]=i.isHorizontal()?-l:-d:s.virtualTranslate||(i.isHorizontal()?l-=i.cssOverflowAdjustment():d-=i.cssOverflowAdjustment(),n.style.transform=`translate3d(${l}px, ${d}px, 0px)`);const c=i.maxTranslate()-i.minTranslate();o=0===c?0:(e-i.minTranslate())/c,o!==a&&i.updateProgress(e),i.emit("setTranslate",i.translate,t)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]},translateTo:function(e,t,i,r,s){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===i&&(i=!0),void 0===r&&(r=!0);const n=this,{params:a,wrapperEl:o}=n;if(n.animating&&a.preventInteractionOnTransition)return!1;const l=n.minTranslate(),d=n.maxTranslate();let c;if(c=r&&e>l?l:r&&e<d?d:e,n.updateProgress(c),a.cssMode){const e=n.isHorizontal();if(0===t)o[e?"scrollLeft":"scrollTop"]=-c;else{if(!n.support.smoothScroll)return p({swiper:n,targetPosition:-c,side:e?"left":"top"}),!0;o.scrollTo({[e?"left":"top"]:-c,behavior:"smooth"})}return!0}return 0===t?(n.setTransition(0),n.setTranslate(c),i&&(n.emit("beforeTransitionStart",t,s),n.emit("transitionEnd"))):(n.setTransition(t),n.setTranslate(c),i&&(n.emit("beforeTransitionStart",t,s),n.emit("transitionStart")),n.animating||(n.animating=!0,n.onTranslateToWrapperTransitionEnd||(n.onTranslateToWrapperTransitionEnd=function(e){n&&!n.destroyed&&e.target===this&&(n.wrapperEl.removeEventListener("transitionend",n.onTranslateToWrapperTransitionEnd),n.onTranslateToWrapperTransitionEnd=null,delete n.onTranslateToWrapperTransitionEnd,n.animating=!1,i&&n.emit("transitionEnd"))}),n.wrapperEl.addEventListener("transitionend",n.onTranslateToWrapperTransitionEnd))),!0}};function B(e){let{swiper:t,runCallbacks:i,direction:r,step:s}=e;const{activeIndex:n,previousIndex:a}=t;let o=r;if(o||(o=n>a?"next":n<a?"prev":"reset"),t.emit(`transition${s}`),i&&n!==a){if("reset"===o)return void t.emit(`slideResetTransition${s}`);t.emit(`slideChangeTransition${s}`),"next"===o?t.emit(`slideNextTransition${s}`):t.emit(`slidePrevTransition${s}`)}}var F={slideTo:function(e,t,i,r,s){void 0===e&&(e=0),void 0===i&&(i=!0),"string"==typeof e&&(e=parseInt(e,10));const n=this;let a=e;a<0&&(a=0);const{params:o,snapGrid:l,slidesGrid:d,previousIndex:c,activeIndex:u,rtlTranslate:h,wrapperEl:f,enabled:g}=n;if(!g&&!r&&!s||n.destroyed||n.animating&&o.preventInteractionOnTransition)return!1;void 0===t&&(t=n.params.speed);const m=Math.min(n.params.slidesPerGroupSkip,a);let v=m+Math.floor((a-m)/n.params.slidesPerGroup);v>=l.length&&(v=l.length-1);const y=-l[v];if(o.normalizeSlideIndex)for(let e=0;e<d.length;e+=1){const t=-Math.floor(100*y),i=Math.floor(100*d[e]),r=Math.floor(100*d[e+1]);void 0!==d[e+1]?t>=i&&t<r-(r-i)/2?a=e:t>=i&&t<r&&(a=e+1):t>=i&&(a=e)}if(n.initialized&&a!==u){if(!n.allowSlideNext&&(h?y>n.translate&&y>n.minTranslate():y<n.translate&&y<n.minTranslate()))return!1;if(!n.allowSlidePrev&&y>n.translate&&y>n.maxTranslate()&&(u||0)!==a)return!1}let _;if(a!==(c||0)&&i&&n.emit("beforeSlideChangeStart"),n.updateProgress(y),_=a>u?"next":a<u?"prev":"reset",h&&-y===n.translate||!h&&y===n.translate)return n.updateActiveIndex(a),o.autoHeight&&n.updateAutoHeight(),n.updateSlidesClasses(),"slide"!==o.effect&&n.setTranslate(y),"reset"!==_&&(n.transitionStart(i,_),n.transitionEnd(i,_)),!1;if(o.cssMode){const e=n.isHorizontal(),i=h?y:-y;if(0===t){const t=n.virtual&&n.params.virtual.enabled;t&&(n.wrapperEl.style.scrollSnapType="none",n._immediateVirtual=!0),t&&!n._cssModeVirtualInitialSet&&n.params.initialSlide>0?(n._cssModeVirtualInitialSet=!0,requestAnimationFrame((()=>{f[e?"scrollLeft":"scrollTop"]=i}))):f[e?"scrollLeft":"scrollTop"]=i,t&&requestAnimationFrame((()=>{n.wrapperEl.style.scrollSnapType="",n._immediateVirtual=!1}))}else{if(!n.support.smoothScroll)return p({swiper:n,targetPosition:i,side:e?"left":"top"}),!0;f.scrollTo({[e?"left":"top"]:i,behavior:"smooth"})}return!0}return n.setTransition(t),n.setTranslate(y),n.updateActiveIndex(a),n.updateSlidesClasses(),n.emit("beforeTransitionStart",t,r),n.transitionStart(i,_),0===t?n.transitionEnd(i,_):n.animating||(n.animating=!0,n.onSlideToWrapperTransitionEnd||(n.onSlideToWrapperTransitionEnd=function(e){n&&!n.destroyed&&e.target===this&&(n.wrapperEl.removeEventListener("transitionend",n.onSlideToWrapperTransitionEnd),n.onSlideToWrapperTransitionEnd=null,delete n.onSlideToWrapperTransitionEnd,n.transitionEnd(i,_))}),n.wrapperEl.addEventListener("transitionend",n.onSlideToWrapperTransitionEnd)),!0},slideToLoop:function(e,t,i,r){if(void 0===e&&(e=0),void 0===i&&(i=!0),"string"==typeof e){e=parseInt(e,10)}const s=this;if(s.destroyed)return;void 0===t&&(t=s.params.speed);const n=s.grid&&s.params.grid&&s.params.grid.rows>1;let a=e;if(s.params.loop)if(s.virtual&&s.params.virtual.enabled)a+=s.virtual.slidesBefore;else{let e;if(n){const t=a*s.params.grid.rows;e=s.slides.filter((e=>1*e.getAttribute("data-swiper-slide-index")===t))[0].column}else e=s.getSlideIndexByData(a);const t=n?Math.ceil(s.slides.length/s.params.grid.rows):s.slides.length,{centeredSlides:i}=s.params;let o=s.params.slidesPerView;"auto"===o?o=s.slidesPerViewDynamic():(o=Math.ceil(parseFloat(s.params.slidesPerView,10)),i&&o%2==0&&(o+=1));let l=t-e<o;if(i&&(l=l||e<Math.ceil(o/2)),r&&i&&"auto"!==s.params.slidesPerView&&!n&&(l=!1),l){const r=i?e<s.activeIndex?"prev":"next":e-s.activeIndex-1<s.params.slidesPerView?"next":"prev";s.loopFix({direction:r,slideTo:!0,activeSlideIndex:"next"===r?e+1:e-t+1,slideRealIndex:"next"===r?s.realIndex:void 0})}if(n){const e=a*s.params.grid.rows;a=s.slides.filter((t=>1*t.getAttribute("data-swiper-slide-index")===e))[0].column}else a=s.getSlideIndexByData(a)}return requestAnimationFrame((()=>{s.slideTo(a,t,i,r)})),s},slideNext:function(e,t,i){void 0===t&&(t=!0);const r=this,{enabled:s,params:n,animating:a}=r;if(!s||r.destroyed)return r;void 0===e&&(e=r.params.speed);let o=n.slidesPerGroup;"auto"===n.slidesPerView&&1===n.slidesPerGroup&&n.slidesPerGroupAuto&&(o=Math.max(r.slidesPerViewDynamic("current",!0),1));const l=r.activeIndex<n.slidesPerGroupSkip?1:o,d=r.virtual&&n.virtual.enabled;if(n.loop){if(a&&!d&&n.loopPreventsSliding)return!1;if(r.loopFix({direction:"next"}),r._clientLeft=r.wrapperEl.clientLeft,r.activeIndex===r.slides.length-1&&n.cssMode)return requestAnimationFrame((()=>{r.slideTo(r.activeIndex+l,e,t,i)})),!0}return n.rewind&&r.isEnd?r.slideTo(0,e,t,i):r.slideTo(r.activeIndex+l,e,t,i)},slidePrev:function(e,t,i){void 0===t&&(t=!0);const r=this,{params:s,snapGrid:n,slidesGrid:a,rtlTranslate:o,enabled:l,animating:d}=r;if(!l||r.destroyed)return r;void 0===e&&(e=r.params.speed);const c=r.virtual&&s.virtual.enabled;if(s.loop){if(d&&!c&&s.loopPreventsSliding)return!1;r.loopFix({direction:"prev"}),r._clientLeft=r.wrapperEl.clientLeft}function u(e){return e<0?-Math.floor(Math.abs(e)):Math.floor(e)}const h=u(o?r.translate:-r.translate),p=n.map((e=>u(e)));let f=n[p.indexOf(h)-1];if(void 0===f&&s.cssMode){let e;n.forEach(((t,i)=>{h>=t&&(e=i)})),void 0!==e&&(f=n[e>0?e-1:e])}let g=0;if(void 0!==f&&(g=a.indexOf(f),g<0&&(g=r.activeIndex-1),"auto"===s.slidesPerView&&1===s.slidesPerGroup&&s.slidesPerGroupAuto&&(g=g-r.slidesPerViewDynamic("previous",!0)+1,g=Math.max(g,0))),s.rewind&&r.isBeginning){const s=r.params.virtual&&r.params.virtual.enabled&&r.virtual?r.virtual.slides.length-1:r.slides.length-1;return r.slideTo(s,e,t,i)}return s.loop&&0===r.activeIndex&&s.cssMode?(requestAnimationFrame((()=>{r.slideTo(g,e,t,i)})),!0):r.slideTo(g,e,t,i)},slideReset:function(e,t,i){void 0===t&&(t=!0);const r=this;if(!r.destroyed)return void 0===e&&(e=r.params.speed),r.slideTo(r.activeIndex,e,t,i)},slideToClosest:function(e,t,i,r){void 0===t&&(t=!0),void 0===r&&(r=.5);const s=this;if(s.destroyed)return;void 0===e&&(e=s.params.speed);let n=s.activeIndex;const a=Math.min(s.params.slidesPerGroupSkip,n),o=a+Math.floor((n-a)/s.params.slidesPerGroup),l=s.rtlTranslate?s.translate:-s.translate;if(l>=s.snapGrid[o]){const e=s.snapGrid[o];l-e>(s.snapGrid[o+1]-e)*r&&(n+=s.params.slidesPerGroup)}else{const e=s.snapGrid[o-1];l-e<=(s.snapGrid[o]-e)*r&&(n-=s.params.slidesPerGroup)}return n=Math.max(n,0),n=Math.min(n,s.slidesGrid.length-1),s.slideTo(n,e,t,i)},slideToClickedSlide:function(){const e=this;if(e.destroyed)return;const{params:t,slidesEl:i}=e,r="auto"===t.slidesPerView?e.slidesPerViewDynamic():t.slidesPerView;let s,n=e.clickedIndex;const a=e.isElement?"swiper-slide":`.${t.slideClass}`;if(t.loop){if(e.animating)return;s=parseInt(e.clickedSlide.getAttribute("data-swiper-slide-index"),10),t.centeredSlides?n<e.loopedSlides-r/2||n>e.slides.length-e.loopedSlides+r/2?(e.loopFix(),n=e.getSlideIndex(f(i,`${a}[data-swiper-slide-index="${s}"]`)[0]),o((()=>{e.slideTo(n)}))):e.slideTo(n):n>e.slides.length-r?(e.loopFix(),n=e.getSlideIndex(f(i,`${a}[data-swiper-slide-index="${s}"]`)[0]),o((()=>{e.slideTo(n)}))):e.slideTo(n)}else e.slideTo(n)}};var G={loopCreate:function(e){const t=this,{params:i,slidesEl:r}=t;if(!i.loop||t.virtual&&t.params.virtual.enabled)return;const s=()=>{f(r,`.${i.slideClass}, swiper-slide`).forEach(((e,t)=>{e.setAttribute("data-swiper-slide-index",t)}))},n=t.grid&&i.grid&&i.grid.rows>1,a=i.slidesPerGroup*(n?i.grid.rows:1),o=t.slides.length%a!=0,l=n&&t.slides.length%i.grid.rows!=0,d=e=>{for(let r=0;r<e;r+=1){const e=t.isElement?m("swiper-slide",[i.slideBlankClass]):m("div",[i.slideClass,i.slideBlankClass]);t.slidesEl.append(e)}};if(o){if(i.loopAddBlankSlides){d(a-t.slides.length%a),t.recalcSlides(),t.updateSlides()}else g("Swiper Loop Warning: The number of slides is not even to slidesPerGroup, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)");s()}else if(l){if(i.loopAddBlankSlides){d(i.grid.rows-t.slides.length%i.grid.rows),t.recalcSlides(),t.updateSlides()}else g("Swiper Loop Warning: The number of slides is not even to grid.rows, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)");s()}else s();t.loopFix({slideRealIndex:e,direction:i.centeredSlides?void 0:"next"})},loopFix:function(e){let{slideRealIndex:t,slideTo:i=!0,direction:r,setTranslate:s,activeSlideIndex:n,byController:a,byMousewheel:o}=void 0===e?{}:e;const l=this;if(!l.params.loop)return;l.emit("beforeLoopFix");const{slides:d,allowSlidePrev:c,allowSlideNext:u,slidesEl:h,params:p}=l,{centeredSlides:f}=p;if(l.allowSlidePrev=!0,l.allowSlideNext=!0,l.virtual&&p.virtual.enabled)return i&&(p.centeredSlides||0!==l.snapIndex?p.centeredSlides&&l.snapIndex<p.slidesPerView?l.slideTo(l.virtual.slides.length+l.snapIndex,0,!1,!0):l.snapIndex===l.snapGrid.length-1&&l.slideTo(l.virtual.slidesBefore,0,!1,!0):l.slideTo(l.virtual.slides.length,0,!1,!0)),l.allowSlidePrev=c,l.allowSlideNext=u,void l.emit("loopFix");let m=p.slidesPerView;"auto"===m?m=l.slidesPerViewDynamic():(m=Math.ceil(parseFloat(p.slidesPerView,10)),f&&m%2==0&&(m+=1));const v=p.slidesPerGroupAuto?m:p.slidesPerGroup;let y=v;y%v!=0&&(y+=v-y%v),y+=p.loopAdditionalSlides,l.loopedSlides=y;const _=l.grid&&p.grid&&p.grid.rows>1;d.length<m+y?g("Swiper Loop Warning: The number of slides is not enough for loop mode, it will be disabled and not function properly. You need to add more slides (or make duplicates) or lower the values of slidesPerView and slidesPerGroup parameters"):_&&"row"===p.grid.fill&&g("Swiper Loop Warning: Loop mode is not compatible with grid.fill = `row`");const b=[],w=[];let x=l.activeIndex;void 0===n?n=l.getSlideIndex(d.filter((e=>e.classList.contains(p.slideActiveClass)))[0]):x=n;const T="next"===r||!r,S="prev"===r||!r;let C=0,E=0;const M=_?Math.ceil(d.length/p.grid.rows):d.length,I=(_?d[n].column:n)+(f&&void 0===s?-m/2+.5:0);if(I<y){C=Math.max(y-I,v);for(let e=0;e<y-I;e+=1){const t=e-Math.floor(e/M)*M;if(_){const e=M-t-1;for(let t=d.length-1;t>=0;t-=1)d[t].column===e&&b.push(t)}else b.push(M-t-1)}}else if(I+m>M-y){E=Math.max(I-(M-2*y),v);for(let e=0;e<E;e+=1){const t=e-Math.floor(e/M)*M;_?d.forEach(((e,i)=>{e.column===t&&w.push(i)})):w.push(t)}}if(l.__preventObserver__=!0,requestAnimationFrame((()=>{l.__preventObserver__=!1})),S&&b.forEach((e=>{d[e].swiperLoopMoveDOM=!0,h.prepend(d[e]),d[e].swiperLoopMoveDOM=!1})),T&&w.forEach((e=>{d[e].swiperLoopMoveDOM=!0,h.append(d[e]),d[e].swiperLoopMoveDOM=!1})),l.recalcSlides(),"auto"===p.slidesPerView?l.updateSlides():_&&(b.length>0&&S||w.length>0&&T)&&l.slides.forEach(((e,t)=>{l.grid.updateSlide(t,e,l.slides)})),p.watchSlidesProgress&&l.updateSlidesOffset(),i)if(b.length>0&&S){if(void 0===t){const e=l.slidesGrid[x],t=l.slidesGrid[x+C]-e;o?l.setTranslate(l.translate-t):(l.slideTo(x+Math.ceil(C),0,!1,!0),s&&(l.touchEventsData.startTranslate=l.touchEventsData.startTranslate-t,l.touchEventsData.currentTranslate=l.touchEventsData.currentTranslate-t))}else if(s){const e=_?b.length/p.grid.rows:b.length;l.slideTo(l.activeIndex+e,0,!1,!0),l.touchEventsData.currentTranslate=l.translate}}else if(w.length>0&&T)if(void 0===t){const e=l.slidesGrid[x],t=l.slidesGrid[x-E]-e;o?l.setTranslate(l.translate-t):(l.slideTo(x-E,0,!1,!0),s&&(l.touchEventsData.startTranslate=l.touchEventsData.startTranslate-t,l.touchEventsData.currentTranslate=l.touchEventsData.currentTranslate-t))}else{const e=_?w.length/p.grid.rows:w.length;l.slideTo(l.activeIndex-e,0,!1,!0)}if(l.allowSlidePrev=c,l.allowSlideNext=u,l.controller&&l.controller.control&&!a){const e={slideRealIndex:t,direction:r,setTranslate:s,activeSlideIndex:n,byController:!0};Array.isArray(l.controller.control)?l.controller.control.forEach((t=>{!t.destroyed&&t.params.loop&&t.loopFix({...e,slideTo:t.params.slidesPerView===p.slidesPerView&&i})})):l.controller.control instanceof l.constructor&&l.controller.control.params.loop&&l.controller.control.loopFix({...e,slideTo:l.controller.control.params.slidesPerView===p.slidesPerView&&i})}l.emit("loopFix")},loopDestroy:function(){const e=this,{params:t,slidesEl:i}=e;if(!t.loop||e.virtual&&e.params.virtual.enabled)return;e.recalcSlides();const r=[];e.slides.forEach((e=>{const t=void 0===e.swiperSlideIndex?1*e.getAttribute("data-swiper-slide-index"):e.swiperSlideIndex;r[t]=e})),e.slides.forEach((e=>{e.removeAttribute("data-swiper-slide-index")})),r.forEach((e=>{i.append(e)})),e.recalcSlides(),e.slideTo(e.realIndex,0)}};function N(e,t,i){const r=a(),{params:s}=e,n=s.edgeSwipeDetection,o=s.edgeSwipeThreshold;return!n||!(i<=o||i>=r.innerWidth-o)||"prevent"===n&&(t.preventDefault(),!0)}function R(e){const t=this,i=r();let s=e;s.originalEvent&&(s=s.originalEvent);const n=t.touchEventsData;if("pointerdown"===s.type){if(null!==n.pointerId&&n.pointerId!==s.pointerId)return;n.pointerId=s.pointerId}else"touchstart"===s.type&&1===s.targetTouches.length&&(n.touchId=s.targetTouches[0].identifier);if("touchstart"===s.type)return void N(t,s,s.targetTouches[0].pageX);const{params:o,touches:d,enabled:c}=t;if(!c)return;if(!o.simulateTouch&&"mouse"===s.pointerType)return;if(t.animating&&o.preventInteractionOnTransition)return;!t.animating&&o.cssMode&&o.loop&&t.loopFix();let u=s.target;if("wrapper"===o.touchEventsTarget&&!t.wrapperEl.contains(u))return;if("which"in s&&3===s.which)return;if("button"in s&&s.button>0)return;if(n.isTouched&&n.isMoved)return;const h=!!o.noSwipingClass&&""!==o.noSwipingClass,p=s.composedPath?s.composedPath():s.path;h&&s.target&&s.target.shadowRoot&&p&&(u=p[0]);const f=o.noSwipingSelector?o.noSwipingSelector:`.${o.noSwipingClass}`,g=!(!s.target||!s.target.shadowRoot);if(o.noSwiping&&(g?function(e,t){return void 0===t&&(t=this),function t(i){if(!i||i===r()||i===a())return null;i.assignedSlot&&(i=i.assignedSlot);const s=i.closest(e);return s||i.getRootNode?s||t(i.getRootNode().host):null}(t)}(f,u):u.closest(f)))return void(t.allowClick=!0);if(o.swipeHandler&&!u.closest(o.swipeHandler))return;d.currentX=s.pageX,d.currentY=s.pageY;const m=d.currentX,v=d.currentY;if(!N(t,s,m))return;Object.assign(n,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),d.startX=m,d.startY=v,n.touchStartTime=l(),t.allowClick=!0,t.updateSize(),t.swipeDirection=void 0,o.threshold>0&&(n.allowThresholdMove=!1);let y=!0;u.matches(n.focusableElements)&&(y=!1,"SELECT"===u.nodeName&&(n.isTouched=!1)),i.activeElement&&i.activeElement.matches(n.focusableElements)&&i.activeElement!==u&&i.activeElement.blur();const _=y&&t.allowTouchMove&&o.touchStartPreventDefault;!o.touchStartForcePreventDefault&&!_||u.isContentEditable||s.preventDefault(),o.freeMode&&o.freeMode.enabled&&t.freeMode&&t.animating&&!o.cssMode&&t.freeMode.onTouchStart(),t.emit("touchStart",s)}function $(e){const t=r(),i=this,s=i.touchEventsData,{params:n,touches:a,rtlTranslate:o,enabled:d}=i;if(!d)return;if(!n.simulateTouch&&"mouse"===e.pointerType)return;let c,u=e;if(u.originalEvent&&(u=u.originalEvent),"pointermove"===u.type){if(null!==s.touchId)return;if(u.pointerId!==s.pointerId)return}if("touchmove"===u.type){if(c=[...u.changedTouches].filter((e=>e.identifier===s.touchId))[0],!c||c.identifier!==s.touchId)return}else c=u;if(!s.isTouched)return void(s.startMoving&&s.isScrolling&&i.emit("touchMoveOpposite",u));const h=c.pageX,p=c.pageY;if(u.preventedByNestedSwiper)return a.startX=h,void(a.startY=p);if(!i.allowTouchMove)return u.target.matches(s.focusableElements)||(i.allowClick=!1),void(s.isTouched&&(Object.assign(a,{startX:h,startY:p,currentX:h,currentY:p}),s.touchStartTime=l()));if(n.touchReleaseOnEdges&&!n.loop)if(i.isVertical()){if(p<a.startY&&i.translate<=i.maxTranslate()||p>a.startY&&i.translate>=i.minTranslate())return s.isTouched=!1,void(s.isMoved=!1)}else if(h<a.startX&&i.translate<=i.maxTranslate()||h>a.startX&&i.translate>=i.minTranslate())return;if(t.activeElement&&u.target===t.activeElement&&u.target.matches(s.focusableElements))return s.isMoved=!0,void(i.allowClick=!1);s.allowTouchCallbacks&&i.emit("touchMove",u),a.previousX=a.currentX,a.previousY=a.currentY,a.currentX=h,a.currentY=p;const f=a.currentX-a.startX,g=a.currentY-a.startY;if(i.params.threshold&&Math.sqrt(f**2+g**2)<i.params.threshold)return;if(void 0===s.isScrolling){let e;i.isHorizontal()&&a.currentY===a.startY||i.isVertical()&&a.currentX===a.startX?s.isScrolling=!1:f*f+g*g>=25&&(e=180*Math.atan2(Math.abs(g),Math.abs(f))/Math.PI,s.isScrolling=i.isHorizontal()?e>n.touchAngle:90-e>n.touchAngle)}if(s.isScrolling&&i.emit("touchMoveOpposite",u),void 0===s.startMoving&&(a.currentX===a.startX&&a.currentY===a.startY||(s.startMoving=!0)),s.isScrolling||"touchmove"===u.type&&s.preventTouchMoveFromPointerMove)return void(s.isTouched=!1);if(!s.startMoving)return;i.allowClick=!1,!n.cssMode&&u.cancelable&&u.preventDefault(),n.touchMoveStopPropagation&&!n.nested&&u.stopPropagation();let m=i.isHorizontal()?f:g,v=i.isHorizontal()?a.currentX-a.previousX:a.currentY-a.previousY;n.oneWayMovement&&(m=Math.abs(m)*(o?1:-1),v=Math.abs(v)*(o?1:-1)),a.diff=m,m*=n.touchRatio,o&&(m=-m,v=-v);const y=i.touchesDirection;i.swipeDirection=m>0?"prev":"next",i.touchesDirection=v>0?"prev":"next";const _=i.params.loop&&!n.cssMode,b="next"===i.touchesDirection&&i.allowSlideNext||"prev"===i.touchesDirection&&i.allowSlidePrev;if(!s.isMoved){if(_&&b&&i.loopFix({direction:i.swipeDirection}),s.startTranslate=i.getTranslate(),i.setTransition(0),i.animating){const e=new window.CustomEvent("transitionend",{bubbles:!0,cancelable:!0,detail:{bySwiperTouchMove:!0}});i.wrapperEl.dispatchEvent(e)}s.allowMomentumBounce=!1,!n.grabCursor||!0!==i.allowSlideNext&&!0!==i.allowSlidePrev||i.setGrabCursor(!0),i.emit("sliderFirstMove",u)}if((new Date).getTime(),s.isMoved&&s.allowThresholdMove&&y!==i.touchesDirection&&_&&b&&Math.abs(m)>=1)return Object.assign(a,{startX:h,startY:p,currentX:h,currentY:p,startTranslate:s.currentTranslate}),s.loopSwapReset=!0,void(s.startTranslate=s.currentTranslate);i.emit("sliderMove",u),s.isMoved=!0,s.currentTranslate=m+s.startTranslate;let w=!0,x=n.resistanceRatio;if(n.touchReleaseOnEdges&&(x=0),m>0?(_&&b&&s.allowThresholdMove&&s.currentTranslate>(n.centeredSlides?i.minTranslate()-i.slidesSizesGrid[i.activeIndex+1]:i.minTranslate())&&i.loopFix({direction:"prev",setTranslate:!0,activeSlideIndex:0}),s.currentTranslate>i.minTranslate()&&(w=!1,n.resistance&&(s.currentTranslate=i.minTranslate()-1+(-i.minTranslate()+s.startTranslate+m)**x))):m<0&&(_&&b&&s.allowThresholdMove&&s.currentTranslate<(n.centeredSlides?i.maxTranslate()+i.slidesSizesGrid[i.slidesSizesGrid.length-1]:i.maxTranslate())&&i.loopFix({direction:"next",setTranslate:!0,activeSlideIndex:i.slides.length-("auto"===n.slidesPerView?i.slidesPerViewDynamic():Math.ceil(parseFloat(n.slidesPerView,10)))}),s.currentTranslate<i.maxTranslate()&&(w=!1,n.resistance&&(s.currentTranslate=i.maxTranslate()+1-(i.maxTranslate()-s.startTranslate-m)**x))),w&&(u.preventedByNestedSwiper=!0),!i.allowSlideNext&&"next"===i.swipeDirection&&s.currentTranslate<s.startTranslate&&(s.currentTranslate=s.startTranslate),!i.allowSlidePrev&&"prev"===i.swipeDirection&&s.currentTranslate>s.startTranslate&&(s.currentTranslate=s.startTranslate),i.allowSlidePrev||i.allowSlideNext||(s.currentTranslate=s.startTranslate),n.threshold>0){if(!(Math.abs(m)>n.threshold||s.allowThresholdMove))return void(s.currentTranslate=s.startTranslate);if(!s.allowThresholdMove)return s.allowThresholdMove=!0,a.startX=a.currentX,a.startY=a.currentY,s.currentTranslate=s.startTranslate,void(a.diff=i.isHorizontal()?a.currentX-a.startX:a.currentY-a.startY)}n.followFinger&&!n.cssMode&&((n.freeMode&&n.freeMode.enabled&&i.freeMode||n.watchSlidesProgress)&&(i.updateActiveIndex(),i.updateSlidesClasses()),n.freeMode&&n.freeMode.enabled&&i.freeMode&&i.freeMode.onTouchMove(),i.updateProgress(s.currentTranslate),i.setTranslate(s.currentTranslate))}function q(e){const t=this,i=t.touchEventsData;let r,s=e;s.originalEvent&&(s=s.originalEvent);if("touchend"===s.type||"touchcancel"===s.type){if(r=[...s.changedTouches].filter((e=>e.identifier===i.touchId))[0],!r||r.identifier!==i.touchId)return}else{if(null!==i.touchId)return;if(s.pointerId!==i.pointerId)return;r=s}if(["pointercancel","pointerout","pointerleave","contextmenu"].includes(s.type)){if(!(["pointercancel","contextmenu"].includes(s.type)&&(t.browser.isSafari||t.browser.isWebView)))return}i.pointerId=null,i.touchId=null;const{params:n,touches:a,rtlTranslate:d,slidesGrid:c,enabled:u}=t;if(!u)return;if(!n.simulateTouch&&"mouse"===s.pointerType)return;if(i.allowTouchCallbacks&&t.emit("touchEnd",s),i.allowTouchCallbacks=!1,!i.isTouched)return i.isMoved&&n.grabCursor&&t.setGrabCursor(!1),i.isMoved=!1,void(i.startMoving=!1);n.grabCursor&&i.isMoved&&i.isTouched&&(!0===t.allowSlideNext||!0===t.allowSlidePrev)&&t.setGrabCursor(!1);const h=l(),p=h-i.touchStartTime;if(t.allowClick){const e=s.path||s.composedPath&&s.composedPath();t.updateClickedSlide(e&&e[0]||s.target,e),t.emit("tap click",s),p<300&&h-i.lastClickTime<300&&t.emit("doubleTap doubleClick",s)}if(i.lastClickTime=l(),o((()=>{t.destroyed||(t.allowClick=!0)})),!i.isTouched||!i.isMoved||!t.swipeDirection||0===a.diff&&!i.loopSwapReset||i.currentTranslate===i.startTranslate&&!i.loopSwapReset)return i.isTouched=!1,i.isMoved=!1,void(i.startMoving=!1);let f;if(i.isTouched=!1,i.isMoved=!1,i.startMoving=!1,f=n.followFinger?d?t.translate:-t.translate:-i.currentTranslate,n.cssMode)return;if(n.freeMode&&n.freeMode.enabled)return void t.freeMode.onTouchEnd({currentPos:f});const g=f>=-t.maxTranslate()&&!t.params.loop;let m=0,v=t.slidesSizesGrid[0];for(let e=0;e<c.length;e+=e<n.slidesPerGroupSkip?1:n.slidesPerGroup){const t=e<n.slidesPerGroupSkip-1?1:n.slidesPerGroup;void 0!==c[e+t]?(g||f>=c[e]&&f<c[e+t])&&(m=e,v=c[e+t]-c[e]):(g||f>=c[e])&&(m=e,v=c[c.length-1]-c[c.length-2])}let y=null,_=null;n.rewind&&(t.isBeginning?_=n.virtual&&n.virtual.enabled&&t.virtual?t.virtual.slides.length-1:t.slides.length-1:t.isEnd&&(y=0));const b=(f-c[m])/v,w=m<n.slidesPerGroupSkip-1?1:n.slidesPerGroup;if(p>n.longSwipesMs){if(!n.longSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&(b>=n.longSwipesRatio?t.slideTo(n.rewind&&t.isEnd?y:m+w):t.slideTo(m)),"prev"===t.swipeDirection&&(b>1-n.longSwipesRatio?t.slideTo(m+w):null!==_&&b<0&&Math.abs(b)>n.longSwipesRatio?t.slideTo(_):t.slideTo(m))}else{if(!n.shortSwipes)return void t.slideTo(t.activeIndex);t.navigation&&(s.target===t.navigation.nextEl||s.target===t.navigation.prevEl)?s.target===t.navigation.nextEl?t.slideTo(m+w):t.slideTo(m):("next"===t.swipeDirection&&t.slideTo(null!==y?y:m+w),"prev"===t.swipeDirection&&t.slideTo(null!==_?_:m))}}function H(){const e=this,{params:t,el:i}=e;if(i&&0===i.offsetWidth)return;t.breakpoints&&e.setBreakpoint();const{allowSlideNext:r,allowSlidePrev:s,snapGrid:n}=e,a=e.virtual&&e.params.virtual.enabled;e.allowSlideNext=!0,e.allowSlidePrev=!0,e.updateSize(),e.updateSlides(),e.updateSlidesClasses();const o=a&&t.loop;!("auto"===t.slidesPerView||t.slidesPerView>1)||!e.isEnd||e.isBeginning||e.params.centeredSlides||o?e.params.loop&&!a?e.slideToLoop(e.realIndex,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0):e.slideTo(e.slides.length-1,0,!1,!0),e.autoplay&&e.autoplay.running&&e.autoplay.paused&&(clearTimeout(e.autoplay.resizeTimeout),e.autoplay.resizeTimeout=setTimeout((()=>{e.autoplay&&e.autoplay.running&&e.autoplay.paused&&e.autoplay.resume()}),500)),e.allowSlidePrev=s,e.allowSlideNext=r,e.params.watchOverflow&&n!==e.snapGrid&&e.checkOverflow()}function V(e){const t=this;t.enabled&&(t.allowClick||(t.params.preventClicks&&e.preventDefault(),t.params.preventClicksPropagation&&t.animating&&(e.stopPropagation(),e.stopImmediatePropagation())))}function X(){const e=this,{wrapperEl:t,rtlTranslate:i,enabled:r}=e;if(!r)return;let s;e.previousTranslate=e.translate,e.isHorizontal()?e.translate=-t.scrollLeft:e.translate=-t.scrollTop,0===e.translate&&(e.translate=0),e.updateActiveIndex(),e.updateSlidesClasses();const n=e.maxTranslate()-e.minTranslate();s=0===n?0:(e.translate-e.minTranslate())/n,s!==e.progress&&e.updateProgress(i?-e.translate:e.translate),e.emit("setTranslate",e.translate,!1)}function j(e){const t=this;A(t,e.target),t.params.cssMode||"auto"!==t.params.slidesPerView&&!t.params.autoHeight||t.update()}function Y(){const e=this;e.documentTouchHandlerProceeded||(e.documentTouchHandlerProceeded=!0,e.params.touchReleaseOnEdges&&(e.el.style.touchAction="auto"))}const W=(e,t)=>{const i=r(),{params:s,el:n,wrapperEl:a,device:o}=e,l=!!s.nested,d="on"===t?"addEventListener":"removeEventListener",c=t;n&&"string"!=typeof n&&(i[d]("touchstart",e.onDocumentTouchStart,{passive:!1,capture:l}),n[d]("touchstart",e.onTouchStart,{passive:!1}),n[d]("pointerdown",e.onTouchStart,{passive:!1}),i[d]("touchmove",e.onTouchMove,{passive:!1,capture:l}),i[d]("pointermove",e.onTouchMove,{passive:!1,capture:l}),i[d]("touchend",e.onTouchEnd,{passive:!0}),i[d]("pointerup",e.onTouchEnd,{passive:!0}),i[d]("pointercancel",e.onTouchEnd,{passive:!0}),i[d]("touchcancel",e.onTouchEnd,{passive:!0}),i[d]("pointerout",e.onTouchEnd,{passive:!0}),i[d]("pointerleave",e.onTouchEnd,{passive:!0}),i[d]("contextmenu",e.onTouchEnd,{passive:!0}),(s.preventClicks||s.preventClicksPropagation)&&n[d]("click",e.onClick,!0),s.cssMode&&a[d]("scroll",e.onScroll),s.updateOnWindowResize?e[c](o.ios||o.android?"resize orientationchange observerUpdate":"resize observerUpdate",H,!0):e[c]("observerUpdate",H,!0),n[d]("load",e.onLoad,{capture:!0}))};const U=(e,t)=>e.grid&&t.grid&&t.grid.rows>1;var K={init:!0,direction:"horizontal",oneWayMovement:!1,swiperElementNodeName:"SWIPER-CONTAINER",touchEventsTarget:"wrapper",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,resizeObserver:!0,nested:!1,createElements:!1,eventsPrefix:"swiper",enabled:!0,focusableElements:"input, select, option, textarea, button, video, label",width:null,height:null,preventInteractionOnTransition:!1,userAgent:null,url:null,edgeSwipeDetection:!1,edgeSwipeThreshold:20,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,breakpointsBase:"window",spaceBetween:0,slidesPerView:1,slidesPerGroup:1,slidesPerGroupSkip:0,slidesPerGroupAuto:!1,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!0,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:5,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,loop:!1,loopAddBlankSlides:!0,loopAdditionalSlides:0,loopPreventsSliding:!0,rewind:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,maxBackfaceHiddenSlides:10,containerModifierClass:"swiper-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-blank",slideActiveClass:"swiper-slide-active",slideVisibleClass:"swiper-slide-visible",slideFullyVisibleClass:"swiper-slide-fully-visible",slideNextClass:"swiper-slide-next",slidePrevClass:"swiper-slide-prev",wrapperClass:"swiper-wrapper",lazyPreloaderClass:"swiper-lazy-preloader",lazyPreloadPrevNext:0,runCallbacksOnInit:!0,_emitClasses:!1};function Q(e,t){return function(i){void 0===i&&(i={});const r=Object.keys(i)[0],s=i[r];"object"==typeof s&&null!==s?(!0===e[r]&&(e[r]={enabled:!0}),"navigation"===r&&e[r]&&e[r].enabled&&!e[r].prevEl&&!e[r].nextEl&&(e[r].auto=!0),["pagination","scrollbar"].indexOf(r)>=0&&e[r]&&e[r].enabled&&!e[r].el&&(e[r].auto=!0),r in e&&"enabled"in s?("object"!=typeof e[r]||"enabled"in e[r]||(e[r].enabled=!0),e[r]||(e[r]={enabled:!1}),u(t,i)):u(t,i)):u(t,i)}}const Z={eventsEmitter:I,update:D,translate:z,transition:{setTransition:function(e,t){const i=this;i.params.cssMode||(i.wrapperEl.style.transitionDuration=`${e}ms`,i.wrapperEl.style.transitionDelay=0===e?"0ms":""),i.emit("setTransition",e,t)},transitionStart:function(e,t){void 0===e&&(e=!0);const i=this,{params:r}=i;r.cssMode||(r.autoHeight&&i.updateAutoHeight(),B({swiper:i,runCallbacks:e,direction:t,step:"Start"}))},transitionEnd:function(e,t){void 0===e&&(e=!0);const i=this,{params:r}=i;i.animating=!1,r.cssMode||(i.setTransition(0),B({swiper:i,runCallbacks:e,direction:t,step:"End"}))}},slide:F,loop:G,grabCursor:{setGrabCursor:function(e){const t=this;if(!t.params.simulateTouch||t.params.watchOverflow&&t.isLocked||t.params.cssMode)return;const i="container"===t.params.touchEventsTarget?t.el:t.wrapperEl;t.isElement&&(t.__preventObserver__=!0),i.style.cursor="move",i.style.cursor=e?"grabbing":"grab",t.isElement&&requestAnimationFrame((()=>{t.__preventObserver__=!1}))},unsetGrabCursor:function(){const e=this;e.params.watchOverflow&&e.isLocked||e.params.cssMode||(e.isElement&&(e.__preventObserver__=!0),e["container"===e.params.touchEventsTarget?"el":"wrapperEl"].style.cursor="",e.isElement&&requestAnimationFrame((()=>{e.__preventObserver__=!1})))}},events:{attachEvents:function(){const e=this,{params:t}=e;e.onTouchStart=R.bind(e),e.onTouchMove=$.bind(e),e.onTouchEnd=q.bind(e),e.onDocumentTouchStart=Y.bind(e),t.cssMode&&(e.onScroll=X.bind(e)),e.onClick=V.bind(e),e.onLoad=j.bind(e),W(e,"on")},detachEvents:function(){W(this,"off")}},breakpoints:{setBreakpoint:function(){const e=this,{realIndex:t,initialized:i,params:r,el:s}=e,n=r.breakpoints;if(!n||n&&0===Object.keys(n).length)return;const a=e.getBreakpoint(n,e.params.breakpointsBase,e.el);if(!a||e.currentBreakpoint===a)return;const o=(a in n?n[a]:void 0)||e.originalParams,l=U(e,r),d=U(e,o),c=e.params.grabCursor,h=o.grabCursor,p=r.enabled;l&&!d?(s.classList.remove(`${r.containerModifierClass}grid`,`${r.containerModifierClass}grid-column`),e.emitContainerClasses()):!l&&d&&(s.classList.add(`${r.containerModifierClass}grid`),(o.grid.fill&&"column"===o.grid.fill||!o.grid.fill&&"column"===r.grid.fill)&&s.classList.add(`${r.containerModifierClass}grid-column`),e.emitContainerClasses()),c&&!h?e.unsetGrabCursor():!c&&h&&e.setGrabCursor(),["navigation","pagination","scrollbar"].forEach((t=>{if(void 0===o[t])return;const i=r[t]&&r[t].enabled,s=o[t]&&o[t].enabled;i&&!s&&e[t].disable(),!i&&s&&e[t].enable()}));const f=o.direction&&o.direction!==r.direction,g=r.loop&&(o.slidesPerView!==r.slidesPerView||f),m=r.loop;f&&i&&e.changeDirection(),u(e.params,o);const v=e.params.enabled,y=e.params.loop;Object.assign(e,{allowTouchMove:e.params.allowTouchMove,allowSlideNext:e.params.allowSlideNext,allowSlidePrev:e.params.allowSlidePrev}),p&&!v?e.disable():!p&&v&&e.enable(),e.currentBreakpoint=a,e.emit("_beforeBreakpoint",o),i&&(g?(e.loopDestroy(),e.loopCreate(t),e.updateSlides()):!m&&y?(e.loopCreate(t),e.updateSlides()):m&&!y&&e.loopDestroy()),e.emit("breakpoint",o)},getBreakpoint:function(e,t,i){if(void 0===t&&(t="window"),!e||"container"===t&&!i)return;let r=!1;const s=a(),n="window"===t?s.innerHeight:i.clientHeight,o=Object.keys(e).map((e=>{if("string"==typeof e&&0===e.indexOf("@")){const t=parseFloat(e.substr(1));return{value:n*t,point:e}}return{value:e,point:e}}));o.sort(((e,t)=>parseInt(e.value,10)-parseInt(t.value,10)));for(let e=0;e<o.length;e+=1){const{point:n,value:a}=o[e];"window"===t?s.matchMedia(`(min-width: ${a}px)`).matches&&(r=n):a<=i.clientWidth&&(r=n)}return r||"max"}},checkOverflow:{checkOverflow:function(){const e=this,{isLocked:t,params:i}=e,{slidesOffsetBefore:r}=i;if(r){const t=e.slides.length-1,i=e.slidesGrid[t]+e.slidesSizesGrid[t]+2*r;e.isLocked=e.size>i}else e.isLocked=1===e.snapGrid.length;!0===i.allowSlideNext&&(e.allowSlideNext=!e.isLocked),!0===i.allowSlidePrev&&(e.allowSlidePrev=!e.isLocked),t&&t!==e.isLocked&&(e.isEnd=!1),t!==e.isLocked&&e.emit(e.isLocked?"lock":"unlock")}},classes:{addClasses:function(){const e=this,{classNames:t,params:i,rtl:r,el:s,device:n}=e,a=function(e,t){const i=[];return e.forEach((e=>{"object"==typeof e?Object.keys(e).forEach((r=>{e[r]&&i.push(t+r)})):"string"==typeof e&&i.push(t+e)})),i}(["initialized",i.direction,{"free-mode":e.params.freeMode&&i.freeMode.enabled},{autoheight:i.autoHeight},{rtl:r},{grid:i.grid&&i.grid.rows>1},{"grid-column":i.grid&&i.grid.rows>1&&"column"===i.grid.fill},{android:n.android},{ios:n.ios},{"css-mode":i.cssMode},{centered:i.cssMode&&i.centeredSlides},{"watch-progress":i.watchSlidesProgress}],i.containerModifierClass);t.push(...a),s.classList.add(...t),e.emitContainerClasses()},removeClasses:function(){const{el:e,classNames:t}=this;e&&"string"!=typeof e&&(e.classList.remove(...t),this.emitContainerClasses())}}},J={};class ee{constructor(){let e,t;for(var i=arguments.length,s=new Array(i),n=0;n<i;n++)s[n]=arguments[n];1===s.length&&s[0].constructor&&"Object"===Object.prototype.toString.call(s[0]).slice(8,-1)?t=s[0]:[e,t]=s,t||(t={}),t=u({},t),e&&!t.el&&(t.el=e);const a=r();if(t.el&&"string"==typeof t.el&&a.querySelectorAll(t.el).length>1){const e=[];return a.querySelectorAll(t.el).forEach((i=>{const r=u({},t,{el:i});e.push(new ee(r))})),e}const o=this;o.__swiper__=!0,o.support=C(),o.device=E({userAgent:t.userAgent}),o.browser=M(),o.eventsListeners={},o.eventsAnyListeners=[],o.modules=[...o.__modules__],t.modules&&Array.isArray(t.modules)&&o.modules.push(...t.modules);const l={};o.modules.forEach((e=>{e({params:t,swiper:o,extendParams:Q(t,l),on:o.on.bind(o),once:o.once.bind(o),off:o.off.bind(o),emit:o.emit.bind(o)})}));const d=u({},K,l);return o.params=u({},d,J,t),o.originalParams=u({},o.params),o.passedParams=u({},t),o.params&&o.params.on&&Object.keys(o.params.on).forEach((e=>{o.on(e,o.params.on[e])})),o.params&&o.params.onAny&&o.onAny(o.params.onAny),Object.assign(o,{enabled:o.params.enabled,el:e,classNames:[],slides:[],slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:()=>"horizontal"===o.params.direction,isVertical:()=>"vertical"===o.params.direction,activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,cssOverflowAdjustment(){return Math.trunc(this.translate/2**23)*2**23},allowSlideNext:o.params.allowSlideNext,allowSlidePrev:o.params.allowSlidePrev,touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,focusableElements:o.params.focusableElements,lastClickTime:0,clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,startMoving:void 0,pointerId:null,touchId:null},allowClick:!0,allowTouchMove:o.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),o.emit("_swiper"),o.params.init&&o.init(),o}getDirectionLabel(e){return this.isHorizontal()?e:{width:"height","margin-top":"margin-left","margin-bottom ":"margin-right","margin-left":"margin-top","margin-right":"margin-bottom","padding-left":"padding-top","padding-right":"padding-bottom",marginRight:"marginBottom"}[e]}getSlideIndex(e){const{slidesEl:t,params:i}=this,r=y(f(t,`.${i.slideClass}, swiper-slide`)[0]);return y(e)-r}getSlideIndexByData(e){return this.getSlideIndex(this.slides.filter((t=>1*t.getAttribute("data-swiper-slide-index")===e))[0])}recalcSlides(){const{slidesEl:e,params:t}=this;this.slides=f(e,`.${t.slideClass}, swiper-slide`)}enable(){const e=this;e.enabled||(e.enabled=!0,e.params.grabCursor&&e.setGrabCursor(),e.emit("enable"))}disable(){const e=this;e.enabled&&(e.enabled=!1,e.params.grabCursor&&e.unsetGrabCursor(),e.emit("disable"))}setProgress(e,t){const i=this;e=Math.min(Math.max(e,0),1);const r=i.minTranslate(),s=(i.maxTranslate()-r)*e+r;i.translateTo(s,void 0===t?0:t),i.updateActiveIndex(),i.updateSlidesClasses()}emitContainerClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const t=e.el.className.split(" ").filter((t=>0===t.indexOf("swiper")||0===t.indexOf(e.params.containerModifierClass)));e.emit("_containerClasses",t.join(" "))}getSlideClasses(e){const t=this;return t.destroyed?"":e.className.split(" ").filter((e=>0===e.indexOf("swiper-slide")||0===e.indexOf(t.params.slideClass))).join(" ")}emitSlidesClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const t=[];e.slides.forEach((i=>{const r=e.getSlideClasses(i);t.push({slideEl:i,classNames:r}),e.emit("_slideClass",i,r)})),e.emit("_slideClasses",t)}slidesPerViewDynamic(e,t){void 0===e&&(e="current"),void 0===t&&(t=!1);const{params:i,slides:r,slidesGrid:s,slidesSizesGrid:n,size:a,activeIndex:o}=this;let l=1;if("number"==typeof i.slidesPerView)return i.slidesPerView;if(i.centeredSlides){let e,t=r[o]?Math.ceil(r[o].swiperSlideSize):0;for(let i=o+1;i<r.length;i+=1)r[i]&&!e&&(t+=Math.ceil(r[i].swiperSlideSize),l+=1,t>a&&(e=!0));for(let i=o-1;i>=0;i-=1)r[i]&&!e&&(t+=r[i].swiperSlideSize,l+=1,t>a&&(e=!0))}else if("current"===e)for(let e=o+1;e<r.length;e+=1){(t?s[e]+n[e]-s[o]<a:s[e]-s[o]<a)&&(l+=1)}else for(let e=o-1;e>=0;e-=1){s[o]-s[e]<a&&(l+=1)}return l}update(){const e=this;if(!e||e.destroyed)return;const{snapGrid:t,params:i}=e;function r(){const t=e.rtlTranslate?-1*e.translate:e.translate,i=Math.min(Math.max(t,e.maxTranslate()),e.minTranslate());e.setTranslate(i),e.updateActiveIndex(),e.updateSlidesClasses()}let s;if(i.breakpoints&&e.setBreakpoint(),[...e.el.querySelectorAll('[loading="lazy"]')].forEach((t=>{t.complete&&A(e,t)})),e.updateSize(),e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),i.freeMode&&i.freeMode.enabled&&!i.cssMode)r(),i.autoHeight&&e.updateAutoHeight();else{if(("auto"===i.slidesPerView||i.slidesPerView>1)&&e.isEnd&&!i.centeredSlides){const t=e.virtual&&i.virtual.enabled?e.virtual.slides:e.slides;s=e.slideTo(t.length-1,0,!1,!0)}else s=e.slideTo(e.activeIndex,0,!1,!0);s||r()}i.watchOverflow&&t!==e.snapGrid&&e.checkOverflow(),e.emit("update")}changeDirection(e,t){void 0===t&&(t=!0);const i=this,r=i.params.direction;return e||(e="horizontal"===r?"vertical":"horizontal"),e===r||"horizontal"!==e&&"vertical"!==e||(i.el.classList.remove(`${i.params.containerModifierClass}${r}`),i.el.classList.add(`${i.params.containerModifierClass}${e}`),i.emitContainerClasses(),i.params.direction=e,i.slides.forEach((t=>{"vertical"===e?t.style.width="":t.style.height=""})),i.emit("changeDirection"),t&&i.update()),i}changeLanguageDirection(e){const t=this;t.rtl&&"rtl"===e||!t.rtl&&"ltr"===e||(t.rtl="rtl"===e,t.rtlTranslate="horizontal"===t.params.direction&&t.rtl,t.rtl?(t.el.classList.add(`${t.params.containerModifierClass}rtl`),t.el.dir="rtl"):(t.el.classList.remove(`${t.params.containerModifierClass}rtl`),t.el.dir="ltr"),t.update())}mount(e){const t=this;if(t.mounted)return!0;let i=e||t.params.el;if("string"==typeof i&&(i=document.querySelector(i)),!i)return!1;i.swiper=t,i.parentNode&&i.parentNode.host&&i.parentNode.host.nodeName===t.params.swiperElementNodeName.toUpperCase()&&(t.isElement=!0);const r=()=>`.${(t.params.wrapperClass||"").trim().split(" ").join(".")}`;let s=(()=>{if(i&&i.shadowRoot&&i.shadowRoot.querySelector){return i.shadowRoot.querySelector(r())}return f(i,r())[0]})();return!s&&t.params.createElements&&(s=m("div",t.params.wrapperClass),i.append(s),f(i,`.${t.params.slideClass}`).forEach((e=>{s.append(e)}))),Object.assign(t,{el:i,wrapperEl:s,slidesEl:t.isElement&&!i.parentNode.host.slideSlots?i.parentNode.host:s,hostEl:t.isElement?i.parentNode.host:i,mounted:!0,rtl:"rtl"===i.dir.toLowerCase()||"rtl"===v(i,"direction"),rtlTranslate:"horizontal"===t.params.direction&&("rtl"===i.dir.toLowerCase()||"rtl"===v(i,"direction")),wrongRTL:"-webkit-box"===v(s,"display")}),!0}init(e){const t=this;if(t.initialized)return t;if(!1===t.mount(e))return t;t.emit("beforeInit"),t.params.breakpoints&&t.setBreakpoint(),t.addClasses(),t.updateSize(),t.updateSlides(),t.params.watchOverflow&&t.checkOverflow(),t.params.grabCursor&&t.enabled&&t.setGrabCursor(),t.params.loop&&t.virtual&&t.params.virtual.enabled?t.slideTo(t.params.initialSlide+t.virtual.slidesBefore,0,t.params.runCallbacksOnInit,!1,!0):t.slideTo(t.params.initialSlide,0,t.params.runCallbacksOnInit,!1,!0),t.params.loop&&t.loopCreate(),t.attachEvents();const i=[...t.el.querySelectorAll('[loading="lazy"]')];return t.isElement&&i.push(...t.hostEl.querySelectorAll('[loading="lazy"]')),i.forEach((e=>{e.complete?A(t,e):e.addEventListener("load",(e=>{A(t,e.target)}))})),L(t),t.initialized=!0,L(t),t.emit("init"),t.emit("afterInit"),t}destroy(e,t){void 0===e&&(e=!0),void 0===t&&(t=!0);const i=this,{params:r,el:s,wrapperEl:n,slides:a}=i;return void 0===i.params||i.destroyed||(i.emit("beforeDestroy"),i.initialized=!1,i.detachEvents(),r.loop&&i.loopDestroy(),t&&(i.removeClasses(),s&&"string"!=typeof s&&s.removeAttribute("style"),n&&n.removeAttribute("style"),a&&a.length&&a.forEach((e=>{e.classList.remove(r.slideVisibleClass,r.slideFullyVisibleClass,r.slideActiveClass,r.slideNextClass,r.slidePrevClass),e.removeAttribute("style"),e.removeAttribute("data-swiper-slide-index")}))),i.emit("destroy"),Object.keys(i.eventsListeners).forEach((e=>{i.off(e)})),!1!==e&&(i.el&&"string"!=typeof i.el&&(i.el.swiper=null),function(e){const t=e;Object.keys(t).forEach((e=>{try{t[e]=null}catch(e){}try{delete t[e]}catch(e){}}))}(i)),i.destroyed=!0),null}static extendDefaults(e){u(J,e)}static get extendedDefaults(){return J}static get defaults(){return K}static installModule(e){ee.prototype.__modules__||(ee.prototype.__modules__=[]);const t=ee.prototype.__modules__;"function"==typeof e&&t.indexOf(e)<0&&t.push(e)}static use(e){return Array.isArray(e)?(e.forEach((e=>ee.installModule(e))),ee):(ee.installModule(e),ee)}}function te(e,t,i,r){return e.params.createElements&&Object.keys(r).forEach((s=>{if(!i[s]&&!0===i.auto){let n=f(e.el,`.${r[s]}`)[0];n||(n=m("div",r[s]),n.className=r[s],e.el.append(n)),i[s]=n,t[s]=n}})),i}function ie(e){let{swiper:t,extendParams:i,on:r,emit:s}=e;function n(e){let i;return e&&"string"==typeof e&&t.isElement&&(i=t.el.querySelector(e),i)?i:(e&&("string"==typeof e&&(i=[...document.querySelectorAll(e)]),t.params.uniqueNavElements&&"string"==typeof e&&i&&i.length>1&&1===t.el.querySelectorAll(e).length?i=t.el.querySelector(e):i&&1===i.length&&(i=i[0])),e&&!i?e:i)}function a(e,i){const r=t.params.navigation;(e=w(e)).forEach((e=>{e&&(e.classList[i?"add":"remove"](...r.disabledClass.split(" ")),"BUTTON"===e.tagName&&(e.disabled=i),t.params.watchOverflow&&t.enabled&&e.classList[t.isLocked?"add":"remove"](r.lockClass))}))}function o(){const{nextEl:e,prevEl:i}=t.navigation;if(t.params.loop)return a(i,!1),void a(e,!1);a(i,t.isBeginning&&!t.params.rewind),a(e,t.isEnd&&!t.params.rewind)}function l(e){e.preventDefault(),(!t.isBeginning||t.params.loop||t.params.rewind)&&(t.slidePrev(),s("navigationPrev"))}function d(e){e.preventDefault(),(!t.isEnd||t.params.loop||t.params.rewind)&&(t.slideNext(),s("navigationNext"))}function c(){const e=t.params.navigation;if(t.params.navigation=te(t,t.originalParams.navigation,t.params.navigation,{nextEl:"swiper-button-next",prevEl:"swiper-button-prev"}),!e.nextEl&&!e.prevEl)return;let i=n(e.nextEl),r=n(e.prevEl);Object.assign(t.navigation,{nextEl:i,prevEl:r}),i=w(i),r=w(r);const s=(i,r)=>{i&&i.addEventListener("click","next"===r?d:l),!t.enabled&&i&&i.classList.add(...e.lockClass.split(" "))};i.forEach((e=>s(e,"next"))),r.forEach((e=>s(e,"prev")))}function u(){let{nextEl:e,prevEl:i}=t.navigation;e=w(e),i=w(i);const r=(e,i)=>{e.removeEventListener("click","next"===i?d:l),e.classList.remove(...t.params.navigation.disabledClass.split(" "))};e.forEach((e=>r(e,"next"))),i.forEach((e=>r(e,"prev")))}i({navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock",navigationDisabledClass:"swiper-navigation-disabled"}}),t.navigation={nextEl:null,prevEl:null},r("init",(()=>{!1===t.params.navigation.enabled?h():(c(),o())})),r("toEdge fromEdge lock unlock",(()=>{o()})),r("destroy",(()=>{u()})),r("enable disable",(()=>{let{nextEl:e,prevEl:i}=t.navigation;e=w(e),i=w(i),t.enabled?o():[...e,...i].filter((e=>!!e)).forEach((e=>e.classList.add(t.params.navigation.lockClass)))})),r("click",((e,i)=>{let{nextEl:r,prevEl:n}=t.navigation;r=w(r),n=w(n);const a=i.target;let o=n.includes(a)||r.includes(a);if(t.isElement&&!o){const e=i.path||i.composedPath&&i.composedPath();e&&(o=e.find((e=>r.includes(e)||n.includes(e))))}if(t.params.navigation.hideOnClick&&!o){if(t.pagination&&t.params.pagination&&t.params.pagination.clickable&&(t.pagination.el===a||t.pagination.el.contains(a)))return;let e;r.length?e=r[0].classList.contains(t.params.navigation.hiddenClass):n.length&&(e=n[0].classList.contains(t.params.navigation.hiddenClass)),s(!0===e?"navigationShow":"navigationHide"),[...r,...n].filter((e=>!!e)).forEach((e=>e.classList.toggle(t.params.navigation.hiddenClass)))}}));const h=()=>{t.el.classList.add(...t.params.navigation.navigationDisabledClass.split(" ")),u()};Object.assign(t.navigation,{enable:()=>{t.el.classList.remove(...t.params.navigation.navigationDisabledClass.split(" ")),c(),o()},disable:h,update:o,init:c,destroy:u})}function re(e){return void 0===e&&(e=""),`.${e.trim().replace(/([\.:!+\/])/g,"\\$1").replace(/ /g,".")}`}function se(e){let{swiper:t,extendParams:i,on:r,emit:s}=e;const n="swiper-pagination";let a;i({pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:e=>e,formatFractionTotal:e=>e,bulletClass:`${n}-bullet`,bulletActiveClass:`${n}-bullet-active`,modifierClass:`${n}-`,currentClass:`${n}-current`,totalClass:`${n}-total`,hiddenClass:`${n}-hidden`,progressbarFillClass:`${n}-progressbar-fill`,progressbarOppositeClass:`${n}-progressbar-opposite`,clickableClass:`${n}-clickable`,lockClass:`${n}-lock`,horizontalClass:`${n}-horizontal`,verticalClass:`${n}-vertical`,paginationDisabledClass:`${n}-disabled`}}),t.pagination={el:null,bullets:[]};let o=0;function l(){return!t.params.pagination.el||!t.pagination.el||Array.isArray(t.pagination.el)&&0===t.pagination.el.length}function d(e,i){const{bulletActiveClass:r}=t.params.pagination;e&&(e=e[("prev"===i?"previous":"next")+"ElementSibling"])&&(e.classList.add(`${r}-${i}`),(e=e[("prev"===i?"previous":"next")+"ElementSibling"])&&e.classList.add(`${r}-${i}-${i}`))}function c(e){const i=e.target.closest(re(t.params.pagination.bulletClass));if(!i)return;e.preventDefault();const r=y(i)*t.params.slidesPerGroup;if(t.params.loop){if(t.realIndex===r)return;t.slideToLoop(r)}else t.slideTo(r)}function u(){const e=t.rtl,i=t.params.pagination;if(l())return;let r,n,c=t.pagination.el;c=w(c);const u=t.virtual&&t.params.virtual.enabled?t.virtual.slides.length:t.slides.length,h=t.params.loop?Math.ceil(u/t.params.slidesPerGroup):t.snapGrid.length;if(t.params.loop?(n=t.previousRealIndex||0,r=t.params.slidesPerGroup>1?Math.floor(t.realIndex/t.params.slidesPerGroup):t.realIndex):void 0!==t.snapIndex?(r=t.snapIndex,n=t.previousSnapIndex):(n=t.previousIndex||0,r=t.activeIndex||0),"bullets"===i.type&&t.pagination.bullets&&t.pagination.bullets.length>0){const s=t.pagination.bullets;let l,u,h;if(i.dynamicBullets&&(a=b(s[0],t.isHorizontal()?"width":"height",!0),c.forEach((e=>{e.style[t.isHorizontal()?"width":"height"]=a*(i.dynamicMainBullets+4)+"px"})),i.dynamicMainBullets>1&&void 0!==n&&(o+=r-(n||0),o>i.dynamicMainBullets-1?o=i.dynamicMainBullets-1:o<0&&(o=0)),l=Math.max(r-o,0),u=l+(Math.min(s.length,i.dynamicMainBullets)-1),h=(u+l)/2),s.forEach((e=>{const t=[...["","-next","-next-next","-prev","-prev-prev","-main"].map((e=>`${i.bulletActiveClass}${e}`))].map((e=>"string"==typeof e&&e.includes(" ")?e.split(" "):e)).flat();e.classList.remove(...t)})),c.length>1)s.forEach((e=>{const s=y(e);s===r?e.classList.add(...i.bulletActiveClass.split(" ")):t.isElement&&e.setAttribute("part","bullet"),i.dynamicBullets&&(s>=l&&s<=u&&e.classList.add(...`${i.bulletActiveClass}-main`.split(" ")),s===l&&d(e,"prev"),s===u&&d(e,"next"))}));else{const e=s[r];if(e&&e.classList.add(...i.bulletActiveClass.split(" ")),t.isElement&&s.forEach(((e,t)=>{e.setAttribute("part",t===r?"bullet-active":"bullet")})),i.dynamicBullets){const e=s[l],t=s[u];for(let e=l;e<=u;e+=1)s[e]&&s[e].classList.add(...`${i.bulletActiveClass}-main`.split(" "));d(e,"prev"),d(t,"next")}}if(i.dynamicBullets){const r=Math.min(s.length,i.dynamicMainBullets+4),n=(a*r-a)/2-h*a,o=e?"right":"left";s.forEach((e=>{e.style[t.isHorizontal()?o:"top"]=`${n}px`}))}}c.forEach(((e,n)=>{if("fraction"===i.type&&(e.querySelectorAll(re(i.currentClass)).forEach((e=>{e.textContent=i.formatFractionCurrent(r+1)})),e.querySelectorAll(re(i.totalClass)).forEach((e=>{e.textContent=i.formatFractionTotal(h)}))),"progressbar"===i.type){let s;s=i.progressbarOpposite?t.isHorizontal()?"vertical":"horizontal":t.isHorizontal()?"horizontal":"vertical";const n=(r+1)/h;let a=1,o=1;"horizontal"===s?a=n:o=n,e.querySelectorAll(re(i.progressbarFillClass)).forEach((e=>{e.style.transform=`translate3d(0,0,0) scaleX(${a}) scaleY(${o})`,e.style.transitionDuration=`${t.params.speed}ms`}))}"custom"===i.type&&i.renderCustom?(e.innerHTML=i.renderCustom(t,r+1,h),0===n&&s("paginationRender",e)):(0===n&&s("paginationRender",e),s("paginationUpdate",e)),t.params.watchOverflow&&t.enabled&&e.classList[t.isLocked?"add":"remove"](i.lockClass)}))}function h(){const e=t.params.pagination;if(l())return;const i=t.virtual&&t.params.virtual.enabled?t.virtual.slides.length:t.grid&&t.params.grid.rows>1?t.slides.length/Math.ceil(t.params.grid.rows):t.slides.length;let r=t.pagination.el;r=w(r);let n="";if("bullets"===e.type){let r=t.params.loop?Math.ceil(i/t.params.slidesPerGroup):t.snapGrid.length;t.params.freeMode&&t.params.freeMode.enabled&&r>i&&(r=i);for(let i=0;i<r;i+=1)e.renderBullet?n+=e.renderBullet.call(t,i,e.bulletClass):n+=`<${e.bulletElement} ${t.isElement?'part="bullet"':""} class="${e.bulletClass}"></${e.bulletElement}>`}"fraction"===e.type&&(n=e.renderFraction?e.renderFraction.call(t,e.currentClass,e.totalClass):`<span class="${e.currentClass}"></span> / <span class="${e.totalClass}"></span>`),"progressbar"===e.type&&(n=e.renderProgressbar?e.renderProgressbar.call(t,e.progressbarFillClass):`<span class="${e.progressbarFillClass}"></span>`),t.pagination.bullets=[],r.forEach((i=>{"custom"!==e.type&&(i.innerHTML=n||""),"bullets"===e.type&&t.pagination.bullets.push(...i.querySelectorAll(re(e.bulletClass)))})),"custom"!==e.type&&s("paginationRender",r[0])}function p(){t.params.pagination=te(t,t.originalParams.pagination,t.params.pagination,{el:"swiper-pagination"});const e=t.params.pagination;if(!e.el)return;let i;"string"==typeof e.el&&t.isElement&&(i=t.el.querySelector(e.el)),i||"string"!=typeof e.el||(i=[...document.querySelectorAll(e.el)]),i||(i=e.el),i&&0!==i.length&&(t.params.uniqueNavElements&&"string"==typeof e.el&&Array.isArray(i)&&i.length>1&&(i=[...t.el.querySelectorAll(e.el)],i.length>1&&(i=i.filter((e=>_(e,".swiper")[0]===t.el))[0])),Array.isArray(i)&&1===i.length&&(i=i[0]),Object.assign(t.pagination,{el:i}),i=w(i),i.forEach((i=>{"bullets"===e.type&&e.clickable&&i.classList.add(...(e.clickableClass||"").split(" ")),i.classList.add(e.modifierClass+e.type),i.classList.add(t.isHorizontal()?e.horizontalClass:e.verticalClass),"bullets"===e.type&&e.dynamicBullets&&(i.classList.add(`${e.modifierClass}${e.type}-dynamic`),o=0,e.dynamicMainBullets<1&&(e.dynamicMainBullets=1)),"progressbar"===e.type&&e.progressbarOpposite&&i.classList.add(e.progressbarOppositeClass),e.clickable&&i.addEventListener("click",c),t.enabled||i.classList.add(e.lockClass)})))}function f(){const e=t.params.pagination;if(l())return;let i=t.pagination.el;i&&(i=w(i),i.forEach((i=>{i.classList.remove(e.hiddenClass),i.classList.remove(e.modifierClass+e.type),i.classList.remove(t.isHorizontal()?e.horizontalClass:e.verticalClass),e.clickable&&(i.classList.remove(...(e.clickableClass||"").split(" ")),i.removeEventListener("click",c))}))),t.pagination.bullets&&t.pagination.bullets.forEach((t=>t.classList.remove(...e.bulletActiveClass.split(" "))))}r("changeDirection",(()=>{if(!t.pagination||!t.pagination.el)return;const e=t.params.pagination;let{el:i}=t.pagination;i=w(i),i.forEach((i=>{i.classList.remove(e.horizontalClass,e.verticalClass),i.classList.add(t.isHorizontal()?e.horizontalClass:e.verticalClass)}))})),r("init",(()=>{!1===t.params.pagination.enabled?g():(p(),h(),u())})),r("activeIndexChange",(()=>{void 0===t.snapIndex&&u()})),r("snapIndexChange",(()=>{u()})),r("snapGridLengthChange",(()=>{h(),u()})),r("destroy",(()=>{f()})),r("enable disable",(()=>{let{el:e}=t.pagination;e&&(e=w(e),e.forEach((e=>e.classList[t.enabled?"remove":"add"](t.params.pagination.lockClass))))})),r("lock unlock",(()=>{u()})),r("click",((e,i)=>{const r=i.target,n=w(t.pagination.el);if(t.params.pagination.el&&t.params.pagination.hideOnClick&&n&&n.length>0&&!r.classList.contains(t.params.pagination.bulletClass)){if(t.navigation&&(t.navigation.nextEl&&r===t.navigation.nextEl||t.navigation.prevEl&&r===t.navigation.prevEl))return;const e=n[0].classList.contains(t.params.pagination.hiddenClass);s(!0===e?"paginationShow":"paginationHide"),n.forEach((e=>e.classList.toggle(t.params.pagination.hiddenClass)))}}));const g=()=>{t.el.classList.add(t.params.pagination.paginationDisabledClass);let{el:e}=t.pagination;e&&(e=w(e),e.forEach((e=>e.classList.add(t.params.pagination.paginationDisabledClass)))),f()};Object.assign(t.pagination,{enable:()=>{t.el.classList.remove(t.params.pagination.paginationDisabledClass);let{el:e}=t.pagination;e&&(e=w(e),e.forEach((e=>e.classList.remove(t.params.pagination.paginationDisabledClass)))),p(),h(),u()},disable:g,render:h,update:u,init:p,destroy:f})}Object.keys(Z).forEach((e=>{Object.keys(Z[e]).forEach((t=>{ee.prototype[t]=Z[e][t]}))})),ee.use([function(e){let{swiper:t,on:i,emit:r}=e;const s=a();let n=null,o=null;const l=()=>{t&&!t.destroyed&&t.initialized&&(r("beforeResize"),r("resize"))},d=()=>{t&&!t.destroyed&&t.initialized&&r("orientationchange")};i("init",(()=>{t.params.resizeObserver&&void 0!==s.ResizeObserver?t&&!t.destroyed&&t.initialized&&(n=new ResizeObserver((e=>{o=s.requestAnimationFrame((()=>{const{width:i,height:r}=t;let s=i,n=r;e.forEach((e=>{let{contentBoxSize:i,contentRect:r,target:a}=e;a&&a!==t.el||(s=r?r.width:(i[0]||i).inlineSize,n=r?r.height:(i[0]||i).blockSize)})),s===i&&n===r||l()}))})),n.observe(t.el)):(s.addEventListener("resize",l),s.addEventListener("orientationchange",d))})),i("destroy",(()=>{o&&s.cancelAnimationFrame(o),n&&n.unobserve&&t.el&&(n.unobserve(t.el),n=null),s.removeEventListener("resize",l),s.removeEventListener("orientationchange",d)}))},function(e){let{swiper:t,extendParams:i,on:r,emit:s}=e;const n=[],o=a(),l=function(e,i){void 0===i&&(i={});const r=new(o.MutationObserver||o.WebkitMutationObserver)((e=>{if(t.__preventObserver__)return;if(1===e.length)return void s("observerUpdate",e[0]);const i=function(){s("observerUpdate",e[0])};o.requestAnimationFrame?o.requestAnimationFrame(i):o.setTimeout(i,0)}));r.observe(e,{attributes:void 0===i.attributes||i.attributes,childList:void 0===i.childList||i.childList,characterData:void 0===i.characterData||i.characterData}),n.push(r)};i({observer:!1,observeParents:!1,observeSlideChildren:!1}),r("init",(()=>{if(t.params.observer){if(t.params.observeParents){const e=_(t.hostEl);for(let t=0;t<e.length;t+=1)l(e[t])}l(t.hostEl,{childList:t.params.observeSlideChildren}),l(t.wrapperEl,{attributes:!1})}})),r("destroy",(()=>{n.forEach((e=>{e.disconnect()})),n.splice(0,n.length)}))}]),document.querySelector(".swiper")&&s.e(784).then(s.bind(s,784));const ne=e=>{document.querySelector(".team__name").innerHTML=e.dataset.name,document.querySelector(".team__text_team").innerHTML=e.dataset.team,document.querySelector(".team__text_date").innerHTML=e.dataset.date};window.addEventListener("load",(()=>{document.querySelector(".team__swiper")&&new ee(".team__swiper",{modules:[ie,se],loop:!0,spaceBetween:30,navigation:{prevEl:".team__nav-btn_prev",nextEl:".team__nav-btn_next"},pagination:{el:".team__fraction",type:"custom",renderCustom:function(e,t,i){return t+"/"+i}},on:{afterInit:e=>ne(e.slides[e.activeIndex]),slideChange:e=>ne(e.slides[e.activeIndex])}})}));
/*!
 * lightgallery | 2.7.2 | September 20th 2023
 * http://www.lightgalleryjs.com/
 * Copyright (c) 2020 Sachin Neravath;
 * @license GPLv3
 */
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
var ae=function(){return ae=Object.assign||function(e){for(var t,i=1,r=arguments.length;i<r;i++)for(var s in t=arguments[i])Object.prototype.hasOwnProperty.call(t,s)&&(e[s]=t[s]);return e},ae.apply(this,arguments)};var oe="lgAfterAppendSlide",le="lgInit",de="lgHasVideo",ce="lgContainerResize",ue="lgUpdateSlides",he="lgAfterAppendSubHtml",pe="lgBeforeOpen",fe="lgAfterOpen",ge="lgSlideItemLoad",me="lgBeforeSlide",ve="lgAfterSlide",ye="lgPosterClick",_e="lgDragStart",be="lgDragMove",we="lgDragEnd",xe="lgBeforeNextSlide",Te="lgBeforePrevSlide",Se="lgBeforeClose",Ce="lgAfterClose",Ee={mode:"lg-slide",easing:"ease",speed:400,licenseKey:"0000-0000-000-0000",height:"100%",width:"100%",addClass:"",startClass:"lg-start-zoom",backdropDuration:300,container:"",startAnimationDuration:400,zoomFromOrigin:!0,hideBarsDelay:0,showBarsAfter:1e4,slideDelay:0,supportLegacyBrowser:!0,allowMediaOverlap:!1,videoMaxSize:"1280-720",loadYouTubePoster:!0,defaultCaptionHeight:0,ariaLabelledby:"",ariaDescribedby:"",resetScrollPosition:!0,hideScrollbar:!1,closable:!0,swipeToClose:!0,closeOnTap:!0,showCloseIcon:!0,showMaximizeIcon:!1,loop:!0,escKey:!0,keyPress:!0,trapFocus:!0,controls:!0,slideEndAnimation:!0,hideControlOnEnd:!1,mousewheel:!1,getCaptionFromTitleOrAlt:!0,appendSubHtmlTo:".lg-sub-html",subHtmlSelectorRelative:!1,preload:2,numberOfSlideItemsInDom:10,selector:"",selectWithin:"",nextHtml:"",prevHtml:"",index:0,iframeWidth:"100%",iframeHeight:"100%",iframeMaxWidth:"100%",iframeMaxHeight:"100%",download:!0,counter:!0,appendCounterTo:".lg-toolbar",swipeThreshold:50,enableSwipe:!0,enableDrag:!0,dynamic:!1,dynamicEl:[],extraProps:[],exThumbImage:"",isMobile:void 0,mobileSettings:{controls:!1,showCloseIcon:!1,download:!1},plugins:[],strings:{closeGallery:"Close gallery",toggleMaximize:"Toggle maximize",previousSlide:"Previous slide",nextSlide:"Next slide",download:"Download",playVideo:"Play video",mediaLoadingFailed:"Oops... Failed to load content..."}};var Me=function(){function e(e){return this.cssVenderPrefixes=["TransitionDuration","TransitionTimingFunction","Transform","Transition"],this.selector=this._getSelector(e),this.firstElement=this._getFirstEl(),this}return e.generateUUID=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(e){var t=16*Math.random()|0;return("x"==e?t:3&t|8).toString(16)}))},e.prototype._getSelector=function(e,t){return void 0===t&&(t=document),"string"!=typeof e?e:(t=t||document,"#"===e.substring(0,1)?t.querySelector(e):t.querySelectorAll(e))},e.prototype._each=function(e){return this.selector?(void 0!==this.selector.length?[].forEach.call(this.selector,e):e(this.selector,0),this):this},e.prototype._setCssVendorPrefix=function(e,t,i){var r=t.replace(/-([a-z])/gi,(function(e,t){return t.toUpperCase()}));-1!==this.cssVenderPrefixes.indexOf(r)?(e.style[r.charAt(0).toLowerCase()+r.slice(1)]=i,e.style["webkit"+r]=i,e.style["moz"+r]=i,e.style["ms"+r]=i,e.style["o"+r]=i):e.style[r]=i},e.prototype._getFirstEl=function(){return this.selector&&void 0!==this.selector.length?this.selector[0]:this.selector},e.prototype.isEventMatched=function(e,t){var i=t.split(".");return e.split(".").filter((function(e){return e})).every((function(e){return-1!==i.indexOf(e)}))},e.prototype.attr=function(e,t){return void 0===t?this.firstElement?this.firstElement.getAttribute(e):"":(this._each((function(i){i.setAttribute(e,t)})),this)},e.prototype.find=function(e){return Ie(this._getSelector(e,this.selector))},e.prototype.first=function(){return this.selector&&void 0!==this.selector.length?Ie(this.selector[0]):Ie(this.selector)},e.prototype.eq=function(e){return Ie(this.selector[e])},e.prototype.parent=function(){return Ie(this.selector.parentElement)},e.prototype.get=function(){return this._getFirstEl()},e.prototype.removeAttr=function(e){var t=e.split(" ");return this._each((function(e){t.forEach((function(t){return e.removeAttribute(t)}))})),this},e.prototype.wrap=function(e){if(!this.firstElement)return this;var t=document.createElement("div");return t.className=e,this.firstElement.parentNode.insertBefore(t,this.firstElement),this.firstElement.parentNode.removeChild(this.firstElement),t.appendChild(this.firstElement),this},e.prototype.addClass=function(e){return void 0===e&&(e=""),this._each((function(t){e.split(" ").forEach((function(e){e&&t.classList.add(e)}))})),this},e.prototype.removeClass=function(e){return this._each((function(t){e.split(" ").forEach((function(e){e&&t.classList.remove(e)}))})),this},e.prototype.hasClass=function(e){return!!this.firstElement&&this.firstElement.classList.contains(e)},e.prototype.hasAttribute=function(e){return!!this.firstElement&&this.firstElement.hasAttribute(e)},e.prototype.toggleClass=function(e){return this.firstElement?(this.hasClass(e)?this.removeClass(e):this.addClass(e),this):this},e.prototype.css=function(e,t){var i=this;return this._each((function(r){i._setCssVendorPrefix(r,e,t)})),this},e.prototype.on=function(t,i){var r=this;return this.selector?(t.split(" ").forEach((function(t){Array.isArray(e.eventListeners[t])||(e.eventListeners[t]=[]),e.eventListeners[t].push(i),r.selector.addEventListener(t.split(".")[0],i)})),this):this},e.prototype.once=function(e,t){var i=this;return this.on(e,(function(){i.off(e),t(e)})),this},e.prototype.off=function(t){var i=this;return this.selector?(Object.keys(e.eventListeners).forEach((function(r){i.isEventMatched(t,r)&&(e.eventListeners[r].forEach((function(e){i.selector.removeEventListener(r.split(".")[0],e)})),e.eventListeners[r]=[])})),this):this},e.prototype.trigger=function(e,t){if(!this.firstElement)return this;var i=new CustomEvent(e.split(".")[0],{detail:t||null});return this.firstElement.dispatchEvent(i),this},e.prototype.load=function(e){var t=this;return fetch(e).then((function(e){return e.text()})).then((function(e){t.selector.innerHTML=e})),this},e.prototype.html=function(e){return void 0===e?this.firstElement?this.firstElement.innerHTML:"":(this._each((function(t){t.innerHTML=e})),this)},e.prototype.append=function(e){return this._each((function(t){"string"==typeof e?t.insertAdjacentHTML("beforeend",e):t.appendChild(e)})),this},e.prototype.prepend=function(e){return this._each((function(t){t.insertAdjacentHTML("afterbegin",e)})),this},e.prototype.remove=function(){return this._each((function(e){e.parentNode.removeChild(e)})),this},e.prototype.empty=function(){return this._each((function(e){e.innerHTML=""})),this},e.prototype.scrollTop=function(e){return void 0!==e?(document.body.scrollTop=e,document.documentElement.scrollTop=e,this):window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0},e.prototype.scrollLeft=function(e){return void 0!==e?(document.body.scrollLeft=e,document.documentElement.scrollLeft=e,this):window.pageXOffset||document.documentElement.scrollLeft||document.body.scrollLeft||0},e.prototype.offset=function(){if(!this.firstElement)return{left:0,top:0};var e=this.firstElement.getBoundingClientRect(),t=Ie("body").style().marginLeft;return{left:e.left-parseFloat(t)+this.scrollLeft(),top:e.top+this.scrollTop()}},e.prototype.style=function(){return this.firstElement?this.firstElement.currentStyle||window.getComputedStyle(this.firstElement):{}},e.prototype.width=function(){var e=this.style();return this.firstElement.clientWidth-parseFloat(e.paddingLeft)-parseFloat(e.paddingRight)},e.prototype.height=function(){var e=this.style();return this.firstElement.clientHeight-parseFloat(e.paddingTop)-parseFloat(e.paddingBottom)},e.eventListeners={},e}();function Ie(e){return function(){if("function"==typeof window.CustomEvent)return!1;window.CustomEvent=function(e,t){t=t||{bubbles:!1,cancelable:!1,detail:null};var i=document.createEvent("CustomEvent");return i.initCustomEvent(e,t.bubbles,t.cancelable,t.detail),i}}(),Element.prototype.matches||(Element.prototype.matches=Element.prototype.msMatchesSelector||Element.prototype.webkitMatchesSelector),new Me(e)}var ke=["src","sources","subHtml","subHtmlUrl","html","video","poster","slideName","responsive","srcset","sizes","iframe","downloadUrl","download","width","facebookShareUrl","tweetText","iframeTitle","twitterShareUrl","pinterestShareUrl","pinterestText","fbHtml","disqusIdentifier","disqusUrl"];function Oe(e){return"href"===e?"src":e=(e=(e=e.replace("data-","")).charAt(0).toLowerCase()+e.slice(1)).replace(/-([a-z])/g,(function(e){return e[1].toUpperCase()}))}var Ae=function(e,t,i,r){void 0===i&&(i=0);var s=Ie(e).attr("data-lg-size")||r;if(s){var n=s.split(",");if(n[1])for(var a=window.innerWidth,o=0;o<n.length;o++){var l=n[o];if(parseInt(l.split("-")[2],10)>a){s=l;break}o===n.length-1&&(s=l)}var d=s.split("-"),c=parseInt(d[0],10),u=parseInt(d[1],10),h=t.width(),p=t.height()-i,f=Math.min(h,c),g=Math.min(p,u),m=Math.min(f/c,g/u);return{width:c*m,height:u*m}}},Pe=function(e,t,i,r,s){if(s){var n=Ie(e).find("img").first();if(n.get()){var a=t.get().getBoundingClientRect(),o=a.width,l=t.height()-(i+r),d=n.width(),c=n.height(),u=n.style(),h=(o-d)/2-n.offset().left+(parseFloat(u.paddingLeft)||0)+(parseFloat(u.borderLeft)||0)+Ie(window).scrollLeft()+a.left,p=(l-c)/2-n.offset().top+(parseFloat(u.paddingTop)||0)+(parseFloat(u.borderTop)||0)+Ie(window).scrollTop()+i;return"translate3d("+(h*=-1)+"px, "+(p*=-1)+"px, 0) scale3d("+d/s.width+", "+c/s.height+", 1)"}}},Le=function(e,t,i,r,s,n){return'<div class="lg-video-cont lg-has-iframe" style="width:'+e+"; max-width:"+i+"; height: "+t+"; max-height:"+r+'">\n                    <iframe class="lg-object" frameborder="0" '+(n?'title="'+n+'"':"")+' src="'+s+'"  allowfullscreen="true"></iframe>\n                </div>'},De=function(e,t,i,r,s,n){var a="<img "+i+" "+(r?'srcset="'+r+'"':"")+"  "+(s?'sizes="'+s+'"':"")+' class="lg-object lg-image" data-index="'+e+'" src="'+t+'" />',o="";n&&(o=("string"==typeof n?JSON.parse(n):n).map((function(e){var t="";return Object.keys(e).forEach((function(i){t+=" "+i+'="'+e[i]+'"'})),"<source "+t+"></source>"})));return""+o+a},ze=function(e){for(var t=[],i=[],r="",s=0;s<e.length;s++){var n=e[s].split(" ");""===n[0]&&n.splice(0,1),i.push(n[0]),t.push(n[1])}for(var a=window.innerWidth,o=0;o<t.length;o++)if(parseInt(t[o],10)>a){r=i[o];break}return r},Be=function(e){return!!e&&(!!e.complete&&0!==e.naturalWidth)},Fe=function(e,t,i,r,s){return'<div class="lg-video-cont '+(s&&s.youtube?"lg-has-youtube":s&&s.vimeo?"lg-has-vimeo":"lg-has-html5")+'" style="'+i+'">\n                <div class="lg-video-play-button">\n                <svg\n                    viewBox="0 0 20 20"\n                    preserveAspectRatio="xMidYMid"\n                    focusable="false"\n                    aria-labelledby="'+r+'"\n                    role="img"\n                    class="lg-video-play-icon"\n                >\n                    <title>'+r+'</title>\n                    <polygon class="lg-video-play-icon-inner" points="1,0 20,10 1,20"></polygon>\n                </svg>\n                <svg class="lg-video-play-icon-bg" viewBox="0 0 50 50" focusable="false">\n                    <circle cx="50%" cy="50%" r="20"></circle></svg>\n                <svg class="lg-video-play-icon-circle" viewBox="0 0 50 50" focusable="false">\n                    <circle cx="50%" cy="50%" r="20"></circle>\n                </svg>\n            </div>\n            '+(t||"")+'\n            <img class="lg-object lg-video-poster" src="'+e+'" />\n        </div>'},Ge=function(e){var t=e.querySelectorAll('a[href]:not([disabled]), button:not([disabled]), textarea:not([disabled]), input[type="text"]:not([disabled]), input[type="radio"]:not([disabled]), input[type="checkbox"]:not([disabled]), select:not([disabled])');return[].filter.call(t,(function(e){var t=window.getComputedStyle(e);return"none"!==t.display&&"hidden"!==t.visibility}))},Ne=function(e,t,i,r){var s=[],n=function(){for(var e=0,t=0,i=arguments.length;t<i;t++)e+=arguments[t].length;var r=Array(e),s=0;for(t=0;t<i;t++)for(var n=arguments[t],a=0,o=n.length;a<o;a++,s++)r[s]=n[a];return r}(ke,t);return[].forEach.call(e,(function(e){for(var t={},a=0;a<e.attributes.length;a++){var o=e.attributes[a];if(o.specified){var l=Oe(o.name),d="";n.indexOf(l)>-1&&(d=l),d&&(t[d]=o.value)}}var c=Ie(e),u=c.find("img").first().attr("alt"),h=c.attr("title"),p=r?c.attr(r):c.find("img").first().attr("src");t.thumb=p,i&&!t.subHtml&&(t.subHtml=h||u||""),t.alt=u||h||"",s.push(t)})),s},Re=function(){return/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)},$e=function(e,t,i){if(!e)return t?{html5:!0}:void console.error("lightGallery :- data-src is not provided on slide item "+(i+1)+". Please make sure the selector property is properly configured. More info - https://www.lightgalleryjs.com/demos/html-markup/");var r=e.match(/\/\/(?:www\.)?youtu(?:\.be|be\.com|be-nocookie\.com)\/(?:watch\?v=|embed\/)?([a-z0-9\-\_\%]+)([\&|?][\S]*)*/i),s=e.match(/\/\/(?:www\.)?(?:player\.)?vimeo.com\/(?:video\/)?([0-9a-z\-_]+)(.*)?/i),n=e.match(/https?:\/\/(.+)?(wistia\.com|wi\.st)\/(medias|embed)\/([0-9a-z\-_]+)(.*)/);return r?{youtube:r}:s?{vimeo:s}:n?{wistia:n}:void 0},qe=0,He=function(){function e(e,t){if(this.lgOpened=!1,this.index=0,this.plugins=[],this.lGalleryOn=!1,this.lgBusy=!1,this.currentItemsInDom=[],this.prevScrollTop=0,this.bodyPaddingRight=0,this.isDummyImageRemoved=!1,this.dragOrSwipeEnabled=!1,this.mediaContainerPosition={top:0,bottom:0},!e)return this;if(qe++,this.lgId=qe,this.el=e,this.LGel=Ie(e),this.generateSettings(t),this.buildModules(),this.settings.dynamic&&void 0!==this.settings.dynamicEl&&!Array.isArray(this.settings.dynamicEl))throw"When using dynamic mode, you must also define dynamicEl as an Array.";return this.galleryItems=this.getItems(),this.normalizeSettings(),this.init(),this.validateLicense(),this}return e.prototype.generateSettings=function(e){if(this.settings=ae(ae({},Ee),e),this.settings.isMobile&&"function"==typeof this.settings.isMobile?this.settings.isMobile():Re()){var t=ae(ae({},this.settings.mobileSettings),this.settings.mobileSettings);this.settings=ae(ae({},this.settings),t)}},e.prototype.normalizeSettings=function(){this.settings.slideEndAnimation&&(this.settings.hideControlOnEnd=!1),this.settings.closable||(this.settings.swipeToClose=!1),this.zoomFromOrigin=this.settings.zoomFromOrigin,this.settings.dynamic&&(this.zoomFromOrigin=!1),this.settings.container||(this.settings.container=document.body),this.settings.preload=Math.min(this.settings.preload,this.galleryItems.length)},e.prototype.init=function(){var e=this;this.addSlideVideoInfo(this.galleryItems),this.buildStructure(),this.LGel.trigger(le,{instance:this}),this.settings.keyPress&&this.keyPress(),setTimeout((function(){e.enableDrag(),e.enableSwipe(),e.triggerPosterClick()}),50),this.arrow(),this.settings.mousewheel&&this.mousewheel(),this.settings.dynamic||this.openGalleryOnItemClick()},e.prototype.openGalleryOnItemClick=function(){for(var e=this,t=function(t){var r=i.items[t],s=Ie(r),n=Me.generateUUID();s.attr("data-lg-id",n).on("click.lgcustom-item-"+n,(function(i){i.preventDefault();var s=e.settings.index||t;e.openGallery(s,r)}))},i=this,r=0;r<this.items.length;r++)t(r)},e.prototype.buildModules=function(){var e=this;this.settings.plugins.forEach((function(t){e.plugins.push(new t(e,Ie))}))},e.prototype.validateLicense=function(){this.settings.licenseKey?"0000-0000-000-0000"===this.settings.licenseKey&&console.warn("lightGallery: "+this.settings.licenseKey+" license key is not valid for production use"):console.error("Please provide a valid license key")},e.prototype.getSlideItem=function(e){return Ie(this.getSlideItemId(e))},e.prototype.getSlideItemId=function(e){return"#lg-item-"+this.lgId+"-"+e},e.prototype.getIdName=function(e){return e+"-"+this.lgId},e.prototype.getElementById=function(e){return Ie("#"+this.getIdName(e))},e.prototype.manageSingleSlideClassName=function(){this.galleryItems.length<2?this.outer.addClass("lg-single-item"):this.outer.removeClass("lg-single-item")},e.prototype.buildStructure=function(){var e=this;if(!(this.$container&&this.$container.get())){var t="",i="";this.settings.controls&&(t='<button type="button" id="'+this.getIdName("lg-prev")+'" aria-label="'+this.settings.strings.previousSlide+'" class="lg-prev lg-icon"> '+this.settings.prevHtml+' </button>\n                <button type="button" id="'+this.getIdName("lg-next")+'" aria-label="'+this.settings.strings.nextSlide+'" class="lg-next lg-icon"> '+this.settings.nextHtml+" </button>"),".lg-item"!==this.settings.appendSubHtmlTo&&(i='<div class="lg-sub-html" role="status" aria-live="polite"></div>');var r="";this.settings.allowMediaOverlap&&(r+="lg-media-overlap ");var s=this.settings.ariaLabelledby?'aria-labelledby="'+this.settings.ariaLabelledby+'"':"",n=this.settings.ariaDescribedby?'aria-describedby="'+this.settings.ariaDescribedby+'"':"",a="lg-container "+this.settings.addClass+" "+(document.body!==this.settings.container?"lg-inline":""),o=this.settings.closable&&this.settings.showCloseIcon?'<button type="button" aria-label="'+this.settings.strings.closeGallery+'" id="'+this.getIdName("lg-close")+'" class="lg-close lg-icon"></button>':"",l=this.settings.showMaximizeIcon?'<button type="button" aria-label="'+this.settings.strings.toggleMaximize+'" id="'+this.getIdName("lg-maximize")+'" class="lg-maximize lg-icon"></button>':"",d='\n        <div class="'+a+'" id="'+this.getIdName("lg-container")+'" tabindex="-1" aria-modal="true" '+s+" "+n+' role="dialog"\n        >\n            <div id="'+this.getIdName("lg-backdrop")+'" class="lg-backdrop"></div>\n\n            <div id="'+this.getIdName("lg-outer")+'" class="lg-outer lg-use-css3 lg-css3 lg-hide-items '+r+' ">\n\n              <div id="'+this.getIdName("lg-content")+'" class="lg-content">\n                <div id="'+this.getIdName("lg-inner")+'" class="lg-inner">\n                </div>\n                '+t+'\n              </div>\n                <div id="'+this.getIdName("lg-toolbar")+'" class="lg-toolbar lg-group">\n                    '+l+"\n                    "+o+"\n                    </div>\n                    "+(".lg-outer"===this.settings.appendSubHtmlTo?i:"")+'\n                <div id="'+this.getIdName("lg-components")+'" class="lg-components">\n                    '+(".lg-sub-html"===this.settings.appendSubHtmlTo?i:"")+"\n                </div>\n            </div>\n        </div>\n        ";Ie(this.settings.container).append(d),document.body!==this.settings.container&&Ie(this.settings.container).css("position","relative"),this.outer=this.getElementById("lg-outer"),this.$lgComponents=this.getElementById("lg-components"),this.$backdrop=this.getElementById("lg-backdrop"),this.$container=this.getElementById("lg-container"),this.$inner=this.getElementById("lg-inner"),this.$content=this.getElementById("lg-content"),this.$toolbar=this.getElementById("lg-toolbar"),this.$backdrop.css("transition-duration",this.settings.backdropDuration+"ms");var c=this.settings.mode+" ";this.manageSingleSlideClassName(),this.settings.enableDrag&&(c+="lg-grab "),this.outer.addClass(c),this.$inner.css("transition-timing-function",this.settings.easing),this.$inner.css("transition-duration",this.settings.speed+"ms"),this.settings.download&&this.$toolbar.append('<a id="'+this.getIdName("lg-download")+'" target="_blank" rel="noopener" aria-label="'+this.settings.strings.download+'" download class="lg-download lg-icon"></a>'),this.counter(),Ie(window).on("resize.lg.global"+this.lgId+" orientationchange.lg.global"+this.lgId,(function(){e.refreshOnResize()})),this.hideBars(),this.manageCloseGallery(),this.toggleMaximize(),this.initModules()}},e.prototype.refreshOnResize=function(){if(this.lgOpened){var e=this.galleryItems[this.index].__slideVideoInfo;this.mediaContainerPosition=this.getMediaContainerPosition();var t=this.mediaContainerPosition,i=t.top,r=t.bottom;if(this.currentImageSize=Ae(this.items[this.index],this.outer,i+r,e&&this.settings.videoMaxSize),e&&this.resizeVideoSlide(this.index,this.currentImageSize),this.zoomFromOrigin&&!this.isDummyImageRemoved){var s=this.getDummyImgStyles(this.currentImageSize);this.outer.find(".lg-current .lg-dummy-img").first().attr("style",s)}this.LGel.trigger(ce)}},e.prototype.resizeVideoSlide=function(e,t){var i=this.getVideoContStyle(t);this.getSlideItem(e).find(".lg-video-cont").attr("style",i)},e.prototype.updateSlides=function(e,t){if(this.index>e.length-1&&(this.index=e.length-1),1===e.length&&(this.index=0),e.length){var i=this.galleryItems[t].src;this.galleryItems=e,this.updateControls(),this.$inner.empty(),this.currentItemsInDom=[];var r=0;this.galleryItems.some((function(e,t){return e.src===i&&(r=t,!0)})),this.currentItemsInDom=this.organizeSlideItems(r,-1),this.loadContent(r,!0),this.getSlideItem(r).addClass("lg-current"),this.index=r,this.updateCurrentCounter(r),this.LGel.trigger(ue)}else this.closeGallery()},e.prototype.getItems=function(){if(this.items=[],this.settings.dynamic)return this.settings.dynamicEl||[];if("this"===this.settings.selector)this.items.push(this.el);else if(this.settings.selector)if("string"==typeof this.settings.selector)if(this.settings.selectWithin){var e=Ie(this.settings.selectWithin);this.items=e.find(this.settings.selector).get()}else this.items=this.el.querySelectorAll(this.settings.selector);else this.items=this.settings.selector;else this.items=this.el.children;return Ne(this.items,this.settings.extraProps,this.settings.getCaptionFromTitleOrAlt,this.settings.exThumbImage)},e.prototype.shouldHideScrollbar=function(){return this.settings.hideScrollbar&&document.body===this.settings.container},e.prototype.hideScrollbar=function(){if(this.shouldHideScrollbar()){this.bodyPaddingRight=parseFloat(Ie("body").style().paddingRight);var e=document.documentElement.getBoundingClientRect(),t=window.innerWidth-e.width;Ie(document.body).css("padding-right",t+this.bodyPaddingRight+"px"),Ie(document.body).addClass("lg-overlay-open")}},e.prototype.resetScrollBar=function(){this.shouldHideScrollbar()&&(Ie(document.body).css("padding-right",this.bodyPaddingRight+"px"),Ie(document.body).removeClass("lg-overlay-open"))},e.prototype.openGallery=function(e,t){var i=this;if(void 0===e&&(e=this.settings.index),!this.lgOpened){this.lgOpened=!0,this.outer.removeClass("lg-hide-items"),this.hideScrollbar(),this.$container.addClass("lg-show");var r=this.getItemsToBeInsertedToDom(e,e);this.currentItemsInDom=r;var s="";r.forEach((function(e){s=s+'<div id="'+e+'" class="lg-item"></div>'})),this.$inner.append(s),this.addHtml(e);var n="";this.mediaContainerPosition=this.getMediaContainerPosition();var a=this.mediaContainerPosition,o=a.top,l=a.bottom;this.settings.allowMediaOverlap||this.setMediaContainerPosition(o,l);var d=this.galleryItems[e].__slideVideoInfo;this.zoomFromOrigin&&t&&(this.currentImageSize=Ae(t,this.outer,o+l,d&&this.settings.videoMaxSize),n=Pe(t,this.outer,o,l,this.currentImageSize)),this.zoomFromOrigin&&n||(this.outer.addClass(this.settings.startClass),this.getSlideItem(e).removeClass("lg-complete"));var c=this.settings.zoomFromOrigin?100:this.settings.backdropDuration;setTimeout((function(){i.outer.addClass("lg-components-open")}),c),this.index=e,this.LGel.trigger(pe),this.getSlideItem(e).addClass("lg-current"),this.lGalleryOn=!1,this.prevScrollTop=Ie(window).scrollTop(),setTimeout((function(){if(i.zoomFromOrigin&&n){var t=i.getSlideItem(e);t.css("transform",n),setTimeout((function(){t.addClass("lg-start-progress lg-start-end-progress").css("transition-duration",i.settings.startAnimationDuration+"ms"),i.outer.addClass("lg-zoom-from-image")})),setTimeout((function(){t.css("transform","translate3d(0, 0, 0)")}),100)}setTimeout((function(){i.$backdrop.addClass("in"),i.$container.addClass("lg-show-in")}),10),setTimeout((function(){i.settings.trapFocus&&document.body===i.settings.container&&i.trapFocus()}),i.settings.backdropDuration+50),i.zoomFromOrigin&&n||setTimeout((function(){i.outer.addClass("lg-visible")}),i.settings.backdropDuration),i.slide(e,!1,!1,!1),i.LGel.trigger(fe)})),document.body===this.settings.container&&Ie("html").addClass("lg-on")}},e.prototype.getMediaContainerPosition=function(){if(this.settings.allowMediaOverlap)return{top:0,bottom:0};var e=this.$toolbar.get().clientHeight||0,t=this.outer.find(".lg-components .lg-sub-html").get(),i=this.settings.defaultCaptionHeight||t&&t.clientHeight||0,r=this.outer.find(".lg-thumb-outer").get();return{top:e,bottom:(r?r.clientHeight:0)+i}},e.prototype.setMediaContainerPosition=function(e,t){void 0===e&&(e=0),void 0===t&&(t=0),this.$content.css("top",e+"px").css("bottom",t+"px")},e.prototype.hideBars=function(){var e=this;setTimeout((function(){e.outer.removeClass("lg-hide-items"),e.settings.hideBarsDelay>0&&(e.outer.on("mousemove.lg click.lg touchstart.lg",(function(){e.outer.removeClass("lg-hide-items"),clearTimeout(e.hideBarTimeout),e.hideBarTimeout=setTimeout((function(){e.outer.addClass("lg-hide-items")}),e.settings.hideBarsDelay)})),e.outer.trigger("mousemove.lg"))}),this.settings.showBarsAfter)},e.prototype.initPictureFill=function(e){if(this.settings.supportLegacyBrowser)try{picturefill({elements:[e.get()]})}catch(e){console.warn("lightGallery :- If you want srcset or picture tag to be supported for older browser please include picturefil javascript library in your document.")}},e.prototype.counter=function(){if(this.settings.counter){var e='<div class="lg-counter" role="status" aria-live="polite">\n                <span id="'+this.getIdName("lg-counter-current")+'" class="lg-counter-current">'+(this.index+1)+' </span> /\n                <span id="'+this.getIdName("lg-counter-all")+'" class="lg-counter-all">'+this.galleryItems.length+" </span></div>";this.outer.find(this.settings.appendCounterTo).append(e)}},e.prototype.addHtml=function(e){var t,i;if(this.galleryItems[e].subHtmlUrl?i=this.galleryItems[e].subHtmlUrl:t=this.galleryItems[e].subHtml,!i)if(t){var r=t.substring(0,1);"."!==r&&"#"!==r||(t=this.settings.subHtmlSelectorRelative&&!this.settings.dynamic?Ie(this.items).eq(e).find(t).first().html():Ie(t).first().html())}else t="";if(".lg-item"!==this.settings.appendSubHtmlTo)i?this.outer.find(".lg-sub-html").load(i):this.outer.find(".lg-sub-html").html(t);else{var s=Ie(this.getSlideItemId(e));i?s.load(i):s.append('<div class="lg-sub-html">'+t+"</div>")}null!=t&&(""===t?this.outer.find(this.settings.appendSubHtmlTo).addClass("lg-empty-html"):this.outer.find(this.settings.appendSubHtmlTo).removeClass("lg-empty-html")),this.LGel.trigger(he,{index:e})},e.prototype.preload=function(e){for(var t=1;t<=this.settings.preload&&!(t>=this.galleryItems.length-e);t++)this.loadContent(e+t,!1);for(var i=1;i<=this.settings.preload&&!(e-i<0);i++)this.loadContent(e-i,!1)},e.prototype.getDummyImgStyles=function(e){return e?"width:"+e.width+"px;\n                margin-left: -"+e.width/2+"px;\n                margin-top: -"+e.height/2+"px;\n                height:"+e.height+"px":""},e.prototype.getVideoContStyle=function(e){return e?"width:"+e.width+"px;\n                height:"+e.height+"px":""},e.prototype.getDummyImageContent=function(e,t,i){var r;if(this.settings.dynamic||(r=Ie(this.items).eq(t)),r){var s=void 0;if(!(s=this.settings.exThumbImage?r.attr(this.settings.exThumbImage):r.find("img").first().attr("src")))return"";var n="<img "+i+' style="'+this.getDummyImgStyles(this.currentImageSize)+'" class="lg-dummy-img" src="'+s+'" />';return e.addClass("lg-first-slide"),this.outer.addClass("lg-first-slide-loading"),n}return""},e.prototype.setImgMarkup=function(e,t,i){var r=this.galleryItems[i],s=r.alt,n=r.srcset,a=r.sizes,o=r.sources,l=s?'alt="'+s+'"':"",d='<picture class="lg-img-wrap"> '+(this.isFirstSlideWithZoomAnimation()?this.getDummyImageContent(t,i,l):De(i,e,l,n,a,o))+"</picture>";t.prepend(d)},e.prototype.onSlideObjectLoad=function(e,t,i,r){var s=e.find(".lg-object").first();Be(s.get())||t?i():(s.on("load.lg error.lg",(function(){i&&i()})),s.on("error.lg",(function(){r&&r()})))},e.prototype.onLgObjectLoad=function(e,t,i,r,s,n){var a=this;this.onSlideObjectLoad(e,n,(function(){a.triggerSlideItemLoad(e,t,i,r,s)}),(function(){e.addClass("lg-complete lg-complete_"),e.html('<span class="lg-error-msg">'+a.settings.strings.mediaLoadingFailed+"</span>")}))},e.prototype.triggerSlideItemLoad=function(e,t,i,r,s){var n=this,a=this.galleryItems[t],o=s&&"video"===this.getSlideType(a)&&!a.poster?r:0;setTimeout((function(){e.addClass("lg-complete lg-complete_"),n.LGel.trigger(ge,{index:t,delay:i||0,isFirstSlide:s})}),o)},e.prototype.isFirstSlideWithZoomAnimation=function(){return!(this.lGalleryOn||!this.zoomFromOrigin||!this.currentImageSize)},e.prototype.addSlideVideoInfo=function(e){var t=this;e.forEach((function(e,i){e.__slideVideoInfo=$e(e.src,!!e.video,i),e.__slideVideoInfo&&t.settings.loadYouTubePoster&&!e.poster&&e.__slideVideoInfo.youtube&&(e.poster="//img.youtube.com/vi/"+e.__slideVideoInfo.youtube[1]+"/maxresdefault.jpg")}))},e.prototype.loadContent=function(e,t){var i=this,r=this.galleryItems[e],s=Ie(this.getSlideItemId(e)),n=r.poster,a=r.srcset,o=r.sizes,l=r.sources,d=r.src,c=r.video,u=c&&"string"==typeof c?JSON.parse(c):c;if(r.responsive){var h=r.responsive.split(",");d=ze(h)||d}var p=r.__slideVideoInfo,f="",g=!!r.iframe,m=!this.lGalleryOn,v=0;if(m&&(v=this.zoomFromOrigin&&this.currentImageSize?this.settings.startAnimationDuration+10:this.settings.backdropDuration+10),!s.hasClass("lg-loaded")){if(p){var y=this.mediaContainerPosition,_=y.top,b=y.bottom,w=Ae(this.items[e],this.outer,_+b,p&&this.settings.videoMaxSize);f=this.getVideoContStyle(w)}if(g){var x=Le(this.settings.iframeWidth,this.settings.iframeHeight,this.settings.iframeMaxWidth,this.settings.iframeMaxHeight,d,r.iframeTitle);s.prepend(x)}else if(n){var T="";m&&this.zoomFromOrigin&&this.currentImageSize&&(T=this.getDummyImageContent(s,e,""));x=Fe(n,T||"",f,this.settings.strings.playVideo,p);s.prepend(x)}else if(p){x='<div class="lg-video-cont " style="'+f+'"></div>';s.prepend(x)}else if(this.setImgMarkup(d,s,e),a||l){var S=s.find(".lg-object");this.initPictureFill(S)}(n||p)&&this.LGel.trigger(de,{index:e,src:d,html5Video:u,hasPoster:!!n}),this.LGel.trigger(oe,{index:e}),this.lGalleryOn&&".lg-item"===this.settings.appendSubHtmlTo&&this.addHtml(e)}var C=0;v&&!Ie(document.body).hasClass("lg-from-hash")&&(C=v),this.isFirstSlideWithZoomAnimation()&&(setTimeout((function(){s.removeClass("lg-start-end-progress lg-start-progress").removeAttr("style")}),this.settings.startAnimationDuration+100),s.hasClass("lg-loaded")||setTimeout((function(){if("image"===i.getSlideType(r)){var t=r.alt,c=t?'alt="'+t+'"':"";if(s.find(".lg-img-wrap").append(De(e,d,c,a,o,r.sources)),a||l){var u=s.find(".lg-object");i.initPictureFill(u)}}("image"===i.getSlideType(r)||"video"===i.getSlideType(r)&&n)&&(i.onLgObjectLoad(s,e,v,C,!0,!1),i.onSlideObjectLoad(s,!(!p||!p.html5||n),(function(){i.loadContentOnFirstSlideLoad(e,s,C)}),(function(){i.loadContentOnFirstSlideLoad(e,s,C)})))}),this.settings.startAnimationDuration+100)),s.addClass("lg-loaded"),this.isFirstSlideWithZoomAnimation()&&("video"!==this.getSlideType(r)||n)||this.onLgObjectLoad(s,e,v,C,m,!(!p||!p.html5||n)),this.zoomFromOrigin&&this.currentImageSize||!s.hasClass("lg-complete_")||this.lGalleryOn||setTimeout((function(){s.addClass("lg-complete")}),this.settings.backdropDuration),this.lGalleryOn=!0,!0===t&&(s.hasClass("lg-complete_")?this.preload(e):s.find(".lg-object").first().on("load.lg error.lg",(function(){i.preload(e)})))},e.prototype.loadContentOnFirstSlideLoad=function(e,t,i){var r=this;setTimeout((function(){t.find(".lg-dummy-img").remove(),t.removeClass("lg-first-slide"),r.outer.removeClass("lg-first-slide-loading"),r.isDummyImageRemoved=!0,r.preload(e)}),i+300)},e.prototype.getItemsToBeInsertedToDom=function(e,t,i){var r=this;void 0===i&&(i=0);var s=[],n=Math.max(i,3);n=Math.min(n,this.galleryItems.length);var a="lg-item-"+this.lgId+"-"+t;if(this.galleryItems.length<=3)return this.galleryItems.forEach((function(e,t){s.push("lg-item-"+r.lgId+"-"+t)})),s;if(e<(this.galleryItems.length-1)/2){for(var o=e;o>e-n/2&&o>=0;o--)s.push("lg-item-"+this.lgId+"-"+o);var l=s.length;for(o=0;o<n-l;o++)s.push("lg-item-"+this.lgId+"-"+(e+o+1))}else{for(o=e;o<=this.galleryItems.length-1&&o<e+n/2;o++)s.push("lg-item-"+this.lgId+"-"+o);for(l=s.length,o=0;o<n-l;o++)s.push("lg-item-"+this.lgId+"-"+(e-o-1))}return this.settings.loop&&(e===this.galleryItems.length-1?s.push("lg-item-"+this.lgId+"-0"):0===e&&s.push("lg-item-"+this.lgId+"-"+(this.galleryItems.length-1))),-1===s.indexOf(a)&&s.push("lg-item-"+this.lgId+"-"+t),s},e.prototype.organizeSlideItems=function(e,t){var i=this,r=this.getItemsToBeInsertedToDom(e,t,this.settings.numberOfSlideItemsInDom);return r.forEach((function(e){-1===i.currentItemsInDom.indexOf(e)&&i.$inner.append('<div id="'+e+'" class="lg-item"></div>')})),this.currentItemsInDom.forEach((function(e){-1===r.indexOf(e)&&Ie("#"+e).remove()})),r},e.prototype.getPreviousSlideIndex=function(){var e=0;try{var t=this.outer.find(".lg-current").first().attr("id");e=parseInt(t.split("-")[3])||0}catch(t){e=0}return e},e.prototype.setDownloadValue=function(e){if(this.settings.download){var t=this.galleryItems[e];if(!1===t.downloadUrl||"false"===t.downloadUrl)this.outer.addClass("lg-hide-download");else{var i=this.getElementById("lg-download");this.outer.removeClass("lg-hide-download"),i.attr("href",t.downloadUrl||t.src),t.download&&i.attr("download",t.download)}}},e.prototype.makeSlideAnimation=function(e,t,i){var r=this;this.lGalleryOn&&i.addClass("lg-slide-progress"),setTimeout((function(){r.outer.addClass("lg-no-trans"),r.outer.find(".lg-item").removeClass("lg-prev-slide lg-next-slide"),"prev"===e?(t.addClass("lg-prev-slide"),i.addClass("lg-next-slide")):(t.addClass("lg-next-slide"),i.addClass("lg-prev-slide")),setTimeout((function(){r.outer.find(".lg-item").removeClass("lg-current"),t.addClass("lg-current"),r.outer.removeClass("lg-no-trans")}),50)}),this.lGalleryOn?this.settings.slideDelay:0)},e.prototype.slide=function(e,t,i,r){var s=this,n=this.getPreviousSlideIndex();if(this.currentItemsInDom=this.organizeSlideItems(e,n),!this.lGalleryOn||n!==e){var a=this.galleryItems.length;if(!this.lgBusy){this.settings.counter&&this.updateCurrentCounter(e);var o=this.getSlideItem(e),l=this.getSlideItem(n),d=this.galleryItems[e],c=d.__slideVideoInfo;if(this.outer.attr("data-lg-slide-type",this.getSlideType(d)),this.setDownloadValue(e),c){var u=this.mediaContainerPosition,h=u.top,p=u.bottom,f=Ae(this.items[e],this.outer,h+p,c&&this.settings.videoMaxSize);this.resizeVideoSlide(e,f)}if(this.LGel.trigger(me,{prevIndex:n,index:e,fromTouch:!!t,fromThumb:!!i}),this.lgBusy=!0,clearTimeout(this.hideBarTimeout),this.arrowDisable(e),r||(e<n?r="prev":e>n&&(r="next")),t){this.outer.find(".lg-item").removeClass("lg-prev-slide lg-current lg-next-slide");var g=void 0,m=void 0;a>2?(g=e-1,m=e+1,(0===e&&n===a-1||e===a-1&&0===n)&&(m=0,g=a-1)):(g=0,m=1),"prev"===r?this.getSlideItem(m).addClass("lg-next-slide"):this.getSlideItem(g).addClass("lg-prev-slide"),o.addClass("lg-current")}else this.makeSlideAnimation(r,o,l);this.lGalleryOn?setTimeout((function(){s.loadContent(e,!0),".lg-item"!==s.settings.appendSubHtmlTo&&s.addHtml(e)}),this.settings.speed+50+(t?0:this.settings.slideDelay)):this.loadContent(e,!0),setTimeout((function(){s.lgBusy=!1,l.removeClass("lg-slide-progress"),s.LGel.trigger(ve,{prevIndex:n,index:e,fromTouch:t,fromThumb:i})}),(this.lGalleryOn?this.settings.speed+100:100)+(t?0:this.settings.slideDelay))}this.index=e}},e.prototype.updateCurrentCounter=function(e){this.getElementById("lg-counter-current").html(e+1+"")},e.prototype.updateCounterTotal=function(){this.getElementById("lg-counter-all").html(this.galleryItems.length+"")},e.prototype.getSlideType=function(e){return e.__slideVideoInfo?"video":e.iframe?"iframe":"image"},e.prototype.touchMove=function(e,t,i){var r=t.pageX-e.pageX,s=t.pageY-e.pageY,n=!1;if(this.swipeDirection?n=!0:Math.abs(r)>15?(this.swipeDirection="horizontal",n=!0):Math.abs(s)>15&&(this.swipeDirection="vertical",n=!0),n){var a=this.getSlideItem(this.index);if("horizontal"===this.swipeDirection){null==i||i.preventDefault(),this.outer.addClass("lg-dragging"),this.setTranslate(a,r,0);var o=a.get().offsetWidth,l=15*o/100-Math.abs(10*r/100);this.setTranslate(this.outer.find(".lg-prev-slide").first(),-o+r-l,0),this.setTranslate(this.outer.find(".lg-next-slide").first(),o+r+l,0)}else if("vertical"===this.swipeDirection&&this.settings.swipeToClose){null==i||i.preventDefault(),this.$container.addClass("lg-dragging-vertical");var d=1-Math.abs(s)/window.innerHeight;this.$backdrop.css("opacity",d);var c=1-Math.abs(s)/(2*window.innerWidth);this.setTranslate(a,0,s,c,c),Math.abs(s)>100&&this.outer.addClass("lg-hide-items").removeClass("lg-components-open")}}},e.prototype.touchEnd=function(e,t,i){var r,s=this;"lg-slide"!==this.settings.mode&&this.outer.addClass("lg-slide"),setTimeout((function(){s.$container.removeClass("lg-dragging-vertical"),s.outer.removeClass("lg-dragging lg-hide-items").addClass("lg-components-open");var n=!0;if("horizontal"===s.swipeDirection){r=e.pageX-t.pageX;var a=Math.abs(e.pageX-t.pageX);r<0&&a>s.settings.swipeThreshold?(s.goToNextSlide(!0),n=!1):r>0&&a>s.settings.swipeThreshold&&(s.goToPrevSlide(!0),n=!1)}else if("vertical"===s.swipeDirection){if(r=Math.abs(e.pageY-t.pageY),s.settings.closable&&s.settings.swipeToClose&&r>100)return void s.closeGallery();s.$backdrop.css("opacity",1)}if(s.outer.find(".lg-item").removeAttr("style"),n&&Math.abs(e.pageX-t.pageX)<5){var o=Ie(i.target);s.isPosterElement(o)&&s.LGel.trigger(ye)}s.swipeDirection=void 0})),setTimeout((function(){s.outer.hasClass("lg-dragging")||"lg-slide"===s.settings.mode||s.outer.removeClass("lg-slide")}),this.settings.speed+100)},e.prototype.enableSwipe=function(){var e=this,t={},i={},r=!1,s=!1;this.settings.enableSwipe&&(this.$inner.on("touchstart.lg",(function(i){e.dragOrSwipeEnabled=!0;var r=e.getSlideItem(e.index);!Ie(i.target).hasClass("lg-item")&&!r.get().contains(i.target)||e.outer.hasClass("lg-zoomed")||e.lgBusy||1!==i.touches.length||(s=!0,e.touchAction="swipe",e.manageSwipeClass(),t={pageX:i.touches[0].pageX,pageY:i.touches[0].pageY})})),this.$inner.on("touchmove.lg",(function(n){s&&"swipe"===e.touchAction&&1===n.touches.length&&(i={pageX:n.touches[0].pageX,pageY:n.touches[0].pageY},e.touchMove(t,i,n),r=!0)})),this.$inner.on("touchend.lg",(function(n){if("swipe"===e.touchAction){if(r)r=!1,e.touchEnd(i,t,n);else if(s){var a=Ie(n.target);e.isPosterElement(a)&&e.LGel.trigger(ye)}e.touchAction=void 0,s=!1}})))},e.prototype.enableDrag=function(){var e=this,t={},i={},r=!1,s=!1;this.settings.enableDrag&&(this.outer.on("mousedown.lg",(function(i){e.dragOrSwipeEnabled=!0;var s=e.getSlideItem(e.index);(Ie(i.target).hasClass("lg-item")||s.get().contains(i.target))&&(e.outer.hasClass("lg-zoomed")||e.lgBusy||(i.preventDefault(),e.lgBusy||(e.manageSwipeClass(),t={pageX:i.pageX,pageY:i.pageY},r=!0,e.outer.get().scrollLeft+=1,e.outer.get().scrollLeft-=1,e.outer.removeClass("lg-grab").addClass("lg-grabbing"),e.LGel.trigger(_e))))})),Ie(window).on("mousemove.lg.global"+this.lgId,(function(n){r&&e.lgOpened&&(s=!0,i={pageX:n.pageX,pageY:n.pageY},e.touchMove(t,i),e.LGel.trigger(be))})),Ie(window).on("mouseup.lg.global"+this.lgId,(function(n){if(e.lgOpened){var a=Ie(n.target);s?(s=!1,e.touchEnd(i,t,n),e.LGel.trigger(we)):e.isPosterElement(a)&&e.LGel.trigger(ye),r&&(r=!1,e.outer.removeClass("lg-grabbing").addClass("lg-grab"))}})))},e.prototype.triggerPosterClick=function(){var e=this;this.$inner.on("click.lg",(function(t){!e.dragOrSwipeEnabled&&e.isPosterElement(Ie(t.target))&&e.LGel.trigger(ye)}))},e.prototype.manageSwipeClass=function(){var e=this.index+1,t=this.index-1;this.settings.loop&&this.galleryItems.length>2&&(0===this.index?t=this.galleryItems.length-1:this.index===this.galleryItems.length-1&&(e=0)),this.outer.find(".lg-item").removeClass("lg-next-slide lg-prev-slide"),t>-1&&this.getSlideItem(t).addClass("lg-prev-slide"),this.getSlideItem(e).addClass("lg-next-slide")},e.prototype.goToNextSlide=function(e){var t=this,i=this.settings.loop;e&&this.galleryItems.length<3&&(i=!1),this.lgBusy||(this.index+1<this.galleryItems.length?(this.index++,this.LGel.trigger(xe,{index:this.index}),this.slide(this.index,!!e,!1,"next")):i?(this.index=0,this.LGel.trigger(xe,{index:this.index}),this.slide(this.index,!!e,!1,"next")):this.settings.slideEndAnimation&&!e&&(this.outer.addClass("lg-right-end"),setTimeout((function(){t.outer.removeClass("lg-right-end")}),400)))},e.prototype.goToPrevSlide=function(e){var t=this,i=this.settings.loop;e&&this.galleryItems.length<3&&(i=!1),this.lgBusy||(this.index>0?(this.index--,this.LGel.trigger(Te,{index:this.index,fromTouch:e}),this.slide(this.index,!!e,!1,"prev")):i?(this.index=this.galleryItems.length-1,this.LGel.trigger(Te,{index:this.index,fromTouch:e}),this.slide(this.index,!!e,!1,"prev")):this.settings.slideEndAnimation&&!e&&(this.outer.addClass("lg-left-end"),setTimeout((function(){t.outer.removeClass("lg-left-end")}),400)))},e.prototype.keyPress=function(){var e=this;Ie(window).on("keydown.lg.global"+this.lgId,(function(t){e.lgOpened&&!0===e.settings.escKey&&27===t.keyCode&&(t.preventDefault(),e.settings.allowMediaOverlap&&e.outer.hasClass("lg-can-toggle")&&e.outer.hasClass("lg-components-open")?e.outer.removeClass("lg-components-open"):e.closeGallery()),e.lgOpened&&e.galleryItems.length>1&&(37===t.keyCode&&(t.preventDefault(),e.goToPrevSlide()),39===t.keyCode&&(t.preventDefault(),e.goToNextSlide()))}))},e.prototype.arrow=function(){var e=this;this.getElementById("lg-prev").on("click.lg",(function(){e.goToPrevSlide()})),this.getElementById("lg-next").on("click.lg",(function(){e.goToNextSlide()}))},e.prototype.arrowDisable=function(e){if(!this.settings.loop&&this.settings.hideControlOnEnd){var t=this.getElementById("lg-prev"),i=this.getElementById("lg-next");e+1===this.galleryItems.length?i.attr("disabled","disabled").addClass("disabled"):i.removeAttr("disabled").removeClass("disabled"),0===e?t.attr("disabled","disabled").addClass("disabled"):t.removeAttr("disabled").removeClass("disabled")}},e.prototype.setTranslate=function(e,t,i,r,s){void 0===r&&(r=1),void 0===s&&(s=1),e.css("transform","translate3d("+t+"px, "+i+"px, 0px) scale3d("+r+", "+s+", 1)")},e.prototype.mousewheel=function(){var e=this,t=0;this.outer.on("wheel.lg",(function(i){if(i.deltaY&&!(e.galleryItems.length<2)){i.preventDefault();var r=(new Date).getTime();r-t<1e3||(t=r,i.deltaY>0?e.goToNextSlide():i.deltaY<0&&e.goToPrevSlide())}}))},e.prototype.isSlideElement=function(e){return e.hasClass("lg-outer")||e.hasClass("lg-item")||e.hasClass("lg-img-wrap")},e.prototype.isPosterElement=function(e){var t=this.getSlideItem(this.index).find(".lg-video-play-button").get();return e.hasClass("lg-video-poster")||e.hasClass("lg-video-play-button")||t&&t.contains(e.get())},e.prototype.toggleMaximize=function(){var e=this;this.getElementById("lg-maximize").on("click.lg",(function(){e.$container.toggleClass("lg-inline"),e.refreshOnResize()}))},e.prototype.invalidateItems=function(){for(var e=0;e<this.items.length;e++){var t=Ie(this.items[e]);t.off("click.lgcustom-item-"+t.attr("data-lg-id"))}},e.prototype.trapFocus=function(){var e=this;this.$container.get().focus({preventScroll:!0}),Ie(window).on("keydown.lg.global"+this.lgId,(function(t){if(e.lgOpened&&("Tab"===t.key||9===t.keyCode)){var i=Ge(e.$container.get()),r=i[0],s=i[i.length-1];t.shiftKey?document.activeElement===r&&(s.focus(),t.preventDefault()):document.activeElement===s&&(r.focus(),t.preventDefault())}}))},e.prototype.manageCloseGallery=function(){var e=this;if(this.settings.closable){var t=!1;this.getElementById("lg-close").on("click.lg",(function(){e.closeGallery()})),this.settings.closeOnTap&&(this.outer.on("mousedown.lg",(function(i){var r=Ie(i.target);t=!!e.isSlideElement(r)})),this.outer.on("mousemove.lg",(function(){t=!1})),this.outer.on("mouseup.lg",(function(i){var r=Ie(i.target);e.isSlideElement(r)&&t&&(e.outer.hasClass("lg-dragging")||e.closeGallery())})))}},e.prototype.closeGallery=function(e){var t=this;if(!this.lgOpened||!this.settings.closable&&!e)return 0;this.LGel.trigger(Se),this.settings.resetScrollPosition&&!this.settings.hideScrollbar&&Ie(window).scrollTop(this.prevScrollTop);var i,r=this.items[this.index];if(this.zoomFromOrigin&&r){var s=this.mediaContainerPosition,n=s.top,a=s.bottom,o=this.galleryItems[this.index],l=o.__slideVideoInfo,d=o.poster,c=Ae(r,this.outer,n+a,l&&d&&this.settings.videoMaxSize);i=Pe(r,this.outer,n,a,c)}this.zoomFromOrigin&&i?(this.outer.addClass("lg-closing lg-zoom-from-image"),this.getSlideItem(this.index).addClass("lg-start-end-progress").css("transition-duration",this.settings.startAnimationDuration+"ms").css("transform",i)):(this.outer.addClass("lg-hide-items"),this.outer.removeClass("lg-zoom-from-image")),this.destroyModules(),this.lGalleryOn=!1,this.isDummyImageRemoved=!1,this.zoomFromOrigin=this.settings.zoomFromOrigin,clearTimeout(this.hideBarTimeout),this.hideBarTimeout=!1,Ie("html").removeClass("lg-on"),this.outer.removeClass("lg-visible lg-components-open"),this.$backdrop.removeClass("in").css("opacity",0);var u=this.zoomFromOrigin&&i?Math.max(this.settings.startAnimationDuration,this.settings.backdropDuration):this.settings.backdropDuration;return this.$container.removeClass("lg-show-in"),setTimeout((function(){t.zoomFromOrigin&&i&&t.outer.removeClass("lg-zoom-from-image"),t.$container.removeClass("lg-show"),t.resetScrollBar(),t.$backdrop.removeAttr("style").css("transition-duration",t.settings.backdropDuration+"ms"),t.outer.removeClass("lg-closing "+t.settings.startClass),t.getSlideItem(t.index).removeClass("lg-start-end-progress"),t.$inner.empty(),t.lgOpened&&t.LGel.trigger(Ce,{instance:t}),t.$container.get()&&t.$container.get().blur(),t.lgOpened=!1}),u+100),u+100},e.prototype.initModules=function(){this.plugins.forEach((function(e){try{e.init()}catch(e){console.warn("lightGallery:- make sure lightGallery module is properly initiated")}}))},e.prototype.destroyModules=function(e){this.plugins.forEach((function(t){try{e?t.destroy():t.closeGallery&&t.closeGallery()}catch(e){console.warn("lightGallery:- make sure lightGallery module is properly destroyed")}}))},e.prototype.refresh=function(e){this.settings.dynamic||this.invalidateItems(),this.galleryItems=e||this.getItems(),this.updateControls(),this.openGalleryOnItemClick(),this.LGel.trigger(ue)},e.prototype.updateControls=function(){this.addSlideVideoInfo(this.galleryItems),this.updateCounterTotal(),this.manageSingleSlideClassName()},e.prototype.destroyGallery=function(){this.destroyModules(!0),this.settings.dynamic||this.invalidateItems(),Ie(window).off(".lg.global"+this.lgId),this.LGel.off(".lg"),this.$container.remove()},e.prototype.destroy=function(){var e=this.closeGallery(!0);return e?setTimeout(this.destroyGallery.bind(this),e):this.destroyGallery(),e},e}();const Ve=function(e,t){return new He(e,t)};document.querySelectorAll("[data-lightgallery]").length&&s.e(340).then(s.bind(s,340));document.querySelectorAll("[data-lightgallery]").length&&document.querySelectorAll("[data-lightgallery]").forEach((e=>{const t=e.querySelector(".media__text"),i=e.querySelector(".media__description"),r=Ve(e,{speed:500,licenseKey:"7EC452A9-0CFD441C-BD984C7C-17C8456E",appendCounterTo:".lg-content",selector:".media__image-wrap"});e.addEventListener("lgBeforeOpen",(e=>{const s=r.$container.firstElement.querySelector(".lg-outer");t&&s.append(t),i&&s.append(i)}))}));let Xe=!0;const je=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:500;Xe&&(setTimeout((()=>{document.documentElement.classList.remove("lock")}),e),Xe=!1,setTimeout((function(){Xe=!0}),e))},Ye=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:500;Xe&&(document.documentElement.classList.add("lock"),Xe=!1,setTimeout((function(){Xe=!0}),e))};s(976),s(691);function We(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Ue(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}
/*!
 * GSAP 3.12.5
 * https://gsap.com
 *
 * @license Copyright 2008-2024, GreenSock. All rights reserved.
 * Subject to the terms at https://gsap.com/standard-license or for
 * Club GSAP members, the agreement issued with that membership.
 * @author: Jack Doyle, jack@greensock.com
*/var Ke,Qe,Ze,Je,et,tt,it,rt,st,nt,at,ot,lt,dt,ct,ut={autoSleep:120,force3D:"auto",nullTargetWarn:1,units:{lineHeight:""}},ht={duration:.5,overwrite:!1,delay:0},pt=1e8,ft=1e-8,gt=2*Math.PI,mt=gt/4,vt=0,yt=Math.sqrt,_t=Math.cos,bt=Math.sin,wt=function(e){return"string"==typeof e},xt=function(e){return"function"==typeof e},Tt=function(e){return"number"==typeof e},St=function(e){return void 0===e},Ct=function(e){return"object"==typeof e},Et=function(e){return!1!==e},Mt=function(){return"undefined"!=typeof window},It=function(e){return xt(e)||wt(e)},kt="function"==typeof ArrayBuffer&&ArrayBuffer.isView||function(){},Ot=Array.isArray,At=/(?:-?\.?\d|\.)+/gi,Pt=/[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g,Lt=/[-+=.]*\d+[.e-]*\d*[a-z%]*/g,Dt=/[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi,zt=/[+-]=-?[.\d]+/,Bt=/[^,'"\[\]\s]+/gi,Ft=/^[+\-=e\s\d]*\d+[.\d]*([a-z]*|%)\s*$/i,Gt={},Nt={},Rt=function(e){return(Nt=gi(e,Gt))&&ms},$t=function(e,t){return console.warn("Invalid property",e,"set to",t,"Missing plugin? gsap.registerPlugin()")},qt=function(e,t){return!t&&console.warn(e)},Ht=function(e,t){return e&&(Gt[e]=t)&&Nt&&(Nt[e]=t)||Gt},Vt=function(){return 0},Xt={suppressEvents:!0,isStart:!0,kill:!1},jt={suppressEvents:!0,kill:!1},Yt={suppressEvents:!0},Wt={},Ut=[],Kt={},Qt={},Zt={},Jt=30,ei=[],ti="",ii=function(e){var t,i,r=e[0];if(Ct(r)||xt(r)||(e=[e]),!(t=(r._gsap||{}).harness)){for(i=ei.length;i--&&!ei[i].targetTest(r););t=ei[i]}for(i=e.length;i--;)e[i]&&(e[i]._gsap||(e[i]._gsap=new Or(e[i],t)))||e.splice(i,1);return e},ri=function(e){return e._gsap||ii(Yi(e))[0]._gsap},si=function(e,t,i){return(i=e[t])&&xt(i)?e[t]():St(i)&&e.getAttribute&&e.getAttribute(t)||i},ni=function(e,t){return(e=e.split(",")).forEach(t)||e},ai=function(e){return Math.round(1e5*e)/1e5||0},oi=function(e){return Math.round(1e7*e)/1e7||0},li=function(e,t){var i=t.charAt(0),r=parseFloat(t.substr(2));return e=parseFloat(e),"+"===i?e+r:"-"===i?e-r:"*"===i?e*r:e/r},di=function(e,t){for(var i=t.length,r=0;e.indexOf(t[r])<0&&++r<i;);return r<i},ci=function(){var e,t,i=Ut.length,r=Ut.slice(0);for(Kt={},Ut.length=0,e=0;e<i;e++)(t=r[e])&&t._lazy&&(t.render(t._lazy[0],t._lazy[1],!0)._lazy=0)},ui=function(e,t,i,r){Ut.length&&!Qe&&ci(),e.render(t,i,r||Qe&&t<0&&(e._initted||e._startAt)),Ut.length&&!Qe&&ci()},hi=function(e){var t=parseFloat(e);return(t||0===t)&&(e+"").match(Bt).length<2?t:wt(e)?e.trim():e},pi=function(e){return e},fi=function(e,t){for(var i in t)i in e||(e[i]=t[i]);return e},gi=function(e,t){for(var i in t)e[i]=t[i];return e},mi=function e(t,i){for(var r in i)"__proto__"!==r&&"constructor"!==r&&"prototype"!==r&&(t[r]=Ct(i[r])?e(t[r]||(t[r]={}),i[r]):i[r]);return t},vi=function(e,t){var i,r={};for(i in e)i in t||(r[i]=e[i]);return r},yi=function(e){var t,i=e.parent||Je,r=e.keyframes?(t=Ot(e.keyframes),function(e,i){for(var r in i)r in e||"duration"===r&&t||"ease"===r||(e[r]=i[r])}):fi;if(Et(e.inherit))for(;i;)r(e,i.vars.defaults),i=i.parent||i._dp;return e},_i=function(e,t,i,r,s){void 0===i&&(i="_first"),void 0===r&&(r="_last");var n,a=e[r];if(s)for(n=t[s];a&&a[s]>n;)a=a._prev;return a?(t._next=a._next,a._next=t):(t._next=e[i],e[i]=t),t._next?t._next._prev=t:e[r]=t,t._prev=a,t.parent=t._dp=e,t},bi=function(e,t,i,r){void 0===i&&(i="_first"),void 0===r&&(r="_last");var s=t._prev,n=t._next;s?s._next=n:e[i]===t&&(e[i]=n),n?n._prev=s:e[r]===t&&(e[r]=s),t._next=t._prev=t.parent=null},wi=function(e,t){e.parent&&(!t||e.parent.autoRemoveChildren)&&e.parent.remove&&e.parent.remove(e),e._act=0},xi=function(e,t){if(e&&(!t||t._end>e._dur||t._start<0))for(var i=e;i;)i._dirty=1,i=i.parent;return e},Ti=function(e,t,i,r){return e._startAt&&(Qe?e._startAt.revert(jt):e.vars.immediateRender&&!e.vars.autoRevert||e._startAt.render(t,!0,r))},Si=function e(t){return!t||t._ts&&e(t.parent)},Ci=function(e){return e._repeat?Ei(e._tTime,e=e.duration()+e._rDelay)*e:0},Ei=function(e,t){var i=Math.floor(e/=t);return e&&i===e?i-1:i},Mi=function(e,t){return(e-t._start)*t._ts+(t._ts>=0?0:t._dirty?t.totalDuration():t._tDur)},Ii=function(e){return e._end=oi(e._start+(e._tDur/Math.abs(e._ts||e._rts||ft)||0))},ki=function(e,t){var i=e._dp;return i&&i.smoothChildTiming&&e._ts&&(e._start=oi(i._time-(e._ts>0?t/e._ts:((e._dirty?e.totalDuration():e._tDur)-t)/-e._ts)),Ii(e),i._dirty||xi(i,e)),e},Oi=function(e,t){var i;if((t._time||!t._dur&&t._initted||t._start<e._time&&(t._dur||!t.add))&&(i=Mi(e.rawTime(),t),(!t._dur||qi(0,t.totalDuration(),i)-t._tTime>ft)&&t.render(i,!0)),xi(e,t)._dp&&e._initted&&e._time>=e._dur&&e._ts){if(e._dur<e.duration())for(i=e;i._dp;)i.rawTime()>=0&&i.totalTime(i._tTime),i=i._dp;e._zTime=-1e-8}},Ai=function(e,t,i,r){return t.parent&&wi(t),t._start=oi((Tt(i)?i:i||e!==Je?Ni(e,i,t):e._time)+t._delay),t._end=oi(t._start+(t.totalDuration()/Math.abs(t.timeScale())||0)),_i(e,t,"_first","_last",e._sort?"_start":0),zi(t)||(e._recent=t),r||Oi(e,t),e._ts<0&&ki(e,e._tTime),e},Pi=function(e,t){return(Gt.ScrollTrigger||$t("scrollTrigger",t))&&Gt.ScrollTrigger.create(t,e)},Li=function(e,t,i,r,s){return Gr(e,t,s),e._initted?!i&&e._pt&&!Qe&&(e._dur&&!1!==e.vars.lazy||!e._dur&&e.vars.lazy)&&st!==vr.frame?(Ut.push(e),e._lazy=[s,r],1):void 0:1},Di=function e(t){var i=t.parent;return i&&i._ts&&i._initted&&!i._lock&&(i.rawTime()<0||e(i))},zi=function(e){var t=e.data;return"isFromStart"===t||"isStart"===t},Bi=function(e,t,i,r){var s=e._repeat,n=oi(t)||0,a=e._tTime/e._tDur;return a&&!r&&(e._time*=n/e._dur),e._dur=n,e._tDur=s?s<0?1e10:oi(n*(s+1)+e._rDelay*s):n,a>0&&!r&&ki(e,e._tTime=e._tDur*a),e.parent&&Ii(e),i||xi(e.parent,e),e},Fi=function(e){return e instanceof Pr?xi(e):Bi(e,e._dur)},Gi={_start:0,endTime:Vt,totalDuration:Vt},Ni=function e(t,i,r){var s,n,a,o=t.labels,l=t._recent||Gi,d=t.duration()>=pt?l.endTime(!1):t._dur;return wt(i)&&(isNaN(i)||i in o)?(n=i.charAt(0),a="%"===i.substr(-1),s=i.indexOf("="),"<"===n||">"===n?(s>=0&&(i=i.replace(/=/,"")),("<"===n?l._start:l.endTime(l._repeat>=0))+(parseFloat(i.substr(1))||0)*(a?(s<0?l:r).totalDuration()/100:1)):s<0?(i in o||(o[i]=d),o[i]):(n=parseFloat(i.charAt(s-1)+i.substr(s+1)),a&&r&&(n=n/100*(Ot(r)?r[0]:r).totalDuration()),s>1?e(t,i.substr(0,s-1),r)+n:d+n)):null==i?d:+i},Ri=function(e,t,i){var r,s,n=Tt(t[1]),a=(n?2:1)+(e<2?0:1),o=t[a];if(n&&(o.duration=t[1]),o.parent=i,e){for(r=o,s=i;s&&!("immediateRender"in r);)r=s.vars.defaults||{},s=Et(s.vars.inherit)&&s.parent;o.immediateRender=Et(r.immediateRender),e<2?o.runBackwards=1:o.startAt=t[a-1]}return new Hr(t[0],o,t[a+1])},$i=function(e,t){return e||0===e?t(e):t},qi=function(e,t,i){return i<e?e:i>t?t:i},Hi=function(e,t){return wt(e)&&(t=Ft.exec(e))?t[1]:""},Vi=[].slice,Xi=function(e,t){return e&&Ct(e)&&"length"in e&&(!t&&!e.length||e.length-1 in e&&Ct(e[0]))&&!e.nodeType&&e!==et},ji=function(e,t,i){return void 0===i&&(i=[]),e.forEach((function(e){var r;return wt(e)&&!t||Xi(e,1)?(r=i).push.apply(r,Yi(e)):i.push(e)}))||i},Yi=function(e,t,i){return Ze&&!t&&Ze.selector?Ze.selector(e):!wt(e)||i||!tt&&yr()?Ot(e)?ji(e,i):Xi(e)?Vi.call(e,0):e?[e]:[]:Vi.call((t||it).querySelectorAll(e),0)},Wi=function(e){return e=Yi(e)[0]||qt("Invalid scope")||{},function(t){var i=e.current||e.nativeElement||e;return Yi(t,i.querySelectorAll?i:i===e?qt("Invalid scope")||it.createElement("div"):e)}},Ui=function(e){return e.sort((function(){return.5-Math.random()}))},Ki=function(e){if(xt(e))return e;var t=Ct(e)?e:{each:e},i=Cr(t.ease),r=t.from||0,s=parseFloat(t.base)||0,n={},a=r>0&&r<1,o=isNaN(r)||a,l=t.axis,d=r,c=r;return wt(r)?d=c={center:.5,edges:.5,end:1}[r]||0:!a&&o&&(d=r[0],c=r[1]),function(e,a,u){var h,p,f,g,m,v,y,_,b,w=(u||t).length,x=n[w];if(!x){if(!(b="auto"===t.grid?0:(t.grid||[1,pt])[1])){for(y=-pt;y<(y=u[b++].getBoundingClientRect().left)&&b<w;);b<w&&b--}for(x=n[w]=[],h=o?Math.min(b,w)*d-.5:r%b,p=b===pt?0:o?w*c/b-.5:r/b|0,y=0,_=pt,v=0;v<w;v++)f=v%b-h,g=p-(v/b|0),x[v]=m=l?Math.abs("y"===l?g:f):yt(f*f+g*g),m>y&&(y=m),m<_&&(_=m);"random"===r&&Ui(x),x.max=y-_,x.min=_,x.v=w=(parseFloat(t.amount)||parseFloat(t.each)*(b>w?w-1:l?"y"===l?w/b:b:Math.max(b,w/b))||0)*("edges"===r?-1:1),x.b=w<0?s-w:s,x.u=Hi(t.amount||t.each)||0,i=i&&w<0?Tr(i):i}return w=(x[e]-x.min)/x.max||0,oi(x.b+(i?i(w):w)*x.v)+x.u}},Qi=function(e){var t=Math.pow(10,((e+"").split(".")[1]||"").length);return function(i){var r=oi(Math.round(parseFloat(i)/e)*e*t);return(r-r%1)/t+(Tt(i)?0:Hi(i))}},Zi=function(e,t){var i,r,s=Ot(e);return!s&&Ct(e)&&(i=s=e.radius||pt,e.values?(e=Yi(e.values),(r=!Tt(e[0]))&&(i*=i)):e=Qi(e.increment)),$i(t,s?xt(e)?function(t){return r=e(t),Math.abs(r-t)<=i?r:t}:function(t){for(var s,n,a=parseFloat(r?t.x:t),o=parseFloat(r?t.y:0),l=pt,d=0,c=e.length;c--;)(s=r?(s=e[c].x-a)*s+(n=e[c].y-o)*n:Math.abs(e[c]-a))<l&&(l=s,d=c);return d=!i||l<=i?e[d]:t,r||d===t||Tt(t)?d:d+Hi(t)}:Qi(e))},Ji=function(e,t,i,r){return $i(Ot(e)?!t:!0===i?!!(i=0):!r,(function(){return Ot(e)?e[~~(Math.random()*e.length)]:(i=i||1e-5)&&(r=i<1?Math.pow(10,(i+"").length-2):1)&&Math.floor(Math.round((e-i/2+Math.random()*(t-e+.99*i))/i)*i*r)/r}))},er=function(e,t,i){return $i(i,(function(i){return e[~~t(i)]}))},tr=function(e){for(var t,i,r,s,n=0,a="";~(t=e.indexOf("random(",n));)r=e.indexOf(")",t),s="["===e.charAt(t+7),i=e.substr(t+7,r-t-7).match(s?Bt:At),a+=e.substr(n,t-n)+Ji(s?i:+i[0],s?0:+i[1],+i[2]||1e-5),n=r+1;return a+e.substr(n,e.length-n)},ir=function(e,t,i,r,s){var n=t-e,a=r-i;return $i(s,(function(t){return i+((t-e)/n*a||0)}))},rr=function(e,t,i){var r,s,n,a=e.labels,o=pt;for(r in a)(s=a[r]-t)<0==!!i&&s&&o>(s=Math.abs(s))&&(n=r,o=s);return n},sr=function(e,t,i){var r,s,n,a=e.vars,o=a[t],l=Ze,d=e._ctx;if(o)return r=a[t+"Params"],s=a.callbackScope||e,i&&Ut.length&&ci(),d&&(Ze=d),n=r?o.apply(s,r):o.call(s),Ze=l,n},nr=function(e){return wi(e),e.scrollTrigger&&e.scrollTrigger.kill(!!Qe),e.progress()<1&&sr(e,"onInterrupt"),e},ar=[],or=function(e){if(e)if(e=!e.name&&e.default||e,Mt()||e.headless){var t=e.name,i=xt(e),r=t&&!i&&e.init?function(){this._props=[]}:e,s={init:Vt,render:Zr,add:Br,kill:es,modifier:Jr,rawVars:0},n={targetTest:0,get:0,getSetter:Wr,aliases:{},register:0};if(yr(),e!==r){if(Qt[t])return;fi(r,fi(vi(e,s),n)),gi(r.prototype,gi(s,vi(e,n))),Qt[r.prop=t]=r,e.targetTest&&(ei.push(r),Wt[t]=1),t=("css"===t?"CSS":t.charAt(0).toUpperCase()+t.substr(1))+"Plugin"}Ht(t,r),e.register&&e.register(ms,r,rs)}else ar.push(e)},lr=255,dr={aqua:[0,lr,lr],lime:[0,lr,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,lr],navy:[0,0,128],white:[lr,lr,lr],olive:[128,128,0],yellow:[lr,lr,0],orange:[lr,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[lr,0,0],pink:[lr,192,203],cyan:[0,lr,lr],transparent:[lr,lr,lr,0]},cr=function(e,t,i){return(6*(e+=e<0?1:e>1?-1:0)<1?t+(i-t)*e*6:e<.5?i:3*e<2?t+(i-t)*(2/3-e)*6:t)*lr+.5|0},ur=function(e,t,i){var r,s,n,a,o,l,d,c,u,h,p=e?Tt(e)?[e>>16,e>>8&lr,e&lr]:0:dr.black;if(!p){if(","===e.substr(-1)&&(e=e.substr(0,e.length-1)),dr[e])p=dr[e];else if("#"===e.charAt(0)){if(e.length<6&&(r=e.charAt(1),s=e.charAt(2),n=e.charAt(3),e="#"+r+r+s+s+n+n+(5===e.length?e.charAt(4)+e.charAt(4):"")),9===e.length)return[(p=parseInt(e.substr(1,6),16))>>16,p>>8&lr,p&lr,parseInt(e.substr(7),16)/255];p=[(e=parseInt(e.substr(1),16))>>16,e>>8&lr,e&lr]}else if("hsl"===e.substr(0,3))if(p=h=e.match(At),t){if(~e.indexOf("="))return p=e.match(Pt),i&&p.length<4&&(p[3]=1),p}else a=+p[0]%360/360,o=+p[1]/100,r=2*(l=+p[2]/100)-(s=l<=.5?l*(o+1):l+o-l*o),p.length>3&&(p[3]*=1),p[0]=cr(a+1/3,r,s),p[1]=cr(a,r,s),p[2]=cr(a-1/3,r,s);else p=e.match(At)||dr.transparent;p=p.map(Number)}return t&&!h&&(r=p[0]/lr,s=p[1]/lr,n=p[2]/lr,l=((d=Math.max(r,s,n))+(c=Math.min(r,s,n)))/2,d===c?a=o=0:(u=d-c,o=l>.5?u/(2-d-c):u/(d+c),a=d===r?(s-n)/u+(s<n?6:0):d===s?(n-r)/u+2:(r-s)/u+4,a*=60),p[0]=~~(a+.5),p[1]=~~(100*o+.5),p[2]=~~(100*l+.5)),i&&p.length<4&&(p[3]=1),p},hr=function(e){var t=[],i=[],r=-1;return e.split(fr).forEach((function(e){var s=e.match(Lt)||[];t.push.apply(t,s),i.push(r+=s.length+1)})),t.c=i,t},pr=function(e,t,i){var r,s,n,a,o="",l=(e+o).match(fr),d=t?"hsla(":"rgba(",c=0;if(!l)return e;if(l=l.map((function(e){return(e=ur(e,t,1))&&d+(t?e[0]+","+e[1]+"%,"+e[2]+"%,"+e[3]:e.join(","))+")"})),i&&(n=hr(e),(r=i.c).join(o)!==n.c.join(o)))for(a=(s=e.replace(fr,"1").split(Lt)).length-1;c<a;c++)o+=s[c]+(~r.indexOf(c)?l.shift()||d+"0,0,0,0)":(n.length?n:l.length?l:i).shift());if(!s)for(a=(s=e.split(fr)).length-1;c<a;c++)o+=s[c]+l[c];return o+s[a]},fr=function(){var e,t="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b";for(e in dr)t+="|"+e+"\\b";return new RegExp(t+")","gi")}(),gr=/hsl[a]?\(/,mr=function(e){var t,i=e.join(" ");if(fr.lastIndex=0,fr.test(i))return t=gr.test(i),e[1]=pr(e[1],t),e[0]=pr(e[0],t,hr(e[1])),!0},vr=function(){var e,t,i,r,s,n,a=Date.now,o=500,l=33,d=a(),c=d,u=1e3/240,h=u,p=[],f=function i(f){var g,m,v,y,_=a()-c,b=!0===f;if((_>o||_<0)&&(d+=_-l),((g=(v=(c+=_)-d)-h)>0||b)&&(y=++r.frame,s=v-1e3*r.time,r.time=v/=1e3,h+=g+(g>=u?4:u-g),m=1),b||(e=t(i)),m)for(n=0;n<p.length;n++)p[n](v,s,y,f)};return r={time:0,frame:0,tick:function(){f(!0)},deltaRatio:function(e){return s/(1e3/(e||60))},wake:function(){rt&&(!tt&&Mt()&&(et=tt=window,it=et.document||{},Gt.gsap=ms,(et.gsapVersions||(et.gsapVersions=[])).push(ms.version),Rt(Nt||et.GreenSockGlobals||!et.gsap&&et||{}),ar.forEach(or)),i="undefined"!=typeof requestAnimationFrame&&requestAnimationFrame,e&&r.sleep(),t=i||function(e){return setTimeout(e,h-1e3*r.time+1|0)},at=1,f(2))},sleep:function(){(i?cancelAnimationFrame:clearTimeout)(e),at=0,t=Vt},lagSmoothing:function(e,t){o=e||1/0,l=Math.min(t||33,o)},fps:function(e){u=1e3/(e||240),h=1e3*r.time+u},add:function(e,t,i){var s=t?function(t,i,n,a){e(t,i,n,a),r.remove(s)}:e;return r.remove(e),p[i?"unshift":"push"](s),yr(),s},remove:function(e,t){~(t=p.indexOf(e))&&p.splice(t,1)&&n>=t&&n--},_listeners:p}}(),yr=function(){return!at&&vr.wake()},_r={},br=/^[\d.\-M][\d.\-,\s]/,wr=/["']/g,xr=function(e){for(var t,i,r,s={},n=e.substr(1,e.length-3).split(":"),a=n[0],o=1,l=n.length;o<l;o++)i=n[o],t=o!==l-1?i.lastIndexOf(","):i.length,r=i.substr(0,t),s[a]=isNaN(r)?r.replace(wr,"").trim():+r,a=i.substr(t+1).trim();return s},Tr=function(e){return function(t){return 1-e(1-t)}},Sr=function e(t,i){for(var r,s=t._first;s;)s instanceof Pr?e(s,i):!s.vars.yoyoEase||s._yoyo&&s._repeat||s._yoyo===i||(s.timeline?e(s.timeline,i):(r=s._ease,s._ease=s._yEase,s._yEase=r,s._yoyo=i)),s=s._next},Cr=function(e,t){return e&&(xt(e)?e:_r[e]||function(e){var t,i,r,s,n=(e+"").split("("),a=_r[n[0]];return a&&n.length>1&&a.config?a.config.apply(null,~e.indexOf("{")?[xr(n[1])]:(t=e,i=t.indexOf("(")+1,r=t.indexOf(")"),s=t.indexOf("(",i),t.substring(i,~s&&s<r?t.indexOf(")",r+1):r)).split(",").map(hi)):_r._CE&&br.test(e)?_r._CE("",e):a}(e))||t},Er=function(e,t,i,r){void 0===i&&(i=function(e){return 1-t(1-e)}),void 0===r&&(r=function(e){return e<.5?t(2*e)/2:1-t(2*(1-e))/2});var s,n={easeIn:t,easeOut:i,easeInOut:r};return ni(e,(function(e){for(var t in _r[e]=Gt[e]=n,_r[s=e.toLowerCase()]=i,n)_r[s+("easeIn"===t?".in":"easeOut"===t?".out":".inOut")]=_r[e+"."+t]=n[t]})),n},Mr=function(e){return function(t){return t<.5?(1-e(1-2*t))/2:.5+e(2*(t-.5))/2}},Ir=function e(t,i,r){var s=i>=1?i:1,n=(r||(t?.3:.45))/(i<1?i:1),a=n/gt*(Math.asin(1/s)||0),o=function(e){return 1===e?1:s*Math.pow(2,-10*e)*bt((e-a)*n)+1},l="out"===t?o:"in"===t?function(e){return 1-o(1-e)}:Mr(o);return n=gt/n,l.config=function(i,r){return e(t,i,r)},l},kr=function e(t,i){void 0===i&&(i=1.70158);var r=function(e){return e?--e*e*((i+1)*e+i)+1:0},s="out"===t?r:"in"===t?function(e){return 1-r(1-e)}:Mr(r);return s.config=function(i){return e(t,i)},s};ni("Linear,Quad,Cubic,Quart,Quint,Strong",(function(e,t){var i=t<5?t+1:t;Er(e+",Power"+(i-1),t?function(e){return Math.pow(e,i)}:function(e){return e},(function(e){return 1-Math.pow(1-e,i)}),(function(e){return e<.5?Math.pow(2*e,i)/2:1-Math.pow(2*(1-e),i)/2}))})),_r.Linear.easeNone=_r.none=_r.Linear.easeIn,Er("Elastic",Ir("in"),Ir("out"),Ir()),ot=7.5625,dt=1/(lt=2.75),Er("Bounce",(function(e){return 1-ct(1-e)}),ct=function(e){return e<dt?ot*e*e:e<.7272727272727273?ot*Math.pow(e-1.5/lt,2)+.75:e<.9090909090909092?ot*(e-=2.25/lt)*e+.9375:ot*Math.pow(e-2.625/lt,2)+.984375}),Er("Expo",(function(e){return e?Math.pow(2,10*(e-1)):0})),Er("Circ",(function(e){return-(yt(1-e*e)-1)})),Er("Sine",(function(e){return 1===e?1:1-_t(e*mt)})),Er("Back",kr("in"),kr("out"),kr()),_r.SteppedEase=_r.steps=Gt.SteppedEase={config:function(e,t){void 0===e&&(e=1);var i=1/e,r=e+(t?0:1),s=t?1:0;return function(e){return((r*qi(0,.99999999,e)|0)+s)*i}}},ht.ease=_r["quad.out"],ni("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt",(function(e){return ti+=e+","+e+"Params,"}));var Or=function(e,t){this.id=vt++,e._gsap=this,this.target=e,this.harness=t,this.get=t?t.get:si,this.set=t?t.getSetter:Wr},Ar=function(){function e(e){this.vars=e,this._delay=+e.delay||0,(this._repeat=e.repeat===1/0?-2:e.repeat||0)&&(this._rDelay=e.repeatDelay||0,this._yoyo=!!e.yoyo||!!e.yoyoEase),this._ts=1,Bi(this,+e.duration,1,1),this.data=e.data,Ze&&(this._ctx=Ze,Ze.data.push(this)),at||vr.wake()}var t=e.prototype;return t.delay=function(e){return e||0===e?(this.parent&&this.parent.smoothChildTiming&&this.startTime(this._start+e-this._delay),this._delay=e,this):this._delay},t.duration=function(e){return arguments.length?this.totalDuration(this._repeat>0?e+(e+this._rDelay)*this._repeat:e):this.totalDuration()&&this._dur},t.totalDuration=function(e){return arguments.length?(this._dirty=0,Bi(this,this._repeat<0?e:(e-this._repeat*this._rDelay)/(this._repeat+1))):this._tDur},t.totalTime=function(e,t){if(yr(),!arguments.length)return this._tTime;var i=this._dp;if(i&&i.smoothChildTiming&&this._ts){for(ki(this,e),!i._dp||i.parent||Oi(i,this);i&&i.parent;)i.parent._time!==i._start+(i._ts>=0?i._tTime/i._ts:(i.totalDuration()-i._tTime)/-i._ts)&&i.totalTime(i._tTime,!0),i=i.parent;!this.parent&&this._dp.autoRemoveChildren&&(this._ts>0&&e<this._tDur||this._ts<0&&e>0||!this._tDur&&!e)&&Ai(this._dp,this,this._start-this._delay)}return(this._tTime!==e||!this._dur&&!t||this._initted&&Math.abs(this._zTime)===ft||!e&&!this._initted&&(this.add||this._ptLookup))&&(this._ts||(this._pTime=e),ui(this,e,t)),this},t.time=function(e,t){return arguments.length?this.totalTime(Math.min(this.totalDuration(),e+Ci(this))%(this._dur+this._rDelay)||(e?this._dur:0),t):this._time},t.totalProgress=function(e,t){return arguments.length?this.totalTime(this.totalDuration()*e,t):this.totalDuration()?Math.min(1,this._tTime/this._tDur):this.rawTime()>0?1:0},t.progress=function(e,t){return arguments.length?this.totalTime(this.duration()*(!this._yoyo||1&this.iteration()?e:1-e)+Ci(this),t):this.duration()?Math.min(1,this._time/this._dur):this.rawTime()>0?1:0},t.iteration=function(e,t){var i=this.duration()+this._rDelay;return arguments.length?this.totalTime(this._time+(e-1)*i,t):this._repeat?Ei(this._tTime,i)+1:1},t.timeScale=function(e,t){if(!arguments.length)return-1e-8===this._rts?0:this._rts;if(this._rts===e)return this;var i=this.parent&&this._ts?Mi(this.parent._time,this):this._tTime;return this._rts=+e||0,this._ts=this._ps||-1e-8===e?0:this._rts,this.totalTime(qi(-Math.abs(this._delay),this._tDur,i),!1!==t),Ii(this),function(e){for(var t=e.parent;t&&t.parent;)t._dirty=1,t.totalDuration(),t=t.parent;return e}(this)},t.paused=function(e){return arguments.length?(this._ps!==e&&(this._ps=e,e?(this._pTime=this._tTime||Math.max(-this._delay,this.rawTime()),this._ts=this._act=0):(yr(),this._ts=this._rts,this.totalTime(this.parent&&!this.parent.smoothChildTiming?this.rawTime():this._tTime||this._pTime,1===this.progress()&&Math.abs(this._zTime)!==ft&&(this._tTime-=ft)))),this):this._ps},t.startTime=function(e){if(arguments.length){this._start=e;var t=this.parent||this._dp;return t&&(t._sort||!this.parent)&&Ai(t,this,e-this._delay),this}return this._start},t.endTime=function(e){return this._start+(Et(e)?this.totalDuration():this.duration())/Math.abs(this._ts||1)},t.rawTime=function(e){var t=this.parent||this._dp;return t?e&&(!this._ts||this._repeat&&this._time&&this.totalProgress()<1)?this._tTime%(this._dur+this._rDelay):this._ts?Mi(t.rawTime(e),this):this._tTime:this._tTime},t.revert=function(e){void 0===e&&(e=Yt);var t=Qe;return Qe=e,(this._initted||this._startAt)&&(this.timeline&&this.timeline.revert(e),this.totalTime(-.01,e.suppressEvents)),"nested"!==this.data&&!1!==e.kill&&this.kill(),Qe=t,this},t.globalTime=function(e){for(var t=this,i=arguments.length?e:t.rawTime();t;)i=t._start+i/(Math.abs(t._ts)||1),t=t._dp;return!this.parent&&this._sat?this._sat.globalTime(e):i},t.repeat=function(e){return arguments.length?(this._repeat=e===1/0?-2:e,Fi(this)):-2===this._repeat?1/0:this._repeat},t.repeatDelay=function(e){if(arguments.length){var t=this._time;return this._rDelay=e,Fi(this),t?this.time(t):this}return this._rDelay},t.yoyo=function(e){return arguments.length?(this._yoyo=e,this):this._yoyo},t.seek=function(e,t){return this.totalTime(Ni(this,e),Et(t))},t.restart=function(e,t){return this.play().totalTime(e?-this._delay:0,Et(t))},t.play=function(e,t){return null!=e&&this.seek(e,t),this.reversed(!1).paused(!1)},t.reverse=function(e,t){return null!=e&&this.seek(e||this.totalDuration(),t),this.reversed(!0).paused(!1)},t.pause=function(e,t){return null!=e&&this.seek(e,t),this.paused(!0)},t.resume=function(){return this.paused(!1)},t.reversed=function(e){return arguments.length?(!!e!==this.reversed()&&this.timeScale(-this._rts||(e?-1e-8:0)),this):this._rts<0},t.invalidate=function(){return this._initted=this._act=0,this._zTime=-1e-8,this},t.isActive=function(){var e,t=this.parent||this._dp,i=this._start;return!(t&&!(this._ts&&this._initted&&t.isActive()&&(e=t.rawTime(!0))>=i&&e<this.endTime(!0)-ft))},t.eventCallback=function(e,t,i){var r=this.vars;return arguments.length>1?(t?(r[e]=t,i&&(r[e+"Params"]=i),"onUpdate"===e&&(this._onUpdate=t)):delete r[e],this):r[e]},t.then=function(e){var t=this;return new Promise((function(i){var r=xt(e)?e:pi,s=function(){var e=t.then;t.then=null,xt(r)&&(r=r(t))&&(r.then||r===t)&&(t.then=e),i(r),t.then=e};t._initted&&1===t.totalProgress()&&t._ts>=0||!t._tTime&&t._ts<0?s():t._prom=s}))},t.kill=function(){nr(this)},e}();fi(Ar.prototype,{_time:0,_start:0,_end:0,_tTime:0,_tDur:0,_dirty:0,_repeat:0,_yoyo:!1,parent:null,_initted:!1,_rDelay:0,_ts:1,_dp:0,ratio:0,_zTime:-1e-8,_prom:0,_ps:!1,_rts:1});var Pr=function(e){function t(t,i){var r;return void 0===t&&(t={}),(r=e.call(this,t)||this).labels={},r.smoothChildTiming=!!t.smoothChildTiming,r.autoRemoveChildren=!!t.autoRemoveChildren,r._sort=Et(t.sortChildren),Je&&Ai(t.parent||Je,We(r),i),t.reversed&&r.reverse(),t.paused&&r.paused(!0),t.scrollTrigger&&Pi(We(r),t.scrollTrigger),r}Ue(t,e);var i=t.prototype;return i.to=function(e,t,i){return Ri(0,arguments,this),this},i.from=function(e,t,i){return Ri(1,arguments,this),this},i.fromTo=function(e,t,i,r){return Ri(2,arguments,this),this},i.set=function(e,t,i){return t.duration=0,t.parent=this,yi(t).repeatDelay||(t.repeat=0),t.immediateRender=!!t.immediateRender,new Hr(e,t,Ni(this,i),1),this},i.call=function(e,t,i){return Ai(this,Hr.delayedCall(0,e,t),i)},i.staggerTo=function(e,t,i,r,s,n,a){return i.duration=t,i.stagger=i.stagger||r,i.onComplete=n,i.onCompleteParams=a,i.parent=this,new Hr(e,i,Ni(this,s)),this},i.staggerFrom=function(e,t,i,r,s,n,a){return i.runBackwards=1,yi(i).immediateRender=Et(i.immediateRender),this.staggerTo(e,t,i,r,s,n,a)},i.staggerFromTo=function(e,t,i,r,s,n,a,o){return r.startAt=i,yi(r).immediateRender=Et(r.immediateRender),this.staggerTo(e,t,r,s,n,a,o)},i.render=function(e,t,i){var r,s,n,a,o,l,d,c,u,h,p,f,g=this._time,m=this._dirty?this.totalDuration():this._tDur,v=this._dur,y=e<=0?0:oi(e),_=this._zTime<0!=e<0&&(this._initted||!v);if(this!==Je&&y>m&&e>=0&&(y=m),y!==this._tTime||i||_){if(g!==this._time&&v&&(y+=this._time-g,e+=this._time-g),r=y,u=this._start,l=!(c=this._ts),_&&(v||(g=this._zTime),(e||!t)&&(this._zTime=e)),this._repeat){if(p=this._yoyo,o=v+this._rDelay,this._repeat<-1&&e<0)return this.totalTime(100*o+e,t,i);if(r=oi(y%o),y===m?(a=this._repeat,r=v):((a=~~(y/o))&&a===y/o&&(r=v,a--),r>v&&(r=v)),h=Ei(this._tTime,o),!g&&this._tTime&&h!==a&&this._tTime-h*o-this._dur<=0&&(h=a),p&&1&a&&(r=v-r,f=1),a!==h&&!this._lock){var b=p&&1&h,w=b===(p&&1&a);if(a<h&&(b=!b),g=b?0:y%v?v:y,this._lock=1,this.render(g||(f?0:oi(a*o)),t,!v)._lock=0,this._tTime=y,!t&&this.parent&&sr(this,"onRepeat"),this.vars.repeatRefresh&&!f&&(this.invalidate()._lock=1),g&&g!==this._time||l!==!this._ts||this.vars.onRepeat&&!this.parent&&!this._act)return this;if(v=this._dur,m=this._tDur,w&&(this._lock=2,g=b?v:-1e-4,this.render(g,!0),this.vars.repeatRefresh&&!f&&this.invalidate()),this._lock=0,!this._ts&&!l)return this;Sr(this,f)}}if(this._hasPause&&!this._forcing&&this._lock<2&&(d=function(e,t,i){var r;if(i>t)for(r=e._first;r&&r._start<=i;){if("isPause"===r.data&&r._start>t)return r;r=r._next}else for(r=e._last;r&&r._start>=i;){if("isPause"===r.data&&r._start<t)return r;r=r._prev}}(this,oi(g),oi(r)),d&&(y-=r-(r=d._start))),this._tTime=y,this._time=r,this._act=!c,this._initted||(this._onUpdate=this.vars.onUpdate,this._initted=1,this._zTime=e,g=0),!g&&r&&!t&&!a&&(sr(this,"onStart"),this._tTime!==y))return this;if(r>=g&&e>=0)for(s=this._first;s;){if(n=s._next,(s._act||r>=s._start)&&s._ts&&d!==s){if(s.parent!==this)return this.render(e,t,i);if(s.render(s._ts>0?(r-s._start)*s._ts:(s._dirty?s.totalDuration():s._tDur)+(r-s._start)*s._ts,t,i),r!==this._time||!this._ts&&!l){d=0,n&&(y+=this._zTime=-1e-8);break}}s=n}else{s=this._last;for(var x=e<0?e:r;s;){if(n=s._prev,(s._act||x<=s._end)&&s._ts&&d!==s){if(s.parent!==this)return this.render(e,t,i);if(s.render(s._ts>0?(x-s._start)*s._ts:(s._dirty?s.totalDuration():s._tDur)+(x-s._start)*s._ts,t,i||Qe&&(s._initted||s._startAt)),r!==this._time||!this._ts&&!l){d=0,n&&(y+=this._zTime=x?-1e-8:ft);break}}s=n}}if(d&&!t&&(this.pause(),d.render(r>=g?0:-1e-8)._zTime=r>=g?1:-1,this._ts))return this._start=u,Ii(this),this.render(e,t,i);this._onUpdate&&!t&&sr(this,"onUpdate",!0),(y===m&&this._tTime>=this.totalDuration()||!y&&g)&&(u!==this._start&&Math.abs(c)===Math.abs(this._ts)||this._lock||((e||!v)&&(y===m&&this._ts>0||!y&&this._ts<0)&&wi(this,1),t||e<0&&!g||!y&&!g&&m||(sr(this,y===m&&e>=0?"onComplete":"onReverseComplete",!0),this._prom&&!(y<m&&this.timeScale()>0)&&this._prom())))}return this},i.add=function(e,t){var i=this;if(Tt(t)||(t=Ni(this,t,e)),!(e instanceof Ar)){if(Ot(e))return e.forEach((function(e){return i.add(e,t)})),this;if(wt(e))return this.addLabel(e,t);if(!xt(e))return this;e=Hr.delayedCall(0,e)}return this!==e?Ai(this,e,t):this},i.getChildren=function(e,t,i,r){void 0===e&&(e=!0),void 0===t&&(t=!0),void 0===i&&(i=!0),void 0===r&&(r=-pt);for(var s=[],n=this._first;n;)n._start>=r&&(n instanceof Hr?t&&s.push(n):(i&&s.push(n),e&&s.push.apply(s,n.getChildren(!0,t,i)))),n=n._next;return s},i.getById=function(e){for(var t=this.getChildren(1,1,1),i=t.length;i--;)if(t[i].vars.id===e)return t[i]},i.remove=function(e){return wt(e)?this.removeLabel(e):xt(e)?this.killTweensOf(e):(bi(this,e),e===this._recent&&(this._recent=this._last),xi(this))},i.totalTime=function(t,i){return arguments.length?(this._forcing=1,!this._dp&&this._ts&&(this._start=oi(vr.time-(this._ts>0?t/this._ts:(this.totalDuration()-t)/-this._ts))),e.prototype.totalTime.call(this,t,i),this._forcing=0,this):this._tTime},i.addLabel=function(e,t){return this.labels[e]=Ni(this,t),this},i.removeLabel=function(e){return delete this.labels[e],this},i.addPause=function(e,t,i){var r=Hr.delayedCall(0,t||Vt,i);return r.data="isPause",this._hasPause=1,Ai(this,r,Ni(this,e))},i.removePause=function(e){var t=this._first;for(e=Ni(this,e);t;)t._start===e&&"isPause"===t.data&&wi(t),t=t._next},i.killTweensOf=function(e,t,i){for(var r=this.getTweensOf(e,i),s=r.length;s--;)Lr!==r[s]&&r[s].kill(e,t);return this},i.getTweensOf=function(e,t){for(var i,r=[],s=Yi(e),n=this._first,a=Tt(t);n;)n instanceof Hr?di(n._targets,s)&&(a?(!Lr||n._initted&&n._ts)&&n.globalTime(0)<=t&&n.globalTime(n.totalDuration())>t:!t||n.isActive())&&r.push(n):(i=n.getTweensOf(s,t)).length&&r.push.apply(r,i),n=n._next;return r},i.tweenTo=function(e,t){t=t||{};var i,r=this,s=Ni(r,e),n=t,a=n.startAt,o=n.onStart,l=n.onStartParams,d=n.immediateRender,c=Hr.to(r,fi({ease:t.ease||"none",lazy:!1,immediateRender:!1,time:s,overwrite:"auto",duration:t.duration||Math.abs((s-(a&&"time"in a?a.time:r._time))/r.timeScale())||ft,onStart:function(){if(r.pause(),!i){var e=t.duration||Math.abs((s-(a&&"time"in a?a.time:r._time))/r.timeScale());c._dur!==e&&Bi(c,e,0,1).render(c._time,!0,!0),i=1}o&&o.apply(c,l||[])}},t));return d?c.render(0):c},i.tweenFromTo=function(e,t,i){return this.tweenTo(t,fi({startAt:{time:Ni(this,e)}},i))},i.recent=function(){return this._recent},i.nextLabel=function(e){return void 0===e&&(e=this._time),rr(this,Ni(this,e))},i.previousLabel=function(e){return void 0===e&&(e=this._time),rr(this,Ni(this,e),1)},i.currentLabel=function(e){return arguments.length?this.seek(e,!0):this.previousLabel(this._time+ft)},i.shiftChildren=function(e,t,i){void 0===i&&(i=0);for(var r,s=this._first,n=this.labels;s;)s._start>=i&&(s._start+=e,s._end+=e),s=s._next;if(t)for(r in n)n[r]>=i&&(n[r]+=e);return xi(this)},i.invalidate=function(t){var i=this._first;for(this._lock=0;i;)i.invalidate(t),i=i._next;return e.prototype.invalidate.call(this,t)},i.clear=function(e){void 0===e&&(e=!0);for(var t,i=this._first;i;)t=i._next,this.remove(i),i=t;return this._dp&&(this._time=this._tTime=this._pTime=0),e&&(this.labels={}),xi(this)},i.totalDuration=function(e){var t,i,r,s=0,n=this,a=n._last,o=pt;if(arguments.length)return n.timeScale((n._repeat<0?n.duration():n.totalDuration())/(n.reversed()?-e:e));if(n._dirty){for(r=n.parent;a;)t=a._prev,a._dirty&&a.totalDuration(),(i=a._start)>o&&n._sort&&a._ts&&!n._lock?(n._lock=1,Ai(n,a,i-a._delay,1)._lock=0):o=i,i<0&&a._ts&&(s-=i,(!r&&!n._dp||r&&r.smoothChildTiming)&&(n._start+=i/n._ts,n._time-=i,n._tTime-=i),n.shiftChildren(-i,!1,-Infinity),o=0),a._end>s&&a._ts&&(s=a._end),a=t;Bi(n,n===Je&&n._time>s?n._time:s,1,1),n._dirty=0}return n._tDur},t.updateRoot=function(e){if(Je._ts&&(ui(Je,Mi(e,Je)),st=vr.frame),vr.frame>=Jt){Jt+=ut.autoSleep||120;var t=Je._first;if((!t||!t._ts)&&ut.autoSleep&&vr._listeners.length<2){for(;t&&!t._ts;)t=t._next;t||vr.sleep()}}},t}(Ar);fi(Pr.prototype,{_lock:0,_hasPause:0,_forcing:0});var Lr,Dr,zr=function(e,t,i,r,s,n,a){var o,l,d,c,u,h,p,f,g=new rs(this._pt,e,t,0,1,Qr,null,s),m=0,v=0;for(g.b=i,g.e=r,i+="",(p=~(r+="").indexOf("random("))&&(r=tr(r)),n&&(n(f=[i,r],e,t),i=f[0],r=f[1]),l=i.match(Dt)||[];o=Dt.exec(r);)c=o[0],u=r.substring(m,o.index),d?d=(d+1)%5:"rgba("===u.substr(-5)&&(d=1),c!==l[v++]&&(h=parseFloat(l[v-1])||0,g._pt={_next:g._pt,p:u||1===v?u:",",s:h,c:"="===c.charAt(1)?li(h,c)-h:parseFloat(c)-h,m:d&&d<4?Math.round:0},m=Dt.lastIndex);return g.c=m<r.length?r.substring(m,r.length):"",g.fp=a,(zt.test(r)||p)&&(g.e=0),this._pt=g,g},Br=function(e,t,i,r,s,n,a,o,l,d){xt(r)&&(r=r(s||0,e,n));var c,u=e[t],h="get"!==i?i:xt(u)?l?e[t.indexOf("set")||!xt(e["get"+t.substr(3)])?t:"get"+t.substr(3)](l):e[t]():u,p=xt(u)?l?jr:Xr:Vr;if(wt(r)&&(~r.indexOf("random(")&&(r=tr(r)),"="===r.charAt(1)&&((c=li(h,r)+(Hi(h)||0))||0===c)&&(r=c)),!d||h!==r||Dr)return isNaN(h*r)||""===r?(!u&&!(t in e)&&$t(t,r),zr.call(this,e,t,h,r,p,o||ut.stringFilter,l)):(c=new rs(this._pt,e,t,+h||0,r-(h||0),"boolean"==typeof u?Kr:Ur,0,p),l&&(c.fp=l),a&&c.modifier(a,this,e),this._pt=c)},Fr=function(e,t,i,r,s,n){var a,o,l,d;if(Qt[e]&&!1!==(a=new Qt[e]).init(s,a.rawVars?t[e]:function(e,t,i,r,s){if(xt(e)&&(e=Rr(e,s,t,i,r)),!Ct(e)||e.style&&e.nodeType||Ot(e)||kt(e))return wt(e)?Rr(e,s,t,i,r):e;var n,a={};for(n in e)a[n]=Rr(e[n],s,t,i,r);return a}(t[e],r,s,n,i),i,r,n)&&(i._pt=o=new rs(i._pt,s,e,0,1,a.render,a,0,a.priority),i!==nt))for(l=i._ptLookup[i._targets.indexOf(s)],d=a._props.length;d--;)l[a._props[d]]=o;return a},Gr=function e(t,i,r){var s,n,a,o,l,d,c,u,h,p,f,g,m,v=t.vars,y=v.ease,_=v.startAt,b=v.immediateRender,w=v.lazy,x=v.onUpdate,T=v.runBackwards,S=v.yoyoEase,C=v.keyframes,E=v.autoRevert,M=t._dur,I=t._startAt,k=t._targets,O=t.parent,A=O&&"nested"===O.data?O.vars.targets:k,P="auto"===t._overwrite&&!Ke,L=t.timeline;if(L&&(!C||!y)&&(y="none"),t._ease=Cr(y,ht.ease),t._yEase=S?Tr(Cr(!0===S?y:S,ht.ease)):0,S&&t._yoyo&&!t._repeat&&(S=t._yEase,t._yEase=t._ease,t._ease=S),t._from=!L&&!!v.runBackwards,!L||C&&!v.stagger){if(g=(u=k[0]?ri(k[0]).harness:0)&&v[u.prop],s=vi(v,Wt),I&&(I._zTime<0&&I.progress(1),i<0&&T&&b&&!E?I.render(-1,!0):I.revert(T&&M?jt:Xt),I._lazy=0),_){if(wi(t._startAt=Hr.set(k,fi({data:"isStart",overwrite:!1,parent:O,immediateRender:!0,lazy:!I&&Et(w),startAt:null,delay:0,onUpdate:x&&function(){return sr(t,"onUpdate")},stagger:0},_))),t._startAt._dp=0,t._startAt._sat=t,i<0&&(Qe||!b&&!E)&&t._startAt.revert(jt),b&&M&&i<=0&&r<=0)return void(i&&(t._zTime=i))}else if(T&&M&&!I)if(i&&(b=!1),a=fi({overwrite:!1,data:"isFromStart",lazy:b&&!I&&Et(w),immediateRender:b,stagger:0,parent:O},s),g&&(a[u.prop]=g),wi(t._startAt=Hr.set(k,a)),t._startAt._dp=0,t._startAt._sat=t,i<0&&(Qe?t._startAt.revert(jt):t._startAt.render(-1,!0)),t._zTime=i,b){if(!i)return}else e(t._startAt,ft,ft);for(t._pt=t._ptCache=0,w=M&&Et(w)||w&&!M,n=0;n<k.length;n++){if(c=(l=k[n])._gsap||ii(k)[n]._gsap,t._ptLookup[n]=p={},Kt[c.id]&&Ut.length&&ci(),f=A===k?n:A.indexOf(l),u&&!1!==(h=new u).init(l,g||s,t,f,A)&&(t._pt=o=new rs(t._pt,l,h.name,0,1,h.render,h,0,h.priority),h._props.forEach((function(e){p[e]=o})),h.priority&&(d=1)),!u||g)for(a in s)Qt[a]&&(h=Fr(a,s,t,f,l,A))?h.priority&&(d=1):p[a]=o=Br.call(t,l,a,"get",s[a],f,A,0,v.stringFilter);t._op&&t._op[n]&&t.kill(l,t._op[n]),P&&t._pt&&(Lr=t,Je.killTweensOf(l,p,t.globalTime(i)),m=!t.parent,Lr=0),t._pt&&w&&(Kt[c.id]=1)}d&&is(t),t._onInit&&t._onInit(t)}t._onUpdate=x,t._initted=(!t._op||t._pt)&&!m,C&&i<=0&&L.render(pt,!0,!0)},Nr=function(e,t,i,r){var s,n,a=t.ease||r||"power1.inOut";if(Ot(t))n=i[e]||(i[e]=[]),t.forEach((function(e,i){return n.push({t:i/(t.length-1)*100,v:e,e:a})}));else for(s in t)n=i[s]||(i[s]=[]),"ease"===s||n.push({t:parseFloat(e),v:t[s],e:a})},Rr=function(e,t,i,r,s){return xt(e)?e.call(t,i,r,s):wt(e)&&~e.indexOf("random(")?tr(e):e},$r=ti+"repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase,autoRevert",qr={};ni($r+",id,stagger,delay,duration,paused,scrollTrigger",(function(e){return qr[e]=1}));var Hr=function(e){function t(t,i,r,s){var n;"number"==typeof i&&(r.duration=i,i=r,r=null);var a,o,l,d,c,u,h,p,f=(n=e.call(this,s?i:yi(i))||this).vars,g=f.duration,m=f.delay,v=f.immediateRender,y=f.stagger,_=f.overwrite,b=f.keyframes,w=f.defaults,x=f.scrollTrigger,T=f.yoyoEase,S=i.parent||Je,C=(Ot(t)||kt(t)?Tt(t[0]):"length"in i)?[t]:Yi(t);if(n._targets=C.length?ii(C):qt("GSAP target "+t+" not found. https://gsap.com",!ut.nullTargetWarn)||[],n._ptLookup=[],n._overwrite=_,b||y||It(g)||It(m)){if(i=n.vars,(a=n.timeline=new Pr({data:"nested",defaults:w||{},targets:S&&"nested"===S.data?S.vars.targets:C})).kill(),a.parent=a._dp=We(n),a._start=0,y||It(g)||It(m)){if(d=C.length,h=y&&Ki(y),Ct(y))for(c in y)~$r.indexOf(c)&&(p||(p={}),p[c]=y[c]);for(o=0;o<d;o++)(l=vi(i,qr)).stagger=0,T&&(l.yoyoEase=T),p&&gi(l,p),u=C[o],l.duration=+Rr(g,We(n),o,u,C),l.delay=(+Rr(m,We(n),o,u,C)||0)-n._delay,!y&&1===d&&l.delay&&(n._delay=m=l.delay,n._start+=m,l.delay=0),a.to(u,l,h?h(o,u,C):0),a._ease=_r.none;a.duration()?g=m=0:n.timeline=0}else if(b){yi(fi(a.vars.defaults,{ease:"none"})),a._ease=Cr(b.ease||i.ease||"none");var E,M,I,k=0;if(Ot(b))b.forEach((function(e){return a.to(C,e,">")})),a.duration();else{for(c in l={},b)"ease"===c||"easeEach"===c||Nr(c,b[c],l,b.easeEach);for(c in l)for(E=l[c].sort((function(e,t){return e.t-t.t})),k=0,o=0;o<E.length;o++)(I={ease:(M=E[o]).e,duration:(M.t-(o?E[o-1].t:0))/100*g})[c]=M.v,a.to(C,I,k),k+=I.duration;a.duration()<g&&a.to({},{duration:g-a.duration()})}}g||n.duration(g=a.duration())}else n.timeline=0;return!0!==_||Ke||(Lr=We(n),Je.killTweensOf(C),Lr=0),Ai(S,We(n),r),i.reversed&&n.reverse(),i.paused&&n.paused(!0),(v||!g&&!b&&n._start===oi(S._time)&&Et(v)&&Si(We(n))&&"nested"!==S.data)&&(n._tTime=-1e-8,n.render(Math.max(0,-m)||0)),x&&Pi(We(n),x),n}Ue(t,e);var i=t.prototype;return i.render=function(e,t,i){var r,s,n,a,o,l,d,c,u,h=this._time,p=this._tDur,f=this._dur,g=e<0,m=e>p-ft&&!g?p:e<ft?0:e;if(f){if(m!==this._tTime||!e||i||!this._initted&&this._tTime||this._startAt&&this._zTime<0!==g){if(r=m,c=this.timeline,this._repeat){if(a=f+this._rDelay,this._repeat<-1&&g)return this.totalTime(100*a+e,t,i);if(r=oi(m%a),m===p?(n=this._repeat,r=f):((n=~~(m/a))&&n===oi(m/a)&&(r=f,n--),r>f&&(r=f)),(l=this._yoyo&&1&n)&&(u=this._yEase,r=f-r),o=Ei(this._tTime,a),r===h&&!i&&this._initted&&n===o)return this._tTime=m,this;n!==o&&(c&&this._yEase&&Sr(c,l),this.vars.repeatRefresh&&!l&&!this._lock&&this._time!==a&&this._initted&&(this._lock=i=1,this.render(oi(a*n),!0).invalidate()._lock=0))}if(!this._initted){if(Li(this,g?e:r,i,t,m))return this._tTime=0,this;if(!(h===this._time||i&&this.vars.repeatRefresh&&n!==o))return this;if(f!==this._dur)return this.render(e,t,i)}if(this._tTime=m,this._time=r,!this._act&&this._ts&&(this._act=1,this._lazy=0),this.ratio=d=(u||this._ease)(r/f),this._from&&(this.ratio=d=1-d),r&&!h&&!t&&!n&&(sr(this,"onStart"),this._tTime!==m))return this;for(s=this._pt;s;)s.r(d,s.d),s=s._next;c&&c.render(e<0?e:c._dur*c._ease(r/this._dur),t,i)||this._startAt&&(this._zTime=e),this._onUpdate&&!t&&(g&&Ti(this,e,0,i),sr(this,"onUpdate")),this._repeat&&n!==o&&this.vars.onRepeat&&!t&&this.parent&&sr(this,"onRepeat"),m!==this._tDur&&m||this._tTime!==m||(g&&!this._onUpdate&&Ti(this,e,0,!0),(e||!f)&&(m===this._tDur&&this._ts>0||!m&&this._ts<0)&&wi(this,1),t||g&&!h||!(m||h||l)||(sr(this,m===p?"onComplete":"onReverseComplete",!0),this._prom&&!(m<p&&this.timeScale()>0)&&this._prom()))}}else!function(e,t,i,r){var s,n,a,o=e.ratio,l=t<0||!t&&(!e._start&&Di(e)&&(e._initted||!zi(e))||(e._ts<0||e._dp._ts<0)&&!zi(e))?0:1,d=e._rDelay,c=0;if(d&&e._repeat&&(c=qi(0,e._tDur,t),n=Ei(c,d),e._yoyo&&1&n&&(l=1-l),n!==Ei(e._tTime,d)&&(o=1-l,e.vars.repeatRefresh&&e._initted&&e.invalidate())),l!==o||Qe||r||e._zTime===ft||!t&&e._zTime){if(!e._initted&&Li(e,t,r,i,c))return;for(a=e._zTime,e._zTime=t||(i?ft:0),i||(i=t&&!a),e.ratio=l,e._from&&(l=1-l),e._time=0,e._tTime=c,s=e._pt;s;)s.r(l,s.d),s=s._next;t<0&&Ti(e,t,0,!0),e._onUpdate&&!i&&sr(e,"onUpdate"),c&&e._repeat&&!i&&e.parent&&sr(e,"onRepeat"),(t>=e._tDur||t<0)&&e.ratio===l&&(l&&wi(e,1),i||Qe||(sr(e,l?"onComplete":"onReverseComplete",!0),e._prom&&e._prom()))}else e._zTime||(e._zTime=t)}(this,e,t,i);return this},i.targets=function(){return this._targets},i.invalidate=function(t){return(!t||!this.vars.runBackwards)&&(this._startAt=0),this._pt=this._op=this._onUpdate=this._lazy=this.ratio=0,this._ptLookup=[],this.timeline&&this.timeline.invalidate(t),e.prototype.invalidate.call(this,t)},i.resetTo=function(e,t,i,r,s){at||vr.wake(),this._ts||this.play();var n=Math.min(this._dur,(this._dp._time-this._start)*this._ts);return this._initted||Gr(this,n),function(e,t,i,r,s,n,a,o){var l,d,c,u,h=(e._pt&&e._ptCache||(e._ptCache={}))[t];if(!h)for(h=e._ptCache[t]=[],c=e._ptLookup,u=e._targets.length;u--;){if((l=c[u][t])&&l.d&&l.d._pt)for(l=l.d._pt;l&&l.p!==t&&l.fp!==t;)l=l._next;if(!l)return Dr=1,e.vars[t]="+=0",Gr(e,a),Dr=0,o?qt(t+" not eligible for reset"):1;h.push(l)}for(u=h.length;u--;)(l=(d=h[u])._pt||d).s=!r&&0!==r||s?l.s+(r||0)+n*l.c:r,l.c=i-l.s,d.e&&(d.e=ai(i)+Hi(d.e)),d.b&&(d.b=l.s+Hi(d.b))}(this,e,t,i,r,this._ease(n/this._dur),n,s)?this.resetTo(e,t,i,r,1):(ki(this,0),this.parent||_i(this._dp,this,"_first","_last",this._dp._sort?"_start":0),this.render(0))},i.kill=function(e,t){if(void 0===t&&(t="all"),!(e||t&&"all"!==t))return this._lazy=this._pt=0,this.parent?nr(this):this;if(this.timeline){var i=this.timeline.totalDuration();return this.timeline.killTweensOf(e,t,Lr&&!0!==Lr.vars.overwrite)._first||nr(this),this.parent&&i!==this.timeline.totalDuration()&&Bi(this,this._dur*this.timeline._tDur/i,0,1),this}var r,s,n,a,o,l,d,c=this._targets,u=e?Yi(e):c,h=this._ptLookup,p=this._pt;if((!t||"all"===t)&&function(e,t){for(var i=e.length,r=i===t.length;r&&i--&&e[i]===t[i];);return i<0}(c,u))return"all"===t&&(this._pt=0),nr(this);for(r=this._op=this._op||[],"all"!==t&&(wt(t)&&(o={},ni(t,(function(e){return o[e]=1})),t=o),t=function(e,t){var i,r,s,n,a=e[0]?ri(e[0]).harness:0,o=a&&a.aliases;if(!o)return t;for(r in i=gi({},t),o)if(r in i)for(s=(n=o[r].split(",")).length;s--;)i[n[s]]=i[r];return i}(c,t)),d=c.length;d--;)if(~u.indexOf(c[d]))for(o in s=h[d],"all"===t?(r[d]=t,a=s,n={}):(n=r[d]=r[d]||{},a=t),a)(l=s&&s[o])&&("kill"in l.d&&!0!==l.d.kill(o)||bi(this,l,"_pt"),delete s[o]),"all"!==n&&(n[o]=1);return this._initted&&!this._pt&&p&&nr(this),this},t.to=function(e,i){return new t(e,i,arguments[2])},t.from=function(e,t){return Ri(1,arguments)},t.delayedCall=function(e,i,r,s){return new t(i,0,{immediateRender:!1,lazy:!1,overwrite:!1,delay:e,onComplete:i,onReverseComplete:i,onCompleteParams:r,onReverseCompleteParams:r,callbackScope:s})},t.fromTo=function(e,t,i){return Ri(2,arguments)},t.set=function(e,i){return i.duration=0,i.repeatDelay||(i.repeat=0),new t(e,i)},t.killTweensOf=function(e,t,i){return Je.killTweensOf(e,t,i)},t}(Ar);fi(Hr.prototype,{_targets:[],_lazy:0,_startAt:0,_op:0,_onInit:0}),ni("staggerTo,staggerFrom,staggerFromTo",(function(e){Hr[e]=function(){var t=new Pr,i=Vi.call(arguments,0);return i.splice("staggerFromTo"===e?5:4,0,0),t[e].apply(t,i)}}));var Vr=function(e,t,i){return e[t]=i},Xr=function(e,t,i){return e[t](i)},jr=function(e,t,i,r){return e[t](r.fp,i)},Yr=function(e,t,i){return e.setAttribute(t,i)},Wr=function(e,t){return xt(e[t])?Xr:St(e[t])&&e.setAttribute?Yr:Vr},Ur=function(e,t){return t.set(t.t,t.p,Math.round(1e6*(t.s+t.c*e))/1e6,t)},Kr=function(e,t){return t.set(t.t,t.p,!!(t.s+t.c*e),t)},Qr=function(e,t){var i=t._pt,r="";if(!e&&t.b)r=t.b;else if(1===e&&t.e)r=t.e;else{for(;i;)r=i.p+(i.m?i.m(i.s+i.c*e):Math.round(1e4*(i.s+i.c*e))/1e4)+r,i=i._next;r+=t.c}t.set(t.t,t.p,r,t)},Zr=function(e,t){for(var i=t._pt;i;)i.r(e,i.d),i=i._next},Jr=function(e,t,i,r){for(var s,n=this._pt;n;)s=n._next,n.p===r&&n.modifier(e,t,i),n=s},es=function(e){for(var t,i,r=this._pt;r;)i=r._next,r.p===e&&!r.op||r.op===e?bi(this,r,"_pt"):r.dep||(t=1),r=i;return!t},ts=function(e,t,i,r){r.mSet(e,t,r.m.call(r.tween,i,r.mt),r)},is=function(e){for(var t,i,r,s,n=e._pt;n;){for(t=n._next,i=r;i&&i.pr>n.pr;)i=i._next;(n._prev=i?i._prev:s)?n._prev._next=n:r=n,(n._next=i)?i._prev=n:s=n,n=t}e._pt=r},rs=function(){function e(e,t,i,r,s,n,a,o,l){this.t=t,this.s=r,this.c=s,this.p=i,this.r=n||Ur,this.d=a||this,this.set=o||Vr,this.pr=l||0,this._next=e,e&&(e._prev=this)}return e.prototype.modifier=function(e,t,i){this.mSet=this.mSet||this.set,this.set=ts,this.m=e,this.mt=i,this.tween=t},e}();ni(ti+"parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger",(function(e){return Wt[e]=1})),Gt.TweenMax=Gt.TweenLite=Hr,Gt.TimelineLite=Gt.TimelineMax=Pr,Je=new Pr({sortChildren:!1,defaults:ht,autoRemoveChildren:!0,id:"root",smoothChildTiming:!0}),ut.stringFilter=mr;var ss=[],ns={},as=[],os=0,ls=0,ds=function(e){return(ns[e]||as).map((function(e){return e()}))},cs=function(){var e=Date.now(),t=[];e-os>2&&(ds("matchMediaInit"),ss.forEach((function(e){var i,r,s,n,a=e.queries,o=e.conditions;for(r in a)(i=et.matchMedia(a[r]).matches)&&(s=1),i!==o[r]&&(o[r]=i,n=1);n&&(e.revert(),s&&t.push(e))})),ds("matchMediaRevert"),t.forEach((function(e){return e.onMatch(e,(function(t){return e.add(null,t)}))})),os=e,ds("matchMedia"))},us=function(){function e(e,t){this.selector=t&&Wi(t),this.data=[],this._r=[],this.isReverted=!1,this.id=ls++,e&&this.add(e)}var t=e.prototype;return t.add=function(e,t,i){xt(e)&&(i=t,t=e,e=xt);var r=this,s=function(){var e,s=Ze,n=r.selector;return s&&s!==r&&s.data.push(r),i&&(r.selector=Wi(i)),Ze=r,e=t.apply(r,arguments),xt(e)&&r._r.push(e),Ze=s,r.selector=n,r.isReverted=!1,e};return r.last=s,e===xt?s(r,(function(e){return r.add(null,e)})):e?r[e]=s:s},t.ignore=function(e){var t=Ze;Ze=null,e(this),Ze=t},t.getTweens=function(){var t=[];return this.data.forEach((function(i){return i instanceof e?t.push.apply(t,i.getTweens()):i instanceof Hr&&!(i.parent&&"nested"===i.parent.data)&&t.push(i)})),t},t.clear=function(){this._r.length=this.data.length=0},t.kill=function(e,t){var i=this;if(e?function(){for(var t,r=i.getTweens(),s=i.data.length;s--;)"isFlip"===(t=i.data[s]).data&&(t.revert(),t.getChildren(!0,!0,!1).forEach((function(e){return r.splice(r.indexOf(e),1)})));for(r.map((function(e){return{g:e._dur||e._delay||e._sat&&!e._sat.vars.immediateRender?e.globalTime(0):-1/0,t:e}})).sort((function(e,t){return t.g-e.g||-1/0})).forEach((function(t){return t.t.revert(e)})),s=i.data.length;s--;)(t=i.data[s])instanceof Pr?"nested"!==t.data&&(t.scrollTrigger&&t.scrollTrigger.revert(),t.kill()):!(t instanceof Hr)&&t.revert&&t.revert(e);i._r.forEach((function(t){return t(e,i)})),i.isReverted=!0}():this.data.forEach((function(e){return e.kill&&e.kill()})),this.clear(),t)for(var r=ss.length;r--;)ss[r].id===this.id&&ss.splice(r,1)},t.revert=function(e){this.kill(e||{})},e}(),hs=function(){function e(e){this.contexts=[],this.scope=e,Ze&&Ze.data.push(this)}var t=e.prototype;return t.add=function(e,t,i){Ct(e)||(e={matches:e});var r,s,n,a=new us(0,i||this.scope),o=a.conditions={};for(s in Ze&&!a.selector&&(a.selector=Ze.selector),this.contexts.push(a),t=a.add("onMatch",t),a.queries=e,e)"all"===s?n=1:(r=et.matchMedia(e[s]))&&(ss.indexOf(a)<0&&ss.push(a),(o[s]=r.matches)&&(n=1),r.addListener?r.addListener(cs):r.addEventListener("change",cs));return n&&t(a,(function(e){return a.add(null,e)})),this},t.revert=function(e){this.kill(e||{})},t.kill=function(e){this.contexts.forEach((function(t){return t.kill(e,!0)}))},e}(),ps={registerPlugin:function(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];t.forEach((function(e){return or(e)}))},timeline:function(e){return new Pr(e)},getTweensOf:function(e,t){return Je.getTweensOf(e,t)},getProperty:function(e,t,i,r){wt(e)&&(e=Yi(e)[0]);var s=ri(e||{}).get,n=i?pi:hi;return"native"===i&&(i=""),e?t?n((Qt[t]&&Qt[t].get||s)(e,t,i,r)):function(t,i,r){return n((Qt[t]&&Qt[t].get||s)(e,t,i,r))}:e},quickSetter:function(e,t,i){if((e=Yi(e)).length>1){var r=e.map((function(e){return ms.quickSetter(e,t,i)})),s=r.length;return function(e){for(var t=s;t--;)r[t](e)}}e=e[0]||{};var n=Qt[t],a=ri(e),o=a.harness&&(a.harness.aliases||{})[t]||t,l=n?function(t){var r=new n;nt._pt=0,r.init(e,i?t+i:t,nt,0,[e]),r.render(1,r),nt._pt&&Zr(1,nt)}:a.set(e,o);return n?l:function(t){return l(e,o,i?t+i:t,a,1)}},quickTo:function(e,t,i){var r,s=ms.to(e,gi(((r={})[t]="+=0.1",r.paused=!0,r),i||{})),n=function(e,i,r){return s.resetTo(t,e,i,r)};return n.tween=s,n},isTweening:function(e){return Je.getTweensOf(e,!0).length>0},defaults:function(e){return e&&e.ease&&(e.ease=Cr(e.ease,ht.ease)),mi(ht,e||{})},config:function(e){return mi(ut,e||{})},registerEffect:function(e){var t=e.name,i=e.effect,r=e.plugins,s=e.defaults,n=e.extendTimeline;(r||"").split(",").forEach((function(e){return e&&!Qt[e]&&!Gt[e]&&qt(t+" effect requires "+e+" plugin.")})),Zt[t]=function(e,t,r){return i(Yi(e),fi(t||{},s),r)},n&&(Pr.prototype[t]=function(e,i,r){return this.add(Zt[t](e,Ct(i)?i:(r=i)&&{},this),r)})},registerEase:function(e,t){_r[e]=Cr(t)},parseEase:function(e,t){return arguments.length?Cr(e,t):_r},getById:function(e){return Je.getById(e)},exportRoot:function(e,t){void 0===e&&(e={});var i,r,s=new Pr(e);for(s.smoothChildTiming=Et(e.smoothChildTiming),Je.remove(s),s._dp=0,s._time=s._tTime=Je._time,i=Je._first;i;)r=i._next,!t&&!i._dur&&i instanceof Hr&&i.vars.onComplete===i._targets[0]||Ai(s,i,i._start-i._delay),i=r;return Ai(Je,s,0),s},context:function(e,t){return e?new us(e,t):Ze},matchMedia:function(e){return new hs(e)},matchMediaRefresh:function(){return ss.forEach((function(e){var t,i,r=e.conditions;for(i in r)r[i]&&(r[i]=!1,t=1);t&&e.revert()}))||cs()},addEventListener:function(e,t){var i=ns[e]||(ns[e]=[]);~i.indexOf(t)||i.push(t)},removeEventListener:function(e,t){var i=ns[e],r=i&&i.indexOf(t);r>=0&&i.splice(r,1)},utils:{wrap:function e(t,i,r){var s=i-t;return Ot(t)?er(t,e(0,t.length),i):$i(r,(function(e){return(s+(e-t)%s)%s+t}))},wrapYoyo:function e(t,i,r){var s=i-t,n=2*s;return Ot(t)?er(t,e(0,t.length-1),i):$i(r,(function(e){return t+((e=(n+(e-t)%n)%n||0)>s?n-e:e)}))},distribute:Ki,random:Ji,snap:Zi,normalize:function(e,t,i){return ir(e,t,0,1,i)},getUnit:Hi,clamp:function(e,t,i){return $i(i,(function(i){return qi(e,t,i)}))},splitColor:ur,toArray:Yi,selector:Wi,mapRange:ir,pipe:function(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];return function(e){return t.reduce((function(e,t){return t(e)}),e)}},unitize:function(e,t){return function(i){return e(parseFloat(i))+(t||Hi(i))}},interpolate:function e(t,i,r,s){var n=isNaN(t+i)?0:function(e){return(1-e)*t+e*i};if(!n){var a,o,l,d,c,u=wt(t),h={};if(!0===r&&(s=1)&&(r=null),u)t={p:t},i={p:i};else if(Ot(t)&&!Ot(i)){for(l=[],d=t.length,c=d-2,o=1;o<d;o++)l.push(e(t[o-1],t[o]));d--,n=function(e){e*=d;var t=Math.min(c,~~e);return l[t](e-t)},r=i}else s||(t=gi(Ot(t)?[]:{},t));if(!l){for(a in i)Br.call(h,t,a,"get",i[a]);n=function(e){return Zr(e,h)||(u?t.p:t)}}}return $i(r,n)},shuffle:Ui},install:Rt,effects:Zt,ticker:vr,updateRoot:Pr.updateRoot,plugins:Qt,globalTimeline:Je,core:{PropTween:rs,globals:Ht,Tween:Hr,Timeline:Pr,Animation:Ar,getCache:ri,_removeLinkedListItem:bi,reverting:function(){return Qe},context:function(e){return e&&Ze&&(Ze.data.push(e),e._ctx=Ze),Ze},suppressOverwrites:function(e){return Ke=e}}};ni("to,from,fromTo,delayedCall,set,killTweensOf",(function(e){return ps[e]=Hr[e]})),vr.add(Pr.updateRoot),nt=ps.to({},{duration:0});var fs=function(e,t){for(var i=e._pt;i&&i.p!==t&&i.op!==t&&i.fp!==t;)i=i._next;return i},gs=function(e,t){return{name:e,rawVars:1,init:function(e,i,r){r._onInit=function(e){var r,s;if(wt(i)&&(r={},ni(i,(function(e){return r[e]=1})),i=r),t){for(s in r={},i)r[s]=t(i[s]);i=r}!function(e,t){var i,r,s,n=e._targets;for(i in t)for(r=n.length;r--;)(s=e._ptLookup[r][i])&&(s=s.d)&&(s._pt&&(s=fs(s,i)),s&&s.modifier&&s.modifier(t[i],e,n[r],i))}(e,i)}}}},ms=ps.registerPlugin({name:"attr",init:function(e,t,i,r,s){var n,a,o;for(n in this.tween=i,t)o=e.getAttribute(n)||"",(a=this.add(e,"setAttribute",(o||0)+"",t[n],r,s,0,0,n)).op=n,a.b=o,this._props.push(n)},render:function(e,t){for(var i=t._pt;i;)Qe?i.set(i.t,i.p,i.b,i):i.r(e,i.d),i=i._next}},{name:"endArray",init:function(e,t){for(var i=t.length;i--;)this.add(e,i,e[i]||0,t[i],0,0,0,0,0,1)}},gs("roundProps",Qi),gs("modifiers"),gs("snap",Zi))||ps;Hr.version=Pr.version=ms.version="3.12.5",rt=1,Mt()&&yr();_r.Power0,_r.Power1,_r.Power2,_r.Power3,_r.Power4,_r.Linear,_r.Quad,_r.Cubic,_r.Quart,_r.Quint,_r.Strong,_r.Elastic,_r.Back,_r.SteppedEase,_r.Bounce,_r.Sine,_r.Expo,_r.Circ;var vs,ys,_s,bs,ws,xs,Ts,Ss,Cs={},Es=180/Math.PI,Ms=Math.PI/180,Is=Math.atan2,ks=/([A-Z])/g,Os=/(left|right|width|margin|padding|x)/i,As=/[\s,\(]\S/,Ps={autoAlpha:"opacity,visibility",scale:"scaleX,scaleY",alpha:"opacity"},Ls=function(e,t){return t.set(t.t,t.p,Math.round(1e4*(t.s+t.c*e))/1e4+t.u,t)},Ds=function(e,t){return t.set(t.t,t.p,1===e?t.e:Math.round(1e4*(t.s+t.c*e))/1e4+t.u,t)},zs=function(e,t){return t.set(t.t,t.p,e?Math.round(1e4*(t.s+t.c*e))/1e4+t.u:t.b,t)},Bs=function(e,t){var i=t.s+t.c*e;t.set(t.t,t.p,~~(i+(i<0?-.5:.5))+t.u,t)},Fs=function(e,t){return t.set(t.t,t.p,e?t.e:t.b,t)},Gs=function(e,t){return t.set(t.t,t.p,1!==e?t.b:t.e,t)},Ns=function(e,t,i){return e.style[t]=i},Rs=function(e,t,i){return e.style.setProperty(t,i)},$s=function(e,t,i){return e._gsap[t]=i},qs=function(e,t,i){return e._gsap.scaleX=e._gsap.scaleY=i},Hs=function(e,t,i,r,s){var n=e._gsap;n.scaleX=n.scaleY=i,n.renderTransform(s,n)},Vs=function(e,t,i,r,s){var n=e._gsap;n[t]=i,n.renderTransform(s,n)},Xs="transform",js=Xs+"Origin",Ys=function e(t,i){var r=this,s=this.target,n=s.style,a=s._gsap;if(t in Cs&&n){if(this.tfm=this.tfm||{},"transform"===t)return Ps.transform.split(",").forEach((function(t){return e.call(r,t,i)}));if(~(t=Ps[t]||t).indexOf(",")?t.split(",").forEach((function(e){return r.tfm[e]=hn(s,e)})):this.tfm[t]=a.x?a[t]:hn(s,t),t===js&&(this.tfm.zOrigin=a.zOrigin),this.props.indexOf(Xs)>=0)return;a.svg&&(this.svgo=s.getAttribute("data-svg-origin"),this.props.push(js,i,"")),t=Xs}(n||i)&&this.props.push(t,i,n[t])},Ws=function(e){e.translate&&(e.removeProperty("translate"),e.removeProperty("scale"),e.removeProperty("rotate"))},Us=function(){var e,t,i=this.props,r=this.target,s=r.style,n=r._gsap;for(e=0;e<i.length;e+=3)i[e+1]?r[i[e]]=i[e+2]:i[e+2]?s[i[e]]=i[e+2]:s.removeProperty("--"===i[e].substr(0,2)?i[e]:i[e].replace(ks,"-$1").toLowerCase());if(this.tfm){for(t in this.tfm)n[t]=this.tfm[t];n.svg&&(n.renderTransform(),r.setAttribute("data-svg-origin",this.svgo||"")),(e=Ts())&&e.isStart||s[Xs]||(Ws(s),n.zOrigin&&s[js]&&(s[js]+=" "+n.zOrigin+"px",n.zOrigin=0,n.renderTransform()),n.uncache=1)}},Ks=function(e,t){var i={target:e,props:[],revert:Us,save:Ys};return e._gsap||ms.core.getCache(e),t&&t.split(",").forEach((function(e){return i.save(e)})),i},Qs=function(e,t){var i=ys.createElementNS?ys.createElementNS((t||"http://www.w3.org/1999/xhtml").replace(/^https/,"http"),e):ys.createElement(e);return i&&i.style?i:ys.createElement(e)},Zs=function e(t,i,r){var s=getComputedStyle(t);return s[i]||s.getPropertyValue(i.replace(ks,"-$1").toLowerCase())||s.getPropertyValue(i)||!r&&e(t,en(i)||i,1)||""},Js="O,Moz,ms,Ms,Webkit".split(","),en=function(e,t,i){var r=(t||ws).style,s=5;if(e in r&&!i)return e;for(e=e.charAt(0).toUpperCase()+e.substr(1);s--&&!(Js[s]+e in r););return s<0?null:(3===s?"ms":s>=0?Js[s]:"")+e},tn=function(){"undefined"!=typeof window&&window.document&&(vs=window,ys=vs.document,_s=ys.documentElement,ws=Qs("div")||{style:{}},Qs("div"),Xs=en(Xs),js=Xs+"Origin",ws.style.cssText="border-width:0;line-height:0;position:absolute;padding:0",Ss=!!en("perspective"),Ts=ms.core.reverting,bs=1)},rn=function e(t){var i,r=Qs("svg",this.ownerSVGElement&&this.ownerSVGElement.getAttribute("xmlns")||"http://www.w3.org/2000/svg"),s=this.parentNode,n=this.nextSibling,a=this.style.cssText;if(_s.appendChild(r),r.appendChild(this),this.style.display="block",t)try{i=this.getBBox(),this._gsapBBox=this.getBBox,this.getBBox=e}catch(e){}else this._gsapBBox&&(i=this._gsapBBox());return s&&(n?s.insertBefore(this,n):s.appendChild(this)),_s.removeChild(r),this.style.cssText=a,i},sn=function(e,t){for(var i=t.length;i--;)if(e.hasAttribute(t[i]))return e.getAttribute(t[i])},nn=function(e){var t;try{t=e.getBBox()}catch(i){t=rn.call(e,!0)}return t&&(t.width||t.height)||e.getBBox===rn||(t=rn.call(e,!0)),!t||t.width||t.x||t.y?t:{x:+sn(e,["x","cx","x1"])||0,y:+sn(e,["y","cy","y1"])||0,width:0,height:0}},an=function(e){return!(!e.getCTM||e.parentNode&&!e.ownerSVGElement||!nn(e))},on=function(e,t){if(t){var i,r=e.style;t in Cs&&t!==js&&(t=Xs),r.removeProperty?("ms"!==(i=t.substr(0,2))&&"webkit"!==t.substr(0,6)||(t="-"+t),r.removeProperty("--"===i?t:t.replace(ks,"-$1").toLowerCase())):r.removeAttribute(t)}},ln=function(e,t,i,r,s,n){var a=new rs(e._pt,t,i,0,1,n?Gs:Fs);return e._pt=a,a.b=r,a.e=s,e._props.push(i),a},dn={deg:1,rad:1,turn:1},cn={grid:1,flex:1},un=function e(t,i,r,s){var n,a,o,l,d=parseFloat(r)||0,c=(r+"").trim().substr((d+"").length)||"px",u=ws.style,h=Os.test(i),p="svg"===t.tagName.toLowerCase(),f=(p?"client":"offset")+(h?"Width":"Height"),g=100,m="px"===s,v="%"===s;if(s===c||!d||dn[s]||dn[c])return d;if("px"!==c&&!m&&(d=e(t,i,r,"px")),l=t.getCTM&&an(t),(v||"%"===c)&&(Cs[i]||~i.indexOf("adius")))return n=l?t.getBBox()[h?"width":"height"]:t[f],ai(v?d/n*g:d/100*n);if(u[h?"width":"height"]=g+(m?c:s),a=~i.indexOf("adius")||"em"===s&&t.appendChild&&!p?t:t.parentNode,l&&(a=(t.ownerSVGElement||{}).parentNode),a&&a!==ys&&a.appendChild||(a=ys.body),(o=a._gsap)&&v&&o.width&&h&&o.time===vr.time&&!o.uncache)return ai(d/o.width*g);if(!v||"height"!==i&&"width"!==i)(v||"%"===c)&&!cn[Zs(a,"display")]&&(u.position=Zs(t,"position")),a===t&&(u.position="static"),a.appendChild(ws),n=ws[f],a.removeChild(ws),u.position="absolute";else{var y=t.style[i];t.style[i]=g+s,n=t[f],y?t.style[i]=y:on(t,i)}return h&&v&&((o=ri(a)).time=vr.time,o.width=a[f]),ai(m?n*d/g:n&&d?g/n*d:0)},hn=function(e,t,i,r){var s;return bs||tn(),t in Ps&&"transform"!==t&&~(t=Ps[t]).indexOf(",")&&(t=t.split(",")[0]),Cs[t]&&"transform"!==t?(s=Tn(e,r),s="transformOrigin"!==t?s[t]:s.svg?s.origin:Sn(Zs(e,js))+" "+s.zOrigin+"px"):(!(s=e.style[t])||"auto"===s||r||~(s+"").indexOf("calc("))&&(s=mn[t]&&mn[t](e,t,i)||Zs(e,t)||si(e,t)||("opacity"===t?1:0)),i&&!~(s+"").trim().indexOf(" ")?un(e,t,s,i)+i:s},pn=function(e,t,i,r){if(!i||"none"===i){var s=en(t,e,1),n=s&&Zs(e,s,1);n&&n!==i?(t=s,i=n):"borderColor"===t&&(i=Zs(e,"borderTopColor"))}var a,o,l,d,c,u,h,p,f,g,m,v=new rs(this._pt,e.style,t,0,1,Qr),y=0,_=0;if(v.b=i,v.e=r,i+="","auto"===(r+="")&&(u=e.style[t],e.style[t]=r,r=Zs(e,t)||r,u?e.style[t]=u:on(e,t)),mr(a=[i,r]),r=a[1],l=(i=a[0]).match(Lt)||[],(r.match(Lt)||[]).length){for(;o=Lt.exec(r);)h=o[0],f=r.substring(y,o.index),c?c=(c+1)%5:"rgba("!==f.substr(-5)&&"hsla("!==f.substr(-5)||(c=1),h!==(u=l[_++]||"")&&(d=parseFloat(u)||0,m=u.substr((d+"").length),"="===h.charAt(1)&&(h=li(d,h)+m),p=parseFloat(h),g=h.substr((p+"").length),y=Lt.lastIndex-g.length,g||(g=g||ut.units[t]||m,y===r.length&&(r+=g,v.e+=g)),m!==g&&(d=un(e,t,u,g)||0),v._pt={_next:v._pt,p:f||1===_?f:",",s:d,c:p-d,m:c&&c<4||"zIndex"===t?Math.round:0});v.c=y<r.length?r.substring(y,r.length):""}else v.r="display"===t&&"none"===r?Gs:Fs;return zt.test(r)&&(v.e=0),this._pt=v,v},fn={top:"0%",bottom:"100%",left:"0%",right:"100%",center:"50%"},gn=function(e,t){if(t.tween&&t.tween._time===t.tween._dur){var i,r,s,n=t.t,a=n.style,o=t.u,l=n._gsap;if("all"===o||!0===o)a.cssText="",r=1;else for(s=(o=o.split(",")).length;--s>-1;)i=o[s],Cs[i]&&(r=1,i="transformOrigin"===i?js:Xs),on(n,i);r&&(on(n,Xs),l&&(l.svg&&n.removeAttribute("transform"),Tn(n,1),l.uncache=1,Ws(a)))}},mn={clearProps:function(e,t,i,r,s){if("isFromStart"!==s.data){var n=e._pt=new rs(e._pt,t,i,0,0,gn);return n.u=r,n.pr=-10,n.tween=s,e._props.push(i),1}}},vn=[1,0,0,1,0,0],yn={},_n=function(e){return"matrix(1, 0, 0, 1, 0, 0)"===e||"none"===e||!e},bn=function(e){var t=Zs(e,Xs);return _n(t)?vn:t.substr(7).match(Pt).map(ai)},wn=function(e,t){var i,r,s,n,a=e._gsap||ri(e),o=e.style,l=bn(e);return a.svg&&e.getAttribute("transform")?"1,0,0,1,0,0"===(l=[(s=e.transform.baseVal.consolidate().matrix).a,s.b,s.c,s.d,s.e,s.f]).join(",")?vn:l:(l!==vn||e.offsetParent||e===_s||a.svg||(s=o.display,o.display="block",(i=e.parentNode)&&e.offsetParent||(n=1,r=e.nextElementSibling,_s.appendChild(e)),l=bn(e),s?o.display=s:on(e,"display"),n&&(r?i.insertBefore(e,r):i?i.appendChild(e):_s.removeChild(e))),t&&l.length>6?[l[0],l[1],l[4],l[5],l[12],l[13]]:l)},xn=function(e,t,i,r,s,n){var a,o,l,d=e._gsap,c=s||wn(e,!0),u=d.xOrigin||0,h=d.yOrigin||0,p=d.xOffset||0,f=d.yOffset||0,g=c[0],m=c[1],v=c[2],y=c[3],_=c[4],b=c[5],w=t.split(" "),x=parseFloat(w[0])||0,T=parseFloat(w[1])||0;i?c!==vn&&(o=g*y-m*v)&&(l=x*(-m/o)+T*(g/o)-(g*b-m*_)/o,x=x*(y/o)+T*(-v/o)+(v*b-y*_)/o,T=l):(x=(a=nn(e)).x+(~w[0].indexOf("%")?x/100*a.width:x),T=a.y+(~(w[1]||w[0]).indexOf("%")?T/100*a.height:T)),r||!1!==r&&d.smooth?(_=x-u,b=T-h,d.xOffset=p+(_*g+b*v)-_,d.yOffset=f+(_*m+b*y)-b):d.xOffset=d.yOffset=0,d.xOrigin=x,d.yOrigin=T,d.smooth=!!r,d.origin=t,d.originIsAbsolute=!!i,e.style[js]="0px 0px",n&&(ln(n,d,"xOrigin",u,x),ln(n,d,"yOrigin",h,T),ln(n,d,"xOffset",p,d.xOffset),ln(n,d,"yOffset",f,d.yOffset)),e.setAttribute("data-svg-origin",x+" "+T)},Tn=function(e,t){var i=e._gsap||new Or(e);if("x"in i&&!t&&!i.uncache)return i;var r,s,n,a,o,l,d,c,u,h,p,f,g,m,v,y,_,b,w,x,T,S,C,E,M,I,k,O,A,P,L,D,z=e.style,B=i.scaleX<0,F="px",G="deg",N=getComputedStyle(e),R=Zs(e,js)||"0";return r=s=n=l=d=c=u=h=p=0,a=o=1,i.svg=!(!e.getCTM||!an(e)),N.translate&&("none"===N.translate&&"none"===N.scale&&"none"===N.rotate||(z[Xs]=("none"!==N.translate?"translate3d("+(N.translate+" 0 0").split(" ").slice(0,3).join(", ")+") ":"")+("none"!==N.rotate?"rotate("+N.rotate+") ":"")+("none"!==N.scale?"scale("+N.scale.split(" ").join(",")+") ":"")+("none"!==N[Xs]?N[Xs]:"")),z.scale=z.rotate=z.translate="none"),m=wn(e,i.svg),i.svg&&(i.uncache?(M=e.getBBox(),R=i.xOrigin-M.x+"px "+(i.yOrigin-M.y)+"px",E=""):E=!t&&e.getAttribute("data-svg-origin"),xn(e,E||R,!!E||i.originIsAbsolute,!1!==i.smooth,m)),f=i.xOrigin||0,g=i.yOrigin||0,m!==vn&&(b=m[0],w=m[1],x=m[2],T=m[3],r=S=m[4],s=C=m[5],6===m.length?(a=Math.sqrt(b*b+w*w),o=Math.sqrt(T*T+x*x),l=b||w?Is(w,b)*Es:0,(u=x||T?Is(x,T)*Es+l:0)&&(o*=Math.abs(Math.cos(u*Ms))),i.svg&&(r-=f-(f*b+g*x),s-=g-(f*w+g*T))):(D=m[6],P=m[7],k=m[8],O=m[9],A=m[10],L=m[11],r=m[12],s=m[13],n=m[14],d=(v=Is(D,A))*Es,v&&(E=S*(y=Math.cos(-v))+k*(_=Math.sin(-v)),M=C*y+O*_,I=D*y+A*_,k=S*-_+k*y,O=C*-_+O*y,A=D*-_+A*y,L=P*-_+L*y,S=E,C=M,D=I),c=(v=Is(-x,A))*Es,v&&(y=Math.cos(-v),L=T*(_=Math.sin(-v))+L*y,b=E=b*y-k*_,w=M=w*y-O*_,x=I=x*y-A*_),l=(v=Is(w,b))*Es,v&&(E=b*(y=Math.cos(v))+w*(_=Math.sin(v)),M=S*y+C*_,w=w*y-b*_,C=C*y-S*_,b=E,S=M),d&&Math.abs(d)+Math.abs(l)>359.9&&(d=l=0,c=180-c),a=ai(Math.sqrt(b*b+w*w+x*x)),o=ai(Math.sqrt(C*C+D*D)),v=Is(S,C),u=Math.abs(v)>2e-4?v*Es:0,p=L?1/(L<0?-L:L):0),i.svg&&(E=e.getAttribute("transform"),i.forceCSS=e.setAttribute("transform","")||!_n(Zs(e,Xs)),E&&e.setAttribute("transform",E))),Math.abs(u)>90&&Math.abs(u)<270&&(B?(a*=-1,u+=l<=0?180:-180,l+=l<=0?180:-180):(o*=-1,u+=u<=0?180:-180)),t=t||i.uncache,i.x=r-((i.xPercent=r&&(!t&&i.xPercent||(Math.round(e.offsetWidth/2)===Math.round(-r)?-50:0)))?e.offsetWidth*i.xPercent/100:0)+F,i.y=s-((i.yPercent=s&&(!t&&i.yPercent||(Math.round(e.offsetHeight/2)===Math.round(-s)?-50:0)))?e.offsetHeight*i.yPercent/100:0)+F,i.z=n+F,i.scaleX=ai(a),i.scaleY=ai(o),i.rotation=ai(l)+G,i.rotationX=ai(d)+G,i.rotationY=ai(c)+G,i.skewX=u+G,i.skewY=h+G,i.transformPerspective=p+F,(i.zOrigin=parseFloat(R.split(" ")[2])||!t&&i.zOrigin||0)&&(z[js]=Sn(R)),i.xOffset=i.yOffset=0,i.force3D=ut.force3D,i.renderTransform=i.svg?An:Ss?On:En,i.uncache=0,i},Sn=function(e){return(e=e.split(" "))[0]+" "+e[1]},Cn=function(e,t,i){var r=Hi(t);return ai(parseFloat(t)+parseFloat(un(e,"x",i+"px",r)))+r},En=function(e,t){t.z="0px",t.rotationY=t.rotationX="0deg",t.force3D=0,On(e,t)},Mn="0deg",In="0px",kn=") ",On=function(e,t){var i=t||this,r=i.xPercent,s=i.yPercent,n=i.x,a=i.y,o=i.z,l=i.rotation,d=i.rotationY,c=i.rotationX,u=i.skewX,h=i.skewY,p=i.scaleX,f=i.scaleY,g=i.transformPerspective,m=i.force3D,v=i.target,y=i.zOrigin,_="",b="auto"===m&&e&&1!==e||!0===m;if(y&&(c!==Mn||d!==Mn)){var w,x=parseFloat(d)*Ms,T=Math.sin(x),S=Math.cos(x);x=parseFloat(c)*Ms,w=Math.cos(x),n=Cn(v,n,T*w*-y),a=Cn(v,a,-Math.sin(x)*-y),o=Cn(v,o,S*w*-y+y)}g!==In&&(_+="perspective("+g+kn),(r||s)&&(_+="translate("+r+"%, "+s+"%) "),(b||n!==In||a!==In||o!==In)&&(_+=o!==In||b?"translate3d("+n+", "+a+", "+o+") ":"translate("+n+", "+a+kn),l!==Mn&&(_+="rotate("+l+kn),d!==Mn&&(_+="rotateY("+d+kn),c!==Mn&&(_+="rotateX("+c+kn),u===Mn&&h===Mn||(_+="skew("+u+", "+h+kn),1===p&&1===f||(_+="scale("+p+", "+f+kn),v.style[Xs]=_||"translate(0, 0)"},An=function(e,t){var i,r,s,n,a,o=t||this,l=o.xPercent,d=o.yPercent,c=o.x,u=o.y,h=o.rotation,p=o.skewX,f=o.skewY,g=o.scaleX,m=o.scaleY,v=o.target,y=o.xOrigin,_=o.yOrigin,b=o.xOffset,w=o.yOffset,x=o.forceCSS,T=parseFloat(c),S=parseFloat(u);h=parseFloat(h),p=parseFloat(p),(f=parseFloat(f))&&(p+=f=parseFloat(f),h+=f),h||p?(h*=Ms,p*=Ms,i=Math.cos(h)*g,r=Math.sin(h)*g,s=Math.sin(h-p)*-m,n=Math.cos(h-p)*m,p&&(f*=Ms,a=Math.tan(p-f),s*=a=Math.sqrt(1+a*a),n*=a,f&&(a=Math.tan(f),i*=a=Math.sqrt(1+a*a),r*=a)),i=ai(i),r=ai(r),s=ai(s),n=ai(n)):(i=g,n=m,r=s=0),(T&&!~(c+"").indexOf("px")||S&&!~(u+"").indexOf("px"))&&(T=un(v,"x",c,"px"),S=un(v,"y",u,"px")),(y||_||b||w)&&(T=ai(T+y-(y*i+_*s)+b),S=ai(S+_-(y*r+_*n)+w)),(l||d)&&(a=v.getBBox(),T=ai(T+l/100*a.width),S=ai(S+d/100*a.height)),a="matrix("+i+","+r+","+s+","+n+","+T+","+S+")",v.setAttribute("transform",a),x&&(v.style[Xs]=a)},Pn=function(e,t,i,r,s){var n,a,o=360,l=wt(s),d=parseFloat(s)*(l&&~s.indexOf("rad")?Es:1)-r,c=r+d+"deg";return l&&("short"===(n=s.split("_")[1])&&(d%=o)!==d%180&&(d+=d<0?o:-360),"cw"===n&&d<0?d=(d+36e9)%o-~~(d/o)*o:"ccw"===n&&d>0&&(d=(d-36e9)%o-~~(d/o)*o)),e._pt=a=new rs(e._pt,t,i,r,d,Ds),a.e=c,a.u="deg",e._props.push(i),a},Ln=function(e,t){for(var i in t)e[i]=t[i];return e},Dn=function(e,t,i){var r,s,n,a,o,l,d,c=Ln({},i._gsap),u=i.style;for(s in c.svg?(n=i.getAttribute("transform"),i.setAttribute("transform",""),u[Xs]=t,r=Tn(i,1),on(i,Xs),i.setAttribute("transform",n)):(n=getComputedStyle(i)[Xs],u[Xs]=t,r=Tn(i,1),u[Xs]=n),Cs)(n=c[s])!==(a=r[s])&&"perspective,force3D,transformOrigin,svgOrigin".indexOf(s)<0&&(o=Hi(n)!==(d=Hi(a))?un(i,s,n,d):parseFloat(n),l=parseFloat(a),e._pt=new rs(e._pt,r,s,o,l-o,Ls),e._pt.u=d||0,e._props.push(s));Ln(r,c)};ni("padding,margin,Width,Radius",(function(e,t){var i="Top",r="Right",s="Bottom",n="Left",a=(t<3?[i,r,s,n]:[i+n,i+r,s+r,s+n]).map((function(i){return t<2?e+i:"border"+i+e}));mn[t>1?"border"+e:e]=function(e,t,i,r,s){var n,o;if(arguments.length<4)return n=a.map((function(t){return hn(e,t,i)})),5===(o=n.join(" ")).split(n[0]).length?n[0]:o;n=(r+"").split(" "),o={},a.forEach((function(e,t){return o[e]=n[t]=n[t]||n[(t-1)/2|0]})),e.init(t,o,s)}}));var zn,Bn,Fn,Gn={name:"css",register:tn,targetTest:function(e){return e.style&&e.nodeType},init:function(e,t,i,r,s){var n,a,o,l,d,c,u,h,p,f,g,m,v,y,_,b,w,x,T,S,C=this._props,E=e.style,M=i.vars.startAt;for(u in bs||tn(),this.styles=this.styles||Ks(e),b=this.styles.props,this.tween=i,t)if("autoRound"!==u&&(a=t[u],!Qt[u]||!Fr(u,t,i,r,e,s)))if(d=typeof a,c=mn[u],"function"===d&&(d=typeof(a=a.call(i,r,e,s))),"string"===d&&~a.indexOf("random(")&&(a=tr(a)),c)c(this,e,u,a,i)&&(_=1);else if("--"===u.substr(0,2))n=(getComputedStyle(e).getPropertyValue(u)+"").trim(),a+="",fr.lastIndex=0,fr.test(n)||(h=Hi(n),p=Hi(a)),p?h!==p&&(n=un(e,u,n,p)+p):h&&(a+=h),this.add(E,"setProperty",n,a,r,s,0,0,u),C.push(u),b.push(u,0,E[u]);else if("undefined"!==d){if(M&&u in M?(n="function"==typeof M[u]?M[u].call(i,r,e,s):M[u],wt(n)&&~n.indexOf("random(")&&(n=tr(n)),Hi(n+"")||"auto"===n||(n+=ut.units[u]||Hi(hn(e,u))||""),"="===(n+"").charAt(1)&&(n=hn(e,u))):n=hn(e,u),l=parseFloat(n),(f="string"===d&&"="===a.charAt(1)&&a.substr(0,2))&&(a=a.substr(2)),o=parseFloat(a),u in Ps&&("autoAlpha"===u&&(1===l&&"hidden"===hn(e,"visibility")&&o&&(l=0),b.push("visibility",0,E.visibility),ln(this,E,"visibility",l?"inherit":"hidden",o?"inherit":"hidden",!o)),"scale"!==u&&"transform"!==u&&~(u=Ps[u]).indexOf(",")&&(u=u.split(",")[0])),g=u in Cs)if(this.styles.save(u),m||((v=e._gsap).renderTransform&&!t.parseTransform||Tn(e,t.parseTransform),y=!1!==t.smoothOrigin&&v.smooth,(m=this._pt=new rs(this._pt,E,Xs,0,1,v.renderTransform,v,0,-1)).dep=1),"scale"===u)this._pt=new rs(this._pt,v,"scaleY",v.scaleY,(f?li(v.scaleY,f+o):o)-v.scaleY||0,Ls),this._pt.u=0,C.push("scaleY",u),u+="X";else{if("transformOrigin"===u){b.push(js,0,E[js]),x=void 0,T=void 0,S=void 0,x=(w=a).split(" "),T=x[0],S=x[1]||"50%","top"!==T&&"bottom"!==T&&"left"!==S&&"right"!==S||(w=T,T=S,S=w),x[0]=fn[T]||T,x[1]=fn[S]||S,a=x.join(" "),v.svg?xn(e,a,0,y,0,this):((p=parseFloat(a.split(" ")[2])||0)!==v.zOrigin&&ln(this,v,"zOrigin",v.zOrigin,p),ln(this,E,u,Sn(n),Sn(a)));continue}if("svgOrigin"===u){xn(e,a,1,y,0,this);continue}if(u in yn){Pn(this,v,u,l,f?li(l,f+a):a);continue}if("smoothOrigin"===u){ln(this,v,"smooth",v.smooth,a);continue}if("force3D"===u){v[u]=a;continue}if("transform"===u){Dn(this,a,e);continue}}else u in E||(u=en(u)||u);if(g||(o||0===o)&&(l||0===l)&&!As.test(a)&&u in E)o||(o=0),(h=(n+"").substr((l+"").length))!==(p=Hi(a)||(u in ut.units?ut.units[u]:h))&&(l=un(e,u,n,p)),this._pt=new rs(this._pt,g?v:E,u,l,(f?li(l,f+o):o)-l,g||"px"!==p&&"zIndex"!==u||!1===t.autoRound?Ls:Bs),this._pt.u=p||0,h!==p&&"%"!==p&&(this._pt.b=n,this._pt.r=zs);else if(u in E)pn.call(this,e,u,n,f?f+a:a);else if(u in e)this.add(e,u,n||e[u],f?f+a:a,r,s);else if("parseTransform"!==u){$t(u,a);continue}g||(u in E?b.push(u,0,E[u]):b.push(u,1,n||e[u])),C.push(u)}_&&is(this)},render:function(e,t){if(t.tween._time||!Ts())for(var i=t._pt;i;)i.r(e,i.d),i=i._next;else t.styles.revert()},get:hn,aliases:Ps,getSetter:function(e,t,i){var r=Ps[t];return r&&r.indexOf(",")<0&&(t=r),t in Cs&&t!==js&&(e._gsap.x||hn(e,"x"))?i&&xs===i?"scale"===t?qs:$s:(xs=i||{})&&("scale"===t?Hs:Vs):e.style&&!St(e.style[t])?Ns:~t.indexOf("-")?Rs:Wr(e,t)},core:{_removeProperty:on,_getMatrix:wn}};ms.utils.checkPrefix=en,ms.core.getStyleSaver=Ks,Fn=ni((zn="x,y,z,scale,scaleX,scaleY,xPercent,yPercent")+","+(Bn="rotation,rotationX,rotationY,skewX,skewY")+",transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective",(function(e){Cs[e]=1})),ni(Bn,(function(e){ut.units[e]="deg",yn[e]=1})),Ps[Fn[13]]=zn+","+Bn,ni("0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY",(function(e){var t=e.split(":");Ps[t[1]]=Fn[t[0]]})),ni("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective",(function(e){ut.units[e]="px"})),ms.registerPlugin(Gn);var Nn=ms.registerPlugin(Gn)||ms;Nn.core.Tween;function Rn(e,t){for(var i=0;i<t.length;i++){var r=t[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}
/*!
 * Observer 3.12.5
 * https://gsap.com
 *
 * @license Copyright 2008-2024, GreenSock. All rights reserved.
 * Subject to the terms at https://gsap.com/standard-license or for
 * Club GSAP members, the agreement issued with that membership.
 * @author: Jack Doyle, jack@greensock.com
*/
var $n,qn,Hn,Vn,Xn,jn,Yn,Wn,Un,Kn,Qn,Zn,Jn,ea=function(){return $n||"undefined"!=typeof window&&($n=window.gsap)&&$n.registerPlugin&&$n},ta=1,ia=[],ra=[],sa=[],na=Date.now,aa=function(e,t){return t},oa=function(e){return!!~Kn.indexOf(e)},la=function(e,t,i,r,s){return e.addEventListener(t,i,{passive:!1!==r,capture:!!s})},da=function(e,t,i,r){return e.removeEventListener(t,i,!!r)},ca="scrollLeft",ua="scrollTop",ha=function(){return Qn&&Qn.isPressed||ra.cache++},pa=function(e,t){var i=function i(r){if(r||0===r){ta&&(Hn.history.scrollRestoration="manual");var s=Qn&&Qn.isPressed;r=i.v=Math.round(r)||(Qn&&Qn.iOS?1:0),e(r),i.cacheID=ra.cache,s&&aa("ss",r)}else(t||ra.cache!==i.cacheID||aa("ref"))&&(i.cacheID=ra.cache,i.v=e());return i.v+i.offset};return i.offset=0,e&&i},fa={s:ca,p:"left",p2:"Left",os:"right",os2:"Right",d:"width",d2:"Width",a:"x",sc:pa((function(e){return arguments.length?Hn.scrollTo(e,ga.sc()):Hn.pageXOffset||Vn[ca]||Xn[ca]||jn[ca]||0}))},ga={s:ua,p:"top",p2:"Top",os:"bottom",os2:"Bottom",d:"height",d2:"Height",a:"y",op:fa,sc:pa((function(e){return arguments.length?Hn.scrollTo(fa.sc(),e):Hn.pageYOffset||Vn[ua]||Xn[ua]||jn[ua]||0}))},ma=function(e,t){var i=t.s,r=t.sc;oa(e)&&(e=Vn.scrollingElement||Xn);var s=ra.indexOf(e),n=r===ga.sc?1:2;!~s&&(s=ra.push(e)-1),ra[s+n]||la(e,"scroll",ha);var a=ra[s+n],o=a||(ra[s+n]=pa(function(e,t){return~sa.indexOf(e)&&sa[sa.indexOf(e)+1][t]}(e,i),!0)||(oa(e)?r:pa((function(t){return arguments.length?e[i]=t:e[i]}))));return o.target=e,a||(o.smooth="smooth"===$n.getProperty(e,"scrollBehavior")),o},va=function(e,t,i){var r=e,s=e,n=na(),a=n,o=t||50,l=Math.max(500,3*o),d=function(e,t){var l=na();t||l-n>o?(s=r,r=e,a=n,n=l):i?r+=e:r=s+(e-s)/(l-a)*(n-a)};return{update:d,reset:function(){s=r=i?0:r,a=n=0},getVelocity:function(e){var t=a,o=s,c=na();return(e||0===e)&&e!==r&&d(e),n===a||c-a>l?0:(r+(i?o:-o))/((i?c:n)-t)*1e3}}},ya=function(e,t){return t&&!e._gsapAllow&&e.preventDefault(),e.changedTouches?e.changedTouches[0]:e},_a=function(e){var t=Math.max.apply(Math,e),i=Math.min.apply(Math,e);return Math.abs(t)>=Math.abs(i)?t:i},ba=function(){var e,t,i,r;(Un=$n.core.globals().ScrollTrigger)&&Un.core&&(e=Un.core,t=e.bridge||{},i=e._scrollers,r=e._proxies,i.push.apply(i,ra),r.push.apply(r,sa),ra=i,sa=r,aa=function(e,i){return t[e](i)})},wa=function(e){return $n=e||ea(),!qn&&$n&&"undefined"!=typeof document&&document.body&&(Hn=window,Vn=document,Xn=Vn.documentElement,jn=Vn.body,Kn=[Hn,Vn,Xn,jn],$n.utils.clamp,Jn=$n.core.context||function(){},Wn="onpointerenter"in jn?"pointer":"mouse",Yn=xa.isTouch=Hn.matchMedia&&Hn.matchMedia("(hover: none), (pointer: coarse)").matches?1:"ontouchstart"in Hn||navigator.maxTouchPoints>0||navigator.msMaxTouchPoints>0?2:0,Zn=xa.eventTypes=("ontouchstart"in Xn?"touchstart,touchmove,touchcancel,touchend":"onpointerdown"in Xn?"pointerdown,pointermove,pointercancel,pointerup":"mousedown,mousemove,mouseup,mouseup").split(","),setTimeout((function(){return ta=0}),500),ba(),qn=1),qn};fa.op=ga,ra.cache=0;var xa=function(){function e(e){this.init(e)}var t,i,r;return e.prototype.init=function(e){qn||wa($n)||console.warn("Please gsap.registerPlugin(Observer)"),Un||ba();var t=e.tolerance,i=e.dragMinimum,r=e.type,s=e.target,n=e.lineHeight,a=e.debounce,o=e.preventDefault,l=e.onStop,d=e.onStopDelay,c=e.ignore,u=e.wheelSpeed,h=e.event,p=e.onDragStart,f=e.onDragEnd,g=e.onDrag,m=e.onPress,v=e.onRelease,y=e.onRight,_=e.onLeft,b=e.onUp,w=e.onDown,x=e.onChangeX,T=e.onChangeY,S=e.onChange,C=e.onToggleX,E=e.onToggleY,M=e.onHover,I=e.onHoverEnd,k=e.onMove,O=e.ignoreCheck,A=e.isNormalizer,P=e.onGestureStart,L=e.onGestureEnd,D=e.onWheel,z=e.onEnable,B=e.onDisable,F=e.onClick,G=e.scrollSpeed,N=e.capture,R=e.allowClicks,$=e.lockAxis,q=e.onLockAxis;this.target=s=function(e,t){return(t&&t._ctx&&t._ctx.selector||$n.utils.toArray)(e)[0]||("string"==typeof e&&!1!==$n.config().nullTargetWarn?console.warn("Element not found:",e):null)}(s)||Xn,this.vars=e,c&&(c=$n.utils.toArray(c)),t=t||1e-9,i=i||0,u=u||1,G=G||1,r=r||"wheel,touch,pointer",a=!1!==a,n||(n=parseFloat(Hn.getComputedStyle(jn).lineHeight)||22);var H,V,X,j,Y,W,U,K=this,Q=0,Z=0,J=e.passive||!o,ee=ma(s,fa),te=ma(s,ga),ie=ee(),re=te(),se=~r.indexOf("touch")&&!~r.indexOf("pointer")&&"pointerdown"===Zn[0],ne=oa(s),ae=s.ownerDocument||Vn,oe=[0,0,0],le=[0,0,0],de=0,ce=function(){return de=na()},ue=function(e,t){return(K.event=e)&&c&&~c.indexOf(e.target)||t&&se&&"touch"!==e.pointerType||O&&O(e,t)},he=function(){var e=K.deltaX=_a(oe),i=K.deltaY=_a(le),r=Math.abs(e)>=t,s=Math.abs(i)>=t;S&&(r||s)&&S(K,e,i,oe,le),r&&(y&&K.deltaX>0&&y(K),_&&K.deltaX<0&&_(K),x&&x(K),C&&K.deltaX<0!=Q<0&&C(K),Q=K.deltaX,oe[0]=oe[1]=oe[2]=0),s&&(w&&K.deltaY>0&&w(K),b&&K.deltaY<0&&b(K),T&&T(K),E&&K.deltaY<0!=Z<0&&E(K),Z=K.deltaY,le[0]=le[1]=le[2]=0),(j||X)&&(k&&k(K),X&&(g(K),X=!1),j=!1),W&&!(W=!1)&&q&&q(K),Y&&(D(K),Y=!1),H=0},pe=function(e,t,i){oe[i]+=e,le[i]+=t,K._vx.update(e),K._vy.update(t),a?H||(H=requestAnimationFrame(he)):he()},fe=function(e,t){$&&!U&&(K.axis=U=Math.abs(e)>Math.abs(t)?"x":"y",W=!0),"y"!==U&&(oe[2]+=e,K._vx.update(e,!0)),"x"!==U&&(le[2]+=t,K._vy.update(t,!0)),a?H||(H=requestAnimationFrame(he)):he()},ge=function(e){if(!ue(e,1)){var t=(e=ya(e,o)).clientX,r=e.clientY,s=t-K.x,n=r-K.y,a=K.isDragging;K.x=t,K.y=r,(a||Math.abs(K.startX-t)>=i||Math.abs(K.startY-r)>=i)&&(g&&(X=!0),a||(K.isDragging=!0),fe(s,n),a||p&&p(K))}},me=K.onPress=function(e){ue(e,1)||e&&e.button||(K.axis=U=null,V.pause(),K.isPressed=!0,e=ya(e),Q=Z=0,K.startX=K.x=e.clientX,K.startY=K.y=e.clientY,K._vx.reset(),K._vy.reset(),la(A?s:ae,Zn[1],ge,J,!0),K.deltaX=K.deltaY=0,m&&m(K))},ve=K.onRelease=function(e){if(!ue(e,1)){da(A?s:ae,Zn[1],ge,!0);var t=!isNaN(K.y-K.startY),i=K.isDragging,r=i&&(Math.abs(K.x-K.startX)>3||Math.abs(K.y-K.startY)>3),n=ya(e);!r&&t&&(K._vx.reset(),K._vy.reset(),o&&R&&$n.delayedCall(.08,(function(){if(na()-de>300&&!e.defaultPrevented)if(e.target.click)e.target.click();else if(ae.createEvent){var t=ae.createEvent("MouseEvents");t.initMouseEvent("click",!0,!0,Hn,1,n.screenX,n.screenY,n.clientX,n.clientY,!1,!1,!1,!1,0,null),e.target.dispatchEvent(t)}}))),K.isDragging=K.isGesturing=K.isPressed=!1,l&&i&&!A&&V.restart(!0),f&&i&&f(K),v&&v(K,r)}},ye=function(e){return e.touches&&e.touches.length>1&&(K.isGesturing=!0)&&P(e,K.isDragging)},_e=function(){return(K.isGesturing=!1)||L(K)},be=function(e){if(!ue(e)){var t=ee(),i=te();pe((t-ie)*G,(i-re)*G,1),ie=t,re=i,l&&V.restart(!0)}},we=function(e){if(!ue(e)){e=ya(e,o),D&&(Y=!0);var t=(1===e.deltaMode?n:2===e.deltaMode?Hn.innerHeight:1)*u;pe(e.deltaX*t,e.deltaY*t,0),l&&!A&&V.restart(!0)}},xe=function(e){if(!ue(e)){var t=e.clientX,i=e.clientY,r=t-K.x,s=i-K.y;K.x=t,K.y=i,j=!0,l&&V.restart(!0),(r||s)&&fe(r,s)}},Te=function(e){K.event=e,M(K)},Se=function(e){K.event=e,I(K)},Ce=function(e){return ue(e)||ya(e,o)&&F(K)};V=K._dc=$n.delayedCall(d||.25,(function(){K._vx.reset(),K._vy.reset(),V.pause(),l&&l(K)})).pause(),K.deltaX=K.deltaY=0,K._vx=va(0,50,!0),K._vy=va(0,50,!0),K.scrollX=ee,K.scrollY=te,K.isDragging=K.isGesturing=K.isPressed=!1,Jn(this),K.enable=function(e){return K.isEnabled||(la(ne?ae:s,"scroll",ha),r.indexOf("scroll")>=0&&la(ne?ae:s,"scroll",be,J,N),r.indexOf("wheel")>=0&&la(s,"wheel",we,J,N),(r.indexOf("touch")>=0&&Yn||r.indexOf("pointer")>=0)&&(la(s,Zn[0],me,J,N),la(ae,Zn[2],ve),la(ae,Zn[3],ve),R&&la(s,"click",ce,!0,!0),F&&la(s,"click",Ce),P&&la(ae,"gesturestart",ye),L&&la(ae,"gestureend",_e),M&&la(s,Wn+"enter",Te),I&&la(s,Wn+"leave",Se),k&&la(s,Wn+"move",xe)),K.isEnabled=!0,e&&e.type&&me(e),z&&z(K)),K},K.disable=function(){K.isEnabled&&(ia.filter((function(e){return e!==K&&oa(e.target)})).length||da(ne?ae:s,"scroll",ha),K.isPressed&&(K._vx.reset(),K._vy.reset(),da(A?s:ae,Zn[1],ge,!0)),da(ne?ae:s,"scroll",be,N),da(s,"wheel",we,N),da(s,Zn[0],me,N),da(ae,Zn[2],ve),da(ae,Zn[3],ve),da(s,"click",ce,!0),da(s,"click",Ce),da(ae,"gesturestart",ye),da(ae,"gestureend",_e),da(s,Wn+"enter",Te),da(s,Wn+"leave",Se),da(s,Wn+"move",xe),K.isEnabled=K.isPressed=K.isDragging=!1,B&&B(K))},K.kill=K.revert=function(){K.disable();var e=ia.indexOf(K);e>=0&&ia.splice(e,1),Qn===K&&(Qn=0)},ia.push(K),A&&oa(s)&&(Qn=K),K.enable(h)},t=e,(i=[{key:"velocityX",get:function(){return this._vx.getVelocity()}},{key:"velocityY",get:function(){return this._vy.getVelocity()}}])&&Rn(t.prototype,i),r&&Rn(t,r),e}();xa.version="3.12.5",xa.create=function(e){return new xa(e)},xa.register=wa,xa.getAll=function(){return ia.slice()},xa.getById=function(e){return ia.filter((function(t){return t.vars.id===e}))[0]},ea()&&$n.registerPlugin(xa),Nn.registerPlugin(xa);const Ta=Array.from(document.querySelectorAll("[data-screen]")),Sa=document.querySelector("body"),Ca=document.querySelector(".hero__video"),Ea=(e,t)=>{Ta[e].dataset.screen="",Ta[t].dataset.screen="active"},Ma=()=>{La.revert(),Da.revert(),Da.play(0),document.querySelectorAll(".about__title .glitch-text .letter").forEach((e=>{Nn.to(e.querySelectorAll(".glitch"),{translateX:0,translateY:0,skewX:"0deg",stagger:.03,delay:.5,duration:.1,onStart:()=>{Nn.fromTo(".about__title .glitch-text",{translateX:250},{translateX:330})}})})),Sa.classList.add("_light-theme"),Nn.to("header",{opacity:1,duration:.5})},Ia=()=>{const e=xa.create({target:".mainpage",type:"wheel,touch",tolerance:200,onUp:e=>{t(document.querySelector('[data-screen="active"]'),!1)},onDown:e=>{t(document.querySelector('[data-screen="active"]'),!0)}}),t=(t,i)=>{const r=Ta.indexOf(t),s=Ta[r-1]?Ta[r-1]:null;if(e.disable(),!s&&i)Ca.pause(),Pa.reverse(),Nn.to(".hero__text .char",{opacity:0}),setTimeout((()=>{Nn.to(Sa,{backgroundColor:"#caff34",duration:.5,delay:.3}),Nn.to("header",{opacity:0,duration:.5}),Ea(0,1),Ma()}),500);else if(1===r)La.play(0),Ca.currentTime=0,Ca.play(),Pa.revert(),Pa.play(),Nn.to(".hero__text .char",{duration:.3,delay:1,opacity:1,stagger:.01,ease:"power1.out"}),Nn.to("header",{opacity:1,duration:.5});setTimeout((()=>{e.enable()}),1e3)}};var ka=s(41),Oa=s.n(ka);const Aa={defaults:{duration:.5}};document.querySelectorAll("[data-splitting]").length&&Oa()();const Pa=Nn.timeline({...Aa,delay:.5}),La=Nn.timeline({...Aa,paused:!0}).to(".about__text",{opacity:0},0).to(".about__image-wrap",{translateX:"100vw",onComplete:()=>{document.querySelector("body").classList.remove("_light-theme"),Ea(1,0)}},.2).to('[data-animate-text="1"]',{translateX:"100vw"},.3).to('[data-animate-text="2"], .about__title .glitch-text',{translateX:"100vw",onStart:()=>{document.querySelectorAll(".about__title .glitch-text .letter").forEach((e=>{Nn.to(e.querySelectorAll(".glitch"),{translateX:"100%",translateY:-10,skewX:"10deg",stagger:.03,duration:.1})}))}},.4).to('[data-animate-text="3"]',{translateX:"100vw"},.5).to('[data-animate-text="4"]',{translateX:"100vw"},.6),Da=Nn.timeline({...Aa,paused:!0}).to(".about__text",{opacity:1,duration:0},0).to(".about__text .char",{duration:.3,opacity:1,stagger:.01,ease:"power1.out"},0).to(".about__image-wrap, .about__title [data-animate-text='1']",{translateX:0,opacity:1},.2).to(".about__title [data-animate-text='2']",{translateX:-21,opacity:1},.4).to(".about__title [data-animate-text='3'], .about__title [data-animate-text='4']",{translateX:0,opacity:1,duration:.1},.7),za=window.matchMedia("(max-width: 64.05em)"),Ba=window.matchMedia("(max-width: 48em)"),Fa=document.querySelector(".header"),Ga=()=>{document.documentElement.classList.remove("_show-cart-widget"),je()},Na=()=>{document.documentElement.classList.remove("_show-header-menu"),Fa.classList.remove("_dark-theme"),je()};document.addEventListener("click",(e=>{const{target:t}=e;t.closest(".header__hamburger")&&(document.documentElement.classList.toggle("_show-header-menu"),document.querySelector("._show-header-menu")?(Ye(),Fa.classList.add("_dark-theme")):Na()),za.matches&&(t.closest(".actions-header__item_cart .actions-header__txt")&&(document.documentElement.classList.remove("_show-header-menu"),document.documentElement.classList.toggle("_show-cart-widget"),document.querySelector("body._light-theme")?(Fa.classList.add("_dark-theme"),je()):document.querySelector("._show-cart-widget")?(Fa.classList.remove("_dark-theme"),Ba.matches?Ye():je()):je()),!document.querySelector("._show-cart-widget")||t.closest(".actions-header__item_cart")&&!t.closest(".cart-widget__close-btn")||Ga())})),za.addEventListener("change",(()=>{!za.matches&&document.querySelector("._show-header-menu")&&Na(),!Ba.matches&&document.querySelector("._show-cart-widget")&&Ga()})),window.addEventListener("load",(function(){document.documentElement.classList.add("_page-loaded"),document.querySelector(".hero")&&document.documentElement.classList.add("mainpage"),document.querySelector(".loader")&&(document.documentElement.classList.add("_is-locked"),Ia(),(()=>{if(document.querySelectorAll(".glitch-text").length){const e=document.querySelectorAll(".glitch-text"),t=e=>e.split("").map((e=>(e=>{let t='<div class="letter">';for(let i=1;i<=10;i++)t+=`<div class="glitch"><span style="top: -${17*i}px;">${e}</span></div>`;return t+="</div>",t})(e))).join("");e.forEach((e=>{const i=e.querySelector(".glitch-text-content");i.innerHTML=t(i.innerHTML);const r=e.querySelectorAll(".letter");for(let e=1;e<r.length;e++)r[e].style.transform=`translateX(-${13*e}px)`}))}})(),Nn.set(".hero__title, .hero__video-wrap",{opacity:0}),Nn.set(".hero__title span:first-child",{translateX:"-100%"}),Nn.set(".hero__title span:last-child",{translateX:"100%"}),Nn.set(document.querySelectorAll("[data-header-anim]"),{opacity:0}),Nn.set(".about__image-wrap",{translateX:-177,opacity:0}),Nn.set(".about__title [data-animate-text='1']",{translateX:-195,opacity:0}),Nn.set(".about__title [data-animate-text='2']",{translateX:-236,opacity:0}),Nn.set(".about__title [data-animate-text='3']",{translateX:-119,opacity:0}),Nn.set(".about__title [data-animate-text='4']",{translateX:-276,opacity:0}),Nn.set(".about__title .glitch",{translateX:"-100%",translateY:-10,skewX:"-10deg"}),Nn.to(document.querySelectorAll("[data-header-anim]"),{opacity:1,stagger:.3,delay:.5,duration:1}),document.querySelector(".hero__video")&&document.querySelector(".hero__video").play(),Pa.to(".hero__title",{opacity:1},0),Pa.to(".hero__video-wrap",{opacity:1},0),Pa.to(".hero__title span",{translateX:0},0),Nn.to(".hero__text .char",{duration:.3,delay:1,opacity:1,stagger:.01,ease:"power1.out"}),setTimeout((()=>{document.querySelector(".loader").remove()}),1e3))})),document.getElementById("currentYear")&&(document.getElementById("currentYear").innerHTML=(new Date).getFullYear())})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,