/*! For license information please see item-card.js.LICENSE.txt */
(()=>{"use strict";var t={};function e(t){return null!==t&&"object"==typeof t&&"constructor"in t&&t.constructor===Object}function i(t,r){void 0===t&&(t={}),void 0===r&&(r={}),Object.keys(r).forEach((n=>{void 0===t[n]?t[n]=r[n]:e(r[n])&&e(t[n])&&Object.keys(r[n]).length>0&&i(t[n],r[n])}))}t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}();const r={body:{},addEventListener(){},removeEventListener(){},activeElement:{blur(){},nodeName:""},querySelector:()=>null,querySelectorAll:()=>[],getElementById:()=>null,createEvent:()=>({initEvent(){}}),createElement:()=>({children:[],childNodes:[],style:{},setAttribute(){},getElementsByTagName:()=>[]}),createElementNS:()=>({}),importNode:()=>null,location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};function n(){const t="undefined"!=typeof document?document:{};return i(t,r),t}const s={document:r,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState(){},pushState(){},go(){},back(){}},CustomEvent:function(){return this},addEventListener(){},removeEventListener(){},getComputedStyle:()=>({getPropertyValue:()=>""}),Image(){},Date(){},screen:{},setTimeout(){},clearTimeout(){},matchMedia:()=>({}),requestAnimationFrame:t=>"undefined"==typeof setTimeout?(t(),null):setTimeout(t,0),cancelAnimationFrame(t){"undefined"!=typeof setTimeout&&clearTimeout(t)}};function o(){const t="undefined"!=typeof window?window:{};return i(t,s),t}function a(t,e){return void 0===e&&(e=0),setTimeout(t,e)}function l(){return Date.now()}function c(t,e){void 0===e&&(e="x");const i=o();let r,n,s;const a=function(t){const e=o();let i;return e.getComputedStyle&&(i=e.getComputedStyle(t,null)),!i&&t.currentStyle&&(i=t.currentStyle),i||(i=t.style),i}(t);return i.WebKitCSSMatrix?(n=a.transform||a.webkitTransform,n.split(",").length>6&&(n=n.split(", ").map((t=>t.replace(",","."))).join(", ")),s=new i.WebKitCSSMatrix("none"===n?"":n)):(s=a.MozTransform||a.OTransform||a.MsTransform||a.msTransform||a.transform||a.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,"),r=s.toString().split(",")),"x"===e&&(n=i.WebKitCSSMatrix?s.m41:16===r.length?parseFloat(r[12]):parseFloat(r[4])),"y"===e&&(n=i.WebKitCSSMatrix?s.m42:16===r.length?parseFloat(r[13]):parseFloat(r[5])),n||0}function d(t){return"object"==typeof t&&null!==t&&t.constructor&&"Object"===Object.prototype.toString.call(t).slice(8,-1)}function u(){const t=Object(arguments.length<=0?void 0:arguments[0]),e=["__proto__","constructor","prototype"];for(let r=1;r<arguments.length;r+=1){const n=r<0||arguments.length<=r?void 0:arguments[r];if(null!=n&&(i=n,!("undefined"!=typeof window&&void 0!==window.HTMLElement?i instanceof HTMLElement:i&&(1===i.nodeType||11===i.nodeType)))){const i=Object.keys(Object(n)).filter((t=>e.indexOf(t)<0));for(let e=0,r=i.length;e<r;e+=1){const r=i[e],s=Object.getOwnPropertyDescriptor(n,r);void 0!==s&&s.enumerable&&(d(t[r])&&d(n[r])?n[r].__swiper__?t[r]=n[r]:u(t[r],n[r]):!d(t[r])&&d(n[r])?(t[r]={},n[r].__swiper__?t[r]=n[r]:u(t[r],n[r])):t[r]=n[r])}}}var i;return t}function h(t,e,i){t.style.setProperty(e,i)}function p(t){let{swiper:e,targetPosition:i,side:r}=t;const n=o(),s=-e.translate;let a,l=null;const c=e.params.speed;e.wrapperEl.style.scrollSnapType="none",n.cancelAnimationFrame(e.cssModeFrameID);const d=i>s?"next":"prev",u=(t,e)=>"next"===d&&t>=e||"prev"===d&&t<=e,h=()=>{a=(new Date).getTime(),null===l&&(l=a);const t=Math.max(Math.min((a-l)/c,1),0),o=.5-Math.cos(t*Math.PI)/2;let d=s+o*(i-s);if(u(d,i)&&(d=i),e.wrapperEl.scrollTo({[r]:d}),u(d,i))return e.wrapperEl.style.overflow="hidden",e.wrapperEl.style.scrollSnapType="",setTimeout((()=>{e.wrapperEl.style.overflow="",e.wrapperEl.scrollTo({[r]:d})})),void n.cancelAnimationFrame(e.cssModeFrameID);e.cssModeFrameID=n.requestAnimationFrame(h)};h()}function f(t,e){return void 0===e&&(e=""),[...t.children].filter((t=>t.matches(e)))}function m(t){try{return void console.warn(t)}catch(t){}}function v(t,e){void 0===e&&(e=[]);const i=document.createElement(t);return i.classList.add(...Array.isArray(e)?e:function(t){return void 0===t&&(t=""),t.trim().split(" ").filter((t=>!!t.trim()))}(e)),i}function g(t,e){return o().getComputedStyle(t,null).getPropertyValue(e)}function y(t){let e,i=t;if(i){for(e=0;null!==(i=i.previousSibling);)1===i.nodeType&&(e+=1);return e}}function w(t,e,i){const r=o();return i?t["width"===e?"offsetWidth":"offsetHeight"]+parseFloat(r.getComputedStyle(t,null).getPropertyValue("width"===e?"margin-right":"margin-top"))+parseFloat(r.getComputedStyle(t,null).getPropertyValue("width"===e?"margin-left":"margin-bottom")):t.offsetWidth}function _(t){return(Array.isArray(t)?t:[t]).filter((t=>!!t))}let b,x,T;function S(){return b||(b=function(){const t=o(),e=n();return{smoothScroll:e.documentElement&&e.documentElement.style&&"scrollBehavior"in e.documentElement.style,touch:!!("ontouchstart"in t||t.DocumentTouch&&e instanceof t.DocumentTouch)}}()),b}function E(t){return void 0===t&&(t={}),x||(x=function(t){let{userAgent:e}=void 0===t?{}:t;const i=S(),r=o(),n=r.navigator.platform,s=e||r.navigator.userAgent,a={ios:!1,android:!1},l=r.screen.width,c=r.screen.height,d=s.match(/(Android);?[\s\/]+([\d.]+)?/);let u=s.match(/(iPad).*OS\s([\d_]+)/);const h=s.match(/(iPod)(.*OS\s([\d_]+))?/),p=!u&&s.match(/(iPhone\sOS|iOS)\s([\d_]+)/),f="Win32"===n;let m="MacIntel"===n;return!u&&m&&i.touch&&["1024x1366","1366x1024","834x1194","1194x834","834x1112","1112x834","768x1024","1024x768","820x1180","1180x820","810x1080","1080x810"].indexOf(`${l}x${c}`)>=0&&(u=s.match(/(Version)\/([\d.]+)/),u||(u=[0,1,"13_0_0"]),m=!1),d&&!f&&(a.os="android",a.android=!0),(u||p||h)&&(a.os="ios",a.ios=!0),a}(t)),x}function k(){return T||(T=function(){const t=o(),e=E();let i=!1;function r(){const e=t.navigator.userAgent.toLowerCase();return e.indexOf("safari")>=0&&e.indexOf("chrome")<0&&e.indexOf("android")<0}if(r()){const e=String(t.navigator.userAgent);if(e.includes("Version/")){const[t,r]=e.split("Version/")[1].split(" ")[0].split(".").map((t=>Number(t)));i=t<16||16===t&&r<2}}const n=/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(t.navigator.userAgent),s=r();return{isSafari:i||s,needPerspectiveFix:i,need3dFix:s||n&&e.ios,isWebView:n}}()),T}var M={on(t,e,i){const r=this;if(!r.eventsListeners||r.destroyed)return r;if("function"!=typeof e)return r;const n=i?"unshift":"push";return t.split(" ").forEach((t=>{r.eventsListeners[t]||(r.eventsListeners[t]=[]),r.eventsListeners[t][n](e)})),r},once(t,e,i){const r=this;if(!r.eventsListeners||r.destroyed)return r;if("function"!=typeof e)return r;function n(){r.off(t,n),n.__emitterProxy&&delete n.__emitterProxy;for(var i=arguments.length,s=new Array(i),o=0;o<i;o++)s[o]=arguments[o];e.apply(r,s)}return n.__emitterProxy=e,r.on(t,n,i)},onAny(t,e){const i=this;if(!i.eventsListeners||i.destroyed)return i;if("function"!=typeof t)return i;const r=e?"unshift":"push";return i.eventsAnyListeners.indexOf(t)<0&&i.eventsAnyListeners[r](t),i},offAny(t){const e=this;if(!e.eventsListeners||e.destroyed)return e;if(!e.eventsAnyListeners)return e;const i=e.eventsAnyListeners.indexOf(t);return i>=0&&e.eventsAnyListeners.splice(i,1),e},off(t,e){const i=this;return!i.eventsListeners||i.destroyed?i:i.eventsListeners?(t.split(" ").forEach((t=>{void 0===e?i.eventsListeners[t]=[]:i.eventsListeners[t]&&i.eventsListeners[t].forEach(((r,n)=>{(r===e||r.__emitterProxy&&r.__emitterProxy===e)&&i.eventsListeners[t].splice(n,1)}))})),i):i},emit(){const t=this;if(!t.eventsListeners||t.destroyed)return t;if(!t.eventsListeners)return t;let e,i,r;for(var n=arguments.length,s=new Array(n),o=0;o<n;o++)s[o]=arguments[o];"string"==typeof s[0]||Array.isArray(s[0])?(e=s[0],i=s.slice(1,s.length),r=t):(e=s[0].events,i=s[0].data,r=s[0].context||t),i.unshift(r);return(Array.isArray(e)?e:e.split(" ")).forEach((e=>{t.eventsAnyListeners&&t.eventsAnyListeners.length&&t.eventsAnyListeners.forEach((t=>{t.apply(r,[e,...i])})),t.eventsListeners&&t.eventsListeners[e]&&t.eventsListeners[e].forEach((t=>{t.apply(r,i)}))})),t}};const C=(t,e,i)=>{e&&!t.classList.contains(i)?t.classList.add(i):!e&&t.classList.contains(i)&&t.classList.remove(i)};const O=(t,e,i)=>{e&&!t.classList.contains(i)?t.classList.add(i):!e&&t.classList.contains(i)&&t.classList.remove(i)};const A=(t,e)=>{if(!t||t.destroyed||!t.params)return;const i=e.closest(t.isElement?"swiper-slide":`.${t.params.slideClass}`);if(i){let e=i.querySelector(`.${t.params.lazyPreloaderClass}`);!e&&t.isElement&&(i.shadowRoot?e=i.shadowRoot.querySelector(`.${t.params.lazyPreloaderClass}`):requestAnimationFrame((()=>{i.shadowRoot&&(e=i.shadowRoot.querySelector(`.${t.params.lazyPreloaderClass}`),e&&e.remove())}))),e&&e.remove()}},P=(t,e)=>{if(!t.slides[e])return;const i=t.slides[e].querySelector('[loading="lazy"]');i&&i.removeAttribute("loading")},L=t=>{if(!t||t.destroyed||!t.params)return;let e=t.params.lazyPreloadPrevNext;const i=t.slides.length;if(!i||!e||e<0)return;e=Math.min(e,i);const r="auto"===t.params.slidesPerView?t.slidesPerViewDynamic():Math.ceil(t.params.slidesPerView),n=t.activeIndex;if(t.params.grid&&t.params.grid.rows>1){const i=n,s=[i-e];return s.push(...Array.from({length:e}).map(((t,e)=>i+r+e))),void t.slides.forEach(((e,i)=>{s.includes(e.column)&&P(t,i)}))}const s=n+r-1;if(t.params.rewind||t.params.loop)for(let r=n-e;r<=s+e;r+=1){const e=(r%i+i)%i;(e<n||e>s)&&P(t,e)}else for(let r=Math.max(n-e,0);r<=Math.min(s+e,i-1);r+=1)r!==n&&(r>s||r<n)&&P(t,r)};var D={updateSize:function(){const t=this;let e,i;const r=t.el;e=void 0!==t.params.width&&null!==t.params.width?t.params.width:r.clientWidth,i=void 0!==t.params.height&&null!==t.params.height?t.params.height:r.clientHeight,0===e&&t.isHorizontal()||0===i&&t.isVertical()||(e=e-parseInt(g(r,"padding-left")||0,10)-parseInt(g(r,"padding-right")||0,10),i=i-parseInt(g(r,"padding-top")||0,10)-parseInt(g(r,"padding-bottom")||0,10),Number.isNaN(e)&&(e=0),Number.isNaN(i)&&(i=0),Object.assign(t,{width:e,height:i,size:t.isHorizontal()?e:i}))},updateSlides:function(){const t=this;function e(e,i){return parseFloat(e.getPropertyValue(t.getDirectionLabel(i))||0)}const i=t.params,{wrapperEl:r,slidesEl:n,size:s,rtlTranslate:o,wrongRTL:a}=t,l=t.virtual&&i.virtual.enabled,c=l?t.virtual.slides.length:t.slides.length,d=f(n,`.${t.params.slideClass}, swiper-slide`),u=l?t.virtual.slides.length:d.length;let p=[];const m=[],v=[];let y=i.slidesOffsetBefore;"function"==typeof y&&(y=i.slidesOffsetBefore.call(t));let _=i.slidesOffsetAfter;"function"==typeof _&&(_=i.slidesOffsetAfter.call(t));const b=t.snapGrid.length,x=t.slidesGrid.length;let T=i.spaceBetween,S=-y,E=0,k=0;if(void 0===s)return;"string"==typeof T&&T.indexOf("%")>=0?T=parseFloat(T.replace("%",""))/100*s:"string"==typeof T&&(T=parseFloat(T)),t.virtualSize=-T,d.forEach((t=>{o?t.style.marginLeft="":t.style.marginRight="",t.style.marginBottom="",t.style.marginTop=""})),i.centeredSlides&&i.cssMode&&(h(r,"--swiper-centered-offset-before",""),h(r,"--swiper-centered-offset-after",""));const M=i.grid&&i.grid.rows>1&&t.grid;let C;M?t.grid.initSlides(d):t.grid&&t.grid.unsetSlides();const O="auto"===i.slidesPerView&&i.breakpoints&&Object.keys(i.breakpoints).filter((t=>void 0!==i.breakpoints[t].slidesPerView)).length>0;for(let r=0;r<u;r+=1){let n;if(C=0,d[r]&&(n=d[r]),M&&t.grid.updateSlide(r,n,d),!d[r]||"none"!==g(n,"display")){if("auto"===i.slidesPerView){O&&(d[r].style[t.getDirectionLabel("width")]="");const s=getComputedStyle(n),o=n.style.transform,a=n.style.webkitTransform;if(o&&(n.style.transform="none"),a&&(n.style.webkitTransform="none"),i.roundLengths)C=t.isHorizontal()?w(n,"width",!0):w(n,"height",!0);else{const t=e(s,"width"),i=e(s,"padding-left"),r=e(s,"padding-right"),o=e(s,"margin-left"),a=e(s,"margin-right"),l=s.getPropertyValue("box-sizing");if(l&&"border-box"===l)C=t+o+a;else{const{clientWidth:e,offsetWidth:s}=n;C=t+i+r+o+a+(s-e)}}o&&(n.style.transform=o),a&&(n.style.webkitTransform=a),i.roundLengths&&(C=Math.floor(C))}else C=(s-(i.slidesPerView-1)*T)/i.slidesPerView,i.roundLengths&&(C=Math.floor(C)),d[r]&&(d[r].style[t.getDirectionLabel("width")]=`${C}px`);d[r]&&(d[r].swiperSlideSize=C),v.push(C),i.centeredSlides?(S=S+C/2+E/2+T,0===E&&0!==r&&(S=S-s/2-T),0===r&&(S=S-s/2-T),Math.abs(S)<.001&&(S=0),i.roundLengths&&(S=Math.floor(S)),k%i.slidesPerGroup==0&&p.push(S),m.push(S)):(i.roundLengths&&(S=Math.floor(S)),(k-Math.min(t.params.slidesPerGroupSkip,k))%t.params.slidesPerGroup==0&&p.push(S),m.push(S),S=S+C+T),t.virtualSize+=C+T,E=C,k+=1}}if(t.virtualSize=Math.max(t.virtualSize,s)+_,o&&a&&("slide"===i.effect||"coverflow"===i.effect)&&(r.style.width=`${t.virtualSize+T}px`),i.setWrapperSize&&(r.style[t.getDirectionLabel("width")]=`${t.virtualSize+T}px`),M&&t.grid.updateWrapperSize(C,p),!i.centeredSlides){const e=[];for(let r=0;r<p.length;r+=1){let n=p[r];i.roundLengths&&(n=Math.floor(n)),p[r]<=t.virtualSize-s&&e.push(n)}p=e,Math.floor(t.virtualSize-s)-Math.floor(p[p.length-1])>1&&p.push(t.virtualSize-s)}if(l&&i.loop){const e=v[0]+T;if(i.slidesPerGroup>1){const r=Math.ceil((t.virtual.slidesBefore+t.virtual.slidesAfter)/i.slidesPerGroup),n=e*i.slidesPerGroup;for(let t=0;t<r;t+=1)p.push(p[p.length-1]+n)}for(let r=0;r<t.virtual.slidesBefore+t.virtual.slidesAfter;r+=1)1===i.slidesPerGroup&&p.push(p[p.length-1]+e),m.push(m[m.length-1]+e),t.virtualSize+=e}if(0===p.length&&(p=[0]),0!==T){const e=t.isHorizontal()&&o?"marginLeft":t.getDirectionLabel("marginRight");d.filter(((t,e)=>!(i.cssMode&&!i.loop)||e!==d.length-1)).forEach((t=>{t.style[e]=`${T}px`}))}if(i.centeredSlides&&i.centeredSlidesBounds){let t=0;v.forEach((e=>{t+=e+(T||0)})),t-=T;const e=t-s;p=p.map((t=>t<=0?-y:t>e?e+_:t))}if(i.centerInsufficientSlides){let t=0;v.forEach((e=>{t+=e+(T||0)})),t-=T;const e=(i.slidesOffsetBefore||0)+(i.slidesOffsetAfter||0);if(t+e<s){const i=(s-t-e)/2;p.forEach(((t,e)=>{p[e]=t-i})),m.forEach(((t,e)=>{m[e]=t+i}))}}if(Object.assign(t,{slides:d,snapGrid:p,slidesGrid:m,slidesSizesGrid:v}),i.centeredSlides&&i.cssMode&&!i.centeredSlidesBounds){h(r,"--swiper-centered-offset-before",-p[0]+"px"),h(r,"--swiper-centered-offset-after",t.size/2-v[v.length-1]/2+"px");const e=-t.snapGrid[0],i=-t.slidesGrid[0];t.snapGrid=t.snapGrid.map((t=>t+e)),t.slidesGrid=t.slidesGrid.map((t=>t+i))}if(u!==c&&t.emit("slidesLengthChange"),p.length!==b&&(t.params.watchOverflow&&t.checkOverflow(),t.emit("snapGridLengthChange")),m.length!==x&&t.emit("slidesGridLengthChange"),i.watchSlidesProgress&&t.updateSlidesOffset(),t.emit("slidesUpdated"),!(l||i.cssMode||"slide"!==i.effect&&"fade"!==i.effect)){const e=`${i.containerModifierClass}backface-hidden`,r=t.el.classList.contains(e);u<=i.maxBackfaceHiddenSlides?r||t.el.classList.add(e):r&&t.el.classList.remove(e)}},updateAutoHeight:function(t){const e=this,i=[],r=e.virtual&&e.params.virtual.enabled;let n,s=0;"number"==typeof t?e.setTransition(t):!0===t&&e.setTransition(e.params.speed);const o=t=>r?e.slides[e.getSlideIndexByData(t)]:e.slides[t];if("auto"!==e.params.slidesPerView&&e.params.slidesPerView>1)if(e.params.centeredSlides)(e.visibleSlides||[]).forEach((t=>{i.push(t)}));else for(n=0;n<Math.ceil(e.params.slidesPerView);n+=1){const t=e.activeIndex+n;if(t>e.slides.length&&!r)break;i.push(o(t))}else i.push(o(e.activeIndex));for(n=0;n<i.length;n+=1)if(void 0!==i[n]){const t=i[n].offsetHeight;s=t>s?t:s}(s||0===s)&&(e.wrapperEl.style.height=`${s}px`)},updateSlidesOffset:function(){const t=this,e=t.slides,i=t.isElement?t.isHorizontal()?t.wrapperEl.offsetLeft:t.wrapperEl.offsetTop:0;for(let r=0;r<e.length;r+=1)e[r].swiperSlideOffset=(t.isHorizontal()?e[r].offsetLeft:e[r].offsetTop)-i-t.cssOverflowAdjustment()},updateSlidesProgress:function(t){void 0===t&&(t=this&&this.translate||0);const e=this,i=e.params,{slides:r,rtlTranslate:n,snapGrid:s}=e;if(0===r.length)return;void 0===r[0].swiperSlideOffset&&e.updateSlidesOffset();let o=-t;n&&(o=t),e.visibleSlidesIndexes=[],e.visibleSlides=[];let a=i.spaceBetween;"string"==typeof a&&a.indexOf("%")>=0?a=parseFloat(a.replace("%",""))/100*e.size:"string"==typeof a&&(a=parseFloat(a));for(let t=0;t<r.length;t+=1){const l=r[t];let c=l.swiperSlideOffset;i.cssMode&&i.centeredSlides&&(c-=r[0].swiperSlideOffset);const d=(o+(i.centeredSlides?e.minTranslate():0)-c)/(l.swiperSlideSize+a),u=(o-s[0]+(i.centeredSlides?e.minTranslate():0)-c)/(l.swiperSlideSize+a),h=-(o-c),p=h+e.slidesSizesGrid[t],f=h>=0&&h<=e.size-e.slidesSizesGrid[t],m=h>=0&&h<e.size-1||p>1&&p<=e.size||h<=0&&p>=e.size;m&&(e.visibleSlides.push(l),e.visibleSlidesIndexes.push(t)),C(l,m,i.slideVisibleClass),C(l,f,i.slideFullyVisibleClass),l.progress=n?-d:d,l.originalProgress=n?-u:u}},updateProgress:function(t){const e=this;if(void 0===t){const i=e.rtlTranslate?-1:1;t=e&&e.translate&&e.translate*i||0}const i=e.params,r=e.maxTranslate()-e.minTranslate();let{progress:n,isBeginning:s,isEnd:o,progressLoop:a}=e;const l=s,c=o;if(0===r)n=0,s=!0,o=!0;else{n=(t-e.minTranslate())/r;const i=Math.abs(t-e.minTranslate())<1,a=Math.abs(t-e.maxTranslate())<1;s=i||n<=0,o=a||n>=1,i&&(n=0),a&&(n=1)}if(i.loop){const i=e.getSlideIndexByData(0),r=e.getSlideIndexByData(e.slides.length-1),n=e.slidesGrid[i],s=e.slidesGrid[r],o=e.slidesGrid[e.slidesGrid.length-1],l=Math.abs(t);a=l>=n?(l-n)/o:(l+o-s)/o,a>1&&(a-=1)}Object.assign(e,{progress:n,progressLoop:a,isBeginning:s,isEnd:o}),(i.watchSlidesProgress||i.centeredSlides&&i.autoHeight)&&e.updateSlidesProgress(t),s&&!l&&e.emit("reachBeginning toEdge"),o&&!c&&e.emit("reachEnd toEdge"),(l&&!s||c&&!o)&&e.emit("fromEdge"),e.emit("progress",n)},updateSlidesClasses:function(){const t=this,{slides:e,params:i,slidesEl:r,activeIndex:n}=t,s=t.virtual&&i.virtual.enabled,o=t.grid&&i.grid&&i.grid.rows>1,a=t=>f(r,`.${i.slideClass}${t}, swiper-slide${t}`)[0];let l,c,d;if(s)if(i.loop){let e=n-t.virtual.slidesBefore;e<0&&(e=t.virtual.slides.length+e),e>=t.virtual.slides.length&&(e-=t.virtual.slides.length),l=a(`[data-swiper-slide-index="${e}"]`)}else l=a(`[data-swiper-slide-index="${n}"]`);else o?(l=e.filter((t=>t.column===n))[0],d=e.filter((t=>t.column===n+1))[0],c=e.filter((t=>t.column===n-1))[0]):l=e[n];l&&(o||(d=function(t,e){const i=[];for(;t.nextElementSibling;){const r=t.nextElementSibling;e?r.matches(e)&&i.push(r):i.push(r),t=r}return i}(l,`.${i.slideClass}, swiper-slide`)[0],i.loop&&!d&&(d=e[0]),c=function(t,e){const i=[];for(;t.previousElementSibling;){const r=t.previousElementSibling;e?r.matches(e)&&i.push(r):i.push(r),t=r}return i}(l,`.${i.slideClass}, swiper-slide`)[0],i.loop&&0===!c&&(c=e[e.length-1]))),e.forEach((t=>{O(t,t===l,i.slideActiveClass),O(t,t===d,i.slideNextClass),O(t,t===c,i.slidePrevClass)})),t.emitSlidesClasses()},updateActiveIndex:function(t){const e=this,i=e.rtlTranslate?e.translate:-e.translate,{snapGrid:r,params:n,activeIndex:s,realIndex:o,snapIndex:a}=e;let l,c=t;const d=t=>{let i=t-e.virtual.slidesBefore;return i<0&&(i=e.virtual.slides.length+i),i>=e.virtual.slides.length&&(i-=e.virtual.slides.length),i};if(void 0===c&&(c=function(t){const{slidesGrid:e,params:i}=t,r=t.rtlTranslate?t.translate:-t.translate;let n;for(let t=0;t<e.length;t+=1)void 0!==e[t+1]?r>=e[t]&&r<e[t+1]-(e[t+1]-e[t])/2?n=t:r>=e[t]&&r<e[t+1]&&(n=t+1):r>=e[t]&&(n=t);return i.normalizeSlideIndex&&(n<0||void 0===n)&&(n=0),n}(e)),r.indexOf(i)>=0)l=r.indexOf(i);else{const t=Math.min(n.slidesPerGroupSkip,c);l=t+Math.floor((c-t)/n.slidesPerGroup)}if(l>=r.length&&(l=r.length-1),c===s&&!e.params.loop)return void(l!==a&&(e.snapIndex=l,e.emit("snapIndexChange")));if(c===s&&e.params.loop&&e.virtual&&e.params.virtual.enabled)return void(e.realIndex=d(c));const u=e.grid&&n.grid&&n.grid.rows>1;let h;if(e.virtual&&n.virtual.enabled&&n.loop)h=d(c);else if(u){const t=e.slides.filter((t=>t.column===c))[0];let i=parseInt(t.getAttribute("data-swiper-slide-index"),10);Number.isNaN(i)&&(i=Math.max(e.slides.indexOf(t),0)),h=Math.floor(i/n.grid.rows)}else if(e.slides[c]){const t=e.slides[c].getAttribute("data-swiper-slide-index");h=t?parseInt(t,10):c}else h=c;Object.assign(e,{previousSnapIndex:a,snapIndex:l,previousRealIndex:o,realIndex:h,previousIndex:s,activeIndex:c}),e.initialized&&L(e),e.emit("activeIndexChange"),e.emit("snapIndexChange"),(e.initialized||e.params.runCallbacksOnInit)&&(o!==h&&e.emit("realIndexChange"),e.emit("slideChange"))},updateClickedSlide:function(t,e){const i=this,r=i.params;let n=t.closest(`.${r.slideClass}, swiper-slide`);!n&&i.isElement&&e&&e.length>1&&e.includes(t)&&[...e.slice(e.indexOf(t)+1,e.length)].forEach((t=>{!n&&t.matches&&t.matches(`.${r.slideClass}, swiper-slide`)&&(n=t)}));let s,o=!1;if(n)for(let t=0;t<i.slides.length;t+=1)if(i.slides[t]===n){o=!0,s=t;break}if(!n||!o)return i.clickedSlide=void 0,void(i.clickedIndex=void 0);i.clickedSlide=n,i.virtual&&i.params.virtual.enabled?i.clickedIndex=parseInt(n.getAttribute("data-swiper-slide-index"),10):i.clickedIndex=s,r.slideToClickedSlide&&void 0!==i.clickedIndex&&i.clickedIndex!==i.activeIndex&&i.slideToClickedSlide()}};var I={getTranslate:function(t){void 0===t&&(t=this.isHorizontal()?"x":"y");const{params:e,rtlTranslate:i,translate:r,wrapperEl:n}=this;if(e.virtualTranslate)return i?-r:r;if(e.cssMode)return r;let s=c(n,t);return s+=this.cssOverflowAdjustment(),i&&(s=-s),s||0},setTranslate:function(t,e){const i=this,{rtlTranslate:r,params:n,wrapperEl:s,progress:o}=i;let a,l=0,c=0;i.isHorizontal()?l=r?-t:t:c=t,n.roundLengths&&(l=Math.floor(l),c=Math.floor(c)),i.previousTranslate=i.translate,i.translate=i.isHorizontal()?l:c,n.cssMode?s[i.isHorizontal()?"scrollLeft":"scrollTop"]=i.isHorizontal()?-l:-c:n.virtualTranslate||(i.isHorizontal()?l-=i.cssOverflowAdjustment():c-=i.cssOverflowAdjustment(),s.style.transform=`translate3d(${l}px, ${c}px, 0px)`);const d=i.maxTranslate()-i.minTranslate();a=0===d?0:(t-i.minTranslate())/d,a!==o&&i.updateProgress(t),i.emit("setTranslate",i.translate,e)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]},translateTo:function(t,e,i,r,n){void 0===t&&(t=0),void 0===e&&(e=this.params.speed),void 0===i&&(i=!0),void 0===r&&(r=!0);const s=this,{params:o,wrapperEl:a}=s;if(s.animating&&o.preventInteractionOnTransition)return!1;const l=s.minTranslate(),c=s.maxTranslate();let d;if(d=r&&t>l?l:r&&t<c?c:t,s.updateProgress(d),o.cssMode){const t=s.isHorizontal();if(0===e)a[t?"scrollLeft":"scrollTop"]=-d;else{if(!s.support.smoothScroll)return p({swiper:s,targetPosition:-d,side:t?"left":"top"}),!0;a.scrollTo({[t?"left":"top"]:-d,behavior:"smooth"})}return!0}return 0===e?(s.setTransition(0),s.setTranslate(d),i&&(s.emit("beforeTransitionStart",e,n),s.emit("transitionEnd"))):(s.setTransition(e),s.setTranslate(d),i&&(s.emit("beforeTransitionStart",e,n),s.emit("transitionStart")),s.animating||(s.animating=!0,s.onTranslateToWrapperTransitionEnd||(s.onTranslateToWrapperTransitionEnd=function(t){s&&!s.destroyed&&t.target===this&&(s.wrapperEl.removeEventListener("transitionend",s.onTranslateToWrapperTransitionEnd),s.onTranslateToWrapperTransitionEnd=null,delete s.onTranslateToWrapperTransitionEnd,s.animating=!1,i&&s.emit("transitionEnd"))}),s.wrapperEl.addEventListener("transitionend",s.onTranslateToWrapperTransitionEnd))),!0}};function z(t){let{swiper:e,runCallbacks:i,direction:r,step:n}=t;const{activeIndex:s,previousIndex:o}=e;let a=r;if(a||(a=s>o?"next":s<o?"prev":"reset"),e.emit(`transition${n}`),i&&s!==o){if("reset"===a)return void e.emit(`slideResetTransition${n}`);e.emit(`slideChangeTransition${n}`),"next"===a?e.emit(`slideNextTransition${n}`):e.emit(`slidePrevTransition${n}`)}}var R={slideTo:function(t,e,i,r,n){void 0===t&&(t=0),void 0===i&&(i=!0),"string"==typeof t&&(t=parseInt(t,10));const s=this;let o=t;o<0&&(o=0);const{params:a,snapGrid:l,slidesGrid:c,previousIndex:d,activeIndex:u,rtlTranslate:h,wrapperEl:f,enabled:m}=s;if(!m&&!r&&!n||s.destroyed||s.animating&&a.preventInteractionOnTransition)return!1;void 0===e&&(e=s.params.speed);const v=Math.min(s.params.slidesPerGroupSkip,o);let g=v+Math.floor((o-v)/s.params.slidesPerGroup);g>=l.length&&(g=l.length-1);const y=-l[g];if(a.normalizeSlideIndex)for(let t=0;t<c.length;t+=1){const e=-Math.floor(100*y),i=Math.floor(100*c[t]),r=Math.floor(100*c[t+1]);void 0!==c[t+1]?e>=i&&e<r-(r-i)/2?o=t:e>=i&&e<r&&(o=t+1):e>=i&&(o=t)}if(s.initialized&&o!==u){if(!s.allowSlideNext&&(h?y>s.translate&&y>s.minTranslate():y<s.translate&&y<s.minTranslate()))return!1;if(!s.allowSlidePrev&&y>s.translate&&y>s.maxTranslate()&&(u||0)!==o)return!1}let w;if(o!==(d||0)&&i&&s.emit("beforeSlideChangeStart"),s.updateProgress(y),w=o>u?"next":o<u?"prev":"reset",h&&-y===s.translate||!h&&y===s.translate)return s.updateActiveIndex(o),a.autoHeight&&s.updateAutoHeight(),s.updateSlidesClasses(),"slide"!==a.effect&&s.setTranslate(y),"reset"!==w&&(s.transitionStart(i,w),s.transitionEnd(i,w)),!1;if(a.cssMode){const t=s.isHorizontal(),i=h?y:-y;if(0===e){const e=s.virtual&&s.params.virtual.enabled;e&&(s.wrapperEl.style.scrollSnapType="none",s._immediateVirtual=!0),e&&!s._cssModeVirtualInitialSet&&s.params.initialSlide>0?(s._cssModeVirtualInitialSet=!0,requestAnimationFrame((()=>{f[t?"scrollLeft":"scrollTop"]=i}))):f[t?"scrollLeft":"scrollTop"]=i,e&&requestAnimationFrame((()=>{s.wrapperEl.style.scrollSnapType="",s._immediateVirtual=!1}))}else{if(!s.support.smoothScroll)return p({swiper:s,targetPosition:i,side:t?"left":"top"}),!0;f.scrollTo({[t?"left":"top"]:i,behavior:"smooth"})}return!0}return s.setTransition(e),s.setTranslate(y),s.updateActiveIndex(o),s.updateSlidesClasses(),s.emit("beforeTransitionStart",e,r),s.transitionStart(i,w),0===e?s.transitionEnd(i,w):s.animating||(s.animating=!0,s.onSlideToWrapperTransitionEnd||(s.onSlideToWrapperTransitionEnd=function(t){s&&!s.destroyed&&t.target===this&&(s.wrapperEl.removeEventListener("transitionend",s.onSlideToWrapperTransitionEnd),s.onSlideToWrapperTransitionEnd=null,delete s.onSlideToWrapperTransitionEnd,s.transitionEnd(i,w))}),s.wrapperEl.addEventListener("transitionend",s.onSlideToWrapperTransitionEnd)),!0},slideToLoop:function(t,e,i,r){if(void 0===t&&(t=0),void 0===i&&(i=!0),"string"==typeof t){t=parseInt(t,10)}const n=this;if(n.destroyed)return;void 0===e&&(e=n.params.speed);const s=n.grid&&n.params.grid&&n.params.grid.rows>1;let o=t;if(n.params.loop)if(n.virtual&&n.params.virtual.enabled)o+=n.virtual.slidesBefore;else{let t;if(s){const e=o*n.params.grid.rows;t=n.slides.filter((t=>1*t.getAttribute("data-swiper-slide-index")===e))[0].column}else t=n.getSlideIndexByData(o);const e=s?Math.ceil(n.slides.length/n.params.grid.rows):n.slides.length,{centeredSlides:i}=n.params;let a=n.params.slidesPerView;"auto"===a?a=n.slidesPerViewDynamic():(a=Math.ceil(parseFloat(n.params.slidesPerView,10)),i&&a%2==0&&(a+=1));let l=e-t<a;if(i&&(l=l||t<Math.ceil(a/2)),r&&i&&"auto"!==n.params.slidesPerView&&!s&&(l=!1),l){const r=i?t<n.activeIndex?"prev":"next":t-n.activeIndex-1<n.params.slidesPerView?"next":"prev";n.loopFix({direction:r,slideTo:!0,activeSlideIndex:"next"===r?t+1:t-e+1,slideRealIndex:"next"===r?n.realIndex:void 0})}if(s){const t=o*n.params.grid.rows;o=n.slides.filter((e=>1*e.getAttribute("data-swiper-slide-index")===t))[0].column}else o=n.getSlideIndexByData(o)}return requestAnimationFrame((()=>{n.slideTo(o,e,i,r)})),n},slideNext:function(t,e,i){void 0===e&&(e=!0);const r=this,{enabled:n,params:s,animating:o}=r;if(!n||r.destroyed)return r;void 0===t&&(t=r.params.speed);let a=s.slidesPerGroup;"auto"===s.slidesPerView&&1===s.slidesPerGroup&&s.slidesPerGroupAuto&&(a=Math.max(r.slidesPerViewDynamic("current",!0),1));const l=r.activeIndex<s.slidesPerGroupSkip?1:a,c=r.virtual&&s.virtual.enabled;if(s.loop){if(o&&!c&&s.loopPreventsSliding)return!1;if(r.loopFix({direction:"next"}),r._clientLeft=r.wrapperEl.clientLeft,r.activeIndex===r.slides.length-1&&s.cssMode)return requestAnimationFrame((()=>{r.slideTo(r.activeIndex+l,t,e,i)})),!0}return s.rewind&&r.isEnd?r.slideTo(0,t,e,i):r.slideTo(r.activeIndex+l,t,e,i)},slidePrev:function(t,e,i){void 0===e&&(e=!0);const r=this,{params:n,snapGrid:s,slidesGrid:o,rtlTranslate:a,enabled:l,animating:c}=r;if(!l||r.destroyed)return r;void 0===t&&(t=r.params.speed);const d=r.virtual&&n.virtual.enabled;if(n.loop){if(c&&!d&&n.loopPreventsSliding)return!1;r.loopFix({direction:"prev"}),r._clientLeft=r.wrapperEl.clientLeft}function u(t){return t<0?-Math.floor(Math.abs(t)):Math.floor(t)}const h=u(a?r.translate:-r.translate),p=s.map((t=>u(t)));let f=s[p.indexOf(h)-1];if(void 0===f&&n.cssMode){let t;s.forEach(((e,i)=>{h>=e&&(t=i)})),void 0!==t&&(f=s[t>0?t-1:t])}let m=0;if(void 0!==f&&(m=o.indexOf(f),m<0&&(m=r.activeIndex-1),"auto"===n.slidesPerView&&1===n.slidesPerGroup&&n.slidesPerGroupAuto&&(m=m-r.slidesPerViewDynamic("previous",!0)+1,m=Math.max(m,0))),n.rewind&&r.isBeginning){const n=r.params.virtual&&r.params.virtual.enabled&&r.virtual?r.virtual.slides.length-1:r.slides.length-1;return r.slideTo(n,t,e,i)}return n.loop&&0===r.activeIndex&&n.cssMode?(requestAnimationFrame((()=>{r.slideTo(m,t,e,i)})),!0):r.slideTo(m,t,e,i)},slideReset:function(t,e,i){void 0===e&&(e=!0);const r=this;if(!r.destroyed)return void 0===t&&(t=r.params.speed),r.slideTo(r.activeIndex,t,e,i)},slideToClosest:function(t,e,i,r){void 0===e&&(e=!0),void 0===r&&(r=.5);const n=this;if(n.destroyed)return;void 0===t&&(t=n.params.speed);let s=n.activeIndex;const o=Math.min(n.params.slidesPerGroupSkip,s),a=o+Math.floor((s-o)/n.params.slidesPerGroup),l=n.rtlTranslate?n.translate:-n.translate;if(l>=n.snapGrid[a]){const t=n.snapGrid[a];l-t>(n.snapGrid[a+1]-t)*r&&(s+=n.params.slidesPerGroup)}else{const t=n.snapGrid[a-1];l-t<=(n.snapGrid[a]-t)*r&&(s-=n.params.slidesPerGroup)}return s=Math.max(s,0),s=Math.min(s,n.slidesGrid.length-1),n.slideTo(s,t,e,i)},slideToClickedSlide:function(){const t=this;if(t.destroyed)return;const{params:e,slidesEl:i}=t,r="auto"===e.slidesPerView?t.slidesPerViewDynamic():e.slidesPerView;let n,s=t.clickedIndex;const o=t.isElement?"swiper-slide":`.${e.slideClass}`;if(e.loop){if(t.animating)return;n=parseInt(t.clickedSlide.getAttribute("data-swiper-slide-index"),10),e.centeredSlides?s<t.loopedSlides-r/2||s>t.slides.length-t.loopedSlides+r/2?(t.loopFix(),s=t.getSlideIndex(f(i,`${o}[data-swiper-slide-index="${n}"]`)[0]),a((()=>{t.slideTo(s)}))):t.slideTo(s):s>t.slides.length-r?(t.loopFix(),s=t.getSlideIndex(f(i,`${o}[data-swiper-slide-index="${n}"]`)[0]),a((()=>{t.slideTo(s)}))):t.slideTo(s)}else t.slideTo(s)}};var B={loopCreate:function(t){const e=this,{params:i,slidesEl:r}=e;if(!i.loop||e.virtual&&e.params.virtual.enabled)return;const n=()=>{f(r,`.${i.slideClass}, swiper-slide`).forEach(((t,e)=>{t.setAttribute("data-swiper-slide-index",e)}))},s=e.grid&&i.grid&&i.grid.rows>1,o=i.slidesPerGroup*(s?i.grid.rows:1),a=e.slides.length%o!=0,l=s&&e.slides.length%i.grid.rows!=0,c=t=>{for(let r=0;r<t;r+=1){const t=e.isElement?v("swiper-slide",[i.slideBlankClass]):v("div",[i.slideClass,i.slideBlankClass]);e.slidesEl.append(t)}};if(a){if(i.loopAddBlankSlides){c(o-e.slides.length%o),e.recalcSlides(),e.updateSlides()}else m("Swiper Loop Warning: The number of slides is not even to slidesPerGroup, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)");n()}else if(l){if(i.loopAddBlankSlides){c(i.grid.rows-e.slides.length%i.grid.rows),e.recalcSlides(),e.updateSlides()}else m("Swiper Loop Warning: The number of slides is not even to grid.rows, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)");n()}else n();e.loopFix({slideRealIndex:t,direction:i.centeredSlides?void 0:"next"})},loopFix:function(t){let{slideRealIndex:e,slideTo:i=!0,direction:r,setTranslate:n,activeSlideIndex:s,byController:o,byMousewheel:a}=void 0===t?{}:t;const l=this;if(!l.params.loop)return;l.emit("beforeLoopFix");const{slides:c,allowSlidePrev:d,allowSlideNext:u,slidesEl:h,params:p}=l,{centeredSlides:f}=p;if(l.allowSlidePrev=!0,l.allowSlideNext=!0,l.virtual&&p.virtual.enabled)return i&&(p.centeredSlides||0!==l.snapIndex?p.centeredSlides&&l.snapIndex<p.slidesPerView?l.slideTo(l.virtual.slides.length+l.snapIndex,0,!1,!0):l.snapIndex===l.snapGrid.length-1&&l.slideTo(l.virtual.slidesBefore,0,!1,!0):l.slideTo(l.virtual.slides.length,0,!1,!0)),l.allowSlidePrev=d,l.allowSlideNext=u,void l.emit("loopFix");let v=p.slidesPerView;"auto"===v?v=l.slidesPerViewDynamic():(v=Math.ceil(parseFloat(p.slidesPerView,10)),f&&v%2==0&&(v+=1));const g=p.slidesPerGroupAuto?v:p.slidesPerGroup;let y=g;y%g!=0&&(y+=g-y%g),y+=p.loopAdditionalSlides,l.loopedSlides=y;const w=l.grid&&p.grid&&p.grid.rows>1;c.length<v+y?m("Swiper Loop Warning: The number of slides is not enough for loop mode, it will be disabled and not function properly. You need to add more slides (or make duplicates) or lower the values of slidesPerView and slidesPerGroup parameters"):w&&"row"===p.grid.fill&&m("Swiper Loop Warning: Loop mode is not compatible with grid.fill = `row`");const _=[],b=[];let x=l.activeIndex;void 0===s?s=l.getSlideIndex(c.filter((t=>t.classList.contains(p.slideActiveClass)))[0]):x=s;const T="next"===r||!r,S="prev"===r||!r;let E=0,k=0;const M=w?Math.ceil(c.length/p.grid.rows):c.length,C=(w?c[s].column:s)+(f&&void 0===n?-v/2+.5:0);if(C<y){E=Math.max(y-C,g);for(let t=0;t<y-C;t+=1){const e=t-Math.floor(t/M)*M;if(w){const t=M-e-1;for(let e=c.length-1;e>=0;e-=1)c[e].column===t&&_.push(e)}else _.push(M-e-1)}}else if(C+v>M-y){k=Math.max(C-(M-2*y),g);for(let t=0;t<k;t+=1){const e=t-Math.floor(t/M)*M;w?c.forEach(((t,i)=>{t.column===e&&b.push(i)})):b.push(e)}}if(l.__preventObserver__=!0,requestAnimationFrame((()=>{l.__preventObserver__=!1})),S&&_.forEach((t=>{c[t].swiperLoopMoveDOM=!0,h.prepend(c[t]),c[t].swiperLoopMoveDOM=!1})),T&&b.forEach((t=>{c[t].swiperLoopMoveDOM=!0,h.append(c[t]),c[t].swiperLoopMoveDOM=!1})),l.recalcSlides(),"auto"===p.slidesPerView?l.updateSlides():w&&(_.length>0&&S||b.length>0&&T)&&l.slides.forEach(((t,e)=>{l.grid.updateSlide(e,t,l.slides)})),p.watchSlidesProgress&&l.updateSlidesOffset(),i)if(_.length>0&&S){if(void 0===e){const t=l.slidesGrid[x],e=l.slidesGrid[x+E]-t;a?l.setTranslate(l.translate-e):(l.slideTo(x+Math.ceil(E),0,!1,!0),n&&(l.touchEventsData.startTranslate=l.touchEventsData.startTranslate-e,l.touchEventsData.currentTranslate=l.touchEventsData.currentTranslate-e))}else if(n){const t=w?_.length/p.grid.rows:_.length;l.slideTo(l.activeIndex+t,0,!1,!0),l.touchEventsData.currentTranslate=l.translate}}else if(b.length>0&&T)if(void 0===e){const t=l.slidesGrid[x],e=l.slidesGrid[x-k]-t;a?l.setTranslate(l.translate-e):(l.slideTo(x-k,0,!1,!0),n&&(l.touchEventsData.startTranslate=l.touchEventsData.startTranslate-e,l.touchEventsData.currentTranslate=l.touchEventsData.currentTranslate-e))}else{const t=w?b.length/p.grid.rows:b.length;l.slideTo(l.activeIndex-t,0,!1,!0)}if(l.allowSlidePrev=d,l.allowSlideNext=u,l.controller&&l.controller.control&&!o){const t={slideRealIndex:e,direction:r,setTranslate:n,activeSlideIndex:s,byController:!0};Array.isArray(l.controller.control)?l.controller.control.forEach((e=>{!e.destroyed&&e.params.loop&&e.loopFix({...t,slideTo:e.params.slidesPerView===p.slidesPerView&&i})})):l.controller.control instanceof l.constructor&&l.controller.control.params.loop&&l.controller.control.loopFix({...t,slideTo:l.controller.control.params.slidesPerView===p.slidesPerView&&i})}l.emit("loopFix")},loopDestroy:function(){const t=this,{params:e,slidesEl:i}=t;if(!e.loop||t.virtual&&t.params.virtual.enabled)return;t.recalcSlides();const r=[];t.slides.forEach((t=>{const e=void 0===t.swiperSlideIndex?1*t.getAttribute("data-swiper-slide-index"):t.swiperSlideIndex;r[e]=t})),t.slides.forEach((t=>{t.removeAttribute("data-swiper-slide-index")})),r.forEach((t=>{i.append(t)})),t.recalcSlides(),t.slideTo(t.realIndex,0)}};function F(t,e,i){const r=o(),{params:n}=t,s=n.edgeSwipeDetection,a=n.edgeSwipeThreshold;return!s||!(i<=a||i>=r.innerWidth-a)||"prevent"===s&&(e.preventDefault(),!0)}function Y(t){const e=this,i=n();let r=t;r.originalEvent&&(r=r.originalEvent);const s=e.touchEventsData;if("pointerdown"===r.type){if(null!==s.pointerId&&s.pointerId!==r.pointerId)return;s.pointerId=r.pointerId}else"touchstart"===r.type&&1===r.targetTouches.length&&(s.touchId=r.targetTouches[0].identifier);if("touchstart"===r.type)return void F(e,r,r.targetTouches[0].pageX);const{params:a,touches:c,enabled:d}=e;if(!d)return;if(!a.simulateTouch&&"mouse"===r.pointerType)return;if(e.animating&&a.preventInteractionOnTransition)return;!e.animating&&a.cssMode&&a.loop&&e.loopFix();let u=r.target;if("wrapper"===a.touchEventsTarget&&!e.wrapperEl.contains(u))return;if("which"in r&&3===r.which)return;if("button"in r&&r.button>0)return;if(s.isTouched&&s.isMoved)return;const h=!!a.noSwipingClass&&""!==a.noSwipingClass,p=r.composedPath?r.composedPath():r.path;h&&r.target&&r.target.shadowRoot&&p&&(u=p[0]);const f=a.noSwipingSelector?a.noSwipingSelector:`.${a.noSwipingClass}`,m=!(!r.target||!r.target.shadowRoot);if(a.noSwiping&&(m?function(t,e){return void 0===e&&(e=this),function e(i){if(!i||i===n()||i===o())return null;i.assignedSlot&&(i=i.assignedSlot);const r=i.closest(t);return r||i.getRootNode?r||e(i.getRootNode().host):null}(e)}(f,u):u.closest(f)))return void(e.allowClick=!0);if(a.swipeHandler&&!u.closest(a.swipeHandler))return;c.currentX=r.pageX,c.currentY=r.pageY;const v=c.currentX,g=c.currentY;if(!F(e,r,v))return;Object.assign(s,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),c.startX=v,c.startY=g,s.touchStartTime=l(),e.allowClick=!0,e.updateSize(),e.swipeDirection=void 0,a.threshold>0&&(s.allowThresholdMove=!1);let y=!0;u.matches(s.focusableElements)&&(y=!1,"SELECT"===u.nodeName&&(s.isTouched=!1)),i.activeElement&&i.activeElement.matches(s.focusableElements)&&i.activeElement!==u&&i.activeElement.blur();const w=y&&e.allowTouchMove&&a.touchStartPreventDefault;!a.touchStartForcePreventDefault&&!w||u.isContentEditable||r.preventDefault(),a.freeMode&&a.freeMode.enabled&&e.freeMode&&e.animating&&!a.cssMode&&e.freeMode.onTouchStart(),e.emit("touchStart",r)}function j(t){const e=n(),i=this,r=i.touchEventsData,{params:s,touches:o,rtlTranslate:a,enabled:c}=i;if(!c)return;if(!s.simulateTouch&&"mouse"===t.pointerType)return;let d,u=t;if(u.originalEvent&&(u=u.originalEvent),"pointermove"===u.type){if(null!==r.touchId)return;if(u.pointerId!==r.pointerId)return}if("touchmove"===u.type){if(d=[...u.changedTouches].filter((t=>t.identifier===r.touchId))[0],!d||d.identifier!==r.touchId)return}else d=u;if(!r.isTouched)return void(r.startMoving&&r.isScrolling&&i.emit("touchMoveOpposite",u));const h=d.pageX,p=d.pageY;if(u.preventedByNestedSwiper)return o.startX=h,void(o.startY=p);if(!i.allowTouchMove)return u.target.matches(r.focusableElements)||(i.allowClick=!1),void(r.isTouched&&(Object.assign(o,{startX:h,startY:p,currentX:h,currentY:p}),r.touchStartTime=l()));if(s.touchReleaseOnEdges&&!s.loop)if(i.isVertical()){if(p<o.startY&&i.translate<=i.maxTranslate()||p>o.startY&&i.translate>=i.minTranslate())return r.isTouched=!1,void(r.isMoved=!1)}else if(h<o.startX&&i.translate<=i.maxTranslate()||h>o.startX&&i.translate>=i.minTranslate())return;if(e.activeElement&&u.target===e.activeElement&&u.target.matches(r.focusableElements))return r.isMoved=!0,void(i.allowClick=!1);r.allowTouchCallbacks&&i.emit("touchMove",u),o.previousX=o.currentX,o.previousY=o.currentY,o.currentX=h,o.currentY=p;const f=o.currentX-o.startX,m=o.currentY-o.startY;if(i.params.threshold&&Math.sqrt(f**2+m**2)<i.params.threshold)return;if(void 0===r.isScrolling){let t;i.isHorizontal()&&o.currentY===o.startY||i.isVertical()&&o.currentX===o.startX?r.isScrolling=!1:f*f+m*m>=25&&(t=180*Math.atan2(Math.abs(m),Math.abs(f))/Math.PI,r.isScrolling=i.isHorizontal()?t>s.touchAngle:90-t>s.touchAngle)}if(r.isScrolling&&i.emit("touchMoveOpposite",u),void 0===r.startMoving&&(o.currentX===o.startX&&o.currentY===o.startY||(r.startMoving=!0)),r.isScrolling||"touchmove"===u.type&&r.preventTouchMoveFromPointerMove)return void(r.isTouched=!1);if(!r.startMoving)return;i.allowClick=!1,!s.cssMode&&u.cancelable&&u.preventDefault(),s.touchMoveStopPropagation&&!s.nested&&u.stopPropagation();let v=i.isHorizontal()?f:m,g=i.isHorizontal()?o.currentX-o.previousX:o.currentY-o.previousY;s.oneWayMovement&&(v=Math.abs(v)*(a?1:-1),g=Math.abs(g)*(a?1:-1)),o.diff=v,v*=s.touchRatio,a&&(v=-v,g=-g);const y=i.touchesDirection;i.swipeDirection=v>0?"prev":"next",i.touchesDirection=g>0?"prev":"next";const w=i.params.loop&&!s.cssMode,_="next"===i.touchesDirection&&i.allowSlideNext||"prev"===i.touchesDirection&&i.allowSlidePrev;if(!r.isMoved){if(w&&_&&i.loopFix({direction:i.swipeDirection}),r.startTranslate=i.getTranslate(),i.setTransition(0),i.animating){const t=new window.CustomEvent("transitionend",{bubbles:!0,cancelable:!0,detail:{bySwiperTouchMove:!0}});i.wrapperEl.dispatchEvent(t)}r.allowMomentumBounce=!1,!s.grabCursor||!0!==i.allowSlideNext&&!0!==i.allowSlidePrev||i.setGrabCursor(!0),i.emit("sliderFirstMove",u)}if((new Date).getTime(),r.isMoved&&r.allowThresholdMove&&y!==i.touchesDirection&&w&&_&&Math.abs(v)>=1)return Object.assign(o,{startX:h,startY:p,currentX:h,currentY:p,startTranslate:r.currentTranslate}),r.loopSwapReset=!0,void(r.startTranslate=r.currentTranslate);i.emit("sliderMove",u),r.isMoved=!0,r.currentTranslate=v+r.startTranslate;let b=!0,x=s.resistanceRatio;if(s.touchReleaseOnEdges&&(x=0),v>0?(w&&_&&r.allowThresholdMove&&r.currentTranslate>(s.centeredSlides?i.minTranslate()-i.slidesSizesGrid[i.activeIndex+1]:i.minTranslate())&&i.loopFix({direction:"prev",setTranslate:!0,activeSlideIndex:0}),r.currentTranslate>i.minTranslate()&&(b=!1,s.resistance&&(r.currentTranslate=i.minTranslate()-1+(-i.minTranslate()+r.startTranslate+v)**x))):v<0&&(w&&_&&r.allowThresholdMove&&r.currentTranslate<(s.centeredSlides?i.maxTranslate()+i.slidesSizesGrid[i.slidesSizesGrid.length-1]:i.maxTranslate())&&i.loopFix({direction:"next",setTranslate:!0,activeSlideIndex:i.slides.length-("auto"===s.slidesPerView?i.slidesPerViewDynamic():Math.ceil(parseFloat(s.slidesPerView,10)))}),r.currentTranslate<i.maxTranslate()&&(b=!1,s.resistance&&(r.currentTranslate=i.maxTranslate()+1-(i.maxTranslate()-r.startTranslate-v)**x))),b&&(u.preventedByNestedSwiper=!0),!i.allowSlideNext&&"next"===i.swipeDirection&&r.currentTranslate<r.startTranslate&&(r.currentTranslate=r.startTranslate),!i.allowSlidePrev&&"prev"===i.swipeDirection&&r.currentTranslate>r.startTranslate&&(r.currentTranslate=r.startTranslate),i.allowSlidePrev||i.allowSlideNext||(r.currentTranslate=r.startTranslate),s.threshold>0){if(!(Math.abs(v)>s.threshold||r.allowThresholdMove))return void(r.currentTranslate=r.startTranslate);if(!r.allowThresholdMove)return r.allowThresholdMove=!0,o.startX=o.currentX,o.startY=o.currentY,r.currentTranslate=r.startTranslate,void(o.diff=i.isHorizontal()?o.currentX-o.startX:o.currentY-o.startY)}s.followFinger&&!s.cssMode&&((s.freeMode&&s.freeMode.enabled&&i.freeMode||s.watchSlidesProgress)&&(i.updateActiveIndex(),i.updateSlidesClasses()),s.freeMode&&s.freeMode.enabled&&i.freeMode&&i.freeMode.onTouchMove(),i.updateProgress(r.currentTranslate),i.setTranslate(r.currentTranslate))}function H(t){const e=this,i=e.touchEventsData;let r,n=t;n.originalEvent&&(n=n.originalEvent);if("touchend"===n.type||"touchcancel"===n.type){if(r=[...n.changedTouches].filter((t=>t.identifier===i.touchId))[0],!r||r.identifier!==i.touchId)return}else{if(null!==i.touchId)return;if(n.pointerId!==i.pointerId)return;r=n}if(["pointercancel","pointerout","pointerleave","contextmenu"].includes(n.type)){if(!(["pointercancel","contextmenu"].includes(n.type)&&(e.browser.isSafari||e.browser.isWebView)))return}i.pointerId=null,i.touchId=null;const{params:s,touches:o,rtlTranslate:c,slidesGrid:d,enabled:u}=e;if(!u)return;if(!s.simulateTouch&&"mouse"===n.pointerType)return;if(i.allowTouchCallbacks&&e.emit("touchEnd",n),i.allowTouchCallbacks=!1,!i.isTouched)return i.isMoved&&s.grabCursor&&e.setGrabCursor(!1),i.isMoved=!1,void(i.startMoving=!1);s.grabCursor&&i.isMoved&&i.isTouched&&(!0===e.allowSlideNext||!0===e.allowSlidePrev)&&e.setGrabCursor(!1);const h=l(),p=h-i.touchStartTime;if(e.allowClick){const t=n.path||n.composedPath&&n.composedPath();e.updateClickedSlide(t&&t[0]||n.target,t),e.emit("tap click",n),p<300&&h-i.lastClickTime<300&&e.emit("doubleTap doubleClick",n)}if(i.lastClickTime=l(),a((()=>{e.destroyed||(e.allowClick=!0)})),!i.isTouched||!i.isMoved||!e.swipeDirection||0===o.diff&&!i.loopSwapReset||i.currentTranslate===i.startTranslate&&!i.loopSwapReset)return i.isTouched=!1,i.isMoved=!1,void(i.startMoving=!1);let f;if(i.isTouched=!1,i.isMoved=!1,i.startMoving=!1,f=s.followFinger?c?e.translate:-e.translate:-i.currentTranslate,s.cssMode)return;if(s.freeMode&&s.freeMode.enabled)return void e.freeMode.onTouchEnd({currentPos:f});const m=f>=-e.maxTranslate()&&!e.params.loop;let v=0,g=e.slidesSizesGrid[0];for(let t=0;t<d.length;t+=t<s.slidesPerGroupSkip?1:s.slidesPerGroup){const e=t<s.slidesPerGroupSkip-1?1:s.slidesPerGroup;void 0!==d[t+e]?(m||f>=d[t]&&f<d[t+e])&&(v=t,g=d[t+e]-d[t]):(m||f>=d[t])&&(v=t,g=d[d.length-1]-d[d.length-2])}let y=null,w=null;s.rewind&&(e.isBeginning?w=s.virtual&&s.virtual.enabled&&e.virtual?e.virtual.slides.length-1:e.slides.length-1:e.isEnd&&(y=0));const _=(f-d[v])/g,b=v<s.slidesPerGroupSkip-1?1:s.slidesPerGroup;if(p>s.longSwipesMs){if(!s.longSwipes)return void e.slideTo(e.activeIndex);"next"===e.swipeDirection&&(_>=s.longSwipesRatio?e.slideTo(s.rewind&&e.isEnd?y:v+b):e.slideTo(v)),"prev"===e.swipeDirection&&(_>1-s.longSwipesRatio?e.slideTo(v+b):null!==w&&_<0&&Math.abs(_)>s.longSwipesRatio?e.slideTo(w):e.slideTo(v))}else{if(!s.shortSwipes)return void e.slideTo(e.activeIndex);e.navigation&&(n.target===e.navigation.nextEl||n.target===e.navigation.prevEl)?n.target===e.navigation.nextEl?e.slideTo(v+b):e.slideTo(v):("next"===e.swipeDirection&&e.slideTo(null!==y?y:v+b),"prev"===e.swipeDirection&&e.slideTo(null!==w?w:v))}}function W(){const t=this,{params:e,el:i}=t;if(i&&0===i.offsetWidth)return;e.breakpoints&&t.setBreakpoint();const{allowSlideNext:r,allowSlidePrev:n,snapGrid:s}=t,o=t.virtual&&t.params.virtual.enabled;t.allowSlideNext=!0,t.allowSlidePrev=!0,t.updateSize(),t.updateSlides(),t.updateSlidesClasses();const a=o&&e.loop;!("auto"===e.slidesPerView||e.slidesPerView>1)||!t.isEnd||t.isBeginning||t.params.centeredSlides||a?t.params.loop&&!o?t.slideToLoop(t.realIndex,0,!1,!0):t.slideTo(t.activeIndex,0,!1,!0):t.slideTo(t.slides.length-1,0,!1,!0),t.autoplay&&t.autoplay.running&&t.autoplay.paused&&(clearTimeout(t.autoplay.resizeTimeout),t.autoplay.resizeTimeout=setTimeout((()=>{t.autoplay&&t.autoplay.running&&t.autoplay.paused&&t.autoplay.resume()}),500)),t.allowSlidePrev=n,t.allowSlideNext=r,t.params.watchOverflow&&s!==t.snapGrid&&t.checkOverflow()}function V(t){const e=this;e.enabled&&(e.allowClick||(e.params.preventClicks&&t.preventDefault(),e.params.preventClicksPropagation&&e.animating&&(t.stopPropagation(),t.stopImmediatePropagation())))}function N(){const t=this,{wrapperEl:e,rtlTranslate:i,enabled:r}=t;if(!r)return;let n;t.previousTranslate=t.translate,t.isHorizontal()?t.translate=-e.scrollLeft:t.translate=-e.scrollTop,0===t.translate&&(t.translate=0),t.updateActiveIndex(),t.updateSlidesClasses();const s=t.maxTranslate()-t.minTranslate();n=0===s?0:(t.translate-t.minTranslate())/s,n!==t.progress&&t.updateProgress(i?-t.translate:t.translate),t.emit("setTranslate",t.translate,!1)}function X(t){const e=this;A(e,t.target),e.params.cssMode||"auto"!==e.params.slidesPerView&&!e.params.autoHeight||e.update()}function G(){const t=this;t.documentTouchHandlerProceeded||(t.documentTouchHandlerProceeded=!0,t.params.touchReleaseOnEdges&&(t.el.style.touchAction="auto"))}const q=(t,e)=>{const i=n(),{params:r,el:s,wrapperEl:o,device:a}=t,l=!!r.nested,c="on"===e?"addEventListener":"removeEventListener",d=e;s&&"string"!=typeof s&&(i[c]("touchstart",t.onDocumentTouchStart,{passive:!1,capture:l}),s[c]("touchstart",t.onTouchStart,{passive:!1}),s[c]("pointerdown",t.onTouchStart,{passive:!1}),i[c]("touchmove",t.onTouchMove,{passive:!1,capture:l}),i[c]("pointermove",t.onTouchMove,{passive:!1,capture:l}),i[c]("touchend",t.onTouchEnd,{passive:!0}),i[c]("pointerup",t.onTouchEnd,{passive:!0}),i[c]("pointercancel",t.onTouchEnd,{passive:!0}),i[c]("touchcancel",t.onTouchEnd,{passive:!0}),i[c]("pointerout",t.onTouchEnd,{passive:!0}),i[c]("pointerleave",t.onTouchEnd,{passive:!0}),i[c]("contextmenu",t.onTouchEnd,{passive:!0}),(r.preventClicks||r.preventClicksPropagation)&&s[c]("click",t.onClick,!0),r.cssMode&&o[c]("scroll",t.onScroll),r.updateOnWindowResize?t[d](a.ios||a.android?"resize orientationchange observerUpdate":"resize observerUpdate",W,!0):t[d]("observerUpdate",W,!0),s[c]("load",t.onLoad,{capture:!0}))};const $=(t,e)=>t.grid&&e.grid&&e.grid.rows>1;var U={init:!0,direction:"horizontal",oneWayMovement:!1,swiperElementNodeName:"SWIPER-CONTAINER",touchEventsTarget:"wrapper",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,resizeObserver:!0,nested:!1,createElements:!1,eventsPrefix:"swiper",enabled:!0,focusableElements:"input, select, option, textarea, button, video, label",width:null,height:null,preventInteractionOnTransition:!1,userAgent:null,url:null,edgeSwipeDetection:!1,edgeSwipeThreshold:20,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,breakpointsBase:"window",spaceBetween:0,slidesPerView:1,slidesPerGroup:1,slidesPerGroupSkip:0,slidesPerGroupAuto:!1,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!0,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:5,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,loop:!1,loopAddBlankSlides:!0,loopAdditionalSlides:0,loopPreventsSliding:!0,rewind:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,maxBackfaceHiddenSlides:10,containerModifierClass:"swiper-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-blank",slideActiveClass:"swiper-slide-active",slideVisibleClass:"swiper-slide-visible",slideFullyVisibleClass:"swiper-slide-fully-visible",slideNextClass:"swiper-slide-next",slidePrevClass:"swiper-slide-prev",wrapperClass:"swiper-wrapper",lazyPreloaderClass:"swiper-lazy-preloader",lazyPreloadPrevNext:0,runCallbacksOnInit:!0,_emitClasses:!1};function K(t,e){return function(i){void 0===i&&(i={});const r=Object.keys(i)[0],n=i[r];"object"==typeof n&&null!==n?(!0===t[r]&&(t[r]={enabled:!0}),"navigation"===r&&t[r]&&t[r].enabled&&!t[r].prevEl&&!t[r].nextEl&&(t[r].auto=!0),["pagination","scrollbar"].indexOf(r)>=0&&t[r]&&t[r].enabled&&!t[r].el&&(t[r].auto=!0),r in t&&"enabled"in n?("object"!=typeof t[r]||"enabled"in t[r]||(t[r].enabled=!0),t[r]||(t[r]={enabled:!1}),u(e,i)):u(e,i)):u(e,i)}}const Q={eventsEmitter:M,update:D,translate:I,transition:{setTransition:function(t,e){const i=this;i.params.cssMode||(i.wrapperEl.style.transitionDuration=`${t}ms`,i.wrapperEl.style.transitionDelay=0===t?"0ms":""),i.emit("setTransition",t,e)},transitionStart:function(t,e){void 0===t&&(t=!0);const i=this,{params:r}=i;r.cssMode||(r.autoHeight&&i.updateAutoHeight(),z({swiper:i,runCallbacks:t,direction:e,step:"Start"}))},transitionEnd:function(t,e){void 0===t&&(t=!0);const i=this,{params:r}=i;i.animating=!1,r.cssMode||(i.setTransition(0),z({swiper:i,runCallbacks:t,direction:e,step:"End"}))}},slide:R,loop:B,grabCursor:{setGrabCursor:function(t){const e=this;if(!e.params.simulateTouch||e.params.watchOverflow&&e.isLocked||e.params.cssMode)return;const i="container"===e.params.touchEventsTarget?e.el:e.wrapperEl;e.isElement&&(e.__preventObserver__=!0),i.style.cursor="move",i.style.cursor=t?"grabbing":"grab",e.isElement&&requestAnimationFrame((()=>{e.__preventObserver__=!1}))},unsetGrabCursor:function(){const t=this;t.params.watchOverflow&&t.isLocked||t.params.cssMode||(t.isElement&&(t.__preventObserver__=!0),t["container"===t.params.touchEventsTarget?"el":"wrapperEl"].style.cursor="",t.isElement&&requestAnimationFrame((()=>{t.__preventObserver__=!1})))}},events:{attachEvents:function(){const t=this,{params:e}=t;t.onTouchStart=Y.bind(t),t.onTouchMove=j.bind(t),t.onTouchEnd=H.bind(t),t.onDocumentTouchStart=G.bind(t),e.cssMode&&(t.onScroll=N.bind(t)),t.onClick=V.bind(t),t.onLoad=X.bind(t),q(t,"on")},detachEvents:function(){q(this,"off")}},breakpoints:{setBreakpoint:function(){const t=this,{realIndex:e,initialized:i,params:r,el:n}=t,s=r.breakpoints;if(!s||s&&0===Object.keys(s).length)return;const o=t.getBreakpoint(s,t.params.breakpointsBase,t.el);if(!o||t.currentBreakpoint===o)return;const a=(o in s?s[o]:void 0)||t.originalParams,l=$(t,r),c=$(t,a),d=t.params.grabCursor,h=a.grabCursor,p=r.enabled;l&&!c?(n.classList.remove(`${r.containerModifierClass}grid`,`${r.containerModifierClass}grid-column`),t.emitContainerClasses()):!l&&c&&(n.classList.add(`${r.containerModifierClass}grid`),(a.grid.fill&&"column"===a.grid.fill||!a.grid.fill&&"column"===r.grid.fill)&&n.classList.add(`${r.containerModifierClass}grid-column`),t.emitContainerClasses()),d&&!h?t.unsetGrabCursor():!d&&h&&t.setGrabCursor(),["navigation","pagination","scrollbar"].forEach((e=>{if(void 0===a[e])return;const i=r[e]&&r[e].enabled,n=a[e]&&a[e].enabled;i&&!n&&t[e].disable(),!i&&n&&t[e].enable()}));const f=a.direction&&a.direction!==r.direction,m=r.loop&&(a.slidesPerView!==r.slidesPerView||f),v=r.loop;f&&i&&t.changeDirection(),u(t.params,a);const g=t.params.enabled,y=t.params.loop;Object.assign(t,{allowTouchMove:t.params.allowTouchMove,allowSlideNext:t.params.allowSlideNext,allowSlidePrev:t.params.allowSlidePrev}),p&&!g?t.disable():!p&&g&&t.enable(),t.currentBreakpoint=o,t.emit("_beforeBreakpoint",a),i&&(m?(t.loopDestroy(),t.loopCreate(e),t.updateSlides()):!v&&y?(t.loopCreate(e),t.updateSlides()):v&&!y&&t.loopDestroy()),t.emit("breakpoint",a)},getBreakpoint:function(t,e,i){if(void 0===e&&(e="window"),!t||"container"===e&&!i)return;let r=!1;const n=o(),s="window"===e?n.innerHeight:i.clientHeight,a=Object.keys(t).map((t=>{if("string"==typeof t&&0===t.indexOf("@")){const e=parseFloat(t.substr(1));return{value:s*e,point:t}}return{value:t,point:t}}));a.sort(((t,e)=>parseInt(t.value,10)-parseInt(e.value,10)));for(let t=0;t<a.length;t+=1){const{point:s,value:o}=a[t];"window"===e?n.matchMedia(`(min-width: ${o}px)`).matches&&(r=s):o<=i.clientWidth&&(r=s)}return r||"max"}},checkOverflow:{checkOverflow:function(){const t=this,{isLocked:e,params:i}=t,{slidesOffsetBefore:r}=i;if(r){const e=t.slides.length-1,i=t.slidesGrid[e]+t.slidesSizesGrid[e]+2*r;t.isLocked=t.size>i}else t.isLocked=1===t.snapGrid.length;!0===i.allowSlideNext&&(t.allowSlideNext=!t.isLocked),!0===i.allowSlidePrev&&(t.allowSlidePrev=!t.isLocked),e&&e!==t.isLocked&&(t.isEnd=!1),e!==t.isLocked&&t.emit(t.isLocked?"lock":"unlock")}},classes:{addClasses:function(){const t=this,{classNames:e,params:i,rtl:r,el:n,device:s}=t,o=function(t,e){const i=[];return t.forEach((t=>{"object"==typeof t?Object.keys(t).forEach((r=>{t[r]&&i.push(e+r)})):"string"==typeof t&&i.push(e+t)})),i}(["initialized",i.direction,{"free-mode":t.params.freeMode&&i.freeMode.enabled},{autoheight:i.autoHeight},{rtl:r},{grid:i.grid&&i.grid.rows>1},{"grid-column":i.grid&&i.grid.rows>1&&"column"===i.grid.fill},{android:s.android},{ios:s.ios},{"css-mode":i.cssMode},{centered:i.cssMode&&i.centeredSlides},{"watch-progress":i.watchSlidesProgress}],i.containerModifierClass);e.push(...o),n.classList.add(...e),t.emitContainerClasses()},removeClasses:function(){const{el:t,classNames:e}=this;t&&"string"!=typeof t&&(t.classList.remove(...e),this.emitContainerClasses())}}},Z={};class J{constructor(){let t,e;for(var i=arguments.length,r=new Array(i),s=0;s<i;s++)r[s]=arguments[s];1===r.length&&r[0].constructor&&"Object"===Object.prototype.toString.call(r[0]).slice(8,-1)?e=r[0]:[t,e]=r,e||(e={}),e=u({},e),t&&!e.el&&(e.el=t);const o=n();if(e.el&&"string"==typeof e.el&&o.querySelectorAll(e.el).length>1){const t=[];return o.querySelectorAll(e.el).forEach((i=>{const r=u({},e,{el:i});t.push(new J(r))})),t}const a=this;a.__swiper__=!0,a.support=S(),a.device=E({userAgent:e.userAgent}),a.browser=k(),a.eventsListeners={},a.eventsAnyListeners=[],a.modules=[...a.__modules__],e.modules&&Array.isArray(e.modules)&&a.modules.push(...e.modules);const l={};a.modules.forEach((t=>{t({params:e,swiper:a,extendParams:K(e,l),on:a.on.bind(a),once:a.once.bind(a),off:a.off.bind(a),emit:a.emit.bind(a)})}));const c=u({},U,l);return a.params=u({},c,Z,e),a.originalParams=u({},a.params),a.passedParams=u({},e),a.params&&a.params.on&&Object.keys(a.params.on).forEach((t=>{a.on(t,a.params.on[t])})),a.params&&a.params.onAny&&a.onAny(a.params.onAny),Object.assign(a,{enabled:a.params.enabled,el:t,classNames:[],slides:[],slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:()=>"horizontal"===a.params.direction,isVertical:()=>"vertical"===a.params.direction,activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,cssOverflowAdjustment(){return Math.trunc(this.translate/2**23)*2**23},allowSlideNext:a.params.allowSlideNext,allowSlidePrev:a.params.allowSlidePrev,touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,focusableElements:a.params.focusableElements,lastClickTime:0,clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,startMoving:void 0,pointerId:null,touchId:null},allowClick:!0,allowTouchMove:a.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),a.emit("_swiper"),a.params.init&&a.init(),a}getDirectionLabel(t){return this.isHorizontal()?t:{width:"height","margin-top":"margin-left","margin-bottom ":"margin-right","margin-left":"margin-top","margin-right":"margin-bottom","padding-left":"padding-top","padding-right":"padding-bottom",marginRight:"marginBottom"}[t]}getSlideIndex(t){const{slidesEl:e,params:i}=this,r=y(f(e,`.${i.slideClass}, swiper-slide`)[0]);return y(t)-r}getSlideIndexByData(t){return this.getSlideIndex(this.slides.filter((e=>1*e.getAttribute("data-swiper-slide-index")===t))[0])}recalcSlides(){const{slidesEl:t,params:e}=this;this.slides=f(t,`.${e.slideClass}, swiper-slide`)}enable(){const t=this;t.enabled||(t.enabled=!0,t.params.grabCursor&&t.setGrabCursor(),t.emit("enable"))}disable(){const t=this;t.enabled&&(t.enabled=!1,t.params.grabCursor&&t.unsetGrabCursor(),t.emit("disable"))}setProgress(t,e){const i=this;t=Math.min(Math.max(t,0),1);const r=i.minTranslate(),n=(i.maxTranslate()-r)*t+r;i.translateTo(n,void 0===e?0:e),i.updateActiveIndex(),i.updateSlidesClasses()}emitContainerClasses(){const t=this;if(!t.params._emitClasses||!t.el)return;const e=t.el.className.split(" ").filter((e=>0===e.indexOf("swiper")||0===e.indexOf(t.params.containerModifierClass)));t.emit("_containerClasses",e.join(" "))}getSlideClasses(t){const e=this;return e.destroyed?"":t.className.split(" ").filter((t=>0===t.indexOf("swiper-slide")||0===t.indexOf(e.params.slideClass))).join(" ")}emitSlidesClasses(){const t=this;if(!t.params._emitClasses||!t.el)return;const e=[];t.slides.forEach((i=>{const r=t.getSlideClasses(i);e.push({slideEl:i,classNames:r}),t.emit("_slideClass",i,r)})),t.emit("_slideClasses",e)}slidesPerViewDynamic(t,e){void 0===t&&(t="current"),void 0===e&&(e=!1);const{params:i,slides:r,slidesGrid:n,slidesSizesGrid:s,size:o,activeIndex:a}=this;let l=1;if("number"==typeof i.slidesPerView)return i.slidesPerView;if(i.centeredSlides){let t,e=r[a]?Math.ceil(r[a].swiperSlideSize):0;for(let i=a+1;i<r.length;i+=1)r[i]&&!t&&(e+=Math.ceil(r[i].swiperSlideSize),l+=1,e>o&&(t=!0));for(let i=a-1;i>=0;i-=1)r[i]&&!t&&(e+=r[i].swiperSlideSize,l+=1,e>o&&(t=!0))}else if("current"===t)for(let t=a+1;t<r.length;t+=1){(e?n[t]+s[t]-n[a]<o:n[t]-n[a]<o)&&(l+=1)}else for(let t=a-1;t>=0;t-=1){n[a]-n[t]<o&&(l+=1)}return l}update(){const t=this;if(!t||t.destroyed)return;const{snapGrid:e,params:i}=t;function r(){const e=t.rtlTranslate?-1*t.translate:t.translate,i=Math.min(Math.max(e,t.maxTranslate()),t.minTranslate());t.setTranslate(i),t.updateActiveIndex(),t.updateSlidesClasses()}let n;if(i.breakpoints&&t.setBreakpoint(),[...t.el.querySelectorAll('[loading="lazy"]')].forEach((e=>{e.complete&&A(t,e)})),t.updateSize(),t.updateSlides(),t.updateProgress(),t.updateSlidesClasses(),i.freeMode&&i.freeMode.enabled&&!i.cssMode)r(),i.autoHeight&&t.updateAutoHeight();else{if(("auto"===i.slidesPerView||i.slidesPerView>1)&&t.isEnd&&!i.centeredSlides){const e=t.virtual&&i.virtual.enabled?t.virtual.slides:t.slides;n=t.slideTo(e.length-1,0,!1,!0)}else n=t.slideTo(t.activeIndex,0,!1,!0);n||r()}i.watchOverflow&&e!==t.snapGrid&&t.checkOverflow(),t.emit("update")}changeDirection(t,e){void 0===e&&(e=!0);const i=this,r=i.params.direction;return t||(t="horizontal"===r?"vertical":"horizontal"),t===r||"horizontal"!==t&&"vertical"!==t||(i.el.classList.remove(`${i.params.containerModifierClass}${r}`),i.el.classList.add(`${i.params.containerModifierClass}${t}`),i.emitContainerClasses(),i.params.direction=t,i.slides.forEach((e=>{"vertical"===t?e.style.width="":e.style.height=""})),i.emit("changeDirection"),e&&i.update()),i}changeLanguageDirection(t){const e=this;e.rtl&&"rtl"===t||!e.rtl&&"ltr"===t||(e.rtl="rtl"===t,e.rtlTranslate="horizontal"===e.params.direction&&e.rtl,e.rtl?(e.el.classList.add(`${e.params.containerModifierClass}rtl`),e.el.dir="rtl"):(e.el.classList.remove(`${e.params.containerModifierClass}rtl`),e.el.dir="ltr"),e.update())}mount(t){const e=this;if(e.mounted)return!0;let i=t||e.params.el;if("string"==typeof i&&(i=document.querySelector(i)),!i)return!1;i.swiper=e,i.parentNode&&i.parentNode.host&&i.parentNode.host.nodeName===e.params.swiperElementNodeName.toUpperCase()&&(e.isElement=!0);const r=()=>`.${(e.params.wrapperClass||"").trim().split(" ").join(".")}`;let n=(()=>{if(i&&i.shadowRoot&&i.shadowRoot.querySelector){return i.shadowRoot.querySelector(r())}return f(i,r())[0]})();return!n&&e.params.createElements&&(n=v("div",e.params.wrapperClass),i.append(n),f(i,`.${e.params.slideClass}`).forEach((t=>{n.append(t)}))),Object.assign(e,{el:i,wrapperEl:n,slidesEl:e.isElement&&!i.parentNode.host.slideSlots?i.parentNode.host:n,hostEl:e.isElement?i.parentNode.host:i,mounted:!0,rtl:"rtl"===i.dir.toLowerCase()||"rtl"===g(i,"direction"),rtlTranslate:"horizontal"===e.params.direction&&("rtl"===i.dir.toLowerCase()||"rtl"===g(i,"direction")),wrongRTL:"-webkit-box"===g(n,"display")}),!0}init(t){const e=this;if(e.initialized)return e;if(!1===e.mount(t))return e;e.emit("beforeInit"),e.params.breakpoints&&e.setBreakpoint(),e.addClasses(),e.updateSize(),e.updateSlides(),e.params.watchOverflow&&e.checkOverflow(),e.params.grabCursor&&e.enabled&&e.setGrabCursor(),e.params.loop&&e.virtual&&e.params.virtual.enabled?e.slideTo(e.params.initialSlide+e.virtual.slidesBefore,0,e.params.runCallbacksOnInit,!1,!0):e.slideTo(e.params.initialSlide,0,e.params.runCallbacksOnInit,!1,!0),e.params.loop&&e.loopCreate(),e.attachEvents();const i=[...e.el.querySelectorAll('[loading="lazy"]')];return e.isElement&&i.push(...e.hostEl.querySelectorAll('[loading="lazy"]')),i.forEach((t=>{t.complete?A(e,t):t.addEventListener("load",(t=>{A(e,t.target)}))})),L(e),e.initialized=!0,L(e),e.emit("init"),e.emit("afterInit"),e}destroy(t,e){void 0===t&&(t=!0),void 0===e&&(e=!0);const i=this,{params:r,el:n,wrapperEl:s,slides:o}=i;return void 0===i.params||i.destroyed||(i.emit("beforeDestroy"),i.initialized=!1,i.detachEvents(),r.loop&&i.loopDestroy(),e&&(i.removeClasses(),n&&"string"!=typeof n&&n.removeAttribute("style"),s&&s.removeAttribute("style"),o&&o.length&&o.forEach((t=>{t.classList.remove(r.slideVisibleClass,r.slideFullyVisibleClass,r.slideActiveClass,r.slideNextClass,r.slidePrevClass),t.removeAttribute("style"),t.removeAttribute("data-swiper-slide-index")}))),i.emit("destroy"),Object.keys(i.eventsListeners).forEach((t=>{i.off(t)})),!1!==t&&(i.el&&"string"!=typeof i.el&&(i.el.swiper=null),function(t){const e=t;Object.keys(e).forEach((t=>{try{e[t]=null}catch(t){}try{delete e[t]}catch(t){}}))}(i)),i.destroyed=!0),null}static extendDefaults(t){u(Z,t)}static get extendedDefaults(){return Z}static get defaults(){return U}static installModule(t){J.prototype.__modules__||(J.prototype.__modules__=[]);const e=J.prototype.__modules__;"function"==typeof t&&e.indexOf(t)<0&&e.push(t)}static use(t){return Array.isArray(t)?(t.forEach((t=>J.installModule(t))),J):(J.installModule(t),J)}}function tt(t){let{swiper:e,extendParams:i,on:r,emit:n}=t;function s(t){let i;return t&&"string"==typeof t&&e.isElement&&(i=e.el.querySelector(t),i)?i:(t&&("string"==typeof t&&(i=[...document.querySelectorAll(t)]),e.params.uniqueNavElements&&"string"==typeof t&&i&&i.length>1&&1===e.el.querySelectorAll(t).length?i=e.el.querySelector(t):i&&1===i.length&&(i=i[0])),t&&!i?t:i)}function o(t,i){const r=e.params.navigation;(t=_(t)).forEach((t=>{t&&(t.classList[i?"add":"remove"](...r.disabledClass.split(" ")),"BUTTON"===t.tagName&&(t.disabled=i),e.params.watchOverflow&&e.enabled&&t.classList[e.isLocked?"add":"remove"](r.lockClass))}))}function a(){const{nextEl:t,prevEl:i}=e.navigation;if(e.params.loop)return o(i,!1),void o(t,!1);o(i,e.isBeginning&&!e.params.rewind),o(t,e.isEnd&&!e.params.rewind)}function l(t){t.preventDefault(),(!e.isBeginning||e.params.loop||e.params.rewind)&&(e.slidePrev(),n("navigationPrev"))}function c(t){t.preventDefault(),(!e.isEnd||e.params.loop||e.params.rewind)&&(e.slideNext(),n("navigationNext"))}function d(){const t=e.params.navigation;if(e.params.navigation=function(t,e,i,r){return t.params.createElements&&Object.keys(r).forEach((n=>{if(!i[n]&&!0===i.auto){let s=f(t.el,`.${r[n]}`)[0];s||(s=v("div",r[n]),s.className=r[n],t.el.append(s)),i[n]=s,e[n]=s}})),i}(e,e.originalParams.navigation,e.params.navigation,{nextEl:"swiper-button-next",prevEl:"swiper-button-prev"}),!t.nextEl&&!t.prevEl)return;let i=s(t.nextEl),r=s(t.prevEl);Object.assign(e.navigation,{nextEl:i,prevEl:r}),i=_(i),r=_(r);const n=(i,r)=>{i&&i.addEventListener("click","next"===r?c:l),!e.enabled&&i&&i.classList.add(...t.lockClass.split(" "))};i.forEach((t=>n(t,"next"))),r.forEach((t=>n(t,"prev")))}function u(){let{nextEl:t,prevEl:i}=e.navigation;t=_(t),i=_(i);const r=(t,i)=>{t.removeEventListener("click","next"===i?c:l),t.classList.remove(...e.params.navigation.disabledClass.split(" "))};t.forEach((t=>r(t,"next"))),i.forEach((t=>r(t,"prev")))}i({navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock",navigationDisabledClass:"swiper-navigation-disabled"}}),e.navigation={nextEl:null,prevEl:null},r("init",(()=>{!1===e.params.navigation.enabled?h():(d(),a())})),r("toEdge fromEdge lock unlock",(()=>{a()})),r("destroy",(()=>{u()})),r("enable disable",(()=>{let{nextEl:t,prevEl:i}=e.navigation;t=_(t),i=_(i),e.enabled?a():[...t,...i].filter((t=>!!t)).forEach((t=>t.classList.add(e.params.navigation.lockClass)))})),r("click",((t,i)=>{let{nextEl:r,prevEl:s}=e.navigation;r=_(r),s=_(s);const o=i.target;let a=s.includes(o)||r.includes(o);if(e.isElement&&!a){const t=i.path||i.composedPath&&i.composedPath();t&&(a=t.find((t=>r.includes(t)||s.includes(t))))}if(e.params.navigation.hideOnClick&&!a){if(e.pagination&&e.params.pagination&&e.params.pagination.clickable&&(e.pagination.el===o||e.pagination.el.contains(o)))return;let t;r.length?t=r[0].classList.contains(e.params.navigation.hiddenClass):s.length&&(t=s[0].classList.contains(e.params.navigation.hiddenClass)),n(!0===t?"navigationShow":"navigationHide"),[...r,...s].filter((t=>!!t)).forEach((t=>t.classList.toggle(e.params.navigation.hiddenClass)))}}));const h=()=>{e.el.classList.add(...e.params.navigation.navigationDisabledClass.split(" ")),u()};Object.assign(e.navigation,{enable:()=>{e.el.classList.remove(...e.params.navigation.navigationDisabledClass.split(" ")),d(),a()},disable:h,update:a,init:d,destroy:u})}function et(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function it(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}Object.keys(Q).forEach((t=>{Object.keys(Q[t]).forEach((e=>{J.prototype[e]=Q[t][e]}))})),J.use([function(t){let{swiper:e,on:i,emit:r}=t;const n=o();let s=null,a=null;const l=()=>{e&&!e.destroyed&&e.initialized&&(r("beforeResize"),r("resize"))},c=()=>{e&&!e.destroyed&&e.initialized&&r("orientationchange")};i("init",(()=>{e.params.resizeObserver&&void 0!==n.ResizeObserver?e&&!e.destroyed&&e.initialized&&(s=new ResizeObserver((t=>{a=n.requestAnimationFrame((()=>{const{width:i,height:r}=e;let n=i,s=r;t.forEach((t=>{let{contentBoxSize:i,contentRect:r,target:o}=t;o&&o!==e.el||(n=r?r.width:(i[0]||i).inlineSize,s=r?r.height:(i[0]||i).blockSize)})),n===i&&s===r||l()}))})),s.observe(e.el)):(n.addEventListener("resize",l),n.addEventListener("orientationchange",c))})),i("destroy",(()=>{a&&n.cancelAnimationFrame(a),s&&s.unobserve&&e.el&&(s.unobserve(e.el),s=null),n.removeEventListener("resize",l),n.removeEventListener("orientationchange",c)}))},function(t){let{swiper:e,extendParams:i,on:r,emit:n}=t;const s=[],a=o(),l=function(t,i){void 0===i&&(i={});const r=new(a.MutationObserver||a.WebkitMutationObserver)((t=>{if(e.__preventObserver__)return;if(1===t.length)return void n("observerUpdate",t[0]);const i=function(){n("observerUpdate",t[0])};a.requestAnimationFrame?a.requestAnimationFrame(i):a.setTimeout(i,0)}));r.observe(t,{attributes:void 0===i.attributes||i.attributes,childList:void 0===i.childList||i.childList,characterData:void 0===i.characterData||i.characterData}),s.push(r)};i({observer:!1,observeParents:!1,observeSlideChildren:!1}),r("init",(()=>{if(e.params.observer){if(e.params.observeParents){const t=function(t,e){const i=[];let r=t.parentElement;for(;r;)e?r.matches(e)&&i.push(r):i.push(r),r=r.parentElement;return i}(e.hostEl);for(let e=0;e<t.length;e+=1)l(t[e])}l(e.hostEl,{childList:e.params.observeSlideChildren}),l(e.wrapperEl,{attributes:!1})}})),r("destroy",(()=>{s.forEach((t=>{t.disconnect()})),s.splice(0,s.length)}))}]);var rt,nt,st,ot,at,lt,ct,dt,ut,ht,pt,ft,mt,vt,gt,yt,wt,_t={autoSleep:120,force3D:"auto",nullTargetWarn:1,units:{lineHeight:""}},bt={duration:.5,overwrite:!1,delay:0},xt=1e8,Tt=1e-8,St=2*Math.PI,Et=St/4,kt=0,Mt=Math.sqrt,Ct=Math.cos,Ot=Math.sin,At=function(t){return"string"==typeof t},Pt=function(t){return"function"==typeof t},Lt=function(t){return"number"==typeof t},Dt=function(t){return void 0===t},It=function(t){return"object"==typeof t},zt=function(t){return!1!==t},Rt=function(){return"undefined"!=typeof window},Bt=function(t){return Pt(t)||At(t)},Ft="function"==typeof ArrayBuffer&&ArrayBuffer.isView||function(){},Yt=Array.isArray,jt=/(?:-?\.?\d|\.)+/gi,Ht=/[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g,Wt=/[-+=.]*\d+[.e-]*\d*[a-z%]*/g,Vt=/[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi,Nt=/[+-]=-?[.\d]+/,Xt=/[^,'"\[\]\s]+/gi,Gt=/^[+\-=e\s\d]*\d+[.\d]*([a-z]*|%)\s*$/i,qt={},$t={},Ut=function(t){return($t=Se(t,qt))&&Er},Kt=function(t,e){return console.warn("Invalid property",t,"set to",e,"Missing plugin? gsap.registerPlugin()")},Qt=function(t,e){return!e&&console.warn(t)},Zt=function(t,e){return t&&(qt[t]=e)&&$t&&($t[t]=e)||qt},Jt=function(){return 0},te={suppressEvents:!0,isStart:!0,kill:!1},ee={suppressEvents:!0,kill:!1},ie={suppressEvents:!0},re={},ne=[],se={},oe={},ae={},le=30,ce=[],de="",ue=function(t){var e,i,r=t[0];if(It(r)||Pt(r)||(t=[t]),!(e=(r._gsap||{}).harness)){for(i=ce.length;i--&&!ce[i].targetTest(r););e=ce[i]}for(i=t.length;i--;)t[i]&&(t[i]._gsap||(t[i]._gsap=new Yi(t[i],e)))||t.splice(i,1);return t},he=function(t){return t._gsap||ue(ii(t))[0]._gsap},pe=function(t,e,i){return(i=t[e])&&Pt(i)?t[e]():Dt(i)&&t.getAttribute&&t.getAttribute(e)||i},fe=function(t,e){return(t=t.split(",")).forEach(e)||t},me=function(t){return Math.round(1e5*t)/1e5||0},ve=function(t){return Math.round(1e7*t)/1e7||0},ge=function(t,e){var i=e.charAt(0),r=parseFloat(e.substr(2));return t=parseFloat(t),"+"===i?t+r:"-"===i?t-r:"*"===i?t*r:t/r},ye=function(t,e){for(var i=e.length,r=0;t.indexOf(e[r])<0&&++r<i;);return r<i},we=function(){var t,e,i=ne.length,r=ne.slice(0);for(se={},ne.length=0,t=0;t<i;t++)(e=r[t])&&e._lazy&&(e.render(e._lazy[0],e._lazy[1],!0)._lazy=0)},_e=function(t,e,i,r){ne.length&&!nt&&we(),t.render(e,i,r||nt&&e<0&&(t._initted||t._startAt)),ne.length&&!nt&&we()},be=function(t){var e=parseFloat(t);return(e||0===e)&&(t+"").match(Xt).length<2?e:At(t)?t.trim():t},xe=function(t){return t},Te=function(t,e){for(var i in e)i in t||(t[i]=e[i]);return t},Se=function(t,e){for(var i in e)t[i]=e[i];return t},Ee=function t(e,i){for(var r in i)"__proto__"!==r&&"constructor"!==r&&"prototype"!==r&&(e[r]=It(i[r])?t(e[r]||(e[r]={}),i[r]):i[r]);return e},ke=function(t,e){var i,r={};for(i in t)i in e||(r[i]=t[i]);return r},Me=function(t){var e,i=t.parent||ot,r=t.keyframes?(e=Yt(t.keyframes),function(t,i){for(var r in i)r in t||"duration"===r&&e||"ease"===r||(t[r]=i[r])}):Te;if(zt(t.inherit))for(;i;)r(t,i.vars.defaults),i=i.parent||i._dp;return t},Ce=function(t,e,i,r,n){void 0===i&&(i="_first"),void 0===r&&(r="_last");var s,o=t[r];if(n)for(s=e[n];o&&o[n]>s;)o=o._prev;return o?(e._next=o._next,o._next=e):(e._next=t[i],t[i]=e),e._next?e._next._prev=e:t[r]=e,e._prev=o,e.parent=e._dp=t,e},Oe=function(t,e,i,r){void 0===i&&(i="_first"),void 0===r&&(r="_last");var n=e._prev,s=e._next;n?n._next=s:t[i]===e&&(t[i]=s),s?s._prev=n:t[r]===e&&(t[r]=n),e._next=e._prev=e.parent=null},Ae=function(t,e){t.parent&&(!e||t.parent.autoRemoveChildren)&&t.parent.remove&&t.parent.remove(t),t._act=0},Pe=function(t,e){if(t&&(!e||e._end>t._dur||e._start<0))for(var i=t;i;)i._dirty=1,i=i.parent;return t},Le=function(t,e,i,r){return t._startAt&&(nt?t._startAt.revert(ee):t.vars.immediateRender&&!t.vars.autoRevert||t._startAt.render(e,!0,r))},De=function t(e){return!e||e._ts&&t(e.parent)},Ie=function(t){return t._repeat?ze(t._tTime,t=t.duration()+t._rDelay)*t:0},ze=function(t,e){var i=Math.floor(t/=e);return t&&i===t?i-1:i},Re=function(t,e){return(t-e._start)*e._ts+(e._ts>=0?0:e._dirty?e.totalDuration():e._tDur)},Be=function(t){return t._end=ve(t._start+(t._tDur/Math.abs(t._ts||t._rts||Tt)||0))},Fe=function(t,e){var i=t._dp;return i&&i.smoothChildTiming&&t._ts&&(t._start=ve(i._time-(t._ts>0?e/t._ts:((t._dirty?t.totalDuration():t._tDur)-e)/-t._ts)),Be(t),i._dirty||Pe(i,t)),t},Ye=function(t,e){var i;if((e._time||!e._dur&&e._initted||e._start<t._time&&(e._dur||!e.add))&&(i=Re(t.rawTime(),e),(!e._dur||Qe(0,e.totalDuration(),i)-e._tTime>Tt)&&e.render(i,!0)),Pe(t,e)._dp&&t._initted&&t._time>=t._dur&&t._ts){if(t._dur<t.duration())for(i=t;i._dp;)i.rawTime()>=0&&i.totalTime(i._tTime),i=i._dp;t._zTime=-1e-8}},je=function(t,e,i,r){return e.parent&&Ae(e),e._start=ve((Lt(i)?i:i||t!==ot?$e(t,i,e):t._time)+e._delay),e._end=ve(e._start+(e.totalDuration()/Math.abs(e.timeScale())||0)),Ce(t,e,"_first","_last",t._sort?"_start":0),Ne(e)||(t._recent=e),r||Ye(t,e),t._ts<0&&Fe(t,t._tTime),t},He=function(t,e){return(qt.ScrollTrigger||Kt("scrollTrigger",e))&&qt.ScrollTrigger.create(e,t)},We=function(t,e,i,r,n){return qi(t,e,n),t._initted?!i&&t._pt&&!nt&&(t._dur&&!1!==t.vars.lazy||!t._dur&&t.vars.lazy)&&ut!==ki.frame?(ne.push(t),t._lazy=[n,r],1):void 0:1},Ve=function t(e){var i=e.parent;return i&&i._ts&&i._initted&&!i._lock&&(i.rawTime()<0||t(i))},Ne=function(t){var e=t.data;return"isFromStart"===e||"isStart"===e},Xe=function(t,e,i,r){var n=t._repeat,s=ve(e)||0,o=t._tTime/t._tDur;return o&&!r&&(t._time*=s/t._dur),t._dur=s,t._tDur=n?n<0?1e10:ve(s*(n+1)+t._rDelay*n):s,o>0&&!r&&Fe(t,t._tTime=t._tDur*o),t.parent&&Be(t),i||Pe(t.parent,t),t},Ge=function(t){return t instanceof Hi?Pe(t):Xe(t,t._dur)},qe={_start:0,endTime:Jt,totalDuration:Jt},$e=function t(e,i,r){var n,s,o,a=e.labels,l=e._recent||qe,c=e.duration()>=xt?l.endTime(!1):e._dur;return At(i)&&(isNaN(i)||i in a)?(s=i.charAt(0),o="%"===i.substr(-1),n=i.indexOf("="),"<"===s||">"===s?(n>=0&&(i=i.replace(/=/,"")),("<"===s?l._start:l.endTime(l._repeat>=0))+(parseFloat(i.substr(1))||0)*(o?(n<0?l:r).totalDuration()/100:1)):n<0?(i in a||(a[i]=c),a[i]):(s=parseFloat(i.charAt(n-1)+i.substr(n+1)),o&&r&&(s=s/100*(Yt(r)?r[0]:r).totalDuration()),n>1?t(e,i.substr(0,n-1),r)+s:c+s)):null==i?c:+i},Ue=function(t,e,i){var r,n,s=Lt(e[1]),o=(s?2:1)+(t<2?0:1),a=e[o];if(s&&(a.duration=e[1]),a.parent=i,t){for(r=a,n=i;n&&!("immediateRender"in r);)r=n.vars.defaults||{},n=zt(n.vars.inherit)&&n.parent;a.immediateRender=zt(r.immediateRender),t<2?a.runBackwards=1:a.startAt=e[o-1]}return new Zi(e[0],a,e[o+1])},Ke=function(t,e){return t||0===t?e(t):e},Qe=function(t,e,i){return i<t?t:i>e?e:i},Ze=function(t,e){return At(t)&&(e=Gt.exec(t))?e[1]:""},Je=[].slice,ti=function(t,e){return t&&It(t)&&"length"in t&&(!e&&!t.length||t.length-1 in t&&It(t[0]))&&!t.nodeType&&t!==at},ei=function(t,e,i){return void 0===i&&(i=[]),t.forEach((function(t){var r;return At(t)&&!e||ti(t,1)?(r=i).push.apply(r,ii(t)):i.push(t)}))||i},ii=function(t,e,i){return st&&!e&&st.selector?st.selector(t):!At(t)||i||!lt&&Mi()?Yt(t)?ei(t,i):ti(t)?Je.call(t,0):t?[t]:[]:Je.call((e||ct).querySelectorAll(t),0)},ri=function(t){return t=ii(t)[0]||Qt("Invalid scope")||{},function(e){var i=t.current||t.nativeElement||t;return ii(e,i.querySelectorAll?i:i===t?Qt("Invalid scope")||ct.createElement("div"):t)}},ni=function(t){return t.sort((function(){return.5-Math.random()}))},si=function(t){if(Pt(t))return t;var e=It(t)?t:{each:t},i=Ii(e.ease),r=e.from||0,n=parseFloat(e.base)||0,s={},o=r>0&&r<1,a=isNaN(r)||o,l=e.axis,c=r,d=r;return At(r)?c=d={center:.5,edges:.5,end:1}[r]||0:!o&&a&&(c=r[0],d=r[1]),function(t,o,u){var h,p,f,m,v,g,y,w,_,b=(u||e).length,x=s[b];if(!x){if(!(_="auto"===e.grid?0:(e.grid||[1,xt])[1])){for(y=-xt;y<(y=u[_++].getBoundingClientRect().left)&&_<b;);_<b&&_--}for(x=s[b]=[],h=a?Math.min(_,b)*c-.5:r%_,p=_===xt?0:a?b*d/_-.5:r/_|0,y=0,w=xt,g=0;g<b;g++)f=g%_-h,m=p-(g/_|0),x[g]=v=l?Math.abs("y"===l?m:f):Mt(f*f+m*m),v>y&&(y=v),v<w&&(w=v);"random"===r&&ni(x),x.max=y-w,x.min=w,x.v=b=(parseFloat(e.amount)||parseFloat(e.each)*(_>b?b-1:l?"y"===l?b/_:_:Math.max(_,b/_))||0)*("edges"===r?-1:1),x.b=b<0?n-b:n,x.u=Ze(e.amount||e.each)||0,i=i&&b<0?Li(i):i}return b=(x[t]-x.min)/x.max||0,ve(x.b+(i?i(b):b)*x.v)+x.u}},oi=function(t){var e=Math.pow(10,((t+"").split(".")[1]||"").length);return function(i){var r=ve(Math.round(parseFloat(i)/t)*t*e);return(r-r%1)/e+(Lt(i)?0:Ze(i))}},ai=function(t,e){var i,r,n=Yt(t);return!n&&It(t)&&(i=n=t.radius||xt,t.values?(t=ii(t.values),(r=!Lt(t[0]))&&(i*=i)):t=oi(t.increment)),Ke(e,n?Pt(t)?function(e){return r=t(e),Math.abs(r-e)<=i?r:e}:function(e){for(var n,s,o=parseFloat(r?e.x:e),a=parseFloat(r?e.y:0),l=xt,c=0,d=t.length;d--;)(n=r?(n=t[d].x-o)*n+(s=t[d].y-a)*s:Math.abs(t[d]-o))<l&&(l=n,c=d);return c=!i||l<=i?t[c]:e,r||c===e||Lt(e)?c:c+Ze(e)}:oi(t))},li=function(t,e,i,r){return Ke(Yt(t)?!e:!0===i?!!(i=0):!r,(function(){return Yt(t)?t[~~(Math.random()*t.length)]:(i=i||1e-5)&&(r=i<1?Math.pow(10,(i+"").length-2):1)&&Math.floor(Math.round((t-i/2+Math.random()*(e-t+.99*i))/i)*i*r)/r}))},ci=function(t,e,i){return Ke(i,(function(i){return t[~~e(i)]}))},di=function(t){for(var e,i,r,n,s=0,o="";~(e=t.indexOf("random(",s));)r=t.indexOf(")",e),n="["===t.charAt(e+7),i=t.substr(e+7,r-e-7).match(n?Xt:jt),o+=t.substr(s,e-s)+li(n?i:+i[0],n?0:+i[1],+i[2]||1e-5),s=r+1;return o+t.substr(s,t.length-s)},ui=function(t,e,i,r,n){var s=e-t,o=r-i;return Ke(n,(function(e){return i+((e-t)/s*o||0)}))},hi=function(t,e,i){var r,n,s,o=t.labels,a=xt;for(r in o)(n=o[r]-e)<0==!!i&&n&&a>(n=Math.abs(n))&&(s=r,a=n);return s},pi=function(t,e,i){var r,n,s,o=t.vars,a=o[e],l=st,c=t._ctx;if(a)return r=o[e+"Params"],n=o.callbackScope||t,i&&ne.length&&we(),c&&(st=c),s=r?a.apply(n,r):a.call(n),st=l,s},fi=function(t){return Ae(t),t.scrollTrigger&&t.scrollTrigger.kill(!!nt),t.progress()<1&&pi(t,"onInterrupt"),t},mi=[],vi=function(t){if(t)if(t=!t.name&&t.default||t,Rt()||t.headless){var e=t.name,i=Pt(t),r=e&&!i&&t.init?function(){this._props=[]}:t,n={init:Jt,render:ar,add:Xi,kill:cr,modifier:lr,rawVars:0},s={targetTest:0,get:0,getSetter:rr,aliases:{},register:0};if(Mi(),t!==r){if(oe[e])return;Te(r,Te(ke(t,n),s)),Se(r.prototype,Se(n,ke(t,s))),oe[r.prop=e]=r,t.targetTest&&(ce.push(r),re[e]=1),e=("css"===e?"CSS":e.charAt(0).toUpperCase()+e.substr(1))+"Plugin"}Zt(e,r),t.register&&t.register(Er,r,hr)}else mi.push(t)},gi=255,yi={aqua:[0,gi,gi],lime:[0,gi,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,gi],navy:[0,0,128],white:[gi,gi,gi],olive:[128,128,0],yellow:[gi,gi,0],orange:[gi,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[gi,0,0],pink:[gi,192,203],cyan:[0,gi,gi],transparent:[gi,gi,gi,0]},wi=function(t,e,i){return(6*(t+=t<0?1:t>1?-1:0)<1?e+(i-e)*t*6:t<.5?i:3*t<2?e+(i-e)*(2/3-t)*6:e)*gi+.5|0},_i=function(t,e,i){var r,n,s,o,a,l,c,d,u,h,p=t?Lt(t)?[t>>16,t>>8&gi,t&gi]:0:yi.black;if(!p){if(","===t.substr(-1)&&(t=t.substr(0,t.length-1)),yi[t])p=yi[t];else if("#"===t.charAt(0)){if(t.length<6&&(r=t.charAt(1),n=t.charAt(2),s=t.charAt(3),t="#"+r+r+n+n+s+s+(5===t.length?t.charAt(4)+t.charAt(4):"")),9===t.length)return[(p=parseInt(t.substr(1,6),16))>>16,p>>8&gi,p&gi,parseInt(t.substr(7),16)/255];p=[(t=parseInt(t.substr(1),16))>>16,t>>8&gi,t&gi]}else if("hsl"===t.substr(0,3))if(p=h=t.match(jt),e){if(~t.indexOf("="))return p=t.match(Ht),i&&p.length<4&&(p[3]=1),p}else o=+p[0]%360/360,a=+p[1]/100,r=2*(l=+p[2]/100)-(n=l<=.5?l*(a+1):l+a-l*a),p.length>3&&(p[3]*=1),p[0]=wi(o+1/3,r,n),p[1]=wi(o,r,n),p[2]=wi(o-1/3,r,n);else p=t.match(jt)||yi.transparent;p=p.map(Number)}return e&&!h&&(r=p[0]/gi,n=p[1]/gi,s=p[2]/gi,l=((c=Math.max(r,n,s))+(d=Math.min(r,n,s)))/2,c===d?o=a=0:(u=c-d,a=l>.5?u/(2-c-d):u/(c+d),o=c===r?(n-s)/u+(n<s?6:0):c===n?(s-r)/u+2:(r-n)/u+4,o*=60),p[0]=~~(o+.5),p[1]=~~(100*a+.5),p[2]=~~(100*l+.5)),i&&p.length<4&&(p[3]=1),p},bi=function(t){var e=[],i=[],r=-1;return t.split(Ti).forEach((function(t){var n=t.match(Wt)||[];e.push.apply(e,n),i.push(r+=n.length+1)})),e.c=i,e},xi=function(t,e,i){var r,n,s,o,a="",l=(t+a).match(Ti),c=e?"hsla(":"rgba(",d=0;if(!l)return t;if(l=l.map((function(t){return(t=_i(t,e,1))&&c+(e?t[0]+","+t[1]+"%,"+t[2]+"%,"+t[3]:t.join(","))+")"})),i&&(s=bi(t),(r=i.c).join(a)!==s.c.join(a)))for(o=(n=t.replace(Ti,"1").split(Wt)).length-1;d<o;d++)a+=n[d]+(~r.indexOf(d)?l.shift()||c+"0,0,0,0)":(s.length?s:l.length?l:i).shift());if(!n)for(o=(n=t.split(Ti)).length-1;d<o;d++)a+=n[d]+l[d];return a+n[o]},Ti=function(){var t,e="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b";for(t in yi)e+="|"+t+"\\b";return new RegExp(e+")","gi")}(),Si=/hsl[a]?\(/,Ei=function(t){var e,i=t.join(" ");if(Ti.lastIndex=0,Ti.test(i))return e=Si.test(i),t[1]=xi(t[1],e),t[0]=xi(t[0],e,bi(t[1])),!0},ki=function(){var t,e,i,r,n,s,o=Date.now,a=500,l=33,c=o(),d=c,u=1e3/240,h=u,p=[],f=function i(f){var m,v,g,y,w=o()-d,_=!0===f;if((w>a||w<0)&&(c+=w-l),((m=(g=(d+=w)-c)-h)>0||_)&&(y=++r.frame,n=g-1e3*r.time,r.time=g/=1e3,h+=m+(m>=u?4:u-m),v=1),_||(t=e(i)),v)for(s=0;s<p.length;s++)p[s](g,n,y,f)};return r={time:0,frame:0,tick:function(){f(!0)},deltaRatio:function(t){return n/(1e3/(t||60))},wake:function(){dt&&(!lt&&Rt()&&(at=lt=window,ct=at.document||{},qt.gsap=Er,(at.gsapVersions||(at.gsapVersions=[])).push(Er.version),Ut($t||at.GreenSockGlobals||!at.gsap&&at||{}),mi.forEach(vi)),i="undefined"!=typeof requestAnimationFrame&&requestAnimationFrame,t&&r.sleep(),e=i||function(t){return setTimeout(t,h-1e3*r.time+1|0)},pt=1,f(2))},sleep:function(){(i?cancelAnimationFrame:clearTimeout)(t),pt=0,e=Jt},lagSmoothing:function(t,e){a=t||1/0,l=Math.min(e||33,a)},fps:function(t){u=1e3/(t||240),h=1e3*r.time+u},add:function(t,e,i){var n=e?function(e,i,s,o){t(e,i,s,o),r.remove(n)}:t;return r.remove(t),p[i?"unshift":"push"](n),Mi(),n},remove:function(t,e){~(e=p.indexOf(t))&&p.splice(e,1)&&s>=e&&s--},_listeners:p}}(),Mi=function(){return!pt&&ki.wake()},Ci={},Oi=/^[\d.\-M][\d.\-,\s]/,Ai=/["']/g,Pi=function(t){for(var e,i,r,n={},s=t.substr(1,t.length-3).split(":"),o=s[0],a=1,l=s.length;a<l;a++)i=s[a],e=a!==l-1?i.lastIndexOf(","):i.length,r=i.substr(0,e),n[o]=isNaN(r)?r.replace(Ai,"").trim():+r,o=i.substr(e+1).trim();return n},Li=function(t){return function(e){return 1-t(1-e)}},Di=function t(e,i){for(var r,n=e._first;n;)n instanceof Hi?t(n,i):!n.vars.yoyoEase||n._yoyo&&n._repeat||n._yoyo===i||(n.timeline?t(n.timeline,i):(r=n._ease,n._ease=n._yEase,n._yEase=r,n._yoyo=i)),n=n._next},Ii=function(t,e){return t&&(Pt(t)?t:Ci[t]||function(t){var e,i,r,n,s=(t+"").split("("),o=Ci[s[0]];return o&&s.length>1&&o.config?o.config.apply(null,~t.indexOf("{")?[Pi(s[1])]:(e=t,i=e.indexOf("(")+1,r=e.indexOf(")"),n=e.indexOf("(",i),e.substring(i,~n&&n<r?e.indexOf(")",r+1):r)).split(",").map(be)):Ci._CE&&Oi.test(t)?Ci._CE("",t):o}(t))||e},zi=function(t,e,i,r){void 0===i&&(i=function(t){return 1-e(1-t)}),void 0===r&&(r=function(t){return t<.5?e(2*t)/2:1-e(2*(1-t))/2});var n,s={easeIn:e,easeOut:i,easeInOut:r};return fe(t,(function(t){for(var e in Ci[t]=qt[t]=s,Ci[n=t.toLowerCase()]=i,s)Ci[n+("easeIn"===e?".in":"easeOut"===e?".out":".inOut")]=Ci[t+"."+e]=s[e]})),s},Ri=function(t){return function(e){return e<.5?(1-t(1-2*e))/2:.5+t(2*(e-.5))/2}},Bi=function t(e,i,r){var n=i>=1?i:1,s=(r||(e?.3:.45))/(i<1?i:1),o=s/St*(Math.asin(1/n)||0),a=function(t){return 1===t?1:n*Math.pow(2,-10*t)*Ot((t-o)*s)+1},l="out"===e?a:"in"===e?function(t){return 1-a(1-t)}:Ri(a);return s=St/s,l.config=function(i,r){return t(e,i,r)},l},Fi=function t(e,i){void 0===i&&(i=1.70158);var r=function(t){return t?--t*t*((i+1)*t+i)+1:0},n="out"===e?r:"in"===e?function(t){return 1-r(1-t)}:Ri(r);return n.config=function(i){return t(e,i)},n};fe("Linear,Quad,Cubic,Quart,Quint,Strong",(function(t,e){var i=e<5?e+1:e;zi(t+",Power"+(i-1),e?function(t){return Math.pow(t,i)}:function(t){return t},(function(t){return 1-Math.pow(1-t,i)}),(function(t){return t<.5?Math.pow(2*t,i)/2:1-Math.pow(2*(1-t),i)/2}))})),Ci.Linear.easeNone=Ci.none=Ci.Linear.easeIn,zi("Elastic",Bi("in"),Bi("out"),Bi()),ft=7.5625,gt=2*(vt=1/(mt=2.75)),yt=2.5*vt,zi("Bounce",(function(t){return 1-wt(1-t)}),wt=function(t){return t<vt?ft*t*t:t<gt?ft*Math.pow(t-1.5/mt,2)+.75:t<yt?ft*(t-=2.25/mt)*t+.9375:ft*Math.pow(t-2.625/mt,2)+.984375}),zi("Expo",(function(t){return t?Math.pow(2,10*(t-1)):0})),zi("Circ",(function(t){return-(Mt(1-t*t)-1)})),zi("Sine",(function(t){return 1===t?1:1-Ct(t*Et)})),zi("Back",Fi("in"),Fi("out"),Fi()),Ci.SteppedEase=Ci.steps=qt.SteppedEase={config:function(t,e){void 0===t&&(t=1);var i=1/t,r=t+(e?0:1),n=e?1:0;return function(t){return((r*Qe(0,.99999999,t)|0)+n)*i}}},bt.ease=Ci["quad.out"],fe("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt",(function(t){return de+=t+","+t+"Params,"}));var Yi=function(t,e){this.id=kt++,t._gsap=this,this.target=t,this.harness=e,this.get=e?e.get:pe,this.set=e?e.getSetter:rr},ji=function(){function t(t){this.vars=t,this._delay=+t.delay||0,(this._repeat=t.repeat===1/0?-2:t.repeat||0)&&(this._rDelay=t.repeatDelay||0,this._yoyo=!!t.yoyo||!!t.yoyoEase),this._ts=1,Xe(this,+t.duration,1,1),this.data=t.data,st&&(this._ctx=st,st.data.push(this)),pt||ki.wake()}var e=t.prototype;return e.delay=function(t){return t||0===t?(this.parent&&this.parent.smoothChildTiming&&this.startTime(this._start+t-this._delay),this._delay=t,this):this._delay},e.duration=function(t){return arguments.length?this.totalDuration(this._repeat>0?t+(t+this._rDelay)*this._repeat:t):this.totalDuration()&&this._dur},e.totalDuration=function(t){return arguments.length?(this._dirty=0,Xe(this,this._repeat<0?t:(t-this._repeat*this._rDelay)/(this._repeat+1))):this._tDur},e.totalTime=function(t,e){if(Mi(),!arguments.length)return this._tTime;var i=this._dp;if(i&&i.smoothChildTiming&&this._ts){for(Fe(this,t),!i._dp||i.parent||Ye(i,this);i&&i.parent;)i.parent._time!==i._start+(i._ts>=0?i._tTime/i._ts:(i.totalDuration()-i._tTime)/-i._ts)&&i.totalTime(i._tTime,!0),i=i.parent;!this.parent&&this._dp.autoRemoveChildren&&(this._ts>0&&t<this._tDur||this._ts<0&&t>0||!this._tDur&&!t)&&je(this._dp,this,this._start-this._delay)}return(this._tTime!==t||!this._dur&&!e||this._initted&&Math.abs(this._zTime)===Tt||!t&&!this._initted&&(this.add||this._ptLookup))&&(this._ts||(this._pTime=t),_e(this,t,e)),this},e.time=function(t,e){return arguments.length?this.totalTime(Math.min(this.totalDuration(),t+Ie(this))%(this._dur+this._rDelay)||(t?this._dur:0),e):this._time},e.totalProgress=function(t,e){return arguments.length?this.totalTime(this.totalDuration()*t,e):this.totalDuration()?Math.min(1,this._tTime/this._tDur):this.rawTime()>0?1:0},e.progress=function(t,e){return arguments.length?this.totalTime(this.duration()*(!this._yoyo||1&this.iteration()?t:1-t)+Ie(this),e):this.duration()?Math.min(1,this._time/this._dur):this.rawTime()>0?1:0},e.iteration=function(t,e){var i=this.duration()+this._rDelay;return arguments.length?this.totalTime(this._time+(t-1)*i,e):this._repeat?ze(this._tTime,i)+1:1},e.timeScale=function(t,e){if(!arguments.length)return-1e-8===this._rts?0:this._rts;if(this._rts===t)return this;var i=this.parent&&this._ts?Re(this.parent._time,this):this._tTime;return this._rts=+t||0,this._ts=this._ps||-1e-8===t?0:this._rts,this.totalTime(Qe(-Math.abs(this._delay),this._tDur,i),!1!==e),Be(this),function(t){for(var e=t.parent;e&&e.parent;)e._dirty=1,e.totalDuration(),e=e.parent;return t}(this)},e.paused=function(t){return arguments.length?(this._ps!==t&&(this._ps=t,t?(this._pTime=this._tTime||Math.max(-this._delay,this.rawTime()),this._ts=this._act=0):(Mi(),this._ts=this._rts,this.totalTime(this.parent&&!this.parent.smoothChildTiming?this.rawTime():this._tTime||this._pTime,1===this.progress()&&Math.abs(this._zTime)!==Tt&&(this._tTime-=Tt)))),this):this._ps},e.startTime=function(t){if(arguments.length){this._start=t;var e=this.parent||this._dp;return e&&(e._sort||!this.parent)&&je(e,this,t-this._delay),this}return this._start},e.endTime=function(t){return this._start+(zt(t)?this.totalDuration():this.duration())/Math.abs(this._ts||1)},e.rawTime=function(t){var e=this.parent||this._dp;return e?t&&(!this._ts||this._repeat&&this._time&&this.totalProgress()<1)?this._tTime%(this._dur+this._rDelay):this._ts?Re(e.rawTime(t),this):this._tTime:this._tTime},e.revert=function(t){void 0===t&&(t=ie);var e=nt;return nt=t,(this._initted||this._startAt)&&(this.timeline&&this.timeline.revert(t),this.totalTime(-.01,t.suppressEvents)),"nested"!==this.data&&!1!==t.kill&&this.kill(),nt=e,this},e.globalTime=function(t){for(var e=this,i=arguments.length?t:e.rawTime();e;)i=e._start+i/(Math.abs(e._ts)||1),e=e._dp;return!this.parent&&this._sat?this._sat.globalTime(t):i},e.repeat=function(t){return arguments.length?(this._repeat=t===1/0?-2:t,Ge(this)):-2===this._repeat?1/0:this._repeat},e.repeatDelay=function(t){if(arguments.length){var e=this._time;return this._rDelay=t,Ge(this),e?this.time(e):this}return this._rDelay},e.yoyo=function(t){return arguments.length?(this._yoyo=t,this):this._yoyo},e.seek=function(t,e){return this.totalTime($e(this,t),zt(e))},e.restart=function(t,e){return this.play().totalTime(t?-this._delay:0,zt(e))},e.play=function(t,e){return null!=t&&this.seek(t,e),this.reversed(!1).paused(!1)},e.reverse=function(t,e){return null!=t&&this.seek(t||this.totalDuration(),e),this.reversed(!0).paused(!1)},e.pause=function(t,e){return null!=t&&this.seek(t,e),this.paused(!0)},e.resume=function(){return this.paused(!1)},e.reversed=function(t){return arguments.length?(!!t!==this.reversed()&&this.timeScale(-this._rts||(t?-1e-8:0)),this):this._rts<0},e.invalidate=function(){return this._initted=this._act=0,this._zTime=-1e-8,this},e.isActive=function(){var t,e=this.parent||this._dp,i=this._start;return!(e&&!(this._ts&&this._initted&&e.isActive()&&(t=e.rawTime(!0))>=i&&t<this.endTime(!0)-Tt))},e.eventCallback=function(t,e,i){var r=this.vars;return arguments.length>1?(e?(r[t]=e,i&&(r[t+"Params"]=i),"onUpdate"===t&&(this._onUpdate=e)):delete r[t],this):r[t]},e.then=function(t){var e=this;return new Promise((function(i){var r=Pt(t)?t:xe,n=function(){var t=e.then;e.then=null,Pt(r)&&(r=r(e))&&(r.then||r===e)&&(e.then=t),i(r),e.then=t};e._initted&&1===e.totalProgress()&&e._ts>=0||!e._tTime&&e._ts<0?n():e._prom=n}))},e.kill=function(){fi(this)},t}();Te(ji.prototype,{_time:0,_start:0,_end:0,_tTime:0,_tDur:0,_dirty:0,_repeat:0,_yoyo:!1,parent:null,_initted:!1,_rDelay:0,_ts:1,_dp:0,ratio:0,_zTime:-1e-8,_prom:0,_ps:!1,_rts:1});var Hi=function(t){function e(e,i){var r;return void 0===e&&(e={}),(r=t.call(this,e)||this).labels={},r.smoothChildTiming=!!e.smoothChildTiming,r.autoRemoveChildren=!!e.autoRemoveChildren,r._sort=zt(e.sortChildren),ot&&je(e.parent||ot,et(r),i),e.reversed&&r.reverse(),e.paused&&r.paused(!0),e.scrollTrigger&&He(et(r),e.scrollTrigger),r}it(e,t);var i=e.prototype;return i.to=function(t,e,i){return Ue(0,arguments,this),this},i.from=function(t,e,i){return Ue(1,arguments,this),this},i.fromTo=function(t,e,i,r){return Ue(2,arguments,this),this},i.set=function(t,e,i){return e.duration=0,e.parent=this,Me(e).repeatDelay||(e.repeat=0),e.immediateRender=!!e.immediateRender,new Zi(t,e,$e(this,i),1),this},i.call=function(t,e,i){return je(this,Zi.delayedCall(0,t,e),i)},i.staggerTo=function(t,e,i,r,n,s,o){return i.duration=e,i.stagger=i.stagger||r,i.onComplete=s,i.onCompleteParams=o,i.parent=this,new Zi(t,i,$e(this,n)),this},i.staggerFrom=function(t,e,i,r,n,s,o){return i.runBackwards=1,Me(i).immediateRender=zt(i.immediateRender),this.staggerTo(t,e,i,r,n,s,o)},i.staggerFromTo=function(t,e,i,r,n,s,o,a){return r.startAt=i,Me(r).immediateRender=zt(r.immediateRender),this.staggerTo(t,e,r,n,s,o,a)},i.render=function(t,e,i){var r,n,s,o,a,l,c,d,u,h,p,f,m=this._time,v=this._dirty?this.totalDuration():this._tDur,g=this._dur,y=t<=0?0:ve(t),w=this._zTime<0!=t<0&&(this._initted||!g);if(this!==ot&&y>v&&t>=0&&(y=v),y!==this._tTime||i||w){if(m!==this._time&&g&&(y+=this._time-m,t+=this._time-m),r=y,u=this._start,l=!(d=this._ts),w&&(g||(m=this._zTime),(t||!e)&&(this._zTime=t)),this._repeat){if(p=this._yoyo,a=g+this._rDelay,this._repeat<-1&&t<0)return this.totalTime(100*a+t,e,i);if(r=ve(y%a),y===v?(o=this._repeat,r=g):((o=~~(y/a))&&o===y/a&&(r=g,o--),r>g&&(r=g)),h=ze(this._tTime,a),!m&&this._tTime&&h!==o&&this._tTime-h*a-this._dur<=0&&(h=o),p&&1&o&&(r=g-r,f=1),o!==h&&!this._lock){var _=p&&1&h,b=_===(p&&1&o);if(o<h&&(_=!_),m=_?0:y%g?g:y,this._lock=1,this.render(m||(f?0:ve(o*a)),e,!g)._lock=0,this._tTime=y,!e&&this.parent&&pi(this,"onRepeat"),this.vars.repeatRefresh&&!f&&(this.invalidate()._lock=1),m&&m!==this._time||l!==!this._ts||this.vars.onRepeat&&!this.parent&&!this._act)return this;if(g=this._dur,v=this._tDur,b&&(this._lock=2,m=_?g:-1e-4,this.render(m,!0),this.vars.repeatRefresh&&!f&&this.invalidate()),this._lock=0,!this._ts&&!l)return this;Di(this,f)}}if(this._hasPause&&!this._forcing&&this._lock<2&&(c=function(t,e,i){var r;if(i>e)for(r=t._first;r&&r._start<=i;){if("isPause"===r.data&&r._start>e)return r;r=r._next}else for(r=t._last;r&&r._start>=i;){if("isPause"===r.data&&r._start<e)return r;r=r._prev}}(this,ve(m),ve(r)),c&&(y-=r-(r=c._start))),this._tTime=y,this._time=r,this._act=!d,this._initted||(this._onUpdate=this.vars.onUpdate,this._initted=1,this._zTime=t,m=0),!m&&r&&!e&&!o&&(pi(this,"onStart"),this._tTime!==y))return this;if(r>=m&&t>=0)for(n=this._first;n;){if(s=n._next,(n._act||r>=n._start)&&n._ts&&c!==n){if(n.parent!==this)return this.render(t,e,i);if(n.render(n._ts>0?(r-n._start)*n._ts:(n._dirty?n.totalDuration():n._tDur)+(r-n._start)*n._ts,e,i),r!==this._time||!this._ts&&!l){c=0,s&&(y+=this._zTime=-1e-8);break}}n=s}else{n=this._last;for(var x=t<0?t:r;n;){if(s=n._prev,(n._act||x<=n._end)&&n._ts&&c!==n){if(n.parent!==this)return this.render(t,e,i);if(n.render(n._ts>0?(x-n._start)*n._ts:(n._dirty?n.totalDuration():n._tDur)+(x-n._start)*n._ts,e,i||nt&&(n._initted||n._startAt)),r!==this._time||!this._ts&&!l){c=0,s&&(y+=this._zTime=x?-1e-8:Tt);break}}n=s}}if(c&&!e&&(this.pause(),c.render(r>=m?0:-1e-8)._zTime=r>=m?1:-1,this._ts))return this._start=u,Be(this),this.render(t,e,i);this._onUpdate&&!e&&pi(this,"onUpdate",!0),(y===v&&this._tTime>=this.totalDuration()||!y&&m)&&(u!==this._start&&Math.abs(d)===Math.abs(this._ts)||this._lock||((t||!g)&&(y===v&&this._ts>0||!y&&this._ts<0)&&Ae(this,1),e||t<0&&!m||!y&&!m&&v||(pi(this,y===v&&t>=0?"onComplete":"onReverseComplete",!0),this._prom&&!(y<v&&this.timeScale()>0)&&this._prom())))}return this},i.add=function(t,e){var i=this;if(Lt(e)||(e=$e(this,e,t)),!(t instanceof ji)){if(Yt(t))return t.forEach((function(t){return i.add(t,e)})),this;if(At(t))return this.addLabel(t,e);if(!Pt(t))return this;t=Zi.delayedCall(0,t)}return this!==t?je(this,t,e):this},i.getChildren=function(t,e,i,r){void 0===t&&(t=!0),void 0===e&&(e=!0),void 0===i&&(i=!0),void 0===r&&(r=-xt);for(var n=[],s=this._first;s;)s._start>=r&&(s instanceof Zi?e&&n.push(s):(i&&n.push(s),t&&n.push.apply(n,s.getChildren(!0,e,i)))),s=s._next;return n},i.getById=function(t){for(var e=this.getChildren(1,1,1),i=e.length;i--;)if(e[i].vars.id===t)return e[i]},i.remove=function(t){return At(t)?this.removeLabel(t):Pt(t)?this.killTweensOf(t):(Oe(this,t),t===this._recent&&(this._recent=this._last),Pe(this))},i.totalTime=function(e,i){return arguments.length?(this._forcing=1,!this._dp&&this._ts&&(this._start=ve(ki.time-(this._ts>0?e/this._ts:(this.totalDuration()-e)/-this._ts))),t.prototype.totalTime.call(this,e,i),this._forcing=0,this):this._tTime},i.addLabel=function(t,e){return this.labels[t]=$e(this,e),this},i.removeLabel=function(t){return delete this.labels[t],this},i.addPause=function(t,e,i){var r=Zi.delayedCall(0,e||Jt,i);return r.data="isPause",this._hasPause=1,je(this,r,$e(this,t))},i.removePause=function(t){var e=this._first;for(t=$e(this,t);e;)e._start===t&&"isPause"===e.data&&Ae(e),e=e._next},i.killTweensOf=function(t,e,i){for(var r=this.getTweensOf(t,i),n=r.length;n--;)Wi!==r[n]&&r[n].kill(t,e);return this},i.getTweensOf=function(t,e){for(var i,r=[],n=ii(t),s=this._first,o=Lt(e);s;)s instanceof Zi?ye(s._targets,n)&&(o?(!Wi||s._initted&&s._ts)&&s.globalTime(0)<=e&&s.globalTime(s.totalDuration())>e:!e||s.isActive())&&r.push(s):(i=s.getTweensOf(n,e)).length&&r.push.apply(r,i),s=s._next;return r},i.tweenTo=function(t,e){e=e||{};var i,r=this,n=$e(r,t),s=e,o=s.startAt,a=s.onStart,l=s.onStartParams,c=s.immediateRender,d=Zi.to(r,Te({ease:e.ease||"none",lazy:!1,immediateRender:!1,time:n,overwrite:"auto",duration:e.duration||Math.abs((n-(o&&"time"in o?o.time:r._time))/r.timeScale())||Tt,onStart:function(){if(r.pause(),!i){var t=e.duration||Math.abs((n-(o&&"time"in o?o.time:r._time))/r.timeScale());d._dur!==t&&Xe(d,t,0,1).render(d._time,!0,!0),i=1}a&&a.apply(d,l||[])}},e));return c?d.render(0):d},i.tweenFromTo=function(t,e,i){return this.tweenTo(e,Te({startAt:{time:$e(this,t)}},i))},i.recent=function(){return this._recent},i.nextLabel=function(t){return void 0===t&&(t=this._time),hi(this,$e(this,t))},i.previousLabel=function(t){return void 0===t&&(t=this._time),hi(this,$e(this,t),1)},i.currentLabel=function(t){return arguments.length?this.seek(t,!0):this.previousLabel(this._time+Tt)},i.shiftChildren=function(t,e,i){void 0===i&&(i=0);for(var r,n=this._first,s=this.labels;n;)n._start>=i&&(n._start+=t,n._end+=t),n=n._next;if(e)for(r in s)s[r]>=i&&(s[r]+=t);return Pe(this)},i.invalidate=function(e){var i=this._first;for(this._lock=0;i;)i.invalidate(e),i=i._next;return t.prototype.invalidate.call(this,e)},i.clear=function(t){void 0===t&&(t=!0);for(var e,i=this._first;i;)e=i._next,this.remove(i),i=e;return this._dp&&(this._time=this._tTime=this._pTime=0),t&&(this.labels={}),Pe(this)},i.totalDuration=function(t){var e,i,r,n=0,s=this,o=s._last,a=xt;if(arguments.length)return s.timeScale((s._repeat<0?s.duration():s.totalDuration())/(s.reversed()?-t:t));if(s._dirty){for(r=s.parent;o;)e=o._prev,o._dirty&&o.totalDuration(),(i=o._start)>a&&s._sort&&o._ts&&!s._lock?(s._lock=1,je(s,o,i-o._delay,1)._lock=0):a=i,i<0&&o._ts&&(n-=i,(!r&&!s._dp||r&&r.smoothChildTiming)&&(s._start+=i/s._ts,s._time-=i,s._tTime-=i),s.shiftChildren(-i,!1,-Infinity),a=0),o._end>n&&o._ts&&(n=o._end),o=e;Xe(s,s===ot&&s._time>n?s._time:n,1,1),s._dirty=0}return s._tDur},e.updateRoot=function(t){if(ot._ts&&(_e(ot,Re(t,ot)),ut=ki.frame),ki.frame>=le){le+=_t.autoSleep||120;var e=ot._first;if((!e||!e._ts)&&_t.autoSleep&&ki._listeners.length<2){for(;e&&!e._ts;)e=e._next;e||ki.sleep()}}},e}(ji);Te(Hi.prototype,{_lock:0,_hasPause:0,_forcing:0});var Wi,Vi,Ni=function(t,e,i,r,n,s,o){var a,l,c,d,u,h,p,f,m=new hr(this._pt,t,e,0,1,or,null,n),v=0,g=0;for(m.b=i,m.e=r,i+="",(p=~(r+="").indexOf("random("))&&(r=di(r)),s&&(s(f=[i,r],t,e),i=f[0],r=f[1]),l=i.match(Vt)||[];a=Vt.exec(r);)d=a[0],u=r.substring(v,a.index),c?c=(c+1)%5:"rgba("===u.substr(-5)&&(c=1),d!==l[g++]&&(h=parseFloat(l[g-1])||0,m._pt={_next:m._pt,p:u||1===g?u:",",s:h,c:"="===d.charAt(1)?ge(h,d)-h:parseFloat(d)-h,m:c&&c<4?Math.round:0},v=Vt.lastIndex);return m.c=v<r.length?r.substring(v,r.length):"",m.fp=o,(Nt.test(r)||p)&&(m.e=0),this._pt=m,m},Xi=function(t,e,i,r,n,s,o,a,l,c){Pt(r)&&(r=r(n||0,t,s));var d,u=t[e],h="get"!==i?i:Pt(u)?l?t[e.indexOf("set")||!Pt(t["get"+e.substr(3)])?e:"get"+e.substr(3)](l):t[e]():u,p=Pt(u)?l?er:tr:Ji;if(At(r)&&(~r.indexOf("random(")&&(r=di(r)),"="===r.charAt(1)&&((d=ge(h,r)+(Ze(h)||0))||0===d)&&(r=d)),!c||h!==r||Vi)return isNaN(h*r)||""===r?(!u&&!(e in t)&&Kt(e,r),Ni.call(this,t,e,h,r,p,a||_t.stringFilter,l)):(d=new hr(this._pt,t,e,+h||0,r-(h||0),"boolean"==typeof u?sr:nr,0,p),l&&(d.fp=l),o&&d.modifier(o,this,t),this._pt=d)},Gi=function(t,e,i,r,n,s){var o,a,l,c;if(oe[t]&&!1!==(o=new oe[t]).init(n,o.rawVars?e[t]:function(t,e,i,r,n){if(Pt(t)&&(t=Ui(t,n,e,i,r)),!It(t)||t.style&&t.nodeType||Yt(t)||Ft(t))return At(t)?Ui(t,n,e,i,r):t;var s,o={};for(s in t)o[s]=Ui(t[s],n,e,i,r);return o}(e[t],r,n,s,i),i,r,s)&&(i._pt=a=new hr(i._pt,n,t,0,1,o.render,o,0,o.priority),i!==ht))for(l=i._ptLookup[i._targets.indexOf(n)],c=o._props.length;c--;)l[o._props[c]]=a;return o},qi=function t(e,i,r){var n,s,o,a,l,c,d,u,h,p,f,m,v,g=e.vars,y=g.ease,w=g.startAt,_=g.immediateRender,b=g.lazy,x=g.onUpdate,T=g.runBackwards,S=g.yoyoEase,E=g.keyframes,k=g.autoRevert,M=e._dur,C=e._startAt,O=e._targets,A=e.parent,P=A&&"nested"===A.data?A.vars.targets:O,L="auto"===e._overwrite&&!rt,D=e.timeline;if(D&&(!E||!y)&&(y="none"),e._ease=Ii(y,bt.ease),e._yEase=S?Li(Ii(!0===S?y:S,bt.ease)):0,S&&e._yoyo&&!e._repeat&&(S=e._yEase,e._yEase=e._ease,e._ease=S),e._from=!D&&!!g.runBackwards,!D||E&&!g.stagger){if(m=(u=O[0]?he(O[0]).harness:0)&&g[u.prop],n=ke(g,re),C&&(C._zTime<0&&C.progress(1),i<0&&T&&_&&!k?C.render(-1,!0):C.revert(T&&M?ee:te),C._lazy=0),w){if(Ae(e._startAt=Zi.set(O,Te({data:"isStart",overwrite:!1,parent:A,immediateRender:!0,lazy:!C&&zt(b),startAt:null,delay:0,onUpdate:x&&function(){return pi(e,"onUpdate")},stagger:0},w))),e._startAt._dp=0,e._startAt._sat=e,i<0&&(nt||!_&&!k)&&e._startAt.revert(ee),_&&M&&i<=0&&r<=0)return void(i&&(e._zTime=i))}else if(T&&M&&!C)if(i&&(_=!1),o=Te({overwrite:!1,data:"isFromStart",lazy:_&&!C&&zt(b),immediateRender:_,stagger:0,parent:A},n),m&&(o[u.prop]=m),Ae(e._startAt=Zi.set(O,o)),e._startAt._dp=0,e._startAt._sat=e,i<0&&(nt?e._startAt.revert(ee):e._startAt.render(-1,!0)),e._zTime=i,_){if(!i)return}else t(e._startAt,Tt,Tt);for(e._pt=e._ptCache=0,b=M&&zt(b)||b&&!M,s=0;s<O.length;s++){if(d=(l=O[s])._gsap||ue(O)[s]._gsap,e._ptLookup[s]=p={},se[d.id]&&ne.length&&we(),f=P===O?s:P.indexOf(l),u&&!1!==(h=new u).init(l,m||n,e,f,P)&&(e._pt=a=new hr(e._pt,l,h.name,0,1,h.render,h,0,h.priority),h._props.forEach((function(t){p[t]=a})),h.priority&&(c=1)),!u||m)for(o in n)oe[o]&&(h=Gi(o,n,e,f,l,P))?h.priority&&(c=1):p[o]=a=Xi.call(e,l,o,"get",n[o],f,P,0,g.stringFilter);e._op&&e._op[s]&&e.kill(l,e._op[s]),L&&e._pt&&(Wi=e,ot.killTweensOf(l,p,e.globalTime(i)),v=!e.parent,Wi=0),e._pt&&b&&(se[d.id]=1)}c&&ur(e),e._onInit&&e._onInit(e)}e._onUpdate=x,e._initted=(!e._op||e._pt)&&!v,E&&i<=0&&D.render(xt,!0,!0)},$i=function(t,e,i,r){var n,s,o=e.ease||r||"power1.inOut";if(Yt(e))s=i[t]||(i[t]=[]),e.forEach((function(t,i){return s.push({t:i/(e.length-1)*100,v:t,e:o})}));else for(n in e)s=i[n]||(i[n]=[]),"ease"===n||s.push({t:parseFloat(t),v:e[n],e:o})},Ui=function(t,e,i,r,n){return Pt(t)?t.call(e,i,r,n):At(t)&&~t.indexOf("random(")?di(t):t},Ki=de+"repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase,autoRevert",Qi={};fe(Ki+",id,stagger,delay,duration,paused,scrollTrigger",(function(t){return Qi[t]=1}));var Zi=function(t){function e(e,i,r,n){var s;"number"==typeof i&&(r.duration=i,i=r,r=null);var o,a,l,c,d,u,h,p,f=(s=t.call(this,n?i:Me(i))||this).vars,m=f.duration,v=f.delay,g=f.immediateRender,y=f.stagger,w=f.overwrite,_=f.keyframes,b=f.defaults,x=f.scrollTrigger,T=f.yoyoEase,S=i.parent||ot,E=(Yt(e)||Ft(e)?Lt(e[0]):"length"in i)?[e]:ii(e);if(s._targets=E.length?ue(E):Qt("GSAP target "+e+" not found. https://gsap.com",!_t.nullTargetWarn)||[],s._ptLookup=[],s._overwrite=w,_||y||Bt(m)||Bt(v)){if(i=s.vars,(o=s.timeline=new Hi({data:"nested",defaults:b||{},targets:S&&"nested"===S.data?S.vars.targets:E})).kill(),o.parent=o._dp=et(s),o._start=0,y||Bt(m)||Bt(v)){if(c=E.length,h=y&&si(y),It(y))for(d in y)~Ki.indexOf(d)&&(p||(p={}),p[d]=y[d]);for(a=0;a<c;a++)(l=ke(i,Qi)).stagger=0,T&&(l.yoyoEase=T),p&&Se(l,p),u=E[a],l.duration=+Ui(m,et(s),a,u,E),l.delay=(+Ui(v,et(s),a,u,E)||0)-s._delay,!y&&1===c&&l.delay&&(s._delay=v=l.delay,s._start+=v,l.delay=0),o.to(u,l,h?h(a,u,E):0),o._ease=Ci.none;o.duration()?m=v=0:s.timeline=0}else if(_){Me(Te(o.vars.defaults,{ease:"none"})),o._ease=Ii(_.ease||i.ease||"none");var k,M,C,O=0;if(Yt(_))_.forEach((function(t){return o.to(E,t,">")})),o.duration();else{for(d in l={},_)"ease"===d||"easeEach"===d||$i(d,_[d],l,_.easeEach);for(d in l)for(k=l[d].sort((function(t,e){return t.t-e.t})),O=0,a=0;a<k.length;a++)(C={ease:(M=k[a]).e,duration:(M.t-(a?k[a-1].t:0))/100*m})[d]=M.v,o.to(E,C,O),O+=C.duration;o.duration()<m&&o.to({},{duration:m-o.duration()})}}m||s.duration(m=o.duration())}else s.timeline=0;return!0!==w||rt||(Wi=et(s),ot.killTweensOf(E),Wi=0),je(S,et(s),r),i.reversed&&s.reverse(),i.paused&&s.paused(!0),(g||!m&&!_&&s._start===ve(S._time)&&zt(g)&&De(et(s))&&"nested"!==S.data)&&(s._tTime=-1e-8,s.render(Math.max(0,-v)||0)),x&&He(et(s),x),s}it(e,t);var i=e.prototype;return i.render=function(t,e,i){var r,n,s,o,a,l,c,d,u,h=this._time,p=this._tDur,f=this._dur,m=t<0,v=t>p-Tt&&!m?p:t<Tt?0:t;if(f){if(v!==this._tTime||!t||i||!this._initted&&this._tTime||this._startAt&&this._zTime<0!==m){if(r=v,d=this.timeline,this._repeat){if(o=f+this._rDelay,this._repeat<-1&&m)return this.totalTime(100*o+t,e,i);if(r=ve(v%o),v===p?(s=this._repeat,r=f):((s=~~(v/o))&&s===ve(v/o)&&(r=f,s--),r>f&&(r=f)),(l=this._yoyo&&1&s)&&(u=this._yEase,r=f-r),a=ze(this._tTime,o),r===h&&!i&&this._initted&&s===a)return this._tTime=v,this;s!==a&&(d&&this._yEase&&Di(d,l),this.vars.repeatRefresh&&!l&&!this._lock&&this._time!==o&&this._initted&&(this._lock=i=1,this.render(ve(o*s),!0).invalidate()._lock=0))}if(!this._initted){if(We(this,m?t:r,i,e,v))return this._tTime=0,this;if(!(h===this._time||i&&this.vars.repeatRefresh&&s!==a))return this;if(f!==this._dur)return this.render(t,e,i)}if(this._tTime=v,this._time=r,!this._act&&this._ts&&(this._act=1,this._lazy=0),this.ratio=c=(u||this._ease)(r/f),this._from&&(this.ratio=c=1-c),r&&!h&&!e&&!s&&(pi(this,"onStart"),this._tTime!==v))return this;for(n=this._pt;n;)n.r(c,n.d),n=n._next;d&&d.render(t<0?t:d._dur*d._ease(r/this._dur),e,i)||this._startAt&&(this._zTime=t),this._onUpdate&&!e&&(m&&Le(this,t,0,i),pi(this,"onUpdate")),this._repeat&&s!==a&&this.vars.onRepeat&&!e&&this.parent&&pi(this,"onRepeat"),v!==this._tDur&&v||this._tTime!==v||(m&&!this._onUpdate&&Le(this,t,0,!0),(t||!f)&&(v===this._tDur&&this._ts>0||!v&&this._ts<0)&&Ae(this,1),e||m&&!h||!(v||h||l)||(pi(this,v===p?"onComplete":"onReverseComplete",!0),this._prom&&!(v<p&&this.timeScale()>0)&&this._prom()))}}else!function(t,e,i,r){var n,s,o,a=t.ratio,l=e<0||!e&&(!t._start&&Ve(t)&&(t._initted||!Ne(t))||(t._ts<0||t._dp._ts<0)&&!Ne(t))?0:1,c=t._rDelay,d=0;if(c&&t._repeat&&(d=Qe(0,t._tDur,e),s=ze(d,c),t._yoyo&&1&s&&(l=1-l),s!==ze(t._tTime,c)&&(a=1-l,t.vars.repeatRefresh&&t._initted&&t.invalidate())),l!==a||nt||r||t._zTime===Tt||!e&&t._zTime){if(!t._initted&&We(t,e,r,i,d))return;for(o=t._zTime,t._zTime=e||(i?Tt:0),i||(i=e&&!o),t.ratio=l,t._from&&(l=1-l),t._time=0,t._tTime=d,n=t._pt;n;)n.r(l,n.d),n=n._next;e<0&&Le(t,e,0,!0),t._onUpdate&&!i&&pi(t,"onUpdate"),d&&t._repeat&&!i&&t.parent&&pi(t,"onRepeat"),(e>=t._tDur||e<0)&&t.ratio===l&&(l&&Ae(t,1),i||nt||(pi(t,l?"onComplete":"onReverseComplete",!0),t._prom&&t._prom()))}else t._zTime||(t._zTime=e)}(this,t,e,i);return this},i.targets=function(){return this._targets},i.invalidate=function(e){return(!e||!this.vars.runBackwards)&&(this._startAt=0),this._pt=this._op=this._onUpdate=this._lazy=this.ratio=0,this._ptLookup=[],this.timeline&&this.timeline.invalidate(e),t.prototype.invalidate.call(this,e)},i.resetTo=function(t,e,i,r,n){pt||ki.wake(),this._ts||this.play();var s=Math.min(this._dur,(this._dp._time-this._start)*this._ts);return this._initted||qi(this,s),function(t,e,i,r,n,s,o,a){var l,c,d,u,h=(t._pt&&t._ptCache||(t._ptCache={}))[e];if(!h)for(h=t._ptCache[e]=[],d=t._ptLookup,u=t._targets.length;u--;){if((l=d[u][e])&&l.d&&l.d._pt)for(l=l.d._pt;l&&l.p!==e&&l.fp!==e;)l=l._next;if(!l)return Vi=1,t.vars[e]="+=0",qi(t,o),Vi=0,a?Qt(e+" not eligible for reset"):1;h.push(l)}for(u=h.length;u--;)(l=(c=h[u])._pt||c).s=!r&&0!==r||n?l.s+(r||0)+s*l.c:r,l.c=i-l.s,c.e&&(c.e=me(i)+Ze(c.e)),c.b&&(c.b=l.s+Ze(c.b))}(this,t,e,i,r,this._ease(s/this._dur),s,n)?this.resetTo(t,e,i,r,1):(Fe(this,0),this.parent||Ce(this._dp,this,"_first","_last",this._dp._sort?"_start":0),this.render(0))},i.kill=function(t,e){if(void 0===e&&(e="all"),!(t||e&&"all"!==e))return this._lazy=this._pt=0,this.parent?fi(this):this;if(this.timeline){var i=this.timeline.totalDuration();return this.timeline.killTweensOf(t,e,Wi&&!0!==Wi.vars.overwrite)._first||fi(this),this.parent&&i!==this.timeline.totalDuration()&&Xe(this,this._dur*this.timeline._tDur/i,0,1),this}var r,n,s,o,a,l,c,d=this._targets,u=t?ii(t):d,h=this._ptLookup,p=this._pt;if((!e||"all"===e)&&function(t,e){for(var i=t.length,r=i===e.length;r&&i--&&t[i]===e[i];);return i<0}(d,u))return"all"===e&&(this._pt=0),fi(this);for(r=this._op=this._op||[],"all"!==e&&(At(e)&&(a={},fe(e,(function(t){return a[t]=1})),e=a),e=function(t,e){var i,r,n,s,o=t[0]?he(t[0]).harness:0,a=o&&o.aliases;if(!a)return e;for(r in i=Se({},e),a)if(r in i)for(n=(s=a[r].split(",")).length;n--;)i[s[n]]=i[r];return i}(d,e)),c=d.length;c--;)if(~u.indexOf(d[c]))for(a in n=h[c],"all"===e?(r[c]=e,o=n,s={}):(s=r[c]=r[c]||{},o=e),o)(l=n&&n[a])&&("kill"in l.d&&!0!==l.d.kill(a)||Oe(this,l,"_pt"),delete n[a]),"all"!==s&&(s[a]=1);return this._initted&&!this._pt&&p&&fi(this),this},e.to=function(t,i){return new e(t,i,arguments[2])},e.from=function(t,e){return Ue(1,arguments)},e.delayedCall=function(t,i,r,n){return new e(i,0,{immediateRender:!1,lazy:!1,overwrite:!1,delay:t,onComplete:i,onReverseComplete:i,onCompleteParams:r,onReverseCompleteParams:r,callbackScope:n})},e.fromTo=function(t,e,i){return Ue(2,arguments)},e.set=function(t,i){return i.duration=0,i.repeatDelay||(i.repeat=0),new e(t,i)},e.killTweensOf=function(t,e,i){return ot.killTweensOf(t,e,i)},e}(ji);Te(Zi.prototype,{_targets:[],_lazy:0,_startAt:0,_op:0,_onInit:0}),fe("staggerTo,staggerFrom,staggerFromTo",(function(t){Zi[t]=function(){var e=new Hi,i=Je.call(arguments,0);return i.splice("staggerFromTo"===t?5:4,0,0),e[t].apply(e,i)}}));var Ji=function(t,e,i){return t[e]=i},tr=function(t,e,i){return t[e](i)},er=function(t,e,i,r){return t[e](r.fp,i)},ir=function(t,e,i){return t.setAttribute(e,i)},rr=function(t,e){return Pt(t[e])?tr:Dt(t[e])&&t.setAttribute?ir:Ji},nr=function(t,e){return e.set(e.t,e.p,Math.round(1e6*(e.s+e.c*t))/1e6,e)},sr=function(t,e){return e.set(e.t,e.p,!!(e.s+e.c*t),e)},or=function(t,e){var i=e._pt,r="";if(!t&&e.b)r=e.b;else if(1===t&&e.e)r=e.e;else{for(;i;)r=i.p+(i.m?i.m(i.s+i.c*t):Math.round(1e4*(i.s+i.c*t))/1e4)+r,i=i._next;r+=e.c}e.set(e.t,e.p,r,e)},ar=function(t,e){for(var i=e._pt;i;)i.r(t,i.d),i=i._next},lr=function(t,e,i,r){for(var n,s=this._pt;s;)n=s._next,s.p===r&&s.modifier(t,e,i),s=n},cr=function(t){for(var e,i,r=this._pt;r;)i=r._next,r.p===t&&!r.op||r.op===t?Oe(this,r,"_pt"):r.dep||(e=1),r=i;return!e},dr=function(t,e,i,r){r.mSet(t,e,r.m.call(r.tween,i,r.mt),r)},ur=function(t){for(var e,i,r,n,s=t._pt;s;){for(e=s._next,i=r;i&&i.pr>s.pr;)i=i._next;(s._prev=i?i._prev:n)?s._prev._next=s:r=s,(s._next=i)?i._prev=s:n=s,s=e}t._pt=r},hr=function(){function t(t,e,i,r,n,s,o,a,l){this.t=e,this.s=r,this.c=n,this.p=i,this.r=s||nr,this.d=o||this,this.set=a||Ji,this.pr=l||0,this._next=t,t&&(t._prev=this)}return t.prototype.modifier=function(t,e,i){this.mSet=this.mSet||this.set,this.set=dr,this.m=t,this.mt=i,this.tween=e},t}();fe(de+"parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger",(function(t){return re[t]=1})),qt.TweenMax=qt.TweenLite=Zi,qt.TimelineLite=qt.TimelineMax=Hi,ot=new Hi({sortChildren:!1,defaults:bt,autoRemoveChildren:!0,id:"root",smoothChildTiming:!0}),_t.stringFilter=Ei;var pr=[],fr={},mr=[],vr=0,gr=0,yr=function(t){return(fr[t]||mr).map((function(t){return t()}))},wr=function(){var t=Date.now(),e=[];t-vr>2&&(yr("matchMediaInit"),pr.forEach((function(t){var i,r,n,s,o=t.queries,a=t.conditions;for(r in o)(i=at.matchMedia(o[r]).matches)&&(n=1),i!==a[r]&&(a[r]=i,s=1);s&&(t.revert(),n&&e.push(t))})),yr("matchMediaRevert"),e.forEach((function(t){return t.onMatch(t,(function(e){return t.add(null,e)}))})),vr=t,yr("matchMedia"))},_r=function(){function t(t,e){this.selector=e&&ri(e),this.data=[],this._r=[],this.isReverted=!1,this.id=gr++,t&&this.add(t)}var e=t.prototype;return e.add=function(t,e,i){Pt(t)&&(i=e,e=t,t=Pt);var r=this,n=function(){var t,n=st,s=r.selector;return n&&n!==r&&n.data.push(r),i&&(r.selector=ri(i)),st=r,t=e.apply(r,arguments),Pt(t)&&r._r.push(t),st=n,r.selector=s,r.isReverted=!1,t};return r.last=n,t===Pt?n(r,(function(t){return r.add(null,t)})):t?r[t]=n:n},e.ignore=function(t){var e=st;st=null,t(this),st=e},e.getTweens=function(){var e=[];return this.data.forEach((function(i){return i instanceof t?e.push.apply(e,i.getTweens()):i instanceof Zi&&!(i.parent&&"nested"===i.parent.data)&&e.push(i)})),e},e.clear=function(){this._r.length=this.data.length=0},e.kill=function(t,e){var i=this;if(t?function(){for(var e,r=i.getTweens(),n=i.data.length;n--;)"isFlip"===(e=i.data[n]).data&&(e.revert(),e.getChildren(!0,!0,!1).forEach((function(t){return r.splice(r.indexOf(t),1)})));for(r.map((function(t){return{g:t._dur||t._delay||t._sat&&!t._sat.vars.immediateRender?t.globalTime(0):-1/0,t}})).sort((function(t,e){return e.g-t.g||-1/0})).forEach((function(e){return e.t.revert(t)})),n=i.data.length;n--;)(e=i.data[n])instanceof Hi?"nested"!==e.data&&(e.scrollTrigger&&e.scrollTrigger.revert(),e.kill()):!(e instanceof Zi)&&e.revert&&e.revert(t);i._r.forEach((function(e){return e(t,i)})),i.isReverted=!0}():this.data.forEach((function(t){return t.kill&&t.kill()})),this.clear(),e)for(var r=pr.length;r--;)pr[r].id===this.id&&pr.splice(r,1)},e.revert=function(t){this.kill(t||{})},t}(),br=function(){function t(t){this.contexts=[],this.scope=t,st&&st.data.push(this)}var e=t.prototype;return e.add=function(t,e,i){It(t)||(t={matches:t});var r,n,s,o=new _r(0,i||this.scope),a=o.conditions={};for(n in st&&!o.selector&&(o.selector=st.selector),this.contexts.push(o),e=o.add("onMatch",e),o.queries=t,t)"all"===n?s=1:(r=at.matchMedia(t[n]))&&(pr.indexOf(o)<0&&pr.push(o),(a[n]=r.matches)&&(s=1),r.addListener?r.addListener(wr):r.addEventListener("change",wr));return s&&e(o,(function(t){return o.add(null,t)})),this},e.revert=function(t){this.kill(t||{})},e.kill=function(t){this.contexts.forEach((function(e){return e.kill(t,!0)}))},t}(),xr={registerPlugin:function(){for(var t=arguments.length,e=new Array(t),i=0;i<t;i++)e[i]=arguments[i];e.forEach((function(t){return vi(t)}))},timeline:function(t){return new Hi(t)},getTweensOf:function(t,e){return ot.getTweensOf(t,e)},getProperty:function(t,e,i,r){At(t)&&(t=ii(t)[0]);var n=he(t||{}).get,s=i?xe:be;return"native"===i&&(i=""),t?e?s((oe[e]&&oe[e].get||n)(t,e,i,r)):function(e,i,r){return s((oe[e]&&oe[e].get||n)(t,e,i,r))}:t},quickSetter:function(t,e,i){if((t=ii(t)).length>1){var r=t.map((function(t){return Er.quickSetter(t,e,i)})),n=r.length;return function(t){for(var e=n;e--;)r[e](t)}}t=t[0]||{};var s=oe[e],o=he(t),a=o.harness&&(o.harness.aliases||{})[e]||e,l=s?function(e){var r=new s;ht._pt=0,r.init(t,i?e+i:e,ht,0,[t]),r.render(1,r),ht._pt&&ar(1,ht)}:o.set(t,a);return s?l:function(e){return l(t,a,i?e+i:e,o,1)}},quickTo:function(t,e,i){var r,n=Er.to(t,Se(((r={})[e]="+=0.1",r.paused=!0,r),i||{})),s=function(t,i,r){return n.resetTo(e,t,i,r)};return s.tween=n,s},isTweening:function(t){return ot.getTweensOf(t,!0).length>0},defaults:function(t){return t&&t.ease&&(t.ease=Ii(t.ease,bt.ease)),Ee(bt,t||{})},config:function(t){return Ee(_t,t||{})},registerEffect:function(t){var e=t.name,i=t.effect,r=t.plugins,n=t.defaults,s=t.extendTimeline;(r||"").split(",").forEach((function(t){return t&&!oe[t]&&!qt[t]&&Qt(e+" effect requires "+t+" plugin.")})),ae[e]=function(t,e,r){return i(ii(t),Te(e||{},n),r)},s&&(Hi.prototype[e]=function(t,i,r){return this.add(ae[e](t,It(i)?i:(r=i)&&{},this),r)})},registerEase:function(t,e){Ci[t]=Ii(e)},parseEase:function(t,e){return arguments.length?Ii(t,e):Ci},getById:function(t){return ot.getById(t)},exportRoot:function(t,e){void 0===t&&(t={});var i,r,n=new Hi(t);for(n.smoothChildTiming=zt(t.smoothChildTiming),ot.remove(n),n._dp=0,n._time=n._tTime=ot._time,i=ot._first;i;)r=i._next,!e&&!i._dur&&i instanceof Zi&&i.vars.onComplete===i._targets[0]||je(n,i,i._start-i._delay),i=r;return je(ot,n,0),n},context:function(t,e){return t?new _r(t,e):st},matchMedia:function(t){return new br(t)},matchMediaRefresh:function(){return pr.forEach((function(t){var e,i,r=t.conditions;for(i in r)r[i]&&(r[i]=!1,e=1);e&&t.revert()}))||wr()},addEventListener:function(t,e){var i=fr[t]||(fr[t]=[]);~i.indexOf(e)||i.push(e)},removeEventListener:function(t,e){var i=fr[t],r=i&&i.indexOf(e);r>=0&&i.splice(r,1)},utils:{wrap:function t(e,i,r){var n=i-e;return Yt(e)?ci(e,t(0,e.length),i):Ke(r,(function(t){return(n+(t-e)%n)%n+e}))},wrapYoyo:function t(e,i,r){var n=i-e,s=2*n;return Yt(e)?ci(e,t(0,e.length-1),i):Ke(r,(function(t){return e+((t=(s+(t-e)%s)%s||0)>n?s-t:t)}))},distribute:si,random:li,snap:ai,normalize:function(t,e,i){return ui(t,e,0,1,i)},getUnit:Ze,clamp:function(t,e,i){return Ke(i,(function(i){return Qe(t,e,i)}))},splitColor:_i,toArray:ii,selector:ri,mapRange:ui,pipe:function(){for(var t=arguments.length,e=new Array(t),i=0;i<t;i++)e[i]=arguments[i];return function(t){return e.reduce((function(t,e){return e(t)}),t)}},unitize:function(t,e){return function(i){return t(parseFloat(i))+(e||Ze(i))}},interpolate:function t(e,i,r,n){var s=isNaN(e+i)?0:function(t){return(1-t)*e+t*i};if(!s){var o,a,l,c,d,u=At(e),h={};if(!0===r&&(n=1)&&(r=null),u)e={p:e},i={p:i};else if(Yt(e)&&!Yt(i)){for(l=[],c=e.length,d=c-2,a=1;a<c;a++)l.push(t(e[a-1],e[a]));c--,s=function(t){t*=c;var e=Math.min(d,~~t);return l[e](t-e)},r=i}else n||(e=Se(Yt(e)?[]:{},e));if(!l){for(o in i)Xi.call(h,e,o,"get",i[o]);s=function(t){return ar(t,h)||(u?e.p:e)}}}return Ke(r,s)},shuffle:ni},install:Ut,effects:ae,ticker:ki,updateRoot:Hi.updateRoot,plugins:oe,globalTimeline:ot,core:{PropTween:hr,globals:Zt,Tween:Zi,Timeline:Hi,Animation:ji,getCache:he,_removeLinkedListItem:Oe,reverting:function(){return nt},context:function(t){return t&&st&&(st.data.push(t),t._ctx=st),st},suppressOverwrites:function(t){return rt=t}}};fe("to,from,fromTo,delayedCall,set,killTweensOf",(function(t){return xr[t]=Zi[t]})),ki.add(Hi.updateRoot),ht=xr.to({},{duration:0});var Tr=function(t,e){for(var i=t._pt;i&&i.p!==e&&i.op!==e&&i.fp!==e;)i=i._next;return i},Sr=function(t,e){return{name:t,rawVars:1,init:function(t,i,r){r._onInit=function(t){var r,n;if(At(i)&&(r={},fe(i,(function(t){return r[t]=1})),i=r),e){for(n in r={},i)r[n]=e(i[n]);i=r}!function(t,e){var i,r,n,s=t._targets;for(i in e)for(r=s.length;r--;)(n=t._ptLookup[r][i])&&(n=n.d)&&(n._pt&&(n=Tr(n,i)),n&&n.modifier&&n.modifier(e[i],t,s[r],i))}(t,i)}}}},Er=xr.registerPlugin({name:"attr",init:function(t,e,i,r,n){var s,o,a;for(s in this.tween=i,e)a=t.getAttribute(s)||"",(o=this.add(t,"setAttribute",(a||0)+"",e[s],r,n,0,0,s)).op=s,o.b=a,this._props.push(s)},render:function(t,e){for(var i=e._pt;i;)nt?i.set(i.t,i.p,i.b,i):i.r(t,i.d),i=i._next}},{name:"endArray",init:function(t,e){for(var i=e.length;i--;)this.add(t,i,t[i]||0,e[i],0,0,0,0,0,1)}},Sr("roundProps",oi),Sr("modifiers"),Sr("snap",ai))||xr;Zi.version=Hi.version=Er.version="3.12.5",dt=1,Rt()&&Mi();Ci.Power0,Ci.Power1,Ci.Power2,Ci.Power3,Ci.Power4,Ci.Linear,Ci.Quad,Ci.Cubic,Ci.Quart,Ci.Quint,Ci.Strong,Ci.Elastic,Ci.Back,Ci.SteppedEase,Ci.Bounce,Ci.Sine,Ci.Expo,Ci.Circ;var kr,Mr,Cr,Or,Ar,Pr,Lr,Dr,Ir={},zr=180/Math.PI,Rr=Math.PI/180,Br=Math.atan2,Fr=/([A-Z])/g,Yr=/(left|right|width|margin|padding|x)/i,jr=/[\s,\(]\S/,Hr={autoAlpha:"opacity,visibility",scale:"scaleX,scaleY",alpha:"opacity"},Wr=function(t,e){return e.set(e.t,e.p,Math.round(1e4*(e.s+e.c*t))/1e4+e.u,e)},Vr=function(t,e){return e.set(e.t,e.p,1===t?e.e:Math.round(1e4*(e.s+e.c*t))/1e4+e.u,e)},Nr=function(t,e){return e.set(e.t,e.p,t?Math.round(1e4*(e.s+e.c*t))/1e4+e.u:e.b,e)},Xr=function(t,e){var i=e.s+e.c*t;e.set(e.t,e.p,~~(i+(i<0?-.5:.5))+e.u,e)},Gr=function(t,e){return e.set(e.t,e.p,t?e.e:e.b,e)},qr=function(t,e){return e.set(e.t,e.p,1!==t?e.b:e.e,e)},$r=function(t,e,i){return t.style[e]=i},Ur=function(t,e,i){return t.style.setProperty(e,i)},Kr=function(t,e,i){return t._gsap[e]=i},Qr=function(t,e,i){return t._gsap.scaleX=t._gsap.scaleY=i},Zr=function(t,e,i,r,n){var s=t._gsap;s.scaleX=s.scaleY=i,s.renderTransform(n,s)},Jr=function(t,e,i,r,n){var s=t._gsap;s[e]=i,s.renderTransform(n,s)},tn="transform",en=tn+"Origin",rn=function t(e,i){var r=this,n=this.target,s=n.style,o=n._gsap;if(e in Ir&&s){if(this.tfm=this.tfm||{},"transform"===e)return Hr.transform.split(",").forEach((function(e){return t.call(r,e,i)}));if(~(e=Hr[e]||e).indexOf(",")?e.split(",").forEach((function(t){return r.tfm[t]=bn(n,t)})):this.tfm[e]=o.x?o[e]:bn(n,e),e===en&&(this.tfm.zOrigin=o.zOrigin),this.props.indexOf(tn)>=0)return;o.svg&&(this.svgo=n.getAttribute("data-svg-origin"),this.props.push(en,i,"")),e=tn}(s||i)&&this.props.push(e,i,s[e])},nn=function(t){t.translate&&(t.removeProperty("translate"),t.removeProperty("scale"),t.removeProperty("rotate"))},sn=function(){var t,e,i=this.props,r=this.target,n=r.style,s=r._gsap;for(t=0;t<i.length;t+=3)i[t+1]?r[i[t]]=i[t+2]:i[t+2]?n[i[t]]=i[t+2]:n.removeProperty("--"===i[t].substr(0,2)?i[t]:i[t].replace(Fr,"-$1").toLowerCase());if(this.tfm){for(e in this.tfm)s[e]=this.tfm[e];s.svg&&(s.renderTransform(),r.setAttribute("data-svg-origin",this.svgo||"")),(t=Lr())&&t.isStart||n[tn]||(nn(n),s.zOrigin&&n[en]&&(n[en]+=" "+s.zOrigin+"px",s.zOrigin=0,s.renderTransform()),s.uncache=1)}},on=function(t,e){var i={target:t,props:[],revert:sn,save:rn};return t._gsap||Er.core.getCache(t),e&&e.split(",").forEach((function(t){return i.save(t)})),i},an=function(t,e){var i=Mr.createElementNS?Mr.createElementNS((e||"http://www.w3.org/1999/xhtml").replace(/^https/,"http"),t):Mr.createElement(t);return i&&i.style?i:Mr.createElement(t)},ln=function t(e,i,r){var n=getComputedStyle(e);return n[i]||n.getPropertyValue(i.replace(Fr,"-$1").toLowerCase())||n.getPropertyValue(i)||!r&&t(e,dn(i)||i,1)||""},cn="O,Moz,ms,Ms,Webkit".split(","),dn=function(t,e,i){var r=(e||Ar).style,n=5;if(t in r&&!i)return t;for(t=t.charAt(0).toUpperCase()+t.substr(1);n--&&!(cn[n]+t in r););return n<0?null:(3===n?"ms":n>=0?cn[n]:"")+t},un=function(){"undefined"!=typeof window&&window.document&&(kr=window,Mr=kr.document,Cr=Mr.documentElement,Ar=an("div")||{style:{}},an("div"),tn=dn(tn),en=tn+"Origin",Ar.style.cssText="border-width:0;line-height:0;position:absolute;padding:0",Dr=!!dn("perspective"),Lr=Er.core.reverting,Or=1)},hn=function t(e){var i,r=an("svg",this.ownerSVGElement&&this.ownerSVGElement.getAttribute("xmlns")||"http://www.w3.org/2000/svg"),n=this.parentNode,s=this.nextSibling,o=this.style.cssText;if(Cr.appendChild(r),r.appendChild(this),this.style.display="block",e)try{i=this.getBBox(),this._gsapBBox=this.getBBox,this.getBBox=t}catch(t){}else this._gsapBBox&&(i=this._gsapBBox());return n&&(s?n.insertBefore(this,s):n.appendChild(this)),Cr.removeChild(r),this.style.cssText=o,i},pn=function(t,e){for(var i=e.length;i--;)if(t.hasAttribute(e[i]))return t.getAttribute(e[i])},fn=function(t){var e;try{e=t.getBBox()}catch(i){e=hn.call(t,!0)}return e&&(e.width||e.height)||t.getBBox===hn||(e=hn.call(t,!0)),!e||e.width||e.x||e.y?e:{x:+pn(t,["x","cx","x1"])||0,y:+pn(t,["y","cy","y1"])||0,width:0,height:0}},mn=function(t){return!(!t.getCTM||t.parentNode&&!t.ownerSVGElement||!fn(t))},vn=function(t,e){if(e){var i,r=t.style;e in Ir&&e!==en&&(e=tn),r.removeProperty?("ms"!==(i=e.substr(0,2))&&"webkit"!==e.substr(0,6)||(e="-"+e),r.removeProperty("--"===i?e:e.replace(Fr,"-$1").toLowerCase())):r.removeAttribute(e)}},gn=function(t,e,i,r,n,s){var o=new hr(t._pt,e,i,0,1,s?qr:Gr);return t._pt=o,o.b=r,o.e=n,t._props.push(i),o},yn={deg:1,rad:1,turn:1},wn={grid:1,flex:1},_n=function t(e,i,r,n){var s,o,a,l,c=parseFloat(r)||0,d=(r+"").trim().substr((c+"").length)||"px",u=Ar.style,h=Yr.test(i),p="svg"===e.tagName.toLowerCase(),f=(p?"client":"offset")+(h?"Width":"Height"),m=100,v="px"===n,g="%"===n;if(n===d||!c||yn[n]||yn[d])return c;if("px"!==d&&!v&&(c=t(e,i,r,"px")),l=e.getCTM&&mn(e),(g||"%"===d)&&(Ir[i]||~i.indexOf("adius")))return s=l?e.getBBox()[h?"width":"height"]:e[f],me(g?c/s*m:c/100*s);if(u[h?"width":"height"]=m+(v?d:n),o=~i.indexOf("adius")||"em"===n&&e.appendChild&&!p?e:e.parentNode,l&&(o=(e.ownerSVGElement||{}).parentNode),o&&o!==Mr&&o.appendChild||(o=Mr.body),(a=o._gsap)&&g&&a.width&&h&&a.time===ki.time&&!a.uncache)return me(c/a.width*m);if(!g||"height"!==i&&"width"!==i)(g||"%"===d)&&!wn[ln(o,"display")]&&(u.position=ln(e,"position")),o===e&&(u.position="static"),o.appendChild(Ar),s=Ar[f],o.removeChild(Ar),u.position="absolute";else{var y=e.style[i];e.style[i]=m+n,s=e[f],y?e.style[i]=y:vn(e,i)}return h&&g&&((a=he(o)).time=ki.time,a.width=o[f]),me(v?s*c/m:s&&c?m/s*c:0)},bn=function(t,e,i,r){var n;return Or||un(),e in Hr&&"transform"!==e&&~(e=Hr[e]).indexOf(",")&&(e=e.split(",")[0]),Ir[e]&&"transform"!==e?(n=Ln(t,r),n="transformOrigin"!==e?n[e]:n.svg?n.origin:Dn(ln(t,en))+" "+n.zOrigin+"px"):(!(n=t.style[e])||"auto"===n||r||~(n+"").indexOf("calc("))&&(n=En[e]&&En[e](t,e,i)||ln(t,e)||pe(t,e)||("opacity"===e?1:0)),i&&!~(n+"").trim().indexOf(" ")?_n(t,e,n,i)+i:n},xn=function(t,e,i,r){if(!i||"none"===i){var n=dn(e,t,1),s=n&&ln(t,n,1);s&&s!==i?(e=n,i=s):"borderColor"===e&&(i=ln(t,"borderTopColor"))}var o,a,l,c,d,u,h,p,f,m,v,g=new hr(this._pt,t.style,e,0,1,or),y=0,w=0;if(g.b=i,g.e=r,i+="","auto"===(r+="")&&(u=t.style[e],t.style[e]=r,r=ln(t,e)||r,u?t.style[e]=u:vn(t,e)),Ei(o=[i,r]),r=o[1],l=(i=o[0]).match(Wt)||[],(r.match(Wt)||[]).length){for(;a=Wt.exec(r);)h=a[0],f=r.substring(y,a.index),d?d=(d+1)%5:"rgba("!==f.substr(-5)&&"hsla("!==f.substr(-5)||(d=1),h!==(u=l[w++]||"")&&(c=parseFloat(u)||0,v=u.substr((c+"").length),"="===h.charAt(1)&&(h=ge(c,h)+v),p=parseFloat(h),m=h.substr((p+"").length),y=Wt.lastIndex-m.length,m||(m=m||_t.units[e]||v,y===r.length&&(r+=m,g.e+=m)),v!==m&&(c=_n(t,e,u,m)||0),g._pt={_next:g._pt,p:f||1===w?f:",",s:c,c:p-c,m:d&&d<4||"zIndex"===e?Math.round:0});g.c=y<r.length?r.substring(y,r.length):""}else g.r="display"===e&&"none"===r?qr:Gr;return Nt.test(r)&&(g.e=0),this._pt=g,g},Tn={top:"0%",bottom:"100%",left:"0%",right:"100%",center:"50%"},Sn=function(t,e){if(e.tween&&e.tween._time===e.tween._dur){var i,r,n,s=e.t,o=s.style,a=e.u,l=s._gsap;if("all"===a||!0===a)o.cssText="",r=1;else for(n=(a=a.split(",")).length;--n>-1;)i=a[n],Ir[i]&&(r=1,i="transformOrigin"===i?en:tn),vn(s,i);r&&(vn(s,tn),l&&(l.svg&&s.removeAttribute("transform"),Ln(s,1),l.uncache=1,nn(o)))}},En={clearProps:function(t,e,i,r,n){if("isFromStart"!==n.data){var s=t._pt=new hr(t._pt,e,i,0,0,Sn);return s.u=r,s.pr=-10,s.tween=n,t._props.push(i),1}}},kn=[1,0,0,1,0,0],Mn={},Cn=function(t){return"matrix(1, 0, 0, 1, 0, 0)"===t||"none"===t||!t},On=function(t){var e=ln(t,tn);return Cn(e)?kn:e.substr(7).match(Ht).map(me)},An=function(t,e){var i,r,n,s,o=t._gsap||he(t),a=t.style,l=On(t);return o.svg&&t.getAttribute("transform")?"1,0,0,1,0,0"===(l=[(n=t.transform.baseVal.consolidate().matrix).a,n.b,n.c,n.d,n.e,n.f]).join(",")?kn:l:(l!==kn||t.offsetParent||t===Cr||o.svg||(n=a.display,a.display="block",(i=t.parentNode)&&t.offsetParent||(s=1,r=t.nextElementSibling,Cr.appendChild(t)),l=On(t),n?a.display=n:vn(t,"display"),s&&(r?i.insertBefore(t,r):i?i.appendChild(t):Cr.removeChild(t))),e&&l.length>6?[l[0],l[1],l[4],l[5],l[12],l[13]]:l)},Pn=function(t,e,i,r,n,s){var o,a,l,c=t._gsap,d=n||An(t,!0),u=c.xOrigin||0,h=c.yOrigin||0,p=c.xOffset||0,f=c.yOffset||0,m=d[0],v=d[1],g=d[2],y=d[3],w=d[4],_=d[5],b=e.split(" "),x=parseFloat(b[0])||0,T=parseFloat(b[1])||0;i?d!==kn&&(a=m*y-v*g)&&(l=x*(-v/a)+T*(m/a)-(m*_-v*w)/a,x=x*(y/a)+T*(-g/a)+(g*_-y*w)/a,T=l):(x=(o=fn(t)).x+(~b[0].indexOf("%")?x/100*o.width:x),T=o.y+(~(b[1]||b[0]).indexOf("%")?T/100*o.height:T)),r||!1!==r&&c.smooth?(w=x-u,_=T-h,c.xOffset=p+(w*m+_*g)-w,c.yOffset=f+(w*v+_*y)-_):c.xOffset=c.yOffset=0,c.xOrigin=x,c.yOrigin=T,c.smooth=!!r,c.origin=e,c.originIsAbsolute=!!i,t.style[en]="0px 0px",s&&(gn(s,c,"xOrigin",u,x),gn(s,c,"yOrigin",h,T),gn(s,c,"xOffset",p,c.xOffset),gn(s,c,"yOffset",f,c.yOffset)),t.setAttribute("data-svg-origin",x+" "+T)},Ln=function(t,e){var i=t._gsap||new Yi(t);if("x"in i&&!e&&!i.uncache)return i;var r,n,s,o,a,l,c,d,u,h,p,f,m,v,g,y,w,_,b,x,T,S,E,k,M,C,O,A,P,L,D,I,z=t.style,R=i.scaleX<0,B="px",F="deg",Y=getComputedStyle(t),j=ln(t,en)||"0";return r=n=s=l=c=d=u=h=p=0,o=a=1,i.svg=!(!t.getCTM||!mn(t)),Y.translate&&("none"===Y.translate&&"none"===Y.scale&&"none"===Y.rotate||(z[tn]=("none"!==Y.translate?"translate3d("+(Y.translate+" 0 0").split(" ").slice(0,3).join(", ")+") ":"")+("none"!==Y.rotate?"rotate("+Y.rotate+") ":"")+("none"!==Y.scale?"scale("+Y.scale.split(" ").join(",")+") ":"")+("none"!==Y[tn]?Y[tn]:"")),z.scale=z.rotate=z.translate="none"),v=An(t,i.svg),i.svg&&(i.uncache?(M=t.getBBox(),j=i.xOrigin-M.x+"px "+(i.yOrigin-M.y)+"px",k=""):k=!e&&t.getAttribute("data-svg-origin"),Pn(t,k||j,!!k||i.originIsAbsolute,!1!==i.smooth,v)),f=i.xOrigin||0,m=i.yOrigin||0,v!==kn&&(_=v[0],b=v[1],x=v[2],T=v[3],r=S=v[4],n=E=v[5],6===v.length?(o=Math.sqrt(_*_+b*b),a=Math.sqrt(T*T+x*x),l=_||b?Br(b,_)*zr:0,(u=x||T?Br(x,T)*zr+l:0)&&(a*=Math.abs(Math.cos(u*Rr))),i.svg&&(r-=f-(f*_+m*x),n-=m-(f*b+m*T))):(I=v[6],L=v[7],O=v[8],A=v[9],P=v[10],D=v[11],r=v[12],n=v[13],s=v[14],c=(g=Br(I,P))*zr,g&&(k=S*(y=Math.cos(-g))+O*(w=Math.sin(-g)),M=E*y+A*w,C=I*y+P*w,O=S*-w+O*y,A=E*-w+A*y,P=I*-w+P*y,D=L*-w+D*y,S=k,E=M,I=C),d=(g=Br(-x,P))*zr,g&&(y=Math.cos(-g),D=T*(w=Math.sin(-g))+D*y,_=k=_*y-O*w,b=M=b*y-A*w,x=C=x*y-P*w),l=(g=Br(b,_))*zr,g&&(k=_*(y=Math.cos(g))+b*(w=Math.sin(g)),M=S*y+E*w,b=b*y-_*w,E=E*y-S*w,_=k,S=M),c&&Math.abs(c)+Math.abs(l)>359.9&&(c=l=0,d=180-d),o=me(Math.sqrt(_*_+b*b+x*x)),a=me(Math.sqrt(E*E+I*I)),g=Br(S,E),u=Math.abs(g)>2e-4?g*zr:0,p=D?1/(D<0?-D:D):0),i.svg&&(k=t.getAttribute("transform"),i.forceCSS=t.setAttribute("transform","")||!Cn(ln(t,tn)),k&&t.setAttribute("transform",k))),Math.abs(u)>90&&Math.abs(u)<270&&(R?(o*=-1,u+=l<=0?180:-180,l+=l<=0?180:-180):(a*=-1,u+=u<=0?180:-180)),e=e||i.uncache,i.x=r-((i.xPercent=r&&(!e&&i.xPercent||(Math.round(t.offsetWidth/2)===Math.round(-r)?-50:0)))?t.offsetWidth*i.xPercent/100:0)+B,i.y=n-((i.yPercent=n&&(!e&&i.yPercent||(Math.round(t.offsetHeight/2)===Math.round(-n)?-50:0)))?t.offsetHeight*i.yPercent/100:0)+B,i.z=s+B,i.scaleX=me(o),i.scaleY=me(a),i.rotation=me(l)+F,i.rotationX=me(c)+F,i.rotationY=me(d)+F,i.skewX=u+F,i.skewY=h+F,i.transformPerspective=p+B,(i.zOrigin=parseFloat(j.split(" ")[2])||!e&&i.zOrigin||0)&&(z[en]=Dn(j)),i.xOffset=i.yOffset=0,i.force3D=_t.force3D,i.renderTransform=i.svg?jn:Dr?Yn:zn,i.uncache=0,i},Dn=function(t){return(t=t.split(" "))[0]+" "+t[1]},In=function(t,e,i){var r=Ze(e);return me(parseFloat(e)+parseFloat(_n(t,"x",i+"px",r)))+r},zn=function(t,e){e.z="0px",e.rotationY=e.rotationX="0deg",e.force3D=0,Yn(t,e)},Rn="0deg",Bn="0px",Fn=") ",Yn=function(t,e){var i=e||this,r=i.xPercent,n=i.yPercent,s=i.x,o=i.y,a=i.z,l=i.rotation,c=i.rotationY,d=i.rotationX,u=i.skewX,h=i.skewY,p=i.scaleX,f=i.scaleY,m=i.transformPerspective,v=i.force3D,g=i.target,y=i.zOrigin,w="",_="auto"===v&&t&&1!==t||!0===v;if(y&&(d!==Rn||c!==Rn)){var b,x=parseFloat(c)*Rr,T=Math.sin(x),S=Math.cos(x);x=parseFloat(d)*Rr,b=Math.cos(x),s=In(g,s,T*b*-y),o=In(g,o,-Math.sin(x)*-y),a=In(g,a,S*b*-y+y)}m!==Bn&&(w+="perspective("+m+Fn),(r||n)&&(w+="translate("+r+"%, "+n+"%) "),(_||s!==Bn||o!==Bn||a!==Bn)&&(w+=a!==Bn||_?"translate3d("+s+", "+o+", "+a+") ":"translate("+s+", "+o+Fn),l!==Rn&&(w+="rotate("+l+Fn),c!==Rn&&(w+="rotateY("+c+Fn),d!==Rn&&(w+="rotateX("+d+Fn),u===Rn&&h===Rn||(w+="skew("+u+", "+h+Fn),1===p&&1===f||(w+="scale("+p+", "+f+Fn),g.style[tn]=w||"translate(0, 0)"},jn=function(t,e){var i,r,n,s,o,a=e||this,l=a.xPercent,c=a.yPercent,d=a.x,u=a.y,h=a.rotation,p=a.skewX,f=a.skewY,m=a.scaleX,v=a.scaleY,g=a.target,y=a.xOrigin,w=a.yOrigin,_=a.xOffset,b=a.yOffset,x=a.forceCSS,T=parseFloat(d),S=parseFloat(u);h=parseFloat(h),p=parseFloat(p),(f=parseFloat(f))&&(p+=f=parseFloat(f),h+=f),h||p?(h*=Rr,p*=Rr,i=Math.cos(h)*m,r=Math.sin(h)*m,n=Math.sin(h-p)*-v,s=Math.cos(h-p)*v,p&&(f*=Rr,o=Math.tan(p-f),n*=o=Math.sqrt(1+o*o),s*=o,f&&(o=Math.tan(f),i*=o=Math.sqrt(1+o*o),r*=o)),i=me(i),r=me(r),n=me(n),s=me(s)):(i=m,s=v,r=n=0),(T&&!~(d+"").indexOf("px")||S&&!~(u+"").indexOf("px"))&&(T=_n(g,"x",d,"px"),S=_n(g,"y",u,"px")),(y||w||_||b)&&(T=me(T+y-(y*i+w*n)+_),S=me(S+w-(y*r+w*s)+b)),(l||c)&&(o=g.getBBox(),T=me(T+l/100*o.width),S=me(S+c/100*o.height)),o="matrix("+i+","+r+","+n+","+s+","+T+","+S+")",g.setAttribute("transform",o),x&&(g.style[tn]=o)},Hn=function(t,e,i,r,n){var s,o,a=360,l=At(n),c=parseFloat(n)*(l&&~n.indexOf("rad")?zr:1)-r,d=r+c+"deg";return l&&("short"===(s=n.split("_")[1])&&(c%=a)!==c%180&&(c+=c<0?a:-360),"cw"===s&&c<0?c=(c+36e9)%a-~~(c/a)*a:"ccw"===s&&c>0&&(c=(c-36e9)%a-~~(c/a)*a)),t._pt=o=new hr(t._pt,e,i,r,c,Vr),o.e=d,o.u="deg",t._props.push(i),o},Wn=function(t,e){for(var i in e)t[i]=e[i];return t},Vn=function(t,e,i){var r,n,s,o,a,l,c,d=Wn({},i._gsap),u=i.style;for(n in d.svg?(s=i.getAttribute("transform"),i.setAttribute("transform",""),u[tn]=e,r=Ln(i,1),vn(i,tn),i.setAttribute("transform",s)):(s=getComputedStyle(i)[tn],u[tn]=e,r=Ln(i,1),u[tn]=s),Ir)(s=d[n])!==(o=r[n])&&"perspective,force3D,transformOrigin,svgOrigin".indexOf(n)<0&&(a=Ze(s)!==(c=Ze(o))?_n(i,n,s,c):parseFloat(s),l=parseFloat(o),t._pt=new hr(t._pt,r,n,a,l-a,Wr),t._pt.u=c||0,t._props.push(n));Wn(r,d)};fe("padding,margin,Width,Radius",(function(t,e){var i="Top",r="Right",n="Bottom",s="Left",o=(e<3?[i,r,n,s]:[i+s,i+r,n+r,n+s]).map((function(i){return e<2?t+i:"border"+i+t}));En[e>1?"border"+t:t]=function(t,e,i,r,n){var s,a;if(arguments.length<4)return s=o.map((function(e){return bn(t,e,i)})),5===(a=s.join(" ")).split(s[0]).length?s[0]:a;s=(r+"").split(" "),a={},o.forEach((function(t,e){return a[t]=s[e]=s[e]||s[(e-1)/2|0]})),t.init(e,a,n)}}));var Nn,Xn,Gn,qn={name:"css",register:un,targetTest:function(t){return t.style&&t.nodeType},init:function(t,e,i,r,n){var s,o,a,l,c,d,u,h,p,f,m,v,g,y,w,_,b,x,T,S,E=this._props,k=t.style,M=i.vars.startAt;for(u in Or||un(),this.styles=this.styles||on(t),_=this.styles.props,this.tween=i,e)if("autoRound"!==u&&(o=e[u],!oe[u]||!Gi(u,e,i,r,t,n)))if(c=typeof o,d=En[u],"function"===c&&(c=typeof(o=o.call(i,r,t,n))),"string"===c&&~o.indexOf("random(")&&(o=di(o)),d)d(this,t,u,o,i)&&(w=1);else if("--"===u.substr(0,2))s=(getComputedStyle(t).getPropertyValue(u)+"").trim(),o+="",Ti.lastIndex=0,Ti.test(s)||(h=Ze(s),p=Ze(o)),p?h!==p&&(s=_n(t,u,s,p)+p):h&&(o+=h),this.add(k,"setProperty",s,o,r,n,0,0,u),E.push(u),_.push(u,0,k[u]);else if("undefined"!==c){if(M&&u in M?(s="function"==typeof M[u]?M[u].call(i,r,t,n):M[u],At(s)&&~s.indexOf("random(")&&(s=di(s)),Ze(s+"")||"auto"===s||(s+=_t.units[u]||Ze(bn(t,u))||""),"="===(s+"").charAt(1)&&(s=bn(t,u))):s=bn(t,u),l=parseFloat(s),(f="string"===c&&"="===o.charAt(1)&&o.substr(0,2))&&(o=o.substr(2)),a=parseFloat(o),u in Hr&&("autoAlpha"===u&&(1===l&&"hidden"===bn(t,"visibility")&&a&&(l=0),_.push("visibility",0,k.visibility),gn(this,k,"visibility",l?"inherit":"hidden",a?"inherit":"hidden",!a)),"scale"!==u&&"transform"!==u&&~(u=Hr[u]).indexOf(",")&&(u=u.split(",")[0])),m=u in Ir)if(this.styles.save(u),v||((g=t._gsap).renderTransform&&!e.parseTransform||Ln(t,e.parseTransform),y=!1!==e.smoothOrigin&&g.smooth,(v=this._pt=new hr(this._pt,k,tn,0,1,g.renderTransform,g,0,-1)).dep=1),"scale"===u)this._pt=new hr(this._pt,g,"scaleY",g.scaleY,(f?ge(g.scaleY,f+a):a)-g.scaleY||0,Wr),this._pt.u=0,E.push("scaleY",u),u+="X";else{if("transformOrigin"===u){_.push(en,0,k[en]),x=void 0,T=void 0,S=void 0,x=(b=o).split(" "),T=x[0],S=x[1]||"50%","top"!==T&&"bottom"!==T&&"left"!==S&&"right"!==S||(b=T,T=S,S=b),x[0]=Tn[T]||T,x[1]=Tn[S]||S,o=x.join(" "),g.svg?Pn(t,o,0,y,0,this):((p=parseFloat(o.split(" ")[2])||0)!==g.zOrigin&&gn(this,g,"zOrigin",g.zOrigin,p),gn(this,k,u,Dn(s),Dn(o)));continue}if("svgOrigin"===u){Pn(t,o,1,y,0,this);continue}if(u in Mn){Hn(this,g,u,l,f?ge(l,f+o):o);continue}if("smoothOrigin"===u){gn(this,g,"smooth",g.smooth,o);continue}if("force3D"===u){g[u]=o;continue}if("transform"===u){Vn(this,o,t);continue}}else u in k||(u=dn(u)||u);if(m||(a||0===a)&&(l||0===l)&&!jr.test(o)&&u in k)a||(a=0),(h=(s+"").substr((l+"").length))!==(p=Ze(o)||(u in _t.units?_t.units[u]:h))&&(l=_n(t,u,s,p)),this._pt=new hr(this._pt,m?g:k,u,l,(f?ge(l,f+a):a)-l,m||"px"!==p&&"zIndex"!==u||!1===e.autoRound?Wr:Xr),this._pt.u=p||0,h!==p&&"%"!==p&&(this._pt.b=s,this._pt.r=Nr);else if(u in k)xn.call(this,t,u,s,f?f+o:o);else if(u in t)this.add(t,u,s||t[u],f?f+o:o,r,n);else if("parseTransform"!==u){Kt(u,o);continue}m||(u in k?_.push(u,0,k[u]):_.push(u,1,s||t[u])),E.push(u)}w&&ur(this)},render:function(t,e){if(e.tween._time||!Lr())for(var i=e._pt;i;)i.r(t,i.d),i=i._next;else e.styles.revert()},get:bn,aliases:Hr,getSetter:function(t,e,i){var r=Hr[e];return r&&r.indexOf(",")<0&&(e=r),e in Ir&&e!==en&&(t._gsap.x||bn(t,"x"))?i&&Pr===i?"scale"===e?Qr:Kr:(Pr=i||{})&&("scale"===e?Zr:Jr):t.style&&!Dt(t.style[e])?$r:~e.indexOf("-")?Ur:rr(t,e)},core:{_removeProperty:vn,_getMatrix:An}};Er.utils.checkPrefix=dn,Er.core.getStyleSaver=on,Gn=fe((Nn="x,y,z,scale,scaleX,scaleY,xPercent,yPercent")+","+(Xn="rotation,rotationX,rotationY,skewX,skewY")+",transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective",(function(t){Ir[t]=1})),fe(Xn,(function(t){_t.units[t]="deg",Mn[t]=1})),Hr[Gn[13]]=Nn+","+Xn,fe("0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY",(function(t){var e=t.split(":");Hr[e[1]]=Gn[e[0]]})),fe("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective",(function(t){_t.units[t]="px"})),Er.registerPlugin(qn);var $n=Er.registerPlugin(qn)||Er;$n.core.Tween;function Un(t,e){for(var i=0;i<e.length;i++){var r=e[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var Kn,Qn,Zn,Jn,ts,es,is,rs,ns,ss,os,as,ls,cs=function(){return Kn||"undefined"!=typeof window&&(Kn=window.gsap)&&Kn.registerPlugin&&Kn},ds=1,us=[],hs=[],ps=[],fs=Date.now,ms=function(t,e){return e},vs=function(t,e){return~ps.indexOf(t)&&ps[ps.indexOf(t)+1][e]},gs=function(t){return!!~ss.indexOf(t)},ys=function(t,e,i,r,n){return t.addEventListener(e,i,{passive:!1!==r,capture:!!n})},ws=function(t,e,i,r){return t.removeEventListener(e,i,!!r)},_s="scrollLeft",bs="scrollTop",xs=function(){return os&&os.isPressed||hs.cache++},Ts=function(t,e){var i=function i(r){if(r||0===r){ds&&(Zn.history.scrollRestoration="manual");var n=os&&os.isPressed;r=i.v=Math.round(r)||(os&&os.iOS?1:0),t(r),i.cacheID=hs.cache,n&&ms("ss",r)}else(e||hs.cache!==i.cacheID||ms("ref"))&&(i.cacheID=hs.cache,i.v=t());return i.v+i.offset};return i.offset=0,t&&i},Ss={s:_s,p:"left",p2:"Left",os:"right",os2:"Right",d:"width",d2:"Width",a:"x",sc:Ts((function(t){return arguments.length?Zn.scrollTo(t,Es.sc()):Zn.pageXOffset||Jn[_s]||ts[_s]||es[_s]||0}))},Es={s:bs,p:"top",p2:"Top",os:"bottom",os2:"Bottom",d:"height",d2:"Height",a:"y",op:Ss,sc:Ts((function(t){return arguments.length?Zn.scrollTo(Ss.sc(),t):Zn.pageYOffset||Jn[bs]||ts[bs]||es[bs]||0}))},ks=function(t,e){return(e&&e._ctx&&e._ctx.selector||Kn.utils.toArray)(t)[0]||("string"==typeof t&&!1!==Kn.config().nullTargetWarn?console.warn("Element not found:",t):null)},Ms=function(t,e){var i=e.s,r=e.sc;gs(t)&&(t=Jn.scrollingElement||ts);var n=hs.indexOf(t),s=r===Es.sc?1:2;!~n&&(n=hs.push(t)-1),hs[n+s]||ys(t,"scroll",xs);var o=hs[n+s],a=o||(hs[n+s]=Ts(vs(t,i),!0)||(gs(t)?r:Ts((function(e){return arguments.length?t[i]=e:t[i]}))));return a.target=t,o||(a.smooth="smooth"===Kn.getProperty(t,"scrollBehavior")),a},Cs=function(t,e,i){var r=t,n=t,s=fs(),o=s,a=e||50,l=Math.max(500,3*a),c=function(t,e){var l=fs();e||l-s>a?(n=r,r=t,o=s,s=l):i?r+=t:r=n+(t-n)/(l-o)*(s-o)};return{update:c,reset:function(){n=r=i?0:r,o=s=0},getVelocity:function(t){var e=o,a=n,d=fs();return(t||0===t)&&t!==r&&c(t),s===o||d-o>l?0:(r+(i?a:-a))/((i?d:s)-e)*1e3}}},Os=function(t,e){return e&&!t._gsapAllow&&t.preventDefault(),t.changedTouches?t.changedTouches[0]:t},As=function(t){var e=Math.max.apply(Math,t),i=Math.min.apply(Math,t);return Math.abs(e)>=Math.abs(i)?e:i},Ps=function(){var t,e,i,r;(ns=Kn.core.globals().ScrollTrigger)&&ns.core&&(t=ns.core,e=t.bridge||{},i=t._scrollers,r=t._proxies,i.push.apply(i,hs),r.push.apply(r,ps),hs=i,ps=r,ms=function(t,i){return e[t](i)})},Ls=function(t){return Kn=t||cs(),!Qn&&Kn&&"undefined"!=typeof document&&document.body&&(Zn=window,Jn=document,ts=Jn.documentElement,es=Jn.body,ss=[Zn,Jn,ts,es],Kn.utils.clamp,ls=Kn.core.context||function(){},rs="onpointerenter"in es?"pointer":"mouse",is=Ds.isTouch=Zn.matchMedia&&Zn.matchMedia("(hover: none), (pointer: coarse)").matches?1:"ontouchstart"in Zn||navigator.maxTouchPoints>0||navigator.msMaxTouchPoints>0?2:0,as=Ds.eventTypes=("ontouchstart"in ts?"touchstart,touchmove,touchcancel,touchend":"onpointerdown"in ts?"pointerdown,pointermove,pointercancel,pointerup":"mousedown,mousemove,mouseup,mouseup").split(","),setTimeout((function(){return ds=0}),500),Ps(),Qn=1),Qn};Ss.op=Es,hs.cache=0;var Ds=function(){function t(t){this.init(t)}var e,i,r;return t.prototype.init=function(t){Qn||Ls(Kn)||console.warn("Please gsap.registerPlugin(Observer)"),ns||Ps();var e=t.tolerance,i=t.dragMinimum,r=t.type,n=t.target,s=t.lineHeight,o=t.debounce,a=t.preventDefault,l=t.onStop,c=t.onStopDelay,d=t.ignore,u=t.wheelSpeed,h=t.event,p=t.onDragStart,f=t.onDragEnd,m=t.onDrag,v=t.onPress,g=t.onRelease,y=t.onRight,w=t.onLeft,_=t.onUp,b=t.onDown,x=t.onChangeX,T=t.onChangeY,S=t.onChange,E=t.onToggleX,k=t.onToggleY,M=t.onHover,C=t.onHoverEnd,O=t.onMove,A=t.ignoreCheck,P=t.isNormalizer,L=t.onGestureStart,D=t.onGestureEnd,I=t.onWheel,z=t.onEnable,R=t.onDisable,B=t.onClick,F=t.scrollSpeed,Y=t.capture,j=t.allowClicks,H=t.lockAxis,W=t.onLockAxis;this.target=n=ks(n)||ts,this.vars=t,d&&(d=Kn.utils.toArray(d)),e=e||1e-9,i=i||0,u=u||1,F=F||1,r=r||"wheel,touch,pointer",o=!1!==o,s||(s=parseFloat(Zn.getComputedStyle(es).lineHeight)||22);var V,N,X,G,q,$,U,K=this,Q=0,Z=0,J=t.passive||!a,tt=Ms(n,Ss),et=Ms(n,Es),it=tt(),rt=et(),nt=~r.indexOf("touch")&&!~r.indexOf("pointer")&&"pointerdown"===as[0],st=gs(n),ot=n.ownerDocument||Jn,at=[0,0,0],lt=[0,0,0],ct=0,dt=function(){return ct=fs()},ut=function(t,e){return(K.event=t)&&d&&~d.indexOf(t.target)||e&&nt&&"touch"!==t.pointerType||A&&A(t,e)},ht=function(){var t=K.deltaX=As(at),i=K.deltaY=As(lt),r=Math.abs(t)>=e,n=Math.abs(i)>=e;S&&(r||n)&&S(K,t,i,at,lt),r&&(y&&K.deltaX>0&&y(K),w&&K.deltaX<0&&w(K),x&&x(K),E&&K.deltaX<0!=Q<0&&E(K),Q=K.deltaX,at[0]=at[1]=at[2]=0),n&&(b&&K.deltaY>0&&b(K),_&&K.deltaY<0&&_(K),T&&T(K),k&&K.deltaY<0!=Z<0&&k(K),Z=K.deltaY,lt[0]=lt[1]=lt[2]=0),(G||X)&&(O&&O(K),X&&(m(K),X=!1),G=!1),$&&!($=!1)&&W&&W(K),q&&(I(K),q=!1),V=0},pt=function(t,e,i){at[i]+=t,lt[i]+=e,K._vx.update(t),K._vy.update(e),o?V||(V=requestAnimationFrame(ht)):ht()},ft=function(t,e){H&&!U&&(K.axis=U=Math.abs(t)>Math.abs(e)?"x":"y",$=!0),"y"!==U&&(at[2]+=t,K._vx.update(t,!0)),"x"!==U&&(lt[2]+=e,K._vy.update(e,!0)),o?V||(V=requestAnimationFrame(ht)):ht()},mt=function(t){if(!ut(t,1)){var e=(t=Os(t,a)).clientX,r=t.clientY,n=e-K.x,s=r-K.y,o=K.isDragging;K.x=e,K.y=r,(o||Math.abs(K.startX-e)>=i||Math.abs(K.startY-r)>=i)&&(m&&(X=!0),o||(K.isDragging=!0),ft(n,s),o||p&&p(K))}},vt=K.onPress=function(t){ut(t,1)||t&&t.button||(K.axis=U=null,N.pause(),K.isPressed=!0,t=Os(t),Q=Z=0,K.startX=K.x=t.clientX,K.startY=K.y=t.clientY,K._vx.reset(),K._vy.reset(),ys(P?n:ot,as[1],mt,J,!0),K.deltaX=K.deltaY=0,v&&v(K))},gt=K.onRelease=function(t){if(!ut(t,1)){ws(P?n:ot,as[1],mt,!0);var e=!isNaN(K.y-K.startY),i=K.isDragging,r=i&&(Math.abs(K.x-K.startX)>3||Math.abs(K.y-K.startY)>3),s=Os(t);!r&&e&&(K._vx.reset(),K._vy.reset(),a&&j&&Kn.delayedCall(.08,(function(){if(fs()-ct>300&&!t.defaultPrevented)if(t.target.click)t.target.click();else if(ot.createEvent){var e=ot.createEvent("MouseEvents");e.initMouseEvent("click",!0,!0,Zn,1,s.screenX,s.screenY,s.clientX,s.clientY,!1,!1,!1,!1,0,null),t.target.dispatchEvent(e)}}))),K.isDragging=K.isGesturing=K.isPressed=!1,l&&i&&!P&&N.restart(!0),f&&i&&f(K),g&&g(K,r)}},yt=function(t){return t.touches&&t.touches.length>1&&(K.isGesturing=!0)&&L(t,K.isDragging)},wt=function(){return(K.isGesturing=!1)||D(K)},_t=function(t){if(!ut(t)){var e=tt(),i=et();pt((e-it)*F,(i-rt)*F,1),it=e,rt=i,l&&N.restart(!0)}},bt=function(t){if(!ut(t)){t=Os(t,a),I&&(q=!0);var e=(1===t.deltaMode?s:2===t.deltaMode?Zn.innerHeight:1)*u;pt(t.deltaX*e,t.deltaY*e,0),l&&!P&&N.restart(!0)}},xt=function(t){if(!ut(t)){var e=t.clientX,i=t.clientY,r=e-K.x,n=i-K.y;K.x=e,K.y=i,G=!0,l&&N.restart(!0),(r||n)&&ft(r,n)}},Tt=function(t){K.event=t,M(K)},St=function(t){K.event=t,C(K)},Et=function(t){return ut(t)||Os(t,a)&&B(K)};N=K._dc=Kn.delayedCall(c||.25,(function(){K._vx.reset(),K._vy.reset(),N.pause(),l&&l(K)})).pause(),K.deltaX=K.deltaY=0,K._vx=Cs(0,50,!0),K._vy=Cs(0,50,!0),K.scrollX=tt,K.scrollY=et,K.isDragging=K.isGesturing=K.isPressed=!1,ls(this),K.enable=function(t){return K.isEnabled||(ys(st?ot:n,"scroll",xs),r.indexOf("scroll")>=0&&ys(st?ot:n,"scroll",_t,J,Y),r.indexOf("wheel")>=0&&ys(n,"wheel",bt,J,Y),(r.indexOf("touch")>=0&&is||r.indexOf("pointer")>=0)&&(ys(n,as[0],vt,J,Y),ys(ot,as[2],gt),ys(ot,as[3],gt),j&&ys(n,"click",dt,!0,!0),B&&ys(n,"click",Et),L&&ys(ot,"gesturestart",yt),D&&ys(ot,"gestureend",wt),M&&ys(n,rs+"enter",Tt),C&&ys(n,rs+"leave",St),O&&ys(n,rs+"move",xt)),K.isEnabled=!0,t&&t.type&&vt(t),z&&z(K)),K},K.disable=function(){K.isEnabled&&(us.filter((function(t){return t!==K&&gs(t.target)})).length||ws(st?ot:n,"scroll",xs),K.isPressed&&(K._vx.reset(),K._vy.reset(),ws(P?n:ot,as[1],mt,!0)),ws(st?ot:n,"scroll",_t,Y),ws(n,"wheel",bt,Y),ws(n,as[0],vt,Y),ws(ot,as[2],gt),ws(ot,as[3],gt),ws(n,"click",dt,!0),ws(n,"click",Et),ws(ot,"gesturestart",yt),ws(ot,"gestureend",wt),ws(n,rs+"enter",Tt),ws(n,rs+"leave",St),ws(n,rs+"move",xt),K.isEnabled=K.isPressed=K.isDragging=!1,R&&R(K))},K.kill=K.revert=function(){K.disable();var t=us.indexOf(K);t>=0&&us.splice(t,1),os===K&&(os=0)},us.push(K),P&&gs(n)&&(os=K),K.enable(h)},e=t,(i=[{key:"velocityX",get:function(){return this._vx.getVelocity()}},{key:"velocityY",get:function(){return this._vy.getVelocity()}}])&&Un(e.prototype,i),r&&Un(e,r),t}();Ds.version="3.12.5",Ds.create=function(t){return new Ds(t)},Ds.register=Ls,Ds.getAll=function(){return us.slice()},Ds.getById=function(t){return us.filter((function(e){return e.vars.id===t}))[0]},cs()&&Kn.registerPlugin(Ds);var Is,zs,Rs,Bs,Fs,Ys,js,Hs,Ws,Vs,Ns,Xs,Gs,qs,$s,Us,Ks,Qs,Zs,Js,to,eo,io,ro,no,so,oo,ao,lo,co,uo,ho,po,fo,mo,vo,go,yo,wo=1,_o=Date.now,bo=_o(),xo=0,To=0,So=function(t,e,i){var r=Fo(t)&&("clamp("===t.substr(0,6)||t.indexOf("max")>-1);return i["_"+e+"Clamp"]=r,r?t.substr(6,t.length-7):t},Eo=function(t,e){return!e||Fo(t)&&"clamp("===t.substr(0,6)?t:"clamp("+t+")"},ko=function t(){return To&&requestAnimationFrame(t)},Mo=function(){return qs=1},Co=function(){return qs=0},Oo=function(t){return t},Ao=function(t){return Math.round(1e5*t)/1e5||0},Po=function(){return"undefined"!=typeof window},Lo=function(){return Is||Po()&&(Is=window.gsap)&&Is.registerPlugin&&Is},Do=function(t){return!!~js.indexOf(t)},Io=function(t){return("Height"===t?uo:Rs["inner"+t])||Fs["client"+t]||Ys["client"+t]},zo=function(t){return vs(t,"getBoundingClientRect")||(Do(t)?function(){return $a.width=Rs.innerWidth,$a.height=uo,$a}:function(){return aa(t)})},Ro=function(t,e){var i=e.s,r=e.d2,n=e.d,s=e.a;return Math.max(0,(i="scroll"+r)&&(s=vs(t,i))?s()-zo(t)()[n]:Do(t)?(Fs[i]||Ys[i])-Io(r):t[i]-t["offset"+r])},Bo=function(t,e){for(var i=0;i<Zs.length;i+=3)(!e||~e.indexOf(Zs[i+1]))&&t(Zs[i],Zs[i+1],Zs[i+2])},Fo=function(t){return"string"==typeof t},Yo=function(t){return"function"==typeof t},jo=function(t){return"number"==typeof t},Ho=function(t){return"object"==typeof t},Wo=function(t,e,i){return t&&t.progress(e?0:1)&&i&&t.pause()},Vo=function(t,e){if(t.enabled){var i=t._ctx?t._ctx.add((function(){return e(t)})):e(t);i&&i.totalTime&&(t.callbackAnimation=i)}},No=Math.abs,Xo="left",Go="right",qo="bottom",$o="width",Uo="height",Ko="Right",Qo="Left",Zo="Top",Jo="Bottom",ta="padding",ea="margin",ia="Width",ra="Height",na="px",sa=function(t){return Rs.getComputedStyle(t)},oa=function(t,e){for(var i in e)i in t||(t[i]=e[i]);return t},aa=function(t,e){var i=e&&"matrix(1, 0, 0, 1, 0, 0)"!==sa(t)[$s]&&Is.to(t,{x:0,y:0,xPercent:0,yPercent:0,rotation:0,rotationX:0,rotationY:0,scale:1,skewX:0,skewY:0}).progress(1),r=t.getBoundingClientRect();return i&&i.progress(0).kill(),r},la=function(t,e){var i=e.d2;return t["offset"+i]||t["client"+i]||0},ca=function(t){var e,i=[],r=t.labels,n=t.duration();for(e in r)i.push(r[e]/n);return i},da=function(t){var e=Is.utils.snap(t),i=Array.isArray(t)&&t.slice(0).sort((function(t,e){return t-e}));return i?function(t,r,n){var s;if(void 0===n&&(n=.001),!r)return e(t);if(r>0){for(t-=n,s=0;s<i.length;s++)if(i[s]>=t)return i[s];return i[s-1]}for(s=i.length,t+=n;s--;)if(i[s]<=t)return i[s];return i[0]}:function(i,r,n){void 0===n&&(n=.001);var s=e(i);return!r||Math.abs(s-i)<n||s-i<0==r<0?s:e(r<0?i-t:i+t)}},ua=function(t,e,i,r){return i.split(",").forEach((function(i){return t(e,i,r)}))},ha=function(t,e,i,r,n){return t.addEventListener(e,i,{passive:!r,capture:!!n})},pa=function(t,e,i,r){return t.removeEventListener(e,i,!!r)},fa=function(t,e,i){(i=i&&i.wheelHandler)&&(t(e,"wheel",i),t(e,"touchmove",i))},ma={startColor:"green",endColor:"red",indent:0,fontSize:"16px",fontWeight:"normal"},va={toggleActions:"play",anticipatePin:0},ga={top:0,left:0,center:.5,bottom:1,right:1},ya=function(t,e){if(Fo(t)){var i=t.indexOf("="),r=~i?+(t.charAt(i-1)+1)*parseFloat(t.substr(i+1)):0;~i&&(t.indexOf("%")>i&&(r*=e/100),t=t.substr(0,i-1)),t=r+(t in ga?ga[t]*e:~t.indexOf("%")?parseFloat(t)*e/100:parseFloat(t)||0)}return t},wa=function(t,e,i,r,n,s,o,a){var l=n.startColor,c=n.endColor,d=n.fontSize,u=n.indent,h=n.fontWeight,p=Bs.createElement("div"),f=Do(i)||"fixed"===vs(i,"pinType"),m=-1!==t.indexOf("scroller"),v=f?Ys:i,g=-1!==t.indexOf("start"),y=g?l:c,w="border-color:"+y+";font-size:"+d+";color:"+y+";font-weight:"+h+";pointer-events:none;white-space:nowrap;font-family:sans-serif,Arial;z-index:1000;padding:4px 8px;border-width:0;border-style:solid;";return w+="position:"+((m||a)&&f?"fixed;":"absolute;"),(m||a||!f)&&(w+=(r===Es?Go:qo)+":"+(s+parseFloat(u))+"px;"),o&&(w+="box-sizing:border-box;text-align:left;width:"+o.offsetWidth+"px;"),p._isStart=g,p.setAttribute("class","gsap-marker-"+t+(e?" marker-"+e:"")),p.style.cssText=w,p.innerText=e||0===e?t+"-"+e:t,v.children[0]?v.insertBefore(p,v.children[0]):v.appendChild(p),p._offset=p["offset"+r.op.d2],_a(p,0,r,g),p},_a=function(t,e,i,r){var n={display:"block"},s=i[r?"os2":"p2"],o=i[r?"p2":"os2"];t._isFlipped=r,n[i.a+"Percent"]=r?-100:0,n[i.a]=r?"1px":0,n["border"+s+ia]=1,n["border"+o+ia]=0,n[i.p]=e+"px",Is.set(t,n)},ba=[],xa={},Ta=function(){return _o()-xo>34&&(mo||(mo=requestAnimationFrame(Ha)))},Sa=function(){(!io||!io.isPressed||io.startX>Ys.clientWidth)&&(hs.cache++,io?mo||(mo=requestAnimationFrame(Ha)):Ha(),xo||Aa("scrollStart"),xo=_o())},Ea=function(){so=Rs.innerWidth,no=Rs.innerHeight},ka=function(){hs.cache++,!Gs&&!eo&&!Bs.fullscreenElement&&!Bs.webkitFullscreenElement&&(!ro||so!==Rs.innerWidth||Math.abs(Rs.innerHeight-no)>.25*Rs.innerHeight)&&Hs.restart(!0)},Ma={},Ca=[],Oa=function t(){return pa(el,"scrollEnd",t)||Fa(!0)},Aa=function(t){return Ma[t]&&Ma[t].map((function(t){return t()}))||Ca},Pa=[],La=function(t){for(var e=0;e<Pa.length;e+=5)(!t||Pa[e+4]&&Pa[e+4].query===t)&&(Pa[e].style.cssText=Pa[e+1],Pa[e].getBBox&&Pa[e].setAttribute("transform",Pa[e+2]||""),Pa[e+3].uncache=1)},Da=function(t,e){var i;for(Us=0;Us<ba.length;Us++)!(i=ba[Us])||e&&i._ctx!==e||(t?i.kill(1):i.revert(!0,!0));ho=!0,e&&La(e),e||Aa("revert")},Ia=function(t,e){hs.cache++,(e||!vo)&&hs.forEach((function(t){return Yo(t)&&t.cacheID++&&(t.rec=0)})),Fo(t)&&(Rs.history.scrollRestoration=lo=t)},za=0,Ra=function(){Ys.appendChild(co),uo=!io&&co.offsetHeight||Rs.innerHeight,Ys.removeChild(co)},Ba=function(t){return Ws(".gsap-marker-start, .gsap-marker-end, .gsap-marker-scroller-start, .gsap-marker-scroller-end").forEach((function(e){return e.style.display=t?"none":"block"}))},Fa=function(t,e){if(!xo||t||ho){Ra(),vo=el.isRefreshing=!0,hs.forEach((function(t){return Yo(t)&&++t.cacheID&&(t.rec=t())}));var i=Aa("refreshInit");Js&&el.sort(),e||Da(),hs.forEach((function(t){Yo(t)&&(t.smooth&&(t.target.style.scrollBehavior="auto"),t(0))})),ba.slice(0).forEach((function(t){return t.refresh()})),ho=!1,ba.forEach((function(t){if(t._subPinOffset&&t.pin){var e=t.vars.horizontal?"offsetWidth":"offsetHeight",i=t.pin[e];t.revert(!0,1),t.adjustPinSpacing(t.pin[e]-i),t.refresh()}})),po=1,Ba(!0),ba.forEach((function(t){var e=Ro(t.scroller,t._dir),i="max"===t.vars.end||t._endClamp&&t.end>e,r=t._startClamp&&t.start>=e;(i||r)&&t.setPositions(r?e-1:t.start,i?Math.max(r?e:t.start+1,e):t.end,!0)})),Ba(!1),po=0,i.forEach((function(t){return t&&t.render&&t.render(-1)})),hs.forEach((function(t){Yo(t)&&(t.smooth&&requestAnimationFrame((function(){return t.target.style.scrollBehavior="smooth"})),t.rec&&t(t.rec))})),Ia(lo,1),Hs.pause(),za++,vo=2,Ha(2),ba.forEach((function(t){return Yo(t.vars.onRefresh)&&t.vars.onRefresh(t)})),vo=el.isRefreshing=!1,Aa("refresh")}else ha(el,"scrollEnd",Oa)},Ya=0,ja=1,Ha=function(t){if(2===t||!vo&&!ho){el.isUpdating=!0,yo&&yo.update(0);var e=ba.length,i=_o(),r=i-bo>=50,n=e&&ba[0].scroll();if(ja=Ya>n?-1:1,vo||(Ya=n),r&&(xo&&!qs&&i-xo>200&&(xo=0,Aa("scrollEnd")),Ns=bo,bo=i),ja<0){for(Us=e;Us-- >0;)ba[Us]&&ba[Us].update(0,r);ja=1}else for(Us=0;Us<e;Us++)ba[Us]&&ba[Us].update(0,r);el.isUpdating=!1}mo=0},Wa=[Xo,"top",qo,Go,ea+Jo,ea+Ko,ea+Zo,ea+Qo,"display","flexShrink","float","zIndex","gridColumnStart","gridColumnEnd","gridRowStart","gridRowEnd","gridArea","justifySelf","alignSelf","placeSelf","order"],Va=Wa.concat([$o,Uo,"boxSizing","max"+ia,"max"+ra,"position",ea,ta,ta+Zo,ta+Ko,ta+Jo,ta+Qo]),Na=function(t,e,i,r){if(!t._gsap.swappedIn){for(var n,s=Wa.length,o=e.style,a=t.style;s--;)o[n=Wa[s]]=i[n];o.position="absolute"===i.position?"absolute":"relative","inline"===i.display&&(o.display="inline-block"),a[qo]=a[Go]="auto",o.flexBasis=i.flexBasis||"auto",o.overflow="visible",o.boxSizing="border-box",o[$o]=la(t,Ss)+na,o[Uo]=la(t,Es)+na,o[ta]=a[ea]=a.top=a[Xo]="0",Ga(r),a[$o]=a["max"+ia]=i[$o],a[Uo]=a["max"+ra]=i[Uo],a[ta]=i[ta],t.parentNode!==e&&(t.parentNode.insertBefore(e,t),e.appendChild(t)),t._gsap.swappedIn=!0}},Xa=/([A-Z])/g,Ga=function(t){if(t){var e,i,r=t.t.style,n=t.length,s=0;for((t.t._gsap||Is.core.getCache(t.t)).uncache=1;s<n;s+=2)i=t[s+1],e=t[s],i?r[e]=i:r[e]&&r.removeProperty(e.replace(Xa,"-$1").toLowerCase())}},qa=function(t){for(var e=Va.length,i=t.style,r=[],n=0;n<e;n++)r.push(Va[n],i[Va[n]]);return r.t=t,r},$a={left:0,top:0},Ua=function(t,e,i,r,n,s,o,a,l,c,d,u,h,p){Yo(t)&&(t=t(a)),Fo(t)&&"max"===t.substr(0,3)&&(t=u+("="===t.charAt(4)?ya("0"+t.substr(3),i):0));var f,m,v,g=h?h.time():0;if(h&&h.seek(0),isNaN(t)||(t=+t),jo(t))h&&(t=Is.utils.mapRange(h.scrollTrigger.start,h.scrollTrigger.end,0,u,t)),o&&_a(o,i,r,!0);else{Yo(e)&&(e=e(a));var y,w,_,b,x=(t||"0").split(" ");v=ks(e,a)||Ys,(y=aa(v)||{})&&(y.left||y.top)||"none"!==sa(v).display||(b=v.style.display,v.style.display="block",y=aa(v),b?v.style.display=b:v.style.removeProperty("display")),w=ya(x[0],y[r.d]),_=ya(x[1]||"0",i),t=y[r.p]-l[r.p]-c+w+n-_,o&&_a(o,_,r,i-_<20||o._isStart&&_>20),i-=i-_}if(p&&(a[p]=t||-.001,t<0&&(t=0)),s){var T=t+i,S=s._isStart;f="scroll"+r.d2,_a(s,T,r,S&&T>20||!S&&(d?Math.max(Ys[f],Fs[f]):s.parentNode[f])<=T+1),d&&(l=aa(o),d&&(s.style[r.op.p]=l[r.op.p]-r.op.m-s._offset+na))}return h&&v&&(f=aa(v),h.seek(u),m=aa(v),h._caScrollDist=f[r.p]-m[r.p],t=t/h._caScrollDist*u),h&&h.seek(g),h?t:Math.round(t)},Ka=/(webkit|moz|length|cssText|inset)/i,Qa=function(t,e,i,r){if(t.parentNode!==e){var n,s,o=t.style;if(e===Ys){for(n in t._stOrig=o.cssText,s=sa(t))+n||Ka.test(n)||!s[n]||"string"!=typeof o[n]||"0"===n||(o[n]=s[n]);o.top=i,o.left=r}else o.cssText=t._stOrig;Is.core.getCache(t).uncache=1,e.appendChild(t)}},Za=function(t,e,i){var r=e,n=r;return function(e){var s=Math.round(t());return s!==r&&s!==n&&Math.abs(s-r)>3&&Math.abs(s-n)>3&&(e=s,i&&i()),n=r,r=e,e}},Ja=function(t,e,i){var r={};r[e.p]="+="+i,Is.set(t,r)},tl=function(t,e){var i=Ms(t,e),r="_scroll"+e.p2,n=function e(n,s,o,a,l){var c=e.tween,d=s.onComplete,u={};o=o||i();var h=Za(i,o,(function(){c.kill(),e.tween=0}));return l=a&&l||0,a=a||n-o,c&&c.kill(),s[r]=n,s.inherit=!1,s.modifiers=u,u[r]=function(){return h(o+a*c.ratio+l*c.ratio*c.ratio)},s.onUpdate=function(){hs.cache++,e.tween&&Ha()},s.onComplete=function(){e.tween=0,d&&d.call(c)},c=e.tween=Is.to(t,s)};return t[r]=i,i.wheelHandler=function(){return n.tween&&n.tween.kill()&&(n.tween=0)},ha(t,"wheel",i.wheelHandler),el.isTouch&&ha(t,"touchmove",i.wheelHandler),n},el=function(){function t(e,i){zs||t.register(Is)||console.warn("Please gsap.registerPlugin(ScrollTrigger)"),ao(this),this.init(e,i)}return t.prototype.init=function(e,i){if(this.progress=this.start=0,this.vars&&this.kill(!0,!0),To){var r,n,s,o,a,l,c,d,u,h,p,f,m,v,g,y,w,_,b,x,T,S,E,k,M,C,O,A,P,L,D,I,z,R,B,F,Y,j,H,W,V,N,X=e=oa(Fo(e)||jo(e)||e.nodeType?{trigger:e}:e,va),G=X.onUpdate,q=X.toggleClass,$=X.id,U=X.onToggle,K=X.onRefresh,Q=X.scrub,Z=X.trigger,J=X.pin,tt=X.pinSpacing,et=X.invalidateOnRefresh,it=X.anticipatePin,rt=X.onScrubComplete,nt=X.onSnapComplete,st=X.once,ot=X.snap,at=X.pinReparent,lt=X.pinSpacer,ct=X.containerAnimation,dt=X.fastScrollEnd,ut=X.preventOverlaps,ht=e.horizontal||e.containerAnimation&&!1!==e.horizontal?Ss:Es,pt=!Q&&0!==Q,ft=ks(e.scroller||Rs),mt=Is.core.getCache(ft),vt=Do(ft),gt="fixed"===("pinType"in e?e.pinType:vs(ft,"pinType")||vt&&"fixed"),yt=[e.onEnter,e.onLeave,e.onEnterBack,e.onLeaveBack],wt=pt&&e.toggleActions.split(" "),_t="markers"in e?e.markers:va.markers,bt=vt?0:parseFloat(sa(ft)["border"+ht.p2+ia])||0,xt=this,Tt=e.onRefreshInit&&function(){return e.onRefreshInit(xt)},St=function(t,e,i){var r=i.d,n=i.d2,s=i.a;return(s=vs(t,"getBoundingClientRect"))?function(){return s()[r]}:function(){return(e?Io(n):t["client"+n])||0}}(ft,vt,ht),Et=function(t,e){return!e||~ps.indexOf(t)?zo(t):function(){return $a}}(ft,vt),kt=0,Mt=0,Ct=0,Ot=Ms(ft,ht);if(xt._startClamp=xt._endClamp=!1,xt._dir=ht,it*=45,xt.scroller=ft,xt.scroll=ct?ct.time.bind(ct):Ot,o=Ot(),xt.vars=e,i=i||e.animation,"refreshPriority"in e&&(Js=1,-9999===e.refreshPriority&&(yo=xt)),mt.tweenScroll=mt.tweenScroll||{top:tl(ft,Es),left:tl(ft,Ss)},xt.tweenTo=r=mt.tweenScroll[ht.p],xt.scrubDuration=function(t){(z=jo(t)&&t)?I?I.duration(t):I=Is.to(i,{ease:"expo",totalProgress:"+=0",inherit:!1,duration:z,paused:!0,onComplete:function(){return rt&&rt(xt)}}):(I&&I.progress(1).kill(),I=0)},i&&(i.vars.lazy=!1,i._initted&&!xt.isReverted||!1!==i.vars.immediateRender&&!1!==e.immediateRender&&i.duration()&&i.render(0,!0,!0),xt.animation=i.pause(),i.scrollTrigger=xt,xt.scrubDuration(Q),L=0,$||($=i.vars.id)),ot&&(Ho(ot)&&!ot.push||(ot={snapTo:ot}),"scrollBehavior"in Ys.style&&Is.set(vt?[Ys,Fs]:ft,{scrollBehavior:"auto"}),hs.forEach((function(t){return Yo(t)&&t.target===(vt?Bs.scrollingElement||Fs:ft)&&(t.smooth=!1)})),s=Yo(ot.snapTo)?ot.snapTo:"labels"===ot.snapTo?function(t){return function(e){return Is.utils.snap(ca(t),e)}}(i):"labelsDirectional"===ot.snapTo?(W=i,function(t,e){return da(ca(W))(t,e.direction)}):!1!==ot.directional?function(t,e){return da(ot.snapTo)(t,_o()-Mt<500?0:e.direction)}:Is.utils.snap(ot.snapTo),R=ot.duration||{min:.1,max:2},R=Ho(R)?Vs(R.min,R.max):Vs(R,R),B=Is.delayedCall(ot.delay||z/2||.1,(function(){var t=Ot(),e=_o()-Mt<500,n=r.tween;if(!(e||Math.abs(xt.getVelocity())<10)||n||qs||kt===t)xt.isActive&&kt!==t&&B.restart(!0);else{var o,a,d=(t-l)/v,u=i&&!pt?i.totalProgress():d,h=e?0:(u-D)/(_o()-Ns)*1e3||0,p=Is.utils.clamp(-d,1-d,No(h/2)*h/.185),f=d+(!1===ot.inertia?0:p),m=ot,g=m.onStart,y=m.onInterrupt,w=m.onComplete;if(o=s(f,xt),jo(o)||(o=f),a=Math.round(l+o*v),t<=c&&t>=l&&a!==t){if(n&&!n._initted&&n.data<=No(a-t))return;!1===ot.inertia&&(p=o-d),r(a,{duration:R(No(.185*Math.max(No(f-u),No(o-u))/h/.05||0)),ease:ot.ease||"power3",data:No(a-t),onInterrupt:function(){return B.restart(!0)&&y&&y(xt)},onComplete:function(){xt.update(),kt=Ot(),i&&(I?I.resetTo("totalProgress",o,i._tTime/i._tDur):i.progress(o)),L=D=i&&!pt?i.totalProgress():xt.progress,nt&&nt(xt),w&&w(xt)}},t,p*v,a-t-p*v),g&&g(xt,r.tween)}}})).pause()),$&&(xa[$]=xt),(H=(Z=xt.trigger=ks(Z||!0!==J&&J))&&Z._gsap&&Z._gsap.stRevert)&&(H=H(xt)),J=!0===J?Z:ks(J),Fo(q)&&(q={targets:Z,className:q}),J&&(!1===tt||tt===ea||(tt=!(!tt&&J.parentNode&&J.parentNode.style&&"flex"===sa(J.parentNode).display)&&ta),xt.pin=J,(n=Is.core.getCache(J)).spacer?g=n.pinState:(lt&&((lt=ks(lt))&&!lt.nodeType&&(lt=lt.current||lt.nativeElement),n.spacerIsNative=!!lt,lt&&(n.spacerState=qa(lt))),n.spacer=_=lt||Bs.createElement("div"),_.classList.add("pin-spacer"),$&&_.classList.add("pin-spacer-"+$),n.pinState=g=qa(J)),!1!==e.force3D&&Is.set(J,{force3D:!0}),xt.spacer=_=n.spacer,P=sa(J),k=P[tt+ht.os2],x=Is.getProperty(J),T=Is.quickSetter(J,ht.a,na),Na(J,_,P),w=qa(J)),_t){f=Ho(_t)?oa(_t,ma):ma,h=wa("scroller-start",$,ft,ht,f,0),p=wa("scroller-end",$,ft,ht,f,0,h),b=h["offset"+ht.op.d2];var At=ks(vs(ft,"content")||ft);d=this.markerStart=wa("start",$,At,ht,f,b,0,ct),u=this.markerEnd=wa("end",$,At,ht,f,b,0,ct),ct&&(j=Is.quickSetter([d,u],ht.a,na)),gt||ps.length&&!0===vs(ft,"fixedMarkers")||(N=sa(V=vt?Ys:ft).position,V.style.position="absolute"===N||"fixed"===N?N:"relative",Is.set([h,p],{force3D:!0}),C=Is.quickSetter(h,ht.a,na),A=Is.quickSetter(p,ht.a,na))}if(ct){var Pt=ct.vars.onUpdate,Lt=ct.vars.onUpdateParams;ct.eventCallback("onUpdate",(function(){xt.update(0,0,1),Pt&&Pt.apply(ct,Lt||[])}))}if(xt.previous=function(){return ba[ba.indexOf(xt)-1]},xt.next=function(){return ba[ba.indexOf(xt)+1]},xt.revert=function(t,e){if(!e)return xt.kill(!0);var r=!1!==t||!xt.enabled,n=Gs;r!==xt.isReverted&&(r&&(F=Math.max(Ot(),xt.scroll.rec||0),Ct=xt.progress,Y=i&&i.progress()),d&&[d,u,h,p].forEach((function(t){return t.style.display=r?"none":"block"})),r&&(Gs=xt,xt.update(r)),!J||at&&xt.isActive||(r?function(t,e,i){Ga(i);var r=t._gsap;if(r.spacerIsNative)Ga(r.spacerState);else if(t._gsap.swappedIn){var n=e.parentNode;n&&(n.insertBefore(t,e),n.removeChild(e))}t._gsap.swappedIn=!1}(J,_,g):Na(J,_,sa(J),M)),r||xt.update(r),Gs=n,xt.isReverted=r)},xt.refresh=function(n,s,f,b){if(!Gs&&xt.enabled||s)if(J&&n&&xo)ha(t,"scrollEnd",Oa);else{!vo&&Tt&&Tt(xt),Gs=xt,r.tween&&!f&&(r.tween.kill(),r.tween=0),I&&I.pause(),et&&i&&i.revert({kill:!1}).invalidate(),xt.isReverted||xt.revert(!0,!0),xt._subPinOffset=!1;var T,k,C,A,P,L,D,z,R,j,H,W,V,N=St(),X=Et(),G=ct?ct.duration():Ro(ft,ht),q=v<=.01,$=0,U=b||0,Q=Ho(f)?f.end:e.end,it=e.endTrigger||Z,rt=Ho(f)?f.start:e.start||(0!==e.start&&Z?J?"0 0":"0 100%":0),nt=xt.pinnedContainer=e.pinnedContainer&&ks(e.pinnedContainer,xt),st=Z&&Math.max(0,ba.indexOf(xt))||0,ot=st;for(_t&&Ho(f)&&(W=Is.getProperty(h,ht.p),V=Is.getProperty(p,ht.p));ot--;)(L=ba[ot]).end||L.refresh(0,1)||(Gs=xt),!(D=L.pin)||D!==Z&&D!==J&&D!==nt||L.isReverted||(j||(j=[]),j.unshift(L),L.revert(!0,!0)),L!==ba[ot]&&(st--,ot--);for(Yo(rt)&&(rt=rt(xt)),rt=So(rt,"start",xt),l=Ua(rt,Z,N,ht,Ot(),d,h,xt,X,bt,gt,G,ct,xt._startClamp&&"_startClamp")||(J?-.001:0),Yo(Q)&&(Q=Q(xt)),Fo(Q)&&!Q.indexOf("+=")&&(~Q.indexOf(" ")?Q=(Fo(rt)?rt.split(" ")[0]:"")+Q:($=ya(Q.substr(2),N),Q=Fo(rt)?rt:(ct?Is.utils.mapRange(0,ct.duration(),ct.scrollTrigger.start,ct.scrollTrigger.end,l):l)+$,it=Z)),Q=So(Q,"end",xt),c=Math.max(l,Ua(Q||(it?"100% 0":G),it,N,ht,Ot()+$,u,p,xt,X,bt,gt,G,ct,xt._endClamp&&"_endClamp"))||-.001,$=0,ot=st;ot--;)(D=(L=ba[ot]).pin)&&L.start-L._pinPush<=l&&!ct&&L.end>0&&(T=L.end-(xt._startClamp?Math.max(0,L.start):L.start),(D===Z&&L.start-L._pinPush<l||D===nt)&&isNaN(rt)&&($+=T*(1-L.progress)),D===J&&(U+=T));if(l+=$,c+=$,xt._startClamp&&(xt._startClamp+=$),xt._endClamp&&!vo&&(xt._endClamp=c||-.001,c=Math.min(c,Ro(ft,ht))),v=c-l||(l-=.01)&&.001,q&&(Ct=Is.utils.clamp(0,1,Is.utils.normalize(l,c,F))),xt._pinPush=U,d&&$&&((T={})[ht.a]="+="+$,nt&&(T[ht.p]="-="+Ot()),Is.set([d,u],T)),!J||po&&xt.end>=Ro(ft,ht)){if(Z&&Ot()&&!ct)for(k=Z.parentNode;k&&k!==Ys;)k._pinOffset&&(l-=k._pinOffset,c-=k._pinOffset),k=k.parentNode}else T=sa(J),A=ht===Es,C=Ot(),S=parseFloat(x(ht.a))+U,!G&&c>1&&(H={style:H=(vt?Bs.scrollingElement||Fs:ft).style,value:H["overflow"+ht.a.toUpperCase()]},vt&&"scroll"!==sa(Ys)["overflow"+ht.a.toUpperCase()]&&(H.style["overflow"+ht.a.toUpperCase()]="scroll")),Na(J,_,T),w=qa(J),k=aa(J,!0),z=gt&&Ms(ft,A?Ss:Es)(),tt?((M=[tt+ht.os2,v+U+na]).t=_,(ot=tt===ta?la(J,ht)+v+U:0)&&(M.push(ht.d,ot+na),"auto"!==_.style.flexBasis&&(_.style.flexBasis=ot+na)),Ga(M),nt&&ba.forEach((function(t){t.pin===nt&&!1!==t.vars.pinSpacing&&(t._subPinOffset=!0)})),gt&&Ot(F)):(ot=la(J,ht))&&"auto"!==_.style.flexBasis&&(_.style.flexBasis=ot+na),gt&&((P={top:k.top+(A?C-l:z)+na,left:k.left+(A?z:C-l)+na,boxSizing:"border-box",position:"fixed"})[$o]=P["max"+ia]=Math.ceil(k.width)+na,P[Uo]=P["max"+ra]=Math.ceil(k.height)+na,P[ea]=P[ea+Zo]=P[ea+Ko]=P[ea+Jo]=P[ea+Qo]="0",P[ta]=T[ta],P[ta+Zo]=T[ta+Zo],P[ta+Ko]=T[ta+Ko],P[ta+Jo]=T[ta+Jo],P[ta+Qo]=T[ta+Qo],y=function(t,e,i){for(var r,n=[],s=t.length,o=i?8:0;o<s;o+=2)r=t[o],n.push(r,r in e?e[r]:t[o+1]);return n.t=t.t,n}(g,P,at),vo&&Ot(0)),i?(R=i._initted,to(1),i.render(i.duration(),!0,!0),E=x(ht.a)-S+v+U,O=Math.abs(v-E)>1,gt&&O&&y.splice(y.length-2,2),i.render(0,!0,!0),R||i.invalidate(!0),i.parent||i.totalTime(i.totalTime()),to(0)):E=v,H&&(H.value?H.style["overflow"+ht.a.toUpperCase()]=H.value:H.style.removeProperty("overflow-"+ht.a));j&&j.forEach((function(t){return t.revert(!1,!0)})),xt.start=l,xt.end=c,o=a=vo?F:Ot(),ct||vo||(o<F&&Ot(F),xt.scroll.rec=0),xt.revert(!1,!0),Mt=_o(),B&&(kt=-1,B.restart(!0)),Gs=0,i&&pt&&(i._initted||Y)&&i.progress()!==Y&&i.progress(Y||0,!0).render(i.time(),!0,!0),(q||Ct!==xt.progress||ct||et)&&(i&&!pt&&i.totalProgress(ct&&l<-.001&&!Ct?Is.utils.normalize(l,c,0):Ct,!0),xt.progress=q||(o-l)/v===Ct?0:Ct),J&&tt&&(_._pinOffset=Math.round(xt.progress*E)),I&&I.invalidate(),isNaN(W)||(W-=Is.getProperty(h,ht.p),V-=Is.getProperty(p,ht.p),Ja(h,ht,W),Ja(d,ht,W-(b||0)),Ja(p,ht,V),Ja(u,ht,V-(b||0))),q&&!vo&&xt.update(),!K||vo||m||(m=!0,K(xt),m=!1)}},xt.getVelocity=function(){return(Ot()-a)/(_o()-Ns)*1e3||0},xt.endAnimation=function(){Wo(xt.callbackAnimation),i&&(I?I.progress(1):i.paused()?pt||Wo(i,xt.direction<0,1):Wo(i,i.reversed()))},xt.labelToScroll=function(t){return i&&i.labels&&(l||xt.refresh()||l)+i.labels[t]/i.duration()*v||0},xt.getTrailing=function(t){var e=ba.indexOf(xt),i=xt.direction>0?ba.slice(0,e).reverse():ba.slice(e+1);return(Fo(t)?i.filter((function(e){return e.vars.preventOverlaps===t})):i).filter((function(t){return xt.direction>0?t.end<=l:t.start>=c}))},xt.update=function(t,e,n){if(!ct||n||t){var s,d,u,p,f,m,g,b=!0===vo?F:xt.scroll(),x=t?0:(b-l)/v,M=x<0?0:x>1?1:x||0,P=xt.progress;if(e&&(a=o,o=ct?Ot():b,ot&&(D=L,L=i&&!pt?i.totalProgress():M)),it&&J&&!Gs&&!wo&&xo&&(!M&&l<b+(b-a)/(_o()-Ns)*it?M=1e-4:1===M&&c>b+(b-a)/(_o()-Ns)*it&&(M=.9999)),M!==P&&xt.enabled){if(p=(f=(s=xt.isActive=!!M&&M<1)!==(!!P&&P<1))||!!M!=!!P,xt.direction=M>P?1:-1,xt.progress=M,p&&!Gs&&(d=M&&!P?0:1===M?1:1===P?2:3,pt&&(u=!f&&"none"!==wt[d+1]&&wt[d+1]||wt[d],g=i&&("complete"===u||"reset"===u||u in i))),ut&&(f||g)&&(g||Q||!i)&&(Yo(ut)?ut(xt):xt.getTrailing(ut).forEach((function(t){return t.endAnimation()}))),pt||(!I||Gs||wo?i&&i.totalProgress(M,!(!Gs||!Mt&&!t)):(I._dp._time-I._start!==I._time&&I.render(I._dp._time-I._start),I.resetTo?I.resetTo("totalProgress",M,i._tTime/i._tDur):(I.vars.totalProgress=M,I.invalidate().restart()))),J)if(t&&tt&&(_.style[tt+ht.os2]=k),gt){if(p){if(m=!t&&M>P&&c+1>b&&b+1>=Ro(ft,ht),at)if(t||!s&&!m)Qa(J,_);else{var z=aa(J,!0),R=b-l;Qa(J,Ys,z.top+(ht===Es?R:0)+na,z.left+(ht===Es?0:R)+na)}Ga(s||m?y:w),O&&M<1&&s||T(S+(1!==M||m?0:E))}}else T(Ao(S+E*M));ot&&!r.tween&&!Gs&&!wo&&B.restart(!0),q&&(f||st&&M&&(M<1||!fo))&&Ws(q.targets).forEach((function(t){return t.classList[s||st?"add":"remove"](q.className)})),G&&!pt&&!t&&G(xt),p&&!Gs?(pt&&(g&&("complete"===u?i.pause().totalProgress(1):"reset"===u?i.restart(!0).pause():"restart"===u?i.restart(!0):i[u]()),G&&G(xt)),!f&&fo||(U&&f&&Vo(xt,U),yt[d]&&Vo(xt,yt[d]),st&&(1===M?xt.kill(!1,1):yt[d]=0),f||yt[d=1===M?1:3]&&Vo(xt,yt[d])),dt&&!s&&Math.abs(xt.getVelocity())>(jo(dt)?dt:2500)&&(Wo(xt.callbackAnimation),I?I.progress(1):Wo(i,"reverse"===u?1:!M,1))):pt&&G&&!Gs&&G(xt)}if(A){var Y=ct?b/ct.duration()*(ct._caScrollDist||0):b;C(Y+(h._isFlipped?1:0)),A(Y)}j&&j(-b/ct.duration()*(ct._caScrollDist||0))}},xt.enable=function(e,i){xt.enabled||(xt.enabled=!0,ha(ft,"resize",ka),vt||ha(ft,"scroll",Sa),Tt&&ha(t,"refreshInit",Tt),!1!==e&&(xt.progress=Ct=0,o=a=kt=Ot()),!1!==i&&xt.refresh())},xt.getTween=function(t){return t&&r?r.tween:I},xt.setPositions=function(t,e,i,r){if(ct){var n=ct.scrollTrigger,s=ct.duration(),o=n.end-n.start;t=n.start+o*t/s,e=n.start+o*e/s}xt.refresh(!1,!1,{start:Eo(t,i&&!!xt._startClamp),end:Eo(e,i&&!!xt._endClamp)},r),xt.update()},xt.adjustPinSpacing=function(t){if(M&&t){var e=M.indexOf(ht.d)+1;M[e]=parseFloat(M[e])+t+na,M[1]=parseFloat(M[1])+t+na,Ga(M)}},xt.disable=function(e,i){if(xt.enabled&&(!1!==e&&xt.revert(!0,!0),xt.enabled=xt.isActive=!1,i||I&&I.pause(),F=0,n&&(n.uncache=1),Tt&&pa(t,"refreshInit",Tt),B&&(B.pause(),r.tween&&r.tween.kill()&&(r.tween=0)),!vt)){for(var s=ba.length;s--;)if(ba[s].scroller===ft&&ba[s]!==xt)return;pa(ft,"resize",ka),vt||pa(ft,"scroll",Sa)}},xt.kill=function(t,r){xt.disable(t,r),I&&!r&&I.kill(),$&&delete xa[$];var s=ba.indexOf(xt);s>=0&&ba.splice(s,1),s===Us&&ja>0&&Us--,s=0,ba.forEach((function(t){return t.scroller===xt.scroller&&(s=1)})),s||vo||(xt.scroll.rec=0),i&&(i.scrollTrigger=null,t&&i.revert({kill:!1}),r||i.kill()),d&&[d,u,h,p].forEach((function(t){return t.parentNode&&t.parentNode.removeChild(t)})),yo===xt&&(yo=0),J&&(n&&(n.uncache=1),s=0,ba.forEach((function(t){return t.pin===J&&s++})),s||(n.spacer=0)),e.onKill&&e.onKill(xt)},ba.push(xt),xt.enable(!1,!1),H&&H(xt),i&&i.add&&!v){var Dt=xt.update;xt.update=function(){xt.update=Dt,l||c||xt.refresh()},Is.delayedCall(.01,xt.update),v=.01,l=c=0}else xt.refresh();J&&function(){if(go!==za){var t=go=za;requestAnimationFrame((function(){return t===za&&Fa(!0)}))}}()}else this.update=this.refresh=this.kill=Oo},t.register=function(e){return zs||(Is=e||Lo(),Po()&&window.document&&t.enable(),zs=To),zs},t.defaults=function(t){if(t)for(var e in t)va[e]=t[e];return va},t.disable=function(t,e){To=0,ba.forEach((function(i){return i[e?"kill":"disable"](t)})),pa(Rs,"wheel",Sa),pa(Bs,"scroll",Sa),clearInterval(Xs),pa(Bs,"touchcancel",Oo),pa(Ys,"touchstart",Oo),ua(pa,Bs,"pointerdown,touchstart,mousedown",Mo),ua(pa,Bs,"pointerup,touchend,mouseup",Co),Hs.kill(),Bo(pa);for(var i=0;i<hs.length;i+=3)fa(pa,hs[i],hs[i+1]),fa(pa,hs[i],hs[i+2])},t.enable=function(){if(Rs=window,Bs=document,Fs=Bs.documentElement,Ys=Bs.body,Is&&(Ws=Is.utils.toArray,Vs=Is.utils.clamp,ao=Is.core.context||Oo,to=Is.core.suppressOverwrites||Oo,lo=Rs.history.scrollRestoration||"auto",Ya=Rs.pageYOffset,Is.core.globals("ScrollTrigger",t),Ys)){To=1,(co=document.createElement("div")).style.height="100vh",co.style.position="absolute",Ra(),ko(),Ds.register(Is),t.isTouch=Ds.isTouch,oo=Ds.isTouch&&/(iPad|iPhone|iPod|Mac)/g.test(navigator.userAgent),ro=1===Ds.isTouch,ha(Rs,"wheel",Sa),js=[Rs,Bs,Fs,Ys],Is.matchMedia?(t.matchMedia=function(t){var e,i=Is.matchMedia();for(e in t)i.add(e,t[e]);return i},Is.addEventListener("matchMediaInit",(function(){return Da()})),Is.addEventListener("matchMediaRevert",(function(){return La()})),Is.addEventListener("matchMedia",(function(){Fa(0,1),Aa("matchMedia")})),Is.matchMedia("(orientation: portrait)",(function(){return Ea(),Ea}))):console.warn("Requires GSAP 3.11.0 or later"),Ea(),ha(Bs,"scroll",Sa);var e,i,r=Ys.style,n=r.borderTopStyle,s=Is.core.Animation.prototype;for(s.revert||Object.defineProperty(s,"revert",{value:function(){return this.time(-.01,!0)}}),r.borderTopStyle="solid",e=aa(Ys),Es.m=Math.round(e.top+Es.sc())||0,Ss.m=Math.round(e.left+Ss.sc())||0,n?r.borderTopStyle=n:r.removeProperty("border-top-style"),Xs=setInterval(Ta,250),Is.delayedCall(.5,(function(){return wo=0})),ha(Bs,"touchcancel",Oo),ha(Ys,"touchstart",Oo),ua(ha,Bs,"pointerdown,touchstart,mousedown",Mo),ua(ha,Bs,"pointerup,touchend,mouseup",Co),$s=Is.utils.checkPrefix("transform"),Va.push($s),zs=_o(),Hs=Is.delayedCall(.2,Fa).pause(),Zs=[Bs,"visibilitychange",function(){var t=Rs.innerWidth,e=Rs.innerHeight;Bs.hidden?(Ks=t,Qs=e):Ks===t&&Qs===e||ka()},Bs,"DOMContentLoaded",Fa,Rs,"load",Fa,Rs,"resize",ka],Bo(ha),ba.forEach((function(t){return t.enable(0,1)})),i=0;i<hs.length;i+=3)fa(pa,hs[i],hs[i+1]),fa(pa,hs[i],hs[i+2])}},t.config=function(e){"limitCallbacks"in e&&(fo=!!e.limitCallbacks);var i=e.syncInterval;i&&clearInterval(Xs)||(Xs=i)&&setInterval(Ta,i),"ignoreMobileResize"in e&&(ro=1===t.isTouch&&e.ignoreMobileResize),"autoRefreshEvents"in e&&(Bo(pa)||Bo(ha,e.autoRefreshEvents||"none"),eo=-1===(e.autoRefreshEvents+"").indexOf("resize"))},t.scrollerProxy=function(t,e){var i=ks(t),r=hs.indexOf(i),n=Do(i);~r&&hs.splice(r,n?6:2),e&&(n?ps.unshift(Rs,e,Ys,e,Fs,e):ps.unshift(i,e))},t.clearMatchMedia=function(t){ba.forEach((function(e){return e._ctx&&e._ctx.query===t&&e._ctx.kill(!0,!0)}))},t.isInViewport=function(t,e,i){var r=(Fo(t)?ks(t):t).getBoundingClientRect(),n=r[i?$o:Uo]*e||0;return i?r.right-n>0&&r.left+n<Rs.innerWidth:r.bottom-n>0&&r.top+n<Rs.innerHeight},t.positionInViewport=function(t,e,i){Fo(t)&&(t=ks(t));var r=t.getBoundingClientRect(),n=r[i?$o:Uo],s=null==e?n/2:e in ga?ga[e]*n:~e.indexOf("%")?parseFloat(e)*n/100:parseFloat(e)||0;return i?(r.left+s)/Rs.innerWidth:(r.top+s)/Rs.innerHeight},t.killAll=function(t){if(ba.slice(0).forEach((function(t){return"ScrollSmoother"!==t.vars.id&&t.kill()})),!0!==t){var e=Ma.killAll||[];Ma={},e.forEach((function(t){return t()}))}},t}();el.version="3.12.5",el.saveStyles=function(t){return t?Ws(t).forEach((function(t){if(t&&t.style){var e=Pa.indexOf(t);e>=0&&Pa.splice(e,5),Pa.push(t,t.style.cssText,t.getBBox&&t.getAttribute("transform"),Is.core.getCache(t),ao())}})):Pa},el.revert=function(t,e){return Da(!t,e)},el.create=function(t,e){return new el(t,e)},el.refresh=function(t){return t?ka():(zs||el.register())&&Fa(!0)},el.update=function(t){return++hs.cache&&Ha(!0===t?2:0)},el.clearScrollMemory=Ia,el.maxScroll=function(t,e){return Ro(t,e?Ss:Es)},el.getScrollFunc=function(t,e){return Ms(ks(t),e?Ss:Es)},el.getById=function(t){return xa[t]},el.getAll=function(){return ba.filter((function(t){return"ScrollSmoother"!==t.vars.id}))},el.isScrolling=function(){return!!xo},el.snapDirectional=da,el.addEventListener=function(t,e){var i=Ma[t]||(Ma[t]=[]);~i.indexOf(e)||i.push(e)},el.removeEventListener=function(t,e){var i=Ma[t],r=i&&i.indexOf(e);r>=0&&i.splice(r,1)},el.batch=function(t,e){var i,r=[],n={},s=e.interval||.016,o=e.batchMax||1e9,a=function(t,e){var i=[],r=[],n=Is.delayedCall(s,(function(){e(i,r),i=[],r=[]})).pause();return function(t){i.length||n.restart(!0),i.push(t.trigger),r.push(t),o<=i.length&&n.progress(1)}};for(i in e)n[i]="on"===i.substr(0,2)&&Yo(e[i])&&"onRefreshInit"!==i?a(0,e[i]):e[i];return Yo(o)&&(o=o(),ha(el,"refresh",(function(){return o=e.batchMax()}))),Ws(t).forEach((function(t){var e={};for(i in n)e[i]=n[i];e.trigger=t,r.push(el.create(e))})),r};var il,rl=function(t,e,i,r){return e>r?t(r):e<0&&t(0),i>r?(r-e)/(i-e):i<0?e/(e-i):1},nl=function t(e,i){!0===i?e.style.removeProperty("touch-action"):e.style.touchAction=!0===i?"auto":i?"pan-"+i+(Ds.isTouch?" pinch-zoom":""):"none",e===Fs&&t(Ys,i)},sl={auto:1,scroll:1},ol=function(t){var e,i=t.event,r=t.target,n=t.axis,s=(i.changedTouches?i.changedTouches[0]:i).target,o=s._gsap||Is.core.getCache(s),a=_o();if(!o._isScrollT||a-o._isScrollT>2e3){for(;s&&s!==Ys&&(s.scrollHeight<=s.clientHeight&&s.scrollWidth<=s.clientWidth||!sl[(e=sa(s)).overflowY]&&!sl[e.overflowX]);)s=s.parentNode;o._isScroll=s&&s!==r&&!Do(s)&&(sl[(e=sa(s)).overflowY]||sl[e.overflowX]),o._isScrollT=a}(o._isScroll||"x"===n)&&(i.stopPropagation(),i._gsapAllow=!0)},al=function(t,e,i,r){return Ds.create({target:t,capture:!0,debounce:!1,lockAxis:!0,type:e,onWheel:r=r&&ol,onPress:r,onDrag:r,onScroll:r,onEnable:function(){return i&&ha(Bs,Ds.eventTypes[0],cl,!1,!0)},onDisable:function(){return pa(Bs,Ds.eventTypes[0],cl,!0)}})},ll=/(input|label|select|textarea)/i,cl=function(t){var e=ll.test(t.target.tagName);(e||il)&&(t._gsapAllow=!0,il=e)},dl=function(t){Ho(t)||(t={}),t.preventDefault=t.isNormalizer=t.allowClicks=!0,t.type||(t.type="wheel,touch"),t.debounce=!!t.debounce,t.id=t.id||"normalizer";var e,i,r,n,s,o,a,l,c=t,d=c.normalizeScrollX,u=c.momentum,h=c.allowNestedScroll,p=c.onRelease,f=ks(t.target)||Fs,m=Is.core.globals().ScrollSmoother,v=m&&m.get(),g=oo&&(t.content&&ks(t.content)||v&&!1!==t.content&&!v.smooth()&&v.content()),y=Ms(f,Es),w=Ms(f,Ss),_=1,b=(Ds.isTouch&&Rs.visualViewport?Rs.visualViewport.scale*Rs.visualViewport.width:Rs.outerWidth)/Rs.innerWidth,x=0,T=Yo(u)?function(){return u(e)}:function(){return u||2.8},S=al(f,t.type,!0,h),E=function(){return n=!1},k=Oo,M=Oo,C=function(){i=Ro(f,Es),M=Vs(oo?1:0,i),d&&(k=Vs(0,Ro(f,Ss))),r=za},O=function(){g._gsap.y=Ao(parseFloat(g._gsap.y)+y.offset)+"px",g.style.transform="matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, "+parseFloat(g._gsap.y)+", 0, 1)",y.offset=y.cacheID=0},A=function(){C(),s.isActive()&&s.vars.scrollY>i&&(y()>i?s.progress(1)&&y(i):s.resetTo("scrollY",i))};return g&&Is.set(g,{y:"+=0"}),t.ignoreCheck=function(t){return oo&&"touchmove"===t.type&&function(){if(n){requestAnimationFrame(E);var t=Ao(e.deltaY/2),i=M(y.v-t);if(g&&i!==y.v+y.offset){y.offset=i-y.v;var r=Ao((parseFloat(g&&g._gsap.y)||0)-y.offset);g.style.transform="matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, "+r+", 0, 1)",g._gsap.y=r+"px",y.cacheID=hs.cache,Ha()}return!0}y.offset&&O(),n=!0}()||_>1.05&&"touchstart"!==t.type||e.isGesturing||t.touches&&t.touches.length>1},t.onPress=function(){n=!1;var t=_;_=Ao((Rs.visualViewport&&Rs.visualViewport.scale||1)/b),s.pause(),t!==_&&nl(f,_>1.01||!d&&"x"),o=w(),a=y(),C(),r=za},t.onRelease=t.onGestureStart=function(t,e){if(y.offset&&O(),e){hs.cache++;var r,n,o=T();d&&(n=(r=w())+.05*o*-t.velocityX/.227,o*=rl(w,r,n,Ro(f,Ss)),s.vars.scrollX=k(n)),n=(r=y())+.05*o*-t.velocityY/.227,o*=rl(y,r,n,Ro(f,Es)),s.vars.scrollY=M(n),s.invalidate().duration(o).play(.01),(oo&&s.vars.scrollY>=i||r>=i-1)&&Is.to({},{onUpdate:A,duration:o})}else l.restart(!0);p&&p(t)},t.onWheel=function(){s._ts&&s.pause(),_o()-x>1e3&&(r=0,x=_o())},t.onChange=function(t,e,i,n,s){if(za!==r&&C(),e&&d&&w(k(n[2]===e?o+(t.startX-t.x):w()+e-n[1])),i){y.offset&&O();var l=s[2]===i,c=l?a+t.startY-t.y:y()+i-s[1],u=M(c);l&&c!==u&&(a+=u-c),y(u)}(i||e)&&Ha()},t.onEnable=function(){nl(f,!d&&"x"),el.addEventListener("refresh",A),ha(Rs,"resize",A),y.smooth&&(y.target.style.scrollBehavior="auto",y.smooth=w.smooth=!1),S.enable()},t.onDisable=function(){nl(f,!0),pa(Rs,"resize",A),el.removeEventListener("refresh",A),S.kill()},t.lockAxis=!1!==t.lockAxis,(e=new Ds(t)).iOS=oo,oo&&!y()&&y(1),oo&&Is.ticker.add(Oo),l=e._dc,s=Is.to(e,{ease:"power4",paused:!0,inherit:!1,scrollX:d?"+=0.1":"+=0",scrollY:"+=0.1",modifiers:{scrollY:Za(y,y(),(function(){return s.pause()}))},onUpdate:Ha,onComplete:l.vars.onComplete}),e};el.sort=function(t){return ba.sort(t||function(t,e){return-1e6*(t.vars.refreshPriority||0)+t.start-(e.start+-1e6*(e.vars.refreshPriority||0))})},el.observe=function(t){return new Ds(t)},el.normalizeScroll=function(t){if(void 0===t)return io;if(!0===t&&io)return io.enable();if(!1===t)return io&&io.kill(),void(io=t);var e=t instanceof Ds?t:dl(t);return io&&io.target===e.target&&io.kill(),Do(e.target)&&(io=e),e},el.core={_getVelocityProp:Cs,_inputObserver:al,_scrollers:hs,_proxies:ps,bridge:{ss:function(){xo||Aa("scrollStart"),xo=_o()},ref:function(){return Gs}}},Lo()&&Is.registerPlugin(el);$n.registerPlugin(el);const ul=$n.matchMedia(),hl=(t,e)=>{((t,e)=>{for(var i=0;i<t.length;i++)t[i].classList.remove(e)})(e,"_is-active"),e[t]&&e[t].classList.add("_is-active")};function pl(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function fl(t,e){for(var i=0;i<e.length;i++){var r=e[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function ml(t,e,i){return e&&fl(t.prototype,e),i&&fl(t,i),t}function vl(t,e,i){return e in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t}function gl(t,e){var i=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),i.push.apply(i,r)}return i}function yl(t){for(var e=1;e<arguments.length;e++){var i=null!=arguments[e]?arguments[e]:{};e%2?gl(Object(i),!0).forEach((function(e){vl(t,e,i[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(i)):gl(Object(i)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(i,e))}))}return t}function wl(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&bl(t,e)}function _l(t){return _l=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},_l(t)}function bl(t,e){return bl=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},bl(t,e)}function xl(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Tl(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var i,r=_l(t);if(e){var n=_l(this).constructor;i=Reflect.construct(r,arguments,n)}else i=r.apply(this,arguments);return function(t,e){return!e||"object"!=typeof e&&"function"!=typeof e?xl(t):e}(this,i)}}function Sl(t,e,i){return Sl="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,i){var r=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=_l(t)););return t}(t,e);if(r){var n=Object.getOwnPropertyDescriptor(r,e);return n.get?n.get.call(i):n.value}},Sl(t,e,i||t)}function El(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(t)))return;var i=[],r=!0,n=!1,s=void 0;try{for(var o,a=t[Symbol.iterator]();!(r=(o=a.next()).done)&&(i.push(o.value),!e||i.length!==e);r=!0);}catch(t){n=!0,s=t}finally{try{r||null==a.return||a.return()}finally{if(n)throw s}}return i}(t,e)||Ml(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function kl(t){return function(t){if(Array.isArray(t))return Cl(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||Ml(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ml(t,e){if(t){if("string"==typeof t)return Cl(t,e);var i=Object.prototype.toString.call(t).slice(8,-1);return"Object"===i&&t.constructor&&(i=t.constructor.name),"Map"===i||"Set"===i?Array.from(t):"Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)?Cl(t,e):void 0}}function Cl(t,e){(null==e||e>t.length)&&(e=t.length);for(var i=0,r=new Array(e);i<e;i++)r[i]=t[i];return r}var Ol={el:document,name:"scroll",offset:[0,0],repeat:!1,smooth:!1,initPosition:{x:0,y:0},direction:"vertical",gestureDirection:"vertical",reloadOnContextChange:!1,lerp:.1,class:"is-inview",scrollbarContainer:!1,scrollbarClass:"c-scrollbar",scrollingClass:"has-scroll-scrolling",draggingClass:"has-scroll-dragging",smoothClass:"has-scroll-smooth",initClass:"has-scroll-init",getSpeed:!1,getDirection:!1,scrollFromAnywhere:!1,multiplier:1,firefoxMultiplier:50,touchMultiplier:2,resetNativeScroll:!0,tablet:{smooth:!1,direction:"vertical",gestureDirection:"vertical",breakpoint:1024},smartphone:{smooth:!1,direction:"vertical",gestureDirection:"vertical"}},Al=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};pl(this,t),Object.assign(this,Ol,e),this.smartphone=Ol.smartphone,e.smartphone&&Object.assign(this.smartphone,e.smartphone),this.tablet=Ol.tablet,e.tablet&&Object.assign(this.tablet,e.tablet),this.namespace="locomotive",this.html=document.documentElement,this.windowHeight=window.innerHeight,this.windowWidth=window.innerWidth,this.windowMiddle={x:this.windowWidth/2,y:this.windowHeight/2},this.els={},this.currentElements={},this.listeners={},this.hasScrollTicking=!1,this.hasCallEventSet=!1,this.checkScroll=this.checkScroll.bind(this),this.checkResize=this.checkResize.bind(this),this.checkEvent=this.checkEvent.bind(this),this.instance={scroll:{x:0,y:0},limit:{x:this.html.offsetWidth,y:this.html.offsetHeight},currentElements:this.currentElements},this.isMobile?this.isTablet?this.context="tablet":this.context="smartphone":this.context="desktop",this.isMobile&&(this.direction=this[this.context].direction),"horizontal"===this.direction?this.directionAxis="x":this.directionAxis="y",this.getDirection&&(this.instance.direction=null),this.getDirection&&(this.instance.speed=0),this.html.classList.add(this.initClass),window.addEventListener("resize",this.checkResize,!1)}return ml(t,[{key:"init",value:function(){this.initEvents()}},{key:"checkScroll",value:function(){this.dispatchScroll()}},{key:"checkResize",value:function(){var t=this;this.resizeTick||(this.resizeTick=!0,requestAnimationFrame((function(){t.resize(),t.resizeTick=!1})))}},{key:"resize",value:function(){}},{key:"checkContext",value:function(){if(this.reloadOnContextChange){this.isMobile=/Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||"MacIntel"===navigator.platform&&navigator.maxTouchPoints>1||this.windowWidth<this.tablet.breakpoint,this.isTablet=this.isMobile&&this.windowWidth>=this.tablet.breakpoint;var t=this.context;if(this.isMobile?this.isTablet?this.context="tablet":this.context="smartphone":this.context="desktop",t!=this.context)("desktop"==t?this.smooth:this[t].smooth)!=("desktop"==this.context?this.smooth:this[this.context].smooth)&&window.location.reload()}}},{key:"initEvents",value:function(){var t=this;this.scrollToEls=this.el.querySelectorAll("[data-".concat(this.name,"-to]")),this.setScrollTo=this.setScrollTo.bind(this),this.scrollToEls.forEach((function(e){e.addEventListener("click",t.setScrollTo,!1)}))}},{key:"setScrollTo",value:function(t){t.preventDefault(),this.scrollTo(t.currentTarget.getAttribute("data-".concat(this.name,"-href"))||t.currentTarget.getAttribute("href"),{offset:t.currentTarget.getAttribute("data-".concat(this.name,"-offset"))})}},{key:"addElements",value:function(){}},{key:"detectElements",value:function(t){var e=this,i=this.instance.scroll.y,r=i+this.windowHeight,n=this.instance.scroll.x,s=n+this.windowWidth;Object.entries(this.els).forEach((function(o){var a=El(o,2),l=a[0],c=a[1];if(!c||c.inView&&!t||("horizontal"===e.direction?s>=c.left&&n<c.right&&e.setInView(c,l):r>=c.top&&i<c.bottom&&e.setInView(c,l)),c&&c.inView)if("horizontal"===e.direction){var d=c.right-c.left;c.progress=(e.instance.scroll.x-(c.left-e.windowWidth))/(d+e.windowWidth),(s<c.left||n>c.right)&&e.setOutOfView(c,l)}else{var u=c.bottom-c.top;c.progress=(e.instance.scroll.y-(c.top-e.windowHeight))/(u+e.windowHeight),(r<c.top||i>c.bottom)&&e.setOutOfView(c,l)}})),this.hasScrollTicking=!1}},{key:"setInView",value:function(t,e){this.els[e].inView=!0,t.el.classList.add(t.class),this.currentElements[e]=t,t.call&&this.hasCallEventSet&&(this.dispatchCall(t,"enter"),t.repeat||(this.els[e].call=!1))}},{key:"setOutOfView",value:function(t,e){var i=this;this.els[e].inView=!1,Object.keys(this.currentElements).forEach((function(t){t===e&&delete i.currentElements[t]})),t.call&&this.hasCallEventSet&&this.dispatchCall(t,"exit"),t.repeat&&t.el.classList.remove(t.class)}},{key:"dispatchCall",value:function(t,e){this.callWay=e,this.callValue=t.call.split(",").map((function(t){return t.trim()})),this.callObj=t,1==this.callValue.length&&(this.callValue=this.callValue[0]);var i=new Event(this.namespace+"call");this.el.dispatchEvent(i)}},{key:"dispatchScroll",value:function(){var t=new Event(this.namespace+"scroll");this.el.dispatchEvent(t)}},{key:"setEvents",value:function(t,e){this.listeners[t]||(this.listeners[t]=[]);var i=this.listeners[t];i.push(e),1===i.length&&this.el.addEventListener(this.namespace+t,this.checkEvent,!1),"call"===t&&(this.hasCallEventSet=!0,this.detectElements(!0))}},{key:"unsetEvents",value:function(t,e){if(this.listeners[t]){var i=this.listeners[t],r=i.indexOf(e);r<0||(i.splice(r,1),0===i.index&&this.el.removeEventListener(this.namespace+t,this.checkEvent,!1))}}},{key:"checkEvent",value:function(t){var e=this,i=t.type.replace(this.namespace,""),r=this.listeners[i];r&&0!==r.length&&r.forEach((function(t){switch(i){case"scroll":return t(e.instance);case"call":return t(e.callValue,e.callWay,e.callObj);default:return t()}}))}},{key:"startScroll",value:function(){}},{key:"stopScroll",value:function(){}},{key:"setScroll",value:function(t,e){this.instance.scroll={x:0,y:0}}},{key:"destroy",value:function(){var t=this;window.removeEventListener("resize",this.checkResize,!1),Object.keys(this.listeners).forEach((function(e){t.el.removeEventListener(t.namespace+e,t.checkEvent,!1)})),this.listeners={},this.scrollToEls.forEach((function(e){e.removeEventListener("click",t.setScrollTo,!1)})),this.html.classList.remove(this.initClass)}}]),t}(),Pl="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==t.g?t.g:"undefined"!=typeof self?self:{};function Ll(t,e){return t(e={exports:{}},e.exports),e.exports}var Dl=Ll((function(t,e){t.exports={polyfill:function(){var t=window,e=document;if(!("scrollBehavior"in e.documentElement.style)||!0===t.__forceSmoothScrollPolyfill__){var i,r=t.HTMLElement||t.Element,n=468,s={scroll:t.scroll||t.scrollTo,scrollBy:t.scrollBy,elementScroll:r.prototype.scroll||l,scrollIntoView:r.prototype.scrollIntoView},o=t.performance&&t.performance.now?t.performance.now.bind(t.performance):Date.now,a=(i=t.navigator.userAgent,new RegExp(["MSIE ","Trident/","Edge/"].join("|")).test(i)?1:0);t.scroll=t.scrollTo=function(){void 0!==arguments[0]&&(!0!==c(arguments[0])?f.call(t,e.body,void 0!==arguments[0].left?~~arguments[0].left:t.scrollX||t.pageXOffset,void 0!==arguments[0].top?~~arguments[0].top:t.scrollY||t.pageYOffset):s.scroll.call(t,void 0!==arguments[0].left?arguments[0].left:"object"!=typeof arguments[0]?arguments[0]:t.scrollX||t.pageXOffset,void 0!==arguments[0].top?arguments[0].top:void 0!==arguments[1]?arguments[1]:t.scrollY||t.pageYOffset))},t.scrollBy=function(){void 0!==arguments[0]&&(c(arguments[0])?s.scrollBy.call(t,void 0!==arguments[0].left?arguments[0].left:"object"!=typeof arguments[0]?arguments[0]:0,void 0!==arguments[0].top?arguments[0].top:void 0!==arguments[1]?arguments[1]:0):f.call(t,e.body,~~arguments[0].left+(t.scrollX||t.pageXOffset),~~arguments[0].top+(t.scrollY||t.pageYOffset)))},r.prototype.scroll=r.prototype.scrollTo=function(){if(void 0!==arguments[0])if(!0!==c(arguments[0])){var t=arguments[0].left,e=arguments[0].top;f.call(this,this,void 0===t?this.scrollLeft:~~t,void 0===e?this.scrollTop:~~e)}else{if("number"==typeof arguments[0]&&void 0===arguments[1])throw new SyntaxError("Value could not be converted");s.elementScroll.call(this,void 0!==arguments[0].left?~~arguments[0].left:"object"!=typeof arguments[0]?~~arguments[0]:this.scrollLeft,void 0!==arguments[0].top?~~arguments[0].top:void 0!==arguments[1]?~~arguments[1]:this.scrollTop)}},r.prototype.scrollBy=function(){void 0!==arguments[0]&&(!0!==c(arguments[0])?this.scroll({left:~~arguments[0].left+this.scrollLeft,top:~~arguments[0].top+this.scrollTop,behavior:arguments[0].behavior}):s.elementScroll.call(this,void 0!==arguments[0].left?~~arguments[0].left+this.scrollLeft:~~arguments[0]+this.scrollLeft,void 0!==arguments[0].top?~~arguments[0].top+this.scrollTop:~~arguments[1]+this.scrollTop))},r.prototype.scrollIntoView=function(){if(!0!==c(arguments[0])){var i=function(t){for(;t!==e.body&&!1===h(t);)t=t.parentNode||t.host;return t}(this),r=i.getBoundingClientRect(),n=this.getBoundingClientRect();i!==e.body?(f.call(this,i,i.scrollLeft+n.left-r.left,i.scrollTop+n.top-r.top),"fixed"!==t.getComputedStyle(i).position&&t.scrollBy({left:r.left,top:r.top,behavior:"smooth"})):t.scrollBy({left:n.left,top:n.top,behavior:"smooth"})}else s.scrollIntoView.call(this,void 0===arguments[0]||arguments[0])}}function l(t,e){this.scrollLeft=t,this.scrollTop=e}function c(t){if(null===t||"object"!=typeof t||void 0===t.behavior||"auto"===t.behavior||"instant"===t.behavior)return!0;if("object"==typeof t&&"smooth"===t.behavior)return!1;throw new TypeError("behavior member of ScrollOptions "+t.behavior+" is not a valid value for enumeration ScrollBehavior.")}function d(t,e){return"Y"===e?t.clientHeight+a<t.scrollHeight:"X"===e?t.clientWidth+a<t.scrollWidth:void 0}function u(e,i){var r=t.getComputedStyle(e,null)["overflow"+i];return"auto"===r||"scroll"===r}function h(t){var e=d(t,"Y")&&u(t,"Y"),i=d(t,"X")&&u(t,"X");return e||i}function p(e){var i,r,s,a,l=(o()-e.startTime)/n;a=l=l>1?1:l,i=.5*(1-Math.cos(Math.PI*a)),r=e.startX+(e.x-e.startX)*i,s=e.startY+(e.y-e.startY)*i,e.method.call(e.scrollable,r,s),r===e.x&&s===e.y||t.requestAnimationFrame(p.bind(t,e))}function f(i,r,n){var a,c,d,u,h=o();i===e.body?(a=t,c=t.scrollX||t.pageXOffset,d=t.scrollY||t.pageYOffset,u=s.scroll):(a=i,c=i.scrollLeft,d=i.scrollTop,u=l),p({scrollable:a,method:u,startTime:h,startX:c,startY:d,x:r,y:n})}}}})),Il=(Dl.polyfill,function(t){wl(i,t);var e=Tl(i);function i(){var t,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return pl(this,i),(t=e.call(this,r)).resetNativeScroll&&(history.scrollRestoration&&(history.scrollRestoration="manual"),window.scrollTo(0,0)),window.addEventListener("scroll",t.checkScroll,!1),void 0===window.smoothscrollPolyfill&&(window.smoothscrollPolyfill=Dl,window.smoothscrollPolyfill.polyfill()),t}return ml(i,[{key:"init",value:function(){this.instance.scroll.y=window.pageYOffset,this.addElements(),this.detectElements(),Sl(_l(i.prototype),"init",this).call(this)}},{key:"checkScroll",value:function(){var t=this;Sl(_l(i.prototype),"checkScroll",this).call(this),this.getDirection&&this.addDirection(),this.getSpeed&&(this.addSpeed(),this.speedTs=Date.now()),this.instance.scroll.y=window.pageYOffset,Object.entries(this.els).length&&(this.hasScrollTicking||(requestAnimationFrame((function(){t.detectElements()})),this.hasScrollTicking=!0))}},{key:"addDirection",value:function(){window.pageYOffset>this.instance.scroll.y?"down"!==this.instance.direction&&(this.instance.direction="down"):window.pageYOffset<this.instance.scroll.y&&"up"!==this.instance.direction&&(this.instance.direction="up")}},{key:"addSpeed",value:function(){window.pageYOffset!=this.instance.scroll.y?this.instance.speed=(window.pageYOffset-this.instance.scroll.y)/Math.max(1,Date.now()-this.speedTs):this.instance.speed=0}},{key:"resize",value:function(){Object.entries(this.els).length&&(this.windowHeight=window.innerHeight,this.updateElements())}},{key:"addElements",value:function(){var t=this;this.els={},this.el.querySelectorAll("[data-"+this.name+"]").forEach((function(e,i){e.getBoundingClientRect();var r,n,s,o=e.dataset[t.name+"Class"]||t.class,a="string"==typeof e.dataset[t.name+"Id"]?e.dataset[t.name+"Id"]:i,l="string"==typeof e.dataset[t.name+"Offset"]?e.dataset[t.name+"Offset"].split(","):t.offset,c=e.dataset[t.name+"Repeat"],d=e.dataset[t.name+"Call"],u=e.dataset[t.name+"Target"],h=(s=void 0!==u?document.querySelector("".concat(u)):e).getBoundingClientRect();r=h.top+t.instance.scroll.y,n=h.left+t.instance.scroll.x;var p=r+s.offsetHeight,f=n+s.offsetWidth;c="false"!=c&&(null!=c||t.repeat);var m=t.getRelativeOffset(l),v={el:e,targetEl:s,id:a,class:o,top:r+=m[0],bottom:p-=m[1],left:n,right:f,offset:l,progress:0,repeat:c,inView:!1,call:d};t.els[a]=v,e.classList.contains(o)&&t.setInView(t.els[a],a)}))}},{key:"updateElements",value:function(){var t=this;Object.entries(this.els).forEach((function(e){var i=El(e,2),r=i[0],n=i[1],s=n.targetEl.getBoundingClientRect().top+t.instance.scroll.y,o=s+n.targetEl.offsetHeight,a=t.getRelativeOffset(n.offset);t.els[r].top=s+a[0],t.els[r].bottom=o-a[1]})),this.hasScrollTicking=!1}},{key:"getRelativeOffset",value:function(t){var e=[0,0];if(t)for(var i=0;i<t.length;i++)"string"==typeof t[i]?t[i].includes("%")?e[i]=parseInt(t[i].replace("%","")*this.windowHeight/100):e[i]=parseInt(t[i]):e[i]=t[i];return e}},{key:"scrollTo",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=parseInt(e.offset)||0,r=!!e.callback&&e.callback;if("string"==typeof t){if("top"===t)t=this.html;else if("bottom"===t)t=this.html.offsetHeight-window.innerHeight;else if(!(t=document.querySelector(t)))return}else if("number"==typeof t)t=parseInt(t);else if(!t||!t.tagName)return void console.warn("`target` parameter is not valid");i="number"!=typeof t?t.getBoundingClientRect().top+i+this.instance.scroll.y:t+i;var n=function(){return parseInt(window.pageYOffset)===parseInt(i)};if(r){if(n())return void r();window.addEventListener("scroll",(function t(){n()&&(window.removeEventListener("scroll",t),r())}))}window.scrollTo({top:i,behavior:0===e.duration?"auto":"smooth"})}},{key:"update",value:function(){this.addElements(),this.detectElements()}},{key:"destroy",value:function(){Sl(_l(i.prototype),"destroy",this).call(this),window.removeEventListener("scroll",this.checkScroll,!1)}}]),i}(Al)),zl=Object.getOwnPropertySymbols,Rl=Object.prototype.hasOwnProperty,Bl=Object.prototype.propertyIsEnumerable;var Fl=function(){try{if(!Object.assign)return!1;var t=new String("abc");if(t[5]="de","5"===Object.getOwnPropertyNames(t)[0])return!1;for(var e={},i=0;i<10;i++)e["_"+String.fromCharCode(i)]=i;var r=Object.getOwnPropertyNames(e).map((function(t){return e[t]}));if("0123456789"!==r.join(""))return!1;var n={};return"abcdefghijklmnopqrst".split("").forEach((function(t){n[t]=t})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},n)).join("")}catch(t){return!1}}()?Object.assign:function(t,e){for(var i,r,n=function(t){if(null==t)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(t)}(t),s=1;s<arguments.length;s++){for(var o in i=Object(arguments[s]))Rl.call(i,o)&&(n[o]=i[o]);if(zl){r=zl(i);for(var a=0;a<r.length;a++)Bl.call(i,r[a])&&(n[r[a]]=i[r[a]])}}return n};function Yl(){}Yl.prototype={on:function(t,e,i){var r=this.e||(this.e={});return(r[t]||(r[t]=[])).push({fn:e,ctx:i}),this},once:function(t,e,i){var r=this;function n(){r.off(t,n),e.apply(i,arguments)}return n._=e,this.on(t,n,i)},emit:function(t){for(var e=[].slice.call(arguments,1),i=((this.e||(this.e={}))[t]||[]).slice(),r=0,n=i.length;r<n;r++)i[r].fn.apply(i[r].ctx,e);return this},off:function(t,e){var i=this.e||(this.e={}),r=i[t],n=[];if(r&&e)for(var s=0,o=r.length;s<o;s++)r[s].fn!==e&&r[s].fn._!==e&&n.push(r[s]);return n.length?i[t]=n:delete i[t],this}};var jl=Yl,Hl=Ll((function(t,e){(function(){(null!==e?e:this).Lethargy=function(){function t(t,e,i,r){this.stability=null!=t?Math.abs(t):8,this.sensitivity=null!=e?1+Math.abs(e):100,this.tolerance=null!=i?1+Math.abs(i):1.1,this.delay=null!=r?r:150,this.lastUpDeltas=function(){var t,e,i;for(i=[],t=1,e=2*this.stability;1<=e?t<=e:t>=e;1<=e?t++:t--)i.push(null);return i}.call(this),this.lastDownDeltas=function(){var t,e,i;for(i=[],t=1,e=2*this.stability;1<=e?t<=e:t>=e;1<=e?t++:t--)i.push(null);return i}.call(this),this.deltasTimestamp=function(){var t,e,i;for(i=[],t=1,e=2*this.stability;1<=e?t<=e:t>=e;1<=e?t++:t--)i.push(null);return i}.call(this)}return t.prototype.check=function(t){var e;return null!=(t=t.originalEvent||t).wheelDelta?e=t.wheelDelta:null!=t.deltaY?e=-40*t.deltaY:null==t.detail&&0!==t.detail||(e=-40*t.detail),this.deltasTimestamp.push(Date.now()),this.deltasTimestamp.shift(),e>0?(this.lastUpDeltas.push(e),this.lastUpDeltas.shift(),this.isInertia(1)):(this.lastDownDeltas.push(e),this.lastDownDeltas.shift(),this.isInertia(-1))},t.prototype.isInertia=function(t){var e,i,r,n,s,o,a;return null===(e=-1===t?this.lastDownDeltas:this.lastUpDeltas)[0]?t:!(this.deltasTimestamp[2*this.stability-2]+this.delay>Date.now()&&e[0]===e[2*this.stability-1])&&(r=e.slice(0,this.stability),i=e.slice(this.stability,2*this.stability),a=r.reduce((function(t,e){return t+e})),s=i.reduce((function(t,e){return t+e})),o=a/r.length,n=s/i.length,Math.abs(o)<Math.abs(n*this.tolerance)&&this.sensitivity<Math.abs(n)&&t)},t.prototype.showLastUpDeltas=function(){return this.lastUpDeltas},t.prototype.showLastDownDeltas=function(){return this.lastDownDeltas},t}()}).call(Pl)})),Wl={hasWheelEvent:"onwheel"in document,hasMouseWheelEvent:"onmousewheel"in document,hasTouch:"ontouchstart"in window||window.TouchEvent||window.DocumentTouch&&document instanceof DocumentTouch,hasTouchWin:navigator.msMaxTouchPoints&&navigator.msMaxTouchPoints>1,hasPointer:!!window.navigator.msPointerEnabled,hasKeyDown:"onkeydown"in document,isFirefox:navigator.userAgent.indexOf("Firefox")>-1},Vl=Object.prototype.toString,Nl=Object.prototype.hasOwnProperty;function Xl(t,e){return function(){return t.apply(e,arguments)}}var Gl=Hl.Lethargy,ql="virtualscroll",$l=tc,Ul=37,Kl=38,Ql=39,Zl=40,Jl=32;function tc(t){!function(t){if(!t)return console.warn("bindAll requires at least one argument.");var e=Array.prototype.slice.call(arguments,1);if(0===e.length)for(var i in t)Nl.call(t,i)&&"function"==typeof t[i]&&"[object Function]"==Vl.call(t[i])&&e.push(i);for(var r=0;r<e.length;r++){var n=e[r];t[n]=Xl(t[n],t)}}(this,"_onWheel","_onMouseWheel","_onTouchStart","_onTouchMove","_onKeyDown"),this.el=window,t&&t.el&&(this.el=t.el,delete t.el),this.options=Fl({mouseMultiplier:1,touchMultiplier:2,firefoxMultiplier:15,keyStep:120,preventTouch:!1,unpreventTouchClass:"vs-touchmove-allowed",limitInertia:!1,useKeyboard:!0,useTouch:!0},t),this.options.limitInertia&&(this._lethargy=new Gl),this._emitter=new jl,this._event={y:0,x:0,deltaX:0,deltaY:0},this.touchStartX=null,this.touchStartY=null,this.bodyTouchAction=null,void 0!==this.options.passive&&(this.listenerOptions={passive:this.options.passive})}function ec(t,e,i){return(1-i)*t+i*e}function ic(t){var e={};if(window.getComputedStyle){var i=getComputedStyle(t),r=i.transform||i.webkitTransform||i.mozTransform,n=r.match(/^matrix3d\((.+)\)$/);return n?(e.x=n?parseFloat(n[1].split(", ")[12]):0,e.y=n?parseFloat(n[1].split(", ")[13]):0):(n=r.match(/^matrix\((.+)\)$/),e.x=n?parseFloat(n[1].split(", ")[4]):0,e.y=n?parseFloat(n[1].split(", ")[5]):0),e}}function rc(t){for(var e=[];t&&t!==document;t=t.parentNode)e.push(t);return e}tc.prototype._notify=function(t){var e=this._event;e.x+=e.deltaX,e.y+=e.deltaY,this._emitter.emit(ql,{x:e.x,y:e.y,deltaX:e.deltaX,deltaY:e.deltaY,originalEvent:t})},tc.prototype._onWheel=function(t){var e=this.options;if(!this._lethargy||!1!==this._lethargy.check(t)){var i=this._event;i.deltaX=t.wheelDeltaX||-1*t.deltaX,i.deltaY=t.wheelDeltaY||-1*t.deltaY,Wl.isFirefox&&1==t.deltaMode&&(i.deltaX*=e.firefoxMultiplier,i.deltaY*=e.firefoxMultiplier),i.deltaX*=e.mouseMultiplier,i.deltaY*=e.mouseMultiplier,this._notify(t)}},tc.prototype._onMouseWheel=function(t){if(!this.options.limitInertia||!1!==this._lethargy.check(t)){var e=this._event;e.deltaX=t.wheelDeltaX?t.wheelDeltaX:0,e.deltaY=t.wheelDeltaY?t.wheelDeltaY:t.wheelDelta,this._notify(t)}},tc.prototype._onTouchStart=function(t){var e=t.targetTouches?t.targetTouches[0]:t;this.touchStartX=e.pageX,this.touchStartY=e.pageY},tc.prototype._onTouchMove=function(t){var e=this.options;e.preventTouch&&!t.target.classList.contains(e.unpreventTouchClass)&&t.preventDefault();var i=this._event,r=t.targetTouches?t.targetTouches[0]:t;i.deltaX=(r.pageX-this.touchStartX)*e.touchMultiplier,i.deltaY=(r.pageY-this.touchStartY)*e.touchMultiplier,this.touchStartX=r.pageX,this.touchStartY=r.pageY,this._notify(t)},tc.prototype._onKeyDown=function(t){var e=this._event;e.deltaX=e.deltaY=0;var i=window.innerHeight-40;switch(t.keyCode){case Ul:case Kl:e.deltaY=this.options.keyStep;break;case Ql:case Zl:e.deltaY=-this.options.keyStep;break;case t.shiftKey:e.deltaY=i;break;case Jl:e.deltaY=-i;break;default:return}this._notify(t)},tc.prototype._bind=function(){Wl.hasWheelEvent&&this.el.addEventListener("wheel",this._onWheel,this.listenerOptions),Wl.hasMouseWheelEvent&&this.el.addEventListener("mousewheel",this._onMouseWheel,this.listenerOptions),Wl.hasTouch&&this.options.useTouch&&(this.el.addEventListener("touchstart",this._onTouchStart,this.listenerOptions),this.el.addEventListener("touchmove",this._onTouchMove,this.listenerOptions)),Wl.hasPointer&&Wl.hasTouchWin&&(this.bodyTouchAction=document.body.style.msTouchAction,document.body.style.msTouchAction="none",this.el.addEventListener("MSPointerDown",this._onTouchStart,!0),this.el.addEventListener("MSPointerMove",this._onTouchMove,!0)),Wl.hasKeyDown&&this.options.useKeyboard&&document.addEventListener("keydown",this._onKeyDown)},tc.prototype._unbind=function(){Wl.hasWheelEvent&&this.el.removeEventListener("wheel",this._onWheel),Wl.hasMouseWheelEvent&&this.el.removeEventListener("mousewheel",this._onMouseWheel),Wl.hasTouch&&(this.el.removeEventListener("touchstart",this._onTouchStart),this.el.removeEventListener("touchmove",this._onTouchMove)),Wl.hasPointer&&Wl.hasTouchWin&&(document.body.style.msTouchAction=this.bodyTouchAction,this.el.removeEventListener("MSPointerDown",this._onTouchStart,!0),this.el.removeEventListener("MSPointerMove",this._onTouchMove,!0)),Wl.hasKeyDown&&this.options.useKeyboard&&document.removeEventListener("keydown",this._onKeyDown)},tc.prototype.on=function(t,e){this._emitter.on(ql,t,e);var i=this._emitter.e;i&&i[ql]&&1===i[ql].length&&this._bind()},tc.prototype.off=function(t,e){this._emitter.off(ql,t,e);var i=this._emitter.e;(!i[ql]||i[ql].length<=0)&&this._unbind()},tc.prototype.reset=function(){var t=this._event;t.x=0,t.y=0},tc.prototype.destroy=function(){this._emitter.off(),this._unbind()};var nc=.1,sc="function"==typeof Float32Array;function oc(t,e){return 1-3*e+3*t}function ac(t,e){return 3*e-6*t}function lc(t){return 3*t}function cc(t,e,i){return((oc(e,i)*t+ac(e,i))*t+lc(e))*t}function dc(t,e,i){return 3*oc(e,i)*t*t+2*ac(e,i)*t+lc(e)}function uc(t){return t}var hc=function(t,e,i,r){if(!(0<=t&&t<=1&&0<=i&&i<=1))throw new Error("bezier x values must be in [0, 1] range");if(t===e&&i===r)return uc;for(var n=sc?new Float32Array(11):new Array(11),s=0;s<11;++s)n[s]=cc(s*nc,t,i);function o(e){for(var r=0,s=1;10!==s&&n[s]<=e;++s)r+=nc;--s;var o=r+(e-n[s])/(n[s+1]-n[s])*nc,a=dc(o,t,i);return a>=.001?function(t,e,i,r){for(var n=0;n<4;++n){var s=dc(e,i,r);if(0===s)return e;e-=(cc(e,i,r)-t)/s}return e}(e,o,t,i):0===a?o:function(t,e,i,r,n){var s,o,a=0;do{(s=cc(o=e+(i-e)/2,r,n)-t)>0?i=o:e=o}while(Math.abs(s)>1e-7&&++a<10);return o}(e,r,r+nc,t,i)}return function(t){return 0===t?0:1===t?1:cc(o(t),e,r)}},pc=38,fc=40,mc=32,vc=9,gc=33,yc=34,wc=36,_c=35,bc=function(t){wl(i,t);var e=Tl(i);function i(){var t,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return pl(this,i),history.scrollRestoration&&(history.scrollRestoration="manual"),window.scrollTo(0,0),(t=e.call(this,r)).inertia&&(t.lerp=.1*t.inertia),t.isScrolling=!1,t.isDraggingScrollbar=!1,t.isTicking=!1,t.hasScrollTicking=!1,t.parallaxElements={},t.stop=!1,t.scrollbarContainer=r.scrollbarContainer,t.checkKey=t.checkKey.bind(xl(t)),window.addEventListener("keydown",t.checkKey,!1),t}return ml(i,[{key:"init",value:function(){var t=this;this.html.classList.add(this.smoothClass),this.html.setAttribute("data-".concat(this.name,"-direction"),this.direction),this.instance=yl({delta:{x:this.initPosition.x,y:this.initPosition.y},scroll:{x:this.initPosition.x,y:this.initPosition.y}},this.instance),this.vs=new $l({el:this.scrollFromAnywhere?document:this.el,mouseMultiplier:navigator.platform.indexOf("Win")>-1?1:.4,firefoxMultiplier:this.firefoxMultiplier,touchMultiplier:this.touchMultiplier,useKeyboard:!1,passive:!0}),this.vs.on((function(e){t.stop||t.isDraggingScrollbar||requestAnimationFrame((function(){t.updateDelta(e),t.isScrolling||t.startScrolling()}))})),this.setScrollLimit(),this.initScrollBar(),this.addSections(),this.addElements(),this.checkScroll(!0),this.transformElements(!0,!0),Sl(_l(i.prototype),"init",this).call(this)}},{key:"setScrollLimit",value:function(){if(this.instance.limit.y=this.el.offsetHeight-this.windowHeight,"horizontal"===this.direction){for(var t=0,e=this.el.children,i=0;i<e.length;i++)t+=e[i].offsetWidth;this.instance.limit.x=t-this.windowWidth}}},{key:"startScrolling",value:function(){this.startScrollTs=Date.now(),this.isScrolling=!0,this.checkScroll(),this.html.classList.add(this.scrollingClass)}},{key:"stopScrolling",value:function(){cancelAnimationFrame(this.checkScrollRaf),this.startScrollTs=void 0,this.scrollToRaf&&(cancelAnimationFrame(this.scrollToRaf),this.scrollToRaf=null),this.isScrolling=!1,this.instance.scroll.y=Math.round(this.instance.scroll.y),this.html.classList.remove(this.scrollingClass)}},{key:"checkKey",value:function(t){var e=this;if(this.stop)t.keyCode==vc&&requestAnimationFrame((function(){e.html.scrollTop=0,document.body.scrollTop=0,e.html.scrollLeft=0,document.body.scrollLeft=0}));else{switch(t.keyCode){case vc:requestAnimationFrame((function(){e.html.scrollTop=0,document.body.scrollTop=0,e.html.scrollLeft=0,document.body.scrollLeft=0,e.scrollTo(document.activeElement,{offset:-window.innerHeight/2})}));break;case pc:this.isActiveElementScrollSensitive()&&(this.instance.delta[this.directionAxis]-=240);break;case fc:this.isActiveElementScrollSensitive()&&(this.instance.delta[this.directionAxis]+=240);break;case gc:this.instance.delta[this.directionAxis]-=window.innerHeight;break;case yc:this.instance.delta[this.directionAxis]+=window.innerHeight;break;case wc:this.instance.delta[this.directionAxis]-=this.instance.limit[this.directionAxis];break;case _c:this.instance.delta[this.directionAxis]+=this.instance.limit[this.directionAxis];break;case mc:this.isActiveElementScrollSensitive()&&(t.shiftKey?this.instance.delta[this.directionAxis]-=window.innerHeight:this.instance.delta[this.directionAxis]+=window.innerHeight);break;default:return}this.instance.delta[this.directionAxis]<0&&(this.instance.delta[this.directionAxis]=0),this.instance.delta[this.directionAxis]>this.instance.limit[this.directionAxis]&&(this.instance.delta[this.directionAxis]=this.instance.limit[this.directionAxis]),this.stopScrolling(),this.isScrolling=!0,this.checkScroll(),this.html.classList.add(this.scrollingClass)}}},{key:"isActiveElementScrollSensitive",value:function(){return!(document.activeElement instanceof HTMLInputElement||document.activeElement instanceof HTMLTextAreaElement||document.activeElement instanceof HTMLButtonElement||document.activeElement instanceof HTMLSelectElement)}},{key:"checkScroll",value:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(e||this.isScrolling||this.isDraggingScrollbar){this.hasScrollTicking||(this.checkScrollRaf=requestAnimationFrame((function(){return t.checkScroll()})),this.hasScrollTicking=!0),this.updateScroll();var r=Math.abs(this.instance.delta[this.directionAxis]-this.instance.scroll[this.directionAxis]),n=Date.now()-this.startScrollTs;if(!this.animatingScroll&&n>100&&(r<.5&&0!=this.instance.delta[this.directionAxis]||r<.5&&0==this.instance.delta[this.directionAxis])&&this.stopScrolling(),Object.entries(this.sections).forEach((function(i){var r=El(i,2),n=(r[0],r[1]);n.persistent||t.instance.scroll[t.directionAxis]>n.offset[t.directionAxis]&&t.instance.scroll[t.directionAxis]<n.limit[t.directionAxis]?("horizontal"===t.direction?t.transform(n.el,-t.instance.scroll[t.directionAxis],0):t.transform(n.el,0,-t.instance.scroll[t.directionAxis]),n.inView||(n.inView=!0,n.el.style.opacity=1,n.el.style.pointerEvents="all",n.el.setAttribute("data-".concat(t.name,"-section-inview"),""))):((n.inView||e)&&(n.inView=!1,n.el.style.opacity=0,n.el.style.pointerEvents="none",n.el.removeAttribute("data-".concat(t.name,"-section-inview"))),t.transform(n.el,0,0))})),this.getDirection&&this.addDirection(),this.getSpeed&&(this.addSpeed(),this.speedTs=Date.now()),this.detectElements(),this.transformElements(),this.hasScrollbar){var s=this.instance.scroll[this.directionAxis]/this.instance.limit[this.directionAxis]*this.scrollBarLimit[this.directionAxis];"horizontal"===this.direction?this.transform(this.scrollbarThumb,s,0):this.transform(this.scrollbarThumb,0,s)}Sl(_l(i.prototype),"checkScroll",this).call(this),this.hasScrollTicking=!1}}},{key:"resize",value:function(){this.windowHeight=window.innerHeight,this.windowWidth=window.innerWidth,this.checkContext(),this.windowMiddle={x:this.windowWidth/2,y:this.windowHeight/2},this.update()}},{key:"updateDelta",value:function(t){var e,i=this[this.context]&&this[this.context].gestureDirection?this[this.context].gestureDirection:this.gestureDirection;e="both"===i?t.deltaX+t.deltaY:"vertical"===i?t.deltaY:"horizontal"===i?t.deltaX:t.deltaY,this.instance.delta[this.directionAxis]-=e*this.multiplier,this.instance.delta[this.directionAxis]<0&&(this.instance.delta[this.directionAxis]=0),this.instance.delta[this.directionAxis]>this.instance.limit[this.directionAxis]&&(this.instance.delta[this.directionAxis]=this.instance.limit[this.directionAxis])}},{key:"updateScroll",value:function(t){this.isScrolling||this.isDraggingScrollbar?this.instance.scroll[this.directionAxis]=ec(this.instance.scroll[this.directionAxis],this.instance.delta[this.directionAxis],this.lerp):this.instance.scroll[this.directionAxis]>this.instance.limit[this.directionAxis]?this.setScroll(this.instance.scroll[this.directionAxis],this.instance.limit[this.directionAxis]):this.instance.scroll.y<0?this.setScroll(this.instance.scroll[this.directionAxis],0):this.setScroll(this.instance.scroll[this.directionAxis],this.instance.delta[this.directionAxis])}},{key:"addDirection",value:function(){this.instance.delta.y>this.instance.scroll.y?"down"!==this.instance.direction&&(this.instance.direction="down"):this.instance.delta.y<this.instance.scroll.y&&"up"!==this.instance.direction&&(this.instance.direction="up"),this.instance.delta.x>this.instance.scroll.x?"right"!==this.instance.direction&&(this.instance.direction="right"):this.instance.delta.x<this.instance.scroll.x&&"left"!==this.instance.direction&&(this.instance.direction="left")}},{key:"addSpeed",value:function(){this.instance.delta[this.directionAxis]!=this.instance.scroll[this.directionAxis]?this.instance.speed=(this.instance.delta[this.directionAxis]-this.instance.scroll[this.directionAxis])/Math.max(1,Date.now()-this.speedTs):this.instance.speed=0}},{key:"initScrollBar",value:function(){if(this.scrollbar=document.createElement("span"),this.scrollbarThumb=document.createElement("span"),this.scrollbar.classList.add("".concat(this.scrollbarClass)),this.scrollbarThumb.classList.add("".concat(this.scrollbarClass,"_thumb")),this.scrollbar.append(this.scrollbarThumb),this.scrollbarContainer?this.scrollbarContainer.append(this.scrollbar):document.body.append(this.scrollbar),this.getScrollBar=this.getScrollBar.bind(this),this.releaseScrollBar=this.releaseScrollBar.bind(this),this.moveScrollBar=this.moveScrollBar.bind(this),this.scrollbarThumb.addEventListener("mousedown",this.getScrollBar),window.addEventListener("mouseup",this.releaseScrollBar),window.addEventListener("mousemove",this.moveScrollBar),this.hasScrollbar=!1,"horizontal"==this.direction){if(this.instance.limit.x+this.windowWidth<=this.windowWidth)return}else if(this.instance.limit.y+this.windowHeight<=this.windowHeight)return;this.hasScrollbar=!0,this.scrollbarBCR=this.scrollbar.getBoundingClientRect(),this.scrollbarHeight=this.scrollbarBCR.height,this.scrollbarWidth=this.scrollbarBCR.width,"horizontal"===this.direction?this.scrollbarThumb.style.width="".concat(this.scrollbarWidth*this.scrollbarWidth/(this.instance.limit.x+this.scrollbarWidth),"px"):this.scrollbarThumb.style.height="".concat(this.scrollbarHeight*this.scrollbarHeight/(this.instance.limit.y+this.scrollbarHeight),"px"),this.scrollbarThumbBCR=this.scrollbarThumb.getBoundingClientRect(),this.scrollBarLimit={x:this.scrollbarWidth-this.scrollbarThumbBCR.width,y:this.scrollbarHeight-this.scrollbarThumbBCR.height}}},{key:"reinitScrollBar",value:function(){if(this.hasScrollbar=!1,"horizontal"==this.direction){if(this.instance.limit.x+this.windowWidth<=this.windowWidth)return}else if(this.instance.limit.y+this.windowHeight<=this.windowHeight)return;this.hasScrollbar=!0,this.scrollbarBCR=this.scrollbar.getBoundingClientRect(),this.scrollbarHeight=this.scrollbarBCR.height,this.scrollbarWidth=this.scrollbarBCR.width,"horizontal"===this.direction?this.scrollbarThumb.style.width="".concat(this.scrollbarWidth*this.scrollbarWidth/(this.instance.limit.x+this.scrollbarWidth),"px"):this.scrollbarThumb.style.height="".concat(this.scrollbarHeight*this.scrollbarHeight/(this.instance.limit.y+this.scrollbarHeight),"px"),this.scrollbarThumbBCR=this.scrollbarThumb.getBoundingClientRect(),this.scrollBarLimit={x:this.scrollbarWidth-this.scrollbarThumbBCR.width,y:this.scrollbarHeight-this.scrollbarThumbBCR.height}}},{key:"destroyScrollBar",value:function(){this.scrollbarThumb.removeEventListener("mousedown",this.getScrollBar),window.removeEventListener("mouseup",this.releaseScrollBar),window.removeEventListener("mousemove",this.moveScrollBar),this.scrollbar.remove()}},{key:"getScrollBar",value:function(t){this.isDraggingScrollbar=!0,this.checkScroll(),this.html.classList.remove(this.scrollingClass),this.html.classList.add(this.draggingClass)}},{key:"releaseScrollBar",value:function(t){this.isDraggingScrollbar=!1,this.isScrolling&&this.html.classList.add(this.scrollingClass),this.html.classList.remove(this.draggingClass)}},{key:"moveScrollBar",value:function(t){var e=this;this.isDraggingScrollbar&&requestAnimationFrame((function(){var i=100*(t.clientX-e.scrollbarBCR.left)/e.scrollbarWidth*e.instance.limit.x/100,r=100*(t.clientY-e.scrollbarBCR.top)/e.scrollbarHeight*e.instance.limit.y/100;r>0&&r<e.instance.limit.y&&(e.instance.delta.y=r),i>0&&i<e.instance.limit.x&&(e.instance.delta.x=i)}))}},{key:"addElements",value:function(){var t=this;this.els={},this.parallaxElements={},this.el.querySelectorAll("[data-".concat(this.name,"]")).forEach((function(e,i){var r,n,s,o=rc(e),a=Object.entries(t.sections).map((function(t){var e=El(t,2);e[0];return e[1]})).find((function(t){return o.includes(t.el)})),l=e.dataset[t.name+"Class"]||t.class,c="string"==typeof e.dataset[t.name+"Id"]?e.dataset[t.name+"Id"]:"el"+i,d=e.dataset[t.name+"Repeat"],u=e.dataset[t.name+"Call"],h=e.dataset[t.name+"Position"],p=e.dataset[t.name+"Delay"],f=e.dataset[t.name+"Direction"],m="string"==typeof e.dataset[t.name+"Sticky"],v=!!e.dataset[t.name+"Speed"]&&parseFloat(e.dataset[t.name+"Speed"])/10,g="string"==typeof e.dataset[t.name+"Offset"]?e.dataset[t.name+"Offset"].split(","):t.offset,y=e.dataset[t.name+"Target"],w=(s=void 0!==y?document.querySelector("".concat(y)):e).getBoundingClientRect();null===a||a.inView?(r=w.top+t.instance.scroll.y-ic(s).y,n=w.left+t.instance.scroll.x-ic(s).x):(r=w.top-ic(a.el).y-ic(s).y,n=w.left-ic(a.el).x-ic(s).x);var _=r+s.offsetHeight,b=n+s.offsetWidth,x={x:(b-n)/2+n,y:(_-r)/2+r};if(m){var T=e.getBoundingClientRect(),S=T.top,E=T.left,k={x:E-n,y:S-r};r+=window.innerHeight,n+=window.innerWidth,_=S+s.offsetHeight-e.offsetHeight-k[t.directionAxis],x={x:((b=E+s.offsetWidth-e.offsetWidth-k[t.directionAxis])-n)/2+n,y:(_-r)/2+r}}d="false"!=d&&(null!=d||t.repeat);var M=[0,0];if(g)if("horizontal"===t.direction){for(var C=0;C<g.length;C++)"string"==typeof g[C]?g[C].includes("%")?M[C]=parseInt(g[C].replace("%","")*t.windowWidth/100):M[C]=parseInt(g[C]):M[C]=g[C];n+=M[0],b-=M[1]}else{for(C=0;C<g.length;C++)"string"==typeof g[C]?g[C].includes("%")?M[C]=parseInt(g[C].replace("%","")*t.windowHeight/100):M[C]=parseInt(g[C]):M[C]=g[C];r+=M[0],_-=M[1]}var O={el:e,id:c,class:l,section:a,top:r,middle:x,bottom:_,left:n,right:b,offset:g,progress:0,repeat:d,inView:!1,call:u,speed:v,delay:p,position:h,target:s,direction:f,sticky:m};t.els[c]=O,e.classList.contains(l)&&t.setInView(t.els[c],c),(!1!==v||m)&&(t.parallaxElements[c]=O)}))}},{key:"addSections",value:function(){var t=this;this.sections={};var e=this.el.querySelectorAll("[data-".concat(this.name,"-section]"));0===e.length&&(e=[this.el]),e.forEach((function(e,i){var r="string"==typeof e.dataset[t.name+"Id"]?e.dataset[t.name+"Id"]:"section"+i,n=e.getBoundingClientRect(),s={x:n.left-1.5*window.innerWidth-ic(e).x,y:n.top-1.5*window.innerHeight-ic(e).y},o={x:s.x+n.width+2*window.innerWidth,y:s.y+n.height+2*window.innerHeight},a="string"==typeof e.dataset[t.name+"Persistent"];e.setAttribute("data-scroll-section-id",r);var l={el:e,offset:s,limit:o,inView:!1,persistent:a,id:r};t.sections[r]=l}))}},{key:"transform",value:function(t,e,i,r){var n;if(r){var s=ic(t),o=ec(s.x,e,r),a=ec(s.y,i,r);n="matrix3d(1,0,0.00,0,0.00,1,0.00,0,0,0,1,0,".concat(o,",").concat(a,",0,1)")}else n="matrix3d(1,0,0.00,0,0.00,1,0.00,0,0,0,1,0,".concat(e,",").concat(i,",0,1)");t.style.webkitTransform=n,t.style.msTransform=n,t.style.transform=n}},{key:"transformElements",value:function(t){var e=this,i=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=this.instance.scroll.x+this.windowWidth,n=this.instance.scroll.y+this.windowHeight,s={x:this.instance.scroll.x+this.windowMiddle.x,y:this.instance.scroll.y+this.windowMiddle.y};Object.entries(this.parallaxElements).forEach((function(o){var a=El(o,2),l=(a[0],a[1]),c=!1;if(t&&(c=0),l.inView||i)switch(l.position){case"top":case"left":c=e.instance.scroll[e.directionAxis]*-l.speed;break;case"elementTop":c=(n-l.top)*-l.speed;break;case"bottom":c=(e.instance.limit[e.directionAxis]-n+e.windowHeight)*l.speed;break;case"elementLeft":c=(r-l.left)*-l.speed;break;case"right":c=(e.instance.limit[e.directionAxis]-r+e.windowHeight)*l.speed;break;default:c=(s[e.directionAxis]-l.middle[e.directionAxis])*-l.speed}l.sticky&&(c=l.inView?"horizontal"===e.direction?e.instance.scroll.x-l.left+window.innerWidth:e.instance.scroll.y-l.top+window.innerHeight:"horizontal"===e.direction?e.instance.scroll.x<l.left-window.innerWidth&&e.instance.scroll.x<l.left-window.innerWidth/2?0:e.instance.scroll.x>l.right&&e.instance.scroll.x>l.right+100&&l.right-l.left+window.innerWidth:e.instance.scroll.y<l.top-window.innerHeight&&e.instance.scroll.y<l.top-window.innerHeight/2?0:e.instance.scroll.y>l.bottom&&e.instance.scroll.y>l.bottom+100&&l.bottom-l.top+window.innerHeight),!1!==c&&("horizontal"===l.direction||"horizontal"===e.direction&&"vertical"!==l.direction?e.transform(l.el,c,0,!t&&l.delay):e.transform(l.el,0,c,!t&&l.delay))}))}},{key:"scrollTo",value:function(t){var e=this,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=parseInt(i.offset)||0,n=isNaN(parseInt(i.duration))?1e3:parseInt(i.duration),s=i.easing||[.25,0,.35,1],o=!!i.disableLerp,a=!!i.callback&&i.callback;if(s=hc.apply(void 0,kl(s)),"string"==typeof t){if("top"===t)t=0;else if("bottom"===t)t=this.instance.limit.y;else if("left"===t)t=0;else if("right"===t)t=this.instance.limit.x;else if(!(t=document.querySelector(t)))return}else if("number"==typeof t)t=parseInt(t);else if(!t||!t.tagName)return void console.warn("`target` parameter is not valid");if("number"!=typeof t){if(!rc(t).includes(this.el))return;var l=t.getBoundingClientRect(),c=l.top,d=l.left,u=rc(t).find((function(t){return Object.entries(e.sections).map((function(t){var e=El(t,2);e[0];return e[1]})).find((function(e){return e.el==t}))})),h=0;h=u?ic(u)[this.directionAxis]:-this.instance.scroll[this.directionAxis],r="horizontal"===this.direction?d+r-h:c+r-h}else r=t+r;var p=parseFloat(this.instance.delta[this.directionAxis]),f=Math.max(0,Math.min(r,this.instance.limit[this.directionAxis]))-p,m=function(t){o?"horizontal"===e.direction?e.setScroll(p+f*t,e.instance.delta.y):e.setScroll(e.instance.delta.x,p+f*t):e.instance.delta[e.directionAxis]=p+f*t};this.animatingScroll=!0,this.stopScrolling(),this.startScrolling();var v=Date.now();!function t(){var i=(Date.now()-v)/n;i>1?(m(1),e.animatingScroll=!1,0==n&&e.update(),a&&a()):(e.scrollToRaf=requestAnimationFrame(t),m(s(i)))}()}},{key:"update",value:function(){this.setScrollLimit(),this.addSections(),this.addElements(),this.detectElements(),this.updateScroll(),this.transformElements(!0),this.reinitScrollBar(),this.checkScroll(!0)}},{key:"startScroll",value:function(){this.stop=!1}},{key:"stopScroll",value:function(){this.stop=!0}},{key:"setScroll",value:function(t,e){this.instance=yl(yl({},this.instance),{},{scroll:{x:t,y:e},delta:{x:t,y:e},speed:0})}},{key:"destroy",value:function(){Sl(_l(i.prototype),"destroy",this).call(this),this.stopScrolling(),this.html.classList.remove(this.smoothClass),this.vs.destroy(),this.destroyScrollBar(),window.removeEventListener("keydown",this.checkKey,!1)}}]),i}(Al);const xc=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};pl(this,t),this.options=e,Object.assign(this,Ol,e),this.smartphone=Ol.smartphone,e.smartphone&&Object.assign(this.smartphone,e.smartphone),this.tablet=Ol.tablet,e.tablet&&Object.assign(this.tablet,e.tablet),this.smooth||"horizontal"!=this.direction||console.warn("🚨 `smooth:false` & `horizontal` direction are not yet compatible"),this.tablet.smooth||"horizontal"!=this.tablet.direction||console.warn("🚨 `smooth:false` & `horizontal` direction are not yet compatible (tablet)"),this.smartphone.smooth||"horizontal"!=this.smartphone.direction||console.warn("🚨 `smooth:false` & `horizontal` direction are not yet compatible (smartphone)"),this.init()}return ml(t,[{key:"init",value:function(){if(this.options.isMobile=/Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||"MacIntel"===navigator.platform&&navigator.maxTouchPoints>1||window.innerWidth<this.tablet.breakpoint,this.options.isTablet=this.options.isMobile&&window.innerWidth>=this.tablet.breakpoint,this.smooth&&!this.options.isMobile||this.tablet.smooth&&this.options.isTablet||this.smartphone.smooth&&this.options.isMobile&&!this.options.isTablet?this.scroll=new bc(this.options):this.scroll=new Il(this.options),this.scroll.init(),window.location.hash){var t=window.location.hash.slice(1,window.location.hash.length),e=document.getElementById(t);e&&this.scroll.scrollTo(e)}}},{key:"update",value:function(){this.scroll.update()}},{key:"start",value:function(){this.scroll.startScroll()}},{key:"stop",value:function(){this.scroll.stopScroll()}},{key:"scrollTo",value:function(t,e){this.scroll.scrollTo(t,e)}},{key:"setScroll",value:function(t,e){this.scroll.setScroll(t,e)}},{key:"on",value:function(t,e){this.scroll.setEvents(t,e)}},{key:"off",value:function(t,e){this.scroll.unsetEvents(t,e)}},{key:"destroy",value:function(){this.scroll.destroy()}}]),t}();$n.registerPlugin(el);const Tc=new xc({el:document.querySelector(".wrapper"),smooth:!0,mobile:{smooth:!1},tablet:{smooth:!1,breakpoint:1025}}),Sc={touchStart:()=>{Tc.stop()},touchEnd:()=>{Tc.start()}};window.addEventListener("load",(function(){el.scrollerProxy(Tc.el,{scrollTop(t){return arguments.length?Tc.scrollTo(t,0,0):Tc.scroll.instance.scroll.y},getBoundingClientRect:()=>({top:0,left:0,width:window.innerWidth,height:window.innerHeight}),pinType:Tc.el.style.transform?"transform":"fixed"}),el.addEventListener("refresh",(()=>Tc.update())),el.defaults({scroller:Tc.el}),setTimeout((()=>{el.refresh(),el.update()}),0),document.querySelector(".item-card__swiper")&&ul.add("(min-width: 1024px)",(()=>{const t=document.querySelectorAll(".item-card__thumbs-slide");document.querySelectorAll(".item-card__slide").forEach(((e,i)=>{$n.timeline({scrollTrigger:{trigger:e,start:"top top",end:"bottom bottom",onEnter:e=>{hl(i,t)},onEnterBack:e=>{hl(i,t)}}})}))})),setTimeout((()=>{Tc.update()}),1e3)})),window.addEventListener("resize",(function(){Tc.update()})),document.addEventListener("mouseover",(function(t){t.target.closest("[data-sb]")?Tc.stop():Tc.start()})),document.querySelector(".footer-main__anchor")&&document.querySelector(".footer-main__anchor").addEventListener("click",(function(){Tc.scrollTo(0)})),document.querySelectorAll(".item-card__slide").length&&document.querySelectorAll(".item-card__slide").forEach(((t,e)=>{document.querySelectorAll(".item-card__thumbs-slide")[e].addEventListener("click",(function(){window.innerWidth>1024&&Tc.scrollTo(t,{offset:-1,callback:()=>{hl(e,document.querySelectorAll(".item-card__thumbs-slide"))}})}))})),document.addEventListener("bodyLock",(function(){Tc.stop()})),document.addEventListener("bodyUnlock",(function(){Tc.start()}));const Ec=$n.matchMedia(),kc=t=>{Ec.add("(min-width: 48em)",(()=>(t.classList.contains("header")&&t.classList.add("fixed"),t.setAttribute("data-scroll",""),t.setAttribute("data-scroll-sticky",""),t.setAttribute("data-scroll-target","#item-card"),()=>{t.classList.contains("header")&&t.classList.remove("fixed"),t.removeAttribute("style"),t.removeAttribute("data-scroll"),t.removeAttribute("data-scroll-sticky"),t.removeAttribute("data-scroll-target")})))};document.querySelector(".item-card__thumbs-swiper")&&new J(".item-card__thumbs-swiper",{loop:!0,slidesPerView:"auto",spaceBetween:8}),Ec.add("(max-width: 48em)",(()=>{const t=document.querySelector(".item-card__swiper")?new J(".item-card__swiper",{modules:[tt],loop:!0,navigation:{prevEl:".item-card__slider-btn_prev",nextEl:".item-card__slider-btn_next"},on:{init:t=>{const e=document.querySelectorAll(".item-card__thumbs-slide");e.length&&e.forEach(((i,r)=>{i.addEventListener("click",(function(){t.slideTo(r),hl(r,e)}))}))},slideChange:t=>{document.querySelectorAll(".item-card__thumbs-slide").length&&hl(t.activeIndex,document.querySelectorAll(".item-card__thumbs-slide"))},...Sc}}):null;return()=>{t&&t.destroy()}})),document.addEventListener("DOMContentLoaded",(function(){document.querySelector(".header").classList.add("fixed"),kc(document.querySelector(".header")),kc(document.querySelector(".item-card__thumbs-swiper")),kc(document.querySelector(".item-card__content"))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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aUJBQWlCLDRCQUE0QmYsUUFDeERteUUsR0FDRWxyRSxFQUFPcUosWUFDUGpPLFNBQVN0QixpQkFBaUIsNEJBRTlCLEtBR0Nzb0YsTUFHUCxLQUVKLE1BQU8sS0FDTEssR0FBWUEsRUFBUzUzRCxTQUFTLENBQy9CLElBR0h6dkIsU0FBUzVCLGlCQUFpQixvQkFBb0IsV0FDNUM0QixTQUFTdkIsY0FBYyxXQUFXeUksVUFBVUMsSUFBSSxTQUVoRGlnRixHQUFrQnBuRixTQUFTdkIsY0FBYyxZQUN6QzJvRixHQUFrQnBuRixTQUFTdkIsY0FBYyw4QkFDekMyb0YsR0FBa0JwbkYsU0FBU3ZCLGNBQWMsdUJBQzNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2VicGFjay1zZXR1cC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly93ZWJwYWNrLXNldHVwLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9zaGFyZWQvc3NyLXdpbmRvdy5lc20ubWpzIiwid2VicGFjazovL3dlYnBhY2stc2V0dXAvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly93ZWJwYWNrLXNldHVwLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9zaGFyZWQvdXRpbHMubWpzIiwid2VicGFjazovL3dlYnBhY2stc2V0dXAvLi9ub2RlX21vZHVsZXMvc3dpcGVyL3NoYXJlZC9zd2lwZXItY29yZS5tanMiLCJ3ZWJwYWNrOi8vd2VicGFjay1zZXR1cC8uL25vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9uYXZpZ2F0aW9uLm1qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXNldHVwLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9zaGFyZWQvY3JlYXRlLWVsZW1lbnQtaWYtbm90LWRlZmluZWQubWpzIiwid2VicGFjazovL3dlYnBhY2stc2V0dXAvLi9ub2RlX21vZHVsZXMvZ3NhcC9nc2FwLWNvcmUuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay1zZXR1cC8uL25vZGVfbW9kdWxlcy9nc2FwL0NTU1BsdWdpbi5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXNldHVwLy4vbm9kZV9tb2R1bGVzL2dzYXAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2VicGFjay1zZXR1cC8uL25vZGVfbW9kdWxlcy9nc2FwL09ic2VydmVyLmpzIiwid2VicGFjazovL3dlYnBhY2stc2V0dXAvLi9ub2RlX21vZHVsZXMvZ3NhcC9TY3JvbGxUcmlnZ2VyLmpzIiwid2VicGFjazovL3dlYnBhY2stc2V0dXAvLi9zcmMvanMvYW5pbS9pdGVtLWNhcmQtY2Fyb3VzZWwuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay1zZXR1cC8uL3NyYy9qcy91dGlscy91dGlscy5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXNldHVwLy4vbm9kZV9tb2R1bGVzL2xvY29tb3RpdmUtc2Nyb2xsL2Rpc3QvbG9jb21vdGl2ZS1zY3JvbGwuZXNtLmpzIiwid2VicGFjazovL3dlYnBhY2stc2V0dXAvLi9zcmMvanMvbGliL2xvY29tb3RpdmUtc2Nyb2xsLmpzIiwid2VicGFjazovL3dlYnBhY2stc2V0dXAvLi9zcmMvanMvcGFnZXMvaXRlbS1jYXJkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRoZSByZXF1aXJlIHNjb3BlXG52YXIgX193ZWJwYWNrX3JlcXVpcmVfXyA9IHt9O1xuXG4iLCIvKipcbiAqIFNTUiBXaW5kb3cgNC4wLjJcbiAqIEJldHRlciBoYW5kbGluZyBmb3Igd2luZG93IG9iamVjdCBpbiBTU1IgZW52aXJvbm1lbnRcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2xpbWl0czR3ZWIvc3NyLXdpbmRvd1xuICpcbiAqIENvcHlyaWdodCAyMDIxLCBWbGFkaW1pciBLaGFybGFtcGlkaVxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVFxuICpcbiAqIFJlbGVhc2VkIG9uOiBEZWNlbWJlciAxMywgMjAyMVxuICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wYXJhbS1yZWFzc2lnbiAqL1xuZnVuY3Rpb24gaXNPYmplY3Qob2JqKSB7XG4gIHJldHVybiBvYmogIT09IG51bGwgJiYgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiYgJ2NvbnN0cnVjdG9yJyBpbiBvYmogJiYgb2JqLmNvbnN0cnVjdG9yID09PSBPYmplY3Q7XG59XG5mdW5jdGlvbiBleHRlbmQodGFyZ2V0LCBzcmMpIHtcbiAgaWYgKHRhcmdldCA9PT0gdm9pZCAwKSB7XG4gICAgdGFyZ2V0ID0ge307XG4gIH1cbiAgaWYgKHNyYyA9PT0gdm9pZCAwKSB7XG4gICAgc3JjID0ge307XG4gIH1cbiAgT2JqZWN0LmtleXMoc3JjKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgaWYgKHR5cGVvZiB0YXJnZXRba2V5XSA9PT0gJ3VuZGVmaW5lZCcpIHRhcmdldFtrZXldID0gc3JjW2tleV07ZWxzZSBpZiAoaXNPYmplY3Qoc3JjW2tleV0pICYmIGlzT2JqZWN0KHRhcmdldFtrZXldKSAmJiBPYmplY3Qua2V5cyhzcmNba2V5XSkubGVuZ3RoID4gMCkge1xuICAgICAgZXh0ZW5kKHRhcmdldFtrZXldLCBzcmNba2V5XSk7XG4gICAgfVxuICB9KTtcbn1cbmNvbnN0IHNzckRvY3VtZW50ID0ge1xuICBib2R5OiB7fSxcbiAgYWRkRXZlbnRMaXN0ZW5lcigpIHt9LFxuICByZW1vdmVFdmVudExpc3RlbmVyKCkge30sXG4gIGFjdGl2ZUVsZW1lbnQ6IHtcbiAgICBibHVyKCkge30sXG4gICAgbm9kZU5hbWU6ICcnXG4gIH0sXG4gIHF1ZXJ5U2VsZWN0b3IoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG4gIHF1ZXJ5U2VsZWN0b3JBbGwoKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9LFxuICBnZXRFbGVtZW50QnlJZCgpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcbiAgY3JlYXRlRXZlbnQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGluaXRFdmVudCgpIHt9XG4gICAgfTtcbiAgfSxcbiAgY3JlYXRlRWxlbWVudCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY2hpbGRyZW46IFtdLFxuICAgICAgY2hpbGROb2RlczogW10sXG4gICAgICBzdHlsZToge30sXG4gICAgICBzZXRBdHRyaWJ1dGUoKSB7fSxcbiAgICAgIGdldEVsZW1lbnRzQnlUYWdOYW1lKCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgfTtcbiAgfSxcbiAgY3JlYXRlRWxlbWVudE5TKCkge1xuICAgIHJldHVybiB7fTtcbiAgfSxcbiAgaW1wb3J0Tm9kZSgpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcbiAgbG9jYXRpb246IHtcbiAgICBoYXNoOiAnJyxcbiAgICBob3N0OiAnJyxcbiAgICBob3N0bmFtZTogJycsXG4gICAgaHJlZjogJycsXG4gICAgb3JpZ2luOiAnJyxcbiAgICBwYXRobmFtZTogJycsXG4gICAgcHJvdG9jb2w6ICcnLFxuICAgIHNlYXJjaDogJydcbiAgfVxufTtcbmZ1bmN0aW9uIGdldERvY3VtZW50KCkge1xuICBjb25zdCBkb2MgPSB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnID8gZG9jdW1lbnQgOiB7fTtcbiAgZXh0ZW5kKGRvYywgc3NyRG9jdW1lbnQpO1xuICByZXR1cm4gZG9jO1xufVxuY29uc3Qgc3NyV2luZG93ID0ge1xuICBkb2N1bWVudDogc3NyRG9jdW1lbnQsXG4gIG5hdmlnYXRvcjoge1xuICAgIHVzZXJBZ2VudDogJydcbiAgfSxcbiAgbG9jYXRpb246IHtcbiAgICBoYXNoOiAnJyxcbiAgICBob3N0OiAnJyxcbiAgICBob3N0bmFtZTogJycsXG4gICAgaHJlZjogJycsXG4gICAgb3JpZ2luOiAnJyxcbiAgICBwYXRobmFtZTogJycsXG4gICAgcHJvdG9jb2w6ICcnLFxuICAgIHNlYXJjaDogJydcbiAgfSxcbiAgaGlzdG9yeToge1xuICAgIHJlcGxhY2VTdGF0ZSgpIHt9LFxuICAgIHB1c2hTdGF0ZSgpIHt9LFxuICAgIGdvKCkge30sXG4gICAgYmFjaygpIHt9XG4gIH0sXG4gIEN1c3RvbUV2ZW50OiBmdW5jdGlvbiBDdXN0b21FdmVudCgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgYWRkRXZlbnRMaXN0ZW5lcigpIHt9LFxuICByZW1vdmVFdmVudExpc3RlbmVyKCkge30sXG4gIGdldENvbXB1dGVkU3R5bGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGdldFByb3BlcnR5VmFsdWUoKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICB9O1xuICB9LFxuICBJbWFnZSgpIHt9LFxuICBEYXRlKCkge30sXG4gIHNjcmVlbjoge30sXG4gIHNldFRpbWVvdXQoKSB7fSxcbiAgY2xlYXJUaW1lb3V0KCkge30sXG4gIG1hdGNoTWVkaWEoKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9LFxuICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoY2FsbGJhY2spIHtcbiAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjYWxsYmFjaygpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBzZXRUaW1lb3V0KGNhbGxiYWNrLCAwKTtcbiAgfSxcbiAgY2FuY2VsQW5pbWF0aW9uRnJhbWUoaWQpIHtcbiAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNsZWFyVGltZW91dChpZCk7XG4gIH1cbn07XG5mdW5jdGlvbiBnZXRXaW5kb3coKSB7XG4gIGNvbnN0IHdpbiA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDoge307XG4gIGV4dGVuZCh3aW4sIHNzcldpbmRvdyk7XG4gIHJldHVybiB3aW47XG59XG5cbmV4cG9ydCB7IGdldFdpbmRvdyBhcyBhLCBnZXREb2N1bWVudCBhcyBnIH07XG4iLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsImltcG9ydCB7IGEgYXMgZ2V0V2luZG93LCBnIGFzIGdldERvY3VtZW50IH0gZnJvbSAnLi9zc3Itd2luZG93LmVzbS5tanMnO1xuXG5mdW5jdGlvbiBjbGFzc2VzVG9Ub2tlbnMoY2xhc3Nlcykge1xuICBpZiAoY2xhc3NlcyA9PT0gdm9pZCAwKSB7XG4gICAgY2xhc3NlcyA9ICcnO1xuICB9XG4gIHJldHVybiBjbGFzc2VzLnRyaW0oKS5zcGxpdCgnICcpLmZpbHRlcihjID0+ICEhYy50cmltKCkpO1xufVxuXG5mdW5jdGlvbiBkZWxldGVQcm9wcyhvYmopIHtcbiAgY29uc3Qgb2JqZWN0ID0gb2JqO1xuICBPYmplY3Qua2V5cyhvYmplY3QpLmZvckVhY2goa2V5ID0+IHtcbiAgICB0cnkge1xuICAgICAgb2JqZWN0W2tleV0gPSBudWxsO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIG5vIGdldHRlciBmb3Igb2JqZWN0XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBkZWxldGUgb2JqZWN0W2tleV07XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gc29tZXRoaW5nIGdvdCB3cm9uZ1xuICAgIH1cbiAgfSk7XG59XG5mdW5jdGlvbiBuZXh0VGljayhjYWxsYmFjaywgZGVsYXkpIHtcbiAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHtcbiAgICBkZWxheSA9IDA7XG4gIH1cbiAgcmV0dXJuIHNldFRpbWVvdXQoY2FsbGJhY2ssIGRlbGF5KTtcbn1cbmZ1bmN0aW9uIG5vdygpIHtcbiAgcmV0dXJuIERhdGUubm93KCk7XG59XG5mdW5jdGlvbiBnZXRDb21wdXRlZFN0eWxlKGVsKSB7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBsZXQgc3R5bGU7XG4gIGlmICh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSkge1xuICAgIHN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwsIG51bGwpO1xuICB9XG4gIGlmICghc3R5bGUgJiYgZWwuY3VycmVudFN0eWxlKSB7XG4gICAgc3R5bGUgPSBlbC5jdXJyZW50U3R5bGU7XG4gIH1cbiAgaWYgKCFzdHlsZSkge1xuICAgIHN0eWxlID0gZWwuc3R5bGU7XG4gIH1cbiAgcmV0dXJuIHN0eWxlO1xufVxuZnVuY3Rpb24gZ2V0VHJhbnNsYXRlKGVsLCBheGlzKSB7XG4gIGlmIChheGlzID09PSB2b2lkIDApIHtcbiAgICBheGlzID0gJ3gnO1xuICB9XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBsZXQgbWF0cml4O1xuICBsZXQgY3VyVHJhbnNmb3JtO1xuICBsZXQgdHJhbnNmb3JtTWF0cml4O1xuICBjb25zdCBjdXJTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoZWwpO1xuICBpZiAod2luZG93LldlYktpdENTU01hdHJpeCkge1xuICAgIGN1clRyYW5zZm9ybSA9IGN1clN0eWxlLnRyYW5zZm9ybSB8fCBjdXJTdHlsZS53ZWJraXRUcmFuc2Zvcm07XG4gICAgaWYgKGN1clRyYW5zZm9ybS5zcGxpdCgnLCcpLmxlbmd0aCA+IDYpIHtcbiAgICAgIGN1clRyYW5zZm9ybSA9IGN1clRyYW5zZm9ybS5zcGxpdCgnLCAnKS5tYXAoYSA9PiBhLnJlcGxhY2UoJywnLCAnLicpKS5qb2luKCcsICcpO1xuICAgIH1cbiAgICAvLyBTb21lIG9sZCB2ZXJzaW9ucyBvZiBXZWJraXQgY2hva2Ugd2hlbiAnbm9uZScgaXMgcGFzc2VkOyBwYXNzXG4gICAgLy8gZW1wdHkgc3RyaW5nIGluc3RlYWQgaW4gdGhpcyBjYXNlXG4gICAgdHJhbnNmb3JtTWF0cml4ID0gbmV3IHdpbmRvdy5XZWJLaXRDU1NNYXRyaXgoY3VyVHJhbnNmb3JtID09PSAnbm9uZScgPyAnJyA6IGN1clRyYW5zZm9ybSk7XG4gIH0gZWxzZSB7XG4gICAgdHJhbnNmb3JtTWF0cml4ID0gY3VyU3R5bGUuTW96VHJhbnNmb3JtIHx8IGN1clN0eWxlLk9UcmFuc2Zvcm0gfHwgY3VyU3R5bGUuTXNUcmFuc2Zvcm0gfHwgY3VyU3R5bGUubXNUcmFuc2Zvcm0gfHwgY3VyU3R5bGUudHJhbnNmb3JtIHx8IGN1clN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ3RyYW5zZm9ybScpLnJlcGxhY2UoJ3RyYW5zbGF0ZSgnLCAnbWF0cml4KDEsIDAsIDAsIDEsJyk7XG4gICAgbWF0cml4ID0gdHJhbnNmb3JtTWF0cml4LnRvU3RyaW5nKCkuc3BsaXQoJywnKTtcbiAgfVxuICBpZiAoYXhpcyA9PT0gJ3gnKSB7XG4gICAgLy8gTGF0ZXN0IENocm9tZSBhbmQgd2Via2l0cyBGaXhcbiAgICBpZiAod2luZG93LldlYktpdENTU01hdHJpeCkgY3VyVHJhbnNmb3JtID0gdHJhbnNmb3JtTWF0cml4Lm00MTtcbiAgICAvLyBDcmF6eSBJRTEwIE1hdHJpeFxuICAgIGVsc2UgaWYgKG1hdHJpeC5sZW5ndGggPT09IDE2KSBjdXJUcmFuc2Zvcm0gPSBwYXJzZUZsb2F0KG1hdHJpeFsxMl0pO1xuICAgIC8vIE5vcm1hbCBCcm93c2Vyc1xuICAgIGVsc2UgY3VyVHJhbnNmb3JtID0gcGFyc2VGbG9hdChtYXRyaXhbNF0pO1xuICB9XG4gIGlmIChheGlzID09PSAneScpIHtcbiAgICAvLyBMYXRlc3QgQ2hyb21lIGFuZCB3ZWJraXRzIEZpeFxuICAgIGlmICh3aW5kb3cuV2ViS2l0Q1NTTWF0cml4KSBjdXJUcmFuc2Zvcm0gPSB0cmFuc2Zvcm1NYXRyaXgubTQyO1xuICAgIC8vIENyYXp5IElFMTAgTWF0cml4XG4gICAgZWxzZSBpZiAobWF0cml4Lmxlbmd0aCA9PT0gMTYpIGN1clRyYW5zZm9ybSA9IHBhcnNlRmxvYXQobWF0cml4WzEzXSk7XG4gICAgLy8gTm9ybWFsIEJyb3dzZXJzXG4gICAgZWxzZSBjdXJUcmFuc2Zvcm0gPSBwYXJzZUZsb2F0KG1hdHJpeFs1XSk7XG4gIH1cbiAgcmV0dXJuIGN1clRyYW5zZm9ybSB8fCAwO1xufVxuZnVuY3Rpb24gaXNPYmplY3Qobykge1xuICByZXR1cm4gdHlwZW9mIG8gPT09ICdvYmplY3QnICYmIG8gIT09IG51bGwgJiYgby5jb25zdHJ1Y3RvciAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpID09PSAnT2JqZWN0Jztcbn1cbmZ1bmN0aW9uIGlzTm9kZShub2RlKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5IVE1MRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbm9kZSBpbnN0YW5jZW9mIEhUTUxFbGVtZW50O1xuICB9XG4gIHJldHVybiBub2RlICYmIChub2RlLm5vZGVUeXBlID09PSAxIHx8IG5vZGUubm9kZVR5cGUgPT09IDExKTtcbn1cbmZ1bmN0aW9uIGV4dGVuZCgpIHtcbiAgY29uc3QgdG8gPSBPYmplY3QoYXJndW1lbnRzLmxlbmd0aCA8PSAwID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzBdKTtcbiAgY29uc3Qgbm9FeHRlbmQgPSBbJ19fcHJvdG9fXycsICdjb25zdHJ1Y3RvcicsICdwcm90b3R5cGUnXTtcbiAgZm9yIChsZXQgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25zdCBuZXh0U291cmNlID0gaSA8IDAgfHwgYXJndW1lbnRzLmxlbmd0aCA8PSBpID8gdW5kZWZpbmVkIDogYXJndW1lbnRzW2ldO1xuICAgIGlmIChuZXh0U291cmNlICE9PSB1bmRlZmluZWQgJiYgbmV4dFNvdXJjZSAhPT0gbnVsbCAmJiAhaXNOb2RlKG5leHRTb3VyY2UpKSB7XG4gICAgICBjb25zdCBrZXlzQXJyYXkgPSBPYmplY3Qua2V5cyhPYmplY3QobmV4dFNvdXJjZSkpLmZpbHRlcihrZXkgPT4gbm9FeHRlbmQuaW5kZXhPZihrZXkpIDwgMCk7XG4gICAgICBmb3IgKGxldCBuZXh0SW5kZXggPSAwLCBsZW4gPSBrZXlzQXJyYXkubGVuZ3RoOyBuZXh0SW5kZXggPCBsZW47IG5leHRJbmRleCArPSAxKSB7XG4gICAgICAgIGNvbnN0IG5leHRLZXkgPSBrZXlzQXJyYXlbbmV4dEluZGV4XTtcbiAgICAgICAgY29uc3QgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobmV4dFNvdXJjZSwgbmV4dEtleSk7XG4gICAgICAgIGlmIChkZXNjICE9PSB1bmRlZmluZWQgJiYgZGVzYy5lbnVtZXJhYmxlKSB7XG4gICAgICAgICAgaWYgKGlzT2JqZWN0KHRvW25leHRLZXldKSAmJiBpc09iamVjdChuZXh0U291cmNlW25leHRLZXldKSkge1xuICAgICAgICAgICAgaWYgKG5leHRTb3VyY2VbbmV4dEtleV0uX19zd2lwZXJfXykge1xuICAgICAgICAgICAgICB0b1tuZXh0S2V5XSA9IG5leHRTb3VyY2VbbmV4dEtleV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBleHRlbmQodG9bbmV4dEtleV0sIG5leHRTb3VyY2VbbmV4dEtleV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoIWlzT2JqZWN0KHRvW25leHRLZXldKSAmJiBpc09iamVjdChuZXh0U291cmNlW25leHRLZXldKSkge1xuICAgICAgICAgICAgdG9bbmV4dEtleV0gPSB7fTtcbiAgICAgICAgICAgIGlmIChuZXh0U291cmNlW25leHRLZXldLl9fc3dpcGVyX18pIHtcbiAgICAgICAgICAgICAgdG9bbmV4dEtleV0gPSBuZXh0U291cmNlW25leHRLZXldO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZXh0ZW5kKHRvW25leHRLZXldLCBuZXh0U291cmNlW25leHRLZXldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdG9bbmV4dEtleV0gPSBuZXh0U291cmNlW25leHRLZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gdG87XG59XG5mdW5jdGlvbiBzZXRDU1NQcm9wZXJ0eShlbCwgdmFyTmFtZSwgdmFyVmFsdWUpIHtcbiAgZWwuc3R5bGUuc2V0UHJvcGVydHkodmFyTmFtZSwgdmFyVmFsdWUpO1xufVxuZnVuY3Rpb24gYW5pbWF0ZUNTU01vZGVTY3JvbGwoX3JlZikge1xuICBsZXQge1xuICAgIHN3aXBlcixcbiAgICB0YXJnZXRQb3NpdGlvbixcbiAgICBzaWRlXG4gIH0gPSBfcmVmO1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgY29uc3Qgc3RhcnRQb3NpdGlvbiA9IC1zd2lwZXIudHJhbnNsYXRlO1xuICBsZXQgc3RhcnRUaW1lID0gbnVsbDtcbiAgbGV0IHRpbWU7XG4gIGNvbnN0IGR1cmF0aW9uID0gc3dpcGVyLnBhcmFtcy5zcGVlZDtcbiAgc3dpcGVyLndyYXBwZXJFbC5zdHlsZS5zY3JvbGxTbmFwVHlwZSA9ICdub25lJztcbiAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKHN3aXBlci5jc3NNb2RlRnJhbWVJRCk7XG4gIGNvbnN0IGRpciA9IHRhcmdldFBvc2l0aW9uID4gc3RhcnRQb3NpdGlvbiA/ICduZXh0JyA6ICdwcmV2JztcbiAgY29uc3QgaXNPdXRPZkJvdW5kID0gKGN1cnJlbnQsIHRhcmdldCkgPT4ge1xuICAgIHJldHVybiBkaXIgPT09ICduZXh0JyAmJiBjdXJyZW50ID49IHRhcmdldCB8fCBkaXIgPT09ICdwcmV2JyAmJiBjdXJyZW50IDw9IHRhcmdldDtcbiAgfTtcbiAgY29uc3QgYW5pbWF0ZSA9ICgpID0+IHtcbiAgICB0aW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgaWYgKHN0YXJ0VGltZSA9PT0gbnVsbCkge1xuICAgICAgc3RhcnRUaW1lID0gdGltZTtcbiAgICB9XG4gICAgY29uc3QgcHJvZ3Jlc3MgPSBNYXRoLm1heChNYXRoLm1pbigodGltZSAtIHN0YXJ0VGltZSkgLyBkdXJhdGlvbiwgMSksIDApO1xuICAgIGNvbnN0IGVhc2VQcm9ncmVzcyA9IDAuNSAtIE1hdGguY29zKHByb2dyZXNzICogTWF0aC5QSSkgLyAyO1xuICAgIGxldCBjdXJyZW50UG9zaXRpb24gPSBzdGFydFBvc2l0aW9uICsgZWFzZVByb2dyZXNzICogKHRhcmdldFBvc2l0aW9uIC0gc3RhcnRQb3NpdGlvbik7XG4gICAgaWYgKGlzT3V0T2ZCb3VuZChjdXJyZW50UG9zaXRpb24sIHRhcmdldFBvc2l0aW9uKSkge1xuICAgICAgY3VycmVudFBvc2l0aW9uID0gdGFyZ2V0UG9zaXRpb247XG4gICAgfVxuICAgIHN3aXBlci53cmFwcGVyRWwuc2Nyb2xsVG8oe1xuICAgICAgW3NpZGVdOiBjdXJyZW50UG9zaXRpb25cbiAgICB9KTtcbiAgICBpZiAoaXNPdXRPZkJvdW5kKGN1cnJlbnRQb3NpdGlvbiwgdGFyZ2V0UG9zaXRpb24pKSB7XG4gICAgICBzd2lwZXIud3JhcHBlckVsLnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7XG4gICAgICBzd2lwZXIud3JhcHBlckVsLnN0eWxlLnNjcm9sbFNuYXBUeXBlID0gJyc7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgc3dpcGVyLndyYXBwZXJFbC5zdHlsZS5vdmVyZmxvdyA9ICcnO1xuICAgICAgICBzd2lwZXIud3JhcHBlckVsLnNjcm9sbFRvKHtcbiAgICAgICAgICBbc2lkZV06IGN1cnJlbnRQb3NpdGlvblxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKHN3aXBlci5jc3NNb2RlRnJhbWVJRCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHN3aXBlci5jc3NNb2RlRnJhbWVJRCA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYW5pbWF0ZSk7XG4gIH07XG4gIGFuaW1hdGUoKTtcbn1cbmZ1bmN0aW9uIGdldFNsaWRlVHJhbnNmb3JtRWwoc2xpZGVFbCkge1xuICByZXR1cm4gc2xpZGVFbC5xdWVyeVNlbGVjdG9yKCcuc3dpcGVyLXNsaWRlLXRyYW5zZm9ybScpIHx8IHNsaWRlRWwuc2hhZG93Um9vdCAmJiBzbGlkZUVsLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcignLnN3aXBlci1zbGlkZS10cmFuc2Zvcm0nKSB8fCBzbGlkZUVsO1xufVxuZnVuY3Rpb24gZWxlbWVudENoaWxkcmVuKGVsZW1lbnQsIHNlbGVjdG9yKSB7XG4gIGlmIChzZWxlY3RvciA9PT0gdm9pZCAwKSB7XG4gICAgc2VsZWN0b3IgPSAnJztcbiAgfVxuICByZXR1cm4gWy4uLmVsZW1lbnQuY2hpbGRyZW5dLmZpbHRlcihlbCA9PiBlbC5tYXRjaGVzKHNlbGVjdG9yKSk7XG59XG5mdW5jdGlvbiBzaG93V2FybmluZyh0ZXh0KSB7XG4gIHRyeSB7XG4gICAgY29uc29sZS53YXJuKHRleHQpO1xuICAgIHJldHVybjtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gZXJyXG4gIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQodGFnLCBjbGFzc2VzKSB7XG4gIGlmIChjbGFzc2VzID09PSB2b2lkIDApIHtcbiAgICBjbGFzc2VzID0gW107XG4gIH1cbiAgY29uc3QgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZyk7XG4gIGVsLmNsYXNzTGlzdC5hZGQoLi4uKEFycmF5LmlzQXJyYXkoY2xhc3NlcykgPyBjbGFzc2VzIDogY2xhc3Nlc1RvVG9rZW5zKGNsYXNzZXMpKSk7XG4gIHJldHVybiBlbDtcbn1cbmZ1bmN0aW9uIGVsZW1lbnRPZmZzZXQoZWwpIHtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgY29uc3QgYm94ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIGNvbnN0IGJvZHkgPSBkb2N1bWVudC5ib2R5O1xuICBjb25zdCBjbGllbnRUb3AgPSBlbC5jbGllbnRUb3AgfHwgYm9keS5jbGllbnRUb3AgfHwgMDtcbiAgY29uc3QgY2xpZW50TGVmdCA9IGVsLmNsaWVudExlZnQgfHwgYm9keS5jbGllbnRMZWZ0IHx8IDA7XG4gIGNvbnN0IHNjcm9sbFRvcCA9IGVsID09PSB3aW5kb3cgPyB3aW5kb3cuc2Nyb2xsWSA6IGVsLnNjcm9sbFRvcDtcbiAgY29uc3Qgc2Nyb2xsTGVmdCA9IGVsID09PSB3aW5kb3cgPyB3aW5kb3cuc2Nyb2xsWCA6IGVsLnNjcm9sbExlZnQ7XG4gIHJldHVybiB7XG4gICAgdG9wOiBib3gudG9wICsgc2Nyb2xsVG9wIC0gY2xpZW50VG9wLFxuICAgIGxlZnQ6IGJveC5sZWZ0ICsgc2Nyb2xsTGVmdCAtIGNsaWVudExlZnRcbiAgfTtcbn1cbmZ1bmN0aW9uIGVsZW1lbnRQcmV2QWxsKGVsLCBzZWxlY3Rvcikge1xuICBjb25zdCBwcmV2RWxzID0gW107XG4gIHdoaWxlIChlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nKSB7XG4gICAgY29uc3QgcHJldiA9IGVsLnByZXZpb3VzRWxlbWVudFNpYmxpbmc7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgIGlmIChwcmV2Lm1hdGNoZXMoc2VsZWN0b3IpKSBwcmV2RWxzLnB1c2gocHJldik7XG4gICAgfSBlbHNlIHByZXZFbHMucHVzaChwcmV2KTtcbiAgICBlbCA9IHByZXY7XG4gIH1cbiAgcmV0dXJuIHByZXZFbHM7XG59XG5mdW5jdGlvbiBlbGVtZW50TmV4dEFsbChlbCwgc2VsZWN0b3IpIHtcbiAgY29uc3QgbmV4dEVscyA9IFtdO1xuICB3aGlsZSAoZWwubmV4dEVsZW1lbnRTaWJsaW5nKSB7XG4gICAgY29uc3QgbmV4dCA9IGVsLm5leHRFbGVtZW50U2libGluZzsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgaWYgKG5leHQubWF0Y2hlcyhzZWxlY3RvcikpIG5leHRFbHMucHVzaChuZXh0KTtcbiAgICB9IGVsc2UgbmV4dEVscy5wdXNoKG5leHQpO1xuICAgIGVsID0gbmV4dDtcbiAgfVxuICByZXR1cm4gbmV4dEVscztcbn1cbmZ1bmN0aW9uIGVsZW1lbnRTdHlsZShlbCwgcHJvcCkge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgcmV0dXJuIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKHByb3ApO1xufVxuZnVuY3Rpb24gZWxlbWVudEluZGV4KGVsKSB7XG4gIGxldCBjaGlsZCA9IGVsO1xuICBsZXQgaTtcbiAgaWYgKGNoaWxkKSB7XG4gICAgaSA9IDA7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgd2hpbGUgKChjaGlsZCA9IGNoaWxkLnByZXZpb3VzU2libGluZykgIT09IG51bGwpIHtcbiAgICAgIGlmIChjaGlsZC5ub2RlVHlwZSA9PT0gMSkgaSArPSAxO1xuICAgIH1cbiAgICByZXR1cm4gaTtcbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuZnVuY3Rpb24gZWxlbWVudFBhcmVudHMoZWwsIHNlbGVjdG9yKSB7XG4gIGNvbnN0IHBhcmVudHMgPSBbXTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICBsZXQgcGFyZW50ID0gZWwucGFyZW50RWxlbWVudDsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICB3aGlsZSAocGFyZW50KSB7XG4gICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICBpZiAocGFyZW50Lm1hdGNoZXMoc2VsZWN0b3IpKSBwYXJlbnRzLnB1c2gocGFyZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGFyZW50cy5wdXNoKHBhcmVudCk7XG4gICAgfVxuICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnRFbGVtZW50O1xuICB9XG4gIHJldHVybiBwYXJlbnRzO1xufVxuZnVuY3Rpb24gZWxlbWVudFRyYW5zaXRpb25FbmQoZWwsIGNhbGxiYWNrKSB7XG4gIGZ1bmN0aW9uIGZpcmVDYWxsQmFjayhlKSB7XG4gICAgaWYgKGUudGFyZ2V0ICE9PSBlbCkgcmV0dXJuO1xuICAgIGNhbGxiYWNrLmNhbGwoZWwsIGUpO1xuICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBmaXJlQ2FsbEJhY2spO1xuICB9XG4gIGlmIChjYWxsYmFjaykge1xuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBmaXJlQ2FsbEJhY2spO1xuICB9XG59XG5mdW5jdGlvbiBlbGVtZW50T3V0ZXJTaXplKGVsLCBzaXplLCBpbmNsdWRlTWFyZ2lucykge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgaWYgKGluY2x1ZGVNYXJnaW5zKSB7XG4gICAgcmV0dXJuIGVsW3NpemUgPT09ICd3aWR0aCcgPyAnb2Zmc2V0V2lkdGgnIDogJ29mZnNldEhlaWdodCddICsgcGFyc2VGbG9hdCh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZShzaXplID09PSAnd2lkdGgnID8gJ21hcmdpbi1yaWdodCcgOiAnbWFyZ2luLXRvcCcpKSArIHBhcnNlRmxvYXQod2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwsIG51bGwpLmdldFByb3BlcnR5VmFsdWUoc2l6ZSA9PT0gJ3dpZHRoJyA/ICdtYXJnaW4tbGVmdCcgOiAnbWFyZ2luLWJvdHRvbScpKTtcbiAgfVxuICByZXR1cm4gZWwub2Zmc2V0V2lkdGg7XG59XG5mdW5jdGlvbiBtYWtlRWxlbWVudHNBcnJheShlbCkge1xuICByZXR1cm4gKEFycmF5LmlzQXJyYXkoZWwpID8gZWwgOiBbZWxdKS5maWx0ZXIoZSA9PiAhIWUpO1xufVxuXG5leHBvcnQgeyBlbGVtZW50UGFyZW50cyBhcyBhLCBlbGVtZW50T2Zmc2V0IGFzIGIsIGNyZWF0ZUVsZW1lbnQgYXMgYywgbm93IGFzIGQsIGVsZW1lbnRDaGlsZHJlbiBhcyBlLCBlbGVtZW50T3V0ZXJTaXplIGFzIGYsIGdldFNsaWRlVHJhbnNmb3JtRWwgYXMgZywgZWxlbWVudEluZGV4IGFzIGgsIGNsYXNzZXNUb1Rva2VucyBhcyBpLCBnZXRUcmFuc2xhdGUgYXMgaiwgZWxlbWVudFRyYW5zaXRpb25FbmQgYXMgaywgaXNPYmplY3QgYXMgbCwgbWFrZUVsZW1lbnRzQXJyYXkgYXMgbSwgbmV4dFRpY2sgYXMgbiwgZWxlbWVudFN0eWxlIGFzIG8sIGVsZW1lbnROZXh0QWxsIGFzIHAsIGVsZW1lbnRQcmV2QWxsIGFzIHEsIGFuaW1hdGVDU1NNb2RlU2Nyb2xsIGFzIHIsIHNldENTU1Byb3BlcnR5IGFzIHMsIHNob3dXYXJuaW5nIGFzIHQsIGV4dGVuZCBhcyB1LCBkZWxldGVQcm9wcyBhcyB2IH07XG4iLCJpbXBvcnQgeyBhIGFzIGdldFdpbmRvdywgZyBhcyBnZXREb2N1bWVudCB9IGZyb20gJy4vc3NyLXdpbmRvdy5lc20ubWpzJztcbmltcG9ydCB7IGEgYXMgZWxlbWVudFBhcmVudHMsIG8gYXMgZWxlbWVudFN0eWxlLCBlIGFzIGVsZW1lbnRDaGlsZHJlbiwgcyBhcyBzZXRDU1NQcm9wZXJ0eSwgZiBhcyBlbGVtZW50T3V0ZXJTaXplLCBwIGFzIGVsZW1lbnROZXh0QWxsLCBxIGFzIGVsZW1lbnRQcmV2QWxsLCBqIGFzIGdldFRyYW5zbGF0ZSwgciBhcyBhbmltYXRlQ1NTTW9kZVNjcm9sbCwgbiBhcyBuZXh0VGljaywgdCBhcyBzaG93V2FybmluZywgYyBhcyBjcmVhdGVFbGVtZW50LCBkIGFzIG5vdywgdSBhcyBleHRlbmQsIGggYXMgZWxlbWVudEluZGV4LCB2IGFzIGRlbGV0ZVByb3BzIH0gZnJvbSAnLi91dGlscy5tanMnO1xuXG5sZXQgc3VwcG9ydDtcbmZ1bmN0aW9uIGNhbGNTdXBwb3J0KCkge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICByZXR1cm4ge1xuICAgIHNtb290aFNjcm9sbDogZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSAmJiAnc2Nyb2xsQmVoYXZpb3InIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSxcbiAgICB0b3VjaDogISEoJ29udG91Y2hzdGFydCcgaW4gd2luZG93IHx8IHdpbmRvdy5Eb2N1bWVudFRvdWNoICYmIGRvY3VtZW50IGluc3RhbmNlb2Ygd2luZG93LkRvY3VtZW50VG91Y2gpXG4gIH07XG59XG5mdW5jdGlvbiBnZXRTdXBwb3J0KCkge1xuICBpZiAoIXN1cHBvcnQpIHtcbiAgICBzdXBwb3J0ID0gY2FsY1N1cHBvcnQoKTtcbiAgfVxuICByZXR1cm4gc3VwcG9ydDtcbn1cblxubGV0IGRldmljZUNhY2hlZDtcbmZ1bmN0aW9uIGNhbGNEZXZpY2UoX3RlbXApIHtcbiAgbGV0IHtcbiAgICB1c2VyQWdlbnRcbiAgfSA9IF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wO1xuICBjb25zdCBzdXBwb3J0ID0gZ2V0U3VwcG9ydCgpO1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgY29uc3QgcGxhdGZvcm0gPSB3aW5kb3cubmF2aWdhdG9yLnBsYXRmb3JtO1xuICBjb25zdCB1YSA9IHVzZXJBZ2VudCB8fCB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgY29uc3QgZGV2aWNlID0ge1xuICAgIGlvczogZmFsc2UsXG4gICAgYW5kcm9pZDogZmFsc2VcbiAgfTtcbiAgY29uc3Qgc2NyZWVuV2lkdGggPSB3aW5kb3cuc2NyZWVuLndpZHRoO1xuICBjb25zdCBzY3JlZW5IZWlnaHQgPSB3aW5kb3cuc2NyZWVuLmhlaWdodDtcbiAgY29uc3QgYW5kcm9pZCA9IHVhLm1hdGNoKC8oQW5kcm9pZCk7P1tcXHNcXC9dKyhbXFxkLl0rKT8vKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICBsZXQgaXBhZCA9IHVhLm1hdGNoKC8oaVBhZCkuKk9TXFxzKFtcXGRfXSspLyk7XG4gIGNvbnN0IGlwb2QgPSB1YS5tYXRjaCgvKGlQb2QpKC4qT1NcXHMoW1xcZF9dKykpPy8pO1xuICBjb25zdCBpcGhvbmUgPSAhaXBhZCAmJiB1YS5tYXRjaCgvKGlQaG9uZVxcc09TfGlPUylcXHMoW1xcZF9dKykvKTtcbiAgY29uc3Qgd2luZG93cyA9IHBsYXRmb3JtID09PSAnV2luMzInO1xuICBsZXQgbWFjb3MgPSBwbGF0Zm9ybSA9PT0gJ01hY0ludGVsJztcblxuICAvLyBpUGFkT3MgMTMgZml4XG4gIGNvbnN0IGlQYWRTY3JlZW5zID0gWycxMDI0eDEzNjYnLCAnMTM2NngxMDI0JywgJzgzNHgxMTk0JywgJzExOTR4ODM0JywgJzgzNHgxMTEyJywgJzExMTJ4ODM0JywgJzc2OHgxMDI0JywgJzEwMjR4NzY4JywgJzgyMHgxMTgwJywgJzExODB4ODIwJywgJzgxMHgxMDgwJywgJzEwODB4ODEwJ107XG4gIGlmICghaXBhZCAmJiBtYWNvcyAmJiBzdXBwb3J0LnRvdWNoICYmIGlQYWRTY3JlZW5zLmluZGV4T2YoYCR7c2NyZWVuV2lkdGh9eCR7c2NyZWVuSGVpZ2h0fWApID49IDApIHtcbiAgICBpcGFkID0gdWEubWF0Y2goLyhWZXJzaW9uKVxcLyhbXFxkLl0rKS8pO1xuICAgIGlmICghaXBhZCkgaXBhZCA9IFswLCAxLCAnMTNfMF8wJ107XG4gICAgbWFjb3MgPSBmYWxzZTtcbiAgfVxuXG4gIC8vIEFuZHJvaWRcbiAgaWYgKGFuZHJvaWQgJiYgIXdpbmRvd3MpIHtcbiAgICBkZXZpY2Uub3MgPSAnYW5kcm9pZCc7XG4gICAgZGV2aWNlLmFuZHJvaWQgPSB0cnVlO1xuICB9XG4gIGlmIChpcGFkIHx8IGlwaG9uZSB8fCBpcG9kKSB7XG4gICAgZGV2aWNlLm9zID0gJ2lvcyc7XG4gICAgZGV2aWNlLmlvcyA9IHRydWU7XG4gIH1cblxuICAvLyBFeHBvcnQgb2JqZWN0XG4gIHJldHVybiBkZXZpY2U7XG59XG5mdW5jdGlvbiBnZXREZXZpY2Uob3ZlcnJpZGVzKSB7XG4gIGlmIChvdmVycmlkZXMgPT09IHZvaWQgMCkge1xuICAgIG92ZXJyaWRlcyA9IHt9O1xuICB9XG4gIGlmICghZGV2aWNlQ2FjaGVkKSB7XG4gICAgZGV2aWNlQ2FjaGVkID0gY2FsY0RldmljZShvdmVycmlkZXMpO1xuICB9XG4gIHJldHVybiBkZXZpY2VDYWNoZWQ7XG59XG5cbmxldCBicm93c2VyO1xuZnVuY3Rpb24gY2FsY0Jyb3dzZXIoKSB7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBjb25zdCBkZXZpY2UgPSBnZXREZXZpY2UoKTtcbiAgbGV0IG5lZWRQZXJzcGVjdGl2ZUZpeCA9IGZhbHNlO1xuICBmdW5jdGlvbiBpc1NhZmFyaSgpIHtcbiAgICBjb25zdCB1YSA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCk7XG4gICAgcmV0dXJuIHVhLmluZGV4T2YoJ3NhZmFyaScpID49IDAgJiYgdWEuaW5kZXhPZignY2hyb21lJykgPCAwICYmIHVhLmluZGV4T2YoJ2FuZHJvaWQnKSA8IDA7XG4gIH1cbiAgaWYgKGlzU2FmYXJpKCkpIHtcbiAgICBjb25zdCB1YSA9IFN0cmluZyh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgaWYgKHVhLmluY2x1ZGVzKCdWZXJzaW9uLycpKSB7XG4gICAgICBjb25zdCBbbWFqb3IsIG1pbm9yXSA9IHVhLnNwbGl0KCdWZXJzaW9uLycpWzFdLnNwbGl0KCcgJylbMF0uc3BsaXQoJy4nKS5tYXAobnVtID0+IE51bWJlcihudW0pKTtcbiAgICAgIG5lZWRQZXJzcGVjdGl2ZUZpeCA9IG1ham9yIDwgMTYgfHwgbWFqb3IgPT09IDE2ICYmIG1pbm9yIDwgMjtcbiAgICB9XG4gIH1cbiAgY29uc3QgaXNXZWJWaWV3ID0gLyhpUGhvbmV8aVBvZHxpUGFkKS4qQXBwbGVXZWJLaXQoPyEuKlNhZmFyaSkvaS50ZXN0KHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgY29uc3QgaXNTYWZhcmlCcm93c2VyID0gaXNTYWZhcmkoKTtcbiAgY29uc3QgbmVlZDNkRml4ID0gaXNTYWZhcmlCcm93c2VyIHx8IGlzV2ViVmlldyAmJiBkZXZpY2UuaW9zO1xuICByZXR1cm4ge1xuICAgIGlzU2FmYXJpOiBuZWVkUGVyc3BlY3RpdmVGaXggfHwgaXNTYWZhcmlCcm93c2VyLFxuICAgIG5lZWRQZXJzcGVjdGl2ZUZpeCxcbiAgICBuZWVkM2RGaXgsXG4gICAgaXNXZWJWaWV3XG4gIH07XG59XG5mdW5jdGlvbiBnZXRCcm93c2VyKCkge1xuICBpZiAoIWJyb3dzZXIpIHtcbiAgICBicm93c2VyID0gY2FsY0Jyb3dzZXIoKTtcbiAgfVxuICByZXR1cm4gYnJvd3Nlcjtcbn1cblxuZnVuY3Rpb24gUmVzaXplKF9yZWYpIHtcbiAgbGV0IHtcbiAgICBzd2lwZXIsXG4gICAgb24sXG4gICAgZW1pdFxuICB9ID0gX3JlZjtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGxldCBvYnNlcnZlciA9IG51bGw7XG4gIGxldCBhbmltYXRpb25GcmFtZSA9IG51bGw7XG4gIGNvbnN0IHJlc2l6ZUhhbmRsZXIgPSAoKSA9PiB7XG4gICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLmluaXRpYWxpemVkKSByZXR1cm47XG4gICAgZW1pdCgnYmVmb3JlUmVzaXplJyk7XG4gICAgZW1pdCgncmVzaXplJyk7XG4gIH07XG4gIGNvbnN0IGNyZWF0ZU9ic2VydmVyID0gKCkgPT4ge1xuICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQgfHwgIXN3aXBlci5pbml0aWFsaXplZCkgcmV0dXJuO1xuICAgIG9ic2VydmVyID0gbmV3IFJlc2l6ZU9ic2VydmVyKGVudHJpZXMgPT4ge1xuICAgICAgYW5pbWF0aW9uRnJhbWUgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgIHdpZHRoLFxuICAgICAgICAgIGhlaWdodFxuICAgICAgICB9ID0gc3dpcGVyO1xuICAgICAgICBsZXQgbmV3V2lkdGggPSB3aWR0aDtcbiAgICAgICAgbGV0IG5ld0hlaWdodCA9IGhlaWdodDtcbiAgICAgICAgZW50cmllcy5mb3JFYWNoKF9yZWYyID0+IHtcbiAgICAgICAgICBsZXQge1xuICAgICAgICAgICAgY29udGVudEJveFNpemUsXG4gICAgICAgICAgICBjb250ZW50UmVjdCxcbiAgICAgICAgICAgIHRhcmdldFxuICAgICAgICAgIH0gPSBfcmVmMjtcbiAgICAgICAgICBpZiAodGFyZ2V0ICYmIHRhcmdldCAhPT0gc3dpcGVyLmVsKSByZXR1cm47XG4gICAgICAgICAgbmV3V2lkdGggPSBjb250ZW50UmVjdCA/IGNvbnRlbnRSZWN0LndpZHRoIDogKGNvbnRlbnRCb3hTaXplWzBdIHx8IGNvbnRlbnRCb3hTaXplKS5pbmxpbmVTaXplO1xuICAgICAgICAgIG5ld0hlaWdodCA9IGNvbnRlbnRSZWN0ID8gY29udGVudFJlY3QuaGVpZ2h0IDogKGNvbnRlbnRCb3hTaXplWzBdIHx8IGNvbnRlbnRCb3hTaXplKS5ibG9ja1NpemU7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAobmV3V2lkdGggIT09IHdpZHRoIHx8IG5ld0hlaWdodCAhPT0gaGVpZ2h0KSB7XG4gICAgICAgICAgcmVzaXplSGFuZGxlcigpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBvYnNlcnZlci5vYnNlcnZlKHN3aXBlci5lbCk7XG4gIH07XG4gIGNvbnN0IHJlbW92ZU9ic2VydmVyID0gKCkgPT4ge1xuICAgIGlmIChhbmltYXRpb25GcmFtZSkge1xuICAgICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKGFuaW1hdGlvbkZyYW1lKTtcbiAgICB9XG4gICAgaWYgKG9ic2VydmVyICYmIG9ic2VydmVyLnVub2JzZXJ2ZSAmJiBzd2lwZXIuZWwpIHtcbiAgICAgIG9ic2VydmVyLnVub2JzZXJ2ZShzd2lwZXIuZWwpO1xuICAgICAgb2JzZXJ2ZXIgPSBudWxsO1xuICAgIH1cbiAgfTtcbiAgY29uc3Qgb3JpZW50YXRpb25DaGFuZ2VIYW5kbGVyID0gKCkgPT4ge1xuICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQgfHwgIXN3aXBlci5pbml0aWFsaXplZCkgcmV0dXJuO1xuICAgIGVtaXQoJ29yaWVudGF0aW9uY2hhbmdlJyk7XG4gIH07XG4gIG9uKCdpbml0JywgKCkgPT4ge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLnJlc2l6ZU9ic2VydmVyICYmIHR5cGVvZiB3aW5kb3cuUmVzaXplT2JzZXJ2ZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjcmVhdGVPYnNlcnZlcigpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgcmVzaXplSGFuZGxlcik7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ29yaWVudGF0aW9uY2hhbmdlJywgb3JpZW50YXRpb25DaGFuZ2VIYW5kbGVyKTtcbiAgfSk7XG4gIG9uKCdkZXN0cm95JywgKCkgPT4ge1xuICAgIHJlbW92ZU9ic2VydmVyKCk7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHJlc2l6ZUhhbmRsZXIpO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdvcmllbnRhdGlvbmNoYW5nZScsIG9yaWVudGF0aW9uQ2hhbmdlSGFuZGxlcik7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBPYnNlcnZlcihfcmVmKSB7XG4gIGxldCB7XG4gICAgc3dpcGVyLFxuICAgIGV4dGVuZFBhcmFtcyxcbiAgICBvbixcbiAgICBlbWl0XG4gIH0gPSBfcmVmO1xuICBjb25zdCBvYnNlcnZlcnMgPSBbXTtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGNvbnN0IGF0dGFjaCA9IGZ1bmN0aW9uICh0YXJnZXQsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuICAgIGNvbnN0IE9ic2VydmVyRnVuYyA9IHdpbmRvdy5NdXRhdGlvbk9ic2VydmVyIHx8IHdpbmRvdy5XZWJraXRNdXRhdGlvbk9ic2VydmVyO1xuICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IE9ic2VydmVyRnVuYyhtdXRhdGlvbnMgPT4ge1xuICAgICAgLy8gVGhlIG9ic2VydmVyVXBkYXRlIGV2ZW50IHNob3VsZCBvbmx5IGJlIHRyaWdnZXJlZFxuICAgICAgLy8gb25jZSBkZXNwaXRlIHRoZSBudW1iZXIgb2YgbXV0YXRpb25zLiAgQWRkaXRpb25hbFxuICAgICAgLy8gdHJpZ2dlcnMgYXJlIHJlZHVuZGFudCBhbmQgYXJlIHZlcnkgY29zdGx5XG4gICAgICBpZiAoc3dpcGVyLl9fcHJldmVudE9ic2VydmVyX18pIHJldHVybjtcbiAgICAgIGlmIChtdXRhdGlvbnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIGVtaXQoJ29ic2VydmVyVXBkYXRlJywgbXV0YXRpb25zWzBdKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3Qgb2JzZXJ2ZXJVcGRhdGUgPSBmdW5jdGlvbiBvYnNlcnZlclVwZGF0ZSgpIHtcbiAgICAgICAgZW1pdCgnb2JzZXJ2ZXJVcGRhdGUnLCBtdXRhdGlvbnNbMF0pO1xuICAgICAgfTtcbiAgICAgIGlmICh3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKSB7XG4gICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUob2JzZXJ2ZXJVcGRhdGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2luZG93LnNldFRpbWVvdXQob2JzZXJ2ZXJVcGRhdGUsIDApO1xuICAgICAgfVxuICAgIH0pO1xuICAgIG9ic2VydmVyLm9ic2VydmUodGFyZ2V0LCB7XG4gICAgICBhdHRyaWJ1dGVzOiB0eXBlb2Ygb3B0aW9ucy5hdHRyaWJ1dGVzID09PSAndW5kZWZpbmVkJyA/IHRydWUgOiBvcHRpb25zLmF0dHJpYnV0ZXMsXG4gICAgICBjaGlsZExpc3Q6IHR5cGVvZiBvcHRpb25zLmNoaWxkTGlzdCA9PT0gJ3VuZGVmaW5lZCcgPyB0cnVlIDogb3B0aW9ucy5jaGlsZExpc3QsXG4gICAgICBjaGFyYWN0ZXJEYXRhOiB0eXBlb2Ygb3B0aW9ucy5jaGFyYWN0ZXJEYXRhID09PSAndW5kZWZpbmVkJyA/IHRydWUgOiBvcHRpb25zLmNoYXJhY3RlckRhdGFcbiAgICB9KTtcbiAgICBvYnNlcnZlcnMucHVzaChvYnNlcnZlcik7XG4gIH07XG4gIGNvbnN0IGluaXQgPSAoKSA9PiB7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLm9ic2VydmVyKSByZXR1cm47XG4gICAgaWYgKHN3aXBlci5wYXJhbXMub2JzZXJ2ZVBhcmVudHMpIHtcbiAgICAgIGNvbnN0IGNvbnRhaW5lclBhcmVudHMgPSBlbGVtZW50UGFyZW50cyhzd2lwZXIuaG9zdEVsKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29udGFpbmVyUGFyZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBhdHRhY2goY29udGFpbmVyUGFyZW50c1tpXSk7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIE9ic2VydmUgY29udGFpbmVyXG4gICAgYXR0YWNoKHN3aXBlci5ob3N0RWwsIHtcbiAgICAgIGNoaWxkTGlzdDogc3dpcGVyLnBhcmFtcy5vYnNlcnZlU2xpZGVDaGlsZHJlblxuICAgIH0pO1xuXG4gICAgLy8gT2JzZXJ2ZSB3cmFwcGVyXG4gICAgYXR0YWNoKHN3aXBlci53cmFwcGVyRWwsIHtcbiAgICAgIGF0dHJpYnV0ZXM6IGZhbHNlXG4gICAgfSk7XG4gIH07XG4gIGNvbnN0IGRlc3Ryb3kgPSAoKSA9PiB7XG4gICAgb2JzZXJ2ZXJzLmZvckVhY2gob2JzZXJ2ZXIgPT4ge1xuICAgICAgb2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgIH0pO1xuICAgIG9ic2VydmVycy5zcGxpY2UoMCwgb2JzZXJ2ZXJzLmxlbmd0aCk7XG4gIH07XG4gIGV4dGVuZFBhcmFtcyh7XG4gICAgb2JzZXJ2ZXI6IGZhbHNlLFxuICAgIG9ic2VydmVQYXJlbnRzOiBmYWxzZSxcbiAgICBvYnNlcnZlU2xpZGVDaGlsZHJlbjogZmFsc2VcbiAgfSk7XG4gIG9uKCdpbml0JywgaW5pdCk7XG4gIG9uKCdkZXN0cm95JywgZGVzdHJveSk7XG59XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVyc2NvcmUtZGFuZ2xlICovXG5cbnZhciBldmVudHNFbWl0dGVyID0ge1xuICBvbihldmVudHMsIGhhbmRsZXIsIHByaW9yaXR5KSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgaWYgKCFzZWxmLmV2ZW50c0xpc3RlbmVycyB8fCBzZWxmLmRlc3Ryb3llZCkgcmV0dXJuIHNlbGY7XG4gICAgaWYgKHR5cGVvZiBoYW5kbGVyICE9PSAnZnVuY3Rpb24nKSByZXR1cm4gc2VsZjtcbiAgICBjb25zdCBtZXRob2QgPSBwcmlvcml0eSA/ICd1bnNoaWZ0JyA6ICdwdXNoJztcbiAgICBldmVudHMuc3BsaXQoJyAnKS5mb3JFYWNoKGV2ZW50ID0+IHtcbiAgICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdKSBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0gPSBbXTtcbiAgICAgIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XVttZXRob2RdKGhhbmRsZXIpO1xuICAgIH0pO1xuICAgIHJldHVybiBzZWxmO1xuICB9LFxuICBvbmNlKGV2ZW50cywgaGFuZGxlciwgcHJpb3JpdHkpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBpZiAoIXNlbGYuZXZlbnRzTGlzdGVuZXJzIHx8IHNlbGYuZGVzdHJveWVkKSByZXR1cm4gc2VsZjtcbiAgICBpZiAodHlwZW9mIGhhbmRsZXIgIT09ICdmdW5jdGlvbicpIHJldHVybiBzZWxmO1xuICAgIGZ1bmN0aW9uIG9uY2VIYW5kbGVyKCkge1xuICAgICAgc2VsZi5vZmYoZXZlbnRzLCBvbmNlSGFuZGxlcik7XG4gICAgICBpZiAob25jZUhhbmRsZXIuX19lbWl0dGVyUHJveHkpIHtcbiAgICAgICAgZGVsZXRlIG9uY2VIYW5kbGVyLl9fZW1pdHRlclByb3h5O1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG4gICAgICBoYW5kbGVyLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICAgIH1cbiAgICBvbmNlSGFuZGxlci5fX2VtaXR0ZXJQcm94eSA9IGhhbmRsZXI7XG4gICAgcmV0dXJuIHNlbGYub24oZXZlbnRzLCBvbmNlSGFuZGxlciwgcHJpb3JpdHkpO1xuICB9LFxuICBvbkFueShoYW5kbGVyLCBwcmlvcml0eSkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnMgfHwgc2VsZi5kZXN0cm95ZWQpIHJldHVybiBzZWxmO1xuICAgIGlmICh0eXBlb2YgaGFuZGxlciAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHNlbGY7XG4gICAgY29uc3QgbWV0aG9kID0gcHJpb3JpdHkgPyAndW5zaGlmdCcgOiAncHVzaCc7XG4gICAgaWYgKHNlbGYuZXZlbnRzQW55TGlzdGVuZXJzLmluZGV4T2YoaGFuZGxlcikgPCAwKSB7XG4gICAgICBzZWxmLmV2ZW50c0FueUxpc3RlbmVyc1ttZXRob2RdKGhhbmRsZXIpO1xuICAgIH1cbiAgICByZXR1cm4gc2VsZjtcbiAgfSxcbiAgb2ZmQW55KGhhbmRsZXIpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBpZiAoIXNlbGYuZXZlbnRzTGlzdGVuZXJzIHx8IHNlbGYuZGVzdHJveWVkKSByZXR1cm4gc2VsZjtcbiAgICBpZiAoIXNlbGYuZXZlbnRzQW55TGlzdGVuZXJzKSByZXR1cm4gc2VsZjtcbiAgICBjb25zdCBpbmRleCA9IHNlbGYuZXZlbnRzQW55TGlzdGVuZXJzLmluZGV4T2YoaGFuZGxlcik7XG4gICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgIHNlbGYuZXZlbnRzQW55TGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuICAgIHJldHVybiBzZWxmO1xuICB9LFxuICBvZmYoZXZlbnRzLCBoYW5kbGVyKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgaWYgKCFzZWxmLmV2ZW50c0xpc3RlbmVycyB8fCBzZWxmLmRlc3Ryb3llZCkgcmV0dXJuIHNlbGY7XG4gICAgaWYgKCFzZWxmLmV2ZW50c0xpc3RlbmVycykgcmV0dXJuIHNlbGY7XG4gICAgZXZlbnRzLnNwbGl0KCcgJykuZm9yRWFjaChldmVudCA9PiB7XG4gICAgICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XSA9IFtdO1xuICAgICAgfSBlbHNlIGlmIChzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0pIHtcbiAgICAgICAgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdLmZvckVhY2goKGV2ZW50SGFuZGxlciwgaW5kZXgpID0+IHtcbiAgICAgICAgICBpZiAoZXZlbnRIYW5kbGVyID09PSBoYW5kbGVyIHx8IGV2ZW50SGFuZGxlci5fX2VtaXR0ZXJQcm94eSAmJiBldmVudEhhbmRsZXIuX19lbWl0dGVyUHJveHkgPT09IGhhbmRsZXIpIHtcbiAgICAgICAgICAgIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHNlbGY7XG4gIH0sXG4gIGVtaXQoKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgaWYgKCFzZWxmLmV2ZW50c0xpc3RlbmVycyB8fCBzZWxmLmRlc3Ryb3llZCkgcmV0dXJuIHNlbGY7XG4gICAgaWYgKCFzZWxmLmV2ZW50c0xpc3RlbmVycykgcmV0dXJuIHNlbGY7XG4gICAgbGV0IGV2ZW50cztcbiAgICBsZXQgZGF0YTtcbiAgICBsZXQgY29udGV4dDtcbiAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBhcmdzWzBdID09PSAnc3RyaW5nJyB8fCBBcnJheS5pc0FycmF5KGFyZ3NbMF0pKSB7XG4gICAgICBldmVudHMgPSBhcmdzWzBdO1xuICAgICAgZGF0YSA9IGFyZ3Muc2xpY2UoMSwgYXJncy5sZW5ndGgpO1xuICAgICAgY29udGV4dCA9IHNlbGY7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV2ZW50cyA9IGFyZ3NbMF0uZXZlbnRzO1xuICAgICAgZGF0YSA9IGFyZ3NbMF0uZGF0YTtcbiAgICAgIGNvbnRleHQgPSBhcmdzWzBdLmNvbnRleHQgfHwgc2VsZjtcbiAgICB9XG4gICAgZGF0YS51bnNoaWZ0KGNvbnRleHQpO1xuICAgIGNvbnN0IGV2ZW50c0FycmF5ID0gQXJyYXkuaXNBcnJheShldmVudHMpID8gZXZlbnRzIDogZXZlbnRzLnNwbGl0KCcgJyk7XG4gICAgZXZlbnRzQXJyYXkuZm9yRWFjaChldmVudCA9PiB7XG4gICAgICBpZiAoc2VsZi5ldmVudHNBbnlMaXN0ZW5lcnMgJiYgc2VsZi5ldmVudHNBbnlMaXN0ZW5lcnMubGVuZ3RoKSB7XG4gICAgICAgIHNlbGYuZXZlbnRzQW55TGlzdGVuZXJzLmZvckVhY2goZXZlbnRIYW5kbGVyID0+IHtcbiAgICAgICAgICBldmVudEhhbmRsZXIuYXBwbHkoY29udGV4dCwgW2V2ZW50LCAuLi5kYXRhXSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKHNlbGYuZXZlbnRzTGlzdGVuZXJzICYmIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XSkge1xuICAgICAgICBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0uZm9yRWFjaChldmVudEhhbmRsZXIgPT4ge1xuICAgICAgICAgIGV2ZW50SGFuZGxlci5hcHBseShjb250ZXh0LCBkYXRhKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHNlbGY7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHVwZGF0ZVNpemUoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGxldCB3aWR0aDtcbiAgbGV0IGhlaWdodDtcbiAgY29uc3QgZWwgPSBzd2lwZXIuZWw7XG4gIGlmICh0eXBlb2Ygc3dpcGVyLnBhcmFtcy53aWR0aCAhPT0gJ3VuZGVmaW5lZCcgJiYgc3dpcGVyLnBhcmFtcy53aWR0aCAhPT0gbnVsbCkge1xuICAgIHdpZHRoID0gc3dpcGVyLnBhcmFtcy53aWR0aDtcbiAgfSBlbHNlIHtcbiAgICB3aWR0aCA9IGVsLmNsaWVudFdpZHRoO1xuICB9XG4gIGlmICh0eXBlb2Ygc3dpcGVyLnBhcmFtcy5oZWlnaHQgIT09ICd1bmRlZmluZWQnICYmIHN3aXBlci5wYXJhbXMuaGVpZ2h0ICE9PSBudWxsKSB7XG4gICAgaGVpZ2h0ID0gc3dpcGVyLnBhcmFtcy5oZWlnaHQ7XG4gIH0gZWxzZSB7XG4gICAgaGVpZ2h0ID0gZWwuY2xpZW50SGVpZ2h0O1xuICB9XG4gIGlmICh3aWR0aCA9PT0gMCAmJiBzd2lwZXIuaXNIb3Jpem9udGFsKCkgfHwgaGVpZ2h0ID09PSAwICYmIHN3aXBlci5pc1ZlcnRpY2FsKCkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBTdWJ0cmFjdCBwYWRkaW5nc1xuICB3aWR0aCA9IHdpZHRoIC0gcGFyc2VJbnQoZWxlbWVudFN0eWxlKGVsLCAncGFkZGluZy1sZWZ0JykgfHwgMCwgMTApIC0gcGFyc2VJbnQoZWxlbWVudFN0eWxlKGVsLCAncGFkZGluZy1yaWdodCcpIHx8IDAsIDEwKTtcbiAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoZWxlbWVudFN0eWxlKGVsLCAncGFkZGluZy10b3AnKSB8fCAwLCAxMCkgLSBwYXJzZUludChlbGVtZW50U3R5bGUoZWwsICdwYWRkaW5nLWJvdHRvbScpIHx8IDAsIDEwKTtcbiAgaWYgKE51bWJlci5pc05hTih3aWR0aCkpIHdpZHRoID0gMDtcbiAgaWYgKE51bWJlci5pc05hTihoZWlnaHQpKSBoZWlnaHQgPSAwO1xuICBPYmplY3QuYXNzaWduKHN3aXBlciwge1xuICAgIHdpZHRoLFxuICAgIGhlaWdodCxcbiAgICBzaXplOiBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyB3aWR0aCA6IGhlaWdodFxuICB9KTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlU2xpZGVzKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBmdW5jdGlvbiBnZXREaXJlY3Rpb25Qcm9wZXJ0eVZhbHVlKG5vZGUsIGxhYmVsKSB7XG4gICAgcmV0dXJuIHBhcnNlRmxvYXQobm9kZS5nZXRQcm9wZXJ0eVZhbHVlKHN3aXBlci5nZXREaXJlY3Rpb25MYWJlbChsYWJlbCkpIHx8IDApO1xuICB9XG4gIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gIGNvbnN0IHtcbiAgICB3cmFwcGVyRWwsXG4gICAgc2xpZGVzRWwsXG4gICAgc2l6ZTogc3dpcGVyU2l6ZSxcbiAgICBydGxUcmFuc2xhdGU6IHJ0bCxcbiAgICB3cm9uZ1JUTFxuICB9ID0gc3dpcGVyO1xuICBjb25zdCBpc1ZpcnR1YWwgPSBzd2lwZXIudmlydHVhbCAmJiBwYXJhbXMudmlydHVhbC5lbmFibGVkO1xuICBjb25zdCBwcmV2aW91c1NsaWRlc0xlbmd0aCA9IGlzVmlydHVhbCA/IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggOiBzd2lwZXIuc2xpZGVzLmxlbmd0aDtcbiAgY29uc3Qgc2xpZGVzID0gZWxlbWVudENoaWxkcmVuKHNsaWRlc0VsLCBgLiR7c3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzfSwgc3dpcGVyLXNsaWRlYCk7XG4gIGNvbnN0IHNsaWRlc0xlbmd0aCA9IGlzVmlydHVhbCA/IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggOiBzbGlkZXMubGVuZ3RoO1xuICBsZXQgc25hcEdyaWQgPSBbXTtcbiAgY29uc3Qgc2xpZGVzR3JpZCA9IFtdO1xuICBjb25zdCBzbGlkZXNTaXplc0dyaWQgPSBbXTtcbiAgbGV0IG9mZnNldEJlZm9yZSA9IHBhcmFtcy5zbGlkZXNPZmZzZXRCZWZvcmU7XG4gIGlmICh0eXBlb2Ygb2Zmc2V0QmVmb3JlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgb2Zmc2V0QmVmb3JlID0gcGFyYW1zLnNsaWRlc09mZnNldEJlZm9yZS5jYWxsKHN3aXBlcik7XG4gIH1cbiAgbGV0IG9mZnNldEFmdGVyID0gcGFyYW1zLnNsaWRlc09mZnNldEFmdGVyO1xuICBpZiAodHlwZW9mIG9mZnNldEFmdGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgb2Zmc2V0QWZ0ZXIgPSBwYXJhbXMuc2xpZGVzT2Zmc2V0QWZ0ZXIuY2FsbChzd2lwZXIpO1xuICB9XG4gIGNvbnN0IHByZXZpb3VzU25hcEdyaWRMZW5ndGggPSBzd2lwZXIuc25hcEdyaWQubGVuZ3RoO1xuICBjb25zdCBwcmV2aW91c1NsaWRlc0dyaWRMZW5ndGggPSBzd2lwZXIuc2xpZGVzR3JpZC5sZW5ndGg7XG4gIGxldCBzcGFjZUJldHdlZW4gPSBwYXJhbXMuc3BhY2VCZXR3ZWVuO1xuICBsZXQgc2xpZGVQb3NpdGlvbiA9IC1vZmZzZXRCZWZvcmU7XG4gIGxldCBwcmV2U2xpZGVTaXplID0gMDtcbiAgbGV0IGluZGV4ID0gMDtcbiAgaWYgKHR5cGVvZiBzd2lwZXJTaXplID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAodHlwZW9mIHNwYWNlQmV0d2VlbiA9PT0gJ3N0cmluZycgJiYgc3BhY2VCZXR3ZWVuLmluZGV4T2YoJyUnKSA+PSAwKSB7XG4gICAgc3BhY2VCZXR3ZWVuID0gcGFyc2VGbG9hdChzcGFjZUJldHdlZW4ucmVwbGFjZSgnJScsICcnKSkgLyAxMDAgKiBzd2lwZXJTaXplO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBzcGFjZUJldHdlZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgc3BhY2VCZXR3ZWVuID0gcGFyc2VGbG9hdChzcGFjZUJldHdlZW4pO1xuICB9XG4gIHN3aXBlci52aXJ0dWFsU2l6ZSA9IC1zcGFjZUJldHdlZW47XG5cbiAgLy8gcmVzZXQgbWFyZ2luc1xuICBzbGlkZXMuZm9yRWFjaChzbGlkZUVsID0+IHtcbiAgICBpZiAocnRsKSB7XG4gICAgICBzbGlkZUVsLnN0eWxlLm1hcmdpbkxlZnQgPSAnJztcbiAgICB9IGVsc2Uge1xuICAgICAgc2xpZGVFbC5zdHlsZS5tYXJnaW5SaWdodCA9ICcnO1xuICAgIH1cbiAgICBzbGlkZUVsLnN0eWxlLm1hcmdpbkJvdHRvbSA9ICcnO1xuICAgIHNsaWRlRWwuc3R5bGUubWFyZ2luVG9wID0gJyc7XG4gIH0pO1xuXG4gIC8vIHJlc2V0IGNzc01vZGUgb2Zmc2V0c1xuICBpZiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzICYmIHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgc2V0Q1NTUHJvcGVydHkod3JhcHBlckVsLCAnLS1zd2lwZXItY2VudGVyZWQtb2Zmc2V0LWJlZm9yZScsICcnKTtcbiAgICBzZXRDU1NQcm9wZXJ0eSh3cmFwcGVyRWwsICctLXN3aXBlci1jZW50ZXJlZC1vZmZzZXQtYWZ0ZXInLCAnJyk7XG4gIH1cbiAgY29uc3QgZ3JpZEVuYWJsZWQgPSBwYXJhbXMuZ3JpZCAmJiBwYXJhbXMuZ3JpZC5yb3dzID4gMSAmJiBzd2lwZXIuZ3JpZDtcbiAgaWYgKGdyaWRFbmFibGVkKSB7XG4gICAgc3dpcGVyLmdyaWQuaW5pdFNsaWRlcyhzbGlkZXMpO1xuICB9IGVsc2UgaWYgKHN3aXBlci5ncmlkKSB7XG4gICAgc3dpcGVyLmdyaWQudW5zZXRTbGlkZXMoKTtcbiAgfVxuXG4gIC8vIENhbGMgc2xpZGVzXG4gIGxldCBzbGlkZVNpemU7XG4gIGNvbnN0IHNob3VsZFJlc2V0U2xpZGVTaXplID0gcGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyAmJiBwYXJhbXMuYnJlYWtwb2ludHMgJiYgT2JqZWN0LmtleXMocGFyYW1zLmJyZWFrcG9pbnRzKS5maWx0ZXIoa2V5ID0+IHtcbiAgICByZXR1cm4gdHlwZW9mIHBhcmFtcy5icmVha3BvaW50c1trZXldLnNsaWRlc1BlclZpZXcgIT09ICd1bmRlZmluZWQnO1xuICB9KS5sZW5ndGggPiAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlc0xlbmd0aDsgaSArPSAxKSB7XG4gICAgc2xpZGVTaXplID0gMDtcbiAgICBsZXQgc2xpZGU7XG4gICAgaWYgKHNsaWRlc1tpXSkgc2xpZGUgPSBzbGlkZXNbaV07XG4gICAgaWYgKGdyaWRFbmFibGVkKSB7XG4gICAgICBzd2lwZXIuZ3JpZC51cGRhdGVTbGlkZShpLCBzbGlkZSwgc2xpZGVzKTtcbiAgICB9XG4gICAgaWYgKHNsaWRlc1tpXSAmJiBlbGVtZW50U3R5bGUoc2xpZGUsICdkaXNwbGF5JykgPT09ICdub25lJykgY29udGludWU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICAgIGlmIChwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nKSB7XG4gICAgICBpZiAoc2hvdWxkUmVzZXRTbGlkZVNpemUpIHtcbiAgICAgICAgc2xpZGVzW2ldLnN0eWxlW3N3aXBlci5nZXREaXJlY3Rpb25MYWJlbCgnd2lkdGgnKV0gPSBgYDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHNsaWRlU3R5bGVzID0gZ2V0Q29tcHV0ZWRTdHlsZShzbGlkZSk7XG4gICAgICBjb25zdCBjdXJyZW50VHJhbnNmb3JtID0gc2xpZGUuc3R5bGUudHJhbnNmb3JtO1xuICAgICAgY29uc3QgY3VycmVudFdlYktpdFRyYW5zZm9ybSA9IHNsaWRlLnN0eWxlLndlYmtpdFRyYW5zZm9ybTtcbiAgICAgIGlmIChjdXJyZW50VHJhbnNmb3JtKSB7XG4gICAgICAgIHNsaWRlLnN0eWxlLnRyYW5zZm9ybSA9ICdub25lJztcbiAgICAgIH1cbiAgICAgIGlmIChjdXJyZW50V2ViS2l0VHJhbnNmb3JtKSB7XG4gICAgICAgIHNsaWRlLnN0eWxlLndlYmtpdFRyYW5zZm9ybSA9ICdub25lJztcbiAgICAgIH1cbiAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSB7XG4gICAgICAgIHNsaWRlU2l6ZSA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IGVsZW1lbnRPdXRlclNpemUoc2xpZGUsICd3aWR0aCcsIHRydWUpIDogZWxlbWVudE91dGVyU2l6ZShzbGlkZSwgJ2hlaWdodCcsIHRydWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgIGNvbnN0IHdpZHRoID0gZ2V0RGlyZWN0aW9uUHJvcGVydHlWYWx1ZShzbGlkZVN0eWxlcywgJ3dpZHRoJyk7XG4gICAgICAgIGNvbnN0IHBhZGRpbmdMZWZ0ID0gZ2V0RGlyZWN0aW9uUHJvcGVydHlWYWx1ZShzbGlkZVN0eWxlcywgJ3BhZGRpbmctbGVmdCcpO1xuICAgICAgICBjb25zdCBwYWRkaW5nUmlnaHQgPSBnZXREaXJlY3Rpb25Qcm9wZXJ0eVZhbHVlKHNsaWRlU3R5bGVzLCAncGFkZGluZy1yaWdodCcpO1xuICAgICAgICBjb25zdCBtYXJnaW5MZWZ0ID0gZ2V0RGlyZWN0aW9uUHJvcGVydHlWYWx1ZShzbGlkZVN0eWxlcywgJ21hcmdpbi1sZWZ0Jyk7XG4gICAgICAgIGNvbnN0IG1hcmdpblJpZ2h0ID0gZ2V0RGlyZWN0aW9uUHJvcGVydHlWYWx1ZShzbGlkZVN0eWxlcywgJ21hcmdpbi1yaWdodCcpO1xuICAgICAgICBjb25zdCBib3hTaXppbmcgPSBzbGlkZVN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCdib3gtc2l6aW5nJyk7XG4gICAgICAgIGlmIChib3hTaXppbmcgJiYgYm94U2l6aW5nID09PSAnYm9yZGVyLWJveCcpIHtcbiAgICAgICAgICBzbGlkZVNpemUgPSB3aWR0aCArIG1hcmdpbkxlZnQgKyBtYXJnaW5SaWdodDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBjbGllbnRXaWR0aCxcbiAgICAgICAgICAgIG9mZnNldFdpZHRoXG4gICAgICAgICAgfSA9IHNsaWRlO1xuICAgICAgICAgIHNsaWRlU2l6ZSA9IHdpZHRoICsgcGFkZGluZ0xlZnQgKyBwYWRkaW5nUmlnaHQgKyBtYXJnaW5MZWZ0ICsgbWFyZ2luUmlnaHQgKyAob2Zmc2V0V2lkdGggLSBjbGllbnRXaWR0aCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChjdXJyZW50VHJhbnNmb3JtKSB7XG4gICAgICAgIHNsaWRlLnN0eWxlLnRyYW5zZm9ybSA9IGN1cnJlbnRUcmFuc2Zvcm07XG4gICAgICB9XG4gICAgICBpZiAoY3VycmVudFdlYktpdFRyYW5zZm9ybSkge1xuICAgICAgICBzbGlkZS5zdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSBjdXJyZW50V2ViS2l0VHJhbnNmb3JtO1xuICAgICAgfVxuICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHNsaWRlU2l6ZSA9IE1hdGguZmxvb3Ioc2xpZGVTaXplKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2xpZGVTaXplID0gKHN3aXBlclNpemUgLSAocGFyYW1zLnNsaWRlc1BlclZpZXcgLSAxKSAqIHNwYWNlQmV0d2VlbikgLyBwYXJhbXMuc2xpZGVzUGVyVmlldztcbiAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSBzbGlkZVNpemUgPSBNYXRoLmZsb29yKHNsaWRlU2l6ZSk7XG4gICAgICBpZiAoc2xpZGVzW2ldKSB7XG4gICAgICAgIHNsaWRlc1tpXS5zdHlsZVtzd2lwZXIuZ2V0RGlyZWN0aW9uTGFiZWwoJ3dpZHRoJyldID0gYCR7c2xpZGVTaXplfXB4YDtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHNsaWRlc1tpXSkge1xuICAgICAgc2xpZGVzW2ldLnN3aXBlclNsaWRlU2l6ZSA9IHNsaWRlU2l6ZTtcbiAgICB9XG4gICAgc2xpZGVzU2l6ZXNHcmlkLnB1c2goc2xpZGVTaXplKTtcbiAgICBpZiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICBzbGlkZVBvc2l0aW9uID0gc2xpZGVQb3NpdGlvbiArIHNsaWRlU2l6ZSAvIDIgKyBwcmV2U2xpZGVTaXplIC8gMiArIHNwYWNlQmV0d2VlbjtcbiAgICAgIGlmIChwcmV2U2xpZGVTaXplID09PSAwICYmIGkgIT09IDApIHNsaWRlUG9zaXRpb24gPSBzbGlkZVBvc2l0aW9uIC0gc3dpcGVyU2l6ZSAvIDIgLSBzcGFjZUJldHdlZW47XG4gICAgICBpZiAoaSA9PT0gMCkgc2xpZGVQb3NpdGlvbiA9IHNsaWRlUG9zaXRpb24gLSBzd2lwZXJTaXplIC8gMiAtIHNwYWNlQmV0d2VlbjtcbiAgICAgIGlmIChNYXRoLmFicyhzbGlkZVBvc2l0aW9uKSA8IDEgLyAxMDAwKSBzbGlkZVBvc2l0aW9uID0gMDtcbiAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSBzbGlkZVBvc2l0aW9uID0gTWF0aC5mbG9vcihzbGlkZVBvc2l0aW9uKTtcbiAgICAgIGlmIChpbmRleCAlIHBhcmFtcy5zbGlkZXNQZXJHcm91cCA9PT0gMCkgc25hcEdyaWQucHVzaChzbGlkZVBvc2l0aW9uKTtcbiAgICAgIHNsaWRlc0dyaWQucHVzaChzbGlkZVBvc2l0aW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHNsaWRlUG9zaXRpb24gPSBNYXRoLmZsb29yKHNsaWRlUG9zaXRpb24pO1xuICAgICAgaWYgKChpbmRleCAtIE1hdGgubWluKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwLCBpbmRleCkpICUgc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCA9PT0gMCkgc25hcEdyaWQucHVzaChzbGlkZVBvc2l0aW9uKTtcbiAgICAgIHNsaWRlc0dyaWQucHVzaChzbGlkZVBvc2l0aW9uKTtcbiAgICAgIHNsaWRlUG9zaXRpb24gPSBzbGlkZVBvc2l0aW9uICsgc2xpZGVTaXplICsgc3BhY2VCZXR3ZWVuO1xuICAgIH1cbiAgICBzd2lwZXIudmlydHVhbFNpemUgKz0gc2xpZGVTaXplICsgc3BhY2VCZXR3ZWVuO1xuICAgIHByZXZTbGlkZVNpemUgPSBzbGlkZVNpemU7XG4gICAgaW5kZXggKz0gMTtcbiAgfVxuICBzd2lwZXIudmlydHVhbFNpemUgPSBNYXRoLm1heChzd2lwZXIudmlydHVhbFNpemUsIHN3aXBlclNpemUpICsgb2Zmc2V0QWZ0ZXI7XG4gIGlmIChydGwgJiYgd3JvbmdSVEwgJiYgKHBhcmFtcy5lZmZlY3QgPT09ICdzbGlkZScgfHwgcGFyYW1zLmVmZmVjdCA9PT0gJ2NvdmVyZmxvdycpKSB7XG4gICAgd3JhcHBlckVsLnN0eWxlLndpZHRoID0gYCR7c3dpcGVyLnZpcnR1YWxTaXplICsgc3BhY2VCZXR3ZWVufXB4YDtcbiAgfVxuICBpZiAocGFyYW1zLnNldFdyYXBwZXJTaXplKSB7XG4gICAgd3JhcHBlckVsLnN0eWxlW3N3aXBlci5nZXREaXJlY3Rpb25MYWJlbCgnd2lkdGgnKV0gPSBgJHtzd2lwZXIudmlydHVhbFNpemUgKyBzcGFjZUJldHdlZW59cHhgO1xuICB9XG4gIGlmIChncmlkRW5hYmxlZCkge1xuICAgIHN3aXBlci5ncmlkLnVwZGF0ZVdyYXBwZXJTaXplKHNsaWRlU2l6ZSwgc25hcEdyaWQpO1xuICB9XG5cbiAgLy8gUmVtb3ZlIGxhc3QgZ3JpZCBlbGVtZW50cyBkZXBlbmRpbmcgb24gd2lkdGhcbiAgaWYgKCFwYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICBjb25zdCBuZXdTbGlkZXNHcmlkID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbmFwR3JpZC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgbGV0IHNsaWRlc0dyaWRJdGVtID0gc25hcEdyaWRbaV07XG4gICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykgc2xpZGVzR3JpZEl0ZW0gPSBNYXRoLmZsb29yKHNsaWRlc0dyaWRJdGVtKTtcbiAgICAgIGlmIChzbmFwR3JpZFtpXSA8PSBzd2lwZXIudmlydHVhbFNpemUgLSBzd2lwZXJTaXplKSB7XG4gICAgICAgIG5ld1NsaWRlc0dyaWQucHVzaChzbGlkZXNHcmlkSXRlbSk7XG4gICAgICB9XG4gICAgfVxuICAgIHNuYXBHcmlkID0gbmV3U2xpZGVzR3JpZDtcbiAgICBpZiAoTWF0aC5mbG9vcihzd2lwZXIudmlydHVhbFNpemUgLSBzd2lwZXJTaXplKSAtIE1hdGguZmxvb3Ioc25hcEdyaWRbc25hcEdyaWQubGVuZ3RoIC0gMV0pID4gMSkge1xuICAgICAgc25hcEdyaWQucHVzaChzd2lwZXIudmlydHVhbFNpemUgLSBzd2lwZXJTaXplKTtcbiAgICB9XG4gIH1cbiAgaWYgKGlzVmlydHVhbCAmJiBwYXJhbXMubG9vcCkge1xuICAgIGNvbnN0IHNpemUgPSBzbGlkZXNTaXplc0dyaWRbMF0gKyBzcGFjZUJldHdlZW47XG4gICAgaWYgKHBhcmFtcy5zbGlkZXNQZXJHcm91cCA+IDEpIHtcbiAgICAgIGNvbnN0IGdyb3VwcyA9IE1hdGguY2VpbCgoc3dpcGVyLnZpcnR1YWwuc2xpZGVzQmVmb3JlICsgc3dpcGVyLnZpcnR1YWwuc2xpZGVzQWZ0ZXIpIC8gcGFyYW1zLnNsaWRlc1Blckdyb3VwKTtcbiAgICAgIGNvbnN0IGdyb3VwU2l6ZSA9IHNpemUgKiBwYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGdyb3VwczsgaSArPSAxKSB7XG4gICAgICAgIHNuYXBHcmlkLnB1c2goc25hcEdyaWRbc25hcEdyaWQubGVuZ3RoIC0gMV0gKyBncm91cFNpemUpO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN3aXBlci52aXJ0dWFsLnNsaWRlc0JlZm9yZSArIHN3aXBlci52aXJ0dWFsLnNsaWRlc0FmdGVyOyBpICs9IDEpIHtcbiAgICAgIGlmIChwYXJhbXMuc2xpZGVzUGVyR3JvdXAgPT09IDEpIHtcbiAgICAgICAgc25hcEdyaWQucHVzaChzbmFwR3JpZFtzbmFwR3JpZC5sZW5ndGggLSAxXSArIHNpemUpO1xuICAgICAgfVxuICAgICAgc2xpZGVzR3JpZC5wdXNoKHNsaWRlc0dyaWRbc2xpZGVzR3JpZC5sZW5ndGggLSAxXSArIHNpemUpO1xuICAgICAgc3dpcGVyLnZpcnR1YWxTaXplICs9IHNpemU7XG4gICAgfVxuICB9XG4gIGlmIChzbmFwR3JpZC5sZW5ndGggPT09IDApIHNuYXBHcmlkID0gWzBdO1xuICBpZiAoc3BhY2VCZXR3ZWVuICE9PSAwKSB7XG4gICAgY29uc3Qga2V5ID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpICYmIHJ0bCA/ICdtYXJnaW5MZWZ0JyA6IHN3aXBlci5nZXREaXJlY3Rpb25MYWJlbCgnbWFyZ2luUmlnaHQnKTtcbiAgICBzbGlkZXMuZmlsdGVyKChfLCBzbGlkZUluZGV4KSA9PiB7XG4gICAgICBpZiAoIXBhcmFtcy5jc3NNb2RlIHx8IHBhcmFtcy5sb29wKSByZXR1cm4gdHJ1ZTtcbiAgICAgIGlmIChzbGlkZUluZGV4ID09PSBzbGlkZXMubGVuZ3RoIC0gMSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KS5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgICAgc2xpZGVFbC5zdHlsZVtrZXldID0gYCR7c3BhY2VCZXR3ZWVufXB4YDtcbiAgICB9KTtcbiAgfVxuICBpZiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzICYmIHBhcmFtcy5jZW50ZXJlZFNsaWRlc0JvdW5kcykge1xuICAgIGxldCBhbGxTbGlkZXNTaXplID0gMDtcbiAgICBzbGlkZXNTaXplc0dyaWQuZm9yRWFjaChzbGlkZVNpemVWYWx1ZSA9PiB7XG4gICAgICBhbGxTbGlkZXNTaXplICs9IHNsaWRlU2l6ZVZhbHVlICsgKHNwYWNlQmV0d2VlbiB8fCAwKTtcbiAgICB9KTtcbiAgICBhbGxTbGlkZXNTaXplIC09IHNwYWNlQmV0d2VlbjtcbiAgICBjb25zdCBtYXhTbmFwID0gYWxsU2xpZGVzU2l6ZSAtIHN3aXBlclNpemU7XG4gICAgc25hcEdyaWQgPSBzbmFwR3JpZC5tYXAoc25hcCA9PiB7XG4gICAgICBpZiAoc25hcCA8PSAwKSByZXR1cm4gLW9mZnNldEJlZm9yZTtcbiAgICAgIGlmIChzbmFwID4gbWF4U25hcCkgcmV0dXJuIG1heFNuYXAgKyBvZmZzZXRBZnRlcjtcbiAgICAgIHJldHVybiBzbmFwO1xuICAgIH0pO1xuICB9XG4gIGlmIChwYXJhbXMuY2VudGVySW5zdWZmaWNpZW50U2xpZGVzKSB7XG4gICAgbGV0IGFsbFNsaWRlc1NpemUgPSAwO1xuICAgIHNsaWRlc1NpemVzR3JpZC5mb3JFYWNoKHNsaWRlU2l6ZVZhbHVlID0+IHtcbiAgICAgIGFsbFNsaWRlc1NpemUgKz0gc2xpZGVTaXplVmFsdWUgKyAoc3BhY2VCZXR3ZWVuIHx8IDApO1xuICAgIH0pO1xuICAgIGFsbFNsaWRlc1NpemUgLT0gc3BhY2VCZXR3ZWVuO1xuICAgIGNvbnN0IG9mZnNldFNpemUgPSAocGFyYW1zLnNsaWRlc09mZnNldEJlZm9yZSB8fCAwKSArIChwYXJhbXMuc2xpZGVzT2Zmc2V0QWZ0ZXIgfHwgMCk7XG4gICAgaWYgKGFsbFNsaWRlc1NpemUgKyBvZmZzZXRTaXplIDwgc3dpcGVyU2l6ZSkge1xuICAgICAgY29uc3QgYWxsU2xpZGVzT2Zmc2V0ID0gKHN3aXBlclNpemUgLSBhbGxTbGlkZXNTaXplIC0gb2Zmc2V0U2l6ZSkgLyAyO1xuICAgICAgc25hcEdyaWQuZm9yRWFjaCgoc25hcCwgc25hcEluZGV4KSA9PiB7XG4gICAgICAgIHNuYXBHcmlkW3NuYXBJbmRleF0gPSBzbmFwIC0gYWxsU2xpZGVzT2Zmc2V0O1xuICAgICAgfSk7XG4gICAgICBzbGlkZXNHcmlkLmZvckVhY2goKHNuYXAsIHNuYXBJbmRleCkgPT4ge1xuICAgICAgICBzbGlkZXNHcmlkW3NuYXBJbmRleF0gPSBzbmFwICsgYWxsU2xpZGVzT2Zmc2V0O1xuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIE9iamVjdC5hc3NpZ24oc3dpcGVyLCB7XG4gICAgc2xpZGVzLFxuICAgIHNuYXBHcmlkLFxuICAgIHNsaWRlc0dyaWQsXG4gICAgc2xpZGVzU2l6ZXNHcmlkXG4gIH0pO1xuICBpZiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzICYmIHBhcmFtcy5jc3NNb2RlICYmICFwYXJhbXMuY2VudGVyZWRTbGlkZXNCb3VuZHMpIHtcbiAgICBzZXRDU1NQcm9wZXJ0eSh3cmFwcGVyRWwsICctLXN3aXBlci1jZW50ZXJlZC1vZmZzZXQtYmVmb3JlJywgYCR7LXNuYXBHcmlkWzBdfXB4YCk7XG4gICAgc2V0Q1NTUHJvcGVydHkod3JhcHBlckVsLCAnLS1zd2lwZXItY2VudGVyZWQtb2Zmc2V0LWFmdGVyJywgYCR7c3dpcGVyLnNpemUgLyAyIC0gc2xpZGVzU2l6ZXNHcmlkW3NsaWRlc1NpemVzR3JpZC5sZW5ndGggLSAxXSAvIDJ9cHhgKTtcbiAgICBjb25zdCBhZGRUb1NuYXBHcmlkID0gLXN3aXBlci5zbmFwR3JpZFswXTtcbiAgICBjb25zdCBhZGRUb1NsaWRlc0dyaWQgPSAtc3dpcGVyLnNsaWRlc0dyaWRbMF07XG4gICAgc3dpcGVyLnNuYXBHcmlkID0gc3dpcGVyLnNuYXBHcmlkLm1hcCh2ID0+IHYgKyBhZGRUb1NuYXBHcmlkKTtcbiAgICBzd2lwZXIuc2xpZGVzR3JpZCA9IHN3aXBlci5zbGlkZXNHcmlkLm1hcCh2ID0+IHYgKyBhZGRUb1NsaWRlc0dyaWQpO1xuICB9XG4gIGlmIChzbGlkZXNMZW5ndGggIT09IHByZXZpb3VzU2xpZGVzTGVuZ3RoKSB7XG4gICAgc3dpcGVyLmVtaXQoJ3NsaWRlc0xlbmd0aENoYW5nZScpO1xuICB9XG4gIGlmIChzbmFwR3JpZC5sZW5ndGggIT09IHByZXZpb3VzU25hcEdyaWRMZW5ndGgpIHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93KSBzd2lwZXIuY2hlY2tPdmVyZmxvdygpO1xuICAgIHN3aXBlci5lbWl0KCdzbmFwR3JpZExlbmd0aENoYW5nZScpO1xuICB9XG4gIGlmIChzbGlkZXNHcmlkLmxlbmd0aCAhPT0gcHJldmlvdXNTbGlkZXNHcmlkTGVuZ3RoKSB7XG4gICAgc3dpcGVyLmVtaXQoJ3NsaWRlc0dyaWRMZW5ndGhDaGFuZ2UnKTtcbiAgfVxuICBpZiAocGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MpIHtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzT2Zmc2V0KCk7XG4gIH1cbiAgc3dpcGVyLmVtaXQoJ3NsaWRlc1VwZGF0ZWQnKTtcbiAgaWYgKCFpc1ZpcnR1YWwgJiYgIXBhcmFtcy5jc3NNb2RlICYmIChwYXJhbXMuZWZmZWN0ID09PSAnc2xpZGUnIHx8IHBhcmFtcy5lZmZlY3QgPT09ICdmYWRlJykpIHtcbiAgICBjb25zdCBiYWNrRmFjZUhpZGRlbkNsYXNzID0gYCR7cGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9YmFja2ZhY2UtaGlkZGVuYDtcbiAgICBjb25zdCBoYXNDbGFzc0JhY2tmYWNlQ2xhc3NBZGRlZCA9IHN3aXBlci5lbC5jbGFzc0xpc3QuY29udGFpbnMoYmFja0ZhY2VIaWRkZW5DbGFzcyk7XG4gICAgaWYgKHNsaWRlc0xlbmd0aCA8PSBwYXJhbXMubWF4QmFja2ZhY2VIaWRkZW5TbGlkZXMpIHtcbiAgICAgIGlmICghaGFzQ2xhc3NCYWNrZmFjZUNsYXNzQWRkZWQpIHN3aXBlci5lbC5jbGFzc0xpc3QuYWRkKGJhY2tGYWNlSGlkZGVuQ2xhc3MpO1xuICAgIH0gZWxzZSBpZiAoaGFzQ2xhc3NCYWNrZmFjZUNsYXNzQWRkZWQpIHtcbiAgICAgIHN3aXBlci5lbC5jbGFzc0xpc3QucmVtb3ZlKGJhY2tGYWNlSGlkZGVuQ2xhc3MpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiB1cGRhdGVBdXRvSGVpZ2h0KHNwZWVkKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IGFjdGl2ZVNsaWRlcyA9IFtdO1xuICBjb25zdCBpc1ZpcnR1YWwgPSBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZDtcbiAgbGV0IG5ld0hlaWdodCA9IDA7XG4gIGxldCBpO1xuICBpZiAodHlwZW9mIHNwZWVkID09PSAnbnVtYmVyJykge1xuICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKHNwZWVkKTtcbiAgfSBlbHNlIGlmIChzcGVlZCA9PT0gdHJ1ZSkge1xuICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKHN3aXBlci5wYXJhbXMuc3BlZWQpO1xuICB9XG4gIGNvbnN0IGdldFNsaWRlQnlJbmRleCA9IGluZGV4ID0+IHtcbiAgICBpZiAoaXNWaXJ0dWFsKSB7XG4gICAgICByZXR1cm4gc3dpcGVyLnNsaWRlc1tzd2lwZXIuZ2V0U2xpZGVJbmRleEJ5RGF0YShpbmRleCldO1xuICAgIH1cbiAgICByZXR1cm4gc3dpcGVyLnNsaWRlc1tpbmRleF07XG4gIH07XG4gIC8vIEZpbmQgc2xpZGVzIGN1cnJlbnRseSBpbiB2aWV3XG4gIGlmIChzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcgIT09ICdhdXRvJyAmJiBzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcgPiAxKSB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgIChzd2lwZXIudmlzaWJsZVNsaWRlcyB8fCBbXSkuZm9yRWFjaChzbGlkZSA9PiB7XG4gICAgICAgIGFjdGl2ZVNsaWRlcy5wdXNoKHNsaWRlKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgTWF0aC5jZWlsKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyk7IGkgKz0gMSkge1xuICAgICAgICBjb25zdCBpbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleCArIGk7XG4gICAgICAgIGlmIChpbmRleCA+IHN3aXBlci5zbGlkZXMubGVuZ3RoICYmICFpc1ZpcnR1YWwpIGJyZWFrO1xuICAgICAgICBhY3RpdmVTbGlkZXMucHVzaChnZXRTbGlkZUJ5SW5kZXgoaW5kZXgpKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgYWN0aXZlU2xpZGVzLnB1c2goZ2V0U2xpZGVCeUluZGV4KHN3aXBlci5hY3RpdmVJbmRleCkpO1xuICB9XG5cbiAgLy8gRmluZCBuZXcgaGVpZ2h0IGZyb20gaGlnaGVzdCBzbGlkZSBpbiB2aWV3XG4gIGZvciAoaSA9IDA7IGkgPCBhY3RpdmVTbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAodHlwZW9mIGFjdGl2ZVNsaWRlc1tpXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnN0IGhlaWdodCA9IGFjdGl2ZVNsaWRlc1tpXS5vZmZzZXRIZWlnaHQ7XG4gICAgICBuZXdIZWlnaHQgPSBoZWlnaHQgPiBuZXdIZWlnaHQgPyBoZWlnaHQgOiBuZXdIZWlnaHQ7XG4gICAgfVxuICB9XG5cbiAgLy8gVXBkYXRlIEhlaWdodFxuICBpZiAobmV3SGVpZ2h0IHx8IG5ld0hlaWdodCA9PT0gMCkgc3dpcGVyLndyYXBwZXJFbC5zdHlsZS5oZWlnaHQgPSBgJHtuZXdIZWlnaHR9cHhgO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVTbGlkZXNPZmZzZXQoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHNsaWRlcyA9IHN3aXBlci5zbGlkZXM7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBjb25zdCBtaW51c09mZnNldCA9IHN3aXBlci5pc0VsZW1lbnQgPyBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBzd2lwZXIud3JhcHBlckVsLm9mZnNldExlZnQgOiBzd2lwZXIud3JhcHBlckVsLm9mZnNldFRvcCA6IDA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgc2xpZGVzW2ldLnN3aXBlclNsaWRlT2Zmc2V0ID0gKHN3aXBlci5pc0hvcml6b250YWwoKSA/IHNsaWRlc1tpXS5vZmZzZXRMZWZ0IDogc2xpZGVzW2ldLm9mZnNldFRvcCkgLSBtaW51c09mZnNldCAtIHN3aXBlci5jc3NPdmVyZmxvd0FkanVzdG1lbnQoKTtcbiAgfVxufVxuXG5jb25zdCB0b2dnbGVTbGlkZUNsYXNzZXMkMSA9IChzbGlkZUVsLCBjb25kaXRpb24sIGNsYXNzTmFtZSkgPT4ge1xuICBpZiAoY29uZGl0aW9uICYmICFzbGlkZUVsLmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpKSB7XG4gICAgc2xpZGVFbC5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7XG4gIH0gZWxzZSBpZiAoIWNvbmRpdGlvbiAmJiBzbGlkZUVsLmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpKSB7XG4gICAgc2xpZGVFbC5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZSk7XG4gIH1cbn07XG5mdW5jdGlvbiB1cGRhdGVTbGlkZXNQcm9ncmVzcyh0cmFuc2xhdGUpIHtcbiAgaWYgKHRyYW5zbGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgdHJhbnNsYXRlID0gdGhpcyAmJiB0aGlzLnRyYW5zbGF0ZSB8fCAwO1xuICB9XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gIGNvbnN0IHtcbiAgICBzbGlkZXMsXG4gICAgcnRsVHJhbnNsYXRlOiBydGwsXG4gICAgc25hcEdyaWRcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKHNsaWRlcy5sZW5ndGggPT09IDApIHJldHVybjtcbiAgaWYgKHR5cGVvZiBzbGlkZXNbMF0uc3dpcGVyU2xpZGVPZmZzZXQgPT09ICd1bmRlZmluZWQnKSBzd2lwZXIudXBkYXRlU2xpZGVzT2Zmc2V0KCk7XG4gIGxldCBvZmZzZXRDZW50ZXIgPSAtdHJhbnNsYXRlO1xuICBpZiAocnRsKSBvZmZzZXRDZW50ZXIgPSB0cmFuc2xhdGU7XG4gIHN3aXBlci52aXNpYmxlU2xpZGVzSW5kZXhlcyA9IFtdO1xuICBzd2lwZXIudmlzaWJsZVNsaWRlcyA9IFtdO1xuICBsZXQgc3BhY2VCZXR3ZWVuID0gcGFyYW1zLnNwYWNlQmV0d2VlbjtcbiAgaWYgKHR5cGVvZiBzcGFjZUJldHdlZW4gPT09ICdzdHJpbmcnICYmIHNwYWNlQmV0d2Vlbi5pbmRleE9mKCclJykgPj0gMCkge1xuICAgIHNwYWNlQmV0d2VlbiA9IHBhcnNlRmxvYXQoc3BhY2VCZXR3ZWVuLnJlcGxhY2UoJyUnLCAnJykpIC8gMTAwICogc3dpcGVyLnNpemU7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHNwYWNlQmV0d2VlbiA9PT0gJ3N0cmluZycpIHtcbiAgICBzcGFjZUJldHdlZW4gPSBwYXJzZUZsb2F0KHNwYWNlQmV0d2Vlbik7XG4gIH1cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25zdCBzbGlkZSA9IHNsaWRlc1tpXTtcbiAgICBsZXQgc2xpZGVPZmZzZXQgPSBzbGlkZS5zd2lwZXJTbGlkZU9mZnNldDtcbiAgICBpZiAocGFyYW1zLmNzc01vZGUgJiYgcGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICBzbGlkZU9mZnNldCAtPSBzbGlkZXNbMF0uc3dpcGVyU2xpZGVPZmZzZXQ7XG4gICAgfVxuICAgIGNvbnN0IHNsaWRlUHJvZ3Jlc3MgPSAob2Zmc2V0Q2VudGVyICsgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcyA/IHN3aXBlci5taW5UcmFuc2xhdGUoKSA6IDApIC0gc2xpZGVPZmZzZXQpIC8gKHNsaWRlLnN3aXBlclNsaWRlU2l6ZSArIHNwYWNlQmV0d2Vlbik7XG4gICAgY29uc3Qgb3JpZ2luYWxTbGlkZVByb2dyZXNzID0gKG9mZnNldENlbnRlciAtIHNuYXBHcmlkWzBdICsgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcyA/IHN3aXBlci5taW5UcmFuc2xhdGUoKSA6IDApIC0gc2xpZGVPZmZzZXQpIC8gKHNsaWRlLnN3aXBlclNsaWRlU2l6ZSArIHNwYWNlQmV0d2Vlbik7XG4gICAgY29uc3Qgc2xpZGVCZWZvcmUgPSAtKG9mZnNldENlbnRlciAtIHNsaWRlT2Zmc2V0KTtcbiAgICBjb25zdCBzbGlkZUFmdGVyID0gc2xpZGVCZWZvcmUgKyBzd2lwZXIuc2xpZGVzU2l6ZXNHcmlkW2ldO1xuICAgIGNvbnN0IGlzRnVsbHlWaXNpYmxlID0gc2xpZGVCZWZvcmUgPj0gMCAmJiBzbGlkZUJlZm9yZSA8PSBzd2lwZXIuc2l6ZSAtIHN3aXBlci5zbGlkZXNTaXplc0dyaWRbaV07XG4gICAgY29uc3QgaXNWaXNpYmxlID0gc2xpZGVCZWZvcmUgPj0gMCAmJiBzbGlkZUJlZm9yZSA8IHN3aXBlci5zaXplIC0gMSB8fCBzbGlkZUFmdGVyID4gMSAmJiBzbGlkZUFmdGVyIDw9IHN3aXBlci5zaXplIHx8IHNsaWRlQmVmb3JlIDw9IDAgJiYgc2xpZGVBZnRlciA+PSBzd2lwZXIuc2l6ZTtcbiAgICBpZiAoaXNWaXNpYmxlKSB7XG4gICAgICBzd2lwZXIudmlzaWJsZVNsaWRlcy5wdXNoKHNsaWRlKTtcbiAgICAgIHN3aXBlci52aXNpYmxlU2xpZGVzSW5kZXhlcy5wdXNoKGkpO1xuICAgIH1cbiAgICB0b2dnbGVTbGlkZUNsYXNzZXMkMShzbGlkZSwgaXNWaXNpYmxlLCBwYXJhbXMuc2xpZGVWaXNpYmxlQ2xhc3MpO1xuICAgIHRvZ2dsZVNsaWRlQ2xhc3NlcyQxKHNsaWRlLCBpc0Z1bGx5VmlzaWJsZSwgcGFyYW1zLnNsaWRlRnVsbHlWaXNpYmxlQ2xhc3MpO1xuICAgIHNsaWRlLnByb2dyZXNzID0gcnRsID8gLXNsaWRlUHJvZ3Jlc3MgOiBzbGlkZVByb2dyZXNzO1xuICAgIHNsaWRlLm9yaWdpbmFsUHJvZ3Jlc3MgPSBydGwgPyAtb3JpZ2luYWxTbGlkZVByb2dyZXNzIDogb3JpZ2luYWxTbGlkZVByb2dyZXNzO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZVByb2dyZXNzKHRyYW5zbGF0ZSkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBpZiAodHlwZW9mIHRyYW5zbGF0ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjb25zdCBtdWx0aXBsaWVyID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZSA/IC0xIDogMTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICB0cmFuc2xhdGUgPSBzd2lwZXIgJiYgc3dpcGVyLnRyYW5zbGF0ZSAmJiBzd2lwZXIudHJhbnNsYXRlICogbXVsdGlwbGllciB8fCAwO1xuICB9XG4gIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gIGNvbnN0IHRyYW5zbGF0ZXNEaWZmID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpO1xuICBsZXQge1xuICAgIHByb2dyZXNzLFxuICAgIGlzQmVnaW5uaW5nLFxuICAgIGlzRW5kLFxuICAgIHByb2dyZXNzTG9vcFxuICB9ID0gc3dpcGVyO1xuICBjb25zdCB3YXNCZWdpbm5pbmcgPSBpc0JlZ2lubmluZztcbiAgY29uc3Qgd2FzRW5kID0gaXNFbmQ7XG4gIGlmICh0cmFuc2xhdGVzRGlmZiA9PT0gMCkge1xuICAgIHByb2dyZXNzID0gMDtcbiAgICBpc0JlZ2lubmluZyA9IHRydWU7XG4gICAgaXNFbmQgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHByb2dyZXNzID0gKHRyYW5zbGF0ZSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKSkgLyB0cmFuc2xhdGVzRGlmZjtcbiAgICBjb25zdCBpc0JlZ2lubmluZ1JvdW5kZWQgPSBNYXRoLmFicyh0cmFuc2xhdGUgLSBzd2lwZXIubWluVHJhbnNsYXRlKCkpIDwgMTtcbiAgICBjb25zdCBpc0VuZFJvdW5kZWQgPSBNYXRoLmFicyh0cmFuc2xhdGUgLSBzd2lwZXIubWF4VHJhbnNsYXRlKCkpIDwgMTtcbiAgICBpc0JlZ2lubmluZyA9IGlzQmVnaW5uaW5nUm91bmRlZCB8fCBwcm9ncmVzcyA8PSAwO1xuICAgIGlzRW5kID0gaXNFbmRSb3VuZGVkIHx8IHByb2dyZXNzID49IDE7XG4gICAgaWYgKGlzQmVnaW5uaW5nUm91bmRlZCkgcHJvZ3Jlc3MgPSAwO1xuICAgIGlmIChpc0VuZFJvdW5kZWQpIHByb2dyZXNzID0gMTtcbiAgfVxuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBjb25zdCBmaXJzdFNsaWRlSW5kZXggPSBzd2lwZXIuZ2V0U2xpZGVJbmRleEJ5RGF0YSgwKTtcbiAgICBjb25zdCBsYXN0U2xpZGVJbmRleCA9IHN3aXBlci5nZXRTbGlkZUluZGV4QnlEYXRhKHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gMSk7XG4gICAgY29uc3QgZmlyc3RTbGlkZVRyYW5zbGF0ZSA9IHN3aXBlci5zbGlkZXNHcmlkW2ZpcnN0U2xpZGVJbmRleF07XG4gICAgY29uc3QgbGFzdFNsaWRlVHJhbnNsYXRlID0gc3dpcGVyLnNsaWRlc0dyaWRbbGFzdFNsaWRlSW5kZXhdO1xuICAgIGNvbnN0IHRyYW5zbGF0ZU1heCA9IHN3aXBlci5zbGlkZXNHcmlkW3N3aXBlci5zbGlkZXNHcmlkLmxlbmd0aCAtIDFdO1xuICAgIGNvbnN0IHRyYW5zbGF0ZUFicyA9IE1hdGguYWJzKHRyYW5zbGF0ZSk7XG4gICAgaWYgKHRyYW5zbGF0ZUFicyA+PSBmaXJzdFNsaWRlVHJhbnNsYXRlKSB7XG4gICAgICBwcm9ncmVzc0xvb3AgPSAodHJhbnNsYXRlQWJzIC0gZmlyc3RTbGlkZVRyYW5zbGF0ZSkgLyB0cmFuc2xhdGVNYXg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb2dyZXNzTG9vcCA9ICh0cmFuc2xhdGVBYnMgKyB0cmFuc2xhdGVNYXggLSBsYXN0U2xpZGVUcmFuc2xhdGUpIC8gdHJhbnNsYXRlTWF4O1xuICAgIH1cbiAgICBpZiAocHJvZ3Jlc3NMb29wID4gMSkgcHJvZ3Jlc3NMb29wIC09IDE7XG4gIH1cbiAgT2JqZWN0LmFzc2lnbihzd2lwZXIsIHtcbiAgICBwcm9ncmVzcyxcbiAgICBwcm9ncmVzc0xvb3AsXG4gICAgaXNCZWdpbm5pbmcsXG4gICAgaXNFbmRcbiAgfSk7XG4gIGlmIChwYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcyB8fCBwYXJhbXMuY2VudGVyZWRTbGlkZXMgJiYgcGFyYW1zLmF1dG9IZWlnaHQpIHN3aXBlci51cGRhdGVTbGlkZXNQcm9ncmVzcyh0cmFuc2xhdGUpO1xuICBpZiAoaXNCZWdpbm5pbmcgJiYgIXdhc0JlZ2lubmluZykge1xuICAgIHN3aXBlci5lbWl0KCdyZWFjaEJlZ2lubmluZyB0b0VkZ2UnKTtcbiAgfVxuICBpZiAoaXNFbmQgJiYgIXdhc0VuZCkge1xuICAgIHN3aXBlci5lbWl0KCdyZWFjaEVuZCB0b0VkZ2UnKTtcbiAgfVxuICBpZiAod2FzQmVnaW5uaW5nICYmICFpc0JlZ2lubmluZyB8fCB3YXNFbmQgJiYgIWlzRW5kKSB7XG4gICAgc3dpcGVyLmVtaXQoJ2Zyb21FZGdlJyk7XG4gIH1cbiAgc3dpcGVyLmVtaXQoJ3Byb2dyZXNzJywgcHJvZ3Jlc3MpO1xufVxuXG5jb25zdCB0b2dnbGVTbGlkZUNsYXNzZXMgPSAoc2xpZGVFbCwgY29uZGl0aW9uLCBjbGFzc05hbWUpID0+IHtcbiAgaWYgKGNvbmRpdGlvbiAmJiAhc2xpZGVFbC5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKSkge1xuICAgIHNsaWRlRWwuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO1xuICB9IGVsc2UgaWYgKCFjb25kaXRpb24gJiYgc2xpZGVFbC5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKSkge1xuICAgIHNsaWRlRWwuY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpO1xuICB9XG59O1xuZnVuY3Rpb24gdXBkYXRlU2xpZGVzQ2xhc3NlcygpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHNsaWRlcyxcbiAgICBwYXJhbXMsXG4gICAgc2xpZGVzRWwsXG4gICAgYWN0aXZlSW5kZXhcbiAgfSA9IHN3aXBlcjtcbiAgY29uc3QgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgcGFyYW1zLnZpcnR1YWwuZW5hYmxlZDtcbiAgY29uc3QgZ3JpZEVuYWJsZWQgPSBzd2lwZXIuZ3JpZCAmJiBwYXJhbXMuZ3JpZCAmJiBwYXJhbXMuZ3JpZC5yb3dzID4gMTtcbiAgY29uc3QgZ2V0RmlsdGVyZWRTbGlkZSA9IHNlbGVjdG9yID0+IHtcbiAgICByZXR1cm4gZWxlbWVudENoaWxkcmVuKHNsaWRlc0VsLCBgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9JHtzZWxlY3Rvcn0sIHN3aXBlci1zbGlkZSR7c2VsZWN0b3J9YClbMF07XG4gIH07XG4gIGxldCBhY3RpdmVTbGlkZTtcbiAgbGV0IHByZXZTbGlkZTtcbiAgbGV0IG5leHRTbGlkZTtcbiAgaWYgKGlzVmlydHVhbCkge1xuICAgIGlmIChwYXJhbXMubG9vcCkge1xuICAgICAgbGV0IHNsaWRlSW5kZXggPSBhY3RpdmVJbmRleCAtIHN3aXBlci52aXJ0dWFsLnNsaWRlc0JlZm9yZTtcbiAgICAgIGlmIChzbGlkZUluZGV4IDwgMCkgc2xpZGVJbmRleCA9IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggKyBzbGlkZUluZGV4O1xuICAgICAgaWYgKHNsaWRlSW5kZXggPj0gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCkgc2xpZGVJbmRleCAtPSBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoO1xuICAgICAgYWN0aXZlU2xpZGUgPSBnZXRGaWx0ZXJlZFNsaWRlKGBbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke3NsaWRlSW5kZXh9XCJdYCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFjdGl2ZVNsaWRlID0gZ2V0RmlsdGVyZWRTbGlkZShgW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHthY3RpdmVJbmRleH1cIl1gKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGdyaWRFbmFibGVkKSB7XG4gICAgICBhY3RpdmVTbGlkZSA9IHNsaWRlcy5maWx0ZXIoc2xpZGVFbCA9PiBzbGlkZUVsLmNvbHVtbiA9PT0gYWN0aXZlSW5kZXgpWzBdO1xuICAgICAgbmV4dFNsaWRlID0gc2xpZGVzLmZpbHRlcihzbGlkZUVsID0+IHNsaWRlRWwuY29sdW1uID09PSBhY3RpdmVJbmRleCArIDEpWzBdO1xuICAgICAgcHJldlNsaWRlID0gc2xpZGVzLmZpbHRlcihzbGlkZUVsID0+IHNsaWRlRWwuY29sdW1uID09PSBhY3RpdmVJbmRleCAtIDEpWzBdO1xuICAgIH0gZWxzZSB7XG4gICAgICBhY3RpdmVTbGlkZSA9IHNsaWRlc1thY3RpdmVJbmRleF07XG4gICAgfVxuICB9XG4gIGlmIChhY3RpdmVTbGlkZSkge1xuICAgIGlmICghZ3JpZEVuYWJsZWQpIHtcbiAgICAgIC8vIE5leHQgU2xpZGVcbiAgICAgIG5leHRTbGlkZSA9IGVsZW1lbnROZXh0QWxsKGFjdGl2ZVNsaWRlLCBgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKVswXTtcbiAgICAgIGlmIChwYXJhbXMubG9vcCAmJiAhbmV4dFNsaWRlKSB7XG4gICAgICAgIG5leHRTbGlkZSA9IHNsaWRlc1swXTtcbiAgICAgIH1cblxuICAgICAgLy8gUHJldiBTbGlkZVxuICAgICAgcHJldlNsaWRlID0gZWxlbWVudFByZXZBbGwoYWN0aXZlU2xpZGUsIGAuJHtwYXJhbXMuc2xpZGVDbGFzc30sIHN3aXBlci1zbGlkZWApWzBdO1xuICAgICAgaWYgKHBhcmFtcy5sb29wICYmICFwcmV2U2xpZGUgPT09IDApIHtcbiAgICAgICAgcHJldlNsaWRlID0gc2xpZGVzW3NsaWRlcy5sZW5ndGggLSAxXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgc2xpZGVzLmZvckVhY2goc2xpZGVFbCA9PiB7XG4gICAgdG9nZ2xlU2xpZGVDbGFzc2VzKHNsaWRlRWwsIHNsaWRlRWwgPT09IGFjdGl2ZVNsaWRlLCBwYXJhbXMuc2xpZGVBY3RpdmVDbGFzcyk7XG4gICAgdG9nZ2xlU2xpZGVDbGFzc2VzKHNsaWRlRWwsIHNsaWRlRWwgPT09IG5leHRTbGlkZSwgcGFyYW1zLnNsaWRlTmV4dENsYXNzKTtcbiAgICB0b2dnbGVTbGlkZUNsYXNzZXMoc2xpZGVFbCwgc2xpZGVFbCA9PT0gcHJldlNsaWRlLCBwYXJhbXMuc2xpZGVQcmV2Q2xhc3MpO1xuICB9KTtcbiAgc3dpcGVyLmVtaXRTbGlkZXNDbGFzc2VzKCk7XG59XG5cbmNvbnN0IHByb2Nlc3NMYXp5UHJlbG9hZGVyID0gKHN3aXBlciwgaW1hZ2VFbCkgPT4ge1xuICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIucGFyYW1zKSByZXR1cm47XG4gIGNvbnN0IHNsaWRlU2VsZWN0b3IgPSAoKSA9PiBzd2lwZXIuaXNFbGVtZW50ID8gYHN3aXBlci1zbGlkZWAgOiBgLiR7c3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzfWA7XG4gIGNvbnN0IHNsaWRlRWwgPSBpbWFnZUVsLmNsb3Nlc3Qoc2xpZGVTZWxlY3RvcigpKTtcbiAgaWYgKHNsaWRlRWwpIHtcbiAgICBsZXQgbGF6eUVsID0gc2xpZGVFbC5xdWVyeVNlbGVjdG9yKGAuJHtzd2lwZXIucGFyYW1zLmxhenlQcmVsb2FkZXJDbGFzc31gKTtcbiAgICBpZiAoIWxhenlFbCAmJiBzd2lwZXIuaXNFbGVtZW50KSB7XG4gICAgICBpZiAoc2xpZGVFbC5zaGFkb3dSb290KSB7XG4gICAgICAgIGxhenlFbCA9IHNsaWRlRWwuc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKGAuJHtzd2lwZXIucGFyYW1zLmxhenlQcmVsb2FkZXJDbGFzc31gKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGluaXQgbGF0ZXJcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICBpZiAoc2xpZGVFbC5zaGFkb3dSb290KSB7XG4gICAgICAgICAgICBsYXp5RWwgPSBzbGlkZUVsLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcihgLiR7c3dpcGVyLnBhcmFtcy5sYXp5UHJlbG9hZGVyQ2xhc3N9YCk7XG4gICAgICAgICAgICBpZiAobGF6eUVsKSBsYXp5RWwucmVtb3ZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGxhenlFbCkgbGF6eUVsLnJlbW92ZSgpO1xuICB9XG59O1xuY29uc3QgdW5sYXp5ID0gKHN3aXBlciwgaW5kZXgpID0+IHtcbiAgaWYgKCFzd2lwZXIuc2xpZGVzW2luZGV4XSkgcmV0dXJuO1xuICBjb25zdCBpbWFnZUVsID0gc3dpcGVyLnNsaWRlc1tpbmRleF0ucXVlcnlTZWxlY3RvcignW2xvYWRpbmc9XCJsYXp5XCJdJyk7XG4gIGlmIChpbWFnZUVsKSBpbWFnZUVsLnJlbW92ZUF0dHJpYnV0ZSgnbG9hZGluZycpO1xufTtcbmNvbnN0IHByZWxvYWQgPSBzd2lwZXIgPT4ge1xuICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIucGFyYW1zKSByZXR1cm47XG4gIGxldCBhbW91bnQgPSBzd2lwZXIucGFyYW1zLmxhenlQcmVsb2FkUHJldk5leHQ7XG4gIGNvbnN0IGxlbiA9IHN3aXBlci5zbGlkZXMubGVuZ3RoO1xuICBpZiAoIWxlbiB8fCAhYW1vdW50IHx8IGFtb3VudCA8IDApIHJldHVybjtcbiAgYW1vdW50ID0gTWF0aC5taW4oYW1vdW50LCBsZW4pO1xuICBjb25zdCBzbGlkZXNQZXJWaWV3ID0gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgPyBzd2lwZXIuc2xpZGVzUGVyVmlld0R5bmFtaWMoKSA6IE1hdGguY2VpbChzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcpO1xuICBjb25zdCBhY3RpdmVJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleDtcbiAgaWYgKHN3aXBlci5wYXJhbXMuZ3JpZCAmJiBzd2lwZXIucGFyYW1zLmdyaWQucm93cyA+IDEpIHtcbiAgICBjb25zdCBhY3RpdmVDb2x1bW4gPSBhY3RpdmVJbmRleDtcbiAgICBjb25zdCBwcmVsb2FkQ29sdW1ucyA9IFthY3RpdmVDb2x1bW4gLSBhbW91bnRdO1xuICAgIHByZWxvYWRDb2x1bW5zLnB1c2goLi4uQXJyYXkuZnJvbSh7XG4gICAgICBsZW5ndGg6IGFtb3VudFxuICAgIH0pLm1hcCgoXywgaSkgPT4ge1xuICAgICAgcmV0dXJuIGFjdGl2ZUNvbHVtbiArIHNsaWRlc1BlclZpZXcgKyBpO1xuICAgIH0pKTtcbiAgICBzd2lwZXIuc2xpZGVzLmZvckVhY2goKHNsaWRlRWwsIGkpID0+IHtcbiAgICAgIGlmIChwcmVsb2FkQ29sdW1ucy5pbmNsdWRlcyhzbGlkZUVsLmNvbHVtbikpIHVubGF6eShzd2lwZXIsIGkpO1xuICAgIH0pO1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBzbGlkZUluZGV4TGFzdEluVmlldyA9IGFjdGl2ZUluZGV4ICsgc2xpZGVzUGVyVmlldyAtIDE7XG4gIGlmIChzd2lwZXIucGFyYW1zLnJld2luZCB8fCBzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICBmb3IgKGxldCBpID0gYWN0aXZlSW5kZXggLSBhbW91bnQ7IGkgPD0gc2xpZGVJbmRleExhc3RJblZpZXcgKyBhbW91bnQ7IGkgKz0gMSkge1xuICAgICAgY29uc3QgcmVhbEluZGV4ID0gKGkgJSBsZW4gKyBsZW4pICUgbGVuO1xuICAgICAgaWYgKHJlYWxJbmRleCA8IGFjdGl2ZUluZGV4IHx8IHJlYWxJbmRleCA+IHNsaWRlSW5kZXhMYXN0SW5WaWV3KSB1bmxhenkoc3dpcGVyLCByZWFsSW5kZXgpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBmb3IgKGxldCBpID0gTWF0aC5tYXgoYWN0aXZlSW5kZXggLSBhbW91bnQsIDApOyBpIDw9IE1hdGgubWluKHNsaWRlSW5kZXhMYXN0SW5WaWV3ICsgYW1vdW50LCBsZW4gLSAxKTsgaSArPSAxKSB7XG4gICAgICBpZiAoaSAhPT0gYWN0aXZlSW5kZXggJiYgKGkgPiBzbGlkZUluZGV4TGFzdEluVmlldyB8fCBpIDwgYWN0aXZlSW5kZXgpKSB7XG4gICAgICAgIHVubGF6eShzd2lwZXIsIGkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gZ2V0QWN0aXZlSW5kZXhCeVRyYW5zbGF0ZShzd2lwZXIpIHtcbiAgY29uc3Qge1xuICAgIHNsaWRlc0dyaWQsXG4gICAgcGFyYW1zXG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IHRyYW5zbGF0ZSA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyBzd2lwZXIudHJhbnNsYXRlIDogLXN3aXBlci50cmFuc2xhdGU7XG4gIGxldCBhY3RpdmVJbmRleDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXNHcmlkLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKHR5cGVvZiBzbGlkZXNHcmlkW2kgKyAxXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGlmICh0cmFuc2xhdGUgPj0gc2xpZGVzR3JpZFtpXSAmJiB0cmFuc2xhdGUgPCBzbGlkZXNHcmlkW2kgKyAxXSAtIChzbGlkZXNHcmlkW2kgKyAxXSAtIHNsaWRlc0dyaWRbaV0pIC8gMikge1xuICAgICAgICBhY3RpdmVJbmRleCA9IGk7XG4gICAgICB9IGVsc2UgaWYgKHRyYW5zbGF0ZSA+PSBzbGlkZXNHcmlkW2ldICYmIHRyYW5zbGF0ZSA8IHNsaWRlc0dyaWRbaSArIDFdKSB7XG4gICAgICAgIGFjdGl2ZUluZGV4ID0gaSArIDE7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0cmFuc2xhdGUgPj0gc2xpZGVzR3JpZFtpXSkge1xuICAgICAgYWN0aXZlSW5kZXggPSBpO1xuICAgIH1cbiAgfVxuICAvLyBOb3JtYWxpemUgc2xpZGVJbmRleFxuICBpZiAocGFyYW1zLm5vcm1hbGl6ZVNsaWRlSW5kZXgpIHtcbiAgICBpZiAoYWN0aXZlSW5kZXggPCAwIHx8IHR5cGVvZiBhY3RpdmVJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIGFjdGl2ZUluZGV4ID0gMDtcbiAgfVxuICByZXR1cm4gYWN0aXZlSW5kZXg7XG59XG5mdW5jdGlvbiB1cGRhdGVBY3RpdmVJbmRleChuZXdBY3RpdmVJbmRleCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB0cmFuc2xhdGUgPSBzd2lwZXIucnRsVHJhbnNsYXRlID8gc3dpcGVyLnRyYW5zbGF0ZSA6IC1zd2lwZXIudHJhbnNsYXRlO1xuICBjb25zdCB7XG4gICAgc25hcEdyaWQsXG4gICAgcGFyYW1zLFxuICAgIGFjdGl2ZUluZGV4OiBwcmV2aW91c0luZGV4LFxuICAgIHJlYWxJbmRleDogcHJldmlvdXNSZWFsSW5kZXgsXG4gICAgc25hcEluZGV4OiBwcmV2aW91c1NuYXBJbmRleFxuICB9ID0gc3dpcGVyO1xuICBsZXQgYWN0aXZlSW5kZXggPSBuZXdBY3RpdmVJbmRleDtcbiAgbGV0IHNuYXBJbmRleDtcbiAgY29uc3QgZ2V0VmlydHVhbFJlYWxJbmRleCA9IGFJbmRleCA9PiB7XG4gICAgbGV0IHJlYWxJbmRleCA9IGFJbmRleCAtIHN3aXBlci52aXJ0dWFsLnNsaWRlc0JlZm9yZTtcbiAgICBpZiAocmVhbEluZGV4IDwgMCkge1xuICAgICAgcmVhbEluZGV4ID0gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCArIHJlYWxJbmRleDtcbiAgICB9XG4gICAgaWYgKHJlYWxJbmRleCA+PSBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoKSB7XG4gICAgICByZWFsSW5kZXggLT0gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aDtcbiAgICB9XG4gICAgcmV0dXJuIHJlYWxJbmRleDtcbiAgfTtcbiAgaWYgKHR5cGVvZiBhY3RpdmVJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBhY3RpdmVJbmRleCA9IGdldEFjdGl2ZUluZGV4QnlUcmFuc2xhdGUoc3dpcGVyKTtcbiAgfVxuICBpZiAoc25hcEdyaWQuaW5kZXhPZih0cmFuc2xhdGUpID49IDApIHtcbiAgICBzbmFwSW5kZXggPSBzbmFwR3JpZC5pbmRleE9mKHRyYW5zbGF0ZSk7XG4gIH0gZWxzZSB7XG4gICAgY29uc3Qgc2tpcCA9IE1hdGgubWluKHBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAsIGFjdGl2ZUluZGV4KTtcbiAgICBzbmFwSW5kZXggPSBza2lwICsgTWF0aC5mbG9vcigoYWN0aXZlSW5kZXggLSBza2lwKSAvIHBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG4gIH1cbiAgaWYgKHNuYXBJbmRleCA+PSBzbmFwR3JpZC5sZW5ndGgpIHNuYXBJbmRleCA9IHNuYXBHcmlkLmxlbmd0aCAtIDE7XG4gIGlmIChhY3RpdmVJbmRleCA9PT0gcHJldmlvdXNJbmRleCAmJiAhc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgaWYgKHNuYXBJbmRleCAhPT0gcHJldmlvdXNTbmFwSW5kZXgpIHtcbiAgICAgIHN3aXBlci5zbmFwSW5kZXggPSBzbmFwSW5kZXg7XG4gICAgICBzd2lwZXIuZW1pdCgnc25hcEluZGV4Q2hhbmdlJyk7XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuICBpZiAoYWN0aXZlSW5kZXggPT09IHByZXZpb3VzSW5kZXggJiYgc3dpcGVyLnBhcmFtcy5sb29wICYmIHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkKSB7XG4gICAgc3dpcGVyLnJlYWxJbmRleCA9IGdldFZpcnR1YWxSZWFsSW5kZXgoYWN0aXZlSW5kZXgpO1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBncmlkRW5hYmxlZCA9IHN3aXBlci5ncmlkICYmIHBhcmFtcy5ncmlkICYmIHBhcmFtcy5ncmlkLnJvd3MgPiAxO1xuXG4gIC8vIEdldCByZWFsIGluZGV4XG4gIGxldCByZWFsSW5kZXg7XG4gIGlmIChzd2lwZXIudmlydHVhbCAmJiBwYXJhbXMudmlydHVhbC5lbmFibGVkICYmIHBhcmFtcy5sb29wKSB7XG4gICAgcmVhbEluZGV4ID0gZ2V0VmlydHVhbFJlYWxJbmRleChhY3RpdmVJbmRleCk7XG4gIH0gZWxzZSBpZiAoZ3JpZEVuYWJsZWQpIHtcbiAgICBjb25zdCBmaXJzdFNsaWRlSW5Db2x1bW4gPSBzd2lwZXIuc2xpZGVzLmZpbHRlcihzbGlkZUVsID0+IHNsaWRlRWwuY29sdW1uID09PSBhY3RpdmVJbmRleClbMF07XG4gICAgbGV0IGFjdGl2ZVNsaWRlSW5kZXggPSBwYXJzZUludChmaXJzdFNsaWRlSW5Db2x1bW4uZ2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpLCAxMCk7XG4gICAgaWYgKE51bWJlci5pc05hTihhY3RpdmVTbGlkZUluZGV4KSkge1xuICAgICAgYWN0aXZlU2xpZGVJbmRleCA9IE1hdGgubWF4KHN3aXBlci5zbGlkZXMuaW5kZXhPZihmaXJzdFNsaWRlSW5Db2x1bW4pLCAwKTtcbiAgICB9XG4gICAgcmVhbEluZGV4ID0gTWF0aC5mbG9vcihhY3RpdmVTbGlkZUluZGV4IC8gcGFyYW1zLmdyaWQucm93cyk7XG4gIH0gZWxzZSBpZiAoc3dpcGVyLnNsaWRlc1thY3RpdmVJbmRleF0pIHtcbiAgICBjb25zdCBzbGlkZUluZGV4ID0gc3dpcGVyLnNsaWRlc1thY3RpdmVJbmRleF0uZ2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpO1xuICAgIGlmIChzbGlkZUluZGV4KSB7XG4gICAgICByZWFsSW5kZXggPSBwYXJzZUludChzbGlkZUluZGV4LCAxMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlYWxJbmRleCA9IGFjdGl2ZUluZGV4O1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZWFsSW5kZXggPSBhY3RpdmVJbmRleDtcbiAgfVxuICBPYmplY3QuYXNzaWduKHN3aXBlciwge1xuICAgIHByZXZpb3VzU25hcEluZGV4LFxuICAgIHNuYXBJbmRleCxcbiAgICBwcmV2aW91c1JlYWxJbmRleCxcbiAgICByZWFsSW5kZXgsXG4gICAgcHJldmlvdXNJbmRleCxcbiAgICBhY3RpdmVJbmRleFxuICB9KTtcbiAgaWYgKHN3aXBlci5pbml0aWFsaXplZCkge1xuICAgIHByZWxvYWQoc3dpcGVyKTtcbiAgfVxuICBzd2lwZXIuZW1pdCgnYWN0aXZlSW5kZXhDaGFuZ2UnKTtcbiAgc3dpcGVyLmVtaXQoJ3NuYXBJbmRleENoYW5nZScpO1xuICBpZiAoc3dpcGVyLmluaXRpYWxpemVkIHx8IHN3aXBlci5wYXJhbXMucnVuQ2FsbGJhY2tzT25Jbml0KSB7XG4gICAgaWYgKHByZXZpb3VzUmVhbEluZGV4ICE9PSByZWFsSW5kZXgpIHtcbiAgICAgIHN3aXBlci5lbWl0KCdyZWFsSW5kZXhDaGFuZ2UnKTtcbiAgICB9XG4gICAgc3dpcGVyLmVtaXQoJ3NsaWRlQ2hhbmdlJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlQ2xpY2tlZFNsaWRlKGVsLCBwYXRoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gIGxldCBzbGlkZSA9IGVsLmNsb3Nlc3QoYC4ke3BhcmFtcy5zbGlkZUNsYXNzfSwgc3dpcGVyLXNsaWRlYCk7XG4gIGlmICghc2xpZGUgJiYgc3dpcGVyLmlzRWxlbWVudCAmJiBwYXRoICYmIHBhdGgubGVuZ3RoID4gMSAmJiBwYXRoLmluY2x1ZGVzKGVsKSkge1xuICAgIFsuLi5wYXRoLnNsaWNlKHBhdGguaW5kZXhPZihlbCkgKyAxLCBwYXRoLmxlbmd0aCldLmZvckVhY2gocGF0aEVsID0+IHtcbiAgICAgIGlmICghc2xpZGUgJiYgcGF0aEVsLm1hdGNoZXMgJiYgcGF0aEVsLm1hdGNoZXMoYC4ke3BhcmFtcy5zbGlkZUNsYXNzfSwgc3dpcGVyLXNsaWRlYCkpIHtcbiAgICAgICAgc2xpZGUgPSBwYXRoRWw7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgbGV0IHNsaWRlRm91bmQgPSBmYWxzZTtcbiAgbGV0IHNsaWRlSW5kZXg7XG4gIGlmIChzbGlkZSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3dpcGVyLnNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKHN3aXBlci5zbGlkZXNbaV0gPT09IHNsaWRlKSB7XG4gICAgICAgIHNsaWRlRm91bmQgPSB0cnVlO1xuICAgICAgICBzbGlkZUluZGV4ID0gaTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChzbGlkZSAmJiBzbGlkZUZvdW5kKSB7XG4gICAgc3dpcGVyLmNsaWNrZWRTbGlkZSA9IHNsaWRlO1xuICAgIGlmIChzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCkge1xuICAgICAgc3dpcGVyLmNsaWNrZWRJbmRleCA9IHBhcnNlSW50KHNsaWRlLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSwgMTApO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuY2xpY2tlZEluZGV4ID0gc2xpZGVJbmRleDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyLmNsaWNrZWRTbGlkZSA9IHVuZGVmaW5lZDtcbiAgICBzd2lwZXIuY2xpY2tlZEluZGV4ID0gdW5kZWZpbmVkO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocGFyYW1zLnNsaWRlVG9DbGlja2VkU2xpZGUgJiYgc3dpcGVyLmNsaWNrZWRJbmRleCAhPT0gdW5kZWZpbmVkICYmIHN3aXBlci5jbGlja2VkSW5kZXggIT09IHN3aXBlci5hY3RpdmVJbmRleCkge1xuICAgIHN3aXBlci5zbGlkZVRvQ2xpY2tlZFNsaWRlKCk7XG4gIH1cbn1cblxudmFyIHVwZGF0ZSA9IHtcbiAgdXBkYXRlU2l6ZSxcbiAgdXBkYXRlU2xpZGVzLFxuICB1cGRhdGVBdXRvSGVpZ2h0LFxuICB1cGRhdGVTbGlkZXNPZmZzZXQsXG4gIHVwZGF0ZVNsaWRlc1Byb2dyZXNzLFxuICB1cGRhdGVQcm9ncmVzcyxcbiAgdXBkYXRlU2xpZGVzQ2xhc3NlcyxcbiAgdXBkYXRlQWN0aXZlSW5kZXgsXG4gIHVwZGF0ZUNsaWNrZWRTbGlkZVxufTtcblxuZnVuY3Rpb24gZ2V0U3dpcGVyVHJhbnNsYXRlKGF4aXMpIHtcbiAgaWYgKGF4aXMgPT09IHZvaWQgMCkge1xuICAgIGF4aXMgPSB0aGlzLmlzSG9yaXpvbnRhbCgpID8gJ3gnIDogJ3knO1xuICB9XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgcnRsVHJhbnNsYXRlOiBydGwsXG4gICAgdHJhbnNsYXRlLFxuICAgIHdyYXBwZXJFbFxuICB9ID0gc3dpcGVyO1xuICBpZiAocGFyYW1zLnZpcnR1YWxUcmFuc2xhdGUpIHtcbiAgICByZXR1cm4gcnRsID8gLXRyYW5zbGF0ZSA6IHRyYW5zbGF0ZTtcbiAgfVxuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICByZXR1cm4gdHJhbnNsYXRlO1xuICB9XG4gIGxldCBjdXJyZW50VHJhbnNsYXRlID0gZ2V0VHJhbnNsYXRlKHdyYXBwZXJFbCwgYXhpcyk7XG4gIGN1cnJlbnRUcmFuc2xhdGUgKz0gc3dpcGVyLmNzc092ZXJmbG93QWRqdXN0bWVudCgpO1xuICBpZiAocnRsKSBjdXJyZW50VHJhbnNsYXRlID0gLWN1cnJlbnRUcmFuc2xhdGU7XG4gIHJldHVybiBjdXJyZW50VHJhbnNsYXRlIHx8IDA7XG59XG5cbmZ1bmN0aW9uIHNldFRyYW5zbGF0ZSh0cmFuc2xhdGUsIGJ5Q29udHJvbGxlcikge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcnRsVHJhbnNsYXRlOiBydGwsXG4gICAgcGFyYW1zLFxuICAgIHdyYXBwZXJFbCxcbiAgICBwcm9ncmVzc1xuICB9ID0gc3dpcGVyO1xuICBsZXQgeCA9IDA7XG4gIGxldCB5ID0gMDtcbiAgY29uc3QgeiA9IDA7XG4gIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICB4ID0gcnRsID8gLXRyYW5zbGF0ZSA6IHRyYW5zbGF0ZTtcbiAgfSBlbHNlIHtcbiAgICB5ID0gdHJhbnNsYXRlO1xuICB9XG4gIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSB7XG4gICAgeCA9IE1hdGguZmxvb3IoeCk7XG4gICAgeSA9IE1hdGguZmxvb3IoeSk7XG4gIH1cbiAgc3dpcGVyLnByZXZpb3VzVHJhbnNsYXRlID0gc3dpcGVyLnRyYW5zbGF0ZTtcbiAgc3dpcGVyLnRyYW5zbGF0ZSA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHggOiB5O1xuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICB3cmFwcGVyRWxbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ3Njcm9sbExlZnQnIDogJ3Njcm9sbFRvcCddID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gLXggOiAteTtcbiAgfSBlbHNlIGlmICghcGFyYW1zLnZpcnR1YWxUcmFuc2xhdGUpIHtcbiAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICB4IC09IHN3aXBlci5jc3NPdmVyZmxvd0FkanVzdG1lbnQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgeSAtPSBzd2lwZXIuY3NzT3ZlcmZsb3dBZGp1c3RtZW50KCk7XG4gICAgfVxuICAgIHdyYXBwZXJFbC5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlM2QoJHt4fXB4LCAke3l9cHgsICR7en1weClgO1xuICB9XG5cbiAgLy8gQ2hlY2sgaWYgd2UgbmVlZCB0byB1cGRhdGUgcHJvZ3Jlc3NcbiAgbGV0IG5ld1Byb2dyZXNzO1xuICBjb25zdCB0cmFuc2xhdGVzRGlmZiA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKTtcbiAgaWYgKHRyYW5zbGF0ZXNEaWZmID09PSAwKSB7XG4gICAgbmV3UHJvZ3Jlc3MgPSAwO1xuICB9IGVsc2Uge1xuICAgIG5ld1Byb2dyZXNzID0gKHRyYW5zbGF0ZSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKSkgLyB0cmFuc2xhdGVzRGlmZjtcbiAgfVxuICBpZiAobmV3UHJvZ3Jlc3MgIT09IHByb2dyZXNzKSB7XG4gICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKHRyYW5zbGF0ZSk7XG4gIH1cbiAgc3dpcGVyLmVtaXQoJ3NldFRyYW5zbGF0ZScsIHN3aXBlci50cmFuc2xhdGUsIGJ5Q29udHJvbGxlcik7XG59XG5cbmZ1bmN0aW9uIG1pblRyYW5zbGF0ZSgpIHtcbiAgcmV0dXJuIC10aGlzLnNuYXBHcmlkWzBdO1xufVxuXG5mdW5jdGlvbiBtYXhUcmFuc2xhdGUoKSB7XG4gIHJldHVybiAtdGhpcy5zbmFwR3JpZFt0aGlzLnNuYXBHcmlkLmxlbmd0aCAtIDFdO1xufVxuXG5mdW5jdGlvbiB0cmFuc2xhdGVUbyh0cmFuc2xhdGUsIHNwZWVkLCBydW5DYWxsYmFja3MsIHRyYW5zbGF0ZUJvdW5kcywgaW50ZXJuYWwpIHtcbiAgaWYgKHRyYW5zbGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgdHJhbnNsYXRlID0gMDtcbiAgfVxuICBpZiAoc3BlZWQgPT09IHZvaWQgMCkge1xuICAgIHNwZWVkID0gdGhpcy5wYXJhbXMuc3BlZWQ7XG4gIH1cbiAgaWYgKHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwKSB7XG4gICAgcnVuQ2FsbGJhY2tzID0gdHJ1ZTtcbiAgfVxuICBpZiAodHJhbnNsYXRlQm91bmRzID09PSB2b2lkIDApIHtcbiAgICB0cmFuc2xhdGVCb3VuZHMgPSB0cnVlO1xuICB9XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgd3JhcHBlckVsXG4gIH0gPSBzd2lwZXI7XG4gIGlmIChzd2lwZXIuYW5pbWF0aW5nICYmIHBhcmFtcy5wcmV2ZW50SW50ZXJhY3Rpb25PblRyYW5zaXRpb24pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgY29uc3QgbWluVHJhbnNsYXRlID0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpO1xuICBjb25zdCBtYXhUcmFuc2xhdGUgPSBzd2lwZXIubWF4VHJhbnNsYXRlKCk7XG4gIGxldCBuZXdUcmFuc2xhdGU7XG4gIGlmICh0cmFuc2xhdGVCb3VuZHMgJiYgdHJhbnNsYXRlID4gbWluVHJhbnNsYXRlKSBuZXdUcmFuc2xhdGUgPSBtaW5UcmFuc2xhdGU7ZWxzZSBpZiAodHJhbnNsYXRlQm91bmRzICYmIHRyYW5zbGF0ZSA8IG1heFRyYW5zbGF0ZSkgbmV3VHJhbnNsYXRlID0gbWF4VHJhbnNsYXRlO2Vsc2UgbmV3VHJhbnNsYXRlID0gdHJhbnNsYXRlO1xuXG4gIC8vIFVwZGF0ZSBwcm9ncmVzc1xuICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MobmV3VHJhbnNsYXRlKTtcbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgY29uc3QgaXNIID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpO1xuICAgIGlmIChzcGVlZCA9PT0gMCkge1xuICAgICAgd3JhcHBlckVsW2lzSCA/ICdzY3JvbGxMZWZ0JyA6ICdzY3JvbGxUb3AnXSA9IC1uZXdUcmFuc2xhdGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghc3dpcGVyLnN1cHBvcnQuc21vb3RoU2Nyb2xsKSB7XG4gICAgICAgIGFuaW1hdGVDU1NNb2RlU2Nyb2xsKHtcbiAgICAgICAgICBzd2lwZXIsXG4gICAgICAgICAgdGFyZ2V0UG9zaXRpb246IC1uZXdUcmFuc2xhdGUsXG4gICAgICAgICAgc2lkZTogaXNIID8gJ2xlZnQnIDogJ3RvcCdcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgd3JhcHBlckVsLnNjcm9sbFRvKHtcbiAgICAgICAgW2lzSCA/ICdsZWZ0JyA6ICd0b3AnXTogLW5ld1RyYW5zbGF0ZSxcbiAgICAgICAgYmVoYXZpb3I6ICdzbW9vdGgnXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKHNwZWVkID09PSAwKSB7XG4gICAgc3dpcGVyLnNldFRyYW5zaXRpb24oMCk7XG4gICAgc3dpcGVyLnNldFRyYW5zbGF0ZShuZXdUcmFuc2xhdGUpO1xuICAgIGlmIChydW5DYWxsYmFja3MpIHtcbiAgICAgIHN3aXBlci5lbWl0KCdiZWZvcmVUcmFuc2l0aW9uU3RhcnQnLCBzcGVlZCwgaW50ZXJuYWwpO1xuICAgICAgc3dpcGVyLmVtaXQoJ3RyYW5zaXRpb25FbmQnKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyLnNldFRyYW5zaXRpb24oc3BlZWQpO1xuICAgIHN3aXBlci5zZXRUcmFuc2xhdGUobmV3VHJhbnNsYXRlKTtcbiAgICBpZiAocnVuQ2FsbGJhY2tzKSB7XG4gICAgICBzd2lwZXIuZW1pdCgnYmVmb3JlVHJhbnNpdGlvblN0YXJ0Jywgc3BlZWQsIGludGVybmFsKTtcbiAgICAgIHN3aXBlci5lbWl0KCd0cmFuc2l0aW9uU3RhcnQnKTtcbiAgICB9XG4gICAgaWYgKCFzd2lwZXIuYW5pbWF0aW5nKSB7XG4gICAgICBzd2lwZXIuYW5pbWF0aW5nID0gdHJ1ZTtcbiAgICAgIGlmICghc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCkge1xuICAgICAgICBzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kID0gZnVuY3Rpb24gdHJhbnNpdGlvbkVuZChlKSB7XG4gICAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgICAgICAgIGlmIChlLnRhcmdldCAhPT0gdGhpcykgcmV0dXJuO1xuICAgICAgICAgIHN3aXBlci53cmFwcGVyRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIHN3aXBlci5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpO1xuICAgICAgICAgIHN3aXBlci5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQgPSBudWxsO1xuICAgICAgICAgIGRlbGV0ZSBzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kO1xuICAgICAgICAgIHN3aXBlci5hbmltYXRpbmcgPSBmYWxzZTtcbiAgICAgICAgICBpZiAocnVuQ2FsbGJhY2tzKSB7XG4gICAgICAgICAgICBzd2lwZXIuZW1pdCgndHJhbnNpdGlvbkVuZCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHN3aXBlci53cmFwcGVyRWwuYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIHN3aXBlci5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxudmFyIHRyYW5zbGF0ZSA9IHtcbiAgZ2V0VHJhbnNsYXRlOiBnZXRTd2lwZXJUcmFuc2xhdGUsXG4gIHNldFRyYW5zbGF0ZSxcbiAgbWluVHJhbnNsYXRlLFxuICBtYXhUcmFuc2xhdGUsXG4gIHRyYW5zbGF0ZVRvXG59O1xuXG5mdW5jdGlvbiBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uLCBieUNvbnRyb2xsZXIpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgaWYgKCFzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICBzd2lwZXIud3JhcHBlckVsLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IGAke2R1cmF0aW9ufW1zYDtcbiAgICBzd2lwZXIud3JhcHBlckVsLnN0eWxlLnRyYW5zaXRpb25EZWxheSA9IGR1cmF0aW9uID09PSAwID8gYDBtc2AgOiAnJztcbiAgfVxuICBzd2lwZXIuZW1pdCgnc2V0VHJhbnNpdGlvbicsIGR1cmF0aW9uLCBieUNvbnRyb2xsZXIpO1xufVxuXG5mdW5jdGlvbiB0cmFuc2l0aW9uRW1pdChfcmVmKSB7XG4gIGxldCB7XG4gICAgc3dpcGVyLFxuICAgIHJ1bkNhbGxiYWNrcyxcbiAgICBkaXJlY3Rpb24sXG4gICAgc3RlcFxuICB9ID0gX3JlZjtcbiAgY29uc3Qge1xuICAgIGFjdGl2ZUluZGV4LFxuICAgIHByZXZpb3VzSW5kZXhcbiAgfSA9IHN3aXBlcjtcbiAgbGV0IGRpciA9IGRpcmVjdGlvbjtcbiAgaWYgKCFkaXIpIHtcbiAgICBpZiAoYWN0aXZlSW5kZXggPiBwcmV2aW91c0luZGV4KSBkaXIgPSAnbmV4dCc7ZWxzZSBpZiAoYWN0aXZlSW5kZXggPCBwcmV2aW91c0luZGV4KSBkaXIgPSAncHJldic7ZWxzZSBkaXIgPSAncmVzZXQnO1xuICB9XG4gIHN3aXBlci5lbWl0KGB0cmFuc2l0aW9uJHtzdGVwfWApO1xuICBpZiAocnVuQ2FsbGJhY2tzICYmIGFjdGl2ZUluZGV4ICE9PSBwcmV2aW91c0luZGV4KSB7XG4gICAgaWYgKGRpciA9PT0gJ3Jlc2V0Jykge1xuICAgICAgc3dpcGVyLmVtaXQoYHNsaWRlUmVzZXRUcmFuc2l0aW9uJHtzdGVwfWApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzd2lwZXIuZW1pdChgc2xpZGVDaGFuZ2VUcmFuc2l0aW9uJHtzdGVwfWApO1xuICAgIGlmIChkaXIgPT09ICduZXh0Jykge1xuICAgICAgc3dpcGVyLmVtaXQoYHNsaWRlTmV4dFRyYW5zaXRpb24ke3N0ZXB9YCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5lbWl0KGBzbGlkZVByZXZUcmFuc2l0aW9uJHtzdGVwfWApO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiB0cmFuc2l0aW9uU3RhcnQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pIHtcbiAgaWYgKHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwKSB7XG4gICAgcnVuQ2FsbGJhY2tzID0gdHJ1ZTtcbiAgfVxuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcGFyYW1zXG4gIH0gPSBzd2lwZXI7XG4gIGlmIChwYXJhbXMuY3NzTW9kZSkgcmV0dXJuO1xuICBpZiAocGFyYW1zLmF1dG9IZWlnaHQpIHtcbiAgICBzd2lwZXIudXBkYXRlQXV0b0hlaWdodCgpO1xuICB9XG4gIHRyYW5zaXRpb25FbWl0KHtcbiAgICBzd2lwZXIsXG4gICAgcnVuQ2FsbGJhY2tzLFxuICAgIGRpcmVjdGlvbixcbiAgICBzdGVwOiAnU3RhcnQnXG4gIH0pO1xufVxuXG5mdW5jdGlvbiB0cmFuc2l0aW9uRW5kKHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKSB7XG4gIGlmIChydW5DYWxsYmFja3MgPT09IHZvaWQgMCkge1xuICAgIHJ1bkNhbGxiYWNrcyA9IHRydWU7XG4gIH1cbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHBhcmFtc1xuICB9ID0gc3dpcGVyO1xuICBzd2lwZXIuYW5pbWF0aW5nID0gZmFsc2U7XG4gIGlmIChwYXJhbXMuY3NzTW9kZSkgcmV0dXJuO1xuICBzd2lwZXIuc2V0VHJhbnNpdGlvbigwKTtcbiAgdHJhbnNpdGlvbkVtaXQoe1xuICAgIHN3aXBlcixcbiAgICBydW5DYWxsYmFja3MsXG4gICAgZGlyZWN0aW9uLFxuICAgIHN0ZXA6ICdFbmQnXG4gIH0pO1xufVxuXG52YXIgdHJhbnNpdGlvbiA9IHtcbiAgc2V0VHJhbnNpdGlvbixcbiAgdHJhbnNpdGlvblN0YXJ0LFxuICB0cmFuc2l0aW9uRW5kXG59O1xuXG5mdW5jdGlvbiBzbGlkZVRvKGluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCwgaW5pdGlhbCkge1xuICBpZiAoaW5kZXggPT09IHZvaWQgMCkge1xuICAgIGluZGV4ID0gMDtcbiAgfVxuICBpZiAocnVuQ2FsbGJhY2tzID09PSB2b2lkIDApIHtcbiAgICBydW5DYWxsYmFja3MgPSB0cnVlO1xuICB9XG4gIGlmICh0eXBlb2YgaW5kZXggPT09ICdzdHJpbmcnKSB7XG4gICAgaW5kZXggPSBwYXJzZUludChpbmRleCwgMTApO1xuICB9XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGxldCBzbGlkZUluZGV4ID0gaW5kZXg7XG4gIGlmIChzbGlkZUluZGV4IDwgMCkgc2xpZGVJbmRleCA9IDA7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgc25hcEdyaWQsXG4gICAgc2xpZGVzR3JpZCxcbiAgICBwcmV2aW91c0luZGV4LFxuICAgIGFjdGl2ZUluZGV4LFxuICAgIHJ0bFRyYW5zbGF0ZTogcnRsLFxuICAgIHdyYXBwZXJFbCxcbiAgICBlbmFibGVkXG4gIH0gPSBzd2lwZXI7XG4gIGlmICghZW5hYmxlZCAmJiAhaW50ZXJuYWwgJiYgIWluaXRpYWwgfHwgc3dpcGVyLmRlc3Ryb3llZCB8fCBzd2lwZXIuYW5pbWF0aW5nICYmIHBhcmFtcy5wcmV2ZW50SW50ZXJhY3Rpb25PblRyYW5zaXRpb24pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKHR5cGVvZiBzcGVlZCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBzcGVlZCA9IHN3aXBlci5wYXJhbXMuc3BlZWQ7XG4gIH1cbiAgY29uc3Qgc2tpcCA9IE1hdGgubWluKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwLCBzbGlkZUluZGV4KTtcbiAgbGV0IHNuYXBJbmRleCA9IHNraXAgKyBNYXRoLmZsb29yKChzbGlkZUluZGV4IC0gc2tpcCkgLyBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwKTtcbiAgaWYgKHNuYXBJbmRleCA+PSBzbmFwR3JpZC5sZW5ndGgpIHNuYXBJbmRleCA9IHNuYXBHcmlkLmxlbmd0aCAtIDE7XG4gIGNvbnN0IHRyYW5zbGF0ZSA9IC1zbmFwR3JpZFtzbmFwSW5kZXhdO1xuICAvLyBOb3JtYWxpemUgc2xpZGVJbmRleFxuICBpZiAocGFyYW1zLm5vcm1hbGl6ZVNsaWRlSW5kZXgpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlc0dyaWQubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGNvbnN0IG5vcm1hbGl6ZWRUcmFuc2xhdGUgPSAtTWF0aC5mbG9vcih0cmFuc2xhdGUgKiAxMDApO1xuICAgICAgY29uc3Qgbm9ybWFsaXplZEdyaWQgPSBNYXRoLmZsb29yKHNsaWRlc0dyaWRbaV0gKiAxMDApO1xuICAgICAgY29uc3Qgbm9ybWFsaXplZEdyaWROZXh0ID0gTWF0aC5mbG9vcihzbGlkZXNHcmlkW2kgKyAxXSAqIDEwMCk7XG4gICAgICBpZiAodHlwZW9mIHNsaWRlc0dyaWRbaSArIDFdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBpZiAobm9ybWFsaXplZFRyYW5zbGF0ZSA+PSBub3JtYWxpemVkR3JpZCAmJiBub3JtYWxpemVkVHJhbnNsYXRlIDwgbm9ybWFsaXplZEdyaWROZXh0IC0gKG5vcm1hbGl6ZWRHcmlkTmV4dCAtIG5vcm1hbGl6ZWRHcmlkKSAvIDIpIHtcbiAgICAgICAgICBzbGlkZUluZGV4ID0gaTtcbiAgICAgICAgfSBlbHNlIGlmIChub3JtYWxpemVkVHJhbnNsYXRlID49IG5vcm1hbGl6ZWRHcmlkICYmIG5vcm1hbGl6ZWRUcmFuc2xhdGUgPCBub3JtYWxpemVkR3JpZE5leHQpIHtcbiAgICAgICAgICBzbGlkZUluZGV4ID0gaSArIDE7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAobm9ybWFsaXplZFRyYW5zbGF0ZSA+PSBub3JtYWxpemVkR3JpZCkge1xuICAgICAgICBzbGlkZUluZGV4ID0gaTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLy8gRGlyZWN0aW9ucyBsb2Nrc1xuICBpZiAoc3dpcGVyLmluaXRpYWxpemVkICYmIHNsaWRlSW5kZXggIT09IGFjdGl2ZUluZGV4KSB7XG4gICAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZU5leHQgJiYgKHJ0bCA/IHRyYW5zbGF0ZSA+IHN3aXBlci50cmFuc2xhdGUgJiYgdHJhbnNsYXRlID4gc3dpcGVyLm1pblRyYW5zbGF0ZSgpIDogdHJhbnNsYXRlIDwgc3dpcGVyLnRyYW5zbGF0ZSAmJiB0cmFuc2xhdGUgPCBzd2lwZXIubWluVHJhbnNsYXRlKCkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICghc3dpcGVyLmFsbG93U2xpZGVQcmV2ICYmIHRyYW5zbGF0ZSA+IHN3aXBlci50cmFuc2xhdGUgJiYgdHJhbnNsYXRlID4gc3dpcGVyLm1heFRyYW5zbGF0ZSgpKSB7XG4gICAgICBpZiAoKGFjdGl2ZUluZGV4IHx8IDApICE9PSBzbGlkZUluZGV4KSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKHNsaWRlSW5kZXggIT09IChwcmV2aW91c0luZGV4IHx8IDApICYmIHJ1bkNhbGxiYWNrcykge1xuICAgIHN3aXBlci5lbWl0KCdiZWZvcmVTbGlkZUNoYW5nZVN0YXJ0Jyk7XG4gIH1cblxuICAvLyBVcGRhdGUgcHJvZ3Jlc3NcbiAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKHRyYW5zbGF0ZSk7XG4gIGxldCBkaXJlY3Rpb247XG4gIGlmIChzbGlkZUluZGV4ID4gYWN0aXZlSW5kZXgpIGRpcmVjdGlvbiA9ICduZXh0JztlbHNlIGlmIChzbGlkZUluZGV4IDwgYWN0aXZlSW5kZXgpIGRpcmVjdGlvbiA9ICdwcmV2JztlbHNlIGRpcmVjdGlvbiA9ICdyZXNldCc7XG5cbiAgLy8gVXBkYXRlIEluZGV4XG4gIGlmIChydGwgJiYgLXRyYW5zbGF0ZSA9PT0gc3dpcGVyLnRyYW5zbGF0ZSB8fCAhcnRsICYmIHRyYW5zbGF0ZSA9PT0gc3dpcGVyLnRyYW5zbGF0ZSkge1xuICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleChzbGlkZUluZGV4KTtcbiAgICAvLyBVcGRhdGUgSGVpZ2h0XG4gICAgaWYgKHBhcmFtcy5hdXRvSGVpZ2h0KSB7XG4gICAgICBzd2lwZXIudXBkYXRlQXV0b0hlaWdodCgpO1xuICAgIH1cbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgIGlmIChwYXJhbXMuZWZmZWN0ICE9PSAnc2xpZGUnKSB7XG4gICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKHRyYW5zbGF0ZSk7XG4gICAgfVxuICAgIGlmIChkaXJlY3Rpb24gIT09ICdyZXNldCcpIHtcbiAgICAgIHN3aXBlci50cmFuc2l0aW9uU3RhcnQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pO1xuICAgICAgc3dpcGVyLnRyYW5zaXRpb25FbmQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgY29uc3QgaXNIID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpO1xuICAgIGNvbnN0IHQgPSBydGwgPyB0cmFuc2xhdGUgOiAtdHJhbnNsYXRlO1xuICAgIGlmIChzcGVlZCA9PT0gMCkge1xuICAgICAgY29uc3QgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG4gICAgICBpZiAoaXNWaXJ0dWFsKSB7XG4gICAgICAgIHN3aXBlci53cmFwcGVyRWwuc3R5bGUuc2Nyb2xsU25hcFR5cGUgPSAnbm9uZSc7XG4gICAgICAgIHN3aXBlci5faW1tZWRpYXRlVmlydHVhbCA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoaXNWaXJ0dWFsICYmICFzd2lwZXIuX2Nzc01vZGVWaXJ0dWFsSW5pdGlhbFNldCAmJiBzd2lwZXIucGFyYW1zLmluaXRpYWxTbGlkZSA+IDApIHtcbiAgICAgICAgc3dpcGVyLl9jc3NNb2RlVmlydHVhbEluaXRpYWxTZXQgPSB0cnVlO1xuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgIHdyYXBwZXJFbFtpc0ggPyAnc2Nyb2xsTGVmdCcgOiAnc2Nyb2xsVG9wJ10gPSB0O1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdyYXBwZXJFbFtpc0ggPyAnc2Nyb2xsTGVmdCcgOiAnc2Nyb2xsVG9wJ10gPSB0O1xuICAgICAgfVxuICAgICAgaWYgKGlzVmlydHVhbCkge1xuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgIHN3aXBlci53cmFwcGVyRWwuc3R5bGUuc2Nyb2xsU25hcFR5cGUgPSAnJztcbiAgICAgICAgICBzd2lwZXIuX2ltbWVkaWF0ZVZpcnR1YWwgPSBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghc3dpcGVyLnN1cHBvcnQuc21vb3RoU2Nyb2xsKSB7XG4gICAgICAgIGFuaW1hdGVDU1NNb2RlU2Nyb2xsKHtcbiAgICAgICAgICBzd2lwZXIsXG4gICAgICAgICAgdGFyZ2V0UG9zaXRpb246IHQsXG4gICAgICAgICAgc2lkZTogaXNIID8gJ2xlZnQnIDogJ3RvcCdcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgd3JhcHBlckVsLnNjcm9sbFRvKHtcbiAgICAgICAgW2lzSCA/ICdsZWZ0JyA6ICd0b3AnXTogdCxcbiAgICAgICAgYmVoYXZpb3I6ICdzbW9vdGgnXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgc3dpcGVyLnNldFRyYW5zaXRpb24oc3BlZWQpO1xuICBzd2lwZXIuc2V0VHJhbnNsYXRlKHRyYW5zbGF0ZSk7XG4gIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleChzbGlkZUluZGV4KTtcbiAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgc3dpcGVyLmVtaXQoJ2JlZm9yZVRyYW5zaXRpb25TdGFydCcsIHNwZWVkLCBpbnRlcm5hbCk7XG4gIHN3aXBlci50cmFuc2l0aW9uU3RhcnQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pO1xuICBpZiAoc3BlZWQgPT09IDApIHtcbiAgICBzd2lwZXIudHJhbnNpdGlvbkVuZChydW5DYWxsYmFja3MsIGRpcmVjdGlvbik7XG4gIH0gZWxzZSBpZiAoIXN3aXBlci5hbmltYXRpbmcpIHtcbiAgICBzd2lwZXIuYW5pbWF0aW5nID0gdHJ1ZTtcbiAgICBpZiAoIXN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCkge1xuICAgICAgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kID0gZnVuY3Rpb24gdHJhbnNpdGlvbkVuZChlKSB7XG4gICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICAgICAgaWYgKGUudGFyZ2V0ICE9PSB0aGlzKSByZXR1cm47XG4gICAgICAgIHN3aXBlci53cmFwcGVyRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIHN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCk7XG4gICAgICAgIHN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCA9IG51bGw7XG4gICAgICAgIGRlbGV0ZSBzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQ7XG4gICAgICAgIHN3aXBlci50cmFuc2l0aW9uRW5kKHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKTtcbiAgICAgIH07XG4gICAgfVxuICAgIHN3aXBlci53cmFwcGVyRWwuYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIHN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCk7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHNsaWRlVG9Mb29wKGluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCkge1xuICBpZiAoaW5kZXggPT09IHZvaWQgMCkge1xuICAgIGluZGV4ID0gMDtcbiAgfVxuICBpZiAocnVuQ2FsbGJhY2tzID09PSB2b2lkIDApIHtcbiAgICBydW5DYWxsYmFja3MgPSB0cnVlO1xuICB9XG4gIGlmICh0eXBlb2YgaW5kZXggPT09ICdzdHJpbmcnKSB7XG4gICAgY29uc3QgaW5kZXhBc051bWJlciA9IHBhcnNlSW50KGluZGV4LCAxMCk7XG4gICAgaW5kZXggPSBpbmRleEFzTnVtYmVyO1xuICB9XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGlmIChzd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XG4gIGlmICh0eXBlb2Ygc3BlZWQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgc3BlZWQgPSBzd2lwZXIucGFyYW1zLnNwZWVkO1xuICB9XG4gIGNvbnN0IGdyaWRFbmFibGVkID0gc3dpcGVyLmdyaWQgJiYgc3dpcGVyLnBhcmFtcy5ncmlkICYmIHN3aXBlci5wYXJhbXMuZ3JpZC5yb3dzID4gMTtcbiAgbGV0IG5ld0luZGV4ID0gaW5kZXg7XG4gIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICBpZiAoc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgbmV3SW5kZXggPSBuZXdJbmRleCArIHN3aXBlci52aXJ0dWFsLnNsaWRlc0JlZm9yZTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IHRhcmdldFNsaWRlSW5kZXg7XG4gICAgICBpZiAoZ3JpZEVuYWJsZWQpIHtcbiAgICAgICAgY29uc3Qgc2xpZGVJbmRleCA9IG5ld0luZGV4ICogc3dpcGVyLnBhcmFtcy5ncmlkLnJvd3M7XG4gICAgICAgIHRhcmdldFNsaWRlSW5kZXggPSBzd2lwZXIuc2xpZGVzLmZpbHRlcihzbGlkZUVsID0+IHNsaWRlRWwuZ2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpICogMSA9PT0gc2xpZGVJbmRleClbMF0uY29sdW1uO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGFyZ2V0U2xpZGVJbmRleCA9IHN3aXBlci5nZXRTbGlkZUluZGV4QnlEYXRhKG5ld0luZGV4KTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGNvbHMgPSBncmlkRW5hYmxlZCA/IE1hdGguY2VpbChzd2lwZXIuc2xpZGVzLmxlbmd0aCAvIHN3aXBlci5wYXJhbXMuZ3JpZC5yb3dzKSA6IHN3aXBlci5zbGlkZXMubGVuZ3RoO1xuICAgICAgY29uc3Qge1xuICAgICAgICBjZW50ZXJlZFNsaWRlc1xuICAgICAgfSA9IHN3aXBlci5wYXJhbXM7XG4gICAgICBsZXQgc2xpZGVzUGVyVmlldyA9IHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldztcbiAgICAgIGlmIChzbGlkZXNQZXJWaWV3ID09PSAnYXV0bycpIHtcbiAgICAgICAgc2xpZGVzUGVyVmlldyA9IHN3aXBlci5zbGlkZXNQZXJWaWV3RHluYW1pYygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2xpZGVzUGVyVmlldyA9IE1hdGguY2VpbChwYXJzZUZsb2F0KHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldywgMTApKTtcbiAgICAgICAgaWYgKGNlbnRlcmVkU2xpZGVzICYmIHNsaWRlc1BlclZpZXcgJSAyID09PSAwKSB7XG4gICAgICAgICAgc2xpZGVzUGVyVmlldyA9IHNsaWRlc1BlclZpZXcgKyAxO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsZXQgbmVlZExvb3BGaXggPSBjb2xzIC0gdGFyZ2V0U2xpZGVJbmRleCA8IHNsaWRlc1BlclZpZXc7XG4gICAgICBpZiAoY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgICAgbmVlZExvb3BGaXggPSBuZWVkTG9vcEZpeCB8fCB0YXJnZXRTbGlkZUluZGV4IDwgTWF0aC5jZWlsKHNsaWRlc1BlclZpZXcgLyAyKTtcbiAgICAgIH1cbiAgICAgIGlmIChpbnRlcm5hbCAmJiBjZW50ZXJlZFNsaWRlcyAmJiBzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcgIT09ICdhdXRvJyAmJiAhZ3JpZEVuYWJsZWQpIHtcbiAgICAgICAgbmVlZExvb3BGaXggPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChuZWVkTG9vcEZpeCkge1xuICAgICAgICBjb25zdCBkaXJlY3Rpb24gPSBjZW50ZXJlZFNsaWRlcyA/IHRhcmdldFNsaWRlSW5kZXggPCBzd2lwZXIuYWN0aXZlSW5kZXggPyAncHJldicgOiAnbmV4dCcgOiB0YXJnZXRTbGlkZUluZGV4IC0gc3dpcGVyLmFjdGl2ZUluZGV4IC0gMSA8IHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyA/ICduZXh0JyA6ICdwcmV2JztcbiAgICAgICAgc3dpcGVyLmxvb3BGaXgoe1xuICAgICAgICAgIGRpcmVjdGlvbixcbiAgICAgICAgICBzbGlkZVRvOiB0cnVlLFxuICAgICAgICAgIGFjdGl2ZVNsaWRlSW5kZXg6IGRpcmVjdGlvbiA9PT0gJ25leHQnID8gdGFyZ2V0U2xpZGVJbmRleCArIDEgOiB0YXJnZXRTbGlkZUluZGV4IC0gY29scyArIDEsXG4gICAgICAgICAgc2xpZGVSZWFsSW5kZXg6IGRpcmVjdGlvbiA9PT0gJ25leHQnID8gc3dpcGVyLnJlYWxJbmRleCA6IHVuZGVmaW5lZFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChncmlkRW5hYmxlZCkge1xuICAgICAgICBjb25zdCBzbGlkZUluZGV4ID0gbmV3SW5kZXggKiBzd2lwZXIucGFyYW1zLmdyaWQucm93cztcbiAgICAgICAgbmV3SW5kZXggPSBzd2lwZXIuc2xpZGVzLmZpbHRlcihzbGlkZUVsID0+IHNsaWRlRWwuZ2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpICogMSA9PT0gc2xpZGVJbmRleClbMF0uY29sdW1uO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV3SW5kZXggPSBzd2lwZXIuZ2V0U2xpZGVJbmRleEJ5RGF0YShuZXdJbmRleCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgc3dpcGVyLnNsaWRlVG8obmV3SW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbiAgfSk7XG4gIHJldHVybiBzd2lwZXI7XG59XG5cbi8qIGVzbGludCBuby11bnVzZWQtdmFyczogXCJvZmZcIiAqL1xuZnVuY3Rpb24gc2xpZGVOZXh0KHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKSB7XG4gIGlmIChydW5DYWxsYmFja3MgPT09IHZvaWQgMCkge1xuICAgIHJ1bkNhbGxiYWNrcyA9IHRydWU7XG4gIH1cbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIGVuYWJsZWQsXG4gICAgcGFyYW1zLFxuICAgIGFuaW1hdGluZ1xuICB9ID0gc3dpcGVyO1xuICBpZiAoIWVuYWJsZWQgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuIHN3aXBlcjtcbiAgaWYgKHR5cGVvZiBzcGVlZCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBzcGVlZCA9IHN3aXBlci5wYXJhbXMuc3BlZWQ7XG4gIH1cbiAgbGV0IHBlckdyb3VwID0gcGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuICBpZiAocGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyAmJiBwYXJhbXMuc2xpZGVzUGVyR3JvdXAgPT09IDEgJiYgcGFyYW1zLnNsaWRlc1Blckdyb3VwQXV0bykge1xuICAgIHBlckdyb3VwID0gTWF0aC5tYXgoc3dpcGVyLnNsaWRlc1BlclZpZXdEeW5hbWljKCdjdXJyZW50JywgdHJ1ZSksIDEpO1xuICB9XG4gIGNvbnN0IGluY3JlbWVudCA9IHN3aXBlci5hY3RpdmVJbmRleCA8IHBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAgPyAxIDogcGVyR3JvdXA7XG4gIGNvbnN0IGlzVmlydHVhbCA9IHN3aXBlci52aXJ0dWFsICYmIHBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIGlmIChhbmltYXRpbmcgJiYgIWlzVmlydHVhbCAmJiBwYXJhbXMubG9vcFByZXZlbnRzU2xpZGluZykgcmV0dXJuIGZhbHNlO1xuICAgIHN3aXBlci5sb29wRml4KHtcbiAgICAgIGRpcmVjdGlvbjogJ25leHQnXG4gICAgfSk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgc3dpcGVyLl9jbGllbnRMZWZ0ID0gc3dpcGVyLndyYXBwZXJFbC5jbGllbnRMZWZ0O1xuICAgIGlmIChzd2lwZXIuYWN0aXZlSW5kZXggPT09IHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gMSAmJiBwYXJhbXMuY3NzTW9kZSkge1xuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4ICsgaW5jcmVtZW50LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICBpZiAocGFyYW1zLnJld2luZCAmJiBzd2lwZXIuaXNFbmQpIHtcbiAgICByZXR1cm4gc3dpcGVyLnNsaWRlVG8oMCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xuICB9XG4gIHJldHVybiBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXggKyBpbmNyZW1lbnQsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbn1cblxuLyogZXNsaW50IG5vLXVudXNlZC12YXJzOiBcIm9mZlwiICovXG5mdW5jdGlvbiBzbGlkZVByZXYoc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpIHtcbiAgaWYgKHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwKSB7XG4gICAgcnVuQ2FsbGJhY2tzID0gdHJ1ZTtcbiAgfVxuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgIHNuYXBHcmlkLFxuICAgIHNsaWRlc0dyaWQsXG4gICAgcnRsVHJhbnNsYXRlLFxuICAgIGVuYWJsZWQsXG4gICAgYW5pbWF0aW5nXG4gIH0gPSBzd2lwZXI7XG4gIGlmICghZW5hYmxlZCB8fCBzd2lwZXIuZGVzdHJveWVkKSByZXR1cm4gc3dpcGVyO1xuICBpZiAodHlwZW9mIHNwZWVkID09PSAndW5kZWZpbmVkJykge1xuICAgIHNwZWVkID0gc3dpcGVyLnBhcmFtcy5zcGVlZDtcbiAgfVxuICBjb25zdCBpc1ZpcnR1YWwgPSBzd2lwZXIudmlydHVhbCAmJiBwYXJhbXMudmlydHVhbC5lbmFibGVkO1xuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBpZiAoYW5pbWF0aW5nICYmICFpc1ZpcnR1YWwgJiYgcGFyYW1zLmxvb3BQcmV2ZW50c1NsaWRpbmcpIHJldHVybiBmYWxzZTtcbiAgICBzd2lwZXIubG9vcEZpeCh7XG4gICAgICBkaXJlY3Rpb246ICdwcmV2J1xuICAgIH0pO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgIHN3aXBlci5fY2xpZW50TGVmdCA9IHN3aXBlci53cmFwcGVyRWwuY2xpZW50TGVmdDtcbiAgfVxuICBjb25zdCB0cmFuc2xhdGUgPSBydGxUcmFuc2xhdGUgPyBzd2lwZXIudHJhbnNsYXRlIDogLXN3aXBlci50cmFuc2xhdGU7XG4gIGZ1bmN0aW9uIG5vcm1hbGl6ZSh2YWwpIHtcbiAgICBpZiAodmFsIDwgMCkgcmV0dXJuIC1NYXRoLmZsb29yKE1hdGguYWJzKHZhbCkpO1xuICAgIHJldHVybiBNYXRoLmZsb29yKHZhbCk7XG4gIH1cbiAgY29uc3Qgbm9ybWFsaXplZFRyYW5zbGF0ZSA9IG5vcm1hbGl6ZSh0cmFuc2xhdGUpO1xuICBjb25zdCBub3JtYWxpemVkU25hcEdyaWQgPSBzbmFwR3JpZC5tYXAodmFsID0+IG5vcm1hbGl6ZSh2YWwpKTtcbiAgbGV0IHByZXZTbmFwID0gc25hcEdyaWRbbm9ybWFsaXplZFNuYXBHcmlkLmluZGV4T2Yobm9ybWFsaXplZFRyYW5zbGF0ZSkgLSAxXTtcbiAgaWYgKHR5cGVvZiBwcmV2U25hcCA9PT0gJ3VuZGVmaW5lZCcgJiYgcGFyYW1zLmNzc01vZGUpIHtcbiAgICBsZXQgcHJldlNuYXBJbmRleDtcbiAgICBzbmFwR3JpZC5mb3JFYWNoKChzbmFwLCBzbmFwSW5kZXgpID0+IHtcbiAgICAgIGlmIChub3JtYWxpemVkVHJhbnNsYXRlID49IHNuYXApIHtcbiAgICAgICAgLy8gcHJldlNuYXAgPSBzbmFwO1xuICAgICAgICBwcmV2U25hcEluZGV4ID0gc25hcEluZGV4O1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmICh0eXBlb2YgcHJldlNuYXBJbmRleCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHByZXZTbmFwID0gc25hcEdyaWRbcHJldlNuYXBJbmRleCA+IDAgPyBwcmV2U25hcEluZGV4IC0gMSA6IHByZXZTbmFwSW5kZXhdO1xuICAgIH1cbiAgfVxuICBsZXQgcHJldkluZGV4ID0gMDtcbiAgaWYgKHR5cGVvZiBwcmV2U25hcCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBwcmV2SW5kZXggPSBzbGlkZXNHcmlkLmluZGV4T2YocHJldlNuYXApO1xuICAgIGlmIChwcmV2SW5kZXggPCAwKSBwcmV2SW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXggLSAxO1xuICAgIGlmIChwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nICYmIHBhcmFtcy5zbGlkZXNQZXJHcm91cCA9PT0gMSAmJiBwYXJhbXMuc2xpZGVzUGVyR3JvdXBBdXRvKSB7XG4gICAgICBwcmV2SW5kZXggPSBwcmV2SW5kZXggLSBzd2lwZXIuc2xpZGVzUGVyVmlld0R5bmFtaWMoJ3ByZXZpb3VzJywgdHJ1ZSkgKyAxO1xuICAgICAgcHJldkluZGV4ID0gTWF0aC5tYXgocHJldkluZGV4LCAwKTtcbiAgICB9XG4gIH1cbiAgaWYgKHBhcmFtcy5yZXdpbmQgJiYgc3dpcGVyLmlzQmVnaW5uaW5nKSB7XG4gICAgY29uc3QgbGFzdEluZGV4ID0gc3dpcGVyLnBhcmFtcy52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkICYmIHN3aXBlci52aXJ0dWFsID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCAtIDEgOiBzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIDE7XG4gICAgcmV0dXJuIHN3aXBlci5zbGlkZVRvKGxhc3RJbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xuICB9IGVsc2UgaWYgKHBhcmFtcy5sb29wICYmIHN3aXBlci5hY3RpdmVJbmRleCA9PT0gMCAmJiBwYXJhbXMuY3NzTW9kZSkge1xuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhwcmV2SW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gc3dpcGVyLnNsaWRlVG8ocHJldkluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG59XG5cbi8qIGVzbGludCBuby11bnVzZWQtdmFyczogXCJvZmZcIiAqL1xuZnVuY3Rpb24gc2xpZGVSZXNldChzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCkge1xuICBpZiAocnVuQ2FsbGJhY2tzID09PSB2b2lkIDApIHtcbiAgICBydW5DYWxsYmFja3MgPSB0cnVlO1xuICB9XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGlmIChzd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XG4gIGlmICh0eXBlb2Ygc3BlZWQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgc3BlZWQgPSBzd2lwZXIucGFyYW1zLnNwZWVkO1xuICB9XG4gIHJldHVybiBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbn1cblxuLyogZXNsaW50IG5vLXVudXNlZC12YXJzOiBcIm9mZlwiICovXG5mdW5jdGlvbiBzbGlkZVRvQ2xvc2VzdChzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCwgdGhyZXNob2xkKSB7XG4gIGlmIChydW5DYWxsYmFja3MgPT09IHZvaWQgMCkge1xuICAgIHJ1bkNhbGxiYWNrcyA9IHRydWU7XG4gIH1cbiAgaWYgKHRocmVzaG9sZCA9PT0gdm9pZCAwKSB7XG4gICAgdGhyZXNob2xkID0gMC41O1xuICB9XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGlmIChzd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XG4gIGlmICh0eXBlb2Ygc3BlZWQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgc3BlZWQgPSBzd2lwZXIucGFyYW1zLnNwZWVkO1xuICB9XG4gIGxldCBpbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleDtcbiAgY29uc3Qgc2tpcCA9IE1hdGgubWluKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwLCBpbmRleCk7XG4gIGNvbnN0IHNuYXBJbmRleCA9IHNraXAgKyBNYXRoLmZsb29yKChpbmRleCAtIHNraXApIC8gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG4gIGNvbnN0IHRyYW5zbGF0ZSA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyBzd2lwZXIudHJhbnNsYXRlIDogLXN3aXBlci50cmFuc2xhdGU7XG4gIGlmICh0cmFuc2xhdGUgPj0gc3dpcGVyLnNuYXBHcmlkW3NuYXBJbmRleF0pIHtcbiAgICAvLyBUaGUgY3VycmVudCB0cmFuc2xhdGUgaXMgb24gb3IgYWZ0ZXIgdGhlIGN1cnJlbnQgc25hcCBpbmRleCwgc28gdGhlIGNob2ljZVxuICAgIC8vIGlzIGJldHdlZW4gdGhlIGN1cnJlbnQgaW5kZXggYW5kIHRoZSBvbmUgYWZ0ZXIgaXQuXG4gICAgY29uc3QgY3VycmVudFNuYXAgPSBzd2lwZXIuc25hcEdyaWRbc25hcEluZGV4XTtcbiAgICBjb25zdCBuZXh0U25hcCA9IHN3aXBlci5zbmFwR3JpZFtzbmFwSW5kZXggKyAxXTtcbiAgICBpZiAodHJhbnNsYXRlIC0gY3VycmVudFNuYXAgPiAobmV4dFNuYXAgLSBjdXJyZW50U25hcCkgKiB0aHJlc2hvbGQpIHtcbiAgICAgIGluZGV4ICs9IHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIFRoZSBjdXJyZW50IHRyYW5zbGF0ZSBpcyBiZWZvcmUgdGhlIGN1cnJlbnQgc25hcCBpbmRleCwgc28gdGhlIGNob2ljZVxuICAgIC8vIGlzIGJldHdlZW4gdGhlIGN1cnJlbnQgaW5kZXggYW5kIHRoZSBvbmUgYmVmb3JlIGl0LlxuICAgIGNvbnN0IHByZXZTbmFwID0gc3dpcGVyLnNuYXBHcmlkW3NuYXBJbmRleCAtIDFdO1xuICAgIGNvbnN0IGN1cnJlbnRTbmFwID0gc3dpcGVyLnNuYXBHcmlkW3NuYXBJbmRleF07XG4gICAgaWYgKHRyYW5zbGF0ZSAtIHByZXZTbmFwIDw9IChjdXJyZW50U25hcCAtIHByZXZTbmFwKSAqIHRocmVzaG9sZCkge1xuICAgICAgaW5kZXggLT0gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cDtcbiAgICB9XG4gIH1cbiAgaW5kZXggPSBNYXRoLm1heChpbmRleCwgMCk7XG4gIGluZGV4ID0gTWF0aC5taW4oaW5kZXgsIHN3aXBlci5zbGlkZXNHcmlkLmxlbmd0aCAtIDEpO1xuICByZXR1cm4gc3dpcGVyLnNsaWRlVG8oaW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbn1cblxuZnVuY3Rpb24gc2xpZGVUb0NsaWNrZWRTbGlkZSgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgaWYgKHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICBzbGlkZXNFbFxuICB9ID0gc3dpcGVyO1xuICBjb25zdCBzbGlkZXNQZXJWaWV3ID0gcGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyA/IHN3aXBlci5zbGlkZXNQZXJWaWV3RHluYW1pYygpIDogcGFyYW1zLnNsaWRlc1BlclZpZXc7XG4gIGxldCBzbGlkZVRvSW5kZXggPSBzd2lwZXIuY2xpY2tlZEluZGV4O1xuICBsZXQgcmVhbEluZGV4O1xuICBjb25zdCBzbGlkZVNlbGVjdG9yID0gc3dpcGVyLmlzRWxlbWVudCA/IGBzd2lwZXItc2xpZGVgIDogYC4ke3BhcmFtcy5zbGlkZUNsYXNzfWA7XG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIGlmIChzd2lwZXIuYW5pbWF0aW5nKSByZXR1cm47XG4gICAgcmVhbEluZGV4ID0gcGFyc2VJbnQoc3dpcGVyLmNsaWNrZWRTbGlkZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JyksIDEwKTtcbiAgICBpZiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICBpZiAoc2xpZGVUb0luZGV4IDwgc3dpcGVyLmxvb3BlZFNsaWRlcyAtIHNsaWRlc1BlclZpZXcgLyAyIHx8IHNsaWRlVG9JbmRleCA+IHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gc3dpcGVyLmxvb3BlZFNsaWRlcyArIHNsaWRlc1BlclZpZXcgLyAyKSB7XG4gICAgICAgIHN3aXBlci5sb29wRml4KCk7XG4gICAgICAgIHNsaWRlVG9JbmRleCA9IHN3aXBlci5nZXRTbGlkZUluZGV4KGVsZW1lbnRDaGlsZHJlbihzbGlkZXNFbCwgYCR7c2xpZGVTZWxlY3Rvcn1bZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke3JlYWxJbmRleH1cIl1gKVswXSk7XG4gICAgICAgIG5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhzbGlkZVRvSW5kZXgpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChzbGlkZVRvSW5kZXggPiBzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIHNsaWRlc1BlclZpZXcpIHtcbiAgICAgIHN3aXBlci5sb29wRml4KCk7XG4gICAgICBzbGlkZVRvSW5kZXggPSBzd2lwZXIuZ2V0U2xpZGVJbmRleChlbGVtZW50Q2hpbGRyZW4oc2xpZGVzRWwsIGAke3NsaWRlU2VsZWN0b3J9W2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHtyZWFsSW5kZXh9XCJdYClbMF0pO1xuICAgICAgbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzbGlkZVRvSW5kZXgpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHN3aXBlci5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gIH1cbn1cblxudmFyIHNsaWRlID0ge1xuICBzbGlkZVRvLFxuICBzbGlkZVRvTG9vcCxcbiAgc2xpZGVOZXh0LFxuICBzbGlkZVByZXYsXG4gIHNsaWRlUmVzZXQsXG4gIHNsaWRlVG9DbG9zZXN0LFxuICBzbGlkZVRvQ2xpY2tlZFNsaWRlXG59O1xuXG5mdW5jdGlvbiBsb29wQ3JlYXRlKHNsaWRlUmVhbEluZGV4KSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgc2xpZGVzRWxcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKCFwYXJhbXMubG9vcCB8fCBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCkgcmV0dXJuO1xuICBjb25zdCBpbml0U2xpZGVzID0gKCkgPT4ge1xuICAgIGNvbnN0IHNsaWRlcyA9IGVsZW1lbnRDaGlsZHJlbihzbGlkZXNFbCwgYC4ke3BhcmFtcy5zbGlkZUNsYXNzfSwgc3dpcGVyLXNsaWRlYCk7XG4gICAgc2xpZGVzLmZvckVhY2goKGVsLCBpbmRleCkgPT4ge1xuICAgICAgZWwuc2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcsIGluZGV4KTtcbiAgICB9KTtcbiAgfTtcbiAgY29uc3QgZ3JpZEVuYWJsZWQgPSBzd2lwZXIuZ3JpZCAmJiBwYXJhbXMuZ3JpZCAmJiBwYXJhbXMuZ3JpZC5yb3dzID4gMTtcbiAgY29uc3Qgc2xpZGVzUGVyR3JvdXAgPSBwYXJhbXMuc2xpZGVzUGVyR3JvdXAgKiAoZ3JpZEVuYWJsZWQgPyBwYXJhbXMuZ3JpZC5yb3dzIDogMSk7XG4gIGNvbnN0IHNob3VsZEZpbGxHcm91cCA9IHN3aXBlci5zbGlkZXMubGVuZ3RoICUgc2xpZGVzUGVyR3JvdXAgIT09IDA7XG4gIGNvbnN0IHNob3VsZEZpbGxHcmlkID0gZ3JpZEVuYWJsZWQgJiYgc3dpcGVyLnNsaWRlcy5sZW5ndGggJSBwYXJhbXMuZ3JpZC5yb3dzICE9PSAwO1xuICBjb25zdCBhZGRCbGFua1NsaWRlcyA9IGFtb3VudE9mU2xpZGVzID0+IHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFtb3VudE9mU2xpZGVzOyBpICs9IDEpIHtcbiAgICAgIGNvbnN0IHNsaWRlRWwgPSBzd2lwZXIuaXNFbGVtZW50ID8gY3JlYXRlRWxlbWVudCgnc3dpcGVyLXNsaWRlJywgW3BhcmFtcy5zbGlkZUJsYW5rQ2xhc3NdKSA6IGNyZWF0ZUVsZW1lbnQoJ2RpdicsIFtwYXJhbXMuc2xpZGVDbGFzcywgcGFyYW1zLnNsaWRlQmxhbmtDbGFzc10pO1xuICAgICAgc3dpcGVyLnNsaWRlc0VsLmFwcGVuZChzbGlkZUVsKTtcbiAgICB9XG4gIH07XG4gIGlmIChzaG91bGRGaWxsR3JvdXApIHtcbiAgICBpZiAocGFyYW1zLmxvb3BBZGRCbGFua1NsaWRlcykge1xuICAgICAgY29uc3Qgc2xpZGVzVG9BZGQgPSBzbGlkZXNQZXJHcm91cCAtIHN3aXBlci5zbGlkZXMubGVuZ3RoICUgc2xpZGVzUGVyR3JvdXA7XG4gICAgICBhZGRCbGFua1NsaWRlcyhzbGlkZXNUb0FkZCk7XG4gICAgICBzd2lwZXIucmVjYWxjU2xpZGVzKCk7XG4gICAgICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNob3dXYXJuaW5nKCdTd2lwZXIgTG9vcCBXYXJuaW5nOiBUaGUgbnVtYmVyIG9mIHNsaWRlcyBpcyBub3QgZXZlbiB0byBzbGlkZXNQZXJHcm91cCwgbG9vcCBtb2RlIG1heSBub3QgZnVuY3Rpb24gcHJvcGVybHkuIFlvdSBuZWVkIHRvIGFkZCBtb3JlIHNsaWRlcyAob3IgbWFrZSBkdXBsaWNhdGVzLCBvciBlbXB0eSBzbGlkZXMpJyk7XG4gICAgfVxuICAgIGluaXRTbGlkZXMoKTtcbiAgfSBlbHNlIGlmIChzaG91bGRGaWxsR3JpZCkge1xuICAgIGlmIChwYXJhbXMubG9vcEFkZEJsYW5rU2xpZGVzKSB7XG4gICAgICBjb25zdCBzbGlkZXNUb0FkZCA9IHBhcmFtcy5ncmlkLnJvd3MgLSBzd2lwZXIuc2xpZGVzLmxlbmd0aCAlIHBhcmFtcy5ncmlkLnJvd3M7XG4gICAgICBhZGRCbGFua1NsaWRlcyhzbGlkZXNUb0FkZCk7XG4gICAgICBzd2lwZXIucmVjYWxjU2xpZGVzKCk7XG4gICAgICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNob3dXYXJuaW5nKCdTd2lwZXIgTG9vcCBXYXJuaW5nOiBUaGUgbnVtYmVyIG9mIHNsaWRlcyBpcyBub3QgZXZlbiB0byBncmlkLnJvd3MsIGxvb3AgbW9kZSBtYXkgbm90IGZ1bmN0aW9uIHByb3Blcmx5LiBZb3UgbmVlZCB0byBhZGQgbW9yZSBzbGlkZXMgKG9yIG1ha2UgZHVwbGljYXRlcywgb3IgZW1wdHkgc2xpZGVzKScpO1xuICAgIH1cbiAgICBpbml0U2xpZGVzKCk7XG4gIH0gZWxzZSB7XG4gICAgaW5pdFNsaWRlcygpO1xuICB9XG4gIHN3aXBlci5sb29wRml4KHtcbiAgICBzbGlkZVJlYWxJbmRleCxcbiAgICBkaXJlY3Rpb246IHBhcmFtcy5jZW50ZXJlZFNsaWRlcyA/IHVuZGVmaW5lZCA6ICduZXh0J1xuICB9KTtcbn1cblxuZnVuY3Rpb24gbG9vcEZpeChfdGVtcCkge1xuICBsZXQge1xuICAgIHNsaWRlUmVhbEluZGV4LFxuICAgIHNsaWRlVG8gPSB0cnVlLFxuICAgIGRpcmVjdGlvbixcbiAgICBzZXRUcmFuc2xhdGUsXG4gICAgYWN0aXZlU2xpZGVJbmRleCxcbiAgICBieUNvbnRyb2xsZXIsXG4gICAgYnlNb3VzZXdoZWVsXG4gIH0gPSBfdGVtcCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgaWYgKCFzd2lwZXIucGFyYW1zLmxvb3ApIHJldHVybjtcbiAgc3dpcGVyLmVtaXQoJ2JlZm9yZUxvb3BGaXgnKTtcbiAgY29uc3Qge1xuICAgIHNsaWRlcyxcbiAgICBhbGxvd1NsaWRlUHJldixcbiAgICBhbGxvd1NsaWRlTmV4dCxcbiAgICBzbGlkZXNFbCxcbiAgICBwYXJhbXNcbiAgfSA9IHN3aXBlcjtcbiAgY29uc3Qge1xuICAgIGNlbnRlcmVkU2xpZGVzXG4gIH0gPSBwYXJhbXM7XG4gIHN3aXBlci5hbGxvd1NsaWRlUHJldiA9IHRydWU7XG4gIHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9IHRydWU7XG4gIGlmIChzd2lwZXIudmlydHVhbCAmJiBwYXJhbXMudmlydHVhbC5lbmFibGVkKSB7XG4gICAgaWYgKHNsaWRlVG8pIHtcbiAgICAgIGlmICghcGFyYW1zLmNlbnRlcmVkU2xpZGVzICYmIHN3aXBlci5zbmFwSW5kZXggPT09IDApIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCwgMCwgZmFsc2UsIHRydWUpO1xuICAgICAgfSBlbHNlIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMgJiYgc3dpcGVyLnNuYXBJbmRleCA8IHBhcmFtcy5zbGlkZXNQZXJWaWV3KSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggKyBzd2lwZXIuc25hcEluZGV4LCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICB9IGVsc2UgaWYgKHN3aXBlci5zbmFwSW5kZXggPT09IHN3aXBlci5zbmFwR3JpZC5sZW5ndGggLSAxKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci52aXJ0dWFsLnNsaWRlc0JlZm9yZSwgMCwgZmFsc2UsIHRydWUpO1xuICAgICAgfVxuICAgIH1cbiAgICBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPSBhbGxvd1NsaWRlUHJldjtcbiAgICBzd2lwZXIuYWxsb3dTbGlkZU5leHQgPSBhbGxvd1NsaWRlTmV4dDtcbiAgICBzd2lwZXIuZW1pdCgnbG9vcEZpeCcpO1xuICAgIHJldHVybjtcbiAgfVxuICBsZXQgc2xpZGVzUGVyVmlldyA9IHBhcmFtcy5zbGlkZXNQZXJWaWV3O1xuICBpZiAoc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nKSB7XG4gICAgc2xpZGVzUGVyVmlldyA9IHN3aXBlci5zbGlkZXNQZXJWaWV3RHluYW1pYygpO1xuICB9IGVsc2Uge1xuICAgIHNsaWRlc1BlclZpZXcgPSBNYXRoLmNlaWwocGFyc2VGbG9hdChwYXJhbXMuc2xpZGVzUGVyVmlldywgMTApKTtcbiAgICBpZiAoY2VudGVyZWRTbGlkZXMgJiYgc2xpZGVzUGVyVmlldyAlIDIgPT09IDApIHtcbiAgICAgIHNsaWRlc1BlclZpZXcgPSBzbGlkZXNQZXJWaWV3ICsgMTtcbiAgICB9XG4gIH1cbiAgY29uc3Qgc2xpZGVzUGVyR3JvdXAgPSBwYXJhbXMuc2xpZGVzUGVyR3JvdXBBdXRvID8gc2xpZGVzUGVyVmlldyA6IHBhcmFtcy5zbGlkZXNQZXJHcm91cDtcbiAgbGV0IGxvb3BlZFNsaWRlcyA9IHNsaWRlc1Blckdyb3VwO1xuICBpZiAobG9vcGVkU2xpZGVzICUgc2xpZGVzUGVyR3JvdXAgIT09IDApIHtcbiAgICBsb29wZWRTbGlkZXMgKz0gc2xpZGVzUGVyR3JvdXAgLSBsb29wZWRTbGlkZXMgJSBzbGlkZXNQZXJHcm91cDtcbiAgfVxuICBsb29wZWRTbGlkZXMgKz0gcGFyYW1zLmxvb3BBZGRpdGlvbmFsU2xpZGVzO1xuICBzd2lwZXIubG9vcGVkU2xpZGVzID0gbG9vcGVkU2xpZGVzO1xuICBjb25zdCBncmlkRW5hYmxlZCA9IHN3aXBlci5ncmlkICYmIHBhcmFtcy5ncmlkICYmIHBhcmFtcy5ncmlkLnJvd3MgPiAxO1xuICBpZiAoc2xpZGVzLmxlbmd0aCA8IHNsaWRlc1BlclZpZXcgKyBsb29wZWRTbGlkZXMpIHtcbiAgICBzaG93V2FybmluZygnU3dpcGVyIExvb3AgV2FybmluZzogVGhlIG51bWJlciBvZiBzbGlkZXMgaXMgbm90IGVub3VnaCBmb3IgbG9vcCBtb2RlLCBpdCB3aWxsIGJlIGRpc2FibGVkIGFuZCBub3QgZnVuY3Rpb24gcHJvcGVybHkuIFlvdSBuZWVkIHRvIGFkZCBtb3JlIHNsaWRlcyAob3IgbWFrZSBkdXBsaWNhdGVzKSBvciBsb3dlciB0aGUgdmFsdWVzIG9mIHNsaWRlc1BlclZpZXcgYW5kIHNsaWRlc1Blckdyb3VwIHBhcmFtZXRlcnMnKTtcbiAgfSBlbHNlIGlmIChncmlkRW5hYmxlZCAmJiBwYXJhbXMuZ3JpZC5maWxsID09PSAncm93Jykge1xuICAgIHNob3dXYXJuaW5nKCdTd2lwZXIgTG9vcCBXYXJuaW5nOiBMb29wIG1vZGUgaXMgbm90IGNvbXBhdGlibGUgd2l0aCBncmlkLmZpbGwgPSBgcm93YCcpO1xuICB9XG4gIGNvbnN0IHByZXBlbmRTbGlkZXNJbmRleGVzID0gW107XG4gIGNvbnN0IGFwcGVuZFNsaWRlc0luZGV4ZXMgPSBbXTtcbiAgbGV0IGFjdGl2ZUluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4O1xuICBpZiAodHlwZW9mIGFjdGl2ZVNsaWRlSW5kZXggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgYWN0aXZlU2xpZGVJbmRleCA9IHN3aXBlci5nZXRTbGlkZUluZGV4KHNsaWRlcy5maWx0ZXIoZWwgPT4gZWwuY2xhc3NMaXN0LmNvbnRhaW5zKHBhcmFtcy5zbGlkZUFjdGl2ZUNsYXNzKSlbMF0pO1xuICB9IGVsc2Uge1xuICAgIGFjdGl2ZUluZGV4ID0gYWN0aXZlU2xpZGVJbmRleDtcbiAgfVxuICBjb25zdCBpc05leHQgPSBkaXJlY3Rpb24gPT09ICduZXh0JyB8fCAhZGlyZWN0aW9uO1xuICBjb25zdCBpc1ByZXYgPSBkaXJlY3Rpb24gPT09ICdwcmV2JyB8fCAhZGlyZWN0aW9uO1xuICBsZXQgc2xpZGVzUHJlcGVuZGVkID0gMDtcbiAgbGV0IHNsaWRlc0FwcGVuZGVkID0gMDtcbiAgY29uc3QgY29scyA9IGdyaWRFbmFibGVkID8gTWF0aC5jZWlsKHNsaWRlcy5sZW5ndGggLyBwYXJhbXMuZ3JpZC5yb3dzKSA6IHNsaWRlcy5sZW5ndGg7XG4gIGNvbnN0IGFjdGl2ZUNvbEluZGV4ID0gZ3JpZEVuYWJsZWQgPyBzbGlkZXNbYWN0aXZlU2xpZGVJbmRleF0uY29sdW1uIDogYWN0aXZlU2xpZGVJbmRleDtcbiAgY29uc3QgYWN0aXZlQ29sSW5kZXhXaXRoU2hpZnQgPSBhY3RpdmVDb2xJbmRleCArIChjZW50ZXJlZFNsaWRlcyAmJiB0eXBlb2Ygc2V0VHJhbnNsYXRlID09PSAndW5kZWZpbmVkJyA/IC1zbGlkZXNQZXJWaWV3IC8gMiArIDAuNSA6IDApO1xuICAvLyBwcmVwZW5kIGxhc3Qgc2xpZGVzIGJlZm9yZSBzdGFydFxuICBpZiAoYWN0aXZlQ29sSW5kZXhXaXRoU2hpZnQgPCBsb29wZWRTbGlkZXMpIHtcbiAgICBzbGlkZXNQcmVwZW5kZWQgPSBNYXRoLm1heChsb29wZWRTbGlkZXMgLSBhY3RpdmVDb2xJbmRleFdpdGhTaGlmdCwgc2xpZGVzUGVyR3JvdXApO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbG9vcGVkU2xpZGVzIC0gYWN0aXZlQ29sSW5kZXhXaXRoU2hpZnQ7IGkgKz0gMSkge1xuICAgICAgY29uc3QgaW5kZXggPSBpIC0gTWF0aC5mbG9vcihpIC8gY29scykgKiBjb2xzO1xuICAgICAgaWYgKGdyaWRFbmFibGVkKSB7XG4gICAgICAgIGNvbnN0IGNvbEluZGV4VG9QcmVwZW5kID0gY29scyAtIGluZGV4IC0gMTtcbiAgICAgICAgZm9yIChsZXQgaSA9IHNsaWRlcy5sZW5ndGggLSAxOyBpID49IDA7IGkgLT0gMSkge1xuICAgICAgICAgIGlmIChzbGlkZXNbaV0uY29sdW1uID09PSBjb2xJbmRleFRvUHJlcGVuZCkgcHJlcGVuZFNsaWRlc0luZGV4ZXMucHVzaChpKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBzbGlkZXMuZm9yRWFjaCgoc2xpZGUsIHNsaWRlSW5kZXgpID0+IHtcbiAgICAgICAgLy8gICBpZiAoc2xpZGUuY29sdW1uID09PSBjb2xJbmRleFRvUHJlcGVuZCkgcHJlcGVuZFNsaWRlc0luZGV4ZXMucHVzaChzbGlkZUluZGV4KTtcbiAgICAgICAgLy8gfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcmVwZW5kU2xpZGVzSW5kZXhlcy5wdXNoKGNvbHMgLSBpbmRleCAtIDEpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChhY3RpdmVDb2xJbmRleFdpdGhTaGlmdCArIHNsaWRlc1BlclZpZXcgPiBjb2xzIC0gbG9vcGVkU2xpZGVzKSB7XG4gICAgc2xpZGVzQXBwZW5kZWQgPSBNYXRoLm1heChhY3RpdmVDb2xJbmRleFdpdGhTaGlmdCAtIChjb2xzIC0gbG9vcGVkU2xpZGVzICogMiksIHNsaWRlc1Blckdyb3VwKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlc0FwcGVuZGVkOyBpICs9IDEpIHtcbiAgICAgIGNvbnN0IGluZGV4ID0gaSAtIE1hdGguZmxvb3IoaSAvIGNvbHMpICogY29scztcbiAgICAgIGlmIChncmlkRW5hYmxlZCkge1xuICAgICAgICBzbGlkZXMuZm9yRWFjaCgoc2xpZGUsIHNsaWRlSW5kZXgpID0+IHtcbiAgICAgICAgICBpZiAoc2xpZGUuY29sdW1uID09PSBpbmRleCkgYXBwZW5kU2xpZGVzSW5kZXhlcy5wdXNoKHNsaWRlSW5kZXgpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFwcGVuZFNsaWRlc0luZGV4ZXMucHVzaChpbmRleCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHN3aXBlci5fX3ByZXZlbnRPYnNlcnZlcl9fID0gdHJ1ZTtcbiAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICBzd2lwZXIuX19wcmV2ZW50T2JzZXJ2ZXJfXyA9IGZhbHNlO1xuICB9KTtcbiAgaWYgKGlzUHJldikge1xuICAgIHByZXBlbmRTbGlkZXNJbmRleGVzLmZvckVhY2goaW5kZXggPT4ge1xuICAgICAgc2xpZGVzW2luZGV4XS5zd2lwZXJMb29wTW92ZURPTSA9IHRydWU7XG4gICAgICBzbGlkZXNFbC5wcmVwZW5kKHNsaWRlc1tpbmRleF0pO1xuICAgICAgc2xpZGVzW2luZGV4XS5zd2lwZXJMb29wTW92ZURPTSA9IGZhbHNlO1xuICAgIH0pO1xuICB9XG4gIGlmIChpc05leHQpIHtcbiAgICBhcHBlbmRTbGlkZXNJbmRleGVzLmZvckVhY2goaW5kZXggPT4ge1xuICAgICAgc2xpZGVzW2luZGV4XS5zd2lwZXJMb29wTW92ZURPTSA9IHRydWU7XG4gICAgICBzbGlkZXNFbC5hcHBlbmQoc2xpZGVzW2luZGV4XSk7XG4gICAgICBzbGlkZXNbaW5kZXhdLnN3aXBlckxvb3BNb3ZlRE9NID0gZmFsc2U7XG4gICAgfSk7XG4gIH1cbiAgc3dpcGVyLnJlY2FsY1NsaWRlcygpO1xuICBpZiAocGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJykge1xuICAgIHN3aXBlci51cGRhdGVTbGlkZXMoKTtcbiAgfSBlbHNlIGlmIChncmlkRW5hYmxlZCAmJiAocHJlcGVuZFNsaWRlc0luZGV4ZXMubGVuZ3RoID4gMCAmJiBpc1ByZXYgfHwgYXBwZW5kU2xpZGVzSW5kZXhlcy5sZW5ndGggPiAwICYmIGlzTmV4dCkpIHtcbiAgICBzd2lwZXIuc2xpZGVzLmZvckVhY2goKHNsaWRlLCBzbGlkZUluZGV4KSA9PiB7XG4gICAgICBzd2lwZXIuZ3JpZC51cGRhdGVTbGlkZShzbGlkZUluZGV4LCBzbGlkZSwgc3dpcGVyLnNsaWRlcyk7XG4gICAgfSk7XG4gIH1cbiAgaWYgKHBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzKSB7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc09mZnNldCgpO1xuICB9XG4gIGlmIChzbGlkZVRvKSB7XG4gICAgaWYgKHByZXBlbmRTbGlkZXNJbmRleGVzLmxlbmd0aCA+IDAgJiYgaXNQcmV2KSB7XG4gICAgICBpZiAodHlwZW9mIHNsaWRlUmVhbEluZGV4ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb25zdCBjdXJyZW50U2xpZGVUcmFuc2xhdGUgPSBzd2lwZXIuc2xpZGVzR3JpZFthY3RpdmVJbmRleF07XG4gICAgICAgIGNvbnN0IG5ld1NsaWRlVHJhbnNsYXRlID0gc3dpcGVyLnNsaWRlc0dyaWRbYWN0aXZlSW5kZXggKyBzbGlkZXNQcmVwZW5kZWRdO1xuICAgICAgICBjb25zdCBkaWZmID0gbmV3U2xpZGVUcmFuc2xhdGUgLSBjdXJyZW50U2xpZGVUcmFuc2xhdGU7XG4gICAgICAgIGlmIChieU1vdXNld2hlZWwpIHtcbiAgICAgICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKHN3aXBlci50cmFuc2xhdGUgLSBkaWZmKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhhY3RpdmVJbmRleCArIE1hdGguY2VpbChzbGlkZXNQcmVwZW5kZWQpLCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgICAgaWYgKHNldFRyYW5zbGF0ZSkge1xuICAgICAgICAgICAgc3dpcGVyLnRvdWNoRXZlbnRzRGF0YS5zdGFydFRyYW5zbGF0ZSA9IHN3aXBlci50b3VjaEV2ZW50c0RhdGEuc3RhcnRUcmFuc2xhdGUgLSBkaWZmO1xuICAgICAgICAgICAgc3dpcGVyLnRvdWNoRXZlbnRzRGF0YS5jdXJyZW50VHJhbnNsYXRlID0gc3dpcGVyLnRvdWNoRXZlbnRzRGF0YS5jdXJyZW50VHJhbnNsYXRlIC0gZGlmZjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChzZXRUcmFuc2xhdGUpIHtcbiAgICAgICAgICBjb25zdCBzaGlmdCA9IGdyaWRFbmFibGVkID8gcHJlcGVuZFNsaWRlc0luZGV4ZXMubGVuZ3RoIC8gcGFyYW1zLmdyaWQucm93cyA6IHByZXBlbmRTbGlkZXNJbmRleGVzLmxlbmd0aDtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXggKyBzaGlmdCwgMCwgZmFsc2UsIHRydWUpO1xuICAgICAgICAgIHN3aXBlci50b3VjaEV2ZW50c0RhdGEuY3VycmVudFRyYW5zbGF0ZSA9IHN3aXBlci50cmFuc2xhdGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGFwcGVuZFNsaWRlc0luZGV4ZXMubGVuZ3RoID4gMCAmJiBpc05leHQpIHtcbiAgICAgIGlmICh0eXBlb2Ygc2xpZGVSZWFsSW5kZXggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRTbGlkZVRyYW5zbGF0ZSA9IHN3aXBlci5zbGlkZXNHcmlkW2FjdGl2ZUluZGV4XTtcbiAgICAgICAgY29uc3QgbmV3U2xpZGVUcmFuc2xhdGUgPSBzd2lwZXIuc2xpZGVzR3JpZFthY3RpdmVJbmRleCAtIHNsaWRlc0FwcGVuZGVkXTtcbiAgICAgICAgY29uc3QgZGlmZiA9IG5ld1NsaWRlVHJhbnNsYXRlIC0gY3VycmVudFNsaWRlVHJhbnNsYXRlO1xuICAgICAgICBpZiAoYnlNb3VzZXdoZWVsKSB7XG4gICAgICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZShzd2lwZXIudHJhbnNsYXRlIC0gZGlmZik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlVG8oYWN0aXZlSW5kZXggLSBzbGlkZXNBcHBlbmRlZCwgMCwgZmFsc2UsIHRydWUpO1xuICAgICAgICAgIGlmIChzZXRUcmFuc2xhdGUpIHtcbiAgICAgICAgICAgIHN3aXBlci50b3VjaEV2ZW50c0RhdGEuc3RhcnRUcmFuc2xhdGUgPSBzd2lwZXIudG91Y2hFdmVudHNEYXRhLnN0YXJ0VHJhbnNsYXRlIC0gZGlmZjtcbiAgICAgICAgICAgIHN3aXBlci50b3VjaEV2ZW50c0RhdGEuY3VycmVudFRyYW5zbGF0ZSA9IHN3aXBlci50b3VjaEV2ZW50c0RhdGEuY3VycmVudFRyYW5zbGF0ZSAtIGRpZmY7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBzaGlmdCA9IGdyaWRFbmFibGVkID8gYXBwZW5kU2xpZGVzSW5kZXhlcy5sZW5ndGggLyBwYXJhbXMuZ3JpZC5yb3dzIDogYXBwZW5kU2xpZGVzSW5kZXhlcy5sZW5ndGg7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCAtIHNoaWZ0LCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHN3aXBlci5hbGxvd1NsaWRlUHJldiA9IGFsbG93U2xpZGVQcmV2O1xuICBzd2lwZXIuYWxsb3dTbGlkZU5leHQgPSBhbGxvd1NsaWRlTmV4dDtcbiAgaWYgKHN3aXBlci5jb250cm9sbGVyICYmIHN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wgJiYgIWJ5Q29udHJvbGxlcikge1xuICAgIGNvbnN0IGxvb3BQYXJhbXMgPSB7XG4gICAgICBzbGlkZVJlYWxJbmRleCxcbiAgICAgIGRpcmVjdGlvbixcbiAgICAgIHNldFRyYW5zbGF0ZSxcbiAgICAgIGFjdGl2ZVNsaWRlSW5kZXgsXG4gICAgICBieUNvbnRyb2xsZXI6IHRydWVcbiAgICB9O1xuICAgIGlmIChBcnJheS5pc0FycmF5KHN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wpKSB7XG4gICAgICBzd2lwZXIuY29udHJvbGxlci5jb250cm9sLmZvckVhY2goYyA9PiB7XG4gICAgICAgIGlmICghYy5kZXN0cm95ZWQgJiYgYy5wYXJhbXMubG9vcCkgYy5sb29wRml4KHtcbiAgICAgICAgICAuLi5sb29wUGFyYW1zLFxuICAgICAgICAgIHNsaWRlVG86IGMucGFyYW1zLnNsaWRlc1BlclZpZXcgPT09IHBhcmFtcy5zbGlkZXNQZXJWaWV3ID8gc2xpZGVUbyA6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChzd2lwZXIuY29udHJvbGxlci5jb250cm9sIGluc3RhbmNlb2Ygc3dpcGVyLmNvbnN0cnVjdG9yICYmIHN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wucGFyYW1zLmxvb3ApIHtcbiAgICAgIHN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wubG9vcEZpeCh7XG4gICAgICAgIC4uLmxvb3BQYXJhbXMsXG4gICAgICAgIHNsaWRlVG86IHN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wucGFyYW1zLnNsaWRlc1BlclZpZXcgPT09IHBhcmFtcy5zbGlkZXNQZXJWaWV3ID8gc2xpZGVUbyA6IGZhbHNlXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgc3dpcGVyLmVtaXQoJ2xvb3BGaXgnKTtcbn1cblxuZnVuY3Rpb24gbG9vcERlc3Ryb3koKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgc2xpZGVzRWxcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKCFwYXJhbXMubG9vcCB8fCBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCkgcmV0dXJuO1xuICBzd2lwZXIucmVjYWxjU2xpZGVzKCk7XG4gIGNvbnN0IG5ld1NsaWRlc09yZGVyID0gW107XG4gIHN3aXBlci5zbGlkZXMuZm9yRWFjaChzbGlkZUVsID0+IHtcbiAgICBjb25zdCBpbmRleCA9IHR5cGVvZiBzbGlkZUVsLnN3aXBlclNsaWRlSW5kZXggPT09ICd1bmRlZmluZWQnID8gc2xpZGVFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JykgKiAxIDogc2xpZGVFbC5zd2lwZXJTbGlkZUluZGV4O1xuICAgIG5ld1NsaWRlc09yZGVyW2luZGV4XSA9IHNsaWRlRWw7XG4gIH0pO1xuICBzd2lwZXIuc2xpZGVzLmZvckVhY2goc2xpZGVFbCA9PiB7XG4gICAgc2xpZGVFbC5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4Jyk7XG4gIH0pO1xuICBuZXdTbGlkZXNPcmRlci5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgIHNsaWRlc0VsLmFwcGVuZChzbGlkZUVsKTtcbiAgfSk7XG4gIHN3aXBlci5yZWNhbGNTbGlkZXMoKTtcbiAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnJlYWxJbmRleCwgMCk7XG59XG5cbnZhciBsb29wID0ge1xuICBsb29wQ3JlYXRlLFxuICBsb29wRml4LFxuICBsb29wRGVzdHJveVxufTtcblxuZnVuY3Rpb24gc2V0R3JhYkN1cnNvcihtb3ZpbmcpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgaWYgKCFzd2lwZXIucGFyYW1zLnNpbXVsYXRlVG91Y2ggfHwgc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHN3aXBlci5pc0xvY2tlZCB8fCBzd2lwZXIucGFyYW1zLmNzc01vZGUpIHJldHVybjtcbiAgY29uc3QgZWwgPSBzd2lwZXIucGFyYW1zLnRvdWNoRXZlbnRzVGFyZ2V0ID09PSAnY29udGFpbmVyJyA/IHN3aXBlci5lbCA6IHN3aXBlci53cmFwcGVyRWw7XG4gIGlmIChzd2lwZXIuaXNFbGVtZW50KSB7XG4gICAgc3dpcGVyLl9fcHJldmVudE9ic2VydmVyX18gPSB0cnVlO1xuICB9XG4gIGVsLnN0eWxlLmN1cnNvciA9ICdtb3ZlJztcbiAgZWwuc3R5bGUuY3Vyc29yID0gbW92aW5nID8gJ2dyYWJiaW5nJyA6ICdncmFiJztcbiAgaWYgKHN3aXBlci5pc0VsZW1lbnQpIHtcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgc3dpcGVyLl9fcHJldmVudE9ic2VydmVyX18gPSBmYWxzZTtcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiB1bnNldEdyYWJDdXJzb3IoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGlmIChzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc3dpcGVyLmlzTG9ja2VkIHx8IHN3aXBlci5wYXJhbXMuY3NzTW9kZSkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoc3dpcGVyLmlzRWxlbWVudCkge1xuICAgIHN3aXBlci5fX3ByZXZlbnRPYnNlcnZlcl9fID0gdHJ1ZTtcbiAgfVxuICBzd2lwZXJbc3dpcGVyLnBhcmFtcy50b3VjaEV2ZW50c1RhcmdldCA9PT0gJ2NvbnRhaW5lcicgPyAnZWwnIDogJ3dyYXBwZXJFbCddLnN0eWxlLmN1cnNvciA9ICcnO1xuICBpZiAoc3dpcGVyLmlzRWxlbWVudCkge1xuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICBzd2lwZXIuX19wcmV2ZW50T2JzZXJ2ZXJfXyA9IGZhbHNlO1xuICAgIH0pO1xuICB9XG59XG5cbnZhciBncmFiQ3Vyc29yID0ge1xuICBzZXRHcmFiQ3Vyc29yLFxuICB1bnNldEdyYWJDdXJzb3Jcbn07XG5cbi8vIE1vZGlmaWVkIGZyb20gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNTQ1MjA1NTQvY3VzdG9tLWVsZW1lbnQtZ2V0cm9vdG5vZGUtY2xvc2VzdC1mdW5jdGlvbi1jcm9zc2luZy1tdWx0aXBsZS1wYXJlbnQtc2hhZG93ZFxuZnVuY3Rpb24gY2xvc2VzdEVsZW1lbnQoc2VsZWN0b3IsIGJhc2UpIHtcbiAgaWYgKGJhc2UgPT09IHZvaWQgMCkge1xuICAgIGJhc2UgPSB0aGlzO1xuICB9XG4gIGZ1bmN0aW9uIF9fY2xvc2VzdEZyb20oZWwpIHtcbiAgICBpZiAoIWVsIHx8IGVsID09PSBnZXREb2N1bWVudCgpIHx8IGVsID09PSBnZXRXaW5kb3coKSkgcmV0dXJuIG51bGw7XG4gICAgaWYgKGVsLmFzc2lnbmVkU2xvdCkgZWwgPSBlbC5hc3NpZ25lZFNsb3Q7XG4gICAgY29uc3QgZm91bmQgPSBlbC5jbG9zZXN0KHNlbGVjdG9yKTtcbiAgICBpZiAoIWZvdW5kICYmICFlbC5nZXRSb290Tm9kZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBmb3VuZCB8fCBfX2Nsb3Nlc3RGcm9tKGVsLmdldFJvb3ROb2RlKCkuaG9zdCk7XG4gIH1cbiAgcmV0dXJuIF9fY2xvc2VzdEZyb20oYmFzZSk7XG59XG5mdW5jdGlvbiBwcmV2ZW50RWRnZVN3aXBlKHN3aXBlciwgZXZlbnQsIHN0YXJ0WCkge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgY29uc3Qge1xuICAgIHBhcmFtc1xuICB9ID0gc3dpcGVyO1xuICBjb25zdCBlZGdlU3dpcGVEZXRlY3Rpb24gPSBwYXJhbXMuZWRnZVN3aXBlRGV0ZWN0aW9uO1xuICBjb25zdCBlZGdlU3dpcGVUaHJlc2hvbGQgPSBwYXJhbXMuZWRnZVN3aXBlVGhyZXNob2xkO1xuICBpZiAoZWRnZVN3aXBlRGV0ZWN0aW9uICYmIChzdGFydFggPD0gZWRnZVN3aXBlVGhyZXNob2xkIHx8IHN0YXJ0WCA+PSB3aW5kb3cuaW5uZXJXaWR0aCAtIGVkZ2VTd2lwZVRocmVzaG9sZCkpIHtcbiAgICBpZiAoZWRnZVN3aXBlRGV0ZWN0aW9uID09PSAncHJldmVudCcpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gb25Ub3VjaFN0YXJ0KGV2ZW50KSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgbGV0IGUgPSBldmVudDtcbiAgaWYgKGUub3JpZ2luYWxFdmVudCkgZSA9IGUub3JpZ2luYWxFdmVudDtcbiAgY29uc3QgZGF0YSA9IHN3aXBlci50b3VjaEV2ZW50c0RhdGE7XG4gIGlmIChlLnR5cGUgPT09ICdwb2ludGVyZG93bicpIHtcbiAgICBpZiAoZGF0YS5wb2ludGVySWQgIT09IG51bGwgJiYgZGF0YS5wb2ludGVySWQgIT09IGUucG9pbnRlcklkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGRhdGEucG9pbnRlcklkID0gZS5wb2ludGVySWQ7XG4gIH0gZWxzZSBpZiAoZS50eXBlID09PSAndG91Y2hzdGFydCcgJiYgZS50YXJnZXRUb3VjaGVzLmxlbmd0aCA9PT0gMSkge1xuICAgIGRhdGEudG91Y2hJZCA9IGUudGFyZ2V0VG91Y2hlc1swXS5pZGVudGlmaWVyO1xuICB9XG4gIGlmIChlLnR5cGUgPT09ICd0b3VjaHN0YXJ0Jykge1xuICAgIC8vIGRvbid0IHByb2NlZWQgdG91Y2ggZXZlbnRcbiAgICBwcmV2ZW50RWRnZVN3aXBlKHN3aXBlciwgZSwgZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VYKTtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICB0b3VjaGVzLFxuICAgIGVuYWJsZWRcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKCFlbmFibGVkKSByZXR1cm47XG4gIGlmICghcGFyYW1zLnNpbXVsYXRlVG91Y2ggJiYgZS5wb2ludGVyVHlwZSA9PT0gJ21vdXNlJykgcmV0dXJuO1xuICBpZiAoc3dpcGVyLmFuaW1hdGluZyAmJiBwYXJhbXMucHJldmVudEludGVyYWN0aW9uT25UcmFuc2l0aW9uKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICghc3dpcGVyLmFuaW1hdGluZyAmJiBwYXJhbXMuY3NzTW9kZSAmJiBwYXJhbXMubG9vcCkge1xuICAgIHN3aXBlci5sb29wRml4KCk7XG4gIH1cbiAgbGV0IHRhcmdldEVsID0gZS50YXJnZXQ7XG4gIGlmIChwYXJhbXMudG91Y2hFdmVudHNUYXJnZXQgPT09ICd3cmFwcGVyJykge1xuICAgIGlmICghc3dpcGVyLndyYXBwZXJFbC5jb250YWlucyh0YXJnZXRFbCkpIHJldHVybjtcbiAgfVxuICBpZiAoJ3doaWNoJyBpbiBlICYmIGUud2hpY2ggPT09IDMpIHJldHVybjtcbiAgaWYgKCdidXR0b24nIGluIGUgJiYgZS5idXR0b24gPiAwKSByZXR1cm47XG4gIGlmIChkYXRhLmlzVG91Y2hlZCAmJiBkYXRhLmlzTW92ZWQpIHJldHVybjtcblxuICAvLyBjaGFuZ2UgdGFyZ2V0IGVsIGZvciBzaGFkb3cgcm9vdCBjb21wb25lbnRcbiAgY29uc3Qgc3dpcGluZ0NsYXNzSGFzVmFsdWUgPSAhIXBhcmFtcy5ub1N3aXBpbmdDbGFzcyAmJiBwYXJhbXMubm9Td2lwaW5nQ2xhc3MgIT09ICcnO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgY29uc3QgZXZlbnRQYXRoID0gZS5jb21wb3NlZFBhdGggPyBlLmNvbXBvc2VkUGF0aCgpIDogZS5wYXRoO1xuICBpZiAoc3dpcGluZ0NsYXNzSGFzVmFsdWUgJiYgZS50YXJnZXQgJiYgZS50YXJnZXQuc2hhZG93Um9vdCAmJiBldmVudFBhdGgpIHtcbiAgICB0YXJnZXRFbCA9IGV2ZW50UGF0aFswXTtcbiAgfVxuICBjb25zdCBub1N3aXBpbmdTZWxlY3RvciA9IHBhcmFtcy5ub1N3aXBpbmdTZWxlY3RvciA/IHBhcmFtcy5ub1N3aXBpbmdTZWxlY3RvciA6IGAuJHtwYXJhbXMubm9Td2lwaW5nQ2xhc3N9YDtcbiAgY29uc3QgaXNUYXJnZXRTaGFkb3cgPSAhIShlLnRhcmdldCAmJiBlLnRhcmdldC5zaGFkb3dSb290KTtcblxuICAvLyB1c2UgY2xvc2VzdEVsZW1lbnQgZm9yIHNoYWRvdyByb290IGVsZW1lbnQgdG8gZ2V0IHRoZSBhY3R1YWwgY2xvc2VzdCBmb3IgbmVzdGVkIHNoYWRvdyByb290IGVsZW1lbnRcbiAgaWYgKHBhcmFtcy5ub1N3aXBpbmcgJiYgKGlzVGFyZ2V0U2hhZG93ID8gY2xvc2VzdEVsZW1lbnQobm9Td2lwaW5nU2VsZWN0b3IsIHRhcmdldEVsKSA6IHRhcmdldEVsLmNsb3Nlc3Qobm9Td2lwaW5nU2VsZWN0b3IpKSkge1xuICAgIHN3aXBlci5hbGxvd0NsaWNrID0gdHJ1ZTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHBhcmFtcy5zd2lwZUhhbmRsZXIpIHtcbiAgICBpZiAoIXRhcmdldEVsLmNsb3Nlc3QocGFyYW1zLnN3aXBlSGFuZGxlcikpIHJldHVybjtcbiAgfVxuICB0b3VjaGVzLmN1cnJlbnRYID0gZS5wYWdlWDtcbiAgdG91Y2hlcy5jdXJyZW50WSA9IGUucGFnZVk7XG4gIGNvbnN0IHN0YXJ0WCA9IHRvdWNoZXMuY3VycmVudFg7XG4gIGNvbnN0IHN0YXJ0WSA9IHRvdWNoZXMuY3VycmVudFk7XG5cbiAgLy8gRG8gTk9UIHN0YXJ0IGlmIGlPUyBlZGdlIHN3aXBlIGlzIGRldGVjdGVkLiBPdGhlcndpc2UgaU9TIGFwcCBjYW5ub3Qgc3dpcGUtdG8tZ28tYmFjayBhbnltb3JlXG5cbiAgaWYgKCFwcmV2ZW50RWRnZVN3aXBlKHN3aXBlciwgZSwgc3RhcnRYKSkge1xuICAgIHJldHVybjtcbiAgfVxuICBPYmplY3QuYXNzaWduKGRhdGEsIHtcbiAgICBpc1RvdWNoZWQ6IHRydWUsXG4gICAgaXNNb3ZlZDogZmFsc2UsXG4gICAgYWxsb3dUb3VjaENhbGxiYWNrczogdHJ1ZSxcbiAgICBpc1Njcm9sbGluZzogdW5kZWZpbmVkLFxuICAgIHN0YXJ0TW92aW5nOiB1bmRlZmluZWRcbiAgfSk7XG4gIHRvdWNoZXMuc3RhcnRYID0gc3RhcnRYO1xuICB0b3VjaGVzLnN0YXJ0WSA9IHN0YXJ0WTtcbiAgZGF0YS50b3VjaFN0YXJ0VGltZSA9IG5vdygpO1xuICBzd2lwZXIuYWxsb3dDbGljayA9IHRydWU7XG4gIHN3aXBlci51cGRhdGVTaXplKCk7XG4gIHN3aXBlci5zd2lwZURpcmVjdGlvbiA9IHVuZGVmaW5lZDtcbiAgaWYgKHBhcmFtcy50aHJlc2hvbGQgPiAwKSBkYXRhLmFsbG93VGhyZXNob2xkTW92ZSA9IGZhbHNlO1xuICBsZXQgcHJldmVudERlZmF1bHQgPSB0cnVlO1xuICBpZiAodGFyZ2V0RWwubWF0Y2hlcyhkYXRhLmZvY3VzYWJsZUVsZW1lbnRzKSkge1xuICAgIHByZXZlbnREZWZhdWx0ID0gZmFsc2U7XG4gICAgaWYgKHRhcmdldEVsLm5vZGVOYW1lID09PSAnU0VMRUNUJykge1xuICAgICAgZGF0YS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgaWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5tYXRjaGVzKGRhdGEuZm9jdXNhYmxlRWxlbWVudHMpICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgIT09IHRhcmdldEVsKSB7XG4gICAgZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5ibHVyKCk7XG4gIH1cbiAgY29uc3Qgc2hvdWxkUHJldmVudERlZmF1bHQgPSBwcmV2ZW50RGVmYXVsdCAmJiBzd2lwZXIuYWxsb3dUb3VjaE1vdmUgJiYgcGFyYW1zLnRvdWNoU3RhcnRQcmV2ZW50RGVmYXVsdDtcbiAgaWYgKChwYXJhbXMudG91Y2hTdGFydEZvcmNlUHJldmVudERlZmF1bHQgfHwgc2hvdWxkUHJldmVudERlZmF1bHQpICYmICF0YXJnZXRFbC5pc0NvbnRlbnRFZGl0YWJsZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgfVxuICBpZiAocGFyYW1zLmZyZWVNb2RlICYmIHBhcmFtcy5mcmVlTW9kZS5lbmFibGVkICYmIHN3aXBlci5mcmVlTW9kZSAmJiBzd2lwZXIuYW5pbWF0aW5nICYmICFwYXJhbXMuY3NzTW9kZSkge1xuICAgIHN3aXBlci5mcmVlTW9kZS5vblRvdWNoU3RhcnQoKTtcbiAgfVxuICBzd2lwZXIuZW1pdCgndG91Y2hTdGFydCcsIGUpO1xufVxuXG5mdW5jdGlvbiBvblRvdWNoTW92ZShldmVudCkge1xuICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IGRhdGEgPSBzd2lwZXIudG91Y2hFdmVudHNEYXRhO1xuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgIHRvdWNoZXMsXG4gICAgcnRsVHJhbnNsYXRlOiBydGwsXG4gICAgZW5hYmxlZFxuICB9ID0gc3dpcGVyO1xuICBpZiAoIWVuYWJsZWQpIHJldHVybjtcbiAgaWYgKCFwYXJhbXMuc2ltdWxhdGVUb3VjaCAmJiBldmVudC5wb2ludGVyVHlwZSA9PT0gJ21vdXNlJykgcmV0dXJuO1xuICBsZXQgZSA9IGV2ZW50O1xuICBpZiAoZS5vcmlnaW5hbEV2ZW50KSBlID0gZS5vcmlnaW5hbEV2ZW50O1xuICBpZiAoZS50eXBlID09PSAncG9pbnRlcm1vdmUnKSB7XG4gICAgaWYgKGRhdGEudG91Y2hJZCAhPT0gbnVsbCkgcmV0dXJuOyAvLyByZXR1cm4gZnJvbSBwb2ludGVyIGlmIHdlIHVzZSB0b3VjaFxuICAgIGNvbnN0IGlkID0gZS5wb2ludGVySWQ7XG4gICAgaWYgKGlkICE9PSBkYXRhLnBvaW50ZXJJZCkgcmV0dXJuO1xuICB9XG4gIGxldCB0YXJnZXRUb3VjaDtcbiAgaWYgKGUudHlwZSA9PT0gJ3RvdWNobW92ZScpIHtcbiAgICB0YXJnZXRUb3VjaCA9IFsuLi5lLmNoYW5nZWRUb3VjaGVzXS5maWx0ZXIodCA9PiB0LmlkZW50aWZpZXIgPT09IGRhdGEudG91Y2hJZClbMF07XG4gICAgaWYgKCF0YXJnZXRUb3VjaCB8fCB0YXJnZXRUb3VjaC5pZGVudGlmaWVyICE9PSBkYXRhLnRvdWNoSWQpIHJldHVybjtcbiAgfSBlbHNlIHtcbiAgICB0YXJnZXRUb3VjaCA9IGU7XG4gIH1cbiAgaWYgKCFkYXRhLmlzVG91Y2hlZCkge1xuICAgIGlmIChkYXRhLnN0YXJ0TW92aW5nICYmIGRhdGEuaXNTY3JvbGxpbmcpIHtcbiAgICAgIHN3aXBlci5lbWl0KCd0b3VjaE1vdmVPcHBvc2l0ZScsIGUpO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgcGFnZVggPSB0YXJnZXRUb3VjaC5wYWdlWDtcbiAgY29uc3QgcGFnZVkgPSB0YXJnZXRUb3VjaC5wYWdlWTtcbiAgaWYgKGUucHJldmVudGVkQnlOZXN0ZWRTd2lwZXIpIHtcbiAgICB0b3VjaGVzLnN0YXJ0WCA9IHBhZ2VYO1xuICAgIHRvdWNoZXMuc3RhcnRZID0gcGFnZVk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICghc3dpcGVyLmFsbG93VG91Y2hNb3ZlKSB7XG4gICAgaWYgKCFlLnRhcmdldC5tYXRjaGVzKGRhdGEuZm9jdXNhYmxlRWxlbWVudHMpKSB7XG4gICAgICBzd2lwZXIuYWxsb3dDbGljayA9IGZhbHNlO1xuICAgIH1cbiAgICBpZiAoZGF0YS5pc1RvdWNoZWQpIHtcbiAgICAgIE9iamVjdC5hc3NpZ24odG91Y2hlcywge1xuICAgICAgICBzdGFydFg6IHBhZ2VYLFxuICAgICAgICBzdGFydFk6IHBhZ2VZLFxuICAgICAgICBjdXJyZW50WDogcGFnZVgsXG4gICAgICAgIGN1cnJlbnRZOiBwYWdlWVxuICAgICAgfSk7XG4gICAgICBkYXRhLnRvdWNoU3RhcnRUaW1lID0gbm93KCk7XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuICBpZiAocGFyYW1zLnRvdWNoUmVsZWFzZU9uRWRnZXMgJiYgIXBhcmFtcy5sb29wKSB7XG4gICAgaWYgKHN3aXBlci5pc1ZlcnRpY2FsKCkpIHtcbiAgICAgIC8vIFZlcnRpY2FsXG4gICAgICBpZiAocGFnZVkgPCB0b3VjaGVzLnN0YXJ0WSAmJiBzd2lwZXIudHJhbnNsYXRlIDw9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSB8fCBwYWdlWSA+IHRvdWNoZXMuc3RhcnRZICYmIHN3aXBlci50cmFuc2xhdGUgPj0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSB7XG4gICAgICAgIGRhdGEuaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgICAgIGRhdGEuaXNNb3ZlZCA9IGZhbHNlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChwYWdlWCA8IHRvdWNoZXMuc3RhcnRYICYmIHN3aXBlci50cmFuc2xhdGUgPD0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpIHx8IHBhZ2VYID4gdG91Y2hlcy5zdGFydFggJiYgc3dpcGVyLnRyYW5zbGF0ZSA+PSBzd2lwZXIubWluVHJhbnNsYXRlKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbiAgaWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpIHtcbiAgICBpZiAoZS50YXJnZXQgPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgZS50YXJnZXQubWF0Y2hlcyhkYXRhLmZvY3VzYWJsZUVsZW1lbnRzKSkge1xuICAgICAgZGF0YS5pc01vdmVkID0gdHJ1ZTtcbiAgICAgIHN3aXBlci5hbGxvd0NsaWNrID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG4gIGlmIChkYXRhLmFsbG93VG91Y2hDYWxsYmFja3MpIHtcbiAgICBzd2lwZXIuZW1pdCgndG91Y2hNb3ZlJywgZSk7XG4gIH1cbiAgdG91Y2hlcy5wcmV2aW91c1ggPSB0b3VjaGVzLmN1cnJlbnRYO1xuICB0b3VjaGVzLnByZXZpb3VzWSA9IHRvdWNoZXMuY3VycmVudFk7XG4gIHRvdWNoZXMuY3VycmVudFggPSBwYWdlWDtcbiAgdG91Y2hlcy5jdXJyZW50WSA9IHBhZ2VZO1xuICBjb25zdCBkaWZmWCA9IHRvdWNoZXMuY3VycmVudFggLSB0b3VjaGVzLnN0YXJ0WDtcbiAgY29uc3QgZGlmZlkgPSB0b3VjaGVzLmN1cnJlbnRZIC0gdG91Y2hlcy5zdGFydFk7XG4gIGlmIChzd2lwZXIucGFyYW1zLnRocmVzaG9sZCAmJiBNYXRoLnNxcnQoZGlmZlggKiogMiArIGRpZmZZICoqIDIpIDwgc3dpcGVyLnBhcmFtcy50aHJlc2hvbGQpIHJldHVybjtcbiAgaWYgKHR5cGVvZiBkYXRhLmlzU2Nyb2xsaW5nID09PSAndW5kZWZpbmVkJykge1xuICAgIGxldCB0b3VjaEFuZ2xlO1xuICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkgJiYgdG91Y2hlcy5jdXJyZW50WSA9PT0gdG91Y2hlcy5zdGFydFkgfHwgc3dpcGVyLmlzVmVydGljYWwoKSAmJiB0b3VjaGVzLmN1cnJlbnRYID09PSB0b3VjaGVzLnN0YXJ0WCkge1xuICAgICAgZGF0YS5pc1Njcm9sbGluZyA9IGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIGlmIChkaWZmWCAqIGRpZmZYICsgZGlmZlkgKiBkaWZmWSA+PSAyNSkge1xuICAgICAgICB0b3VjaEFuZ2xlID0gTWF0aC5hdGFuMihNYXRoLmFicyhkaWZmWSksIE1hdGguYWJzKGRpZmZYKSkgKiAxODAgLyBNYXRoLlBJO1xuICAgICAgICBkYXRhLmlzU2Nyb2xsaW5nID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gdG91Y2hBbmdsZSA+IHBhcmFtcy50b3VjaEFuZ2xlIDogOTAgLSB0b3VjaEFuZ2xlID4gcGFyYW1zLnRvdWNoQW5nbGU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChkYXRhLmlzU2Nyb2xsaW5nKSB7XG4gICAgc3dpcGVyLmVtaXQoJ3RvdWNoTW92ZU9wcG9zaXRlJywgZSk7XG4gIH1cbiAgaWYgKHR5cGVvZiBkYXRhLnN0YXJ0TW92aW5nID09PSAndW5kZWZpbmVkJykge1xuICAgIGlmICh0b3VjaGVzLmN1cnJlbnRYICE9PSB0b3VjaGVzLnN0YXJ0WCB8fCB0b3VjaGVzLmN1cnJlbnRZICE9PSB0b3VjaGVzLnN0YXJ0WSkge1xuICAgICAgZGF0YS5zdGFydE1vdmluZyA9IHRydWU7XG4gICAgfVxuICB9XG4gIGlmIChkYXRhLmlzU2Nyb2xsaW5nIHx8IGUudHlwZSA9PT0gJ3RvdWNobW92ZScgJiYgZGF0YS5wcmV2ZW50VG91Y2hNb3ZlRnJvbVBvaW50ZXJNb3ZlKSB7XG4gICAgZGF0YS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKCFkYXRhLnN0YXJ0TW92aW5nKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHN3aXBlci5hbGxvd0NsaWNrID0gZmFsc2U7XG4gIGlmICghcGFyYW1zLmNzc01vZGUgJiYgZS5jYW5jZWxhYmxlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICB9XG4gIGlmIChwYXJhbXMudG91Y2hNb3ZlU3RvcFByb3BhZ2F0aW9uICYmICFwYXJhbXMubmVzdGVkKSB7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgfVxuICBsZXQgZGlmZiA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IGRpZmZYIDogZGlmZlk7XG4gIGxldCB0b3VjaGVzRGlmZiA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHRvdWNoZXMuY3VycmVudFggLSB0b3VjaGVzLnByZXZpb3VzWCA6IHRvdWNoZXMuY3VycmVudFkgLSB0b3VjaGVzLnByZXZpb3VzWTtcbiAgaWYgKHBhcmFtcy5vbmVXYXlNb3ZlbWVudCkge1xuICAgIGRpZmYgPSBNYXRoLmFicyhkaWZmKSAqIChydGwgPyAxIDogLTEpO1xuICAgIHRvdWNoZXNEaWZmID0gTWF0aC5hYnModG91Y2hlc0RpZmYpICogKHJ0bCA/IDEgOiAtMSk7XG4gIH1cbiAgdG91Y2hlcy5kaWZmID0gZGlmZjtcbiAgZGlmZiAqPSBwYXJhbXMudG91Y2hSYXRpbztcbiAgaWYgKHJ0bCkge1xuICAgIGRpZmYgPSAtZGlmZjtcbiAgICB0b3VjaGVzRGlmZiA9IC10b3VjaGVzRGlmZjtcbiAgfVxuICBjb25zdCBwcmV2VG91Y2hlc0RpcmVjdGlvbiA9IHN3aXBlci50b3VjaGVzRGlyZWN0aW9uO1xuICBzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPSBkaWZmID4gMCA/ICdwcmV2JyA6ICduZXh0JztcbiAgc3dpcGVyLnRvdWNoZXNEaXJlY3Rpb24gPSB0b3VjaGVzRGlmZiA+IDAgPyAncHJldicgOiAnbmV4dCc7XG4gIGNvbnN0IGlzTG9vcCA9IHN3aXBlci5wYXJhbXMubG9vcCAmJiAhcGFyYW1zLmNzc01vZGU7XG4gIGNvbnN0IGFsbG93TG9vcEZpeCA9IHN3aXBlci50b3VjaGVzRGlyZWN0aW9uID09PSAnbmV4dCcgJiYgc3dpcGVyLmFsbG93U2xpZGVOZXh0IHx8IHN3aXBlci50b3VjaGVzRGlyZWN0aW9uID09PSAncHJldicgJiYgc3dpcGVyLmFsbG93U2xpZGVQcmV2O1xuICBpZiAoIWRhdGEuaXNNb3ZlZCkge1xuICAgIGlmIChpc0xvb3AgJiYgYWxsb3dMb29wRml4KSB7XG4gICAgICBzd2lwZXIubG9vcEZpeCh7XG4gICAgICAgIGRpcmVjdGlvbjogc3dpcGVyLnN3aXBlRGlyZWN0aW9uXG4gICAgICB9KTtcbiAgICB9XG4gICAgZGF0YS5zdGFydFRyYW5zbGF0ZSA9IHN3aXBlci5nZXRUcmFuc2xhdGUoKTtcbiAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbigwKTtcbiAgICBpZiAoc3dpcGVyLmFuaW1hdGluZykge1xuICAgICAgY29uc3QgZXZ0ID0gbmV3IHdpbmRvdy5DdXN0b21FdmVudCgndHJhbnNpdGlvbmVuZCcsIHtcbiAgICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgICAgY2FuY2VsYWJsZTogdHJ1ZSxcbiAgICAgICAgZGV0YWlsOiB7XG4gICAgICAgICAgYnlTd2lwZXJUb3VjaE1vdmU6IHRydWVcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBzd2lwZXIud3JhcHBlckVsLmRpc3BhdGNoRXZlbnQoZXZ0KTtcbiAgICB9XG4gICAgZGF0YS5hbGxvd01vbWVudHVtQm91bmNlID0gZmFsc2U7XG4gICAgLy8gR3JhYiBDdXJzb3JcbiAgICBpZiAocGFyYW1zLmdyYWJDdXJzb3IgJiYgKHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9PT0gdHJ1ZSB8fCBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPT09IHRydWUpKSB7XG4gICAgICBzd2lwZXIuc2V0R3JhYkN1cnNvcih0cnVlKTtcbiAgICB9XG4gICAgc3dpcGVyLmVtaXQoJ3NsaWRlckZpcnN0TW92ZScsIGUpO1xuICB9XG4gIGxldCBsb29wRml4ZWQ7XG4gIG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICBpZiAoZGF0YS5pc01vdmVkICYmIGRhdGEuYWxsb3dUaHJlc2hvbGRNb3ZlICYmIHByZXZUb3VjaGVzRGlyZWN0aW9uICE9PSBzd2lwZXIudG91Y2hlc0RpcmVjdGlvbiAmJiBpc0xvb3AgJiYgYWxsb3dMb29wRml4ICYmIE1hdGguYWJzKGRpZmYpID49IDEpIHtcbiAgICBPYmplY3QuYXNzaWduKHRvdWNoZXMsIHtcbiAgICAgIHN0YXJ0WDogcGFnZVgsXG4gICAgICBzdGFydFk6IHBhZ2VZLFxuICAgICAgY3VycmVudFg6IHBhZ2VYLFxuICAgICAgY3VycmVudFk6IHBhZ2VZLFxuICAgICAgc3RhcnRUcmFuc2xhdGU6IGRhdGEuY3VycmVudFRyYW5zbGF0ZVxuICAgIH0pO1xuICAgIGRhdGEubG9vcFN3YXBSZXNldCA9IHRydWU7XG4gICAgZGF0YS5zdGFydFRyYW5zbGF0ZSA9IGRhdGEuY3VycmVudFRyYW5zbGF0ZTtcbiAgICByZXR1cm47XG4gIH1cbiAgc3dpcGVyLmVtaXQoJ3NsaWRlck1vdmUnLCBlKTtcbiAgZGF0YS5pc01vdmVkID0gdHJ1ZTtcbiAgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gZGlmZiArIGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gIGxldCBkaXNhYmxlUGFyZW50U3dpcGVyID0gdHJ1ZTtcbiAgbGV0IHJlc2lzdGFuY2VSYXRpbyA9IHBhcmFtcy5yZXNpc3RhbmNlUmF0aW87XG4gIGlmIChwYXJhbXMudG91Y2hSZWxlYXNlT25FZGdlcykge1xuICAgIHJlc2lzdGFuY2VSYXRpbyA9IDA7XG4gIH1cbiAgaWYgKGRpZmYgPiAwKSB7XG4gICAgaWYgKGlzTG9vcCAmJiBhbGxvd0xvb3BGaXggJiYgIWxvb3BGaXhlZCAmJiBkYXRhLmFsbG93VGhyZXNob2xkTW92ZSAmJiBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzID8gc3dpcGVyLm1pblRyYW5zbGF0ZSgpIC0gc3dpcGVyLnNsaWRlc1NpemVzR3JpZFtzd2lwZXIuYWN0aXZlSW5kZXggKyAxXSA6IHN3aXBlci5taW5UcmFuc2xhdGUoKSkpIHtcbiAgICAgIHN3aXBlci5sb29wRml4KHtcbiAgICAgICAgZGlyZWN0aW9uOiAncHJldicsXG4gICAgICAgIHNldFRyYW5zbGF0ZTogdHJ1ZSxcbiAgICAgICAgYWN0aXZlU2xpZGVJbmRleDogMFxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPiBzd2lwZXIubWluVHJhbnNsYXRlKCkpIHtcbiAgICAgIGRpc2FibGVQYXJlbnRTd2lwZXIgPSBmYWxzZTtcbiAgICAgIGlmIChwYXJhbXMucmVzaXN0YW5jZSkge1xuICAgICAgICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBzd2lwZXIubWluVHJhbnNsYXRlKCkgLSAxICsgKC1zd2lwZXIubWluVHJhbnNsYXRlKCkgKyBkYXRhLnN0YXJ0VHJhbnNsYXRlICsgZGlmZikgKiogcmVzaXN0YW5jZVJhdGlvO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChkaWZmIDwgMCkge1xuICAgIGlmIChpc0xvb3AgJiYgYWxsb3dMb29wRml4ICYmICFsb29wRml4ZWQgJiYgZGF0YS5hbGxvd1RocmVzaG9sZE1vdmUgJiYgZGF0YS5jdXJyZW50VHJhbnNsYXRlIDwgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcyA/IHN3aXBlci5tYXhUcmFuc2xhdGUoKSArIHN3aXBlci5zbGlkZXNTaXplc0dyaWRbc3dpcGVyLnNsaWRlc1NpemVzR3JpZC5sZW5ndGggLSAxXSA6IHN3aXBlci5tYXhUcmFuc2xhdGUoKSkpIHtcbiAgICAgIHN3aXBlci5sb29wRml4KHtcbiAgICAgICAgZGlyZWN0aW9uOiAnbmV4dCcsXG4gICAgICAgIHNldFRyYW5zbGF0ZTogdHJ1ZSxcbiAgICAgICAgYWN0aXZlU2xpZGVJbmRleDogc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAocGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyA/IHN3aXBlci5zbGlkZXNQZXJWaWV3RHluYW1pYygpIDogTWF0aC5jZWlsKHBhcnNlRmxvYXQocGFyYW1zLnNsaWRlc1BlclZpZXcsIDEwKSkpXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGRhdGEuY3VycmVudFRyYW5zbGF0ZSA8IHN3aXBlci5tYXhUcmFuc2xhdGUoKSkge1xuICAgICAgZGlzYWJsZVBhcmVudFN3aXBlciA9IGZhbHNlO1xuICAgICAgaWYgKHBhcmFtcy5yZXNpc3RhbmNlKSB7XG4gICAgICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSArIDEgLSAoc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gZGF0YS5zdGFydFRyYW5zbGF0ZSAtIGRpZmYpICoqIHJlc2lzdGFuY2VSYXRpbztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKGRpc2FibGVQYXJlbnRTd2lwZXIpIHtcbiAgICBlLnByZXZlbnRlZEJ5TmVzdGVkU3dpcGVyID0gdHJ1ZTtcbiAgfVxuXG4gIC8vIERpcmVjdGlvbnMgbG9ja3NcbiAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZU5leHQgJiYgc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAnbmV4dCcgJiYgZGF0YS5jdXJyZW50VHJhbnNsYXRlIDwgZGF0YS5zdGFydFRyYW5zbGF0ZSkge1xuICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gIH1cbiAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZVByZXYgJiYgc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAncHJldicgJiYgZGF0YS5jdXJyZW50VHJhbnNsYXRlID4gZGF0YS5zdGFydFRyYW5zbGF0ZSkge1xuICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gIH1cbiAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZVByZXYgJiYgIXN3aXBlci5hbGxvd1NsaWRlTmV4dCkge1xuICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gIH1cblxuICAvLyBUaHJlc2hvbGRcbiAgaWYgKHBhcmFtcy50aHJlc2hvbGQgPiAwKSB7XG4gICAgaWYgKE1hdGguYWJzKGRpZmYpID4gcGFyYW1zLnRocmVzaG9sZCB8fCBkYXRhLmFsbG93VGhyZXNob2xkTW92ZSkge1xuICAgICAgaWYgKCFkYXRhLmFsbG93VGhyZXNob2xkTW92ZSkge1xuICAgICAgICBkYXRhLmFsbG93VGhyZXNob2xkTW92ZSA9IHRydWU7XG4gICAgICAgIHRvdWNoZXMuc3RhcnRYID0gdG91Y2hlcy5jdXJyZW50WDtcbiAgICAgICAgdG91Y2hlcy5zdGFydFkgPSB0b3VjaGVzLmN1cnJlbnRZO1xuICAgICAgICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBkYXRhLnN0YXJ0VHJhbnNsYXRlO1xuICAgICAgICB0b3VjaGVzLmRpZmYgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyB0b3VjaGVzLmN1cnJlbnRYIC0gdG91Y2hlcy5zdGFydFggOiB0b3VjaGVzLmN1cnJlbnRZIC0gdG91Y2hlcy5zdGFydFk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gZGF0YS5zdGFydFRyYW5zbGF0ZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbiAgaWYgKCFwYXJhbXMuZm9sbG93RmluZ2VyIHx8IHBhcmFtcy5jc3NNb2RlKSByZXR1cm47XG5cbiAgLy8gVXBkYXRlIGFjdGl2ZSBpbmRleCBpbiBmcmVlIG1vZGVcbiAgaWYgKHBhcmFtcy5mcmVlTW9kZSAmJiBwYXJhbXMuZnJlZU1vZGUuZW5hYmxlZCAmJiBzd2lwZXIuZnJlZU1vZGUgfHwgcGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MpIHtcbiAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICB9XG4gIGlmIChwYXJhbXMuZnJlZU1vZGUgJiYgcGFyYW1zLmZyZWVNb2RlLmVuYWJsZWQgJiYgc3dpcGVyLmZyZWVNb2RlKSB7XG4gICAgc3dpcGVyLmZyZWVNb2RlLm9uVG91Y2hNb3ZlKCk7XG4gIH1cbiAgLy8gVXBkYXRlIHByb2dyZXNzXG4gIHN3aXBlci51cGRhdGVQcm9ncmVzcyhkYXRhLmN1cnJlbnRUcmFuc2xhdGUpO1xuICAvLyBVcGRhdGUgdHJhbnNsYXRlXG4gIHN3aXBlci5zZXRUcmFuc2xhdGUoZGF0YS5jdXJyZW50VHJhbnNsYXRlKTtcbn1cblxuZnVuY3Rpb24gb25Ub3VjaEVuZChldmVudCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBkYXRhID0gc3dpcGVyLnRvdWNoRXZlbnRzRGF0YTtcbiAgbGV0IGUgPSBldmVudDtcbiAgaWYgKGUub3JpZ2luYWxFdmVudCkgZSA9IGUub3JpZ2luYWxFdmVudDtcbiAgbGV0IHRhcmdldFRvdWNoO1xuICBjb25zdCBpc1RvdWNoRXZlbnQgPSBlLnR5cGUgPT09ICd0b3VjaGVuZCcgfHwgZS50eXBlID09PSAndG91Y2hjYW5jZWwnO1xuICBpZiAoIWlzVG91Y2hFdmVudCkge1xuICAgIGlmIChkYXRhLnRvdWNoSWQgIT09IG51bGwpIHJldHVybjsgLy8gcmV0dXJuIGZyb20gcG9pbnRlciBpZiB3ZSB1c2UgdG91Y2hcbiAgICBpZiAoZS5wb2ludGVySWQgIT09IGRhdGEucG9pbnRlcklkKSByZXR1cm47XG4gICAgdGFyZ2V0VG91Y2ggPSBlO1xuICB9IGVsc2Uge1xuICAgIHRhcmdldFRvdWNoID0gWy4uLmUuY2hhbmdlZFRvdWNoZXNdLmZpbHRlcih0ID0+IHQuaWRlbnRpZmllciA9PT0gZGF0YS50b3VjaElkKVswXTtcbiAgICBpZiAoIXRhcmdldFRvdWNoIHx8IHRhcmdldFRvdWNoLmlkZW50aWZpZXIgIT09IGRhdGEudG91Y2hJZCkgcmV0dXJuO1xuICB9XG4gIGlmIChbJ3BvaW50ZXJjYW5jZWwnLCAncG9pbnRlcm91dCcsICdwb2ludGVybGVhdmUnLCAnY29udGV4dG1lbnUnXS5pbmNsdWRlcyhlLnR5cGUpKSB7XG4gICAgY29uc3QgcHJvY2VlZCA9IFsncG9pbnRlcmNhbmNlbCcsICdjb250ZXh0bWVudSddLmluY2x1ZGVzKGUudHlwZSkgJiYgKHN3aXBlci5icm93c2VyLmlzU2FmYXJpIHx8IHN3aXBlci5icm93c2VyLmlzV2ViVmlldyk7XG4gICAgaWYgKCFwcm9jZWVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG4gIGRhdGEucG9pbnRlcklkID0gbnVsbDtcbiAgZGF0YS50b3VjaElkID0gbnVsbDtcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICB0b3VjaGVzLFxuICAgIHJ0bFRyYW5zbGF0ZTogcnRsLFxuICAgIHNsaWRlc0dyaWQsXG4gICAgZW5hYmxlZFxuICB9ID0gc3dpcGVyO1xuICBpZiAoIWVuYWJsZWQpIHJldHVybjtcbiAgaWYgKCFwYXJhbXMuc2ltdWxhdGVUb3VjaCAmJiBlLnBvaW50ZXJUeXBlID09PSAnbW91c2UnKSByZXR1cm47XG4gIGlmIChkYXRhLmFsbG93VG91Y2hDYWxsYmFja3MpIHtcbiAgICBzd2lwZXIuZW1pdCgndG91Y2hFbmQnLCBlKTtcbiAgfVxuICBkYXRhLmFsbG93VG91Y2hDYWxsYmFja3MgPSBmYWxzZTtcbiAgaWYgKCFkYXRhLmlzVG91Y2hlZCkge1xuICAgIGlmIChkYXRhLmlzTW92ZWQgJiYgcGFyYW1zLmdyYWJDdXJzb3IpIHtcbiAgICAgIHN3aXBlci5zZXRHcmFiQ3Vyc29yKGZhbHNlKTtcbiAgICB9XG4gICAgZGF0YS5pc01vdmVkID0gZmFsc2U7XG4gICAgZGF0YS5zdGFydE1vdmluZyA9IGZhbHNlO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIFJldHVybiBHcmFiIEN1cnNvclxuICBpZiAocGFyYW1zLmdyYWJDdXJzb3IgJiYgZGF0YS5pc01vdmVkICYmIGRhdGEuaXNUb3VjaGVkICYmIChzd2lwZXIuYWxsb3dTbGlkZU5leHQgPT09IHRydWUgfHwgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID09PSB0cnVlKSkge1xuICAgIHN3aXBlci5zZXRHcmFiQ3Vyc29yKGZhbHNlKTtcbiAgfVxuXG4gIC8vIFRpbWUgZGlmZlxuICBjb25zdCB0b3VjaEVuZFRpbWUgPSBub3coKTtcbiAgY29uc3QgdGltZURpZmYgPSB0b3VjaEVuZFRpbWUgLSBkYXRhLnRvdWNoU3RhcnRUaW1lO1xuXG4gIC8vIFRhcCwgZG91YmxlVGFwLCBDbGlja1xuICBpZiAoc3dpcGVyLmFsbG93Q2xpY2spIHtcbiAgICBjb25zdCBwYXRoVHJlZSA9IGUucGF0aCB8fCBlLmNvbXBvc2VkUGF0aCAmJiBlLmNvbXBvc2VkUGF0aCgpO1xuICAgIHN3aXBlci51cGRhdGVDbGlja2VkU2xpZGUocGF0aFRyZWUgJiYgcGF0aFRyZWVbMF0gfHwgZS50YXJnZXQsIHBhdGhUcmVlKTtcbiAgICBzd2lwZXIuZW1pdCgndGFwIGNsaWNrJywgZSk7XG4gICAgaWYgKHRpbWVEaWZmIDwgMzAwICYmIHRvdWNoRW5kVGltZSAtIGRhdGEubGFzdENsaWNrVGltZSA8IDMwMCkge1xuICAgICAgc3dpcGVyLmVtaXQoJ2RvdWJsZVRhcCBkb3VibGVDbGljaycsIGUpO1xuICAgIH1cbiAgfVxuICBkYXRhLmxhc3RDbGlja1RpbWUgPSBub3coKTtcbiAgbmV4dFRpY2soKCkgPT4ge1xuICAgIGlmICghc3dpcGVyLmRlc3Ryb3llZCkgc3dpcGVyLmFsbG93Q2xpY2sgPSB0cnVlO1xuICB9KTtcbiAgaWYgKCFkYXRhLmlzVG91Y2hlZCB8fCAhZGF0YS5pc01vdmVkIHx8ICFzd2lwZXIuc3dpcGVEaXJlY3Rpb24gfHwgdG91Y2hlcy5kaWZmID09PSAwICYmICFkYXRhLmxvb3BTd2FwUmVzZXQgfHwgZGF0YS5jdXJyZW50VHJhbnNsYXRlID09PSBkYXRhLnN0YXJ0VHJhbnNsYXRlICYmICFkYXRhLmxvb3BTd2FwUmVzZXQpIHtcbiAgICBkYXRhLmlzVG91Y2hlZCA9IGZhbHNlO1xuICAgIGRhdGEuaXNNb3ZlZCA9IGZhbHNlO1xuICAgIGRhdGEuc3RhcnRNb3ZpbmcgPSBmYWxzZTtcbiAgICByZXR1cm47XG4gIH1cbiAgZGF0YS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgZGF0YS5pc01vdmVkID0gZmFsc2U7XG4gIGRhdGEuc3RhcnRNb3ZpbmcgPSBmYWxzZTtcbiAgbGV0IGN1cnJlbnRQb3M7XG4gIGlmIChwYXJhbXMuZm9sbG93RmluZ2VyKSB7XG4gICAgY3VycmVudFBvcyA9IHJ0bCA/IHN3aXBlci50cmFuc2xhdGUgOiAtc3dpcGVyLnRyYW5zbGF0ZTtcbiAgfSBlbHNlIHtcbiAgICBjdXJyZW50UG9zID0gLWRhdGEuY3VycmVudFRyYW5zbGF0ZTtcbiAgfVxuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHBhcmFtcy5mcmVlTW9kZSAmJiBwYXJhbXMuZnJlZU1vZGUuZW5hYmxlZCkge1xuICAgIHN3aXBlci5mcmVlTW9kZS5vblRvdWNoRW5kKHtcbiAgICAgIGN1cnJlbnRQb3NcbiAgICB9KTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBGaW5kIGN1cnJlbnQgc2xpZGVcbiAgY29uc3Qgc3dpcGVUb0xhc3QgPSBjdXJyZW50UG9zID49IC1zd2lwZXIubWF4VHJhbnNsYXRlKCkgJiYgIXN3aXBlci5wYXJhbXMubG9vcDtcbiAgbGV0IHN0b3BJbmRleCA9IDA7XG4gIGxldCBncm91cFNpemUgPSBzd2lwZXIuc2xpZGVzU2l6ZXNHcmlkWzBdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlc0dyaWQubGVuZ3RoOyBpICs9IGkgPCBwYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwID8gMSA6IHBhcmFtcy5zbGlkZXNQZXJHcm91cCkge1xuICAgIGNvbnN0IGluY3JlbWVudCA9IGkgPCBwYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwIC0gMSA/IDEgOiBwYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG4gICAgaWYgKHR5cGVvZiBzbGlkZXNHcmlkW2kgKyBpbmNyZW1lbnRdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgaWYgKHN3aXBlVG9MYXN0IHx8IGN1cnJlbnRQb3MgPj0gc2xpZGVzR3JpZFtpXSAmJiBjdXJyZW50UG9zIDwgc2xpZGVzR3JpZFtpICsgaW5jcmVtZW50XSkge1xuICAgICAgICBzdG9wSW5kZXggPSBpO1xuICAgICAgICBncm91cFNpemUgPSBzbGlkZXNHcmlkW2kgKyBpbmNyZW1lbnRdIC0gc2xpZGVzR3JpZFtpXTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHN3aXBlVG9MYXN0IHx8IGN1cnJlbnRQb3MgPj0gc2xpZGVzR3JpZFtpXSkge1xuICAgICAgc3RvcEluZGV4ID0gaTtcbiAgICAgIGdyb3VwU2l6ZSA9IHNsaWRlc0dyaWRbc2xpZGVzR3JpZC5sZW5ndGggLSAxXSAtIHNsaWRlc0dyaWRbc2xpZGVzR3JpZC5sZW5ndGggLSAyXTtcbiAgICB9XG4gIH1cbiAgbGV0IHJld2luZEZpcnN0SW5kZXggPSBudWxsO1xuICBsZXQgcmV3aW5kTGFzdEluZGV4ID0gbnVsbDtcbiAgaWYgKHBhcmFtcy5yZXdpbmQpIHtcbiAgICBpZiAoc3dpcGVyLmlzQmVnaW5uaW5nKSB7XG4gICAgICByZXdpbmRMYXN0SW5kZXggPSBwYXJhbXMudmlydHVhbCAmJiBwYXJhbXMudmlydHVhbC5lbmFibGVkICYmIHN3aXBlci52aXJ0dWFsID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCAtIDEgOiBzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIDE7XG4gICAgfSBlbHNlIGlmIChzd2lwZXIuaXNFbmQpIHtcbiAgICAgIHJld2luZEZpcnN0SW5kZXggPSAwO1xuICAgIH1cbiAgfVxuICAvLyBGaW5kIGN1cnJlbnQgc2xpZGUgc2l6ZVxuICBjb25zdCByYXRpbyA9IChjdXJyZW50UG9zIC0gc2xpZGVzR3JpZFtzdG9wSW5kZXhdKSAvIGdyb3VwU2l6ZTtcbiAgY29uc3QgaW5jcmVtZW50ID0gc3RvcEluZGV4IDwgcGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCAtIDEgPyAxIDogcGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuICBpZiAodGltZURpZmYgPiBwYXJhbXMubG9uZ1N3aXBlc01zKSB7XG4gICAgLy8gTG9uZyB0b3VjaGVzXG4gICAgaWYgKCFwYXJhbXMubG9uZ1N3aXBlcykge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ25leHQnKSB7XG4gICAgICBpZiAocmF0aW8gPj0gcGFyYW1zLmxvbmdTd2lwZXNSYXRpbykgc3dpcGVyLnNsaWRlVG8ocGFyYW1zLnJld2luZCAmJiBzd2lwZXIuaXNFbmQgPyByZXdpbmRGaXJzdEluZGV4IDogc3RvcEluZGV4ICsgaW5jcmVtZW50KTtlbHNlIHN3aXBlci5zbGlkZVRvKHN0b3BJbmRleCk7XG4gICAgfVxuICAgIGlmIChzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPT09ICdwcmV2Jykge1xuICAgICAgaWYgKHJhdGlvID4gMSAtIHBhcmFtcy5sb25nU3dpcGVzUmF0aW8pIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4ICsgaW5jcmVtZW50KTtcbiAgICAgIH0gZWxzZSBpZiAocmV3aW5kTGFzdEluZGV4ICE9PSBudWxsICYmIHJhdGlvIDwgMCAmJiBNYXRoLmFicyhyYXRpbykgPiBwYXJhbXMubG9uZ1N3aXBlc1JhdGlvKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHJld2luZExhc3RJbmRleCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXgpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBTaG9ydCBzd2lwZXNcbiAgICBpZiAoIXBhcmFtcy5zaG9ydFN3aXBlcykge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgaXNOYXZCdXR0b25UYXJnZXQgPSBzd2lwZXIubmF2aWdhdGlvbiAmJiAoZS50YXJnZXQgPT09IHN3aXBlci5uYXZpZ2F0aW9uLm5leHRFbCB8fCBlLnRhcmdldCA9PT0gc3dpcGVyLm5hdmlnYXRpb24ucHJldkVsKTtcbiAgICBpZiAoIWlzTmF2QnV0dG9uVGFyZ2V0KSB7XG4gICAgICBpZiAoc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAnbmV4dCcpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8ocmV3aW5kRmlyc3RJbmRleCAhPT0gbnVsbCA/IHJld2luZEZpcnN0SW5kZXggOiBzdG9wSW5kZXggKyBpbmNyZW1lbnQpO1xuICAgICAgfVxuICAgICAgaWYgKHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ3ByZXYnKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHJld2luZExhc3RJbmRleCAhPT0gbnVsbCA/IHJld2luZExhc3RJbmRleCA6IHN0b3BJbmRleCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChlLnRhcmdldCA9PT0gc3dpcGVyLm5hdmlnYXRpb24ubmV4dEVsKSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXggKyBpbmNyZW1lbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXgpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBvblJlc2l6ZSgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICBlbFxuICB9ID0gc3dpcGVyO1xuICBpZiAoZWwgJiYgZWwub2Zmc2V0V2lkdGggPT09IDApIHJldHVybjtcblxuICAvLyBCcmVha3BvaW50c1xuICBpZiAocGFyYW1zLmJyZWFrcG9pbnRzKSB7XG4gICAgc3dpcGVyLnNldEJyZWFrcG9pbnQoKTtcbiAgfVxuXG4gIC8vIFNhdmUgbG9ja3NcbiAgY29uc3Qge1xuICAgIGFsbG93U2xpZGVOZXh0LFxuICAgIGFsbG93U2xpZGVQcmV2LFxuICAgIHNuYXBHcmlkXG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IGlzVmlydHVhbCA9IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkO1xuXG4gIC8vIERpc2FibGUgbG9ja3Mgb24gcmVzaXplXG4gIHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9IHRydWU7XG4gIHN3aXBlci5hbGxvd1NsaWRlUHJldiA9IHRydWU7XG4gIHN3aXBlci51cGRhdGVTaXplKCk7XG4gIHN3aXBlci51cGRhdGVTbGlkZXMoKTtcbiAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgY29uc3QgaXNWaXJ0dWFsTG9vcCA9IGlzVmlydHVhbCAmJiBwYXJhbXMubG9vcDtcbiAgaWYgKChwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nIHx8IHBhcmFtcy5zbGlkZXNQZXJWaWV3ID4gMSkgJiYgc3dpcGVyLmlzRW5kICYmICFzd2lwZXIuaXNCZWdpbm5pbmcgJiYgIXN3aXBlci5wYXJhbXMuY2VudGVyZWRTbGlkZXMgJiYgIWlzVmlydHVhbExvb3ApIHtcbiAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIDEsIDAsIGZhbHNlLCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wICYmICFpc1ZpcnR1YWwpIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvTG9vcChzd2lwZXIucmVhbEluZGV4LCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCwgMCwgZmFsc2UsIHRydWUpO1xuICAgIH1cbiAgfVxuICBpZiAoc3dpcGVyLmF1dG9wbGF5ICYmIHN3aXBlci5hdXRvcGxheS5ydW5uaW5nICYmIHN3aXBlci5hdXRvcGxheS5wYXVzZWQpIHtcbiAgICBjbGVhclRpbWVvdXQoc3dpcGVyLmF1dG9wbGF5LnJlc2l6ZVRpbWVvdXQpO1xuICAgIHN3aXBlci5hdXRvcGxheS5yZXNpemVUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBpZiAoc3dpcGVyLmF1dG9wbGF5ICYmIHN3aXBlci5hdXRvcGxheS5ydW5uaW5nICYmIHN3aXBlci5hdXRvcGxheS5wYXVzZWQpIHtcbiAgICAgICAgc3dpcGVyLmF1dG9wbGF5LnJlc3VtZSgpO1xuICAgICAgfVxuICAgIH0sIDUwMCk7XG4gIH1cbiAgLy8gUmV0dXJuIGxvY2tzIGFmdGVyIHJlc2l6ZVxuICBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPSBhbGxvd1NsaWRlUHJldjtcbiAgc3dpcGVyLmFsbG93U2xpZGVOZXh0ID0gYWxsb3dTbGlkZU5leHQ7XG4gIGlmIChzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc25hcEdyaWQgIT09IHN3aXBlci5zbmFwR3JpZCkge1xuICAgIHN3aXBlci5jaGVja092ZXJmbG93KCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gb25DbGljayhlKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGlmICghc3dpcGVyLmVuYWJsZWQpIHJldHVybjtcbiAgaWYgKCFzd2lwZXIuYWxsb3dDbGljaykge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLnByZXZlbnRDbGlja3MpIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5wcmV2ZW50Q2xpY2tzUHJvcGFnYXRpb24gJiYgc3dpcGVyLmFuaW1hdGluZykge1xuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIG9uU2Nyb2xsKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgd3JhcHBlckVsLFxuICAgIHJ0bFRyYW5zbGF0ZSxcbiAgICBlbmFibGVkXG4gIH0gPSBzd2lwZXI7XG4gIGlmICghZW5hYmxlZCkgcmV0dXJuO1xuICBzd2lwZXIucHJldmlvdXNUcmFuc2xhdGUgPSBzd2lwZXIudHJhbnNsYXRlO1xuICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgc3dpcGVyLnRyYW5zbGF0ZSA9IC13cmFwcGVyRWwuc2Nyb2xsTGVmdDtcbiAgfSBlbHNlIHtcbiAgICBzd2lwZXIudHJhbnNsYXRlID0gLXdyYXBwZXJFbC5zY3JvbGxUb3A7XG4gIH1cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gIGlmIChzd2lwZXIudHJhbnNsYXRlID09PSAwKSBzd2lwZXIudHJhbnNsYXRlID0gMDtcbiAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gIGxldCBuZXdQcm9ncmVzcztcbiAgY29uc3QgdHJhbnNsYXRlc0RpZmYgPSBzd2lwZXIubWF4VHJhbnNsYXRlKCkgLSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG4gIGlmICh0cmFuc2xhdGVzRGlmZiA9PT0gMCkge1xuICAgIG5ld1Byb2dyZXNzID0gMDtcbiAgfSBlbHNlIHtcbiAgICBuZXdQcm9ncmVzcyA9IChzd2lwZXIudHJhbnNsYXRlIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSAvIHRyYW5zbGF0ZXNEaWZmO1xuICB9XG4gIGlmIChuZXdQcm9ncmVzcyAhPT0gc3dpcGVyLnByb2dyZXNzKSB7XG4gICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKHJ0bFRyYW5zbGF0ZSA/IC1zd2lwZXIudHJhbnNsYXRlIDogc3dpcGVyLnRyYW5zbGF0ZSk7XG4gIH1cbiAgc3dpcGVyLmVtaXQoJ3NldFRyYW5zbGF0ZScsIHN3aXBlci50cmFuc2xhdGUsIGZhbHNlKTtcbn1cblxuZnVuY3Rpb24gb25Mb2FkKGUpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgcHJvY2Vzc0xhenlQcmVsb2FkZXIoc3dpcGVyLCBlLnRhcmdldCk7XG4gIGlmIChzd2lwZXIucGFyYW1zLmNzc01vZGUgfHwgc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ICE9PSAnYXV0bycgJiYgIXN3aXBlci5wYXJhbXMuYXV0b0hlaWdodCkge1xuICAgIHJldHVybjtcbiAgfVxuICBzd2lwZXIudXBkYXRlKCk7XG59XG5cbmZ1bmN0aW9uIG9uRG9jdW1lbnRUb3VjaFN0YXJ0KCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBpZiAoc3dpcGVyLmRvY3VtZW50VG91Y2hIYW5kbGVyUHJvY2VlZGVkKSByZXR1cm47XG4gIHN3aXBlci5kb2N1bWVudFRvdWNoSGFuZGxlclByb2NlZWRlZCA9IHRydWU7XG4gIGlmIChzd2lwZXIucGFyYW1zLnRvdWNoUmVsZWFzZU9uRWRnZXMpIHtcbiAgICBzd2lwZXIuZWwuc3R5bGUudG91Y2hBY3Rpb24gPSAnYXV0byc7XG4gIH1cbn1cblxuY29uc3QgZXZlbnRzID0gKHN3aXBlciwgbWV0aG9kKSA9PiB7XG4gIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICBlbCxcbiAgICB3cmFwcGVyRWwsXG4gICAgZGV2aWNlXG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IGNhcHR1cmUgPSAhIXBhcmFtcy5uZXN0ZWQ7XG4gIGNvbnN0IGRvbU1ldGhvZCA9IG1ldGhvZCA9PT0gJ29uJyA/ICdhZGRFdmVudExpc3RlbmVyJyA6ICdyZW1vdmVFdmVudExpc3RlbmVyJztcbiAgY29uc3Qgc3dpcGVyTWV0aG9kID0gbWV0aG9kO1xuICBpZiAoIWVsIHx8IHR5cGVvZiBlbCA9PT0gJ3N0cmluZycpIHJldHVybjtcblxuICAvLyBUb3VjaCBFdmVudHNcbiAgZG9jdW1lbnRbZG9tTWV0aG9kXSgndG91Y2hzdGFydCcsIHN3aXBlci5vbkRvY3VtZW50VG91Y2hTdGFydCwge1xuICAgIHBhc3NpdmU6IGZhbHNlLFxuICAgIGNhcHR1cmVcbiAgfSk7XG4gIGVsW2RvbU1ldGhvZF0oJ3RvdWNoc3RhcnQnLCBzd2lwZXIub25Ub3VjaFN0YXJ0LCB7XG4gICAgcGFzc2l2ZTogZmFsc2VcbiAgfSk7XG4gIGVsW2RvbU1ldGhvZF0oJ3BvaW50ZXJkb3duJywgc3dpcGVyLm9uVG91Y2hTdGFydCwge1xuICAgIHBhc3NpdmU6IGZhbHNlXG4gIH0pO1xuICBkb2N1bWVudFtkb21NZXRob2RdKCd0b3VjaG1vdmUnLCBzd2lwZXIub25Ub3VjaE1vdmUsIHtcbiAgICBwYXNzaXZlOiBmYWxzZSxcbiAgICBjYXB0dXJlXG4gIH0pO1xuICBkb2N1bWVudFtkb21NZXRob2RdKCdwb2ludGVybW92ZScsIHN3aXBlci5vblRvdWNoTW92ZSwge1xuICAgIHBhc3NpdmU6IGZhbHNlLFxuICAgIGNhcHR1cmVcbiAgfSk7XG4gIGRvY3VtZW50W2RvbU1ldGhvZF0oJ3RvdWNoZW5kJywgc3dpcGVyLm9uVG91Y2hFbmQsIHtcbiAgICBwYXNzaXZlOiB0cnVlXG4gIH0pO1xuICBkb2N1bWVudFtkb21NZXRob2RdKCdwb2ludGVydXAnLCBzd2lwZXIub25Ub3VjaEVuZCwge1xuICAgIHBhc3NpdmU6IHRydWVcbiAgfSk7XG4gIGRvY3VtZW50W2RvbU1ldGhvZF0oJ3BvaW50ZXJjYW5jZWwnLCBzd2lwZXIub25Ub3VjaEVuZCwge1xuICAgIHBhc3NpdmU6IHRydWVcbiAgfSk7XG4gIGRvY3VtZW50W2RvbU1ldGhvZF0oJ3RvdWNoY2FuY2VsJywgc3dpcGVyLm9uVG91Y2hFbmQsIHtcbiAgICBwYXNzaXZlOiB0cnVlXG4gIH0pO1xuICBkb2N1bWVudFtkb21NZXRob2RdKCdwb2ludGVyb3V0Jywgc3dpcGVyLm9uVG91Y2hFbmQsIHtcbiAgICBwYXNzaXZlOiB0cnVlXG4gIH0pO1xuICBkb2N1bWVudFtkb21NZXRob2RdKCdwb2ludGVybGVhdmUnLCBzd2lwZXIub25Ub3VjaEVuZCwge1xuICAgIHBhc3NpdmU6IHRydWVcbiAgfSk7XG4gIGRvY3VtZW50W2RvbU1ldGhvZF0oJ2NvbnRleHRtZW51Jywgc3dpcGVyLm9uVG91Y2hFbmQsIHtcbiAgICBwYXNzaXZlOiB0cnVlXG4gIH0pO1xuXG4gIC8vIFByZXZlbnQgTGlua3MgQ2xpY2tzXG4gIGlmIChwYXJhbXMucHJldmVudENsaWNrcyB8fCBwYXJhbXMucHJldmVudENsaWNrc1Byb3BhZ2F0aW9uKSB7XG4gICAgZWxbZG9tTWV0aG9kXSgnY2xpY2snLCBzd2lwZXIub25DbGljaywgdHJ1ZSk7XG4gIH1cbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgd3JhcHBlckVsW2RvbU1ldGhvZF0oJ3Njcm9sbCcsIHN3aXBlci5vblNjcm9sbCk7XG4gIH1cblxuICAvLyBSZXNpemUgaGFuZGxlclxuICBpZiAocGFyYW1zLnVwZGF0ZU9uV2luZG93UmVzaXplKSB7XG4gICAgc3dpcGVyW3N3aXBlck1ldGhvZF0oZGV2aWNlLmlvcyB8fCBkZXZpY2UuYW5kcm9pZCA/ICdyZXNpemUgb3JpZW50YXRpb25jaGFuZ2Ugb2JzZXJ2ZXJVcGRhdGUnIDogJ3Jlc2l6ZSBvYnNlcnZlclVwZGF0ZScsIG9uUmVzaXplLCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBzd2lwZXJbc3dpcGVyTWV0aG9kXSgnb2JzZXJ2ZXJVcGRhdGUnLCBvblJlc2l6ZSwgdHJ1ZSk7XG4gIH1cblxuICAvLyBJbWFnZXMgbG9hZGVyXG4gIGVsW2RvbU1ldGhvZF0oJ2xvYWQnLCBzd2lwZXIub25Mb2FkLCB7XG4gICAgY2FwdHVyZTogdHJ1ZVxuICB9KTtcbn07XG5mdW5jdGlvbiBhdHRhY2hFdmVudHMoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXNcbiAgfSA9IHN3aXBlcjtcbiAgc3dpcGVyLm9uVG91Y2hTdGFydCA9IG9uVG91Y2hTdGFydC5iaW5kKHN3aXBlcik7XG4gIHN3aXBlci5vblRvdWNoTW92ZSA9IG9uVG91Y2hNb3ZlLmJpbmQoc3dpcGVyKTtcbiAgc3dpcGVyLm9uVG91Y2hFbmQgPSBvblRvdWNoRW5kLmJpbmQoc3dpcGVyKTtcbiAgc3dpcGVyLm9uRG9jdW1lbnRUb3VjaFN0YXJ0ID0gb25Eb2N1bWVudFRvdWNoU3RhcnQuYmluZChzd2lwZXIpO1xuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICBzd2lwZXIub25TY3JvbGwgPSBvblNjcm9sbC5iaW5kKHN3aXBlcik7XG4gIH1cbiAgc3dpcGVyLm9uQ2xpY2sgPSBvbkNsaWNrLmJpbmQoc3dpcGVyKTtcbiAgc3dpcGVyLm9uTG9hZCA9IG9uTG9hZC5iaW5kKHN3aXBlcik7XG4gIGV2ZW50cyhzd2lwZXIsICdvbicpO1xufVxuZnVuY3Rpb24gZGV0YWNoRXZlbnRzKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBldmVudHMoc3dpcGVyLCAnb2ZmJyk7XG59XG52YXIgZXZlbnRzJDEgPSB7XG4gIGF0dGFjaEV2ZW50cyxcbiAgZGV0YWNoRXZlbnRzXG59O1xuXG5jb25zdCBpc0dyaWRFbmFibGVkID0gKHN3aXBlciwgcGFyYW1zKSA9PiB7XG4gIHJldHVybiBzd2lwZXIuZ3JpZCAmJiBwYXJhbXMuZ3JpZCAmJiBwYXJhbXMuZ3JpZC5yb3dzID4gMTtcbn07XG5mdW5jdGlvbiBzZXRCcmVha3BvaW50KCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcmVhbEluZGV4LFxuICAgIGluaXRpYWxpemVkLFxuICAgIHBhcmFtcyxcbiAgICBlbFxuICB9ID0gc3dpcGVyO1xuICBjb25zdCBicmVha3BvaW50cyA9IHBhcmFtcy5icmVha3BvaW50cztcbiAgaWYgKCFicmVha3BvaW50cyB8fCBicmVha3BvaW50cyAmJiBPYmplY3Qua2V5cyhicmVha3BvaW50cykubGVuZ3RoID09PSAwKSByZXR1cm47XG5cbiAgLy8gR2V0IGJyZWFrcG9pbnQgZm9yIHdpbmRvdyB3aWR0aCBhbmQgdXBkYXRlIHBhcmFtZXRlcnNcbiAgY29uc3QgYnJlYWtwb2ludCA9IHN3aXBlci5nZXRCcmVha3BvaW50KGJyZWFrcG9pbnRzLCBzd2lwZXIucGFyYW1zLmJyZWFrcG9pbnRzQmFzZSwgc3dpcGVyLmVsKTtcbiAgaWYgKCFicmVha3BvaW50IHx8IHN3aXBlci5jdXJyZW50QnJlYWtwb2ludCA9PT0gYnJlYWtwb2ludCkgcmV0dXJuO1xuICBjb25zdCBicmVha3BvaW50T25seVBhcmFtcyA9IGJyZWFrcG9pbnQgaW4gYnJlYWtwb2ludHMgPyBicmVha3BvaW50c1ticmVha3BvaW50XSA6IHVuZGVmaW5lZDtcbiAgY29uc3QgYnJlYWtwb2ludFBhcmFtcyA9IGJyZWFrcG9pbnRPbmx5UGFyYW1zIHx8IHN3aXBlci5vcmlnaW5hbFBhcmFtcztcbiAgY29uc3Qgd2FzTXVsdGlSb3cgPSBpc0dyaWRFbmFibGVkKHN3aXBlciwgcGFyYW1zKTtcbiAgY29uc3QgaXNNdWx0aVJvdyA9IGlzR3JpZEVuYWJsZWQoc3dpcGVyLCBicmVha3BvaW50UGFyYW1zKTtcbiAgY29uc3Qgd2FzR3JhYkN1cnNvciA9IHN3aXBlci5wYXJhbXMuZ3JhYkN1cnNvcjtcbiAgY29uc3QgaXNHcmFiQ3Vyc29yID0gYnJlYWtwb2ludFBhcmFtcy5ncmFiQ3Vyc29yO1xuICBjb25zdCB3YXNFbmFibGVkID0gcGFyYW1zLmVuYWJsZWQ7XG4gIGlmICh3YXNNdWx0aVJvdyAmJiAhaXNNdWx0aVJvdykge1xuICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoYCR7cGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9Z3JpZGAsIGAke3BhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfWdyaWQtY29sdW1uYCk7XG4gICAgc3dpcGVyLmVtaXRDb250YWluZXJDbGFzc2VzKCk7XG4gIH0gZWxzZSBpZiAoIXdhc011bHRpUm93ICYmIGlzTXVsdGlSb3cpIHtcbiAgICBlbC5jbGFzc0xpc3QuYWRkKGAke3BhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfWdyaWRgKTtcbiAgICBpZiAoYnJlYWtwb2ludFBhcmFtcy5ncmlkLmZpbGwgJiYgYnJlYWtwb2ludFBhcmFtcy5ncmlkLmZpbGwgPT09ICdjb2x1bW4nIHx8ICFicmVha3BvaW50UGFyYW1zLmdyaWQuZmlsbCAmJiBwYXJhbXMuZ3JpZC5maWxsID09PSAnY29sdW1uJykge1xuICAgICAgZWwuY2xhc3NMaXN0LmFkZChgJHtwYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc31ncmlkLWNvbHVtbmApO1xuICAgIH1cbiAgICBzd2lwZXIuZW1pdENvbnRhaW5lckNsYXNzZXMoKTtcbiAgfVxuICBpZiAod2FzR3JhYkN1cnNvciAmJiAhaXNHcmFiQ3Vyc29yKSB7XG4gICAgc3dpcGVyLnVuc2V0R3JhYkN1cnNvcigpO1xuICB9IGVsc2UgaWYgKCF3YXNHcmFiQ3Vyc29yICYmIGlzR3JhYkN1cnNvcikge1xuICAgIHN3aXBlci5zZXRHcmFiQ3Vyc29yKCk7XG4gIH1cblxuICAvLyBUb2dnbGUgbmF2aWdhdGlvbiwgcGFnaW5hdGlvbiwgc2Nyb2xsYmFyXG4gIFsnbmF2aWdhdGlvbicsICdwYWdpbmF0aW9uJywgJ3Njcm9sbGJhciddLmZvckVhY2gocHJvcCA9PiB7XG4gICAgaWYgKHR5cGVvZiBicmVha3BvaW50UGFyYW1zW3Byb3BdID09PSAndW5kZWZpbmVkJykgcmV0dXJuO1xuICAgIGNvbnN0IHdhc01vZHVsZUVuYWJsZWQgPSBwYXJhbXNbcHJvcF0gJiYgcGFyYW1zW3Byb3BdLmVuYWJsZWQ7XG4gICAgY29uc3QgaXNNb2R1bGVFbmFibGVkID0gYnJlYWtwb2ludFBhcmFtc1twcm9wXSAmJiBicmVha3BvaW50UGFyYW1zW3Byb3BdLmVuYWJsZWQ7XG4gICAgaWYgKHdhc01vZHVsZUVuYWJsZWQgJiYgIWlzTW9kdWxlRW5hYmxlZCkge1xuICAgICAgc3dpcGVyW3Byb3BdLmRpc2FibGUoKTtcbiAgICB9XG4gICAgaWYgKCF3YXNNb2R1bGVFbmFibGVkICYmIGlzTW9kdWxlRW5hYmxlZCkge1xuICAgICAgc3dpcGVyW3Byb3BdLmVuYWJsZSgpO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGRpcmVjdGlvbkNoYW5nZWQgPSBicmVha3BvaW50UGFyYW1zLmRpcmVjdGlvbiAmJiBicmVha3BvaW50UGFyYW1zLmRpcmVjdGlvbiAhPT0gcGFyYW1zLmRpcmVjdGlvbjtcbiAgY29uc3QgbmVlZHNSZUxvb3AgPSBwYXJhbXMubG9vcCAmJiAoYnJlYWtwb2ludFBhcmFtcy5zbGlkZXNQZXJWaWV3ICE9PSBwYXJhbXMuc2xpZGVzUGVyVmlldyB8fCBkaXJlY3Rpb25DaGFuZ2VkKTtcbiAgY29uc3Qgd2FzTG9vcCA9IHBhcmFtcy5sb29wO1xuICBpZiAoZGlyZWN0aW9uQ2hhbmdlZCAmJiBpbml0aWFsaXplZCkge1xuICAgIHN3aXBlci5jaGFuZ2VEaXJlY3Rpb24oKTtcbiAgfVxuICBleHRlbmQoc3dpcGVyLnBhcmFtcywgYnJlYWtwb2ludFBhcmFtcyk7XG4gIGNvbnN0IGlzRW5hYmxlZCA9IHN3aXBlci5wYXJhbXMuZW5hYmxlZDtcbiAgY29uc3QgaGFzTG9vcCA9IHN3aXBlci5wYXJhbXMubG9vcDtcbiAgT2JqZWN0LmFzc2lnbihzd2lwZXIsIHtcbiAgICBhbGxvd1RvdWNoTW92ZTogc3dpcGVyLnBhcmFtcy5hbGxvd1RvdWNoTW92ZSxcbiAgICBhbGxvd1NsaWRlTmV4dDogc3dpcGVyLnBhcmFtcy5hbGxvd1NsaWRlTmV4dCxcbiAgICBhbGxvd1NsaWRlUHJldjogc3dpcGVyLnBhcmFtcy5hbGxvd1NsaWRlUHJldlxuICB9KTtcbiAgaWYgKHdhc0VuYWJsZWQgJiYgIWlzRW5hYmxlZCkge1xuICAgIHN3aXBlci5kaXNhYmxlKCk7XG4gIH0gZWxzZSBpZiAoIXdhc0VuYWJsZWQgJiYgaXNFbmFibGVkKSB7XG4gICAgc3dpcGVyLmVuYWJsZSgpO1xuICB9XG4gIHN3aXBlci5jdXJyZW50QnJlYWtwb2ludCA9IGJyZWFrcG9pbnQ7XG4gIHN3aXBlci5lbWl0KCdfYmVmb3JlQnJlYWtwb2ludCcsIGJyZWFrcG9pbnRQYXJhbXMpO1xuICBpZiAoaW5pdGlhbGl6ZWQpIHtcbiAgICBpZiAobmVlZHNSZUxvb3ApIHtcbiAgICAgIHN3aXBlci5sb29wRGVzdHJveSgpO1xuICAgICAgc3dpcGVyLmxvb3BDcmVhdGUocmVhbEluZGV4KTtcbiAgICAgIHN3aXBlci51cGRhdGVTbGlkZXMoKTtcbiAgICB9IGVsc2UgaWYgKCF3YXNMb29wICYmIGhhc0xvb3ApIHtcbiAgICAgIHN3aXBlci5sb29wQ3JlYXRlKHJlYWxJbmRleCk7XG4gICAgICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG4gICAgfSBlbHNlIGlmICh3YXNMb29wICYmICFoYXNMb29wKSB7XG4gICAgICBzd2lwZXIubG9vcERlc3Ryb3koKTtcbiAgICB9XG4gIH1cbiAgc3dpcGVyLmVtaXQoJ2JyZWFrcG9pbnQnLCBicmVha3BvaW50UGFyYW1zKTtcbn1cblxuZnVuY3Rpb24gZ2V0QnJlYWtwb2ludChicmVha3BvaW50cywgYmFzZSwgY29udGFpbmVyRWwpIHtcbiAgaWYgKGJhc2UgPT09IHZvaWQgMCkge1xuICAgIGJhc2UgPSAnd2luZG93JztcbiAgfVxuICBpZiAoIWJyZWFrcG9pbnRzIHx8IGJhc2UgPT09ICdjb250YWluZXInICYmICFjb250YWluZXJFbCkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgbGV0IGJyZWFrcG9pbnQgPSBmYWxzZTtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGNvbnN0IGN1cnJlbnRIZWlnaHQgPSBiYXNlID09PSAnd2luZG93JyA/IHdpbmRvdy5pbm5lckhlaWdodCA6IGNvbnRhaW5lckVsLmNsaWVudEhlaWdodDtcbiAgY29uc3QgcG9pbnRzID0gT2JqZWN0LmtleXMoYnJlYWtwb2ludHMpLm1hcChwb2ludCA9PiB7XG4gICAgaWYgKHR5cGVvZiBwb2ludCA9PT0gJ3N0cmluZycgJiYgcG9pbnQuaW5kZXhPZignQCcpID09PSAwKSB7XG4gICAgICBjb25zdCBtaW5SYXRpbyA9IHBhcnNlRmxvYXQocG9pbnQuc3Vic3RyKDEpKTtcbiAgICAgIGNvbnN0IHZhbHVlID0gY3VycmVudEhlaWdodCAqIG1pblJhdGlvO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIHBvaW50XG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWU6IHBvaW50LFxuICAgICAgcG9pbnRcbiAgICB9O1xuICB9KTtcbiAgcG9pbnRzLnNvcnQoKGEsIGIpID0+IHBhcnNlSW50KGEudmFsdWUsIDEwKSAtIHBhcnNlSW50KGIudmFsdWUsIDEwKSk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgY29uc3Qge1xuICAgICAgcG9pbnQsXG4gICAgICB2YWx1ZVxuICAgIH0gPSBwb2ludHNbaV07XG4gICAgaWYgKGJhc2UgPT09ICd3aW5kb3cnKSB7XG4gICAgICBpZiAod2luZG93Lm1hdGNoTWVkaWEoYChtaW4td2lkdGg6ICR7dmFsdWV9cHgpYCkubWF0Y2hlcykge1xuICAgICAgICBicmVha3BvaW50ID0gcG9pbnQ7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh2YWx1ZSA8PSBjb250YWluZXJFbC5jbGllbnRXaWR0aCkge1xuICAgICAgYnJlYWtwb2ludCA9IHBvaW50O1xuICAgIH1cbiAgfVxuICByZXR1cm4gYnJlYWtwb2ludCB8fCAnbWF4Jztcbn1cblxudmFyIGJyZWFrcG9pbnRzID0ge1xuICBzZXRCcmVha3BvaW50LFxuICBnZXRCcmVha3BvaW50XG59O1xuXG5mdW5jdGlvbiBwcmVwYXJlQ2xhc3NlcyhlbnRyaWVzLCBwcmVmaXgpIHtcbiAgY29uc3QgcmVzdWx0Q2xhc3NlcyA9IFtdO1xuICBlbnRyaWVzLmZvckVhY2goaXRlbSA9PiB7XG4gICAgaWYgKHR5cGVvZiBpdGVtID09PSAnb2JqZWN0Jykge1xuICAgICAgT2JqZWN0LmtleXMoaXRlbSkuZm9yRWFjaChjbGFzc05hbWVzID0+IHtcbiAgICAgICAgaWYgKGl0ZW1bY2xhc3NOYW1lc10pIHtcbiAgICAgICAgICByZXN1bHRDbGFzc2VzLnB1c2gocHJlZml4ICsgY2xhc3NOYW1lcyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGl0ZW0gPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXN1bHRDbGFzc2VzLnB1c2gocHJlZml4ICsgaXRlbSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc3VsdENsYXNzZXM7XG59XG5mdW5jdGlvbiBhZGRDbGFzc2VzKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgY2xhc3NOYW1lcyxcbiAgICBwYXJhbXMsXG4gICAgcnRsLFxuICAgIGVsLFxuICAgIGRldmljZVxuICB9ID0gc3dpcGVyO1xuICAvLyBwcmV0dGllci1pZ25vcmVcbiAgY29uc3Qgc3VmZml4ZXMgPSBwcmVwYXJlQ2xhc3NlcyhbJ2luaXRpYWxpemVkJywgcGFyYW1zLmRpcmVjdGlvbiwge1xuICAgICdmcmVlLW1vZGUnOiBzd2lwZXIucGFyYW1zLmZyZWVNb2RlICYmIHBhcmFtcy5mcmVlTW9kZS5lbmFibGVkXG4gIH0sIHtcbiAgICAnYXV0b2hlaWdodCc6IHBhcmFtcy5hdXRvSGVpZ2h0XG4gIH0sIHtcbiAgICAncnRsJzogcnRsXG4gIH0sIHtcbiAgICAnZ3JpZCc6IHBhcmFtcy5ncmlkICYmIHBhcmFtcy5ncmlkLnJvd3MgPiAxXG4gIH0sIHtcbiAgICAnZ3JpZC1jb2x1bW4nOiBwYXJhbXMuZ3JpZCAmJiBwYXJhbXMuZ3JpZC5yb3dzID4gMSAmJiBwYXJhbXMuZ3JpZC5maWxsID09PSAnY29sdW1uJ1xuICB9LCB7XG4gICAgJ2FuZHJvaWQnOiBkZXZpY2UuYW5kcm9pZFxuICB9LCB7XG4gICAgJ2lvcyc6IGRldmljZS5pb3NcbiAgfSwge1xuICAgICdjc3MtbW9kZSc6IHBhcmFtcy5jc3NNb2RlXG4gIH0sIHtcbiAgICAnY2VudGVyZWQnOiBwYXJhbXMuY3NzTW9kZSAmJiBwYXJhbXMuY2VudGVyZWRTbGlkZXNcbiAgfSwge1xuICAgICd3YXRjaC1wcm9ncmVzcyc6IHBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzXG4gIH1dLCBwYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcyk7XG4gIGNsYXNzTmFtZXMucHVzaCguLi5zdWZmaXhlcyk7XG4gIGVsLmNsYXNzTGlzdC5hZGQoLi4uY2xhc3NOYW1lcyk7XG4gIHN3aXBlci5lbWl0Q29udGFpbmVyQ2xhc3NlcygpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVDbGFzc2VzKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgZWwsXG4gICAgY2xhc3NOYW1lc1xuICB9ID0gc3dpcGVyO1xuICBpZiAoIWVsIHx8IHR5cGVvZiBlbCA9PT0gJ3N0cmluZycpIHJldHVybjtcbiAgZWwuY2xhc3NMaXN0LnJlbW92ZSguLi5jbGFzc05hbWVzKTtcbiAgc3dpcGVyLmVtaXRDb250YWluZXJDbGFzc2VzKCk7XG59XG5cbnZhciBjbGFzc2VzID0ge1xuICBhZGRDbGFzc2VzLFxuICByZW1vdmVDbGFzc2VzXG59O1xuXG5mdW5jdGlvbiBjaGVja092ZXJmbG93KCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgaXNMb2NrZWQ6IHdhc0xvY2tlZCxcbiAgICBwYXJhbXNcbiAgfSA9IHN3aXBlcjtcbiAgY29uc3Qge1xuICAgIHNsaWRlc09mZnNldEJlZm9yZVxuICB9ID0gcGFyYW1zO1xuICBpZiAoc2xpZGVzT2Zmc2V0QmVmb3JlKSB7XG4gICAgY29uc3QgbGFzdFNsaWRlSW5kZXggPSBzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIDE7XG4gICAgY29uc3QgbGFzdFNsaWRlUmlnaHRFZGdlID0gc3dpcGVyLnNsaWRlc0dyaWRbbGFzdFNsaWRlSW5kZXhdICsgc3dpcGVyLnNsaWRlc1NpemVzR3JpZFtsYXN0U2xpZGVJbmRleF0gKyBzbGlkZXNPZmZzZXRCZWZvcmUgKiAyO1xuICAgIHN3aXBlci5pc0xvY2tlZCA9IHN3aXBlci5zaXplID4gbGFzdFNsaWRlUmlnaHRFZGdlO1xuICB9IGVsc2Uge1xuICAgIHN3aXBlci5pc0xvY2tlZCA9IHN3aXBlci5zbmFwR3JpZC5sZW5ndGggPT09IDE7XG4gIH1cbiAgaWYgKHBhcmFtcy5hbGxvd1NsaWRlTmV4dCA9PT0gdHJ1ZSkge1xuICAgIHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9ICFzd2lwZXIuaXNMb2NrZWQ7XG4gIH1cbiAgaWYgKHBhcmFtcy5hbGxvd1NsaWRlUHJldiA9PT0gdHJ1ZSkge1xuICAgIHN3aXBlci5hbGxvd1NsaWRlUHJldiA9ICFzd2lwZXIuaXNMb2NrZWQ7XG4gIH1cbiAgaWYgKHdhc0xvY2tlZCAmJiB3YXNMb2NrZWQgIT09IHN3aXBlci5pc0xvY2tlZCkge1xuICAgIHN3aXBlci5pc0VuZCA9IGZhbHNlO1xuICB9XG4gIGlmICh3YXNMb2NrZWQgIT09IHN3aXBlci5pc0xvY2tlZCkge1xuICAgIHN3aXBlci5lbWl0KHN3aXBlci5pc0xvY2tlZCA/ICdsb2NrJyA6ICd1bmxvY2snKTtcbiAgfVxufVxudmFyIGNoZWNrT3ZlcmZsb3ckMSA9IHtcbiAgY2hlY2tPdmVyZmxvd1xufTtcblxudmFyIGRlZmF1bHRzID0ge1xuICBpbml0OiB0cnVlLFxuICBkaXJlY3Rpb246ICdob3Jpem9udGFsJyxcbiAgb25lV2F5TW92ZW1lbnQ6IGZhbHNlLFxuICBzd2lwZXJFbGVtZW50Tm9kZU5hbWU6ICdTV0lQRVItQ09OVEFJTkVSJyxcbiAgdG91Y2hFdmVudHNUYXJnZXQ6ICd3cmFwcGVyJyxcbiAgaW5pdGlhbFNsaWRlOiAwLFxuICBzcGVlZDogMzAwLFxuICBjc3NNb2RlOiBmYWxzZSxcbiAgdXBkYXRlT25XaW5kb3dSZXNpemU6IHRydWUsXG4gIHJlc2l6ZU9ic2VydmVyOiB0cnVlLFxuICBuZXN0ZWQ6IGZhbHNlLFxuICBjcmVhdGVFbGVtZW50czogZmFsc2UsXG4gIGV2ZW50c1ByZWZpeDogJ3N3aXBlcicsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIGZvY3VzYWJsZUVsZW1lbnRzOiAnaW5wdXQsIHNlbGVjdCwgb3B0aW9uLCB0ZXh0YXJlYSwgYnV0dG9uLCB2aWRlbywgbGFiZWwnLFxuICAvLyBPdmVycmlkZXNcbiAgd2lkdGg6IG51bGwsXG4gIGhlaWdodDogbnVsbCxcbiAgLy9cbiAgcHJldmVudEludGVyYWN0aW9uT25UcmFuc2l0aW9uOiBmYWxzZSxcbiAgLy8gc3NyXG4gIHVzZXJBZ2VudDogbnVsbCxcbiAgdXJsOiBudWxsLFxuICAvLyBUbyBzdXBwb3J0IGlPUydzIHN3aXBlLXRvLWdvLWJhY2sgZ2VzdHVyZSAod2hlbiBiZWluZyB1c2VkIGluLWFwcCkuXG4gIGVkZ2VTd2lwZURldGVjdGlvbjogZmFsc2UsXG4gIGVkZ2VTd2lwZVRocmVzaG9sZDogMjAsXG4gIC8vIEF1dG9oZWlnaHRcbiAgYXV0b0hlaWdodDogZmFsc2UsXG4gIC8vIFNldCB3cmFwcGVyIHdpZHRoXG4gIHNldFdyYXBwZXJTaXplOiBmYWxzZSxcbiAgLy8gVmlydHVhbCBUcmFuc2xhdGVcbiAgdmlydHVhbFRyYW5zbGF0ZTogZmFsc2UsXG4gIC8vIEVmZmVjdHNcbiAgZWZmZWN0OiAnc2xpZGUnLFxuICAvLyAnc2xpZGUnIG9yICdmYWRlJyBvciAnY3ViZScgb3IgJ2NvdmVyZmxvdycgb3IgJ2ZsaXAnXG5cbiAgLy8gQnJlYWtwb2ludHNcbiAgYnJlYWtwb2ludHM6IHVuZGVmaW5lZCxcbiAgYnJlYWtwb2ludHNCYXNlOiAnd2luZG93JyxcbiAgLy8gU2xpZGVzIGdyaWRcbiAgc3BhY2VCZXR3ZWVuOiAwLFxuICBzbGlkZXNQZXJWaWV3OiAxLFxuICBzbGlkZXNQZXJHcm91cDogMSxcbiAgc2xpZGVzUGVyR3JvdXBTa2lwOiAwLFxuICBzbGlkZXNQZXJHcm91cEF1dG86IGZhbHNlLFxuICBjZW50ZXJlZFNsaWRlczogZmFsc2UsXG4gIGNlbnRlcmVkU2xpZGVzQm91bmRzOiBmYWxzZSxcbiAgc2xpZGVzT2Zmc2V0QmVmb3JlOiAwLFxuICAvLyBpbiBweFxuICBzbGlkZXNPZmZzZXRBZnRlcjogMCxcbiAgLy8gaW4gcHhcbiAgbm9ybWFsaXplU2xpZGVJbmRleDogdHJ1ZSxcbiAgY2VudGVySW5zdWZmaWNpZW50U2xpZGVzOiBmYWxzZSxcbiAgLy8gRGlzYWJsZSBzd2lwZXIgYW5kIGhpZGUgbmF2aWdhdGlvbiB3aGVuIGNvbnRhaW5lciBub3Qgb3ZlcmZsb3dcbiAgd2F0Y2hPdmVyZmxvdzogdHJ1ZSxcbiAgLy8gUm91bmQgbGVuZ3RoXG4gIHJvdW5kTGVuZ3RoczogZmFsc2UsXG4gIC8vIFRvdWNoZXNcbiAgdG91Y2hSYXRpbzogMSxcbiAgdG91Y2hBbmdsZTogNDUsXG4gIHNpbXVsYXRlVG91Y2g6IHRydWUsXG4gIHNob3J0U3dpcGVzOiB0cnVlLFxuICBsb25nU3dpcGVzOiB0cnVlLFxuICBsb25nU3dpcGVzUmF0aW86IDAuNSxcbiAgbG9uZ1N3aXBlc01zOiAzMDAsXG4gIGZvbGxvd0ZpbmdlcjogdHJ1ZSxcbiAgYWxsb3dUb3VjaE1vdmU6IHRydWUsXG4gIHRocmVzaG9sZDogNSxcbiAgdG91Y2hNb3ZlU3RvcFByb3BhZ2F0aW9uOiBmYWxzZSxcbiAgdG91Y2hTdGFydFByZXZlbnREZWZhdWx0OiB0cnVlLFxuICB0b3VjaFN0YXJ0Rm9yY2VQcmV2ZW50RGVmYXVsdDogZmFsc2UsXG4gIHRvdWNoUmVsZWFzZU9uRWRnZXM6IGZhbHNlLFxuICAvLyBVbmlxdWUgTmF2aWdhdGlvbiBFbGVtZW50c1xuICB1bmlxdWVOYXZFbGVtZW50czogdHJ1ZSxcbiAgLy8gUmVzaXN0YW5jZVxuICByZXNpc3RhbmNlOiB0cnVlLFxuICByZXNpc3RhbmNlUmF0aW86IDAuODUsXG4gIC8vIFByb2dyZXNzXG4gIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IGZhbHNlLFxuICAvLyBDdXJzb3JcbiAgZ3JhYkN1cnNvcjogZmFsc2UsXG4gIC8vIENsaWNrc1xuICBwcmV2ZW50Q2xpY2tzOiB0cnVlLFxuICBwcmV2ZW50Q2xpY2tzUHJvcGFnYXRpb246IHRydWUsXG4gIHNsaWRlVG9DbGlja2VkU2xpZGU6IGZhbHNlLFxuICAvLyBsb29wXG4gIGxvb3A6IGZhbHNlLFxuICBsb29wQWRkQmxhbmtTbGlkZXM6IHRydWUsXG4gIGxvb3BBZGRpdGlvbmFsU2xpZGVzOiAwLFxuICBsb29wUHJldmVudHNTbGlkaW5nOiB0cnVlLFxuICAvLyByZXdpbmRcbiAgcmV3aW5kOiBmYWxzZSxcbiAgLy8gU3dpcGluZy9ubyBzd2lwaW5nXG4gIGFsbG93U2xpZGVQcmV2OiB0cnVlLFxuICBhbGxvd1NsaWRlTmV4dDogdHJ1ZSxcbiAgc3dpcGVIYW5kbGVyOiBudWxsLFxuICAvLyAnLnN3aXBlLWhhbmRsZXInLFxuICBub1N3aXBpbmc6IHRydWUsXG4gIG5vU3dpcGluZ0NsYXNzOiAnc3dpcGVyLW5vLXN3aXBpbmcnLFxuICBub1N3aXBpbmdTZWxlY3RvcjogbnVsbCxcbiAgLy8gUGFzc2l2ZSBMaXN0ZW5lcnNcbiAgcGFzc2l2ZUxpc3RlbmVyczogdHJ1ZSxcbiAgbWF4QmFja2ZhY2VIaWRkZW5TbGlkZXM6IDEwLFxuICAvLyBOU1xuICBjb250YWluZXJNb2RpZmllckNsYXNzOiAnc3dpcGVyLScsXG4gIC8vIE5FV1xuICBzbGlkZUNsYXNzOiAnc3dpcGVyLXNsaWRlJyxcbiAgc2xpZGVCbGFua0NsYXNzOiAnc3dpcGVyLXNsaWRlLWJsYW5rJyxcbiAgc2xpZGVBY3RpdmVDbGFzczogJ3N3aXBlci1zbGlkZS1hY3RpdmUnLFxuICBzbGlkZVZpc2libGVDbGFzczogJ3N3aXBlci1zbGlkZS12aXNpYmxlJyxcbiAgc2xpZGVGdWxseVZpc2libGVDbGFzczogJ3N3aXBlci1zbGlkZS1mdWxseS12aXNpYmxlJyxcbiAgc2xpZGVOZXh0Q2xhc3M6ICdzd2lwZXItc2xpZGUtbmV4dCcsXG4gIHNsaWRlUHJldkNsYXNzOiAnc3dpcGVyLXNsaWRlLXByZXYnLFxuICB3cmFwcGVyQ2xhc3M6ICdzd2lwZXItd3JhcHBlcicsXG4gIGxhenlQcmVsb2FkZXJDbGFzczogJ3N3aXBlci1sYXp5LXByZWxvYWRlcicsXG4gIGxhenlQcmVsb2FkUHJldk5leHQ6IDAsXG4gIC8vIENhbGxiYWNrc1xuICBydW5DYWxsYmFja3NPbkluaXQ6IHRydWUsXG4gIC8vIEludGVybmFsc1xuICBfZW1pdENsYXNzZXM6IGZhbHNlXG59O1xuXG5mdW5jdGlvbiBtb2R1bGVFeHRlbmRQYXJhbXMocGFyYW1zLCBhbGxNb2R1bGVzUGFyYW1zKSB7XG4gIHJldHVybiBmdW5jdGlvbiBleHRlbmRQYXJhbXMob2JqKSB7XG4gICAgaWYgKG9iaiA9PT0gdm9pZCAwKSB7XG4gICAgICBvYmogPSB7fTtcbiAgICB9XG4gICAgY29uc3QgbW9kdWxlUGFyYW1OYW1lID0gT2JqZWN0LmtleXMob2JqKVswXTtcbiAgICBjb25zdCBtb2R1bGVQYXJhbXMgPSBvYmpbbW9kdWxlUGFyYW1OYW1lXTtcbiAgICBpZiAodHlwZW9mIG1vZHVsZVBhcmFtcyAhPT0gJ29iamVjdCcgfHwgbW9kdWxlUGFyYW1zID09PSBudWxsKSB7XG4gICAgICBleHRlbmQoYWxsTW9kdWxlc1BhcmFtcywgb2JqKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdID09PSB0cnVlKSB7XG4gICAgICBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSA9IHtcbiAgICAgICAgZW5hYmxlZDogdHJ1ZVxuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKG1vZHVsZVBhcmFtTmFtZSA9PT0gJ25hdmlnYXRpb24nICYmIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdICYmIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdLmVuYWJsZWQgJiYgIXBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdLnByZXZFbCAmJiAhcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0ubmV4dEVsKSB7XG4gICAgICBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXS5hdXRvID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKFsncGFnaW5hdGlvbicsICdzY3JvbGxiYXInXS5pbmRleE9mKG1vZHVsZVBhcmFtTmFtZSkgPj0gMCAmJiBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSAmJiBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXS5lbmFibGVkICYmICFwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXS5lbCkge1xuICAgICAgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0uYXV0byA9IHRydWU7XG4gICAgfVxuICAgIGlmICghKG1vZHVsZVBhcmFtTmFtZSBpbiBwYXJhbXMgJiYgJ2VuYWJsZWQnIGluIG1vZHVsZVBhcmFtcykpIHtcbiAgICAgIGV4dGVuZChhbGxNb2R1bGVzUGFyYW1zLCBvYmopO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdID09PSAnb2JqZWN0JyAmJiAhKCdlbmFibGVkJyBpbiBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSkpIHtcbiAgICAgIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdLmVuYWJsZWQgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoIXBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdKSBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSA9IHtcbiAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgfTtcbiAgICBleHRlbmQoYWxsTW9kdWxlc1BhcmFtcywgb2JqKTtcbiAgfTtcbn1cblxuLyogZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOiBcIm9mZlwiICovXG5jb25zdCBwcm90b3R5cGVzID0ge1xuICBldmVudHNFbWl0dGVyLFxuICB1cGRhdGUsXG4gIHRyYW5zbGF0ZSxcbiAgdHJhbnNpdGlvbixcbiAgc2xpZGUsXG4gIGxvb3AsXG4gIGdyYWJDdXJzb3IsXG4gIGV2ZW50czogZXZlbnRzJDEsXG4gIGJyZWFrcG9pbnRzLFxuICBjaGVja092ZXJmbG93OiBjaGVja092ZXJmbG93JDEsXG4gIGNsYXNzZXNcbn07XG5jb25zdCBleHRlbmRlZERlZmF1bHRzID0ge307XG5jbGFzcyBTd2lwZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBsZXQgZWw7XG4gICAgbGV0IHBhcmFtcztcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMSAmJiBhcmdzWzBdLmNvbnN0cnVjdG9yICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcmdzWzBdKS5zbGljZSg4LCAtMSkgPT09ICdPYmplY3QnKSB7XG4gICAgICBwYXJhbXMgPSBhcmdzWzBdO1xuICAgIH0gZWxzZSB7XG4gICAgICBbZWwsIHBhcmFtc10gPSBhcmdzO1xuICAgIH1cbiAgICBpZiAoIXBhcmFtcykgcGFyYW1zID0ge307XG4gICAgcGFyYW1zID0gZXh0ZW5kKHt9LCBwYXJhbXMpO1xuICAgIGlmIChlbCAmJiAhcGFyYW1zLmVsKSBwYXJhbXMuZWwgPSBlbDtcbiAgICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gICAgaWYgKHBhcmFtcy5lbCAmJiB0eXBlb2YgcGFyYW1zLmVsID09PSAnc3RyaW5nJyAmJiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHBhcmFtcy5lbCkubGVuZ3RoID4gMSkge1xuICAgICAgY29uc3Qgc3dpcGVycyA9IFtdO1xuICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChwYXJhbXMuZWwpLmZvckVhY2goY29udGFpbmVyRWwgPT4ge1xuICAgICAgICBjb25zdCBuZXdQYXJhbXMgPSBleHRlbmQoe30sIHBhcmFtcywge1xuICAgICAgICAgIGVsOiBjb250YWluZXJFbFxuICAgICAgICB9KTtcbiAgICAgICAgc3dpcGVycy5wdXNoKG5ldyBTd2lwZXIobmV3UGFyYW1zKSk7XG4gICAgICB9KTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdHJ1Y3Rvci1yZXR1cm5cbiAgICAgIHJldHVybiBzd2lwZXJzO1xuICAgIH1cblxuICAgIC8vIFN3aXBlciBJbnN0YW5jZVxuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgc3dpcGVyLl9fc3dpcGVyX18gPSB0cnVlO1xuICAgIHN3aXBlci5zdXBwb3J0ID0gZ2V0U3VwcG9ydCgpO1xuICAgIHN3aXBlci5kZXZpY2UgPSBnZXREZXZpY2Uoe1xuICAgICAgdXNlckFnZW50OiBwYXJhbXMudXNlckFnZW50XG4gICAgfSk7XG4gICAgc3dpcGVyLmJyb3dzZXIgPSBnZXRCcm93c2VyKCk7XG4gICAgc3dpcGVyLmV2ZW50c0xpc3RlbmVycyA9IHt9O1xuICAgIHN3aXBlci5ldmVudHNBbnlMaXN0ZW5lcnMgPSBbXTtcbiAgICBzd2lwZXIubW9kdWxlcyA9IFsuLi5zd2lwZXIuX19tb2R1bGVzX19dO1xuICAgIGlmIChwYXJhbXMubW9kdWxlcyAmJiBBcnJheS5pc0FycmF5KHBhcmFtcy5tb2R1bGVzKSkge1xuICAgICAgc3dpcGVyLm1vZHVsZXMucHVzaCguLi5wYXJhbXMubW9kdWxlcyk7XG4gICAgfVxuICAgIGNvbnN0IGFsbE1vZHVsZXNQYXJhbXMgPSB7fTtcbiAgICBzd2lwZXIubW9kdWxlcy5mb3JFYWNoKG1vZCA9PiB7XG4gICAgICBtb2Qoe1xuICAgICAgICBwYXJhbXMsXG4gICAgICAgIHN3aXBlcixcbiAgICAgICAgZXh0ZW5kUGFyYW1zOiBtb2R1bGVFeHRlbmRQYXJhbXMocGFyYW1zLCBhbGxNb2R1bGVzUGFyYW1zKSxcbiAgICAgICAgb246IHN3aXBlci5vbi5iaW5kKHN3aXBlciksXG4gICAgICAgIG9uY2U6IHN3aXBlci5vbmNlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgb2ZmOiBzd2lwZXIub2ZmLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgZW1pdDogc3dpcGVyLmVtaXQuYmluZChzd2lwZXIpXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8vIEV4dGVuZCBkZWZhdWx0cyB3aXRoIG1vZHVsZXMgcGFyYW1zXG4gICAgY29uc3Qgc3dpcGVyUGFyYW1zID0gZXh0ZW5kKHt9LCBkZWZhdWx0cywgYWxsTW9kdWxlc1BhcmFtcyk7XG5cbiAgICAvLyBFeHRlbmQgZGVmYXVsdHMgd2l0aCBwYXNzZWQgcGFyYW1zXG4gICAgc3dpcGVyLnBhcmFtcyA9IGV4dGVuZCh7fSwgc3dpcGVyUGFyYW1zLCBleHRlbmRlZERlZmF1bHRzLCBwYXJhbXMpO1xuICAgIHN3aXBlci5vcmlnaW5hbFBhcmFtcyA9IGV4dGVuZCh7fSwgc3dpcGVyLnBhcmFtcyk7XG4gICAgc3dpcGVyLnBhc3NlZFBhcmFtcyA9IGV4dGVuZCh7fSwgcGFyYW1zKTtcblxuICAgIC8vIGFkZCBldmVudCBsaXN0ZW5lcnNcbiAgICBpZiAoc3dpcGVyLnBhcmFtcyAmJiBzd2lwZXIucGFyYW1zLm9uKSB7XG4gICAgICBPYmplY3Qua2V5cyhzd2lwZXIucGFyYW1zLm9uKS5mb3JFYWNoKGV2ZW50TmFtZSA9PiB7XG4gICAgICAgIHN3aXBlci5vbihldmVudE5hbWUsIHN3aXBlci5wYXJhbXMub25bZXZlbnROYW1lXSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKHN3aXBlci5wYXJhbXMgJiYgc3dpcGVyLnBhcmFtcy5vbkFueSkge1xuICAgICAgc3dpcGVyLm9uQW55KHN3aXBlci5wYXJhbXMub25BbnkpO1xuICAgIH1cblxuICAgIC8vIEV4dGVuZCBTd2lwZXJcbiAgICBPYmplY3QuYXNzaWduKHN3aXBlciwge1xuICAgICAgZW5hYmxlZDogc3dpcGVyLnBhcmFtcy5lbmFibGVkLFxuICAgICAgZWwsXG4gICAgICAvLyBDbGFzc2VzXG4gICAgICBjbGFzc05hbWVzOiBbXSxcbiAgICAgIC8vIFNsaWRlc1xuICAgICAgc2xpZGVzOiBbXSxcbiAgICAgIHNsaWRlc0dyaWQ6IFtdLFxuICAgICAgc25hcEdyaWQ6IFtdLFxuICAgICAgc2xpZGVzU2l6ZXNHcmlkOiBbXSxcbiAgICAgIC8vIGlzRGlyZWN0aW9uXG4gICAgICBpc0hvcml6b250YWwoKSB7XG4gICAgICAgIHJldHVybiBzd2lwZXIucGFyYW1zLmRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnO1xuICAgICAgfSxcbiAgICAgIGlzVmVydGljYWwoKSB7XG4gICAgICAgIHJldHVybiBzd2lwZXIucGFyYW1zLmRpcmVjdGlvbiA9PT0gJ3ZlcnRpY2FsJztcbiAgICAgIH0sXG4gICAgICAvLyBJbmRleGVzXG4gICAgICBhY3RpdmVJbmRleDogMCxcbiAgICAgIHJlYWxJbmRleDogMCxcbiAgICAgIC8vXG4gICAgICBpc0JlZ2lubmluZzogdHJ1ZSxcbiAgICAgIGlzRW5kOiBmYWxzZSxcbiAgICAgIC8vIFByb3BzXG4gICAgICB0cmFuc2xhdGU6IDAsXG4gICAgICBwcmV2aW91c1RyYW5zbGF0ZTogMCxcbiAgICAgIHByb2dyZXNzOiAwLFxuICAgICAgdmVsb2NpdHk6IDAsXG4gICAgICBhbmltYXRpbmc6IGZhbHNlLFxuICAgICAgY3NzT3ZlcmZsb3dBZGp1c3RtZW50KCkge1xuICAgICAgICAvLyBSZXR1cm5zIDAgdW5sZXNzIGB0cmFuc2xhdGVgIGlzID4gMioqMjNcbiAgICAgICAgLy8gU2hvdWxkIGJlIHN1YnRyYWN0ZWQgZnJvbSBjc3MgdmFsdWVzIHRvIHByZXZlbnQgb3ZlcmZsb3dcbiAgICAgICAgcmV0dXJuIE1hdGgudHJ1bmModGhpcy50cmFuc2xhdGUgLyAyICoqIDIzKSAqIDIgKiogMjM7XG4gICAgICB9LFxuICAgICAgLy8gTG9ja3NcbiAgICAgIGFsbG93U2xpZGVOZXh0OiBzd2lwZXIucGFyYW1zLmFsbG93U2xpZGVOZXh0LFxuICAgICAgYWxsb3dTbGlkZVByZXY6IHN3aXBlci5wYXJhbXMuYWxsb3dTbGlkZVByZXYsXG4gICAgICAvLyBUb3VjaCBFdmVudHNcbiAgICAgIHRvdWNoRXZlbnRzRGF0YToge1xuICAgICAgICBpc1RvdWNoZWQ6IHVuZGVmaW5lZCxcbiAgICAgICAgaXNNb3ZlZDogdW5kZWZpbmVkLFxuICAgICAgICBhbGxvd1RvdWNoQ2FsbGJhY2tzOiB1bmRlZmluZWQsXG4gICAgICAgIHRvdWNoU3RhcnRUaW1lOiB1bmRlZmluZWQsXG4gICAgICAgIGlzU2Nyb2xsaW5nOiB1bmRlZmluZWQsXG4gICAgICAgIGN1cnJlbnRUcmFuc2xhdGU6IHVuZGVmaW5lZCxcbiAgICAgICAgc3RhcnRUcmFuc2xhdGU6IHVuZGVmaW5lZCxcbiAgICAgICAgYWxsb3dUaHJlc2hvbGRNb3ZlOiB1bmRlZmluZWQsXG4gICAgICAgIC8vIEZvcm0gZWxlbWVudHMgdG8gbWF0Y2hcbiAgICAgICAgZm9jdXNhYmxlRWxlbWVudHM6IHN3aXBlci5wYXJhbXMuZm9jdXNhYmxlRWxlbWVudHMsXG4gICAgICAgIC8vIExhc3QgY2xpY2sgdGltZVxuICAgICAgICBsYXN0Q2xpY2tUaW1lOiAwLFxuICAgICAgICBjbGlja1RpbWVvdXQ6IHVuZGVmaW5lZCxcbiAgICAgICAgLy8gVmVsb2NpdGllc1xuICAgICAgICB2ZWxvY2l0aWVzOiBbXSxcbiAgICAgICAgYWxsb3dNb21lbnR1bUJvdW5jZTogdW5kZWZpbmVkLFxuICAgICAgICBzdGFydE1vdmluZzogdW5kZWZpbmVkLFxuICAgICAgICBwb2ludGVySWQ6IG51bGwsXG4gICAgICAgIHRvdWNoSWQ6IG51bGxcbiAgICAgIH0sXG4gICAgICAvLyBDbGlja3NcbiAgICAgIGFsbG93Q2xpY2s6IHRydWUsXG4gICAgICAvLyBUb3VjaGVzXG4gICAgICBhbGxvd1RvdWNoTW92ZTogc3dpcGVyLnBhcmFtcy5hbGxvd1RvdWNoTW92ZSxcbiAgICAgIHRvdWNoZXM6IHtcbiAgICAgICAgc3RhcnRYOiAwLFxuICAgICAgICBzdGFydFk6IDAsXG4gICAgICAgIGN1cnJlbnRYOiAwLFxuICAgICAgICBjdXJyZW50WTogMCxcbiAgICAgICAgZGlmZjogMFxuICAgICAgfSxcbiAgICAgIC8vIEltYWdlc1xuICAgICAgaW1hZ2VzVG9Mb2FkOiBbXSxcbiAgICAgIGltYWdlc0xvYWRlZDogMFxuICAgIH0pO1xuICAgIHN3aXBlci5lbWl0KCdfc3dpcGVyJyk7XG5cbiAgICAvLyBJbml0XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuaW5pdCkge1xuICAgICAgc3dpcGVyLmluaXQoKTtcbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYXBwIGluc3RhbmNlXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnN0cnVjdG9yLXJldHVyblxuICAgIHJldHVybiBzd2lwZXI7XG4gIH1cbiAgZ2V0RGlyZWN0aW9uTGFiZWwocHJvcGVydHkpIHtcbiAgICBpZiAodGhpcy5pc0hvcml6b250YWwoKSkge1xuICAgICAgcmV0dXJuIHByb3BlcnR5O1xuICAgIH1cbiAgICAvLyBwcmV0dGllci1pZ25vcmVcbiAgICByZXR1cm4ge1xuICAgICAgJ3dpZHRoJzogJ2hlaWdodCcsXG4gICAgICAnbWFyZ2luLXRvcCc6ICdtYXJnaW4tbGVmdCcsXG4gICAgICAnbWFyZ2luLWJvdHRvbSAnOiAnbWFyZ2luLXJpZ2h0JyxcbiAgICAgICdtYXJnaW4tbGVmdCc6ICdtYXJnaW4tdG9wJyxcbiAgICAgICdtYXJnaW4tcmlnaHQnOiAnbWFyZ2luLWJvdHRvbScsXG4gICAgICAncGFkZGluZy1sZWZ0JzogJ3BhZGRpbmctdG9wJyxcbiAgICAgICdwYWRkaW5nLXJpZ2h0JzogJ3BhZGRpbmctYm90dG9tJyxcbiAgICAgICdtYXJnaW5SaWdodCc6ICdtYXJnaW5Cb3R0b20nXG4gICAgfVtwcm9wZXJ0eV07XG4gIH1cbiAgZ2V0U2xpZGVJbmRleChzbGlkZUVsKSB7XG4gICAgY29uc3Qge1xuICAgICAgc2xpZGVzRWwsXG4gICAgICBwYXJhbXNcbiAgICB9ID0gdGhpcztcbiAgICBjb25zdCBzbGlkZXMgPSBlbGVtZW50Q2hpbGRyZW4oc2xpZGVzRWwsIGAuJHtwYXJhbXMuc2xpZGVDbGFzc30sIHN3aXBlci1zbGlkZWApO1xuICAgIGNvbnN0IGZpcnN0U2xpZGVJbmRleCA9IGVsZW1lbnRJbmRleChzbGlkZXNbMF0pO1xuICAgIHJldHVybiBlbGVtZW50SW5kZXgoc2xpZGVFbCkgLSBmaXJzdFNsaWRlSW5kZXg7XG4gIH1cbiAgZ2V0U2xpZGVJbmRleEJ5RGF0YShpbmRleCkge1xuICAgIHJldHVybiB0aGlzLmdldFNsaWRlSW5kZXgodGhpcy5zbGlkZXMuZmlsdGVyKHNsaWRlRWwgPT4gc2xpZGVFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JykgKiAxID09PSBpbmRleClbMF0pO1xuICB9XG4gIHJlY2FsY1NsaWRlcygpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHtcbiAgICAgIHNsaWRlc0VsLFxuICAgICAgcGFyYW1zXG4gICAgfSA9IHN3aXBlcjtcbiAgICBzd2lwZXIuc2xpZGVzID0gZWxlbWVudENoaWxkcmVuKHNsaWRlc0VsLCBgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKTtcbiAgfVxuICBlbmFibGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoc3dpcGVyLmVuYWJsZWQpIHJldHVybjtcbiAgICBzd2lwZXIuZW5hYmxlZCA9IHRydWU7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuZ3JhYkN1cnNvcikge1xuICAgICAgc3dpcGVyLnNldEdyYWJDdXJzb3IoKTtcbiAgICB9XG4gICAgc3dpcGVyLmVtaXQoJ2VuYWJsZScpO1xuICB9XG4gIGRpc2FibGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlci5lbmFibGVkKSByZXR1cm47XG4gICAgc3dpcGVyLmVuYWJsZWQgPSBmYWxzZTtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5ncmFiQ3Vyc29yKSB7XG4gICAgICBzd2lwZXIudW5zZXRHcmFiQ3Vyc29yKCk7XG4gICAgfVxuICAgIHN3aXBlci5lbWl0KCdkaXNhYmxlJyk7XG4gIH1cbiAgc2V0UHJvZ3Jlc3MocHJvZ3Jlc3MsIHNwZWVkKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBwcm9ncmVzcyA9IE1hdGgubWluKE1hdGgubWF4KHByb2dyZXNzLCAwKSwgMSk7XG4gICAgY29uc3QgbWluID0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpO1xuICAgIGNvbnN0IG1heCA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKTtcbiAgICBjb25zdCBjdXJyZW50ID0gKG1heCAtIG1pbikgKiBwcm9ncmVzcyArIG1pbjtcbiAgICBzd2lwZXIudHJhbnNsYXRlVG8oY3VycmVudCwgdHlwZW9mIHNwZWVkID09PSAndW5kZWZpbmVkJyA/IDAgOiBzcGVlZCk7XG4gICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgfVxuICBlbWl0Q29udGFpbmVyQ2xhc3NlcygpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5fZW1pdENsYXNzZXMgfHwgIXN3aXBlci5lbCkgcmV0dXJuO1xuICAgIGNvbnN0IGNscyA9IHN3aXBlci5lbC5jbGFzc05hbWUuc3BsaXQoJyAnKS5maWx0ZXIoY2xhc3NOYW1lID0+IHtcbiAgICAgIHJldHVybiBjbGFzc05hbWUuaW5kZXhPZignc3dpcGVyJykgPT09IDAgfHwgY2xhc3NOYW1lLmluZGV4T2Yoc3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzKSA9PT0gMDtcbiAgICB9KTtcbiAgICBzd2lwZXIuZW1pdCgnX2NvbnRhaW5lckNsYXNzZXMnLCBjbHMuam9pbignICcpKTtcbiAgfVxuICBnZXRTbGlkZUNsYXNzZXMoc2xpZGVFbCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKHN3aXBlci5kZXN0cm95ZWQpIHJldHVybiAnJztcbiAgICByZXR1cm4gc2xpZGVFbC5jbGFzc05hbWUuc3BsaXQoJyAnKS5maWx0ZXIoY2xhc3NOYW1lID0+IHtcbiAgICAgIHJldHVybiBjbGFzc05hbWUuaW5kZXhPZignc3dpcGVyLXNsaWRlJykgPT09IDAgfHwgY2xhc3NOYW1lLmluZGV4T2Yoc3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzKSA9PT0gMDtcbiAgICB9KS5qb2luKCcgJyk7XG4gIH1cbiAgZW1pdFNsaWRlc0NsYXNzZXMoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuX2VtaXRDbGFzc2VzIHx8ICFzd2lwZXIuZWwpIHJldHVybjtcbiAgICBjb25zdCB1cGRhdGVzID0gW107XG4gICAgc3dpcGVyLnNsaWRlcy5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgICAgY29uc3QgY2xhc3NOYW1lcyA9IHN3aXBlci5nZXRTbGlkZUNsYXNzZXMoc2xpZGVFbCk7XG4gICAgICB1cGRhdGVzLnB1c2goe1xuICAgICAgICBzbGlkZUVsLFxuICAgICAgICBjbGFzc05hbWVzXG4gICAgICB9KTtcbiAgICAgIHN3aXBlci5lbWl0KCdfc2xpZGVDbGFzcycsIHNsaWRlRWwsIGNsYXNzTmFtZXMpO1xuICAgIH0pO1xuICAgIHN3aXBlci5lbWl0KCdfc2xpZGVDbGFzc2VzJywgdXBkYXRlcyk7XG4gIH1cbiAgc2xpZGVzUGVyVmlld0R5bmFtaWModmlldywgZXhhY3QpIHtcbiAgICBpZiAodmlldyA9PT0gdm9pZCAwKSB7XG4gICAgICB2aWV3ID0gJ2N1cnJlbnQnO1xuICAgIH1cbiAgICBpZiAoZXhhY3QgPT09IHZvaWQgMCkge1xuICAgICAgZXhhY3QgPSBmYWxzZTtcbiAgICB9XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB7XG4gICAgICBwYXJhbXMsXG4gICAgICBzbGlkZXMsXG4gICAgICBzbGlkZXNHcmlkLFxuICAgICAgc2xpZGVzU2l6ZXNHcmlkLFxuICAgICAgc2l6ZTogc3dpcGVyU2l6ZSxcbiAgICAgIGFjdGl2ZUluZGV4XG4gICAgfSA9IHN3aXBlcjtcbiAgICBsZXQgc3B2ID0gMTtcbiAgICBpZiAodHlwZW9mIHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnbnVtYmVyJykgcmV0dXJuIHBhcmFtcy5zbGlkZXNQZXJWaWV3O1xuICAgIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgIGxldCBzbGlkZVNpemUgPSBzbGlkZXNbYWN0aXZlSW5kZXhdID8gTWF0aC5jZWlsKHNsaWRlc1thY3RpdmVJbmRleF0uc3dpcGVyU2xpZGVTaXplKSA6IDA7XG4gICAgICBsZXQgYnJlYWtMb29wO1xuICAgICAgZm9yIChsZXQgaSA9IGFjdGl2ZUluZGV4ICsgMTsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAoc2xpZGVzW2ldICYmICFicmVha0xvb3ApIHtcbiAgICAgICAgICBzbGlkZVNpemUgKz0gTWF0aC5jZWlsKHNsaWRlc1tpXS5zd2lwZXJTbGlkZVNpemUpO1xuICAgICAgICAgIHNwdiArPSAxO1xuICAgICAgICAgIGlmIChzbGlkZVNpemUgPiBzd2lwZXJTaXplKSBicmVha0xvb3AgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmb3IgKGxldCBpID0gYWN0aXZlSW5kZXggLSAxOyBpID49IDA7IGkgLT0gMSkge1xuICAgICAgICBpZiAoc2xpZGVzW2ldICYmICFicmVha0xvb3ApIHtcbiAgICAgICAgICBzbGlkZVNpemUgKz0gc2xpZGVzW2ldLnN3aXBlclNsaWRlU2l6ZTtcbiAgICAgICAgICBzcHYgKz0gMTtcbiAgICAgICAgICBpZiAoc2xpZGVTaXplID4gc3dpcGVyU2l6ZSkgYnJlYWtMb29wID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIGlmICh2aWV3ID09PSAnY3VycmVudCcpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IGFjdGl2ZUluZGV4ICsgMTsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgIGNvbnN0IHNsaWRlSW5WaWV3ID0gZXhhY3QgPyBzbGlkZXNHcmlkW2ldICsgc2xpZGVzU2l6ZXNHcmlkW2ldIC0gc2xpZGVzR3JpZFthY3RpdmVJbmRleF0gPCBzd2lwZXJTaXplIDogc2xpZGVzR3JpZFtpXSAtIHNsaWRlc0dyaWRbYWN0aXZlSW5kZXhdIDwgc3dpcGVyU2l6ZTtcbiAgICAgICAgICBpZiAoc2xpZGVJblZpZXcpIHtcbiAgICAgICAgICAgIHNwdiArPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gcHJldmlvdXNcbiAgICAgICAgZm9yIChsZXQgaSA9IGFjdGl2ZUluZGV4IC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgICAgICBjb25zdCBzbGlkZUluVmlldyA9IHNsaWRlc0dyaWRbYWN0aXZlSW5kZXhdIC0gc2xpZGVzR3JpZFtpXSA8IHN3aXBlclNpemU7XG4gICAgICAgICAgaWYgKHNsaWRlSW5WaWV3KSB7XG4gICAgICAgICAgICBzcHYgKz0gMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHNwdjtcbiAgfVxuICB1cGRhdGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XG4gICAgY29uc3Qge1xuICAgICAgc25hcEdyaWQsXG4gICAgICBwYXJhbXNcbiAgICB9ID0gc3dpcGVyO1xuICAgIC8vIEJyZWFrcG9pbnRzXG4gICAgaWYgKHBhcmFtcy5icmVha3BvaW50cykge1xuICAgICAgc3dpcGVyLnNldEJyZWFrcG9pbnQoKTtcbiAgICB9XG4gICAgWy4uLnN3aXBlci5lbC5xdWVyeVNlbGVjdG9yQWxsKCdbbG9hZGluZz1cImxhenlcIl0nKV0uZm9yRWFjaChpbWFnZUVsID0+IHtcbiAgICAgIGlmIChpbWFnZUVsLmNvbXBsZXRlKSB7XG4gICAgICAgIHByb2Nlc3NMYXp5UHJlbG9hZGVyKHN3aXBlciwgaW1hZ2VFbCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgc3dpcGVyLnVwZGF0ZVNpemUoKTtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG4gICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKCk7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICBmdW5jdGlvbiBzZXRUcmFuc2xhdGUoKSB7XG4gICAgICBjb25zdCB0cmFuc2xhdGVWYWx1ZSA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyBzd2lwZXIudHJhbnNsYXRlICogLTEgOiBzd2lwZXIudHJhbnNsYXRlO1xuICAgICAgY29uc3QgbmV3VHJhbnNsYXRlID0gTWF0aC5taW4oTWF0aC5tYXgodHJhbnNsYXRlVmFsdWUsIHN3aXBlci5tYXhUcmFuc2xhdGUoKSksIHN3aXBlci5taW5UcmFuc2xhdGUoKSk7XG4gICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKG5ld1RyYW5zbGF0ZSk7XG4gICAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gICAgfVxuICAgIGxldCB0cmFuc2xhdGVkO1xuICAgIGlmIChwYXJhbXMuZnJlZU1vZGUgJiYgcGFyYW1zLmZyZWVNb2RlLmVuYWJsZWQgJiYgIXBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICBzZXRUcmFuc2xhdGUoKTtcbiAgICAgIGlmIChwYXJhbXMuYXV0b0hlaWdodCkge1xuICAgICAgICBzd2lwZXIudXBkYXRlQXV0b0hlaWdodCgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoKHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgfHwgcGFyYW1zLnNsaWRlc1BlclZpZXcgPiAxKSAmJiBzd2lwZXIuaXNFbmQgJiYgIXBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgICBjb25zdCBzbGlkZXMgPSBzd2lwZXIudmlydHVhbCAmJiBwYXJhbXMudmlydHVhbC5lbmFibGVkID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzIDogc3dpcGVyLnNsaWRlcztcbiAgICAgICAgdHJhbnNsYXRlZCA9IHN3aXBlci5zbGlkZVRvKHNsaWRlcy5sZW5ndGggLSAxLCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0cmFuc2xhdGVkID0gc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4LCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgICBpZiAoIXRyYW5zbGF0ZWQpIHtcbiAgICAgICAgc2V0VHJhbnNsYXRlKCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzbmFwR3JpZCAhPT0gc3dpcGVyLnNuYXBHcmlkKSB7XG4gICAgICBzd2lwZXIuY2hlY2tPdmVyZmxvdygpO1xuICAgIH1cbiAgICBzd2lwZXIuZW1pdCgndXBkYXRlJyk7XG4gIH1cbiAgY2hhbmdlRGlyZWN0aW9uKG5ld0RpcmVjdGlvbiwgbmVlZFVwZGF0ZSkge1xuICAgIGlmIChuZWVkVXBkYXRlID09PSB2b2lkIDApIHtcbiAgICAgIG5lZWRVcGRhdGUgPSB0cnVlO1xuICAgIH1cbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IGN1cnJlbnREaXJlY3Rpb24gPSBzd2lwZXIucGFyYW1zLmRpcmVjdGlvbjtcbiAgICBpZiAoIW5ld0RpcmVjdGlvbikge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICBuZXdEaXJlY3Rpb24gPSBjdXJyZW50RGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcgPyAndmVydGljYWwnIDogJ2hvcml6b250YWwnO1xuICAgIH1cbiAgICBpZiAobmV3RGlyZWN0aW9uID09PSBjdXJyZW50RGlyZWN0aW9uIHx8IG5ld0RpcmVjdGlvbiAhPT0gJ2hvcml6b250YWwnICYmIG5ld0RpcmVjdGlvbiAhPT0gJ3ZlcnRpY2FsJykge1xuICAgICAgcmV0dXJuIHN3aXBlcjtcbiAgICB9XG4gICAgc3dpcGVyLmVsLmNsYXNzTGlzdC5yZW1vdmUoYCR7c3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfSR7Y3VycmVudERpcmVjdGlvbn1gKTtcbiAgICBzd2lwZXIuZWwuY2xhc3NMaXN0LmFkZChgJHtzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9JHtuZXdEaXJlY3Rpb259YCk7XG4gICAgc3dpcGVyLmVtaXRDb250YWluZXJDbGFzc2VzKCk7XG4gICAgc3dpcGVyLnBhcmFtcy5kaXJlY3Rpb24gPSBuZXdEaXJlY3Rpb247XG4gICAgc3dpcGVyLnNsaWRlcy5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgICAgaWYgKG5ld0RpcmVjdGlvbiA9PT0gJ3ZlcnRpY2FsJykge1xuICAgICAgICBzbGlkZUVsLnN0eWxlLndpZHRoID0gJyc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzbGlkZUVsLnN0eWxlLmhlaWdodCA9ICcnO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHN3aXBlci5lbWl0KCdjaGFuZ2VEaXJlY3Rpb24nKTtcbiAgICBpZiAobmVlZFVwZGF0ZSkgc3dpcGVyLnVwZGF0ZSgpO1xuICAgIHJldHVybiBzd2lwZXI7XG4gIH1cbiAgY2hhbmdlTGFuZ3VhZ2VEaXJlY3Rpb24oZGlyZWN0aW9uKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoc3dpcGVyLnJ0bCAmJiBkaXJlY3Rpb24gPT09ICdydGwnIHx8ICFzd2lwZXIucnRsICYmIGRpcmVjdGlvbiA9PT0gJ2x0cicpIHJldHVybjtcbiAgICBzd2lwZXIucnRsID0gZGlyZWN0aW9uID09PSAncnRsJztcbiAgICBzd2lwZXIucnRsVHJhbnNsYXRlID0gc3dpcGVyLnBhcmFtcy5kaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJyAmJiBzd2lwZXIucnRsO1xuICAgIGlmIChzd2lwZXIucnRsKSB7XG4gICAgICBzd2lwZXIuZWwuY2xhc3NMaXN0LmFkZChgJHtzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9cnRsYCk7XG4gICAgICBzd2lwZXIuZWwuZGlyID0gJ3J0bCc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5lbC5jbGFzc0xpc3QucmVtb3ZlKGAke3N3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc31ydGxgKTtcbiAgICAgIHN3aXBlci5lbC5kaXIgPSAnbHRyJztcbiAgICB9XG4gICAgc3dpcGVyLnVwZGF0ZSgpO1xuICB9XG4gIG1vdW50KGVsZW1lbnQpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmIChzd2lwZXIubW91bnRlZCkgcmV0dXJuIHRydWU7XG5cbiAgICAvLyBGaW5kIGVsXG4gICAgbGV0IGVsID0gZWxlbWVudCB8fCBzd2lwZXIucGFyYW1zLmVsO1xuICAgIGlmICh0eXBlb2YgZWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZWwpO1xuICAgIH1cbiAgICBpZiAoIWVsKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGVsLnN3aXBlciA9IHN3aXBlcjtcbiAgICBpZiAoZWwucGFyZW50Tm9kZSAmJiBlbC5wYXJlbnROb2RlLmhvc3QgJiYgZWwucGFyZW50Tm9kZS5ob3N0Lm5vZGVOYW1lID09PSBzd2lwZXIucGFyYW1zLnN3aXBlckVsZW1lbnROb2RlTmFtZS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICBzd2lwZXIuaXNFbGVtZW50ID0gdHJ1ZTtcbiAgICB9XG4gICAgY29uc3QgZ2V0V3JhcHBlclNlbGVjdG9yID0gKCkgPT4ge1xuICAgICAgcmV0dXJuIGAuJHsoc3dpcGVyLnBhcmFtcy53cmFwcGVyQ2xhc3MgfHwgJycpLnRyaW0oKS5zcGxpdCgnICcpLmpvaW4oJy4nKX1gO1xuICAgIH07XG4gICAgY29uc3QgZ2V0V3JhcHBlciA9ICgpID0+IHtcbiAgICAgIGlmIChlbCAmJiBlbC5zaGFkb3dSb290ICYmIGVsLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3Rvcikge1xuICAgICAgICBjb25zdCByZXMgPSBlbC5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoZ2V0V3JhcHBlclNlbGVjdG9yKCkpO1xuICAgICAgICAvLyBDaGlsZHJlbiBuZWVkcyB0byByZXR1cm4gc2xvdCBpdGVtc1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGVsZW1lbnRDaGlsZHJlbihlbCwgZ2V0V3JhcHBlclNlbGVjdG9yKCkpWzBdO1xuICAgIH07XG4gICAgLy8gRmluZCBXcmFwcGVyXG4gICAgbGV0IHdyYXBwZXJFbCA9IGdldFdyYXBwZXIoKTtcbiAgICBpZiAoIXdyYXBwZXJFbCAmJiBzd2lwZXIucGFyYW1zLmNyZWF0ZUVsZW1lbnRzKSB7XG4gICAgICB3cmFwcGVyRWwgPSBjcmVhdGVFbGVtZW50KCdkaXYnLCBzd2lwZXIucGFyYW1zLndyYXBwZXJDbGFzcyk7XG4gICAgICBlbC5hcHBlbmQod3JhcHBlckVsKTtcbiAgICAgIGVsZW1lbnRDaGlsZHJlbihlbCwgYC4ke3N3aXBlci5wYXJhbXMuc2xpZGVDbGFzc31gKS5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgICAgICB3cmFwcGVyRWwuYXBwZW5kKHNsaWRlRWwpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIE9iamVjdC5hc3NpZ24oc3dpcGVyLCB7XG4gICAgICBlbCxcbiAgICAgIHdyYXBwZXJFbCxcbiAgICAgIHNsaWRlc0VsOiBzd2lwZXIuaXNFbGVtZW50ICYmICFlbC5wYXJlbnROb2RlLmhvc3Quc2xpZGVTbG90cyA/IGVsLnBhcmVudE5vZGUuaG9zdCA6IHdyYXBwZXJFbCxcbiAgICAgIGhvc3RFbDogc3dpcGVyLmlzRWxlbWVudCA/IGVsLnBhcmVudE5vZGUuaG9zdCA6IGVsLFxuICAgICAgbW91bnRlZDogdHJ1ZSxcbiAgICAgIC8vIFJUTFxuICAgICAgcnRsOiBlbC5kaXIudG9Mb3dlckNhc2UoKSA9PT0gJ3J0bCcgfHwgZWxlbWVudFN0eWxlKGVsLCAnZGlyZWN0aW9uJykgPT09ICdydGwnLFxuICAgICAgcnRsVHJhbnNsYXRlOiBzd2lwZXIucGFyYW1zLmRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnICYmIChlbC5kaXIudG9Mb3dlckNhc2UoKSA9PT0gJ3J0bCcgfHwgZWxlbWVudFN0eWxlKGVsLCAnZGlyZWN0aW9uJykgPT09ICdydGwnKSxcbiAgICAgIHdyb25nUlRMOiBlbGVtZW50U3R5bGUod3JhcHBlckVsLCAnZGlzcGxheScpID09PSAnLXdlYmtpdC1ib3gnXG4gICAgfSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaW5pdChlbCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKHN3aXBlci5pbml0aWFsaXplZCkgcmV0dXJuIHN3aXBlcjtcbiAgICBjb25zdCBtb3VudGVkID0gc3dpcGVyLm1vdW50KGVsKTtcbiAgICBpZiAobW91bnRlZCA9PT0gZmFsc2UpIHJldHVybiBzd2lwZXI7XG4gICAgc3dpcGVyLmVtaXQoJ2JlZm9yZUluaXQnKTtcblxuICAgIC8vIFNldCBicmVha3BvaW50XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuYnJlYWtwb2ludHMpIHtcbiAgICAgIHN3aXBlci5zZXRCcmVha3BvaW50KCk7XG4gICAgfVxuXG4gICAgLy8gQWRkIENsYXNzZXNcbiAgICBzd2lwZXIuYWRkQ2xhc3NlcygpO1xuXG4gICAgLy8gVXBkYXRlIHNpemVcbiAgICBzd2lwZXIudXBkYXRlU2l6ZSgpO1xuXG4gICAgLy8gVXBkYXRlIHNsaWRlc1xuICAgIHN3aXBlci51cGRhdGVTbGlkZXMoKTtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93KSB7XG4gICAgICBzd2lwZXIuY2hlY2tPdmVyZmxvdygpO1xuICAgIH1cblxuICAgIC8vIFNldCBHcmFiIEN1cnNvclxuICAgIGlmIChzd2lwZXIucGFyYW1zLmdyYWJDdXJzb3IgJiYgc3dpcGVyLmVuYWJsZWQpIHtcbiAgICAgIHN3aXBlci5zZXRHcmFiQ3Vyc29yKCk7XG4gICAgfVxuXG4gICAgLy8gU2xpZGUgVG8gSW5pdGlhbCBTbGlkZVxuICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3AgJiYgc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5wYXJhbXMuaW5pdGlhbFNsaWRlICsgc3dpcGVyLnZpcnR1YWwuc2xpZGVzQmVmb3JlLCAwLCBzd2lwZXIucGFyYW1zLnJ1bkNhbGxiYWNrc09uSW5pdCwgZmFsc2UsIHRydWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIucGFyYW1zLmluaXRpYWxTbGlkZSwgMCwgc3dpcGVyLnBhcmFtcy5ydW5DYWxsYmFja3NPbkluaXQsIGZhbHNlLCB0cnVlKTtcbiAgICB9XG5cbiAgICAvLyBDcmVhdGUgbG9vcFxuICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgIHN3aXBlci5sb29wQ3JlYXRlKCk7XG4gICAgfVxuXG4gICAgLy8gQXR0YWNoIGV2ZW50c1xuICAgIHN3aXBlci5hdHRhY2hFdmVudHMoKTtcbiAgICBjb25zdCBsYXp5RWxlbWVudHMgPSBbLi4uc3dpcGVyLmVsLnF1ZXJ5U2VsZWN0b3JBbGwoJ1tsb2FkaW5nPVwibGF6eVwiXScpXTtcbiAgICBpZiAoc3dpcGVyLmlzRWxlbWVudCkge1xuICAgICAgbGF6eUVsZW1lbnRzLnB1c2goLi4uc3dpcGVyLmhvc3RFbC5xdWVyeVNlbGVjdG9yQWxsKCdbbG9hZGluZz1cImxhenlcIl0nKSk7XG4gICAgfVxuICAgIGxhenlFbGVtZW50cy5mb3JFYWNoKGltYWdlRWwgPT4ge1xuICAgICAgaWYgKGltYWdlRWwuY29tcGxldGUpIHtcbiAgICAgICAgcHJvY2Vzc0xhenlQcmVsb2FkZXIoc3dpcGVyLCBpbWFnZUVsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGltYWdlRWwuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGUgPT4ge1xuICAgICAgICAgIHByb2Nlc3NMYXp5UHJlbG9hZGVyKHN3aXBlciwgZS50YXJnZXQpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBwcmVsb2FkKHN3aXBlcik7XG5cbiAgICAvLyBJbml0IEZsYWdcbiAgICBzd2lwZXIuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgIHByZWxvYWQoc3dpcGVyKTtcblxuICAgIC8vIEVtaXRcbiAgICBzd2lwZXIuZW1pdCgnaW5pdCcpO1xuICAgIHN3aXBlci5lbWl0KCdhZnRlckluaXQnKTtcbiAgICByZXR1cm4gc3dpcGVyO1xuICB9XG4gIGRlc3Ryb3koZGVsZXRlSW5zdGFuY2UsIGNsZWFuU3R5bGVzKSB7XG4gICAgaWYgKGRlbGV0ZUluc3RhbmNlID09PSB2b2lkIDApIHtcbiAgICAgIGRlbGV0ZUluc3RhbmNlID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKGNsZWFuU3R5bGVzID09PSB2b2lkIDApIHtcbiAgICAgIGNsZWFuU3R5bGVzID0gdHJ1ZTtcbiAgICB9XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB7XG4gICAgICBwYXJhbXMsXG4gICAgICBlbCxcbiAgICAgIHdyYXBwZXJFbCxcbiAgICAgIHNsaWRlc1xuICAgIH0gPSBzd2lwZXI7XG4gICAgaWYgKHR5cGVvZiBzd2lwZXIucGFyYW1zID09PSAndW5kZWZpbmVkJyB8fCBzd2lwZXIuZGVzdHJveWVkKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgc3dpcGVyLmVtaXQoJ2JlZm9yZURlc3Ryb3knKTtcblxuICAgIC8vIEluaXQgRmxhZ1xuICAgIHN3aXBlci5pbml0aWFsaXplZCA9IGZhbHNlO1xuXG4gICAgLy8gRGV0YWNoIGV2ZW50c1xuICAgIHN3aXBlci5kZXRhY2hFdmVudHMoKTtcblxuICAgIC8vIERlc3Ryb3kgbG9vcFxuICAgIGlmIChwYXJhbXMubG9vcCkge1xuICAgICAgc3dpcGVyLmxvb3BEZXN0cm95KCk7XG4gICAgfVxuXG4gICAgLy8gQ2xlYW51cCBzdHlsZXNcbiAgICBpZiAoY2xlYW5TdHlsZXMpIHtcbiAgICAgIHN3aXBlci5yZW1vdmVDbGFzc2VzKCk7XG4gICAgICBpZiAoZWwgJiYgdHlwZW9mIGVsICE9PSAnc3RyaW5nJykge1xuICAgICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoJ3N0eWxlJyk7XG4gICAgICB9XG4gICAgICBpZiAod3JhcHBlckVsKSB7XG4gICAgICAgIHdyYXBwZXJFbC5yZW1vdmVBdHRyaWJ1dGUoJ3N0eWxlJyk7XG4gICAgICB9XG4gICAgICBpZiAoc2xpZGVzICYmIHNsaWRlcy5sZW5ndGgpIHtcbiAgICAgICAgc2xpZGVzLmZvckVhY2goc2xpZGVFbCA9PiB7XG4gICAgICAgICAgc2xpZGVFbC5jbGFzc0xpc3QucmVtb3ZlKHBhcmFtcy5zbGlkZVZpc2libGVDbGFzcywgcGFyYW1zLnNsaWRlRnVsbHlWaXNpYmxlQ2xhc3MsIHBhcmFtcy5zbGlkZUFjdGl2ZUNsYXNzLCBwYXJhbXMuc2xpZGVOZXh0Q2xhc3MsIHBhcmFtcy5zbGlkZVByZXZDbGFzcyk7XG4gICAgICAgICAgc2xpZGVFbC5yZW1vdmVBdHRyaWJ1dGUoJ3N0eWxlJyk7XG4gICAgICAgICAgc2xpZGVFbC5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4Jyk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICBzd2lwZXIuZW1pdCgnZGVzdHJveScpO1xuXG4gICAgLy8gRGV0YWNoIGVtaXR0ZXIgZXZlbnRzXG4gICAgT2JqZWN0LmtleXMoc3dpcGVyLmV2ZW50c0xpc3RlbmVycykuZm9yRWFjaChldmVudE5hbWUgPT4ge1xuICAgICAgc3dpcGVyLm9mZihldmVudE5hbWUpO1xuICAgIH0pO1xuICAgIGlmIChkZWxldGVJbnN0YW5jZSAhPT0gZmFsc2UpIHtcbiAgICAgIGlmIChzd2lwZXIuZWwgJiYgdHlwZW9mIHN3aXBlci5lbCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgc3dpcGVyLmVsLnN3aXBlciA9IG51bGw7XG4gICAgICB9XG4gICAgICBkZWxldGVQcm9wcyhzd2lwZXIpO1xuICAgIH1cbiAgICBzd2lwZXIuZGVzdHJveWVkID0gdHJ1ZTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBzdGF0aWMgZXh0ZW5kRGVmYXVsdHMobmV3RGVmYXVsdHMpIHtcbiAgICBleHRlbmQoZXh0ZW5kZWREZWZhdWx0cywgbmV3RGVmYXVsdHMpO1xuICB9XG4gIHN0YXRpYyBnZXQgZXh0ZW5kZWREZWZhdWx0cygpIHtcbiAgICByZXR1cm4gZXh0ZW5kZWREZWZhdWx0cztcbiAgfVxuICBzdGF0aWMgZ2V0IGRlZmF1bHRzKCkge1xuICAgIHJldHVybiBkZWZhdWx0cztcbiAgfVxuICBzdGF0aWMgaW5zdGFsbE1vZHVsZShtb2QpIHtcbiAgICBpZiAoIVN3aXBlci5wcm90b3R5cGUuX19tb2R1bGVzX18pIFN3aXBlci5wcm90b3R5cGUuX19tb2R1bGVzX18gPSBbXTtcbiAgICBjb25zdCBtb2R1bGVzID0gU3dpcGVyLnByb3RvdHlwZS5fX21vZHVsZXNfXztcbiAgICBpZiAodHlwZW9mIG1vZCA9PT0gJ2Z1bmN0aW9uJyAmJiBtb2R1bGVzLmluZGV4T2YobW9kKSA8IDApIHtcbiAgICAgIG1vZHVsZXMucHVzaChtb2QpO1xuICAgIH1cbiAgfVxuICBzdGF0aWMgdXNlKG1vZHVsZSkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KG1vZHVsZSkpIHtcbiAgICAgIG1vZHVsZS5mb3JFYWNoKG0gPT4gU3dpcGVyLmluc3RhbGxNb2R1bGUobSkpO1xuICAgICAgcmV0dXJuIFN3aXBlcjtcbiAgICB9XG4gICAgU3dpcGVyLmluc3RhbGxNb2R1bGUobW9kdWxlKTtcbiAgICByZXR1cm4gU3dpcGVyO1xuICB9XG59XG5PYmplY3Qua2V5cyhwcm90b3R5cGVzKS5mb3JFYWNoKHByb3RvdHlwZUdyb3VwID0+IHtcbiAgT2JqZWN0LmtleXMocHJvdG90eXBlc1twcm90b3R5cGVHcm91cF0pLmZvckVhY2gocHJvdG9NZXRob2QgPT4ge1xuICAgIFN3aXBlci5wcm90b3R5cGVbcHJvdG9NZXRob2RdID0gcHJvdG90eXBlc1twcm90b3R5cGVHcm91cF1bcHJvdG9NZXRob2RdO1xuICB9KTtcbn0pO1xuU3dpcGVyLnVzZShbUmVzaXplLCBPYnNlcnZlcl0pO1xuXG5leHBvcnQgeyBTd2lwZXIgYXMgUywgZGVmYXVsdHMgYXMgZCB9O1xuIiwiaW1wb3J0IHsgYyBhcyBjcmVhdGVFbGVtZW50SWZOb3REZWZpbmVkIH0gZnJvbSAnLi4vc2hhcmVkL2NyZWF0ZS1lbGVtZW50LWlmLW5vdC1kZWZpbmVkLm1qcyc7XG5pbXBvcnQgeyBtIGFzIG1ha2VFbGVtZW50c0FycmF5IH0gZnJvbSAnLi4vc2hhcmVkL3V0aWxzLm1qcyc7XG5cbmZ1bmN0aW9uIE5hdmlnYXRpb24oX3JlZikge1xuICBsZXQge1xuICAgIHN3aXBlcixcbiAgICBleHRlbmRQYXJhbXMsXG4gICAgb24sXG4gICAgZW1pdFxuICB9ID0gX3JlZjtcbiAgZXh0ZW5kUGFyYW1zKHtcbiAgICBuYXZpZ2F0aW9uOiB7XG4gICAgICBuZXh0RWw6IG51bGwsXG4gICAgICBwcmV2RWw6IG51bGwsXG4gICAgICBoaWRlT25DbGljazogZmFsc2UsXG4gICAgICBkaXNhYmxlZENsYXNzOiAnc3dpcGVyLWJ1dHRvbi1kaXNhYmxlZCcsXG4gICAgICBoaWRkZW5DbGFzczogJ3N3aXBlci1idXR0b24taGlkZGVuJyxcbiAgICAgIGxvY2tDbGFzczogJ3N3aXBlci1idXR0b24tbG9jaycsXG4gICAgICBuYXZpZ2F0aW9uRGlzYWJsZWRDbGFzczogJ3N3aXBlci1uYXZpZ2F0aW9uLWRpc2FibGVkJ1xuICAgIH1cbiAgfSk7XG4gIHN3aXBlci5uYXZpZ2F0aW9uID0ge1xuICAgIG5leHRFbDogbnVsbCxcbiAgICBwcmV2RWw6IG51bGxcbiAgfTtcbiAgZnVuY3Rpb24gZ2V0RWwoZWwpIHtcbiAgICBsZXQgcmVzO1xuICAgIGlmIChlbCAmJiB0eXBlb2YgZWwgPT09ICdzdHJpbmcnICYmIHN3aXBlci5pc0VsZW1lbnQpIHtcbiAgICAgIHJlcyA9IHN3aXBlci5lbC5xdWVyeVNlbGVjdG9yKGVsKTtcbiAgICAgIGlmIChyZXMpIHJldHVybiByZXM7XG4gICAgfVxuICAgIGlmIChlbCkge1xuICAgICAgaWYgKHR5cGVvZiBlbCA9PT0gJ3N0cmluZycpIHJlcyA9IFsuLi5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGVsKV07XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy51bmlxdWVOYXZFbGVtZW50cyAmJiB0eXBlb2YgZWwgPT09ICdzdHJpbmcnICYmIHJlcyAmJiByZXMubGVuZ3RoID4gMSAmJiBzd2lwZXIuZWwucXVlcnlTZWxlY3RvckFsbChlbCkubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJlcyA9IHN3aXBlci5lbC5xdWVyeVNlbGVjdG9yKGVsKTtcbiAgICAgIH0gZWxzZSBpZiAocmVzICYmIHJlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgcmVzID0gcmVzWzBdO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZWwgJiYgIXJlcykgcmV0dXJuIGVsO1xuICAgIC8vIGlmIChBcnJheS5pc0FycmF5KHJlcykgJiYgcmVzLmxlbmd0aCA9PT0gMSkgcmVzID0gcmVzWzBdO1xuICAgIHJldHVybiByZXM7XG4gIH1cbiAgZnVuY3Rpb24gdG9nZ2xlRWwoZWwsIGRpc2FibGVkKSB7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uO1xuICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgIGVsLmZvckVhY2goc3ViRWwgPT4ge1xuICAgICAgaWYgKHN1YkVsKSB7XG4gICAgICAgIHN1YkVsLmNsYXNzTGlzdFtkaXNhYmxlZCA/ICdhZGQnIDogJ3JlbW92ZSddKC4uLnBhcmFtcy5kaXNhYmxlZENsYXNzLnNwbGl0KCcgJykpO1xuICAgICAgICBpZiAoc3ViRWwudGFnTmFtZSA9PT0gJ0JVVFRPTicpIHN1YkVsLmRpc2FibGVkID0gZGlzYWJsZWQ7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc3dpcGVyLmVuYWJsZWQpIHtcbiAgICAgICAgICBzdWJFbC5jbGFzc0xpc3Rbc3dpcGVyLmlzTG9ja2VkID8gJ2FkZCcgOiAncmVtb3ZlJ10ocGFyYW1zLmxvY2tDbGFzcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgLy8gVXBkYXRlIE5hdmlnYXRpb24gQnV0dG9uc1xuICAgIGNvbnN0IHtcbiAgICAgIG5leHRFbCxcbiAgICAgIHByZXZFbFxuICAgIH0gPSBzd2lwZXIubmF2aWdhdGlvbjtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICB0b2dnbGVFbChwcmV2RWwsIGZhbHNlKTtcbiAgICAgIHRvZ2dsZUVsKG5leHRFbCwgZmFsc2UpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0b2dnbGVFbChwcmV2RWwsIHN3aXBlci5pc0JlZ2lubmluZyAmJiAhc3dpcGVyLnBhcmFtcy5yZXdpbmQpO1xuICAgIHRvZ2dsZUVsKG5leHRFbCwgc3dpcGVyLmlzRW5kICYmICFzd2lwZXIucGFyYW1zLnJld2luZCk7XG4gIH1cbiAgZnVuY3Rpb24gb25QcmV2Q2xpY2soZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAoc3dpcGVyLmlzQmVnaW5uaW5nICYmICFzd2lwZXIucGFyYW1zLmxvb3AgJiYgIXN3aXBlci5wYXJhbXMucmV3aW5kKSByZXR1cm47XG4gICAgc3dpcGVyLnNsaWRlUHJldigpO1xuICAgIGVtaXQoJ25hdmlnYXRpb25QcmV2Jyk7XG4gIH1cbiAgZnVuY3Rpb24gb25OZXh0Q2xpY2soZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAoc3dpcGVyLmlzRW5kICYmICFzd2lwZXIucGFyYW1zLmxvb3AgJiYgIXN3aXBlci5wYXJhbXMucmV3aW5kKSByZXR1cm47XG4gICAgc3dpcGVyLnNsaWRlTmV4dCgpO1xuICAgIGVtaXQoJ25hdmlnYXRpb25OZXh0Jyk7XG4gIH1cbiAgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLm5hdmlnYXRpb247XG4gICAgc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uID0gY3JlYXRlRWxlbWVudElmTm90RGVmaW5lZChzd2lwZXIsIHN3aXBlci5vcmlnaW5hbFBhcmFtcy5uYXZpZ2F0aW9uLCBzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24sIHtcbiAgICAgIG5leHRFbDogJ3N3aXBlci1idXR0b24tbmV4dCcsXG4gICAgICBwcmV2RWw6ICdzd2lwZXItYnV0dG9uLXByZXYnXG4gICAgfSk7XG4gICAgaWYgKCEocGFyYW1zLm5leHRFbCB8fCBwYXJhbXMucHJldkVsKSkgcmV0dXJuO1xuICAgIGxldCBuZXh0RWwgPSBnZXRFbChwYXJhbXMubmV4dEVsKTtcbiAgICBsZXQgcHJldkVsID0gZ2V0RWwocGFyYW1zLnByZXZFbCk7XG4gICAgT2JqZWN0LmFzc2lnbihzd2lwZXIubmF2aWdhdGlvbiwge1xuICAgICAgbmV4dEVsLFxuICAgICAgcHJldkVsXG4gICAgfSk7XG4gICAgbmV4dEVsID0gbWFrZUVsZW1lbnRzQXJyYXkobmV4dEVsKTtcbiAgICBwcmV2RWwgPSBtYWtlRWxlbWVudHNBcnJheShwcmV2RWwpO1xuICAgIGNvbnN0IGluaXRCdXR0b24gPSAoZWwsIGRpcikgPT4ge1xuICAgICAgaWYgKGVsKSB7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZGlyID09PSAnbmV4dCcgPyBvbk5leHRDbGljayA6IG9uUHJldkNsaWNrKTtcbiAgICAgIH1cbiAgICAgIGlmICghc3dpcGVyLmVuYWJsZWQgJiYgZWwpIHtcbiAgICAgICAgZWwuY2xhc3NMaXN0LmFkZCguLi5wYXJhbXMubG9ja0NsYXNzLnNwbGl0KCcgJykpO1xuICAgICAgfVxuICAgIH07XG4gICAgbmV4dEVsLmZvckVhY2goZWwgPT4gaW5pdEJ1dHRvbihlbCwgJ25leHQnKSk7XG4gICAgcHJldkVsLmZvckVhY2goZWwgPT4gaW5pdEJ1dHRvbihlbCwgJ3ByZXYnKSk7XG4gIH1cbiAgZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICBsZXQge1xuICAgICAgbmV4dEVsLFxuICAgICAgcHJldkVsXG4gICAgfSA9IHN3aXBlci5uYXZpZ2F0aW9uO1xuICAgIG5leHRFbCA9IG1ha2VFbGVtZW50c0FycmF5KG5leHRFbCk7XG4gICAgcHJldkVsID0gbWFrZUVsZW1lbnRzQXJyYXkocHJldkVsKTtcbiAgICBjb25zdCBkZXN0cm95QnV0dG9uID0gKGVsLCBkaXIpID0+IHtcbiAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZGlyID09PSAnbmV4dCcgPyBvbk5leHRDbGljayA6IG9uUHJldkNsaWNrKTtcbiAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoLi4uc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLmRpc2FibGVkQ2xhc3Muc3BsaXQoJyAnKSk7XG4gICAgfTtcbiAgICBuZXh0RWwuZm9yRWFjaChlbCA9PiBkZXN0cm95QnV0dG9uKGVsLCAnbmV4dCcpKTtcbiAgICBwcmV2RWwuZm9yRWFjaChlbCA9PiBkZXN0cm95QnV0dG9uKGVsLCAncHJldicpKTtcbiAgfVxuICBvbignaW5pdCcsICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLmVuYWJsZWQgPT09IGZhbHNlKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIGRpc2FibGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5pdCgpO1xuICAgICAgdXBkYXRlKCk7XG4gICAgfVxuICB9KTtcbiAgb24oJ3RvRWRnZSBmcm9tRWRnZSBsb2NrIHVubG9jaycsICgpID0+IHtcbiAgICB1cGRhdGUoKTtcbiAgfSk7XG4gIG9uKCdkZXN0cm95JywgKCkgPT4ge1xuICAgIGRlc3Ryb3koKTtcbiAgfSk7XG4gIG9uKCdlbmFibGUgZGlzYWJsZScsICgpID0+IHtcbiAgICBsZXQge1xuICAgICAgbmV4dEVsLFxuICAgICAgcHJldkVsXG4gICAgfSA9IHN3aXBlci5uYXZpZ2F0aW9uO1xuICAgIG5leHRFbCA9IG1ha2VFbGVtZW50c0FycmF5KG5leHRFbCk7XG4gICAgcHJldkVsID0gbWFrZUVsZW1lbnRzQXJyYXkocHJldkVsKTtcbiAgICBpZiAoc3dpcGVyLmVuYWJsZWQpIHtcbiAgICAgIHVwZGF0ZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBbLi4ubmV4dEVsLCAuLi5wcmV2RWxdLmZpbHRlcihlbCA9PiAhIWVsKS5mb3JFYWNoKGVsID0+IGVsLmNsYXNzTGlzdC5hZGQoc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLmxvY2tDbGFzcykpO1xuICB9KTtcbiAgb24oJ2NsaWNrJywgKF9zLCBlKSA9PiB7XG4gICAgbGV0IHtcbiAgICAgIG5leHRFbCxcbiAgICAgIHByZXZFbFxuICAgIH0gPSBzd2lwZXIubmF2aWdhdGlvbjtcbiAgICBuZXh0RWwgPSBtYWtlRWxlbWVudHNBcnJheShuZXh0RWwpO1xuICAgIHByZXZFbCA9IG1ha2VFbGVtZW50c0FycmF5KHByZXZFbCk7XG4gICAgY29uc3QgdGFyZ2V0RWwgPSBlLnRhcmdldDtcbiAgICBsZXQgdGFyZ2V0SXNCdXR0b24gPSBwcmV2RWwuaW5jbHVkZXModGFyZ2V0RWwpIHx8IG5leHRFbC5pbmNsdWRlcyh0YXJnZXRFbCk7XG4gICAgaWYgKHN3aXBlci5pc0VsZW1lbnQgJiYgIXRhcmdldElzQnV0dG9uKSB7XG4gICAgICBjb25zdCBwYXRoID0gZS5wYXRoIHx8IGUuY29tcG9zZWRQYXRoICYmIGUuY29tcG9zZWRQYXRoKCk7XG4gICAgICBpZiAocGF0aCkge1xuICAgICAgICB0YXJnZXRJc0J1dHRvbiA9IHBhdGguZmluZChwYXRoRWwgPT4gbmV4dEVsLmluY2x1ZGVzKHBhdGhFbCkgfHwgcHJldkVsLmluY2x1ZGVzKHBhdGhFbCkpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLmhpZGVPbkNsaWNrICYmICF0YXJnZXRJc0J1dHRvbikge1xuICAgICAgaWYgKHN3aXBlci5wYWdpbmF0aW9uICYmIHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbiAmJiBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uY2xpY2thYmxlICYmIChzd2lwZXIucGFnaW5hdGlvbi5lbCA9PT0gdGFyZ2V0RWwgfHwgc3dpcGVyLnBhZ2luYXRpb24uZWwuY29udGFpbnModGFyZ2V0RWwpKSkgcmV0dXJuO1xuICAgICAgbGV0IGlzSGlkZGVuO1xuICAgICAgaWYgKG5leHRFbC5sZW5ndGgpIHtcbiAgICAgICAgaXNIaWRkZW4gPSBuZXh0RWxbMF0uY2xhc3NMaXN0LmNvbnRhaW5zKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5oaWRkZW5DbGFzcyk7XG4gICAgICB9IGVsc2UgaWYgKHByZXZFbC5sZW5ndGgpIHtcbiAgICAgICAgaXNIaWRkZW4gPSBwcmV2RWxbMF0uY2xhc3NMaXN0LmNvbnRhaW5zKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5oaWRkZW5DbGFzcyk7XG4gICAgICB9XG4gICAgICBpZiAoaXNIaWRkZW4gPT09IHRydWUpIHtcbiAgICAgICAgZW1pdCgnbmF2aWdhdGlvblNob3cnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVtaXQoJ25hdmlnYXRpb25IaWRlJyk7XG4gICAgICB9XG4gICAgICBbLi4ubmV4dEVsLCAuLi5wcmV2RWxdLmZpbHRlcihlbCA9PiAhIWVsKS5mb3JFYWNoKGVsID0+IGVsLmNsYXNzTGlzdC50b2dnbGUoc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLmhpZGRlbkNsYXNzKSk7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgZW5hYmxlID0gKCkgPT4ge1xuICAgIHN3aXBlci5lbC5jbGFzc0xpc3QucmVtb3ZlKC4uLnN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5uYXZpZ2F0aW9uRGlzYWJsZWRDbGFzcy5zcGxpdCgnICcpKTtcbiAgICBpbml0KCk7XG4gICAgdXBkYXRlKCk7XG4gIH07XG4gIGNvbnN0IGRpc2FibGUgPSAoKSA9PiB7XG4gICAgc3dpcGVyLmVsLmNsYXNzTGlzdC5hZGQoLi4uc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLm5hdmlnYXRpb25EaXNhYmxlZENsYXNzLnNwbGl0KCcgJykpO1xuICAgIGRlc3Ryb3koKTtcbiAgfTtcbiAgT2JqZWN0LmFzc2lnbihzd2lwZXIubmF2aWdhdGlvbiwge1xuICAgIGVuYWJsZSxcbiAgICBkaXNhYmxlLFxuICAgIHVwZGF0ZSxcbiAgICBpbml0LFxuICAgIGRlc3Ryb3lcbiAgfSk7XG59XG5cbmV4cG9ydCB7IE5hdmlnYXRpb24gYXMgZGVmYXVsdCB9O1xuIiwiaW1wb3J0IHsgZSBhcyBlbGVtZW50Q2hpbGRyZW4sIGMgYXMgY3JlYXRlRWxlbWVudCB9IGZyb20gJy4vdXRpbHMubWpzJztcblxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudElmTm90RGVmaW5lZChzd2lwZXIsIG9yaWdpbmFsUGFyYW1zLCBwYXJhbXMsIGNoZWNrUHJvcHMpIHtcbiAgaWYgKHN3aXBlci5wYXJhbXMuY3JlYXRlRWxlbWVudHMpIHtcbiAgICBPYmplY3Qua2V5cyhjaGVja1Byb3BzKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICBpZiAoIXBhcmFtc1trZXldICYmIHBhcmFtcy5hdXRvID09PSB0cnVlKSB7XG4gICAgICAgIGxldCBlbGVtZW50ID0gZWxlbWVudENoaWxkcmVuKHN3aXBlci5lbCwgYC4ke2NoZWNrUHJvcHNba2V5XX1gKVswXTtcbiAgICAgICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgICAgZWxlbWVudCA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicsIGNoZWNrUHJvcHNba2V5XSk7XG4gICAgICAgICAgZWxlbWVudC5jbGFzc05hbWUgPSBjaGVja1Byb3BzW2tleV07XG4gICAgICAgICAgc3dpcGVyLmVsLmFwcGVuZChlbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgICBwYXJhbXNba2V5XSA9IGVsZW1lbnQ7XG4gICAgICAgIG9yaWdpbmFsUGFyYW1zW2tleV0gPSBlbGVtZW50O1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBwYXJhbXM7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZUVsZW1lbnRJZk5vdERlZmluZWQgYXMgYyB9O1xuIiwiZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpOyBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzczsgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG4vKiFcbiAqIEdTQVAgMy4xMi41XG4gKiBodHRwczovL2dzYXAuY29tXG4gKlxuICogQGxpY2Vuc2UgQ29weXJpZ2h0IDIwMDgtMjAyNCwgR3JlZW5Tb2NrLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogU3ViamVjdCB0byB0aGUgdGVybXMgYXQgaHR0cHM6Ly9nc2FwLmNvbS9zdGFuZGFyZC1saWNlbnNlIG9yIGZvclxuICogQ2x1YiBHU0FQIG1lbWJlcnMsIHRoZSBhZ3JlZW1lbnQgaXNzdWVkIHdpdGggdGhhdCBtZW1iZXJzaGlwLlxuICogQGF1dGhvcjogSmFjayBEb3lsZSwgamFja0BncmVlbnNvY2suY29tXG4qL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xudmFyIF9jb25maWcgPSB7XG4gIGF1dG9TbGVlcDogMTIwLFxuICBmb3JjZTNEOiBcImF1dG9cIixcbiAgbnVsbFRhcmdldFdhcm46IDEsXG4gIHVuaXRzOiB7XG4gICAgbGluZUhlaWdodDogXCJcIlxuICB9XG59LFxuICAgIF9kZWZhdWx0cyA9IHtcbiAgZHVyYXRpb246IC41LFxuICBvdmVyd3JpdGU6IGZhbHNlLFxuICBkZWxheTogMFxufSxcbiAgICBfc3VwcHJlc3NPdmVyd3JpdGVzLFxuICAgIF9yZXZlcnRpbmcsXG4gICAgX2NvbnRleHQsXG4gICAgX2JpZ051bSA9IDFlOCxcbiAgICBfdGlueU51bSA9IDEgLyBfYmlnTnVtLFxuICAgIF8yUEkgPSBNYXRoLlBJICogMixcbiAgICBfSEFMRl9QSSA9IF8yUEkgLyA0LFxuICAgIF9nc0lEID0gMCxcbiAgICBfc3FydCA9IE1hdGguc3FydCxcbiAgICBfY29zID0gTWF0aC5jb3MsXG4gICAgX3NpbiA9IE1hdGguc2luLFxuICAgIF9pc1N0cmluZyA9IGZ1bmN0aW9uIF9pc1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiO1xufSxcbiAgICBfaXNGdW5jdGlvbiA9IGZ1bmN0aW9uIF9pc0Z1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIjtcbn0sXG4gICAgX2lzTnVtYmVyID0gZnVuY3Rpb24gX2lzTnVtYmVyKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCI7XG59LFxuICAgIF9pc1VuZGVmaW5lZCA9IGZ1bmN0aW9uIF9pc1VuZGVmaW5lZCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcInVuZGVmaW5lZFwiO1xufSxcbiAgICBfaXNPYmplY3QgPSBmdW5jdGlvbiBfaXNPYmplY3QodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIjtcbn0sXG4gICAgX2lzTm90RmFsc2UgPSBmdW5jdGlvbiBfaXNOb3RGYWxzZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT09IGZhbHNlO1xufSxcbiAgICBfd2luZG93RXhpc3RzID0gZnVuY3Rpb24gX3dpbmRvd0V4aXN0cygpIHtcbiAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCI7XG59LFxuICAgIF9pc0Z1bmNPclN0cmluZyA9IGZ1bmN0aW9uIF9pc0Z1bmNPclN0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gX2lzRnVuY3Rpb24odmFsdWUpIHx8IF9pc1N0cmluZyh2YWx1ZSk7XG59LFxuICAgIF9pc1R5cGVkQXJyYXkgPSB0eXBlb2YgQXJyYXlCdWZmZXIgPT09IFwiZnVuY3Rpb25cIiAmJiBBcnJheUJ1ZmZlci5pc1ZpZXcgfHwgZnVuY3Rpb24gKCkge30sXG4gICAgLy8gbm90ZTogSUUxMCBoYXMgQXJyYXlCdWZmZXIsIGJ1dCBOT1QgQXJyYXlCdWZmZXIuaXNWaWV3KCkuXG5faXNBcnJheSA9IEFycmF5LmlzQXJyYXksXG4gICAgX3N0cmljdE51bUV4cCA9IC8oPzotP1xcLj9cXGR8XFwuKSsvZ2ksXG4gICAgLy9vbmx5IG51bWJlcnMgKGluY2x1ZGluZyBuZWdhdGl2ZXMgYW5kIGRlY2ltYWxzKSBidXQgTk9UIHJlbGF0aXZlIHZhbHVlcy5cbl9udW1FeHAgPSAvWy0rPS5dKlxcZCtbLmVcXC0rXSpcXGQqW2VcXC0rXSpcXGQqL2csXG4gICAgLy9maW5kcyBhbnkgbnVtYmVycywgaW5jbHVkaW5nIG9uZXMgdGhhdCBzdGFydCB3aXRoICs9IG9yIC09LCBuZWdhdGl2ZSBudW1iZXJzLCBhbmQgb25lcyBpbiBzY2llbnRpZmljIG5vdGF0aW9uIGxpa2UgMWUtOC5cbl9udW1XaXRoVW5pdEV4cCA9IC9bLSs9Ll0qXFxkK1suZS1dKlxcZCpbYS16JV0qL2csXG4gICAgX2NvbXBsZXhTdHJpbmdOdW1FeHAgPSAvWy0rPS5dKlxcZCtcXC4/XFxkKig/OmUtfGVcXCspP1xcZCovZ2ksXG4gICAgLy9kdXBsaWNhdGUgc28gdGhhdCB3aGlsZSB3ZSdyZSBsb29waW5nIHRocm91Z2ggbWF0Y2hlcyBmcm9tIGV4ZWMoKSwgaXQgZG9lc24ndCBjb250YW1pbmF0ZSB0aGUgbGFzdEluZGV4IG9mIF9udW1FeHAgd2hpY2ggd2UgdXNlIHRvIHNlYXJjaCBmb3IgY29sb3JzIHRvby5cbl9yZWxFeHAgPSAvWystXT0tP1suXFxkXSsvLFxuICAgIF9kZWxpbWl0ZWRWYWx1ZUV4cCA9IC9bXiwnXCJcXFtcXF1cXHNdKy9naSxcbiAgICAvLyBwcmV2aW91c2x5IC9bI1xcLSsuXSpcXGJbYS16XFxkXFwtPSslLl0rL2dpIGJ1dCBkaWRuJ3QgY2F0Y2ggc3BlY2lhbCBjaGFyYWN0ZXJzLlxuX3VuaXRFeHAgPSAvXlsrXFwtPWVcXHNcXGRdKlxcZCtbLlxcZF0qKFthLXpdKnwlKVxccyokL2ksXG4gICAgX2dsb2JhbFRpbWVsaW5lLFxuICAgIF93aW4sXG4gICAgX2NvcmVJbml0dGVkLFxuICAgIF9kb2MsXG4gICAgX2dsb2JhbHMgPSB7fSxcbiAgICBfaW5zdGFsbFNjb3BlID0ge30sXG4gICAgX2NvcmVSZWFkeSxcbiAgICBfaW5zdGFsbCA9IGZ1bmN0aW9uIF9pbnN0YWxsKHNjb3BlKSB7XG4gIHJldHVybiAoX2luc3RhbGxTY29wZSA9IF9tZXJnZShzY29wZSwgX2dsb2JhbHMpKSAmJiBnc2FwO1xufSxcbiAgICBfbWlzc2luZ1BsdWdpbiA9IGZ1bmN0aW9uIF9taXNzaW5nUGx1Z2luKHByb3BlcnR5LCB2YWx1ZSkge1xuICByZXR1cm4gY29uc29sZS53YXJuKFwiSW52YWxpZCBwcm9wZXJ0eVwiLCBwcm9wZXJ0eSwgXCJzZXQgdG9cIiwgdmFsdWUsIFwiTWlzc2luZyBwbHVnaW4/IGdzYXAucmVnaXN0ZXJQbHVnaW4oKVwiKTtcbn0sXG4gICAgX3dhcm4gPSBmdW5jdGlvbiBfd2FybihtZXNzYWdlLCBzdXBwcmVzcykge1xuICByZXR1cm4gIXN1cHByZXNzICYmIGNvbnNvbGUud2FybihtZXNzYWdlKTtcbn0sXG4gICAgX2FkZEdsb2JhbCA9IGZ1bmN0aW9uIF9hZGRHbG9iYWwobmFtZSwgb2JqKSB7XG4gIHJldHVybiBuYW1lICYmIChfZ2xvYmFsc1tuYW1lXSA9IG9iaikgJiYgX2luc3RhbGxTY29wZSAmJiAoX2luc3RhbGxTY29wZVtuYW1lXSA9IG9iaikgfHwgX2dsb2JhbHM7XG59LFxuICAgIF9lbXB0eUZ1bmMgPSBmdW5jdGlvbiBfZW1wdHlGdW5jKCkge1xuICByZXR1cm4gMDtcbn0sXG4gICAgX3N0YXJ0QXRSZXZlcnRDb25maWcgPSB7XG4gIHN1cHByZXNzRXZlbnRzOiB0cnVlLFxuICBpc1N0YXJ0OiB0cnVlLFxuICBraWxsOiBmYWxzZVxufSxcbiAgICBfcmV2ZXJ0Q29uZmlnTm9LaWxsID0ge1xuICBzdXBwcmVzc0V2ZW50czogdHJ1ZSxcbiAga2lsbDogZmFsc2Vcbn0sXG4gICAgX3JldmVydENvbmZpZyA9IHtcbiAgc3VwcHJlc3NFdmVudHM6IHRydWVcbn0sXG4gICAgX3Jlc2VydmVkUHJvcHMgPSB7fSxcbiAgICBfbGF6eVR3ZWVucyA9IFtdLFxuICAgIF9sYXp5TG9va3VwID0ge30sXG4gICAgX2xhc3RSZW5kZXJlZEZyYW1lLFxuICAgIF9wbHVnaW5zID0ge30sXG4gICAgX2VmZmVjdHMgPSB7fSxcbiAgICBfbmV4dEdDRnJhbWUgPSAzMCxcbiAgICBfaGFybmVzc1BsdWdpbnMgPSBbXSxcbiAgICBfY2FsbGJhY2tOYW1lcyA9IFwiXCIsXG4gICAgX2hhcm5lc3MgPSBmdW5jdGlvbiBfaGFybmVzcyh0YXJnZXRzKSB7XG4gIHZhciB0YXJnZXQgPSB0YXJnZXRzWzBdLFxuICAgICAgaGFybmVzc1BsdWdpbixcbiAgICAgIGk7XG4gIF9pc09iamVjdCh0YXJnZXQpIHx8IF9pc0Z1bmN0aW9uKHRhcmdldCkgfHwgKHRhcmdldHMgPSBbdGFyZ2V0c10pO1xuXG4gIGlmICghKGhhcm5lc3NQbHVnaW4gPSAodGFyZ2V0Ll9nc2FwIHx8IHt9KS5oYXJuZXNzKSkge1xuICAgIC8vIGZpbmQgdGhlIGZpcnN0IHRhcmdldCB3aXRoIGEgaGFybmVzcy4gV2UgYXNzdW1lIHRhcmdldHMgcGFzc2VkIGludG8gYW4gYW5pbWF0aW9uIHdpbGwgYmUgb2Ygc2ltaWxhciB0eXBlLCBtZWFuaW5nIHRoZSBzYW1lIGtpbmQgb2YgaGFybmVzcyBjYW4gYmUgdXNlZCBmb3IgdGhlbSBhbGwgKHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbilcbiAgICBpID0gX2hhcm5lc3NQbHVnaW5zLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0gJiYgIV9oYXJuZXNzUGx1Z2luc1tpXS50YXJnZXRUZXN0KHRhcmdldCkpIHt9XG5cbiAgICBoYXJuZXNzUGx1Z2luID0gX2hhcm5lc3NQbHVnaW5zW2ldO1xuICB9XG5cbiAgaSA9IHRhcmdldHMubGVuZ3RoO1xuXG4gIHdoaWxlIChpLS0pIHtcbiAgICB0YXJnZXRzW2ldICYmICh0YXJnZXRzW2ldLl9nc2FwIHx8ICh0YXJnZXRzW2ldLl9nc2FwID0gbmV3IEdTQ2FjaGUodGFyZ2V0c1tpXSwgaGFybmVzc1BsdWdpbikpKSB8fCB0YXJnZXRzLnNwbGljZShpLCAxKTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXRzO1xufSxcbiAgICBfZ2V0Q2FjaGUgPSBmdW5jdGlvbiBfZ2V0Q2FjaGUodGFyZ2V0KSB7XG4gIHJldHVybiB0YXJnZXQuX2dzYXAgfHwgX2hhcm5lc3ModG9BcnJheSh0YXJnZXQpKVswXS5fZ3NhcDtcbn0sXG4gICAgX2dldFByb3BlcnR5ID0gZnVuY3Rpb24gX2dldFByb3BlcnR5KHRhcmdldCwgcHJvcGVydHksIHYpIHtcbiAgcmV0dXJuICh2ID0gdGFyZ2V0W3Byb3BlcnR5XSkgJiYgX2lzRnVuY3Rpb24odikgPyB0YXJnZXRbcHJvcGVydHldKCkgOiBfaXNVbmRlZmluZWQodikgJiYgdGFyZ2V0LmdldEF0dHJpYnV0ZSAmJiB0YXJnZXQuZ2V0QXR0cmlidXRlKHByb3BlcnR5KSB8fCB2O1xufSxcbiAgICBfZm9yRWFjaE5hbWUgPSBmdW5jdGlvbiBfZm9yRWFjaE5hbWUobmFtZXMsIGZ1bmMpIHtcbiAgcmV0dXJuIChuYW1lcyA9IG5hbWVzLnNwbGl0KFwiLFwiKSkuZm9yRWFjaChmdW5jKSB8fCBuYW1lcztcbn0sXG4gICAgLy9zcGxpdCBhIGNvbW1hLWRlbGltaXRlZCBsaXN0IG9mIG5hbWVzIGludG8gYW4gYXJyYXksIHRoZW4gcnVuIGEgZm9yRWFjaCgpIGZ1bmN0aW9uIGFuZCByZXR1cm4gdGhlIHNwbGl0IGFycmF5ICh0aGlzIGlzIGp1c3QgYSB3YXkgdG8gY29uc29saWRhdGUvc2hvcnRlbiBzb21lIGNvZGUpLlxuX3JvdW5kID0gZnVuY3Rpb24gX3JvdW5kKHZhbHVlKSB7XG4gIHJldHVybiBNYXRoLnJvdW5kKHZhbHVlICogMTAwMDAwKSAvIDEwMDAwMCB8fCAwO1xufSxcbiAgICBfcm91bmRQcmVjaXNlID0gZnVuY3Rpb24gX3JvdW5kUHJlY2lzZSh2YWx1ZSkge1xuICByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSAqIDEwMDAwMDAwKSAvIDEwMDAwMDAwIHx8IDA7XG59LFxuICAgIC8vIGluY3JlYXNlZCBwcmVjaXNpb24gbW9zdGx5IGZvciB0aW1pbmcgdmFsdWVzLlxuX3BhcnNlUmVsYXRpdmUgPSBmdW5jdGlvbiBfcGFyc2VSZWxhdGl2ZShzdGFydCwgdmFsdWUpIHtcbiAgdmFyIG9wZXJhdG9yID0gdmFsdWUuY2hhckF0KDApLFxuICAgICAgZW5kID0gcGFyc2VGbG9hdCh2YWx1ZS5zdWJzdHIoMikpO1xuICBzdGFydCA9IHBhcnNlRmxvYXQoc3RhcnQpO1xuICByZXR1cm4gb3BlcmF0b3IgPT09IFwiK1wiID8gc3RhcnQgKyBlbmQgOiBvcGVyYXRvciA9PT0gXCItXCIgPyBzdGFydCAtIGVuZCA6IG9wZXJhdG9yID09PSBcIipcIiA/IHN0YXJ0ICogZW5kIDogc3RhcnQgLyBlbmQ7XG59LFxuICAgIF9hcnJheUNvbnRhaW5zQW55ID0gZnVuY3Rpb24gX2FycmF5Q29udGFpbnNBbnkodG9TZWFyY2gsIHRvRmluZCkge1xuICAvL3NlYXJjaGVzIG9uZSBhcnJheSB0byBmaW5kIG1hdGNoZXMgZm9yIGFueSBvZiB0aGUgaXRlbXMgaW4gdGhlIHRvRmluZCBhcnJheS4gQXMgc29vbiBhcyBvbmUgaXMgZm91bmQsIGl0IHJldHVybnMgdHJ1ZS4gSXQgZG9lcyBOT1QgcmV0dXJuIGFsbCB0aGUgbWF0Y2hlczsgaXQncyBzaW1wbHkgYSBib29sZWFuIHNlYXJjaC5cbiAgdmFyIGwgPSB0b0ZpbmQubGVuZ3RoLFxuICAgICAgaSA9IDA7XG5cbiAgZm9yICg7IHRvU2VhcmNoLmluZGV4T2YodG9GaW5kW2ldKSA8IDAgJiYgKytpIDwgbDspIHt9XG5cbiAgcmV0dXJuIGkgPCBsO1xufSxcbiAgICBfbGF6eVJlbmRlciA9IGZ1bmN0aW9uIF9sYXp5UmVuZGVyKCkge1xuICB2YXIgbCA9IF9sYXp5VHdlZW5zLmxlbmd0aCxcbiAgICAgIGEgPSBfbGF6eVR3ZWVucy5zbGljZSgwKSxcbiAgICAgIGksXG4gICAgICB0d2VlbjtcblxuICBfbGF6eUxvb2t1cCA9IHt9O1xuICBfbGF6eVR3ZWVucy5sZW5ndGggPSAwO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICB0d2VlbiA9IGFbaV07XG4gICAgdHdlZW4gJiYgdHdlZW4uX2xhenkgJiYgKHR3ZWVuLnJlbmRlcih0d2Vlbi5fbGF6eVswXSwgdHdlZW4uX2xhenlbMV0sIHRydWUpLl9sYXp5ID0gMCk7XG4gIH1cbn0sXG4gICAgX2xhenlTYWZlUmVuZGVyID0gZnVuY3Rpb24gX2xhenlTYWZlUmVuZGVyKGFuaW1hdGlvbiwgdGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKSB7XG4gIF9sYXp5VHdlZW5zLmxlbmd0aCAmJiAhX3JldmVydGluZyAmJiBfbGF6eVJlbmRlcigpO1xuICBhbmltYXRpb24ucmVuZGVyKHRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSB8fCBfcmV2ZXJ0aW5nICYmIHRpbWUgPCAwICYmIChhbmltYXRpb24uX2luaXR0ZWQgfHwgYW5pbWF0aW9uLl9zdGFydEF0KSk7XG4gIF9sYXp5VHdlZW5zLmxlbmd0aCAmJiAhX3JldmVydGluZyAmJiBfbGF6eVJlbmRlcigpOyAvL2luIGNhc2UgcmVuZGVyaW5nIGNhdXNlZCBhbnkgdHdlZW5zIHRvIGxhenktaW5pdCwgd2Ugc2hvdWxkIHJlbmRlciB0aGVtIGJlY2F1c2UgdHlwaWNhbGx5IHdoZW4gc29tZW9uZSBjYWxscyBzZWVrKCkgb3IgdGltZSgpIG9yIHByb2dyZXNzKCksIHRoZXkgZXhwZWN0IGFuIGltbWVkaWF0ZSByZW5kZXIuXG59LFxuICAgIF9udW1lcmljSWZQb3NzaWJsZSA9IGZ1bmN0aW9uIF9udW1lcmljSWZQb3NzaWJsZSh2YWx1ZSkge1xuICB2YXIgbiA9IHBhcnNlRmxvYXQodmFsdWUpO1xuICByZXR1cm4gKG4gfHwgbiA9PT0gMCkgJiYgKHZhbHVlICsgXCJcIikubWF0Y2goX2RlbGltaXRlZFZhbHVlRXhwKS5sZW5ndGggPCAyID8gbiA6IF9pc1N0cmluZyh2YWx1ZSkgPyB2YWx1ZS50cmltKCkgOiB2YWx1ZTtcbn0sXG4gICAgX3Bhc3NUaHJvdWdoID0gZnVuY3Rpb24gX3Bhc3NUaHJvdWdoKHApIHtcbiAgcmV0dXJuIHA7XG59LFxuICAgIF9zZXREZWZhdWx0cyA9IGZ1bmN0aW9uIF9zZXREZWZhdWx0cyhvYmosIGRlZmF1bHRzKSB7XG4gIGZvciAodmFyIHAgaW4gZGVmYXVsdHMpIHtcbiAgICBwIGluIG9iaiB8fCAob2JqW3BdID0gZGVmYXVsdHNbcF0pO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn0sXG4gICAgX3NldEtleWZyYW1lRGVmYXVsdHMgPSBmdW5jdGlvbiBfc2V0S2V5ZnJhbWVEZWZhdWx0cyhleGNsdWRlRHVyYXRpb24pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChvYmosIGRlZmF1bHRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBkZWZhdWx0cykge1xuICAgICAgcCBpbiBvYmogfHwgcCA9PT0gXCJkdXJhdGlvblwiICYmIGV4Y2x1ZGVEdXJhdGlvbiB8fCBwID09PSBcImVhc2VcIiB8fCAob2JqW3BdID0gZGVmYXVsdHNbcF0pO1xuICAgIH1cbiAgfTtcbn0sXG4gICAgX21lcmdlID0gZnVuY3Rpb24gX21lcmdlKGJhc2UsIHRvTWVyZ2UpIHtcbiAgZm9yICh2YXIgcCBpbiB0b01lcmdlKSB7XG4gICAgYmFzZVtwXSA9IHRvTWVyZ2VbcF07XG4gIH1cblxuICByZXR1cm4gYmFzZTtcbn0sXG4gICAgX21lcmdlRGVlcCA9IGZ1bmN0aW9uIF9tZXJnZURlZXAoYmFzZSwgdG9NZXJnZSkge1xuICBmb3IgKHZhciBwIGluIHRvTWVyZ2UpIHtcbiAgICBwICE9PSBcIl9fcHJvdG9fX1wiICYmIHAgIT09IFwiY29uc3RydWN0b3JcIiAmJiBwICE9PSBcInByb3RvdHlwZVwiICYmIChiYXNlW3BdID0gX2lzT2JqZWN0KHRvTWVyZ2VbcF0pID8gX21lcmdlRGVlcChiYXNlW3BdIHx8IChiYXNlW3BdID0ge30pLCB0b01lcmdlW3BdKSA6IHRvTWVyZ2VbcF0pO1xuICB9XG5cbiAgcmV0dXJuIGJhc2U7XG59LFxuICAgIF9jb3B5RXhjbHVkaW5nID0gZnVuY3Rpb24gX2NvcHlFeGNsdWRpbmcob2JqLCBleGNsdWRpbmcpIHtcbiAgdmFyIGNvcHkgPSB7fSxcbiAgICAgIHA7XG5cbiAgZm9yIChwIGluIG9iaikge1xuICAgIHAgaW4gZXhjbHVkaW5nIHx8IChjb3B5W3BdID0gb2JqW3BdKTtcbiAgfVxuXG4gIHJldHVybiBjb3B5O1xufSxcbiAgICBfaW5oZXJpdERlZmF1bHRzID0gZnVuY3Rpb24gX2luaGVyaXREZWZhdWx0cyh2YXJzKSB7XG4gIHZhciBwYXJlbnQgPSB2YXJzLnBhcmVudCB8fCBfZ2xvYmFsVGltZWxpbmUsXG4gICAgICBmdW5jID0gdmFycy5rZXlmcmFtZXMgPyBfc2V0S2V5ZnJhbWVEZWZhdWx0cyhfaXNBcnJheSh2YXJzLmtleWZyYW1lcykpIDogX3NldERlZmF1bHRzO1xuXG4gIGlmIChfaXNOb3RGYWxzZSh2YXJzLmluaGVyaXQpKSB7XG4gICAgd2hpbGUgKHBhcmVudCkge1xuICAgICAgZnVuYyh2YXJzLCBwYXJlbnQudmFycy5kZWZhdWx0cyk7XG4gICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50IHx8IHBhcmVudC5fZHA7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHZhcnM7XG59LFxuICAgIF9hcnJheXNNYXRjaCA9IGZ1bmN0aW9uIF9hcnJheXNNYXRjaChhMSwgYTIpIHtcbiAgdmFyIGkgPSBhMS5sZW5ndGgsXG4gICAgICBtYXRjaCA9IGkgPT09IGEyLmxlbmd0aDtcblxuICB3aGlsZSAobWF0Y2ggJiYgaS0tICYmIGExW2ldID09PSBhMltpXSkge31cblxuICByZXR1cm4gaSA8IDA7XG59LFxuICAgIF9hZGRMaW5rZWRMaXN0SXRlbSA9IGZ1bmN0aW9uIF9hZGRMaW5rZWRMaXN0SXRlbShwYXJlbnQsIGNoaWxkLCBmaXJzdFByb3AsIGxhc3RQcm9wLCBzb3J0QnkpIHtcbiAgaWYgKGZpcnN0UHJvcCA9PT0gdm9pZCAwKSB7XG4gICAgZmlyc3RQcm9wID0gXCJfZmlyc3RcIjtcbiAgfVxuXG4gIGlmIChsYXN0UHJvcCA9PT0gdm9pZCAwKSB7XG4gICAgbGFzdFByb3AgPSBcIl9sYXN0XCI7XG4gIH1cblxuICB2YXIgcHJldiA9IHBhcmVudFtsYXN0UHJvcF0sXG4gICAgICB0O1xuXG4gIGlmIChzb3J0QnkpIHtcbiAgICB0ID0gY2hpbGRbc29ydEJ5XTtcblxuICAgIHdoaWxlIChwcmV2ICYmIHByZXZbc29ydEJ5XSA+IHQpIHtcbiAgICAgIHByZXYgPSBwcmV2Ll9wcmV2O1xuICAgIH1cbiAgfVxuXG4gIGlmIChwcmV2KSB7XG4gICAgY2hpbGQuX25leHQgPSBwcmV2Ll9uZXh0O1xuICAgIHByZXYuX25leHQgPSBjaGlsZDtcbiAgfSBlbHNlIHtcbiAgICBjaGlsZC5fbmV4dCA9IHBhcmVudFtmaXJzdFByb3BdO1xuICAgIHBhcmVudFtmaXJzdFByb3BdID0gY2hpbGQ7XG4gIH1cblxuICBpZiAoY2hpbGQuX25leHQpIHtcbiAgICBjaGlsZC5fbmV4dC5fcHJldiA9IGNoaWxkO1xuICB9IGVsc2Uge1xuICAgIHBhcmVudFtsYXN0UHJvcF0gPSBjaGlsZDtcbiAgfVxuXG4gIGNoaWxkLl9wcmV2ID0gcHJldjtcbiAgY2hpbGQucGFyZW50ID0gY2hpbGQuX2RwID0gcGFyZW50O1xuICByZXR1cm4gY2hpbGQ7XG59LFxuICAgIF9yZW1vdmVMaW5rZWRMaXN0SXRlbSA9IGZ1bmN0aW9uIF9yZW1vdmVMaW5rZWRMaXN0SXRlbShwYXJlbnQsIGNoaWxkLCBmaXJzdFByb3AsIGxhc3RQcm9wKSB7XG4gIGlmIChmaXJzdFByb3AgPT09IHZvaWQgMCkge1xuICAgIGZpcnN0UHJvcCA9IFwiX2ZpcnN0XCI7XG4gIH1cblxuICBpZiAobGFzdFByb3AgPT09IHZvaWQgMCkge1xuICAgIGxhc3RQcm9wID0gXCJfbGFzdFwiO1xuICB9XG5cbiAgdmFyIHByZXYgPSBjaGlsZC5fcHJldixcbiAgICAgIG5leHQgPSBjaGlsZC5fbmV4dDtcblxuICBpZiAocHJldikge1xuICAgIHByZXYuX25leHQgPSBuZXh0O1xuICB9IGVsc2UgaWYgKHBhcmVudFtmaXJzdFByb3BdID09PSBjaGlsZCkge1xuICAgIHBhcmVudFtmaXJzdFByb3BdID0gbmV4dDtcbiAgfVxuXG4gIGlmIChuZXh0KSB7XG4gICAgbmV4dC5fcHJldiA9IHByZXY7XG4gIH0gZWxzZSBpZiAocGFyZW50W2xhc3RQcm9wXSA9PT0gY2hpbGQpIHtcbiAgICBwYXJlbnRbbGFzdFByb3BdID0gcHJldjtcbiAgfVxuXG4gIGNoaWxkLl9uZXh0ID0gY2hpbGQuX3ByZXYgPSBjaGlsZC5wYXJlbnQgPSBudWxsOyAvLyBkb24ndCBkZWxldGUgdGhlIF9kcCBqdXN0IHNvIHdlIGNhbiByZXZlcnQgaWYgbmVjZXNzYXJ5LiBCdXQgcGFyZW50IHNob3VsZCBiZSBudWxsIHRvIGluZGljYXRlIHRoZSBpdGVtIGlzbid0IGluIGEgbGlua2VkIGxpc3QuXG59LFxuICAgIF9yZW1vdmVGcm9tUGFyZW50ID0gZnVuY3Rpb24gX3JlbW92ZUZyb21QYXJlbnQoY2hpbGQsIG9ubHlJZlBhcmVudEhhc0F1dG9SZW1vdmUpIHtcbiAgY2hpbGQucGFyZW50ICYmICghb25seUlmUGFyZW50SGFzQXV0b1JlbW92ZSB8fCBjaGlsZC5wYXJlbnQuYXV0b1JlbW92ZUNoaWxkcmVuKSAmJiBjaGlsZC5wYXJlbnQucmVtb3ZlICYmIGNoaWxkLnBhcmVudC5yZW1vdmUoY2hpbGQpO1xuICBjaGlsZC5fYWN0ID0gMDtcbn0sXG4gICAgX3VuY2FjaGUgPSBmdW5jdGlvbiBfdW5jYWNoZShhbmltYXRpb24sIGNoaWxkKSB7XG4gIGlmIChhbmltYXRpb24gJiYgKCFjaGlsZCB8fCBjaGlsZC5fZW5kID4gYW5pbWF0aW9uLl9kdXIgfHwgY2hpbGQuX3N0YXJ0IDwgMCkpIHtcbiAgICAvLyBwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb246IGlmIGEgY2hpbGQgYW5pbWF0aW9uIGlzIHBhc3NlZCBpbiB3ZSBzaG91bGQgb25seSB1bmNhY2hlIGlmIHRoYXQgY2hpbGQgRVhURU5EUyB0aGUgYW5pbWF0aW9uIChpdHMgZW5kIHRpbWUgaXMgYmV5b25kIHRoZSBlbmQpXG4gICAgdmFyIGEgPSBhbmltYXRpb247XG5cbiAgICB3aGlsZSAoYSkge1xuICAgICAgYS5fZGlydHkgPSAxO1xuICAgICAgYSA9IGEucGFyZW50O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBhbmltYXRpb247XG59LFxuICAgIF9yZWNhY2hlQW5jZXN0b3JzID0gZnVuY3Rpb24gX3JlY2FjaGVBbmNlc3RvcnMoYW5pbWF0aW9uKSB7XG4gIHZhciBwYXJlbnQgPSBhbmltYXRpb24ucGFyZW50O1xuXG4gIHdoaWxlIChwYXJlbnQgJiYgcGFyZW50LnBhcmVudCkge1xuICAgIC8vc29tZXRpbWVzIHdlIG11c3QgZm9yY2UgYSByZS1zb3J0IG9mIGFsbCBjaGlsZHJlbiBhbmQgdXBkYXRlIHRoZSBkdXJhdGlvbi90b3RhbER1cmF0aW9uIG9mIGFsbCBhbmNlc3RvciB0aW1lbGluZXMgaW1tZWRpYXRlbHkgaW4gY2FzZSwgZm9yIGV4YW1wbGUsIGluIHRoZSBtaWRkbGUgb2YgYSByZW5kZXIgbG9vcCwgb25lIHR3ZWVuIGFsdGVycyBhbm90aGVyIHR3ZWVuJ3MgdGltZVNjYWxlIHdoaWNoIHNob3ZlcyBpdHMgc3RhcnRUaW1lIGJlZm9yZSAwLCBmb3JjaW5nIHRoZSBwYXJlbnQgdGltZWxpbmUgdG8gc2hpZnQgYXJvdW5kIGFuZCBzaGlmdENoaWxkcmVuKCkgd2hpY2ggY291bGQgYWZmZWN0IHRoYXQgbmV4dCB0d2VlbidzIHJlbmRlciAoc3RhcnRUaW1lKS4gRG9lc24ndCBtYXR0ZXIgZm9yIHRoZSByb290IHRpbWVsaW5lIHRob3VnaC5cbiAgICBwYXJlbnQuX2RpcnR5ID0gMTtcbiAgICBwYXJlbnQudG90YWxEdXJhdGlvbigpO1xuICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gIH1cblxuICByZXR1cm4gYW5pbWF0aW9uO1xufSxcbiAgICBfcmV3aW5kU3RhcnRBdCA9IGZ1bmN0aW9uIF9yZXdpbmRTdGFydEF0KHR3ZWVuLCB0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSkge1xuICByZXR1cm4gdHdlZW4uX3N0YXJ0QXQgJiYgKF9yZXZlcnRpbmcgPyB0d2Vlbi5fc3RhcnRBdC5yZXZlcnQoX3JldmVydENvbmZpZ05vS2lsbCkgOiB0d2Vlbi52YXJzLmltbWVkaWF0ZVJlbmRlciAmJiAhdHdlZW4udmFycy5hdXRvUmV2ZXJ0IHx8IHR3ZWVuLl9zdGFydEF0LnJlbmRlcih0b3RhbFRpbWUsIHRydWUsIGZvcmNlKSk7XG59LFxuICAgIF9oYXNOb1BhdXNlZEFuY2VzdG9ycyA9IGZ1bmN0aW9uIF9oYXNOb1BhdXNlZEFuY2VzdG9ycyhhbmltYXRpb24pIHtcbiAgcmV0dXJuICFhbmltYXRpb24gfHwgYW5pbWF0aW9uLl90cyAmJiBfaGFzTm9QYXVzZWRBbmNlc3RvcnMoYW5pbWF0aW9uLnBhcmVudCk7XG59LFxuICAgIF9lbGFwc2VkQ3ljbGVEdXJhdGlvbiA9IGZ1bmN0aW9uIF9lbGFwc2VkQ3ljbGVEdXJhdGlvbihhbmltYXRpb24pIHtcbiAgcmV0dXJuIGFuaW1hdGlvbi5fcmVwZWF0ID8gX2FuaW1hdGlvbkN5Y2xlKGFuaW1hdGlvbi5fdFRpbWUsIGFuaW1hdGlvbiA9IGFuaW1hdGlvbi5kdXJhdGlvbigpICsgYW5pbWF0aW9uLl9yRGVsYXkpICogYW5pbWF0aW9uIDogMDtcbn0sXG4gICAgLy8gZmVlZCBpbiB0aGUgdG90YWxUaW1lIGFuZCBjeWNsZUR1cmF0aW9uIGFuZCBpdCdsbCByZXR1cm4gdGhlIGN5Y2xlIChpdGVyYXRpb24gbWludXMgMSkgYW5kIGlmIHRoZSBwbGF5aGVhZCBpcyBleGFjdGx5IGF0IHRoZSB2ZXJ5IEVORCwgaXQgd2lsbCBOT1QgYnVtcCB1cCB0byB0aGUgbmV4dCBjeWNsZS5cbl9hbmltYXRpb25DeWNsZSA9IGZ1bmN0aW9uIF9hbmltYXRpb25DeWNsZSh0VGltZSwgY3ljbGVEdXJhdGlvbikge1xuICB2YXIgd2hvbGUgPSBNYXRoLmZsb29yKHRUaW1lIC89IGN5Y2xlRHVyYXRpb24pO1xuICByZXR1cm4gdFRpbWUgJiYgd2hvbGUgPT09IHRUaW1lID8gd2hvbGUgLSAxIDogd2hvbGU7XG59LFxuICAgIF9wYXJlbnRUb0NoaWxkVG90YWxUaW1lID0gZnVuY3Rpb24gX3BhcmVudFRvQ2hpbGRUb3RhbFRpbWUocGFyZW50VGltZSwgY2hpbGQpIHtcbiAgcmV0dXJuIChwYXJlbnRUaW1lIC0gY2hpbGQuX3N0YXJ0KSAqIGNoaWxkLl90cyArIChjaGlsZC5fdHMgPj0gMCA/IDAgOiBjaGlsZC5fZGlydHkgPyBjaGlsZC50b3RhbER1cmF0aW9uKCkgOiBjaGlsZC5fdER1cik7XG59LFxuICAgIF9zZXRFbmQgPSBmdW5jdGlvbiBfc2V0RW5kKGFuaW1hdGlvbikge1xuICByZXR1cm4gYW5pbWF0aW9uLl9lbmQgPSBfcm91bmRQcmVjaXNlKGFuaW1hdGlvbi5fc3RhcnQgKyAoYW5pbWF0aW9uLl90RHVyIC8gTWF0aC5hYnMoYW5pbWF0aW9uLl90cyB8fCBhbmltYXRpb24uX3J0cyB8fCBfdGlueU51bSkgfHwgMCkpO1xufSxcbiAgICBfYWxpZ25QbGF5aGVhZCA9IGZ1bmN0aW9uIF9hbGlnblBsYXloZWFkKGFuaW1hdGlvbiwgdG90YWxUaW1lKSB7XG4gIC8vIGFkanVzdHMgdGhlIGFuaW1hdGlvbidzIF9zdGFydCBhbmQgX2VuZCBhY2NvcmRpbmcgdG8gdGhlIHByb3ZpZGVkIHRvdGFsVGltZSAob25seSBpZiB0aGUgcGFyZW50J3Mgc21vb3RoQ2hpbGRUaW1pbmcgaXMgdHJ1ZSBhbmQgdGhlIGFuaW1hdGlvbiBpc24ndCBwYXVzZWQpLiBJdCBkb2Vzbid0IGRvIGFueSByZW5kZXJpbmcgb3IgZm9yY2luZyB0aGluZ3MgYmFjayBpbnRvIHBhcmVudCB0aW1lbGluZXMsIGV0Yy4gLSB0aGF0J3Mgd2hhdCB0b3RhbFRpbWUoKSBpcyBmb3IuXG4gIHZhciBwYXJlbnQgPSBhbmltYXRpb24uX2RwO1xuXG4gIGlmIChwYXJlbnQgJiYgcGFyZW50LnNtb290aENoaWxkVGltaW5nICYmIGFuaW1hdGlvbi5fdHMpIHtcbiAgICBhbmltYXRpb24uX3N0YXJ0ID0gX3JvdW5kUHJlY2lzZShwYXJlbnQuX3RpbWUgLSAoYW5pbWF0aW9uLl90cyA+IDAgPyB0b3RhbFRpbWUgLyBhbmltYXRpb24uX3RzIDogKChhbmltYXRpb24uX2RpcnR5ID8gYW5pbWF0aW9uLnRvdGFsRHVyYXRpb24oKSA6IGFuaW1hdGlvbi5fdER1cikgLSB0b3RhbFRpbWUpIC8gLWFuaW1hdGlvbi5fdHMpKTtcblxuICAgIF9zZXRFbmQoYW5pbWF0aW9uKTtcblxuICAgIHBhcmVudC5fZGlydHkgfHwgX3VuY2FjaGUocGFyZW50LCBhbmltYXRpb24pOyAvL2ZvciBwZXJmb3JtYW5jZSBpbXByb3ZlbWVudC4gSWYgdGhlIHBhcmVudCdzIGNhY2hlIGlzIGFscmVhZHkgZGlydHksIGl0IGFscmVhZHkgdG9vayBjYXJlIG9mIG1hcmtpbmcgdGhlIGFuY2VzdG9ycyBhcyBkaXJ0eSB0b28sIHNvIHNraXAgdGhlIGZ1bmN0aW9uIGNhbGwgaGVyZS5cbiAgfVxuXG4gIHJldHVybiBhbmltYXRpb247XG59LFxuXG4vKlxuX3RvdGFsVGltZVRvVGltZSA9IChjbGFtcGVkVG90YWxUaW1lLCBkdXJhdGlvbiwgcmVwZWF0LCByZXBlYXREZWxheSwgeW95bykgPT4ge1xuXHRsZXQgY3ljbGVEdXJhdGlvbiA9IGR1cmF0aW9uICsgcmVwZWF0RGVsYXksXG5cdFx0dGltZSA9IF9yb3VuZChjbGFtcGVkVG90YWxUaW1lICUgY3ljbGVEdXJhdGlvbik7XG5cdGlmICh0aW1lID4gZHVyYXRpb24pIHtcblx0XHR0aW1lID0gZHVyYXRpb247XG5cdH1cblx0cmV0dXJuICh5b3lvICYmICh+fihjbGFtcGVkVG90YWxUaW1lIC8gY3ljbGVEdXJhdGlvbikgJiAxKSkgPyBkdXJhdGlvbiAtIHRpbWUgOiB0aW1lO1xufSxcbiovXG5fcG9zdEFkZENoZWNrcyA9IGZ1bmN0aW9uIF9wb3N0QWRkQ2hlY2tzKHRpbWVsaW5lLCBjaGlsZCkge1xuICB2YXIgdDtcblxuICBpZiAoY2hpbGQuX3RpbWUgfHwgIWNoaWxkLl9kdXIgJiYgY2hpbGQuX2luaXR0ZWQgfHwgY2hpbGQuX3N0YXJ0IDwgdGltZWxpbmUuX3RpbWUgJiYgKGNoaWxkLl9kdXIgfHwgIWNoaWxkLmFkZCkpIHtcbiAgICAvLyBpbiBjYXNlLCBmb3IgZXhhbXBsZSwgdGhlIF9zdGFydCBpcyBtb3ZlZCBvbiBhIHR3ZWVuIHRoYXQgaGFzIGFscmVhZHkgcmVuZGVyZWQsIG9yIGlmIGl0J3MgYmVpbmcgaW5zZXJ0ZWQgaW50byBhIHRpbWVsaW5lIEJFRk9SRSB3aGVyZSB0aGUgcGxheWhlYWQgaXMgY3VycmVudGx5LiBJbWFnaW5lIGl0J3MgYXQgaXRzIGVuZCBzdGF0ZSwgdGhlbiB0aGUgc3RhcnRUaW1lIGlzIG1vdmVkIFdBWSBsYXRlciAoYWZ0ZXIgdGhlIGVuZCBvZiB0aGlzIHRpbWVsaW5lKSwgaXQgc2hvdWxkIHJlbmRlciBhdCBpdHMgYmVnaW5uaW5nLiBTcGVjaWFsIGNhc2U6IGlmIGl0J3MgYSB0aW1lbGluZSAoaGFzIC5hZGQoKSBtZXRob2QpIGFuZCBubyBkdXJhdGlvbiwgd2UgY2FuIHNraXAgcmVuZGVyaW5nIGJlY2F1c2UgdGhlIHVzZXIgbWF5IGJlIHBvcHVsYXRpbmcgaXQgQUZURVIgYWRkaW5nIGl0IHRvIGEgcGFyZW50IHRpbWVsaW5lICh1bmNvbnZlbnRpb25hbCwgYnV0IHBvc3NpYmxlLCBhbmQgd2Ugd291bGRuJ3Qgd2FudCBpdCB0byBnZXQgcmVtb3ZlZCBpZiB0aGUgcGFyZW50J3MgYXV0b1JlbW92ZUNoaWxkcmVuIGlzIHRydWUpLlxuICAgIHQgPSBfcGFyZW50VG9DaGlsZFRvdGFsVGltZSh0aW1lbGluZS5yYXdUaW1lKCksIGNoaWxkKTtcblxuICAgIGlmICghY2hpbGQuX2R1ciB8fCBfY2xhbXAoMCwgY2hpbGQudG90YWxEdXJhdGlvbigpLCB0KSAtIGNoaWxkLl90VGltZSA+IF90aW55TnVtKSB7XG4gICAgICBjaGlsZC5yZW5kZXIodCwgdHJ1ZSk7XG4gICAgfVxuICB9IC8vaWYgdGhlIHRpbWVsaW5lIGhhcyBhbHJlYWR5IGVuZGVkIGJ1dCB0aGUgaW5zZXJ0ZWQgdHdlZW4vdGltZWxpbmUgZXh0ZW5kcyB0aGUgZHVyYXRpb24sIHdlIHNob3VsZCBlbmFibGUgdGhpcyB0aW1lbGluZSBhZ2FpbiBzbyB0aGF0IGl0IHJlbmRlcnMgcHJvcGVybHkuIFdlIHNob3VsZCBhbHNvIGFsaWduIHRoZSBwbGF5aGVhZCB3aXRoIHRoZSBwYXJlbnQgdGltZWxpbmUncyB3aGVuIGFwcHJvcHJpYXRlLlxuXG5cbiAgaWYgKF91bmNhY2hlKHRpbWVsaW5lLCBjaGlsZCkuX2RwICYmIHRpbWVsaW5lLl9pbml0dGVkICYmIHRpbWVsaW5lLl90aW1lID49IHRpbWVsaW5lLl9kdXIgJiYgdGltZWxpbmUuX3RzKSB7XG4gICAgLy9pbiBjYXNlIGFueSBvZiB0aGUgYW5jZXN0b3JzIGhhZCBjb21wbGV0ZWQgYnV0IHNob3VsZCBub3cgYmUgZW5hYmxlZC4uLlxuICAgIGlmICh0aW1lbGluZS5fZHVyIDwgdGltZWxpbmUuZHVyYXRpb24oKSkge1xuICAgICAgdCA9IHRpbWVsaW5lO1xuXG4gICAgICB3aGlsZSAodC5fZHApIHtcbiAgICAgICAgdC5yYXdUaW1lKCkgPj0gMCAmJiB0LnRvdGFsVGltZSh0Ll90VGltZSk7IC8vbW92ZXMgdGhlIHRpbWVsaW5lIChzaGlmdHMgaXRzIHN0YXJ0VGltZSkgaWYgbmVjZXNzYXJ5LCBhbmQgYWxzbyBlbmFibGVzIGl0LiBJZiBpdCdzIGN1cnJlbnRseSB6ZXJvLCB0aG91Z2gsIGl0IG1heSBub3QgYmUgc2NoZWR1bGVkIHRvIHJlbmRlciB1bnRpbCBsYXRlciBzbyB0aGVyZSdzIG5vIG5lZWQgdG8gZm9yY2UgaXQgdG8gYWxpZ24gd2l0aCB0aGUgY3VycmVudCBwbGF5aGVhZCBwb3NpdGlvbi4gT25seSBtb3ZlIHRvIGNhdGNoIHVwIHdpdGggdGhlIHBsYXloZWFkLlxuXG4gICAgICAgIHQgPSB0Ll9kcDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aW1lbGluZS5felRpbWUgPSAtX3RpbnlOdW07IC8vIGhlbHBzIGVuc3VyZSB0aGF0IHRoZSBuZXh0IHJlbmRlcigpIHdpbGwgYmUgZm9yY2VkIChjcm9zc2luZ1N0YXJ0ID0gdHJ1ZSBpbiByZW5kZXIoKSksIGV2ZW4gaWYgdGhlIGR1cmF0aW9uIGhhc24ndCBjaGFuZ2VkICh3ZSdyZSBhZGRpbmcgYSBjaGlsZCB3aGljaCB3b3VsZCBuZWVkIHRvIGdldCByZW5kZXJlZCkuIERlZmluaXRlbHkgYW4gZWRnZSBjYXNlLiBOb3RlOiB3ZSBNVVNUIGRvIHRoaXMgQUZURVIgdGhlIGxvb3AgYWJvdmUgd2hlcmUgdGhlIHRvdGFsVGltZSgpIG1pZ2h0IHRyaWdnZXIgYSByZW5kZXIoKSBiZWNhdXNlIHRoaXMgX2FkZFRvVGltZWxpbmUoKSBtZXRob2QgZ2V0cyBjYWxsZWQgZnJvbSB0aGUgQW5pbWF0aW9uIGNvbnN0cnVjdG9yLCBCRUZPUkUgdHdlZW5zIGV2ZW4gcmVjb3JkIHRoZWlyIHRhcmdldHMsIGV0Yy4gc28gd2Ugd291bGRuJ3Qgd2FudCB0aGluZ3MgdG8gZ2V0IHRyaWdnZXJlZCBpbiB0aGUgd3Jvbmcgb3JkZXIuXG4gIH1cbn0sXG4gICAgX2FkZFRvVGltZWxpbmUgPSBmdW5jdGlvbiBfYWRkVG9UaW1lbGluZSh0aW1lbGluZSwgY2hpbGQsIHBvc2l0aW9uLCBza2lwQ2hlY2tzKSB7XG4gIGNoaWxkLnBhcmVudCAmJiBfcmVtb3ZlRnJvbVBhcmVudChjaGlsZCk7XG4gIGNoaWxkLl9zdGFydCA9IF9yb3VuZFByZWNpc2UoKF9pc051bWJlcihwb3NpdGlvbikgPyBwb3NpdGlvbiA6IHBvc2l0aW9uIHx8IHRpbWVsaW5lICE9PSBfZ2xvYmFsVGltZWxpbmUgPyBfcGFyc2VQb3NpdGlvbih0aW1lbGluZSwgcG9zaXRpb24sIGNoaWxkKSA6IHRpbWVsaW5lLl90aW1lKSArIGNoaWxkLl9kZWxheSk7XG4gIGNoaWxkLl9lbmQgPSBfcm91bmRQcmVjaXNlKGNoaWxkLl9zdGFydCArIChjaGlsZC50b3RhbER1cmF0aW9uKCkgLyBNYXRoLmFicyhjaGlsZC50aW1lU2NhbGUoKSkgfHwgMCkpO1xuXG4gIF9hZGRMaW5rZWRMaXN0SXRlbSh0aW1lbGluZSwgY2hpbGQsIFwiX2ZpcnN0XCIsIFwiX2xhc3RcIiwgdGltZWxpbmUuX3NvcnQgPyBcIl9zdGFydFwiIDogMCk7XG5cbiAgX2lzRnJvbU9yRnJvbVN0YXJ0KGNoaWxkKSB8fCAodGltZWxpbmUuX3JlY2VudCA9IGNoaWxkKTtcbiAgc2tpcENoZWNrcyB8fCBfcG9zdEFkZENoZWNrcyh0aW1lbGluZSwgY2hpbGQpO1xuICB0aW1lbGluZS5fdHMgPCAwICYmIF9hbGlnblBsYXloZWFkKHRpbWVsaW5lLCB0aW1lbGluZS5fdFRpbWUpOyAvLyBpZiB0aGUgdGltZWxpbmUgaXMgcmV2ZXJzZWQgYW5kIHRoZSBuZXcgY2hpbGQgbWFrZXMgaXQgbG9uZ2VyLCB3ZSBtYXkgbmVlZCB0byBhZGp1c3QgdGhlIHBhcmVudCdzIF9zdGFydCAocHVzaCBpdCBiYWNrKVxuXG4gIHJldHVybiB0aW1lbGluZTtcbn0sXG4gICAgX3Njcm9sbFRyaWdnZXIgPSBmdW5jdGlvbiBfc2Nyb2xsVHJpZ2dlcihhbmltYXRpb24sIHRyaWdnZXIpIHtcbiAgcmV0dXJuIChfZ2xvYmFscy5TY3JvbGxUcmlnZ2VyIHx8IF9taXNzaW5nUGx1Z2luKFwic2Nyb2xsVHJpZ2dlclwiLCB0cmlnZ2VyKSkgJiYgX2dsb2JhbHMuU2Nyb2xsVHJpZ2dlci5jcmVhdGUodHJpZ2dlciwgYW5pbWF0aW9uKTtcbn0sXG4gICAgX2F0dGVtcHRJbml0VHdlZW4gPSBmdW5jdGlvbiBfYXR0ZW1wdEluaXRUd2Vlbih0d2VlbiwgdGltZSwgZm9yY2UsIHN1cHByZXNzRXZlbnRzLCB0VGltZSkge1xuICBfaW5pdFR3ZWVuKHR3ZWVuLCB0aW1lLCB0VGltZSk7XG5cbiAgaWYgKCF0d2Vlbi5faW5pdHRlZCkge1xuICAgIHJldHVybiAxO1xuICB9XG5cbiAgaWYgKCFmb3JjZSAmJiB0d2Vlbi5fcHQgJiYgIV9yZXZlcnRpbmcgJiYgKHR3ZWVuLl9kdXIgJiYgdHdlZW4udmFycy5sYXp5ICE9PSBmYWxzZSB8fCAhdHdlZW4uX2R1ciAmJiB0d2Vlbi52YXJzLmxhenkpICYmIF9sYXN0UmVuZGVyZWRGcmFtZSAhPT0gX3RpY2tlci5mcmFtZSkge1xuICAgIF9sYXp5VHdlZW5zLnB1c2godHdlZW4pO1xuXG4gICAgdHdlZW4uX2xhenkgPSBbdFRpbWUsIHN1cHByZXNzRXZlbnRzXTtcbiAgICByZXR1cm4gMTtcbiAgfVxufSxcbiAgICBfcGFyZW50UGxheWhlYWRJc0JlZm9yZVN0YXJ0ID0gZnVuY3Rpb24gX3BhcmVudFBsYXloZWFkSXNCZWZvcmVTdGFydChfcmVmKSB7XG4gIHZhciBwYXJlbnQgPSBfcmVmLnBhcmVudDtcbiAgcmV0dXJuIHBhcmVudCAmJiBwYXJlbnQuX3RzICYmIHBhcmVudC5faW5pdHRlZCAmJiAhcGFyZW50Ll9sb2NrICYmIChwYXJlbnQucmF3VGltZSgpIDwgMCB8fCBfcGFyZW50UGxheWhlYWRJc0JlZm9yZVN0YXJ0KHBhcmVudCkpO1xufSxcbiAgICAvLyBjaGVjayBwYXJlbnQncyBfbG9jayBiZWNhdXNlIHdoZW4gYSB0aW1lbGluZSByZXBlYXRzL3lveW9zIGFuZCBkb2VzIGl0cyBhcnRpZmljaWFsIHdyYXBwaW5nLCB3ZSBzaG91bGRuJ3QgZm9yY2UgdGhlIHJhdGlvIGJhY2sgdG8gMFxuX2lzRnJvbU9yRnJvbVN0YXJ0ID0gZnVuY3Rpb24gX2lzRnJvbU9yRnJvbVN0YXJ0KF9yZWYyKSB7XG4gIHZhciBkYXRhID0gX3JlZjIuZGF0YTtcbiAgcmV0dXJuIGRhdGEgPT09IFwiaXNGcm9tU3RhcnRcIiB8fCBkYXRhID09PSBcImlzU3RhcnRcIjtcbn0sXG4gICAgX3JlbmRlclplcm9EdXJhdGlvblR3ZWVuID0gZnVuY3Rpb24gX3JlbmRlclplcm9EdXJhdGlvblR3ZWVuKHR3ZWVuLCB0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSkge1xuICB2YXIgcHJldlJhdGlvID0gdHdlZW4ucmF0aW8sXG4gICAgICByYXRpbyA9IHRvdGFsVGltZSA8IDAgfHwgIXRvdGFsVGltZSAmJiAoIXR3ZWVuLl9zdGFydCAmJiBfcGFyZW50UGxheWhlYWRJc0JlZm9yZVN0YXJ0KHR3ZWVuKSAmJiAhKCF0d2Vlbi5faW5pdHRlZCAmJiBfaXNGcm9tT3JGcm9tU3RhcnQodHdlZW4pKSB8fCAodHdlZW4uX3RzIDwgMCB8fCB0d2Vlbi5fZHAuX3RzIDwgMCkgJiYgIV9pc0Zyb21PckZyb21TdGFydCh0d2VlbikpID8gMCA6IDEsXG4gICAgICAvLyBpZiB0aGUgdHdlZW4gb3IgaXRzIHBhcmVudCBpcyByZXZlcnNlZCBhbmQgdGhlIHRvdGFsVGltZSBpcyAwLCB3ZSBzaG91bGQgZ28gdG8gYSByYXRpbyBvZiAwLiBFZGdlIGNhc2U6IGlmIGEgZnJvbSgpIG9yIGZyb21UbygpIHN0YWdnZXIgdHdlZW4gaXMgcGxhY2VkIGxhdGVyIGluIGEgdGltZWxpbmUsIHRoZSBcInN0YXJ0QXRcIiB6ZXJvLWR1cmF0aW9uIHR3ZWVuIGNvdWxkIGluaXRpYWxseSByZW5kZXIgYXQgYSB0aW1lIHdoZW4gdGhlIHBhcmVudCB0aW1lbGluZSdzIHBsYXloZWFkIGlzIHRlY2huaWNhbGx5IEJFRk9SRSB3aGVyZSB0aGlzIHR3ZWVuIGlzLCBzbyBtYWtlIHN1cmUgdGhhdCBhbnkgXCJmcm9tXCIgYW5kIFwiZnJvbVRvXCIgc3RhcnRBdCB0d2VlbnMgYXJlIHJlbmRlcmVkIHRoZSBmaXJzdCB0aW1lIGF0IGEgcmF0aW8gb2YgMS5cbiAgcmVwZWF0RGVsYXkgPSB0d2Vlbi5fckRlbGF5LFxuICAgICAgdFRpbWUgPSAwLFxuICAgICAgcHQsXG4gICAgICBpdGVyYXRpb24sXG4gICAgICBwcmV2SXRlcmF0aW9uO1xuXG4gIGlmIChyZXBlYXREZWxheSAmJiB0d2Vlbi5fcmVwZWF0KSB7XG4gICAgLy8gaW4gY2FzZSB0aGVyZSdzIGEgemVyby1kdXJhdGlvbiB0d2VlbiB0aGF0IGhhcyBhIHJlcGVhdCB3aXRoIGEgcmVwZWF0RGVsYXlcbiAgICB0VGltZSA9IF9jbGFtcCgwLCB0d2Vlbi5fdER1ciwgdG90YWxUaW1lKTtcbiAgICBpdGVyYXRpb24gPSBfYW5pbWF0aW9uQ3ljbGUodFRpbWUsIHJlcGVhdERlbGF5KTtcbiAgICB0d2Vlbi5feW95byAmJiBpdGVyYXRpb24gJiAxICYmIChyYXRpbyA9IDEgLSByYXRpbyk7XG5cbiAgICBpZiAoaXRlcmF0aW9uICE9PSBfYW5pbWF0aW9uQ3ljbGUodHdlZW4uX3RUaW1lLCByZXBlYXREZWxheSkpIHtcbiAgICAgIC8vIGlmIGl0ZXJhdGlvbiBjaGFuZ2VkXG4gICAgICBwcmV2UmF0aW8gPSAxIC0gcmF0aW87XG4gICAgICB0d2Vlbi52YXJzLnJlcGVhdFJlZnJlc2ggJiYgdHdlZW4uX2luaXR0ZWQgJiYgdHdlZW4uaW52YWxpZGF0ZSgpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChyYXRpbyAhPT0gcHJldlJhdGlvIHx8IF9yZXZlcnRpbmcgfHwgZm9yY2UgfHwgdHdlZW4uX3pUaW1lID09PSBfdGlueU51bSB8fCAhdG90YWxUaW1lICYmIHR3ZWVuLl96VGltZSkge1xuICAgIGlmICghdHdlZW4uX2luaXR0ZWQgJiYgX2F0dGVtcHRJbml0VHdlZW4odHdlZW4sIHRvdGFsVGltZSwgZm9yY2UsIHN1cHByZXNzRXZlbnRzLCB0VGltZSkpIHtcbiAgICAgIC8vIGlmIHdlIHJlbmRlciB0aGUgdmVyeSBiZWdpbm5pbmcgKHRpbWUgPT0gMCkgb2YgYSBmcm9tVG8oKSwgd2UgbXVzdCBmb3JjZSB0aGUgcmVuZGVyIChub3JtYWwgdHdlZW5zIHdvdWxkbid0IG5lZWQgdG8gcmVuZGVyIGF0IGEgdGltZSBvZiAwIHdoZW4gdGhlIHByZXZUaW1lIHdhcyBhbHNvIDApLiBUaGlzIGlzIGFsc28gbWFuZGF0b3J5IHRvIG1ha2Ugc3VyZSBvdmVyd3JpdGluZyBraWNrcyBpbiBpbW1lZGlhdGVseS5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBwcmV2SXRlcmF0aW9uID0gdHdlZW4uX3pUaW1lO1xuICAgIHR3ZWVuLl96VGltZSA9IHRvdGFsVGltZSB8fCAoc3VwcHJlc3NFdmVudHMgPyBfdGlueU51bSA6IDApOyAvLyB3aGVuIHRoZSBwbGF5aGVhZCBhcnJpdmVzIGF0IEVYQUNUTFkgdGltZSAwIChyaWdodCBvbiB0b3ApIG9mIGEgemVyby1kdXJhdGlvbiB0d2Vlbiwgd2UgbmVlZCB0byBkaXNjZXJuIGlmIGV2ZW50cyBhcmUgc3VwcHJlc3NlZCBzbyB0aGF0IHdoZW4gdGhlIHBsYXloZWFkIG1vdmVzIGFnYWluIChuZXh0IHRpbWUpLCBpdCdsbCB0cmlnZ2VyIHRoZSBjYWxsYmFjay4gSWYgZXZlbnRzIGFyZSBOT1Qgc3VwcHJlc3NlZCwgb2J2aW91c2x5IHRoZSBjYWxsYmFjayB3b3VsZCBiZSB0cmlnZ2VyZWQgaW4gdGhpcyByZW5kZXIuIEJhc2ljYWxseSwgdGhlIGNhbGxiYWNrIHNob3VsZCBmaXJlIGVpdGhlciB3aGVuIHRoZSBwbGF5aGVhZCBBUlJJVkVTIG9yIExFQVZFUyB0aGlzIGV4YWN0IHNwb3QsIG5vdCBib3RoLiBJbWFnaW5lIGRvaW5nIGEgdGltZWxpbmUuc2VlaygwKSBhbmQgdGhlcmUncyBhIGNhbGxiYWNrIHRoYXQgc2l0cyBhdCAwLiBTaW5jZSBldmVudHMgYXJlIHN1cHByZXNzZWQgb24gdGhhdCBzZWVrKCkgYnkgZGVmYXVsdCwgbm90aGluZyB3aWxsIGZpcmUsIGJ1dCB3aGVuIHRoZSBwbGF5aGVhZCBtb3ZlcyBvZmYgb2YgdGhhdCBwb3NpdGlvbiwgdGhlIGNhbGxiYWNrIHNob3VsZCBmaXJlLiBUaGlzIGJlaGF2aW9yIGlzIHdoYXQgcGVvcGxlIGludHVpdGl2ZWx5IGV4cGVjdC5cblxuICAgIHN1cHByZXNzRXZlbnRzIHx8IChzdXBwcmVzc0V2ZW50cyA9IHRvdGFsVGltZSAmJiAhcHJldkl0ZXJhdGlvbik7IC8vIGlmIGl0IHdhcyByZW5kZXJlZCBwcmV2aW91c2x5IGF0IGV4YWN0bHkgMCAoX3pUaW1lKSBhbmQgbm93IHRoZSBwbGF5aGVhZCBpcyBtb3ZpbmcgYXdheSwgRE9OJ1QgZmlyZSBjYWxsYmFja3Mgb3RoZXJ3aXNlIHRoZXknbGwgc2VlbSBsaWtlIGR1cGxpY2F0ZXMuXG5cbiAgICB0d2Vlbi5yYXRpbyA9IHJhdGlvO1xuICAgIHR3ZWVuLl9mcm9tICYmIChyYXRpbyA9IDEgLSByYXRpbyk7XG4gICAgdHdlZW4uX3RpbWUgPSAwO1xuICAgIHR3ZWVuLl90VGltZSA9IHRUaW1lO1xuICAgIHB0ID0gdHdlZW4uX3B0O1xuXG4gICAgd2hpbGUgKHB0KSB7XG4gICAgICBwdC5yKHJhdGlvLCBwdC5kKTtcbiAgICAgIHB0ID0gcHQuX25leHQ7XG4gICAgfVxuXG4gICAgdG90YWxUaW1lIDwgMCAmJiBfcmV3aW5kU3RhcnRBdCh0d2VlbiwgdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgdHJ1ZSk7XG4gICAgdHdlZW4uX29uVXBkYXRlICYmICFzdXBwcmVzc0V2ZW50cyAmJiBfY2FsbGJhY2sodHdlZW4sIFwib25VcGRhdGVcIik7XG4gICAgdFRpbWUgJiYgdHdlZW4uX3JlcGVhdCAmJiAhc3VwcHJlc3NFdmVudHMgJiYgdHdlZW4ucGFyZW50ICYmIF9jYWxsYmFjayh0d2VlbiwgXCJvblJlcGVhdFwiKTtcblxuICAgIGlmICgodG90YWxUaW1lID49IHR3ZWVuLl90RHVyIHx8IHRvdGFsVGltZSA8IDApICYmIHR3ZWVuLnJhdGlvID09PSByYXRpbykge1xuICAgICAgcmF0aW8gJiYgX3JlbW92ZUZyb21QYXJlbnQodHdlZW4sIDEpO1xuXG4gICAgICBpZiAoIXN1cHByZXNzRXZlbnRzICYmICFfcmV2ZXJ0aW5nKSB7XG4gICAgICAgIF9jYWxsYmFjayh0d2VlbiwgcmF0aW8gPyBcIm9uQ29tcGxldGVcIiA6IFwib25SZXZlcnNlQ29tcGxldGVcIiwgdHJ1ZSk7XG5cbiAgICAgICAgdHdlZW4uX3Byb20gJiYgdHdlZW4uX3Byb20oKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAoIXR3ZWVuLl96VGltZSkge1xuICAgIHR3ZWVuLl96VGltZSA9IHRvdGFsVGltZTtcbiAgfVxufSxcbiAgICBfZmluZE5leHRQYXVzZVR3ZWVuID0gZnVuY3Rpb24gX2ZpbmROZXh0UGF1c2VUd2VlbihhbmltYXRpb24sIHByZXZUaW1lLCB0aW1lKSB7XG4gIHZhciBjaGlsZDtcblxuICBpZiAodGltZSA+IHByZXZUaW1lKSB7XG4gICAgY2hpbGQgPSBhbmltYXRpb24uX2ZpcnN0O1xuXG4gICAgd2hpbGUgKGNoaWxkICYmIGNoaWxkLl9zdGFydCA8PSB0aW1lKSB7XG4gICAgICBpZiAoY2hpbGQuZGF0YSA9PT0gXCJpc1BhdXNlXCIgJiYgY2hpbGQuX3N0YXJ0ID4gcHJldlRpbWUpIHtcbiAgICAgICAgcmV0dXJuIGNoaWxkO1xuICAgICAgfVxuXG4gICAgICBjaGlsZCA9IGNoaWxkLl9uZXh0O1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBjaGlsZCA9IGFuaW1hdGlvbi5fbGFzdDtcblxuICAgIHdoaWxlIChjaGlsZCAmJiBjaGlsZC5fc3RhcnQgPj0gdGltZSkge1xuICAgICAgaWYgKGNoaWxkLmRhdGEgPT09IFwiaXNQYXVzZVwiICYmIGNoaWxkLl9zdGFydCA8IHByZXZUaW1lKSB7XG4gICAgICAgIHJldHVybiBjaGlsZDtcbiAgICAgIH1cblxuICAgICAgY2hpbGQgPSBjaGlsZC5fcHJldjtcbiAgICB9XG4gIH1cbn0sXG4gICAgX3NldER1cmF0aW9uID0gZnVuY3Rpb24gX3NldER1cmF0aW9uKGFuaW1hdGlvbiwgZHVyYXRpb24sIHNraXBVbmNhY2hlLCBsZWF2ZVBsYXloZWFkKSB7XG4gIHZhciByZXBlYXQgPSBhbmltYXRpb24uX3JlcGVhdCxcbiAgICAgIGR1ciA9IF9yb3VuZFByZWNpc2UoZHVyYXRpb24pIHx8IDAsXG4gICAgICB0b3RhbFByb2dyZXNzID0gYW5pbWF0aW9uLl90VGltZSAvIGFuaW1hdGlvbi5fdER1cjtcbiAgdG90YWxQcm9ncmVzcyAmJiAhbGVhdmVQbGF5aGVhZCAmJiAoYW5pbWF0aW9uLl90aW1lICo9IGR1ciAvIGFuaW1hdGlvbi5fZHVyKTtcbiAgYW5pbWF0aW9uLl9kdXIgPSBkdXI7XG4gIGFuaW1hdGlvbi5fdER1ciA9ICFyZXBlYXQgPyBkdXIgOiByZXBlYXQgPCAwID8gMWUxMCA6IF9yb3VuZFByZWNpc2UoZHVyICogKHJlcGVhdCArIDEpICsgYW5pbWF0aW9uLl9yRGVsYXkgKiByZXBlYXQpO1xuICB0b3RhbFByb2dyZXNzID4gMCAmJiAhbGVhdmVQbGF5aGVhZCAmJiBfYWxpZ25QbGF5aGVhZChhbmltYXRpb24sIGFuaW1hdGlvbi5fdFRpbWUgPSBhbmltYXRpb24uX3REdXIgKiB0b3RhbFByb2dyZXNzKTtcbiAgYW5pbWF0aW9uLnBhcmVudCAmJiBfc2V0RW5kKGFuaW1hdGlvbik7XG4gIHNraXBVbmNhY2hlIHx8IF91bmNhY2hlKGFuaW1hdGlvbi5wYXJlbnQsIGFuaW1hdGlvbik7XG4gIHJldHVybiBhbmltYXRpb247XG59LFxuICAgIF9vblVwZGF0ZVRvdGFsRHVyYXRpb24gPSBmdW5jdGlvbiBfb25VcGRhdGVUb3RhbER1cmF0aW9uKGFuaW1hdGlvbikge1xuICByZXR1cm4gYW5pbWF0aW9uIGluc3RhbmNlb2YgVGltZWxpbmUgPyBfdW5jYWNoZShhbmltYXRpb24pIDogX3NldER1cmF0aW9uKGFuaW1hdGlvbiwgYW5pbWF0aW9uLl9kdXIpO1xufSxcbiAgICBfemVyb1Bvc2l0aW9uID0ge1xuICBfc3RhcnQ6IDAsXG4gIGVuZFRpbWU6IF9lbXB0eUZ1bmMsXG4gIHRvdGFsRHVyYXRpb246IF9lbXB0eUZ1bmNcbn0sXG4gICAgX3BhcnNlUG9zaXRpb24gPSBmdW5jdGlvbiBfcGFyc2VQb3NpdGlvbihhbmltYXRpb24sIHBvc2l0aW9uLCBwZXJjZW50QW5pbWF0aW9uKSB7XG4gIHZhciBsYWJlbHMgPSBhbmltYXRpb24ubGFiZWxzLFxuICAgICAgcmVjZW50ID0gYW5pbWF0aW9uLl9yZWNlbnQgfHwgX3plcm9Qb3NpdGlvbixcbiAgICAgIGNsaXBwZWREdXJhdGlvbiA9IGFuaW1hdGlvbi5kdXJhdGlvbigpID49IF9iaWdOdW0gPyByZWNlbnQuZW5kVGltZShmYWxzZSkgOiBhbmltYXRpb24uX2R1cixcbiAgICAgIC8vaW4gY2FzZSB0aGVyZSdzIGEgY2hpbGQgdGhhdCBpbmZpbml0ZWx5IHJlcGVhdHMsIHVzZXJzIGFsbW9zdCBuZXZlciBpbnRlbmQgZm9yIHRoZSBpbnNlcnRpb24gcG9pbnQgb2YgYSBuZXcgY2hpbGQgdG8gYmUgYmFzZWQgb24gYSBTVVBFUiBsb25nIHZhbHVlIGxpa2UgdGhhdCBzbyB3ZSBjbGlwIGl0IGFuZCBhc3N1bWUgdGhlIG1vc3QgcmVjZW50bHktYWRkZWQgY2hpbGQncyBlbmRUaW1lIHNob3VsZCBiZSB1c2VkIGluc3RlYWQuXG4gIGksXG4gICAgICBvZmZzZXQsXG4gICAgICBpc1BlcmNlbnQ7XG5cbiAgaWYgKF9pc1N0cmluZyhwb3NpdGlvbikgJiYgKGlzTmFOKHBvc2l0aW9uKSB8fCBwb3NpdGlvbiBpbiBsYWJlbHMpKSB7XG4gICAgLy9pZiB0aGUgc3RyaW5nIGlzIGEgbnVtYmVyIGxpa2UgXCIxXCIsIGNoZWNrIHRvIHNlZSBpZiB0aGVyZSdzIGEgbGFiZWwgd2l0aCB0aGF0IG5hbWUsIG90aGVyd2lzZSBpbnRlcnByZXQgaXQgYXMgYSBudW1iZXIgKGFic29sdXRlIHZhbHVlKS5cbiAgICBvZmZzZXQgPSBwb3NpdGlvbi5jaGFyQXQoMCk7XG4gICAgaXNQZXJjZW50ID0gcG9zaXRpb24uc3Vic3RyKC0xKSA9PT0gXCIlXCI7XG4gICAgaSA9IHBvc2l0aW9uLmluZGV4T2YoXCI9XCIpO1xuXG4gICAgaWYgKG9mZnNldCA9PT0gXCI8XCIgfHwgb2Zmc2V0ID09PSBcIj5cIikge1xuICAgICAgaSA+PSAwICYmIChwb3NpdGlvbiA9IHBvc2l0aW9uLnJlcGxhY2UoLz0vLCBcIlwiKSk7XG4gICAgICByZXR1cm4gKG9mZnNldCA9PT0gXCI8XCIgPyByZWNlbnQuX3N0YXJ0IDogcmVjZW50LmVuZFRpbWUocmVjZW50Ll9yZXBlYXQgPj0gMCkpICsgKHBhcnNlRmxvYXQocG9zaXRpb24uc3Vic3RyKDEpKSB8fCAwKSAqIChpc1BlcmNlbnQgPyAoaSA8IDAgPyByZWNlbnQgOiBwZXJjZW50QW5pbWF0aW9uKS50b3RhbER1cmF0aW9uKCkgLyAxMDAgOiAxKTtcbiAgICB9XG5cbiAgICBpZiAoaSA8IDApIHtcbiAgICAgIHBvc2l0aW9uIGluIGxhYmVscyB8fCAobGFiZWxzW3Bvc2l0aW9uXSA9IGNsaXBwZWREdXJhdGlvbik7XG4gICAgICByZXR1cm4gbGFiZWxzW3Bvc2l0aW9uXTtcbiAgICB9XG5cbiAgICBvZmZzZXQgPSBwYXJzZUZsb2F0KHBvc2l0aW9uLmNoYXJBdChpIC0gMSkgKyBwb3NpdGlvbi5zdWJzdHIoaSArIDEpKTtcblxuICAgIGlmIChpc1BlcmNlbnQgJiYgcGVyY2VudEFuaW1hdGlvbikge1xuICAgICAgb2Zmc2V0ID0gb2Zmc2V0IC8gMTAwICogKF9pc0FycmF5KHBlcmNlbnRBbmltYXRpb24pID8gcGVyY2VudEFuaW1hdGlvblswXSA6IHBlcmNlbnRBbmltYXRpb24pLnRvdGFsRHVyYXRpb24oKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaSA+IDEgPyBfcGFyc2VQb3NpdGlvbihhbmltYXRpb24sIHBvc2l0aW9uLnN1YnN0cigwLCBpIC0gMSksIHBlcmNlbnRBbmltYXRpb24pICsgb2Zmc2V0IDogY2xpcHBlZER1cmF0aW9uICsgb2Zmc2V0O1xuICB9XG5cbiAgcmV0dXJuIHBvc2l0aW9uID09IG51bGwgPyBjbGlwcGVkRHVyYXRpb24gOiArcG9zaXRpb247XG59LFxuICAgIF9jcmVhdGVUd2VlblR5cGUgPSBmdW5jdGlvbiBfY3JlYXRlVHdlZW5UeXBlKHR5cGUsIHBhcmFtcywgdGltZWxpbmUpIHtcbiAgdmFyIGlzTGVnYWN5ID0gX2lzTnVtYmVyKHBhcmFtc1sxXSksXG4gICAgICB2YXJzSW5kZXggPSAoaXNMZWdhY3kgPyAyIDogMSkgKyAodHlwZSA8IDIgPyAwIDogMSksXG4gICAgICB2YXJzID0gcGFyYW1zW3ZhcnNJbmRleF0sXG4gICAgICBpclZhcnMsXG4gICAgICBwYXJlbnQ7XG5cbiAgaXNMZWdhY3kgJiYgKHZhcnMuZHVyYXRpb24gPSBwYXJhbXNbMV0pO1xuICB2YXJzLnBhcmVudCA9IHRpbWVsaW5lO1xuXG4gIGlmICh0eXBlKSB7XG4gICAgaXJWYXJzID0gdmFycztcbiAgICBwYXJlbnQgPSB0aW1lbGluZTtcblxuICAgIHdoaWxlIChwYXJlbnQgJiYgIShcImltbWVkaWF0ZVJlbmRlclwiIGluIGlyVmFycykpIHtcbiAgICAgIC8vIGluaGVyaXRhbmNlIGhhc24ndCBoYXBwZW5lZCB5ZXQsIGJ1dCBzb21lb25lIG1heSBoYXZlIHNldCBhIGRlZmF1bHQgaW4gYW4gYW5jZXN0b3IgdGltZWxpbmUuIFdlIGNvdWxkIGRvIHZhcnMuaW1tZWRpYXRlUmVuZGVyID0gX2lzTm90RmFsc2UoX2luaGVyaXREZWZhdWx0cyh2YXJzKS5pbW1lZGlhdGVSZW5kZXIpIGJ1dCB0aGF0J2QgZXhhY3QgYSBzbGlnaHQgcGVyZm9ybWFuY2UgcGVuYWx0eSBiZWNhdXNlIF9pbmhlcml0RGVmYXVsdHMoKSBhbHNvIHJ1bnMgaW4gdGhlIFR3ZWVuIGNvbnN0cnVjdG9yLiBXZSdyZSBwYXlpbmcgYSBzbWFsbCBrYiBwcmljZSBoZXJlIHRvIGdhaW4gc3BlZWQuXG4gICAgICBpclZhcnMgPSBwYXJlbnQudmFycy5kZWZhdWx0cyB8fCB7fTtcbiAgICAgIHBhcmVudCA9IF9pc05vdEZhbHNlKHBhcmVudC52YXJzLmluaGVyaXQpICYmIHBhcmVudC5wYXJlbnQ7XG4gICAgfVxuXG4gICAgdmFycy5pbW1lZGlhdGVSZW5kZXIgPSBfaXNOb3RGYWxzZShpclZhcnMuaW1tZWRpYXRlUmVuZGVyKTtcbiAgICB0eXBlIDwgMiA/IHZhcnMucnVuQmFja3dhcmRzID0gMSA6IHZhcnMuc3RhcnRBdCA9IHBhcmFtc1t2YXJzSW5kZXggLSAxXTsgLy8gXCJmcm9tXCIgdmFyc1xuICB9XG5cbiAgcmV0dXJuIG5ldyBUd2VlbihwYXJhbXNbMF0sIHZhcnMsIHBhcmFtc1t2YXJzSW5kZXggKyAxXSk7XG59LFxuICAgIF9jb25kaXRpb25hbFJldHVybiA9IGZ1bmN0aW9uIF9jb25kaXRpb25hbFJldHVybih2YWx1ZSwgZnVuYykge1xuICByZXR1cm4gdmFsdWUgfHwgdmFsdWUgPT09IDAgPyBmdW5jKHZhbHVlKSA6IGZ1bmM7XG59LFxuICAgIF9jbGFtcCA9IGZ1bmN0aW9uIF9jbGFtcChtaW4sIG1heCwgdmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlIDwgbWluID8gbWluIDogdmFsdWUgPiBtYXggPyBtYXggOiB2YWx1ZTtcbn0sXG4gICAgZ2V0VW5pdCA9IGZ1bmN0aW9uIGdldFVuaXQodmFsdWUsIHYpIHtcbiAgcmV0dXJuICFfaXNTdHJpbmcodmFsdWUpIHx8ICEodiA9IF91bml0RXhwLmV4ZWModmFsdWUpKSA/IFwiXCIgOiB2WzFdO1xufSxcbiAgICAvLyBub3RlOiBwcm90ZWN0IGFnYWluc3QgcGFkZGVkIG51bWJlcnMgYXMgc3RyaW5ncywgbGlrZSBcIjEwMC4xMDBcIi4gVGhhdCBzaG91bGRuJ3QgcmV0dXJuIFwiMDBcIiBhcyB0aGUgdW5pdC4gSWYgaXQncyBudW1lcmljLCByZXR1cm4gbm8gdW5pdC5cbmNsYW1wID0gZnVuY3Rpb24gY2xhbXAobWluLCBtYXgsIHZhbHVlKSB7XG4gIHJldHVybiBfY29uZGl0aW9uYWxSZXR1cm4odmFsdWUsIGZ1bmN0aW9uICh2KSB7XG4gICAgcmV0dXJuIF9jbGFtcChtaW4sIG1heCwgdik7XG4gIH0pO1xufSxcbiAgICBfc2xpY2UgPSBbXS5zbGljZSxcbiAgICBfaXNBcnJheUxpa2UgPSBmdW5jdGlvbiBfaXNBcnJheUxpa2UodmFsdWUsIG5vbkVtcHR5KSB7XG4gIHJldHVybiB2YWx1ZSAmJiBfaXNPYmplY3QodmFsdWUpICYmIFwibGVuZ3RoXCIgaW4gdmFsdWUgJiYgKCFub25FbXB0eSAmJiAhdmFsdWUubGVuZ3RoIHx8IHZhbHVlLmxlbmd0aCAtIDEgaW4gdmFsdWUgJiYgX2lzT2JqZWN0KHZhbHVlWzBdKSkgJiYgIXZhbHVlLm5vZGVUeXBlICYmIHZhbHVlICE9PSBfd2luO1xufSxcbiAgICBfZmxhdHRlbiA9IGZ1bmN0aW9uIF9mbGF0dGVuKGFyLCBsZWF2ZVN0cmluZ3MsIGFjY3VtdWxhdG9yKSB7XG4gIGlmIChhY2N1bXVsYXRvciA9PT0gdm9pZCAwKSB7XG4gICAgYWNjdW11bGF0b3IgPSBbXTtcbiAgfVxuXG4gIHJldHVybiBhci5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHZhciBfYWNjdW11bGF0b3I7XG5cbiAgICByZXR1cm4gX2lzU3RyaW5nKHZhbHVlKSAmJiAhbGVhdmVTdHJpbmdzIHx8IF9pc0FycmF5TGlrZSh2YWx1ZSwgMSkgPyAoX2FjY3VtdWxhdG9yID0gYWNjdW11bGF0b3IpLnB1c2guYXBwbHkoX2FjY3VtdWxhdG9yLCB0b0FycmF5KHZhbHVlKSkgOiBhY2N1bXVsYXRvci5wdXNoKHZhbHVlKTtcbiAgfSkgfHwgYWNjdW11bGF0b3I7XG59LFxuICAgIC8vdGFrZXMgYW55IHZhbHVlIGFuZCByZXR1cm5zIGFuIGFycmF5LiBJZiBpdCdzIGEgc3RyaW5nIChhbmQgbGVhdmVTdHJpbmdzIGlzbid0IHRydWUpLCBpdCdsbCB1c2UgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgpIGFuZCBjb252ZXJ0IHRoYXQgdG8gYW4gYXJyYXkuIEl0J2xsIGFsc28gYWNjZXB0IGl0ZXJhYmxlcyBsaWtlIGpRdWVyeSBvYmplY3RzLlxudG9BcnJheSA9IGZ1bmN0aW9uIHRvQXJyYXkodmFsdWUsIHNjb3BlLCBsZWF2ZVN0cmluZ3MpIHtcbiAgcmV0dXJuIF9jb250ZXh0ICYmICFzY29wZSAmJiBfY29udGV4dC5zZWxlY3RvciA/IF9jb250ZXh0LnNlbGVjdG9yKHZhbHVlKSA6IF9pc1N0cmluZyh2YWx1ZSkgJiYgIWxlYXZlU3RyaW5ncyAmJiAoX2NvcmVJbml0dGVkIHx8ICFfd2FrZSgpKSA/IF9zbGljZS5jYWxsKChzY29wZSB8fCBfZG9jKS5xdWVyeVNlbGVjdG9yQWxsKHZhbHVlKSwgMCkgOiBfaXNBcnJheSh2YWx1ZSkgPyBfZmxhdHRlbih2YWx1ZSwgbGVhdmVTdHJpbmdzKSA6IF9pc0FycmF5TGlrZSh2YWx1ZSkgPyBfc2xpY2UuY2FsbCh2YWx1ZSwgMCkgOiB2YWx1ZSA/IFt2YWx1ZV0gOiBbXTtcbn0sXG4gICAgc2VsZWN0b3IgPSBmdW5jdGlvbiBzZWxlY3Rvcih2YWx1ZSkge1xuICB2YWx1ZSA9IHRvQXJyYXkodmFsdWUpWzBdIHx8IF93YXJuKFwiSW52YWxpZCBzY29wZVwiKSB8fCB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uICh2KSB7XG4gICAgdmFyIGVsID0gdmFsdWUuY3VycmVudCB8fCB2YWx1ZS5uYXRpdmVFbGVtZW50IHx8IHZhbHVlO1xuICAgIHJldHVybiB0b0FycmF5KHYsIGVsLnF1ZXJ5U2VsZWN0b3JBbGwgPyBlbCA6IGVsID09PSB2YWx1ZSA/IF93YXJuKFwiSW52YWxpZCBzY29wZVwiKSB8fCBfZG9jLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikgOiB2YWx1ZSk7XG4gIH07XG59LFxuICAgIHNodWZmbGUgPSBmdW5jdGlvbiBzaHVmZmxlKGEpIHtcbiAgcmV0dXJuIGEuc29ydChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIC41IC0gTWF0aC5yYW5kb20oKTtcbiAgfSk7XG59LFxuICAgIC8vIGFsdGVybmF0aXZlIHRoYXQncyBhIGJpdCBmYXN0ZXIgYW5kIG1vcmUgcmVsaWFibHkgZGl2ZXJzZSBidXQgYmlnZ2VyOiAgIGZvciAobGV0IGosIHYsIGkgPSBhLmxlbmd0aDsgaTsgaiA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGkpLCB2ID0gYVstLWldLCBhW2ldID0gYVtqXSwgYVtqXSA9IHYpOyByZXR1cm4gYTtcbi8vZm9yIGRpc3RyaWJ1dGluZyB2YWx1ZXMgYWNyb3NzIGFuIGFycmF5LiBDYW4gYWNjZXB0IGEgbnVtYmVyLCBhIGZ1bmN0aW9uIG9yIChtb3N0IGNvbW1vbmx5KSBhIGZ1bmN0aW9uIHdoaWNoIGNhbiBjb250YWluIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczoge2Jhc2UsIGFtb3VudCwgZnJvbSwgZWFzZSwgZ3JpZCwgYXhpcywgbGVuZ3RoLCBlYWNofS4gUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgZXhwZWN0cyB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6IGluZGV4LCB0YXJnZXQsIGFycmF5LiBSZWNvZ25pemVzIHRoZSBmb2xsb3dpbmdcbmRpc3RyaWJ1dGUgPSBmdW5jdGlvbiBkaXN0cmlidXRlKHYpIHtcbiAgaWYgKF9pc0Z1bmN0aW9uKHYpKSB7XG4gICAgcmV0dXJuIHY7XG4gIH1cblxuICB2YXIgdmFycyA9IF9pc09iamVjdCh2KSA/IHYgOiB7XG4gICAgZWFjaDogdlxuICB9LFxuICAgICAgLy9uOjEgaXMganVzdCB0byBpbmRpY2F0ZSB2IHdhcyBhIG51bWJlcjsgd2UgbGV2ZXJhZ2UgdGhhdCBsYXRlciB0byBzZXQgdiBhY2NvcmRpbmcgdG8gdGhlIGxlbmd0aCB3ZSBnZXQuIElmIGEgbnVtYmVyIGlzIHBhc3NlZCBpbiwgd2UgdHJlYXQgaXQgbGlrZSB0aGUgb2xkIHN0YWdnZXIgdmFsdWUgd2hlcmUgMC4xLCBmb3IgZXhhbXBsZSwgd291bGQgbWVhbiB0aGF0IHRoaW5ncyB3b3VsZCBiZSBkaXN0cmlidXRlZCB3aXRoIDAuMSBiZXR3ZWVuIGVhY2ggZWxlbWVudCBpbiB0aGUgYXJyYXkgcmF0aGVyIHRoYW4gYSB0b3RhbCBcImFtb3VudFwiIHRoYXQncyBjaHVua2VkIG91dCBhbW9uZyB0aGVtIGFsbC5cbiAgZWFzZSA9IF9wYXJzZUVhc2UodmFycy5lYXNlKSxcbiAgICAgIGZyb20gPSB2YXJzLmZyb20gfHwgMCxcbiAgICAgIGJhc2UgPSBwYXJzZUZsb2F0KHZhcnMuYmFzZSkgfHwgMCxcbiAgICAgIGNhY2hlID0ge30sXG4gICAgICBpc0RlY2ltYWwgPSBmcm9tID4gMCAmJiBmcm9tIDwgMSxcbiAgICAgIHJhdGlvcyA9IGlzTmFOKGZyb20pIHx8IGlzRGVjaW1hbCxcbiAgICAgIGF4aXMgPSB2YXJzLmF4aXMsXG4gICAgICByYXRpb1ggPSBmcm9tLFxuICAgICAgcmF0aW9ZID0gZnJvbTtcblxuICBpZiAoX2lzU3RyaW5nKGZyb20pKSB7XG4gICAgcmF0aW9YID0gcmF0aW9ZID0ge1xuICAgICAgY2VudGVyOiAuNSxcbiAgICAgIGVkZ2VzOiAuNSxcbiAgICAgIGVuZDogMVxuICAgIH1bZnJvbV0gfHwgMDtcbiAgfSBlbHNlIGlmICghaXNEZWNpbWFsICYmIHJhdGlvcykge1xuICAgIHJhdGlvWCA9IGZyb21bMF07XG4gICAgcmF0aW9ZID0gZnJvbVsxXTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoaSwgdGFyZ2V0LCBhKSB7XG4gICAgdmFyIGwgPSAoYSB8fCB2YXJzKS5sZW5ndGgsXG4gICAgICAgIGRpc3RhbmNlcyA9IGNhY2hlW2xdLFxuICAgICAgICBvcmlnaW5YLFxuICAgICAgICBvcmlnaW5ZLFxuICAgICAgICB4LFxuICAgICAgICB5LFxuICAgICAgICBkLFxuICAgICAgICBqLFxuICAgICAgICBtYXgsXG4gICAgICAgIG1pbixcbiAgICAgICAgd3JhcEF0O1xuXG4gICAgaWYgKCFkaXN0YW5jZXMpIHtcbiAgICAgIHdyYXBBdCA9IHZhcnMuZ3JpZCA9PT0gXCJhdXRvXCIgPyAwIDogKHZhcnMuZ3JpZCB8fCBbMSwgX2JpZ051bV0pWzFdO1xuXG4gICAgICBpZiAoIXdyYXBBdCkge1xuICAgICAgICBtYXggPSAtX2JpZ051bTtcblxuICAgICAgICB3aGlsZSAobWF4IDwgKG1heCA9IGFbd3JhcEF0KytdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQpICYmIHdyYXBBdCA8IGwpIHt9XG5cbiAgICAgICAgd3JhcEF0IDwgbCAmJiB3cmFwQXQtLTtcbiAgICAgIH1cblxuICAgICAgZGlzdGFuY2VzID0gY2FjaGVbbF0gPSBbXTtcbiAgICAgIG9yaWdpblggPSByYXRpb3MgPyBNYXRoLm1pbih3cmFwQXQsIGwpICogcmF0aW9YIC0gLjUgOiBmcm9tICUgd3JhcEF0O1xuICAgICAgb3JpZ2luWSA9IHdyYXBBdCA9PT0gX2JpZ051bSA/IDAgOiByYXRpb3MgPyBsICogcmF0aW9ZIC8gd3JhcEF0IC0gLjUgOiBmcm9tIC8gd3JhcEF0IHwgMDtcbiAgICAgIG1heCA9IDA7XG4gICAgICBtaW4gPSBfYmlnTnVtO1xuXG4gICAgICBmb3IgKGogPSAwOyBqIDwgbDsgaisrKSB7XG4gICAgICAgIHggPSBqICUgd3JhcEF0IC0gb3JpZ2luWDtcbiAgICAgICAgeSA9IG9yaWdpblkgLSAoaiAvIHdyYXBBdCB8IDApO1xuICAgICAgICBkaXN0YW5jZXNbal0gPSBkID0gIWF4aXMgPyBfc3FydCh4ICogeCArIHkgKiB5KSA6IE1hdGguYWJzKGF4aXMgPT09IFwieVwiID8geSA6IHgpO1xuICAgICAgICBkID4gbWF4ICYmIChtYXggPSBkKTtcbiAgICAgICAgZCA8IG1pbiAmJiAobWluID0gZCk7XG4gICAgICB9XG5cbiAgICAgIGZyb20gPT09IFwicmFuZG9tXCIgJiYgc2h1ZmZsZShkaXN0YW5jZXMpO1xuICAgICAgZGlzdGFuY2VzLm1heCA9IG1heCAtIG1pbjtcbiAgICAgIGRpc3RhbmNlcy5taW4gPSBtaW47XG4gICAgICBkaXN0YW5jZXMudiA9IGwgPSAocGFyc2VGbG9hdCh2YXJzLmFtb3VudCkgfHwgcGFyc2VGbG9hdCh2YXJzLmVhY2gpICogKHdyYXBBdCA+IGwgPyBsIC0gMSA6ICFheGlzID8gTWF0aC5tYXgod3JhcEF0LCBsIC8gd3JhcEF0KSA6IGF4aXMgPT09IFwieVwiID8gbCAvIHdyYXBBdCA6IHdyYXBBdCkgfHwgMCkgKiAoZnJvbSA9PT0gXCJlZGdlc1wiID8gLTEgOiAxKTtcbiAgICAgIGRpc3RhbmNlcy5iID0gbCA8IDAgPyBiYXNlIC0gbCA6IGJhc2U7XG4gICAgICBkaXN0YW5jZXMudSA9IGdldFVuaXQodmFycy5hbW91bnQgfHwgdmFycy5lYWNoKSB8fCAwOyAvL3VuaXRcblxuICAgICAgZWFzZSA9IGVhc2UgJiYgbCA8IDAgPyBfaW52ZXJ0RWFzZShlYXNlKSA6IGVhc2U7XG4gICAgfVxuXG4gICAgbCA9IChkaXN0YW5jZXNbaV0gLSBkaXN0YW5jZXMubWluKSAvIGRpc3RhbmNlcy5tYXggfHwgMDtcbiAgICByZXR1cm4gX3JvdW5kUHJlY2lzZShkaXN0YW5jZXMuYiArIChlYXNlID8gZWFzZShsKSA6IGwpICogZGlzdGFuY2VzLnYpICsgZGlzdGFuY2VzLnU7IC8vcm91bmQgaW4gb3JkZXIgdG8gd29yayBhcm91bmQgZmxvYXRpbmcgcG9pbnQgZXJyb3JzXG4gIH07XG59LFxuICAgIF9yb3VuZE1vZGlmaWVyID0gZnVuY3Rpb24gX3JvdW5kTW9kaWZpZXIodikge1xuICAvL3Bhc3MgaW4gMC4xIGdldCBhIGZ1bmN0aW9uIHRoYXQnbGwgcm91bmQgdG8gdGhlIG5lYXJlc3QgdGVudGgsIG9yIDUgdG8gcm91bmQgdG8gdGhlIGNsb3Nlc3QgNSwgb3IgMC4wMDEgdG8gdGhlIGNsb3Nlc3QgMTAwMHRoLCBldGMuXG4gIHZhciBwID0gTWF0aC5wb3coMTAsICgodiArIFwiXCIpLnNwbGl0KFwiLlwiKVsxXSB8fCBcIlwiKS5sZW5ndGgpOyAvL3RvIGF2b2lkIGZsb2F0aW5nIHBvaW50IG1hdGggZXJyb3JzIChsaWtlIDI0ICogMC4xID09IDIuNDAwMDAwMDAwMDAwMDAwNCksIHdlIGNob3Agb2ZmIGF0IGEgc3BlY2lmaWMgbnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzIChtdWNoIGZhc3RlciB0aGFuIHRvRml4ZWQoKSlcblxuICByZXR1cm4gZnVuY3Rpb24gKHJhdykge1xuICAgIHZhciBuID0gX3JvdW5kUHJlY2lzZShNYXRoLnJvdW5kKHBhcnNlRmxvYXQocmF3KSAvIHYpICogdiAqIHApO1xuXG4gICAgcmV0dXJuIChuIC0gbiAlIDEpIC8gcCArIChfaXNOdW1iZXIocmF3KSA/IDAgOiBnZXRVbml0KHJhdykpOyAvLyBuIC0gbiAlIDEgcmVwbGFjZXMgTWF0aC5mbG9vcigpIGluIG9yZGVyIHRvIGhhbmRsZSBuZWdhdGl2ZSB2YWx1ZXMgcHJvcGVybHkuIEZvciBleGFtcGxlLCBNYXRoLmZsb29yKC0xNTAuMDAwMDAwMDAwMDAwMDMpIGlzIDE1MSFcbiAgfTtcbn0sXG4gICAgc25hcCA9IGZ1bmN0aW9uIHNuYXAoc25hcFRvLCB2YWx1ZSkge1xuICB2YXIgaXNBcnJheSA9IF9pc0FycmF5KHNuYXBUbyksXG4gICAgICByYWRpdXMsXG4gICAgICBpczJEO1xuXG4gIGlmICghaXNBcnJheSAmJiBfaXNPYmplY3Qoc25hcFRvKSkge1xuICAgIHJhZGl1cyA9IGlzQXJyYXkgPSBzbmFwVG8ucmFkaXVzIHx8IF9iaWdOdW07XG5cbiAgICBpZiAoc25hcFRvLnZhbHVlcykge1xuICAgICAgc25hcFRvID0gdG9BcnJheShzbmFwVG8udmFsdWVzKTtcblxuICAgICAgaWYgKGlzMkQgPSAhX2lzTnVtYmVyKHNuYXBUb1swXSkpIHtcbiAgICAgICAgcmFkaXVzICo9IHJhZGl1czsgLy9wZXJmb3JtYW5jZSBvcHRpbWl6YXRpb24gc28gd2UgZG9uJ3QgaGF2ZSB0byBNYXRoLnNxcnQoKSBpbiB0aGUgbG9vcC5cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc25hcFRvID0gX3JvdW5kTW9kaWZpZXIoc25hcFRvLmluY3JlbWVudCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIF9jb25kaXRpb25hbFJldHVybih2YWx1ZSwgIWlzQXJyYXkgPyBfcm91bmRNb2RpZmllcihzbmFwVG8pIDogX2lzRnVuY3Rpb24oc25hcFRvKSA/IGZ1bmN0aW9uIChyYXcpIHtcbiAgICBpczJEID0gc25hcFRvKHJhdyk7XG4gICAgcmV0dXJuIE1hdGguYWJzKGlzMkQgLSByYXcpIDw9IHJhZGl1cyA/IGlzMkQgOiByYXc7XG4gIH0gOiBmdW5jdGlvbiAocmF3KSB7XG4gICAgdmFyIHggPSBwYXJzZUZsb2F0KGlzMkQgPyByYXcueCA6IHJhdyksXG4gICAgICAgIHkgPSBwYXJzZUZsb2F0KGlzMkQgPyByYXcueSA6IDApLFxuICAgICAgICBtaW4gPSBfYmlnTnVtLFxuICAgICAgICBjbG9zZXN0ID0gMCxcbiAgICAgICAgaSA9IHNuYXBUby5sZW5ndGgsXG4gICAgICAgIGR4LFxuICAgICAgICBkeTtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGlmIChpczJEKSB7XG4gICAgICAgIGR4ID0gc25hcFRvW2ldLnggLSB4O1xuICAgICAgICBkeSA9IHNuYXBUb1tpXS55IC0geTtcbiAgICAgICAgZHggPSBkeCAqIGR4ICsgZHkgKiBkeTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGR4ID0gTWF0aC5hYnMoc25hcFRvW2ldIC0geCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChkeCA8IG1pbikge1xuICAgICAgICBtaW4gPSBkeDtcbiAgICAgICAgY2xvc2VzdCA9IGk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY2xvc2VzdCA9ICFyYWRpdXMgfHwgbWluIDw9IHJhZGl1cyA/IHNuYXBUb1tjbG9zZXN0XSA6IHJhdztcbiAgICByZXR1cm4gaXMyRCB8fCBjbG9zZXN0ID09PSByYXcgfHwgX2lzTnVtYmVyKHJhdykgPyBjbG9zZXN0IDogY2xvc2VzdCArIGdldFVuaXQocmF3KTtcbiAgfSk7XG59LFxuICAgIHJhbmRvbSA9IGZ1bmN0aW9uIHJhbmRvbShtaW4sIG1heCwgcm91bmRpbmdJbmNyZW1lbnQsIHJldHVybkZ1bmN0aW9uKSB7XG4gIHJldHVybiBfY29uZGl0aW9uYWxSZXR1cm4oX2lzQXJyYXkobWluKSA/ICFtYXggOiByb3VuZGluZ0luY3JlbWVudCA9PT0gdHJ1ZSA/ICEhKHJvdW5kaW5nSW5jcmVtZW50ID0gMCkgOiAhcmV0dXJuRnVuY3Rpb24sIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2lzQXJyYXkobWluKSA/IG1pblt+fihNYXRoLnJhbmRvbSgpICogbWluLmxlbmd0aCldIDogKHJvdW5kaW5nSW5jcmVtZW50ID0gcm91bmRpbmdJbmNyZW1lbnQgfHwgMWUtNSkgJiYgKHJldHVybkZ1bmN0aW9uID0gcm91bmRpbmdJbmNyZW1lbnQgPCAxID8gTWF0aC5wb3coMTAsIChyb3VuZGluZ0luY3JlbWVudCArIFwiXCIpLmxlbmd0aCAtIDIpIDogMSkgJiYgTWF0aC5mbG9vcihNYXRoLnJvdW5kKChtaW4gLSByb3VuZGluZ0luY3JlbWVudCAvIDIgKyBNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbiArIHJvdW5kaW5nSW5jcmVtZW50ICogLjk5KSkgLyByb3VuZGluZ0luY3JlbWVudCkgKiByb3VuZGluZ0luY3JlbWVudCAqIHJldHVybkZ1bmN0aW9uKSAvIHJldHVybkZ1bmN0aW9uO1xuICB9KTtcbn0sXG4gICAgcGlwZSA9IGZ1bmN0aW9uIHBpcGUoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBmdW5jdGlvbnMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgZnVuY3Rpb25zW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbnMucmVkdWNlKGZ1bmN0aW9uICh2LCBmKSB7XG4gICAgICByZXR1cm4gZih2KTtcbiAgICB9LCB2YWx1ZSk7XG4gIH07XG59LFxuICAgIHVuaXRpemUgPSBmdW5jdGlvbiB1bml0aXplKGZ1bmMsIHVuaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiBmdW5jKHBhcnNlRmxvYXQodmFsdWUpKSArICh1bml0IHx8IGdldFVuaXQodmFsdWUpKTtcbiAgfTtcbn0sXG4gICAgbm9ybWFsaXplID0gZnVuY3Rpb24gbm9ybWFsaXplKG1pbiwgbWF4LCB2YWx1ZSkge1xuICByZXR1cm4gbWFwUmFuZ2UobWluLCBtYXgsIDAsIDEsIHZhbHVlKTtcbn0sXG4gICAgX3dyYXBBcnJheSA9IGZ1bmN0aW9uIF93cmFwQXJyYXkoYSwgd3JhcHBlciwgdmFsdWUpIHtcbiAgcmV0dXJuIF9jb25kaXRpb25hbFJldHVybih2YWx1ZSwgZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgcmV0dXJuIGFbfn53cmFwcGVyKGluZGV4KV07XG4gIH0pO1xufSxcbiAgICB3cmFwID0gZnVuY3Rpb24gd3JhcChtaW4sIG1heCwgdmFsdWUpIHtcbiAgLy8gTk9URTogd3JhcCgpIENBTk5PVCBiZSBhbiBhcnJvdyBmdW5jdGlvbiEgQSB2ZXJ5IG9kZCBjb21waWxpbmcgYnVnIGNhdXNlcyBwcm9ibGVtcyAodW5yZWxhdGVkIHRvIEdTQVApLlxuICB2YXIgcmFuZ2UgPSBtYXggLSBtaW47XG4gIHJldHVybiBfaXNBcnJheShtaW4pID8gX3dyYXBBcnJheShtaW4sIHdyYXAoMCwgbWluLmxlbmd0aCksIG1heCkgOiBfY29uZGl0aW9uYWxSZXR1cm4odmFsdWUsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiAocmFuZ2UgKyAodmFsdWUgLSBtaW4pICUgcmFuZ2UpICUgcmFuZ2UgKyBtaW47XG4gIH0pO1xufSxcbiAgICB3cmFwWW95byA9IGZ1bmN0aW9uIHdyYXBZb3lvKG1pbiwgbWF4LCB2YWx1ZSkge1xuICB2YXIgcmFuZ2UgPSBtYXggLSBtaW4sXG4gICAgICB0b3RhbCA9IHJhbmdlICogMjtcbiAgcmV0dXJuIF9pc0FycmF5KG1pbikgPyBfd3JhcEFycmF5KG1pbiwgd3JhcFlveW8oMCwgbWluLmxlbmd0aCAtIDEpLCBtYXgpIDogX2NvbmRpdGlvbmFsUmV0dXJuKHZhbHVlLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICB2YWx1ZSA9ICh0b3RhbCArICh2YWx1ZSAtIG1pbikgJSB0b3RhbCkgJSB0b3RhbCB8fCAwO1xuICAgIHJldHVybiBtaW4gKyAodmFsdWUgPiByYW5nZSA/IHRvdGFsIC0gdmFsdWUgOiB2YWx1ZSk7XG4gIH0pO1xufSxcbiAgICBfcmVwbGFjZVJhbmRvbSA9IGZ1bmN0aW9uIF9yZXBsYWNlUmFuZG9tKHZhbHVlKSB7XG4gIC8vcmVwbGFjZXMgYWxsIG9jY3VycmVuY2VzIG9mIHJhbmRvbSguLi4pIGluIGEgc3RyaW5nIHdpdGggdGhlIGNhbGN1bGF0ZWQgcmFuZG9tIHZhbHVlLiBjYW4gYmUgYSByYW5nZSBsaWtlIHJhbmRvbSgtMTAwLCAxMDAsIDUpIG9yIGFuIGFycmF5IGxpa2UgcmFuZG9tKFswLCAxMDAsIDUwMF0pXG4gIHZhciBwcmV2ID0gMCxcbiAgICAgIHMgPSBcIlwiLFxuICAgICAgaSxcbiAgICAgIG51bXMsXG4gICAgICBlbmQsXG4gICAgICBpc0FycmF5O1xuXG4gIHdoaWxlICh+KGkgPSB2YWx1ZS5pbmRleE9mKFwicmFuZG9tKFwiLCBwcmV2KSkpIHtcbiAgICBlbmQgPSB2YWx1ZS5pbmRleE9mKFwiKVwiLCBpKTtcbiAgICBpc0FycmF5ID0gdmFsdWUuY2hhckF0KGkgKyA3KSA9PT0gXCJbXCI7XG4gICAgbnVtcyA9IHZhbHVlLnN1YnN0cihpICsgNywgZW5kIC0gaSAtIDcpLm1hdGNoKGlzQXJyYXkgPyBfZGVsaW1pdGVkVmFsdWVFeHAgOiBfc3RyaWN0TnVtRXhwKTtcbiAgICBzICs9IHZhbHVlLnN1YnN0cihwcmV2LCBpIC0gcHJldikgKyByYW5kb20oaXNBcnJheSA/IG51bXMgOiArbnVtc1swXSwgaXNBcnJheSA/IDAgOiArbnVtc1sxXSwgK251bXNbMl0gfHwgMWUtNSk7XG4gICAgcHJldiA9IGVuZCArIDE7XG4gIH1cblxuICByZXR1cm4gcyArIHZhbHVlLnN1YnN0cihwcmV2LCB2YWx1ZS5sZW5ndGggLSBwcmV2KTtcbn0sXG4gICAgbWFwUmFuZ2UgPSBmdW5jdGlvbiBtYXBSYW5nZShpbk1pbiwgaW5NYXgsIG91dE1pbiwgb3V0TWF4LCB2YWx1ZSkge1xuICB2YXIgaW5SYW5nZSA9IGluTWF4IC0gaW5NaW4sXG4gICAgICBvdXRSYW5nZSA9IG91dE1heCAtIG91dE1pbjtcbiAgcmV0dXJuIF9jb25kaXRpb25hbFJldHVybih2YWx1ZSwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIG91dE1pbiArICgodmFsdWUgLSBpbk1pbikgLyBpblJhbmdlICogb3V0UmFuZ2UgfHwgMCk7XG4gIH0pO1xufSxcbiAgICBpbnRlcnBvbGF0ZSA9IGZ1bmN0aW9uIGludGVycG9sYXRlKHN0YXJ0LCBlbmQsIHByb2dyZXNzLCBtdXRhdGUpIHtcbiAgdmFyIGZ1bmMgPSBpc05hTihzdGFydCArIGVuZCkgPyAwIDogZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gKDEgLSBwKSAqIHN0YXJ0ICsgcCAqIGVuZDtcbiAgfTtcblxuICBpZiAoIWZ1bmMpIHtcbiAgICB2YXIgaXNTdHJpbmcgPSBfaXNTdHJpbmcoc3RhcnQpLFxuICAgICAgICBtYXN0ZXIgPSB7fSxcbiAgICAgICAgcCxcbiAgICAgICAgaSxcbiAgICAgICAgaW50ZXJwb2xhdG9ycyxcbiAgICAgICAgbCxcbiAgICAgICAgaWw7XG5cbiAgICBwcm9ncmVzcyA9PT0gdHJ1ZSAmJiAobXV0YXRlID0gMSkgJiYgKHByb2dyZXNzID0gbnVsbCk7XG5cbiAgICBpZiAoaXNTdHJpbmcpIHtcbiAgICAgIHN0YXJ0ID0ge1xuICAgICAgICBwOiBzdGFydFxuICAgICAgfTtcbiAgICAgIGVuZCA9IHtcbiAgICAgICAgcDogZW5kXG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAoX2lzQXJyYXkoc3RhcnQpICYmICFfaXNBcnJheShlbmQpKSB7XG4gICAgICBpbnRlcnBvbGF0b3JzID0gW107XG4gICAgICBsID0gc3RhcnQubGVuZ3RoO1xuICAgICAgaWwgPSBsIC0gMjtcblxuICAgICAgZm9yIChpID0gMTsgaSA8IGw7IGkrKykge1xuICAgICAgICBpbnRlcnBvbGF0b3JzLnB1c2goaW50ZXJwb2xhdGUoc3RhcnRbaSAtIDFdLCBzdGFydFtpXSkpOyAvL2J1aWxkIHRoZSBpbnRlcnBvbGF0b3JzIHVwIGZyb250IGFzIGEgcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uIHNvIHRoYXQgd2hlbiB0aGUgZnVuY3Rpb24gaXMgY2FsbGVkIG1hbnkgdGltZXMsIGl0IGNhbiBqdXN0IHJldXNlIHRoZW0uXG4gICAgICB9XG5cbiAgICAgIGwtLTtcblxuICAgICAgZnVuYyA9IGZ1bmN0aW9uIGZ1bmMocCkge1xuICAgICAgICBwICo9IGw7XG4gICAgICAgIHZhciBpID0gTWF0aC5taW4oaWwsIH5+cCk7XG4gICAgICAgIHJldHVybiBpbnRlcnBvbGF0b3JzW2ldKHAgLSBpKTtcbiAgICAgIH07XG5cbiAgICAgIHByb2dyZXNzID0gZW5kO1xuICAgIH0gZWxzZSBpZiAoIW11dGF0ZSkge1xuICAgICAgc3RhcnQgPSBfbWVyZ2UoX2lzQXJyYXkoc3RhcnQpID8gW10gOiB7fSwgc3RhcnQpO1xuICAgIH1cblxuICAgIGlmICghaW50ZXJwb2xhdG9ycykge1xuICAgICAgZm9yIChwIGluIGVuZCkge1xuICAgICAgICBfYWRkUHJvcFR3ZWVuLmNhbGwobWFzdGVyLCBzdGFydCwgcCwgXCJnZXRcIiwgZW5kW3BdKTtcbiAgICAgIH1cblxuICAgICAgZnVuYyA9IGZ1bmN0aW9uIGZ1bmMocCkge1xuICAgICAgICByZXR1cm4gX3JlbmRlclByb3BUd2VlbnMocCwgbWFzdGVyKSB8fCAoaXNTdHJpbmcgPyBzdGFydC5wIDogc3RhcnQpO1xuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gX2NvbmRpdGlvbmFsUmV0dXJuKHByb2dyZXNzLCBmdW5jKTtcbn0sXG4gICAgX2dldExhYmVsSW5EaXJlY3Rpb24gPSBmdW5jdGlvbiBfZ2V0TGFiZWxJbkRpcmVjdGlvbih0aW1lbGluZSwgZnJvbVRpbWUsIGJhY2t3YXJkKSB7XG4gIC8vdXNlZCBmb3IgbmV4dExhYmVsKCkgYW5kIHByZXZpb3VzTGFiZWwoKVxuICB2YXIgbGFiZWxzID0gdGltZWxpbmUubGFiZWxzLFxuICAgICAgbWluID0gX2JpZ051bSxcbiAgICAgIHAsXG4gICAgICBkaXN0YW5jZSxcbiAgICAgIGxhYmVsO1xuXG4gIGZvciAocCBpbiBsYWJlbHMpIHtcbiAgICBkaXN0YW5jZSA9IGxhYmVsc1twXSAtIGZyb21UaW1lO1xuXG4gICAgaWYgKGRpc3RhbmNlIDwgMCA9PT0gISFiYWNrd2FyZCAmJiBkaXN0YW5jZSAmJiBtaW4gPiAoZGlzdGFuY2UgPSBNYXRoLmFicyhkaXN0YW5jZSkpKSB7XG4gICAgICBsYWJlbCA9IHA7XG4gICAgICBtaW4gPSBkaXN0YW5jZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbGFiZWw7XG59LFxuICAgIF9jYWxsYmFjayA9IGZ1bmN0aW9uIF9jYWxsYmFjayhhbmltYXRpb24sIHR5cGUsIGV4ZWN1dGVMYXp5Rmlyc3QpIHtcbiAgdmFyIHYgPSBhbmltYXRpb24udmFycyxcbiAgICAgIGNhbGxiYWNrID0gdlt0eXBlXSxcbiAgICAgIHByZXZDb250ZXh0ID0gX2NvbnRleHQsXG4gICAgICBjb250ZXh0ID0gYW5pbWF0aW9uLl9jdHgsXG4gICAgICBwYXJhbXMsXG4gICAgICBzY29wZSxcbiAgICAgIHJlc3VsdDtcblxuICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcGFyYW1zID0gdlt0eXBlICsgXCJQYXJhbXNcIl07XG4gIHNjb3BlID0gdi5jYWxsYmFja1Njb3BlIHx8IGFuaW1hdGlvbjtcbiAgZXhlY3V0ZUxhenlGaXJzdCAmJiBfbGF6eVR3ZWVucy5sZW5ndGggJiYgX2xhenlSZW5kZXIoKTsgLy9pbiBjYXNlIHJlbmRlcmluZyBjYXVzZWQgYW55IHR3ZWVucyB0byBsYXp5LWluaXQsIHdlIHNob3VsZCByZW5kZXIgdGhlbSBiZWNhdXNlIHR5cGljYWxseSB3aGVuIGEgdGltZWxpbmUgZmluaXNoZXMsIHVzZXJzIGV4cGVjdCB0aGluZ3MgdG8gaGF2ZSByZW5kZXJlZCBmdWxseS4gSW1hZ2luZSBhbiBvblVwZGF0ZSBvbiBhIHRpbWVsaW5lIHRoYXQgcmVwb3J0cy9jaGVja3MgdHdlZW5lZCB2YWx1ZXMuXG5cbiAgY29udGV4dCAmJiAoX2NvbnRleHQgPSBjb250ZXh0KTtcbiAgcmVzdWx0ID0gcGFyYW1zID8gY2FsbGJhY2suYXBwbHkoc2NvcGUsIHBhcmFtcykgOiBjYWxsYmFjay5jYWxsKHNjb3BlKTtcbiAgX2NvbnRleHQgPSBwcmV2Q29udGV4dDtcbiAgcmV0dXJuIHJlc3VsdDtcbn0sXG4gICAgX2ludGVycnVwdCA9IGZ1bmN0aW9uIF9pbnRlcnJ1cHQoYW5pbWF0aW9uKSB7XG4gIF9yZW1vdmVGcm9tUGFyZW50KGFuaW1hdGlvbik7XG5cbiAgYW5pbWF0aW9uLnNjcm9sbFRyaWdnZXIgJiYgYW5pbWF0aW9uLnNjcm9sbFRyaWdnZXIua2lsbCghIV9yZXZlcnRpbmcpO1xuICBhbmltYXRpb24ucHJvZ3Jlc3MoKSA8IDEgJiYgX2NhbGxiYWNrKGFuaW1hdGlvbiwgXCJvbkludGVycnVwdFwiKTtcbiAgcmV0dXJuIGFuaW1hdGlvbjtcbn0sXG4gICAgX3F1aWNrVHdlZW4sXG4gICAgX3JlZ2lzdGVyUGx1Z2luUXVldWUgPSBbXSxcbiAgICBfY3JlYXRlUGx1Z2luID0gZnVuY3Rpb24gX2NyZWF0ZVBsdWdpbihjb25maWcpIHtcbiAgaWYgKCFjb25maWcpIHJldHVybjtcbiAgY29uZmlnID0gIWNvbmZpZy5uYW1lICYmIGNvbmZpZ1tcImRlZmF1bHRcIl0gfHwgY29uZmlnOyAvLyBVTUQgcGFja2FnaW5nIHdyYXBzIHRoaW5ncyBvZGRseSwgc28gZm9yIGV4YW1wbGUgTW90aW9uUGF0aEhlbHBlciBiZWNvbWVzIHtNb3Rpb25QYXRoSGVscGVyOk1vdGlvblBhdGhIZWxwZXIsIGRlZmF1bHQ6TW90aW9uUGF0aEhlbHBlcn0uXG5cbiAgaWYgKF93aW5kb3dFeGlzdHMoKSB8fCBjb25maWcuaGVhZGxlc3MpIHtcbiAgICAvLyBlZGdlIGNhc2U6IHNvbWUgYnVpbGQgdG9vbHMgbWF5IHBhc3MgaW4gYSBudWxsL3VuZGVmaW5lZCB2YWx1ZVxuICAgIHZhciBuYW1lID0gY29uZmlnLm5hbWUsXG4gICAgICAgIGlzRnVuYyA9IF9pc0Z1bmN0aW9uKGNvbmZpZyksXG4gICAgICAgIFBsdWdpbiA9IG5hbWUgJiYgIWlzRnVuYyAmJiBjb25maWcuaW5pdCA/IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuX3Byb3BzID0gW107XG4gICAgfSA6IGNvbmZpZyxcbiAgICAgICAgLy9pbiBjYXNlIHNvbWVvbmUgcGFzc2VzIGluIGFuIG9iamVjdCB0aGF0J3Mgbm90IGEgcGx1Z2luLCBsaWtlIEN1c3RvbUVhc2VcbiAgICBpbnN0YW5jZURlZmF1bHRzID0ge1xuICAgICAgaW5pdDogX2VtcHR5RnVuYyxcbiAgICAgIHJlbmRlcjogX3JlbmRlclByb3BUd2VlbnMsXG4gICAgICBhZGQ6IF9hZGRQcm9wVHdlZW4sXG4gICAgICBraWxsOiBfa2lsbFByb3BUd2VlbnNPZixcbiAgICAgIG1vZGlmaWVyOiBfYWRkUGx1Z2luTW9kaWZpZXIsXG4gICAgICByYXdWYXJzOiAwXG4gICAgfSxcbiAgICAgICAgc3RhdGljcyA9IHtcbiAgICAgIHRhcmdldFRlc3Q6IDAsXG4gICAgICBnZXQ6IDAsXG4gICAgICBnZXRTZXR0ZXI6IF9nZXRTZXR0ZXIsXG4gICAgICBhbGlhc2VzOiB7fSxcbiAgICAgIHJlZ2lzdGVyOiAwXG4gICAgfTtcblxuICAgIF93YWtlKCk7XG5cbiAgICBpZiAoY29uZmlnICE9PSBQbHVnaW4pIHtcbiAgICAgIGlmIChfcGx1Z2luc1tuYW1lXSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIF9zZXREZWZhdWx0cyhQbHVnaW4sIF9zZXREZWZhdWx0cyhfY29weUV4Y2x1ZGluZyhjb25maWcsIGluc3RhbmNlRGVmYXVsdHMpLCBzdGF0aWNzKSk7IC8vc3RhdGljIG1ldGhvZHNcblxuXG4gICAgICBfbWVyZ2UoUGx1Z2luLnByb3RvdHlwZSwgX21lcmdlKGluc3RhbmNlRGVmYXVsdHMsIF9jb3B5RXhjbHVkaW5nKGNvbmZpZywgc3RhdGljcykpKTsgLy9pbnN0YW5jZSBtZXRob2RzXG5cblxuICAgICAgX3BsdWdpbnNbUGx1Z2luLnByb3AgPSBuYW1lXSA9IFBsdWdpbjtcblxuICAgICAgaWYgKGNvbmZpZy50YXJnZXRUZXN0KSB7XG4gICAgICAgIF9oYXJuZXNzUGx1Z2lucy5wdXNoKFBsdWdpbik7XG5cbiAgICAgICAgX3Jlc2VydmVkUHJvcHNbbmFtZV0gPSAxO1xuICAgICAgfVxuXG4gICAgICBuYW1lID0gKG5hbWUgPT09IFwiY3NzXCIgPyBcIkNTU1wiIDogbmFtZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIG5hbWUuc3Vic3RyKDEpKSArIFwiUGx1Z2luXCI7IC8vZm9yIHRoZSBnbG9iYWwgbmFtZS4gXCJtb3Rpb25QYXRoXCIgc2hvdWxkIGJlY29tZSBNb3Rpb25QYXRoUGx1Z2luXG4gICAgfVxuXG4gICAgX2FkZEdsb2JhbChuYW1lLCBQbHVnaW4pO1xuXG4gICAgY29uZmlnLnJlZ2lzdGVyICYmIGNvbmZpZy5yZWdpc3Rlcihnc2FwLCBQbHVnaW4sIFByb3BUd2Vlbik7XG4gIH0gZWxzZSB7XG4gICAgX3JlZ2lzdGVyUGx1Z2luUXVldWUucHVzaChjb25maWcpO1xuICB9XG59LFxuXG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENPTE9SU1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXzI1NSA9IDI1NSxcbiAgICBfY29sb3JMb29rdXAgPSB7XG4gIGFxdWE6IFswLCBfMjU1LCBfMjU1XSxcbiAgbGltZTogWzAsIF8yNTUsIDBdLFxuICBzaWx2ZXI6IFsxOTIsIDE5MiwgMTkyXSxcbiAgYmxhY2s6IFswLCAwLCAwXSxcbiAgbWFyb29uOiBbMTI4LCAwLCAwXSxcbiAgdGVhbDogWzAsIDEyOCwgMTI4XSxcbiAgYmx1ZTogWzAsIDAsIF8yNTVdLFxuICBuYXZ5OiBbMCwgMCwgMTI4XSxcbiAgd2hpdGU6IFtfMjU1LCBfMjU1LCBfMjU1XSxcbiAgb2xpdmU6IFsxMjgsIDEyOCwgMF0sXG4gIHllbGxvdzogW18yNTUsIF8yNTUsIDBdLFxuICBvcmFuZ2U6IFtfMjU1LCAxNjUsIDBdLFxuICBncmF5OiBbMTI4LCAxMjgsIDEyOF0sXG4gIHB1cnBsZTogWzEyOCwgMCwgMTI4XSxcbiAgZ3JlZW46IFswLCAxMjgsIDBdLFxuICByZWQ6IFtfMjU1LCAwLCAwXSxcbiAgcGluazogW18yNTUsIDE5MiwgMjAzXSxcbiAgY3lhbjogWzAsIF8yNTUsIF8yNTVdLFxuICB0cmFuc3BhcmVudDogW18yNTUsIF8yNTUsIF8yNTUsIDBdXG59LFxuICAgIC8vIHBvc3NpYmxlIGZ1dHVyZSBpZGVhIHRvIHJlcGxhY2UgdGhlIGhhcmQtY29kZWQgY29sb3IgbmFtZSB2YWx1ZXMgLSBwdXQgdGhpcyBpbiB0aGUgdGlja2VyLndha2UoKSB3aGVyZSB3ZSBzZXQgdGhlIF9kb2M6XG4vLyBsZXQgY3R4ID0gX2RvYy5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpLmdldENvbnRleHQoXCIyZFwiKTtcbi8vIF9mb3JFYWNoTmFtZShcImFxdWEsbGltZSxzaWx2ZXIsYmxhY2ssbWFyb29uLHRlYWwsYmx1ZSxuYXZ5LHdoaXRlLG9saXZlLHllbGxvdyxvcmFuZ2UsZ3JheSxwdXJwbGUsZ3JlZW4scmVkLHBpbmssY3lhblwiLCBjb2xvciA9PiB7Y3R4LmZpbGxTdHlsZSA9IGNvbG9yOyBfY29sb3JMb29rdXBbY29sb3JdID0gc3BsaXRDb2xvcihjdHguZmlsbFN0eWxlKX0pO1xuX2h1ZSA9IGZ1bmN0aW9uIF9odWUoaCwgbTEsIG0yKSB7XG4gIGggKz0gaCA8IDAgPyAxIDogaCA+IDEgPyAtMSA6IDA7XG4gIHJldHVybiAoaCAqIDYgPCAxID8gbTEgKyAobTIgLSBtMSkgKiBoICogNiA6IGggPCAuNSA/IG0yIDogaCAqIDMgPCAyID8gbTEgKyAobTIgLSBtMSkgKiAoMiAvIDMgLSBoKSAqIDYgOiBtMSkgKiBfMjU1ICsgLjUgfCAwO1xufSxcbiAgICBzcGxpdENvbG9yID0gZnVuY3Rpb24gc3BsaXRDb2xvcih2LCB0b0hTTCwgZm9yY2VBbHBoYSkge1xuICB2YXIgYSA9ICF2ID8gX2NvbG9yTG9va3VwLmJsYWNrIDogX2lzTnVtYmVyKHYpID8gW3YgPj4gMTYsIHYgPj4gOCAmIF8yNTUsIHYgJiBfMjU1XSA6IDAsXG4gICAgICByLFxuICAgICAgZyxcbiAgICAgIGIsXG4gICAgICBoLFxuICAgICAgcyxcbiAgICAgIGwsXG4gICAgICBtYXgsXG4gICAgICBtaW4sXG4gICAgICBkLFxuICAgICAgd2FzSFNMO1xuXG4gIGlmICghYSkge1xuICAgIGlmICh2LnN1YnN0cigtMSkgPT09IFwiLFwiKSB7XG4gICAgICAvL3NvbWV0aW1lcyBhIHRyYWlsaW5nIGNvbW1hIGlzIGluY2x1ZGVkIGFuZCB3ZSBzaG91bGQgY2hvcCBpdCBvZmYgKHR5cGljYWxseSBmcm9tIGEgY29tbWEtZGVsaW1pdGVkIGxpc3Qgb2YgdmFsdWVzIGxpa2UgYSB0ZXh0U2hhZG93OlwiMnB4IDJweCAycHggYmx1ZSwgNXB4IDVweCA1cHggcmdiKDI1NSwwLDApXCIgLSBpbiB0aGlzIGV4YW1wbGUgXCJibHVlLFwiIGhhcyBhIHRyYWlsaW5nIGNvbW1hLiBXZSBjb3VsZCBzdHJpcCBpdCBvdXQgaW5zaWRlIHBhcnNlQ29tcGxleCgpIGJ1dCB3ZSdkIG5lZWQgdG8gZG8gaXQgdG8gdGhlIGJlZ2lubmluZyBhbmQgZW5kaW5nIHZhbHVlcyBwbHVzIGl0IHdvdWxkbid0IHByb3ZpZGUgcHJvdGVjdGlvbiBmcm9tIG90aGVyIHBvdGVudGlhbCBzY2VuYXJpb3MgbGlrZSBpZiB0aGUgdXNlciBwYXNzZXMgaW4gYSBzaW1pbGFyIHZhbHVlLlxuICAgICAgdiA9IHYuc3Vic3RyKDAsIHYubGVuZ3RoIC0gMSk7XG4gICAgfVxuXG4gICAgaWYgKF9jb2xvckxvb2t1cFt2XSkge1xuICAgICAgYSA9IF9jb2xvckxvb2t1cFt2XTtcbiAgICB9IGVsc2UgaWYgKHYuY2hhckF0KDApID09PSBcIiNcIikge1xuICAgICAgaWYgKHYubGVuZ3RoIDwgNikge1xuICAgICAgICAvL2ZvciBzaG9ydGhhbmQgbGlrZSAjOUYwIG9yICM5RjBGIChjb3VsZCBoYXZlIGFscGhhKVxuICAgICAgICByID0gdi5jaGFyQXQoMSk7XG4gICAgICAgIGcgPSB2LmNoYXJBdCgyKTtcbiAgICAgICAgYiA9IHYuY2hhckF0KDMpO1xuICAgICAgICB2ID0gXCIjXCIgKyByICsgciArIGcgKyBnICsgYiArIGIgKyAodi5sZW5ndGggPT09IDUgPyB2LmNoYXJBdCg0KSArIHYuY2hhckF0KDQpIDogXCJcIik7XG4gICAgICB9XG5cbiAgICAgIGlmICh2Lmxlbmd0aCA9PT0gOSkge1xuICAgICAgICAvLyBoZXggd2l0aCBhbHBoYSwgbGlrZSAjZmQ1ZTUzZmZcbiAgICAgICAgYSA9IHBhcnNlSW50KHYuc3Vic3RyKDEsIDYpLCAxNik7XG4gICAgICAgIHJldHVybiBbYSA+PiAxNiwgYSA+PiA4ICYgXzI1NSwgYSAmIF8yNTUsIHBhcnNlSW50KHYuc3Vic3RyKDcpLCAxNikgLyAyNTVdO1xuICAgICAgfVxuXG4gICAgICB2ID0gcGFyc2VJbnQodi5zdWJzdHIoMSksIDE2KTtcbiAgICAgIGEgPSBbdiA+PiAxNiwgdiA+PiA4ICYgXzI1NSwgdiAmIF8yNTVdO1xuICAgIH0gZWxzZSBpZiAodi5zdWJzdHIoMCwgMykgPT09IFwiaHNsXCIpIHtcbiAgICAgIGEgPSB3YXNIU0wgPSB2Lm1hdGNoKF9zdHJpY3ROdW1FeHApO1xuXG4gICAgICBpZiAoIXRvSFNMKSB7XG4gICAgICAgIGggPSArYVswXSAlIDM2MCAvIDM2MDtcbiAgICAgICAgcyA9ICthWzFdIC8gMTAwO1xuICAgICAgICBsID0gK2FbMl0gLyAxMDA7XG4gICAgICAgIGcgPSBsIDw9IC41ID8gbCAqIChzICsgMSkgOiBsICsgcyAtIGwgKiBzO1xuICAgICAgICByID0gbCAqIDIgLSBnO1xuICAgICAgICBhLmxlbmd0aCA+IDMgJiYgKGFbM10gKj0gMSk7IC8vY2FzdCBhcyBudW1iZXJcblxuICAgICAgICBhWzBdID0gX2h1ZShoICsgMSAvIDMsIHIsIGcpO1xuICAgICAgICBhWzFdID0gX2h1ZShoLCByLCBnKTtcbiAgICAgICAgYVsyXSA9IF9odWUoaCAtIDEgLyAzLCByLCBnKTtcbiAgICAgIH0gZWxzZSBpZiAofnYuaW5kZXhPZihcIj1cIikpIHtcbiAgICAgICAgLy9pZiByZWxhdGl2ZSB2YWx1ZXMgYXJlIGZvdW5kLCBqdXN0IHJldHVybiB0aGUgcmF3IHN0cmluZ3Mgd2l0aCB0aGUgcmVsYXRpdmUgcHJlZml4ZXMgaW4gcGxhY2UuXG4gICAgICAgIGEgPSB2Lm1hdGNoKF9udW1FeHApO1xuICAgICAgICBmb3JjZUFscGhhICYmIGEubGVuZ3RoIDwgNCAmJiAoYVszXSA9IDEpO1xuICAgICAgICByZXR1cm4gYTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgYSA9IHYubWF0Y2goX3N0cmljdE51bUV4cCkgfHwgX2NvbG9yTG9va3VwLnRyYW5zcGFyZW50O1xuICAgIH1cblxuICAgIGEgPSBhLm1hcChOdW1iZXIpO1xuICB9XG5cbiAgaWYgKHRvSFNMICYmICF3YXNIU0wpIHtcbiAgICByID0gYVswXSAvIF8yNTU7XG4gICAgZyA9IGFbMV0gLyBfMjU1O1xuICAgIGIgPSBhWzJdIC8gXzI1NTtcbiAgICBtYXggPSBNYXRoLm1heChyLCBnLCBiKTtcbiAgICBtaW4gPSBNYXRoLm1pbihyLCBnLCBiKTtcbiAgICBsID0gKG1heCArIG1pbikgLyAyO1xuXG4gICAgaWYgKG1heCA9PT0gbWluKSB7XG4gICAgICBoID0gcyA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGQgPSBtYXggLSBtaW47XG4gICAgICBzID0gbCA+IDAuNSA/IGQgLyAoMiAtIG1heCAtIG1pbikgOiBkIC8gKG1heCArIG1pbik7XG4gICAgICBoID0gbWF4ID09PSByID8gKGcgLSBiKSAvIGQgKyAoZyA8IGIgPyA2IDogMCkgOiBtYXggPT09IGcgPyAoYiAtIHIpIC8gZCArIDIgOiAociAtIGcpIC8gZCArIDQ7XG4gICAgICBoICo9IDYwO1xuICAgIH1cblxuICAgIGFbMF0gPSB+fihoICsgLjUpO1xuICAgIGFbMV0gPSB+fihzICogMTAwICsgLjUpO1xuICAgIGFbMl0gPSB+fihsICogMTAwICsgLjUpO1xuICB9XG5cbiAgZm9yY2VBbHBoYSAmJiBhLmxlbmd0aCA8IDQgJiYgKGFbM10gPSAxKTtcbiAgcmV0dXJuIGE7XG59LFxuICAgIF9jb2xvck9yZGVyRGF0YSA9IGZ1bmN0aW9uIF9jb2xvck9yZGVyRGF0YSh2KSB7XG4gIC8vIHN0cmlwcyBvdXQgdGhlIGNvbG9ycyBmcm9tIHRoZSBzdHJpbmcsIGZpbmRzIGFsbCB0aGUgbnVtZXJpYyBzbG90cyAod2l0aCB1bml0cykgYW5kIHJldHVybnMgYW4gYXJyYXkgb2YgdGhvc2UuIFRoZSBBcnJheSBhbHNvIGhhcyBhIFwiY1wiIHByb3BlcnR5IHdoaWNoIGlzIGFuIEFycmF5IG9mIHRoZSBpbmRleCB2YWx1ZXMgd2hlcmUgdGhlIGNvbG9ycyBiZWxvbmcuIFRoaXMgaXMgdG8gaGVscCB3b3JrIGFyb3VuZCBpc3N1ZXMgd2hlcmUgdGhlcmUncyBhIG1pcy1tYXRjaGVkIG9yZGVyIG9mIGNvbG9yL251bWVyaWMgZGF0YSBsaWtlIGRyb3Atc2hhZG93KCNmMDAgMHB4IDFweCAycHgpIGFuZCBkcm9wLXNoYWRvdygweCAxcHggMnB4ICNmMDApLiBUaGlzIGlzIGJhc2ljYWxseSBhIGhlbHBlciBmdW5jdGlvbiB1c2VkIGluIF9mb3JtYXRDb2xvcnMoKVxuICB2YXIgdmFsdWVzID0gW10sXG4gICAgICBjID0gW10sXG4gICAgICBpID0gLTE7XG4gIHYuc3BsaXQoX2NvbG9yRXhwKS5mb3JFYWNoKGZ1bmN0aW9uICh2KSB7XG4gICAgdmFyIGEgPSB2Lm1hdGNoKF9udW1XaXRoVW5pdEV4cCkgfHwgW107XG4gICAgdmFsdWVzLnB1c2guYXBwbHkodmFsdWVzLCBhKTtcbiAgICBjLnB1c2goaSArPSBhLmxlbmd0aCArIDEpO1xuICB9KTtcbiAgdmFsdWVzLmMgPSBjO1xuICByZXR1cm4gdmFsdWVzO1xufSxcbiAgICBfZm9ybWF0Q29sb3JzID0gZnVuY3Rpb24gX2Zvcm1hdENvbG9ycyhzLCB0b0hTTCwgb3JkZXJNYXRjaERhdGEpIHtcbiAgdmFyIHJlc3VsdCA9IFwiXCIsXG4gICAgICBjb2xvcnMgPSAocyArIHJlc3VsdCkubWF0Y2goX2NvbG9yRXhwKSxcbiAgICAgIHR5cGUgPSB0b0hTTCA/IFwiaHNsYShcIiA6IFwicmdiYShcIixcbiAgICAgIGkgPSAwLFxuICAgICAgYyxcbiAgICAgIHNoZWxsLFxuICAgICAgZCxcbiAgICAgIGw7XG5cbiAgaWYgKCFjb2xvcnMpIHtcbiAgICByZXR1cm4gcztcbiAgfVxuXG4gIGNvbG9ycyA9IGNvbG9ycy5tYXAoZnVuY3Rpb24gKGNvbG9yKSB7XG4gICAgcmV0dXJuIChjb2xvciA9IHNwbGl0Q29sb3IoY29sb3IsIHRvSFNMLCAxKSkgJiYgdHlwZSArICh0b0hTTCA/IGNvbG9yWzBdICsgXCIsXCIgKyBjb2xvclsxXSArIFwiJSxcIiArIGNvbG9yWzJdICsgXCIlLFwiICsgY29sb3JbM10gOiBjb2xvci5qb2luKFwiLFwiKSkgKyBcIilcIjtcbiAgfSk7XG5cbiAgaWYgKG9yZGVyTWF0Y2hEYXRhKSB7XG4gICAgZCA9IF9jb2xvck9yZGVyRGF0YShzKTtcbiAgICBjID0gb3JkZXJNYXRjaERhdGEuYztcblxuICAgIGlmIChjLmpvaW4ocmVzdWx0KSAhPT0gZC5jLmpvaW4ocmVzdWx0KSkge1xuICAgICAgc2hlbGwgPSBzLnJlcGxhY2UoX2NvbG9yRXhwLCBcIjFcIikuc3BsaXQoX251bVdpdGhVbml0RXhwKTtcbiAgICAgIGwgPSBzaGVsbC5sZW5ndGggLSAxO1xuXG4gICAgICBmb3IgKDsgaSA8IGw7IGkrKykge1xuICAgICAgICByZXN1bHQgKz0gc2hlbGxbaV0gKyAofmMuaW5kZXhPZihpKSA/IGNvbG9ycy5zaGlmdCgpIHx8IHR5cGUgKyBcIjAsMCwwLDApXCIgOiAoZC5sZW5ndGggPyBkIDogY29sb3JzLmxlbmd0aCA/IGNvbG9ycyA6IG9yZGVyTWF0Y2hEYXRhKS5zaGlmdCgpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoIXNoZWxsKSB7XG4gICAgc2hlbGwgPSBzLnNwbGl0KF9jb2xvckV4cCk7XG4gICAgbCA9IHNoZWxsLmxlbmd0aCAtIDE7XG5cbiAgICBmb3IgKDsgaSA8IGw7IGkrKykge1xuICAgICAgcmVzdWx0ICs9IHNoZWxsW2ldICsgY29sb3JzW2ldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQgKyBzaGVsbFtsXTtcbn0sXG4gICAgX2NvbG9yRXhwID0gZnVuY3Rpb24gKCkge1xuICB2YXIgcyA9IFwiKD86XFxcXGIoPzooPzpyZ2J8cmdiYXxoc2x8aHNsYSlcXFxcKC4rP1xcXFwpKXxcXFxcQiMoPzpbMC05YS1mXXszLDR9KXsxLDJ9XFxcXGJcIixcbiAgICAgIC8vd2UnbGwgZHluYW1pY2FsbHkgYnVpbGQgdGhpcyBSZWd1bGFyIEV4cHJlc3Npb24gdG8gY29uc2VydmUgZmlsZSBzaXplLiBBZnRlciBidWlsZGluZyBpdCwgaXQgd2lsbCBiZSBhYmxlIHRvIGZpbmQgcmdiKCksIHJnYmEoKSwgIyAoaGV4YWRlY2ltYWwpLCBhbmQgbmFtZWQgY29sb3IgdmFsdWVzIGxpa2UgcmVkLCBibHVlLCBwdXJwbGUsIGV0Yy4sXG4gIHA7XG5cbiAgZm9yIChwIGluIF9jb2xvckxvb2t1cCkge1xuICAgIHMgKz0gXCJ8XCIgKyBwICsgXCJcXFxcYlwiO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBSZWdFeHAocyArIFwiKVwiLCBcImdpXCIpO1xufSgpLFxuICAgIF9oc2xFeHAgPSAvaHNsW2FdP1xcKC8sXG4gICAgX2NvbG9yU3RyaW5nRmlsdGVyID0gZnVuY3Rpb24gX2NvbG9yU3RyaW5nRmlsdGVyKGEpIHtcbiAgdmFyIGNvbWJpbmVkID0gYS5qb2luKFwiIFwiKSxcbiAgICAgIHRvSFNMO1xuICBfY29sb3JFeHAubGFzdEluZGV4ID0gMDtcblxuICBpZiAoX2NvbG9yRXhwLnRlc3QoY29tYmluZWQpKSB7XG4gICAgdG9IU0wgPSBfaHNsRXhwLnRlc3QoY29tYmluZWQpO1xuICAgIGFbMV0gPSBfZm9ybWF0Q29sb3JzKGFbMV0sIHRvSFNMKTtcbiAgICBhWzBdID0gX2Zvcm1hdENvbG9ycyhhWzBdLCB0b0hTTCwgX2NvbG9yT3JkZXJEYXRhKGFbMV0pKTsgLy8gbWFrZSBzdXJlIHRoZSBvcmRlciBvZiBudW1iZXJzL2NvbG9ycyBtYXRjaCB3aXRoIHRoZSBFTkQgdmFsdWUuXG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufSxcblxuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBUSUNLRVJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cbl90aWNrZXJBY3RpdmUsXG4gICAgX3RpY2tlciA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIF9nZXRUaW1lID0gRGF0ZS5ub3csXG4gICAgICBfbGFnVGhyZXNob2xkID0gNTAwLFxuICAgICAgX2FkanVzdGVkTGFnID0gMzMsXG4gICAgICBfc3RhcnRUaW1lID0gX2dldFRpbWUoKSxcbiAgICAgIF9sYXN0VXBkYXRlID0gX3N0YXJ0VGltZSxcbiAgICAgIF9nYXAgPSAxMDAwIC8gMjQwLFxuICAgICAgX25leHRUaW1lID0gX2dhcCxcbiAgICAgIF9saXN0ZW5lcnMgPSBbXSxcbiAgICAgIF9pZCxcbiAgICAgIF9yZXEsXG4gICAgICBfcmFmLFxuICAgICAgX3NlbGYsXG4gICAgICBfZGVsdGEsXG4gICAgICBfaSxcbiAgICAgIF90aWNrID0gZnVuY3Rpb24gX3RpY2sodikge1xuICAgIHZhciBlbGFwc2VkID0gX2dldFRpbWUoKSAtIF9sYXN0VXBkYXRlLFxuICAgICAgICBtYW51YWwgPSB2ID09PSB0cnVlLFxuICAgICAgICBvdmVybGFwLFxuICAgICAgICBkaXNwYXRjaCxcbiAgICAgICAgdGltZSxcbiAgICAgICAgZnJhbWU7XG5cbiAgICAoZWxhcHNlZCA+IF9sYWdUaHJlc2hvbGQgfHwgZWxhcHNlZCA8IDApICYmIChfc3RhcnRUaW1lICs9IGVsYXBzZWQgLSBfYWRqdXN0ZWRMYWcpO1xuICAgIF9sYXN0VXBkYXRlICs9IGVsYXBzZWQ7XG4gICAgdGltZSA9IF9sYXN0VXBkYXRlIC0gX3N0YXJ0VGltZTtcbiAgICBvdmVybGFwID0gdGltZSAtIF9uZXh0VGltZTtcblxuICAgIGlmIChvdmVybGFwID4gMCB8fCBtYW51YWwpIHtcbiAgICAgIGZyYW1lID0gKytfc2VsZi5mcmFtZTtcbiAgICAgIF9kZWx0YSA9IHRpbWUgLSBfc2VsZi50aW1lICogMTAwMDtcbiAgICAgIF9zZWxmLnRpbWUgPSB0aW1lID0gdGltZSAvIDEwMDA7XG4gICAgICBfbmV4dFRpbWUgKz0gb3ZlcmxhcCArIChvdmVybGFwID49IF9nYXAgPyA0IDogX2dhcCAtIG92ZXJsYXApO1xuICAgICAgZGlzcGF0Y2ggPSAxO1xuICAgIH1cblxuICAgIG1hbnVhbCB8fCAoX2lkID0gX3JlcShfdGljaykpOyAvL21ha2Ugc3VyZSB0aGUgcmVxdWVzdCBpcyBtYWRlIGJlZm9yZSB3ZSBkaXNwYXRjaCB0aGUgXCJ0aWNrXCIgZXZlbnQgc28gdGhhdCB0aW1pbmcgaXMgbWFpbnRhaW5lZC4gT3RoZXJ3aXNlLCBpZiBwcm9jZXNzaW5nIHRoZSBcInRpY2tcIiByZXF1aXJlcyBhIGJ1bmNoIG9mIHRpbWUgKGxpa2UgMTVtcykgYW5kIHdlJ3JlIHVzaW5nIGEgc2V0VGltZW91dCgpIHRoYXQncyBiYXNlZCBvbiAxNi43bXMsIGl0J2QgdGVjaG5pY2FsbHkgdGFrZSAzMS43bXMgYmV0d2VlbiBmcmFtZXMgb3RoZXJ3aXNlLlxuXG4gICAgaWYgKGRpc3BhdGNoKSB7XG4gICAgICBmb3IgKF9pID0gMDsgX2kgPCBfbGlzdGVuZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAvLyB1c2UgX2kgYW5kIGNoZWNrIF9saXN0ZW5lcnMubGVuZ3RoIGluc3RlYWQgb2YgYSB2YXJpYWJsZSBiZWNhdXNlIGEgbGlzdGVuZXIgY291bGQgZ2V0IHJlbW92ZWQgZHVyaW5nIHRoZSBsb29wLCBhbmQgaWYgdGhhdCBoYXBwZW5zIHRvIGFuIGVsZW1lbnQgbGVzcyB0aGFuIHRoZSBjdXJyZW50IGluZGV4LCBpdCdkIHRocm93IHRoaW5ncyBvZmYgaW4gdGhlIGxvb3AuXG4gICAgICAgIF9saXN0ZW5lcnNbX2ldKHRpbWUsIF9kZWx0YSwgZnJhbWUsIHYpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBfc2VsZiA9IHtcbiAgICB0aW1lOiAwLFxuICAgIGZyYW1lOiAwLFxuICAgIHRpY2s6IGZ1bmN0aW9uIHRpY2soKSB7XG4gICAgICBfdGljayh0cnVlKTtcbiAgICB9LFxuICAgIGRlbHRhUmF0aW86IGZ1bmN0aW9uIGRlbHRhUmF0aW8oZnBzKSB7XG4gICAgICByZXR1cm4gX2RlbHRhIC8gKDEwMDAgLyAoZnBzIHx8IDYwKSk7XG4gICAgfSxcbiAgICB3YWtlOiBmdW5jdGlvbiB3YWtlKCkge1xuICAgICAgaWYgKF9jb3JlUmVhZHkpIHtcbiAgICAgICAgaWYgKCFfY29yZUluaXR0ZWQgJiYgX3dpbmRvd0V4aXN0cygpKSB7XG4gICAgICAgICAgX3dpbiA9IF9jb3JlSW5pdHRlZCA9IHdpbmRvdztcbiAgICAgICAgICBfZG9jID0gX3dpbi5kb2N1bWVudCB8fCB7fTtcbiAgICAgICAgICBfZ2xvYmFscy5nc2FwID0gZ3NhcDtcbiAgICAgICAgICAoX3dpbi5nc2FwVmVyc2lvbnMgfHwgKF93aW4uZ3NhcFZlcnNpb25zID0gW10pKS5wdXNoKGdzYXAudmVyc2lvbik7XG5cbiAgICAgICAgICBfaW5zdGFsbChfaW5zdGFsbFNjb3BlIHx8IF93aW4uR3JlZW5Tb2NrR2xvYmFscyB8fCAhX3dpbi5nc2FwICYmIF93aW4gfHwge30pO1xuXG4gICAgICAgICAgX3JlZ2lzdGVyUGx1Z2luUXVldWUuZm9yRWFjaChfY3JlYXRlUGx1Z2luKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF9yYWYgPSB0eXBlb2YgcmVxdWVzdEFuaW1hdGlvbkZyYW1lICE9PSBcInVuZGVmaW5lZFwiICYmIHJlcXVlc3RBbmltYXRpb25GcmFtZTtcbiAgICAgICAgX2lkICYmIF9zZWxmLnNsZWVwKCk7XG5cbiAgICAgICAgX3JlcSA9IF9yYWYgfHwgZnVuY3Rpb24gKGYpIHtcbiAgICAgICAgICByZXR1cm4gc2V0VGltZW91dChmLCBfbmV4dFRpbWUgLSBfc2VsZi50aW1lICogMTAwMCArIDEgfCAwKTtcbiAgICAgICAgfTtcblxuICAgICAgICBfdGlja2VyQWN0aXZlID0gMTtcblxuICAgICAgICBfdGljaygyKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNsZWVwOiBmdW5jdGlvbiBzbGVlcCgpIHtcbiAgICAgIChfcmFmID8gY2FuY2VsQW5pbWF0aW9uRnJhbWUgOiBjbGVhclRpbWVvdXQpKF9pZCk7XG4gICAgICBfdGlja2VyQWN0aXZlID0gMDtcbiAgICAgIF9yZXEgPSBfZW1wdHlGdW5jO1xuICAgIH0sXG4gICAgbGFnU21vb3RoaW5nOiBmdW5jdGlvbiBsYWdTbW9vdGhpbmcodGhyZXNob2xkLCBhZGp1c3RlZExhZykge1xuICAgICAgX2xhZ1RocmVzaG9sZCA9IHRocmVzaG9sZCB8fCBJbmZpbml0eTsgLy8gemVybyBzaG91bGQgYmUgaW50ZXJwcmV0ZWQgYXMgYmFzaWNhbGx5IHVubGltaXRlZFxuXG4gICAgICBfYWRqdXN0ZWRMYWcgPSBNYXRoLm1pbihhZGp1c3RlZExhZyB8fCAzMywgX2xhZ1RocmVzaG9sZCk7XG4gICAgfSxcbiAgICBmcHM6IGZ1bmN0aW9uIGZwcyhfZnBzKSB7XG4gICAgICBfZ2FwID0gMTAwMCAvIChfZnBzIHx8IDI0MCk7XG4gICAgICBfbmV4dFRpbWUgPSBfc2VsZi50aW1lICogMTAwMCArIF9nYXA7XG4gICAgfSxcbiAgICBhZGQ6IGZ1bmN0aW9uIGFkZChjYWxsYmFjaywgb25jZSwgcHJpb3JpdGl6ZSkge1xuICAgICAgdmFyIGZ1bmMgPSBvbmNlID8gZnVuY3Rpb24gKHQsIGQsIGYsIHYpIHtcbiAgICAgICAgY2FsbGJhY2sodCwgZCwgZiwgdik7XG5cbiAgICAgICAgX3NlbGYucmVtb3ZlKGZ1bmMpO1xuICAgICAgfSA6IGNhbGxiYWNrO1xuXG4gICAgICBfc2VsZi5yZW1vdmUoY2FsbGJhY2spO1xuXG4gICAgICBfbGlzdGVuZXJzW3ByaW9yaXRpemUgPyBcInVuc2hpZnRcIiA6IFwicHVzaFwiXShmdW5jKTtcblxuICAgICAgX3dha2UoKTtcblxuICAgICAgcmV0dXJuIGZ1bmM7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShjYWxsYmFjaywgaSkge1xuICAgICAgfihpID0gX2xpc3RlbmVycy5pbmRleE9mKGNhbGxiYWNrKSkgJiYgX2xpc3RlbmVycy5zcGxpY2UoaSwgMSkgJiYgX2kgPj0gaSAmJiBfaS0tO1xuICAgIH0sXG4gICAgX2xpc3RlbmVyczogX2xpc3RlbmVyc1xuICB9O1xuICByZXR1cm4gX3NlbGY7XG59KCksXG4gICAgX3dha2UgPSBmdW5jdGlvbiBfd2FrZSgpIHtcbiAgcmV0dXJuICFfdGlja2VyQWN0aXZlICYmIF90aWNrZXIud2FrZSgpO1xufSxcbiAgICAvL2Fsc28gZW5zdXJlcyB0aGUgY29yZSBjbGFzc2VzIGFyZSBpbml0aWFsaXplZC5cblxuLypcbiogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKiBFQVNJTkdcbiogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKi9cbl9lYXNlTWFwID0ge30sXG4gICAgX2N1c3RvbUVhc2VFeHAgPSAvXltcXGQuXFwtTV1bXFxkLlxcLSxcXHNdLyxcbiAgICBfcXVvdGVzRXhwID0gL1tcIiddL2csXG4gICAgX3BhcnNlT2JqZWN0SW5TdHJpbmcgPSBmdW5jdGlvbiBfcGFyc2VPYmplY3RJblN0cmluZyh2YWx1ZSkge1xuICAvL3Rha2VzIGEgc3RyaW5nIGxpa2UgXCJ7d2lnZ2xlczoxMCwgdHlwZTphbnRpY2lwYXRlfSlcIiBhbmQgdHVybnMgaXQgaW50byBhIHJlYWwgb2JqZWN0LiBOb3RpY2UgaXQgZW5kcyBpbiBcIilcIiBhbmQgaW5jbHVkZXMgdGhlIHt9IHdyYXBwZXJzLiBUaGlzIGlzIGJlY2F1c2Ugd2Ugb25seSB1c2UgdGhpcyBmdW5jdGlvbiBmb3IgcGFyc2luZyBlYXNlIGNvbmZpZ3MgYW5kIHByaW9yaXRpemVkIG9wdGltaXphdGlvbiByYXRoZXIgdGhhbiByZXVzYWJpbGl0eS5cbiAgdmFyIG9iaiA9IHt9LFxuICAgICAgc3BsaXQgPSB2YWx1ZS5zdWJzdHIoMSwgdmFsdWUubGVuZ3RoIC0gMykuc3BsaXQoXCI6XCIpLFxuICAgICAga2V5ID0gc3BsaXRbMF0sXG4gICAgICBpID0gMSxcbiAgICAgIGwgPSBzcGxpdC5sZW5ndGgsXG4gICAgICBpbmRleCxcbiAgICAgIHZhbCxcbiAgICAgIHBhcnNlZFZhbDtcblxuICBmb3IgKDsgaSA8IGw7IGkrKykge1xuICAgIHZhbCA9IHNwbGl0W2ldO1xuICAgIGluZGV4ID0gaSAhPT0gbCAtIDEgPyB2YWwubGFzdEluZGV4T2YoXCIsXCIpIDogdmFsLmxlbmd0aDtcbiAgICBwYXJzZWRWYWwgPSB2YWwuc3Vic3RyKDAsIGluZGV4KTtcbiAgICBvYmpba2V5XSA9IGlzTmFOKHBhcnNlZFZhbCkgPyBwYXJzZWRWYWwucmVwbGFjZShfcXVvdGVzRXhwLCBcIlwiKS50cmltKCkgOiArcGFyc2VkVmFsO1xuICAgIGtleSA9IHZhbC5zdWJzdHIoaW5kZXggKyAxKS50cmltKCk7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufSxcbiAgICBfdmFsdWVJblBhcmVudGhlc2VzID0gZnVuY3Rpb24gX3ZhbHVlSW5QYXJlbnRoZXNlcyh2YWx1ZSkge1xuICB2YXIgb3BlbiA9IHZhbHVlLmluZGV4T2YoXCIoXCIpICsgMSxcbiAgICAgIGNsb3NlID0gdmFsdWUuaW5kZXhPZihcIilcIiksXG4gICAgICBuZXN0ZWQgPSB2YWx1ZS5pbmRleE9mKFwiKFwiLCBvcGVuKTtcbiAgcmV0dXJuIHZhbHVlLnN1YnN0cmluZyhvcGVuLCB+bmVzdGVkICYmIG5lc3RlZCA8IGNsb3NlID8gdmFsdWUuaW5kZXhPZihcIilcIiwgY2xvc2UgKyAxKSA6IGNsb3NlKTtcbn0sXG4gICAgX2NvbmZpZ0Vhc2VGcm9tU3RyaW5nID0gZnVuY3Rpb24gX2NvbmZpZ0Vhc2VGcm9tU3RyaW5nKG5hbWUpIHtcbiAgLy9uYW1lIGNhbiBiZSBhIHN0cmluZyBsaWtlIFwiZWxhc3RpYy5vdXQoMSwwLjUpXCIsIGFuZCBwYXNzIGluIF9lYXNlTWFwIGFzIG9iaiBhbmQgaXQnbGwgcGFyc2UgaXQgb3V0IGFuZCBjYWxsIHRoZSBhY3R1YWwgZnVuY3Rpb24gbGlrZSBfZWFzZU1hcC5FbGFzdGljLmVhc2VPdXQuY29uZmlnKDEsMC41KS4gSXQgd2lsbCBhbHNvIHBhcnNlIGN1c3RvbSBlYXNlIHN0cmluZ3MgYXMgbG9uZyBhcyBDdXN0b21FYXNlIGlzIGxvYWRlZCBhbmQgcmVnaXN0ZXJlZCAoaW50ZXJuYWxseSBhcyBfZWFzZU1hcC5fQ0UpLlxuICB2YXIgc3BsaXQgPSAobmFtZSArIFwiXCIpLnNwbGl0KFwiKFwiKSxcbiAgICAgIGVhc2UgPSBfZWFzZU1hcFtzcGxpdFswXV07XG4gIHJldHVybiBlYXNlICYmIHNwbGl0Lmxlbmd0aCA+IDEgJiYgZWFzZS5jb25maWcgPyBlYXNlLmNvbmZpZy5hcHBseShudWxsLCB+bmFtZS5pbmRleE9mKFwie1wiKSA/IFtfcGFyc2VPYmplY3RJblN0cmluZyhzcGxpdFsxXSldIDogX3ZhbHVlSW5QYXJlbnRoZXNlcyhuYW1lKS5zcGxpdChcIixcIikubWFwKF9udW1lcmljSWZQb3NzaWJsZSkpIDogX2Vhc2VNYXAuX0NFICYmIF9jdXN0b21FYXNlRXhwLnRlc3QobmFtZSkgPyBfZWFzZU1hcC5fQ0UoXCJcIiwgbmFtZSkgOiBlYXNlO1xufSxcbiAgICBfaW52ZXJ0RWFzZSA9IGZ1bmN0aW9uIF9pbnZlcnRFYXNlKGVhc2UpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIDEgLSBlYXNlKDEgLSBwKTtcbiAgfTtcbn0sXG4gICAgLy8gYWxsb3cgeW95b0Vhc2UgdG8gYmUgc2V0IGluIGNoaWxkcmVuIGFuZCBoYXZlIHRob3NlIGFmZmVjdGVkIHdoZW4gdGhlIHBhcmVudC9hbmNlc3RvciB0aW1lbGluZSB5b3lvcy5cbl9wcm9wYWdhdGVZb3lvRWFzZSA9IGZ1bmN0aW9uIF9wcm9wYWdhdGVZb3lvRWFzZSh0aW1lbGluZSwgaXNZb3lvKSB7XG4gIHZhciBjaGlsZCA9IHRpbWVsaW5lLl9maXJzdCxcbiAgICAgIGVhc2U7XG5cbiAgd2hpbGUgKGNoaWxkKSB7XG4gICAgaWYgKGNoaWxkIGluc3RhbmNlb2YgVGltZWxpbmUpIHtcbiAgICAgIF9wcm9wYWdhdGVZb3lvRWFzZShjaGlsZCwgaXNZb3lvKTtcbiAgICB9IGVsc2UgaWYgKGNoaWxkLnZhcnMueW95b0Vhc2UgJiYgKCFjaGlsZC5feW95byB8fCAhY2hpbGQuX3JlcGVhdCkgJiYgY2hpbGQuX3lveW8gIT09IGlzWW95bykge1xuICAgICAgaWYgKGNoaWxkLnRpbWVsaW5lKSB7XG4gICAgICAgIF9wcm9wYWdhdGVZb3lvRWFzZShjaGlsZC50aW1lbGluZSwgaXNZb3lvKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVhc2UgPSBjaGlsZC5fZWFzZTtcbiAgICAgICAgY2hpbGQuX2Vhc2UgPSBjaGlsZC5feUVhc2U7XG4gICAgICAgIGNoaWxkLl95RWFzZSA9IGVhc2U7XG4gICAgICAgIGNoaWxkLl95b3lvID0gaXNZb3lvO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNoaWxkID0gY2hpbGQuX25leHQ7XG4gIH1cbn0sXG4gICAgX3BhcnNlRWFzZSA9IGZ1bmN0aW9uIF9wYXJzZUVhc2UoZWFzZSwgZGVmYXVsdEVhc2UpIHtcbiAgcmV0dXJuICFlYXNlID8gZGVmYXVsdEVhc2UgOiAoX2lzRnVuY3Rpb24oZWFzZSkgPyBlYXNlIDogX2Vhc2VNYXBbZWFzZV0gfHwgX2NvbmZpZ0Vhc2VGcm9tU3RyaW5nKGVhc2UpKSB8fCBkZWZhdWx0RWFzZTtcbn0sXG4gICAgX2luc2VydEVhc2UgPSBmdW5jdGlvbiBfaW5zZXJ0RWFzZShuYW1lcywgZWFzZUluLCBlYXNlT3V0LCBlYXNlSW5PdXQpIHtcbiAgaWYgKGVhc2VPdXQgPT09IHZvaWQgMCkge1xuICAgIGVhc2VPdXQgPSBmdW5jdGlvbiBlYXNlT3V0KHApIHtcbiAgICAgIHJldHVybiAxIC0gZWFzZUluKDEgLSBwKTtcbiAgICB9O1xuICB9XG5cbiAgaWYgKGVhc2VJbk91dCA9PT0gdm9pZCAwKSB7XG4gICAgZWFzZUluT3V0ID0gZnVuY3Rpb24gZWFzZUluT3V0KHApIHtcbiAgICAgIHJldHVybiBwIDwgLjUgPyBlYXNlSW4ocCAqIDIpIC8gMiA6IDEgLSBlYXNlSW4oKDEgLSBwKSAqIDIpIC8gMjtcbiAgICB9O1xuICB9XG5cbiAgdmFyIGVhc2UgPSB7XG4gICAgZWFzZUluOiBlYXNlSW4sXG4gICAgZWFzZU91dDogZWFzZU91dCxcbiAgICBlYXNlSW5PdXQ6IGVhc2VJbk91dFxuICB9LFxuICAgICAgbG93ZXJjYXNlTmFtZTtcblxuICBfZm9yRWFjaE5hbWUobmFtZXMsIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgX2Vhc2VNYXBbbmFtZV0gPSBfZ2xvYmFsc1tuYW1lXSA9IGVhc2U7XG4gICAgX2Vhc2VNYXBbbG93ZXJjYXNlTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKV0gPSBlYXNlT3V0O1xuXG4gICAgZm9yICh2YXIgcCBpbiBlYXNlKSB7XG4gICAgICBfZWFzZU1hcFtsb3dlcmNhc2VOYW1lICsgKHAgPT09IFwiZWFzZUluXCIgPyBcIi5pblwiIDogcCA9PT0gXCJlYXNlT3V0XCIgPyBcIi5vdXRcIiA6IFwiLmluT3V0XCIpXSA9IF9lYXNlTWFwW25hbWUgKyBcIi5cIiArIHBdID0gZWFzZVtwXTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBlYXNlO1xufSxcbiAgICBfZWFzZUluT3V0RnJvbU91dCA9IGZ1bmN0aW9uIF9lYXNlSW5PdXRGcm9tT3V0KGVhc2VPdXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIHAgPCAuNSA/ICgxIC0gZWFzZU91dCgxIC0gcCAqIDIpKSAvIDIgOiAuNSArIGVhc2VPdXQoKHAgLSAuNSkgKiAyKSAvIDI7XG4gIH07XG59LFxuICAgIF9jb25maWdFbGFzdGljID0gZnVuY3Rpb24gX2NvbmZpZ0VsYXN0aWModHlwZSwgYW1wbGl0dWRlLCBwZXJpb2QpIHtcbiAgdmFyIHAxID0gYW1wbGl0dWRlID49IDEgPyBhbXBsaXR1ZGUgOiAxLFxuICAgICAgLy9ub3RlOiBpZiBhbXBsaXR1ZGUgaXMgPCAxLCB3ZSBzaW1wbHkgYWRqdXN0IHRoZSBwZXJpb2QgZm9yIGEgbW9yZSBuYXR1cmFsIGZlZWwuIE90aGVyd2lzZSB0aGUgbWF0aCBkb2Vzbid0IHdvcmsgcmlnaHQgYW5kIHRoZSBjdXJ2ZSBzdGFydHMgYXQgMS5cbiAgcDIgPSAocGVyaW9kIHx8ICh0eXBlID8gLjMgOiAuNDUpKSAvIChhbXBsaXR1ZGUgPCAxID8gYW1wbGl0dWRlIDogMSksXG4gICAgICBwMyA9IHAyIC8gXzJQSSAqIChNYXRoLmFzaW4oMSAvIHAxKSB8fCAwKSxcbiAgICAgIGVhc2VPdXQgPSBmdW5jdGlvbiBlYXNlT3V0KHApIHtcbiAgICByZXR1cm4gcCA9PT0gMSA/IDEgOiBwMSAqIE1hdGgucG93KDIsIC0xMCAqIHApICogX3NpbigocCAtIHAzKSAqIHAyKSArIDE7XG4gIH0sXG4gICAgICBlYXNlID0gdHlwZSA9PT0gXCJvdXRcIiA/IGVhc2VPdXQgOiB0eXBlID09PSBcImluXCIgPyBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiAxIC0gZWFzZU91dCgxIC0gcCk7XG4gIH0gOiBfZWFzZUluT3V0RnJvbU91dChlYXNlT3V0KTtcblxuICBwMiA9IF8yUEkgLyBwMjsgLy9wcmVjYWxjdWxhdGUgdG8gb3B0aW1pemVcblxuICBlYXNlLmNvbmZpZyA9IGZ1bmN0aW9uIChhbXBsaXR1ZGUsIHBlcmlvZCkge1xuICAgIHJldHVybiBfY29uZmlnRWxhc3RpYyh0eXBlLCBhbXBsaXR1ZGUsIHBlcmlvZCk7XG4gIH07XG5cbiAgcmV0dXJuIGVhc2U7XG59LFxuICAgIF9jb25maWdCYWNrID0gZnVuY3Rpb24gX2NvbmZpZ0JhY2sodHlwZSwgb3ZlcnNob290KSB7XG4gIGlmIChvdmVyc2hvb3QgPT09IHZvaWQgMCkge1xuICAgIG92ZXJzaG9vdCA9IDEuNzAxNTg7XG4gIH1cblxuICB2YXIgZWFzZU91dCA9IGZ1bmN0aW9uIGVhc2VPdXQocCkge1xuICAgIHJldHVybiBwID8gLS1wICogcCAqICgob3ZlcnNob290ICsgMSkgKiBwICsgb3ZlcnNob290KSArIDEgOiAwO1xuICB9LFxuICAgICAgZWFzZSA9IHR5cGUgPT09IFwib3V0XCIgPyBlYXNlT3V0IDogdHlwZSA9PT0gXCJpblwiID8gZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gMSAtIGVhc2VPdXQoMSAtIHApO1xuICB9IDogX2Vhc2VJbk91dEZyb21PdXQoZWFzZU91dCk7XG5cbiAgZWFzZS5jb25maWcgPSBmdW5jdGlvbiAob3ZlcnNob290KSB7XG4gICAgcmV0dXJuIF9jb25maWdCYWNrKHR5cGUsIG92ZXJzaG9vdCk7XG4gIH07XG5cbiAgcmV0dXJuIGVhc2U7XG59OyAvLyBhIGNoZWFwZXIgKGtiIGFuZCBjcHUpIGJ1dCBtb3JlIG1pbGQgd2F5IHRvIGdldCBhIHBhcmFtZXRlcml6ZWQgd2VpZ2h0ZWQgZWFzZSBieSBmZWVkaW5nIGluIGEgdmFsdWUgYmV0d2VlbiAtMSAoZWFzZUluKSBhbmQgMSAoZWFzZU91dCkgd2hlcmUgMCBpcyBsaW5lYXIuXG4vLyBfd2VpZ2h0ZWRFYXNlID0gcmF0aW8gPT4ge1xuLy8gXHRsZXQgeSA9IDAuNSArIHJhdGlvIC8gMjtcbi8vIFx0cmV0dXJuIHAgPT4gKDIgKiAoMSAtIHApICogcCAqIHkgKyBwICogcCk7XG4vLyB9LFxuLy8gYSBzdHJvbmdlciAoYnV0IG1vcmUgZXhwZW5zaXZlIGtiL2NwdSkgcGFyYW1ldGVyaXplZCB3ZWlnaHRlZCBlYXNlIHRoYXQgbGV0cyB5b3UgZmVlZCBpbiBhIHZhbHVlIGJldHdlZW4gLTEgKGVhc2VJbikgYW5kIDEgKGVhc2VPdXQpIHdoZXJlIDAgaXMgbGluZWFyLlxuLy8gX3dlaWdodGVkRWFzZVN0cm9uZyA9IHJhdGlvID0+IHtcbi8vIFx0cmF0aW8gPSAuNSArIHJhdGlvIC8gMjtcbi8vIFx0bGV0IG8gPSAxIC8gMyAqIChyYXRpbyA8IC41ID8gcmF0aW8gOiAxIC0gcmF0aW8pLFxuLy8gXHRcdGIgPSByYXRpbyAtIG8sXG4vLyBcdFx0YyA9IHJhdGlvICsgbztcbi8vIFx0cmV0dXJuIHAgPT4gcCA9PT0gMSA/IHAgOiAzICogYiAqICgxIC0gcCkgKiAoMSAtIHApICogcCArIDMgKiBjICogKDEgLSBwKSAqIHAgKiBwICsgcCAqIHAgKiBwO1xuLy8gfTtcblxuXG5fZm9yRWFjaE5hbWUoXCJMaW5lYXIsUXVhZCxDdWJpYyxRdWFydCxRdWludCxTdHJvbmdcIiwgZnVuY3Rpb24gKG5hbWUsIGkpIHtcbiAgdmFyIHBvd2VyID0gaSA8IDUgPyBpICsgMSA6IGk7XG5cbiAgX2luc2VydEVhc2UobmFtZSArIFwiLFBvd2VyXCIgKyAocG93ZXIgLSAxKSwgaSA/IGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIE1hdGgucG93KHAsIHBvd2VyKTtcbiAgfSA6IGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIHA7XG4gIH0sIGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIDEgLSBNYXRoLnBvdygxIC0gcCwgcG93ZXIpO1xuICB9LCBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiBwIDwgLjUgPyBNYXRoLnBvdyhwICogMiwgcG93ZXIpIC8gMiA6IDEgLSBNYXRoLnBvdygoMSAtIHApICogMiwgcG93ZXIpIC8gMjtcbiAgfSk7XG59KTtcblxuX2Vhc2VNYXAuTGluZWFyLmVhc2VOb25lID0gX2Vhc2VNYXAubm9uZSA9IF9lYXNlTWFwLkxpbmVhci5lYXNlSW47XG5cbl9pbnNlcnRFYXNlKFwiRWxhc3RpY1wiLCBfY29uZmlnRWxhc3RpYyhcImluXCIpLCBfY29uZmlnRWxhc3RpYyhcIm91dFwiKSwgX2NvbmZpZ0VsYXN0aWMoKSk7XG5cbihmdW5jdGlvbiAobiwgYykge1xuICB2YXIgbjEgPSAxIC8gYyxcbiAgICAgIG4yID0gMiAqIG4xLFxuICAgICAgbjMgPSAyLjUgKiBuMSxcbiAgICAgIGVhc2VPdXQgPSBmdW5jdGlvbiBlYXNlT3V0KHApIHtcbiAgICByZXR1cm4gcCA8IG4xID8gbiAqIHAgKiBwIDogcCA8IG4yID8gbiAqIE1hdGgucG93KHAgLSAxLjUgLyBjLCAyKSArIC43NSA6IHAgPCBuMyA/IG4gKiAocCAtPSAyLjI1IC8gYykgKiBwICsgLjkzNzUgOiBuICogTWF0aC5wb3cocCAtIDIuNjI1IC8gYywgMikgKyAuOTg0Mzc1O1xuICB9O1xuXG4gIF9pbnNlcnRFYXNlKFwiQm91bmNlXCIsIGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIDEgLSBlYXNlT3V0KDEgLSBwKTtcbiAgfSwgZWFzZU91dCk7XG59KSg3LjU2MjUsIDIuNzUpO1xuXG5faW5zZXJ0RWFzZShcIkV4cG9cIiwgZnVuY3Rpb24gKHApIHtcbiAgcmV0dXJuIHAgPyBNYXRoLnBvdygyLCAxMCAqIChwIC0gMSkpIDogMDtcbn0pO1xuXG5faW5zZXJ0RWFzZShcIkNpcmNcIiwgZnVuY3Rpb24gKHApIHtcbiAgcmV0dXJuIC0oX3NxcnQoMSAtIHAgKiBwKSAtIDEpO1xufSk7XG5cbl9pbnNlcnRFYXNlKFwiU2luZVwiLCBmdW5jdGlvbiAocCkge1xuICByZXR1cm4gcCA9PT0gMSA/IDEgOiAtX2NvcyhwICogX0hBTEZfUEkpICsgMTtcbn0pO1xuXG5faW5zZXJ0RWFzZShcIkJhY2tcIiwgX2NvbmZpZ0JhY2soXCJpblwiKSwgX2NvbmZpZ0JhY2soXCJvdXRcIiksIF9jb25maWdCYWNrKCkpO1xuXG5fZWFzZU1hcC5TdGVwcGVkRWFzZSA9IF9lYXNlTWFwLnN0ZXBzID0gX2dsb2JhbHMuU3RlcHBlZEVhc2UgPSB7XG4gIGNvbmZpZzogZnVuY3Rpb24gY29uZmlnKHN0ZXBzLCBpbW1lZGlhdGVTdGFydCkge1xuICAgIGlmIChzdGVwcyA9PT0gdm9pZCAwKSB7XG4gICAgICBzdGVwcyA9IDE7XG4gICAgfVxuXG4gICAgdmFyIHAxID0gMSAvIHN0ZXBzLFxuICAgICAgICBwMiA9IHN0ZXBzICsgKGltbWVkaWF0ZVN0YXJ0ID8gMCA6IDEpLFxuICAgICAgICBwMyA9IGltbWVkaWF0ZVN0YXJ0ID8gMSA6IDAsXG4gICAgICAgIG1heCA9IDEgLSBfdGlueU51bTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHApIHtcbiAgICAgIHJldHVybiAoKHAyICogX2NsYW1wKDAsIG1heCwgcCkgfCAwKSArIHAzKSAqIHAxO1xuICAgIH07XG4gIH1cbn07XG5fZGVmYXVsdHMuZWFzZSA9IF9lYXNlTWFwW1wicXVhZC5vdXRcIl07XG5cbl9mb3JFYWNoTmFtZShcIm9uQ29tcGxldGUsb25VcGRhdGUsb25TdGFydCxvblJlcGVhdCxvblJldmVyc2VDb21wbGV0ZSxvbkludGVycnVwdFwiLCBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gX2NhbGxiYWNrTmFtZXMgKz0gbmFtZSArIFwiLFwiICsgbmFtZSArIFwiUGFyYW1zLFwiO1xufSk7XG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENBQ0hFXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cblxuZXhwb3J0IHZhciBHU0NhY2hlID0gZnVuY3Rpb24gR1NDYWNoZSh0YXJnZXQsIGhhcm5lc3MpIHtcbiAgdGhpcy5pZCA9IF9nc0lEKys7XG4gIHRhcmdldC5fZ3NhcCA9IHRoaXM7XG4gIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuICB0aGlzLmhhcm5lc3MgPSBoYXJuZXNzO1xuICB0aGlzLmdldCA9IGhhcm5lc3MgPyBoYXJuZXNzLmdldCA6IF9nZXRQcm9wZXJ0eTtcbiAgdGhpcy5zZXQgPSBoYXJuZXNzID8gaGFybmVzcy5nZXRTZXR0ZXIgOiBfZ2V0U2V0dGVyO1xufTtcbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQU5JTUFUSU9OXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmV4cG9ydCB2YXIgQW5pbWF0aW9uID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQW5pbWF0aW9uKHZhcnMpIHtcbiAgICB0aGlzLnZhcnMgPSB2YXJzO1xuICAgIHRoaXMuX2RlbGF5ID0gK3ZhcnMuZGVsYXkgfHwgMDtcblxuICAgIGlmICh0aGlzLl9yZXBlYXQgPSB2YXJzLnJlcGVhdCA9PT0gSW5maW5pdHkgPyAtMiA6IHZhcnMucmVwZWF0IHx8IDApIHtcbiAgICAgIC8vIFRPRE86IHJlcGVhdDogSW5maW5pdHkgb24gYSB0aW1lbGluZSdzIGNoaWxkcmVuIG11c3QgZmxhZyB0aGF0IHRpbWVsaW5lIGludGVybmFsbHkgYW5kIGFmZmVjdCBpdHMgdG90YWxEdXJhdGlvbiwgb3RoZXJ3aXNlIGl0J2xsIHN0b3AgaW4gdGhlIG5lZ2F0aXZlIGRpcmVjdGlvbiB3aGVuIHJlYWNoaW5nIHRoZSBzdGFydC5cbiAgICAgIHRoaXMuX3JEZWxheSA9IHZhcnMucmVwZWF0RGVsYXkgfHwgMDtcbiAgICAgIHRoaXMuX3lveW8gPSAhIXZhcnMueW95byB8fCAhIXZhcnMueW95b0Vhc2U7XG4gICAgfVxuXG4gICAgdGhpcy5fdHMgPSAxO1xuXG4gICAgX3NldER1cmF0aW9uKHRoaXMsICt2YXJzLmR1cmF0aW9uLCAxLCAxKTtcblxuICAgIHRoaXMuZGF0YSA9IHZhcnMuZGF0YTtcblxuICAgIGlmIChfY29udGV4dCkge1xuICAgICAgdGhpcy5fY3R4ID0gX2NvbnRleHQ7XG5cbiAgICAgIF9jb250ZXh0LmRhdGEucHVzaCh0aGlzKTtcbiAgICB9XG5cbiAgICBfdGlja2VyQWN0aXZlIHx8IF90aWNrZXIud2FrZSgpO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEFuaW1hdGlvbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmRlbGF5ID0gZnVuY3Rpb24gZGVsYXkodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgfHwgdmFsdWUgPT09IDApIHtcbiAgICAgIHRoaXMucGFyZW50ICYmIHRoaXMucGFyZW50LnNtb290aENoaWxkVGltaW5nICYmIHRoaXMuc3RhcnRUaW1lKHRoaXMuX3N0YXJ0ICsgdmFsdWUgLSB0aGlzLl9kZWxheSk7XG4gICAgICB0aGlzLl9kZWxheSA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX2RlbGF5O1xuICB9O1xuXG4gIF9wcm90by5kdXJhdGlvbiA9IGZ1bmN0aW9uIGR1cmF0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0aGlzLnRvdGFsRHVyYXRpb24odGhpcy5fcmVwZWF0ID4gMCA/IHZhbHVlICsgKHZhbHVlICsgdGhpcy5fckRlbGF5KSAqIHRoaXMuX3JlcGVhdCA6IHZhbHVlKSA6IHRoaXMudG90YWxEdXJhdGlvbigpICYmIHRoaXMuX2R1cjtcbiAgfTtcblxuICBfcHJvdG8udG90YWxEdXJhdGlvbiA9IGZ1bmN0aW9uIHRvdGFsRHVyYXRpb24odmFsdWUpIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB0aGlzLl90RHVyO1xuICAgIH1cblxuICAgIHRoaXMuX2RpcnR5ID0gMDtcbiAgICByZXR1cm4gX3NldER1cmF0aW9uKHRoaXMsIHRoaXMuX3JlcGVhdCA8IDAgPyB2YWx1ZSA6ICh2YWx1ZSAtIHRoaXMuX3JlcGVhdCAqIHRoaXMuX3JEZWxheSkgLyAodGhpcy5fcmVwZWF0ICsgMSkpO1xuICB9O1xuXG4gIF9wcm90by50b3RhbFRpbWUgPSBmdW5jdGlvbiB0b3RhbFRpbWUoX3RvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICBfd2FrZSgpO1xuXG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdFRpbWU7XG4gICAgfVxuXG4gICAgdmFyIHBhcmVudCA9IHRoaXMuX2RwO1xuXG4gICAgaWYgKHBhcmVudCAmJiBwYXJlbnQuc21vb3RoQ2hpbGRUaW1pbmcgJiYgdGhpcy5fdHMpIHtcbiAgICAgIF9hbGlnblBsYXloZWFkKHRoaXMsIF90b3RhbFRpbWUpO1xuXG4gICAgICAhcGFyZW50Ll9kcCB8fCBwYXJlbnQucGFyZW50IHx8IF9wb3N0QWRkQ2hlY2tzKHBhcmVudCwgdGhpcyk7IC8vIGVkZ2UgY2FzZTogaWYgdGhpcyBpcyBhIGNoaWxkIG9mIGEgdGltZWxpbmUgdGhhdCBhbHJlYWR5IGNvbXBsZXRlZCwgZm9yIGV4YW1wbGUsIHdlIG11c3QgcmUtYWN0aXZhdGUgdGhlIHBhcmVudC5cbiAgICAgIC8vaW4gY2FzZSBhbnkgb2YgdGhlIGFuY2VzdG9yIHRpbWVsaW5lcyBoYWQgY29tcGxldGVkIGJ1dCBzaG91bGQgbm93IGJlIGVuYWJsZWQsIHdlIHNob3VsZCByZXNldCB0aGVpciB0b3RhbFRpbWUoKSB3aGljaCB3aWxsIGFsc28gZW5zdXJlIHRoYXQgdGhleSdyZSBsaW5lZCB1cCBwcm9wZXJseSBhbmQgZW5hYmxlZC4gU2tpcCBmb3IgYW5pbWF0aW9ucyB0aGF0IGFyZSBvbiB0aGUgcm9vdCAod2FzdGVmdWwpLiBFeGFtcGxlOiBhIFRpbWVsaW5lTGl0ZS5leHBvcnRSb290KCkgaXMgcGVyZm9ybWVkIHdoZW4gdGhlcmUncyBhIHBhdXNlZCB0d2VlbiBvbiB0aGUgcm9vdCwgdGhlIGV4cG9ydCB3aWxsIG5vdCBjb21wbGV0ZSB1bnRpbCB0aGF0IHR3ZWVuIGlzIHVucGF1c2VkLCBidXQgaW1hZ2luZSBhIGNoaWxkIGdldHMgcmVzdGFydGVkIGxhdGVyLCBhZnRlciBhbGwgW3VucGF1c2VkXSB0d2VlbnMgaGF2ZSBjb21wbGV0ZWQuIFRoZSBzdGFydCBvZiB0aGF0IGNoaWxkIHdvdWxkIGdldCBwdXNoZWQgb3V0LCBidXQgb25lIG9mIHRoZSBhbmNlc3RvcnMgbWF5IGhhdmUgY29tcGxldGVkLlxuXG4gICAgICB3aGlsZSAocGFyZW50ICYmIHBhcmVudC5wYXJlbnQpIHtcbiAgICAgICAgaWYgKHBhcmVudC5wYXJlbnQuX3RpbWUgIT09IHBhcmVudC5fc3RhcnQgKyAocGFyZW50Ll90cyA+PSAwID8gcGFyZW50Ll90VGltZSAvIHBhcmVudC5fdHMgOiAocGFyZW50LnRvdGFsRHVyYXRpb24oKSAtIHBhcmVudC5fdFRpbWUpIC8gLXBhcmVudC5fdHMpKSB7XG4gICAgICAgICAgcGFyZW50LnRvdGFsVGltZShwYXJlbnQuX3RUaW1lLCB0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5wYXJlbnQgJiYgdGhpcy5fZHAuYXV0b1JlbW92ZUNoaWxkcmVuICYmICh0aGlzLl90cyA+IDAgJiYgX3RvdGFsVGltZSA8IHRoaXMuX3REdXIgfHwgdGhpcy5fdHMgPCAwICYmIF90b3RhbFRpbWUgPiAwIHx8ICF0aGlzLl90RHVyICYmICFfdG90YWxUaW1lKSkge1xuICAgICAgICAvL2lmIHRoZSBhbmltYXRpb24gZG9lc24ndCBoYXZlIGEgcGFyZW50LCBwdXQgaXQgYmFjayBpbnRvIGl0cyBsYXN0IHBhcmVudCAocmVjb3JkZWQgYXMgX2RwIGZvciBleGFjdGx5IGNhc2VzIGxpa2UgdGhpcykuIExpbWl0IHRvIHBhcmVudHMgd2l0aCBhdXRvUmVtb3ZlQ2hpbGRyZW4gKGxpa2UgZ2xvYmFsVGltZWxpbmUpIHNvIHRoYXQgaWYgdGhlIHVzZXIgbWFudWFsbHkgcmVtb3ZlcyBhbiBhbmltYXRpb24gZnJvbSBhIHRpbWVsaW5lIGFuZCB0aGVuIGFsdGVycyBpdHMgcGxheWhlYWQsIGl0IGRvZXNuJ3QgZ2V0IGFkZGVkIGJhY2sgaW4uXG4gICAgICAgIF9hZGRUb1RpbWVsaW5lKHRoaXMuX2RwLCB0aGlzLCB0aGlzLl9zdGFydCAtIHRoaXMuX2RlbGF5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5fdFRpbWUgIT09IF90b3RhbFRpbWUgfHwgIXRoaXMuX2R1ciAmJiAhc3VwcHJlc3NFdmVudHMgfHwgdGhpcy5faW5pdHRlZCAmJiBNYXRoLmFicyh0aGlzLl96VGltZSkgPT09IF90aW55TnVtIHx8ICFfdG90YWxUaW1lICYmICF0aGlzLl9pbml0dGVkICYmICh0aGlzLmFkZCB8fCB0aGlzLl9wdExvb2t1cCkpIHtcbiAgICAgIC8vIGNoZWNrIGZvciBfcHRMb29rdXAgb24gYSBUd2VlbiBpbnN0YW5jZSB0byBlbnN1cmUgaXQgaGFzIGFjdHVhbGx5IGZpbmlzaGVkIGJlaW5nIGluc3RhbnRpYXRlZCwgb3RoZXJ3aXNlIGlmIHRoaXMucmV2ZXJzZSgpIGdldHMgY2FsbGVkIGluIHRoZSBBbmltYXRpb24gY29uc3RydWN0b3IsIGl0IGNvdWxkIHRyaWdnZXIgYSByZW5kZXIoKSBoZXJlIGV2ZW4gdGhvdWdoIHRoZSBfdGFyZ2V0cyB3ZXJlbid0IHBvcHVsYXRlZCwgdGh1cyB3aGVuIF9pbml0KCkgaXMgY2FsbGVkIHRoZXJlIHdvbid0IGJlIGFueSBQcm9wVHdlZW5zIChpdCdsbCBhY3QgbGlrZSB0aGUgdHdlZW4gaXMgbm9uLWZ1bmN0aW9uYWwpXG4gICAgICB0aGlzLl90cyB8fCAodGhpcy5fcFRpbWUgPSBfdG90YWxUaW1lKTsgLy8gb3RoZXJ3aXNlLCBpZiBhbiBhbmltYXRpb24gaXMgcGF1c2VkLCB0aGVuIHRoZSBwbGF5aGVhZCBpcyBtb3ZlZCBiYWNrIHRvIHplcm8sIHRoZW4gcmVzdW1lZCwgaXQnZCByZXZlcnQgYmFjayB0byB0aGUgb3JpZ2luYWwgdGltZSBhdCB0aGUgcGF1c2VcbiAgICAgIC8vaWYgKCF0aGlzLl9sb2NrKSB7IC8vIGF2b2lkIGVuZGxlc3MgcmVjdXJzaW9uIChub3Qgc3VyZSB3ZSBuZWVkIHRoaXMgeWV0IG9yIGlmIGl0J3Mgd29ydGggdGhlIHBlcmZvcm1hbmNlIGhpdClcbiAgICAgIC8vICAgdGhpcy5fbG9jayA9IDE7XG5cbiAgICAgIF9sYXp5U2FmZVJlbmRlcih0aGlzLCBfdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cyk7IC8vICAgdGhpcy5fbG9jayA9IDA7XG4gICAgICAvL31cblxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90by50aW1lID0gZnVuY3Rpb24gdGltZSh2YWx1ZSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRoaXMudG90YWxUaW1lKE1hdGgubWluKHRoaXMudG90YWxEdXJhdGlvbigpLCB2YWx1ZSArIF9lbGFwc2VkQ3ljbGVEdXJhdGlvbih0aGlzKSkgJSAodGhpcy5fZHVyICsgdGhpcy5fckRlbGF5KSB8fCAodmFsdWUgPyB0aGlzLl9kdXIgOiAwKSwgc3VwcHJlc3NFdmVudHMpIDogdGhpcy5fdGltZTsgLy8gbm90ZTogaWYgdGhlIG1vZHVsdXMgcmVzdWx0cyBpbiAwLCB0aGUgcGxheWhlYWQgY291bGQgYmUgZXhhY3RseSBhdCB0aGUgZW5kIG9yIHRoZSBiZWdpbm5pbmcsIGFuZCB3ZSBhbHdheXMgZGVmZXIgdG8gdGhlIEVORCB3aXRoIGEgbm9uLXplcm8gdmFsdWUsIG90aGVyd2lzZSBpZiB5b3Ugc2V0IHRoZSB0aW1lKCkgdG8gdGhlIHZlcnkgZW5kIChkdXJhdGlvbigpKSwgaXQgd291bGQgcmVuZGVyIGF0IHRoZSBTVEFSVCFcbiAgfTtcblxuICBfcHJvdG8udG90YWxQcm9ncmVzcyA9IGZ1bmN0aW9uIHRvdGFsUHJvZ3Jlc3ModmFsdWUsIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0aGlzLnRvdGFsVGltZSh0aGlzLnRvdGFsRHVyYXRpb24oKSAqIHZhbHVlLCBzdXBwcmVzc0V2ZW50cykgOiB0aGlzLnRvdGFsRHVyYXRpb24oKSA/IE1hdGgubWluKDEsIHRoaXMuX3RUaW1lIC8gdGhpcy5fdER1cikgOiB0aGlzLnJhd1RpbWUoKSA+IDAgPyAxIDogMDtcbiAgfTtcblxuICBfcHJvdG8ucHJvZ3Jlc3MgPSBmdW5jdGlvbiBwcm9ncmVzcyh2YWx1ZSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRoaXMudG90YWxUaW1lKHRoaXMuZHVyYXRpb24oKSAqICh0aGlzLl95b3lvICYmICEodGhpcy5pdGVyYXRpb24oKSAmIDEpID8gMSAtIHZhbHVlIDogdmFsdWUpICsgX2VsYXBzZWRDeWNsZUR1cmF0aW9uKHRoaXMpLCBzdXBwcmVzc0V2ZW50cykgOiB0aGlzLmR1cmF0aW9uKCkgPyBNYXRoLm1pbigxLCB0aGlzLl90aW1lIC8gdGhpcy5fZHVyKSA6IHRoaXMucmF3VGltZSgpID4gMCA/IDEgOiAwO1xuICB9O1xuXG4gIF9wcm90by5pdGVyYXRpb24gPSBmdW5jdGlvbiBpdGVyYXRpb24odmFsdWUsIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgdmFyIGN5Y2xlRHVyYXRpb24gPSB0aGlzLmR1cmF0aW9uKCkgKyB0aGlzLl9yRGVsYXk7XG5cbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRoaXMudG90YWxUaW1lKHRoaXMuX3RpbWUgKyAodmFsdWUgLSAxKSAqIGN5Y2xlRHVyYXRpb24sIHN1cHByZXNzRXZlbnRzKSA6IHRoaXMuX3JlcGVhdCA/IF9hbmltYXRpb25DeWNsZSh0aGlzLl90VGltZSwgY3ljbGVEdXJhdGlvbikgKyAxIDogMTtcbiAgfSAvLyBwb3RlbnRpYWwgZnV0dXJlIGFkZGl0aW9uOlxuICAvLyBpc1BsYXlpbmdCYWNrd2FyZHMoKSB7XG4gIC8vIFx0bGV0IGFuaW1hdGlvbiA9IHRoaXMsXG4gIC8vIFx0XHRvcmllbnRhdGlvbiA9IDE7IC8vIDEgPSBmb3J3YXJkLCAtMSA9IGJhY2t3YXJkXG4gIC8vIFx0d2hpbGUgKGFuaW1hdGlvbikge1xuICAvLyBcdFx0b3JpZW50YXRpb24gKj0gYW5pbWF0aW9uLnJldmVyc2VkKCkgfHwgKGFuaW1hdGlvbi5yZXBlYXQoKSAmJiAhKGFuaW1hdGlvbi5pdGVyYXRpb24oKSAmIDEpKSA/IC0xIDogMTtcbiAgLy8gXHRcdGFuaW1hdGlvbiA9IGFuaW1hdGlvbi5wYXJlbnQ7XG4gIC8vIFx0fVxuICAvLyBcdHJldHVybiBvcmllbnRhdGlvbiA8IDA7XG4gIC8vIH1cbiAgO1xuXG4gIF9wcm90by50aW1lU2NhbGUgPSBmdW5jdGlvbiB0aW1lU2NhbGUodmFsdWUsIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcnRzID09PSAtX3RpbnlOdW0gPyAwIDogdGhpcy5fcnRzOyAvLyByZWNvcmRlZCB0aW1lU2NhbGUuIFNwZWNpYWwgY2FzZTogaWYgc29tZW9uZSBjYWxscyByZXZlcnNlKCkgb24gYW4gYW5pbWF0aW9uIHdpdGggdGltZVNjYWxlIG9mIDAsIHdlIGFzc2lnbiBpdCAtX3RpbnlOdW0gdG8gcmVtZW1iZXIgaXQncyByZXZlcnNlZC5cbiAgICB9XG5cbiAgICBpZiAodGhpcy5fcnRzID09PSB2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdmFyIHRUaW1lID0gdGhpcy5wYXJlbnQgJiYgdGhpcy5fdHMgPyBfcGFyZW50VG9DaGlsZFRvdGFsVGltZSh0aGlzLnBhcmVudC5fdGltZSwgdGhpcykgOiB0aGlzLl90VGltZTsgLy8gbWFrZSBzdXJlIHRvIGRvIHRoZSBwYXJlbnRUb0NoaWxkVG90YWxUaW1lKCkgQkVGT1JFIHNldHRpbmcgdGhlIG5ldyBfdHMgYmVjYXVzZSB0aGUgb2xkIG9uZSBtdXN0IGJlIHVzZWQgaW4gdGhhdCBjYWxjdWxhdGlvbi5cbiAgICAvLyBmdXR1cmUgYWRkaXRpb24/IFVwIHNpZGU6IGZhc3QgYW5kIG1pbmltYWwgZmlsZSBzaXplLiBEb3duIHNpZGU6IG9ubHkgd29ya3Mgb24gdGhpcyBhbmltYXRpb247IGlmIGEgdGltZWxpbmUgaXMgcmV2ZXJzZWQsIGZvciBleGFtcGxlLCBpdHMgY2hpbGRyZW5zJyBvblJldmVyc2Ugd291bGRuJ3QgZ2V0IGNhbGxlZC5cbiAgICAvLygrdmFsdWUgPCAwICYmIHRoaXMuX3J0cyA+PSAwKSAmJiBfY2FsbGJhY2sodGhpcywgXCJvblJldmVyc2VcIiwgdHJ1ZSk7XG4gICAgLy8gcHJpb3JpdGl6ZSByZW5kZXJpbmcgd2hlcmUgdGhlIHBhcmVudCdzIHBsYXloZWFkIGxpbmVzIHVwIGluc3RlYWQgb2YgdGhpcy5fdFRpbWUgYmVjYXVzZSB0aGVyZSBjb3VsZCBiZSBhIHR3ZWVuIHRoYXQncyBhbmltYXRpbmcgYW5vdGhlciB0d2VlbidzIHRpbWVTY2FsZSBpbiB0aGUgc2FtZSByZW5kZXJpbmcgbG9vcCAoc2FtZSBwYXJlbnQpLCB0aHVzIGlmIHRoZSB0aW1lU2NhbGUgdHdlZW4gcmVuZGVycyBmaXJzdCwgaXQgd291bGQgYWx0ZXIgX3N0YXJ0IEJFRk9SRSBfdFRpbWUgd2FzIHNldCBvbiB0aGF0IHRpY2sgKGluIHRoZSByZW5kZXJpbmcgbG9vcCksIGVmZmVjdGl2ZWx5IGZyZWV6aW5nIGl0IHVudGlsIHRoZSB0aW1lU2NhbGUgdHdlZW4gZmluaXNoZXMuXG5cbiAgICB0aGlzLl9ydHMgPSArdmFsdWUgfHwgMDtcbiAgICB0aGlzLl90cyA9IHRoaXMuX3BzIHx8IHZhbHVlID09PSAtX3RpbnlOdW0gPyAwIDogdGhpcy5fcnRzOyAvLyBfdHMgaXMgdGhlIGZ1bmN0aW9uYWwgdGltZVNjYWxlIHdoaWNoIHdvdWxkIGJlIDAgaWYgdGhlIGFuaW1hdGlvbiBpcyBwYXVzZWQuXG5cbiAgICB0aGlzLnRvdGFsVGltZShfY2xhbXAoLU1hdGguYWJzKHRoaXMuX2RlbGF5KSwgdGhpcy5fdER1ciwgdFRpbWUpLCBzdXBwcmVzc0V2ZW50cyAhPT0gZmFsc2UpO1xuXG4gICAgX3NldEVuZCh0aGlzKTsgLy8gaWYgcGFyZW50LnNtb290aENoaWxkVGltaW5nIHdhcyBmYWxzZSwgdGhlIGVuZCB0aW1lIGRpZG4ndCBnZXQgdXBkYXRlZCBpbiB0aGUgX2FsaWduUGxheWhlYWQoKSBtZXRob2QsIHNvIGRvIGl0IGhlcmUuXG5cblxuICAgIHJldHVybiBfcmVjYWNoZUFuY2VzdG9ycyh0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8ucGF1c2VkID0gZnVuY3Rpb24gcGF1c2VkKHZhbHVlKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcHM7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3BzICE9PSB2YWx1ZSkge1xuICAgICAgdGhpcy5fcHMgPSB2YWx1ZTtcblxuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX3BUaW1lID0gdGhpcy5fdFRpbWUgfHwgTWF0aC5tYXgoLXRoaXMuX2RlbGF5LCB0aGlzLnJhd1RpbWUoKSk7IC8vIGlmIHRoZSBwYXVzZSBvY2N1cnMgZHVyaW5nIHRoZSBkZWxheSBwaGFzZSwgbWFrZSBzdXJlIHRoYXQncyBmYWN0b3JlZCBpbiB3aGVuIHJlc3VtaW5nLlxuXG4gICAgICAgIHRoaXMuX3RzID0gdGhpcy5fYWN0ID0gMDsgLy8gX3RzIGlzIHRoZSBmdW5jdGlvbmFsIHRpbWVTY2FsZSwgc28gYSBwYXVzZWQgdHdlZW4gd291bGQgZWZmZWN0aXZlbHkgaGF2ZSBhIHRpbWVTY2FsZSBvZiAwLiBXZSByZWNvcmQgdGhlIFwicmVhbFwiIHRpbWVTY2FsZSBhcyBfcnRzIChyZWNvcmRlZCB0aW1lIHNjYWxlKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3dha2UoKTtcblxuICAgICAgICB0aGlzLl90cyA9IHRoaXMuX3J0czsgLy9vbmx5IGRlZmVyIHRvIF9wVGltZSAocGF1c2VUaW1lKSBpZiB0VGltZSBpcyB6ZXJvLiBSZW1lbWJlciwgc29tZW9uZSBjb3VsZCBwYXVzZSgpIGFuIGFuaW1hdGlvbiwgdGhlbiBzY3J1YiB0aGUgcGxheWhlYWQgYW5kIHJlc3VtZSgpLiBJZiB0aGUgcGFyZW50IGRvZXNuJ3QgaGF2ZSBzbW9vdGhDaGlsZFRpbWluZywgd2UgcmVuZGVyIGF0IHRoZSByYXdUaW1lKCkgYmVjYXVzZSB0aGUgc3RhcnRUaW1lIHdvbid0IGdldCB1cGRhdGVkLlxuXG4gICAgICAgIHRoaXMudG90YWxUaW1lKHRoaXMucGFyZW50ICYmICF0aGlzLnBhcmVudC5zbW9vdGhDaGlsZFRpbWluZyA/IHRoaXMucmF3VGltZSgpIDogdGhpcy5fdFRpbWUgfHwgdGhpcy5fcFRpbWUsIHRoaXMucHJvZ3Jlc3MoKSA9PT0gMSAmJiBNYXRoLmFicyh0aGlzLl96VGltZSkgIT09IF90aW55TnVtICYmICh0aGlzLl90VGltZSAtPSBfdGlueU51bSkpOyAvLyBlZGdlIGNhc2U6IGFuaW1hdGlvbi5wcm9ncmVzcygxKS5wYXVzZSgpLnBsYXkoKSB3b3VsZG4ndCByZW5kZXIgYWdhaW4gYmVjYXVzZSB0aGUgcGxheWhlYWQgaXMgYWxyZWFkeSBhdCB0aGUgZW5kLCBidXQgdGhlIGNhbGwgdG8gdG90YWxUaW1lKCkgYmVsb3cgd2lsbCBhZGQgaXQgYmFjayB0byBpdHMgcGFyZW50Li4uYW5kIG5vdCByZW1vdmUgaXQgYWdhaW4gKHNpbmNlIHJlbW92aW5nIG9ubHkgaGFwcGVucyB1cG9uIHJlbmRlcmluZyBhdCBhIG5ldyB0aW1lKS4gT2Zmc2V0dGluZyB0aGUgX3RUaW1lIHNsaWdodGx5IGlzIGRvbmUgc2ltcGx5IHRvIGNhdXNlIHRoZSBmaW5hbCByZW5kZXIgaW4gdG90YWxUaW1lKCkgdGhhdCdsbCBwb3AgaXQgb2ZmIGl0cyB0aW1lbGluZSAoaWYgYXV0b1JlbW92ZUNoaWxkcmVuIGlzIHRydWUsIG9mIGNvdXJzZSkuIENoZWNrIHRvIG1ha2Ugc3VyZSBfelRpbWUgaXNuJ3QgLV90aW55TnVtIHRvIGF2b2lkIGFuIGVkZ2UgY2FzZSB3aGVyZSB0aGUgcGxheWhlYWQgaXMgcHVzaGVkIHRvIHRoZSBlbmQgYnV0IElOU0lERSBhIHR3ZWVuL2NhbGxiYWNrLCB0aGUgdGltZWxpbmUgaXRzZWxmIGlzIHBhdXNlZCB0aHVzIGhhbHRpbmcgcmVuZGVyaW5nIGFuZCBsZWF2aW5nIGEgZmV3IHVucmVuZGVyZWQuIFdoZW4gcmVzdW1pbmcsIGl0IHdvdWxkbid0IHJlbmRlciB0aG9zZSBvdGhlcndpc2UuXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvLnN0YXJ0VGltZSA9IGZ1bmN0aW9uIHN0YXJ0VGltZSh2YWx1ZSkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICB0aGlzLl9zdGFydCA9IHZhbHVlO1xuICAgICAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50IHx8IHRoaXMuX2RwO1xuICAgICAgcGFyZW50ICYmIChwYXJlbnQuX3NvcnQgfHwgIXRoaXMucGFyZW50KSAmJiBfYWRkVG9UaW1lbGluZShwYXJlbnQsIHRoaXMsIHZhbHVlIC0gdGhpcy5fZGVsYXkpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3N0YXJ0O1xuICB9O1xuXG4gIF9wcm90by5lbmRUaW1lID0gZnVuY3Rpb24gZW5kVGltZShpbmNsdWRlUmVwZWF0cykge1xuICAgIHJldHVybiB0aGlzLl9zdGFydCArIChfaXNOb3RGYWxzZShpbmNsdWRlUmVwZWF0cykgPyB0aGlzLnRvdGFsRHVyYXRpb24oKSA6IHRoaXMuZHVyYXRpb24oKSkgLyBNYXRoLmFicyh0aGlzLl90cyB8fCAxKTtcbiAgfTtcblxuICBfcHJvdG8ucmF3VGltZSA9IGZ1bmN0aW9uIHJhd1RpbWUod3JhcFJlcGVhdHMpIHtcbiAgICB2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnQgfHwgdGhpcy5fZHA7IC8vIF9kcCA9IGRldGFjaGVkIHBhcmVudFxuXG4gICAgcmV0dXJuICFwYXJlbnQgPyB0aGlzLl90VGltZSA6IHdyYXBSZXBlYXRzICYmICghdGhpcy5fdHMgfHwgdGhpcy5fcmVwZWF0ICYmIHRoaXMuX3RpbWUgJiYgdGhpcy50b3RhbFByb2dyZXNzKCkgPCAxKSA/IHRoaXMuX3RUaW1lICUgKHRoaXMuX2R1ciArIHRoaXMuX3JEZWxheSkgOiAhdGhpcy5fdHMgPyB0aGlzLl90VGltZSA6IF9wYXJlbnRUb0NoaWxkVG90YWxUaW1lKHBhcmVudC5yYXdUaW1lKHdyYXBSZXBlYXRzKSwgdGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvLnJldmVydCA9IGZ1bmN0aW9uIHJldmVydChjb25maWcpIHtcbiAgICBpZiAoY29uZmlnID09PSB2b2lkIDApIHtcbiAgICAgIGNvbmZpZyA9IF9yZXZlcnRDb25maWc7XG4gICAgfVxuXG4gICAgdmFyIHByZXZJc1JldmVydGluZyA9IF9yZXZlcnRpbmc7XG4gICAgX3JldmVydGluZyA9IGNvbmZpZztcblxuICAgIGlmICh0aGlzLl9pbml0dGVkIHx8IHRoaXMuX3N0YXJ0QXQpIHtcbiAgICAgIHRoaXMudGltZWxpbmUgJiYgdGhpcy50aW1lbGluZS5yZXZlcnQoY29uZmlnKTtcbiAgICAgIHRoaXMudG90YWxUaW1lKC0wLjAxLCBjb25maWcuc3VwcHJlc3NFdmVudHMpO1xuICAgIH1cblxuICAgIHRoaXMuZGF0YSAhPT0gXCJuZXN0ZWRcIiAmJiBjb25maWcua2lsbCAhPT0gZmFsc2UgJiYgdGhpcy5raWxsKCk7XG4gICAgX3JldmVydGluZyA9IHByZXZJc1JldmVydGluZztcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8uZ2xvYmFsVGltZSA9IGZ1bmN0aW9uIGdsb2JhbFRpbWUocmF3VGltZSkge1xuICAgIHZhciBhbmltYXRpb24gPSB0aGlzLFxuICAgICAgICB0aW1lID0gYXJndW1lbnRzLmxlbmd0aCA/IHJhd1RpbWUgOiBhbmltYXRpb24ucmF3VGltZSgpO1xuXG4gICAgd2hpbGUgKGFuaW1hdGlvbikge1xuICAgICAgdGltZSA9IGFuaW1hdGlvbi5fc3RhcnQgKyB0aW1lIC8gKE1hdGguYWJzKGFuaW1hdGlvbi5fdHMpIHx8IDEpO1xuICAgICAgYW5pbWF0aW9uID0gYW5pbWF0aW9uLl9kcDtcbiAgICB9XG5cbiAgICByZXR1cm4gIXRoaXMucGFyZW50ICYmIHRoaXMuX3NhdCA/IHRoaXMuX3NhdC5nbG9iYWxUaW1lKHJhd1RpbWUpIDogdGltZTsgLy8gdGhlIF9zdGFydEF0IHR3ZWVucyBmb3IgLmZyb21UbygpIGFuZCAuZnJvbSgpIHRoYXQgaGF2ZSBpbW1lZGlhdGVSZW5kZXIgc2hvdWxkIGFsd2F5cyBiZSBGSVJTVCBpbiB0aGUgdGltZWxpbmUgKGltcG9ydGFudCBmb3IgY29udGV4dC5yZXZlcnQoKSkuIFwiX3NhdFwiIHN0YW5kcyBmb3IgX3N0YXJ0QXRUd2VlbiwgcmVmZXJyaW5nIHRvIHRoZSBwYXJlbnQgdHdlZW4gdGhhdCBjcmVhdGVkIHRoZSBfc3RhcnRBdC4gV2UgbXVzdCBkaXNjZXJuIGlmIHRoYXQgdHdlZW4gaGFkIGltbWVkaWF0ZVJlbmRlciBzbyB0aGF0IHdlIGNhbiBrbm93IHdoZXRoZXIgb3Igbm90IHRvIHByaW9yaXRpemUgaXQgaW4gcmV2ZXJ0KCkuXG4gIH07XG5cbiAgX3Byb3RvLnJlcGVhdCA9IGZ1bmN0aW9uIHJlcGVhdCh2YWx1ZSkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICB0aGlzLl9yZXBlYXQgPSB2YWx1ZSA9PT0gSW5maW5pdHkgPyAtMiA6IHZhbHVlO1xuICAgICAgcmV0dXJuIF9vblVwZGF0ZVRvdGFsRHVyYXRpb24odGhpcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3JlcGVhdCA9PT0gLTIgPyBJbmZpbml0eSA6IHRoaXMuX3JlcGVhdDtcbiAgfTtcblxuICBfcHJvdG8ucmVwZWF0RGVsYXkgPSBmdW5jdGlvbiByZXBlYXREZWxheSh2YWx1ZSkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICB2YXIgdGltZSA9IHRoaXMuX3RpbWU7XG4gICAgICB0aGlzLl9yRGVsYXkgPSB2YWx1ZTtcblxuICAgICAgX29uVXBkYXRlVG90YWxEdXJhdGlvbih0aGlzKTtcblxuICAgICAgcmV0dXJuIHRpbWUgPyB0aGlzLnRpbWUodGltZSkgOiB0aGlzO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9yRGVsYXk7XG4gIH07XG5cbiAgX3Byb3RvLnlveW8gPSBmdW5jdGlvbiB5b3lvKHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuX3lveW8gPSB2YWx1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl95b3lvO1xuICB9O1xuXG4gIF9wcm90by5zZWVrID0gZnVuY3Rpb24gc2Vlayhwb3NpdGlvbiwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICByZXR1cm4gdGhpcy50b3RhbFRpbWUoX3BhcnNlUG9zaXRpb24odGhpcywgcG9zaXRpb24pLCBfaXNOb3RGYWxzZShzdXBwcmVzc0V2ZW50cykpO1xuICB9O1xuXG4gIF9wcm90by5yZXN0YXJ0ID0gZnVuY3Rpb24gcmVzdGFydChpbmNsdWRlRGVsYXksIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgcmV0dXJuIHRoaXMucGxheSgpLnRvdGFsVGltZShpbmNsdWRlRGVsYXkgPyAtdGhpcy5fZGVsYXkgOiAwLCBfaXNOb3RGYWxzZShzdXBwcmVzc0V2ZW50cykpO1xuICB9O1xuXG4gIF9wcm90by5wbGF5ID0gZnVuY3Rpb24gcGxheShmcm9tLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIGZyb20gIT0gbnVsbCAmJiB0aGlzLnNlZWsoZnJvbSwgc3VwcHJlc3NFdmVudHMpO1xuICAgIHJldHVybiB0aGlzLnJldmVyc2VkKGZhbHNlKS5wYXVzZWQoZmFsc2UpO1xuICB9O1xuXG4gIF9wcm90by5yZXZlcnNlID0gZnVuY3Rpb24gcmV2ZXJzZShmcm9tLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIGZyb20gIT0gbnVsbCAmJiB0aGlzLnNlZWsoZnJvbSB8fCB0aGlzLnRvdGFsRHVyYXRpb24oKSwgc3VwcHJlc3NFdmVudHMpO1xuICAgIHJldHVybiB0aGlzLnJldmVyc2VkKHRydWUpLnBhdXNlZChmYWxzZSk7XG4gIH07XG5cbiAgX3Byb3RvLnBhdXNlID0gZnVuY3Rpb24gcGF1c2UoYXRUaW1lLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIGF0VGltZSAhPSBudWxsICYmIHRoaXMuc2VlayhhdFRpbWUsIHN1cHByZXNzRXZlbnRzKTtcbiAgICByZXR1cm4gdGhpcy5wYXVzZWQodHJ1ZSk7XG4gIH07XG5cbiAgX3Byb3RvLnJlc3VtZSA9IGZ1bmN0aW9uIHJlc3VtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5wYXVzZWQoZmFsc2UpO1xuICB9O1xuXG4gIF9wcm90by5yZXZlcnNlZCA9IGZ1bmN0aW9uIHJldmVyc2VkKHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICEhdmFsdWUgIT09IHRoaXMucmV2ZXJzZWQoKSAmJiB0aGlzLnRpbWVTY2FsZSgtdGhpcy5fcnRzIHx8ICh2YWx1ZSA/IC1fdGlueU51bSA6IDApKTsgLy8gaW4gY2FzZSB0aW1lU2NhbGUgaXMgemVybywgcmV2ZXJzaW5nIHdvdWxkIGhhdmUgbm8gZWZmZWN0IHNvIHdlIHVzZSBfdGlueU51bS5cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3J0cyA8IDA7XG4gIH07XG5cbiAgX3Byb3RvLmludmFsaWRhdGUgPSBmdW5jdGlvbiBpbnZhbGlkYXRlKCkge1xuICAgIHRoaXMuX2luaXR0ZWQgPSB0aGlzLl9hY3QgPSAwO1xuICAgIHRoaXMuX3pUaW1lID0gLV90aW55TnVtO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90by5pc0FjdGl2ZSA9IGZ1bmN0aW9uIGlzQWN0aXZlKCkge1xuICAgIHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudCB8fCB0aGlzLl9kcCxcbiAgICAgICAgc3RhcnQgPSB0aGlzLl9zdGFydCxcbiAgICAgICAgcmF3VGltZTtcbiAgICByZXR1cm4gISEoIXBhcmVudCB8fCB0aGlzLl90cyAmJiB0aGlzLl9pbml0dGVkICYmIHBhcmVudC5pc0FjdGl2ZSgpICYmIChyYXdUaW1lID0gcGFyZW50LnJhd1RpbWUodHJ1ZSkpID49IHN0YXJ0ICYmIHJhd1RpbWUgPCB0aGlzLmVuZFRpbWUodHJ1ZSkgLSBfdGlueU51bSk7XG4gIH07XG5cbiAgX3Byb3RvLmV2ZW50Q2FsbGJhY2sgPSBmdW5jdGlvbiBldmVudENhbGxiYWNrKHR5cGUsIGNhbGxiYWNrLCBwYXJhbXMpIHtcbiAgICB2YXIgdmFycyA9IHRoaXMudmFycztcblxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgaWYgKCFjYWxsYmFjaykge1xuICAgICAgICBkZWxldGUgdmFyc1t0eXBlXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhcnNbdHlwZV0gPSBjYWxsYmFjaztcbiAgICAgICAgcGFyYW1zICYmICh2YXJzW3R5cGUgKyBcIlBhcmFtc1wiXSA9IHBhcmFtcyk7XG4gICAgICAgIHR5cGUgPT09IFwib25VcGRhdGVcIiAmJiAodGhpcy5fb25VcGRhdGUgPSBjYWxsYmFjayk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHJldHVybiB2YXJzW3R5cGVdO1xuICB9O1xuXG4gIF9wcm90by50aGVuID0gZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxlZCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgIHZhciBmID0gX2lzRnVuY3Rpb24ob25GdWxmaWxsZWQpID8gb25GdWxmaWxsZWQgOiBfcGFzc1Rocm91Z2gsXG4gICAgICAgICAgX3Jlc29sdmUgPSBmdW5jdGlvbiBfcmVzb2x2ZSgpIHtcbiAgICAgICAgdmFyIF90aGVuID0gc2VsZi50aGVuO1xuICAgICAgICBzZWxmLnRoZW4gPSBudWxsOyAvLyB0ZW1wb3JhcmlseSBudWxsIHRoZSB0aGVuKCkgbWV0aG9kIHRvIGF2b2lkIGFuIGluZmluaXRlIGxvb3AgKHNlZSBodHRwczovL2dpdGh1Yi5jb20vZ3JlZW5zb2NrL0dTQVAvaXNzdWVzLzMyMilcblxuICAgICAgICBfaXNGdW5jdGlvbihmKSAmJiAoZiA9IGYoc2VsZikpICYmIChmLnRoZW4gfHwgZiA9PT0gc2VsZikgJiYgKHNlbGYudGhlbiA9IF90aGVuKTtcbiAgICAgICAgcmVzb2x2ZShmKTtcbiAgICAgICAgc2VsZi50aGVuID0gX3RoZW47XG4gICAgICB9O1xuXG4gICAgICBpZiAoc2VsZi5faW5pdHRlZCAmJiBzZWxmLnRvdGFsUHJvZ3Jlc3MoKSA9PT0gMSAmJiBzZWxmLl90cyA+PSAwIHx8ICFzZWxmLl90VGltZSAmJiBzZWxmLl90cyA8IDApIHtcbiAgICAgICAgX3Jlc29sdmUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlbGYuX3Byb20gPSBfcmVzb2x2ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ua2lsbCA9IGZ1bmN0aW9uIGtpbGwoKSB7XG4gICAgX2ludGVycnVwdCh0aGlzKTtcbiAgfTtcblxuICByZXR1cm4gQW5pbWF0aW9uO1xufSgpO1xuXG5fc2V0RGVmYXVsdHMoQW5pbWF0aW9uLnByb3RvdHlwZSwge1xuICBfdGltZTogMCxcbiAgX3N0YXJ0OiAwLFxuICBfZW5kOiAwLFxuICBfdFRpbWU6IDAsXG4gIF90RHVyOiAwLFxuICBfZGlydHk6IDAsXG4gIF9yZXBlYXQ6IDAsXG4gIF95b3lvOiBmYWxzZSxcbiAgcGFyZW50OiBudWxsLFxuICBfaW5pdHRlZDogZmFsc2UsXG4gIF9yRGVsYXk6IDAsXG4gIF90czogMSxcbiAgX2RwOiAwLFxuICByYXRpbzogMCxcbiAgX3pUaW1lOiAtX3RpbnlOdW0sXG4gIF9wcm9tOiAwLFxuICBfcHM6IGZhbHNlLFxuICBfcnRzOiAxXG59KTtcbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBUSU1FTElORVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cblxuZXhwb3J0IHZhciBUaW1lbGluZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0FuaW1hdGlvbikge1xuICBfaW5oZXJpdHNMb29zZShUaW1lbGluZSwgX0FuaW1hdGlvbik7XG5cbiAgZnVuY3Rpb24gVGltZWxpbmUodmFycywgcG9zaXRpb24pIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBpZiAodmFycyA9PT0gdm9pZCAwKSB7XG4gICAgICB2YXJzID0ge307XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfQW5pbWF0aW9uLmNhbGwodGhpcywgdmFycykgfHwgdGhpcztcbiAgICBfdGhpcy5sYWJlbHMgPSB7fTtcbiAgICBfdGhpcy5zbW9vdGhDaGlsZFRpbWluZyA9ICEhdmFycy5zbW9vdGhDaGlsZFRpbWluZztcbiAgICBfdGhpcy5hdXRvUmVtb3ZlQ2hpbGRyZW4gPSAhIXZhcnMuYXV0b1JlbW92ZUNoaWxkcmVuO1xuICAgIF90aGlzLl9zb3J0ID0gX2lzTm90RmFsc2UodmFycy5zb3J0Q2hpbGRyZW4pO1xuICAgIF9nbG9iYWxUaW1lbGluZSAmJiBfYWRkVG9UaW1lbGluZSh2YXJzLnBhcmVudCB8fCBfZ2xvYmFsVGltZWxpbmUsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBwb3NpdGlvbik7XG4gICAgdmFycy5yZXZlcnNlZCAmJiBfdGhpcy5yZXZlcnNlKCk7XG4gICAgdmFycy5wYXVzZWQgJiYgX3RoaXMucGF1c2VkKHRydWUpO1xuICAgIHZhcnMuc2Nyb2xsVHJpZ2dlciAmJiBfc2Nyb2xsVHJpZ2dlcihfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgdmFycy5zY3JvbGxUcmlnZ2VyKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvMiA9IFRpbWVsaW5lLnByb3RvdHlwZTtcblxuICBfcHJvdG8yLnRvID0gZnVuY3Rpb24gdG8odGFyZ2V0cywgdmFycywgcG9zaXRpb24pIHtcbiAgICBfY3JlYXRlVHdlZW5UeXBlKDAsIGFyZ3VtZW50cywgdGhpcyk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLmZyb20gPSBmdW5jdGlvbiBmcm9tKHRhcmdldHMsIHZhcnMsIHBvc2l0aW9uKSB7XG4gICAgX2NyZWF0ZVR3ZWVuVHlwZSgxLCBhcmd1bWVudHMsIHRoaXMpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvMi5mcm9tVG8gPSBmdW5jdGlvbiBmcm9tVG8odGFyZ2V0cywgZnJvbVZhcnMsIHRvVmFycywgcG9zaXRpb24pIHtcbiAgICBfY3JlYXRlVHdlZW5UeXBlKDIsIGFyZ3VtZW50cywgdGhpcyk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLnNldCA9IGZ1bmN0aW9uIHNldCh0YXJnZXRzLCB2YXJzLCBwb3NpdGlvbikge1xuICAgIHZhcnMuZHVyYXRpb24gPSAwO1xuICAgIHZhcnMucGFyZW50ID0gdGhpcztcbiAgICBfaW5oZXJpdERlZmF1bHRzKHZhcnMpLnJlcGVhdERlbGF5IHx8ICh2YXJzLnJlcGVhdCA9IDApO1xuICAgIHZhcnMuaW1tZWRpYXRlUmVuZGVyID0gISF2YXJzLmltbWVkaWF0ZVJlbmRlcjtcbiAgICBuZXcgVHdlZW4odGFyZ2V0cywgdmFycywgX3BhcnNlUG9zaXRpb24odGhpcywgcG9zaXRpb24pLCAxKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLmNhbGwgPSBmdW5jdGlvbiBjYWxsKGNhbGxiYWNrLCBwYXJhbXMsIHBvc2l0aW9uKSB7XG4gICAgcmV0dXJuIF9hZGRUb1RpbWVsaW5lKHRoaXMsIFR3ZWVuLmRlbGF5ZWRDYWxsKDAsIGNhbGxiYWNrLCBwYXJhbXMpLCBwb3NpdGlvbik7XG4gIH0gLy9PTkxZIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5ISBNYXliZSBkZWxldGU/XG4gIDtcblxuICBfcHJvdG8yLnN0YWdnZXJUbyA9IGZ1bmN0aW9uIHN0YWdnZXJUbyh0YXJnZXRzLCBkdXJhdGlvbiwgdmFycywgc3RhZ2dlciwgcG9zaXRpb24sIG9uQ29tcGxldGVBbGwsIG9uQ29tcGxldGVBbGxQYXJhbXMpIHtcbiAgICB2YXJzLmR1cmF0aW9uID0gZHVyYXRpb247XG4gICAgdmFycy5zdGFnZ2VyID0gdmFycy5zdGFnZ2VyIHx8IHN0YWdnZXI7XG4gICAgdmFycy5vbkNvbXBsZXRlID0gb25Db21wbGV0ZUFsbDtcbiAgICB2YXJzLm9uQ29tcGxldGVQYXJhbXMgPSBvbkNvbXBsZXRlQWxsUGFyYW1zO1xuICAgIHZhcnMucGFyZW50ID0gdGhpcztcbiAgICBuZXcgVHdlZW4odGFyZ2V0cywgdmFycywgX3BhcnNlUG9zaXRpb24odGhpcywgcG9zaXRpb24pKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLnN0YWdnZXJGcm9tID0gZnVuY3Rpb24gc3RhZ2dlckZyb20odGFyZ2V0cywgZHVyYXRpb24sIHZhcnMsIHN0YWdnZXIsIHBvc2l0aW9uLCBvbkNvbXBsZXRlQWxsLCBvbkNvbXBsZXRlQWxsUGFyYW1zKSB7XG4gICAgdmFycy5ydW5CYWNrd2FyZHMgPSAxO1xuICAgIF9pbmhlcml0RGVmYXVsdHModmFycykuaW1tZWRpYXRlUmVuZGVyID0gX2lzTm90RmFsc2UodmFycy5pbW1lZGlhdGVSZW5kZXIpO1xuICAgIHJldHVybiB0aGlzLnN0YWdnZXJUbyh0YXJnZXRzLCBkdXJhdGlvbiwgdmFycywgc3RhZ2dlciwgcG9zaXRpb24sIG9uQ29tcGxldGVBbGwsIG9uQ29tcGxldGVBbGxQYXJhbXMpO1xuICB9O1xuXG4gIF9wcm90bzIuc3RhZ2dlckZyb21UbyA9IGZ1bmN0aW9uIHN0YWdnZXJGcm9tVG8odGFyZ2V0cywgZHVyYXRpb24sIGZyb21WYXJzLCB0b1ZhcnMsIHN0YWdnZXIsIHBvc2l0aW9uLCBvbkNvbXBsZXRlQWxsLCBvbkNvbXBsZXRlQWxsUGFyYW1zKSB7XG4gICAgdG9WYXJzLnN0YXJ0QXQgPSBmcm9tVmFycztcbiAgICBfaW5oZXJpdERlZmF1bHRzKHRvVmFycykuaW1tZWRpYXRlUmVuZGVyID0gX2lzTm90RmFsc2UodG9WYXJzLmltbWVkaWF0ZVJlbmRlcik7XG4gICAgcmV0dXJuIHRoaXMuc3RhZ2dlclRvKHRhcmdldHMsIGR1cmF0aW9uLCB0b1ZhcnMsIHN0YWdnZXIsIHBvc2l0aW9uLCBvbkNvbXBsZXRlQWxsLCBvbkNvbXBsZXRlQWxsUGFyYW1zKTtcbiAgfTtcblxuICBfcHJvdG8yLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcih0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSkge1xuICAgIHZhciBwcmV2VGltZSA9IHRoaXMuX3RpbWUsXG4gICAgICAgIHREdXIgPSB0aGlzLl9kaXJ0eSA/IHRoaXMudG90YWxEdXJhdGlvbigpIDogdGhpcy5fdER1cixcbiAgICAgICAgZHVyID0gdGhpcy5fZHVyLFxuICAgICAgICB0VGltZSA9IHRvdGFsVGltZSA8PSAwID8gMCA6IF9yb3VuZFByZWNpc2UodG90YWxUaW1lKSxcbiAgICAgICAgLy8gaWYgYSBwYXVzZWQgdGltZWxpbmUgaXMgcmVzdW1lZCAob3IgaXRzIF9zdGFydCBpcyB1cGRhdGVkIGZvciBhbm90aGVyIHJlYXNvbi4uLndoaWNoIHJvdW5kcyBpdCksIHRoYXQgY291bGQgcmVzdWx0IGluIHRoZSBwbGF5aGVhZCBzaGlmdGluZyBhICoqdGlueSoqIGFtb3VudCBhbmQgYSB6ZXJvLWR1cmF0aW9uIGNoaWxkIGF0IHRoYXQgc3BvdCBtYXkgZ2V0IHJlbmRlcmVkIGF0IGEgZGlmZmVyZW50IHJhdGlvLCBsaWtlIGl0cyB0b3RhbFRpbWUgaW4gcmVuZGVyKCkgbWF5IGJlIDFlLTE3IGluc3RlYWQgb2YgMCwgZm9yIGV4YW1wbGUuXG4gICAgY3Jvc3NpbmdTdGFydCA9IHRoaXMuX3pUaW1lIDwgMCAhPT0gdG90YWxUaW1lIDwgMCAmJiAodGhpcy5faW5pdHRlZCB8fCAhZHVyKSxcbiAgICAgICAgdGltZSxcbiAgICAgICAgY2hpbGQsXG4gICAgICAgIG5leHQsXG4gICAgICAgIGl0ZXJhdGlvbixcbiAgICAgICAgY3ljbGVEdXJhdGlvbixcbiAgICAgICAgcHJldlBhdXNlZCxcbiAgICAgICAgcGF1c2VUd2VlbixcbiAgICAgICAgdGltZVNjYWxlLFxuICAgICAgICBwcmV2U3RhcnQsXG4gICAgICAgIHByZXZJdGVyYXRpb24sXG4gICAgICAgIHlveW8sXG4gICAgICAgIGlzWW95bztcbiAgICB0aGlzICE9PSBfZ2xvYmFsVGltZWxpbmUgJiYgdFRpbWUgPiB0RHVyICYmIHRvdGFsVGltZSA+PSAwICYmICh0VGltZSA9IHREdXIpO1xuXG4gICAgaWYgKHRUaW1lICE9PSB0aGlzLl90VGltZSB8fCBmb3JjZSB8fCBjcm9zc2luZ1N0YXJ0KSB7XG4gICAgICBpZiAocHJldlRpbWUgIT09IHRoaXMuX3RpbWUgJiYgZHVyKSB7XG4gICAgICAgIC8vaWYgdG90YWxEdXJhdGlvbigpIGZpbmRzIGEgY2hpbGQgd2l0aCBhIG5lZ2F0aXZlIHN0YXJ0VGltZSBhbmQgc21vb3RoQ2hpbGRUaW1pbmcgaXMgdHJ1ZSwgdGhpbmdzIGdldCBzaGlmdGVkIGFyb3VuZCBpbnRlcm5hbGx5IHNvIHdlIG5lZWQgdG8gYWRqdXN0IHRoZSB0aW1lIGFjY29yZGluZ2x5LiBGb3IgZXhhbXBsZSwgaWYgYSB0d2VlbiBzdGFydHMgYXQgLTMwIHdlIG11c3Qgc2hpZnQgRVZFUllUSElORyBmb3J3YXJkIDMwIHNlY29uZHMgYW5kIG1vdmUgdGhpcyB0aW1lbGluZSdzIHN0YXJ0VGltZSBiYWNrd2FyZCBieSAzMCBzZWNvbmRzIHNvIHRoYXQgdGhpbmdzIGFsaWduIHdpdGggdGhlIHBsYXloZWFkIChubyBqdW1wKS5cbiAgICAgICAgdFRpbWUgKz0gdGhpcy5fdGltZSAtIHByZXZUaW1lO1xuICAgICAgICB0b3RhbFRpbWUgKz0gdGhpcy5fdGltZSAtIHByZXZUaW1lO1xuICAgICAgfVxuXG4gICAgICB0aW1lID0gdFRpbWU7XG4gICAgICBwcmV2U3RhcnQgPSB0aGlzLl9zdGFydDtcbiAgICAgIHRpbWVTY2FsZSA9IHRoaXMuX3RzO1xuICAgICAgcHJldlBhdXNlZCA9ICF0aW1lU2NhbGU7XG5cbiAgICAgIGlmIChjcm9zc2luZ1N0YXJ0KSB7XG4gICAgICAgIGR1ciB8fCAocHJldlRpbWUgPSB0aGlzLl96VGltZSk7IC8vd2hlbiB0aGUgcGxheWhlYWQgYXJyaXZlcyBhdCBFWEFDVExZIHRpbWUgMCAocmlnaHQgb24gdG9wKSBvZiBhIHplcm8tZHVyYXRpb24gdGltZWxpbmUsIHdlIG5lZWQgdG8gZGlzY2VybiBpZiBldmVudHMgYXJlIHN1cHByZXNzZWQgc28gdGhhdCB3aGVuIHRoZSBwbGF5aGVhZCBtb3ZlcyBhZ2FpbiAobmV4dCB0aW1lKSwgaXQnbGwgdHJpZ2dlciB0aGUgY2FsbGJhY2suIElmIGV2ZW50cyBhcmUgTk9UIHN1cHByZXNzZWQsIG9idmlvdXNseSB0aGUgY2FsbGJhY2sgd291bGQgYmUgdHJpZ2dlcmVkIGluIHRoaXMgcmVuZGVyLiBCYXNpY2FsbHksIHRoZSBjYWxsYmFjayBzaG91bGQgZmlyZSBlaXRoZXIgd2hlbiB0aGUgcGxheWhlYWQgQVJSSVZFUyBvciBMRUFWRVMgdGhpcyBleGFjdCBzcG90LCBub3QgYm90aC4gSW1hZ2luZSBkb2luZyBhIHRpbWVsaW5lLnNlZWsoMCkgYW5kIHRoZXJlJ3MgYSBjYWxsYmFjayB0aGF0IHNpdHMgYXQgMC4gU2luY2UgZXZlbnRzIGFyZSBzdXBwcmVzc2VkIG9uIHRoYXQgc2VlaygpIGJ5IGRlZmF1bHQsIG5vdGhpbmcgd2lsbCBmaXJlLCBidXQgd2hlbiB0aGUgcGxheWhlYWQgbW92ZXMgb2ZmIG9mIHRoYXQgcG9zaXRpb24sIHRoZSBjYWxsYmFjayBzaG91bGQgZmlyZS4gVGhpcyBiZWhhdmlvciBpcyB3aGF0IHBlb3BsZSBpbnR1aXRpdmVseSBleHBlY3QuXG5cbiAgICAgICAgKHRvdGFsVGltZSB8fCAhc3VwcHJlc3NFdmVudHMpICYmICh0aGlzLl96VGltZSA9IHRvdGFsVGltZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9yZXBlYXQpIHtcbiAgICAgICAgLy9hZGp1c3QgdGhlIHRpbWUgZm9yIHJlcGVhdHMgYW5kIHlveW9zXG4gICAgICAgIHlveW8gPSB0aGlzLl95b3lvO1xuICAgICAgICBjeWNsZUR1cmF0aW9uID0gZHVyICsgdGhpcy5fckRlbGF5O1xuXG4gICAgICAgIGlmICh0aGlzLl9yZXBlYXQgPCAtMSAmJiB0b3RhbFRpbWUgPCAwKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMudG90YWxUaW1lKGN5Y2xlRHVyYXRpb24gKiAxMDAgKyB0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aW1lID0gX3JvdW5kUHJlY2lzZSh0VGltZSAlIGN5Y2xlRHVyYXRpb24pOyAvL3JvdW5kIHRvIGF2b2lkIGZsb2F0aW5nIHBvaW50IGVycm9ycy4gKDQgJSAwLjggc2hvdWxkIGJlIDAgYnV0IHNvbWUgYnJvd3NlcnMgcmVwb3J0IGl0IGFzIDAuNzk5OTk5OTkhKVxuXG4gICAgICAgIGlmICh0VGltZSA9PT0gdER1cikge1xuICAgICAgICAgIC8vIHRoZSB0RHVyID09PSB0VGltZSBpcyBmb3IgZWRnZSBjYXNlcyB3aGVyZSB0aGVyZSdzIGEgbGVuZ3RoeSBkZWNpbWFsIG9uIHRoZSBkdXJhdGlvbiBhbmQgaXQgbWF5IHJlYWNoIHRoZSB2ZXJ5IGVuZCBidXQgdGhlIHRpbWUgaXMgcmVuZGVyZWQgYXMgbm90LXF1aXRlLXRoZXJlIChyZW1lbWJlciwgdER1ciBpcyByb3VuZGVkIHRvIDQgZGVjaW1hbHMgd2hlcmVhcyBkdXIgaXNuJ3QpXG4gICAgICAgICAgaXRlcmF0aW9uID0gdGhpcy5fcmVwZWF0O1xuICAgICAgICAgIHRpbWUgPSBkdXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlcmF0aW9uID0gfn4odFRpbWUgLyBjeWNsZUR1cmF0aW9uKTtcblxuICAgICAgICAgIGlmIChpdGVyYXRpb24gJiYgaXRlcmF0aW9uID09PSB0VGltZSAvIGN5Y2xlRHVyYXRpb24pIHtcbiAgICAgICAgICAgIHRpbWUgPSBkdXI7XG4gICAgICAgICAgICBpdGVyYXRpb24tLTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aW1lID4gZHVyICYmICh0aW1lID0gZHVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByZXZJdGVyYXRpb24gPSBfYW5pbWF0aW9uQ3ljbGUodGhpcy5fdFRpbWUsIGN5Y2xlRHVyYXRpb24pO1xuICAgICAgICAhcHJldlRpbWUgJiYgdGhpcy5fdFRpbWUgJiYgcHJldkl0ZXJhdGlvbiAhPT0gaXRlcmF0aW9uICYmIHRoaXMuX3RUaW1lIC0gcHJldkl0ZXJhdGlvbiAqIGN5Y2xlRHVyYXRpb24gLSB0aGlzLl9kdXIgPD0gMCAmJiAocHJldkl0ZXJhdGlvbiA9IGl0ZXJhdGlvbik7IC8vIGVkZ2UgY2FzZSAtIGlmIHNvbWVvbmUgZG9lcyBhZGRQYXVzZSgpIGF0IHRoZSB2ZXJ5IGJlZ2lubmluZyBvZiBhIHJlcGVhdGluZyB0aW1lbGluZSwgdGhhdCBwYXVzZSBpcyB0ZWNobmljYWxseSBhdCB0aGUgc2FtZSBzcG90IGFzIHRoZSBlbmQgd2hpY2ggY2F1c2VzIHRoaXMuX3RpbWUgdG8gZ2V0IHNldCB0byAwIHdoZW4gdGhlIHRvdGFsVGltZSB3b3VsZCBub3JtYWxseSBwbGFjZSB0aGUgcGxheWhlYWQgYXQgdGhlIGVuZC4gU2VlIGh0dHBzOi8vZ3NhcC5jb20vZm9ydW1zL3RvcGljLzIzODIzLWNsb3NpbmctbmF2LWFuaW1hdGlvbi1ub3Qtd29ya2luZy1vbi1pZS1hbmQtaXBob25lLTYtbWF5YmUtb3RoZXItb2xkZXItYnJvd3Nlci8/dGFiPWNvbW1lbnRzI2NvbW1lbnQtMTEzMDA1IGFsc28sIHRoaXMuX3RUaW1lIC0gcHJldkl0ZXJhdGlvbiAqIGN5Y2xlRHVyYXRpb24gLSB0aGlzLl9kdXIgPD0gMCBqdXN0IGNoZWNrcyB0byBtYWtlIHN1cmUgaXQgd2Fzbid0IHByZXZpb3VzbHkgaW4gdGhlIFwicmVwZWF0RGVsYXlcIiBwb3J0aW9uXG5cbiAgICAgICAgaWYgKHlveW8gJiYgaXRlcmF0aW9uICYgMSkge1xuICAgICAgICAgIHRpbWUgPSBkdXIgLSB0aW1lO1xuICAgICAgICAgIGlzWW95byA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgLypcbiAgICAgICAgbWFrZSBzdXJlIGNoaWxkcmVuIGF0IHRoZSBlbmQvYmVnaW5uaW5nIG9mIHRoZSB0aW1lbGluZSBhcmUgcmVuZGVyZWQgcHJvcGVybHkuIElmLCBmb3IgZXhhbXBsZSxcbiAgICAgICAgYSAzLXNlY29uZCBsb25nIHRpbWVsaW5lIHJlbmRlcmVkIGF0IDIuOSBzZWNvbmRzIHByZXZpb3VzbHksIGFuZCBub3cgcmVuZGVycyBhdCAzLjIgc2Vjb25kcyAod2hpY2hcbiAgICAgICAgd291bGQgZ2V0IHRyYW5zbGF0ZWQgdG8gMi44IHNlY29uZHMgaWYgdGhlIHRpbWVsaW5lIHlveW9zIG9yIDAuMiBzZWNvbmRzIGlmIGl0IGp1c3QgcmVwZWF0cyksIHRoZXJlXG4gICAgICAgIGNvdWxkIGJlIGEgY2FsbGJhY2sgb3IgYSBzaG9ydCB0d2VlbiB0aGF0J3MgYXQgMi45NSBvciAzIHNlY29uZHMgaW4gd2hpY2ggd291bGRuJ3QgcmVuZGVyLiBTb1xuICAgICAgICB3ZSBuZWVkIHRvIHB1c2ggdGhlIHRpbWVsaW5lIHRvIHRoZSBlbmQgKGFuZC9vciBiZWdpbm5pbmcgZGVwZW5kaW5nIG9uIGl0cyB5b3lvIHZhbHVlKS4gQWxzbyB3ZSBtdXN0XG4gICAgICAgIGVuc3VyZSB0aGF0IHplcm8tZHVyYXRpb24gdHdlZW5zIGF0IHRoZSB2ZXJ5IGJlZ2lubmluZyBvciBlbmQgb2YgdGhlIFRpbWVsaW5lIHdvcmsuXG4gICAgICAgICovXG5cblxuICAgICAgICBpZiAoaXRlcmF0aW9uICE9PSBwcmV2SXRlcmF0aW9uICYmICF0aGlzLl9sb2NrKSB7XG4gICAgICAgICAgdmFyIHJld2luZGluZyA9IHlveW8gJiYgcHJldkl0ZXJhdGlvbiAmIDEsXG4gICAgICAgICAgICAgIGRvZXNXcmFwID0gcmV3aW5kaW5nID09PSAoeW95byAmJiBpdGVyYXRpb24gJiAxKTtcbiAgICAgICAgICBpdGVyYXRpb24gPCBwcmV2SXRlcmF0aW9uICYmIChyZXdpbmRpbmcgPSAhcmV3aW5kaW5nKTtcbiAgICAgICAgICBwcmV2VGltZSA9IHJld2luZGluZyA/IDAgOiB0VGltZSAlIGR1ciA/IGR1ciA6IHRUaW1lOyAvLyBpZiB0aGUgcGxheWhlYWQgaXMgbGFuZGluZyBleGFjdGx5IGF0IHRoZSBlbmQgb2YgYW4gaXRlcmF0aW9uLCB1c2UgdGhhdCB0b3RhbFRpbWUgcmF0aGVyIHRoYW4gb25seSB0aGUgZHVyYXRpb24sIG90aGVyd2lzZSBpdCdsbCBza2lwIHRoZSAybmQgcmVuZGVyIHNpbmNlIGl0J3MgZWZmZWN0aXZlbHkgYXQgdGhlIHNhbWUgdGltZS5cblxuICAgICAgICAgIHRoaXMuX2xvY2sgPSAxO1xuICAgICAgICAgIHRoaXMucmVuZGVyKHByZXZUaW1lIHx8IChpc1lveW8gPyAwIDogX3JvdW5kUHJlY2lzZShpdGVyYXRpb24gKiBjeWNsZUR1cmF0aW9uKSksIHN1cHByZXNzRXZlbnRzLCAhZHVyKS5fbG9jayA9IDA7XG4gICAgICAgICAgdGhpcy5fdFRpbWUgPSB0VGltZTsgLy8gaWYgYSB1c2VyIGdldHMgdGhlIGl0ZXJhdGlvbigpIGluc2lkZSB0aGUgb25SZXBlYXQsIGZvciBleGFtcGxlLCBpdCBzaG91bGQgYmUgYWNjdXJhdGUuXG5cbiAgICAgICAgICAhc3VwcHJlc3NFdmVudHMgJiYgdGhpcy5wYXJlbnQgJiYgX2NhbGxiYWNrKHRoaXMsIFwib25SZXBlYXRcIik7XG4gICAgICAgICAgdGhpcy52YXJzLnJlcGVhdFJlZnJlc2ggJiYgIWlzWW95byAmJiAodGhpcy5pbnZhbGlkYXRlKCkuX2xvY2sgPSAxKTtcblxuICAgICAgICAgIGlmIChwcmV2VGltZSAmJiBwcmV2VGltZSAhPT0gdGhpcy5fdGltZSB8fCBwcmV2UGF1c2VkICE9PSAhdGhpcy5fdHMgfHwgdGhpcy52YXJzLm9uUmVwZWF0ICYmICF0aGlzLnBhcmVudCAmJiAhdGhpcy5fYWN0KSB7XG4gICAgICAgICAgICAvLyBpZiBwcmV2VGltZSBpcyAwIGFuZCB3ZSByZW5kZXIgYXQgdGhlIHZlcnkgZW5kLCBfdGltZSB3aWxsIGJlIHRoZSBlbmQsIHRodXMgd29uJ3QgbWF0Y2guIFNvIGluIHRoaXMgZWRnZSBjYXNlLCBwcmV2VGltZSB3b24ndCBtYXRjaCBfdGltZSBidXQgdGhhdCdzIG9rYXkuIElmIGl0IGdldHMga2lsbGVkIGluIHRoZSBvblJlcGVhdCwgZWplY3QgYXMgd2VsbC5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGR1ciA9IHRoaXMuX2R1cjsgLy8gaW4gY2FzZSB0aGUgZHVyYXRpb24gY2hhbmdlZCBpbiB0aGUgb25SZXBlYXRcblxuICAgICAgICAgIHREdXIgPSB0aGlzLl90RHVyO1xuXG4gICAgICAgICAgaWYgKGRvZXNXcmFwKSB7XG4gICAgICAgICAgICB0aGlzLl9sb2NrID0gMjtcbiAgICAgICAgICAgIHByZXZUaW1lID0gcmV3aW5kaW5nID8gZHVyIDogLTAuMDAwMTtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyKHByZXZUaW1lLCB0cnVlKTtcbiAgICAgICAgICAgIHRoaXMudmFycy5yZXBlYXRSZWZyZXNoICYmICFpc1lveW8gJiYgdGhpcy5pbnZhbGlkYXRlKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5fbG9jayA9IDA7XG5cbiAgICAgICAgICBpZiAoIXRoaXMuX3RzICYmICFwcmV2UGF1c2VkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICB9IC8vaW4gb3JkZXIgZm9yIHlveW9FYXNlIHRvIHdvcmsgcHJvcGVybHkgd2hlbiB0aGVyZSdzIGEgc3RhZ2dlciwgd2UgbXVzdCBzd2FwIG91dCB0aGUgZWFzZSBpbiBlYWNoIHN1Yi10d2Vlbi5cblxuXG4gICAgICAgICAgX3Byb3BhZ2F0ZVlveW9FYXNlKHRoaXMsIGlzWW95byk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2hhc1BhdXNlICYmICF0aGlzLl9mb3JjaW5nICYmIHRoaXMuX2xvY2sgPCAyKSB7XG4gICAgICAgIHBhdXNlVHdlZW4gPSBfZmluZE5leHRQYXVzZVR3ZWVuKHRoaXMsIF9yb3VuZFByZWNpc2UocHJldlRpbWUpLCBfcm91bmRQcmVjaXNlKHRpbWUpKTtcblxuICAgICAgICBpZiAocGF1c2VUd2Vlbikge1xuICAgICAgICAgIHRUaW1lIC09IHRpbWUgLSAodGltZSA9IHBhdXNlVHdlZW4uX3N0YXJ0KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLl90VGltZSA9IHRUaW1lO1xuICAgICAgdGhpcy5fdGltZSA9IHRpbWU7XG4gICAgICB0aGlzLl9hY3QgPSAhdGltZVNjYWxlOyAvL2FzIGxvbmcgYXMgaXQncyBub3QgcGF1c2VkLCBmb3JjZSBpdCB0byBiZSBhY3RpdmUgc28gdGhhdCBpZiB0aGUgdXNlciByZW5kZXJzIGluZGVwZW5kZW50IG9mIHRoZSBwYXJlbnQgdGltZWxpbmUsIGl0J2xsIGJlIGZvcmNlZCB0byByZS1yZW5kZXIgb24gdGhlIG5leHQgdGljay5cblxuICAgICAgaWYgKCF0aGlzLl9pbml0dGVkKSB7XG4gICAgICAgIHRoaXMuX29uVXBkYXRlID0gdGhpcy52YXJzLm9uVXBkYXRlO1xuICAgICAgICB0aGlzLl9pbml0dGVkID0gMTtcbiAgICAgICAgdGhpcy5felRpbWUgPSB0b3RhbFRpbWU7XG4gICAgICAgIHByZXZUaW1lID0gMDsgLy8gdXBvbiBpbml0LCB0aGUgcGxheWhlYWQgc2hvdWxkIGFsd2F5cyBnbyBmb3J3YXJkOyBzb21lb25lIGNvdWxkIGludmFsaWRhdGUoKSBhIGNvbXBsZXRlZCB0aW1lbGluZSBhbmQgdGhlbiBpZiB0aGV5IHJlc3RhcnQoKSwgdGhhdCB3b3VsZCBtYWtlIGNoaWxkIHR3ZWVucyByZW5kZXIgaW4gcmV2ZXJzZSBvcmRlciB3aGljaCBjb3VsZCBsb2NrIGluIHRoZSB3cm9uZyBzdGFydGluZyB2YWx1ZXMgaWYgdGhleSBidWlsZCBvbiBlYWNoIG90aGVyLCBsaWtlIHRsLnRvKG9iaiwge3g6IDEwMH0pLnRvKG9iaiwge3g6IDB9KS5cbiAgICAgIH1cblxuICAgICAgaWYgKCFwcmV2VGltZSAmJiB0aW1lICYmICFzdXBwcmVzc0V2ZW50cyAmJiAhaXRlcmF0aW9uKSB7XG4gICAgICAgIF9jYWxsYmFjayh0aGlzLCBcIm9uU3RhcnRcIik7XG5cbiAgICAgICAgaWYgKHRoaXMuX3RUaW1lICE9PSB0VGltZSkge1xuICAgICAgICAgIC8vIGluIGNhc2UgdGhlIG9uU3RhcnQgdHJpZ2dlcmVkIGEgcmVuZGVyIGF0IGEgZGlmZmVyZW50IHNwb3QsIGVqZWN0LiBMaWtlIGlmIHNvbWVvbmUgZGlkIGFuaW1hdGlvbi5wYXVzZSgwLjUpIG9yIHNvbWV0aGluZyBpbnNpZGUgdGhlIG9uU3RhcnQuXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRpbWUgPj0gcHJldlRpbWUgJiYgdG90YWxUaW1lID49IDApIHtcbiAgICAgICAgY2hpbGQgPSB0aGlzLl9maXJzdDtcblxuICAgICAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgICAgICBuZXh0ID0gY2hpbGQuX25leHQ7XG5cbiAgICAgICAgICBpZiAoKGNoaWxkLl9hY3QgfHwgdGltZSA+PSBjaGlsZC5fc3RhcnQpICYmIGNoaWxkLl90cyAmJiBwYXVzZVR3ZWVuICE9PSBjaGlsZCkge1xuICAgICAgICAgICAgaWYgKGNoaWxkLnBhcmVudCAhPT0gdGhpcykge1xuICAgICAgICAgICAgICAvLyBhbiBleHRyZW1lIGVkZ2UgY2FzZSAtIHRoZSBjaGlsZCdzIHJlbmRlciBjb3VsZCBkbyBzb21ldGhpbmcgbGlrZSBraWxsKCkgdGhlIFwibmV4dFwiIG9uZSBpbiB0aGUgbGlua2VkIGxpc3QsIG9yIHJlcGFyZW50IGl0LiBJbiB0aGF0IGNhc2Ugd2UgbXVzdCByZS1pbml0aWF0ZSB0aGUgd2hvbGUgcmVuZGVyIHRvIGJlIHNhZmUuXG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlbmRlcih0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNoaWxkLnJlbmRlcihjaGlsZC5fdHMgPiAwID8gKHRpbWUgLSBjaGlsZC5fc3RhcnQpICogY2hpbGQuX3RzIDogKGNoaWxkLl9kaXJ0eSA/IGNoaWxkLnRvdGFsRHVyYXRpb24oKSA6IGNoaWxkLl90RHVyKSArICh0aW1lIC0gY2hpbGQuX3N0YXJ0KSAqIGNoaWxkLl90cywgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcblxuICAgICAgICAgICAgaWYgKHRpbWUgIT09IHRoaXMuX3RpbWUgfHwgIXRoaXMuX3RzICYmICFwcmV2UGF1c2VkKSB7XG4gICAgICAgICAgICAgIC8vaW4gY2FzZSBhIHR3ZWVuIHBhdXNlcyBvciBzZWVrcyB0aGUgdGltZWxpbmUgd2hlbiByZW5kZXJpbmcsIGxpa2UgaW5zaWRlIG9mIGFuIG9uVXBkYXRlL29uQ29tcGxldGVcbiAgICAgICAgICAgICAgcGF1c2VUd2VlbiA9IDA7XG4gICAgICAgICAgICAgIG5leHQgJiYgKHRUaW1lICs9IHRoaXMuX3pUaW1lID0gLV90aW55TnVtKTsgLy8gaXQgZGlkbid0IGZpbmlzaCByZW5kZXJpbmcsIHNvIGZsYWcgelRpbWUgYXMgbmVnYXRpdmUgc28gdGhhdCBzbyB0aGF0IHRoZSBuZXh0IHRpbWUgcmVuZGVyKCkgaXMgY2FsbGVkIGl0J2xsIGJlIGZvcmNlZCAodG8gcmVuZGVyIGFueSByZW1haW5pbmcgY2hpbGRyZW4pXG5cbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY2hpbGQgPSBuZXh0O1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjaGlsZCA9IHRoaXMuX2xhc3Q7XG4gICAgICAgIHZhciBhZGp1c3RlZFRpbWUgPSB0b3RhbFRpbWUgPCAwID8gdG90YWxUaW1lIDogdGltZTsgLy93aGVuIHRoZSBwbGF5aGVhZCBnb2VzIGJhY2t3YXJkIGJleW9uZCB0aGUgc3RhcnQgb2YgdGhpcyB0aW1lbGluZSwgd2UgbXVzdCBwYXNzIHRoYXQgaW5mb3JtYXRpb24gZG93biB0byB0aGUgY2hpbGQgYW5pbWF0aW9ucyBzbyB0aGF0IHplcm8tZHVyYXRpb24gdHdlZW5zIGtub3cgd2hldGhlciB0byByZW5kZXIgdGhlaXIgc3RhcnRpbmcgb3IgZW5kaW5nIHZhbHVlcy5cblxuICAgICAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgICAgICBuZXh0ID0gY2hpbGQuX3ByZXY7XG5cbiAgICAgICAgICBpZiAoKGNoaWxkLl9hY3QgfHwgYWRqdXN0ZWRUaW1lIDw9IGNoaWxkLl9lbmQpICYmIGNoaWxkLl90cyAmJiBwYXVzZVR3ZWVuICE9PSBjaGlsZCkge1xuICAgICAgICAgICAgaWYgKGNoaWxkLnBhcmVudCAhPT0gdGhpcykge1xuICAgICAgICAgICAgICAvLyBhbiBleHRyZW1lIGVkZ2UgY2FzZSAtIHRoZSBjaGlsZCdzIHJlbmRlciBjb3VsZCBkbyBzb21ldGhpbmcgbGlrZSBraWxsKCkgdGhlIFwibmV4dFwiIG9uZSBpbiB0aGUgbGlua2VkIGxpc3QsIG9yIHJlcGFyZW50IGl0LiBJbiB0aGF0IGNhc2Ugd2UgbXVzdCByZS1pbml0aWF0ZSB0aGUgd2hvbGUgcmVuZGVyIHRvIGJlIHNhZmUuXG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlbmRlcih0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNoaWxkLnJlbmRlcihjaGlsZC5fdHMgPiAwID8gKGFkanVzdGVkVGltZSAtIGNoaWxkLl9zdGFydCkgKiBjaGlsZC5fdHMgOiAoY2hpbGQuX2RpcnR5ID8gY2hpbGQudG90YWxEdXJhdGlvbigpIDogY2hpbGQuX3REdXIpICsgKGFkanVzdGVkVGltZSAtIGNoaWxkLl9zdGFydCkgKiBjaGlsZC5fdHMsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSB8fCBfcmV2ZXJ0aW5nICYmIChjaGlsZC5faW5pdHRlZCB8fCBjaGlsZC5fc3RhcnRBdCkpOyAvLyBpZiByZXZlcnRpbmcsIHdlIHNob3VsZCBhbHdheXMgZm9yY2UgcmVuZGVycyBvZiBpbml0dGVkIHR3ZWVucyAoYnV0IHJlbWVtYmVyIHRoYXQgLmZyb21UbygpIG9yIC5mcm9tKCkgbWF5IGhhdmUgYSBfc3RhcnRBdCBidXQgbm90IF9pbml0dGVkIHlldCkuIElmLCBmb3IgZXhhbXBsZSwgYSAuZnJvbVRvKCkgdHdlZW4gd2l0aCBhIHN0YWdnZXIgKHdoaWNoIGNyZWF0ZXMgYW4gaW50ZXJuYWwgdGltZWxpbmUpIGdldHMgcmV2ZXJ0ZWQgQkVGT1JFIHNvbWUgb2YgaXRzIGNoaWxkIHR3ZWVucyByZW5kZXIgZm9yIHRoZSBmaXJzdCB0aW1lLCBpdCBtYXkgbm90IHByb3Blcmx5IHRyaWdnZXIgdGhlbSB0byByZXZlcnQuXG5cbiAgICAgICAgICAgIGlmICh0aW1lICE9PSB0aGlzLl90aW1lIHx8ICF0aGlzLl90cyAmJiAhcHJldlBhdXNlZCkge1xuICAgICAgICAgICAgICAvL2luIGNhc2UgYSB0d2VlbiBwYXVzZXMgb3Igc2Vla3MgdGhlIHRpbWVsaW5lIHdoZW4gcmVuZGVyaW5nLCBsaWtlIGluc2lkZSBvZiBhbiBvblVwZGF0ZS9vbkNvbXBsZXRlXG4gICAgICAgICAgICAgIHBhdXNlVHdlZW4gPSAwO1xuICAgICAgICAgICAgICBuZXh0ICYmICh0VGltZSArPSB0aGlzLl96VGltZSA9IGFkanVzdGVkVGltZSA/IC1fdGlueU51bSA6IF90aW55TnVtKTsgLy8gaXQgZGlkbid0IGZpbmlzaCByZW5kZXJpbmcsIHNvIGFkanVzdCB6VGltZSBzbyB0aGF0IHNvIHRoYXQgdGhlIG5leHQgdGltZSByZW5kZXIoKSBpcyBjYWxsZWQgaXQnbGwgYmUgZm9yY2VkICh0byByZW5kZXIgYW55IHJlbWFpbmluZyBjaGlsZHJlbilcblxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjaGlsZCA9IG5leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHBhdXNlVHdlZW4gJiYgIXN1cHByZXNzRXZlbnRzKSB7XG4gICAgICAgIHRoaXMucGF1c2UoKTtcbiAgICAgICAgcGF1c2VUd2Vlbi5yZW5kZXIodGltZSA+PSBwcmV2VGltZSA/IDAgOiAtX3RpbnlOdW0pLl96VGltZSA9IHRpbWUgPj0gcHJldlRpbWUgPyAxIDogLTE7XG5cbiAgICAgICAgaWYgKHRoaXMuX3RzKSB7XG4gICAgICAgICAgLy90aGUgY2FsbGJhY2sgcmVzdW1lZCBwbGF5YmFjayEgU28gc2luY2Ugd2UgbWF5IGhhdmUgaGVsZCBiYWNrIHRoZSBwbGF5aGVhZCBkdWUgdG8gd2hlcmUgdGhlIHBhdXNlIGlzIHBvc2l0aW9uZWQsIGdvIGFoZWFkIGFuZCBqdW1wIHRvIHdoZXJlIGl0J3MgU1VQUE9TRUQgdG8gYmUgKGlmIG5vIHBhdXNlIGhhcHBlbmVkKS5cbiAgICAgICAgICB0aGlzLl9zdGFydCA9IHByZXZTdGFydDsgLy9pZiB0aGUgcGF1c2Ugd2FzIGF0IGFuIGVhcmxpZXIgdGltZSBhbmQgdGhlIHVzZXIgcmVzdW1lZCBpbiB0aGUgY2FsbGJhY2ssIGl0IGNvdWxkIHJlcG9zaXRpb24gdGhlIHRpbWVsaW5lIChjaGFuZ2luZyBpdHMgc3RhcnRUaW1lKSwgdGhyb3dpbmcgdGhpbmdzIG9mZiBzbGlnaHRseSwgc28gd2UgbWFrZSBzdXJlIHRoZSBfc3RhcnQgZG9lc24ndCBzaGlmdC5cblxuICAgICAgICAgIF9zZXRFbmQodGhpcyk7XG5cbiAgICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXIodG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX29uVXBkYXRlICYmICFzdXBwcmVzc0V2ZW50cyAmJiBfY2FsbGJhY2sodGhpcywgXCJvblVwZGF0ZVwiLCB0cnVlKTtcbiAgICAgIGlmICh0VGltZSA9PT0gdER1ciAmJiB0aGlzLl90VGltZSA+PSB0aGlzLnRvdGFsRHVyYXRpb24oKSB8fCAhdFRpbWUgJiYgcHJldlRpbWUpIGlmIChwcmV2U3RhcnQgPT09IHRoaXMuX3N0YXJ0IHx8IE1hdGguYWJzKHRpbWVTY2FsZSkgIT09IE1hdGguYWJzKHRoaXMuX3RzKSkgaWYgKCF0aGlzLl9sb2NrKSB7XG4gICAgICAgIC8vIHJlbWVtYmVyLCBhIGNoaWxkJ3MgY2FsbGJhY2sgbWF5IGFsdGVyIHRoaXMgdGltZWxpbmUncyBwbGF5aGVhZCBvciB0aW1lU2NhbGUgd2hpY2ggaXMgd2h5IHdlIG5lZWQgdG8gYWRkIHNvbWUgb2YgdGhlc2UgY2hlY2tzLlxuICAgICAgICAodG90YWxUaW1lIHx8ICFkdXIpICYmICh0VGltZSA9PT0gdER1ciAmJiB0aGlzLl90cyA+IDAgfHwgIXRUaW1lICYmIHRoaXMuX3RzIDwgMCkgJiYgX3JlbW92ZUZyb21QYXJlbnQodGhpcywgMSk7IC8vIGRvbid0IHJlbW92ZSBpZiB0aGUgdGltZWxpbmUgaXMgcmV2ZXJzZWQgYW5kIHRoZSBwbGF5aGVhZCBpc24ndCBhdCAwLCBvdGhlcndpc2UgdGwucHJvZ3Jlc3MoMSkucmV2ZXJzZSgpIHdvbid0IHdvcmsuIE9ubHkgcmVtb3ZlIGlmIHRoZSBwbGF5aGVhZCBpcyBhdCB0aGUgZW5kIGFuZCB0aW1lU2NhbGUgaXMgcG9zaXRpdmUsIG9yIGlmIHRoZSBwbGF5aGVhZCBpcyBhdCAwIGFuZCB0aGUgdGltZVNjYWxlIGlzIG5lZ2F0aXZlLlxuXG4gICAgICAgIGlmICghc3VwcHJlc3NFdmVudHMgJiYgISh0b3RhbFRpbWUgPCAwICYmICFwcmV2VGltZSkgJiYgKHRUaW1lIHx8IHByZXZUaW1lIHx8ICF0RHVyKSkge1xuICAgICAgICAgIF9jYWxsYmFjayh0aGlzLCB0VGltZSA9PT0gdER1ciAmJiB0b3RhbFRpbWUgPj0gMCA/IFwib25Db21wbGV0ZVwiIDogXCJvblJldmVyc2VDb21wbGV0ZVwiLCB0cnVlKTtcblxuICAgICAgICAgIHRoaXMuX3Byb20gJiYgISh0VGltZSA8IHREdXIgJiYgdGhpcy50aW1lU2NhbGUoKSA+IDApICYmIHRoaXMuX3Byb20oKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuYWRkID0gZnVuY3Rpb24gYWRkKGNoaWxkLCBwb3NpdGlvbikge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgX2lzTnVtYmVyKHBvc2l0aW9uKSB8fCAocG9zaXRpb24gPSBfcGFyc2VQb3NpdGlvbih0aGlzLCBwb3NpdGlvbiwgY2hpbGQpKTtcblxuICAgIGlmICghKGNoaWxkIGluc3RhbmNlb2YgQW5pbWF0aW9uKSkge1xuICAgICAgaWYgKF9pc0FycmF5KGNoaWxkKSkge1xuICAgICAgICBjaGlsZC5mb3JFYWNoKGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMyLmFkZChvYmosIHBvc2l0aW9uKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICBpZiAoX2lzU3RyaW5nKGNoaWxkKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5hZGRMYWJlbChjaGlsZCwgcG9zaXRpb24pO1xuICAgICAgfVxuXG4gICAgICBpZiAoX2lzRnVuY3Rpb24oY2hpbGQpKSB7XG4gICAgICAgIGNoaWxkID0gVHdlZW4uZGVsYXllZENhbGwoMCwgY2hpbGQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMgIT09IGNoaWxkID8gX2FkZFRvVGltZWxpbmUodGhpcywgY2hpbGQsIHBvc2l0aW9uKSA6IHRoaXM7IC8vZG9uJ3QgYWxsb3cgYSB0aW1lbGluZSB0byBiZSBhZGRlZCB0byBpdHNlbGYgYXMgYSBjaGlsZCFcbiAgfTtcblxuICBfcHJvdG8yLmdldENoaWxkcmVuID0gZnVuY3Rpb24gZ2V0Q2hpbGRyZW4obmVzdGVkLCB0d2VlbnMsIHRpbWVsaW5lcywgaWdub3JlQmVmb3JlVGltZSkge1xuICAgIGlmIChuZXN0ZWQgPT09IHZvaWQgMCkge1xuICAgICAgbmVzdGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAodHdlZW5zID09PSB2b2lkIDApIHtcbiAgICAgIHR3ZWVucyA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKHRpbWVsaW5lcyA9PT0gdm9pZCAwKSB7XG4gICAgICB0aW1lbGluZXMgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChpZ25vcmVCZWZvcmVUaW1lID09PSB2b2lkIDApIHtcbiAgICAgIGlnbm9yZUJlZm9yZVRpbWUgPSAtX2JpZ051bTtcbiAgICB9XG5cbiAgICB2YXIgYSA9IFtdLFxuICAgICAgICBjaGlsZCA9IHRoaXMuX2ZpcnN0O1xuXG4gICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICBpZiAoY2hpbGQuX3N0YXJ0ID49IGlnbm9yZUJlZm9yZVRpbWUpIHtcbiAgICAgICAgaWYgKGNoaWxkIGluc3RhbmNlb2YgVHdlZW4pIHtcbiAgICAgICAgICB0d2VlbnMgJiYgYS5wdXNoKGNoaWxkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aW1lbGluZXMgJiYgYS5wdXNoKGNoaWxkKTtcbiAgICAgICAgICBuZXN0ZWQgJiYgYS5wdXNoLmFwcGx5KGEsIGNoaWxkLmdldENoaWxkcmVuKHRydWUsIHR3ZWVucywgdGltZWxpbmVzKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY2hpbGQgPSBjaGlsZC5fbmV4dDtcbiAgICB9XG5cbiAgICByZXR1cm4gYTtcbiAgfTtcblxuICBfcHJvdG8yLmdldEJ5SWQgPSBmdW5jdGlvbiBnZXRCeUlkKGlkKSB7XG4gICAgdmFyIGFuaW1hdGlvbnMgPSB0aGlzLmdldENoaWxkcmVuKDEsIDEsIDEpLFxuICAgICAgICBpID0gYW5pbWF0aW9ucy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBpZiAoYW5pbWF0aW9uc1tpXS52YXJzLmlkID09PSBpZCkge1xuICAgICAgICByZXR1cm4gYW5pbWF0aW9uc1tpXTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvMi5yZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoY2hpbGQpIHtcbiAgICBpZiAoX2lzU3RyaW5nKGNoaWxkKSkge1xuICAgICAgcmV0dXJuIHRoaXMucmVtb3ZlTGFiZWwoY2hpbGQpO1xuICAgIH1cblxuICAgIGlmIChfaXNGdW5jdGlvbihjaGlsZCkpIHtcbiAgICAgIHJldHVybiB0aGlzLmtpbGxUd2VlbnNPZihjaGlsZCk7XG4gICAgfVxuXG4gICAgX3JlbW92ZUxpbmtlZExpc3RJdGVtKHRoaXMsIGNoaWxkKTtcblxuICAgIGlmIChjaGlsZCA9PT0gdGhpcy5fcmVjZW50KSB7XG4gICAgICB0aGlzLl9yZWNlbnQgPSB0aGlzLl9sYXN0O1xuICAgIH1cblxuICAgIHJldHVybiBfdW5jYWNoZSh0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8yLnRvdGFsVGltZSA9IGZ1bmN0aW9uIHRvdGFsVGltZShfdG90YWxUaW1lMiwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB0aGlzLl90VGltZTtcbiAgICB9XG5cbiAgICB0aGlzLl9mb3JjaW5nID0gMTtcblxuICAgIGlmICghdGhpcy5fZHAgJiYgdGhpcy5fdHMpIHtcbiAgICAgIC8vc3BlY2lhbCBjYXNlIGZvciB0aGUgZ2xvYmFsIHRpbWVsaW5lIChvciBhbnkgb3RoZXIgdGhhdCBoYXMgbm8gcGFyZW50IG9yIGRldGFjaGVkIHBhcmVudCkuXG4gICAgICB0aGlzLl9zdGFydCA9IF9yb3VuZFByZWNpc2UoX3RpY2tlci50aW1lIC0gKHRoaXMuX3RzID4gMCA/IF90b3RhbFRpbWUyIC8gdGhpcy5fdHMgOiAodGhpcy50b3RhbER1cmF0aW9uKCkgLSBfdG90YWxUaW1lMikgLyAtdGhpcy5fdHMpKTtcbiAgICB9XG5cbiAgICBfQW5pbWF0aW9uLnByb3RvdHlwZS50b3RhbFRpbWUuY2FsbCh0aGlzLCBfdG90YWxUaW1lMiwgc3VwcHJlc3NFdmVudHMpO1xuXG4gICAgdGhpcy5fZm9yY2luZyA9IDA7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvMi5hZGRMYWJlbCA9IGZ1bmN0aW9uIGFkZExhYmVsKGxhYmVsLCBwb3NpdGlvbikge1xuICAgIHRoaXMubGFiZWxzW2xhYmVsXSA9IF9wYXJzZVBvc2l0aW9uKHRoaXMsIHBvc2l0aW9uKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLnJlbW92ZUxhYmVsID0gZnVuY3Rpb24gcmVtb3ZlTGFiZWwobGFiZWwpIHtcbiAgICBkZWxldGUgdGhpcy5sYWJlbHNbbGFiZWxdO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuYWRkUGF1c2UgPSBmdW5jdGlvbiBhZGRQYXVzZShwb3NpdGlvbiwgY2FsbGJhY2ssIHBhcmFtcykge1xuICAgIHZhciB0ID0gVHdlZW4uZGVsYXllZENhbGwoMCwgY2FsbGJhY2sgfHwgX2VtcHR5RnVuYywgcGFyYW1zKTtcbiAgICB0LmRhdGEgPSBcImlzUGF1c2VcIjtcbiAgICB0aGlzLl9oYXNQYXVzZSA9IDE7XG4gICAgcmV0dXJuIF9hZGRUb1RpbWVsaW5lKHRoaXMsIHQsIF9wYXJzZVBvc2l0aW9uKHRoaXMsIHBvc2l0aW9uKSk7XG4gIH07XG5cbiAgX3Byb3RvMi5yZW1vdmVQYXVzZSA9IGZ1bmN0aW9uIHJlbW92ZVBhdXNlKHBvc2l0aW9uKSB7XG4gICAgdmFyIGNoaWxkID0gdGhpcy5fZmlyc3Q7XG4gICAgcG9zaXRpb24gPSBfcGFyc2VQb3NpdGlvbih0aGlzLCBwb3NpdGlvbik7XG5cbiAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgIGlmIChjaGlsZC5fc3RhcnQgPT09IHBvc2l0aW9uICYmIGNoaWxkLmRhdGEgPT09IFwiaXNQYXVzZVwiKSB7XG4gICAgICAgIF9yZW1vdmVGcm9tUGFyZW50KGNoaWxkKTtcbiAgICAgIH1cblxuICAgICAgY2hpbGQgPSBjaGlsZC5fbmV4dDtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvMi5raWxsVHdlZW5zT2YgPSBmdW5jdGlvbiBraWxsVHdlZW5zT2YodGFyZ2V0cywgcHJvcHMsIG9ubHlBY3RpdmUpIHtcbiAgICB2YXIgdHdlZW5zID0gdGhpcy5nZXRUd2VlbnNPZih0YXJnZXRzLCBvbmx5QWN0aXZlKSxcbiAgICAgICAgaSA9IHR3ZWVucy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBfb3ZlcndyaXRpbmdUd2VlbiAhPT0gdHdlZW5zW2ldICYmIHR3ZWVuc1tpXS5raWxsKHRhcmdldHMsIHByb3BzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLmdldFR3ZWVuc09mID0gZnVuY3Rpb24gZ2V0VHdlZW5zT2YodGFyZ2V0cywgb25seUFjdGl2ZSkge1xuICAgIHZhciBhID0gW10sXG4gICAgICAgIHBhcnNlZFRhcmdldHMgPSB0b0FycmF5KHRhcmdldHMpLFxuICAgICAgICBjaGlsZCA9IHRoaXMuX2ZpcnN0LFxuICAgICAgICBpc0dsb2JhbFRpbWUgPSBfaXNOdW1iZXIob25seUFjdGl2ZSksXG4gICAgICAgIC8vIGEgbnVtYmVyIGlzIGludGVycHJldGVkIGFzIGEgZ2xvYmFsIHRpbWUuIElmIHRoZSBhbmltYXRpb24gc3BhbnNcbiAgICBjaGlsZHJlbjtcblxuICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgaWYgKGNoaWxkIGluc3RhbmNlb2YgVHdlZW4pIHtcbiAgICAgICAgaWYgKF9hcnJheUNvbnRhaW5zQW55KGNoaWxkLl90YXJnZXRzLCBwYXJzZWRUYXJnZXRzKSAmJiAoaXNHbG9iYWxUaW1lID8gKCFfb3ZlcndyaXRpbmdUd2VlbiB8fCBjaGlsZC5faW5pdHRlZCAmJiBjaGlsZC5fdHMpICYmIGNoaWxkLmdsb2JhbFRpbWUoMCkgPD0gb25seUFjdGl2ZSAmJiBjaGlsZC5nbG9iYWxUaW1lKGNoaWxkLnRvdGFsRHVyYXRpb24oKSkgPiBvbmx5QWN0aXZlIDogIW9ubHlBY3RpdmUgfHwgY2hpbGQuaXNBY3RpdmUoKSkpIHtcbiAgICAgICAgICAvLyBub3RlOiBpZiB0aGlzIGlzIGZvciBvdmVyd3JpdGluZywgaXQgc2hvdWxkIG9ubHkgYmUgZm9yIHR3ZWVucyB0aGF0IGFyZW4ndCBwYXVzZWQgYW5kIGFyZSBpbml0dGVkLlxuICAgICAgICAgIGEucHVzaChjaGlsZCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoKGNoaWxkcmVuID0gY2hpbGQuZ2V0VHdlZW5zT2YocGFyc2VkVGFyZ2V0cywgb25seUFjdGl2ZSkpLmxlbmd0aCkge1xuICAgICAgICBhLnB1c2guYXBwbHkoYSwgY2hpbGRyZW4pO1xuICAgICAgfVxuXG4gICAgICBjaGlsZCA9IGNoaWxkLl9uZXh0O1xuICAgIH1cblxuICAgIHJldHVybiBhO1xuICB9IC8vIHBvdGVudGlhbCBmdXR1cmUgZmVhdHVyZSAtIHRhcmdldHMoKSBvbiB0aW1lbGluZXNcbiAgLy8gdGFyZ2V0cygpIHtcbiAgLy8gXHRsZXQgcmVzdWx0ID0gW107XG4gIC8vIFx0dGhpcy5nZXRDaGlsZHJlbih0cnVlLCB0cnVlLCBmYWxzZSkuZm9yRWFjaCh0ID0+IHJlc3VsdC5wdXNoKC4uLnQudGFyZ2V0cygpKSk7XG4gIC8vIFx0cmV0dXJuIHJlc3VsdC5maWx0ZXIoKHYsIGkpID0+IHJlc3VsdC5pbmRleE9mKHYpID09PSBpKTtcbiAgLy8gfVxuICA7XG5cbiAgX3Byb3RvMi50d2VlblRvID0gZnVuY3Rpb24gdHdlZW5Ubyhwb3NpdGlvbiwgdmFycykge1xuICAgIHZhcnMgPSB2YXJzIHx8IHt9O1xuXG4gICAgdmFyIHRsID0gdGhpcyxcbiAgICAgICAgZW5kVGltZSA9IF9wYXJzZVBvc2l0aW9uKHRsLCBwb3NpdGlvbiksXG4gICAgICAgIF92YXJzID0gdmFycyxcbiAgICAgICAgc3RhcnRBdCA9IF92YXJzLnN0YXJ0QXQsXG4gICAgICAgIF9vblN0YXJ0ID0gX3ZhcnMub25TdGFydCxcbiAgICAgICAgb25TdGFydFBhcmFtcyA9IF92YXJzLm9uU3RhcnRQYXJhbXMsXG4gICAgICAgIGltbWVkaWF0ZVJlbmRlciA9IF92YXJzLmltbWVkaWF0ZVJlbmRlcixcbiAgICAgICAgaW5pdHRlZCxcbiAgICAgICAgdHdlZW4gPSBUd2Vlbi50byh0bCwgX3NldERlZmF1bHRzKHtcbiAgICAgIGVhc2U6IHZhcnMuZWFzZSB8fCBcIm5vbmVcIixcbiAgICAgIGxhenk6IGZhbHNlLFxuICAgICAgaW1tZWRpYXRlUmVuZGVyOiBmYWxzZSxcbiAgICAgIHRpbWU6IGVuZFRpbWUsXG4gICAgICBvdmVyd3JpdGU6IFwiYXV0b1wiLFxuICAgICAgZHVyYXRpb246IHZhcnMuZHVyYXRpb24gfHwgTWF0aC5hYnMoKGVuZFRpbWUgLSAoc3RhcnRBdCAmJiBcInRpbWVcIiBpbiBzdGFydEF0ID8gc3RhcnRBdC50aW1lIDogdGwuX3RpbWUpKSAvIHRsLnRpbWVTY2FsZSgpKSB8fCBfdGlueU51bSxcbiAgICAgIG9uU3RhcnQ6IGZ1bmN0aW9uIG9uU3RhcnQoKSB7XG4gICAgICAgIHRsLnBhdXNlKCk7XG5cbiAgICAgICAgaWYgKCFpbml0dGVkKSB7XG4gICAgICAgICAgdmFyIGR1cmF0aW9uID0gdmFycy5kdXJhdGlvbiB8fCBNYXRoLmFicygoZW5kVGltZSAtIChzdGFydEF0ICYmIFwidGltZVwiIGluIHN0YXJ0QXQgPyBzdGFydEF0LnRpbWUgOiB0bC5fdGltZSkpIC8gdGwudGltZVNjYWxlKCkpO1xuICAgICAgICAgIHR3ZWVuLl9kdXIgIT09IGR1cmF0aW9uICYmIF9zZXREdXJhdGlvbih0d2VlbiwgZHVyYXRpb24sIDAsIDEpLnJlbmRlcih0d2Vlbi5fdGltZSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgaW5pdHRlZCA9IDE7XG4gICAgICAgIH1cblxuICAgICAgICBfb25TdGFydCAmJiBfb25TdGFydC5hcHBseSh0d2Vlbiwgb25TdGFydFBhcmFtcyB8fCBbXSk7IC8vaW4gY2FzZSB0aGUgdXNlciBoYWQgYW4gb25TdGFydCBpbiB0aGUgdmFycyAtIHdlIGRvbid0IHdhbnQgdG8gb3ZlcndyaXRlIGl0LlxuICAgICAgfVxuICAgIH0sIHZhcnMpKTtcblxuICAgIHJldHVybiBpbW1lZGlhdGVSZW5kZXIgPyB0d2Vlbi5yZW5kZXIoMCkgOiB0d2VlbjtcbiAgfTtcblxuICBfcHJvdG8yLnR3ZWVuRnJvbVRvID0gZnVuY3Rpb24gdHdlZW5Gcm9tVG8oZnJvbVBvc2l0aW9uLCB0b1Bvc2l0aW9uLCB2YXJzKSB7XG4gICAgcmV0dXJuIHRoaXMudHdlZW5Ubyh0b1Bvc2l0aW9uLCBfc2V0RGVmYXVsdHMoe1xuICAgICAgc3RhcnRBdDoge1xuICAgICAgICB0aW1lOiBfcGFyc2VQb3NpdGlvbih0aGlzLCBmcm9tUG9zaXRpb24pXG4gICAgICB9XG4gICAgfSwgdmFycykpO1xuICB9O1xuXG4gIF9wcm90bzIucmVjZW50ID0gZnVuY3Rpb24gcmVjZW50KCkge1xuICAgIHJldHVybiB0aGlzLl9yZWNlbnQ7XG4gIH07XG5cbiAgX3Byb3RvMi5uZXh0TGFiZWwgPSBmdW5jdGlvbiBuZXh0TGFiZWwoYWZ0ZXJUaW1lKSB7XG4gICAgaWYgKGFmdGVyVGltZSA9PT0gdm9pZCAwKSB7XG4gICAgICBhZnRlclRpbWUgPSB0aGlzLl90aW1lO1xuICAgIH1cblxuICAgIHJldHVybiBfZ2V0TGFiZWxJbkRpcmVjdGlvbih0aGlzLCBfcGFyc2VQb3NpdGlvbih0aGlzLCBhZnRlclRpbWUpKTtcbiAgfTtcblxuICBfcHJvdG8yLnByZXZpb3VzTGFiZWwgPSBmdW5jdGlvbiBwcmV2aW91c0xhYmVsKGJlZm9yZVRpbWUpIHtcbiAgICBpZiAoYmVmb3JlVGltZSA9PT0gdm9pZCAwKSB7XG4gICAgICBiZWZvcmVUaW1lID0gdGhpcy5fdGltZTtcbiAgICB9XG5cbiAgICByZXR1cm4gX2dldExhYmVsSW5EaXJlY3Rpb24odGhpcywgX3BhcnNlUG9zaXRpb24odGhpcywgYmVmb3JlVGltZSksIDEpO1xuICB9O1xuXG4gIF9wcm90bzIuY3VycmVudExhYmVsID0gZnVuY3Rpb24gY3VycmVudExhYmVsKHZhbHVlKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0aGlzLnNlZWsodmFsdWUsIHRydWUpIDogdGhpcy5wcmV2aW91c0xhYmVsKHRoaXMuX3RpbWUgKyBfdGlueU51bSk7XG4gIH07XG5cbiAgX3Byb3RvMi5zaGlmdENoaWxkcmVuID0gZnVuY3Rpb24gc2hpZnRDaGlsZHJlbihhbW91bnQsIGFkanVzdExhYmVscywgaWdub3JlQmVmb3JlVGltZSkge1xuICAgIGlmIChpZ25vcmVCZWZvcmVUaW1lID09PSB2b2lkIDApIHtcbiAgICAgIGlnbm9yZUJlZm9yZVRpbWUgPSAwO1xuICAgIH1cblxuICAgIHZhciBjaGlsZCA9IHRoaXMuX2ZpcnN0LFxuICAgICAgICBsYWJlbHMgPSB0aGlzLmxhYmVscyxcbiAgICAgICAgcDtcblxuICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgaWYgKGNoaWxkLl9zdGFydCA+PSBpZ25vcmVCZWZvcmVUaW1lKSB7XG4gICAgICAgIGNoaWxkLl9zdGFydCArPSBhbW91bnQ7XG4gICAgICAgIGNoaWxkLl9lbmQgKz0gYW1vdW50O1xuICAgICAgfVxuXG4gICAgICBjaGlsZCA9IGNoaWxkLl9uZXh0O1xuICAgIH1cblxuICAgIGlmIChhZGp1c3RMYWJlbHMpIHtcbiAgICAgIGZvciAocCBpbiBsYWJlbHMpIHtcbiAgICAgICAgaWYgKGxhYmVsc1twXSA+PSBpZ25vcmVCZWZvcmVUaW1lKSB7XG4gICAgICAgICAgbGFiZWxzW3BdICs9IGFtb3VudDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBfdW5jYWNoZSh0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8yLmludmFsaWRhdGUgPSBmdW5jdGlvbiBpbnZhbGlkYXRlKHNvZnQpIHtcbiAgICB2YXIgY2hpbGQgPSB0aGlzLl9maXJzdDtcbiAgICB0aGlzLl9sb2NrID0gMDtcblxuICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgY2hpbGQuaW52YWxpZGF0ZShzb2Z0KTtcbiAgICAgIGNoaWxkID0gY2hpbGQuX25leHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9BbmltYXRpb24ucHJvdG90eXBlLmludmFsaWRhdGUuY2FsbCh0aGlzLCBzb2Z0KTtcbiAgfTtcblxuICBfcHJvdG8yLmNsZWFyID0gZnVuY3Rpb24gY2xlYXIoaW5jbHVkZUxhYmVscykge1xuICAgIGlmIChpbmNsdWRlTGFiZWxzID09PSB2b2lkIDApIHtcbiAgICAgIGluY2x1ZGVMYWJlbHMgPSB0cnVlO1xuICAgIH1cblxuICAgIHZhciBjaGlsZCA9IHRoaXMuX2ZpcnN0LFxuICAgICAgICBuZXh0O1xuXG4gICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICBuZXh0ID0gY2hpbGQuX25leHQ7XG4gICAgICB0aGlzLnJlbW92ZShjaGlsZCk7XG4gICAgICBjaGlsZCA9IG5leHQ7XG4gICAgfVxuXG4gICAgdGhpcy5fZHAgJiYgKHRoaXMuX3RpbWUgPSB0aGlzLl90VGltZSA9IHRoaXMuX3BUaW1lID0gMCk7XG4gICAgaW5jbHVkZUxhYmVscyAmJiAodGhpcy5sYWJlbHMgPSB7fSk7XG4gICAgcmV0dXJuIF91bmNhY2hlKHRoaXMpO1xuICB9O1xuXG4gIF9wcm90bzIudG90YWxEdXJhdGlvbiA9IGZ1bmN0aW9uIHRvdGFsRHVyYXRpb24odmFsdWUpIHtcbiAgICB2YXIgbWF4ID0gMCxcbiAgICAgICAgc2VsZiA9IHRoaXMsXG4gICAgICAgIGNoaWxkID0gc2VsZi5fbGFzdCxcbiAgICAgICAgcHJldlN0YXJ0ID0gX2JpZ051bSxcbiAgICAgICAgcHJldixcbiAgICAgICAgc3RhcnQsXG4gICAgICAgIHBhcmVudDtcblxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gc2VsZi50aW1lU2NhbGUoKHNlbGYuX3JlcGVhdCA8IDAgPyBzZWxmLmR1cmF0aW9uKCkgOiBzZWxmLnRvdGFsRHVyYXRpb24oKSkgLyAoc2VsZi5yZXZlcnNlZCgpID8gLXZhbHVlIDogdmFsdWUpKTtcbiAgICB9XG5cbiAgICBpZiAoc2VsZi5fZGlydHkpIHtcbiAgICAgIHBhcmVudCA9IHNlbGYucGFyZW50O1xuXG4gICAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgICAgcHJldiA9IGNoaWxkLl9wcmV2OyAvL3JlY29yZCBpdCBoZXJlIGluIGNhc2UgdGhlIHR3ZWVuIGNoYW5nZXMgcG9zaXRpb24gaW4gdGhlIHNlcXVlbmNlLi4uXG5cbiAgICAgICAgY2hpbGQuX2RpcnR5ICYmIGNoaWxkLnRvdGFsRHVyYXRpb24oKTsgLy9jb3VsZCBjaGFuZ2UgdGhlIHR3ZWVuLl9zdGFydFRpbWUsIHNvIG1ha2Ugc3VyZSB0aGUgYW5pbWF0aW9uJ3MgY2FjaGUgaXMgY2xlYW4gYmVmb3JlIGFuYWx5emluZyBpdC5cblxuICAgICAgICBzdGFydCA9IGNoaWxkLl9zdGFydDtcblxuICAgICAgICBpZiAoc3RhcnQgPiBwcmV2U3RhcnQgJiYgc2VsZi5fc29ydCAmJiBjaGlsZC5fdHMgJiYgIXNlbGYuX2xvY2spIHtcbiAgICAgICAgICAvL2luIGNhc2Ugb25lIG9mIHRoZSB0d2VlbnMgc2hpZnRlZCBvdXQgb2Ygb3JkZXIsIGl0IG5lZWRzIHRvIGJlIHJlLWluc2VydGVkIGludG8gdGhlIGNvcnJlY3QgcG9zaXRpb24gaW4gdGhlIHNlcXVlbmNlXG4gICAgICAgICAgc2VsZi5fbG9jayA9IDE7IC8vcHJldmVudCBlbmRsZXNzIHJlY3Vyc2l2ZSBjYWxscyAtIHRoZXJlIGFyZSBtZXRob2RzIHRoYXQgZ2V0IHRyaWdnZXJlZCB0aGF0IGNoZWNrIGR1cmF0aW9uL3RvdGFsRHVyYXRpb24gd2hlbiB3ZSBhZGQoKS5cblxuICAgICAgICAgIF9hZGRUb1RpbWVsaW5lKHNlbGYsIGNoaWxkLCBzdGFydCAtIGNoaWxkLl9kZWxheSwgMSkuX2xvY2sgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByZXZTdGFydCA9IHN0YXJ0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0YXJ0IDwgMCAmJiBjaGlsZC5fdHMpIHtcbiAgICAgICAgICAvL2NoaWxkcmVuIGFyZW4ndCBhbGxvd2VkIHRvIGhhdmUgbmVnYXRpdmUgc3RhcnRUaW1lcyB1bmxlc3Mgc21vb3RoQ2hpbGRUaW1pbmcgaXMgdHJ1ZSwgc28gYWRqdXN0IGhlcmUgaWYgb25lIGlzIGZvdW5kLlxuICAgICAgICAgIG1heCAtPSBzdGFydDtcblxuICAgICAgICAgIGlmICghcGFyZW50ICYmICFzZWxmLl9kcCB8fCBwYXJlbnQgJiYgcGFyZW50LnNtb290aENoaWxkVGltaW5nKSB7XG4gICAgICAgICAgICBzZWxmLl9zdGFydCArPSBzdGFydCAvIHNlbGYuX3RzO1xuICAgICAgICAgICAgc2VsZi5fdGltZSAtPSBzdGFydDtcbiAgICAgICAgICAgIHNlbGYuX3RUaW1lIC09IHN0YXJ0O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHNlbGYuc2hpZnRDaGlsZHJlbigtc3RhcnQsIGZhbHNlLCAtMWU5OTkpO1xuICAgICAgICAgIHByZXZTdGFydCA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBjaGlsZC5fZW5kID4gbWF4ICYmIGNoaWxkLl90cyAmJiAobWF4ID0gY2hpbGQuX2VuZCk7XG4gICAgICAgIGNoaWxkID0gcHJldjtcbiAgICAgIH1cblxuICAgICAgX3NldER1cmF0aW9uKHNlbGYsIHNlbGYgPT09IF9nbG9iYWxUaW1lbGluZSAmJiBzZWxmLl90aW1lID4gbWF4ID8gc2VsZi5fdGltZSA6IG1heCwgMSwgMSk7XG5cbiAgICAgIHNlbGYuX2RpcnR5ID0gMDtcbiAgICB9XG5cbiAgICByZXR1cm4gc2VsZi5fdER1cjtcbiAgfTtcblxuICBUaW1lbGluZS51cGRhdGVSb290ID0gZnVuY3Rpb24gdXBkYXRlUm9vdCh0aW1lKSB7XG4gICAgaWYgKF9nbG9iYWxUaW1lbGluZS5fdHMpIHtcbiAgICAgIF9sYXp5U2FmZVJlbmRlcihfZ2xvYmFsVGltZWxpbmUsIF9wYXJlbnRUb0NoaWxkVG90YWxUaW1lKHRpbWUsIF9nbG9iYWxUaW1lbGluZSkpO1xuXG4gICAgICBfbGFzdFJlbmRlcmVkRnJhbWUgPSBfdGlja2VyLmZyYW1lO1xuICAgIH1cblxuICAgIGlmIChfdGlja2VyLmZyYW1lID49IF9uZXh0R0NGcmFtZSkge1xuICAgICAgX25leHRHQ0ZyYW1lICs9IF9jb25maWcuYXV0b1NsZWVwIHx8IDEyMDtcbiAgICAgIHZhciBjaGlsZCA9IF9nbG9iYWxUaW1lbGluZS5fZmlyc3Q7XG4gICAgICBpZiAoIWNoaWxkIHx8ICFjaGlsZC5fdHMpIGlmIChfY29uZmlnLmF1dG9TbGVlcCAmJiBfdGlja2VyLl9saXN0ZW5lcnMubGVuZ3RoIDwgMikge1xuICAgICAgICB3aGlsZSAoY2hpbGQgJiYgIWNoaWxkLl90cykge1xuICAgICAgICAgIGNoaWxkID0gY2hpbGQuX25leHQ7XG4gICAgICAgIH1cblxuICAgICAgICBjaGlsZCB8fCBfdGlja2VyLnNsZWVwKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBUaW1lbGluZTtcbn0oQW5pbWF0aW9uKTtcblxuX3NldERlZmF1bHRzKFRpbWVsaW5lLnByb3RvdHlwZSwge1xuICBfbG9jazogMCxcbiAgX2hhc1BhdXNlOiAwLFxuICBfZm9yY2luZzogMFxufSk7XG5cbnZhciBfYWRkQ29tcGxleFN0cmluZ1Byb3BUd2VlbiA9IGZ1bmN0aW9uIF9hZGRDb21wbGV4U3RyaW5nUHJvcFR3ZWVuKHRhcmdldCwgcHJvcCwgc3RhcnQsIGVuZCwgc2V0dGVyLCBzdHJpbmdGaWx0ZXIsIGZ1bmNQYXJhbSkge1xuICAvL25vdGU6IHdlIGNhbGwgX2FkZENvbXBsZXhTdHJpbmdQcm9wVHdlZW4uY2FsbCh0d2Vlbkluc3RhbmNlLi4uKSB0byBlbnN1cmUgdGhhdCBpdCdzIHNjb3BlZCBwcm9wZXJseS4gV2UgbWF5IGNhbGwgaXQgZnJvbSB3aXRoaW4gYSBwbHVnaW4gdG9vLCB0aHVzIFwidGhpc1wiIHdvdWxkIHJlZmVyIHRvIHRoZSBwbHVnaW4uXG4gIHZhciBwdCA9IG5ldyBQcm9wVHdlZW4odGhpcy5fcHQsIHRhcmdldCwgcHJvcCwgMCwgMSwgX3JlbmRlckNvbXBsZXhTdHJpbmcsIG51bGwsIHNldHRlciksXG4gICAgICBpbmRleCA9IDAsXG4gICAgICBtYXRjaEluZGV4ID0gMCxcbiAgICAgIHJlc3VsdCxcbiAgICAgIHN0YXJ0TnVtcyxcbiAgICAgIGNvbG9yLFxuICAgICAgZW5kTnVtLFxuICAgICAgY2h1bmssXG4gICAgICBzdGFydE51bSxcbiAgICAgIGhhc1JhbmRvbSxcbiAgICAgIGE7XG4gIHB0LmIgPSBzdGFydDtcbiAgcHQuZSA9IGVuZDtcbiAgc3RhcnQgKz0gXCJcIjsgLy9lbnN1cmUgdmFsdWVzIGFyZSBzdHJpbmdzXG5cbiAgZW5kICs9IFwiXCI7XG5cbiAgaWYgKGhhc1JhbmRvbSA9IH5lbmQuaW5kZXhPZihcInJhbmRvbShcIikpIHtcbiAgICBlbmQgPSBfcmVwbGFjZVJhbmRvbShlbmQpO1xuICB9XG5cbiAgaWYgKHN0cmluZ0ZpbHRlcikge1xuICAgIGEgPSBbc3RhcnQsIGVuZF07XG4gICAgc3RyaW5nRmlsdGVyKGEsIHRhcmdldCwgcHJvcCk7IC8vcGFzcyBhbiBhcnJheSB3aXRoIHRoZSBzdGFydGluZyBhbmQgZW5kaW5nIHZhbHVlcyBhbmQgbGV0IHRoZSBmaWx0ZXIgZG8gd2hhdGV2ZXIgaXQgbmVlZHMgdG8gdGhlIHZhbHVlcy5cblxuICAgIHN0YXJ0ID0gYVswXTtcbiAgICBlbmQgPSBhWzFdO1xuICB9XG5cbiAgc3RhcnROdW1zID0gc3RhcnQubWF0Y2goX2NvbXBsZXhTdHJpbmdOdW1FeHApIHx8IFtdO1xuXG4gIHdoaWxlIChyZXN1bHQgPSBfY29tcGxleFN0cmluZ051bUV4cC5leGVjKGVuZCkpIHtcbiAgICBlbmROdW0gPSByZXN1bHRbMF07XG4gICAgY2h1bmsgPSBlbmQuc3Vic3RyaW5nKGluZGV4LCByZXN1bHQuaW5kZXgpO1xuXG4gICAgaWYgKGNvbG9yKSB7XG4gICAgICBjb2xvciA9IChjb2xvciArIDEpICUgNTtcbiAgICB9IGVsc2UgaWYgKGNodW5rLnN1YnN0cigtNSkgPT09IFwicmdiYShcIikge1xuICAgICAgY29sb3IgPSAxO1xuICAgIH1cblxuICAgIGlmIChlbmROdW0gIT09IHN0YXJ0TnVtc1ttYXRjaEluZGV4KytdKSB7XG4gICAgICBzdGFydE51bSA9IHBhcnNlRmxvYXQoc3RhcnROdW1zW21hdGNoSW5kZXggLSAxXSkgfHwgMDsgLy90aGVzZSBuZXN0ZWQgUHJvcFR3ZWVucyBhcmUgaGFuZGxlZCBpbiBhIHNwZWNpYWwgd2F5IC0gd2UnbGwgbmV2ZXIgYWN0dWFsbHkgY2FsbCBhIHJlbmRlciBvciBzZXR0ZXIgbWV0aG9kIG9uIHRoZW0uIFdlJ2xsIGp1c3QgbG9vcCB0aHJvdWdoIHRoZW0gaW4gdGhlIHBhcmVudCBjb21wbGV4IHN0cmluZyBQcm9wVHdlZW4ncyByZW5kZXIgbWV0aG9kLlxuXG4gICAgICBwdC5fcHQgPSB7XG4gICAgICAgIF9uZXh0OiBwdC5fcHQsXG4gICAgICAgIHA6IGNodW5rIHx8IG1hdGNoSW5kZXggPT09IDEgPyBjaHVuayA6IFwiLFwiLFxuICAgICAgICAvL25vdGU6IFNWRyBzcGVjIGFsbG93cyBvbWlzc2lvbiBvZiBjb21tYS9zcGFjZSB3aGVuIGEgbmVnYXRpdmUgc2lnbiBpcyB3ZWRnZWQgYmV0d2VlbiB0d28gbnVtYmVycywgbGlrZSAyLjUtNS4zIGluc3RlYWQgb2YgMi41LC01LjMgYnV0IHdoZW4gdHdlZW5pbmcsIHRoZSBuZWdhdGl2ZSB2YWx1ZSBtYXkgc3dpdGNoIHRvIHBvc2l0aXZlLCBzbyB3ZSBpbnNlcnQgdGhlIGNvbW1hIGp1c3QgaW4gY2FzZS5cbiAgICAgICAgczogc3RhcnROdW0sXG4gICAgICAgIGM6IGVuZE51bS5jaGFyQXQoMSkgPT09IFwiPVwiID8gX3BhcnNlUmVsYXRpdmUoc3RhcnROdW0sIGVuZE51bSkgLSBzdGFydE51bSA6IHBhcnNlRmxvYXQoZW5kTnVtKSAtIHN0YXJ0TnVtLFxuICAgICAgICBtOiBjb2xvciAmJiBjb2xvciA8IDQgPyBNYXRoLnJvdW5kIDogMFxuICAgICAgfTtcbiAgICAgIGluZGV4ID0gX2NvbXBsZXhTdHJpbmdOdW1FeHAubGFzdEluZGV4O1xuICAgIH1cbiAgfVxuXG4gIHB0LmMgPSBpbmRleCA8IGVuZC5sZW5ndGggPyBlbmQuc3Vic3RyaW5nKGluZGV4LCBlbmQubGVuZ3RoKSA6IFwiXCI7IC8vd2UgdXNlIHRoZSBcImNcIiBvZiB0aGUgUHJvcFR3ZWVuIHRvIHN0b3JlIHRoZSBmaW5hbCBwYXJ0IG9mIHRoZSBzdHJpbmcgKGFmdGVyIHRoZSBsYXN0IG51bWJlcilcblxuICBwdC5mcCA9IGZ1bmNQYXJhbTtcblxuICBpZiAoX3JlbEV4cC50ZXN0KGVuZCkgfHwgaGFzUmFuZG9tKSB7XG4gICAgcHQuZSA9IDA7IC8vaWYgdGhlIGVuZCBzdHJpbmcgY29udGFpbnMgcmVsYXRpdmUgdmFsdWVzIG9yIGR5bmFtaWMgcmFuZG9tKC4uLikgdmFsdWVzLCBkZWxldGUgdGhlIGVuZCBpdCBzbyB0aGF0IG9uIHRoZSBmaW5hbCByZW5kZXIgd2UgZG9uJ3QgYWN0dWFsbHkgc2V0IGl0IHRvIHRoZSBzdHJpbmcgd2l0aCArPSBvciAtPSBjaGFyYWN0ZXJzIChmb3JjZXMgaXQgdG8gdXNlIHRoZSBjYWxjdWxhdGVkIHZhbHVlKS5cbiAgfVxuXG4gIHRoaXMuX3B0ID0gcHQ7IC8vc3RhcnQgdGhlIGxpbmtlZCBsaXN0IHdpdGggdGhpcyBuZXcgUHJvcFR3ZWVuLiBSZW1lbWJlciwgd2UgY2FsbCBfYWRkQ29tcGxleFN0cmluZ1Byb3BUd2Vlbi5jYWxsKHR3ZWVuSW5zdGFuY2UuLi4pIHRvIGVuc3VyZSB0aGF0IGl0J3Mgc2NvcGVkIHByb3Blcmx5LiBXZSBtYXkgY2FsbCBpdCBmcm9tIHdpdGhpbiBhIHBsdWdpbiB0b28sIHRodXMgXCJ0aGlzXCIgd291bGQgcmVmZXIgdG8gdGhlIHBsdWdpbi5cblxuICByZXR1cm4gcHQ7XG59LFxuICAgIF9hZGRQcm9wVHdlZW4gPSBmdW5jdGlvbiBfYWRkUHJvcFR3ZWVuKHRhcmdldCwgcHJvcCwgc3RhcnQsIGVuZCwgaW5kZXgsIHRhcmdldHMsIG1vZGlmaWVyLCBzdHJpbmdGaWx0ZXIsIGZ1bmNQYXJhbSwgb3B0aW9uYWwpIHtcbiAgX2lzRnVuY3Rpb24oZW5kKSAmJiAoZW5kID0gZW5kKGluZGV4IHx8IDAsIHRhcmdldCwgdGFyZ2V0cykpO1xuICB2YXIgY3VycmVudFZhbHVlID0gdGFyZ2V0W3Byb3BdLFxuICAgICAgcGFyc2VkU3RhcnQgPSBzdGFydCAhPT0gXCJnZXRcIiA/IHN0YXJ0IDogIV9pc0Z1bmN0aW9uKGN1cnJlbnRWYWx1ZSkgPyBjdXJyZW50VmFsdWUgOiBmdW5jUGFyYW0gPyB0YXJnZXRbcHJvcC5pbmRleE9mKFwic2V0XCIpIHx8ICFfaXNGdW5jdGlvbih0YXJnZXRbXCJnZXRcIiArIHByb3Auc3Vic3RyKDMpXSkgPyBwcm9wIDogXCJnZXRcIiArIHByb3Auc3Vic3RyKDMpXShmdW5jUGFyYW0pIDogdGFyZ2V0W3Byb3BdKCksXG4gICAgICBzZXR0ZXIgPSAhX2lzRnVuY3Rpb24oY3VycmVudFZhbHVlKSA/IF9zZXR0ZXJQbGFpbiA6IGZ1bmNQYXJhbSA/IF9zZXR0ZXJGdW5jV2l0aFBhcmFtIDogX3NldHRlckZ1bmMsXG4gICAgICBwdDtcblxuICBpZiAoX2lzU3RyaW5nKGVuZCkpIHtcbiAgICBpZiAofmVuZC5pbmRleE9mKFwicmFuZG9tKFwiKSkge1xuICAgICAgZW5kID0gX3JlcGxhY2VSYW5kb20oZW5kKTtcbiAgICB9XG5cbiAgICBpZiAoZW5kLmNoYXJBdCgxKSA9PT0gXCI9XCIpIHtcbiAgICAgIHB0ID0gX3BhcnNlUmVsYXRpdmUocGFyc2VkU3RhcnQsIGVuZCkgKyAoZ2V0VW5pdChwYXJzZWRTdGFydCkgfHwgMCk7XG5cbiAgICAgIGlmIChwdCB8fCBwdCA9PT0gMCkge1xuICAgICAgICAvLyB0byBhdm9pZCBpc05hTiwgbGlrZSBpZiBzb21lb25lIHBhc3NlcyBpbiBhIHZhbHVlIGxpa2UgXCIhPSB3aGF0ZXZlclwiXG4gICAgICAgIGVuZCA9IHB0O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmICghb3B0aW9uYWwgfHwgcGFyc2VkU3RhcnQgIT09IGVuZCB8fCBfZm9yY2VBbGxQcm9wVHdlZW5zKSB7XG4gICAgaWYgKCFpc05hTihwYXJzZWRTdGFydCAqIGVuZCkgJiYgZW5kICE9PSBcIlwiKSB7XG4gICAgICAvLyBmdW4gZmFjdDogYW55IG51bWJlciBtdWx0aXBsaWVkIGJ5IFwiXCIgaXMgZXZhbHVhdGVkIGFzIHRoZSBudW1iZXIgMCFcbiAgICAgIHB0ID0gbmV3IFByb3BUd2Vlbih0aGlzLl9wdCwgdGFyZ2V0LCBwcm9wLCArcGFyc2VkU3RhcnQgfHwgMCwgZW5kIC0gKHBhcnNlZFN0YXJ0IHx8IDApLCB0eXBlb2YgY3VycmVudFZhbHVlID09PSBcImJvb2xlYW5cIiA/IF9yZW5kZXJCb29sZWFuIDogX3JlbmRlclBsYWluLCAwLCBzZXR0ZXIpO1xuICAgICAgZnVuY1BhcmFtICYmIChwdC5mcCA9IGZ1bmNQYXJhbSk7XG4gICAgICBtb2RpZmllciAmJiBwdC5tb2RpZmllcihtb2RpZmllciwgdGhpcywgdGFyZ2V0KTtcbiAgICAgIHJldHVybiB0aGlzLl9wdCA9IHB0O1xuICAgIH1cblxuICAgICFjdXJyZW50VmFsdWUgJiYgIShwcm9wIGluIHRhcmdldCkgJiYgX21pc3NpbmdQbHVnaW4ocHJvcCwgZW5kKTtcbiAgICByZXR1cm4gX2FkZENvbXBsZXhTdHJpbmdQcm9wVHdlZW4uY2FsbCh0aGlzLCB0YXJnZXQsIHByb3AsIHBhcnNlZFN0YXJ0LCBlbmQsIHNldHRlciwgc3RyaW5nRmlsdGVyIHx8IF9jb25maWcuc3RyaW5nRmlsdGVyLCBmdW5jUGFyYW0pO1xuICB9XG59LFxuICAgIC8vY3JlYXRlcyBhIGNvcHkgb2YgdGhlIHZhcnMgb2JqZWN0IGFuZCBwcm9jZXNzZXMgYW55IGZ1bmN0aW9uLWJhc2VkIHZhbHVlcyAocHV0dGluZyB0aGUgcmVzdWx0aW5nIHZhbHVlcyBkaXJlY3RseSBpbnRvIHRoZSBjb3B5KSBhcyB3ZWxsIGFzIHN0cmluZ3Mgd2l0aCBcInJhbmRvbSgpXCIgaW4gdGhlbS4gSXQgZG9lcyBOT1QgcHJvY2VzcyByZWxhdGl2ZSB2YWx1ZXMuXG5fcHJvY2Vzc1ZhcnMgPSBmdW5jdGlvbiBfcHJvY2Vzc1ZhcnModmFycywgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cywgdHdlZW4pIHtcbiAgX2lzRnVuY3Rpb24odmFycykgJiYgKHZhcnMgPSBfcGFyc2VGdW5jT3JTdHJpbmcodmFycywgdHdlZW4sIGluZGV4LCB0YXJnZXQsIHRhcmdldHMpKTtcblxuICBpZiAoIV9pc09iamVjdCh2YXJzKSB8fCB2YXJzLnN0eWxlICYmIHZhcnMubm9kZVR5cGUgfHwgX2lzQXJyYXkodmFycykgfHwgX2lzVHlwZWRBcnJheSh2YXJzKSkge1xuICAgIHJldHVybiBfaXNTdHJpbmcodmFycykgPyBfcGFyc2VGdW5jT3JTdHJpbmcodmFycywgdHdlZW4sIGluZGV4LCB0YXJnZXQsIHRhcmdldHMpIDogdmFycztcbiAgfVxuXG4gIHZhciBjb3B5ID0ge30sXG4gICAgICBwO1xuXG4gIGZvciAocCBpbiB2YXJzKSB7XG4gICAgY29weVtwXSA9IF9wYXJzZUZ1bmNPclN0cmluZyh2YXJzW3BdLCB0d2VlbiwgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cyk7XG4gIH1cblxuICByZXR1cm4gY29weTtcbn0sXG4gICAgX2NoZWNrUGx1Z2luID0gZnVuY3Rpb24gX2NoZWNrUGx1Z2luKHByb3BlcnR5LCB2YXJzLCB0d2VlbiwgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cykge1xuICB2YXIgcGx1Z2luLCBwdCwgcHRMb29rdXAsIGk7XG5cbiAgaWYgKF9wbHVnaW5zW3Byb3BlcnR5XSAmJiAocGx1Z2luID0gbmV3IF9wbHVnaW5zW3Byb3BlcnR5XSgpKS5pbml0KHRhcmdldCwgcGx1Z2luLnJhd1ZhcnMgPyB2YXJzW3Byb3BlcnR5XSA6IF9wcm9jZXNzVmFycyh2YXJzW3Byb3BlcnR5XSwgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cywgdHdlZW4pLCB0d2VlbiwgaW5kZXgsIHRhcmdldHMpICE9PSBmYWxzZSkge1xuICAgIHR3ZWVuLl9wdCA9IHB0ID0gbmV3IFByb3BUd2Vlbih0d2Vlbi5fcHQsIHRhcmdldCwgcHJvcGVydHksIDAsIDEsIHBsdWdpbi5yZW5kZXIsIHBsdWdpbiwgMCwgcGx1Z2luLnByaW9yaXR5KTtcblxuICAgIGlmICh0d2VlbiAhPT0gX3F1aWNrVHdlZW4pIHtcbiAgICAgIHB0TG9va3VwID0gdHdlZW4uX3B0TG9va3VwW3R3ZWVuLl90YXJnZXRzLmluZGV4T2YodGFyZ2V0KV07IC8vbm90ZTogd2UgY2FuJ3QgdXNlIHR3ZWVuLl9wdExvb2t1cFtpbmRleF0gYmVjYXVzZSBmb3Igc3RhZ2dlcmVkIHR3ZWVucywgdGhlIGluZGV4IGZyb20gdGhlIGZ1bGxUYXJnZXRzIGFycmF5IHdvbid0IG1hdGNoIHdoYXQgaXQgaXMgaW4gZWFjaCBpbmRpdmlkdWFsIHR3ZWVuIHRoYXQgc3Bhd25zIGZyb20gdGhlIHN0YWdnZXIuXG5cbiAgICAgIGkgPSBwbHVnaW4uX3Byb3BzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICBwdExvb2t1cFtwbHVnaW4uX3Byb3BzW2ldXSA9IHB0O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwbHVnaW47XG59LFxuICAgIF9vdmVyd3JpdGluZ1R3ZWVuLFxuICAgIC8vc3RvcmUgYSByZWZlcmVuY2UgdGVtcG9yYXJpbHkgc28gd2UgY2FuIGF2b2lkIG92ZXJ3cml0aW5nIGl0c2VsZi5cbl9mb3JjZUFsbFByb3BUd2VlbnMsXG4gICAgX2luaXRUd2VlbiA9IGZ1bmN0aW9uIF9pbml0VHdlZW4odHdlZW4sIHRpbWUsIHRUaW1lKSB7XG4gIHZhciB2YXJzID0gdHdlZW4udmFycyxcbiAgICAgIGVhc2UgPSB2YXJzLmVhc2UsXG4gICAgICBzdGFydEF0ID0gdmFycy5zdGFydEF0LFxuICAgICAgaW1tZWRpYXRlUmVuZGVyID0gdmFycy5pbW1lZGlhdGVSZW5kZXIsXG4gICAgICBsYXp5ID0gdmFycy5sYXp5LFxuICAgICAgb25VcGRhdGUgPSB2YXJzLm9uVXBkYXRlLFxuICAgICAgcnVuQmFja3dhcmRzID0gdmFycy5ydW5CYWNrd2FyZHMsXG4gICAgICB5b3lvRWFzZSA9IHZhcnMueW95b0Vhc2UsXG4gICAgICBrZXlmcmFtZXMgPSB2YXJzLmtleWZyYW1lcyxcbiAgICAgIGF1dG9SZXZlcnQgPSB2YXJzLmF1dG9SZXZlcnQsXG4gICAgICBkdXIgPSB0d2Vlbi5fZHVyLFxuICAgICAgcHJldlN0YXJ0QXQgPSB0d2Vlbi5fc3RhcnRBdCxcbiAgICAgIHRhcmdldHMgPSB0d2Vlbi5fdGFyZ2V0cyxcbiAgICAgIHBhcmVudCA9IHR3ZWVuLnBhcmVudCxcbiAgICAgIGZ1bGxUYXJnZXRzID0gcGFyZW50ICYmIHBhcmVudC5kYXRhID09PSBcIm5lc3RlZFwiID8gcGFyZW50LnZhcnMudGFyZ2V0cyA6IHRhcmdldHMsXG4gICAgICBhdXRvT3ZlcndyaXRlID0gdHdlZW4uX292ZXJ3cml0ZSA9PT0gXCJhdXRvXCIgJiYgIV9zdXBwcmVzc092ZXJ3cml0ZXMsXG4gICAgICB0bCA9IHR3ZWVuLnRpbWVsaW5lLFxuICAgICAgY2xlYW5WYXJzLFxuICAgICAgaSxcbiAgICAgIHAsXG4gICAgICBwdCxcbiAgICAgIHRhcmdldCxcbiAgICAgIGhhc1ByaW9yaXR5LFxuICAgICAgZ3NEYXRhLFxuICAgICAgaGFybmVzcyxcbiAgICAgIHBsdWdpbixcbiAgICAgIHB0TG9va3VwLFxuICAgICAgaW5kZXgsXG4gICAgICBoYXJuZXNzVmFycyxcbiAgICAgIG92ZXJ3cml0dGVuO1xuICB0bCAmJiAoIWtleWZyYW1lcyB8fCAhZWFzZSkgJiYgKGVhc2UgPSBcIm5vbmVcIik7XG4gIHR3ZWVuLl9lYXNlID0gX3BhcnNlRWFzZShlYXNlLCBfZGVmYXVsdHMuZWFzZSk7XG4gIHR3ZWVuLl95RWFzZSA9IHlveW9FYXNlID8gX2ludmVydEVhc2UoX3BhcnNlRWFzZSh5b3lvRWFzZSA9PT0gdHJ1ZSA/IGVhc2UgOiB5b3lvRWFzZSwgX2RlZmF1bHRzLmVhc2UpKSA6IDA7XG5cbiAgaWYgKHlveW9FYXNlICYmIHR3ZWVuLl95b3lvICYmICF0d2Vlbi5fcmVwZWF0KSB7XG4gICAgLy90aGVyZSBtdXN0IGhhdmUgYmVlbiBhIHBhcmVudCB0aW1lbGluZSB3aXRoIHlveW86dHJ1ZSB0aGF0IGlzIGN1cnJlbnRseSBpbiBpdHMgeW95byBwaGFzZSwgc28gZmxpcCB0aGUgZWFzZXMuXG4gICAgeW95b0Vhc2UgPSB0d2Vlbi5feUVhc2U7XG4gICAgdHdlZW4uX3lFYXNlID0gdHdlZW4uX2Vhc2U7XG4gICAgdHdlZW4uX2Vhc2UgPSB5b3lvRWFzZTtcbiAgfVxuXG4gIHR3ZWVuLl9mcm9tID0gIXRsICYmICEhdmFycy5ydW5CYWNrd2FyZHM7IC8vbmVzdGVkIHRpbWVsaW5lcyBzaG91bGQgbmV2ZXIgcnVuIGJhY2t3YXJkcyAtIHRoZSBiYWNrd2FyZHMtbmVzcyBpcyBpbiB0aGUgY2hpbGQgdHdlZW5zLlxuXG4gIGlmICghdGwgfHwga2V5ZnJhbWVzICYmICF2YXJzLnN0YWdnZXIpIHtcbiAgICAvL2lmIHRoZXJlJ3MgYW4gaW50ZXJuYWwgdGltZWxpbmUsIHNraXAgYWxsIHRoZSBwYXJzaW5nIGJlY2F1c2Ugd2UgcGFzc2VkIHRoYXQgdGFzayBkb3duIHRoZSBjaGFpbi5cbiAgICBoYXJuZXNzID0gdGFyZ2V0c1swXSA/IF9nZXRDYWNoZSh0YXJnZXRzWzBdKS5oYXJuZXNzIDogMDtcbiAgICBoYXJuZXNzVmFycyA9IGhhcm5lc3MgJiYgdmFyc1toYXJuZXNzLnByb3BdOyAvL3NvbWVvbmUgbWF5IG5lZWQgdG8gc3BlY2lmeSBDU1Mtc3BlY2lmaWMgdmFsdWVzIEFORCBub24tQ1NTIHZhbHVlcywgbGlrZSBpZiB0aGUgZWxlbWVudCBoYXMgYW4gXCJ4XCIgcHJvcGVydHkgcGx1cyBpdCdzIGEgc3RhbmRhcmQgRE9NIGVsZW1lbnQuIFdlIGFsbG93IHBlb3BsZSB0byBkaXN0aW5ndWlzaCBieSB3cmFwcGluZyBwbHVnaW4tc3BlY2lmaWMgc3R1ZmYgaW4gYSBjc3M6e30gb2JqZWN0IGZvciBleGFtcGxlLlxuXG4gICAgY2xlYW5WYXJzID0gX2NvcHlFeGNsdWRpbmcodmFycywgX3Jlc2VydmVkUHJvcHMpO1xuXG4gICAgaWYgKHByZXZTdGFydEF0KSB7XG4gICAgICBwcmV2U3RhcnRBdC5felRpbWUgPCAwICYmIHByZXZTdGFydEF0LnByb2dyZXNzKDEpOyAvLyBpbiBjYXNlIGl0J3MgYSBsYXp5IHN0YXJ0QXQgdGhhdCBoYXNuJ3QgcmVuZGVyZWQgeWV0LlxuXG4gICAgICB0aW1lIDwgMCAmJiBydW5CYWNrd2FyZHMgJiYgaW1tZWRpYXRlUmVuZGVyICYmICFhdXRvUmV2ZXJ0ID8gcHJldlN0YXJ0QXQucmVuZGVyKC0xLCB0cnVlKSA6IHByZXZTdGFydEF0LnJldmVydChydW5CYWNrd2FyZHMgJiYgZHVyID8gX3JldmVydENvbmZpZ05vS2lsbCA6IF9zdGFydEF0UmV2ZXJ0Q29uZmlnKTsgLy8gaWYgaXQncyBhIFwic3RhcnRBdFwiIChub3QgXCJmcm9tKClcIiBvciBydW5CYWNrd2FyZHM6IHRydWUpLCB3ZSBvbmx5IG5lZWQgdG8gZG8gYSBzaGFsbG93IHJldmVydCAoa2VlcCB0cmFuc2Zvcm1zIGNhY2hlZCBpbiBDU1NQbHVnaW4pXG4gICAgICAvLyBkb24ndCBqdXN0IF9yZW1vdmVGcm9tUGFyZW50KHByZXZTdGFydEF0LnJlbmRlcigtMSwgdHJ1ZSkpIGJlY2F1c2UgdGhhdCdsbCBsZWF2ZSBpbmxpbmUgc3R5bGVzLiBXZSdyZSBjcmVhdGluZyBhIG5ldyBfc3RhcnRBdCBmb3IgXCJzdGFydEF0XCIgdHdlZW5zIHRoYXQgcmUtY2FwdHVyZSB0aGluZ3MgdG8gZW5zdXJlIHRoYXQgaWYgdGhlIHByZS10d2VlbiB2YWx1ZXMgY2hhbmdlZCBzaW5jZSB0aGUgdHdlZW4gd2FzIGNyZWF0ZWQsIHRoZXkncmUgcmVjb3JkZWQuXG5cbiAgICAgIHByZXZTdGFydEF0Ll9sYXp5ID0gMDtcbiAgICB9XG5cbiAgICBpZiAoc3RhcnRBdCkge1xuICAgICAgX3JlbW92ZUZyb21QYXJlbnQodHdlZW4uX3N0YXJ0QXQgPSBUd2Vlbi5zZXQodGFyZ2V0cywgX3NldERlZmF1bHRzKHtcbiAgICAgICAgZGF0YTogXCJpc1N0YXJ0XCIsXG4gICAgICAgIG92ZXJ3cml0ZTogZmFsc2UsXG4gICAgICAgIHBhcmVudDogcGFyZW50LFxuICAgICAgICBpbW1lZGlhdGVSZW5kZXI6IHRydWUsXG4gICAgICAgIGxhenk6ICFwcmV2U3RhcnRBdCAmJiBfaXNOb3RGYWxzZShsYXp5KSxcbiAgICAgICAgc3RhcnRBdDogbnVsbCxcbiAgICAgICAgZGVsYXk6IDAsXG4gICAgICAgIG9uVXBkYXRlOiBvblVwZGF0ZSAmJiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIF9jYWxsYmFjayh0d2VlbiwgXCJvblVwZGF0ZVwiKTtcbiAgICAgICAgfSxcbiAgICAgICAgc3RhZ2dlcjogMFxuICAgICAgfSwgc3RhcnRBdCkpKTsgLy9jb3B5IHRoZSBwcm9wZXJ0aWVzL3ZhbHVlcyBpbnRvIGEgbmV3IG9iamVjdCB0byBhdm9pZCBjb2xsaXNpb25zLCBsaWtlIHZhciB0byA9IHt4OjB9LCBmcm9tID0ge3g6NTAwfTsgdGltZWxpbmUuZnJvbVRvKGUsIGZyb20sIHRvKS5mcm9tVG8oZSwgdG8sIGZyb20pO1xuXG5cbiAgICAgIHR3ZWVuLl9zdGFydEF0Ll9kcCA9IDA7IC8vIGRvbid0IGFsbG93IGl0IHRvIGdldCBwdXQgYmFjayBpbnRvIHJvb3QgdGltZWxpbmUhIExpa2Ugd2hlbiByZXZlcnQoKSBpcyBjYWxsZWQgYW5kIHRvdGFsVGltZSgpIGdldHMgc2V0LlxuXG4gICAgICB0d2Vlbi5fc3RhcnRBdC5fc2F0ID0gdHdlZW47IC8vIHVzZWQgaW4gZ2xvYmFsVGltZSgpLiBfc2F0IHN0YW5kcyBmb3IgX3N0YXJ0QXRUd2VlblxuXG4gICAgICB0aW1lIDwgMCAmJiAoX3JldmVydGluZyB8fCAhaW1tZWRpYXRlUmVuZGVyICYmICFhdXRvUmV2ZXJ0KSAmJiB0d2Vlbi5fc3RhcnRBdC5yZXZlcnQoX3JldmVydENvbmZpZ05vS2lsbCk7IC8vIHJhcmUgZWRnZSBjYXNlLCBsaWtlIGlmIGEgcmVuZGVyIGlzIGZvcmNlZCBpbiB0aGUgbmVnYXRpdmUgZGlyZWN0aW9uIG9mIGEgbm9uLWluaXR0ZWQgdHdlZW4uXG5cbiAgICAgIGlmIChpbW1lZGlhdGVSZW5kZXIpIHtcbiAgICAgICAgaWYgKGR1ciAmJiB0aW1lIDw9IDAgJiYgdFRpbWUgPD0gMCkge1xuICAgICAgICAgIC8vIGNoZWNrIHRUaW1lIGhlcmUgYmVjYXVzZSBpbiB0aGUgY2FzZSBvZiBhIHlveW8gdHdlZW4gd2hvc2UgcGxheWhlYWQgZ2V0cyBwdXNoZWQgdG8gdGhlIGVuZCBsaWtlIHR3ZWVuLnByb2dyZXNzKDEpLCB3ZSBzaG91bGQgYWxsb3cgaXQgdGhyb3VnaCBzbyB0aGF0IHRoZSBvbkNvbXBsZXRlIGdldHMgZmlyZWQgcHJvcGVybHkuXG4gICAgICAgICAgdGltZSAmJiAodHdlZW4uX3pUaW1lID0gdGltZSk7XG4gICAgICAgICAgcmV0dXJuOyAvL3dlIHNraXAgaW5pdGlhbGl6YXRpb24gaGVyZSBzbyB0aGF0IG92ZXJ3cml0aW5nIGRvZXNuJ3Qgb2NjdXIgdW50aWwgdGhlIHR3ZWVuIGFjdHVhbGx5IGJlZ2lucy4gT3RoZXJ3aXNlLCBpZiB5b3UgY3JlYXRlIHNldmVyYWwgaW1tZWRpYXRlUmVuZGVyOnRydWUgdHdlZW5zIG9mIHRoZSBzYW1lIHRhcmdldC9wcm9wZXJ0aWVzIHRvIGRyb3AgaW50byBhIFRpbWVsaW5lLCB0aGUgbGFzdCBvbmUgY3JlYXRlZCB3b3VsZCBvdmVyd3JpdGUgdGhlIGZpcnN0IG9uZXMgYmVjYXVzZSB0aGV5IGRpZG4ndCBnZXQgcGxhY2VkIGludG8gdGhlIHRpbWVsaW5lIHlldCBiZWZvcmUgdGhlIGZpcnN0IHJlbmRlciBvY2N1cnMgYW5kIGtpY2tzIGluIG92ZXJ3cml0aW5nLlxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChydW5CYWNrd2FyZHMgJiYgZHVyKSB7XG4gICAgICAvL2Zyb20oKSB0d2VlbnMgbXVzdCBiZSBoYW5kbGVkIHVuaXF1ZWx5OiB0aGVpciBiZWdpbm5pbmcgdmFsdWVzIG11c3QgYmUgcmVuZGVyZWQgYnV0IHdlIGRvbid0IHdhbnQgb3ZlcndyaXRpbmcgdG8gb2NjdXIgeWV0ICh3aGVuIHRpbWUgaXMgc3RpbGwgMCkuIFdhaXQgdW50aWwgdGhlIHR3ZWVuIGFjdHVhbGx5IGJlZ2lucyBiZWZvcmUgZG9pbmcgYWxsIHRoZSByb3V0aW5lcyBsaWtlIG92ZXJ3cml0aW5nLiBBdCB0aGF0IHRpbWUsIHdlIHNob3VsZCByZW5kZXIgYXQgdGhlIEVORCBvZiB0aGUgdHdlZW4gdG8gZW5zdXJlIHRoYXQgdGhpbmdzIGluaXRpYWxpemUgY29ycmVjdGx5IChyZW1lbWJlciwgZnJvbSgpIHR3ZWVucyBnbyBiYWNrd2FyZHMpXG4gICAgICBpZiAoIXByZXZTdGFydEF0KSB7XG4gICAgICAgIHRpbWUgJiYgKGltbWVkaWF0ZVJlbmRlciA9IGZhbHNlKTsgLy9pbiByYXJlIGNhc2VzIChsaWtlIGlmIGEgZnJvbSgpIHR3ZWVuIHJ1bnMgYW5kIHRoZW4gaXMgaW52YWxpZGF0ZSgpLWVkKSwgaW1tZWRpYXRlUmVuZGVyIGNvdWxkIGJlIHRydWUgYnV0IHRoZSBpbml0aWFsIGZvcmNlZC1yZW5kZXIgZ2V0cyBza2lwcGVkLCBzbyB0aGVyZSdzIG5vIG5lZWQgdG8gZm9yY2UgdGhlIHJlbmRlciBpbiB0aGlzIGNvbnRleHQgd2hlbiB0aGUgX3RpbWUgaXMgZ3JlYXRlciB0aGFuIDBcblxuICAgICAgICBwID0gX3NldERlZmF1bHRzKHtcbiAgICAgICAgICBvdmVyd3JpdGU6IGZhbHNlLFxuICAgICAgICAgIGRhdGE6IFwiaXNGcm9tU3RhcnRcIixcbiAgICAgICAgICAvL3dlIHRhZyB0aGUgdHdlZW4gd2l0aCBhcyBcImlzRnJvbVN0YXJ0XCIgc28gdGhhdCBpZiBbaW5zaWRlIGEgcGx1Z2luXSB3ZSBuZWVkIHRvIG9ubHkgZG8gc29tZXRoaW5nIGF0IHRoZSB2ZXJ5IEVORCBvZiBhIHR3ZWVuLCB3ZSBoYXZlIGEgd2F5IG9mIGlkZW50aWZ5aW5nIHRoaXMgdHdlZW4gYXMgbWVyZWx5IHRoZSBvbmUgdGhhdCdzIHNldHRpbmcgdGhlIGJlZ2lubmluZyB2YWx1ZXMgZm9yIGEgXCJmcm9tKClcIiB0d2Vlbi4gRm9yIGV4YW1wbGUsIGNsZWFyUHJvcHMgaW4gQ1NTUGx1Z2luIHNob3VsZCBvbmx5IGdldCBhcHBsaWVkIGF0IHRoZSB2ZXJ5IEVORCBvZiBhIHR3ZWVuIGFuZCB3aXRob3V0IHRoaXMgdGFnLCBmcm9tKC4uLntoZWlnaHQ6MTAwLCBjbGVhclByb3BzOlwiaGVpZ2h0XCIsIGRlbGF5OjF9KSB3b3VsZCB3aXBlIHRoZSBoZWlnaHQgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgdHdlZW4gYW5kIGFmdGVyIDEgc2Vjb25kLCBpdCdkIGtpY2sgYmFjayBpbi5cbiAgICAgICAgICBsYXp5OiBpbW1lZGlhdGVSZW5kZXIgJiYgIXByZXZTdGFydEF0ICYmIF9pc05vdEZhbHNlKGxhenkpLFxuICAgICAgICAgIGltbWVkaWF0ZVJlbmRlcjogaW1tZWRpYXRlUmVuZGVyLFxuICAgICAgICAgIC8vemVyby1kdXJhdGlvbiB0d2VlbnMgcmVuZGVyIGltbWVkaWF0ZWx5IGJ5IGRlZmF1bHQsIGJ1dCBpZiB3ZSdyZSBub3Qgc3BlY2lmaWNhbGx5IGluc3RydWN0ZWQgdG8gcmVuZGVyIHRoaXMgdHdlZW4gaW1tZWRpYXRlbHksIHdlIHNob3VsZCBza2lwIHRoaXMgYW5kIG1lcmVseSBfaW5pdCgpIHRvIHJlY29yZCB0aGUgc3RhcnRpbmcgdmFsdWVzIChyZW5kZXJpbmcgdGhlbSBpbW1lZGlhdGVseSB3b3VsZCBwdXNoIHRoZW0gdG8gY29tcGxldGlvbiB3aGljaCBpcyB3YXN0ZWZ1bCBpbiB0aGF0IGNhc2UgLSB3ZSdkIGhhdmUgdG8gcmVuZGVyKC0xKSBpbW1lZGlhdGVseSBhZnRlcilcbiAgICAgICAgICBzdGFnZ2VyOiAwLFxuICAgICAgICAgIHBhcmVudDogcGFyZW50IC8vZW5zdXJlcyB0aGF0IG5lc3RlZCB0d2VlbnMgdGhhdCBoYWQgYSBzdGFnZ2VyIGFyZSBoYW5kbGVkIHByb3Blcmx5LCBsaWtlIGdzYXAuZnJvbShcIi5jbGFzc1wiLCB7eTogZ3NhcC51dGlscy53cmFwKFstMTAwLDEwMF0pLCBzdGFnZ2VyOiAwLjV9KVxuXG4gICAgICAgIH0sIGNsZWFuVmFycyk7XG4gICAgICAgIGhhcm5lc3NWYXJzICYmIChwW2hhcm5lc3MucHJvcF0gPSBoYXJuZXNzVmFycyk7IC8vIGluIGNhc2Ugc29tZW9uZSBkb2VzIHNvbWV0aGluZyBsaWtlIC5mcm9tKC4uLiwge2Nzczp7fX0pXG5cbiAgICAgICAgX3JlbW92ZUZyb21QYXJlbnQodHdlZW4uX3N0YXJ0QXQgPSBUd2Vlbi5zZXQodGFyZ2V0cywgcCkpO1xuXG4gICAgICAgIHR3ZWVuLl9zdGFydEF0Ll9kcCA9IDA7IC8vIGRvbid0IGFsbG93IGl0IHRvIGdldCBwdXQgYmFjayBpbnRvIHJvb3QgdGltZWxpbmUhXG5cbiAgICAgICAgdHdlZW4uX3N0YXJ0QXQuX3NhdCA9IHR3ZWVuOyAvLyB1c2VkIGluIGdsb2JhbFRpbWUoKVxuXG4gICAgICAgIHRpbWUgPCAwICYmIChfcmV2ZXJ0aW5nID8gdHdlZW4uX3N0YXJ0QXQucmV2ZXJ0KF9yZXZlcnRDb25maWdOb0tpbGwpIDogdHdlZW4uX3N0YXJ0QXQucmVuZGVyKC0xLCB0cnVlKSk7XG4gICAgICAgIHR3ZWVuLl96VGltZSA9IHRpbWU7XG5cbiAgICAgICAgaWYgKCFpbW1lZGlhdGVSZW5kZXIpIHtcbiAgICAgICAgICBfaW5pdFR3ZWVuKHR3ZWVuLl9zdGFydEF0LCBfdGlueU51bSwgX3RpbnlOdW0pOyAvL2Vuc3VyZXMgdGhhdCB0aGUgaW5pdGlhbCB2YWx1ZXMgYXJlIHJlY29yZGVkXG5cbiAgICAgICAgfSBlbHNlIGlmICghdGltZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHR3ZWVuLl9wdCA9IHR3ZWVuLl9wdENhY2hlID0gMDtcbiAgICBsYXp5ID0gZHVyICYmIF9pc05vdEZhbHNlKGxhenkpIHx8IGxhenkgJiYgIWR1cjtcblxuICAgIGZvciAoaSA9IDA7IGkgPCB0YXJnZXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0YXJnZXQgPSB0YXJnZXRzW2ldO1xuICAgICAgZ3NEYXRhID0gdGFyZ2V0Ll9nc2FwIHx8IF9oYXJuZXNzKHRhcmdldHMpW2ldLl9nc2FwO1xuICAgICAgdHdlZW4uX3B0TG9va3VwW2ldID0gcHRMb29rdXAgPSB7fTtcbiAgICAgIF9sYXp5TG9va3VwW2dzRGF0YS5pZF0gJiYgX2xhenlUd2VlbnMubGVuZ3RoICYmIF9sYXp5UmVuZGVyKCk7IC8vaWYgb3RoZXIgdHdlZW5zIG9mIHRoZSBzYW1lIHRhcmdldCBoYXZlIHJlY2VudGx5IGluaXR0ZWQgYnV0IGhhdmVuJ3QgcmVuZGVyZWQgeWV0LCB3ZSd2ZSBnb3QgdG8gZm9yY2UgdGhlIHJlbmRlciBzbyB0aGF0IHRoZSBzdGFydGluZyB2YWx1ZXMgYXJlIGNvcnJlY3QgKGltYWdpbmUgcG9wdWxhdGluZyBhIHRpbWVsaW5lIHdpdGggYSBidW5jaCBvZiBzZXF1ZW50aWFsIHR3ZWVucyBhbmQgdGhlbiBqdW1waW5nIHRvIHRoZSBlbmQpXG5cbiAgICAgIGluZGV4ID0gZnVsbFRhcmdldHMgPT09IHRhcmdldHMgPyBpIDogZnVsbFRhcmdldHMuaW5kZXhPZih0YXJnZXQpO1xuXG4gICAgICBpZiAoaGFybmVzcyAmJiAocGx1Z2luID0gbmV3IGhhcm5lc3MoKSkuaW5pdCh0YXJnZXQsIGhhcm5lc3NWYXJzIHx8IGNsZWFuVmFycywgdHdlZW4sIGluZGV4LCBmdWxsVGFyZ2V0cykgIT09IGZhbHNlKSB7XG4gICAgICAgIHR3ZWVuLl9wdCA9IHB0ID0gbmV3IFByb3BUd2Vlbih0d2Vlbi5fcHQsIHRhcmdldCwgcGx1Z2luLm5hbWUsIDAsIDEsIHBsdWdpbi5yZW5kZXIsIHBsdWdpbiwgMCwgcGx1Z2luLnByaW9yaXR5KTtcblxuICAgICAgICBwbHVnaW4uX3Byb3BzLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICBwdExvb2t1cFtuYW1lXSA9IHB0O1xuICAgICAgICB9KTtcblxuICAgICAgICBwbHVnaW4ucHJpb3JpdHkgJiYgKGhhc1ByaW9yaXR5ID0gMSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghaGFybmVzcyB8fCBoYXJuZXNzVmFycykge1xuICAgICAgICBmb3IgKHAgaW4gY2xlYW5WYXJzKSB7XG4gICAgICAgICAgaWYgKF9wbHVnaW5zW3BdICYmIChwbHVnaW4gPSBfY2hlY2tQbHVnaW4ocCwgY2xlYW5WYXJzLCB0d2VlbiwgaW5kZXgsIHRhcmdldCwgZnVsbFRhcmdldHMpKSkge1xuICAgICAgICAgICAgcGx1Z2luLnByaW9yaXR5ICYmIChoYXNQcmlvcml0eSA9IDEpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwdExvb2t1cFtwXSA9IHB0ID0gX2FkZFByb3BUd2Vlbi5jYWxsKHR3ZWVuLCB0YXJnZXQsIHAsIFwiZ2V0XCIsIGNsZWFuVmFyc1twXSwgaW5kZXgsIGZ1bGxUYXJnZXRzLCAwLCB2YXJzLnN0cmluZ0ZpbHRlcik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHR3ZWVuLl9vcCAmJiB0d2Vlbi5fb3BbaV0gJiYgdHdlZW4ua2lsbCh0YXJnZXQsIHR3ZWVuLl9vcFtpXSk7XG5cbiAgICAgIGlmIChhdXRvT3ZlcndyaXRlICYmIHR3ZWVuLl9wdCkge1xuICAgICAgICBfb3ZlcndyaXRpbmdUd2VlbiA9IHR3ZWVuO1xuXG4gICAgICAgIF9nbG9iYWxUaW1lbGluZS5raWxsVHdlZW5zT2YodGFyZ2V0LCBwdExvb2t1cCwgdHdlZW4uZ2xvYmFsVGltZSh0aW1lKSk7IC8vIG1ha2Ugc3VyZSB0aGUgb3ZlcndyaXRpbmcgZG9lc24ndCBvdmVyd3JpdGUgVEhJUyB0d2VlbiEhIVxuXG5cbiAgICAgICAgb3ZlcndyaXR0ZW4gPSAhdHdlZW4ucGFyZW50O1xuICAgICAgICBfb3ZlcndyaXRpbmdUd2VlbiA9IDA7XG4gICAgICB9XG5cbiAgICAgIHR3ZWVuLl9wdCAmJiBsYXp5ICYmIChfbGF6eUxvb2t1cFtnc0RhdGEuaWRdID0gMSk7XG4gICAgfVxuXG4gICAgaGFzUHJpb3JpdHkgJiYgX3NvcnRQcm9wVHdlZW5zQnlQcmlvcml0eSh0d2Vlbik7XG4gICAgdHdlZW4uX29uSW5pdCAmJiB0d2Vlbi5fb25Jbml0KHR3ZWVuKTsgLy9wbHVnaW5zIGxpa2UgUm91bmRQcm9wcyBtdXN0IHdhaXQgdW50aWwgQUxMIG9mIHRoZSBQcm9wVHdlZW5zIGFyZSBpbnN0YW50aWF0ZWQuIEluIHRoZSBwbHVnaW4ncyBpbml0KCkgZnVuY3Rpb24sIGl0IHNldHMgdGhlIF9vbkluaXQgb24gdGhlIHR3ZWVuIGluc3RhbmNlLiBNYXkgbm90IGJlIHByZXR0eS9pbnR1aXRpdmUsIGJ1dCBpdCdzIGZhc3QgYW5kIGtlZXBzIGZpbGUgc2l6ZSBkb3duLlxuICB9XG5cbiAgdHdlZW4uX29uVXBkYXRlID0gb25VcGRhdGU7XG4gIHR3ZWVuLl9pbml0dGVkID0gKCF0d2Vlbi5fb3AgfHwgdHdlZW4uX3B0KSAmJiAhb3ZlcndyaXR0ZW47IC8vIGlmIG92ZXJ3cml0dGVuUHJvcHMgcmVzdWx0ZWQgaW4gdGhlIGVudGlyZSB0d2VlbiBiZWluZyBraWxsZWQsIGRvIE5PVCBmbGFnIGl0IGFzIGluaXR0ZWQgb3IgZWxzZSBpdCBtYXkgcmVuZGVyIGZvciBvbmUgdGljay5cblxuICBrZXlmcmFtZXMgJiYgdGltZSA8PSAwICYmIHRsLnJlbmRlcihfYmlnTnVtLCB0cnVlLCB0cnVlKTsgLy8gaWYgdGhlcmUncyBhIDAlIGtleWZyYW1lLCBpdCdsbCByZW5kZXIgaW4gdGhlIFwiYmVmb3JlXCIgc3RhdGUgZm9yIGFueSBzdGFnZ2VyZWQvZGVsYXllZCBhbmltYXRpb25zIHRodXMgd2hlbiB0aGUgZm9sbG93aW5nIHR3ZWVuIGluaXRpYWxpemVzLCBpdCdsbCB1c2UgdGhlIFwiYmVmb3JlXCIgc3RhdGUgaW5zdGVhZCBvZiB0aGUgXCJhZnRlclwiIHN0YXRlIGFzIHRoZSBpbml0aWFsIHZhbHVlcy5cbn0sXG4gICAgX3VwZGF0ZVByb3BUd2VlbnMgPSBmdW5jdGlvbiBfdXBkYXRlUHJvcFR3ZWVucyh0d2VlbiwgcHJvcGVydHksIHZhbHVlLCBzdGFydCwgc3RhcnRJc1JlbGF0aXZlLCByYXRpbywgdGltZSwgc2tpcFJlY3Vyc2lvbikge1xuICB2YXIgcHRDYWNoZSA9ICh0d2Vlbi5fcHQgJiYgdHdlZW4uX3B0Q2FjaGUgfHwgKHR3ZWVuLl9wdENhY2hlID0ge30pKVtwcm9wZXJ0eV0sXG4gICAgICBwdCxcbiAgICAgIHJvb3RQVCxcbiAgICAgIGxvb2t1cCxcbiAgICAgIGk7XG5cbiAgaWYgKCFwdENhY2hlKSB7XG4gICAgcHRDYWNoZSA9IHR3ZWVuLl9wdENhY2hlW3Byb3BlcnR5XSA9IFtdO1xuICAgIGxvb2t1cCA9IHR3ZWVuLl9wdExvb2t1cDtcbiAgICBpID0gdHdlZW4uX3RhcmdldHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgcHQgPSBsb29rdXBbaV1bcHJvcGVydHldO1xuXG4gICAgICBpZiAocHQgJiYgcHQuZCAmJiBwdC5kLl9wdCkge1xuICAgICAgICAvLyBpdCdzIGEgcGx1Z2luLCBzbyBmaW5kIHRoZSBuZXN0ZWQgUHJvcFR3ZWVuXG4gICAgICAgIHB0ID0gcHQuZC5fcHQ7XG5cbiAgICAgICAgd2hpbGUgKHB0ICYmIHB0LnAgIT09IHByb3BlcnR5ICYmIHB0LmZwICE9PSBwcm9wZXJ0eSkge1xuICAgICAgICAgIC8vIFwiZnBcIiBpcyBmdW5jdGlvblBhcmFtIGZvciB0aGluZ3MgbGlrZSBzZXR0aW5nIENTUyB2YXJpYWJsZXMgd2hpY2ggcmVxdWlyZSAuc2V0UHJvcGVydHkoXCItLXZhci1uYW1lXCIsIHZhbHVlKVxuICAgICAgICAgIHB0ID0gcHQuX25leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCFwdCkge1xuICAgICAgICAvLyB0aGVyZSBpcyBubyBQcm9wVHdlZW4gYXNzb2NpYXRlZCB3aXRoIHRoYXQgcHJvcGVydHksIHNvIHdlIG11c3QgRk9SQ0Ugb25lIHRvIGJlIGNyZWF0ZWQgYW5kIGRpdGNoIG91dCBvZiB0aGlzXG4gICAgICAgIC8vIGlmIHRoZSB0d2VlbiBoYXMgb3RoZXIgcHJvcGVydGllcyB0aGF0IGFscmVhZHkgcmVuZGVyZWQgYXQgbmV3IHBvc2l0aW9ucywgd2UnZCBub3JtYWxseSBoYXZlIHRvIHJld2luZCB0byBwdXQgdGhlbSBiYWNrIGxpa2UgdHdlZW4ucmVuZGVyKDAsIHRydWUpIGJlZm9yZSBmb3JjaW5nIGFuIF9pbml0VHdlZW4oKSwgYnV0IHRoYXQgY2FuIGNyZWF0ZSBhbm90aGVyIGVkZ2UgY2FzZSBsaWtlIHR3ZWVuaW5nIGEgdGltZWxpbmUncyBwcm9ncmVzcyB3b3VsZCB0cmlnZ2VyIG9uVXBkYXRlcyB0byBmaXJlIHdoaWNoIGNvdWxkIG1vdmUgb3RoZXIgdGhpbmdzIGFyb3VuZC4gSXQncyBiZXR0ZXIgdG8ganVzdCBpbmZvcm0gdXNlcnMgdGhhdCAucmVzZXRUbygpIHNob3VsZCBPTkxZIGJlIHVzZWQgZm9yIHR3ZWVucyB0aGF0IGFscmVhZHkgaGF2ZSB0aGF0IHByb3BlcnR5LiBGb3IgZXhhbXBsZSwgeW91IGNhbid0IGdzYXAudG8oLi4ueyB5OiAwIH0pIGFuZCB0aGVuIHR3ZWVuLnJlc3RUbyhcInhcIiwgMjAwKSBmb3IgZXhhbXBsZS5cbiAgICAgICAgX2ZvcmNlQWxsUHJvcFR3ZWVucyA9IDE7IC8vIG90aGVyd2lzZSwgd2hlbiB3ZSBfYWRkUHJvcFR3ZWVuKCkgYW5kIGl0IGZpbmRzIG5vIGNoYW5nZSBiZXR3ZWVuIHRoZSBzdGFydCBhbmQgZW5kIHZhbHVlcywgaXQgc2tpcHMgY3JlYXRpbmcgYSBQcm9wVHdlZW4gKGZvciBlZmZpY2llbmN5Li4ud2h5IHR3ZWVuIHdoZW4gdGhlcmUncyBubyBkaWZmZXJlbmNlPykgYnV0IGluIHRoaXMgY2FzZSB3ZSBORUVEIHRoYXQgUHJvcFR3ZWVuIGNyZWF0ZWQgc28gd2UgY2FuIGVkaXQgaXQuXG5cbiAgICAgICAgdHdlZW4udmFyc1twcm9wZXJ0eV0gPSBcIis9MFwiO1xuXG4gICAgICAgIF9pbml0VHdlZW4odHdlZW4sIHRpbWUpO1xuXG4gICAgICAgIF9mb3JjZUFsbFByb3BUd2VlbnMgPSAwO1xuICAgICAgICByZXR1cm4gc2tpcFJlY3Vyc2lvbiA/IF93YXJuKHByb3BlcnR5ICsgXCIgbm90IGVsaWdpYmxlIGZvciByZXNldFwiKSA6IDE7IC8vIGlmIHNvbWVvbmUgdHJpZXMgdG8gZG8gYSBxdWlja1RvKCkgb24gYSBzcGVjaWFsIHByb3BlcnR5IGxpa2UgYm9yZGVyUmFkaXVzIHdoaWNoIG11c3QgZ2V0IHNwbGl0IGludG8gNCBkaWZmZXJlbnQgcHJvcGVydGllcywgdGhhdCdzIG5vdCBlbGlnaWJsZSBmb3IgLnJlc2V0VG8oKS5cbiAgICAgIH1cblxuICAgICAgcHRDYWNoZS5wdXNoKHB0KTtcbiAgICB9XG4gIH1cblxuICBpID0gcHRDYWNoZS5sZW5ndGg7XG5cbiAgd2hpbGUgKGktLSkge1xuICAgIHJvb3RQVCA9IHB0Q2FjaGVbaV07XG4gICAgcHQgPSByb290UFQuX3B0IHx8IHJvb3RQVDsgLy8gY29tcGxleCB2YWx1ZXMgbWF5IGhhdmUgbmVzdGVkIFByb3BUd2VlbnMuIFdlIG9ubHkgYWNjb21tb2RhdGUgdGhlIEZJUlNUIHZhbHVlLlxuXG4gICAgcHQucyA9IChzdGFydCB8fCBzdGFydCA9PT0gMCkgJiYgIXN0YXJ0SXNSZWxhdGl2ZSA/IHN0YXJ0IDogcHQucyArIChzdGFydCB8fCAwKSArIHJhdGlvICogcHQuYztcbiAgICBwdC5jID0gdmFsdWUgLSBwdC5zO1xuICAgIHJvb3RQVC5lICYmIChyb290UFQuZSA9IF9yb3VuZCh2YWx1ZSkgKyBnZXRVbml0KHJvb3RQVC5lKSk7IC8vIG1haW5seSBmb3IgQ1NTUGx1Z2luIChlbmQgdmFsdWUpXG5cbiAgICByb290UFQuYiAmJiAocm9vdFBULmIgPSBwdC5zICsgZ2V0VW5pdChyb290UFQuYikpOyAvLyAoYmVnaW5uaW5nIHZhbHVlKVxuICB9XG59LFxuICAgIF9hZGRBbGlhc2VzVG9WYXJzID0gZnVuY3Rpb24gX2FkZEFsaWFzZXNUb1ZhcnModGFyZ2V0cywgdmFycykge1xuICB2YXIgaGFybmVzcyA9IHRhcmdldHNbMF0gPyBfZ2V0Q2FjaGUodGFyZ2V0c1swXSkuaGFybmVzcyA6IDAsXG4gICAgICBwcm9wZXJ0eUFsaWFzZXMgPSBoYXJuZXNzICYmIGhhcm5lc3MuYWxpYXNlcyxcbiAgICAgIGNvcHksXG4gICAgICBwLFxuICAgICAgaSxcbiAgICAgIGFsaWFzZXM7XG5cbiAgaWYgKCFwcm9wZXJ0eUFsaWFzZXMpIHtcbiAgICByZXR1cm4gdmFycztcbiAgfVxuXG4gIGNvcHkgPSBfbWVyZ2Uoe30sIHZhcnMpO1xuXG4gIGZvciAocCBpbiBwcm9wZXJ0eUFsaWFzZXMpIHtcbiAgICBpZiAocCBpbiBjb3B5KSB7XG4gICAgICBhbGlhc2VzID0gcHJvcGVydHlBbGlhc2VzW3BdLnNwbGl0KFwiLFwiKTtcbiAgICAgIGkgPSBhbGlhc2VzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICBjb3B5W2FsaWFzZXNbaV1dID0gY29weVtwXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gY29weTtcbn0sXG4gICAgLy8gcGFyc2VzIG11bHRpcGxlIGZvcm1hdHMsIGxpa2Uge1wiMCVcIjoge3g6IDEwMH0sIHtcIjUwJVwiOiB7eDogLTIwfX0gYW5kIHsgeDoge1wiMCVcIjogMTAwLCBcIjUwJVwiOiAtMjB9IH0sIGFuZCBhbiBcImVhc2VcIiBjYW4gYmUgc2V0IG9uIGFueSBvYmplY3QuIFdlIHBvcHVsYXRlIGFuIFwiYWxsUHJvcHNcIiBvYmplY3Qgd2l0aCBhbiBBcnJheSBmb3IgZWFjaCBwcm9wZXJ0eSwgbGlrZSB7eDogW3t9LCB7fV0sIHk6W3t9LCB7fV19IHdpdGggZGF0YSBmb3IgZWFjaCBwcm9wZXJ0eSB0d2Vlbi4gVGhlIG9iamVjdHMgaGF2ZSBhIFwidFwiICh0aW1lKSwgXCJ2XCIsICh2YWx1ZSksIGFuZCBcImVcIiAoZWFzZSkgcHJvcGVydHkuIFRoaXMgYWxsb3dzIHVzIHRvIHBpZWNlIHRvZ2V0aGVyIGEgdGltZWxpbmUgbGF0ZXIuXG5fcGFyc2VLZXlmcmFtZSA9IGZ1bmN0aW9uIF9wYXJzZUtleWZyYW1lKHByb3AsIG9iaiwgYWxsUHJvcHMsIGVhc2VFYWNoKSB7XG4gIHZhciBlYXNlID0gb2JqLmVhc2UgfHwgZWFzZUVhY2ggfHwgXCJwb3dlcjEuaW5PdXRcIixcbiAgICAgIHAsXG4gICAgICBhO1xuXG4gIGlmIChfaXNBcnJheShvYmopKSB7XG4gICAgYSA9IGFsbFByb3BzW3Byb3BdIHx8IChhbGxQcm9wc1twcm9wXSA9IFtdKTsgLy8gdCA9IHRpbWUgKG91dCBvZiAxMDApLCB2ID0gdmFsdWUsIGUgPSBlYXNlXG5cbiAgICBvYmouZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIGkpIHtcbiAgICAgIHJldHVybiBhLnB1c2goe1xuICAgICAgICB0OiBpIC8gKG9iai5sZW5ndGggLSAxKSAqIDEwMCxcbiAgICAgICAgdjogdmFsdWUsXG4gICAgICAgIGU6IGVhc2VcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGZvciAocCBpbiBvYmopIHtcbiAgICAgIGEgPSBhbGxQcm9wc1twXSB8fCAoYWxsUHJvcHNbcF0gPSBbXSk7XG4gICAgICBwID09PSBcImVhc2VcIiB8fCBhLnB1c2goe1xuICAgICAgICB0OiBwYXJzZUZsb2F0KHByb3ApLFxuICAgICAgICB2OiBvYmpbcF0sXG4gICAgICAgIGU6IGVhc2VcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufSxcbiAgICBfcGFyc2VGdW5jT3JTdHJpbmcgPSBmdW5jdGlvbiBfcGFyc2VGdW5jT3JTdHJpbmcodmFsdWUsIHR3ZWVuLCBpLCB0YXJnZXQsIHRhcmdldHMpIHtcbiAgcmV0dXJuIF9pc0Z1bmN0aW9uKHZhbHVlKSA/IHZhbHVlLmNhbGwodHdlZW4sIGksIHRhcmdldCwgdGFyZ2V0cykgOiBfaXNTdHJpbmcodmFsdWUpICYmIH52YWx1ZS5pbmRleE9mKFwicmFuZG9tKFwiKSA/IF9yZXBsYWNlUmFuZG9tKHZhbHVlKSA6IHZhbHVlO1xufSxcbiAgICBfc3RhZ2dlclR3ZWVuUHJvcHMgPSBfY2FsbGJhY2tOYW1lcyArIFwicmVwZWF0LHJlcGVhdERlbGF5LHlveW8scmVwZWF0UmVmcmVzaCx5b3lvRWFzZSxhdXRvUmV2ZXJ0XCIsXG4gICAgX3N0YWdnZXJQcm9wc1RvU2tpcCA9IHt9O1xuXG5fZm9yRWFjaE5hbWUoX3N0YWdnZXJUd2VlblByb3BzICsgXCIsaWQsc3RhZ2dlcixkZWxheSxkdXJhdGlvbixwYXVzZWQsc2Nyb2xsVHJpZ2dlclwiLCBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gX3N0YWdnZXJQcm9wc1RvU2tpcFtuYW1lXSA9IDE7XG59KTtcbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogVFdFRU5cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuXG5leHBvcnQgdmFyIFR3ZWVuID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQW5pbWF0aW9uMikge1xuICBfaW5oZXJpdHNMb29zZShUd2VlbiwgX0FuaW1hdGlvbjIpO1xuXG4gIGZ1bmN0aW9uIFR3ZWVuKHRhcmdldHMsIHZhcnMsIHBvc2l0aW9uLCBza2lwSW5oZXJpdCkge1xuICAgIHZhciBfdGhpczM7XG5cbiAgICBpZiAodHlwZW9mIHZhcnMgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIHBvc2l0aW9uLmR1cmF0aW9uID0gdmFycztcbiAgICAgIHZhcnMgPSBwb3NpdGlvbjtcbiAgICAgIHBvc2l0aW9uID0gbnVsbDtcbiAgICB9XG5cbiAgICBfdGhpczMgPSBfQW5pbWF0aW9uMi5jYWxsKHRoaXMsIHNraXBJbmhlcml0ID8gdmFycyA6IF9pbmhlcml0RGVmYXVsdHModmFycykpIHx8IHRoaXM7XG4gICAgdmFyIF90aGlzMyR2YXJzID0gX3RoaXMzLnZhcnMsXG4gICAgICAgIGR1cmF0aW9uID0gX3RoaXMzJHZhcnMuZHVyYXRpb24sXG4gICAgICAgIGRlbGF5ID0gX3RoaXMzJHZhcnMuZGVsYXksXG4gICAgICAgIGltbWVkaWF0ZVJlbmRlciA9IF90aGlzMyR2YXJzLmltbWVkaWF0ZVJlbmRlcixcbiAgICAgICAgc3RhZ2dlciA9IF90aGlzMyR2YXJzLnN0YWdnZXIsXG4gICAgICAgIG92ZXJ3cml0ZSA9IF90aGlzMyR2YXJzLm92ZXJ3cml0ZSxcbiAgICAgICAga2V5ZnJhbWVzID0gX3RoaXMzJHZhcnMua2V5ZnJhbWVzLFxuICAgICAgICBkZWZhdWx0cyA9IF90aGlzMyR2YXJzLmRlZmF1bHRzLFxuICAgICAgICBzY3JvbGxUcmlnZ2VyID0gX3RoaXMzJHZhcnMuc2Nyb2xsVHJpZ2dlcixcbiAgICAgICAgeW95b0Vhc2UgPSBfdGhpczMkdmFycy55b3lvRWFzZSxcbiAgICAgICAgcGFyZW50ID0gdmFycy5wYXJlbnQgfHwgX2dsb2JhbFRpbWVsaW5lLFxuICAgICAgICBwYXJzZWRUYXJnZXRzID0gKF9pc0FycmF5KHRhcmdldHMpIHx8IF9pc1R5cGVkQXJyYXkodGFyZ2V0cykgPyBfaXNOdW1iZXIodGFyZ2V0c1swXSkgOiBcImxlbmd0aFwiIGluIHZhcnMpID8gW3RhcmdldHNdIDogdG9BcnJheSh0YXJnZXRzKSxcbiAgICAgICAgdGwsXG4gICAgICAgIGksXG4gICAgICAgIGNvcHksXG4gICAgICAgIGwsXG4gICAgICAgIHAsXG4gICAgICAgIGN1clRhcmdldCxcbiAgICAgICAgc3RhZ2dlckZ1bmMsXG4gICAgICAgIHN0YWdnZXJWYXJzVG9NZXJnZTtcbiAgICBfdGhpczMuX3RhcmdldHMgPSBwYXJzZWRUYXJnZXRzLmxlbmd0aCA/IF9oYXJuZXNzKHBhcnNlZFRhcmdldHMpIDogX3dhcm4oXCJHU0FQIHRhcmdldCBcIiArIHRhcmdldHMgKyBcIiBub3QgZm91bmQuIGh0dHBzOi8vZ3NhcC5jb21cIiwgIV9jb25maWcubnVsbFRhcmdldFdhcm4pIHx8IFtdO1xuICAgIF90aGlzMy5fcHRMb29rdXAgPSBbXTsgLy9Qcm9wVHdlZW4gbG9va3VwLiBBbiBhcnJheSBjb250YWluaW5nIGFuIG9iamVjdCBmb3IgZWFjaCB0YXJnZXQsIGhhdmluZyBrZXlzIGZvciBlYWNoIHR3ZWVuaW5nIHByb3BlcnR5XG5cbiAgICBfdGhpczMuX292ZXJ3cml0ZSA9IG92ZXJ3cml0ZTtcblxuICAgIGlmIChrZXlmcmFtZXMgfHwgc3RhZ2dlciB8fCBfaXNGdW5jT3JTdHJpbmcoZHVyYXRpb24pIHx8IF9pc0Z1bmNPclN0cmluZyhkZWxheSkpIHtcbiAgICAgIHZhcnMgPSBfdGhpczMudmFycztcbiAgICAgIHRsID0gX3RoaXMzLnRpbWVsaW5lID0gbmV3IFRpbWVsaW5lKHtcbiAgICAgICAgZGF0YTogXCJuZXN0ZWRcIixcbiAgICAgICAgZGVmYXVsdHM6IGRlZmF1bHRzIHx8IHt9LFxuICAgICAgICB0YXJnZXRzOiBwYXJlbnQgJiYgcGFyZW50LmRhdGEgPT09IFwibmVzdGVkXCIgPyBwYXJlbnQudmFycy50YXJnZXRzIDogcGFyc2VkVGFyZ2V0c1xuICAgICAgfSk7IC8vIHdlIG5lZWQgdG8gc3RvcmUgdGhlIHRhcmdldHMgYmVjYXVzZSBmb3Igc3RhZ2dlcnMgYW5kIGtleWZyYW1lcywgd2UgZW5kIHVwIGNyZWF0aW5nIGFuIGluZGl2aWR1YWwgdHdlZW4gZm9yIGVhY2ggYnV0IGZ1bmN0aW9uLWJhc2VkIHZhbHVlcyBuZWVkIHRvIGtub3cgdGhlIGluZGV4IGFuZCB0aGUgd2hvbGUgQXJyYXkgb2YgdGFyZ2V0cy5cblxuICAgICAgdGwua2lsbCgpO1xuICAgICAgdGwucGFyZW50ID0gdGwuX2RwID0gX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczMpO1xuICAgICAgdGwuX3N0YXJ0ID0gMDtcblxuICAgICAgaWYgKHN0YWdnZXIgfHwgX2lzRnVuY09yU3RyaW5nKGR1cmF0aW9uKSB8fCBfaXNGdW5jT3JTdHJpbmcoZGVsYXkpKSB7XG4gICAgICAgIGwgPSBwYXJzZWRUYXJnZXRzLmxlbmd0aDtcbiAgICAgICAgc3RhZ2dlckZ1bmMgPSBzdGFnZ2VyICYmIGRpc3RyaWJ1dGUoc3RhZ2dlcik7XG5cbiAgICAgICAgaWYgKF9pc09iamVjdChzdGFnZ2VyKSkge1xuICAgICAgICAgIC8vdXNlcnMgY2FuIHBhc3MgaW4gY2FsbGJhY2tzIGxpa2Ugb25TdGFydC9vbkNvbXBsZXRlIGluIHRoZSBzdGFnZ2VyIG9iamVjdC4gVGhlc2Ugc2hvdWxkIGZpcmUgd2l0aCBlYWNoIGluZGl2aWR1YWwgdHdlZW4uXG4gICAgICAgICAgZm9yIChwIGluIHN0YWdnZXIpIHtcbiAgICAgICAgICAgIGlmICh+X3N0YWdnZXJUd2VlblByb3BzLmluZGV4T2YocCkpIHtcbiAgICAgICAgICAgICAgc3RhZ2dlclZhcnNUb01lcmdlIHx8IChzdGFnZ2VyVmFyc1RvTWVyZ2UgPSB7fSk7XG4gICAgICAgICAgICAgIHN0YWdnZXJWYXJzVG9NZXJnZVtwXSA9IHN0YWdnZXJbcF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgIGNvcHkgPSBfY29weUV4Y2x1ZGluZyh2YXJzLCBfc3RhZ2dlclByb3BzVG9Ta2lwKTtcbiAgICAgICAgICBjb3B5LnN0YWdnZXIgPSAwO1xuICAgICAgICAgIHlveW9FYXNlICYmIChjb3B5LnlveW9FYXNlID0geW95b0Vhc2UpO1xuICAgICAgICAgIHN0YWdnZXJWYXJzVG9NZXJnZSAmJiBfbWVyZ2UoY29weSwgc3RhZ2dlclZhcnNUb01lcmdlKTtcbiAgICAgICAgICBjdXJUYXJnZXQgPSBwYXJzZWRUYXJnZXRzW2ldOyAvL2Rvbid0IGp1c3QgY29weSBkdXJhdGlvbiBvciBkZWxheSBiZWNhdXNlIGlmIHRoZXkncmUgYSBzdHJpbmcgb3IgZnVuY3Rpb24sIHdlJ2QgZW5kIHVwIGluIGFuIGluZmluaXRlIGxvb3AgYmVjYXVzZSBfaXNGdW5jT3JTdHJpbmcoKSB3b3VsZCBldmFsdWF0ZSBhcyB0cnVlIGluIHRoZSBjaGlsZCB0d2VlbnMsIGVudGVyaW5nIHRoaXMgbG9vcCwgZXRjLiBTbyB3ZSBwYXJzZSB0aGUgdmFsdWUgc3RyYWlnaHQgZnJvbSB2YXJzIGFuZCBkZWZhdWx0IHRvIDAuXG5cbiAgICAgICAgICBjb3B5LmR1cmF0aW9uID0gK19wYXJzZUZ1bmNPclN0cmluZyhkdXJhdGlvbiwgX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczMpLCBpLCBjdXJUYXJnZXQsIHBhcnNlZFRhcmdldHMpO1xuICAgICAgICAgIGNvcHkuZGVsYXkgPSAoK19wYXJzZUZ1bmNPclN0cmluZyhkZWxheSwgX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczMpLCBpLCBjdXJUYXJnZXQsIHBhcnNlZFRhcmdldHMpIHx8IDApIC0gX3RoaXMzLl9kZWxheTtcblxuICAgICAgICAgIGlmICghc3RhZ2dlciAmJiBsID09PSAxICYmIGNvcHkuZGVsYXkpIHtcbiAgICAgICAgICAgIC8vIGlmIHNvbWVvbmUgZG9lcyBkZWxheTpcInJhbmRvbSgxLCA1KVwiLCByZXBlYXQ6LTEsIGZvciBleGFtcGxlLCB0aGUgZGVsYXkgc2hvdWxkbid0IGJlIGluc2lkZSB0aGUgcmVwZWF0LlxuICAgICAgICAgICAgX3RoaXMzLl9kZWxheSA9IGRlbGF5ID0gY29weS5kZWxheTtcbiAgICAgICAgICAgIF90aGlzMy5fc3RhcnQgKz0gZGVsYXk7XG4gICAgICAgICAgICBjb3B5LmRlbGF5ID0gMDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0bC50byhjdXJUYXJnZXQsIGNvcHksIHN0YWdnZXJGdW5jID8gc3RhZ2dlckZ1bmMoaSwgY3VyVGFyZ2V0LCBwYXJzZWRUYXJnZXRzKSA6IDApO1xuICAgICAgICAgIHRsLl9lYXNlID0gX2Vhc2VNYXAubm9uZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRsLmR1cmF0aW9uKCkgPyBkdXJhdGlvbiA9IGRlbGF5ID0gMCA6IF90aGlzMy50aW1lbGluZSA9IDA7IC8vIGlmIHRoZSB0aW1lbGluZSdzIGR1cmF0aW9uIGlzIDAsIHdlIGRvbid0IG5lZWQgYSB0aW1lbGluZSBpbnRlcm5hbGx5IVxuICAgICAgfSBlbHNlIGlmIChrZXlmcmFtZXMpIHtcbiAgICAgICAgX2luaGVyaXREZWZhdWx0cyhfc2V0RGVmYXVsdHModGwudmFycy5kZWZhdWx0cywge1xuICAgICAgICAgIGVhc2U6IFwibm9uZVwiXG4gICAgICAgIH0pKTtcblxuICAgICAgICB0bC5fZWFzZSA9IF9wYXJzZUVhc2Uoa2V5ZnJhbWVzLmVhc2UgfHwgdmFycy5lYXNlIHx8IFwibm9uZVwiKTtcbiAgICAgICAgdmFyIHRpbWUgPSAwLFxuICAgICAgICAgICAgYSxcbiAgICAgICAgICAgIGtmLFxuICAgICAgICAgICAgdjtcblxuICAgICAgICBpZiAoX2lzQXJyYXkoa2V5ZnJhbWVzKSkge1xuICAgICAgICAgIGtleWZyYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChmcmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRsLnRvKHBhcnNlZFRhcmdldHMsIGZyYW1lLCBcIj5cIik7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdGwuZHVyYXRpb24oKTsgLy8gdG8gZW5zdXJlIHRsLl9kdXIgaXMgY2FjaGVkIGJlY2F1c2Ugd2UgdGFwIGludG8gaXQgZm9yIHBlcmZvcm1hbmNlIHB1cnBvc2VzIGluIHRoZSByZW5kZXIoKSBtZXRob2QuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29weSA9IHt9O1xuXG4gICAgICAgICAgZm9yIChwIGluIGtleWZyYW1lcykge1xuICAgICAgICAgICAgcCA9PT0gXCJlYXNlXCIgfHwgcCA9PT0gXCJlYXNlRWFjaFwiIHx8IF9wYXJzZUtleWZyYW1lKHAsIGtleWZyYW1lc1twXSwgY29weSwga2V5ZnJhbWVzLmVhc2VFYWNoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmb3IgKHAgaW4gY29weSkge1xuICAgICAgICAgICAgYSA9IGNvcHlbcF0uc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgICAgICByZXR1cm4gYS50IC0gYi50O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aW1lID0gMDtcblxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAga2YgPSBhW2ldO1xuICAgICAgICAgICAgICB2ID0ge1xuICAgICAgICAgICAgICAgIGVhc2U6IGtmLmUsXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IChrZi50IC0gKGkgPyBhW2kgLSAxXS50IDogMCkpIC8gMTAwICogZHVyYXRpb25cbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgdltwXSA9IGtmLnY7XG4gICAgICAgICAgICAgIHRsLnRvKHBhcnNlZFRhcmdldHMsIHYsIHRpbWUpO1xuICAgICAgICAgICAgICB0aW1lICs9IHYuZHVyYXRpb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGwuZHVyYXRpb24oKSA8IGR1cmF0aW9uICYmIHRsLnRvKHt9LCB7XG4gICAgICAgICAgICBkdXJhdGlvbjogZHVyYXRpb24gLSB0bC5kdXJhdGlvbigpXG4gICAgICAgICAgfSk7IC8vIGluIGNhc2Uga2V5ZnJhbWVzIGRpZG4ndCBnbyB0byAxMDAlXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZHVyYXRpb24gfHwgX3RoaXMzLmR1cmF0aW9uKGR1cmF0aW9uID0gdGwuZHVyYXRpb24oKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIF90aGlzMy50aW1lbGluZSA9IDA7IC8vc3BlZWQgb3B0aW1pemF0aW9uLCBmYXN0ZXIgbG9va3VwcyAobm8gZ29pbmcgdXAgdGhlIHByb3RvdHlwZSBjaGFpbilcbiAgICB9XG5cbiAgICBpZiAob3ZlcndyaXRlID09PSB0cnVlICYmICFfc3VwcHJlc3NPdmVyd3JpdGVzKSB7XG4gICAgICBfb3ZlcndyaXRpbmdUd2VlbiA9IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMzKTtcblxuICAgICAgX2dsb2JhbFRpbWVsaW5lLmtpbGxUd2VlbnNPZihwYXJzZWRUYXJnZXRzKTtcblxuICAgICAgX292ZXJ3cml0aW5nVHdlZW4gPSAwO1xuICAgIH1cblxuICAgIF9hZGRUb1RpbWVsaW5lKHBhcmVudCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczMpLCBwb3NpdGlvbik7XG5cbiAgICB2YXJzLnJldmVyc2VkICYmIF90aGlzMy5yZXZlcnNlKCk7XG4gICAgdmFycy5wYXVzZWQgJiYgX3RoaXMzLnBhdXNlZCh0cnVlKTtcblxuICAgIGlmIChpbW1lZGlhdGVSZW5kZXIgfHwgIWR1cmF0aW9uICYmICFrZXlmcmFtZXMgJiYgX3RoaXMzLl9zdGFydCA9PT0gX3JvdW5kUHJlY2lzZShwYXJlbnQuX3RpbWUpICYmIF9pc05vdEZhbHNlKGltbWVkaWF0ZVJlbmRlcikgJiYgX2hhc05vUGF1c2VkQW5jZXN0b3JzKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMzKSkgJiYgcGFyZW50LmRhdGEgIT09IFwibmVzdGVkXCIpIHtcbiAgICAgIF90aGlzMy5fdFRpbWUgPSAtX3RpbnlOdW07IC8vZm9yY2VzIGEgcmVuZGVyIHdpdGhvdXQgaGF2aW5nIHRvIHNldCB0aGUgcmVuZGVyKCkgXCJmb3JjZVwiIHBhcmFtZXRlciB0byB0cnVlIGJlY2F1c2Ugd2Ugd2FudCB0byBhbGxvdyBsYXp5aW5nIGJ5IGRlZmF1bHQgKHVzaW5nIHRoZSBcImZvcmNlXCIgcGFyYW1ldGVyIGFsd2F5cyBmb3JjZXMgYW4gaW1tZWRpYXRlIGZ1bGwgcmVuZGVyKVxuXG4gICAgICBfdGhpczMucmVuZGVyKE1hdGgubWF4KDAsIC1kZWxheSkgfHwgMCk7IC8vaW4gY2FzZSBkZWxheSBpcyBuZWdhdGl2ZVxuXG4gICAgfVxuXG4gICAgc2Nyb2xsVHJpZ2dlciAmJiBfc2Nyb2xsVHJpZ2dlcihfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMyksIHNjcm9sbFRyaWdnZXIpO1xuICAgIHJldHVybiBfdGhpczM7XG4gIH1cblxuICB2YXIgX3Byb3RvMyA9IFR3ZWVuLnByb3RvdHlwZTtcblxuICBfcHJvdG8zLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcih0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSkge1xuICAgIHZhciBwcmV2VGltZSA9IHRoaXMuX3RpbWUsXG4gICAgICAgIHREdXIgPSB0aGlzLl90RHVyLFxuICAgICAgICBkdXIgPSB0aGlzLl9kdXIsXG4gICAgICAgIGlzTmVnYXRpdmUgPSB0b3RhbFRpbWUgPCAwLFxuICAgICAgICB0VGltZSA9IHRvdGFsVGltZSA+IHREdXIgLSBfdGlueU51bSAmJiAhaXNOZWdhdGl2ZSA/IHREdXIgOiB0b3RhbFRpbWUgPCBfdGlueU51bSA/IDAgOiB0b3RhbFRpbWUsXG4gICAgICAgIHRpbWUsXG4gICAgICAgIHB0LFxuICAgICAgICBpdGVyYXRpb24sXG4gICAgICAgIGN5Y2xlRHVyYXRpb24sXG4gICAgICAgIHByZXZJdGVyYXRpb24sXG4gICAgICAgIGlzWW95byxcbiAgICAgICAgcmF0aW8sXG4gICAgICAgIHRpbWVsaW5lLFxuICAgICAgICB5b3lvRWFzZTtcblxuICAgIGlmICghZHVyKSB7XG4gICAgICBfcmVuZGVyWmVyb0R1cmF0aW9uVHdlZW4odGhpcywgdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuICAgIH0gZWxzZSBpZiAodFRpbWUgIT09IHRoaXMuX3RUaW1lIHx8ICF0b3RhbFRpbWUgfHwgZm9yY2UgfHwgIXRoaXMuX2luaXR0ZWQgJiYgdGhpcy5fdFRpbWUgfHwgdGhpcy5fc3RhcnRBdCAmJiB0aGlzLl96VGltZSA8IDAgIT09IGlzTmVnYXRpdmUpIHtcbiAgICAgIC8vdGhpcyBzZW5zZXMgaWYgd2UncmUgY3Jvc3Npbmcgb3ZlciB0aGUgc3RhcnQgdGltZSwgaW4gd2hpY2ggY2FzZSB3ZSBtdXN0IHJlY29yZCBfelRpbWUgYW5kIGZvcmNlIHRoZSByZW5kZXIsIGJ1dCB3ZSBkbyBpdCBpbiB0aGlzIGxlbmd0aHkgY29uZGl0aW9uYWwgd2F5IGZvciBwZXJmb3JtYW5jZSByZWFzb25zICh1c3VhbGx5IHdlIGNhbiBza2lwIHRoZSBjYWxjdWxhdGlvbnMpOiB0aGlzLl9pbml0dGVkICYmICh0aGlzLl96VGltZSA8IDApICE9PSAodG90YWxUaW1lIDwgMClcbiAgICAgIHRpbWUgPSB0VGltZTtcbiAgICAgIHRpbWVsaW5lID0gdGhpcy50aW1lbGluZTtcblxuICAgICAgaWYgKHRoaXMuX3JlcGVhdCkge1xuICAgICAgICAvL2FkanVzdCB0aGUgdGltZSBmb3IgcmVwZWF0cyBhbmQgeW95b3NcbiAgICAgICAgY3ljbGVEdXJhdGlvbiA9IGR1ciArIHRoaXMuX3JEZWxheTtcblxuICAgICAgICBpZiAodGhpcy5fcmVwZWF0IDwgLTEgJiYgaXNOZWdhdGl2ZSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnRvdGFsVGltZShjeWNsZUR1cmF0aW9uICogMTAwICsgdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGltZSA9IF9yb3VuZFByZWNpc2UodFRpbWUgJSBjeWNsZUR1cmF0aW9uKTsgLy9yb3VuZCB0byBhdm9pZCBmbG9hdGluZyBwb2ludCBlcnJvcnMuICg0ICUgMC44IHNob3VsZCBiZSAwIGJ1dCBzb21lIGJyb3dzZXJzIHJlcG9ydCBpdCBhcyAwLjc5OTk5OTk5ISlcblxuICAgICAgICBpZiAodFRpbWUgPT09IHREdXIpIHtcbiAgICAgICAgICAvLyB0aGUgdER1ciA9PT0gdFRpbWUgaXMgZm9yIGVkZ2UgY2FzZXMgd2hlcmUgdGhlcmUncyBhIGxlbmd0aHkgZGVjaW1hbCBvbiB0aGUgZHVyYXRpb24gYW5kIGl0IG1heSByZWFjaCB0aGUgdmVyeSBlbmQgYnV0IHRoZSB0aW1lIGlzIHJlbmRlcmVkIGFzIG5vdC1xdWl0ZS10aGVyZSAocmVtZW1iZXIsIHREdXIgaXMgcm91bmRlZCB0byA0IGRlY2ltYWxzIHdoZXJlYXMgZHVyIGlzbid0KVxuICAgICAgICAgIGl0ZXJhdGlvbiA9IHRoaXMuX3JlcGVhdDtcbiAgICAgICAgICB0aW1lID0gZHVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZXJhdGlvbiA9IH5+KHRUaW1lIC8gY3ljbGVEdXJhdGlvbik7XG5cbiAgICAgICAgICBpZiAoaXRlcmF0aW9uICYmIGl0ZXJhdGlvbiA9PT0gX3JvdW5kUHJlY2lzZSh0VGltZSAvIGN5Y2xlRHVyYXRpb24pKSB7XG4gICAgICAgICAgICB0aW1lID0gZHVyO1xuICAgICAgICAgICAgaXRlcmF0aW9uLS07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGltZSA+IGR1ciAmJiAodGltZSA9IGR1cik7XG4gICAgICAgIH1cblxuICAgICAgICBpc1lveW8gPSB0aGlzLl95b3lvICYmIGl0ZXJhdGlvbiAmIDE7XG5cbiAgICAgICAgaWYgKGlzWW95bykge1xuICAgICAgICAgIHlveW9FYXNlID0gdGhpcy5feUVhc2U7XG4gICAgICAgICAgdGltZSA9IGR1ciAtIHRpbWU7XG4gICAgICAgIH1cblxuICAgICAgICBwcmV2SXRlcmF0aW9uID0gX2FuaW1hdGlvbkN5Y2xlKHRoaXMuX3RUaW1lLCBjeWNsZUR1cmF0aW9uKTtcblxuICAgICAgICBpZiAodGltZSA9PT0gcHJldlRpbWUgJiYgIWZvcmNlICYmIHRoaXMuX2luaXR0ZWQgJiYgaXRlcmF0aW9uID09PSBwcmV2SXRlcmF0aW9uKSB7XG4gICAgICAgICAgLy9jb3VsZCBiZSBkdXJpbmcgdGhlIHJlcGVhdERlbGF5IHBhcnQuIE5vIG5lZWQgdG8gcmVuZGVyIGFuZCBmaXJlIGNhbGxiYWNrcy5cbiAgICAgICAgICB0aGlzLl90VGltZSA9IHRUaW1lO1xuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGl0ZXJhdGlvbiAhPT0gcHJldkl0ZXJhdGlvbikge1xuICAgICAgICAgIHRpbWVsaW5lICYmIHRoaXMuX3lFYXNlICYmIF9wcm9wYWdhdGVZb3lvRWFzZSh0aW1lbGluZSwgaXNZb3lvKTsgLy9yZXBlYXRSZWZyZXNoIGZ1bmN0aW9uYWxpdHlcblxuICAgICAgICAgIGlmICh0aGlzLnZhcnMucmVwZWF0UmVmcmVzaCAmJiAhaXNZb3lvICYmICF0aGlzLl9sb2NrICYmIHRoaXMuX3RpbWUgIT09IGN5Y2xlRHVyYXRpb24gJiYgdGhpcy5faW5pdHRlZCkge1xuICAgICAgICAgICAgLy8gdGhpcy5fdGltZSB3aWxsID09PSBjeWNsZUR1cmF0aW9uIHdoZW4gd2UgcmVuZGVyIGF0IEVYQUNUTFkgdGhlIGVuZCBvZiBhbiBpdGVyYXRpb24uIFdpdGhvdXQgdGhpcyBjb25kaXRpb24sIGl0J2Qgb2Z0ZW4gZG8gdGhlIHJlcGVhdFJlZnJlc2ggcmVuZGVyIFRXSUNFIChhZ2FpbiBvbiB0aGUgdmVyeSBuZXh0IHRpY2spLlxuICAgICAgICAgICAgdGhpcy5fbG9jayA9IGZvcmNlID0gMTsgLy9mb3JjZSwgb3RoZXJ3aXNlIGlmIGxhenkgaXMgdHJ1ZSwgdGhlIF9hdHRlbXB0SW5pdFR3ZWVuKCkgd2lsbCByZXR1cm4gYW5kIHdlJ2xsIGp1bXAgb3V0IGFuZCBnZXQgY2F1Z2h0IGJvdW5jaW5nIG9uIGVhY2ggdGljay5cblxuICAgICAgICAgICAgdGhpcy5yZW5kZXIoX3JvdW5kUHJlY2lzZShjeWNsZUR1cmF0aW9uICogaXRlcmF0aW9uKSwgdHJ1ZSkuaW52YWxpZGF0ZSgpLl9sb2NrID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLl9pbml0dGVkKSB7XG4gICAgICAgIGlmIChfYXR0ZW1wdEluaXRUd2Vlbih0aGlzLCBpc05lZ2F0aXZlID8gdG90YWxUaW1lIDogdGltZSwgZm9yY2UsIHN1cHByZXNzRXZlbnRzLCB0VGltZSkpIHtcbiAgICAgICAgICB0aGlzLl90VGltZSA9IDA7IC8vIGluIGNvbnN0cnVjdG9yIGlmIGltbWVkaWF0ZVJlbmRlciBpcyB0cnVlLCB3ZSBzZXQgX3RUaW1lIHRvIC1fdGlueU51bSB0byBoYXZlIHRoZSBwbGF5aGVhZCBjcm9zcyB0aGUgc3RhcnRpbmcgcG9pbnQgYnV0IHdlIGNhbid0IGxlYXZlIF90VGltZSBhcyBhIG5lZ2F0aXZlIG51bWJlci5cblxuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHByZXZUaW1lICE9PSB0aGlzLl90aW1lICYmICEoZm9yY2UgJiYgdGhpcy52YXJzLnJlcGVhdFJlZnJlc2ggJiYgaXRlcmF0aW9uICE9PSBwcmV2SXRlcmF0aW9uKSkge1xuICAgICAgICAgIC8vIHJhcmUgZWRnZSBjYXNlIC0gZHVyaW5nIGluaXRpYWxpemF0aW9uLCBhbiBvblVwZGF0ZSBpbiB0aGUgX3N0YXJ0QXQgKC5mcm9tVG8oKSkgbWlnaHQgZm9yY2UgdGhpcyB0d2VlbiB0byByZW5kZXIgYXQgYSBkaWZmZXJlbnQgc3BvdCBpbiB3aGljaCBjYXNlIHdlIHNob3VsZCBkaXRjaCB0aGlzIHJlbmRlcigpIGNhbGwgc28gdGhhdCBpdCBkb2Vzbid0IHJldmVydCB0aGUgdmFsdWVzLiBCdXQgd2UgYWxzbyBkb24ndCB3YW50IHRvIGR1bXAgaWYgd2UncmUgZG9pbmcgYSByZXBlYXRSZWZyZXNoIHJlbmRlciFcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkdXIgIT09IHRoaXMuX2R1cikge1xuICAgICAgICAgIC8vIHdoaWxlIGluaXR0aW5nLCBhIHBsdWdpbiBsaWtlIEluZXJ0aWFQbHVnaW4gbWlnaHQgYWx0ZXIgdGhlIGR1cmF0aW9uLCBzbyByZXJ1biBmcm9tIHRoZSBzdGFydCB0byBlbnN1cmUgZXZlcnl0aGluZyByZW5kZXJzIGFzIGl0IHNob3VsZC5cbiAgICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXIodG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3RUaW1lID0gdFRpbWU7XG4gICAgICB0aGlzLl90aW1lID0gdGltZTtcblxuICAgICAgaWYgKCF0aGlzLl9hY3QgJiYgdGhpcy5fdHMpIHtcbiAgICAgICAgdGhpcy5fYWN0ID0gMTsgLy9hcyBsb25nIGFzIGl0J3Mgbm90IHBhdXNlZCwgZm9yY2UgaXQgdG8gYmUgYWN0aXZlIHNvIHRoYXQgaWYgdGhlIHVzZXIgcmVuZGVycyBpbmRlcGVuZGVudCBvZiB0aGUgcGFyZW50IHRpbWVsaW5lLCBpdCdsbCBiZSBmb3JjZWQgdG8gcmUtcmVuZGVyIG9uIHRoZSBuZXh0IHRpY2suXG5cbiAgICAgICAgdGhpcy5fbGF6eSA9IDA7XG4gICAgICB9XG5cbiAgICAgIHRoaXMucmF0aW8gPSByYXRpbyA9ICh5b3lvRWFzZSB8fCB0aGlzLl9lYXNlKSh0aW1lIC8gZHVyKTtcblxuICAgICAgaWYgKHRoaXMuX2Zyb20pIHtcbiAgICAgICAgdGhpcy5yYXRpbyA9IHJhdGlvID0gMSAtIHJhdGlvO1xuICAgICAgfVxuXG4gICAgICBpZiAodGltZSAmJiAhcHJldlRpbWUgJiYgIXN1cHByZXNzRXZlbnRzICYmICFpdGVyYXRpb24pIHtcbiAgICAgICAgX2NhbGxiYWNrKHRoaXMsIFwib25TdGFydFwiKTtcblxuICAgICAgICBpZiAodGhpcy5fdFRpbWUgIT09IHRUaW1lKSB7XG4gICAgICAgICAgLy8gaW4gY2FzZSB0aGUgb25TdGFydCB0cmlnZ2VyZWQgYSByZW5kZXIgYXQgYSBkaWZmZXJlbnQgc3BvdCwgZWplY3QuIExpa2UgaWYgc29tZW9uZSBkaWQgYW5pbWF0aW9uLnBhdXNlKDAuNSkgb3Igc29tZXRoaW5nIGluc2lkZSB0aGUgb25TdGFydC5cbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBwdCA9IHRoaXMuX3B0O1xuXG4gICAgICB3aGlsZSAocHQpIHtcbiAgICAgICAgcHQucihyYXRpbywgcHQuZCk7XG4gICAgICAgIHB0ID0gcHQuX25leHQ7XG4gICAgICB9XG5cbiAgICAgIHRpbWVsaW5lICYmIHRpbWVsaW5lLnJlbmRlcih0b3RhbFRpbWUgPCAwID8gdG90YWxUaW1lIDogdGltZWxpbmUuX2R1ciAqIHRpbWVsaW5lLl9lYXNlKHRpbWUgLyB0aGlzLl9kdXIpLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpIHx8IHRoaXMuX3N0YXJ0QXQgJiYgKHRoaXMuX3pUaW1lID0gdG90YWxUaW1lKTtcblxuICAgICAgaWYgKHRoaXMuX29uVXBkYXRlICYmICFzdXBwcmVzc0V2ZW50cykge1xuICAgICAgICBpc05lZ2F0aXZlICYmIF9yZXdpbmRTdGFydEF0KHRoaXMsIHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTsgLy9ub3RlOiBmb3IgcGVyZm9ybWFuY2UgcmVhc29ucywgd2UgdHVjayB0aGlzIGNvbmRpdGlvbmFsIGxvZ2ljIGluc2lkZSBsZXNzIHRyYXZlbGVkIGFyZWFzIChtb3N0IHR3ZWVucyBkb24ndCBoYXZlIGFuIG9uVXBkYXRlKS4gV2UnZCBqdXN0IGhhdmUgaXQgYXQgdGhlIGVuZCBiZWZvcmUgdGhlIG9uQ29tcGxldGUsIGJ1dCB0aGUgdmFsdWVzIHNob3VsZCBiZSB1cGRhdGVkIGJlZm9yZSBhbnkgb25VcGRhdGUgaXMgY2FsbGVkLCBzbyB3ZSBBTFNPIHB1dCBpdCBoZXJlIGFuZCB0aGVuIGlmIGl0J3Mgbm90IGNhbGxlZCwgd2UgZG8gc28gbGF0ZXIgbmVhciB0aGUgb25Db21wbGV0ZS5cblxuICAgICAgICBfY2FsbGJhY2sodGhpcywgXCJvblVwZGF0ZVwiKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fcmVwZWF0ICYmIGl0ZXJhdGlvbiAhPT0gcHJldkl0ZXJhdGlvbiAmJiB0aGlzLnZhcnMub25SZXBlYXQgJiYgIXN1cHByZXNzRXZlbnRzICYmIHRoaXMucGFyZW50ICYmIF9jYWxsYmFjayh0aGlzLCBcIm9uUmVwZWF0XCIpO1xuXG4gICAgICBpZiAoKHRUaW1lID09PSB0aGlzLl90RHVyIHx8ICF0VGltZSkgJiYgdGhpcy5fdFRpbWUgPT09IHRUaW1lKSB7XG4gICAgICAgIGlzTmVnYXRpdmUgJiYgIXRoaXMuX29uVXBkYXRlICYmIF9yZXdpbmRTdGFydEF0KHRoaXMsIHRvdGFsVGltZSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICh0b3RhbFRpbWUgfHwgIWR1cikgJiYgKHRUaW1lID09PSB0aGlzLl90RHVyICYmIHRoaXMuX3RzID4gMCB8fCAhdFRpbWUgJiYgdGhpcy5fdHMgPCAwKSAmJiBfcmVtb3ZlRnJvbVBhcmVudCh0aGlzLCAxKTsgLy8gZG9uJ3QgcmVtb3ZlIGlmIHdlJ3JlIHJlbmRlcmluZyBhdCBleGFjdGx5IGEgdGltZSBvZiAwLCBhcyB0aGVyZSBjb3VsZCBiZSBhdXRvUmV2ZXJ0IHZhbHVlcyB0aGF0IHNob3VsZCBnZXQgc2V0IG9uIHRoZSBuZXh0IHRpY2sgKGlmIHRoZSBwbGF5aGVhZCBnb2VzIGJhY2t3YXJkIGJleW9uZCB0aGUgc3RhcnRUaW1lLCBuZWdhdGl2ZSB0b3RhbFRpbWUpLiBEb24ndCByZW1vdmUgaWYgdGhlIHRpbWVsaW5lIGlzIHJldmVyc2VkIGFuZCB0aGUgcGxheWhlYWQgaXNuJ3QgYXQgMCwgb3RoZXJ3aXNlIHRsLnByb2dyZXNzKDEpLnJldmVyc2UoKSB3b24ndCB3b3JrLiBPbmx5IHJlbW92ZSBpZiB0aGUgcGxheWhlYWQgaXMgYXQgdGhlIGVuZCBhbmQgdGltZVNjYWxlIGlzIHBvc2l0aXZlLCBvciBpZiB0aGUgcGxheWhlYWQgaXMgYXQgMCBhbmQgdGhlIHRpbWVTY2FsZSBpcyBuZWdhdGl2ZS5cblxuICAgICAgICBpZiAoIXN1cHByZXNzRXZlbnRzICYmICEoaXNOZWdhdGl2ZSAmJiAhcHJldlRpbWUpICYmICh0VGltZSB8fCBwcmV2VGltZSB8fCBpc1lveW8pKSB7XG4gICAgICAgICAgLy8gaWYgcHJldlRpbWUgYW5kIHRUaW1lIGFyZSB6ZXJvLCB3ZSBzaG91bGRuJ3QgZmlyZSB0aGUgb25SZXZlcnNlQ29tcGxldGUuIFRoaXMgY291bGQgaGFwcGVuIGlmIHlvdSBnc2FwLnRvKC4uLiB7cGF1c2VkOnRydWV9KS5wbGF5KCk7XG4gICAgICAgICAgX2NhbGxiYWNrKHRoaXMsIHRUaW1lID09PSB0RHVyID8gXCJvbkNvbXBsZXRlXCIgOiBcIm9uUmV2ZXJzZUNvbXBsZXRlXCIsIHRydWUpO1xuXG4gICAgICAgICAgdGhpcy5fcHJvbSAmJiAhKHRUaW1lIDwgdER1ciAmJiB0aGlzLnRpbWVTY2FsZSgpID4gMCkgJiYgdGhpcy5fcHJvbSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvMy50YXJnZXRzID0gZnVuY3Rpb24gdGFyZ2V0cygpIHtcbiAgICByZXR1cm4gdGhpcy5fdGFyZ2V0cztcbiAgfTtcblxuICBfcHJvdG8zLmludmFsaWRhdGUgPSBmdW5jdGlvbiBpbnZhbGlkYXRlKHNvZnQpIHtcbiAgICAvLyBcInNvZnRcIiBnaXZlcyB1cyBhIHdheSB0byBjbGVhciBvdXQgZXZlcnl0aGluZyBFWENFUFQgdGhlIHJlY29yZGVkIHByZS1cImZyb21cIiBwb3J0aW9uIG9mIGZyb20oKSB0d2VlbnMuIE90aGVyd2lzZSwgZm9yIGV4YW1wbGUsIGlmIHlvdSB0d2Vlbi5wcm9ncmVzcygxKS5yZW5kZXIoMCwgdHJ1ZSB0cnVlKS5pbnZhbGlkYXRlKCksIHRoZSBcImZyb21cIiB2YWx1ZXMgd291bGQgcGVyc2lzdCBhbmQgdGhlbiBvbiB0aGUgbmV4dCByZW5kZXIsIHRoZSBmcm9tKCkgdHdlZW5zIHdvdWxkIGluaXRpYWxpemUgYW5kIHRoZSBjdXJyZW50IHZhbHVlIHdvdWxkIG1hdGNoIHRoZSBcImZyb21cIiB2YWx1ZXMsIHRodXMgYW5pbWF0ZSBmcm9tIHRoZSBzYW1lIHZhbHVlIHRvIHRoZSBzYW1lIHZhbHVlIChubyBhbmltYXRpb24pLiBXZSB0YXAgaW50byB0aGlzIGluIFNjcm9sbFRyaWdnZXIncyByZWZyZXNoKCkgd2hlcmUgd2UgbXVzdCBwdXNoIGEgdHdlZW4gdG8gY29tcGxldGlvbiBhbmQgdGhlbiBiYWNrIGFnYWluIGJ1dCBob25vciBpdHMgaW5pdCBzdGF0ZSBpbiBjYXNlIHRoZSB0d2VlbiBpcyBkZXBlbmRlbnQgb24gYW5vdGhlciB0d2VlbiBmdXJ0aGVyIHVwIG9uIHRoZSBwYWdlLlxuICAgICghc29mdCB8fCAhdGhpcy52YXJzLnJ1bkJhY2t3YXJkcykgJiYgKHRoaXMuX3N0YXJ0QXQgPSAwKTtcbiAgICB0aGlzLl9wdCA9IHRoaXMuX29wID0gdGhpcy5fb25VcGRhdGUgPSB0aGlzLl9sYXp5ID0gdGhpcy5yYXRpbyA9IDA7XG4gICAgdGhpcy5fcHRMb29rdXAgPSBbXTtcbiAgICB0aGlzLnRpbWVsaW5lICYmIHRoaXMudGltZWxpbmUuaW52YWxpZGF0ZShzb2Z0KTtcbiAgICByZXR1cm4gX0FuaW1hdGlvbjIucHJvdG90eXBlLmludmFsaWRhdGUuY2FsbCh0aGlzLCBzb2Z0KTtcbiAgfTtcblxuICBfcHJvdG8zLnJlc2V0VG8gPSBmdW5jdGlvbiByZXNldFRvKHByb3BlcnR5LCB2YWx1ZSwgc3RhcnQsIHN0YXJ0SXNSZWxhdGl2ZSwgc2tpcFJlY3Vyc2lvbikge1xuICAgIF90aWNrZXJBY3RpdmUgfHwgX3RpY2tlci53YWtlKCk7XG4gICAgdGhpcy5fdHMgfHwgdGhpcy5wbGF5KCk7XG4gICAgdmFyIHRpbWUgPSBNYXRoLm1pbih0aGlzLl9kdXIsICh0aGlzLl9kcC5fdGltZSAtIHRoaXMuX3N0YXJ0KSAqIHRoaXMuX3RzKSxcbiAgICAgICAgcmF0aW87XG4gICAgdGhpcy5faW5pdHRlZCB8fCBfaW5pdFR3ZWVuKHRoaXMsIHRpbWUpO1xuICAgIHJhdGlvID0gdGhpcy5fZWFzZSh0aW1lIC8gdGhpcy5fZHVyKTsgLy8gZG9uJ3QganVzdCBnZXQgdHdlZW4ucmF0aW8gYmVjYXVzZSBpdCBtYXkgbm90IGhhdmUgcmVuZGVyZWQgeWV0LlxuICAgIC8vIHBvc3NpYmxlIGZ1dHVyZSBhZGRpdGlvbiB0byBhbGxvdyBhbiBvYmplY3Qgd2l0aCBtdWx0aXBsZSB2YWx1ZXMgdG8gdXBkYXRlLCBsaWtlIHR3ZWVuLnJlc2V0VG8oe3g6IDEwMCwgeTogMjAwfSk7IEF0IHRoaXMgcG9pbnQsIGl0IGRvZXNuJ3Qgc2VlbSB3b3J0aCB0aGUgYWRkZWQga2IgZ2l2ZW4gdGhlIGZhY3QgdGhhdCBtb3N0IHVzZXJzIHdpbGwgbGlrZWx5IG9wdCBmb3IgdGhlIGNvbnZlbmllbnQgZ3NhcC5xdWlja1RvKCkgd2F5IG9mIGludGVyYWN0aW5nIHdpdGggdGhpcyBtZXRob2QuXG4gICAgLy8gaWYgKF9pc09iamVjdChwcm9wZXJ0eSkpIHsgLy8gcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uXG4gICAgLy8gXHRmb3IgKHAgaW4gcHJvcGVydHkpIHtcbiAgICAvLyBcdFx0aWYgKF91cGRhdGVQcm9wVHdlZW5zKHRoaXMsIHAsIHByb3BlcnR5W3BdLCB2YWx1ZSA/IHZhbHVlW3BdIDogbnVsbCwgc3RhcnQsIHJhdGlvLCB0aW1lKSkge1xuICAgIC8vIFx0XHRcdHJldHVybiB0aGlzLnJlc2V0VG8ocHJvcGVydHksIHZhbHVlLCBzdGFydCwgc3RhcnRJc1JlbGF0aXZlKTsgLy8gaWYgYSBQcm9wVHdlZW4gd2Fzbid0IGZvdW5kIGZvciB0aGUgcHJvcGVydHksIGl0J2xsIGdldCBmb3JjZWQgd2l0aCBhIHJlLWluaXRpYWxpemF0aW9uIHNvIHdlIG5lZWQgdG8ganVtcCBvdXQgYW5kIHN0YXJ0IG92ZXIgYWdhaW4uXG4gICAgLy8gXHRcdH1cbiAgICAvLyBcdH1cbiAgICAvLyB9IGVsc2Uge1xuXG4gICAgaWYgKF91cGRhdGVQcm9wVHdlZW5zKHRoaXMsIHByb3BlcnR5LCB2YWx1ZSwgc3RhcnQsIHN0YXJ0SXNSZWxhdGl2ZSwgcmF0aW8sIHRpbWUsIHNraXBSZWN1cnNpb24pKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXNldFRvKHByb3BlcnR5LCB2YWx1ZSwgc3RhcnQsIHN0YXJ0SXNSZWxhdGl2ZSwgMSk7IC8vIGlmIGEgUHJvcFR3ZWVuIHdhc24ndCBmb3VuZCBmb3IgdGhlIHByb3BlcnR5LCBpdCdsbCBnZXQgZm9yY2VkIHdpdGggYSByZS1pbml0aWFsaXphdGlvbiBzbyB3ZSBuZWVkIHRvIGp1bXAgb3V0IGFuZCBzdGFydCBvdmVyIGFnYWluLlxuICAgIH0gLy99XG5cblxuICAgIF9hbGlnblBsYXloZWFkKHRoaXMsIDApO1xuXG4gICAgdGhpcy5wYXJlbnQgfHwgX2FkZExpbmtlZExpc3RJdGVtKHRoaXMuX2RwLCB0aGlzLCBcIl9maXJzdFwiLCBcIl9sYXN0XCIsIHRoaXMuX2RwLl9zb3J0ID8gXCJfc3RhcnRcIiA6IDApO1xuICAgIHJldHVybiB0aGlzLnJlbmRlcigwKTtcbiAgfTtcblxuICBfcHJvdG8zLmtpbGwgPSBmdW5jdGlvbiBraWxsKHRhcmdldHMsIHZhcnMpIHtcbiAgICBpZiAodmFycyA9PT0gdm9pZCAwKSB7XG4gICAgICB2YXJzID0gXCJhbGxcIjtcbiAgICB9XG5cbiAgICBpZiAoIXRhcmdldHMgJiYgKCF2YXJzIHx8IHZhcnMgPT09IFwiYWxsXCIpKSB7XG4gICAgICB0aGlzLl9sYXp5ID0gdGhpcy5fcHQgPSAwO1xuICAgICAgcmV0dXJuIHRoaXMucGFyZW50ID8gX2ludGVycnVwdCh0aGlzKSA6IHRoaXM7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMudGltZWxpbmUpIHtcbiAgICAgIHZhciB0RHVyID0gdGhpcy50aW1lbGluZS50b3RhbER1cmF0aW9uKCk7XG4gICAgICB0aGlzLnRpbWVsaW5lLmtpbGxUd2VlbnNPZih0YXJnZXRzLCB2YXJzLCBfb3ZlcndyaXRpbmdUd2VlbiAmJiBfb3ZlcndyaXRpbmdUd2Vlbi52YXJzLm92ZXJ3cml0ZSAhPT0gdHJ1ZSkuX2ZpcnN0IHx8IF9pbnRlcnJ1cHQodGhpcyk7IC8vIGlmIG5vdGhpbmcgaXMgbGVmdCB0d2VlbmluZywgaW50ZXJydXB0LlxuXG4gICAgICB0aGlzLnBhcmVudCAmJiB0RHVyICE9PSB0aGlzLnRpbWVsaW5lLnRvdGFsRHVyYXRpb24oKSAmJiBfc2V0RHVyYXRpb24odGhpcywgdGhpcy5fZHVyICogdGhpcy50aW1lbGluZS5fdER1ciAvIHREdXIsIDAsIDEpOyAvLyBpZiBhIG5lc3RlZCB0d2VlbiBpcyBraWxsZWQgdGhhdCBjaGFuZ2VzIHRoZSBkdXJhdGlvbiwgaXQgc2hvdWxkIGFmZmVjdCB0aGlzIHR3ZWVuJ3MgZHVyYXRpb24uIFdlIG11c3QgdXNlIHRoZSByYXRpbywgdGhvdWdoLCBiZWNhdXNlIHNvbWV0aW1lcyB0aGUgaW50ZXJuYWwgdGltZWxpbmUgaXMgc3RyZXRjaGVkIGxpa2UgZm9yIGtleWZyYW1lcyB3aGVyZSB0aGV5IGRvbid0IGFsbCBhZGQgdXAgdG8gd2hhdGV2ZXIgdGhlIHBhcmVudCB0d2VlbidzIGR1cmF0aW9uIHdhcyBzZXQgdG8uXG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHZhciBwYXJzZWRUYXJnZXRzID0gdGhpcy5fdGFyZ2V0cyxcbiAgICAgICAga2lsbGluZ1RhcmdldHMgPSB0YXJnZXRzID8gdG9BcnJheSh0YXJnZXRzKSA6IHBhcnNlZFRhcmdldHMsXG4gICAgICAgIHByb3BUd2Vlbkxvb2t1cCA9IHRoaXMuX3B0TG9va3VwLFxuICAgICAgICBmaXJzdFBUID0gdGhpcy5fcHQsXG4gICAgICAgIG92ZXJ3cml0dGVuUHJvcHMsXG4gICAgICAgIGN1ckxvb2t1cCxcbiAgICAgICAgY3VyT3ZlcndyaXRlUHJvcHMsXG4gICAgICAgIHByb3BzLFxuICAgICAgICBwLFxuICAgICAgICBwdCxcbiAgICAgICAgaTtcblxuICAgIGlmICgoIXZhcnMgfHwgdmFycyA9PT0gXCJhbGxcIikgJiYgX2FycmF5c01hdGNoKHBhcnNlZFRhcmdldHMsIGtpbGxpbmdUYXJnZXRzKSkge1xuICAgICAgdmFycyA9PT0gXCJhbGxcIiAmJiAodGhpcy5fcHQgPSAwKTtcbiAgICAgIHJldHVybiBfaW50ZXJydXB0KHRoaXMpO1xuICAgIH1cblxuICAgIG92ZXJ3cml0dGVuUHJvcHMgPSB0aGlzLl9vcCA9IHRoaXMuX29wIHx8IFtdO1xuXG4gICAgaWYgKHZhcnMgIT09IFwiYWxsXCIpIHtcbiAgICAgIC8vc28gcGVvcGxlIGNhbiBwYXNzIGluIGEgY29tbWEtZGVsaW1pdGVkIGxpc3Qgb2YgcHJvcGVydHkgbmFtZXNcbiAgICAgIGlmIChfaXNTdHJpbmcodmFycykpIHtcbiAgICAgICAgcCA9IHt9O1xuXG4gICAgICAgIF9mb3JFYWNoTmFtZSh2YXJzLCBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgIHJldHVybiBwW25hbWVdID0gMTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFycyA9IHA7XG4gICAgICB9XG5cbiAgICAgIHZhcnMgPSBfYWRkQWxpYXNlc1RvVmFycyhwYXJzZWRUYXJnZXRzLCB2YXJzKTtcbiAgICB9XG5cbiAgICBpID0gcGFyc2VkVGFyZ2V0cy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBpZiAofmtpbGxpbmdUYXJnZXRzLmluZGV4T2YocGFyc2VkVGFyZ2V0c1tpXSkpIHtcbiAgICAgICAgY3VyTG9va3VwID0gcHJvcFR3ZWVuTG9va3VwW2ldO1xuXG4gICAgICAgIGlmICh2YXJzID09PSBcImFsbFwiKSB7XG4gICAgICAgICAgb3ZlcndyaXR0ZW5Qcm9wc1tpXSA9IHZhcnM7XG4gICAgICAgICAgcHJvcHMgPSBjdXJMb29rdXA7XG4gICAgICAgICAgY3VyT3ZlcndyaXRlUHJvcHMgPSB7fTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjdXJPdmVyd3JpdGVQcm9wcyA9IG92ZXJ3cml0dGVuUHJvcHNbaV0gPSBvdmVyd3JpdHRlblByb3BzW2ldIHx8IHt9O1xuICAgICAgICAgIHByb3BzID0gdmFycztcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAocCBpbiBwcm9wcykge1xuICAgICAgICAgIHB0ID0gY3VyTG9va3VwICYmIGN1ckxvb2t1cFtwXTtcblxuICAgICAgICAgIGlmIChwdCkge1xuICAgICAgICAgICAgaWYgKCEoXCJraWxsXCIgaW4gcHQuZCkgfHwgcHQuZC5raWxsKHApID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgIF9yZW1vdmVMaW5rZWRMaXN0SXRlbSh0aGlzLCBwdCwgXCJfcHRcIik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRlbGV0ZSBjdXJMb29rdXBbcF07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGN1ck92ZXJ3cml0ZVByb3BzICE9PSBcImFsbFwiKSB7XG4gICAgICAgICAgICBjdXJPdmVyd3JpdGVQcm9wc1twXSA9IDE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5faW5pdHRlZCAmJiAhdGhpcy5fcHQgJiYgZmlyc3RQVCAmJiBfaW50ZXJydXB0KHRoaXMpOyAvL2lmIGFsbCB0d2VlbmluZyBwcm9wZXJ0aWVzIGFyZSBraWxsZWQsIGtpbGwgdGhlIHR3ZWVuLiBXaXRob3V0IHRoaXMgbGluZSwgaWYgdGhlcmUncyBhIHR3ZWVuIHdpdGggbXVsdGlwbGUgdGFyZ2V0cyBhbmQgdGhlbiB5b3Uga2lsbFR3ZWVuc09mKCkgZWFjaCB0YXJnZXQgaW5kaXZpZHVhbGx5LCB0aGUgdHdlZW4gd291bGQgdGVjaG5pY2FsbHkgc3RpbGwgcmVtYWluIGFjdGl2ZSBhbmQgZmlyZSBpdHMgb25Db21wbGV0ZSBldmVuIHRob3VnaCB0aGVyZSBhcmVuJ3QgYW55IG1vcmUgcHJvcGVydGllcyB0d2VlbmluZy5cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIFR3ZWVuLnRvID0gZnVuY3Rpb24gdG8odGFyZ2V0cywgdmFycykge1xuICAgIHJldHVybiBuZXcgVHdlZW4odGFyZ2V0cywgdmFycywgYXJndW1lbnRzWzJdKTtcbiAgfTtcblxuICBUd2Vlbi5mcm9tID0gZnVuY3Rpb24gZnJvbSh0YXJnZXRzLCB2YXJzKSB7XG4gICAgcmV0dXJuIF9jcmVhdGVUd2VlblR5cGUoMSwgYXJndW1lbnRzKTtcbiAgfTtcblxuICBUd2Vlbi5kZWxheWVkQ2FsbCA9IGZ1bmN0aW9uIGRlbGF5ZWRDYWxsKGRlbGF5LCBjYWxsYmFjaywgcGFyYW1zLCBzY29wZSkge1xuICAgIHJldHVybiBuZXcgVHdlZW4oY2FsbGJhY2ssIDAsIHtcbiAgICAgIGltbWVkaWF0ZVJlbmRlcjogZmFsc2UsXG4gICAgICBsYXp5OiBmYWxzZSxcbiAgICAgIG92ZXJ3cml0ZTogZmFsc2UsXG4gICAgICBkZWxheTogZGVsYXksXG4gICAgICBvbkNvbXBsZXRlOiBjYWxsYmFjayxcbiAgICAgIG9uUmV2ZXJzZUNvbXBsZXRlOiBjYWxsYmFjayxcbiAgICAgIG9uQ29tcGxldGVQYXJhbXM6IHBhcmFtcyxcbiAgICAgIG9uUmV2ZXJzZUNvbXBsZXRlUGFyYW1zOiBwYXJhbXMsXG4gICAgICBjYWxsYmFja1Njb3BlOiBzY29wZVxuICAgIH0pOyAvLyB3ZSBtdXN0IHVzZSBvblJldmVyc2VDb21wbGV0ZSB0b28gZm9yIHRoaW5ncyBsaWtlIHRpbWVsaW5lLmFkZCgoKSA9PiB7Li4ufSkgd2hpY2ggc2hvdWxkIGJlIHRyaWdnZXJlZCBpbiBCT1RIIGRpcmVjdGlvbnMgKGZvcndhcmQgYW5kIHJldmVyc2UpXG4gIH07XG5cbiAgVHdlZW4uZnJvbVRvID0gZnVuY3Rpb24gZnJvbVRvKHRhcmdldHMsIGZyb21WYXJzLCB0b1ZhcnMpIHtcbiAgICByZXR1cm4gX2NyZWF0ZVR3ZWVuVHlwZSgyLCBhcmd1bWVudHMpO1xuICB9O1xuXG4gIFR3ZWVuLnNldCA9IGZ1bmN0aW9uIHNldCh0YXJnZXRzLCB2YXJzKSB7XG4gICAgdmFycy5kdXJhdGlvbiA9IDA7XG4gICAgdmFycy5yZXBlYXREZWxheSB8fCAodmFycy5yZXBlYXQgPSAwKTtcbiAgICByZXR1cm4gbmV3IFR3ZWVuKHRhcmdldHMsIHZhcnMpO1xuICB9O1xuXG4gIFR3ZWVuLmtpbGxUd2VlbnNPZiA9IGZ1bmN0aW9uIGtpbGxUd2VlbnNPZih0YXJnZXRzLCBwcm9wcywgb25seUFjdGl2ZSkge1xuICAgIHJldHVybiBfZ2xvYmFsVGltZWxpbmUua2lsbFR3ZWVuc09mKHRhcmdldHMsIHByb3BzLCBvbmx5QWN0aXZlKTtcbiAgfTtcblxuICByZXR1cm4gVHdlZW47XG59KEFuaW1hdGlvbik7XG5cbl9zZXREZWZhdWx0cyhUd2Vlbi5wcm90b3R5cGUsIHtcbiAgX3RhcmdldHM6IFtdLFxuICBfbGF6eTogMCxcbiAgX3N0YXJ0QXQ6IDAsXG4gIF9vcDogMCxcbiAgX29uSW5pdDogMFxufSk7IC8vYWRkIHRoZSBwZXJ0aW5lbnQgdGltZWxpbmUgbWV0aG9kcyB0byBUd2VlbiBpbnN0YW5jZXMgc28gdGhhdCB1c2VycyBjYW4gY2hhaW4gY29udmVuaWVudGx5IGFuZCBjcmVhdGUgYSB0aW1lbGluZSBhdXRvbWF0aWNhbGx5LiAocmVtb3ZlZCBkdWUgdG8gY29uY2VybnMgdGhhdCBpdCdkIHVsdGltYXRlbHkgYWRkIHRvIG1vcmUgY29uZnVzaW9uIGVzcGVjaWFsbHkgZm9yIGJlZ2lubmVycylcbi8vIF9mb3JFYWNoTmFtZShcInRvLGZyb20sZnJvbVRvLHNldCxjYWxsLGFkZCxhZGRMYWJlbCxhZGRQYXVzZVwiLCBuYW1lID0+IHtcbi8vIFx0VHdlZW4ucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24oKSB7XG4vLyBcdFx0bGV0IHRsID0gbmV3IFRpbWVsaW5lKCk7XG4vLyBcdFx0cmV0dXJuIF9hZGRUb1RpbWVsaW5lKHRsLCB0aGlzKVtuYW1lXS5hcHBseSh0bCwgdG9BcnJheShhcmd1bWVudHMpKTtcbi8vIFx0fVxuLy8gfSk7XG4vL2ZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LiBMZXZlcmFnZSB0aGUgdGltZWxpbmUgY2FsbHMuXG5cblxuX2ZvckVhY2hOYW1lKFwic3RhZ2dlclRvLHN0YWdnZXJGcm9tLHN0YWdnZXJGcm9tVG9cIiwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgVHdlZW5bbmFtZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRsID0gbmV3IFRpbWVsaW5lKCksXG4gICAgICAgIHBhcmFtcyA9IF9zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7XG5cbiAgICBwYXJhbXMuc3BsaWNlKG5hbWUgPT09IFwic3RhZ2dlckZyb21Ub1wiID8gNSA6IDQsIDAsIDApO1xuICAgIHJldHVybiB0bFtuYW1lXS5hcHBseSh0bCwgcGFyYW1zKTtcbiAgfTtcbn0pO1xuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBQUk9QVFdFRU5cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuXG52YXIgX3NldHRlclBsYWluID0gZnVuY3Rpb24gX3NldHRlclBsYWluKHRhcmdldCwgcHJvcGVydHksIHZhbHVlKSB7XG4gIHJldHVybiB0YXJnZXRbcHJvcGVydHldID0gdmFsdWU7XG59LFxuICAgIF9zZXR0ZXJGdW5jID0gZnVuY3Rpb24gX3NldHRlckZ1bmModGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgcmV0dXJuIHRhcmdldFtwcm9wZXJ0eV0odmFsdWUpO1xufSxcbiAgICBfc2V0dGVyRnVuY1dpdGhQYXJhbSA9IGZ1bmN0aW9uIF9zZXR0ZXJGdW5jV2l0aFBhcmFtKHRhcmdldCwgcHJvcGVydHksIHZhbHVlLCBkYXRhKSB7XG4gIHJldHVybiB0YXJnZXRbcHJvcGVydHldKGRhdGEuZnAsIHZhbHVlKTtcbn0sXG4gICAgX3NldHRlckF0dHJpYnV0ZSA9IGZ1bmN0aW9uIF9zZXR0ZXJBdHRyaWJ1dGUodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgcmV0dXJuIHRhcmdldC5zZXRBdHRyaWJ1dGUocHJvcGVydHksIHZhbHVlKTtcbn0sXG4gICAgX2dldFNldHRlciA9IGZ1bmN0aW9uIF9nZXRTZXR0ZXIodGFyZ2V0LCBwcm9wZXJ0eSkge1xuICByZXR1cm4gX2lzRnVuY3Rpb24odGFyZ2V0W3Byb3BlcnR5XSkgPyBfc2V0dGVyRnVuYyA6IF9pc1VuZGVmaW5lZCh0YXJnZXRbcHJvcGVydHldKSAmJiB0YXJnZXQuc2V0QXR0cmlidXRlID8gX3NldHRlckF0dHJpYnV0ZSA6IF9zZXR0ZXJQbGFpbjtcbn0sXG4gICAgX3JlbmRlclBsYWluID0gZnVuY3Rpb24gX3JlbmRlclBsYWluKHJhdGlvLCBkYXRhKSB7XG4gIHJldHVybiBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgTWF0aC5yb3VuZCgoZGF0YS5zICsgZGF0YS5jICogcmF0aW8pICogMTAwMDAwMCkgLyAxMDAwMDAwLCBkYXRhKTtcbn0sXG4gICAgX3JlbmRlckJvb2xlYW4gPSBmdW5jdGlvbiBfcmVuZGVyQm9vbGVhbihyYXRpbywgZGF0YSkge1xuICByZXR1cm4gZGF0YS5zZXQoZGF0YS50LCBkYXRhLnAsICEhKGRhdGEucyArIGRhdGEuYyAqIHJhdGlvKSwgZGF0YSk7XG59LFxuICAgIF9yZW5kZXJDb21wbGV4U3RyaW5nID0gZnVuY3Rpb24gX3JlbmRlckNvbXBsZXhTdHJpbmcocmF0aW8sIGRhdGEpIHtcbiAgdmFyIHB0ID0gZGF0YS5fcHQsXG4gICAgICBzID0gXCJcIjtcblxuICBpZiAoIXJhdGlvICYmIGRhdGEuYikge1xuICAgIC8vYiA9IGJlZ2lubmluZyBzdHJpbmdcbiAgICBzID0gZGF0YS5iO1xuICB9IGVsc2UgaWYgKHJhdGlvID09PSAxICYmIGRhdGEuZSkge1xuICAgIC8vZSA9IGVuZGluZyBzdHJpbmdcbiAgICBzID0gZGF0YS5lO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChwdCkge1xuICAgICAgcyA9IHB0LnAgKyAocHQubSA/IHB0Lm0ocHQucyArIHB0LmMgKiByYXRpbykgOiBNYXRoLnJvdW5kKChwdC5zICsgcHQuYyAqIHJhdGlvKSAqIDEwMDAwKSAvIDEwMDAwKSArIHM7IC8vd2UgdXNlIHRoZSBcInBcIiBwcm9wZXJ0eSBmb3IgdGhlIHRleHQgaW5iZXR3ZWVuIChsaWtlIGEgc3VmZml4KS4gQW5kIGluIHRoZSBjb250ZXh0IG9mIGEgY29tcGxleCBzdHJpbmcsIHRoZSBtb2RpZmllciAobSkgaXMgdHlwaWNhbGx5IGp1c3QgTWF0aC5yb3VuZCgpLCBsaWtlIGZvciBSR0IgY29sb3JzLlxuXG4gICAgICBwdCA9IHB0Ll9uZXh0O1xuICAgIH1cblxuICAgIHMgKz0gZGF0YS5jOyAvL3dlIHVzZSB0aGUgXCJjXCIgb2YgdGhlIFByb3BUd2VlbiB0byBzdG9yZSB0aGUgZmluYWwgY2h1bmsgb2Ygbm9uLW51bWVyaWMgdGV4dC5cbiAgfVxuXG4gIGRhdGEuc2V0KGRhdGEudCwgZGF0YS5wLCBzLCBkYXRhKTtcbn0sXG4gICAgX3JlbmRlclByb3BUd2VlbnMgPSBmdW5jdGlvbiBfcmVuZGVyUHJvcFR3ZWVucyhyYXRpbywgZGF0YSkge1xuICB2YXIgcHQgPSBkYXRhLl9wdDtcblxuICB3aGlsZSAocHQpIHtcbiAgICBwdC5yKHJhdGlvLCBwdC5kKTtcbiAgICBwdCA9IHB0Ll9uZXh0O1xuICB9XG59LFxuICAgIF9hZGRQbHVnaW5Nb2RpZmllciA9IGZ1bmN0aW9uIF9hZGRQbHVnaW5Nb2RpZmllcihtb2RpZmllciwgdHdlZW4sIHRhcmdldCwgcHJvcGVydHkpIHtcbiAgdmFyIHB0ID0gdGhpcy5fcHQsXG4gICAgICBuZXh0O1xuXG4gIHdoaWxlIChwdCkge1xuICAgIG5leHQgPSBwdC5fbmV4dDtcbiAgICBwdC5wID09PSBwcm9wZXJ0eSAmJiBwdC5tb2RpZmllcihtb2RpZmllciwgdHdlZW4sIHRhcmdldCk7XG4gICAgcHQgPSBuZXh0O1xuICB9XG59LFxuICAgIF9raWxsUHJvcFR3ZWVuc09mID0gZnVuY3Rpb24gX2tpbGxQcm9wVHdlZW5zT2YocHJvcGVydHkpIHtcbiAgdmFyIHB0ID0gdGhpcy5fcHQsXG4gICAgICBoYXNOb25EZXBlbmRlbnRSZW1haW5pbmcsXG4gICAgICBuZXh0O1xuXG4gIHdoaWxlIChwdCkge1xuICAgIG5leHQgPSBwdC5fbmV4dDtcblxuICAgIGlmIChwdC5wID09PSBwcm9wZXJ0eSAmJiAhcHQub3AgfHwgcHQub3AgPT09IHByb3BlcnR5KSB7XG4gICAgICBfcmVtb3ZlTGlua2VkTGlzdEl0ZW0odGhpcywgcHQsIFwiX3B0XCIpO1xuICAgIH0gZWxzZSBpZiAoIXB0LmRlcCkge1xuICAgICAgaGFzTm9uRGVwZW5kZW50UmVtYWluaW5nID0gMTtcbiAgICB9XG5cbiAgICBwdCA9IG5leHQ7XG4gIH1cblxuICByZXR1cm4gIWhhc05vbkRlcGVuZGVudFJlbWFpbmluZztcbn0sXG4gICAgX3NldHRlcldpdGhNb2RpZmllciA9IGZ1bmN0aW9uIF9zZXR0ZXJXaXRoTW9kaWZpZXIodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIGRhdGEpIHtcbiAgZGF0YS5tU2V0KHRhcmdldCwgcHJvcGVydHksIGRhdGEubS5jYWxsKGRhdGEudHdlZW4sIHZhbHVlLCBkYXRhLm10KSwgZGF0YSk7XG59LFxuICAgIF9zb3J0UHJvcFR3ZWVuc0J5UHJpb3JpdHkgPSBmdW5jdGlvbiBfc29ydFByb3BUd2VlbnNCeVByaW9yaXR5KHBhcmVudCkge1xuICB2YXIgcHQgPSBwYXJlbnQuX3B0LFxuICAgICAgbmV4dCxcbiAgICAgIHB0MixcbiAgICAgIGZpcnN0LFxuICAgICAgbGFzdDsgLy9zb3J0cyB0aGUgUHJvcFR3ZWVuIGxpbmtlZCBsaXN0IGluIG9yZGVyIG9mIHByaW9yaXR5IGJlY2F1c2Ugc29tZSBwbHVnaW5zIG5lZWQgdG8gZG8gdGhlaXIgd29yayBhZnRlciBBTEwgb2YgdGhlIFByb3BUd2VlbnMgd2VyZSBjcmVhdGVkIChsaWtlIFJvdW5kUHJvcHNQbHVnaW4gYW5kIE1vZGlmaWVyc1BsdWdpbilcblxuICB3aGlsZSAocHQpIHtcbiAgICBuZXh0ID0gcHQuX25leHQ7XG4gICAgcHQyID0gZmlyc3Q7XG5cbiAgICB3aGlsZSAocHQyICYmIHB0Mi5wciA+IHB0LnByKSB7XG4gICAgICBwdDIgPSBwdDIuX25leHQ7XG4gICAgfVxuXG4gICAgaWYgKHB0Ll9wcmV2ID0gcHQyID8gcHQyLl9wcmV2IDogbGFzdCkge1xuICAgICAgcHQuX3ByZXYuX25leHQgPSBwdDtcbiAgICB9IGVsc2Uge1xuICAgICAgZmlyc3QgPSBwdDtcbiAgICB9XG5cbiAgICBpZiAocHQuX25leHQgPSBwdDIpIHtcbiAgICAgIHB0Mi5fcHJldiA9IHB0O1xuICAgIH0gZWxzZSB7XG4gICAgICBsYXN0ID0gcHQ7XG4gICAgfVxuXG4gICAgcHQgPSBuZXh0O1xuICB9XG5cbiAgcGFyZW50Ll9wdCA9IGZpcnN0O1xufTsgLy9Qcm9wVHdlZW4ga2V5OiB0ID0gdGFyZ2V0LCBwID0gcHJvcCwgciA9IHJlbmRlcmVyLCBkID0gZGF0YSwgcyA9IHN0YXJ0LCBjID0gY2hhbmdlLCBvcCA9IG92ZXJ3cml0ZVByb3BlcnR5IChPTkxZIHBvcHVsYXRlZCB3aGVuIGl0J3MgZGlmZmVyZW50IHRoYW4gcCksIHByID0gcHJpb3JpdHksIF9uZXh0L19wcmV2IGZvciB0aGUgbGlua2VkIGxpc3Qgc2libGluZ3MsIHNldCA9IHNldHRlciwgbSA9IG1vZGlmaWVyLCBtU2V0ID0gbW9kaWZpZXJTZXR0ZXIgKHRoZSBvcmlnaW5hbCBzZXR0ZXIsIGJlZm9yZSBhIG1vZGlmaWVyIHdhcyBhZGRlZClcblxuXG5leHBvcnQgdmFyIFByb3BUd2VlbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFByb3BUd2VlbihuZXh0LCB0YXJnZXQsIHByb3AsIHN0YXJ0LCBjaGFuZ2UsIHJlbmRlcmVyLCBkYXRhLCBzZXR0ZXIsIHByaW9yaXR5KSB7XG4gICAgdGhpcy50ID0gdGFyZ2V0O1xuICAgIHRoaXMucyA9IHN0YXJ0O1xuICAgIHRoaXMuYyA9IGNoYW5nZTtcbiAgICB0aGlzLnAgPSBwcm9wO1xuICAgIHRoaXMuciA9IHJlbmRlcmVyIHx8IF9yZW5kZXJQbGFpbjtcbiAgICB0aGlzLmQgPSBkYXRhIHx8IHRoaXM7XG4gICAgdGhpcy5zZXQgPSBzZXR0ZXIgfHwgX3NldHRlclBsYWluO1xuICAgIHRoaXMucHIgPSBwcmlvcml0eSB8fCAwO1xuICAgIHRoaXMuX25leHQgPSBuZXh0O1xuXG4gICAgaWYgKG5leHQpIHtcbiAgICAgIG5leHQuX3ByZXYgPSB0aGlzO1xuICAgIH1cbiAgfVxuXG4gIHZhciBfcHJvdG80ID0gUHJvcFR3ZWVuLnByb3RvdHlwZTtcblxuICBfcHJvdG80Lm1vZGlmaWVyID0gZnVuY3Rpb24gbW9kaWZpZXIoZnVuYywgdHdlZW4sIHRhcmdldCkge1xuICAgIHRoaXMubVNldCA9IHRoaXMubVNldCB8fCB0aGlzLnNldDsgLy9pbiBjYXNlIGl0IHdhcyBhbHJlYWR5IHNldCAoYSBQcm9wVHdlZW4gY2FuIG9ubHkgaGF2ZSBvbmUgbW9kaWZpZXIpXG5cbiAgICB0aGlzLnNldCA9IF9zZXR0ZXJXaXRoTW9kaWZpZXI7XG4gICAgdGhpcy5tID0gZnVuYztcbiAgICB0aGlzLm10ID0gdGFyZ2V0OyAvL21vZGlmaWVyIHRhcmdldFxuXG4gICAgdGhpcy50d2VlbiA9IHR3ZWVuO1xuICB9O1xuXG4gIHJldHVybiBQcm9wVHdlZW47XG59KCk7IC8vSW5pdGlhbGl6YXRpb24gdGFza3NcblxuX2ZvckVhY2hOYW1lKF9jYWxsYmFja05hbWVzICsgXCJwYXJlbnQsZHVyYXRpb24sZWFzZSxkZWxheSxvdmVyd3JpdGUscnVuQmFja3dhcmRzLHN0YXJ0QXQseW95byxpbW1lZGlhdGVSZW5kZXIscmVwZWF0LHJlcGVhdERlbGF5LGRhdGEscGF1c2VkLHJldmVyc2VkLGxhenksY2FsbGJhY2tTY29wZSxzdHJpbmdGaWx0ZXIsaWQseW95b0Vhc2Usc3RhZ2dlcixpbmhlcml0LHJlcGVhdFJlZnJlc2gsa2V5ZnJhbWVzLGF1dG9SZXZlcnQsc2Nyb2xsVHJpZ2dlclwiLCBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gX3Jlc2VydmVkUHJvcHNbbmFtZV0gPSAxO1xufSk7XG5cbl9nbG9iYWxzLlR3ZWVuTWF4ID0gX2dsb2JhbHMuVHdlZW5MaXRlID0gVHdlZW47XG5fZ2xvYmFscy5UaW1lbGluZUxpdGUgPSBfZ2xvYmFscy5UaW1lbGluZU1heCA9IFRpbWVsaW5lO1xuX2dsb2JhbFRpbWVsaW5lID0gbmV3IFRpbWVsaW5lKHtcbiAgc29ydENoaWxkcmVuOiBmYWxzZSxcbiAgZGVmYXVsdHM6IF9kZWZhdWx0cyxcbiAgYXV0b1JlbW92ZUNoaWxkcmVuOiB0cnVlLFxuICBpZDogXCJyb290XCIsXG4gIHNtb290aENoaWxkVGltaW5nOiB0cnVlXG59KTtcbl9jb25maWcuc3RyaW5nRmlsdGVyID0gX2NvbG9yU3RyaW5nRmlsdGVyO1xuXG52YXIgX21lZGlhID0gW10sXG4gICAgX2xpc3RlbmVycyA9IHt9LFxuICAgIF9lbXB0eUFycmF5ID0gW10sXG4gICAgX2xhc3RNZWRpYVRpbWUgPSAwLFxuICAgIF9jb250ZXh0SUQgPSAwLFxuICAgIF9kaXNwYXRjaCA9IGZ1bmN0aW9uIF9kaXNwYXRjaCh0eXBlKSB7XG4gIHJldHVybiAoX2xpc3RlbmVyc1t0eXBlXSB8fCBfZW1wdHlBcnJheSkubWFwKGZ1bmN0aW9uIChmKSB7XG4gICAgcmV0dXJuIGYoKTtcbiAgfSk7XG59LFxuICAgIF9vbk1lZGlhQ2hhbmdlID0gZnVuY3Rpb24gX29uTWVkaWFDaGFuZ2UoKSB7XG4gIHZhciB0aW1lID0gRGF0ZS5ub3coKSxcbiAgICAgIG1hdGNoZXMgPSBbXTtcblxuICBpZiAodGltZSAtIF9sYXN0TWVkaWFUaW1lID4gMikge1xuICAgIF9kaXNwYXRjaChcIm1hdGNoTWVkaWFJbml0XCIpO1xuXG4gICAgX21lZGlhLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgIHZhciBxdWVyaWVzID0gYy5xdWVyaWVzLFxuICAgICAgICAgIGNvbmRpdGlvbnMgPSBjLmNvbmRpdGlvbnMsXG4gICAgICAgICAgbWF0Y2gsXG4gICAgICAgICAgcCxcbiAgICAgICAgICBhbnlNYXRjaCxcbiAgICAgICAgICB0b2dnbGVkO1xuXG4gICAgICBmb3IgKHAgaW4gcXVlcmllcykge1xuICAgICAgICBtYXRjaCA9IF93aW4ubWF0Y2hNZWRpYShxdWVyaWVzW3BdKS5tYXRjaGVzOyAvLyBGaXJlZm94IGRvZXNuJ3QgdXBkYXRlIHRoZSBcIm1hdGNoZXNcIiBwcm9wZXJ0eSBvZiB0aGUgTWVkaWFRdWVyeUxpc3Qgb2JqZWN0IGNvcnJlY3RseSAtIGl0IG9ubHkgZG9lcyBzbyBhcyBpdCBjYWxscyBpdHMgY2hhbmdlIGhhbmRsZXIgLSBzbyB3ZSBtdXN0IHJlLWNyZWF0ZSBhIG1lZGlhIHF1ZXJ5IGhlcmUgdG8gZW5zdXJlIGl0J3MgYWNjdXJhdGUuXG5cbiAgICAgICAgbWF0Y2ggJiYgKGFueU1hdGNoID0gMSk7XG5cbiAgICAgICAgaWYgKG1hdGNoICE9PSBjb25kaXRpb25zW3BdKSB7XG4gICAgICAgICAgY29uZGl0aW9uc1twXSA9IG1hdGNoO1xuICAgICAgICAgIHRvZ2dsZWQgPSAxO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0b2dnbGVkKSB7XG4gICAgICAgIGMucmV2ZXJ0KCk7XG4gICAgICAgIGFueU1hdGNoICYmIG1hdGNoZXMucHVzaChjKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9kaXNwYXRjaChcIm1hdGNoTWVkaWFSZXZlcnRcIik7XG5cbiAgICBtYXRjaGVzLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgIHJldHVybiBjLm9uTWF0Y2goYywgZnVuY3Rpb24gKGZ1bmMpIHtcbiAgICAgICAgcmV0dXJuIGMuYWRkKG51bGwsIGZ1bmMpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgX2xhc3RNZWRpYVRpbWUgPSB0aW1lO1xuXG4gICAgX2Rpc3BhdGNoKFwibWF0Y2hNZWRpYVwiKTtcbiAgfVxufTtcblxudmFyIENvbnRleHQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBDb250ZXh0KGZ1bmMsIHNjb3BlKSB7XG4gICAgdGhpcy5zZWxlY3RvciA9IHNjb3BlICYmIHNlbGVjdG9yKHNjb3BlKTtcbiAgICB0aGlzLmRhdGEgPSBbXTtcbiAgICB0aGlzLl9yID0gW107IC8vIHJldHVybmVkL2NsZWFudXAgZnVuY3Rpb25zXG5cbiAgICB0aGlzLmlzUmV2ZXJ0ZWQgPSBmYWxzZTtcbiAgICB0aGlzLmlkID0gX2NvbnRleHRJRCsrOyAvLyB0byB3b3JrIGFyb3VuZCBpc3N1ZXMgdGhhdCBmcmFtZXdvcmtzIGxpa2UgVnVlIGNhdXNlIGJ5IG1ha2luZyB0aGluZ3MgaW50byBQcm94aWVzIHdoaWNoIG1ha2UgaXQgaW1wb3NzaWJsZSB0byBkbyBzb21ldGhpbmcgbGlrZSBfbWVkaWEuaW5kZXhPZih0aGlzKSBiZWNhdXNlIFwidGhpc1wiIHdvdWxkIG5vIGxvbmdlciByZWZlciB0byB0aGUgQ29udGV4dCBpbnN0YW5jZSBpdHNlbGYgLSBpdCdkIHJlZmVyIHRvIGEgUHJveHkhIFdlIG5lZWRlZCBhIHdheSB0byBpZGVudGlmeSB0aGUgY29udGV4dCB1bmlxdWVseVxuXG4gICAgZnVuYyAmJiB0aGlzLmFkZChmdW5jKTtcbiAgfVxuXG4gIHZhciBfcHJvdG81ID0gQ29udGV4dC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvNS5hZGQgPSBmdW5jdGlvbiBhZGQobmFtZSwgZnVuYywgc2NvcGUpIHtcbiAgICAvLyBwb3NzaWJsZSBmdXR1cmUgYWRkaXRpb24gaWYgd2UgbmVlZCB0aGUgYWJpbGl0eSB0byBhZGQoKSBhbiBhbmltYXRpb24gdG8gYSBjb250ZXh0IGFuZCBmb3Igd2hhdGV2ZXIgcmVhc29uIGNhbm5vdCBjcmVhdGUgdGhhdCBhbmltYXRpb24gaW5zaWRlIG9mIGEgY29udGV4dC5hZGQoKCkgPT4gey4uLn0pIGZ1bmN0aW9uLlxuICAgIC8vIGlmIChuYW1lICYmIF9pc0Z1bmN0aW9uKG5hbWUucmV2ZXJ0KSkge1xuICAgIC8vIFx0dGhpcy5kYXRhLnB1c2gobmFtZSk7XG4gICAgLy8gXHRyZXR1cm4gKG5hbWUuX2N0eCA9IHRoaXMpO1xuICAgIC8vIH1cbiAgICBpZiAoX2lzRnVuY3Rpb24obmFtZSkpIHtcbiAgICAgIHNjb3BlID0gZnVuYztcbiAgICAgIGZ1bmMgPSBuYW1lO1xuICAgICAgbmFtZSA9IF9pc0Z1bmN0aW9uO1xuICAgIH1cblxuICAgIHZhciBzZWxmID0gdGhpcyxcbiAgICAgICAgZiA9IGZ1bmN0aW9uIGYoKSB7XG4gICAgICB2YXIgcHJldiA9IF9jb250ZXh0LFxuICAgICAgICAgIHByZXZTZWxlY3RvciA9IHNlbGYuc2VsZWN0b3IsXG4gICAgICAgICAgcmVzdWx0O1xuICAgICAgcHJldiAmJiBwcmV2ICE9PSBzZWxmICYmIHByZXYuZGF0YS5wdXNoKHNlbGYpO1xuICAgICAgc2NvcGUgJiYgKHNlbGYuc2VsZWN0b3IgPSBzZWxlY3RvcihzY29wZSkpO1xuICAgICAgX2NvbnRleHQgPSBzZWxmO1xuICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseShzZWxmLCBhcmd1bWVudHMpO1xuICAgICAgX2lzRnVuY3Rpb24ocmVzdWx0KSAmJiBzZWxmLl9yLnB1c2gocmVzdWx0KTtcbiAgICAgIF9jb250ZXh0ID0gcHJldjtcbiAgICAgIHNlbGYuc2VsZWN0b3IgPSBwcmV2U2VsZWN0b3I7XG4gICAgICBzZWxmLmlzUmV2ZXJ0ZWQgPSBmYWxzZTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIHNlbGYubGFzdCA9IGY7XG4gICAgcmV0dXJuIG5hbWUgPT09IF9pc0Z1bmN0aW9uID8gZihzZWxmLCBmdW5jdGlvbiAoZnVuYykge1xuICAgICAgcmV0dXJuIHNlbGYuYWRkKG51bGwsIGZ1bmMpO1xuICAgIH0pIDogbmFtZSA/IHNlbGZbbmFtZV0gPSBmIDogZjtcbiAgfTtcblxuICBfcHJvdG81Lmlnbm9yZSA9IGZ1bmN0aW9uIGlnbm9yZShmdW5jKSB7XG4gICAgdmFyIHByZXYgPSBfY29udGV4dDtcbiAgICBfY29udGV4dCA9IG51bGw7XG4gICAgZnVuYyh0aGlzKTtcbiAgICBfY29udGV4dCA9IHByZXY7XG4gIH07XG5cbiAgX3Byb3RvNS5nZXRUd2VlbnMgPSBmdW5jdGlvbiBnZXRUd2VlbnMoKSB7XG4gICAgdmFyIGEgPSBbXTtcbiAgICB0aGlzLmRhdGEuZm9yRWFjaChmdW5jdGlvbiAoZSkge1xuICAgICAgcmV0dXJuIGUgaW5zdGFuY2VvZiBDb250ZXh0ID8gYS5wdXNoLmFwcGx5KGEsIGUuZ2V0VHdlZW5zKCkpIDogZSBpbnN0YW5jZW9mIFR3ZWVuICYmICEoZS5wYXJlbnQgJiYgZS5wYXJlbnQuZGF0YSA9PT0gXCJuZXN0ZWRcIikgJiYgYS5wdXNoKGUpO1xuICAgIH0pO1xuICAgIHJldHVybiBhO1xuICB9O1xuXG4gIF9wcm90bzUuY2xlYXIgPSBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICB0aGlzLl9yLmxlbmd0aCA9IHRoaXMuZGF0YS5sZW5ndGggPSAwO1xuICB9O1xuXG4gIF9wcm90bzUua2lsbCA9IGZ1bmN0aW9uIGtpbGwocmV2ZXJ0LCBtYXRjaE1lZGlhKSB7XG4gICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICBpZiAocmV2ZXJ0KSB7XG4gICAgICAoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdHdlZW5zID0gX3RoaXM0LmdldFR3ZWVucygpLFxuICAgICAgICAgICAgaSA9IF90aGlzNC5kYXRhLmxlbmd0aCxcbiAgICAgICAgICAgIHQ7XG5cbiAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgIC8vIEZsaXAgcGx1Z2luIHR3ZWVucyBhcmUgdmVyeSBkaWZmZXJlbnQgaW4gdGhhdCB0aGV5IHNob3VsZCBhY3R1YWxseSBiZSBwdXNoZWQgdG8gdGhlaXIgZW5kLiBUaGUgcGx1Z2luIHJlcGxhY2VzIHRoZSB0aW1lbGluZSdzIC5yZXZlcnQoKSBtZXRob2QgdG8gZG8gZXhhY3RseSB0aGF0LiBCdXQgd2UgYWxzbyBuZWVkIHRvIHJlbW92ZSBhbnkgb2YgdGhvc2UgbmVzdGVkIHR3ZWVucyBpbnNpZGUgdGhlIGZsaXAgdGltZWxpbmUgc28gdGhhdCB0aGV5IGRvbid0IGdldCBpbmRpdmlkdWFsbHkgcmV2ZXJ0ZWQuXG4gICAgICAgICAgdCA9IF90aGlzNC5kYXRhW2ldO1xuXG4gICAgICAgICAgaWYgKHQuZGF0YSA9PT0gXCJpc0ZsaXBcIikge1xuICAgICAgICAgICAgdC5yZXZlcnQoKTtcbiAgICAgICAgICAgIHQuZ2V0Q2hpbGRyZW4odHJ1ZSwgdHJ1ZSwgZmFsc2UpLmZvckVhY2goZnVuY3Rpb24gKHR3ZWVuKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0d2VlbnMuc3BsaWNlKHR3ZWVucy5pbmRleE9mKHR3ZWVuKSwgMSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gLy8gc2F2ZSBhcyBhbiBvYmplY3Qgc28gdGhhdCB3ZSBjYW4gY2FjaGUgdGhlIGdsb2JhbFRpbWUgZm9yIGVhY2ggdHdlZW4gdG8gb3B0aW1pemUgcGVyZm9ybWFuY2UgZHVyaW5nIHRoZSBzb3J0XG5cblxuICAgICAgICB0d2VlbnMubWFwKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGc6IHQuX2R1ciB8fCB0Ll9kZWxheSB8fCB0Ll9zYXQgJiYgIXQuX3NhdC52YXJzLmltbWVkaWF0ZVJlbmRlciA/IHQuZ2xvYmFsVGltZSgwKSA6IC1JbmZpbml0eSxcbiAgICAgICAgICAgIHQ6IHRcbiAgICAgICAgICB9O1xuICAgICAgICB9KS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgcmV0dXJuIGIuZyAtIGEuZyB8fCAtSW5maW5pdHk7XG4gICAgICAgIH0pLmZvckVhY2goZnVuY3Rpb24gKG8pIHtcbiAgICAgICAgICByZXR1cm4gby50LnJldmVydChyZXZlcnQpO1xuICAgICAgICB9KTsgLy8gbm90ZTogYWxsIG9mIHRoZSBfc3RhcnRBdCB0d2VlbnMgc2hvdWxkIGJlIHJldmVydGVkIGluIHJldmVyc2Ugb3JkZXIgdGhhdCB0aGV5IHdlcmUgY3JlYXRlZCwgYW5kIHRoZXknbGwgYWxsIGhhdmUgdGhlIHNhbWUgZ2xvYmFsVGltZSAoLTEpIHNvIHRoZSBcIiB8fCAtMVwiIGluIHRoZSBzb3J0IGtlZXBzIHRoZSBvcmRlciBwcm9wZXJseS5cblxuICAgICAgICBpID0gX3RoaXM0LmRhdGEubGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICAvLyBtYWtlIHN1cmUgd2UgbG9vcCBiYWNrd2FyZHMgc28gdGhhdCwgZm9yIGV4YW1wbGUsIFNwbGl0VGV4dHMgdGhhdCB3ZXJlIGNyZWF0ZWQgbGF0ZXIgb24gdGhlIHNhbWUgZWxlbWVudCBnZXQgcmV2ZXJ0ZWQgZmlyc3RcbiAgICAgICAgICB0ID0gX3RoaXM0LmRhdGFbaV07XG5cbiAgICAgICAgICBpZiAodCBpbnN0YW5jZW9mIFRpbWVsaW5lKSB7XG4gICAgICAgICAgICBpZiAodC5kYXRhICE9PSBcIm5lc3RlZFwiKSB7XG4gICAgICAgICAgICAgIHQuc2Nyb2xsVHJpZ2dlciAmJiB0LnNjcm9sbFRyaWdnZXIucmV2ZXJ0KCk7XG4gICAgICAgICAgICAgIHQua2lsbCgpOyAvLyBkb24ndCByZXZlcnQoKSB0aGUgdGltZWxpbmUgYmVjYXVzZSB0aGF0J3MgZHVwbGljYXRpbmcgZWZmb3J0cyBzaW5jZSB3ZSBhbHJlYWR5IHJldmVydGVkIGFsbCB0aGUgdHdlZW5zXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICEodCBpbnN0YW5jZW9mIFR3ZWVuKSAmJiB0LnJldmVydCAmJiB0LnJldmVydChyZXZlcnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzNC5fci5mb3JFYWNoKGZ1bmN0aW9uIChmKSB7XG4gICAgICAgICAgcmV0dXJuIGYocmV2ZXJ0LCBfdGhpczQpO1xuICAgICAgICB9KTtcblxuICAgICAgICBfdGhpczQuaXNSZXZlcnRlZCA9IHRydWU7XG4gICAgICB9KSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRhdGEuZm9yRWFjaChmdW5jdGlvbiAoZSkge1xuICAgICAgICByZXR1cm4gZS5raWxsICYmIGUua2lsbCgpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpcy5jbGVhcigpO1xuXG4gICAgaWYgKG1hdGNoTWVkaWEpIHtcbiAgICAgIHZhciBpID0gX21lZGlhLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAvLyBwcmV2aW91c2x5LCB3ZSBjaGVja2VkIF9tZWRpYS5pbmRleE9mKHRoaXMpLCBidXQgc29tZSBmcmFtZXdvcmtzIGxpa2UgVnVlIGVuZm9yY2UgUHJveHkgb2JqZWN0cyB0aGF0IG1ha2UgaXQgaW1wb3NzaWJsZSB0byBnZXQgdGhlIHByb3BlciByZXN1bHQgdGhhdCB3YXksIHNvIHdlIG11c3QgdXNlIGEgdW5pcXVlIElEIG51bWJlciBpbnN0ZWFkLlxuICAgICAgICBfbWVkaWFbaV0uaWQgPT09IHRoaXMuaWQgJiYgX21lZGlhLnNwbGljZShpLCAxKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvNS5yZXZlcnQgPSBmdW5jdGlvbiByZXZlcnQoY29uZmlnKSB7XG4gICAgdGhpcy5raWxsKGNvbmZpZyB8fCB7fSk7XG4gIH07XG5cbiAgcmV0dXJuIENvbnRleHQ7XG59KCk7XG5cbnZhciBNYXRjaE1lZGlhID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gTWF0Y2hNZWRpYShzY29wZSkge1xuICAgIHRoaXMuY29udGV4dHMgPSBbXTtcbiAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG4gICAgX2NvbnRleHQgJiYgX2NvbnRleHQuZGF0YS5wdXNoKHRoaXMpO1xuICB9XG5cbiAgdmFyIF9wcm90bzYgPSBNYXRjaE1lZGlhLnByb3RvdHlwZTtcblxuICBfcHJvdG82LmFkZCA9IGZ1bmN0aW9uIGFkZChjb25kaXRpb25zLCBmdW5jLCBzY29wZSkge1xuICAgIF9pc09iamVjdChjb25kaXRpb25zKSB8fCAoY29uZGl0aW9ucyA9IHtcbiAgICAgIG1hdGNoZXM6IGNvbmRpdGlvbnNcbiAgICB9KTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KDAsIHNjb3BlIHx8IHRoaXMuc2NvcGUpLFxuICAgICAgICBjb25kID0gY29udGV4dC5jb25kaXRpb25zID0ge30sXG4gICAgICAgIG1xLFxuICAgICAgICBwLFxuICAgICAgICBhY3RpdmU7XG4gICAgX2NvbnRleHQgJiYgIWNvbnRleHQuc2VsZWN0b3IgJiYgKGNvbnRleHQuc2VsZWN0b3IgPSBfY29udGV4dC5zZWxlY3Rvcik7IC8vIGluIGNhc2UgYSBjb250ZXh0IGlzIGNyZWF0ZWQgaW5zaWRlIGEgY29udGV4dC4gTGlrZSBhIGdzYXAubWF0Y2hNZWRpYSgpIHRoYXQncyBpbnNpZGUgYSBzY29wZWQgZ3NhcC5jb250ZXh0KClcblxuICAgIHRoaXMuY29udGV4dHMucHVzaChjb250ZXh0KTtcbiAgICBmdW5jID0gY29udGV4dC5hZGQoXCJvbk1hdGNoXCIsIGZ1bmMpO1xuICAgIGNvbnRleHQucXVlcmllcyA9IGNvbmRpdGlvbnM7XG5cbiAgICBmb3IgKHAgaW4gY29uZGl0aW9ucykge1xuICAgICAgaWYgKHAgPT09IFwiYWxsXCIpIHtcbiAgICAgICAgYWN0aXZlID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1xID0gX3dpbi5tYXRjaE1lZGlhKGNvbmRpdGlvbnNbcF0pO1xuXG4gICAgICAgIGlmIChtcSkge1xuICAgICAgICAgIF9tZWRpYS5pbmRleE9mKGNvbnRleHQpIDwgMCAmJiBfbWVkaWEucHVzaChjb250ZXh0KTtcbiAgICAgICAgICAoY29uZFtwXSA9IG1xLm1hdGNoZXMpICYmIChhY3RpdmUgPSAxKTtcbiAgICAgICAgICBtcS5hZGRMaXN0ZW5lciA/IG1xLmFkZExpc3RlbmVyKF9vbk1lZGlhQ2hhbmdlKSA6IG1xLmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgX29uTWVkaWFDaGFuZ2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgYWN0aXZlICYmIGZ1bmMoY29udGV4dCwgZnVuY3Rpb24gKGYpIHtcbiAgICAgIHJldHVybiBjb250ZXh0LmFkZChudWxsLCBmKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSAvLyByZWZyZXNoKCkge1xuICAvLyBcdGxldCB0aW1lID0gX2xhc3RNZWRpYVRpbWUsXG4gIC8vIFx0XHRtZWRpYSA9IF9tZWRpYTtcbiAgLy8gXHRfbGFzdE1lZGlhVGltZSA9IC0xO1xuICAvLyBcdF9tZWRpYSA9IHRoaXMuY29udGV4dHM7XG4gIC8vIFx0X29uTWVkaWFDaGFuZ2UoKTtcbiAgLy8gXHRfbGFzdE1lZGlhVGltZSA9IHRpbWU7XG4gIC8vIFx0X21lZGlhID0gbWVkaWE7XG4gIC8vIH1cbiAgO1xuXG4gIF9wcm90bzYucmV2ZXJ0ID0gZnVuY3Rpb24gcmV2ZXJ0KGNvbmZpZykge1xuICAgIHRoaXMua2lsbChjb25maWcgfHwge30pO1xuICB9O1xuXG4gIF9wcm90bzYua2lsbCA9IGZ1bmN0aW9uIGtpbGwocmV2ZXJ0KSB7XG4gICAgdGhpcy5jb250ZXh0cy5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7XG4gICAgICByZXR1cm4gYy5raWxsKHJldmVydCwgdHJ1ZSk7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIE1hdGNoTWVkaWE7XG59KCk7XG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEdTQVBcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuXG52YXIgX2dzYXAgPSB7XG4gIHJlZ2lzdGVyUGx1Z2luOiBmdW5jdGlvbiByZWdpc3RlclBsdWdpbigpIHtcbiAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICB9XG5cbiAgICBhcmdzLmZvckVhY2goZnVuY3Rpb24gKGNvbmZpZykge1xuICAgICAgcmV0dXJuIF9jcmVhdGVQbHVnaW4oY29uZmlnKTtcbiAgICB9KTtcbiAgfSxcbiAgdGltZWxpbmU6IGZ1bmN0aW9uIHRpbWVsaW5lKHZhcnMpIHtcbiAgICByZXR1cm4gbmV3IFRpbWVsaW5lKHZhcnMpO1xuICB9LFxuICBnZXRUd2VlbnNPZjogZnVuY3Rpb24gZ2V0VHdlZW5zT2YodGFyZ2V0cywgb25seUFjdGl2ZSkge1xuICAgIHJldHVybiBfZ2xvYmFsVGltZWxpbmUuZ2V0VHdlZW5zT2YodGFyZ2V0cywgb25seUFjdGl2ZSk7XG4gIH0sXG4gIGdldFByb3BlcnR5OiBmdW5jdGlvbiBnZXRQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5LCB1bml0LCB1bmNhY2hlKSB7XG4gICAgX2lzU3RyaW5nKHRhcmdldCkgJiYgKHRhcmdldCA9IHRvQXJyYXkodGFyZ2V0KVswXSk7IC8vaW4gY2FzZSBzZWxlY3RvciB0ZXh0IG9yIGFuIGFycmF5IGlzIHBhc3NlZCBpblxuXG4gICAgdmFyIGdldHRlciA9IF9nZXRDYWNoZSh0YXJnZXQgfHwge30pLmdldCxcbiAgICAgICAgZm9ybWF0ID0gdW5pdCA/IF9wYXNzVGhyb3VnaCA6IF9udW1lcmljSWZQb3NzaWJsZTtcblxuICAgIHVuaXQgPT09IFwibmF0aXZlXCIgJiYgKHVuaXQgPSBcIlwiKTtcbiAgICByZXR1cm4gIXRhcmdldCA/IHRhcmdldCA6ICFwcm9wZXJ0eSA/IGZ1bmN0aW9uIChwcm9wZXJ0eSwgdW5pdCwgdW5jYWNoZSkge1xuICAgICAgcmV0dXJuIGZvcm1hdCgoX3BsdWdpbnNbcHJvcGVydHldICYmIF9wbHVnaW5zW3Byb3BlcnR5XS5nZXQgfHwgZ2V0dGVyKSh0YXJnZXQsIHByb3BlcnR5LCB1bml0LCB1bmNhY2hlKSk7XG4gICAgfSA6IGZvcm1hdCgoX3BsdWdpbnNbcHJvcGVydHldICYmIF9wbHVnaW5zW3Byb3BlcnR5XS5nZXQgfHwgZ2V0dGVyKSh0YXJnZXQsIHByb3BlcnR5LCB1bml0LCB1bmNhY2hlKSk7XG4gIH0sXG4gIHF1aWNrU2V0dGVyOiBmdW5jdGlvbiBxdWlja1NldHRlcih0YXJnZXQsIHByb3BlcnR5LCB1bml0KSB7XG4gICAgdGFyZ2V0ID0gdG9BcnJheSh0YXJnZXQpO1xuXG4gICAgaWYgKHRhcmdldC5sZW5ndGggPiAxKSB7XG4gICAgICB2YXIgc2V0dGVycyA9IHRhcmdldC5tYXAoZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgcmV0dXJuIGdzYXAucXVpY2tTZXR0ZXIodCwgcHJvcGVydHksIHVuaXQpO1xuICAgICAgfSksXG4gICAgICAgICAgbCA9IHNldHRlcnMubGVuZ3RoO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgaSA9IGw7XG5cbiAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgIHNldHRlcnNbaV0odmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIHRhcmdldCA9IHRhcmdldFswXSB8fCB7fTtcblxuICAgIHZhciBQbHVnaW4gPSBfcGx1Z2luc1twcm9wZXJ0eV0sXG4gICAgICAgIGNhY2hlID0gX2dldENhY2hlKHRhcmdldCksXG4gICAgICAgIHAgPSBjYWNoZS5oYXJuZXNzICYmIChjYWNoZS5oYXJuZXNzLmFsaWFzZXMgfHwge30pW3Byb3BlcnR5XSB8fCBwcm9wZXJ0eSxcbiAgICAgICAgLy8gaW4gY2FzZSBpdCdzIGFuIGFsaWFzLCBsaWtlIFwicm90YXRlXCIgZm9yIFwicm90YXRpb25cIi5cbiAgICBzZXR0ZXIgPSBQbHVnaW4gPyBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHZhciBwID0gbmV3IFBsdWdpbigpO1xuICAgICAgX3F1aWNrVHdlZW4uX3B0ID0gMDtcbiAgICAgIHAuaW5pdCh0YXJnZXQsIHVuaXQgPyB2YWx1ZSArIHVuaXQgOiB2YWx1ZSwgX3F1aWNrVHdlZW4sIDAsIFt0YXJnZXRdKTtcbiAgICAgIHAucmVuZGVyKDEsIHApO1xuICAgICAgX3F1aWNrVHdlZW4uX3B0ICYmIF9yZW5kZXJQcm9wVHdlZW5zKDEsIF9xdWlja1R3ZWVuKTtcbiAgICB9IDogY2FjaGUuc2V0KHRhcmdldCwgcCk7XG5cbiAgICByZXR1cm4gUGx1Z2luID8gc2V0dGVyIDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICByZXR1cm4gc2V0dGVyKHRhcmdldCwgcCwgdW5pdCA/IHZhbHVlICsgdW5pdCA6IHZhbHVlLCBjYWNoZSwgMSk7XG4gICAgfTtcbiAgfSxcbiAgcXVpY2tUbzogZnVuY3Rpb24gcXVpY2tUbyh0YXJnZXQsIHByb3BlcnR5LCB2YXJzKSB7XG4gICAgdmFyIF9tZXJnZTI7XG5cbiAgICB2YXIgdHdlZW4gPSBnc2FwLnRvKHRhcmdldCwgX21lcmdlKChfbWVyZ2UyID0ge30sIF9tZXJnZTJbcHJvcGVydHldID0gXCIrPTAuMVwiLCBfbWVyZ2UyLnBhdXNlZCA9IHRydWUsIF9tZXJnZTIpLCB2YXJzIHx8IHt9KSksXG4gICAgICAgIGZ1bmMgPSBmdW5jdGlvbiBmdW5jKHZhbHVlLCBzdGFydCwgc3RhcnRJc1JlbGF0aXZlKSB7XG4gICAgICByZXR1cm4gdHdlZW4ucmVzZXRUbyhwcm9wZXJ0eSwgdmFsdWUsIHN0YXJ0LCBzdGFydElzUmVsYXRpdmUpO1xuICAgIH07XG5cbiAgICBmdW5jLnR3ZWVuID0gdHdlZW47XG4gICAgcmV0dXJuIGZ1bmM7XG4gIH0sXG4gIGlzVHdlZW5pbmc6IGZ1bmN0aW9uIGlzVHdlZW5pbmcodGFyZ2V0cykge1xuICAgIHJldHVybiBfZ2xvYmFsVGltZWxpbmUuZ2V0VHdlZW5zT2YodGFyZ2V0cywgdHJ1ZSkubGVuZ3RoID4gMDtcbiAgfSxcbiAgZGVmYXVsdHM6IGZ1bmN0aW9uIGRlZmF1bHRzKHZhbHVlKSB7XG4gICAgdmFsdWUgJiYgdmFsdWUuZWFzZSAmJiAodmFsdWUuZWFzZSA9IF9wYXJzZUVhc2UodmFsdWUuZWFzZSwgX2RlZmF1bHRzLmVhc2UpKTtcbiAgICByZXR1cm4gX21lcmdlRGVlcChfZGVmYXVsdHMsIHZhbHVlIHx8IHt9KTtcbiAgfSxcbiAgY29uZmlnOiBmdW5jdGlvbiBjb25maWcodmFsdWUpIHtcbiAgICByZXR1cm4gX21lcmdlRGVlcChfY29uZmlnLCB2YWx1ZSB8fCB7fSk7XG4gIH0sXG4gIHJlZ2lzdGVyRWZmZWN0OiBmdW5jdGlvbiByZWdpc3RlckVmZmVjdChfcmVmMykge1xuICAgIHZhciBuYW1lID0gX3JlZjMubmFtZSxcbiAgICAgICAgZWZmZWN0ID0gX3JlZjMuZWZmZWN0LFxuICAgICAgICBwbHVnaW5zID0gX3JlZjMucGx1Z2lucyxcbiAgICAgICAgZGVmYXVsdHMgPSBfcmVmMy5kZWZhdWx0cyxcbiAgICAgICAgZXh0ZW5kVGltZWxpbmUgPSBfcmVmMy5leHRlbmRUaW1lbGluZTtcbiAgICAocGx1Z2lucyB8fCBcIlwiKS5zcGxpdChcIixcIikuZm9yRWFjaChmdW5jdGlvbiAocGx1Z2luTmFtZSkge1xuICAgICAgcmV0dXJuIHBsdWdpbk5hbWUgJiYgIV9wbHVnaW5zW3BsdWdpbk5hbWVdICYmICFfZ2xvYmFsc1twbHVnaW5OYW1lXSAmJiBfd2FybihuYW1lICsgXCIgZWZmZWN0IHJlcXVpcmVzIFwiICsgcGx1Z2luTmFtZSArIFwiIHBsdWdpbi5cIik7XG4gICAgfSk7XG5cbiAgICBfZWZmZWN0c1tuYW1lXSA9IGZ1bmN0aW9uICh0YXJnZXRzLCB2YXJzLCB0bCkge1xuICAgICAgcmV0dXJuIGVmZmVjdCh0b0FycmF5KHRhcmdldHMpLCBfc2V0RGVmYXVsdHModmFycyB8fCB7fSwgZGVmYXVsdHMpLCB0bCk7XG4gICAgfTtcblxuICAgIGlmIChleHRlbmRUaW1lbGluZSkge1xuICAgICAgVGltZWxpbmUucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24gKHRhcmdldHMsIHZhcnMsIHBvc2l0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFkZChfZWZmZWN0c1tuYW1lXSh0YXJnZXRzLCBfaXNPYmplY3QodmFycykgPyB2YXJzIDogKHBvc2l0aW9uID0gdmFycykgJiYge30sIHRoaXMpLCBwb3NpdGlvbik7XG4gICAgICB9O1xuICAgIH1cbiAgfSxcbiAgcmVnaXN0ZXJFYXNlOiBmdW5jdGlvbiByZWdpc3RlckVhc2UobmFtZSwgZWFzZSkge1xuICAgIF9lYXNlTWFwW25hbWVdID0gX3BhcnNlRWFzZShlYXNlKTtcbiAgfSxcbiAgcGFyc2VFYXNlOiBmdW5jdGlvbiBwYXJzZUVhc2UoZWFzZSwgZGVmYXVsdEVhc2UpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IF9wYXJzZUVhc2UoZWFzZSwgZGVmYXVsdEVhc2UpIDogX2Vhc2VNYXA7XG4gIH0sXG4gIGdldEJ5SWQ6IGZ1bmN0aW9uIGdldEJ5SWQoaWQpIHtcbiAgICByZXR1cm4gX2dsb2JhbFRpbWVsaW5lLmdldEJ5SWQoaWQpO1xuICB9LFxuICBleHBvcnRSb290OiBmdW5jdGlvbiBleHBvcnRSb290KHZhcnMsIGluY2x1ZGVEZWxheWVkQ2FsbHMpIHtcbiAgICBpZiAodmFycyA9PT0gdm9pZCAwKSB7XG4gICAgICB2YXJzID0ge307XG4gICAgfVxuXG4gICAgdmFyIHRsID0gbmV3IFRpbWVsaW5lKHZhcnMpLFxuICAgICAgICBjaGlsZCxcbiAgICAgICAgbmV4dDtcbiAgICB0bC5zbW9vdGhDaGlsZFRpbWluZyA9IF9pc05vdEZhbHNlKHZhcnMuc21vb3RoQ2hpbGRUaW1pbmcpO1xuXG4gICAgX2dsb2JhbFRpbWVsaW5lLnJlbW92ZSh0bCk7XG5cbiAgICB0bC5fZHAgPSAwOyAvL290aGVyd2lzZSBpdCdsbCBnZXQgcmUtYWN0aXZhdGVkIHdoZW4gYWRkaW5nIGNoaWxkcmVuIGFuZCBiZSByZS1pbnRyb2R1Y2VkIGludG8gX2dsb2JhbFRpbWVsaW5lJ3MgbGlua2VkIGxpc3QgKHRoZW4gYWRkZWQgdG8gaXRzZWxmKS5cblxuICAgIHRsLl90aW1lID0gdGwuX3RUaW1lID0gX2dsb2JhbFRpbWVsaW5lLl90aW1lO1xuICAgIGNoaWxkID0gX2dsb2JhbFRpbWVsaW5lLl9maXJzdDtcblxuICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgbmV4dCA9IGNoaWxkLl9uZXh0O1xuXG4gICAgICBpZiAoaW5jbHVkZURlbGF5ZWRDYWxscyB8fCAhKCFjaGlsZC5fZHVyICYmIGNoaWxkIGluc3RhbmNlb2YgVHdlZW4gJiYgY2hpbGQudmFycy5vbkNvbXBsZXRlID09PSBjaGlsZC5fdGFyZ2V0c1swXSkpIHtcbiAgICAgICAgX2FkZFRvVGltZWxpbmUodGwsIGNoaWxkLCBjaGlsZC5fc3RhcnQgLSBjaGlsZC5fZGVsYXkpO1xuICAgICAgfVxuXG4gICAgICBjaGlsZCA9IG5leHQ7XG4gICAgfVxuXG4gICAgX2FkZFRvVGltZWxpbmUoX2dsb2JhbFRpbWVsaW5lLCB0bCwgMCk7XG5cbiAgICByZXR1cm4gdGw7XG4gIH0sXG4gIGNvbnRleHQ6IGZ1bmN0aW9uIGNvbnRleHQoZnVuYywgc2NvcGUpIHtcbiAgICByZXR1cm4gZnVuYyA/IG5ldyBDb250ZXh0KGZ1bmMsIHNjb3BlKSA6IF9jb250ZXh0O1xuICB9LFxuICBtYXRjaE1lZGlhOiBmdW5jdGlvbiBtYXRjaE1lZGlhKHNjb3BlKSB7XG4gICAgcmV0dXJuIG5ldyBNYXRjaE1lZGlhKHNjb3BlKTtcbiAgfSxcbiAgbWF0Y2hNZWRpYVJlZnJlc2g6IGZ1bmN0aW9uIG1hdGNoTWVkaWFSZWZyZXNoKCkge1xuICAgIHJldHVybiBfbWVkaWEuZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgICAgdmFyIGNvbmQgPSBjLmNvbmRpdGlvbnMsXG4gICAgICAgICAgZm91bmQsXG4gICAgICAgICAgcDtcblxuICAgICAgZm9yIChwIGluIGNvbmQpIHtcbiAgICAgICAgaWYgKGNvbmRbcF0pIHtcbiAgICAgICAgICBjb25kW3BdID0gZmFsc2U7XG4gICAgICAgICAgZm91bmQgPSAxO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvdW5kICYmIGMucmV2ZXJ0KCk7XG4gICAgfSkgfHwgX29uTWVkaWFDaGFuZ2UoKTtcbiAgfSxcbiAgYWRkRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBjYWxsYmFjaykge1xuICAgIHZhciBhID0gX2xpc3RlbmVyc1t0eXBlXSB8fCAoX2xpc3RlbmVyc1t0eXBlXSA9IFtdKTtcbiAgICB+YS5pbmRleE9mKGNhbGxiYWNrKSB8fCBhLnB1c2goY2FsbGJhY2spO1xuICB9LFxuICByZW1vdmVFdmVudExpc3RlbmVyOiBmdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGEgPSBfbGlzdGVuZXJzW3R5cGVdLFxuICAgICAgICBpID0gYSAmJiBhLmluZGV4T2YoY2FsbGJhY2spO1xuICAgIGkgPj0gMCAmJiBhLnNwbGljZShpLCAxKTtcbiAgfSxcbiAgdXRpbHM6IHtcbiAgICB3cmFwOiB3cmFwLFxuICAgIHdyYXBZb3lvOiB3cmFwWW95byxcbiAgICBkaXN0cmlidXRlOiBkaXN0cmlidXRlLFxuICAgIHJhbmRvbTogcmFuZG9tLFxuICAgIHNuYXA6IHNuYXAsXG4gICAgbm9ybWFsaXplOiBub3JtYWxpemUsXG4gICAgZ2V0VW5pdDogZ2V0VW5pdCxcbiAgICBjbGFtcDogY2xhbXAsXG4gICAgc3BsaXRDb2xvcjogc3BsaXRDb2xvcixcbiAgICB0b0FycmF5OiB0b0FycmF5LFxuICAgIHNlbGVjdG9yOiBzZWxlY3RvcixcbiAgICBtYXBSYW5nZTogbWFwUmFuZ2UsXG4gICAgcGlwZTogcGlwZSxcbiAgICB1bml0aXplOiB1bml0aXplLFxuICAgIGludGVycG9sYXRlOiBpbnRlcnBvbGF0ZSxcbiAgICBzaHVmZmxlOiBzaHVmZmxlXG4gIH0sXG4gIGluc3RhbGw6IF9pbnN0YWxsLFxuICBlZmZlY3RzOiBfZWZmZWN0cyxcbiAgdGlja2VyOiBfdGlja2VyLFxuICB1cGRhdGVSb290OiBUaW1lbGluZS51cGRhdGVSb290LFxuICBwbHVnaW5zOiBfcGx1Z2lucyxcbiAgZ2xvYmFsVGltZWxpbmU6IF9nbG9iYWxUaW1lbGluZSxcbiAgY29yZToge1xuICAgIFByb3BUd2VlbjogUHJvcFR3ZWVuLFxuICAgIGdsb2JhbHM6IF9hZGRHbG9iYWwsXG4gICAgVHdlZW46IFR3ZWVuLFxuICAgIFRpbWVsaW5lOiBUaW1lbGluZSxcbiAgICBBbmltYXRpb246IEFuaW1hdGlvbixcbiAgICBnZXRDYWNoZTogX2dldENhY2hlLFxuICAgIF9yZW1vdmVMaW5rZWRMaXN0SXRlbTogX3JlbW92ZUxpbmtlZExpc3RJdGVtLFxuICAgIHJldmVydGluZzogZnVuY3Rpb24gcmV2ZXJ0aW5nKCkge1xuICAgICAgcmV0dXJuIF9yZXZlcnRpbmc7XG4gICAgfSxcbiAgICBjb250ZXh0OiBmdW5jdGlvbiBjb250ZXh0KHRvQWRkKSB7XG4gICAgICBpZiAodG9BZGQgJiYgX2NvbnRleHQpIHtcbiAgICAgICAgX2NvbnRleHQuZGF0YS5wdXNoKHRvQWRkKTtcblxuICAgICAgICB0b0FkZC5fY3R4ID0gX2NvbnRleHQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfY29udGV4dDtcbiAgICB9LFxuICAgIHN1cHByZXNzT3ZlcndyaXRlczogZnVuY3Rpb24gc3VwcHJlc3NPdmVyd3JpdGVzKHZhbHVlKSB7XG4gICAgICByZXR1cm4gX3N1cHByZXNzT3ZlcndyaXRlcyA9IHZhbHVlO1xuICAgIH1cbiAgfVxufTtcblxuX2ZvckVhY2hOYW1lKFwidG8sZnJvbSxmcm9tVG8sZGVsYXllZENhbGwsc2V0LGtpbGxUd2VlbnNPZlwiLCBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gX2dzYXBbbmFtZV0gPSBUd2VlbltuYW1lXTtcbn0pO1xuXG5fdGlja2VyLmFkZChUaW1lbGluZS51cGRhdGVSb290KTtcblxuX3F1aWNrVHdlZW4gPSBfZ3NhcC50byh7fSwge1xuICBkdXJhdGlvbjogMFxufSk7IC8vIC0tLS0gRVhUUkEgUExVR0lOUyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG52YXIgX2dldFBsdWdpblByb3BUd2VlbiA9IGZ1bmN0aW9uIF9nZXRQbHVnaW5Qcm9wVHdlZW4ocGx1Z2luLCBwcm9wKSB7XG4gIHZhciBwdCA9IHBsdWdpbi5fcHQ7XG5cbiAgd2hpbGUgKHB0ICYmIHB0LnAgIT09IHByb3AgJiYgcHQub3AgIT09IHByb3AgJiYgcHQuZnAgIT09IHByb3ApIHtcbiAgICBwdCA9IHB0Ll9uZXh0O1xuICB9XG5cbiAgcmV0dXJuIHB0O1xufSxcbiAgICBfYWRkTW9kaWZpZXJzID0gZnVuY3Rpb24gX2FkZE1vZGlmaWVycyh0d2VlbiwgbW9kaWZpZXJzKSB7XG4gIHZhciB0YXJnZXRzID0gdHdlZW4uX3RhcmdldHMsXG4gICAgICBwLFxuICAgICAgaSxcbiAgICAgIHB0O1xuXG4gIGZvciAocCBpbiBtb2RpZmllcnMpIHtcbiAgICBpID0gdGFyZ2V0cy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBwdCA9IHR3ZWVuLl9wdExvb2t1cFtpXVtwXTtcblxuICAgICAgaWYgKHB0ICYmIChwdCA9IHB0LmQpKSB7XG4gICAgICAgIGlmIChwdC5fcHQpIHtcbiAgICAgICAgICAvLyBpcyBhIHBsdWdpblxuICAgICAgICAgIHB0ID0gX2dldFBsdWdpblByb3BUd2VlbihwdCwgcCk7XG4gICAgICAgIH1cblxuICAgICAgICBwdCAmJiBwdC5tb2RpZmllciAmJiBwdC5tb2RpZmllcihtb2RpZmllcnNbcF0sIHR3ZWVuLCB0YXJnZXRzW2ldLCBwKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0sXG4gICAgX2J1aWxkTW9kaWZpZXJQbHVnaW4gPSBmdW5jdGlvbiBfYnVpbGRNb2RpZmllclBsdWdpbihuYW1lLCBtb2RpZmllcikge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IG5hbWUsXG4gICAgcmF3VmFyczogMSxcbiAgICAvL2Rvbid0IHByZS1wcm9jZXNzIGZ1bmN0aW9uLWJhc2VkIHZhbHVlcyBvciBcInJhbmRvbSgpXCIgc3RyaW5ncy5cbiAgICBpbml0OiBmdW5jdGlvbiBpbml0KHRhcmdldCwgdmFycywgdHdlZW4pIHtcbiAgICAgIHR3ZWVuLl9vbkluaXQgPSBmdW5jdGlvbiAodHdlZW4pIHtcbiAgICAgICAgdmFyIHRlbXAsIHA7XG5cbiAgICAgICAgaWYgKF9pc1N0cmluZyh2YXJzKSkge1xuICAgICAgICAgIHRlbXAgPSB7fTtcblxuICAgICAgICAgIF9mb3JFYWNoTmFtZSh2YXJzLCBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRlbXBbbmFtZV0gPSAxO1xuICAgICAgICAgIH0pOyAvL2lmIHRoZSB1c2VyIHBhc3NlcyBpbiBhIGNvbW1hLWRlbGltaXRlZCBsaXN0IG9mIHByb3BlcnR5IG5hbWVzIHRvIHJvdW5kUHJvcHMsIGxpa2UgXCJ4LHlcIiwgd2Ugcm91bmQgdG8gd2hvbGUgbnVtYmVycy5cblxuXG4gICAgICAgICAgdmFycyA9IHRlbXA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobW9kaWZpZXIpIHtcbiAgICAgICAgICB0ZW1wID0ge307XG5cbiAgICAgICAgICBmb3IgKHAgaW4gdmFycykge1xuICAgICAgICAgICAgdGVtcFtwXSA9IG1vZGlmaWVyKHZhcnNbcF0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhcnMgPSB0ZW1wO1xuICAgICAgICB9XG5cbiAgICAgICAgX2FkZE1vZGlmaWVycyh0d2VlbiwgdmFycyk7XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn07IC8vcmVnaXN0ZXIgY29yZSBwbHVnaW5zXG5cblxuZXhwb3J0IHZhciBnc2FwID0gX2dzYXAucmVnaXN0ZXJQbHVnaW4oe1xuICBuYW1lOiBcImF0dHJcIixcbiAgaW5pdDogZnVuY3Rpb24gaW5pdCh0YXJnZXQsIHZhcnMsIHR3ZWVuLCBpbmRleCwgdGFyZ2V0cykge1xuICAgIHZhciBwLCBwdCwgdjtcbiAgICB0aGlzLnR3ZWVuID0gdHdlZW47XG5cbiAgICBmb3IgKHAgaW4gdmFycykge1xuICAgICAgdiA9IHRhcmdldC5nZXRBdHRyaWJ1dGUocCkgfHwgXCJcIjtcbiAgICAgIHB0ID0gdGhpcy5hZGQodGFyZ2V0LCBcInNldEF0dHJpYnV0ZVwiLCAodiB8fCAwKSArIFwiXCIsIHZhcnNbcF0sIGluZGV4LCB0YXJnZXRzLCAwLCAwLCBwKTtcbiAgICAgIHB0Lm9wID0gcDtcbiAgICAgIHB0LmIgPSB2OyAvLyByZWNvcmQgdGhlIGJlZ2lubmluZyB2YWx1ZSBzbyB3ZSBjYW4gcmV2ZXJ0KClcblxuICAgICAgdGhpcy5fcHJvcHMucHVzaChwKTtcbiAgICB9XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKHJhdGlvLCBkYXRhKSB7XG4gICAgdmFyIHB0ID0gZGF0YS5fcHQ7XG5cbiAgICB3aGlsZSAocHQpIHtcbiAgICAgIF9yZXZlcnRpbmcgPyBwdC5zZXQocHQudCwgcHQucCwgcHQuYiwgcHQpIDogcHQucihyYXRpbywgcHQuZCk7IC8vIGlmIHJldmVydGluZywgZ28gYmFjayB0byB0aGUgb3JpZ2luYWwgKHB0LmIpXG5cbiAgICAgIHB0ID0gcHQuX25leHQ7XG4gICAgfVxuICB9XG59LCB7XG4gIG5hbWU6IFwiZW5kQXJyYXlcIixcbiAgaW5pdDogZnVuY3Rpb24gaW5pdCh0YXJnZXQsIHZhbHVlKSB7XG4gICAgdmFyIGkgPSB2YWx1ZS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB0aGlzLmFkZCh0YXJnZXQsIGksIHRhcmdldFtpXSB8fCAwLCB2YWx1ZVtpXSwgMCwgMCwgMCwgMCwgMCwgMSk7XG4gICAgfVxuICB9XG59LCBfYnVpbGRNb2RpZmllclBsdWdpbihcInJvdW5kUHJvcHNcIiwgX3JvdW5kTW9kaWZpZXIpLCBfYnVpbGRNb2RpZmllclBsdWdpbihcIm1vZGlmaWVyc1wiKSwgX2J1aWxkTW9kaWZpZXJQbHVnaW4oXCJzbmFwXCIsIHNuYXApKSB8fCBfZ3NhcDsgLy90byBwcmV2ZW50IHRoZSBjb3JlIHBsdWdpbnMgZnJvbSBiZWluZyBkcm9wcGVkIHZpYSBhZ2dyZXNzaXZlIHRyZWUgc2hha2luZywgd2UgbXVzdCBpbmNsdWRlIHRoZW0gaW4gdGhlIHZhcmlhYmxlIGRlY2xhcmF0aW9uIGluIHRoaXMgd2F5LlxuXG5Ud2Vlbi52ZXJzaW9uID0gVGltZWxpbmUudmVyc2lvbiA9IGdzYXAudmVyc2lvbiA9IFwiMy4xMi41XCI7XG5fY29yZVJlYWR5ID0gMTtcbl93aW5kb3dFeGlzdHMoKSAmJiBfd2FrZSgpO1xudmFyIFBvd2VyMCA9IF9lYXNlTWFwLlBvd2VyMCxcbiAgICBQb3dlcjEgPSBfZWFzZU1hcC5Qb3dlcjEsXG4gICAgUG93ZXIyID0gX2Vhc2VNYXAuUG93ZXIyLFxuICAgIFBvd2VyMyA9IF9lYXNlTWFwLlBvd2VyMyxcbiAgICBQb3dlcjQgPSBfZWFzZU1hcC5Qb3dlcjQsXG4gICAgTGluZWFyID0gX2Vhc2VNYXAuTGluZWFyLFxuICAgIFF1YWQgPSBfZWFzZU1hcC5RdWFkLFxuICAgIEN1YmljID0gX2Vhc2VNYXAuQ3ViaWMsXG4gICAgUXVhcnQgPSBfZWFzZU1hcC5RdWFydCxcbiAgICBRdWludCA9IF9lYXNlTWFwLlF1aW50LFxuICAgIFN0cm9uZyA9IF9lYXNlTWFwLlN0cm9uZyxcbiAgICBFbGFzdGljID0gX2Vhc2VNYXAuRWxhc3RpYyxcbiAgICBCYWNrID0gX2Vhc2VNYXAuQmFjayxcbiAgICBTdGVwcGVkRWFzZSA9IF9lYXNlTWFwLlN0ZXBwZWRFYXNlLFxuICAgIEJvdW5jZSA9IF9lYXNlTWFwLkJvdW5jZSxcbiAgICBTaW5lID0gX2Vhc2VNYXAuU2luZSxcbiAgICBFeHBvID0gX2Vhc2VNYXAuRXhwbyxcbiAgICBDaXJjID0gX2Vhc2VNYXAuQ2lyYztcbmV4cG9ydCB7IFBvd2VyMCwgUG93ZXIxLCBQb3dlcjIsIFBvd2VyMywgUG93ZXI0LCBMaW5lYXIsIFF1YWQsIEN1YmljLCBRdWFydCwgUXVpbnQsIFN0cm9uZywgRWxhc3RpYywgQmFjaywgU3RlcHBlZEVhc2UsIEJvdW5jZSwgU2luZSwgRXhwbywgQ2lyYyB9O1xuZXhwb3J0IHsgVHdlZW4gYXMgVHdlZW5NYXgsIFR3ZWVuIGFzIFR3ZWVuTGl0ZSwgVGltZWxpbmUgYXMgVGltZWxpbmVNYXgsIFRpbWVsaW5lIGFzIFRpbWVsaW5lTGl0ZSwgZ3NhcCBhcyBkZWZhdWx0LCB3cmFwLCB3cmFwWW95bywgZGlzdHJpYnV0ZSwgcmFuZG9tLCBzbmFwLCBub3JtYWxpemUsIGdldFVuaXQsIGNsYW1wLCBzcGxpdENvbG9yLCB0b0FycmF5LCBzZWxlY3RvciwgbWFwUmFuZ2UsIHBpcGUsIHVuaXRpemUsIGludGVycG9sYXRlLCBzaHVmZmxlIH07IC8vZXhwb3J0IHNvbWUgaW50ZXJuYWwgbWV0aG9kcy9vcm9qZWN0cyBmb3IgdXNlIGluIENTU1BsdWdpbiBzbyB0aGF0IHdlIGNhbiBleHRlcm5hbGl6ZSB0aGF0IGZpbGUgYW5kIGFsbG93IGN1c3RvbSBidWlsZHMgdGhhdCBleGNsdWRlIGl0LlxuXG5leHBvcnQgeyBfZ2V0UHJvcGVydHksIF9udW1FeHAsIF9udW1XaXRoVW5pdEV4cCwgX2lzU3RyaW5nLCBfaXNVbmRlZmluZWQsIF9yZW5kZXJDb21wbGV4U3RyaW5nLCBfcmVsRXhwLCBfc2V0RGVmYXVsdHMsIF9yZW1vdmVMaW5rZWRMaXN0SXRlbSwgX2ZvckVhY2hOYW1lLCBfc29ydFByb3BUd2VlbnNCeVByaW9yaXR5LCBfY29sb3JTdHJpbmdGaWx0ZXIsIF9yZXBsYWNlUmFuZG9tLCBfY2hlY2tQbHVnaW4sIF9wbHVnaW5zLCBfdGlja2VyLCBfY29uZmlnLCBfcm91bmRNb2RpZmllciwgX3JvdW5kLCBfbWlzc2luZ1BsdWdpbiwgX2dldFNldHRlciwgX2dldENhY2hlLCBfY29sb3JFeHAsIF9wYXJzZVJlbGF0aXZlIH07IiwiLyohXG4gKiBDU1NQbHVnaW4gMy4xMi41XG4gKiBodHRwczovL2dzYXAuY29tXG4gKlxuICogQ29weXJpZ2h0IDIwMDgtMjAyNCwgR3JlZW5Tb2NrLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogU3ViamVjdCB0byB0aGUgdGVybXMgYXQgaHR0cHM6Ly9nc2FwLmNvbS9zdGFuZGFyZC1saWNlbnNlIG9yIGZvclxuICogQ2x1YiBHU0FQIG1lbWJlcnMsIHRoZSBhZ3JlZW1lbnQgaXNzdWVkIHdpdGggdGhhdCBtZW1iZXJzaGlwLlxuICogQGF1dGhvcjogSmFjayBEb3lsZSwgamFja0BncmVlbnNvY2suY29tXG4qL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuaW1wb3J0IHsgZ3NhcCwgX2dldFByb3BlcnR5LCBfbnVtRXhwLCBfbnVtV2l0aFVuaXRFeHAsIGdldFVuaXQsIF9pc1N0cmluZywgX2lzVW5kZWZpbmVkLCBfcmVuZGVyQ29tcGxleFN0cmluZywgX3JlbEV4cCwgX2ZvckVhY2hOYW1lLCBfc29ydFByb3BUd2VlbnNCeVByaW9yaXR5LCBfY29sb3JTdHJpbmdGaWx0ZXIsIF9jaGVja1BsdWdpbiwgX3JlcGxhY2VSYW5kb20sIF9wbHVnaW5zLCBHU0NhY2hlLCBQcm9wVHdlZW4sIF9jb25maWcsIF90aWNrZXIsIF9yb3VuZCwgX21pc3NpbmdQbHVnaW4sIF9nZXRTZXR0ZXIsIF9nZXRDYWNoZSwgX2NvbG9yRXhwLCBfcGFyc2VSZWxhdGl2ZSwgX3NldERlZmF1bHRzLCBfcmVtb3ZlTGlua2VkTGlzdEl0ZW0gLy9mb3IgdGhlIGNvbW1lbnRlZC1vdXQgY2xhc3NOYW1lIGZlYXR1cmUuXG59IGZyb20gXCIuL2dzYXAtY29yZS5qc1wiO1xuXG52YXIgX3dpbixcbiAgICBfZG9jLFxuICAgIF9kb2NFbGVtZW50LFxuICAgIF9wbHVnaW5Jbml0dGVkLFxuICAgIF90ZW1wRGl2LFxuICAgIF90ZW1wRGl2U3R5bGVyLFxuICAgIF9yZWNlbnRTZXR0ZXJQbHVnaW4sXG4gICAgX3JldmVydGluZyxcbiAgICBfd2luZG93RXhpc3RzID0gZnVuY3Rpb24gX3dpbmRvd0V4aXN0cygpIHtcbiAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCI7XG59LFxuICAgIF90cmFuc2Zvcm1Qcm9wcyA9IHt9LFxuICAgIF9SQUQyREVHID0gMTgwIC8gTWF0aC5QSSxcbiAgICBfREVHMlJBRCA9IE1hdGguUEkgLyAxODAsXG4gICAgX2F0YW4yID0gTWF0aC5hdGFuMixcbiAgICBfYmlnTnVtID0gMWU4LFxuICAgIF9jYXBzRXhwID0gLyhbQS1aXSkvZyxcbiAgICBfaG9yaXpvbnRhbEV4cCA9IC8obGVmdHxyaWdodHx3aWR0aHxtYXJnaW58cGFkZGluZ3x4KS9pLFxuICAgIF9jb21wbGV4RXhwID0gL1tcXHMsXFwoXVxcUy8sXG4gICAgX3Byb3BlcnR5QWxpYXNlcyA9IHtcbiAgYXV0b0FscGhhOiBcIm9wYWNpdHksdmlzaWJpbGl0eVwiLFxuICBzY2FsZTogXCJzY2FsZVgsc2NhbGVZXCIsXG4gIGFscGhhOiBcIm9wYWNpdHlcIlxufSxcbiAgICBfcmVuZGVyQ1NTUHJvcCA9IGZ1bmN0aW9uIF9yZW5kZXJDU1NQcm9wKHJhdGlvLCBkYXRhKSB7XG4gIHJldHVybiBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgTWF0aC5yb3VuZCgoZGF0YS5zICsgZGF0YS5jICogcmF0aW8pICogMTAwMDApIC8gMTAwMDAgKyBkYXRhLnUsIGRhdGEpO1xufSxcbiAgICBfcmVuZGVyUHJvcFdpdGhFbmQgPSBmdW5jdGlvbiBfcmVuZGVyUHJvcFdpdGhFbmQocmF0aW8sIGRhdGEpIHtcbiAgcmV0dXJuIGRhdGEuc2V0KGRhdGEudCwgZGF0YS5wLCByYXRpbyA9PT0gMSA/IGRhdGEuZSA6IE1hdGgucm91bmQoKGRhdGEucyArIGRhdGEuYyAqIHJhdGlvKSAqIDEwMDAwKSAvIDEwMDAwICsgZGF0YS51LCBkYXRhKTtcbn0sXG4gICAgX3JlbmRlckNTU1Byb3BXaXRoQmVnaW5uaW5nID0gZnVuY3Rpb24gX3JlbmRlckNTU1Byb3BXaXRoQmVnaW5uaW5nKHJhdGlvLCBkYXRhKSB7XG4gIHJldHVybiBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgcmF0aW8gPyBNYXRoLnJvdW5kKChkYXRhLnMgKyBkYXRhLmMgKiByYXRpbykgKiAxMDAwMCkgLyAxMDAwMCArIGRhdGEudSA6IGRhdGEuYiwgZGF0YSk7XG59LFxuICAgIC8vaWYgdW5pdHMgY2hhbmdlLCB3ZSBuZWVkIGEgd2F5IHRvIHJlbmRlciB0aGUgb3JpZ2luYWwgdW5pdC92YWx1ZSB3aGVuIHRoZSB0d2VlbiBnb2VzIGFsbCB0aGUgd2F5IGJhY2sgdG8gdGhlIGJlZ2lubmluZyAocmF0aW86MClcbl9yZW5kZXJSb3VuZGVkQ1NTUHJvcCA9IGZ1bmN0aW9uIF9yZW5kZXJSb3VuZGVkQ1NTUHJvcChyYXRpbywgZGF0YSkge1xuICB2YXIgdmFsdWUgPSBkYXRhLnMgKyBkYXRhLmMgKiByYXRpbztcbiAgZGF0YS5zZXQoZGF0YS50LCBkYXRhLnAsIH5+KHZhbHVlICsgKHZhbHVlIDwgMCA/IC0uNSA6IC41KSkgKyBkYXRhLnUsIGRhdGEpO1xufSxcbiAgICBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZSA9IGZ1bmN0aW9uIF9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlKHJhdGlvLCBkYXRhKSB7XG4gIHJldHVybiBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgcmF0aW8gPyBkYXRhLmUgOiBkYXRhLmIsIGRhdGEpO1xufSxcbiAgICBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZU9ubHlBdEVuZCA9IGZ1bmN0aW9uIF9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlT25seUF0RW5kKHJhdGlvLCBkYXRhKSB7XG4gIHJldHVybiBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgcmF0aW8gIT09IDEgPyBkYXRhLmIgOiBkYXRhLmUsIGRhdGEpO1xufSxcbiAgICBfc2V0dGVyQ1NTU3R5bGUgPSBmdW5jdGlvbiBfc2V0dGVyQ1NTU3R5bGUodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgcmV0dXJuIHRhcmdldC5zdHlsZVtwcm9wZXJ0eV0gPSB2YWx1ZTtcbn0sXG4gICAgX3NldHRlckNTU1Byb3AgPSBmdW5jdGlvbiBfc2V0dGVyQ1NTUHJvcCh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSkge1xuICByZXR1cm4gdGFyZ2V0LnN0eWxlLnNldFByb3BlcnR5KHByb3BlcnR5LCB2YWx1ZSk7XG59LFxuICAgIF9zZXR0ZXJUcmFuc2Zvcm0gPSBmdW5jdGlvbiBfc2V0dGVyVHJhbnNmb3JtKHRhcmdldCwgcHJvcGVydHksIHZhbHVlKSB7XG4gIHJldHVybiB0YXJnZXQuX2dzYXBbcHJvcGVydHldID0gdmFsdWU7XG59LFxuICAgIF9zZXR0ZXJTY2FsZSA9IGZ1bmN0aW9uIF9zZXR0ZXJTY2FsZSh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSkge1xuICByZXR1cm4gdGFyZ2V0Ll9nc2FwLnNjYWxlWCA9IHRhcmdldC5fZ3NhcC5zY2FsZVkgPSB2YWx1ZTtcbn0sXG4gICAgX3NldHRlclNjYWxlV2l0aFJlbmRlciA9IGZ1bmN0aW9uIF9zZXR0ZXJTY2FsZVdpdGhSZW5kZXIodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIGRhdGEsIHJhdGlvKSB7XG4gIHZhciBjYWNoZSA9IHRhcmdldC5fZ3NhcDtcbiAgY2FjaGUuc2NhbGVYID0gY2FjaGUuc2NhbGVZID0gdmFsdWU7XG4gIGNhY2hlLnJlbmRlclRyYW5zZm9ybShyYXRpbywgY2FjaGUpO1xufSxcbiAgICBfc2V0dGVyVHJhbnNmb3JtV2l0aFJlbmRlciA9IGZ1bmN0aW9uIF9zZXR0ZXJUcmFuc2Zvcm1XaXRoUmVuZGVyKHRhcmdldCwgcHJvcGVydHksIHZhbHVlLCBkYXRhLCByYXRpbykge1xuICB2YXIgY2FjaGUgPSB0YXJnZXQuX2dzYXA7XG4gIGNhY2hlW3Byb3BlcnR5XSA9IHZhbHVlO1xuICBjYWNoZS5yZW5kZXJUcmFuc2Zvcm0ocmF0aW8sIGNhY2hlKTtcbn0sXG4gICAgX3RyYW5zZm9ybVByb3AgPSBcInRyYW5zZm9ybVwiLFxuICAgIF90cmFuc2Zvcm1PcmlnaW5Qcm9wID0gX3RyYW5zZm9ybVByb3AgKyBcIk9yaWdpblwiLFxuICAgIF9zYXZlU3R5bGUgPSBmdW5jdGlvbiBfc2F2ZVN0eWxlKHByb3BlcnR5LCBpc05vdENTUykge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIHZhciB0YXJnZXQgPSB0aGlzLnRhcmdldCxcbiAgICAgIHN0eWxlID0gdGFyZ2V0LnN0eWxlLFxuICAgICAgY2FjaGUgPSB0YXJnZXQuX2dzYXA7XG5cbiAgaWYgKHByb3BlcnR5IGluIF90cmFuc2Zvcm1Qcm9wcyAmJiBzdHlsZSkge1xuICAgIHRoaXMudGZtID0gdGhpcy50Zm0gfHwge307XG5cbiAgICBpZiAocHJvcGVydHkgIT09IFwidHJhbnNmb3JtXCIpIHtcbiAgICAgIHByb3BlcnR5ID0gX3Byb3BlcnR5QWxpYXNlc1twcm9wZXJ0eV0gfHwgcHJvcGVydHk7XG4gICAgICB+cHJvcGVydHkuaW5kZXhPZihcIixcIikgPyBwcm9wZXJ0eS5zcGxpdChcIixcIikuZm9yRWFjaChmdW5jdGlvbiAoYSkge1xuICAgICAgICByZXR1cm4gX3RoaXMudGZtW2FdID0gX2dldCh0YXJnZXQsIGEpO1xuICAgICAgfSkgOiB0aGlzLnRmbVtwcm9wZXJ0eV0gPSBjYWNoZS54ID8gY2FjaGVbcHJvcGVydHldIDogX2dldCh0YXJnZXQsIHByb3BlcnR5KTsgLy8gbm90ZTogc2NhbGUgd291bGQgbWFwIHRvIFwic2NhbGVYLHNjYWxlWVwiLCB0aHVzIHdlIGxvb3AgYW5kIGFwcGx5IHRoZW0gYm90aC5cblxuICAgICAgcHJvcGVydHkgPT09IF90cmFuc2Zvcm1PcmlnaW5Qcm9wICYmICh0aGlzLnRmbS56T3JpZ2luID0gY2FjaGUuek9yaWdpbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBfcHJvcGVydHlBbGlhc2VzLnRyYW5zZm9ybS5zcGxpdChcIixcIikuZm9yRWFjaChmdW5jdGlvbiAocCkge1xuICAgICAgICByZXR1cm4gX3NhdmVTdHlsZS5jYWxsKF90aGlzLCBwLCBpc05vdENTUyk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5wcm9wcy5pbmRleE9mKF90cmFuc2Zvcm1Qcm9wKSA+PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGNhY2hlLnN2Zykge1xuICAgICAgdGhpcy5zdmdvID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShcImRhdGEtc3ZnLW9yaWdpblwiKTtcbiAgICAgIHRoaXMucHJvcHMucHVzaChfdHJhbnNmb3JtT3JpZ2luUHJvcCwgaXNOb3RDU1MsIFwiXCIpO1xuICAgIH1cblxuICAgIHByb3BlcnR5ID0gX3RyYW5zZm9ybVByb3A7XG4gIH1cblxuICAoc3R5bGUgfHwgaXNOb3RDU1MpICYmIHRoaXMucHJvcHMucHVzaChwcm9wZXJ0eSwgaXNOb3RDU1MsIHN0eWxlW3Byb3BlcnR5XSk7XG59LFxuICAgIF9yZW1vdmVJbmRlcGVuZGVudFRyYW5zZm9ybXMgPSBmdW5jdGlvbiBfcmVtb3ZlSW5kZXBlbmRlbnRUcmFuc2Zvcm1zKHN0eWxlKSB7XG4gIGlmIChzdHlsZS50cmFuc2xhdGUpIHtcbiAgICBzdHlsZS5yZW1vdmVQcm9wZXJ0eShcInRyYW5zbGF0ZVwiKTtcbiAgICBzdHlsZS5yZW1vdmVQcm9wZXJ0eShcInNjYWxlXCIpO1xuICAgIHN0eWxlLnJlbW92ZVByb3BlcnR5KFwicm90YXRlXCIpO1xuICB9XG59LFxuICAgIF9yZXZlcnRTdHlsZSA9IGZ1bmN0aW9uIF9yZXZlcnRTdHlsZSgpIHtcbiAgdmFyIHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgIHRhcmdldCA9IHRoaXMudGFyZ2V0LFxuICAgICAgc3R5bGUgPSB0YXJnZXQuc3R5bGUsXG4gICAgICBjYWNoZSA9IHRhcmdldC5fZ3NhcCxcbiAgICAgIGksXG4gICAgICBwO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkgKz0gMykge1xuICAgIC8vIHN0b3JlZCBsaWtlIHRoaXM6IHByb3BlcnR5LCBpc05vdENTUywgdmFsdWVcbiAgICBwcm9wc1tpICsgMV0gPyB0YXJnZXRbcHJvcHNbaV1dID0gcHJvcHNbaSArIDJdIDogcHJvcHNbaSArIDJdID8gc3R5bGVbcHJvcHNbaV1dID0gcHJvcHNbaSArIDJdIDogc3R5bGUucmVtb3ZlUHJvcGVydHkocHJvcHNbaV0uc3Vic3RyKDAsIDIpID09PSBcIi0tXCIgPyBwcm9wc1tpXSA6IHByb3BzW2ldLnJlcGxhY2UoX2NhcHNFeHAsIFwiLSQxXCIpLnRvTG93ZXJDYXNlKCkpO1xuICB9XG5cbiAgaWYgKHRoaXMudGZtKSB7XG4gICAgZm9yIChwIGluIHRoaXMudGZtKSB7XG4gICAgICBjYWNoZVtwXSA9IHRoaXMudGZtW3BdO1xuICAgIH1cblxuICAgIGlmIChjYWNoZS5zdmcpIHtcbiAgICAgIGNhY2hlLnJlbmRlclRyYW5zZm9ybSgpO1xuICAgICAgdGFyZ2V0LnNldEF0dHJpYnV0ZShcImRhdGEtc3ZnLW9yaWdpblwiLCB0aGlzLnN2Z28gfHwgXCJcIik7XG4gICAgfVxuXG4gICAgaSA9IF9yZXZlcnRpbmcoKTtcblxuICAgIGlmICgoIWkgfHwgIWkuaXNTdGFydCkgJiYgIXN0eWxlW190cmFuc2Zvcm1Qcm9wXSkge1xuICAgICAgX3JlbW92ZUluZGVwZW5kZW50VHJhbnNmb3JtcyhzdHlsZSk7XG5cbiAgICAgIGlmIChjYWNoZS56T3JpZ2luICYmIHN0eWxlW190cmFuc2Zvcm1PcmlnaW5Qcm9wXSkge1xuICAgICAgICBzdHlsZVtfdHJhbnNmb3JtT3JpZ2luUHJvcF0gKz0gXCIgXCIgKyBjYWNoZS56T3JpZ2luICsgXCJweFwiOyAvLyBzaW5jZSB3ZSdyZSB1bmNhY2hpbmcsIHdlIG11c3QgcHV0IHRoZSB6T3JpZ2luIGJhY2sgaW50byB0aGUgdHJhbnNmb3JtT3JpZ2luIHNvIHRoYXQgd2UgY2FuIHB1bGwgaXQgb3V0IGFjY3VyYXRlbHkgd2hlbiB3ZSBwYXJzZSBhZ2Fpbi4gT3RoZXJ3aXNlLCB3ZSdkIGxvc2UgdGhlIHogcG9ydGlvbiBvZiB0aGUgb3JpZ2luIHNpbmNlIHdlIGV4dHJhY3QgaXQgdG8gcHJvdGVjdCBmcm9tIFNhZmFyaSBidWdzLlxuXG4gICAgICAgIGNhY2hlLnpPcmlnaW4gPSAwO1xuICAgICAgICBjYWNoZS5yZW5kZXJUcmFuc2Zvcm0oKTtcbiAgICAgIH1cblxuICAgICAgY2FjaGUudW5jYWNoZSA9IDE7IC8vIGlmIGl0J3MgYSBzdGFydEF0IHRoYXQncyBiZWluZyByZXZlcnRlZCBpbiB0aGUgX2luaXRUd2VlbigpIG9mIHRoZSBjb3JlLCB3ZSBkb24ndCBuZWVkIHRvIHVuY2FjaGUgdHJhbnNmb3Jtcy4gVGhpcyBpcyBwdXJlbHkgYSBwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb24uXG4gICAgfVxuICB9XG59LFxuICAgIF9nZXRTdHlsZVNhdmVyID0gZnVuY3Rpb24gX2dldFN0eWxlU2F2ZXIodGFyZ2V0LCBwcm9wZXJ0aWVzKSB7XG4gIHZhciBzYXZlciA9IHtcbiAgICB0YXJnZXQ6IHRhcmdldCxcbiAgICBwcm9wczogW10sXG4gICAgcmV2ZXJ0OiBfcmV2ZXJ0U3R5bGUsXG4gICAgc2F2ZTogX3NhdmVTdHlsZVxuICB9O1xuICB0YXJnZXQuX2dzYXAgfHwgZ3NhcC5jb3JlLmdldENhY2hlKHRhcmdldCk7IC8vIGp1c3QgbWFrZSBzdXJlIHRoZXJlJ3MgYSBfZ3NhcCBjYWNoZSBkZWZpbmVkIGJlY2F1c2Ugd2UgcmVhZCBmcm9tIGl0IGluIF9zYXZlU3R5bGUoKSBhbmQgaXQncyBtb3JlIGVmZmljaWVudCB0byBqdXN0IGNoZWNrIGl0IGhlcmUgb25jZS5cblxuICBwcm9wZXJ0aWVzICYmIHByb3BlcnRpZXMuc3BsaXQoXCIsXCIpLmZvckVhY2goZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gc2F2ZXIuc2F2ZShwKTtcbiAgfSk7XG4gIHJldHVybiBzYXZlcjtcbn0sXG4gICAgX3N1cHBvcnRzM0QsXG4gICAgX2NyZWF0ZUVsZW1lbnQgPSBmdW5jdGlvbiBfY3JlYXRlRWxlbWVudCh0eXBlLCBucykge1xuICB2YXIgZSA9IF9kb2MuY3JlYXRlRWxlbWVudE5TID8gX2RvYy5jcmVhdGVFbGVtZW50TlMoKG5zIHx8IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiKS5yZXBsYWNlKC9eaHR0cHMvLCBcImh0dHBcIiksIHR5cGUpIDogX2RvYy5jcmVhdGVFbGVtZW50KHR5cGUpOyAvL3NvbWUgc2VydmVycyBzd2FwIGluIGh0dHBzIGZvciBodHRwIGluIHRoZSBuYW1lc3BhY2Ugd2hpY2ggY2FuIGJyZWFrIHRoaW5ncywgbWFraW5nIFwic3R5bGVcIiBpbmFjY2Vzc2libGUuXG5cbiAgcmV0dXJuIGUgJiYgZS5zdHlsZSA/IGUgOiBfZG9jLmNyZWF0ZUVsZW1lbnQodHlwZSk7IC8vc29tZSBlbnZpcm9ubWVudHMgd29uJ3QgYWxsb3cgYWNjZXNzIHRvIHRoZSBlbGVtZW50J3Mgc3R5bGUgd2hlbiBjcmVhdGVkIHdpdGggYSBuYW1lc3BhY2UgaW4gd2hpY2ggY2FzZSB3ZSBkZWZhdWx0IHRvIHRoZSBzdGFuZGFyZCBjcmVhdGVFbGVtZW50KCkgdG8gd29yayBhcm91bmQgdGhlIGlzc3VlLiBBbHNvIG5vdGUgdGhhdCB3aGVuIEdTQVAgaXMgZW1iZWRkZWQgZGlyZWN0bHkgaW5zaWRlIGFuIFNWRyBmaWxlLCBjcmVhdGVFbGVtZW50KCkgd29uJ3QgYWxsb3cgYWNjZXNzIHRvIHRoZSBzdHlsZSBvYmplY3QgaW4gRmlyZWZveCAoc2VlIGh0dHBzOi8vZ3NhcC5jb20vZm9ydW1zL3RvcGljLzIwMjE1LXByb2JsZW0tdXNpbmctdHdlZW5tYXgtaW4tc3RhbmRhbG9uZS1zZWxmLWNvbnRhaW5pbmctc3ZnLWZpbGUtZXJyLWNhbm5vdC1zZXQtcHJvcGVydHktY3NzdGV4dC1vZi11bmRlZmluZWQvKS5cbn0sXG4gICAgX2dldENvbXB1dGVkUHJvcGVydHkgPSBmdW5jdGlvbiBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5LCBza2lwUHJlZml4RmFsbGJhY2spIHtcbiAgdmFyIGNzID0gZ2V0Q29tcHV0ZWRTdHlsZSh0YXJnZXQpO1xuICByZXR1cm4gY3NbcHJvcGVydHldIHx8IGNzLmdldFByb3BlcnR5VmFsdWUocHJvcGVydHkucmVwbGFjZShfY2Fwc0V4cCwgXCItJDFcIikudG9Mb3dlckNhc2UoKSkgfHwgY3MuZ2V0UHJvcGVydHlWYWx1ZShwcm9wZXJ0eSkgfHwgIXNraXBQcmVmaXhGYWxsYmFjayAmJiBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIF9jaGVja1Byb3BQcmVmaXgocHJvcGVydHkpIHx8IHByb3BlcnR5LCAxKSB8fCBcIlwiOyAvL2NzcyB2YXJpYWJsZXMgbWF5IG5vdCBuZWVkIGNhcHMgc3dhcHBlZCBvdXQgZm9yIGRhc2hlcyBhbmQgbG93ZXJjYXNlLlxufSxcbiAgICBfcHJlZml4ZXMgPSBcIk8sTW96LG1zLE1zLFdlYmtpdFwiLnNwbGl0KFwiLFwiKSxcbiAgICBfY2hlY2tQcm9wUHJlZml4ID0gZnVuY3Rpb24gX2NoZWNrUHJvcFByZWZpeChwcm9wZXJ0eSwgZWxlbWVudCwgcHJlZmVyUHJlZml4KSB7XG4gIHZhciBlID0gZWxlbWVudCB8fCBfdGVtcERpdixcbiAgICAgIHMgPSBlLnN0eWxlLFxuICAgICAgaSA9IDU7XG5cbiAgaWYgKHByb3BlcnR5IGluIHMgJiYgIXByZWZlclByZWZpeCkge1xuICAgIHJldHVybiBwcm9wZXJ0eTtcbiAgfVxuXG4gIHByb3BlcnR5ID0gcHJvcGVydHkuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBwcm9wZXJ0eS5zdWJzdHIoMSk7XG5cbiAgd2hpbGUgKGktLSAmJiAhKF9wcmVmaXhlc1tpXSArIHByb3BlcnR5IGluIHMpKSB7fVxuXG4gIHJldHVybiBpIDwgMCA/IG51bGwgOiAoaSA9PT0gMyA/IFwibXNcIiA6IGkgPj0gMCA/IF9wcmVmaXhlc1tpXSA6IFwiXCIpICsgcHJvcGVydHk7XG59LFxuICAgIF9pbml0Q29yZSA9IGZ1bmN0aW9uIF9pbml0Q29yZSgpIHtcbiAgaWYgKF93aW5kb3dFeGlzdHMoKSAmJiB3aW5kb3cuZG9jdW1lbnQpIHtcbiAgICBfd2luID0gd2luZG93O1xuICAgIF9kb2MgPSBfd2luLmRvY3VtZW50O1xuICAgIF9kb2NFbGVtZW50ID0gX2RvYy5kb2N1bWVudEVsZW1lbnQ7XG4gICAgX3RlbXBEaXYgPSBfY3JlYXRlRWxlbWVudChcImRpdlwiKSB8fCB7XG4gICAgICBzdHlsZToge31cbiAgICB9O1xuICAgIF90ZW1wRGl2U3R5bGVyID0gX2NyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgX3RyYW5zZm9ybVByb3AgPSBfY2hlY2tQcm9wUHJlZml4KF90cmFuc2Zvcm1Qcm9wKTtcbiAgICBfdHJhbnNmb3JtT3JpZ2luUHJvcCA9IF90cmFuc2Zvcm1Qcm9wICsgXCJPcmlnaW5cIjtcbiAgICBfdGVtcERpdi5zdHlsZS5jc3NUZXh0ID0gXCJib3JkZXItd2lkdGg6MDtsaW5lLWhlaWdodDowO3Bvc2l0aW9uOmFic29sdXRlO3BhZGRpbmc6MFwiOyAvL21ha2Ugc3VyZSB0byBvdmVycmlkZSBjZXJ0YWluIHByb3BlcnRpZXMgdGhhdCBtYXkgY29udGFtaW5hdGUgbWVhc3VyZW1lbnRzLCBpbiBjYXNlIHRoZSB1c2VyIGhhcyBvdmVycmVhY2hpbmcgc3R5bGUgc2hlZXRzLlxuXG4gICAgX3N1cHBvcnRzM0QgPSAhIV9jaGVja1Byb3BQcmVmaXgoXCJwZXJzcGVjdGl2ZVwiKTtcbiAgICBfcmV2ZXJ0aW5nID0gZ3NhcC5jb3JlLnJldmVydGluZztcbiAgICBfcGx1Z2luSW5pdHRlZCA9IDE7XG4gIH1cbn0sXG4gICAgX2dldEJCb3hIYWNrID0gZnVuY3Rpb24gX2dldEJCb3hIYWNrKHN3YXBJZlBvc3NpYmxlKSB7XG4gIC8vd29ya3MgYXJvdW5kIGlzc3VlcyBpbiBzb21lIGJyb3dzZXJzIChsaWtlIEZpcmVmb3gpIHRoYXQgZG9uJ3QgY29ycmVjdGx5IHJlcG9ydCBnZXRCQm94KCkgb24gU1ZHIGVsZW1lbnRzIGluc2lkZSBhIDxkZWZzPiBlbGVtZW50IGFuZC9vciA8bWFzaz4uIFdlIHRyeSBjcmVhdGluZyBhbiBTVkcsIGFkZGluZyBpdCB0byB0aGUgZG9jdW1lbnRFbGVtZW50IGFuZCB0b3NzIHRoZSBlbGVtZW50IGluIHRoZXJlIHNvIHRoYXQgaXQncyBkZWZpbml0ZWx5IHBhcnQgb2YgdGhlIHJlbmRlcmluZyB0cmVlLCB0aGVuIGdyYWIgdGhlIGJib3ggYW5kIGlmIGl0IHdvcmtzLCB3ZSBhY3R1YWxseSBzd2FwIG91dCB0aGUgb3JpZ2luYWwgZ2V0QkJveCgpIG1ldGhvZCBmb3Igb3VyIG93biB0aGF0IGRvZXMgdGhlc2UgZXh0cmEgc3RlcHMgd2hlbmV2ZXIgZ2V0QkJveCBpcyBuZWVkZWQuIFRoaXMgaGVscHMgZW5zdXJlIHRoYXQgcGVyZm9ybWFuY2UgaXMgb3B0aW1hbCAob25seSBkbyBhbGwgdGhlc2UgZXh0cmEgc3RlcHMgd2hlbiBhYnNvbHV0ZWx5IG5lY2Vzc2FyeS4uLm1vc3QgZWxlbWVudHMgZG9uJ3QgbmVlZCBpdCkuXG4gIHZhciBzdmcgPSBfY3JlYXRlRWxlbWVudChcInN2Z1wiLCB0aGlzLm93bmVyU1ZHRWxlbWVudCAmJiB0aGlzLm93bmVyU1ZHRWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJ4bWxuc1wiKSB8fCBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIpLFxuICAgICAgb2xkUGFyZW50ID0gdGhpcy5wYXJlbnROb2RlLFxuICAgICAgb2xkU2libGluZyA9IHRoaXMubmV4dFNpYmxpbmcsXG4gICAgICBvbGRDU1MgPSB0aGlzLnN0eWxlLmNzc1RleHQsXG4gICAgICBiYm94O1xuXG4gIF9kb2NFbGVtZW50LmFwcGVuZENoaWxkKHN2Zyk7XG5cbiAgc3ZnLmFwcGVuZENoaWxkKHRoaXMpO1xuICB0aGlzLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG5cbiAgaWYgKHN3YXBJZlBvc3NpYmxlKSB7XG4gICAgdHJ5IHtcbiAgICAgIGJib3ggPSB0aGlzLmdldEJCb3goKTtcbiAgICAgIHRoaXMuX2dzYXBCQm94ID0gdGhpcy5nZXRCQm94OyAvL3N0b3JlIHRoZSBvcmlnaW5hbFxuXG4gICAgICB0aGlzLmdldEJCb3ggPSBfZ2V0QkJveEhhY2s7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfSBlbHNlIGlmICh0aGlzLl9nc2FwQkJveCkge1xuICAgIGJib3ggPSB0aGlzLl9nc2FwQkJveCgpO1xuICB9XG5cbiAgaWYgKG9sZFBhcmVudCkge1xuICAgIGlmIChvbGRTaWJsaW5nKSB7XG4gICAgICBvbGRQYXJlbnQuaW5zZXJ0QmVmb3JlKHRoaXMsIG9sZFNpYmxpbmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvbGRQYXJlbnQuYXBwZW5kQ2hpbGQodGhpcyk7XG4gICAgfVxuICB9XG5cbiAgX2RvY0VsZW1lbnQucmVtb3ZlQ2hpbGQoc3ZnKTtcblxuICB0aGlzLnN0eWxlLmNzc1RleHQgPSBvbGRDU1M7XG4gIHJldHVybiBiYm94O1xufSxcbiAgICBfZ2V0QXR0cmlidXRlRmFsbGJhY2tzID0gZnVuY3Rpb24gX2dldEF0dHJpYnV0ZUZhbGxiYWNrcyh0YXJnZXQsIGF0dHJpYnV0ZXNBcnJheSkge1xuICB2YXIgaSA9IGF0dHJpYnV0ZXNBcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKGktLSkge1xuICAgIGlmICh0YXJnZXQuaGFzQXR0cmlidXRlKGF0dHJpYnV0ZXNBcnJheVtpXSkpIHtcbiAgICAgIHJldHVybiB0YXJnZXQuZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZXNBcnJheVtpXSk7XG4gICAgfVxuICB9XG59LFxuICAgIF9nZXRCQm94ID0gZnVuY3Rpb24gX2dldEJCb3godGFyZ2V0KSB7XG4gIHZhciBib3VuZHM7XG5cbiAgdHJ5IHtcbiAgICBib3VuZHMgPSB0YXJnZXQuZ2V0QkJveCgpOyAvL0ZpcmVmb3ggdGhyb3dzIGVycm9ycyBpZiB5b3UgdHJ5IGNhbGxpbmcgZ2V0QkJveCgpIG9uIGFuIFNWRyBlbGVtZW50IHRoYXQncyBub3QgcmVuZGVyZWQgKGxpa2UgaW4gYSA8c3ltYm9sPiBvciA8ZGVmcz4pLiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02MTIxMThcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBib3VuZHMgPSBfZ2V0QkJveEhhY2suY2FsbCh0YXJnZXQsIHRydWUpO1xuICB9XG5cbiAgYm91bmRzICYmIChib3VuZHMud2lkdGggfHwgYm91bmRzLmhlaWdodCkgfHwgdGFyZ2V0LmdldEJCb3ggPT09IF9nZXRCQm94SGFjayB8fCAoYm91bmRzID0gX2dldEJCb3hIYWNrLmNhbGwodGFyZ2V0LCB0cnVlKSk7IC8vc29tZSBicm93c2VycyAobGlrZSBGaXJlZm94KSBtaXNyZXBvcnQgdGhlIGJvdW5kcyBpZiB0aGUgZWxlbWVudCBoYXMgemVybyB3aWR0aCBhbmQgaGVpZ2h0IChpdCBqdXN0IGFzc3VtZXMgaXQncyBhdCB4OjAsIHk6MCksIHRodXMgd2UgbmVlZCB0byBtYW51YWxseSBncmFiIHRoZSBwb3NpdGlvbiBpbiB0aGF0IGNhc2UuXG5cbiAgcmV0dXJuIGJvdW5kcyAmJiAhYm91bmRzLndpZHRoICYmICFib3VuZHMueCAmJiAhYm91bmRzLnkgPyB7XG4gICAgeDogK19nZXRBdHRyaWJ1dGVGYWxsYmFja3ModGFyZ2V0LCBbXCJ4XCIsIFwiY3hcIiwgXCJ4MVwiXSkgfHwgMCxcbiAgICB5OiArX2dldEF0dHJpYnV0ZUZhbGxiYWNrcyh0YXJnZXQsIFtcInlcIiwgXCJjeVwiLCBcInkxXCJdKSB8fCAwLFxuICAgIHdpZHRoOiAwLFxuICAgIGhlaWdodDogMFxuICB9IDogYm91bmRzO1xufSxcbiAgICBfaXNTVkcgPSBmdW5jdGlvbiBfaXNTVkcoZSkge1xuICByZXR1cm4gISEoZS5nZXRDVE0gJiYgKCFlLnBhcmVudE5vZGUgfHwgZS5vd25lclNWR0VsZW1lbnQpICYmIF9nZXRCQm94KGUpKTtcbn0sXG4gICAgLy9yZXBvcnRzIGlmIHRoZSBlbGVtZW50IGlzIGFuIFNWRyBvbiB3aGljaCBnZXRCQm94KCkgYWN0dWFsbHkgd29ya3Ncbl9yZW1vdmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIF9yZW1vdmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5KSB7XG4gIGlmIChwcm9wZXJ0eSkge1xuICAgIHZhciBzdHlsZSA9IHRhcmdldC5zdHlsZSxcbiAgICAgICAgZmlyc3QyQ2hhcnM7XG5cbiAgICBpZiAocHJvcGVydHkgaW4gX3RyYW5zZm9ybVByb3BzICYmIHByb3BlcnR5ICE9PSBfdHJhbnNmb3JtT3JpZ2luUHJvcCkge1xuICAgICAgcHJvcGVydHkgPSBfdHJhbnNmb3JtUHJvcDtcbiAgICB9XG5cbiAgICBpZiAoc3R5bGUucmVtb3ZlUHJvcGVydHkpIHtcbiAgICAgIGZpcnN0MkNoYXJzID0gcHJvcGVydHkuc3Vic3RyKDAsIDIpO1xuXG4gICAgICBpZiAoZmlyc3QyQ2hhcnMgPT09IFwibXNcIiB8fCBwcm9wZXJ0eS5zdWJzdHIoMCwgNikgPT09IFwid2Via2l0XCIpIHtcbiAgICAgICAgLy9NaWNyb3NvZnQgYW5kIHNvbWUgV2Via2l0IGJyb3dzZXJzIGRvbid0IGNvbmZvcm0gdG8gdGhlIHN0YW5kYXJkIG9mIGNhcGl0YWxpemluZyB0aGUgZmlyc3QgcHJlZml4IGNoYXJhY3Rlciwgc28gd2UgYWRqdXN0IHNvIHRoYXQgd2hlbiB3ZSBwcmVmaXggdGhlIGNhcHMgd2l0aCBhIGRhc2gsIGl0J3MgY29ycmVjdCAob3RoZXJ3aXNlIGl0J2QgYmUgXCJtcy10cmFuc2Zvcm1cIiBpbnN0ZWFkIG9mIFwiLW1zLXRyYW5zZm9ybVwiIGZvciBJRTksIGZvciBleGFtcGxlKVxuICAgICAgICBwcm9wZXJ0eSA9IFwiLVwiICsgcHJvcGVydHk7XG4gICAgICB9XG5cbiAgICAgIHN0eWxlLnJlbW92ZVByb3BlcnR5KGZpcnN0MkNoYXJzID09PSBcIi0tXCIgPyBwcm9wZXJ0eSA6IHByb3BlcnR5LnJlcGxhY2UoX2NhcHNFeHAsIFwiLSQxXCIpLnRvTG93ZXJDYXNlKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvL25vdGU6IG9sZCB2ZXJzaW9ucyBvZiBJRSB1c2UgXCJyZW1vdmVBdHRyaWJ1dGUoKVwiIGluc3RlYWQgb2YgXCJyZW1vdmVQcm9wZXJ0eSgpXCJcbiAgICAgIHN0eWxlLnJlbW92ZUF0dHJpYnV0ZShwcm9wZXJ0eSk7XG4gICAgfVxuICB9XG59LFxuICAgIF9hZGROb25Ud2VlbmluZ1BUID0gZnVuY3Rpb24gX2FkZE5vblR3ZWVuaW5nUFQocGx1Z2luLCB0YXJnZXQsIHByb3BlcnR5LCBiZWdpbm5pbmcsIGVuZCwgb25seVNldEF0RW5kKSB7XG4gIHZhciBwdCA9IG5ldyBQcm9wVHdlZW4ocGx1Z2luLl9wdCwgdGFyZ2V0LCBwcm9wZXJ0eSwgMCwgMSwgb25seVNldEF0RW5kID8gX3JlbmRlck5vblR3ZWVuaW5nVmFsdWVPbmx5QXRFbmQgOiBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZSk7XG4gIHBsdWdpbi5fcHQgPSBwdDtcbiAgcHQuYiA9IGJlZ2lubmluZztcbiAgcHQuZSA9IGVuZDtcblxuICBwbHVnaW4uX3Byb3BzLnB1c2gocHJvcGVydHkpO1xuXG4gIHJldHVybiBwdDtcbn0sXG4gICAgX25vbkNvbnZlcnRpYmxlVW5pdHMgPSB7XG4gIGRlZzogMSxcbiAgcmFkOiAxLFxuICB0dXJuOiAxXG59LFxuICAgIF9ub25TdGFuZGFyZExheW91dHMgPSB7XG4gIGdyaWQ6IDEsXG4gIGZsZXg6IDFcbn0sXG4gICAgLy90YWtlcyBhIHNpbmdsZSB2YWx1ZSBsaWtlIDIwcHggYW5kIGNvbnZlcnRzIGl0IHRvIHRoZSB1bml0IHNwZWNpZmllZCwgbGlrZSBcIiVcIiwgcmV0dXJuaW5nIG9ubHkgdGhlIG51bWVyaWMgYW1vdW50LlxuX2NvbnZlcnRUb1VuaXQgPSBmdW5jdGlvbiBfY29udmVydFRvVW5pdCh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSwgdW5pdCkge1xuICB2YXIgY3VyVmFsdWUgPSBwYXJzZUZsb2F0KHZhbHVlKSB8fCAwLFxuICAgICAgY3VyVW5pdCA9ICh2YWx1ZSArIFwiXCIpLnRyaW0oKS5zdWJzdHIoKGN1clZhbHVlICsgXCJcIikubGVuZ3RoKSB8fCBcInB4XCIsXG4gICAgICAvLyBzb21lIGJyb3dzZXJzIGxlYXZlIGV4dHJhIHdoaXRlc3BhY2UgYXQgdGhlIGJlZ2lubmluZyBvZiBDU1MgdmFyaWFibGVzLCBoZW5jZSB0aGUgbmVlZCB0byB0cmltKClcbiAgc3R5bGUgPSBfdGVtcERpdi5zdHlsZSxcbiAgICAgIGhvcml6b250YWwgPSBfaG9yaXpvbnRhbEV4cC50ZXN0KHByb3BlcnR5KSxcbiAgICAgIGlzUm9vdFNWRyA9IHRhcmdldC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwic3ZnXCIsXG4gICAgICBtZWFzdXJlUHJvcGVydHkgPSAoaXNSb290U1ZHID8gXCJjbGllbnRcIiA6IFwib2Zmc2V0XCIpICsgKGhvcml6b250YWwgPyBcIldpZHRoXCIgOiBcIkhlaWdodFwiKSxcbiAgICAgIGFtb3VudCA9IDEwMCxcbiAgICAgIHRvUGl4ZWxzID0gdW5pdCA9PT0gXCJweFwiLFxuICAgICAgdG9QZXJjZW50ID0gdW5pdCA9PT0gXCIlXCIsXG4gICAgICBweCxcbiAgICAgIHBhcmVudCxcbiAgICAgIGNhY2hlLFxuICAgICAgaXNTVkc7XG5cbiAgaWYgKHVuaXQgPT09IGN1clVuaXQgfHwgIWN1clZhbHVlIHx8IF9ub25Db252ZXJ0aWJsZVVuaXRzW3VuaXRdIHx8IF9ub25Db252ZXJ0aWJsZVVuaXRzW2N1clVuaXRdKSB7XG4gICAgcmV0dXJuIGN1clZhbHVlO1xuICB9XG5cbiAgY3VyVW5pdCAhPT0gXCJweFwiICYmICF0b1BpeGVscyAmJiAoY3VyVmFsdWUgPSBfY29udmVydFRvVW5pdCh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSwgXCJweFwiKSk7XG4gIGlzU1ZHID0gdGFyZ2V0LmdldENUTSAmJiBfaXNTVkcodGFyZ2V0KTtcblxuICBpZiAoKHRvUGVyY2VudCB8fCBjdXJVbml0ID09PSBcIiVcIikgJiYgKF90cmFuc2Zvcm1Qcm9wc1twcm9wZXJ0eV0gfHwgfnByb3BlcnR5LmluZGV4T2YoXCJhZGl1c1wiKSkpIHtcbiAgICBweCA9IGlzU1ZHID8gdGFyZ2V0LmdldEJCb3goKVtob3Jpem9udGFsID8gXCJ3aWR0aFwiIDogXCJoZWlnaHRcIl0gOiB0YXJnZXRbbWVhc3VyZVByb3BlcnR5XTtcbiAgICByZXR1cm4gX3JvdW5kKHRvUGVyY2VudCA/IGN1clZhbHVlIC8gcHggKiBhbW91bnQgOiBjdXJWYWx1ZSAvIDEwMCAqIHB4KTtcbiAgfVxuXG4gIHN0eWxlW2hvcml6b250YWwgPyBcIndpZHRoXCIgOiBcImhlaWdodFwiXSA9IGFtb3VudCArICh0b1BpeGVscyA/IGN1clVuaXQgOiB1bml0KTtcbiAgcGFyZW50ID0gfnByb3BlcnR5LmluZGV4T2YoXCJhZGl1c1wiKSB8fCB1bml0ID09PSBcImVtXCIgJiYgdGFyZ2V0LmFwcGVuZENoaWxkICYmICFpc1Jvb3RTVkcgPyB0YXJnZXQgOiB0YXJnZXQucGFyZW50Tm9kZTtcblxuICBpZiAoaXNTVkcpIHtcbiAgICBwYXJlbnQgPSAodGFyZ2V0Lm93bmVyU1ZHRWxlbWVudCB8fCB7fSkucGFyZW50Tm9kZTtcbiAgfVxuXG4gIGlmICghcGFyZW50IHx8IHBhcmVudCA9PT0gX2RvYyB8fCAhcGFyZW50LmFwcGVuZENoaWxkKSB7XG4gICAgcGFyZW50ID0gX2RvYy5ib2R5O1xuICB9XG5cbiAgY2FjaGUgPSBwYXJlbnQuX2dzYXA7XG5cbiAgaWYgKGNhY2hlICYmIHRvUGVyY2VudCAmJiBjYWNoZS53aWR0aCAmJiBob3Jpem9udGFsICYmIGNhY2hlLnRpbWUgPT09IF90aWNrZXIudGltZSAmJiAhY2FjaGUudW5jYWNoZSkge1xuICAgIHJldHVybiBfcm91bmQoY3VyVmFsdWUgLyBjYWNoZS53aWR0aCAqIGFtb3VudCk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHRvUGVyY2VudCAmJiAocHJvcGVydHkgPT09IFwiaGVpZ2h0XCIgfHwgcHJvcGVydHkgPT09IFwid2lkdGhcIikpIHtcbiAgICAgIC8vIGlmIHdlJ3JlIGRlYWxpbmcgd2l0aCB3aWR0aC9oZWlnaHQgdGhhdCdzIGluc2lkZSBhIGNvbnRhaW5lciB3aXRoIHBhZGRpbmcgYW5kL29yIGl0J3MgYSBmbGV4Ym94L2dyaWQgY29udGFpbmVyLCB3ZSBtdXN0IGFwcGx5IGl0IHRvIHRoZSB0YXJnZXQgaXRzZWxmIHJhdGhlciB0aGFuIHRoZSBfdGVtcERpdiBpbiBvcmRlciB0byBlbnN1cmUgY29tcGxldGUgYWNjdXJhY3ksIGZhY3RvcmluZyBpbiB0aGUgcGFyZW50J3MgcGFkZGluZy5cbiAgICAgIHZhciB2ID0gdGFyZ2V0LnN0eWxlW3Byb3BlcnR5XTtcbiAgICAgIHRhcmdldC5zdHlsZVtwcm9wZXJ0eV0gPSBhbW91bnQgKyB1bml0O1xuICAgICAgcHggPSB0YXJnZXRbbWVhc3VyZVByb3BlcnR5XTtcbiAgICAgIHYgPyB0YXJnZXQuc3R5bGVbcHJvcGVydHldID0gdiA6IF9yZW1vdmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgKHRvUGVyY2VudCB8fCBjdXJVbml0ID09PSBcIiVcIikgJiYgIV9ub25TdGFuZGFyZExheW91dHNbX2dldENvbXB1dGVkUHJvcGVydHkocGFyZW50LCBcImRpc3BsYXlcIildICYmIChzdHlsZS5wb3NpdGlvbiA9IF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgXCJwb3NpdGlvblwiKSk7XG4gICAgICBwYXJlbnQgPT09IHRhcmdldCAmJiAoc3R5bGUucG9zaXRpb24gPSBcInN0YXRpY1wiKTsgLy8gbGlrZSBmb3IgYm9yZGVyUmFkaXVzLCBpZiBpdCdzIGEgJSB3ZSBtdXN0IGhhdmUgaXQgcmVsYXRpdmUgdG8gdGhlIHRhcmdldCBpdHNlbGYgYnV0IHRoYXQgbWF5IG5vdCBoYXZlIHBvc2l0aW9uOiByZWxhdGl2ZSBvciBwb3NpdGlvbjogYWJzb2x1dGUgaW4gd2hpY2ggY2FzZSBpdCdkIGdvIHVwIHRoZSBjaGFpbiB1bnRpbCBpdCBmaW5kcyBpdHMgb2Zmc2V0UGFyZW50IChiYWQpLiBwb3NpdGlvbjogc3RhdGljIHByb3RlY3RzIGFnYWluc3QgdGhhdC5cblxuICAgICAgcGFyZW50LmFwcGVuZENoaWxkKF90ZW1wRGl2KTtcbiAgICAgIHB4ID0gX3RlbXBEaXZbbWVhc3VyZVByb3BlcnR5XTtcbiAgICAgIHBhcmVudC5yZW1vdmVDaGlsZChfdGVtcERpdik7XG4gICAgICBzdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcbiAgICB9XG5cbiAgICBpZiAoaG9yaXpvbnRhbCAmJiB0b1BlcmNlbnQpIHtcbiAgICAgIGNhY2hlID0gX2dldENhY2hlKHBhcmVudCk7XG4gICAgICBjYWNoZS50aW1lID0gX3RpY2tlci50aW1lO1xuICAgICAgY2FjaGUud2lkdGggPSBwYXJlbnRbbWVhc3VyZVByb3BlcnR5XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gX3JvdW5kKHRvUGl4ZWxzID8gcHggKiBjdXJWYWx1ZSAvIGFtb3VudCA6IHB4ICYmIGN1clZhbHVlID8gYW1vdW50IC8gcHggKiBjdXJWYWx1ZSA6IDApO1xufSxcbiAgICBfZ2V0ID0gZnVuY3Rpb24gX2dldCh0YXJnZXQsIHByb3BlcnR5LCB1bml0LCB1bmNhY2hlKSB7XG4gIHZhciB2YWx1ZTtcbiAgX3BsdWdpbkluaXR0ZWQgfHwgX2luaXRDb3JlKCk7XG5cbiAgaWYgKHByb3BlcnR5IGluIF9wcm9wZXJ0eUFsaWFzZXMgJiYgcHJvcGVydHkgIT09IFwidHJhbnNmb3JtXCIpIHtcbiAgICBwcm9wZXJ0eSA9IF9wcm9wZXJ0eUFsaWFzZXNbcHJvcGVydHldO1xuXG4gICAgaWYgKH5wcm9wZXJ0eS5pbmRleE9mKFwiLFwiKSkge1xuICAgICAgcHJvcGVydHkgPSBwcm9wZXJ0eS5zcGxpdChcIixcIilbMF07XG4gICAgfVxuICB9XG5cbiAgaWYgKF90cmFuc2Zvcm1Qcm9wc1twcm9wZXJ0eV0gJiYgcHJvcGVydHkgIT09IFwidHJhbnNmb3JtXCIpIHtcbiAgICB2YWx1ZSA9IF9wYXJzZVRyYW5zZm9ybSh0YXJnZXQsIHVuY2FjaGUpO1xuICAgIHZhbHVlID0gcHJvcGVydHkgIT09IFwidHJhbnNmb3JtT3JpZ2luXCIgPyB2YWx1ZVtwcm9wZXJ0eV0gOiB2YWx1ZS5zdmcgPyB2YWx1ZS5vcmlnaW4gOiBfZmlyc3RUd29Pbmx5KF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgX3RyYW5zZm9ybU9yaWdpblByb3ApKSArIFwiIFwiICsgdmFsdWUuek9yaWdpbiArIFwicHhcIjtcbiAgfSBlbHNlIHtcbiAgICB2YWx1ZSA9IHRhcmdldC5zdHlsZVtwcm9wZXJ0eV07XG5cbiAgICBpZiAoIXZhbHVlIHx8IHZhbHVlID09PSBcImF1dG9cIiB8fCB1bmNhY2hlIHx8IH4odmFsdWUgKyBcIlwiKS5pbmRleE9mKFwiY2FsYyhcIikpIHtcbiAgICAgIHZhbHVlID0gX3NwZWNpYWxQcm9wc1twcm9wZXJ0eV0gJiYgX3NwZWNpYWxQcm9wc1twcm9wZXJ0eV0odGFyZ2V0LCBwcm9wZXJ0eSwgdW5pdCkgfHwgX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSkgfHwgX2dldFByb3BlcnR5KHRhcmdldCwgcHJvcGVydHkpIHx8IChwcm9wZXJ0eSA9PT0gXCJvcGFjaXR5XCIgPyAxIDogMCk7IC8vIG5vdGU6IHNvbWUgYnJvd3NlcnMsIGxpa2UgRmlyZWZveCwgZG9uJ3QgcmVwb3J0IGJvcmRlclJhZGl1cyBjb3JyZWN0bHkhIEluc3RlYWQsIGl0IG9ubHkgcmVwb3J0cyBldmVyeSBjb3JuZXIgbGlrZSAgYm9yZGVyVG9wTGVmdFJhZGl1c1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB1bml0ICYmICF+KHZhbHVlICsgXCJcIikudHJpbSgpLmluZGV4T2YoXCIgXCIpID8gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIHVuaXQpICsgdW5pdCA6IHZhbHVlO1xufSxcbiAgICBfdHdlZW5Db21wbGV4Q1NTU3RyaW5nID0gZnVuY3Rpb24gX3R3ZWVuQ29tcGxleENTU1N0cmluZyh0YXJnZXQsIHByb3AsIHN0YXJ0LCBlbmQpIHtcbiAgLy8gbm90ZTogd2UgY2FsbCBfdHdlZW5Db21wbGV4Q1NTU3RyaW5nLmNhbGwocGx1Z2luSW5zdGFuY2UuLi4pIHRvIGVuc3VyZSB0aGF0IGl0J3Mgc2NvcGVkIHByb3Blcmx5LiBXZSBtYXkgY2FsbCBpdCBmcm9tIHdpdGhpbiBhIHBsdWdpbiB0b28sIHRodXMgXCJ0aGlzXCIgd291bGQgcmVmZXIgdG8gdGhlIHBsdWdpbi5cbiAgaWYgKCFzdGFydCB8fCBzdGFydCA9PT0gXCJub25lXCIpIHtcbiAgICAvLyBzb21lIGJyb3dzZXJzIGxpa2UgU2FmYXJpIGFjdHVhbGx5IFBSRUZFUiB0aGUgcHJlZml4ZWQgcHJvcGVydHkgYW5kIG1pcy1yZXBvcnQgdGhlIHVucHJlZml4ZWQgdmFsdWUgbGlrZSBjbGlwUGF0aCAoQlVHKS4gSW4gb3RoZXIgd29yZHMsIGV2ZW4gdGhvdWdoIGNsaXBQYXRoIGV4aXN0cyBpbiB0aGUgc3R5bGUgKFwiY2xpcFBhdGhcIiBpbiB0YXJnZXQuc3R5bGUpIGFuZCBpdCdzIHNldCBpbiB0aGUgQ1NTIHByb3Blcmx5IChhbG9uZyB3aXRoIC13ZWJraXQtY2xpcC1wYXRoKSwgU2FmYXJpIHJlcG9ydHMgY2xpcFBhdGggYXMgXCJub25lXCIgd2hlcmVhcyBXZWJraXRDbGlwUGF0aCByZXBvcnRzIGFjY3VyYXRlbHkgbGlrZSBcImVsbGlwc2UoMTAwJSAwJSBhdCA1MCUgMCUpXCIsIHNvIGluIHRoaXMgY2FzZSB3ZSBtdXN0IFNXSVRDSCB0byB1c2luZyB0aGUgcHJlZml4ZWQgcHJvcGVydHkgaW5zdGVhZC4gU2VlIGh0dHBzOi8vZ3NhcC5jb20vZm9ydW1zL3RvcGljLzE4MzEwLWNsaXBwYXRoLWRvZXNudC13b3JrLW9uLWlvcy9cbiAgICB2YXIgcCA9IF9jaGVja1Byb3BQcmVmaXgocHJvcCwgdGFyZ2V0LCAxKSxcbiAgICAgICAgcyA9IHAgJiYgX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBwLCAxKTtcblxuICAgIGlmIChzICYmIHMgIT09IHN0YXJ0KSB7XG4gICAgICBwcm9wID0gcDtcbiAgICAgIHN0YXJ0ID0gcztcbiAgICB9IGVsc2UgaWYgKHByb3AgPT09IFwiYm9yZGVyQ29sb3JcIikge1xuICAgICAgc3RhcnQgPSBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIFwiYm9yZGVyVG9wQ29sb3JcIik7IC8vIEZpcmVmb3ggYnVnOiBhbHdheXMgcmVwb3J0cyBcImJvcmRlckNvbG9yXCIgYXMgXCJcIiwgc28gd2UgbXVzdCBmYWxsIGJhY2sgdG8gYm9yZGVyVG9wQ29sb3IuIFNlZSBodHRwczovL2dzYXAuY29tL2ZvcnVtcy90b3BpYy8yNDU4My1ob3ctdG8tcmV0dXJuLWNvbG9ycy10aGF0LWktaGFkLWFmdGVyLXJldmVyc2UvXG4gICAgfVxuICB9XG5cbiAgdmFyIHB0ID0gbmV3IFByb3BUd2Vlbih0aGlzLl9wdCwgdGFyZ2V0LnN0eWxlLCBwcm9wLCAwLCAxLCBfcmVuZGVyQ29tcGxleFN0cmluZyksXG4gICAgICBpbmRleCA9IDAsXG4gICAgICBtYXRjaEluZGV4ID0gMCxcbiAgICAgIGEsXG4gICAgICByZXN1bHQsXG4gICAgICBzdGFydFZhbHVlcyxcbiAgICAgIHN0YXJ0TnVtLFxuICAgICAgY29sb3IsXG4gICAgICBzdGFydFZhbHVlLFxuICAgICAgZW5kVmFsdWUsXG4gICAgICBlbmROdW0sXG4gICAgICBjaHVuayxcbiAgICAgIGVuZFVuaXQsXG4gICAgICBzdGFydFVuaXQsXG4gICAgICBlbmRWYWx1ZXM7XG4gIHB0LmIgPSBzdGFydDtcbiAgcHQuZSA9IGVuZDtcbiAgc3RhcnQgKz0gXCJcIjsgLy8gZW5zdXJlIHZhbHVlcyBhcmUgc3RyaW5nc1xuXG4gIGVuZCArPSBcIlwiO1xuXG4gIGlmIChlbmQgPT09IFwiYXV0b1wiKSB7XG4gICAgc3RhcnRWYWx1ZSA9IHRhcmdldC5zdHlsZVtwcm9wXTtcbiAgICB0YXJnZXQuc3R5bGVbcHJvcF0gPSBlbmQ7XG4gICAgZW5kID0gX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBwcm9wKSB8fCBlbmQ7XG4gICAgc3RhcnRWYWx1ZSA/IHRhcmdldC5zdHlsZVtwcm9wXSA9IHN0YXJ0VmFsdWUgOiBfcmVtb3ZlUHJvcGVydHkodGFyZ2V0LCBwcm9wKTtcbiAgfVxuXG4gIGEgPSBbc3RhcnQsIGVuZF07XG5cbiAgX2NvbG9yU3RyaW5nRmlsdGVyKGEpOyAvLyBwYXNzIGFuIGFycmF5IHdpdGggdGhlIHN0YXJ0aW5nIGFuZCBlbmRpbmcgdmFsdWVzIGFuZCBsZXQgdGhlIGZpbHRlciBkbyB3aGF0ZXZlciBpdCBuZWVkcyB0byB0aGUgdmFsdWVzLiBJZiBjb2xvcnMgYXJlIGZvdW5kLCBpdCByZXR1cm5zIHRydWUgYW5kIHRoZW4gd2UgbXVzdCBtYXRjaCB3aGVyZSB0aGUgY29sb3Igc2hvd3MgdXAgb3JkZXItd2lzZSBiZWNhdXNlIGZvciB0aGluZ3MgbGlrZSBib3hTaGFkb3csIHNvbWV0aW1lcyB0aGUgYnJvd3NlciBwcm92aWRlcyB0aGUgY29tcHV0ZWQgdmFsdWVzIHdpdGggdGhlIGNvbG9yIEZJUlNULCBidXQgdGhlIHVzZXIgcHJvdmlkZXMgaXQgd2l0aCB0aGUgY29sb3IgTEFTVCwgc28gZmxpcCB0aGVtIGlmIG5lY2Vzc2FyeS4gU2FtZSBmb3IgZHJvcC1zaGFkb3coKS5cblxuXG4gIHN0YXJ0ID0gYVswXTtcbiAgZW5kID0gYVsxXTtcbiAgc3RhcnRWYWx1ZXMgPSBzdGFydC5tYXRjaChfbnVtV2l0aFVuaXRFeHApIHx8IFtdO1xuICBlbmRWYWx1ZXMgPSBlbmQubWF0Y2goX251bVdpdGhVbml0RXhwKSB8fCBbXTtcblxuICBpZiAoZW5kVmFsdWVzLmxlbmd0aCkge1xuICAgIHdoaWxlIChyZXN1bHQgPSBfbnVtV2l0aFVuaXRFeHAuZXhlYyhlbmQpKSB7XG4gICAgICBlbmRWYWx1ZSA9IHJlc3VsdFswXTtcbiAgICAgIGNodW5rID0gZW5kLnN1YnN0cmluZyhpbmRleCwgcmVzdWx0LmluZGV4KTtcblxuICAgICAgaWYgKGNvbG9yKSB7XG4gICAgICAgIGNvbG9yID0gKGNvbG9yICsgMSkgJSA1O1xuICAgICAgfSBlbHNlIGlmIChjaHVuay5zdWJzdHIoLTUpID09PSBcInJnYmEoXCIgfHwgY2h1bmsuc3Vic3RyKC01KSA9PT0gXCJoc2xhKFwiKSB7XG4gICAgICAgIGNvbG9yID0gMTtcbiAgICAgIH1cblxuICAgICAgaWYgKGVuZFZhbHVlICE9PSAoc3RhcnRWYWx1ZSA9IHN0YXJ0VmFsdWVzW21hdGNoSW5kZXgrK10gfHwgXCJcIikpIHtcbiAgICAgICAgc3RhcnROdW0gPSBwYXJzZUZsb2F0KHN0YXJ0VmFsdWUpIHx8IDA7XG4gICAgICAgIHN0YXJ0VW5pdCA9IHN0YXJ0VmFsdWUuc3Vic3RyKChzdGFydE51bSArIFwiXCIpLmxlbmd0aCk7XG4gICAgICAgIGVuZFZhbHVlLmNoYXJBdCgxKSA9PT0gXCI9XCIgJiYgKGVuZFZhbHVlID0gX3BhcnNlUmVsYXRpdmUoc3RhcnROdW0sIGVuZFZhbHVlKSArIHN0YXJ0VW5pdCk7XG4gICAgICAgIGVuZE51bSA9IHBhcnNlRmxvYXQoZW5kVmFsdWUpO1xuICAgICAgICBlbmRVbml0ID0gZW5kVmFsdWUuc3Vic3RyKChlbmROdW0gKyBcIlwiKS5sZW5ndGgpO1xuICAgICAgICBpbmRleCA9IF9udW1XaXRoVW5pdEV4cC5sYXN0SW5kZXggLSBlbmRVbml0Lmxlbmd0aDtcblxuICAgICAgICBpZiAoIWVuZFVuaXQpIHtcbiAgICAgICAgICAvL2lmIHNvbWV0aGluZyBsaWtlIFwicGVyc3BlY3RpdmU6MzAwXCIgaXMgcGFzc2VkIGluIGFuZCB3ZSBtdXN0IGFkZCBhIHVuaXQgdG8gdGhlIGVuZFxuICAgICAgICAgIGVuZFVuaXQgPSBlbmRVbml0IHx8IF9jb25maWcudW5pdHNbcHJvcF0gfHwgc3RhcnRVbml0O1xuXG4gICAgICAgICAgaWYgKGluZGV4ID09PSBlbmQubGVuZ3RoKSB7XG4gICAgICAgICAgICBlbmQgKz0gZW5kVW5pdDtcbiAgICAgICAgICAgIHB0LmUgKz0gZW5kVW5pdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RhcnRVbml0ICE9PSBlbmRVbml0KSB7XG4gICAgICAgICAgc3RhcnROdW0gPSBfY29udmVydFRvVW5pdCh0YXJnZXQsIHByb3AsIHN0YXJ0VmFsdWUsIGVuZFVuaXQpIHx8IDA7XG4gICAgICAgIH0gLy8gdGhlc2UgbmVzdGVkIFByb3BUd2VlbnMgYXJlIGhhbmRsZWQgaW4gYSBzcGVjaWFsIHdheSAtIHdlJ2xsIG5ldmVyIGFjdHVhbGx5IGNhbGwgYSByZW5kZXIgb3Igc2V0dGVyIG1ldGhvZCBvbiB0aGVtLiBXZSdsbCBqdXN0IGxvb3AgdGhyb3VnaCB0aGVtIGluIHRoZSBwYXJlbnQgY29tcGxleCBzdHJpbmcgUHJvcFR3ZWVuJ3MgcmVuZGVyIG1ldGhvZC5cblxuXG4gICAgICAgIHB0Ll9wdCA9IHtcbiAgICAgICAgICBfbmV4dDogcHQuX3B0LFxuICAgICAgICAgIHA6IGNodW5rIHx8IG1hdGNoSW5kZXggPT09IDEgPyBjaHVuayA6IFwiLFwiLFxuICAgICAgICAgIC8vbm90ZTogU1ZHIHNwZWMgYWxsb3dzIG9taXNzaW9uIG9mIGNvbW1hL3NwYWNlIHdoZW4gYSBuZWdhdGl2ZSBzaWduIGlzIHdlZGdlZCBiZXR3ZWVuIHR3byBudW1iZXJzLCBsaWtlIDIuNS01LjMgaW5zdGVhZCBvZiAyLjUsLTUuMyBidXQgd2hlbiB0d2VlbmluZywgdGhlIG5lZ2F0aXZlIHZhbHVlIG1heSBzd2l0Y2ggdG8gcG9zaXRpdmUsIHNvIHdlIGluc2VydCB0aGUgY29tbWEganVzdCBpbiBjYXNlLlxuICAgICAgICAgIHM6IHN0YXJ0TnVtLFxuICAgICAgICAgIGM6IGVuZE51bSAtIHN0YXJ0TnVtLFxuICAgICAgICAgIG06IGNvbG9yICYmIGNvbG9yIDwgNCB8fCBwcm9wID09PSBcInpJbmRleFwiID8gTWF0aC5yb3VuZCA6IDBcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwdC5jID0gaW5kZXggPCBlbmQubGVuZ3RoID8gZW5kLnN1YnN0cmluZyhpbmRleCwgZW5kLmxlbmd0aCkgOiBcIlwiOyAvL3dlIHVzZSB0aGUgXCJjXCIgb2YgdGhlIFByb3BUd2VlbiB0byBzdG9yZSB0aGUgZmluYWwgcGFydCBvZiB0aGUgc3RyaW5nIChhZnRlciB0aGUgbGFzdCBudW1iZXIpXG4gIH0gZWxzZSB7XG4gICAgcHQuciA9IHByb3AgPT09IFwiZGlzcGxheVwiICYmIGVuZCA9PT0gXCJub25lXCIgPyBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZU9ubHlBdEVuZCA6IF9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlO1xuICB9XG5cbiAgX3JlbEV4cC50ZXN0KGVuZCkgJiYgKHB0LmUgPSAwKTsgLy9pZiB0aGUgZW5kIHN0cmluZyBjb250YWlucyByZWxhdGl2ZSB2YWx1ZXMgb3IgZHluYW1pYyByYW5kb20oLi4uKSB2YWx1ZXMsIGRlbGV0ZSB0aGUgZW5kIGl0IHNvIHRoYXQgb24gdGhlIGZpbmFsIHJlbmRlciB3ZSBkb24ndCBhY3R1YWxseSBzZXQgaXQgdG8gdGhlIHN0cmluZyB3aXRoICs9IG9yIC09IGNoYXJhY3RlcnMgKGZvcmNlcyBpdCB0byB1c2UgdGhlIGNhbGN1bGF0ZWQgdmFsdWUpLlxuXG4gIHRoaXMuX3B0ID0gcHQ7IC8vc3RhcnQgdGhlIGxpbmtlZCBsaXN0IHdpdGggdGhpcyBuZXcgUHJvcFR3ZWVuLiBSZW1lbWJlciwgd2UgY2FsbCBfdHdlZW5Db21wbGV4Q1NTU3RyaW5nLmNhbGwocGx1Z2luSW5zdGFuY2UuLi4pIHRvIGVuc3VyZSB0aGF0IGl0J3Mgc2NvcGVkIHByb3Blcmx5LiBXZSBtYXkgY2FsbCBpdCBmcm9tIHdpdGhpbiBhbm90aGVyIHBsdWdpbiB0b28sIHRodXMgXCJ0aGlzXCIgd291bGQgcmVmZXIgdG8gdGhlIHBsdWdpbi5cblxuICByZXR1cm4gcHQ7XG59LFxuICAgIF9rZXl3b3JkVG9QZXJjZW50ID0ge1xuICB0b3A6IFwiMCVcIixcbiAgYm90dG9tOiBcIjEwMCVcIixcbiAgbGVmdDogXCIwJVwiLFxuICByaWdodDogXCIxMDAlXCIsXG4gIGNlbnRlcjogXCI1MCVcIlxufSxcbiAgICBfY29udmVydEtleXdvcmRzVG9QZXJjZW50YWdlcyA9IGZ1bmN0aW9uIF9jb252ZXJ0S2V5d29yZHNUb1BlcmNlbnRhZ2VzKHZhbHVlKSB7XG4gIHZhciBzcGxpdCA9IHZhbHVlLnNwbGl0KFwiIFwiKSxcbiAgICAgIHggPSBzcGxpdFswXSxcbiAgICAgIHkgPSBzcGxpdFsxXSB8fCBcIjUwJVwiO1xuXG4gIGlmICh4ID09PSBcInRvcFwiIHx8IHggPT09IFwiYm90dG9tXCIgfHwgeSA9PT0gXCJsZWZ0XCIgfHwgeSA9PT0gXCJyaWdodFwiKSB7XG4gICAgLy90aGUgdXNlciBwcm92aWRlZCB0aGVtIGluIHRoZSB3cm9uZyBvcmRlciwgc28gZmxpcCB0aGVtXG4gICAgdmFsdWUgPSB4O1xuICAgIHggPSB5O1xuICAgIHkgPSB2YWx1ZTtcbiAgfVxuXG4gIHNwbGl0WzBdID0gX2tleXdvcmRUb1BlcmNlbnRbeF0gfHwgeDtcbiAgc3BsaXRbMV0gPSBfa2V5d29yZFRvUGVyY2VudFt5XSB8fCB5O1xuICByZXR1cm4gc3BsaXQuam9pbihcIiBcIik7XG59LFxuICAgIF9yZW5kZXJDbGVhclByb3BzID0gZnVuY3Rpb24gX3JlbmRlckNsZWFyUHJvcHMocmF0aW8sIGRhdGEpIHtcbiAgaWYgKGRhdGEudHdlZW4gJiYgZGF0YS50d2Vlbi5fdGltZSA9PT0gZGF0YS50d2Vlbi5fZHVyKSB7XG4gICAgdmFyIHRhcmdldCA9IGRhdGEudCxcbiAgICAgICAgc3R5bGUgPSB0YXJnZXQuc3R5bGUsXG4gICAgICAgIHByb3BzID0gZGF0YS51LFxuICAgICAgICBjYWNoZSA9IHRhcmdldC5fZ3NhcCxcbiAgICAgICAgcHJvcCxcbiAgICAgICAgY2xlYXJUcmFuc2Zvcm1zLFxuICAgICAgICBpO1xuXG4gICAgaWYgKHByb3BzID09PSBcImFsbFwiIHx8IHByb3BzID09PSB0cnVlKSB7XG4gICAgICBzdHlsZS5jc3NUZXh0ID0gXCJcIjtcbiAgICAgIGNsZWFyVHJhbnNmb3JtcyA9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb3BzID0gcHJvcHMuc3BsaXQoXCIsXCIpO1xuICAgICAgaSA9IHByb3BzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKC0taSA+IC0xKSB7XG4gICAgICAgIHByb3AgPSBwcm9wc1tpXTtcblxuICAgICAgICBpZiAoX3RyYW5zZm9ybVByb3BzW3Byb3BdKSB7XG4gICAgICAgICAgY2xlYXJUcmFuc2Zvcm1zID0gMTtcbiAgICAgICAgICBwcm9wID0gcHJvcCA9PT0gXCJ0cmFuc2Zvcm1PcmlnaW5cIiA/IF90cmFuc2Zvcm1PcmlnaW5Qcm9wIDogX3RyYW5zZm9ybVByb3A7XG4gICAgICAgIH1cblxuICAgICAgICBfcmVtb3ZlUHJvcGVydHkodGFyZ2V0LCBwcm9wKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY2xlYXJUcmFuc2Zvcm1zKSB7XG4gICAgICBfcmVtb3ZlUHJvcGVydHkodGFyZ2V0LCBfdHJhbnNmb3JtUHJvcCk7XG5cbiAgICAgIGlmIChjYWNoZSkge1xuICAgICAgICBjYWNoZS5zdmcgJiYgdGFyZ2V0LnJlbW92ZUF0dHJpYnV0ZShcInRyYW5zZm9ybVwiKTtcblxuICAgICAgICBfcGFyc2VUcmFuc2Zvcm0odGFyZ2V0LCAxKTsgLy8gZm9yY2UgYWxsIHRoZSBjYWNoZWQgdmFsdWVzIGJhY2sgdG8gXCJub3JtYWxcIi9pZGVudGl0eSwgb3RoZXJ3aXNlIGlmIHRoZXJlJ3MgYW5vdGhlciB0d2VlbiB0aGF0J3MgYWxyZWFkeSBzZXQgdG8gcmVuZGVyIHRyYW5zZm9ybXMgb24gdGhpcyBlbGVtZW50LCBpdCBjb3VsZCBkaXNwbGF5IHRoZSB3cm9uZyB2YWx1ZXMuXG5cblxuICAgICAgICBjYWNoZS51bmNhY2hlID0gMTtcblxuICAgICAgICBfcmVtb3ZlSW5kZXBlbmRlbnRUcmFuc2Zvcm1zKHN0eWxlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0sXG4gICAgLy8gbm90ZTogc3BlY2lhbFByb3BzIHNob3VsZCByZXR1cm4gMSBpZiAoYW5kIG9ubHkgaWYpIHRoZXkgaGF2ZSBhIG5vbi16ZXJvIHByaW9yaXR5LiBJdCBpbmRpY2F0ZXMgd2UgbmVlZCB0byBzb3J0IHRoZSBsaW5rZWQgbGlzdC5cbl9zcGVjaWFsUHJvcHMgPSB7XG4gIGNsZWFyUHJvcHM6IGZ1bmN0aW9uIGNsZWFyUHJvcHMocGx1Z2luLCB0YXJnZXQsIHByb3BlcnR5LCBlbmRWYWx1ZSwgdHdlZW4pIHtcbiAgICBpZiAodHdlZW4uZGF0YSAhPT0gXCJpc0Zyb21TdGFydFwiKSB7XG4gICAgICB2YXIgcHQgPSBwbHVnaW4uX3B0ID0gbmV3IFByb3BUd2VlbihwbHVnaW4uX3B0LCB0YXJnZXQsIHByb3BlcnR5LCAwLCAwLCBfcmVuZGVyQ2xlYXJQcm9wcyk7XG4gICAgICBwdC51ID0gZW5kVmFsdWU7XG4gICAgICBwdC5wciA9IC0xMDtcbiAgICAgIHB0LnR3ZWVuID0gdHdlZW47XG5cbiAgICAgIHBsdWdpbi5fcHJvcHMucHVzaChwcm9wZXJ0eSk7XG5cbiAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgfVxuICAvKiBjbGFzc05hbWUgZmVhdHVyZSAoYWJvdXQgMC40a2IgZ3ppcHBlZCkuXG4gICwgY2xhc3NOYW1lKHBsdWdpbiwgdGFyZ2V0LCBwcm9wZXJ0eSwgZW5kVmFsdWUsIHR3ZWVuKSB7XG4gIFx0bGV0IF9yZW5kZXJDbGFzc05hbWUgPSAocmF0aW8sIGRhdGEpID0+IHtcbiAgXHRcdFx0ZGF0YS5jc3MucmVuZGVyKHJhdGlvLCBkYXRhLmNzcyk7XG4gIFx0XHRcdGlmICghcmF0aW8gfHwgcmF0aW8gPT09IDEpIHtcbiAgXHRcdFx0XHRsZXQgaW5saW5lID0gZGF0YS5ybXYsXG4gIFx0XHRcdFx0XHR0YXJnZXQgPSBkYXRhLnQsXG4gIFx0XHRcdFx0XHRwO1xuICBcdFx0XHRcdHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCByYXRpbyA/IGRhdGEuZSA6IGRhdGEuYik7XG4gIFx0XHRcdFx0Zm9yIChwIGluIGlubGluZSkge1xuICBcdFx0XHRcdFx0X3JlbW92ZVByb3BlcnR5KHRhcmdldCwgcCk7XG4gIFx0XHRcdFx0fVxuICBcdFx0XHR9XG4gIFx0XHR9LFxuICBcdFx0X2dldEFsbFN0eWxlcyA9ICh0YXJnZXQpID0+IHtcbiAgXHRcdFx0bGV0IHN0eWxlcyA9IHt9LFxuICBcdFx0XHRcdGNvbXB1dGVkID0gZ2V0Q29tcHV0ZWRTdHlsZSh0YXJnZXQpLFxuICBcdFx0XHRcdHA7XG4gIFx0XHRcdGZvciAocCBpbiBjb21wdXRlZCkge1xuICBcdFx0XHRcdGlmIChpc05hTihwKSAmJiBwICE9PSBcImNzc1RleHRcIiAmJiBwICE9PSBcImxlbmd0aFwiKSB7XG4gIFx0XHRcdFx0XHRzdHlsZXNbcF0gPSBjb21wdXRlZFtwXTtcbiAgXHRcdFx0XHR9XG4gIFx0XHRcdH1cbiAgXHRcdFx0X3NldERlZmF1bHRzKHN0eWxlcywgX3BhcnNlVHJhbnNmb3JtKHRhcmdldCwgMSkpO1xuICBcdFx0XHRyZXR1cm4gc3R5bGVzO1xuICBcdFx0fSxcbiAgXHRcdHN0YXJ0Q2xhc3NMaXN0ID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShcImNsYXNzXCIpLFxuICBcdFx0c3R5bGUgPSB0YXJnZXQuc3R5bGUsXG4gIFx0XHRjc3NUZXh0ID0gc3R5bGUuY3NzVGV4dCxcbiAgXHRcdGNhY2hlID0gdGFyZ2V0Ll9nc2FwLFxuICBcdFx0Y2xhc3NQVCA9IGNhY2hlLmNsYXNzUFQsXG4gIFx0XHRpbmxpbmVUb1JlbW92ZUF0RW5kID0ge30sXG4gIFx0XHRkYXRhID0ge3Q6dGFyZ2V0LCBwbHVnaW46cGx1Z2luLCBybXY6aW5saW5lVG9SZW1vdmVBdEVuZCwgYjpzdGFydENsYXNzTGlzdCwgZTooZW5kVmFsdWUuY2hhckF0KDEpICE9PSBcIj1cIikgPyBlbmRWYWx1ZSA6IHN0YXJ0Q2xhc3NMaXN0LnJlcGxhY2UobmV3IFJlZ0V4cChcIig/OlxcXFxzfF4pXCIgKyBlbmRWYWx1ZS5zdWJzdHIoMikgKyBcIig/IVtcXFxcdy1dKVwiKSwgXCJcIikgKyAoKGVuZFZhbHVlLmNoYXJBdCgwKSA9PT0gXCIrXCIpID8gXCIgXCIgKyBlbmRWYWx1ZS5zdWJzdHIoMikgOiBcIlwiKX0sXG4gIFx0XHRjaGFuZ2luZ1ZhcnMgPSB7fSxcbiAgXHRcdHN0YXJ0VmFycyA9IF9nZXRBbGxTdHlsZXModGFyZ2V0KSxcbiAgXHRcdHRyYW5zZm9ybVJlbGF0ZWQgPSAvKHRyYW5zZm9ybXxwZXJzcGVjdGl2ZSkvaSxcbiAgXHRcdGVuZFZhcnMsIHA7XG4gIFx0aWYgKGNsYXNzUFQpIHtcbiAgXHRcdGNsYXNzUFQucigxLCBjbGFzc1BULmQpO1xuICBcdFx0X3JlbW92ZUxpbmtlZExpc3RJdGVtKGNsYXNzUFQuZC5wbHVnaW4sIGNsYXNzUFQsIFwiX3B0XCIpO1xuICBcdH1cbiAgXHR0YXJnZXQuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgZGF0YS5lKTtcbiAgXHRlbmRWYXJzID0gX2dldEFsbFN0eWxlcyh0YXJnZXQsIHRydWUpO1xuICBcdHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBzdGFydENsYXNzTGlzdCk7XG4gIFx0Zm9yIChwIGluIGVuZFZhcnMpIHtcbiAgXHRcdGlmIChlbmRWYXJzW3BdICE9PSBzdGFydFZhcnNbcF0gJiYgIXRyYW5zZm9ybVJlbGF0ZWQudGVzdChwKSkge1xuICBcdFx0XHRjaGFuZ2luZ1ZhcnNbcF0gPSBlbmRWYXJzW3BdO1xuICBcdFx0XHRpZiAoIXN0eWxlW3BdICYmIHN0eWxlW3BdICE9PSBcIjBcIikge1xuICBcdFx0XHRcdGlubGluZVRvUmVtb3ZlQXRFbmRbcF0gPSAxO1xuICBcdFx0XHR9XG4gIFx0XHR9XG4gIFx0fVxuICBcdGNhY2hlLmNsYXNzUFQgPSBwbHVnaW4uX3B0ID0gbmV3IFByb3BUd2VlbihwbHVnaW4uX3B0LCB0YXJnZXQsIFwiY2xhc3NOYW1lXCIsIDAsIDAsIF9yZW5kZXJDbGFzc05hbWUsIGRhdGEsIDAsIC0xMSk7XG4gIFx0aWYgKHN0eWxlLmNzc1RleHQgIT09IGNzc1RleHQpIHsgLy9vbmx5IGFwcGx5IGlmIHRoaW5ncyBjaGFuZ2UuIE90aGVyd2lzZSwgaW4gY2FzZXMgbGlrZSBhIGJhY2tncm91bmQtaW1hZ2UgdGhhdCdzIHB1bGxlZCBkeW5hbWljYWxseSwgaXQgY291bGQgY2F1c2UgYSByZWZyZXNoLiBTZWUgaHR0cHM6Ly9nc2FwLmNvbS9mb3J1bXMvdG9waWMvMjAzNjgtcG9zc2libGUtZ3NhcC1idWctc3dpdGNoaW5nLWNsYXNzbmFtZXMtaW4tY2hyb21lLy5cbiAgXHRcdHN0eWxlLmNzc1RleHQgPSBjc3NUZXh0OyAvL3dlIHJlY29yZGVkIGNzc1RleHQgYmVmb3JlIHdlIHN3YXBwZWQgY2xhc3NlcyBhbmQgcmFuIF9nZXRBbGxTdHlsZXMoKSBiZWNhdXNlIGluIGNhc2VzIHdoZW4gYSBjbGFzc05hbWUgdHdlZW4gaXMgb3ZlcndyaXR0ZW4sIHdlIHJlbW92ZSBhbGwgdGhlIHJlbGF0ZWQgdHdlZW5pbmcgcHJvcGVydGllcyBmcm9tIHRoYXQgY2xhc3MgY2hhbmdlIChvdGhlcndpc2UgY2xhc3Mtc3BlY2lmaWMgc3R1ZmYgY2FuJ3Qgb3ZlcnJpZGUgcHJvcGVydGllcyB3ZSd2ZSBkaXJlY3RseSBzZXQgb24gdGhlIHRhcmdldCdzIHN0eWxlIG9iamVjdCBkdWUgdG8gc3BlY2lmaWNpdHkpLlxuICBcdH1cbiAgXHRfcGFyc2VUcmFuc2Zvcm0odGFyZ2V0LCB0cnVlKTsgLy90byBjbGVhciB0aGUgY2FjaGluZyBvZiB0cmFuc2Zvcm1zXG4gIFx0ZGF0YS5jc3MgPSBuZXcgZ3NhcC5wbHVnaW5zLmNzcygpO1xuICBcdGRhdGEuY3NzLmluaXQodGFyZ2V0LCBjaGFuZ2luZ1ZhcnMsIHR3ZWVuKTtcbiAgXHRwbHVnaW4uX3Byb3BzLnB1c2goLi4uZGF0YS5jc3MuX3Byb3BzKTtcbiAgXHRyZXR1cm4gMTtcbiAgfVxuICAqL1xuXG59LFxuXG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIFRSQU5TRk9STVNcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cbl9pZGVudGl0eTJETWF0cml4ID0gWzEsIDAsIDAsIDEsIDAsIDBdLFxuICAgIF9yb3RhdGlvbmFsUHJvcGVydGllcyA9IHt9LFxuICAgIF9pc051bGxUcmFuc2Zvcm0gPSBmdW5jdGlvbiBfaXNOdWxsVHJhbnNmb3JtKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gXCJtYXRyaXgoMSwgMCwgMCwgMSwgMCwgMClcIiB8fCB2YWx1ZSA9PT0gXCJub25lXCIgfHwgIXZhbHVlO1xufSxcbiAgICBfZ2V0Q29tcHV0ZWRUcmFuc2Zvcm1NYXRyaXhBc0FycmF5ID0gZnVuY3Rpb24gX2dldENvbXB1dGVkVHJhbnNmb3JtTWF0cml4QXNBcnJheSh0YXJnZXQpIHtcbiAgdmFyIG1hdHJpeFN0cmluZyA9IF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgX3RyYW5zZm9ybVByb3ApO1xuXG4gIHJldHVybiBfaXNOdWxsVHJhbnNmb3JtKG1hdHJpeFN0cmluZykgPyBfaWRlbnRpdHkyRE1hdHJpeCA6IG1hdHJpeFN0cmluZy5zdWJzdHIoNykubWF0Y2goX251bUV4cCkubWFwKF9yb3VuZCk7XG59LFxuICAgIF9nZXRNYXRyaXggPSBmdW5jdGlvbiBfZ2V0TWF0cml4KHRhcmdldCwgZm9yY2UyRCkge1xuICB2YXIgY2FjaGUgPSB0YXJnZXQuX2dzYXAgfHwgX2dldENhY2hlKHRhcmdldCksXG4gICAgICBzdHlsZSA9IHRhcmdldC5zdHlsZSxcbiAgICAgIG1hdHJpeCA9IF9nZXRDb21wdXRlZFRyYW5zZm9ybU1hdHJpeEFzQXJyYXkodGFyZ2V0KSxcbiAgICAgIHBhcmVudCxcbiAgICAgIG5leHRTaWJsaW5nLFxuICAgICAgdGVtcCxcbiAgICAgIGFkZGVkVG9ET007XG5cbiAgaWYgKGNhY2hlLnN2ZyAmJiB0YXJnZXQuZ2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIpKSB7XG4gICAgdGVtcCA9IHRhcmdldC50cmFuc2Zvcm0uYmFzZVZhbC5jb25zb2xpZGF0ZSgpLm1hdHJpeDsgLy9lbnN1cmVzIHRoYXQgZXZlbiBjb21wbGV4IHZhbHVlcyBsaWtlIFwidHJhbnNsYXRlKDUwLDYwKSByb3RhdGUoMTM1LDAsMClcIiBhcmUgcGFyc2VkIGJlY2F1c2UgaXQgbWFzaGVzIGl0IGludG8gYSBtYXRyaXguXG5cbiAgICBtYXRyaXggPSBbdGVtcC5hLCB0ZW1wLmIsIHRlbXAuYywgdGVtcC5kLCB0ZW1wLmUsIHRlbXAuZl07XG4gICAgcmV0dXJuIG1hdHJpeC5qb2luKFwiLFwiKSA9PT0gXCIxLDAsMCwxLDAsMFwiID8gX2lkZW50aXR5MkRNYXRyaXggOiBtYXRyaXg7XG4gIH0gZWxzZSBpZiAobWF0cml4ID09PSBfaWRlbnRpdHkyRE1hdHJpeCAmJiAhdGFyZ2V0Lm9mZnNldFBhcmVudCAmJiB0YXJnZXQgIT09IF9kb2NFbGVtZW50ICYmICFjYWNoZS5zdmcpIHtcbiAgICAvL25vdGU6IGlmIG9mZnNldFBhcmVudCBpcyBudWxsLCB0aGF0IG1lYW5zIHRoZSBlbGVtZW50IGlzbid0IGluIHRoZSBub3JtYWwgZG9jdW1lbnQgZmxvdywgbGlrZSBpZiBpdCBoYXMgZGlzcGxheTpub25lIG9yIG9uZSBvZiBpdHMgYW5jZXN0b3JzIGhhcyBkaXNwbGF5Om5vbmUpLiBGaXJlZm94IHJldHVybnMgbnVsbCBmb3IgZ2V0Q29tcHV0ZWRTdHlsZSgpIGlmIHRoZSBlbGVtZW50IGlzIGluIGFuIGlmcmFtZSB0aGF0IGhhcyBkaXNwbGF5Om5vbmUuIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTU0ODM5N1xuICAgIC8vYnJvd3NlcnMgZG9uJ3QgcmVwb3J0IHRyYW5zZm9ybXMgYWNjdXJhdGVseSB1bmxlc3MgdGhlIGVsZW1lbnQgaXMgaW4gdGhlIERPTSBhbmQgaGFzIGEgZGlzcGxheSB2YWx1ZSB0aGF0J3Mgbm90IFwibm9uZVwiLiBGaXJlZm94IGFuZCBNaWNyb3NvZnQgYnJvd3NlcnMgaGF2ZSBhIHBhcnRpYWwgYnVnIHdoZXJlIHRoZXknbGwgcmVwb3J0IHRyYW5zZm9ybXMgZXZlbiBpZiBkaXNwbGF5Om5vbmUgQlVUIG5vdCBhbnkgcGVyY2VudGFnZS1iYXNlZCB2YWx1ZXMgbGlrZSB0cmFuc2xhdGUoLTUwJSwgOHB4KSB3aWxsIGJlIHJlcG9ydGVkIGFzIGlmIGl0J3MgdHJhbnNsYXRlKDAsIDhweCkuXG4gICAgdGVtcCA9IHN0eWxlLmRpc3BsYXk7XG4gICAgc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICBwYXJlbnQgPSB0YXJnZXQucGFyZW50Tm9kZTtcblxuICAgIGlmICghcGFyZW50IHx8ICF0YXJnZXQub2Zmc2V0UGFyZW50KSB7XG4gICAgICAvLyBub3RlOiBpbiAzLjMuMCB3ZSBzd2l0Y2hlZCB0YXJnZXQub2Zmc2V0UGFyZW50IHRvIF9kb2MuYm9keS5jb250YWlucyh0YXJnZXQpIHRvIGF2b2lkIFtzb21ldGltZXMgdW5uZWNlc3NhcnldIE11dGF0aW9uT2JzZXJ2ZXIgY2FsbHMgYnV0IHRoYXQgd2Fzbid0IGFkZXF1YXRlIGJlY2F1c2UgdGhlcmUgYXJlIGVkZ2UgY2FzZXMgd2hlcmUgbmVzdGVkIHBvc2l0aW9uOiBmaXhlZCBlbGVtZW50cyBuZWVkIHRvIGdldCByZXBhcmVudGVkIHRvIGFjY3VyYXRlbHkgc2Vuc2UgdHJhbnNmb3Jtcy4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ncmVlbnNvY2svR1NBUC9pc3N1ZXMvMzg4IGFuZCBodHRwczovL2dpdGh1Yi5jb20vZ3JlZW5zb2NrL0dTQVAvaXNzdWVzLzM3NVxuICAgICAgYWRkZWRUb0RPTSA9IDE7IC8vZmxhZ1xuXG4gICAgICBuZXh0U2libGluZyA9IHRhcmdldC5uZXh0RWxlbWVudFNpYmxpbmc7XG5cbiAgICAgIF9kb2NFbGVtZW50LmFwcGVuZENoaWxkKHRhcmdldCk7IC8vd2UgbXVzdCBhZGQgaXQgdG8gdGhlIERPTSBpbiBvcmRlciB0byBnZXQgdmFsdWVzIHByb3Blcmx5XG5cbiAgICB9XG5cbiAgICBtYXRyaXggPSBfZ2V0Q29tcHV0ZWRUcmFuc2Zvcm1NYXRyaXhBc0FycmF5KHRhcmdldCk7XG4gICAgdGVtcCA/IHN0eWxlLmRpc3BsYXkgPSB0ZW1wIDogX3JlbW92ZVByb3BlcnR5KHRhcmdldCwgXCJkaXNwbGF5XCIpO1xuXG4gICAgaWYgKGFkZGVkVG9ET00pIHtcbiAgICAgIG5leHRTaWJsaW5nID8gcGFyZW50Lmluc2VydEJlZm9yZSh0YXJnZXQsIG5leHRTaWJsaW5nKSA6IHBhcmVudCA/IHBhcmVudC5hcHBlbmRDaGlsZCh0YXJnZXQpIDogX2RvY0VsZW1lbnQucmVtb3ZlQ2hpbGQodGFyZ2V0KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZm9yY2UyRCAmJiBtYXRyaXgubGVuZ3RoID4gNiA/IFttYXRyaXhbMF0sIG1hdHJpeFsxXSwgbWF0cml4WzRdLCBtYXRyaXhbNV0sIG1hdHJpeFsxMl0sIG1hdHJpeFsxM11dIDogbWF0cml4O1xufSxcbiAgICBfYXBwbHlTVkdPcmlnaW4gPSBmdW5jdGlvbiBfYXBwbHlTVkdPcmlnaW4odGFyZ2V0LCBvcmlnaW4sIG9yaWdpbklzQWJzb2x1dGUsIHNtb290aCwgbWF0cml4QXJyYXksIHBsdWdpblRvQWRkUHJvcFR3ZWVuc1RvKSB7XG4gIHZhciBjYWNoZSA9IHRhcmdldC5fZ3NhcCxcbiAgICAgIG1hdHJpeCA9IG1hdHJpeEFycmF5IHx8IF9nZXRNYXRyaXgodGFyZ2V0LCB0cnVlKSxcbiAgICAgIHhPcmlnaW5PbGQgPSBjYWNoZS54T3JpZ2luIHx8IDAsXG4gICAgICB5T3JpZ2luT2xkID0gY2FjaGUueU9yaWdpbiB8fCAwLFxuICAgICAgeE9mZnNldE9sZCA9IGNhY2hlLnhPZmZzZXQgfHwgMCxcbiAgICAgIHlPZmZzZXRPbGQgPSBjYWNoZS55T2Zmc2V0IHx8IDAsXG4gICAgICBhID0gbWF0cml4WzBdLFxuICAgICAgYiA9IG1hdHJpeFsxXSxcbiAgICAgIGMgPSBtYXRyaXhbMl0sXG4gICAgICBkID0gbWF0cml4WzNdLFxuICAgICAgdHggPSBtYXRyaXhbNF0sXG4gICAgICB0eSA9IG1hdHJpeFs1XSxcbiAgICAgIG9yaWdpblNwbGl0ID0gb3JpZ2luLnNwbGl0KFwiIFwiKSxcbiAgICAgIHhPcmlnaW4gPSBwYXJzZUZsb2F0KG9yaWdpblNwbGl0WzBdKSB8fCAwLFxuICAgICAgeU9yaWdpbiA9IHBhcnNlRmxvYXQob3JpZ2luU3BsaXRbMV0pIHx8IDAsXG4gICAgICBib3VuZHMsXG4gICAgICBkZXRlcm1pbmFudCxcbiAgICAgIHgsXG4gICAgICB5O1xuXG4gIGlmICghb3JpZ2luSXNBYnNvbHV0ZSkge1xuICAgIGJvdW5kcyA9IF9nZXRCQm94KHRhcmdldCk7XG4gICAgeE9yaWdpbiA9IGJvdW5kcy54ICsgKH5vcmlnaW5TcGxpdFswXS5pbmRleE9mKFwiJVwiKSA/IHhPcmlnaW4gLyAxMDAgKiBib3VuZHMud2lkdGggOiB4T3JpZ2luKTtcbiAgICB5T3JpZ2luID0gYm91bmRzLnkgKyAofihvcmlnaW5TcGxpdFsxXSB8fCBvcmlnaW5TcGxpdFswXSkuaW5kZXhPZihcIiVcIikgPyB5T3JpZ2luIC8gMTAwICogYm91bmRzLmhlaWdodCA6IHlPcmlnaW4pOyAvLyBpZiAoIShcInhPcmlnaW5cIiBpbiBjYWNoZSkgJiYgKHhPcmlnaW4gfHwgeU9yaWdpbikpIHsgLy8gYWRkZWQgaW4gMy4xMi4zLCByZXZlcnRlZCBpbiAzLjEyLjQ7IHJlcXVpcmVzIG1vcmUgZXhwbG9yYXRpb25cbiAgICAvLyBcdHhPcmlnaW4gLT0gYm91bmRzLng7XG4gICAgLy8gXHR5T3JpZ2luIC09IGJvdW5kcy55O1xuICAgIC8vIH1cbiAgfSBlbHNlIGlmIChtYXRyaXggIT09IF9pZGVudGl0eTJETWF0cml4ICYmIChkZXRlcm1pbmFudCA9IGEgKiBkIC0gYiAqIGMpKSB7XG4gICAgLy9pZiBpdCdzIHplcm8gKGxpa2UgaWYgc2NhbGVYIGFuZCBzY2FsZVkgYXJlIHplcm8pLCBza2lwIGl0IHRvIGF2b2lkIGVycm9ycyB3aXRoIGRpdmlkaW5nIGJ5IHplcm8uXG4gICAgeCA9IHhPcmlnaW4gKiAoZCAvIGRldGVybWluYW50KSArIHlPcmlnaW4gKiAoLWMgLyBkZXRlcm1pbmFudCkgKyAoYyAqIHR5IC0gZCAqIHR4KSAvIGRldGVybWluYW50O1xuICAgIHkgPSB4T3JpZ2luICogKC1iIC8gZGV0ZXJtaW5hbnQpICsgeU9yaWdpbiAqIChhIC8gZGV0ZXJtaW5hbnQpIC0gKGEgKiB0eSAtIGIgKiB0eCkgLyBkZXRlcm1pbmFudDtcbiAgICB4T3JpZ2luID0geDtcbiAgICB5T3JpZ2luID0geTsgLy8gdGhlb3J5OiB3ZSBvbmx5IGhhZCB0byBkbyB0aGlzIGZvciBzbW9vdGhpbmcgYW5kIGl0IGFzc3VtZXMgdGhhdCB0aGUgcHJldmlvdXMgb25lIHdhcyBub3Qgb3JpZ2luSXNBYnNvbHV0ZS5cbiAgfVxuXG4gIGlmIChzbW9vdGggfHwgc21vb3RoICE9PSBmYWxzZSAmJiBjYWNoZS5zbW9vdGgpIHtcbiAgICB0eCA9IHhPcmlnaW4gLSB4T3JpZ2luT2xkO1xuICAgIHR5ID0geU9yaWdpbiAtIHlPcmlnaW5PbGQ7XG4gICAgY2FjaGUueE9mZnNldCA9IHhPZmZzZXRPbGQgKyAodHggKiBhICsgdHkgKiBjKSAtIHR4O1xuICAgIGNhY2hlLnlPZmZzZXQgPSB5T2Zmc2V0T2xkICsgKHR4ICogYiArIHR5ICogZCkgLSB0eTtcbiAgfSBlbHNlIHtcbiAgICBjYWNoZS54T2Zmc2V0ID0gY2FjaGUueU9mZnNldCA9IDA7XG4gIH1cblxuICBjYWNoZS54T3JpZ2luID0geE9yaWdpbjtcbiAgY2FjaGUueU9yaWdpbiA9IHlPcmlnaW47XG4gIGNhY2hlLnNtb290aCA9ICEhc21vb3RoO1xuICBjYWNoZS5vcmlnaW4gPSBvcmlnaW47XG4gIGNhY2hlLm9yaWdpbklzQWJzb2x1dGUgPSAhIW9yaWdpbklzQWJzb2x1dGU7XG4gIHRhcmdldC5zdHlsZVtfdHJhbnNmb3JtT3JpZ2luUHJvcF0gPSBcIjBweCAwcHhcIjsgLy9vdGhlcndpc2UsIGlmIHNvbWVvbmUgc2V0cyAgYW4gb3JpZ2luIHZpYSBDU1MsIGl0IHdpbGwgbGlrZWx5IGludGVyZmVyZSB3aXRoIHRoZSBTVkcgdHJhbnNmb3JtIGF0dHJpYnV0ZSBvbmVzIChiZWNhdXNlIHJlbWVtYmVyLCB3ZSdyZSBiYWtpbmcgdGhlIG9yaWdpbiBpbnRvIHRoZSBtYXRyaXgoKSB2YWx1ZSkuXG5cbiAgaWYgKHBsdWdpblRvQWRkUHJvcFR3ZWVuc1RvKSB7XG4gICAgX2FkZE5vblR3ZWVuaW5nUFQocGx1Z2luVG9BZGRQcm9wVHdlZW5zVG8sIGNhY2hlLCBcInhPcmlnaW5cIiwgeE9yaWdpbk9sZCwgeE9yaWdpbik7XG5cbiAgICBfYWRkTm9uVHdlZW5pbmdQVChwbHVnaW5Ub0FkZFByb3BUd2VlbnNUbywgY2FjaGUsIFwieU9yaWdpblwiLCB5T3JpZ2luT2xkLCB5T3JpZ2luKTtcblxuICAgIF9hZGROb25Ud2VlbmluZ1BUKHBsdWdpblRvQWRkUHJvcFR3ZWVuc1RvLCBjYWNoZSwgXCJ4T2Zmc2V0XCIsIHhPZmZzZXRPbGQsIGNhY2hlLnhPZmZzZXQpO1xuXG4gICAgX2FkZE5vblR3ZWVuaW5nUFQocGx1Z2luVG9BZGRQcm9wVHdlZW5zVG8sIGNhY2hlLCBcInlPZmZzZXRcIiwgeU9mZnNldE9sZCwgY2FjaGUueU9mZnNldCk7XG4gIH1cblxuICB0YXJnZXQuc2V0QXR0cmlidXRlKFwiZGF0YS1zdmctb3JpZ2luXCIsIHhPcmlnaW4gKyBcIiBcIiArIHlPcmlnaW4pO1xufSxcbiAgICBfcGFyc2VUcmFuc2Zvcm0gPSBmdW5jdGlvbiBfcGFyc2VUcmFuc2Zvcm0odGFyZ2V0LCB1bmNhY2hlKSB7XG4gIHZhciBjYWNoZSA9IHRhcmdldC5fZ3NhcCB8fCBuZXcgR1NDYWNoZSh0YXJnZXQpO1xuXG4gIGlmIChcInhcIiBpbiBjYWNoZSAmJiAhdW5jYWNoZSAmJiAhY2FjaGUudW5jYWNoZSkge1xuICAgIHJldHVybiBjYWNoZTtcbiAgfVxuXG4gIHZhciBzdHlsZSA9IHRhcmdldC5zdHlsZSxcbiAgICAgIGludmVydGVkU2NhbGVYID0gY2FjaGUuc2NhbGVYIDwgMCxcbiAgICAgIHB4ID0gXCJweFwiLFxuICAgICAgZGVnID0gXCJkZWdcIixcbiAgICAgIGNzID0gZ2V0Q29tcHV0ZWRTdHlsZSh0YXJnZXQpLFxuICAgICAgb3JpZ2luID0gX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBfdHJhbnNmb3JtT3JpZ2luUHJvcCkgfHwgXCIwXCIsXG4gICAgICB4LFxuICAgICAgeSxcbiAgICAgIHosXG4gICAgICBzY2FsZVgsXG4gICAgICBzY2FsZVksXG4gICAgICByb3RhdGlvbixcbiAgICAgIHJvdGF0aW9uWCxcbiAgICAgIHJvdGF0aW9uWSxcbiAgICAgIHNrZXdYLFxuICAgICAgc2tld1ksXG4gICAgICBwZXJzcGVjdGl2ZSxcbiAgICAgIHhPcmlnaW4sXG4gICAgICB5T3JpZ2luLFxuICAgICAgbWF0cml4LFxuICAgICAgYW5nbGUsXG4gICAgICBjb3MsXG4gICAgICBzaW4sXG4gICAgICBhLFxuICAgICAgYixcbiAgICAgIGMsXG4gICAgICBkLFxuICAgICAgYTEyLFxuICAgICAgYTIyLFxuICAgICAgdDEsXG4gICAgICB0MixcbiAgICAgIHQzLFxuICAgICAgYTEzLFxuICAgICAgYTIzLFxuICAgICAgYTMzLFxuICAgICAgYTQyLFxuICAgICAgYTQzLFxuICAgICAgYTMyO1xuICB4ID0geSA9IHogPSByb3RhdGlvbiA9IHJvdGF0aW9uWCA9IHJvdGF0aW9uWSA9IHNrZXdYID0gc2tld1kgPSBwZXJzcGVjdGl2ZSA9IDA7XG4gIHNjYWxlWCA9IHNjYWxlWSA9IDE7XG4gIGNhY2hlLnN2ZyA9ICEhKHRhcmdldC5nZXRDVE0gJiYgX2lzU1ZHKHRhcmdldCkpO1xuXG4gIGlmIChjcy50cmFuc2xhdGUpIHtcbiAgICAvLyBhY2NvbW1vZGF0ZSBpbmRlcGVuZGVudCB0cmFuc2Zvcm1zIGJ5IGNvbWJpbmluZyB0aGVtIGludG8gbm9ybWFsIG9uZXMuXG4gICAgaWYgKGNzLnRyYW5zbGF0ZSAhPT0gXCJub25lXCIgfHwgY3Muc2NhbGUgIT09IFwibm9uZVwiIHx8IGNzLnJvdGF0ZSAhPT0gXCJub25lXCIpIHtcbiAgICAgIHN0eWxlW190cmFuc2Zvcm1Qcm9wXSA9IChjcy50cmFuc2xhdGUgIT09IFwibm9uZVwiID8gXCJ0cmFuc2xhdGUzZChcIiArIChjcy50cmFuc2xhdGUgKyBcIiAwIDBcIikuc3BsaXQoXCIgXCIpLnNsaWNlKDAsIDMpLmpvaW4oXCIsIFwiKSArIFwiKSBcIiA6IFwiXCIpICsgKGNzLnJvdGF0ZSAhPT0gXCJub25lXCIgPyBcInJvdGF0ZShcIiArIGNzLnJvdGF0ZSArIFwiKSBcIiA6IFwiXCIpICsgKGNzLnNjYWxlICE9PSBcIm5vbmVcIiA/IFwic2NhbGUoXCIgKyBjcy5zY2FsZS5zcGxpdChcIiBcIikuam9pbihcIixcIikgKyBcIikgXCIgOiBcIlwiKSArIChjc1tfdHJhbnNmb3JtUHJvcF0gIT09IFwibm9uZVwiID8gY3NbX3RyYW5zZm9ybVByb3BdIDogXCJcIik7XG4gICAgfVxuXG4gICAgc3R5bGUuc2NhbGUgPSBzdHlsZS5yb3RhdGUgPSBzdHlsZS50cmFuc2xhdGUgPSBcIm5vbmVcIjtcbiAgfVxuXG4gIG1hdHJpeCA9IF9nZXRNYXRyaXgodGFyZ2V0LCBjYWNoZS5zdmcpO1xuXG4gIGlmIChjYWNoZS5zdmcpIHtcbiAgICBpZiAoY2FjaGUudW5jYWNoZSkge1xuICAgICAgLy8gaWYgY2FjaGUudW5jYWNoZSBpcyB0cnVlIChhbmQgbWF5YmUgaWYgb3JpZ2luIGlzIDAsMCksIHdlIG5lZWQgdG8gc2V0IGVsZW1lbnQuc3R5bGUudHJhbnNmb3JtT3JpZ2luID0gKGNhY2hlLnhPcmlnaW4gLSBiYm94LngpICsgXCJweCBcIiArIChjYWNoZS55T3JpZ2luIC0gYmJveC55KSArIFwicHhcIi4gUHJldmlvdXNseSB3ZSBsZXQgdGhlIGRhdGEtc3ZnLW9yaWdpbiBzdGF5IGluc3RlYWQsIGJ1dCB3aGVuIGludHJvZHVjaW5nIHJldmVydCgpLCBpdCBjb21wbGljYXRlZCB0aGluZ3MuXG4gICAgICB0MiA9IHRhcmdldC5nZXRCQm94KCk7XG4gICAgICBvcmlnaW4gPSBjYWNoZS54T3JpZ2luIC0gdDIueCArIFwicHggXCIgKyAoY2FjaGUueU9yaWdpbiAtIHQyLnkpICsgXCJweFwiO1xuICAgICAgdDEgPSBcIlwiO1xuICAgIH0gZWxzZSB7XG4gICAgICB0MSA9ICF1bmNhY2hlICYmIHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXN2Zy1vcmlnaW5cIik7IC8vICBSZW1lbWJlciwgdG8gd29yayBhcm91bmQgYnJvd3NlciBpbmNvbnNpc3RlbmNpZXMgd2UgYWx3YXlzIGZvcmNlIFNWRyBlbGVtZW50cycgdHJhbnNmb3JtT3JpZ2luIHRvIDAsMCBhbmQgb2Zmc2V0IHRoZSB0cmFuc2xhdGlvbiBhY2NvcmRpbmdseS5cbiAgICB9XG5cbiAgICBfYXBwbHlTVkdPcmlnaW4odGFyZ2V0LCB0MSB8fCBvcmlnaW4sICEhdDEgfHwgY2FjaGUub3JpZ2luSXNBYnNvbHV0ZSwgY2FjaGUuc21vb3RoICE9PSBmYWxzZSwgbWF0cml4KTtcbiAgfVxuXG4gIHhPcmlnaW4gPSBjYWNoZS54T3JpZ2luIHx8IDA7XG4gIHlPcmlnaW4gPSBjYWNoZS55T3JpZ2luIHx8IDA7XG5cbiAgaWYgKG1hdHJpeCAhPT0gX2lkZW50aXR5MkRNYXRyaXgpIHtcbiAgICBhID0gbWF0cml4WzBdOyAvL2ExMVxuXG4gICAgYiA9IG1hdHJpeFsxXTsgLy9hMjFcblxuICAgIGMgPSBtYXRyaXhbMl07IC8vYTMxXG5cbiAgICBkID0gbWF0cml4WzNdOyAvL2E0MVxuXG4gICAgeCA9IGExMiA9IG1hdHJpeFs0XTtcbiAgICB5ID0gYTIyID0gbWF0cml4WzVdOyAvLzJEIG1hdHJpeFxuXG4gICAgaWYgKG1hdHJpeC5sZW5ndGggPT09IDYpIHtcbiAgICAgIHNjYWxlWCA9IE1hdGguc3FydChhICogYSArIGIgKiBiKTtcbiAgICAgIHNjYWxlWSA9IE1hdGguc3FydChkICogZCArIGMgKiBjKTtcbiAgICAgIHJvdGF0aW9uID0gYSB8fCBiID8gX2F0YW4yKGIsIGEpICogX1JBRDJERUcgOiAwOyAvL25vdGU6IGlmIHNjYWxlWCBpcyAwLCB3ZSBjYW5ub3QgYWNjdXJhdGVseSBtZWFzdXJlIHJvdGF0aW9uLiBTYW1lIGZvciBza2V3WCB3aXRoIGEgc2NhbGVZIG9mIDAuIFRoZXJlZm9yZSwgd2UgZGVmYXVsdCB0byB0aGUgcHJldmlvdXNseSByZWNvcmRlZCB2YWx1ZSAob3IgemVybyBpZiB0aGF0IGRvZXNuJ3QgZXhpc3QpLlxuXG4gICAgICBza2V3WCA9IGMgfHwgZCA/IF9hdGFuMihjLCBkKSAqIF9SQUQyREVHICsgcm90YXRpb24gOiAwO1xuICAgICAgc2tld1ggJiYgKHNjYWxlWSAqPSBNYXRoLmFicyhNYXRoLmNvcyhza2V3WCAqIF9ERUcyUkFEKSkpO1xuXG4gICAgICBpZiAoY2FjaGUuc3ZnKSB7XG4gICAgICAgIHggLT0geE9yaWdpbiAtICh4T3JpZ2luICogYSArIHlPcmlnaW4gKiBjKTtcbiAgICAgICAgeSAtPSB5T3JpZ2luIC0gKHhPcmlnaW4gKiBiICsgeU9yaWdpbiAqIGQpO1xuICAgICAgfSAvLzNEIG1hdHJpeFxuXG4gICAgfSBlbHNlIHtcbiAgICAgIGEzMiA9IG1hdHJpeFs2XTtcbiAgICAgIGE0MiA9IG1hdHJpeFs3XTtcbiAgICAgIGExMyA9IG1hdHJpeFs4XTtcbiAgICAgIGEyMyA9IG1hdHJpeFs5XTtcbiAgICAgIGEzMyA9IG1hdHJpeFsxMF07XG4gICAgICBhNDMgPSBtYXRyaXhbMTFdO1xuICAgICAgeCA9IG1hdHJpeFsxMl07XG4gICAgICB5ID0gbWF0cml4WzEzXTtcbiAgICAgIHogPSBtYXRyaXhbMTRdO1xuICAgICAgYW5nbGUgPSBfYXRhbjIoYTMyLCBhMzMpO1xuICAgICAgcm90YXRpb25YID0gYW5nbGUgKiBfUkFEMkRFRzsgLy9yb3RhdGlvblhcblxuICAgICAgaWYgKGFuZ2xlKSB7XG4gICAgICAgIGNvcyA9IE1hdGguY29zKC1hbmdsZSk7XG4gICAgICAgIHNpbiA9IE1hdGguc2luKC1hbmdsZSk7XG4gICAgICAgIHQxID0gYTEyICogY29zICsgYTEzICogc2luO1xuICAgICAgICB0MiA9IGEyMiAqIGNvcyArIGEyMyAqIHNpbjtcbiAgICAgICAgdDMgPSBhMzIgKiBjb3MgKyBhMzMgKiBzaW47XG4gICAgICAgIGExMyA9IGExMiAqIC1zaW4gKyBhMTMgKiBjb3M7XG4gICAgICAgIGEyMyA9IGEyMiAqIC1zaW4gKyBhMjMgKiBjb3M7XG4gICAgICAgIGEzMyA9IGEzMiAqIC1zaW4gKyBhMzMgKiBjb3M7XG4gICAgICAgIGE0MyA9IGE0MiAqIC1zaW4gKyBhNDMgKiBjb3M7XG4gICAgICAgIGExMiA9IHQxO1xuICAgICAgICBhMjIgPSB0MjtcbiAgICAgICAgYTMyID0gdDM7XG4gICAgICB9IC8vcm90YXRpb25ZXG5cblxuICAgICAgYW5nbGUgPSBfYXRhbjIoLWMsIGEzMyk7XG4gICAgICByb3RhdGlvblkgPSBhbmdsZSAqIF9SQUQyREVHO1xuXG4gICAgICBpZiAoYW5nbGUpIHtcbiAgICAgICAgY29zID0gTWF0aC5jb3MoLWFuZ2xlKTtcbiAgICAgICAgc2luID0gTWF0aC5zaW4oLWFuZ2xlKTtcbiAgICAgICAgdDEgPSBhICogY29zIC0gYTEzICogc2luO1xuICAgICAgICB0MiA9IGIgKiBjb3MgLSBhMjMgKiBzaW47XG4gICAgICAgIHQzID0gYyAqIGNvcyAtIGEzMyAqIHNpbjtcbiAgICAgICAgYTQzID0gZCAqIHNpbiArIGE0MyAqIGNvcztcbiAgICAgICAgYSA9IHQxO1xuICAgICAgICBiID0gdDI7XG4gICAgICAgIGMgPSB0MztcbiAgICAgIH0gLy9yb3RhdGlvblpcblxuXG4gICAgICBhbmdsZSA9IF9hdGFuMihiLCBhKTtcbiAgICAgIHJvdGF0aW9uID0gYW5nbGUgKiBfUkFEMkRFRztcblxuICAgICAgaWYgKGFuZ2xlKSB7XG4gICAgICAgIGNvcyA9IE1hdGguY29zKGFuZ2xlKTtcbiAgICAgICAgc2luID0gTWF0aC5zaW4oYW5nbGUpO1xuICAgICAgICB0MSA9IGEgKiBjb3MgKyBiICogc2luO1xuICAgICAgICB0MiA9IGExMiAqIGNvcyArIGEyMiAqIHNpbjtcbiAgICAgICAgYiA9IGIgKiBjb3MgLSBhICogc2luO1xuICAgICAgICBhMjIgPSBhMjIgKiBjb3MgLSBhMTIgKiBzaW47XG4gICAgICAgIGEgPSB0MTtcbiAgICAgICAgYTEyID0gdDI7XG4gICAgICB9XG5cbiAgICAgIGlmIChyb3RhdGlvblggJiYgTWF0aC5hYnMocm90YXRpb25YKSArIE1hdGguYWJzKHJvdGF0aW9uKSA+IDM1OS45KSB7XG4gICAgICAgIC8vd2hlbiByb3RhdGlvblkgaXMgc2V0LCBpdCB3aWxsIG9mdGVuIGJlIHBhcnNlZCBhcyAxODAgZGVncmVlcyBkaWZmZXJlbnQgdGhhbiBpdCBzaG91bGQgYmUsIGFuZCByb3RhdGlvblggYW5kIHJvdGF0aW9uIGJvdGggYmVpbmcgMTgwIChpdCBsb29rcyB0aGUgc2FtZSksIHNvIHdlIGFkanVzdCBmb3IgdGhhdCBoZXJlLlxuICAgICAgICByb3RhdGlvblggPSByb3RhdGlvbiA9IDA7XG4gICAgICAgIHJvdGF0aW9uWSA9IDE4MCAtIHJvdGF0aW9uWTtcbiAgICAgIH1cblxuICAgICAgc2NhbGVYID0gX3JvdW5kKE1hdGguc3FydChhICogYSArIGIgKiBiICsgYyAqIGMpKTtcbiAgICAgIHNjYWxlWSA9IF9yb3VuZChNYXRoLnNxcnQoYTIyICogYTIyICsgYTMyICogYTMyKSk7XG4gICAgICBhbmdsZSA9IF9hdGFuMihhMTIsIGEyMik7XG4gICAgICBza2V3WCA9IE1hdGguYWJzKGFuZ2xlKSA+IDAuMDAwMiA/IGFuZ2xlICogX1JBRDJERUcgOiAwO1xuICAgICAgcGVyc3BlY3RpdmUgPSBhNDMgPyAxIC8gKGE0MyA8IDAgPyAtYTQzIDogYTQzKSA6IDA7XG4gICAgfVxuXG4gICAgaWYgKGNhY2hlLnN2Zykge1xuICAgICAgLy9zZW5zZSBpZiB0aGVyZSBhcmUgQ1NTIHRyYW5zZm9ybXMgYXBwbGllZCBvbiBhbiBTVkcgZWxlbWVudCBpbiB3aGljaCBjYXNlIHdlIG11c3Qgb3ZlcndyaXRlIHRoZW0gd2hlbiByZW5kZXJpbmcuIFRoZSB0cmFuc2Zvcm0gYXR0cmlidXRlIGlzIG1vcmUgcmVsaWFibGUgY3Jvc3MtYnJvd3NlciwgYnV0IHdlIGNhbid0IGp1c3QgcmVtb3ZlIHRoZSBDU1Mgb25lcyBiZWNhdXNlIHRoZXkgbWF5IGJlIGFwcGxpZWQgaW4gYSBDU1MgcnVsZSBzb21ld2hlcmUgKG5vdCBqdXN0IGlubGluZSkuXG4gICAgICB0MSA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIik7XG4gICAgICBjYWNoZS5mb3JjZUNTUyA9IHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIiwgXCJcIikgfHwgIV9pc051bGxUcmFuc2Zvcm0oX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBfdHJhbnNmb3JtUHJvcCkpO1xuICAgICAgdDEgJiYgdGFyZ2V0LnNldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiLCB0MSk7XG4gICAgfVxuICB9XG5cbiAgaWYgKE1hdGguYWJzKHNrZXdYKSA+IDkwICYmIE1hdGguYWJzKHNrZXdYKSA8IDI3MCkge1xuICAgIGlmIChpbnZlcnRlZFNjYWxlWCkge1xuICAgICAgc2NhbGVYICo9IC0xO1xuICAgICAgc2tld1ggKz0gcm90YXRpb24gPD0gMCA/IDE4MCA6IC0xODA7XG4gICAgICByb3RhdGlvbiArPSByb3RhdGlvbiA8PSAwID8gMTgwIDogLTE4MDtcbiAgICB9IGVsc2Uge1xuICAgICAgc2NhbGVZICo9IC0xO1xuICAgICAgc2tld1ggKz0gc2tld1ggPD0gMCA/IDE4MCA6IC0xODA7XG4gICAgfVxuICB9XG5cbiAgdW5jYWNoZSA9IHVuY2FjaGUgfHwgY2FjaGUudW5jYWNoZTtcbiAgY2FjaGUueCA9IHggLSAoKGNhY2hlLnhQZXJjZW50ID0geCAmJiAoIXVuY2FjaGUgJiYgY2FjaGUueFBlcmNlbnQgfHwgKE1hdGgucm91bmQodGFyZ2V0Lm9mZnNldFdpZHRoIC8gMikgPT09IE1hdGgucm91bmQoLXgpID8gLTUwIDogMCkpKSA/IHRhcmdldC5vZmZzZXRXaWR0aCAqIGNhY2hlLnhQZXJjZW50IC8gMTAwIDogMCkgKyBweDtcbiAgY2FjaGUueSA9IHkgLSAoKGNhY2hlLnlQZXJjZW50ID0geSAmJiAoIXVuY2FjaGUgJiYgY2FjaGUueVBlcmNlbnQgfHwgKE1hdGgucm91bmQodGFyZ2V0Lm9mZnNldEhlaWdodCAvIDIpID09PSBNYXRoLnJvdW5kKC15KSA/IC01MCA6IDApKSkgPyB0YXJnZXQub2Zmc2V0SGVpZ2h0ICogY2FjaGUueVBlcmNlbnQgLyAxMDAgOiAwKSArIHB4O1xuICBjYWNoZS56ID0geiArIHB4O1xuICBjYWNoZS5zY2FsZVggPSBfcm91bmQoc2NhbGVYKTtcbiAgY2FjaGUuc2NhbGVZID0gX3JvdW5kKHNjYWxlWSk7XG4gIGNhY2hlLnJvdGF0aW9uID0gX3JvdW5kKHJvdGF0aW9uKSArIGRlZztcbiAgY2FjaGUucm90YXRpb25YID0gX3JvdW5kKHJvdGF0aW9uWCkgKyBkZWc7XG4gIGNhY2hlLnJvdGF0aW9uWSA9IF9yb3VuZChyb3RhdGlvblkpICsgZGVnO1xuICBjYWNoZS5za2V3WCA9IHNrZXdYICsgZGVnO1xuICBjYWNoZS5za2V3WSA9IHNrZXdZICsgZGVnO1xuICBjYWNoZS50cmFuc2Zvcm1QZXJzcGVjdGl2ZSA9IHBlcnNwZWN0aXZlICsgcHg7XG5cbiAgaWYgKGNhY2hlLnpPcmlnaW4gPSBwYXJzZUZsb2F0KG9yaWdpbi5zcGxpdChcIiBcIilbMl0pIHx8ICF1bmNhY2hlICYmIGNhY2hlLnpPcmlnaW4gfHwgMCkge1xuICAgIHN0eWxlW190cmFuc2Zvcm1PcmlnaW5Qcm9wXSA9IF9maXJzdFR3b09ubHkob3JpZ2luKTtcbiAgfVxuXG4gIGNhY2hlLnhPZmZzZXQgPSBjYWNoZS55T2Zmc2V0ID0gMDtcbiAgY2FjaGUuZm9yY2UzRCA9IF9jb25maWcuZm9yY2UzRDtcbiAgY2FjaGUucmVuZGVyVHJhbnNmb3JtID0gY2FjaGUuc3ZnID8gX3JlbmRlclNWR1RyYW5zZm9ybXMgOiBfc3VwcG9ydHMzRCA/IF9yZW5kZXJDU1NUcmFuc2Zvcm1zIDogX3JlbmRlck5vbjNEVHJhbnNmb3JtcztcbiAgY2FjaGUudW5jYWNoZSA9IDA7XG4gIHJldHVybiBjYWNoZTtcbn0sXG4gICAgX2ZpcnN0VHdvT25seSA9IGZ1bmN0aW9uIF9maXJzdFR3b09ubHkodmFsdWUpIHtcbiAgcmV0dXJuICh2YWx1ZSA9IHZhbHVlLnNwbGl0KFwiIFwiKSlbMF0gKyBcIiBcIiArIHZhbHVlWzFdO1xufSxcbiAgICAvL2ZvciBoYW5kbGluZyB0cmFuc2Zvcm1PcmlnaW4gdmFsdWVzLCBzdHJpcHBpbmcgb3V0IHRoZSAzcmQgZGltZW5zaW9uXG5fYWRkUHhUcmFuc2xhdGUgPSBmdW5jdGlvbiBfYWRkUHhUcmFuc2xhdGUodGFyZ2V0LCBzdGFydCwgdmFsdWUpIHtcbiAgdmFyIHVuaXQgPSBnZXRVbml0KHN0YXJ0KTtcbiAgcmV0dXJuIF9yb3VuZChwYXJzZUZsb2F0KHN0YXJ0KSArIHBhcnNlRmxvYXQoX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBcInhcIiwgdmFsdWUgKyBcInB4XCIsIHVuaXQpKSkgKyB1bml0O1xufSxcbiAgICBfcmVuZGVyTm9uM0RUcmFuc2Zvcm1zID0gZnVuY3Rpb24gX3JlbmRlck5vbjNEVHJhbnNmb3JtcyhyYXRpbywgY2FjaGUpIHtcbiAgY2FjaGUueiA9IFwiMHB4XCI7XG4gIGNhY2hlLnJvdGF0aW9uWSA9IGNhY2hlLnJvdGF0aW9uWCA9IFwiMGRlZ1wiO1xuICBjYWNoZS5mb3JjZTNEID0gMDtcblxuICBfcmVuZGVyQ1NTVHJhbnNmb3JtcyhyYXRpbywgY2FjaGUpO1xufSxcbiAgICBfemVyb0RlZyA9IFwiMGRlZ1wiLFxuICAgIF96ZXJvUHggPSBcIjBweFwiLFxuICAgIF9lbmRQYXJlbnRoZXNpcyA9IFwiKSBcIixcbiAgICBfcmVuZGVyQ1NTVHJhbnNmb3JtcyA9IGZ1bmN0aW9uIF9yZW5kZXJDU1NUcmFuc2Zvcm1zKHJhdGlvLCBjYWNoZSkge1xuICB2YXIgX3JlZiA9IGNhY2hlIHx8IHRoaXMsXG4gICAgICB4UGVyY2VudCA9IF9yZWYueFBlcmNlbnQsXG4gICAgICB5UGVyY2VudCA9IF9yZWYueVBlcmNlbnQsXG4gICAgICB4ID0gX3JlZi54LFxuICAgICAgeSA9IF9yZWYueSxcbiAgICAgIHogPSBfcmVmLnosXG4gICAgICByb3RhdGlvbiA9IF9yZWYucm90YXRpb24sXG4gICAgICByb3RhdGlvblkgPSBfcmVmLnJvdGF0aW9uWSxcbiAgICAgIHJvdGF0aW9uWCA9IF9yZWYucm90YXRpb25YLFxuICAgICAgc2tld1ggPSBfcmVmLnNrZXdYLFxuICAgICAgc2tld1kgPSBfcmVmLnNrZXdZLFxuICAgICAgc2NhbGVYID0gX3JlZi5zY2FsZVgsXG4gICAgICBzY2FsZVkgPSBfcmVmLnNjYWxlWSxcbiAgICAgIHRyYW5zZm9ybVBlcnNwZWN0aXZlID0gX3JlZi50cmFuc2Zvcm1QZXJzcGVjdGl2ZSxcbiAgICAgIGZvcmNlM0QgPSBfcmVmLmZvcmNlM0QsXG4gICAgICB0YXJnZXQgPSBfcmVmLnRhcmdldCxcbiAgICAgIHpPcmlnaW4gPSBfcmVmLnpPcmlnaW4sXG4gICAgICB0cmFuc2Zvcm1zID0gXCJcIixcbiAgICAgIHVzZTNEID0gZm9yY2UzRCA9PT0gXCJhdXRvXCIgJiYgcmF0aW8gJiYgcmF0aW8gIT09IDEgfHwgZm9yY2UzRCA9PT0gdHJ1ZTsgLy8gU2FmYXJpIGhhcyBhIGJ1ZyB0aGF0IGNhdXNlcyBpdCBub3QgdG8gcmVuZGVyIDNEIHRyYW5zZm9ybS1vcmlnaW4gdmFsdWVzIHByb3Blcmx5LCBzbyB3ZSBmb3JjZSB0aGUgeiBvcmlnaW4gdG8gMCwgcmVjb3JkIGl0IGluIHRoZSBjYWNoZSwgYW5kIHRoZW4gZG8gdGhlIG1hdGggaGVyZSB0byBvZmZzZXQgdGhlIHRyYW5zbGF0ZSB2YWx1ZXMgYWNjb3JkaW5nbHkgKGJhc2ljYWxseSBkbyB0aGUgM0QgdHJhbnNmb3JtLW9yaWdpbiBwYXJ0IG1hbnVhbGx5KVxuXG5cbiAgaWYgKHpPcmlnaW4gJiYgKHJvdGF0aW9uWCAhPT0gX3plcm9EZWcgfHwgcm90YXRpb25ZICE9PSBfemVyb0RlZykpIHtcbiAgICB2YXIgYW5nbGUgPSBwYXJzZUZsb2F0KHJvdGF0aW9uWSkgKiBfREVHMlJBRCxcbiAgICAgICAgYTEzID0gTWF0aC5zaW4oYW5nbGUpLFxuICAgICAgICBhMzMgPSBNYXRoLmNvcyhhbmdsZSksXG4gICAgICAgIGNvcztcblxuICAgIGFuZ2xlID0gcGFyc2VGbG9hdChyb3RhdGlvblgpICogX0RFRzJSQUQ7XG4gICAgY29zID0gTWF0aC5jb3MoYW5nbGUpO1xuICAgIHggPSBfYWRkUHhUcmFuc2xhdGUodGFyZ2V0LCB4LCBhMTMgKiBjb3MgKiAtek9yaWdpbik7XG4gICAgeSA9IF9hZGRQeFRyYW5zbGF0ZSh0YXJnZXQsIHksIC1NYXRoLnNpbihhbmdsZSkgKiAtek9yaWdpbik7XG4gICAgeiA9IF9hZGRQeFRyYW5zbGF0ZSh0YXJnZXQsIHosIGEzMyAqIGNvcyAqIC16T3JpZ2luICsgek9yaWdpbik7XG4gIH1cblxuICBpZiAodHJhbnNmb3JtUGVyc3BlY3RpdmUgIT09IF96ZXJvUHgpIHtcbiAgICB0cmFuc2Zvcm1zICs9IFwicGVyc3BlY3RpdmUoXCIgKyB0cmFuc2Zvcm1QZXJzcGVjdGl2ZSArIF9lbmRQYXJlbnRoZXNpcztcbiAgfVxuXG4gIGlmICh4UGVyY2VudCB8fCB5UGVyY2VudCkge1xuICAgIHRyYW5zZm9ybXMgKz0gXCJ0cmFuc2xhdGUoXCIgKyB4UGVyY2VudCArIFwiJSwgXCIgKyB5UGVyY2VudCArIFwiJSkgXCI7XG4gIH1cblxuICBpZiAodXNlM0QgfHwgeCAhPT0gX3plcm9QeCB8fCB5ICE9PSBfemVyb1B4IHx8IHogIT09IF96ZXJvUHgpIHtcbiAgICB0cmFuc2Zvcm1zICs9IHogIT09IF96ZXJvUHggfHwgdXNlM0QgPyBcInRyYW5zbGF0ZTNkKFwiICsgeCArIFwiLCBcIiArIHkgKyBcIiwgXCIgKyB6ICsgXCIpIFwiIDogXCJ0cmFuc2xhdGUoXCIgKyB4ICsgXCIsIFwiICsgeSArIF9lbmRQYXJlbnRoZXNpcztcbiAgfVxuXG4gIGlmIChyb3RhdGlvbiAhPT0gX3plcm9EZWcpIHtcbiAgICB0cmFuc2Zvcm1zICs9IFwicm90YXRlKFwiICsgcm90YXRpb24gKyBfZW5kUGFyZW50aGVzaXM7XG4gIH1cblxuICBpZiAocm90YXRpb25ZICE9PSBfemVyb0RlZykge1xuICAgIHRyYW5zZm9ybXMgKz0gXCJyb3RhdGVZKFwiICsgcm90YXRpb25ZICsgX2VuZFBhcmVudGhlc2lzO1xuICB9XG5cbiAgaWYgKHJvdGF0aW9uWCAhPT0gX3plcm9EZWcpIHtcbiAgICB0cmFuc2Zvcm1zICs9IFwicm90YXRlWChcIiArIHJvdGF0aW9uWCArIF9lbmRQYXJlbnRoZXNpcztcbiAgfVxuXG4gIGlmIChza2V3WCAhPT0gX3plcm9EZWcgfHwgc2tld1kgIT09IF96ZXJvRGVnKSB7XG4gICAgdHJhbnNmb3JtcyArPSBcInNrZXcoXCIgKyBza2V3WCArIFwiLCBcIiArIHNrZXdZICsgX2VuZFBhcmVudGhlc2lzO1xuICB9XG5cbiAgaWYgKHNjYWxlWCAhPT0gMSB8fCBzY2FsZVkgIT09IDEpIHtcbiAgICB0cmFuc2Zvcm1zICs9IFwic2NhbGUoXCIgKyBzY2FsZVggKyBcIiwgXCIgKyBzY2FsZVkgKyBfZW5kUGFyZW50aGVzaXM7XG4gIH1cblxuICB0YXJnZXQuc3R5bGVbX3RyYW5zZm9ybVByb3BdID0gdHJhbnNmb3JtcyB8fCBcInRyYW5zbGF0ZSgwLCAwKVwiO1xufSxcbiAgICBfcmVuZGVyU1ZHVHJhbnNmb3JtcyA9IGZ1bmN0aW9uIF9yZW5kZXJTVkdUcmFuc2Zvcm1zKHJhdGlvLCBjYWNoZSkge1xuICB2YXIgX3JlZjIgPSBjYWNoZSB8fCB0aGlzLFxuICAgICAgeFBlcmNlbnQgPSBfcmVmMi54UGVyY2VudCxcbiAgICAgIHlQZXJjZW50ID0gX3JlZjIueVBlcmNlbnQsXG4gICAgICB4ID0gX3JlZjIueCxcbiAgICAgIHkgPSBfcmVmMi55LFxuICAgICAgcm90YXRpb24gPSBfcmVmMi5yb3RhdGlvbixcbiAgICAgIHNrZXdYID0gX3JlZjIuc2tld1gsXG4gICAgICBza2V3WSA9IF9yZWYyLnNrZXdZLFxuICAgICAgc2NhbGVYID0gX3JlZjIuc2NhbGVYLFxuICAgICAgc2NhbGVZID0gX3JlZjIuc2NhbGVZLFxuICAgICAgdGFyZ2V0ID0gX3JlZjIudGFyZ2V0LFxuICAgICAgeE9yaWdpbiA9IF9yZWYyLnhPcmlnaW4sXG4gICAgICB5T3JpZ2luID0gX3JlZjIueU9yaWdpbixcbiAgICAgIHhPZmZzZXQgPSBfcmVmMi54T2Zmc2V0LFxuICAgICAgeU9mZnNldCA9IF9yZWYyLnlPZmZzZXQsXG4gICAgICBmb3JjZUNTUyA9IF9yZWYyLmZvcmNlQ1NTLFxuICAgICAgdHggPSBwYXJzZUZsb2F0KHgpLFxuICAgICAgdHkgPSBwYXJzZUZsb2F0KHkpLFxuICAgICAgYTExLFxuICAgICAgYTIxLFxuICAgICAgYTEyLFxuICAgICAgYTIyLFxuICAgICAgdGVtcDtcblxuICByb3RhdGlvbiA9IHBhcnNlRmxvYXQocm90YXRpb24pO1xuICBza2V3WCA9IHBhcnNlRmxvYXQoc2tld1gpO1xuICBza2V3WSA9IHBhcnNlRmxvYXQoc2tld1kpO1xuXG4gIGlmIChza2V3WSkge1xuICAgIC8vZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMsIHdlIGNvbWJpbmUgYWxsIHNrZXdpbmcgaW50byB0aGUgc2tld1ggYW5kIHJvdGF0aW9uIHZhbHVlcy4gUmVtZW1iZXIsIGEgc2tld1kgb2YgMTAgZGVncmVlcyBsb29rcyB0aGUgc2FtZSBhcyBhIHJvdGF0aW9uIG9mIDEwIGRlZ3JlZXMgcGx1cyBhIHNrZXdYIG9mIDEwIGRlZ3JlZXMuXG4gICAgc2tld1kgPSBwYXJzZUZsb2F0KHNrZXdZKTtcbiAgICBza2V3WCArPSBza2V3WTtcbiAgICByb3RhdGlvbiArPSBza2V3WTtcbiAgfVxuXG4gIGlmIChyb3RhdGlvbiB8fCBza2V3WCkge1xuICAgIHJvdGF0aW9uICo9IF9ERUcyUkFEO1xuICAgIHNrZXdYICo9IF9ERUcyUkFEO1xuICAgIGExMSA9IE1hdGguY29zKHJvdGF0aW9uKSAqIHNjYWxlWDtcbiAgICBhMjEgPSBNYXRoLnNpbihyb3RhdGlvbikgKiBzY2FsZVg7XG4gICAgYTEyID0gTWF0aC5zaW4ocm90YXRpb24gLSBza2V3WCkgKiAtc2NhbGVZO1xuICAgIGEyMiA9IE1hdGguY29zKHJvdGF0aW9uIC0gc2tld1gpICogc2NhbGVZO1xuXG4gICAgaWYgKHNrZXdYKSB7XG4gICAgICBza2V3WSAqPSBfREVHMlJBRDtcbiAgICAgIHRlbXAgPSBNYXRoLnRhbihza2V3WCAtIHNrZXdZKTtcbiAgICAgIHRlbXAgPSBNYXRoLnNxcnQoMSArIHRlbXAgKiB0ZW1wKTtcbiAgICAgIGExMiAqPSB0ZW1wO1xuICAgICAgYTIyICo9IHRlbXA7XG5cbiAgICAgIGlmIChza2V3WSkge1xuICAgICAgICB0ZW1wID0gTWF0aC50YW4oc2tld1kpO1xuICAgICAgICB0ZW1wID0gTWF0aC5zcXJ0KDEgKyB0ZW1wICogdGVtcCk7XG4gICAgICAgIGExMSAqPSB0ZW1wO1xuICAgICAgICBhMjEgKj0gdGVtcDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBhMTEgPSBfcm91bmQoYTExKTtcbiAgICBhMjEgPSBfcm91bmQoYTIxKTtcbiAgICBhMTIgPSBfcm91bmQoYTEyKTtcbiAgICBhMjIgPSBfcm91bmQoYTIyKTtcbiAgfSBlbHNlIHtcbiAgICBhMTEgPSBzY2FsZVg7XG4gICAgYTIyID0gc2NhbGVZO1xuICAgIGEyMSA9IGExMiA9IDA7XG4gIH1cblxuICBpZiAodHggJiYgIX4oeCArIFwiXCIpLmluZGV4T2YoXCJweFwiKSB8fCB0eSAmJiAhfih5ICsgXCJcIikuaW5kZXhPZihcInB4XCIpKSB7XG4gICAgdHggPSBfY29udmVydFRvVW5pdCh0YXJnZXQsIFwieFwiLCB4LCBcInB4XCIpO1xuICAgIHR5ID0gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBcInlcIiwgeSwgXCJweFwiKTtcbiAgfVxuXG4gIGlmICh4T3JpZ2luIHx8IHlPcmlnaW4gfHwgeE9mZnNldCB8fCB5T2Zmc2V0KSB7XG4gICAgdHggPSBfcm91bmQodHggKyB4T3JpZ2luIC0gKHhPcmlnaW4gKiBhMTEgKyB5T3JpZ2luICogYTEyKSArIHhPZmZzZXQpO1xuICAgIHR5ID0gX3JvdW5kKHR5ICsgeU9yaWdpbiAtICh4T3JpZ2luICogYTIxICsgeU9yaWdpbiAqIGEyMikgKyB5T2Zmc2V0KTtcbiAgfVxuXG4gIGlmICh4UGVyY2VudCB8fCB5UGVyY2VudCkge1xuICAgIC8vVGhlIFNWRyBzcGVjIGRvZXNuJ3Qgc3VwcG9ydCBwZXJjZW50YWdlLWJhc2VkIHRyYW5zbGF0aW9uIGluIHRoZSBcInRyYW5zZm9ybVwiIGF0dHJpYnV0ZSwgc28gd2UgbWVyZ2UgaXQgaW50byB0aGUgdHJhbnNsYXRpb24gdG8gc2ltdWxhdGUgaXQuXG4gICAgdGVtcCA9IHRhcmdldC5nZXRCQm94KCk7XG4gICAgdHggPSBfcm91bmQodHggKyB4UGVyY2VudCAvIDEwMCAqIHRlbXAud2lkdGgpO1xuICAgIHR5ID0gX3JvdW5kKHR5ICsgeVBlcmNlbnQgLyAxMDAgKiB0ZW1wLmhlaWdodCk7XG4gIH1cblxuICB0ZW1wID0gXCJtYXRyaXgoXCIgKyBhMTEgKyBcIixcIiArIGEyMSArIFwiLFwiICsgYTEyICsgXCIsXCIgKyBhMjIgKyBcIixcIiArIHR4ICsgXCIsXCIgKyB0eSArIFwiKVwiO1xuICB0YXJnZXQuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIHRlbXApO1xuICBmb3JjZUNTUyAmJiAodGFyZ2V0LnN0eWxlW190cmFuc2Zvcm1Qcm9wXSA9IHRlbXApOyAvL3NvbWUgYnJvd3NlcnMgcHJpb3JpdGl6ZSBDU1MgdHJhbnNmb3JtcyBvdmVyIHRoZSB0cmFuc2Zvcm0gYXR0cmlidXRlLiBXaGVuIHdlIHNlbnNlIHRoYXQgdGhlIHVzZXIgaGFzIENTUyB0cmFuc2Zvcm1zIGFwcGxpZWQsIHdlIG11c3Qgb3ZlcndyaXRlIHRoZW0gdGhpcyB3YXkgKG90aGVyd2lzZSBzb21lIGJyb3dzZXIgc2ltcGx5IHdvbid0IHJlbmRlciB0aGUgdHJhbnNmb3JtIGF0dHJpYnV0ZSBjaGFuZ2VzISlcbn0sXG4gICAgX2FkZFJvdGF0aW9uYWxQcm9wVHdlZW4gPSBmdW5jdGlvbiBfYWRkUm90YXRpb25hbFByb3BUd2VlbihwbHVnaW4sIHRhcmdldCwgcHJvcGVydHksIHN0YXJ0TnVtLCBlbmRWYWx1ZSkge1xuICB2YXIgY2FwID0gMzYwLFxuICAgICAgaXNTdHJpbmcgPSBfaXNTdHJpbmcoZW5kVmFsdWUpLFxuICAgICAgZW5kTnVtID0gcGFyc2VGbG9hdChlbmRWYWx1ZSkgKiAoaXNTdHJpbmcgJiYgfmVuZFZhbHVlLmluZGV4T2YoXCJyYWRcIikgPyBfUkFEMkRFRyA6IDEpLFxuICAgICAgY2hhbmdlID0gZW5kTnVtIC0gc3RhcnROdW0sXG4gICAgICBmaW5hbFZhbHVlID0gc3RhcnROdW0gKyBjaGFuZ2UgKyBcImRlZ1wiLFxuICAgICAgZGlyZWN0aW9uLFxuICAgICAgcHQ7XG5cbiAgaWYgKGlzU3RyaW5nKSB7XG4gICAgZGlyZWN0aW9uID0gZW5kVmFsdWUuc3BsaXQoXCJfXCIpWzFdO1xuXG4gICAgaWYgKGRpcmVjdGlvbiA9PT0gXCJzaG9ydFwiKSB7XG4gICAgICBjaGFuZ2UgJT0gY2FwO1xuXG4gICAgICBpZiAoY2hhbmdlICE9PSBjaGFuZ2UgJSAoY2FwIC8gMikpIHtcbiAgICAgICAgY2hhbmdlICs9IGNoYW5nZSA8IDAgPyBjYXAgOiAtY2FwO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChkaXJlY3Rpb24gPT09IFwiY3dcIiAmJiBjaGFuZ2UgPCAwKSB7XG4gICAgICBjaGFuZ2UgPSAoY2hhbmdlICsgY2FwICogX2JpZ051bSkgJSBjYXAgLSB+fihjaGFuZ2UgLyBjYXApICogY2FwO1xuICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09PSBcImNjd1wiICYmIGNoYW5nZSA+IDApIHtcbiAgICAgIGNoYW5nZSA9IChjaGFuZ2UgLSBjYXAgKiBfYmlnTnVtKSAlIGNhcCAtIH5+KGNoYW5nZSAvIGNhcCkgKiBjYXA7XG4gICAgfVxuICB9XG5cbiAgcGx1Z2luLl9wdCA9IHB0ID0gbmV3IFByb3BUd2VlbihwbHVnaW4uX3B0LCB0YXJnZXQsIHByb3BlcnR5LCBzdGFydE51bSwgY2hhbmdlLCBfcmVuZGVyUHJvcFdpdGhFbmQpO1xuICBwdC5lID0gZmluYWxWYWx1ZTtcbiAgcHQudSA9IFwiZGVnXCI7XG5cbiAgcGx1Z2luLl9wcm9wcy5wdXNoKHByb3BlcnR5KTtcblxuICByZXR1cm4gcHQ7XG59LFxuICAgIF9hc3NpZ24gPSBmdW5jdGlvbiBfYXNzaWduKHRhcmdldCwgc291cmNlKSB7XG4gIC8vIEludGVybmV0IEV4cGxvcmVyIGRvZXNuJ3QgaGF2ZSBPYmplY3QuYXNzaWduKCksIHNvIHdlIHJlY3JlYXRlIGl0IGhlcmUuXG4gIGZvciAodmFyIHAgaW4gc291cmNlKSB7XG4gICAgdGFyZ2V0W3BdID0gc291cmNlW3BdO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn0sXG4gICAgX2FkZFJhd1RyYW5zZm9ybVBUcyA9IGZ1bmN0aW9uIF9hZGRSYXdUcmFuc2Zvcm1QVHMocGx1Z2luLCB0cmFuc2Zvcm1zLCB0YXJnZXQpIHtcbiAgLy9mb3IgaGFuZGxpbmcgY2FzZXMgd2hlcmUgc29tZW9uZSBwYXNzZXMgaW4gYSB3aG9sZSB0cmFuc2Zvcm0gc3RyaW5nLCBsaWtlIHRyYW5zZm9ybTogXCJzY2FsZSgyLCAzKSByb3RhdGUoMjBkZWcpIHRyYW5zbGF0ZVkoMzBlbSlcIlxuICB2YXIgc3RhcnRDYWNoZSA9IF9hc3NpZ24oe30sIHRhcmdldC5fZ3NhcCksXG4gICAgICBleGNsdWRlID0gXCJwZXJzcGVjdGl2ZSxmb3JjZTNELHRyYW5zZm9ybU9yaWdpbixzdmdPcmlnaW5cIixcbiAgICAgIHN0eWxlID0gdGFyZ2V0LnN0eWxlLFxuICAgICAgZW5kQ2FjaGUsXG4gICAgICBwLFxuICAgICAgc3RhcnRWYWx1ZSxcbiAgICAgIGVuZFZhbHVlLFxuICAgICAgc3RhcnROdW0sXG4gICAgICBlbmROdW0sXG4gICAgICBzdGFydFVuaXQsXG4gICAgICBlbmRVbml0O1xuXG4gIGlmIChzdGFydENhY2hlLnN2Zykge1xuICAgIHN0YXJ0VmFsdWUgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIpO1xuICAgIHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIiwgXCJcIik7XG4gICAgc3R5bGVbX3RyYW5zZm9ybVByb3BdID0gdHJhbnNmb3JtcztcbiAgICBlbmRDYWNoZSA9IF9wYXJzZVRyYW5zZm9ybSh0YXJnZXQsIDEpO1xuXG4gICAgX3JlbW92ZVByb3BlcnR5KHRhcmdldCwgX3RyYW5zZm9ybVByb3ApO1xuXG4gICAgdGFyZ2V0LnNldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiLCBzdGFydFZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICBzdGFydFZhbHVlID0gZ2V0Q29tcHV0ZWRTdHlsZSh0YXJnZXQpW190cmFuc2Zvcm1Qcm9wXTtcbiAgICBzdHlsZVtfdHJhbnNmb3JtUHJvcF0gPSB0cmFuc2Zvcm1zO1xuICAgIGVuZENhY2hlID0gX3BhcnNlVHJhbnNmb3JtKHRhcmdldCwgMSk7XG4gICAgc3R5bGVbX3RyYW5zZm9ybVByb3BdID0gc3RhcnRWYWx1ZTtcbiAgfVxuXG4gIGZvciAocCBpbiBfdHJhbnNmb3JtUHJvcHMpIHtcbiAgICBzdGFydFZhbHVlID0gc3RhcnRDYWNoZVtwXTtcbiAgICBlbmRWYWx1ZSA9IGVuZENhY2hlW3BdO1xuXG4gICAgaWYgKHN0YXJ0VmFsdWUgIT09IGVuZFZhbHVlICYmIGV4Y2x1ZGUuaW5kZXhPZihwKSA8IDApIHtcbiAgICAgIC8vdHdlZW5pbmcgdG8gbm8gcGVyc3BlY3RpdmUgZ2l2ZXMgdmVyeSB1bmludHVpdGl2ZSByZXN1bHRzIC0ganVzdCBrZWVwIHRoZSBzYW1lIHBlcnNwZWN0aXZlIGluIHRoYXQgY2FzZS5cbiAgICAgIHN0YXJ0VW5pdCA9IGdldFVuaXQoc3RhcnRWYWx1ZSk7XG4gICAgICBlbmRVbml0ID0gZ2V0VW5pdChlbmRWYWx1ZSk7XG4gICAgICBzdGFydE51bSA9IHN0YXJ0VW5pdCAhPT0gZW5kVW5pdCA/IF9jb252ZXJ0VG9Vbml0KHRhcmdldCwgcCwgc3RhcnRWYWx1ZSwgZW5kVW5pdCkgOiBwYXJzZUZsb2F0KHN0YXJ0VmFsdWUpO1xuICAgICAgZW5kTnVtID0gcGFyc2VGbG9hdChlbmRWYWx1ZSk7XG4gICAgICBwbHVnaW4uX3B0ID0gbmV3IFByb3BUd2VlbihwbHVnaW4uX3B0LCBlbmRDYWNoZSwgcCwgc3RhcnROdW0sIGVuZE51bSAtIHN0YXJ0TnVtLCBfcmVuZGVyQ1NTUHJvcCk7XG4gICAgICBwbHVnaW4uX3B0LnUgPSBlbmRVbml0IHx8IDA7XG5cbiAgICAgIHBsdWdpbi5fcHJvcHMucHVzaChwKTtcbiAgICB9XG4gIH1cblxuICBfYXNzaWduKGVuZENhY2hlLCBzdGFydENhY2hlKTtcbn07IC8vIGhhbmRsZSBzcGxpdHRpbmcgYXBhcnQgcGFkZGluZywgbWFyZ2luLCBib3JkZXJXaWR0aCwgYW5kIGJvcmRlclJhZGl1cyBpbnRvIHRoZWlyIDQgY29tcG9uZW50cy4gRmlyZWZveCwgZm9yIGV4YW1wbGUsIHdvbid0IHJlcG9ydCBib3JkZXJSYWRpdXMgY29ycmVjdGx5IC0gaXQgd2lsbCBvbmx5IGRvIGJvcmRlclRvcExlZnRSYWRpdXMgYW5kIHRoZSBvdGhlciBjb3JuZXJzLiBXZSBhbHNvIHdhbnQgdG8gaGFuZGxlIHBhZGRpbmdUb3AsIG1hcmdpbkxlZnQsIGJvcmRlclJpZ2h0V2lkdGgsIGV0Yy5cblxuXG5fZm9yRWFjaE5hbWUoXCJwYWRkaW5nLG1hcmdpbixXaWR0aCxSYWRpdXNcIiwgZnVuY3Rpb24gKG5hbWUsIGluZGV4KSB7XG4gIHZhciB0ID0gXCJUb3BcIixcbiAgICAgIHIgPSBcIlJpZ2h0XCIsXG4gICAgICBiID0gXCJCb3R0b21cIixcbiAgICAgIGwgPSBcIkxlZnRcIixcbiAgICAgIHByb3BzID0gKGluZGV4IDwgMyA/IFt0LCByLCBiLCBsXSA6IFt0ICsgbCwgdCArIHIsIGIgKyByLCBiICsgbF0pLm1hcChmdW5jdGlvbiAoc2lkZSkge1xuICAgIHJldHVybiBpbmRleCA8IDIgPyBuYW1lICsgc2lkZSA6IFwiYm9yZGVyXCIgKyBzaWRlICsgbmFtZTtcbiAgfSk7XG5cbiAgX3NwZWNpYWxQcm9wc1tpbmRleCA+IDEgPyBcImJvcmRlclwiICsgbmFtZSA6IG5hbWVdID0gZnVuY3Rpb24gKHBsdWdpbiwgdGFyZ2V0LCBwcm9wZXJ0eSwgZW5kVmFsdWUsIHR3ZWVuKSB7XG4gICAgdmFyIGEsIHZhcnM7XG5cbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDQpIHtcbiAgICAgIC8vIGdldHRlciwgcGFzc2VkIHRhcmdldCwgcHJvcGVydHksIGFuZCB1bml0IChmcm9tIF9nZXQoKSlcbiAgICAgIGEgPSBwcm9wcy5tYXAoZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgICAgcmV0dXJuIF9nZXQocGx1Z2luLCBwcm9wLCBwcm9wZXJ0eSk7XG4gICAgICB9KTtcbiAgICAgIHZhcnMgPSBhLmpvaW4oXCIgXCIpO1xuICAgICAgcmV0dXJuIHZhcnMuc3BsaXQoYVswXSkubGVuZ3RoID09PSA1ID8gYVswXSA6IHZhcnM7XG4gICAgfVxuXG4gICAgYSA9IChlbmRWYWx1ZSArIFwiXCIpLnNwbGl0KFwiIFwiKTtcbiAgICB2YXJzID0ge307XG4gICAgcHJvcHMuZm9yRWFjaChmdW5jdGlvbiAocHJvcCwgaSkge1xuICAgICAgcmV0dXJuIHZhcnNbcHJvcF0gPSBhW2ldID0gYVtpXSB8fCBhWyhpIC0gMSkgLyAyIHwgMF07XG4gICAgfSk7XG4gICAgcGx1Z2luLmluaXQodGFyZ2V0LCB2YXJzLCB0d2Vlbik7XG4gIH07XG59KTtcblxuZXhwb3J0IHZhciBDU1NQbHVnaW4gPSB7XG4gIG5hbWU6IFwiY3NzXCIsXG4gIHJlZ2lzdGVyOiBfaW5pdENvcmUsXG4gIHRhcmdldFRlc3Q6IGZ1bmN0aW9uIHRhcmdldFRlc3QodGFyZ2V0KSB7XG4gICAgcmV0dXJuIHRhcmdldC5zdHlsZSAmJiB0YXJnZXQubm9kZVR5cGU7XG4gIH0sXG4gIGluaXQ6IGZ1bmN0aW9uIGluaXQodGFyZ2V0LCB2YXJzLCB0d2VlbiwgaW5kZXgsIHRhcmdldHMpIHtcbiAgICB2YXIgcHJvcHMgPSB0aGlzLl9wcm9wcyxcbiAgICAgICAgc3R5bGUgPSB0YXJnZXQuc3R5bGUsXG4gICAgICAgIHN0YXJ0QXQgPSB0d2Vlbi52YXJzLnN0YXJ0QXQsXG4gICAgICAgIHN0YXJ0VmFsdWUsXG4gICAgICAgIGVuZFZhbHVlLFxuICAgICAgICBlbmROdW0sXG4gICAgICAgIHN0YXJ0TnVtLFxuICAgICAgICB0eXBlLFxuICAgICAgICBzcGVjaWFsUHJvcCxcbiAgICAgICAgcCxcbiAgICAgICAgc3RhcnRVbml0LFxuICAgICAgICBlbmRVbml0LFxuICAgICAgICByZWxhdGl2ZSxcbiAgICAgICAgaXNUcmFuc2Zvcm1SZWxhdGVkLFxuICAgICAgICB0cmFuc2Zvcm1Qcm9wVHdlZW4sXG4gICAgICAgIGNhY2hlLFxuICAgICAgICBzbW9vdGgsXG4gICAgICAgIGhhc1ByaW9yaXR5LFxuICAgICAgICBpbmxpbmVQcm9wcztcbiAgICBfcGx1Z2luSW5pdHRlZCB8fCBfaW5pdENvcmUoKTsgLy8gd2UgbWF5IGNhbGwgaW5pdCgpIG11bHRpcGxlIHRpbWVzIG9uIHRoZSBzYW1lIHBsdWdpbiBpbnN0YW5jZSwgbGlrZSB3aGVuIGFkZGluZyBzcGVjaWFsIHByb3BlcnRpZXMsIHNvIG1ha2Ugc3VyZSB3ZSBkb24ndCBvdmVyd3JpdGUgdGhlIHJldmVydCBkYXRhIG9yIGlubGluZVByb3BzXG5cbiAgICB0aGlzLnN0eWxlcyA9IHRoaXMuc3R5bGVzIHx8IF9nZXRTdHlsZVNhdmVyKHRhcmdldCk7XG4gICAgaW5saW5lUHJvcHMgPSB0aGlzLnN0eWxlcy5wcm9wcztcbiAgICB0aGlzLnR3ZWVuID0gdHdlZW47XG5cbiAgICBmb3IgKHAgaW4gdmFycykge1xuICAgICAgaWYgKHAgPT09IFwiYXV0b1JvdW5kXCIpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGVuZFZhbHVlID0gdmFyc1twXTtcblxuICAgICAgaWYgKF9wbHVnaW5zW3BdICYmIF9jaGVja1BsdWdpbihwLCB2YXJzLCB0d2VlbiwgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cykpIHtcbiAgICAgICAgLy8gcGx1Z2luc1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgdHlwZSA9IHR5cGVvZiBlbmRWYWx1ZTtcbiAgICAgIHNwZWNpYWxQcm9wID0gX3NwZWNpYWxQcm9wc1twXTtcblxuICAgICAgaWYgKHR5cGUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBlbmRWYWx1ZSA9IGVuZFZhbHVlLmNhbGwodHdlZW4sIGluZGV4LCB0YXJnZXQsIHRhcmdldHMpO1xuICAgICAgICB0eXBlID0gdHlwZW9mIGVuZFZhbHVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZSA9PT0gXCJzdHJpbmdcIiAmJiB+ZW5kVmFsdWUuaW5kZXhPZihcInJhbmRvbShcIikpIHtcbiAgICAgICAgZW5kVmFsdWUgPSBfcmVwbGFjZVJhbmRvbShlbmRWYWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzcGVjaWFsUHJvcCkge1xuICAgICAgICBzcGVjaWFsUHJvcCh0aGlzLCB0YXJnZXQsIHAsIGVuZFZhbHVlLCB0d2VlbikgJiYgKGhhc1ByaW9yaXR5ID0gMSk7XG4gICAgICB9IGVsc2UgaWYgKHAuc3Vic3RyKDAsIDIpID09PSBcIi0tXCIpIHtcbiAgICAgICAgLy9DU1MgdmFyaWFibGVcbiAgICAgICAgc3RhcnRWYWx1ZSA9IChnZXRDb21wdXRlZFN0eWxlKHRhcmdldCkuZ2V0UHJvcGVydHlWYWx1ZShwKSArIFwiXCIpLnRyaW0oKTtcbiAgICAgICAgZW5kVmFsdWUgKz0gXCJcIjtcbiAgICAgICAgX2NvbG9yRXhwLmxhc3RJbmRleCA9IDA7XG5cbiAgICAgICAgaWYgKCFfY29sb3JFeHAudGVzdChzdGFydFZhbHVlKSkge1xuICAgICAgICAgIC8vIGNvbG9ycyBkb24ndCBoYXZlIHVuaXRzXG4gICAgICAgICAgc3RhcnRVbml0ID0gZ2V0VW5pdChzdGFydFZhbHVlKTtcbiAgICAgICAgICBlbmRVbml0ID0gZ2V0VW5pdChlbmRWYWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBlbmRVbml0ID8gc3RhcnRVbml0ICE9PSBlbmRVbml0ICYmIChzdGFydFZhbHVlID0gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBwLCBzdGFydFZhbHVlLCBlbmRVbml0KSArIGVuZFVuaXQpIDogc3RhcnRVbml0ICYmIChlbmRWYWx1ZSArPSBzdGFydFVuaXQpO1xuICAgICAgICB0aGlzLmFkZChzdHlsZSwgXCJzZXRQcm9wZXJ0eVwiLCBzdGFydFZhbHVlLCBlbmRWYWx1ZSwgaW5kZXgsIHRhcmdldHMsIDAsIDAsIHApO1xuICAgICAgICBwcm9wcy5wdXNoKHApO1xuICAgICAgICBpbmxpbmVQcm9wcy5wdXNoKHAsIDAsIHN0eWxlW3BdKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAoc3RhcnRBdCAmJiBwIGluIHN0YXJ0QXQpIHtcbiAgICAgICAgICAvLyBpbiBjYXNlIHNvbWVvbmUgaGFyZC1jb2RlcyBhIGNvbXBsZXggdmFsdWUgYXMgdGhlIHN0YXJ0LCBsaWtlIHRvcDogXCJjYWxjKDJ2aCAvIDIpXCIuIFdpdGhvdXQgdGhpcywgaXQnZCB1c2UgdGhlIGNvbXB1dGVkIHZhbHVlIChhbHdheXMgaW4gcHgpXG4gICAgICAgICAgc3RhcnRWYWx1ZSA9IHR5cGVvZiBzdGFydEF0W3BdID09PSBcImZ1bmN0aW9uXCIgPyBzdGFydEF0W3BdLmNhbGwodHdlZW4sIGluZGV4LCB0YXJnZXQsIHRhcmdldHMpIDogc3RhcnRBdFtwXTtcbiAgICAgICAgICBfaXNTdHJpbmcoc3RhcnRWYWx1ZSkgJiYgfnN0YXJ0VmFsdWUuaW5kZXhPZihcInJhbmRvbShcIikgJiYgKHN0YXJ0VmFsdWUgPSBfcmVwbGFjZVJhbmRvbShzdGFydFZhbHVlKSk7XG4gICAgICAgICAgZ2V0VW5pdChzdGFydFZhbHVlICsgXCJcIikgfHwgc3RhcnRWYWx1ZSA9PT0gXCJhdXRvXCIgfHwgKHN0YXJ0VmFsdWUgKz0gX2NvbmZpZy51bml0c1twXSB8fCBnZXRVbml0KF9nZXQodGFyZ2V0LCBwKSkgfHwgXCJcIik7IC8vIGZvciBjYXNlcyB3aGVuIHNvbWVvbmUgcGFzc2VzIGluIGEgdW5pdGxlc3MgdmFsdWUgbGlrZSB7eDogMTAwfTsgaWYgd2UgdHJ5IHNldHRpbmcgdHJhbnNsYXRlKDEwMCwgMHB4KSBpdCB3b24ndCB3b3JrLlxuXG4gICAgICAgICAgKHN0YXJ0VmFsdWUgKyBcIlwiKS5jaGFyQXQoMSkgPT09IFwiPVwiICYmIChzdGFydFZhbHVlID0gX2dldCh0YXJnZXQsIHApKTsgLy8gY2FuJ3Qgd29yayB3aXRoIHJlbGF0aXZlIHZhbHVlc1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0YXJ0VmFsdWUgPSBfZ2V0KHRhcmdldCwgcCk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGFydE51bSA9IHBhcnNlRmxvYXQoc3RhcnRWYWx1ZSk7XG4gICAgICAgIHJlbGF0aXZlID0gdHlwZSA9PT0gXCJzdHJpbmdcIiAmJiBlbmRWYWx1ZS5jaGFyQXQoMSkgPT09IFwiPVwiICYmIGVuZFZhbHVlLnN1YnN0cigwLCAyKTtcbiAgICAgICAgcmVsYXRpdmUgJiYgKGVuZFZhbHVlID0gZW5kVmFsdWUuc3Vic3RyKDIpKTtcbiAgICAgICAgZW5kTnVtID0gcGFyc2VGbG9hdChlbmRWYWx1ZSk7XG5cbiAgICAgICAgaWYgKHAgaW4gX3Byb3BlcnR5QWxpYXNlcykge1xuICAgICAgICAgIGlmIChwID09PSBcImF1dG9BbHBoYVwiKSB7XG4gICAgICAgICAgICAvL3NwZWNpYWwgY2FzZSB3aGVyZSB3ZSBjb250cm9sIHRoZSB2aXNpYmlsaXR5IGFsb25nIHdpdGggb3BhY2l0eS4gV2Ugc3RpbGwgYWxsb3cgdGhlIG9wYWNpdHkgdmFsdWUgdG8gcGFzcyB0aHJvdWdoIGFuZCBnZXQgdHdlZW5lZC5cbiAgICAgICAgICAgIGlmIChzdGFydE51bSA9PT0gMSAmJiBfZ2V0KHRhcmdldCwgXCJ2aXNpYmlsaXR5XCIpID09PSBcImhpZGRlblwiICYmIGVuZE51bSkge1xuICAgICAgICAgICAgICAvL2lmIHZpc2liaWxpdHkgaXMgaW5pdGlhbGx5IHNldCB0byBcImhpZGRlblwiLCB3ZSBzaG91bGQgaW50ZXJwcmV0IHRoYXQgYXMgaW50ZW50IHRvIG1ha2Ugb3BhY2l0eSAwIChhIGNvbnZlbmllbmNlKVxuICAgICAgICAgICAgICBzdGFydE51bSA9IDA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlubGluZVByb3BzLnB1c2goXCJ2aXNpYmlsaXR5XCIsIDAsIHN0eWxlLnZpc2liaWxpdHkpO1xuXG4gICAgICAgICAgICBfYWRkTm9uVHdlZW5pbmdQVCh0aGlzLCBzdHlsZSwgXCJ2aXNpYmlsaXR5XCIsIHN0YXJ0TnVtID8gXCJpbmhlcml0XCIgOiBcImhpZGRlblwiLCBlbmROdW0gPyBcImluaGVyaXRcIiA6IFwiaGlkZGVuXCIsICFlbmROdW0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChwICE9PSBcInNjYWxlXCIgJiYgcCAhPT0gXCJ0cmFuc2Zvcm1cIikge1xuICAgICAgICAgICAgcCA9IF9wcm9wZXJ0eUFsaWFzZXNbcF07XG4gICAgICAgICAgICB+cC5pbmRleE9mKFwiLFwiKSAmJiAocCA9IHAuc3BsaXQoXCIsXCIpWzBdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpc1RyYW5zZm9ybVJlbGF0ZWQgPSBwIGluIF90cmFuc2Zvcm1Qcm9wczsgLy8tLS0gVFJBTlNGT1JNLVJFTEFURUQgLS0tXG5cbiAgICAgICAgaWYgKGlzVHJhbnNmb3JtUmVsYXRlZCkge1xuICAgICAgICAgIHRoaXMuc3R5bGVzLnNhdmUocCk7XG5cbiAgICAgICAgICBpZiAoIXRyYW5zZm9ybVByb3BUd2Vlbikge1xuICAgICAgICAgICAgY2FjaGUgPSB0YXJnZXQuX2dzYXA7XG4gICAgICAgICAgICBjYWNoZS5yZW5kZXJUcmFuc2Zvcm0gJiYgIXZhcnMucGFyc2VUcmFuc2Zvcm0gfHwgX3BhcnNlVHJhbnNmb3JtKHRhcmdldCwgdmFycy5wYXJzZVRyYW5zZm9ybSk7IC8vIGlmLCBmb3IgZXhhbXBsZSwgZ3NhcC5zZXQoLi4uIHt0cmFuc2Zvcm06XCJ0cmFuc2xhdGVYKDUwdncpXCJ9KSwgdGhlIF9nZXQoKSBjYWxsIGRvZXNuJ3QgcGFyc2UgdGhlIHRyYW5zZm9ybSwgdGh1cyBjYWNoZS5yZW5kZXJUcmFuc2Zvcm0gd29uJ3QgYmUgc2V0IHlldCBzbyBmb3JjZSB0aGUgcGFyc2luZyBvZiB0aGUgdHJhbnNmb3JtIGhlcmUuXG5cbiAgICAgICAgICAgIHNtb290aCA9IHZhcnMuc21vb3RoT3JpZ2luICE9PSBmYWxzZSAmJiBjYWNoZS5zbW9vdGg7XG4gICAgICAgICAgICB0cmFuc2Zvcm1Qcm9wVHdlZW4gPSB0aGlzLl9wdCA9IG5ldyBQcm9wVHdlZW4odGhpcy5fcHQsIHN0eWxlLCBfdHJhbnNmb3JtUHJvcCwgMCwgMSwgY2FjaGUucmVuZGVyVHJhbnNmb3JtLCBjYWNoZSwgMCwgLTEpOyAvL3RoZSBmaXJzdCB0aW1lIHRocm91Z2gsIGNyZWF0ZSB0aGUgcmVuZGVyaW5nIFByb3BUd2VlbiBzbyB0aGF0IGl0IHJ1bnMgTEFTVCAoaW4gdGhlIGxpbmtlZCBsaXN0LCB3ZSBrZWVwIGFkZGluZyB0byB0aGUgYmVnaW5uaW5nKVxuXG4gICAgICAgICAgICB0cmFuc2Zvcm1Qcm9wVHdlZW4uZGVwID0gMTsgLy9mbGFnIGl0IGFzIGRlcGVuZGVudCBzbyB0aGF0IGlmIHRoaW5ncyBnZXQga2lsbGVkL292ZXJ3cml0dGVuIGFuZCB0aGlzIGlzIHRoZSBvbmx5IFByb3BUd2VlbiBsZWZ0LCB3ZSBjYW4gc2FmZWx5IGtpbGwgdGhlIHdob2xlIHR3ZWVuLlxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChwID09PSBcInNjYWxlXCIpIHtcbiAgICAgICAgICAgIHRoaXMuX3B0ID0gbmV3IFByb3BUd2Vlbih0aGlzLl9wdCwgY2FjaGUsIFwic2NhbGVZXCIsIGNhY2hlLnNjYWxlWSwgKHJlbGF0aXZlID8gX3BhcnNlUmVsYXRpdmUoY2FjaGUuc2NhbGVZLCByZWxhdGl2ZSArIGVuZE51bSkgOiBlbmROdW0pIC0gY2FjaGUuc2NhbGVZIHx8IDAsIF9yZW5kZXJDU1NQcm9wKTtcbiAgICAgICAgICAgIHRoaXMuX3B0LnUgPSAwO1xuICAgICAgICAgICAgcHJvcHMucHVzaChcInNjYWxlWVwiLCBwKTtcbiAgICAgICAgICAgIHAgKz0gXCJYXCI7XG4gICAgICAgICAgfSBlbHNlIGlmIChwID09PSBcInRyYW5zZm9ybU9yaWdpblwiKSB7XG4gICAgICAgICAgICBpbmxpbmVQcm9wcy5wdXNoKF90cmFuc2Zvcm1PcmlnaW5Qcm9wLCAwLCBzdHlsZVtfdHJhbnNmb3JtT3JpZ2luUHJvcF0pO1xuICAgICAgICAgICAgZW5kVmFsdWUgPSBfY29udmVydEtleXdvcmRzVG9QZXJjZW50YWdlcyhlbmRWYWx1ZSk7IC8vaW4gY2FzZSBzb21ldGhpbmcgbGlrZSBcImxlZnQgdG9wXCIgb3IgXCJib3R0b20gcmlnaHRcIiBpcyBwYXNzZWQgaW4uIENvbnZlcnQgdG8gcGVyY2VudGFnZXMuXG5cbiAgICAgICAgICAgIGlmIChjYWNoZS5zdmcpIHtcbiAgICAgICAgICAgICAgX2FwcGx5U1ZHT3JpZ2luKHRhcmdldCwgZW5kVmFsdWUsIDAsIHNtb290aCwgMCwgdGhpcyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBlbmRVbml0ID0gcGFyc2VGbG9hdChlbmRWYWx1ZS5zcGxpdChcIiBcIilbMl0pIHx8IDA7IC8vaGFuZGxlIHRoZSB6T3JpZ2luIHNlcGFyYXRlbHkhXG5cbiAgICAgICAgICAgICAgZW5kVW5pdCAhPT0gY2FjaGUuek9yaWdpbiAmJiBfYWRkTm9uVHdlZW5pbmdQVCh0aGlzLCBjYWNoZSwgXCJ6T3JpZ2luXCIsIGNhY2hlLnpPcmlnaW4sIGVuZFVuaXQpO1xuXG4gICAgICAgICAgICAgIF9hZGROb25Ud2VlbmluZ1BUKHRoaXMsIHN0eWxlLCBwLCBfZmlyc3RUd29Pbmx5KHN0YXJ0VmFsdWUpLCBfZmlyc3RUd29Pbmx5KGVuZFZhbHVlKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH0gZWxzZSBpZiAocCA9PT0gXCJzdmdPcmlnaW5cIikge1xuICAgICAgICAgICAgX2FwcGx5U1ZHT3JpZ2luKHRhcmdldCwgZW5kVmFsdWUsIDEsIHNtb290aCwgMCwgdGhpcyk7XG5cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH0gZWxzZSBpZiAocCBpbiBfcm90YXRpb25hbFByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgIF9hZGRSb3RhdGlvbmFsUHJvcFR3ZWVuKHRoaXMsIGNhY2hlLCBwLCBzdGFydE51bSwgcmVsYXRpdmUgPyBfcGFyc2VSZWxhdGl2ZShzdGFydE51bSwgcmVsYXRpdmUgKyBlbmRWYWx1ZSkgOiBlbmRWYWx1ZSk7XG5cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH0gZWxzZSBpZiAocCA9PT0gXCJzbW9vdGhPcmlnaW5cIikge1xuICAgICAgICAgICAgX2FkZE5vblR3ZWVuaW5nUFQodGhpcywgY2FjaGUsIFwic21vb3RoXCIsIGNhY2hlLnNtb290aCwgZW5kVmFsdWUpO1xuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHAgPT09IFwiZm9yY2UzRFwiKSB7XG4gICAgICAgICAgICBjYWNoZVtwXSA9IGVuZFZhbHVlO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfSBlbHNlIGlmIChwID09PSBcInRyYW5zZm9ybVwiKSB7XG4gICAgICAgICAgICBfYWRkUmF3VHJhbnNmb3JtUFRzKHRoaXMsIGVuZFZhbHVlLCB0YXJnZXQpO1xuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoIShwIGluIHN0eWxlKSkge1xuICAgICAgICAgIHAgPSBfY2hlY2tQcm9wUHJlZml4KHApIHx8IHA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNUcmFuc2Zvcm1SZWxhdGVkIHx8IChlbmROdW0gfHwgZW5kTnVtID09PSAwKSAmJiAoc3RhcnROdW0gfHwgc3RhcnROdW0gPT09IDApICYmICFfY29tcGxleEV4cC50ZXN0KGVuZFZhbHVlKSAmJiBwIGluIHN0eWxlKSB7XG4gICAgICAgICAgc3RhcnRVbml0ID0gKHN0YXJ0VmFsdWUgKyBcIlwiKS5zdWJzdHIoKHN0YXJ0TnVtICsgXCJcIikubGVuZ3RoKTtcbiAgICAgICAgICBlbmROdW0gfHwgKGVuZE51bSA9IDApOyAvLyBwcm90ZWN0IGFnYWluc3QgTmFOXG5cbiAgICAgICAgICBlbmRVbml0ID0gZ2V0VW5pdChlbmRWYWx1ZSkgfHwgKHAgaW4gX2NvbmZpZy51bml0cyA/IF9jb25maWcudW5pdHNbcF0gOiBzdGFydFVuaXQpO1xuICAgICAgICAgIHN0YXJ0VW5pdCAhPT0gZW5kVW5pdCAmJiAoc3RhcnROdW0gPSBfY29udmVydFRvVW5pdCh0YXJnZXQsIHAsIHN0YXJ0VmFsdWUsIGVuZFVuaXQpKTtcbiAgICAgICAgICB0aGlzLl9wdCA9IG5ldyBQcm9wVHdlZW4odGhpcy5fcHQsIGlzVHJhbnNmb3JtUmVsYXRlZCA/IGNhY2hlIDogc3R5bGUsIHAsIHN0YXJ0TnVtLCAocmVsYXRpdmUgPyBfcGFyc2VSZWxhdGl2ZShzdGFydE51bSwgcmVsYXRpdmUgKyBlbmROdW0pIDogZW5kTnVtKSAtIHN0YXJ0TnVtLCAhaXNUcmFuc2Zvcm1SZWxhdGVkICYmIChlbmRVbml0ID09PSBcInB4XCIgfHwgcCA9PT0gXCJ6SW5kZXhcIikgJiYgdmFycy5hdXRvUm91bmQgIT09IGZhbHNlID8gX3JlbmRlclJvdW5kZWRDU1NQcm9wIDogX3JlbmRlckNTU1Byb3ApO1xuICAgICAgICAgIHRoaXMuX3B0LnUgPSBlbmRVbml0IHx8IDA7XG5cbiAgICAgICAgICBpZiAoc3RhcnRVbml0ICE9PSBlbmRVbml0ICYmIGVuZFVuaXQgIT09IFwiJVwiKSB7XG4gICAgICAgICAgICAvL3doZW4gdGhlIHR3ZWVuIGdvZXMgYWxsIHRoZSB3YXkgYmFjayB0byB0aGUgYmVnaW5uaW5nLCB3ZSBuZWVkIHRvIHJldmVydCBpdCB0byB0aGUgT0xEL09SSUdJTkFMIHZhbHVlICh3aXRoIHRob3NlIHVuaXRzKS4gV2UgcmVjb3JkIHRoYXQgYXMgYSBcImJcIiAoYmVnaW5uaW5nKSBwcm9wZXJ0eSBhbmQgcG9pbnQgdG8gYSByZW5kZXIgbWV0aG9kIHRoYXQgaGFuZGxlcyB0aGF0LiAocGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uKVxuICAgICAgICAgICAgdGhpcy5fcHQuYiA9IHN0YXJ0VmFsdWU7XG4gICAgICAgICAgICB0aGlzLl9wdC5yID0gX3JlbmRlckNTU1Byb3BXaXRoQmVnaW5uaW5nO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghKHAgaW4gc3R5bGUpKSB7XG4gICAgICAgICAgaWYgKHAgaW4gdGFyZ2V0KSB7XG4gICAgICAgICAgICAvL21heWJlIGl0J3Mgbm90IGEgc3R5bGUgLSBpdCBjb3VsZCBiZSBhIHByb3BlcnR5IGFkZGVkIGRpcmVjdGx5IHRvIGFuIGVsZW1lbnQgaW4gd2hpY2ggY2FzZSB3ZSdsbCB0cnkgdG8gYW5pbWF0ZSB0aGF0LlxuICAgICAgICAgICAgdGhpcy5hZGQodGFyZ2V0LCBwLCBzdGFydFZhbHVlIHx8IHRhcmdldFtwXSwgcmVsYXRpdmUgPyByZWxhdGl2ZSArIGVuZFZhbHVlIDogZW5kVmFsdWUsIGluZGV4LCB0YXJnZXRzKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHAgIT09IFwicGFyc2VUcmFuc2Zvcm1cIikge1xuICAgICAgICAgICAgX21pc3NpbmdQbHVnaW4ocCwgZW5kVmFsdWUpO1xuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3R3ZWVuQ29tcGxleENTU1N0cmluZy5jYWxsKHRoaXMsIHRhcmdldCwgcCwgc3RhcnRWYWx1ZSwgcmVsYXRpdmUgPyByZWxhdGl2ZSArIGVuZFZhbHVlIDogZW5kVmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaXNUcmFuc2Zvcm1SZWxhdGVkIHx8IChwIGluIHN0eWxlID8gaW5saW5lUHJvcHMucHVzaChwLCAwLCBzdHlsZVtwXSkgOiBpbmxpbmVQcm9wcy5wdXNoKHAsIDEsIHN0YXJ0VmFsdWUgfHwgdGFyZ2V0W3BdKSk7XG4gICAgICAgIHByb3BzLnB1c2gocCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaGFzUHJpb3JpdHkgJiYgX3NvcnRQcm9wVHdlZW5zQnlQcmlvcml0eSh0aGlzKTtcbiAgfSxcbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIocmF0aW8sIGRhdGEpIHtcbiAgICBpZiAoZGF0YS50d2Vlbi5fdGltZSB8fCAhX3JldmVydGluZygpKSB7XG4gICAgICB2YXIgcHQgPSBkYXRhLl9wdDtcblxuICAgICAgd2hpbGUgKHB0KSB7XG4gICAgICAgIHB0LnIocmF0aW8sIHB0LmQpO1xuICAgICAgICBwdCA9IHB0Ll9uZXh0O1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBkYXRhLnN0eWxlcy5yZXZlcnQoKTtcbiAgICB9XG4gIH0sXG4gIGdldDogX2dldCxcbiAgYWxpYXNlczogX3Byb3BlcnR5QWxpYXNlcyxcbiAgZ2V0U2V0dGVyOiBmdW5jdGlvbiBnZXRTZXR0ZXIodGFyZ2V0LCBwcm9wZXJ0eSwgcGx1Z2luKSB7XG4gICAgLy9yZXR1cm5zIGEgc2V0dGVyIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyB0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSBhbmQgYXBwbGllcyBpdCBhY2NvcmRpbmdseS4gUmVtZW1iZXIsIHByb3BlcnRpZXMgbGlrZSBcInhcIiBhcmVuJ3QgYXMgc2ltcGxlIGFzIHRhcmdldC5zdHlsZS5wcm9wZXJ0eSA9IHZhbHVlIGJlY2F1c2UgdGhleSd2ZSBnb3QgdG8gYmUgYXBwbGllZCB0byBhIHByb3h5IG9iamVjdCBhbmQgdGhlbiBtZXJnZWQgaW50byBhIHRyYW5zZm9ybSBzdHJpbmcgaW4gYSByZW5kZXJlci5cbiAgICB2YXIgcCA9IF9wcm9wZXJ0eUFsaWFzZXNbcHJvcGVydHldO1xuICAgIHAgJiYgcC5pbmRleE9mKFwiLFwiKSA8IDAgJiYgKHByb3BlcnR5ID0gcCk7XG4gICAgcmV0dXJuIHByb3BlcnR5IGluIF90cmFuc2Zvcm1Qcm9wcyAmJiBwcm9wZXJ0eSAhPT0gX3RyYW5zZm9ybU9yaWdpblByb3AgJiYgKHRhcmdldC5fZ3NhcC54IHx8IF9nZXQodGFyZ2V0LCBcInhcIikpID8gcGx1Z2luICYmIF9yZWNlbnRTZXR0ZXJQbHVnaW4gPT09IHBsdWdpbiA/IHByb3BlcnR5ID09PSBcInNjYWxlXCIgPyBfc2V0dGVyU2NhbGUgOiBfc2V0dGVyVHJhbnNmb3JtIDogKF9yZWNlbnRTZXR0ZXJQbHVnaW4gPSBwbHVnaW4gfHwge30pICYmIChwcm9wZXJ0eSA9PT0gXCJzY2FsZVwiID8gX3NldHRlclNjYWxlV2l0aFJlbmRlciA6IF9zZXR0ZXJUcmFuc2Zvcm1XaXRoUmVuZGVyKSA6IHRhcmdldC5zdHlsZSAmJiAhX2lzVW5kZWZpbmVkKHRhcmdldC5zdHlsZVtwcm9wZXJ0eV0pID8gX3NldHRlckNTU1N0eWxlIDogfnByb3BlcnR5LmluZGV4T2YoXCItXCIpID8gX3NldHRlckNTU1Byb3AgOiBfZ2V0U2V0dGVyKHRhcmdldCwgcHJvcGVydHkpO1xuICB9LFxuICBjb3JlOiB7XG4gICAgX3JlbW92ZVByb3BlcnR5OiBfcmVtb3ZlUHJvcGVydHksXG4gICAgX2dldE1hdHJpeDogX2dldE1hdHJpeFxuICB9XG59O1xuZ3NhcC51dGlscy5jaGVja1ByZWZpeCA9IF9jaGVja1Byb3BQcmVmaXg7XG5nc2FwLmNvcmUuZ2V0U3R5bGVTYXZlciA9IF9nZXRTdHlsZVNhdmVyO1xuXG4oZnVuY3Rpb24gKHBvc2l0aW9uQW5kU2NhbGUsIHJvdGF0aW9uLCBvdGhlcnMsIGFsaWFzZXMpIHtcbiAgdmFyIGFsbCA9IF9mb3JFYWNoTmFtZShwb3NpdGlvbkFuZFNjYWxlICsgXCIsXCIgKyByb3RhdGlvbiArIFwiLFwiICsgb3RoZXJzLCBmdW5jdGlvbiAobmFtZSkge1xuICAgIF90cmFuc2Zvcm1Qcm9wc1tuYW1lXSA9IDE7XG4gIH0pO1xuXG4gIF9mb3JFYWNoTmFtZShyb3RhdGlvbiwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBfY29uZmlnLnVuaXRzW25hbWVdID0gXCJkZWdcIjtcbiAgICBfcm90YXRpb25hbFByb3BlcnRpZXNbbmFtZV0gPSAxO1xuICB9KTtcblxuICBfcHJvcGVydHlBbGlhc2VzW2FsbFsxM11dID0gcG9zaXRpb25BbmRTY2FsZSArIFwiLFwiICsgcm90YXRpb247XG5cbiAgX2ZvckVhY2hOYW1lKGFsaWFzZXMsIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdmFyIHNwbGl0ID0gbmFtZS5zcGxpdChcIjpcIik7XG4gICAgX3Byb3BlcnR5QWxpYXNlc1tzcGxpdFsxXV0gPSBhbGxbc3BsaXRbMF1dO1xuICB9KTtcbn0pKFwieCx5LHosc2NhbGUsc2NhbGVYLHNjYWxlWSx4UGVyY2VudCx5UGVyY2VudFwiLCBcInJvdGF0aW9uLHJvdGF0aW9uWCxyb3RhdGlvblksc2tld1gsc2tld1lcIiwgXCJ0cmFuc2Zvcm0sdHJhbnNmb3JtT3JpZ2luLHN2Z09yaWdpbixmb3JjZTNELHNtb290aE9yaWdpbix0cmFuc2Zvcm1QZXJzcGVjdGl2ZVwiLCBcIjA6dHJhbnNsYXRlWCwxOnRyYW5zbGF0ZVksMjp0cmFuc2xhdGVaLDg6cm90YXRlLDg6cm90YXRpb25aLDg6cm90YXRlWiw5OnJvdGF0ZVgsMTA6cm90YXRlWVwiKTtcblxuX2ZvckVhY2hOYW1lKFwieCx5LHosdG9wLHJpZ2h0LGJvdHRvbSxsZWZ0LHdpZHRoLGhlaWdodCxmb250U2l6ZSxwYWRkaW5nLG1hcmdpbixwZXJzcGVjdGl2ZVwiLCBmdW5jdGlvbiAobmFtZSkge1xuICBfY29uZmlnLnVuaXRzW25hbWVdID0gXCJweFwiO1xufSk7XG5cbmdzYXAucmVnaXN0ZXJQbHVnaW4oQ1NTUGx1Z2luKTtcbmV4cG9ydCB7IENTU1BsdWdpbiBhcyBkZWZhdWx0LCBfZ2V0QkJveCwgX2NyZWF0ZUVsZW1lbnQsIF9jaGVja1Byb3BQcmVmaXggYXMgY2hlY2tQcmVmaXggfTsiLCJpbXBvcnQgeyBnc2FwLCBQb3dlcjAsIFBvd2VyMSwgUG93ZXIyLCBQb3dlcjMsIFBvd2VyNCwgTGluZWFyLCBRdWFkLCBDdWJpYywgUXVhcnQsIFF1aW50LCBTdHJvbmcsIEVsYXN0aWMsIEJhY2ssIFN0ZXBwZWRFYXNlLCBCb3VuY2UsIFNpbmUsIEV4cG8sIENpcmMsIFR3ZWVuTGl0ZSwgVGltZWxpbmVMaXRlLCBUaW1lbGluZU1heCB9IGZyb20gXCIuL2dzYXAtY29yZS5qc1wiO1xuaW1wb3J0IHsgQ1NTUGx1Z2luIH0gZnJvbSBcIi4vQ1NTUGx1Z2luLmpzXCI7XG52YXIgZ3NhcFdpdGhDU1MgPSBnc2FwLnJlZ2lzdGVyUGx1Z2luKENTU1BsdWdpbikgfHwgZ3NhcCxcbiAgICAvLyB0byBwcm90ZWN0IGZyb20gdHJlZSBzaGFraW5nXG5Ud2Vlbk1heFdpdGhDU1MgPSBnc2FwV2l0aENTUy5jb3JlLlR3ZWVuO1xuZXhwb3J0IHsgZ3NhcFdpdGhDU1MgYXMgZ3NhcCwgZ3NhcFdpdGhDU1MgYXMgZGVmYXVsdCwgQ1NTUGx1Z2luLCBUd2Vlbk1heFdpdGhDU1MgYXMgVHdlZW5NYXgsIFR3ZWVuTGl0ZSwgVGltZWxpbmVNYXgsIFRpbWVsaW5lTGl0ZSwgUG93ZXIwLCBQb3dlcjEsIFBvd2VyMiwgUG93ZXIzLCBQb3dlcjQsIExpbmVhciwgUXVhZCwgQ3ViaWMsIFF1YXJ0LCBRdWludCwgU3Ryb25nLCBFbGFzdGljLCBCYWNrLCBTdGVwcGVkRWFzZSwgQm91bmNlLCBTaW5lLCBFeHBvLCBDaXJjIH07IiwiZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG4vKiFcbiAqIE9ic2VydmVyIDMuMTIuNVxuICogaHR0cHM6Ly9nc2FwLmNvbVxuICpcbiAqIEBsaWNlbnNlIENvcHlyaWdodCAyMDA4LTIwMjQsIEdyZWVuU29jay4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFN1YmplY3QgdG8gdGhlIHRlcm1zIGF0IGh0dHBzOi8vZ3NhcC5jb20vc3RhbmRhcmQtbGljZW5zZSBvciBmb3JcbiAqIENsdWIgR1NBUCBtZW1iZXJzLCB0aGUgYWdyZWVtZW50IGlzc3VlZCB3aXRoIHRoYXQgbWVtYmVyc2hpcC5cbiAqIEBhdXRob3I6IEphY2sgRG95bGUsIGphY2tAZ3JlZW5zb2NrLmNvbVxuKi9cblxuLyogZXNsaW50LWRpc2FibGUgKi9cbnZhciBnc2FwLFxuICAgIF9jb3JlSW5pdHRlZCxcbiAgICBfY2xhbXAsXG4gICAgX3dpbixcbiAgICBfZG9jLFxuICAgIF9kb2NFbCxcbiAgICBfYm9keSxcbiAgICBfaXNUb3VjaCxcbiAgICBfcG9pbnRlclR5cGUsXG4gICAgU2Nyb2xsVHJpZ2dlcixcbiAgICBfcm9vdCxcbiAgICBfbm9ybWFsaXplcixcbiAgICBfZXZlbnRUeXBlcyxcbiAgICBfY29udGV4dCxcbiAgICBfZ2V0R1NBUCA9IGZ1bmN0aW9uIF9nZXRHU0FQKCkge1xuICByZXR1cm4gZ3NhcCB8fCB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIChnc2FwID0gd2luZG93LmdzYXApICYmIGdzYXAucmVnaXN0ZXJQbHVnaW4gJiYgZ3NhcDtcbn0sXG4gICAgX3N0YXJ0dXAgPSAxLFxuICAgIF9vYnNlcnZlcnMgPSBbXSxcbiAgICBfc2Nyb2xsZXJzID0gW10sXG4gICAgX3Byb3hpZXMgPSBbXSxcbiAgICBfZ2V0VGltZSA9IERhdGUubm93LFxuICAgIF9icmlkZ2UgPSBmdW5jdGlvbiBfYnJpZGdlKG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZTtcbn0sXG4gICAgX2ludGVncmF0ZSA9IGZ1bmN0aW9uIF9pbnRlZ3JhdGUoKSB7XG4gIHZhciBjb3JlID0gU2Nyb2xsVHJpZ2dlci5jb3JlLFxuICAgICAgZGF0YSA9IGNvcmUuYnJpZGdlIHx8IHt9LFxuICAgICAgc2Nyb2xsZXJzID0gY29yZS5fc2Nyb2xsZXJzLFxuICAgICAgcHJveGllcyA9IGNvcmUuX3Byb3hpZXM7XG4gIHNjcm9sbGVycy5wdXNoLmFwcGx5KHNjcm9sbGVycywgX3Njcm9sbGVycyk7XG4gIHByb3hpZXMucHVzaC5hcHBseShwcm94aWVzLCBfcHJveGllcyk7XG4gIF9zY3JvbGxlcnMgPSBzY3JvbGxlcnM7XG4gIF9wcm94aWVzID0gcHJveGllcztcblxuICBfYnJpZGdlID0gZnVuY3Rpb24gX2JyaWRnZShuYW1lLCB2YWx1ZSkge1xuICAgIHJldHVybiBkYXRhW25hbWVdKHZhbHVlKTtcbiAgfTtcbn0sXG4gICAgX2dldFByb3h5UHJvcCA9IGZ1bmN0aW9uIF9nZXRQcm94eVByb3AoZWxlbWVudCwgcHJvcGVydHkpIHtcbiAgcmV0dXJuIH5fcHJveGllcy5pbmRleE9mKGVsZW1lbnQpICYmIF9wcm94aWVzW19wcm94aWVzLmluZGV4T2YoZWxlbWVudCkgKyAxXVtwcm9wZXJ0eV07XG59LFxuICAgIF9pc1ZpZXdwb3J0ID0gZnVuY3Rpb24gX2lzVmlld3BvcnQoZWwpIHtcbiAgcmV0dXJuICEhfl9yb290LmluZGV4T2YoZWwpO1xufSxcbiAgICBfYWRkTGlzdGVuZXIgPSBmdW5jdGlvbiBfYWRkTGlzdGVuZXIoZWxlbWVudCwgdHlwZSwgZnVuYywgcGFzc2l2ZSwgY2FwdHVyZSkge1xuICByZXR1cm4gZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGZ1bmMsIHtcbiAgICBwYXNzaXZlOiBwYXNzaXZlICE9PSBmYWxzZSxcbiAgICBjYXB0dXJlOiAhIWNhcHR1cmVcbiAgfSk7XG59LFxuICAgIF9yZW1vdmVMaXN0ZW5lciA9IGZ1bmN0aW9uIF9yZW1vdmVMaXN0ZW5lcihlbGVtZW50LCB0eXBlLCBmdW5jLCBjYXB0dXJlKSB7XG4gIHJldHVybiBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgZnVuYywgISFjYXB0dXJlKTtcbn0sXG4gICAgX3Njcm9sbExlZnQgPSBcInNjcm9sbExlZnRcIixcbiAgICBfc2Nyb2xsVG9wID0gXCJzY3JvbGxUb3BcIixcbiAgICBfb25TY3JvbGwgPSBmdW5jdGlvbiBfb25TY3JvbGwoKSB7XG4gIHJldHVybiBfbm9ybWFsaXplciAmJiBfbm9ybWFsaXplci5pc1ByZXNzZWQgfHwgX3Njcm9sbGVycy5jYWNoZSsrO1xufSxcbiAgICBfc2Nyb2xsQ2FjaGVGdW5jID0gZnVuY3Rpb24gX3Njcm9sbENhY2hlRnVuYyhmLCBkb05vdENhY2hlKSB7XG4gIHZhciBjYWNoaW5nRnVuYyA9IGZ1bmN0aW9uIGNhY2hpbmdGdW5jKHZhbHVlKSB7XG4gICAgLy8gc2luY2UgcmVhZGluZyB0aGUgc2Nyb2xsVG9wL3Njcm9sbExlZnQvcGFnZU9mZnNldFkvcGFnZU9mZnNldFggY2FuIHRyaWdnZXIgYSBsYXlvdXQsIHRoaXMgZnVuY3Rpb24gYWxsb3dzIHVzIHRvIGNhY2hlIHRoZSB2YWx1ZSBzbyBpdCBvbmx5IGdldHMgcmVhZCBmcmVzaCBhZnRlciBhIFwic2Nyb2xsXCIgZXZlbnQgZmlyZXMgKG9yIHdoaWxlIHdlJ3JlIHJlZnJlc2hpbmcgYmVjYXVzZSB0aGF0IGNhbiBsZW5ndGhlbiB0aGUgcGFnZSBhbmQgYWx0ZXIgdGhlIHNjcm9sbCBwb3NpdGlvbikuIHdoZW4gXCJzb2Z0XCIgaXMgdHJ1ZSwgdGhhdCBtZWFucyBkb24ndCBhY3R1YWxseSBzZXQgdGhlIHNjcm9sbCwgYnV0IGNhY2hlIHRoZSBuZXcgdmFsdWUgaW5zdGVhZCAodXNlZnVsIGluIFNjcm9sbFNtb290aGVyKVxuICAgIGlmICh2YWx1ZSB8fCB2YWx1ZSA9PT0gMCkge1xuICAgICAgX3N0YXJ0dXAgJiYgKF93aW4uaGlzdG9yeS5zY3JvbGxSZXN0b3JhdGlvbiA9IFwibWFudWFsXCIpOyAvLyBvdGhlcndpc2UgdGhlIG5ldyBwb3NpdGlvbiB3aWxsIGdldCBvdmVyd3JpdHRlbiBieSB0aGUgYnJvd3NlciBvbmxvYWQuXG5cbiAgICAgIHZhciBpc05vcm1hbGl6aW5nID0gX25vcm1hbGl6ZXIgJiYgX25vcm1hbGl6ZXIuaXNQcmVzc2VkO1xuICAgICAgdmFsdWUgPSBjYWNoaW5nRnVuYy52ID0gTWF0aC5yb3VuZCh2YWx1ZSkgfHwgKF9ub3JtYWxpemVyICYmIF9ub3JtYWxpemVyLmlPUyA/IDEgOiAwKTsgLy9UT0RPOiBpT1MgQnVnOiBpZiB5b3UgYWxsb3cgaXQgdG8gZ28gdG8gMCwgU2FmYXJpIGNhbiBzdGFydCB0byByZXBvcnQgc3VwZXIgc3RyYW5nZSAod2lsZGx5IGluYWNjdXJhdGUpIHRvdWNoIHBvc2l0aW9ucyFcblxuICAgICAgZih2YWx1ZSk7XG4gICAgICBjYWNoaW5nRnVuYy5jYWNoZUlEID0gX3Njcm9sbGVycy5jYWNoZTtcbiAgICAgIGlzTm9ybWFsaXppbmcgJiYgX2JyaWRnZShcInNzXCIsIHZhbHVlKTsgLy8gc2V0IHNjcm9sbCAobm90aWZ5IFNjcm9sbFRyaWdnZXIgc28gaXQgY2FuIGRpc3BhdGNoIGEgXCJzY3JvbGxTdGFydFwiIGV2ZW50IGlmIG5lY2Vzc2FyeVxuICAgIH0gZWxzZSBpZiAoZG9Ob3RDYWNoZSB8fCBfc2Nyb2xsZXJzLmNhY2hlICE9PSBjYWNoaW5nRnVuYy5jYWNoZUlEIHx8IF9icmlkZ2UoXCJyZWZcIikpIHtcbiAgICAgIGNhY2hpbmdGdW5jLmNhY2hlSUQgPSBfc2Nyb2xsZXJzLmNhY2hlO1xuICAgICAgY2FjaGluZ0Z1bmMudiA9IGYoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2FjaGluZ0Z1bmMudiArIGNhY2hpbmdGdW5jLm9mZnNldDtcbiAgfTtcblxuICBjYWNoaW5nRnVuYy5vZmZzZXQgPSAwO1xuICByZXR1cm4gZiAmJiBjYWNoaW5nRnVuYztcbn0sXG4gICAgX2hvcml6b250YWwgPSB7XG4gIHM6IF9zY3JvbGxMZWZ0LFxuICBwOiBcImxlZnRcIixcbiAgcDI6IFwiTGVmdFwiLFxuICBvczogXCJyaWdodFwiLFxuICBvczI6IFwiUmlnaHRcIixcbiAgZDogXCJ3aWR0aFwiLFxuICBkMjogXCJXaWR0aFwiLFxuICBhOiBcInhcIixcbiAgc2M6IF9zY3JvbGxDYWNoZUZ1bmMoZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyBfd2luLnNjcm9sbFRvKHZhbHVlLCBfdmVydGljYWwuc2MoKSkgOiBfd2luLnBhZ2VYT2Zmc2V0IHx8IF9kb2NbX3Njcm9sbExlZnRdIHx8IF9kb2NFbFtfc2Nyb2xsTGVmdF0gfHwgX2JvZHlbX3Njcm9sbExlZnRdIHx8IDA7XG4gIH0pXG59LFxuICAgIF92ZXJ0aWNhbCA9IHtcbiAgczogX3Njcm9sbFRvcCxcbiAgcDogXCJ0b3BcIixcbiAgcDI6IFwiVG9wXCIsXG4gIG9zOiBcImJvdHRvbVwiLFxuICBvczI6IFwiQm90dG9tXCIsXG4gIGQ6IFwiaGVpZ2h0XCIsXG4gIGQyOiBcIkhlaWdodFwiLFxuICBhOiBcInlcIixcbiAgb3A6IF9ob3Jpem9udGFsLFxuICBzYzogX3Njcm9sbENhY2hlRnVuYyhmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IF93aW4uc2Nyb2xsVG8oX2hvcml6b250YWwuc2MoKSwgdmFsdWUpIDogX3dpbi5wYWdlWU9mZnNldCB8fCBfZG9jW19zY3JvbGxUb3BdIHx8IF9kb2NFbFtfc2Nyb2xsVG9wXSB8fCBfYm9keVtfc2Nyb2xsVG9wXSB8fCAwO1xuICB9KVxufSxcbiAgICBfZ2V0VGFyZ2V0ID0gZnVuY3Rpb24gX2dldFRhcmdldCh0LCBzZWxmKSB7XG4gIHJldHVybiAoc2VsZiAmJiBzZWxmLl9jdHggJiYgc2VsZi5fY3R4LnNlbGVjdG9yIHx8IGdzYXAudXRpbHMudG9BcnJheSkodClbMF0gfHwgKHR5cGVvZiB0ID09PSBcInN0cmluZ1wiICYmIGdzYXAuY29uZmlnKCkubnVsbFRhcmdldFdhcm4gIT09IGZhbHNlID8gY29uc29sZS53YXJuKFwiRWxlbWVudCBub3QgZm91bmQ6XCIsIHQpIDogbnVsbCk7XG59LFxuICAgIF9nZXRTY3JvbGxGdW5jID0gZnVuY3Rpb24gX2dldFNjcm9sbEZ1bmMoZWxlbWVudCwgX3JlZikge1xuICB2YXIgcyA9IF9yZWYucyxcbiAgICAgIHNjID0gX3JlZi5zYztcbiAgLy8gd2Ugc3RvcmUgdGhlIHNjcm9sbGVyIGZ1bmN0aW9ucyBpbiBhbiBhbHRlcm5hdGluZyBzZXF1ZW5jZWQgQXJyYXkgbGlrZSBbZWxlbWVudCwgdmVydGljYWxTY3JvbGxGdW5jLCBob3Jpem9udGFsU2Nyb2xsRnVuYywgLi4uXSBzbyB0aGF0IHdlIGNhbiBtaW5pbWl6ZSBtZW1vcnksIG1heGltaXplIHBlcmZvcm1hbmNlLCBhbmQgd2UgYWxzbyByZWNvcmQgdGhlIGxhc3QgcG9zaXRpb24gYXMgYSBcIi5yZWNcIiBwcm9wZXJ0eSBpbiBvcmRlciB0byByZXZlcnQgdG8gdGhhdCBhZnRlciByZWZyZXNoaW5nIHRvIGVuc3VyZSB0aGluZ3MgZG9uJ3Qgc2hpZnQgYXJvdW5kLlxuICBfaXNWaWV3cG9ydChlbGVtZW50KSAmJiAoZWxlbWVudCA9IF9kb2Muc2Nyb2xsaW5nRWxlbWVudCB8fCBfZG9jRWwpO1xuXG4gIHZhciBpID0gX3Njcm9sbGVycy5pbmRleE9mKGVsZW1lbnQpLFxuICAgICAgb2Zmc2V0ID0gc2MgPT09IF92ZXJ0aWNhbC5zYyA/IDEgOiAyO1xuXG4gICF+aSAmJiAoaSA9IF9zY3JvbGxlcnMucHVzaChlbGVtZW50KSAtIDEpO1xuICBfc2Nyb2xsZXJzW2kgKyBvZmZzZXRdIHx8IF9hZGRMaXN0ZW5lcihlbGVtZW50LCBcInNjcm9sbFwiLCBfb25TY3JvbGwpOyAvLyBjbGVhciB0aGUgY2FjaGUgd2hlbiBhIHNjcm9sbCBvY2N1cnNcblxuICB2YXIgcHJldiA9IF9zY3JvbGxlcnNbaSArIG9mZnNldF0sXG4gICAgICBmdW5jID0gcHJldiB8fCAoX3Njcm9sbGVyc1tpICsgb2Zmc2V0XSA9IF9zY3JvbGxDYWNoZUZ1bmMoX2dldFByb3h5UHJvcChlbGVtZW50LCBzKSwgdHJ1ZSkgfHwgKF9pc1ZpZXdwb3J0KGVsZW1lbnQpID8gc2MgOiBfc2Nyb2xsQ2FjaGVGdW5jKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gZWxlbWVudFtzXSA9IHZhbHVlIDogZWxlbWVudFtzXTtcbiAgfSkpKTtcbiAgZnVuYy50YXJnZXQgPSBlbGVtZW50O1xuICBwcmV2IHx8IChmdW5jLnNtb290aCA9IGdzYXAuZ2V0UHJvcGVydHkoZWxlbWVudCwgXCJzY3JvbGxCZWhhdmlvclwiKSA9PT0gXCJzbW9vdGhcIik7IC8vIG9ubHkgc2V0IGl0IHRoZSBmaXJzdCB0aW1lIChkb24ndCByZXNldCBldmVyeSB0aW1lIGEgc2Nyb2xsRnVuYyBpcyByZXF1ZXN0ZWQgYmVjYXVzZSBwZXJoYXBzIGl0IGhhcHBlbnMgZHVyaW5nIGEgcmVmcmVzaCgpIHdoZW4gaXQncyBkaXNhYmxlZCBpbiBTY3JvbGxUcmlnZ2VyLlxuXG4gIHJldHVybiBmdW5jO1xufSxcbiAgICBfZ2V0VmVsb2NpdHlQcm9wID0gZnVuY3Rpb24gX2dldFZlbG9jaXR5UHJvcCh2YWx1ZSwgbWluVGltZVJlZnJlc2gsIHVzZURlbHRhKSB7XG4gIHZhciB2MSA9IHZhbHVlLFxuICAgICAgdjIgPSB2YWx1ZSxcbiAgICAgIHQxID0gX2dldFRpbWUoKSxcbiAgICAgIHQyID0gdDEsXG4gICAgICBtaW4gPSBtaW5UaW1lUmVmcmVzaCB8fCA1MCxcbiAgICAgIGRyb3BUb1plcm9UaW1lID0gTWF0aC5tYXgoNTAwLCBtaW4gKiAzKSxcbiAgICAgIHVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSh2YWx1ZSwgZm9yY2UpIHtcbiAgICB2YXIgdCA9IF9nZXRUaW1lKCk7XG5cbiAgICBpZiAoZm9yY2UgfHwgdCAtIHQxID4gbWluKSB7XG4gICAgICB2MiA9IHYxO1xuICAgICAgdjEgPSB2YWx1ZTtcbiAgICAgIHQyID0gdDE7XG4gICAgICB0MSA9IHQ7XG4gICAgfSBlbHNlIGlmICh1c2VEZWx0YSkge1xuICAgICAgdjEgKz0gdmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIG5vdCB0b3RhbGx5IG5lY2Vzc2FyeSwgYnV0IG1ha2VzIGl0IGEgYml0IG1vcmUgYWNjdXJhdGUgYnkgYWRqdXN0aW5nIHRoZSB2MSB2YWx1ZSBhY2NvcmRpbmcgdG8gdGhlIG5ldyBzbG9wZS4gVGhpcyB3YXkgd2UncmUgbm90IGp1c3QgaWdub3JpbmcgdGhlIGluY29taW5nIGRhdGEuIFJlbW92aW5nIGZvciBub3cgYmVjYXVzZSBpdCBkb2Vzbid0IHNlZW0gdG8gbWFrZSBtdWNoIHByYWN0aWNhbCBkaWZmZXJlbmNlIGFuZCBpdCdzIHByb2JhYmx5IG5vdCB3b3J0aCB0aGUga2IuXG4gICAgICB2MSA9IHYyICsgKHZhbHVlIC0gdjIpIC8gKHQgLSB0MikgKiAodDEgLSB0Mik7XG4gICAgfVxuICB9LFxuICAgICAgcmVzZXQgPSBmdW5jdGlvbiByZXNldCgpIHtcbiAgICB2MiA9IHYxID0gdXNlRGVsdGEgPyAwIDogdjE7XG4gICAgdDIgPSB0MSA9IDA7XG4gIH0sXG4gICAgICBnZXRWZWxvY2l0eSA9IGZ1bmN0aW9uIGdldFZlbG9jaXR5KGxhdGVzdFZhbHVlKSB7XG4gICAgdmFyIHRPbGQgPSB0MixcbiAgICAgICAgdk9sZCA9IHYyLFxuICAgICAgICB0ID0gX2dldFRpbWUoKTtcblxuICAgIChsYXRlc3RWYWx1ZSB8fCBsYXRlc3RWYWx1ZSA9PT0gMCkgJiYgbGF0ZXN0VmFsdWUgIT09IHYxICYmIHVwZGF0ZShsYXRlc3RWYWx1ZSk7XG4gICAgcmV0dXJuIHQxID09PSB0MiB8fCB0IC0gdDIgPiBkcm9wVG9aZXJvVGltZSA/IDAgOiAodjEgKyAodXNlRGVsdGEgPyB2T2xkIDogLXZPbGQpKSAvICgodXNlRGVsdGEgPyB0IDogdDEpIC0gdE9sZCkgKiAxMDAwO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiB1cGRhdGUsXG4gICAgcmVzZXQ6IHJlc2V0LFxuICAgIGdldFZlbG9jaXR5OiBnZXRWZWxvY2l0eVxuICB9O1xufSxcbiAgICBfZ2V0RXZlbnQgPSBmdW5jdGlvbiBfZ2V0RXZlbnQoZSwgcHJldmVudERlZmF1bHQpIHtcbiAgcHJldmVudERlZmF1bHQgJiYgIWUuX2dzYXBBbGxvdyAmJiBlLnByZXZlbnREZWZhdWx0KCk7XG4gIHJldHVybiBlLmNoYW5nZWRUb3VjaGVzID8gZS5jaGFuZ2VkVG91Y2hlc1swXSA6IGU7XG59LFxuICAgIF9nZXRBYnNvbHV0ZU1heCA9IGZ1bmN0aW9uIF9nZXRBYnNvbHV0ZU1heChhKSB7XG4gIHZhciBtYXggPSBNYXRoLm1heC5hcHBseShNYXRoLCBhKSxcbiAgICAgIG1pbiA9IE1hdGgubWluLmFwcGx5KE1hdGgsIGEpO1xuICByZXR1cm4gTWF0aC5hYnMobWF4KSA+PSBNYXRoLmFicyhtaW4pID8gbWF4IDogbWluO1xufSxcbiAgICBfc2V0U2Nyb2xsVHJpZ2dlciA9IGZ1bmN0aW9uIF9zZXRTY3JvbGxUcmlnZ2VyKCkge1xuICBTY3JvbGxUcmlnZ2VyID0gZ3NhcC5jb3JlLmdsb2JhbHMoKS5TY3JvbGxUcmlnZ2VyO1xuICBTY3JvbGxUcmlnZ2VyICYmIFNjcm9sbFRyaWdnZXIuY29yZSAmJiBfaW50ZWdyYXRlKCk7XG59LFxuICAgIF9pbml0Q29yZSA9IGZ1bmN0aW9uIF9pbml0Q29yZShjb3JlKSB7XG4gIGdzYXAgPSBjb3JlIHx8IF9nZXRHU0FQKCk7XG5cbiAgaWYgKCFfY29yZUluaXR0ZWQgJiYgZ3NhcCAmJiB0eXBlb2YgZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnQuYm9keSkge1xuICAgIF93aW4gPSB3aW5kb3c7XG4gICAgX2RvYyA9IGRvY3VtZW50O1xuICAgIF9kb2NFbCA9IF9kb2MuZG9jdW1lbnRFbGVtZW50O1xuICAgIF9ib2R5ID0gX2RvYy5ib2R5O1xuICAgIF9yb290ID0gW193aW4sIF9kb2MsIF9kb2NFbCwgX2JvZHldO1xuICAgIF9jbGFtcCA9IGdzYXAudXRpbHMuY2xhbXA7XG5cbiAgICBfY29udGV4dCA9IGdzYXAuY29yZS5jb250ZXh0IHx8IGZ1bmN0aW9uICgpIHt9O1xuXG4gICAgX3BvaW50ZXJUeXBlID0gXCJvbnBvaW50ZXJlbnRlclwiIGluIF9ib2R5ID8gXCJwb2ludGVyXCIgOiBcIm1vdXNlXCI7IC8vIGlzVG91Y2ggaXMgMCBpZiBubyB0b3VjaCwgMSBpZiBPTkxZIHRvdWNoLCBhbmQgMiBpZiBpdCBjYW4gYWNjb21tb2RhdGUgdG91Y2ggYnV0IGFsc28gb3RoZXIgdHlwZXMgbGlrZSBtb3VzZS9wb2ludGVyLlxuXG4gICAgX2lzVG91Y2ggPSBPYnNlcnZlci5pc1RvdWNoID0gX3dpbi5tYXRjaE1lZGlhICYmIF93aW4ubWF0Y2hNZWRpYShcIihob3Zlcjogbm9uZSksIChwb2ludGVyOiBjb2Fyc2UpXCIpLm1hdGNoZXMgPyAxIDogXCJvbnRvdWNoc3RhcnRcIiBpbiBfd2luIHx8IG5hdmlnYXRvci5tYXhUb3VjaFBvaW50cyA+IDAgfHwgbmF2aWdhdG9yLm1zTWF4VG91Y2hQb2ludHMgPiAwID8gMiA6IDA7XG4gICAgX2V2ZW50VHlwZXMgPSBPYnNlcnZlci5ldmVudFR5cGVzID0gKFwib250b3VjaHN0YXJ0XCIgaW4gX2RvY0VsID8gXCJ0b3VjaHN0YXJ0LHRvdWNobW92ZSx0b3VjaGNhbmNlbCx0b3VjaGVuZFwiIDogIShcIm9ucG9pbnRlcmRvd25cIiBpbiBfZG9jRWwpID8gXCJtb3VzZWRvd24sbW91c2Vtb3ZlLG1vdXNldXAsbW91c2V1cFwiIDogXCJwb2ludGVyZG93bixwb2ludGVybW92ZSxwb2ludGVyY2FuY2VsLHBvaW50ZXJ1cFwiKS5zcGxpdChcIixcIik7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3N0YXJ0dXAgPSAwO1xuICAgIH0sIDUwMCk7XG5cbiAgICBfc2V0U2Nyb2xsVHJpZ2dlcigpO1xuXG4gICAgX2NvcmVJbml0dGVkID0gMTtcbiAgfVxuXG4gIHJldHVybiBfY29yZUluaXR0ZWQ7XG59O1xuXG5faG9yaXpvbnRhbC5vcCA9IF92ZXJ0aWNhbDtcbl9zY3JvbGxlcnMuY2FjaGUgPSAwO1xuZXhwb3J0IHZhciBPYnNlcnZlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIE9ic2VydmVyKHZhcnMpIHtcbiAgICB0aGlzLmluaXQodmFycyk7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gT2JzZXJ2ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5pbml0ID0gZnVuY3Rpb24gaW5pdCh2YXJzKSB7XG4gICAgX2NvcmVJbml0dGVkIHx8IF9pbml0Q29yZShnc2FwKSB8fCBjb25zb2xlLndhcm4oXCJQbGVhc2UgZ3NhcC5yZWdpc3RlclBsdWdpbihPYnNlcnZlcilcIik7XG4gICAgU2Nyb2xsVHJpZ2dlciB8fCBfc2V0U2Nyb2xsVHJpZ2dlcigpO1xuICAgIHZhciB0b2xlcmFuY2UgPSB2YXJzLnRvbGVyYW5jZSxcbiAgICAgICAgZHJhZ01pbmltdW0gPSB2YXJzLmRyYWdNaW5pbXVtLFxuICAgICAgICB0eXBlID0gdmFycy50eXBlLFxuICAgICAgICB0YXJnZXQgPSB2YXJzLnRhcmdldCxcbiAgICAgICAgbGluZUhlaWdodCA9IHZhcnMubGluZUhlaWdodCxcbiAgICAgICAgZGVib3VuY2UgPSB2YXJzLmRlYm91bmNlLFxuICAgICAgICBwcmV2ZW50RGVmYXVsdCA9IHZhcnMucHJldmVudERlZmF1bHQsXG4gICAgICAgIG9uU3RvcCA9IHZhcnMub25TdG9wLFxuICAgICAgICBvblN0b3BEZWxheSA9IHZhcnMub25TdG9wRGVsYXksXG4gICAgICAgIGlnbm9yZSA9IHZhcnMuaWdub3JlLFxuICAgICAgICB3aGVlbFNwZWVkID0gdmFycy53aGVlbFNwZWVkLFxuICAgICAgICBldmVudCA9IHZhcnMuZXZlbnQsXG4gICAgICAgIG9uRHJhZ1N0YXJ0ID0gdmFycy5vbkRyYWdTdGFydCxcbiAgICAgICAgb25EcmFnRW5kID0gdmFycy5vbkRyYWdFbmQsXG4gICAgICAgIG9uRHJhZyA9IHZhcnMub25EcmFnLFxuICAgICAgICBvblByZXNzID0gdmFycy5vblByZXNzLFxuICAgICAgICBvblJlbGVhc2UgPSB2YXJzLm9uUmVsZWFzZSxcbiAgICAgICAgb25SaWdodCA9IHZhcnMub25SaWdodCxcbiAgICAgICAgb25MZWZ0ID0gdmFycy5vbkxlZnQsXG4gICAgICAgIG9uVXAgPSB2YXJzLm9uVXAsXG4gICAgICAgIG9uRG93biA9IHZhcnMub25Eb3duLFxuICAgICAgICBvbkNoYW5nZVggPSB2YXJzLm9uQ2hhbmdlWCxcbiAgICAgICAgb25DaGFuZ2VZID0gdmFycy5vbkNoYW5nZVksXG4gICAgICAgIG9uQ2hhbmdlID0gdmFycy5vbkNoYW5nZSxcbiAgICAgICAgb25Ub2dnbGVYID0gdmFycy5vblRvZ2dsZVgsXG4gICAgICAgIG9uVG9nZ2xlWSA9IHZhcnMub25Ub2dnbGVZLFxuICAgICAgICBvbkhvdmVyID0gdmFycy5vbkhvdmVyLFxuICAgICAgICBvbkhvdmVyRW5kID0gdmFycy5vbkhvdmVyRW5kLFxuICAgICAgICBvbk1vdmUgPSB2YXJzLm9uTW92ZSxcbiAgICAgICAgaWdub3JlQ2hlY2sgPSB2YXJzLmlnbm9yZUNoZWNrLFxuICAgICAgICBpc05vcm1hbGl6ZXIgPSB2YXJzLmlzTm9ybWFsaXplcixcbiAgICAgICAgb25HZXN0dXJlU3RhcnQgPSB2YXJzLm9uR2VzdHVyZVN0YXJ0LFxuICAgICAgICBvbkdlc3R1cmVFbmQgPSB2YXJzLm9uR2VzdHVyZUVuZCxcbiAgICAgICAgb25XaGVlbCA9IHZhcnMub25XaGVlbCxcbiAgICAgICAgb25FbmFibGUgPSB2YXJzLm9uRW5hYmxlLFxuICAgICAgICBvbkRpc2FibGUgPSB2YXJzLm9uRGlzYWJsZSxcbiAgICAgICAgb25DbGljayA9IHZhcnMub25DbGljayxcbiAgICAgICAgc2Nyb2xsU3BlZWQgPSB2YXJzLnNjcm9sbFNwZWVkLFxuICAgICAgICBjYXB0dXJlID0gdmFycy5jYXB0dXJlLFxuICAgICAgICBhbGxvd0NsaWNrcyA9IHZhcnMuYWxsb3dDbGlja3MsXG4gICAgICAgIGxvY2tBeGlzID0gdmFycy5sb2NrQXhpcyxcbiAgICAgICAgb25Mb2NrQXhpcyA9IHZhcnMub25Mb2NrQXhpcztcbiAgICB0aGlzLnRhcmdldCA9IHRhcmdldCA9IF9nZXRUYXJnZXQodGFyZ2V0KSB8fCBfZG9jRWw7XG4gICAgdGhpcy52YXJzID0gdmFycztcbiAgICBpZ25vcmUgJiYgKGlnbm9yZSA9IGdzYXAudXRpbHMudG9BcnJheShpZ25vcmUpKTtcbiAgICB0b2xlcmFuY2UgPSB0b2xlcmFuY2UgfHwgMWUtOTtcbiAgICBkcmFnTWluaW11bSA9IGRyYWdNaW5pbXVtIHx8IDA7XG4gICAgd2hlZWxTcGVlZCA9IHdoZWVsU3BlZWQgfHwgMTtcbiAgICBzY3JvbGxTcGVlZCA9IHNjcm9sbFNwZWVkIHx8IDE7XG4gICAgdHlwZSA9IHR5cGUgfHwgXCJ3aGVlbCx0b3VjaCxwb2ludGVyXCI7XG4gICAgZGVib3VuY2UgPSBkZWJvdW5jZSAhPT0gZmFsc2U7XG4gICAgbGluZUhlaWdodCB8fCAobGluZUhlaWdodCA9IHBhcnNlRmxvYXQoX3dpbi5nZXRDb21wdXRlZFN0eWxlKF9ib2R5KS5saW5lSGVpZ2h0KSB8fCAyMik7IC8vIG5vdGU6IGJyb3dzZXIgbWF5IHJlcG9ydCBcIm5vcm1hbFwiLCBzbyBkZWZhdWx0IHRvIDIyLlxuXG4gICAgdmFyIGlkLFxuICAgICAgICBvblN0b3BEZWxheWVkQ2FsbCxcbiAgICAgICAgZHJhZ2dlZCxcbiAgICAgICAgbW92ZWQsXG4gICAgICAgIHdoZWVsZWQsXG4gICAgICAgIGxvY2tlZCxcbiAgICAgICAgYXhpcyxcbiAgICAgICAgc2VsZiA9IHRoaXMsXG4gICAgICAgIHByZXZEZWx0YVggPSAwLFxuICAgICAgICBwcmV2RGVsdGFZID0gMCxcbiAgICAgICAgcGFzc2l2ZSA9IHZhcnMucGFzc2l2ZSB8fCAhcHJldmVudERlZmF1bHQsXG4gICAgICAgIHNjcm9sbEZ1bmNYID0gX2dldFNjcm9sbEZ1bmModGFyZ2V0LCBfaG9yaXpvbnRhbCksXG4gICAgICAgIHNjcm9sbEZ1bmNZID0gX2dldFNjcm9sbEZ1bmModGFyZ2V0LCBfdmVydGljYWwpLFxuICAgICAgICBzY3JvbGxYID0gc2Nyb2xsRnVuY1goKSxcbiAgICAgICAgc2Nyb2xsWSA9IHNjcm9sbEZ1bmNZKCksXG4gICAgICAgIGxpbWl0VG9Ub3VjaCA9IH50eXBlLmluZGV4T2YoXCJ0b3VjaFwiKSAmJiAhfnR5cGUuaW5kZXhPZihcInBvaW50ZXJcIikgJiYgX2V2ZW50VHlwZXNbMF0gPT09IFwicG9pbnRlcmRvd25cIixcbiAgICAgICAgLy8gZm9yIGRldmljZXMgdGhhdCBhY2NvbW1vZGF0ZSBtb3VzZSBldmVudHMgYW5kIHRvdWNoIGV2ZW50cywgd2UgbmVlZCB0byBkaXN0aW5ndWlzaC5cbiAgICBpc1ZpZXdwb3J0ID0gX2lzVmlld3BvcnQodGFyZ2V0KSxcbiAgICAgICAgb3duZXJEb2MgPSB0YXJnZXQub3duZXJEb2N1bWVudCB8fCBfZG9jLFxuICAgICAgICBkZWx0YVggPSBbMCwgMCwgMF0sXG4gICAgICAgIC8vIHdoZWVsLCBzY3JvbGwsIHBvaW50ZXIvdG91Y2hcbiAgICBkZWx0YVkgPSBbMCwgMCwgMF0sXG4gICAgICAgIG9uQ2xpY2tUaW1lID0gMCxcbiAgICAgICAgY2xpY2tDYXB0dXJlID0gZnVuY3Rpb24gY2xpY2tDYXB0dXJlKCkge1xuICAgICAgcmV0dXJuIG9uQ2xpY2tUaW1lID0gX2dldFRpbWUoKTtcbiAgICB9LFxuICAgICAgICBfaWdub3JlQ2hlY2sgPSBmdW5jdGlvbiBfaWdub3JlQ2hlY2soZSwgaXNQb2ludGVyT3JUb3VjaCkge1xuICAgICAgcmV0dXJuIChzZWxmLmV2ZW50ID0gZSkgJiYgaWdub3JlICYmIH5pZ25vcmUuaW5kZXhPZihlLnRhcmdldCkgfHwgaXNQb2ludGVyT3JUb3VjaCAmJiBsaW1pdFRvVG91Y2ggJiYgZS5wb2ludGVyVHlwZSAhPT0gXCJ0b3VjaFwiIHx8IGlnbm9yZUNoZWNrICYmIGlnbm9yZUNoZWNrKGUsIGlzUG9pbnRlck9yVG91Y2gpO1xuICAgIH0sXG4gICAgICAgIG9uU3RvcEZ1bmMgPSBmdW5jdGlvbiBvblN0b3BGdW5jKCkge1xuICAgICAgc2VsZi5fdngucmVzZXQoKTtcblxuICAgICAgc2VsZi5fdnkucmVzZXQoKTtcblxuICAgICAgb25TdG9wRGVsYXllZENhbGwucGF1c2UoKTtcbiAgICAgIG9uU3RvcCAmJiBvblN0b3Aoc2VsZik7XG4gICAgfSxcbiAgICAgICAgdXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgICAgdmFyIGR4ID0gc2VsZi5kZWx0YVggPSBfZ2V0QWJzb2x1dGVNYXgoZGVsdGFYKSxcbiAgICAgICAgICBkeSA9IHNlbGYuZGVsdGFZID0gX2dldEFic29sdXRlTWF4KGRlbHRhWSksXG4gICAgICAgICAgY2hhbmdlZFggPSBNYXRoLmFicyhkeCkgPj0gdG9sZXJhbmNlLFxuICAgICAgICAgIGNoYW5nZWRZID0gTWF0aC5hYnMoZHkpID49IHRvbGVyYW5jZTtcblxuICAgICAgb25DaGFuZ2UgJiYgKGNoYW5nZWRYIHx8IGNoYW5nZWRZKSAmJiBvbkNoYW5nZShzZWxmLCBkeCwgZHksIGRlbHRhWCwgZGVsdGFZKTsgLy8gaW4gU2Nyb2xsVHJpZ2dlci5ub3JtYWxpemVTY3JvbGwoKSwgd2UgbmVlZCB0byBrbm93IGlmIGl0IHdhcyB0b3VjaC9wb2ludGVyIHNvIHdlIG5lZWQgYWNjZXNzIHRvIHRoZSBkZWx0YVgvZGVsdGFZIEFycmF5cyBiZWZvcmUgd2UgY2xlYXIgdGhlbSBvdXQuXG5cbiAgICAgIGlmIChjaGFuZ2VkWCkge1xuICAgICAgICBvblJpZ2h0ICYmIHNlbGYuZGVsdGFYID4gMCAmJiBvblJpZ2h0KHNlbGYpO1xuICAgICAgICBvbkxlZnQgJiYgc2VsZi5kZWx0YVggPCAwICYmIG9uTGVmdChzZWxmKTtcbiAgICAgICAgb25DaGFuZ2VYICYmIG9uQ2hhbmdlWChzZWxmKTtcbiAgICAgICAgb25Ub2dnbGVYICYmIHNlbGYuZGVsdGFYIDwgMCAhPT0gcHJldkRlbHRhWCA8IDAgJiYgb25Ub2dnbGVYKHNlbGYpO1xuICAgICAgICBwcmV2RGVsdGFYID0gc2VsZi5kZWx0YVg7XG4gICAgICAgIGRlbHRhWFswXSA9IGRlbHRhWFsxXSA9IGRlbHRhWFsyXSA9IDA7XG4gICAgICB9XG5cbiAgICAgIGlmIChjaGFuZ2VkWSkge1xuICAgICAgICBvbkRvd24gJiYgc2VsZi5kZWx0YVkgPiAwICYmIG9uRG93bihzZWxmKTtcbiAgICAgICAgb25VcCAmJiBzZWxmLmRlbHRhWSA8IDAgJiYgb25VcChzZWxmKTtcbiAgICAgICAgb25DaGFuZ2VZICYmIG9uQ2hhbmdlWShzZWxmKTtcbiAgICAgICAgb25Ub2dnbGVZICYmIHNlbGYuZGVsdGFZIDwgMCAhPT0gcHJldkRlbHRhWSA8IDAgJiYgb25Ub2dnbGVZKHNlbGYpO1xuICAgICAgICBwcmV2RGVsdGFZID0gc2VsZi5kZWx0YVk7XG4gICAgICAgIGRlbHRhWVswXSA9IGRlbHRhWVsxXSA9IGRlbHRhWVsyXSA9IDA7XG4gICAgICB9XG5cbiAgICAgIGlmIChtb3ZlZCB8fCBkcmFnZ2VkKSB7XG4gICAgICAgIG9uTW92ZSAmJiBvbk1vdmUoc2VsZik7XG5cbiAgICAgICAgaWYgKGRyYWdnZWQpIHtcbiAgICAgICAgICBvbkRyYWcoc2VsZik7XG4gICAgICAgICAgZHJhZ2dlZCA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgbW92ZWQgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgbG9ja2VkICYmICEobG9ja2VkID0gZmFsc2UpICYmIG9uTG9ja0F4aXMgJiYgb25Mb2NrQXhpcyhzZWxmKTtcblxuICAgICAgaWYgKHdoZWVsZWQpIHtcbiAgICAgICAgb25XaGVlbChzZWxmKTtcbiAgICAgICAgd2hlZWxlZCA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZCA9IDA7XG4gICAgfSxcbiAgICAgICAgb25EZWx0YSA9IGZ1bmN0aW9uIG9uRGVsdGEoeCwgeSwgaW5kZXgpIHtcbiAgICAgIGRlbHRhWFtpbmRleF0gKz0geDtcbiAgICAgIGRlbHRhWVtpbmRleF0gKz0geTtcblxuICAgICAgc2VsZi5fdngudXBkYXRlKHgpO1xuXG4gICAgICBzZWxmLl92eS51cGRhdGUoeSk7XG5cbiAgICAgIGRlYm91bmNlID8gaWQgfHwgKGlkID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHVwZGF0ZSkpIDogdXBkYXRlKCk7XG4gICAgfSxcbiAgICAgICAgb25Ub3VjaE9yUG9pbnRlckRlbHRhID0gZnVuY3Rpb24gb25Ub3VjaE9yUG9pbnRlckRlbHRhKHgsIHkpIHtcbiAgICAgIGlmIChsb2NrQXhpcyAmJiAhYXhpcykge1xuICAgICAgICBzZWxmLmF4aXMgPSBheGlzID0gTWF0aC5hYnMoeCkgPiBNYXRoLmFicyh5KSA/IFwieFwiIDogXCJ5XCI7XG4gICAgICAgIGxvY2tlZCA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChheGlzICE9PSBcInlcIikge1xuICAgICAgICBkZWx0YVhbMl0gKz0geDtcblxuICAgICAgICBzZWxmLl92eC51cGRhdGUoeCwgdHJ1ZSk7IC8vIHVwZGF0ZSB0aGUgdmVsb2NpdHkgYXMgZnJlcXVlbnRseSBhcyBwb3NzaWJsZSBpbnN0ZWFkIG9mIGluIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gc28gdGhhdCB2ZXJ5IHF1aWNrIHRvdWNoLXNjcm9sbHMgKGZsaWNrcykgZmVlbCBuYXR1cmFsLiBJZiBpdCdzIHRoZSBtb3VzZS90b3VjaC9wb2ludGVyLCBmb3JjZSBpdCBzbyB0aGF0IHdlIGdldCBzbmFwcHkvYWNjdXJhdGUgbW9tZW50dW0gc2Nyb2xsLlxuXG4gICAgICB9XG5cbiAgICAgIGlmIChheGlzICE9PSBcInhcIikge1xuICAgICAgICBkZWx0YVlbMl0gKz0geTtcblxuICAgICAgICBzZWxmLl92eS51cGRhdGUoeSwgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIGRlYm91bmNlID8gaWQgfHwgKGlkID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHVwZGF0ZSkpIDogdXBkYXRlKCk7XG4gICAgfSxcbiAgICAgICAgX29uRHJhZyA9IGZ1bmN0aW9uIF9vbkRyYWcoZSkge1xuICAgICAgaWYgKF9pZ25vcmVDaGVjayhlLCAxKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGUgPSBfZ2V0RXZlbnQoZSwgcHJldmVudERlZmF1bHQpO1xuICAgICAgdmFyIHggPSBlLmNsaWVudFgsXG4gICAgICAgICAgeSA9IGUuY2xpZW50WSxcbiAgICAgICAgICBkeCA9IHggLSBzZWxmLngsXG4gICAgICAgICAgZHkgPSB5IC0gc2VsZi55LFxuICAgICAgICAgIGlzRHJhZ2dpbmcgPSBzZWxmLmlzRHJhZ2dpbmc7XG4gICAgICBzZWxmLnggPSB4O1xuICAgICAgc2VsZi55ID0geTtcblxuICAgICAgaWYgKGlzRHJhZ2dpbmcgfHwgTWF0aC5hYnMoc2VsZi5zdGFydFggLSB4KSA+PSBkcmFnTWluaW11bSB8fCBNYXRoLmFicyhzZWxmLnN0YXJ0WSAtIHkpID49IGRyYWdNaW5pbXVtKSB7XG4gICAgICAgIG9uRHJhZyAmJiAoZHJhZ2dlZCA9IHRydWUpO1xuICAgICAgICBpc0RyYWdnaW5nIHx8IChzZWxmLmlzRHJhZ2dpbmcgPSB0cnVlKTtcbiAgICAgICAgb25Ub3VjaE9yUG9pbnRlckRlbHRhKGR4LCBkeSk7XG4gICAgICAgIGlzRHJhZ2dpbmcgfHwgb25EcmFnU3RhcnQgJiYgb25EcmFnU3RhcnQoc2VsZik7XG4gICAgICB9XG4gICAgfSxcbiAgICAgICAgX29uUHJlc3MgPSBzZWxmLm9uUHJlc3MgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgaWYgKF9pZ25vcmVDaGVjayhlLCAxKSB8fCBlICYmIGUuYnV0dG9uKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgc2VsZi5heGlzID0gYXhpcyA9IG51bGw7XG4gICAgICBvblN0b3BEZWxheWVkQ2FsbC5wYXVzZSgpO1xuICAgICAgc2VsZi5pc1ByZXNzZWQgPSB0cnVlO1xuICAgICAgZSA9IF9nZXRFdmVudChlKTsgLy8gbm90ZTogbWF5IG5lZWQgdG8gcHJldmVudERlZmF1bHQoPykgV29uJ3Qgc2lkZS1zY3JvbGwgb24gaU9TIFNhZmFyaSBpZiB3ZSBkbywgdGhvdWdoLlxuXG4gICAgICBwcmV2RGVsdGFYID0gcHJldkRlbHRhWSA9IDA7XG4gICAgICBzZWxmLnN0YXJ0WCA9IHNlbGYueCA9IGUuY2xpZW50WDtcbiAgICAgIHNlbGYuc3RhcnRZID0gc2VsZi55ID0gZS5jbGllbnRZO1xuXG4gICAgICBzZWxmLl92eC5yZXNldCgpOyAvLyBvdGhlcndpc2UgdGhlIHQyIG1heSBiZSBzdGFsZSBpZiB0aGUgdXNlciB0b3VjaGVzIGFuZCBmbGlja3Mgc3VwZXIgZmFzdCBhbmQgcmVsZWFzZXMgaW4gbGVzcyB0aGFuIDIgcmVxdWVzdEFuaW1hdGlvbkZyYW1lIHRpY2tzLCBjYXVzaW5nIHZlbG9jaXR5IHRvIGJlIDAuXG5cblxuICAgICAgc2VsZi5fdnkucmVzZXQoKTtcblxuICAgICAgX2FkZExpc3RlbmVyKGlzTm9ybWFsaXplciA/IHRhcmdldCA6IG93bmVyRG9jLCBfZXZlbnRUeXBlc1sxXSwgX29uRHJhZywgcGFzc2l2ZSwgdHJ1ZSk7XG5cbiAgICAgIHNlbGYuZGVsdGFYID0gc2VsZi5kZWx0YVkgPSAwO1xuICAgICAgb25QcmVzcyAmJiBvblByZXNzKHNlbGYpO1xuICAgIH0sXG4gICAgICAgIF9vblJlbGVhc2UgPSBzZWxmLm9uUmVsZWFzZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoX2lnbm9yZUNoZWNrKGUsIDEpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgX3JlbW92ZUxpc3RlbmVyKGlzTm9ybWFsaXplciA/IHRhcmdldCA6IG93bmVyRG9jLCBfZXZlbnRUeXBlc1sxXSwgX29uRHJhZywgdHJ1ZSk7XG5cbiAgICAgIHZhciBpc1RyYWNraW5nRHJhZyA9ICFpc05hTihzZWxmLnkgLSBzZWxmLnN0YXJ0WSksXG4gICAgICAgICAgd2FzRHJhZ2dpbmcgPSBzZWxmLmlzRHJhZ2dpbmcsXG4gICAgICAgICAgaXNEcmFnTm90Q2xpY2sgPSB3YXNEcmFnZ2luZyAmJiAoTWF0aC5hYnMoc2VsZi54IC0gc2VsZi5zdGFydFgpID4gMyB8fCBNYXRoLmFicyhzZWxmLnkgLSBzZWxmLnN0YXJ0WSkgPiAzKSxcbiAgICAgICAgICAvLyBzb21lIHRvdWNoIGRldmljZXMgbmVlZCBzb21lIHdpZ2dsZSByb29tIGluIHRlcm1zIG9mIHNlbnNpbmcgY2xpY2tzIC0gdGhlIGZpbmdlciBtYXkgbW92ZSBhIGZldyBwaXhlbHMuXG4gICAgICBldmVudERhdGEgPSBfZ2V0RXZlbnQoZSk7XG5cbiAgICAgIGlmICghaXNEcmFnTm90Q2xpY2sgJiYgaXNUcmFja2luZ0RyYWcpIHtcbiAgICAgICAgc2VsZi5fdngucmVzZXQoKTtcblxuICAgICAgICBzZWxmLl92eS5yZXNldCgpOyAvL2lmIChwcmV2ZW50RGVmYXVsdCAmJiBhbGxvd0NsaWNrcyAmJiBzZWxmLmlzUHJlc3NlZCkgeyAvLyBjaGVjayBpc1ByZXNzZWQgYmVjYXVzZSBpbiBhIHJhcmUgZWRnZSBjYXNlLCB0aGUgaW5wdXRPYnNlcnZlciBpbiBTY3JvbGxUcmlnZ2VyIG1heSBzdG9wUHJvcGFnYXRpb24oKSBvbiB0aGUgcHJlc3MvZHJhZywgc28gdGhlIG9uUmVsZWFzZSBtYXkgZ2V0IGZpcmVkIHdpdGhvdXQgdGhlIG9uUHJlc3Mvb25EcmFnIGV2ZXIgZ2V0dGluZyBjYWxsZWQsIHRodXMgaXQgY291bGQgdHJpZ2dlciBhIGNsaWNrIHRvIG9jY3VyIG9uIGEgbGluayBhZnRlciBzY3JvbGwtZHJhZ2dpbmcgaXQuXG5cblxuICAgICAgICBpZiAocHJldmVudERlZmF1bHQgJiYgYWxsb3dDbGlja3MpIHtcbiAgICAgICAgICBnc2FwLmRlbGF5ZWRDYWxsKDAuMDgsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIHNvbWUgYnJvd3NlcnMgKGxpa2UgRmlyZWZveCkgd29uJ3QgdHJ1c3Qgc2NyaXB0LWdlbmVyYXRlZCBjbGlja3MsIHNvIGlmIHRoZSB1c2VyIHRyaWVzIHRvIGNsaWNrIG9uIGEgdmlkZW8gdG8gcGxheSBpdCwgZm9yIGV4YW1wbGUsIGl0IHNpbXBseSB3b24ndCB3b3JrLiBTaW5jZSBhIHJlZ3VsYXIgXCJjbGlja1wiIGV2ZW50IHdpbGwgbW9zdCBsaWtlbHkgYmUgZ2VuZXJhdGVkIGFueXdheSAob25lIHRoYXQgaGFzIGl0cyBpc1RydXN0ZWQgZmxhZyBzZXQgdG8gdHJ1ZSksIHdlIG11c3Qgc2xpZ2h0bHkgZGVsYXkgb3VyIHNjcmlwdC1nZW5lcmF0ZWQgY2xpY2sgc28gdGhhdCB0aGUgXCJyZWFsXCIvdHJ1c3RlZCBvbmUgaXMgcHJpb3JpdGl6ZWQuIFJlbWVtYmVyLCB3aGVuIHRoZXJlIGFyZSBkdXBsaWNhdGUgZXZlbnRzIGluIHF1aWNrIHN1Y2Nlc3Npb24sIHdlIHN1cHByZXNzIGFsbCBidXQgdGhlIGZpcnN0IG9uZS4gU29tZSBicm93c2VycyBkb24ndCBldmVuIHRyaWdnZXIgdGhlIFwicmVhbFwiIG9uZSBhdCBhbGwsIHNvIG91ciBzeW50aGV0aWMgb25lIGlzIGEgc2FmZXR5IHZhbHZlIHRoYXQgZW5zdXJlcyB0aGF0IG5vIG1hdHRlciB3aGF0LCBhIGNsaWNrIGV2ZW50IGRvZXMgZ2V0IGRpc3BhdGNoZWQuXG4gICAgICAgICAgICBpZiAoX2dldFRpbWUoKSAtIG9uQ2xpY2tUaW1lID4gMzAwICYmICFlLmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgICAgICAgaWYgKGUudGFyZ2V0LmNsaWNrKSB7XG4gICAgICAgICAgICAgICAgLy9zb21lIGJyb3dzZXJzIChsaWtlIG1vYmlsZSBTYWZhcmkpIGRvbid0IHByb3Blcmx5IHRyaWdnZXIgdGhlIGNsaWNrIGV2ZW50XG4gICAgICAgICAgICAgICAgZS50YXJnZXQuY2xpY2soKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChvd25lckRvYy5jcmVhdGVFdmVudCkge1xuICAgICAgICAgICAgICAgIHZhciBzeW50aGV0aWNFdmVudCA9IG93bmVyRG9jLmNyZWF0ZUV2ZW50KFwiTW91c2VFdmVudHNcIik7XG4gICAgICAgICAgICAgICAgc3ludGhldGljRXZlbnQuaW5pdE1vdXNlRXZlbnQoXCJjbGlja1wiLCB0cnVlLCB0cnVlLCBfd2luLCAxLCBldmVudERhdGEuc2NyZWVuWCwgZXZlbnREYXRhLnNjcmVlblksIGV2ZW50RGF0YS5jbGllbnRYLCBldmVudERhdGEuY2xpZW50WSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDAsIG51bGwpO1xuICAgICAgICAgICAgICAgIGUudGFyZ2V0LmRpc3BhdGNoRXZlbnQoc3ludGhldGljRXZlbnQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc2VsZi5pc0RyYWdnaW5nID0gc2VsZi5pc0dlc3R1cmluZyA9IHNlbGYuaXNQcmVzc2VkID0gZmFsc2U7XG4gICAgICBvblN0b3AgJiYgd2FzRHJhZ2dpbmcgJiYgIWlzTm9ybWFsaXplciAmJiBvblN0b3BEZWxheWVkQ2FsbC5yZXN0YXJ0KHRydWUpO1xuICAgICAgb25EcmFnRW5kICYmIHdhc0RyYWdnaW5nICYmIG9uRHJhZ0VuZChzZWxmKTtcbiAgICAgIG9uUmVsZWFzZSAmJiBvblJlbGVhc2Uoc2VsZiwgaXNEcmFnTm90Q2xpY2spO1xuICAgIH0sXG4gICAgICAgIF9vbkdlc3R1cmVTdGFydCA9IGZ1bmN0aW9uIF9vbkdlc3R1cmVTdGFydChlKSB7XG4gICAgICByZXR1cm4gZS50b3VjaGVzICYmIGUudG91Y2hlcy5sZW5ndGggPiAxICYmIChzZWxmLmlzR2VzdHVyaW5nID0gdHJ1ZSkgJiYgb25HZXN0dXJlU3RhcnQoZSwgc2VsZi5pc0RyYWdnaW5nKTtcbiAgICB9LFxuICAgICAgICBfb25HZXN0dXJlRW5kID0gZnVuY3Rpb24gX29uR2VzdHVyZUVuZCgpIHtcbiAgICAgIHJldHVybiAoc2VsZi5pc0dlc3R1cmluZyA9IGZhbHNlKSB8fCBvbkdlc3R1cmVFbmQoc2VsZik7XG4gICAgfSxcbiAgICAgICAgb25TY3JvbGwgPSBmdW5jdGlvbiBvblNjcm9sbChlKSB7XG4gICAgICBpZiAoX2lnbm9yZUNoZWNrKGUpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHggPSBzY3JvbGxGdW5jWCgpLFxuICAgICAgICAgIHkgPSBzY3JvbGxGdW5jWSgpO1xuICAgICAgb25EZWx0YSgoeCAtIHNjcm9sbFgpICogc2Nyb2xsU3BlZWQsICh5IC0gc2Nyb2xsWSkgKiBzY3JvbGxTcGVlZCwgMSk7XG4gICAgICBzY3JvbGxYID0geDtcbiAgICAgIHNjcm9sbFkgPSB5O1xuICAgICAgb25TdG9wICYmIG9uU3RvcERlbGF5ZWRDYWxsLnJlc3RhcnQodHJ1ZSk7XG4gICAgfSxcbiAgICAgICAgX29uV2hlZWwgPSBmdW5jdGlvbiBfb25XaGVlbChlKSB7XG4gICAgICBpZiAoX2lnbm9yZUNoZWNrKGUpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZSA9IF9nZXRFdmVudChlLCBwcmV2ZW50RGVmYXVsdCk7XG4gICAgICBvbldoZWVsICYmICh3aGVlbGVkID0gdHJ1ZSk7XG4gICAgICB2YXIgbXVsdGlwbGllciA9IChlLmRlbHRhTW9kZSA9PT0gMSA/IGxpbmVIZWlnaHQgOiBlLmRlbHRhTW9kZSA9PT0gMiA/IF93aW4uaW5uZXJIZWlnaHQgOiAxKSAqIHdoZWVsU3BlZWQ7XG4gICAgICBvbkRlbHRhKGUuZGVsdGFYICogbXVsdGlwbGllciwgZS5kZWx0YVkgKiBtdWx0aXBsaWVyLCAwKTtcbiAgICAgIG9uU3RvcCAmJiAhaXNOb3JtYWxpemVyICYmIG9uU3RvcERlbGF5ZWRDYWxsLnJlc3RhcnQodHJ1ZSk7XG4gICAgfSxcbiAgICAgICAgX29uTW92ZSA9IGZ1bmN0aW9uIF9vbk1vdmUoZSkge1xuICAgICAgaWYgKF9pZ25vcmVDaGVjayhlKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciB4ID0gZS5jbGllbnRYLFxuICAgICAgICAgIHkgPSBlLmNsaWVudFksXG4gICAgICAgICAgZHggPSB4IC0gc2VsZi54LFxuICAgICAgICAgIGR5ID0geSAtIHNlbGYueTtcbiAgICAgIHNlbGYueCA9IHg7XG4gICAgICBzZWxmLnkgPSB5O1xuICAgICAgbW92ZWQgPSB0cnVlO1xuICAgICAgb25TdG9wICYmIG9uU3RvcERlbGF5ZWRDYWxsLnJlc3RhcnQodHJ1ZSk7XG4gICAgICAoZHggfHwgZHkpICYmIG9uVG91Y2hPclBvaW50ZXJEZWx0YShkeCwgZHkpO1xuICAgIH0sXG4gICAgICAgIF9vbkhvdmVyID0gZnVuY3Rpb24gX29uSG92ZXIoZSkge1xuICAgICAgc2VsZi5ldmVudCA9IGU7XG4gICAgICBvbkhvdmVyKHNlbGYpO1xuICAgIH0sXG4gICAgICAgIF9vbkhvdmVyRW5kID0gZnVuY3Rpb24gX29uSG92ZXJFbmQoZSkge1xuICAgICAgc2VsZi5ldmVudCA9IGU7XG4gICAgICBvbkhvdmVyRW5kKHNlbGYpO1xuICAgIH0sXG4gICAgICAgIF9vbkNsaWNrID0gZnVuY3Rpb24gX29uQ2xpY2soZSkge1xuICAgICAgcmV0dXJuIF9pZ25vcmVDaGVjayhlKSB8fCBfZ2V0RXZlbnQoZSwgcHJldmVudERlZmF1bHQpICYmIG9uQ2xpY2soc2VsZik7XG4gICAgfTtcblxuICAgIG9uU3RvcERlbGF5ZWRDYWxsID0gc2VsZi5fZGMgPSBnc2FwLmRlbGF5ZWRDYWxsKG9uU3RvcERlbGF5IHx8IDAuMjUsIG9uU3RvcEZ1bmMpLnBhdXNlKCk7XG4gICAgc2VsZi5kZWx0YVggPSBzZWxmLmRlbHRhWSA9IDA7XG4gICAgc2VsZi5fdnggPSBfZ2V0VmVsb2NpdHlQcm9wKDAsIDUwLCB0cnVlKTtcbiAgICBzZWxmLl92eSA9IF9nZXRWZWxvY2l0eVByb3AoMCwgNTAsIHRydWUpO1xuICAgIHNlbGYuc2Nyb2xsWCA9IHNjcm9sbEZ1bmNYO1xuICAgIHNlbGYuc2Nyb2xsWSA9IHNjcm9sbEZ1bmNZO1xuICAgIHNlbGYuaXNEcmFnZ2luZyA9IHNlbGYuaXNHZXN0dXJpbmcgPSBzZWxmLmlzUHJlc3NlZCA9IGZhbHNlO1xuXG4gICAgX2NvbnRleHQodGhpcyk7XG5cbiAgICBzZWxmLmVuYWJsZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoIXNlbGYuaXNFbmFibGVkKSB7XG4gICAgICAgIF9hZGRMaXN0ZW5lcihpc1ZpZXdwb3J0ID8gb3duZXJEb2MgOiB0YXJnZXQsIFwic2Nyb2xsXCIsIF9vblNjcm9sbCk7XG5cbiAgICAgICAgdHlwZS5pbmRleE9mKFwic2Nyb2xsXCIpID49IDAgJiYgX2FkZExpc3RlbmVyKGlzVmlld3BvcnQgPyBvd25lckRvYyA6IHRhcmdldCwgXCJzY3JvbGxcIiwgb25TY3JvbGwsIHBhc3NpdmUsIGNhcHR1cmUpO1xuICAgICAgICB0eXBlLmluZGV4T2YoXCJ3aGVlbFwiKSA+PSAwICYmIF9hZGRMaXN0ZW5lcih0YXJnZXQsIFwid2hlZWxcIiwgX29uV2hlZWwsIHBhc3NpdmUsIGNhcHR1cmUpO1xuXG4gICAgICAgIGlmICh0eXBlLmluZGV4T2YoXCJ0b3VjaFwiKSA+PSAwICYmIF9pc1RvdWNoIHx8IHR5cGUuaW5kZXhPZihcInBvaW50ZXJcIikgPj0gMCkge1xuICAgICAgICAgIF9hZGRMaXN0ZW5lcih0YXJnZXQsIF9ldmVudFR5cGVzWzBdLCBfb25QcmVzcywgcGFzc2l2ZSwgY2FwdHVyZSk7XG5cbiAgICAgICAgICBfYWRkTGlzdGVuZXIob3duZXJEb2MsIF9ldmVudFR5cGVzWzJdLCBfb25SZWxlYXNlKTtcblxuICAgICAgICAgIF9hZGRMaXN0ZW5lcihvd25lckRvYywgX2V2ZW50VHlwZXNbM10sIF9vblJlbGVhc2UpO1xuXG4gICAgICAgICAgYWxsb3dDbGlja3MgJiYgX2FkZExpc3RlbmVyKHRhcmdldCwgXCJjbGlja1wiLCBjbGlja0NhcHR1cmUsIHRydWUsIHRydWUpO1xuICAgICAgICAgIG9uQ2xpY2sgJiYgX2FkZExpc3RlbmVyKHRhcmdldCwgXCJjbGlja1wiLCBfb25DbGljayk7XG4gICAgICAgICAgb25HZXN0dXJlU3RhcnQgJiYgX2FkZExpc3RlbmVyKG93bmVyRG9jLCBcImdlc3R1cmVzdGFydFwiLCBfb25HZXN0dXJlU3RhcnQpO1xuICAgICAgICAgIG9uR2VzdHVyZUVuZCAmJiBfYWRkTGlzdGVuZXIob3duZXJEb2MsIFwiZ2VzdHVyZWVuZFwiLCBfb25HZXN0dXJlRW5kKTtcbiAgICAgICAgICBvbkhvdmVyICYmIF9hZGRMaXN0ZW5lcih0YXJnZXQsIF9wb2ludGVyVHlwZSArIFwiZW50ZXJcIiwgX29uSG92ZXIpO1xuICAgICAgICAgIG9uSG92ZXJFbmQgJiYgX2FkZExpc3RlbmVyKHRhcmdldCwgX3BvaW50ZXJUeXBlICsgXCJsZWF2ZVwiLCBfb25Ib3ZlckVuZCk7XG4gICAgICAgICAgb25Nb3ZlICYmIF9hZGRMaXN0ZW5lcih0YXJnZXQsIF9wb2ludGVyVHlwZSArIFwibW92ZVwiLCBfb25Nb3ZlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNlbGYuaXNFbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgZSAmJiBlLnR5cGUgJiYgX29uUHJlc3MoZSk7XG4gICAgICAgIG9uRW5hYmxlICYmIG9uRW5hYmxlKHNlbGYpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9O1xuXG4gICAgc2VsZi5kaXNhYmxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHNlbGYuaXNFbmFibGVkKSB7XG4gICAgICAgIC8vIG9ubHkgcmVtb3ZlIHRoZSBfb25TY3JvbGwgbGlzdGVuZXIgaWYgdGhlcmUgYXJlbid0IGFueSBvdGhlcnMgdGhhdCByZWx5IG9uIHRoZSBmdW5jdGlvbmFsaXR5LlxuICAgICAgICBfb2JzZXJ2ZXJzLmZpbHRlcihmdW5jdGlvbiAobykge1xuICAgICAgICAgIHJldHVybiBvICE9PSBzZWxmICYmIF9pc1ZpZXdwb3J0KG8udGFyZ2V0KTtcbiAgICAgICAgfSkubGVuZ3RoIHx8IF9yZW1vdmVMaXN0ZW5lcihpc1ZpZXdwb3J0ID8gb3duZXJEb2MgOiB0YXJnZXQsIFwic2Nyb2xsXCIsIF9vblNjcm9sbCk7XG5cbiAgICAgICAgaWYgKHNlbGYuaXNQcmVzc2VkKSB7XG4gICAgICAgICAgc2VsZi5fdngucmVzZXQoKTtcblxuICAgICAgICAgIHNlbGYuX3Z5LnJlc2V0KCk7XG5cbiAgICAgICAgICBfcmVtb3ZlTGlzdGVuZXIoaXNOb3JtYWxpemVyID8gdGFyZ2V0IDogb3duZXJEb2MsIF9ldmVudFR5cGVzWzFdLCBfb25EcmFnLCB0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF9yZW1vdmVMaXN0ZW5lcihpc1ZpZXdwb3J0ID8gb3duZXJEb2MgOiB0YXJnZXQsIFwic2Nyb2xsXCIsIG9uU2Nyb2xsLCBjYXB0dXJlKTtcblxuICAgICAgICBfcmVtb3ZlTGlzdGVuZXIodGFyZ2V0LCBcIndoZWVsXCIsIF9vbldoZWVsLCBjYXB0dXJlKTtcblxuICAgICAgICBfcmVtb3ZlTGlzdGVuZXIodGFyZ2V0LCBfZXZlbnRUeXBlc1swXSwgX29uUHJlc3MsIGNhcHR1cmUpO1xuXG4gICAgICAgIF9yZW1vdmVMaXN0ZW5lcihvd25lckRvYywgX2V2ZW50VHlwZXNbMl0sIF9vblJlbGVhc2UpO1xuXG4gICAgICAgIF9yZW1vdmVMaXN0ZW5lcihvd25lckRvYywgX2V2ZW50VHlwZXNbM10sIF9vblJlbGVhc2UpO1xuXG4gICAgICAgIF9yZW1vdmVMaXN0ZW5lcih0YXJnZXQsIFwiY2xpY2tcIiwgY2xpY2tDYXB0dXJlLCB0cnVlKTtcblxuICAgICAgICBfcmVtb3ZlTGlzdGVuZXIodGFyZ2V0LCBcImNsaWNrXCIsIF9vbkNsaWNrKTtcblxuICAgICAgICBfcmVtb3ZlTGlzdGVuZXIob3duZXJEb2MsIFwiZ2VzdHVyZXN0YXJ0XCIsIF9vbkdlc3R1cmVTdGFydCk7XG5cbiAgICAgICAgX3JlbW92ZUxpc3RlbmVyKG93bmVyRG9jLCBcImdlc3R1cmVlbmRcIiwgX29uR2VzdHVyZUVuZCk7XG5cbiAgICAgICAgX3JlbW92ZUxpc3RlbmVyKHRhcmdldCwgX3BvaW50ZXJUeXBlICsgXCJlbnRlclwiLCBfb25Ib3Zlcik7XG5cbiAgICAgICAgX3JlbW92ZUxpc3RlbmVyKHRhcmdldCwgX3BvaW50ZXJUeXBlICsgXCJsZWF2ZVwiLCBfb25Ib3ZlckVuZCk7XG5cbiAgICAgICAgX3JlbW92ZUxpc3RlbmVyKHRhcmdldCwgX3BvaW50ZXJUeXBlICsgXCJtb3ZlXCIsIF9vbk1vdmUpO1xuXG4gICAgICAgIHNlbGYuaXNFbmFibGVkID0gc2VsZi5pc1ByZXNzZWQgPSBzZWxmLmlzRHJhZ2dpbmcgPSBmYWxzZTtcbiAgICAgICAgb25EaXNhYmxlICYmIG9uRGlzYWJsZShzZWxmKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgc2VsZi5raWxsID0gc2VsZi5yZXZlcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBzZWxmLmRpc2FibGUoKTtcblxuICAgICAgdmFyIGkgPSBfb2JzZXJ2ZXJzLmluZGV4T2Yoc2VsZik7XG5cbiAgICAgIGkgPj0gMCAmJiBfb2JzZXJ2ZXJzLnNwbGljZShpLCAxKTtcbiAgICAgIF9ub3JtYWxpemVyID09PSBzZWxmICYmIChfbm9ybWFsaXplciA9IDApO1xuICAgIH07XG5cbiAgICBfb2JzZXJ2ZXJzLnB1c2goc2VsZik7XG5cbiAgICBpc05vcm1hbGl6ZXIgJiYgX2lzVmlld3BvcnQodGFyZ2V0KSAmJiAoX25vcm1hbGl6ZXIgPSBzZWxmKTtcbiAgICBzZWxmLmVuYWJsZShldmVudCk7XG4gIH07XG5cbiAgX2NyZWF0ZUNsYXNzKE9ic2VydmVyLCBbe1xuICAgIGtleTogXCJ2ZWxvY2l0eVhcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl92eC5nZXRWZWxvY2l0eSgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ2ZWxvY2l0eVlcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl92eS5nZXRWZWxvY2l0eSgpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBPYnNlcnZlcjtcbn0oKTtcbk9ic2VydmVyLnZlcnNpb24gPSBcIjMuMTIuNVwiO1xuXG5PYnNlcnZlci5jcmVhdGUgPSBmdW5jdGlvbiAodmFycykge1xuICByZXR1cm4gbmV3IE9ic2VydmVyKHZhcnMpO1xufTtcblxuT2JzZXJ2ZXIucmVnaXN0ZXIgPSBfaW5pdENvcmU7XG5cbk9ic2VydmVyLmdldEFsbCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIF9vYnNlcnZlcnMuc2xpY2UoKTtcbn07XG5cbk9ic2VydmVyLmdldEJ5SWQgPSBmdW5jdGlvbiAoaWQpIHtcbiAgcmV0dXJuIF9vYnNlcnZlcnMuZmlsdGVyKGZ1bmN0aW9uIChvKSB7XG4gICAgcmV0dXJuIG8udmFycy5pZCA9PT0gaWQ7XG4gIH0pWzBdO1xufTtcblxuX2dldEdTQVAoKSAmJiBnc2FwLnJlZ2lzdGVyUGx1Z2luKE9ic2VydmVyKTtcbmV4cG9ydCB7IE9ic2VydmVyIGFzIGRlZmF1bHQsIF9pc1ZpZXdwb3J0LCBfc2Nyb2xsZXJzLCBfZ2V0U2Nyb2xsRnVuYywgX2dldFByb3h5UHJvcCwgX3Byb3hpZXMsIF9nZXRWZWxvY2l0eVByb3AsIF92ZXJ0aWNhbCwgX2hvcml6b250YWwsIF9nZXRUYXJnZXQgfTsiLCIvKiFcbiAqIFNjcm9sbFRyaWdnZXIgMy4xMi41XG4gKiBodHRwczovL2dzYXAuY29tXG4gKlxuICogQGxpY2Vuc2UgQ29weXJpZ2h0IDIwMDgtMjAyNCwgR3JlZW5Tb2NrLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogU3ViamVjdCB0byB0aGUgdGVybXMgYXQgaHR0cHM6Ly9nc2FwLmNvbS9zdGFuZGFyZC1saWNlbnNlIG9yIGZvclxuICogQ2x1YiBHU0FQIG1lbWJlcnMsIHRoZSBhZ3JlZW1lbnQgaXNzdWVkIHdpdGggdGhhdCBtZW1iZXJzaGlwLlxuICogQGF1dGhvcjogSmFjayBEb3lsZSwgamFja0BncmVlbnNvY2suY29tXG4qL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuaW1wb3J0IHsgT2JzZXJ2ZXIsIF9nZXRUYXJnZXQsIF92ZXJ0aWNhbCwgX2hvcml6b250YWwsIF9zY3JvbGxlcnMsIF9wcm94aWVzLCBfZ2V0U2Nyb2xsRnVuYywgX2dldFByb3h5UHJvcCwgX2dldFZlbG9jaXR5UHJvcCB9IGZyb20gXCIuL09ic2VydmVyLmpzXCI7XG5cbnZhciBnc2FwLFxuICAgIF9jb3JlSW5pdHRlZCxcbiAgICBfd2luLFxuICAgIF9kb2MsXG4gICAgX2RvY0VsLFxuICAgIF9ib2R5LFxuICAgIF9yb290LFxuICAgIF9yZXNpemVEZWxheSxcbiAgICBfdG9BcnJheSxcbiAgICBfY2xhbXAsXG4gICAgX3RpbWUyLFxuICAgIF9zeW5jSW50ZXJ2YWwsXG4gICAgX3JlZnJlc2hpbmcsXG4gICAgX3BvaW50ZXJJc0Rvd24sXG4gICAgX3RyYW5zZm9ybVByb3AsXG4gICAgX2ksXG4gICAgX3ByZXZXaWR0aCxcbiAgICBfcHJldkhlaWdodCxcbiAgICBfYXV0b1JlZnJlc2gsXG4gICAgX3NvcnQsXG4gICAgX3N1cHByZXNzT3ZlcndyaXRlcyxcbiAgICBfaWdub3JlUmVzaXplLFxuICAgIF9ub3JtYWxpemVyLFxuICAgIF9pZ25vcmVNb2JpbGVSZXNpemUsXG4gICAgX2Jhc2VTY3JlZW5IZWlnaHQsXG4gICAgX2Jhc2VTY3JlZW5XaWR0aCxcbiAgICBfZml4SU9TQnVnLFxuICAgIF9jb250ZXh0LFxuICAgIF9zY3JvbGxSZXN0b3JhdGlvbixcbiAgICBfZGl2MTAwdmgsXG4gICAgXzEwMHZoLFxuICAgIF9pc1JldmVydGVkLFxuICAgIF9jbGFtcGluZ01heCxcbiAgICBfbGltaXRDYWxsYmFja3MsXG4gICAgLy8gaWYgdHJ1ZSwgd2UnbGwgb25seSB0cmlnZ2VyIGNhbGxiYWNrcyBpZiB0aGUgYWN0aXZlIHN0YXRlIHRvZ2dsZXMsIHNvIGlmIHlvdSBzY3JvbGwgaW1tZWRpYXRlbHkgcGFzdCBib3RoIHRoZSBzdGFydCBhbmQgZW5kIHBvc2l0aW9ucyBvZiBhIFNjcm9sbFRyaWdnZXIgKHRodXMgaW5hY3RpdmUgdG8gaW5hY3RpdmUpLCBuZWl0aGVyIGl0cyBvbkVudGVyIG5vciBvbkxlYXZlIHdpbGwgYmUgY2FsbGVkLiBUaGlzIGlzIHVzZWZ1bCBkdXJpbmcgc3RhcnR1cC5cbl9zdGFydHVwID0gMSxcbiAgICBfZ2V0VGltZSA9IERhdGUubm93LFxuICAgIF90aW1lMSA9IF9nZXRUaW1lKCksXG4gICAgX2xhc3RTY3JvbGxUaW1lID0gMCxcbiAgICBfZW5hYmxlZCA9IDAsXG4gICAgX3BhcnNlQ2xhbXAgPSBmdW5jdGlvbiBfcGFyc2VDbGFtcCh2YWx1ZSwgdHlwZSwgc2VsZikge1xuICB2YXIgY2xhbXAgPSBfaXNTdHJpbmcodmFsdWUpICYmICh2YWx1ZS5zdWJzdHIoMCwgNikgPT09IFwiY2xhbXAoXCIgfHwgdmFsdWUuaW5kZXhPZihcIm1heFwiKSA+IC0xKTtcbiAgc2VsZltcIl9cIiArIHR5cGUgKyBcIkNsYW1wXCJdID0gY2xhbXA7XG4gIHJldHVybiBjbGFtcCA/IHZhbHVlLnN1YnN0cig2LCB2YWx1ZS5sZW5ndGggLSA3KSA6IHZhbHVlO1xufSxcbiAgICBfa2VlcENsYW1wID0gZnVuY3Rpb24gX2tlZXBDbGFtcCh2YWx1ZSwgY2xhbXApIHtcbiAgcmV0dXJuIGNsYW1wICYmICghX2lzU3RyaW5nKHZhbHVlKSB8fCB2YWx1ZS5zdWJzdHIoMCwgNikgIT09IFwiY2xhbXAoXCIpID8gXCJjbGFtcChcIiArIHZhbHVlICsgXCIpXCIgOiB2YWx1ZTtcbn0sXG4gICAgX3JhZkJ1Z0ZpeCA9IGZ1bmN0aW9uIF9yYWZCdWdGaXgoKSB7XG4gIHJldHVybiBfZW5hYmxlZCAmJiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoX3JhZkJ1Z0ZpeCk7XG59LFxuICAgIC8vIGluIHNvbWUgYnJvd3NlcnMgKGxpa2UgRmlyZWZveCksIHNjcmVlbiByZXBhaW50cyB3ZXJlbid0IGNvbnNpc3RlbnQgdW5sZXNzIHdlIGhhZCBTT01FVEhJTkcgcXVldWVkIHVwIGluIHJlcXVlc3RBbmltYXRpb25GcmFtZSgpISBTbyB0aGlzIGp1c3QgY3JlYXRlcyBhIHN1cGVyIHNpbXBsZSBsb29wIHRvIGtlZXAgaXQgYWxpdmUgYW5kIHNtb290aCBvdXQgcmVwYWludHMuXG5fcG9pbnRlckRvd25IYW5kbGVyID0gZnVuY3Rpb24gX3BvaW50ZXJEb3duSGFuZGxlcigpIHtcbiAgcmV0dXJuIF9wb2ludGVySXNEb3duID0gMTtcbn0sXG4gICAgX3BvaW50ZXJVcEhhbmRsZXIgPSBmdW5jdGlvbiBfcG9pbnRlclVwSGFuZGxlcigpIHtcbiAgcmV0dXJuIF9wb2ludGVySXNEb3duID0gMDtcbn0sXG4gICAgX3Bhc3NUaHJvdWdoID0gZnVuY3Rpb24gX3Bhc3NUaHJvdWdoKHYpIHtcbiAgcmV0dXJuIHY7XG59LFxuICAgIF9yb3VuZCA9IGZ1bmN0aW9uIF9yb3VuZCh2YWx1ZSkge1xuICByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSAqIDEwMDAwMCkgLyAxMDAwMDAgfHwgMDtcbn0sXG4gICAgX3dpbmRvd0V4aXN0cyA9IGZ1bmN0aW9uIF93aW5kb3dFeGlzdHMoKSB7XG4gIHJldHVybiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiO1xufSxcbiAgICBfZ2V0R1NBUCA9IGZ1bmN0aW9uIF9nZXRHU0FQKCkge1xuICByZXR1cm4gZ3NhcCB8fCBfd2luZG93RXhpc3RzKCkgJiYgKGdzYXAgPSB3aW5kb3cuZ3NhcCkgJiYgZ3NhcC5yZWdpc3RlclBsdWdpbiAmJiBnc2FwO1xufSxcbiAgICBfaXNWaWV3cG9ydCA9IGZ1bmN0aW9uIF9pc1ZpZXdwb3J0KGUpIHtcbiAgcmV0dXJuICEhfl9yb290LmluZGV4T2YoZSk7XG59LFxuICAgIF9nZXRWaWV3cG9ydERpbWVuc2lvbiA9IGZ1bmN0aW9uIF9nZXRWaWV3cG9ydERpbWVuc2lvbihkaW1lbnNpb25Qcm9wZXJ0eSkge1xuICByZXR1cm4gKGRpbWVuc2lvblByb3BlcnR5ID09PSBcIkhlaWdodFwiID8gXzEwMHZoIDogX3dpbltcImlubmVyXCIgKyBkaW1lbnNpb25Qcm9wZXJ0eV0pIHx8IF9kb2NFbFtcImNsaWVudFwiICsgZGltZW5zaW9uUHJvcGVydHldIHx8IF9ib2R5W1wiY2xpZW50XCIgKyBkaW1lbnNpb25Qcm9wZXJ0eV07XG59LFxuICAgIF9nZXRCb3VuZHNGdW5jID0gZnVuY3Rpb24gX2dldEJvdW5kc0Z1bmMoZWxlbWVudCkge1xuICByZXR1cm4gX2dldFByb3h5UHJvcChlbGVtZW50LCBcImdldEJvdW5kaW5nQ2xpZW50UmVjdFwiKSB8fCAoX2lzVmlld3BvcnQoZWxlbWVudCkgPyBmdW5jdGlvbiAoKSB7XG4gICAgX3dpbk9mZnNldHMud2lkdGggPSBfd2luLmlubmVyV2lkdGg7XG4gICAgX3dpbk9mZnNldHMuaGVpZ2h0ID0gXzEwMHZoO1xuICAgIHJldHVybiBfd2luT2Zmc2V0cztcbiAgfSA6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2dldEJvdW5kcyhlbGVtZW50KTtcbiAgfSk7XG59LFxuICAgIF9nZXRTaXplRnVuYyA9IGZ1bmN0aW9uIF9nZXRTaXplRnVuYyhzY3JvbGxlciwgaXNWaWV3cG9ydCwgX3JlZikge1xuICB2YXIgZCA9IF9yZWYuZCxcbiAgICAgIGQyID0gX3JlZi5kMixcbiAgICAgIGEgPSBfcmVmLmE7XG4gIHJldHVybiAoYSA9IF9nZXRQcm94eVByb3Aoc2Nyb2xsZXIsIFwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0XCIpKSA/IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gYSgpW2RdO1xuICB9IDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAoaXNWaWV3cG9ydCA/IF9nZXRWaWV3cG9ydERpbWVuc2lvbihkMikgOiBzY3JvbGxlcltcImNsaWVudFwiICsgZDJdKSB8fCAwO1xuICB9O1xufSxcbiAgICBfZ2V0T2Zmc2V0c0Z1bmMgPSBmdW5jdGlvbiBfZ2V0T2Zmc2V0c0Z1bmMoZWxlbWVudCwgaXNWaWV3cG9ydCkge1xuICByZXR1cm4gIWlzVmlld3BvcnQgfHwgfl9wcm94aWVzLmluZGV4T2YoZWxlbWVudCkgPyBfZ2V0Qm91bmRzRnVuYyhlbGVtZW50KSA6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX3dpbk9mZnNldHM7XG4gIH07XG59LFxuICAgIF9tYXhTY3JvbGwgPSBmdW5jdGlvbiBfbWF4U2Nyb2xsKGVsZW1lbnQsIF9yZWYyKSB7XG4gIHZhciBzID0gX3JlZjIucyxcbiAgICAgIGQyID0gX3JlZjIuZDIsXG4gICAgICBkID0gX3JlZjIuZCxcbiAgICAgIGEgPSBfcmVmMi5hO1xuICByZXR1cm4gTWF0aC5tYXgoMCwgKHMgPSBcInNjcm9sbFwiICsgZDIpICYmIChhID0gX2dldFByb3h5UHJvcChlbGVtZW50LCBzKSkgPyBhKCkgLSBfZ2V0Qm91bmRzRnVuYyhlbGVtZW50KSgpW2RdIDogX2lzVmlld3BvcnQoZWxlbWVudCkgPyAoX2RvY0VsW3NdIHx8IF9ib2R5W3NdKSAtIF9nZXRWaWV3cG9ydERpbWVuc2lvbihkMikgOiBlbGVtZW50W3NdIC0gZWxlbWVudFtcIm9mZnNldFwiICsgZDJdKTtcbn0sXG4gICAgX2l0ZXJhdGVBdXRvUmVmcmVzaCA9IGZ1bmN0aW9uIF9pdGVyYXRlQXV0b1JlZnJlc2goZnVuYywgZXZlbnRzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgX2F1dG9SZWZyZXNoLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgKCFldmVudHMgfHwgfmV2ZW50cy5pbmRleE9mKF9hdXRvUmVmcmVzaFtpICsgMV0pKSAmJiBmdW5jKF9hdXRvUmVmcmVzaFtpXSwgX2F1dG9SZWZyZXNoW2kgKyAxXSwgX2F1dG9SZWZyZXNoW2kgKyAyXSk7XG4gIH1cbn0sXG4gICAgX2lzU3RyaW5nID0gZnVuY3Rpb24gX2lzU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCI7XG59LFxuICAgIF9pc0Z1bmN0aW9uID0gZnVuY3Rpb24gX2lzRnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiO1xufSxcbiAgICBfaXNOdW1iZXIgPSBmdW5jdGlvbiBfaXNOdW1iZXIodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIjtcbn0sXG4gICAgX2lzT2JqZWN0ID0gZnVuY3Rpb24gX2lzT2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCI7XG59LFxuICAgIF9lbmRBbmltYXRpb24gPSBmdW5jdGlvbiBfZW5kQW5pbWF0aW9uKGFuaW1hdGlvbiwgcmV2ZXJzZWQsIHBhdXNlKSB7XG4gIHJldHVybiBhbmltYXRpb24gJiYgYW5pbWF0aW9uLnByb2dyZXNzKHJldmVyc2VkID8gMCA6IDEpICYmIHBhdXNlICYmIGFuaW1hdGlvbi5wYXVzZSgpO1xufSxcbiAgICBfY2FsbGJhY2sgPSBmdW5jdGlvbiBfY2FsbGJhY2soc2VsZiwgZnVuYykge1xuICBpZiAoc2VsZi5lbmFibGVkKSB7XG4gICAgdmFyIHJlc3VsdCA9IHNlbGYuX2N0eCA/IHNlbGYuX2N0eC5hZGQoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGZ1bmMoc2VsZik7XG4gICAgfSkgOiBmdW5jKHNlbGYpO1xuICAgIHJlc3VsdCAmJiByZXN1bHQudG90YWxUaW1lICYmIChzZWxmLmNhbGxiYWNrQW5pbWF0aW9uID0gcmVzdWx0KTtcbiAgfVxufSxcbiAgICBfYWJzID0gTWF0aC5hYnMsXG4gICAgX2xlZnQgPSBcImxlZnRcIixcbiAgICBfdG9wID0gXCJ0b3BcIixcbiAgICBfcmlnaHQgPSBcInJpZ2h0XCIsXG4gICAgX2JvdHRvbSA9IFwiYm90dG9tXCIsXG4gICAgX3dpZHRoID0gXCJ3aWR0aFwiLFxuICAgIF9oZWlnaHQgPSBcImhlaWdodFwiLFxuICAgIF9SaWdodCA9IFwiUmlnaHRcIixcbiAgICBfTGVmdCA9IFwiTGVmdFwiLFxuICAgIF9Ub3AgPSBcIlRvcFwiLFxuICAgIF9Cb3R0b20gPSBcIkJvdHRvbVwiLFxuICAgIF9wYWRkaW5nID0gXCJwYWRkaW5nXCIsXG4gICAgX21hcmdpbiA9IFwibWFyZ2luXCIsXG4gICAgX1dpZHRoID0gXCJXaWR0aFwiLFxuICAgIF9IZWlnaHQgPSBcIkhlaWdodFwiLFxuICAgIF9weCA9IFwicHhcIixcbiAgICBfZ2V0Q29tcHV0ZWRTdHlsZSA9IGZ1bmN0aW9uIF9nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpIHtcbiAgcmV0dXJuIF93aW4uZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcbn0sXG4gICAgX21ha2VQb3NpdGlvbmFibGUgPSBmdW5jdGlvbiBfbWFrZVBvc2l0aW9uYWJsZShlbGVtZW50KSB7XG4gIC8vIGlmIHRoZSBlbGVtZW50IGFscmVhZHkgaGFzIHBvc2l0aW9uOiBhYnNvbHV0ZSBvciBmaXhlZCwgbGVhdmUgdGhhdCwgb3RoZXJ3aXNlIG1ha2UgaXQgcG9zaXRpb246IHJlbGF0aXZlXG4gIHZhciBwb3NpdGlvbiA9IF9nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpLnBvc2l0aW9uO1xuXG4gIGVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSBwb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiIHx8IHBvc2l0aW9uID09PSBcImZpeGVkXCIgPyBwb3NpdGlvbiA6IFwicmVsYXRpdmVcIjtcbn0sXG4gICAgX3NldERlZmF1bHRzID0gZnVuY3Rpb24gX3NldERlZmF1bHRzKG9iaiwgZGVmYXVsdHMpIHtcbiAgZm9yICh2YXIgcCBpbiBkZWZhdWx0cykge1xuICAgIHAgaW4gb2JqIHx8IChvYmpbcF0gPSBkZWZhdWx0c1twXSk7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufSxcbiAgICBfZ2V0Qm91bmRzID0gZnVuY3Rpb24gX2dldEJvdW5kcyhlbGVtZW50LCB3aXRob3V0VHJhbnNmb3Jtcykge1xuICB2YXIgdHdlZW4gPSB3aXRob3V0VHJhbnNmb3JtcyAmJiBfZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KVtfdHJhbnNmb3JtUHJvcF0gIT09IFwibWF0cml4KDEsIDAsIDAsIDEsIDAsIDApXCIgJiYgZ3NhcC50byhlbGVtZW50LCB7XG4gICAgeDogMCxcbiAgICB5OiAwLFxuICAgIHhQZXJjZW50OiAwLFxuICAgIHlQZXJjZW50OiAwLFxuICAgIHJvdGF0aW9uOiAwLFxuICAgIHJvdGF0aW9uWDogMCxcbiAgICByb3RhdGlvblk6IDAsXG4gICAgc2NhbGU6IDEsXG4gICAgc2tld1g6IDAsXG4gICAgc2tld1k6IDBcbiAgfSkucHJvZ3Jlc3MoMSksXG4gICAgICBib3VuZHMgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICB0d2VlbiAmJiB0d2Vlbi5wcm9ncmVzcygwKS5raWxsKCk7XG4gIHJldHVybiBib3VuZHM7XG59LFxuICAgIF9nZXRTaXplID0gZnVuY3Rpb24gX2dldFNpemUoZWxlbWVudCwgX3JlZjMpIHtcbiAgdmFyIGQyID0gX3JlZjMuZDI7XG4gIHJldHVybiBlbGVtZW50W1wib2Zmc2V0XCIgKyBkMl0gfHwgZWxlbWVudFtcImNsaWVudFwiICsgZDJdIHx8IDA7XG59LFxuICAgIF9nZXRMYWJlbFJhdGlvQXJyYXkgPSBmdW5jdGlvbiBfZ2V0TGFiZWxSYXRpb0FycmF5KHRpbWVsaW5lKSB7XG4gIHZhciBhID0gW10sXG4gICAgICBsYWJlbHMgPSB0aW1lbGluZS5sYWJlbHMsXG4gICAgICBkdXJhdGlvbiA9IHRpbWVsaW5lLmR1cmF0aW9uKCksXG4gICAgICBwO1xuXG4gIGZvciAocCBpbiBsYWJlbHMpIHtcbiAgICBhLnB1c2gobGFiZWxzW3BdIC8gZHVyYXRpb24pO1xuICB9XG5cbiAgcmV0dXJuIGE7XG59LFxuICAgIF9nZXRDbG9zZXN0TGFiZWwgPSBmdW5jdGlvbiBfZ2V0Q2xvc2VzdExhYmVsKGFuaW1hdGlvbikge1xuICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIGdzYXAudXRpbHMuc25hcChfZ2V0TGFiZWxSYXRpb0FycmF5KGFuaW1hdGlvbiksIHZhbHVlKTtcbiAgfTtcbn0sXG4gICAgX3NuYXBEaXJlY3Rpb25hbCA9IGZ1bmN0aW9uIF9zbmFwRGlyZWN0aW9uYWwoc25hcEluY3JlbWVudE9yQXJyYXkpIHtcbiAgdmFyIHNuYXAgPSBnc2FwLnV0aWxzLnNuYXAoc25hcEluY3JlbWVudE9yQXJyYXkpLFxuICAgICAgYSA9IEFycmF5LmlzQXJyYXkoc25hcEluY3JlbWVudE9yQXJyYXkpICYmIHNuYXBJbmNyZW1lbnRPckFycmF5LnNsaWNlKDApLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gYSAtIGI7XG4gIH0pO1xuICByZXR1cm4gYSA/IGZ1bmN0aW9uICh2YWx1ZSwgZGlyZWN0aW9uLCB0aHJlc2hvbGQpIHtcbiAgICBpZiAodGhyZXNob2xkID09PSB2b2lkIDApIHtcbiAgICAgIHRocmVzaG9sZCA9IDFlLTM7XG4gICAgfVxuXG4gICAgdmFyIGk7XG5cbiAgICBpZiAoIWRpcmVjdGlvbikge1xuICAgICAgcmV0dXJuIHNuYXAodmFsdWUpO1xuICAgIH1cblxuICAgIGlmIChkaXJlY3Rpb24gPiAwKSB7XG4gICAgICB2YWx1ZSAtPSB0aHJlc2hvbGQ7IC8vIHRvIGF2b2lkIHJvdW5kaW5nIGVycm9ycy4gSWYgd2UncmUgdG9vIHN0cmljdCwgaXQgbWlnaHQgc25hcCBmb3J3YXJkLCB0aGVuIGltbWVkaWF0ZWx5IGFnYWluLCBhbmQgYWdhaW4uXG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChhW2ldID49IHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIGFbaV07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFbaSAtIDFdO1xuICAgIH0gZWxzZSB7XG4gICAgICBpID0gYS5sZW5ndGg7XG4gICAgICB2YWx1ZSArPSB0aHJlc2hvbGQ7XG5cbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgaWYgKGFbaV0gPD0gdmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gYVtpXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBhWzBdO1xuICB9IDogZnVuY3Rpb24gKHZhbHVlLCBkaXJlY3Rpb24sIHRocmVzaG9sZCkge1xuICAgIGlmICh0aHJlc2hvbGQgPT09IHZvaWQgMCkge1xuICAgICAgdGhyZXNob2xkID0gMWUtMztcbiAgICB9XG5cbiAgICB2YXIgc25hcHBlZCA9IHNuYXAodmFsdWUpO1xuICAgIHJldHVybiAhZGlyZWN0aW9uIHx8IE1hdGguYWJzKHNuYXBwZWQgLSB2YWx1ZSkgPCB0aHJlc2hvbGQgfHwgc25hcHBlZCAtIHZhbHVlIDwgMCA9PT0gZGlyZWN0aW9uIDwgMCA/IHNuYXBwZWQgOiBzbmFwKGRpcmVjdGlvbiA8IDAgPyB2YWx1ZSAtIHNuYXBJbmNyZW1lbnRPckFycmF5IDogdmFsdWUgKyBzbmFwSW5jcmVtZW50T3JBcnJheSk7XG4gIH07XG59LFxuICAgIF9nZXRMYWJlbEF0RGlyZWN0aW9uID0gZnVuY3Rpb24gX2dldExhYmVsQXREaXJlY3Rpb24odGltZWxpbmUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSwgc3QpIHtcbiAgICByZXR1cm4gX3NuYXBEaXJlY3Rpb25hbChfZ2V0TGFiZWxSYXRpb0FycmF5KHRpbWVsaW5lKSkodmFsdWUsIHN0LmRpcmVjdGlvbik7XG4gIH07XG59LFxuICAgIF9tdWx0aUxpc3RlbmVyID0gZnVuY3Rpb24gX211bHRpTGlzdGVuZXIoZnVuYywgZWxlbWVudCwgdHlwZXMsIGNhbGxiYWNrKSB7XG4gIHJldHVybiB0eXBlcy5zcGxpdChcIixcIikuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgIHJldHVybiBmdW5jKGVsZW1lbnQsIHR5cGUsIGNhbGxiYWNrKTtcbiAgfSk7XG59LFxuICAgIF9hZGRMaXN0ZW5lciA9IGZ1bmN0aW9uIF9hZGRMaXN0ZW5lcihlbGVtZW50LCB0eXBlLCBmdW5jLCBub25QYXNzaXZlLCBjYXB0dXJlKSB7XG4gIHJldHVybiBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgZnVuYywge1xuICAgIHBhc3NpdmU6ICFub25QYXNzaXZlLFxuICAgIGNhcHR1cmU6ICEhY2FwdHVyZVxuICB9KTtcbn0sXG4gICAgX3JlbW92ZUxpc3RlbmVyID0gZnVuY3Rpb24gX3JlbW92ZUxpc3RlbmVyKGVsZW1lbnQsIHR5cGUsIGZ1bmMsIGNhcHR1cmUpIHtcbiAgcmV0dXJuIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBmdW5jLCAhIWNhcHR1cmUpO1xufSxcbiAgICBfd2hlZWxMaXN0ZW5lciA9IGZ1bmN0aW9uIF93aGVlbExpc3RlbmVyKGZ1bmMsIGVsLCBzY3JvbGxGdW5jKSB7XG4gIHNjcm9sbEZ1bmMgPSBzY3JvbGxGdW5jICYmIHNjcm9sbEZ1bmMud2hlZWxIYW5kbGVyO1xuXG4gIGlmIChzY3JvbGxGdW5jKSB7XG4gICAgZnVuYyhlbCwgXCJ3aGVlbFwiLCBzY3JvbGxGdW5jKTtcbiAgICBmdW5jKGVsLCBcInRvdWNobW92ZVwiLCBzY3JvbGxGdW5jKTtcbiAgfVxufSxcbiAgICBfbWFya2VyRGVmYXVsdHMgPSB7XG4gIHN0YXJ0Q29sb3I6IFwiZ3JlZW5cIixcbiAgZW5kQ29sb3I6IFwicmVkXCIsXG4gIGluZGVudDogMCxcbiAgZm9udFNpemU6IFwiMTZweFwiLFxuICBmb250V2VpZ2h0OiBcIm5vcm1hbFwiXG59LFxuICAgIF9kZWZhdWx0cyA9IHtcbiAgdG9nZ2xlQWN0aW9uczogXCJwbGF5XCIsXG4gIGFudGljaXBhdGVQaW46IDBcbn0sXG4gICAgX2tleXdvcmRzID0ge1xuICB0b3A6IDAsXG4gIGxlZnQ6IDAsXG4gIGNlbnRlcjogMC41LFxuICBib3R0b206IDEsXG4gIHJpZ2h0OiAxXG59LFxuICAgIF9vZmZzZXRUb1B4ID0gZnVuY3Rpb24gX29mZnNldFRvUHgodmFsdWUsIHNpemUpIHtcbiAgaWYgKF9pc1N0cmluZyh2YWx1ZSkpIHtcbiAgICB2YXIgZXFJbmRleCA9IHZhbHVlLmluZGV4T2YoXCI9XCIpLFxuICAgICAgICByZWxhdGl2ZSA9IH5lcUluZGV4ID8gKyh2YWx1ZS5jaGFyQXQoZXFJbmRleCAtIDEpICsgMSkgKiBwYXJzZUZsb2F0KHZhbHVlLnN1YnN0cihlcUluZGV4ICsgMSkpIDogMDtcblxuICAgIGlmICh+ZXFJbmRleCkge1xuICAgICAgdmFsdWUuaW5kZXhPZihcIiVcIikgPiBlcUluZGV4ICYmIChyZWxhdGl2ZSAqPSBzaXplIC8gMTAwKTtcbiAgICAgIHZhbHVlID0gdmFsdWUuc3Vic3RyKDAsIGVxSW5kZXggLSAxKTtcbiAgICB9XG5cbiAgICB2YWx1ZSA9IHJlbGF0aXZlICsgKHZhbHVlIGluIF9rZXl3b3JkcyA/IF9rZXl3b3Jkc1t2YWx1ZV0gKiBzaXplIDogfnZhbHVlLmluZGV4T2YoXCIlXCIpID8gcGFyc2VGbG9hdCh2YWx1ZSkgKiBzaXplIC8gMTAwIDogcGFyc2VGbG9hdCh2YWx1ZSkgfHwgMCk7XG4gIH1cblxuICByZXR1cm4gdmFsdWU7XG59LFxuICAgIF9jcmVhdGVNYXJrZXIgPSBmdW5jdGlvbiBfY3JlYXRlTWFya2VyKHR5cGUsIG5hbWUsIGNvbnRhaW5lciwgZGlyZWN0aW9uLCBfcmVmNCwgb2Zmc2V0LCBtYXRjaFdpZHRoRWwsIGNvbnRhaW5lckFuaW1hdGlvbikge1xuICB2YXIgc3RhcnRDb2xvciA9IF9yZWY0LnN0YXJ0Q29sb3IsXG4gICAgICBlbmRDb2xvciA9IF9yZWY0LmVuZENvbG9yLFxuICAgICAgZm9udFNpemUgPSBfcmVmNC5mb250U2l6ZSxcbiAgICAgIGluZGVudCA9IF9yZWY0LmluZGVudCxcbiAgICAgIGZvbnRXZWlnaHQgPSBfcmVmNC5mb250V2VpZ2h0O1xuXG4gIHZhciBlID0gX2RvYy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLFxuICAgICAgdXNlRml4ZWRQb3NpdGlvbiA9IF9pc1ZpZXdwb3J0KGNvbnRhaW5lcikgfHwgX2dldFByb3h5UHJvcChjb250YWluZXIsIFwicGluVHlwZVwiKSA9PT0gXCJmaXhlZFwiLFxuICAgICAgaXNTY3JvbGxlciA9IHR5cGUuaW5kZXhPZihcInNjcm9sbGVyXCIpICE9PSAtMSxcbiAgICAgIHBhcmVudCA9IHVzZUZpeGVkUG9zaXRpb24gPyBfYm9keSA6IGNvbnRhaW5lcixcbiAgICAgIGlzU3RhcnQgPSB0eXBlLmluZGV4T2YoXCJzdGFydFwiKSAhPT0gLTEsXG4gICAgICBjb2xvciA9IGlzU3RhcnQgPyBzdGFydENvbG9yIDogZW5kQ29sb3IsXG4gICAgICBjc3MgPSBcImJvcmRlci1jb2xvcjpcIiArIGNvbG9yICsgXCI7Zm9udC1zaXplOlwiICsgZm9udFNpemUgKyBcIjtjb2xvcjpcIiArIGNvbG9yICsgXCI7Zm9udC13ZWlnaHQ6XCIgKyBmb250V2VpZ2h0ICsgXCI7cG9pbnRlci1ldmVudHM6bm9uZTt3aGl0ZS1zcGFjZTpub3dyYXA7Zm9udC1mYW1pbHk6c2Fucy1zZXJpZixBcmlhbDt6LWluZGV4OjEwMDA7cGFkZGluZzo0cHggOHB4O2JvcmRlci13aWR0aDowO2JvcmRlci1zdHlsZTpzb2xpZDtcIjtcblxuICBjc3MgKz0gXCJwb3NpdGlvbjpcIiArICgoaXNTY3JvbGxlciB8fCBjb250YWluZXJBbmltYXRpb24pICYmIHVzZUZpeGVkUG9zaXRpb24gPyBcImZpeGVkO1wiIDogXCJhYnNvbHV0ZTtcIik7XG4gIChpc1Njcm9sbGVyIHx8IGNvbnRhaW5lckFuaW1hdGlvbiB8fCAhdXNlRml4ZWRQb3NpdGlvbikgJiYgKGNzcyArPSAoZGlyZWN0aW9uID09PSBfdmVydGljYWwgPyBfcmlnaHQgOiBfYm90dG9tKSArIFwiOlwiICsgKG9mZnNldCArIHBhcnNlRmxvYXQoaW5kZW50KSkgKyBcInB4O1wiKTtcbiAgbWF0Y2hXaWR0aEVsICYmIChjc3MgKz0gXCJib3gtc2l6aW5nOmJvcmRlci1ib3g7dGV4dC1hbGlnbjpsZWZ0O3dpZHRoOlwiICsgbWF0Y2hXaWR0aEVsLm9mZnNldFdpZHRoICsgXCJweDtcIik7XG4gIGUuX2lzU3RhcnQgPSBpc1N0YXJ0O1xuICBlLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwiZ3NhcC1tYXJrZXItXCIgKyB0eXBlICsgKG5hbWUgPyBcIiBtYXJrZXItXCIgKyBuYW1lIDogXCJcIikpO1xuICBlLnN0eWxlLmNzc1RleHQgPSBjc3M7XG4gIGUuaW5uZXJUZXh0ID0gbmFtZSB8fCBuYW1lID09PSAwID8gdHlwZSArIFwiLVwiICsgbmFtZSA6IHR5cGU7XG4gIHBhcmVudC5jaGlsZHJlblswXSA/IHBhcmVudC5pbnNlcnRCZWZvcmUoZSwgcGFyZW50LmNoaWxkcmVuWzBdKSA6IHBhcmVudC5hcHBlbmRDaGlsZChlKTtcbiAgZS5fb2Zmc2V0ID0gZVtcIm9mZnNldFwiICsgZGlyZWN0aW9uLm9wLmQyXTtcblxuICBfcG9zaXRpb25NYXJrZXIoZSwgMCwgZGlyZWN0aW9uLCBpc1N0YXJ0KTtcblxuICByZXR1cm4gZTtcbn0sXG4gICAgX3Bvc2l0aW9uTWFya2VyID0gZnVuY3Rpb24gX3Bvc2l0aW9uTWFya2VyKG1hcmtlciwgc3RhcnQsIGRpcmVjdGlvbiwgZmxpcHBlZCkge1xuICB2YXIgdmFycyA9IHtcbiAgICBkaXNwbGF5OiBcImJsb2NrXCJcbiAgfSxcbiAgICAgIHNpZGUgPSBkaXJlY3Rpb25bZmxpcHBlZCA/IFwib3MyXCIgOiBcInAyXCJdLFxuICAgICAgb3Bwb3NpdGVTaWRlID0gZGlyZWN0aW9uW2ZsaXBwZWQgPyBcInAyXCIgOiBcIm9zMlwiXTtcbiAgbWFya2VyLl9pc0ZsaXBwZWQgPSBmbGlwcGVkO1xuICB2YXJzW2RpcmVjdGlvbi5hICsgXCJQZXJjZW50XCJdID0gZmxpcHBlZCA/IC0xMDAgOiAwO1xuICB2YXJzW2RpcmVjdGlvbi5hXSA9IGZsaXBwZWQgPyBcIjFweFwiIDogMDtcbiAgdmFyc1tcImJvcmRlclwiICsgc2lkZSArIF9XaWR0aF0gPSAxO1xuICB2YXJzW1wiYm9yZGVyXCIgKyBvcHBvc2l0ZVNpZGUgKyBfV2lkdGhdID0gMDtcbiAgdmFyc1tkaXJlY3Rpb24ucF0gPSBzdGFydCArIFwicHhcIjtcbiAgZ3NhcC5zZXQobWFya2VyLCB2YXJzKTtcbn0sXG4gICAgX3RyaWdnZXJzID0gW10sXG4gICAgX2lkcyA9IHt9LFxuICAgIF9yYWZJRCxcbiAgICBfc3luYyA9IGZ1bmN0aW9uIF9zeW5jKCkge1xuICByZXR1cm4gX2dldFRpbWUoKSAtIF9sYXN0U2Nyb2xsVGltZSA+IDM0ICYmIChfcmFmSUQgfHwgKF9yYWZJRCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShfdXBkYXRlQWxsKSkpO1xufSxcbiAgICBfb25TY3JvbGwgPSBmdW5jdGlvbiBfb25TY3JvbGwoKSB7XG4gIC8vIHByZXZpb3VzbHksIHdlIHRyaWVkIHRvIG9wdGltaXplIHBlcmZvcm1hbmNlIGJ5IGJhdGNoaW5nL2RlZmVycmluZyB0byB0aGUgbmV4dCByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKSwgYnV0IGRpc2NvdmVyZWQgdGhhdCBTYWZhcmkgaGFzIGEgZmV3IGJ1Z3MgdGhhdCBtYWtlIHRoaXMgdW53b3JrYWJsZSAoZXNwZWNpYWxseSBvbiBpT1MpLiBTZWUgaHR0cHM6Ly9jb2RlcGVuLmlvL0dyZWVuU29jay9wZW4vMTZjNDM1YjEyZWYwOWMzODEyNTIwNDgxOGU3YjQ1ZmM/ZWRpdG9ycz0wMDEwIGFuZCBodHRwczovL2NvZGVwZW4uaW8vR3JlZW5Tb2NrL3Blbi9Kak94WXBRLzNkZDY1Y2NlYzVhNjBmMWQ4NjJjMzU1ZDg0ZDE0NTYyP2VkaXRvcnM9MDAxMCBhbmQgaHR0cHM6Ly9jb2RlcGVuLmlvL0dyZWVuU29jay9wZW4vRXhiclBOYS8wODdjZWYxOTdkYzM1NDQ1YTA5NTFlODkzNWM0MTUwMz9lZGl0b3JzPTAwMTBcbiAgaWYgKCFfbm9ybWFsaXplciB8fCAhX25vcm1hbGl6ZXIuaXNQcmVzc2VkIHx8IF9ub3JtYWxpemVyLnN0YXJ0WCA+IF9ib2R5LmNsaWVudFdpZHRoKSB7XG4gICAgLy8gaWYgdGhlIHVzZXIgaXMgZHJhZ2dpbmcgdGhlIHNjcm9sbGJhciwgYWxsb3cgaXQuXG4gICAgX3Njcm9sbGVycy5jYWNoZSsrO1xuXG4gICAgaWYgKF9ub3JtYWxpemVyKSB7XG4gICAgICBfcmFmSUQgfHwgKF9yYWZJRCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShfdXBkYXRlQWxsKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIF91cGRhdGVBbGwoKTsgLy8gU2FmYXJpIGluIHBhcnRpY3VsYXIgKG9uIGRlc2t0b3ApIE5FRURTIHRoZSBpbW1lZGlhdGUgdXBkYXRlIHJhdGhlciB0aGFuIHdhaXRpbmcgZm9yIGEgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCkgd2hlcmVhcyBpT1Mgc2VlbXMgdG8gYmVuZWZpdCBmcm9tIHdhaXRpbmcgZm9yIHRoZSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKSB0aWNrLCBhdCBsZWFzdCB3aGVuIG5vcm1hbGl6aW5nLiBTZWUgaHR0cHM6Ly9jb2RlcGVuLmlvL0dyZWVuU29jay9wZW4vcUJZb3pxTz9lZGl0b3JzPTAxMTBcblxuICAgIH1cblxuICAgIF9sYXN0U2Nyb2xsVGltZSB8fCBfZGlzcGF0Y2goXCJzY3JvbGxTdGFydFwiKTtcbiAgICBfbGFzdFNjcm9sbFRpbWUgPSBfZ2V0VGltZSgpO1xuICB9XG59LFxuICAgIF9zZXRCYXNlRGltZW5zaW9ucyA9IGZ1bmN0aW9uIF9zZXRCYXNlRGltZW5zaW9ucygpIHtcbiAgX2Jhc2VTY3JlZW5XaWR0aCA9IF93aW4uaW5uZXJXaWR0aDtcbiAgX2Jhc2VTY3JlZW5IZWlnaHQgPSBfd2luLmlubmVySGVpZ2h0O1xufSxcbiAgICBfb25SZXNpemUgPSBmdW5jdGlvbiBfb25SZXNpemUoKSB7XG4gIF9zY3JvbGxlcnMuY2FjaGUrKztcbiAgIV9yZWZyZXNoaW5nICYmICFfaWdub3JlUmVzaXplICYmICFfZG9jLmZ1bGxzY3JlZW5FbGVtZW50ICYmICFfZG9jLndlYmtpdEZ1bGxzY3JlZW5FbGVtZW50ICYmICghX2lnbm9yZU1vYmlsZVJlc2l6ZSB8fCBfYmFzZVNjcmVlbldpZHRoICE9PSBfd2luLmlubmVyV2lkdGggfHwgTWF0aC5hYnMoX3dpbi5pbm5lckhlaWdodCAtIF9iYXNlU2NyZWVuSGVpZ2h0KSA+IF93aW4uaW5uZXJIZWlnaHQgKiAwLjI1KSAmJiBfcmVzaXplRGVsYXkucmVzdGFydCh0cnVlKTtcbn0sXG4gICAgLy8gaWdub3JlIHJlc2l6ZXMgdHJpZ2dlcmVkIGJ5IHJlZnJlc2goKVxuX2xpc3RlbmVycyA9IHt9LFxuICAgIF9lbXB0eUFycmF5ID0gW10sXG4gICAgX3NvZnRSZWZyZXNoID0gZnVuY3Rpb24gX3NvZnRSZWZyZXNoKCkge1xuICByZXR1cm4gX3JlbW92ZUxpc3RlbmVyKFNjcm9sbFRyaWdnZXIsIFwic2Nyb2xsRW5kXCIsIF9zb2Z0UmVmcmVzaCkgfHwgX3JlZnJlc2hBbGwodHJ1ZSk7XG59LFxuICAgIF9kaXNwYXRjaCA9IGZ1bmN0aW9uIF9kaXNwYXRjaCh0eXBlKSB7XG4gIHJldHVybiBfbGlzdGVuZXJzW3R5cGVdICYmIF9saXN0ZW5lcnNbdHlwZV0ubWFwKGZ1bmN0aW9uIChmKSB7XG4gICAgcmV0dXJuIGYoKTtcbiAgfSkgfHwgX2VtcHR5QXJyYXk7XG59LFxuICAgIF9zYXZlZFN0eWxlcyA9IFtdLFxuICAgIC8vIHdoZW4gU2Nyb2xsVHJpZ2dlci5zYXZlU3R5bGVzKCkgaXMgY2FsbGVkLCB0aGUgaW5saW5lIHN0eWxlcyBhcmUgcmVjb3JkZWQgaW4gdGhpcyBBcnJheSBpbiBhIHNlcXVlbnRpYWwgZm9ybWF0IGxpa2UgW2VsZW1lbnQsIGNzc1RleHQsIGdzQ2FjaGUsIG1lZGlhXS4gVGhpcyBrZWVwcyBpdCB2ZXJ5IG1lbW9yeS1lZmZpY2llbnQgYW5kIGZhc3QgdG8gaXRlcmF0ZSB0aHJvdWdoLlxuX3JldmVydFJlY29yZGVkID0gZnVuY3Rpb24gX3JldmVydFJlY29yZGVkKG1lZGlhKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgX3NhdmVkU3R5bGVzLmxlbmd0aDsgaSArPSA1KSB7XG4gICAgaWYgKCFtZWRpYSB8fCBfc2F2ZWRTdHlsZXNbaSArIDRdICYmIF9zYXZlZFN0eWxlc1tpICsgNF0ucXVlcnkgPT09IG1lZGlhKSB7XG4gICAgICBfc2F2ZWRTdHlsZXNbaV0uc3R5bGUuY3NzVGV4dCA9IF9zYXZlZFN0eWxlc1tpICsgMV07XG4gICAgICBfc2F2ZWRTdHlsZXNbaV0uZ2V0QkJveCAmJiBfc2F2ZWRTdHlsZXNbaV0uc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIF9zYXZlZFN0eWxlc1tpICsgMl0gfHwgXCJcIik7XG4gICAgICBfc2F2ZWRTdHlsZXNbaSArIDNdLnVuY2FjaGUgPSAxO1xuICAgIH1cbiAgfVxufSxcbiAgICBfcmV2ZXJ0QWxsID0gZnVuY3Rpb24gX3JldmVydEFsbChraWxsLCBtZWRpYSkge1xuICB2YXIgdHJpZ2dlcjtcblxuICBmb3IgKF9pID0gMDsgX2kgPCBfdHJpZ2dlcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgdHJpZ2dlciA9IF90cmlnZ2Vyc1tfaV07XG5cbiAgICBpZiAodHJpZ2dlciAmJiAoIW1lZGlhIHx8IHRyaWdnZXIuX2N0eCA9PT0gbWVkaWEpKSB7XG4gICAgICBpZiAoa2lsbCkge1xuICAgICAgICB0cmlnZ2VyLmtpbGwoMSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0cmlnZ2VyLnJldmVydCh0cnVlLCB0cnVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBfaXNSZXZlcnRlZCA9IHRydWU7XG4gIG1lZGlhICYmIF9yZXZlcnRSZWNvcmRlZChtZWRpYSk7XG4gIG1lZGlhIHx8IF9kaXNwYXRjaChcInJldmVydFwiKTtcbn0sXG4gICAgX2NsZWFyU2Nyb2xsTWVtb3J5ID0gZnVuY3Rpb24gX2NsZWFyU2Nyb2xsTWVtb3J5KHNjcm9sbFJlc3RvcmF0aW9uLCBmb3JjZSkge1xuICAvLyB6ZXJvLW91dCBhbGwgdGhlIHJlY29yZGVkIHNjcm9sbCBwb3NpdGlvbnMuIERvbid0IHVzZSBfdHJpZ2dlcnMgYmVjYXVzZSBpZiwgZm9yIGV4YW1wbGUsIC5tYXRjaE1lZGlhKCkgaXMgdXNlZCB0byBjcmVhdGUgc29tZSBTY3JvbGxUcmlnZ2VycyBhbmQgdGhlbiB0aGUgdXNlciByZXNpemVzIGFuZCBpdCByZW1vdmVzIEFMTCBTY3JvbGxUcmlnZ2VycywgYW5kIHRoZW4gZ28gYmFjayB0byBhIHNpemUgd2hlcmUgdGhlcmUgYXJlIFNjcm9sbFRyaWdnZXJzLCBpdCB3b3VsZCBoYXZlIGtlcHQgdGhlIHBvc2l0aW9uKHMpIHNhdmVkIGZyb20gdGhlIGluaXRpYWwgc3RhdGUuXG4gIF9zY3JvbGxlcnMuY2FjaGUrKztcbiAgKGZvcmNlIHx8ICFfcmVmcmVzaGluZ0FsbCkgJiYgX3Njcm9sbGVycy5mb3JFYWNoKGZ1bmN0aW9uIChvYmopIHtcbiAgICByZXR1cm4gX2lzRnVuY3Rpb24ob2JqKSAmJiBvYmouY2FjaGVJRCsrICYmIChvYmoucmVjID0gMCk7XG4gIH0pO1xuICBfaXNTdHJpbmcoc2Nyb2xsUmVzdG9yYXRpb24pICYmIChfd2luLmhpc3Rvcnkuc2Nyb2xsUmVzdG9yYXRpb24gPSBfc2Nyb2xsUmVzdG9yYXRpb24gPSBzY3JvbGxSZXN0b3JhdGlvbik7XG59LFxuICAgIF9yZWZyZXNoaW5nQWxsLFxuICAgIF9yZWZyZXNoSUQgPSAwLFxuICAgIF9xdWV1ZVJlZnJlc2hJRCxcbiAgICBfcXVldWVSZWZyZXNoQWxsID0gZnVuY3Rpb24gX3F1ZXVlUmVmcmVzaEFsbCgpIHtcbiAgLy8gd2UgZG9uJ3Qgd2FudCB0byBjYWxsIF9yZWZyZXNoQWxsKCkgZXZlcnkgdGltZSB3ZSBjcmVhdGUgYSBuZXcgU2Nyb2xsVHJpZ2dlciAoZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMpIC0gaXQncyBiZXR0ZXIgdG8gYmF0Y2ggdGhlbS4gU29tZSBmcmFtZXdvcmtzIGR5bmFtaWNhbGx5IGxvYWQgY29udGVudCBhbmQgd2UgY2FuJ3QgcmVseSBvbiB0aGUgd2luZG93J3MgXCJsb2FkXCIgb3IgXCJET01Db250ZW50TG9hZGVkXCIgZXZlbnRzIHRvIHRyaWdnZXIgaXQuXG4gIGlmIChfcXVldWVSZWZyZXNoSUQgIT09IF9yZWZyZXNoSUQpIHtcbiAgICB2YXIgaWQgPSBfcXVldWVSZWZyZXNoSUQgPSBfcmVmcmVzaElEO1xuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gaWQgPT09IF9yZWZyZXNoSUQgJiYgX3JlZnJlc2hBbGwodHJ1ZSk7XG4gICAgfSk7XG4gIH1cbn0sXG4gICAgX3JlZnJlc2gxMDB2aCA9IGZ1bmN0aW9uIF9yZWZyZXNoMTAwdmgoKSB7XG4gIF9ib2R5LmFwcGVuZENoaWxkKF9kaXYxMDB2aCk7XG5cbiAgXzEwMHZoID0gIV9ub3JtYWxpemVyICYmIF9kaXYxMDB2aC5vZmZzZXRIZWlnaHQgfHwgX3dpbi5pbm5lckhlaWdodDtcblxuICBfYm9keS5yZW1vdmVDaGlsZChfZGl2MTAwdmgpO1xufSxcbiAgICBfaGlkZUFsbE1hcmtlcnMgPSBmdW5jdGlvbiBfaGlkZUFsbE1hcmtlcnMoaGlkZSkge1xuICByZXR1cm4gX3RvQXJyYXkoXCIuZ3NhcC1tYXJrZXItc3RhcnQsIC5nc2FwLW1hcmtlci1lbmQsIC5nc2FwLW1hcmtlci1zY3JvbGxlci1zdGFydCwgLmdzYXAtbWFya2VyLXNjcm9sbGVyLWVuZFwiKS5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgIHJldHVybiBlbC5zdHlsZS5kaXNwbGF5ID0gaGlkZSA/IFwibm9uZVwiIDogXCJibG9ja1wiO1xuICB9KTtcbn0sXG4gICAgX3JlZnJlc2hBbGwgPSBmdW5jdGlvbiBfcmVmcmVzaEFsbChmb3JjZSwgc2tpcFJldmVydCkge1xuICBpZiAoX2xhc3RTY3JvbGxUaW1lICYmICFmb3JjZSAmJiAhX2lzUmV2ZXJ0ZWQpIHtcbiAgICBfYWRkTGlzdGVuZXIoU2Nyb2xsVHJpZ2dlciwgXCJzY3JvbGxFbmRcIiwgX3NvZnRSZWZyZXNoKTtcblxuICAgIHJldHVybjtcbiAgfVxuXG4gIF9yZWZyZXNoMTAwdmgoKTtcblxuICBfcmVmcmVzaGluZ0FsbCA9IFNjcm9sbFRyaWdnZXIuaXNSZWZyZXNoaW5nID0gdHJ1ZTtcblxuICBfc2Nyb2xsZXJzLmZvckVhY2goZnVuY3Rpb24gKG9iaikge1xuICAgIHJldHVybiBfaXNGdW5jdGlvbihvYmopICYmICsrb2JqLmNhY2hlSUQgJiYgKG9iai5yZWMgPSBvYmooKSk7XG4gIH0pOyAvLyBmb3JjZSB0aGUgY2xlYXJpbmcgb2YgdGhlIGNhY2hlIGJlY2F1c2Ugc29tZSBicm93c2VycyB0YWtlIGEgbGl0dGxlIHdoaWxlIHRvIGRpc3BhdGNoIHRoZSBcInNjcm9sbFwiIGV2ZW50IGFuZCB0aGUgdXNlciBtYXkgaGF2ZSBjaGFuZ2VkIHRoZSBzY3JvbGwgcG9zaXRpb24gYW5kIHRoZW4gY2FsbGVkIFNjcm9sbFRyaWdnZXIucmVmcmVzaCgpIHJpZ2h0IGF3YXlcblxuXG4gIHZhciByZWZyZXNoSW5pdHMgPSBfZGlzcGF0Y2goXCJyZWZyZXNoSW5pdFwiKTtcblxuICBfc29ydCAmJiBTY3JvbGxUcmlnZ2VyLnNvcnQoKTtcbiAgc2tpcFJldmVydCB8fCBfcmV2ZXJ0QWxsKCk7XG5cbiAgX3Njcm9sbGVycy5mb3JFYWNoKGZ1bmN0aW9uIChvYmopIHtcbiAgICBpZiAoX2lzRnVuY3Rpb24ob2JqKSkge1xuICAgICAgb2JqLnNtb290aCAmJiAob2JqLnRhcmdldC5zdHlsZS5zY3JvbGxCZWhhdmlvciA9IFwiYXV0b1wiKTsgLy8gc21vb3RoIHNjcm9sbGluZyBpbnRlcmZlcmVzXG5cbiAgICAgIG9iaigwKTtcbiAgICB9XG4gIH0pO1xuXG4gIF90cmlnZ2Vycy5zbGljZSgwKS5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XG4gICAgcmV0dXJuIHQucmVmcmVzaCgpO1xuICB9KTsgLy8gZG9uJ3QgbG9vcCB3aXRoIF9pIGJlY2F1c2UgZHVyaW5nIGEgcmVmcmVzaCgpIHNvbWVvbmUgY291bGQgY2FsbCBTY3JvbGxUcmlnZ2VyLnVwZGF0ZSgpIHdoaWNoIHdvdWxkIGl0ZXJhdGUgdGhyb3VnaCBfaSByZXN1bHRpbmcgaW4gYSBza2lwLlxuXG5cbiAgX2lzUmV2ZXJ0ZWQgPSBmYWxzZTtcblxuICBfdHJpZ2dlcnMuZm9yRWFjaChmdW5jdGlvbiAodCkge1xuICAgIC8vIG5lc3RlZCBwaW5zIChwaW5uZWRDb250YWluZXIpIHdpdGggcGluU3BhY2luZyBtYXkgZXhwYW5kIHRoZSBjb250YWluZXIsIHNvIHdlIG11c3QgYWNjb21tb2RhdGUgdGhhdCBoZXJlLlxuICAgIGlmICh0Ll9zdWJQaW5PZmZzZXQgJiYgdC5waW4pIHtcbiAgICAgIHZhciBwcm9wID0gdC52YXJzLmhvcml6b250YWwgPyBcIm9mZnNldFdpZHRoXCIgOiBcIm9mZnNldEhlaWdodFwiLFxuICAgICAgICAgIG9yaWdpbmFsID0gdC5waW5bcHJvcF07XG4gICAgICB0LnJldmVydCh0cnVlLCAxKTtcbiAgICAgIHQuYWRqdXN0UGluU3BhY2luZyh0LnBpbltwcm9wXSAtIG9yaWdpbmFsKTtcbiAgICAgIHQucmVmcmVzaCgpO1xuICAgIH1cbiAgfSk7XG5cbiAgX2NsYW1waW5nTWF4ID0gMTsgLy8gcGluU3BhY2luZyBtaWdodCBiZSBwcm9wcGluZyBhIHBhZ2Ugb3BlbiwgdGh1cyB3aGVuIHdlIC5zZXRQb3NpdGlvbnMoKSB0byBjbGFtcCBhIFNjcm9sbFRyaWdnZXIncyBlbmQgd2Ugc2hvdWxkIGxlYXZlIHRoZSBwaW5TcGFjaW5nIGFsb25lLiBUaGF0J3Mgd2hhdCB0aGlzIGZsYWcgaXMgZm9yLlxuXG4gIF9oaWRlQWxsTWFya2Vycyh0cnVlKTtcblxuICBfdHJpZ2dlcnMuZm9yRWFjaChmdW5jdGlvbiAodCkge1xuICAgIC8vIHRoZSBzY3JvbGxlcidzIG1heCBzY3JvbGwgcG9zaXRpb24gbWF5IGNoYW5nZSBhZnRlciBhbGwgdGhlIFNjcm9sbFRyaWdnZXJzIHJlZnJlc2hlZCAobGlrZSBwaW5uaW5nIGNvdWxkIHB1c2ggaXQgZG93biksIHNvIHdlIG5lZWQgdG8gbG9vcCBiYWNrIGFuZCBjb3JyZWN0IGFueSB3aXRoIGVuZDogXCJtYXhcIi4gU2FtZSBmb3IgYW55dGhpbmcgd2l0aCBhIGNsYW1wZWQgZW5kXG4gICAgdmFyIG1heCA9IF9tYXhTY3JvbGwodC5zY3JvbGxlciwgdC5fZGlyKSxcbiAgICAgICAgZW5kQ2xhbXAgPSB0LnZhcnMuZW5kID09PSBcIm1heFwiIHx8IHQuX2VuZENsYW1wICYmIHQuZW5kID4gbWF4LFxuICAgICAgICBzdGFydENsYW1wID0gdC5fc3RhcnRDbGFtcCAmJiB0LnN0YXJ0ID49IG1heDtcblxuICAgIChlbmRDbGFtcCB8fCBzdGFydENsYW1wKSAmJiB0LnNldFBvc2l0aW9ucyhzdGFydENsYW1wID8gbWF4IC0gMSA6IHQuc3RhcnQsIGVuZENsYW1wID8gTWF0aC5tYXgoc3RhcnRDbGFtcCA/IG1heCA6IHQuc3RhcnQgKyAxLCBtYXgpIDogdC5lbmQsIHRydWUpO1xuICB9KTtcblxuICBfaGlkZUFsbE1hcmtlcnMoZmFsc2UpO1xuXG4gIF9jbGFtcGluZ01heCA9IDA7XG4gIHJlZnJlc2hJbml0cy5mb3JFYWNoKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICByZXR1cm4gcmVzdWx0ICYmIHJlc3VsdC5yZW5kZXIgJiYgcmVzdWx0LnJlbmRlcigtMSk7XG4gIH0pOyAvLyBpZiB0aGUgb25SZWZyZXNoSW5pdCgpIHJldHVybnMgYW4gYW5pbWF0aW9uICh0eXBpY2FsbHkgYSBnc2FwLnNldCgpKSwgcmV2ZXJ0IGl0LiBUaGlzIG1ha2VzIGl0IGVhc3kgdG8gcHV0IHRoaW5ncyBpbiBhIGNlcnRhaW4gc3BvdCBiZWZvcmUgcmVmcmVzaGluZyBmb3IgbWVhc3VyZW1lbnQgcHVycG9zZXMsIGFuZCB0aGVuIHB1dCB0aGluZ3MgYmFjay5cblxuICBfc2Nyb2xsZXJzLmZvckVhY2goZnVuY3Rpb24gKG9iaikge1xuICAgIGlmIChfaXNGdW5jdGlvbihvYmopKSB7XG4gICAgICBvYmouc21vb3RoICYmIHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBvYmoudGFyZ2V0LnN0eWxlLnNjcm9sbEJlaGF2aW9yID0gXCJzbW9vdGhcIjtcbiAgICAgIH0pO1xuICAgICAgb2JqLnJlYyAmJiBvYmoob2JqLnJlYyk7XG4gICAgfVxuICB9KTtcblxuICBfY2xlYXJTY3JvbGxNZW1vcnkoX3Njcm9sbFJlc3RvcmF0aW9uLCAxKTtcblxuICBfcmVzaXplRGVsYXkucGF1c2UoKTtcblxuICBfcmVmcmVzaElEKys7XG4gIF9yZWZyZXNoaW5nQWxsID0gMjtcblxuICBfdXBkYXRlQWxsKDIpO1xuXG4gIF90cmlnZ2Vycy5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XG4gICAgcmV0dXJuIF9pc0Z1bmN0aW9uKHQudmFycy5vblJlZnJlc2gpICYmIHQudmFycy5vblJlZnJlc2godCk7XG4gIH0pO1xuXG4gIF9yZWZyZXNoaW5nQWxsID0gU2Nyb2xsVHJpZ2dlci5pc1JlZnJlc2hpbmcgPSBmYWxzZTtcblxuICBfZGlzcGF0Y2goXCJyZWZyZXNoXCIpO1xufSxcbiAgICBfbGFzdFNjcm9sbCA9IDAsXG4gICAgX2RpcmVjdGlvbiA9IDEsXG4gICAgX3ByaW1hcnksXG4gICAgX3VwZGF0ZUFsbCA9IGZ1bmN0aW9uIF91cGRhdGVBbGwoZm9yY2UpIHtcbiAgaWYgKGZvcmNlID09PSAyIHx8ICFfcmVmcmVzaGluZ0FsbCAmJiAhX2lzUmV2ZXJ0ZWQpIHtcbiAgICAvLyBfaXNSZXZlcnRlZCBjb3VsZCBiZSB0cnVlIGlmLCBmb3IgZXhhbXBsZSwgYSBtYXRjaE1lZGlhKCkgaXMgaW4gdGhlIHByb2Nlc3Mgb2YgZXhlY3V0aW5nLiBXZSBkb24ndCB3YW50IHRvIHVwZGF0ZSBkdXJpbmcgdGhlIHRpbWUgZXZlcnl0aGluZyBpcyByZXZlcnRlZC5cbiAgICBTY3JvbGxUcmlnZ2VyLmlzVXBkYXRpbmcgPSB0cnVlO1xuICAgIF9wcmltYXJ5ICYmIF9wcmltYXJ5LnVwZGF0ZSgwKTsgLy8gU2Nyb2xsU21vb3RoZXIgdXNlcyByZWZyZXNoUHJpb3JpdHkgLTk5OTkgdG8gYmVjb21lIHRoZSBwcmltYXJ5IHRoYXQgZ2V0cyB1cGRhdGVkIGJlZm9yZSBhbGwgb3RoZXJzIGJlY2F1c2UgaXQgYWZmZWN0cyB0aGUgc2Nyb2xsIHBvc2l0aW9uLlxuXG4gICAgdmFyIGwgPSBfdHJpZ2dlcnMubGVuZ3RoLFxuICAgICAgICB0aW1lID0gX2dldFRpbWUoKSxcbiAgICAgICAgcmVjb3JkVmVsb2NpdHkgPSB0aW1lIC0gX3RpbWUxID49IDUwLFxuICAgICAgICBzY3JvbGwgPSBsICYmIF90cmlnZ2Vyc1swXS5zY3JvbGwoKTtcblxuICAgIF9kaXJlY3Rpb24gPSBfbGFzdFNjcm9sbCA+IHNjcm9sbCA/IC0xIDogMTtcbiAgICBfcmVmcmVzaGluZ0FsbCB8fCAoX2xhc3RTY3JvbGwgPSBzY3JvbGwpO1xuXG4gICAgaWYgKHJlY29yZFZlbG9jaXR5KSB7XG4gICAgICBpZiAoX2xhc3RTY3JvbGxUaW1lICYmICFfcG9pbnRlcklzRG93biAmJiB0aW1lIC0gX2xhc3RTY3JvbGxUaW1lID4gMjAwKSB7XG4gICAgICAgIF9sYXN0U2Nyb2xsVGltZSA9IDA7XG5cbiAgICAgICAgX2Rpc3BhdGNoKFwic2Nyb2xsRW5kXCIpO1xuICAgICAgfVxuXG4gICAgICBfdGltZTIgPSBfdGltZTE7XG4gICAgICBfdGltZTEgPSB0aW1lO1xuICAgIH1cblxuICAgIGlmIChfZGlyZWN0aW9uIDwgMCkge1xuICAgICAgX2kgPSBsO1xuXG4gICAgICB3aGlsZSAoX2ktLSA+IDApIHtcbiAgICAgICAgX3RyaWdnZXJzW19pXSAmJiBfdHJpZ2dlcnNbX2ldLnVwZGF0ZSgwLCByZWNvcmRWZWxvY2l0eSk7XG4gICAgICB9XG5cbiAgICAgIF9kaXJlY3Rpb24gPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKF9pID0gMDsgX2kgPCBsOyBfaSsrKSB7XG4gICAgICAgIF90cmlnZ2Vyc1tfaV0gJiYgX3RyaWdnZXJzW19pXS51cGRhdGUoMCwgcmVjb3JkVmVsb2NpdHkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIFNjcm9sbFRyaWdnZXIuaXNVcGRhdGluZyA9IGZhbHNlO1xuICB9XG5cbiAgX3JhZklEID0gMDtcbn0sXG4gICAgX3Byb3BOYW1lc1RvQ29weSA9IFtfbGVmdCwgX3RvcCwgX2JvdHRvbSwgX3JpZ2h0LCBfbWFyZ2luICsgX0JvdHRvbSwgX21hcmdpbiArIF9SaWdodCwgX21hcmdpbiArIF9Ub3AsIF9tYXJnaW4gKyBfTGVmdCwgXCJkaXNwbGF5XCIsIFwiZmxleFNocmlua1wiLCBcImZsb2F0XCIsIFwiekluZGV4XCIsIFwiZ3JpZENvbHVtblN0YXJ0XCIsIFwiZ3JpZENvbHVtbkVuZFwiLCBcImdyaWRSb3dTdGFydFwiLCBcImdyaWRSb3dFbmRcIiwgXCJncmlkQXJlYVwiLCBcImp1c3RpZnlTZWxmXCIsIFwiYWxpZ25TZWxmXCIsIFwicGxhY2VTZWxmXCIsIFwib3JkZXJcIl0sXG4gICAgX3N0YXRlUHJvcHMgPSBfcHJvcE5hbWVzVG9Db3B5LmNvbmNhdChbX3dpZHRoLCBfaGVpZ2h0LCBcImJveFNpemluZ1wiLCBcIm1heFwiICsgX1dpZHRoLCBcIm1heFwiICsgX0hlaWdodCwgXCJwb3NpdGlvblwiLCBfbWFyZ2luLCBfcGFkZGluZywgX3BhZGRpbmcgKyBfVG9wLCBfcGFkZGluZyArIF9SaWdodCwgX3BhZGRpbmcgKyBfQm90dG9tLCBfcGFkZGluZyArIF9MZWZ0XSksXG4gICAgX3N3YXBQaW5PdXQgPSBmdW5jdGlvbiBfc3dhcFBpbk91dChwaW4sIHNwYWNlciwgc3RhdGUpIHtcbiAgX3NldFN0YXRlKHN0YXRlKTtcblxuICB2YXIgY2FjaGUgPSBwaW4uX2dzYXA7XG5cbiAgaWYgKGNhY2hlLnNwYWNlcklzTmF0aXZlKSB7XG4gICAgX3NldFN0YXRlKGNhY2hlLnNwYWNlclN0YXRlKTtcbiAgfSBlbHNlIGlmIChwaW4uX2dzYXAuc3dhcHBlZEluKSB7XG4gICAgdmFyIHBhcmVudCA9IHNwYWNlci5wYXJlbnROb2RlO1xuXG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgcGFyZW50Lmluc2VydEJlZm9yZShwaW4sIHNwYWNlcik7XG4gICAgICBwYXJlbnQucmVtb3ZlQ2hpbGQoc3BhY2VyKTtcbiAgICB9XG4gIH1cblxuICBwaW4uX2dzYXAuc3dhcHBlZEluID0gZmFsc2U7XG59LFxuICAgIF9zd2FwUGluSW4gPSBmdW5jdGlvbiBfc3dhcFBpbkluKHBpbiwgc3BhY2VyLCBjcywgc3BhY2VyU3RhdGUpIHtcbiAgaWYgKCFwaW4uX2dzYXAuc3dhcHBlZEluKSB7XG4gICAgdmFyIGkgPSBfcHJvcE5hbWVzVG9Db3B5Lmxlbmd0aCxcbiAgICAgICAgc3BhY2VyU3R5bGUgPSBzcGFjZXIuc3R5bGUsXG4gICAgICAgIHBpblN0eWxlID0gcGluLnN0eWxlLFxuICAgICAgICBwO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgcCA9IF9wcm9wTmFtZXNUb0NvcHlbaV07XG4gICAgICBzcGFjZXJTdHlsZVtwXSA9IGNzW3BdO1xuICAgIH1cblxuICAgIHNwYWNlclN0eWxlLnBvc2l0aW9uID0gY3MucG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIiA/IFwiYWJzb2x1dGVcIiA6IFwicmVsYXRpdmVcIjtcbiAgICBjcy5kaXNwbGF5ID09PSBcImlubGluZVwiICYmIChzcGFjZXJTdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmUtYmxvY2tcIik7XG4gICAgcGluU3R5bGVbX2JvdHRvbV0gPSBwaW5TdHlsZVtfcmlnaHRdID0gXCJhdXRvXCI7XG4gICAgc3BhY2VyU3R5bGUuZmxleEJhc2lzID0gY3MuZmxleEJhc2lzIHx8IFwiYXV0b1wiO1xuICAgIHNwYWNlclN0eWxlLm92ZXJmbG93ID0gXCJ2aXNpYmxlXCI7XG4gICAgc3BhY2VyU3R5bGUuYm94U2l6aW5nID0gXCJib3JkZXItYm94XCI7XG4gICAgc3BhY2VyU3R5bGVbX3dpZHRoXSA9IF9nZXRTaXplKHBpbiwgX2hvcml6b250YWwpICsgX3B4O1xuICAgIHNwYWNlclN0eWxlW19oZWlnaHRdID0gX2dldFNpemUocGluLCBfdmVydGljYWwpICsgX3B4O1xuICAgIHNwYWNlclN0eWxlW19wYWRkaW5nXSA9IHBpblN0eWxlW19tYXJnaW5dID0gcGluU3R5bGVbX3RvcF0gPSBwaW5TdHlsZVtfbGVmdF0gPSBcIjBcIjtcblxuICAgIF9zZXRTdGF0ZShzcGFjZXJTdGF0ZSk7XG5cbiAgICBwaW5TdHlsZVtfd2lkdGhdID0gcGluU3R5bGVbXCJtYXhcIiArIF9XaWR0aF0gPSBjc1tfd2lkdGhdO1xuICAgIHBpblN0eWxlW19oZWlnaHRdID0gcGluU3R5bGVbXCJtYXhcIiArIF9IZWlnaHRdID0gY3NbX2hlaWdodF07XG4gICAgcGluU3R5bGVbX3BhZGRpbmddID0gY3NbX3BhZGRpbmddO1xuXG4gICAgaWYgKHBpbi5wYXJlbnROb2RlICE9PSBzcGFjZXIpIHtcbiAgICAgIHBpbi5wYXJlbnROb2RlLmluc2VydEJlZm9yZShzcGFjZXIsIHBpbik7XG4gICAgICBzcGFjZXIuYXBwZW5kQ2hpbGQocGluKTtcbiAgICB9XG5cbiAgICBwaW4uX2dzYXAuc3dhcHBlZEluID0gdHJ1ZTtcbiAgfVxufSxcbiAgICBfY2Fwc0V4cCA9IC8oW0EtWl0pL2csXG4gICAgX3NldFN0YXRlID0gZnVuY3Rpb24gX3NldFN0YXRlKHN0YXRlKSB7XG4gIGlmIChzdGF0ZSkge1xuICAgIHZhciBzdHlsZSA9IHN0YXRlLnQuc3R5bGUsXG4gICAgICAgIGwgPSBzdGF0ZS5sZW5ndGgsXG4gICAgICAgIGkgPSAwLFxuICAgICAgICBwLFxuICAgICAgICB2YWx1ZTtcbiAgICAoc3RhdGUudC5fZ3NhcCB8fCBnc2FwLmNvcmUuZ2V0Q2FjaGUoc3RhdGUudCkpLnVuY2FjaGUgPSAxOyAvLyBvdGhlcndpc2UgdHJhbnNmb3JtcyBtYXkgYmUgb2ZmXG5cbiAgICBmb3IgKDsgaSA8IGw7IGkgKz0gMikge1xuICAgICAgdmFsdWUgPSBzdGF0ZVtpICsgMV07XG4gICAgICBwID0gc3RhdGVbaV07XG5cbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBzdHlsZVtwXSA9IHZhbHVlO1xuICAgICAgfSBlbHNlIGlmIChzdHlsZVtwXSkge1xuICAgICAgICBzdHlsZS5yZW1vdmVQcm9wZXJ0eShwLnJlcGxhY2UoX2NhcHNFeHAsIFwiLSQxXCIpLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufSxcbiAgICBfZ2V0U3RhdGUgPSBmdW5jdGlvbiBfZ2V0U3RhdGUoZWxlbWVudCkge1xuICAvLyByZXR1cm5zIGFuIEFycmF5IHdpdGggYWx0ZXJuYXRpbmcgdmFsdWVzIGxpa2UgW3Byb3BlcnR5LCB2YWx1ZSwgcHJvcGVydHksIHZhbHVlXSBhbmQgYSBcInRcIiBwcm9wZXJ0eSBwb2ludGluZyB0byB0aGUgdGFyZ2V0IChlbGVtZW50KS4gTWFrZXMgaXQgZmFzdCBhbmQgY2hlYXAuXG4gIHZhciBsID0gX3N0YXRlUHJvcHMubGVuZ3RoLFxuICAgICAgc3R5bGUgPSBlbGVtZW50LnN0eWxlLFxuICAgICAgc3RhdGUgPSBbXSxcbiAgICAgIGkgPSAwO1xuXG4gIGZvciAoOyBpIDwgbDsgaSsrKSB7XG4gICAgc3RhdGUucHVzaChfc3RhdGVQcm9wc1tpXSwgc3R5bGVbX3N0YXRlUHJvcHNbaV1dKTtcbiAgfVxuXG4gIHN0YXRlLnQgPSBlbGVtZW50O1xuICByZXR1cm4gc3RhdGU7XG59LFxuICAgIF9jb3B5U3RhdGUgPSBmdW5jdGlvbiBfY29weVN0YXRlKHN0YXRlLCBvdmVycmlkZSwgb21pdE9mZnNldHMpIHtcbiAgdmFyIHJlc3VsdCA9IFtdLFxuICAgICAgbCA9IHN0YXRlLmxlbmd0aCxcbiAgICAgIGkgPSBvbWl0T2Zmc2V0cyA/IDggOiAwLFxuICAgICAgLy8gc2tpcCB0b3AsIGxlZnQsIHJpZ2h0LCBib3R0b20gaWYgb21pdE9mZnNldHMgaXMgdHJ1ZVxuICBwO1xuXG4gIGZvciAoOyBpIDwgbDsgaSArPSAyKSB7XG4gICAgcCA9IHN0YXRlW2ldO1xuICAgIHJlc3VsdC5wdXNoKHAsIHAgaW4gb3ZlcnJpZGUgPyBvdmVycmlkZVtwXSA6IHN0YXRlW2kgKyAxXSk7XG4gIH1cblxuICByZXN1bHQudCA9IHN0YXRlLnQ7XG4gIHJldHVybiByZXN1bHQ7XG59LFxuICAgIF93aW5PZmZzZXRzID0ge1xuICBsZWZ0OiAwLFxuICB0b3A6IDBcbn0sXG4gICAgLy8gLy8gcG90ZW50aWFsIGZ1dHVyZSBmZWF0dXJlICg/KSBBbGxvdyB1c2VycyB0byBjYWxjdWxhdGUgd2hlcmUgYSB0cmlnZ2VyIGhpdHMgKHNjcm9sbCBwb3NpdGlvbikgbGlrZSBnZXRTY3JvbGxQb3NpdGlvbihcIiNpZFwiLCBcInRvcCBib3R0b21cIilcbi8vIF9nZXRTY3JvbGxQb3NpdGlvbiA9ICh0cmlnZ2VyLCBwb3NpdGlvbiwge3Njcm9sbGVyLCBjb250YWluZXJBbmltYXRpb24sIGhvcml6b250YWx9KSA9PiB7XG4vLyBcdHNjcm9sbGVyID0gX2dldFRhcmdldChzY3JvbGxlciB8fCBfd2luKTtcbi8vIFx0bGV0IGRpcmVjdGlvbiA9IGhvcml6b250YWwgPyBfaG9yaXpvbnRhbCA6IF92ZXJ0aWNhbCxcbi8vIFx0XHRpc1ZpZXdwb3J0ID0gX2lzVmlld3BvcnQoc2Nyb2xsZXIpO1xuLy8gXHRfZ2V0U2l6ZUZ1bmMoc2Nyb2xsZXIsIGlzVmlld3BvcnQsIGRpcmVjdGlvbik7XG4vLyBcdHJldHVybiBfcGFyc2VQb3NpdGlvbihwb3NpdGlvbiwgX2dldFRhcmdldCh0cmlnZ2VyKSwgX2dldFNpemVGdW5jKHNjcm9sbGVyLCBpc1ZpZXdwb3J0LCBkaXJlY3Rpb24pKCksIGRpcmVjdGlvbiwgX2dldFNjcm9sbEZ1bmMoc2Nyb2xsZXIsIGRpcmVjdGlvbikoKSwgMCwgMCwgMCwgX2dldE9mZnNldHNGdW5jKHNjcm9sbGVyLCBpc1ZpZXdwb3J0KSgpLCBpc1ZpZXdwb3J0ID8gMCA6IHBhcnNlRmxvYXQoX2dldENvbXB1dGVkU3R5bGUoc2Nyb2xsZXIpW1wiYm9yZGVyXCIgKyBkaXJlY3Rpb24ucDIgKyBfV2lkdGhdKSB8fCAwLCAwLCBjb250YWluZXJBbmltYXRpb24gPyBjb250YWluZXJBbmltYXRpb24uZHVyYXRpb24oKSA6IF9tYXhTY3JvbGwoc2Nyb2xsZXIpLCBjb250YWluZXJBbmltYXRpb24pO1xuLy8gfSxcbl9wYXJzZVBvc2l0aW9uID0gZnVuY3Rpb24gX3BhcnNlUG9zaXRpb24odmFsdWUsIHRyaWdnZXIsIHNjcm9sbGVyU2l6ZSwgZGlyZWN0aW9uLCBzY3JvbGwsIG1hcmtlciwgbWFya2VyU2Nyb2xsZXIsIHNlbGYsIHNjcm9sbGVyQm91bmRzLCBib3JkZXJXaWR0aCwgdXNlRml4ZWRQb3NpdGlvbiwgc2Nyb2xsZXJNYXgsIGNvbnRhaW5lckFuaW1hdGlvbiwgY2xhbXBaZXJvUHJvcCkge1xuICBfaXNGdW5jdGlvbih2YWx1ZSkgJiYgKHZhbHVlID0gdmFsdWUoc2VsZikpO1xuXG4gIGlmIChfaXNTdHJpbmcodmFsdWUpICYmIHZhbHVlLnN1YnN0cigwLCAzKSA9PT0gXCJtYXhcIikge1xuICAgIHZhbHVlID0gc2Nyb2xsZXJNYXggKyAodmFsdWUuY2hhckF0KDQpID09PSBcIj1cIiA/IF9vZmZzZXRUb1B4KFwiMFwiICsgdmFsdWUuc3Vic3RyKDMpLCBzY3JvbGxlclNpemUpIDogMCk7XG4gIH1cblxuICB2YXIgdGltZSA9IGNvbnRhaW5lckFuaW1hdGlvbiA/IGNvbnRhaW5lckFuaW1hdGlvbi50aW1lKCkgOiAwLFxuICAgICAgcDEsXG4gICAgICBwMixcbiAgICAgIGVsZW1lbnQ7XG4gIGNvbnRhaW5lckFuaW1hdGlvbiAmJiBjb250YWluZXJBbmltYXRpb24uc2VlaygwKTtcbiAgaXNOYU4odmFsdWUpIHx8ICh2YWx1ZSA9ICt2YWx1ZSk7IC8vIGNvbnZlcnQgYSBzdHJpbmcgbnVtYmVyIGxpa2UgXCI0NVwiIHRvIGFuIGFjdHVhbCBudW1iZXJcblxuICBpZiAoIV9pc051bWJlcih2YWx1ZSkpIHtcbiAgICBfaXNGdW5jdGlvbih0cmlnZ2VyKSAmJiAodHJpZ2dlciA9IHRyaWdnZXIoc2VsZikpO1xuICAgIHZhciBvZmZzZXRzID0gKHZhbHVlIHx8IFwiMFwiKS5zcGxpdChcIiBcIiksXG4gICAgICAgIGJvdW5kcyxcbiAgICAgICAgbG9jYWxPZmZzZXQsXG4gICAgICAgIGdsb2JhbE9mZnNldCxcbiAgICAgICAgZGlzcGxheTtcbiAgICBlbGVtZW50ID0gX2dldFRhcmdldCh0cmlnZ2VyLCBzZWxmKSB8fCBfYm9keTtcbiAgICBib3VuZHMgPSBfZ2V0Qm91bmRzKGVsZW1lbnQpIHx8IHt9O1xuXG4gICAgaWYgKCghYm91bmRzIHx8ICFib3VuZHMubGVmdCAmJiAhYm91bmRzLnRvcCkgJiYgX2dldENvbXB1dGVkU3R5bGUoZWxlbWVudCkuZGlzcGxheSA9PT0gXCJub25lXCIpIHtcbiAgICAgIC8vIGlmIGRpc3BsYXkgaXMgXCJub25lXCIsIGl0IHdvbid0IHJlcG9ydCBnZXRCb3VuZGluZ0NsaWVudFJlY3QoKSBwcm9wZXJseVxuICAgICAgZGlzcGxheSA9IGVsZW1lbnQuc3R5bGUuZGlzcGxheTtcbiAgICAgIGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICAgIGJvdW5kcyA9IF9nZXRCb3VuZHMoZWxlbWVudCk7XG4gICAgICBkaXNwbGF5ID8gZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gZGlzcGxheSA6IGVsZW1lbnQuc3R5bGUucmVtb3ZlUHJvcGVydHkoXCJkaXNwbGF5XCIpO1xuICAgIH1cblxuICAgIGxvY2FsT2Zmc2V0ID0gX29mZnNldFRvUHgob2Zmc2V0c1swXSwgYm91bmRzW2RpcmVjdGlvbi5kXSk7XG4gICAgZ2xvYmFsT2Zmc2V0ID0gX29mZnNldFRvUHgob2Zmc2V0c1sxXSB8fCBcIjBcIiwgc2Nyb2xsZXJTaXplKTtcbiAgICB2YWx1ZSA9IGJvdW5kc1tkaXJlY3Rpb24ucF0gLSBzY3JvbGxlckJvdW5kc1tkaXJlY3Rpb24ucF0gLSBib3JkZXJXaWR0aCArIGxvY2FsT2Zmc2V0ICsgc2Nyb2xsIC0gZ2xvYmFsT2Zmc2V0O1xuICAgIG1hcmtlclNjcm9sbGVyICYmIF9wb3NpdGlvbk1hcmtlcihtYXJrZXJTY3JvbGxlciwgZ2xvYmFsT2Zmc2V0LCBkaXJlY3Rpb24sIHNjcm9sbGVyU2l6ZSAtIGdsb2JhbE9mZnNldCA8IDIwIHx8IG1hcmtlclNjcm9sbGVyLl9pc1N0YXJ0ICYmIGdsb2JhbE9mZnNldCA+IDIwKTtcbiAgICBzY3JvbGxlclNpemUgLT0gc2Nyb2xsZXJTaXplIC0gZ2xvYmFsT2Zmc2V0OyAvLyBhZGp1c3QgZm9yIHRoZSBtYXJrZXJcbiAgfSBlbHNlIHtcbiAgICBjb250YWluZXJBbmltYXRpb24gJiYgKHZhbHVlID0gZ3NhcC51dGlscy5tYXBSYW5nZShjb250YWluZXJBbmltYXRpb24uc2Nyb2xsVHJpZ2dlci5zdGFydCwgY29udGFpbmVyQW5pbWF0aW9uLnNjcm9sbFRyaWdnZXIuZW5kLCAwLCBzY3JvbGxlck1heCwgdmFsdWUpKTtcbiAgICBtYXJrZXJTY3JvbGxlciAmJiBfcG9zaXRpb25NYXJrZXIobWFya2VyU2Nyb2xsZXIsIHNjcm9sbGVyU2l6ZSwgZGlyZWN0aW9uLCB0cnVlKTtcbiAgfVxuXG4gIGlmIChjbGFtcFplcm9Qcm9wKSB7XG4gICAgc2VsZltjbGFtcFplcm9Qcm9wXSA9IHZhbHVlIHx8IC0wLjAwMTtcbiAgICB2YWx1ZSA8IDAgJiYgKHZhbHVlID0gMCk7XG4gIH1cblxuICBpZiAobWFya2VyKSB7XG4gICAgdmFyIHBvc2l0aW9uID0gdmFsdWUgKyBzY3JvbGxlclNpemUsXG4gICAgICAgIGlzU3RhcnQgPSBtYXJrZXIuX2lzU3RhcnQ7XG4gICAgcDEgPSBcInNjcm9sbFwiICsgZGlyZWN0aW9uLmQyO1xuXG4gICAgX3Bvc2l0aW9uTWFya2VyKG1hcmtlciwgcG9zaXRpb24sIGRpcmVjdGlvbiwgaXNTdGFydCAmJiBwb3NpdGlvbiA+IDIwIHx8ICFpc1N0YXJ0ICYmICh1c2VGaXhlZFBvc2l0aW9uID8gTWF0aC5tYXgoX2JvZHlbcDFdLCBfZG9jRWxbcDFdKSA6IG1hcmtlci5wYXJlbnROb2RlW3AxXSkgPD0gcG9zaXRpb24gKyAxKTtcblxuICAgIGlmICh1c2VGaXhlZFBvc2l0aW9uKSB7XG4gICAgICBzY3JvbGxlckJvdW5kcyA9IF9nZXRCb3VuZHMobWFya2VyU2Nyb2xsZXIpO1xuICAgICAgdXNlRml4ZWRQb3NpdGlvbiAmJiAobWFya2VyLnN0eWxlW2RpcmVjdGlvbi5vcC5wXSA9IHNjcm9sbGVyQm91bmRzW2RpcmVjdGlvbi5vcC5wXSAtIGRpcmVjdGlvbi5vcC5tIC0gbWFya2VyLl9vZmZzZXQgKyBfcHgpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChjb250YWluZXJBbmltYXRpb24gJiYgZWxlbWVudCkge1xuICAgIHAxID0gX2dldEJvdW5kcyhlbGVtZW50KTtcbiAgICBjb250YWluZXJBbmltYXRpb24uc2VlayhzY3JvbGxlck1heCk7XG4gICAgcDIgPSBfZ2V0Qm91bmRzKGVsZW1lbnQpO1xuICAgIGNvbnRhaW5lckFuaW1hdGlvbi5fY2FTY3JvbGxEaXN0ID0gcDFbZGlyZWN0aW9uLnBdIC0gcDJbZGlyZWN0aW9uLnBdO1xuICAgIHZhbHVlID0gdmFsdWUgLyBjb250YWluZXJBbmltYXRpb24uX2NhU2Nyb2xsRGlzdCAqIHNjcm9sbGVyTWF4O1xuICB9XG5cbiAgY29udGFpbmVyQW5pbWF0aW9uICYmIGNvbnRhaW5lckFuaW1hdGlvbi5zZWVrKHRpbWUpO1xuICByZXR1cm4gY29udGFpbmVyQW5pbWF0aW9uID8gdmFsdWUgOiBNYXRoLnJvdW5kKHZhbHVlKTtcbn0sXG4gICAgX3ByZWZpeEV4cCA9IC8od2Via2l0fG1venxsZW5ndGh8Y3NzVGV4dHxpbnNldCkvaSxcbiAgICBfcmVwYXJlbnQgPSBmdW5jdGlvbiBfcmVwYXJlbnQoZWxlbWVudCwgcGFyZW50LCB0b3AsIGxlZnQpIHtcbiAgaWYgKGVsZW1lbnQucGFyZW50Tm9kZSAhPT0gcGFyZW50KSB7XG4gICAgdmFyIHN0eWxlID0gZWxlbWVudC5zdHlsZSxcbiAgICAgICAgcCxcbiAgICAgICAgY3M7XG5cbiAgICBpZiAocGFyZW50ID09PSBfYm9keSkge1xuICAgICAgZWxlbWVudC5fc3RPcmlnID0gc3R5bGUuY3NzVGV4dDsgLy8gcmVjb3JkIG9yaWdpbmFsIGlubGluZSBzdHlsZXMgc28gd2UgY2FuIHJldmVydCB0aGVtIGxhdGVyXG5cbiAgICAgIGNzID0gX2dldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG5cbiAgICAgIGZvciAocCBpbiBjcykge1xuICAgICAgICAvLyBtdXN0IGNvcHkgYWxsIHJlbGV2YW50IHN0eWxlcyB0byBlbnN1cmUgdGhhdCBub3RoaW5nIGNoYW5nZXMgdmlzdWFsbHkgd2hlbiB3ZSByZXBhcmVudCB0byB0aGUgPGJvZHk+LiBTa2lwIHRoZSB2ZW5kb3IgcHJlZml4ZWQgb25lcy5cbiAgICAgICAgaWYgKCErcCAmJiAhX3ByZWZpeEV4cC50ZXN0KHApICYmIGNzW3BdICYmIHR5cGVvZiBzdHlsZVtwXSA9PT0gXCJzdHJpbmdcIiAmJiBwICE9PSBcIjBcIikge1xuICAgICAgICAgIHN0eWxlW3BdID0gY3NbcF07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc3R5bGUudG9wID0gdG9wO1xuICAgICAgc3R5bGUubGVmdCA9IGxlZnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlLmNzc1RleHQgPSBlbGVtZW50Ll9zdE9yaWc7XG4gICAgfVxuXG4gICAgZ3NhcC5jb3JlLmdldENhY2hlKGVsZW1lbnQpLnVuY2FjaGUgPSAxO1xuICAgIHBhcmVudC5hcHBlbmRDaGlsZChlbGVtZW50KTtcbiAgfVxufSxcbiAgICBfaW50ZXJydXB0aW9uVHJhY2tlciA9IGZ1bmN0aW9uIF9pbnRlcnJ1cHRpb25UcmFja2VyKGdldFZhbHVlRnVuYywgaW5pdGlhbFZhbHVlLCBvbkludGVycnVwdCkge1xuICB2YXIgbGFzdDEgPSBpbml0aWFsVmFsdWUsXG4gICAgICBsYXN0MiA9IGxhc3QxO1xuICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgdmFyIGN1cnJlbnQgPSBNYXRoLnJvdW5kKGdldFZhbHVlRnVuYygpKTsgLy8gcm91bmQgYmVjYXVzZSBpbiBzb21lIFt2ZXJ5IHVuY29tbW9uXSBXaW5kb3dzIGVudmlyb25tZW50cywgc2Nyb2xsIGNhbiBnZXQgcmVwb3J0ZWQgd2l0aCBkZWNpbWFscyBldmVuIHRob3VnaCBpdCB3YXMgc2V0IHdpdGhvdXQuXG5cbiAgICBpZiAoY3VycmVudCAhPT0gbGFzdDEgJiYgY3VycmVudCAhPT0gbGFzdDIgJiYgTWF0aC5hYnMoY3VycmVudCAtIGxhc3QxKSA+IDMgJiYgTWF0aC5hYnMoY3VycmVudCAtIGxhc3QyKSA+IDMpIHtcbiAgICAgIC8vIGlmIHRoZSB1c2VyIHNjcm9sbHMsIGtpbGwgdGhlIHR3ZWVuLiBpT1MgU2FmYXJpIGludGVybWl0dGVudGx5IG1pc3JlcG9ydHMgdGhlIHNjcm9sbCBwb3NpdGlvbiwgaXQgbWF5IGJlIHRoZSBtb3N0IHJlY2VudGx5LXNldCBvbmUgb3IgdGhlIG9uZSBiZWZvcmUgdGhhdCEgV2hlbiBTYWZhcmkgaXMgem9vbWVkIChDTUQtKyksIGl0IG9mdGVuIG1pc3JlcG9ydHMgYXMgMSBwaXhlbCBvZmYgdG9vISBTbyBpZiB3ZSBzZXQgdGhlIHNjcm9sbCBwb3NpdGlvbiB0byAxMjUsIGZvciBleGFtcGxlLCBpdCdsbCBhY3R1YWxseSByZXBvcnQgaXQgYXMgMTI0LlxuICAgICAgdmFsdWUgPSBjdXJyZW50O1xuICAgICAgb25JbnRlcnJ1cHQgJiYgb25JbnRlcnJ1cHQoKTtcbiAgICB9XG5cbiAgICBsYXN0MiA9IGxhc3QxO1xuICAgIGxhc3QxID0gdmFsdWU7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9O1xufSxcbiAgICBfc2hpZnRNYXJrZXIgPSBmdW5jdGlvbiBfc2hpZnRNYXJrZXIobWFya2VyLCBkaXJlY3Rpb24sIHZhbHVlKSB7XG4gIHZhciB2YXJzID0ge307XG4gIHZhcnNbZGlyZWN0aW9uLnBdID0gXCIrPVwiICsgdmFsdWU7XG4gIGdzYXAuc2V0KG1hcmtlciwgdmFycyk7XG59LFxuICAgIC8vIF9tZXJnZUFuaW1hdGlvbnMgPSBhbmltYXRpb25zID0+IHtcbi8vIFx0bGV0IHRsID0gZ3NhcC50aW1lbGluZSh7c21vb3RoQ2hpbGRUaW1pbmc6IHRydWV9KS5zdGFydFRpbWUoTWF0aC5taW4oLi4uYW5pbWF0aW9ucy5tYXAoYSA9PiBhLmdsb2JhbFRpbWUoMCkpKSk7XG4vLyBcdGFuaW1hdGlvbnMuZm9yRWFjaChhID0+IHtsZXQgdGltZSA9IGEudG90YWxUaW1lKCk7IHRsLmFkZChhKTsgYS50b3RhbFRpbWUodGltZSk7IH0pO1xuLy8gXHR0bC5zbW9vdGhDaGlsZFRpbWluZyA9IGZhbHNlO1xuLy8gXHRyZXR1cm4gdGw7XG4vLyB9LFxuLy8gcmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgY2FuIGJlIHVzZWQgdG8gdHdlZW4gdGhlIHNjcm9sbCBwb3NpdGlvbiBpbiB0aGUgZGlyZWN0aW9uIHByb3ZpZGVkLCBhbmQgd2hlbiBkb2luZyBzbyBpdCdsbCBhZGQgYSAudHdlZW4gcHJvcGVydHkgdG8gdGhlIEZVTkNUSU9OIGl0c2VsZiwgYW5kIHJlbW92ZSBpdCB3aGVuIHRoZSB0d2VlbiBjb21wbGV0ZXMgb3IgZ2V0cyBraWxsZWQuIFRoaXMgZ2l2ZXMgdXMgYSB3YXkgdG8gaGF2ZSBtdWx0aXBsZSBTY3JvbGxUcmlnZ2VycyB1c2UgYSBjZW50cmFsIGZ1bmN0aW9uIGZvciBhbnkgZ2l2ZW4gc2Nyb2xsZXIgYW5kIHNlZSBpZiB0aGVyZSdzIGEgc2Nyb2xsIHR3ZWVuIHJ1bm5pbmcgKHdoaWNoIHdvdWxkIGFmZmVjdCBpZi9ob3cgdGhpbmdzIGdldCB1cGRhdGVkKVxuX2dldFR3ZWVuQ3JlYXRvciA9IGZ1bmN0aW9uIF9nZXRUd2VlbkNyZWF0b3Ioc2Nyb2xsZXIsIGRpcmVjdGlvbikge1xuICB2YXIgZ2V0U2Nyb2xsID0gX2dldFNjcm9sbEZ1bmMoc2Nyb2xsZXIsIGRpcmVjdGlvbiksXG4gICAgICBwcm9wID0gXCJfc2Nyb2xsXCIgKyBkaXJlY3Rpb24ucDIsXG4gICAgICAvLyBhZGQgYSB0d2VlbmFibGUgcHJvcGVydHkgdG8gdGhlIHNjcm9sbGVyIHRoYXQncyBhIGdldHRlci9zZXR0ZXIgZnVuY3Rpb24sIGxpa2UgX3Njcm9sbFRvcCBvciBfc2Nyb2xsTGVmdC4gVGhpcyB3YXksIGlmIHNvbWVvbmUgZG9lcyBnc2FwLmtpbGxUd2VlbnNPZihzY3JvbGxlcikgaXQnbGwga2lsbCB0aGUgc2Nyb2xsIHR3ZWVuLlxuICBnZXRUd2VlbiA9IGZ1bmN0aW9uIGdldFR3ZWVuKHNjcm9sbFRvLCB2YXJzLCBpbml0aWFsVmFsdWUsIGNoYW5nZTEsIGNoYW5nZTIpIHtcbiAgICB2YXIgdHdlZW4gPSBnZXRUd2Vlbi50d2VlbixcbiAgICAgICAgb25Db21wbGV0ZSA9IHZhcnMub25Db21wbGV0ZSxcbiAgICAgICAgbW9kaWZpZXJzID0ge307XG4gICAgaW5pdGlhbFZhbHVlID0gaW5pdGlhbFZhbHVlIHx8IGdldFNjcm9sbCgpO1xuXG4gICAgdmFyIGNoZWNrRm9ySW50ZXJydXB0aW9uID0gX2ludGVycnVwdGlvblRyYWNrZXIoZ2V0U2Nyb2xsLCBpbml0aWFsVmFsdWUsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHR3ZWVuLmtpbGwoKTtcbiAgICAgIGdldFR3ZWVuLnR3ZWVuID0gMDtcbiAgICB9KTtcblxuICAgIGNoYW5nZTIgPSBjaGFuZ2UxICYmIGNoYW5nZTIgfHwgMDsgLy8gaWYgY2hhbmdlMSBpcyAwLCB3ZSBzZXQgdGhhdCB0byB0aGUgZGlmZmVyZW5jZSBhbmQgaWdub3JlIGNoYW5nZTIuIE90aGVyd2lzZSwgdGhlcmUgd291bGQgYmUgYSBjb21wb3VuZCBlZmZlY3QuXG5cbiAgICBjaGFuZ2UxID0gY2hhbmdlMSB8fCBzY3JvbGxUbyAtIGluaXRpYWxWYWx1ZTtcbiAgICB0d2VlbiAmJiB0d2Vlbi5raWxsKCk7XG4gICAgdmFyc1twcm9wXSA9IHNjcm9sbFRvO1xuICAgIHZhcnMuaW5oZXJpdCA9IGZhbHNlO1xuICAgIHZhcnMubW9kaWZpZXJzID0gbW9kaWZpZXJzO1xuXG4gICAgbW9kaWZpZXJzW3Byb3BdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGNoZWNrRm9ySW50ZXJydXB0aW9uKGluaXRpYWxWYWx1ZSArIGNoYW5nZTEgKiB0d2Vlbi5yYXRpbyArIGNoYW5nZTIgKiB0d2Vlbi5yYXRpbyAqIHR3ZWVuLnJhdGlvKTtcbiAgICB9O1xuXG4gICAgdmFycy5vblVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF9zY3JvbGxlcnMuY2FjaGUrKztcbiAgICAgIGdldFR3ZWVuLnR3ZWVuICYmIF91cGRhdGVBbGwoKTsgLy8gaWYgaXQgd2FzIGludGVycnVwdGVkL2tpbGxlZCwgbGlrZSBpbiBhIGNvbnRleHQucmV2ZXJ0KCksIGRvbid0IGZvcmNlIGFuIHVwZGF0ZUFsbCgpXG4gICAgfTtcblxuICAgIHZhcnMub25Db21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGdldFR3ZWVuLnR3ZWVuID0gMDtcbiAgICAgIG9uQ29tcGxldGUgJiYgb25Db21wbGV0ZS5jYWxsKHR3ZWVuKTtcbiAgICB9O1xuXG4gICAgdHdlZW4gPSBnZXRUd2Vlbi50d2VlbiA9IGdzYXAudG8oc2Nyb2xsZXIsIHZhcnMpO1xuICAgIHJldHVybiB0d2VlbjtcbiAgfTtcblxuICBzY3JvbGxlcltwcm9wXSA9IGdldFNjcm9sbDtcblxuICBnZXRTY3JvbGwud2hlZWxIYW5kbGVyID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBnZXRUd2Vlbi50d2VlbiAmJiBnZXRUd2Vlbi50d2Vlbi5raWxsKCkgJiYgKGdldFR3ZWVuLnR3ZWVuID0gMCk7XG4gIH07XG5cbiAgX2FkZExpc3RlbmVyKHNjcm9sbGVyLCBcIndoZWVsXCIsIGdldFNjcm9sbC53aGVlbEhhbmRsZXIpOyAvLyBXaW5kb3dzIG1hY2hpbmVzIGhhbmRsZSBtb3VzZXdoZWVsIHNjcm9sbGluZyBpbiBjaHVua3MgKGxpa2UgXCIzIGxpbmVzIHBlciBzY3JvbGxcIikgbWVhbmluZyB0aGUgdHlwaWNhbCBzdHJhdGVneSBmb3IgY2FuY2VsbGluZyB0aGUgc2Nyb2xsIGlzbid0IGFzIHNlbnNpdGl2ZS4gSXQncyBtdWNoIG1vcmUgbGlrZWx5IHRvIG1hdGNoIG9uZSBvZiB0aGUgcHJldmlvdXMgMiBzY3JvbGwgZXZlbnQgcG9zaXRpb25zLiBTbyB3ZSBraWxsIGFueSBzbmFwcGluZyBhcyBzb29uIGFzIHRoZXJlJ3MgYSB3aGVlbCBldmVudC5cblxuXG4gIFNjcm9sbFRyaWdnZXIuaXNUb3VjaCAmJiBfYWRkTGlzdGVuZXIoc2Nyb2xsZXIsIFwidG91Y2htb3ZlXCIsIGdldFNjcm9sbC53aGVlbEhhbmRsZXIpO1xuICByZXR1cm4gZ2V0VHdlZW47XG59O1xuXG5leHBvcnQgdmFyIFNjcm9sbFRyaWdnZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTY3JvbGxUcmlnZ2VyKHZhcnMsIGFuaW1hdGlvbikge1xuICAgIF9jb3JlSW5pdHRlZCB8fCBTY3JvbGxUcmlnZ2VyLnJlZ2lzdGVyKGdzYXApIHx8IGNvbnNvbGUud2FybihcIlBsZWFzZSBnc2FwLnJlZ2lzdGVyUGx1Z2luKFNjcm9sbFRyaWdnZXIpXCIpO1xuXG4gICAgX2NvbnRleHQodGhpcyk7XG5cbiAgICB0aGlzLmluaXQodmFycywgYW5pbWF0aW9uKTtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTY3JvbGxUcmlnZ2VyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uaW5pdCA9IGZ1bmN0aW9uIGluaXQodmFycywgYW5pbWF0aW9uKSB7XG4gICAgdGhpcy5wcm9ncmVzcyA9IHRoaXMuc3RhcnQgPSAwO1xuICAgIHRoaXMudmFycyAmJiB0aGlzLmtpbGwodHJ1ZSwgdHJ1ZSk7IC8vIGluIGNhc2UgaXQncyBiZWluZyBpbml0dGVkIGFnYWluXG5cbiAgICBpZiAoIV9lbmFibGVkKSB7XG4gICAgICB0aGlzLnVwZGF0ZSA9IHRoaXMucmVmcmVzaCA9IHRoaXMua2lsbCA9IF9wYXNzVGhyb3VnaDtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXJzID0gX3NldERlZmF1bHRzKF9pc1N0cmluZyh2YXJzKSB8fCBfaXNOdW1iZXIodmFycykgfHwgdmFycy5ub2RlVHlwZSA/IHtcbiAgICAgIHRyaWdnZXI6IHZhcnNcbiAgICB9IDogdmFycywgX2RlZmF1bHRzKTtcblxuICAgIHZhciBfdmFycyA9IHZhcnMsXG4gICAgICAgIG9uVXBkYXRlID0gX3ZhcnMub25VcGRhdGUsXG4gICAgICAgIHRvZ2dsZUNsYXNzID0gX3ZhcnMudG9nZ2xlQ2xhc3MsXG4gICAgICAgIGlkID0gX3ZhcnMuaWQsXG4gICAgICAgIG9uVG9nZ2xlID0gX3ZhcnMub25Ub2dnbGUsXG4gICAgICAgIG9uUmVmcmVzaCA9IF92YXJzLm9uUmVmcmVzaCxcbiAgICAgICAgc2NydWIgPSBfdmFycy5zY3J1YixcbiAgICAgICAgdHJpZ2dlciA9IF92YXJzLnRyaWdnZXIsXG4gICAgICAgIHBpbiA9IF92YXJzLnBpbixcbiAgICAgICAgcGluU3BhY2luZyA9IF92YXJzLnBpblNwYWNpbmcsXG4gICAgICAgIGludmFsaWRhdGVPblJlZnJlc2ggPSBfdmFycy5pbnZhbGlkYXRlT25SZWZyZXNoLFxuICAgICAgICBhbnRpY2lwYXRlUGluID0gX3ZhcnMuYW50aWNpcGF0ZVBpbixcbiAgICAgICAgb25TY3J1YkNvbXBsZXRlID0gX3ZhcnMub25TY3J1YkNvbXBsZXRlLFxuICAgICAgICBvblNuYXBDb21wbGV0ZSA9IF92YXJzLm9uU25hcENvbXBsZXRlLFxuICAgICAgICBvbmNlID0gX3ZhcnMub25jZSxcbiAgICAgICAgc25hcCA9IF92YXJzLnNuYXAsXG4gICAgICAgIHBpblJlcGFyZW50ID0gX3ZhcnMucGluUmVwYXJlbnQsXG4gICAgICAgIHBpblNwYWNlciA9IF92YXJzLnBpblNwYWNlcixcbiAgICAgICAgY29udGFpbmVyQW5pbWF0aW9uID0gX3ZhcnMuY29udGFpbmVyQW5pbWF0aW9uLFxuICAgICAgICBmYXN0U2Nyb2xsRW5kID0gX3ZhcnMuZmFzdFNjcm9sbEVuZCxcbiAgICAgICAgcHJldmVudE92ZXJsYXBzID0gX3ZhcnMucHJldmVudE92ZXJsYXBzLFxuICAgICAgICBkaXJlY3Rpb24gPSB2YXJzLmhvcml6b250YWwgfHwgdmFycy5jb250YWluZXJBbmltYXRpb24gJiYgdmFycy5ob3Jpem9udGFsICE9PSBmYWxzZSA/IF9ob3Jpem9udGFsIDogX3ZlcnRpY2FsLFxuICAgICAgICBpc1RvZ2dsZSA9ICFzY3J1YiAmJiBzY3J1YiAhPT0gMCxcbiAgICAgICAgc2Nyb2xsZXIgPSBfZ2V0VGFyZ2V0KHZhcnMuc2Nyb2xsZXIgfHwgX3dpbiksXG4gICAgICAgIHNjcm9sbGVyQ2FjaGUgPSBnc2FwLmNvcmUuZ2V0Q2FjaGUoc2Nyb2xsZXIpLFxuICAgICAgICBpc1ZpZXdwb3J0ID0gX2lzVmlld3BvcnQoc2Nyb2xsZXIpLFxuICAgICAgICB1c2VGaXhlZFBvc2l0aW9uID0gKFwicGluVHlwZVwiIGluIHZhcnMgPyB2YXJzLnBpblR5cGUgOiBfZ2V0UHJveHlQcm9wKHNjcm9sbGVyLCBcInBpblR5cGVcIikgfHwgaXNWaWV3cG9ydCAmJiBcImZpeGVkXCIpID09PSBcImZpeGVkXCIsXG4gICAgICAgIGNhbGxiYWNrcyA9IFt2YXJzLm9uRW50ZXIsIHZhcnMub25MZWF2ZSwgdmFycy5vbkVudGVyQmFjaywgdmFycy5vbkxlYXZlQmFja10sXG4gICAgICAgIHRvZ2dsZUFjdGlvbnMgPSBpc1RvZ2dsZSAmJiB2YXJzLnRvZ2dsZUFjdGlvbnMuc3BsaXQoXCIgXCIpLFxuICAgICAgICBtYXJrZXJzID0gXCJtYXJrZXJzXCIgaW4gdmFycyA/IHZhcnMubWFya2VycyA6IF9kZWZhdWx0cy5tYXJrZXJzLFxuICAgICAgICBib3JkZXJXaWR0aCA9IGlzVmlld3BvcnQgPyAwIDogcGFyc2VGbG9hdChfZ2V0Q29tcHV0ZWRTdHlsZShzY3JvbGxlcilbXCJib3JkZXJcIiArIGRpcmVjdGlvbi5wMiArIF9XaWR0aF0pIHx8IDAsXG4gICAgICAgIHNlbGYgPSB0aGlzLFxuICAgICAgICBvblJlZnJlc2hJbml0ID0gdmFycy5vblJlZnJlc2hJbml0ICYmIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB2YXJzLm9uUmVmcmVzaEluaXQoc2VsZik7XG4gICAgfSxcbiAgICAgICAgZ2V0U2Nyb2xsZXJTaXplID0gX2dldFNpemVGdW5jKHNjcm9sbGVyLCBpc1ZpZXdwb3J0LCBkaXJlY3Rpb24pLFxuICAgICAgICBnZXRTY3JvbGxlck9mZnNldHMgPSBfZ2V0T2Zmc2V0c0Z1bmMoc2Nyb2xsZXIsIGlzVmlld3BvcnQpLFxuICAgICAgICBsYXN0U25hcCA9IDAsXG4gICAgICAgIGxhc3RSZWZyZXNoID0gMCxcbiAgICAgICAgcHJldlByb2dyZXNzID0gMCxcbiAgICAgICAgc2Nyb2xsRnVuYyA9IF9nZXRTY3JvbGxGdW5jKHNjcm9sbGVyLCBkaXJlY3Rpb24pLFxuICAgICAgICB0d2VlblRvLFxuICAgICAgICBwaW5DYWNoZSxcbiAgICAgICAgc25hcEZ1bmMsXG4gICAgICAgIHNjcm9sbDEsXG4gICAgICAgIHNjcm9sbDIsXG4gICAgICAgIHN0YXJ0LFxuICAgICAgICBlbmQsXG4gICAgICAgIG1hcmtlclN0YXJ0LFxuICAgICAgICBtYXJrZXJFbmQsXG4gICAgICAgIG1hcmtlclN0YXJ0VHJpZ2dlcixcbiAgICAgICAgbWFya2VyRW5kVHJpZ2dlcixcbiAgICAgICAgbWFya2VyVmFycyxcbiAgICAgICAgZXhlY3V0aW5nT25SZWZyZXNoLFxuICAgICAgICBjaGFuZ2UsXG4gICAgICAgIHBpbk9yaWdpbmFsU3RhdGUsXG4gICAgICAgIHBpbkFjdGl2ZVN0YXRlLFxuICAgICAgICBwaW5TdGF0ZSxcbiAgICAgICAgc3BhY2VyLFxuICAgICAgICBvZmZzZXQsXG4gICAgICAgIHBpbkdldHRlcixcbiAgICAgICAgcGluU2V0dGVyLFxuICAgICAgICBwaW5TdGFydCxcbiAgICAgICAgcGluQ2hhbmdlLFxuICAgICAgICBzcGFjaW5nU3RhcnQsXG4gICAgICAgIHNwYWNlclN0YXRlLFxuICAgICAgICBtYXJrZXJTdGFydFNldHRlcixcbiAgICAgICAgcGluTW92ZXMsXG4gICAgICAgIG1hcmtlckVuZFNldHRlcixcbiAgICAgICAgY3MsXG4gICAgICAgIHNuYXAxLFxuICAgICAgICBzbmFwMixcbiAgICAgICAgc2NydWJUd2VlbixcbiAgICAgICAgc2NydWJTbW9vdGgsXG4gICAgICAgIHNuYXBEdXJDbGFtcCxcbiAgICAgICAgc25hcERlbGF5ZWRDYWxsLFxuICAgICAgICBwcmV2U2Nyb2xsLFxuICAgICAgICBwcmV2QW5pbVByb2dyZXNzLFxuICAgICAgICBjYU1hcmtlclNldHRlcixcbiAgICAgICAgY3VzdG9tUmV2ZXJ0UmV0dXJuOyAvLyBmb3IgdGhlIHNha2Ugb2YgZWZmaWNpZW5jeSwgX3N0YXJ0Q2xhbXAvX2VuZENsYW1wIHNlcnZlIGxpa2UgYSB0cnV0aHkgdmFsdWUgaW5kaWNhdGluZyB0aGF0IGNsYW1waW5nIHdhcyBlbmFibGVkIG9uIHRoZSBzdGFydC9lbmQsIGFuZCBBTFNPIHN0b3JlIHRoZSBhY3R1YWwgcHJlLWNsYW1wZWQgbnVtZXJpYyB2YWx1ZS4gV2UgdGFwIGludG8gdGhhdCBpbiBTY3JvbGxTbW9vdGhlciBmb3Igc3BlZWQgZWZmZWN0cy4gU28gZm9yIGV4YW1wbGUsIGlmIHN0YXJ0PVwiY2xhbXAodG9wIGJvdHRvbSlcIiByZXN1bHRzIGluIGEgc3RhcnQgb2YgLTEwMCBuYXR1cmFsbHksIGl0IHdvdWxkIGdldCBjbGFtcGVkIHRvIDAgYnV0IC0xMDAgd291bGQgYmUgc3RvcmVkIGluIF9zdGFydENsYW1wLlxuXG5cbiAgICBzZWxmLl9zdGFydENsYW1wID0gc2VsZi5fZW5kQ2xhbXAgPSBmYWxzZTtcbiAgICBzZWxmLl9kaXIgPSBkaXJlY3Rpb247XG4gICAgYW50aWNpcGF0ZVBpbiAqPSA0NTtcbiAgICBzZWxmLnNjcm9sbGVyID0gc2Nyb2xsZXI7XG4gICAgc2VsZi5zY3JvbGwgPSBjb250YWluZXJBbmltYXRpb24gPyBjb250YWluZXJBbmltYXRpb24udGltZS5iaW5kKGNvbnRhaW5lckFuaW1hdGlvbikgOiBzY3JvbGxGdW5jO1xuICAgIHNjcm9sbDEgPSBzY3JvbGxGdW5jKCk7XG4gICAgc2VsZi52YXJzID0gdmFycztcbiAgICBhbmltYXRpb24gPSBhbmltYXRpb24gfHwgdmFycy5hbmltYXRpb247XG5cbiAgICBpZiAoXCJyZWZyZXNoUHJpb3JpdHlcIiBpbiB2YXJzKSB7XG4gICAgICBfc29ydCA9IDE7XG4gICAgICB2YXJzLnJlZnJlc2hQcmlvcml0eSA9PT0gLTk5OTkgJiYgKF9wcmltYXJ5ID0gc2VsZik7IC8vIHVzZWQgYnkgU2Nyb2xsU21vb3RoZXJcbiAgICB9XG5cbiAgICBzY3JvbGxlckNhY2hlLnR3ZWVuU2Nyb2xsID0gc2Nyb2xsZXJDYWNoZS50d2VlblNjcm9sbCB8fCB7XG4gICAgICB0b3A6IF9nZXRUd2VlbkNyZWF0b3Ioc2Nyb2xsZXIsIF92ZXJ0aWNhbCksXG4gICAgICBsZWZ0OiBfZ2V0VHdlZW5DcmVhdG9yKHNjcm9sbGVyLCBfaG9yaXpvbnRhbClcbiAgICB9O1xuICAgIHNlbGYudHdlZW5UbyA9IHR3ZWVuVG8gPSBzY3JvbGxlckNhY2hlLnR3ZWVuU2Nyb2xsW2RpcmVjdGlvbi5wXTtcblxuICAgIHNlbGYuc2NydWJEdXJhdGlvbiA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgc2NydWJTbW9vdGggPSBfaXNOdW1iZXIodmFsdWUpICYmIHZhbHVlO1xuXG4gICAgICBpZiAoIXNjcnViU21vb3RoKSB7XG4gICAgICAgIHNjcnViVHdlZW4gJiYgc2NydWJUd2Vlbi5wcm9ncmVzcygxKS5raWxsKCk7XG4gICAgICAgIHNjcnViVHdlZW4gPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2NydWJUd2VlbiA/IHNjcnViVHdlZW4uZHVyYXRpb24odmFsdWUpIDogc2NydWJUd2VlbiA9IGdzYXAudG8oYW5pbWF0aW9uLCB7XG4gICAgICAgICAgZWFzZTogXCJleHBvXCIsXG4gICAgICAgICAgdG90YWxQcm9ncmVzczogXCIrPTBcIixcbiAgICAgICAgICBpbmhlcml0OiBmYWxzZSxcbiAgICAgICAgICBkdXJhdGlvbjogc2NydWJTbW9vdGgsXG4gICAgICAgICAgcGF1c2VkOiB0cnVlLFxuICAgICAgICAgIG9uQ29tcGxldGU6IGZ1bmN0aW9uIG9uQ29tcGxldGUoKSB7XG4gICAgICAgICAgICByZXR1cm4gb25TY3J1YkNvbXBsZXRlICYmIG9uU2NydWJDb21wbGV0ZShzZWxmKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAoYW5pbWF0aW9uKSB7XG4gICAgICBhbmltYXRpb24udmFycy5sYXp5ID0gZmFsc2U7XG4gICAgICBhbmltYXRpb24uX2luaXR0ZWQgJiYgIXNlbGYuaXNSZXZlcnRlZCB8fCBhbmltYXRpb24udmFycy5pbW1lZGlhdGVSZW5kZXIgIT09IGZhbHNlICYmIHZhcnMuaW1tZWRpYXRlUmVuZGVyICE9PSBmYWxzZSAmJiBhbmltYXRpb24uZHVyYXRpb24oKSAmJiBhbmltYXRpb24ucmVuZGVyKDAsIHRydWUsIHRydWUpOyAvLyBzcGVjaWFsIGNhc2U6IGlmIHRoaXMgU2Nyb2xsVHJpZ2dlciBnZXRzIHJlLWluaXR0ZWQsIGEgZnJvbSgpIHR3ZWVuIHdpdGggYSBzdGFnZ2VyIGNvdWxkIGdldCBpbml0dGVkIGluaXRpYWxseSBhbmQgdGhlbiByZXZlcnRlZCBvbiB0aGUgcmUtaW5pdCB3aGljaCBtZWFucyBpdCdsbCBuZWVkIHRvIGdldCByZW5kZXJlZCBhZ2FpbiBoZXJlIHRvIHByb3Blcmx5IGRpc3BsYXkgdGhpbmdzLiBPdGhlcndpc2UsIFNlZSBodHRwczovL2dzYXAuY29tL2ZvcnVtcy90b3BpYy8zNjc3Ny1zY3JvbGxzbW9vdGhlci1zcGxpdHRleHQtbmV4dGpzLyBhbmQgaHR0cHM6Ly9jb2RlcGVuLmlvL0dyZWVuU29jay9wZW4vZVlQeVBwZD9lZGl0b3JzPTAwMTBcblxuICAgICAgc2VsZi5hbmltYXRpb24gPSBhbmltYXRpb24ucGF1c2UoKTtcbiAgICAgIGFuaW1hdGlvbi5zY3JvbGxUcmlnZ2VyID0gc2VsZjtcbiAgICAgIHNlbGYuc2NydWJEdXJhdGlvbihzY3J1Yik7XG4gICAgICBzbmFwMSA9IDA7XG4gICAgICBpZCB8fCAoaWQgPSBhbmltYXRpb24udmFycy5pZCk7XG4gICAgfVxuXG4gICAgaWYgKHNuYXApIHtcbiAgICAgIC8vIFRPRE86IHBvdGVudGlhbCBpZGVhOiB1c2UgbGVnaXRpbWF0ZSBDU1Mgc2Nyb2xsIHNuYXBwaW5nIGJ5IHB1c2hpbmcgaW52aXNpYmxlIGVsZW1lbnRzIGludG8gdGhlIERPTSB0aGF0IHNlcnZlIGFzIHNuYXAgcG9zaXRpb25zLCBhbmQgdG9nZ2xlIHRoZSBkb2N1bWVudC5zY3JvbGxpbmdFbGVtZW50LnN0eWxlLnNjcm9sbFNuYXBUeXBlIG9uVG9nZ2xlLiBTZWUgaHR0cHM6Ly9jb2RlcGVuLmlvL0dyZWVuU29jay9wZW4vSmpMcmdXTSBmb3IgYSBxdWljayBwcm9vZiBvZiBjb25jZXB0LlxuICAgICAgaWYgKCFfaXNPYmplY3Qoc25hcCkgfHwgc25hcC5wdXNoKSB7XG4gICAgICAgIHNuYXAgPSB7XG4gICAgICAgICAgc25hcFRvOiBzbmFwXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIFwic2Nyb2xsQmVoYXZpb3JcIiBpbiBfYm9keS5zdHlsZSAmJiBnc2FwLnNldChpc1ZpZXdwb3J0ID8gW19ib2R5LCBfZG9jRWxdIDogc2Nyb2xsZXIsIHtcbiAgICAgICAgc2Nyb2xsQmVoYXZpb3I6IFwiYXV0b1wiXG4gICAgICB9KTsgLy8gc21vb3RoIHNjcm9sbGluZyBkb2Vzbid0IHdvcmsgd2l0aCBzbmFwLlxuXG4gICAgICBfc2Nyb2xsZXJzLmZvckVhY2goZnVuY3Rpb24gKG8pIHtcbiAgICAgICAgcmV0dXJuIF9pc0Z1bmN0aW9uKG8pICYmIG8udGFyZ2V0ID09PSAoaXNWaWV3cG9ydCA/IF9kb2Muc2Nyb2xsaW5nRWxlbWVudCB8fCBfZG9jRWwgOiBzY3JvbGxlcikgJiYgKG8uc21vb3RoID0gZmFsc2UpO1xuICAgICAgfSk7IC8vIG5vdGU6IHNldCBzbW9vdGggdG8gZmFsc2Ugb24gYm90aCB0aGUgdmVydGljYWwgYW5kIGhvcml6b250YWwgc2Nyb2xsIGdldHRlcnMvc2V0dGVyc1xuXG5cbiAgICAgIHNuYXBGdW5jID0gX2lzRnVuY3Rpb24oc25hcC5zbmFwVG8pID8gc25hcC5zbmFwVG8gOiBzbmFwLnNuYXBUbyA9PT0gXCJsYWJlbHNcIiA/IF9nZXRDbG9zZXN0TGFiZWwoYW5pbWF0aW9uKSA6IHNuYXAuc25hcFRvID09PSBcImxhYmVsc0RpcmVjdGlvbmFsXCIgPyBfZ2V0TGFiZWxBdERpcmVjdGlvbihhbmltYXRpb24pIDogc25hcC5kaXJlY3Rpb25hbCAhPT0gZmFsc2UgPyBmdW5jdGlvbiAodmFsdWUsIHN0KSB7XG4gICAgICAgIHJldHVybiBfc25hcERpcmVjdGlvbmFsKHNuYXAuc25hcFRvKSh2YWx1ZSwgX2dldFRpbWUoKSAtIGxhc3RSZWZyZXNoIDwgNTAwID8gMCA6IHN0LmRpcmVjdGlvbik7XG4gICAgICB9IDogZ3NhcC51dGlscy5zbmFwKHNuYXAuc25hcFRvKTtcbiAgICAgIHNuYXBEdXJDbGFtcCA9IHNuYXAuZHVyYXRpb24gfHwge1xuICAgICAgICBtaW46IDAuMSxcbiAgICAgICAgbWF4OiAyXG4gICAgICB9O1xuICAgICAgc25hcER1ckNsYW1wID0gX2lzT2JqZWN0KHNuYXBEdXJDbGFtcCkgPyBfY2xhbXAoc25hcER1ckNsYW1wLm1pbiwgc25hcER1ckNsYW1wLm1heCkgOiBfY2xhbXAoc25hcER1ckNsYW1wLCBzbmFwRHVyQ2xhbXApO1xuICAgICAgc25hcERlbGF5ZWRDYWxsID0gZ3NhcC5kZWxheWVkQ2FsbChzbmFwLmRlbGF5IHx8IHNjcnViU21vb3RoIC8gMiB8fCAwLjEsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHNjcm9sbCA9IHNjcm9sbEZ1bmMoKSxcbiAgICAgICAgICAgIHJlZnJlc2hlZFJlY2VudGx5ID0gX2dldFRpbWUoKSAtIGxhc3RSZWZyZXNoIDwgNTAwLFxuICAgICAgICAgICAgdHdlZW4gPSB0d2VlblRvLnR3ZWVuO1xuXG4gICAgICAgIGlmICgocmVmcmVzaGVkUmVjZW50bHkgfHwgTWF0aC5hYnMoc2VsZi5nZXRWZWxvY2l0eSgpKSA8IDEwKSAmJiAhdHdlZW4gJiYgIV9wb2ludGVySXNEb3duICYmIGxhc3RTbmFwICE9PSBzY3JvbGwpIHtcbiAgICAgICAgICB2YXIgcHJvZ3Jlc3MgPSAoc2Nyb2xsIC0gc3RhcnQpIC8gY2hhbmdlLFxuICAgICAgICAgICAgICB0b3RhbFByb2dyZXNzID0gYW5pbWF0aW9uICYmICFpc1RvZ2dsZSA/IGFuaW1hdGlvbi50b3RhbFByb2dyZXNzKCkgOiBwcm9ncmVzcyxcbiAgICAgICAgICAgICAgdmVsb2NpdHkgPSByZWZyZXNoZWRSZWNlbnRseSA/IDAgOiAodG90YWxQcm9ncmVzcyAtIHNuYXAyKSAvIChfZ2V0VGltZSgpIC0gX3RpbWUyKSAqIDEwMDAgfHwgMCxcbiAgICAgICAgICAgICAgY2hhbmdlMSA9IGdzYXAudXRpbHMuY2xhbXAoLXByb2dyZXNzLCAxIC0gcHJvZ3Jlc3MsIF9hYnModmVsb2NpdHkgLyAyKSAqIHZlbG9jaXR5IC8gMC4xODUpLFxuICAgICAgICAgICAgICBuYXR1cmFsRW5kID0gcHJvZ3Jlc3MgKyAoc25hcC5pbmVydGlhID09PSBmYWxzZSA/IDAgOiBjaGFuZ2UxKSxcbiAgICAgICAgICAgICAgZW5kVmFsdWUsXG4gICAgICAgICAgICAgIGVuZFNjcm9sbCxcbiAgICAgICAgICAgICAgX3NuYXAgPSBzbmFwLFxuICAgICAgICAgICAgICBvblN0YXJ0ID0gX3NuYXAub25TdGFydCxcbiAgICAgICAgICAgICAgX29uSW50ZXJydXB0ID0gX3NuYXAub25JbnRlcnJ1cHQsXG4gICAgICAgICAgICAgIF9vbkNvbXBsZXRlID0gX3NuYXAub25Db21wbGV0ZTtcbiAgICAgICAgICBlbmRWYWx1ZSA9IHNuYXBGdW5jKG5hdHVyYWxFbmQsIHNlbGYpO1xuICAgICAgICAgIF9pc051bWJlcihlbmRWYWx1ZSkgfHwgKGVuZFZhbHVlID0gbmF0dXJhbEVuZCk7IC8vIGluIGNhc2UgdGhlIGZ1bmN0aW9uIGRpZG4ndCByZXR1cm4gYSBudW1iZXIsIGZhbGwgYmFjayB0byB1c2luZyB0aGUgbmF0dXJhbEVuZFxuXG4gICAgICAgICAgZW5kU2Nyb2xsID0gTWF0aC5yb3VuZChzdGFydCArIGVuZFZhbHVlICogY2hhbmdlKTtcblxuICAgICAgICAgIGlmIChzY3JvbGwgPD0gZW5kICYmIHNjcm9sbCA+PSBzdGFydCAmJiBlbmRTY3JvbGwgIT09IHNjcm9sbCkge1xuICAgICAgICAgICAgaWYgKHR3ZWVuICYmICF0d2Vlbi5faW5pdHRlZCAmJiB0d2Vlbi5kYXRhIDw9IF9hYnMoZW5kU2Nyb2xsIC0gc2Nyb2xsKSkge1xuICAgICAgICAgICAgICAvLyB0aGVyZSdzIGFuIG92ZXJsYXBwaW5nIHNuYXAhIFNvIHdlIG11c3QgZmlndXJlIG91dCB3aGljaCBvbmUgaXMgY2xvc2VyIGFuZCBsZXQgdGhhdCB0d2VlbiBsaXZlLlxuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChzbmFwLmluZXJ0aWEgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgIGNoYW5nZTEgPSBlbmRWYWx1ZSAtIHByb2dyZXNzO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0d2VlblRvKGVuZFNjcm9sbCwge1xuICAgICAgICAgICAgICBkdXJhdGlvbjogc25hcER1ckNsYW1wKF9hYnMoTWF0aC5tYXgoX2FicyhuYXR1cmFsRW5kIC0gdG90YWxQcm9ncmVzcyksIF9hYnMoZW5kVmFsdWUgLSB0b3RhbFByb2dyZXNzKSkgKiAwLjE4NSAvIHZlbG9jaXR5IC8gMC4wNSB8fCAwKSksXG4gICAgICAgICAgICAgIGVhc2U6IHNuYXAuZWFzZSB8fCBcInBvd2VyM1wiLFxuICAgICAgICAgICAgICBkYXRhOiBfYWJzKGVuZFNjcm9sbCAtIHNjcm9sbCksXG4gICAgICAgICAgICAgIC8vIHJlY29yZCB0aGUgZGlzdGFuY2Ugc28gdGhhdCBpZiBhbm90aGVyIHNuYXAgdHdlZW4gb2NjdXJzIChjb25mbGljdCkgd2UgY2FuIHByaW9yaXRpemUgdGhlIGNsb3Nlc3Qgc25hcC5cbiAgICAgICAgICAgICAgb25JbnRlcnJ1cHQ6IGZ1bmN0aW9uIG9uSW50ZXJydXB0KCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzbmFwRGVsYXllZENhbGwucmVzdGFydCh0cnVlKSAmJiBfb25JbnRlcnJ1cHQgJiYgX29uSW50ZXJydXB0KHNlbGYpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBvbkNvbXBsZXRlOiBmdW5jdGlvbiBvbkNvbXBsZXRlKCkge1xuICAgICAgICAgICAgICAgIHNlbGYudXBkYXRlKCk7XG4gICAgICAgICAgICAgICAgbGFzdFNuYXAgPSBzY3JvbGxGdW5jKCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoYW5pbWF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAvLyB0aGUgcmVzb2x1dGlvbiBvZiB0aGUgc2Nyb2xsYmFyIGlzIGxpbWl0ZWQsIHNvIHdlIHNob3VsZCBjb3JyZWN0IHRoZSBzY3J1YmJlZCBhbmltYXRpb24ncyBwbGF5aGVhZCBhdCB0aGUgZW5kIHRvIG1hdGNoIEVYQUNUTFkgd2hlcmUgaXQgd2FzIHN1cHBvc2VkIHRvIHNuYXBcbiAgICAgICAgICAgICAgICAgIHNjcnViVHdlZW4gPyBzY3J1YlR3ZWVuLnJlc2V0VG8oXCJ0b3RhbFByb2dyZXNzXCIsIGVuZFZhbHVlLCBhbmltYXRpb24uX3RUaW1lIC8gYW5pbWF0aW9uLl90RHVyKSA6IGFuaW1hdGlvbi5wcm9ncmVzcyhlbmRWYWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc25hcDEgPSBzbmFwMiA9IGFuaW1hdGlvbiAmJiAhaXNUb2dnbGUgPyBhbmltYXRpb24udG90YWxQcm9ncmVzcygpIDogc2VsZi5wcm9ncmVzcztcbiAgICAgICAgICAgICAgICBvblNuYXBDb21wbGV0ZSAmJiBvblNuYXBDb21wbGV0ZShzZWxmKTtcbiAgICAgICAgICAgICAgICBfb25Db21wbGV0ZSAmJiBfb25Db21wbGV0ZShzZWxmKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgc2Nyb2xsLCBjaGFuZ2UxICogY2hhbmdlLCBlbmRTY3JvbGwgLSBzY3JvbGwgLSBjaGFuZ2UxICogY2hhbmdlKTtcbiAgICAgICAgICAgIG9uU3RhcnQgJiYgb25TdGFydChzZWxmLCB0d2VlblRvLnR3ZWVuKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoc2VsZi5pc0FjdGl2ZSAmJiBsYXN0U25hcCAhPT0gc2Nyb2xsKSB7XG4gICAgICAgICAgc25hcERlbGF5ZWRDYWxsLnJlc3RhcnQodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pLnBhdXNlKCk7XG4gICAgfVxuXG4gICAgaWQgJiYgKF9pZHNbaWRdID0gc2VsZik7XG4gICAgdHJpZ2dlciA9IHNlbGYudHJpZ2dlciA9IF9nZXRUYXJnZXQodHJpZ2dlciB8fCBwaW4gIT09IHRydWUgJiYgcGluKTsgLy8gaWYgYSB0cmlnZ2VyIGhhcyBzb21lIGtpbmQgb2Ygc2Nyb2xsLXJlbGF0ZWQgZWZmZWN0IGFwcGxpZWQgdGhhdCBjb3VsZCBjb250YW1pbmF0ZSB0aGUgXCJ5XCIgb3IgXCJ4XCIgcG9zaXRpb24gKGxpa2UgYSBTY3JvbGxTbW9vdGhlciBlZmZlY3QpLCB3ZSBuZWVkZWQgYSB3YXkgdG8gdGVtcG9yYXJpbHkgcmV2ZXJ0IGl0LCBzbyB3ZSB1c2UgdGhlIHN0UmV2ZXJ0IHByb3BlcnR5IG9mIHRoZSBnc0NhY2hlLiBJdCBjYW4gcmV0dXJuIGFub3RoZXIgZnVuY3Rpb24gdGhhdCB3ZSdsbCBjYWxsIGF0IHRoZSBlbmQgc28gaXQgY2FuIHJldHVybiB0byBpdHMgbm9ybWFsIHN0YXRlLlxuXG4gICAgY3VzdG9tUmV2ZXJ0UmV0dXJuID0gdHJpZ2dlciAmJiB0cmlnZ2VyLl9nc2FwICYmIHRyaWdnZXIuX2dzYXAuc3RSZXZlcnQ7XG4gICAgY3VzdG9tUmV2ZXJ0UmV0dXJuICYmIChjdXN0b21SZXZlcnRSZXR1cm4gPSBjdXN0b21SZXZlcnRSZXR1cm4oc2VsZikpO1xuICAgIHBpbiA9IHBpbiA9PT0gdHJ1ZSA/IHRyaWdnZXIgOiBfZ2V0VGFyZ2V0KHBpbik7XG4gICAgX2lzU3RyaW5nKHRvZ2dsZUNsYXNzKSAmJiAodG9nZ2xlQ2xhc3MgPSB7XG4gICAgICB0YXJnZXRzOiB0cmlnZ2VyLFxuICAgICAgY2xhc3NOYW1lOiB0b2dnbGVDbGFzc1xuICAgIH0pO1xuXG4gICAgaWYgKHBpbikge1xuICAgICAgcGluU3BhY2luZyA9PT0gZmFsc2UgfHwgcGluU3BhY2luZyA9PT0gX21hcmdpbiB8fCAocGluU3BhY2luZyA9ICFwaW5TcGFjaW5nICYmIHBpbi5wYXJlbnROb2RlICYmIHBpbi5wYXJlbnROb2RlLnN0eWxlICYmIF9nZXRDb21wdXRlZFN0eWxlKHBpbi5wYXJlbnROb2RlKS5kaXNwbGF5ID09PSBcImZsZXhcIiA/IGZhbHNlIDogX3BhZGRpbmcpOyAvLyBpZiB0aGUgcGFyZW50IGlzIGRpc3BsYXk6IGZsZXgsIGRvbid0IGFwcGx5IHBpblNwYWNpbmcgYnkgZGVmYXVsdC4gV2Ugc2hvdWxkIGNoZWNrIHRoYXQgcGluLnBhcmVudE5vZGUgaXMgYW4gZWxlbWVudCAobm90IHNoYWRvdyBkb20gd2luZG93KVxuXG4gICAgICBzZWxmLnBpbiA9IHBpbjtcbiAgICAgIHBpbkNhY2hlID0gZ3NhcC5jb3JlLmdldENhY2hlKHBpbik7XG5cbiAgICAgIGlmICghcGluQ2FjaGUuc3BhY2VyKSB7XG4gICAgICAgIC8vIHJlY29yZCB0aGUgc3BhY2VyIGFuZCBwaW5PcmlnaW5hbFN0YXRlIG9uIHRoZSBjYWNoZSBpbiBjYXNlIHNvbWVvbmUgdHJpZXMgcGlubmluZyB0aGUgc2FtZSBlbGVtZW50IHdpdGggTVVMVElQTEUgU2Nyb2xsVHJpZ2dlcnMgLSB3ZSBkb24ndCB3YW50IHRvIGhhdmUgbXVsdGlwbGUgc3BhY2VycyBvciByZWNvcmQgdGhlIFwib3JpZ2luYWxcIiBwaW4gc3RhdGUgYWZ0ZXIgaXQgaGFzIGFscmVhZHkgYmVlbiBhZmZlY3RlZCBieSBhbm90aGVyIFNjcm9sbFRyaWdnZXIuXG4gICAgICAgIGlmIChwaW5TcGFjZXIpIHtcbiAgICAgICAgICBwaW5TcGFjZXIgPSBfZ2V0VGFyZ2V0KHBpblNwYWNlcik7XG4gICAgICAgICAgcGluU3BhY2VyICYmICFwaW5TcGFjZXIubm9kZVR5cGUgJiYgKHBpblNwYWNlciA9IHBpblNwYWNlci5jdXJyZW50IHx8IHBpblNwYWNlci5uYXRpdmVFbGVtZW50KTsgLy8gZm9yIFJlYWN0ICYgQW5ndWxhclxuXG4gICAgICAgICAgcGluQ2FjaGUuc3BhY2VySXNOYXRpdmUgPSAhIXBpblNwYWNlcjtcbiAgICAgICAgICBwaW5TcGFjZXIgJiYgKHBpbkNhY2hlLnNwYWNlclN0YXRlID0gX2dldFN0YXRlKHBpblNwYWNlcikpO1xuICAgICAgICB9XG5cbiAgICAgICAgcGluQ2FjaGUuc3BhY2VyID0gc3BhY2VyID0gcGluU3BhY2VyIHx8IF9kb2MuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgc3BhY2VyLmNsYXNzTGlzdC5hZGQoXCJwaW4tc3BhY2VyXCIpO1xuICAgICAgICBpZCAmJiBzcGFjZXIuY2xhc3NMaXN0LmFkZChcInBpbi1zcGFjZXItXCIgKyBpZCk7XG4gICAgICAgIHBpbkNhY2hlLnBpblN0YXRlID0gcGluT3JpZ2luYWxTdGF0ZSA9IF9nZXRTdGF0ZShwaW4pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGluT3JpZ2luYWxTdGF0ZSA9IHBpbkNhY2hlLnBpblN0YXRlO1xuICAgICAgfVxuXG4gICAgICB2YXJzLmZvcmNlM0QgIT09IGZhbHNlICYmIGdzYXAuc2V0KHBpbiwge1xuICAgICAgICBmb3JjZTNEOiB0cnVlXG4gICAgICB9KTtcbiAgICAgIHNlbGYuc3BhY2VyID0gc3BhY2VyID0gcGluQ2FjaGUuc3BhY2VyO1xuICAgICAgY3MgPSBfZ2V0Q29tcHV0ZWRTdHlsZShwaW4pO1xuICAgICAgc3BhY2luZ1N0YXJ0ID0gY3NbcGluU3BhY2luZyArIGRpcmVjdGlvbi5vczJdO1xuICAgICAgcGluR2V0dGVyID0gZ3NhcC5nZXRQcm9wZXJ0eShwaW4pO1xuICAgICAgcGluU2V0dGVyID0gZ3NhcC5xdWlja1NldHRlcihwaW4sIGRpcmVjdGlvbi5hLCBfcHgpOyAvLyBwaW4uZmlyc3RDaGlsZCAmJiAhX21heFNjcm9sbChwaW4sIGRpcmVjdGlvbikgJiYgKHBpbi5zdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCIpOyAvLyBwcm90ZWN0cyBmcm9tIGNvbGxhcHNpbmcgbWFyZ2lucywgYnV0IGNhbiBoYXZlIHVuaW50ZW5kZWQgY29uc2VxdWVuY2VzIGFzIGRlbW9uc3RyYXRlZCBoZXJlOiBodHRwczovL2NvZGVwZW4uaW8vR3JlZW5Tb2NrL3Blbi8xZTQyYzdhNzNiZmE0MDlkMmNmMWUxODRlN2E0MjQ4ZCBzbyBpdCB3YXMgcmVtb3ZlZCBpbiBmYXZvciBvZiBqdXN0IHRlbGxpbmcgcGVvcGxlIHRvIHNldCB1cCB0aGVpciBDU1MgdG8gYXZvaWQgdGhlIGNvbGxhcHNpbmcgbWFyZ2lucyAob3ZlcmZsb3c6IGhpZGRlbiB8IGF1dG8gaXMganVzdCBvbmUgb3B0aW9uLiBBbm90aGVyIGlzIGJvcmRlci10b3A6IDFweCBzb2xpZCB0cmFuc3BhcmVudCkuXG5cbiAgICAgIF9zd2FwUGluSW4ocGluLCBzcGFjZXIsIGNzKTtcblxuICAgICAgcGluU3RhdGUgPSBfZ2V0U3RhdGUocGluKTtcbiAgICB9XG5cbiAgICBpZiAobWFya2Vycykge1xuICAgICAgbWFya2VyVmFycyA9IF9pc09iamVjdChtYXJrZXJzKSA/IF9zZXREZWZhdWx0cyhtYXJrZXJzLCBfbWFya2VyRGVmYXVsdHMpIDogX21hcmtlckRlZmF1bHRzO1xuICAgICAgbWFya2VyU3RhcnRUcmlnZ2VyID0gX2NyZWF0ZU1hcmtlcihcInNjcm9sbGVyLXN0YXJ0XCIsIGlkLCBzY3JvbGxlciwgZGlyZWN0aW9uLCBtYXJrZXJWYXJzLCAwKTtcbiAgICAgIG1hcmtlckVuZFRyaWdnZXIgPSBfY3JlYXRlTWFya2VyKFwic2Nyb2xsZXItZW5kXCIsIGlkLCBzY3JvbGxlciwgZGlyZWN0aW9uLCBtYXJrZXJWYXJzLCAwLCBtYXJrZXJTdGFydFRyaWdnZXIpO1xuICAgICAgb2Zmc2V0ID0gbWFya2VyU3RhcnRUcmlnZ2VyW1wib2Zmc2V0XCIgKyBkaXJlY3Rpb24ub3AuZDJdO1xuXG4gICAgICB2YXIgY29udGVudCA9IF9nZXRUYXJnZXQoX2dldFByb3h5UHJvcChzY3JvbGxlciwgXCJjb250ZW50XCIpIHx8IHNjcm9sbGVyKTtcblxuICAgICAgbWFya2VyU3RhcnQgPSB0aGlzLm1hcmtlclN0YXJ0ID0gX2NyZWF0ZU1hcmtlcihcInN0YXJ0XCIsIGlkLCBjb250ZW50LCBkaXJlY3Rpb24sIG1hcmtlclZhcnMsIG9mZnNldCwgMCwgY29udGFpbmVyQW5pbWF0aW9uKTtcbiAgICAgIG1hcmtlckVuZCA9IHRoaXMubWFya2VyRW5kID0gX2NyZWF0ZU1hcmtlcihcImVuZFwiLCBpZCwgY29udGVudCwgZGlyZWN0aW9uLCBtYXJrZXJWYXJzLCBvZmZzZXQsIDAsIGNvbnRhaW5lckFuaW1hdGlvbik7XG4gICAgICBjb250YWluZXJBbmltYXRpb24gJiYgKGNhTWFya2VyU2V0dGVyID0gZ3NhcC5xdWlja1NldHRlcihbbWFya2VyU3RhcnQsIG1hcmtlckVuZF0sIGRpcmVjdGlvbi5hLCBfcHgpKTtcblxuICAgICAgaWYgKCF1c2VGaXhlZFBvc2l0aW9uICYmICEoX3Byb3hpZXMubGVuZ3RoICYmIF9nZXRQcm94eVByb3Aoc2Nyb2xsZXIsIFwiZml4ZWRNYXJrZXJzXCIpID09PSB0cnVlKSkge1xuICAgICAgICBfbWFrZVBvc2l0aW9uYWJsZShpc1ZpZXdwb3J0ID8gX2JvZHkgOiBzY3JvbGxlcik7XG5cbiAgICAgICAgZ3NhcC5zZXQoW21hcmtlclN0YXJ0VHJpZ2dlciwgbWFya2VyRW5kVHJpZ2dlcl0sIHtcbiAgICAgICAgICBmb3JjZTNEOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBtYXJrZXJTdGFydFNldHRlciA9IGdzYXAucXVpY2tTZXR0ZXIobWFya2VyU3RhcnRUcmlnZ2VyLCBkaXJlY3Rpb24uYSwgX3B4KTtcbiAgICAgICAgbWFya2VyRW5kU2V0dGVyID0gZ3NhcC5xdWlja1NldHRlcihtYXJrZXJFbmRUcmlnZ2VyLCBkaXJlY3Rpb24uYSwgX3B4KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY29udGFpbmVyQW5pbWF0aW9uKSB7XG4gICAgICB2YXIgb2xkT25VcGRhdGUgPSBjb250YWluZXJBbmltYXRpb24udmFycy5vblVwZGF0ZSxcbiAgICAgICAgICBvbGRQYXJhbXMgPSBjb250YWluZXJBbmltYXRpb24udmFycy5vblVwZGF0ZVBhcmFtcztcbiAgICAgIGNvbnRhaW5lckFuaW1hdGlvbi5ldmVudENhbGxiYWNrKFwib25VcGRhdGVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBzZWxmLnVwZGF0ZSgwLCAwLCAxKTtcbiAgICAgICAgb2xkT25VcGRhdGUgJiYgb2xkT25VcGRhdGUuYXBwbHkoY29udGFpbmVyQW5pbWF0aW9uLCBvbGRQYXJhbXMgfHwgW10pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgc2VsZi5wcmV2aW91cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfdHJpZ2dlcnNbX3RyaWdnZXJzLmluZGV4T2Yoc2VsZikgLSAxXTtcbiAgICB9O1xuXG4gICAgc2VsZi5uZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90cmlnZ2Vyc1tfdHJpZ2dlcnMuaW5kZXhPZihzZWxmKSArIDFdO1xuICAgIH07XG5cbiAgICBzZWxmLnJldmVydCA9IGZ1bmN0aW9uIChyZXZlcnQsIHRlbXApIHtcbiAgICAgIGlmICghdGVtcCkge1xuICAgICAgICByZXR1cm4gc2VsZi5raWxsKHRydWUpO1xuICAgICAgfSAvLyBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIGdzYXAuY29udGV4dCgpIGFuZCBnc2FwLm1hdGNoTWVkaWEoKSB3aGljaCBjYWxsIHJldmVydCgpXG5cblxuICAgICAgdmFyIHIgPSByZXZlcnQgIT09IGZhbHNlIHx8ICFzZWxmLmVuYWJsZWQsXG4gICAgICAgICAgcHJldlJlZnJlc2hpbmcgPSBfcmVmcmVzaGluZztcblxuICAgICAgaWYgKHIgIT09IHNlbGYuaXNSZXZlcnRlZCkge1xuICAgICAgICBpZiAocikge1xuICAgICAgICAgIHByZXZTY3JvbGwgPSBNYXRoLm1heChzY3JvbGxGdW5jKCksIHNlbGYuc2Nyb2xsLnJlYyB8fCAwKTsgLy8gcmVjb3JkIHRoZSBzY3JvbGwgc28gd2UgY2FuIHJldmVydCBsYXRlciAocmVwb3NpdGlvbmluZy9waW5uaW5nIHRoaW5ncyBjYW4gYWZmZWN0IHNjcm9sbCBwb3NpdGlvbikuIEluIHRoZSBzdGF0aWMgcmVmcmVzaCgpIG1ldGhvZCwgd2UgZmlyc3QgcmVjb3JkIGFsbCB0aGUgc2Nyb2xsIHBvc2l0aW9ucyBhcyBhIHJlZmVyZW5jZS5cblxuICAgICAgICAgIHByZXZQcm9ncmVzcyA9IHNlbGYucHJvZ3Jlc3M7XG4gICAgICAgICAgcHJldkFuaW1Qcm9ncmVzcyA9IGFuaW1hdGlvbiAmJiBhbmltYXRpb24ucHJvZ3Jlc3MoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG1hcmtlclN0YXJ0ICYmIFttYXJrZXJTdGFydCwgbWFya2VyRW5kLCBtYXJrZXJTdGFydFRyaWdnZXIsIG1hcmtlckVuZFRyaWdnZXJdLmZvckVhY2goZnVuY3Rpb24gKG0pIHtcbiAgICAgICAgICByZXR1cm4gbS5zdHlsZS5kaXNwbGF5ID0gciA/IFwibm9uZVwiIDogXCJibG9ja1wiO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAocikge1xuICAgICAgICAgIF9yZWZyZXNoaW5nID0gc2VsZjtcbiAgICAgICAgICBzZWxmLnVwZGF0ZShyKTsgLy8gbWFrZSBzdXJlIHRoZSBwaW4gaXMgYmFjayBpbiBpdHMgb3JpZ2luYWwgcG9zaXRpb24gc28gdGhhdCBhbGwgdGhlIG1lYXN1cmVtZW50cyBhcmUgY29ycmVjdC4gZG8gdGhpcyBCRUZPUkUgc3dhcHBpbmcgdGhlIHBpbiBvdXRcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwaW4gJiYgKCFwaW5SZXBhcmVudCB8fCAhc2VsZi5pc0FjdGl2ZSkpIHtcbiAgICAgICAgICBpZiAocikge1xuICAgICAgICAgICAgX3N3YXBQaW5PdXQocGluLCBzcGFjZXIsIHBpbk9yaWdpbmFsU3RhdGUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfc3dhcFBpbkluKHBpbiwgc3BhY2VyLCBfZ2V0Q29tcHV0ZWRTdHlsZShwaW4pLCBzcGFjZXJTdGF0ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgciB8fCBzZWxmLnVwZGF0ZShyKTsgLy8gd2hlbiB3ZSdyZSByZXN0b3JpbmcsIHRoZSB1cGRhdGUgc2hvdWxkIHJ1biBBRlRFUiBzd2FwcGluZyB0aGUgcGluIGludG8gaXRzIHBpbi1zcGFjZXIuXG5cbiAgICAgICAgX3JlZnJlc2hpbmcgPSBwcmV2UmVmcmVzaGluZzsgLy8gcmVzdG9yZS4gV2Ugc2V0IGl0IHRvIHRydWUgZHVyaW5nIHRoZSB1cGRhdGUoKSBzbyB0aGF0IHRoaW5ncyBmaXJlIHByb3Blcmx5IGluIHRoZXJlLlxuXG4gICAgICAgIHNlbGYuaXNSZXZlcnRlZCA9IHI7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHNlbGYucmVmcmVzaCA9IGZ1bmN0aW9uIChzb2Z0LCBmb3JjZSwgcG9zaXRpb24sIHBpbk9mZnNldCkge1xuICAgICAgLy8gcG9zaXRpb24gaXMgdHlwaWNhbGx5IG9ubHkgZGVmaW5lZCBpZiBpdCdzIGNvbWluZyBmcm9tIHNldFBvc2l0aW9ucygpIC0gaXQncyBhIHdheSB0byBza2lwIHRoZSBub3JtYWwgcGFyc2luZy4gcGluT2Zmc2V0IGlzIGFsc28gb25seSBmcm9tIHNldFBvc2l0aW9ucygpIGFuZCBpcyBtb3N0bHkgcmVsYXRlZCB0byBmYW5jeSBzdHVmZiB3ZSBuZWVkIHRvIGRvIGluIFNjcm9sbFNtb290aGVyIHdpdGggZWZmZWN0c1xuICAgICAgaWYgKChfcmVmcmVzaGluZyB8fCAhc2VsZi5lbmFibGVkKSAmJiAhZm9yY2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAocGluICYmIHNvZnQgJiYgX2xhc3RTY3JvbGxUaW1lKSB7XG4gICAgICAgIF9hZGRMaXN0ZW5lcihTY3JvbGxUcmlnZ2VyLCBcInNjcm9sbEVuZFwiLCBfc29mdFJlZnJlc2gpO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgIV9yZWZyZXNoaW5nQWxsICYmIG9uUmVmcmVzaEluaXQgJiYgb25SZWZyZXNoSW5pdChzZWxmKTtcbiAgICAgIF9yZWZyZXNoaW5nID0gc2VsZjtcblxuICAgICAgaWYgKHR3ZWVuVG8udHdlZW4gJiYgIXBvc2l0aW9uKSB7XG4gICAgICAgIC8vIHdlIHNraXAgdGhpcyBpZiBhIHBvc2l0aW9uIGlzIHBhc3NlZCBpbiBiZWNhdXNlIHR5cGljYWxseSB0aGF0J3MgZnJvbSAuc2V0UG9zaXRpb25zKCkgYW5kIGl0J3MgYmVzdCB0byBhbGxvdyBpbi1wcm9ncmVzcyBzbmFwcGluZyB0byBjb250aW51ZS5cbiAgICAgICAgdHdlZW5Uby50d2Vlbi5raWxsKCk7XG4gICAgICAgIHR3ZWVuVG8udHdlZW4gPSAwO1xuICAgICAgfVxuXG4gICAgICBzY3J1YlR3ZWVuICYmIHNjcnViVHdlZW4ucGF1c2UoKTtcbiAgICAgIGludmFsaWRhdGVPblJlZnJlc2ggJiYgYW5pbWF0aW9uICYmIGFuaW1hdGlvbi5yZXZlcnQoe1xuICAgICAgICBraWxsOiBmYWxzZVxuICAgICAgfSkuaW52YWxpZGF0ZSgpO1xuICAgICAgc2VsZi5pc1JldmVydGVkIHx8IHNlbGYucmV2ZXJ0KHRydWUsIHRydWUpO1xuICAgICAgc2VsZi5fc3ViUGluT2Zmc2V0ID0gZmFsc2U7IC8vIHdlJ2xsIHNldCB0aGlzIHRvIHRydWUgaW4gdGhlIHN1Yi1waW5zIGlmIHdlIGZpbmQgYW55XG5cbiAgICAgIHZhciBzaXplID0gZ2V0U2Nyb2xsZXJTaXplKCksXG4gICAgICAgICAgc2Nyb2xsZXJCb3VuZHMgPSBnZXRTY3JvbGxlck9mZnNldHMoKSxcbiAgICAgICAgICBtYXggPSBjb250YWluZXJBbmltYXRpb24gPyBjb250YWluZXJBbmltYXRpb24uZHVyYXRpb24oKSA6IF9tYXhTY3JvbGwoc2Nyb2xsZXIsIGRpcmVjdGlvbiksXG4gICAgICAgICAgaXNGaXJzdFJlZnJlc2ggPSBjaGFuZ2UgPD0gMC4wMSxcbiAgICAgICAgICBvZmZzZXQgPSAwLFxuICAgICAgICAgIG90aGVyUGluT2Zmc2V0ID0gcGluT2Zmc2V0IHx8IDAsXG4gICAgICAgICAgcGFyc2VkRW5kID0gX2lzT2JqZWN0KHBvc2l0aW9uKSA/IHBvc2l0aW9uLmVuZCA6IHZhcnMuZW5kLFxuICAgICAgICAgIHBhcnNlZEVuZFRyaWdnZXIgPSB2YXJzLmVuZFRyaWdnZXIgfHwgdHJpZ2dlcixcbiAgICAgICAgICBwYXJzZWRTdGFydCA9IF9pc09iamVjdChwb3NpdGlvbikgPyBwb3NpdGlvbi5zdGFydCA6IHZhcnMuc3RhcnQgfHwgKHZhcnMuc3RhcnQgPT09IDAgfHwgIXRyaWdnZXIgPyAwIDogcGluID8gXCIwIDBcIiA6IFwiMCAxMDAlXCIpLFxuICAgICAgICAgIHBpbm5lZENvbnRhaW5lciA9IHNlbGYucGlubmVkQ29udGFpbmVyID0gdmFycy5waW5uZWRDb250YWluZXIgJiYgX2dldFRhcmdldCh2YXJzLnBpbm5lZENvbnRhaW5lciwgc2VsZiksXG4gICAgICAgICAgdHJpZ2dlckluZGV4ID0gdHJpZ2dlciAmJiBNYXRoLm1heCgwLCBfdHJpZ2dlcnMuaW5kZXhPZihzZWxmKSkgfHwgMCxcbiAgICAgICAgICBpID0gdHJpZ2dlckluZGV4LFxuICAgICAgICAgIGNzLFxuICAgICAgICAgIGJvdW5kcyxcbiAgICAgICAgICBzY3JvbGwsXG4gICAgICAgICAgaXNWZXJ0aWNhbCxcbiAgICAgICAgICBvdmVycmlkZSxcbiAgICAgICAgICBjdXJUcmlnZ2VyLFxuICAgICAgICAgIGN1clBpbixcbiAgICAgICAgICBvcHBvc2l0ZVNjcm9sbCxcbiAgICAgICAgICBpbml0dGVkLFxuICAgICAgICAgIHJldmVydGVkUGlucyxcbiAgICAgICAgICBmb3JjZWRPdmVyZmxvdyxcbiAgICAgICAgICBtYXJrZXJTdGFydE9mZnNldCxcbiAgICAgICAgICBtYXJrZXJFbmRPZmZzZXQ7XG5cbiAgICAgIGlmIChtYXJrZXJzICYmIF9pc09iamVjdChwb3NpdGlvbikpIHtcbiAgICAgICAgLy8gaWYgd2UgYWx0ZXIgdGhlIHN0YXJ0L2VuZCBwb3NpdGlvbnMgd2l0aCAuc2V0UG9zaXRpb25zKCksIGl0IGdlbmVyYWxseSBmZWVkcyBpbiBhYnNvbHV0ZSBOVU1CRVJTIHdoaWNoIGRvbid0IGNvbnZleSBpbmZvcm1hdGlvbiBhYm91dCB3aGVyZSB0byBsaW5lIHVwIHRoZSBtYXJrZXJzLCBzbyB0byBrZWVwIGl0IGludHVpdGl2ZSwgd2UgcmVjb3JkIGhvdyBmYXIgdGhlIHRyaWdnZXIgcG9zaXRpb25zIHNoaWZ0IGFmdGVyIGFwcGx5aW5nIHRoZSBuZXcgbnVtYmVycyBhbmQgdGhlbiBvZmZzZXQgYnkgdGhhdCBtdWNoIGluIHRoZSBvcHBvc2l0ZSBkaXJlY3Rpb24uIFdlIGRvIHRoZSBzYW1lIHRvIHRoZSBhc3NvY2lhdGVkIHRyaWdnZXIgbWFya2VycyB0b28gb2YgY291cnNlLlxuICAgICAgICBtYXJrZXJTdGFydE9mZnNldCA9IGdzYXAuZ2V0UHJvcGVydHkobWFya2VyU3RhcnRUcmlnZ2VyLCBkaXJlY3Rpb24ucCk7XG4gICAgICAgIG1hcmtlckVuZE9mZnNldCA9IGdzYXAuZ2V0UHJvcGVydHkobWFya2VyRW5kVHJpZ2dlciwgZGlyZWN0aW9uLnApO1xuICAgICAgfVxuXG4gICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIC8vIHVzZXIgbWlnaHQgdHJ5IHRvIHBpbiB0aGUgc2FtZSBlbGVtZW50IG1vcmUgdGhhbiBvbmNlLCBzbyB3ZSBtdXN0IGZpbmQgYW55IHByaW9yIHRyaWdnZXJzIHdpdGggdGhlIHNhbWUgcGluLCByZXZlcnQgdGhlbSwgYW5kIGRldGVybWluZSBob3cgbG9uZyB0aGV5J3JlIHBpbm5pbmcgc28gdGhhdCB3ZSBjYW4gb2Zmc2V0IHRoaW5ncyBhcHByb3ByaWF0ZWx5LiBNYWtlIHN1cmUgd2UgcmV2ZXJ0IGZyb20gbGFzdCB0byBmaXJzdCBzbyB0aGF0IHRoaW5ncyBcInJld2luZFwiIHByb3Blcmx5LlxuICAgICAgICBjdXJUcmlnZ2VyID0gX3RyaWdnZXJzW2ldO1xuICAgICAgICBjdXJUcmlnZ2VyLmVuZCB8fCBjdXJUcmlnZ2VyLnJlZnJlc2goMCwgMSkgfHwgKF9yZWZyZXNoaW5nID0gc2VsZik7IC8vIGlmIGl0J3MgYSB0aW1lbGluZS1iYXNlZCB0cmlnZ2VyIHRoYXQgaGFzbid0IGJlZW4gZnVsbHkgaW5pdGlhbGl6ZWQgeWV0IGJlY2F1c2UgaXQncyB3YWl0aW5nIGZvciAxIHRpY2ssIGp1c3QgZm9yY2UgdGhlIHJlZnJlc2goKSBoZXJlLCBvdGhlcndpc2UgaWYgaXQgY29udGFpbnMgYSBwaW4gdGhhdCdzIHN1cHBvc2VkIHRvIGFmZmVjdCBvdGhlciBTY3JvbGxUcmlnZ2VycyBmdXJ0aGVyIGRvd24gdGhlIHBhZ2UsIHRoZXkgd29uJ3QgYmUgYWRqdXN0ZWQgcHJvcGVybHkuXG5cbiAgICAgICAgY3VyUGluID0gY3VyVHJpZ2dlci5waW47XG5cbiAgICAgICAgaWYgKGN1clBpbiAmJiAoY3VyUGluID09PSB0cmlnZ2VyIHx8IGN1clBpbiA9PT0gcGluIHx8IGN1clBpbiA9PT0gcGlubmVkQ29udGFpbmVyKSAmJiAhY3VyVHJpZ2dlci5pc1JldmVydGVkKSB7XG4gICAgICAgICAgcmV2ZXJ0ZWRQaW5zIHx8IChyZXZlcnRlZFBpbnMgPSBbXSk7XG4gICAgICAgICAgcmV2ZXJ0ZWRQaW5zLnVuc2hpZnQoY3VyVHJpZ2dlcik7IC8vIHdlJ2xsIHJldmVydCBmcm9tIGZpcnN0IHRvIGxhc3QgdG8gbWFrZSBzdXJlIHRoaW5ncyByZWFjaCB0aGVpciBlbmQgc3RhdGUgcHJvcGVybHlcblxuICAgICAgICAgIGN1clRyaWdnZXIucmV2ZXJ0KHRydWUsIHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGN1clRyaWdnZXIgIT09IF90cmlnZ2Vyc1tpXSkge1xuICAgICAgICAgIC8vIGluIGNhc2UgaXQgZ290IHJlbW92ZWQuXG4gICAgICAgICAgdHJpZ2dlckluZGV4LS07XG4gICAgICAgICAgaS0tO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIF9pc0Z1bmN0aW9uKHBhcnNlZFN0YXJ0KSAmJiAocGFyc2VkU3RhcnQgPSBwYXJzZWRTdGFydChzZWxmKSk7XG4gICAgICBwYXJzZWRTdGFydCA9IF9wYXJzZUNsYW1wKHBhcnNlZFN0YXJ0LCBcInN0YXJ0XCIsIHNlbGYpO1xuICAgICAgc3RhcnQgPSBfcGFyc2VQb3NpdGlvbihwYXJzZWRTdGFydCwgdHJpZ2dlciwgc2l6ZSwgZGlyZWN0aW9uLCBzY3JvbGxGdW5jKCksIG1hcmtlclN0YXJ0LCBtYXJrZXJTdGFydFRyaWdnZXIsIHNlbGYsIHNjcm9sbGVyQm91bmRzLCBib3JkZXJXaWR0aCwgdXNlRml4ZWRQb3NpdGlvbiwgbWF4LCBjb250YWluZXJBbmltYXRpb24sIHNlbGYuX3N0YXJ0Q2xhbXAgJiYgXCJfc3RhcnRDbGFtcFwiKSB8fCAocGluID8gLTAuMDAxIDogMCk7XG4gICAgICBfaXNGdW5jdGlvbihwYXJzZWRFbmQpICYmIChwYXJzZWRFbmQgPSBwYXJzZWRFbmQoc2VsZikpO1xuXG4gICAgICBpZiAoX2lzU3RyaW5nKHBhcnNlZEVuZCkgJiYgIXBhcnNlZEVuZC5pbmRleE9mKFwiKz1cIikpIHtcbiAgICAgICAgaWYgKH5wYXJzZWRFbmQuaW5kZXhPZihcIiBcIikpIHtcbiAgICAgICAgICBwYXJzZWRFbmQgPSAoX2lzU3RyaW5nKHBhcnNlZFN0YXJ0KSA/IHBhcnNlZFN0YXJ0LnNwbGl0KFwiIFwiKVswXSA6IFwiXCIpICsgcGFyc2VkRW5kO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9mZnNldCA9IF9vZmZzZXRUb1B4KHBhcnNlZEVuZC5zdWJzdHIoMiksIHNpemUpO1xuICAgICAgICAgIHBhcnNlZEVuZCA9IF9pc1N0cmluZyhwYXJzZWRTdGFydCkgPyBwYXJzZWRTdGFydCA6IChjb250YWluZXJBbmltYXRpb24gPyBnc2FwLnV0aWxzLm1hcFJhbmdlKDAsIGNvbnRhaW5lckFuaW1hdGlvbi5kdXJhdGlvbigpLCBjb250YWluZXJBbmltYXRpb24uc2Nyb2xsVHJpZ2dlci5zdGFydCwgY29udGFpbmVyQW5pbWF0aW9uLnNjcm9sbFRyaWdnZXIuZW5kLCBzdGFydCkgOiBzdGFydCkgKyBvZmZzZXQ7IC8vIF9wYXJzZVBvc2l0aW9uIHdvbid0IGZhY3RvciBpbiB0aGUgb2Zmc2V0IGlmIHRoZSBzdGFydCBpcyBhIG51bWJlciwgc28gZG8gaXQgaGVyZS5cblxuICAgICAgICAgIHBhcnNlZEVuZFRyaWdnZXIgPSB0cmlnZ2VyO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHBhcnNlZEVuZCA9IF9wYXJzZUNsYW1wKHBhcnNlZEVuZCwgXCJlbmRcIiwgc2VsZik7XG4gICAgICBlbmQgPSBNYXRoLm1heChzdGFydCwgX3BhcnNlUG9zaXRpb24ocGFyc2VkRW5kIHx8IChwYXJzZWRFbmRUcmlnZ2VyID8gXCIxMDAlIDBcIiA6IG1heCksIHBhcnNlZEVuZFRyaWdnZXIsIHNpemUsIGRpcmVjdGlvbiwgc2Nyb2xsRnVuYygpICsgb2Zmc2V0LCBtYXJrZXJFbmQsIG1hcmtlckVuZFRyaWdnZXIsIHNlbGYsIHNjcm9sbGVyQm91bmRzLCBib3JkZXJXaWR0aCwgdXNlRml4ZWRQb3NpdGlvbiwgbWF4LCBjb250YWluZXJBbmltYXRpb24sIHNlbGYuX2VuZENsYW1wICYmIFwiX2VuZENsYW1wXCIpKSB8fCAtMC4wMDE7XG4gICAgICBvZmZzZXQgPSAwO1xuICAgICAgaSA9IHRyaWdnZXJJbmRleDtcblxuICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICBjdXJUcmlnZ2VyID0gX3RyaWdnZXJzW2ldO1xuICAgICAgICBjdXJQaW4gPSBjdXJUcmlnZ2VyLnBpbjtcblxuICAgICAgICBpZiAoY3VyUGluICYmIGN1clRyaWdnZXIuc3RhcnQgLSBjdXJUcmlnZ2VyLl9waW5QdXNoIDw9IHN0YXJ0ICYmICFjb250YWluZXJBbmltYXRpb24gJiYgY3VyVHJpZ2dlci5lbmQgPiAwKSB7XG4gICAgICAgICAgY3MgPSBjdXJUcmlnZ2VyLmVuZCAtIChzZWxmLl9zdGFydENsYW1wID8gTWF0aC5tYXgoMCwgY3VyVHJpZ2dlci5zdGFydCkgOiBjdXJUcmlnZ2VyLnN0YXJ0KTtcblxuICAgICAgICAgIGlmICgoY3VyUGluID09PSB0cmlnZ2VyICYmIGN1clRyaWdnZXIuc3RhcnQgLSBjdXJUcmlnZ2VyLl9waW5QdXNoIDwgc3RhcnQgfHwgY3VyUGluID09PSBwaW5uZWRDb250YWluZXIpICYmIGlzTmFOKHBhcnNlZFN0YXJ0KSkge1xuICAgICAgICAgICAgLy8gbnVtZXJpYyBzdGFydCB2YWx1ZXMgc2hvdWxkbid0IGJlIG9mZnNldCBhdCBhbGwgLSB0cmVhdCB0aGVtIGFzIGFic29sdXRlXG4gICAgICAgICAgICBvZmZzZXQgKz0gY3MgKiAoMSAtIGN1clRyaWdnZXIucHJvZ3Jlc3MpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGN1clBpbiA9PT0gcGluICYmIChvdGhlclBpbk9mZnNldCArPSBjcyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc3RhcnQgKz0gb2Zmc2V0O1xuICAgICAgZW5kICs9IG9mZnNldDtcbiAgICAgIHNlbGYuX3N0YXJ0Q2xhbXAgJiYgKHNlbGYuX3N0YXJ0Q2xhbXAgKz0gb2Zmc2V0KTtcblxuICAgICAgaWYgKHNlbGYuX2VuZENsYW1wICYmICFfcmVmcmVzaGluZ0FsbCkge1xuICAgICAgICBzZWxmLl9lbmRDbGFtcCA9IGVuZCB8fCAtMC4wMDE7XG4gICAgICAgIGVuZCA9IE1hdGgubWluKGVuZCwgX21heFNjcm9sbChzY3JvbGxlciwgZGlyZWN0aW9uKSk7XG4gICAgICB9XG5cbiAgICAgIGNoYW5nZSA9IGVuZCAtIHN0YXJ0IHx8IChzdGFydCAtPSAwLjAxKSAmJiAwLjAwMTtcblxuICAgICAgaWYgKGlzRmlyc3RSZWZyZXNoKSB7XG4gICAgICAgIC8vIG9uIHRoZSB2ZXJ5IGZpcnN0IHJlZnJlc2goKSwgdGhlIHByZXZQcm9ncmVzcyBjb3VsZG4ndCBoYXZlIGJlZW4gYWNjdXJhdGUgeWV0IGJlY2F1c2UgdGhlIHN0YXJ0L2VuZCB3ZXJlIG5ldmVyIGNhbGN1bGF0ZWQsIHNvIHdlIHNldCBpdCBoZXJlLiBCZWZvcmUgMy4xMS41LCBpdCBjb3VsZCBsZWFkIHRvIGFuIGluYWNjdXJhdGUgc2Nyb2xsIHBvc2l0aW9uIHJlc3RvcmF0aW9uIHdpdGggc25hcHBpbmcuXG4gICAgICAgIHByZXZQcm9ncmVzcyA9IGdzYXAudXRpbHMuY2xhbXAoMCwgMSwgZ3NhcC51dGlscy5ub3JtYWxpemUoc3RhcnQsIGVuZCwgcHJldlNjcm9sbCkpO1xuICAgICAgfVxuXG4gICAgICBzZWxmLl9waW5QdXNoID0gb3RoZXJQaW5PZmZzZXQ7XG5cbiAgICAgIGlmIChtYXJrZXJTdGFydCAmJiBvZmZzZXQpIHtcbiAgICAgICAgLy8gb2Zmc2V0IHRoZSBtYXJrZXJzIGlmIG5lY2Vzc2FyeVxuICAgICAgICBjcyA9IHt9O1xuICAgICAgICBjc1tkaXJlY3Rpb24uYV0gPSBcIis9XCIgKyBvZmZzZXQ7XG4gICAgICAgIHBpbm5lZENvbnRhaW5lciAmJiAoY3NbZGlyZWN0aW9uLnBdID0gXCItPVwiICsgc2Nyb2xsRnVuYygpKTtcbiAgICAgICAgZ3NhcC5zZXQoW21hcmtlclN0YXJ0LCBtYXJrZXJFbmRdLCBjcyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChwaW4gJiYgIShfY2xhbXBpbmdNYXggJiYgc2VsZi5lbmQgPj0gX21heFNjcm9sbChzY3JvbGxlciwgZGlyZWN0aW9uKSkpIHtcbiAgICAgICAgY3MgPSBfZ2V0Q29tcHV0ZWRTdHlsZShwaW4pO1xuICAgICAgICBpc1ZlcnRpY2FsID0gZGlyZWN0aW9uID09PSBfdmVydGljYWw7XG4gICAgICAgIHNjcm9sbCA9IHNjcm9sbEZ1bmMoKTsgLy8gcmVjYWxjdWxhdGUgYmVjYXVzZSB0aGUgdHJpZ2dlcnMgY2FuIGFmZmVjdCB0aGUgc2Nyb2xsXG5cbiAgICAgICAgcGluU3RhcnQgPSBwYXJzZUZsb2F0KHBpbkdldHRlcihkaXJlY3Rpb24uYSkpICsgb3RoZXJQaW5PZmZzZXQ7XG5cbiAgICAgICAgaWYgKCFtYXggJiYgZW5kID4gMSkge1xuICAgICAgICAgIC8vIG1ha2VzIHN1cmUgdGhlIHNjcm9sbGVyIGhhcyBhIHNjcm9sbGJhciwgb3RoZXJ3aXNlIGlmIHNvbWV0aGluZyBoYXMgd2lkdGg6IDEwMCUsIGZvciBleGFtcGxlLCBpdCB3b3VsZCBiZSB0b28gYmlnIChleGNsdWRlIHRoZSBzY3JvbGxiYXIpLiBTZWUgaHR0cHM6Ly9nc2FwLmNvbS9mb3J1bXMvdG9waWMvMjUxODItc2Nyb2xsdHJpZ2dlci13aWR0aC1vZi1wYWdlLWluY3JlYXNlLXdoZXJlLW1hcmtlcnMtYXJlLXNldC10by1mYWxzZS9cbiAgICAgICAgICBmb3JjZWRPdmVyZmxvdyA9IChpc1ZpZXdwb3J0ID8gX2RvYy5zY3JvbGxpbmdFbGVtZW50IHx8IF9kb2NFbCA6IHNjcm9sbGVyKS5zdHlsZTtcbiAgICAgICAgICBmb3JjZWRPdmVyZmxvdyA9IHtcbiAgICAgICAgICAgIHN0eWxlOiBmb3JjZWRPdmVyZmxvdyxcbiAgICAgICAgICAgIHZhbHVlOiBmb3JjZWRPdmVyZmxvd1tcIm92ZXJmbG93XCIgKyBkaXJlY3Rpb24uYS50b1VwcGVyQ2FzZSgpXVxuICAgICAgICAgIH07XG5cbiAgICAgICAgICBpZiAoaXNWaWV3cG9ydCAmJiBfZ2V0Q29tcHV0ZWRTdHlsZShfYm9keSlbXCJvdmVyZmxvd1wiICsgZGlyZWN0aW9uLmEudG9VcHBlckNhc2UoKV0gIT09IFwic2Nyb2xsXCIpIHtcbiAgICAgICAgICAgIC8vIGF2b2lkIGFuIGV4dHJhIHNjcm9sbGJhciBpZiBCT1RIIDxodG1sPiBhbmQgPGJvZHk+IGhhdmUgb3ZlcmZsb3cgc2V0IHRvIFwic2Nyb2xsXCJcbiAgICAgICAgICAgIGZvcmNlZE92ZXJmbG93LnN0eWxlW1wib3ZlcmZsb3dcIiArIGRpcmVjdGlvbi5hLnRvVXBwZXJDYXNlKCldID0gXCJzY3JvbGxcIjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBfc3dhcFBpbkluKHBpbiwgc3BhY2VyLCBjcyk7XG5cbiAgICAgICAgcGluU3RhdGUgPSBfZ2V0U3RhdGUocGluKTsgLy8gdHJhbnNmb3JtcyB3aWxsIGludGVyZmVyZSB3aXRoIHRoZSB0b3AvbGVmdC9yaWdodC9ib3R0b20gcGxhY2VtZW50LCBzbyByZW1vdmUgdGhlbSB0ZW1wb3JhcmlseS4gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkgZmFjdG9ycyBpbiB0cmFuc2Zvcm1zLlxuXG4gICAgICAgIGJvdW5kcyA9IF9nZXRCb3VuZHMocGluLCB0cnVlKTtcbiAgICAgICAgb3Bwb3NpdGVTY3JvbGwgPSB1c2VGaXhlZFBvc2l0aW9uICYmIF9nZXRTY3JvbGxGdW5jKHNjcm9sbGVyLCBpc1ZlcnRpY2FsID8gX2hvcml6b250YWwgOiBfdmVydGljYWwpKCk7XG5cbiAgICAgICAgaWYgKHBpblNwYWNpbmcpIHtcbiAgICAgICAgICBzcGFjZXJTdGF0ZSA9IFtwaW5TcGFjaW5nICsgZGlyZWN0aW9uLm9zMiwgY2hhbmdlICsgb3RoZXJQaW5PZmZzZXQgKyBfcHhdO1xuICAgICAgICAgIHNwYWNlclN0YXRlLnQgPSBzcGFjZXI7XG4gICAgICAgICAgaSA9IHBpblNwYWNpbmcgPT09IF9wYWRkaW5nID8gX2dldFNpemUocGluLCBkaXJlY3Rpb24pICsgY2hhbmdlICsgb3RoZXJQaW5PZmZzZXQgOiAwO1xuXG4gICAgICAgICAgaWYgKGkpIHtcbiAgICAgICAgICAgIHNwYWNlclN0YXRlLnB1c2goZGlyZWN0aW9uLmQsIGkgKyBfcHgpOyAvLyBmb3IgYm94LXNpemluZzogYm9yZGVyLWJveCAobXVzdCBpbmNsdWRlIHBhZGRpbmcpLlxuXG4gICAgICAgICAgICBzcGFjZXIuc3R5bGUuZmxleEJhc2lzICE9PSBcImF1dG9cIiAmJiAoc3BhY2VyLnN0eWxlLmZsZXhCYXNpcyA9IGkgKyBfcHgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIF9zZXRTdGF0ZShzcGFjZXJTdGF0ZSk7XG5cbiAgICAgICAgICBpZiAocGlubmVkQ29udGFpbmVyKSB7XG4gICAgICAgICAgICAvLyBpbiBTY3JvbGxUcmlnZ2VyLnJlZnJlc2goKSwgd2UgbmVlZCB0byByZS1ldmFsdWF0ZSB0aGUgcGluQ29udGFpbmVyJ3Mgc2l6ZSBiZWNhdXNlIHRoaXMgcGluU3BhY2luZyBtYXkgc3RyZXRjaCBpdCBvdXQsIGJ1dCB3ZSBjYW4ndCBqdXN0IGFkZCB0aGUgZXhhY3QgZGlzdGFuY2UgYmVjYXVzZSBkZXBlbmRpbmcgb24gbGF5b3V0LCBpdCBtYXkgbm90IHB1c2ggdGhpbmdzIGRvd24gb3IgaXQgbWF5IG9ubHkgZG8gc28gcGFydGlhbGx5LlxuICAgICAgICAgICAgX3RyaWdnZXJzLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgaWYgKHQucGluID09PSBwaW5uZWRDb250YWluZXIgJiYgdC52YXJzLnBpblNwYWNpbmcgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgdC5fc3ViUGluT2Zmc2V0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdXNlRml4ZWRQb3NpdGlvbiAmJiBzY3JvbGxGdW5jKHByZXZTY3JvbGwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGkgPSBfZ2V0U2l6ZShwaW4sIGRpcmVjdGlvbik7XG4gICAgICAgICAgaSAmJiBzcGFjZXIuc3R5bGUuZmxleEJhc2lzICE9PSBcImF1dG9cIiAmJiAoc3BhY2VyLnN0eWxlLmZsZXhCYXNpcyA9IGkgKyBfcHgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHVzZUZpeGVkUG9zaXRpb24pIHtcbiAgICAgICAgICBvdmVycmlkZSA9IHtcbiAgICAgICAgICAgIHRvcDogYm91bmRzLnRvcCArIChpc1ZlcnRpY2FsID8gc2Nyb2xsIC0gc3RhcnQgOiBvcHBvc2l0ZVNjcm9sbCkgKyBfcHgsXG4gICAgICAgICAgICBsZWZ0OiBib3VuZHMubGVmdCArIChpc1ZlcnRpY2FsID8gb3Bwb3NpdGVTY3JvbGwgOiBzY3JvbGwgLSBzdGFydCkgKyBfcHgsXG4gICAgICAgICAgICBib3hTaXppbmc6IFwiYm9yZGVyLWJveFwiLFxuICAgICAgICAgICAgcG9zaXRpb246IFwiZml4ZWRcIlxuICAgICAgICAgIH07XG4gICAgICAgICAgb3ZlcnJpZGVbX3dpZHRoXSA9IG92ZXJyaWRlW1wibWF4XCIgKyBfV2lkdGhdID0gTWF0aC5jZWlsKGJvdW5kcy53aWR0aCkgKyBfcHg7XG4gICAgICAgICAgb3ZlcnJpZGVbX2hlaWdodF0gPSBvdmVycmlkZVtcIm1heFwiICsgX0hlaWdodF0gPSBNYXRoLmNlaWwoYm91bmRzLmhlaWdodCkgKyBfcHg7XG4gICAgICAgICAgb3ZlcnJpZGVbX21hcmdpbl0gPSBvdmVycmlkZVtfbWFyZ2luICsgX1RvcF0gPSBvdmVycmlkZVtfbWFyZ2luICsgX1JpZ2h0XSA9IG92ZXJyaWRlW19tYXJnaW4gKyBfQm90dG9tXSA9IG92ZXJyaWRlW19tYXJnaW4gKyBfTGVmdF0gPSBcIjBcIjtcbiAgICAgICAgICBvdmVycmlkZVtfcGFkZGluZ10gPSBjc1tfcGFkZGluZ107XG4gICAgICAgICAgb3ZlcnJpZGVbX3BhZGRpbmcgKyBfVG9wXSA9IGNzW19wYWRkaW5nICsgX1RvcF07XG4gICAgICAgICAgb3ZlcnJpZGVbX3BhZGRpbmcgKyBfUmlnaHRdID0gY3NbX3BhZGRpbmcgKyBfUmlnaHRdO1xuICAgICAgICAgIG92ZXJyaWRlW19wYWRkaW5nICsgX0JvdHRvbV0gPSBjc1tfcGFkZGluZyArIF9Cb3R0b21dO1xuICAgICAgICAgIG92ZXJyaWRlW19wYWRkaW5nICsgX0xlZnRdID0gY3NbX3BhZGRpbmcgKyBfTGVmdF07XG4gICAgICAgICAgcGluQWN0aXZlU3RhdGUgPSBfY29weVN0YXRlKHBpbk9yaWdpbmFsU3RhdGUsIG92ZXJyaWRlLCBwaW5SZXBhcmVudCk7XG4gICAgICAgICAgX3JlZnJlc2hpbmdBbGwgJiYgc2Nyb2xsRnVuYygwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhbmltYXRpb24pIHtcbiAgICAgICAgICAvLyB0aGUgYW5pbWF0aW9uIG1pZ2h0IGJlIGFmZmVjdGluZyB0aGUgdHJhbnNmb3JtLCBzbyB3ZSBtdXN0IGp1bXAgdG8gdGhlIGVuZCwgY2hlY2sgdGhlIHZhbHVlLCBhbmQgY29tcGVuc2F0ZSBhY2NvcmRpbmdseS4gT3RoZXJ3aXNlLCB3aGVuIGl0IGJlY29tZXMgdW5waW5uZWQsIHRoZSBwaW5TZXR0ZXIoKSB3aWxsIGdldCBzZXQgdG8gYSB2YWx1ZSB0aGF0IGRvZXNuJ3QgaW5jbHVkZSB3aGF0ZXZlciB0aGUgYW5pbWF0aW9uIGRpZC5cbiAgICAgICAgICBpbml0dGVkID0gYW5pbWF0aW9uLl9pbml0dGVkOyAvLyBpZiBub3QsIHdlIG11c3QgaW52YWxpZGF0ZSgpIGFmdGVyIHRoaXMgc3RlcCwgb3RoZXJ3aXNlIGl0IGNvdWxkIGxvY2sgaW4gc3RhcnRpbmcgdmFsdWVzIHByZW1hdHVyZWx5LlxuXG4gICAgICAgICAgX3N1cHByZXNzT3ZlcndyaXRlcygxKTtcblxuICAgICAgICAgIGFuaW1hdGlvbi5yZW5kZXIoYW5pbWF0aW9uLmR1cmF0aW9uKCksIHRydWUsIHRydWUpO1xuICAgICAgICAgIHBpbkNoYW5nZSA9IHBpbkdldHRlcihkaXJlY3Rpb24uYSkgLSBwaW5TdGFydCArIGNoYW5nZSArIG90aGVyUGluT2Zmc2V0O1xuICAgICAgICAgIHBpbk1vdmVzID0gTWF0aC5hYnMoY2hhbmdlIC0gcGluQ2hhbmdlKSA+IDE7XG4gICAgICAgICAgdXNlRml4ZWRQb3NpdGlvbiAmJiBwaW5Nb3ZlcyAmJiBwaW5BY3RpdmVTdGF0ZS5zcGxpY2UocGluQWN0aXZlU3RhdGUubGVuZ3RoIC0gMiwgMik7IC8vIHRyYW5zZm9ybSBpcyB0aGUgbGFzdCBwcm9wZXJ0eS92YWx1ZSBzZXQgaW4gdGhlIHN0YXRlIEFycmF5LiBTaW5jZSB0aGUgYW5pbWF0aW9uIGlzIGNvbnRyb2xsaW5nIHRoYXQsIHdlIHNob3VsZCBvbWl0IGl0LlxuXG4gICAgICAgICAgYW5pbWF0aW9uLnJlbmRlcigwLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgICBpbml0dGVkIHx8IGFuaW1hdGlvbi5pbnZhbGlkYXRlKHRydWUpO1xuICAgICAgICAgIGFuaW1hdGlvbi5wYXJlbnQgfHwgYW5pbWF0aW9uLnRvdGFsVGltZShhbmltYXRpb24udG90YWxUaW1lKCkpOyAvLyBpZiwgZm9yIGV4YW1wbGUsIGEgdG9nZ2xlQWN0aW9uIGNhbGxlZCBwbGF5KCkgYW5kIHRoZW4gcmVmcmVzaCgpIGhhcHBlbnMgYW5kIHdoZW4gd2UgcmVuZGVyKDEpIGFib3ZlLCBpdCB3b3VsZCBjYXVzZSB0aGUgYW5pbWF0aW9uIHRvIGNvbXBsZXRlIGFuZCBnZXQgcmVtb3ZlZCBmcm9tIGl0cyBwYXJlbnQsIHNvIHRoaXMgbWFrZXMgc3VyZSBpdCBnZXRzIHB1dCBiYWNrIGluLlxuXG4gICAgICAgICAgX3N1cHByZXNzT3ZlcndyaXRlcygwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwaW5DaGFuZ2UgPSBjaGFuZ2U7XG4gICAgICAgIH1cblxuICAgICAgICBmb3JjZWRPdmVyZmxvdyAmJiAoZm9yY2VkT3ZlcmZsb3cudmFsdWUgPyBmb3JjZWRPdmVyZmxvdy5zdHlsZVtcIm92ZXJmbG93XCIgKyBkaXJlY3Rpb24uYS50b1VwcGVyQ2FzZSgpXSA9IGZvcmNlZE92ZXJmbG93LnZhbHVlIDogZm9yY2VkT3ZlcmZsb3cuc3R5bGUucmVtb3ZlUHJvcGVydHkoXCJvdmVyZmxvdy1cIiArIGRpcmVjdGlvbi5hKSk7XG4gICAgICB9IGVsc2UgaWYgKHRyaWdnZXIgJiYgc2Nyb2xsRnVuYygpICYmICFjb250YWluZXJBbmltYXRpb24pIHtcbiAgICAgICAgLy8gaXQgbWF5IGJlIElOU0lERSBhIHBpbm5lZCBlbGVtZW50LCBzbyB3YWxrIHVwIHRoZSB0cmVlIGFuZCBsb29rIGZvciBhbnkgZWxlbWVudHMgd2l0aCBfcGluT2Zmc2V0IHRvIGNvbXBlbnNhdGUgYmVjYXVzZSBhbnl0aGluZyB3aXRoIHBpblNwYWNpbmcgdGhhdCdzIGFscmVhZHkgc2Nyb2xsZWQgd291bGQgdGhyb3cgb2ZmIHRoZSBtZWFzdXJlbWVudHMgaW4gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgICAgICAgYm91bmRzID0gdHJpZ2dlci5wYXJlbnROb2RlO1xuXG4gICAgICAgIHdoaWxlIChib3VuZHMgJiYgYm91bmRzICE9PSBfYm9keSkge1xuICAgICAgICAgIGlmIChib3VuZHMuX3Bpbk9mZnNldCkge1xuICAgICAgICAgICAgc3RhcnQgLT0gYm91bmRzLl9waW5PZmZzZXQ7XG4gICAgICAgICAgICBlbmQgLT0gYm91bmRzLl9waW5PZmZzZXQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYm91bmRzID0gYm91bmRzLnBhcmVudE5vZGU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV2ZXJ0ZWRQaW5zICYmIHJldmVydGVkUGlucy5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHJldHVybiB0LnJldmVydChmYWxzZSwgdHJ1ZSk7XG4gICAgICB9KTtcbiAgICAgIHNlbGYuc3RhcnQgPSBzdGFydDtcbiAgICAgIHNlbGYuZW5kID0gZW5kO1xuICAgICAgc2Nyb2xsMSA9IHNjcm9sbDIgPSBfcmVmcmVzaGluZ0FsbCA/IHByZXZTY3JvbGwgOiBzY3JvbGxGdW5jKCk7IC8vIHJlc2V0IHZlbG9jaXR5XG5cbiAgICAgIGlmICghY29udGFpbmVyQW5pbWF0aW9uICYmICFfcmVmcmVzaGluZ0FsbCkge1xuICAgICAgICBzY3JvbGwxIDwgcHJldlNjcm9sbCAmJiBzY3JvbGxGdW5jKHByZXZTY3JvbGwpO1xuICAgICAgICBzZWxmLnNjcm9sbC5yZWMgPSAwO1xuICAgICAgfVxuXG4gICAgICBzZWxmLnJldmVydChmYWxzZSwgdHJ1ZSk7XG4gICAgICBsYXN0UmVmcmVzaCA9IF9nZXRUaW1lKCk7XG5cbiAgICAgIGlmIChzbmFwRGVsYXllZENhbGwpIHtcbiAgICAgICAgbGFzdFNuYXAgPSAtMTsgLy8ganVzdCBzbyBzbmFwcGluZyBnZXRzIHJlLWVuYWJsZWQsIGNsZWFyIG91dCBhbnkgcmVjb3JkZWQgbGFzdCB2YWx1ZVxuICAgICAgICAvLyBzZWxmLmlzQWN0aXZlICYmIHNjcm9sbEZ1bmMoc3RhcnQgKyBjaGFuZ2UgKiBwcmV2UHJvZ3Jlc3MpOyAvLyBwcmV2aW91c2x5IHRoaXMgbGluZSB3YXMgaGVyZSB0byBlbnN1cmUgdGhhdCB3aGVuIHNuYXBwaW5nIGtpY2tzIGluLCBpdCdzIGZyb20gdGhlIHByZXZpb3VzIHByb2dyZXNzIGJ1dCBpbiBzb21lIGNhc2VzIHRoYXQncyBub3QgZGVzaXJhYmxlLCBsaWtlIGFuIGFsbC1wYWdlIFNjcm9sbFRyaWdnZXIgd2hlbiBuZXcgY29udGVudCBnZXRzIGFkZGVkIHRvIHRoZSBwYWdlLCB0aGF0J2QgdG90YWxseSBjaGFuZ2UgdGhlIHByb2dyZXNzLlxuXG4gICAgICAgIHNuYXBEZWxheWVkQ2FsbC5yZXN0YXJ0KHRydWUpO1xuICAgICAgfVxuXG4gICAgICBfcmVmcmVzaGluZyA9IDA7XG4gICAgICBhbmltYXRpb24gJiYgaXNUb2dnbGUgJiYgKGFuaW1hdGlvbi5faW5pdHRlZCB8fCBwcmV2QW5pbVByb2dyZXNzKSAmJiBhbmltYXRpb24ucHJvZ3Jlc3MoKSAhPT0gcHJldkFuaW1Qcm9ncmVzcyAmJiBhbmltYXRpb24ucHJvZ3Jlc3MocHJldkFuaW1Qcm9ncmVzcyB8fCAwLCB0cnVlKS5yZW5kZXIoYW5pbWF0aW9uLnRpbWUoKSwgdHJ1ZSwgdHJ1ZSk7IC8vIG11c3QgZm9yY2UgYSByZS1yZW5kZXIgYmVjYXVzZSBpZiBzYXZlU3R5bGVzKCkgd2FzIHVzZWQgb24gdGhlIHRhcmdldChzKSwgdGhlIHN0eWxlcyBjb3VsZCBoYXZlIGJlZW4gd2lwZWQgb3V0IGR1cmluZyB0aGUgcmVmcmVzaCgpLlxuXG4gICAgICBpZiAoaXNGaXJzdFJlZnJlc2ggfHwgcHJldlByb2dyZXNzICE9PSBzZWxmLnByb2dyZXNzIHx8IGNvbnRhaW5lckFuaW1hdGlvbiB8fCBpbnZhbGlkYXRlT25SZWZyZXNoKSB7XG4gICAgICAgIC8vIGVuc3VyZXMgdGhhdCB0aGUgZGlyZWN0aW9uIGlzIHNldCBwcm9wZXJseSAod2hlbiByZWZyZXNoaW5nLCBwcm9ncmVzcyBpcyBzZXQgYmFjayB0byAwIGluaXRpYWxseSwgdGhlbiBiYWNrIGFnYWluIHRvIHdoZXJldmVyIGl0IG5lZWRzIHRvIGJlKSBhbmQgdGhhdCBjYWxsYmFja3MgYXJlIHRyaWdnZXJlZC5cbiAgICAgICAgYW5pbWF0aW9uICYmICFpc1RvZ2dsZSAmJiBhbmltYXRpb24udG90YWxQcm9ncmVzcyhjb250YWluZXJBbmltYXRpb24gJiYgc3RhcnQgPCAtMC4wMDEgJiYgIXByZXZQcm9ncmVzcyA/IGdzYXAudXRpbHMubm9ybWFsaXplKHN0YXJ0LCBlbmQsIDApIDogcHJldlByb2dyZXNzLCB0cnVlKTsgLy8gdG8gYXZvaWQgaXNzdWVzIHdoZXJlIGFuaW1hdGlvbiBjYWxsYmFja3MgbGlrZSBvblN0YXJ0IGFyZW4ndCB0cmlnZ2VyZWQuXG5cbiAgICAgICAgc2VsZi5wcm9ncmVzcyA9IGlzRmlyc3RSZWZyZXNoIHx8IChzY3JvbGwxIC0gc3RhcnQpIC8gY2hhbmdlID09PSBwcmV2UHJvZ3Jlc3MgPyAwIDogcHJldlByb2dyZXNzO1xuICAgICAgfVxuXG4gICAgICBwaW4gJiYgcGluU3BhY2luZyAmJiAoc3BhY2VyLl9waW5PZmZzZXQgPSBNYXRoLnJvdW5kKHNlbGYucHJvZ3Jlc3MgKiBwaW5DaGFuZ2UpKTtcbiAgICAgIHNjcnViVHdlZW4gJiYgc2NydWJUd2Vlbi5pbnZhbGlkYXRlKCk7XG5cbiAgICAgIGlmICghaXNOYU4obWFya2VyU3RhcnRPZmZzZXQpKSB7XG4gICAgICAgIC8vIG51bWJlcnMgd2VyZSBwYXNzZWQgaW4gZm9yIHRoZSBwb3NpdGlvbiB3aGljaCBhcmUgYWJzb2x1dGUsIHNvIGluc3RlYWQgb2YganVzdCBwdXR0aW5nIHRoZSBtYXJrZXJzIGF0IHRoZSB2ZXJ5IGJvdHRvbSBvZiB0aGUgdmlld3BvcnQsIHdlIGZpZ3VyZSBvdXQgaG93IGZhciB0aGV5IHNoaWZ0ZWQgZG93biAoaXQncyBzYWZlIHRvIGFzc3VtZSB0aGV5IHdlcmUgb3JpZ2luYWxseSBwb3NpdGlvbmVkIGluIGNsb3NlciByZWxhdGlvbiB0byB0aGUgdHJpZ2dlciBlbGVtZW50IHdpdGggdmFsdWVzIGxpa2UgXCJ0b3BcIiwgXCJjZW50ZXJcIiwgYSBwZXJjZW50YWdlIG9yIHdoYXRldmVyLCBzbyB3ZSBvZmZzZXQgdGhhdCBtdWNoIGluIHRoZSBvcHBvc2l0ZSBkaXJlY3Rpb24gdG8gYmFzaWNhbGx5IHJldmVydCB0aGVtIHRvIHRoZSByZWxhdGl2ZSBwb3NpdGlvbiB0aHkgd2VyZSBhdCBwcmV2aW91c2x5LlxuICAgICAgICBtYXJrZXJTdGFydE9mZnNldCAtPSBnc2FwLmdldFByb3BlcnR5KG1hcmtlclN0YXJ0VHJpZ2dlciwgZGlyZWN0aW9uLnApO1xuICAgICAgICBtYXJrZXJFbmRPZmZzZXQgLT0gZ3NhcC5nZXRQcm9wZXJ0eShtYXJrZXJFbmRUcmlnZ2VyLCBkaXJlY3Rpb24ucCk7XG5cbiAgICAgICAgX3NoaWZ0TWFya2VyKG1hcmtlclN0YXJ0VHJpZ2dlciwgZGlyZWN0aW9uLCBtYXJrZXJTdGFydE9mZnNldCk7XG5cbiAgICAgICAgX3NoaWZ0TWFya2VyKG1hcmtlclN0YXJ0LCBkaXJlY3Rpb24sIG1hcmtlclN0YXJ0T2Zmc2V0IC0gKHBpbk9mZnNldCB8fCAwKSk7XG5cbiAgICAgICAgX3NoaWZ0TWFya2VyKG1hcmtlckVuZFRyaWdnZXIsIGRpcmVjdGlvbiwgbWFya2VyRW5kT2Zmc2V0KTtcblxuICAgICAgICBfc2hpZnRNYXJrZXIobWFya2VyRW5kLCBkaXJlY3Rpb24sIG1hcmtlckVuZE9mZnNldCAtIChwaW5PZmZzZXQgfHwgMCkpO1xuICAgICAgfVxuXG4gICAgICBpc0ZpcnN0UmVmcmVzaCAmJiAhX3JlZnJlc2hpbmdBbGwgJiYgc2VsZi51cGRhdGUoKTsgLy8gZWRnZSBjYXNlIC0gd2hlbiB5b3UgcmVsb2FkIGEgcGFnZSB3aGVuIGl0J3MgYWxyZWFkeSBzY3JvbGxlZCBkb3duLCBzb21lIGJyb3dzZXJzIGZpcmUgYSBcInNjcm9sbFwiIGV2ZW50IGJlZm9yZSBET01Db250ZW50TG9hZGVkLCB0cmlnZ2VyaW5nIGFuIHVwZGF0ZUFsbCgpLiBJZiB3ZSBkb24ndCB1cGRhdGUgdGhlIHNlbGYucHJvZ3Jlc3MgYXMgcGFydCBvZiByZWZyZXNoKCksIHRoZW4gd2hlbiBpdCBoYXBwZW5zIG5leHQsIGl0IG1heSByZWNvcmQgcHJldlByb2dyZXNzIGFzIDAgd2hlbiBpdCByZWFsbHkgc2hvdWxkbid0LCBwb3RlbnRpYWxseSBjYXVzaW5nIGEgY2FsbGJhY2sgaW4gYW4gYW5pbWF0aW9uIHRvIGZpcmUgYWdhaW4uXG5cbiAgICAgIGlmIChvblJlZnJlc2ggJiYgIV9yZWZyZXNoaW5nQWxsICYmICFleGVjdXRpbmdPblJlZnJlc2gpIHtcbiAgICAgICAgLy8gd2hlbiByZWZyZXNoaW5nIGFsbCwgd2UgZG8gZXh0cmEgd29yayB0byBjb3JyZWN0IHBpbm5lZENvbnRhaW5lciBzaXplcyBhbmQgZW5zdXJlIHRoaW5ncyBkb24ndCBleGNlZWQgdGhlIG1heFNjcm9sbCwgc28gd2Ugc2hvdWxkIGRvIGFsbCB0aGUgcmVmcmVzaGVzIGF0IHRoZSBlbmQgYWZ0ZXIgYWxsIHRoYXQgd29yayBzbyB0aGF0IHRoZSBzdGFydC9lbmQgdmFsdWVzIGFyZSBjb3JyZWN0ZWQuXG4gICAgICAgIGV4ZWN1dGluZ09uUmVmcmVzaCA9IHRydWU7XG4gICAgICAgIG9uUmVmcmVzaChzZWxmKTtcbiAgICAgICAgZXhlY3V0aW5nT25SZWZyZXNoID0gZmFsc2U7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHNlbGYuZ2V0VmVsb2NpdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gKHNjcm9sbEZ1bmMoKSAtIHNjcm9sbDIpIC8gKF9nZXRUaW1lKCkgLSBfdGltZTIpICogMTAwMCB8fCAwO1xuICAgIH07XG5cbiAgICBzZWxmLmVuZEFuaW1hdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF9lbmRBbmltYXRpb24oc2VsZi5jYWxsYmFja0FuaW1hdGlvbik7XG5cbiAgICAgIGlmIChhbmltYXRpb24pIHtcbiAgICAgICAgc2NydWJUd2VlbiA/IHNjcnViVHdlZW4ucHJvZ3Jlc3MoMSkgOiAhYW5pbWF0aW9uLnBhdXNlZCgpID8gX2VuZEFuaW1hdGlvbihhbmltYXRpb24sIGFuaW1hdGlvbi5yZXZlcnNlZCgpKSA6IGlzVG9nZ2xlIHx8IF9lbmRBbmltYXRpb24oYW5pbWF0aW9uLCBzZWxmLmRpcmVjdGlvbiA8IDAsIDEpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBzZWxmLmxhYmVsVG9TY3JvbGwgPSBmdW5jdGlvbiAobGFiZWwpIHtcbiAgICAgIHJldHVybiBhbmltYXRpb24gJiYgYW5pbWF0aW9uLmxhYmVscyAmJiAoc3RhcnQgfHwgc2VsZi5yZWZyZXNoKCkgfHwgc3RhcnQpICsgYW5pbWF0aW9uLmxhYmVsc1tsYWJlbF0gLyBhbmltYXRpb24uZHVyYXRpb24oKSAqIGNoYW5nZSB8fCAwO1xuICAgIH07XG5cbiAgICBzZWxmLmdldFRyYWlsaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIHZhciBpID0gX3RyaWdnZXJzLmluZGV4T2Yoc2VsZiksXG4gICAgICAgICAgYSA9IHNlbGYuZGlyZWN0aW9uID4gMCA/IF90cmlnZ2Vycy5zbGljZSgwLCBpKS5yZXZlcnNlKCkgOiBfdHJpZ2dlcnMuc2xpY2UoaSArIDEpO1xuXG4gICAgICByZXR1cm4gKF9pc1N0cmluZyhuYW1lKSA/IGEuZmlsdGVyKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHJldHVybiB0LnZhcnMucHJldmVudE92ZXJsYXBzID09PSBuYW1lO1xuICAgICAgfSkgOiBhKS5maWx0ZXIoZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgcmV0dXJuIHNlbGYuZGlyZWN0aW9uID4gMCA/IHQuZW5kIDw9IHN0YXJ0IDogdC5zdGFydCA+PSBlbmQ7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgc2VsZi51cGRhdGUgPSBmdW5jdGlvbiAocmVzZXQsIHJlY29yZFZlbG9jaXR5LCBmb3JjZUZha2UpIHtcbiAgICAgIGlmIChjb250YWluZXJBbmltYXRpb24gJiYgIWZvcmNlRmFrZSAmJiAhcmVzZXQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2Nyb2xsID0gX3JlZnJlc2hpbmdBbGwgPT09IHRydWUgPyBwcmV2U2Nyb2xsIDogc2VsZi5zY3JvbGwoKSxcbiAgICAgICAgICBwID0gcmVzZXQgPyAwIDogKHNjcm9sbCAtIHN0YXJ0KSAvIGNoYW5nZSxcbiAgICAgICAgICBjbGlwcGVkID0gcCA8IDAgPyAwIDogcCA+IDEgPyAxIDogcCB8fCAwLFxuICAgICAgICAgIHByZXZQcm9ncmVzcyA9IHNlbGYucHJvZ3Jlc3MsXG4gICAgICAgICAgaXNBY3RpdmUsXG4gICAgICAgICAgd2FzQWN0aXZlLFxuICAgICAgICAgIHRvZ2dsZVN0YXRlLFxuICAgICAgICAgIGFjdGlvbixcbiAgICAgICAgICBzdGF0ZUNoYW5nZWQsXG4gICAgICAgICAgdG9nZ2xlZCxcbiAgICAgICAgICBpc0F0TWF4LFxuICAgICAgICAgIGlzVGFraW5nQWN0aW9uO1xuXG4gICAgICBpZiAocmVjb3JkVmVsb2NpdHkpIHtcbiAgICAgICAgc2Nyb2xsMiA9IHNjcm9sbDE7XG4gICAgICAgIHNjcm9sbDEgPSBjb250YWluZXJBbmltYXRpb24gPyBzY3JvbGxGdW5jKCkgOiBzY3JvbGw7XG5cbiAgICAgICAgaWYgKHNuYXApIHtcbiAgICAgICAgICBzbmFwMiA9IHNuYXAxO1xuICAgICAgICAgIHNuYXAxID0gYW5pbWF0aW9uICYmICFpc1RvZ2dsZSA/IGFuaW1hdGlvbi50b3RhbFByb2dyZXNzKCkgOiBjbGlwcGVkO1xuICAgICAgICB9XG4gICAgICB9IC8vIGFudGljaXBhdGUgdGhlIHBpbm5pbmcgYSBmZXcgdGlja3MgYWhlYWQgb2YgdGltZSBiYXNlZCBvbiB2ZWxvY2l0eSB0byBhdm9pZCBhIHZpc3VhbCBnbGl0Y2ggZHVlIHRvIHRoZSBmYWN0IHRoYXQgbW9zdCBicm93c2VycyBkbyBzY3JvbGxpbmcgb24gYSBzZXBhcmF0ZSB0aHJlYWQgKG5vdCBzeW5jZWQgd2l0aCByZXF1ZXN0QW5pbWF0aW9uRnJhbWUpLlxuXG5cbiAgICAgIGlmIChhbnRpY2lwYXRlUGluICYmIHBpbiAmJiAhX3JlZnJlc2hpbmcgJiYgIV9zdGFydHVwICYmIF9sYXN0U2Nyb2xsVGltZSkge1xuICAgICAgICBpZiAoIWNsaXBwZWQgJiYgc3RhcnQgPCBzY3JvbGwgKyAoc2Nyb2xsIC0gc2Nyb2xsMikgLyAoX2dldFRpbWUoKSAtIF90aW1lMikgKiBhbnRpY2lwYXRlUGluKSB7XG4gICAgICAgICAgY2xpcHBlZCA9IDAuMDAwMTtcbiAgICAgICAgfSBlbHNlIGlmIChjbGlwcGVkID09PSAxICYmIGVuZCA+IHNjcm9sbCArIChzY3JvbGwgLSBzY3JvbGwyKSAvIChfZ2V0VGltZSgpIC0gX3RpbWUyKSAqIGFudGljaXBhdGVQaW4pIHtcbiAgICAgICAgICBjbGlwcGVkID0gMC45OTk5O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChjbGlwcGVkICE9PSBwcmV2UHJvZ3Jlc3MgJiYgc2VsZi5lbmFibGVkKSB7XG4gICAgICAgIGlzQWN0aXZlID0gc2VsZi5pc0FjdGl2ZSA9ICEhY2xpcHBlZCAmJiBjbGlwcGVkIDwgMTtcbiAgICAgICAgd2FzQWN0aXZlID0gISFwcmV2UHJvZ3Jlc3MgJiYgcHJldlByb2dyZXNzIDwgMTtcbiAgICAgICAgdG9nZ2xlZCA9IGlzQWN0aXZlICE9PSB3YXNBY3RpdmU7XG4gICAgICAgIHN0YXRlQ2hhbmdlZCA9IHRvZ2dsZWQgfHwgISFjbGlwcGVkICE9PSAhIXByZXZQcm9ncmVzczsgLy8gY291bGQgZ28gZnJvbSBzdGFydCBhbGwgdGhlIHdheSB0byBlbmQsIHRodXMgaXQgZGlkbid0IHRvZ2dsZSBidXQgaXQgZGlkIGNoYW5nZSBzdGF0ZSBpbiBhIHNlbnNlIChtYXkgbmVlZCB0byBmaXJlIGEgY2FsbGJhY2spXG5cbiAgICAgICAgc2VsZi5kaXJlY3Rpb24gPSBjbGlwcGVkID4gcHJldlByb2dyZXNzID8gMSA6IC0xO1xuICAgICAgICBzZWxmLnByb2dyZXNzID0gY2xpcHBlZDtcblxuICAgICAgICBpZiAoc3RhdGVDaGFuZ2VkICYmICFfcmVmcmVzaGluZykge1xuICAgICAgICAgIHRvZ2dsZVN0YXRlID0gY2xpcHBlZCAmJiAhcHJldlByb2dyZXNzID8gMCA6IGNsaXBwZWQgPT09IDEgPyAxIDogcHJldlByb2dyZXNzID09PSAxID8gMiA6IDM7IC8vIDAgPSBlbnRlciwgMSA9IGxlYXZlLCAyID0gZW50ZXJCYWNrLCAzID0gbGVhdmVCYWNrICh3ZSBwcmlvcml0aXplIHRoZSBGSVJTVCBlbmNvdW50ZXIsIHRodXMgaWYgeW91IHNjcm9sbCByZWFsbHkgZmFzdCBwYXN0IHRoZSBvbkVudGVyIGFuZCBvbkxlYXZlIGluIG9uZSB0aWNrLCBpdCdkIHByaW9yaXRpemUgb25FbnRlci5cblxuICAgICAgICAgIGlmIChpc1RvZ2dsZSkge1xuICAgICAgICAgICAgYWN0aW9uID0gIXRvZ2dsZWQgJiYgdG9nZ2xlQWN0aW9uc1t0b2dnbGVTdGF0ZSArIDFdICE9PSBcIm5vbmVcIiAmJiB0b2dnbGVBY3Rpb25zW3RvZ2dsZVN0YXRlICsgMV0gfHwgdG9nZ2xlQWN0aW9uc1t0b2dnbGVTdGF0ZV07IC8vIGlmIGl0IGRpZG4ndCB0b2dnbGUsIHRoYXQgbWVhbnMgaXQgc2hvdCByaWdodCBwYXN0IGFuZCBzaW5jZSB3ZSBwcmlvcml0aXplIHRoZSBcImVudGVyXCIgYWN0aW9uLCB3ZSBzaG91bGQgc3dpdGNoIHRvIHRoZSBcImxlYXZlXCIgaW4gdGhpcyBjYXNlIChidXQgb25seSBpZiBvbmUgaXMgZGVmaW5lZClcblxuICAgICAgICAgICAgaXNUYWtpbmdBY3Rpb24gPSBhbmltYXRpb24gJiYgKGFjdGlvbiA9PT0gXCJjb21wbGV0ZVwiIHx8IGFjdGlvbiA9PT0gXCJyZXNldFwiIHx8IGFjdGlvbiBpbiBhbmltYXRpb24pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHByZXZlbnRPdmVybGFwcyAmJiAodG9nZ2xlZCB8fCBpc1Rha2luZ0FjdGlvbikgJiYgKGlzVGFraW5nQWN0aW9uIHx8IHNjcnViIHx8ICFhbmltYXRpb24pICYmIChfaXNGdW5jdGlvbihwcmV2ZW50T3ZlcmxhcHMpID8gcHJldmVudE92ZXJsYXBzKHNlbGYpIDogc2VsZi5nZXRUcmFpbGluZyhwcmV2ZW50T3ZlcmxhcHMpLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICByZXR1cm4gdC5lbmRBbmltYXRpb24oKTtcbiAgICAgICAgfSkpO1xuXG4gICAgICAgIGlmICghaXNUb2dnbGUpIHtcbiAgICAgICAgICBpZiAoc2NydWJUd2VlbiAmJiAhX3JlZnJlc2hpbmcgJiYgIV9zdGFydHVwKSB7XG4gICAgICAgICAgICBzY3J1YlR3ZWVuLl9kcC5fdGltZSAtIHNjcnViVHdlZW4uX3N0YXJ0ICE9PSBzY3J1YlR3ZWVuLl90aW1lICYmIHNjcnViVHdlZW4ucmVuZGVyKHNjcnViVHdlZW4uX2RwLl90aW1lIC0gc2NydWJUd2Vlbi5fc3RhcnQpOyAvLyBpZiB0aGVyZSdzIGEgc2NydWIgb24gYm90aCB0aGUgY29udGFpbmVyIGFuaW1hdGlvbiBhbmQgdGhpcyBvbmUgKG9yIGEgU2Nyb2xsU21vb3RoZXIpLCB0aGUgdXBkYXRlIG9yZGVyIHdvdWxkIGNhdXNlIHRoaXMgb25lIG5vdCB0byBoYXZlIHJlbmRlcmVkIHlldCwgc28gaXQgd291bGRuJ3QgbWFrZSBhbnkgcHJvZ3Jlc3MgYmVmb3JlIHdlIC5yZXN0YXJ0KCkgaXQgaGVhZGluZyB0b3dhcmQgdGhlIG5ldyBwcm9ncmVzcyBzbyBpdCdkIGFwcGVhciBzdHVjayB0aHVzIHdlIGZvcmNlIGEgcmVuZGVyIGhlcmUuXG5cbiAgICAgICAgICAgIGlmIChzY3J1YlR3ZWVuLnJlc2V0VG8pIHtcbiAgICAgICAgICAgICAgc2NydWJUd2Vlbi5yZXNldFRvKFwidG90YWxQcm9ncmVzc1wiLCBjbGlwcGVkLCBhbmltYXRpb24uX3RUaW1lIC8gYW5pbWF0aW9uLl90RHVyKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIGxlZ2FjeSBzdXBwb3J0IChjb3VydGVzeSksIGJlZm9yZSAzLjEwLjBcbiAgICAgICAgICAgICAgc2NydWJUd2Vlbi52YXJzLnRvdGFsUHJvZ3Jlc3MgPSBjbGlwcGVkO1xuICAgICAgICAgICAgICBzY3J1YlR3ZWVuLmludmFsaWRhdGUoKS5yZXN0YXJ0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChhbmltYXRpb24pIHtcbiAgICAgICAgICAgIGFuaW1hdGlvbi50b3RhbFByb2dyZXNzKGNsaXBwZWQsICEhKF9yZWZyZXNoaW5nICYmIChsYXN0UmVmcmVzaCB8fCByZXNldCkpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGluKSB7XG4gICAgICAgICAgcmVzZXQgJiYgcGluU3BhY2luZyAmJiAoc3BhY2VyLnN0eWxlW3BpblNwYWNpbmcgKyBkaXJlY3Rpb24ub3MyXSA9IHNwYWNpbmdTdGFydCk7XG5cbiAgICAgICAgICBpZiAoIXVzZUZpeGVkUG9zaXRpb24pIHtcbiAgICAgICAgICAgIHBpblNldHRlcihfcm91bmQocGluU3RhcnQgKyBwaW5DaGFuZ2UgKiBjbGlwcGVkKSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChzdGF0ZUNoYW5nZWQpIHtcbiAgICAgICAgICAgIGlzQXRNYXggPSAhcmVzZXQgJiYgY2xpcHBlZCA+IHByZXZQcm9ncmVzcyAmJiBlbmQgKyAxID4gc2Nyb2xsICYmIHNjcm9sbCArIDEgPj0gX21heFNjcm9sbChzY3JvbGxlciwgZGlyZWN0aW9uKTsgLy8gaWYgaXQncyBhdCB0aGUgVkVSWSBlbmQgb2YgdGhlIHBhZ2UsIGRvbid0IHN3aXRjaCBhd2F5IGZyb20gcG9zaXRpb246IGZpeGVkIGJlY2F1c2UgaXQncyBwb2ludGxlc3MgYW5kIGl0IGNvdWxkIGNhdXNlIGEgYnJpZWYgZmxhc2ggd2hlbiB0aGUgdXNlciBzY3JvbGxzIGJhY2sgdXAgKHdoZW4gaXQgZ2V0cyBwaW5uZWQgYWdhaW4pXG5cbiAgICAgICAgICAgIGlmIChwaW5SZXBhcmVudCkge1xuICAgICAgICAgICAgICBpZiAoIXJlc2V0ICYmIChpc0FjdGl2ZSB8fCBpc0F0TWF4KSkge1xuICAgICAgICAgICAgICAgIHZhciBib3VuZHMgPSBfZ2V0Qm91bmRzKHBpbiwgdHJ1ZSksXG4gICAgICAgICAgICAgICAgICAgIF9vZmZzZXQgPSBzY3JvbGwgLSBzdGFydDtcblxuICAgICAgICAgICAgICAgIF9yZXBhcmVudChwaW4sIF9ib2R5LCBib3VuZHMudG9wICsgKGRpcmVjdGlvbiA9PT0gX3ZlcnRpY2FsID8gX29mZnNldCA6IDApICsgX3B4LCBib3VuZHMubGVmdCArIChkaXJlY3Rpb24gPT09IF92ZXJ0aWNhbCA/IDAgOiBfb2Zmc2V0KSArIF9weCk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgX3JlcGFyZW50KHBpbiwgc3BhY2VyKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfc2V0U3RhdGUoaXNBY3RpdmUgfHwgaXNBdE1heCA/IHBpbkFjdGl2ZVN0YXRlIDogcGluU3RhdGUpO1xuXG4gICAgICAgICAgICBwaW5Nb3ZlcyAmJiBjbGlwcGVkIDwgMSAmJiBpc0FjdGl2ZSB8fCBwaW5TZXR0ZXIocGluU3RhcnQgKyAoY2xpcHBlZCA9PT0gMSAmJiAhaXNBdE1heCA/IHBpbkNoYW5nZSA6IDApKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzbmFwICYmICF0d2VlblRvLnR3ZWVuICYmICFfcmVmcmVzaGluZyAmJiAhX3N0YXJ0dXAgJiYgc25hcERlbGF5ZWRDYWxsLnJlc3RhcnQodHJ1ZSk7XG4gICAgICAgIHRvZ2dsZUNsYXNzICYmICh0b2dnbGVkIHx8IG9uY2UgJiYgY2xpcHBlZCAmJiAoY2xpcHBlZCA8IDEgfHwgIV9saW1pdENhbGxiYWNrcykpICYmIF90b0FycmF5KHRvZ2dsZUNsYXNzLnRhcmdldHMpLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgICAgcmV0dXJuIGVsLmNsYXNzTGlzdFtpc0FjdGl2ZSB8fCBvbmNlID8gXCJhZGRcIiA6IFwicmVtb3ZlXCJdKHRvZ2dsZUNsYXNzLmNsYXNzTmFtZSk7XG4gICAgICAgIH0pOyAvLyBjbGFzc2VzIGNvdWxkIGFmZmVjdCBwb3NpdGlvbmluZywgc28gZG8gaXQgZXZlbiBpZiByZXNldCBvciByZWZyZXNoaW5nIGlzIHRydWUuXG5cbiAgICAgICAgb25VcGRhdGUgJiYgIWlzVG9nZ2xlICYmICFyZXNldCAmJiBvblVwZGF0ZShzZWxmKTtcblxuICAgICAgICBpZiAoc3RhdGVDaGFuZ2VkICYmICFfcmVmcmVzaGluZykge1xuICAgICAgICAgIGlmIChpc1RvZ2dsZSkge1xuICAgICAgICAgICAgaWYgKGlzVGFraW5nQWN0aW9uKSB7XG4gICAgICAgICAgICAgIGlmIChhY3Rpb24gPT09IFwiY29tcGxldGVcIikge1xuICAgICAgICAgICAgICAgIGFuaW1hdGlvbi5wYXVzZSgpLnRvdGFsUHJvZ3Jlc3MoMSk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoYWN0aW9uID09PSBcInJlc2V0XCIpIHtcbiAgICAgICAgICAgICAgICBhbmltYXRpb24ucmVzdGFydCh0cnVlKS5wYXVzZSgpO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGFjdGlvbiA9PT0gXCJyZXN0YXJ0XCIpIHtcbiAgICAgICAgICAgICAgICBhbmltYXRpb24ucmVzdGFydCh0cnVlKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhbmltYXRpb25bYWN0aW9uXSgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG9uVXBkYXRlICYmIG9uVXBkYXRlKHNlbGYpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0b2dnbGVkIHx8ICFfbGltaXRDYWxsYmFja3MpIHtcbiAgICAgICAgICAgIC8vIG9uIHN0YXJ0dXAsIHRoZSBwYWdlIGNvdWxkIGJlIHNjcm9sbGVkIGFuZCB3ZSBkb24ndCB3YW50IHRvIGZpcmUgY2FsbGJhY2tzIHRoYXQgZGlkbid0IHRvZ2dsZS4gRm9yIGV4YW1wbGUgb25FbnRlciBzaG91bGRuJ3QgZmlyZSBpZiB0aGUgU2Nyb2xsVHJpZ2dlciBpc24ndCBhY3R1YWxseSBlbnRlcmVkLlxuICAgICAgICAgICAgb25Ub2dnbGUgJiYgdG9nZ2xlZCAmJiBfY2FsbGJhY2soc2VsZiwgb25Ub2dnbGUpO1xuICAgICAgICAgICAgY2FsbGJhY2tzW3RvZ2dsZVN0YXRlXSAmJiBfY2FsbGJhY2soc2VsZiwgY2FsbGJhY2tzW3RvZ2dsZVN0YXRlXSk7XG4gICAgICAgICAgICBvbmNlICYmIChjbGlwcGVkID09PSAxID8gc2VsZi5raWxsKGZhbHNlLCAxKSA6IGNhbGxiYWNrc1t0b2dnbGVTdGF0ZV0gPSAwKTsgLy8gYSBjYWxsYmFjayBzaG91bGRuJ3QgYmUgY2FsbGVkIGFnYWluIGlmIG9uY2UgaXMgdHJ1ZS5cblxuICAgICAgICAgICAgaWYgKCF0b2dnbGVkKSB7XG4gICAgICAgICAgICAgIC8vIGl0J3MgcG9zc2libGUgdG8gZ28gY29tcGxldGVseSBwYXN0LCBsaWtlIGZyb20gYmVmb3JlIHRoZSBzdGFydCB0byBhZnRlciB0aGUgZW5kIChvciB2aWNlLXZlcnNhKSBpbiB3aGljaCBjYXNlIEJPVEggY2FsbGJhY2tzIHNob3VsZCBiZSBmaXJlZCBpbiB0aGF0IG9yZGVyXG4gICAgICAgICAgICAgIHRvZ2dsZVN0YXRlID0gY2xpcHBlZCA9PT0gMSA/IDEgOiAzO1xuICAgICAgICAgICAgICBjYWxsYmFja3NbdG9nZ2xlU3RhdGVdICYmIF9jYWxsYmFjayhzZWxmLCBjYWxsYmFja3NbdG9nZ2xlU3RhdGVdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoZmFzdFNjcm9sbEVuZCAmJiAhaXNBY3RpdmUgJiYgTWF0aC5hYnMoc2VsZi5nZXRWZWxvY2l0eSgpKSA+IChfaXNOdW1iZXIoZmFzdFNjcm9sbEVuZCkgPyBmYXN0U2Nyb2xsRW5kIDogMjUwMCkpIHtcbiAgICAgICAgICAgIF9lbmRBbmltYXRpb24oc2VsZi5jYWxsYmFja0FuaW1hdGlvbik7XG5cbiAgICAgICAgICAgIHNjcnViVHdlZW4gPyBzY3J1YlR3ZWVuLnByb2dyZXNzKDEpIDogX2VuZEFuaW1hdGlvbihhbmltYXRpb24sIGFjdGlvbiA9PT0gXCJyZXZlcnNlXCIgPyAxIDogIWNsaXBwZWQsIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChpc1RvZ2dsZSAmJiBvblVwZGF0ZSAmJiAhX3JlZnJlc2hpbmcpIHtcbiAgICAgICAgICBvblVwZGF0ZShzZWxmKTtcbiAgICAgICAgfVxuICAgICAgfSAvLyB1cGRhdGUgYWJzb2x1dGVseS1wb3NpdGlvbmVkIG1hcmtlcnMgKG9ubHkgaWYgdGhlIHNjcm9sbGVyIGlzbid0IHRoZSB2aWV3cG9ydClcblxuXG4gICAgICBpZiAobWFya2VyRW5kU2V0dGVyKSB7XG4gICAgICAgIHZhciBuID0gY29udGFpbmVyQW5pbWF0aW9uID8gc2Nyb2xsIC8gY29udGFpbmVyQW5pbWF0aW9uLmR1cmF0aW9uKCkgKiAoY29udGFpbmVyQW5pbWF0aW9uLl9jYVNjcm9sbERpc3QgfHwgMCkgOiBzY3JvbGw7XG4gICAgICAgIG1hcmtlclN0YXJ0U2V0dGVyKG4gKyAobWFya2VyU3RhcnRUcmlnZ2VyLl9pc0ZsaXBwZWQgPyAxIDogMCkpO1xuICAgICAgICBtYXJrZXJFbmRTZXR0ZXIobik7XG4gICAgICB9XG5cbiAgICAgIGNhTWFya2VyU2V0dGVyICYmIGNhTWFya2VyU2V0dGVyKC1zY3JvbGwgLyBjb250YWluZXJBbmltYXRpb24uZHVyYXRpb24oKSAqIChjb250YWluZXJBbmltYXRpb24uX2NhU2Nyb2xsRGlzdCB8fCAwKSk7XG4gICAgfTtcblxuICAgIHNlbGYuZW5hYmxlID0gZnVuY3Rpb24gKHJlc2V0LCByZWZyZXNoKSB7XG4gICAgICBpZiAoIXNlbGYuZW5hYmxlZCkge1xuICAgICAgICBzZWxmLmVuYWJsZWQgPSB0cnVlO1xuXG4gICAgICAgIF9hZGRMaXN0ZW5lcihzY3JvbGxlciwgXCJyZXNpemVcIiwgX29uUmVzaXplKTtcblxuICAgICAgICBpc1ZpZXdwb3J0IHx8IF9hZGRMaXN0ZW5lcihzY3JvbGxlciwgXCJzY3JvbGxcIiwgX29uU2Nyb2xsKTtcbiAgICAgICAgb25SZWZyZXNoSW5pdCAmJiBfYWRkTGlzdGVuZXIoU2Nyb2xsVHJpZ2dlciwgXCJyZWZyZXNoSW5pdFwiLCBvblJlZnJlc2hJbml0KTtcblxuICAgICAgICBpZiAocmVzZXQgIT09IGZhbHNlKSB7XG4gICAgICAgICAgc2VsZi5wcm9ncmVzcyA9IHByZXZQcm9ncmVzcyA9IDA7XG4gICAgICAgICAgc2Nyb2xsMSA9IHNjcm9sbDIgPSBsYXN0U25hcCA9IHNjcm9sbEZ1bmMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlZnJlc2ggIT09IGZhbHNlICYmIHNlbGYucmVmcmVzaCgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBzZWxmLmdldFR3ZWVuID0gZnVuY3Rpb24gKHNuYXApIHtcbiAgICAgIHJldHVybiBzbmFwICYmIHR3ZWVuVG8gPyB0d2VlblRvLnR3ZWVuIDogc2NydWJUd2VlbjtcbiAgICB9O1xuXG4gICAgc2VsZi5zZXRQb3NpdGlvbnMgPSBmdW5jdGlvbiAobmV3U3RhcnQsIG5ld0VuZCwga2VlcENsYW1wLCBwaW5PZmZzZXQpIHtcbiAgICAgIC8vIGRvZXNuJ3QgcGVyc2lzdCBhZnRlciByZWZyZXNoKCkhIEludGVuZGVkIHRvIGJlIGEgd2F5IHRvIG92ZXJyaWRlIHZhbHVlcyB0aGF0IHdlcmUgc2V0IGR1cmluZyByZWZyZXNoKCksIGxpa2UgeW91IGNvdWxkIHNldCBpdCBpbiBvblJlZnJlc2goKVxuICAgICAgaWYgKGNvbnRhaW5lckFuaW1hdGlvbikge1xuICAgICAgICAvLyBjb252ZXJ0IHJhdGlvcyBpbnRvIHNjcm9sbCBwb3NpdGlvbnMuIFJlbWVtYmVyLCBzdGFydC9lbmQgdmFsdWVzIG9uIFNjcm9sbFRyaWdnZXJzIHRoYXQgaGF2ZSBhIGNvbnRhaW5lckFuaW1hdGlvbiByZWZlciB0byB0aGUgdGltZSAoaW4gc2Vjb25kcyksIE5PVCBzY3JvbGwgcG9zaXRpb25zLlxuICAgICAgICB2YXIgc3QgPSBjb250YWluZXJBbmltYXRpb24uc2Nyb2xsVHJpZ2dlcixcbiAgICAgICAgICAgIGR1cmF0aW9uID0gY29udGFpbmVyQW5pbWF0aW9uLmR1cmF0aW9uKCksXG4gICAgICAgICAgICBfY2hhbmdlID0gc3QuZW5kIC0gc3Quc3RhcnQ7XG5cbiAgICAgICAgbmV3U3RhcnQgPSBzdC5zdGFydCArIF9jaGFuZ2UgKiBuZXdTdGFydCAvIGR1cmF0aW9uO1xuICAgICAgICBuZXdFbmQgPSBzdC5zdGFydCArIF9jaGFuZ2UgKiBuZXdFbmQgLyBkdXJhdGlvbjtcbiAgICAgIH1cblxuICAgICAgc2VsZi5yZWZyZXNoKGZhbHNlLCBmYWxzZSwge1xuICAgICAgICBzdGFydDogX2tlZXBDbGFtcChuZXdTdGFydCwga2VlcENsYW1wICYmICEhc2VsZi5fc3RhcnRDbGFtcCksXG4gICAgICAgIGVuZDogX2tlZXBDbGFtcChuZXdFbmQsIGtlZXBDbGFtcCAmJiAhIXNlbGYuX2VuZENsYW1wKVxuICAgICAgfSwgcGluT2Zmc2V0KTtcbiAgICAgIHNlbGYudXBkYXRlKCk7XG4gICAgfTtcblxuICAgIHNlbGYuYWRqdXN0UGluU3BhY2luZyA9IGZ1bmN0aW9uIChhbW91bnQpIHtcbiAgICAgIGlmIChzcGFjZXJTdGF0ZSAmJiBhbW91bnQpIHtcbiAgICAgICAgdmFyIGkgPSBzcGFjZXJTdGF0ZS5pbmRleE9mKGRpcmVjdGlvbi5kKSArIDE7XG4gICAgICAgIHNwYWNlclN0YXRlW2ldID0gcGFyc2VGbG9hdChzcGFjZXJTdGF0ZVtpXSkgKyBhbW91bnQgKyBfcHg7XG4gICAgICAgIHNwYWNlclN0YXRlWzFdID0gcGFyc2VGbG9hdChzcGFjZXJTdGF0ZVsxXSkgKyBhbW91bnQgKyBfcHg7XG5cbiAgICAgICAgX3NldFN0YXRlKHNwYWNlclN0YXRlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgc2VsZi5kaXNhYmxlID0gZnVuY3Rpb24gKHJlc2V0LCBhbGxvd0FuaW1hdGlvbikge1xuICAgICAgaWYgKHNlbGYuZW5hYmxlZCkge1xuICAgICAgICByZXNldCAhPT0gZmFsc2UgJiYgc2VsZi5yZXZlcnQodHJ1ZSwgdHJ1ZSk7XG4gICAgICAgIHNlbGYuZW5hYmxlZCA9IHNlbGYuaXNBY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgYWxsb3dBbmltYXRpb24gfHwgc2NydWJUd2VlbiAmJiBzY3J1YlR3ZWVuLnBhdXNlKCk7XG4gICAgICAgIHByZXZTY3JvbGwgPSAwO1xuICAgICAgICBwaW5DYWNoZSAmJiAocGluQ2FjaGUudW5jYWNoZSA9IDEpO1xuICAgICAgICBvblJlZnJlc2hJbml0ICYmIF9yZW1vdmVMaXN0ZW5lcihTY3JvbGxUcmlnZ2VyLCBcInJlZnJlc2hJbml0XCIsIG9uUmVmcmVzaEluaXQpO1xuXG4gICAgICAgIGlmIChzbmFwRGVsYXllZENhbGwpIHtcbiAgICAgICAgICBzbmFwRGVsYXllZENhbGwucGF1c2UoKTtcbiAgICAgICAgICB0d2VlblRvLnR3ZWVuICYmIHR3ZWVuVG8udHdlZW4ua2lsbCgpICYmICh0d2VlblRvLnR3ZWVuID0gMCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWlzVmlld3BvcnQpIHtcbiAgICAgICAgICB2YXIgaSA9IF90cmlnZ2Vycy5sZW5ndGg7XG5cbiAgICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgICBpZiAoX3RyaWdnZXJzW2ldLnNjcm9sbGVyID09PSBzY3JvbGxlciAmJiBfdHJpZ2dlcnNbaV0gIT09IHNlbGYpIHtcbiAgICAgICAgICAgICAgcmV0dXJuOyAvL2Rvbid0IHJlbW92ZSB0aGUgbGlzdGVuZXJzIGlmIHRoZXJlIGFyZSBzdGlsbCBvdGhlciB0cmlnZ2VycyByZWZlcmVuY2luZyBpdC5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBfcmVtb3ZlTGlzdGVuZXIoc2Nyb2xsZXIsIFwicmVzaXplXCIsIF9vblJlc2l6ZSk7XG5cbiAgICAgICAgICBpc1ZpZXdwb3J0IHx8IF9yZW1vdmVMaXN0ZW5lcihzY3JvbGxlciwgXCJzY3JvbGxcIiwgX29uU2Nyb2xsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBzZWxmLmtpbGwgPSBmdW5jdGlvbiAocmV2ZXJ0LCBhbGxvd0FuaW1hdGlvbikge1xuICAgICAgc2VsZi5kaXNhYmxlKHJldmVydCwgYWxsb3dBbmltYXRpb24pO1xuICAgICAgc2NydWJUd2VlbiAmJiAhYWxsb3dBbmltYXRpb24gJiYgc2NydWJUd2Vlbi5raWxsKCk7XG4gICAgICBpZCAmJiBkZWxldGUgX2lkc1tpZF07XG5cbiAgICAgIHZhciBpID0gX3RyaWdnZXJzLmluZGV4T2Yoc2VsZik7XG5cbiAgICAgIGkgPj0gMCAmJiBfdHJpZ2dlcnMuc3BsaWNlKGksIDEpO1xuICAgICAgaSA9PT0gX2kgJiYgX2RpcmVjdGlvbiA+IDAgJiYgX2ktLTsgLy8gaWYgd2UncmUgaW4gdGhlIG1pZGRsZSBvZiBhIHJlZnJlc2goKSBvciB1cGRhdGUoKSwgc3BsaWNpbmcgd291bGQgY2F1c2Ugc2tpcHMgaW4gdGhlIGluZGV4LCBzbyBhZGp1c3QuLi5cbiAgICAgIC8vIGlmIG5vIG90aGVyIFNjcm9sbFRyaWdnZXIgaW5zdGFuY2VzIG9mIHRoZSBzYW1lIHNjcm9sbGVyIGFyZSBmb3VuZCwgd2lwZSBvdXQgYW55IHJlY29yZGVkIHNjcm9sbCBwb3NpdGlvbi4gT3RoZXJ3aXNlLCBpbiBhIHNpbmdsZSBwYWdlIGFwcGxpY2F0aW9uLCBmb3IgZXhhbXBsZSwgaXQgY291bGQgbWFpbnRhaW4gc2Nyb2xsIHBvc2l0aW9uIHdoZW4gaXQgcmVhbGx5IHNob3VsZG4ndC5cblxuICAgICAgaSA9IDA7XG5cbiAgICAgIF90cmlnZ2Vycy5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHJldHVybiB0LnNjcm9sbGVyID09PSBzZWxmLnNjcm9sbGVyICYmIChpID0gMSk7XG4gICAgICB9KTtcblxuICAgICAgaSB8fCBfcmVmcmVzaGluZ0FsbCB8fCAoc2VsZi5zY3JvbGwucmVjID0gMCk7XG5cbiAgICAgIGlmIChhbmltYXRpb24pIHtcbiAgICAgICAgYW5pbWF0aW9uLnNjcm9sbFRyaWdnZXIgPSBudWxsO1xuICAgICAgICByZXZlcnQgJiYgYW5pbWF0aW9uLnJldmVydCh7XG4gICAgICAgICAga2lsbDogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICAgIGFsbG93QW5pbWF0aW9uIHx8IGFuaW1hdGlvbi5raWxsKCk7XG4gICAgICB9XG5cbiAgICAgIG1hcmtlclN0YXJ0ICYmIFttYXJrZXJTdGFydCwgbWFya2VyRW5kLCBtYXJrZXJTdGFydFRyaWdnZXIsIG1hcmtlckVuZFRyaWdnZXJdLmZvckVhY2goZnVuY3Rpb24gKG0pIHtcbiAgICAgICAgcmV0dXJuIG0ucGFyZW50Tm9kZSAmJiBtLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobSk7XG4gICAgICB9KTtcbiAgICAgIF9wcmltYXJ5ID09PSBzZWxmICYmIChfcHJpbWFyeSA9IDApO1xuXG4gICAgICBpZiAocGluKSB7XG4gICAgICAgIHBpbkNhY2hlICYmIChwaW5DYWNoZS51bmNhY2hlID0gMSk7XG4gICAgICAgIGkgPSAwO1xuXG4gICAgICAgIF90cmlnZ2Vycy5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgcmV0dXJuIHQucGluID09PSBwaW4gJiYgaSsrO1xuICAgICAgICB9KTtcblxuICAgICAgICBpIHx8IChwaW5DYWNoZS5zcGFjZXIgPSAwKTsgLy8gaWYgdGhlcmUgYXJlbid0IGFueSBtb3JlIFNjcm9sbFRyaWdnZXJzIHdpdGggdGhlIHNhbWUgcGluLCByZW1vdmUgdGhlIHNwYWNlciwgb3RoZXJ3aXNlIGl0IGNvdWxkIGJlIGNvbnRhbWluYXRlZCB3aXRoIG9sZC9zdGFsZSB2YWx1ZXMgaWYgdGhlIHVzZXIgcmUtY3JlYXRlcyBhIFNjcm9sbFRyaWdnZXIgZm9yIHRoZSBzYW1lIGVsZW1lbnQuXG4gICAgICB9XG5cbiAgICAgIHZhcnMub25LaWxsICYmIHZhcnMub25LaWxsKHNlbGYpO1xuICAgIH07XG5cbiAgICBfdHJpZ2dlcnMucHVzaChzZWxmKTtcblxuICAgIHNlbGYuZW5hYmxlKGZhbHNlLCBmYWxzZSk7XG4gICAgY3VzdG9tUmV2ZXJ0UmV0dXJuICYmIGN1c3RvbVJldmVydFJldHVybihzZWxmKTtcblxuICAgIGlmIChhbmltYXRpb24gJiYgYW5pbWF0aW9uLmFkZCAmJiAhY2hhbmdlKSB7XG4gICAgICAvLyBpZiB0aGUgYW5pbWF0aW9uIGlzIGEgdGltZWxpbmUsIGl0IG1heSBub3QgaGF2ZSBiZWVuIHBvcHVsYXRlZCB5ZXQsIHNvIGl0IHdvdWxkbid0IHJlbmRlciBhdCB0aGUgcHJvcGVyIHBsYWNlIG9uIHRoZSBmaXJzdCByZWZyZXNoKCksIHRodXMgd2Ugc2hvdWxkIHNjaGVkdWxlIG9uZSBmb3IgdGhlIG5leHQgdGljay4gSWYgXCJjaGFuZ2VcIiBpcyBkZWZpbmVkLCB3ZSBrbm93IGl0IG11c3QgYmUgcmUtZW5hYmxpbmcsIHRodXMgd2UgY2FuIHJlZnJlc2goKSByaWdodCBhd2F5LlxuICAgICAgdmFyIHVwZGF0ZUZ1bmMgPSBzZWxmLnVwZGF0ZTsgLy8gc29tZSBicm93c2VycyBtYXkgZmlyZSBhIHNjcm9sbCBldmVudCBCRUZPUkUgYSB0aWNrIGVsYXBzZXMgYW5kL29yIHRoZSBET01Db250ZW50TG9hZGVkIGZpcmVzLiBTbyB0aGVyZSdzIGEgY2hhbmNlIHVwZGF0ZSgpIHdpbGwgYmUgY2FsbGVkIEJFRk9SRSBhIHJlZnJlc2goKSBoYXMgaGFwcGVuZWQgb24gYSBUaW1lbGluZS1hdHRhY2hlZCBTY3JvbGxUcmlnZ2VyIHdoaWNoIG1lYW5zIHRoZSBzdGFydC9lbmQgd29uJ3QgYmUgY2FsY3VsYXRlZCB5ZXQuIFdlIGRvbid0IHdhbnQgdG8gYWRkIGNvbmRpdGlvbmFsIGxvZ2ljIGluc2lkZSB0aGUgdXBkYXRlKCkgbWV0aG9kIChsaWtlIGNoZWNrIHRvIHNlZSBpZiBlbmQgaXMgZGVmaW5lZCBhbmQgaWYgbm90LCBmb3JjZSBhIHJlZnJlc2goKSkgYmVjYXVzZSB0aGF0J3MgYSBmdW5jdGlvbiB0aGF0IGdldHMgaGl0IGEgTE9UIChwZXJmb3JtYW5jZSkuIFNvIHdlIHN3YXAgb3V0IHRoZSByZWFsIHVwZGF0ZSgpIG1ldGhvZCBmb3IgdGhpcyBvbmUgdGhhdCdsbCByZS1hdHRhY2ggaXQgdGhlIGZpcnN0IHRpbWUgaXQgZ2V0cyBjYWxsZWQgYW5kIG9mIGNvdXJzZSBmb3JjZXMgYSByZWZyZXNoKCkuXG5cbiAgICAgIHNlbGYudXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBzZWxmLnVwZGF0ZSA9IHVwZGF0ZUZ1bmM7XG4gICAgICAgIHN0YXJ0IHx8IGVuZCB8fCBzZWxmLnJlZnJlc2goKTtcbiAgICAgIH07XG5cbiAgICAgIGdzYXAuZGVsYXllZENhbGwoMC4wMSwgc2VsZi51cGRhdGUpO1xuICAgICAgY2hhbmdlID0gMC4wMTtcbiAgICAgIHN0YXJ0ID0gZW5kID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgc2VsZi5yZWZyZXNoKCk7XG4gICAgfVxuXG4gICAgcGluICYmIF9xdWV1ZVJlZnJlc2hBbGwoKTsgLy8gcGlubmluZyBjb3VsZCBhZmZlY3QgdGhlIHBvc2l0aW9ucyBvZiBvdGhlciB0aGluZ3MsIHNvIG1ha2Ugc3VyZSB3ZSBxdWV1ZSBhIGZ1bGwgcmVmcmVzaCgpXG4gIH07XG5cbiAgU2Nyb2xsVHJpZ2dlci5yZWdpc3RlciA9IGZ1bmN0aW9uIHJlZ2lzdGVyKGNvcmUpIHtcbiAgICBpZiAoIV9jb3JlSW5pdHRlZCkge1xuICAgICAgZ3NhcCA9IGNvcmUgfHwgX2dldEdTQVAoKTtcbiAgICAgIF93aW5kb3dFeGlzdHMoKSAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgU2Nyb2xsVHJpZ2dlci5lbmFibGUoKTtcbiAgICAgIF9jb3JlSW5pdHRlZCA9IF9lbmFibGVkO1xuICAgIH1cblxuICAgIHJldHVybiBfY29yZUluaXR0ZWQ7XG4gIH07XG5cbiAgU2Nyb2xsVHJpZ2dlci5kZWZhdWx0cyA9IGZ1bmN0aW9uIGRlZmF1bHRzKGNvbmZpZykge1xuICAgIGlmIChjb25maWcpIHtcbiAgICAgIGZvciAodmFyIHAgaW4gY29uZmlnKSB7XG4gICAgICAgIF9kZWZhdWx0c1twXSA9IGNvbmZpZ1twXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gX2RlZmF1bHRzO1xuICB9O1xuXG4gIFNjcm9sbFRyaWdnZXIuZGlzYWJsZSA9IGZ1bmN0aW9uIGRpc2FibGUocmVzZXQsIGtpbGwpIHtcbiAgICBfZW5hYmxlZCA9IDA7XG5cbiAgICBfdHJpZ2dlcnMuZm9yRWFjaChmdW5jdGlvbiAodHJpZ2dlcikge1xuICAgICAgcmV0dXJuIHRyaWdnZXJba2lsbCA/IFwia2lsbFwiIDogXCJkaXNhYmxlXCJdKHJlc2V0KTtcbiAgICB9KTtcblxuICAgIF9yZW1vdmVMaXN0ZW5lcihfd2luLCBcIndoZWVsXCIsIF9vblNjcm9sbCk7XG5cbiAgICBfcmVtb3ZlTGlzdGVuZXIoX2RvYywgXCJzY3JvbGxcIiwgX29uU2Nyb2xsKTtcblxuICAgIGNsZWFySW50ZXJ2YWwoX3N5bmNJbnRlcnZhbCk7XG5cbiAgICBfcmVtb3ZlTGlzdGVuZXIoX2RvYywgXCJ0b3VjaGNhbmNlbFwiLCBfcGFzc1Rocm91Z2gpO1xuXG4gICAgX3JlbW92ZUxpc3RlbmVyKF9ib2R5LCBcInRvdWNoc3RhcnRcIiwgX3Bhc3NUaHJvdWdoKTtcblxuICAgIF9tdWx0aUxpc3RlbmVyKF9yZW1vdmVMaXN0ZW5lciwgX2RvYywgXCJwb2ludGVyZG93bix0b3VjaHN0YXJ0LG1vdXNlZG93blwiLCBfcG9pbnRlckRvd25IYW5kbGVyKTtcblxuICAgIF9tdWx0aUxpc3RlbmVyKF9yZW1vdmVMaXN0ZW5lciwgX2RvYywgXCJwb2ludGVydXAsdG91Y2hlbmQsbW91c2V1cFwiLCBfcG9pbnRlclVwSGFuZGxlcik7XG5cbiAgICBfcmVzaXplRGVsYXkua2lsbCgpO1xuXG4gICAgX2l0ZXJhdGVBdXRvUmVmcmVzaChfcmVtb3ZlTGlzdGVuZXIpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBfc2Nyb2xsZXJzLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgICBfd2hlZWxMaXN0ZW5lcihfcmVtb3ZlTGlzdGVuZXIsIF9zY3JvbGxlcnNbaV0sIF9zY3JvbGxlcnNbaSArIDFdKTtcblxuICAgICAgX3doZWVsTGlzdGVuZXIoX3JlbW92ZUxpc3RlbmVyLCBfc2Nyb2xsZXJzW2ldLCBfc2Nyb2xsZXJzW2kgKyAyXSk7XG4gICAgfVxuICB9O1xuXG4gIFNjcm9sbFRyaWdnZXIuZW5hYmxlID0gZnVuY3Rpb24gZW5hYmxlKCkge1xuICAgIF93aW4gPSB3aW5kb3c7XG4gICAgX2RvYyA9IGRvY3VtZW50O1xuICAgIF9kb2NFbCA9IF9kb2MuZG9jdW1lbnRFbGVtZW50O1xuICAgIF9ib2R5ID0gX2RvYy5ib2R5O1xuXG4gICAgaWYgKGdzYXApIHtcbiAgICAgIF90b0FycmF5ID0gZ3NhcC51dGlscy50b0FycmF5O1xuICAgICAgX2NsYW1wID0gZ3NhcC51dGlscy5jbGFtcDtcbiAgICAgIF9jb250ZXh0ID0gZ3NhcC5jb3JlLmNvbnRleHQgfHwgX3Bhc3NUaHJvdWdoO1xuICAgICAgX3N1cHByZXNzT3ZlcndyaXRlcyA9IGdzYXAuY29yZS5zdXBwcmVzc092ZXJ3cml0ZXMgfHwgX3Bhc3NUaHJvdWdoO1xuICAgICAgX3Njcm9sbFJlc3RvcmF0aW9uID0gX3dpbi5oaXN0b3J5LnNjcm9sbFJlc3RvcmF0aW9uIHx8IFwiYXV0b1wiO1xuICAgICAgX2xhc3RTY3JvbGwgPSBfd2luLnBhZ2VZT2Zmc2V0O1xuICAgICAgZ3NhcC5jb3JlLmdsb2JhbHMoXCJTY3JvbGxUcmlnZ2VyXCIsIFNjcm9sbFRyaWdnZXIpOyAvLyBtdXN0IHJlZ2lzdGVyIHRoZSBnbG9iYWwgbWFudWFsbHkgYmVjYXVzZSBpbiBJbnRlcm5ldCBFeHBsb3JlciwgZnVuY3Rpb25zIChjbGFzc2VzKSBkb24ndCBoYXZlIGEgXCJuYW1lXCIgcHJvcGVydHkuXG5cbiAgICAgIGlmIChfYm9keSkge1xuICAgICAgICBfZW5hYmxlZCA9IDE7XG4gICAgICAgIF9kaXYxMDB2aCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7IC8vIHRvIHNvbHZlIG1vYmlsZSBicm93c2VyIGFkZHJlc3MgYmFyIHNob3cvaGlkZSByZXNpemluZywgd2Ugc2hvdWxkbid0IHJlbHkgb24gd2luZG93LmlubmVySGVpZ2h0LiBJbnN0ZWFkLCB1c2UgYSA8ZGl2PiB3aXRoIGl0cyBoZWlnaHQgc2V0IHRvIDEwMHZoIGFuZCBtZWFzdXJlIHRoYXQgc2luY2UgdGhhdCdzIHdoYXQgdGhlIHNjcm9sbGluZyBpcyBiYXNlZCBvbiBhbnl3YXkgYW5kIGl0J3Mgbm90IGFmZmVjdGVkIGJ5IGFkZHJlc3MgYmFyIHNob3dpbmcvaGlkaW5nLlxuXG4gICAgICAgIF9kaXYxMDB2aC5zdHlsZS5oZWlnaHQgPSBcIjEwMHZoXCI7XG4gICAgICAgIF9kaXYxMDB2aC5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcblxuICAgICAgICBfcmVmcmVzaDEwMHZoKCk7XG5cbiAgICAgICAgX3JhZkJ1Z0ZpeCgpO1xuXG4gICAgICAgIE9ic2VydmVyLnJlZ2lzdGVyKGdzYXApOyAvLyBpc1RvdWNoIGlzIDAgaWYgbm8gdG91Y2gsIDEgaWYgT05MWSB0b3VjaCwgYW5kIDIgaWYgaXQgY2FuIGFjY29tbW9kYXRlIHRvdWNoIGJ1dCBhbHNvIG90aGVyIHR5cGVzIGxpa2UgbW91c2UvcG9pbnRlci5cblxuICAgICAgICBTY3JvbGxUcmlnZ2VyLmlzVG91Y2ggPSBPYnNlcnZlci5pc1RvdWNoO1xuICAgICAgICBfZml4SU9TQnVnID0gT2JzZXJ2ZXIuaXNUb3VjaCAmJiAvKGlQYWR8aVBob25lfGlQb2R8TWFjKS9nLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7IC8vIHNpbmNlIDIwMTcsIGlPUyBoYXMgaGFkIGEgYnVnIHRoYXQgY2F1c2VzIGV2ZW50LmNsaWVudFgvWSB0byBiZSBpbmFjY3VyYXRlIHdoZW4gYSBzY3JvbGwgb2NjdXJzLCB0aHVzIHdlIG11c3QgYWx0ZXJuYXRlIGlnbm9yaW5nIGV2ZXJ5IG90aGVyIHRvdWNobW92ZSBldmVudCB0byB3b3JrIGFyb3VuZCBpdC4gU2VlIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xODE5NTQgYW5kIGh0dHBzOi8vY29kZXBlbi5pby9HcmVlblNvY2svcGVuL0V4YnJQTmEvMDg3Y2VmMTk3ZGMzNTQ0NWEwOTUxZTg5MzVjNDE1MDNcblxuICAgICAgICBfaWdub3JlTW9iaWxlUmVzaXplID0gT2JzZXJ2ZXIuaXNUb3VjaCA9PT0gMTtcblxuICAgICAgICBfYWRkTGlzdGVuZXIoX3dpbiwgXCJ3aGVlbFwiLCBfb25TY3JvbGwpOyAvLyBtb3N0bHkgZm9yIDNyZCBwYXJ0eSBzbW9vdGggc2Nyb2xsaW5nIGxpYnJhcmllcy5cblxuXG4gICAgICAgIF9yb290ID0gW193aW4sIF9kb2MsIF9kb2NFbCwgX2JvZHldO1xuXG4gICAgICAgIGlmIChnc2FwLm1hdGNoTWVkaWEpIHtcbiAgICAgICAgICBTY3JvbGxUcmlnZ2VyLm1hdGNoTWVkaWEgPSBmdW5jdGlvbiAodmFycykge1xuICAgICAgICAgICAgdmFyIG1tID0gZ3NhcC5tYXRjaE1lZGlhKCksXG4gICAgICAgICAgICAgICAgcDtcblxuICAgICAgICAgICAgZm9yIChwIGluIHZhcnMpIHtcbiAgICAgICAgICAgICAgbW0uYWRkKHAsIHZhcnNbcF0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gbW07XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIGdzYXAuYWRkRXZlbnRMaXN0ZW5lcihcIm1hdGNoTWVkaWFJbml0XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBfcmV2ZXJ0QWxsKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZ3NhcC5hZGRFdmVudExpc3RlbmVyKFwibWF0Y2hNZWRpYVJldmVydFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gX3JldmVydFJlY29yZGVkKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZ3NhcC5hZGRFdmVudExpc3RlbmVyKFwibWF0Y2hNZWRpYVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfcmVmcmVzaEFsbCgwLCAxKTtcblxuICAgICAgICAgICAgX2Rpc3BhdGNoKFwibWF0Y2hNZWRpYVwiKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBnc2FwLm1hdGNoTWVkaWEoXCIob3JpZW50YXRpb246IHBvcnRyYWl0KVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvLyB3aGVuIG9yaWVudGF0aW9uIGNoYW5nZXMsIHdlIHNob3VsZCB0YWtlIG5ldyBiYXNlIG1lYXN1cmVtZW50cyBmb3IgdGhlIGlnbm9yZU1vYmlsZVJlc2l6ZSBmZWF0dXJlLlxuICAgICAgICAgICAgX3NldEJhc2VEaW1lbnNpb25zKCk7XG5cbiAgICAgICAgICAgIHJldHVybiBfc2V0QmFzZURpbWVuc2lvbnM7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKFwiUmVxdWlyZXMgR1NBUCAzLjExLjAgb3IgbGF0ZXJcIik7XG4gICAgICAgIH1cblxuICAgICAgICBfc2V0QmFzZURpbWVuc2lvbnMoKTtcblxuICAgICAgICBfYWRkTGlzdGVuZXIoX2RvYywgXCJzY3JvbGxcIiwgX29uU2Nyb2xsKTsgLy8gc29tZSBicm93c2VycyAobGlrZSBDaHJvbWUpLCB0aGUgd2luZG93IHN0b3BzIGRpc3BhdGNoaW5nIHNjcm9sbCBldmVudHMgb24gdGhlIHdpbmRvdyBpZiB5b3Ugc2Nyb2xsIHJlYWxseSBmYXN0LCBidXQgaXQncyBjb25zaXN0ZW50IG9uIHRoZSBkb2N1bWVudCFcblxuXG4gICAgICAgIHZhciBib2R5U3R5bGUgPSBfYm9keS5zdHlsZSxcbiAgICAgICAgICAgIGJvcmRlciA9IGJvZHlTdHlsZS5ib3JkZXJUb3BTdHlsZSxcbiAgICAgICAgICAgIEFuaW1hdGlvblByb3RvID0gZ3NhcC5jb3JlLkFuaW1hdGlvbi5wcm90b3R5cGUsXG4gICAgICAgICAgICBib3VuZHMsXG4gICAgICAgICAgICBpO1xuICAgICAgICBBbmltYXRpb25Qcm90by5yZXZlcnQgfHwgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFuaW1hdGlvblByb3RvLCBcInJldmVydFwiLCB7XG4gICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudGltZSgtMC4wMSwgdHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTsgLy8gb25seSBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgKEFuaW1hdGlvbi5yZXZlcnQoKSB3YXMgYWRkZWQgYWZ0ZXIgMy4xMC40KVxuXG4gICAgICAgIGJvZHlTdHlsZS5ib3JkZXJUb3BTdHlsZSA9IFwic29saWRcIjsgLy8gd29ya3MgYXJvdW5kIGFuIGlzc3VlIHdoZXJlIGEgbWFyZ2luIG9mIGEgY2hpbGQgZWxlbWVudCBjb3VsZCB0aHJvdyBvZmYgdGhlIGJvdW5kcyBvZiB0aGUgX2JvZHksIG1ha2luZyBpdCBzZWVtIGxpa2UgdGhlcmUncyBhIG1hcmdpbiB3aGVuIHRoZXJlIGFjdHVhbGx5IGlzbid0LiBUaGUgYm9yZGVyIGVuc3VyZXMgdGhhdCB0aGUgYm91bmRzIGFyZSBhY2N1cmF0ZS5cblxuICAgICAgICBib3VuZHMgPSBfZ2V0Qm91bmRzKF9ib2R5KTtcbiAgICAgICAgX3ZlcnRpY2FsLm0gPSBNYXRoLnJvdW5kKGJvdW5kcy50b3AgKyBfdmVydGljYWwuc2MoKSkgfHwgMDsgLy8gYWNjb21tb2RhdGUgdGhlIG9mZnNldCBvZiB0aGUgPGJvZHk+IGNhdXNlZCBieSBtYXJnaW5zIGFuZC9vciBwYWRkaW5nXG5cbiAgICAgICAgX2hvcml6b250YWwubSA9IE1hdGgucm91bmQoYm91bmRzLmxlZnQgKyBfaG9yaXpvbnRhbC5zYygpKSB8fCAwO1xuICAgICAgICBib3JkZXIgPyBib2R5U3R5bGUuYm9yZGVyVG9wU3R5bGUgPSBib3JkZXIgOiBib2R5U3R5bGUucmVtb3ZlUHJvcGVydHkoXCJib3JkZXItdG9wLXN0eWxlXCIpOyAvLyBUT0RPOiAoPykgbWF5YmUgbW92ZSB0byBsZXZlcmFnaW5nIHRoZSB2ZWxvY2l0eSBtZWNoYW5pc20gaW4gT2JzZXJ2ZXIgYW5kIHNraXAgaW50ZXJ2YWxzLlxuXG4gICAgICAgIF9zeW5jSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChfc3luYywgMjUwKTtcbiAgICAgICAgZ3NhcC5kZWxheWVkQ2FsbCgwLjUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gX3N0YXJ0dXAgPSAwO1xuICAgICAgICB9KTtcblxuICAgICAgICBfYWRkTGlzdGVuZXIoX2RvYywgXCJ0b3VjaGNhbmNlbFwiLCBfcGFzc1Rocm91Z2gpOyAvLyBzb21lIG9sZGVyIEFuZHJvaWQgZGV2aWNlcyBpbnRlcm1pdHRlbnRseSBzdG9wIGRpc3BhdGNoaW5nIFwidG91Y2htb3ZlXCIgZXZlbnRzIGlmIHdlIGRvbid0IGxpc3RlbiBmb3IgXCJ0b3VjaGNhbmNlbFwiIG9uIHRoZSBkb2N1bWVudC5cblxuXG4gICAgICAgIF9hZGRMaXN0ZW5lcihfYm9keSwgXCJ0b3VjaHN0YXJ0XCIsIF9wYXNzVGhyb3VnaCk7IC8vd29ya3MgYXJvdW5kIFNhZmFyaSBidWc6IGh0dHBzOi8vZ3NhcC5jb20vZm9ydW1zL3RvcGljLzIxNDUwLWRyYWdnYWJsZS1pbi1pZnJhbWUtb24tbW9iaWxlLWlzLWJ1Z2d5L1xuXG5cbiAgICAgICAgX211bHRpTGlzdGVuZXIoX2FkZExpc3RlbmVyLCBfZG9jLCBcInBvaW50ZXJkb3duLHRvdWNoc3RhcnQsbW91c2Vkb3duXCIsIF9wb2ludGVyRG93bkhhbmRsZXIpO1xuXG4gICAgICAgIF9tdWx0aUxpc3RlbmVyKF9hZGRMaXN0ZW5lciwgX2RvYywgXCJwb2ludGVydXAsdG91Y2hlbmQsbW91c2V1cFwiLCBfcG9pbnRlclVwSGFuZGxlcik7XG5cbiAgICAgICAgX3RyYW5zZm9ybVByb3AgPSBnc2FwLnV0aWxzLmNoZWNrUHJlZml4KFwidHJhbnNmb3JtXCIpO1xuXG4gICAgICAgIF9zdGF0ZVByb3BzLnB1c2goX3RyYW5zZm9ybVByb3ApO1xuXG4gICAgICAgIF9jb3JlSW5pdHRlZCA9IF9nZXRUaW1lKCk7XG4gICAgICAgIF9yZXNpemVEZWxheSA9IGdzYXAuZGVsYXllZENhbGwoMC4yLCBfcmVmcmVzaEFsbCkucGF1c2UoKTtcbiAgICAgICAgX2F1dG9SZWZyZXNoID0gW19kb2MsIFwidmlzaWJpbGl0eWNoYW5nZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIHcgPSBfd2luLmlubmVyV2lkdGgsXG4gICAgICAgICAgICAgIGggPSBfd2luLmlubmVySGVpZ2h0O1xuXG4gICAgICAgICAgaWYgKF9kb2MuaGlkZGVuKSB7XG4gICAgICAgICAgICBfcHJldldpZHRoID0gdztcbiAgICAgICAgICAgIF9wcmV2SGVpZ2h0ID0gaDtcbiAgICAgICAgICB9IGVsc2UgaWYgKF9wcmV2V2lkdGggIT09IHcgfHwgX3ByZXZIZWlnaHQgIT09IGgpIHtcbiAgICAgICAgICAgIF9vblJlc2l6ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgX2RvYywgXCJET01Db250ZW50TG9hZGVkXCIsIF9yZWZyZXNoQWxsLCBfd2luLCBcImxvYWRcIiwgX3JlZnJlc2hBbGwsIF93aW4sIFwicmVzaXplXCIsIF9vblJlc2l6ZV07XG5cbiAgICAgICAgX2l0ZXJhdGVBdXRvUmVmcmVzaChfYWRkTGlzdGVuZXIpO1xuXG4gICAgICAgIF90cmlnZ2Vycy5mb3JFYWNoKGZ1bmN0aW9uICh0cmlnZ2VyKSB7XG4gICAgICAgICAgcmV0dXJuIHRyaWdnZXIuZW5hYmxlKDAsIDEpO1xuICAgICAgICB9KTtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgX3Njcm9sbGVycy5sZW5ndGg7IGkgKz0gMykge1xuICAgICAgICAgIF93aGVlbExpc3RlbmVyKF9yZW1vdmVMaXN0ZW5lciwgX3Njcm9sbGVyc1tpXSwgX3Njcm9sbGVyc1tpICsgMV0pO1xuXG4gICAgICAgICAgX3doZWVsTGlzdGVuZXIoX3JlbW92ZUxpc3RlbmVyLCBfc2Nyb2xsZXJzW2ldLCBfc2Nyb2xsZXJzW2kgKyAyXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgU2Nyb2xsVHJpZ2dlci5jb25maWcgPSBmdW5jdGlvbiBjb25maWcodmFycykge1xuICAgIFwibGltaXRDYWxsYmFja3NcIiBpbiB2YXJzICYmIChfbGltaXRDYWxsYmFja3MgPSAhIXZhcnMubGltaXRDYWxsYmFja3MpO1xuICAgIHZhciBtcyA9IHZhcnMuc3luY0ludGVydmFsO1xuICAgIG1zICYmIGNsZWFySW50ZXJ2YWwoX3N5bmNJbnRlcnZhbCkgfHwgKF9zeW5jSW50ZXJ2YWwgPSBtcykgJiYgc2V0SW50ZXJ2YWwoX3N5bmMsIG1zKTtcbiAgICBcImlnbm9yZU1vYmlsZVJlc2l6ZVwiIGluIHZhcnMgJiYgKF9pZ25vcmVNb2JpbGVSZXNpemUgPSBTY3JvbGxUcmlnZ2VyLmlzVG91Y2ggPT09IDEgJiYgdmFycy5pZ25vcmVNb2JpbGVSZXNpemUpO1xuXG4gICAgaWYgKFwiYXV0b1JlZnJlc2hFdmVudHNcIiBpbiB2YXJzKSB7XG4gICAgICBfaXRlcmF0ZUF1dG9SZWZyZXNoKF9yZW1vdmVMaXN0ZW5lcikgfHwgX2l0ZXJhdGVBdXRvUmVmcmVzaChfYWRkTGlzdGVuZXIsIHZhcnMuYXV0b1JlZnJlc2hFdmVudHMgfHwgXCJub25lXCIpO1xuICAgICAgX2lnbm9yZVJlc2l6ZSA9ICh2YXJzLmF1dG9SZWZyZXNoRXZlbnRzICsgXCJcIikuaW5kZXhPZihcInJlc2l6ZVwiKSA9PT0gLTE7XG4gICAgfVxuICB9O1xuXG4gIFNjcm9sbFRyaWdnZXIuc2Nyb2xsZXJQcm94eSA9IGZ1bmN0aW9uIHNjcm9sbGVyUHJveHkodGFyZ2V0LCB2YXJzKSB7XG4gICAgdmFyIHQgPSBfZ2V0VGFyZ2V0KHRhcmdldCksXG4gICAgICAgIGkgPSBfc2Nyb2xsZXJzLmluZGV4T2YodCksXG4gICAgICAgIGlzVmlld3BvcnQgPSBfaXNWaWV3cG9ydCh0KTtcblxuICAgIGlmICh+aSkge1xuICAgICAgX3Njcm9sbGVycy5zcGxpY2UoaSwgaXNWaWV3cG9ydCA/IDYgOiAyKTtcbiAgICB9XG5cbiAgICBpZiAodmFycykge1xuICAgICAgaXNWaWV3cG9ydCA/IF9wcm94aWVzLnVuc2hpZnQoX3dpbiwgdmFycywgX2JvZHksIHZhcnMsIF9kb2NFbCwgdmFycykgOiBfcHJveGllcy51bnNoaWZ0KHQsIHZhcnMpO1xuICAgIH1cbiAgfTtcblxuICBTY3JvbGxUcmlnZ2VyLmNsZWFyTWF0Y2hNZWRpYSA9IGZ1bmN0aW9uIGNsZWFyTWF0Y2hNZWRpYShxdWVyeSkge1xuICAgIF90cmlnZ2Vycy5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XG4gICAgICByZXR1cm4gdC5fY3R4ICYmIHQuX2N0eC5xdWVyeSA9PT0gcXVlcnkgJiYgdC5fY3R4LmtpbGwodHJ1ZSwgdHJ1ZSk7XG4gICAgfSk7XG4gIH07XG5cbiAgU2Nyb2xsVHJpZ2dlci5pc0luVmlld3BvcnQgPSBmdW5jdGlvbiBpc0luVmlld3BvcnQoZWxlbWVudCwgcmF0aW8sIGhvcml6b250YWwpIHtcbiAgICB2YXIgYm91bmRzID0gKF9pc1N0cmluZyhlbGVtZW50KSA/IF9nZXRUYXJnZXQoZWxlbWVudCkgOiBlbGVtZW50KS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgICAgb2Zmc2V0ID0gYm91bmRzW2hvcml6b250YWwgPyBfd2lkdGggOiBfaGVpZ2h0XSAqIHJhdGlvIHx8IDA7XG4gICAgcmV0dXJuIGhvcml6b250YWwgPyBib3VuZHMucmlnaHQgLSBvZmZzZXQgPiAwICYmIGJvdW5kcy5sZWZ0ICsgb2Zmc2V0IDwgX3dpbi5pbm5lcldpZHRoIDogYm91bmRzLmJvdHRvbSAtIG9mZnNldCA+IDAgJiYgYm91bmRzLnRvcCArIG9mZnNldCA8IF93aW4uaW5uZXJIZWlnaHQ7XG4gIH07XG5cbiAgU2Nyb2xsVHJpZ2dlci5wb3NpdGlvbkluVmlld3BvcnQgPSBmdW5jdGlvbiBwb3NpdGlvbkluVmlld3BvcnQoZWxlbWVudCwgcmVmZXJlbmNlUG9pbnQsIGhvcml6b250YWwpIHtcbiAgICBfaXNTdHJpbmcoZWxlbWVudCkgJiYgKGVsZW1lbnQgPSBfZ2V0VGFyZ2V0KGVsZW1lbnQpKTtcbiAgICB2YXIgYm91bmRzID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgICAgc2l6ZSA9IGJvdW5kc1tob3Jpem9udGFsID8gX3dpZHRoIDogX2hlaWdodF0sXG4gICAgICAgIG9mZnNldCA9IHJlZmVyZW5jZVBvaW50ID09IG51bGwgPyBzaXplIC8gMiA6IHJlZmVyZW5jZVBvaW50IGluIF9rZXl3b3JkcyA/IF9rZXl3b3Jkc1tyZWZlcmVuY2VQb2ludF0gKiBzaXplIDogfnJlZmVyZW5jZVBvaW50LmluZGV4T2YoXCIlXCIpID8gcGFyc2VGbG9hdChyZWZlcmVuY2VQb2ludCkgKiBzaXplIC8gMTAwIDogcGFyc2VGbG9hdChyZWZlcmVuY2VQb2ludCkgfHwgMDtcbiAgICByZXR1cm4gaG9yaXpvbnRhbCA/IChib3VuZHMubGVmdCArIG9mZnNldCkgLyBfd2luLmlubmVyV2lkdGggOiAoYm91bmRzLnRvcCArIG9mZnNldCkgLyBfd2luLmlubmVySGVpZ2h0O1xuICB9O1xuXG4gIFNjcm9sbFRyaWdnZXIua2lsbEFsbCA9IGZ1bmN0aW9uIGtpbGxBbGwoYWxsb3dMaXN0ZW5lcnMpIHtcbiAgICBfdHJpZ2dlcnMuc2xpY2UoMCkuZm9yRWFjaChmdW5jdGlvbiAodCkge1xuICAgICAgcmV0dXJuIHQudmFycy5pZCAhPT0gXCJTY3JvbGxTbW9vdGhlclwiICYmIHQua2lsbCgpO1xuICAgIH0pO1xuXG4gICAgaWYgKGFsbG93TGlzdGVuZXJzICE9PSB0cnVlKSB7XG4gICAgICB2YXIgbGlzdGVuZXJzID0gX2xpc3RlbmVycy5raWxsQWxsIHx8IFtdO1xuICAgICAgX2xpc3RlbmVycyA9IHt9O1xuICAgICAgbGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGYpIHtcbiAgICAgICAgcmV0dXJuIGYoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gU2Nyb2xsVHJpZ2dlcjtcbn0oKTtcblNjcm9sbFRyaWdnZXIudmVyc2lvbiA9IFwiMy4xMi41XCI7XG5cblNjcm9sbFRyaWdnZXIuc2F2ZVN0eWxlcyA9IGZ1bmN0aW9uICh0YXJnZXRzKSB7XG4gIHJldHVybiB0YXJnZXRzID8gX3RvQXJyYXkodGFyZ2V0cykuZm9yRWFjaChmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgLy8gc2F2ZWQgc3R5bGVzIGFyZSByZWNvcmRlZCBpbiBhIGNvbnNlY3V0aXZlIGFsdGVybmF0aW5nIEFycmF5LCBsaWtlIFtlbGVtZW50LCBjc3NUZXh0LCB0cmFuc2Zvcm0gYXR0cmlidXRlLCBjYWNoZSwgbWF0Y2hNZWRpYSwgLi4uXVxuICAgIGlmICh0YXJnZXQgJiYgdGFyZ2V0LnN0eWxlKSB7XG4gICAgICB2YXIgaSA9IF9zYXZlZFN0eWxlcy5pbmRleE9mKHRhcmdldCk7XG5cbiAgICAgIGkgPj0gMCAmJiBfc2F2ZWRTdHlsZXMuc3BsaWNlKGksIDUpO1xuXG4gICAgICBfc2F2ZWRTdHlsZXMucHVzaCh0YXJnZXQsIHRhcmdldC5zdHlsZS5jc3NUZXh0LCB0YXJnZXQuZ2V0QkJveCAmJiB0YXJnZXQuZ2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIpLCBnc2FwLmNvcmUuZ2V0Q2FjaGUodGFyZ2V0KSwgX2NvbnRleHQoKSk7XG4gICAgfVxuICB9KSA6IF9zYXZlZFN0eWxlcztcbn07XG5cblNjcm9sbFRyaWdnZXIucmV2ZXJ0ID0gZnVuY3Rpb24gKHNvZnQsIG1lZGlhKSB7XG4gIHJldHVybiBfcmV2ZXJ0QWxsKCFzb2Z0LCBtZWRpYSk7XG59O1xuXG5TY3JvbGxUcmlnZ2VyLmNyZWF0ZSA9IGZ1bmN0aW9uICh2YXJzLCBhbmltYXRpb24pIHtcbiAgcmV0dXJuIG5ldyBTY3JvbGxUcmlnZ2VyKHZhcnMsIGFuaW1hdGlvbik7XG59O1xuXG5TY3JvbGxUcmlnZ2VyLnJlZnJlc2ggPSBmdW5jdGlvbiAoc2FmZSkge1xuICByZXR1cm4gc2FmZSA/IF9vblJlc2l6ZSgpIDogKF9jb3JlSW5pdHRlZCB8fCBTY3JvbGxUcmlnZ2VyLnJlZ2lzdGVyKCkpICYmIF9yZWZyZXNoQWxsKHRydWUpO1xufTtcblxuU2Nyb2xsVHJpZ2dlci51cGRhdGUgPSBmdW5jdGlvbiAoZm9yY2UpIHtcbiAgcmV0dXJuICsrX3Njcm9sbGVycy5jYWNoZSAmJiBfdXBkYXRlQWxsKGZvcmNlID09PSB0cnVlID8gMiA6IDApO1xufTtcblxuU2Nyb2xsVHJpZ2dlci5jbGVhclNjcm9sbE1lbW9yeSA9IF9jbGVhclNjcm9sbE1lbW9yeTtcblxuU2Nyb2xsVHJpZ2dlci5tYXhTY3JvbGwgPSBmdW5jdGlvbiAoZWxlbWVudCwgaG9yaXpvbnRhbCkge1xuICByZXR1cm4gX21heFNjcm9sbChlbGVtZW50LCBob3Jpem9udGFsID8gX2hvcml6b250YWwgOiBfdmVydGljYWwpO1xufTtcblxuU2Nyb2xsVHJpZ2dlci5nZXRTY3JvbGxGdW5jID0gZnVuY3Rpb24gKGVsZW1lbnQsIGhvcml6b250YWwpIHtcbiAgcmV0dXJuIF9nZXRTY3JvbGxGdW5jKF9nZXRUYXJnZXQoZWxlbWVudCksIGhvcml6b250YWwgPyBfaG9yaXpvbnRhbCA6IF92ZXJ0aWNhbCk7XG59O1xuXG5TY3JvbGxUcmlnZ2VyLmdldEJ5SWQgPSBmdW5jdGlvbiAoaWQpIHtcbiAgcmV0dXJuIF9pZHNbaWRdO1xufTtcblxuU2Nyb2xsVHJpZ2dlci5nZXRBbGwgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBfdHJpZ2dlcnMuZmlsdGVyKGZ1bmN0aW9uICh0KSB7XG4gICAgcmV0dXJuIHQudmFycy5pZCAhPT0gXCJTY3JvbGxTbW9vdGhlclwiO1xuICB9KTtcbn07IC8vIGl0J3MgY29tbW9uIGZvciBwZW9wbGUgdG8gU2Nyb2xsVHJpZ2dlci5nZXRBbGwodCA9PiB0LmtpbGwoKSkgb24gcGFnZSByb3V0ZXMsIGZvciBleGFtcGxlLCBhbmQgd2UgZG9uJ3Qgd2FudCBpdCB0byBydWluIHNtb290aCBzY3JvbGxpbmcgYnkga2lsbGluZyB0aGUgbWFpbiBTY3JvbGxTbW9vdGhlciBvbmUuXG5cblxuU2Nyb2xsVHJpZ2dlci5pc1Njcm9sbGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICEhX2xhc3RTY3JvbGxUaW1lO1xufTtcblxuU2Nyb2xsVHJpZ2dlci5zbmFwRGlyZWN0aW9uYWwgPSBfc25hcERpcmVjdGlvbmFsO1xuXG5TY3JvbGxUcmlnZ2VyLmFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiAodHlwZSwgY2FsbGJhY2spIHtcbiAgdmFyIGEgPSBfbGlzdGVuZXJzW3R5cGVdIHx8IChfbGlzdGVuZXJzW3R5cGVdID0gW10pO1xuICB+YS5pbmRleE9mKGNhbGxiYWNrKSB8fCBhLnB1c2goY2FsbGJhY2spO1xufTtcblxuU2Nyb2xsVHJpZ2dlci5yZW1vdmVFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gKHR5cGUsIGNhbGxiYWNrKSB7XG4gIHZhciBhID0gX2xpc3RlbmVyc1t0eXBlXSxcbiAgICAgIGkgPSBhICYmIGEuaW5kZXhPZihjYWxsYmFjayk7XG4gIGkgPj0gMCAmJiBhLnNwbGljZShpLCAxKTtcbn07XG5cblNjcm9sbFRyaWdnZXIuYmF0Y2ggPSBmdW5jdGlvbiAodGFyZ2V0cywgdmFycykge1xuICB2YXIgcmVzdWx0ID0gW10sXG4gICAgICB2YXJzQ29weSA9IHt9LFxuICAgICAgaW50ZXJ2YWwgPSB2YXJzLmludGVydmFsIHx8IDAuMDE2LFxuICAgICAgYmF0Y2hNYXggPSB2YXJzLmJhdGNoTWF4IHx8IDFlOSxcbiAgICAgIHByb3h5Q2FsbGJhY2sgPSBmdW5jdGlvbiBwcm94eUNhbGxiYWNrKHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGVsZW1lbnRzID0gW10sXG4gICAgICAgIHRyaWdnZXJzID0gW10sXG4gICAgICAgIGRlbGF5ID0gZ3NhcC5kZWxheWVkQ2FsbChpbnRlcnZhbCwgZnVuY3Rpb24gKCkge1xuICAgICAgY2FsbGJhY2soZWxlbWVudHMsIHRyaWdnZXJzKTtcbiAgICAgIGVsZW1lbnRzID0gW107XG4gICAgICB0cmlnZ2VycyA9IFtdO1xuICAgIH0pLnBhdXNlKCk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzZWxmKSB7XG4gICAgICBlbGVtZW50cy5sZW5ndGggfHwgZGVsYXkucmVzdGFydCh0cnVlKTtcbiAgICAgIGVsZW1lbnRzLnB1c2goc2VsZi50cmlnZ2VyKTtcbiAgICAgIHRyaWdnZXJzLnB1c2goc2VsZik7XG4gICAgICBiYXRjaE1heCA8PSBlbGVtZW50cy5sZW5ndGggJiYgZGVsYXkucHJvZ3Jlc3MoMSk7XG4gICAgfTtcbiAgfSxcbiAgICAgIHA7XG5cbiAgZm9yIChwIGluIHZhcnMpIHtcbiAgICB2YXJzQ29weVtwXSA9IHAuc3Vic3RyKDAsIDIpID09PSBcIm9uXCIgJiYgX2lzRnVuY3Rpb24odmFyc1twXSkgJiYgcCAhPT0gXCJvblJlZnJlc2hJbml0XCIgPyBwcm94eUNhbGxiYWNrKHAsIHZhcnNbcF0pIDogdmFyc1twXTtcbiAgfVxuXG4gIGlmIChfaXNGdW5jdGlvbihiYXRjaE1heCkpIHtcbiAgICBiYXRjaE1heCA9IGJhdGNoTWF4KCk7XG5cbiAgICBfYWRkTGlzdGVuZXIoU2Nyb2xsVHJpZ2dlciwgXCJyZWZyZXNoXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBiYXRjaE1heCA9IHZhcnMuYmF0Y2hNYXgoKTtcbiAgICB9KTtcbiAgfVxuXG4gIF90b0FycmF5KHRhcmdldHMpLmZvckVhY2goZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIHZhciBjb25maWcgPSB7fTtcblxuICAgIGZvciAocCBpbiB2YXJzQ29weSkge1xuICAgICAgY29uZmlnW3BdID0gdmFyc0NvcHlbcF07XG4gICAgfVxuXG4gICAgY29uZmlnLnRyaWdnZXIgPSB0YXJnZXQ7XG4gICAgcmVzdWx0LnB1c2goU2Nyb2xsVHJpZ2dlci5jcmVhdGUoY29uZmlnKSk7XG4gIH0pO1xuXG4gIHJldHVybiByZXN1bHQ7XG59OyAvLyB0byByZWR1Y2UgZmlsZSBzaXplLiBjbGFtcHMgdGhlIHNjcm9sbCBhbmQgYWxzbyByZXR1cm5zIGEgZHVyYXRpb24gbXVsdGlwbGllciBzbyB0aGF0IGlmIHRoZSBzY3JvbGwgZ2V0cyBjaG9wcGVkIHNob3J0ZXIsIHRoZSBkdXJhdGlvbiBnZXRzIGN1cnRhaWxlZCBhcyB3ZWxsIChvdGhlcndpc2UgaWYgeW91J3JlIHZlcnkgY2xvc2UgdG8gdGhlIHRvcCBvZiB0aGUgcGFnZSwgZm9yIGV4YW1wbGUsIGFuZCBzd2lwZSB1cCByZWFsbHkgZmFzdCwgaXQnbGwgc3VkZGVubHkgc2xvdyBkb3duIGFuZCB0YWtlIGEgbG9uZyB0aW1lIHRvIHJlYWNoIHRoZSB0b3ApLlxuXG5cbnZhciBfY2xhbXBTY3JvbGxBbmRHZXREdXJhdGlvbk11bHRpcGxpZXIgPSBmdW5jdGlvbiBfY2xhbXBTY3JvbGxBbmRHZXREdXJhdGlvbk11bHRpcGxpZXIoc2Nyb2xsRnVuYywgY3VycmVudCwgZW5kLCBtYXgpIHtcbiAgY3VycmVudCA+IG1heCA/IHNjcm9sbEZ1bmMobWF4KSA6IGN1cnJlbnQgPCAwICYmIHNjcm9sbEZ1bmMoMCk7XG4gIHJldHVybiBlbmQgPiBtYXggPyAobWF4IC0gY3VycmVudCkgLyAoZW5kIC0gY3VycmVudCkgOiBlbmQgPCAwID8gY3VycmVudCAvIChjdXJyZW50IC0gZW5kKSA6IDE7XG59LFxuICAgIF9hbGxvd05hdGl2ZVBhbm5pbmcgPSBmdW5jdGlvbiBfYWxsb3dOYXRpdmVQYW5uaW5nKHRhcmdldCwgZGlyZWN0aW9uKSB7XG4gIGlmIChkaXJlY3Rpb24gPT09IHRydWUpIHtcbiAgICB0YXJnZXQuc3R5bGUucmVtb3ZlUHJvcGVydHkoXCJ0b3VjaC1hY3Rpb25cIik7XG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0LnN0eWxlLnRvdWNoQWN0aW9uID0gZGlyZWN0aW9uID09PSB0cnVlID8gXCJhdXRvXCIgOiBkaXJlY3Rpb24gPyBcInBhbi1cIiArIGRpcmVjdGlvbiArIChPYnNlcnZlci5pc1RvdWNoID8gXCIgcGluY2gtem9vbVwiIDogXCJcIikgOiBcIm5vbmVcIjsgLy8gbm90ZTogRmlyZWZveCBkb2Vzbid0IHN1cHBvcnQgaXQgcGluY2gtem9vbSBwcm9wZXJseSwgYXQgbGVhc3QgaW4gYWRkaXRpb24gdG8gYSBwYW4teCBvciBwYW4teS5cbiAgfVxuXG4gIHRhcmdldCA9PT0gX2RvY0VsICYmIF9hbGxvd05hdGl2ZVBhbm5pbmcoX2JvZHksIGRpcmVjdGlvbik7XG59LFxuICAgIF9vdmVyZmxvdyA9IHtcbiAgYXV0bzogMSxcbiAgc2Nyb2xsOiAxXG59LFxuICAgIF9uZXN0ZWRTY3JvbGwgPSBmdW5jdGlvbiBfbmVzdGVkU2Nyb2xsKF9yZWY1KSB7XG4gIHZhciBldmVudCA9IF9yZWY1LmV2ZW50LFxuICAgICAgdGFyZ2V0ID0gX3JlZjUudGFyZ2V0LFxuICAgICAgYXhpcyA9IF9yZWY1LmF4aXM7XG5cbiAgdmFyIG5vZGUgPSAoZXZlbnQuY2hhbmdlZFRvdWNoZXMgPyBldmVudC5jaGFuZ2VkVG91Y2hlc1swXSA6IGV2ZW50KS50YXJnZXQsXG4gICAgICBjYWNoZSA9IG5vZGUuX2dzYXAgfHwgZ3NhcC5jb3JlLmdldENhY2hlKG5vZGUpLFxuICAgICAgdGltZSA9IF9nZXRUaW1lKCksXG4gICAgICBjcztcblxuICBpZiAoIWNhY2hlLl9pc1Njcm9sbFQgfHwgdGltZSAtIGNhY2hlLl9pc1Njcm9sbFQgPiAyMDAwKSB7XG4gICAgLy8gY2FjaGUgZm9yIDIgc2Vjb25kcyB0byBpbXByb3ZlIHBlcmZvcm1hbmNlLlxuICAgIHdoaWxlIChub2RlICYmIG5vZGUgIT09IF9ib2R5ICYmIChub2RlLnNjcm9sbEhlaWdodCA8PSBub2RlLmNsaWVudEhlaWdodCAmJiBub2RlLnNjcm9sbFdpZHRoIDw9IG5vZGUuY2xpZW50V2lkdGggfHwgIShfb3ZlcmZsb3dbKGNzID0gX2dldENvbXB1dGVkU3R5bGUobm9kZSkpLm92ZXJmbG93WV0gfHwgX292ZXJmbG93W2NzLm92ZXJmbG93WF0pKSkge1xuICAgICAgbm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcbiAgICB9XG5cbiAgICBjYWNoZS5faXNTY3JvbGwgPSBub2RlICYmIG5vZGUgIT09IHRhcmdldCAmJiAhX2lzVmlld3BvcnQobm9kZSkgJiYgKF9vdmVyZmxvd1soY3MgPSBfZ2V0Q29tcHV0ZWRTdHlsZShub2RlKSkub3ZlcmZsb3dZXSB8fCBfb3ZlcmZsb3dbY3Mub3ZlcmZsb3dYXSk7XG4gICAgY2FjaGUuX2lzU2Nyb2xsVCA9IHRpbWU7XG4gIH1cblxuICBpZiAoY2FjaGUuX2lzU2Nyb2xsIHx8IGF4aXMgPT09IFwieFwiKSB7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgZXZlbnQuX2dzYXBBbGxvdyA9IHRydWU7XG4gIH1cbn0sXG4gICAgLy8gY2FwdHVyZSBldmVudHMgb24gc2Nyb2xsYWJsZSBlbGVtZW50cyBJTlNJREUgdGhlIDxib2R5PiBhbmQgYWxsb3cgdGhvc2UgYnkgY2FsbGluZyBzdG9wUHJvcGFnYXRpb24oKSB3aGVuIHdlIGZpbmQgYSBzY3JvbGxhYmxlIGFuY2VzdG9yXG5faW5wdXRPYnNlcnZlciA9IGZ1bmN0aW9uIF9pbnB1dE9ic2VydmVyKHRhcmdldCwgdHlwZSwgaW5wdXRzLCBuZXN0ZWQpIHtcbiAgcmV0dXJuIE9ic2VydmVyLmNyZWF0ZSh7XG4gICAgdGFyZ2V0OiB0YXJnZXQsXG4gICAgY2FwdHVyZTogdHJ1ZSxcbiAgICBkZWJvdW5jZTogZmFsc2UsXG4gICAgbG9ja0F4aXM6IHRydWUsXG4gICAgdHlwZTogdHlwZSxcbiAgICBvbldoZWVsOiBuZXN0ZWQgPSBuZXN0ZWQgJiYgX25lc3RlZFNjcm9sbCxcbiAgICBvblByZXNzOiBuZXN0ZWQsXG4gICAgb25EcmFnOiBuZXN0ZWQsXG4gICAgb25TY3JvbGw6IG5lc3RlZCxcbiAgICBvbkVuYWJsZTogZnVuY3Rpb24gb25FbmFibGUoKSB7XG4gICAgICByZXR1cm4gaW5wdXRzICYmIF9hZGRMaXN0ZW5lcihfZG9jLCBPYnNlcnZlci5ldmVudFR5cGVzWzBdLCBfY2FwdHVyZUlucHV0cywgZmFsc2UsIHRydWUpO1xuICAgIH0sXG4gICAgb25EaXNhYmxlOiBmdW5jdGlvbiBvbkRpc2FibGUoKSB7XG4gICAgICByZXR1cm4gX3JlbW92ZUxpc3RlbmVyKF9kb2MsIE9ic2VydmVyLmV2ZW50VHlwZXNbMF0sIF9jYXB0dXJlSW5wdXRzLCB0cnVlKTtcbiAgICB9XG4gIH0pO1xufSxcbiAgICBfaW5wdXRFeHAgPSAvKGlucHV0fGxhYmVsfHNlbGVjdHx0ZXh0YXJlYSkvaSxcbiAgICBfaW5wdXRJc0ZvY3VzZWQsXG4gICAgX2NhcHR1cmVJbnB1dHMgPSBmdW5jdGlvbiBfY2FwdHVyZUlucHV0cyhlKSB7XG4gIHZhciBpc0lucHV0ID0gX2lucHV0RXhwLnRlc3QoZS50YXJnZXQudGFnTmFtZSk7XG5cbiAgaWYgKGlzSW5wdXQgfHwgX2lucHV0SXNGb2N1c2VkKSB7XG4gICAgZS5fZ3NhcEFsbG93ID0gdHJ1ZTtcbiAgICBfaW5wdXRJc0ZvY3VzZWQgPSBpc0lucHV0O1xuICB9XG59LFxuICAgIF9nZXRTY3JvbGxOb3JtYWxpemVyID0gZnVuY3Rpb24gX2dldFNjcm9sbE5vcm1hbGl6ZXIodmFycykge1xuICBfaXNPYmplY3QodmFycykgfHwgKHZhcnMgPSB7fSk7XG4gIHZhcnMucHJldmVudERlZmF1bHQgPSB2YXJzLmlzTm9ybWFsaXplciA9IHZhcnMuYWxsb3dDbGlja3MgPSB0cnVlO1xuICB2YXJzLnR5cGUgfHwgKHZhcnMudHlwZSA9IFwid2hlZWwsdG91Y2hcIik7XG4gIHZhcnMuZGVib3VuY2UgPSAhIXZhcnMuZGVib3VuY2U7XG4gIHZhcnMuaWQgPSB2YXJzLmlkIHx8IFwibm9ybWFsaXplclwiO1xuXG4gIHZhciBfdmFyczIgPSB2YXJzLFxuICAgICAgbm9ybWFsaXplU2Nyb2xsWCA9IF92YXJzMi5ub3JtYWxpemVTY3JvbGxYLFxuICAgICAgbW9tZW50dW0gPSBfdmFyczIubW9tZW50dW0sXG4gICAgICBhbGxvd05lc3RlZFNjcm9sbCA9IF92YXJzMi5hbGxvd05lc3RlZFNjcm9sbCxcbiAgICAgIG9uUmVsZWFzZSA9IF92YXJzMi5vblJlbGVhc2UsXG4gICAgICBzZWxmLFxuICAgICAgbWF4WSxcbiAgICAgIHRhcmdldCA9IF9nZXRUYXJnZXQodmFycy50YXJnZXQpIHx8IF9kb2NFbCxcbiAgICAgIHNtb290aGVyID0gZ3NhcC5jb3JlLmdsb2JhbHMoKS5TY3JvbGxTbW9vdGhlcixcbiAgICAgIHNtb290aGVySW5zdGFuY2UgPSBzbW9vdGhlciAmJiBzbW9vdGhlci5nZXQoKSxcbiAgICAgIGNvbnRlbnQgPSBfZml4SU9TQnVnICYmICh2YXJzLmNvbnRlbnQgJiYgX2dldFRhcmdldCh2YXJzLmNvbnRlbnQpIHx8IHNtb290aGVySW5zdGFuY2UgJiYgdmFycy5jb250ZW50ICE9PSBmYWxzZSAmJiAhc21vb3RoZXJJbnN0YW5jZS5zbW9vdGgoKSAmJiBzbW9vdGhlckluc3RhbmNlLmNvbnRlbnQoKSksXG4gICAgICBzY3JvbGxGdW5jWSA9IF9nZXRTY3JvbGxGdW5jKHRhcmdldCwgX3ZlcnRpY2FsKSxcbiAgICAgIHNjcm9sbEZ1bmNYID0gX2dldFNjcm9sbEZ1bmModGFyZ2V0LCBfaG9yaXpvbnRhbCksXG4gICAgICBzY2FsZSA9IDEsXG4gICAgICBpbml0aWFsU2NhbGUgPSAoT2JzZXJ2ZXIuaXNUb3VjaCAmJiBfd2luLnZpc3VhbFZpZXdwb3J0ID8gX3dpbi52aXN1YWxWaWV3cG9ydC5zY2FsZSAqIF93aW4udmlzdWFsVmlld3BvcnQud2lkdGggOiBfd2luLm91dGVyV2lkdGgpIC8gX3dpbi5pbm5lcldpZHRoLFxuICAgICAgd2hlZWxSZWZyZXNoID0gMCxcbiAgICAgIHJlc29sdmVNb21lbnR1bUR1cmF0aW9uID0gX2lzRnVuY3Rpb24obW9tZW50dW0pID8gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBtb21lbnR1bShzZWxmKTtcbiAgfSA6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbW9tZW50dW0gfHwgMi44O1xuICB9LFxuICAgICAgbGFzdFJlZnJlc2hJRCxcbiAgICAgIHNraXBUb3VjaE1vdmUsXG4gICAgICBpbnB1dE9ic2VydmVyID0gX2lucHV0T2JzZXJ2ZXIodGFyZ2V0LCB2YXJzLnR5cGUsIHRydWUsIGFsbG93TmVzdGVkU2Nyb2xsKSxcbiAgICAgIHJlc3VtZVRvdWNoTW92ZSA9IGZ1bmN0aW9uIHJlc3VtZVRvdWNoTW92ZSgpIHtcbiAgICByZXR1cm4gc2tpcFRvdWNoTW92ZSA9IGZhbHNlO1xuICB9LFxuICAgICAgc2Nyb2xsQ2xhbXBYID0gX3Bhc3NUaHJvdWdoLFxuICAgICAgc2Nyb2xsQ2xhbXBZID0gX3Bhc3NUaHJvdWdoLFxuICAgICAgdXBkYXRlQ2xhbXBzID0gZnVuY3Rpb24gdXBkYXRlQ2xhbXBzKCkge1xuICAgIG1heFkgPSBfbWF4U2Nyb2xsKHRhcmdldCwgX3ZlcnRpY2FsKTtcbiAgICBzY3JvbGxDbGFtcFkgPSBfY2xhbXAoX2ZpeElPU0J1ZyA/IDEgOiAwLCBtYXhZKTtcbiAgICBub3JtYWxpemVTY3JvbGxYICYmIChzY3JvbGxDbGFtcFggPSBfY2xhbXAoMCwgX21heFNjcm9sbCh0YXJnZXQsIF9ob3Jpem9udGFsKSkpO1xuICAgIGxhc3RSZWZyZXNoSUQgPSBfcmVmcmVzaElEO1xuICB9LFxuICAgICAgcmVtb3ZlQ29udGVudE9mZnNldCA9IGZ1bmN0aW9uIHJlbW92ZUNvbnRlbnRPZmZzZXQoKSB7XG4gICAgY29udGVudC5fZ3NhcC55ID0gX3JvdW5kKHBhcnNlRmxvYXQoY29udGVudC5fZ3NhcC55KSArIHNjcm9sbEZ1bmNZLm9mZnNldCkgKyBcInB4XCI7XG4gICAgY29udGVudC5zdHlsZS50cmFuc2Zvcm0gPSBcIm1hdHJpeDNkKDEsIDAsIDAsIDAsIDAsIDEsIDAsIDAsIDAsIDAsIDEsIDAsIDAsIFwiICsgcGFyc2VGbG9hdChjb250ZW50Ll9nc2FwLnkpICsgXCIsIDAsIDEpXCI7XG4gICAgc2Nyb2xsRnVuY1kub2Zmc2V0ID0gc2Nyb2xsRnVuY1kuY2FjaGVJRCA9IDA7XG4gIH0sXG4gICAgICBpZ25vcmVEcmFnID0gZnVuY3Rpb24gaWdub3JlRHJhZygpIHtcbiAgICBpZiAoc2tpcFRvdWNoTW92ZSkge1xuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJlc3VtZVRvdWNoTW92ZSk7XG5cbiAgICAgIHZhciBvZmZzZXQgPSBfcm91bmQoc2VsZi5kZWx0YVkgLyAyKSxcbiAgICAgICAgICBzY3JvbGwgPSBzY3JvbGxDbGFtcFkoc2Nyb2xsRnVuY1kudiAtIG9mZnNldCk7XG5cbiAgICAgIGlmIChjb250ZW50ICYmIHNjcm9sbCAhPT0gc2Nyb2xsRnVuY1kudiArIHNjcm9sbEZ1bmNZLm9mZnNldCkge1xuICAgICAgICBzY3JvbGxGdW5jWS5vZmZzZXQgPSBzY3JvbGwgLSBzY3JvbGxGdW5jWS52O1xuXG4gICAgICAgIHZhciB5ID0gX3JvdW5kKChwYXJzZUZsb2F0KGNvbnRlbnQgJiYgY29udGVudC5fZ3NhcC55KSB8fCAwKSAtIHNjcm9sbEZ1bmNZLm9mZnNldCk7XG5cbiAgICAgICAgY29udGVudC5zdHlsZS50cmFuc2Zvcm0gPSBcIm1hdHJpeDNkKDEsIDAsIDAsIDAsIDAsIDEsIDAsIDAsIDAsIDAsIDEsIDAsIDAsIFwiICsgeSArIFwiLCAwLCAxKVwiO1xuICAgICAgICBjb250ZW50Ll9nc2FwLnkgPSB5ICsgXCJweFwiO1xuICAgICAgICBzY3JvbGxGdW5jWS5jYWNoZUlEID0gX3Njcm9sbGVycy5jYWNoZTtcblxuICAgICAgICBfdXBkYXRlQWxsKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHNjcm9sbEZ1bmNZLm9mZnNldCAmJiByZW1vdmVDb250ZW50T2Zmc2V0KCk7XG4gICAgc2tpcFRvdWNoTW92ZSA9IHRydWU7XG4gIH0sXG4gICAgICB0d2VlbixcbiAgICAgIHN0YXJ0U2Nyb2xsWCxcbiAgICAgIHN0YXJ0U2Nyb2xsWSxcbiAgICAgIG9uU3RvcERlbGF5ZWRDYWxsLFxuICAgICAgb25SZXNpemUgPSBmdW5jdGlvbiBvblJlc2l6ZSgpIHtcbiAgICAvLyBpZiB0aGUgd2luZG93IHJlc2l6ZXMsIGxpa2Ugb24gYW4gaVBob25lIHdoaWNoIEFwcGxlIEZPUkNFUyB0aGUgYWRkcmVzcyBiYXIgdG8gc2hvdy9oaWRlIGV2ZW4gaWYgd2UgZXZlbnQucHJldmVudERlZmF1bHQoKSwgaXQgbWF5IGJlIHNjcm9sbGluZyB0b28gZmFyIG5vdyB0aGF0IHRoZSBhZGRyZXNzIGJhciBpcyBzaG93aW5nLCBzbyB3ZSBtdXN0IGR5bmFtaWNhbGx5IGFkanVzdCB0aGUgbW9tZW50dW0gdHdlZW4uXG4gICAgdXBkYXRlQ2xhbXBzKCk7XG5cbiAgICBpZiAodHdlZW4uaXNBY3RpdmUoKSAmJiB0d2Vlbi52YXJzLnNjcm9sbFkgPiBtYXhZKSB7XG4gICAgICBzY3JvbGxGdW5jWSgpID4gbWF4WSA/IHR3ZWVuLnByb2dyZXNzKDEpICYmIHNjcm9sbEZ1bmNZKG1heFkpIDogdHdlZW4ucmVzZXRUbyhcInNjcm9sbFlcIiwgbWF4WSk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnRlbnQgJiYgZ3NhcC5zZXQoY29udGVudCwge1xuICAgIHk6IFwiKz0wXCJcbiAgfSk7IC8vIHRvIGVuc3VyZSB0aGVyZSdzIGEgY2FjaGUgKGVsZW1lbnQuX2dzYXApXG5cbiAgdmFycy5pZ25vcmVDaGVjayA9IGZ1bmN0aW9uIChlKSB7XG4gICAgcmV0dXJuIF9maXhJT1NCdWcgJiYgZS50eXBlID09PSBcInRvdWNobW92ZVwiICYmIGlnbm9yZURyYWcoZSkgfHwgc2NhbGUgPiAxLjA1ICYmIGUudHlwZSAhPT0gXCJ0b3VjaHN0YXJ0XCIgfHwgc2VsZi5pc0dlc3R1cmluZyB8fCBlLnRvdWNoZXMgJiYgZS50b3VjaGVzLmxlbmd0aCA+IDE7XG4gIH07XG5cbiAgdmFycy5vblByZXNzID0gZnVuY3Rpb24gKCkge1xuICAgIHNraXBUb3VjaE1vdmUgPSBmYWxzZTtcbiAgICB2YXIgcHJldlNjYWxlID0gc2NhbGU7XG4gICAgc2NhbGUgPSBfcm91bmQoKF93aW4udmlzdWFsVmlld3BvcnQgJiYgX3dpbi52aXN1YWxWaWV3cG9ydC5zY2FsZSB8fCAxKSAvIGluaXRpYWxTY2FsZSk7XG4gICAgdHdlZW4ucGF1c2UoKTtcbiAgICBwcmV2U2NhbGUgIT09IHNjYWxlICYmIF9hbGxvd05hdGl2ZVBhbm5pbmcodGFyZ2V0LCBzY2FsZSA+IDEuMDEgPyB0cnVlIDogbm9ybWFsaXplU2Nyb2xsWCA/IGZhbHNlIDogXCJ4XCIpO1xuICAgIHN0YXJ0U2Nyb2xsWCA9IHNjcm9sbEZ1bmNYKCk7XG4gICAgc3RhcnRTY3JvbGxZID0gc2Nyb2xsRnVuY1koKTtcbiAgICB1cGRhdGVDbGFtcHMoKTtcbiAgICBsYXN0UmVmcmVzaElEID0gX3JlZnJlc2hJRDtcbiAgfTtcblxuICB2YXJzLm9uUmVsZWFzZSA9IHZhcnMub25HZXN0dXJlU3RhcnQgPSBmdW5jdGlvbiAoc2VsZiwgd2FzRHJhZ2dpbmcpIHtcbiAgICBzY3JvbGxGdW5jWS5vZmZzZXQgJiYgcmVtb3ZlQ29udGVudE9mZnNldCgpO1xuXG4gICAgaWYgKCF3YXNEcmFnZ2luZykge1xuICAgICAgb25TdG9wRGVsYXllZENhbGwucmVzdGFydCh0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgX3Njcm9sbGVycy5jYWNoZSsrOyAvLyBtYWtlIHN1cmUgd2UncmUgcHVsbGluZyB0aGUgbm9uLWNhY2hlZCB2YWx1ZVxuICAgICAgLy8gYWx0ZXJuYXRlIGFsZ29yaXRobTogZHVyWCA9IE1hdGgubWluKDYsIE1hdGguYWJzKHNlbGYudmVsb2NpdHlYIC8gODAwKSksXHRkdXIgPSBNYXRoLm1heChkdXJYLCBNYXRoLm1pbig2LCBNYXRoLmFicyhzZWxmLnZlbG9jaXR5WSAvIDgwMCkpKTsgZHVyID0gZHVyICogKDAuNCArICgxIC0gX3Bvd2VyNEluKGR1ciAvIDYpKSAqIDAuNikpICogKG1vbWVudHVtU3BlZWQgfHwgMSlcblxuICAgICAgdmFyIGR1ciA9IHJlc29sdmVNb21lbnR1bUR1cmF0aW9uKCksXG4gICAgICAgICAgY3VycmVudFNjcm9sbCxcbiAgICAgICAgICBlbmRTY3JvbGw7XG5cbiAgICAgIGlmIChub3JtYWxpemVTY3JvbGxYKSB7XG4gICAgICAgIGN1cnJlbnRTY3JvbGwgPSBzY3JvbGxGdW5jWCgpO1xuICAgICAgICBlbmRTY3JvbGwgPSBjdXJyZW50U2Nyb2xsICsgZHVyICogMC4wNSAqIC1zZWxmLnZlbG9jaXR5WCAvIDAuMjI3OyAvLyB0aGUgY29uc3RhbnQgLjIyNyBpcyBmcm9tIHBvd2VyNCgwLjA1KS4gdmVsb2NpdHkgaXMgaW52ZXJ0ZWQgYmVjYXVzZSBzY3JvbGxpbmcgZ29lcyBpbiB0aGUgb3Bwb3NpdGUgZGlyZWN0aW9uLlxuXG4gICAgICAgIGR1ciAqPSBfY2xhbXBTY3JvbGxBbmRHZXREdXJhdGlvbk11bHRpcGxpZXIoc2Nyb2xsRnVuY1gsIGN1cnJlbnRTY3JvbGwsIGVuZFNjcm9sbCwgX21heFNjcm9sbCh0YXJnZXQsIF9ob3Jpem9udGFsKSk7XG4gICAgICAgIHR3ZWVuLnZhcnMuc2Nyb2xsWCA9IHNjcm9sbENsYW1wWChlbmRTY3JvbGwpO1xuICAgICAgfVxuXG4gICAgICBjdXJyZW50U2Nyb2xsID0gc2Nyb2xsRnVuY1koKTtcbiAgICAgIGVuZFNjcm9sbCA9IGN1cnJlbnRTY3JvbGwgKyBkdXIgKiAwLjA1ICogLXNlbGYudmVsb2NpdHlZIC8gMC4yMjc7IC8vIHRoZSBjb25zdGFudCAuMjI3IGlzIGZyb20gcG93ZXI0KDAuMDUpXG5cbiAgICAgIGR1ciAqPSBfY2xhbXBTY3JvbGxBbmRHZXREdXJhdGlvbk11bHRpcGxpZXIoc2Nyb2xsRnVuY1ksIGN1cnJlbnRTY3JvbGwsIGVuZFNjcm9sbCwgX21heFNjcm9sbCh0YXJnZXQsIF92ZXJ0aWNhbCkpO1xuICAgICAgdHdlZW4udmFycy5zY3JvbGxZID0gc2Nyb2xsQ2xhbXBZKGVuZFNjcm9sbCk7XG4gICAgICB0d2Vlbi5pbnZhbGlkYXRlKCkuZHVyYXRpb24oZHVyKS5wbGF5KDAuMDEpO1xuXG4gICAgICBpZiAoX2ZpeElPU0J1ZyAmJiB0d2Vlbi52YXJzLnNjcm9sbFkgPj0gbWF4WSB8fCBjdXJyZW50U2Nyb2xsID49IG1heFkgLSAxKSB7XG4gICAgICAgIC8vIGlPUyBidWc6IGl0J2xsIHNob3cgdGhlIGFkZHJlc3MgYmFyIGJ1dCBOT1QgZmlyZSB0aGUgd2luZG93IFwicmVzaXplXCIgZXZlbnQgdW50aWwgdGhlIGFuaW1hdGlvbiBpcyBkb25lIGJ1dCB3ZSBtdXN0IHByb3RlY3QgYWdhaW5zdCBvdmVyc2hvb3Qgc28gd2UgbGV2ZXJhZ2UgYW4gb25VcGRhdGUgdG8gZG8gc28uXG4gICAgICAgIGdzYXAudG8oe30sIHtcbiAgICAgICAgICBvblVwZGF0ZTogb25SZXNpemUsXG4gICAgICAgICAgZHVyYXRpb246IGR1clxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBvblJlbGVhc2UgJiYgb25SZWxlYXNlKHNlbGYpO1xuICB9O1xuXG4gIHZhcnMub25XaGVlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0d2Vlbi5fdHMgJiYgdHdlZW4ucGF1c2UoKTtcblxuICAgIGlmIChfZ2V0VGltZSgpIC0gd2hlZWxSZWZyZXNoID4gMTAwMCkge1xuICAgICAgLy8gYWZ0ZXIgMSBzZWNvbmQsIHJlZnJlc2ggdGhlIGNsYW1wcyBvdGhlcndpc2UgdGhhdCdsbCBvbmx5IGhhcHBlbiB3aGVuIFNjcm9sbFRyaWdnZXIucmVmcmVzaCgpIGlzIGNhbGxlZCBvciBmb3IgdG91Y2gtc2Nyb2xsaW5nLlxuICAgICAgbGFzdFJlZnJlc2hJRCA9IDA7XG4gICAgICB3aGVlbFJlZnJlc2ggPSBfZ2V0VGltZSgpO1xuICAgIH1cbiAgfTtcblxuICB2YXJzLm9uQ2hhbmdlID0gZnVuY3Rpb24gKHNlbGYsIGR4LCBkeSwgeEFycmF5LCB5QXJyYXkpIHtcbiAgICBfcmVmcmVzaElEICE9PSBsYXN0UmVmcmVzaElEICYmIHVwZGF0ZUNsYW1wcygpO1xuICAgIGR4ICYmIG5vcm1hbGl6ZVNjcm9sbFggJiYgc2Nyb2xsRnVuY1goc2Nyb2xsQ2xhbXBYKHhBcnJheVsyXSA9PT0gZHggPyBzdGFydFNjcm9sbFggKyAoc2VsZi5zdGFydFggLSBzZWxmLngpIDogc2Nyb2xsRnVuY1goKSArIGR4IC0geEFycmF5WzFdKSk7IC8vIGZvciBtb3JlIHByZWNpc2lvbiwgd2UgdHJhY2sgcG9pbnRlci90b3VjaCBtb3ZlbWVudCBmcm9tIHRoZSBzdGFydCwgb3RoZXJ3aXNlIGl0J2xsIGRyaWZ0LlxuXG4gICAgaWYgKGR5KSB7XG4gICAgICBzY3JvbGxGdW5jWS5vZmZzZXQgJiYgcmVtb3ZlQ29udGVudE9mZnNldCgpO1xuICAgICAgdmFyIGlzVG91Y2ggPSB5QXJyYXlbMl0gPT09IGR5LFxuICAgICAgICAgIHkgPSBpc1RvdWNoID8gc3RhcnRTY3JvbGxZICsgc2VsZi5zdGFydFkgLSBzZWxmLnkgOiBzY3JvbGxGdW5jWSgpICsgZHkgLSB5QXJyYXlbMV0sXG4gICAgICAgICAgeUNsYW1wZWQgPSBzY3JvbGxDbGFtcFkoeSk7XG4gICAgICBpc1RvdWNoICYmIHkgIT09IHlDbGFtcGVkICYmIChzdGFydFNjcm9sbFkgKz0geUNsYW1wZWQgLSB5KTtcbiAgICAgIHNjcm9sbEZ1bmNZKHlDbGFtcGVkKTtcbiAgICB9XG5cbiAgICAoZHkgfHwgZHgpICYmIF91cGRhdGVBbGwoKTtcbiAgfTtcblxuICB2YXJzLm9uRW5hYmxlID0gZnVuY3Rpb24gKCkge1xuICAgIF9hbGxvd05hdGl2ZVBhbm5pbmcodGFyZ2V0LCBub3JtYWxpemVTY3JvbGxYID8gZmFsc2UgOiBcInhcIik7XG5cbiAgICBTY3JvbGxUcmlnZ2VyLmFkZEV2ZW50TGlzdGVuZXIoXCJyZWZyZXNoXCIsIG9uUmVzaXplKTtcblxuICAgIF9hZGRMaXN0ZW5lcihfd2luLCBcInJlc2l6ZVwiLCBvblJlc2l6ZSk7XG5cbiAgICBpZiAoc2Nyb2xsRnVuY1kuc21vb3RoKSB7XG4gICAgICBzY3JvbGxGdW5jWS50YXJnZXQuc3R5bGUuc2Nyb2xsQmVoYXZpb3IgPSBcImF1dG9cIjtcbiAgICAgIHNjcm9sbEZ1bmNZLnNtb290aCA9IHNjcm9sbEZ1bmNYLnNtb290aCA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlucHV0T2JzZXJ2ZXIuZW5hYmxlKCk7XG4gIH07XG5cbiAgdmFycy5vbkRpc2FibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgX2FsbG93TmF0aXZlUGFubmluZyh0YXJnZXQsIHRydWUpO1xuXG4gICAgX3JlbW92ZUxpc3RlbmVyKF93aW4sIFwicmVzaXplXCIsIG9uUmVzaXplKTtcblxuICAgIFNjcm9sbFRyaWdnZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlZnJlc2hcIiwgb25SZXNpemUpO1xuICAgIGlucHV0T2JzZXJ2ZXIua2lsbCgpO1xuICB9O1xuXG4gIHZhcnMubG9ja0F4aXMgPSB2YXJzLmxvY2tBeGlzICE9PSBmYWxzZTtcbiAgc2VsZiA9IG5ldyBPYnNlcnZlcih2YXJzKTtcbiAgc2VsZi5pT1MgPSBfZml4SU9TQnVnOyAvLyB1c2VkIGluIHRoZSBPYnNlcnZlciBnZXRDYWNoZWRTY3JvbGwoKSBmdW5jdGlvbiB0byB3b3JrIGFyb3VuZCBhbiBpT1MgYnVnIHRoYXQgd3JlYWtzIGhhdm9jIHdpdGggVG91Y2hFdmVudC5jbGllbnRZIGlmIHdlIGFsbG93IHNjcm9sbCB0byBnbyBhbGwgdGhlIHdheSBiYWNrIHRvIDAuXG5cbiAgX2ZpeElPU0J1ZyAmJiAhc2Nyb2xsRnVuY1koKSAmJiBzY3JvbGxGdW5jWSgxKTsgLy8gaU9TIGJ1ZyBjYXVzZXMgZXZlbnQuY2xpZW50WSB2YWx1ZXMgdG8gZnJlYWsgb3V0ICh3aWxkbHkgaW5hY2N1cmF0ZSkgaWYgdGhlIHNjcm9sbCBwb3NpdGlvbiBpcyBleGFjdGx5IDAuXG5cbiAgX2ZpeElPU0J1ZyAmJiBnc2FwLnRpY2tlci5hZGQoX3Bhc3NUaHJvdWdoKTsgLy8gcHJldmVudCB0aGUgdGlja2VyIGZyb20gc2xlZXBpbmdcblxuICBvblN0b3BEZWxheWVkQ2FsbCA9IHNlbGYuX2RjO1xuICB0d2VlbiA9IGdzYXAudG8oc2VsZiwge1xuICAgIGVhc2U6IFwicG93ZXI0XCIsXG4gICAgcGF1c2VkOiB0cnVlLFxuICAgIGluaGVyaXQ6IGZhbHNlLFxuICAgIHNjcm9sbFg6IG5vcm1hbGl6ZVNjcm9sbFggPyBcIis9MC4xXCIgOiBcIis9MFwiLFxuICAgIHNjcm9sbFk6IFwiKz0wLjFcIixcbiAgICBtb2RpZmllcnM6IHtcbiAgICAgIHNjcm9sbFk6IF9pbnRlcnJ1cHRpb25UcmFja2VyKHNjcm9sbEZ1bmNZLCBzY3JvbGxGdW5jWSgpLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0d2Vlbi5wYXVzZSgpO1xuICAgICAgfSlcbiAgICB9LFxuICAgIG9uVXBkYXRlOiBfdXBkYXRlQWxsLFxuICAgIG9uQ29tcGxldGU6IG9uU3RvcERlbGF5ZWRDYWxsLnZhcnMub25Db21wbGV0ZVxuICB9KTsgLy8gd2UgbmVlZCB0aGUgbW9kaWZpZXIgdG8gc2Vuc2UgaWYgdGhlIHNjcm9sbCBwb3NpdGlvbiBpcyBhbHRlcmVkIG91dHNpZGUgb2YgdGhlIG1vbWVudHVtIHR3ZWVuIChsaWtlIHdpdGggYSBzY3JvbGxUbyB0d2Vlbikgc28gd2UgY2FuIHBhdXNlKCkgaXQgdG8gcHJldmVudCBjb25mbGljdHMuXG5cbiAgcmV0dXJuIHNlbGY7XG59O1xuXG5TY3JvbGxUcmlnZ2VyLnNvcnQgPSBmdW5jdGlvbiAoZnVuYykge1xuICByZXR1cm4gX3RyaWdnZXJzLnNvcnQoZnVuYyB8fCBmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiAoYS52YXJzLnJlZnJlc2hQcmlvcml0eSB8fCAwKSAqIC0xZTYgKyBhLnN0YXJ0IC0gKGIuc3RhcnQgKyAoYi52YXJzLnJlZnJlc2hQcmlvcml0eSB8fCAwKSAqIC0xZTYpO1xuICB9KTtcbn07XG5cblNjcm9sbFRyaWdnZXIub2JzZXJ2ZSA9IGZ1bmN0aW9uICh2YXJzKSB7XG4gIHJldHVybiBuZXcgT2JzZXJ2ZXIodmFycyk7XG59O1xuXG5TY3JvbGxUcmlnZ2VyLm5vcm1hbGl6ZVNjcm9sbCA9IGZ1bmN0aW9uICh2YXJzKSB7XG4gIGlmICh0eXBlb2YgdmFycyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybiBfbm9ybWFsaXplcjtcbiAgfVxuXG4gIGlmICh2YXJzID09PSB0cnVlICYmIF9ub3JtYWxpemVyKSB7XG4gICAgcmV0dXJuIF9ub3JtYWxpemVyLmVuYWJsZSgpO1xuICB9XG5cbiAgaWYgKHZhcnMgPT09IGZhbHNlKSB7XG4gICAgX25vcm1hbGl6ZXIgJiYgX25vcm1hbGl6ZXIua2lsbCgpO1xuICAgIF9ub3JtYWxpemVyID0gdmFycztcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgbm9ybWFsaXplciA9IHZhcnMgaW5zdGFuY2VvZiBPYnNlcnZlciA/IHZhcnMgOiBfZ2V0U2Nyb2xsTm9ybWFsaXplcih2YXJzKTtcbiAgX25vcm1hbGl6ZXIgJiYgX25vcm1hbGl6ZXIudGFyZ2V0ID09PSBub3JtYWxpemVyLnRhcmdldCAmJiBfbm9ybWFsaXplci5raWxsKCk7XG4gIF9pc1ZpZXdwb3J0KG5vcm1hbGl6ZXIudGFyZ2V0KSAmJiAoX25vcm1hbGl6ZXIgPSBub3JtYWxpemVyKTtcbiAgcmV0dXJuIG5vcm1hbGl6ZXI7XG59O1xuXG5TY3JvbGxUcmlnZ2VyLmNvcmUgPSB7XG4gIC8vIHNtYWxsZXIgZmlsZSBzaXplIHdheSB0byBsZXZlcmFnZSBpbiBTY3JvbGxTbW9vdGhlciBhbmQgT2JzZXJ2ZXJcbiAgX2dldFZlbG9jaXR5UHJvcDogX2dldFZlbG9jaXR5UHJvcCxcbiAgX2lucHV0T2JzZXJ2ZXI6IF9pbnB1dE9ic2VydmVyLFxuICBfc2Nyb2xsZXJzOiBfc2Nyb2xsZXJzLFxuICBfcHJveGllczogX3Byb3hpZXMsXG4gIGJyaWRnZToge1xuICAgIC8vIHdoZW4gbm9ybWFsaXplU2Nyb2xsIHNldHMgdGhlIHNjcm9sbCBwb3NpdGlvbiAoc3MgPSBzZXRTY3JvbGwpXG4gICAgc3M6IGZ1bmN0aW9uIHNzKCkge1xuICAgICAgX2xhc3RTY3JvbGxUaW1lIHx8IF9kaXNwYXRjaChcInNjcm9sbFN0YXJ0XCIpO1xuICAgICAgX2xhc3RTY3JvbGxUaW1lID0gX2dldFRpbWUoKTtcbiAgICB9LFxuICAgIC8vIGEgd2F5IHRvIGdldCB0aGUgX3JlZnJlc2hpbmcgdmFsdWUgaW4gT2JzZXJ2ZXJcbiAgICByZWY6IGZ1bmN0aW9uIHJlZigpIHtcbiAgICAgIHJldHVybiBfcmVmcmVzaGluZztcbiAgICB9XG4gIH1cbn07XG5fZ2V0R1NBUCgpICYmIGdzYXAucmVnaXN0ZXJQbHVnaW4oU2Nyb2xsVHJpZ2dlcik7XG5leHBvcnQgeyBTY3JvbGxUcmlnZ2VyIGFzIGRlZmF1bHQgfTsiLCJpbXBvcnQgZ3NhcCBmcm9tIFwiZ3NhcFwiO1xuaW1wb3J0IHsgU2Nyb2xsVHJpZ2dlciB9IGZyb20gXCJnc2FwL2FsbFwiO1xuaW1wb3J0IHsgcmVtb3ZlQ2xhc3NlcyB9IGZyb20gXCIuLi91dGlscy91dGlsc1wiO1xuXG5nc2FwLnJlZ2lzdGVyUGx1Z2luKFNjcm9sbFRyaWdnZXIpO1xuXG5jb25zdCBtbSA9IGdzYXAubWF0Y2hNZWRpYSgpO1xuXG5leHBvcnQgY29uc3Qgc2V0VGh1bWJzQ2xhc3NlcyA9IChpZHgsIHRodW1icykgPT4ge1xuICByZW1vdmVDbGFzc2VzKHRodW1icywgXCJfaXMtYWN0aXZlXCIpO1xuICB0aHVtYnNbaWR4XSAmJiB0aHVtYnNbaWR4XS5jbGFzc0xpc3QuYWRkKFwiX2lzLWFjdGl2ZVwiKTtcbn07XG5cbmV4cG9ydCBjb25zdCBpbml0SXRlbUNhcmRDYXJvdXNlbCA9ICgpID0+IHtcbiAgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuaXRlbS1jYXJkX19zd2lwZXJcIikpIHtcbiAgICBtbS5hZGQoXCIobWluLXdpZHRoOiAxMDI0cHgpXCIsICgpID0+IHtcbiAgICAgIGNvbnN0IHRodW1icyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuaXRlbS1jYXJkX190aHVtYnMtc2xpZGVcIik7XG5cbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuaXRlbS1jYXJkX19zbGlkZVwiKS5mb3JFYWNoKChzbGlkZSwgaWR4KSA9PiB7XG4gICAgICAgIGdzYXAudGltZWxpbmUoe1xuICAgICAgICAgIHNjcm9sbFRyaWdnZXI6IHtcbiAgICAgICAgICAgIHRyaWdnZXI6IHNsaWRlLFxuICAgICAgICAgICAgc3RhcnQ6IFwidG9wIHRvcFwiLFxuICAgICAgICAgICAgZW5kOiBcImJvdHRvbSBib3R0b21cIixcbiAgICAgICAgICAgIG9uRW50ZXI6IChlKSA9PiB7XG4gICAgICAgICAgICAgIHNldFRodW1ic0NsYXNzZXMoaWR4LCB0aHVtYnMpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uRW50ZXJCYWNrOiAoZSkgPT4ge1xuICAgICAgICAgICAgICBzZXRUaHVtYnNDbGFzc2VzKGlkeCwgdGh1bWJzKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufTtcbiIsImV4cG9ydCBjb25zdCBzZXRTbGlkZUNvbnRlbnQgPSAoc2xpZGUpID0+IHtcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi50ZWFtX19uYW1lXCIpLmlubmVySFRNTCA9IHNsaWRlLmRhdGFzZXQubmFtZTtcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi50ZWFtX190ZXh0X3RlYW1cIikuaW5uZXJIVE1MID0gc2xpZGUuZGF0YXNldC50ZWFtO1xuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnRlYW1fX3RleHRfZGF0ZVwiKS5pbm5lckhUTUwgPSBzbGlkZS5kYXRhc2V0LmRhdGU7XG59O1xuXG4vKipcbiAqIHRvZ2dsZXMgYm9keSBsb2NrXG4gKiBAcGFyYW0ge251bWJlcn0gZGVsYXlcbiAqL1xuZXhwb3J0IGNvbnN0IGJvZHlMb2NrVG9nZ2xlID0gKGRlbGF5ID0gNTAwKSA9PiB7XG4gIGlmIChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKFwibG9ja1wiKSkge1xuICAgIGJvZHlVbmxvY2soMCk7XG4gIH0gZWxzZSB7XG4gICAgYm9keUxvY2soMCk7XG4gIH1cbn07XG4vKipcbiAqIHVubG9ja3MgYm9keVxuICogQHBhcmFtIHtudW1iZXJ9IGRlbGF5XG4gKi9cbmV4cG9ydCBjb25zdCBib2R5VW5sb2NrID0gKGRlbGF5ID0gNTAwKSA9PiB7XG4gIGlmICghZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5faXMtbG9ja2VkXCIpKSB7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcIl9sb2NrXCIpO1xuXG4gICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChcImJvZHlVbmxvY2tcIikpO1xuICAgIH0sIDApO1xuICB9XG59O1xuLyoqXG4gKiBsb2NrcyBib2R5XG4gKiBAcGFyYW0ge251bWJlcn0gZGVsYXlcbiAqL1xuZXhwb3J0IGNvbnN0IGJvZHlMb2NrID0gKGRlbGF5ID0gNTAwKSA9PiB7XG4gIGlmICghZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5faXMtbG9ja2VkXCIpKSB7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0LmFkZChcIl9sb2NrXCIpO1xuXG4gICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChcImJvZHlMb2NrXCIpKTtcbiAgICB9LCAwKTtcbiAgfVxufTtcblxuLyoqXG4gKiBjb252ZXJ0cyByZW0gdG8gcGl4ZWxzXG4gKiBAcGFyYW0ge251bWJlcn0gcmVtVmFsdWVcbiAqIEByZXR1cm5zIHN0cmluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gcmVtVG9QeChyZW1WYWx1ZSkge1xuICBjb25zdCBodG1sRm9udFNpemUgPSBwYXJzZUZsb2F0KFxuICAgIGdldENvbXB1dGVkU3R5bGUoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KS5mb250U2l6ZSxcbiAgKTtcblxuICBjb25zdCBweFZhbHVlID0gcmVtVmFsdWUgKiBodG1sRm9udFNpemU7XG5cbiAgcmV0dXJuIE1hdGgucm91bmQocHhWYWx1ZSkgKyBcInB4XCI7XG59XG5cbmV4cG9ydCBjb25zdCByZW1vdmVDbGFzc2VzID0gKGFycmF5LCBjbGFzc05hbWUpID0+IHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xuICAgIGFycmF5W2ldLmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTtcbiAgfVxufTtcbiIsIi8qIGxvY29tb3RpdmUtc2Nyb2xsIHY0LjEuMyB8IE1JVCBMaWNlbnNlIHwgaHR0cHM6Ly9naXRodWIuY29tL2xvY29tb3RpdmVtdGwvbG9jb21vdGl2ZS1zY3JvbGwgKi9cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTtcbiAgICBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTtcbiAgICB9KTtcbiAgICBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7XG4gIH1cblxuICByZXR1cm4ga2V5cztcbn1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZDIodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307XG5cbiAgICBpZiAoaSAlIDIpIHtcbiAgICAgIG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO1xuICB9XG5cbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgY29uc3RydWN0b3I6IHtcbiAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfVxuICB9KTtcbiAgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7XG59XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gIF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gICAgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTtcbiAgfTtcbiAgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTtcbn1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgby5fX3Byb3RvX18gPSBwO1xuICAgIHJldHVybiBvO1xuICB9O1xuXG4gIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7XG59XG5cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7XG4gIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTtcbiAgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTtcbiAgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTtcblxuICB0cnkge1xuICAgIERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uICgpIHt9KSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7XG4gIGlmIChzZWxmID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cblxuICByZXR1cm4gc2VsZjtcbn1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICBpZiAoY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHtcbiAgICByZXR1cm4gY2FsbDtcbiAgfVxuXG4gIHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpO1xufVxuXG5mdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkge1xuICB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTtcblxuICByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7XG4gICAgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLFxuICAgICAgICByZXN1bHQ7XG5cbiAgICBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkge1xuICAgICAgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjtcblxuICAgICAgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gX3N1cGVyUHJvcEJhc2Uob2JqZWN0LCBwcm9wZXJ0eSkge1xuICB3aGlsZSAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KSkge1xuICAgIG9iamVjdCA9IF9nZXRQcm90b3R5cGVPZihvYmplY3QpO1xuICAgIGlmIChvYmplY3QgPT09IG51bGwpIGJyZWFrO1xuICB9XG5cbiAgcmV0dXJuIG9iamVjdDtcbn1cblxuZnVuY3Rpb24gX2dldCh0YXJnZXQsIHByb3BlcnR5LCByZWNlaXZlcikge1xuICBpZiAodHlwZW9mIFJlZmxlY3QgIT09IFwidW5kZWZpbmVkXCIgJiYgUmVmbGVjdC5nZXQpIHtcbiAgICBfZ2V0ID0gUmVmbGVjdC5nZXQ7XG4gIH0gZWxzZSB7XG4gICAgX2dldCA9IGZ1bmN0aW9uIF9nZXQodGFyZ2V0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHtcbiAgICAgIHZhciBiYXNlID0gX3N1cGVyUHJvcEJhc2UodGFyZ2V0LCBwcm9wZXJ0eSk7XG5cbiAgICAgIGlmICghYmFzZSkgcmV0dXJuO1xuICAgICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGJhc2UsIHByb3BlcnR5KTtcblxuICAgICAgaWYgKGRlc2MuZ2V0KSB7XG4gICAgICAgIHJldHVybiBkZXNjLmdldC5jYWxsKHJlY2VpdmVyKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGRlc2MudmFsdWU7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBfZ2V0KHRhcmdldCwgcHJvcGVydHksIHJlY2VpdmVyIHx8IHRhcmdldCk7XG59XG5cbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkge1xuICByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpO1xufVxuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7XG4gIHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7XG59XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KGFycik7XG59XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjtcbn1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7XG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoaXRlcikpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpO1xufVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7XG4gIGlmICh0eXBlb2YgU3ltYm9sID09PSBcInVuZGVmaW5lZFwiIHx8ICEoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSkgcmV0dXJuO1xuICB2YXIgX2FyciA9IFtdO1xuICB2YXIgX24gPSB0cnVlO1xuICB2YXIgX2QgPSBmYWxzZTtcbiAgdmFyIF9lID0gdW5kZWZpbmVkO1xuXG4gIHRyeSB7XG4gICAgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkge1xuICAgICAgX2Fyci5wdXNoKF9zLnZhbHVlKTtcblxuICAgICAgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX2QgPSB0cnVlO1xuICAgIF9lID0gZXJyO1xuICB9IGZpbmFsbHkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChfZCkgdGhyb3cgX2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIF9hcnI7XG59XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHtcbiAgaWYgKCFvKSByZXR1cm47XG4gIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG4gIHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTtcbiAgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTtcbiAgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7XG4gIGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbn1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHtcbiAgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSBhcnIyW2ldID0gYXJyW2ldO1xuXG4gIHJldHVybiBhcnIyO1xufVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpO1xufVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpO1xufVxuXG52YXIgZGVmYXVsdHMgPSB7XG4gIGVsOiBkb2N1bWVudCxcbiAgbmFtZTogJ3Njcm9sbCcsXG4gIG9mZnNldDogWzAsIDBdLFxuICByZXBlYXQ6IGZhbHNlLFxuICBzbW9vdGg6IGZhbHNlLFxuICBpbml0UG9zaXRpb246IHtcbiAgICB4OiAwLFxuICAgIHk6IDBcbiAgfSxcbiAgZGlyZWN0aW9uOiAndmVydGljYWwnLFxuICBnZXN0dXJlRGlyZWN0aW9uOiAndmVydGljYWwnLFxuICByZWxvYWRPbkNvbnRleHRDaGFuZ2U6IGZhbHNlLFxuICBsZXJwOiAwLjEsXG4gIFwiY2xhc3NcIjogJ2lzLWludmlldycsXG4gIHNjcm9sbGJhckNvbnRhaW5lcjogZmFsc2UsXG4gIHNjcm9sbGJhckNsYXNzOiAnYy1zY3JvbGxiYXInLFxuICBzY3JvbGxpbmdDbGFzczogJ2hhcy1zY3JvbGwtc2Nyb2xsaW5nJyxcbiAgZHJhZ2dpbmdDbGFzczogJ2hhcy1zY3JvbGwtZHJhZ2dpbmcnLFxuICBzbW9vdGhDbGFzczogJ2hhcy1zY3JvbGwtc21vb3RoJyxcbiAgaW5pdENsYXNzOiAnaGFzLXNjcm9sbC1pbml0JyxcbiAgZ2V0U3BlZWQ6IGZhbHNlLFxuICBnZXREaXJlY3Rpb246IGZhbHNlLFxuICBzY3JvbGxGcm9tQW55d2hlcmU6IGZhbHNlLFxuICBtdWx0aXBsaWVyOiAxLFxuICBmaXJlZm94TXVsdGlwbGllcjogNTAsXG4gIHRvdWNoTXVsdGlwbGllcjogMixcbiAgcmVzZXROYXRpdmVTY3JvbGw6IHRydWUsXG4gIHRhYmxldDoge1xuICAgIHNtb290aDogZmFsc2UsXG4gICAgZGlyZWN0aW9uOiAndmVydGljYWwnLFxuICAgIGdlc3R1cmVEaXJlY3Rpb246ICd2ZXJ0aWNhbCcsXG4gICAgYnJlYWtwb2ludDogMTAyNFxuICB9LFxuICBzbWFydHBob25lOiB7XG4gICAgc21vb3RoOiBmYWxzZSxcbiAgICBkaXJlY3Rpb246ICd2ZXJ0aWNhbCcsXG4gICAgZ2VzdHVyZURpcmVjdGlvbjogJ3ZlcnRpY2FsJ1xuICB9XG59O1xuXG52YXIgX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBfZGVmYXVsdCgpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgX2RlZmF1bHQpO1xuXG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCBkZWZhdWx0cywgb3B0aW9ucyk7XG4gICAgdGhpcy5zbWFydHBob25lID0gZGVmYXVsdHMuc21hcnRwaG9uZTtcbiAgICBpZiAob3B0aW9ucy5zbWFydHBob25lKSBPYmplY3QuYXNzaWduKHRoaXMuc21hcnRwaG9uZSwgb3B0aW9ucy5zbWFydHBob25lKTtcbiAgICB0aGlzLnRhYmxldCA9IGRlZmF1bHRzLnRhYmxldDtcbiAgICBpZiAob3B0aW9ucy50YWJsZXQpIE9iamVjdC5hc3NpZ24odGhpcy50YWJsZXQsIG9wdGlvbnMudGFibGV0KTtcbiAgICB0aGlzLm5hbWVzcGFjZSA9ICdsb2NvbW90aXZlJztcbiAgICB0aGlzLmh0bWwgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgdGhpcy53aW5kb3dIZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgdGhpcy53aW5kb3dXaWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuICAgIHRoaXMud2luZG93TWlkZGxlID0ge1xuICAgICAgeDogdGhpcy53aW5kb3dXaWR0aCAvIDIsXG4gICAgICB5OiB0aGlzLndpbmRvd0hlaWdodCAvIDJcbiAgICB9O1xuICAgIHRoaXMuZWxzID0ge307XG4gICAgdGhpcy5jdXJyZW50RWxlbWVudHMgPSB7fTtcbiAgICB0aGlzLmxpc3RlbmVycyA9IHt9O1xuICAgIHRoaXMuaGFzU2Nyb2xsVGlja2luZyA9IGZhbHNlO1xuICAgIHRoaXMuaGFzQ2FsbEV2ZW50U2V0ID0gZmFsc2U7XG4gICAgdGhpcy5jaGVja1Njcm9sbCA9IHRoaXMuY2hlY2tTY3JvbGwuYmluZCh0aGlzKTtcbiAgICB0aGlzLmNoZWNrUmVzaXplID0gdGhpcy5jaGVja1Jlc2l6ZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuY2hlY2tFdmVudCA9IHRoaXMuY2hlY2tFdmVudC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuaW5zdGFuY2UgPSB7XG4gICAgICBzY3JvbGw6IHtcbiAgICAgICAgeDogMCxcbiAgICAgICAgeTogMFxuICAgICAgfSxcbiAgICAgIGxpbWl0OiB7XG4gICAgICAgIHg6IHRoaXMuaHRtbC5vZmZzZXRXaWR0aCxcbiAgICAgICAgeTogdGhpcy5odG1sLm9mZnNldEhlaWdodFxuICAgICAgfSxcbiAgICAgIGN1cnJlbnRFbGVtZW50czogdGhpcy5jdXJyZW50RWxlbWVudHNcbiAgICB9O1xuXG4gICAgaWYgKHRoaXMuaXNNb2JpbGUpIHtcbiAgICAgIGlmICh0aGlzLmlzVGFibGV0KSB7XG4gICAgICAgIHRoaXMuY29udGV4dCA9ICd0YWJsZXQnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gJ3NtYXJ0cGhvbmUnO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNvbnRleHQgPSAnZGVza3RvcCc7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaXNNb2JpbGUpIHRoaXMuZGlyZWN0aW9uID0gdGhpc1t0aGlzLmNvbnRleHRdLmRpcmVjdGlvbjtcblxuICAgIGlmICh0aGlzLmRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnKSB7XG4gICAgICB0aGlzLmRpcmVjdGlvbkF4aXMgPSAneCc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZGlyZWN0aW9uQXhpcyA9ICd5JztcbiAgICB9XG5cbiAgICBpZiAodGhpcy5nZXREaXJlY3Rpb24pIHtcbiAgICAgIHRoaXMuaW5zdGFuY2UuZGlyZWN0aW9uID0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5nZXREaXJlY3Rpb24pIHtcbiAgICAgIHRoaXMuaW5zdGFuY2Uuc3BlZWQgPSAwO1xuICAgIH1cblxuICAgIHRoaXMuaHRtbC5jbGFzc0xpc3QuYWRkKHRoaXMuaW5pdENsYXNzKTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5jaGVja1Jlc2l6ZSwgZmFsc2UpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKF9kZWZhdWx0LCBbe1xuICAgIGtleTogXCJpbml0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICB0aGlzLmluaXRFdmVudHMoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY2hlY2tTY3JvbGxcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2hlY2tTY3JvbGwoKSB7XG4gICAgICB0aGlzLmRpc3BhdGNoU2Nyb2xsKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNoZWNrUmVzaXplXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNoZWNrUmVzaXplKCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgaWYgKCF0aGlzLnJlc2l6ZVRpY2spIHtcbiAgICAgICAgdGhpcy5yZXNpemVUaWNrID0gdHJ1ZTtcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpcy5yZXNpemUoKTtcblxuICAgICAgICAgIF90aGlzLnJlc2l6ZVRpY2sgPSBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlc2l6ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXNpemUoKSB7fVxuICB9LCB7XG4gICAga2V5OiBcImNoZWNrQ29udGV4dFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjaGVja0NvbnRleHQoKSB7XG4gICAgICBpZiAoIXRoaXMucmVsb2FkT25Db250ZXh0Q2hhbmdlKSByZXR1cm47XG4gICAgICB0aGlzLmlzTW9iaWxlID0gL0FuZHJvaWR8aVBob25lfGlQYWR8aVBvZHxCbGFja0JlcnJ5fElFTW9iaWxlfE9wZXJhIE1pbmkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpIHx8IG5hdmlnYXRvci5wbGF0Zm9ybSA9PT0gJ01hY0ludGVsJyAmJiBuYXZpZ2F0b3IubWF4VG91Y2hQb2ludHMgPiAxIHx8IHRoaXMud2luZG93V2lkdGggPCB0aGlzLnRhYmxldC5icmVha3BvaW50O1xuICAgICAgdGhpcy5pc1RhYmxldCA9IHRoaXMuaXNNb2JpbGUgJiYgdGhpcy53aW5kb3dXaWR0aCA+PSB0aGlzLnRhYmxldC5icmVha3BvaW50O1xuICAgICAgdmFyIG9sZENvbnRleHQgPSB0aGlzLmNvbnRleHQ7XG5cbiAgICAgIGlmICh0aGlzLmlzTW9iaWxlKSB7XG4gICAgICAgIGlmICh0aGlzLmlzVGFibGV0KSB7XG4gICAgICAgICAgdGhpcy5jb250ZXh0ID0gJ3RhYmxldCc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5jb250ZXh0ID0gJ3NtYXJ0cGhvbmUnO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNvbnRleHQgPSAnZGVza3RvcCc7XG4gICAgICB9XG5cbiAgICAgIGlmIChvbGRDb250ZXh0ICE9IHRoaXMuY29udGV4dCkge1xuICAgICAgICB2YXIgb2xkU21vb3RoID0gb2xkQ29udGV4dCA9PSAnZGVza3RvcCcgPyB0aGlzLnNtb290aCA6IHRoaXNbb2xkQ29udGV4dF0uc21vb3RoO1xuICAgICAgICB2YXIgbmV3U21vb3RoID0gdGhpcy5jb250ZXh0ID09ICdkZXNrdG9wJyA/IHRoaXMuc21vb3RoIDogdGhpc1t0aGlzLmNvbnRleHRdLnNtb290aDtcbiAgICAgICAgaWYgKG9sZFNtb290aCAhPSBuZXdTbW9vdGgpIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiaW5pdEV2ZW50c1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0RXZlbnRzKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHRoaXMuc2Nyb2xsVG9FbHMgPSB0aGlzLmVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbZGF0YS1cIi5jb25jYXQodGhpcy5uYW1lLCBcIi10b11cIikpO1xuICAgICAgdGhpcy5zZXRTY3JvbGxUbyA9IHRoaXMuc2V0U2Nyb2xsVG8uYmluZCh0aGlzKTtcbiAgICAgIHRoaXMuc2Nyb2xsVG9FbHMuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBfdGhpczIuc2V0U2Nyb2xsVG8sIGZhbHNlKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZXRTY3JvbGxUb1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRTY3JvbGxUbyhldmVudCkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRoaXMuc2Nyb2xsVG8oZXZlbnQuY3VycmVudFRhcmdldC5nZXRBdHRyaWJ1dGUoXCJkYXRhLVwiLmNvbmNhdCh0aGlzLm5hbWUsIFwiLWhyZWZcIikpIHx8IGV2ZW50LmN1cnJlbnRUYXJnZXQuZ2V0QXR0cmlidXRlKCdocmVmJyksIHtcbiAgICAgICAgb2Zmc2V0OiBldmVudC5jdXJyZW50VGFyZ2V0LmdldEF0dHJpYnV0ZShcImRhdGEtXCIuY29uY2F0KHRoaXMubmFtZSwgXCItb2Zmc2V0XCIpKVxuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImFkZEVsZW1lbnRzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZEVsZW1lbnRzKCkge31cbiAgfSwge1xuICAgIGtleTogXCJkZXRlY3RFbGVtZW50c1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZXRlY3RFbGVtZW50cyhoYXNDYWxsRXZlbnRTZXQpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICB2YXIgc2Nyb2xsVG9wID0gdGhpcy5pbnN0YW5jZS5zY3JvbGwueTtcbiAgICAgIHZhciBzY3JvbGxCb3R0b20gPSBzY3JvbGxUb3AgKyB0aGlzLndpbmRvd0hlaWdodDtcbiAgICAgIHZhciBzY3JvbGxMZWZ0ID0gdGhpcy5pbnN0YW5jZS5zY3JvbGwueDtcbiAgICAgIHZhciBzY3JvbGxSaWdodCA9IHNjcm9sbExlZnQgKyB0aGlzLndpbmRvd1dpZHRoO1xuICAgICAgT2JqZWN0LmVudHJpZXModGhpcy5lbHMpLmZvckVhY2goZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgICAgdmFyIF9yZWYyID0gX3NsaWNlZFRvQXJyYXkoX3JlZiwgMiksXG4gICAgICAgICAgICBpID0gX3JlZjJbMF0sXG4gICAgICAgICAgICBlbCA9IF9yZWYyWzFdO1xuXG4gICAgICAgIGlmIChlbCAmJiAoIWVsLmluVmlldyB8fCBoYXNDYWxsRXZlbnRTZXQpKSB7XG4gICAgICAgICAgaWYgKF90aGlzMy5kaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJykge1xuICAgICAgICAgICAgaWYgKHNjcm9sbFJpZ2h0ID49IGVsLmxlZnQgJiYgc2Nyb2xsTGVmdCA8IGVsLnJpZ2h0KSB7XG4gICAgICAgICAgICAgIF90aGlzMy5zZXRJblZpZXcoZWwsIGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoc2Nyb2xsQm90dG9tID49IGVsLnRvcCAmJiBzY3JvbGxUb3AgPCBlbC5ib3R0b20pIHtcbiAgICAgICAgICAgICAgX3RoaXMzLnNldEluVmlldyhlbCwgaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVsICYmIGVsLmluVmlldykge1xuICAgICAgICAgIGlmIChfdGhpczMuZGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgICAgICAgIHZhciB3aWR0aCA9IGVsLnJpZ2h0IC0gZWwubGVmdDtcbiAgICAgICAgICAgIGVsLnByb2dyZXNzID0gKF90aGlzMy5pbnN0YW5jZS5zY3JvbGwueCAtIChlbC5sZWZ0IC0gX3RoaXMzLndpbmRvd1dpZHRoKSkgLyAod2lkdGggKyBfdGhpczMud2luZG93V2lkdGgpO1xuXG4gICAgICAgICAgICBpZiAoc2Nyb2xsUmlnaHQgPCBlbC5sZWZ0IHx8IHNjcm9sbExlZnQgPiBlbC5yaWdodCkge1xuICAgICAgICAgICAgICBfdGhpczMuc2V0T3V0T2ZWaWV3KGVsLCBpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGhlaWdodCA9IGVsLmJvdHRvbSAtIGVsLnRvcDtcbiAgICAgICAgICAgIGVsLnByb2dyZXNzID0gKF90aGlzMy5pbnN0YW5jZS5zY3JvbGwueSAtIChlbC50b3AgLSBfdGhpczMud2luZG93SGVpZ2h0KSkgLyAoaGVpZ2h0ICsgX3RoaXMzLndpbmRvd0hlaWdodCk7XG5cbiAgICAgICAgICAgIGlmIChzY3JvbGxCb3R0b20gPCBlbC50b3AgfHwgc2Nyb2xsVG9wID4gZWwuYm90dG9tKSB7XG4gICAgICAgICAgICAgIF90aGlzMy5zZXRPdXRPZlZpZXcoZWwsIGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7IC8vIHRoaXMuZWxzID0gdGhpcy5lbHMuZmlsdGVyKChjdXJyZW50LCBpKSA9PiB7XG4gICAgICAvLyAgICAgcmV0dXJuIGN1cnJlbnQgIT09IG51bGw7XG4gICAgICAvLyB9KTtcblxuICAgICAgdGhpcy5oYXNTY3JvbGxUaWNraW5nID0gZmFsc2U7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNldEluVmlld1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRJblZpZXcoY3VycmVudCwgaSkge1xuICAgICAgdGhpcy5lbHNbaV0uaW5WaWV3ID0gdHJ1ZTtcbiAgICAgIGN1cnJlbnQuZWwuY2xhc3NMaXN0LmFkZChjdXJyZW50W1wiY2xhc3NcIl0pO1xuICAgICAgdGhpcy5jdXJyZW50RWxlbWVudHNbaV0gPSBjdXJyZW50O1xuXG4gICAgICBpZiAoY3VycmVudC5jYWxsICYmIHRoaXMuaGFzQ2FsbEV2ZW50U2V0KSB7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hDYWxsKGN1cnJlbnQsICdlbnRlcicpO1xuXG4gICAgICAgIGlmICghY3VycmVudC5yZXBlYXQpIHtcbiAgICAgICAgICB0aGlzLmVsc1tpXS5jYWxsID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH0gLy8gaWYgKCFjdXJyZW50LnJlcGVhdCAmJiAhY3VycmVudC5zcGVlZCAmJiAhY3VycmVudC5zdGlja3kpIHtcbiAgICAgIC8vICAgICBpZiAoIWN1cnJlbnQuY2FsbCB8fCBjdXJyZW50LmNhbGwgJiYgdGhpcy5oYXNDYWxsRXZlbnRTZXQpIHtcbiAgICAgIC8vICAgICAgICB0aGlzLmVsc1tpXSA9IG51bGxcbiAgICAgIC8vICAgICB9XG4gICAgICAvLyB9XG5cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2V0T3V0T2ZWaWV3XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldE91dE9mVmlldyhjdXJyZW50LCBpKSB7XG4gICAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgICAgLy8gaWYgKGN1cnJlbnQucmVwZWF0IHx8IGN1cnJlbnQuc3BlZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5lbHNbaV0uaW5WaWV3ID0gZmFsc2U7IC8vIH1cblxuICAgICAgT2JqZWN0LmtleXModGhpcy5jdXJyZW50RWxlbWVudHMpLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgIGVsID09PSBpICYmIGRlbGV0ZSBfdGhpczQuY3VycmVudEVsZW1lbnRzW2VsXTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoY3VycmVudC5jYWxsICYmIHRoaXMuaGFzQ2FsbEV2ZW50U2V0KSB7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hDYWxsKGN1cnJlbnQsICdleGl0Jyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjdXJyZW50LnJlcGVhdCkge1xuICAgICAgICBjdXJyZW50LmVsLmNsYXNzTGlzdC5yZW1vdmUoY3VycmVudFtcImNsYXNzXCJdKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZGlzcGF0Y2hDYWxsXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRpc3BhdGNoQ2FsbChjdXJyZW50LCB3YXkpIHtcbiAgICAgIHRoaXMuY2FsbFdheSA9IHdheTtcbiAgICAgIHRoaXMuY2FsbFZhbHVlID0gY3VycmVudC5jYWxsLnNwbGl0KCcsJykubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJldHVybiBpdGVtLnRyaW0oKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5jYWxsT2JqID0gY3VycmVudDtcbiAgICAgIGlmICh0aGlzLmNhbGxWYWx1ZS5sZW5ndGggPT0gMSkgdGhpcy5jYWxsVmFsdWUgPSB0aGlzLmNhbGxWYWx1ZVswXTtcbiAgICAgIHZhciBjYWxsRXZlbnQgPSBuZXcgRXZlbnQodGhpcy5uYW1lc3BhY2UgKyAnY2FsbCcpO1xuICAgICAgdGhpcy5lbC5kaXNwYXRjaEV2ZW50KGNhbGxFdmVudCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImRpc3BhdGNoU2Nyb2xsXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRpc3BhdGNoU2Nyb2xsKCkge1xuICAgICAgdmFyIHNjcm9sbEV2ZW50ID0gbmV3IEV2ZW50KHRoaXMubmFtZXNwYWNlICsgJ3Njcm9sbCcpO1xuICAgICAgdGhpcy5lbC5kaXNwYXRjaEV2ZW50KHNjcm9sbEV2ZW50KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2V0RXZlbnRzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldEV2ZW50cyhldmVudCwgZnVuYykge1xuICAgICAgaWYgKCF0aGlzLmxpc3RlbmVyc1tldmVudF0pIHtcbiAgICAgICAgdGhpcy5saXN0ZW5lcnNbZXZlbnRdID0gW107XG4gICAgICB9XG5cbiAgICAgIHZhciBsaXN0ID0gdGhpcy5saXN0ZW5lcnNbZXZlbnRdO1xuICAgICAgbGlzdC5wdXNoKGZ1bmMpO1xuXG4gICAgICBpZiAobGlzdC5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgdGhpcy5lbC5hZGRFdmVudExpc3RlbmVyKHRoaXMubmFtZXNwYWNlICsgZXZlbnQsIHRoaXMuY2hlY2tFdmVudCwgZmFsc2UpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZXZlbnQgPT09ICdjYWxsJykge1xuICAgICAgICB0aGlzLmhhc0NhbGxFdmVudFNldCA9IHRydWU7XG4gICAgICAgIHRoaXMuZGV0ZWN0RWxlbWVudHModHJ1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInVuc2V0RXZlbnRzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVuc2V0RXZlbnRzKGV2ZW50LCBmdW5jKSB7XG4gICAgICBpZiAoIXRoaXMubGlzdGVuZXJzW2V2ZW50XSkgcmV0dXJuO1xuICAgICAgdmFyIGxpc3QgPSB0aGlzLmxpc3RlbmVyc1tldmVudF07XG4gICAgICB2YXIgaW5kZXggPSBsaXN0LmluZGV4T2YoZnVuYyk7XG4gICAgICBpZiAoaW5kZXggPCAwKSByZXR1cm47XG4gICAgICBsaXN0LnNwbGljZShpbmRleCwgMSk7XG5cbiAgICAgIGlmIChsaXN0LmluZGV4ID09PSAwKSB7XG4gICAgICAgIHRoaXMuZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcih0aGlzLm5hbWVzcGFjZSArIGV2ZW50LCB0aGlzLmNoZWNrRXZlbnQsIGZhbHNlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY2hlY2tFdmVudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjaGVja0V2ZW50KGV2ZW50KSB7XG4gICAgICB2YXIgX3RoaXM1ID0gdGhpcztcblxuICAgICAgdmFyIG5hbWUgPSBldmVudC50eXBlLnJlcGxhY2UodGhpcy5uYW1lc3BhY2UsICcnKTtcbiAgICAgIHZhciBsaXN0ID0gdGhpcy5saXN0ZW5lcnNbbmFtZV07XG4gICAgICBpZiAoIWxpc3QgfHwgbGlzdC5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICAgIGxpc3QuZm9yRWFjaChmdW5jdGlvbiAoZnVuYykge1xuICAgICAgICBzd2l0Y2ggKG5hbWUpIHtcbiAgICAgICAgICBjYXNlICdzY3JvbGwnOlxuICAgICAgICAgICAgcmV0dXJuIGZ1bmMoX3RoaXM1Lmluc3RhbmNlKTtcblxuICAgICAgICAgIGNhc2UgJ2NhbGwnOlxuICAgICAgICAgICAgcmV0dXJuIGZ1bmMoX3RoaXM1LmNhbGxWYWx1ZSwgX3RoaXM1LmNhbGxXYXksIF90aGlzNS5jYWxsT2JqKTtcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gZnVuYygpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic3RhcnRTY3JvbGxcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3RhcnRTY3JvbGwoKSB7fVxuICB9LCB7XG4gICAga2V5OiBcInN0b3BTY3JvbGxcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3RvcFNjcm9sbCgpIHt9XG4gIH0sIHtcbiAgICBrZXk6IFwic2V0U2Nyb2xsXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFNjcm9sbCh4LCB5KSB7XG4gICAgICB0aGlzLmluc3RhbmNlLnNjcm9sbCA9IHtcbiAgICAgICAgeDogMCxcbiAgICAgICAgeTogMFxuICAgICAgfTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZGVzdHJveVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgdmFyIF90aGlzNiA9IHRoaXM7XG5cbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLmNoZWNrUmVzaXplLCBmYWxzZSk7XG4gICAgICBPYmplY3Qua2V5cyh0aGlzLmxpc3RlbmVycykuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgX3RoaXM2LmVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoX3RoaXM2Lm5hbWVzcGFjZSArIGV2ZW50LCBfdGhpczYuY2hlY2tFdmVudCwgZmFsc2UpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLmxpc3RlbmVycyA9IHt9O1xuICAgICAgdGhpcy5zY3JvbGxUb0Vscy5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIF90aGlzNi5zZXRTY3JvbGxUbywgZmFsc2UpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLmh0bWwuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLmluaXRDbGFzcyk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIF9kZWZhdWx0O1xufSgpO1xuXG52YXIgY29tbW9uanNHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWxUaGlzIDogdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB7fTtcblxuZnVuY3Rpb24gY3JlYXRlQ29tbW9uanNNb2R1bGUoZm4sIG1vZHVsZSkge1xuXHRyZXR1cm4gbW9kdWxlID0geyBleHBvcnRzOiB7fSB9LCBmbihtb2R1bGUsIG1vZHVsZS5leHBvcnRzKSwgbW9kdWxlLmV4cG9ydHM7XG59XG5cbnZhciBzbW9vdGhzY3JvbGwgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7XG4vKiBzbW9vdGhzY3JvbGwgdjAuNC40IC0gMjAxOSAtIER1c3RhbiBLYXN0ZW4sIEplcmVtaWFzIE1lbmljaGVsbGkgLSBNSVQgTGljZW5zZSAqL1xuKGZ1bmN0aW9uICgpIHtcblxuICAvLyBwb2x5ZmlsbFxuICBmdW5jdGlvbiBwb2x5ZmlsbCgpIHtcbiAgICAvLyBhbGlhc2VzXG4gICAgdmFyIHcgPSB3aW5kb3c7XG4gICAgdmFyIGQgPSBkb2N1bWVudDtcblxuICAgIC8vIHJldHVybiBpZiBzY3JvbGwgYmVoYXZpb3IgaXMgc3VwcG9ydGVkIGFuZCBwb2x5ZmlsbCBpcyBub3QgZm9yY2VkXG4gICAgaWYgKFxuICAgICAgJ3Njcm9sbEJlaGF2aW9yJyBpbiBkLmRvY3VtZW50RWxlbWVudC5zdHlsZSAmJlxuICAgICAgdy5fX2ZvcmNlU21vb3RoU2Nyb2xsUG9seWZpbGxfXyAhPT0gdHJ1ZVxuICAgICkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGdsb2JhbHNcbiAgICB2YXIgRWxlbWVudCA9IHcuSFRNTEVsZW1lbnQgfHwgdy5FbGVtZW50O1xuICAgIHZhciBTQ1JPTExfVElNRSA9IDQ2ODtcblxuICAgIC8vIG9iamVjdCBnYXRoZXJpbmcgb3JpZ2luYWwgc2Nyb2xsIG1ldGhvZHNcbiAgICB2YXIgb3JpZ2luYWwgPSB7XG4gICAgICBzY3JvbGw6IHcuc2Nyb2xsIHx8IHcuc2Nyb2xsVG8sXG4gICAgICBzY3JvbGxCeTogdy5zY3JvbGxCeSxcbiAgICAgIGVsZW1lbnRTY3JvbGw6IEVsZW1lbnQucHJvdG90eXBlLnNjcm9sbCB8fCBzY3JvbGxFbGVtZW50LFxuICAgICAgc2Nyb2xsSW50b1ZpZXc6IEVsZW1lbnQucHJvdG90eXBlLnNjcm9sbEludG9WaWV3XG4gICAgfTtcblxuICAgIC8vIGRlZmluZSB0aW1pbmcgbWV0aG9kXG4gICAgdmFyIG5vdyA9XG4gICAgICB3LnBlcmZvcm1hbmNlICYmIHcucGVyZm9ybWFuY2Uubm93XG4gICAgICAgID8gdy5wZXJmb3JtYW5jZS5ub3cuYmluZCh3LnBlcmZvcm1hbmNlKVxuICAgICAgICA6IERhdGUubm93O1xuXG4gICAgLyoqXG4gICAgICogaW5kaWNhdGVzIGlmIGEgdGhlIGN1cnJlbnQgYnJvd3NlciBpcyBtYWRlIGJ5IE1pY3Jvc29mdFxuICAgICAqIEBtZXRob2QgaXNNaWNyb3NvZnRCcm93c2VyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHVzZXJBZ2VudFxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTWljcm9zb2Z0QnJvd3Nlcih1c2VyQWdlbnQpIHtcbiAgICAgIHZhciB1c2VyQWdlbnRQYXR0ZXJucyA9IFsnTVNJRSAnLCAnVHJpZGVudC8nLCAnRWRnZS8nXTtcblxuICAgICAgcmV0dXJuIG5ldyBSZWdFeHAodXNlckFnZW50UGF0dGVybnMuam9pbignfCcpKS50ZXN0KHVzZXJBZ2VudCk7XG4gICAgfVxuXG4gICAgLypcbiAgICAgKiBJRSBoYXMgcm91bmRpbmcgYnVnIHJvdW5kaW5nIGRvd24gY2xpZW50SGVpZ2h0IGFuZCBjbGllbnRXaWR0aCBhbmRcbiAgICAgKiByb3VuZGluZyB1cCBzY3JvbGxIZWlnaHQgYW5kIHNjcm9sbFdpZHRoIGNhdXNpbmcgZmFsc2UgcG9zaXRpdmVzXG4gICAgICogb24gaGFzU2Nyb2xsYWJsZVNwYWNlXG4gICAgICovXG4gICAgdmFyIFJPVU5ESU5HX1RPTEVSQU5DRSA9IGlzTWljcm9zb2Z0QnJvd3Nlcih3Lm5hdmlnYXRvci51c2VyQWdlbnQpID8gMSA6IDA7XG5cbiAgICAvKipcbiAgICAgKiBjaGFuZ2VzIHNjcm9sbCBwb3NpdGlvbiBpbnNpZGUgYW4gZWxlbWVudFxuICAgICAqIEBtZXRob2Qgc2Nyb2xsRWxlbWVudFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB4XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHlcbiAgICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNjcm9sbEVsZW1lbnQoeCwgeSkge1xuICAgICAgdGhpcy5zY3JvbGxMZWZ0ID0geDtcbiAgICAgIHRoaXMuc2Nyb2xsVG9wID0geTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiByZXR1cm5zIHJlc3VsdCBvZiBhcHBseWluZyBlYXNlIG1hdGggZnVuY3Rpb24gdG8gYSBudW1iZXJcbiAgICAgKiBAbWV0aG9kIGVhc2VcbiAgICAgKiBAcGFyYW0ge051bWJlcn0ga1xuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgICovXG4gICAgZnVuY3Rpb24gZWFzZShrKSB7XG4gICAgICByZXR1cm4gMC41ICogKDEgLSBNYXRoLmNvcyhNYXRoLlBJICogaykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGluZGljYXRlcyBpZiBhIHNtb290aCBiZWhhdmlvciBzaG91bGQgYmUgYXBwbGllZFxuICAgICAqIEBtZXRob2Qgc2hvdWxkQmFpbE91dFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfE9iamVjdH0gZmlyc3RBcmdcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzaG91bGRCYWlsT3V0KGZpcnN0QXJnKSB7XG4gICAgICBpZiAoXG4gICAgICAgIGZpcnN0QXJnID09PSBudWxsIHx8XG4gICAgICAgIHR5cGVvZiBmaXJzdEFyZyAhPT0gJ29iamVjdCcgfHxcbiAgICAgICAgZmlyc3RBcmcuYmVoYXZpb3IgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICBmaXJzdEFyZy5iZWhhdmlvciA9PT0gJ2F1dG8nIHx8XG4gICAgICAgIGZpcnN0QXJnLmJlaGF2aW9yID09PSAnaW5zdGFudCdcbiAgICAgICkge1xuICAgICAgICAvLyBmaXJzdCBhcmd1bWVudCBpcyBub3QgYW4gb2JqZWN0L251bGxcbiAgICAgICAgLy8gb3IgYmVoYXZpb3IgaXMgYXV0bywgaW5zdGFudCBvciB1bmRlZmluZWRcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgZmlyc3RBcmcgPT09ICdvYmplY3QnICYmIGZpcnN0QXJnLmJlaGF2aW9yID09PSAnc21vb3RoJykge1xuICAgICAgICAvLyBmaXJzdCBhcmd1bWVudCBpcyBhbiBvYmplY3QgYW5kIGJlaGF2aW9yIGlzIHNtb290aFxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIC8vIHRocm93IGVycm9yIHdoZW4gYmVoYXZpb3IgaXMgbm90IHN1cHBvcnRlZFxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgJ2JlaGF2aW9yIG1lbWJlciBvZiBTY3JvbGxPcHRpb25zICcgK1xuICAgICAgICAgIGZpcnN0QXJnLmJlaGF2aW9yICtcbiAgICAgICAgICAnIGlzIG5vdCBhIHZhbGlkIHZhbHVlIGZvciBlbnVtZXJhdGlvbiBTY3JvbGxCZWhhdmlvci4nXG4gICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGluZGljYXRlcyBpZiBhbiBlbGVtZW50IGhhcyBzY3JvbGxhYmxlIHNwYWNlIGluIHRoZSBwcm92aWRlZCBheGlzXG4gICAgICogQG1ldGhvZCBoYXNTY3JvbGxhYmxlU3BhY2VcbiAgICAgKiBAcGFyYW0ge05vZGV9IGVsXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGF4aXNcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNTY3JvbGxhYmxlU3BhY2UoZWwsIGF4aXMpIHtcbiAgICAgIGlmIChheGlzID09PSAnWScpIHtcbiAgICAgICAgcmV0dXJuIGVsLmNsaWVudEhlaWdodCArIFJPVU5ESU5HX1RPTEVSQU5DRSA8IGVsLnNjcm9sbEhlaWdodDtcbiAgICAgIH1cblxuICAgICAgaWYgKGF4aXMgPT09ICdYJykge1xuICAgICAgICByZXR1cm4gZWwuY2xpZW50V2lkdGggKyBST1VORElOR19UT0xFUkFOQ0UgPCBlbC5zY3JvbGxXaWR0aDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBpbmRpY2F0ZXMgaWYgYW4gZWxlbWVudCBoYXMgYSBzY3JvbGxhYmxlIG92ZXJmbG93IHByb3BlcnR5IGluIHRoZSBheGlzXG4gICAgICogQG1ldGhvZCBjYW5PdmVyZmxvd1xuICAgICAqIEBwYXJhbSB7Tm9kZX0gZWxcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gYXhpc1xuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhbk92ZXJmbG93KGVsLCBheGlzKSB7XG4gICAgICB2YXIgb3ZlcmZsb3dWYWx1ZSA9IHcuZ2V0Q29tcHV0ZWRTdHlsZShlbCwgbnVsbClbJ292ZXJmbG93JyArIGF4aXNdO1xuXG4gICAgICByZXR1cm4gb3ZlcmZsb3dWYWx1ZSA9PT0gJ2F1dG8nIHx8IG92ZXJmbG93VmFsdWUgPT09ICdzY3JvbGwnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGluZGljYXRlcyBpZiBhbiBlbGVtZW50IGNhbiBiZSBzY3JvbGxlZCBpbiBlaXRoZXIgYXhpc1xuICAgICAqIEBtZXRob2QgaXNTY3JvbGxhYmxlXG4gICAgICogQHBhcmFtIHtOb2RlfSBlbFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBheGlzXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59XG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNTY3JvbGxhYmxlKGVsKSB7XG4gICAgICB2YXIgaXNTY3JvbGxhYmxlWSA9IGhhc1Njcm9sbGFibGVTcGFjZShlbCwgJ1knKSAmJiBjYW5PdmVyZmxvdyhlbCwgJ1knKTtcbiAgICAgIHZhciBpc1Njcm9sbGFibGVYID0gaGFzU2Nyb2xsYWJsZVNwYWNlKGVsLCAnWCcpICYmIGNhbk92ZXJmbG93KGVsLCAnWCcpO1xuXG4gICAgICByZXR1cm4gaXNTY3JvbGxhYmxlWSB8fCBpc1Njcm9sbGFibGVYO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGZpbmRzIHNjcm9sbGFibGUgcGFyZW50IG9mIGFuIGVsZW1lbnRcbiAgICAgKiBAbWV0aG9kIGZpbmRTY3JvbGxhYmxlUGFyZW50XG4gICAgICogQHBhcmFtIHtOb2RlfSBlbFxuICAgICAqIEByZXR1cm5zIHtOb2RlfSBlbFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbmRTY3JvbGxhYmxlUGFyZW50KGVsKSB7XG4gICAgICB3aGlsZSAoZWwgIT09IGQuYm9keSAmJiBpc1Njcm9sbGFibGUoZWwpID09PSBmYWxzZSkge1xuICAgICAgICBlbCA9IGVsLnBhcmVudE5vZGUgfHwgZWwuaG9zdDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGVsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHNlbGYgaW52b2tlZCBmdW5jdGlvbiB0aGF0LCBnaXZlbiBhIGNvbnRleHQsIHN0ZXBzIHRocm91Z2ggc2Nyb2xsaW5nXG4gICAgICogQG1ldGhvZCBzdGVwXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGNvbnRleHRcbiAgICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0ZXAoY29udGV4dCkge1xuICAgICAgdmFyIHRpbWUgPSBub3coKTtcbiAgICAgIHZhciB2YWx1ZTtcbiAgICAgIHZhciBjdXJyZW50WDtcbiAgICAgIHZhciBjdXJyZW50WTtcbiAgICAgIHZhciBlbGFwc2VkID0gKHRpbWUgLSBjb250ZXh0LnN0YXJ0VGltZSkgLyBTQ1JPTExfVElNRTtcblxuICAgICAgLy8gYXZvaWQgZWxhcHNlZCB0aW1lcyBoaWdoZXIgdGhhbiBvbmVcbiAgICAgIGVsYXBzZWQgPSBlbGFwc2VkID4gMSA/IDEgOiBlbGFwc2VkO1xuXG4gICAgICAvLyBhcHBseSBlYXNpbmcgdG8gZWxhcHNlZCB0aW1lXG4gICAgICB2YWx1ZSA9IGVhc2UoZWxhcHNlZCk7XG5cbiAgICAgIGN1cnJlbnRYID0gY29udGV4dC5zdGFydFggKyAoY29udGV4dC54IC0gY29udGV4dC5zdGFydFgpICogdmFsdWU7XG4gICAgICBjdXJyZW50WSA9IGNvbnRleHQuc3RhcnRZICsgKGNvbnRleHQueSAtIGNvbnRleHQuc3RhcnRZKSAqIHZhbHVlO1xuXG4gICAgICBjb250ZXh0Lm1ldGhvZC5jYWxsKGNvbnRleHQuc2Nyb2xsYWJsZSwgY3VycmVudFgsIGN1cnJlbnRZKTtcblxuICAgICAgLy8gc2Nyb2xsIG1vcmUgaWYgd2UgaGF2ZSBub3QgcmVhY2hlZCBvdXIgZGVzdGluYXRpb25cbiAgICAgIGlmIChjdXJyZW50WCAhPT0gY29udGV4dC54IHx8IGN1cnJlbnRZICE9PSBjb250ZXh0LnkpIHtcbiAgICAgICAgdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoc3RlcC5iaW5kKHcsIGNvbnRleHQpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBzY3JvbGxzIHdpbmRvdyBvciBlbGVtZW50IHdpdGggYSBzbW9vdGggYmVoYXZpb3JcbiAgICAgKiBAbWV0aG9kIHNtb290aFNjcm9sbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fE5vZGV9IGVsXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHhcbiAgICAgKiBAcGFyYW0ge051bWJlcn0geVxuICAgICAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gICAgICovXG4gICAgZnVuY3Rpb24gc21vb3RoU2Nyb2xsKGVsLCB4LCB5KSB7XG4gICAgICB2YXIgc2Nyb2xsYWJsZTtcbiAgICAgIHZhciBzdGFydFg7XG4gICAgICB2YXIgc3RhcnRZO1xuICAgICAgdmFyIG1ldGhvZDtcbiAgICAgIHZhciBzdGFydFRpbWUgPSBub3coKTtcblxuICAgICAgLy8gZGVmaW5lIHNjcm9sbCBjb250ZXh0XG4gICAgICBpZiAoZWwgPT09IGQuYm9keSkge1xuICAgICAgICBzY3JvbGxhYmxlID0gdztcbiAgICAgICAgc3RhcnRYID0gdy5zY3JvbGxYIHx8IHcucGFnZVhPZmZzZXQ7XG4gICAgICAgIHN0YXJ0WSA9IHcuc2Nyb2xsWSB8fCB3LnBhZ2VZT2Zmc2V0O1xuICAgICAgICBtZXRob2QgPSBvcmlnaW5hbC5zY3JvbGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzY3JvbGxhYmxlID0gZWw7XG4gICAgICAgIHN0YXJ0WCA9IGVsLnNjcm9sbExlZnQ7XG4gICAgICAgIHN0YXJ0WSA9IGVsLnNjcm9sbFRvcDtcbiAgICAgICAgbWV0aG9kID0gc2Nyb2xsRWxlbWVudDtcbiAgICAgIH1cblxuICAgICAgLy8gc2Nyb2xsIGxvb3Bpbmcgb3ZlciBhIGZyYW1lXG4gICAgICBzdGVwKHtcbiAgICAgICAgc2Nyb2xsYWJsZTogc2Nyb2xsYWJsZSxcbiAgICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICAgIHN0YXJ0VGltZTogc3RhcnRUaW1lLFxuICAgICAgICBzdGFydFg6IHN0YXJ0WCxcbiAgICAgICAgc3RhcnRZOiBzdGFydFksXG4gICAgICAgIHg6IHgsXG4gICAgICAgIHk6IHlcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIE9SSUdJTkFMIE1FVEhPRFMgT1ZFUlJJREVTXG4gICAgLy8gdy5zY3JvbGwgYW5kIHcuc2Nyb2xsVG9cbiAgICB3LnNjcm9sbCA9IHcuc2Nyb2xsVG8gPSBmdW5jdGlvbigpIHtcbiAgICAgIC8vIGF2b2lkIGFjdGlvbiB3aGVuIG5vIGFyZ3VtZW50cyBhcmUgcGFzc2VkXG4gICAgICBpZiAoYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBhdm9pZCBzbW9vdGggYmVoYXZpb3IgaWYgbm90IHJlcXVpcmVkXG4gICAgICBpZiAoc2hvdWxkQmFpbE91dChhcmd1bWVudHNbMF0pID09PSB0cnVlKSB7XG4gICAgICAgIG9yaWdpbmFsLnNjcm9sbC5jYWxsKFxuICAgICAgICAgIHcsXG4gICAgICAgICAgYXJndW1lbnRzWzBdLmxlZnQgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBhcmd1bWVudHNbMF0ubGVmdFxuICAgICAgICAgICAgOiB0eXBlb2YgYXJndW1lbnRzWzBdICE9PSAnb2JqZWN0J1xuICAgICAgICAgICAgICA/IGFyZ3VtZW50c1swXVxuICAgICAgICAgICAgICA6IHcuc2Nyb2xsWCB8fCB3LnBhZ2VYT2Zmc2V0LFxuICAgICAgICAgIC8vIHVzZSB0b3AgcHJvcCwgc2Vjb25kIGFyZ3VtZW50IGlmIHByZXNlbnQgb3IgZmFsbGJhY2sgdG8gc2Nyb2xsWVxuICAgICAgICAgIGFyZ3VtZW50c1swXS50b3AgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBhcmd1bWVudHNbMF0udG9wXG4gICAgICAgICAgICA6IGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgID8gYXJndW1lbnRzWzFdXG4gICAgICAgICAgICAgIDogdy5zY3JvbGxZIHx8IHcucGFnZVlPZmZzZXRcbiAgICAgICAgKTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIExFVCBUSEUgU01PT1RITkVTUyBCRUdJTiFcbiAgICAgIHNtb290aFNjcm9sbC5jYWxsKFxuICAgICAgICB3LFxuICAgICAgICBkLmJvZHksXG4gICAgICAgIGFyZ3VtZW50c1swXS5sZWZ0ICE9PSB1bmRlZmluZWRcbiAgICAgICAgICA/IH5+YXJndW1lbnRzWzBdLmxlZnRcbiAgICAgICAgICA6IHcuc2Nyb2xsWCB8fCB3LnBhZ2VYT2Zmc2V0LFxuICAgICAgICBhcmd1bWVudHNbMF0udG9wICE9PSB1bmRlZmluZWRcbiAgICAgICAgICA/IH5+YXJndW1lbnRzWzBdLnRvcFxuICAgICAgICAgIDogdy5zY3JvbGxZIHx8IHcucGFnZVlPZmZzZXRcbiAgICAgICk7XG4gICAgfTtcblxuICAgIC8vIHcuc2Nyb2xsQnlcbiAgICB3LnNjcm9sbEJ5ID0gZnVuY3Rpb24oKSB7XG4gICAgICAvLyBhdm9pZCBhY3Rpb24gd2hlbiBubyBhcmd1bWVudHMgYXJlIHBhc3NlZFxuICAgICAgaWYgKGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gYXZvaWQgc21vb3RoIGJlaGF2aW9yIGlmIG5vdCByZXF1aXJlZFxuICAgICAgaWYgKHNob3VsZEJhaWxPdXQoYXJndW1lbnRzWzBdKSkge1xuICAgICAgICBvcmlnaW5hbC5zY3JvbGxCeS5jYWxsKFxuICAgICAgICAgIHcsXG4gICAgICAgICAgYXJndW1lbnRzWzBdLmxlZnQgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBhcmd1bWVudHNbMF0ubGVmdFxuICAgICAgICAgICAgOiB0eXBlb2YgYXJndW1lbnRzWzBdICE9PSAnb2JqZWN0JyA/IGFyZ3VtZW50c1swXSA6IDAsXG4gICAgICAgICAgYXJndW1lbnRzWzBdLnRvcCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IGFyZ3VtZW50c1swXS50b3BcbiAgICAgICAgICAgIDogYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwXG4gICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBMRVQgVEhFIFNNT09USE5FU1MgQkVHSU4hXG4gICAgICBzbW9vdGhTY3JvbGwuY2FsbChcbiAgICAgICAgdyxcbiAgICAgICAgZC5ib2R5LFxuICAgICAgICB+fmFyZ3VtZW50c1swXS5sZWZ0ICsgKHcuc2Nyb2xsWCB8fCB3LnBhZ2VYT2Zmc2V0KSxcbiAgICAgICAgfn5hcmd1bWVudHNbMF0udG9wICsgKHcuc2Nyb2xsWSB8fCB3LnBhZ2VZT2Zmc2V0KVxuICAgICAgKTtcbiAgICB9O1xuXG4gICAgLy8gRWxlbWVudC5wcm90b3R5cGUuc2Nyb2xsIGFuZCBFbGVtZW50LnByb3RvdHlwZS5zY3JvbGxUb1xuICAgIEVsZW1lbnQucHJvdG90eXBlLnNjcm9sbCA9IEVsZW1lbnQucHJvdG90eXBlLnNjcm9sbFRvID0gZnVuY3Rpb24oKSB7XG4gICAgICAvLyBhdm9pZCBhY3Rpb24gd2hlbiBubyBhcmd1bWVudHMgYXJlIHBhc3NlZFxuICAgICAgaWYgKGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gYXZvaWQgc21vb3RoIGJlaGF2aW9yIGlmIG5vdCByZXF1aXJlZFxuICAgICAgaWYgKHNob3VsZEJhaWxPdXQoYXJndW1lbnRzWzBdKSA9PT0gdHJ1ZSkge1xuICAgICAgICAvLyBpZiBvbmUgbnVtYmVyIGlzIHBhc3NlZCwgdGhyb3cgZXJyb3IgdG8gbWF0Y2ggRmlyZWZveCBpbXBsZW1lbnRhdGlvblxuICAgICAgICBpZiAodHlwZW9mIGFyZ3VtZW50c1swXSA9PT0gJ251bWJlcicgJiYgYXJndW1lbnRzWzFdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoJ1ZhbHVlIGNvdWxkIG5vdCBiZSBjb252ZXJ0ZWQnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG9yaWdpbmFsLmVsZW1lbnRTY3JvbGwuY2FsbChcbiAgICAgICAgICB0aGlzLFxuICAgICAgICAgIC8vIHVzZSBsZWZ0IHByb3AsIGZpcnN0IG51bWJlciBhcmd1bWVudCBvciBmYWxsYmFjayB0byBzY3JvbGxMZWZ0XG4gICAgICAgICAgYXJndW1lbnRzWzBdLmxlZnQgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyB+fmFyZ3VtZW50c1swXS5sZWZ0XG4gICAgICAgICAgICA6IHR5cGVvZiBhcmd1bWVudHNbMF0gIT09ICdvYmplY3QnID8gfn5hcmd1bWVudHNbMF0gOiB0aGlzLnNjcm9sbExlZnQsXG4gICAgICAgICAgLy8gdXNlIHRvcCBwcm9wLCBzZWNvbmQgYXJndW1lbnQgb3IgZmFsbGJhY2sgdG8gc2Nyb2xsVG9wXG4gICAgICAgICAgYXJndW1lbnRzWzBdLnRvcCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IH5+YXJndW1lbnRzWzBdLnRvcFxuICAgICAgICAgICAgOiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IH5+YXJndW1lbnRzWzFdIDogdGhpcy5zY3JvbGxUb3BcbiAgICAgICAgKTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBsZWZ0ID0gYXJndW1lbnRzWzBdLmxlZnQ7XG4gICAgICB2YXIgdG9wID0gYXJndW1lbnRzWzBdLnRvcDtcblxuICAgICAgLy8gTEVUIFRIRSBTTU9PVEhORVNTIEJFR0lOIVxuICAgICAgc21vb3RoU2Nyb2xsLmNhbGwoXG4gICAgICAgIHRoaXMsXG4gICAgICAgIHRoaXMsXG4gICAgICAgIHR5cGVvZiBsZWZ0ID09PSAndW5kZWZpbmVkJyA/IHRoaXMuc2Nyb2xsTGVmdCA6IH5+bGVmdCxcbiAgICAgICAgdHlwZW9mIHRvcCA9PT0gJ3VuZGVmaW5lZCcgPyB0aGlzLnNjcm9sbFRvcCA6IH5+dG9wXG4gICAgICApO1xuICAgIH07XG5cbiAgICAvLyBFbGVtZW50LnByb3RvdHlwZS5zY3JvbGxCeVxuICAgIEVsZW1lbnQucHJvdG90eXBlLnNjcm9sbEJ5ID0gZnVuY3Rpb24oKSB7XG4gICAgICAvLyBhdm9pZCBhY3Rpb24gd2hlbiBubyBhcmd1bWVudHMgYXJlIHBhc3NlZFxuICAgICAgaWYgKGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gYXZvaWQgc21vb3RoIGJlaGF2aW9yIGlmIG5vdCByZXF1aXJlZFxuICAgICAgaWYgKHNob3VsZEJhaWxPdXQoYXJndW1lbnRzWzBdKSA9PT0gdHJ1ZSkge1xuICAgICAgICBvcmlnaW5hbC5lbGVtZW50U2Nyb2xsLmNhbGwoXG4gICAgICAgICAgdGhpcyxcbiAgICAgICAgICBhcmd1bWVudHNbMF0ubGVmdCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IH5+YXJndW1lbnRzWzBdLmxlZnQgKyB0aGlzLnNjcm9sbExlZnRcbiAgICAgICAgICAgIDogfn5hcmd1bWVudHNbMF0gKyB0aGlzLnNjcm9sbExlZnQsXG4gICAgICAgICAgYXJndW1lbnRzWzBdLnRvcCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IH5+YXJndW1lbnRzWzBdLnRvcCArIHRoaXMuc2Nyb2xsVG9wXG4gICAgICAgICAgICA6IH5+YXJndW1lbnRzWzFdICsgdGhpcy5zY3JvbGxUb3BcbiAgICAgICAgKTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2Nyb2xsKHtcbiAgICAgICAgbGVmdDogfn5hcmd1bWVudHNbMF0ubGVmdCArIHRoaXMuc2Nyb2xsTGVmdCxcbiAgICAgICAgdG9wOiB+fmFyZ3VtZW50c1swXS50b3AgKyB0aGlzLnNjcm9sbFRvcCxcbiAgICAgICAgYmVoYXZpb3I6IGFyZ3VtZW50c1swXS5iZWhhdmlvclxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8vIEVsZW1lbnQucHJvdG90eXBlLnNjcm9sbEludG9WaWV3XG4gICAgRWxlbWVudC5wcm90b3R5cGUuc2Nyb2xsSW50b1ZpZXcgPSBmdW5jdGlvbigpIHtcbiAgICAgIC8vIGF2b2lkIHNtb290aCBiZWhhdmlvciBpZiBub3QgcmVxdWlyZWRcbiAgICAgIGlmIChzaG91bGRCYWlsT3V0KGFyZ3VtZW50c1swXSkgPT09IHRydWUpIHtcbiAgICAgICAgb3JpZ2luYWwuc2Nyb2xsSW50b1ZpZXcuY2FsbChcbiAgICAgICAgICB0aGlzLFxuICAgICAgICAgIGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IGFyZ3VtZW50c1swXVxuICAgICAgICApO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gTEVUIFRIRSBTTU9PVEhORVNTIEJFR0lOIVxuICAgICAgdmFyIHNjcm9sbGFibGVQYXJlbnQgPSBmaW5kU2Nyb2xsYWJsZVBhcmVudCh0aGlzKTtcbiAgICAgIHZhciBwYXJlbnRSZWN0cyA9IHNjcm9sbGFibGVQYXJlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICB2YXIgY2xpZW50UmVjdHMgPSB0aGlzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgICBpZiAoc2Nyb2xsYWJsZVBhcmVudCAhPT0gZC5ib2R5KSB7XG4gICAgICAgIC8vIHJldmVhbCBlbGVtZW50IGluc2lkZSBwYXJlbnRcbiAgICAgICAgc21vb3RoU2Nyb2xsLmNhbGwoXG4gICAgICAgICAgdGhpcyxcbiAgICAgICAgICBzY3JvbGxhYmxlUGFyZW50LFxuICAgICAgICAgIHNjcm9sbGFibGVQYXJlbnQuc2Nyb2xsTGVmdCArIGNsaWVudFJlY3RzLmxlZnQgLSBwYXJlbnRSZWN0cy5sZWZ0LFxuICAgICAgICAgIHNjcm9sbGFibGVQYXJlbnQuc2Nyb2xsVG9wICsgY2xpZW50UmVjdHMudG9wIC0gcGFyZW50UmVjdHMudG9wXG4gICAgICAgICk7XG5cbiAgICAgICAgLy8gcmV2ZWFsIHBhcmVudCBpbiB2aWV3cG9ydCB1bmxlc3MgaXMgZml4ZWRcbiAgICAgICAgaWYgKHcuZ2V0Q29tcHV0ZWRTdHlsZShzY3JvbGxhYmxlUGFyZW50KS5wb3NpdGlvbiAhPT0gJ2ZpeGVkJykge1xuICAgICAgICAgIHcuc2Nyb2xsQnkoe1xuICAgICAgICAgICAgbGVmdDogcGFyZW50UmVjdHMubGVmdCxcbiAgICAgICAgICAgIHRvcDogcGFyZW50UmVjdHMudG9wLFxuICAgICAgICAgICAgYmVoYXZpb3I6ICdzbW9vdGgnXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHJldmVhbCBlbGVtZW50IGluIHZpZXdwb3J0XG4gICAgICAgIHcuc2Nyb2xsQnkoe1xuICAgICAgICAgIGxlZnQ6IGNsaWVudFJlY3RzLmxlZnQsXG4gICAgICAgICAgdG9wOiBjbGllbnRSZWN0cy50b3AsXG4gICAgICAgICAgYmVoYXZpb3I6ICdzbW9vdGgnXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICB7XG4gICAgLy8gY29tbW9uanNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IHsgcG9seWZpbGw6IHBvbHlmaWxsIH07XG4gIH1cblxufSgpKTtcbn0pO1xudmFyIHNtb290aHNjcm9sbF8xID0gc21vb3Roc2Nyb2xsLnBvbHlmaWxsO1xuXG52YXIgX2RlZmF1bHQkMSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0NvcmUpIHtcbiAgX2luaGVyaXRzKF9kZWZhdWx0LCBfQ29yZSk7XG5cbiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihfZGVmYXVsdCk7XG5cbiAgZnVuY3Rpb24gX2RlZmF1bHQoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIF9kZWZhdWx0KTtcblxuICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgb3B0aW9ucyk7XG5cbiAgICBpZiAoX3RoaXMucmVzZXROYXRpdmVTY3JvbGwpIHtcbiAgICAgIGlmIChoaXN0b3J5LnNjcm9sbFJlc3RvcmF0aW9uKSB7XG4gICAgICAgIGhpc3Rvcnkuc2Nyb2xsUmVzdG9yYXRpb24gPSAnbWFudWFsJztcbiAgICAgIH1cblxuICAgICAgd2luZG93LnNjcm9sbFRvKDAsIDApO1xuICAgIH1cblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBfdGhpcy5jaGVja1Njcm9sbCwgZmFsc2UpO1xuXG4gICAgaWYgKHdpbmRvdy5zbW9vdGhzY3JvbGxQb2x5ZmlsbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB3aW5kb3cuc21vb3Roc2Nyb2xsUG9seWZpbGwgPSBzbW9vdGhzY3JvbGw7XG4gICAgICB3aW5kb3cuc21vb3Roc2Nyb2xsUG9seWZpbGwucG9seWZpbGwoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoX2RlZmF1bHQsIFt7XG4gICAga2V5OiBcImluaXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgIHRoaXMuaW5zdGFuY2Uuc2Nyb2xsLnkgPSB3aW5kb3cucGFnZVlPZmZzZXQ7XG4gICAgICB0aGlzLmFkZEVsZW1lbnRzKCk7XG4gICAgICB0aGlzLmRldGVjdEVsZW1lbnRzKCk7XG5cbiAgICAgIF9nZXQoX2dldFByb3RvdHlwZU9mKF9kZWZhdWx0LnByb3RvdHlwZSksIFwiaW5pdFwiLCB0aGlzKS5jYWxsKHRoaXMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjaGVja1Njcm9sbFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjaGVja1Njcm9sbCgpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICBfZ2V0KF9nZXRQcm90b3R5cGVPZihfZGVmYXVsdC5wcm90b3R5cGUpLCBcImNoZWNrU2Nyb2xsXCIsIHRoaXMpLmNhbGwodGhpcyk7XG5cbiAgICAgIGlmICh0aGlzLmdldERpcmVjdGlvbikge1xuICAgICAgICB0aGlzLmFkZERpcmVjdGlvbigpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5nZXRTcGVlZCkge1xuICAgICAgICB0aGlzLmFkZFNwZWVkKCk7XG4gICAgICAgIHRoaXMuc3BlZWRUcyA9IERhdGUubm93KCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuaW5zdGFuY2Uuc2Nyb2xsLnkgPSB3aW5kb3cucGFnZVlPZmZzZXQ7XG5cbiAgICAgIGlmIChPYmplY3QuZW50cmllcyh0aGlzLmVscykubGVuZ3RoKSB7XG4gICAgICAgIGlmICghdGhpcy5oYXNTY3JvbGxUaWNraW5nKSB7XG4gICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzMi5kZXRlY3RFbGVtZW50cygpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHRoaXMuaGFzU2Nyb2xsVGlja2luZyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiYWRkRGlyZWN0aW9uXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZERpcmVjdGlvbigpIHtcbiAgICAgIGlmICh3aW5kb3cucGFnZVlPZmZzZXQgPiB0aGlzLmluc3RhbmNlLnNjcm9sbC55KSB7XG4gICAgICAgIGlmICh0aGlzLmluc3RhbmNlLmRpcmVjdGlvbiAhPT0gJ2Rvd24nKSB7XG4gICAgICAgICAgdGhpcy5pbnN0YW5jZS5kaXJlY3Rpb24gPSAnZG93bic7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAod2luZG93LnBhZ2VZT2Zmc2V0IDwgdGhpcy5pbnN0YW5jZS5zY3JvbGwueSkge1xuICAgICAgICBpZiAodGhpcy5pbnN0YW5jZS5kaXJlY3Rpb24gIT09ICd1cCcpIHtcbiAgICAgICAgICB0aGlzLmluc3RhbmNlLmRpcmVjdGlvbiA9ICd1cCc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiYWRkU3BlZWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkU3BlZWQoKSB7XG4gICAgICBpZiAod2luZG93LnBhZ2VZT2Zmc2V0ICE9IHRoaXMuaW5zdGFuY2Uuc2Nyb2xsLnkpIHtcbiAgICAgICAgdGhpcy5pbnN0YW5jZS5zcGVlZCA9ICh3aW5kb3cucGFnZVlPZmZzZXQgLSB0aGlzLmluc3RhbmNlLnNjcm9sbC55KSAvIE1hdGgubWF4KDEsIERhdGUubm93KCkgLSB0aGlzLnNwZWVkVHMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5pbnN0YW5jZS5zcGVlZCA9IDA7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlc2l6ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXNpemUoKSB7XG4gICAgICBpZiAoT2JqZWN0LmVudHJpZXModGhpcy5lbHMpLmxlbmd0aCkge1xuICAgICAgICB0aGlzLndpbmRvd0hlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICAgICAgdGhpcy51cGRhdGVFbGVtZW50cygpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJhZGRFbGVtZW50c1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRFbGVtZW50cygpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICB0aGlzLmVscyA9IHt9O1xuICAgICAgdmFyIGVscyA9IHRoaXMuZWwucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtJyArIHRoaXMubmFtZSArICddJyk7XG4gICAgICBlbHMuZm9yRWFjaChmdW5jdGlvbiAoZWwsIGluZGV4KSB7XG4gICAgICAgIHZhciBCQ1IgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgdmFyIGNsID0gZWwuZGF0YXNldFtfdGhpczMubmFtZSArICdDbGFzcyddIHx8IF90aGlzM1tcImNsYXNzXCJdO1xuICAgICAgICB2YXIgaWQgPSB0eXBlb2YgZWwuZGF0YXNldFtfdGhpczMubmFtZSArICdJZCddID09PSAnc3RyaW5nJyA/IGVsLmRhdGFzZXRbX3RoaXMzLm5hbWUgKyAnSWQnXSA6IGluZGV4O1xuICAgICAgICB2YXIgdG9wO1xuICAgICAgICB2YXIgbGVmdDtcbiAgICAgICAgdmFyIG9mZnNldCA9IHR5cGVvZiBlbC5kYXRhc2V0W190aGlzMy5uYW1lICsgJ09mZnNldCddID09PSAnc3RyaW5nJyA/IGVsLmRhdGFzZXRbX3RoaXMzLm5hbWUgKyAnT2Zmc2V0J10uc3BsaXQoJywnKSA6IF90aGlzMy5vZmZzZXQ7XG4gICAgICAgIHZhciByZXBlYXQgPSBlbC5kYXRhc2V0W190aGlzMy5uYW1lICsgJ1JlcGVhdCddO1xuICAgICAgICB2YXIgY2FsbCA9IGVsLmRhdGFzZXRbX3RoaXMzLm5hbWUgKyAnQ2FsbCddO1xuICAgICAgICB2YXIgdGFyZ2V0ID0gZWwuZGF0YXNldFtfdGhpczMubmFtZSArICdUYXJnZXQnXTtcbiAgICAgICAgdmFyIHRhcmdldEVsO1xuXG4gICAgICAgIGlmICh0YXJnZXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRhcmdldEVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIlwiLmNvbmNhdCh0YXJnZXQpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0YXJnZXRFbCA9IGVsO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRhcmdldEVsQkNSID0gdGFyZ2V0RWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIHRvcCA9IHRhcmdldEVsQkNSLnRvcCArIF90aGlzMy5pbnN0YW5jZS5zY3JvbGwueTtcbiAgICAgICAgbGVmdCA9IHRhcmdldEVsQkNSLmxlZnQgKyBfdGhpczMuaW5zdGFuY2Uuc2Nyb2xsLng7XG4gICAgICAgIHZhciBib3R0b20gPSB0b3AgKyB0YXJnZXRFbC5vZmZzZXRIZWlnaHQ7XG4gICAgICAgIHZhciByaWdodCA9IGxlZnQgKyB0YXJnZXRFbC5vZmZzZXRXaWR0aDtcblxuICAgICAgICBpZiAocmVwZWF0ID09ICdmYWxzZScpIHtcbiAgICAgICAgICByZXBlYXQgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIGlmIChyZXBlYXQgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmVwZWF0ID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXBlYXQgPSBfdGhpczMucmVwZWF0O1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHJlbGF0aXZlT2Zmc2V0ID0gX3RoaXMzLmdldFJlbGF0aXZlT2Zmc2V0KG9mZnNldCk7XG5cbiAgICAgICAgdG9wID0gdG9wICsgcmVsYXRpdmVPZmZzZXRbMF07XG4gICAgICAgIGJvdHRvbSA9IGJvdHRvbSAtIHJlbGF0aXZlT2Zmc2V0WzFdO1xuICAgICAgICB2YXIgbWFwcGVkRWwgPSB7XG4gICAgICAgICAgZWw6IGVsLFxuICAgICAgICAgIHRhcmdldEVsOiB0YXJnZXRFbCxcbiAgICAgICAgICBpZDogaWQsXG4gICAgICAgICAgXCJjbGFzc1wiOiBjbCxcbiAgICAgICAgICB0b3A6IHRvcCxcbiAgICAgICAgICBib3R0b206IGJvdHRvbSxcbiAgICAgICAgICBsZWZ0OiBsZWZ0LFxuICAgICAgICAgIHJpZ2h0OiByaWdodCxcbiAgICAgICAgICBvZmZzZXQ6IG9mZnNldCxcbiAgICAgICAgICBwcm9ncmVzczogMCxcbiAgICAgICAgICByZXBlYXQ6IHJlcGVhdCxcbiAgICAgICAgICBpblZpZXc6IGZhbHNlLFxuICAgICAgICAgIGNhbGw6IGNhbGxcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMzLmVsc1tpZF0gPSBtYXBwZWRFbDtcblxuICAgICAgICBpZiAoZWwuY2xhc3NMaXN0LmNvbnRhaW5zKGNsKSkge1xuICAgICAgICAgIF90aGlzMy5zZXRJblZpZXcoX3RoaXMzLmVsc1tpZF0sIGlkKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInVwZGF0ZUVsZW1lbnRzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZUVsZW1lbnRzKCkge1xuICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgIE9iamVjdC5lbnRyaWVzKHRoaXMuZWxzKS5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICAgIHZhciBfcmVmMiA9IF9zbGljZWRUb0FycmF5KF9yZWYsIDIpLFxuICAgICAgICAgICAgaSA9IF9yZWYyWzBdLFxuICAgICAgICAgICAgZWwgPSBfcmVmMlsxXTtcblxuICAgICAgICB2YXIgdG9wID0gZWwudGFyZ2V0RWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wICsgX3RoaXM0Lmluc3RhbmNlLnNjcm9sbC55O1xuXG4gICAgICAgIHZhciBib3R0b20gPSB0b3AgKyBlbC50YXJnZXRFbC5vZmZzZXRIZWlnaHQ7XG5cbiAgICAgICAgdmFyIHJlbGF0aXZlT2Zmc2V0ID0gX3RoaXM0LmdldFJlbGF0aXZlT2Zmc2V0KGVsLm9mZnNldCk7XG5cbiAgICAgICAgX3RoaXM0LmVsc1tpXS50b3AgPSB0b3AgKyByZWxhdGl2ZU9mZnNldFswXTtcbiAgICAgICAgX3RoaXM0LmVsc1tpXS5ib3R0b20gPSBib3R0b20gLSByZWxhdGl2ZU9mZnNldFsxXTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5oYXNTY3JvbGxUaWNraW5nID0gZmFsc2U7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldFJlbGF0aXZlT2Zmc2V0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFJlbGF0aXZlT2Zmc2V0KG9mZnNldCkge1xuICAgICAgdmFyIHJlbGF0aXZlT2Zmc2V0ID0gWzAsIDBdO1xuXG4gICAgICBpZiAob2Zmc2V0KSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2Zmc2V0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBvZmZzZXRbaV0gPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGlmIChvZmZzZXRbaV0uaW5jbHVkZXMoJyUnKSkge1xuICAgICAgICAgICAgICByZWxhdGl2ZU9mZnNldFtpXSA9IHBhcnNlSW50KG9mZnNldFtpXS5yZXBsYWNlKCclJywgJycpICogdGhpcy53aW5kb3dIZWlnaHQgLyAxMDApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmVsYXRpdmVPZmZzZXRbaV0gPSBwYXJzZUludChvZmZzZXRbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZWxhdGl2ZU9mZnNldFtpXSA9IG9mZnNldFtpXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlbGF0aXZlT2Zmc2V0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTY3JvbGwgdG8gYSBkZXNpcmVkIHRhcmdldC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAgQXZhaWxhYmxlIG9wdGlvbnMgOlxuICAgICAqICAgICAgICAgIHRhcmdldCB7bm9kZSwgc3RyaW5nLCBcInRvcFwiLCBcImJvdHRvbVwiLCBpbnR9IC0gVGhlIERPTSBlbGVtZW50IHdlIHdhbnQgdG8gc2Nyb2xsIHRvXG4gICAgICogICAgICAgICAgb3B0aW9ucyB7b2JqZWN0fSAtIE9wdGlvbnMgb2JqZWN0IGZvciBhZGRpdGlvbm5hbCBzZXR0aW5ncy5cbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwic2Nyb2xsVG9cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2Nyb2xsVG8odGFyZ2V0KSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgICAvLyBQYXJzZSBvcHRpb25zXG4gICAgICB2YXIgb2Zmc2V0ID0gcGFyc2VJbnQob3B0aW9ucy5vZmZzZXQpIHx8IDA7IC8vIEFuIG9mZnNldCB0byBhcHBseSBvbiB0b3Agb2YgZ2l2ZW4gYHRhcmdldGAgb3IgYHNvdXJjZUVsZW1gJ3MgdGFyZ2V0XG5cbiAgICAgIHZhciBjYWxsYmFjayA9IG9wdGlvbnMuY2FsbGJhY2sgPyBvcHRpb25zLmNhbGxiYWNrIDogZmFsc2U7IC8vIGZ1bmN0aW9uIGNhbGxlZCB3aGVuIHNjcm9sbFRvIGNvbXBsZXRlcyAobm90ZSB0aGF0IGl0IHdvbid0IHdhaXQgZm9yIGxlcnAgdG8gc3RhYmlsaXplKVxuXG4gICAgICBpZiAodHlwZW9mIHRhcmdldCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgLy8gU2VsZWN0b3Igb3IgYm91bmRhcmllc1xuICAgICAgICBpZiAodGFyZ2V0ID09PSAndG9wJykge1xuICAgICAgICAgIHRhcmdldCA9IHRoaXMuaHRtbDtcbiAgICAgICAgfSBlbHNlIGlmICh0YXJnZXQgPT09ICdib3R0b20nKSB7XG4gICAgICAgICAgdGFyZ2V0ID0gdGhpcy5odG1sLm9mZnNldEhlaWdodCAtIHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0YXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7IC8vIElmIHRoZSBxdWVyeSBmYWlscywgYWJvcnRcblxuICAgICAgICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0YXJnZXQgPT09ICdudW1iZXInKSB7XG4gICAgICAgIC8vIEFic29sdXRlIGNvb3JkaW5hdGVcbiAgICAgICAgdGFyZ2V0ID0gcGFyc2VJbnQodGFyZ2V0KTtcbiAgICAgIH0gZWxzZSBpZiAodGFyZ2V0ICYmIHRhcmdldC50YWdOYW1lKSA7IGVsc2Uge1xuICAgICAgICBjb25zb2xlLndhcm4oJ2B0YXJnZXRgIHBhcmFtZXRlciBpcyBub3QgdmFsaWQnKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBXZSBoYXZlIGEgdGFyZ2V0IHRoYXQgaXMgbm90IGEgY29vcmRpbmF0ZSB5ZXQsIGdldCBpdFxuXG5cbiAgICAgIGlmICh0eXBlb2YgdGFyZ2V0ICE9PSAnbnVtYmVyJykge1xuICAgICAgICBvZmZzZXQgPSB0YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wICsgb2Zmc2V0ICsgdGhpcy5pbnN0YW5jZS5zY3JvbGwueTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9mZnNldCA9IHRhcmdldCArIG9mZnNldDtcbiAgICAgIH1cblxuICAgICAgdmFyIGlzVGFyZ2V0UmVhY2hlZCA9IGZ1bmN0aW9uIGlzVGFyZ2V0UmVhY2hlZCgpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlSW50KHdpbmRvdy5wYWdlWU9mZnNldCkgPT09IHBhcnNlSW50KG9mZnNldCk7XG4gICAgICB9O1xuXG4gICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKGlzVGFyZ2V0UmVhY2hlZCgpKSB7XG4gICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIG9uU2Nyb2xsID0gZnVuY3Rpb24gb25TY3JvbGwoKSB7XG4gICAgICAgICAgICBpZiAoaXNUYXJnZXRSZWFjaGVkKCkpIHtcbiAgICAgICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIG9uU2Nyb2xsKTtcbiAgICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIG9uU2Nyb2xsKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB3aW5kb3cuc2Nyb2xsVG8oe1xuICAgICAgICB0b3A6IG9mZnNldCxcbiAgICAgICAgYmVoYXZpb3I6IG9wdGlvbnMuZHVyYXRpb24gPT09IDAgPyAnYXV0bycgOiAnc21vb3RoJ1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInVwZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgICB0aGlzLmFkZEVsZW1lbnRzKCk7XG4gICAgICB0aGlzLmRldGVjdEVsZW1lbnRzKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImRlc3Ryb3lcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgIF9nZXQoX2dldFByb3RvdHlwZU9mKF9kZWZhdWx0LnByb3RvdHlwZSksIFwiZGVzdHJveVwiLCB0aGlzKS5jYWxsKHRoaXMpO1xuXG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdGhpcy5jaGVja1Njcm9sbCwgZmFsc2UpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBfZGVmYXVsdDtcbn0oX2RlZmF1bHQpO1xuXG4vKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbnZhciBvYmplY3RBc3NpZ24gPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdFx0XHRzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHtcblx0XHRcdFx0XHR0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuXG5mdW5jdGlvbiBFICgpIHtcbiAgLy8gS2VlcCB0aGlzIGVtcHR5IHNvIGl0J3MgZWFzaWVyIHRvIGluaGVyaXQgZnJvbVxuICAvLyAodmlhIGh0dHBzOi8vZ2l0aHViLmNvbS9saXBzbWFjayBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9zY290dGNvcmdhbi90aW55LWVtaXR0ZXIvaXNzdWVzLzMpXG59XG5cbkUucHJvdG90eXBlID0ge1xuICBvbjogZnVuY3Rpb24gKG5hbWUsIGNhbGxiYWNrLCBjdHgpIHtcbiAgICB2YXIgZSA9IHRoaXMuZSB8fCAodGhpcy5lID0ge30pO1xuXG4gICAgKGVbbmFtZV0gfHwgKGVbbmFtZV0gPSBbXSkpLnB1c2goe1xuICAgICAgZm46IGNhbGxiYWNrLFxuICAgICAgY3R4OiBjdHhcbiAgICB9KTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIG9uY2U6IGZ1bmN0aW9uIChuYW1lLCBjYWxsYmFjaywgY3R4KSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIGZ1bmN0aW9uIGxpc3RlbmVyICgpIHtcbiAgICAgIHNlbGYub2ZmKG5hbWUsIGxpc3RlbmVyKTtcbiAgICAgIGNhbGxiYWNrLmFwcGx5KGN0eCwgYXJndW1lbnRzKTtcbiAgICB9XG4gICAgbGlzdGVuZXIuXyA9IGNhbGxiYWNrO1xuICAgIHJldHVybiB0aGlzLm9uKG5hbWUsIGxpc3RlbmVyLCBjdHgpO1xuICB9LFxuXG4gIGVtaXQ6IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdmFyIGRhdGEgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgdmFyIGV2dEFyciA9ICgodGhpcy5lIHx8ICh0aGlzLmUgPSB7fSkpW25hbWVdIHx8IFtdKS5zbGljZSgpO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgbGVuID0gZXZ0QXJyLmxlbmd0aDtcblxuICAgIGZvciAoaTsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBldnRBcnJbaV0uZm4uYXBwbHkoZXZ0QXJyW2ldLmN0eCwgZGF0YSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgb2ZmOiBmdW5jdGlvbiAobmFtZSwgY2FsbGJhY2spIHtcbiAgICB2YXIgZSA9IHRoaXMuZSB8fCAodGhpcy5lID0ge30pO1xuICAgIHZhciBldnRzID0gZVtuYW1lXTtcbiAgICB2YXIgbGl2ZUV2ZW50cyA9IFtdO1xuXG4gICAgaWYgKGV2dHMgJiYgY2FsbGJhY2spIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBldnRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGlmIChldnRzW2ldLmZuICE9PSBjYWxsYmFjayAmJiBldnRzW2ldLmZuLl8gIT09IGNhbGxiYWNrKVxuICAgICAgICAgIGxpdmVFdmVudHMucHVzaChldnRzW2ldKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZW1vdmUgZXZlbnQgZnJvbSBxdWV1ZSB0byBwcmV2ZW50IG1lbW9yeSBsZWFrXG4gICAgLy8gU3VnZ2VzdGVkIGJ5IGh0dHBzOi8vZ2l0aHViLmNvbS9sYXpkXG4gICAgLy8gUmVmOiBodHRwczovL2dpdGh1Yi5jb20vc2NvdHRjb3JnYW4vdGlueS1lbWl0dGVyL2NvbW1pdC9jNmViZmFhOWJjOTczYjMzZDExMGE4NGEzMDc3NDJiN2NmOTRjOTUzI2NvbW1pdGNvbW1lbnQtNTAyNDkxMFxuXG4gICAgKGxpdmVFdmVudHMubGVuZ3RoKVxuICAgICAgPyBlW25hbWVdID0gbGl2ZUV2ZW50c1xuICAgICAgOiBkZWxldGUgZVtuYW1lXTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG59O1xuXG52YXIgdGlueUVtaXR0ZXIgPSBFO1xuXG52YXIgbGV0aGFyZ3kgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7XG4vLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuOS4yXG4oZnVuY3Rpb24oKSB7XG4gIHZhciByb290O1xuXG4gIHJvb3QgPSAgZXhwb3J0cyAhPT0gbnVsbCA/IGV4cG9ydHMgOiB0aGlzO1xuXG4gIHJvb3QuTGV0aGFyZ3kgPSAoZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gTGV0aGFyZ3koc3RhYmlsaXR5LCBzZW5zaXRpdml0eSwgdG9sZXJhbmNlLCBkZWxheSkge1xuICAgICAgdGhpcy5zdGFiaWxpdHkgPSBzdGFiaWxpdHkgIT0gbnVsbCA/IE1hdGguYWJzKHN0YWJpbGl0eSkgOiA4O1xuICAgICAgdGhpcy5zZW5zaXRpdml0eSA9IHNlbnNpdGl2aXR5ICE9IG51bGwgPyAxICsgTWF0aC5hYnMoc2Vuc2l0aXZpdHkpIDogMTAwO1xuICAgICAgdGhpcy50b2xlcmFuY2UgPSB0b2xlcmFuY2UgIT0gbnVsbCA/IDEgKyBNYXRoLmFicyh0b2xlcmFuY2UpIDogMS4xO1xuICAgICAgdGhpcy5kZWxheSA9IGRlbGF5ICE9IG51bGwgPyBkZWxheSA6IDE1MDtcbiAgICAgIHRoaXMubGFzdFVwRGVsdGFzID0gKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgaSwgcmVmLCByZXN1bHRzO1xuICAgICAgICByZXN1bHRzID0gW107XG4gICAgICAgIGZvciAoaSA9IDEsIHJlZiA9IHRoaXMuc3RhYmlsaXR5ICogMjsgMSA8PSByZWYgPyBpIDw9IHJlZiA6IGkgPj0gcmVmOyAxIDw9IHJlZiA/IGkrKyA6IGktLSkge1xuICAgICAgICAgIHJlc3VsdHMucHVzaChudWxsKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICAgIH0pLmNhbGwodGhpcyk7XG4gICAgICB0aGlzLmxhc3REb3duRGVsdGFzID0gKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgaSwgcmVmLCByZXN1bHRzO1xuICAgICAgICByZXN1bHRzID0gW107XG4gICAgICAgIGZvciAoaSA9IDEsIHJlZiA9IHRoaXMuc3RhYmlsaXR5ICogMjsgMSA8PSByZWYgPyBpIDw9IHJlZiA6IGkgPj0gcmVmOyAxIDw9IHJlZiA/IGkrKyA6IGktLSkge1xuICAgICAgICAgIHJlc3VsdHMucHVzaChudWxsKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICAgIH0pLmNhbGwodGhpcyk7XG4gICAgICB0aGlzLmRlbHRhc1RpbWVzdGFtcCA9IChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGksIHJlZiwgcmVzdWx0cztcbiAgICAgICAgcmVzdWx0cyA9IFtdO1xuICAgICAgICBmb3IgKGkgPSAxLCByZWYgPSB0aGlzLnN0YWJpbGl0eSAqIDI7IDEgPD0gcmVmID8gaSA8PSByZWYgOiBpID49IHJlZjsgMSA8PSByZWYgPyBpKysgOiBpLS0pIHtcbiAgICAgICAgICByZXN1bHRzLnB1c2gobnVsbCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgICB9KS5jYWxsKHRoaXMpO1xuICAgIH1cblxuICAgIExldGhhcmd5LnByb3RvdHlwZS5jaGVjayA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgIHZhciBsYXN0RGVsdGE7XG4gICAgICBlID0gZS5vcmlnaW5hbEV2ZW50IHx8IGU7XG4gICAgICBpZiAoZS53aGVlbERlbHRhICE9IG51bGwpIHtcbiAgICAgICAgbGFzdERlbHRhID0gZS53aGVlbERlbHRhO1xuICAgICAgfSBlbHNlIGlmIChlLmRlbHRhWSAhPSBudWxsKSB7XG4gICAgICAgIGxhc3REZWx0YSA9IGUuZGVsdGFZICogLTQwO1xuICAgICAgfSBlbHNlIGlmICgoZS5kZXRhaWwgIT0gbnVsbCkgfHwgZS5kZXRhaWwgPT09IDApIHtcbiAgICAgICAgbGFzdERlbHRhID0gZS5kZXRhaWwgKiAtNDA7XG4gICAgICB9XG4gICAgICB0aGlzLmRlbHRhc1RpbWVzdGFtcC5wdXNoKERhdGUubm93KCkpO1xuICAgICAgdGhpcy5kZWx0YXNUaW1lc3RhbXAuc2hpZnQoKTtcbiAgICAgIGlmIChsYXN0RGVsdGEgPiAwKSB7XG4gICAgICAgIHRoaXMubGFzdFVwRGVsdGFzLnB1c2gobGFzdERlbHRhKTtcbiAgICAgICAgdGhpcy5sYXN0VXBEZWx0YXMuc2hpZnQoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNJbmVydGlhKDEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5sYXN0RG93bkRlbHRhcy5wdXNoKGxhc3REZWx0YSk7XG4gICAgICAgIHRoaXMubGFzdERvd25EZWx0YXMuc2hpZnQoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNJbmVydGlhKC0xKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgTGV0aGFyZ3kucHJvdG90eXBlLmlzSW5lcnRpYSA9IGZ1bmN0aW9uKGRpcmVjdGlvbikge1xuICAgICAgdmFyIGxhc3REZWx0YXMsIGxhc3REZWx0YXNOZXcsIGxhc3REZWx0YXNPbGQsIG5ld0F2ZXJhZ2UsIG5ld1N1bSwgb2xkQXZlcmFnZSwgb2xkU3VtO1xuICAgICAgbGFzdERlbHRhcyA9IGRpcmVjdGlvbiA9PT0gLTEgPyB0aGlzLmxhc3REb3duRGVsdGFzIDogdGhpcy5sYXN0VXBEZWx0YXM7XG4gICAgICBpZiAobGFzdERlbHRhc1swXSA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZGlyZWN0aW9uO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuZGVsdGFzVGltZXN0YW1wWyh0aGlzLnN0YWJpbGl0eSAqIDIpIC0gMl0gKyB0aGlzLmRlbGF5ID4gRGF0ZS5ub3coKSAmJiBsYXN0RGVsdGFzWzBdID09PSBsYXN0RGVsdGFzWyh0aGlzLnN0YWJpbGl0eSAqIDIpIC0gMV0pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgbGFzdERlbHRhc09sZCA9IGxhc3REZWx0YXMuc2xpY2UoMCwgdGhpcy5zdGFiaWxpdHkpO1xuICAgICAgbGFzdERlbHRhc05ldyA9IGxhc3REZWx0YXMuc2xpY2UodGhpcy5zdGFiaWxpdHksIHRoaXMuc3RhYmlsaXR5ICogMik7XG4gICAgICBvbGRTdW0gPSBsYXN0RGVsdGFzT2xkLnJlZHVjZShmdW5jdGlvbih0LCBzKSB7XG4gICAgICAgIHJldHVybiB0ICsgcztcbiAgICAgIH0pO1xuICAgICAgbmV3U3VtID0gbGFzdERlbHRhc05ldy5yZWR1Y2UoZnVuY3Rpb24odCwgcykge1xuICAgICAgICByZXR1cm4gdCArIHM7XG4gICAgICB9KTtcbiAgICAgIG9sZEF2ZXJhZ2UgPSBvbGRTdW0gLyBsYXN0RGVsdGFzT2xkLmxlbmd0aDtcbiAgICAgIG5ld0F2ZXJhZ2UgPSBuZXdTdW0gLyBsYXN0RGVsdGFzTmV3Lmxlbmd0aDtcbiAgICAgIGlmIChNYXRoLmFicyhvbGRBdmVyYWdlKSA8IE1hdGguYWJzKG5ld0F2ZXJhZ2UgKiB0aGlzLnRvbGVyYW5jZSkgJiYgKHRoaXMuc2Vuc2l0aXZpdHkgPCBNYXRoLmFicyhuZXdBdmVyYWdlKSkpIHtcbiAgICAgICAgcmV0dXJuIGRpcmVjdGlvbjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgTGV0aGFyZ3kucHJvdG90eXBlLnNob3dMYXN0VXBEZWx0YXMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmxhc3RVcERlbHRhcztcbiAgICB9O1xuXG4gICAgTGV0aGFyZ3kucHJvdG90eXBlLnNob3dMYXN0RG93bkRlbHRhcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMubGFzdERvd25EZWx0YXM7XG4gICAgfTtcblxuICAgIHJldHVybiBMZXRoYXJneTtcblxuICB9KSgpO1xuXG59KS5jYWxsKGNvbW1vbmpzR2xvYmFsKTtcbn0pO1xuXG52YXIgc3VwcG9ydCA9IChmdW5jdGlvbiBnZXRTdXBwb3J0KCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGhhc1doZWVsRXZlbnQ6ICdvbndoZWVsJyBpbiBkb2N1bWVudCxcbiAgICAgICAgaGFzTW91c2VXaGVlbEV2ZW50OiAnb25tb3VzZXdoZWVsJyBpbiBkb2N1bWVudCxcbiAgICAgICAgaGFzVG91Y2g6ICgnb250b3VjaHN0YXJ0JyBpbiB3aW5kb3cpIHx8IHdpbmRvdy5Ub3VjaEV2ZW50IHx8IHdpbmRvdy5Eb2N1bWVudFRvdWNoICYmIGRvY3VtZW50IGluc3RhbmNlb2YgRG9jdW1lbnRUb3VjaCxcbiAgICAgICAgaGFzVG91Y2hXaW46IG5hdmlnYXRvci5tc01heFRvdWNoUG9pbnRzICYmIG5hdmlnYXRvci5tc01heFRvdWNoUG9pbnRzID4gMSxcbiAgICAgICAgaGFzUG9pbnRlcjogISF3aW5kb3cubmF2aWdhdG9yLm1zUG9pbnRlckVuYWJsZWQsXG4gICAgICAgIGhhc0tleURvd246ICdvbmtleWRvd24nIGluIGRvY3VtZW50LFxuICAgICAgICBpc0ZpcmVmb3g6IG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignRmlyZWZveCcpID4gLTFcbiAgICB9O1xufSkoKTtcblxudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZyxcbiAgICBoYXNPd25Qcm9wZXJ0eSQxID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIGJpbmRhbGxTdGFuZGFsb25lID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgaWYoIW9iamVjdCkgcmV0dXJuIGNvbnNvbGUud2FybignYmluZEFsbCByZXF1aXJlcyBhdCBsZWFzdCBvbmUgYXJndW1lbnQuJyk7XG5cbiAgICB2YXIgZnVuY3Rpb25zID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcblxuICAgIGlmIChmdW5jdGlvbnMubGVuZ3RoID09PSAwKSB7XG5cbiAgICAgICAgZm9yICh2YXIgbWV0aG9kIGluIG9iamVjdCkge1xuICAgICAgICAgICAgaWYoaGFzT3duUHJvcGVydHkkMS5jYWxsKG9iamVjdCwgbWV0aG9kKSkge1xuICAgICAgICAgICAgICAgIGlmKHR5cGVvZiBvYmplY3RbbWV0aG9kXSA9PSAnZnVuY3Rpb24nICYmIHRvU3RyaW5nLmNhbGwob2JqZWN0W21ldGhvZF0pID09IFwiW29iamVjdCBGdW5jdGlvbl1cIikge1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbnMucHVzaChtZXRob2QpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZvcih2YXIgaSA9IDA7IGkgPCBmdW5jdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGYgPSBmdW5jdGlvbnNbaV07XG4gICAgICAgIG9iamVjdFtmXSA9IGJpbmQob2JqZWN0W2ZdLCBvYmplY3QpO1xuICAgIH1cbn07XG5cbi8qXG4gICAgRmFzdGVyIGJpbmQgd2l0aG91dCBzcGVjaWZpYy1jYXNlIGNoZWNraW5nLiAoc2VlIGh0dHBzOi8vY29kZXJ3YWxsLmNvbS9wL29pM2ozdykuXG4gICAgYmluZEFsbCBpcyBvbmx5IG5lZWRlZCBmb3IgZXZlbnRzIGJpbmRpbmcgc28gbm8gbmVlZCB0byBtYWtlIHNsb3cgZml4ZXMgZm9yIGNvbnN0cnVjdG9yXG4gICAgb3IgcGFydGlhbCBhcHBsaWNhdGlvbi5cbiovXG5mdW5jdGlvbiBiaW5kKGZ1bmMsIGNvbnRleHQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3VtZW50cyk7XG4gIH07XG59XG5cbnZhciBMZXRoYXJneSA9IGxldGhhcmd5LkxldGhhcmd5O1xuXG5cblxudmFyIEVWVF9JRCA9ICd2aXJ0dWFsc2Nyb2xsJztcblxudmFyIHNyYyA9IFZpcnR1YWxTY3JvbGw7XG5cbnZhciBrZXlDb2RlcyA9IHtcbiAgICBMRUZUOiAzNyxcbiAgICBVUDogMzgsXG4gICAgUklHSFQ6IDM5LFxuICAgIERPV046IDQwLFxuICAgIFNQQUNFOiAzMlxufTtcblxuZnVuY3Rpb24gVmlydHVhbFNjcm9sbChvcHRpb25zKSB7XG4gICAgYmluZGFsbFN0YW5kYWxvbmUodGhpcywgJ19vbldoZWVsJywgJ19vbk1vdXNlV2hlZWwnLCAnX29uVG91Y2hTdGFydCcsICdfb25Ub3VjaE1vdmUnLCAnX29uS2V5RG93bicpO1xuXG4gICAgdGhpcy5lbCA9IHdpbmRvdztcbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmVsKSB7XG4gICAgICAgIHRoaXMuZWwgPSBvcHRpb25zLmVsO1xuICAgICAgICBkZWxldGUgb3B0aW9ucy5lbDtcbiAgICB9XG4gICAgdGhpcy5vcHRpb25zID0gb2JqZWN0QXNzaWduKHtcbiAgICAgICAgbW91c2VNdWx0aXBsaWVyOiAxLFxuICAgICAgICB0b3VjaE11bHRpcGxpZXI6IDIsXG4gICAgICAgIGZpcmVmb3hNdWx0aXBsaWVyOiAxNSxcbiAgICAgICAga2V5U3RlcDogMTIwLFxuICAgICAgICBwcmV2ZW50VG91Y2g6IGZhbHNlLFxuICAgICAgICB1bnByZXZlbnRUb3VjaENsYXNzOiAndnMtdG91Y2htb3ZlLWFsbG93ZWQnLFxuICAgICAgICBsaW1pdEluZXJ0aWE6IGZhbHNlLFxuICAgICAgICB1c2VLZXlib2FyZDogdHJ1ZSxcbiAgICAgICAgdXNlVG91Y2g6IHRydWVcbiAgICB9LCBvcHRpb25zKTtcblxuICAgIGlmICh0aGlzLm9wdGlvbnMubGltaXRJbmVydGlhKSB0aGlzLl9sZXRoYXJneSA9IG5ldyBMZXRoYXJneSgpO1xuXG4gICAgdGhpcy5fZW1pdHRlciA9IG5ldyB0aW55RW1pdHRlcigpO1xuICAgIHRoaXMuX2V2ZW50ID0ge1xuICAgICAgICB5OiAwLFxuICAgICAgICB4OiAwLFxuICAgICAgICBkZWx0YVg6IDAsXG4gICAgICAgIGRlbHRhWTogMFxuICAgIH07XG4gICAgdGhpcy50b3VjaFN0YXJ0WCA9IG51bGw7XG4gICAgdGhpcy50b3VjaFN0YXJ0WSA9IG51bGw7XG4gICAgdGhpcy5ib2R5VG91Y2hBY3Rpb24gPSBudWxsO1xuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5wYXNzaXZlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5saXN0ZW5lck9wdGlvbnMgPSB7cGFzc2l2ZTogdGhpcy5vcHRpb25zLnBhc3NpdmV9O1xuICAgIH1cbn1cblxuVmlydHVhbFNjcm9sbC5wcm90b3R5cGUuX25vdGlmeSA9IGZ1bmN0aW9uKGUpIHtcbiAgICB2YXIgZXZ0ID0gdGhpcy5fZXZlbnQ7XG4gICAgZXZ0LnggKz0gZXZ0LmRlbHRhWDtcbiAgICBldnQueSArPSBldnQuZGVsdGFZO1xuXG4gICB0aGlzLl9lbWl0dGVyLmVtaXQoRVZUX0lELCB7XG4gICAgICAgIHg6IGV2dC54LFxuICAgICAgICB5OiBldnQueSxcbiAgICAgICAgZGVsdGFYOiBldnQuZGVsdGFYLFxuICAgICAgICBkZWx0YVk6IGV2dC5kZWx0YVksXG4gICAgICAgIG9yaWdpbmFsRXZlbnQ6IGVcbiAgIH0pO1xufTtcblxuVmlydHVhbFNjcm9sbC5wcm90b3R5cGUuX29uV2hlZWwgPSBmdW5jdGlvbihlKSB7XG4gICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgaWYgKHRoaXMuX2xldGhhcmd5ICYmIHRoaXMuX2xldGhhcmd5LmNoZWNrKGUpID09PSBmYWxzZSkgcmV0dXJuO1xuICAgIHZhciBldnQgPSB0aGlzLl9ldmVudDtcblxuICAgIC8vIEluIENocm9tZSBhbmQgaW4gRmlyZWZveCAoYXQgbGVhc3QgdGhlIG5ldyBvbmUpXG4gICAgZXZ0LmRlbHRhWCA9IGUud2hlZWxEZWx0YVggfHwgZS5kZWx0YVggKiAtMTtcbiAgICBldnQuZGVsdGFZID0gZS53aGVlbERlbHRhWSB8fCBlLmRlbHRhWSAqIC0xO1xuXG4gICAgLy8gZm9yIG91ciBwdXJwb3NlIGRlbHRhbW9kZSA9IDEgbWVhbnMgdXNlciBpcyBvbiBhIHdoZWVsIG1vdXNlLCBub3QgdG91Y2ggcGFkXG4gICAgLy8gcmVhbCBtZWFuaW5nOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvV2hlZWxFdmVudCNEZWx0YV9tb2Rlc1xuICAgIGlmKHN1cHBvcnQuaXNGaXJlZm94ICYmIGUuZGVsdGFNb2RlID09IDEpIHtcbiAgICAgICAgZXZ0LmRlbHRhWCAqPSBvcHRpb25zLmZpcmVmb3hNdWx0aXBsaWVyO1xuICAgICAgICBldnQuZGVsdGFZICo9IG9wdGlvbnMuZmlyZWZveE11bHRpcGxpZXI7XG4gICAgfVxuXG4gICAgZXZ0LmRlbHRhWCAqPSBvcHRpb25zLm1vdXNlTXVsdGlwbGllcjtcbiAgICBldnQuZGVsdGFZICo9IG9wdGlvbnMubW91c2VNdWx0aXBsaWVyO1xuXG4gICAgdGhpcy5fbm90aWZ5KGUpO1xufTtcblxuVmlydHVhbFNjcm9sbC5wcm90b3R5cGUuX29uTW91c2VXaGVlbCA9IGZ1bmN0aW9uKGUpIHtcbiAgICBpZiAodGhpcy5vcHRpb25zLmxpbWl0SW5lcnRpYSAmJiB0aGlzLl9sZXRoYXJneS5jaGVjayhlKSA9PT0gZmFsc2UpIHJldHVybjtcblxuICAgIHZhciBldnQgPSB0aGlzLl9ldmVudDtcblxuICAgIC8vIEluIFNhZmFyaSwgSUUgYW5kIGluIENocm9tZSBpZiAnd2hlZWwnIGlzbid0IGRlZmluZWRcbiAgICBldnQuZGVsdGFYID0gKGUud2hlZWxEZWx0YVgpID8gZS53aGVlbERlbHRhWCA6IDA7XG4gICAgZXZ0LmRlbHRhWSA9IChlLndoZWVsRGVsdGFZKSA/IGUud2hlZWxEZWx0YVkgOiBlLndoZWVsRGVsdGE7XG5cbiAgICB0aGlzLl9ub3RpZnkoZSk7XG59O1xuXG5WaXJ0dWFsU2Nyb2xsLnByb3RvdHlwZS5fb25Ub3VjaFN0YXJ0ID0gZnVuY3Rpb24oZSkge1xuICAgIHZhciB0ID0gKGUudGFyZ2V0VG91Y2hlcykgPyBlLnRhcmdldFRvdWNoZXNbMF0gOiBlO1xuICAgIHRoaXMudG91Y2hTdGFydFggPSB0LnBhZ2VYO1xuICAgIHRoaXMudG91Y2hTdGFydFkgPSB0LnBhZ2VZO1xufTtcblxuVmlydHVhbFNjcm9sbC5wcm90b3R5cGUuX29uVG91Y2hNb3ZlID0gZnVuY3Rpb24oZSkge1xuICAgIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgIGlmKG9wdGlvbnMucHJldmVudFRvdWNoXG4gICAgICAgICYmICFlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMob3B0aW9ucy51bnByZXZlbnRUb3VjaENsYXNzKSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgdmFyIGV2dCA9IHRoaXMuX2V2ZW50O1xuXG4gICAgdmFyIHQgPSAoZS50YXJnZXRUb3VjaGVzKSA/IGUudGFyZ2V0VG91Y2hlc1swXSA6IGU7XG5cbiAgICBldnQuZGVsdGFYID0gKHQucGFnZVggLSB0aGlzLnRvdWNoU3RhcnRYKSAqIG9wdGlvbnMudG91Y2hNdWx0aXBsaWVyO1xuICAgIGV2dC5kZWx0YVkgPSAodC5wYWdlWSAtIHRoaXMudG91Y2hTdGFydFkpICogb3B0aW9ucy50b3VjaE11bHRpcGxpZXI7XG5cbiAgICB0aGlzLnRvdWNoU3RhcnRYID0gdC5wYWdlWDtcbiAgICB0aGlzLnRvdWNoU3RhcnRZID0gdC5wYWdlWTtcblxuICAgIHRoaXMuX25vdGlmeShlKTtcbn07XG5cblZpcnR1YWxTY3JvbGwucHJvdG90eXBlLl9vbktleURvd24gPSBmdW5jdGlvbihlKSB7XG4gICAgdmFyIGV2dCA9IHRoaXMuX2V2ZW50O1xuICAgIGV2dC5kZWx0YVggPSBldnQuZGVsdGFZID0gMDtcbiAgICB2YXIgd2luZG93SGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0IC0gNDA7XG5cbiAgICBzd2l0Y2goZS5rZXlDb2RlKSB7XG4gICAgICAgIGNhc2Uga2V5Q29kZXMuTEVGVDpcbiAgICAgICAgY2FzZSBrZXlDb2Rlcy5VUDpcbiAgICAgICAgICAgIGV2dC5kZWx0YVkgPSB0aGlzLm9wdGlvbnMua2V5U3RlcDtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2Uga2V5Q29kZXMuUklHSFQ6XG4gICAgICAgIGNhc2Uga2V5Q29kZXMuRE9XTjpcbiAgICAgICAgICAgIGV2dC5kZWx0YVkgPSAtIHRoaXMub3B0aW9ucy5rZXlTdGVwO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgIGUuc2hpZnRLZXk6XG4gICAgICAgICAgICBldnQuZGVsdGFZID0gd2luZG93SGVpZ2h0O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2Uga2V5Q29kZXMuU1BBQ0U6XG4gICAgICAgICAgICBldnQuZGVsdGFZID0gLSB3aW5kb3dIZWlnaHQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9ub3RpZnkoZSk7XG59O1xuXG5WaXJ0dWFsU2Nyb2xsLnByb3RvdHlwZS5fYmluZCA9IGZ1bmN0aW9uKCkge1xuICAgIGlmKHN1cHBvcnQuaGFzV2hlZWxFdmVudCkgdGhpcy5lbC5hZGRFdmVudExpc3RlbmVyKCd3aGVlbCcsIHRoaXMuX29uV2hlZWwsIHRoaXMubGlzdGVuZXJPcHRpb25zKTtcbiAgICBpZihzdXBwb3J0Lmhhc01vdXNlV2hlZWxFdmVudCkgdGhpcy5lbC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXdoZWVsJywgdGhpcy5fb25Nb3VzZVdoZWVsLCB0aGlzLmxpc3RlbmVyT3B0aW9ucyk7XG5cbiAgICBpZihzdXBwb3J0Lmhhc1RvdWNoICYmIHRoaXMub3B0aW9ucy51c2VUb3VjaCkge1xuICAgICAgICB0aGlzLmVsLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLl9vblRvdWNoU3RhcnQsIHRoaXMubGlzdGVuZXJPcHRpb25zKTtcbiAgICAgICAgdGhpcy5lbC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCB0aGlzLl9vblRvdWNoTW92ZSwgdGhpcy5saXN0ZW5lck9wdGlvbnMpO1xuICAgIH1cblxuICAgIGlmKHN1cHBvcnQuaGFzUG9pbnRlciAmJiBzdXBwb3J0Lmhhc1RvdWNoV2luKSB7XG4gICAgICAgIHRoaXMuYm9keVRvdWNoQWN0aW9uID0gZG9jdW1lbnQuYm9keS5zdHlsZS5tc1RvdWNoQWN0aW9uO1xuICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLm1zVG91Y2hBY3Rpb24gPSAnbm9uZSc7XG4gICAgICAgIHRoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcignTVNQb2ludGVyRG93bicsIHRoaXMuX29uVG91Y2hTdGFydCwgdHJ1ZSk7XG4gICAgICAgIHRoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcignTVNQb2ludGVyTW92ZScsIHRoaXMuX29uVG91Y2hNb3ZlLCB0cnVlKTtcbiAgICB9XG5cbiAgICBpZihzdXBwb3J0Lmhhc0tleURvd24gJiYgdGhpcy5vcHRpb25zLnVzZUtleWJvYXJkKSBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5fb25LZXlEb3duKTtcbn07XG5cblZpcnR1YWxTY3JvbGwucHJvdG90eXBlLl91bmJpbmQgPSBmdW5jdGlvbigpIHtcbiAgICBpZihzdXBwb3J0Lmhhc1doZWVsRXZlbnQpIHRoaXMuZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignd2hlZWwnLCB0aGlzLl9vbldoZWVsKTtcbiAgICBpZihzdXBwb3J0Lmhhc01vdXNlV2hlZWxFdmVudCkgdGhpcy5lbC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXdoZWVsJywgdGhpcy5fb25Nb3VzZVdoZWVsKTtcblxuICAgIGlmKHN1cHBvcnQuaGFzVG91Y2gpIHtcbiAgICAgICAgdGhpcy5lbC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5fb25Ub3VjaFN0YXJ0KTtcbiAgICAgICAgdGhpcy5lbC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCB0aGlzLl9vblRvdWNoTW92ZSk7XG4gICAgfVxuXG4gICAgaWYoc3VwcG9ydC5oYXNQb2ludGVyICYmIHN1cHBvcnQuaGFzVG91Y2hXaW4pIHtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5tc1RvdWNoQWN0aW9uID0gdGhpcy5ib2R5VG91Y2hBY3Rpb247XG4gICAgICAgIHRoaXMuZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignTVNQb2ludGVyRG93bicsIHRoaXMuX29uVG91Y2hTdGFydCwgdHJ1ZSk7XG4gICAgICAgIHRoaXMuZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignTVNQb2ludGVyTW92ZScsIHRoaXMuX29uVG91Y2hNb3ZlLCB0cnVlKTtcbiAgICB9XG5cbiAgICBpZihzdXBwb3J0Lmhhc0tleURvd24gJiYgdGhpcy5vcHRpb25zLnVzZUtleWJvYXJkKSBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5fb25LZXlEb3duKTtcbn07XG5cblZpcnR1YWxTY3JvbGwucHJvdG90eXBlLm9uID0gZnVuY3Rpb24oY2IsIGN0eCkge1xuICB0aGlzLl9lbWl0dGVyLm9uKEVWVF9JRCwgY2IsIGN0eCk7XG5cbiAgdmFyIGV2ZW50cyA9IHRoaXMuX2VtaXR0ZXIuZTtcbiAgaWYgKGV2ZW50cyAmJiBldmVudHNbRVZUX0lEXSAmJiBldmVudHNbRVZUX0lEXS5sZW5ndGggPT09IDEpIHRoaXMuX2JpbmQoKTtcbn07XG5cblZpcnR1YWxTY3JvbGwucHJvdG90eXBlLm9mZiA9IGZ1bmN0aW9uKGNiLCBjdHgpIHtcbiAgdGhpcy5fZW1pdHRlci5vZmYoRVZUX0lELCBjYiwgY3R4KTtcblxuICB2YXIgZXZlbnRzID0gdGhpcy5fZW1pdHRlci5lO1xuICBpZiAoIWV2ZW50c1tFVlRfSURdIHx8IGV2ZW50c1tFVlRfSURdLmxlbmd0aCA8PSAwKSB0aGlzLl91bmJpbmQoKTtcbn07XG5cblZpcnR1YWxTY3JvbGwucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGV2dCA9IHRoaXMuX2V2ZW50O1xuICAgIGV2dC54ID0gMDtcbiAgICBldnQueSA9IDA7XG59O1xuXG5WaXJ0dWFsU2Nyb2xsLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fZW1pdHRlci5vZmYoKTtcbiAgICB0aGlzLl91bmJpbmQoKTtcbn07XG5cbmZ1bmN0aW9uIGxlcnAoc3RhcnQsIGVuZCwgYW10KSB7XG4gIHJldHVybiAoMSAtIGFtdCkgKiBzdGFydCArIGFtdCAqIGVuZDtcbn1cblxuZnVuY3Rpb24gZ2V0VHJhbnNsYXRlKGVsKSB7XG4gIHZhciB0cmFuc2xhdGUgPSB7fTtcbiAgaWYgKCF3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSkgcmV0dXJuO1xuICB2YXIgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGVsKTtcbiAgdmFyIHRyYW5zZm9ybSA9IHN0eWxlLnRyYW5zZm9ybSB8fCBzdHlsZS53ZWJraXRUcmFuc2Zvcm0gfHwgc3R5bGUubW96VHJhbnNmb3JtO1xuICB2YXIgbWF0ID0gdHJhbnNmb3JtLm1hdGNoKC9ebWF0cml4M2RcXCgoLispXFwpJC8pO1xuXG4gIGlmIChtYXQpIHtcbiAgICB0cmFuc2xhdGUueCA9IG1hdCA/IHBhcnNlRmxvYXQobWF0WzFdLnNwbGl0KCcsICcpWzEyXSkgOiAwO1xuICAgIHRyYW5zbGF0ZS55ID0gbWF0ID8gcGFyc2VGbG9hdChtYXRbMV0uc3BsaXQoJywgJylbMTNdKSA6IDA7XG4gIH0gZWxzZSB7XG4gICAgbWF0ID0gdHJhbnNmb3JtLm1hdGNoKC9ebWF0cml4XFwoKC4rKVxcKSQvKTtcbiAgICB0cmFuc2xhdGUueCA9IG1hdCA/IHBhcnNlRmxvYXQobWF0WzFdLnNwbGl0KCcsICcpWzRdKSA6IDA7XG4gICAgdHJhbnNsYXRlLnkgPSBtYXQgPyBwYXJzZUZsb2F0KG1hdFsxXS5zcGxpdCgnLCAnKVs1XSkgOiAwO1xuICB9XG5cbiAgcmV0dXJuIHRyYW5zbGF0ZTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGFuIGFycmF5IGNvbnRhaW5pbmcgYWxsIHRoZSBwYXJlbnQgbm9kZXMgb2YgdGhlIGdpdmVuIG5vZGVcbiAqIEBwYXJhbSAge29iamVjdH0gbm9kZVxuICogQHJldHVybiB7YXJyYXl9IHBhcmVudCBub2Rlc1xuICovXG5mdW5jdGlvbiBnZXRQYXJlbnRzKGVsZW0pIHtcbiAgLy8gU2V0IHVwIGEgcGFyZW50IGFycmF5XG4gIHZhciBwYXJlbnRzID0gW107IC8vIFB1c2ggZWFjaCBwYXJlbnQgZWxlbWVudCB0byB0aGUgYXJyYXlcblxuICBmb3IgKDsgZWxlbSAmJiBlbGVtICE9PSBkb2N1bWVudDsgZWxlbSA9IGVsZW0ucGFyZW50Tm9kZSkge1xuICAgIHBhcmVudHMucHVzaChlbGVtKTtcbiAgfSAvLyBSZXR1cm4gb3VyIHBhcmVudCBhcnJheVxuXG5cbiAgcmV0dXJuIHBhcmVudHM7XG59IC8vIGh0dHBzOi8vZ29tYWtldGhpbmdzLmNvbS9ob3ctdG8tZ2V0LXRoZS1jbG9zZXN0LXBhcmVudC1lbGVtZW50LXdpdGgtYS1tYXRjaGluZy1zZWxlY3Rvci11c2luZy12YW5pbGxhLWphdmFzY3JpcHQvXG5cbi8qKlxuICogaHR0cHM6Ly9naXRodWIuY29tL2dyZS9iZXppZXItZWFzaW5nXG4gKiBCZXppZXJFYXNpbmcgLSB1c2UgYmV6aWVyIGN1cnZlIGZvciB0cmFuc2l0aW9uIGVhc2luZyBmdW5jdGlvblxuICogYnkgR2HDq3RhbiBSZW5hdWRlYXUgMjAxNCAtIDIwMTUg4oCTIE1JVCBMaWNlbnNlXG4gKi9cblxuLy8gVGhlc2UgdmFsdWVzIGFyZSBlc3RhYmxpc2hlZCBieSBlbXBpcmljaXNtIHdpdGggdGVzdHMgKHRyYWRlb2ZmOiBwZXJmb3JtYW5jZSBWUyBwcmVjaXNpb24pXG52YXIgTkVXVE9OX0lURVJBVElPTlMgPSA0O1xudmFyIE5FV1RPTl9NSU5fU0xPUEUgPSAwLjAwMTtcbnZhciBTVUJESVZJU0lPTl9QUkVDSVNJT04gPSAwLjAwMDAwMDE7XG52YXIgU1VCRElWSVNJT05fTUFYX0lURVJBVElPTlMgPSAxMDtcblxudmFyIGtTcGxpbmVUYWJsZVNpemUgPSAxMTtcbnZhciBrU2FtcGxlU3RlcFNpemUgPSAxLjAgLyAoa1NwbGluZVRhYmxlU2l6ZSAtIDEuMCk7XG5cbnZhciBmbG9hdDMyQXJyYXlTdXBwb3J0ZWQgPSB0eXBlb2YgRmxvYXQzMkFycmF5ID09PSAnZnVuY3Rpb24nO1xuXG5mdW5jdGlvbiBBIChhQTEsIGFBMikgeyByZXR1cm4gMS4wIC0gMy4wICogYUEyICsgMy4wICogYUExOyB9XG5mdW5jdGlvbiBCIChhQTEsIGFBMikgeyByZXR1cm4gMy4wICogYUEyIC0gNi4wICogYUExOyB9XG5mdW5jdGlvbiBDIChhQTEpICAgICAgeyByZXR1cm4gMy4wICogYUExOyB9XG5cbi8vIFJldHVybnMgeCh0KSBnaXZlbiB0LCB4MSwgYW5kIHgyLCBvciB5KHQpIGdpdmVuIHQsIHkxLCBhbmQgeTIuXG5mdW5jdGlvbiBjYWxjQmV6aWVyIChhVCwgYUExLCBhQTIpIHsgcmV0dXJuICgoQShhQTEsIGFBMikgKiBhVCArIEIoYUExLCBhQTIpKSAqIGFUICsgQyhhQTEpKSAqIGFUOyB9XG5cbi8vIFJldHVybnMgZHgvZHQgZ2l2ZW4gdCwgeDEsIGFuZCB4Miwgb3IgZHkvZHQgZ2l2ZW4gdCwgeTEsIGFuZCB5Mi5cbmZ1bmN0aW9uIGdldFNsb3BlIChhVCwgYUExLCBhQTIpIHsgcmV0dXJuIDMuMCAqIEEoYUExLCBhQTIpICogYVQgKiBhVCArIDIuMCAqIEIoYUExLCBhQTIpICogYVQgKyBDKGFBMSk7IH1cblxuZnVuY3Rpb24gYmluYXJ5U3ViZGl2aWRlIChhWCwgYUEsIGFCLCBtWDEsIG1YMikge1xuICB2YXIgY3VycmVudFgsIGN1cnJlbnRULCBpID0gMDtcbiAgZG8ge1xuICAgIGN1cnJlbnRUID0gYUEgKyAoYUIgLSBhQSkgLyAyLjA7XG4gICAgY3VycmVudFggPSBjYWxjQmV6aWVyKGN1cnJlbnRULCBtWDEsIG1YMikgLSBhWDtcbiAgICBpZiAoY3VycmVudFggPiAwLjApIHtcbiAgICAgIGFCID0gY3VycmVudFQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFBID0gY3VycmVudFQ7XG4gICAgfVxuICB9IHdoaWxlIChNYXRoLmFicyhjdXJyZW50WCkgPiBTVUJESVZJU0lPTl9QUkVDSVNJT04gJiYgKytpIDwgU1VCRElWSVNJT05fTUFYX0lURVJBVElPTlMpO1xuICByZXR1cm4gY3VycmVudFQ7XG59XG5cbmZ1bmN0aW9uIG5ld3RvblJhcGhzb25JdGVyYXRlIChhWCwgYUd1ZXNzVCwgbVgxLCBtWDIpIHtcbiBmb3IgKHZhciBpID0gMDsgaSA8IE5FV1RPTl9JVEVSQVRJT05TOyArK2kpIHtcbiAgIHZhciBjdXJyZW50U2xvcGUgPSBnZXRTbG9wZShhR3Vlc3NULCBtWDEsIG1YMik7XG4gICBpZiAoY3VycmVudFNsb3BlID09PSAwLjApIHtcbiAgICAgcmV0dXJuIGFHdWVzc1Q7XG4gICB9XG4gICB2YXIgY3VycmVudFggPSBjYWxjQmV6aWVyKGFHdWVzc1QsIG1YMSwgbVgyKSAtIGFYO1xuICAgYUd1ZXNzVCAtPSBjdXJyZW50WCAvIGN1cnJlbnRTbG9wZTtcbiB9XG4gcmV0dXJuIGFHdWVzc1Q7XG59XG5cbmZ1bmN0aW9uIExpbmVhckVhc2luZyAoeCkge1xuICByZXR1cm4geDtcbn1cblxudmFyIHNyYyQxID0gZnVuY3Rpb24gYmV6aWVyIChtWDEsIG1ZMSwgbVgyLCBtWTIpIHtcbiAgaWYgKCEoMCA8PSBtWDEgJiYgbVgxIDw9IDEgJiYgMCA8PSBtWDIgJiYgbVgyIDw9IDEpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdiZXppZXIgeCB2YWx1ZXMgbXVzdCBiZSBpbiBbMCwgMV0gcmFuZ2UnKTtcbiAgfVxuXG4gIGlmIChtWDEgPT09IG1ZMSAmJiBtWDIgPT09IG1ZMikge1xuICAgIHJldHVybiBMaW5lYXJFYXNpbmc7XG4gIH1cblxuICAvLyBQcmVjb21wdXRlIHNhbXBsZXMgdGFibGVcbiAgdmFyIHNhbXBsZVZhbHVlcyA9IGZsb2F0MzJBcnJheVN1cHBvcnRlZCA/IG5ldyBGbG9hdDMyQXJyYXkoa1NwbGluZVRhYmxlU2l6ZSkgOiBuZXcgQXJyYXkoa1NwbGluZVRhYmxlU2l6ZSk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwga1NwbGluZVRhYmxlU2l6ZTsgKytpKSB7XG4gICAgc2FtcGxlVmFsdWVzW2ldID0gY2FsY0JlemllcihpICoga1NhbXBsZVN0ZXBTaXplLCBtWDEsIG1YMik7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRURm9yWCAoYVgpIHtcbiAgICB2YXIgaW50ZXJ2YWxTdGFydCA9IDAuMDtcbiAgICB2YXIgY3VycmVudFNhbXBsZSA9IDE7XG4gICAgdmFyIGxhc3RTYW1wbGUgPSBrU3BsaW5lVGFibGVTaXplIC0gMTtcblxuICAgIGZvciAoOyBjdXJyZW50U2FtcGxlICE9PSBsYXN0U2FtcGxlICYmIHNhbXBsZVZhbHVlc1tjdXJyZW50U2FtcGxlXSA8PSBhWDsgKytjdXJyZW50U2FtcGxlKSB7XG4gICAgICBpbnRlcnZhbFN0YXJ0ICs9IGtTYW1wbGVTdGVwU2l6ZTtcbiAgICB9XG4gICAgLS1jdXJyZW50U2FtcGxlO1xuXG4gICAgLy8gSW50ZXJwb2xhdGUgdG8gcHJvdmlkZSBhbiBpbml0aWFsIGd1ZXNzIGZvciB0XG4gICAgdmFyIGRpc3QgPSAoYVggLSBzYW1wbGVWYWx1ZXNbY3VycmVudFNhbXBsZV0pIC8gKHNhbXBsZVZhbHVlc1tjdXJyZW50U2FtcGxlICsgMV0gLSBzYW1wbGVWYWx1ZXNbY3VycmVudFNhbXBsZV0pO1xuICAgIHZhciBndWVzc0ZvclQgPSBpbnRlcnZhbFN0YXJ0ICsgZGlzdCAqIGtTYW1wbGVTdGVwU2l6ZTtcblxuICAgIHZhciBpbml0aWFsU2xvcGUgPSBnZXRTbG9wZShndWVzc0ZvclQsIG1YMSwgbVgyKTtcbiAgICBpZiAoaW5pdGlhbFNsb3BlID49IE5FV1RPTl9NSU5fU0xPUEUpIHtcbiAgICAgIHJldHVybiBuZXd0b25SYXBoc29uSXRlcmF0ZShhWCwgZ3Vlc3NGb3JULCBtWDEsIG1YMik7XG4gICAgfSBlbHNlIGlmIChpbml0aWFsU2xvcGUgPT09IDAuMCkge1xuICAgICAgcmV0dXJuIGd1ZXNzRm9yVDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGJpbmFyeVN1YmRpdmlkZShhWCwgaW50ZXJ2YWxTdGFydCwgaW50ZXJ2YWxTdGFydCArIGtTYW1wbGVTdGVwU2l6ZSwgbVgxLCBtWDIpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBCZXppZXJFYXNpbmcgKHgpIHtcbiAgICAvLyBCZWNhdXNlIEphdmFTY3JpcHQgbnVtYmVyIGFyZSBpbXByZWNpc2UsIHdlIHNob3VsZCBndWFyYW50ZWUgdGhlIGV4dHJlbWVzIGFyZSByaWdodC5cbiAgICBpZiAoeCA9PT0gMCkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGlmICh4ID09PSAxKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gICAgcmV0dXJuIGNhbGNCZXppZXIoZ2V0VEZvclgoeCksIG1ZMSwgbVkyKTtcbiAgfTtcbn07XG5cbnZhciBrZXlDb2RlcyQxID0ge1xuICBMRUZUOiAzNyxcbiAgVVA6IDM4LFxuICBSSUdIVDogMzksXG4gIERPV046IDQwLFxuICBTUEFDRTogMzIsXG4gIFRBQjogOSxcbiAgUEFHRVVQOiAzMyxcbiAgUEFHRURPV046IDM0LFxuICBIT01FOiAzNixcbiAgRU5EOiAzNVxufTtcblxudmFyIF9kZWZhdWx0JDIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Db3JlKSB7XG4gIF9pbmhlcml0cyhfZGVmYXVsdCwgX0NvcmUpO1xuXG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoX2RlZmF1bHQpO1xuXG4gIGZ1bmN0aW9uIF9kZWZhdWx0KCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBfZGVmYXVsdCk7XG5cbiAgICBpZiAoaGlzdG9yeS5zY3JvbGxSZXN0b3JhdGlvbikge1xuICAgICAgaGlzdG9yeS5zY3JvbGxSZXN0b3JhdGlvbiA9ICdtYW51YWwnO1xuICAgIH1cblxuICAgIHdpbmRvdy5zY3JvbGxUbygwLCAwKTtcbiAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuICAgIGlmIChfdGhpcy5pbmVydGlhKSBfdGhpcy5sZXJwID0gX3RoaXMuaW5lcnRpYSAqIDAuMTtcbiAgICBfdGhpcy5pc1Njcm9sbGluZyA9IGZhbHNlO1xuICAgIF90aGlzLmlzRHJhZ2dpbmdTY3JvbGxiYXIgPSBmYWxzZTtcbiAgICBfdGhpcy5pc1RpY2tpbmcgPSBmYWxzZTtcbiAgICBfdGhpcy5oYXNTY3JvbGxUaWNraW5nID0gZmFsc2U7XG4gICAgX3RoaXMucGFyYWxsYXhFbGVtZW50cyA9IHt9O1xuICAgIF90aGlzLnN0b3AgPSBmYWxzZTtcbiAgICBfdGhpcy5zY3JvbGxiYXJDb250YWluZXIgPSBvcHRpb25zLnNjcm9sbGJhckNvbnRhaW5lcjtcbiAgICBfdGhpcy5jaGVja0tleSA9IF90aGlzLmNoZWNrS2V5LmJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgX3RoaXMuY2hlY2tLZXksIGZhbHNlKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoX2RlZmF1bHQsIFt7XG4gICAga2V5OiBcImluaXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB0aGlzLmh0bWwuY2xhc3NMaXN0LmFkZCh0aGlzLnNtb290aENsYXNzKTtcbiAgICAgIHRoaXMuaHRtbC5zZXRBdHRyaWJ1dGUoXCJkYXRhLVwiLmNvbmNhdCh0aGlzLm5hbWUsIFwiLWRpcmVjdGlvblwiKSwgdGhpcy5kaXJlY3Rpb24pO1xuICAgICAgdGhpcy5pbnN0YW5jZSA9IF9vYmplY3RTcHJlYWQyKHtcbiAgICAgICAgZGVsdGE6IHtcbiAgICAgICAgICB4OiB0aGlzLmluaXRQb3NpdGlvbi54LFxuICAgICAgICAgIHk6IHRoaXMuaW5pdFBvc2l0aW9uLnlcbiAgICAgICAgfSxcbiAgICAgICAgc2Nyb2xsOiB7XG4gICAgICAgICAgeDogdGhpcy5pbml0UG9zaXRpb24ueCxcbiAgICAgICAgICB5OiB0aGlzLmluaXRQb3NpdGlvbi55XG4gICAgICAgIH1cbiAgICAgIH0sIHRoaXMuaW5zdGFuY2UpO1xuICAgICAgdGhpcy52cyA9IG5ldyBzcmMoe1xuICAgICAgICBlbDogdGhpcy5zY3JvbGxGcm9tQW55d2hlcmUgPyBkb2N1bWVudCA6IHRoaXMuZWwsXG4gICAgICAgIG1vdXNlTXVsdGlwbGllcjogbmF2aWdhdG9yLnBsYXRmb3JtLmluZGV4T2YoJ1dpbicpID4gLTEgPyAxIDogMC40LFxuICAgICAgICBmaXJlZm94TXVsdGlwbGllcjogdGhpcy5maXJlZm94TXVsdGlwbGllcixcbiAgICAgICAgdG91Y2hNdWx0aXBsaWVyOiB0aGlzLnRvdWNoTXVsdGlwbGllcixcbiAgICAgICAgdXNlS2V5Ym9hcmQ6IGZhbHNlLFxuICAgICAgICBwYXNzaXZlOiB0cnVlXG4gICAgICB9KTtcbiAgICAgIHRoaXMudnMub24oZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgaWYgKF90aGlzMi5zdG9wKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFfdGhpczIuaXNEcmFnZ2luZ1Njcm9sbGJhcikge1xuICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpczIudXBkYXRlRGVsdGEoZSk7XG5cbiAgICAgICAgICAgIGlmICghX3RoaXMyLmlzU2Nyb2xsaW5nKSBfdGhpczIuc3RhcnRTY3JvbGxpbmcoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICB0aGlzLnNldFNjcm9sbExpbWl0KCk7XG4gICAgICB0aGlzLmluaXRTY3JvbGxCYXIoKTtcbiAgICAgIHRoaXMuYWRkU2VjdGlvbnMoKTtcbiAgICAgIHRoaXMuYWRkRWxlbWVudHMoKTtcbiAgICAgIHRoaXMuY2hlY2tTY3JvbGwodHJ1ZSk7XG4gICAgICB0aGlzLnRyYW5zZm9ybUVsZW1lbnRzKHRydWUsIHRydWUpO1xuXG4gICAgICBfZ2V0KF9nZXRQcm90b3R5cGVPZihfZGVmYXVsdC5wcm90b3R5cGUpLCBcImluaXRcIiwgdGhpcykuY2FsbCh0aGlzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2V0U2Nyb2xsTGltaXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0U2Nyb2xsTGltaXQoKSB7XG4gICAgICB0aGlzLmluc3RhbmNlLmxpbWl0LnkgPSB0aGlzLmVsLm9mZnNldEhlaWdodCAtIHRoaXMud2luZG93SGVpZ2h0O1xuXG4gICAgICBpZiAodGhpcy5kaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJykge1xuICAgICAgICB2YXIgdG90YWxXaWR0aCA9IDA7XG4gICAgICAgIHZhciBub2RlcyA9IHRoaXMuZWwuY2hpbGRyZW47XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHRvdGFsV2lkdGggKz0gbm9kZXNbaV0ub2Zmc2V0V2lkdGg7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmluc3RhbmNlLmxpbWl0LnggPSB0b3RhbFdpZHRoIC0gdGhpcy53aW5kb3dXaWR0aDtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic3RhcnRTY3JvbGxpbmdcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3RhcnRTY3JvbGxpbmcoKSB7XG4gICAgICB0aGlzLnN0YXJ0U2Nyb2xsVHMgPSBEYXRlLm5vdygpOyAvLyBSZWNvcmQgdGltZXN0YW1wXG5cbiAgICAgIHRoaXMuaXNTY3JvbGxpbmcgPSB0cnVlO1xuICAgICAgdGhpcy5jaGVja1Njcm9sbCgpO1xuICAgICAgdGhpcy5odG1sLmNsYXNzTGlzdC5hZGQodGhpcy5zY3JvbGxpbmdDbGFzcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInN0b3BTY3JvbGxpbmdcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3RvcFNjcm9sbGluZygpIHtcbiAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuY2hlY2tTY3JvbGxSYWYpOyAvLyBQcmV2ZW50IGNoZWNrU2Nyb2xsIHRvIGNvbnRpbnVlIGxvb3BpbmdcbiAgICAgIC8vUGV2ZW50IHNjcm9sbGJhciBnbGl0Y2gvbG9ja2luZ1xuXG4gICAgICB0aGlzLnN0YXJ0U2Nyb2xsVHMgPSB1bmRlZmluZWQ7XG5cbiAgICAgIGlmICh0aGlzLnNjcm9sbFRvUmFmKSB7XG4gICAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuc2Nyb2xsVG9SYWYpO1xuICAgICAgICB0aGlzLnNjcm9sbFRvUmFmID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5pc1Njcm9sbGluZyA9IGZhbHNlO1xuICAgICAgdGhpcy5pbnN0YW5jZS5zY3JvbGwueSA9IE1hdGgucm91bmQodGhpcy5pbnN0YW5jZS5zY3JvbGwueSk7XG4gICAgICB0aGlzLmh0bWwuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLnNjcm9sbGluZ0NsYXNzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY2hlY2tLZXlcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2hlY2tLZXkoZSkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIGlmICh0aGlzLnN0b3ApIHtcbiAgICAgICAgLy8gSWYgd2UgYXJlIHN0b3BwZWQsIHdlIGRvbid0IHdhbnQgYW55IHNjcm9sbCB0byBvY2N1ciBiZWNhdXNlIG9mIGEga2V5cHJlc3NcbiAgICAgICAgLy8gUHJldmVudCB0YWIgdG8gc2Nyb2xsIHRvIGFjdGl2ZUVsZW1lbnRcbiAgICAgICAgaWYgKGUua2V5Q29kZSA9PSBrZXlDb2RlcyQxLlRBQikge1xuICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvLyBNYWtlIHN1cmUgbmF0aXZlIHNjcm9sbCBpcyBhbHdheXMgYXQgdG9wIG9mIHBhZ2VcbiAgICAgICAgICAgIF90aGlzMy5odG1sLnNjcm9sbFRvcCA9IDA7XG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCA9IDA7XG4gICAgICAgICAgICBfdGhpczMuaHRtbC5zY3JvbGxMZWZ0ID0gMDtcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc2Nyb2xsTGVmdCA9IDA7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHN3aXRjaCAoZS5rZXlDb2RlKSB7XG4gICAgICAgIGNhc2Uga2V5Q29kZXMkMS5UQUI6XG4gICAgICAgICAgLy8gRG8gbm90IHJlbW92ZSB0aGUgUkFGXG4gICAgICAgICAgLy8gSXQgYWxsb3dzIHRvIG92ZXJyaWRlIHRoZSBicm93c2VyJ3MgbmF0aXZlIHNjcm9sbFRvLCB3aGljaCBpcyBlc3NlbnRpYWxcbiAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gTWFrZSBzdXJlIG5hdGl2ZSBzY3JvbGwgaXMgYWx3YXlzIGF0IHRvcCBvZiBwYWdlXG4gICAgICAgICAgICBfdGhpczMuaHRtbC5zY3JvbGxUb3AgPSAwO1xuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5zY3JvbGxUb3AgPSAwO1xuICAgICAgICAgICAgX3RoaXMzLmh0bWwuc2Nyb2xsTGVmdCA9IDA7XG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LnNjcm9sbExlZnQgPSAwOyAvLyBSZXF1ZXN0IHNjcm9sbFRvIG9uIHRoZSBmb2N1c2VkRWxlbWVudCwgcHV0dGluZyBpdCBhdCB0aGUgY2VudGVyIG9mIHRoZSBzY3JlZW5cblxuICAgICAgICAgICAgX3RoaXMzLnNjcm9sbFRvKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQsIHtcbiAgICAgICAgICAgICAgb2Zmc2V0OiAtd2luZG93LmlubmVySGVpZ2h0IC8gMlxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBrZXlDb2RlcyQxLlVQOlxuICAgICAgICAgIGlmICh0aGlzLmlzQWN0aXZlRWxlbWVudFNjcm9sbFNlbnNpdGl2ZSgpKSB7XG4gICAgICAgICAgICB0aGlzLmluc3RhbmNlLmRlbHRhW3RoaXMuZGlyZWN0aW9uQXhpc10gLT0gMjQwO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2Uga2V5Q29kZXMkMS5ET1dOOlxuICAgICAgICAgIGlmICh0aGlzLmlzQWN0aXZlRWxlbWVudFNjcm9sbFNlbnNpdGl2ZSgpKSB7XG4gICAgICAgICAgICB0aGlzLmluc3RhbmNlLmRlbHRhW3RoaXMuZGlyZWN0aW9uQXhpc10gKz0gMjQwO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2Uga2V5Q29kZXMkMS5QQUdFVVA6XG4gICAgICAgICAgdGhpcy5pbnN0YW5jZS5kZWx0YVt0aGlzLmRpcmVjdGlvbkF4aXNdIC09IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIGtleUNvZGVzJDEuUEFHRURPV046XG4gICAgICAgICAgdGhpcy5pbnN0YW5jZS5kZWx0YVt0aGlzLmRpcmVjdGlvbkF4aXNdICs9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIGtleUNvZGVzJDEuSE9NRTpcbiAgICAgICAgICB0aGlzLmluc3RhbmNlLmRlbHRhW3RoaXMuZGlyZWN0aW9uQXhpc10gLT0gdGhpcy5pbnN0YW5jZS5saW1pdFt0aGlzLmRpcmVjdGlvbkF4aXNdO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2Uga2V5Q29kZXMkMS5FTkQ6XG4gICAgICAgICAgdGhpcy5pbnN0YW5jZS5kZWx0YVt0aGlzLmRpcmVjdGlvbkF4aXNdICs9IHRoaXMuaW5zdGFuY2UubGltaXRbdGhpcy5kaXJlY3Rpb25BeGlzXTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIGtleUNvZGVzJDEuU1BBQ0U6XG4gICAgICAgICAgaWYgKHRoaXMuaXNBY3RpdmVFbGVtZW50U2Nyb2xsU2Vuc2l0aXZlKCkpIHtcbiAgICAgICAgICAgIGlmIChlLnNoaWZ0S2V5KSB7XG4gICAgICAgICAgICAgIHRoaXMuaW5zdGFuY2UuZGVsdGFbdGhpcy5kaXJlY3Rpb25BeGlzXSAtPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLmluc3RhbmNlLmRlbHRhW3RoaXMuZGlyZWN0aW9uQXhpc10gKz0gd2luZG93LmlubmVySGVpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5pbnN0YW5jZS5kZWx0YVt0aGlzLmRpcmVjdGlvbkF4aXNdIDwgMCkgdGhpcy5pbnN0YW5jZS5kZWx0YVt0aGlzLmRpcmVjdGlvbkF4aXNdID0gMDtcbiAgICAgIGlmICh0aGlzLmluc3RhbmNlLmRlbHRhW3RoaXMuZGlyZWN0aW9uQXhpc10gPiB0aGlzLmluc3RhbmNlLmxpbWl0W3RoaXMuZGlyZWN0aW9uQXhpc10pIHRoaXMuaW5zdGFuY2UuZGVsdGFbdGhpcy5kaXJlY3Rpb25BeGlzXSA9IHRoaXMuaW5zdGFuY2UubGltaXRbdGhpcy5kaXJlY3Rpb25BeGlzXTtcbiAgICAgIHRoaXMuc3RvcFNjcm9sbGluZygpOyAvLyBTdG9wIGFueSBtb3ZlbWVudCwgYWxsb3dzIHRvIGtpbGwgYW55IG90aGVyIGBzY3JvbGxUb2Agc3RpbGwgaGFwcGVuaW5nXG5cbiAgICAgIHRoaXMuaXNTY3JvbGxpbmcgPSB0cnVlO1xuICAgICAgdGhpcy5jaGVja1Njcm9sbCgpO1xuICAgICAgdGhpcy5odG1sLmNsYXNzTGlzdC5hZGQodGhpcy5zY3JvbGxpbmdDbGFzcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImlzQWN0aXZlRWxlbWVudFNjcm9sbFNlbnNpdGl2ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpc0FjdGl2ZUVsZW1lbnRTY3JvbGxTZW5zaXRpdmUoKSB7XG4gICAgICByZXR1cm4gIShkb2N1bWVudC5hY3RpdmVFbGVtZW50IGluc3RhbmNlb2YgSFRNTElucHV0RWxlbWVudCkgJiYgIShkb2N1bWVudC5hY3RpdmVFbGVtZW50IGluc3RhbmNlb2YgSFRNTFRleHRBcmVhRWxlbWVudCkgJiYgIShkb2N1bWVudC5hY3RpdmVFbGVtZW50IGluc3RhbmNlb2YgSFRNTEJ1dHRvbkVsZW1lbnQpICYmICEoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBpbnN0YW5jZW9mIEhUTUxTZWxlY3RFbGVtZW50KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY2hlY2tTY3JvbGxcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2hlY2tTY3JvbGwoKSB7XG4gICAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgICAgdmFyIGZvcmNlZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZmFsc2U7XG5cbiAgICAgIGlmIChmb3JjZWQgfHwgdGhpcy5pc1Njcm9sbGluZyB8fCB0aGlzLmlzRHJhZ2dpbmdTY3JvbGxiYXIpIHtcbiAgICAgICAgaWYgKCF0aGlzLmhhc1Njcm9sbFRpY2tpbmcpIHtcbiAgICAgICAgICB0aGlzLmNoZWNrU2Nyb2xsUmFmID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpczQuY2hlY2tTY3JvbGwoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB0aGlzLmhhc1Njcm9sbFRpY2tpbmcgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy51cGRhdGVTY3JvbGwoKTtcbiAgICAgICAgdmFyIGRpc3RhbmNlID0gTWF0aC5hYnModGhpcy5pbnN0YW5jZS5kZWx0YVt0aGlzLmRpcmVjdGlvbkF4aXNdIC0gdGhpcy5pbnN0YW5jZS5zY3JvbGxbdGhpcy5kaXJlY3Rpb25BeGlzXSk7XG4gICAgICAgIHZhciB0aW1lU2luY2VTdGFydCA9IERhdGUubm93KCkgLSB0aGlzLnN0YXJ0U2Nyb2xsVHM7IC8vIEdldCB0aGUgdGltZSBzaW5jZSB0aGUgc2Nyb2xsIHdhcyBzdGFydGVkOiB0aGUgc2Nyb2xsIGNhbiBiZSBzdG9wcGVkIGFnYWluIG9ubHkgcGFzdCAxMDBtc1xuXG4gICAgICAgIGlmICghdGhpcy5hbmltYXRpbmdTY3JvbGwgJiYgdGltZVNpbmNlU3RhcnQgPiAxMDAgJiYgKGRpc3RhbmNlIDwgMC41ICYmIHRoaXMuaW5zdGFuY2UuZGVsdGFbdGhpcy5kaXJlY3Rpb25BeGlzXSAhPSAwIHx8IGRpc3RhbmNlIDwgMC41ICYmIHRoaXMuaW5zdGFuY2UuZGVsdGFbdGhpcy5kaXJlY3Rpb25BeGlzXSA9PSAwKSkge1xuICAgICAgICAgIHRoaXMuc3RvcFNjcm9sbGluZygpO1xuICAgICAgICB9XG5cbiAgICAgICAgT2JqZWN0LmVudHJpZXModGhpcy5zZWN0aW9ucykuZm9yRWFjaChmdW5jdGlvbiAoX3JlZikge1xuICAgICAgICAgIHZhciBfcmVmMiA9IF9zbGljZWRUb0FycmF5KF9yZWYsIDIpLFxuICAgICAgICAgICAgICBpID0gX3JlZjJbMF0sXG4gICAgICAgICAgICAgIHNlY3Rpb24gPSBfcmVmMlsxXTtcblxuICAgICAgICAgIGlmIChzZWN0aW9uLnBlcnNpc3RlbnQgfHwgX3RoaXM0Lmluc3RhbmNlLnNjcm9sbFtfdGhpczQuZGlyZWN0aW9uQXhpc10gPiBzZWN0aW9uLm9mZnNldFtfdGhpczQuZGlyZWN0aW9uQXhpc10gJiYgX3RoaXM0Lmluc3RhbmNlLnNjcm9sbFtfdGhpczQuZGlyZWN0aW9uQXhpc10gPCBzZWN0aW9uLmxpbWl0W190aGlzNC5kaXJlY3Rpb25BeGlzXSkge1xuICAgICAgICAgICAgaWYgKF90aGlzNC5kaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJykge1xuICAgICAgICAgICAgICBfdGhpczQudHJhbnNmb3JtKHNlY3Rpb24uZWwsIC1fdGhpczQuaW5zdGFuY2Uuc2Nyb2xsW190aGlzNC5kaXJlY3Rpb25BeGlzXSwgMCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBfdGhpczQudHJhbnNmb3JtKHNlY3Rpb24uZWwsIDAsIC1fdGhpczQuaW5zdGFuY2Uuc2Nyb2xsW190aGlzNC5kaXJlY3Rpb25BeGlzXSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghc2VjdGlvbi5pblZpZXcpIHtcbiAgICAgICAgICAgICAgc2VjdGlvbi5pblZpZXcgPSB0cnVlO1xuICAgICAgICAgICAgICBzZWN0aW9uLmVsLnN0eWxlLm9wYWNpdHkgPSAxO1xuICAgICAgICAgICAgICBzZWN0aW9uLmVsLnN0eWxlLnBvaW50ZXJFdmVudHMgPSAnYWxsJztcbiAgICAgICAgICAgICAgc2VjdGlvbi5lbC5zZXRBdHRyaWJ1dGUoXCJkYXRhLVwiLmNvbmNhdChfdGhpczQubmFtZSwgXCItc2VjdGlvbi1pbnZpZXdcIiksICcnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHNlY3Rpb24uaW5WaWV3IHx8IGZvcmNlZCkge1xuICAgICAgICAgICAgICBzZWN0aW9uLmluVmlldyA9IGZhbHNlO1xuICAgICAgICAgICAgICBzZWN0aW9uLmVsLnN0eWxlLm9wYWNpdHkgPSAwO1xuICAgICAgICAgICAgICBzZWN0aW9uLmVsLnN0eWxlLnBvaW50ZXJFdmVudHMgPSAnbm9uZSc7XG4gICAgICAgICAgICAgIHNlY3Rpb24uZWwucmVtb3ZlQXR0cmlidXRlKFwiZGF0YS1cIi5jb25jYXQoX3RoaXM0Lm5hbWUsIFwiLXNlY3Rpb24taW52aWV3XCIpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgX3RoaXM0LnRyYW5zZm9ybShzZWN0aW9uLmVsLCAwLCAwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICh0aGlzLmdldERpcmVjdGlvbikge1xuICAgICAgICAgIHRoaXMuYWRkRGlyZWN0aW9uKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5nZXRTcGVlZCkge1xuICAgICAgICAgIHRoaXMuYWRkU3BlZWQoKTtcbiAgICAgICAgICB0aGlzLnNwZWVkVHMgPSBEYXRlLm5vdygpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5kZXRlY3RFbGVtZW50cygpO1xuICAgICAgICB0aGlzLnRyYW5zZm9ybUVsZW1lbnRzKCk7XG5cbiAgICAgICAgaWYgKHRoaXMuaGFzU2Nyb2xsYmFyKSB7XG4gICAgICAgICAgdmFyIHNjcm9sbEJhclRyYW5zbGF0aW9uID0gdGhpcy5pbnN0YW5jZS5zY3JvbGxbdGhpcy5kaXJlY3Rpb25BeGlzXSAvIHRoaXMuaW5zdGFuY2UubGltaXRbdGhpcy5kaXJlY3Rpb25BeGlzXSAqIHRoaXMuc2Nyb2xsQmFyTGltaXRbdGhpcy5kaXJlY3Rpb25BeGlzXTtcblxuICAgICAgICAgIGlmICh0aGlzLmRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnKSB7XG4gICAgICAgICAgICB0aGlzLnRyYW5zZm9ybSh0aGlzLnNjcm9sbGJhclRodW1iLCBzY3JvbGxCYXJUcmFuc2xhdGlvbiwgMCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudHJhbnNmb3JtKHRoaXMuc2Nyb2xsYmFyVGh1bWIsIDAsIHNjcm9sbEJhclRyYW5zbGF0aW9uKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBfZ2V0KF9nZXRQcm90b3R5cGVPZihfZGVmYXVsdC5wcm90b3R5cGUpLCBcImNoZWNrU2Nyb2xsXCIsIHRoaXMpLmNhbGwodGhpcyk7XG5cbiAgICAgICAgdGhpcy5oYXNTY3JvbGxUaWNraW5nID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlc2l6ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXNpemUoKSB7XG4gICAgICB0aGlzLndpbmRvd0hlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICAgIHRoaXMud2luZG93V2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICAgIHRoaXMuY2hlY2tDb250ZXh0KCk7XG4gICAgICB0aGlzLndpbmRvd01pZGRsZSA9IHtcbiAgICAgICAgeDogdGhpcy53aW5kb3dXaWR0aCAvIDIsXG4gICAgICAgIHk6IHRoaXMud2luZG93SGVpZ2h0IC8gMlxuICAgICAgfTtcbiAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInVwZGF0ZURlbHRhXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZURlbHRhKGUpIHtcbiAgICAgIHZhciBkZWx0YTtcbiAgICAgIHZhciBnZXN0dXJlRGlyZWN0aW9uID0gdGhpc1t0aGlzLmNvbnRleHRdICYmIHRoaXNbdGhpcy5jb250ZXh0XS5nZXN0dXJlRGlyZWN0aW9uID8gdGhpc1t0aGlzLmNvbnRleHRdLmdlc3R1cmVEaXJlY3Rpb24gOiB0aGlzLmdlc3R1cmVEaXJlY3Rpb247XG5cbiAgICAgIGlmIChnZXN0dXJlRGlyZWN0aW9uID09PSAnYm90aCcpIHtcbiAgICAgICAgZGVsdGEgPSBlLmRlbHRhWCArIGUuZGVsdGFZO1xuICAgICAgfSBlbHNlIGlmIChnZXN0dXJlRGlyZWN0aW9uID09PSAndmVydGljYWwnKSB7XG4gICAgICAgIGRlbHRhID0gZS5kZWx0YVk7XG4gICAgICB9IGVsc2UgaWYgKGdlc3R1cmVEaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJykge1xuICAgICAgICBkZWx0YSA9IGUuZGVsdGFYO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVsdGEgPSBlLmRlbHRhWTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5pbnN0YW5jZS5kZWx0YVt0aGlzLmRpcmVjdGlvbkF4aXNdIC09IGRlbHRhICogdGhpcy5tdWx0aXBsaWVyO1xuICAgICAgaWYgKHRoaXMuaW5zdGFuY2UuZGVsdGFbdGhpcy5kaXJlY3Rpb25BeGlzXSA8IDApIHRoaXMuaW5zdGFuY2UuZGVsdGFbdGhpcy5kaXJlY3Rpb25BeGlzXSA9IDA7XG4gICAgICBpZiAodGhpcy5pbnN0YW5jZS5kZWx0YVt0aGlzLmRpcmVjdGlvbkF4aXNdID4gdGhpcy5pbnN0YW5jZS5saW1pdFt0aGlzLmRpcmVjdGlvbkF4aXNdKSB0aGlzLmluc3RhbmNlLmRlbHRhW3RoaXMuZGlyZWN0aW9uQXhpc10gPSB0aGlzLmluc3RhbmNlLmxpbWl0W3RoaXMuZGlyZWN0aW9uQXhpc107XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInVwZGF0ZVNjcm9sbFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVTY3JvbGwoZSkge1xuICAgICAgaWYgKHRoaXMuaXNTY3JvbGxpbmcgfHwgdGhpcy5pc0RyYWdnaW5nU2Nyb2xsYmFyKSB7XG4gICAgICAgIHRoaXMuaW5zdGFuY2Uuc2Nyb2xsW3RoaXMuZGlyZWN0aW9uQXhpc10gPSBsZXJwKHRoaXMuaW5zdGFuY2Uuc2Nyb2xsW3RoaXMuZGlyZWN0aW9uQXhpc10sIHRoaXMuaW5zdGFuY2UuZGVsdGFbdGhpcy5kaXJlY3Rpb25BeGlzXSwgdGhpcy5sZXJwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0aGlzLmluc3RhbmNlLnNjcm9sbFt0aGlzLmRpcmVjdGlvbkF4aXNdID4gdGhpcy5pbnN0YW5jZS5saW1pdFt0aGlzLmRpcmVjdGlvbkF4aXNdKSB7XG4gICAgICAgICAgdGhpcy5zZXRTY3JvbGwodGhpcy5pbnN0YW5jZS5zY3JvbGxbdGhpcy5kaXJlY3Rpb25BeGlzXSwgdGhpcy5pbnN0YW5jZS5saW1pdFt0aGlzLmRpcmVjdGlvbkF4aXNdKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmluc3RhbmNlLnNjcm9sbC55IDwgMCkge1xuICAgICAgICAgIHRoaXMuc2V0U2Nyb2xsKHRoaXMuaW5zdGFuY2Uuc2Nyb2xsW3RoaXMuZGlyZWN0aW9uQXhpc10sIDApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuc2V0U2Nyb2xsKHRoaXMuaW5zdGFuY2Uuc2Nyb2xsW3RoaXMuZGlyZWN0aW9uQXhpc10sIHRoaXMuaW5zdGFuY2UuZGVsdGFbdGhpcy5kaXJlY3Rpb25BeGlzXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiYWRkRGlyZWN0aW9uXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZERpcmVjdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLmluc3RhbmNlLmRlbHRhLnkgPiB0aGlzLmluc3RhbmNlLnNjcm9sbC55KSB7XG4gICAgICAgIGlmICh0aGlzLmluc3RhbmNlLmRpcmVjdGlvbiAhPT0gJ2Rvd24nKSB7XG4gICAgICAgICAgdGhpcy5pbnN0YW5jZS5kaXJlY3Rpb24gPSAnZG93bic7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodGhpcy5pbnN0YW5jZS5kZWx0YS55IDwgdGhpcy5pbnN0YW5jZS5zY3JvbGwueSkge1xuICAgICAgICBpZiAodGhpcy5pbnN0YW5jZS5kaXJlY3Rpb24gIT09ICd1cCcpIHtcbiAgICAgICAgICB0aGlzLmluc3RhbmNlLmRpcmVjdGlvbiA9ICd1cCc7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuaW5zdGFuY2UuZGVsdGEueCA+IHRoaXMuaW5zdGFuY2Uuc2Nyb2xsLngpIHtcbiAgICAgICAgaWYgKHRoaXMuaW5zdGFuY2UuZGlyZWN0aW9uICE9PSAncmlnaHQnKSB7XG4gICAgICAgICAgdGhpcy5pbnN0YW5jZS5kaXJlY3Rpb24gPSAncmlnaHQnO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuaW5zdGFuY2UuZGVsdGEueCA8IHRoaXMuaW5zdGFuY2Uuc2Nyb2xsLngpIHtcbiAgICAgICAgaWYgKHRoaXMuaW5zdGFuY2UuZGlyZWN0aW9uICE9PSAnbGVmdCcpIHtcbiAgICAgICAgICB0aGlzLmluc3RhbmNlLmRpcmVjdGlvbiA9ICdsZWZ0JztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJhZGRTcGVlZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRTcGVlZCgpIHtcbiAgICAgIGlmICh0aGlzLmluc3RhbmNlLmRlbHRhW3RoaXMuZGlyZWN0aW9uQXhpc10gIT0gdGhpcy5pbnN0YW5jZS5zY3JvbGxbdGhpcy5kaXJlY3Rpb25BeGlzXSkge1xuICAgICAgICB0aGlzLmluc3RhbmNlLnNwZWVkID0gKHRoaXMuaW5zdGFuY2UuZGVsdGFbdGhpcy5kaXJlY3Rpb25BeGlzXSAtIHRoaXMuaW5zdGFuY2Uuc2Nyb2xsW3RoaXMuZGlyZWN0aW9uQXhpc10pIC8gTWF0aC5tYXgoMSwgRGF0ZS5ub3coKSAtIHRoaXMuc3BlZWRUcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmluc3RhbmNlLnNwZWVkID0gMDtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiaW5pdFNjcm9sbEJhclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0U2Nyb2xsQmFyKCkge1xuICAgICAgdGhpcy5zY3JvbGxiYXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICB0aGlzLnNjcm9sbGJhclRodW1iID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgdGhpcy5zY3JvbGxiYXIuY2xhc3NMaXN0LmFkZChcIlwiLmNvbmNhdCh0aGlzLnNjcm9sbGJhckNsYXNzKSk7XG4gICAgICB0aGlzLnNjcm9sbGJhclRodW1iLmNsYXNzTGlzdC5hZGQoXCJcIi5jb25jYXQodGhpcy5zY3JvbGxiYXJDbGFzcywgXCJfdGh1bWJcIikpO1xuICAgICAgdGhpcy5zY3JvbGxiYXIuYXBwZW5kKHRoaXMuc2Nyb2xsYmFyVGh1bWIpO1xuXG4gICAgICBpZiAodGhpcy5zY3JvbGxiYXJDb250YWluZXIpIHtcbiAgICAgICAgdGhpcy5zY3JvbGxiYXJDb250YWluZXIuYXBwZW5kKHRoaXMuc2Nyb2xsYmFyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kKHRoaXMuc2Nyb2xsYmFyKTtcbiAgICAgIH0gLy8gU2Nyb2xsYmFyIEV2ZW50c1xuXG5cbiAgICAgIHRoaXMuZ2V0U2Nyb2xsQmFyID0gdGhpcy5nZXRTY3JvbGxCYXIuYmluZCh0aGlzKTtcbiAgICAgIHRoaXMucmVsZWFzZVNjcm9sbEJhciA9IHRoaXMucmVsZWFzZVNjcm9sbEJhci5iaW5kKHRoaXMpO1xuICAgICAgdGhpcy5tb3ZlU2Nyb2xsQmFyID0gdGhpcy5tb3ZlU2Nyb2xsQmFyLmJpbmQodGhpcyk7XG4gICAgICB0aGlzLnNjcm9sbGJhclRodW1iLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHRoaXMuZ2V0U2Nyb2xsQmFyKTtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5yZWxlYXNlU2Nyb2xsQmFyKTtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLm1vdmVTY3JvbGxCYXIpOyAvLyBTZXQgc2Nyb2xsYmFyIHZhbHVlc1xuXG4gICAgICB0aGlzLmhhc1Njcm9sbGJhciA9IGZhbHNlO1xuXG4gICAgICBpZiAodGhpcy5kaXJlY3Rpb24gPT0gJ2hvcml6b250YWwnKSB7XG4gICAgICAgIGlmICh0aGlzLmluc3RhbmNlLmxpbWl0LnggKyB0aGlzLndpbmRvd1dpZHRoIDw9IHRoaXMud2luZG93V2lkdGgpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0aGlzLmluc3RhbmNlLmxpbWl0LnkgKyB0aGlzLndpbmRvd0hlaWdodCA8PSB0aGlzLndpbmRvd0hlaWdodCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLmhhc1Njcm9sbGJhciA9IHRydWU7XG4gICAgICB0aGlzLnNjcm9sbGJhckJDUiA9IHRoaXMuc2Nyb2xsYmFyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgdGhpcy5zY3JvbGxiYXJIZWlnaHQgPSB0aGlzLnNjcm9sbGJhckJDUi5oZWlnaHQ7XG4gICAgICB0aGlzLnNjcm9sbGJhcldpZHRoID0gdGhpcy5zY3JvbGxiYXJCQ1Iud2lkdGg7XG5cbiAgICAgIGlmICh0aGlzLmRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnKSB7XG4gICAgICAgIHRoaXMuc2Nyb2xsYmFyVGh1bWIuc3R5bGUud2lkdGggPSBcIlwiLmNvbmNhdCh0aGlzLnNjcm9sbGJhcldpZHRoICogdGhpcy5zY3JvbGxiYXJXaWR0aCAvICh0aGlzLmluc3RhbmNlLmxpbWl0LnggKyB0aGlzLnNjcm9sbGJhcldpZHRoKSwgXCJweFwiKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc2Nyb2xsYmFyVGh1bWIuc3R5bGUuaGVpZ2h0ID0gXCJcIi5jb25jYXQodGhpcy5zY3JvbGxiYXJIZWlnaHQgKiB0aGlzLnNjcm9sbGJhckhlaWdodCAvICh0aGlzLmluc3RhbmNlLmxpbWl0LnkgKyB0aGlzLnNjcm9sbGJhckhlaWdodCksIFwicHhcIik7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2Nyb2xsYmFyVGh1bWJCQ1IgPSB0aGlzLnNjcm9sbGJhclRodW1iLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgdGhpcy5zY3JvbGxCYXJMaW1pdCA9IHtcbiAgICAgICAgeDogdGhpcy5zY3JvbGxiYXJXaWR0aCAtIHRoaXMuc2Nyb2xsYmFyVGh1bWJCQ1Iud2lkdGgsXG4gICAgICAgIHk6IHRoaXMuc2Nyb2xsYmFySGVpZ2h0IC0gdGhpcy5zY3JvbGxiYXJUaHVtYkJDUi5oZWlnaHRcbiAgICAgIH07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlaW5pdFNjcm9sbEJhclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZWluaXRTY3JvbGxCYXIoKSB7XG4gICAgICB0aGlzLmhhc1Njcm9sbGJhciA9IGZhbHNlO1xuXG4gICAgICBpZiAodGhpcy5kaXJlY3Rpb24gPT0gJ2hvcml6b250YWwnKSB7XG4gICAgICAgIGlmICh0aGlzLmluc3RhbmNlLmxpbWl0LnggKyB0aGlzLndpbmRvd1dpZHRoIDw9IHRoaXMud2luZG93V2lkdGgpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0aGlzLmluc3RhbmNlLmxpbWl0LnkgKyB0aGlzLndpbmRvd0hlaWdodCA8PSB0aGlzLndpbmRvd0hlaWdodCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLmhhc1Njcm9sbGJhciA9IHRydWU7XG4gICAgICB0aGlzLnNjcm9sbGJhckJDUiA9IHRoaXMuc2Nyb2xsYmFyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgdGhpcy5zY3JvbGxiYXJIZWlnaHQgPSB0aGlzLnNjcm9sbGJhckJDUi5oZWlnaHQ7XG4gICAgICB0aGlzLnNjcm9sbGJhcldpZHRoID0gdGhpcy5zY3JvbGxiYXJCQ1Iud2lkdGg7XG5cbiAgICAgIGlmICh0aGlzLmRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnKSB7XG4gICAgICAgIHRoaXMuc2Nyb2xsYmFyVGh1bWIuc3R5bGUud2lkdGggPSBcIlwiLmNvbmNhdCh0aGlzLnNjcm9sbGJhcldpZHRoICogdGhpcy5zY3JvbGxiYXJXaWR0aCAvICh0aGlzLmluc3RhbmNlLmxpbWl0LnggKyB0aGlzLnNjcm9sbGJhcldpZHRoKSwgXCJweFwiKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc2Nyb2xsYmFyVGh1bWIuc3R5bGUuaGVpZ2h0ID0gXCJcIi5jb25jYXQodGhpcy5zY3JvbGxiYXJIZWlnaHQgKiB0aGlzLnNjcm9sbGJhckhlaWdodCAvICh0aGlzLmluc3RhbmNlLmxpbWl0LnkgKyB0aGlzLnNjcm9sbGJhckhlaWdodCksIFwicHhcIik7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2Nyb2xsYmFyVGh1bWJCQ1IgPSB0aGlzLnNjcm9sbGJhclRodW1iLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgdGhpcy5zY3JvbGxCYXJMaW1pdCA9IHtcbiAgICAgICAgeDogdGhpcy5zY3JvbGxiYXJXaWR0aCAtIHRoaXMuc2Nyb2xsYmFyVGh1bWJCQ1Iud2lkdGgsXG4gICAgICAgIHk6IHRoaXMuc2Nyb2xsYmFySGVpZ2h0IC0gdGhpcy5zY3JvbGxiYXJUaHVtYkJDUi5oZWlnaHRcbiAgICAgIH07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImRlc3Ryb3lTY3JvbGxCYXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveVNjcm9sbEJhcigpIHtcbiAgICAgIHRoaXMuc2Nyb2xsYmFyVGh1bWIucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5nZXRTY3JvbGxCYXIpO1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCB0aGlzLnJlbGVhc2VTY3JvbGxCYXIpO1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMubW92ZVNjcm9sbEJhcik7XG4gICAgICB0aGlzLnNjcm9sbGJhci5yZW1vdmUoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0U2Nyb2xsQmFyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFNjcm9sbEJhcihlKSB7XG4gICAgICB0aGlzLmlzRHJhZ2dpbmdTY3JvbGxiYXIgPSB0cnVlO1xuICAgICAgdGhpcy5jaGVja1Njcm9sbCgpO1xuICAgICAgdGhpcy5odG1sLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5zY3JvbGxpbmdDbGFzcyk7XG4gICAgICB0aGlzLmh0bWwuY2xhc3NMaXN0LmFkZCh0aGlzLmRyYWdnaW5nQ2xhc3MpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZWxlYXNlU2Nyb2xsQmFyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbGVhc2VTY3JvbGxCYXIoZSkge1xuICAgICAgdGhpcy5pc0RyYWdnaW5nU2Nyb2xsYmFyID0gZmFsc2U7XG5cbiAgICAgIGlmICh0aGlzLmlzU2Nyb2xsaW5nKSB7XG4gICAgICAgIHRoaXMuaHRtbC5jbGFzc0xpc3QuYWRkKHRoaXMuc2Nyb2xsaW5nQ2xhc3MpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmh0bWwuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLmRyYWdnaW5nQ2xhc3MpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJtb3ZlU2Nyb2xsQmFyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG1vdmVTY3JvbGxCYXIoZSkge1xuICAgICAgdmFyIF90aGlzNSA9IHRoaXM7XG5cbiAgICAgIGlmICh0aGlzLmlzRHJhZ2dpbmdTY3JvbGxiYXIpIHtcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgeCA9IChlLmNsaWVudFggLSBfdGhpczUuc2Nyb2xsYmFyQkNSLmxlZnQpICogMTAwIC8gX3RoaXM1LnNjcm9sbGJhcldpZHRoICogX3RoaXM1Lmluc3RhbmNlLmxpbWl0LnggLyAxMDA7XG4gICAgICAgICAgdmFyIHkgPSAoZS5jbGllbnRZIC0gX3RoaXM1LnNjcm9sbGJhckJDUi50b3ApICogMTAwIC8gX3RoaXM1LnNjcm9sbGJhckhlaWdodCAqIF90aGlzNS5pbnN0YW5jZS5saW1pdC55IC8gMTAwO1xuXG4gICAgICAgICAgaWYgKHkgPiAwICYmIHkgPCBfdGhpczUuaW5zdGFuY2UubGltaXQueSkge1xuICAgICAgICAgICAgX3RoaXM1Lmluc3RhbmNlLmRlbHRhLnkgPSB5O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh4ID4gMCAmJiB4IDwgX3RoaXM1Lmluc3RhbmNlLmxpbWl0LngpIHtcbiAgICAgICAgICAgIF90aGlzNS5pbnN0YW5jZS5kZWx0YS54ID0geDtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJhZGRFbGVtZW50c1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRFbGVtZW50cygpIHtcbiAgICAgIHZhciBfdGhpczYgPSB0aGlzO1xuXG4gICAgICB0aGlzLmVscyA9IHt9O1xuICAgICAgdGhpcy5wYXJhbGxheEVsZW1lbnRzID0ge307IC8vIHRoaXMuc2VjdGlvbnMuZm9yRWFjaCgoc2VjdGlvbiwgeSkgPT4ge1xuXG4gICAgICB2YXIgZWxzID0gdGhpcy5lbC5xdWVyeVNlbGVjdG9yQWxsKFwiW2RhdGEtXCIuY29uY2F0KHRoaXMubmFtZSwgXCJdXCIpKTtcbiAgICAgIGVscy5mb3JFYWNoKGZ1bmN0aW9uIChlbCwgaW5kZXgpIHtcbiAgICAgICAgLy8gVHJ5IGFuZCBmaW5kIHRoZSB0YXJnZXQncyBwYXJlbnQgc2VjdGlvblxuICAgICAgICB2YXIgdGFyZ2V0UGFyZW50cyA9IGdldFBhcmVudHMoZWwpO1xuICAgICAgICB2YXIgc2VjdGlvbiA9IE9iamVjdC5lbnRyaWVzKF90aGlzNi5zZWN0aW9ucykubWFwKGZ1bmN0aW9uIChfcmVmMykge1xuICAgICAgICAgIHZhciBfcmVmNCA9IF9zbGljZWRUb0FycmF5KF9yZWYzLCAyKSxcbiAgICAgICAgICAgICAga2V5ID0gX3JlZjRbMF0sXG4gICAgICAgICAgICAgIHNlY3Rpb24gPSBfcmVmNFsxXTtcblxuICAgICAgICAgIHJldHVybiBzZWN0aW9uO1xuICAgICAgICB9KS5maW5kKGZ1bmN0aW9uIChzZWN0aW9uKSB7XG4gICAgICAgICAgcmV0dXJuIHRhcmdldFBhcmVudHMuaW5jbHVkZXMoc2VjdGlvbi5lbCk7XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgY2wgPSBlbC5kYXRhc2V0W190aGlzNi5uYW1lICsgJ0NsYXNzJ10gfHwgX3RoaXM2W1wiY2xhc3NcIl07XG4gICAgICAgIHZhciBpZCA9IHR5cGVvZiBlbC5kYXRhc2V0W190aGlzNi5uYW1lICsgJ0lkJ10gPT09ICdzdHJpbmcnID8gZWwuZGF0YXNldFtfdGhpczYubmFtZSArICdJZCddIDogJ2VsJyArIGluZGV4O1xuICAgICAgICB2YXIgdG9wO1xuICAgICAgICB2YXIgbGVmdDtcbiAgICAgICAgdmFyIHJlcGVhdCA9IGVsLmRhdGFzZXRbX3RoaXM2Lm5hbWUgKyAnUmVwZWF0J107XG4gICAgICAgIHZhciBjYWxsID0gZWwuZGF0YXNldFtfdGhpczYubmFtZSArICdDYWxsJ107XG4gICAgICAgIHZhciBwb3NpdGlvbiA9IGVsLmRhdGFzZXRbX3RoaXM2Lm5hbWUgKyAnUG9zaXRpb24nXTtcbiAgICAgICAgdmFyIGRlbGF5ID0gZWwuZGF0YXNldFtfdGhpczYubmFtZSArICdEZWxheSddO1xuICAgICAgICB2YXIgZGlyZWN0aW9uID0gZWwuZGF0YXNldFtfdGhpczYubmFtZSArICdEaXJlY3Rpb24nXTtcbiAgICAgICAgdmFyIHN0aWNreSA9IHR5cGVvZiBlbC5kYXRhc2V0W190aGlzNi5uYW1lICsgJ1N0aWNreSddID09PSAnc3RyaW5nJztcbiAgICAgICAgdmFyIHNwZWVkID0gZWwuZGF0YXNldFtfdGhpczYubmFtZSArICdTcGVlZCddID8gcGFyc2VGbG9hdChlbC5kYXRhc2V0W190aGlzNi5uYW1lICsgJ1NwZWVkJ10pIC8gMTAgOiBmYWxzZTtcbiAgICAgICAgdmFyIG9mZnNldCA9IHR5cGVvZiBlbC5kYXRhc2V0W190aGlzNi5uYW1lICsgJ09mZnNldCddID09PSAnc3RyaW5nJyA/IGVsLmRhdGFzZXRbX3RoaXM2Lm5hbWUgKyAnT2Zmc2V0J10uc3BsaXQoJywnKSA6IF90aGlzNi5vZmZzZXQ7XG4gICAgICAgIHZhciB0YXJnZXQgPSBlbC5kYXRhc2V0W190aGlzNi5uYW1lICsgJ1RhcmdldCddO1xuICAgICAgICB2YXIgdGFyZ2V0RWw7XG5cbiAgICAgICAgaWYgKHRhcmdldCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdGFyZ2V0RWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiXCIuY29uY2F0KHRhcmdldCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRhcmdldEVsID0gZWw7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdGFyZ2V0RWxCQ1IgPSB0YXJnZXRFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgICAgICBpZiAoc2VjdGlvbiA9PT0gbnVsbCkge1xuICAgICAgICAgIHRvcCA9IHRhcmdldEVsQkNSLnRvcCArIF90aGlzNi5pbnN0YW5jZS5zY3JvbGwueSAtIGdldFRyYW5zbGF0ZSh0YXJnZXRFbCkueTtcbiAgICAgICAgICBsZWZ0ID0gdGFyZ2V0RWxCQ1IubGVmdCArIF90aGlzNi5pbnN0YW5jZS5zY3JvbGwueCAtIGdldFRyYW5zbGF0ZSh0YXJnZXRFbCkueDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoIXNlY3Rpb24uaW5WaWV3KSB7XG4gICAgICAgICAgICB0b3AgPSB0YXJnZXRFbEJDUi50b3AgLSBnZXRUcmFuc2xhdGUoc2VjdGlvbi5lbCkueSAtIGdldFRyYW5zbGF0ZSh0YXJnZXRFbCkueTtcbiAgICAgICAgICAgIGxlZnQgPSB0YXJnZXRFbEJDUi5sZWZ0IC0gZ2V0VHJhbnNsYXRlKHNlY3Rpb24uZWwpLnggLSBnZXRUcmFuc2xhdGUodGFyZ2V0RWwpLng7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRvcCA9IHRhcmdldEVsQkNSLnRvcCArIF90aGlzNi5pbnN0YW5jZS5zY3JvbGwueSAtIGdldFRyYW5zbGF0ZSh0YXJnZXRFbCkueTtcbiAgICAgICAgICAgIGxlZnQgPSB0YXJnZXRFbEJDUi5sZWZ0ICsgX3RoaXM2Lmluc3RhbmNlLnNjcm9sbC54IC0gZ2V0VHJhbnNsYXRlKHRhcmdldEVsKS54O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBib3R0b20gPSB0b3AgKyB0YXJnZXRFbC5vZmZzZXRIZWlnaHQ7XG4gICAgICAgIHZhciByaWdodCA9IGxlZnQgKyB0YXJnZXRFbC5vZmZzZXRXaWR0aDtcbiAgICAgICAgdmFyIG1pZGRsZSA9IHtcbiAgICAgICAgICB4OiAocmlnaHQgLSBsZWZ0KSAvIDIgKyBsZWZ0LFxuICAgICAgICAgIHk6IChib3R0b20gLSB0b3ApIC8gMiArIHRvcFxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChzdGlja3kpIHtcbiAgICAgICAgICB2YXIgZWxCQ1IgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICB2YXIgZWxUb3AgPSBlbEJDUi50b3A7XG4gICAgICAgICAgdmFyIGVsTGVmdCA9IGVsQkNSLmxlZnQ7XG4gICAgICAgICAgdmFyIGVsRGlzdGFuY2UgPSB7XG4gICAgICAgICAgICB4OiBlbExlZnQgLSBsZWZ0LFxuICAgICAgICAgICAgeTogZWxUb3AgLSB0b3BcbiAgICAgICAgICB9O1xuICAgICAgICAgIHRvcCArPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgICAgICAgbGVmdCArPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICAgICAgICBib3R0b20gPSBlbFRvcCArIHRhcmdldEVsLm9mZnNldEhlaWdodCAtIGVsLm9mZnNldEhlaWdodCAtIGVsRGlzdGFuY2VbX3RoaXM2LmRpcmVjdGlvbkF4aXNdO1xuICAgICAgICAgIHJpZ2h0ID0gZWxMZWZ0ICsgdGFyZ2V0RWwub2Zmc2V0V2lkdGggLSBlbC5vZmZzZXRXaWR0aCAtIGVsRGlzdGFuY2VbX3RoaXM2LmRpcmVjdGlvbkF4aXNdO1xuICAgICAgICAgIG1pZGRsZSA9IHtcbiAgICAgICAgICAgIHg6IChyaWdodCAtIGxlZnQpIC8gMiArIGxlZnQsXG4gICAgICAgICAgICB5OiAoYm90dG9tIC0gdG9wKSAvIDIgKyB0b3BcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJlcGVhdCA9PSAnZmFsc2UnKSB7XG4gICAgICAgICAgcmVwZWF0ID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSBpZiAocmVwZWF0ICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJlcGVhdCA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVwZWF0ID0gX3RoaXM2LnJlcGVhdDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciByZWxhdGl2ZU9mZnNldCA9IFswLCAwXTtcblxuICAgICAgICBpZiAob2Zmc2V0KSB7XG4gICAgICAgICAgaWYgKF90aGlzNi5kaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJykge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvZmZzZXQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvZmZzZXRbaV0gPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBpZiAob2Zmc2V0W2ldLmluY2x1ZGVzKCclJykpIHtcbiAgICAgICAgICAgICAgICAgIHJlbGF0aXZlT2Zmc2V0W2ldID0gcGFyc2VJbnQob2Zmc2V0W2ldLnJlcGxhY2UoJyUnLCAnJykgKiBfdGhpczYud2luZG93V2lkdGggLyAxMDApO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICByZWxhdGl2ZU9mZnNldFtpXSA9IHBhcnNlSW50KG9mZnNldFtpXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlbGF0aXZlT2Zmc2V0W2ldID0gb2Zmc2V0W2ldO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxlZnQgPSBsZWZ0ICsgcmVsYXRpdmVPZmZzZXRbMF07XG4gICAgICAgICAgICByaWdodCA9IHJpZ2h0IC0gcmVsYXRpdmVPZmZzZXRbMV07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2Zmc2V0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0W2ldID09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9mZnNldFtpXS5pbmNsdWRlcygnJScpKSB7XG4gICAgICAgICAgICAgICAgICByZWxhdGl2ZU9mZnNldFtpXSA9IHBhcnNlSW50KG9mZnNldFtpXS5yZXBsYWNlKCclJywgJycpICogX3RoaXM2LndpbmRvd0hlaWdodCAvIDEwMCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHJlbGF0aXZlT2Zmc2V0W2ldID0gcGFyc2VJbnQob2Zmc2V0W2ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVsYXRpdmVPZmZzZXRbaV0gPSBvZmZzZXRbaV07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdG9wID0gdG9wICsgcmVsYXRpdmVPZmZzZXRbMF07XG4gICAgICAgICAgICBib3R0b20gPSBib3R0b20gLSByZWxhdGl2ZU9mZnNldFsxXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbWFwcGVkRWwgPSB7XG4gICAgICAgICAgZWw6IGVsLFxuICAgICAgICAgIGlkOiBpZCxcbiAgICAgICAgICBcImNsYXNzXCI6IGNsLFxuICAgICAgICAgIHNlY3Rpb246IHNlY3Rpb24sXG4gICAgICAgICAgdG9wOiB0b3AsXG4gICAgICAgICAgbWlkZGxlOiBtaWRkbGUsXG4gICAgICAgICAgYm90dG9tOiBib3R0b20sXG4gICAgICAgICAgbGVmdDogbGVmdCxcbiAgICAgICAgICByaWdodDogcmlnaHQsXG4gICAgICAgICAgb2Zmc2V0OiBvZmZzZXQsXG4gICAgICAgICAgcHJvZ3Jlc3M6IDAsXG4gICAgICAgICAgcmVwZWF0OiByZXBlYXQsXG4gICAgICAgICAgaW5WaWV3OiBmYWxzZSxcbiAgICAgICAgICBjYWxsOiBjYWxsLFxuICAgICAgICAgIHNwZWVkOiBzcGVlZCxcbiAgICAgICAgICBkZWxheTogZGVsYXksXG4gICAgICAgICAgcG9zaXRpb246IHBvc2l0aW9uLFxuICAgICAgICAgIHRhcmdldDogdGFyZ2V0RWwsXG4gICAgICAgICAgZGlyZWN0aW9uOiBkaXJlY3Rpb24sXG4gICAgICAgICAgc3RpY2t5OiBzdGlja3lcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXM2LmVsc1tpZF0gPSBtYXBwZWRFbDtcblxuICAgICAgICBpZiAoZWwuY2xhc3NMaXN0LmNvbnRhaW5zKGNsKSkge1xuICAgICAgICAgIF90aGlzNi5zZXRJblZpZXcoX3RoaXM2LmVsc1tpZF0sIGlkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzcGVlZCAhPT0gZmFsc2UgfHwgc3RpY2t5KSB7XG4gICAgICAgICAgX3RoaXM2LnBhcmFsbGF4RWxlbWVudHNbaWRdID0gbWFwcGVkRWw7XG4gICAgICAgIH1cbiAgICAgIH0pOyAvLyB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiYWRkU2VjdGlvbnNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkU2VjdGlvbnMoKSB7XG4gICAgICB2YXIgX3RoaXM3ID0gdGhpcztcblxuICAgICAgdGhpcy5zZWN0aW9ucyA9IHt9O1xuICAgICAgdmFyIHNlY3Rpb25zID0gdGhpcy5lbC5xdWVyeVNlbGVjdG9yQWxsKFwiW2RhdGEtXCIuY29uY2F0KHRoaXMubmFtZSwgXCItc2VjdGlvbl1cIikpO1xuXG4gICAgICBpZiAoc2VjdGlvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHNlY3Rpb25zID0gW3RoaXMuZWxdO1xuICAgICAgfVxuXG4gICAgICBzZWN0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChzZWN0aW9uLCBpbmRleCkge1xuICAgICAgICB2YXIgaWQgPSB0eXBlb2Ygc2VjdGlvbi5kYXRhc2V0W190aGlzNy5uYW1lICsgJ0lkJ10gPT09ICdzdHJpbmcnID8gc2VjdGlvbi5kYXRhc2V0W190aGlzNy5uYW1lICsgJ0lkJ10gOiAnc2VjdGlvbicgKyBpbmRleDtcbiAgICAgICAgdmFyIHNlY3Rpb25CQ1IgPSBzZWN0aW9uLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICB2YXIgb2Zmc2V0ID0ge1xuICAgICAgICAgIHg6IHNlY3Rpb25CQ1IubGVmdCAtIHdpbmRvdy5pbm5lcldpZHRoICogMS41IC0gZ2V0VHJhbnNsYXRlKHNlY3Rpb24pLngsXG4gICAgICAgICAgeTogc2VjdGlvbkJDUi50b3AgLSB3aW5kb3cuaW5uZXJIZWlnaHQgKiAxLjUgLSBnZXRUcmFuc2xhdGUoc2VjdGlvbikueVxuICAgICAgICB9O1xuICAgICAgICB2YXIgbGltaXQgPSB7XG4gICAgICAgICAgeDogb2Zmc2V0LnggKyBzZWN0aW9uQkNSLndpZHRoICsgd2luZG93LmlubmVyV2lkdGggKiAyLFxuICAgICAgICAgIHk6IG9mZnNldC55ICsgc2VjdGlvbkJDUi5oZWlnaHQgKyB3aW5kb3cuaW5uZXJIZWlnaHQgKiAyXG4gICAgICAgIH07XG4gICAgICAgIHZhciBwZXJzaXN0ZW50ID0gdHlwZW9mIHNlY3Rpb24uZGF0YXNldFtfdGhpczcubmFtZSArICdQZXJzaXN0ZW50J10gPT09ICdzdHJpbmcnO1xuICAgICAgICBzZWN0aW9uLnNldEF0dHJpYnV0ZSgnZGF0YS1zY3JvbGwtc2VjdGlvbi1pZCcsIGlkKTtcbiAgICAgICAgdmFyIG1hcHBlZFNlY3Rpb24gPSB7XG4gICAgICAgICAgZWw6IHNlY3Rpb24sXG4gICAgICAgICAgb2Zmc2V0OiBvZmZzZXQsXG4gICAgICAgICAgbGltaXQ6IGxpbWl0LFxuICAgICAgICAgIGluVmlldzogZmFsc2UsXG4gICAgICAgICAgcGVyc2lzdGVudDogcGVyc2lzdGVudCxcbiAgICAgICAgICBpZDogaWRcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXM3LnNlY3Rpb25zW2lkXSA9IG1hcHBlZFNlY3Rpb247XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidHJhbnNmb3JtXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRyYW5zZm9ybShlbGVtZW50LCB4LCB5LCBkZWxheSkge1xuICAgICAgdmFyIHRyYW5zZm9ybTtcblxuICAgICAgaWYgKCFkZWxheSkge1xuICAgICAgICB0cmFuc2Zvcm0gPSBcIm1hdHJpeDNkKDEsMCwwLjAwLDAsMC4wMCwxLDAuMDAsMCwwLDAsMSwwLFwiLmNvbmNhdCh4LCBcIixcIikuY29uY2F0KHksIFwiLDAsMSlcIik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgc3RhcnQgPSBnZXRUcmFuc2xhdGUoZWxlbWVudCk7XG4gICAgICAgIHZhciBsZXJwWCA9IGxlcnAoc3RhcnQueCwgeCwgZGVsYXkpO1xuICAgICAgICB2YXIgbGVycFkgPSBsZXJwKHN0YXJ0LnksIHksIGRlbGF5KTtcbiAgICAgICAgdHJhbnNmb3JtID0gXCJtYXRyaXgzZCgxLDAsMC4wMCwwLDAuMDAsMSwwLjAwLDAsMCwwLDEsMCxcIi5jb25jYXQobGVycFgsIFwiLFwiKS5jb25jYXQobGVycFksIFwiLDAsMSlcIik7XG4gICAgICB9XG5cbiAgICAgIGVsZW1lbnQuc3R5bGUud2Via2l0VHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICAgICAgZWxlbWVudC5zdHlsZS5tc1RyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgICAgIGVsZW1lbnQuc3R5bGUudHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ0cmFuc2Zvcm1FbGVtZW50c1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0cmFuc2Zvcm1FbGVtZW50cyhpc0ZvcmNlZCkge1xuICAgICAgdmFyIF90aGlzOCA9IHRoaXM7XG5cbiAgICAgIHZhciBzZXRBbGxFbGVtZW50cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7XG4gICAgICB2YXIgc2Nyb2xsUmlnaHQgPSB0aGlzLmluc3RhbmNlLnNjcm9sbC54ICsgdGhpcy53aW5kb3dXaWR0aDtcbiAgICAgIHZhciBzY3JvbGxCb3R0b20gPSB0aGlzLmluc3RhbmNlLnNjcm9sbC55ICsgdGhpcy53aW5kb3dIZWlnaHQ7XG4gICAgICB2YXIgc2Nyb2xsTWlkZGxlID0ge1xuICAgICAgICB4OiB0aGlzLmluc3RhbmNlLnNjcm9sbC54ICsgdGhpcy53aW5kb3dNaWRkbGUueCxcbiAgICAgICAgeTogdGhpcy5pbnN0YW5jZS5zY3JvbGwueSArIHRoaXMud2luZG93TWlkZGxlLnlcbiAgICAgIH07XG4gICAgICBPYmplY3QuZW50cmllcyh0aGlzLnBhcmFsbGF4RWxlbWVudHMpLmZvckVhY2goZnVuY3Rpb24gKF9yZWY1KSB7XG4gICAgICAgIHZhciBfcmVmNiA9IF9zbGljZWRUb0FycmF5KF9yZWY1LCAyKSxcbiAgICAgICAgICAgIGkgPSBfcmVmNlswXSxcbiAgICAgICAgICAgIGN1cnJlbnQgPSBfcmVmNlsxXTtcblxuICAgICAgICB2YXIgdHJhbnNmb3JtRGlzdGFuY2UgPSBmYWxzZTtcblxuICAgICAgICBpZiAoaXNGb3JjZWQpIHtcbiAgICAgICAgICB0cmFuc2Zvcm1EaXN0YW5jZSA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY3VycmVudC5pblZpZXcgfHwgc2V0QWxsRWxlbWVudHMpIHtcbiAgICAgICAgICBzd2l0Y2ggKGN1cnJlbnQucG9zaXRpb24pIHtcbiAgICAgICAgICAgIGNhc2UgJ3RvcCc6XG4gICAgICAgICAgICAgIHRyYW5zZm9ybURpc3RhbmNlID0gX3RoaXM4Lmluc3RhbmNlLnNjcm9sbFtfdGhpczguZGlyZWN0aW9uQXhpc10gKiAtY3VycmVudC5zcGVlZDtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ2VsZW1lbnRUb3AnOlxuICAgICAgICAgICAgICB0cmFuc2Zvcm1EaXN0YW5jZSA9IChzY3JvbGxCb3R0b20gLSBjdXJyZW50LnRvcCkgKiAtY3VycmVudC5zcGVlZDtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ2JvdHRvbSc6XG4gICAgICAgICAgICAgIHRyYW5zZm9ybURpc3RhbmNlID0gKF90aGlzOC5pbnN0YW5jZS5saW1pdFtfdGhpczguZGlyZWN0aW9uQXhpc10gLSBzY3JvbGxCb3R0b20gKyBfdGhpczgud2luZG93SGVpZ2h0KSAqIGN1cnJlbnQuc3BlZWQ7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICdsZWZ0JzpcbiAgICAgICAgICAgICAgdHJhbnNmb3JtRGlzdGFuY2UgPSBfdGhpczguaW5zdGFuY2Uuc2Nyb2xsW190aGlzOC5kaXJlY3Rpb25BeGlzXSAqIC1jdXJyZW50LnNwZWVkO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAnZWxlbWVudExlZnQnOlxuICAgICAgICAgICAgICB0cmFuc2Zvcm1EaXN0YW5jZSA9IChzY3JvbGxSaWdodCAtIGN1cnJlbnQubGVmdCkgKiAtY3VycmVudC5zcGVlZDtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ3JpZ2h0JzpcbiAgICAgICAgICAgICAgdHJhbnNmb3JtRGlzdGFuY2UgPSAoX3RoaXM4Lmluc3RhbmNlLmxpbWl0W190aGlzOC5kaXJlY3Rpb25BeGlzXSAtIHNjcm9sbFJpZ2h0ICsgX3RoaXM4LndpbmRvd0hlaWdodCkgKiBjdXJyZW50LnNwZWVkO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgdHJhbnNmb3JtRGlzdGFuY2UgPSAoc2Nyb2xsTWlkZGxlW190aGlzOC5kaXJlY3Rpb25BeGlzXSAtIGN1cnJlbnQubWlkZGxlW190aGlzOC5kaXJlY3Rpb25BeGlzXSkgKiAtY3VycmVudC5zcGVlZDtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGN1cnJlbnQuc3RpY2t5KSB7XG4gICAgICAgICAgaWYgKGN1cnJlbnQuaW5WaWV3KSB7XG4gICAgICAgICAgICBpZiAoX3RoaXM4LmRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnKSB7XG4gICAgICAgICAgICAgIHRyYW5zZm9ybURpc3RhbmNlID0gX3RoaXM4Lmluc3RhbmNlLnNjcm9sbC54IC0gY3VycmVudC5sZWZ0ICsgd2luZG93LmlubmVyV2lkdGg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0cmFuc2Zvcm1EaXN0YW5jZSA9IF90aGlzOC5pbnN0YW5jZS5zY3JvbGwueSAtIGN1cnJlbnQudG9wICsgd2luZG93LmlubmVySGVpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoX3RoaXM4LmRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnKSB7XG4gICAgICAgICAgICAgIGlmIChfdGhpczguaW5zdGFuY2Uuc2Nyb2xsLnggPCBjdXJyZW50LmxlZnQgLSB3aW5kb3cuaW5uZXJXaWR0aCAmJiBfdGhpczguaW5zdGFuY2Uuc2Nyb2xsLnggPCBjdXJyZW50LmxlZnQgLSB3aW5kb3cuaW5uZXJXaWR0aCAvIDIpIHtcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm1EaXN0YW5jZSA9IDA7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoX3RoaXM4Lmluc3RhbmNlLnNjcm9sbC54ID4gY3VycmVudC5yaWdodCAmJiBfdGhpczguaW5zdGFuY2Uuc2Nyb2xsLnggPiBjdXJyZW50LnJpZ2h0ICsgMTAwKSB7XG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtRGlzdGFuY2UgPSBjdXJyZW50LnJpZ2h0IC0gY3VycmVudC5sZWZ0ICsgd2luZG93LmlubmVyV2lkdGg7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtRGlzdGFuY2UgPSBmYWxzZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKF90aGlzOC5pbnN0YW5jZS5zY3JvbGwueSA8IGN1cnJlbnQudG9wIC0gd2luZG93LmlubmVySGVpZ2h0ICYmIF90aGlzOC5pbnN0YW5jZS5zY3JvbGwueSA8IGN1cnJlbnQudG9wIC0gd2luZG93LmlubmVySGVpZ2h0IC8gMikge1xuICAgICAgICAgICAgICAgIHRyYW5zZm9ybURpc3RhbmNlID0gMDtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChfdGhpczguaW5zdGFuY2Uuc2Nyb2xsLnkgPiBjdXJyZW50LmJvdHRvbSAmJiBfdGhpczguaW5zdGFuY2Uuc2Nyb2xsLnkgPiBjdXJyZW50LmJvdHRvbSArIDEwMCkge1xuICAgICAgICAgICAgICAgIHRyYW5zZm9ybURpc3RhbmNlID0gY3VycmVudC5ib3R0b20gLSBjdXJyZW50LnRvcCArIHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm1EaXN0YW5jZSA9IGZhbHNlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRyYW5zZm9ybURpc3RhbmNlICE9PSBmYWxzZSkge1xuICAgICAgICAgIGlmIChjdXJyZW50LmRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnIHx8IF90aGlzOC5kaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJyAmJiBjdXJyZW50LmRpcmVjdGlvbiAhPT0gJ3ZlcnRpY2FsJykge1xuICAgICAgICAgICAgX3RoaXM4LnRyYW5zZm9ybShjdXJyZW50LmVsLCB0cmFuc2Zvcm1EaXN0YW5jZSwgMCwgaXNGb3JjZWQgPyBmYWxzZSA6IGN1cnJlbnQuZGVsYXkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfdGhpczgudHJhbnNmb3JtKGN1cnJlbnQuZWwsIDAsIHRyYW5zZm9ybURpc3RhbmNlLCBpc0ZvcmNlZCA/IGZhbHNlIDogY3VycmVudC5kZWxheSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2Nyb2xsIHRvIGEgZGVzaXJlZCB0YXJnZXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gIEF2YWlsYWJsZSBvcHRpb25zIDpcbiAgICAgKiAgICAgICAgICB0YXJnZXQge25vZGUsIHN0cmluZywgXCJ0b3BcIiwgXCJib3R0b21cIiwgaW50fSAtIFRoZSBET00gZWxlbWVudCB3ZSB3YW50IHRvIHNjcm9sbCB0b1xuICAgICAqICAgICAgICAgIG9wdGlvbnMge29iamVjdH0gLSBPcHRpb25zIG9iamVjdCBmb3IgYWRkaXRpb25uYWwgc2V0dGluZ3MuXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInNjcm9sbFRvXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNjcm9sbFRvKHRhcmdldCkge1xuICAgICAgdmFyIF90aGlzOSA9IHRoaXM7XG5cbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICAgIC8vIFBhcnNlIG9wdGlvbnNcbiAgICAgIHZhciBvZmZzZXQgPSBwYXJzZUludChvcHRpb25zLm9mZnNldCkgfHwgMDsgLy8gQW4gb2Zmc2V0IHRvIGFwcGx5IG9uIHRvcCBvZiBnaXZlbiBgdGFyZ2V0YCBvciBgc291cmNlRWxlbWAncyB0YXJnZXRcblxuICAgICAgdmFyIGR1cmF0aW9uID0gIWlzTmFOKHBhcnNlSW50KG9wdGlvbnMuZHVyYXRpb24pKSA/IHBhcnNlSW50KG9wdGlvbnMuZHVyYXRpb24pIDogMTAwMDsgLy8gRHVyYXRpb24gb2YgdGhlIHNjcm9sbCBhbmltYXRpb24gaW4gbWlsbGlzZWNvbmRzXG5cbiAgICAgIHZhciBlYXNpbmcgPSBvcHRpb25zLmVhc2luZyB8fCBbMC4yNSwgMC4wLCAwLjM1LCAxLjBdOyAvLyBBbiBhcnJheSBvZiA0IGZsb2F0cyBiZXR3ZWVuIDAgYW5kIDEgZGVmaW5pbmcgdGhlIGJlemllciBjdXJ2ZSBmb3IgdGhlIGFuaW1hdGlvbidzIGVhc2luZy4gU2VlIGh0dHA6Ly9ncmV3ZWIubWUvYmV6aWVyLWVhc2luZy1lZGl0b3IvZXhhbXBsZS9cblxuICAgICAgdmFyIGRpc2FibGVMZXJwID0gb3B0aW9ucy5kaXNhYmxlTGVycCA/IHRydWUgOiBmYWxzZTsgLy8gTGVycCBlZmZlY3Qgd29uJ3QgYmUgYXBwbGllZCBpZiBzZXQgdG8gdHJ1ZVxuXG4gICAgICB2YXIgY2FsbGJhY2sgPSBvcHRpb25zLmNhbGxiYWNrID8gb3B0aW9ucy5jYWxsYmFjayA6IGZhbHNlOyAvLyBmdW5jdGlvbiBjYWxsZWQgd2hlbiBzY3JvbGxUbyBjb21wbGV0ZXMgKG5vdGUgdGhhdCBpdCB3b24ndCB3YWl0IGZvciBsZXJwIHRvIHN0YWJpbGl6ZSlcblxuICAgICAgZWFzaW5nID0gc3JjJDEuYXBwbHkodm9pZCAwLCBfdG9Db25zdW1hYmxlQXJyYXkoZWFzaW5nKSk7XG5cbiAgICAgIGlmICh0eXBlb2YgdGFyZ2V0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAvLyBTZWxlY3RvciBvciBib3VuZGFyaWVzXG4gICAgICAgIGlmICh0YXJnZXQgPT09ICd0b3AnKSB7XG4gICAgICAgICAgdGFyZ2V0ID0gMDtcbiAgICAgICAgfSBlbHNlIGlmICh0YXJnZXQgPT09ICdib3R0b20nKSB7XG4gICAgICAgICAgdGFyZ2V0ID0gdGhpcy5pbnN0YW5jZS5saW1pdC55O1xuICAgICAgICB9IGVsc2UgaWYgKHRhcmdldCA9PT0gJ2xlZnQnKSB7XG4gICAgICAgICAgdGFyZ2V0ID0gMDtcbiAgICAgICAgfSBlbHNlIGlmICh0YXJnZXQgPT09ICdyaWdodCcpIHtcbiAgICAgICAgICB0YXJnZXQgPSB0aGlzLmluc3RhbmNlLmxpbWl0Lng7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBJZiB0aGUgcXVlcnkgZmFpbHMsIGFib3J0XG5cbiAgICAgICAgICBpZiAoIXRhcmdldCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdGFyZ2V0ID09PSAnbnVtYmVyJykge1xuICAgICAgICAvLyBBYnNvbHV0ZSBjb29yZGluYXRlXG4gICAgICAgIHRhcmdldCA9IHBhcnNlSW50KHRhcmdldCk7XG4gICAgICB9IGVsc2UgaWYgKHRhcmdldCAmJiB0YXJnZXQudGFnTmFtZSkgOyBlbHNlIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdgdGFyZ2V0YCBwYXJhbWV0ZXIgaXMgbm90IHZhbGlkJyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gV2UgaGF2ZSBhIHRhcmdldCB0aGF0IGlzIG5vdCBhIGNvb3JkaW5hdGUgeWV0LCBnZXQgaXRcblxuXG4gICAgICBpZiAodHlwZW9mIHRhcmdldCAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgLy8gVmVyaWZ5IHRoZSBnaXZlbiB0YXJnZXQgYmVsb25ncyB0byB0aGlzIHNjcm9sbCBzY29wZVxuICAgICAgICB2YXIgdGFyZ2V0SW5TY29wZSA9IGdldFBhcmVudHModGFyZ2V0KS5pbmNsdWRlcyh0aGlzLmVsKTtcblxuICAgICAgICBpZiAoIXRhcmdldEluU2NvcGUpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgdGFyZ2V0IGlzbid0IGluc2lkZSBvdXIgbWFpbiBlbGVtZW50LCBhYm9ydCBhbnkgYWN0aW9uXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IC8vIEdldCB0YXJnZXQgb2Zmc2V0IGZyb20gdG9wXG5cblxuICAgICAgICB2YXIgdGFyZ2V0QkNSID0gdGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICB2YXIgb2Zmc2V0VG9wID0gdGFyZ2V0QkNSLnRvcDtcbiAgICAgICAgdmFyIG9mZnNldExlZnQgPSB0YXJnZXRCQ1IubGVmdDsgLy8gVHJ5IGFuZCBmaW5kIHRoZSB0YXJnZXQncyBwYXJlbnQgc2VjdGlvblxuXG4gICAgICAgIHZhciB0YXJnZXRQYXJlbnRzID0gZ2V0UGFyZW50cyh0YXJnZXQpO1xuICAgICAgICB2YXIgcGFyZW50U2VjdGlvbiA9IHRhcmdldFBhcmVudHMuZmluZChmdW5jdGlvbiAoY2FuZGlkYXRlKSB7XG4gICAgICAgICAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKF90aGlzOS5zZWN0aW9ucykgLy8gR2V0IHNlY3Rpb25zIGFzc29jaWF0aXZlIGFycmF5IGFzIGEgcmVndWxhciBhcnJheVxuICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKF9yZWY3KSB7XG4gICAgICAgICAgICB2YXIgX3JlZjggPSBfc2xpY2VkVG9BcnJheShfcmVmNywgMiksXG4gICAgICAgICAgICAgICAga2V5ID0gX3JlZjhbMF0sXG4gICAgICAgICAgICAgICAgc2VjdGlvbiA9IF9yZWY4WzFdO1xuXG4gICAgICAgICAgICByZXR1cm4gc2VjdGlvbjtcbiAgICAgICAgICB9KSAvLyBtYXAgdG8gc2VjdGlvbiBvbmx5ICh3ZSBkb250IG5lZWQgdGhlIGtleSBoZXJlKVxuICAgICAgICAgIC5maW5kKGZ1bmN0aW9uIChzZWN0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gc2VjdGlvbi5lbCA9PSBjYW5kaWRhdGU7XG4gICAgICAgICAgfSk7IC8vIGZpbmFsbHkgZmluZCB0aGUgc2VjdGlvbiB0aGF0IG1hdGNoZXMgdGhlIGNhbmRpZGF0ZVxuICAgICAgICB9KTtcbiAgICAgICAgdmFyIHBhcmVudFNlY3Rpb25PZmZzZXQgPSAwO1xuXG4gICAgICAgIGlmIChwYXJlbnRTZWN0aW9uKSB7XG4gICAgICAgICAgcGFyZW50U2VjdGlvbk9mZnNldCA9IGdldFRyYW5zbGF0ZShwYXJlbnRTZWN0aW9uKVt0aGlzLmRpcmVjdGlvbkF4aXNdOyAvLyBXZSBnb3QgYSBwYXJlbnQgc2VjdGlvbiwgc3RvcmUgaXQncyBjdXJyZW50IG9mZnNldCB0byByZW1vdmUgaXQgbGF0ZXJcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBpZiBubyBwYXJlbnQgc2VjdGlvbiBpcyBmb3VuZCB3ZSBuZWVkIHRvIHVzZSBpbnN0YW5jZSBzY3JvbGwgZGlyZWN0bHlcbiAgICAgICAgICBwYXJlbnRTZWN0aW9uT2Zmc2V0ID0gLXRoaXMuaW5zdGFuY2Uuc2Nyb2xsW3RoaXMuZGlyZWN0aW9uQXhpc107XG4gICAgICAgIH0gLy8gRmluYWwgdmFsdWUgb2Ygc2Nyb2xsIGRlc3RpbmF0aW9uIDogb2Zmc2V0VG9wICsgKG9wdGlvbmFsIG9mZnNldCBnaXZlbiBpbiBvcHRpb25zKSAtIChwYXJlbnQncyBzZWN0aW9uIHRyYW5zbGF0ZSlcblxuXG4gICAgICAgIGlmICh0aGlzLmRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnKSB7XG4gICAgICAgICAgb2Zmc2V0ID0gb2Zmc2V0TGVmdCArIG9mZnNldCAtIHBhcmVudFNlY3Rpb25PZmZzZXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb2Zmc2V0ID0gb2Zmc2V0VG9wICsgb2Zmc2V0IC0gcGFyZW50U2VjdGlvbk9mZnNldDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb2Zmc2V0ID0gdGFyZ2V0ICsgb2Zmc2V0O1xuICAgICAgfSAvLyBBY3R1YWwgc2Nyb2xsdG9cbiAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgICAvLyBTZXR1cFxuXG5cbiAgICAgIHZhciBzY3JvbGxTdGFydCA9IHBhcnNlRmxvYXQodGhpcy5pbnN0YW5jZS5kZWx0YVt0aGlzLmRpcmVjdGlvbkF4aXNdKTtcbiAgICAgIHZhciBzY3JvbGxUYXJnZXQgPSBNYXRoLm1heCgwLCBNYXRoLm1pbihvZmZzZXQsIHRoaXMuaW5zdGFuY2UubGltaXRbdGhpcy5kaXJlY3Rpb25BeGlzXSkpOyAvLyBNYWtlIHN1cmUgb3VyIHRhcmdldCBpcyBpbiB0aGUgc2Nyb2xsIGJvdW5kYXJpZXNcblxuICAgICAgdmFyIHNjcm9sbERpZmYgPSBzY3JvbGxUYXJnZXQgLSBzY3JvbGxTdGFydDtcblxuICAgICAgdmFyIHJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcihwKSB7XG4gICAgICAgIGlmIChkaXNhYmxlTGVycCkge1xuICAgICAgICAgIGlmIChfdGhpczkuZGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgICAgICAgIF90aGlzOS5zZXRTY3JvbGwoc2Nyb2xsU3RhcnQgKyBzY3JvbGxEaWZmICogcCwgX3RoaXM5Lmluc3RhbmNlLmRlbHRhLnkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfdGhpczkuc2V0U2Nyb2xsKF90aGlzOS5pbnN0YW5jZS5kZWx0YS54LCBzY3JvbGxTdGFydCArIHNjcm9sbERpZmYgKiBwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3RoaXM5Lmluc3RhbmNlLmRlbHRhW190aGlzOS5kaXJlY3Rpb25BeGlzXSA9IHNjcm9sbFN0YXJ0ICsgc2Nyb2xsRGlmZiAqIHA7XG4gICAgICAgIH1cbiAgICAgIH07IC8vIFByZXBhcmUgdGhlIHNjcm9sbFxuXG5cbiAgICAgIHRoaXMuYW5pbWF0aW5nU2Nyb2xsID0gdHJ1ZTsgLy8gVGhpcyBib29sZWFuIGFsbG93cyB0byBwcmV2ZW50IGBjaGVja1Njcm9sbCgpYCBmcm9tIGNhbGxpbmcgYHN0b3BTY3JvbGxpbmdgIHdoZW4gdGhlIGFuaW1hdGlvbiBpcyBzbG93IChpLmUuIGF0IHRoZSBiZWdpbm5pbmcgb2YgYW4gRWFzZUluKVxuXG4gICAgICB0aGlzLnN0b3BTY3JvbGxpbmcoKTsgLy8gU3RvcCBhbnkgbW92ZW1lbnQsIGFsbG93cyB0byBraWxsIGFueSBvdGhlciBgc2Nyb2xsVG9gIHN0aWxsIGhhcHBlbmluZ1xuXG4gICAgICB0aGlzLnN0YXJ0U2Nyb2xsaW5nKCk7IC8vIFJlc3RhcnQgdGhlIHNjcm9sbFxuICAgICAgLy8gU3RhcnQgdGhlIGFuaW1hdGlvbiBsb29wXG5cbiAgICAgIHZhciBzdGFydCA9IERhdGUubm93KCk7XG5cbiAgICAgIHZhciBsb29wID0gZnVuY3Rpb24gbG9vcCgpIHtcbiAgICAgICAgdmFyIHAgPSAoRGF0ZS5ub3coKSAtIHN0YXJ0KSAvIGR1cmF0aW9uOyAvLyBBbmltYXRpb24gcHJvZ3Jlc3NcblxuICAgICAgICBpZiAocCA+IDEpIHtcbiAgICAgICAgICAvLyBBbmltYXRpb24gZW5kc1xuICAgICAgICAgIHJlbmRlcigxKTtcbiAgICAgICAgICBfdGhpczkuYW5pbWF0aW5nU2Nyb2xsID0gZmFsc2U7XG4gICAgICAgICAgaWYgKGR1cmF0aW9uID09IDApIF90aGlzOS51cGRhdGUoKTtcbiAgICAgICAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3RoaXM5LnNjcm9sbFRvUmFmID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGxvb3ApO1xuICAgICAgICAgIHJlbmRlcihlYXNpbmcocCkpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBsb29wKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInVwZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgICB0aGlzLnNldFNjcm9sbExpbWl0KCk7XG4gICAgICB0aGlzLmFkZFNlY3Rpb25zKCk7XG4gICAgICB0aGlzLmFkZEVsZW1lbnRzKCk7XG4gICAgICB0aGlzLmRldGVjdEVsZW1lbnRzKCk7XG4gICAgICB0aGlzLnVwZGF0ZVNjcm9sbCgpO1xuICAgICAgdGhpcy50cmFuc2Zvcm1FbGVtZW50cyh0cnVlKTtcbiAgICAgIHRoaXMucmVpbml0U2Nyb2xsQmFyKCk7XG4gICAgICB0aGlzLmNoZWNrU2Nyb2xsKHRydWUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzdGFydFNjcm9sbFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdGFydFNjcm9sbCgpIHtcbiAgICAgIHRoaXMuc3RvcCA9IGZhbHNlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzdG9wU2Nyb2xsXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN0b3BTY3JvbGwoKSB7XG4gICAgICB0aGlzLnN0b3AgPSB0cnVlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZXRTY3JvbGxcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0U2Nyb2xsKHgsIHkpIHtcbiAgICAgIHRoaXMuaW5zdGFuY2UgPSBfb2JqZWN0U3ByZWFkMihfb2JqZWN0U3ByZWFkMih7fSwgdGhpcy5pbnN0YW5jZSksIHt9LCB7XG4gICAgICAgIHNjcm9sbDoge1xuICAgICAgICAgIHg6IHgsXG4gICAgICAgICAgeTogeVxuICAgICAgICB9LFxuICAgICAgICBkZWx0YToge1xuICAgICAgICAgIHg6IHgsXG4gICAgICAgICAgeTogeVxuICAgICAgICB9LFxuICAgICAgICBzcGVlZDogMFxuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImRlc3Ryb3lcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgIF9nZXQoX2dldFByb3RvdHlwZU9mKF9kZWZhdWx0LnByb3RvdHlwZSksIFwiZGVzdHJveVwiLCB0aGlzKS5jYWxsKHRoaXMpO1xuXG4gICAgICB0aGlzLnN0b3BTY3JvbGxpbmcoKTtcbiAgICAgIHRoaXMuaHRtbC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuc21vb3RoQ2xhc3MpO1xuICAgICAgdGhpcy52cy5kZXN0cm95KCk7XG4gICAgICB0aGlzLmRlc3Ryb3lTY3JvbGxCYXIoKTtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5jaGVja0tleSwgZmFsc2UpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBfZGVmYXVsdDtcbn0oX2RlZmF1bHQpO1xuXG52YXIgU21vb3RoID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU21vb3RoKCkge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTbW9vdGgpO1xuXG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9uczsgLy8gT3ZlcnJpZGUgZGVmYXVsdCBvcHRpb25zIHdpdGggZ2l2ZW4gb25lc1xuXG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCBkZWZhdWx0cywgb3B0aW9ucyk7XG4gICAgdGhpcy5zbWFydHBob25lID0gZGVmYXVsdHMuc21hcnRwaG9uZTtcbiAgICBpZiAob3B0aW9ucy5zbWFydHBob25lKSBPYmplY3QuYXNzaWduKHRoaXMuc21hcnRwaG9uZSwgb3B0aW9ucy5zbWFydHBob25lKTtcbiAgICB0aGlzLnRhYmxldCA9IGRlZmF1bHRzLnRhYmxldDtcbiAgICBpZiAob3B0aW9ucy50YWJsZXQpIE9iamVjdC5hc3NpZ24odGhpcy50YWJsZXQsIG9wdGlvbnMudGFibGV0KTtcbiAgICBpZiAoIXRoaXMuc21vb3RoICYmIHRoaXMuZGlyZWN0aW9uID09ICdob3Jpem9udGFsJykgY29uc29sZS53YXJuKCfwn5qoIGBzbW9vdGg6ZmFsc2VgICYgYGhvcml6b250YWxgIGRpcmVjdGlvbiBhcmUgbm90IHlldCBjb21wYXRpYmxlJyk7XG4gICAgaWYgKCF0aGlzLnRhYmxldC5zbW9vdGggJiYgdGhpcy50YWJsZXQuZGlyZWN0aW9uID09ICdob3Jpem9udGFsJykgY29uc29sZS53YXJuKCfwn5qoIGBzbW9vdGg6ZmFsc2VgICYgYGhvcml6b250YWxgIGRpcmVjdGlvbiBhcmUgbm90IHlldCBjb21wYXRpYmxlICh0YWJsZXQpJyk7XG4gICAgaWYgKCF0aGlzLnNtYXJ0cGhvbmUuc21vb3RoICYmIHRoaXMuc21hcnRwaG9uZS5kaXJlY3Rpb24gPT0gJ2hvcml6b250YWwnKSBjb25zb2xlLndhcm4oJ/CfmqggYHNtb290aDpmYWxzZWAgJiBgaG9yaXpvbnRhbGAgZGlyZWN0aW9uIGFyZSBub3QgeWV0IGNvbXBhdGlibGUgKHNtYXJ0cGhvbmUpJyk7XG4gICAgdGhpcy5pbml0KCk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoU21vb3RoLCBbe1xuICAgIGtleTogXCJpbml0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICB0aGlzLm9wdGlvbnMuaXNNb2JpbGUgPSAvQW5kcm9pZHxpUGhvbmV8aVBhZHxpUG9kfEJsYWNrQmVycnl8SUVNb2JpbGV8T3BlcmEgTWluaS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkgfHwgbmF2aWdhdG9yLnBsYXRmb3JtID09PSAnTWFjSW50ZWwnICYmIG5hdmlnYXRvci5tYXhUb3VjaFBvaW50cyA+IDEgfHwgd2luZG93LmlubmVyV2lkdGggPCB0aGlzLnRhYmxldC5icmVha3BvaW50O1xuICAgICAgdGhpcy5vcHRpb25zLmlzVGFibGV0ID0gdGhpcy5vcHRpb25zLmlzTW9iaWxlICYmIHdpbmRvdy5pbm5lcldpZHRoID49IHRoaXMudGFibGV0LmJyZWFrcG9pbnQ7XG5cbiAgICAgIGlmICh0aGlzLnNtb290aCAmJiAhdGhpcy5vcHRpb25zLmlzTW9iaWxlIHx8IHRoaXMudGFibGV0LnNtb290aCAmJiB0aGlzLm9wdGlvbnMuaXNUYWJsZXQgfHwgdGhpcy5zbWFydHBob25lLnNtb290aCAmJiB0aGlzLm9wdGlvbnMuaXNNb2JpbGUgJiYgIXRoaXMub3B0aW9ucy5pc1RhYmxldCkge1xuICAgICAgICB0aGlzLnNjcm9sbCA9IG5ldyBfZGVmYXVsdCQyKHRoaXMub3B0aW9ucyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNjcm9sbCA9IG5ldyBfZGVmYXVsdCQxKHRoaXMub3B0aW9ucyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2Nyb2xsLmluaXQoKTtcblxuICAgICAgaWYgKHdpbmRvdy5sb2NhdGlvbi5oYXNoKSB7XG4gICAgICAgIC8vIEdldCB0aGUgaGFzaCB3aXRob3V0IHRoZSAnIycgYW5kIGZpbmQgdGhlIG1hdGNoaW5nIGVsZW1lbnRcbiAgICAgICAgdmFyIGlkID0gd2luZG93LmxvY2F0aW9uLmhhc2guc2xpY2UoMSwgd2luZG93LmxvY2F0aW9uLmhhc2gubGVuZ3RoKTtcbiAgICAgICAgdmFyIHRhcmdldCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKTsgLy8gSWYgZm91bmQsIHNjcm9sbCB0byB0aGUgZWxlbWVudFxuXG4gICAgICAgIGlmICh0YXJnZXQpIHRoaXMuc2Nyb2xsLnNjcm9sbFRvKHRhcmdldCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInVwZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgICB0aGlzLnNjcm9sbC51cGRhdGUoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic3RhcnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3RhcnQoKSB7XG4gICAgICB0aGlzLnNjcm9sbC5zdGFydFNjcm9sbCgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzdG9wXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgICB0aGlzLnNjcm9sbC5zdG9wU2Nyb2xsKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNjcm9sbFRvXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNjcm9sbFRvKHRhcmdldCwgb3B0aW9ucykge1xuICAgICAgdGhpcy5zY3JvbGwuc2Nyb2xsVG8odGFyZ2V0LCBvcHRpb25zKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2V0U2Nyb2xsXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFNjcm9sbCh4LCB5KSB7XG4gICAgICB0aGlzLnNjcm9sbC5zZXRTY3JvbGwoeCwgeSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIm9uXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uKGV2ZW50LCBmdW5jKSB7XG4gICAgICB0aGlzLnNjcm9sbC5zZXRFdmVudHMoZXZlbnQsIGZ1bmMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJvZmZcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gb2ZmKGV2ZW50LCBmdW5jKSB7XG4gICAgICB0aGlzLnNjcm9sbC51bnNldEV2ZW50cyhldmVudCwgZnVuYyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImRlc3Ryb3lcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgIHRoaXMuc2Nyb2xsLmRlc3Ryb3koKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU21vb3RoO1xufSgpO1xuXG52YXIgTmF0aXZlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gTmF0aXZlKCkge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBOYXRpdmUpO1xuXG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9uczsgLy8gT3ZlcnJpZGUgZGVmYXVsdCBvcHRpb25zIHdpdGggZ2l2ZW4gb25lc1xuXG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCBkZWZhdWx0cywgb3B0aW9ucyk7XG4gICAgdGhpcy5zbWFydHBob25lID0gZGVmYXVsdHMuc21hcnRwaG9uZTtcbiAgICBpZiAob3B0aW9ucy5zbWFydHBob25lKSBPYmplY3QuYXNzaWduKHRoaXMuc21hcnRwaG9uZSwgb3B0aW9ucy5zbWFydHBob25lKTtcbiAgICB0aGlzLnRhYmxldCA9IGRlZmF1bHRzLnRhYmxldDtcbiAgICBpZiAob3B0aW9ucy50YWJsZXQpIE9iamVjdC5hc3NpZ24odGhpcy50YWJsZXQsIG9wdGlvbnMudGFibGV0KTtcbiAgICB0aGlzLmluaXQoKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhOYXRpdmUsIFt7XG4gICAga2V5OiBcImluaXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgIHRoaXMuc2Nyb2xsID0gbmV3IF9kZWZhdWx0JDEodGhpcy5vcHRpb25zKTtcbiAgICAgIHRoaXMuc2Nyb2xsLmluaXQoKTtcblxuICAgICAgaWYgKHdpbmRvdy5sb2NhdGlvbi5oYXNoKSB7XG4gICAgICAgIC8vIEdldCB0aGUgaGFzaCB3aXRob3V0IHRoZSAnIycgYW5kIGZpbmQgdGhlIG1hdGNoaW5nIGVsZW1lbnRcbiAgICAgICAgdmFyIGlkID0gd2luZG93LmxvY2F0aW9uLmhhc2guc2xpY2UoMSwgd2luZG93LmxvY2F0aW9uLmhhc2gubGVuZ3RoKTtcbiAgICAgICAgdmFyIHRhcmdldCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKTsgLy8gSWYgZm91bmQsIHNjcm9sbCB0byB0aGUgZWxlbWVudFxuXG4gICAgICAgIGlmICh0YXJnZXQpIHRoaXMuc2Nyb2xsLnNjcm9sbFRvKHRhcmdldCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInVwZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgICB0aGlzLnNjcm9sbC51cGRhdGUoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic3RhcnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3RhcnQoKSB7XG4gICAgICB0aGlzLnNjcm9sbC5zdGFydFNjcm9sbCgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzdG9wXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgICB0aGlzLnNjcm9sbC5zdG9wU2Nyb2xsKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNjcm9sbFRvXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNjcm9sbFRvKHRhcmdldCwgb3B0aW9ucykge1xuICAgICAgdGhpcy5zY3JvbGwuc2Nyb2xsVG8odGFyZ2V0LCBvcHRpb25zKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2V0U2Nyb2xsXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFNjcm9sbCh4LCB5KSB7XG4gICAgICB0aGlzLnNjcm9sbC5zZXRTY3JvbGwoeCwgeSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIm9uXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uKGV2ZW50LCBmdW5jKSB7XG4gICAgICB0aGlzLnNjcm9sbC5zZXRFdmVudHMoZXZlbnQsIGZ1bmMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJvZmZcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gb2ZmKGV2ZW50LCBmdW5jKSB7XG4gICAgICB0aGlzLnNjcm9sbC51bnNldEV2ZW50cyhldmVudCwgZnVuYyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImRlc3Ryb3lcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgIHRoaXMuc2Nyb2xsLmRlc3Ryb3koKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gTmF0aXZlO1xufSgpO1xuXG5leHBvcnQgZGVmYXVsdCBTbW9vdGg7XG5leHBvcnQgeyBOYXRpdmUsIFNtb290aCB9O1xuIiwiaW1wb3J0IExvY29tb3RpdmVTY3JvbGwgZnJvbSBcImxvY29tb3RpdmUtc2Nyb2xsXCI7XG5pbXBvcnQgXCIuLi8uLi9zY3NzL2NvbW1vbi9sb2NvbW90aXZlLXNjcm9sbC5zY3NzXCI7XG5pbXBvcnQgZ3NhcCBmcm9tIFwiZ3NhcFwiO1xuaW1wb3J0IHtcbiAgaW5pdEl0ZW1DYXJkQ2Fyb3VzZWwsXG4gIHNldFRodW1ic0NsYXNzZXMsXG59IGZyb20gXCIuLi9hbmltL2l0ZW0tY2FyZC1jYXJvdXNlbFwiO1xuaW1wb3J0IHsgU2Nyb2xsVHJpZ2dlciB9IGZyb20gXCJnc2FwL2FsbFwiO1xuXG5nc2FwLnJlZ2lzdGVyUGx1Z2luKFNjcm9sbFRyaWdnZXIpO1xuXG5leHBvcnQgY29uc3QgbG9jb1Njcm9sbCA9IG5ldyBMb2NvbW90aXZlU2Nyb2xsKHtcbiAgZWw6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIud3JhcHBlclwiKSxcbiAgc21vb3RoOiB0cnVlLFxuICAvLyBtdWx0aXBsaWVyOiAxLFxuICBtb2JpbGU6IHtcbiAgICBzbW9vdGg6IGZhbHNlLFxuICB9LFxuICB0YWJsZXQ6IHtcbiAgICBzbW9vdGg6IGZhbHNlLFxuICAgIGJyZWFrcG9pbnQ6IDEwMjUsXG4gIH0sXG59KTtcblxuY29uc3QgZml4U2Nyb2xsVHJpZ2dlciA9ICgpID0+IHtcbiAgU2Nyb2xsVHJpZ2dlci5zY3JvbGxlclByb3h5KGxvY29TY3JvbGwuZWwsIHtcbiAgICBzY3JvbGxUb3AodmFsdWUpIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICAgID8gbG9jb1Njcm9sbC5zY3JvbGxUbyh2YWx1ZSwgMCwgMClcbiAgICAgICAgOiBsb2NvU2Nyb2xsLnNjcm9sbC5pbnN0YW5jZS5zY3JvbGwueTtcbiAgICB9LFxuICAgIGdldEJvdW5kaW5nQ2xpZW50UmVjdCgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHRvcDogMCxcbiAgICAgICAgbGVmdDogMCxcbiAgICAgICAgd2lkdGg6IHdpbmRvdy5pbm5lcldpZHRoLFxuICAgICAgICBoZWlnaHQ6IHdpbmRvdy5pbm5lckhlaWdodCxcbiAgICAgIH07XG4gICAgfSxcbiAgICBwaW5UeXBlOiBsb2NvU2Nyb2xsLmVsLnN0eWxlLnRyYW5zZm9ybSA/IFwidHJhbnNmb3JtXCIgOiBcImZpeGVkXCIsXG4gIH0pO1xuXG4gIFNjcm9sbFRyaWdnZXIuYWRkRXZlbnRMaXN0ZW5lcihcInJlZnJlc2hcIiwgKCkgPT4gbG9jb1Njcm9sbC51cGRhdGUoKSk7XG4gIFNjcm9sbFRyaWdnZXIuZGVmYXVsdHMoeyBzY3JvbGxlcjogbG9jb1Njcm9sbC5lbCB9KTtcblxuICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICBTY3JvbGxUcmlnZ2VyLnJlZnJlc2goKTtcbiAgICBTY3JvbGxUcmlnZ2VyLnVwZGF0ZSgpO1xuICB9LCAwKTtcbn07XG5cbmV4cG9ydCBjb25zdCB0b2dnbGVTY3JvbGwgPSB7XG4gIHRvdWNoU3RhcnQ6ICgpID0+IHtcbiAgICBsb2NvU2Nyb2xsLnN0b3AoKTtcbiAgfSxcbiAgdG91Y2hFbmQ6ICgpID0+IHtcbiAgICBsb2NvU2Nyb2xsLnN0YXJ0KCk7XG4gIH0sXG59O1xuXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgZnVuY3Rpb24gKCkge1xuICBmaXhTY3JvbGxUcmlnZ2VyKCk7XG4gIGluaXRJdGVtQ2FyZENhcm91c2VsKCk7XG5cbiAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgbG9jb1Njcm9sbC51cGRhdGUoKTtcbiAgfSwgMTAwMCk7XG59KTtcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIGZ1bmN0aW9uICgpIHtcbiAgbG9jb1Njcm9sbC51cGRhdGUoKTtcbn0pO1xuXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2VvdmVyXCIsIGZ1bmN0aW9uIChlKSB7XG4gIGlmIChlLnRhcmdldC5jbG9zZXN0KFwiW2RhdGEtc2JdXCIpKSB7XG4gICAgbG9jb1Njcm9sbC5zdG9wKCk7XG4gIH0gZWxzZSB7XG4gICAgbG9jb1Njcm9sbC5zdGFydCgpO1xuICB9XG59KTtcblxuaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZm9vdGVyLW1haW5fX2FuY2hvclwiKSkge1xuICBkb2N1bWVudFxuICAgIC5xdWVyeVNlbGVjdG9yKFwiLmZvb3Rlci1tYWluX19hbmNob3JcIilcbiAgICAuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGxvY29TY3JvbGwuc2Nyb2xsVG8oMCk7XG4gICAgfSk7XG59XG5cbmlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLml0ZW0tY2FyZF9fc2xpZGVcIikubGVuZ3RoKSB7XG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuaXRlbS1jYXJkX19zbGlkZVwiKS5mb3JFYWNoKChzbGlkZSwgaWR4KSA9PiB7XG4gICAgZG9jdW1lbnRcbiAgICAgIC5xdWVyeVNlbGVjdG9yQWxsKFwiLml0ZW0tY2FyZF9fdGh1bWJzLXNsaWRlXCIpXG4gICAgICBbaWR4XS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAod2luZG93LmlubmVyV2lkdGggPiAxMDI0KSB7XG4gICAgICAgICAgbG9jb1Njcm9sbC5zY3JvbGxUbyhzbGlkZSwge1xuICAgICAgICAgICAgb2Zmc2V0OiAtMSxcbiAgICAgICAgICAgIGNhbGxiYWNrOiAoKSA9PiB7XG4gICAgICAgICAgICAgIHNldFRodW1ic0NsYXNzZXMoXG4gICAgICAgICAgICAgICAgaWR4LFxuICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuaXRlbS1jYXJkX190aHVtYnMtc2xpZGVcIiksXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgfSk7XG59XG5cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJib2R5TG9ja1wiLCBmdW5jdGlvbiAoKSB7XG4gIGxvY29TY3JvbGwuc3RvcCgpO1xufSk7XG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiYm9keVVubG9ja1wiLCBmdW5jdGlvbiAoKSB7XG4gIGxvY29TY3JvbGwuc3RhcnQoKTtcbn0pO1xuIiwiaW1wb3J0IFwiLi4vLi4vc2Nzcy9zZWN0aW9ucy9pdGVtLWNhcmQuc2Nzc1wiO1xuXG5pbXBvcnQgU3dpcGVyIGZyb20gXCJzd2lwZXJcIjtcbmltcG9ydCB7IE5hdmlnYXRpb24gfSBmcm9tIFwic3dpcGVyL21vZHVsZXNcIjtcbmltcG9ydCB7IHNldFRodW1ic0NsYXNzZXMgfSBmcm9tIFwiLi4vYW5pbS9pdGVtLWNhcmQtY2Fyb3VzZWxcIjtcbmltcG9ydCB7IHRvZ2dsZVNjcm9sbCB9IGZyb20gXCIuLi9saWIvbG9jb21vdGl2ZS1zY3JvbGxcIjtcbmltcG9ydCBcInN3aXBlci9jc3NcIjtcbmltcG9ydCBnc2FwIGZyb20gXCJnc2FwXCI7XG5cbmNvbnN0IG1kID0gZ3NhcC5tYXRjaE1lZGlhKCk7XG5cbmNvbnN0IHNldExvY29TY3JvbGxBdHRyID0gKGVsKSA9PiB7XG4gIG1kLmFkZChcIihtaW4td2lkdGg6IDQ4ZW0pXCIsICgpID0+IHtcbiAgICBlbC5jbGFzc0xpc3QuY29udGFpbnMoXCJoZWFkZXJcIikgJiYgZWwuY2xhc3NMaXN0LmFkZChcImZpeGVkXCIpO1xuICAgIGVsLnNldEF0dHJpYnV0ZShcImRhdGEtc2Nyb2xsXCIsIFwiXCIpO1xuICAgIGVsLnNldEF0dHJpYnV0ZShcImRhdGEtc2Nyb2xsLXN0aWNreVwiLCBcIlwiKTtcbiAgICBlbC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXNjcm9sbC10YXJnZXRcIiwgXCIjaXRlbS1jYXJkXCIpO1xuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGVsLmNsYXNzTGlzdC5jb250YWlucyhcImhlYWRlclwiKSAmJiBlbC5jbGFzc0xpc3QucmVtb3ZlKFwiZml4ZWRcIik7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoXCJzdHlsZVwiKTtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShcImRhdGEtc2Nyb2xsXCIpO1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKFwiZGF0YS1zY3JvbGwtc3RpY2t5XCIpO1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKFwiZGF0YS1zY3JvbGwtdGFyZ2V0XCIpO1xuICAgIH07XG4gIH0pO1xufTtcblxuaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuaXRlbS1jYXJkX190aHVtYnMtc3dpcGVyXCIpKSB7XG4gIG5ldyBTd2lwZXIoXCIuaXRlbS1jYXJkX190aHVtYnMtc3dpcGVyXCIsIHtcbiAgICBsb29wOiB0cnVlLFxuICAgIHNsaWRlc1BlclZpZXc6IFwiYXV0b1wiLFxuICAgIHNwYWNlQmV0d2VlbjogOCxcbiAgfSk7XG59XG5cbm1kLmFkZChcIihtYXgtd2lkdGg6IDQ4ZW0pXCIsICgpID0+IHtcbiAgY29uc3QgY2Fyb3VzZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLml0ZW0tY2FyZF9fc3dpcGVyXCIpXG4gICAgPyBuZXcgU3dpcGVyKFwiLml0ZW0tY2FyZF9fc3dpcGVyXCIsIHtcbiAgICAgICAgbW9kdWxlczogW05hdmlnYXRpb25dLFxuICAgICAgICBsb29wOiB0cnVlLFxuICAgICAgICBuYXZpZ2F0aW9uOiB7XG4gICAgICAgICAgcHJldkVsOiBcIi5pdGVtLWNhcmRfX3NsaWRlci1idG5fcHJldlwiLFxuICAgICAgICAgIG5leHRFbDogXCIuaXRlbS1jYXJkX19zbGlkZXItYnRuX25leHRcIixcbiAgICAgICAgfSxcbiAgICAgICAgb246IHtcbiAgICAgICAgICBpbml0OiAoc3dpcGVyKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB0aHVtYnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFxuICAgICAgICAgICAgICBcIi5pdGVtLWNhcmRfX3RodW1icy1zbGlkZVwiLFxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgaWYgKHRodW1icy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgdGh1bWJzLmZvckVhY2goKHRodW1iLCBpZHgpID0+IHtcbiAgICAgICAgICAgICAgICB0aHVtYi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgc3dpcGVyLnNsaWRlVG8oaWR4KTtcbiAgICAgICAgICAgICAgICAgIHNldFRodW1ic0NsYXNzZXMoaWR4LCB0aHVtYnMpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHNsaWRlQ2hhbmdlOiAoc3dpcGVyKSA9PiB7XG4gICAgICAgICAgICBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5pdGVtLWNhcmRfX3RodW1icy1zbGlkZVwiKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgc2V0VGh1bWJzQ2xhc3NlcyhcbiAgICAgICAgICAgICAgICBzd2lwZXIuYWN0aXZlSW5kZXgsXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5pdGVtLWNhcmRfX3RodW1icy1zbGlkZVwiKSxcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuXG4gICAgICAgICAgLi4udG9nZ2xlU2Nyb2xsLFxuICAgICAgICB9LFxuICAgICAgfSlcbiAgICA6IG51bGw7XG5cbiAgcmV0dXJuICgpID0+IHtcbiAgICBjYXJvdXNlbCAmJiBjYXJvdXNlbC5kZXN0cm95KCk7XG4gIH07XG59KTtcblxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgZnVuY3Rpb24gKCkge1xuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmhlYWRlclwiKS5jbGFzc0xpc3QuYWRkKFwiZml4ZWRcIik7XG5cbiAgc2V0TG9jb1Njcm9sbEF0dHIoZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5oZWFkZXJcIikpO1xuICBzZXRMb2NvU2Nyb2xsQXR0cihkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLml0ZW0tY2FyZF9fdGh1bWJzLXN3aXBlclwiKSk7XG4gIHNldExvY29TY3JvbGxBdHRyKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuaXRlbS1jYXJkX19jb250ZW50XCIpKTtcbn0pO1xuIl0sIm5hbWVzIjpbIl9fd2VicGFja19yZXF1aXJlX18iLCJvYmoiLCJjb25zdHJ1Y3RvciIsIk9iamVjdCIsImV4dGVuZCIsInRhcmdldCIsInNyYyIsImtleXMiLCJmb3JFYWNoIiwia2V5IiwibGVuZ3RoIiwiZyIsImdsb2JhbFRoaXMiLCJ0aGlzIiwiRnVuY3Rpb24iLCJlIiwid2luZG93Iiwic3NyRG9jdW1lbnQiLCJib2R5IiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJhY3RpdmVFbGVtZW50IiwiYmx1ciIsIm5vZGVOYW1lIiwicXVlcnlTZWxlY3RvciIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJnZXRFbGVtZW50QnlJZCIsImNyZWF0ZUV2ZW50IiwiaW5pdEV2ZW50IiwiY3JlYXRlRWxlbWVudCIsImNoaWxkcmVuIiwiY2hpbGROb2RlcyIsInN0eWxlIiwic2V0QXR0cmlidXRlIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJjcmVhdGVFbGVtZW50TlMiLCJpbXBvcnROb2RlIiwibG9jYXRpb24iLCJoYXNoIiwiaG9zdCIsImhvc3RuYW1lIiwiaHJlZiIsIm9yaWdpbiIsInBhdGhuYW1lIiwicHJvdG9jb2wiLCJzZWFyY2giLCJkb2MiLCJkb2N1bWVudCIsInNzcldpbmRvdyIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImhpc3RvcnkiLCJyZXBsYWNlU3RhdGUiLCJwdXNoU3RhdGUiLCJnbyIsImJhY2siLCJDdXN0b21FdmVudCIsImdldENvbXB1dGVkU3R5bGUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwiSW1hZ2UiLCJEYXRlIiwic2NyZWVuIiwic2V0VGltZW91dCIsImNsZWFyVGltZW91dCIsIm1hdGNoTWVkaWEiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjYWxsYmFjayIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwiaWQiLCJ3aW4iLCJkZWxheSIsIm5vdyIsImVsIiwiYXhpcyIsIm1hdHJpeCIsImN1clRyYW5zZm9ybSIsInRyYW5zZm9ybU1hdHJpeCIsImN1clN0eWxlIiwiY3VycmVudFN0eWxlIiwiV2ViS2l0Q1NTTWF0cml4IiwidHJhbnNmb3JtIiwid2Via2l0VHJhbnNmb3JtIiwic3BsaXQiLCJtYXAiLCJhIiwicmVwbGFjZSIsImpvaW4iLCJNb3pUcmFuc2Zvcm0iLCJPVHJhbnNmb3JtIiwiTXNUcmFuc2Zvcm0iLCJtc1RyYW5zZm9ybSIsInRvU3RyaW5nIiwibTQxIiwicGFyc2VGbG9hdCIsIm00MiIsIm8iLCJwcm90b3R5cGUiLCJjYWxsIiwic2xpY2UiLCJ0byIsImFyZ3VtZW50cyIsInVuZGVmaW5lZCIsIm5vRXh0ZW5kIiwiaSIsIm5leHRTb3VyY2UiLCJub2RlIiwiSFRNTEVsZW1lbnQiLCJub2RlVHlwZSIsImtleXNBcnJheSIsImZpbHRlciIsImluZGV4T2YiLCJuZXh0SW5kZXgiLCJsZW4iLCJuZXh0S2V5IiwiZGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJfX3N3aXBlcl9fIiwidmFyTmFtZSIsInZhclZhbHVlIiwic2V0UHJvcGVydHkiLCJhbmltYXRlQ1NTTW9kZVNjcm9sbCIsIl9yZWYiLCJzd2lwZXIiLCJ0YXJnZXRQb3NpdGlvbiIsInNpZGUiLCJzdGFydFBvc2l0aW9uIiwidHJhbnNsYXRlIiwidGltZSIsInN0YXJ0VGltZSIsImR1cmF0aW9uIiwicGFyYW1zIiwic3BlZWQiLCJ3cmFwcGVyRWwiLCJzY3JvbGxTbmFwVHlwZSIsImNzc01vZGVGcmFtZUlEIiwiZGlyIiwiaXNPdXRPZkJvdW5kIiwiY3VycmVudCIsImFuaW1hdGUiLCJnZXRUaW1lIiwicHJvZ3Jlc3MiLCJNYXRoIiwibWF4IiwibWluIiwiZWFzZVByb2dyZXNzIiwiY29zIiwiUEkiLCJjdXJyZW50UG9zaXRpb24iLCJzY3JvbGxUbyIsIm92ZXJmbG93IiwiZWxlbWVudCIsInNlbGVjdG9yIiwibWF0Y2hlcyIsInNob3dXYXJuaW5nIiwidGV4dCIsImNvbnNvbGUiLCJ3YXJuIiwiZXJyIiwidGFnIiwiY2xhc3NlcyIsImNsYXNzTGlzdCIsImFkZCIsIkFycmF5IiwiaXNBcnJheSIsInRyaW0iLCJjIiwiZWxlbWVudFN0eWxlIiwicHJvcCIsImNoaWxkIiwicHJldmlvdXNTaWJsaW5nIiwic2l6ZSIsImluY2x1ZGVNYXJnaW5zIiwib2Zmc2V0V2lkdGgiLCJzdXBwb3J0IiwiZGV2aWNlQ2FjaGVkIiwiYnJvd3NlciIsImdldFN1cHBvcnQiLCJzbW9vdGhTY3JvbGwiLCJkb2N1bWVudEVsZW1lbnQiLCJ0b3VjaCIsIkRvY3VtZW50VG91Y2giLCJjYWxjU3VwcG9ydCIsImdldERldmljZSIsIm92ZXJyaWRlcyIsIl90ZW1wIiwicGxhdGZvcm0iLCJ1YSIsImRldmljZSIsImlvcyIsImFuZHJvaWQiLCJzY3JlZW5XaWR0aCIsIndpZHRoIiwic2NyZWVuSGVpZ2h0IiwiaGVpZ2h0IiwibWF0Y2giLCJpcGFkIiwiaXBvZCIsImlwaG9uZSIsIndpbmRvd3MiLCJtYWNvcyIsIm9zIiwiY2FsY0RldmljZSIsImdldEJyb3dzZXIiLCJuZWVkUGVyc3BlY3RpdmVGaXgiLCJpc1NhZmFyaSIsInRvTG93ZXJDYXNlIiwiU3RyaW5nIiwiaW5jbHVkZXMiLCJtYWpvciIsIm1pbm9yIiwibnVtIiwiTnVtYmVyIiwiaXNXZWJWaWV3IiwidGVzdCIsImlzU2FmYXJpQnJvd3NlciIsIm5lZWQzZEZpeCIsImNhbGNCcm93c2VyIiwiZXZlbnRzRW1pdHRlciIsIm9uIiwiZXZlbnRzIiwiaGFuZGxlciIsInByaW9yaXR5Iiwic2VsZiIsImV2ZW50c0xpc3RlbmVycyIsImRlc3Ryb3llZCIsIm1ldGhvZCIsImV2ZW50Iiwib25jZSIsIm9uY2VIYW5kbGVyIiwib2ZmIiwiX19lbWl0dGVyUHJveHkiLCJfbGVuIiwiYXJncyIsIl9rZXkiLCJhcHBseSIsIm9uQW55IiwiZXZlbnRzQW55TGlzdGVuZXJzIiwib2ZmQW55IiwiaW5kZXgiLCJzcGxpY2UiLCJldmVudEhhbmRsZXIiLCJlbWl0IiwiZGF0YSIsImNvbnRleHQiLCJfbGVuMiIsIl9rZXkyIiwidW5zaGlmdCIsInRvZ2dsZVNsaWRlQ2xhc3NlcyQxIiwic2xpZGVFbCIsImNvbmRpdGlvbiIsImNsYXNzTmFtZSIsImNvbnRhaW5zIiwicmVtb3ZlIiwidG9nZ2xlU2xpZGVDbGFzc2VzIiwicHJvY2Vzc0xhenlQcmVsb2FkZXIiLCJpbWFnZUVsIiwiY2xvc2VzdCIsImlzRWxlbWVudCIsInNsaWRlQ2xhc3MiLCJsYXp5RWwiLCJsYXp5UHJlbG9hZGVyQ2xhc3MiLCJzaGFkb3dSb290IiwidW5sYXp5Iiwic2xpZGVzIiwicmVtb3ZlQXR0cmlidXRlIiwicHJlbG9hZCIsImFtb3VudCIsImxhenlQcmVsb2FkUHJldk5leHQiLCJzbGlkZXNQZXJWaWV3Iiwic2xpZGVzUGVyVmlld0R5bmFtaWMiLCJjZWlsIiwiYWN0aXZlSW5kZXgiLCJncmlkIiwicm93cyIsImFjdGl2ZUNvbHVtbiIsInByZWxvYWRDb2x1bW5zIiwicHVzaCIsImZyb20iLCJfIiwiY29sdW1uIiwic2xpZGVJbmRleExhc3RJblZpZXciLCJyZXdpbmQiLCJsb29wIiwicmVhbEluZGV4IiwidXBkYXRlIiwidXBkYXRlU2l6ZSIsImNsaWVudFdpZHRoIiwiY2xpZW50SGVpZ2h0IiwiaXNIb3Jpem9udGFsIiwiaXNWZXJ0aWNhbCIsInBhcnNlSW50IiwiaXNOYU4iLCJhc3NpZ24iLCJ1cGRhdGVTbGlkZXMiLCJnZXREaXJlY3Rpb25Qcm9wZXJ0eVZhbHVlIiwibGFiZWwiLCJnZXREaXJlY3Rpb25MYWJlbCIsInNsaWRlc0VsIiwic3dpcGVyU2l6ZSIsInJ0bFRyYW5zbGF0ZSIsInJ0bCIsIndyb25nUlRMIiwiaXNWaXJ0dWFsIiwidmlydHVhbCIsImVuYWJsZWQiLCJwcmV2aW91c1NsaWRlc0xlbmd0aCIsInNsaWRlc0xlbmd0aCIsInNuYXBHcmlkIiwic2xpZGVzR3JpZCIsInNsaWRlc1NpemVzR3JpZCIsIm9mZnNldEJlZm9yZSIsInNsaWRlc09mZnNldEJlZm9yZSIsIm9mZnNldEFmdGVyIiwic2xpZGVzT2Zmc2V0QWZ0ZXIiLCJwcmV2aW91c1NuYXBHcmlkTGVuZ3RoIiwicHJldmlvdXNTbGlkZXNHcmlkTGVuZ3RoIiwic3BhY2VCZXR3ZWVuIiwic2xpZGVQb3NpdGlvbiIsInByZXZTbGlkZVNpemUiLCJ2aXJ0dWFsU2l6ZSIsIm1hcmdpbkxlZnQiLCJtYXJnaW5SaWdodCIsIm1hcmdpbkJvdHRvbSIsIm1hcmdpblRvcCIsImNlbnRlcmVkU2xpZGVzIiwiY3NzTW9kZSIsImdyaWRFbmFibGVkIiwic2xpZGVTaXplIiwiaW5pdFNsaWRlcyIsInVuc2V0U2xpZGVzIiwic2hvdWxkUmVzZXRTbGlkZVNpemUiLCJicmVha3BvaW50cyIsInNsaWRlIiwidXBkYXRlU2xpZGUiLCJzbGlkZVN0eWxlcyIsImN1cnJlbnRUcmFuc2Zvcm0iLCJjdXJyZW50V2ViS2l0VHJhbnNmb3JtIiwicm91bmRMZW5ndGhzIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJib3hTaXppbmciLCJmbG9vciIsInN3aXBlclNsaWRlU2l6ZSIsImFicyIsInNsaWRlc1Blckdyb3VwIiwic2xpZGVzUGVyR3JvdXBTa2lwIiwiZWZmZWN0Iiwic2V0V3JhcHBlclNpemUiLCJ1cGRhdGVXcmFwcGVyU2l6ZSIsIm5ld1NsaWRlc0dyaWQiLCJzbGlkZXNHcmlkSXRlbSIsImdyb3VwcyIsInNsaWRlc0JlZm9yZSIsInNsaWRlc0FmdGVyIiwiZ3JvdXBTaXplIiwic2xpZGVJbmRleCIsImNlbnRlcmVkU2xpZGVzQm91bmRzIiwiYWxsU2xpZGVzU2l6ZSIsInNsaWRlU2l6ZVZhbHVlIiwibWF4U25hcCIsInNuYXAiLCJjZW50ZXJJbnN1ZmZpY2llbnRTbGlkZXMiLCJvZmZzZXRTaXplIiwiYWxsU2xpZGVzT2Zmc2V0Iiwic25hcEluZGV4IiwiYWRkVG9TbmFwR3JpZCIsImFkZFRvU2xpZGVzR3JpZCIsInYiLCJ3YXRjaE92ZXJmbG93IiwiY2hlY2tPdmVyZmxvdyIsIndhdGNoU2xpZGVzUHJvZ3Jlc3MiLCJ1cGRhdGVTbGlkZXNPZmZzZXQiLCJiYWNrRmFjZUhpZGRlbkNsYXNzIiwiY29udGFpbmVyTW9kaWZpZXJDbGFzcyIsImhhc0NsYXNzQmFja2ZhY2VDbGFzc0FkZGVkIiwibWF4QmFja2ZhY2VIaWRkZW5TbGlkZXMiLCJ1cGRhdGVBdXRvSGVpZ2h0IiwiYWN0aXZlU2xpZGVzIiwibmV3SGVpZ2h0Iiwic2V0VHJhbnNpdGlvbiIsImdldFNsaWRlQnlJbmRleCIsImdldFNsaWRlSW5kZXhCeURhdGEiLCJ2aXNpYmxlU2xpZGVzIiwib2Zmc2V0SGVpZ2h0IiwibWludXNPZmZzZXQiLCJvZmZzZXRMZWZ0Iiwib2Zmc2V0VG9wIiwic3dpcGVyU2xpZGVPZmZzZXQiLCJjc3NPdmVyZmxvd0FkanVzdG1lbnQiLCJ1cGRhdGVTbGlkZXNQcm9ncmVzcyIsIm9mZnNldENlbnRlciIsInZpc2libGVTbGlkZXNJbmRleGVzIiwic2xpZGVPZmZzZXQiLCJzbGlkZVByb2dyZXNzIiwibWluVHJhbnNsYXRlIiwib3JpZ2luYWxTbGlkZVByb2dyZXNzIiwic2xpZGVCZWZvcmUiLCJzbGlkZUFmdGVyIiwiaXNGdWxseVZpc2libGUiLCJpc1Zpc2libGUiLCJzbGlkZVZpc2libGVDbGFzcyIsInNsaWRlRnVsbHlWaXNpYmxlQ2xhc3MiLCJvcmlnaW5hbFByb2dyZXNzIiwidXBkYXRlUHJvZ3Jlc3MiLCJtdWx0aXBsaWVyIiwidHJhbnNsYXRlc0RpZmYiLCJtYXhUcmFuc2xhdGUiLCJpc0JlZ2lubmluZyIsImlzRW5kIiwicHJvZ3Jlc3NMb29wIiwid2FzQmVnaW5uaW5nIiwid2FzRW5kIiwiaXNCZWdpbm5pbmdSb3VuZGVkIiwiaXNFbmRSb3VuZGVkIiwiZmlyc3RTbGlkZUluZGV4IiwibGFzdFNsaWRlSW5kZXgiLCJmaXJzdFNsaWRlVHJhbnNsYXRlIiwibGFzdFNsaWRlVHJhbnNsYXRlIiwidHJhbnNsYXRlTWF4IiwidHJhbnNsYXRlQWJzIiwiYXV0b0hlaWdodCIsInVwZGF0ZVNsaWRlc0NsYXNzZXMiLCJnZXRGaWx0ZXJlZFNsaWRlIiwiYWN0aXZlU2xpZGUiLCJwcmV2U2xpZGUiLCJuZXh0U2xpZGUiLCJuZXh0RWxzIiwibmV4dEVsZW1lbnRTaWJsaW5nIiwibmV4dCIsImVsZW1lbnROZXh0QWxsIiwicHJldkVscyIsInByZXZpb3VzRWxlbWVudFNpYmxpbmciLCJwcmV2IiwiZWxlbWVudFByZXZBbGwiLCJzbGlkZUFjdGl2ZUNsYXNzIiwic2xpZGVOZXh0Q2xhc3MiLCJzbGlkZVByZXZDbGFzcyIsImVtaXRTbGlkZXNDbGFzc2VzIiwidXBkYXRlQWN0aXZlSW5kZXgiLCJuZXdBY3RpdmVJbmRleCIsInByZXZpb3VzSW5kZXgiLCJwcmV2aW91c1JlYWxJbmRleCIsInByZXZpb3VzU25hcEluZGV4IiwiZ2V0VmlydHVhbFJlYWxJbmRleCIsImFJbmRleCIsIm5vcm1hbGl6ZVNsaWRlSW5kZXgiLCJnZXRBY3RpdmVJbmRleEJ5VHJhbnNsYXRlIiwic2tpcCIsImZpcnN0U2xpZGVJbkNvbHVtbiIsImFjdGl2ZVNsaWRlSW5kZXgiLCJnZXRBdHRyaWJ1dGUiLCJpbml0aWFsaXplZCIsInJ1bkNhbGxiYWNrc09uSW5pdCIsInVwZGF0ZUNsaWNrZWRTbGlkZSIsInBhdGgiLCJwYXRoRWwiLCJzbGlkZUZvdW5kIiwiY2xpY2tlZFNsaWRlIiwiY2xpY2tlZEluZGV4Iiwic2xpZGVUb0NsaWNrZWRTbGlkZSIsImdldFRyYW5zbGF0ZSIsInZpcnR1YWxUcmFuc2xhdGUiLCJjdXJyZW50VHJhbnNsYXRlIiwic2V0VHJhbnNsYXRlIiwiYnlDb250cm9sbGVyIiwibmV3UHJvZ3Jlc3MiLCJ4IiwieSIsInByZXZpb3VzVHJhbnNsYXRlIiwidHJhbnNsYXRlVG8iLCJydW5DYWxsYmFja3MiLCJ0cmFuc2xhdGVCb3VuZHMiLCJpbnRlcm5hbCIsImFuaW1hdGluZyIsInByZXZlbnRJbnRlcmFjdGlvbk9uVHJhbnNpdGlvbiIsIm5ld1RyYW5zbGF0ZSIsImlzSCIsImJlaGF2aW9yIiwib25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kIiwidHJhbnNpdGlvbkVtaXQiLCJkaXJlY3Rpb24iLCJzdGVwIiwic2xpZGVUbyIsImluaXRpYWwiLCJub3JtYWxpemVkVHJhbnNsYXRlIiwibm9ybWFsaXplZEdyaWQiLCJub3JtYWxpemVkR3JpZE5leHQiLCJhbGxvd1NsaWRlTmV4dCIsImFsbG93U2xpZGVQcmV2IiwidHJhbnNpdGlvblN0YXJ0IiwidHJhbnNpdGlvbkVuZCIsInQiLCJfaW1tZWRpYXRlVmlydHVhbCIsIl9jc3NNb2RlVmlydHVhbEluaXRpYWxTZXQiLCJpbml0aWFsU2xpZGUiLCJvblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCIsInNsaWRlVG9Mb29wIiwibmV3SW5kZXgiLCJ0YXJnZXRTbGlkZUluZGV4IiwiY29scyIsIm5lZWRMb29wRml4IiwibG9vcEZpeCIsInNsaWRlUmVhbEluZGV4Iiwic2xpZGVOZXh0IiwicGVyR3JvdXAiLCJzbGlkZXNQZXJHcm91cEF1dG8iLCJpbmNyZW1lbnQiLCJsb29wUHJldmVudHNTbGlkaW5nIiwiX2NsaWVudExlZnQiLCJjbGllbnRMZWZ0Iiwic2xpZGVQcmV2Iiwibm9ybWFsaXplIiwidmFsIiwibm9ybWFsaXplZFNuYXBHcmlkIiwicHJldlNuYXAiLCJwcmV2U25hcEluZGV4IiwicHJldkluZGV4IiwibGFzdEluZGV4Iiwic2xpZGVSZXNldCIsInNsaWRlVG9DbG9zZXN0IiwidGhyZXNob2xkIiwiY3VycmVudFNuYXAiLCJzbGlkZVRvSW5kZXgiLCJzbGlkZVNlbGVjdG9yIiwibG9vcGVkU2xpZGVzIiwiZ2V0U2xpZGVJbmRleCIsImxvb3BDcmVhdGUiLCJzaG91bGRGaWxsR3JvdXAiLCJzaG91bGRGaWxsR3JpZCIsImFkZEJsYW5rU2xpZGVzIiwiYW1vdW50T2ZTbGlkZXMiLCJzbGlkZUJsYW5rQ2xhc3MiLCJhcHBlbmQiLCJsb29wQWRkQmxhbmtTbGlkZXMiLCJyZWNhbGNTbGlkZXMiLCJieU1vdXNld2hlZWwiLCJsb29wQWRkaXRpb25hbFNsaWRlcyIsImZpbGwiLCJwcmVwZW5kU2xpZGVzSW5kZXhlcyIsImFwcGVuZFNsaWRlc0luZGV4ZXMiLCJpc05leHQiLCJpc1ByZXYiLCJzbGlkZXNQcmVwZW5kZWQiLCJzbGlkZXNBcHBlbmRlZCIsImFjdGl2ZUNvbEluZGV4V2l0aFNoaWZ0IiwiY29sSW5kZXhUb1ByZXBlbmQiLCJfX3ByZXZlbnRPYnNlcnZlcl9fIiwic3dpcGVyTG9vcE1vdmVET00iLCJwcmVwZW5kIiwiY3VycmVudFNsaWRlVHJhbnNsYXRlIiwiZGlmZiIsInRvdWNoRXZlbnRzRGF0YSIsInN0YXJ0VHJhbnNsYXRlIiwic2hpZnQiLCJjb250cm9sbGVyIiwiY29udHJvbCIsImxvb3BQYXJhbXMiLCJsb29wRGVzdHJveSIsIm5ld1NsaWRlc09yZGVyIiwic3dpcGVyU2xpZGVJbmRleCIsInByZXZlbnRFZGdlU3dpcGUiLCJzdGFydFgiLCJlZGdlU3dpcGVEZXRlY3Rpb24iLCJlZGdlU3dpcGVUaHJlc2hvbGQiLCJpbm5lcldpZHRoIiwicHJldmVudERlZmF1bHQiLCJvblRvdWNoU3RhcnQiLCJvcmlnaW5hbEV2ZW50IiwidHlwZSIsInBvaW50ZXJJZCIsInRhcmdldFRvdWNoZXMiLCJ0b3VjaElkIiwiaWRlbnRpZmllciIsInBhZ2VYIiwidG91Y2hlcyIsInNpbXVsYXRlVG91Y2giLCJwb2ludGVyVHlwZSIsInRhcmdldEVsIiwidG91Y2hFdmVudHNUYXJnZXQiLCJ3aGljaCIsImJ1dHRvbiIsImlzVG91Y2hlZCIsImlzTW92ZWQiLCJzd2lwaW5nQ2xhc3NIYXNWYWx1ZSIsIm5vU3dpcGluZ0NsYXNzIiwiZXZlbnRQYXRoIiwiY29tcG9zZWRQYXRoIiwibm9Td2lwaW5nU2VsZWN0b3IiLCJpc1RhcmdldFNoYWRvdyIsIm5vU3dpcGluZyIsImJhc2UiLCJfX2Nsb3Nlc3RGcm9tIiwiYXNzaWduZWRTbG90IiwiZm91bmQiLCJnZXRSb290Tm9kZSIsImNsb3Nlc3RFbGVtZW50IiwiYWxsb3dDbGljayIsInN3aXBlSGFuZGxlciIsImN1cnJlbnRYIiwiY3VycmVudFkiLCJwYWdlWSIsInN0YXJ0WSIsImFsbG93VG91Y2hDYWxsYmFja3MiLCJpc1Njcm9sbGluZyIsInN0YXJ0TW92aW5nIiwidG91Y2hTdGFydFRpbWUiLCJzd2lwZURpcmVjdGlvbiIsImFsbG93VGhyZXNob2xkTW92ZSIsImZvY3VzYWJsZUVsZW1lbnRzIiwic2hvdWxkUHJldmVudERlZmF1bHQiLCJhbGxvd1RvdWNoTW92ZSIsInRvdWNoU3RhcnRQcmV2ZW50RGVmYXVsdCIsInRvdWNoU3RhcnRGb3JjZVByZXZlbnREZWZhdWx0IiwiaXNDb250ZW50RWRpdGFibGUiLCJmcmVlTW9kZSIsIm9uVG91Y2hNb3ZlIiwidGFyZ2V0VG91Y2giLCJjaGFuZ2VkVG91Y2hlcyIsInByZXZlbnRlZEJ5TmVzdGVkU3dpcGVyIiwidG91Y2hSZWxlYXNlT25FZGdlcyIsInByZXZpb3VzWCIsInByZXZpb3VzWSIsImRpZmZYIiwiZGlmZlkiLCJzcXJ0IiwidG91Y2hBbmdsZSIsImF0YW4yIiwicHJldmVudFRvdWNoTW92ZUZyb21Qb2ludGVyTW92ZSIsImNhbmNlbGFibGUiLCJ0b3VjaE1vdmVTdG9wUHJvcGFnYXRpb24iLCJuZXN0ZWQiLCJzdG9wUHJvcGFnYXRpb24iLCJ0b3VjaGVzRGlmZiIsIm9uZVdheU1vdmVtZW50IiwidG91Y2hSYXRpbyIsInByZXZUb3VjaGVzRGlyZWN0aW9uIiwidG91Y2hlc0RpcmVjdGlvbiIsImlzTG9vcCIsImFsbG93TG9vcEZpeCIsImV2dCIsImJ1YmJsZXMiLCJkZXRhaWwiLCJieVN3aXBlclRvdWNoTW92ZSIsImRpc3BhdGNoRXZlbnQiLCJhbGxvd01vbWVudHVtQm91bmNlIiwiZ3JhYkN1cnNvciIsInNldEdyYWJDdXJzb3IiLCJsb29wU3dhcFJlc2V0IiwiZGlzYWJsZVBhcmVudFN3aXBlciIsInJlc2lzdGFuY2VSYXRpbyIsInJlc2lzdGFuY2UiLCJmb2xsb3dGaW5nZXIiLCJvblRvdWNoRW5kIiwidG91Y2hFbmRUaW1lIiwidGltZURpZmYiLCJwYXRoVHJlZSIsImxhc3RDbGlja1RpbWUiLCJjdXJyZW50UG9zIiwic3dpcGVUb0xhc3QiLCJzdG9wSW5kZXgiLCJyZXdpbmRGaXJzdEluZGV4IiwicmV3aW5kTGFzdEluZGV4IiwicmF0aW8iLCJsb25nU3dpcGVzTXMiLCJsb25nU3dpcGVzIiwibG9uZ1N3aXBlc1JhdGlvIiwic2hvcnRTd2lwZXMiLCJuYXZpZ2F0aW9uIiwibmV4dEVsIiwicHJldkVsIiwib25SZXNpemUiLCJzZXRCcmVha3BvaW50IiwiaXNWaXJ0dWFsTG9vcCIsImF1dG9wbGF5IiwicnVubmluZyIsInBhdXNlZCIsInJlc2l6ZVRpbWVvdXQiLCJyZXN1bWUiLCJvbkNsaWNrIiwicHJldmVudENsaWNrcyIsInByZXZlbnRDbGlja3NQcm9wYWdhdGlvbiIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsIm9uU2Nyb2xsIiwic2Nyb2xsTGVmdCIsInNjcm9sbFRvcCIsIm9uTG9hZCIsIm9uRG9jdW1lbnRUb3VjaFN0YXJ0IiwiZG9jdW1lbnRUb3VjaEhhbmRsZXJQcm9jZWVkZWQiLCJ0b3VjaEFjdGlvbiIsImNhcHR1cmUiLCJkb21NZXRob2QiLCJzd2lwZXJNZXRob2QiLCJwYXNzaXZlIiwidXBkYXRlT25XaW5kb3dSZXNpemUiLCJpc0dyaWRFbmFibGVkIiwiZGVmYXVsdHMiLCJpbml0Iiwic3dpcGVyRWxlbWVudE5vZGVOYW1lIiwicmVzaXplT2JzZXJ2ZXIiLCJjcmVhdGVFbGVtZW50cyIsImV2ZW50c1ByZWZpeCIsInVybCIsImJyZWFrcG9pbnRzQmFzZSIsInVuaXF1ZU5hdkVsZW1lbnRzIiwicGFzc2l2ZUxpc3RlbmVycyIsIndyYXBwZXJDbGFzcyIsIl9lbWl0Q2xhc3NlcyIsIm1vZHVsZUV4dGVuZFBhcmFtcyIsImFsbE1vZHVsZXNQYXJhbXMiLCJtb2R1bGVQYXJhbU5hbWUiLCJtb2R1bGVQYXJhbXMiLCJhdXRvIiwicHJvdG90eXBlcyIsInRyYW5zaXRpb24iLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJ0cmFuc2l0aW9uRGVsYXkiLCJtb3ZpbmciLCJpc0xvY2tlZCIsImN1cnNvciIsInVuc2V0R3JhYkN1cnNvciIsImF0dGFjaEV2ZW50cyIsImJpbmQiLCJkZXRhY2hFdmVudHMiLCJicmVha3BvaW50IiwiZ2V0QnJlYWtwb2ludCIsImN1cnJlbnRCcmVha3BvaW50IiwiYnJlYWtwb2ludFBhcmFtcyIsIm9yaWdpbmFsUGFyYW1zIiwid2FzTXVsdGlSb3ciLCJpc011bHRpUm93Iiwid2FzR3JhYkN1cnNvciIsImlzR3JhYkN1cnNvciIsIndhc0VuYWJsZWQiLCJlbWl0Q29udGFpbmVyQ2xhc3NlcyIsIndhc01vZHVsZUVuYWJsZWQiLCJpc01vZHVsZUVuYWJsZWQiLCJkaXNhYmxlIiwiZW5hYmxlIiwiZGlyZWN0aW9uQ2hhbmdlZCIsIm5lZWRzUmVMb29wIiwid2FzTG9vcCIsImNoYW5nZURpcmVjdGlvbiIsImlzRW5hYmxlZCIsImhhc0xvb3AiLCJjb250YWluZXJFbCIsImN1cnJlbnRIZWlnaHQiLCJpbm5lckhlaWdodCIsInBvaW50cyIsInBvaW50IiwibWluUmF0aW8iLCJzdWJzdHIiLCJ2YWx1ZSIsInNvcnQiLCJiIiwid2FzTG9ja2VkIiwibGFzdFNsaWRlUmlnaHRFZGdlIiwiYWRkQ2xhc3NlcyIsImNsYXNzTmFtZXMiLCJzdWZmaXhlcyIsImVudHJpZXMiLCJwcmVmaXgiLCJyZXN1bHRDbGFzc2VzIiwiaXRlbSIsInByZXBhcmVDbGFzc2VzIiwicmVtb3ZlQ2xhc3NlcyIsImV4dGVuZGVkRGVmYXVsdHMiLCJTd2lwZXIiLCJzd2lwZXJzIiwibmV3UGFyYW1zIiwibW9kdWxlcyIsIl9fbW9kdWxlc19fIiwibW9kIiwiZXh0ZW5kUGFyYW1zIiwic3dpcGVyUGFyYW1zIiwicGFzc2VkUGFyYW1zIiwiZXZlbnROYW1lIiwidmVsb2NpdHkiLCJ0cnVuYyIsImNsaWNrVGltZW91dCIsInZlbG9jaXRpZXMiLCJpbWFnZXNUb0xvYWQiLCJpbWFnZXNMb2FkZWQiLCJwcm9wZXJ0eSIsInNldFByb2dyZXNzIiwiY2xzIiwiZ2V0U2xpZGVDbGFzc2VzIiwidXBkYXRlcyIsInZpZXciLCJleGFjdCIsInNwdiIsImJyZWFrTG9vcCIsInRyYW5zbGF0ZVZhbHVlIiwidHJhbnNsYXRlZCIsImNvbXBsZXRlIiwibmV3RGlyZWN0aW9uIiwibmVlZFVwZGF0ZSIsImN1cnJlbnREaXJlY3Rpb24iLCJjaGFuZ2VMYW5ndWFnZURpcmVjdGlvbiIsIm1vdW50IiwibW91bnRlZCIsInBhcmVudE5vZGUiLCJ0b1VwcGVyQ2FzZSIsImdldFdyYXBwZXJTZWxlY3RvciIsImdldFdyYXBwZXIiLCJzbGlkZVNsb3RzIiwiaG9zdEVsIiwibGF6eUVsZW1lbnRzIiwiZGVzdHJveSIsImRlbGV0ZUluc3RhbmNlIiwiY2xlYW5TdHlsZXMiLCJvYmplY3QiLCJkZWxldGVQcm9wcyIsImV4dGVuZERlZmF1bHRzIiwibmV3RGVmYXVsdHMiLCJpbnN0YWxsTW9kdWxlIiwidXNlIiwibW9kdWxlIiwibSIsIk5hdmlnYXRpb24iLCJnZXRFbCIsInJlcyIsInRvZ2dsZUVsIiwiZGlzYWJsZWQiLCJzdWJFbCIsImRpc2FibGVkQ2xhc3MiLCJ0YWdOYW1lIiwibG9ja0NsYXNzIiwib25QcmV2Q2xpY2siLCJvbk5leHRDbGljayIsImNoZWNrUHJvcHMiLCJpbml0QnV0dG9uIiwiZGVzdHJveUJ1dHRvbiIsImhpZGVPbkNsaWNrIiwiaGlkZGVuQ2xhc3MiLCJuYXZpZ2F0aW9uRGlzYWJsZWRDbGFzcyIsIl9zIiwidGFyZ2V0SXNCdXR0b24iLCJmaW5kIiwicGFnaW5hdGlvbiIsImNsaWNrYWJsZSIsImlzSGlkZGVuIiwidG9nZ2xlIiwiX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsIlJlZmVyZW5jZUVycm9yIiwiX2luaGVyaXRzTG9vc2UiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjcmVhdGUiLCJfX3Byb3RvX18iLCJwcm90b3R5cGVHcm91cCIsInByb3RvTWV0aG9kIiwib2JzZXJ2ZXIiLCJhbmltYXRpb25GcmFtZSIsInJlc2l6ZUhhbmRsZXIiLCJvcmllbnRhdGlvbkNoYW5nZUhhbmRsZXIiLCJSZXNpemVPYnNlcnZlciIsIm5ld1dpZHRoIiwiX3JlZjIiLCJjb250ZW50Qm94U2l6ZSIsImNvbnRlbnRSZWN0IiwiaW5saW5lU2l6ZSIsImJsb2NrU2l6ZSIsIm9ic2VydmUiLCJ1bm9ic2VydmUiLCJvYnNlcnZlcnMiLCJhdHRhY2giLCJvcHRpb25zIiwiTXV0YXRpb25PYnNlcnZlciIsIldlYmtpdE11dGF0aW9uT2JzZXJ2ZXIiLCJtdXRhdGlvbnMiLCJvYnNlcnZlclVwZGF0ZSIsImF0dHJpYnV0ZXMiLCJjaGlsZExpc3QiLCJjaGFyYWN0ZXJEYXRhIiwib2JzZXJ2ZVBhcmVudHMiLCJvYnNlcnZlU2xpZGVDaGlsZHJlbiIsImNvbnRhaW5lclBhcmVudHMiLCJwYXJlbnRzIiwicGFyZW50IiwicGFyZW50RWxlbWVudCIsImRpc2Nvbm5lY3QiLCJfc3VwcHJlc3NPdmVyd3JpdGVzIiwiX3JldmVydGluZyIsIl9jb250ZXh0IiwiX2dsb2JhbFRpbWVsaW5lIiwiX3dpbiIsIl9jb3JlSW5pdHRlZCIsIl9kb2MiLCJfY29yZVJlYWR5IiwiX2xhc3RSZW5kZXJlZEZyYW1lIiwiX3F1aWNrVHdlZW4iLCJfdGlja2VyQWN0aXZlIiwibiIsIm4xIiwibjIiLCJuMyIsImVhc2VPdXQiLCJfY29uZmlnIiwiYXV0b1NsZWVwIiwiZm9yY2UzRCIsIm51bGxUYXJnZXRXYXJuIiwidW5pdHMiLCJsaW5lSGVpZ2h0IiwiX2RlZmF1bHRzIiwib3ZlcndyaXRlIiwiX2JpZ051bSIsIl90aW55TnVtIiwiXzJQSSIsIl9IQUxGX1BJIiwiX2dzSUQiLCJfc3FydCIsIl9jb3MiLCJfc2luIiwic2luIiwiX2lzU3RyaW5nIiwiX2lzRnVuY3Rpb24iLCJfaXNOdW1iZXIiLCJfaXNVbmRlZmluZWQiLCJfaXNPYmplY3QiLCJfaXNOb3RGYWxzZSIsIl93aW5kb3dFeGlzdHMiLCJfaXNGdW5jT3JTdHJpbmciLCJfaXNUeXBlZEFycmF5IiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJfaXNBcnJheSIsIl9zdHJpY3ROdW1FeHAiLCJfbnVtRXhwIiwiX251bVdpdGhVbml0RXhwIiwiX2NvbXBsZXhTdHJpbmdOdW1FeHAiLCJfcmVsRXhwIiwiX2RlbGltaXRlZFZhbHVlRXhwIiwiX3VuaXRFeHAiLCJfZ2xvYmFscyIsIl9pbnN0YWxsU2NvcGUiLCJfaW5zdGFsbCIsInNjb3BlIiwiX21lcmdlIiwiZ3NhcCIsIl9taXNzaW5nUGx1Z2luIiwiX3dhcm4iLCJtZXNzYWdlIiwic3VwcHJlc3MiLCJfYWRkR2xvYmFsIiwibmFtZSIsIl9lbXB0eUZ1bmMiLCJfc3RhcnRBdFJldmVydENvbmZpZyIsInN1cHByZXNzRXZlbnRzIiwiaXNTdGFydCIsImtpbGwiLCJfcmV2ZXJ0Q29uZmlnTm9LaWxsIiwiX3JldmVydENvbmZpZyIsIl9yZXNlcnZlZFByb3BzIiwiX2xhenlUd2VlbnMiLCJfbGF6eUxvb2t1cCIsIl9wbHVnaW5zIiwiX2VmZmVjdHMiLCJfbmV4dEdDRnJhbWUiLCJfaGFybmVzc1BsdWdpbnMiLCJfY2FsbGJhY2tOYW1lcyIsIl9oYXJuZXNzIiwidGFyZ2V0cyIsImhhcm5lc3NQbHVnaW4iLCJfZ3NhcCIsImhhcm5lc3MiLCJ0YXJnZXRUZXN0IiwiR1NDYWNoZSIsIl9nZXRDYWNoZSIsInRvQXJyYXkiLCJfZ2V0UHJvcGVydHkiLCJfZm9yRWFjaE5hbWUiLCJuYW1lcyIsImZ1bmMiLCJfcm91bmQiLCJyb3VuZCIsIl9yb3VuZFByZWNpc2UiLCJfcGFyc2VSZWxhdGl2ZSIsInN0YXJ0Iiwib3BlcmF0b3IiLCJjaGFyQXQiLCJlbmQiLCJfYXJyYXlDb250YWluc0FueSIsInRvU2VhcmNoIiwidG9GaW5kIiwibCIsIl9sYXp5UmVuZGVyIiwidHdlZW4iLCJfbGF6eSIsInJlbmRlciIsIl9sYXp5U2FmZVJlbmRlciIsImFuaW1hdGlvbiIsImZvcmNlIiwiX2luaXR0ZWQiLCJfc3RhcnRBdCIsIl9udW1lcmljSWZQb3NzaWJsZSIsIl9wYXNzVGhyb3VnaCIsInAiLCJfc2V0RGVmYXVsdHMiLCJ0b01lcmdlIiwiX21lcmdlRGVlcCIsIl9jb3B5RXhjbHVkaW5nIiwiZXhjbHVkaW5nIiwiY29weSIsIl9pbmhlcml0RGVmYXVsdHMiLCJ2YXJzIiwiZXhjbHVkZUR1cmF0aW9uIiwia2V5ZnJhbWVzIiwiaW5oZXJpdCIsIl9kcCIsIl9hZGRMaW5rZWRMaXN0SXRlbSIsImZpcnN0UHJvcCIsImxhc3RQcm9wIiwic29ydEJ5IiwiX3ByZXYiLCJfbmV4dCIsIl9yZW1vdmVMaW5rZWRMaXN0SXRlbSIsIl9yZW1vdmVGcm9tUGFyZW50Iiwib25seUlmUGFyZW50SGFzQXV0b1JlbW92ZSIsImF1dG9SZW1vdmVDaGlsZHJlbiIsIl9hY3QiLCJfdW5jYWNoZSIsIl9lbmQiLCJfZHVyIiwiX3N0YXJ0IiwiX2RpcnR5IiwiX3Jld2luZFN0YXJ0QXQiLCJ0b3RhbFRpbWUiLCJyZXZlcnQiLCJpbW1lZGlhdGVSZW5kZXIiLCJhdXRvUmV2ZXJ0IiwiX2hhc05vUGF1c2VkQW5jZXN0b3JzIiwiX3RzIiwiX2VsYXBzZWRDeWNsZUR1cmF0aW9uIiwiX3JlcGVhdCIsIl9hbmltYXRpb25DeWNsZSIsIl90VGltZSIsIl9yRGVsYXkiLCJ0VGltZSIsImN5Y2xlRHVyYXRpb24iLCJ3aG9sZSIsIl9wYXJlbnRUb0NoaWxkVG90YWxUaW1lIiwicGFyZW50VGltZSIsInRvdGFsRHVyYXRpb24iLCJfdER1ciIsIl9zZXRFbmQiLCJfcnRzIiwiX2FsaWduUGxheWhlYWQiLCJzbW9vdGhDaGlsZFRpbWluZyIsIl90aW1lIiwiX3Bvc3RBZGRDaGVja3MiLCJ0aW1lbGluZSIsInJhd1RpbWUiLCJfY2xhbXAiLCJfelRpbWUiLCJfYWRkVG9UaW1lbGluZSIsInBvc2l0aW9uIiwic2tpcENoZWNrcyIsIl9wYXJzZVBvc2l0aW9uIiwiX2RlbGF5IiwidGltZVNjYWxlIiwiX3NvcnQiLCJfaXNGcm9tT3JGcm9tU3RhcnQiLCJfcmVjZW50IiwiX3Njcm9sbFRyaWdnZXIiLCJ0cmlnZ2VyIiwiU2Nyb2xsVHJpZ2dlciIsIl9hdHRlbXB0SW5pdFR3ZWVuIiwiX2luaXRUd2VlbiIsIl9wdCIsImxhenkiLCJfdGlja2VyIiwiZnJhbWUiLCJfcGFyZW50UGxheWhlYWRJc0JlZm9yZVN0YXJ0IiwiX2xvY2siLCJfc2V0RHVyYXRpb24iLCJza2lwVW5jYWNoZSIsImxlYXZlUGxheWhlYWQiLCJyZXBlYXQiLCJkdXIiLCJ0b3RhbFByb2dyZXNzIiwiX29uVXBkYXRlVG90YWxEdXJhdGlvbiIsIlRpbWVsaW5lIiwiX3plcm9Qb3NpdGlvbiIsImVuZFRpbWUiLCJwZXJjZW50QW5pbWF0aW9uIiwib2Zmc2V0IiwiaXNQZXJjZW50IiwibGFiZWxzIiwicmVjZW50IiwiY2xpcHBlZER1cmF0aW9uIiwiX2NyZWF0ZVR3ZWVuVHlwZSIsImlyVmFycyIsImlzTGVnYWN5IiwidmFyc0luZGV4IiwicnVuQmFja3dhcmRzIiwic3RhcnRBdCIsIlR3ZWVuIiwiX2NvbmRpdGlvbmFsUmV0dXJuIiwiZ2V0VW5pdCIsImV4ZWMiLCJfc2xpY2UiLCJfaXNBcnJheUxpa2UiLCJub25FbXB0eSIsIl9mbGF0dGVuIiwiYXIiLCJsZWF2ZVN0cmluZ3MiLCJhY2N1bXVsYXRvciIsIl9hY2N1bXVsYXRvciIsIl93YWtlIiwibmF0aXZlRWxlbWVudCIsInNodWZmbGUiLCJyYW5kb20iLCJkaXN0cmlidXRlIiwiZWFjaCIsImVhc2UiLCJfcGFyc2VFYXNlIiwiY2FjaGUiLCJpc0RlY2ltYWwiLCJyYXRpb3MiLCJyYXRpb1giLCJyYXRpb1kiLCJjZW50ZXIiLCJlZGdlcyIsIm9yaWdpblgiLCJvcmlnaW5ZIiwiZCIsImoiLCJ3cmFwQXQiLCJkaXN0YW5jZXMiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJsZWZ0IiwidSIsIl9pbnZlcnRFYXNlIiwiX3JvdW5kTW9kaWZpZXIiLCJwb3ciLCJyYXciLCJzbmFwVG8iLCJyYWRpdXMiLCJpczJEIiwidmFsdWVzIiwiZHgiLCJkeSIsInJvdW5kaW5nSW5jcmVtZW50IiwicmV0dXJuRnVuY3Rpb24iLCJfd3JhcEFycmF5Iiwid3JhcHBlciIsIl9yZXBsYWNlUmFuZG9tIiwibnVtcyIsInMiLCJtYXBSYW5nZSIsImluTWluIiwiaW5NYXgiLCJvdXRNaW4iLCJvdXRNYXgiLCJpblJhbmdlIiwib3V0UmFuZ2UiLCJfZ2V0TGFiZWxJbkRpcmVjdGlvbiIsImZyb21UaW1lIiwiYmFja3dhcmQiLCJkaXN0YW5jZSIsIl9jYWxsYmFjayIsImV4ZWN1dGVMYXp5Rmlyc3QiLCJyZXN1bHQiLCJwcmV2Q29udGV4dCIsIl9jdHgiLCJjYWxsYmFja1Njb3BlIiwiX2ludGVycnVwdCIsInNjcm9sbFRyaWdnZXIiLCJfcmVnaXN0ZXJQbHVnaW5RdWV1ZSIsIl9jcmVhdGVQbHVnaW4iLCJjb25maWciLCJoZWFkbGVzcyIsImlzRnVuYyIsIlBsdWdpbiIsIl9wcm9wcyIsImluc3RhbmNlRGVmYXVsdHMiLCJfcmVuZGVyUHJvcFR3ZWVucyIsIl9hZGRQcm9wVHdlZW4iLCJfa2lsbFByb3BUd2VlbnNPZiIsIm1vZGlmaWVyIiwiX2FkZFBsdWdpbk1vZGlmaWVyIiwicmF3VmFycyIsInN0YXRpY3MiLCJnZXQiLCJnZXRTZXR0ZXIiLCJfZ2V0U2V0dGVyIiwiYWxpYXNlcyIsInJlZ2lzdGVyIiwiUHJvcFR3ZWVuIiwiXzI1NSIsIl9jb2xvckxvb2t1cCIsImFxdWEiLCJsaW1lIiwic2lsdmVyIiwiYmxhY2siLCJtYXJvb24iLCJ0ZWFsIiwiYmx1ZSIsIm5hdnkiLCJ3aGl0ZSIsIm9saXZlIiwieWVsbG93Iiwib3JhbmdlIiwiZ3JheSIsInB1cnBsZSIsImdyZWVuIiwicmVkIiwicGluayIsImN5YW4iLCJ0cmFuc3BhcmVudCIsIl9odWUiLCJoIiwibTEiLCJtMiIsInNwbGl0Q29sb3IiLCJ0b0hTTCIsImZvcmNlQWxwaGEiLCJyIiwid2FzSFNMIiwiX2NvbG9yT3JkZXJEYXRhIiwiX2NvbG9yRXhwIiwiX2Zvcm1hdENvbG9ycyIsIm9yZGVyTWF0Y2hEYXRhIiwic2hlbGwiLCJjb2xvcnMiLCJjb2xvciIsIlJlZ0V4cCIsIl9oc2xFeHAiLCJfY29sb3JTdHJpbmdGaWx0ZXIiLCJjb21iaW5lZCIsIl9pZCIsIl9yZXEiLCJfcmFmIiwiX3NlbGYiLCJfZGVsdGEiLCJfaSIsIl9nZXRUaW1lIiwiX2xhZ1RocmVzaG9sZCIsIl9hZGp1c3RlZExhZyIsIl9zdGFydFRpbWUiLCJfbGFzdFVwZGF0ZSIsIl9nYXAiLCJfbmV4dFRpbWUiLCJfbGlzdGVuZXJzIiwiX3RpY2siLCJvdmVybGFwIiwiZGlzcGF0Y2giLCJlbGFwc2VkIiwibWFudWFsIiwidGljayIsImRlbHRhUmF0aW8iLCJmcHMiLCJ3YWtlIiwiZ3NhcFZlcnNpb25zIiwidmVyc2lvbiIsIkdyZWVuU29ja0dsb2JhbHMiLCJzbGVlcCIsImYiLCJsYWdTbW9vdGhpbmciLCJhZGp1c3RlZExhZyIsIkluZmluaXR5IiwiX2ZwcyIsInByaW9yaXRpemUiLCJfZWFzZU1hcCIsIl9jdXN0b21FYXNlRXhwIiwiX3F1b3Rlc0V4cCIsIl9wYXJzZU9iamVjdEluU3RyaW5nIiwicGFyc2VkVmFsIiwibGFzdEluZGV4T2YiLCJfcHJvcGFnYXRlWW95b0Vhc2UiLCJpc1lveW8iLCJfZmlyc3QiLCJ5b3lvRWFzZSIsIl95b3lvIiwiX2Vhc2UiLCJfeUVhc2UiLCJkZWZhdWx0RWFzZSIsIm9wZW4iLCJjbG9zZSIsInN1YnN0cmluZyIsIl9DRSIsIl9jb25maWdFYXNlRnJvbVN0cmluZyIsIl9pbnNlcnRFYXNlIiwiZWFzZUluIiwiZWFzZUluT3V0IiwibG93ZXJjYXNlTmFtZSIsIl9lYXNlSW5PdXRGcm9tT3V0IiwiX2NvbmZpZ0VsYXN0aWMiLCJhbXBsaXR1ZGUiLCJwZXJpb2QiLCJwMSIsInAyIiwicDMiLCJhc2luIiwiX2NvbmZpZ0JhY2siLCJvdmVyc2hvb3QiLCJwb3dlciIsIkxpbmVhciIsImVhc2VOb25lIiwibm9uZSIsIlN0ZXBwZWRFYXNlIiwic3RlcHMiLCJpbW1lZGlhdGVTdGFydCIsInNldCIsIkFuaW1hdGlvbiIsInJlcGVhdERlbGF5IiwieW95byIsIl9wcm90byIsIl90b3RhbFRpbWUiLCJfcHRMb29rdXAiLCJfcFRpbWUiLCJpdGVyYXRpb24iLCJfcHMiLCJfcmVjYWNoZUFuY2VzdG9ycyIsImluY2x1ZGVSZXBlYXRzIiwid3JhcFJlcGVhdHMiLCJwcmV2SXNSZXZlcnRpbmciLCJnbG9iYWxUaW1lIiwiX3NhdCIsInNlZWsiLCJyZXN0YXJ0IiwiaW5jbHVkZURlbGF5IiwicGxheSIsInJldmVyc2VkIiwicmV2ZXJzZSIsInBhdXNlIiwiYXRUaW1lIiwiaW52YWxpZGF0ZSIsImlzQWN0aXZlIiwiZXZlbnRDYWxsYmFjayIsIl9vblVwZGF0ZSIsInRoZW4iLCJvbkZ1bGZpbGxlZCIsIlByb21pc2UiLCJyZXNvbHZlIiwiX3Jlc29sdmUiLCJfdGhlbiIsIl9wcm9tIiwiX0FuaW1hdGlvbiIsIl90aGlzIiwic29ydENoaWxkcmVuIiwiX3Byb3RvMiIsImZyb21UbyIsImZyb21WYXJzIiwidG9WYXJzIiwiZGVsYXllZENhbGwiLCJzdGFnZ2VyVG8iLCJzdGFnZ2VyIiwib25Db21wbGV0ZUFsbCIsIm9uQ29tcGxldGVBbGxQYXJhbXMiLCJvbkNvbXBsZXRlIiwib25Db21wbGV0ZVBhcmFtcyIsInN0YWdnZXJGcm9tIiwic3RhZ2dlckZyb21UbyIsInByZXZQYXVzZWQiLCJwYXVzZVR3ZWVuIiwicHJldlN0YXJ0IiwicHJldkl0ZXJhdGlvbiIsInByZXZUaW1lIiwidER1ciIsImNyb3NzaW5nU3RhcnQiLCJyZXdpbmRpbmciLCJkb2VzV3JhcCIsInJlcGVhdFJlZnJlc2giLCJvblJlcGVhdCIsIl9oYXNQYXVzZSIsIl9mb3JjaW5nIiwiX2xhc3QiLCJfZmluZE5leHRQYXVzZVR3ZWVuIiwib25VcGRhdGUiLCJhZGp1c3RlZFRpbWUiLCJfdGhpczIiLCJhZGRMYWJlbCIsImdldENoaWxkcmVuIiwidHdlZW5zIiwidGltZWxpbmVzIiwiaWdub3JlQmVmb3JlVGltZSIsImdldEJ5SWQiLCJhbmltYXRpb25zIiwicmVtb3ZlTGFiZWwiLCJraWxsVHdlZW5zT2YiLCJfdG90YWxUaW1lMiIsImFkZFBhdXNlIiwicmVtb3ZlUGF1c2UiLCJwcm9wcyIsIm9ubHlBY3RpdmUiLCJnZXRUd2VlbnNPZiIsIl9vdmVyd3JpdGluZ1R3ZWVuIiwicGFyc2VkVGFyZ2V0cyIsImlzR2xvYmFsVGltZSIsIl90YXJnZXRzIiwidHdlZW5UbyIsImluaXR0ZWQiLCJ0bCIsIl92YXJzIiwiX29uU3RhcnQiLCJvblN0YXJ0Iiwib25TdGFydFBhcmFtcyIsInR3ZWVuRnJvbVRvIiwiZnJvbVBvc2l0aW9uIiwidG9Qb3NpdGlvbiIsIm5leHRMYWJlbCIsImFmdGVyVGltZSIsInByZXZpb3VzTGFiZWwiLCJiZWZvcmVUaW1lIiwiY3VycmVudExhYmVsIiwic2hpZnRDaGlsZHJlbiIsImFkanVzdExhYmVscyIsInNvZnQiLCJjbGVhciIsImluY2x1ZGVMYWJlbHMiLCJ1cGRhdGVSb290IiwiX2ZvcmNlQWxsUHJvcFR3ZWVucyIsIl9hZGRDb21wbGV4U3RyaW5nUHJvcFR3ZWVuIiwic2V0dGVyIiwic3RyaW5nRmlsdGVyIiwiZnVuY1BhcmFtIiwic3RhcnROdW1zIiwiZW5kTnVtIiwiY2h1bmsiLCJzdGFydE51bSIsImhhc1JhbmRvbSIsInB0IiwiX3JlbmRlckNvbXBsZXhTdHJpbmciLCJtYXRjaEluZGV4IiwiZnAiLCJvcHRpb25hbCIsImN1cnJlbnRWYWx1ZSIsInBhcnNlZFN0YXJ0IiwiX3NldHRlckZ1bmNXaXRoUGFyYW0iLCJfc2V0dGVyRnVuYyIsIl9zZXR0ZXJQbGFpbiIsIl9yZW5kZXJCb29sZWFuIiwiX3JlbmRlclBsYWluIiwiX2NoZWNrUGx1Z2luIiwicGx1Z2luIiwicHRMb29rdXAiLCJfcGFyc2VGdW5jT3JTdHJpbmciLCJfcHJvY2Vzc1ZhcnMiLCJjbGVhblZhcnMiLCJoYXNQcmlvcml0eSIsImdzRGF0YSIsImhhcm5lc3NWYXJzIiwib3ZlcndyaXR0ZW4iLCJwcmV2U3RhcnRBdCIsImZ1bGxUYXJnZXRzIiwiYXV0b092ZXJ3cml0ZSIsIl9vdmVyd3JpdGUiLCJfZnJvbSIsIl9wdENhY2hlIiwiX29wIiwiX3NvcnRQcm9wVHdlZW5zQnlQcmlvcml0eSIsIl9vbkluaXQiLCJfcGFyc2VLZXlmcmFtZSIsImFsbFByb3BzIiwiZWFzZUVhY2giLCJfc3RhZ2dlclR3ZWVuUHJvcHMiLCJfc3RhZ2dlclByb3BzVG9Ta2lwIiwiX0FuaW1hdGlvbjIiLCJza2lwSW5oZXJpdCIsIl90aGlzMyIsImN1clRhcmdldCIsInN0YWdnZXJGdW5jIiwic3RhZ2dlclZhcnNUb01lcmdlIiwiX3RoaXMzJHZhcnMiLCJrZiIsIl9wcm90bzMiLCJpc05lZ2F0aXZlIiwicHJldlJhdGlvIiwiX3JlbmRlclplcm9EdXJhdGlvblR3ZWVuIiwicmVzZXRUbyIsInN0YXJ0SXNSZWxhdGl2ZSIsInNraXBSZWN1cnNpb24iLCJyb290UFQiLCJsb29rdXAiLCJwdENhY2hlIiwiX3VwZGF0ZVByb3BUd2VlbnMiLCJvdmVyd3JpdHRlblByb3BzIiwiY3VyTG9va3VwIiwiY3VyT3ZlcndyaXRlUHJvcHMiLCJraWxsaW5nVGFyZ2V0cyIsInByb3BUd2Vlbkxvb2t1cCIsImZpcnN0UFQiLCJhMSIsImEyIiwiX2FycmF5c01hdGNoIiwicHJvcGVydHlBbGlhc2VzIiwiX2FkZEFsaWFzZXNUb1ZhcnMiLCJvblJldmVyc2VDb21wbGV0ZSIsIm9uUmV2ZXJzZUNvbXBsZXRlUGFyYW1zIiwiX3NldHRlckF0dHJpYnV0ZSIsImhhc05vbkRlcGVuZGVudFJlbWFpbmluZyIsIm9wIiwiZGVwIiwiX3NldHRlcldpdGhNb2RpZmllciIsIm1TZXQiLCJtdCIsInB0MiIsImZpcnN0IiwibGFzdCIsInByIiwiY2hhbmdlIiwicmVuZGVyZXIiLCJUd2Vlbk1heCIsIlR3ZWVuTGl0ZSIsIlRpbWVsaW5lTGl0ZSIsIlRpbWVsaW5lTWF4IiwiX21lZGlhIiwiX2VtcHR5QXJyYXkiLCJfbGFzdE1lZGlhVGltZSIsIl9jb250ZXh0SUQiLCJfZGlzcGF0Y2giLCJfb25NZWRpYUNoYW5nZSIsImFueU1hdGNoIiwidG9nZ2xlZCIsInF1ZXJpZXMiLCJjb25kaXRpb25zIiwib25NYXRjaCIsIkNvbnRleHQiLCJfciIsImlzUmV2ZXJ0ZWQiLCJfcHJvdG81IiwicHJldlNlbGVjdG9yIiwiaWdub3JlIiwiZ2V0VHdlZW5zIiwiX3RoaXM0IiwiTWF0Y2hNZWRpYSIsImNvbnRleHRzIiwiX3Byb3RvNiIsIm1xIiwiYWN0aXZlIiwiY29uZCIsImFkZExpc3RlbmVyIiwicmVnaXN0ZXJQbHVnaW4iLCJnZXRQcm9wZXJ0eSIsInVuaXQiLCJ1bmNhY2hlIiwiZ2V0dGVyIiwiZm9ybWF0IiwicXVpY2tTZXR0ZXIiLCJzZXR0ZXJzIiwicXVpY2tUbyIsIl9tZXJnZTIiLCJpc1R3ZWVuaW5nIiwicmVnaXN0ZXJFZmZlY3QiLCJfcmVmMyIsInBsdWdpbnMiLCJleHRlbmRUaW1lbGluZSIsInBsdWdpbk5hbWUiLCJyZWdpc3RlckVhc2UiLCJwYXJzZUVhc2UiLCJleHBvcnRSb290IiwiaW5jbHVkZURlbGF5ZWRDYWxscyIsIm1hdGNoTWVkaWFSZWZyZXNoIiwidXRpbHMiLCJ3cmFwIiwicmFuZ2UiLCJ3cmFwWW95byIsInRvdGFsIiwiY2xhbXAiLCJwaXBlIiwiZnVuY3Rpb25zIiwicmVkdWNlIiwidW5pdGl6ZSIsImludGVycG9sYXRlIiwibXV0YXRlIiwiaW50ZXJwb2xhdG9ycyIsImlsIiwiaXNTdHJpbmciLCJtYXN0ZXIiLCJpbnN0YWxsIiwiZWZmZWN0cyIsInRpY2tlciIsImdsb2JhbFRpbWVsaW5lIiwiY29yZSIsImdsb2JhbHMiLCJnZXRDYWNoZSIsInJldmVydGluZyIsInRvQWRkIiwic3VwcHJlc3NPdmVyd3JpdGVzIiwiX2dldFBsdWdpblByb3BUd2VlbiIsIl9idWlsZE1vZGlmaWVyUGx1Z2luIiwidGVtcCIsIm1vZGlmaWVycyIsIl9hZGRNb2RpZmllcnMiLCJQb3dlcjAiLCJQb3dlcjEiLCJQb3dlcjIiLCJQb3dlcjMiLCJQb3dlcjQiLCJRdWFkIiwiQ3ViaWMiLCJRdWFydCIsIlF1aW50IiwiU3Ryb25nIiwiRWxhc3RpYyIsIkJhY2siLCJCb3VuY2UiLCJTaW5lIiwiRXhwbyIsIkNpcmMiLCJfZG9jRWxlbWVudCIsIl9wbHVnaW5Jbml0dGVkIiwiX3RlbXBEaXYiLCJfcmVjZW50U2V0dGVyUGx1Z2luIiwiX3N1cHBvcnRzM0QiLCJfdHJhbnNmb3JtUHJvcHMiLCJfUkFEMkRFRyIsIl9ERUcyUkFEIiwiX2F0YW4yIiwiX2NhcHNFeHAiLCJfaG9yaXpvbnRhbEV4cCIsIl9jb21wbGV4RXhwIiwiX3Byb3BlcnR5QWxpYXNlcyIsImF1dG9BbHBoYSIsInNjYWxlIiwiYWxwaGEiLCJfcmVuZGVyQ1NTUHJvcCIsIl9yZW5kZXJQcm9wV2l0aEVuZCIsIl9yZW5kZXJDU1NQcm9wV2l0aEJlZ2lubmluZyIsIl9yZW5kZXJSb3VuZGVkQ1NTUHJvcCIsIl9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlIiwiX3JlbmRlck5vblR3ZWVuaW5nVmFsdWVPbmx5QXRFbmQiLCJfc2V0dGVyQ1NTU3R5bGUiLCJfc2V0dGVyQ1NTUHJvcCIsIl9zZXR0ZXJUcmFuc2Zvcm0iLCJfc2V0dGVyU2NhbGUiLCJzY2FsZVgiLCJzY2FsZVkiLCJfc2V0dGVyU2NhbGVXaXRoUmVuZGVyIiwicmVuZGVyVHJhbnNmb3JtIiwiX3NldHRlclRyYW5zZm9ybVdpdGhSZW5kZXIiLCJfdHJhbnNmb3JtUHJvcCIsIl90cmFuc2Zvcm1PcmlnaW5Qcm9wIiwiX3NhdmVTdHlsZSIsImlzTm90Q1NTIiwidGZtIiwiX2dldCIsInpPcmlnaW4iLCJzdmciLCJzdmdvIiwiX3JlbW92ZUluZGVwZW5kZW50VHJhbnNmb3JtcyIsInJlbW92ZVByb3BlcnR5IiwiX3JldmVydFN0eWxlIiwiX2dldFN0eWxlU2F2ZXIiLCJwcm9wZXJ0aWVzIiwic2F2ZXIiLCJzYXZlIiwiX2NyZWF0ZUVsZW1lbnQiLCJucyIsIl9nZXRDb21wdXRlZFByb3BlcnR5Iiwic2tpcFByZWZpeEZhbGxiYWNrIiwiY3MiLCJfY2hlY2tQcm9wUHJlZml4IiwiX3ByZWZpeGVzIiwicHJlZmVyUHJlZml4IiwiX2luaXRDb3JlIiwiY3NzVGV4dCIsIl9nZXRCQm94SGFjayIsInN3YXBJZlBvc3NpYmxlIiwiYmJveCIsIm93bmVyU1ZHRWxlbWVudCIsIm9sZFBhcmVudCIsIm9sZFNpYmxpbmciLCJuZXh0U2libGluZyIsIm9sZENTUyIsImFwcGVuZENoaWxkIiwiZGlzcGxheSIsImdldEJCb3giLCJfZ3NhcEJCb3giLCJpbnNlcnRCZWZvcmUiLCJyZW1vdmVDaGlsZCIsIl9nZXRBdHRyaWJ1dGVGYWxsYmFja3MiLCJhdHRyaWJ1dGVzQXJyYXkiLCJoYXNBdHRyaWJ1dGUiLCJfZ2V0QkJveCIsImJvdW5kcyIsImVycm9yIiwiX2lzU1ZHIiwiZ2V0Q1RNIiwiX3JlbW92ZVByb3BlcnR5IiwiZmlyc3QyQ2hhcnMiLCJfYWRkTm9uVHdlZW5pbmdQVCIsImJlZ2lubmluZyIsIm9ubHlTZXRBdEVuZCIsIl9ub25Db252ZXJ0aWJsZVVuaXRzIiwiZGVnIiwicmFkIiwidHVybiIsIl9ub25TdGFuZGFyZExheW91dHMiLCJmbGV4IiwiX2NvbnZlcnRUb1VuaXQiLCJweCIsImlzU1ZHIiwiY3VyVmFsdWUiLCJjdXJVbml0IiwiaG9yaXpvbnRhbCIsImlzUm9vdFNWRyIsIm1lYXN1cmVQcm9wZXJ0eSIsInRvUGl4ZWxzIiwidG9QZXJjZW50IiwiX3BhcnNlVHJhbnNmb3JtIiwiX2ZpcnN0VHdvT25seSIsIl9zcGVjaWFsUHJvcHMiLCJfdHdlZW5Db21wbGV4Q1NTU3RyaW5nIiwic3RhcnRWYWx1ZXMiLCJzdGFydFZhbHVlIiwiZW5kVmFsdWUiLCJlbmRVbml0Iiwic3RhcnRVbml0IiwiX2tleXdvcmRUb1BlcmNlbnQiLCJ0b3AiLCJib3R0b20iLCJyaWdodCIsIl9yZW5kZXJDbGVhclByb3BzIiwiY2xlYXJUcmFuc2Zvcm1zIiwiY2xlYXJQcm9wcyIsIl9pZGVudGl0eTJETWF0cml4IiwiX3JvdGF0aW9uYWxQcm9wZXJ0aWVzIiwiX2lzTnVsbFRyYW5zZm9ybSIsIl9nZXRDb21wdXRlZFRyYW5zZm9ybU1hdHJpeEFzQXJyYXkiLCJtYXRyaXhTdHJpbmciLCJfZ2V0TWF0cml4IiwiZm9yY2UyRCIsImFkZGVkVG9ET00iLCJiYXNlVmFsIiwiY29uc29saWRhdGUiLCJvZmZzZXRQYXJlbnQiLCJfYXBwbHlTVkdPcmlnaW4iLCJvcmlnaW5Jc0Fic29sdXRlIiwic21vb3RoIiwibWF0cml4QXJyYXkiLCJwbHVnaW5Ub0FkZFByb3BUd2VlbnNUbyIsImRldGVybWluYW50IiwieE9yaWdpbk9sZCIsInhPcmlnaW4iLCJ5T3JpZ2luT2xkIiwieU9yaWdpbiIsInhPZmZzZXRPbGQiLCJ4T2Zmc2V0IiwieU9mZnNldE9sZCIsInlPZmZzZXQiLCJ0eCIsInR5Iiwib3JpZ2luU3BsaXQiLCJ6Iiwicm90YXRpb24iLCJyb3RhdGlvblgiLCJyb3RhdGlvblkiLCJza2V3WCIsInNrZXdZIiwicGVyc3BlY3RpdmUiLCJhbmdsZSIsImExMiIsImEyMiIsInQxIiwidDIiLCJ0MyIsImExMyIsImEyMyIsImEzMyIsImE0MiIsImE0MyIsImEzMiIsImludmVydGVkU2NhbGVYIiwicm90YXRlIiwiZm9yY2VDU1MiLCJ4UGVyY2VudCIsInlQZXJjZW50IiwidHJhbnNmb3JtUGVyc3BlY3RpdmUiLCJfcmVuZGVyU1ZHVHJhbnNmb3JtcyIsIl9yZW5kZXJDU1NUcmFuc2Zvcm1zIiwiX3JlbmRlck5vbjNEVHJhbnNmb3JtcyIsIl9hZGRQeFRyYW5zbGF0ZSIsIl96ZXJvRGVnIiwiX3plcm9QeCIsIl9lbmRQYXJlbnRoZXNpcyIsInRyYW5zZm9ybXMiLCJ1c2UzRCIsImExMSIsImEyMSIsInRhbiIsIl9hZGRSb3RhdGlvbmFsUHJvcFR3ZWVuIiwiY2FwIiwiZmluYWxWYWx1ZSIsIl9hc3NpZ24iLCJzb3VyY2UiLCJfYWRkUmF3VHJhbnNmb3JtUFRzIiwiZW5kQ2FjaGUiLCJzdGFydENhY2hlIiwicG9zaXRpb25BbmRTY2FsZSIsImFsbCIsIkNTU1BsdWdpbiIsInNwZWNpYWxQcm9wIiwicmVsYXRpdmUiLCJpc1RyYW5zZm9ybVJlbGF0ZWQiLCJ0cmFuc2Zvcm1Qcm9wVHdlZW4iLCJpbmxpbmVQcm9wcyIsInN0eWxlcyIsInZpc2liaWxpdHkiLCJwYXJzZVRyYW5zZm9ybSIsInNtb290aE9yaWdpbiIsImF1dG9Sb3VuZCIsImNoZWNrUHJlZml4IiwiZ2V0U3R5bGVTYXZlciIsImdzYXBXaXRoQ1NTIiwiX2RlZmluZVByb3BlcnRpZXMiLCJkZXNjcmlwdG9yIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJkZWZpbmVQcm9wZXJ0eSIsIl9kb2NFbCIsIl9ib2R5IiwiX2lzVG91Y2giLCJfcG9pbnRlclR5cGUiLCJfcm9vdCIsIl9ub3JtYWxpemVyIiwiX2V2ZW50VHlwZXMiLCJfZ2V0R1NBUCIsIl9zdGFydHVwIiwiX29ic2VydmVycyIsIl9zY3JvbGxlcnMiLCJfcHJveGllcyIsIl9icmlkZ2UiLCJfZ2V0UHJveHlQcm9wIiwiX2lzVmlld3BvcnQiLCJfYWRkTGlzdGVuZXIiLCJfcmVtb3ZlTGlzdGVuZXIiLCJfc2Nyb2xsTGVmdCIsIl9zY3JvbGxUb3AiLCJfb25TY3JvbGwiLCJpc1ByZXNzZWQiLCJfc2Nyb2xsQ2FjaGVGdW5jIiwiZG9Ob3RDYWNoZSIsImNhY2hpbmdGdW5jIiwic2Nyb2xsUmVzdG9yYXRpb24iLCJpc05vcm1hbGl6aW5nIiwiaU9TIiwiY2FjaGVJRCIsIl9ob3Jpem9udGFsIiwib3MyIiwiZDIiLCJzYyIsIl92ZXJ0aWNhbCIsInBhZ2VYT2Zmc2V0IiwicGFnZVlPZmZzZXQiLCJfZ2V0VGFyZ2V0IiwiX2dldFNjcm9sbEZ1bmMiLCJzY3JvbGxpbmdFbGVtZW50IiwiX2dldFZlbG9jaXR5UHJvcCIsIm1pblRpbWVSZWZyZXNoIiwidXNlRGVsdGEiLCJ2MSIsInYyIiwiZHJvcFRvWmVyb1RpbWUiLCJyZXNldCIsImdldFZlbG9jaXR5IiwibGF0ZXN0VmFsdWUiLCJ0T2xkIiwidk9sZCIsIl9nZXRFdmVudCIsIl9nc2FwQWxsb3ciLCJfZ2V0QWJzb2x1dGVNYXgiLCJfc2V0U2Nyb2xsVHJpZ2dlciIsInNjcm9sbGVycyIsInByb3hpZXMiLCJicmlkZ2UiLCJpc1RvdWNoIiwibWF4VG91Y2hQb2ludHMiLCJtc01heFRvdWNoUG9pbnRzIiwiZXZlbnRUeXBlcyIsIk9ic2VydmVyIiwiQ29uc3RydWN0b3IiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJ0b2xlcmFuY2UiLCJkcmFnTWluaW11bSIsImRlYm91bmNlIiwib25TdG9wIiwib25TdG9wRGVsYXkiLCJ3aGVlbFNwZWVkIiwib25EcmFnU3RhcnQiLCJvbkRyYWdFbmQiLCJvbkRyYWciLCJvblByZXNzIiwib25SZWxlYXNlIiwib25SaWdodCIsIm9uTGVmdCIsIm9uVXAiLCJvbkRvd24iLCJvbkNoYW5nZVgiLCJvbkNoYW5nZVkiLCJvbkNoYW5nZSIsIm9uVG9nZ2xlWCIsIm9uVG9nZ2xlWSIsIm9uSG92ZXIiLCJvbkhvdmVyRW5kIiwib25Nb3ZlIiwiaWdub3JlQ2hlY2siLCJpc05vcm1hbGl6ZXIiLCJvbkdlc3R1cmVTdGFydCIsIm9uR2VzdHVyZUVuZCIsIm9uV2hlZWwiLCJvbkVuYWJsZSIsIm9uRGlzYWJsZSIsInNjcm9sbFNwZWVkIiwiYWxsb3dDbGlja3MiLCJsb2NrQXhpcyIsIm9uTG9ja0F4aXMiLCJvblN0b3BEZWxheWVkQ2FsbCIsImRyYWdnZWQiLCJtb3ZlZCIsIndoZWVsZWQiLCJsb2NrZWQiLCJwcmV2RGVsdGFYIiwicHJldkRlbHRhWSIsInNjcm9sbEZ1bmNYIiwic2Nyb2xsRnVuY1kiLCJzY3JvbGxYIiwic2Nyb2xsWSIsImxpbWl0VG9Ub3VjaCIsImlzVmlld3BvcnQiLCJvd25lckRvYyIsIm93bmVyRG9jdW1lbnQiLCJkZWx0YVgiLCJkZWx0YVkiLCJvbkNsaWNrVGltZSIsImNsaWNrQ2FwdHVyZSIsIl9pZ25vcmVDaGVjayIsImlzUG9pbnRlck9yVG91Y2giLCJjaGFuZ2VkWCIsImNoYW5nZWRZIiwib25EZWx0YSIsIl92eCIsIl92eSIsIm9uVG91Y2hPclBvaW50ZXJEZWx0YSIsIl9vbkRyYWciLCJjbGllbnRYIiwiY2xpZW50WSIsImlzRHJhZ2dpbmciLCJfb25QcmVzcyIsIl9vblJlbGVhc2UiLCJpc1RyYWNraW5nRHJhZyIsIndhc0RyYWdnaW5nIiwiaXNEcmFnTm90Q2xpY2siLCJldmVudERhdGEiLCJkZWZhdWx0UHJldmVudGVkIiwiY2xpY2siLCJzeW50aGV0aWNFdmVudCIsImluaXRNb3VzZUV2ZW50Iiwic2NyZWVuWCIsInNjcmVlblkiLCJpc0dlc3R1cmluZyIsIl9vbkdlc3R1cmVTdGFydCIsIl9vbkdlc3R1cmVFbmQiLCJfb25XaGVlbCIsImRlbHRhTW9kZSIsIl9vbk1vdmUiLCJfb25Ib3ZlciIsIl9vbkhvdmVyRW5kIiwiX29uQ2xpY2siLCJfZGMiLCJnZXRBbGwiLCJfcmVzaXplRGVsYXkiLCJfdG9BcnJheSIsIl90aW1lMiIsIl9zeW5jSW50ZXJ2YWwiLCJfcmVmcmVzaGluZyIsIl9wb2ludGVySXNEb3duIiwiX3ByZXZXaWR0aCIsIl9wcmV2SGVpZ2h0IiwiX2F1dG9SZWZyZXNoIiwiX2lnbm9yZVJlc2l6ZSIsIl9pZ25vcmVNb2JpbGVSZXNpemUiLCJfYmFzZVNjcmVlbkhlaWdodCIsIl9iYXNlU2NyZWVuV2lkdGgiLCJfZml4SU9TQnVnIiwiX3Njcm9sbFJlc3RvcmF0aW9uIiwiX2RpdjEwMHZoIiwiXzEwMHZoIiwiX2lzUmV2ZXJ0ZWQiLCJfY2xhbXBpbmdNYXgiLCJfbGltaXRDYWxsYmFja3MiLCJfcmFmSUQiLCJfcmVmcmVzaGluZ0FsbCIsIl9xdWV1ZVJlZnJlc2hJRCIsIl9wcmltYXJ5IiwiX3RpbWUxIiwiX2xhc3RTY3JvbGxUaW1lIiwiX2VuYWJsZWQiLCJfcGFyc2VDbGFtcCIsIl9rZWVwQ2xhbXAiLCJfcmFmQnVnRml4IiwiX3BvaW50ZXJEb3duSGFuZGxlciIsIl9wb2ludGVyVXBIYW5kbGVyIiwiX2dldFZpZXdwb3J0RGltZW5zaW9uIiwiZGltZW5zaW9uUHJvcGVydHkiLCJfZ2V0Qm91bmRzRnVuYyIsIl93aW5PZmZzZXRzIiwiX2dldEJvdW5kcyIsIl9tYXhTY3JvbGwiLCJfaXRlcmF0ZUF1dG9SZWZyZXNoIiwiX2VuZEFuaW1hdGlvbiIsImNhbGxiYWNrQW5pbWF0aW9uIiwiX2FicyIsIl9sZWZ0IiwiX3JpZ2h0IiwiX2JvdHRvbSIsIl93aWR0aCIsIl9oZWlnaHQiLCJfUmlnaHQiLCJfTGVmdCIsIl9Ub3AiLCJfQm90dG9tIiwiX3BhZGRpbmciLCJfbWFyZ2luIiwiX1dpZHRoIiwiX0hlaWdodCIsIl9weCIsIl9nZXRDb21wdXRlZFN0eWxlIiwid2l0aG91dFRyYW5zZm9ybXMiLCJfZ2V0U2l6ZSIsIl9nZXRMYWJlbFJhdGlvQXJyYXkiLCJfc25hcERpcmVjdGlvbmFsIiwic25hcEluY3JlbWVudE9yQXJyYXkiLCJzbmFwcGVkIiwiX211bHRpTGlzdGVuZXIiLCJ0eXBlcyIsIm5vblBhc3NpdmUiLCJfd2hlZWxMaXN0ZW5lciIsInNjcm9sbEZ1bmMiLCJ3aGVlbEhhbmRsZXIiLCJfbWFya2VyRGVmYXVsdHMiLCJzdGFydENvbG9yIiwiZW5kQ29sb3IiLCJpbmRlbnQiLCJmb250U2l6ZSIsImZvbnRXZWlnaHQiLCJ0b2dnbGVBY3Rpb25zIiwiYW50aWNpcGF0ZVBpbiIsIl9rZXl3b3JkcyIsIl9vZmZzZXRUb1B4IiwiZXFJbmRleCIsIl9jcmVhdGVNYXJrZXIiLCJjb250YWluZXIiLCJfcmVmNCIsIm1hdGNoV2lkdGhFbCIsImNvbnRhaW5lckFuaW1hdGlvbiIsInVzZUZpeGVkUG9zaXRpb24iLCJpc1Njcm9sbGVyIiwiY3NzIiwiX2lzU3RhcnQiLCJpbm5lclRleHQiLCJfb2Zmc2V0IiwiX3Bvc2l0aW9uTWFya2VyIiwibWFya2VyIiwiZmxpcHBlZCIsIm9wcG9zaXRlU2lkZSIsIl9pc0ZsaXBwZWQiLCJfdHJpZ2dlcnMiLCJfaWRzIiwiX3N5bmMiLCJfdXBkYXRlQWxsIiwiX3NldEJhc2VEaW1lbnNpb25zIiwiX29uUmVzaXplIiwiZnVsbHNjcmVlbkVsZW1lbnQiLCJ3ZWJraXRGdWxsc2NyZWVuRWxlbWVudCIsIl9zb2Z0UmVmcmVzaCIsIl9yZWZyZXNoQWxsIiwiX3NhdmVkU3R5bGVzIiwiX3JldmVydFJlY29yZGVkIiwibWVkaWEiLCJxdWVyeSIsIl9yZXZlcnRBbGwiLCJfY2xlYXJTY3JvbGxNZW1vcnkiLCJyZWMiLCJfcmVmcmVzaElEIiwiX3JlZnJlc2gxMDB2aCIsIl9oaWRlQWxsTWFya2VycyIsImhpZGUiLCJza2lwUmV2ZXJ0IiwiaXNSZWZyZXNoaW5nIiwicmVmcmVzaEluaXRzIiwic2Nyb2xsQmVoYXZpb3IiLCJyZWZyZXNoIiwiX3N1YlBpbk9mZnNldCIsInBpbiIsIm9yaWdpbmFsIiwiYWRqdXN0UGluU3BhY2luZyIsInNjcm9sbGVyIiwiX2RpciIsImVuZENsYW1wIiwiX2VuZENsYW1wIiwic3RhcnRDbGFtcCIsIl9zdGFydENsYW1wIiwic2V0UG9zaXRpb25zIiwib25SZWZyZXNoIiwiX2xhc3RTY3JvbGwiLCJfZGlyZWN0aW9uIiwiaXNVcGRhdGluZyIsInJlY29yZFZlbG9jaXR5Iiwic2Nyb2xsIiwiX3Byb3BOYW1lc1RvQ29weSIsIl9zdGF0ZVByb3BzIiwiY29uY2F0IiwiX3N3YXBQaW5JbiIsInNwYWNlciIsInNwYWNlclN0YXRlIiwic3dhcHBlZEluIiwic3BhY2VyU3R5bGUiLCJwaW5TdHlsZSIsImZsZXhCYXNpcyIsIl9zZXRTdGF0ZSIsInN0YXRlIiwiX2dldFN0YXRlIiwic2Nyb2xsZXJTaXplIiwibWFya2VyU2Nyb2xsZXIiLCJzY3JvbGxlckJvdW5kcyIsImJvcmRlcldpZHRoIiwic2Nyb2xsZXJNYXgiLCJjbGFtcFplcm9Qcm9wIiwibG9jYWxPZmZzZXQiLCJnbG9iYWxPZmZzZXQiLCJvZmZzZXRzIiwiX2NhU2Nyb2xsRGlzdCIsIl9wcmVmaXhFeHAiLCJfcmVwYXJlbnQiLCJfc3RPcmlnIiwiX2ludGVycnVwdGlvblRyYWNrZXIiLCJnZXRWYWx1ZUZ1bmMiLCJpbml0aWFsVmFsdWUiLCJvbkludGVycnVwdCIsImxhc3QxIiwibGFzdDIiLCJfc2hpZnRNYXJrZXIiLCJfZ2V0VHdlZW5DcmVhdG9yIiwiZ2V0U2Nyb2xsIiwiZ2V0VHdlZW4iLCJjaGFuZ2UxIiwiY2hhbmdlMiIsImNoZWNrRm9ySW50ZXJydXB0aW9uIiwicGluQ2FjaGUiLCJzbmFwRnVuYyIsInNjcm9sbDEiLCJzY3JvbGwyIiwibWFya2VyU3RhcnQiLCJtYXJrZXJFbmQiLCJtYXJrZXJTdGFydFRyaWdnZXIiLCJtYXJrZXJFbmRUcmlnZ2VyIiwibWFya2VyVmFycyIsImV4ZWN1dGluZ09uUmVmcmVzaCIsInBpbk9yaWdpbmFsU3RhdGUiLCJwaW5BY3RpdmVTdGF0ZSIsInBpblN0YXRlIiwicGluR2V0dGVyIiwicGluU2V0dGVyIiwicGluU3RhcnQiLCJwaW5DaGFuZ2UiLCJzcGFjaW5nU3RhcnQiLCJtYXJrZXJTdGFydFNldHRlciIsInBpbk1vdmVzIiwibWFya2VyRW5kU2V0dGVyIiwic25hcDEiLCJzbmFwMiIsInNjcnViVHdlZW4iLCJzY3J1YlNtb290aCIsInNuYXBEdXJDbGFtcCIsInNuYXBEZWxheWVkQ2FsbCIsInByZXZTY3JvbGwiLCJwcmV2QW5pbVByb2dyZXNzIiwiY2FNYXJrZXJTZXR0ZXIiLCJjdXN0b21SZXZlcnRSZXR1cm4iLCJ0b2dnbGVDbGFzcyIsIm9uVG9nZ2xlIiwic2NydWIiLCJwaW5TcGFjaW5nIiwiaW52YWxpZGF0ZU9uUmVmcmVzaCIsIm9uU2NydWJDb21wbGV0ZSIsIm9uU25hcENvbXBsZXRlIiwicGluUmVwYXJlbnQiLCJwaW5TcGFjZXIiLCJmYXN0U2Nyb2xsRW5kIiwicHJldmVudE92ZXJsYXBzIiwiaXNUb2dnbGUiLCJzY3JvbGxlckNhY2hlIiwicGluVHlwZSIsImNhbGxiYWNrcyIsIm9uRW50ZXIiLCJvbkxlYXZlIiwib25FbnRlckJhY2siLCJvbkxlYXZlQmFjayIsIm1hcmtlcnMiLCJvblJlZnJlc2hJbml0IiwiZ2V0U2Nyb2xsZXJTaXplIiwiX2dldFNpemVGdW5jIiwiZ2V0U2Nyb2xsZXJPZmZzZXRzIiwiX2dldE9mZnNldHNGdW5jIiwibGFzdFNuYXAiLCJsYXN0UmVmcmVzaCIsInByZXZQcm9ncmVzcyIsInJlZnJlc2hQcmlvcml0eSIsInR3ZWVuU2Nyb2xsIiwic2NydWJEdXJhdGlvbiIsIl9nZXRDbG9zZXN0TGFiZWwiLCJzdCIsImRpcmVjdGlvbmFsIiwicmVmcmVzaGVkUmVjZW50bHkiLCJlbmRTY3JvbGwiLCJuYXR1cmFsRW5kIiwiaW5lcnRpYSIsIl9zbmFwIiwiX29uSW50ZXJydXB0IiwiX29uQ29tcGxldGUiLCJzdFJldmVydCIsInNwYWNlcklzTmF0aXZlIiwiY29udGVudCIsIm9sZE9uVXBkYXRlIiwib2xkUGFyYW1zIiwib25VcGRhdGVQYXJhbXMiLCJwcmV2aW91cyIsInByZXZSZWZyZXNoaW5nIiwiX3N3YXBQaW5PdXQiLCJwaW5PZmZzZXQiLCJvdmVycmlkZSIsImN1clRyaWdnZXIiLCJjdXJQaW4iLCJvcHBvc2l0ZVNjcm9sbCIsInJldmVydGVkUGlucyIsImZvcmNlZE92ZXJmbG93IiwibWFya2VyU3RhcnRPZmZzZXQiLCJtYXJrZXJFbmRPZmZzZXQiLCJpc0ZpcnN0UmVmcmVzaCIsIm90aGVyUGluT2Zmc2V0IiwicGFyc2VkRW5kIiwicGFyc2VkRW5kVHJpZ2dlciIsImVuZFRyaWdnZXIiLCJwaW5uZWRDb250YWluZXIiLCJ0cmlnZ2VySW5kZXgiLCJfcGluUHVzaCIsIl9waW5PZmZzZXQiLCJvbWl0T2Zmc2V0cyIsIl9jb3B5U3RhdGUiLCJlbmRBbmltYXRpb24iLCJsYWJlbFRvU2Nyb2xsIiwiZ2V0VHJhaWxpbmciLCJmb3JjZUZha2UiLCJ0b2dnbGVTdGF0ZSIsImFjdGlvbiIsInN0YXRlQ2hhbmdlZCIsImlzQXRNYXgiLCJpc1Rha2luZ0FjdGlvbiIsImNsaXBwZWQiLCJuZXdTdGFydCIsIm5ld0VuZCIsImtlZXBDbGFtcCIsIl9jaGFuZ2UiLCJhbGxvd0FuaW1hdGlvbiIsIm9uS2lsbCIsInVwZGF0ZUZ1bmMiLCJfcXVldWVSZWZyZXNoQWxsIiwiY2xlYXJJbnRlcnZhbCIsIm1tIiwiYm9keVN0eWxlIiwiYm9yZGVyIiwiYm9yZGVyVG9wU3R5bGUiLCJBbmltYXRpb25Qcm90byIsInNldEludGVydmFsIiwidyIsImhpZGRlbiIsImxpbWl0Q2FsbGJhY2tzIiwibXMiLCJzeW5jSW50ZXJ2YWwiLCJpZ25vcmVNb2JpbGVSZXNpemUiLCJhdXRvUmVmcmVzaEV2ZW50cyIsInNjcm9sbGVyUHJveHkiLCJjbGVhck1hdGNoTWVkaWEiLCJpc0luVmlld3BvcnQiLCJwb3NpdGlvbkluVmlld3BvcnQiLCJyZWZlcmVuY2VQb2ludCIsImtpbGxBbGwiLCJhbGxvd0xpc3RlbmVycyIsImxpc3RlbmVycyIsInNhdmVTdHlsZXMiLCJzYWZlIiwiY2xlYXJTY3JvbGxNZW1vcnkiLCJtYXhTY3JvbGwiLCJnZXRTY3JvbGxGdW5jIiwic25hcERpcmVjdGlvbmFsIiwiYmF0Y2giLCJ2YXJzQ29weSIsImludGVydmFsIiwiYmF0Y2hNYXgiLCJwcm94eUNhbGxiYWNrIiwiZWxlbWVudHMiLCJ0cmlnZ2VycyIsIl9pbnB1dElzRm9jdXNlZCIsIl9jbGFtcFNjcm9sbEFuZEdldER1cmF0aW9uTXVsdGlwbGllciIsIl9hbGxvd05hdGl2ZVBhbm5pbmciLCJfb3ZlcmZsb3ciLCJfbmVzdGVkU2Nyb2xsIiwiX3JlZjUiLCJfaXNTY3JvbGxUIiwic2Nyb2xsSGVpZ2h0Iiwic2Nyb2xsV2lkdGgiLCJvdmVyZmxvd1kiLCJvdmVyZmxvd1giLCJfaXNTY3JvbGwiLCJfaW5wdXRPYnNlcnZlciIsImlucHV0cyIsIl9jYXB0dXJlSW5wdXRzIiwiX2lucHV0RXhwIiwiaXNJbnB1dCIsIl9nZXRTY3JvbGxOb3JtYWxpemVyIiwibWF4WSIsImxhc3RSZWZyZXNoSUQiLCJza2lwVG91Y2hNb3ZlIiwic3RhcnRTY3JvbGxYIiwic3RhcnRTY3JvbGxZIiwiX3ZhcnMyIiwibm9ybWFsaXplU2Nyb2xsWCIsIm1vbWVudHVtIiwiYWxsb3dOZXN0ZWRTY3JvbGwiLCJzbW9vdGhlciIsIlNjcm9sbFNtb290aGVyIiwic21vb3RoZXJJbnN0YW5jZSIsImluaXRpYWxTY2FsZSIsInZpc3VhbFZpZXdwb3J0Iiwib3V0ZXJXaWR0aCIsIndoZWVsUmVmcmVzaCIsInJlc29sdmVNb21lbnR1bUR1cmF0aW9uIiwiaW5wdXRPYnNlcnZlciIsInJlc3VtZVRvdWNoTW92ZSIsInNjcm9sbENsYW1wWCIsInNjcm9sbENsYW1wWSIsInVwZGF0ZUNsYW1wcyIsInJlbW92ZUNvbnRlbnRPZmZzZXQiLCJpZ25vcmVEcmFnIiwicHJldlNjYWxlIiwiY3VycmVudFNjcm9sbCIsInZlbG9jaXR5WCIsInZlbG9jaXR5WSIsInhBcnJheSIsInlBcnJheSIsInlDbGFtcGVkIiwibm9ybWFsaXplU2Nyb2xsIiwibm9ybWFsaXplciIsInNzIiwicmVmIiwic2V0VGh1bWJzQ2xhc3NlcyIsImlkeCIsInRodW1icyIsImFycmF5IiwiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJUeXBlRXJyb3IiLCJfZGVmaW5lUHJvcGVydHkiLCJvd25LZXlzIiwiZW51bWVyYWJsZU9ubHkiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJzeW1ib2xzIiwic3ltIiwiX29iamVjdFNwcmVhZDIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydGllcyIsIl9pbmhlcml0cyIsIl9zZXRQcm90b3R5cGVPZiIsIl9nZXRQcm90b3R5cGVPZiIsInNldFByb3RvdHlwZU9mIiwiZ2V0UHJvdG90eXBlT2YiLCJfY3JlYXRlU3VwZXIiLCJEZXJpdmVkIiwiaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJzaGFtIiwiUHJveHkiLCJfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiU3VwZXIiLCJOZXdUYXJnZXQiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsInJlY2VpdmVyIiwiaGFzT3duUHJvcGVydHkiLCJfc3VwZXJQcm9wQmFzZSIsIl9zbGljZWRUb0FycmF5IiwiYXJyIiwiX2FycmF5V2l0aEhvbGVzIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJfYXJyIiwiX24iLCJfZCIsIl9lIiwiZG9uZSIsIl9pdGVyYWJsZVRvQXJyYXlMaW1pdCIsIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIl9ub25JdGVyYWJsZVJlc3QiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJfYXJyYXlMaWtlVG9BcnJheSIsIl9hcnJheVdpdGhvdXRIb2xlcyIsIml0ZXIiLCJfaXRlcmFibGVUb0FycmF5IiwiX25vbkl0ZXJhYmxlU3ByZWFkIiwibWluTGVuIiwiYXJyMiIsImluaXRQb3NpdGlvbiIsImdlc3R1cmVEaXJlY3Rpb24iLCJyZWxvYWRPbkNvbnRleHRDaGFuZ2UiLCJsZXJwIiwic2Nyb2xsYmFyQ29udGFpbmVyIiwic2Nyb2xsYmFyQ2xhc3MiLCJzY3JvbGxpbmdDbGFzcyIsImRyYWdnaW5nQ2xhc3MiLCJzbW9vdGhDbGFzcyIsImluaXRDbGFzcyIsImdldFNwZWVkIiwiZ2V0RGlyZWN0aW9uIiwic2Nyb2xsRnJvbUFueXdoZXJlIiwiZmlyZWZveE11bHRpcGxpZXIiLCJ0b3VjaE11bHRpcGxpZXIiLCJyZXNldE5hdGl2ZVNjcm9sbCIsInRhYmxldCIsInNtYXJ0cGhvbmUiLCJfZGVmYXVsdCIsIm5hbWVzcGFjZSIsImh0bWwiLCJ3aW5kb3dIZWlnaHQiLCJ3aW5kb3dXaWR0aCIsIndpbmRvd01pZGRsZSIsImVscyIsImN1cnJlbnRFbGVtZW50cyIsImhhc1Njcm9sbFRpY2tpbmciLCJoYXNDYWxsRXZlbnRTZXQiLCJjaGVja1Njcm9sbCIsImNoZWNrUmVzaXplIiwiY2hlY2tFdmVudCIsImxpbWl0IiwiaXNNb2JpbGUiLCJpc1RhYmxldCIsImRpcmVjdGlvbkF4aXMiLCJpbml0RXZlbnRzIiwiZGlzcGF0Y2hTY3JvbGwiLCJyZXNpemVUaWNrIiwicmVzaXplIiwib2xkQ29udGV4dCIsInJlbG9hZCIsInNjcm9sbFRvRWxzIiwic2V0U2Nyb2xsVG8iLCJjdXJyZW50VGFyZ2V0Iiwic2Nyb2xsQm90dG9tIiwic2Nyb2xsUmlnaHQiLCJpblZpZXciLCJzZXRJblZpZXciLCJzZXRPdXRPZlZpZXciLCJkaXNwYXRjaENhbGwiLCJ3YXkiLCJjYWxsV2F5IiwiY2FsbFZhbHVlIiwiY2FsbE9iaiIsImNhbGxFdmVudCIsIkV2ZW50Iiwic2Nyb2xsRXZlbnQiLCJsaXN0IiwiZGV0ZWN0RWxlbWVudHMiLCJfdGhpczUiLCJfdGhpczYiLCJjb21tb25qc0dsb2JhbCIsImNyZWF0ZUNvbW1vbmpzTW9kdWxlIiwiZm4iLCJleHBvcnRzIiwic21vb3Roc2Nyb2xsIiwicG9seWZpbGwiLCJfX2ZvcmNlU21vb3RoU2Nyb2xsUG9seWZpbGxfXyIsIkVsZW1lbnQiLCJTQ1JPTExfVElNRSIsInNjcm9sbEJ5IiwiZWxlbWVudFNjcm9sbCIsInNjcm9sbEVsZW1lbnQiLCJzY3JvbGxJbnRvVmlldyIsInBlcmZvcm1hbmNlIiwiUk9VTkRJTkdfVE9MRVJBTkNFIiwic2hvdWxkQmFpbE91dCIsIlN5bnRheEVycm9yIiwic2Nyb2xsYWJsZVBhcmVudCIsImlzU2Nyb2xsYWJsZSIsImZpbmRTY3JvbGxhYmxlUGFyZW50IiwicGFyZW50UmVjdHMiLCJjbGllbnRSZWN0cyIsImZpcnN0QXJnIiwiaGFzU2Nyb2xsYWJsZVNwYWNlIiwiY2FuT3ZlcmZsb3ciLCJvdmVyZmxvd1ZhbHVlIiwiaXNTY3JvbGxhYmxlWSIsImlzU2Nyb2xsYWJsZVgiLCJrIiwic2Nyb2xsYWJsZSIsIl9kZWZhdWx0JDEiLCJfQ29yZSIsIl9zdXBlciIsInNtb290aHNjcm9sbFBvbHlmaWxsIiwiYWRkRWxlbWVudHMiLCJhZGREaXJlY3Rpb24iLCJhZGRTcGVlZCIsInNwZWVkVHMiLCJ1cGRhdGVFbGVtZW50cyIsImNsIiwiZGF0YXNldCIsInRhcmdldEVsQkNSIiwicmVsYXRpdmVPZmZzZXQiLCJnZXRSZWxhdGl2ZU9mZnNldCIsIm1hcHBlZEVsIiwiaXNUYXJnZXRSZWFjaGVkIiwicHJvcElzRW51bWVyYWJsZSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwib2JqZWN0QXNzaWduIiwidGVzdDEiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwidGVzdDIiLCJmcm9tQ2hhckNvZGUiLCJvcmRlcjIiLCJ0ZXN0MyIsImxldHRlciIsInNob3VsZFVzZU5hdGl2ZSIsInRvT2JqZWN0IiwiRSIsImN0eCIsImxpc3RlbmVyIiwiZXZ0QXJyIiwiZXZ0cyIsImxpdmVFdmVudHMiLCJ0aW55RW1pdHRlciIsImxldGhhcmd5IiwiTGV0aGFyZ3kiLCJzdGFiaWxpdHkiLCJzZW5zaXRpdml0eSIsImxhc3RVcERlbHRhcyIsInJlc3VsdHMiLCJsYXN0RG93bkRlbHRhcyIsImRlbHRhc1RpbWVzdGFtcCIsImNoZWNrIiwibGFzdERlbHRhIiwid2hlZWxEZWx0YSIsImlzSW5lcnRpYSIsImxhc3REZWx0YXMiLCJsYXN0RGVsdGFzTmV3IiwibGFzdERlbHRhc09sZCIsIm5ld0F2ZXJhZ2UiLCJuZXdTdW0iLCJvbGRBdmVyYWdlIiwib2xkU3VtIiwic2hvd0xhc3RVcERlbHRhcyIsInNob3dMYXN0RG93bkRlbHRhcyIsImhhc1doZWVsRXZlbnQiLCJoYXNNb3VzZVdoZWVsRXZlbnQiLCJoYXNUb3VjaCIsIlRvdWNoRXZlbnQiLCJoYXNUb3VjaFdpbiIsImhhc1BvaW50ZXIiLCJtc1BvaW50ZXJFbmFibGVkIiwiaGFzS2V5RG93biIsImlzRmlyZWZveCIsImhhc093blByb3BlcnR5JDEiLCJFVlRfSUQiLCJWaXJ0dWFsU2Nyb2xsIiwia2V5Q29kZXMiLCJiaW5kYWxsU3RhbmRhbG9uZSIsIm1vdXNlTXVsdGlwbGllciIsImtleVN0ZXAiLCJwcmV2ZW50VG91Y2giLCJ1bnByZXZlbnRUb3VjaENsYXNzIiwibGltaXRJbmVydGlhIiwidXNlS2V5Ym9hcmQiLCJ1c2VUb3VjaCIsIl9sZXRoYXJneSIsIl9lbWl0dGVyIiwiX2V2ZW50IiwidG91Y2hTdGFydFgiLCJ0b3VjaFN0YXJ0WSIsImJvZHlUb3VjaEFjdGlvbiIsImxpc3RlbmVyT3B0aW9ucyIsImFtdCIsIm1velRyYW5zZm9ybSIsIm1hdCIsImdldFBhcmVudHMiLCJlbGVtIiwiX25vdGlmeSIsIndoZWVsRGVsdGFYIiwid2hlZWxEZWx0YVkiLCJfb25Nb3VzZVdoZWVsIiwiX29uVG91Y2hTdGFydCIsIl9vblRvdWNoTW92ZSIsIl9vbktleURvd24iLCJrZXlDb2RlIiwic2hpZnRLZXkiLCJfYmluZCIsIm1zVG91Y2hBY3Rpb24iLCJfdW5iaW5kIiwiY2IiLCJrU2FtcGxlU3RlcFNpemUiLCJmbG9hdDMyQXJyYXlTdXBwb3J0ZWQiLCJGbG9hdDMyQXJyYXkiLCJBIiwiYUExIiwiYUEyIiwiQiIsIkMiLCJjYWxjQmV6aWVyIiwiYVQiLCJnZXRTbG9wZSIsIkxpbmVhckVhc2luZyIsInNyYyQxIiwibVgxIiwibVkxIiwibVgyIiwibVkyIiwiRXJyb3IiLCJzYW1wbGVWYWx1ZXMiLCJnZXRURm9yWCIsImFYIiwiaW50ZXJ2YWxTdGFydCIsImN1cnJlbnRTYW1wbGUiLCJrU3BsaW5lVGFibGVTaXplIiwiZ3Vlc3NGb3JUIiwiaW5pdGlhbFNsb3BlIiwiYUd1ZXNzVCIsImN1cnJlbnRTbG9wZSIsIm5ld3RvblJhcGhzb25JdGVyYXRlIiwiYUEiLCJhQiIsImN1cnJlbnRUIiwiYmluYXJ5U3ViZGl2aWRlIiwia2V5Q29kZXMkMSIsIl9kZWZhdWx0JDIiLCJpc0RyYWdnaW5nU2Nyb2xsYmFyIiwiaXNUaWNraW5nIiwicGFyYWxsYXhFbGVtZW50cyIsInN0b3AiLCJjaGVja0tleSIsImRlbHRhIiwidnMiLCJ1cGRhdGVEZWx0YSIsInN0YXJ0U2Nyb2xsaW5nIiwic2V0U2Nyb2xsTGltaXQiLCJpbml0U2Nyb2xsQmFyIiwiYWRkU2VjdGlvbnMiLCJ0cmFuc2Zvcm1FbGVtZW50cyIsInRvdGFsV2lkdGgiLCJub2RlcyIsInN0YXJ0U2Nyb2xsVHMiLCJjaGVja1Njcm9sbFJhZiIsInNjcm9sbFRvUmFmIiwiaXNBY3RpdmVFbGVtZW50U2Nyb2xsU2Vuc2l0aXZlIiwic3RvcFNjcm9sbGluZyIsIkhUTUxJbnB1dEVsZW1lbnQiLCJIVE1MVGV4dEFyZWFFbGVtZW50IiwiSFRNTEJ1dHRvbkVsZW1lbnQiLCJIVE1MU2VsZWN0RWxlbWVudCIsImZvcmNlZCIsInVwZGF0ZVNjcm9sbCIsInRpbWVTaW5jZVN0YXJ0IiwiYW5pbWF0aW5nU2Nyb2xsIiwic2VjdGlvbnMiLCJzZWN0aW9uIiwicGVyc2lzdGVudCIsIm9wYWNpdHkiLCJwb2ludGVyRXZlbnRzIiwiaGFzU2Nyb2xsYmFyIiwic2Nyb2xsQmFyVHJhbnNsYXRpb24iLCJzY3JvbGxCYXJMaW1pdCIsInNjcm9sbGJhclRodW1iIiwiY2hlY2tDb250ZXh0Iiwic2V0U2Nyb2xsIiwic2Nyb2xsYmFyIiwiZ2V0U2Nyb2xsQmFyIiwicmVsZWFzZVNjcm9sbEJhciIsIm1vdmVTY3JvbGxCYXIiLCJzY3JvbGxiYXJCQ1IiLCJzY3JvbGxiYXJIZWlnaHQiLCJzY3JvbGxiYXJXaWR0aCIsInNjcm9sbGJhclRodW1iQkNSIiwidGFyZ2V0UGFyZW50cyIsInN0aWNreSIsIm1pZGRsZSIsImVsQkNSIiwiZWxUb3AiLCJlbExlZnQiLCJlbERpc3RhbmNlIiwiX3RoaXM3Iiwic2VjdGlvbkJDUiIsIm1hcHBlZFNlY3Rpb24iLCJsZXJwWCIsImxlcnBZIiwiaXNGb3JjZWQiLCJfdGhpczgiLCJzZXRBbGxFbGVtZW50cyIsInNjcm9sbE1pZGRsZSIsIl9yZWY2IiwidHJhbnNmb3JtRGlzdGFuY2UiLCJfdGhpczkiLCJlYXNpbmciLCJkaXNhYmxlTGVycCIsInRhcmdldEJDUiIsInBhcmVudFNlY3Rpb24iLCJjYW5kaWRhdGUiLCJfcmVmNyIsIl9yZWY4IiwicGFyZW50U2VjdGlvbk9mZnNldCIsInNjcm9sbFN0YXJ0Iiwic2Nyb2xsRGlmZiIsInJlaW5pdFNjcm9sbEJhciIsImRlc3Ryb3lTY3JvbGxCYXIiLCJTbW9vdGgiLCJzdGFydFNjcm9sbCIsInN0b3BTY3JvbGwiLCJzZXRFdmVudHMiLCJ1bnNldEV2ZW50cyIsImxvY29TY3JvbGwiLCJMb2NvbW90aXZlU2Nyb2xsIiwibW9iaWxlIiwidG9nZ2xlU2Nyb2xsIiwidG91Y2hTdGFydCIsInRvdWNoRW5kIiwibWQiLCJzZXRMb2NvU2Nyb2xsQXR0ciIsImNhcm91c2VsIiwidGh1bWIiLCJzbGlkZUNoYW5nZSJdLCJzb3VyY2VSb290IjoiIn0=