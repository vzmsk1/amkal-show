/*! For license information please see 92.app.js.LICENSE.txt */
"use strict";(self.webpackChunkwebpack_setup=self.webpackChunkwebpack_setup||[]).push([[92],{92:(t,e,i)=>{i.r(e);var s=function(){return s=Object.assign||function(t){for(var e,i=1,s=arguments.length;i<s;i++)for(var n in e=arguments[i])Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t},s.apply(this,arguments)};var n="lgAfterAppendSlide",o="lgInit",r="lgHasVideo",l="lgContainerResize",a="lgUpdateSlides",d="lgAfterAppendSubHtml",g="lgBeforeOpen",h="lgAfterOpen",c="lgSlideItemLoad",u="lgBeforeSlide",m="lgAfterSlide",p="lgPosterClick",f="lgDragStart",y="lgDragMove",v="lgDragEnd",b="lgBeforeNextSlide",C="lgBeforePrevSlide",I="lgBeforeClose",S="lgAfterClose",w={mode:"lg-slide",easing:"ease",speed:400,licenseKey:"0000-0000-000-0000",height:"100%",width:"100%",addClass:"",startClass:"lg-start-zoom",backdropDuration:300,container:"",startAnimationDuration:400,zoomFromOrigin:!0,hideBarsDelay:0,showBarsAfter:1e4,slideDelay:0,supportLegacyBrowser:!0,allowMediaOverlap:!1,videoMaxSize:"1280-720",loadYouTubePoster:!0,defaultCaptionHeight:0,ariaLabelledby:"",ariaDescribedby:"",resetScrollPosition:!0,hideScrollbar:!1,closable:!0,swipeToClose:!0,closeOnTap:!0,showCloseIcon:!0,showMaximizeIcon:!1,loop:!0,escKey:!0,keyPress:!0,trapFocus:!0,controls:!0,slideEndAnimation:!0,hideControlOnEnd:!1,mousewheel:!1,getCaptionFromTitleOrAlt:!0,appendSubHtmlTo:".lg-sub-html",subHtmlSelectorRelative:!1,preload:2,numberOfSlideItemsInDom:10,selector:"",selectWithin:"",nextHtml:"",prevHtml:"",index:0,iframeWidth:"100%",iframeHeight:"100%",iframeMaxWidth:"100%",iframeMaxHeight:"100%",download:!0,counter:!0,appendCounterTo:".lg-toolbar",swipeThreshold:50,enableSwipe:!0,enableDrag:!0,dynamic:!1,dynamicEl:[],extraProps:[],exThumbImage:"",isMobile:void 0,mobileSettings:{controls:!1,showCloseIcon:!1,download:!1},plugins:[],strings:{closeGallery:"Close gallery",toggleMaximize:"Toggle maximize",previousSlide:"Previous slide",nextSlide:"Next slide",download:"Download",playVideo:"Play video",mediaLoadingFailed:"Oops... Failed to load content..."}};var x=function(){function t(t){return this.cssVenderPrefixes=["TransitionDuration","TransitionTimingFunction","Transform","Transition"],this.selector=this._getSelector(t),this.firstElement=this._getFirstEl(),this}return t.generateUUID=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(t){var e=16*Math.random()|0;return("x"==t?e:3&e|8).toString(16)}))},t.prototype._getSelector=function(t,e){return void 0===e&&(e=document),"string"!=typeof t?t:(e=e||document,"#"===t.substring(0,1)?e.querySelector(t):e.querySelectorAll(t))},t.prototype._each=function(t){return this.selector?(void 0!==this.selector.length?[].forEach.call(this.selector,t):t(this.selector,0),this):this},t.prototype._setCssVendorPrefix=function(t,e,i){var s=e.replace(/-([a-z])/gi,(function(t,e){return e.toUpperCase()}));-1!==this.cssVenderPrefixes.indexOf(s)?(t.style[s.charAt(0).toLowerCase()+s.slice(1)]=i,t.style["webkit"+s]=i,t.style["moz"+s]=i,t.style["ms"+s]=i,t.style["o"+s]=i):t.style[s]=i},t.prototype._getFirstEl=function(){return this.selector&&void 0!==this.selector.length?this.selector[0]:this.selector},t.prototype.isEventMatched=function(t,e){var i=e.split(".");return t.split(".").filter((function(t){return t})).every((function(t){return-1!==i.indexOf(t)}))},t.prototype.attr=function(t,e){return void 0===e?this.firstElement?this.firstElement.getAttribute(t):"":(this._each((function(i){i.setAttribute(t,e)})),this)},t.prototype.find=function(t){return T(this._getSelector(t,this.selector))},t.prototype.first=function(){return this.selector&&void 0!==this.selector.length?T(this.selector[0]):T(this.selector)},t.prototype.eq=function(t){return T(this.selector[t])},t.prototype.parent=function(){return T(this.selector.parentElement)},t.prototype.get=function(){return this._getFirstEl()},t.prototype.removeAttr=function(t){var e=t.split(" ");return this._each((function(t){e.forEach((function(e){return t.removeAttribute(e)}))})),this},t.prototype.wrap=function(t){if(!this.firstElement)return this;var e=document.createElement("div");return e.className=t,this.firstElement.parentNode.insertBefore(e,this.firstElement),this.firstElement.parentNode.removeChild(this.firstElement),e.appendChild(this.firstElement),this},t.prototype.addClass=function(t){return void 0===t&&(t=""),this._each((function(e){t.split(" ").forEach((function(t){t&&e.classList.add(t)}))})),this},t.prototype.removeClass=function(t){return this._each((function(e){t.split(" ").forEach((function(t){t&&e.classList.remove(t)}))})),this},t.prototype.hasClass=function(t){return!!this.firstElement&&this.firstElement.classList.contains(t)},t.prototype.hasAttribute=function(t){return!!this.firstElement&&this.firstElement.hasAttribute(t)},t.prototype.toggleClass=function(t){return this.firstElement?(this.hasClass(t)?this.removeClass(t):this.addClass(t),this):this},t.prototype.css=function(t,e){var i=this;return this._each((function(s){i._setCssVendorPrefix(s,t,e)})),this},t.prototype.on=function(e,i){var s=this;return this.selector?(e.split(" ").forEach((function(e){Array.isArray(t.eventListeners[e])||(t.eventListeners[e]=[]),t.eventListeners[e].push(i),s.selector.addEventListener(e.split(".")[0],i)})),this):this},t.prototype.once=function(t,e){var i=this;return this.on(t,(function(){i.off(t),e(t)})),this},t.prototype.off=function(e){var i=this;return this.selector?(Object.keys(t.eventListeners).forEach((function(s){i.isEventMatched(e,s)&&(t.eventListeners[s].forEach((function(t){i.selector.removeEventListener(s.split(".")[0],t)})),t.eventListeners[s]=[])})),this):this},t.prototype.trigger=function(t,e){if(!this.firstElement)return this;var i=new CustomEvent(t.split(".")[0],{detail:e||null});return this.firstElement.dispatchEvent(i),this},t.prototype.load=function(t){var e=this;return fetch(t).then((function(t){return t.text()})).then((function(t){e.selector.innerHTML=t})),this},t.prototype.html=function(t){return void 0===t?this.firstElement?this.firstElement.innerHTML:"":(this._each((function(e){e.innerHTML=t})),this)},t.prototype.append=function(t){return this._each((function(e){"string"==typeof t?e.insertAdjacentHTML("beforeend",t):e.appendChild(t)})),this},t.prototype.prepend=function(t){return this._each((function(e){e.insertAdjacentHTML("afterbegin",t)})),this},t.prototype.remove=function(){return this._each((function(t){t.parentNode.removeChild(t)})),this},t.prototype.empty=function(){return this._each((function(t){t.innerHTML=""})),this},t.prototype.scrollTop=function(t){return void 0!==t?(document.body.scrollTop=t,document.documentElement.scrollTop=t,this):window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0},t.prototype.scrollLeft=function(t){return void 0!==t?(document.body.scrollLeft=t,document.documentElement.scrollLeft=t,this):window.pageXOffset||document.documentElement.scrollLeft||document.body.scrollLeft||0},t.prototype.offset=function(){if(!this.firstElement)return{left:0,top:0};var t=this.firstElement.getBoundingClientRect(),e=T("body").style().marginLeft;return{left:t.left-parseFloat(e)+this.scrollLeft(),top:t.top+this.scrollTop()}},t.prototype.style=function(){return this.firstElement?this.firstElement.currentStyle||window.getComputedStyle(this.firstElement):{}},t.prototype.width=function(){var t=this.style();return this.firstElement.clientWidth-parseFloat(t.paddingLeft)-parseFloat(t.paddingRight)},t.prototype.height=function(){var t=this.style();return this.firstElement.clientHeight-parseFloat(t.paddingTop)-parseFloat(t.paddingBottom)},t.eventListeners={},t}();function T(t){return function(){if("function"==typeof window.CustomEvent)return!1;window.CustomEvent=function(t,e){e=e||{bubbles:!1,cancelable:!1,detail:null};var i=document.createEvent("CustomEvent");return i.initCustomEvent(t,e.bubbles,e.cancelable,e.detail),i}}(),Element.prototype.matches||(Element.prototype.matches=Element.prototype.msMatchesSelector||Element.prototype.webkitMatchesSelector),new x(t)}var E=["src","sources","subHtml","subHtmlUrl","html","video","poster","slideName","responsive","srcset","sizes","iframe","downloadUrl","download","width","facebookShareUrl","tweetText","iframeTitle","twitterShareUrl","pinterestShareUrl","pinterestText","fbHtml","disqusIdentifier","disqusUrl"];function O(t){return"href"===t?"src":t=(t=(t=t.replace("data-","")).charAt(0).toLowerCase()+t.slice(1)).replace(/-([a-z])/g,(function(t){return t[1].toUpperCase()}))}var L=function(t,e,i,s){void 0===i&&(i=0);var n=T(t).attr("data-lg-size")||s;if(n){var o=n.split(",");if(o[1])for(var r=window.innerWidth,l=0;l<o.length;l++){var a=o[l];if(parseInt(a.split("-")[2],10)>r){n=a;break}l===o.length-1&&(n=a)}var d=n.split("-"),g=parseInt(d[0],10),h=parseInt(d[1],10),c=e.width(),u=e.height()-i,m=Math.min(c,g),p=Math.min(u,h),f=Math.min(m/g,p/h);return{width:g*f,height:h*f}}},D=function(t,e,i,s,n){if(n){var o=T(t).find("img").first();if(o.get()){var r=e.get().getBoundingClientRect(),l=r.width,a=e.height()-(i+s),d=o.width(),g=o.height(),h=o.style(),c=(l-d)/2-o.offset().left+(parseFloat(h.paddingLeft)||0)+(parseFloat(h.borderLeft)||0)+T(window).scrollLeft()+r.left,u=(a-g)/2-o.offset().top+(parseFloat(h.paddingTop)||0)+(parseFloat(h.borderTop)||0)+T(window).scrollTop()+i;return"translate3d("+(c*=-1)+"px, "+(u*=-1)+"px, 0) scale3d("+d/n.width+", "+g/n.height+", 1)"}}},z=function(t,e,i,s,n,o){return'<div class="lg-video-cont lg-has-iframe" style="width:'+t+"; max-width:"+i+"; height: "+e+"; max-height:"+s+'">\n                    <iframe class="lg-object" frameborder="0" '+(o?'title="'+o+'"':"")+' src="'+n+'"  allowfullscreen="true"></iframe>\n                </div>'},M=function(t,e,i,s,n,o){var r="<img "+i+" "+(s?'srcset="'+s+'"':"")+"  "+(n?'sizes="'+n+'"':"")+' class="lg-object lg-image" data-index="'+t+'" src="'+e+'" />',l="";o&&(l=("string"==typeof o?JSON.parse(o):o).map((function(t){var e="";return Object.keys(t).forEach((function(i){e+=" "+i+'="'+t[i]+'"'})),"<source "+e+"></source>"})));return""+l+r},k=function(t){for(var e=[],i=[],s="",n=0;n<t.length;n++){var o=t[n].split(" ");""===o[0]&&o.splice(0,1),i.push(o[0]),e.push(o[1])}for(var r=window.innerWidth,l=0;l<e.length;l++)if(parseInt(e[l],10)>r){s=i[l];break}return s},G=function(t){return!!t&&(!!t.complete&&0!==t.naturalWidth)},A=function(t,e,i,s,n){return'<div class="lg-video-cont '+(n&&n.youtube?"lg-has-youtube":n&&n.vimeo?"lg-has-vimeo":"lg-has-html5")+'" style="'+i+'">\n                <div class="lg-video-play-button">\n                <svg\n                    viewBox="0 0 20 20"\n                    preserveAspectRatio="xMidYMid"\n                    focusable="false"\n                    aria-labelledby="'+s+'"\n                    role="img"\n                    class="lg-video-play-icon"\n                >\n                    <title>'+s+'</title>\n                    <polygon class="lg-video-play-icon-inner" points="1,0 20,10 1,20"></polygon>\n                </svg>\n                <svg class="lg-video-play-icon-bg" viewBox="0 0 50 50" focusable="false">\n                    <circle cx="50%" cy="50%" r="20"></circle></svg>\n                <svg class="lg-video-play-icon-circle" viewBox="0 0 50 50" focusable="false">\n                    <circle cx="50%" cy="50%" r="20"></circle>\n                </svg>\n            </div>\n            '+(e||"")+'\n            <img class="lg-object lg-video-poster" src="'+t+'" />\n        </div>'},B=function(t){var e=t.querySelectorAll('a[href]:not([disabled]), button:not([disabled]), textarea:not([disabled]), input[type="text"]:not([disabled]), input[type="radio"]:not([disabled]), input[type="checkbox"]:not([disabled]), select:not([disabled])');return[].filter.call(e,(function(t){var e=window.getComputedStyle(t);return"none"!==e.display&&"hidden"!==e.visibility}))},P=function(t,e,i,s){var n=[],o=function(){for(var t=0,e=0,i=arguments.length;e<i;e++)t+=arguments[e].length;var s=Array(t),n=0;for(e=0;e<i;e++)for(var o=arguments[e],r=0,l=o.length;r<l;r++,n++)s[n]=o[r];return s}(E,e);return[].forEach.call(t,(function(t){for(var e={},r=0;r<t.attributes.length;r++){var l=t.attributes[r];if(l.specified){var a=O(l.name),d="";o.indexOf(a)>-1&&(d=a),d&&(e[d]=l.value)}}var g=T(t),h=g.find("img").first().attr("alt"),c=g.attr("title"),u=s?g.attr(s):g.find("img").first().attr("src");e.thumb=u,i&&!e.subHtml&&(e.subHtml=c||h||""),e.alt=h||c||"",n.push(e)})),n},_=function(){return/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)},F=function(t,e,i){if(!t)return e?{html5:!0}:void console.error("lightGallery :- data-src is not provided on slide item "+(i+1)+". Please make sure the selector property is properly configured. More info - https://www.lightgalleryjs.com/demos/html-markup/");var s=t.match(/\/\/(?:www\.)?youtu(?:\.be|be\.com|be-nocookie\.com)\/(?:watch\?v=|embed\/)?([a-z0-9\-\_\%]+)([\&|?][\S]*)*/i),n=t.match(/\/\/(?:www\.)?(?:player\.)?vimeo.com\/(?:video\/)?([0-9a-z\-_]+)(.*)?/i),o=t.match(/https?:\/\/(.+)?(wistia\.com|wi\.st)\/(medias|embed)\/([0-9a-z\-_]+)(.*)/);return s?{youtube:s}:n?{vimeo:n}:o?{wistia:o}:void 0},H=0,$=function(){function t(t,e){if(this.lgOpened=!1,this.index=0,this.plugins=[],this.lGalleryOn=!1,this.lgBusy=!1,this.currentItemsInDom=[],this.prevScrollTop=0,this.bodyPaddingRight=0,this.isDummyImageRemoved=!1,this.dragOrSwipeEnabled=!1,this.mediaContainerPosition={top:0,bottom:0},!t)return this;if(H++,this.lgId=H,this.el=t,this.LGel=T(t),this.generateSettings(e),this.buildModules(),this.settings.dynamic&&void 0!==this.settings.dynamicEl&&!Array.isArray(this.settings.dynamicEl))throw"When using dynamic mode, you must also define dynamicEl as an Array.";return this.galleryItems=this.getItems(),this.normalizeSettings(),this.init(),this.validateLicense(),this}return t.prototype.generateSettings=function(t){if(this.settings=s(s({},w),t),this.settings.isMobile&&"function"==typeof this.settings.isMobile?this.settings.isMobile():_()){var e=s(s({},this.settings.mobileSettings),this.settings.mobileSettings);this.settings=s(s({},this.settings),e)}},t.prototype.normalizeSettings=function(){this.settings.slideEndAnimation&&(this.settings.hideControlOnEnd=!1),this.settings.closable||(this.settings.swipeToClose=!1),this.zoomFromOrigin=this.settings.zoomFromOrigin,this.settings.dynamic&&(this.zoomFromOrigin=!1),this.settings.container||(this.settings.container=document.body),this.settings.preload=Math.min(this.settings.preload,this.galleryItems.length)},t.prototype.init=function(){var t=this;this.addSlideVideoInfo(this.galleryItems),this.buildStructure(),this.LGel.trigger(o,{instance:this}),this.settings.keyPress&&this.keyPress(),setTimeout((function(){t.enableDrag(),t.enableSwipe(),t.triggerPosterClick()}),50),this.arrow(),this.settings.mousewheel&&this.mousewheel(),this.settings.dynamic||this.openGalleryOnItemClick()},t.prototype.openGalleryOnItemClick=function(){for(var t=this,e=function(e){var s=i.items[e],n=T(s),o=x.generateUUID();n.attr("data-lg-id",o).on("click.lgcustom-item-"+o,(function(i){i.preventDefault();var n=t.settings.index||e;t.openGallery(n,s)}))},i=this,s=0;s<this.items.length;s++)e(s)},t.prototype.buildModules=function(){var t=this;this.settings.plugins.forEach((function(e){t.plugins.push(new e(t,T))}))},t.prototype.validateLicense=function(){this.settings.licenseKey?"0000-0000-000-0000"===this.settings.licenseKey&&console.warn("lightGallery: "+this.settings.licenseKey+" license key is not valid for production use"):console.error("Please provide a valid license key")},t.prototype.getSlideItem=function(t){return T(this.getSlideItemId(t))},t.prototype.getSlideItemId=function(t){return"#lg-item-"+this.lgId+"-"+t},t.prototype.getIdName=function(t){return t+"-"+this.lgId},t.prototype.getElementById=function(t){return T("#"+this.getIdName(t))},t.prototype.manageSingleSlideClassName=function(){this.galleryItems.length<2?this.outer.addClass("lg-single-item"):this.outer.removeClass("lg-single-item")},t.prototype.buildStructure=function(){var t=this;if(!(this.$container&&this.$container.get())){var e="",i="";this.settings.controls&&(e='<button type="button" id="'+this.getIdName("lg-prev")+'" aria-label="'+this.settings.strings.previousSlide+'" class="lg-prev lg-icon"> '+this.settings.prevHtml+' </button>\n                <button type="button" id="'+this.getIdName("lg-next")+'" aria-label="'+this.settings.strings.nextSlide+'" class="lg-next lg-icon"> '+this.settings.nextHtml+" </button>"),".lg-item"!==this.settings.appendSubHtmlTo&&(i='<div class="lg-sub-html" role="status" aria-live="polite"></div>');var s="";this.settings.allowMediaOverlap&&(s+="lg-media-overlap ");var n=this.settings.ariaLabelledby?'aria-labelledby="'+this.settings.ariaLabelledby+'"':"",o=this.settings.ariaDescribedby?'aria-describedby="'+this.settings.ariaDescribedby+'"':"",r="lg-container "+this.settings.addClass+" "+(document.body!==this.settings.container?"lg-inline":""),l=this.settings.closable&&this.settings.showCloseIcon?'<button type="button" aria-label="'+this.settings.strings.closeGallery+'" id="'+this.getIdName("lg-close")+'" class="lg-close lg-icon"></button>':"",a=this.settings.showMaximizeIcon?'<button type="button" aria-label="'+this.settings.strings.toggleMaximize+'" id="'+this.getIdName("lg-maximize")+'" class="lg-maximize lg-icon"></button>':"",d='\n        <div class="'+r+'" id="'+this.getIdName("lg-container")+'" tabindex="-1" aria-modal="true" '+n+" "+o+' role="dialog"\n        >\n            <div id="'+this.getIdName("lg-backdrop")+'" class="lg-backdrop"></div>\n\n            <div id="'+this.getIdName("lg-outer")+'" class="lg-outer lg-use-css3 lg-css3 lg-hide-items '+s+' ">\n\n              <div id="'+this.getIdName("lg-content")+'" class="lg-content">\n                <div id="'+this.getIdName("lg-inner")+'" class="lg-inner">\n                </div>\n                '+e+'\n              </div>\n                <div id="'+this.getIdName("lg-toolbar")+'" class="lg-toolbar lg-group">\n                    '+a+"\n                    "+l+"\n                    </div>\n                    "+(".lg-outer"===this.settings.appendSubHtmlTo?i:"")+'\n                <div id="'+this.getIdName("lg-components")+'" class="lg-components">\n                    '+(".lg-sub-html"===this.settings.appendSubHtmlTo?i:"")+"\n                </div>\n            </div>\n        </div>\n        ";T(this.settings.container).append(d),document.body!==this.settings.container&&T(this.settings.container).css("position","relative"),this.outer=this.getElementById("lg-outer"),this.$lgComponents=this.getElementById("lg-components"),this.$backdrop=this.getElementById("lg-backdrop"),this.$container=this.getElementById("lg-container"),this.$inner=this.getElementById("lg-inner"),this.$content=this.getElementById("lg-content"),this.$toolbar=this.getElementById("lg-toolbar"),this.$backdrop.css("transition-duration",this.settings.backdropDuration+"ms");var g=this.settings.mode+" ";this.manageSingleSlideClassName(),this.settings.enableDrag&&(g+="lg-grab "),this.outer.addClass(g),this.$inner.css("transition-timing-function",this.settings.easing),this.$inner.css("transition-duration",this.settings.speed+"ms"),this.settings.download&&this.$toolbar.append('<a id="'+this.getIdName("lg-download")+'" target="_blank" rel="noopener" aria-label="'+this.settings.strings.download+'" download class="lg-download lg-icon"></a>'),this.counter(),T(window).on("resize.lg.global"+this.lgId+" orientationchange.lg.global"+this.lgId,(function(){t.refreshOnResize()})),this.hideBars(),this.manageCloseGallery(),this.toggleMaximize(),this.initModules()}},t.prototype.refreshOnResize=function(){if(this.lgOpened){var t=this.galleryItems[this.index].__slideVideoInfo;this.mediaContainerPosition=this.getMediaContainerPosition();var e=this.mediaContainerPosition,i=e.top,s=e.bottom;if(this.currentImageSize=L(this.items[this.index],this.outer,i+s,t&&this.settings.videoMaxSize),t&&this.resizeVideoSlide(this.index,this.currentImageSize),this.zoomFromOrigin&&!this.isDummyImageRemoved){var n=this.getDummyImgStyles(this.currentImageSize);this.outer.find(".lg-current .lg-dummy-img").first().attr("style",n)}this.LGel.trigger(l)}},t.prototype.resizeVideoSlide=function(t,e){var i=this.getVideoContStyle(e);this.getSlideItem(t).find(".lg-video-cont").attr("style",i)},t.prototype.updateSlides=function(t,e){if(this.index>t.length-1&&(this.index=t.length-1),1===t.length&&(this.index=0),t.length){var i=this.galleryItems[e].src;this.galleryItems=t,this.updateControls(),this.$inner.empty(),this.currentItemsInDom=[];var s=0;this.galleryItems.some((function(t,e){return t.src===i&&(s=e,!0)})),this.currentItemsInDom=this.organizeSlideItems(s,-1),this.loadContent(s,!0),this.getSlideItem(s).addClass("lg-current"),this.index=s,this.updateCurrentCounter(s),this.LGel.trigger(a)}else this.closeGallery()},t.prototype.getItems=function(){if(this.items=[],this.settings.dynamic)return this.settings.dynamicEl||[];if("this"===this.settings.selector)this.items.push(this.el);else if(this.settings.selector)if("string"==typeof this.settings.selector)if(this.settings.selectWithin){var t=T(this.settings.selectWithin);this.items=t.find(this.settings.selector).get()}else this.items=this.el.querySelectorAll(this.settings.selector);else this.items=this.settings.selector;else this.items=this.el.children;return P(this.items,this.settings.extraProps,this.settings.getCaptionFromTitleOrAlt,this.settings.exThumbImage)},t.prototype.shouldHideScrollbar=function(){return this.settings.hideScrollbar&&document.body===this.settings.container},t.prototype.hideScrollbar=function(){if(this.shouldHideScrollbar()){this.bodyPaddingRight=parseFloat(T("body").style().paddingRight);var t=document.documentElement.getBoundingClientRect(),e=window.innerWidth-t.width;T(document.body).css("padding-right",e+this.bodyPaddingRight+"px"),T(document.body).addClass("lg-overlay-open")}},t.prototype.resetScrollBar=function(){this.shouldHideScrollbar()&&(T(document.body).css("padding-right",this.bodyPaddingRight+"px"),T(document.body).removeClass("lg-overlay-open"))},t.prototype.openGallery=function(t,e){var i=this;if(void 0===t&&(t=this.settings.index),!this.lgOpened){this.lgOpened=!0,this.outer.removeClass("lg-hide-items"),this.hideScrollbar(),this.$container.addClass("lg-show");var s=this.getItemsToBeInsertedToDom(t,t);this.currentItemsInDom=s;var n="";s.forEach((function(t){n=n+'<div id="'+t+'" class="lg-item"></div>'})),this.$inner.append(n),this.addHtml(t);var o="";this.mediaContainerPosition=this.getMediaContainerPosition();var r=this.mediaContainerPosition,l=r.top,a=r.bottom;this.settings.allowMediaOverlap||this.setMediaContainerPosition(l,a);var d=this.galleryItems[t].__slideVideoInfo;this.zoomFromOrigin&&e&&(this.currentImageSize=L(e,this.outer,l+a,d&&this.settings.videoMaxSize),o=D(e,this.outer,l,a,this.currentImageSize)),this.zoomFromOrigin&&o||(this.outer.addClass(this.settings.startClass),this.getSlideItem(t).removeClass("lg-complete"));var c=this.settings.zoomFromOrigin?100:this.settings.backdropDuration;setTimeout((function(){i.outer.addClass("lg-components-open")}),c),this.index=t,this.LGel.trigger(g),this.getSlideItem(t).addClass("lg-current"),this.lGalleryOn=!1,this.prevScrollTop=T(window).scrollTop(),setTimeout((function(){if(i.zoomFromOrigin&&o){var e=i.getSlideItem(t);e.css("transform",o),setTimeout((function(){e.addClass("lg-start-progress lg-start-end-progress").css("transition-duration",i.settings.startAnimationDuration+"ms"),i.outer.addClass("lg-zoom-from-image")})),setTimeout((function(){e.css("transform","translate3d(0, 0, 0)")}),100)}setTimeout((function(){i.$backdrop.addClass("in"),i.$container.addClass("lg-show-in")}),10),setTimeout((function(){i.settings.trapFocus&&document.body===i.settings.container&&i.trapFocus()}),i.settings.backdropDuration+50),i.zoomFromOrigin&&o||setTimeout((function(){i.outer.addClass("lg-visible")}),i.settings.backdropDuration),i.slide(t,!1,!1,!1),i.LGel.trigger(h)})),document.body===this.settings.container&&T("html").addClass("lg-on")}},t.prototype.getMediaContainerPosition=function(){if(this.settings.allowMediaOverlap)return{top:0,bottom:0};var t=this.$toolbar.get().clientHeight||0,e=this.outer.find(".lg-components .lg-sub-html").get(),i=this.settings.defaultCaptionHeight||e&&e.clientHeight||0,s=this.outer.find(".lg-thumb-outer").get();return{top:t,bottom:(s?s.clientHeight:0)+i}},t.prototype.setMediaContainerPosition=function(t,e){void 0===t&&(t=0),void 0===e&&(e=0),this.$content.css("top",t+"px").css("bottom",e+"px")},t.prototype.hideBars=function(){var t=this;setTimeout((function(){t.outer.removeClass("lg-hide-items"),t.settings.hideBarsDelay>0&&(t.outer.on("mousemove.lg click.lg touchstart.lg",(function(){t.outer.removeClass("lg-hide-items"),clearTimeout(t.hideBarTimeout),t.hideBarTimeout=setTimeout((function(){t.outer.addClass("lg-hide-items")}),t.settings.hideBarsDelay)})),t.outer.trigger("mousemove.lg"))}),this.settings.showBarsAfter)},t.prototype.initPictureFill=function(t){if(this.settings.supportLegacyBrowser)try{picturefill({elements:[t.get()]})}catch(t){console.warn("lightGallery :- If you want srcset or picture tag to be supported for older browser please include picturefil javascript library in your document.")}},t.prototype.counter=function(){if(this.settings.counter){var t='<div class="lg-counter" role="status" aria-live="polite">\n                <span id="'+this.getIdName("lg-counter-current")+'" class="lg-counter-current">'+(this.index+1)+' </span> /\n                <span id="'+this.getIdName("lg-counter-all")+'" class="lg-counter-all">'+this.galleryItems.length+" </span></div>";this.outer.find(this.settings.appendCounterTo).append(t)}},t.prototype.addHtml=function(t){var e,i;if(this.galleryItems[t].subHtmlUrl?i=this.galleryItems[t].subHtmlUrl:e=this.galleryItems[t].subHtml,!i)if(e){var s=e.substring(0,1);"."!==s&&"#"!==s||(e=this.settings.subHtmlSelectorRelative&&!this.settings.dynamic?T(this.items).eq(t).find(e).first().html():T(e).first().html())}else e="";if(".lg-item"!==this.settings.appendSubHtmlTo)i?this.outer.find(".lg-sub-html").load(i):this.outer.find(".lg-sub-html").html(e);else{var n=T(this.getSlideItemId(t));i?n.load(i):n.append('<div class="lg-sub-html">'+e+"</div>")}null!=e&&(""===e?this.outer.find(this.settings.appendSubHtmlTo).addClass("lg-empty-html"):this.outer.find(this.settings.appendSubHtmlTo).removeClass("lg-empty-html")),this.LGel.trigger(d,{index:t})},t.prototype.preload=function(t){for(var e=1;e<=this.settings.preload&&!(e>=this.galleryItems.length-t);e++)this.loadContent(t+e,!1);for(var i=1;i<=this.settings.preload&&!(t-i<0);i++)this.loadContent(t-i,!1)},t.prototype.getDummyImgStyles=function(t){return t?"width:"+t.width+"px;\n                margin-left: -"+t.width/2+"px;\n                margin-top: -"+t.height/2+"px;\n                height:"+t.height+"px":""},t.prototype.getVideoContStyle=function(t){return t?"width:"+t.width+"px;\n                height:"+t.height+"px":""},t.prototype.getDummyImageContent=function(t,e,i){var s;if(this.settings.dynamic||(s=T(this.items).eq(e)),s){var n=void 0;if(!(n=this.settings.exThumbImage?s.attr(this.settings.exThumbImage):s.find("img").first().attr("src")))return"";var o="<img "+i+' style="'+this.getDummyImgStyles(this.currentImageSize)+'" class="lg-dummy-img" src="'+n+'" />';return t.addClass("lg-first-slide"),this.outer.addClass("lg-first-slide-loading"),o}return""},t.prototype.setImgMarkup=function(t,e,i){var s=this.galleryItems[i],n=s.alt,o=s.srcset,r=s.sizes,l=s.sources,a=n?'alt="'+n+'"':"",d='<picture class="lg-img-wrap"> '+(this.isFirstSlideWithZoomAnimation()?this.getDummyImageContent(e,i,a):M(i,t,a,o,r,l))+"</picture>";e.prepend(d)},t.prototype.onSlideObjectLoad=function(t,e,i,s){var n=t.find(".lg-object").first();G(n.get())||e?i():(n.on("load.lg error.lg",(function(){i&&i()})),n.on("error.lg",(function(){s&&s()})))},t.prototype.onLgObjectLoad=function(t,e,i,s,n,o){var r=this;this.onSlideObjectLoad(t,o,(function(){r.triggerSlideItemLoad(t,e,i,s,n)}),(function(){t.addClass("lg-complete lg-complete_"),t.html('<span class="lg-error-msg">'+r.settings.strings.mediaLoadingFailed+"</span>")}))},t.prototype.triggerSlideItemLoad=function(t,e,i,s,n){var o=this,r=this.galleryItems[e],l=n&&"video"===this.getSlideType(r)&&!r.poster?s:0;setTimeout((function(){t.addClass("lg-complete lg-complete_"),o.LGel.trigger(c,{index:e,delay:i||0,isFirstSlide:n})}),l)},t.prototype.isFirstSlideWithZoomAnimation=function(){return!(this.lGalleryOn||!this.zoomFromOrigin||!this.currentImageSize)},t.prototype.addSlideVideoInfo=function(t){var e=this;t.forEach((function(t,i){t.__slideVideoInfo=F(t.src,!!t.video,i),t.__slideVideoInfo&&e.settings.loadYouTubePoster&&!t.poster&&t.__slideVideoInfo.youtube&&(t.poster="//img.youtube.com/vi/"+t.__slideVideoInfo.youtube[1]+"/maxresdefault.jpg")}))},t.prototype.loadContent=function(t,e){var i=this,s=this.galleryItems[t],o=T(this.getSlideItemId(t)),l=s.poster,a=s.srcset,d=s.sizes,g=s.sources,h=s.src,c=s.video,u=c&&"string"==typeof c?JSON.parse(c):c;if(s.responsive){var m=s.responsive.split(",");h=k(m)||h}var p=s.__slideVideoInfo,f="",y=!!s.iframe,v=!this.lGalleryOn,b=0;if(v&&(b=this.zoomFromOrigin&&this.currentImageSize?this.settings.startAnimationDuration+10:this.settings.backdropDuration+10),!o.hasClass("lg-loaded")){if(p){var C=this.mediaContainerPosition,I=C.top,S=C.bottom,w=L(this.items[t],this.outer,I+S,p&&this.settings.videoMaxSize);f=this.getVideoContStyle(w)}if(y){var x=z(this.settings.iframeWidth,this.settings.iframeHeight,this.settings.iframeMaxWidth,this.settings.iframeMaxHeight,h,s.iframeTitle);o.prepend(x)}else if(l){var E="";v&&this.zoomFromOrigin&&this.currentImageSize&&(E=this.getDummyImageContent(o,t,""));x=A(l,E||"",f,this.settings.strings.playVideo,p);o.prepend(x)}else if(p){x='<div class="lg-video-cont " style="'+f+'"></div>';o.prepend(x)}else if(this.setImgMarkup(h,o,t),a||g){var O=o.find(".lg-object");this.initPictureFill(O)}(l||p)&&this.LGel.trigger(r,{index:t,src:h,html5Video:u,hasPoster:!!l}),this.LGel.trigger(n,{index:t}),this.lGalleryOn&&".lg-item"===this.settings.appendSubHtmlTo&&this.addHtml(t)}var D=0;b&&!T(document.body).hasClass("lg-from-hash")&&(D=b),this.isFirstSlideWithZoomAnimation()&&(setTimeout((function(){o.removeClass("lg-start-end-progress lg-start-progress").removeAttr("style")}),this.settings.startAnimationDuration+100),o.hasClass("lg-loaded")||setTimeout((function(){if("image"===i.getSlideType(s)){var e=s.alt,n=e?'alt="'+e+'"':"";if(o.find(".lg-img-wrap").append(M(t,h,n,a,d,s.sources)),a||g){var r=o.find(".lg-object");i.initPictureFill(r)}}("image"===i.getSlideType(s)||"video"===i.getSlideType(s)&&l)&&(i.onLgObjectLoad(o,t,b,D,!0,!1),i.onSlideObjectLoad(o,!(!p||!p.html5||l),(function(){i.loadContentOnFirstSlideLoad(t,o,D)}),(function(){i.loadContentOnFirstSlideLoad(t,o,D)})))}),this.settings.startAnimationDuration+100)),o.addClass("lg-loaded"),this.isFirstSlideWithZoomAnimation()&&("video"!==this.getSlideType(s)||l)||this.onLgObjectLoad(o,t,b,D,v,!(!p||!p.html5||l)),this.zoomFromOrigin&&this.currentImageSize||!o.hasClass("lg-complete_")||this.lGalleryOn||setTimeout((function(){o.addClass("lg-complete")}),this.settings.backdropDuration),this.lGalleryOn=!0,!0===e&&(o.hasClass("lg-complete_")?this.preload(t):o.find(".lg-object").first().on("load.lg error.lg",(function(){i.preload(t)})))},t.prototype.loadContentOnFirstSlideLoad=function(t,e,i){var s=this;setTimeout((function(){e.find(".lg-dummy-img").remove(),e.removeClass("lg-first-slide"),s.outer.removeClass("lg-first-slide-loading"),s.isDummyImageRemoved=!0,s.preload(t)}),i+300)},t.prototype.getItemsToBeInsertedToDom=function(t,e,i){var s=this;void 0===i&&(i=0);var n=[],o=Math.max(i,3);o=Math.min(o,this.galleryItems.length);var r="lg-item-"+this.lgId+"-"+e;if(this.galleryItems.length<=3)return this.galleryItems.forEach((function(t,e){n.push("lg-item-"+s.lgId+"-"+e)})),n;if(t<(this.galleryItems.length-1)/2){for(var l=t;l>t-o/2&&l>=0;l--)n.push("lg-item-"+this.lgId+"-"+l);var a=n.length;for(l=0;l<o-a;l++)n.push("lg-item-"+this.lgId+"-"+(t+l+1))}else{for(l=t;l<=this.galleryItems.length-1&&l<t+o/2;l++)n.push("lg-item-"+this.lgId+"-"+l);for(a=n.length,l=0;l<o-a;l++)n.push("lg-item-"+this.lgId+"-"+(t-l-1))}return this.settings.loop&&(t===this.galleryItems.length-1?n.push("lg-item-"+this.lgId+"-0"):0===t&&n.push("lg-item-"+this.lgId+"-"+(this.galleryItems.length-1))),-1===n.indexOf(r)&&n.push("lg-item-"+this.lgId+"-"+e),n},t.prototype.organizeSlideItems=function(t,e){var i=this,s=this.getItemsToBeInsertedToDom(t,e,this.settings.numberOfSlideItemsInDom);return s.forEach((function(t){-1===i.currentItemsInDom.indexOf(t)&&i.$inner.append('<div id="'+t+'" class="lg-item"></div>')})),this.currentItemsInDom.forEach((function(t){-1===s.indexOf(t)&&T("#"+t).remove()})),s},t.prototype.getPreviousSlideIndex=function(){var t=0;try{var e=this.outer.find(".lg-current").first().attr("id");t=parseInt(e.split("-")[3])||0}catch(e){t=0}return t},t.prototype.setDownloadValue=function(t){if(this.settings.download){var e=this.galleryItems[t];if(!1===e.downloadUrl||"false"===e.downloadUrl)this.outer.addClass("lg-hide-download");else{var i=this.getElementById("lg-download");this.outer.removeClass("lg-hide-download"),i.attr("href",e.downloadUrl||e.src),e.download&&i.attr("download",e.download)}}},t.prototype.makeSlideAnimation=function(t,e,i){var s=this;this.lGalleryOn&&i.addClass("lg-slide-progress"),setTimeout((function(){s.outer.addClass("lg-no-trans"),s.outer.find(".lg-item").removeClass("lg-prev-slide lg-next-slide"),"prev"===t?(e.addClass("lg-prev-slide"),i.addClass("lg-next-slide")):(e.addClass("lg-next-slide"),i.addClass("lg-prev-slide")),setTimeout((function(){s.outer.find(".lg-item").removeClass("lg-current"),e.addClass("lg-current"),s.outer.removeClass("lg-no-trans")}),50)}),this.lGalleryOn?this.settings.slideDelay:0)},t.prototype.slide=function(t,e,i,s){var n=this,o=this.getPreviousSlideIndex();if(this.currentItemsInDom=this.organizeSlideItems(t,o),!this.lGalleryOn||o!==t){var r=this.galleryItems.length;if(!this.lgBusy){this.settings.counter&&this.updateCurrentCounter(t);var l=this.getSlideItem(t),a=this.getSlideItem(o),d=this.galleryItems[t],g=d.__slideVideoInfo;if(this.outer.attr("data-lg-slide-type",this.getSlideType(d)),this.setDownloadValue(t),g){var h=this.mediaContainerPosition,c=h.top,p=h.bottom,f=L(this.items[t],this.outer,c+p,g&&this.settings.videoMaxSize);this.resizeVideoSlide(t,f)}if(this.LGel.trigger(u,{prevIndex:o,index:t,fromTouch:!!e,fromThumb:!!i}),this.lgBusy=!0,clearTimeout(this.hideBarTimeout),this.arrowDisable(t),s||(t<o?s="prev":t>o&&(s="next")),e){this.outer.find(".lg-item").removeClass("lg-prev-slide lg-current lg-next-slide");var y=void 0,v=void 0;r>2?(y=t-1,v=t+1,(0===t&&o===r-1||t===r-1&&0===o)&&(v=0,y=r-1)):(y=0,v=1),"prev"===s?this.getSlideItem(v).addClass("lg-next-slide"):this.getSlideItem(y).addClass("lg-prev-slide"),l.addClass("lg-current")}else this.makeSlideAnimation(s,l,a);this.lGalleryOn?setTimeout((function(){n.loadContent(t,!0),".lg-item"!==n.settings.appendSubHtmlTo&&n.addHtml(t)}),this.settings.speed+50+(e?0:this.settings.slideDelay)):this.loadContent(t,!0),setTimeout((function(){n.lgBusy=!1,a.removeClass("lg-slide-progress"),n.LGel.trigger(m,{prevIndex:o,index:t,fromTouch:e,fromThumb:i})}),(this.lGalleryOn?this.settings.speed+100:100)+(e?0:this.settings.slideDelay))}this.index=t}},t.prototype.updateCurrentCounter=function(t){this.getElementById("lg-counter-current").html(t+1+"")},t.prototype.updateCounterTotal=function(){this.getElementById("lg-counter-all").html(this.galleryItems.length+"")},t.prototype.getSlideType=function(t){return t.__slideVideoInfo?"video":t.iframe?"iframe":"image"},t.prototype.touchMove=function(t,e,i){var s=e.pageX-t.pageX,n=e.pageY-t.pageY,o=!1;if(this.swipeDirection?o=!0:Math.abs(s)>15?(this.swipeDirection="horizontal",o=!0):Math.abs(n)>15&&(this.swipeDirection="vertical",o=!0),o){var r=this.getSlideItem(this.index);if("horizontal"===this.swipeDirection){null==i||i.preventDefault(),this.outer.addClass("lg-dragging"),this.setTranslate(r,s,0);var l=r.get().offsetWidth,a=15*l/100-Math.abs(10*s/100);this.setTranslate(this.outer.find(".lg-prev-slide").first(),-l+s-a,0),this.setTranslate(this.outer.find(".lg-next-slide").first(),l+s+a,0)}else if("vertical"===this.swipeDirection&&this.settings.swipeToClose){null==i||i.preventDefault(),this.$container.addClass("lg-dragging-vertical");var d=1-Math.abs(n)/window.innerHeight;this.$backdrop.css("opacity",d);var g=1-Math.abs(n)/(2*window.innerWidth);this.setTranslate(r,0,n,g,g),Math.abs(n)>100&&this.outer.addClass("lg-hide-items").removeClass("lg-components-open")}}},t.prototype.touchEnd=function(t,e,i){var s,n=this;"lg-slide"!==this.settings.mode&&this.outer.addClass("lg-slide"),setTimeout((function(){n.$container.removeClass("lg-dragging-vertical"),n.outer.removeClass("lg-dragging lg-hide-items").addClass("lg-components-open");var o=!0;if("horizontal"===n.swipeDirection){s=t.pageX-e.pageX;var r=Math.abs(t.pageX-e.pageX);s<0&&r>n.settings.swipeThreshold?(n.goToNextSlide(!0),o=!1):s>0&&r>n.settings.swipeThreshold&&(n.goToPrevSlide(!0),o=!1)}else if("vertical"===n.swipeDirection){if(s=Math.abs(t.pageY-e.pageY),n.settings.closable&&n.settings.swipeToClose&&s>100)return void n.closeGallery();n.$backdrop.css("opacity",1)}if(n.outer.find(".lg-item").removeAttr("style"),o&&Math.abs(t.pageX-e.pageX)<5){var l=T(i.target);n.isPosterElement(l)&&n.LGel.trigger(p)}n.swipeDirection=void 0})),setTimeout((function(){n.outer.hasClass("lg-dragging")||"lg-slide"===n.settings.mode||n.outer.removeClass("lg-slide")}),this.settings.speed+100)},t.prototype.enableSwipe=function(){var t=this,e={},i={},s=!1,n=!1;this.settings.enableSwipe&&(this.$inner.on("touchstart.lg",(function(i){t.dragOrSwipeEnabled=!0;var s=t.getSlideItem(t.index);!T(i.target).hasClass("lg-item")&&!s.get().contains(i.target)||t.outer.hasClass("lg-zoomed")||t.lgBusy||1!==i.touches.length||(n=!0,t.touchAction="swipe",t.manageSwipeClass(),e={pageX:i.touches[0].pageX,pageY:i.touches[0].pageY})})),this.$inner.on("touchmove.lg",(function(o){n&&"swipe"===t.touchAction&&1===o.touches.length&&(i={pageX:o.touches[0].pageX,pageY:o.touches[0].pageY},t.touchMove(e,i,o),s=!0)})),this.$inner.on("touchend.lg",(function(o){if("swipe"===t.touchAction){if(s)s=!1,t.touchEnd(i,e,o);else if(n){var r=T(o.target);t.isPosterElement(r)&&t.LGel.trigger(p)}t.touchAction=void 0,n=!1}})))},t.prototype.enableDrag=function(){var t=this,e={},i={},s=!1,n=!1;this.settings.enableDrag&&(this.outer.on("mousedown.lg",(function(i){t.dragOrSwipeEnabled=!0;var n=t.getSlideItem(t.index);(T(i.target).hasClass("lg-item")||n.get().contains(i.target))&&(t.outer.hasClass("lg-zoomed")||t.lgBusy||(i.preventDefault(),t.lgBusy||(t.manageSwipeClass(),e={pageX:i.pageX,pageY:i.pageY},s=!0,t.outer.get().scrollLeft+=1,t.outer.get().scrollLeft-=1,t.outer.removeClass("lg-grab").addClass("lg-grabbing"),t.LGel.trigger(f))))})),T(window).on("mousemove.lg.global"+this.lgId,(function(o){s&&t.lgOpened&&(n=!0,i={pageX:o.pageX,pageY:o.pageY},t.touchMove(e,i),t.LGel.trigger(y))})),T(window).on("mouseup.lg.global"+this.lgId,(function(o){if(t.lgOpened){var r=T(o.target);n?(n=!1,t.touchEnd(i,e,o),t.LGel.trigger(v)):t.isPosterElement(r)&&t.LGel.trigger(p),s&&(s=!1,t.outer.removeClass("lg-grabbing").addClass("lg-grab"))}})))},t.prototype.triggerPosterClick=function(){var t=this;this.$inner.on("click.lg",(function(e){!t.dragOrSwipeEnabled&&t.isPosterElement(T(e.target))&&t.LGel.trigger(p)}))},t.prototype.manageSwipeClass=function(){var t=this.index+1,e=this.index-1;this.settings.loop&&this.galleryItems.length>2&&(0===this.index?e=this.galleryItems.length-1:this.index===this.galleryItems.length-1&&(t=0)),this.outer.find(".lg-item").removeClass("lg-next-slide lg-prev-slide"),e>-1&&this.getSlideItem(e).addClass("lg-prev-slide"),this.getSlideItem(t).addClass("lg-next-slide")},t.prototype.goToNextSlide=function(t){var e=this,i=this.settings.loop;t&&this.galleryItems.length<3&&(i=!1),this.lgBusy||(this.index+1<this.galleryItems.length?(this.index++,this.LGel.trigger(b,{index:this.index}),this.slide(this.index,!!t,!1,"next")):i?(this.index=0,this.LGel.trigger(b,{index:this.index}),this.slide(this.index,!!t,!1,"next")):this.settings.slideEndAnimation&&!t&&(this.outer.addClass("lg-right-end"),setTimeout((function(){e.outer.removeClass("lg-right-end")}),400)))},t.prototype.goToPrevSlide=function(t){var e=this,i=this.settings.loop;t&&this.galleryItems.length<3&&(i=!1),this.lgBusy||(this.index>0?(this.index--,this.LGel.trigger(C,{index:this.index,fromTouch:t}),this.slide(this.index,!!t,!1,"prev")):i?(this.index=this.galleryItems.length-1,this.LGel.trigger(C,{index:this.index,fromTouch:t}),this.slide(this.index,!!t,!1,"prev")):this.settings.slideEndAnimation&&!t&&(this.outer.addClass("lg-left-end"),setTimeout((function(){e.outer.removeClass("lg-left-end")}),400)))},t.prototype.keyPress=function(){var t=this;T(window).on("keydown.lg.global"+this.lgId,(function(e){t.lgOpened&&!0===t.settings.escKey&&27===e.keyCode&&(e.preventDefault(),t.settings.allowMediaOverlap&&t.outer.hasClass("lg-can-toggle")&&t.outer.hasClass("lg-components-open")?t.outer.removeClass("lg-components-open"):t.closeGallery()),t.lgOpened&&t.galleryItems.length>1&&(37===e.keyCode&&(e.preventDefault(),t.goToPrevSlide()),39===e.keyCode&&(e.preventDefault(),t.goToNextSlide()))}))},t.prototype.arrow=function(){var t=this;this.getElementById("lg-prev").on("click.lg",(function(){t.goToPrevSlide()})),this.getElementById("lg-next").on("click.lg",(function(){t.goToNextSlide()}))},t.prototype.arrowDisable=function(t){if(!this.settings.loop&&this.settings.hideControlOnEnd){var e=this.getElementById("lg-prev"),i=this.getElementById("lg-next");t+1===this.galleryItems.length?i.attr("disabled","disabled").addClass("disabled"):i.removeAttr("disabled").removeClass("disabled"),0===t?e.attr("disabled","disabled").addClass("disabled"):e.removeAttr("disabled").removeClass("disabled")}},t.prototype.setTranslate=function(t,e,i,s,n){void 0===s&&(s=1),void 0===n&&(n=1),t.css("transform","translate3d("+e+"px, "+i+"px, 0px) scale3d("+s+", "+n+", 1)")},t.prototype.mousewheel=function(){var t=this,e=0;this.outer.on("wheel.lg",(function(i){if(i.deltaY&&!(t.galleryItems.length<2)){i.preventDefault();var s=(new Date).getTime();s-e<1e3||(e=s,i.deltaY>0?t.goToNextSlide():i.deltaY<0&&t.goToPrevSlide())}}))},t.prototype.isSlideElement=function(t){return t.hasClass("lg-outer")||t.hasClass("lg-item")||t.hasClass("lg-img-wrap")},t.prototype.isPosterElement=function(t){var e=this.getSlideItem(this.index).find(".lg-video-play-button").get();return t.hasClass("lg-video-poster")||t.hasClass("lg-video-play-button")||e&&e.contains(t.get())},t.prototype.toggleMaximize=function(){var t=this;this.getElementById("lg-maximize").on("click.lg",(function(){t.$container.toggleClass("lg-inline"),t.refreshOnResize()}))},t.prototype.invalidateItems=function(){for(var t=0;t<this.items.length;t++){var e=T(this.items[t]);e.off("click.lgcustom-item-"+e.attr("data-lg-id"))}},t.prototype.trapFocus=function(){var t=this;this.$container.get().focus({preventScroll:!0}),T(window).on("keydown.lg.global"+this.lgId,(function(e){if(t.lgOpened&&("Tab"===e.key||9===e.keyCode)){var i=B(t.$container.get()),s=i[0],n=i[i.length-1];e.shiftKey?document.activeElement===s&&(n.focus(),e.preventDefault()):document.activeElement===n&&(s.focus(),e.preventDefault())}}))},t.prototype.manageCloseGallery=function(){var t=this;if(this.settings.closable){var e=!1;this.getElementById("lg-close").on("click.lg",(function(){t.closeGallery()})),this.settings.closeOnTap&&(this.outer.on("mousedown.lg",(function(i){var s=T(i.target);e=!!t.isSlideElement(s)})),this.outer.on("mousemove.lg",(function(){e=!1})),this.outer.on("mouseup.lg",(function(i){var s=T(i.target);t.isSlideElement(s)&&e&&(t.outer.hasClass("lg-dragging")||t.closeGallery())})))}},t.prototype.closeGallery=function(t){var e=this;if(!this.lgOpened||!this.settings.closable&&!t)return 0;this.LGel.trigger(I),this.settings.resetScrollPosition&&!this.settings.hideScrollbar&&T(window).scrollTop(this.prevScrollTop);var i,s=this.items[this.index];if(this.zoomFromOrigin&&s){var n=this.mediaContainerPosition,o=n.top,r=n.bottom,l=this.galleryItems[this.index],a=l.__slideVideoInfo,d=l.poster,g=L(s,this.outer,o+r,a&&d&&this.settings.videoMaxSize);i=D(s,this.outer,o,r,g)}this.zoomFromOrigin&&i?(this.outer.addClass("lg-closing lg-zoom-from-image"),this.getSlideItem(this.index).addClass("lg-start-end-progress").css("transition-duration",this.settings.startAnimationDuration+"ms").css("transform",i)):(this.outer.addClass("lg-hide-items"),this.outer.removeClass("lg-zoom-from-image")),this.destroyModules(),this.lGalleryOn=!1,this.isDummyImageRemoved=!1,this.zoomFromOrigin=this.settings.zoomFromOrigin,clearTimeout(this.hideBarTimeout),this.hideBarTimeout=!1,T("html").removeClass("lg-on"),this.outer.removeClass("lg-visible lg-components-open"),this.$backdrop.removeClass("in").css("opacity",0);var h=this.zoomFromOrigin&&i?Math.max(this.settings.startAnimationDuration,this.settings.backdropDuration):this.settings.backdropDuration;return this.$container.removeClass("lg-show-in"),setTimeout((function(){e.zoomFromOrigin&&i&&e.outer.removeClass("lg-zoom-from-image"),e.$container.removeClass("lg-show"),e.resetScrollBar(),e.$backdrop.removeAttr("style").css("transition-duration",e.settings.backdropDuration+"ms"),e.outer.removeClass("lg-closing "+e.settings.startClass),e.getSlideItem(e.index).removeClass("lg-start-end-progress"),e.$inner.empty(),e.lgOpened&&e.LGel.trigger(S,{instance:e}),e.$container.get()&&e.$container.get().blur(),e.lgOpened=!1}),h+100),h+100},t.prototype.initModules=function(){this.plugins.forEach((function(t){try{t.init()}catch(t){console.warn("lightGallery:- make sure lightGallery module is properly initiated")}}))},t.prototype.destroyModules=function(t){this.plugins.forEach((function(e){try{t?e.destroy():e.closeGallery&&e.closeGallery()}catch(t){console.warn("lightGallery:- make sure lightGallery module is properly destroyed")}}))},t.prototype.refresh=function(t){this.settings.dynamic||this.invalidateItems(),this.galleryItems=t||this.getItems(),this.updateControls(),this.openGalleryOnItemClick(),this.LGel.trigger(a)},t.prototype.updateControls=function(){this.addSlideVideoInfo(this.galleryItems),this.updateCounterTotal(),this.manageSingleSlideClassName()},t.prototype.destroyGallery=function(){this.destroyModules(!0),this.settings.dynamic||this.invalidateItems(),T(window).off(".lg.global"+this.lgId),this.LGel.off(".lg"),this.$container.remove()},t.prototype.destroy=function(){var t=this.closeGallery(!0);return t?setTimeout(this.destroyGallery.bind(this),t):this.destroyGallery(),t},t}();const N=function(t,e){return new $(t,e)};(()=>{document.querySelectorAll(".feed-chapter__images-swiper .slide-feed-chapter__image-wrap");document.querySelectorAll("[data-lightgallery]").forEach((t=>{const e=t.dataset.description,i=N(t,{speed:500,licenseKey:"7EC452A9-0CFD441C-BD984C7C-17C8456E",appendCounterTo:".lg-content",selector:".slide-feed-chapter__image-wrap",appendSubHtmlTo:".lg-item"});t.addEventListener("lgBeforeSlide",(t=>{document.querySelectorAll(".lg-item").forEach((t=>{t.querySelector(".lg-sub-html")&&"true"===t.querySelector(".lg-sub-html").innerHTML&&t.classList.add("_is-vertical")}))})),t.addEventListener("lgBeforeOpen",(t=>{const s=i.$container.firstElement.querySelector(".lg-outer"),n=document.createElement("div");n.classList.add("gallery-description"),n.innerHTML=e,e&&s.append(n);document.querySelectorAll(".lg-item").forEach((t=>{t.querySelector(".lg-sub-html")&&"true"===t.querySelector(".lg-sub-html").innerHTML&&t.classList.add("_is-vertical")}))}))}))})()}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianMvOTIuYXBwLmpzIiwibWFwcGluZ3MiOiI7aUhBc0JBLElBQUlBLEVBQVcsV0FRWCxPQVBBQSxFQUFXQyxPQUFPQyxRQUFVLFNBQWtCQyxHQUMxQyxJQUFLLElBQUlDLEVBQUdDLEVBQUksRUFBR0MsRUFBSUMsVUFBVUMsT0FBUUgsRUFBSUMsRUFBR0QsSUFFNUMsSUFBSyxJQUFJSSxLQURUTCxFQUFJRyxVQUFVRixHQUNPSixPQUFPUyxVQUFVQyxlQUFlQyxLQUFLUixFQUFHSyxLQUFJTixFQUFFTSxHQUFLTCxFQUFFSyxJQUU5RSxPQUFPTixDQUNYLEVBQ09ILEVBQVNhLE1BQU1DLEtBQU1QLFVBQ2hDLEVBZUEsSUFBSVEsRUFDa0IscUJBRGxCQSxFQUVNLFNBRk5BLEVBR1UsYUFIVkEsRUFJaUIsb0JBSmpCQSxFQUtjLGlCQUxkQSxFQU1vQix1QkFOcEJBLEVBT1ksZUFQWkEsRUFRVyxjQVJYQSxFQVNlLGtCQVRmQSxFQVVhLGdCQVZiQSxFQVdZLGVBWFpBLEVBWWEsZ0JBWmJBLEVBYVcsY0FiWEEsRUFjVSxhQWRWQSxFQWVTLFlBZlRBLEVBZ0JpQixvQkFoQmpCQSxFQWlCaUIsb0JBakJqQkEsRUFrQmEsZ0JBbEJiQSxFQW1CWSxlQVVaQyxFQUEyQixDQUMzQkMsS0FBTSxXQUNOQyxPQUFRLE9BQ1JDLE1BQU8sSUFDUEMsV0FBWSxxQkFDWkMsT0FBUSxPQUNSQyxNQUFPLE9BQ1BDLFNBQVUsR0FDVkMsV0FBWSxnQkFDWkMsaUJBQWtCLElBQ2xCQyxVQUFXLEdBQ1hDLHVCQUF3QixJQUN4QkMsZ0JBQWdCLEVBQ2hCQyxjQUFlLEVBQ2ZDLGNBQWUsSUFDZkMsV0FBWSxFQUNaQyxzQkFBc0IsRUFDdEJDLG1CQUFtQixFQUNuQkMsYUFBYyxXQUNkQyxtQkFBbUIsRUFDbkJDLHFCQUFzQixFQUN0QkMsZUFBZ0IsR0FDaEJDLGdCQUFpQixHQUNqQkMscUJBQXFCLEVBQ3JCQyxlQUFlLEVBQ2ZDLFVBQVUsRUFDVkMsY0FBYyxFQUNkQyxZQUFZLEVBQ1pDLGVBQWUsRUFDZkMsa0JBQWtCLEVBQ2xCQyxNQUFNLEVBQ05DLFFBQVEsRUFDUkMsVUFBVSxFQUNWQyxXQUFXLEVBQ1hDLFVBQVUsRUFDVkMsbUJBQW1CLEVBQ25CQyxrQkFBa0IsRUFDbEJDLFlBQVksRUFDWkMsMEJBQTBCLEVBQzFCQyxnQkFBaUIsZUFDakJDLHlCQUF5QixFQUN6QkMsUUFBUyxFQUNUQyx3QkFBeUIsR0FDekJDLFNBQVUsR0FDVkMsYUFBYyxHQUNkQyxTQUFVLEdBQ1ZDLFNBQVUsR0FDVkMsTUFBTyxFQUNQQyxZQUFhLE9BQ2JDLGFBQWMsT0FDZEMsZUFBZ0IsT0FDaEJDLGdCQUFpQixPQUNqQkMsVUFBVSxFQUNWQyxTQUFTLEVBQ1RDLGdCQUFpQixjQUNqQkMsZUFBZ0IsR0FDaEJDLGFBQWEsRUFDYkMsWUFBWSxFQUNaQyxTQUFTLEVBQ1RDLFVBQVcsR0FDWEMsV0FBWSxHQUNaQyxhQUFjLEdBQ2RDLGNBQVVDLEVBQ1ZDLGVBQWdCLENBQ1o5QixVQUFVLEVBQ1ZOLGVBQWUsRUFDZndCLFVBQVUsR0FFZGEsUUFBUyxHQUNUQyxRQUFTLENBQ0xDLGFBQWMsZ0JBQ2RDLGVBQWdCLGtCQUNoQkMsY0FBZSxpQkFDZkMsVUFBVyxhQUNYbEIsU0FBVSxXQUNWbUIsVUFBVyxhQUNYQyxtQkFBb0Isc0NBNEI1QixJQUFJQyxFQUF5QixXQUN6QixTQUFTQSxFQUFROUIsR0FTYixPQVJBN0MsS0FBSzRFLGtCQUFvQixDQUNyQixxQkFDQSwyQkFDQSxZQUNBLGNBRUo1RSxLQUFLNkMsU0FBVzdDLEtBQUs2RSxhQUFhaEMsR0FDbEM3QyxLQUFLOEUsYUFBZTlFLEtBQUsrRSxjQUNsQi9FLElBQ1gsQ0E2VUEsT0E1VUEyRSxFQUFRSyxhQUFlLFdBQ25CLE1BQU8sdUNBQXVDQyxRQUFRLFNBQVMsU0FBVUMsR0FDckUsSUFBSUMsRUFBcUIsR0FBaEJDLEtBQUtDLFNBQWlCLEVBQy9CLE9BRDJDLEtBQUxILEVBQVdDLEVBQVMsRUFBSkEsRUFBVyxHQUN4REcsU0FBUyxHQUN0QixHQUNKLEVBQ0FYLEVBQVEvRSxVQUFVaUYsYUFBZSxTQUFVaEMsRUFBVTBDLEdBRWpELFlBRGdCLElBQVpBLElBQXNCQSxFQUFVQyxVQUNaLGlCQUFiM0MsRUFDQUEsR0FFWDBDLEVBQVVBLEdBQVdDLFNBRVYsTUFERjNDLEVBQVM0QyxVQUFVLEVBQUcsR0FFcEJGLEVBQVFHLGNBQWM3QyxHQUd0QjBDLEVBQVFJLGlCQUFpQjlDLEdBRXhDLEVBQ0E4QixFQUFRL0UsVUFBVWdHLE1BQVEsU0FBVUMsR0FDaEMsT0FBSzdGLEtBQUs2QyxlQUdtQm9CLElBQXpCakUsS0FBSzZDLFNBQVNuRCxPQUNkLEdBQUdvRyxRQUFRaEcsS0FBS0UsS0FBSzZDLFNBQVVnRCxHQUcvQkEsRUFBSzdGLEtBQUs2QyxTQUFVLEdBRWpCN0MsTUFSSUEsSUFTZixFQUNBMkUsRUFBUS9FLFVBQVVtRyxvQkFBc0IsU0FBVUMsRUFBSUMsRUFBYUMsR0FFL0QsSUFBSUMsRUFBV0YsRUFBWWhCLFFBQVEsY0FBYyxTQUFVM0YsRUFBRzhHLEdBQzFELE9BQU9BLEVBQU9DLGFBQ2xCLEtBQ2tELElBQTlDckcsS0FBSzRFLGtCQUFrQjBCLFFBQVFILElBQy9CSCxFQUFHTyxNQUFNSixFQUFTSyxPQUFPLEdBQUdDLGNBQWdCTixFQUFTTyxNQUFNLElBQU1SLEVBQ2pFRixFQUFHTyxNQUFNLFNBQVdKLEdBQVlELEVBQ2hDRixFQUFHTyxNQUFNLE1BQVFKLEdBQVlELEVBQzdCRixFQUFHTyxNQUFNLEtBQU9KLEdBQVlELEVBQzVCRixFQUFHTyxNQUFNLElBQU1KLEdBQVlELEdBRzNCRixFQUFHTyxNQUFNSixHQUFZRCxDQUU3QixFQUNBdkIsRUFBUS9FLFVBQVVtRixZQUFjLFdBQzVCLE9BQUkvRSxLQUFLNkMsZUFBcUNvQixJQUF6QmpFLEtBQUs2QyxTQUFTbkQsT0FDeEJNLEtBQUs2QyxTQUFTLEdBR2Q3QyxLQUFLNkMsUUFFcEIsRUFDQThCLEVBQVEvRSxVQUFVK0csZUFBaUIsU0FBVUMsRUFBT0MsR0FDaEQsSUFBSUMsRUFBaUJELEVBQVVFLE1BQU0sS0FDckMsT0FBT0gsRUFDRkcsTUFBTSxLQUNOQyxRQUFPLFNBQVVDLEdBQUssT0FBT0EsQ0FBRyxJQUNoQ0MsT0FBTSxTQUFVRCxHQUNqQixPQUFzQyxJQUEvQkgsRUFBZVIsUUFBUVcsRUFDbEMsR0FDSixFQUNBdEMsRUFBUS9FLFVBQVV1SCxLQUFPLFNBQVVBLEVBQU1qQixHQUNyQyxZQUFjakMsSUFBVmlDLEVBQ0tsRyxLQUFLOEUsYUFHSDlFLEtBQUs4RSxhQUFhc0MsYUFBYUQsR0FGM0IsSUFJZm5ILEtBQUs0RixPQUFNLFNBQVVJLEdBQ2pCQSxFQUFHcUIsYUFBYUYsRUFBTWpCLEVBQzFCLElBQ09sRyxLQUNYLEVBQ0EyRSxFQUFRL0UsVUFBVTBILEtBQU8sU0FBVXpFLEdBQy9CLE9BQU8wRSxFQUFJdkgsS0FBSzZFLGFBQWFoQyxFQUFVN0MsS0FBSzZDLFVBQ2hELEVBQ0E4QixFQUFRL0UsVUFBVTRILE1BQVEsV0FDdEIsT0FBSXhILEtBQUs2QyxlQUFxQ29CLElBQXpCakUsS0FBSzZDLFNBQVNuRCxPQUN4QjZILEVBQUl2SCxLQUFLNkMsU0FBUyxJQUdsQjBFLEVBQUl2SCxLQUFLNkMsU0FFeEIsRUFDQThCLEVBQVEvRSxVQUFVNkgsR0FBSyxTQUFVeEUsR0FDN0IsT0FBT3NFLEVBQUl2SCxLQUFLNkMsU0FBU0ksR0FDN0IsRUFDQTBCLEVBQVEvRSxVQUFVOEgsT0FBUyxXQUN2QixPQUFPSCxFQUFJdkgsS0FBSzZDLFNBQVM4RSxjQUM3QixFQUNBaEQsRUFBUS9FLFVBQVVnSSxJQUFNLFdBQ3BCLE9BQU81SCxLQUFLK0UsYUFDaEIsRUFDQUosRUFBUS9FLFVBQVVpSSxXQUFhLFNBQVVDLEdBQ3JDLElBQUlDLEVBQVFELEVBQVdmLE1BQU0sS0FJN0IsT0FIQS9HLEtBQUs0RixPQUFNLFNBQVVJLEdBQ2pCK0IsRUFBTWpDLFNBQVEsU0FBVXFCLEdBQVEsT0FBT25CLEVBQUdnQyxnQkFBZ0JiLEVBQU8sR0FDckUsSUFDT25ILElBQ1gsRUFDQTJFLEVBQVEvRSxVQUFVcUksS0FBTyxTQUFVQyxHQUMvQixJQUFLbEksS0FBSzhFLGFBQ04sT0FBTzlFLEtBRVgsSUFBSW1JLEVBQVUzQyxTQUFTNEMsY0FBYyxPQUtyQyxPQUpBRCxFQUFRRCxVQUFZQSxFQUNwQmxJLEtBQUs4RSxhQUFhdUQsV0FBV0MsYUFBYUgsRUFBU25JLEtBQUs4RSxjQUN4RDlFLEtBQUs4RSxhQUFhdUQsV0FBV0UsWUFBWXZJLEtBQUs4RSxjQUM5Q3FELEVBQVFLLFlBQVl4SSxLQUFLOEUsY0FDbEI5RSxJQUNYLEVBQ0EyRSxFQUFRL0UsVUFBVWEsU0FBVyxTQUFVZ0ksR0FVbkMsWUFUbUIsSUFBZkEsSUFBeUJBLEVBQWEsSUFDMUN6SSxLQUFLNEYsT0FBTSxTQUFVSSxHQUVqQnlDLEVBQVcxQixNQUFNLEtBQUtqQixTQUFRLFNBQVVvQyxHQUNoQ0EsR0FDQWxDLEVBQUcwQyxVQUFVQyxJQUFJVCxFQUV6QixHQUNKLElBQ09sSSxJQUNYLEVBQ0EyRSxFQUFRL0UsVUFBVWdKLFlBQWMsU0FBVUgsR0FTdEMsT0FSQXpJLEtBQUs0RixPQUFNLFNBQVVJLEdBRWpCeUMsRUFBVzFCLE1BQU0sS0FBS2pCLFNBQVEsU0FBVW9DLEdBQ2hDQSxHQUNBbEMsRUFBRzBDLFVBQVVHLE9BQU9YLEVBRTVCLEdBQ0osSUFDT2xJLElBQ1gsRUFDQTJFLEVBQVEvRSxVQUFVa0osU0FBVyxTQUFVWixHQUNuQyxRQUFLbEksS0FBSzhFLGNBR0g5RSxLQUFLOEUsYUFBYTRELFVBQVVLLFNBQVNiLEVBQ2hELEVBQ0F2RCxFQUFRL0UsVUFBVW9KLGFBQWUsU0FBVUMsR0FDdkMsUUFBS2pKLEtBQUs4RSxjQUdIOUUsS0FBSzhFLGFBQWFrRSxhQUFhQyxFQUMxQyxFQUNBdEUsRUFBUS9FLFVBQVVzSixZQUFjLFNBQVVoQixHQUN0QyxPQUFLbEksS0FBSzhFLGNBR045RSxLQUFLOEksU0FBU1osR0FDZGxJLEtBQUs0SSxZQUFZVixHQUdqQmxJLEtBQUtTLFNBQVN5SCxHQUVYbEksTUFSSUEsSUFTZixFQUNBMkUsRUFBUS9FLFVBQVV1SixJQUFNLFNBQVVoRCxFQUFVRCxHQUN4QyxJQUFJa0QsRUFBUXBKLEtBSVosT0FIQUEsS0FBSzRGLE9BQU0sU0FBVUksR0FDakJvRCxFQUFNckQsb0JBQW9CQyxFQUFJRyxFQUFVRCxFQUM1QyxJQUNPbEcsSUFDWCxFQUVBMkUsRUFBUS9FLFVBQVV5SixHQUFLLFNBQVVDLEVBQVFDLEdBQ3JDLElBQUlILEVBQVFwSixLQUNaLE9BQUtBLEtBQUs2QyxVQUdWeUcsRUFBT3ZDLE1BQU0sS0FBS2pCLFNBQVEsU0FBVWMsR0FDM0I0QyxNQUFNQyxRQUFROUUsRUFBUStFLGVBQWU5QyxNQUN0Q2pDLEVBQVErRSxlQUFlOUMsR0FBUyxJQUVwQ2pDLEVBQVErRSxlQUFlOUMsR0FBTytDLEtBQUtKLEdBQ25DSCxFQUFNdkcsU0FBUytHLGlCQUFpQmhELEVBQU1HLE1BQU0sS0FBSyxHQUFJd0MsRUFDekQsSUFDT3ZKLE1BVElBLElBVWYsRUFFQTJFLEVBQVEvRSxVQUFVaUssS0FBTyxTQUFVakQsRUFBTzJDLEdBQ3RDLElBQUlILEVBQVFwSixLQUtaLE9BSkFBLEtBQUtxSixHQUFHekMsR0FBTyxXQUNYd0MsRUFBTVUsSUFBSWxELEdBQ1YyQyxFQUFTM0MsRUFDYixJQUNPNUcsSUFDWCxFQUNBMkUsRUFBUS9FLFVBQVVrSyxJQUFNLFNBQVVsRCxHQUM5QixJQUFJd0MsRUFBUXBKLEtBQ1osT0FBS0EsS0FBSzZDLFVBR1YxRCxPQUFPNEssS0FBS3BGLEVBQVErRSxnQkFBZ0I1RCxTQUFRLFNBQVVlLEdBQzlDdUMsRUFBTXpDLGVBQWVDLEVBQU9DLEtBQzVCbEMsRUFBUStFLGVBQWU3QyxHQUFXZixTQUFRLFNBQVV5RCxHQUNoREgsRUFBTXZHLFNBQVNtSCxvQkFBb0JuRCxFQUFVRSxNQUFNLEtBQUssR0FBSXdDLEVBQ2hFLElBQ0E1RSxFQUFRK0UsZUFBZTdDLEdBQWEsR0FFNUMsSUFDTzdHLE1BVklBLElBV2YsRUFDQTJFLEVBQVEvRSxVQUFVcUssUUFBVSxTQUFVckQsRUFBT3NELEdBQ3pDLElBQUtsSyxLQUFLOEUsYUFDTixPQUFPOUUsS0FFWCxJQUFJbUssRUFBYyxJQUFJQyxZQUFZeEQsRUFBTUcsTUFBTSxLQUFLLEdBQUksQ0FDbkRtRCxPQUFRQSxHQUFVLE9BR3RCLE9BREFsSyxLQUFLOEUsYUFBYXVGLGNBQWNGLEdBQ3pCbkssSUFDWCxFQUVBMkUsRUFBUS9FLFVBQVUwSyxLQUFPLFNBQVVDLEdBQy9CLElBQUluQixFQUFRcEosS0FNWixPQUxBd0ssTUFBTUQsR0FDREUsTUFBSyxTQUFVQyxHQUFPLE9BQU9BLEVBQUlDLE1BQVEsSUFDekNGLE1BQUssU0FBVUcsR0FDaEJ4QixFQUFNdkcsU0FBU2dJLFVBQVlELENBQy9CLElBQ081SyxJQUNYLEVBQ0EyRSxFQUFRL0UsVUFBVWdMLEtBQU8sU0FBVUEsR0FDL0IsWUFBYTNHLElBQVQyRyxFQUNLNUssS0FBSzhFLGFBR0g5RSxLQUFLOEUsYUFBYStGLFVBRmQsSUFJZjdLLEtBQUs0RixPQUFNLFNBQVVJLEdBQ2pCQSxFQUFHNkUsVUFBWUQsQ0FDbkIsSUFDTzVLLEtBQ1gsRUFDQTJFLEVBQVEvRSxVQUFVa0wsT0FBUyxTQUFVRixHQVNqQyxPQVJBNUssS0FBSzRGLE9BQU0sU0FBVUksR0FDRyxpQkFBVDRFLEVBQ1A1RSxFQUFHK0UsbUJBQW1CLFlBQWFILEdBR25DNUUsRUFBR3dDLFlBQVlvQyxFQUV2QixJQUNPNUssSUFDWCxFQUNBMkUsRUFBUS9FLFVBQVVvTCxRQUFVLFNBQVVKLEdBSWxDLE9BSEE1SyxLQUFLNEYsT0FBTSxTQUFVSSxHQUNqQkEsRUFBRytFLG1CQUFtQixhQUFjSCxFQUN4QyxJQUNPNUssSUFDWCxFQUNBMkUsRUFBUS9FLFVBQVVpSixPQUFTLFdBSXZCLE9BSEE3SSxLQUFLNEYsT0FBTSxTQUFVSSxHQUNqQkEsRUFBR3FDLFdBQVdFLFlBQVl2QyxFQUM5QixJQUNPaEcsSUFDWCxFQUNBMkUsRUFBUS9FLFVBQVVxTCxNQUFRLFdBSXRCLE9BSEFqTCxLQUFLNEYsT0FBTSxTQUFVSSxHQUNqQkEsRUFBRzZFLFVBQVksRUFDbkIsSUFDTzdLLElBQ1gsRUFDQTJFLEVBQVEvRSxVQUFVc0wsVUFBWSxTQUFVQSxHQUNwQyxZQUFrQmpILElBQWRpSCxHQUNBMUYsU0FBUzJGLEtBQUtELFVBQVlBLEVBQzFCMUYsU0FBUzRGLGdCQUFnQkYsVUFBWUEsRUFDOUJsTCxNQUdDcUwsT0FBT0MsYUFDWDlGLFNBQVM0RixnQkFBZ0JGLFdBQ3pCMUYsU0FBUzJGLEtBQUtELFdBQ2QsQ0FFWixFQUNBdkcsRUFBUS9FLFVBQVUyTCxXQUFhLFNBQVVBLEdBQ3JDLFlBQW1CdEgsSUFBZnNILEdBQ0EvRixTQUFTMkYsS0FBS0ksV0FBYUEsRUFDM0IvRixTQUFTNEYsZ0JBQWdCRyxXQUFhQSxFQUMvQnZMLE1BR0NxTCxPQUFPRyxhQUNYaEcsU0FBUzRGLGdCQUFnQkcsWUFDekIvRixTQUFTMkYsS0FBS0ksWUFDZCxDQUVaLEVBQ0E1RyxFQUFRL0UsVUFBVTZMLE9BQVMsV0FDdkIsSUFBS3pMLEtBQUs4RSxhQUNOLE1BQU8sQ0FDSDRHLEtBQU0sRUFDTkMsSUFBSyxHQUdiLElBQUlDLEVBQU81TCxLQUFLOEUsYUFBYStHLHdCQUN6QkMsRUFBaUJ2RSxFQUFJLFFBQVFoQixRQUFRd0YsV0FFekMsTUFBTyxDQUNITCxLQUFNRSxFQUFLRixLQUFPTSxXQUFXRixHQUFrQjlMLEtBQUt1TCxhQUNwREksSUFBS0MsRUFBS0QsSUFBTTNMLEtBQUtrTCxZQUU3QixFQUNBdkcsRUFBUS9FLFVBQVUyRyxNQUFRLFdBQ3RCLE9BQUt2RyxLQUFLOEUsYUFHRjlFLEtBQUs4RSxhQUFhbUgsY0FDdEJaLE9BQU9hLGlCQUFpQmxNLEtBQUs4RSxjQUh0QixDQUFDLENBSWhCLEVBRUFILEVBQVEvRSxVQUFVWSxNQUFRLFdBQ3RCLElBQUkrRixFQUFRdkcsS0FBS3VHLFFBQ2pCLE9BQVF2RyxLQUFLOEUsYUFBYXFILFlBQ3RCSCxXQUFXekYsRUFBTTZGLGFBQ2pCSixXQUFXekYsRUFBTThGLGFBQ3pCLEVBRUExSCxFQUFRL0UsVUFBVVcsT0FBUyxXQUN2QixJQUFJZ0csRUFBUXZHLEtBQUt1RyxRQUNqQixPQUFRdkcsS0FBSzhFLGFBQWF3SCxhQUN0Qk4sV0FBV3pGLEVBQU1nRyxZQUNqQlAsV0FBV3pGLEVBQU1pRyxjQUN6QixFQUNBN0gsRUFBUStFLGVBQWlCLENBQUMsRUFDbkIvRSxDQUNYLENBelY0QixHQTBWNUIsU0FBUzRDLEVBQUkxRSxHQUVULE9BblhBLFdBQ0ksR0FBa0MsbUJBQXZCd0ksT0FBT2pCLFlBQ2QsT0FBTyxFQVdYaUIsT0FBT2pCLFlBVlAsU0FBcUJ4RCxFQUFPNkYsR0FDeEJBLEVBQVNBLEdBQVUsQ0FDZkMsU0FBUyxFQUNUQyxZQUFZLEVBQ1p6QyxPQUFRLE1BRVosSUFBSTBDLEVBQU1wSCxTQUFTcUgsWUFBWSxlQUUvQixPQURBRCxFQUFJRSxnQkFBZ0JsRyxFQUFPNkYsRUFBT0MsUUFBU0QsRUFBT0UsV0FBWUYsRUFBT3ZDLFFBQzlEMEMsQ0FDWCxDQUVILENBZEQsR0FnQlNHLFFBQVFuTixVQUFVb04sVUFDbkJELFFBQVFuTixVQUFVb04sUUFDZEQsUUFBUW5OLFVBQVVxTixtQkFDZEYsUUFBUW5OLFVBQVVzTix1QkFnVzNCLElBQUl2SSxFQUFROUIsRUFDdkIsQ0FFQSxJQUFJc0ssRUFBd0IsQ0FDeEIsTUFDQSxVQUNBLFVBQ0EsYUFDQSxPQUNBLFFBQ0EsU0FDQSxZQUNBLGFBQ0EsU0FDQSxRQUNBLFNBQ0EsY0FDQSxXQUNBLFFBQ0EsbUJBQ0EsWUFDQSxjQUNBLGtCQUNBLG9CQUNBLGdCQUNBLFNBQ0EsbUJBQ0EsYUFHSixTQUFTQyxFQUFjakcsR0FFbkIsTUFBYSxTQUFUQSxFQUNPLE1BSVhBLEdBREFBLEdBREFBLEVBQU9BLEVBQUtsQyxRQUFRLFFBQVMsS0FDakJ1QixPQUFPLEdBQUdDLGNBQWdCVSxFQUFLVCxNQUFNLElBQ3JDekIsUUFBUSxhQUFhLFNBQVVvSSxHQUFLLE9BQU9BLEVBQUUsR0FBR2hILGFBQWUsR0FFL0UsQ0FDQSxJQUFJaUgsRUFJUyxTQUFVdEgsRUFBSXBGLEVBQVcyTSxFQUFTQyxRQUN2QixJQUFaRCxJQUFzQkEsRUFBVSxHQUNwQyxJQUNJRSxFQURPbEcsRUFBSXZCLEdBQ0dtQixLQUFLLGlCQUFtQnFHLEVBQzFDLEdBQUtDLEVBQUwsQ0FHQSxJQUFJQyxFQUFvQkQsRUFBTzFHLE1BQU0sS0FFckMsR0FBSTJHLEVBQWtCLEdBRWxCLElBREEsSUFBSUMsRUFBU3RDLE9BQU91QyxXQUNYck8sRUFBSSxFQUFHQSxFQUFJbU8sRUFBa0JoTyxPQUFRSCxJQUFLLENBQy9DLElBQUlzTyxFQUFTSCxFQUFrQm5PLEdBRS9CLEdBRHNCdU8sU0FBU0QsRUFBTzlHLE1BQU0sS0FBSyxHQUFJLElBQy9CNEcsRUFBUSxDQUMxQkYsRUFBU0ksRUFDVCxLQUNKLENBRUl0TyxJQUFNbU8sRUFBa0JoTyxPQUFTLElBQ2pDK04sRUFBU0ksRUFFakIsQ0FFSixJQUFJRSxFQUFPTixFQUFPMUcsTUFBTSxLQUNwQnZHLEVBQVFzTixTQUFTQyxFQUFLLEdBQUksSUFDMUJ4TixFQUFTdU4sU0FBU0MsRUFBSyxHQUFJLElBQzNCQyxFQUFTcE4sRUFBVUosUUFDbkJ5TixFQUFVck4sRUFBVUwsU0FBV2dOLEVBQy9CVyxFQUFXOUksS0FBSytJLElBQUlILEVBQVF4TixHQUM1QjROLEVBQVloSixLQUFLK0ksSUFBSUYsRUFBUzFOLEdBQzlCOE4sRUFBUWpKLEtBQUsrSSxJQUFJRCxFQUFXMU4sRUFBTzROLEVBQVk3TixHQUNuRCxNQUFPLENBQUVDLE1BQU9BLEVBQVE2TixFQUFPOU4sT0FBUUEsRUFBUzhOLEVBMUJoRCxDQTJCSixFQXJDQWYsRUEyQ2MsU0FBVXRILEVBQUlwRixFQUFXK0ssRUFBSzJDLEVBQVFDLEdBQ2hELEdBQUtBLEVBQUwsQ0FHQSxJQUFJQyxFQUFPakgsRUFBSXZCLEdBQUlzQixLQUFLLE9BQU9FLFFBQy9CLEdBQUtnSCxFQUFLNUcsTUFBVixDQUdBLElBQUk2RyxFQUFnQjdOLEVBQVVnSCxNQUFNaUUsd0JBQ2hDOEIsRUFBU2MsRUFBY2pPLE1BRXZCa08sRUFBVTlOLEVBQVVMLFVBQVlvTCxFQUFNMkMsR0FDdENLLEVBQVVILEVBQUtoTyxRQUNmb08sRUFBV0osRUFBS2pPLFNBQ2hCc08sRUFBVUwsRUFBS2pJLFFBQ2Z1SSxHQUFLbkIsRUFBU2dCLEdBQVcsRUFDekJILEVBQUsvQyxTQUFTQyxNQUNiTSxXQUFXNkMsRUFBUXpDLGNBQWdCLElBQ25DSixXQUFXNkMsRUFBUUUsYUFBZSxHQUNuQ3hILEVBQUk4RCxRQUFRRSxhQUNaa0QsRUFBYy9DLEtBQ2RzRCxHQUFLTixFQUFVRSxHQUFZLEVBQzNCSixFQUFLL0MsU0FBU0UsS0FDYkssV0FBVzZDLEVBQVF0QyxhQUFlLElBQ2xDUCxXQUFXNkMsRUFBUUksWUFBYyxHQUNsQzFILEVBQUk4RCxRQUFRSCxZQUNaUyxFQVlKLE1BVGdCLGdCQUNYbUQsSUFBTSxHQUNQLFFBQ0NFLElBQU0sR0FDUCxrQkFOTUwsRUFBVUosRUFBVS9OLE1BUTFCLEtBUE1vTyxFQUFXTCxFQUFVaE8sT0FTM0IsTUE5QkosQ0FKQSxDQW9DSixFQWxGQStNLEVBbUZpQixTQUFVcEssRUFBYUMsRUFBY0MsRUFBZ0JDLEVBQWlCNkwsRUFBS0MsR0FFeEYsTUFBTyx5REFBOERqTSxFQUFjLGVBQWlCRSxFQUFpQixhQUFlRCxFQUFlLGdCQUFrQkUsRUFBa0Isc0VBRDNLOEwsRUFBYyxVQUFZQSxFQUFjLElBQU0sSUFDaU4sU0FBWUQsRUFBTSw2REFDalMsRUF0RkE1QixFQXVGYyxTQUFVckssRUFBT2lNLEVBQUtFLEVBQVNDLEVBQVFDLEVBQU9DLEdBQ3hELElBRUlDLEVBQVksUUFBVUosRUFBVSxLQUZuQkMsRUFBUyxXQUFjQSxFQUFTLElBQU8sSUFFRCxNQUR2Q0MsRUFBUSxVQUFhQSxFQUFRLElBQU8sSUFDc0IsMkNBQWdEck0sRUFBUSxVQUFjaU0sRUFBTSxPQUNsSk8sRUFBWSxHQUNaRixJQUVBRSxHQURtQyxpQkFBWkYsRUFBdUJHLEtBQUtDLE1BQU1KLEdBQVdBLEdBQzlDSyxLQUFJLFNBQVVDLEdBQ2hDLElBQUk5SCxFQUFRLEdBS1osT0FKQTVJLE9BQU80SyxLQUFLOEYsR0FBUS9KLFNBQVEsU0FBVWdLLEdBRWxDL0gsR0FBUyxJQUFNK0gsRUFBTSxLQUFRRCxFQUFPQyxHQUFPLEdBQy9DLElBQ08sV0FBYS9ILEVBQVEsWUFDaEMsS0FFSixNQUFPLEdBQUswSCxFQUFZRCxDQUM1QixFQXhHQWxDLEVBMEdrQixTQUFVeUMsR0FJeEIsSUFIQSxJQUFJQyxFQUFVLEdBQ1ZDLEVBQVEsR0FDUmYsRUFBTSxHQUNEM1AsRUFBSSxFQUFHQSxFQUFJd1EsRUFBUXJRLE9BQVFILElBQUssQ0FDckMsSUFBSTJRLEVBQU9ILEVBQVF4USxHQUFHd0gsTUFBTSxLQUVaLEtBQVptSixFQUFLLElBQ0xBLEVBQUtDLE9BQU8sRUFBRyxHQUVuQkYsRUFBTXRHLEtBQUt1RyxFQUFLLElBQ2hCRixFQUFRckcsS0FBS3VHLEVBQUssR0FDdEIsQ0FFQSxJQURBLElBQUl2QyxFQUFTdEMsT0FBT3VDLFdBQ1h3QyxFQUFJLEVBQUdBLEVBQUlKLEVBQVF0USxPQUFRMFEsSUFDaEMsR0FBSXRDLFNBQVNrQyxFQUFRSSxHQUFJLElBQU16QyxFQUFRLENBQ25DdUIsRUFBTWUsRUFBTUcsR0FDWixLQUNKLENBRUosT0FBT2xCLENBQ1gsRUEvSEE1QixFQWdJZSxTQUFVK0MsR0FDckIsUUFBS0EsTUFLQUEsRUFBSUMsVUFNZ0IsSUFBckJELEVBQUlFLGFBS1osRUFqSkFqRCxFQWtKc0IsU0FBVWtELEVBQVNDLEVBQVVDLEVBQWdCQyxFQUFpQkMsR0FXaEYsTUFBTyw4QkFUSEEsR0FBWUEsRUFBU0MsUUFDUixpQkFFUkQsR0FBWUEsRUFBU0UsTUFDYixlQUdBLGdCQUVtQyxZQUFnQkosRUFBaUIsMFBBQXNRQyxFQUFrQixvSUFBMklBLEVBQWtCLGdnQkFBOGhCRixHQUFZLElBQU0sNkRBQWtFRCxFQUFVLHNCQUMxb0MsRUE5SkFsRCxFQStKc0IsU0FBVTFNLEdBQzVCLElBQUltUSxFQUFXblEsRUFBVStFLGlCQUFpQixzTkFLMUMsTUFKc0IsR0FBR3FCLE9BQU9sSCxLQUFLaVIsR0FBVSxTQUFVQyxHQUNyRCxJQUFJekssRUFBUThFLE9BQU9hLGlCQUFpQjhFLEdBQ3BDLE1BQXlCLFNBQWxCekssRUFBTTBLLFNBQTJDLFdBQXJCMUssRUFBTTJLLFVBQzdDLEdBRUosRUF0S0E1RCxFQThLbUIsU0FBVTZELEVBQU9yTixFQUFZdEIsRUFBMEJ1QixHQUN0RSxJQUFJcU4sRUFBa0IsR0FDbEJDLEVBdHNCWixXQUNJLElBQUssSUFBSS9SLEVBQUksRUFBR0MsRUFBSSxFQUFHK1IsRUFBSzdSLFVBQVVDLE9BQVFILEVBQUkrUixFQUFJL1IsSUFBS0QsR0FBS0csVUFBVUYsR0FBR0csT0FDeEUsSUFBSXlGLEVBQUlxRSxNQUFNbEssR0FBSWlTLEVBQUksRUFBM0IsSUFBOEJoUyxFQUFJLEVBQUdBLEVBQUkrUixFQUFJL1IsSUFDekMsSUFBSyxJQUFJaVMsRUFBSS9SLFVBQVVGLEdBQUk2USxFQUFJLEVBQUdxQixFQUFLRCxFQUFFOVIsT0FBUTBRLEVBQUlxQixFQUFJckIsSUFBS21CLElBQzFEcE0sRUFBRW9NLEdBQUtDLEVBQUVwQixHQUNqQixPQUFPakwsQ0FDWCxDQWdzQnNDdU0sQ0FBZXZFLEVBQXVCckosR0E2QnBFLE1BNUJBLEdBQUdnQyxRQUFRaEcsS0FBS3FSLEdBQU8sU0FBVVEsR0FFN0IsSUFEQSxJQUFJOU4sRUFBWSxDQUFDLEVBQ1J0RSxFQUFJLEVBQUdBLEVBQUlvUyxFQUFLN0osV0FBV3BJLE9BQVFILElBQUssQ0FDN0MsSUFBSTRILEVBQU93SyxFQUFLN0osV0FBV3ZJLEdBQzNCLEdBQUk0SCxFQUFLeUssVUFBVyxDQUNoQixJQUFJQyxFQUFjekUsRUFBY2pHLEVBQUsySyxNQUNqQ0MsRUFBUSxHQUNSVixFQUF3Qi9LLFFBQVF1TCxJQUFnQixJQUNoREUsRUFBUUYsR0FFUkUsSUFDQWxPLEVBQVVrTyxHQUFTNUssRUFBS2pCLE1BRWhDLENBQ0osQ0FDQSxJQUFJOEwsRUFBY3pLLEVBQUlvSyxHQUNsQk0sRUFBTUQsRUFBWTFLLEtBQUssT0FBT0UsUUFBUUwsS0FBSyxPQUMzQytLLEVBQVFGLEVBQVk3SyxLQUFLLFNBQ3pCZ0wsRUFBUXBPLEVBQ05pTyxFQUFZN0ssS0FBS3BELEdBQ2pCaU8sRUFBWTFLLEtBQUssT0FBT0UsUUFBUUwsS0FBSyxPQUMzQ3RELEVBQVVzTyxNQUFRQSxFQUNkM1AsSUFBNkJxQixFQUFVdU8sVUFDdkN2TyxFQUFVdU8sUUFBVUYsR0FBU0QsR0FBTyxJQUV4Q3BPLEVBQVVvTyxJQUFNQSxHQUFPQyxHQUFTLEdBQ2hDZCxFQUFnQnpILEtBQUs5RixFQUN6QixJQUNPdU4sQ0FDWCxFQTlNQTlELEVBK01VLFdBQ04sTUFBTyw0QkFBNEIrRSxLQUFLQyxVQUFVQyxVQUN0RCxFQWpOQWpGLEVBME5TLFNBQVU0QixFQUFLc0QsRUFBY3ZQLEdBQ2xDLElBQUtpTSxFQUNELE9BQUlzRCxFQUNPLENBQ0hDLE9BQU8sUUFJWEMsUUFBUUMsTUFBTSwyREFDVDFQLEVBQVEsR0FDVCxrSUFJWixJQUFJNE4sRUFBVTNCLEVBQUkwRCxNQUFNLGdIQUNwQjlCLEVBQVE1QixFQUFJMEQsTUFBTSwwRUFDbEJDLEVBQVMzRCxFQUFJMEQsTUFBTSw0RUFDdkIsT0FBSS9CLEVBQ08sQ0FDSEEsUUFBU0EsR0FHUkMsRUFDRSxDQUNIQSxNQUFPQSxHQUdOK0IsRUFDRSxDQUNIQSxPQUFRQSxRQUZYLENBS1QsRUFNQUMsRUFBTyxFQUNQQyxFQUE4QixXQUM5QixTQUFTQSxFQUFhL0IsRUFBU2dDLEdBbUIzQixHQWxCQWhULEtBQUtpVCxVQUFXLEVBQ2hCalQsS0FBS2lELE1BQVEsRUFFYmpELEtBQUttRSxRQUFVLEdBRWZuRSxLQUFLa1QsWUFBYSxFQUVsQmxULEtBQUttVCxRQUFTLEVBQ2RuVCxLQUFLb1Qsa0JBQW9CLEdBRXpCcFQsS0FBS3FULGNBQWdCLEVBQ3JCclQsS0FBS3NULGlCQUFtQixFQUN4QnRULEtBQUt1VCxxQkFBc0IsRUFDM0J2VCxLQUFLd1Qsb0JBQXFCLEVBQzFCeFQsS0FBS3lULHVCQUF5QixDQUMxQjlILElBQUssRUFDTDJDLE9BQVEsSUFFUDBDLEVBQ0QsT0FBT2hSLEtBU1gsR0FQQThTLElBQ0E5UyxLQUFLOFMsS0FBT0EsRUFDWjlTLEtBQUtnRyxHQUFLZ0wsRUFDVmhSLEtBQUt3TyxLQUFPakgsRUFBSXlKLEdBQ2hCaFIsS0FBSzBULGlCQUFpQlYsR0FDdEJoVCxLQUFLMlQsZUFFRDNULEtBQUs0VCxTQUFTaFEsY0FDY0ssSUFBNUJqRSxLQUFLNFQsU0FBUy9QLFlBQ2IyRixNQUFNQyxRQUFRekosS0FBSzRULFNBQVMvUCxXQUM3QixLQUFNLHVFQU9WLE9BTEE3RCxLQUFLNlQsYUFBZTdULEtBQUs4VCxXQUN6QjlULEtBQUsrVCxvQkFFTC9ULEtBQUtnVSxPQUNMaFUsS0FBS2lVLGtCQUNFalUsSUFDWCxDQW0wREEsT0FsMERBK1MsRUFBYW5ULFVBQVU4VCxpQkFBbUIsU0FBVVYsR0FHaEQsR0FEQWhULEtBQUs0VCxTQUFXMVUsRUFBU0EsRUFBUyxDQUFDLEVBQUdnQixHQUEyQjhTLEdBQzdEaFQsS0FBSzRULFNBQVM1UCxVQUNvQixtQkFBM0JoRSxLQUFLNFQsU0FBUzVQLFNBQ25CaEUsS0FBSzRULFNBQVM1UCxXQUNkc0osSUFBa0IsQ0FDcEIsSUFBSXBKLEVBQWlCaEYsRUFBU0EsRUFBUyxDQUFDLEVBQUdjLEtBQUs0VCxTQUFTMVAsZ0JBQWlCbEUsS0FBSzRULFNBQVMxUCxnQkFDeEZsRSxLQUFLNFQsU0FBVzFVLEVBQVNBLEVBQVMsQ0FBQyxFQUFHYyxLQUFLNFQsVUFBVzFQLEVBQzFELENBQ0osRUFDQTZPLEVBQWFuVCxVQUFVbVUsa0JBQW9CLFdBQ25DL1QsS0FBSzRULFNBQVN2UixvQkFDZHJDLEtBQUs0VCxTQUFTdFIsa0JBQW1CLEdBRWhDdEMsS0FBSzRULFNBQVNqUyxXQUNmM0IsS0FBSzRULFNBQVNoUyxjQUFlLEdBR2pDNUIsS0FBS2MsZUFBaUJkLEtBQUs0VCxTQUFTOVMsZUFHaENkLEtBQUs0VCxTQUFTaFEsVUFDZDVELEtBQUtjLGdCQUFpQixHQUVyQmQsS0FBSzRULFNBQVNoVCxZQUNmWixLQUFLNFQsU0FBU2hULFVBQVk0RSxTQUFTMkYsTUFHdkNuTCxLQUFLNFQsU0FBU2pSLFFBQVV5QyxLQUFLK0ksSUFBSW5PLEtBQUs0VCxTQUFTalIsUUFBUzNDLEtBQUs2VCxhQUFhblUsT0FDOUUsRUFDQXFULEVBQWFuVCxVQUFVb1UsS0FBTyxXQUMxQixJQUFJNUssRUFBUXBKLEtBQ1pBLEtBQUtrVSxrQkFBa0JsVSxLQUFLNlQsY0FDNUI3VCxLQUFLbVUsaUJBQ0xuVSxLQUFLd08sS0FBS3ZFLFFBQVFoSyxFQUFlLENBQzdCbVUsU0FBVXBVLE9BRVZBLEtBQUs0VCxTQUFTMVIsVUFDZGxDLEtBQUtrQyxXQUVUbVMsWUFBVyxXQUNQakwsRUFBTXpGLGFBQ055RixFQUFNMUYsY0FDTjBGLEVBQU1rTCxvQkFDVixHQUFHLElBQ0h0VSxLQUFLdVUsUUFDRHZVLEtBQUs0VCxTQUFTclIsWUFDZHZDLEtBQUt1QyxhQUVKdkMsS0FBSzRULFNBQVNoUSxTQUNmNUQsS0FBS3dVLHdCQUViLEVBQ0F6QixFQUFhblQsVUFBVTRVLHVCQUF5QixXQWtCNUMsSUFqQkEsSUFBSXBMLEVBQVFwSixLQUNSeVUsRUFBVSxTQUFVeFIsR0FDcEIsSUFBSStOLEVBQVUwRCxFQUFPdkQsTUFBTWxPLEdBQ3ZCMFIsRUFBV3BOLEVBQUl5SixHQUdmNEQsRUFBT2pRLEVBQVFLLGVBQ25CMlAsRUFDS3hOLEtBQUssYUFBY3lOLEdBQ25CdkwsR0FBRyx1QkFBeUJ1TCxHQUFNLFNBQVUzTixHQUM3Q0EsRUFBRTROLGlCQUNGLElBQUlDLEVBQW1CMUwsRUFBTXdLLFNBQVMzUSxPQUFTQSxFQUMvQ21HLEVBQU0yTCxZQUFZRCxFQUFrQjlELEVBQ3hDLEdBQ0osRUFDSTBELEVBQVMxVSxLQUVKaUQsRUFBUSxFQUFHQSxFQUFRakQsS0FBS21SLE1BQU16UixPQUFRdUQsSUFDM0N3UixFQUFReFIsRUFFaEIsRUFPQThQLEVBQWFuVCxVQUFVK1QsYUFBZSxXQUNsQyxJQUFJdkssRUFBUXBKLEtBQ1pBLEtBQUs0VCxTQUFTelAsUUFBUTJCLFNBQVEsU0FBVWtQLEdBQ3BDNUwsRUFBTWpGLFFBQVF3RixLQUFLLElBQUlxTCxFQUFPNUwsRUFBTzdCLEdBQ3pDLEdBQ0osRUFDQXdMLEVBQWFuVCxVQUFVcVUsZ0JBQWtCLFdBQ2hDalUsS0FBSzRULFNBQVN0VCxXQUdtQix1QkFBN0JOLEtBQUs0VCxTQUFTdFQsWUFDbkJvUyxRQUFRdUMsS0FBSyxpQkFBbUJqVixLQUFLNFQsU0FBU3RULFdBQWEsZ0RBSDNEb1MsUUFBUUMsTUFBTSxxQ0FLdEIsRUFDQUksRUFBYW5ULFVBQVVzVixhQUFlLFNBQVVqUyxHQUM1QyxPQUFPc0UsRUFBSXZILEtBQUttVixlQUFlbFMsR0FDbkMsRUFDQThQLEVBQWFuVCxVQUFVdVYsZUFBaUIsU0FBVWxTLEdBQzlDLE1BQU8sWUFBY2pELEtBQUs4UyxLQUFPLElBQU03UCxDQUMzQyxFQUNBOFAsRUFBYW5ULFVBQVV3VixVQUFZLFNBQVVDLEdBQ3pDLE9BQU9BLEVBQUssSUFBTXJWLEtBQUs4UyxJQUMzQixFQUNBQyxFQUFhblQsVUFBVTBWLGVBQWlCLFNBQVVELEdBQzlDLE9BQU85TixFQUFJLElBQU12SCxLQUFLb1YsVUFBVUMsR0FDcEMsRUFDQXRDLEVBQWFuVCxVQUFVMlYsMkJBQTZCLFdBQzVDdlYsS0FBSzZULGFBQWFuVSxPQUFTLEVBQzNCTSxLQUFLd1YsTUFBTS9VLFNBQVMsa0JBR3BCVCxLQUFLd1YsTUFBTTVNLFlBQVksaUJBRS9CLEVBQ0FtSyxFQUFhblQsVUFBVXVVLGVBQWlCLFdBQ3BDLElBQUkvSyxFQUFRcEosS0FFWixLQURnQkEsS0FBS3lWLFlBQWN6VixLQUFLeVYsV0FBVzdOLE9BQ25ELENBR0EsSUFBSXhGLEVBQVcsR0FDWHNULEVBQWMsR0FFZDFWLEtBQUs0VCxTQUFTeFIsV0FDZEEsRUFBVyw2QkFBa0NwQyxLQUFLb1YsVUFBVSxXQUFhLGlCQUFxQnBWLEtBQUs0VCxTQUFTeFAsUUFBdUIsY0FBSSw4QkFBbUNwRSxLQUFLNFQsU0FBUzVRLFNBQVcseURBQThEaEQsS0FBS29WLFVBQVUsV0FBYSxpQkFBcUJwVixLQUFLNFQsU0FBU3hQLFFBQW1CLFVBQUksOEJBQW1DcEUsS0FBSzRULFNBQVM3USxTQUFXLGNBRWpYLGFBQWxDL0MsS0FBSzRULFNBQVNuUixrQkFDZGlULEVBQ0ksb0VBRVIsSUFBSUMsRUFBYSxHQUNiM1YsS0FBSzRULFNBQVN6UyxvQkFFZHdVLEdBQWMscUJBRWxCLElBQUlwVSxFQUFpQnZCLEtBQUs0VCxTQUFTclMsZUFDN0Isb0JBQXNCdkIsS0FBSzRULFNBQVNyUyxlQUFpQixJQUNyRCxHQUNGQyxFQUFrQnhCLEtBQUs0VCxTQUFTcFMsZ0JBQzlCLHFCQUF1QnhCLEtBQUs0VCxTQUFTcFMsZ0JBQWtCLElBQ3ZELEdBQ0ZvVSxFQUFxQixnQkFBa0I1VixLQUFLNFQsU0FBU25ULFNBQVcsS0FBTytFLFNBQVMyRixPQUFTbkwsS0FBSzRULFNBQVNoVCxVQUFZLFlBQWMsSUFDaklpVixFQUFZN1YsS0FBSzRULFNBQVNqUyxVQUFZM0IsS0FBSzRULFNBQVM5UixjQUNsRCxxQ0FBMEM5QixLQUFLNFQsU0FBU3hQLFFBQXNCLGFBQUksU0FBYXBFLEtBQUtvVixVQUFVLFlBQWMsdUNBQzVILEdBQ0ZVLEVBQWU5VixLQUFLNFQsU0FBUzdSLGlCQUMzQixxQ0FBMEMvQixLQUFLNFQsU0FBU3hQLFFBQXdCLGVBQUksU0FBYXBFLEtBQUtvVixVQUFVLGVBQWlCLDBDQUNqSSxHQUNGVyxFQUFXLHlCQUE0QkgsRUFBcUIsU0FBYTVWLEtBQUtvVixVQUFVLGdCQUFrQixxQ0FBNEM3VCxFQUFpQixJQUFNQyxFQUFrQixtREFBd0R4QixLQUFLb1YsVUFBVSxlQUFpQix3REFBOERwVixLQUFLb1YsVUFBVSxZQUFjLHVEQUEyRE8sRUFBYSxpQ0FBcUMzVixLQUFLb1YsVUFBVSxjQUFnQixtREFBeURwVixLQUFLb1YsVUFBVSxZQUFjLGdFQUFxRWhULEVBQVcsb0RBQXVEcEMsS0FBS29WLFVBQVUsY0FBZ0IsdURBQTREVSxFQUFlLHlCQUEyQkQsRUFBWSxzREFBMEYsY0FBbEM3VixLQUFLNFQsU0FBU25SLGdCQUNoN0JpVCxFQUNBLElBQU0sOEJBQWlDMVYsS0FBS29WLFVBQVUsaUJBQW1CLGtEQUF5RixpQkFBbENwVixLQUFLNFQsU0FBU25SLGdCQUM5SWlULEVBQ0EsSUFBTSx5RUFDWm5PLEVBQUl2SCxLQUFLNFQsU0FBU2hULFdBQVdrSyxPQUFPaUwsR0FDaEN2USxTQUFTMkYsT0FBU25MLEtBQUs0VCxTQUFTaFQsV0FDaEMyRyxFQUFJdkgsS0FBSzRULFNBQVNoVCxXQUFXdUksSUFBSSxXQUFZLFlBRWpEbkosS0FBS3dWLE1BQVF4VixLQUFLc1YsZUFBZSxZQUNqQ3RWLEtBQUtnVyxjQUFnQmhXLEtBQUtzVixlQUFlLGlCQUN6Q3RWLEtBQUtpVyxVQUFZalcsS0FBS3NWLGVBQWUsZUFDckN0VixLQUFLeVYsV0FBYXpWLEtBQUtzVixlQUFlLGdCQUN0Q3RWLEtBQUtrVyxPQUFTbFcsS0FBS3NWLGVBQWUsWUFDbEN0VixLQUFLbVcsU0FBV25XLEtBQUtzVixlQUFlLGNBQ3BDdFYsS0FBS29XLFNBQVdwVyxLQUFLc1YsZUFBZSxjQUNwQ3RWLEtBQUtpVyxVQUFVOU0sSUFBSSxzQkFBdUJuSixLQUFLNFQsU0FBU2pULGlCQUFtQixNQUMzRSxJQUFJMFYsRUFBa0JyVyxLQUFLNFQsU0FBU3pULEtBQU8sSUFDM0NILEtBQUt1Viw2QkFDRHZWLEtBQUs0VCxTQUFTalEsYUFDZDBTLEdBQW1CLFlBRXZCclcsS0FBS3dWLE1BQU0vVSxTQUFTNFYsR0FDcEJyVyxLQUFLa1csT0FBTy9NLElBQUksNkJBQThCbkosS0FBSzRULFNBQVN4VCxRQUM1REosS0FBS2tXLE9BQU8vTSxJQUFJLHNCQUF1Qm5KLEtBQUs0VCxTQUFTdlQsTUFBUSxNQUN6REwsS0FBSzRULFNBQVN0USxVQUNkdEQsS0FBS29XLFNBQVN0TCxPQUFPLFVBQWE5SyxLQUFLb1YsVUFBVSxlQUFpQixnREFBd0RwVixLQUFLNFQsU0FBU3hQLFFBQWtCLFNBQUksK0NBRWxLcEUsS0FBS3VELFVBQ0xnRSxFQUFJOEQsUUFBUWhDLEdBQUcsbUJBQXFCckosS0FBSzhTLEtBQU8sK0JBQWlDOVMsS0FBSzhTLE1BQU0sV0FDeEYxSixFQUFNa04saUJBQ1YsSUFDQXRXLEtBQUt1VyxXQUNMdlcsS0FBS3dXLHFCQUNMeFcsS0FBS3NFLGlCQUNMdEUsS0FBS3lXLGFBaEVMLENBaUVKLEVBQ0ExRCxFQUFhblQsVUFBVTBXLGdCQUFrQixXQUNyQyxHQUFJdFcsS0FBS2lULFNBQVUsQ0FDZixJQUNJeUQsRUFEcUIxVyxLQUFLNlQsYUFBYTdULEtBQUtpRCxPQUNOeVQsaUJBQzFDMVcsS0FBS3lULHVCQUF5QnpULEtBQUsyVyw0QkFDbkMsSUFBSUMsRUFBSzVXLEtBQUt5VCx1QkFBd0JvRCxFQUFRRCxFQUFHakwsSUFBSzJDLEVBQVNzSSxFQUFHdEksT0FLbEUsR0FKQXRPLEtBQUs4VyxpQkFBbUJ4SixFQUFjdE4sS0FBS21SLE1BQU1uUixLQUFLaUQsT0FBUWpELEtBQUt3VixNQUFPcUIsRUFBUXZJLEVBQVFvSSxHQUFvQjFXLEtBQUs0VCxTQUFTeFMsY0FDeEhzVixHQUNBMVcsS0FBSytXLGlCQUFpQi9XLEtBQUtpRCxNQUFPakQsS0FBSzhXLGtCQUV2QzlXLEtBQUtjLGlCQUFtQmQsS0FBS3VULG9CQUFxQixDQUNsRCxJQUFJeUQsRUFBV2hYLEtBQUtpWCxrQkFBa0JqWCxLQUFLOFcsa0JBQzNDOVcsS0FBS3dWLE1BQ0FsTyxLQUFLLDZCQUNMRSxRQUNBTCxLQUFLLFFBQVM2UCxFQUN2QixDQUNBaFgsS0FBS3dPLEtBQUt2RSxRQUFRaEssRUFDdEIsQ0FDSixFQUNBOFMsRUFBYW5ULFVBQVVtWCxpQkFBbUIsU0FBVTlULEVBQU9zTCxHQUN2RCxJQUFJMkksRUFBZWxYLEtBQUttWCxrQkFBa0I1SSxHQUN2QnZPLEtBQUtrVixhQUFhalMsR0FDeEJxRSxLQUFLLGtCQUFrQkgsS0FBSyxRQUFTK1AsRUFDdEQsRUEyQ0FuRSxFQUFhblQsVUFBVXdYLGFBQWUsU0FBVWpHLEVBQU9sTyxHQU9uRCxHQU5JakQsS0FBS2lELE1BQVFrTyxFQUFNelIsT0FBUyxJQUM1Qk0sS0FBS2lELE1BQVFrTyxFQUFNelIsT0FBUyxHQUVYLElBQWpCeVIsRUFBTXpSLFNBQ05NLEtBQUtpRCxNQUFRLEdBRVprTyxFQUFNelIsT0FBWCxDQUlBLElBQUkyWCxFQUFhclgsS0FBSzZULGFBQWE1USxHQUFPaU0sSUFDMUNsUCxLQUFLNlQsYUFBZTFDLEVBQ3BCblIsS0FBS3NYLGlCQUNMdFgsS0FBS2tXLE9BQU9qTCxRQUNaakwsS0FBS29ULGtCQUFvQixHQUN6QixJQUFJbUUsRUFBUyxFQUVidlgsS0FBSzZULGFBQWEyRCxNQUFLLFNBQVVDLEVBQWFDLEdBQzFDLE9BQUlELEVBQVl2SSxNQUFRbUksSUFDcEJFLEVBQVNHLEdBQ0YsRUFHZixJQUNBMVgsS0FBS29ULGtCQUFvQnBULEtBQUsyWCxtQkFBbUJKLEdBQVMsR0FDMUR2WCxLQUFLNFgsWUFBWUwsR0FBUSxHQUN6QnZYLEtBQUtrVixhQUFhcUMsR0FBUTlXLFNBQVMsY0FDbkNULEtBQUtpRCxNQUFRc1UsRUFDYnZYLEtBQUs2WCxxQkFBcUJOLEdBQzFCdlgsS0FBS3dPLEtBQUt2RSxRQUFRaEssRUFwQmxCLE1BRklELEtBQUtxRSxjQXVCYixFQUVBME8sRUFBYW5ULFVBQVVrVSxTQUFXLFdBRzlCLEdBREE5VCxLQUFLbVIsTUFBUSxHQUNSblIsS0FBSzRULFNBQVNoUSxRQTBCZixPQUFPNUQsS0FBSzRULFNBQVMvUCxXQUFhLEdBekJsQyxHQUErQixTQUEzQjdELEtBQUs0VCxTQUFTL1EsU0FDZDdDLEtBQUttUixNQUFNeEgsS0FBSzNKLEtBQUtnRyxTQUVwQixHQUFJaEcsS0FBSzRULFNBQVMvUSxTQUNuQixHQUFzQyxpQkFBM0I3QyxLQUFLNFQsU0FBUy9RLFNBQ3JCLEdBQUk3QyxLQUFLNFQsU0FBUzlRLGFBQWMsQ0FDNUIsSUFBSUEsRUFBZXlFLEVBQUl2SCxLQUFLNFQsU0FBUzlRLGNBQ3JDOUMsS0FBS21SLE1BQVFyTyxFQUNSd0UsS0FBS3RILEtBQUs0VCxTQUFTL1EsVUFDbkIrRSxLQUNULE1BRUk1SCxLQUFLbVIsTUFBUW5SLEtBQUtnRyxHQUFHTCxpQkFBaUIzRixLQUFLNFQsU0FBUy9RLGVBSXhEN0MsS0FBS21SLE1BQVFuUixLQUFLNFQsU0FBUy9RLGNBSS9CN0MsS0FBS21SLE1BQVFuUixLQUFLZ0csR0FBRzhSLFNBRXpCLE9BQU94SyxFQUF3QnROLEtBQUttUixNQUFPblIsS0FBSzRULFNBQVM5UCxXQUFZOUQsS0FBSzRULFNBQVNwUix5QkFBMEJ4QyxLQUFLNFQsU0FBUzdQLGFBS25JLEVBQ0FnUCxFQUFhblQsVUFBVW1ZLG9CQUFzQixXQUN6QyxPQUFRL1gsS0FBSzRULFNBQVNsUyxlQUNsQjhELFNBQVMyRixPQUFTbkwsS0FBSzRULFNBQVNoVCxTQUN4QyxFQUNBbVMsRUFBYW5ULFVBQVU4QixjQUFnQixXQUNuQyxHQUFLMUIsS0FBSytYLHNCQUFWLENBR0EvWCxLQUFLc1QsaUJBQW1CdEgsV0FBV3pFLEVBQUksUUFBUWhCLFFBQVE4RixjQUN2RCxJQUFJMkwsRUFBV3hTLFNBQVM0RixnQkFBZ0JTLHdCQUNwQ29NLEVBQWlCNU0sT0FBT3VDLFdBQWFvSyxFQUFTeFgsTUFDbEQrRyxFQUFJL0IsU0FBUzJGLE1BQU1oQyxJQUFJLGdCQUFpQjhPLEVBQWlCalksS0FBS3NULGlCQUFtQixNQUNqRi9MLEVBQUkvQixTQUFTMkYsTUFBTTFLLFNBQVMsa0JBTDVCLENBTUosRUFDQXNTLEVBQWFuVCxVQUFVc1ksZUFBaUIsV0FDL0JsWSxLQUFLK1gsd0JBR1Z4USxFQUFJL0IsU0FBUzJGLE1BQU1oQyxJQUFJLGdCQUFpQm5KLEtBQUtzVCxpQkFBbUIsTUFDaEUvTCxFQUFJL0IsU0FBUzJGLE1BQU12QyxZQUFZLG1CQUNuQyxFQTZCQW1LLEVBQWFuVCxVQUFVbVYsWUFBYyxTQUFVOVIsRUFBTytOLEdBQ2xELElBQUk1SCxFQUFRcEosS0FHWixRQUZjLElBQVZpRCxJQUFvQkEsRUFBUWpELEtBQUs0VCxTQUFTM1EsUUFFMUNqRCxLQUFLaVQsU0FBVCxDQUVBalQsS0FBS2lULFVBQVcsRUFDaEJqVCxLQUFLd1YsTUFBTTVNLFlBQVksaUJBQ3ZCNUksS0FBSzBCLGdCQUVMMUIsS0FBS3lWLFdBQVdoVixTQUFTLFdBQ3pCLElBQUkwWCxFQUF5Qm5ZLEtBQUtvWSwwQkFBMEJuVixFQUFPQSxHQUNuRWpELEtBQUtvVCxrQkFBb0IrRSxFQUN6QixJQUFJaEgsRUFBUSxHQUNaZ0gsRUFBdUJyUyxTQUFRLFNBQVU2TCxHQUNyQ1IsRUFBUUEsRUFBUyxZQUFlUSxFQUFPLDBCQUMzQyxJQUNBM1IsS0FBS2tXLE9BQU9wTCxPQUFPcUcsR0FDbkJuUixLQUFLcVksUUFBUXBWLEdBQ2IsSUFBSXFWLEVBQVksR0FDaEJ0WSxLQUFLeVQsdUJBQXlCelQsS0FBSzJXLDRCQUNuQyxJQUFJQyxFQUFLNVcsS0FBS3lULHVCQUF3QjlILEVBQU1pTCxFQUFHakwsSUFBSzJDLEVBQVNzSSxFQUFHdEksT0FDM0R0TyxLQUFLNFQsU0FBU3pTLG1CQUNmbkIsS0FBS3VZLDBCQUEwQjVNLEVBQUsyQyxHQUV4QyxJQUFJb0ksRUFBbUIxVyxLQUFLNlQsYUFBYTVRLEdBQU95VCxpQkFDNUMxVyxLQUFLYyxnQkFBa0JrUSxJQUN2QmhSLEtBQUs4VyxpQkFBbUJ4SixFQUFjMEQsRUFBU2hSLEtBQUt3VixNQUFPN0osRUFBTTJDLEVBQVFvSSxHQUFvQjFXLEtBQUs0VCxTQUFTeFMsY0FDM0drWCxFQUFZaEwsRUFBbUIwRCxFQUFTaFIsS0FBS3dWLE1BQU83SixFQUFLMkMsRUFBUXRPLEtBQUs4VyxtQkFFckU5VyxLQUFLYyxnQkFBbUJ3WCxJQUN6QnRZLEtBQUt3VixNQUFNL1UsU0FBU1QsS0FBSzRULFNBQVNsVCxZQUNsQ1YsS0FBS2tWLGFBQWFqUyxHQUFPMkYsWUFBWSxnQkFFekMsSUFBSTRQLEVBQVV4WSxLQUFLNFQsU0FBUzlTLGVBQ3RCLElBQ0FkLEtBQUs0VCxTQUFTalQsaUJBQ3BCMFQsWUFBVyxXQUNQakwsRUFBTW9NLE1BQU0vVSxTQUFTLHFCQUN6QixHQUFHK1gsR0FDSHhZLEtBQUtpRCxNQUFRQSxFQUNiakQsS0FBS3dPLEtBQUt2RSxRQUFRaEssR0FFbEJELEtBQUtrVixhQUFhalMsR0FBT3hDLFNBQVMsY0FDbENULEtBQUtrVCxZQUFhLEVBRWxCbFQsS0FBS3FULGNBQWdCOUwsRUFBSThELFFBQVFILFlBQ2pDbUosWUFBVyxXQUdQLEdBQUlqTCxFQUFNdEksZ0JBQWtCd1gsRUFBVyxDQUNuQyxJQUFJRyxFQUFpQnJQLEVBQU04TCxhQUFhalMsR0FDeEN3VixFQUFldFAsSUFBSSxZQUFhbVAsR0FDaENqRSxZQUFXLFdBQ1BvRSxFQUNLaFksU0FBUywyQ0FDVDBJLElBQUksc0JBQXVCQyxFQUFNd0ssU0FBUy9TLHVCQUF5QixNQUN4RXVJLEVBQU1vTSxNQUFNL1UsU0FBUyxxQkFDekIsSUFDQTRULFlBQVcsV0FDUG9FLEVBQWV0UCxJQUFJLFlBQWEsdUJBQ3BDLEdBQUcsSUFDUCxDQUNBa0wsWUFBVyxXQUNQakwsRUFBTTZNLFVBQVV4VixTQUFTLE1BQ3pCMkksRUFBTXFNLFdBQVdoVixTQUFTLGFBQzlCLEdBQUcsSUFDSDRULFlBQVcsV0FDSGpMLEVBQU13SyxTQUFTelIsV0FDZnFELFNBQVMyRixPQUFTL0IsRUFBTXdLLFNBQVNoVCxXQUNqQ3dJLEVBQU1qSCxXQUVkLEdBQUdpSCxFQUFNd0ssU0FBU2pULGlCQUFtQixJQUVoQ3lJLEVBQU10SSxnQkFBbUJ3WCxHQUMxQmpFLFlBQVcsV0FDUGpMLEVBQU1vTSxNQUFNL1UsU0FBUyxhQUN6QixHQUFHMkksRUFBTXdLLFNBQVNqVCxrQkFHdEJ5SSxFQUFNc1AsTUFBTXpWLEdBQU8sR0FBTyxHQUFPLEdBQ2pDbUcsRUFBTW9GLEtBQUt2RSxRQUFRaEssRUFDdkIsSUFDSXVGLFNBQVMyRixPQUFTbkwsS0FBSzRULFNBQVNoVCxXQUNoQzJHLEVBQUksUUFBUTlHLFNBQVMsUUEvRWYsQ0FpRmQsRUFPQXNTLEVBQWFuVCxVQUFVK1csMEJBQTRCLFdBQy9DLEdBQUkzVyxLQUFLNFQsU0FBU3pTLGtCQUNkLE1BQU8sQ0FDSHdLLElBQUssRUFDTDJDLE9BQVEsR0FHaEIsSUFBSTNDLEVBQU0zTCxLQUFLb1csU0FBU3hPLE1BQU0wRSxjQUFnQixFQUMxQzhGLEVBQVVwUyxLQUFLd1YsTUFBTWxPLEtBQUssK0JBQStCTSxNQUN6RCtRLEVBQWdCM1ksS0FBSzRULFNBQVN0UyxzQkFDN0I4USxHQUFXQSxFQUFROUYsY0FDcEIsRUFDQXNNLEVBQWlCNVksS0FBS3dWLE1BQU1sTyxLQUFLLG1CQUFtQk0sTUFHeEQsTUFBTyxDQUNIK0QsSUFBS0EsRUFDTDJDLFFBSmNzSyxFQUFpQkEsRUFBZXRNLGFBQWUsR0FDdENxTSxFQUsvQixFQUNBNUYsRUFBYW5ULFVBQVUyWSwwQkFBNEIsU0FBVTVNLEVBQUsyQyxRQUNsRCxJQUFSM0MsSUFBa0JBLEVBQU0sUUFDYixJQUFYMkMsSUFBcUJBLEVBQVMsR0FDbEN0TyxLQUFLbVcsU0FBU2hOLElBQUksTUFBT3dDLEVBQU0sTUFBTXhDLElBQUksU0FBVW1GLEVBQVMsS0FDaEUsRUFDQXlFLEVBQWFuVCxVQUFVMlcsU0FBVyxXQUM5QixJQUFJbk4sRUFBUXBKLEtBRVpxVSxZQUFXLFdBQ1BqTCxFQUFNb00sTUFBTTVNLFlBQVksaUJBQ3BCUSxFQUFNd0ssU0FBUzdTLGNBQWdCLElBQy9CcUksRUFBTW9NLE1BQU1uTSxHQUFHLHVDQUF1QyxXQUNsREQsRUFBTW9NLE1BQU01TSxZQUFZLGlCQUN4QmlRLGFBQWF6UCxFQUFNMFAsZ0JBRW5CMVAsRUFBTTBQLGVBQWlCekUsWUFBVyxXQUM5QmpMLEVBQU1vTSxNQUFNL1UsU0FBUyxnQkFDekIsR0FBRzJJLEVBQU13SyxTQUFTN1MsY0FDdEIsSUFDQXFJLEVBQU1vTSxNQUFNdkwsUUFBUSxnQkFFNUIsR0FBR2pLLEtBQUs0VCxTQUFTNVMsY0FDckIsRUFDQStSLEVBQWFuVCxVQUFVbVosZ0JBQWtCLFNBQVVDLEdBQy9DLEdBQUloWixLQUFLNFQsU0FBUzFTLHFCQUNkLElBQ0krWCxZQUFZLENBQ1JsSSxTQUFVLENBQUNpSSxFQUFLcFIsUUFFeEIsQ0FDQSxNQUFPWCxHQUNIeUwsUUFBUXVDLEtBQUsscUpBQ2pCLENBRVIsRUFLQWxDLEVBQWFuVCxVQUFVMkQsUUFBVSxXQUM3QixHQUFJdkQsS0FBSzRULFNBQVNyUSxRQUFTLENBQ3ZCLElBQUkyVixFQUFjLHdGQUFpR2xaLEtBQUtvVixVQUFVLHNCQUF3QixpQ0FBc0NwVixLQUFLaUQsTUFBUSxHQUFLLHlDQUE0Q2pELEtBQUtvVixVQUFVLGtCQUFvQiw0QkFBaUNwVixLQUFLNlQsYUFBYW5VLE9BQVMsaUJBQzdWTSxLQUFLd1YsTUFBTWxPLEtBQUt0SCxLQUFLNFQsU0FBU3BRLGlCQUFpQnNILE9BQU9vTyxFQUMxRCxDQUNKLEVBS0FuRyxFQUFhblQsVUFBVXlZLFFBQVUsU0FBVXBWLEdBQ3ZDLElBQUltUCxFQUNBK0csRUFPSixHQU5JblosS0FBSzZULGFBQWE1USxHQUFPa1csV0FDekJBLEVBQWFuWixLQUFLNlQsYUFBYTVRLEdBQU9rVyxXQUd0Qy9HLEVBQVVwUyxLQUFLNlQsYUFBYTVRLEdBQU9tUCxTQUVsQytHLEVBQ0QsR0FBSS9HLEVBQVMsQ0FHVCxJQUFJZ0gsRUFBS2hILEVBQVEzTSxVQUFVLEVBQUcsR0FDbkIsTUFBUDJULEdBQXFCLE1BQVBBLElBR1ZoSCxFQUZBcFMsS0FBSzRULFNBQVNsUiwwQkFDYjFDLEtBQUs0VCxTQUFTaFEsUUFDTDJELEVBQUl2SCxLQUFLbVIsT0FDZDFKLEdBQUd4RSxHQUNIcUUsS0FBSzhLLEdBQ0w1SyxRQUNBb0QsT0FHS3JELEVBQUk2SyxHQUFTNUssUUFBUW9ELE9BRzNDLE1BRUl3SCxFQUFVLEdBR2xCLEdBQXNDLGFBQWxDcFMsS0FBSzRULFNBQVNuUixnQkFDVjBXLEVBQ0FuWixLQUFLd1YsTUFBTWxPLEtBQUssZ0JBQWdCZ0QsS0FBSzZPLEdBR3JDblosS0FBS3dWLE1BQU1sTyxLQUFLLGdCQUFnQnNELEtBQUt3SCxPQUd4QyxDQUNELElBQUlpSCxFQUFlOVIsRUFBSXZILEtBQUttVixlQUFlbFMsSUFDdkNrVyxFQUNBRSxFQUFhL08sS0FBSzZPLEdBR2xCRSxFQUFhdk8sT0FBTyw0QkFBZ0NzSCxFQUFVLFNBRXRFLENBRUksTUFBT0EsSUFDUyxLQUFaQSxFQUNBcFMsS0FBS3dWLE1BQ0FsTyxLQUFLdEgsS0FBSzRULFNBQVNuUixpQkFDbkJoQyxTQUFTLGlCQUdkVCxLQUFLd1YsTUFDQWxPLEtBQUt0SCxLQUFLNFQsU0FBU25SLGlCQUNuQm1HLFlBQVksa0JBR3pCNUksS0FBS3dPLEtBQUt2RSxRQUFRaEssRUFBNkIsQ0FDM0NnRCxNQUFPQSxHQUVmLEVBTUE4UCxFQUFhblQsVUFBVStDLFFBQVUsU0FBVU0sR0FDdkMsSUFBSyxJQUFJMUQsRUFBSSxFQUFHQSxHQUFLUyxLQUFLNFQsU0FBU2pSLFdBQzNCcEQsR0FBS1MsS0FBSzZULGFBQWFuVSxPQUFTdUQsR0FESTFELElBSXhDUyxLQUFLNFgsWUFBWTNVLEVBQVExRCxHQUFHLEdBRWhDLElBQUssSUFBSTZRLEVBQUksRUFBR0EsR0FBS3BRLEtBQUs0VCxTQUFTalIsV0FDM0JNLEVBQVFtTixFQUFJLEdBRHdCQSxJQUl4Q3BRLEtBQUs0WCxZQUFZM1UsRUFBUW1OLEdBQUcsRUFFcEMsRUFDQTJDLEVBQWFuVCxVQUFVcVgsa0JBQW9CLFNBQVUxSSxHQUNqRCxPQUFLQSxFQUVFLFNBQVdBLEVBQVUvTixNQUFRLHNDQUF3QytOLEVBQVUvTixNQUFRLEVBQUkscUNBQXVDK04sRUFBVWhPLE9BQVMsRUFBSSwrQkFBaUNnTyxFQUFVaE8sT0FBUyxLQUR6TSxFQUVmLEVBQ0F3UyxFQUFhblQsVUFBVXVYLGtCQUFvQixTQUFVNUksR0FDakQsT0FBS0EsRUFFRSxTQUFXQSxFQUFVL04sTUFBUSwrQkFBaUMrTixFQUFVaE8sT0FBUyxLQUQ3RSxFQUVmLEVBQ0F3UyxFQUFhblQsVUFBVTBaLHFCQUF1QixTQUFVQyxFQUFldFcsRUFBT2dQLEdBQzFFLElBQUl1SCxFQUlKLEdBSEt4WixLQUFLNFQsU0FBU2hRLFVBQ2Y0VixFQUFlalMsRUFBSXZILEtBQUttUixPQUFPMUosR0FBR3hFLElBRWxDdVcsRUFBYyxDQUNkLElBQUlDLE9BQWUsRUFPbkIsS0FGSUEsRUFKQ3paLEtBQUs0VCxTQUFTN1AsYUFJQXlWLEVBQWFyUyxLQUFLbkgsS0FBSzRULFNBQVM3UCxjQUhoQ3lWLEVBQWFsUyxLQUFLLE9BQU9FLFFBQVFMLEtBQUssUUFNckQsTUFBTyxHQUNYLElBQ0l1UyxFQUFrQixRQUFVekgsRUFBTSxXQUR2QmpTLEtBQUtpWCxrQkFBa0JqWCxLQUFLOFcsa0JBQ29CLCtCQUFxQzJDLEVBQWUsT0FHbkgsT0FGQUYsRUFBYzlZLFNBQVMsa0JBQ3ZCVCxLQUFLd1YsTUFBTS9VLFNBQVMsMEJBQ2JpWixDQUNYLENBQ0EsTUFBTyxFQUNYLEVBQ0EzRyxFQUFhblQsVUFBVStaLGFBQWUsU0FBVXpLLEVBQUtxSyxFQUFldFcsR0FDaEUsSUFBSTJXLEVBQXFCNVosS0FBSzZULGFBQWE1USxHQUN2Q2dQLEVBQU0ySCxFQUFtQjNILElBQUs1QyxFQUFTdUssRUFBbUJ2SyxPQUFRQyxFQUFRc0ssRUFBbUJ0SyxNQUFPQyxFQUFVcUssRUFBbUJySyxRQUlqSUgsRUFBVTZDLEVBQU0sUUFBVUEsRUFBTSxJQUFNLEdBT3RDekMsRUFBWSxrQ0FOWnhQLEtBQUs2WixnQ0FDUTdaLEtBQUtzWixxQkFBcUJDLEVBQWV0VyxFQUFPbU0sR0FHaEQ5QixFQUFtQnJLLEVBQU9pTSxFQUFLRSxFQUFTQyxFQUFRQyxFQUFPQyxJQUVOLGFBQ2xFZ0ssRUFBY3ZPLFFBQVF3RSxFQUMxQixFQUNBdUQsRUFBYW5ULFVBQVVrYSxrQkFBb0IsU0FBVUMsRUFBUUMsRUFBMkJDLEVBQVFDLEdBQzVGLElBQUlDLEVBQWNKLEVBQU96UyxLQUFLLGNBQWNFLFFBQ3hDOEYsRUFBb0I2TSxFQUFZdlMsUUFDaENvUyxFQUNBQyxLQUdBRSxFQUFZOVEsR0FBRyxvQkFBb0IsV0FDL0I0USxHQUFVQSxHQUNkLElBQ0FFLEVBQVk5USxHQUFHLFlBQVksV0FDdkI2USxHQUFXQSxHQUNmLElBRVIsRUFTQW5ILEVBQWFuVCxVQUFVd2EsZUFBaUIsU0FBVWYsRUFBY3BXLEVBQU9vWCxFQUFPaGEsRUFBT2lhLEVBQWNOLEdBQy9GLElBQUk1USxFQUFRcEosS0FDWkEsS0FBSzhaLGtCQUFrQlQsRUFBY1csR0FBMkIsV0FDNUQ1USxFQUFNbVIscUJBQXFCbEIsRUFBY3BXLEVBQU9vWCxFQUFPaGEsRUFBT2lhLEVBQ2xFLElBQUcsV0FDQ2pCLEVBQWE1WSxTQUFTLDRCQUN0QjRZLEVBQWF6TyxLQUFLLDhCQUNkeEIsRUFBTXdLLFNBQVN4UCxRQUE0QixtQkFDM0MsVUFDUixHQUNKLEVBQ0EyTyxFQUFhblQsVUFBVTJhLHFCQUF1QixTQUFVaEIsRUFBZXRXLEVBQU9vWCxFQUFPaGEsRUFBT2lhLEdBQ3hGLElBQUlsUixFQUFRcEosS0FDUjRaLEVBQXFCNVosS0FBSzZULGFBQWE1USxHQUd2Q3VYLEVBQVNGLEdBQ2lDLFVBQTFDdGEsS0FBS3lhLGFBQWFiLEtBQ2pCQSxFQUFtQmMsT0FDbEJyYSxFQUNBLEVBQ05nVSxZQUFXLFdBQ1BrRixFQUFjOVksU0FBUyw0QkFDdkIySSxFQUFNb0YsS0FBS3ZFLFFBQVFoSyxFQUF3QixDQUN2Q2dELE1BQU9BLEVBQ1BvWCxNQUFPQSxHQUFTLEVBQ2hCQyxhQUFjQSxHQUV0QixHQUFHRSxFQUNQLEVBQ0F6SCxFQUFhblQsVUFBVWlhLDhCQUFnQyxXQUNuRCxRQUFXN1osS0FBS2tULGFBQ1psVCxLQUFLYyxpQkFDTGQsS0FBSzhXLGlCQUNiLEVBRUEvRCxFQUFhblQsVUFBVXNVLGtCQUFvQixTQUFVL0MsR0FDakQsSUFBSS9ILEVBQVFwSixLQUNabVIsRUFBTXJMLFNBQVEsU0FBVWtMLEVBQVMvTixHQUM3QitOLEVBQVEwRixpQkFBbUJwSixFQUFjMEQsRUFBUTlCLE1BQU84QixFQUFRMkosTUFBTzFYLEdBQ25FK04sRUFBUTBGLGtCQUNSdE4sRUFBTXdLLFNBQVN2UyxvQkFDZDJQLEVBQVEwSixRQUNUMUosRUFBUTBGLGlCQUFpQjdGLFVBQ3pCRyxFQUFRMEosT0FBUyx3QkFBMEIxSixFQUFRMEYsaUJBQWlCN0YsUUFBUSxHQUFLLHFCQUV6RixHQUNKLEVBT0FrQyxFQUFhblQsVUFBVWdZLFlBQWMsU0FBVTNVLEVBQU8yWCxHQUNsRCxJQUFJeFIsRUFBUXBKLEtBQ1I0WixFQUFxQjVaLEtBQUs2VCxhQUFhNVEsR0FDdkNzVyxFQUFnQmhTLEVBQUl2SCxLQUFLbVYsZUFBZWxTLElBQ3hDeVgsRUFBU2QsRUFBbUJjLE9BQVFyTCxFQUFTdUssRUFBbUJ2SyxPQUFRQyxFQUFRc0ssRUFBbUJ0SyxNQUFPQyxFQUFVcUssRUFBbUJySyxRQUN2SUwsRUFBTTBLLEVBQW1CMUssSUFDekJ5TCxFQUFRZixFQUFtQmUsTUFDM0JFLEVBQWNGLEdBQTBCLGlCQUFWQSxFQUFxQmpMLEtBQUtDLE1BQU1nTCxHQUFTQSxFQUMzRSxHQUFJZixFQUFtQmtCLFdBQVksQ0FDL0IsSUFBSUMsRUFBWW5CLEVBQW1Ca0IsV0FBVy9ULE1BQU0sS0FDcERtSSxFQUFNNUIsRUFBdUJ5TixJQUFjN0wsQ0FDL0MsQ0FDQSxJQUFJOEwsRUFBWXBCLEVBQW1CbEQsaUJBQy9CUSxFQUFlLEdBQ2YrRCxJQUFXckIsRUFBbUJxQixPQUM5QlgsR0FBZ0J0YSxLQUFLa1QsV0FFckJtSCxFQUFRLEVBU1osR0FSSUMsSUFFSUQsRUFEQXJhLEtBQUtjLGdCQUFrQmQsS0FBSzhXLGlCQUNwQjlXLEtBQUs0VCxTQUFTL1MsdUJBQXlCLEdBR3ZDYixLQUFLNFQsU0FBU2pULGlCQUFtQixLQUc1QzRZLEVBQWN6USxTQUFTLGFBQWMsQ0FDdEMsR0FBSWtTLEVBQVcsQ0FDWCxJQUFJcEUsRUFBSzVXLEtBQUt5VCx1QkFBd0J5SCxFQUFRdEUsRUFBR2pMLElBQUsyQyxFQUFTc0ksRUFBR3RJLE9BQzlENk0sRUFBWTdOLEVBQWN0TixLQUFLbVIsTUFBTWxPLEdBQVFqRCxLQUFLd1YsTUFBTzBGLEVBQVE1TSxFQUFRME0sR0FBYWhiLEtBQUs0VCxTQUFTeFMsY0FDeEc4VixFQUFlbFgsS0FBS21YLGtCQUFrQmdFLEVBQzFDLENBQ0EsR0FBSUYsRUFBUSxDQUNSLElBQUlHLEVBQVM5TixFQUFzQnROLEtBQUs0VCxTQUFTMVEsWUFBYWxELEtBQUs0VCxTQUFTelEsYUFBY25ELEtBQUs0VCxTQUFTeFEsZUFBZ0JwRCxLQUFLNFQsU0FBU3ZRLGdCQUFpQjZMLEVBQUswSyxFQUFtQnpLLGFBQy9Lb0ssRUFBY3ZPLFFBQVFvUSxFQUMxQixNQUNLLEdBQUlWLEVBQVEsQ0FDYixJQUFJakssRUFBVyxHQUNTNkosR0FDcEJ0YSxLQUFLYyxnQkFDTGQsS0FBSzhXLG1CQUVMckcsRUFBV3pRLEtBQUtzWixxQkFBcUJDLEVBQWV0VyxFQUFPLEtBRTNEbVksRUFBUzlOLEVBQTJCb04sRUFBUWpLLEdBQVksR0FBSXlHLEVBQWNsWCxLQUFLNFQsU0FBU3hQLFFBQW1CLFVBQUc0VyxHQUNsSHpCLEVBQWN2TyxRQUFRb1EsRUFDMUIsTUFDSyxHQUFJSixFQUFXLENBQ1pJLEVBQVMsc0NBQTJDbEUsRUFBZSxXQUN2RXFDLEVBQWN2TyxRQUFRb1EsRUFDMUIsTUFHSSxHQURBcGIsS0FBSzJaLGFBQWF6SyxFQUFLcUssRUFBZXRXLEdBQ2xDb00sR0FBVUUsRUFBUyxDQUNuQixJQUFJeUosRUFBT08sRUFBY2pTLEtBQUssY0FDOUJ0SCxLQUFLK1ksZ0JBQWdCQyxFQUN6QixFQUVBMEIsR0FBVU0sSUFDVmhiLEtBQUt3TyxLQUFLdkUsUUFBUWhLLEVBQW1CLENBQ2pDZ0QsTUFBT0EsRUFDUGlNLElBQUtBLEVBQ0xtTSxXQUFZUixFQUNaUyxZQUFhWixJQUdyQjFhLEtBQUt3TyxLQUFLdkUsUUFBUWhLLEVBQTJCLENBQUVnRCxNQUFPQSxJQUNsRGpELEtBQUtrVCxZQUM2QixhQUFsQ2xULEtBQUs0VCxTQUFTblIsaUJBQ2R6QyxLQUFLcVksUUFBUXBWLEVBRXJCLENBRUEsSUFBSXVYLEVBQVMsRUFHVEgsSUFBVTlTLEVBQUkvQixTQUFTMkYsTUFBTXJDLFNBQVMsa0JBQ3RDMFIsRUFBU0gsR0FHVHJhLEtBQUs2WixrQ0FDTHhGLFlBQVcsV0FDUGtGLEVBQ0szUSxZQUFZLDJDQUNaZixXQUFXLFFBQ3BCLEdBQUc3SCxLQUFLNFQsU0FBUy9TLHVCQUF5QixLQUNyQzBZLEVBQWN6USxTQUFTLGNBQ3hCdUwsWUFBVyxXQUNQLEdBQStDLFVBQTNDakwsRUFBTXFSLGFBQWFiLEdBQWlDLENBQ3BELElBQUkzSCxFQUFNMkgsRUFBbUIzSCxJQUN6QjdDLEVBQVU2QyxFQUFNLFFBQVVBLEVBQU0sSUFBTSxHQUkxQyxHQUhBc0gsRUFDS2pTLEtBQUssZ0JBQ0x3RCxPQUFPd0MsRUFBbUJySyxFQUFPaU0sRUFBS0UsRUFBU0MsRUFBUUMsRUFBT3NLLEVBQW1CckssVUFDbEZGLEdBQVVFLEVBQVMsQ0FDbkIsSUFBSXlKLEVBQU9PLEVBQWNqUyxLQUFLLGNBQzlCOEIsRUFBTTJQLGdCQUFnQkMsRUFDMUIsQ0FDSixFQUMrQyxVQUEzQzVQLEVBQU1xUixhQUFhYixJQUN5QixVQUEzQ3hRLEVBQU1xUixhQUFhYixJQUNoQmMsS0FDSnRSLEVBQU1nUixlQUFlYixFQUFldFcsRUFBT29YLEVBQU9HLEdBQVEsR0FBTSxHQUVoRXBSLEVBQU0wUSxrQkFBa0JQLEtBQWtCeUIsSUFBYUEsRUFBVXZJLE9BQVVpSSxJQUFTLFdBQ2hGdFIsRUFBTW1TLDRCQUE0QnRZLEVBQU9zVyxFQUFlaUIsRUFDNUQsSUFBRyxXQUNDcFIsRUFBTW1TLDRCQUE0QnRZLEVBQU9zVyxFQUFlaUIsRUFDNUQsSUFFUixHQUFHeGEsS0FBSzRULFNBQVMvUyx1QkFBeUIsTUFJbEQwWSxFQUFjOVksU0FBUyxhQUNsQlQsS0FBSzZaLGtDQUNxQyxVQUExQzdaLEtBQUt5YSxhQUFhYixJQUFvQ2MsSUFDdkQxYSxLQUFLb2EsZUFBZWIsRUFBZXRXLEVBQU9vWCxFQUFPRyxFQUFRRixLQUFpQlUsSUFBYUEsRUFBVXZJLE9BQVVpSSxJQUd6RzFhLEtBQUtjLGdCQUFtQmQsS0FBSzhXLG1CQUMvQnlDLEVBQWN6USxTQUFTLGlCQUN0QjlJLEtBQUtrVCxZQUNObUIsWUFBVyxXQUNQa0YsRUFBYzlZLFNBQVMsY0FDM0IsR0FBR1QsS0FBSzRULFNBQVNqVCxrQkFJckJYLEtBQUtrVCxZQUFhLEdBQ04sSUFBUjBILElBQ0tyQixFQUFjelEsU0FBUyxnQkFTeEI5SSxLQUFLMkMsUUFBUU0sR0FSYnNXLEVBQ0tqUyxLQUFLLGNBQ0xFLFFBQ0E2QixHQUFHLG9CQUFvQixXQUN4QkQsRUFBTXpHLFFBQVFNLEVBQ2xCLElBTVosRUFRQThQLEVBQWFuVCxVQUFVMmIsNEJBQThCLFNBQVV0WSxFQUFPc1csRUFBZWxaLEdBQ2pGLElBQUkrSSxFQUFRcEosS0FDWnFVLFlBQVcsV0FDUGtGLEVBQWNqUyxLQUFLLGlCQUFpQnVCLFNBQ3BDMFEsRUFBYzNRLFlBQVksa0JBQzFCUSxFQUFNb00sTUFBTTVNLFlBQVksMEJBQ3hCUSxFQUFNbUsscUJBQXNCLEVBQzVCbkssRUFBTXpHLFFBQVFNLEVBQ2xCLEdBQUc1QyxFQUFRLElBQ2YsRUFDQTBTLEVBQWFuVCxVQUFVd1ksMEJBQTRCLFNBQVVuVixFQUFPdVksRUFBV0MsR0FDM0UsSUFBSXJTLEVBQVFwSixVQUNVLElBQWxCeWIsSUFBNEJBLEVBQWdCLEdBQ2hELElBQUl0RCxFQUF5QixHQUV6QnVELEVBQXdCdFcsS0FBS3VXLElBQUlGLEVBQWUsR0FDcERDLEVBQXdCdFcsS0FBSytJLElBQUl1TixFQUF1QjFiLEtBQUs2VCxhQUFhblUsUUFDMUUsSUFBSWtjLEVBQWdCLFdBQWE1YixLQUFLOFMsS0FBTyxJQUFNMEksRUFDbkQsR0FBSXhiLEtBQUs2VCxhQUFhblUsUUFBVSxFQUk1QixPQUhBTSxLQUFLNlQsYUFBYS9OLFNBQVEsU0FBVStWLEVBQVU1WSxHQUMxQ2tWLEVBQXVCeE8sS0FBSyxXQUFhUCxFQUFNMEosS0FBTyxJQUFNN1AsRUFDaEUsSUFDT2tWLEVBRVgsR0FBSWxWLEdBQVNqRCxLQUFLNlQsYUFBYW5VLE9BQVMsR0FBSyxFQUFHLENBQzVDLElBQUssSUFBSW9jLEVBQU03WSxFQUFPNlksRUFBTTdZLEVBQVF5WSxFQUF3QixHQUFLSSxHQUFPLEVBQUdBLElBQ3ZFM0QsRUFBdUJ4TyxLQUFLLFdBQWEzSixLQUFLOFMsS0FBTyxJQUFNZ0osR0FFL0QsSUFBSUMsRUFBd0I1RCxFQUF1QnpZLE9BQ25ELElBQVNvYyxFQUFNLEVBQUdBLEVBQU1KLEVBQXdCSyxFQUF1QkQsSUFDbkUzRCxFQUF1QnhPLEtBQUssV0FBYTNKLEtBQUs4UyxLQUFPLEtBQU83UCxFQUFRNlksRUFBTSxHQUVsRixLQUNLLENBQ0QsSUFBU0EsRUFBTTdZLEVBQU82WSxHQUFPOWIsS0FBSzZULGFBQWFuVSxPQUFTLEdBQ3BEb2MsRUFBTTdZLEVBQVF5WSxFQUF3QixFQUFHSSxJQUN6QzNELEVBQXVCeE8sS0FBSyxXQUFhM0osS0FBSzhTLEtBQU8sSUFBTWdKLEdBRy9ELElBRElDLEVBQXdCNUQsRUFBdUJ6WSxPQUMxQ29jLEVBQU0sRUFBR0EsRUFBTUosRUFBd0JLLEVBQXVCRCxJQUNuRTNELEVBQXVCeE8sS0FBSyxXQUFhM0osS0FBSzhTLEtBQU8sS0FBTzdQLEVBQVE2WSxFQUFNLEdBRWxGLENBWUEsT0FYSTliLEtBQUs0VCxTQUFTNVIsT0FDVmlCLElBQVVqRCxLQUFLNlQsYUFBYW5VLE9BQVMsRUFDckN5WSxFQUF1QnhPLEtBQUssV0FBYTNKLEtBQUs4UyxLQUFsQixNQUViLElBQVY3UCxHQUNMa1YsRUFBdUJ4TyxLQUFLLFdBQWEzSixLQUFLOFMsS0FBTyxLQUFPOVMsS0FBSzZULGFBQWFuVSxPQUFTLE1BR3hDLElBQW5EeVksRUFBdUI3UixRQUFRc1YsSUFDL0J6RCxFQUF1QnhPLEtBQUssV0FBYTNKLEtBQUs4UyxLQUFPLElBQU0wSSxHQUV4RHJELENBQ1gsRUFDQXBGLEVBQWFuVCxVQUFVK1gsbUJBQXFCLFNBQVUxVSxFQUFPdVksR0FDekQsSUFBSXBTLEVBQVFwSixLQUNSbVksRUFBeUJuWSxLQUFLb1ksMEJBQTBCblYsRUFBT3VZLEVBQVd4YixLQUFLNFQsU0FBU2hSLHlCQVc1RixPQVZBdVYsRUFBdUJyUyxTQUFRLFNBQVU2TCxJQUNVLElBQTNDdkksRUFBTWdLLGtCQUFrQjlNLFFBQVFxTCxJQUNoQ3ZJLEVBQU04TSxPQUFPcEwsT0FBTyxZQUFlNkcsRUFBTywyQkFFbEQsSUFDQTNSLEtBQUtvVCxrQkFBa0J0TixTQUFRLFNBQVU2TCxJQUNTLElBQTFDd0csRUFBdUI3UixRQUFRcUwsSUFDL0JwSyxFQUFJLElBQU1vSyxHQUFNOUksUUFFeEIsSUFDT3NQLENBQ1gsRUFJQXBGLEVBQWFuVCxVQUFVb2Msc0JBQXdCLFdBQzNDLElBQUlSLEVBQVksRUFDaEIsSUFDSSxJQUFJUyxFQUFnQmpjLEtBQUt3VixNQUNwQmxPLEtBQUssZUFDTEUsUUFDQUwsS0FBSyxNQUNWcVUsRUFBWTFOLFNBQVNtTyxFQUFjbFYsTUFBTSxLQUFLLEtBQU8sQ0FDekQsQ0FDQSxNQUFPNEwsR0FDSDZJLEVBQVksQ0FDaEIsQ0FDQSxPQUFPQSxDQUNYLEVBQ0F6SSxFQUFhblQsVUFBVXNjLGlCQUFtQixTQUFValosR0FDaEQsR0FBSWpELEtBQUs0VCxTQUFTdFEsU0FBVSxDQUN4QixJQUFJc1csRUFBcUI1WixLQUFLNlQsYUFBYTVRLEdBRzNDLElBRnlELElBQW5DMlcsRUFBbUJ1QyxhQUNGLFVBQW5DdkMsRUFBbUJ1QyxZQUVuQm5jLEtBQUt3VixNQUFNL1UsU0FBUyx3QkFFbkIsQ0FDRCxJQUFJMmIsRUFBWXBjLEtBQUtzVixlQUFlLGVBQ3BDdFYsS0FBS3dWLE1BQU01TSxZQUFZLG9CQUN2QndULEVBQVVqVixLQUFLLE9BQVF5UyxFQUFtQnVDLGFBQ3RDdkMsRUFBbUIxSyxLQUNuQjBLLEVBQW1CdFcsVUFDbkI4WSxFQUFValYsS0FBSyxXQUFZeVMsRUFBbUJ0VyxTQUV0RCxDQUNKLENBQ0osRUFDQXlQLEVBQWFuVCxVQUFVeWMsbUJBQXFCLFNBQVVDLEVBQVdDLEVBQWtCQyxHQUMvRSxJQUFJcFQsRUFBUXBKLEtBQ1JBLEtBQUtrVCxZQUNMc0osRUFBa0IvYixTQUFTLHFCQUUvQjRULFlBQVcsV0FFUGpMLEVBQU1vTSxNQUFNL1UsU0FBUyxlQUNyQjJJLEVBQU1vTSxNQUNEbE8sS0FBSyxZQUNMc0IsWUFBWSwrQkFDQyxTQUFkMFQsR0FFQUMsRUFBaUI5YixTQUFTLGlCQUMxQitiLEVBQWtCL2IsU0FBUyxtQkFJM0I4YixFQUFpQjliLFNBQVMsaUJBQzFCK2IsRUFBa0IvYixTQUFTLGtCQUcvQjRULFlBQVcsV0FDUGpMLEVBQU1vTSxNQUFNbE8sS0FBSyxZQUFZc0IsWUFBWSxjQUN6QzJULEVBQWlCOWIsU0FBUyxjQUUxQjJJLEVBQU1vTSxNQUFNNU0sWUFBWSxjQUM1QixHQUFHLEdBQ1AsR0FBRzVJLEtBQUtrVCxXQUFhbFQsS0FBSzRULFNBQVMzUyxXQUFhLEVBQ3BELEVBY0E4UixFQUFhblQsVUFBVThZLE1BQVEsU0FBVXpWLEVBQU93WixFQUFXQyxFQUFXSixHQUNsRSxJQUFJbFQsRUFBUXBKLEtBQ1J3YixFQUFZeGIsS0FBS2djLHdCQUdyQixHQUZBaGMsS0FBS29ULGtCQUFvQnBULEtBQUsyWCxtQkFBbUIxVSxFQUFPdVksSUFFcER4YixLQUFLa1QsWUFBY3NJLElBQWN2WSxFQUFyQyxDQUdBLElBQUkwWixFQUF1QjNjLEtBQUs2VCxhQUFhblUsT0FDN0MsSUFBS00sS0FBS21ULE9BQVEsQ0FDVm5ULEtBQUs0VCxTQUFTclEsU0FDZHZELEtBQUs2WCxxQkFBcUI1VSxHQUU5QixJQUFJc1osRUFBbUJ2YyxLQUFLa1YsYUFBYWpTLEdBQ3JDMlosRUFBc0I1YyxLQUFLa1YsYUFBYXNHLEdBQ3hDNUIsRUFBcUI1WixLQUFLNlQsYUFBYTVRLEdBQ3ZDK1gsRUFBWXBCLEVBQW1CbEQsaUJBR25DLEdBRkExVyxLQUFLd1YsTUFBTXJPLEtBQUsscUJBQXNCbkgsS0FBS3lhLGFBQWFiLElBQ3hENVosS0FBS2tjLGlCQUFpQmpaLEdBQ2xCK1gsRUFBVyxDQUNYLElBQUlwRSxFQUFLNVcsS0FBS3lULHVCQUF3Qm9KLEVBQVFqRyxFQUFHakwsSUFBSzJDLEVBQVNzSSxFQUFHdEksT0FDOUQ2TSxFQUFZN04sRUFBY3ROLEtBQUttUixNQUFNbE8sR0FBUWpELEtBQUt3VixNQUFPcUgsRUFBUXZPLEVBQVEwTSxHQUFhaGIsS0FBSzRULFNBQVN4UyxjQUN4R3BCLEtBQUsrVyxpQkFBaUI5VCxFQUFPa1ksRUFDakMsQ0FrQkEsR0FqQkFuYixLQUFLd08sS0FBS3ZFLFFBQVFoSyxFQUFzQixDQUNwQ3ViLFVBQVdBLEVBQ1h2WSxNQUFPQSxFQUNQd1osWUFBYUEsRUFDYkMsWUFBYUEsSUFFakIxYyxLQUFLbVQsUUFBUyxFQUNkMEYsYUFBYTdZLEtBQUs4WSxnQkFDbEI5WSxLQUFLOGMsYUFBYTdaLEdBQ2JxWixJQUNHclosRUFBUXVZLEVBQ1JjLEVBQVksT0FFUHJaLEVBQVF1WSxJQUNiYyxFQUFZLFNBR2ZHLEVBR0EsQ0FDRHpjLEtBQUt3VixNQUNBbE8sS0FBSyxZQUNMc0IsWUFBWSwwQ0FDakIsSUFBSW1VLE9BQVksRUFDWkMsT0FBWSxFQUNaTCxFQUF1QixHQUN2QkksRUFBWTlaLEVBQVEsRUFDcEIrWixFQUFZL1osRUFBUSxHQUNOLElBQVZBLEdBQWV1WSxJQUFjbUIsRUFBdUIsR0FLL0MxWixJQUFVMFosRUFBdUIsR0FDeEIsSUFBZG5CLEtBSkF3QixFQUFZLEVBQ1pELEVBQVlKLEVBQXVCLEtBVXZDSSxFQUFZLEVBQ1pDLEVBQVksR0FFRSxTQUFkVixFQUNBdGMsS0FBS2tWLGFBQWE4SCxHQUFXdmMsU0FBUyxpQkFHdENULEtBQUtrVixhQUFhNkgsR0FBV3RjLFNBQVMsaUJBRTFDOGIsRUFBaUI5YixTQUFTLGFBQzlCLE1BbENJVCxLQUFLcWMsbUJBQW1CQyxFQUFXQyxFQUFrQkssR0FvQ3BENWMsS0FBS2tULFdBSU5tQixZQUFXLFdBQ1BqTCxFQUFNd08sWUFBWTNVLEdBQU8sR0FFYyxhQUFuQ21HLEVBQU13SyxTQUFTblIsaUJBQ2YyRyxFQUFNaVAsUUFBUXBWLEVBRXRCLEdBQUdqRCxLQUFLNFQsU0FBU3ZULE1BQVEsSUFBTW9jLEVBQVksRUFBSXpjLEtBQUs0VCxTQUFTM1MsYUFUN0RqQixLQUFLNFgsWUFBWTNVLEdBQU8sR0FXNUJvUixZQUFXLFdBQ1BqTCxFQUFNK0osUUFBUyxFQUNmeUosRUFBb0JoVSxZQUFZLHFCQUNoQ1EsRUFBTW9GLEtBQUt2RSxRQUFRaEssRUFBcUIsQ0FDcEN1YixVQUFXQSxFQUNYdlksTUFBT0EsRUFDUHdaLFVBQVdBLEVBQ1hDLFVBQVdBLEdBRW5CLElBQUkxYyxLQUFLa1QsV0FBYWxULEtBQUs0VCxTQUFTdlQsTUFBUSxJQUFNLE1BQVFvYyxFQUFZLEVBQUl6YyxLQUFLNFQsU0FBUzNTLFlBQzVGLENBQ0FqQixLQUFLaUQsTUFBUUEsQ0E5RmIsQ0ErRkosRUFDQThQLEVBQWFuVCxVQUFVaVkscUJBQXVCLFNBQVU1VSxHQUNwRGpELEtBQUtzVixlQUFlLHNCQUFzQjFLLEtBQUszSCxFQUFRLEVBQUksR0FDL0QsRUFDQThQLEVBQWFuVCxVQUFVcWQsbUJBQXFCLFdBQ3hDamQsS0FBS3NWLGVBQWUsa0JBQWtCMUssS0FBSzVLLEtBQUs2VCxhQUFhblUsT0FBUyxHQUMxRSxFQUNBcVQsRUFBYW5ULFVBQVU2YSxhQUFlLFNBQVU5SSxHQUM1QyxPQUFJQSxFQUFLK0UsaUJBQ0UsUUFFRi9FLEVBQUtzSixPQUNILFNBR0EsT0FFZixFQUNBbEksRUFBYW5ULFVBQVVzZCxVQUFZLFNBQVVDLEVBQWFDLEVBQVduVyxHQUNqRSxJQUFJb1csRUFBWUQsRUFBVUUsTUFBUUgsRUFBWUcsTUFDMUNDLEVBQVlILEVBQVVJLE1BQVFMLEVBQVlLLE1BQzFDQyxHQUFhLEVBY2pCLEdBYkl6ZCxLQUFLMGQsZUFDTEQsR0FBYSxFQUdUclksS0FBS3VZLElBQUlOLEdBQWEsSUFDdEJyZCxLQUFLMGQsZUFBaUIsYUFDdEJELEdBQWEsR0FFUnJZLEtBQUt1WSxJQUFJSixHQUFhLEtBQzNCdmQsS0FBSzBkLGVBQWlCLFdBQ3RCRCxHQUFhLEdBR2hCQSxFQUFMLENBR0EsSUFBSWxFLEVBQWdCdlosS0FBS2tWLGFBQWFsVixLQUFLaUQsT0FDM0MsR0FBNEIsZUFBeEJqRCxLQUFLMGQsZUFBaUMsQ0FDdEN6VyxTQUFzQ0EsRUFBRTROLGlCQUV4QzdVLEtBQUt3VixNQUFNL1UsU0FBUyxlQUVwQlQsS0FBSzRkLGFBQWFyRSxFQUFlOEQsRUFBVyxHQUU1QyxJQUFJN2MsRUFBUStZLEVBQWMzUixNQUFNaVcsWUFFNUJDLEVBRDRCLEdBQVJ0ZCxFQUFjLElBQ040RSxLQUFLdVksSUFBaUIsR0FBWk4sRUFBa0IsS0FDNURyZCxLQUFLNGQsYUFBYTVkLEtBQUt3VixNQUFNbE8sS0FBSyxrQkFBa0JFLFNBQVVoSCxFQUFRNmMsRUFBWVMsRUFBUSxHQUMxRjlkLEtBQUs0ZCxhQUFhNWQsS0FBS3dWLE1BQU1sTyxLQUFLLGtCQUFrQkUsUUFBU2hILEVBQVE2YyxFQUFZUyxFQUFRLEVBQzdGLE1BQ0ssR0FBNEIsYUFBeEI5ZCxLQUFLMGQsZ0JBQ04xZCxLQUFLNFQsU0FBU2hTLGFBQWMsQ0FDNUJxRixTQUFzQ0EsRUFBRTROLGlCQUN4QzdVLEtBQUt5VixXQUFXaFYsU0FBUyx3QkFDekIsSUFBSXNkLEVBQVUsRUFBSTNZLEtBQUt1WSxJQUFJSixHQUFhbFMsT0FBTzJTLFlBQy9DaGUsS0FBS2lXLFVBQVU5TSxJQUFJLFVBQVc0VSxHQUM5QixJQUFJRSxFQUFRLEVBQUk3WSxLQUFLdVksSUFBSUosSUFBa0MsRUFBcEJsUyxPQUFPdUMsWUFDOUM1TixLQUFLNGQsYUFBYXJFLEVBQWUsRUFBR2dFLEVBQVdVLEVBQU9BLEdBQ2xEN1ksS0FBS3VZLElBQUlKLEdBQWEsS0FDdEJ2ZCxLQUFLd1YsTUFDQS9VLFNBQVMsaUJBQ1RtSSxZQUFZLHFCQUV6QixDQTVCSixDQThCSixFQUNBbUssRUFBYW5ULFVBQVVzZSxTQUFXLFNBQVVkLEVBQVdELEVBQWF2VyxHQUNoRSxJQUNJdVgsRUFEQS9VLEVBQVFwSixLQUdlLGFBQXZCQSxLQUFLNFQsU0FBU3pULE1BQ2RILEtBQUt3VixNQUFNL1UsU0FBUyxZQUd4QjRULFlBQVcsV0FDUGpMLEVBQU1xTSxXQUFXN00sWUFBWSx3QkFDN0JRLEVBQU1vTSxNQUNENU0sWUFBWSw2QkFDWm5JLFNBQVMsc0JBQ2QsSUFBSTJkLEdBQWUsRUFDbkIsR0FBNkIsZUFBekJoVixFQUFNc1UsZUFBaUMsQ0FDdkNTLEVBQVdmLEVBQVVFLE1BQVFILEVBQVlHLE1BQ3pDLElBQUllLEVBQWNqWixLQUFLdVksSUFBSVAsRUFBVUUsTUFBUUgsRUFBWUcsT0FDckRhLEVBQVcsR0FDWEUsRUFBY2pWLEVBQU13SyxTQUFTblEsZ0JBQzdCMkYsRUFBTWtWLGVBQWMsR0FDcEJGLEdBQWUsR0FFVkQsRUFBVyxHQUNoQkUsRUFBY2pWLEVBQU13SyxTQUFTblEsaUJBQzdCMkYsRUFBTW1WLGVBQWMsR0FDcEJILEdBQWUsRUFFdkIsTUFDSyxHQUE2QixhQUF6QmhWLEVBQU1zVSxlQUErQixDQUUxQyxHQURBUyxFQUFXL1ksS0FBS3VZLElBQUlQLEVBQVVJLE1BQVFMLEVBQVlLLE9BQzlDcFUsRUFBTXdLLFNBQVNqUyxVQUNmeUgsRUFBTXdLLFNBQVNoUyxjQUNmdWMsRUFBVyxJQUVYLFlBREEvVSxFQUFNL0UsZUFJTitFLEVBQU02TSxVQUFVOU0sSUFBSSxVQUFXLEVBRXZDLENBRUEsR0FEQUMsRUFBTW9NLE1BQU1sTyxLQUFLLFlBQVlPLFdBQVcsU0FDcEN1VyxHQUNBaFosS0FBS3VZLElBQUlQLEVBQVVFLE1BQVFILEVBQVlHLE9BQVMsRUFBRyxDQUVuRCxJQUFJa0IsRUFBU2pYLEVBQUlYLEVBQU00WCxRQUNuQnBWLEVBQU1xVixnQkFBZ0JELElBQ3RCcFYsRUFBTW9GLEtBQUt2RSxRQUFRaEssRUFFM0IsQ0FDQW1KLEVBQU1zVSxvQkFBaUJ6WixDQUMzQixJQUVBb1EsWUFBVyxXQUNGakwsRUFBTW9NLE1BQU0xTSxTQUFTLGdCQUNFLGFBQXhCTSxFQUFNd0ssU0FBU3pULE1BQ2ZpSixFQUFNb00sTUFBTTVNLFlBQVksV0FFaEMsR0FBRzVJLEtBQUs0VCxTQUFTdlQsTUFBUSxJQUM3QixFQUNBMFMsRUFBYW5ULFVBQVU4RCxZQUFjLFdBQ2pDLElBQUkwRixFQUFRcEosS0FDUm1kLEVBQWMsQ0FBQyxFQUNmQyxFQUFZLENBQUMsRUFDYnNCLEdBQVUsRUFDVkMsR0FBWSxFQUNaM2UsS0FBSzRULFNBQVNsUSxjQUNkMUQsS0FBS2tXLE9BQU83TSxHQUFHLGlCQUFpQixTQUFVcEMsR0FDdENtQyxFQUFNb0ssb0JBQXFCLEVBQzNCLElBQUlvTCxFQUFReFYsRUFBTThMLGFBQWE5TCxFQUFNbkcsUUFDaENzRSxFQUFJTixFQUFFdVgsUUFBUTFWLFNBQVMsYUFDeEI4VixFQUFNaFgsTUFBTW1CLFNBQVM5QixFQUFFdVgsU0FDdEJwVixFQUFNb00sTUFBTTFNLFNBQVMsY0FDckJNLEVBQU0rSixRQUNjLElBQXJCbE0sRUFBRTRYLFFBQVFuZixTQUNWaWYsR0FBWSxFQUNadlYsRUFBTTBWLFlBQWMsUUFDcEIxVixFQUFNMlYsbUJBQ041QixFQUFjLENBQ1ZHLE1BQU9yVyxFQUFFNFgsUUFBUSxHQUFHdkIsTUFDcEJFLE1BQU92VyxFQUFFNFgsUUFBUSxHQUFHckIsT0FHaEMsSUFDQXhkLEtBQUtrVyxPQUFPN00sR0FBRyxnQkFBZ0IsU0FBVXBDLEdBQ2pDMFgsR0FDc0IsVUFBdEJ2VixFQUFNMFYsYUFDZSxJQUFyQjdYLEVBQUU0WCxRQUFRbmYsU0FDVjBkLEVBQVksQ0FDUkUsTUFBT3JXLEVBQUU0WCxRQUFRLEdBQUd2QixNQUNwQkUsTUFBT3ZXLEVBQUU0WCxRQUFRLEdBQUdyQixPQUV4QnBVLEVBQU04VCxVQUFVQyxFQUFhQyxFQUFXblcsR0FDeEN5WCxHQUFVLEVBRWxCLElBQ0ExZSxLQUFLa1csT0FBTzdNLEdBQUcsZUFBZSxTQUFVekMsR0FDcEMsR0FBMEIsVUFBdEJ3QyxFQUFNMFYsWUFBeUIsQ0FDL0IsR0FBSUosRUFDQUEsR0FBVSxFQUNWdFYsRUFBTThVLFNBQVNkLEVBQVdELEVBQWF2VyxRQUV0QyxHQUFJK1gsRUFBVyxDQUNoQixJQUFJSCxFQUFTalgsRUFBSVgsRUFBTTRYLFFBQ25CcFYsRUFBTXFWLGdCQUFnQkQsSUFDdEJwVixFQUFNb0YsS0FBS3ZFLFFBQVFoSyxFQUUzQixDQUNBbUosRUFBTTBWLGlCQUFjN2EsRUFDcEIwYSxHQUFZLENBQ2hCLENBQ0osSUFFUixFQUNBNUwsRUFBYW5ULFVBQVUrRCxXQUFhLFdBQ2hDLElBQUl5RixFQUFRcEosS0FDUm1kLEVBQWMsQ0FBQyxFQUNmQyxFQUFZLENBQUMsRUFDYjRCLEdBQVksRUFDWk4sR0FBVSxFQUNWMWUsS0FBSzRULFNBQVNqUSxhQUNkM0QsS0FBS3dWLE1BQU1uTSxHQUFHLGdCQUFnQixTQUFVcEMsR0FDcENtQyxFQUFNb0ssb0JBQXFCLEVBQzNCLElBQUlvTCxFQUFReFYsRUFBTThMLGFBQWE5TCxFQUFNbkcsUUFDakNzRSxFQUFJTixFQUFFdVgsUUFBUTFWLFNBQVMsWUFDdkI4VixFQUFNaFgsTUFBTW1CLFNBQVM5QixFQUFFdVgsV0FDbEJwVixFQUFNb00sTUFBTTFNLFNBQVMsY0FBaUJNLEVBQU0rSixTQUM3Q2xNLEVBQUU0TixpQkFDR3pMLEVBQU0rSixTQUNQL0osRUFBTTJWLG1CQUNONUIsRUFBYyxDQUNWRyxNQUFPclcsRUFBRXFXLE1BQ1RFLE1BQU92VyxFQUFFdVcsT0FFYndCLEdBQVksRUFFWjVWLEVBQU1vTSxNQUFNNU4sTUFBTTJELFlBQWMsRUFDaENuQyxFQUFNb00sTUFBTTVOLE1BQU0yRCxZQUFjLEVBRWhDbkMsRUFBTW9NLE1BQ0Q1TSxZQUFZLFdBQ1puSSxTQUFTLGVBQ2QySSxFQUFNb0YsS0FBS3ZFLFFBQVFoSyxLQUluQyxJQUNBc0gsRUFBSThELFFBQVFoQyxHQUFHLHNCQUF3QnJKLEtBQUs4UyxNQUFNLFNBQVU3TCxHQUNwRCtYLEdBQWE1VixFQUFNNkosV0FDbkJ5TCxHQUFVLEVBQ1Z0QixFQUFZLENBQ1JFLE1BQU9yVyxFQUFFcVcsTUFDVEUsTUFBT3ZXLEVBQUV1VyxPQUVicFUsRUFBTThULFVBQVVDLEVBQWFDLEdBQzdCaFUsRUFBTW9GLEtBQUt2RSxRQUFRaEssR0FFM0IsSUFDQXNILEVBQUk4RCxRQUFRaEMsR0FBRyxvQkFBc0JySixLQUFLOFMsTUFBTSxTQUFVbE0sR0FDdEQsR0FBS3dDLEVBQU02SixTQUFYLENBR0EsSUFBSXVMLEVBQVNqWCxFQUFJWCxFQUFNNFgsUUFDbkJFLEdBQ0FBLEdBQVUsRUFDVnRWLEVBQU04VSxTQUFTZCxFQUFXRCxFQUFhdlcsR0FDdkN3QyxFQUFNb0YsS0FBS3ZFLFFBQVFoSyxJQUVkbUosRUFBTXFWLGdCQUFnQkQsSUFDM0JwVixFQUFNb0YsS0FBS3ZFLFFBQVFoSyxHQUduQitlLElBQ0FBLEdBQVksRUFDWjVWLEVBQU1vTSxNQUFNNU0sWUFBWSxlQUFlbkksU0FBUyxXQWJwRCxDQWVKLElBRVIsRUFDQXNTLEVBQWFuVCxVQUFVMFUsbUJBQXFCLFdBQ3hDLElBQUlsTCxFQUFRcEosS0FDWkEsS0FBS2tXLE9BQU83TSxHQUFHLFlBQVksU0FBVXpDLElBQzVCd0MsRUFBTW9LLG9CQUNQcEssRUFBTXFWLGdCQUFnQmxYLEVBQUlYLEVBQU00WCxVQUNoQ3BWLEVBQU1vRixLQUFLdkUsUUFBUWhLLEVBRTNCLEdBQ0osRUFDQThTLEVBQWFuVCxVQUFVbWYsaUJBQW1CLFdBQ3RDLElBQUlFLEVBQWFqZixLQUFLaUQsTUFBUSxFQUMxQmljLEVBQWFsZixLQUFLaUQsTUFBUSxFQUMxQmpELEtBQUs0VCxTQUFTNVIsTUFBUWhDLEtBQUs2VCxhQUFhblUsT0FBUyxJQUM5QixJQUFmTSxLQUFLaUQsTUFDTGljLEVBQWFsZixLQUFLNlQsYUFBYW5VLE9BQVMsRUFFbkNNLEtBQUtpRCxRQUFVakQsS0FBSzZULGFBQWFuVSxPQUFTLElBQy9DdWYsRUFBYSxJQUdyQmpmLEtBQUt3VixNQUFNbE8sS0FBSyxZQUFZc0IsWUFBWSwrQkFDcENzVyxHQUFjLEdBQ2RsZixLQUFLa1YsYUFBYWdLLEdBQVl6ZSxTQUFTLGlCQUUzQ1QsS0FBS2tWLGFBQWErSixHQUFZeGUsU0FBUyxnQkFDM0MsRUFVQXNTLEVBQWFuVCxVQUFVMGUsY0FBZ0IsU0FBVTdCLEdBQzdDLElBQUlyVCxFQUFRcEosS0FDUm1mLEVBQVFuZixLQUFLNFQsU0FBUzVSLEtBQ3RCeWEsR0FBYXpjLEtBQUs2VCxhQUFhblUsT0FBUyxJQUN4Q3lmLEdBQVEsR0FFUG5mLEtBQUttVCxTQUNGblQsS0FBS2lELE1BQVEsRUFBSWpELEtBQUs2VCxhQUFhblUsUUFDbkNNLEtBQUtpRCxRQUNMakQsS0FBS3dPLEtBQUt2RSxRQUFRaEssRUFBMEIsQ0FDeENnRCxNQUFPakQsS0FBS2lELFFBRWhCakQsS0FBSzBZLE1BQU0xWSxLQUFLaUQsUUFBU3daLEdBQVcsRUFBTyxTQUd2QzBDLEdBQ0FuZixLQUFLaUQsTUFBUSxFQUNiakQsS0FBS3dPLEtBQUt2RSxRQUFRaEssRUFBMEIsQ0FDeENnRCxNQUFPakQsS0FBS2lELFFBRWhCakQsS0FBSzBZLE1BQU0xWSxLQUFLaUQsUUFBU3daLEdBQVcsRUFBTyxTQUV0Q3pjLEtBQUs0VCxTQUFTdlIsb0JBQXNCb2EsSUFDekN6YyxLQUFLd1YsTUFBTS9VLFNBQVMsZ0JBQ3BCNFQsWUFBVyxXQUNQakwsRUFBTW9NLE1BQU01TSxZQUFZLGVBQzVCLEdBQUcsTUFJbkIsRUFXQW1LLEVBQWFuVCxVQUFVMmUsY0FBZ0IsU0FBVTlCLEdBQzdDLElBQUlyVCxFQUFRcEosS0FDUm1mLEVBQVFuZixLQUFLNFQsU0FBUzVSLEtBQ3RCeWEsR0FBYXpjLEtBQUs2VCxhQUFhblUsT0FBUyxJQUN4Q3lmLEdBQVEsR0FFUG5mLEtBQUttVCxTQUNGblQsS0FBS2lELE1BQVEsR0FDYmpELEtBQUtpRCxRQUNMakQsS0FBS3dPLEtBQUt2RSxRQUFRaEssRUFBMEIsQ0FDeENnRCxNQUFPakQsS0FBS2lELE1BQ1p3WixVQUFXQSxJQUVmemMsS0FBSzBZLE1BQU0xWSxLQUFLaUQsUUFBU3daLEdBQVcsRUFBTyxTQUd2QzBDLEdBQ0FuZixLQUFLaUQsTUFBUWpELEtBQUs2VCxhQUFhblUsT0FBUyxFQUN4Q00sS0FBS3dPLEtBQUt2RSxRQUFRaEssRUFBMEIsQ0FDeENnRCxNQUFPakQsS0FBS2lELE1BQ1p3WixVQUFXQSxJQUVmemMsS0FBSzBZLE1BQU0xWSxLQUFLaUQsUUFBU3daLEdBQVcsRUFBTyxTQUV0Q3pjLEtBQUs0VCxTQUFTdlIsb0JBQXNCb2EsSUFDekN6YyxLQUFLd1YsTUFBTS9VLFNBQVMsZUFDcEI0VCxZQUFXLFdBQ1BqTCxFQUFNb00sTUFBTTVNLFlBQVksY0FDNUIsR0FBRyxNQUluQixFQUNBbUssRUFBYW5ULFVBQVVzQyxTQUFXLFdBQzlCLElBQUlrSCxFQUFRcEosS0FDWnVILEVBQUk4RCxRQUFRaEMsR0FBRyxvQkFBc0JySixLQUFLOFMsTUFBTSxTQUFVN0wsR0FDbERtQyxFQUFNNkosV0FDb0IsSUFBMUI3SixFQUFNd0ssU0FBUzNSLFFBQ0QsS0FBZGdGLEVBQUVtWSxVQUNGblksRUFBRTROLGlCQUNFekwsRUFBTXdLLFNBQVN6UyxtQkFDZmlJLEVBQU1vTSxNQUFNMU0sU0FBUyxrQkFDckJNLEVBQU1vTSxNQUFNMU0sU0FBUyxzQkFDckJNLEVBQU1vTSxNQUFNNU0sWUFBWSxzQkFHeEJRLEVBQU0vRSxnQkFHVitFLEVBQU02SixVQUFZN0osRUFBTXlLLGFBQWFuVSxPQUFTLElBQzVCLEtBQWR1SCxFQUFFbVksVUFDRm5ZLEVBQUU0TixpQkFDRnpMLEVBQU1tVixpQkFFUSxLQUFkdFgsRUFBRW1ZLFVBQ0ZuWSxFQUFFNE4saUJBQ0Z6TCxFQUFNa1YsaUJBR2xCLEdBQ0osRUFDQXZMLEVBQWFuVCxVQUFVMlUsTUFBUSxXQUMzQixJQUFJbkwsRUFBUXBKLEtBQ1pBLEtBQUtzVixlQUFlLFdBQVdqTSxHQUFHLFlBQVksV0FDMUNELEVBQU1tVixlQUNWLElBQ0F2ZSxLQUFLc1YsZUFBZSxXQUFXak0sR0FBRyxZQUFZLFdBQzFDRCxFQUFNa1YsZUFDVixHQUNKLEVBQ0F2TCxFQUFhblQsVUFBVWtkLGFBQWUsU0FBVTdaLEdBRTVDLElBQUtqRCxLQUFLNFQsU0FBUzVSLE1BQVFoQyxLQUFLNFQsU0FBU3RSLGlCQUFrQixDQUN2RCxJQUFJK2MsRUFBUXJmLEtBQUtzVixlQUFlLFdBQzVCZ0ssRUFBUXRmLEtBQUtzVixlQUFlLFdBQzVCclMsRUFBUSxJQUFNakQsS0FBSzZULGFBQWFuVSxPQUNoQzRmLEVBQU1uWSxLQUFLLFdBQVksWUFBWTFHLFNBQVMsWUFHNUM2ZSxFQUFNelgsV0FBVyxZQUFZZSxZQUFZLFlBRS9CLElBQVYzRixFQUNBb2MsRUFBTWxZLEtBQUssV0FBWSxZQUFZMUcsU0FBUyxZQUc1QzRlLEVBQU14WCxXQUFXLFlBQVllLFlBQVksV0FFakQsQ0FDSixFQUNBbUssRUFBYW5ULFVBQVVnZSxhQUFlLFNBQVUyQixFQUFLQyxFQUFRQyxFQUFRQyxFQUFRQyxRQUMxRCxJQUFYRCxJQUFxQkEsRUFBUyxRQUNuQixJQUFYQyxJQUFxQkEsRUFBUyxHQUNsQ0osRUFBSXBXLElBQUksWUFBYSxlQUNqQnFXLEVBQ0EsT0FDQUMsRUFDQSxvQkFDQUMsRUFDQSxLQUNBQyxFQUNBLE9BQ1IsRUFDQTVNLEVBQWFuVCxVQUFVMkMsV0FBYSxXQUNoQyxJQUFJNkcsRUFBUXBKLEtBQ1I0ZixFQUFXLEVBQ2Y1ZixLQUFLd1YsTUFBTW5NLEdBQUcsWUFBWSxTQUFVcEMsR0FDaEMsR0FBS0EsRUFBRTRZLFVBQVV6VyxFQUFNeUssYUFBYW5VLE9BQVMsR0FBN0MsQ0FHQXVILEVBQUU0TixpQkFDRixJQUFJaUwsR0FBTSxJQUFJQyxNQUFPQyxVQUNqQkYsRUFBTUYsRUFBVyxNQUdyQkEsRUFBV0UsRUFDUDdZLEVBQUU0WSxPQUFTLEVBQ1h6VyxFQUFNa1YsZ0JBRURyWCxFQUFFNFksT0FBUyxHQUNoQnpXLEVBQU1tVixnQkFYVixDQWFKLEdBQ0osRUFDQXhMLEVBQWFuVCxVQUFVcWdCLGVBQWlCLFNBQVV6QixHQUM5QyxPQUFRQSxFQUFPMVYsU0FBUyxhQUNwQjBWLEVBQU8xVixTQUFTLFlBQ2hCMFYsRUFBTzFWLFNBQVMsY0FDeEIsRUFDQWlLLEVBQWFuVCxVQUFVNmUsZ0JBQWtCLFNBQVVELEdBQy9DLElBQUkwQixFQUFhbGdCLEtBQUtrVixhQUFhbFYsS0FBS2lELE9BQ25DcUUsS0FBSyx5QkFDTE0sTUFDTCxPQUFRNFcsRUFBTzFWLFNBQVMsb0JBQ3BCMFYsRUFBTzFWLFNBQVMseUJBQ2ZvWCxHQUFjQSxFQUFXblgsU0FBU3lWLEVBQU81VyxNQUNsRCxFQUtBbUwsRUFBYW5ULFVBQVUwRSxlQUFpQixXQUNwQyxJQUFJOEUsRUFBUXBKLEtBQ1pBLEtBQUtzVixlQUFlLGVBQWVqTSxHQUFHLFlBQVksV0FDOUNELEVBQU1xTSxXQUFXdk0sWUFBWSxhQUM3QkUsRUFBTWtOLGlCQUNWLEdBQ0osRUFDQXZELEVBQWFuVCxVQUFVdWdCLGdCQUFrQixXQUNyQyxJQUFLLElBQUlsZCxFQUFRLEVBQUdBLEVBQVFqRCxLQUFLbVIsTUFBTXpSLE9BQVF1RCxJQUFTLENBQ3BELElBQ0kwUixFQUFXcE4sRUFERHZILEtBQUttUixNQUFNbE8sSUFFekIwUixFQUFTN0ssSUFBSSx1QkFBeUI2SyxFQUFTeE4sS0FBSyxjQUN4RCxDQUNKLEVBQ0E0TCxFQUFhblQsVUFBVXVDLFVBQVksV0FDL0IsSUFBSWlILEVBQVFwSixLQUNaQSxLQUFLeVYsV0FBVzdOLE1BQU13WSxNQUFNLENBQ3hCQyxlQUFlLElBRW5COVksRUFBSThELFFBQVFoQyxHQUFHLG9CQUFzQnJKLEtBQUs4UyxNQUFNLFNBQVU3TCxHQUN0RCxHQUFLbUMsRUFBTTZKLFdBR2tCLFFBQVZoTSxFQUFFNkksS0FBK0IsSUFBZDdJLEVBQUVtWSxTQUN4QyxDQUdBLElBQUlrQixFQUFlaFQsRUFBMkJsRSxFQUFNcU0sV0FBVzdOLE9BQzNEMlksRUFBbUJELEVBQWEsR0FDaENFLEVBQWtCRixFQUFhQSxFQUFhNWdCLE9BQVMsR0FDckR1SCxFQUFFd1osU0FDRWpiLFNBQVNrYixnQkFBa0JILElBQzNCQyxFQUFnQkosUUFDaEJuWixFQUFFNE4sa0JBSUZyUCxTQUFTa2IsZ0JBQWtCRixJQUMzQkQsRUFBaUJILFFBQ2pCblosRUFBRTROLGlCQWJWLENBZ0JKLEdBQ0osRUFDQTlCLEVBQWFuVCxVQUFVNFcsbUJBQXFCLFdBQ3hDLElBQUlwTixFQUFRcEosS0FDWixHQUFLQSxLQUFLNFQsU0FBU2pTLFNBQW5CLENBRUEsSUFBSWdmLEdBQVksRUFDaEIzZ0IsS0FBS3NWLGVBQWUsWUFBWWpNLEdBQUcsWUFBWSxXQUMzQ0QsRUFBTS9FLGNBQ1YsSUFDSXJFLEtBQUs0VCxTQUFTL1IsYUFHZDdCLEtBQUt3VixNQUFNbk0sR0FBRyxnQkFBZ0IsU0FBVXBDLEdBQ3BDLElBQUl1WCxFQUFTalgsRUFBSU4sRUFBRXVYLFFBRWZtQyxJQURBdlgsRUFBTTZXLGVBQWV6QixFQU03QixJQUNBeGUsS0FBS3dWLE1BQU1uTSxHQUFHLGdCQUFnQixXQUMxQnNYLEdBQVksQ0FDaEIsSUFDQTNnQixLQUFLd1YsTUFBTW5NLEdBQUcsY0FBYyxTQUFVcEMsR0FDbEMsSUFBSXVYLEVBQVNqWCxFQUFJTixFQUFFdVgsUUFDZnBWLEVBQU02VyxlQUFlekIsSUFBV21DLElBQzNCdlgsRUFBTW9NLE1BQU0xTSxTQUFTLGdCQUN0Qk0sRUFBTS9FLGVBR2xCLElBM0JNLENBNkJkLEVBWUEwTyxFQUFhblQsVUFBVXlFLGFBQWUsU0FBVXVjLEdBQzVDLElBQUl4WCxFQUFRcEosS0FDWixJQUFLQSxLQUFLaVQsV0FBY2pULEtBQUs0VCxTQUFTalMsV0FBYWlmLEVBQy9DLE9BQU8sRUFFWDVnQixLQUFLd08sS0FBS3ZFLFFBQVFoSyxHQUNkRCxLQUFLNFQsU0FBU25TLHNCQUF3QnpCLEtBQUs0VCxTQUFTbFMsZUFDcEQ2RixFQUFJOEQsUUFBUUgsVUFBVWxMLEtBQUtxVCxlQUUvQixJQUNJaUYsRUFEQXRHLEVBQWNoUyxLQUFLbVIsTUFBTW5SLEtBQUtpRCxPQUVsQyxHQUFJakQsS0FBS2MsZ0JBQWtCa1IsRUFBYSxDQUNwQyxJQUFJNEUsRUFBSzVXLEtBQUt5VCx1QkFBd0JvTixFQUFRakssRUFBR2pMLElBQUsyQyxFQUFTc0ksRUFBR3RJLE9BQzlEd1MsRUFBSzlnQixLQUFLNlQsYUFBYTdULEtBQUtpRCxPQUFReVQsRUFBbUJvSyxFQUFHcEssaUJBQWtCZ0UsRUFBU29HLEVBQUdwRyxPQUN4Rm5NLEVBQVlqQixFQUFjMEUsRUFBYWhTLEtBQUt3VixNQUFPcUwsRUFBUXZTLEVBQVFvSSxHQUFvQmdFLEdBQVUxYSxLQUFLNFQsU0FBU3hTLGNBQ25Ia1gsRUFBWWhMLEVBQW1CMEUsRUFBYWhTLEtBQUt3VixNQUFPcUwsRUFBT3ZTLEVBQVFDLEVBQzNFLENBQ0l2TyxLQUFLYyxnQkFBa0J3WCxHQUN2QnRZLEtBQUt3VixNQUFNL1UsU0FBUyxpQ0FDcEJULEtBQUtrVixhQUFhbFYsS0FBS2lELE9BQ2xCeEMsU0FBUyx5QkFDVDBJLElBQUksc0JBQXVCbkosS0FBSzRULFNBQVMvUyx1QkFBeUIsTUFDbEVzSSxJQUFJLFlBQWFtUCxLQUd0QnRZLEtBQUt3VixNQUFNL1UsU0FBUyxpQkFHcEJULEtBQUt3VixNQUFNNU0sWUFBWSx1QkFLM0I1SSxLQUFLK2dCLGlCQUNML2dCLEtBQUtrVCxZQUFhLEVBQ2xCbFQsS0FBS3VULHFCQUFzQixFQUMzQnZULEtBQUtjLGVBQWlCZCxLQUFLNFQsU0FBUzlTLGVBQ3BDK1gsYUFBYTdZLEtBQUs4WSxnQkFDbEI5WSxLQUFLOFksZ0JBQWlCLEVBQ3RCdlIsRUFBSSxRQUFRcUIsWUFBWSxTQUN4QjVJLEtBQUt3VixNQUFNNU0sWUFBWSxpQ0FFdkI1SSxLQUFLaVcsVUFBVXJOLFlBQVksTUFBTU8sSUFBSSxVQUFXLEdBQ2hELElBQUk2WCxFQUFnQmhoQixLQUFLYyxnQkFBa0J3WCxFQUNyQ2xULEtBQUt1VyxJQUFJM2IsS0FBSzRULFNBQVMvUyx1QkFBd0JiLEtBQUs0VCxTQUFTalQsa0JBQzdEWCxLQUFLNFQsU0FBU2pULGlCQTJCcEIsT0ExQkFYLEtBQUt5VixXQUFXN00sWUFBWSxjQUU1QnlMLFlBQVcsV0FDSGpMLEVBQU10SSxnQkFBa0J3WCxHQUN4QmxQLEVBQU1vTSxNQUFNNU0sWUFBWSxzQkFFNUJRLEVBQU1xTSxXQUFXN00sWUFBWSxXQUU3QlEsRUFBTThPLGlCQUVOOU8sRUFBTTZNLFVBQ0RwTyxXQUFXLFNBQ1hzQixJQUFJLHNCQUF1QkMsRUFBTXdLLFNBQVNqVCxpQkFBbUIsTUFDbEV5SSxFQUFNb00sTUFBTTVNLFlBQVksY0FBZ0JRLEVBQU13SyxTQUFTbFQsWUFDdkQwSSxFQUFNOEwsYUFBYTlMLEVBQU1uRyxPQUFPMkYsWUFBWSx5QkFDNUNRLEVBQU04TSxPQUFPakwsUUFDVDdCLEVBQU02SixVQUNON0osRUFBTW9GLEtBQUt2RSxRQUFRaEssRUFBcUIsQ0FDcENtVSxTQUFVaEwsSUFHZEEsRUFBTXFNLFdBQVc3TixPQUNqQndCLEVBQU1xTSxXQUFXN04sTUFBTXFaLE9BRTNCN1gsRUFBTTZKLFVBQVcsQ0FDckIsR0FBRytOLEVBQWdCLEtBQ1pBLEVBQWdCLEdBQzNCLEVBQ0FqTyxFQUFhblQsVUFBVTZXLFlBQWMsV0FDakN6VyxLQUFLbUUsUUFBUTJCLFNBQVEsU0FBVW9iLEdBQzNCLElBQ0lBLEVBQU9sTixNQUNYLENBQ0EsTUFBT21OLEdBQ0h6TyxRQUFRdUMsS0FBSyxxRUFDakIsQ0FDSixHQUNKLEVBQ0FsQyxFQUFhblQsVUFBVW1oQixlQUFpQixTQUFVSyxHQUM5Q3BoQixLQUFLbUUsUUFBUTJCLFNBQVEsU0FBVW9iLEdBQzNCLElBQ1FFLEVBQ0FGLEVBQU9FLFVBR1BGLEVBQU83YyxjQUFnQjZjLEVBQU83YyxjQUV0QyxDQUNBLE1BQU84YyxHQUNIek8sUUFBUXVDLEtBQUsscUVBQ2pCLENBQ0osR0FDSixFQWVBbEMsRUFBYW5ULFVBQVV5aEIsUUFBVSxTQUFVeE4sR0FDbEM3VCxLQUFLNFQsU0FBU2hRLFNBQ2Y1RCxLQUFLbWdCLGtCQUdMbmdCLEtBQUs2VCxhQURMQSxHQUlvQjdULEtBQUs4VCxXQUU3QjlULEtBQUtzWCxpQkFDTHRYLEtBQUt3VSx5QkFDTHhVLEtBQUt3TyxLQUFLdkUsUUFBUWhLLEVBQ3RCLEVBQ0E4UyxFQUFhblQsVUFBVTBYLGVBQWlCLFdBQ3BDdFgsS0FBS2tVLGtCQUFrQmxVLEtBQUs2VCxjQUM1QjdULEtBQUtpZCxxQkFDTGpkLEtBQUt1Viw0QkFDVCxFQUNBeEMsRUFBYW5ULFVBQVUwaEIsZUFBaUIsV0FDcEN0aEIsS0FBSytnQixnQkFBZSxHQUNmL2dCLEtBQUs0VCxTQUFTaFEsU0FDZjVELEtBQUttZ0Isa0JBRVQ1WSxFQUFJOEQsUUFBUXZCLElBQUksYUFBZTlKLEtBQUs4UyxNQUNwQzlTLEtBQUt3TyxLQUFLMUUsSUFBSSxPQUNkOUosS0FBS3lWLFdBQVc1TSxRQUNwQixFQWNBa0ssRUFBYW5ULFVBQVV3aEIsUUFBVSxXQUM3QixJQUFJRyxFQUFldmhCLEtBQUtxRSxjQUFhLEdBT3JDLE9BTklrZCxFQUNBbE4sV0FBV3JVLEtBQUtzaEIsZUFBZUUsS0FBS3hoQixNQUFPdWhCLEdBRzNDdmhCLEtBQUtzaEIsaUJBRUZDLENBQ1gsRUFDT3hPLENBQ1gsQ0E3MkRpQyxHQW0zRGpDLFFBSkEsU0FBc0IvTSxFQUFJZ04sR0FDdEIsT0FBTyxJQUFJRCxFQUFhL00sRUFBSWdOLEVBQ2hDLEVDcnFGeUJ5TyxNQUNSamMsU0FBU0csaUJBQ3RCLGdFQUdGSCxTQUFTRyxpQkFBaUIsdUJBQXVCRyxTQUFTNGIsSUFDeEQsTUFBTUMsRUFBY0QsRUFBUUUsUUFBUUQsWUFFOUJFLEVBQUtDLEVBQWFKLEVBQVMsQ0FDL0JyaEIsTUFBTyxJQUNQQyxXQUFZLHNDQUNaa0QsZ0JBQWlCLGNBQ2pCWCxTQUFVLGtDQUNWSixnQkFBaUIsYUFHbkJpZixFQUFROVgsaUJBQWlCLGlCQUFrQjNDLElBQzNCekIsU0FBU0csaUJBQWlCLFlBRWxDRyxTQUFTNkwsSUFFWEEsRUFBS2pNLGNBQWMsaUJBQzhCLFNBQWpEaU0sRUFBS2pNLGNBQWMsZ0JBQWdCbUYsV0FFbkM4RyxFQUFLakosVUFBVUMsSUFBSSxlQUNyQixHQUNBLElBRUorWSxFQUFROVgsaUJBQWlCLGdCQUFpQjNDLElBQ3hDLE1BQU1yRyxFQUFZaWhCLEVBQUdwTSxXQUFXM1EsYUFBYVksY0FBYyxhQUNyRHFjLEVBQU92YyxTQUFTNEMsY0FBYyxPQUVwQzJaLEVBQUtyWixVQUFVQyxJQUFJLHVCQUNuQm9aLEVBQUtsWCxVQUFZOFcsRUFDakJBLEdBQWUvZ0IsRUFBVWtLLE9BQU9pWCxHQUVsQnZjLFNBQVNHLGlCQUFpQixZQUVsQ0csU0FBUzZMLElBRVhBLEVBQUtqTSxjQUFjLGlCQUM4QixTQUFqRGlNLEVBQUtqTSxjQUFjLGdCQUFnQm1GLFdBRW5DOEcsRUFBS2pKLFVBQVVDLElBQUksZUFDckIsR0FDQSxHQUNGLEdBQ0YsRUFFSjhZIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2VicGFjay1zZXR1cC8uL25vZGVfbW9kdWxlcy9saWdodGdhbGxlcnkvbGlnaHRnYWxsZXJ5LmVzNS5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXNldHVwLy4vc3JjL2pzL2xpYi9saWdodGdhbGxlcnkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBsaWdodGdhbGxlcnkgfCAyLjcuMiB8IFNlcHRlbWJlciAyMHRoIDIwMjNcbiAqIGh0dHA6Ly93d3cubGlnaHRnYWxsZXJ5anMuY29tL1xuICogQ29weXJpZ2h0IChjKSAyMDIwIFNhY2hpbiBOZXJhdmF0aDtcbiAqIEBsaWNlbnNlIEdQTHYzXG4gKi9cblxuLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxyXG5cclxuUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XHJcbnB1cnBvc2Ugd2l0aCBvciB3aXRob3V0IGZlZSBpcyBoZXJlYnkgZ3JhbnRlZC5cclxuXHJcblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEhcclxuUkVHQVJEIFRPIFRISVMgU09GVFdBUkUgSU5DTFVESU5HIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZXHJcbkFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIFNQRUNJQUwsIERJUkVDVCxcclxuSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NXHJcbkxPU1MgT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBORUdMSUdFTkNFIE9SXHJcbk9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1JcclxuUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuXHJcbnZhciBfX2Fzc2lnbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uIF9fYXNzaWduKHQpIHtcclxuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKSB0W3BdID0gc1twXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHQ7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbn07XHJcblxyXG5mdW5jdGlvbiBfX3NwcmVhZEFycmF5cygpIHtcclxuICAgIGZvciAodmFyIHMgPSAwLCBpID0gMCwgaWwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykgcyArPSBhcmd1bWVudHNbaV0ubGVuZ3RoO1xyXG4gICAgZm9yICh2YXIgciA9IEFycmF5KHMpLCBrID0gMCwgaSA9IDA7IGkgPCBpbDsgaSsrKVxyXG4gICAgICAgIGZvciAodmFyIGEgPSBhcmd1bWVudHNbaV0sIGogPSAwLCBqbCA9IGEubGVuZ3RoOyBqIDwgamw7IGorKywgaysrKVxyXG4gICAgICAgICAgICByW2tdID0gYVtqXTtcclxuICAgIHJldHVybiByO1xyXG59XG5cbi8qKlxyXG4gKiBMaXN0IG9mIGxpZ2h0R2FsbGVyeSBldmVudHNcclxuICogQWxsIGV2ZW50cyBzaG91bGQgYmUgZG9jdW1lbnRlZCBoZXJlXHJcbiAqIEJlbG93IGludGVyZmFjZXMgYXJlIHVzZWQgdG8gYnVpbGQgdGhlIHdlYnNpdGUgZG9jdW1lbnRhdGlvbnNcclxuICogKi9cclxudmFyIGxHRXZlbnRzID0ge1xyXG4gICAgYWZ0ZXJBcHBlbmRTbGlkZTogJ2xnQWZ0ZXJBcHBlbmRTbGlkZScsXHJcbiAgICBpbml0OiAnbGdJbml0JyxcclxuICAgIGhhc1ZpZGVvOiAnbGdIYXNWaWRlbycsXHJcbiAgICBjb250YWluZXJSZXNpemU6ICdsZ0NvbnRhaW5lclJlc2l6ZScsXHJcbiAgICB1cGRhdGVTbGlkZXM6ICdsZ1VwZGF0ZVNsaWRlcycsXHJcbiAgICBhZnRlckFwcGVuZFN1Ykh0bWw6ICdsZ0FmdGVyQXBwZW5kU3ViSHRtbCcsXHJcbiAgICBiZWZvcmVPcGVuOiAnbGdCZWZvcmVPcGVuJyxcclxuICAgIGFmdGVyT3BlbjogJ2xnQWZ0ZXJPcGVuJyxcclxuICAgIHNsaWRlSXRlbUxvYWQ6ICdsZ1NsaWRlSXRlbUxvYWQnLFxyXG4gICAgYmVmb3JlU2xpZGU6ICdsZ0JlZm9yZVNsaWRlJyxcclxuICAgIGFmdGVyU2xpZGU6ICdsZ0FmdGVyU2xpZGUnLFxyXG4gICAgcG9zdGVyQ2xpY2s6ICdsZ1Bvc3RlckNsaWNrJyxcclxuICAgIGRyYWdTdGFydDogJ2xnRHJhZ1N0YXJ0JyxcclxuICAgIGRyYWdNb3ZlOiAnbGdEcmFnTW92ZScsXHJcbiAgICBkcmFnRW5kOiAnbGdEcmFnRW5kJyxcclxuICAgIGJlZm9yZU5leHRTbGlkZTogJ2xnQmVmb3JlTmV4dFNsaWRlJyxcclxuICAgIGJlZm9yZVByZXZTbGlkZTogJ2xnQmVmb3JlUHJldlNsaWRlJyxcclxuICAgIGJlZm9yZUNsb3NlOiAnbGdCZWZvcmVDbG9zZScsXHJcbiAgICBhZnRlckNsb3NlOiAnbGdBZnRlckNsb3NlJyxcclxuICAgIHJvdGF0ZUxlZnQ6ICdsZ1JvdGF0ZUxlZnQnLFxyXG4gICAgcm90YXRlUmlnaHQ6ICdsZ1JvdGF0ZVJpZ2h0JyxcclxuICAgIGZsaXBIb3Jpem9udGFsOiAnbGdGbGlwSG9yaXpvbnRhbCcsXHJcbiAgICBmbGlwVmVydGljYWw6ICdsZ0ZsaXBWZXJ0aWNhbCcsXHJcbiAgICBhdXRvcGxheTogJ2xnQXV0b3BsYXknLFxyXG4gICAgYXV0b3BsYXlTdGFydDogJ2xnQXV0b3BsYXlTdGFydCcsXHJcbiAgICBhdXRvcGxheVN0b3A6ICdsZ0F1dG9wbGF5U3RvcCcsXHJcbn07XG5cbnZhciBsaWdodEdhbGxlcnlDb3JlU2V0dGluZ3MgPSB7XHJcbiAgICBtb2RlOiAnbGctc2xpZGUnLFxyXG4gICAgZWFzaW5nOiAnZWFzZScsXHJcbiAgICBzcGVlZDogNDAwLFxyXG4gICAgbGljZW5zZUtleTogJzAwMDAtMDAwMC0wMDAtMDAwMCcsXHJcbiAgICBoZWlnaHQ6ICcxMDAlJyxcclxuICAgIHdpZHRoOiAnMTAwJScsXHJcbiAgICBhZGRDbGFzczogJycsXHJcbiAgICBzdGFydENsYXNzOiAnbGctc3RhcnQtem9vbScsXHJcbiAgICBiYWNrZHJvcER1cmF0aW9uOiAzMDAsXHJcbiAgICBjb250YWluZXI6ICcnLFxyXG4gICAgc3RhcnRBbmltYXRpb25EdXJhdGlvbjogNDAwLFxyXG4gICAgem9vbUZyb21PcmlnaW46IHRydWUsXHJcbiAgICBoaWRlQmFyc0RlbGF5OiAwLFxyXG4gICAgc2hvd0JhcnNBZnRlcjogMTAwMDAsXHJcbiAgICBzbGlkZURlbGF5OiAwLFxyXG4gICAgc3VwcG9ydExlZ2FjeUJyb3dzZXI6IHRydWUsXHJcbiAgICBhbGxvd01lZGlhT3ZlcmxhcDogZmFsc2UsXHJcbiAgICB2aWRlb01heFNpemU6ICcxMjgwLTcyMCcsXHJcbiAgICBsb2FkWW91VHViZVBvc3RlcjogdHJ1ZSxcclxuICAgIGRlZmF1bHRDYXB0aW9uSGVpZ2h0OiAwLFxyXG4gICAgYXJpYUxhYmVsbGVkYnk6ICcnLFxyXG4gICAgYXJpYURlc2NyaWJlZGJ5OiAnJyxcclxuICAgIHJlc2V0U2Nyb2xsUG9zaXRpb246IHRydWUsXHJcbiAgICBoaWRlU2Nyb2xsYmFyOiBmYWxzZSxcclxuICAgIGNsb3NhYmxlOiB0cnVlLFxyXG4gICAgc3dpcGVUb0Nsb3NlOiB0cnVlLFxyXG4gICAgY2xvc2VPblRhcDogdHJ1ZSxcclxuICAgIHNob3dDbG9zZUljb246IHRydWUsXHJcbiAgICBzaG93TWF4aW1pemVJY29uOiBmYWxzZSxcclxuICAgIGxvb3A6IHRydWUsXHJcbiAgICBlc2NLZXk6IHRydWUsXHJcbiAgICBrZXlQcmVzczogdHJ1ZSxcclxuICAgIHRyYXBGb2N1czogdHJ1ZSxcclxuICAgIGNvbnRyb2xzOiB0cnVlLFxyXG4gICAgc2xpZGVFbmRBbmltYXRpb246IHRydWUsXHJcbiAgICBoaWRlQ29udHJvbE9uRW5kOiBmYWxzZSxcclxuICAgIG1vdXNld2hlZWw6IGZhbHNlLFxyXG4gICAgZ2V0Q2FwdGlvbkZyb21UaXRsZU9yQWx0OiB0cnVlLFxyXG4gICAgYXBwZW5kU3ViSHRtbFRvOiAnLmxnLXN1Yi1odG1sJyxcclxuICAgIHN1Ykh0bWxTZWxlY3RvclJlbGF0aXZlOiBmYWxzZSxcclxuICAgIHByZWxvYWQ6IDIsXHJcbiAgICBudW1iZXJPZlNsaWRlSXRlbXNJbkRvbTogMTAsXHJcbiAgICBzZWxlY3RvcjogJycsXHJcbiAgICBzZWxlY3RXaXRoaW46ICcnLFxyXG4gICAgbmV4dEh0bWw6ICcnLFxyXG4gICAgcHJldkh0bWw6ICcnLFxyXG4gICAgaW5kZXg6IDAsXHJcbiAgICBpZnJhbWVXaWR0aDogJzEwMCUnLFxyXG4gICAgaWZyYW1lSGVpZ2h0OiAnMTAwJScsXHJcbiAgICBpZnJhbWVNYXhXaWR0aDogJzEwMCUnLFxyXG4gICAgaWZyYW1lTWF4SGVpZ2h0OiAnMTAwJScsXHJcbiAgICBkb3dubG9hZDogdHJ1ZSxcclxuICAgIGNvdW50ZXI6IHRydWUsXHJcbiAgICBhcHBlbmRDb3VudGVyVG86ICcubGctdG9vbGJhcicsXHJcbiAgICBzd2lwZVRocmVzaG9sZDogNTAsXHJcbiAgICBlbmFibGVTd2lwZTogdHJ1ZSxcclxuICAgIGVuYWJsZURyYWc6IHRydWUsXHJcbiAgICBkeW5hbWljOiBmYWxzZSxcclxuICAgIGR5bmFtaWNFbDogW10sXHJcbiAgICBleHRyYVByb3BzOiBbXSxcclxuICAgIGV4VGh1bWJJbWFnZTogJycsXHJcbiAgICBpc01vYmlsZTogdW5kZWZpbmVkLFxyXG4gICAgbW9iaWxlU2V0dGluZ3M6IHtcclxuICAgICAgICBjb250cm9sczogZmFsc2UsXHJcbiAgICAgICAgc2hvd0Nsb3NlSWNvbjogZmFsc2UsXHJcbiAgICAgICAgZG93bmxvYWQ6IGZhbHNlLFxyXG4gICAgfSxcclxuICAgIHBsdWdpbnM6IFtdLFxyXG4gICAgc3RyaW5nczoge1xyXG4gICAgICAgIGNsb3NlR2FsbGVyeTogJ0Nsb3NlIGdhbGxlcnknLFxyXG4gICAgICAgIHRvZ2dsZU1heGltaXplOiAnVG9nZ2xlIG1heGltaXplJyxcclxuICAgICAgICBwcmV2aW91c1NsaWRlOiAnUHJldmlvdXMgc2xpZGUnLFxyXG4gICAgICAgIG5leHRTbGlkZTogJ05leHQgc2xpZGUnLFxyXG4gICAgICAgIGRvd25sb2FkOiAnRG93bmxvYWQnLFxyXG4gICAgICAgIHBsYXlWaWRlbzogJ1BsYXkgdmlkZW8nLFxyXG4gICAgICAgIG1lZGlhTG9hZGluZ0ZhaWxlZDogJ09vcHMuLi4gRmFpbGVkIHRvIGxvYWQgY29udGVudC4uLicsXHJcbiAgICB9LFxyXG59O1xuXG5mdW5jdGlvbiBpbml0TGdQb2x5ZmlsbHMoKSB7XHJcbiAgICAoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0eXBlb2Ygd2luZG93LkN1c3RvbUV2ZW50ID09PSAnZnVuY3Rpb24nKVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgZnVuY3Rpb24gQ3VzdG9tRXZlbnQoZXZlbnQsIHBhcmFtcykge1xyXG4gICAgICAgICAgICBwYXJhbXMgPSBwYXJhbXMgfHwge1xyXG4gICAgICAgICAgICAgICAgYnViYmxlczogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBjYW5jZWxhYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGRldGFpbDogbnVsbCxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgdmFyIGV2dCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdDdXN0b21FdmVudCcpO1xyXG4gICAgICAgICAgICBldnQuaW5pdEN1c3RvbUV2ZW50KGV2ZW50LCBwYXJhbXMuYnViYmxlcywgcGFyYW1zLmNhbmNlbGFibGUsIHBhcmFtcy5kZXRhaWwpO1xyXG4gICAgICAgICAgICByZXR1cm4gZXZ0O1xyXG4gICAgICAgIH1cclxuICAgICAgICB3aW5kb3cuQ3VzdG9tRXZlbnQgPSBDdXN0b21FdmVudDtcclxuICAgIH0pKCk7XHJcbiAgICAoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICghRWxlbWVudC5wcm90b3R5cGUubWF0Y2hlcykge1xyXG4gICAgICAgICAgICBFbGVtZW50LnByb3RvdHlwZS5tYXRjaGVzID1cclxuICAgICAgICAgICAgICAgIEVsZW1lbnQucHJvdG90eXBlLm1zTWF0Y2hlc1NlbGVjdG9yIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgRWxlbWVudC5wcm90b3R5cGUud2Via2l0TWF0Y2hlc1NlbGVjdG9yO1xyXG4gICAgICAgIH1cclxuICAgIH0pKCk7XHJcbn1cclxudmFyIGxnUXVlcnkgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBsZ1F1ZXJ5KHNlbGVjdG9yKSB7XHJcbiAgICAgICAgdGhpcy5jc3NWZW5kZXJQcmVmaXhlcyA9IFtcclxuICAgICAgICAgICAgJ1RyYW5zaXRpb25EdXJhdGlvbicsXHJcbiAgICAgICAgICAgICdUcmFuc2l0aW9uVGltaW5nRnVuY3Rpb24nLFxyXG4gICAgICAgICAgICAnVHJhbnNmb3JtJyxcclxuICAgICAgICAgICAgJ1RyYW5zaXRpb24nLFxyXG4gICAgICAgIF07XHJcbiAgICAgICAgdGhpcy5zZWxlY3RvciA9IHRoaXMuX2dldFNlbGVjdG9yKHNlbGVjdG9yKTtcclxuICAgICAgICB0aGlzLmZpcnN0RWxlbWVudCA9IHRoaXMuX2dldEZpcnN0RWwoKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIGxnUXVlcnkuZ2VuZXJhdGVVVUlEID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiAneHh4eHh4eHgteHh4eC00eHh4LXl4eHgteHh4eHh4eHh4eHh4Jy5yZXBsYWNlKC9beHldL2csIGZ1bmN0aW9uIChjKSB7XHJcbiAgICAgICAgICAgIHZhciByID0gKE1hdGgucmFuZG9tKCkgKiAxNikgfCAwLCB2ID0gYyA9PSAneCcgPyByIDogKHIgJiAweDMpIHwgMHg4O1xyXG4gICAgICAgICAgICByZXR1cm4gdi50b1N0cmluZygxNik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgbGdRdWVyeS5wcm90b3R5cGUuX2dldFNlbGVjdG9yID0gZnVuY3Rpb24gKHNlbGVjdG9yLCBjb250ZXh0KSB7XHJcbiAgICAgICAgaWYgKGNvbnRleHQgPT09IHZvaWQgMCkgeyBjb250ZXh0ID0gZG9jdW1lbnQ7IH1cclxuICAgICAgICBpZiAodHlwZW9mIHNlbGVjdG9yICE9PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICByZXR1cm4gc2VsZWN0b3I7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50O1xyXG4gICAgICAgIHZhciBmbCA9IHNlbGVjdG9yLnN1YnN0cmluZygwLCAxKTtcclxuICAgICAgICBpZiAoZmwgPT09ICcjJykge1xyXG4gICAgICAgICAgICByZXR1cm4gY29udGV4dC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBsZ1F1ZXJ5LnByb3RvdHlwZS5fZWFjaCA9IGZ1bmN0aW9uIChmdW5jKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnNlbGVjdG9yKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5zZWxlY3Rvci5sZW5ndGggIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBbXS5mb3JFYWNoLmNhbGwodGhpcy5zZWxlY3RvciwgZnVuYyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBmdW5jKHRoaXMuc2VsZWN0b3IsIDApO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICBsZ1F1ZXJ5LnByb3RvdHlwZS5fc2V0Q3NzVmVuZG9yUHJlZml4ID0gZnVuY3Rpb24gKGVsLCBjc3NQcm9wZXJ0eSwgdmFsdWUpIHtcclxuICAgICAgICAvLyBwcmV0dGllci1pZ25vcmVcclxuICAgICAgICB2YXIgcHJvcGVydHkgPSBjc3NQcm9wZXJ0eS5yZXBsYWNlKC8tKFthLXpdKS9naSwgZnVuY3Rpb24gKHMsIGdyb3VwMSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZ3JvdXAxLnRvVXBwZXJDYXNlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKHRoaXMuY3NzVmVuZGVyUHJlZml4ZXMuaW5kZXhPZihwcm9wZXJ0eSkgIT09IC0xKSB7XHJcbiAgICAgICAgICAgIGVsLnN0eWxlW3Byb3BlcnR5LmNoYXJBdCgwKS50b0xvd2VyQ2FzZSgpICsgcHJvcGVydHkuc2xpY2UoMSldID0gdmFsdWU7XHJcbiAgICAgICAgICAgIGVsLnN0eWxlWyd3ZWJraXQnICsgcHJvcGVydHldID0gdmFsdWU7XHJcbiAgICAgICAgICAgIGVsLnN0eWxlWydtb3onICsgcHJvcGVydHldID0gdmFsdWU7XHJcbiAgICAgICAgICAgIGVsLnN0eWxlWydtcycgKyBwcm9wZXJ0eV0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgZWwuc3R5bGVbJ28nICsgcHJvcGVydHldID0gdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBlbC5zdHlsZVtwcm9wZXJ0eV0gPSB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgbGdRdWVyeS5wcm90b3R5cGUuX2dldEZpcnN0RWwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc2VsZWN0b3IgJiYgdGhpcy5zZWxlY3Rvci5sZW5ndGggIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZWxlY3RvclswXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNlbGVjdG9yO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBsZ1F1ZXJ5LnByb3RvdHlwZS5pc0V2ZW50TWF0Y2hlZCA9IGZ1bmN0aW9uIChldmVudCwgZXZlbnROYW1lKSB7XHJcbiAgICAgICAgdmFyIGV2ZW50TmFtZXNwYWNlID0gZXZlbnROYW1lLnNwbGl0KCcuJyk7XHJcbiAgICAgICAgcmV0dXJuIGV2ZW50XHJcbiAgICAgICAgICAgIC5zcGxpdCgnLicpXHJcbiAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGU7IH0pXHJcbiAgICAgICAgICAgIC5ldmVyeShmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXZlbnROYW1lc3BhY2UuaW5kZXhPZihlKSAhPT0gLTE7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgbGdRdWVyeS5wcm90b3R5cGUuYXR0ciA9IGZ1bmN0aW9uIChhdHRyLCB2YWx1ZSkge1xyXG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5maXJzdEVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5maXJzdEVsZW1lbnQuZ2V0QXR0cmlidXRlKGF0dHIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9lYWNoKGZ1bmN0aW9uIChlbCkge1xyXG4gICAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoYXR0ciwgdmFsdWUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIGxnUXVlcnkucHJvdG90eXBlLmZpbmQgPSBmdW5jdGlvbiAoc2VsZWN0b3IpIHtcclxuICAgICAgICByZXR1cm4gJExHKHRoaXMuX2dldFNlbGVjdG9yKHNlbGVjdG9yLCB0aGlzLnNlbGVjdG9yKSk7XHJcbiAgICB9O1xyXG4gICAgbGdRdWVyeS5wcm90b3R5cGUuZmlyc3QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc2VsZWN0b3IgJiYgdGhpcy5zZWxlY3Rvci5sZW5ndGggIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gJExHKHRoaXMuc2VsZWN0b3JbMF0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuICRMRyh0aGlzLnNlbGVjdG9yKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgbGdRdWVyeS5wcm90b3R5cGUuZXEgPSBmdW5jdGlvbiAoaW5kZXgpIHtcclxuICAgICAgICByZXR1cm4gJExHKHRoaXMuc2VsZWN0b3JbaW5kZXhdKTtcclxuICAgIH07XHJcbiAgICBsZ1F1ZXJ5LnByb3RvdHlwZS5wYXJlbnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuICRMRyh0aGlzLnNlbGVjdG9yLnBhcmVudEVsZW1lbnQpO1xyXG4gICAgfTtcclxuICAgIGxnUXVlcnkucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0Rmlyc3RFbCgpO1xyXG4gICAgfTtcclxuICAgIGxnUXVlcnkucHJvdG90eXBlLnJlbW92ZUF0dHIgPSBmdW5jdGlvbiAoYXR0cmlidXRlcykge1xyXG4gICAgICAgIHZhciBhdHRycyA9IGF0dHJpYnV0ZXMuc3BsaXQoJyAnKTtcclxuICAgICAgICB0aGlzLl9lYWNoKGZ1bmN0aW9uIChlbCkge1xyXG4gICAgICAgICAgICBhdHRycy5mb3JFYWNoKGZ1bmN0aW9uIChhdHRyKSB7IHJldHVybiBlbC5yZW1vdmVBdHRyaWJ1dGUoYXR0cik7IH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIGxnUXVlcnkucHJvdG90eXBlLndyYXAgPSBmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmZpcnN0RWxlbWVudCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHdyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICB3cmFwcGVyLmNsYXNzTmFtZSA9IGNsYXNzTmFtZTtcclxuICAgICAgICB0aGlzLmZpcnN0RWxlbWVudC5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh3cmFwcGVyLCB0aGlzLmZpcnN0RWxlbWVudCk7XHJcbiAgICAgICAgdGhpcy5maXJzdEVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmZpcnN0RWxlbWVudCk7XHJcbiAgICAgICAgd3JhcHBlci5hcHBlbmRDaGlsZCh0aGlzLmZpcnN0RWxlbWVudCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgbGdRdWVyeS5wcm90b3R5cGUuYWRkQ2xhc3MgPSBmdW5jdGlvbiAoY2xhc3NOYW1lcykge1xyXG4gICAgICAgIGlmIChjbGFzc05hbWVzID09PSB2b2lkIDApIHsgY2xhc3NOYW1lcyA9ICcnOyB9XHJcbiAgICAgICAgdGhpcy5fZWFjaChmdW5jdGlvbiAoZWwpIHtcclxuICAgICAgICAgICAgLy8gSUUgZG9lc24ndCBzdXBwb3J0IG11bHRpcGxlIGFyZ3VtZW50c1xyXG4gICAgICAgICAgICBjbGFzc05hbWVzLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2xhc3NOYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZWwuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICBsZ1F1ZXJ5LnByb3RvdHlwZS5yZW1vdmVDbGFzcyA9IGZ1bmN0aW9uIChjbGFzc05hbWVzKSB7XHJcbiAgICAgICAgdGhpcy5fZWFjaChmdW5jdGlvbiAoZWwpIHtcclxuICAgICAgICAgICAgLy8gSUUgZG9lc24ndCBzdXBwb3J0IG11bHRpcGxlIGFyZ3VtZW50c1xyXG4gICAgICAgICAgICBjbGFzc05hbWVzLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2xhc3NOYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICBsZ1F1ZXJ5LnByb3RvdHlwZS5oYXNDbGFzcyA9IGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcclxuICAgICAgICBpZiAoIXRoaXMuZmlyc3RFbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZmlyc3RFbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpO1xyXG4gICAgfTtcclxuICAgIGxnUXVlcnkucHJvdG90eXBlLmhhc0F0dHJpYnV0ZSA9IGZ1bmN0aW9uIChhdHRyaWJ1dGUpIHtcclxuICAgICAgICBpZiAoIXRoaXMuZmlyc3RFbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZmlyc3RFbGVtZW50Lmhhc0F0dHJpYnV0ZShhdHRyaWJ1dGUpO1xyXG4gICAgfTtcclxuICAgIGxnUXVlcnkucHJvdG90eXBlLnRvZ2dsZUNsYXNzID0gZnVuY3Rpb24gKGNsYXNzTmFtZSkge1xyXG4gICAgICAgIGlmICghdGhpcy5maXJzdEVsZW1lbnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmhhc0NsYXNzKGNsYXNzTmFtZSkpIHtcclxuICAgICAgICAgICAgdGhpcy5yZW1vdmVDbGFzcyhjbGFzc05hbWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5hZGRDbGFzcyhjbGFzc05hbWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICBsZ1F1ZXJ5LnByb3RvdHlwZS5jc3MgPSBmdW5jdGlvbiAocHJvcGVydHksIHZhbHVlKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLl9lYWNoKGZ1bmN0aW9uIChlbCkge1xyXG4gICAgICAgICAgICBfdGhpcy5fc2V0Q3NzVmVuZG9yUHJlZml4KGVsLCBwcm9wZXJ0eSwgdmFsdWUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIC8vIE5lZWQgdG8gcGFzcyBzZXBhcmF0ZSBuYW1lc3BhY2VzIGZvciBzZXBhcmF0ZSBlbGVtZW50c1xyXG4gICAgbGdRdWVyeS5wcm90b3R5cGUub24gPSBmdW5jdGlvbiAoZXZlbnRzLCBsaXN0ZW5lcikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgaWYgKCF0aGlzLnNlbGVjdG9yKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBldmVudHMuc3BsaXQoJyAnKS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkobGdRdWVyeS5ldmVudExpc3RlbmVyc1tldmVudF0pKSB7XHJcbiAgICAgICAgICAgICAgICBsZ1F1ZXJ5LmV2ZW50TGlzdGVuZXJzW2V2ZW50XSA9IFtdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxnUXVlcnkuZXZlbnRMaXN0ZW5lcnNbZXZlbnRdLnB1c2gobGlzdGVuZXIpO1xyXG4gICAgICAgICAgICBfdGhpcy5zZWxlY3Rvci5hZGRFdmVudExpc3RlbmVyKGV2ZW50LnNwbGl0KCcuJylbMF0sIGxpc3RlbmVyKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICAvLyBAdG9kbyAtIHRlc3QgdGhpc1xyXG4gICAgbGdRdWVyeS5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uIChldmVudCwgbGlzdGVuZXIpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMub24oZXZlbnQsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgX3RoaXMub2ZmKGV2ZW50KTtcclxuICAgICAgICAgICAgbGlzdGVuZXIoZXZlbnQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIGxnUXVlcnkucHJvdG90eXBlLm9mZiA9IGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgaWYgKCF0aGlzLnNlbGVjdG9yKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBPYmplY3Qua2V5cyhsZ1F1ZXJ5LmV2ZW50TGlzdGVuZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudE5hbWUpIHtcclxuICAgICAgICAgICAgaWYgKF90aGlzLmlzRXZlbnRNYXRjaGVkKGV2ZW50LCBldmVudE5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICBsZ1F1ZXJ5LmV2ZW50TGlzdGVuZXJzW2V2ZW50TmFtZV0uZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5zZWxlY3Rvci5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZS5zcGxpdCgnLicpWzBdLCBsaXN0ZW5lcik7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGxnUXVlcnkuZXZlbnRMaXN0ZW5lcnNbZXZlbnROYW1lXSA9IFtdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgbGdRdWVyeS5wcm90b3R5cGUudHJpZ2dlciA9IGZ1bmN0aW9uIChldmVudCwgZGV0YWlsKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmZpcnN0RWxlbWVudCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGN1c3RvbUV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KGV2ZW50LnNwbGl0KCcuJylbMF0sIHtcclxuICAgICAgICAgICAgZGV0YWlsOiBkZXRhaWwgfHwgbnVsbCxcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmZpcnN0RWxlbWVudC5kaXNwYXRjaEV2ZW50KGN1c3RvbUV2ZW50KTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICAvLyBEb2VzIG5vdCBzdXBwb3J0IElFXHJcbiAgICBsZ1F1ZXJ5LnByb3RvdHlwZS5sb2FkID0gZnVuY3Rpb24gKHVybCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgZmV0Y2godXJsKVxyXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzKSB7IHJldHVybiByZXMudGV4dCgpOyB9KVxyXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoaHRtbCkge1xyXG4gICAgICAgICAgICBfdGhpcy5zZWxlY3Rvci5pbm5lckhUTUwgPSBodG1sO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIGxnUXVlcnkucHJvdG90eXBlLmh0bWwgPSBmdW5jdGlvbiAoaHRtbCkge1xyXG4gICAgICAgIGlmIChodG1sID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmZpcnN0RWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZpcnN0RWxlbWVudC5pbm5lckhUTUw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX2VhY2goZnVuY3Rpb24gKGVsKSB7XHJcbiAgICAgICAgICAgIGVsLmlubmVySFRNTCA9IGh0bWw7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgbGdRdWVyeS5wcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24gKGh0bWwpIHtcclxuICAgICAgICB0aGlzLl9lYWNoKGZ1bmN0aW9uIChlbCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGh0bWwgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICBlbC5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsIGh0bWwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZWwuYXBwZW5kQ2hpbGQoaHRtbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICBsZ1F1ZXJ5LnByb3RvdHlwZS5wcmVwZW5kID0gZnVuY3Rpb24gKGh0bWwpIHtcclxuICAgICAgICB0aGlzLl9lYWNoKGZ1bmN0aW9uIChlbCkge1xyXG4gICAgICAgICAgICBlbC5pbnNlcnRBZGphY2VudEhUTUwoJ2FmdGVyYmVnaW4nLCBodG1sKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICBsZ1F1ZXJ5LnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5fZWFjaChmdW5jdGlvbiAoZWwpIHtcclxuICAgICAgICAgICAgZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgbGdRdWVyeS5wcm90b3R5cGUuZW1wdHkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5fZWFjaChmdW5jdGlvbiAoZWwpIHtcclxuICAgICAgICAgICAgZWwuaW5uZXJIVE1MID0gJyc7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgbGdRdWVyeS5wcm90b3R5cGUuc2Nyb2xsVG9wID0gZnVuY3Rpb24gKHNjcm9sbFRvcCkge1xyXG4gICAgICAgIGlmIChzY3JvbGxUb3AgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCA9IHNjcm9sbFRvcDtcclxuICAgICAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCA9IHNjcm9sbFRvcDtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gKHdpbmRvdy5wYWdlWU9mZnNldCB8fFxyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCB8fFxyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5zY3JvbGxUb3AgfHxcclxuICAgICAgICAgICAgICAgIDApO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBsZ1F1ZXJ5LnByb3RvdHlwZS5zY3JvbGxMZWZ0ID0gZnVuY3Rpb24gKHNjcm9sbExlZnQpIHtcclxuICAgICAgICBpZiAoc2Nyb2xsTGVmdCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc2Nyb2xsTGVmdCA9IHNjcm9sbExlZnQ7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0ID0gc2Nyb2xsTGVmdDtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gKHdpbmRvdy5wYWdlWE9mZnNldCB8fFxyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnQgfHxcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc2Nyb2xsTGVmdCB8fFxyXG4gICAgICAgICAgICAgICAgMCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGxnUXVlcnkucHJvdG90eXBlLm9mZnNldCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuZmlyc3RFbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBsZWZ0OiAwLFxyXG4gICAgICAgICAgICAgICAgdG9wOiAwLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgcmVjdCA9IHRoaXMuZmlyc3RFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgIHZhciBib2R5TWFyZ2luTGVmdCA9ICRMRygnYm9keScpLnN0eWxlKCkubWFyZ2luTGVmdDtcclxuICAgICAgICAvLyBNaW51cyBib2R5IG1hcmdpbiAtIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzMwNzExNTQ4L2lzLWdldGJvdW5kaW5nY2xpZW50cmVjdC1sZWZ0LXJldHVybmluZy1hLXdyb25nLXZhbHVlXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgbGVmdDogcmVjdC5sZWZ0IC0gcGFyc2VGbG9hdChib2R5TWFyZ2luTGVmdCkgKyB0aGlzLnNjcm9sbExlZnQoKSxcclxuICAgICAgICAgICAgdG9wOiByZWN0LnRvcCArIHRoaXMuc2Nyb2xsVG9wKCksXHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcbiAgICBsZ1F1ZXJ5LnByb3RvdHlwZS5zdHlsZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuZmlyc3RFbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7fTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLmZpcnN0RWxlbWVudC5jdXJyZW50U3R5bGUgfHxcclxuICAgICAgICAgICAgd2luZG93LmdldENvbXB1dGVkU3R5bGUodGhpcy5maXJzdEVsZW1lbnQpKTtcclxuICAgIH07XHJcbiAgICAvLyBXaWR0aCB3aXRob3V0IHBhZGRpbmcgYW5kIGJvcmRlciBldmVuIGlmIGJveC1zaXppbmcgaXMgdXNlZC5cclxuICAgIGxnUXVlcnkucHJvdG90eXBlLndpZHRoID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBzdHlsZSA9IHRoaXMuc3R5bGUoKTtcclxuICAgICAgICByZXR1cm4gKHRoaXMuZmlyc3RFbGVtZW50LmNsaWVudFdpZHRoIC1cclxuICAgICAgICAgICAgcGFyc2VGbG9hdChzdHlsZS5wYWRkaW5nTGVmdCkgLVxyXG4gICAgICAgICAgICBwYXJzZUZsb2F0KHN0eWxlLnBhZGRpbmdSaWdodCkpO1xyXG4gICAgfTtcclxuICAgIC8vIEhlaWdodCB3aXRob3V0IHBhZGRpbmcgYW5kIGJvcmRlciBldmVuIGlmIGJveC1zaXppbmcgaXMgdXNlZC5cclxuICAgIGxnUXVlcnkucHJvdG90eXBlLmhlaWdodCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgc3R5bGUgPSB0aGlzLnN0eWxlKCk7XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLmZpcnN0RWxlbWVudC5jbGllbnRIZWlnaHQgLVxyXG4gICAgICAgICAgICBwYXJzZUZsb2F0KHN0eWxlLnBhZGRpbmdUb3ApIC1cclxuICAgICAgICAgICAgcGFyc2VGbG9hdChzdHlsZS5wYWRkaW5nQm90dG9tKSk7XHJcbiAgICB9O1xyXG4gICAgbGdRdWVyeS5ldmVudExpc3RlbmVycyA9IHt9O1xyXG4gICAgcmV0dXJuIGxnUXVlcnk7XHJcbn0oKSk7XHJcbmZ1bmN0aW9uICRMRyhzZWxlY3Rvcikge1xyXG4gICAgaW5pdExnUG9seWZpbGxzKCk7XHJcbiAgICByZXR1cm4gbmV3IGxnUXVlcnkoc2VsZWN0b3IpO1xyXG59XG5cbnZhciBkZWZhdWx0RHluYW1pY09wdGlvbnMgPSBbXHJcbiAgICAnc3JjJyxcclxuICAgICdzb3VyY2VzJyxcclxuICAgICdzdWJIdG1sJyxcclxuICAgICdzdWJIdG1sVXJsJyxcclxuICAgICdodG1sJyxcclxuICAgICd2aWRlbycsXHJcbiAgICAncG9zdGVyJyxcclxuICAgICdzbGlkZU5hbWUnLFxyXG4gICAgJ3Jlc3BvbnNpdmUnLFxyXG4gICAgJ3NyY3NldCcsXHJcbiAgICAnc2l6ZXMnLFxyXG4gICAgJ2lmcmFtZScsXHJcbiAgICAnZG93bmxvYWRVcmwnLFxyXG4gICAgJ2Rvd25sb2FkJyxcclxuICAgICd3aWR0aCcsXHJcbiAgICAnZmFjZWJvb2tTaGFyZVVybCcsXHJcbiAgICAndHdlZXRUZXh0JyxcclxuICAgICdpZnJhbWVUaXRsZScsXHJcbiAgICAndHdpdHRlclNoYXJlVXJsJyxcclxuICAgICdwaW50ZXJlc3RTaGFyZVVybCcsXHJcbiAgICAncGludGVyZXN0VGV4dCcsXHJcbiAgICAnZmJIdG1sJyxcclxuICAgICdkaXNxdXNJZGVudGlmaWVyJyxcclxuICAgICdkaXNxdXNVcmwnLFxyXG5dO1xyXG4vLyBDb252ZXJ0IGh0bWwgZGF0YS1hdHRyaWJ1dGUgdG8gY2FtYWxjYXNlXHJcbmZ1bmN0aW9uIGNvbnZlcnRUb0RhdGEoYXR0cikge1xyXG4gICAgLy8gRkluZCBhIHdheSBmb3IgbGdzaXplXHJcbiAgICBpZiAoYXR0ciA9PT0gJ2hyZWYnKSB7XHJcbiAgICAgICAgcmV0dXJuICdzcmMnO1xyXG4gICAgfVxyXG4gICAgYXR0ciA9IGF0dHIucmVwbGFjZSgnZGF0YS0nLCAnJyk7XHJcbiAgICBhdHRyID0gYXR0ci5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKSArIGF0dHIuc2xpY2UoMSk7XHJcbiAgICBhdHRyID0gYXR0ci5yZXBsYWNlKC8tKFthLXpdKS9nLCBmdW5jdGlvbiAoZykgeyByZXR1cm4gZ1sxXS50b1VwcGVyQ2FzZSgpOyB9KTtcclxuICAgIHJldHVybiBhdHRyO1xyXG59XHJcbnZhciB1dGlscyA9IHtcclxuICAgIC8qKlxyXG4gICAgICogZ2V0IHBvc3NpYmxlIHdpZHRoIGFuZCBoZWlnaHQgZnJvbSB0aGUgbGdTaXplIGF0dHJpYnV0ZS4gVXNlZCBmb3IgWm9vbUZyb21PcmlnaW4gb3B0aW9uXHJcbiAgICAgKi9cclxuICAgIGdldFNpemU6IGZ1bmN0aW9uIChlbCwgY29udGFpbmVyLCBzcGFjaW5nLCBkZWZhdWx0TGdTaXplKSB7XHJcbiAgICAgICAgaWYgKHNwYWNpbmcgPT09IHZvaWQgMCkgeyBzcGFjaW5nID0gMDsgfVxyXG4gICAgICAgIHZhciBMR2VsID0gJExHKGVsKTtcclxuICAgICAgICB2YXIgbGdTaXplID0gTEdlbC5hdHRyKCdkYXRhLWxnLXNpemUnKSB8fCBkZWZhdWx0TGdTaXplO1xyXG4gICAgICAgIGlmICghbGdTaXplKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGlzUmVzcG9uc2l2ZVNpemVzID0gbGdTaXplLnNwbGl0KCcsJyk7XHJcbiAgICAgICAgLy8gaWYgYXQtbGVhc3QgdHdvIHZpZXdwb3J0IHNpemVzIGFyZSBhdmFpbGFibGVcclxuICAgICAgICBpZiAoaXNSZXNwb25zaXZlU2l6ZXNbMV0pIHtcclxuICAgICAgICAgICAgdmFyIHdXaWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGlzUmVzcG9uc2l2ZVNpemVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgc2l6ZV8xID0gaXNSZXNwb25zaXZlU2l6ZXNbaV07XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVzcG9uc2l2ZVdpZHRoID0gcGFyc2VJbnQoc2l6ZV8xLnNwbGl0KCctJylbMl0sIDEwKTtcclxuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zaXZlV2lkdGggPiB3V2lkdGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZ1NpemUgPSBzaXplXzE7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyB0YWtlIGxhc3QgaXRlbSBhcyBsYXN0IG9wdGlvblxyXG4gICAgICAgICAgICAgICAgaWYgKGkgPT09IGlzUmVzcG9uc2l2ZVNpemVzLmxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZ1NpemUgPSBzaXplXzE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHNpemUgPSBsZ1NpemUuc3BsaXQoJy0nKTtcclxuICAgICAgICB2YXIgd2lkdGggPSBwYXJzZUludChzaXplWzBdLCAxMCk7XHJcbiAgICAgICAgdmFyIGhlaWdodCA9IHBhcnNlSW50KHNpemVbMV0sIDEwKTtcclxuICAgICAgICB2YXIgY1dpZHRoID0gY29udGFpbmVyLndpZHRoKCk7XHJcbiAgICAgICAgdmFyIGNIZWlnaHQgPSBjb250YWluZXIuaGVpZ2h0KCkgLSBzcGFjaW5nO1xyXG4gICAgICAgIHZhciBtYXhXaWR0aCA9IE1hdGgubWluKGNXaWR0aCwgd2lkdGgpO1xyXG4gICAgICAgIHZhciBtYXhIZWlnaHQgPSBNYXRoLm1pbihjSGVpZ2h0LCBoZWlnaHQpO1xyXG4gICAgICAgIHZhciByYXRpbyA9IE1hdGgubWluKG1heFdpZHRoIC8gd2lkdGgsIG1heEhlaWdodCAvIGhlaWdodCk7XHJcbiAgICAgICAgcmV0dXJuIHsgd2lkdGg6IHdpZHRoICogcmF0aW8sIGhlaWdodDogaGVpZ2h0ICogcmF0aW8gfTtcclxuICAgIH0sXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjIEdldCB0cmFuc2Zvcm0gdmFsdWUgYmFzZWQgb24gdGhlIGltYWdlU2l6ZS4gVXNlZCBmb3IgWm9vbUZyb21PcmlnaW4gb3B0aW9uXHJcbiAgICAgKiBAcGFyYW0ge2pRdWVyeSBFbGVtZW50fVxyXG4gICAgICogQHJldHVybnMge1N0cmluZ30gVHJhbnNmb3JtIENTUyBzdHJpbmdcclxuICAgICAqL1xyXG4gICAgZ2V0VHJhbnNmb3JtOiBmdW5jdGlvbiAoZWwsIGNvbnRhaW5lciwgdG9wLCBib3R0b20sIGltYWdlU2l6ZSkge1xyXG4gICAgICAgIGlmICghaW1hZ2VTaXplKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIExHZWwgPSAkTEcoZWwpLmZpbmQoJ2ltZycpLmZpcnN0KCk7XHJcbiAgICAgICAgaWYgKCFMR2VsLmdldCgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGNvbnRhaW5lclJlY3QgPSBjb250YWluZXIuZ2V0KCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgdmFyIHdXaWR0aCA9IGNvbnRhaW5lclJlY3Qud2lkdGg7XHJcbiAgICAgICAgLy8gdXNpbmcgaW5uZXJXaWR0aCB0byBpbmNsdWRlIG1vYmlsZSBzYWZhcmkgYm90dG9tIGJhclxyXG4gICAgICAgIHZhciB3SGVpZ2h0ID0gY29udGFpbmVyLmhlaWdodCgpIC0gKHRvcCArIGJvdHRvbSk7XHJcbiAgICAgICAgdmFyIGVsV2lkdGggPSBMR2VsLndpZHRoKCk7XHJcbiAgICAgICAgdmFyIGVsSGVpZ2h0ID0gTEdlbC5oZWlnaHQoKTtcclxuICAgICAgICB2YXIgZWxTdHlsZSA9IExHZWwuc3R5bGUoKTtcclxuICAgICAgICB2YXIgeCA9ICh3V2lkdGggLSBlbFdpZHRoKSAvIDIgLVxyXG4gICAgICAgICAgICBMR2VsLm9mZnNldCgpLmxlZnQgK1xyXG4gICAgICAgICAgICAocGFyc2VGbG9hdChlbFN0eWxlLnBhZGRpbmdMZWZ0KSB8fCAwKSArXHJcbiAgICAgICAgICAgIChwYXJzZUZsb2F0KGVsU3R5bGUuYm9yZGVyTGVmdCkgfHwgMCkgK1xyXG4gICAgICAgICAgICAkTEcod2luZG93KS5zY3JvbGxMZWZ0KCkgK1xyXG4gICAgICAgICAgICBjb250YWluZXJSZWN0LmxlZnQ7XHJcbiAgICAgICAgdmFyIHkgPSAod0hlaWdodCAtIGVsSGVpZ2h0KSAvIDIgLVxyXG4gICAgICAgICAgICBMR2VsLm9mZnNldCgpLnRvcCArXHJcbiAgICAgICAgICAgIChwYXJzZUZsb2F0KGVsU3R5bGUucGFkZGluZ1RvcCkgfHwgMCkgK1xyXG4gICAgICAgICAgICAocGFyc2VGbG9hdChlbFN0eWxlLmJvcmRlclRvcCkgfHwgMCkgK1xyXG4gICAgICAgICAgICAkTEcod2luZG93KS5zY3JvbGxUb3AoKSArXHJcbiAgICAgICAgICAgIHRvcDtcclxuICAgICAgICB2YXIgc2NYID0gZWxXaWR0aCAvIGltYWdlU2l6ZS53aWR0aDtcclxuICAgICAgICB2YXIgc2NZID0gZWxIZWlnaHQgLyBpbWFnZVNpemUuaGVpZ2h0O1xyXG4gICAgICAgIHZhciB0cmFuc2Zvcm0gPSAndHJhbnNsYXRlM2QoJyArXHJcbiAgICAgICAgICAgICh4ICo9IC0xKSArXHJcbiAgICAgICAgICAgICdweCwgJyArXHJcbiAgICAgICAgICAgICh5ICo9IC0xKSArXHJcbiAgICAgICAgICAgICdweCwgMCkgc2NhbGUzZCgnICtcclxuICAgICAgICAgICAgc2NYICtcclxuICAgICAgICAgICAgJywgJyArXHJcbiAgICAgICAgICAgIHNjWSArXHJcbiAgICAgICAgICAgICcsIDEpJztcclxuICAgICAgICByZXR1cm4gdHJhbnNmb3JtO1xyXG4gICAgfSxcclxuICAgIGdldElmcmFtZU1hcmt1cDogZnVuY3Rpb24gKGlmcmFtZVdpZHRoLCBpZnJhbWVIZWlnaHQsIGlmcmFtZU1heFdpZHRoLCBpZnJhbWVNYXhIZWlnaHQsIHNyYywgaWZyYW1lVGl0bGUpIHtcclxuICAgICAgICB2YXIgdGl0bGUgPSBpZnJhbWVUaXRsZSA/ICd0aXRsZT1cIicgKyBpZnJhbWVUaXRsZSArICdcIicgOiAnJztcclxuICAgICAgICByZXR1cm4gXCI8ZGl2IGNsYXNzPVxcXCJsZy12aWRlby1jb250IGxnLWhhcy1pZnJhbWVcXFwiIHN0eWxlPVxcXCJ3aWR0aDpcIiArIGlmcmFtZVdpZHRoICsgXCI7IG1heC13aWR0aDpcIiArIGlmcmFtZU1heFdpZHRoICsgXCI7IGhlaWdodDogXCIgKyBpZnJhbWVIZWlnaHQgKyBcIjsgbWF4LWhlaWdodDpcIiArIGlmcmFtZU1heEhlaWdodCArIFwiXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxpZnJhbWUgY2xhc3M9XFxcImxnLW9iamVjdFxcXCIgZnJhbWVib3JkZXI9XFxcIjBcXFwiIFwiICsgdGl0bGUgKyBcIiBzcmM9XFxcIlwiICsgc3JjICsgXCJcXFwiICBhbGxvd2Z1bGxzY3JlZW49XFxcInRydWVcXFwiPjwvaWZyYW1lPlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cIjtcclxuICAgIH0sXHJcbiAgICBnZXRJbWdNYXJrdXA6IGZ1bmN0aW9uIChpbmRleCwgc3JjLCBhbHRBdHRyLCBzcmNzZXQsIHNpemVzLCBzb3VyY2VzKSB7XHJcbiAgICAgICAgdmFyIHNyY3NldEF0dHIgPSBzcmNzZXQgPyBcInNyY3NldD1cXFwiXCIgKyBzcmNzZXQgKyBcIlxcXCJcIiA6ICcnO1xyXG4gICAgICAgIHZhciBzaXplc0F0dHIgPSBzaXplcyA/IFwic2l6ZXM9XFxcIlwiICsgc2l6ZXMgKyBcIlxcXCJcIiA6ICcnO1xyXG4gICAgICAgIHZhciBpbWdNYXJrdXAgPSBcIjxpbWcgXCIgKyBhbHRBdHRyICsgXCIgXCIgKyBzcmNzZXRBdHRyICsgXCIgIFwiICsgc2l6ZXNBdHRyICsgXCIgY2xhc3M9XFxcImxnLW9iamVjdCBsZy1pbWFnZVxcXCIgZGF0YS1pbmRleD1cXFwiXCIgKyBpbmRleCArIFwiXFxcIiBzcmM9XFxcIlwiICsgc3JjICsgXCJcXFwiIC8+XCI7XHJcbiAgICAgICAgdmFyIHNvdXJjZVRhZyA9ICcnO1xyXG4gICAgICAgIGlmIChzb3VyY2VzKSB7XHJcbiAgICAgICAgICAgIHZhciBzb3VyY2VPYmogPSB0eXBlb2Ygc291cmNlcyA9PT0gJ3N0cmluZycgPyBKU09OLnBhcnNlKHNvdXJjZXMpIDogc291cmNlcztcclxuICAgICAgICAgICAgc291cmNlVGFnID0gc291cmNlT2JqLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYXR0cnMgPSAnJztcclxuICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gRG8gbm90IHJlbW92ZSB0aGUgZmlyc3Qgc3BhY2UgYXMgaXQgaXMgcmVxdWlyZWQgdG8gc2VwYXJhdGUgdGhlIGF0dHJpYnV0ZXNcclxuICAgICAgICAgICAgICAgICAgICBhdHRycyArPSBcIiBcIiArIGtleSArIFwiPVxcXCJcIiArIHNvdXJjZVtrZXldICsgXCJcXFwiXCI7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcIjxzb3VyY2UgXCIgKyBhdHRycyArIFwiPjwvc291cmNlPlwiO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFwiXCIgKyBzb3VyY2VUYWcgKyBpbWdNYXJrdXA7XHJcbiAgICB9LFxyXG4gICAgLy8gR2V0IHNyYyBmcm9tIHJlc3BvbnNpdmUgc3JjXHJcbiAgICBnZXRSZXNwb25zaXZlU3JjOiBmdW5jdGlvbiAoc3JjSXRtcykge1xyXG4gICAgICAgIHZhciByc1dpZHRoID0gW107XHJcbiAgICAgICAgdmFyIHJzU3JjID0gW107XHJcbiAgICAgICAgdmFyIHNyYyA9ICcnO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3JjSXRtcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB2YXIgX3NyYyA9IHNyY0l0bXNbaV0uc3BsaXQoJyAnKTtcclxuICAgICAgICAgICAgLy8gTWFuYWdlIGVtcHR5IHNwYWNlXHJcbiAgICAgICAgICAgIGlmIChfc3JjWzBdID09PSAnJykge1xyXG4gICAgICAgICAgICAgICAgX3NyYy5zcGxpY2UoMCwgMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcnNTcmMucHVzaChfc3JjWzBdKTtcclxuICAgICAgICAgICAgcnNXaWR0aC5wdXNoKF9zcmNbMV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgd1dpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XHJcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCByc1dpZHRoLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgIGlmIChwYXJzZUludChyc1dpZHRoW2pdLCAxMCkgPiB3V2lkdGgpIHtcclxuICAgICAgICAgICAgICAgIHNyYyA9IHJzU3JjW2pdO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHNyYztcclxuICAgIH0sXHJcbiAgICBpc0ltYWdlTG9hZGVkOiBmdW5jdGlvbiAoaW1nKSB7XHJcbiAgICAgICAgaWYgKCFpbWcpXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAvLyBEdXJpbmcgdGhlIG9ubG9hZCBldmVudCwgSUUgY29ycmVjdGx5IGlkZW50aWZpZXMgYW55IGltYWdlcyB0aGF0XHJcbiAgICAgICAgLy8gd2VyZW7igJl0IGRvd25sb2FkZWQgYXMgbm90IGNvbXBsZXRlLiBPdGhlcnMgc2hvdWxkIHRvby4gR2Vja28tYmFzZWRcclxuICAgICAgICAvLyBicm93c2VycyBhY3QgbGlrZSBOUzQgaW4gdGhhdCB0aGV5IHJlcG9ydCB0aGlzIGluY29ycmVjdGx5LlxyXG4gICAgICAgIGlmICghaW1nLmNvbXBsZXRlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gSG93ZXZlciwgdGhleSBkbyBoYXZlIHR3byB2ZXJ5IHVzZWZ1bCBwcm9wZXJ0aWVzOiBuYXR1cmFsV2lkdGggYW5kXHJcbiAgICAgICAgLy8gbmF0dXJhbEhlaWdodC4gVGhlc2UgZ2l2ZSB0aGUgdHJ1ZSBzaXplIG9mIHRoZSBpbWFnZS4gSWYgaXQgZmFpbGVkXHJcbiAgICAgICAgLy8gdG8gbG9hZCwgZWl0aGVyIG9mIHRoZXNlIHNob3VsZCBiZSB6ZXJvLlxyXG4gICAgICAgIGlmIChpbWcubmF0dXJhbFdpZHRoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gTm8gb3RoZXIgd2F5IG9mIGNoZWNraW5nOiBhc3N1bWUgaXTigJlzIG9rLlxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfSxcclxuICAgIGdldFZpZGVvUG9zdGVyTWFya3VwOiBmdW5jdGlvbiAoX3Bvc3RlciwgZHVtbXlJbWcsIHZpZGVvQ29udFN0eWxlLCBwbGF5VmlkZW9TdHJpbmcsIF9pc1ZpZGVvKSB7XHJcbiAgICAgICAgdmFyIHZpZGVvQ2xhc3MgPSAnJztcclxuICAgICAgICBpZiAoX2lzVmlkZW8gJiYgX2lzVmlkZW8ueW91dHViZSkge1xyXG4gICAgICAgICAgICB2aWRlb0NsYXNzID0gJ2xnLWhhcy15b3V0dWJlJztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoX2lzVmlkZW8gJiYgX2lzVmlkZW8udmltZW8pIHtcclxuICAgICAgICAgICAgdmlkZW9DbGFzcyA9ICdsZy1oYXMtdmltZW8nO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmlkZW9DbGFzcyA9ICdsZy1oYXMtaHRtbDUnO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gXCI8ZGl2IGNsYXNzPVxcXCJsZy12aWRlby1jb250IFwiICsgdmlkZW9DbGFzcyArIFwiXFxcIiBzdHlsZT1cXFwiXCIgKyB2aWRlb0NvbnRTdHlsZSArIFwiXFxcIj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwibGctdmlkZW8tcGxheS1idXR0b25cXFwiPlxcbiAgICAgICAgICAgICAgICA8c3ZnXFxuICAgICAgICAgICAgICAgICAgICB2aWV3Qm94PVxcXCIwIDAgMjAgMjBcXFwiXFxuICAgICAgICAgICAgICAgICAgICBwcmVzZXJ2ZUFzcGVjdFJhdGlvPVxcXCJ4TWlkWU1pZFxcXCJcXG4gICAgICAgICAgICAgICAgICAgIGZvY3VzYWJsZT1cXFwiZmFsc2VcXFwiXFxuICAgICAgICAgICAgICAgICAgICBhcmlhLWxhYmVsbGVkYnk9XFxcIlwiICsgcGxheVZpZGVvU3RyaW5nICsgXCJcXFwiXFxuICAgICAgICAgICAgICAgICAgICByb2xlPVxcXCJpbWdcXFwiXFxuICAgICAgICAgICAgICAgICAgICBjbGFzcz1cXFwibGctdmlkZW8tcGxheS1pY29uXFxcIlxcbiAgICAgICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgICAgICA8dGl0bGU+XCIgKyBwbGF5VmlkZW9TdHJpbmcgKyBcIjwvdGl0bGU+XFxuICAgICAgICAgICAgICAgICAgICA8cG9seWdvbiBjbGFzcz1cXFwibGctdmlkZW8tcGxheS1pY29uLWlubmVyXFxcIiBwb2ludHM9XFxcIjEsMCAyMCwxMCAxLDIwXFxcIj48L3BvbHlnb24+XFxuICAgICAgICAgICAgICAgIDwvc3ZnPlxcbiAgICAgICAgICAgICAgICA8c3ZnIGNsYXNzPVxcXCJsZy12aWRlby1wbGF5LWljb24tYmdcXFwiIHZpZXdCb3g9XFxcIjAgMCA1MCA1MFxcXCIgZm9jdXNhYmxlPVxcXCJmYWxzZVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8Y2lyY2xlIGN4PVxcXCI1MCVcXFwiIGN5PVxcXCI1MCVcXFwiIHI9XFxcIjIwXFxcIj48L2NpcmNsZT48L3N2Zz5cXG4gICAgICAgICAgICAgICAgPHN2ZyBjbGFzcz1cXFwibGctdmlkZW8tcGxheS1pY29uLWNpcmNsZVxcXCIgdmlld0JveD1cXFwiMCAwIDUwIDUwXFxcIiBmb2N1c2FibGU9XFxcImZhbHNlXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxjaXJjbGUgY3g9XFxcIjUwJVxcXCIgY3k9XFxcIjUwJVxcXCIgcj1cXFwiMjBcXFwiPjwvY2lyY2xlPlxcbiAgICAgICAgICAgICAgICA8L3N2Zz5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICBcIiArIChkdW1teUltZyB8fCAnJykgKyBcIlxcbiAgICAgICAgICAgIDxpbWcgY2xhc3M9XFxcImxnLW9iamVjdCBsZy12aWRlby1wb3N0ZXJcXFwiIHNyYz1cXFwiXCIgKyBfcG9zdGVyICsgXCJcXFwiIC8+XFxuICAgICAgICA8L2Rpdj5cIjtcclxuICAgIH0sXHJcbiAgICBnZXRGb2N1c2FibGVFbGVtZW50czogZnVuY3Rpb24gKGNvbnRhaW5lcikge1xyXG4gICAgICAgIHZhciBlbGVtZW50cyA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCdhW2hyZWZdOm5vdChbZGlzYWJsZWRdKSwgYnV0dG9uOm5vdChbZGlzYWJsZWRdKSwgdGV4dGFyZWE6bm90KFtkaXNhYmxlZF0pLCBpbnB1dFt0eXBlPVwidGV4dFwiXTpub3QoW2Rpc2FibGVkXSksIGlucHV0W3R5cGU9XCJyYWRpb1wiXTpub3QoW2Rpc2FibGVkXSksIGlucHV0W3R5cGU9XCJjaGVja2JveFwiXTpub3QoW2Rpc2FibGVkXSksIHNlbGVjdDpub3QoW2Rpc2FibGVkXSknKTtcclxuICAgICAgICB2YXIgdmlzaWJsZUVsZW1lbnRzID0gW10uZmlsdGVyLmNhbGwoZWxlbWVudHMsIGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHZhciBzdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xyXG4gICAgICAgICAgICByZXR1cm4gc3R5bGUuZGlzcGxheSAhPT0gJ25vbmUnICYmIHN0eWxlLnZpc2liaWxpdHkgIT09ICdoaWRkZW4nO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiB2aXNpYmxlRWxlbWVudHM7XHJcbiAgICB9LFxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzYyBDcmVhdGUgZHluYW1pYyBlbGVtZW50cyBhcnJheSBmcm9tIGdhbGxlcnkgaXRlbXMgd2hlbiBkeW5hbWljIG9wdGlvbiBpcyBmYWxzZVxyXG4gICAgICogSXQgaGVscHMgdG8gYXZvaWQgZnJlcXVlbnQgRE9NIGludGVyYWN0aW9uXHJcbiAgICAgKiBhbmQgYXZvaWQgbXVsdGlwbGUgY2hlY2tzIGZvciBkeW5hbWljIGVsbWVudHNcclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IGR5bmFtaWNFbFxyXG4gICAgICovXHJcbiAgICBnZXREeW5hbWljT3B0aW9uczogZnVuY3Rpb24gKGl0ZW1zLCBleHRyYVByb3BzLCBnZXRDYXB0aW9uRnJvbVRpdGxlT3JBbHQsIGV4VGh1bWJJbWFnZSkge1xyXG4gICAgICAgIHZhciBkeW5hbWljRWxlbWVudHMgPSBbXTtcclxuICAgICAgICB2YXIgYXZhaWxhYmxlRHluYW1pY09wdGlvbnMgPSBfX3NwcmVhZEFycmF5cyhkZWZhdWx0RHluYW1pY09wdGlvbnMsIGV4dHJhUHJvcHMpO1xyXG4gICAgICAgIFtdLmZvckVhY2guY2FsbChpdGVtcywgZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICAgICAgdmFyIGR5bmFtaWNFbCA9IHt9O1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGl0ZW0uYXR0cmlidXRlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGF0dHIgPSBpdGVtLmF0dHJpYnV0ZXNbaV07XHJcbiAgICAgICAgICAgICAgICBpZiAoYXR0ci5zcGVjaWZpZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZHluYW1pY0F0dHIgPSBjb252ZXJ0VG9EYXRhKGF0dHIubmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxhYmVsID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGF2YWlsYWJsZUR5bmFtaWNPcHRpb25zLmluZGV4T2YoZHluYW1pY0F0dHIpID4gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWwgPSBkeW5hbWljQXR0cjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGR5bmFtaWNFbFtsYWJlbF0gPSBhdHRyLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgY3VycmVudEl0ZW0gPSAkTEcoaXRlbSk7XHJcbiAgICAgICAgICAgIHZhciBhbHQgPSBjdXJyZW50SXRlbS5maW5kKCdpbWcnKS5maXJzdCgpLmF0dHIoJ2FsdCcpO1xyXG4gICAgICAgICAgICB2YXIgdGl0bGUgPSBjdXJyZW50SXRlbS5hdHRyKCd0aXRsZScpO1xyXG4gICAgICAgICAgICB2YXIgdGh1bWIgPSBleFRodW1iSW1hZ2VcclxuICAgICAgICAgICAgICAgID8gY3VycmVudEl0ZW0uYXR0cihleFRodW1iSW1hZ2UpXHJcbiAgICAgICAgICAgICAgICA6IGN1cnJlbnRJdGVtLmZpbmQoJ2ltZycpLmZpcnN0KCkuYXR0cignc3JjJyk7XHJcbiAgICAgICAgICAgIGR5bmFtaWNFbC50aHVtYiA9IHRodW1iO1xyXG4gICAgICAgICAgICBpZiAoZ2V0Q2FwdGlvbkZyb21UaXRsZU9yQWx0ICYmICFkeW5hbWljRWwuc3ViSHRtbCkge1xyXG4gICAgICAgICAgICAgICAgZHluYW1pY0VsLnN1Ykh0bWwgPSB0aXRsZSB8fCBhbHQgfHwgJyc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZHluYW1pY0VsLmFsdCA9IGFsdCB8fCB0aXRsZSB8fCAnJztcclxuICAgICAgICAgICAgZHluYW1pY0VsZW1lbnRzLnB1c2goZHluYW1pY0VsKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gZHluYW1pY0VsZW1lbnRzO1xyXG4gICAgfSxcclxuICAgIGlzTW9iaWxlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIC9pUGhvbmV8aVBhZHxpUG9kfEFuZHJvaWQvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xyXG4gICAgfSxcclxuICAgIC8qKlxyXG4gICAgICogQGRlc2MgQ2hlY2sgdGhlIGdpdmVuIHNyYyBpcyB2aWRlb1xyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHNyY1xyXG4gICAgICogQHJldHVybiB7T2JqZWN0fSB2aWRlbyB0eXBlXHJcbiAgICAgKiBFeDp7IHlvdXR1YmUgIDogIFtcIi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9YzBhc0pnU3l4Y1lcIiwgXCJjMGFzSmdTeXhjWVwiXSB9XHJcbiAgICAgKlxyXG4gICAgICogQHRvZG8gLSB0aGlzIGluZm9ybWF0aW9uIGNhbiBiZSBtb3ZlZCB0byBkeW5hbWljRWwgdG8gYXZvaWQgZnJlcXVlbnQgY2FsbHNcclxuICAgICAqL1xyXG4gICAgaXNWaWRlbzogZnVuY3Rpb24gKHNyYywgaXNIVE1MNVZJZGVvLCBpbmRleCkge1xyXG4gICAgICAgIGlmICghc3JjKSB7XHJcbiAgICAgICAgICAgIGlmIChpc0hUTUw1VklkZW8pIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaHRtbDU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignbGlnaHRHYWxsZXJ5IDotIGRhdGEtc3JjIGlzIG5vdCBwcm92aWRlZCBvbiBzbGlkZSBpdGVtICcgK1xyXG4gICAgICAgICAgICAgICAgICAgIChpbmRleCArIDEpICtcclxuICAgICAgICAgICAgICAgICAgICAnLiBQbGVhc2UgbWFrZSBzdXJlIHRoZSBzZWxlY3RvciBwcm9wZXJ0eSBpcyBwcm9wZXJseSBjb25maWd1cmVkLiBNb3JlIGluZm8gLSBodHRwczovL3d3dy5saWdodGdhbGxlcnlqcy5jb20vZGVtb3MvaHRtbC1tYXJrdXAvJyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHlvdXR1YmUgPSBzcmMubWF0Y2goL1xcL1xcLyg/Ond3d1xcLik/eW91dHUoPzpcXC5iZXxiZVxcLmNvbXxiZS1ub2Nvb2tpZVxcLmNvbSlcXC8oPzp3YXRjaFxcP3Y9fGVtYmVkXFwvKT8oW2EtejAtOVxcLVxcX1xcJV0rKShbXFwmfD9dW1xcU10qKSovaSk7XHJcbiAgICAgICAgdmFyIHZpbWVvID0gc3JjLm1hdGNoKC9cXC9cXC8oPzp3d3dcXC4pPyg/OnBsYXllclxcLik/dmltZW8uY29tXFwvKD86dmlkZW9cXC8pPyhbMC05YS16XFwtX10rKSguKik/L2kpO1xyXG4gICAgICAgIHZhciB3aXN0aWEgPSBzcmMubWF0Y2goL2h0dHBzPzpcXC9cXC8oLispPyh3aXN0aWFcXC5jb218d2lcXC5zdClcXC8obWVkaWFzfGVtYmVkKVxcLyhbMC05YS16XFwtX10rKSguKikvKTtcclxuICAgICAgICBpZiAoeW91dHViZSkge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgeW91dHViZTogeW91dHViZSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodmltZW8pIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHZpbWVvOiB2aW1lbyxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAod2lzdGlhKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICB3aXN0aWE6IHdpc3RpYSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG59O1xuXG4vLyBAcmVmIC0gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzk3MTg0MS9ob3ctdG8tcmVzaXplLWltYWdlcy1wcm9wb3J0aW9uYWxseS1rZWVwaW5nLXRoZS1hc3BlY3QtcmF0aW9cclxuLy8gQHJlZiAtIGh0dHBzOi8vMmFsaXR5LmNvbS8yMDE3LzA0L3NldHRpbmctdXAtbXVsdGktcGxhdGZvcm0tcGFja2FnZXMuaHRtbFxyXG4vLyBVbmlxdWUgaWQgZm9yIGVhY2ggZ2FsbGVyeVxyXG52YXIgbGdJZCA9IDA7XHJcbnZhciBMaWdodEdhbGxlcnkgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBMaWdodEdhbGxlcnkoZWxlbWVudCwgb3B0aW9ucykge1xyXG4gICAgICAgIHRoaXMubGdPcGVuZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmluZGV4ID0gMDtcclxuICAgICAgICAvLyBsaWdodEdhbGxlcnkgbW9kdWxlc1xyXG4gICAgICAgIHRoaXMucGx1Z2lucyA9IFtdO1xyXG4gICAgICAgIC8vIGZhbHNlIHdoZW4gbGlnaHRHYWxsZXJ5IGxvYWQgZmlyc3Qgc2xpZGUgY29udGVudDtcclxuICAgICAgICB0aGlzLmxHYWxsZXJ5T24gPSBmYWxzZTtcclxuICAgICAgICAvLyBUcnVlIHdoZW4gYSBzbGlkZSBhbmltYXRpb24gaXMgaW4gcHJvZ3Jlc3NcclxuICAgICAgICB0aGlzLmxnQnVzeSA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuY3VycmVudEl0ZW1zSW5Eb20gPSBbXTtcclxuICAgICAgICAvLyBTY3JvbGwgdG9wIHZhbHVlIGJlZm9yZSBsaWdodEdhbGxlcnkgaXMgb3BlbmVkXHJcbiAgICAgICAgdGhpcy5wcmV2U2Nyb2xsVG9wID0gMDtcclxuICAgICAgICB0aGlzLmJvZHlQYWRkaW5nUmlnaHQgPSAwO1xyXG4gICAgICAgIHRoaXMuaXNEdW1teUltYWdlUmVtb3ZlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuZHJhZ09yU3dpcGVFbmFibGVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5tZWRpYUNvbnRhaW5lclBvc2l0aW9uID0ge1xyXG4gICAgICAgICAgICB0b3A6IDAsXHJcbiAgICAgICAgICAgIGJvdHRvbTogMCxcclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmICghZWxlbWVudCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcbiAgICAgICAgbGdJZCsrO1xyXG4gICAgICAgIHRoaXMubGdJZCA9IGxnSWQ7XHJcbiAgICAgICAgdGhpcy5lbCA9IGVsZW1lbnQ7XHJcbiAgICAgICAgdGhpcy5MR2VsID0gJExHKGVsZW1lbnQpO1xyXG4gICAgICAgIHRoaXMuZ2VuZXJhdGVTZXR0aW5ncyhvcHRpb25zKTtcclxuICAgICAgICB0aGlzLmJ1aWxkTW9kdWxlcygpO1xyXG4gICAgICAgIC8vIFdoZW4gdXNpbmcgZHluYW1pYyBtb2RlLCBlbnN1cmUgZHluYW1pY0VsIGlzIGFuIGFycmF5XHJcbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuZHluYW1pYyAmJlxyXG4gICAgICAgICAgICB0aGlzLnNldHRpbmdzLmR5bmFtaWNFbCAhPT0gdW5kZWZpbmVkICYmXHJcbiAgICAgICAgICAgICFBcnJheS5pc0FycmF5KHRoaXMuc2V0dGluZ3MuZHluYW1pY0VsKSkge1xyXG4gICAgICAgICAgICB0aHJvdyAnV2hlbiB1c2luZyBkeW5hbWljIG1vZGUsIHlvdSBtdXN0IGFsc28gZGVmaW5lIGR5bmFtaWNFbCBhcyBhbiBBcnJheS4nO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmdhbGxlcnlJdGVtcyA9IHRoaXMuZ2V0SXRlbXMoKTtcclxuICAgICAgICB0aGlzLm5vcm1hbGl6ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgLy8gR2FsbGVyeSBpdGVtc1xyXG4gICAgICAgIHRoaXMuaW5pdCgpO1xyXG4gICAgICAgIHRoaXMudmFsaWRhdGVMaWNlbnNlKCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLmdlbmVyYXRlU2V0dGluZ3MgPSBmdW5jdGlvbiAob3B0aW9ucykge1xyXG4gICAgICAgIC8vIGxpZ2h0R2FsbGVyeSBzZXR0aW5nc1xyXG4gICAgICAgIHRoaXMuc2V0dGluZ3MgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgbGlnaHRHYWxsZXJ5Q29yZVNldHRpbmdzKSwgb3B0aW9ucyk7XHJcbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuaXNNb2JpbGUgJiZcclxuICAgICAgICAgICAgdHlwZW9mIHRoaXMuc2V0dGluZ3MuaXNNb2JpbGUgPT09ICdmdW5jdGlvbidcclxuICAgICAgICAgICAgPyB0aGlzLnNldHRpbmdzLmlzTW9iaWxlKClcclxuICAgICAgICAgICAgOiB1dGlscy5pc01vYmlsZSgpKSB7XHJcbiAgICAgICAgICAgIHZhciBtb2JpbGVTZXR0aW5ncyA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCB0aGlzLnNldHRpbmdzLm1vYmlsZVNldHRpbmdzKSwgdGhpcy5zZXR0aW5ncy5tb2JpbGVTZXR0aW5ncyk7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0dGluZ3MgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgdGhpcy5zZXR0aW5ncyksIG1vYmlsZVNldHRpbmdzKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS5ub3JtYWxpemVTZXR0aW5ncyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5zbGlkZUVuZEFuaW1hdGlvbikge1xyXG4gICAgICAgICAgICB0aGlzLnNldHRpbmdzLmhpZGVDb250cm9sT25FbmQgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCF0aGlzLnNldHRpbmdzLmNsb3NhYmxlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0dGluZ3Muc3dpcGVUb0Nsb3NlID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIEFuZCByZXNldCBpdCBvbiBjbG9zZSB0byBnZXQgdGhlIGNvcnJlY3QgdmFsdWUgbmV4dCB0aW1lXHJcbiAgICAgICAgdGhpcy56b29tRnJvbU9yaWdpbiA9IHRoaXMuc2V0dGluZ3Muem9vbUZyb21PcmlnaW47XHJcbiAgICAgICAgLy8gQXQgdGhlIG1vbWVudCwgWm9vbSBmcm9tIGltYWdlIGRvZXNuJ3Qgc3VwcG9ydCBkeW5hbWljIG9wdGlvbnNcclxuICAgICAgICAvLyBAdG9kbyBhZGQgem9vbUZyb21PcmlnaW4gc3VwcG9ydCBmb3IgZHluYW1pYyBpbWFnZXNcclxuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5keW5hbWljKSB7XHJcbiAgICAgICAgICAgIHRoaXMuem9vbUZyb21PcmlnaW4gPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCF0aGlzLnNldHRpbmdzLmNvbnRhaW5lcikge1xyXG4gICAgICAgICAgICB0aGlzLnNldHRpbmdzLmNvbnRhaW5lciA9IGRvY3VtZW50LmJvZHk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHNldHRpbmdzLnByZWxvYWQgc2hvdWxkIG5vdCBiZSBncmF0ZXIgdGhhbiAkaXRlbS5sZW5ndGhcclxuICAgICAgICB0aGlzLnNldHRpbmdzLnByZWxvYWQgPSBNYXRoLm1pbih0aGlzLnNldHRpbmdzLnByZWxvYWQsIHRoaXMuZ2FsbGVyeUl0ZW1zLmxlbmd0aCk7XHJcbiAgICB9O1xyXG4gICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5hZGRTbGlkZVZpZGVvSW5mbyh0aGlzLmdhbGxlcnlJdGVtcyk7XHJcbiAgICAgICAgdGhpcy5idWlsZFN0cnVjdHVyZSgpO1xyXG4gICAgICAgIHRoaXMuTEdlbC50cmlnZ2VyKGxHRXZlbnRzLmluaXQsIHtcclxuICAgICAgICAgICAgaW5zdGFuY2U6IHRoaXMsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3Mua2V5UHJlc3MpIHtcclxuICAgICAgICAgICAgdGhpcy5rZXlQcmVzcygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgX3RoaXMuZW5hYmxlRHJhZygpO1xyXG4gICAgICAgICAgICBfdGhpcy5lbmFibGVTd2lwZSgpO1xyXG4gICAgICAgICAgICBfdGhpcy50cmlnZ2VyUG9zdGVyQ2xpY2soKTtcclxuICAgICAgICB9LCA1MCk7XHJcbiAgICAgICAgdGhpcy5hcnJvdygpO1xyXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLm1vdXNld2hlZWwpIHtcclxuICAgICAgICAgICAgdGhpcy5tb3VzZXdoZWVsKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghdGhpcy5zZXR0aW5ncy5keW5hbWljKSB7XHJcbiAgICAgICAgICAgIHRoaXMub3BlbkdhbGxlcnlPbkl0ZW1DbGljaygpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLm9wZW5HYWxsZXJ5T25JdGVtQ2xpY2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uIChpbmRleCkge1xyXG4gICAgICAgICAgICB2YXIgZWxlbWVudCA9IHRoaXNfMS5pdGVtc1tpbmRleF07XHJcbiAgICAgICAgICAgIHZhciAkZWxlbWVudCA9ICRMRyhlbGVtZW50KTtcclxuICAgICAgICAgICAgLy8gVXNpbmcgZGlmZmVyZW50IG5hbWVzcGFjZSBmb3IgY2xpY2sgYmVjYXVzZSBjbGljayBldmVudCBzaG91bGQgbm90IHVuYmluZCBpZiBzZWxlY3RvciBpcyBzYW1lIG9iamVjdCgndGhpcycpXHJcbiAgICAgICAgICAgIC8vIEB0b2RvIG1hbmFnZSBhbGwgZXZlbnQgbGlzdG5lcnMgLSBzaG91bGQgaGF2ZSBuYW1lc3BhY2UgdGhhdCByZXByZXNlbnQgZWxlbWVudFxyXG4gICAgICAgICAgICB2YXIgdXVpZCA9IGxnUXVlcnkuZ2VuZXJhdGVVVUlEKCk7XHJcbiAgICAgICAgICAgICRlbGVtZW50XHJcbiAgICAgICAgICAgICAgICAuYXR0cignZGF0YS1sZy1pZCcsIHV1aWQpXHJcbiAgICAgICAgICAgICAgICAub24oXCJjbGljay5sZ2N1c3RvbS1pdGVtLVwiICsgdXVpZCwgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50SXRlbUluZGV4ID0gX3RoaXMuc2V0dGluZ3MuaW5kZXggfHwgaW5kZXg7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5vcGVuR2FsbGVyeShjdXJyZW50SXRlbUluZGV4LCBlbGVtZW50KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB2YXIgdGhpc18xID0gdGhpcztcclxuICAgICAgICAvLyBVc2luZyBmb3IgbG9vcCBpbnN0ZWFkIG9mIHVzaW5nIGJ1YmJsaW5nIGFzIHRoZSBpdGVtcyBjYW4gYmUgYW55IGh0bWwgZWxlbWVudC5cclxuICAgICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5pdGVtcy5sZW5ndGg7IGluZGV4KyspIHtcclxuICAgICAgICAgICAgX2xvb3BfMShpbmRleCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogTW9kdWxlIGNvbnN0cnVjdG9yXHJcbiAgICAgKiBNb2R1bGVzIGFyZSBidWlsZCBpbmNyZW1lbnRhbGx5LlxyXG4gICAgICogR2FsbGVyeSBzaG91bGQgYmUgb3BlbmVkIG9ubHkgb25jZSBhbGwgdGhlIG1vZHVsZXMgYXJlIGluaXRpYWxpemVkLlxyXG4gICAgICogdXNlIG1vZHVsZUJ1aWxkVGltZW91dCB0byBtYWtlIHN1cmUgdGhpc1xyXG4gICAgICovXHJcbiAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLmJ1aWxkTW9kdWxlcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuc2V0dGluZ3MucGx1Z2lucy5mb3JFYWNoKGZ1bmN0aW9uIChwbHVnaW4pIHtcclxuICAgICAgICAgICAgX3RoaXMucGx1Z2lucy5wdXNoKG5ldyBwbHVnaW4oX3RoaXMsICRMRykpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIExpZ2h0R2FsbGVyeS5wcm90b3R5cGUudmFsaWRhdGVMaWNlbnNlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5zZXR0aW5ncy5saWNlbnNlS2V5KSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1BsZWFzZSBwcm92aWRlIGEgdmFsaWQgbGljZW5zZSBrZXknKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy5zZXR0aW5ncy5saWNlbnNlS2V5ID09PSAnMDAwMC0wMDAwLTAwMC0wMDAwJykge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJsaWdodEdhbGxlcnk6IFwiICsgdGhpcy5zZXR0aW5ncy5saWNlbnNlS2V5ICsgXCIgbGljZW5zZSBrZXkgaXMgbm90IHZhbGlkIGZvciBwcm9kdWN0aW9uIHVzZVwiKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS5nZXRTbGlkZUl0ZW0gPSBmdW5jdGlvbiAoaW5kZXgpIHtcclxuICAgICAgICByZXR1cm4gJExHKHRoaXMuZ2V0U2xpZGVJdGVtSWQoaW5kZXgpKTtcclxuICAgIH07XHJcbiAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLmdldFNsaWRlSXRlbUlkID0gZnVuY3Rpb24gKGluZGV4KSB7XHJcbiAgICAgICAgcmV0dXJuIFwiI2xnLWl0ZW0tXCIgKyB0aGlzLmxnSWQgKyBcIi1cIiArIGluZGV4O1xyXG4gICAgfTtcclxuICAgIExpZ2h0R2FsbGVyeS5wcm90b3R5cGUuZ2V0SWROYW1lID0gZnVuY3Rpb24gKGlkKSB7XHJcbiAgICAgICAgcmV0dXJuIGlkICsgXCItXCIgKyB0aGlzLmxnSWQ7XHJcbiAgICB9O1xyXG4gICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS5nZXRFbGVtZW50QnlJZCA9IGZ1bmN0aW9uIChpZCkge1xyXG4gICAgICAgIHJldHVybiAkTEcoXCIjXCIgKyB0aGlzLmdldElkTmFtZShpZCkpO1xyXG4gICAgfTtcclxuICAgIExpZ2h0R2FsbGVyeS5wcm90b3R5cGUubWFuYWdlU2luZ2xlU2xpZGVDbGFzc05hbWUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZ2FsbGVyeUl0ZW1zLmxlbmd0aCA8IDIpIHtcclxuICAgICAgICAgICAgdGhpcy5vdXRlci5hZGRDbGFzcygnbGctc2luZ2xlLWl0ZW0nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMub3V0ZXIucmVtb3ZlQ2xhc3MoJ2xnLXNpbmdsZS1pdGVtJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIExpZ2h0R2FsbGVyeS5wcm90b3R5cGUuYnVpbGRTdHJ1Y3R1cmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgY29udGFpbmVyID0gdGhpcy4kY29udGFpbmVyICYmIHRoaXMuJGNvbnRhaW5lci5nZXQoKTtcclxuICAgICAgICBpZiAoY29udGFpbmVyKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGNvbnRyb2xzID0gJyc7XHJcbiAgICAgICAgdmFyIHN1Ykh0bWxDb250ID0gJyc7XHJcbiAgICAgICAgLy8gQ3JlYXRlIGNvbnRyb2xzXHJcbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuY29udHJvbHMpIHtcclxuICAgICAgICAgICAgY29udHJvbHMgPSBcIjxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBpZD1cXFwiXCIgKyB0aGlzLmdldElkTmFtZSgnbGctcHJldicpICsgXCJcXFwiIGFyaWEtbGFiZWw9XFxcIlwiICsgdGhpcy5zZXR0aW5ncy5zdHJpbmdzWydwcmV2aW91c1NsaWRlJ10gKyBcIlxcXCIgY2xhc3M9XFxcImxnLXByZXYgbGctaWNvblxcXCI+IFwiICsgdGhpcy5zZXR0aW5ncy5wcmV2SHRtbCArIFwiIDwvYnV0dG9uPlxcbiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgaWQ9XFxcIlwiICsgdGhpcy5nZXRJZE5hbWUoJ2xnLW5leHQnKSArIFwiXFxcIiBhcmlhLWxhYmVsPVxcXCJcIiArIHRoaXMuc2V0dGluZ3Muc3RyaW5nc1snbmV4dFNsaWRlJ10gKyBcIlxcXCIgY2xhc3M9XFxcImxnLW5leHQgbGctaWNvblxcXCI+IFwiICsgdGhpcy5zZXR0aW5ncy5uZXh0SHRtbCArIFwiIDwvYnV0dG9uPlwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5hcHBlbmRTdWJIdG1sVG8gIT09ICcubGctaXRlbScpIHtcclxuICAgICAgICAgICAgc3ViSHRtbENvbnQgPVxyXG4gICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJsZy1zdWItaHRtbFwiIHJvbGU9XCJzdGF0dXNcIiBhcmlhLWxpdmU9XCJwb2xpdGVcIj48L2Rpdj4nO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgYWRkQ2xhc3NlcyA9ICcnO1xyXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmFsbG93TWVkaWFPdmVybGFwKSB7XHJcbiAgICAgICAgICAgIC8vIERvIG5vdCByZW1vdmUgc3BhY2UgYmVmb3JlIGxhc3Qgc2luZ2xlIHF1b3RlXHJcbiAgICAgICAgICAgIGFkZENsYXNzZXMgKz0gJ2xnLW1lZGlhLW92ZXJsYXAgJztcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGFyaWFMYWJlbGxlZGJ5ID0gdGhpcy5zZXR0aW5ncy5hcmlhTGFiZWxsZWRieVxyXG4gICAgICAgICAgICA/ICdhcmlhLWxhYmVsbGVkYnk9XCInICsgdGhpcy5zZXR0aW5ncy5hcmlhTGFiZWxsZWRieSArICdcIidcclxuICAgICAgICAgICAgOiAnJztcclxuICAgICAgICB2YXIgYXJpYURlc2NyaWJlZGJ5ID0gdGhpcy5zZXR0aW5ncy5hcmlhRGVzY3JpYmVkYnlcclxuICAgICAgICAgICAgPyAnYXJpYS1kZXNjcmliZWRieT1cIicgKyB0aGlzLnNldHRpbmdzLmFyaWFEZXNjcmliZWRieSArICdcIidcclxuICAgICAgICAgICAgOiAnJztcclxuICAgICAgICB2YXIgY29udGFpbmVyQ2xhc3NOYW1lID0gXCJsZy1jb250YWluZXIgXCIgKyB0aGlzLnNldHRpbmdzLmFkZENsYXNzICsgXCIgXCIgKyAoZG9jdW1lbnQuYm9keSAhPT0gdGhpcy5zZXR0aW5ncy5jb250YWluZXIgPyAnbGctaW5saW5lJyA6ICcnKTtcclxuICAgICAgICB2YXIgY2xvc2VJY29uID0gdGhpcy5zZXR0aW5ncy5jbG9zYWJsZSAmJiB0aGlzLnNldHRpbmdzLnNob3dDbG9zZUljb25cclxuICAgICAgICAgICAgPyBcIjxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBhcmlhLWxhYmVsPVxcXCJcIiArIHRoaXMuc2V0dGluZ3Muc3RyaW5nc1snY2xvc2VHYWxsZXJ5J10gKyBcIlxcXCIgaWQ9XFxcIlwiICsgdGhpcy5nZXRJZE5hbWUoJ2xnLWNsb3NlJykgKyBcIlxcXCIgY2xhc3M9XFxcImxnLWNsb3NlIGxnLWljb25cXFwiPjwvYnV0dG9uPlwiXHJcbiAgICAgICAgICAgIDogJyc7XHJcbiAgICAgICAgdmFyIG1heGltaXplSWNvbiA9IHRoaXMuc2V0dGluZ3Muc2hvd01heGltaXplSWNvblxyXG4gICAgICAgICAgICA/IFwiPGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGFyaWEtbGFiZWw9XFxcIlwiICsgdGhpcy5zZXR0aW5ncy5zdHJpbmdzWyd0b2dnbGVNYXhpbWl6ZSddICsgXCJcXFwiIGlkPVxcXCJcIiArIHRoaXMuZ2V0SWROYW1lKCdsZy1tYXhpbWl6ZScpICsgXCJcXFwiIGNsYXNzPVxcXCJsZy1tYXhpbWl6ZSBsZy1pY29uXFxcIj48L2J1dHRvbj5cIlxyXG4gICAgICAgICAgICA6ICcnO1xyXG4gICAgICAgIHZhciB0ZW1wbGF0ZSA9IFwiXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJcIiArIGNvbnRhaW5lckNsYXNzTmFtZSArIFwiXFxcIiBpZD1cXFwiXCIgKyB0aGlzLmdldElkTmFtZSgnbGctY29udGFpbmVyJykgKyBcIlxcXCIgdGFiaW5kZXg9XFxcIi0xXFxcIiBhcmlhLW1vZGFsPVxcXCJ0cnVlXFxcIiBcIiArIGFyaWFMYWJlbGxlZGJ5ICsgXCIgXCIgKyBhcmlhRGVzY3JpYmVkYnkgKyBcIiByb2xlPVxcXCJkaWFsb2dcXFwiXFxuICAgICAgICA+XFxuICAgICAgICAgICAgPGRpdiBpZD1cXFwiXCIgKyB0aGlzLmdldElkTmFtZSgnbGctYmFja2Ryb3AnKSArIFwiXFxcIiBjbGFzcz1cXFwibGctYmFja2Ryb3BcXFwiPjwvZGl2PlxcblxcbiAgICAgICAgICAgIDxkaXYgaWQ9XFxcIlwiICsgdGhpcy5nZXRJZE5hbWUoJ2xnLW91dGVyJykgKyBcIlxcXCIgY2xhc3M9XFxcImxnLW91dGVyIGxnLXVzZS1jc3MzIGxnLWNzczMgbGctaGlkZS1pdGVtcyBcIiArIGFkZENsYXNzZXMgKyBcIiBcXFwiPlxcblxcbiAgICAgICAgICAgICAgPGRpdiBpZD1cXFwiXCIgKyB0aGlzLmdldElkTmFtZSgnbGctY29udGVudCcpICsgXCJcXFwiIGNsYXNzPVxcXCJsZy1jb250ZW50XFxcIj5cXG4gICAgICAgICAgICAgICAgPGRpdiBpZD1cXFwiXCIgKyB0aGlzLmdldElkTmFtZSgnbGctaW5uZXInKSArIFwiXFxcIiBjbGFzcz1cXFwibGctaW5uZXJcXFwiPlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgXCIgKyBjb250cm9scyArIFwiXFxuICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgPGRpdiBpZD1cXFwiXCIgKyB0aGlzLmdldElkTmFtZSgnbGctdG9vbGJhcicpICsgXCJcXFwiIGNsYXNzPVxcXCJsZy10b29sYmFyIGxnLWdyb3VwXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIFwiICsgbWF4aW1pemVJY29uICsgXCJcXG4gICAgICAgICAgICAgICAgICAgIFwiICsgY2xvc2VJY29uICsgXCJcXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgXCIgKyAodGhpcy5zZXR0aW5ncy5hcHBlbmRTdWJIdG1sVG8gPT09ICcubGctb3V0ZXInXHJcbiAgICAgICAgICAgID8gc3ViSHRtbENvbnRcclxuICAgICAgICAgICAgOiAnJykgKyBcIlxcbiAgICAgICAgICAgICAgICA8ZGl2IGlkPVxcXCJcIiArIHRoaXMuZ2V0SWROYW1lKCdsZy1jb21wb25lbnRzJykgKyBcIlxcXCIgY2xhc3M9XFxcImxnLWNvbXBvbmVudHNcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgXCIgKyAodGhpcy5zZXR0aW5ncy5hcHBlbmRTdWJIdG1sVG8gPT09ICcubGctc3ViLWh0bWwnXHJcbiAgICAgICAgICAgID8gc3ViSHRtbENvbnRcclxuICAgICAgICAgICAgOiAnJykgKyBcIlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICAgICAgXCI7XHJcbiAgICAgICAgJExHKHRoaXMuc2V0dGluZ3MuY29udGFpbmVyKS5hcHBlbmQodGVtcGxhdGUpO1xyXG4gICAgICAgIGlmIChkb2N1bWVudC5ib2R5ICE9PSB0aGlzLnNldHRpbmdzLmNvbnRhaW5lcikge1xyXG4gICAgICAgICAgICAkTEcodGhpcy5zZXR0aW5ncy5jb250YWluZXIpLmNzcygncG9zaXRpb24nLCAncmVsYXRpdmUnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5vdXRlciA9IHRoaXMuZ2V0RWxlbWVudEJ5SWQoJ2xnLW91dGVyJyk7XHJcbiAgICAgICAgdGhpcy4kbGdDb21wb25lbnRzID0gdGhpcy5nZXRFbGVtZW50QnlJZCgnbGctY29tcG9uZW50cycpO1xyXG4gICAgICAgIHRoaXMuJGJhY2tkcm9wID0gdGhpcy5nZXRFbGVtZW50QnlJZCgnbGctYmFja2Ryb3AnKTtcclxuICAgICAgICB0aGlzLiRjb250YWluZXIgPSB0aGlzLmdldEVsZW1lbnRCeUlkKCdsZy1jb250YWluZXInKTtcclxuICAgICAgICB0aGlzLiRpbm5lciA9IHRoaXMuZ2V0RWxlbWVudEJ5SWQoJ2xnLWlubmVyJyk7XHJcbiAgICAgICAgdGhpcy4kY29udGVudCA9IHRoaXMuZ2V0RWxlbWVudEJ5SWQoJ2xnLWNvbnRlbnQnKTtcclxuICAgICAgICB0aGlzLiR0b29sYmFyID0gdGhpcy5nZXRFbGVtZW50QnlJZCgnbGctdG9vbGJhcicpO1xyXG4gICAgICAgIHRoaXMuJGJhY2tkcm9wLmNzcygndHJhbnNpdGlvbi1kdXJhdGlvbicsIHRoaXMuc2V0dGluZ3MuYmFja2Ryb3BEdXJhdGlvbiArICdtcycpO1xyXG4gICAgICAgIHZhciBvdXRlckNsYXNzTmFtZXMgPSB0aGlzLnNldHRpbmdzLm1vZGUgKyBcIiBcIjtcclxuICAgICAgICB0aGlzLm1hbmFnZVNpbmdsZVNsaWRlQ2xhc3NOYW1lKCk7XHJcbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuZW5hYmxlRHJhZykge1xyXG4gICAgICAgICAgICBvdXRlckNsYXNzTmFtZXMgKz0gJ2xnLWdyYWIgJztcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5vdXRlci5hZGRDbGFzcyhvdXRlckNsYXNzTmFtZXMpO1xyXG4gICAgICAgIHRoaXMuJGlubmVyLmNzcygndHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb24nLCB0aGlzLnNldHRpbmdzLmVhc2luZyk7XHJcbiAgICAgICAgdGhpcy4kaW5uZXIuY3NzKCd0cmFuc2l0aW9uLWR1cmF0aW9uJywgdGhpcy5zZXR0aW5ncy5zcGVlZCArICdtcycpO1xyXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmRvd25sb2FkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuJHRvb2xiYXIuYXBwZW5kKFwiPGEgaWQ9XFxcIlwiICsgdGhpcy5nZXRJZE5hbWUoJ2xnLWRvd25sb2FkJykgKyBcIlxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiIHJlbD1cXFwibm9vcGVuZXJcXFwiIGFyaWEtbGFiZWw9XFxcIlwiICsgdGhpcy5zZXR0aW5ncy5zdHJpbmdzWydkb3dubG9hZCddICsgXCJcXFwiIGRvd25sb2FkIGNsYXNzPVxcXCJsZy1kb3dubG9hZCBsZy1pY29uXFxcIj48L2E+XCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNvdW50ZXIoKTtcclxuICAgICAgICAkTEcod2luZG93KS5vbihcInJlc2l6ZS5sZy5nbG9iYWxcIiArIHRoaXMubGdJZCArIFwiIG9yaWVudGF0aW9uY2hhbmdlLmxnLmdsb2JhbFwiICsgdGhpcy5sZ0lkLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIF90aGlzLnJlZnJlc2hPblJlc2l6ZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuaGlkZUJhcnMoKTtcclxuICAgICAgICB0aGlzLm1hbmFnZUNsb3NlR2FsbGVyeSgpO1xyXG4gICAgICAgIHRoaXMudG9nZ2xlTWF4aW1pemUoKTtcclxuICAgICAgICB0aGlzLmluaXRNb2R1bGVzKCk7XHJcbiAgICB9O1xyXG4gICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS5yZWZyZXNoT25SZXNpemUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMubGdPcGVuZWQpIHtcclxuICAgICAgICAgICAgdmFyIGN1cnJlbnRHYWxsZXJ5SXRlbSA9IHRoaXMuZ2FsbGVyeUl0ZW1zW3RoaXMuaW5kZXhdO1xyXG4gICAgICAgICAgICB2YXIgX19zbGlkZVZpZGVvSW5mbyA9IGN1cnJlbnRHYWxsZXJ5SXRlbS5fX3NsaWRlVmlkZW9JbmZvO1xyXG4gICAgICAgICAgICB0aGlzLm1lZGlhQ29udGFpbmVyUG9zaXRpb24gPSB0aGlzLmdldE1lZGlhQ29udGFpbmVyUG9zaXRpb24oKTtcclxuICAgICAgICAgICAgdmFyIF9hID0gdGhpcy5tZWRpYUNvbnRhaW5lclBvc2l0aW9uLCB0b3BfMSA9IF9hLnRvcCwgYm90dG9tID0gX2EuYm90dG9tO1xyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRJbWFnZVNpemUgPSB1dGlscy5nZXRTaXplKHRoaXMuaXRlbXNbdGhpcy5pbmRleF0sIHRoaXMub3V0ZXIsIHRvcF8xICsgYm90dG9tLCBfX3NsaWRlVmlkZW9JbmZvICYmIHRoaXMuc2V0dGluZ3MudmlkZW9NYXhTaXplKTtcclxuICAgICAgICAgICAgaWYgKF9fc2xpZGVWaWRlb0luZm8pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVzaXplVmlkZW9TbGlkZSh0aGlzLmluZGV4LCB0aGlzLmN1cnJlbnRJbWFnZVNpemUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnpvb21Gcm9tT3JpZ2luICYmICF0aGlzLmlzRHVtbXlJbWFnZVJlbW92ZWQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBpbWdTdHlsZSA9IHRoaXMuZ2V0RHVtbXlJbWdTdHlsZXModGhpcy5jdXJyZW50SW1hZ2VTaXplKTtcclxuICAgICAgICAgICAgICAgIHRoaXMub3V0ZXJcclxuICAgICAgICAgICAgICAgICAgICAuZmluZCgnLmxnLWN1cnJlbnQgLmxnLWR1bW15LWltZycpXHJcbiAgICAgICAgICAgICAgICAgICAgLmZpcnN0KClcclxuICAgICAgICAgICAgICAgICAgICAuYXR0cignc3R5bGUnLCBpbWdTdHlsZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5MR2VsLnRyaWdnZXIobEdFdmVudHMuY29udGFpbmVyUmVzaXplKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS5yZXNpemVWaWRlb1NsaWRlID0gZnVuY3Rpb24gKGluZGV4LCBpbWFnZVNpemUpIHtcclxuICAgICAgICB2YXIgbGdWaWRlb1N0eWxlID0gdGhpcy5nZXRWaWRlb0NvbnRTdHlsZShpbWFnZVNpemUpO1xyXG4gICAgICAgIHZhciBjdXJyZW50U2xpZGUgPSB0aGlzLmdldFNsaWRlSXRlbShpbmRleCk7XHJcbiAgICAgICAgY3VycmVudFNsaWRlLmZpbmQoJy5sZy12aWRlby1jb250JykuYXR0cignc3R5bGUnLCBsZ1ZpZGVvU3R5bGUpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogVXBkYXRlIHNsaWRlcyBkeW5hbWljYWxseS5cclxuICAgICAqIEFkZCwgZWRpdCBvciBkZWxldGUgc2xpZGVzIGR5bmFtaWNhbGx5IHdoZW4gbGlnaHRHYWxsZXJ5IGlzIG9wZW5lZC5cclxuICAgICAqIE1vZGlmeSB0aGUgY3VycmVudCBnYWxsZXJ5IGl0ZW1zIGFuZCBwYXNzIGl0IHZpYSB1cGRhdGVTbGlkZXMgbWV0aG9kXHJcbiAgICAgKiBAbm90ZVxyXG4gICAgICogLSBEbyBub3QgbXV0YXRlIGV4aXN0aW5nIGxpZ2h0R2FsbGVyeSBpdGVtcyBkaXJlY3RseS5cclxuICAgICAqIC0gQWx3YXlzIHBhc3MgbmV3IGxpc3Qgb2YgZ2FsbGVyeSBpdGVtc1xyXG4gICAgICogLSBZb3UgbmVlZCB0byB0YWtlIGNhcmUgb2YgdGh1bWJuYWlscyBvdXRzaWRlIHRoZSBnYWxsZXJ5IGlmIGFueVxyXG4gICAgICogLSB1c2VyIHRoaXMgbWV0aG9kIG9ubHkgaWYgeW91IHdhbnQgdG8gdXBkYXRlIHNsaWRlcyB3aGVuIHRoZSBnYWxsZXJ5IGlzIG9wZW5lZC4gT3RoZXJ3aXNlLCB1c2UgYHJlZnJlc2goKWAgbWV0aG9kLlxyXG4gICAgICogQHBhcmFtIGl0ZW1zIEdhbGxlcnkgaXRlbXNcclxuICAgICAqIEBwYXJhbSBpbmRleCBBZnRlciB0aGUgdXBkYXRlIG9wZXJhdGlvbiwgd2hpY2ggc2xpZGUgZ2FsbGVyeSBzaG91bGQgbmF2aWdhdGUgdG9cclxuICAgICAqIEBjYXRlZ29yeSBsR1B1YmxpY01ldGhvZHNcclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKiBjb25zdCBwbHVnaW4gPSBsaWdodEdhbGxlcnkoKTtcclxuICAgICAqXHJcbiAgICAgKiAvLyBBZGRpbmcgc2xpZGVzIGR5bmFtaWNhbGx5XHJcbiAgICAgKiBsZXQgZ2FsbGVyeUl0ZW1zID0gW1xyXG4gICAgICogLy8gQWNjZXNzIGV4aXN0aW5nIGxpZ2h0R2FsbGVyeSBpdGVtc1xyXG4gICAgICogLy8gZ2FsbGVyeUl0ZW1zIGFyZSBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZCBpbnRlcm5hbGx5IGZyb20gdGhlIGdhbGxlcnkgSFRNTCBtYXJrdXBcclxuICAgICAqIC8vIG9yIGRpcmVjdGx5IGZyb20gZ2FsbGVyeUl0ZW1zIHdoZW4gZHluYW1pYyBnYWxsZXJ5IGlzIHVzZWRcclxuICAgICAqICAgLi4ucGx1Z2luLmdhbGxlcnlJdGVtcyxcclxuICAgICAqICAgICAuLi5bXHJcbiAgICAgKiAgICAgICB7XHJcbiAgICAgKiAgICAgICAgIHNyYzogJ2ltZy9pbWctMS5wbmcnLFxyXG4gICAgICogICAgICAgICAgIHRodW1iOiAnaW1nL3RodW1iMS5wbmcnLFxyXG4gICAgICogICAgICAgICB9LFxyXG4gICAgICogICAgIF0sXHJcbiAgICAgKiAgIF07XHJcbiAgICAgKiAgIHBsdWdpbi51cGRhdGVTbGlkZXMoXHJcbiAgICAgKiAgICAgZ2FsbGVyeUl0ZW1zLFxyXG4gICAgICogICAgIHBsdWdpbi5pbmRleCxcclxuICAgICAqICAgKTtcclxuICAgICAqXHJcbiAgICAgKlxyXG4gICAgICogLy8gUmVtb3ZlIHNsaWRlcyBkeW5hbWljYWxseVxyXG4gICAgICogZ2FsbGVyeUl0ZW1zID0gSlNPTi5wYXJzZShcclxuICAgICAqICAgSlNPTi5zdHJpbmdpZnkodXBkYXRlU2xpZGVJbnN0YW5jZS5nYWxsZXJ5SXRlbXMpLFxyXG4gICAgICogKTtcclxuICAgICAqIGdhbGxlcnlJdGVtcy5zaGlmdCgpO1xyXG4gICAgICogdXBkYXRlU2xpZGVJbnN0YW5jZS51cGRhdGVTbGlkZXMoZ2FsbGVyeUl0ZW1zLCAxKTtcclxuICAgICAqIEBzZWUgPGEgaHJlZj1cIi9kZW1vcy91cGRhdGUtc2xpZGVzL1wiPkRlbW88L2E+XHJcbiAgICAgKi9cclxuICAgIExpZ2h0R2FsbGVyeS5wcm90b3R5cGUudXBkYXRlU2xpZGVzID0gZnVuY3Rpb24gKGl0ZW1zLCBpbmRleCkge1xyXG4gICAgICAgIGlmICh0aGlzLmluZGV4ID4gaXRlbXMubGVuZ3RoIC0gMSkge1xyXG4gICAgICAgICAgICB0aGlzLmluZGV4ID0gaXRlbXMubGVuZ3RoIC0gMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGl0ZW1zLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICB0aGlzLmluZGV4ID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFpdGVtcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdGhpcy5jbG9zZUdhbGxlcnkoKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgY3VycmVudFNyYyA9IHRoaXMuZ2FsbGVyeUl0ZW1zW2luZGV4XS5zcmM7XHJcbiAgICAgICAgdGhpcy5nYWxsZXJ5SXRlbXMgPSBpdGVtcztcclxuICAgICAgICB0aGlzLnVwZGF0ZUNvbnRyb2xzKCk7XHJcbiAgICAgICAgdGhpcy4kaW5uZXIuZW1wdHkoKTtcclxuICAgICAgICB0aGlzLmN1cnJlbnRJdGVtc0luRG9tID0gW107XHJcbiAgICAgICAgdmFyIF9pbmRleCA9IDA7XHJcbiAgICAgICAgLy8gRmluZCB0aGUgY3VycmVudCBpbmRleCBiYXNlZCBvbiBzb3VyY2UgdmFsdWUgb2YgdGhlIHNsaWRlXHJcbiAgICAgICAgdGhpcy5nYWxsZXJ5SXRlbXMuc29tZShmdW5jdGlvbiAoZ2FsbGVyeUl0ZW0sIGl0ZW1JbmRleCkge1xyXG4gICAgICAgICAgICBpZiAoZ2FsbGVyeUl0ZW0uc3JjID09PSBjdXJyZW50U3JjKSB7XHJcbiAgICAgICAgICAgICAgICBfaW5kZXggPSBpdGVtSW5kZXg7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50SXRlbXNJbkRvbSA9IHRoaXMub3JnYW5pemVTbGlkZUl0ZW1zKF9pbmRleCwgLTEpO1xyXG4gICAgICAgIHRoaXMubG9hZENvbnRlbnQoX2luZGV4LCB0cnVlKTtcclxuICAgICAgICB0aGlzLmdldFNsaWRlSXRlbShfaW5kZXgpLmFkZENsYXNzKCdsZy1jdXJyZW50Jyk7XHJcbiAgICAgICAgdGhpcy5pbmRleCA9IF9pbmRleDtcclxuICAgICAgICB0aGlzLnVwZGF0ZUN1cnJlbnRDb3VudGVyKF9pbmRleCk7XHJcbiAgICAgICAgdGhpcy5MR2VsLnRyaWdnZXIobEdFdmVudHMudXBkYXRlU2xpZGVzKTtcclxuICAgIH07XHJcbiAgICAvLyBHZXQgZ2FsbGVyeSBpdGVtcyBiYXNlZCBvbiBtdWx0aXBsZSBjb25kaXRpb25zXHJcbiAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLmdldEl0ZW1zID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vIEdhbGxlcnkgaXRlbXNcclxuICAgICAgICB0aGlzLml0ZW1zID0gW107XHJcbiAgICAgICAgaWYgKCF0aGlzLnNldHRpbmdzLmR5bmFtaWMpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3Muc2VsZWN0b3IgPT09ICd0aGlzJykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pdGVtcy5wdXNoKHRoaXMuZWwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuc2V0dGluZ3Muc2VsZWN0b3IpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5zZXR0aW5ncy5zZWxlY3RvciA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5zZWxlY3RXaXRoaW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlbGVjdFdpdGhpbiA9ICRMRyh0aGlzLnNldHRpbmdzLnNlbGVjdFdpdGhpbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaXRlbXMgPSBzZWxlY3RXaXRoaW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5maW5kKHRoaXMuc2V0dGluZ3Muc2VsZWN0b3IpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZ2V0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLml0ZW1zID0gdGhpcy5lbC5xdWVyeVNlbGVjdG9yQWxsKHRoaXMuc2V0dGluZ3Muc2VsZWN0b3IpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXRlbXMgPSB0aGlzLnNldHRpbmdzLnNlbGVjdG9yO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pdGVtcyA9IHRoaXMuZWwuY2hpbGRyZW47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHV0aWxzLmdldER5bmFtaWNPcHRpb25zKHRoaXMuaXRlbXMsIHRoaXMuc2V0dGluZ3MuZXh0cmFQcm9wcywgdGhpcy5zZXR0aW5ncy5nZXRDYXB0aW9uRnJvbVRpdGxlT3JBbHQsIHRoaXMuc2V0dGluZ3MuZXhUaHVtYkltYWdlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNldHRpbmdzLmR5bmFtaWNFbCB8fCBbXTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS5zaG91bGRIaWRlU2Nyb2xsYmFyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiAodGhpcy5zZXR0aW5ncy5oaWRlU2Nyb2xsYmFyICYmXHJcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkgPT09IHRoaXMuc2V0dGluZ3MuY29udGFpbmVyKTtcclxuICAgIH07XHJcbiAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLmhpZGVTY3JvbGxiYXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnNob3VsZEhpZGVTY3JvbGxiYXIoKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuYm9keVBhZGRpbmdSaWdodCA9IHBhcnNlRmxvYXQoJExHKCdib2R5Jykuc3R5bGUoKS5wYWRkaW5nUmlnaHQpO1xyXG4gICAgICAgIHZhciBib2R5UmVjdCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICB2YXIgc2Nyb2xsYmFyV2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aCAtIGJvZHlSZWN0LndpZHRoO1xyXG4gICAgICAgICRMRyhkb2N1bWVudC5ib2R5KS5jc3MoJ3BhZGRpbmctcmlnaHQnLCBzY3JvbGxiYXJXaWR0aCArIHRoaXMuYm9keVBhZGRpbmdSaWdodCArICdweCcpO1xyXG4gICAgICAgICRMRyhkb2N1bWVudC5ib2R5KS5hZGRDbGFzcygnbGctb3ZlcmxheS1vcGVuJyk7XHJcbiAgICB9O1xyXG4gICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS5yZXNldFNjcm9sbEJhciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuc2hvdWxkSGlkZVNjcm9sbGJhcigpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgJExHKGRvY3VtZW50LmJvZHkpLmNzcygncGFkZGluZy1yaWdodCcsIHRoaXMuYm9keVBhZGRpbmdSaWdodCArICdweCcpO1xyXG4gICAgICAgICRMRyhkb2N1bWVudC5ib2R5KS5yZW1vdmVDbGFzcygnbGctb3ZlcmxheS1vcGVuJyk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBPcGVuIGxpZ2h0R2FsbGVyeS5cclxuICAgICAqIE9wZW4gZ2FsbGVyeSB3aXRoIHNwZWNpZmljIHNsaWRlIGJ5IHBhc3NpbmcgaW5kZXggb2YgdGhlIHNsaWRlIGFzIHBhcmFtZXRlci5cclxuICAgICAqIEBjYXRlZ29yeSBsR1B1YmxpY01ldGhvZHNcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBpbmRleCAgLSBpbmRleCBvZiB0aGUgc2xpZGVcclxuICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnQgLSBXaGljaCBpbWFnZSBsaWdodEdhbGxlcnkgc2hvdWxkIHpvb20gZnJvbVxyXG4gICAgICpcclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKiBjb25zdCAkZHluYW1pY0dhbGxlcnkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZHluYW1pYy1nYWxsZXJ5LWRlbW8nKTtcclxuICAgICAqIGNvbnN0IGR5bmFtaWNHYWxsZXJ5ID0gbGlnaHRHYWxsZXJ5KCRkeW5hbWljR2FsbGVyeSwge1xyXG4gICAgICogICAgIGR5bmFtaWM6IHRydWUsXHJcbiAgICAgKiAgICAgZHluYW1pY0VsOiBbXHJcbiAgICAgKiAgICAgICAgIHtcclxuICAgICAqICAgICAgICAgICAgICBzcmM6ICdpbWcvMS5qcGcnLFxyXG4gICAgICogICAgICAgICAgICAgIHRodW1iOiAnaW1nL3RodW1iLTEuanBnJyxcclxuICAgICAqICAgICAgICAgICAgICBzdWJIdG1sOiAnPGg0PkltYWdlIDEgdGl0bGU8L2g0PjxwPkltYWdlIDEgZGVzY3JpcHRpb25zLjwvcD4nLFxyXG4gICAgICogICAgICAgICB9LFxyXG4gICAgICogICAgICAgICAuLi5cclxuICAgICAqICAgICBdLFxyXG4gICAgICogfSk7XHJcbiAgICAgKiAkZHluYW1pY0dhbGxlcnkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgKiAgICAgLy8gU3RhcnRzIHdpdGggdGhpcmQgaXRlbS4oT3B0aW9uYWwpLlxyXG4gICAgICogICAgIC8vIFRoaXMgaXMgdXNlZnVsIGlmIHlvdSB3YW50IHVzZSBkeW5hbWljIG1vZGUgd2l0aFxyXG4gICAgICogICAgIC8vIGN1c3RvbSB0aHVtYm5haWxzICh0aHVtYm5haWxzIG91dHNpZGUgZ2FsbGVyeSksXHJcbiAgICAgKiAgICAgZHluYW1pY0dhbGxlcnkub3BlbkdhbGxlcnkoMik7XHJcbiAgICAgKiB9KTtcclxuICAgICAqXHJcbiAgICAgKi9cclxuICAgIExpZ2h0R2FsbGVyeS5wcm90b3R5cGUub3BlbkdhbGxlcnkgPSBmdW5jdGlvbiAoaW5kZXgsIGVsZW1lbnQpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGlmIChpbmRleCA9PT0gdm9pZCAwKSB7IGluZGV4ID0gdGhpcy5zZXR0aW5ncy5pbmRleDsgfVxyXG4gICAgICAgIC8vIHByZXZlbnQgYWNjaWRlbnRhbCBkb3VibGUgZXhlY3V0aW9uXHJcbiAgICAgICAgaWYgKHRoaXMubGdPcGVuZWQpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB0aGlzLmxnT3BlbmVkID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLm91dGVyLnJlbW92ZUNsYXNzKCdsZy1oaWRlLWl0ZW1zJyk7XHJcbiAgICAgICAgdGhpcy5oaWRlU2Nyb2xsYmFyKCk7XHJcbiAgICAgICAgLy8gQWRkIGRpc3BsYXkgYmxvY2ssIGJ1dCBzdGlsbCBoYXMgb3BhY2l0eSAwXHJcbiAgICAgICAgdGhpcy4kY29udGFpbmVyLmFkZENsYXNzKCdsZy1zaG93Jyk7XHJcbiAgICAgICAgdmFyIGl0ZW1zVG9CZUluc2VydGVkVG9Eb20gPSB0aGlzLmdldEl0ZW1zVG9CZUluc2VydGVkVG9Eb20oaW5kZXgsIGluZGV4KTtcclxuICAgICAgICB0aGlzLmN1cnJlbnRJdGVtc0luRG9tID0gaXRlbXNUb0JlSW5zZXJ0ZWRUb0RvbTtcclxuICAgICAgICB2YXIgaXRlbXMgPSAnJztcclxuICAgICAgICBpdGVtc1RvQmVJbnNlcnRlZFRvRG9tLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICAgICAgaXRlbXMgPSBpdGVtcyArIChcIjxkaXYgaWQ9XFxcIlwiICsgaXRlbSArIFwiXFxcIiBjbGFzcz1cXFwibGctaXRlbVxcXCI+PC9kaXY+XCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuJGlubmVyLmFwcGVuZChpdGVtcyk7XHJcbiAgICAgICAgdGhpcy5hZGRIdG1sKGluZGV4KTtcclxuICAgICAgICB2YXIgdHJhbnNmb3JtID0gJyc7XHJcbiAgICAgICAgdGhpcy5tZWRpYUNvbnRhaW5lclBvc2l0aW9uID0gdGhpcy5nZXRNZWRpYUNvbnRhaW5lclBvc2l0aW9uKCk7XHJcbiAgICAgICAgdmFyIF9hID0gdGhpcy5tZWRpYUNvbnRhaW5lclBvc2l0aW9uLCB0b3AgPSBfYS50b3AsIGJvdHRvbSA9IF9hLmJvdHRvbTtcclxuICAgICAgICBpZiAoIXRoaXMuc2V0dGluZ3MuYWxsb3dNZWRpYU92ZXJsYXApIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRNZWRpYUNvbnRhaW5lclBvc2l0aW9uKHRvcCwgYm90dG9tKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIF9fc2xpZGVWaWRlb0luZm8gPSB0aGlzLmdhbGxlcnlJdGVtc1tpbmRleF0uX19zbGlkZVZpZGVvSW5mbztcclxuICAgICAgICBpZiAodGhpcy56b29tRnJvbU9yaWdpbiAmJiBlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudEltYWdlU2l6ZSA9IHV0aWxzLmdldFNpemUoZWxlbWVudCwgdGhpcy5vdXRlciwgdG9wICsgYm90dG9tLCBfX3NsaWRlVmlkZW9JbmZvICYmIHRoaXMuc2V0dGluZ3MudmlkZW9NYXhTaXplKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtID0gdXRpbHMuZ2V0VHJhbnNmb3JtKGVsZW1lbnQsIHRoaXMub3V0ZXIsIHRvcCwgYm90dG9tLCB0aGlzLmN1cnJlbnRJbWFnZVNpemUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXRoaXMuem9vbUZyb21PcmlnaW4gfHwgIXRyYW5zZm9ybSkge1xyXG4gICAgICAgICAgICB0aGlzLm91dGVyLmFkZENsYXNzKHRoaXMuc2V0dGluZ3Muc3RhcnRDbGFzcyk7XHJcbiAgICAgICAgICAgIHRoaXMuZ2V0U2xpZGVJdGVtKGluZGV4KS5yZW1vdmVDbGFzcygnbGctY29tcGxldGUnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHRpbWVvdXQgPSB0aGlzLnNldHRpbmdzLnpvb21Gcm9tT3JpZ2luXHJcbiAgICAgICAgICAgID8gMTAwXHJcbiAgICAgICAgICAgIDogdGhpcy5zZXR0aW5ncy5iYWNrZHJvcER1cmF0aW9uO1xyXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBfdGhpcy5vdXRlci5hZGRDbGFzcygnbGctY29tcG9uZW50cy1vcGVuJyk7XHJcbiAgICAgICAgfSwgdGltZW91dCk7XHJcbiAgICAgICAgdGhpcy5pbmRleCA9IGluZGV4O1xyXG4gICAgICAgIHRoaXMuTEdlbC50cmlnZ2VyKGxHRXZlbnRzLmJlZm9yZU9wZW4pO1xyXG4gICAgICAgIC8vIGFkZCBjbGFzcyBsZy1jdXJyZW50IHRvIHJlbW92ZSBpbml0aWFsIHRyYW5zaXRpb25cclxuICAgICAgICB0aGlzLmdldFNsaWRlSXRlbShpbmRleCkuYWRkQ2xhc3MoJ2xnLWN1cnJlbnQnKTtcclxuICAgICAgICB0aGlzLmxHYWxsZXJ5T24gPSBmYWxzZTtcclxuICAgICAgICAvLyBTdG9yZSB0aGUgY3VycmVudCBzY3JvbGwgdG9wIHZhbHVlIHRvIHNjcm9sbCBiYWNrIGFmdGVyIGNsb3NpbmcgdGhlIGdhbGxlcnkuLlxyXG4gICAgICAgIHRoaXMucHJldlNjcm9sbFRvcCA9ICRMRyh3aW5kb3cpLnNjcm9sbFRvcCgpO1xyXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAvLyBOZWVkIHRvIGNoZWNrIGJvdGggem9vbUZyb21PcmlnaW4gYW5kIHRyYW5zZm9ybSB2YWx1ZXMgYXMgd2UgbmVlZCB0byBzZXQgc2V0IHRoZVxyXG4gICAgICAgICAgICAvLyBkZWZhdWx0IG9wZW5pbmcgYW5pbWF0aW9uIGlmIHVzZXIgbWlzc2VkIHRvIGFkZCB0aGUgbGctc2l6ZSBhdHRyaWJ1dGVcclxuICAgICAgICAgICAgaWYgKF90aGlzLnpvb21Gcm9tT3JpZ2luICYmIHRyYW5zZm9ybSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRTbGlkZV8xID0gX3RoaXMuZ2V0U2xpZGVJdGVtKGluZGV4KTtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnRTbGlkZV8xLmNzcygndHJhbnNmb3JtJywgdHJhbnNmb3JtKTtcclxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRTbGlkZV8xXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnbGctc3RhcnQtcHJvZ3Jlc3MgbGctc3RhcnQtZW5kLXByb2dyZXNzJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmNzcygndHJhbnNpdGlvbi1kdXJhdGlvbicsIF90aGlzLnNldHRpbmdzLnN0YXJ0QW5pbWF0aW9uRHVyYXRpb24gKyAnbXMnKTtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5vdXRlci5hZGRDbGFzcygnbGctem9vbS1mcm9tLWltYWdlJyk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRTbGlkZV8xLmNzcygndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZTNkKDAsIDAsIDApJyk7XHJcbiAgICAgICAgICAgICAgICB9LCAxMDApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuJGJhY2tkcm9wLmFkZENsYXNzKCdpbicpO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuJGNvbnRhaW5lci5hZGRDbGFzcygnbGctc2hvdy1pbicpO1xyXG4gICAgICAgICAgICB9LCAxMCk7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLnNldHRpbmdzLnRyYXBGb2N1cyAmJlxyXG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkgPT09IF90aGlzLnNldHRpbmdzLmNvbnRhaW5lcikge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnRyYXBGb2N1cygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCBfdGhpcy5zZXR0aW5ncy5iYWNrZHJvcER1cmF0aW9uICsgNTApO1xyXG4gICAgICAgICAgICAvLyBsZy12aXNpYmxlIGNsYXNzIHJlc2V0cyBnYWxsZXJ5IG9wYWNpdHkgdG8gMVxyXG4gICAgICAgICAgICBpZiAoIV90aGlzLnpvb21Gcm9tT3JpZ2luIHx8ICF0cmFuc2Zvcm0pIHtcclxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLm91dGVyLmFkZENsYXNzKCdsZy12aXNpYmxlJyk7XHJcbiAgICAgICAgICAgICAgICB9LCBfdGhpcy5zZXR0aW5ncy5iYWNrZHJvcER1cmF0aW9uKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBpbml0aWF0ZSBzbGlkZSBmdW5jdGlvblxyXG4gICAgICAgICAgICBfdGhpcy5zbGlkZShpbmRleCwgZmFsc2UsIGZhbHNlLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIF90aGlzLkxHZWwudHJpZ2dlcihsR0V2ZW50cy5hZnRlck9wZW4pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmIChkb2N1bWVudC5ib2R5ID09PSB0aGlzLnNldHRpbmdzLmNvbnRhaW5lcikge1xyXG4gICAgICAgICAgICAkTEcoJ2h0bWwnKS5hZGRDbGFzcygnbGctb24nKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBOb3RlIC0gQ2hhbmdpbmcgdGhlIHBvc2l0aW9uIG9mIHRoZSBtZWRpYSBvbiBldmVyeSBzbGlkZSB0cmFuc2l0aW9uIGNyZWF0ZXMgYSBmbGlja2VyaW5nIGVmZmVjdC5cclxuICAgICAqIFRoZXJlZm9yZSzCoFRoZSBoZWlnaHQgb2YgdGhlIGNhcHRpb24gaXMgY2FsY3VsYXRlZCBkeW5hbWljYWxseSwgb25seSBvbmNlIGJhc2VkIG9uIHRoZSBmaXJzdCBzbGlkZSBjYXB0aW9uLlxyXG4gICAgICogaWYgeW91IGhhdmUgZHluYW1pYyBjYXB0aW9ucyBmb3IgZWFjaCBtZWRpYSxcclxuICAgICAqIHlvdSBjYW4gcHJvdmlkZSBhbiBhcHByb3ByaWF0ZSBoZWlnaHQgZm9yIHRoZSBjYXB0aW9ucyB2aWEgYWxsb3dNZWRpYU92ZXJsYXAgb3B0aW9uXHJcbiAgICAgKi9cclxuICAgIExpZ2h0R2FsbGVyeS5wcm90b3R5cGUuZ2V0TWVkaWFDb250YWluZXJQb3NpdGlvbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5hbGxvd01lZGlhT3ZlcmxhcCkge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgdG9wOiAwLFxyXG4gICAgICAgICAgICAgICAgYm90dG9tOiAwLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgdG9wID0gdGhpcy4kdG9vbGJhci5nZXQoKS5jbGllbnRIZWlnaHQgfHwgMDtcclxuICAgICAgICB2YXIgc3ViSHRtbCA9IHRoaXMub3V0ZXIuZmluZCgnLmxnLWNvbXBvbmVudHMgLmxnLXN1Yi1odG1sJykuZ2V0KCk7XHJcbiAgICAgICAgdmFyIGNhcHRpb25IZWlnaHQgPSB0aGlzLnNldHRpbmdzLmRlZmF1bHRDYXB0aW9uSGVpZ2h0IHx8XHJcbiAgICAgICAgICAgIChzdWJIdG1sICYmIHN1Ykh0bWwuY2xpZW50SGVpZ2h0KSB8fFxyXG4gICAgICAgICAgICAwO1xyXG4gICAgICAgIHZhciB0aHVtYkNvbnRhaW5lciA9IHRoaXMub3V0ZXIuZmluZCgnLmxnLXRodW1iLW91dGVyJykuZ2V0KCk7XHJcbiAgICAgICAgdmFyIHRodW1iSGVpZ2h0ID0gdGh1bWJDb250YWluZXIgPyB0aHVtYkNvbnRhaW5lci5jbGllbnRIZWlnaHQgOiAwO1xyXG4gICAgICAgIHZhciBib3R0b20gPSB0aHVtYkhlaWdodCArIGNhcHRpb25IZWlnaHQ7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdG9wOiB0b3AsXHJcbiAgICAgICAgICAgIGJvdHRvbTogYm90dG9tLFxyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG4gICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS5zZXRNZWRpYUNvbnRhaW5lclBvc2l0aW9uID0gZnVuY3Rpb24gKHRvcCwgYm90dG9tKSB7XHJcbiAgICAgICAgaWYgKHRvcCA9PT0gdm9pZCAwKSB7IHRvcCA9IDA7IH1cclxuICAgICAgICBpZiAoYm90dG9tID09PSB2b2lkIDApIHsgYm90dG9tID0gMDsgfVxyXG4gICAgICAgIHRoaXMuJGNvbnRlbnQuY3NzKCd0b3AnLCB0b3AgKyAncHgnKS5jc3MoJ2JvdHRvbScsIGJvdHRvbSArICdweCcpO1xyXG4gICAgfTtcclxuICAgIExpZ2h0R2FsbGVyeS5wcm90b3R5cGUuaGlkZUJhcnMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAvLyBIaWRlIGNvbnRyb2xsZXJzIGlmIG1vdXNlIGRvZXNuJ3QgbW92ZSBmb3Igc29tZSBwZXJpb2RcclxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgX3RoaXMub3V0ZXIucmVtb3ZlQ2xhc3MoJ2xnLWhpZGUtaXRlbXMnKTtcclxuICAgICAgICAgICAgaWYgKF90aGlzLnNldHRpbmdzLmhpZGVCYXJzRGVsYXkgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5vdXRlci5vbignbW91c2Vtb3ZlLmxnIGNsaWNrLmxnIHRvdWNoc3RhcnQubGcnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMub3V0ZXIucmVtb3ZlQ2xhc3MoJ2xnLWhpZGUtaXRlbXMnKTtcclxuICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoX3RoaXMuaGlkZUJhclRpbWVvdXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFRpbWVvdXQgd2lsbCBiZSBjbGVhcmVkIG9uIGVhY2ggc2xpZGUgbW92ZW1lbnQgYWxzb1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmhpZGVCYXJUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLm91dGVyLmFkZENsYXNzKCdsZy1oaWRlLWl0ZW1zJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgX3RoaXMuc2V0dGluZ3MuaGlkZUJhcnNEZWxheSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIF90aGlzLm91dGVyLnRyaWdnZXIoJ21vdXNlbW92ZS5sZycpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgdGhpcy5zZXR0aW5ncy5zaG93QmFyc0FmdGVyKTtcclxuICAgIH07XHJcbiAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLmluaXRQaWN0dXJlRmlsbCA9IGZ1bmN0aW9uICgkaW1nKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3Muc3VwcG9ydExlZ2FjeUJyb3dzZXIpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIHBpY3R1cmVmaWxsKHtcclxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50czogWyRpbWcuZ2V0KCldLFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignbGlnaHRHYWxsZXJ5IDotIElmIHlvdSB3YW50IHNyY3NldCBvciBwaWN0dXJlIHRhZyB0byBiZSBzdXBwb3J0ZWQgZm9yIG9sZGVyIGJyb3dzZXIgcGxlYXNlIGluY2x1ZGUgcGljdHVyZWZpbCBqYXZhc2NyaXB0IGxpYnJhcnkgaW4geW91ciBkb2N1bWVudC4nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqICBAZGVzYyBDcmVhdGUgaW1hZ2UgY291bnRlclxyXG4gICAgICogIEV4OiAxLzEwXHJcbiAgICAgKi9cclxuICAgIExpZ2h0R2FsbGVyeS5wcm90b3R5cGUuY291bnRlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5jb3VudGVyKSB7XHJcbiAgICAgICAgICAgIHZhciBjb3VudGVySHRtbCA9IFwiPGRpdiBjbGFzcz1cXFwibGctY291bnRlclxcXCIgcm9sZT1cXFwic3RhdHVzXFxcIiBhcmlhLWxpdmU9XFxcInBvbGl0ZVxcXCI+XFxuICAgICAgICAgICAgICAgIDxzcGFuIGlkPVxcXCJcIiArIHRoaXMuZ2V0SWROYW1lKCdsZy1jb3VudGVyLWN1cnJlbnQnKSArIFwiXFxcIiBjbGFzcz1cXFwibGctY291bnRlci1jdXJyZW50XFxcIj5cIiArICh0aGlzLmluZGV4ICsgMSkgKyBcIiA8L3NwYW4+IC9cXG4gICAgICAgICAgICAgICAgPHNwYW4gaWQ9XFxcIlwiICsgdGhpcy5nZXRJZE5hbWUoJ2xnLWNvdW50ZXItYWxsJykgKyBcIlxcXCIgY2xhc3M9XFxcImxnLWNvdW50ZXItYWxsXFxcIj5cIiArIHRoaXMuZ2FsbGVyeUl0ZW1zLmxlbmd0aCArIFwiIDwvc3Bhbj48L2Rpdj5cIjtcclxuICAgICAgICAgICAgdGhpcy5vdXRlci5maW5kKHRoaXMuc2V0dGluZ3MuYXBwZW5kQ291bnRlclRvKS5hcHBlbmQoY291bnRlckh0bWwpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqICBAZGVzYyBhZGQgc3ViLWh0bWwgaW50byB0aGUgc2xpZGVcclxuICAgICAqICBAcGFyYW0ge051bWJlcn0gaW5kZXggLSBpbmRleCBvZiB0aGUgc2xpZGVcclxuICAgICAqL1xyXG4gICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS5hZGRIdG1sID0gZnVuY3Rpb24gKGluZGV4KSB7XHJcbiAgICAgICAgdmFyIHN1Ykh0bWw7XHJcbiAgICAgICAgdmFyIHN1Ykh0bWxVcmw7XHJcbiAgICAgICAgaWYgKHRoaXMuZ2FsbGVyeUl0ZW1zW2luZGV4XS5zdWJIdG1sVXJsKSB7XHJcbiAgICAgICAgICAgIHN1Ykh0bWxVcmwgPSB0aGlzLmdhbGxlcnlJdGVtc1tpbmRleF0uc3ViSHRtbFVybDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHN1Ykh0bWwgPSB0aGlzLmdhbGxlcnlJdGVtc1tpbmRleF0uc3ViSHRtbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFzdWJIdG1sVXJsKSB7XHJcbiAgICAgICAgICAgIGlmIChzdWJIdG1sKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBnZXQgZmlyc3QgbGV0dGVyIG9mIHN1Yi1odG1sXHJcbiAgICAgICAgICAgICAgICAvLyBpZiBmaXJzdCBsZXR0ZXIgc3RhcnRzIHdpdGggLiBvciAjIGdldCB0aGUgaHRtbCBmb3JtIHRoZSBqUXVlcnkgb2JqZWN0XHJcbiAgICAgICAgICAgICAgICB2YXIgZkwgPSBzdWJIdG1sLnN1YnN0cmluZygwLCAxKTtcclxuICAgICAgICAgICAgICAgIGlmIChmTCA9PT0gJy4nIHx8IGZMID09PSAnIycpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5zdWJIdG1sU2VsZWN0b3JSZWxhdGl2ZSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAhdGhpcy5zZXR0aW5ncy5keW5hbWljKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Ykh0bWwgPSAkTEcodGhpcy5pdGVtcylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5lcShpbmRleClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5maW5kKHN1Ykh0bWwpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmlyc3QoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmh0bWwoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Ykh0bWwgPSAkTEcoc3ViSHRtbCkuZmlyc3QoKS5odG1sKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgc3ViSHRtbCA9ICcnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmFwcGVuZFN1Ykh0bWxUbyAhPT0gJy5sZy1pdGVtJykge1xyXG4gICAgICAgICAgICBpZiAoc3ViSHRtbFVybCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vdXRlci5maW5kKCcubGctc3ViLWh0bWwnKS5sb2FkKHN1Ykh0bWxVcmwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vdXRlci5maW5kKCcubGctc3ViLWh0bWwnKS5odG1sKHN1Ykh0bWwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgY3VycmVudFNsaWRlID0gJExHKHRoaXMuZ2V0U2xpZGVJdGVtSWQoaW5kZXgpKTtcclxuICAgICAgICAgICAgaWYgKHN1Ykh0bWxVcmwpIHtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnRTbGlkZS5sb2FkKHN1Ykh0bWxVcmwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY3VycmVudFNsaWRlLmFwcGVuZChcIjxkaXYgY2xhc3M9XFxcImxnLXN1Yi1odG1sXFxcIj5cIiArIHN1Ykh0bWwgKyBcIjwvZGl2PlwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBBZGQgbGctZW1wdHktaHRtbCBjbGFzcyBpZiB0aXRsZSBkb2Vzbid0IGV4aXN0XHJcbiAgICAgICAgaWYgKHR5cGVvZiBzdWJIdG1sICE9PSAndW5kZWZpbmVkJyAmJiBzdWJIdG1sICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGlmIChzdWJIdG1sID09PSAnJykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vdXRlclxyXG4gICAgICAgICAgICAgICAgICAgIC5maW5kKHRoaXMuc2V0dGluZ3MuYXBwZW5kU3ViSHRtbFRvKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnbGctZW1wdHktaHRtbCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vdXRlclxyXG4gICAgICAgICAgICAgICAgICAgIC5maW5kKHRoaXMuc2V0dGluZ3MuYXBwZW5kU3ViSHRtbFRvKVxyXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnbGctZW1wdHktaHRtbCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuTEdlbC50cmlnZ2VyKGxHRXZlbnRzLmFmdGVyQXBwZW5kU3ViSHRtbCwge1xyXG4gICAgICAgICAgICBpbmRleDogaW5kZXgsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiAgQGRlc2MgUHJlbG9hZCBzbGlkZXNcclxuICAgICAqICBAcGFyYW0ge051bWJlcn0gaW5kZXggLSBpbmRleCBvZiB0aGUgc2xpZGVcclxuICAgICAqIEB0b2RvIHByZWxvYWQgbm90IHdvcmtpbmcgZm9yIHRoZSBmaXJzdCBzbGlkZSwgQWxzbywgc2hvdWxkIHdvcmsgZm9yIHRoZSBmaXJzdCBhbmQgbGFzdCBzbGlkZSBhcyB3ZWxsXHJcbiAgICAgKi9cclxuICAgIExpZ2h0R2FsbGVyeS5wcm90b3R5cGUucHJlbG9hZCA9IGZ1bmN0aW9uIChpbmRleCkge1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDw9IHRoaXMuc2V0dGluZ3MucHJlbG9hZDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChpID49IHRoaXMuZ2FsbGVyeUl0ZW1zLmxlbmd0aCAtIGluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmxvYWRDb250ZW50KGluZGV4ICsgaSwgZmFsc2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKHZhciBqID0gMTsgaiA8PSB0aGlzLnNldHRpbmdzLnByZWxvYWQ7IGorKykge1xyXG4gICAgICAgICAgICBpZiAoaW5kZXggLSBqIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5sb2FkQ29udGVudChpbmRleCAtIGosIGZhbHNlKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS5nZXREdW1teUltZ1N0eWxlcyA9IGZ1bmN0aW9uIChpbWFnZVNpemUpIHtcclxuICAgICAgICBpZiAoIWltYWdlU2l6ZSlcclxuICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgIHJldHVybiBcIndpZHRoOlwiICsgaW1hZ2VTaXplLndpZHRoICsgXCJweDtcXG4gICAgICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IC1cIiArIGltYWdlU2l6ZS53aWR0aCAvIDIgKyBcInB4O1xcbiAgICAgICAgICAgICAgICBtYXJnaW4tdG9wOiAtXCIgKyBpbWFnZVNpemUuaGVpZ2h0IC8gMiArIFwicHg7XFxuICAgICAgICAgICAgICAgIGhlaWdodDpcIiArIGltYWdlU2l6ZS5oZWlnaHQgKyBcInB4XCI7XHJcbiAgICB9O1xyXG4gICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS5nZXRWaWRlb0NvbnRTdHlsZSA9IGZ1bmN0aW9uIChpbWFnZVNpemUpIHtcclxuICAgICAgICBpZiAoIWltYWdlU2l6ZSlcclxuICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgIHJldHVybiBcIndpZHRoOlwiICsgaW1hZ2VTaXplLndpZHRoICsgXCJweDtcXG4gICAgICAgICAgICAgICAgaGVpZ2h0OlwiICsgaW1hZ2VTaXplLmhlaWdodCArIFwicHhcIjtcclxuICAgIH07XHJcbiAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLmdldER1bW15SW1hZ2VDb250ZW50ID0gZnVuY3Rpb24gKCRjdXJyZW50U2xpZGUsIGluZGV4LCBhbHQpIHtcclxuICAgICAgICB2YXIgJGN1cnJlbnRJdGVtO1xyXG4gICAgICAgIGlmICghdGhpcy5zZXR0aW5ncy5keW5hbWljKSB7XHJcbiAgICAgICAgICAgICRjdXJyZW50SXRlbSA9ICRMRyh0aGlzLml0ZW1zKS5lcShpbmRleCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICgkY3VycmVudEl0ZW0pIHtcclxuICAgICAgICAgICAgdmFyIF9kdW1teUltZ1NyYyA9IHZvaWQgMDtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLnNldHRpbmdzLmV4VGh1bWJJbWFnZSkge1xyXG4gICAgICAgICAgICAgICAgX2R1bW15SW1nU3JjID0gJGN1cnJlbnRJdGVtLmZpbmQoJ2ltZycpLmZpcnN0KCkuYXR0cignc3JjJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBfZHVtbXlJbWdTcmMgPSAkY3VycmVudEl0ZW0uYXR0cih0aGlzLnNldHRpbmdzLmV4VGh1bWJJbWFnZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCFfZHVtbXlJbWdTcmMpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgICAgIHZhciBpbWdTdHlsZSA9IHRoaXMuZ2V0RHVtbXlJbWdTdHlsZXModGhpcy5jdXJyZW50SW1hZ2VTaXplKTtcclxuICAgICAgICAgICAgdmFyIGR1bW15SW1nQ29udGVudCA9IFwiPGltZyBcIiArIGFsdCArIFwiIHN0eWxlPVxcXCJcIiArIGltZ1N0eWxlICsgXCJcXFwiIGNsYXNzPVxcXCJsZy1kdW1teS1pbWdcXFwiIHNyYz1cXFwiXCIgKyBfZHVtbXlJbWdTcmMgKyBcIlxcXCIgLz5cIjtcclxuICAgICAgICAgICAgJGN1cnJlbnRTbGlkZS5hZGRDbGFzcygnbGctZmlyc3Qtc2xpZGUnKTtcclxuICAgICAgICAgICAgdGhpcy5vdXRlci5hZGRDbGFzcygnbGctZmlyc3Qtc2xpZGUtbG9hZGluZycpO1xyXG4gICAgICAgICAgICByZXR1cm4gZHVtbXlJbWdDb250ZW50O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gJyc7XHJcbiAgICB9O1xyXG4gICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS5zZXRJbWdNYXJrdXAgPSBmdW5jdGlvbiAoc3JjLCAkY3VycmVudFNsaWRlLCBpbmRleCkge1xyXG4gICAgICAgIHZhciBjdXJyZW50R2FsbGVyeUl0ZW0gPSB0aGlzLmdhbGxlcnlJdGVtc1tpbmRleF07XHJcbiAgICAgICAgdmFyIGFsdCA9IGN1cnJlbnRHYWxsZXJ5SXRlbS5hbHQsIHNyY3NldCA9IGN1cnJlbnRHYWxsZXJ5SXRlbS5zcmNzZXQsIHNpemVzID0gY3VycmVudEdhbGxlcnlJdGVtLnNpemVzLCBzb3VyY2VzID0gY3VycmVudEdhbGxlcnlJdGVtLnNvdXJjZXM7XHJcbiAgICAgICAgLy8gVXNlIHRoZSB0aHVtYm5haWwgYXMgZHVtbXkgaW1hZ2Ugd2hpY2ggd2lsbCBiZSByZXNpemVkIHRvIGFjdHVhbCBpbWFnZSBzaXplIGFuZFxyXG4gICAgICAgIC8vIGRpc3BsYXllZCBvbiB0b3Agb2YgYWN0dWFsIGltYWdlXHJcbiAgICAgICAgdmFyIGltZ0NvbnRlbnQgPSAnJztcclxuICAgICAgICB2YXIgYWx0QXR0ciA9IGFsdCA/ICdhbHQ9XCInICsgYWx0ICsgJ1wiJyA6ICcnO1xyXG4gICAgICAgIGlmICh0aGlzLmlzRmlyc3RTbGlkZVdpdGhab29tQW5pbWF0aW9uKCkpIHtcclxuICAgICAgICAgICAgaW1nQ29udGVudCA9IHRoaXMuZ2V0RHVtbXlJbWFnZUNvbnRlbnQoJGN1cnJlbnRTbGlkZSwgaW5kZXgsIGFsdEF0dHIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaW1nQ29udGVudCA9IHV0aWxzLmdldEltZ01hcmt1cChpbmRleCwgc3JjLCBhbHRBdHRyLCBzcmNzZXQsIHNpemVzLCBzb3VyY2VzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGltZ01hcmt1cCA9IFwiPHBpY3R1cmUgY2xhc3M9XFxcImxnLWltZy13cmFwXFxcIj4gXCIgKyBpbWdDb250ZW50ICsgXCI8L3BpY3R1cmU+XCI7XHJcbiAgICAgICAgJGN1cnJlbnRTbGlkZS5wcmVwZW5kKGltZ01hcmt1cCk7XHJcbiAgICB9O1xyXG4gICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS5vblNsaWRlT2JqZWN0TG9hZCA9IGZ1bmN0aW9uICgkc2xpZGUsIGlzSFRNTDVWaWRlb1dpdGhvdXRQb3N0ZXIsIG9uTG9hZCwgb25FcnJvcikge1xyXG4gICAgICAgIHZhciBtZWRpYU9iamVjdCA9ICRzbGlkZS5maW5kKCcubGctb2JqZWN0JykuZmlyc3QoKTtcclxuICAgICAgICBpZiAodXRpbHMuaXNJbWFnZUxvYWRlZChtZWRpYU9iamVjdC5nZXQoKSkgfHxcclxuICAgICAgICAgICAgaXNIVE1MNVZpZGVvV2l0aG91dFBvc3Rlcikge1xyXG4gICAgICAgICAgICBvbkxvYWQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIG1lZGlhT2JqZWN0Lm9uKCdsb2FkLmxnIGVycm9yLmxnJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgb25Mb2FkICYmIG9uTG9hZCgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgbWVkaWFPYmplY3Qub24oJ2Vycm9yLmxnJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgb25FcnJvciAmJiBvbkVycm9yKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gJGVsIEN1cnJlbnQgc2xpZGUgaXRlbVxyXG4gICAgICogQHBhcmFtIGluZGV4XHJcbiAgICAgKiBAcGFyYW0gZGVsYXkgRGVsYXkgaXMgMCBleGNlcHQgZmlyc3QgdGltZVxyXG4gICAgICogQHBhcmFtIHNwZWVkIFNwZWVkIGlzIHNhbWUgYXMgZGVsYXksIGV4Y2VwdCBpdCBpcyAwIGlmIGdhbGxlcnkgaXMgb3BlbmVkIHZpYSBoYXNoIHBsdWdpblxyXG4gICAgICogQHBhcmFtIGlzRmlyc3RTbGlkZVxyXG4gICAgICovXHJcbiAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLm9uTGdPYmplY3RMb2FkID0gZnVuY3Rpb24gKGN1cnJlbnRTbGlkZSwgaW5kZXgsIGRlbGF5LCBzcGVlZCwgaXNGaXJzdFNsaWRlLCBpc0hUTUw1VmlkZW9XaXRob3V0UG9zdGVyKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLm9uU2xpZGVPYmplY3RMb2FkKGN1cnJlbnRTbGlkZSwgaXNIVE1MNVZpZGVvV2l0aG91dFBvc3RlciwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBfdGhpcy50cmlnZ2VyU2xpZGVJdGVtTG9hZChjdXJyZW50U2xpZGUsIGluZGV4LCBkZWxheSwgc3BlZWQsIGlzRmlyc3RTbGlkZSk7XHJcbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBjdXJyZW50U2xpZGUuYWRkQ2xhc3MoJ2xnLWNvbXBsZXRlIGxnLWNvbXBsZXRlXycpO1xyXG4gICAgICAgICAgICBjdXJyZW50U2xpZGUuaHRtbCgnPHNwYW4gY2xhc3M9XCJsZy1lcnJvci1tc2dcIj4nICtcclxuICAgICAgICAgICAgICAgIF90aGlzLnNldHRpbmdzLnN0cmluZ3NbJ21lZGlhTG9hZGluZ0ZhaWxlZCddICtcclxuICAgICAgICAgICAgICAgICc8L3NwYW4+Jyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS50cmlnZ2VyU2xpZGVJdGVtTG9hZCA9IGZ1bmN0aW9uICgkY3VycmVudFNsaWRlLCBpbmRleCwgZGVsYXksIHNwZWVkLCBpc0ZpcnN0U2xpZGUpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBjdXJyZW50R2FsbGVyeUl0ZW0gPSB0aGlzLmdhbGxlcnlJdGVtc1tpbmRleF07XHJcbiAgICAgICAgLy8gQWRkaW5nIGRlbGF5IGZvciB2aWRlbyBzbGlkZXMgd2l0aG91dCBwb3N0ZXIgZm9yIGJldHRlciBwZXJmb3JtYW5jZSBhbmQgdXNlciBleHBlcmllbmNlXHJcbiAgICAgICAgLy8gVmlkZW9zIHNob3VsZCBzdGFydCBwbGF5aW5nIG9uY2Ugb25jZSB0aGUgZ2FsbGVyeSBpcyBjb21wbGV0ZWx5IGxvYWRlZFxyXG4gICAgICAgIHZhciBfc3BlZWQgPSBpc0ZpcnN0U2xpZGUgJiZcclxuICAgICAgICAgICAgdGhpcy5nZXRTbGlkZVR5cGUoY3VycmVudEdhbGxlcnlJdGVtKSA9PT0gJ3ZpZGVvJyAmJlxyXG4gICAgICAgICAgICAhY3VycmVudEdhbGxlcnlJdGVtLnBvc3RlclxyXG4gICAgICAgICAgICA/IHNwZWVkXHJcbiAgICAgICAgICAgIDogMDtcclxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgJGN1cnJlbnRTbGlkZS5hZGRDbGFzcygnbGctY29tcGxldGUgbGctY29tcGxldGVfJyk7XHJcbiAgICAgICAgICAgIF90aGlzLkxHZWwudHJpZ2dlcihsR0V2ZW50cy5zbGlkZUl0ZW1Mb2FkLCB7XHJcbiAgICAgICAgICAgICAgICBpbmRleDogaW5kZXgsXHJcbiAgICAgICAgICAgICAgICBkZWxheTogZGVsYXkgfHwgMCxcclxuICAgICAgICAgICAgICAgIGlzRmlyc3RTbGlkZTogaXNGaXJzdFNsaWRlLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LCBfc3BlZWQpO1xyXG4gICAgfTtcclxuICAgIExpZ2h0R2FsbGVyeS5wcm90b3R5cGUuaXNGaXJzdFNsaWRlV2l0aFpvb21BbmltYXRpb24gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuICEhKCF0aGlzLmxHYWxsZXJ5T24gJiZcclxuICAgICAgICAgICAgdGhpcy56b29tRnJvbU9yaWdpbiAmJlxyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRJbWFnZVNpemUpO1xyXG4gICAgfTtcclxuICAgIC8vIEFkZCB2aWRlbyBzbGlkZUluZm9cclxuICAgIExpZ2h0R2FsbGVyeS5wcm90b3R5cGUuYWRkU2xpZGVWaWRlb0luZm8gPSBmdW5jdGlvbiAoaXRlbXMpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGl0ZW1zLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQsIGluZGV4KSB7XHJcbiAgICAgICAgICAgIGVsZW1lbnQuX19zbGlkZVZpZGVvSW5mbyA9IHV0aWxzLmlzVmlkZW8oZWxlbWVudC5zcmMsICEhZWxlbWVudC52aWRlbywgaW5kZXgpO1xyXG4gICAgICAgICAgICBpZiAoZWxlbWVudC5fX3NsaWRlVmlkZW9JbmZvICYmXHJcbiAgICAgICAgICAgICAgICBfdGhpcy5zZXR0aW5ncy5sb2FkWW91VHViZVBvc3RlciAmJlxyXG4gICAgICAgICAgICAgICAgIWVsZW1lbnQucG9zdGVyICYmXHJcbiAgICAgICAgICAgICAgICBlbGVtZW50Ll9fc2xpZGVWaWRlb0luZm8ueW91dHViZSkge1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudC5wb3N0ZXIgPSBcIi8vaW1nLnlvdXR1YmUuY29tL3ZpL1wiICsgZWxlbWVudC5fX3NsaWRlVmlkZW9JbmZvLnlvdXR1YmVbMV0gKyBcIi9tYXhyZXNkZWZhdWx0LmpwZ1wiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiAgTG9hZCBzbGlkZSBjb250ZW50IGludG8gc2xpZGUuXHJcbiAgICAgKiAgVGhpcyBpcyB1c2VkIHRvIGxvYWQgY29udGVudCBpbnRvIHNsaWRlcyB0aGF0IGlzIG5vdCB2aXNpYmxlIHRvb1xyXG4gICAgICogIEBwYXJhbSB7TnVtYmVyfSBpbmRleCAtIGluZGV4IG9mIHRoZSBzbGlkZS5cclxuICAgICAqICBAcGFyYW0ge0Jvb2xlYW59IHJlYyAtIGlmIHRydWUgY2FsbCBsb2FkY29udGVudCgpIGZ1bmN0aW9uIGFnYWluLlxyXG4gICAgICovXHJcbiAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLmxvYWRDb250ZW50ID0gZnVuY3Rpb24gKGluZGV4LCByZWMpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBjdXJyZW50R2FsbGVyeUl0ZW0gPSB0aGlzLmdhbGxlcnlJdGVtc1tpbmRleF07XHJcbiAgICAgICAgdmFyICRjdXJyZW50U2xpZGUgPSAkTEcodGhpcy5nZXRTbGlkZUl0ZW1JZChpbmRleCkpO1xyXG4gICAgICAgIHZhciBwb3N0ZXIgPSBjdXJyZW50R2FsbGVyeUl0ZW0ucG9zdGVyLCBzcmNzZXQgPSBjdXJyZW50R2FsbGVyeUl0ZW0uc3Jjc2V0LCBzaXplcyA9IGN1cnJlbnRHYWxsZXJ5SXRlbS5zaXplcywgc291cmNlcyA9IGN1cnJlbnRHYWxsZXJ5SXRlbS5zb3VyY2VzO1xyXG4gICAgICAgIHZhciBzcmMgPSBjdXJyZW50R2FsbGVyeUl0ZW0uc3JjO1xyXG4gICAgICAgIHZhciB2aWRlbyA9IGN1cnJlbnRHYWxsZXJ5SXRlbS52aWRlbztcclxuICAgICAgICB2YXIgX2h0bWw1VmlkZW8gPSB2aWRlbyAmJiB0eXBlb2YgdmlkZW8gPT09ICdzdHJpbmcnID8gSlNPTi5wYXJzZSh2aWRlbykgOiB2aWRlbztcclxuICAgICAgICBpZiAoY3VycmVudEdhbGxlcnlJdGVtLnJlc3BvbnNpdmUpIHtcclxuICAgICAgICAgICAgdmFyIHNyY0R5SXRtcyA9IGN1cnJlbnRHYWxsZXJ5SXRlbS5yZXNwb25zaXZlLnNwbGl0KCcsJyk7XHJcbiAgICAgICAgICAgIHNyYyA9IHV0aWxzLmdldFJlc3BvbnNpdmVTcmMoc3JjRHlJdG1zKSB8fCBzcmM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciB2aWRlb0luZm8gPSBjdXJyZW50R2FsbGVyeUl0ZW0uX19zbGlkZVZpZGVvSW5mbztcclxuICAgICAgICB2YXIgbGdWaWRlb1N0eWxlID0gJyc7XHJcbiAgICAgICAgdmFyIGlmcmFtZSA9ICEhY3VycmVudEdhbGxlcnlJdGVtLmlmcmFtZTtcclxuICAgICAgICB2YXIgaXNGaXJzdFNsaWRlID0gIXRoaXMubEdhbGxlcnlPbjtcclxuICAgICAgICAvLyBkZWxheSBmb3IgYWRkaW5nIGNvbXBsZXRlIGNsYXNzLiBpdCBpcyAwIGV4Y2VwdCBmaXJzdCB0aW1lLlxyXG4gICAgICAgIHZhciBkZWxheSA9IDA7XHJcbiAgICAgICAgaWYgKGlzRmlyc3RTbGlkZSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy56b29tRnJvbU9yaWdpbiAmJiB0aGlzLmN1cnJlbnRJbWFnZVNpemUpIHtcclxuICAgICAgICAgICAgICAgIGRlbGF5ID0gdGhpcy5zZXR0aW5ncy5zdGFydEFuaW1hdGlvbkR1cmF0aW9uICsgMTA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBkZWxheSA9IHRoaXMuc2V0dGluZ3MuYmFja2Ryb3BEdXJhdGlvbiArIDEwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghJGN1cnJlbnRTbGlkZS5oYXNDbGFzcygnbGctbG9hZGVkJykpIHtcclxuICAgICAgICAgICAgaWYgKHZpZGVvSW5mbykge1xyXG4gICAgICAgICAgICAgICAgdmFyIF9hID0gdGhpcy5tZWRpYUNvbnRhaW5lclBvc2l0aW9uLCB0b3BfMiA9IF9hLnRvcCwgYm90dG9tID0gX2EuYm90dG9tO1xyXG4gICAgICAgICAgICAgICAgdmFyIHZpZGVvU2l6ZSA9IHV0aWxzLmdldFNpemUodGhpcy5pdGVtc1tpbmRleF0sIHRoaXMub3V0ZXIsIHRvcF8yICsgYm90dG9tLCB2aWRlb0luZm8gJiYgdGhpcy5zZXR0aW5ncy52aWRlb01heFNpemUpO1xyXG4gICAgICAgICAgICAgICAgbGdWaWRlb1N0eWxlID0gdGhpcy5nZXRWaWRlb0NvbnRTdHlsZSh2aWRlb1NpemUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChpZnJhbWUpIHtcclxuICAgICAgICAgICAgICAgIHZhciBtYXJrdXAgPSB1dGlscy5nZXRJZnJhbWVNYXJrdXAodGhpcy5zZXR0aW5ncy5pZnJhbWVXaWR0aCwgdGhpcy5zZXR0aW5ncy5pZnJhbWVIZWlnaHQsIHRoaXMuc2V0dGluZ3MuaWZyYW1lTWF4V2lkdGgsIHRoaXMuc2V0dGluZ3MuaWZyYW1lTWF4SGVpZ2h0LCBzcmMsIGN1cnJlbnRHYWxsZXJ5SXRlbS5pZnJhbWVUaXRsZSk7XHJcbiAgICAgICAgICAgICAgICAkY3VycmVudFNsaWRlLnByZXBlbmQobWFya3VwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChwb3N0ZXIpIHtcclxuICAgICAgICAgICAgICAgIHZhciBkdW1teUltZyA9ICcnO1xyXG4gICAgICAgICAgICAgICAgdmFyIGhhc1N0YXJ0QW5pbWF0aW9uID0gaXNGaXJzdFNsaWRlICYmXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy56b29tRnJvbU9yaWdpbiAmJlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudEltYWdlU2l6ZTtcclxuICAgICAgICAgICAgICAgIGlmIChoYXNTdGFydEFuaW1hdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGR1bW15SW1nID0gdGhpcy5nZXREdW1teUltYWdlQ29udGVudCgkY3VycmVudFNsaWRlLCBpbmRleCwgJycpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFyIG1hcmt1cCA9IHV0aWxzLmdldFZpZGVvUG9zdGVyTWFya3VwKHBvc3RlciwgZHVtbXlJbWcgfHwgJycsIGxnVmlkZW9TdHlsZSwgdGhpcy5zZXR0aW5ncy5zdHJpbmdzWydwbGF5VmlkZW8nXSwgdmlkZW9JbmZvKTtcclxuICAgICAgICAgICAgICAgICRjdXJyZW50U2xpZGUucHJlcGVuZChtYXJrdXApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHZpZGVvSW5mbykge1xyXG4gICAgICAgICAgICAgICAgdmFyIG1hcmt1cCA9IFwiPGRpdiBjbGFzcz1cXFwibGctdmlkZW8tY29udCBcXFwiIHN0eWxlPVxcXCJcIiArIGxnVmlkZW9TdHlsZSArIFwiXFxcIj48L2Rpdj5cIjtcclxuICAgICAgICAgICAgICAgICRjdXJyZW50U2xpZGUucHJlcGVuZChtYXJrdXApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRJbWdNYXJrdXAoc3JjLCAkY3VycmVudFNsaWRlLCBpbmRleCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3Jjc2V0IHx8IHNvdXJjZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgJGltZyA9ICRjdXJyZW50U2xpZGUuZmluZCgnLmxnLW9iamVjdCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5pdFBpY3R1cmVGaWxsKCRpbWcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChwb3N0ZXIgfHwgdmlkZW9JbmZvKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLkxHZWwudHJpZ2dlcihsR0V2ZW50cy5oYXNWaWRlbywge1xyXG4gICAgICAgICAgICAgICAgICAgIGluZGV4OiBpbmRleCxcclxuICAgICAgICAgICAgICAgICAgICBzcmM6IHNyYyxcclxuICAgICAgICAgICAgICAgICAgICBodG1sNVZpZGVvOiBfaHRtbDVWaWRlbyxcclxuICAgICAgICAgICAgICAgICAgICBoYXNQb3N0ZXI6ICEhcG9zdGVyLFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5MR2VsLnRyaWdnZXIobEdFdmVudHMuYWZ0ZXJBcHBlbmRTbGlkZSwgeyBpbmRleDogaW5kZXggfSk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmxHYWxsZXJ5T24gJiZcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0dGluZ3MuYXBwZW5kU3ViSHRtbFRvID09PSAnLmxnLWl0ZW0nKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFkZEh0bWwoaW5kZXgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIEZvciBmaXJzdCB0aW1lIGFkZCBzb21lIGRlbGF5IGZvciBkaXNwbGF5aW5nIHRoZSBzdGFydCBhbmltYXRpb24uXHJcbiAgICAgICAgdmFyIF9zcGVlZCA9IDA7XHJcbiAgICAgICAgLy8gRG8gbm90IGNoYW5nZSB0aGUgZGVsYXkgdmFsdWUgYmVjYXVzZSBpdCBpcyByZXF1aXJlZCBmb3Igem9vbSBwbHVnaW4uXHJcbiAgICAgICAgLy8gSWYgZ2FsbGVyeSBvcGVuZWQgZnJvbSBkaXJlY3QgdXJsIChoYXNoKSBzcGVlZCB2YWx1ZSBzaG91bGQgYmUgMFxyXG4gICAgICAgIGlmIChkZWxheSAmJiAhJExHKGRvY3VtZW50LmJvZHkpLmhhc0NsYXNzKCdsZy1mcm9tLWhhc2gnKSkge1xyXG4gICAgICAgICAgICBfc3BlZWQgPSBkZWxheTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gT25seSBmb3IgZmlyc3Qgc2xpZGUgYW5kIHpvb21Gcm9tT3JpZ2luIGlzIGVuYWJsZWRcclxuICAgICAgICBpZiAodGhpcy5pc0ZpcnN0U2xpZGVXaXRoWm9vbUFuaW1hdGlvbigpKSB7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgJGN1cnJlbnRTbGlkZVxyXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnbGctc3RhcnQtZW5kLXByb2dyZXNzIGxnLXN0YXJ0LXByb2dyZXNzJylcclxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignc3R5bGUnKTtcclxuICAgICAgICAgICAgfSwgdGhpcy5zZXR0aW5ncy5zdGFydEFuaW1hdGlvbkR1cmF0aW9uICsgMTAwKTtcclxuICAgICAgICAgICAgaWYgKCEkY3VycmVudFNsaWRlLmhhc0NsYXNzKCdsZy1sb2FkZWQnKSkge1xyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLmdldFNsaWRlVHlwZShjdXJyZW50R2FsbGVyeUl0ZW0pID09PSAnaW1hZ2UnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhbHQgPSBjdXJyZW50R2FsbGVyeUl0ZW0uYWx0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWx0QXR0ciA9IGFsdCA/ICdhbHQ9XCInICsgYWx0ICsgJ1wiJyA6ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkY3VycmVudFNsaWRlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmluZCgnLmxnLWltZy13cmFwJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQodXRpbHMuZ2V0SW1nTWFya3VwKGluZGV4LCBzcmMsIGFsdEF0dHIsIHNyY3NldCwgc2l6ZXMsIGN1cnJlbnRHYWxsZXJ5SXRlbS5zb3VyY2VzKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzcmNzZXQgfHwgc291cmNlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRpbWcgPSAkY3VycmVudFNsaWRlLmZpbmQoJy5sZy1vYmplY3QnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmluaXRQaWN0dXJlRmlsbCgkaW1nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuZ2V0U2xpZGVUeXBlKGN1cnJlbnRHYWxsZXJ5SXRlbSkgPT09ICdpbWFnZScgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgKF90aGlzLmdldFNsaWRlVHlwZShjdXJyZW50R2FsbGVyeUl0ZW0pID09PSAndmlkZW8nICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3N0ZXIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLm9uTGdPYmplY3RMb2FkKCRjdXJyZW50U2xpZGUsIGluZGV4LCBkZWxheSwgX3NwZWVkLCB0cnVlLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxvYWQgcmVtYWluaW5nIHNsaWRlcyBvbmNlIHRoZSBzbGlkZSBpcyBjb21wbGV0ZWx5IGxvYWRlZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5vblNsaWRlT2JqZWN0TG9hZCgkY3VycmVudFNsaWRlLCAhISh2aWRlb0luZm8gJiYgdmlkZW9JbmZvLmh0bWw1ICYmICFwb3N0ZXIpLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5sb2FkQ29udGVudE9uRmlyc3RTbGlkZUxvYWQoaW5kZXgsICRjdXJyZW50U2xpZGUsIF9zcGVlZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmxvYWRDb250ZW50T25GaXJzdFNsaWRlTG9hZChpbmRleCwgJGN1cnJlbnRTbGlkZSwgX3NwZWVkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSwgdGhpcy5zZXR0aW5ncy5zdGFydEFuaW1hdGlvbkR1cmF0aW9uICsgMTAwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBTTGlkZSBjb250ZW50IGhhcyBiZWVuIGFkZGVkIHRvIGRvbVxyXG4gICAgICAgICRjdXJyZW50U2xpZGUuYWRkQ2xhc3MoJ2xnLWxvYWRlZCcpO1xyXG4gICAgICAgIGlmICghdGhpcy5pc0ZpcnN0U2xpZGVXaXRoWm9vbUFuaW1hdGlvbigpIHx8XHJcbiAgICAgICAgICAgICh0aGlzLmdldFNsaWRlVHlwZShjdXJyZW50R2FsbGVyeUl0ZW0pID09PSAndmlkZW8nICYmICFwb3N0ZXIpKSB7XHJcbiAgICAgICAgICAgIHRoaXMub25MZ09iamVjdExvYWQoJGN1cnJlbnRTbGlkZSwgaW5kZXgsIGRlbGF5LCBfc3BlZWQsIGlzRmlyc3RTbGlkZSwgISEodmlkZW9JbmZvICYmIHZpZGVvSW5mby5odG1sNSAmJiAhcG9zdGVyKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFdoZW4gZ2FsbGVyeSBpcyBvcGVuZWQgb25jZSBjb250ZW50IGlzIGxvYWRlZCAoc2Vjb25kIHRpbWUpIG5lZWQgdG8gYWRkIGxnLWNvbXBsZXRlIGNsYXNzIGZvciBjc3Mgc3R5bGluZ1xyXG4gICAgICAgIGlmICgoIXRoaXMuem9vbUZyb21PcmlnaW4gfHwgIXRoaXMuY3VycmVudEltYWdlU2l6ZSkgJiZcclxuICAgICAgICAgICAgJGN1cnJlbnRTbGlkZS5oYXNDbGFzcygnbGctY29tcGxldGVfJykgJiZcclxuICAgICAgICAgICAgIXRoaXMubEdhbGxlcnlPbikge1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICRjdXJyZW50U2xpZGUuYWRkQ2xhc3MoJ2xnLWNvbXBsZXRlJyk7XHJcbiAgICAgICAgICAgIH0sIHRoaXMuc2V0dGluZ3MuYmFja2Ryb3BEdXJhdGlvbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIENvbnRlbnQgbG9hZGVkXHJcbiAgICAgICAgLy8gTmVlZCB0byBzZXQgbEdhbGxlcnlPbiBiZWZvcmUgY2FsbGluZyBwcmVsb2FkIGZ1bmN0aW9uXHJcbiAgICAgICAgdGhpcy5sR2FsbGVyeU9uID0gdHJ1ZTtcclxuICAgICAgICBpZiAocmVjID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIGlmICghJGN1cnJlbnRTbGlkZS5oYXNDbGFzcygnbGctY29tcGxldGVfJykpIHtcclxuICAgICAgICAgICAgICAgICRjdXJyZW50U2xpZGVcclxuICAgICAgICAgICAgICAgICAgICAuZmluZCgnLmxnLW9iamVjdCcpXHJcbiAgICAgICAgICAgICAgICAgICAgLmZpcnN0KClcclxuICAgICAgICAgICAgICAgICAgICAub24oJ2xvYWQubGcgZXJyb3IubGcnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMucHJlbG9hZChpbmRleCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucHJlbG9hZChpbmRleCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzYyBSZW1vdmUgZHVtbXkgaW1hZ2UgY29udGVudCBhbmQgbG9hZCBuZXh0IHNsaWRlc1xyXG4gICAgICogQ2FsbGVkIG9ubHkgZm9yIHRoZSBmaXJzdCB0aW1lIGlmIHpvb21Gcm9tT3JpZ2luIGFuaW1hdGlvbiBpcyBlbmFibGVkXHJcbiAgICAgKiBAcGFyYW0gaW5kZXhcclxuICAgICAqIEBwYXJhbSAkY3VycmVudFNsaWRlXHJcbiAgICAgKiBAcGFyYW0gc3BlZWRcclxuICAgICAqL1xyXG4gICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS5sb2FkQ29udGVudE9uRmlyc3RTbGlkZUxvYWQgPSBmdW5jdGlvbiAoaW5kZXgsICRjdXJyZW50U2xpZGUsIHNwZWVkKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgJGN1cnJlbnRTbGlkZS5maW5kKCcubGctZHVtbXktaW1nJykucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICRjdXJyZW50U2xpZGUucmVtb3ZlQ2xhc3MoJ2xnLWZpcnN0LXNsaWRlJyk7XHJcbiAgICAgICAgICAgIF90aGlzLm91dGVyLnJlbW92ZUNsYXNzKCdsZy1maXJzdC1zbGlkZS1sb2FkaW5nJyk7XHJcbiAgICAgICAgICAgIF90aGlzLmlzRHVtbXlJbWFnZVJlbW92ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICBfdGhpcy5wcmVsb2FkKGluZGV4KTtcclxuICAgICAgICB9LCBzcGVlZCArIDMwMCk7XHJcbiAgICB9O1xyXG4gICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS5nZXRJdGVtc1RvQmVJbnNlcnRlZFRvRG9tID0gZnVuY3Rpb24gKGluZGV4LCBwcmV2SW5kZXgsIG51bWJlck9mSXRlbXMpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGlmIChudW1iZXJPZkl0ZW1zID09PSB2b2lkIDApIHsgbnVtYmVyT2ZJdGVtcyA9IDA7IH1cclxuICAgICAgICB2YXIgaXRlbXNUb0JlSW5zZXJ0ZWRUb0RvbSA9IFtdO1xyXG4gICAgICAgIC8vIE1pbmltdW0gMiBpdGVtcyBzaG91bGQgYmUgdGhlcmVcclxuICAgICAgICB2YXIgcG9zc2libGVOdW1iZXJPZkl0ZW1zID0gTWF0aC5tYXgobnVtYmVyT2ZJdGVtcywgMyk7XHJcbiAgICAgICAgcG9zc2libGVOdW1iZXJPZkl0ZW1zID0gTWF0aC5taW4ocG9zc2libGVOdW1iZXJPZkl0ZW1zLCB0aGlzLmdhbGxlcnlJdGVtcy5sZW5ndGgpO1xyXG4gICAgICAgIHZhciBwcmV2SW5kZXhJdGVtID0gXCJsZy1pdGVtLVwiICsgdGhpcy5sZ0lkICsgXCItXCIgKyBwcmV2SW5kZXg7XHJcbiAgICAgICAgaWYgKHRoaXMuZ2FsbGVyeUl0ZW1zLmxlbmd0aCA8PSAzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZ2FsbGVyeUl0ZW1zLmZvckVhY2goZnVuY3Rpb24gKF9lbGVtZW50LCBpbmRleCkge1xyXG4gICAgICAgICAgICAgICAgaXRlbXNUb0JlSW5zZXJ0ZWRUb0RvbS5wdXNoKFwibGctaXRlbS1cIiArIF90aGlzLmxnSWQgKyBcIi1cIiArIGluZGV4KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiBpdGVtc1RvQmVJbnNlcnRlZFRvRG9tO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaW5kZXggPCAodGhpcy5nYWxsZXJ5SXRlbXMubGVuZ3RoIC0gMSkgLyAyKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGlkeCA9IGluZGV4OyBpZHggPiBpbmRleCAtIHBvc3NpYmxlTnVtYmVyT2ZJdGVtcyAvIDIgJiYgaWR4ID49IDA7IGlkeC0tKSB7XHJcbiAgICAgICAgICAgICAgICBpdGVtc1RvQmVJbnNlcnRlZFRvRG9tLnB1c2goXCJsZy1pdGVtLVwiICsgdGhpcy5sZ0lkICsgXCItXCIgKyBpZHgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBudW1iZXJPZkV4aXN0aW5nSXRlbXMgPSBpdGVtc1RvQmVJbnNlcnRlZFRvRG9tLmxlbmd0aDtcclxuICAgICAgICAgICAgZm9yICh2YXIgaWR4ID0gMDsgaWR4IDwgcG9zc2libGVOdW1iZXJPZkl0ZW1zIC0gbnVtYmVyT2ZFeGlzdGluZ0l0ZW1zOyBpZHgrKykge1xyXG4gICAgICAgICAgICAgICAgaXRlbXNUb0JlSW5zZXJ0ZWRUb0RvbS5wdXNoKFwibGctaXRlbS1cIiArIHRoaXMubGdJZCArIFwiLVwiICsgKGluZGV4ICsgaWR4ICsgMSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpZHggPSBpbmRleDsgaWR4IDw9IHRoaXMuZ2FsbGVyeUl0ZW1zLmxlbmd0aCAtIDEgJiZcclxuICAgICAgICAgICAgICAgIGlkeCA8IGluZGV4ICsgcG9zc2libGVOdW1iZXJPZkl0ZW1zIC8gMjsgaWR4KyspIHtcclxuICAgICAgICAgICAgICAgIGl0ZW1zVG9CZUluc2VydGVkVG9Eb20ucHVzaChcImxnLWl0ZW0tXCIgKyB0aGlzLmxnSWQgKyBcIi1cIiArIGlkeCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIG51bWJlck9mRXhpc3RpbmdJdGVtcyA9IGl0ZW1zVG9CZUluc2VydGVkVG9Eb20ubGVuZ3RoO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpZHggPSAwOyBpZHggPCBwb3NzaWJsZU51bWJlck9mSXRlbXMgLSBudW1iZXJPZkV4aXN0aW5nSXRlbXM7IGlkeCsrKSB7XHJcbiAgICAgICAgICAgICAgICBpdGVtc1RvQmVJbnNlcnRlZFRvRG9tLnB1c2goXCJsZy1pdGVtLVwiICsgdGhpcy5sZ0lkICsgXCItXCIgKyAoaW5kZXggLSBpZHggLSAxKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MubG9vcCkge1xyXG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IHRoaXMuZ2FsbGVyeUl0ZW1zLmxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgICAgICAgIGl0ZW1zVG9CZUluc2VydGVkVG9Eb20ucHVzaChcImxnLWl0ZW0tXCIgKyB0aGlzLmxnSWQgKyBcIi1cIiArIDApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGluZGV4ID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBpdGVtc1RvQmVJbnNlcnRlZFRvRG9tLnB1c2goXCJsZy1pdGVtLVwiICsgdGhpcy5sZ0lkICsgXCItXCIgKyAodGhpcy5nYWxsZXJ5SXRlbXMubGVuZ3RoIC0gMSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChpdGVtc1RvQmVJbnNlcnRlZFRvRG9tLmluZGV4T2YocHJldkluZGV4SXRlbSkgPT09IC0xKSB7XHJcbiAgICAgICAgICAgIGl0ZW1zVG9CZUluc2VydGVkVG9Eb20ucHVzaChcImxnLWl0ZW0tXCIgKyB0aGlzLmxnSWQgKyBcIi1cIiArIHByZXZJbmRleCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBpdGVtc1RvQmVJbnNlcnRlZFRvRG9tO1xyXG4gICAgfTtcclxuICAgIExpZ2h0R2FsbGVyeS5wcm90b3R5cGUub3JnYW5pemVTbGlkZUl0ZW1zID0gZnVuY3Rpb24gKGluZGV4LCBwcmV2SW5kZXgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBpdGVtc1RvQmVJbnNlcnRlZFRvRG9tID0gdGhpcy5nZXRJdGVtc1RvQmVJbnNlcnRlZFRvRG9tKGluZGV4LCBwcmV2SW5kZXgsIHRoaXMuc2V0dGluZ3MubnVtYmVyT2ZTbGlkZUl0ZW1zSW5Eb20pO1xyXG4gICAgICAgIGl0ZW1zVG9CZUluc2VydGVkVG9Eb20uZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgICAgICBpZiAoX3RoaXMuY3VycmVudEl0ZW1zSW5Eb20uaW5kZXhPZihpdGVtKSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLiRpbm5lci5hcHBlbmQoXCI8ZGl2IGlkPVxcXCJcIiArIGl0ZW0gKyBcIlxcXCIgY2xhc3M9XFxcImxnLWl0ZW1cXFwiPjwvZGl2PlwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuY3VycmVudEl0ZW1zSW5Eb20uZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgICAgICBpZiAoaXRlbXNUb0JlSW5zZXJ0ZWRUb0RvbS5pbmRleE9mKGl0ZW0pID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgJExHKFwiI1wiICsgaXRlbSkucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gaXRlbXNUb0JlSW5zZXJ0ZWRUb0RvbTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEdldCBwcmV2aW91cyBpbmRleCBvZiB0aGUgc2xpZGVcclxuICAgICAqL1xyXG4gICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS5nZXRQcmV2aW91c1NsaWRlSW5kZXggPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHByZXZJbmRleCA9IDA7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgdmFyIGN1cnJlbnRJdGVtSWQgPSB0aGlzLm91dGVyXHJcbiAgICAgICAgICAgICAgICAuZmluZCgnLmxnLWN1cnJlbnQnKVxyXG4gICAgICAgICAgICAgICAgLmZpcnN0KClcclxuICAgICAgICAgICAgICAgIC5hdHRyKCdpZCcpO1xyXG4gICAgICAgICAgICBwcmV2SW5kZXggPSBwYXJzZUludChjdXJyZW50SXRlbUlkLnNwbGl0KCctJylbM10pIHx8IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBwcmV2SW5kZXggPSAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcHJldkluZGV4O1xyXG4gICAgfTtcclxuICAgIExpZ2h0R2FsbGVyeS5wcm90b3R5cGUuc2V0RG93bmxvYWRWYWx1ZSA9IGZ1bmN0aW9uIChpbmRleCkge1xyXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmRvd25sb2FkKSB7XHJcbiAgICAgICAgICAgIHZhciBjdXJyZW50R2FsbGVyeUl0ZW0gPSB0aGlzLmdhbGxlcnlJdGVtc1tpbmRleF07XHJcbiAgICAgICAgICAgIHZhciBoaWRlRG93bmxvYWRCdG4gPSBjdXJyZW50R2FsbGVyeUl0ZW0uZG93bmxvYWRVcmwgPT09IGZhbHNlIHx8XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50R2FsbGVyeUl0ZW0uZG93bmxvYWRVcmwgPT09ICdmYWxzZSc7XHJcbiAgICAgICAgICAgIGlmIChoaWRlRG93bmxvYWRCdG4pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMub3V0ZXIuYWRkQ2xhc3MoJ2xnLWhpZGUtZG93bmxvYWQnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZhciAkZG93bmxvYWQgPSB0aGlzLmdldEVsZW1lbnRCeUlkKCdsZy1kb3dubG9hZCcpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vdXRlci5yZW1vdmVDbGFzcygnbGctaGlkZS1kb3dubG9hZCcpO1xyXG4gICAgICAgICAgICAgICAgJGRvd25sb2FkLmF0dHIoJ2hyZWYnLCBjdXJyZW50R2FsbGVyeUl0ZW0uZG93bmxvYWRVcmwgfHxcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50R2FsbGVyeUl0ZW0uc3JjKTtcclxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50R2FsbGVyeUl0ZW0uZG93bmxvYWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAkZG93bmxvYWQuYXR0cignZG93bmxvYWQnLCBjdXJyZW50R2FsbGVyeUl0ZW0uZG93bmxvYWQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIExpZ2h0R2FsbGVyeS5wcm90b3R5cGUubWFrZVNsaWRlQW5pbWF0aW9uID0gZnVuY3Rpb24gKGRpcmVjdGlvbiwgY3VycmVudFNsaWRlSXRlbSwgcHJldmlvdXNTbGlkZUl0ZW0pIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGlmICh0aGlzLmxHYWxsZXJ5T24pIHtcclxuICAgICAgICAgICAgcHJldmlvdXNTbGlkZUl0ZW0uYWRkQ2xhc3MoJ2xnLXNsaWRlLXByb2dyZXNzJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAvLyByZW1vdmUgYWxsIHRyYW5zaXRpb25zXHJcbiAgICAgICAgICAgIF90aGlzLm91dGVyLmFkZENsYXNzKCdsZy1uby10cmFucycpO1xyXG4gICAgICAgICAgICBfdGhpcy5vdXRlclxyXG4gICAgICAgICAgICAgICAgLmZpbmQoJy5sZy1pdGVtJylcclxuICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnbGctcHJldi1zbGlkZSBsZy1uZXh0LXNsaWRlJyk7XHJcbiAgICAgICAgICAgIGlmIChkaXJlY3Rpb24gPT09ICdwcmV2Jykge1xyXG4gICAgICAgICAgICAgICAgLy9wcmV2c2xpZGVcclxuICAgICAgICAgICAgICAgIGN1cnJlbnRTbGlkZUl0ZW0uYWRkQ2xhc3MoJ2xnLXByZXYtc2xpZGUnKTtcclxuICAgICAgICAgICAgICAgIHByZXZpb3VzU2xpZGVJdGVtLmFkZENsYXNzKCdsZy1uZXh0LXNsaWRlJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBuZXh0IHNsaWRlXHJcbiAgICAgICAgICAgICAgICBjdXJyZW50U2xpZGVJdGVtLmFkZENsYXNzKCdsZy1uZXh0LXNsaWRlJyk7XHJcbiAgICAgICAgICAgICAgICBwcmV2aW91c1NsaWRlSXRlbS5hZGRDbGFzcygnbGctcHJldi1zbGlkZScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGdpdmUgNTAgbXMgZm9yIGJyb3dzZXIgdG8gYWRkL3JlbW92ZSBjbGFzc1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLm91dGVyLmZpbmQoJy5sZy1pdGVtJykucmVtb3ZlQ2xhc3MoJ2xnLWN1cnJlbnQnKTtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnRTbGlkZUl0ZW0uYWRkQ2xhc3MoJ2xnLWN1cnJlbnQnKTtcclxuICAgICAgICAgICAgICAgIC8vIHJlc2V0IGFsbCB0cmFuc2l0aW9uc1xyXG4gICAgICAgICAgICAgICAgX3RoaXMub3V0ZXIucmVtb3ZlQ2xhc3MoJ2xnLW5vLXRyYW5zJyk7XHJcbiAgICAgICAgICAgIH0sIDUwKTtcclxuICAgICAgICB9LCB0aGlzLmxHYWxsZXJ5T24gPyB0aGlzLnNldHRpbmdzLnNsaWRlRGVsYXkgOiAwKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEdvdG8gYSBzcGVjaWZpYyBzbGlkZS5cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBpbmRleCAtIGluZGV4IG9mIHRoZSBzbGlkZVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBmcm9tVG91Y2ggLSB0cnVlIGlmIHNsaWRlIGZ1bmN0aW9uIGNhbGxlZCB2aWEgdG91Y2ggZXZlbnQgb3IgbW91c2UgZHJhZ1xyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBmcm9tVGh1bWIgLSB0cnVlIGlmIHNsaWRlIGZ1bmN0aW9uIGNhbGxlZCB2aWEgdGh1bWJuYWlsIGNsaWNrXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZGlyZWN0aW9uIC0gRGlyZWN0aW9uIG9mIHRoZSBzbGlkZShuZXh0L3ByZXYpXHJcbiAgICAgKiBAY2F0ZWdvcnkgbEdQdWJsaWNNZXRob2RzXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogIGNvbnN0IHBsdWdpbiA9IGxpZ2h0R2FsbGVyeSgpO1xyXG4gICAgICogIC8vIHRvIGdvIHRvIDNyZCBzbGlkZVxyXG4gICAgICogIHBsdWdpbi5zbGlkZSgyKTtcclxuICAgICAqXHJcbiAgICAgKi9cclxuICAgIExpZ2h0R2FsbGVyeS5wcm90b3R5cGUuc2xpZGUgPSBmdW5jdGlvbiAoaW5kZXgsIGZyb21Ub3VjaCwgZnJvbVRodW1iLCBkaXJlY3Rpb24pIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBwcmV2SW5kZXggPSB0aGlzLmdldFByZXZpb3VzU2xpZGVJbmRleCgpO1xyXG4gICAgICAgIHRoaXMuY3VycmVudEl0ZW1zSW5Eb20gPSB0aGlzLm9yZ2FuaXplU2xpZGVJdGVtcyhpbmRleCwgcHJldkluZGV4KTtcclxuICAgICAgICAvLyBQcmV2ZW50IG11bHRpcGxlIGNhbGwsIFJlcXVpcmVkIGZvciBoc2ggcGx1Z2luXHJcbiAgICAgICAgaWYgKHRoaXMubEdhbGxlcnlPbiAmJiBwcmV2SW5kZXggPT09IGluZGV4KSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIG51bWJlck9mR2FsbGVyeUl0ZW1zID0gdGhpcy5nYWxsZXJ5SXRlbXMubGVuZ3RoO1xyXG4gICAgICAgIGlmICghdGhpcy5sZ0J1c3kpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuY291bnRlcikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVDdXJyZW50Q291bnRlcihpbmRleCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGN1cnJlbnRTbGlkZUl0ZW0gPSB0aGlzLmdldFNsaWRlSXRlbShpbmRleCk7XHJcbiAgICAgICAgICAgIHZhciBwcmV2aW91c1NsaWRlSXRlbV8xID0gdGhpcy5nZXRTbGlkZUl0ZW0ocHJldkluZGV4KTtcclxuICAgICAgICAgICAgdmFyIGN1cnJlbnRHYWxsZXJ5SXRlbSA9IHRoaXMuZ2FsbGVyeUl0ZW1zW2luZGV4XTtcclxuICAgICAgICAgICAgdmFyIHZpZGVvSW5mbyA9IGN1cnJlbnRHYWxsZXJ5SXRlbS5fX3NsaWRlVmlkZW9JbmZvO1xyXG4gICAgICAgICAgICB0aGlzLm91dGVyLmF0dHIoJ2RhdGEtbGctc2xpZGUtdHlwZScsIHRoaXMuZ2V0U2xpZGVUeXBlKGN1cnJlbnRHYWxsZXJ5SXRlbSkpO1xyXG4gICAgICAgICAgICB0aGlzLnNldERvd25sb2FkVmFsdWUoaW5kZXgpO1xyXG4gICAgICAgICAgICBpZiAodmlkZW9JbmZvKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgX2EgPSB0aGlzLm1lZGlhQ29udGFpbmVyUG9zaXRpb24sIHRvcF8zID0gX2EudG9wLCBib3R0b20gPSBfYS5ib3R0b207XHJcbiAgICAgICAgICAgICAgICB2YXIgdmlkZW9TaXplID0gdXRpbHMuZ2V0U2l6ZSh0aGlzLml0ZW1zW2luZGV4XSwgdGhpcy5vdXRlciwgdG9wXzMgKyBib3R0b20sIHZpZGVvSW5mbyAmJiB0aGlzLnNldHRpbmdzLnZpZGVvTWF4U2l6ZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlc2l6ZVZpZGVvU2xpZGUoaW5kZXgsIHZpZGVvU2l6ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5MR2VsLnRyaWdnZXIobEdFdmVudHMuYmVmb3JlU2xpZGUsIHtcclxuICAgICAgICAgICAgICAgIHByZXZJbmRleDogcHJldkluZGV4LFxyXG4gICAgICAgICAgICAgICAgaW5kZXg6IGluZGV4LFxyXG4gICAgICAgICAgICAgICAgZnJvbVRvdWNoOiAhIWZyb21Ub3VjaCxcclxuICAgICAgICAgICAgICAgIGZyb21UaHVtYjogISFmcm9tVGh1bWIsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB0aGlzLmxnQnVzeSA9IHRydWU7XHJcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLmhpZGVCYXJUaW1lb3V0KTtcclxuICAgICAgICAgICAgdGhpcy5hcnJvd0Rpc2FibGUoaW5kZXgpO1xyXG4gICAgICAgICAgICBpZiAoIWRpcmVjdGlvbikge1xyXG4gICAgICAgICAgICAgICAgaWYgKGluZGV4IDwgcHJldkluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aW9uID0gJ3ByZXYnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaW5kZXggPiBwcmV2SW5kZXgpIHtcclxuICAgICAgICAgICAgICAgICAgICBkaXJlY3Rpb24gPSAnbmV4dCc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCFmcm9tVG91Y2gpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubWFrZVNsaWRlQW5pbWF0aW9uKGRpcmVjdGlvbiwgY3VycmVudFNsaWRlSXRlbSwgcHJldmlvdXNTbGlkZUl0ZW1fMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm91dGVyXHJcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoJy5sZy1pdGVtJylcclxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ2xnLXByZXYtc2xpZGUgbGctY3VycmVudCBsZy1uZXh0LXNsaWRlJyk7XHJcbiAgICAgICAgICAgICAgICB2YXIgdG91Y2hQcmV2ID0gdm9pZCAwO1xyXG4gICAgICAgICAgICAgICAgdmFyIHRvdWNoTmV4dCA9IHZvaWQgMDtcclxuICAgICAgICAgICAgICAgIGlmIChudW1iZXJPZkdhbGxlcnlJdGVtcyA+IDIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0b3VjaFByZXYgPSBpbmRleCAtIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgdG91Y2hOZXh0ID0gaW5kZXggKyAxO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCA9PT0gMCAmJiBwcmV2SW5kZXggPT09IG51bWJlck9mR2FsbGVyeUl0ZW1zIC0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBuZXh0IHNsaWRlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdWNoTmV4dCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdWNoUHJldiA9IG51bWJlck9mR2FsbGVyeUl0ZW1zIC0gMTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoaW5kZXggPT09IG51bWJlck9mR2FsbGVyeUl0ZW1zIC0gMSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2SW5kZXggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcHJldiBzbGlkZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3VjaE5leHQgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3VjaFByZXYgPSBudW1iZXJPZkdhbGxlcnlJdGVtcyAtIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdG91Y2hQcmV2ID0gMDtcclxuICAgICAgICAgICAgICAgICAgICB0b3VjaE5leHQgPSAxO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gJ3ByZXYnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nZXRTbGlkZUl0ZW0odG91Y2hOZXh0KS5hZGRDbGFzcygnbGctbmV4dC1zbGlkZScpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nZXRTbGlkZUl0ZW0odG91Y2hQcmV2KS5hZGRDbGFzcygnbGctcHJldi1zbGlkZScpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY3VycmVudFNsaWRlSXRlbS5hZGRDbGFzcygnbGctY3VycmVudCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIERvIG5vdCBwdXQgbG9hZCBjb250ZW50IGluIHNldCB0aW1lb3V0IGFzIGl0IG5lZWRzIHRvIGxvYWQgaW1tZWRpYXRlbHkgd2hlbiB0aGUgZ2FsbGVyeSBpcyBvcGVuZWRcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmxHYWxsZXJ5T24pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubG9hZENvbnRlbnQoaW5kZXgsIHRydWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMubG9hZENvbnRlbnQoaW5kZXgsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEFkZCB0aXRsZSBpZiB0aGlzLnNldHRpbmdzLmFwcGVuZFN1Ykh0bWxUbyA9PT0gbGctc3ViLWh0bWxcclxuICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuc2V0dGluZ3MuYXBwZW5kU3ViSHRtbFRvICE9PSAnLmxnLWl0ZW0nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmFkZEh0bWwoaW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sIHRoaXMuc2V0dGluZ3Muc3BlZWQgKyA1MCArIChmcm9tVG91Y2ggPyAwIDogdGhpcy5zZXR0aW5ncy5zbGlkZURlbGF5KSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5sZ0J1c3kgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHByZXZpb3VzU2xpZGVJdGVtXzEucmVtb3ZlQ2xhc3MoJ2xnLXNsaWRlLXByb2dyZXNzJyk7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5MR2VsLnRyaWdnZXIobEdFdmVudHMuYWZ0ZXJTbGlkZSwge1xyXG4gICAgICAgICAgICAgICAgICAgIHByZXZJbmRleDogcHJldkluZGV4LFxyXG4gICAgICAgICAgICAgICAgICAgIGluZGV4OiBpbmRleCxcclxuICAgICAgICAgICAgICAgICAgICBmcm9tVG91Y2g6IGZyb21Ub3VjaCxcclxuICAgICAgICAgICAgICAgICAgICBmcm9tVGh1bWI6IGZyb21UaHVtYixcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9LCAodGhpcy5sR2FsbGVyeU9uID8gdGhpcy5zZXR0aW5ncy5zcGVlZCArIDEwMCA6IDEwMCkgKyAoZnJvbVRvdWNoID8gMCA6IHRoaXMuc2V0dGluZ3Muc2xpZGVEZWxheSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmluZGV4ID0gaW5kZXg7XHJcbiAgICB9O1xyXG4gICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS51cGRhdGVDdXJyZW50Q291bnRlciA9IGZ1bmN0aW9uIChpbmRleCkge1xyXG4gICAgICAgIHRoaXMuZ2V0RWxlbWVudEJ5SWQoJ2xnLWNvdW50ZXItY3VycmVudCcpLmh0bWwoaW5kZXggKyAxICsgJycpO1xyXG4gICAgfTtcclxuICAgIExpZ2h0R2FsbGVyeS5wcm90b3R5cGUudXBkYXRlQ291bnRlclRvdGFsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuZ2V0RWxlbWVudEJ5SWQoJ2xnLWNvdW50ZXItYWxsJykuaHRtbCh0aGlzLmdhbGxlcnlJdGVtcy5sZW5ndGggKyAnJyk7XHJcbiAgICB9O1xyXG4gICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS5nZXRTbGlkZVR5cGUgPSBmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgIGlmIChpdGVtLl9fc2xpZGVWaWRlb0luZm8pIHtcclxuICAgICAgICAgICAgcmV0dXJuICd2aWRlbyc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGl0ZW0uaWZyYW1lKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnaWZyYW1lJztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnaW1hZ2UnO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLnRvdWNoTW92ZSA9IGZ1bmN0aW9uIChzdGFydENvb3JkcywgZW5kQ29vcmRzLCBlKSB7XHJcbiAgICAgICAgdmFyIGRpc3RhbmNlWCA9IGVuZENvb3Jkcy5wYWdlWCAtIHN0YXJ0Q29vcmRzLnBhZ2VYO1xyXG4gICAgICAgIHZhciBkaXN0YW5jZVkgPSBlbmRDb29yZHMucGFnZVkgLSBzdGFydENvb3Jkcy5wYWdlWTtcclxuICAgICAgICB2YXIgYWxsb3dTd2lwZSA9IGZhbHNlO1xyXG4gICAgICAgIGlmICh0aGlzLnN3aXBlRGlyZWN0aW9uKSB7XHJcbiAgICAgICAgICAgIGFsbG93U3dpcGUgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKE1hdGguYWJzKGRpc3RhbmNlWCkgPiAxNSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zd2lwZURpcmVjdGlvbiA9ICdob3Jpem9udGFsJztcclxuICAgICAgICAgICAgICAgIGFsbG93U3dpcGUgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKE1hdGguYWJzKGRpc3RhbmNlWSkgPiAxNSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zd2lwZURpcmVjdGlvbiA9ICd2ZXJ0aWNhbCc7XHJcbiAgICAgICAgICAgICAgICBhbGxvd1N3aXBlID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIWFsbG93U3dpcGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgJGN1cnJlbnRTbGlkZSA9IHRoaXMuZ2V0U2xpZGVJdGVtKHRoaXMuaW5kZXgpO1xyXG4gICAgICAgIGlmICh0aGlzLnN3aXBlRGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcpIHtcclxuICAgICAgICAgICAgZSA9PT0gbnVsbCB8fCBlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIC8vIHJlc2V0IG9wYWNpdHkgYW5kIHRyYW5zaXRpb24gZHVyYXRpb25cclxuICAgICAgICAgICAgdGhpcy5vdXRlci5hZGRDbGFzcygnbGctZHJhZ2dpbmcnKTtcclxuICAgICAgICAgICAgLy8gbW92ZSBjdXJyZW50IHNsaWRlXHJcbiAgICAgICAgICAgIHRoaXMuc2V0VHJhbnNsYXRlKCRjdXJyZW50U2xpZGUsIGRpc3RhbmNlWCwgMCk7XHJcbiAgICAgICAgICAgIC8vIG1vdmUgbmV4dCBhbmQgcHJldiBzbGlkZSB3aXRoIGN1cnJlbnQgc2xpZGVcclxuICAgICAgICAgICAgdmFyIHdpZHRoID0gJGN1cnJlbnRTbGlkZS5nZXQoKS5vZmZzZXRXaWR0aDtcclxuICAgICAgICAgICAgdmFyIHNsaWRlV2lkdGhBbW91bnQgPSAod2lkdGggKiAxNSkgLyAxMDA7XHJcbiAgICAgICAgICAgIHZhciBndXR0ZXIgPSBzbGlkZVdpZHRoQW1vdW50IC0gTWF0aC5hYnMoKGRpc3RhbmNlWCAqIDEwKSAvIDEwMCk7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0VHJhbnNsYXRlKHRoaXMub3V0ZXIuZmluZCgnLmxnLXByZXYtc2xpZGUnKS5maXJzdCgpLCAtd2lkdGggKyBkaXN0YW5jZVggLSBndXR0ZXIsIDApO1xyXG4gICAgICAgICAgICB0aGlzLnNldFRyYW5zbGF0ZSh0aGlzLm91dGVyLmZpbmQoJy5sZy1uZXh0LXNsaWRlJykuZmlyc3QoKSwgd2lkdGggKyBkaXN0YW5jZVggKyBndXR0ZXIsIDApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0aGlzLnN3aXBlRGlyZWN0aW9uID09PSAndmVydGljYWwnKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLnN3aXBlVG9DbG9zZSkge1xyXG4gICAgICAgICAgICAgICAgZSA9PT0gbnVsbCB8fCBlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRjb250YWluZXIuYWRkQ2xhc3MoJ2xnLWRyYWdnaW5nLXZlcnRpY2FsJyk7XHJcbiAgICAgICAgICAgICAgICB2YXIgb3BhY2l0eSA9IDEgLSBNYXRoLmFicyhkaXN0YW5jZVkpIC8gd2luZG93LmlubmVySGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgdGhpcy4kYmFja2Ryb3AuY3NzKCdvcGFjaXR5Jywgb3BhY2l0eSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgc2NhbGUgPSAxIC0gTWF0aC5hYnMoZGlzdGFuY2VZKSAvICh3aW5kb3cuaW5uZXJXaWR0aCAqIDIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRUcmFuc2xhdGUoJGN1cnJlbnRTbGlkZSwgMCwgZGlzdGFuY2VZLCBzY2FsZSwgc2NhbGUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKE1hdGguYWJzKGRpc3RhbmNlWSkgPiAxMDApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm91dGVyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnbGctaGlkZS1pdGVtcycpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnbGctY29tcG9uZW50cy1vcGVuJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS50b3VjaEVuZCA9IGZ1bmN0aW9uIChlbmRDb29yZHMsIHN0YXJ0Q29vcmRzLCBldmVudCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIGRpc3RhbmNlO1xyXG4gICAgICAgIC8vIGtlZXAgc2xpZGUgYW5pbWF0aW9uIGZvciBhbnkgbW9kZSB3aGlsZSBkcmFnZy9zd2lwZVxyXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLm1vZGUgIT09ICdsZy1zbGlkZScpIHtcclxuICAgICAgICAgICAgdGhpcy5vdXRlci5hZGRDbGFzcygnbGctc2xpZGUnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gc2V0IHRyYW5zaXRpb24gZHVyYXRpb25cclxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgX3RoaXMuJGNvbnRhaW5lci5yZW1vdmVDbGFzcygnbGctZHJhZ2dpbmctdmVydGljYWwnKTtcclxuICAgICAgICAgICAgX3RoaXMub3V0ZXJcclxuICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnbGctZHJhZ2dpbmcgbGctaGlkZS1pdGVtcycpXHJcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ2xnLWNvbXBvbmVudHMtb3BlbicpO1xyXG4gICAgICAgICAgICB2YXIgdHJpZ2dlckNsaWNrID0gdHJ1ZTtcclxuICAgICAgICAgICAgaWYgKF90aGlzLnN3aXBlRGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcpIHtcclxuICAgICAgICAgICAgICAgIGRpc3RhbmNlID0gZW5kQ29vcmRzLnBhZ2VYIC0gc3RhcnRDb29yZHMucGFnZVg7XHJcbiAgICAgICAgICAgICAgICB2YXIgZGlzdGFuY2VBYnMgPSBNYXRoLmFicyhlbmRDb29yZHMucGFnZVggLSBzdGFydENvb3Jkcy5wYWdlWCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGlzdGFuY2UgPCAwICYmXHJcbiAgICAgICAgICAgICAgICAgICAgZGlzdGFuY2VBYnMgPiBfdGhpcy5zZXR0aW5ncy5zd2lwZVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmdvVG9OZXh0U2xpZGUodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlckNsaWNrID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChkaXN0YW5jZSA+IDAgJiZcclxuICAgICAgICAgICAgICAgICAgICBkaXN0YW5jZUFicyA+IF90aGlzLnNldHRpbmdzLnN3aXBlVGhyZXNob2xkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuZ29Ub1ByZXZTbGlkZSh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyQ2xpY2sgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChfdGhpcy5zd2lwZURpcmVjdGlvbiA9PT0gJ3ZlcnRpY2FsJykge1xyXG4gICAgICAgICAgICAgICAgZGlzdGFuY2UgPSBNYXRoLmFicyhlbmRDb29yZHMucGFnZVkgLSBzdGFydENvb3Jkcy5wYWdlWSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMuc2V0dGluZ3MuY2xvc2FibGUgJiZcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5zZXR0aW5ncy5zd2lwZVRvQ2xvc2UgJiZcclxuICAgICAgICAgICAgICAgICAgICBkaXN0YW5jZSA+IDEwMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmNsb3NlR2FsbGVyeSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLiRiYWNrZHJvcC5jc3MoJ29wYWNpdHknLCAxKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBfdGhpcy5vdXRlci5maW5kKCcubGctaXRlbScpLnJlbW92ZUF0dHIoJ3N0eWxlJyk7XHJcbiAgICAgICAgICAgIGlmICh0cmlnZ2VyQ2xpY2sgJiZcclxuICAgICAgICAgICAgICAgIE1hdGguYWJzKGVuZENvb3Jkcy5wYWdlWCAtIHN0YXJ0Q29vcmRzLnBhZ2VYKSA8IDUpIHtcclxuICAgICAgICAgICAgICAgIC8vIFRyaWdnZXIgY2xpY2sgaWYgZGlzdGFuY2UgaXMgbGVzcyB0aGFuIDUgcGl4XHJcbiAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gJExHKGV2ZW50LnRhcmdldCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMuaXNQb3N0ZXJFbGVtZW50KHRhcmdldCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5MR2VsLnRyaWdnZXIobEdFdmVudHMucG9zdGVyQ2xpY2spO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF90aGlzLnN3aXBlRGlyZWN0aW9uID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vIHJlbW92ZSBzbGlkZSBjbGFzcyBvbmNlIGRyYWcvc3dpcGUgaXMgY29tcGxldGVkIGlmIG1vZGUgaXMgbm90IHNsaWRlXHJcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICghX3RoaXMub3V0ZXIuaGFzQ2xhc3MoJ2xnLWRyYWdnaW5nJykgJiZcclxuICAgICAgICAgICAgICAgIF90aGlzLnNldHRpbmdzLm1vZGUgIT09ICdsZy1zbGlkZScpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLm91dGVyLnJlbW92ZUNsYXNzKCdsZy1zbGlkZScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgdGhpcy5zZXR0aW5ncy5zcGVlZCArIDEwMCk7XHJcbiAgICB9O1xyXG4gICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS5lbmFibGVTd2lwZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBzdGFydENvb3JkcyA9IHt9O1xyXG4gICAgICAgIHZhciBlbmRDb29yZHMgPSB7fTtcclxuICAgICAgICB2YXIgaXNNb3ZlZCA9IGZhbHNlO1xyXG4gICAgICAgIHZhciBpc1N3aXBpbmcgPSBmYWxzZTtcclxuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5lbmFibGVTd2lwZSkge1xyXG4gICAgICAgICAgICB0aGlzLiRpbm5lci5vbigndG91Y2hzdGFydC5sZycsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5kcmFnT3JTd2lwZUVuYWJsZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgdmFyICRpdGVtID0gX3RoaXMuZ2V0U2xpZGVJdGVtKF90aGlzLmluZGV4KTtcclxuICAgICAgICAgICAgICAgIGlmICgoJExHKGUudGFyZ2V0KS5oYXNDbGFzcygnbGctaXRlbScpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgJGl0ZW0uZ2V0KCkuY29udGFpbnMoZS50YXJnZXQpKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICFfdGhpcy5vdXRlci5oYXNDbGFzcygnbGctem9vbWVkJykgJiZcclxuICAgICAgICAgICAgICAgICAgICAhX3RoaXMubGdCdXN5ICYmXHJcbiAgICAgICAgICAgICAgICAgICAgZS50b3VjaGVzLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlzU3dpcGluZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMudG91Y2hBY3Rpb24gPSAnc3dpcGUnO1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLm1hbmFnZVN3aXBlQ2xhc3MoKTtcclxuICAgICAgICAgICAgICAgICAgICBzdGFydENvb3JkcyA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFnZVg6IGUudG91Y2hlc1swXS5wYWdlWCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFnZVk6IGUudG91Y2hlc1swXS5wYWdlWSxcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy4kaW5uZXIub24oJ3RvdWNobW92ZS5sZycsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNTd2lwaW5nICYmXHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMudG91Y2hBY3Rpb24gPT09ICdzd2lwZScgJiZcclxuICAgICAgICAgICAgICAgICAgICBlLnRvdWNoZXMubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZW5kQ29vcmRzID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYWdlWDogZS50b3VjaGVzWzBdLnBhZ2VYLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYWdlWTogZS50b3VjaGVzWzBdLnBhZ2VZLFxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMudG91Y2hNb3ZlKHN0YXJ0Q29vcmRzLCBlbmRDb29yZHMsIGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlzTW92ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy4kaW5uZXIub24oJ3RvdWNoZW5kLmxnJywgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMudG91Y2hBY3Rpb24gPT09ICdzd2lwZScpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNNb3ZlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpc01vdmVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnRvdWNoRW5kKGVuZENvb3Jkcywgc3RhcnRDb29yZHMsIGV2ZW50KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoaXNTd2lwaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSAkTEcoZXZlbnQudGFyZ2V0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLmlzUG9zdGVyRWxlbWVudCh0YXJnZXQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5MR2VsLnRyaWdnZXIobEdFdmVudHMucG9zdGVyQ2xpY2spO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnRvdWNoQWN0aW9uID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgIGlzU3dpcGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS5lbmFibGVEcmFnID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHN0YXJ0Q29vcmRzID0ge307XHJcbiAgICAgICAgdmFyIGVuZENvb3JkcyA9IHt9O1xyXG4gICAgICAgIHZhciBpc0RyYWdpbmcgPSBmYWxzZTtcclxuICAgICAgICB2YXIgaXNNb3ZlZCA9IGZhbHNlO1xyXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmVuYWJsZURyYWcpIHtcclxuICAgICAgICAgICAgdGhpcy5vdXRlci5vbignbW91c2Vkb3duLmxnJywgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLmRyYWdPclN3aXBlRW5hYmxlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB2YXIgJGl0ZW0gPSBfdGhpcy5nZXRTbGlkZUl0ZW0oX3RoaXMuaW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCRMRyhlLnRhcmdldCkuaGFzQ2xhc3MoJ2xnLWl0ZW0nKSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICRpdGVtLmdldCgpLmNvbnRhaW5zKGUudGFyZ2V0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghX3RoaXMub3V0ZXIuaGFzQ2xhc3MoJ2xnLXpvb21lZCcpICYmICFfdGhpcy5sZ0J1c3kpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIV90aGlzLmxnQnVzeSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMubWFuYWdlU3dpcGVDbGFzcygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRDb29yZHMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnZVg6IGUucGFnZVgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnZVk6IGUucGFnZVksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNEcmFnaW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICoqIEZpeCBmb3Igd2Via2l0IGN1cnNvciBpc3N1ZSBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9MjY3MjNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLm91dGVyLmdldCgpLnNjcm9sbExlZnQgKz0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLm91dGVyLmdldCgpLnNjcm9sbExlZnQgLT0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLm91dGVyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdsZy1ncmFiJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ2xnLWdyYWJiaW5nJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5MR2VsLnRyaWdnZXIobEdFdmVudHMuZHJhZ1N0YXJ0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICRMRyh3aW5kb3cpLm9uKFwibW91c2Vtb3ZlLmxnLmdsb2JhbFwiICsgdGhpcy5sZ0lkLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGlzRHJhZ2luZyAmJiBfdGhpcy5sZ09wZW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlzTW92ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGVuZENvb3JkcyA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFnZVg6IGUucGFnZVgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2VZOiBlLnBhZ2VZLFxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMudG91Y2hNb3ZlKHN0YXJ0Q29vcmRzLCBlbmRDb29yZHMpO1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLkxHZWwudHJpZ2dlcihsR0V2ZW50cy5kcmFnTW92ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAkTEcod2luZG93KS5vbihcIm1vdXNldXAubGcuZ2xvYmFsXCIgKyB0aGlzLmxnSWQsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFfdGhpcy5sZ09wZW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSAkTEcoZXZlbnQudGFyZ2V0KTtcclxuICAgICAgICAgICAgICAgIGlmIChpc01vdmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXNNb3ZlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnRvdWNoRW5kKGVuZENvb3Jkcywgc3RhcnRDb29yZHMsIGV2ZW50KTtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5MR2VsLnRyaWdnZXIobEdFdmVudHMuZHJhZ0VuZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChfdGhpcy5pc1Bvc3RlckVsZW1lbnQodGFyZ2V0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLkxHZWwudHJpZ2dlcihsR0V2ZW50cy5wb3N0ZXJDbGljayk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBQcmV2ZW50IGV4ZWN1dGlvbiBvbiBjbGlja1xyXG4gICAgICAgICAgICAgICAgaWYgKGlzRHJhZ2luZykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlzRHJhZ2luZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLm91dGVyLnJlbW92ZUNsYXNzKCdsZy1ncmFiYmluZycpLmFkZENsYXNzKCdsZy1ncmFiJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLnRyaWdnZXJQb3N0ZXJDbGljayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuJGlubmVyLm9uKCdjbGljay5sZycsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICBpZiAoIV90aGlzLmRyYWdPclN3aXBlRW5hYmxlZCAmJlxyXG4gICAgICAgICAgICAgICAgX3RoaXMuaXNQb3N0ZXJFbGVtZW50KCRMRyhldmVudC50YXJnZXQpKSkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuTEdlbC50cmlnZ2VyKGxHRXZlbnRzLnBvc3RlckNsaWNrKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIExpZ2h0R2FsbGVyeS5wcm90b3R5cGUubWFuYWdlU3dpcGVDbGFzcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RvdWNoTmV4dCA9IHRoaXMuaW5kZXggKyAxO1xyXG4gICAgICAgIHZhciBfdG91Y2hQcmV2ID0gdGhpcy5pbmRleCAtIDE7XHJcbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MubG9vcCAmJiB0aGlzLmdhbGxlcnlJdGVtcy5sZW5ndGggPiAyKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmluZGV4ID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBfdG91Y2hQcmV2ID0gdGhpcy5nYWxsZXJ5SXRlbXMubGVuZ3RoIC0gMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLmluZGV4ID09PSB0aGlzLmdhbGxlcnlJdGVtcy5sZW5ndGggLSAxKSB7XHJcbiAgICAgICAgICAgICAgICBfdG91Y2hOZXh0ID0gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLm91dGVyLmZpbmQoJy5sZy1pdGVtJykucmVtb3ZlQ2xhc3MoJ2xnLW5leHQtc2xpZGUgbGctcHJldi1zbGlkZScpO1xyXG4gICAgICAgIGlmIChfdG91Y2hQcmV2ID4gLTEpIHtcclxuICAgICAgICAgICAgdGhpcy5nZXRTbGlkZUl0ZW0oX3RvdWNoUHJldikuYWRkQ2xhc3MoJ2xnLXByZXYtc2xpZGUnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5nZXRTbGlkZUl0ZW0oX3RvdWNoTmV4dCkuYWRkQ2xhc3MoJ2xnLW5leHQtc2xpZGUnKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEdvIHRvIG5leHQgc2xpZGVcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gZnJvbVRvdWNoIC0gdHJ1ZSBpZiBzbGlkZSBmdW5jdGlvbiBjYWxsZWQgdmlhIHRvdWNoIGV2ZW50XHJcbiAgICAgKiBAY2F0ZWdvcnkgbEdQdWJsaWNNZXRob2RzXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogIGNvbnN0IHBsdWdpbiA9IGxpZ2h0R2FsbGVyeSgpO1xyXG4gICAgICogIHBsdWdpbi5nb1RvTmV4dFNsaWRlKCk7XHJcbiAgICAgKiBAc2VlIDxhIGhyZWY9XCIvZGVtb3MvbWV0aG9kcy9cIj5EZW1vPC9hPlxyXG4gICAgICovXHJcbiAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLmdvVG9OZXh0U2xpZGUgPSBmdW5jdGlvbiAoZnJvbVRvdWNoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgX2xvb3AgPSB0aGlzLnNldHRpbmdzLmxvb3A7XHJcbiAgICAgICAgaWYgKGZyb21Ub3VjaCAmJiB0aGlzLmdhbGxlcnlJdGVtcy5sZW5ndGggPCAzKSB7XHJcbiAgICAgICAgICAgIF9sb29wID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghdGhpcy5sZ0J1c3kpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaW5kZXggKyAxIDwgdGhpcy5nYWxsZXJ5SXRlbXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmluZGV4Kys7XHJcbiAgICAgICAgICAgICAgICB0aGlzLkxHZWwudHJpZ2dlcihsR0V2ZW50cy5iZWZvcmVOZXh0U2xpZGUsIHtcclxuICAgICAgICAgICAgICAgICAgICBpbmRleDogdGhpcy5pbmRleCxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zbGlkZSh0aGlzLmluZGV4LCAhIWZyb21Ub3VjaCwgZmFsc2UsICduZXh0Jyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoX2xvb3ApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmluZGV4ID0gMDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLkxHZWwudHJpZ2dlcihsR0V2ZW50cy5iZWZvcmVOZXh0U2xpZGUsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXg6IHRoaXMuaW5kZXgsXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zbGlkZSh0aGlzLmluZGV4LCAhIWZyb21Ub3VjaCwgZmFsc2UsICduZXh0Jyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzLnNldHRpbmdzLnNsaWRlRW5kQW5pbWF0aW9uICYmICFmcm9tVG91Y2gpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm91dGVyLmFkZENsYXNzKCdsZy1yaWdodC1lbmQnKTtcclxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMub3V0ZXIucmVtb3ZlQ2xhc3MoJ2xnLXJpZ2h0LWVuZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIDQwMCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBHbyB0byBwcmV2aW91cyBzbGlkZXNcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gZnJvbVRvdWNoIC0gdHJ1ZSBpZiBzbGlkZSBmdW5jdGlvbiBjYWxsZWQgdmlhIHRvdWNoIGV2ZW50XHJcbiAgICAgKiBAY2F0ZWdvcnkgbEdQdWJsaWNNZXRob2RzXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogIGNvbnN0IHBsdWdpbiA9IGxpZ2h0R2FsbGVyeSh7fSk7XHJcbiAgICAgKiAgcGx1Z2luLmdvVG9QcmV2U2xpZGUoKTtcclxuICAgICAqIEBzZWUgPGEgaHJlZj1cIi9kZW1vcy9tZXRob2RzL1wiPkRlbW88L2E+XHJcbiAgICAgKlxyXG4gICAgICovXHJcbiAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLmdvVG9QcmV2U2xpZGUgPSBmdW5jdGlvbiAoZnJvbVRvdWNoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgX2xvb3AgPSB0aGlzLnNldHRpbmdzLmxvb3A7XHJcbiAgICAgICAgaWYgKGZyb21Ub3VjaCAmJiB0aGlzLmdhbGxlcnlJdGVtcy5sZW5ndGggPCAzKSB7XHJcbiAgICAgICAgICAgIF9sb29wID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghdGhpcy5sZ0J1c3kpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaW5kZXggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmluZGV4LS07XHJcbiAgICAgICAgICAgICAgICB0aGlzLkxHZWwudHJpZ2dlcihsR0V2ZW50cy5iZWZvcmVQcmV2U2xpZGUsIHtcclxuICAgICAgICAgICAgICAgICAgICBpbmRleDogdGhpcy5pbmRleCxcclxuICAgICAgICAgICAgICAgICAgICBmcm9tVG91Y2g6IGZyb21Ub3VjaCxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zbGlkZSh0aGlzLmluZGV4LCAhIWZyb21Ub3VjaCwgZmFsc2UsICdwcmV2Jyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoX2xvb3ApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmluZGV4ID0gdGhpcy5nYWxsZXJ5SXRlbXMubGVuZ3RoIC0gMTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLkxHZWwudHJpZ2dlcihsR0V2ZW50cy5iZWZvcmVQcmV2U2xpZGUsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXg6IHRoaXMuaW5kZXgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyb21Ub3VjaDogZnJvbVRvdWNoLFxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2xpZGUodGhpcy5pbmRleCwgISFmcm9tVG91Y2gsIGZhbHNlLCAncHJldicpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5zZXR0aW5ncy5zbGlkZUVuZEFuaW1hdGlvbiAmJiAhZnJvbVRvdWNoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vdXRlci5hZGRDbGFzcygnbGctbGVmdC1lbmQnKTtcclxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMub3V0ZXIucmVtb3ZlQ2xhc3MoJ2xnLWxlZnQtZW5kJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgNDAwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLmtleVByZXNzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgJExHKHdpbmRvdykub24oXCJrZXlkb3duLmxnLmdsb2JhbFwiICsgdGhpcy5sZ0lkLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBpZiAoX3RoaXMubGdPcGVuZWQgJiZcclxuICAgICAgICAgICAgICAgIF90aGlzLnNldHRpbmdzLmVzY0tleSA9PT0gdHJ1ZSAmJlxyXG4gICAgICAgICAgICAgICAgZS5rZXlDb2RlID09PSAyNykge1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLnNldHRpbmdzLmFsbG93TWVkaWFPdmVybGFwICYmXHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMub3V0ZXIuaGFzQ2xhc3MoJ2xnLWNhbi10b2dnbGUnKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLm91dGVyLmhhc0NsYXNzKCdsZy1jb21wb25lbnRzLW9wZW4nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLm91dGVyLnJlbW92ZUNsYXNzKCdsZy1jb21wb25lbnRzLW9wZW4nKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmNsb3NlR2FsbGVyeSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChfdGhpcy5sZ09wZW5lZCAmJiBfdGhpcy5nYWxsZXJ5SXRlbXMubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGUua2V5Q29kZSA9PT0gMzcpIHtcclxuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuZ29Ub1ByZXZTbGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGUua2V5Q29kZSA9PT0gMzkpIHtcclxuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuZ29Ub05leHRTbGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS5hcnJvdyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuZ2V0RWxlbWVudEJ5SWQoJ2xnLXByZXYnKS5vbignY2xpY2subGcnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIF90aGlzLmdvVG9QcmV2U2xpZGUoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmdldEVsZW1lbnRCeUlkKCdsZy1uZXh0Jykub24oJ2NsaWNrLmxnJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBfdGhpcy5nb1RvTmV4dFNsaWRlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS5hcnJvd0Rpc2FibGUgPSBmdW5jdGlvbiAoaW5kZXgpIHtcclxuICAgICAgICAvLyBEaXNhYmxlIGFycm93cyBpZiBzZXR0aW5ncy5oaWRlQ29udHJvbE9uRW5kIGlzIHRydWVcclxuICAgICAgICBpZiAoIXRoaXMuc2V0dGluZ3MubG9vcCAmJiB0aGlzLnNldHRpbmdzLmhpZGVDb250cm9sT25FbmQpIHtcclxuICAgICAgICAgICAgdmFyICRwcmV2ID0gdGhpcy5nZXRFbGVtZW50QnlJZCgnbGctcHJldicpO1xyXG4gICAgICAgICAgICB2YXIgJG5leHQgPSB0aGlzLmdldEVsZW1lbnRCeUlkKCdsZy1uZXh0Jyk7XHJcbiAgICAgICAgICAgIGlmIChpbmRleCArIDEgPT09IHRoaXMuZ2FsbGVyeUl0ZW1zLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgJG5leHQuYXR0cignZGlzYWJsZWQnLCAnZGlzYWJsZWQnKS5hZGRDbGFzcygnZGlzYWJsZWQnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICRuZXh0LnJlbW92ZUF0dHIoJ2Rpc2FibGVkJykucmVtb3ZlQ2xhc3MoJ2Rpc2FibGVkJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGluZGV4ID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAkcHJldi5hdHRyKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpLmFkZENsYXNzKCdkaXNhYmxlZCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgJHByZXYucmVtb3ZlQXR0cignZGlzYWJsZWQnKS5yZW1vdmVDbGFzcygnZGlzYWJsZWQnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLnNldFRyYW5zbGF0ZSA9IGZ1bmN0aW9uICgkZWwsIHhWYWx1ZSwgeVZhbHVlLCBzY2FsZVgsIHNjYWxlWSkge1xyXG4gICAgICAgIGlmIChzY2FsZVggPT09IHZvaWQgMCkgeyBzY2FsZVggPSAxOyB9XHJcbiAgICAgICAgaWYgKHNjYWxlWSA9PT0gdm9pZCAwKSB7IHNjYWxlWSA9IDE7IH1cclxuICAgICAgICAkZWwuY3NzKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlM2QoJyArXHJcbiAgICAgICAgICAgIHhWYWx1ZSArXHJcbiAgICAgICAgICAgICdweCwgJyArXHJcbiAgICAgICAgICAgIHlWYWx1ZSArXHJcbiAgICAgICAgICAgICdweCwgMHB4KSBzY2FsZTNkKCcgK1xyXG4gICAgICAgICAgICBzY2FsZVggK1xyXG4gICAgICAgICAgICAnLCAnICtcclxuICAgICAgICAgICAgc2NhbGVZICtcclxuICAgICAgICAgICAgJywgMSknKTtcclxuICAgIH07XHJcbiAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLm1vdXNld2hlZWwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgbGFzdENhbGwgPSAwO1xyXG4gICAgICAgIHRoaXMub3V0ZXIub24oJ3doZWVsLmxnJywgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgaWYgKCFlLmRlbHRhWSB8fCBfdGhpcy5nYWxsZXJ5SXRlbXMubGVuZ3RoIDwgMikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgdmFyIG5vdyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG4gICAgICAgICAgICBpZiAobm93IC0gbGFzdENhbGwgPCAxMDAwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbGFzdENhbGwgPSBub3c7XHJcbiAgICAgICAgICAgIGlmIChlLmRlbHRhWSA+IDApIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLmdvVG9OZXh0U2xpZGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChlLmRlbHRhWSA8IDApIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLmdvVG9QcmV2U2xpZGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIExpZ2h0R2FsbGVyeS5wcm90b3R5cGUuaXNTbGlkZUVsZW1lbnQgPSBmdW5jdGlvbiAodGFyZ2V0KSB7XHJcbiAgICAgICAgcmV0dXJuICh0YXJnZXQuaGFzQ2xhc3MoJ2xnLW91dGVyJykgfHxcclxuICAgICAgICAgICAgdGFyZ2V0Lmhhc0NsYXNzKCdsZy1pdGVtJykgfHxcclxuICAgICAgICAgICAgdGFyZ2V0Lmhhc0NsYXNzKCdsZy1pbWctd3JhcCcpKTtcclxuICAgIH07XHJcbiAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLmlzUG9zdGVyRWxlbWVudCA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcclxuICAgICAgICB2YXIgcGxheUJ1dHRvbiA9IHRoaXMuZ2V0U2xpZGVJdGVtKHRoaXMuaW5kZXgpXHJcbiAgICAgICAgICAgIC5maW5kKCcubGctdmlkZW8tcGxheS1idXR0b24nKVxyXG4gICAgICAgICAgICAuZ2V0KCk7XHJcbiAgICAgICAgcmV0dXJuICh0YXJnZXQuaGFzQ2xhc3MoJ2xnLXZpZGVvLXBvc3RlcicpIHx8XHJcbiAgICAgICAgICAgIHRhcmdldC5oYXNDbGFzcygnbGctdmlkZW8tcGxheS1idXR0b24nKSB8fFxyXG4gICAgICAgICAgICAocGxheUJ1dHRvbiAmJiBwbGF5QnV0dG9uLmNvbnRhaW5zKHRhcmdldC5nZXQoKSkpKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIE1heGltaXplIG1pbmltaXplIGlubGluZSBnYWxsZXJ5LlxyXG4gICAgICogQGNhdGVnb3J5IGxHUHVibGljTWV0aG9kc1xyXG4gICAgICovXHJcbiAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLnRvZ2dsZU1heGltaXplID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5nZXRFbGVtZW50QnlJZCgnbGctbWF4aW1pemUnKS5vbignY2xpY2subGcnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIF90aGlzLiRjb250YWluZXIudG9nZ2xlQ2xhc3MoJ2xnLWlubGluZScpO1xyXG4gICAgICAgICAgICBfdGhpcy5yZWZyZXNoT25SZXNpemUoKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLmludmFsaWRhdGVJdGVtcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5pdGVtcy5sZW5ndGg7IGluZGV4KyspIHtcclxuICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzLml0ZW1zW2luZGV4XTtcclxuICAgICAgICAgICAgdmFyICRlbGVtZW50ID0gJExHKGVsZW1lbnQpO1xyXG4gICAgICAgICAgICAkZWxlbWVudC5vZmYoXCJjbGljay5sZ2N1c3RvbS1pdGVtLVwiICsgJGVsZW1lbnQuYXR0cignZGF0YS1sZy1pZCcpKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS50cmFwRm9jdXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLiRjb250YWluZXIuZ2V0KCkuZm9jdXMoe1xyXG4gICAgICAgICAgICBwcmV2ZW50U2Nyb2xsOiB0cnVlLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgICRMRyh3aW5kb3cpLm9uKFwia2V5ZG93bi5sZy5nbG9iYWxcIiArIHRoaXMubGdJZCwgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgaWYgKCFfdGhpcy5sZ09wZW5lZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBpc1RhYlByZXNzZWQgPSBlLmtleSA9PT0gJ1RhYicgfHwgZS5rZXlDb2RlID09PSA5O1xyXG4gICAgICAgICAgICBpZiAoIWlzVGFiUHJlc3NlZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBmb2N1c2FibGVFbHMgPSB1dGlscy5nZXRGb2N1c2FibGVFbGVtZW50cyhfdGhpcy4kY29udGFpbmVyLmdldCgpKTtcclxuICAgICAgICAgICAgdmFyIGZpcnN0Rm9jdXNhYmxlRWwgPSBmb2N1c2FibGVFbHNbMF07XHJcbiAgICAgICAgICAgIHZhciBsYXN0Rm9jdXNhYmxlRWwgPSBmb2N1c2FibGVFbHNbZm9jdXNhYmxlRWxzLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgICBpZiAoZS5zaGlmdEtleSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IGZpcnN0Rm9jdXNhYmxlRWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBsYXN0Rm9jdXNhYmxlRWwuZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCA9PT0gbGFzdEZvY3VzYWJsZUVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlyc3RGb2N1c2FibGVFbC5mb2N1cygpO1xyXG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIExpZ2h0R2FsbGVyeS5wcm90b3R5cGUubWFuYWdlQ2xvc2VHYWxsZXJ5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgaWYgKCF0aGlzLnNldHRpbmdzLmNsb3NhYmxlKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgdmFyIG1vdXNlZG93biA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuZ2V0RWxlbWVudEJ5SWQoJ2xnLWNsb3NlJykub24oJ2NsaWNrLmxnJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBfdGhpcy5jbG9zZUdhbGxlcnkoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5jbG9zZU9uVGFwKSB7XHJcbiAgICAgICAgICAgIC8vIElmIHlvdSBkcmFnIHRoZSBzbGlkZSBhbmQgcmVsZWFzZSBvdXRzaWRlIGdhbGxlcnkgZ2V0cyBjbG9zZSBvbiBjaHJvbWVcclxuICAgICAgICAgICAgLy8gZm9yIHByZXZlbnRpbmcgdGhpcyBjaGVjayBtb3VzZWRvd24gYW5kIG1vdXNldXAgaGFwcGVuZWQgb24gLmxnLWl0ZW0gb3IgbGctb3V0ZXJcclxuICAgICAgICAgICAgdGhpcy5vdXRlci5vbignbW91c2Vkb3duLmxnJywgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSAkTEcoZS50YXJnZXQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLmlzU2xpZGVFbGVtZW50KHRhcmdldCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBtb3VzZWRvd24gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbW91c2Vkb3duID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB0aGlzLm91dGVyLm9uKCdtb3VzZW1vdmUubGcnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBtb3VzZWRvd24gPSBmYWxzZTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRoaXMub3V0ZXIub24oJ21vdXNldXAubGcnLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9ICRMRyhlLnRhcmdldCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMuaXNTbGlkZUVsZW1lbnQodGFyZ2V0KSAmJiBtb3VzZWRvd24pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIV90aGlzLm91dGVyLmhhc0NsYXNzKCdsZy1kcmFnZ2luZycpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmNsb3NlR2FsbGVyeSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQ2xvc2UgbGlnaHRHYWxsZXJ5IGlmIGl0IGlzIG9wZW5lZC5cclxuICAgICAqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gSWYgY2xvc2FibGUgaXMgZmFsc2UgaW4gdGhlIHNldHRpbmdzLCB5b3UgbmVlZCB0byBwYXNzIHRydWUgdmlhIGNsb3NlR2FsbGVyeSBtZXRob2QgdG8gZm9yY2UgY2xvc2UgZ2FsbGVyeVxyXG4gICAgICogQHJldHVybiByZXR1cm5zIHRoZSBlc3RpbWF0ZWQgdGltZSB0byBjbG9zZSBnYWxsZXJ5IGNvbXBsZXRlbHkgaW5jbHVkaW5nIHRoZSBjbG9zZSBhbmltYXRpb24gZHVyYXRpb25cclxuICAgICAqIEBjYXRlZ29yeSBsR1B1YmxpY01ldGhvZHNcclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKiAgY29uc3QgcGx1Z2luID0gbGlnaHRHYWxsZXJ5KCk7XHJcbiAgICAgKiAgcGx1Z2luLmNsb3NlR2FsbGVyeSgpO1xyXG4gICAgICpcclxuICAgICAqL1xyXG4gICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS5jbG9zZUdhbGxlcnkgPSBmdW5jdGlvbiAoZm9yY2UpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGlmICghdGhpcy5sZ09wZW5lZCB8fCAoIXRoaXMuc2V0dGluZ3MuY2xvc2FibGUgJiYgIWZvcmNlKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5MR2VsLnRyaWdnZXIobEdFdmVudHMuYmVmb3JlQ2xvc2UpO1xyXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLnJlc2V0U2Nyb2xsUG9zaXRpb24gJiYgIXRoaXMuc2V0dGluZ3MuaGlkZVNjcm9sbGJhcikge1xyXG4gICAgICAgICAgICAkTEcod2luZG93KS5zY3JvbGxUb3AodGhpcy5wcmV2U2Nyb2xsVG9wKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGN1cnJlbnRJdGVtID0gdGhpcy5pdGVtc1t0aGlzLmluZGV4XTtcclxuICAgICAgICB2YXIgdHJhbnNmb3JtO1xyXG4gICAgICAgIGlmICh0aGlzLnpvb21Gcm9tT3JpZ2luICYmIGN1cnJlbnRJdGVtKSB7XHJcbiAgICAgICAgICAgIHZhciBfYSA9IHRoaXMubWVkaWFDb250YWluZXJQb3NpdGlvbiwgdG9wXzQgPSBfYS50b3AsIGJvdHRvbSA9IF9hLmJvdHRvbTtcclxuICAgICAgICAgICAgdmFyIF9iID0gdGhpcy5nYWxsZXJ5SXRlbXNbdGhpcy5pbmRleF0sIF9fc2xpZGVWaWRlb0luZm8gPSBfYi5fX3NsaWRlVmlkZW9JbmZvLCBwb3N0ZXIgPSBfYi5wb3N0ZXI7XHJcbiAgICAgICAgICAgIHZhciBpbWFnZVNpemUgPSB1dGlscy5nZXRTaXplKGN1cnJlbnRJdGVtLCB0aGlzLm91dGVyLCB0b3BfNCArIGJvdHRvbSwgX19zbGlkZVZpZGVvSW5mbyAmJiBwb3N0ZXIgJiYgdGhpcy5zZXR0aW5ncy52aWRlb01heFNpemUpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm0gPSB1dGlscy5nZXRUcmFuc2Zvcm0oY3VycmVudEl0ZW0sIHRoaXMub3V0ZXIsIHRvcF80LCBib3R0b20sIGltYWdlU2l6ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnpvb21Gcm9tT3JpZ2luICYmIHRyYW5zZm9ybSkge1xyXG4gICAgICAgICAgICB0aGlzLm91dGVyLmFkZENsYXNzKCdsZy1jbG9zaW5nIGxnLXpvb20tZnJvbS1pbWFnZScpO1xyXG4gICAgICAgICAgICB0aGlzLmdldFNsaWRlSXRlbSh0aGlzLmluZGV4KVxyXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKCdsZy1zdGFydC1lbmQtcHJvZ3Jlc3MnKVxyXG4gICAgICAgICAgICAgICAgLmNzcygndHJhbnNpdGlvbi1kdXJhdGlvbicsIHRoaXMuc2V0dGluZ3Muc3RhcnRBbmltYXRpb25EdXJhdGlvbiArICdtcycpXHJcbiAgICAgICAgICAgICAgICAuY3NzKCd0cmFuc2Zvcm0nLCB0cmFuc2Zvcm0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5vdXRlci5hZGRDbGFzcygnbGctaGlkZS1pdGVtcycpO1xyXG4gICAgICAgICAgICAvLyBsZy16b29tLWZyb20taW1hZ2UgaXMgdXNlZCBmb3Igc2V0dGluZyB0aGUgb3BhY2l0eSB0byAxIGlmIHpvb21Gcm9tT3JpZ2luIGlzIHRydWVcclxuICAgICAgICAgICAgLy8gSWYgdGhlIGNsb3NpbmcgaXRlbSBkb2Vzbid0IGhhdmUgdGhlIGxnLXNpemUgYXR0cmlidXRlLCByZW1vdmUgdGhpcyBjbGFzcyB0byBhdm9pZCB0aGUgY2xvc2luZyBjc3MgY29uZmxpY3RzXHJcbiAgICAgICAgICAgIHRoaXMub3V0ZXIucmVtb3ZlQ2xhc3MoJ2xnLXpvb20tZnJvbS1pbWFnZScpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBVbmJpbmQgYWxsIGV2ZW50cyBhZGRlZCBieSBsaWdodEdhbGxlcnlcclxuICAgICAgICAvLyBAdG9kb1xyXG4gICAgICAgIC8vdGhpcy4kZWwub2ZmKCcubGcudG0nKTtcclxuICAgICAgICB0aGlzLmRlc3Ryb3lNb2R1bGVzKCk7XHJcbiAgICAgICAgdGhpcy5sR2FsbGVyeU9uID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5pc0R1bW15SW1hZ2VSZW1vdmVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy56b29tRnJvbU9yaWdpbiA9IHRoaXMuc2V0dGluZ3Muem9vbUZyb21PcmlnaW47XHJcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuaGlkZUJhclRpbWVvdXQpO1xyXG4gICAgICAgIHRoaXMuaGlkZUJhclRpbWVvdXQgPSBmYWxzZTtcclxuICAgICAgICAkTEcoJ2h0bWwnKS5yZW1vdmVDbGFzcygnbGctb24nKTtcclxuICAgICAgICB0aGlzLm91dGVyLnJlbW92ZUNsYXNzKCdsZy12aXNpYmxlIGxnLWNvbXBvbmVudHMtb3BlbicpO1xyXG4gICAgICAgIC8vIFJlc2V0dGluZyBvcGFjaXR5IHRvIDAgaXNkIHJlcXVpcmVkIGFzICB2ZXJ0aWNhbCBzd2lwZSB0byBjbG9zZSBmdW5jdGlvbiBhZGRzIGlubGluZSBvcGFjaXR5LlxyXG4gICAgICAgIHRoaXMuJGJhY2tkcm9wLnJlbW92ZUNsYXNzKCdpbicpLmNzcygnb3BhY2l0eScsIDApO1xyXG4gICAgICAgIHZhciByZW1vdmVUaW1lb3V0ID0gdGhpcy56b29tRnJvbU9yaWdpbiAmJiB0cmFuc2Zvcm1cclxuICAgICAgICAgICAgPyBNYXRoLm1heCh0aGlzLnNldHRpbmdzLnN0YXJ0QW5pbWF0aW9uRHVyYXRpb24sIHRoaXMuc2V0dGluZ3MuYmFja2Ryb3BEdXJhdGlvbilcclxuICAgICAgICAgICAgOiB0aGlzLnNldHRpbmdzLmJhY2tkcm9wRHVyYXRpb247XHJcbiAgICAgICAgdGhpcy4kY29udGFpbmVyLnJlbW92ZUNsYXNzKCdsZy1zaG93LWluJyk7XHJcbiAgICAgICAgLy8gT25jZSB0aGUgY2xvc2lnbiBhbmltYXRpb24gaXMgY29tcGxldGVkIGFuZCBnYWxsZXJ5IGlzIGludmlzaWJsZVxyXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoX3RoaXMuem9vbUZyb21PcmlnaW4gJiYgdHJhbnNmb3JtKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5vdXRlci5yZW1vdmVDbGFzcygnbGctem9vbS1mcm9tLWltYWdlJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgX3RoaXMuJGNvbnRhaW5lci5yZW1vdmVDbGFzcygnbGctc2hvdycpO1xyXG4gICAgICAgICAgICAvLyBSZXNldCBzY3JvbGxiYXJcclxuICAgICAgICAgICAgX3RoaXMucmVzZXRTY3JvbGxCYXIoKTtcclxuICAgICAgICAgICAgLy8gTmVlZCB0byByZW1vdmUgaW5saW5lIG9wYWNpdHkgYXMgaXQgaXMgdXNlZCBpbiB0aGUgc3R5bGVzaGVldCBhcyB3ZWxsXHJcbiAgICAgICAgICAgIF90aGlzLiRiYWNrZHJvcFxyXG4gICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ3N0eWxlJylcclxuICAgICAgICAgICAgICAgIC5jc3MoJ3RyYW5zaXRpb24tZHVyYXRpb24nLCBfdGhpcy5zZXR0aW5ncy5iYWNrZHJvcER1cmF0aW9uICsgJ21zJyk7XHJcbiAgICAgICAgICAgIF90aGlzLm91dGVyLnJlbW92ZUNsYXNzKFwibGctY2xvc2luZyBcIiArIF90aGlzLnNldHRpbmdzLnN0YXJ0Q2xhc3MpO1xyXG4gICAgICAgICAgICBfdGhpcy5nZXRTbGlkZUl0ZW0oX3RoaXMuaW5kZXgpLnJlbW92ZUNsYXNzKCdsZy1zdGFydC1lbmQtcHJvZ3Jlc3MnKTtcclxuICAgICAgICAgICAgX3RoaXMuJGlubmVyLmVtcHR5KCk7XHJcbiAgICAgICAgICAgIGlmIChfdGhpcy5sZ09wZW5lZCkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuTEdlbC50cmlnZ2VyKGxHRXZlbnRzLmFmdGVyQ2xvc2UsIHtcclxuICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZTogX3RoaXMsXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoX3RoaXMuJGNvbnRhaW5lci5nZXQoKSkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuJGNvbnRhaW5lci5nZXQoKS5ibHVyKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgX3RoaXMubGdPcGVuZWQgPSBmYWxzZTtcclxuICAgICAgICB9LCByZW1vdmVUaW1lb3V0ICsgMTAwKTtcclxuICAgICAgICByZXR1cm4gcmVtb3ZlVGltZW91dCArIDEwMDtcclxuICAgIH07XHJcbiAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLmluaXRNb2R1bGVzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMucGx1Z2lucy5mb3JFYWNoKGZ1bmN0aW9uIChtb2R1bGUpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIG1vZHVsZS5pbml0KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwibGlnaHRHYWxsZXJ5Oi0gbWFrZSBzdXJlIGxpZ2h0R2FsbGVyeSBtb2R1bGUgaXMgcHJvcGVybHkgaW5pdGlhdGVkXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgTGlnaHRHYWxsZXJ5LnByb3RvdHlwZS5kZXN0cm95TW9kdWxlcyA9IGZ1bmN0aW9uIChkZXN0cm95KSB7XHJcbiAgICAgICAgdGhpcy5wbHVnaW5zLmZvckVhY2goZnVuY3Rpb24gKG1vZHVsZSkge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGRlc3Ryb3kpIHtcclxuICAgICAgICAgICAgICAgICAgICBtb2R1bGUuZGVzdHJveSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kdWxlLmNsb3NlR2FsbGVyeSAmJiBtb2R1bGUuY2xvc2VHYWxsZXJ5KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwibGlnaHRHYWxsZXJ5Oi0gbWFrZSBzdXJlIGxpZ2h0R2FsbGVyeSBtb2R1bGUgaXMgcHJvcGVybHkgZGVzdHJveWVkXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZWZyZXNoIGxpZ2h0R2FsbGVyeSB3aXRoIG5ldyBzZXQgb2YgY2hpbGRyZW4uXHJcbiAgICAgKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIFRoaXMgaXMgdXNlZnVsIHRvIHVwZGF0ZSB0aGUgZ2FsbGVyeSB3aGVuIHRoZSBjaGlsZCBlbGVtZW50cyBhcmUgY2hhbmdlZCB3aXRob3V0IGNhbGxpbmcgZGVzdHJveSBtZXRob2QuXHJcbiAgICAgKlxyXG4gICAgICogSWYgeW91IGFyZSB1c2luZyBkeW5hbWljIG1vZGUsIHlvdSBjYW4gcGFzcyB0aGUgbW9kaWZpZWQgYXJyYXkgb2YgZHluYW1pY0VsIGFzIHRoZSBmaXJzdCBwYXJhbWV0ZXIgdG8gcmVmcmVzaCB0aGUgZHluYW1pYyBnYWxsZXJ5XHJcbiAgICAgKiBAc2VlIDxhIGhyZWY9XCIvZGVtb3MvZHluYW1pYy1tb2RlL1wiPkRlbW88L2E+XHJcbiAgICAgKiBAY2F0ZWdvcnkgbEdQdWJsaWNNZXRob2RzXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogIGNvbnN0IHBsdWdpbiA9IGxpZ2h0R2FsbGVyeSgpO1xyXG4gICAgICogIC8vIERlbGV0ZSBvciBhZGQgY2hpbGRyZW4sIHRoZW4gY2FsbFxyXG4gICAgICogIHBsdWdpbi5yZWZyZXNoKCk7XHJcbiAgICAgKlxyXG4gICAgICovXHJcbiAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLnJlZnJlc2ggPSBmdW5jdGlvbiAoZ2FsbGVyeUl0ZW1zKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnNldHRpbmdzLmR5bmFtaWMpIHtcclxuICAgICAgICAgICAgdGhpcy5pbnZhbGlkYXRlSXRlbXMoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGdhbGxlcnlJdGVtcykge1xyXG4gICAgICAgICAgICB0aGlzLmdhbGxlcnlJdGVtcyA9IGdhbGxlcnlJdGVtcztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuZ2FsbGVyeUl0ZW1zID0gdGhpcy5nZXRJdGVtcygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnVwZGF0ZUNvbnRyb2xzKCk7XHJcbiAgICAgICAgdGhpcy5vcGVuR2FsbGVyeU9uSXRlbUNsaWNrKCk7XHJcbiAgICAgICAgdGhpcy5MR2VsLnRyaWdnZXIobEdFdmVudHMudXBkYXRlU2xpZGVzKTtcclxuICAgIH07XHJcbiAgICBMaWdodEdhbGxlcnkucHJvdG90eXBlLnVwZGF0ZUNvbnRyb2xzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuYWRkU2xpZGVWaWRlb0luZm8odGhpcy5nYWxsZXJ5SXRlbXMpO1xyXG4gICAgICAgIHRoaXMudXBkYXRlQ291bnRlclRvdGFsKCk7XHJcbiAgICAgICAgdGhpcy5tYW5hZ2VTaW5nbGVTbGlkZUNsYXNzTmFtZSgpO1xyXG4gICAgfTtcclxuICAgIExpZ2h0R2FsbGVyeS5wcm90b3R5cGUuZGVzdHJveUdhbGxlcnkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5kZXN0cm95TW9kdWxlcyh0cnVlKTtcclxuICAgICAgICBpZiAoIXRoaXMuc2V0dGluZ3MuZHluYW1pYykge1xyXG4gICAgICAgICAgICB0aGlzLmludmFsaWRhdGVJdGVtcygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAkTEcod2luZG93KS5vZmYoXCIubGcuZ2xvYmFsXCIgKyB0aGlzLmxnSWQpO1xyXG4gICAgICAgIHRoaXMuTEdlbC5vZmYoJy5sZycpO1xyXG4gICAgICAgIHRoaXMuJGNvbnRhaW5lci5yZW1vdmUoKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIERlc3Ryb3kgbGlnaHRHYWxsZXJ5LlxyXG4gICAgICogRGVzdHJveSBsaWdodEdhbGxlcnkgYW5kIGl0cyBwbHVnaW4gaW5zdGFuY2VzIGNvbXBsZXRlbHlcclxuICAgICAqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gVGhpcyBtZXRob2QgYWxzbyBjYWxscyBDbG9zZUdhbGxlcnkgZnVuY3Rpb24gaW50ZXJuYWxseS4gUmV0dXJucyB0aGUgdGltZSB0YWtlcyB0byBjb21wbGV0ZWx5IGNsb3NlIGFuZCBkZXN0cm95IHRoZSBpbnN0YW5jZS5cclxuICAgICAqIEluIGNhc2UgaWYgeW91IHdhbnQgdG8gcmUtaW5pdGlhbGl6ZSBsaWdodEdhbGxlcnkgcmlnaHQgYWZ0ZXIgZGVzdHJveWluZyBpdCwgaW5pdGlhbGl6ZSBpdCBvbmx5IG9uY2UgdGhlIGRlc3Ryb3kgcHJvY2VzcyBpcyBjb21wbGV0ZWQuXHJcbiAgICAgKiBZb3UgY2FuIHVzZSByZWZyZXNoIG1ldGhvZCBtb3N0IG9mIHRoZSB0aW1lcy5cclxuICAgICAqIEBjYXRlZ29yeSBsR1B1YmxpY01ldGhvZHNcclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKiAgY29uc3QgcGx1Z2luID0gbGlnaHRHYWxsZXJ5KCk7XHJcbiAgICAgKiAgcGx1Z2luLmRlc3Ryb3koKTtcclxuICAgICAqXHJcbiAgICAgKi9cclxuICAgIExpZ2h0R2FsbGVyeS5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgY2xvc2VUaW1lb3V0ID0gdGhpcy5jbG9zZUdhbGxlcnkodHJ1ZSk7XHJcbiAgICAgICAgaWYgKGNsb3NlVGltZW91dCkge1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KHRoaXMuZGVzdHJveUdhbGxlcnkuYmluZCh0aGlzKSwgY2xvc2VUaW1lb3V0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGVzdHJveUdhbGxlcnkoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNsb3NlVGltZW91dDtcclxuICAgIH07XHJcbiAgICByZXR1cm4gTGlnaHRHYWxsZXJ5O1xyXG59KCkpO1xuXG5mdW5jdGlvbiBsaWdodEdhbGxlcnkoZWwsIG9wdGlvbnMpIHtcclxuICAgIHJldHVybiBuZXcgTGlnaHRHYWxsZXJ5KGVsLCBvcHRpb25zKTtcclxufVxuXG5leHBvcnQgZGVmYXVsdCBsaWdodEdhbGxlcnk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1saWdodGdhbGxlcnkuZXM1LmpzLm1hcFxuIiwiaW1wb3J0IGxpZ2h0R2FsbGVyeSBmcm9tIFwibGlnaHRnYWxsZXJ5XCI7XG5pbXBvcnQgXCIuLi8uLi9zY3NzL2NvbW1vbi9saWdodGdhbGxlcnkuc2Nzc1wiO1xuaW1wb3J0IFwibGlnaHRnYWxsZXJ5L2Nzcy9saWdodGdhbGxlcnktYnVuZGxlLm1pbi5jc3NcIjtcblxuY29uc3QgaW5pdExpZ2h0R2FsbGVyeSA9ICgpID0+IHtcbiAgY29uc3QgaW1hZ2VzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcbiAgICBcIi5mZWVkLWNoYXB0ZXJfX2ltYWdlcy1zd2lwZXIgLnNsaWRlLWZlZWQtY2hhcHRlcl9faW1hZ2Utd3JhcFwiLFxuICApO1xuXG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbZGF0YS1saWdodGdhbGxlcnldXCIpLmZvckVhY2goKGdhbGxlcnkpID0+IHtcbiAgICBjb25zdCBkZXNjcmlwdGlvbiA9IGdhbGxlcnkuZGF0YXNldC5kZXNjcmlwdGlvbjtcblxuICAgIGNvbnN0IGxnID0gbGlnaHRHYWxsZXJ5KGdhbGxlcnksIHtcbiAgICAgIHNwZWVkOiA1MDAsXG4gICAgICBsaWNlbnNlS2V5OiBcIjdFQzQ1MkE5LTBDRkQ0NDFDLUJEOTg0QzdDLTE3Qzg0NTZFXCIsXG4gICAgICBhcHBlbmRDb3VudGVyVG86IFwiLmxnLWNvbnRlbnRcIixcbiAgICAgIHNlbGVjdG9yOiBcIi5zbGlkZS1mZWVkLWNoYXB0ZXJfX2ltYWdlLXdyYXBcIixcbiAgICAgIGFwcGVuZFN1Ykh0bWxUbzogXCIubGctaXRlbVwiLFxuICAgIH0pO1xuXG4gICAgZ2FsbGVyeS5hZGRFdmVudExpc3RlbmVyKFwibGdCZWZvcmVTbGlkZVwiLCAoZSkgPT4ge1xuICAgICAgY29uc3QgaXRlbXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmxnLWl0ZW1cIik7XG5cbiAgICAgIGl0ZW1zLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGl0ZW0ucXVlcnlTZWxlY3RvcihcIi5sZy1zdWItaHRtbFwiKSAmJlxuICAgICAgICAgIGl0ZW0ucXVlcnlTZWxlY3RvcihcIi5sZy1zdWItaHRtbFwiKS5pbm5lckhUTUwgPT09IFwidHJ1ZVwiXG4gICAgICAgICkge1xuICAgICAgICAgIGl0ZW0uY2xhc3NMaXN0LmFkZChcIl9pcy12ZXJ0aWNhbFwiKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgZ2FsbGVyeS5hZGRFdmVudExpc3RlbmVyKFwibGdCZWZvcmVPcGVuXCIsIChlKSA9PiB7XG4gICAgICBjb25zdCBjb250YWluZXIgPSBsZy4kY29udGFpbmVyLmZpcnN0RWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmxnLW91dGVyXCIpO1xuICAgICAgY29uc3QgZGVzYyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cbiAgICAgIGRlc2MuY2xhc3NMaXN0LmFkZChcImdhbGxlcnktZGVzY3JpcHRpb25cIik7XG4gICAgICBkZXNjLmlubmVySFRNTCA9IGRlc2NyaXB0aW9uO1xuICAgICAgZGVzY3JpcHRpb24gJiYgY29udGFpbmVyLmFwcGVuZChkZXNjKTtcblxuICAgICAgY29uc3QgaXRlbXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmxnLWl0ZW1cIik7XG5cbiAgICAgIGl0ZW1zLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGl0ZW0ucXVlcnlTZWxlY3RvcihcIi5sZy1zdWItaHRtbFwiKSAmJlxuICAgICAgICAgIGl0ZW0ucXVlcnlTZWxlY3RvcihcIi5sZy1zdWItaHRtbFwiKS5pbm5lckhUTUwgPT09IFwidHJ1ZVwiXG4gICAgICAgICkge1xuICAgICAgICAgIGl0ZW0uY2xhc3NMaXN0LmFkZChcIl9pcy12ZXJ0aWNhbFwiKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xufTtcbmluaXRMaWdodEdhbGxlcnkoKTtcbiJdLCJuYW1lcyI6WyJfX2Fzc2lnbiIsIk9iamVjdCIsImFzc2lnbiIsInQiLCJzIiwiaSIsIm4iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJwIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiYXBwbHkiLCJ0aGlzIiwibEdFdmVudHMiLCJsaWdodEdhbGxlcnlDb3JlU2V0dGluZ3MiLCJtb2RlIiwiZWFzaW5nIiwic3BlZWQiLCJsaWNlbnNlS2V5IiwiaGVpZ2h0Iiwid2lkdGgiLCJhZGRDbGFzcyIsInN0YXJ0Q2xhc3MiLCJiYWNrZHJvcER1cmF0aW9uIiwiY29udGFpbmVyIiwic3RhcnRBbmltYXRpb25EdXJhdGlvbiIsInpvb21Gcm9tT3JpZ2luIiwiaGlkZUJhcnNEZWxheSIsInNob3dCYXJzQWZ0ZXIiLCJzbGlkZURlbGF5Iiwic3VwcG9ydExlZ2FjeUJyb3dzZXIiLCJhbGxvd01lZGlhT3ZlcmxhcCIsInZpZGVvTWF4U2l6ZSIsImxvYWRZb3VUdWJlUG9zdGVyIiwiZGVmYXVsdENhcHRpb25IZWlnaHQiLCJhcmlhTGFiZWxsZWRieSIsImFyaWFEZXNjcmliZWRieSIsInJlc2V0U2Nyb2xsUG9zaXRpb24iLCJoaWRlU2Nyb2xsYmFyIiwiY2xvc2FibGUiLCJzd2lwZVRvQ2xvc2UiLCJjbG9zZU9uVGFwIiwic2hvd0Nsb3NlSWNvbiIsInNob3dNYXhpbWl6ZUljb24iLCJsb29wIiwiZXNjS2V5Iiwia2V5UHJlc3MiLCJ0cmFwRm9jdXMiLCJjb250cm9scyIsInNsaWRlRW5kQW5pbWF0aW9uIiwiaGlkZUNvbnRyb2xPbkVuZCIsIm1vdXNld2hlZWwiLCJnZXRDYXB0aW9uRnJvbVRpdGxlT3JBbHQiLCJhcHBlbmRTdWJIdG1sVG8iLCJzdWJIdG1sU2VsZWN0b3JSZWxhdGl2ZSIsInByZWxvYWQiLCJudW1iZXJPZlNsaWRlSXRlbXNJbkRvbSIsInNlbGVjdG9yIiwic2VsZWN0V2l0aGluIiwibmV4dEh0bWwiLCJwcmV2SHRtbCIsImluZGV4IiwiaWZyYW1lV2lkdGgiLCJpZnJhbWVIZWlnaHQiLCJpZnJhbWVNYXhXaWR0aCIsImlmcmFtZU1heEhlaWdodCIsImRvd25sb2FkIiwiY291bnRlciIsImFwcGVuZENvdW50ZXJUbyIsInN3aXBlVGhyZXNob2xkIiwiZW5hYmxlU3dpcGUiLCJlbmFibGVEcmFnIiwiZHluYW1pYyIsImR5bmFtaWNFbCIsImV4dHJhUHJvcHMiLCJleFRodW1iSW1hZ2UiLCJpc01vYmlsZSIsInVuZGVmaW5lZCIsIm1vYmlsZVNldHRpbmdzIiwicGx1Z2lucyIsInN0cmluZ3MiLCJjbG9zZUdhbGxlcnkiLCJ0b2dnbGVNYXhpbWl6ZSIsInByZXZpb3VzU2xpZGUiLCJuZXh0U2xpZGUiLCJwbGF5VmlkZW8iLCJtZWRpYUxvYWRpbmdGYWlsZWQiLCJsZ1F1ZXJ5IiwiY3NzVmVuZGVyUHJlZml4ZXMiLCJfZ2V0U2VsZWN0b3IiLCJmaXJzdEVsZW1lbnQiLCJfZ2V0Rmlyc3RFbCIsImdlbmVyYXRlVVVJRCIsInJlcGxhY2UiLCJjIiwiciIsIk1hdGgiLCJyYW5kb20iLCJ0b1N0cmluZyIsImNvbnRleHQiLCJkb2N1bWVudCIsInN1YnN0cmluZyIsInF1ZXJ5U2VsZWN0b3IiLCJxdWVyeVNlbGVjdG9yQWxsIiwiX2VhY2giLCJmdW5jIiwiZm9yRWFjaCIsIl9zZXRDc3NWZW5kb3JQcmVmaXgiLCJlbCIsImNzc1Byb3BlcnR5IiwidmFsdWUiLCJwcm9wZXJ0eSIsImdyb3VwMSIsInRvVXBwZXJDYXNlIiwiaW5kZXhPZiIsInN0eWxlIiwiY2hhckF0IiwidG9Mb3dlckNhc2UiLCJzbGljZSIsImlzRXZlbnRNYXRjaGVkIiwiZXZlbnQiLCJldmVudE5hbWUiLCJldmVudE5hbWVzcGFjZSIsInNwbGl0IiwiZmlsdGVyIiwiZSIsImV2ZXJ5IiwiYXR0ciIsImdldEF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsImZpbmQiLCIkTEciLCJmaXJzdCIsImVxIiwicGFyZW50IiwicGFyZW50RWxlbWVudCIsImdldCIsInJlbW92ZUF0dHIiLCJhdHRyaWJ1dGVzIiwiYXR0cnMiLCJyZW1vdmVBdHRyaWJ1dGUiLCJ3cmFwIiwiY2xhc3NOYW1lIiwid3JhcHBlciIsImNyZWF0ZUVsZW1lbnQiLCJwYXJlbnROb2RlIiwiaW5zZXJ0QmVmb3JlIiwicmVtb3ZlQ2hpbGQiLCJhcHBlbmRDaGlsZCIsImNsYXNzTmFtZXMiLCJjbGFzc0xpc3QiLCJhZGQiLCJyZW1vdmVDbGFzcyIsInJlbW92ZSIsImhhc0NsYXNzIiwiY29udGFpbnMiLCJoYXNBdHRyaWJ1dGUiLCJhdHRyaWJ1dGUiLCJ0b2dnbGVDbGFzcyIsImNzcyIsIl90aGlzIiwib24iLCJldmVudHMiLCJsaXN0ZW5lciIsIkFycmF5IiwiaXNBcnJheSIsImV2ZW50TGlzdGVuZXJzIiwicHVzaCIsImFkZEV2ZW50TGlzdGVuZXIiLCJvbmNlIiwib2ZmIiwia2V5cyIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJ0cmlnZ2VyIiwiZGV0YWlsIiwiY3VzdG9tRXZlbnQiLCJDdXN0b21FdmVudCIsImRpc3BhdGNoRXZlbnQiLCJsb2FkIiwidXJsIiwiZmV0Y2giLCJ0aGVuIiwicmVzIiwidGV4dCIsImh0bWwiLCJpbm5lckhUTUwiLCJhcHBlbmQiLCJpbnNlcnRBZGphY2VudEhUTUwiLCJwcmVwZW5kIiwiZW1wdHkiLCJzY3JvbGxUb3AiLCJib2R5IiwiZG9jdW1lbnRFbGVtZW50Iiwid2luZG93IiwicGFnZVlPZmZzZXQiLCJzY3JvbGxMZWZ0IiwicGFnZVhPZmZzZXQiLCJvZmZzZXQiLCJsZWZ0IiwidG9wIiwicmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImJvZHlNYXJnaW5MZWZ0IiwibWFyZ2luTGVmdCIsInBhcnNlRmxvYXQiLCJjdXJyZW50U3R5bGUiLCJnZXRDb21wdXRlZFN0eWxlIiwiY2xpZW50V2lkdGgiLCJwYWRkaW5nTGVmdCIsInBhZGRpbmdSaWdodCIsImNsaWVudEhlaWdodCIsInBhZGRpbmdUb3AiLCJwYWRkaW5nQm90dG9tIiwicGFyYW1zIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJldnQiLCJjcmVhdGVFdmVudCIsImluaXRDdXN0b21FdmVudCIsIkVsZW1lbnQiLCJtYXRjaGVzIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJ3ZWJraXRNYXRjaGVzU2VsZWN0b3IiLCJkZWZhdWx0RHluYW1pY09wdGlvbnMiLCJjb252ZXJ0VG9EYXRhIiwiZyIsInV0aWxzIiwic3BhY2luZyIsImRlZmF1bHRMZ1NpemUiLCJsZ1NpemUiLCJpc1Jlc3BvbnNpdmVTaXplcyIsIndXaWR0aCIsImlubmVyV2lkdGgiLCJzaXplXzEiLCJwYXJzZUludCIsInNpemUiLCJjV2lkdGgiLCJjSGVpZ2h0IiwibWF4V2lkdGgiLCJtaW4iLCJtYXhIZWlnaHQiLCJyYXRpbyIsImJvdHRvbSIsImltYWdlU2l6ZSIsIkxHZWwiLCJjb250YWluZXJSZWN0Iiwid0hlaWdodCIsImVsV2lkdGgiLCJlbEhlaWdodCIsImVsU3R5bGUiLCJ4IiwiYm9yZGVyTGVmdCIsInkiLCJib3JkZXJUb3AiLCJzcmMiLCJpZnJhbWVUaXRsZSIsImFsdEF0dHIiLCJzcmNzZXQiLCJzaXplcyIsInNvdXJjZXMiLCJpbWdNYXJrdXAiLCJzb3VyY2VUYWciLCJKU09OIiwicGFyc2UiLCJtYXAiLCJzb3VyY2UiLCJrZXkiLCJzcmNJdG1zIiwicnNXaWR0aCIsInJzU3JjIiwiX3NyYyIsInNwbGljZSIsImoiLCJpbWciLCJjb21wbGV0ZSIsIm5hdHVyYWxXaWR0aCIsIl9wb3N0ZXIiLCJkdW1teUltZyIsInZpZGVvQ29udFN0eWxlIiwicGxheVZpZGVvU3RyaW5nIiwiX2lzVmlkZW8iLCJ5b3V0dWJlIiwidmltZW8iLCJlbGVtZW50cyIsImVsZW1lbnQiLCJkaXNwbGF5IiwidmlzaWJpbGl0eSIsIml0ZW1zIiwiZHluYW1pY0VsZW1lbnRzIiwiYXZhaWxhYmxlRHluYW1pY09wdGlvbnMiLCJpbCIsImsiLCJhIiwiamwiLCJfX3NwcmVhZEFycmF5cyIsIml0ZW0iLCJzcGVjaWZpZWQiLCJkeW5hbWljQXR0ciIsIm5hbWUiLCJsYWJlbCIsImN1cnJlbnRJdGVtIiwiYWx0IiwidGl0bGUiLCJ0aHVtYiIsInN1Ykh0bWwiLCJ0ZXN0IiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiaXNIVE1MNVZJZGVvIiwiaHRtbDUiLCJjb25zb2xlIiwiZXJyb3IiLCJtYXRjaCIsIndpc3RpYSIsImxnSWQiLCJMaWdodEdhbGxlcnkiLCJvcHRpb25zIiwibGdPcGVuZWQiLCJsR2FsbGVyeU9uIiwibGdCdXN5IiwiY3VycmVudEl0ZW1zSW5Eb20iLCJwcmV2U2Nyb2xsVG9wIiwiYm9keVBhZGRpbmdSaWdodCIsImlzRHVtbXlJbWFnZVJlbW92ZWQiLCJkcmFnT3JTd2lwZUVuYWJsZWQiLCJtZWRpYUNvbnRhaW5lclBvc2l0aW9uIiwiZ2VuZXJhdGVTZXR0aW5ncyIsImJ1aWxkTW9kdWxlcyIsInNldHRpbmdzIiwiZ2FsbGVyeUl0ZW1zIiwiZ2V0SXRlbXMiLCJub3JtYWxpemVTZXR0aW5ncyIsImluaXQiLCJ2YWxpZGF0ZUxpY2Vuc2UiLCJhZGRTbGlkZVZpZGVvSW5mbyIsImJ1aWxkU3RydWN0dXJlIiwiaW5zdGFuY2UiLCJzZXRUaW1lb3V0IiwidHJpZ2dlclBvc3RlckNsaWNrIiwiYXJyb3ciLCJvcGVuR2FsbGVyeU9uSXRlbUNsaWNrIiwiX2xvb3BfMSIsInRoaXNfMSIsIiRlbGVtZW50IiwidXVpZCIsInByZXZlbnREZWZhdWx0IiwiY3VycmVudEl0ZW1JbmRleCIsIm9wZW5HYWxsZXJ5IiwicGx1Z2luIiwid2FybiIsImdldFNsaWRlSXRlbSIsImdldFNsaWRlSXRlbUlkIiwiZ2V0SWROYW1lIiwiaWQiLCJnZXRFbGVtZW50QnlJZCIsIm1hbmFnZVNpbmdsZVNsaWRlQ2xhc3NOYW1lIiwib3V0ZXIiLCIkY29udGFpbmVyIiwic3ViSHRtbENvbnQiLCJhZGRDbGFzc2VzIiwiY29udGFpbmVyQ2xhc3NOYW1lIiwiY2xvc2VJY29uIiwibWF4aW1pemVJY29uIiwidGVtcGxhdGUiLCIkbGdDb21wb25lbnRzIiwiJGJhY2tkcm9wIiwiJGlubmVyIiwiJGNvbnRlbnQiLCIkdG9vbGJhciIsIm91dGVyQ2xhc3NOYW1lcyIsInJlZnJlc2hPblJlc2l6ZSIsImhpZGVCYXJzIiwibWFuYWdlQ2xvc2VHYWxsZXJ5IiwiaW5pdE1vZHVsZXMiLCJfX3NsaWRlVmlkZW9JbmZvIiwiZ2V0TWVkaWFDb250YWluZXJQb3NpdGlvbiIsIl9hIiwidG9wXzEiLCJjdXJyZW50SW1hZ2VTaXplIiwicmVzaXplVmlkZW9TbGlkZSIsImltZ1N0eWxlIiwiZ2V0RHVtbXlJbWdTdHlsZXMiLCJsZ1ZpZGVvU3R5bGUiLCJnZXRWaWRlb0NvbnRTdHlsZSIsInVwZGF0ZVNsaWRlcyIsImN1cnJlbnRTcmMiLCJ1cGRhdGVDb250cm9scyIsIl9pbmRleCIsInNvbWUiLCJnYWxsZXJ5SXRlbSIsIml0ZW1JbmRleCIsIm9yZ2FuaXplU2xpZGVJdGVtcyIsImxvYWRDb250ZW50IiwidXBkYXRlQ3VycmVudENvdW50ZXIiLCJjaGlsZHJlbiIsInNob3VsZEhpZGVTY3JvbGxiYXIiLCJib2R5UmVjdCIsInNjcm9sbGJhcldpZHRoIiwicmVzZXRTY3JvbGxCYXIiLCJpdGVtc1RvQmVJbnNlcnRlZFRvRG9tIiwiZ2V0SXRlbXNUb0JlSW5zZXJ0ZWRUb0RvbSIsImFkZEh0bWwiLCJ0cmFuc2Zvcm0iLCJzZXRNZWRpYUNvbnRhaW5lclBvc2l0aW9uIiwidGltZW91dCIsImN1cnJlbnRTbGlkZV8xIiwic2xpZGUiLCJjYXB0aW9uSGVpZ2h0IiwidGh1bWJDb250YWluZXIiLCJjbGVhclRpbWVvdXQiLCJoaWRlQmFyVGltZW91dCIsImluaXRQaWN0dXJlRmlsbCIsIiRpbWciLCJwaWN0dXJlZmlsbCIsImNvdW50ZXJIdG1sIiwic3ViSHRtbFVybCIsImZMIiwiY3VycmVudFNsaWRlIiwiZ2V0RHVtbXlJbWFnZUNvbnRlbnQiLCIkY3VycmVudFNsaWRlIiwiJGN1cnJlbnRJdGVtIiwiX2R1bW15SW1nU3JjIiwiZHVtbXlJbWdDb250ZW50Iiwic2V0SW1nTWFya3VwIiwiY3VycmVudEdhbGxlcnlJdGVtIiwiaXNGaXJzdFNsaWRlV2l0aFpvb21BbmltYXRpb24iLCJvblNsaWRlT2JqZWN0TG9hZCIsIiRzbGlkZSIsImlzSFRNTDVWaWRlb1dpdGhvdXRQb3N0ZXIiLCJvbkxvYWQiLCJvbkVycm9yIiwibWVkaWFPYmplY3QiLCJvbkxnT2JqZWN0TG9hZCIsImRlbGF5IiwiaXNGaXJzdFNsaWRlIiwidHJpZ2dlclNsaWRlSXRlbUxvYWQiLCJfc3BlZWQiLCJnZXRTbGlkZVR5cGUiLCJwb3N0ZXIiLCJ2aWRlbyIsInJlYyIsIl9odG1sNVZpZGVvIiwicmVzcG9uc2l2ZSIsInNyY0R5SXRtcyIsInZpZGVvSW5mbyIsImlmcmFtZSIsInRvcF8yIiwidmlkZW9TaXplIiwibWFya3VwIiwiaHRtbDVWaWRlbyIsImhhc1Bvc3RlciIsImxvYWRDb250ZW50T25GaXJzdFNsaWRlTG9hZCIsInByZXZJbmRleCIsIm51bWJlck9mSXRlbXMiLCJwb3NzaWJsZU51bWJlck9mSXRlbXMiLCJtYXgiLCJwcmV2SW5kZXhJdGVtIiwiX2VsZW1lbnQiLCJpZHgiLCJudW1iZXJPZkV4aXN0aW5nSXRlbXMiLCJnZXRQcmV2aW91c1NsaWRlSW5kZXgiLCJjdXJyZW50SXRlbUlkIiwic2V0RG93bmxvYWRWYWx1ZSIsImRvd25sb2FkVXJsIiwiJGRvd25sb2FkIiwibWFrZVNsaWRlQW5pbWF0aW9uIiwiZGlyZWN0aW9uIiwiY3VycmVudFNsaWRlSXRlbSIsInByZXZpb3VzU2xpZGVJdGVtIiwiZnJvbVRvdWNoIiwiZnJvbVRodW1iIiwibnVtYmVyT2ZHYWxsZXJ5SXRlbXMiLCJwcmV2aW91c1NsaWRlSXRlbV8xIiwidG9wXzMiLCJhcnJvd0Rpc2FibGUiLCJ0b3VjaFByZXYiLCJ0b3VjaE5leHQiLCJ1cGRhdGVDb3VudGVyVG90YWwiLCJ0b3VjaE1vdmUiLCJzdGFydENvb3JkcyIsImVuZENvb3JkcyIsImRpc3RhbmNlWCIsInBhZ2VYIiwiZGlzdGFuY2VZIiwicGFnZVkiLCJhbGxvd1N3aXBlIiwic3dpcGVEaXJlY3Rpb24iLCJhYnMiLCJzZXRUcmFuc2xhdGUiLCJvZmZzZXRXaWR0aCIsImd1dHRlciIsIm9wYWNpdHkiLCJpbm5lckhlaWdodCIsInNjYWxlIiwidG91Y2hFbmQiLCJkaXN0YW5jZSIsInRyaWdnZXJDbGljayIsImRpc3RhbmNlQWJzIiwiZ29Ub05leHRTbGlkZSIsImdvVG9QcmV2U2xpZGUiLCJ0YXJnZXQiLCJpc1Bvc3RlckVsZW1lbnQiLCJpc01vdmVkIiwiaXNTd2lwaW5nIiwiJGl0ZW0iLCJ0b3VjaGVzIiwidG91Y2hBY3Rpb24iLCJtYW5hZ2VTd2lwZUNsYXNzIiwiaXNEcmFnaW5nIiwiX3RvdWNoTmV4dCIsIl90b3VjaFByZXYiLCJfbG9vcCIsImtleUNvZGUiLCIkcHJldiIsIiRuZXh0IiwiJGVsIiwieFZhbHVlIiwieVZhbHVlIiwic2NhbGVYIiwic2NhbGVZIiwibGFzdENhbGwiLCJkZWx0YVkiLCJub3ciLCJEYXRlIiwiZ2V0VGltZSIsImlzU2xpZGVFbGVtZW50IiwicGxheUJ1dHRvbiIsImludmFsaWRhdGVJdGVtcyIsImZvY3VzIiwicHJldmVudFNjcm9sbCIsImZvY3VzYWJsZUVscyIsImZpcnN0Rm9jdXNhYmxlRWwiLCJsYXN0Rm9jdXNhYmxlRWwiLCJzaGlmdEtleSIsImFjdGl2ZUVsZW1lbnQiLCJtb3VzZWRvd24iLCJmb3JjZSIsInRvcF80IiwiX2IiLCJkZXN0cm95TW9kdWxlcyIsInJlbW92ZVRpbWVvdXQiLCJibHVyIiwibW9kdWxlIiwiZXJyIiwiZGVzdHJveSIsInJlZnJlc2giLCJkZXN0cm95R2FsbGVyeSIsImNsb3NlVGltZW91dCIsImJpbmQiLCJpbml0TGlnaHRHYWxsZXJ5IiwiZ2FsbGVyeSIsImRlc2NyaXB0aW9uIiwiZGF0YXNldCIsImxnIiwibGlnaHRHYWxsZXJ5IiwiZGVzYyJdLCJzb3VyY2VSb290IjoiIn0=