/*! For license information please see 483.27d9127b.js.LICENSE.txt */
"use strict";(self.webpackChunkwebpack_setup=self.webpackChunkwebpack_setup||[]).push([[483],{8022:(t,e,i)=>{function n(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}i.d(e,{HO:()=>R,Kx:()=>x,Tu:()=>T,Ur:()=>B,ZC:()=>H,et:()=>P,nu:()=>z,q6:()=>L,tc:()=>w});var r,o,s,l,a,c,h,u,d,f,p,v,m,g=function(){return r||"undefined"!=typeof window&&(r=window.gsap)&&r.registerPlugin&&r},y=1,b=[],w=[],x=[],S=Date.now,k=function(t,e){return e},T=function(t,e){return~x.indexOf(t)&&x[x.indexOf(t)+1][e]},E=function(t){return!!~f.indexOf(t)},O=function(t,e,i,n,r){return t.addEventListener(e,i,{passive:!1!==n,capture:!!r})},_=function(t,e,i,n){return t.removeEventListener(e,i,!!n)},A="scrollLeft",C="scrollTop",M=function(){return p&&p.isPressed||w.cache++},D=function(t,e){var i=function i(n){if(n||0===n){y&&(s.history.scrollRestoration="manual");var r=p&&p.isPressed;n=i.v=Math.round(n)||(p&&p.iOS?1:0),t(n),i.cacheID=w.cache,r&&k("ss",n)}else(e||w.cache!==i.cacheID||k("ref"))&&(i.cacheID=w.cache,i.v=t());return i.v+i.offset};return i.offset=0,t&&i},P={s:A,p:"left",p2:"Left",os:"right",os2:"Right",d:"width",d2:"Width",a:"x",sc:D((function(t){return arguments.length?s.scrollTo(t,L.sc()):s.pageXOffset||l[A]||a[A]||c[A]||0}))},L={s:C,p:"top",p2:"Top",os:"bottom",os2:"Bottom",d:"height",d2:"Height",a:"y",op:P,sc:D((function(t){return arguments.length?s.scrollTo(P.sc(),t):s.pageYOffset||l[C]||a[C]||c[C]||0}))},R=function(t,e){return(e&&e._ctx&&e._ctx.selector||r.utils.toArray)(t)[0]||("string"==typeof t&&!1!==r.config().nullTargetWarn?console.warn("Element not found:",t):null)},H=function(t,e){var i=e.s,n=e.sc;E(t)&&(t=l.scrollingElement||a);var o=w.indexOf(t),s=n===L.sc?1:2;!~o&&(o=w.push(t)-1),w[o+s]||O(t,"scroll",M);var c=w[o+s],h=c||(w[o+s]=D(T(t,i),!0)||(E(t)?n:D((function(e){return arguments.length?t[i]=e:t[i]}))));return h.target=t,c||(h.smooth="smooth"===r.getProperty(t,"scrollBehavior")),h},B=function(t,e,i){var n=t,r=t,o=S(),s=o,l=e||50,a=Math.max(500,3*l),c=function(t,e){var a=S();e||a-o>l?(r=n,n=t,s=o,o=a):i?n+=t:n=r+(t-r)/(a-s)*(o-s)};return{update:c,reset:function(){r=n=i?0:n,s=o=0},getVelocity:function(t){var e=s,l=r,h=S();return(t||0===t)&&t!==n&&c(t),o===s||h-s>a?0:(n+(i?l:-l))/((i?h:o)-e)*1e3}}},Y=function(t,e){return e&&!t._gsapAllow&&t.preventDefault(),t.changedTouches?t.changedTouches[0]:t},W=function(t){var e=Math.max.apply(Math,t),i=Math.min.apply(Math,t);return Math.abs(e)>=Math.abs(i)?e:i},I=function(){var t,e,i,n;(d=r.core.globals().ScrollTrigger)&&d.core&&(t=d.core,e=t.bridge||{},i=t._scrollers,n=t._proxies,i.push.apply(i,w),n.push.apply(n,x),w=i,x=n,k=function(t,i){return e[t](i)})},j=function(t){return r=t||g(),!o&&r&&"undefined"!=typeof document&&document.body&&(s=window,l=document,a=l.documentElement,c=l.body,f=[s,l,a,c],r.utils.clamp,m=r.core.context||function(){},u="onpointerenter"in c?"pointer":"mouse",h=z.isTouch=s.matchMedia&&s.matchMedia("(hover: none), (pointer: coarse)").matches?1:"ontouchstart"in s||navigator.maxTouchPoints>0||navigator.msMaxTouchPoints>0?2:0,v=z.eventTypes=("ontouchstart"in a?"touchstart,touchmove,touchcancel,touchend":"onpointerdown"in a?"pointerdown,pointermove,pointercancel,pointerup":"mousedown,mousemove,mouseup,mouseup").split(","),setTimeout((function(){return y=0}),500),I(),o=1),o};P.op=L,w.cache=0;var z=function(){function t(t){this.init(t)}var e,i,f;return t.prototype.init=function(t){o||j(r)||console.warn("Please gsap.registerPlugin(Observer)"),d||I();var e=t.tolerance,i=t.dragMinimum,n=t.type,f=t.target,g=t.lineHeight,y=t.debounce,w=t.preventDefault,x=t.onStop,k=t.onStopDelay,T=t.ignore,A=t.wheelSpeed,C=t.event,D=t.onDragStart,z=t.onDragEnd,X=t.onDrag,q=t.onPress,F=t.onRelease,V=t.onRight,N=t.onLeft,K=t.onUp,U=t.onDown,G=t.onChangeX,Z=t.onChangeY,$=t.onChange,J=t.onToggleX,Q=t.onToggleY,tt=t.onHover,et=t.onHoverEnd,it=t.onMove,nt=t.ignoreCheck,rt=t.isNormalizer,ot=t.onGestureStart,st=t.onGestureEnd,lt=t.onWheel,at=t.onEnable,ct=t.onDisable,ht=t.onClick,ut=t.scrollSpeed,dt=t.capture,ft=t.allowClicks,pt=t.lockAxis,vt=t.onLockAxis;this.target=f=R(f)||a,this.vars=t,T&&(T=r.utils.toArray(T)),e=e||1e-9,i=i||0,A=A||1,ut=ut||1,n=n||"wheel,touch,pointer",y=!1!==y,g||(g=parseFloat(s.getComputedStyle(c).lineHeight)||22);var mt,gt,yt,bt,wt,xt,St,kt=this,Tt=0,Et=0,Ot=t.passive||!w,_t=H(f,P),At=H(f,L),Ct=_t(),Mt=At(),Dt=~n.indexOf("touch")&&!~n.indexOf("pointer")&&"pointerdown"===v[0],Pt=E(f),Lt=f.ownerDocument||l,Rt=[0,0,0],Ht=[0,0,0],Bt=0,Yt=function(){return Bt=S()},Wt=function(t,e){return(kt.event=t)&&T&&~T.indexOf(t.target)||e&&Dt&&"touch"!==t.pointerType||nt&&nt(t,e)},It=function(){var t=kt.deltaX=W(Rt),i=kt.deltaY=W(Ht),n=Math.abs(t)>=e,r=Math.abs(i)>=e;$&&(n||r)&&$(kt,t,i,Rt,Ht),n&&(V&&kt.deltaX>0&&V(kt),N&&kt.deltaX<0&&N(kt),G&&G(kt),J&&kt.deltaX<0!=Tt<0&&J(kt),Tt=kt.deltaX,Rt[0]=Rt[1]=Rt[2]=0),r&&(U&&kt.deltaY>0&&U(kt),K&&kt.deltaY<0&&K(kt),Z&&Z(kt),Q&&kt.deltaY<0!=Et<0&&Q(kt),Et=kt.deltaY,Ht[0]=Ht[1]=Ht[2]=0),(bt||yt)&&(it&&it(kt),yt&&(X(kt),yt=!1),bt=!1),xt&&!(xt=!1)&&vt&&vt(kt),wt&&(lt(kt),wt=!1),mt=0},jt=function(t,e,i){Rt[i]+=t,Ht[i]+=e,kt._vx.update(t),kt._vy.update(e),y?mt||(mt=requestAnimationFrame(It)):It()},zt=function(t,e){pt&&!St&&(kt.axis=St=Math.abs(t)>Math.abs(e)?"x":"y",xt=!0),"y"!==St&&(Rt[2]+=t,kt._vx.update(t,!0)),"x"!==St&&(Ht[2]+=e,kt._vy.update(e,!0)),y?mt||(mt=requestAnimationFrame(It)):It()},Xt=function(t){if(!Wt(t,1)){var e=(t=Y(t,w)).clientX,n=t.clientY,r=e-kt.x,o=n-kt.y,s=kt.isDragging;kt.x=e,kt.y=n,(s||Math.abs(kt.startX-e)>=i||Math.abs(kt.startY-n)>=i)&&(X&&(yt=!0),s||(kt.isDragging=!0),zt(r,o),s||D&&D(kt))}},qt=kt.onPress=function(t){Wt(t,1)||t&&t.button||(kt.axis=St=null,gt.pause(),kt.isPressed=!0,t=Y(t),Tt=Et=0,kt.startX=kt.x=t.clientX,kt.startY=kt.y=t.clientY,kt._vx.reset(),kt._vy.reset(),O(rt?f:Lt,v[1],Xt,Ot,!0),kt.deltaX=kt.deltaY=0,q&&q(kt))},Ft=kt.onRelease=function(t){if(!Wt(t,1)){_(rt?f:Lt,v[1],Xt,!0);var e=!isNaN(kt.y-kt.startY),i=kt.isDragging,n=i&&(Math.abs(kt.x-kt.startX)>3||Math.abs(kt.y-kt.startY)>3),o=Y(t);!n&&e&&(kt._vx.reset(),kt._vy.reset(),w&&ft&&r.delayedCall(.08,(function(){if(S()-Bt>300&&!t.defaultPrevented)if(t.target.click)t.target.click();else if(Lt.createEvent){var e=Lt.createEvent("MouseEvents");e.initMouseEvent("click",!0,!0,s,1,o.screenX,o.screenY,o.clientX,o.clientY,!1,!1,!1,!1,0,null),t.target.dispatchEvent(e)}}))),kt.isDragging=kt.isGesturing=kt.isPressed=!1,x&&i&&!rt&&gt.restart(!0),z&&i&&z(kt),F&&F(kt,n)}},Vt=function(t){return t.touches&&t.touches.length>1&&(kt.isGesturing=!0)&&ot(t,kt.isDragging)},Nt=function(){return(kt.isGesturing=!1)||st(kt)},Kt=function(t){if(!Wt(t)){var e=_t(),i=At();jt((e-Ct)*ut,(i-Mt)*ut,1),Ct=e,Mt=i,x&&gt.restart(!0)}},Ut=function(t){if(!Wt(t)){t=Y(t,w),lt&&(wt=!0);var e=(1===t.deltaMode?g:2===t.deltaMode?s.innerHeight:1)*A;jt(t.deltaX*e,t.deltaY*e,0),x&&!rt&&gt.restart(!0)}},Gt=function(t){if(!Wt(t)){var e=t.clientX,i=t.clientY,n=e-kt.x,r=i-kt.y;kt.x=e,kt.y=i,bt=!0,x&&gt.restart(!0),(n||r)&&zt(n,r)}},Zt=function(t){kt.event=t,tt(kt)},$t=function(t){kt.event=t,et(kt)},Jt=function(t){return Wt(t)||Y(t,w)&&ht(kt)};gt=kt._dc=r.delayedCall(k||.25,(function(){kt._vx.reset(),kt._vy.reset(),gt.pause(),x&&x(kt)})).pause(),kt.deltaX=kt.deltaY=0,kt._vx=B(0,50,!0),kt._vy=B(0,50,!0),kt.scrollX=_t,kt.scrollY=At,kt.isDragging=kt.isGesturing=kt.isPressed=!1,m(this),kt.enable=function(t){return kt.isEnabled||(O(Pt?Lt:f,"scroll",M),n.indexOf("scroll")>=0&&O(Pt?Lt:f,"scroll",Kt,Ot,dt),n.indexOf("wheel")>=0&&O(f,"wheel",Ut,Ot,dt),(n.indexOf("touch")>=0&&h||n.indexOf("pointer")>=0)&&(O(f,v[0],qt,Ot,dt),O(Lt,v[2],Ft),O(Lt,v[3],Ft),ft&&O(f,"click",Yt,!0,!0),ht&&O(f,"click",Jt),ot&&O(Lt,"gesturestart",Vt),st&&O(Lt,"gestureend",Nt),tt&&O(f,u+"enter",Zt),et&&O(f,u+"leave",$t),it&&O(f,u+"move",Gt)),kt.isEnabled=!0,t&&t.type&&qt(t),at&&at(kt)),kt},kt.disable=function(){kt.isEnabled&&(b.filter((function(t){return t!==kt&&E(t.target)})).length||_(Pt?Lt:f,"scroll",M),kt.isPressed&&(kt._vx.reset(),kt._vy.reset(),_(rt?f:Lt,v[1],Xt,!0)),_(Pt?Lt:f,"scroll",Kt,dt),_(f,"wheel",Ut,dt),_(f,v[0],qt,dt),_(Lt,v[2],Ft),_(Lt,v[3],Ft),_(f,"click",Yt,!0),_(f,"click",Jt),_(Lt,"gesturestart",Vt),_(Lt,"gestureend",Nt),_(f,u+"enter",Zt),_(f,u+"leave",$t),_(f,u+"move",Gt),kt.isEnabled=kt.isPressed=kt.isDragging=!1,ct&&ct(kt))},kt.kill=kt.revert=function(){kt.disable();var t=b.indexOf(kt);t>=0&&b.splice(t,1),p===kt&&(p=0)},b.push(kt),rt&&E(f)&&(p=kt),kt.enable(C)},e=t,(i=[{key:"velocityX",get:function(){return this._vx.getVelocity()}},{key:"velocityY",get:function(){return this._vy.getVelocity()}}])&&n(e.prototype,i),f&&n(e,f),t}();z.version="3.12.5",z.create=function(t){return new z(t)},z.register=j,z.getAll=function(){return b.slice()},z.getById=function(t){return b.filter((function(e){return e.vars.id===t}))[0]},g()&&r.registerPlugin(z)},9709:(t,e,i)=>{i.d(e,{u:()=>Te});var n,r,o,s,l,a,c,h,u,d,f,p,v,m,g,y,b,w,x,S,k,T,E,O,_,A,C,M,D,P,L,R,H,B,Y,W,I,j,z=i(8022),X=1,q=Date.now,F=q(),V=0,N=0,K=function(t,e,i){var n=lt(t)&&("clamp("===t.substr(0,6)||t.indexOf("max")>-1);return i["_"+e+"Clamp"]=n,n?t.substr(6,t.length-7):t},U=function(t,e){return!e||lt(t)&&"clamp("===t.substr(0,6)?t:"clamp("+t+")"},G=function t(){return N&&requestAnimationFrame(t)},Z=function(){return m=1},$=function(){return m=0},J=function(t){return t},Q=function(t){return Math.round(1e5*t)/1e5||0},tt=function(){return"undefined"!=typeof window},et=function(){return n||tt()&&(n=window.gsap)&&n.registerPlugin&&n},it=function(t){return!!~c.indexOf(t)},nt=function(t){return("Height"===t?L:o["inner"+t])||l["client"+t]||a["client"+t]},rt=function(t){return(0,z.Tu)(t,"getBoundingClientRect")||(it(t)?function(){return ge.width=o.innerWidth,ge.height=L,ge}:function(){return Mt(t)})},ot=function(t,e){var i=e.s,n=e.d2,r=e.d,o=e.a;return Math.max(0,(i="scroll"+n)&&(o=(0,z.Tu)(t,i))?o()-rt(t)()[r]:it(t)?(l[i]||a[i])-nt(n):t[i]-t["offset"+n])},st=function(t,e){for(var i=0;i<x.length;i+=3)(!e||~e.indexOf(x[i+1]))&&t(x[i],x[i+1],x[i+2])},lt=function(t){return"string"==typeof t},at=function(t){return"function"==typeof t},ct=function(t){return"number"==typeof t},ht=function(t){return"object"==typeof t},ut=function(t,e,i){return t&&t.progress(e?0:1)&&i&&t.pause()},dt=function(t,e){if(t.enabled){var i=t._ctx?t._ctx.add((function(){return e(t)})):e(t);i&&i.totalTime&&(t.callbackAnimation=i)}},ft=Math.abs,pt="left",vt="right",mt="bottom",gt="width",yt="height",bt="Right",wt="Left",xt="Top",St="Bottom",kt="padding",Tt="margin",Et="Width",Ot="Height",_t="px",At=function(t){return o.getComputedStyle(t)},Ct=function(t,e){for(var i in e)i in t||(t[i]=e[i]);return t},Mt=function(t,e){var i=e&&"matrix(1, 0, 0, 1, 0, 0)"!==At(t)[g]&&n.to(t,{x:0,y:0,xPercent:0,yPercent:0,rotation:0,rotationX:0,rotationY:0,scale:1,skewX:0,skewY:0}).progress(1),r=t.getBoundingClientRect();return i&&i.progress(0).kill(),r},Dt=function(t,e){var i=e.d2;return t["offset"+i]||t["client"+i]||0},Pt=function(t){var e,i=[],n=t.labels,r=t.duration();for(e in n)i.push(n[e]/r);return i},Lt=function(t){var e=n.utils.snap(t),i=Array.isArray(t)&&t.slice(0).sort((function(t,e){return t-e}));return i?function(t,n,r){var o;if(void 0===r&&(r=.001),!n)return e(t);if(n>0){for(t-=r,o=0;o<i.length;o++)if(i[o]>=t)return i[o];return i[o-1]}for(o=i.length,t+=r;o--;)if(i[o]<=t)return i[o];return i[0]}:function(i,n,r){void 0===r&&(r=.001);var o=e(i);return!n||Math.abs(o-i)<r||o-i<0==n<0?o:e(n<0?i-t:i+t)}},Rt=function(t,e,i,n){return i.split(",").forEach((function(i){return t(e,i,n)}))},Ht=function(t,e,i,n,r){return t.addEventListener(e,i,{passive:!n,capture:!!r})},Bt=function(t,e,i,n){return t.removeEventListener(e,i,!!n)},Yt=function(t,e,i){(i=i&&i.wheelHandler)&&(t(e,"wheel",i),t(e,"touchmove",i))},Wt={startColor:"green",endColor:"red",indent:0,fontSize:"16px",fontWeight:"normal"},It={toggleActions:"play",anticipatePin:0},jt={top:0,left:0,center:.5,bottom:1,right:1},zt=function(t,e){if(lt(t)){var i=t.indexOf("="),n=~i?+(t.charAt(i-1)+1)*parseFloat(t.substr(i+1)):0;~i&&(t.indexOf("%")>i&&(n*=e/100),t=t.substr(0,i-1)),t=n+(t in jt?jt[t]*e:~t.indexOf("%")?parseFloat(t)*e/100:parseFloat(t)||0)}return t},Xt=function(t,e,i,n,r,o,l,c){var h=r.startColor,u=r.endColor,d=r.fontSize,f=r.indent,p=r.fontWeight,v=s.createElement("div"),m=it(i)||"fixed"===(0,z.Tu)(i,"pinType"),g=-1!==t.indexOf("scroller"),y=m?a:i,b=-1!==t.indexOf("start"),w=b?h:u,x="border-color:"+w+";font-size:"+d+";color:"+w+";font-weight:"+p+";pointer-events:none;white-space:nowrap;font-family:sans-serif,Arial;z-index:1000;padding:4px 8px;border-width:0;border-style:solid;";return x+="position:"+((g||c)&&m?"fixed;":"absolute;"),(g||c||!m)&&(x+=(n===z.q6?vt:mt)+":"+(o+parseFloat(f))+"px;"),l&&(x+="box-sizing:border-box;text-align:left;width:"+l.offsetWidth+"px;"),v._isStart=b,v.setAttribute("class","gsap-marker-"+t+(e?" marker-"+e:"")),v.style.cssText=x,v.innerText=e||0===e?t+"-"+e:t,y.children[0]?y.insertBefore(v,y.children[0]):y.appendChild(v),v._offset=v["offset"+n.op.d2],qt(v,0,n,b),v},qt=function(t,e,i,r){var o={display:"block"},s=i[r?"os2":"p2"],l=i[r?"p2":"os2"];t._isFlipped=r,o[i.a+"Percent"]=r?-100:0,o[i.a]=r?"1px":0,o["border"+s+Et]=1,o["border"+l+Et]=0,o[i.p]=e+"px",n.set(t,o)},Ft=[],Vt={},Nt=function(){return q()-V>34&&(Y||(Y=requestAnimationFrame(he)))},Kt=function(){(!E||!E.isPressed||E.startX>a.clientWidth)&&(z.tc.cache++,E?Y||(Y=requestAnimationFrame(he)):he(),V||Qt("scrollStart"),V=q())},Ut=function(){A=o.innerWidth,_=o.innerHeight},Gt=function(){z.tc.cache++,!v&&!T&&!s.fullscreenElement&&!s.webkitFullscreenElement&&(!O||A!==o.innerWidth||Math.abs(o.innerHeight-_)>.25*o.innerHeight)&&h.restart(!0)},Zt={},$t=[],Jt=function t(){return Bt(Te,"scrollEnd",t)||le(!0)},Qt=function(t){return Zt[t]&&Zt[t].map((function(t){return t()}))||$t},te=[],ee=function(t){for(var e=0;e<te.length;e+=5)(!t||te[e+4]&&te[e+4].query===t)&&(te[e].style.cssText=te[e+1],te[e].getBBox&&te[e].setAttribute("transform",te[e+2]||""),te[e+3].uncache=1)},ie=function(t,e){var i;for(y=0;y<Ft.length;y++)!(i=Ft[y])||e&&i._ctx!==e||(t?i.kill(1):i.revert(!0,!0));R=!0,e&&ee(e),e||Qt("revert")},ne=function(t,e){z.tc.cache++,(e||!W)&&z.tc.forEach((function(t){return at(t)&&t.cacheID++&&(t.rec=0)})),lt(t)&&(o.history.scrollRestoration=D=t)},re=0,oe=function(){a.appendChild(P),L=!E&&P.offsetHeight||o.innerHeight,a.removeChild(P)},se=function(t){return u(".gsap-marker-start, .gsap-marker-end, .gsap-marker-scroller-start, .gsap-marker-scroller-end").forEach((function(e){return e.style.display=t?"none":"block"}))},le=function(t,e){if(!V||t||R){oe(),W=Te.isRefreshing=!0,z.tc.forEach((function(t){return at(t)&&++t.cacheID&&(t.rec=t())}));var i=Qt("refreshInit");S&&Te.sort(),e||ie(),z.tc.forEach((function(t){at(t)&&(t.smooth&&(t.target.style.scrollBehavior="auto"),t(0))})),Ft.slice(0).forEach((function(t){return t.refresh()})),R=!1,Ft.forEach((function(t){if(t._subPinOffset&&t.pin){var e=t.vars.horizontal?"offsetWidth":"offsetHeight",i=t.pin[e];t.revert(!0,1),t.adjustPinSpacing(t.pin[e]-i),t.refresh()}})),H=1,se(!0),Ft.forEach((function(t){var e=ot(t.scroller,t._dir),i="max"===t.vars.end||t._endClamp&&t.end>e,n=t._startClamp&&t.start>=e;(i||n)&&t.setPositions(n?e-1:t.start,i?Math.max(n?e:t.start+1,e):t.end,!0)})),se(!1),H=0,i.forEach((function(t){return t&&t.render&&t.render(-1)})),z.tc.forEach((function(t){at(t)&&(t.smooth&&requestAnimationFrame((function(){return t.target.style.scrollBehavior="smooth"})),t.rec&&t(t.rec))})),ne(D,1),h.pause(),re++,W=2,he(2),Ft.forEach((function(t){return at(t.vars.onRefresh)&&t.vars.onRefresh(t)})),W=Te.isRefreshing=!1,Qt("refresh")}else Ht(Te,"scrollEnd",Jt)},ae=0,ce=1,he=function(t){if(2===t||!W&&!R){Te.isUpdating=!0,j&&j.update(0);var e=Ft.length,i=q(),n=i-F>=50,r=e&&Ft[0].scroll();if(ce=ae>r?-1:1,W||(ae=r),n&&(V&&!m&&i-V>200&&(V=0,Qt("scrollEnd")),f=F,F=i),ce<0){for(y=e;y-- >0;)Ft[y]&&Ft[y].update(0,n);ce=1}else for(y=0;y<e;y++)Ft[y]&&Ft[y].update(0,n);Te.isUpdating=!1}Y=0},ue=[pt,"top",mt,vt,Tt+St,Tt+bt,Tt+xt,Tt+wt,"display","flexShrink","float","zIndex","gridColumnStart","gridColumnEnd","gridRowStart","gridRowEnd","gridArea","justifySelf","alignSelf","placeSelf","order"],de=ue.concat([gt,yt,"boxSizing","max"+Et,"max"+Ot,"position",Tt,kt,kt+xt,kt+bt,kt+St,kt+wt]),fe=function(t,e,i,n){if(!t._gsap.swappedIn){for(var r,o=ue.length,s=e.style,l=t.style;o--;)s[r=ue[o]]=i[r];s.position="absolute"===i.position?"absolute":"relative","inline"===i.display&&(s.display="inline-block"),l[mt]=l[vt]="auto",s.flexBasis=i.flexBasis||"auto",s.overflow="visible",s.boxSizing="border-box",s[gt]=Dt(t,z.et)+_t,s[yt]=Dt(t,z.q6)+_t,s[kt]=l[Tt]=l.top=l[pt]="0",ve(n),l[gt]=l["max"+Et]=i[gt],l[yt]=l["max"+Ot]=i[yt],l[kt]=i[kt],t.parentNode!==e&&(t.parentNode.insertBefore(e,t),e.appendChild(t)),t._gsap.swappedIn=!0}},pe=/([A-Z])/g,ve=function(t){if(t){var e,i,r=t.t.style,o=t.length,s=0;for((t.t._gsap||n.core.getCache(t.t)).uncache=1;s<o;s+=2)i=t[s+1],e=t[s],i?r[e]=i:r[e]&&r.removeProperty(e.replace(pe,"-$1").toLowerCase())}},me=function(t){for(var e=de.length,i=t.style,n=[],r=0;r<e;r++)n.push(de[r],i[de[r]]);return n.t=t,n},ge={left:0,top:0},ye=function(t,e,i,r,o,s,c,h,u,d,f,p,v,m){at(t)&&(t=t(h)),lt(t)&&"max"===t.substr(0,3)&&(t=p+("="===t.charAt(4)?zt("0"+t.substr(3),i):0));var g,y,b,w=v?v.time():0;if(v&&v.seek(0),isNaN(t)||(t=+t),ct(t))v&&(t=n.utils.mapRange(v.scrollTrigger.start,v.scrollTrigger.end,0,p,t)),c&&qt(c,i,r,!0);else{at(e)&&(e=e(h));var x,S,k,T,E=(t||"0").split(" ");b=(0,z.HO)(e,h)||a,(x=Mt(b)||{})&&(x.left||x.top)||"none"!==At(b).display||(T=b.style.display,b.style.display="block",x=Mt(b),T?b.style.display=T:b.style.removeProperty("display")),S=zt(E[0],x[r.d]),k=zt(E[1]||"0",i),t=x[r.p]-u[r.p]-d+S+o-k,c&&qt(c,k,r,i-k<20||c._isStart&&k>20),i-=i-k}if(m&&(h[m]=t||-.001,t<0&&(t=0)),s){var O=t+i,_=s._isStart;g="scroll"+r.d2,qt(s,O,r,_&&O>20||!_&&(f?Math.max(a[g],l[g]):s.parentNode[g])<=O+1),f&&(u=Mt(c),f&&(s.style[r.op.p]=u[r.op.p]-r.op.m-s._offset+_t))}return v&&b&&(g=Mt(b),v.seek(p),y=Mt(b),v._caScrollDist=g[r.p]-y[r.p],t=t/v._caScrollDist*p),v&&v.seek(w),v?t:Math.round(t)},be=/(webkit|moz|length|cssText|inset)/i,we=function(t,e,i,r){if(t.parentNode!==e){var o,s,l=t.style;if(e===a){for(o in t._stOrig=l.cssText,s=At(t))+o||be.test(o)||!s[o]||"string"!=typeof l[o]||"0"===o||(l[o]=s[o]);l.top=i,l.left=r}else l.cssText=t._stOrig;n.core.getCache(t).uncache=1,e.appendChild(t)}},xe=function(t,e,i){var n=e,r=n;return function(e){var o=Math.round(t());return o!==n&&o!==r&&Math.abs(o-n)>3&&Math.abs(o-r)>3&&(e=o,i&&i()),r=n,n=e,e}},Se=function(t,e,i){var r={};r[e.p]="+="+i,n.set(t,r)},ke=function(t,e){var i=(0,z.ZC)(t,e),r="_scroll"+e.p2,o=function e(o,s,l,a,c){var h=e.tween,u=s.onComplete,d={};l=l||i();var f=xe(i,l,(function(){h.kill(),e.tween=0}));return c=a&&c||0,a=a||o-l,h&&h.kill(),s[r]=o,s.inherit=!1,s.modifiers=d,d[r]=function(){return f(l+a*h.ratio+c*h.ratio*h.ratio)},s.onUpdate=function(){z.tc.cache++,e.tween&&he()},s.onComplete=function(){e.tween=0,u&&u.call(h)},h=e.tween=n.to(t,s)};return t[r]=i,i.wheelHandler=function(){return o.tween&&o.tween.kill()&&(o.tween=0)},Ht(t,"wheel",i.wheelHandler),Te.isTouch&&Ht(t,"touchmove",i.wheelHandler),o},Te=function(){function t(e,i){r||t.register(n)||console.warn("Please gsap.registerPlugin(ScrollTrigger)"),M(this),this.init(e,i)}return t.prototype.init=function(e,i){if(this.progress=this.start=0,this.vars&&this.kill(!0,!0),N){var r,c,h,p,g,b,w,x,T,E,O,_,A,C,M,D,P,L,R,Y,F,G,Z,$,tt,et,st,pt,vt,mt,Rt,Yt,jt,qt,Nt,Ut,Zt,$t,Qt,te,ee,ie,ne=e=Ct(lt(e)||ct(e)||e.nodeType?{trigger:e}:e,It),oe=ne.onUpdate,se=ne.toggleClass,ae=ne.id,he=ne.onToggle,ue=ne.onRefresh,de=ne.scrub,pe=ne.trigger,be=ne.pin,xe=ne.pinSpacing,Te=ne.invalidateOnRefresh,Ee=ne.anticipatePin,Oe=ne.onScrubComplete,_e=ne.onSnapComplete,Ae=ne.once,Ce=ne.snap,Me=ne.pinReparent,De=ne.pinSpacer,Pe=ne.containerAnimation,Le=ne.fastScrollEnd,Re=ne.preventOverlaps,He=e.horizontal||e.containerAnimation&&!1!==e.horizontal?z.et:z.q6,Be=!de&&0!==de,Ye=(0,z.HO)(e.scroller||o),We=n.core.getCache(Ye),Ie=it(Ye),je="fixed"===("pinType"in e?e.pinType:(0,z.Tu)(Ye,"pinType")||Ie&&"fixed"),ze=[e.onEnter,e.onLeave,e.onEnterBack,e.onLeaveBack],Xe=Be&&e.toggleActions.split(" "),qe="markers"in e?e.markers:It.markers,Fe=Ie?0:parseFloat(At(Ye)["border"+He.p2+Et])||0,Ve=this,Ne=e.onRefreshInit&&function(){return e.onRefreshInit(Ve)},Ke=function(t,e,i){var n=i.d,r=i.d2,o=i.a;return(o=(0,z.Tu)(t,"getBoundingClientRect"))?function(){return o()[n]}:function(){return(e?nt(r):t["client"+r])||0}}(Ye,Ie,He),Ue=function(t,e){return!e||~z.Kx.indexOf(t)?rt(t):function(){return ge}}(Ye,Ie),Ge=0,Ze=0,$e=0,Je=(0,z.ZC)(Ye,He);if(Ve._startClamp=Ve._endClamp=!1,Ve._dir=He,Ee*=45,Ve.scroller=Ye,Ve.scroll=Pe?Pe.time.bind(Pe):Je,p=Je(),Ve.vars=e,i=i||e.animation,"refreshPriority"in e&&(S=1,-9999===e.refreshPriority&&(j=Ve)),We.tweenScroll=We.tweenScroll||{top:ke(Ye,z.q6),left:ke(Ye,z.et)},Ve.tweenTo=r=We.tweenScroll[He.p],Ve.scrubDuration=function(t){(jt=ct(t)&&t)?Yt?Yt.duration(t):Yt=n.to(i,{ease:"expo",totalProgress:"+=0",inherit:!1,duration:jt,paused:!0,onComplete:function(){return Oe&&Oe(Ve)}}):(Yt&&Yt.progress(1).kill(),Yt=0)},i&&(i.vars.lazy=!1,i._initted&&!Ve.isReverted||!1!==i.vars.immediateRender&&!1!==e.immediateRender&&i.duration()&&i.render(0,!0,!0),Ve.animation=i.pause(),i.scrollTrigger=Ve,Ve.scrubDuration(de),mt=0,ae||(ae=i.vars.id)),Ce&&(ht(Ce)&&!Ce.push||(Ce={snapTo:Ce}),"scrollBehavior"in a.style&&n.set(Ie?[a,l]:Ye,{scrollBehavior:"auto"}),z.tc.forEach((function(t){return at(t)&&t.target===(Ie?s.scrollingElement||l:Ye)&&(t.smooth=!1)})),h=at(Ce.snapTo)?Ce.snapTo:"labels"===Ce.snapTo?function(t){return function(e){return n.utils.snap(Pt(t),e)}}(i):"labelsDirectional"===Ce.snapTo?(te=i,function(t,e){return Lt(Pt(te))(t,e.direction)}):!1!==Ce.directional?function(t,e){return Lt(Ce.snapTo)(t,q()-Ze<500?0:e.direction)}:n.utils.snap(Ce.snapTo),qt=Ce.duration||{min:.1,max:2},qt=ht(qt)?d(qt.min,qt.max):d(qt,qt),Nt=n.delayedCall(Ce.delay||jt/2||.1,(function(){var t=Je(),e=q()-Ze<500,o=r.tween;if(!(e||Math.abs(Ve.getVelocity())<10)||o||m||Ge===t)Ve.isActive&&Ge!==t&&Nt.restart(!0);else{var s,l,a=(t-b)/C,c=i&&!Be?i.totalProgress():a,u=e?0:(c-Rt)/(q()-f)*1e3||0,d=n.utils.clamp(-a,1-a,ft(u/2)*u/.185),p=a+(!1===Ce.inertia?0:d),v=Ce,g=v.onStart,y=v.onInterrupt,x=v.onComplete;if(s=h(p,Ve),ct(s)||(s=p),l=Math.round(b+s*C),t<=w&&t>=b&&l!==t){if(o&&!o._initted&&o.data<=ft(l-t))return;!1===Ce.inertia&&(d=s-a),r(l,{duration:qt(ft(.185*Math.max(ft(p-c),ft(s-c))/u/.05||0)),ease:Ce.ease||"power3",data:ft(l-t),onInterrupt:function(){return Nt.restart(!0)&&y&&y(Ve)},onComplete:function(){Ve.update(),Ge=Je(),i&&(Yt?Yt.resetTo("totalProgress",s,i._tTime/i._tDur):i.progress(s)),mt=Rt=i&&!Be?i.totalProgress():Ve.progress,_e&&_e(Ve),x&&x(Ve)}},t,d*C,l-t-d*C),g&&g(Ve,r.tween)}}})).pause()),ae&&(Vt[ae]=Ve),(Qt=(pe=Ve.trigger=(0,z.HO)(pe||!0!==be&&be))&&pe._gsap&&pe._gsap.stRevert)&&(Qt=Qt(Ve)),be=!0===be?pe:(0,z.HO)(be),lt(se)&&(se={targets:pe,className:se}),be&&(!1===xe||xe===Tt||(xe=!(!xe&&be.parentNode&&be.parentNode.style&&"flex"===At(be.parentNode).display)&&kt),Ve.pin=be,(c=n.core.getCache(be)).spacer?M=c.pinState:(De&&((De=(0,z.HO)(De))&&!De.nodeType&&(De=De.current||De.nativeElement),c.spacerIsNative=!!De,De&&(c.spacerState=me(De))),c.spacer=L=De||s.createElement("div"),L.classList.add("pin-spacer"),ae&&L.classList.add("pin-spacer-"+ae),c.pinState=M=me(be)),!1!==e.force3D&&n.set(be,{force3D:!0}),Ve.spacer=L=c.spacer,vt=At(be),$=vt[xe+He.os2],Y=n.getProperty(be),F=n.quickSetter(be,He.a,_t),fe(be,L,vt),P=me(be)),qe){_=ht(qe)?Ct(qe,Wt):Wt,E=Xt("scroller-start",ae,Ye,He,_,0),O=Xt("scroller-end",ae,Ye,He,_,0,E),R=E["offset"+He.op.d2];var Qe=(0,z.HO)((0,z.Tu)(Ye,"content")||Ye);x=this.markerStart=Xt("start",ae,Qe,He,_,R,0,Pe),T=this.markerEnd=Xt("end",ae,Qe,He,_,R,0,Pe),Pe&&($t=n.quickSetter([x,T],He.a,_t)),je||z.Kx.length&&!0===(0,z.Tu)(Ye,"fixedMarkers")||(ie=At(ee=Ie?a:Ye).position,ee.style.position="absolute"===ie||"fixed"===ie?ie:"relative",n.set([E,O],{force3D:!0}),et=n.quickSetter(E,He.a,_t),pt=n.quickSetter(O,He.a,_t))}if(Pe){var ti=Pe.vars.onUpdate,ei=Pe.vars.onUpdateParams;Pe.eventCallback("onUpdate",(function(){Ve.update(0,0,1),ti&&ti.apply(Pe,ei||[])}))}if(Ve.previous=function(){return Ft[Ft.indexOf(Ve)-1]},Ve.next=function(){return Ft[Ft.indexOf(Ve)+1]},Ve.revert=function(t,e){if(!e)return Ve.kill(!0);var n=!1!==t||!Ve.enabled,r=v;n!==Ve.isReverted&&(n&&(Ut=Math.max(Je(),Ve.scroll.rec||0),$e=Ve.progress,Zt=i&&i.progress()),x&&[x,T,E,O].forEach((function(t){return t.style.display=n?"none":"block"})),n&&(v=Ve,Ve.update(n)),!be||Me&&Ve.isActive||(n?function(t,e,i){ve(i);var n=t._gsap;if(n.spacerIsNative)ve(n.spacerState);else if(t._gsap.swappedIn){var r=e.parentNode;r&&(r.insertBefore(t,e),r.removeChild(e))}t._gsap.swappedIn=!1}(be,L,M):fe(be,L,At(be),tt)),n||Ve.update(n),v=r,Ve.isReverted=n)},Ve.refresh=function(o,c,h,u){if(!v&&Ve.enabled||c)if(be&&o&&V)Ht(t,"scrollEnd",Jt);else{!W&&Ne&&Ne(Ve),v=Ve,r.tween&&!h&&(r.tween.kill(),r.tween=0),Yt&&Yt.pause(),Te&&i&&i.revert({kill:!1}).invalidate(),Ve.isReverted||Ve.revert(!0,!0),Ve._subPinOffset=!1;var d,f,m,y,S,_,R,B,I,j,X,F,N,U=Ke(),$=Ue(),J=Pe?Pe.duration():ot(Ye,He),Q=C<=.01,et=0,it=u||0,nt=ht(h)?h.end:e.end,rt=e.endTrigger||pe,ct=ht(h)?h.start:e.start||(0!==e.start&&pe?be?"0 0":"0 100%":0),ut=Ve.pinnedContainer=e.pinnedContainer&&(0,z.HO)(e.pinnedContainer,Ve),dt=pe&&Math.max(0,Ft.indexOf(Ve))||0,ft=dt;for(qe&&ht(h)&&(F=n.getProperty(E,He.p),N=n.getProperty(O,He.p));ft--;)(_=Ft[ft]).end||_.refresh(0,1)||(v=Ve),!(R=_.pin)||R!==pe&&R!==be&&R!==ut||_.isReverted||(j||(j=[]),j.unshift(_),_.revert(!0,!0)),_!==Ft[ft]&&(dt--,ft--);for(at(ct)&&(ct=ct(Ve)),ct=K(ct,"start",Ve),b=ye(ct,pe,U,He,Je(),x,E,Ve,$,Fe,je,J,Pe,Ve._startClamp&&"_startClamp")||(be?-.001:0),at(nt)&&(nt=nt(Ve)),lt(nt)&&!nt.indexOf("+=")&&(~nt.indexOf(" ")?nt=(lt(ct)?ct.split(" ")[0]:"")+nt:(et=zt(nt.substr(2),U),nt=lt(ct)?ct:(Pe?n.utils.mapRange(0,Pe.duration(),Pe.scrollTrigger.start,Pe.scrollTrigger.end,b):b)+et,rt=pe)),nt=K(nt,"end",Ve),w=Math.max(b,ye(nt||(rt?"100% 0":J),rt,U,He,Je()+et,T,O,Ve,$,Fe,je,J,Pe,Ve._endClamp&&"_endClamp"))||-.001,et=0,ft=dt;ft--;)(R=(_=Ft[ft]).pin)&&_.start-_._pinPush<=b&&!Pe&&_.end>0&&(d=_.end-(Ve._startClamp?Math.max(0,_.start):_.start),(R===pe&&_.start-_._pinPush<b||R===ut)&&isNaN(ct)&&(et+=d*(1-_.progress)),R===be&&(it+=d));if(b+=et,w+=et,Ve._startClamp&&(Ve._startClamp+=et),Ve._endClamp&&!W&&(Ve._endClamp=w||-.001,w=Math.min(w,ot(Ye,He))),C=w-b||(b-=.01)&&.001,Q&&($e=n.utils.clamp(0,1,n.utils.normalize(b,w,Ut))),Ve._pinPush=it,x&&et&&((d={})[He.a]="+="+et,ut&&(d[He.p]="-="+Je()),n.set([x,T],d)),!be||H&&Ve.end>=ot(Ye,He)){if(pe&&Je()&&!Pe)for(f=pe.parentNode;f&&f!==a;)f._pinOffset&&(b-=f._pinOffset,w-=f._pinOffset),f=f.parentNode}else d=At(be),y=He===z.q6,m=Je(),G=parseFloat(Y(He.a))+it,!J&&w>1&&(X={style:X=(Ie?s.scrollingElement||l:Ye).style,value:X["overflow"+He.a.toUpperCase()]},Ie&&"scroll"!==At(a)["overflow"+He.a.toUpperCase()]&&(X.style["overflow"+He.a.toUpperCase()]="scroll")),fe(be,L,d),P=me(be),f=Mt(be,!0),B=je&&(0,z.ZC)(Ye,y?z.et:z.q6)(),xe?((tt=[xe+He.os2,C+it+_t]).t=L,(ft=xe===kt?Dt(be,He)+C+it:0)&&(tt.push(He.d,ft+_t),"auto"!==L.style.flexBasis&&(L.style.flexBasis=ft+_t)),ve(tt),ut&&Ft.forEach((function(t){t.pin===ut&&!1!==t.vars.pinSpacing&&(t._subPinOffset=!0)})),je&&Je(Ut)):(ft=Dt(be,He))&&"auto"!==L.style.flexBasis&&(L.style.flexBasis=ft+_t),je&&((S={top:f.top+(y?m-b:B)+_t,left:f.left+(y?B:m-b)+_t,boxSizing:"border-box",position:"fixed"})[gt]=S["max"+Et]=Math.ceil(f.width)+_t,S[yt]=S["max"+Ot]=Math.ceil(f.height)+_t,S[Tt]=S[Tt+xt]=S[Tt+bt]=S[Tt+St]=S[Tt+wt]="0",S[kt]=d[kt],S[kt+xt]=d[kt+xt],S[kt+bt]=d[kt+bt],S[kt+St]=d[kt+St],S[kt+wt]=d[kt+wt],D=function(t,e,i){for(var n,r=[],o=t.length,s=i?8:0;s<o;s+=2)n=t[s],r.push(n,n in e?e[n]:t[s+1]);return r.t=t.t,r}(M,S,Me),W&&Je(0)),i?(I=i._initted,k(1),i.render(i.duration(),!0,!0),Z=Y(He.a)-G+C+it,st=Math.abs(C-Z)>1,je&&st&&D.splice(D.length-2,2),i.render(0,!0,!0),I||i.invalidate(!0),i.parent||i.totalTime(i.totalTime()),k(0)):Z=C,X&&(X.value?X.style["overflow"+He.a.toUpperCase()]=X.value:X.style.removeProperty("overflow-"+He.a));j&&j.forEach((function(t){return t.revert(!1,!0)})),Ve.start=b,Ve.end=w,p=g=W?Ut:Je(),Pe||W||(p<Ut&&Je(Ut),Ve.scroll.rec=0),Ve.revert(!1,!0),Ze=q(),Nt&&(Ge=-1,Nt.restart(!0)),v=0,i&&Be&&(i._initted||Zt)&&i.progress()!==Zt&&i.progress(Zt||0,!0).render(i.time(),!0,!0),(Q||$e!==Ve.progress||Pe||Te)&&(i&&!Be&&i.totalProgress(Pe&&b<-.001&&!$e?n.utils.normalize(b,w,0):$e,!0),Ve.progress=Q||(p-b)/C===$e?0:$e),be&&xe&&(L._pinOffset=Math.round(Ve.progress*Z)),Yt&&Yt.invalidate(),isNaN(F)||(F-=n.getProperty(E,He.p),N-=n.getProperty(O,He.p),Se(E,He,F),Se(x,He,F-(u||0)),Se(O,He,N),Se(T,He,N-(u||0))),Q&&!W&&Ve.update(),!ue||W||A||(A=!0,ue(Ve),A=!1)}},Ve.getVelocity=function(){return(Je()-g)/(q()-f)*1e3||0},Ve.endAnimation=function(){ut(Ve.callbackAnimation),i&&(Yt?Yt.progress(1):i.paused()?Be||ut(i,Ve.direction<0,1):ut(i,i.reversed()))},Ve.labelToScroll=function(t){return i&&i.labels&&(b||Ve.refresh()||b)+i.labels[t]/i.duration()*C||0},Ve.getTrailing=function(t){var e=Ft.indexOf(Ve),i=Ve.direction>0?Ft.slice(0,e).reverse():Ft.slice(e+1);return(lt(t)?i.filter((function(e){return e.vars.preventOverlaps===t})):i).filter((function(t){return Ve.direction>0?t.end<=b:t.start>=w}))},Ve.update=function(t,e,n){if(!Pe||n||t){var o,s,l,c,h,d,m,y=!0===W?Ut:Ve.scroll(),x=t?0:(y-b)/C,S=x<0?0:x>1?1:x||0,k=Ve.progress;if(e&&(g=p,p=Pe?Je():y,Ce&&(Rt=mt,mt=i&&!Be?i.totalProgress():S)),Ee&&be&&!v&&!X&&V&&(!S&&b<y+(y-g)/(q()-f)*Ee?S=1e-4:1===S&&w>y+(y-g)/(q()-f)*Ee&&(S=.9999)),S!==k&&Ve.enabled){if(c=(h=(o=Ve.isActive=!!S&&S<1)!==(!!k&&k<1))||!!S!=!!k,Ve.direction=S>k?1:-1,Ve.progress=S,c&&!v&&(s=S&&!k?0:1===S?1:1===k?2:3,Be&&(l=!h&&"none"!==Xe[s+1]&&Xe[s+1]||Xe[s],m=i&&("complete"===l||"reset"===l||l in i))),Re&&(h||m)&&(m||de||!i)&&(at(Re)?Re(Ve):Ve.getTrailing(Re).forEach((function(t){return t.endAnimation()}))),Be||(!Yt||v||X?i&&i.totalProgress(S,!(!v||!Ze&&!t)):(Yt._dp._time-Yt._start!==Yt._time&&Yt.render(Yt._dp._time-Yt._start),Yt.resetTo?Yt.resetTo("totalProgress",S,i._tTime/i._tDur):(Yt.vars.totalProgress=S,Yt.invalidate().restart()))),be)if(t&&xe&&(L.style[xe+He.os2]=$),je){if(c){if(d=!t&&S>k&&w+1>y&&y+1>=ot(Ye,He),Me)if(t||!o&&!d)we(be,L);else{var T=Mt(be,!0),O=y-b;we(be,a,T.top+(He===z.q6?O:0)+_t,T.left+(He===z.q6?0:O)+_t)}ve(o||d?D:P),st&&S<1&&o||F(G+(1!==S||d?0:Z))}}else F(Q(G+Z*S));Ce&&!r.tween&&!v&&!X&&Nt.restart(!0),se&&(h||Ae&&S&&(S<1||!B))&&u(se.targets).forEach((function(t){return t.classList[o||Ae?"add":"remove"](se.className)})),oe&&!Be&&!t&&oe(Ve),c&&!v?(Be&&(m&&("complete"===l?i.pause().totalProgress(1):"reset"===l?i.restart(!0).pause():"restart"===l?i.restart(!0):i[l]()),oe&&oe(Ve)),!h&&B||(he&&h&&dt(Ve,he),ze[s]&&dt(Ve,ze[s]),Ae&&(1===S?Ve.kill(!1,1):ze[s]=0),h||ze[s=1===S?1:3]&&dt(Ve,ze[s])),Le&&!o&&Math.abs(Ve.getVelocity())>(ct(Le)?Le:2500)&&(ut(Ve.callbackAnimation),Yt?Yt.progress(1):ut(i,"reverse"===l?1:!S,1))):Be&&oe&&!v&&oe(Ve)}if(pt){var _=Pe?y/Pe.duration()*(Pe._caScrollDist||0):y;et(_+(E._isFlipped?1:0)),pt(_)}$t&&$t(-y/Pe.duration()*(Pe._caScrollDist||0))}},Ve.enable=function(e,i){Ve.enabled||(Ve.enabled=!0,Ht(Ye,"resize",Gt),Ie||Ht(Ye,"scroll",Kt),Ne&&Ht(t,"refreshInit",Ne),!1!==e&&(Ve.progress=$e=0,p=g=Ge=Je()),!1!==i&&Ve.refresh())},Ve.getTween=function(t){return t&&r?r.tween:Yt},Ve.setPositions=function(t,e,i,n){if(Pe){var r=Pe.scrollTrigger,o=Pe.duration(),s=r.end-r.start;t=r.start+s*t/o,e=r.start+s*e/o}Ve.refresh(!1,!1,{start:U(t,i&&!!Ve._startClamp),end:U(e,i&&!!Ve._endClamp)},n),Ve.update()},Ve.adjustPinSpacing=function(t){if(tt&&t){var e=tt.indexOf(He.d)+1;tt[e]=parseFloat(tt[e])+t+_t,tt[1]=parseFloat(tt[1])+t+_t,ve(tt)}},Ve.disable=function(e,i){if(Ve.enabled&&(!1!==e&&Ve.revert(!0,!0),Ve.enabled=Ve.isActive=!1,i||Yt&&Yt.pause(),Ut=0,c&&(c.uncache=1),Ne&&Bt(t,"refreshInit",Ne),Nt&&(Nt.pause(),r.tween&&r.tween.kill()&&(r.tween=0)),!Ie)){for(var n=Ft.length;n--;)if(Ft[n].scroller===Ye&&Ft[n]!==Ve)return;Bt(Ye,"resize",Gt),Ie||Bt(Ye,"scroll",Kt)}},Ve.kill=function(t,n){Ve.disable(t,n),Yt&&!n&&Yt.kill(),ae&&delete Vt[ae];var r=Ft.indexOf(Ve);r>=0&&Ft.splice(r,1),r===y&&ce>0&&y--,r=0,Ft.forEach((function(t){return t.scroller===Ve.scroller&&(r=1)})),r||W||(Ve.scroll.rec=0),i&&(i.scrollTrigger=null,t&&i.revert({kill:!1}),n||i.kill()),x&&[x,T,E,O].forEach((function(t){return t.parentNode&&t.parentNode.removeChild(t)})),j===Ve&&(j=0),be&&(c&&(c.uncache=1),r=0,Ft.forEach((function(t){return t.pin===be&&r++})),r||(c.spacer=0)),e.onKill&&e.onKill(Ve)},Ft.push(Ve),Ve.enable(!1,!1),Qt&&Qt(Ve),i&&i.add&&!C){var ii=Ve.update;Ve.update=function(){Ve.update=ii,b||w||Ve.refresh()},n.delayedCall(.01,Ve.update),C=.01,b=w=0}else Ve.refresh();be&&function(){if(I!==re){var t=I=re;requestAnimationFrame((function(){return t===re&&le(!0)}))}}()}else this.update=this.refresh=this.kill=J},t.register=function(e){return r||(n=e||et(),tt()&&window.document&&t.enable(),r=N),r},t.defaults=function(t){if(t)for(var e in t)It[e]=t[e];return It},t.disable=function(t,e){N=0,Ft.forEach((function(i){return i[e?"kill":"disable"](t)})),Bt(o,"wheel",Kt),Bt(s,"scroll",Kt),clearInterval(p),Bt(s,"touchcancel",J),Bt(a,"touchstart",J),Rt(Bt,s,"pointerdown,touchstart,mousedown",Z),Rt(Bt,s,"pointerup,touchend,mouseup",$),h.kill(),st(Bt);for(var i=0;i<z.tc.length;i+=3)Yt(Bt,z.tc[i],z.tc[i+1]),Yt(Bt,z.tc[i],z.tc[i+2])},t.enable=function(){if(o=window,s=document,l=s.documentElement,a=s.body,n&&(u=n.utils.toArray,d=n.utils.clamp,M=n.core.context||J,k=n.core.suppressOverwrites||J,D=o.history.scrollRestoration||"auto",ae=o.pageYOffset,n.core.globals("ScrollTrigger",t),a)){N=1,(P=document.createElement("div")).style.height="100vh",P.style.position="absolute",oe(),G(),z.nu.register(n),t.isTouch=z.nu.isTouch,C=z.nu.isTouch&&/(iPad|iPhone|iPod|Mac)/g.test(navigator.userAgent),O=1===z.nu.isTouch,Ht(o,"wheel",Kt),c=[o,s,l,a],n.matchMedia?(t.matchMedia=function(t){var e,i=n.matchMedia();for(e in t)i.add(e,t[e]);return i},n.addEventListener("matchMediaInit",(function(){return ie()})),n.addEventListener("matchMediaRevert",(function(){return ee()})),n.addEventListener("matchMedia",(function(){le(0,1),Qt("matchMedia")})),n.matchMedia("(orientation: portrait)",(function(){return Ut(),Ut}))):console.warn("Requires GSAP 3.11.0 or later"),Ut(),Ht(s,"scroll",Kt);var e,i,f=a.style,v=f.borderTopStyle,m=n.core.Animation.prototype;for(m.revert||Object.defineProperty(m,"revert",{value:function(){return this.time(-.01,!0)}}),f.borderTopStyle="solid",e=Mt(a),z.q6.m=Math.round(e.top+z.q6.sc())||0,z.et.m=Math.round(e.left+z.et.sc())||0,v?f.borderTopStyle=v:f.removeProperty("border-top-style"),p=setInterval(Nt,250),n.delayedCall(.5,(function(){return X=0})),Ht(s,"touchcancel",J),Ht(a,"touchstart",J),Rt(Ht,s,"pointerdown,touchstart,mousedown",Z),Rt(Ht,s,"pointerup,touchend,mouseup",$),g=n.utils.checkPrefix("transform"),de.push(g),r=q(),h=n.delayedCall(.2,le).pause(),x=[s,"visibilitychange",function(){var t=o.innerWidth,e=o.innerHeight;s.hidden?(b=t,w=e):b===t&&w===e||Gt()},s,"DOMContentLoaded",le,o,"load",le,o,"resize",Gt],st(Ht),Ft.forEach((function(t){return t.enable(0,1)})),i=0;i<z.tc.length;i+=3)Yt(Bt,z.tc[i],z.tc[i+1]),Yt(Bt,z.tc[i],z.tc[i+2])}},t.config=function(e){"limitCallbacks"in e&&(B=!!e.limitCallbacks);var i=e.syncInterval;i&&clearInterval(p)||(p=i)&&setInterval(Nt,i),"ignoreMobileResize"in e&&(O=1===t.isTouch&&e.ignoreMobileResize),"autoRefreshEvents"in e&&(st(Bt)||st(Ht,e.autoRefreshEvents||"none"),T=-1===(e.autoRefreshEvents+"").indexOf("resize"))},t.scrollerProxy=function(t,e){var i=(0,z.HO)(t),n=z.tc.indexOf(i),r=it(i);~n&&z.tc.splice(n,r?6:2),e&&(r?z.Kx.unshift(o,e,a,e,l,e):z.Kx.unshift(i,e))},t.clearMatchMedia=function(t){Ft.forEach((function(e){return e._ctx&&e._ctx.query===t&&e._ctx.kill(!0,!0)}))},t.isInViewport=function(t,e,i){var n=(lt(t)?(0,z.HO)(t):t).getBoundingClientRect(),r=n[i?gt:yt]*e||0;return i?n.right-r>0&&n.left+r<o.innerWidth:n.bottom-r>0&&n.top+r<o.innerHeight},t.positionInViewport=function(t,e,i){lt(t)&&(t=(0,z.HO)(t));var n=t.getBoundingClientRect(),r=n[i?gt:yt],s=null==e?r/2:e in jt?jt[e]*r:~e.indexOf("%")?parseFloat(e)*r/100:parseFloat(e)||0;return i?(n.left+s)/o.innerWidth:(n.top+s)/o.innerHeight},t.killAll=function(t){if(Ft.slice(0).forEach((function(t){return"ScrollSmoother"!==t.vars.id&&t.kill()})),!0!==t){var e=Zt.killAll||[];Zt={},e.forEach((function(t){return t()}))}},t}();Te.version="3.12.5",Te.saveStyles=function(t){return t?u(t).forEach((function(t){if(t&&t.style){var e=te.indexOf(t);e>=0&&te.splice(e,5),te.push(t,t.style.cssText,t.getBBox&&t.getAttribute("transform"),n.core.getCache(t),M())}})):te},Te.revert=function(t,e){return ie(!t,e)},Te.create=function(t,e){return new Te(t,e)},Te.refresh=function(t){return t?Gt():(r||Te.register())&&le(!0)},Te.update=function(t){return++z.tc.cache&&he(!0===t?2:0)},Te.clearScrollMemory=ne,Te.maxScroll=function(t,e){return ot(t,e?z.et:z.q6)},Te.getScrollFunc=function(t,e){return(0,z.ZC)((0,z.HO)(t),e?z.et:z.q6)},Te.getById=function(t){return Vt[t]},Te.getAll=function(){return Ft.filter((function(t){return"ScrollSmoother"!==t.vars.id}))},Te.isScrolling=function(){return!!V},Te.snapDirectional=Lt,Te.addEventListener=function(t,e){var i=Zt[t]||(Zt[t]=[]);~i.indexOf(e)||i.push(e)},Te.removeEventListener=function(t,e){var i=Zt[t],n=i&&i.indexOf(e);n>=0&&i.splice(n,1)},Te.batch=function(t,e){var i,r=[],o={},s=e.interval||.016,l=e.batchMax||1e9,a=function(t,e){var i=[],r=[],o=n.delayedCall(s,(function(){e(i,r),i=[],r=[]})).pause();return function(t){i.length||o.restart(!0),i.push(t.trigger),r.push(t),l<=i.length&&o.progress(1)}};for(i in e)o[i]="on"===i.substr(0,2)&&at(e[i])&&"onRefreshInit"!==i?a(0,e[i]):e[i];return at(l)&&(l=l(),Ht(Te,"refresh",(function(){return l=e.batchMax()}))),u(t).forEach((function(t){var e={};for(i in o)e[i]=o[i];e.trigger=t,r.push(Te.create(e))})),r};var Ee,Oe=function(t,e,i,n){return e>n?t(n):e<0&&t(0),i>n?(n-e)/(i-e):i<0?e/(e-i):1},_e=function t(e,i){!0===i?e.style.removeProperty("touch-action"):e.style.touchAction=!0===i?"auto":i?"pan-"+i+(z.nu.isTouch?" pinch-zoom":""):"none",e===l&&t(a,i)},Ae={auto:1,scroll:1},Ce=function(t){var e,i=t.event,r=t.target,o=t.axis,s=(i.changedTouches?i.changedTouches[0]:i).target,l=s._gsap||n.core.getCache(s),c=q();if(!l._isScrollT||c-l._isScrollT>2e3){for(;s&&s!==a&&(s.scrollHeight<=s.clientHeight&&s.scrollWidth<=s.clientWidth||!Ae[(e=At(s)).overflowY]&&!Ae[e.overflowX]);)s=s.parentNode;l._isScroll=s&&s!==r&&!it(s)&&(Ae[(e=At(s)).overflowY]||Ae[e.overflowX]),l._isScrollT=c}(l._isScroll||"x"===o)&&(i.stopPropagation(),i._gsapAllow=!0)},Me=function(t,e,i,n){return z.nu.create({target:t,capture:!0,debounce:!1,lockAxis:!0,type:e,onWheel:n=n&&Ce,onPress:n,onDrag:n,onScroll:n,onEnable:function(){return i&&Ht(s,z.nu.eventTypes[0],Pe,!1,!0)},onDisable:function(){return Bt(s,z.nu.eventTypes[0],Pe,!0)}})},De=/(input|label|select|textarea)/i,Pe=function(t){var e=De.test(t.target.tagName);(e||Ee)&&(t._gsapAllow=!0,Ee=e)},Le=function(t){ht(t)||(t={}),t.preventDefault=t.isNormalizer=t.allowClicks=!0,t.type||(t.type="wheel,touch"),t.debounce=!!t.debounce,t.id=t.id||"normalizer";var e,i,r,s,a,c,h,u,f=t,p=f.normalizeScrollX,v=f.momentum,m=f.allowNestedScroll,g=f.onRelease,y=(0,z.HO)(t.target)||l,b=n.core.globals().ScrollSmoother,w=b&&b.get(),x=C&&(t.content&&(0,z.HO)(t.content)||w&&!1!==t.content&&!w.smooth()&&w.content()),S=(0,z.ZC)(y,z.q6),k=(0,z.ZC)(y,z.et),T=1,E=(z.nu.isTouch&&o.visualViewport?o.visualViewport.scale*o.visualViewport.width:o.outerWidth)/o.innerWidth,O=0,_=at(v)?function(){return v(e)}:function(){return v||2.8},A=Me(y,t.type,!0,m),M=function(){return s=!1},D=J,P=J,L=function(){i=ot(y,z.q6),P=d(C?1:0,i),p&&(D=d(0,ot(y,z.et))),r=re},R=function(){x._gsap.y=Q(parseFloat(x._gsap.y)+S.offset)+"px",x.style.transform="matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, "+parseFloat(x._gsap.y)+", 0, 1)",S.offset=S.cacheID=0},H=function(){L(),a.isActive()&&a.vars.scrollY>i&&(S()>i?a.progress(1)&&S(i):a.resetTo("scrollY",i))};return x&&n.set(x,{y:"+=0"}),t.ignoreCheck=function(t){return C&&"touchmove"===t.type&&function(){if(s){requestAnimationFrame(M);var t=Q(e.deltaY/2),i=P(S.v-t);if(x&&i!==S.v+S.offset){S.offset=i-S.v;var n=Q((parseFloat(x&&x._gsap.y)||0)-S.offset);x.style.transform="matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, "+n+", 0, 1)",x._gsap.y=n+"px",S.cacheID=z.tc.cache,he()}return!0}S.offset&&R(),s=!0}()||T>1.05&&"touchstart"!==t.type||e.isGesturing||t.touches&&t.touches.length>1},t.onPress=function(){s=!1;var t=T;T=Q((o.visualViewport&&o.visualViewport.scale||1)/E),a.pause(),t!==T&&_e(y,T>1.01||!p&&"x"),c=k(),h=S(),L(),r=re},t.onRelease=t.onGestureStart=function(t,e){if(S.offset&&R(),e){z.tc.cache++;var r,o,s=_();p&&(o=(r=k())+.05*s*-t.velocityX/.227,s*=Oe(k,r,o,ot(y,z.et)),a.vars.scrollX=D(o)),o=(r=S())+.05*s*-t.velocityY/.227,s*=Oe(S,r,o,ot(y,z.q6)),a.vars.scrollY=P(o),a.invalidate().duration(s).play(.01),(C&&a.vars.scrollY>=i||r>=i-1)&&n.to({},{onUpdate:H,duration:s})}else u.restart(!0);g&&g(t)},t.onWheel=function(){a._ts&&a.pause(),q()-O>1e3&&(r=0,O=q())},t.onChange=function(t,e,i,n,o){if(re!==r&&L(),e&&p&&k(D(n[2]===e?c+(t.startX-t.x):k()+e-n[1])),i){S.offset&&R();var s=o[2]===i,l=s?h+t.startY-t.y:S()+i-o[1],a=P(l);s&&l!==a&&(h+=a-l),S(a)}(i||e)&&he()},t.onEnable=function(){_e(y,!p&&"x"),Te.addEventListener("refresh",H),Ht(o,"resize",H),S.smooth&&(S.target.style.scrollBehavior="auto",S.smooth=k.smooth=!1),A.enable()},t.onDisable=function(){_e(y,!0),Bt(o,"resize",H),Te.removeEventListener("refresh",H),A.kill()},t.lockAxis=!1!==t.lockAxis,(e=new z.nu(t)).iOS=C,C&&!S()&&S(1),C&&n.ticker.add(J),u=e._dc,a=n.to(e,{ease:"power4",paused:!0,inherit:!1,scrollX:p?"+=0.1":"+=0",scrollY:"+=0.1",modifiers:{scrollY:xe(S,S(),(function(){return a.pause()}))},onUpdate:he,onComplete:u.vars.onComplete}),e};Te.sort=function(t){return Ft.sort(t||function(t,e){return-1e6*(t.vars.refreshPriority||0)+t.start-(e.start+-1e6*(e.vars.refreshPriority||0))})},Te.observe=function(t){return new z.nu(t)},Te.normalizeScroll=function(t){if(void 0===t)return E;if(!0===t&&E)return E.enable();if(!1===t)return E&&E.kill(),void(E=t);var e=t instanceof z.nu?t:Le(t);return E&&E.target===e.target&&E.kill(),it(e.target)&&(E=e),e},Te.core={_getVelocityProp:z.Ur,_inputObserver:Me,_scrollers:z.tc,_proxies:z.Kx,bridge:{ss:function(){V||Qt("scrollStart"),V=q()},ref:function(){return v}}},et()&&n.registerPlugin(Te)},6383:(t,e,i)=>{function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function r(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function o(t,e,i){return e&&r(t.prototype,e),i&&r(t,i),t}function s(t,e,i){return e in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t}function l(t,e){var i=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),i.push.apply(i,n)}return i}function a(t){for(var e=1;e<arguments.length;e++){var i=null!=arguments[e]?arguments[e]:{};e%2?l(Object(i),!0).forEach((function(e){s(t,e,i[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(i)):l(Object(i)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(i,e))}))}return t}function c(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&u(t,e)}function h(t){return h=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},h(t)}function u(t,e){return u=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},u(t,e)}function d(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function f(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var i,n=h(t);if(e){var r=h(this).constructor;i=Reflect.construct(n,arguments,r)}else i=n.apply(this,arguments);return function(t,e){return!e||"object"!=typeof e&&"function"!=typeof e?d(t):e}(this,i)}}function p(t,e,i){return p="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,i){var n=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=h(t)););return t}(t,e);if(n){var r=Object.getOwnPropertyDescriptor(n,e);return r.get?r.get.call(i):r.value}},p(t,e,i||t)}function v(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(t)))return;var i=[],n=!0,r=!1,o=void 0;try{for(var s,l=t[Symbol.iterator]();!(n=(s=l.next()).done)&&(i.push(s.value),!e||i.length!==e);n=!0);}catch(t){r=!0,o=t}finally{try{n||null==l.return||l.return()}finally{if(r)throw o}}return i}(t,e)||g(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function m(t){return function(t){if(Array.isArray(t))return y(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||g(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function g(t,e){if(t){if("string"==typeof t)return y(t,e);var i=Object.prototype.toString.call(t).slice(8,-1);return"Object"===i&&t.constructor&&(i=t.constructor.name),"Map"===i||"Set"===i?Array.from(t):"Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)?y(t,e):void 0}}function y(t,e){(null==e||e>t.length)&&(e=t.length);for(var i=0,n=new Array(e);i<e;i++)n[i]=t[i];return n}i.d(e,{Ay:()=>dt});var b={el:document,name:"scroll",offset:[0,0],repeat:!1,smooth:!1,initPosition:{x:0,y:0},direction:"vertical",gestureDirection:"vertical",reloadOnContextChange:!1,lerp:.1,class:"is-inview",scrollbarContainer:!1,scrollbarClass:"c-scrollbar",scrollingClass:"has-scroll-scrolling",draggingClass:"has-scroll-dragging",smoothClass:"has-scroll-smooth",initClass:"has-scroll-init",getSpeed:!1,getDirection:!1,scrollFromAnywhere:!1,multiplier:1,firefoxMultiplier:50,touchMultiplier:2,resetNativeScroll:!0,tablet:{smooth:!1,direction:"vertical",gestureDirection:"vertical",breakpoint:1024},smartphone:{smooth:!1,direction:"vertical",gestureDirection:"vertical"}},w=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};n(this,t),Object.assign(this,b,e),this.smartphone=b.smartphone,e.smartphone&&Object.assign(this.smartphone,e.smartphone),this.tablet=b.tablet,e.tablet&&Object.assign(this.tablet,e.tablet),this.namespace="locomotive",this.html=document.documentElement,this.windowHeight=window.innerHeight,this.windowWidth=window.innerWidth,this.windowMiddle={x:this.windowWidth/2,y:this.windowHeight/2},this.els={},this.currentElements={},this.listeners={},this.hasScrollTicking=!1,this.hasCallEventSet=!1,this.checkScroll=this.checkScroll.bind(this),this.checkResize=this.checkResize.bind(this),this.checkEvent=this.checkEvent.bind(this),this.instance={scroll:{x:0,y:0},limit:{x:this.html.offsetWidth,y:this.html.offsetHeight},currentElements:this.currentElements},this.isMobile?this.isTablet?this.context="tablet":this.context="smartphone":this.context="desktop",this.isMobile&&(this.direction=this[this.context].direction),"horizontal"===this.direction?this.directionAxis="x":this.directionAxis="y",this.getDirection&&(this.instance.direction=null),this.getDirection&&(this.instance.speed=0),this.html.classList.add(this.initClass),window.addEventListener("resize",this.checkResize,!1)}return o(t,[{key:"init",value:function(){this.initEvents()}},{key:"checkScroll",value:function(){this.dispatchScroll()}},{key:"checkResize",value:function(){var t=this;this.resizeTick||(this.resizeTick=!0,requestAnimationFrame((function(){t.resize(),t.resizeTick=!1})))}},{key:"resize",value:function(){}},{key:"checkContext",value:function(){if(this.reloadOnContextChange){this.isMobile=/Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||"MacIntel"===navigator.platform&&navigator.maxTouchPoints>1||this.windowWidth<this.tablet.breakpoint,this.isTablet=this.isMobile&&this.windowWidth>=this.tablet.breakpoint;var t=this.context;if(this.isMobile?this.isTablet?this.context="tablet":this.context="smartphone":this.context="desktop",t!=this.context)("desktop"==t?this.smooth:this[t].smooth)!=("desktop"==this.context?this.smooth:this[this.context].smooth)&&window.location.reload()}}},{key:"initEvents",value:function(){var t=this;this.scrollToEls=this.el.querySelectorAll("[data-".concat(this.name,"-to]")),this.setScrollTo=this.setScrollTo.bind(this),this.scrollToEls.forEach((function(e){e.addEventListener("click",t.setScrollTo,!1)}))}},{key:"setScrollTo",value:function(t){t.preventDefault(),this.scrollTo(t.currentTarget.getAttribute("data-".concat(this.name,"-href"))||t.currentTarget.getAttribute("href"),{offset:t.currentTarget.getAttribute("data-".concat(this.name,"-offset"))})}},{key:"addElements",value:function(){}},{key:"detectElements",value:function(t){var e=this,i=this.instance.scroll.y,n=i+this.windowHeight,r=this.instance.scroll.x,o=r+this.windowWidth;Object.entries(this.els).forEach((function(s){var l=v(s,2),a=l[0],c=l[1];if(!c||c.inView&&!t||("horizontal"===e.direction?o>=c.left&&r<c.right&&e.setInView(c,a):n>=c.top&&i<c.bottom&&e.setInView(c,a)),c&&c.inView)if("horizontal"===e.direction){var h=c.right-c.left;c.progress=(e.instance.scroll.x-(c.left-e.windowWidth))/(h+e.windowWidth),(o<c.left||r>c.right)&&e.setOutOfView(c,a)}else{var u=c.bottom-c.top;c.progress=(e.instance.scroll.y-(c.top-e.windowHeight))/(u+e.windowHeight),(n<c.top||i>c.bottom)&&e.setOutOfView(c,a)}})),this.hasScrollTicking=!1}},{key:"setInView",value:function(t,e){this.els[e].inView=!0,t.el.classList.add(t.class),this.currentElements[e]=t,t.call&&this.hasCallEventSet&&(this.dispatchCall(t,"enter"),t.repeat||(this.els[e].call=!1))}},{key:"setOutOfView",value:function(t,e){var i=this;this.els[e].inView=!1,Object.keys(this.currentElements).forEach((function(t){t===e&&delete i.currentElements[t]})),t.call&&this.hasCallEventSet&&this.dispatchCall(t,"exit"),t.repeat&&t.el.classList.remove(t.class)}},{key:"dispatchCall",value:function(t,e){this.callWay=e,this.callValue=t.call.split(",").map((function(t){return t.trim()})),this.callObj=t,1==this.callValue.length&&(this.callValue=this.callValue[0]);var i=new Event(this.namespace+"call");this.el.dispatchEvent(i)}},{key:"dispatchScroll",value:function(){var t=new Event(this.namespace+"scroll");this.el.dispatchEvent(t)}},{key:"setEvents",value:function(t,e){this.listeners[t]||(this.listeners[t]=[]);var i=this.listeners[t];i.push(e),1===i.length&&this.el.addEventListener(this.namespace+t,this.checkEvent,!1),"call"===t&&(this.hasCallEventSet=!0,this.detectElements(!0))}},{key:"unsetEvents",value:function(t,e){if(this.listeners[t]){var i=this.listeners[t],n=i.indexOf(e);n<0||(i.splice(n,1),0===i.index&&this.el.removeEventListener(this.namespace+t,this.checkEvent,!1))}}},{key:"checkEvent",value:function(t){var e=this,i=t.type.replace(this.namespace,""),n=this.listeners[i];n&&0!==n.length&&n.forEach((function(t){switch(i){case"scroll":return t(e.instance);case"call":return t(e.callValue,e.callWay,e.callObj);default:return t()}}))}},{key:"startScroll",value:function(){}},{key:"stopScroll",value:function(){}},{key:"setScroll",value:function(t,e){this.instance.scroll={x:0,y:0}}},{key:"destroy",value:function(){var t=this;window.removeEventListener("resize",this.checkResize,!1),Object.keys(this.listeners).forEach((function(e){t.el.removeEventListener(t.namespace+e,t.checkEvent,!1)})),this.listeners={},this.scrollToEls.forEach((function(e){e.removeEventListener("click",t.setScrollTo,!1)})),this.html.classList.remove(this.initClass)}}]),t}(),x="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==i.g?i.g:"undefined"!=typeof self?self:{};function S(t,e){return t(e={exports:{}},e.exports),e.exports}var k=S((function(t,e){t.exports={polyfill:function(){var t=window,e=document;if(!("scrollBehavior"in e.documentElement.style)||!0===t.__forceSmoothScrollPolyfill__){var i,n=t.HTMLElement||t.Element,r=468,o={scroll:t.scroll||t.scrollTo,scrollBy:t.scrollBy,elementScroll:n.prototype.scroll||a,scrollIntoView:n.prototype.scrollIntoView},s=t.performance&&t.performance.now?t.performance.now.bind(t.performance):Date.now,l=(i=t.navigator.userAgent,new RegExp(["MSIE ","Trident/","Edge/"].join("|")).test(i)?1:0);t.scroll=t.scrollTo=function(){void 0!==arguments[0]&&(!0!==c(arguments[0])?p.call(t,e.body,void 0!==arguments[0].left?~~arguments[0].left:t.scrollX||t.pageXOffset,void 0!==arguments[0].top?~~arguments[0].top:t.scrollY||t.pageYOffset):o.scroll.call(t,void 0!==arguments[0].left?arguments[0].left:"object"!=typeof arguments[0]?arguments[0]:t.scrollX||t.pageXOffset,void 0!==arguments[0].top?arguments[0].top:void 0!==arguments[1]?arguments[1]:t.scrollY||t.pageYOffset))},t.scrollBy=function(){void 0!==arguments[0]&&(c(arguments[0])?o.scrollBy.call(t,void 0!==arguments[0].left?arguments[0].left:"object"!=typeof arguments[0]?arguments[0]:0,void 0!==arguments[0].top?arguments[0].top:void 0!==arguments[1]?arguments[1]:0):p.call(t,e.body,~~arguments[0].left+(t.scrollX||t.pageXOffset),~~arguments[0].top+(t.scrollY||t.pageYOffset)))},n.prototype.scroll=n.prototype.scrollTo=function(){if(void 0!==arguments[0])if(!0!==c(arguments[0])){var t=arguments[0].left,e=arguments[0].top;p.call(this,this,void 0===t?this.scrollLeft:~~t,void 0===e?this.scrollTop:~~e)}else{if("number"==typeof arguments[0]&&void 0===arguments[1])throw new SyntaxError("Value could not be converted");o.elementScroll.call(this,void 0!==arguments[0].left?~~arguments[0].left:"object"!=typeof arguments[0]?~~arguments[0]:this.scrollLeft,void 0!==arguments[0].top?~~arguments[0].top:void 0!==arguments[1]?~~arguments[1]:this.scrollTop)}},n.prototype.scrollBy=function(){void 0!==arguments[0]&&(!0!==c(arguments[0])?this.scroll({left:~~arguments[0].left+this.scrollLeft,top:~~arguments[0].top+this.scrollTop,behavior:arguments[0].behavior}):o.elementScroll.call(this,void 0!==arguments[0].left?~~arguments[0].left+this.scrollLeft:~~arguments[0]+this.scrollLeft,void 0!==arguments[0].top?~~arguments[0].top+this.scrollTop:~~arguments[1]+this.scrollTop))},n.prototype.scrollIntoView=function(){if(!0!==c(arguments[0])){var i=function(t){for(;t!==e.body&&!1===d(t);)t=t.parentNode||t.host;return t}(this),n=i.getBoundingClientRect(),r=this.getBoundingClientRect();i!==e.body?(p.call(this,i,i.scrollLeft+r.left-n.left,i.scrollTop+r.top-n.top),"fixed"!==t.getComputedStyle(i).position&&t.scrollBy({left:n.left,top:n.top,behavior:"smooth"})):t.scrollBy({left:r.left,top:r.top,behavior:"smooth"})}else o.scrollIntoView.call(this,void 0===arguments[0]||arguments[0])}}function a(t,e){this.scrollLeft=t,this.scrollTop=e}function c(t){if(null===t||"object"!=typeof t||void 0===t.behavior||"auto"===t.behavior||"instant"===t.behavior)return!0;if("object"==typeof t&&"smooth"===t.behavior)return!1;throw new TypeError("behavior member of ScrollOptions "+t.behavior+" is not a valid value for enumeration ScrollBehavior.")}function h(t,e){return"Y"===e?t.clientHeight+l<t.scrollHeight:"X"===e?t.clientWidth+l<t.scrollWidth:void 0}function u(e,i){var n=t.getComputedStyle(e,null)["overflow"+i];return"auto"===n||"scroll"===n}function d(t){var e=h(t,"Y")&&u(t,"Y"),i=h(t,"X")&&u(t,"X");return e||i}function f(e){var i,n,o,l,a=(s()-e.startTime)/r;l=a=a>1?1:a,i=.5*(1-Math.cos(Math.PI*l)),n=e.startX+(e.x-e.startX)*i,o=e.startY+(e.y-e.startY)*i,e.method.call(e.scrollable,n,o),n===e.x&&o===e.y||t.requestAnimationFrame(f.bind(t,e))}function p(i,n,r){var l,c,h,u,d=s();i===e.body?(l=t,c=t.scrollX||t.pageXOffset,h=t.scrollY||t.pageYOffset,u=o.scroll):(l=i,c=i.scrollLeft,h=i.scrollTop,u=a),f({scrollable:l,method:u,startTime:d,startX:c,startY:h,x:n,y:r})}}}})),T=(k.polyfill,function(t){c(i,t);var e=f(i);function i(){var t,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return n(this,i),(t=e.call(this,r)).resetNativeScroll&&(history.scrollRestoration&&(history.scrollRestoration="manual"),window.scrollTo(0,0)),window.addEventListener("scroll",t.checkScroll,!1),void 0===window.smoothscrollPolyfill&&(window.smoothscrollPolyfill=k,window.smoothscrollPolyfill.polyfill()),t}return o(i,[{key:"init",value:function(){this.instance.scroll.y=window.pageYOffset,this.addElements(),this.detectElements(),p(h(i.prototype),"init",this).call(this)}},{key:"checkScroll",value:function(){var t=this;p(h(i.prototype),"checkScroll",this).call(this),this.getDirection&&this.addDirection(),this.getSpeed&&(this.addSpeed(),this.speedTs=Date.now()),this.instance.scroll.y=window.pageYOffset,Object.entries(this.els).length&&(this.hasScrollTicking||(requestAnimationFrame((function(){t.detectElements()})),this.hasScrollTicking=!0))}},{key:"addDirection",value:function(){window.pageYOffset>this.instance.scroll.y?"down"!==this.instance.direction&&(this.instance.direction="down"):window.pageYOffset<this.instance.scroll.y&&"up"!==this.instance.direction&&(this.instance.direction="up")}},{key:"addSpeed",value:function(){window.pageYOffset!=this.instance.scroll.y?this.instance.speed=(window.pageYOffset-this.instance.scroll.y)/Math.max(1,Date.now()-this.speedTs):this.instance.speed=0}},{key:"resize",value:function(){Object.entries(this.els).length&&(this.windowHeight=window.innerHeight,this.updateElements())}},{key:"addElements",value:function(){var t=this;this.els={},this.el.querySelectorAll("[data-"+this.name+"]").forEach((function(e,i){e.getBoundingClientRect();var n,r,o,s=e.dataset[t.name+"Class"]||t.class,l="string"==typeof e.dataset[t.name+"Id"]?e.dataset[t.name+"Id"]:i,a="string"==typeof e.dataset[t.name+"Offset"]?e.dataset[t.name+"Offset"].split(","):t.offset,c=e.dataset[t.name+"Repeat"],h=e.dataset[t.name+"Call"],u=e.dataset[t.name+"Target"],d=(o=void 0!==u?document.querySelector("".concat(u)):e).getBoundingClientRect();n=d.top+t.instance.scroll.y,r=d.left+t.instance.scroll.x;var f=n+o.offsetHeight,p=r+o.offsetWidth;c="false"!=c&&(null!=c||t.repeat);var v=t.getRelativeOffset(a),m={el:e,targetEl:o,id:l,class:s,top:n+=v[0],bottom:f-=v[1],left:r,right:p,offset:a,progress:0,repeat:c,inView:!1,call:h};t.els[l]=m,e.classList.contains(s)&&t.setInView(t.els[l],l)}))}},{key:"updateElements",value:function(){var t=this;Object.entries(this.els).forEach((function(e){var i=v(e,2),n=i[0],r=i[1],o=r.targetEl.getBoundingClientRect().top+t.instance.scroll.y,s=o+r.targetEl.offsetHeight,l=t.getRelativeOffset(r.offset);t.els[n].top=o+l[0],t.els[n].bottom=s-l[1]})),this.hasScrollTicking=!1}},{key:"getRelativeOffset",value:function(t){var e=[0,0];if(t)for(var i=0;i<t.length;i++)"string"==typeof t[i]?t[i].includes("%")?e[i]=parseInt(t[i].replace("%","")*this.windowHeight/100):e[i]=parseInt(t[i]):e[i]=t[i];return e}},{key:"scrollTo",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=parseInt(e.offset)||0,n=!!e.callback&&e.callback;if("string"==typeof t){if("top"===t)t=this.html;else if("bottom"===t)t=this.html.offsetHeight-window.innerHeight;else if(!(t=document.querySelector(t)))return}else if("number"==typeof t)t=parseInt(t);else if(!t||!t.tagName)return void console.warn("`target` parameter is not valid");i="number"!=typeof t?t.getBoundingClientRect().top+i+this.instance.scroll.y:t+i;var r=function(){return parseInt(window.pageYOffset)===parseInt(i)};if(n){if(r())return void n();window.addEventListener("scroll",(function t(){r()&&(window.removeEventListener("scroll",t),n())}))}window.scrollTo({top:i,behavior:0===e.duration?"auto":"smooth"})}},{key:"update",value:function(){this.addElements(),this.detectElements()}},{key:"destroy",value:function(){p(h(i.prototype),"destroy",this).call(this),window.removeEventListener("scroll",this.checkScroll,!1)}}]),i}(w)),E=Object.getOwnPropertySymbols,O=Object.prototype.hasOwnProperty,_=Object.prototype.propertyIsEnumerable;var A=function(){try{if(!Object.assign)return!1;var t=new String("abc");if(t[5]="de","5"===Object.getOwnPropertyNames(t)[0])return!1;for(var e={},i=0;i<10;i++)e["_"+String.fromCharCode(i)]=i;if("0123456789"!==Object.getOwnPropertyNames(e).map((function(t){return e[t]})).join(""))return!1;var n={};return"abcdefghijklmnopqrst".split("").forEach((function(t){n[t]=t})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},n)).join("")}catch(t){return!1}}()?Object.assign:function(t,e){for(var i,n,r=function(t){if(null==t)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(t)}(t),o=1;o<arguments.length;o++){for(var s in i=Object(arguments[o]))O.call(i,s)&&(r[s]=i[s]);if(E){n=E(i);for(var l=0;l<n.length;l++)_.call(i,n[l])&&(r[n[l]]=i[n[l]])}}return r};function C(){}C.prototype={on:function(t,e,i){var n=this.e||(this.e={});return(n[t]||(n[t]=[])).push({fn:e,ctx:i}),this},once:function(t,e,i){var n=this;function r(){n.off(t,r),e.apply(i,arguments)}return r._=e,this.on(t,r,i)},emit:function(t){for(var e=[].slice.call(arguments,1),i=((this.e||(this.e={}))[t]||[]).slice(),n=0,r=i.length;n<r;n++)i[n].fn.apply(i[n].ctx,e);return this},off:function(t,e){var i=this.e||(this.e={}),n=i[t],r=[];if(n&&e)for(var o=0,s=n.length;o<s;o++)n[o].fn!==e&&n[o].fn._!==e&&r.push(n[o]);return r.length?i[t]=r:delete i[t],this}};var M=C,D=S((function(t,e){(function(){(null!==e?e:this).Lethargy=function(){function t(t,e,i,n){this.stability=null!=t?Math.abs(t):8,this.sensitivity=null!=e?1+Math.abs(e):100,this.tolerance=null!=i?1+Math.abs(i):1.1,this.delay=null!=n?n:150,this.lastUpDeltas=function(){var t,e,i;for(i=[],t=1,e=2*this.stability;1<=e?t<=e:t>=e;1<=e?t++:t--)i.push(null);return i}.call(this),this.lastDownDeltas=function(){var t,e,i;for(i=[],t=1,e=2*this.stability;1<=e?t<=e:t>=e;1<=e?t++:t--)i.push(null);return i}.call(this),this.deltasTimestamp=function(){var t,e,i;for(i=[],t=1,e=2*this.stability;1<=e?t<=e:t>=e;1<=e?t++:t--)i.push(null);return i}.call(this)}return t.prototype.check=function(t){var e;return null!=(t=t.originalEvent||t).wheelDelta?e=t.wheelDelta:null!=t.deltaY?e=-40*t.deltaY:null==t.detail&&0!==t.detail||(e=-40*t.detail),this.deltasTimestamp.push(Date.now()),this.deltasTimestamp.shift(),e>0?(this.lastUpDeltas.push(e),this.lastUpDeltas.shift(),this.isInertia(1)):(this.lastDownDeltas.push(e),this.lastDownDeltas.shift(),this.isInertia(-1))},t.prototype.isInertia=function(t){var e,i,n,r,o,s,l;return null===(e=-1===t?this.lastDownDeltas:this.lastUpDeltas)[0]?t:!(this.deltasTimestamp[2*this.stability-2]+this.delay>Date.now()&&e[0]===e[2*this.stability-1])&&(n=e.slice(0,this.stability),i=e.slice(this.stability,2*this.stability),l=n.reduce((function(t,e){return t+e})),o=i.reduce((function(t,e){return t+e})),s=l/n.length,r=o/i.length,Math.abs(s)<Math.abs(r*this.tolerance)&&this.sensitivity<Math.abs(r)&&t)},t.prototype.showLastUpDeltas=function(){return this.lastUpDeltas},t.prototype.showLastDownDeltas=function(){return this.lastDownDeltas},t}()}).call(x)})),P={hasWheelEvent:"onwheel"in document,hasMouseWheelEvent:"onmousewheel"in document,hasTouch:"ontouchstart"in window||window.TouchEvent||window.DocumentTouch&&document instanceof DocumentTouch,hasTouchWin:navigator.msMaxTouchPoints&&navigator.msMaxTouchPoints>1,hasPointer:!!window.navigator.msPointerEnabled,hasKeyDown:"onkeydown"in document,isFirefox:navigator.userAgent.indexOf("Firefox")>-1},L=Object.prototype.toString,R=Object.prototype.hasOwnProperty;function H(t,e){return function(){return t.apply(e,arguments)}}var B=D.Lethargy,Y="virtualscroll",W=F,I=37,j=38,z=39,X=40,q=32;function F(t){!function(t){if(!t)return console.warn("bindAll requires at least one argument.");var e=Array.prototype.slice.call(arguments,1);if(0===e.length)for(var i in t)R.call(t,i)&&"function"==typeof t[i]&&"[object Function]"==L.call(t[i])&&e.push(i);for(var n=0;n<e.length;n++){var r=e[n];t[r]=H(t[r],t)}}(this,"_onWheel","_onMouseWheel","_onTouchStart","_onTouchMove","_onKeyDown"),this.el=window,t&&t.el&&(this.el=t.el,delete t.el),this.options=A({mouseMultiplier:1,touchMultiplier:2,firefoxMultiplier:15,keyStep:120,preventTouch:!1,unpreventTouchClass:"vs-touchmove-allowed",limitInertia:!1,useKeyboard:!0,useTouch:!0},t),this.options.limitInertia&&(this._lethargy=new B),this._emitter=new M,this._event={y:0,x:0,deltaX:0,deltaY:0},this.touchStartX=null,this.touchStartY=null,this.bodyTouchAction=null,void 0!==this.options.passive&&(this.listenerOptions={passive:this.options.passive})}function V(t,e,i){return(1-i)*t+i*e}function N(t){var e={};if(window.getComputedStyle){var i=getComputedStyle(t),n=i.transform||i.webkitTransform||i.mozTransform,r=n.match(/^matrix3d\((.+)\)$/);return r?(e.x=r?parseFloat(r[1].split(", ")[12]):0,e.y=r?parseFloat(r[1].split(", ")[13]):0):(r=n.match(/^matrix\((.+)\)$/),e.x=r?parseFloat(r[1].split(", ")[4]):0,e.y=r?parseFloat(r[1].split(", ")[5]):0),e}}function K(t){for(var e=[];t&&t!==document;t=t.parentNode)e.push(t);return e}F.prototype._notify=function(t){var e=this._event;e.x+=e.deltaX,e.y+=e.deltaY,this._emitter.emit(Y,{x:e.x,y:e.y,deltaX:e.deltaX,deltaY:e.deltaY,originalEvent:t})},F.prototype._onWheel=function(t){var e=this.options;if(!this._lethargy||!1!==this._lethargy.check(t)){var i=this._event;i.deltaX=t.wheelDeltaX||-1*t.deltaX,i.deltaY=t.wheelDeltaY||-1*t.deltaY,P.isFirefox&&1==t.deltaMode&&(i.deltaX*=e.firefoxMultiplier,i.deltaY*=e.firefoxMultiplier),i.deltaX*=e.mouseMultiplier,i.deltaY*=e.mouseMultiplier,this._notify(t)}},F.prototype._onMouseWheel=function(t){if(!this.options.limitInertia||!1!==this._lethargy.check(t)){var e=this._event;e.deltaX=t.wheelDeltaX?t.wheelDeltaX:0,e.deltaY=t.wheelDeltaY?t.wheelDeltaY:t.wheelDelta,this._notify(t)}},F.prototype._onTouchStart=function(t){var e=t.targetTouches?t.targetTouches[0]:t;this.touchStartX=e.pageX,this.touchStartY=e.pageY},F.prototype._onTouchMove=function(t){var e=this.options;e.preventTouch&&!t.target.classList.contains(e.unpreventTouchClass)&&t.preventDefault();var i=this._event,n=t.targetTouches?t.targetTouches[0]:t;i.deltaX=(n.pageX-this.touchStartX)*e.touchMultiplier,i.deltaY=(n.pageY-this.touchStartY)*e.touchMultiplier,this.touchStartX=n.pageX,this.touchStartY=n.pageY,this._notify(t)},F.prototype._onKeyDown=function(t){var e=this._event;e.deltaX=e.deltaY=0;var i=window.innerHeight-40;switch(t.keyCode){case I:case j:e.deltaY=this.options.keyStep;break;case z:case X:e.deltaY=-this.options.keyStep;break;case t.shiftKey:e.deltaY=i;break;case q:e.deltaY=-i;break;default:return}this._notify(t)},F.prototype._bind=function(){P.hasWheelEvent&&this.el.addEventListener("wheel",this._onWheel,this.listenerOptions),P.hasMouseWheelEvent&&this.el.addEventListener("mousewheel",this._onMouseWheel,this.listenerOptions),P.hasTouch&&this.options.useTouch&&(this.el.addEventListener("touchstart",this._onTouchStart,this.listenerOptions),this.el.addEventListener("touchmove",this._onTouchMove,this.listenerOptions)),P.hasPointer&&P.hasTouchWin&&(this.bodyTouchAction=document.body.style.msTouchAction,document.body.style.msTouchAction="none",this.el.addEventListener("MSPointerDown",this._onTouchStart,!0),this.el.addEventListener("MSPointerMove",this._onTouchMove,!0)),P.hasKeyDown&&this.options.useKeyboard&&document.addEventListener("keydown",this._onKeyDown)},F.prototype._unbind=function(){P.hasWheelEvent&&this.el.removeEventListener("wheel",this._onWheel),P.hasMouseWheelEvent&&this.el.removeEventListener("mousewheel",this._onMouseWheel),P.hasTouch&&(this.el.removeEventListener("touchstart",this._onTouchStart),this.el.removeEventListener("touchmove",this._onTouchMove)),P.hasPointer&&P.hasTouchWin&&(document.body.style.msTouchAction=this.bodyTouchAction,this.el.removeEventListener("MSPointerDown",this._onTouchStart,!0),this.el.removeEventListener("MSPointerMove",this._onTouchMove,!0)),P.hasKeyDown&&this.options.useKeyboard&&document.removeEventListener("keydown",this._onKeyDown)},F.prototype.on=function(t,e){this._emitter.on(Y,t,e);var i=this._emitter.e;i&&i[Y]&&1===i[Y].length&&this._bind()},F.prototype.off=function(t,e){this._emitter.off(Y,t,e);var i=this._emitter.e;(!i[Y]||i[Y].length<=0)&&this._unbind()},F.prototype.reset=function(){var t=this._event;t.x=0,t.y=0},F.prototype.destroy=function(){this._emitter.off(),this._unbind()};var U=.1,G="function"==typeof Float32Array;function Z(t,e){return 1-3*e+3*t}function $(t,e){return 3*e-6*t}function J(t){return 3*t}function Q(t,e,i){return((Z(e,i)*t+$(e,i))*t+J(e))*t}function tt(t,e,i){return 3*Z(e,i)*t*t+2*$(e,i)*t+J(e)}function et(t){return t}var it=function(t,e,i,n){if(!(0<=t&&t<=1&&0<=i&&i<=1))throw new Error("bezier x values must be in [0, 1] range");if(t===e&&i===n)return et;for(var r=G?new Float32Array(11):new Array(11),o=0;o<11;++o)r[o]=Q(o*U,t,i);function s(e){for(var n=0,o=1;10!==o&&r[o]<=e;++o)n+=U;--o;var s=n+(e-r[o])/(r[o+1]-r[o])*U,l=tt(s,t,i);return l>=.001?function(t,e,i,n){for(var r=0;r<4;++r){var o=tt(e,i,n);if(0===o)return e;e-=(Q(e,i,n)-t)/o}return e}(e,s,t,i):0===l?s:function(t,e,i,n,r){var o,s,l=0;do{(o=Q(s=e+(i-e)/2,n,r)-t)>0?i=s:e=s}while(Math.abs(o)>1e-7&&++l<10);return s}(e,n,n+U,t,i)}return function(t){return 0===t?0:1===t?1:Q(s(t),e,n)}},nt=38,rt=40,ot=32,st=9,lt=33,at=34,ct=36,ht=35,ut=function(t){c(i,t);var e=f(i);function i(){var t,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return n(this,i),history.scrollRestoration&&(history.scrollRestoration="manual"),window.scrollTo(0,0),(t=e.call(this,r)).inertia&&(t.lerp=.1*t.inertia),t.isScrolling=!1,t.isDraggingScrollbar=!1,t.isTicking=!1,t.hasScrollTicking=!1,t.parallaxElements={},t.stop=!1,t.scrollbarContainer=r.scrollbarContainer,t.checkKey=t.checkKey.bind(d(t)),window.addEventListener("keydown",t.checkKey,!1),t}return o(i,[{key:"init",value:function(){var t=this;this.html.classList.add(this.smoothClass),this.html.setAttribute("data-".concat(this.name,"-direction"),this.direction),this.instance=a({delta:{x:this.initPosition.x,y:this.initPosition.y},scroll:{x:this.initPosition.x,y:this.initPosition.y}},this.instance),this.vs=new W({el:this.scrollFromAnywhere?document:this.el,mouseMultiplier:navigator.platform.indexOf("Win")>-1?1:.4,firefoxMultiplier:this.firefoxMultiplier,touchMultiplier:this.touchMultiplier,useKeyboard:!1,passive:!0}),this.vs.on((function(e){t.stop||t.isDraggingScrollbar||requestAnimationFrame((function(){t.updateDelta(e),t.isScrolling||t.startScrolling()}))})),this.setScrollLimit(),this.initScrollBar(),this.addSections(),this.addElements(),this.checkScroll(!0),this.transformElements(!0,!0),p(h(i.prototype),"init",this).call(this)}},{key:"setScrollLimit",value:function(){if(this.instance.limit.y=this.el.offsetHeight-this.windowHeight,"horizontal"===this.direction){for(var t=0,e=this.el.children,i=0;i<e.length;i++)t+=e[i].offsetWidth;this.instance.limit.x=t-this.windowWidth}}},{key:"startScrolling",value:function(){this.startScrollTs=Date.now(),this.isScrolling=!0,this.checkScroll(),this.html.classList.add(this.scrollingClass)}},{key:"stopScrolling",value:function(){cancelAnimationFrame(this.checkScrollRaf),this.startScrollTs=void 0,this.scrollToRaf&&(cancelAnimationFrame(this.scrollToRaf),this.scrollToRaf=null),this.isScrolling=!1,this.instance.scroll.y=Math.round(this.instance.scroll.y),this.html.classList.remove(this.scrollingClass)}},{key:"checkKey",value:function(t){var e=this;if(this.stop)t.keyCode==st&&requestAnimationFrame((function(){e.html.scrollTop=0,document.body.scrollTop=0,e.html.scrollLeft=0,document.body.scrollLeft=0}));else{switch(t.keyCode){case st:requestAnimationFrame((function(){e.html.scrollTop=0,document.body.scrollTop=0,e.html.scrollLeft=0,document.body.scrollLeft=0,e.scrollTo(document.activeElement,{offset:-window.innerHeight/2})}));break;case nt:this.isActiveElementScrollSensitive()&&(this.instance.delta[this.directionAxis]-=240);break;case rt:this.isActiveElementScrollSensitive()&&(this.instance.delta[this.directionAxis]+=240);break;case lt:this.instance.delta[this.directionAxis]-=window.innerHeight;break;case at:this.instance.delta[this.directionAxis]+=window.innerHeight;break;case ct:this.instance.delta[this.directionAxis]-=this.instance.limit[this.directionAxis];break;case ht:this.instance.delta[this.directionAxis]+=this.instance.limit[this.directionAxis];break;case ot:this.isActiveElementScrollSensitive()&&(t.shiftKey?this.instance.delta[this.directionAxis]-=window.innerHeight:this.instance.delta[this.directionAxis]+=window.innerHeight);break;default:return}this.instance.delta[this.directionAxis]<0&&(this.instance.delta[this.directionAxis]=0),this.instance.delta[this.directionAxis]>this.instance.limit[this.directionAxis]&&(this.instance.delta[this.directionAxis]=this.instance.limit[this.directionAxis]),this.stopScrolling(),this.isScrolling=!0,this.checkScroll(),this.html.classList.add(this.scrollingClass)}}},{key:"isActiveElementScrollSensitive",value:function(){return!(document.activeElement instanceof HTMLInputElement||document.activeElement instanceof HTMLTextAreaElement||document.activeElement instanceof HTMLButtonElement||document.activeElement instanceof HTMLSelectElement)}},{key:"checkScroll",value:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(e||this.isScrolling||this.isDraggingScrollbar){this.hasScrollTicking||(this.checkScrollRaf=requestAnimationFrame((function(){return t.checkScroll()})),this.hasScrollTicking=!0),this.updateScroll();var n=Math.abs(this.instance.delta[this.directionAxis]-this.instance.scroll[this.directionAxis]),r=Date.now()-this.startScrollTs;if(!this.animatingScroll&&r>100&&(n<.5&&0!=this.instance.delta[this.directionAxis]||n<.5&&0==this.instance.delta[this.directionAxis])&&this.stopScrolling(),Object.entries(this.sections).forEach((function(i){var n=v(i,2),r=(n[0],n[1]);r.persistent||t.instance.scroll[t.directionAxis]>r.offset[t.directionAxis]&&t.instance.scroll[t.directionAxis]<r.limit[t.directionAxis]?("horizontal"===t.direction?t.transform(r.el,-t.instance.scroll[t.directionAxis],0):t.transform(r.el,0,-t.instance.scroll[t.directionAxis]),r.inView||(r.inView=!0,r.el.style.opacity=1,r.el.style.pointerEvents="all",r.el.setAttribute("data-".concat(t.name,"-section-inview"),""))):((r.inView||e)&&(r.inView=!1,r.el.style.opacity=0,r.el.style.pointerEvents="none",r.el.removeAttribute("data-".concat(t.name,"-section-inview"))),t.transform(r.el,0,0))})),this.getDirection&&this.addDirection(),this.getSpeed&&(this.addSpeed(),this.speedTs=Date.now()),this.detectElements(),this.transformElements(),this.hasScrollbar){var o=this.instance.scroll[this.directionAxis]/this.instance.limit[this.directionAxis]*this.scrollBarLimit[this.directionAxis];"horizontal"===this.direction?this.transform(this.scrollbarThumb,o,0):this.transform(this.scrollbarThumb,0,o)}p(h(i.prototype),"checkScroll",this).call(this),this.hasScrollTicking=!1}}},{key:"resize",value:function(){this.windowHeight=window.innerHeight,this.windowWidth=window.innerWidth,this.checkContext(),this.windowMiddle={x:this.windowWidth/2,y:this.windowHeight/2},this.update()}},{key:"updateDelta",value:function(t){var e,i=this[this.context]&&this[this.context].gestureDirection?this[this.context].gestureDirection:this.gestureDirection;e="both"===i?t.deltaX+t.deltaY:"vertical"===i?t.deltaY:"horizontal"===i?t.deltaX:t.deltaY,this.instance.delta[this.directionAxis]-=e*this.multiplier,this.instance.delta[this.directionAxis]<0&&(this.instance.delta[this.directionAxis]=0),this.instance.delta[this.directionAxis]>this.instance.limit[this.directionAxis]&&(this.instance.delta[this.directionAxis]=this.instance.limit[this.directionAxis])}},{key:"updateScroll",value:function(t){this.isScrolling||this.isDraggingScrollbar?this.instance.scroll[this.directionAxis]=V(this.instance.scroll[this.directionAxis],this.instance.delta[this.directionAxis],this.lerp):this.instance.scroll[this.directionAxis]>this.instance.limit[this.directionAxis]?this.setScroll(this.instance.scroll[this.directionAxis],this.instance.limit[this.directionAxis]):this.instance.scroll.y<0?this.setScroll(this.instance.scroll[this.directionAxis],0):this.setScroll(this.instance.scroll[this.directionAxis],this.instance.delta[this.directionAxis])}},{key:"addDirection",value:function(){this.instance.delta.y>this.instance.scroll.y?"down"!==this.instance.direction&&(this.instance.direction="down"):this.instance.delta.y<this.instance.scroll.y&&"up"!==this.instance.direction&&(this.instance.direction="up"),this.instance.delta.x>this.instance.scroll.x?"right"!==this.instance.direction&&(this.instance.direction="right"):this.instance.delta.x<this.instance.scroll.x&&"left"!==this.instance.direction&&(this.instance.direction="left")}},{key:"addSpeed",value:function(){this.instance.delta[this.directionAxis]!=this.instance.scroll[this.directionAxis]?this.instance.speed=(this.instance.delta[this.directionAxis]-this.instance.scroll[this.directionAxis])/Math.max(1,Date.now()-this.speedTs):this.instance.speed=0}},{key:"initScrollBar",value:function(){if(this.scrollbar=document.createElement("span"),this.scrollbarThumb=document.createElement("span"),this.scrollbar.classList.add("".concat(this.scrollbarClass)),this.scrollbarThumb.classList.add("".concat(this.scrollbarClass,"_thumb")),this.scrollbar.append(this.scrollbarThumb),this.scrollbarContainer?this.scrollbarContainer.append(this.scrollbar):document.body.append(this.scrollbar),this.getScrollBar=this.getScrollBar.bind(this),this.releaseScrollBar=this.releaseScrollBar.bind(this),this.moveScrollBar=this.moveScrollBar.bind(this),this.scrollbarThumb.addEventListener("mousedown",this.getScrollBar),window.addEventListener("mouseup",this.releaseScrollBar),window.addEventListener("mousemove",this.moveScrollBar),this.hasScrollbar=!1,"horizontal"==this.direction){if(this.instance.limit.x+this.windowWidth<=this.windowWidth)return}else if(this.instance.limit.y+this.windowHeight<=this.windowHeight)return;this.hasScrollbar=!0,this.scrollbarBCR=this.scrollbar.getBoundingClientRect(),this.scrollbarHeight=this.scrollbarBCR.height,this.scrollbarWidth=this.scrollbarBCR.width,"horizontal"===this.direction?this.scrollbarThumb.style.width="".concat(this.scrollbarWidth*this.scrollbarWidth/(this.instance.limit.x+this.scrollbarWidth),"px"):this.scrollbarThumb.style.height="".concat(this.scrollbarHeight*this.scrollbarHeight/(this.instance.limit.y+this.scrollbarHeight),"px"),this.scrollbarThumbBCR=this.scrollbarThumb.getBoundingClientRect(),this.scrollBarLimit={x:this.scrollbarWidth-this.scrollbarThumbBCR.width,y:this.scrollbarHeight-this.scrollbarThumbBCR.height}}},{key:"reinitScrollBar",value:function(){if(this.hasScrollbar=!1,"horizontal"==this.direction){if(this.instance.limit.x+this.windowWidth<=this.windowWidth)return}else if(this.instance.limit.y+this.windowHeight<=this.windowHeight)return;this.hasScrollbar=!0,this.scrollbarBCR=this.scrollbar.getBoundingClientRect(),this.scrollbarHeight=this.scrollbarBCR.height,this.scrollbarWidth=this.scrollbarBCR.width,"horizontal"===this.direction?this.scrollbarThumb.style.width="".concat(this.scrollbarWidth*this.scrollbarWidth/(this.instance.limit.x+this.scrollbarWidth),"px"):this.scrollbarThumb.style.height="".concat(this.scrollbarHeight*this.scrollbarHeight/(this.instance.limit.y+this.scrollbarHeight),"px"),this.scrollbarThumbBCR=this.scrollbarThumb.getBoundingClientRect(),this.scrollBarLimit={x:this.scrollbarWidth-this.scrollbarThumbBCR.width,y:this.scrollbarHeight-this.scrollbarThumbBCR.height}}},{key:"destroyScrollBar",value:function(){this.scrollbarThumb.removeEventListener("mousedown",this.getScrollBar),window.removeEventListener("mouseup",this.releaseScrollBar),window.removeEventListener("mousemove",this.moveScrollBar),this.scrollbar.remove()}},{key:"getScrollBar",value:function(t){this.isDraggingScrollbar=!0,this.checkScroll(),this.html.classList.remove(this.scrollingClass),this.html.classList.add(this.draggingClass)}},{key:"releaseScrollBar",value:function(t){this.isDraggingScrollbar=!1,this.isScrolling&&this.html.classList.add(this.scrollingClass),this.html.classList.remove(this.draggingClass)}},{key:"moveScrollBar",value:function(t){var e=this;this.isDraggingScrollbar&&requestAnimationFrame((function(){var i=100*(t.clientX-e.scrollbarBCR.left)/e.scrollbarWidth*e.instance.limit.x/100,n=100*(t.clientY-e.scrollbarBCR.top)/e.scrollbarHeight*e.instance.limit.y/100;n>0&&n<e.instance.limit.y&&(e.instance.delta.y=n),i>0&&i<e.instance.limit.x&&(e.instance.delta.x=i)}))}},{key:"addElements",value:function(){var t=this;this.els={},this.parallaxElements={},this.el.querySelectorAll("[data-".concat(this.name,"]")).forEach((function(e,i){var n,r,o,s=K(e),l=Object.entries(t.sections).map((function(t){var e=v(t,2);e[0];return e[1]})).find((function(t){return s.includes(t.el)})),a=e.dataset[t.name+"Class"]||t.class,c="string"==typeof e.dataset[t.name+"Id"]?e.dataset[t.name+"Id"]:"el"+i,h=e.dataset[t.name+"Repeat"],u=e.dataset[t.name+"Call"],d=e.dataset[t.name+"Position"],f=e.dataset[t.name+"Delay"],p=e.dataset[t.name+"Direction"],m="string"==typeof e.dataset[t.name+"Sticky"],g=!!e.dataset[t.name+"Speed"]&&parseFloat(e.dataset[t.name+"Speed"])/10,y="string"==typeof e.dataset[t.name+"Offset"]?e.dataset[t.name+"Offset"].split(","):t.offset,b=e.dataset[t.name+"Target"],w=(o=void 0!==b?document.querySelector("".concat(b)):e).getBoundingClientRect();null===l||l.inView?(n=w.top+t.instance.scroll.y-N(o).y,r=w.left+t.instance.scroll.x-N(o).x):(n=w.top-N(l.el).y-N(o).y,r=w.left-N(l.el).x-N(o).x);var x=n+o.offsetHeight,S=r+o.offsetWidth,k={x:(S-r)/2+r,y:(x-n)/2+n};if(m){var T=e.getBoundingClientRect(),E=T.top,O=T.left,_={x:O-r,y:E-n};n+=window.innerHeight,r+=window.innerWidth,x=E+o.offsetHeight-e.offsetHeight-_[t.directionAxis],k={x:((S=O+o.offsetWidth-e.offsetWidth-_[t.directionAxis])-r)/2+r,y:(x-n)/2+n}}h="false"!=h&&(null!=h||t.repeat);var A=[0,0];if(y)if("horizontal"===t.direction){for(var C=0;C<y.length;C++)"string"==typeof y[C]?y[C].includes("%")?A[C]=parseInt(y[C].replace("%","")*t.windowWidth/100):A[C]=parseInt(y[C]):A[C]=y[C];r+=A[0],S-=A[1]}else{for(C=0;C<y.length;C++)"string"==typeof y[C]?y[C].includes("%")?A[C]=parseInt(y[C].replace("%","")*t.windowHeight/100):A[C]=parseInt(y[C]):A[C]=y[C];n+=A[0],x-=A[1]}var M={el:e,id:c,class:a,section:l,top:n,middle:k,bottom:x,left:r,right:S,offset:y,progress:0,repeat:h,inView:!1,call:u,speed:g,delay:f,position:d,target:o,direction:p,sticky:m};t.els[c]=M,e.classList.contains(a)&&t.setInView(t.els[c],c),(!1!==g||m)&&(t.parallaxElements[c]=M)}))}},{key:"addSections",value:function(){var t=this;this.sections={};var e=this.el.querySelectorAll("[data-".concat(this.name,"-section]"));0===e.length&&(e=[this.el]),e.forEach((function(e,i){var n="string"==typeof e.dataset[t.name+"Id"]?e.dataset[t.name+"Id"]:"section"+i,r=e.getBoundingClientRect(),o={x:r.left-1.5*window.innerWidth-N(e).x,y:r.top-1.5*window.innerHeight-N(e).y},s={x:o.x+r.width+2*window.innerWidth,y:o.y+r.height+2*window.innerHeight},l="string"==typeof e.dataset[t.name+"Persistent"];e.setAttribute("data-scroll-section-id",n);var a={el:e,offset:o,limit:s,inView:!1,persistent:l,id:n};t.sections[n]=a}))}},{key:"transform",value:function(t,e,i,n){var r;if(n){var o=N(t),s=V(o.x,e,n),l=V(o.y,i,n);r="matrix3d(1,0,0.00,0,0.00,1,0.00,0,0,0,1,0,".concat(s,",").concat(l,",0,1)")}else r="matrix3d(1,0,0.00,0,0.00,1,0.00,0,0,0,1,0,".concat(e,",").concat(i,",0,1)");t.style.webkitTransform=r,t.style.msTransform=r,t.style.transform=r}},{key:"transformElements",value:function(t){var e=this,i=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=this.instance.scroll.x+this.windowWidth,r=this.instance.scroll.y+this.windowHeight,o={x:this.instance.scroll.x+this.windowMiddle.x,y:this.instance.scroll.y+this.windowMiddle.y};Object.entries(this.parallaxElements).forEach((function(s){var l=v(s,2),a=(l[0],l[1]),c=!1;if(t&&(c=0),a.inView||i)switch(a.position){case"top":case"left":c=e.instance.scroll[e.directionAxis]*-a.speed;break;case"elementTop":c=(r-a.top)*-a.speed;break;case"bottom":c=(e.instance.limit[e.directionAxis]-r+e.windowHeight)*a.speed;break;case"elementLeft":c=(n-a.left)*-a.speed;break;case"right":c=(e.instance.limit[e.directionAxis]-n+e.windowHeight)*a.speed;break;default:c=(o[e.directionAxis]-a.middle[e.directionAxis])*-a.speed}a.sticky&&(c=a.inView?"horizontal"===e.direction?e.instance.scroll.x-a.left+window.innerWidth:e.instance.scroll.y-a.top+window.innerHeight:"horizontal"===e.direction?e.instance.scroll.x<a.left-window.innerWidth&&e.instance.scroll.x<a.left-window.innerWidth/2?0:e.instance.scroll.x>a.right&&e.instance.scroll.x>a.right+100&&a.right-a.left+window.innerWidth:e.instance.scroll.y<a.top-window.innerHeight&&e.instance.scroll.y<a.top-window.innerHeight/2?0:e.instance.scroll.y>a.bottom&&e.instance.scroll.y>a.bottom+100&&a.bottom-a.top+window.innerHeight),!1!==c&&("horizontal"===a.direction||"horizontal"===e.direction&&"vertical"!==a.direction?e.transform(a.el,c,0,!t&&a.delay):e.transform(a.el,0,c,!t&&a.delay))}))}},{key:"scrollTo",value:function(t){var e=this,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=parseInt(i.offset)||0,r=isNaN(parseInt(i.duration))?1e3:parseInt(i.duration),o=i.easing||[.25,0,.35,1],s=!!i.disableLerp,l=!!i.callback&&i.callback;if(o=it.apply(void 0,m(o)),"string"==typeof t){if("top"===t)t=0;else if("bottom"===t)t=this.instance.limit.y;else if("left"===t)t=0;else if("right"===t)t=this.instance.limit.x;else if(!(t=document.querySelector(t)))return}else if("number"==typeof t)t=parseInt(t);else if(!t||!t.tagName)return void console.warn("`target` parameter is not valid");if("number"!=typeof t){if(!K(t).includes(this.el))return;var a=t.getBoundingClientRect(),c=a.top,h=a.left,u=K(t).find((function(t){return Object.entries(e.sections).map((function(t){var e=v(t,2);e[0];return e[1]})).find((function(e){return e.el==t}))})),d=0;d=u?N(u)[this.directionAxis]:-this.instance.scroll[this.directionAxis],n="horizontal"===this.direction?h+n-d:c+n-d}else n=t+n;var f=parseFloat(this.instance.delta[this.directionAxis]),p=Math.max(0,Math.min(n,this.instance.limit[this.directionAxis]))-f,g=function(t){s?"horizontal"===e.direction?e.setScroll(f+p*t,e.instance.delta.y):e.setScroll(e.instance.delta.x,f+p*t):e.instance.delta[e.directionAxis]=f+p*t};this.animatingScroll=!0,this.stopScrolling(),this.startScrolling();var y=Date.now();!function t(){var i=(Date.now()-y)/r;i>1?(g(1),e.animatingScroll=!1,0==r&&e.update(),l&&l()):(e.scrollToRaf=requestAnimationFrame(t),g(o(i)))}()}},{key:"update",value:function(){this.setScrollLimit(),this.addSections(),this.addElements(),this.detectElements(),this.updateScroll(),this.transformElements(!0),this.reinitScrollBar(),this.checkScroll(!0)}},{key:"startScroll",value:function(){this.stop=!1}},{key:"stopScroll",value:function(){this.stop=!0}},{key:"setScroll",value:function(t,e){this.instance=a(a({},this.instance),{},{scroll:{x:t,y:e},delta:{x:t,y:e},speed:0})}},{key:"destroy",value:function(){p(h(i.prototype),"destroy",this).call(this),this.stopScrolling(),this.html.classList.remove(this.smoothClass),this.vs.destroy(),this.destroyScrollBar(),window.removeEventListener("keydown",this.checkKey,!1)}}]),i}(w);const dt=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};n(this,t),this.options=e,Object.assign(this,b,e),this.smartphone=b.smartphone,e.smartphone&&Object.assign(this.smartphone,e.smartphone),this.tablet=b.tablet,e.tablet&&Object.assign(this.tablet,e.tablet),this.smooth||"horizontal"!=this.direction||console.warn("🚨 `smooth:false` & `horizontal` direction are not yet compatible"),this.tablet.smooth||"horizontal"!=this.tablet.direction||console.warn("🚨 `smooth:false` & `horizontal` direction are not yet compatible (tablet)"),this.smartphone.smooth||"horizontal"!=this.smartphone.direction||console.warn("🚨 `smooth:false` & `horizontal` direction are not yet compatible (smartphone)"),this.init()}return o(t,[{key:"init",value:function(){if(this.options.isMobile=/Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||"MacIntel"===navigator.platform&&navigator.maxTouchPoints>1||window.innerWidth<this.tablet.breakpoint,this.options.isTablet=this.options.isMobile&&window.innerWidth>=this.tablet.breakpoint,this.smooth&&!this.options.isMobile||this.tablet.smooth&&this.options.isTablet||this.smartphone.smooth&&this.options.isMobile&&!this.options.isTablet?this.scroll=new ut(this.options):this.scroll=new T(this.options),this.scroll.init(),window.location.hash){var t=window.location.hash.slice(1,window.location.hash.length),e=document.getElementById(t);e&&this.scroll.scrollTo(e)}}},{key:"update",value:function(){this.scroll.update()}},{key:"start",value:function(){this.scroll.startScroll()}},{key:"stop",value:function(){this.scroll.stopScroll()}},{key:"scrollTo",value:function(t,e){this.scroll.scrollTo(t,e)}},{key:"setScroll",value:function(t,e){this.scroll.setScroll(t,e)}},{key:"on",value:function(t,e){this.scroll.setEvents(t,e)}},{key:"off",value:function(t,e){this.scroll.unsetEvents(t,e)}},{key:"destroy",value:function(){this.scroll.destroy()}}]),t}()}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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M3hDLElBQUssV0FDTDBCLE1BQU8sU0FBa0JwQyxFQUFRMjdCLEdBQy9CbnlCLEtBQUtnWCxPQUFPeGIsU0FBU2hGLEVBQVEyN0IsRUFDL0IsR0FDQyxDQUNEajdCLElBQUssWUFDTDBCLE1BQU8sU0FBbUIrTCxFQUFHQyxHQUMzQjVFLEtBQUtnWCxPQUFPMnVCLFVBQVVoaEMsRUFBR0MsRUFDM0IsR0FDQyxDQUNEMU4sSUFBSyxLQUNMMEIsTUFBTyxTQUFZa0ksRUFBT3pILEdBQ3hCMkcsS0FBS2dYLE9BQU84eEIsVUFBVWhvQyxFQUFPekgsRUFDL0IsR0FDQyxDQUNEbkMsSUFBSyxNQUNMMEIsTUFBTyxTQUFha0ksRUFBT3pILEdBQ3pCMkcsS0FBS2dYLE9BQU8reEIsWUFBWWpvQyxFQUFPekgsRUFDakMsR0FDQyxDQUNEbkMsSUFBSyxVQUNMMEIsTUFBTyxXQUNMb0gsS0FBS2dYLE9BQU82cEIsU0FDZCxLQUdLNEgsQ0FDVCxDQXBGMEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWJwYWNrLXNldHVwLy4vbm9kZV9tb2R1bGVzL2dzYXAvT2JzZXJ2ZXIuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay1zZXR1cC8uL25vZGVfbW9kdWxlcy9nc2FwL1Njcm9sbFRyaWdnZXIuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay1zZXR1cC8uL25vZGVfbW9kdWxlcy9sb2NvbW90aXZlLXNjcm9sbC9kaXN0L2xvY29tb3RpdmUtc2Nyb2xsLmVzbS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbi8qIVxuICogT2JzZXJ2ZXIgMy4xMi41XG4gKiBodHRwczovL2dzYXAuY29tXG4gKlxuICogQGxpY2Vuc2UgQ29weXJpZ2h0IDIwMDgtMjAyNCwgR3JlZW5Tb2NrLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogU3ViamVjdCB0byB0aGUgdGVybXMgYXQgaHR0cHM6Ly9nc2FwLmNvbS9zdGFuZGFyZC1saWNlbnNlIG9yIGZvclxuICogQ2x1YiBHU0FQIG1lbWJlcnMsIHRoZSBhZ3JlZW1lbnQgaXNzdWVkIHdpdGggdGhhdCBtZW1iZXJzaGlwLlxuICogQGF1dGhvcjogSmFjayBEb3lsZSwgamFja0BncmVlbnNvY2suY29tXG4qL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xudmFyIGdzYXAsXG4gICAgX2NvcmVJbml0dGVkLFxuICAgIF9jbGFtcCxcbiAgICBfd2luLFxuICAgIF9kb2MsXG4gICAgX2RvY0VsLFxuICAgIF9ib2R5LFxuICAgIF9pc1RvdWNoLFxuICAgIF9wb2ludGVyVHlwZSxcbiAgICBTY3JvbGxUcmlnZ2VyLFxuICAgIF9yb290LFxuICAgIF9ub3JtYWxpemVyLFxuICAgIF9ldmVudFR5cGVzLFxuICAgIF9jb250ZXh0LFxuICAgIF9nZXRHU0FQID0gZnVuY3Rpb24gX2dldEdTQVAoKSB7XG4gIHJldHVybiBnc2FwIHx8IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgKGdzYXAgPSB3aW5kb3cuZ3NhcCkgJiYgZ3NhcC5yZWdpc3RlclBsdWdpbiAmJiBnc2FwO1xufSxcbiAgICBfc3RhcnR1cCA9IDEsXG4gICAgX29ic2VydmVycyA9IFtdLFxuICAgIF9zY3JvbGxlcnMgPSBbXSxcbiAgICBfcHJveGllcyA9IFtdLFxuICAgIF9nZXRUaW1lID0gRGF0ZS5ub3csXG4gICAgX2JyaWRnZSA9IGZ1bmN0aW9uIF9icmlkZ2UobmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlO1xufSxcbiAgICBfaW50ZWdyYXRlID0gZnVuY3Rpb24gX2ludGVncmF0ZSgpIHtcbiAgdmFyIGNvcmUgPSBTY3JvbGxUcmlnZ2VyLmNvcmUsXG4gICAgICBkYXRhID0gY29yZS5icmlkZ2UgfHwge30sXG4gICAgICBzY3JvbGxlcnMgPSBjb3JlLl9zY3JvbGxlcnMsXG4gICAgICBwcm94aWVzID0gY29yZS5fcHJveGllcztcbiAgc2Nyb2xsZXJzLnB1c2guYXBwbHkoc2Nyb2xsZXJzLCBfc2Nyb2xsZXJzKTtcbiAgcHJveGllcy5wdXNoLmFwcGx5KHByb3hpZXMsIF9wcm94aWVzKTtcbiAgX3Njcm9sbGVycyA9IHNjcm9sbGVycztcbiAgX3Byb3hpZXMgPSBwcm94aWVzO1xuXG4gIF9icmlkZ2UgPSBmdW5jdGlvbiBfYnJpZGdlKG5hbWUsIHZhbHVlKSB7XG4gICAgcmV0dXJuIGRhdGFbbmFtZV0odmFsdWUpO1xuICB9O1xufSxcbiAgICBfZ2V0UHJveHlQcm9wID0gZnVuY3Rpb24gX2dldFByb3h5UHJvcChlbGVtZW50LCBwcm9wZXJ0eSkge1xuICByZXR1cm4gfl9wcm94aWVzLmluZGV4T2YoZWxlbWVudCkgJiYgX3Byb3hpZXNbX3Byb3hpZXMuaW5kZXhPZihlbGVtZW50KSArIDFdW3Byb3BlcnR5XTtcbn0sXG4gICAgX2lzVmlld3BvcnQgPSBmdW5jdGlvbiBfaXNWaWV3cG9ydChlbCkge1xuICByZXR1cm4gISF+X3Jvb3QuaW5kZXhPZihlbCk7XG59LFxuICAgIF9hZGRMaXN0ZW5lciA9IGZ1bmN0aW9uIF9hZGRMaXN0ZW5lcihlbGVtZW50LCB0eXBlLCBmdW5jLCBwYXNzaXZlLCBjYXB0dXJlKSB7XG4gIHJldHVybiBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgZnVuYywge1xuICAgIHBhc3NpdmU6IHBhc3NpdmUgIT09IGZhbHNlLFxuICAgIGNhcHR1cmU6ICEhY2FwdHVyZVxuICB9KTtcbn0sXG4gICAgX3JlbW92ZUxpc3RlbmVyID0gZnVuY3Rpb24gX3JlbW92ZUxpc3RlbmVyKGVsZW1lbnQsIHR5cGUsIGZ1bmMsIGNhcHR1cmUpIHtcbiAgcmV0dXJuIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBmdW5jLCAhIWNhcHR1cmUpO1xufSxcbiAgICBfc2Nyb2xsTGVmdCA9IFwic2Nyb2xsTGVmdFwiLFxuICAgIF9zY3JvbGxUb3AgPSBcInNjcm9sbFRvcFwiLFxuICAgIF9vblNjcm9sbCA9IGZ1bmN0aW9uIF9vblNjcm9sbCgpIHtcbiAgcmV0dXJuIF9ub3JtYWxpemVyICYmIF9ub3JtYWxpemVyLmlzUHJlc3NlZCB8fCBfc2Nyb2xsZXJzLmNhY2hlKys7XG59LFxuICAgIF9zY3JvbGxDYWNoZUZ1bmMgPSBmdW5jdGlvbiBfc2Nyb2xsQ2FjaGVGdW5jKGYsIGRvTm90Q2FjaGUpIHtcbiAgdmFyIGNhY2hpbmdGdW5jID0gZnVuY3Rpb24gY2FjaGluZ0Z1bmModmFsdWUpIHtcbiAgICAvLyBzaW5jZSByZWFkaW5nIHRoZSBzY3JvbGxUb3Avc2Nyb2xsTGVmdC9wYWdlT2Zmc2V0WS9wYWdlT2Zmc2V0WCBjYW4gdHJpZ2dlciBhIGxheW91dCwgdGhpcyBmdW5jdGlvbiBhbGxvd3MgdXMgdG8gY2FjaGUgdGhlIHZhbHVlIHNvIGl0IG9ubHkgZ2V0cyByZWFkIGZyZXNoIGFmdGVyIGEgXCJzY3JvbGxcIiBldmVudCBmaXJlcyAob3Igd2hpbGUgd2UncmUgcmVmcmVzaGluZyBiZWNhdXNlIHRoYXQgY2FuIGxlbmd0aGVuIHRoZSBwYWdlIGFuZCBhbHRlciB0aGUgc2Nyb2xsIHBvc2l0aW9uKS4gd2hlbiBcInNvZnRcIiBpcyB0cnVlLCB0aGF0IG1lYW5zIGRvbid0IGFjdHVhbGx5IHNldCB0aGUgc2Nyb2xsLCBidXQgY2FjaGUgdGhlIG5ldyB2YWx1ZSBpbnN0ZWFkICh1c2VmdWwgaW4gU2Nyb2xsU21vb3RoZXIpXG4gICAgaWYgKHZhbHVlIHx8IHZhbHVlID09PSAwKSB7XG4gICAgICBfc3RhcnR1cCAmJiAoX3dpbi5oaXN0b3J5LnNjcm9sbFJlc3RvcmF0aW9uID0gXCJtYW51YWxcIik7IC8vIG90aGVyd2lzZSB0aGUgbmV3IHBvc2l0aW9uIHdpbGwgZ2V0IG92ZXJ3cml0dGVuIGJ5IHRoZSBicm93c2VyIG9ubG9hZC5cblxuICAgICAgdmFyIGlzTm9ybWFsaXppbmcgPSBfbm9ybWFsaXplciAmJiBfbm9ybWFsaXplci5pc1ByZXNzZWQ7XG4gICAgICB2YWx1ZSA9IGNhY2hpbmdGdW5jLnYgPSBNYXRoLnJvdW5kKHZhbHVlKSB8fCAoX25vcm1hbGl6ZXIgJiYgX25vcm1hbGl6ZXIuaU9TID8gMSA6IDApOyAvL1RPRE86IGlPUyBCdWc6IGlmIHlvdSBhbGxvdyBpdCB0byBnbyB0byAwLCBTYWZhcmkgY2FuIHN0YXJ0IHRvIHJlcG9ydCBzdXBlciBzdHJhbmdlICh3aWxkbHkgaW5hY2N1cmF0ZSkgdG91Y2ggcG9zaXRpb25zIVxuXG4gICAgICBmKHZhbHVlKTtcbiAgICAgIGNhY2hpbmdGdW5jLmNhY2hlSUQgPSBfc2Nyb2xsZXJzLmNhY2hlO1xuICAgICAgaXNOb3JtYWxpemluZyAmJiBfYnJpZGdlKFwic3NcIiwgdmFsdWUpOyAvLyBzZXQgc2Nyb2xsIChub3RpZnkgU2Nyb2xsVHJpZ2dlciBzbyBpdCBjYW4gZGlzcGF0Y2ggYSBcInNjcm9sbFN0YXJ0XCIgZXZlbnQgaWYgbmVjZXNzYXJ5XG4gICAgfSBlbHNlIGlmIChkb05vdENhY2hlIHx8IF9zY3JvbGxlcnMuY2FjaGUgIT09IGNhY2hpbmdGdW5jLmNhY2hlSUQgfHwgX2JyaWRnZShcInJlZlwiKSkge1xuICAgICAgY2FjaGluZ0Z1bmMuY2FjaGVJRCA9IF9zY3JvbGxlcnMuY2FjaGU7XG4gICAgICBjYWNoaW5nRnVuYy52ID0gZigpO1xuICAgIH1cblxuICAgIHJldHVybiBjYWNoaW5nRnVuYy52ICsgY2FjaGluZ0Z1bmMub2Zmc2V0O1xuICB9O1xuXG4gIGNhY2hpbmdGdW5jLm9mZnNldCA9IDA7XG4gIHJldHVybiBmICYmIGNhY2hpbmdGdW5jO1xufSxcbiAgICBfaG9yaXpvbnRhbCA9IHtcbiAgczogX3Njcm9sbExlZnQsXG4gIHA6IFwibGVmdFwiLFxuICBwMjogXCJMZWZ0XCIsXG4gIG9zOiBcInJpZ2h0XCIsXG4gIG9zMjogXCJSaWdodFwiLFxuICBkOiBcIndpZHRoXCIsXG4gIGQyOiBcIldpZHRoXCIsXG4gIGE6IFwieFwiLFxuICBzYzogX3Njcm9sbENhY2hlRnVuYyhmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IF93aW4uc2Nyb2xsVG8odmFsdWUsIF92ZXJ0aWNhbC5zYygpKSA6IF93aW4ucGFnZVhPZmZzZXQgfHwgX2RvY1tfc2Nyb2xsTGVmdF0gfHwgX2RvY0VsW19zY3JvbGxMZWZ0XSB8fCBfYm9keVtfc2Nyb2xsTGVmdF0gfHwgMDtcbiAgfSlcbn0sXG4gICAgX3ZlcnRpY2FsID0ge1xuICBzOiBfc2Nyb2xsVG9wLFxuICBwOiBcInRvcFwiLFxuICBwMjogXCJUb3BcIixcbiAgb3M6IFwiYm90dG9tXCIsXG4gIG9zMjogXCJCb3R0b21cIixcbiAgZDogXCJoZWlnaHRcIixcbiAgZDI6IFwiSGVpZ2h0XCIsXG4gIGE6IFwieVwiLFxuICBvcDogX2hvcml6b250YWwsXG4gIHNjOiBfc2Nyb2xsQ2FjaGVGdW5jKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gX3dpbi5zY3JvbGxUbyhfaG9yaXpvbnRhbC5zYygpLCB2YWx1ZSkgOiBfd2luLnBhZ2VZT2Zmc2V0IHx8IF9kb2NbX3Njcm9sbFRvcF0gfHwgX2RvY0VsW19zY3JvbGxUb3BdIHx8IF9ib2R5W19zY3JvbGxUb3BdIHx8IDA7XG4gIH0pXG59LFxuICAgIF9nZXRUYXJnZXQgPSBmdW5jdGlvbiBfZ2V0VGFyZ2V0KHQsIHNlbGYpIHtcbiAgcmV0dXJuIChzZWxmICYmIHNlbGYuX2N0eCAmJiBzZWxmLl9jdHguc2VsZWN0b3IgfHwgZ3NhcC51dGlscy50b0FycmF5KSh0KVswXSB8fCAodHlwZW9mIHQgPT09IFwic3RyaW5nXCIgJiYgZ3NhcC5jb25maWcoKS5udWxsVGFyZ2V0V2FybiAhPT0gZmFsc2UgPyBjb25zb2xlLndhcm4oXCJFbGVtZW50IG5vdCBmb3VuZDpcIiwgdCkgOiBudWxsKTtcbn0sXG4gICAgX2dldFNjcm9sbEZ1bmMgPSBmdW5jdGlvbiBfZ2V0U2Nyb2xsRnVuYyhlbGVtZW50LCBfcmVmKSB7XG4gIHZhciBzID0gX3JlZi5zLFxuICAgICAgc2MgPSBfcmVmLnNjO1xuICAvLyB3ZSBzdG9yZSB0aGUgc2Nyb2xsZXIgZnVuY3Rpb25zIGluIGFuIGFsdGVybmF0aW5nIHNlcXVlbmNlZCBBcnJheSBsaWtlIFtlbGVtZW50LCB2ZXJ0aWNhbFNjcm9sbEZ1bmMsIGhvcml6b250YWxTY3JvbGxGdW5jLCAuLi5dIHNvIHRoYXQgd2UgY2FuIG1pbmltaXplIG1lbW9yeSwgbWF4aW1pemUgcGVyZm9ybWFuY2UsIGFuZCB3ZSBhbHNvIHJlY29yZCB0aGUgbGFzdCBwb3NpdGlvbiBhcyBhIFwiLnJlY1wiIHByb3BlcnR5IGluIG9yZGVyIHRvIHJldmVydCB0byB0aGF0IGFmdGVyIHJlZnJlc2hpbmcgdG8gZW5zdXJlIHRoaW5ncyBkb24ndCBzaGlmdCBhcm91bmQuXG4gIF9pc1ZpZXdwb3J0KGVsZW1lbnQpICYmIChlbGVtZW50ID0gX2RvYy5zY3JvbGxpbmdFbGVtZW50IHx8IF9kb2NFbCk7XG5cbiAgdmFyIGkgPSBfc2Nyb2xsZXJzLmluZGV4T2YoZWxlbWVudCksXG4gICAgICBvZmZzZXQgPSBzYyA9PT0gX3ZlcnRpY2FsLnNjID8gMSA6IDI7XG5cbiAgIX5pICYmIChpID0gX3Njcm9sbGVycy5wdXNoKGVsZW1lbnQpIC0gMSk7XG4gIF9zY3JvbGxlcnNbaSArIG9mZnNldF0gfHwgX2FkZExpc3RlbmVyKGVsZW1lbnQsIFwic2Nyb2xsXCIsIF9vblNjcm9sbCk7IC8vIGNsZWFyIHRoZSBjYWNoZSB3aGVuIGEgc2Nyb2xsIG9jY3Vyc1xuXG4gIHZhciBwcmV2ID0gX3Njcm9sbGVyc1tpICsgb2Zmc2V0XSxcbiAgICAgIGZ1bmMgPSBwcmV2IHx8IChfc2Nyb2xsZXJzW2kgKyBvZmZzZXRdID0gX3Njcm9sbENhY2hlRnVuYyhfZ2V0UHJveHlQcm9wKGVsZW1lbnQsIHMpLCB0cnVlKSB8fCAoX2lzVmlld3BvcnQoZWxlbWVudCkgPyBzYyA6IF9zY3JvbGxDYWNoZUZ1bmMoZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyBlbGVtZW50W3NdID0gdmFsdWUgOiBlbGVtZW50W3NdO1xuICB9KSkpO1xuICBmdW5jLnRhcmdldCA9IGVsZW1lbnQ7XG4gIHByZXYgfHwgKGZ1bmMuc21vb3RoID0gZ3NhcC5nZXRQcm9wZXJ0eShlbGVtZW50LCBcInNjcm9sbEJlaGF2aW9yXCIpID09PSBcInNtb290aFwiKTsgLy8gb25seSBzZXQgaXQgdGhlIGZpcnN0IHRpbWUgKGRvbid0IHJlc2V0IGV2ZXJ5IHRpbWUgYSBzY3JvbGxGdW5jIGlzIHJlcXVlc3RlZCBiZWNhdXNlIHBlcmhhcHMgaXQgaGFwcGVucyBkdXJpbmcgYSByZWZyZXNoKCkgd2hlbiBpdCdzIGRpc2FibGVkIGluIFNjcm9sbFRyaWdnZXIuXG5cbiAgcmV0dXJuIGZ1bmM7XG59LFxuICAgIF9nZXRWZWxvY2l0eVByb3AgPSBmdW5jdGlvbiBfZ2V0VmVsb2NpdHlQcm9wKHZhbHVlLCBtaW5UaW1lUmVmcmVzaCwgdXNlRGVsdGEpIHtcbiAgdmFyIHYxID0gdmFsdWUsXG4gICAgICB2MiA9IHZhbHVlLFxuICAgICAgdDEgPSBfZ2V0VGltZSgpLFxuICAgICAgdDIgPSB0MSxcbiAgICAgIG1pbiA9IG1pblRpbWVSZWZyZXNoIHx8IDUwLFxuICAgICAgZHJvcFRvWmVyb1RpbWUgPSBNYXRoLm1heCg1MDAsIG1pbiAqIDMpLFxuICAgICAgdXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKHZhbHVlLCBmb3JjZSkge1xuICAgIHZhciB0ID0gX2dldFRpbWUoKTtcblxuICAgIGlmIChmb3JjZSB8fCB0IC0gdDEgPiBtaW4pIHtcbiAgICAgIHYyID0gdjE7XG4gICAgICB2MSA9IHZhbHVlO1xuICAgICAgdDIgPSB0MTtcbiAgICAgIHQxID0gdDtcbiAgICB9IGVsc2UgaWYgKHVzZURlbHRhKSB7XG4gICAgICB2MSArPSB2YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gbm90IHRvdGFsbHkgbmVjZXNzYXJ5LCBidXQgbWFrZXMgaXQgYSBiaXQgbW9yZSBhY2N1cmF0ZSBieSBhZGp1c3RpbmcgdGhlIHYxIHZhbHVlIGFjY29yZGluZyB0byB0aGUgbmV3IHNsb3BlLiBUaGlzIHdheSB3ZSdyZSBub3QganVzdCBpZ25vcmluZyB0aGUgaW5jb21pbmcgZGF0YS4gUmVtb3ZpbmcgZm9yIG5vdyBiZWNhdXNlIGl0IGRvZXNuJ3Qgc2VlbSB0byBtYWtlIG11Y2ggcHJhY3RpY2FsIGRpZmZlcmVuY2UgYW5kIGl0J3MgcHJvYmFibHkgbm90IHdvcnRoIHRoZSBrYi5cbiAgICAgIHYxID0gdjIgKyAodmFsdWUgLSB2MikgLyAodCAtIHQyKSAqICh0MSAtIHQyKTtcbiAgICB9XG4gIH0sXG4gICAgICByZXNldCA9IGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgIHYyID0gdjEgPSB1c2VEZWx0YSA/IDAgOiB2MTtcbiAgICB0MiA9IHQxID0gMDtcbiAgfSxcbiAgICAgIGdldFZlbG9jaXR5ID0gZnVuY3Rpb24gZ2V0VmVsb2NpdHkobGF0ZXN0VmFsdWUpIHtcbiAgICB2YXIgdE9sZCA9IHQyLFxuICAgICAgICB2T2xkID0gdjIsXG4gICAgICAgIHQgPSBfZ2V0VGltZSgpO1xuXG4gICAgKGxhdGVzdFZhbHVlIHx8IGxhdGVzdFZhbHVlID09PSAwKSAmJiBsYXRlc3RWYWx1ZSAhPT0gdjEgJiYgdXBkYXRlKGxhdGVzdFZhbHVlKTtcbiAgICByZXR1cm4gdDEgPT09IHQyIHx8IHQgLSB0MiA+IGRyb3BUb1plcm9UaW1lID8gMCA6ICh2MSArICh1c2VEZWx0YSA/IHZPbGQgOiAtdk9sZCkpIC8gKCh1c2VEZWx0YSA/IHQgOiB0MSkgLSB0T2xkKSAqIDEwMDA7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IHVwZGF0ZSxcbiAgICByZXNldDogcmVzZXQsXG4gICAgZ2V0VmVsb2NpdHk6IGdldFZlbG9jaXR5XG4gIH07XG59LFxuICAgIF9nZXRFdmVudCA9IGZ1bmN0aW9uIF9nZXRFdmVudChlLCBwcmV2ZW50RGVmYXVsdCkge1xuICBwcmV2ZW50RGVmYXVsdCAmJiAhZS5fZ3NhcEFsbG93ICYmIGUucHJldmVudERlZmF1bHQoKTtcbiAgcmV0dXJuIGUuY2hhbmdlZFRvdWNoZXMgPyBlLmNoYW5nZWRUb3VjaGVzWzBdIDogZTtcbn0sXG4gICAgX2dldEFic29sdXRlTWF4ID0gZnVuY3Rpb24gX2dldEFic29sdXRlTWF4KGEpIHtcbiAgdmFyIG1heCA9IE1hdGgubWF4LmFwcGx5KE1hdGgsIGEpLFxuICAgICAgbWluID0gTWF0aC5taW4uYXBwbHkoTWF0aCwgYSk7XG4gIHJldHVybiBNYXRoLmFicyhtYXgpID49IE1hdGguYWJzKG1pbikgPyBtYXggOiBtaW47XG59LFxuICAgIF9zZXRTY3JvbGxUcmlnZ2VyID0gZnVuY3Rpb24gX3NldFNjcm9sbFRyaWdnZXIoKSB7XG4gIFNjcm9sbFRyaWdnZXIgPSBnc2FwLmNvcmUuZ2xvYmFscygpLlNjcm9sbFRyaWdnZXI7XG4gIFNjcm9sbFRyaWdnZXIgJiYgU2Nyb2xsVHJpZ2dlci5jb3JlICYmIF9pbnRlZ3JhdGUoKTtcbn0sXG4gICAgX2luaXRDb3JlID0gZnVuY3Rpb24gX2luaXRDb3JlKGNvcmUpIHtcbiAgZ3NhcCA9IGNvcmUgfHwgX2dldEdTQVAoKTtcblxuICBpZiAoIV9jb3JlSW5pdHRlZCAmJiBnc2FwICYmIHR5cGVvZiBkb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudC5ib2R5KSB7XG4gICAgX3dpbiA9IHdpbmRvdztcbiAgICBfZG9jID0gZG9jdW1lbnQ7XG4gICAgX2RvY0VsID0gX2RvYy5kb2N1bWVudEVsZW1lbnQ7XG4gICAgX2JvZHkgPSBfZG9jLmJvZHk7XG4gICAgX3Jvb3QgPSBbX3dpbiwgX2RvYywgX2RvY0VsLCBfYm9keV07XG4gICAgX2NsYW1wID0gZ3NhcC51dGlscy5jbGFtcDtcblxuICAgIF9jb250ZXh0ID0gZ3NhcC5jb3JlLmNvbnRleHQgfHwgZnVuY3Rpb24gKCkge307XG5cbiAgICBfcG9pbnRlclR5cGUgPSBcIm9ucG9pbnRlcmVudGVyXCIgaW4gX2JvZHkgPyBcInBvaW50ZXJcIiA6IFwibW91c2VcIjsgLy8gaXNUb3VjaCBpcyAwIGlmIG5vIHRvdWNoLCAxIGlmIE9OTFkgdG91Y2gsIGFuZCAyIGlmIGl0IGNhbiBhY2NvbW1vZGF0ZSB0b3VjaCBidXQgYWxzbyBvdGhlciB0eXBlcyBsaWtlIG1vdXNlL3BvaW50ZXIuXG5cbiAgICBfaXNUb3VjaCA9IE9ic2VydmVyLmlzVG91Y2ggPSBfd2luLm1hdGNoTWVkaWEgJiYgX3dpbi5tYXRjaE1lZGlhKFwiKGhvdmVyOiBub25lKSwgKHBvaW50ZXI6IGNvYXJzZSlcIikubWF0Y2hlcyA/IDEgOiBcIm9udG91Y2hzdGFydFwiIGluIF93aW4gfHwgbmF2aWdhdG9yLm1heFRvdWNoUG9pbnRzID4gMCB8fCBuYXZpZ2F0b3IubXNNYXhUb3VjaFBvaW50cyA+IDAgPyAyIDogMDtcbiAgICBfZXZlbnRUeXBlcyA9IE9ic2VydmVyLmV2ZW50VHlwZXMgPSAoXCJvbnRvdWNoc3RhcnRcIiBpbiBfZG9jRWwgPyBcInRvdWNoc3RhcnQsdG91Y2htb3ZlLHRvdWNoY2FuY2VsLHRvdWNoZW5kXCIgOiAhKFwib25wb2ludGVyZG93blwiIGluIF9kb2NFbCkgPyBcIm1vdXNlZG93bixtb3VzZW1vdmUsbW91c2V1cCxtb3VzZXVwXCIgOiBcInBvaW50ZXJkb3duLHBvaW50ZXJtb3ZlLHBvaW50ZXJjYW5jZWwscG9pbnRlcnVwXCIpLnNwbGl0KFwiLFwiKTtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfc3RhcnR1cCA9IDA7XG4gICAgfSwgNTAwKTtcblxuICAgIF9zZXRTY3JvbGxUcmlnZ2VyKCk7XG5cbiAgICBfY29yZUluaXR0ZWQgPSAxO1xuICB9XG5cbiAgcmV0dXJuIF9jb3JlSW5pdHRlZDtcbn07XG5cbl9ob3Jpem9udGFsLm9wID0gX3ZlcnRpY2FsO1xuX3Njcm9sbGVycy5jYWNoZSA9IDA7XG5leHBvcnQgdmFyIE9ic2VydmVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gT2JzZXJ2ZXIodmFycykge1xuICAgIHRoaXMuaW5pdCh2YXJzKTtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBPYnNlcnZlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmluaXQgPSBmdW5jdGlvbiBpbml0KHZhcnMpIHtcbiAgICBfY29yZUluaXR0ZWQgfHwgX2luaXRDb3JlKGdzYXApIHx8IGNvbnNvbGUud2FybihcIlBsZWFzZSBnc2FwLnJlZ2lzdGVyUGx1Z2luKE9ic2VydmVyKVwiKTtcbiAgICBTY3JvbGxUcmlnZ2VyIHx8IF9zZXRTY3JvbGxUcmlnZ2VyKCk7XG4gICAgdmFyIHRvbGVyYW5jZSA9IHZhcnMudG9sZXJhbmNlLFxuICAgICAgICBkcmFnTWluaW11bSA9IHZhcnMuZHJhZ01pbmltdW0sXG4gICAgICAgIHR5cGUgPSB2YXJzLnR5cGUsXG4gICAgICAgIHRhcmdldCA9IHZhcnMudGFyZ2V0LFxuICAgICAgICBsaW5lSGVpZ2h0ID0gdmFycy5saW5lSGVpZ2h0LFxuICAgICAgICBkZWJvdW5jZSA9IHZhcnMuZGVib3VuY2UsXG4gICAgICAgIHByZXZlbnREZWZhdWx0ID0gdmFycy5wcmV2ZW50RGVmYXVsdCxcbiAgICAgICAgb25TdG9wID0gdmFycy5vblN0b3AsXG4gICAgICAgIG9uU3RvcERlbGF5ID0gdmFycy5vblN0b3BEZWxheSxcbiAgICAgICAgaWdub3JlID0gdmFycy5pZ25vcmUsXG4gICAgICAgIHdoZWVsU3BlZWQgPSB2YXJzLndoZWVsU3BlZWQsXG4gICAgICAgIGV2ZW50ID0gdmFycy5ldmVudCxcbiAgICAgICAgb25EcmFnU3RhcnQgPSB2YXJzLm9uRHJhZ1N0YXJ0LFxuICAgICAgICBvbkRyYWdFbmQgPSB2YXJzLm9uRHJhZ0VuZCxcbiAgICAgICAgb25EcmFnID0gdmFycy5vbkRyYWcsXG4gICAgICAgIG9uUHJlc3MgPSB2YXJzLm9uUHJlc3MsXG4gICAgICAgIG9uUmVsZWFzZSA9IHZhcnMub25SZWxlYXNlLFxuICAgICAgICBvblJpZ2h0ID0gdmFycy5vblJpZ2h0LFxuICAgICAgICBvbkxlZnQgPSB2YXJzLm9uTGVmdCxcbiAgICAgICAgb25VcCA9IHZhcnMub25VcCxcbiAgICAgICAgb25Eb3duID0gdmFycy5vbkRvd24sXG4gICAgICAgIG9uQ2hhbmdlWCA9IHZhcnMub25DaGFuZ2VYLFxuICAgICAgICBvbkNoYW5nZVkgPSB2YXJzLm9uQ2hhbmdlWSxcbiAgICAgICAgb25DaGFuZ2UgPSB2YXJzLm9uQ2hhbmdlLFxuICAgICAgICBvblRvZ2dsZVggPSB2YXJzLm9uVG9nZ2xlWCxcbiAgICAgICAgb25Ub2dnbGVZID0gdmFycy5vblRvZ2dsZVksXG4gICAgICAgIG9uSG92ZXIgPSB2YXJzLm9uSG92ZXIsXG4gICAgICAgIG9uSG92ZXJFbmQgPSB2YXJzLm9uSG92ZXJFbmQsXG4gICAgICAgIG9uTW92ZSA9IHZhcnMub25Nb3ZlLFxuICAgICAgICBpZ25vcmVDaGVjayA9IHZhcnMuaWdub3JlQ2hlY2ssXG4gICAgICAgIGlzTm9ybWFsaXplciA9IHZhcnMuaXNOb3JtYWxpemVyLFxuICAgICAgICBvbkdlc3R1cmVTdGFydCA9IHZhcnMub25HZXN0dXJlU3RhcnQsXG4gICAgICAgIG9uR2VzdHVyZUVuZCA9IHZhcnMub25HZXN0dXJlRW5kLFxuICAgICAgICBvbldoZWVsID0gdmFycy5vbldoZWVsLFxuICAgICAgICBvbkVuYWJsZSA9IHZhcnMub25FbmFibGUsXG4gICAgICAgIG9uRGlzYWJsZSA9IHZhcnMub25EaXNhYmxlLFxuICAgICAgICBvbkNsaWNrID0gdmFycy5vbkNsaWNrLFxuICAgICAgICBzY3JvbGxTcGVlZCA9IHZhcnMuc2Nyb2xsU3BlZWQsXG4gICAgICAgIGNhcHR1cmUgPSB2YXJzLmNhcHR1cmUsXG4gICAgICAgIGFsbG93Q2xpY2tzID0gdmFycy5hbGxvd0NsaWNrcyxcbiAgICAgICAgbG9ja0F4aXMgPSB2YXJzLmxvY2tBeGlzLFxuICAgICAgICBvbkxvY2tBeGlzID0gdmFycy5vbkxvY2tBeGlzO1xuICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0ID0gX2dldFRhcmdldCh0YXJnZXQpIHx8IF9kb2NFbDtcbiAgICB0aGlzLnZhcnMgPSB2YXJzO1xuICAgIGlnbm9yZSAmJiAoaWdub3JlID0gZ3NhcC51dGlscy50b0FycmF5KGlnbm9yZSkpO1xuICAgIHRvbGVyYW5jZSA9IHRvbGVyYW5jZSB8fCAxZS05O1xuICAgIGRyYWdNaW5pbXVtID0gZHJhZ01pbmltdW0gfHwgMDtcbiAgICB3aGVlbFNwZWVkID0gd2hlZWxTcGVlZCB8fCAxO1xuICAgIHNjcm9sbFNwZWVkID0gc2Nyb2xsU3BlZWQgfHwgMTtcbiAgICB0eXBlID0gdHlwZSB8fCBcIndoZWVsLHRvdWNoLHBvaW50ZXJcIjtcbiAgICBkZWJvdW5jZSA9IGRlYm91bmNlICE9PSBmYWxzZTtcbiAgICBsaW5lSGVpZ2h0IHx8IChsaW5lSGVpZ2h0ID0gcGFyc2VGbG9hdChfd2luLmdldENvbXB1dGVkU3R5bGUoX2JvZHkpLmxpbmVIZWlnaHQpIHx8IDIyKTsgLy8gbm90ZTogYnJvd3NlciBtYXkgcmVwb3J0IFwibm9ybWFsXCIsIHNvIGRlZmF1bHQgdG8gMjIuXG5cbiAgICB2YXIgaWQsXG4gICAgICAgIG9uU3RvcERlbGF5ZWRDYWxsLFxuICAgICAgICBkcmFnZ2VkLFxuICAgICAgICBtb3ZlZCxcbiAgICAgICAgd2hlZWxlZCxcbiAgICAgICAgbG9ja2VkLFxuICAgICAgICBheGlzLFxuICAgICAgICBzZWxmID0gdGhpcyxcbiAgICAgICAgcHJldkRlbHRhWCA9IDAsXG4gICAgICAgIHByZXZEZWx0YVkgPSAwLFxuICAgICAgICBwYXNzaXZlID0gdmFycy5wYXNzaXZlIHx8ICFwcmV2ZW50RGVmYXVsdCxcbiAgICAgICAgc2Nyb2xsRnVuY1ggPSBfZ2V0U2Nyb2xsRnVuYyh0YXJnZXQsIF9ob3Jpem9udGFsKSxcbiAgICAgICAgc2Nyb2xsRnVuY1kgPSBfZ2V0U2Nyb2xsRnVuYyh0YXJnZXQsIF92ZXJ0aWNhbCksXG4gICAgICAgIHNjcm9sbFggPSBzY3JvbGxGdW5jWCgpLFxuICAgICAgICBzY3JvbGxZID0gc2Nyb2xsRnVuY1koKSxcbiAgICAgICAgbGltaXRUb1RvdWNoID0gfnR5cGUuaW5kZXhPZihcInRvdWNoXCIpICYmICF+dHlwZS5pbmRleE9mKFwicG9pbnRlclwiKSAmJiBfZXZlbnRUeXBlc1swXSA9PT0gXCJwb2ludGVyZG93blwiLFxuICAgICAgICAvLyBmb3IgZGV2aWNlcyB0aGF0IGFjY29tbW9kYXRlIG1vdXNlIGV2ZW50cyBhbmQgdG91Y2ggZXZlbnRzLCB3ZSBuZWVkIHRvIGRpc3Rpbmd1aXNoLlxuICAgIGlzVmlld3BvcnQgPSBfaXNWaWV3cG9ydCh0YXJnZXQpLFxuICAgICAgICBvd25lckRvYyA9IHRhcmdldC5vd25lckRvY3VtZW50IHx8IF9kb2MsXG4gICAgICAgIGRlbHRhWCA9IFswLCAwLCAwXSxcbiAgICAgICAgLy8gd2hlZWwsIHNjcm9sbCwgcG9pbnRlci90b3VjaFxuICAgIGRlbHRhWSA9IFswLCAwLCAwXSxcbiAgICAgICAgb25DbGlja1RpbWUgPSAwLFxuICAgICAgICBjbGlja0NhcHR1cmUgPSBmdW5jdGlvbiBjbGlja0NhcHR1cmUoKSB7XG4gICAgICByZXR1cm4gb25DbGlja1RpbWUgPSBfZ2V0VGltZSgpO1xuICAgIH0sXG4gICAgICAgIF9pZ25vcmVDaGVjayA9IGZ1bmN0aW9uIF9pZ25vcmVDaGVjayhlLCBpc1BvaW50ZXJPclRvdWNoKSB7XG4gICAgICByZXR1cm4gKHNlbGYuZXZlbnQgPSBlKSAmJiBpZ25vcmUgJiYgfmlnbm9yZS5pbmRleE9mKGUudGFyZ2V0KSB8fCBpc1BvaW50ZXJPclRvdWNoICYmIGxpbWl0VG9Ub3VjaCAmJiBlLnBvaW50ZXJUeXBlICE9PSBcInRvdWNoXCIgfHwgaWdub3JlQ2hlY2sgJiYgaWdub3JlQ2hlY2soZSwgaXNQb2ludGVyT3JUb3VjaCk7XG4gICAgfSxcbiAgICAgICAgb25TdG9wRnVuYyA9IGZ1bmN0aW9uIG9uU3RvcEZ1bmMoKSB7XG4gICAgICBzZWxmLl92eC5yZXNldCgpO1xuXG4gICAgICBzZWxmLl92eS5yZXNldCgpO1xuXG4gICAgICBvblN0b3BEZWxheWVkQ2FsbC5wYXVzZSgpO1xuICAgICAgb25TdG9wICYmIG9uU3RvcChzZWxmKTtcbiAgICB9LFxuICAgICAgICB1cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgICB2YXIgZHggPSBzZWxmLmRlbHRhWCA9IF9nZXRBYnNvbHV0ZU1heChkZWx0YVgpLFxuICAgICAgICAgIGR5ID0gc2VsZi5kZWx0YVkgPSBfZ2V0QWJzb2x1dGVNYXgoZGVsdGFZKSxcbiAgICAgICAgICBjaGFuZ2VkWCA9IE1hdGguYWJzKGR4KSA+PSB0b2xlcmFuY2UsXG4gICAgICAgICAgY2hhbmdlZFkgPSBNYXRoLmFicyhkeSkgPj0gdG9sZXJhbmNlO1xuXG4gICAgICBvbkNoYW5nZSAmJiAoY2hhbmdlZFggfHwgY2hhbmdlZFkpICYmIG9uQ2hhbmdlKHNlbGYsIGR4LCBkeSwgZGVsdGFYLCBkZWx0YVkpOyAvLyBpbiBTY3JvbGxUcmlnZ2VyLm5vcm1hbGl6ZVNjcm9sbCgpLCB3ZSBuZWVkIHRvIGtub3cgaWYgaXQgd2FzIHRvdWNoL3BvaW50ZXIgc28gd2UgbmVlZCBhY2Nlc3MgdG8gdGhlIGRlbHRhWC9kZWx0YVkgQXJyYXlzIGJlZm9yZSB3ZSBjbGVhciB0aGVtIG91dC5cblxuICAgICAgaWYgKGNoYW5nZWRYKSB7XG4gICAgICAgIG9uUmlnaHQgJiYgc2VsZi5kZWx0YVggPiAwICYmIG9uUmlnaHQoc2VsZik7XG4gICAgICAgIG9uTGVmdCAmJiBzZWxmLmRlbHRhWCA8IDAgJiYgb25MZWZ0KHNlbGYpO1xuICAgICAgICBvbkNoYW5nZVggJiYgb25DaGFuZ2VYKHNlbGYpO1xuICAgICAgICBvblRvZ2dsZVggJiYgc2VsZi5kZWx0YVggPCAwICE9PSBwcmV2RGVsdGFYIDwgMCAmJiBvblRvZ2dsZVgoc2VsZik7XG4gICAgICAgIHByZXZEZWx0YVggPSBzZWxmLmRlbHRhWDtcbiAgICAgICAgZGVsdGFYWzBdID0gZGVsdGFYWzFdID0gZGVsdGFYWzJdID0gMDtcbiAgICAgIH1cblxuICAgICAgaWYgKGNoYW5nZWRZKSB7XG4gICAgICAgIG9uRG93biAmJiBzZWxmLmRlbHRhWSA+IDAgJiYgb25Eb3duKHNlbGYpO1xuICAgICAgICBvblVwICYmIHNlbGYuZGVsdGFZIDwgMCAmJiBvblVwKHNlbGYpO1xuICAgICAgICBvbkNoYW5nZVkgJiYgb25DaGFuZ2VZKHNlbGYpO1xuICAgICAgICBvblRvZ2dsZVkgJiYgc2VsZi5kZWx0YVkgPCAwICE9PSBwcmV2RGVsdGFZIDwgMCAmJiBvblRvZ2dsZVkoc2VsZik7XG4gICAgICAgIHByZXZEZWx0YVkgPSBzZWxmLmRlbHRhWTtcbiAgICAgICAgZGVsdGFZWzBdID0gZGVsdGFZWzFdID0gZGVsdGFZWzJdID0gMDtcbiAgICAgIH1cblxuICAgICAgaWYgKG1vdmVkIHx8IGRyYWdnZWQpIHtcbiAgICAgICAgb25Nb3ZlICYmIG9uTW92ZShzZWxmKTtcblxuICAgICAgICBpZiAoZHJhZ2dlZCkge1xuICAgICAgICAgIG9uRHJhZyhzZWxmKTtcbiAgICAgICAgICBkcmFnZ2VkID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBtb3ZlZCA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBsb2NrZWQgJiYgIShsb2NrZWQgPSBmYWxzZSkgJiYgb25Mb2NrQXhpcyAmJiBvbkxvY2tBeGlzKHNlbGYpO1xuXG4gICAgICBpZiAod2hlZWxlZCkge1xuICAgICAgICBvbldoZWVsKHNlbGYpO1xuICAgICAgICB3aGVlbGVkID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlkID0gMDtcbiAgICB9LFxuICAgICAgICBvbkRlbHRhID0gZnVuY3Rpb24gb25EZWx0YSh4LCB5LCBpbmRleCkge1xuICAgICAgZGVsdGFYW2luZGV4XSArPSB4O1xuICAgICAgZGVsdGFZW2luZGV4XSArPSB5O1xuXG4gICAgICBzZWxmLl92eC51cGRhdGUoeCk7XG5cbiAgICAgIHNlbGYuX3Z5LnVwZGF0ZSh5KTtcblxuICAgICAgZGVib3VuY2UgPyBpZCB8fCAoaWQgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodXBkYXRlKSkgOiB1cGRhdGUoKTtcbiAgICB9LFxuICAgICAgICBvblRvdWNoT3JQb2ludGVyRGVsdGEgPSBmdW5jdGlvbiBvblRvdWNoT3JQb2ludGVyRGVsdGEoeCwgeSkge1xuICAgICAgaWYgKGxvY2tBeGlzICYmICFheGlzKSB7XG4gICAgICAgIHNlbGYuYXhpcyA9IGF4aXMgPSBNYXRoLmFicyh4KSA+IE1hdGguYWJzKHkpID8gXCJ4XCIgOiBcInlcIjtcbiAgICAgICAgbG9ja2VkID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGF4aXMgIT09IFwieVwiKSB7XG4gICAgICAgIGRlbHRhWFsyXSArPSB4O1xuXG4gICAgICAgIHNlbGYuX3Z4LnVwZGF0ZSh4LCB0cnVlKTsgLy8gdXBkYXRlIHRoZSB2ZWxvY2l0eSBhcyBmcmVxdWVudGx5IGFzIHBvc3NpYmxlIGluc3RlYWQgb2YgaW4gdGhlIGRlYm91bmNlZCBmdW5jdGlvbiBzbyB0aGF0IHZlcnkgcXVpY2sgdG91Y2gtc2Nyb2xscyAoZmxpY2tzKSBmZWVsIG5hdHVyYWwuIElmIGl0J3MgdGhlIG1vdXNlL3RvdWNoL3BvaW50ZXIsIGZvcmNlIGl0IHNvIHRoYXQgd2UgZ2V0IHNuYXBweS9hY2N1cmF0ZSBtb21lbnR1bSBzY3JvbGwuXG5cbiAgICAgIH1cblxuICAgICAgaWYgKGF4aXMgIT09IFwieFwiKSB7XG4gICAgICAgIGRlbHRhWVsyXSArPSB5O1xuXG4gICAgICAgIHNlbGYuX3Z5LnVwZGF0ZSh5LCB0cnVlKTtcbiAgICAgIH1cblxuICAgICAgZGVib3VuY2UgPyBpZCB8fCAoaWQgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodXBkYXRlKSkgOiB1cGRhdGUoKTtcbiAgICB9LFxuICAgICAgICBfb25EcmFnID0gZnVuY3Rpb24gX29uRHJhZyhlKSB7XG4gICAgICBpZiAoX2lnbm9yZUNoZWNrKGUsIDEpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZSA9IF9nZXRFdmVudChlLCBwcmV2ZW50RGVmYXVsdCk7XG4gICAgICB2YXIgeCA9IGUuY2xpZW50WCxcbiAgICAgICAgICB5ID0gZS5jbGllbnRZLFxuICAgICAgICAgIGR4ID0geCAtIHNlbGYueCxcbiAgICAgICAgICBkeSA9IHkgLSBzZWxmLnksXG4gICAgICAgICAgaXNEcmFnZ2luZyA9IHNlbGYuaXNEcmFnZ2luZztcbiAgICAgIHNlbGYueCA9IHg7XG4gICAgICBzZWxmLnkgPSB5O1xuXG4gICAgICBpZiAoaXNEcmFnZ2luZyB8fCBNYXRoLmFicyhzZWxmLnN0YXJ0WCAtIHgpID49IGRyYWdNaW5pbXVtIHx8IE1hdGguYWJzKHNlbGYuc3RhcnRZIC0geSkgPj0gZHJhZ01pbmltdW0pIHtcbiAgICAgICAgb25EcmFnICYmIChkcmFnZ2VkID0gdHJ1ZSk7XG4gICAgICAgIGlzRHJhZ2dpbmcgfHwgKHNlbGYuaXNEcmFnZ2luZyA9IHRydWUpO1xuICAgICAgICBvblRvdWNoT3JQb2ludGVyRGVsdGEoZHgsIGR5KTtcbiAgICAgICAgaXNEcmFnZ2luZyB8fCBvbkRyYWdTdGFydCAmJiBvbkRyYWdTdGFydChzZWxmKTtcbiAgICAgIH1cbiAgICB9LFxuICAgICAgICBfb25QcmVzcyA9IHNlbGYub25QcmVzcyA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoX2lnbm9yZUNoZWNrKGUsIDEpIHx8IGUgJiYgZS5idXR0b24pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBzZWxmLmF4aXMgPSBheGlzID0gbnVsbDtcbiAgICAgIG9uU3RvcERlbGF5ZWRDYWxsLnBhdXNlKCk7XG4gICAgICBzZWxmLmlzUHJlc3NlZCA9IHRydWU7XG4gICAgICBlID0gX2dldEV2ZW50KGUpOyAvLyBub3RlOiBtYXkgbmVlZCB0byBwcmV2ZW50RGVmYXVsdCg/KSBXb24ndCBzaWRlLXNjcm9sbCBvbiBpT1MgU2FmYXJpIGlmIHdlIGRvLCB0aG91Z2guXG5cbiAgICAgIHByZXZEZWx0YVggPSBwcmV2RGVsdGFZID0gMDtcbiAgICAgIHNlbGYuc3RhcnRYID0gc2VsZi54ID0gZS5jbGllbnRYO1xuICAgICAgc2VsZi5zdGFydFkgPSBzZWxmLnkgPSBlLmNsaWVudFk7XG5cbiAgICAgIHNlbGYuX3Z4LnJlc2V0KCk7IC8vIG90aGVyd2lzZSB0aGUgdDIgbWF5IGJlIHN0YWxlIGlmIHRoZSB1c2VyIHRvdWNoZXMgYW5kIGZsaWNrcyBzdXBlciBmYXN0IGFuZCByZWxlYXNlcyBpbiBsZXNzIHRoYW4gMiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgdGlja3MsIGNhdXNpbmcgdmVsb2NpdHkgdG8gYmUgMC5cblxuXG4gICAgICBzZWxmLl92eS5yZXNldCgpO1xuXG4gICAgICBfYWRkTGlzdGVuZXIoaXNOb3JtYWxpemVyID8gdGFyZ2V0IDogb3duZXJEb2MsIF9ldmVudFR5cGVzWzFdLCBfb25EcmFnLCBwYXNzaXZlLCB0cnVlKTtcblxuICAgICAgc2VsZi5kZWx0YVggPSBzZWxmLmRlbHRhWSA9IDA7XG4gICAgICBvblByZXNzICYmIG9uUHJlc3Moc2VsZik7XG4gICAgfSxcbiAgICAgICAgX29uUmVsZWFzZSA9IHNlbGYub25SZWxlYXNlID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmIChfaWdub3JlQ2hlY2soZSwgMSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBfcmVtb3ZlTGlzdGVuZXIoaXNOb3JtYWxpemVyID8gdGFyZ2V0IDogb3duZXJEb2MsIF9ldmVudFR5cGVzWzFdLCBfb25EcmFnLCB0cnVlKTtcblxuICAgICAgdmFyIGlzVHJhY2tpbmdEcmFnID0gIWlzTmFOKHNlbGYueSAtIHNlbGYuc3RhcnRZKSxcbiAgICAgICAgICB3YXNEcmFnZ2luZyA9IHNlbGYuaXNEcmFnZ2luZyxcbiAgICAgICAgICBpc0RyYWdOb3RDbGljayA9IHdhc0RyYWdnaW5nICYmIChNYXRoLmFicyhzZWxmLnggLSBzZWxmLnN0YXJ0WCkgPiAzIHx8IE1hdGguYWJzKHNlbGYueSAtIHNlbGYuc3RhcnRZKSA+IDMpLFxuICAgICAgICAgIC8vIHNvbWUgdG91Y2ggZGV2aWNlcyBuZWVkIHNvbWUgd2lnZ2xlIHJvb20gaW4gdGVybXMgb2Ygc2Vuc2luZyBjbGlja3MgLSB0aGUgZmluZ2VyIG1heSBtb3ZlIGEgZmV3IHBpeGVscy5cbiAgICAgIGV2ZW50RGF0YSA9IF9nZXRFdmVudChlKTtcblxuICAgICAgaWYgKCFpc0RyYWdOb3RDbGljayAmJiBpc1RyYWNraW5nRHJhZykge1xuICAgICAgICBzZWxmLl92eC5yZXNldCgpO1xuXG4gICAgICAgIHNlbGYuX3Z5LnJlc2V0KCk7IC8vaWYgKHByZXZlbnREZWZhdWx0ICYmIGFsbG93Q2xpY2tzICYmIHNlbGYuaXNQcmVzc2VkKSB7IC8vIGNoZWNrIGlzUHJlc3NlZCBiZWNhdXNlIGluIGEgcmFyZSBlZGdlIGNhc2UsIHRoZSBpbnB1dE9ic2VydmVyIGluIFNjcm9sbFRyaWdnZXIgbWF5IHN0b3BQcm9wYWdhdGlvbigpIG9uIHRoZSBwcmVzcy9kcmFnLCBzbyB0aGUgb25SZWxlYXNlIG1heSBnZXQgZmlyZWQgd2l0aG91dCB0aGUgb25QcmVzcy9vbkRyYWcgZXZlciBnZXR0aW5nIGNhbGxlZCwgdGh1cyBpdCBjb3VsZCB0cmlnZ2VyIGEgY2xpY2sgdG8gb2NjdXIgb24gYSBsaW5rIGFmdGVyIHNjcm9sbC1kcmFnZ2luZyBpdC5cblxuXG4gICAgICAgIGlmIChwcmV2ZW50RGVmYXVsdCAmJiBhbGxvd0NsaWNrcykge1xuICAgICAgICAgIGdzYXAuZGVsYXllZENhbGwoMC4wOCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gc29tZSBicm93c2VycyAobGlrZSBGaXJlZm94KSB3b24ndCB0cnVzdCBzY3JpcHQtZ2VuZXJhdGVkIGNsaWNrcywgc28gaWYgdGhlIHVzZXIgdHJpZXMgdG8gY2xpY2sgb24gYSB2aWRlbyB0byBwbGF5IGl0LCBmb3IgZXhhbXBsZSwgaXQgc2ltcGx5IHdvbid0IHdvcmsuIFNpbmNlIGEgcmVndWxhciBcImNsaWNrXCIgZXZlbnQgd2lsbCBtb3N0IGxpa2VseSBiZSBnZW5lcmF0ZWQgYW55d2F5IChvbmUgdGhhdCBoYXMgaXRzIGlzVHJ1c3RlZCBmbGFnIHNldCB0byB0cnVlKSwgd2UgbXVzdCBzbGlnaHRseSBkZWxheSBvdXIgc2NyaXB0LWdlbmVyYXRlZCBjbGljayBzbyB0aGF0IHRoZSBcInJlYWxcIi90cnVzdGVkIG9uZSBpcyBwcmlvcml0aXplZC4gUmVtZW1iZXIsIHdoZW4gdGhlcmUgYXJlIGR1cGxpY2F0ZSBldmVudHMgaW4gcXVpY2sgc3VjY2Vzc2lvbiwgd2Ugc3VwcHJlc3MgYWxsIGJ1dCB0aGUgZmlyc3Qgb25lLiBTb21lIGJyb3dzZXJzIGRvbid0IGV2ZW4gdHJpZ2dlciB0aGUgXCJyZWFsXCIgb25lIGF0IGFsbCwgc28gb3VyIHN5bnRoZXRpYyBvbmUgaXMgYSBzYWZldHkgdmFsdmUgdGhhdCBlbnN1cmVzIHRoYXQgbm8gbWF0dGVyIHdoYXQsIGEgY2xpY2sgZXZlbnQgZG9lcyBnZXQgZGlzcGF0Y2hlZC5cbiAgICAgICAgICAgIGlmIChfZ2V0VGltZSgpIC0gb25DbGlja1RpbWUgPiAzMDAgJiYgIWUuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICAgICAgICBpZiAoZS50YXJnZXQuY2xpY2spIHtcbiAgICAgICAgICAgICAgICAvL3NvbWUgYnJvd3NlcnMgKGxpa2UgbW9iaWxlIFNhZmFyaSkgZG9uJ3QgcHJvcGVybHkgdHJpZ2dlciB0aGUgY2xpY2sgZXZlbnRcbiAgICAgICAgICAgICAgICBlLnRhcmdldC5jbGljaygpO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKG93bmVyRG9jLmNyZWF0ZUV2ZW50KSB7XG4gICAgICAgICAgICAgICAgdmFyIHN5bnRoZXRpY0V2ZW50ID0gb3duZXJEb2MuY3JlYXRlRXZlbnQoXCJNb3VzZUV2ZW50c1wiKTtcbiAgICAgICAgICAgICAgICBzeW50aGV0aWNFdmVudC5pbml0TW91c2VFdmVudChcImNsaWNrXCIsIHRydWUsIHRydWUsIF93aW4sIDEsIGV2ZW50RGF0YS5zY3JlZW5YLCBldmVudERhdGEuc2NyZWVuWSwgZXZlbnREYXRhLmNsaWVudFgsIGV2ZW50RGF0YS5jbGllbnRZLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMCwgbnVsbCk7XG4gICAgICAgICAgICAgICAgZS50YXJnZXQuZGlzcGF0Y2hFdmVudChzeW50aGV0aWNFdmVudCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzZWxmLmlzRHJhZ2dpbmcgPSBzZWxmLmlzR2VzdHVyaW5nID0gc2VsZi5pc1ByZXNzZWQgPSBmYWxzZTtcbiAgICAgIG9uU3RvcCAmJiB3YXNEcmFnZ2luZyAmJiAhaXNOb3JtYWxpemVyICYmIG9uU3RvcERlbGF5ZWRDYWxsLnJlc3RhcnQodHJ1ZSk7XG4gICAgICBvbkRyYWdFbmQgJiYgd2FzRHJhZ2dpbmcgJiYgb25EcmFnRW5kKHNlbGYpO1xuICAgICAgb25SZWxlYXNlICYmIG9uUmVsZWFzZShzZWxmLCBpc0RyYWdOb3RDbGljayk7XG4gICAgfSxcbiAgICAgICAgX29uR2VzdHVyZVN0YXJ0ID0gZnVuY3Rpb24gX29uR2VzdHVyZVN0YXJ0KGUpIHtcbiAgICAgIHJldHVybiBlLnRvdWNoZXMgJiYgZS50b3VjaGVzLmxlbmd0aCA+IDEgJiYgKHNlbGYuaXNHZXN0dXJpbmcgPSB0cnVlKSAmJiBvbkdlc3R1cmVTdGFydChlLCBzZWxmLmlzRHJhZ2dpbmcpO1xuICAgIH0sXG4gICAgICAgIF9vbkdlc3R1cmVFbmQgPSBmdW5jdGlvbiBfb25HZXN0dXJlRW5kKCkge1xuICAgICAgcmV0dXJuIChzZWxmLmlzR2VzdHVyaW5nID0gZmFsc2UpIHx8IG9uR2VzdHVyZUVuZChzZWxmKTtcbiAgICB9LFxuICAgICAgICBvblNjcm9sbCA9IGZ1bmN0aW9uIG9uU2Nyb2xsKGUpIHtcbiAgICAgIGlmIChfaWdub3JlQ2hlY2soZSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgeCA9IHNjcm9sbEZ1bmNYKCksXG4gICAgICAgICAgeSA9IHNjcm9sbEZ1bmNZKCk7XG4gICAgICBvbkRlbHRhKCh4IC0gc2Nyb2xsWCkgKiBzY3JvbGxTcGVlZCwgKHkgLSBzY3JvbGxZKSAqIHNjcm9sbFNwZWVkLCAxKTtcbiAgICAgIHNjcm9sbFggPSB4O1xuICAgICAgc2Nyb2xsWSA9IHk7XG4gICAgICBvblN0b3AgJiYgb25TdG9wRGVsYXllZENhbGwucmVzdGFydCh0cnVlKTtcbiAgICB9LFxuICAgICAgICBfb25XaGVlbCA9IGZ1bmN0aW9uIF9vbldoZWVsKGUpIHtcbiAgICAgIGlmIChfaWdub3JlQ2hlY2soZSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBlID0gX2dldEV2ZW50KGUsIHByZXZlbnREZWZhdWx0KTtcbiAgICAgIG9uV2hlZWwgJiYgKHdoZWVsZWQgPSB0cnVlKTtcbiAgICAgIHZhciBtdWx0aXBsaWVyID0gKGUuZGVsdGFNb2RlID09PSAxID8gbGluZUhlaWdodCA6IGUuZGVsdGFNb2RlID09PSAyID8gX3dpbi5pbm5lckhlaWdodCA6IDEpICogd2hlZWxTcGVlZDtcbiAgICAgIG9uRGVsdGEoZS5kZWx0YVggKiBtdWx0aXBsaWVyLCBlLmRlbHRhWSAqIG11bHRpcGxpZXIsIDApO1xuICAgICAgb25TdG9wICYmICFpc05vcm1hbGl6ZXIgJiYgb25TdG9wRGVsYXllZENhbGwucmVzdGFydCh0cnVlKTtcbiAgICB9LFxuICAgICAgICBfb25Nb3ZlID0gZnVuY3Rpb24gX29uTW92ZShlKSB7XG4gICAgICBpZiAoX2lnbm9yZUNoZWNrKGUpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHggPSBlLmNsaWVudFgsXG4gICAgICAgICAgeSA9IGUuY2xpZW50WSxcbiAgICAgICAgICBkeCA9IHggLSBzZWxmLngsXG4gICAgICAgICAgZHkgPSB5IC0gc2VsZi55O1xuICAgICAgc2VsZi54ID0geDtcbiAgICAgIHNlbGYueSA9IHk7XG4gICAgICBtb3ZlZCA9IHRydWU7XG4gICAgICBvblN0b3AgJiYgb25TdG9wRGVsYXllZENhbGwucmVzdGFydCh0cnVlKTtcbiAgICAgIChkeCB8fCBkeSkgJiYgb25Ub3VjaE9yUG9pbnRlckRlbHRhKGR4LCBkeSk7XG4gICAgfSxcbiAgICAgICAgX29uSG92ZXIgPSBmdW5jdGlvbiBfb25Ib3ZlcihlKSB7XG4gICAgICBzZWxmLmV2ZW50ID0gZTtcbiAgICAgIG9uSG92ZXIoc2VsZik7XG4gICAgfSxcbiAgICAgICAgX29uSG92ZXJFbmQgPSBmdW5jdGlvbiBfb25Ib3ZlckVuZChlKSB7XG4gICAgICBzZWxmLmV2ZW50ID0gZTtcbiAgICAgIG9uSG92ZXJFbmQoc2VsZik7XG4gICAgfSxcbiAgICAgICAgX29uQ2xpY2sgPSBmdW5jdGlvbiBfb25DbGljayhlKSB7XG4gICAgICByZXR1cm4gX2lnbm9yZUNoZWNrKGUpIHx8IF9nZXRFdmVudChlLCBwcmV2ZW50RGVmYXVsdCkgJiYgb25DbGljayhzZWxmKTtcbiAgICB9O1xuXG4gICAgb25TdG9wRGVsYXllZENhbGwgPSBzZWxmLl9kYyA9IGdzYXAuZGVsYXllZENhbGwob25TdG9wRGVsYXkgfHwgMC4yNSwgb25TdG9wRnVuYykucGF1c2UoKTtcbiAgICBzZWxmLmRlbHRhWCA9IHNlbGYuZGVsdGFZID0gMDtcbiAgICBzZWxmLl92eCA9IF9nZXRWZWxvY2l0eVByb3AoMCwgNTAsIHRydWUpO1xuICAgIHNlbGYuX3Z5ID0gX2dldFZlbG9jaXR5UHJvcCgwLCA1MCwgdHJ1ZSk7XG4gICAgc2VsZi5zY3JvbGxYID0gc2Nyb2xsRnVuY1g7XG4gICAgc2VsZi5zY3JvbGxZID0gc2Nyb2xsRnVuY1k7XG4gICAgc2VsZi5pc0RyYWdnaW5nID0gc2VsZi5pc0dlc3R1cmluZyA9IHNlbGYuaXNQcmVzc2VkID0gZmFsc2U7XG5cbiAgICBfY29udGV4dCh0aGlzKTtcblxuICAgIHNlbGYuZW5hYmxlID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmICghc2VsZi5pc0VuYWJsZWQpIHtcbiAgICAgICAgX2FkZExpc3RlbmVyKGlzVmlld3BvcnQgPyBvd25lckRvYyA6IHRhcmdldCwgXCJzY3JvbGxcIiwgX29uU2Nyb2xsKTtcblxuICAgICAgICB0eXBlLmluZGV4T2YoXCJzY3JvbGxcIikgPj0gMCAmJiBfYWRkTGlzdGVuZXIoaXNWaWV3cG9ydCA/IG93bmVyRG9jIDogdGFyZ2V0LCBcInNjcm9sbFwiLCBvblNjcm9sbCwgcGFzc2l2ZSwgY2FwdHVyZSk7XG4gICAgICAgIHR5cGUuaW5kZXhPZihcIndoZWVsXCIpID49IDAgJiYgX2FkZExpc3RlbmVyKHRhcmdldCwgXCJ3aGVlbFwiLCBfb25XaGVlbCwgcGFzc2l2ZSwgY2FwdHVyZSk7XG5cbiAgICAgICAgaWYgKHR5cGUuaW5kZXhPZihcInRvdWNoXCIpID49IDAgJiYgX2lzVG91Y2ggfHwgdHlwZS5pbmRleE9mKFwicG9pbnRlclwiKSA+PSAwKSB7XG4gICAgICAgICAgX2FkZExpc3RlbmVyKHRhcmdldCwgX2V2ZW50VHlwZXNbMF0sIF9vblByZXNzLCBwYXNzaXZlLCBjYXB0dXJlKTtcblxuICAgICAgICAgIF9hZGRMaXN0ZW5lcihvd25lckRvYywgX2V2ZW50VHlwZXNbMl0sIF9vblJlbGVhc2UpO1xuXG4gICAgICAgICAgX2FkZExpc3RlbmVyKG93bmVyRG9jLCBfZXZlbnRUeXBlc1szXSwgX29uUmVsZWFzZSk7XG5cbiAgICAgICAgICBhbGxvd0NsaWNrcyAmJiBfYWRkTGlzdGVuZXIodGFyZ2V0LCBcImNsaWNrXCIsIGNsaWNrQ2FwdHVyZSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgb25DbGljayAmJiBfYWRkTGlzdGVuZXIodGFyZ2V0LCBcImNsaWNrXCIsIF9vbkNsaWNrKTtcbiAgICAgICAgICBvbkdlc3R1cmVTdGFydCAmJiBfYWRkTGlzdGVuZXIob3duZXJEb2MsIFwiZ2VzdHVyZXN0YXJ0XCIsIF9vbkdlc3R1cmVTdGFydCk7XG4gICAgICAgICAgb25HZXN0dXJlRW5kICYmIF9hZGRMaXN0ZW5lcihvd25lckRvYywgXCJnZXN0dXJlZW5kXCIsIF9vbkdlc3R1cmVFbmQpO1xuICAgICAgICAgIG9uSG92ZXIgJiYgX2FkZExpc3RlbmVyKHRhcmdldCwgX3BvaW50ZXJUeXBlICsgXCJlbnRlclwiLCBfb25Ib3Zlcik7XG4gICAgICAgICAgb25Ib3ZlckVuZCAmJiBfYWRkTGlzdGVuZXIodGFyZ2V0LCBfcG9pbnRlclR5cGUgKyBcImxlYXZlXCIsIF9vbkhvdmVyRW5kKTtcbiAgICAgICAgICBvbk1vdmUgJiYgX2FkZExpc3RlbmVyKHRhcmdldCwgX3BvaW50ZXJUeXBlICsgXCJtb3ZlXCIsIF9vbk1vdmUpO1xuICAgICAgICB9XG5cbiAgICAgICAgc2VsZi5pc0VuYWJsZWQgPSB0cnVlO1xuICAgICAgICBlICYmIGUudHlwZSAmJiBfb25QcmVzcyhlKTtcbiAgICAgICAgb25FbmFibGUgJiYgb25FbmFibGUoc2VsZik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzZWxmO1xuICAgIH07XG5cbiAgICBzZWxmLmRpc2FibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoc2VsZi5pc0VuYWJsZWQpIHtcbiAgICAgICAgLy8gb25seSByZW1vdmUgdGhlIF9vblNjcm9sbCBsaXN0ZW5lciBpZiB0aGVyZSBhcmVuJ3QgYW55IG90aGVycyB0aGF0IHJlbHkgb24gdGhlIGZ1bmN0aW9uYWxpdHkuXG4gICAgICAgIF9vYnNlcnZlcnMuZmlsdGVyKGZ1bmN0aW9uIChvKSB7XG4gICAgICAgICAgcmV0dXJuIG8gIT09IHNlbGYgJiYgX2lzVmlld3BvcnQoby50YXJnZXQpO1xuICAgICAgICB9KS5sZW5ndGggfHwgX3JlbW92ZUxpc3RlbmVyKGlzVmlld3BvcnQgPyBvd25lckRvYyA6IHRhcmdldCwgXCJzY3JvbGxcIiwgX29uU2Nyb2xsKTtcblxuICAgICAgICBpZiAoc2VsZi5pc1ByZXNzZWQpIHtcbiAgICAgICAgICBzZWxmLl92eC5yZXNldCgpO1xuXG4gICAgICAgICAgc2VsZi5fdnkucmVzZXQoKTtcblxuICAgICAgICAgIF9yZW1vdmVMaXN0ZW5lcihpc05vcm1hbGl6ZXIgPyB0YXJnZXQgOiBvd25lckRvYywgX2V2ZW50VHlwZXNbMV0sIF9vbkRyYWcsIHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgX3JlbW92ZUxpc3RlbmVyKGlzVmlld3BvcnQgPyBvd25lckRvYyA6IHRhcmdldCwgXCJzY3JvbGxcIiwgb25TY3JvbGwsIGNhcHR1cmUpO1xuXG4gICAgICAgIF9yZW1vdmVMaXN0ZW5lcih0YXJnZXQsIFwid2hlZWxcIiwgX29uV2hlZWwsIGNhcHR1cmUpO1xuXG4gICAgICAgIF9yZW1vdmVMaXN0ZW5lcih0YXJnZXQsIF9ldmVudFR5cGVzWzBdLCBfb25QcmVzcywgY2FwdHVyZSk7XG5cbiAgICAgICAgX3JlbW92ZUxpc3RlbmVyKG93bmVyRG9jLCBfZXZlbnRUeXBlc1syXSwgX29uUmVsZWFzZSk7XG5cbiAgICAgICAgX3JlbW92ZUxpc3RlbmVyKG93bmVyRG9jLCBfZXZlbnRUeXBlc1szXSwgX29uUmVsZWFzZSk7XG5cbiAgICAgICAgX3JlbW92ZUxpc3RlbmVyKHRhcmdldCwgXCJjbGlja1wiLCBjbGlja0NhcHR1cmUsIHRydWUpO1xuXG4gICAgICAgIF9yZW1vdmVMaXN0ZW5lcih0YXJnZXQsIFwiY2xpY2tcIiwgX29uQ2xpY2spO1xuXG4gICAgICAgIF9yZW1vdmVMaXN0ZW5lcihvd25lckRvYywgXCJnZXN0dXJlc3RhcnRcIiwgX29uR2VzdHVyZVN0YXJ0KTtcblxuICAgICAgICBfcmVtb3ZlTGlzdGVuZXIob3duZXJEb2MsIFwiZ2VzdHVyZWVuZFwiLCBfb25HZXN0dXJlRW5kKTtcblxuICAgICAgICBfcmVtb3ZlTGlzdGVuZXIodGFyZ2V0LCBfcG9pbnRlclR5cGUgKyBcImVudGVyXCIsIF9vbkhvdmVyKTtcblxuICAgICAgICBfcmVtb3ZlTGlzdGVuZXIodGFyZ2V0LCBfcG9pbnRlclR5cGUgKyBcImxlYXZlXCIsIF9vbkhvdmVyRW5kKTtcblxuICAgICAgICBfcmVtb3ZlTGlzdGVuZXIodGFyZ2V0LCBfcG9pbnRlclR5cGUgKyBcIm1vdmVcIiwgX29uTW92ZSk7XG5cbiAgICAgICAgc2VsZi5pc0VuYWJsZWQgPSBzZWxmLmlzUHJlc3NlZCA9IHNlbGYuaXNEcmFnZ2luZyA9IGZhbHNlO1xuICAgICAgICBvbkRpc2FibGUgJiYgb25EaXNhYmxlKHNlbGYpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBzZWxmLmtpbGwgPSBzZWxmLnJldmVydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHNlbGYuZGlzYWJsZSgpO1xuXG4gICAgICB2YXIgaSA9IF9vYnNlcnZlcnMuaW5kZXhPZihzZWxmKTtcblxuICAgICAgaSA+PSAwICYmIF9vYnNlcnZlcnMuc3BsaWNlKGksIDEpO1xuICAgICAgX25vcm1hbGl6ZXIgPT09IHNlbGYgJiYgKF9ub3JtYWxpemVyID0gMCk7XG4gICAgfTtcblxuICAgIF9vYnNlcnZlcnMucHVzaChzZWxmKTtcblxuICAgIGlzTm9ybWFsaXplciAmJiBfaXNWaWV3cG9ydCh0YXJnZXQpICYmIChfbm9ybWFsaXplciA9IHNlbGYpO1xuICAgIHNlbGYuZW5hYmxlKGV2ZW50KTtcbiAgfTtcblxuICBfY3JlYXRlQ2xhc3MoT2JzZXJ2ZXIsIFt7XG4gICAga2V5OiBcInZlbG9jaXR5WFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3Z4LmdldFZlbG9jaXR5KCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInZlbG9jaXR5WVwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3Z5LmdldFZlbG9jaXR5KCk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIE9ic2VydmVyO1xufSgpO1xuT2JzZXJ2ZXIudmVyc2lvbiA9IFwiMy4xMi41XCI7XG5cbk9ic2VydmVyLmNyZWF0ZSA9IGZ1bmN0aW9uICh2YXJzKSB7XG4gIHJldHVybiBuZXcgT2JzZXJ2ZXIodmFycyk7XG59O1xuXG5PYnNlcnZlci5yZWdpc3RlciA9IF9pbml0Q29yZTtcblxuT2JzZXJ2ZXIuZ2V0QWxsID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gX29ic2VydmVycy5zbGljZSgpO1xufTtcblxuT2JzZXJ2ZXIuZ2V0QnlJZCA9IGZ1bmN0aW9uIChpZCkge1xuICByZXR1cm4gX29ic2VydmVycy5maWx0ZXIoZnVuY3Rpb24gKG8pIHtcbiAgICByZXR1cm4gby52YXJzLmlkID09PSBpZDtcbiAgfSlbMF07XG59O1xuXG5fZ2V0R1NBUCgpICYmIGdzYXAucmVnaXN0ZXJQbHVnaW4oT2JzZXJ2ZXIpO1xuZXhwb3J0IHsgT2JzZXJ2ZXIgYXMgZGVmYXVsdCwgX2lzVmlld3BvcnQsIF9zY3JvbGxlcnMsIF9nZXRTY3JvbGxGdW5jLCBfZ2V0UHJveHlQcm9wLCBfcHJveGllcywgX2dldFZlbG9jaXR5UHJvcCwgX3ZlcnRpY2FsLCBfaG9yaXpvbnRhbCwgX2dldFRhcmdldCB9OyIsIi8qIVxuICogU2Nyb2xsVHJpZ2dlciAzLjEyLjVcbiAqIGh0dHBzOi8vZ3NhcC5jb21cbiAqXG4gKiBAbGljZW5zZSBDb3B5cmlnaHQgMjAwOC0yMDI0LCBHcmVlblNvY2suIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBTdWJqZWN0IHRvIHRoZSB0ZXJtcyBhdCBodHRwczovL2dzYXAuY29tL3N0YW5kYXJkLWxpY2Vuc2Ugb3IgZm9yXG4gKiBDbHViIEdTQVAgbWVtYmVycywgdGhlIGFncmVlbWVudCBpc3N1ZWQgd2l0aCB0aGF0IG1lbWJlcnNoaXAuXG4gKiBAYXV0aG9yOiBKYWNrIERveWxlLCBqYWNrQGdyZWVuc29jay5jb21cbiovXG5cbi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgeyBPYnNlcnZlciwgX2dldFRhcmdldCwgX3ZlcnRpY2FsLCBfaG9yaXpvbnRhbCwgX3Njcm9sbGVycywgX3Byb3hpZXMsIF9nZXRTY3JvbGxGdW5jLCBfZ2V0UHJveHlQcm9wLCBfZ2V0VmVsb2NpdHlQcm9wIH0gZnJvbSBcIi4vT2JzZXJ2ZXIuanNcIjtcblxudmFyIGdzYXAsXG4gICAgX2NvcmVJbml0dGVkLFxuICAgIF93aW4sXG4gICAgX2RvYyxcbiAgICBfZG9jRWwsXG4gICAgX2JvZHksXG4gICAgX3Jvb3QsXG4gICAgX3Jlc2l6ZURlbGF5LFxuICAgIF90b0FycmF5LFxuICAgIF9jbGFtcCxcbiAgICBfdGltZTIsXG4gICAgX3N5bmNJbnRlcnZhbCxcbiAgICBfcmVmcmVzaGluZyxcbiAgICBfcG9pbnRlcklzRG93bixcbiAgICBfdHJhbnNmb3JtUHJvcCxcbiAgICBfaSxcbiAgICBfcHJldldpZHRoLFxuICAgIF9wcmV2SGVpZ2h0LFxuICAgIF9hdXRvUmVmcmVzaCxcbiAgICBfc29ydCxcbiAgICBfc3VwcHJlc3NPdmVyd3JpdGVzLFxuICAgIF9pZ25vcmVSZXNpemUsXG4gICAgX25vcm1hbGl6ZXIsXG4gICAgX2lnbm9yZU1vYmlsZVJlc2l6ZSxcbiAgICBfYmFzZVNjcmVlbkhlaWdodCxcbiAgICBfYmFzZVNjcmVlbldpZHRoLFxuICAgIF9maXhJT1NCdWcsXG4gICAgX2NvbnRleHQsXG4gICAgX3Njcm9sbFJlc3RvcmF0aW9uLFxuICAgIF9kaXYxMDB2aCxcbiAgICBfMTAwdmgsXG4gICAgX2lzUmV2ZXJ0ZWQsXG4gICAgX2NsYW1waW5nTWF4LFxuICAgIF9saW1pdENhbGxiYWNrcyxcbiAgICAvLyBpZiB0cnVlLCB3ZSdsbCBvbmx5IHRyaWdnZXIgY2FsbGJhY2tzIGlmIHRoZSBhY3RpdmUgc3RhdGUgdG9nZ2xlcywgc28gaWYgeW91IHNjcm9sbCBpbW1lZGlhdGVseSBwYXN0IGJvdGggdGhlIHN0YXJ0IGFuZCBlbmQgcG9zaXRpb25zIG9mIGEgU2Nyb2xsVHJpZ2dlciAodGh1cyBpbmFjdGl2ZSB0byBpbmFjdGl2ZSksIG5laXRoZXIgaXRzIG9uRW50ZXIgbm9yIG9uTGVhdmUgd2lsbCBiZSBjYWxsZWQuIFRoaXMgaXMgdXNlZnVsIGR1cmluZyBzdGFydHVwLlxuX3N0YXJ0dXAgPSAxLFxuICAgIF9nZXRUaW1lID0gRGF0ZS5ub3csXG4gICAgX3RpbWUxID0gX2dldFRpbWUoKSxcbiAgICBfbGFzdFNjcm9sbFRpbWUgPSAwLFxuICAgIF9lbmFibGVkID0gMCxcbiAgICBfcGFyc2VDbGFtcCA9IGZ1bmN0aW9uIF9wYXJzZUNsYW1wKHZhbHVlLCB0eXBlLCBzZWxmKSB7XG4gIHZhciBjbGFtcCA9IF9pc1N0cmluZyh2YWx1ZSkgJiYgKHZhbHVlLnN1YnN0cigwLCA2KSA9PT0gXCJjbGFtcChcIiB8fCB2YWx1ZS5pbmRleE9mKFwibWF4XCIpID4gLTEpO1xuICBzZWxmW1wiX1wiICsgdHlwZSArIFwiQ2xhbXBcIl0gPSBjbGFtcDtcbiAgcmV0dXJuIGNsYW1wID8gdmFsdWUuc3Vic3RyKDYsIHZhbHVlLmxlbmd0aCAtIDcpIDogdmFsdWU7XG59LFxuICAgIF9rZWVwQ2xhbXAgPSBmdW5jdGlvbiBfa2VlcENsYW1wKHZhbHVlLCBjbGFtcCkge1xuICByZXR1cm4gY2xhbXAgJiYgKCFfaXNTdHJpbmcodmFsdWUpIHx8IHZhbHVlLnN1YnN0cigwLCA2KSAhPT0gXCJjbGFtcChcIikgPyBcImNsYW1wKFwiICsgdmFsdWUgKyBcIilcIiA6IHZhbHVlO1xufSxcbiAgICBfcmFmQnVnRml4ID0gZnVuY3Rpb24gX3JhZkJ1Z0ZpeCgpIHtcbiAgcmV0dXJuIF9lbmFibGVkICYmIHJlcXVlc3RBbmltYXRpb25GcmFtZShfcmFmQnVnRml4KTtcbn0sXG4gICAgLy8gaW4gc29tZSBicm93c2VycyAobGlrZSBGaXJlZm94KSwgc2NyZWVuIHJlcGFpbnRzIHdlcmVuJ3QgY29uc2lzdGVudCB1bmxlc3Mgd2UgaGFkIFNPTUVUSElORyBxdWV1ZWQgdXAgaW4gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCkhIFNvIHRoaXMganVzdCBjcmVhdGVzIGEgc3VwZXIgc2ltcGxlIGxvb3AgdG8ga2VlcCBpdCBhbGl2ZSBhbmQgc21vb3RoIG91dCByZXBhaW50cy5cbl9wb2ludGVyRG93bkhhbmRsZXIgPSBmdW5jdGlvbiBfcG9pbnRlckRvd25IYW5kbGVyKCkge1xuICByZXR1cm4gX3BvaW50ZXJJc0Rvd24gPSAxO1xufSxcbiAgICBfcG9pbnRlclVwSGFuZGxlciA9IGZ1bmN0aW9uIF9wb2ludGVyVXBIYW5kbGVyKCkge1xuICByZXR1cm4gX3BvaW50ZXJJc0Rvd24gPSAwO1xufSxcbiAgICBfcGFzc1Rocm91Z2ggPSBmdW5jdGlvbiBfcGFzc1Rocm91Z2godikge1xuICByZXR1cm4gdjtcbn0sXG4gICAgX3JvdW5kID0gZnVuY3Rpb24gX3JvdW5kKHZhbHVlKSB7XG4gIHJldHVybiBNYXRoLnJvdW5kKHZhbHVlICogMTAwMDAwKSAvIDEwMDAwMCB8fCAwO1xufSxcbiAgICBfd2luZG93RXhpc3RzID0gZnVuY3Rpb24gX3dpbmRvd0V4aXN0cygpIHtcbiAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCI7XG59LFxuICAgIF9nZXRHU0FQID0gZnVuY3Rpb24gX2dldEdTQVAoKSB7XG4gIHJldHVybiBnc2FwIHx8IF93aW5kb3dFeGlzdHMoKSAmJiAoZ3NhcCA9IHdpbmRvdy5nc2FwKSAmJiBnc2FwLnJlZ2lzdGVyUGx1Z2luICYmIGdzYXA7XG59LFxuICAgIF9pc1ZpZXdwb3J0ID0gZnVuY3Rpb24gX2lzVmlld3BvcnQoZSkge1xuICByZXR1cm4gISF+X3Jvb3QuaW5kZXhPZihlKTtcbn0sXG4gICAgX2dldFZpZXdwb3J0RGltZW5zaW9uID0gZnVuY3Rpb24gX2dldFZpZXdwb3J0RGltZW5zaW9uKGRpbWVuc2lvblByb3BlcnR5KSB7XG4gIHJldHVybiAoZGltZW5zaW9uUHJvcGVydHkgPT09IFwiSGVpZ2h0XCIgPyBfMTAwdmggOiBfd2luW1wiaW5uZXJcIiArIGRpbWVuc2lvblByb3BlcnR5XSkgfHwgX2RvY0VsW1wiY2xpZW50XCIgKyBkaW1lbnNpb25Qcm9wZXJ0eV0gfHwgX2JvZHlbXCJjbGllbnRcIiArIGRpbWVuc2lvblByb3BlcnR5XTtcbn0sXG4gICAgX2dldEJvdW5kc0Z1bmMgPSBmdW5jdGlvbiBfZ2V0Qm91bmRzRnVuYyhlbGVtZW50KSB7XG4gIHJldHVybiBfZ2V0UHJveHlQcm9wKGVsZW1lbnQsIFwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0XCIpIHx8IChfaXNWaWV3cG9ydChlbGVtZW50KSA/IGZ1bmN0aW9uICgpIHtcbiAgICBfd2luT2Zmc2V0cy53aWR0aCA9IF93aW4uaW5uZXJXaWR0aDtcbiAgICBfd2luT2Zmc2V0cy5oZWlnaHQgPSBfMTAwdmg7XG4gICAgcmV0dXJuIF93aW5PZmZzZXRzO1xuICB9IDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfZ2V0Qm91bmRzKGVsZW1lbnQpO1xuICB9KTtcbn0sXG4gICAgX2dldFNpemVGdW5jID0gZnVuY3Rpb24gX2dldFNpemVGdW5jKHNjcm9sbGVyLCBpc1ZpZXdwb3J0LCBfcmVmKSB7XG4gIHZhciBkID0gX3JlZi5kLFxuICAgICAgZDIgPSBfcmVmLmQyLFxuICAgICAgYSA9IF9yZWYuYTtcbiAgcmV0dXJuIChhID0gX2dldFByb3h5UHJvcChzY3JvbGxlciwgXCJnZXRCb3VuZGluZ0NsaWVudFJlY3RcIikpID8gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBhKClbZF07XG4gIH0gOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIChpc1ZpZXdwb3J0ID8gX2dldFZpZXdwb3J0RGltZW5zaW9uKGQyKSA6IHNjcm9sbGVyW1wiY2xpZW50XCIgKyBkMl0pIHx8IDA7XG4gIH07XG59LFxuICAgIF9nZXRPZmZzZXRzRnVuYyA9IGZ1bmN0aW9uIF9nZXRPZmZzZXRzRnVuYyhlbGVtZW50LCBpc1ZpZXdwb3J0KSB7XG4gIHJldHVybiAhaXNWaWV3cG9ydCB8fCB+X3Byb3hpZXMuaW5kZXhPZihlbGVtZW50KSA/IF9nZXRCb3VuZHNGdW5jKGVsZW1lbnQpIDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfd2luT2Zmc2V0cztcbiAgfTtcbn0sXG4gICAgX21heFNjcm9sbCA9IGZ1bmN0aW9uIF9tYXhTY3JvbGwoZWxlbWVudCwgX3JlZjIpIHtcbiAgdmFyIHMgPSBfcmVmMi5zLFxuICAgICAgZDIgPSBfcmVmMi5kMixcbiAgICAgIGQgPSBfcmVmMi5kLFxuICAgICAgYSA9IF9yZWYyLmE7XG4gIHJldHVybiBNYXRoLm1heCgwLCAocyA9IFwic2Nyb2xsXCIgKyBkMikgJiYgKGEgPSBfZ2V0UHJveHlQcm9wKGVsZW1lbnQsIHMpKSA/IGEoKSAtIF9nZXRCb3VuZHNGdW5jKGVsZW1lbnQpKClbZF0gOiBfaXNWaWV3cG9ydChlbGVtZW50KSA/IChfZG9jRWxbc10gfHwgX2JvZHlbc10pIC0gX2dldFZpZXdwb3J0RGltZW5zaW9uKGQyKSA6IGVsZW1lbnRbc10gLSBlbGVtZW50W1wib2Zmc2V0XCIgKyBkMl0pO1xufSxcbiAgICBfaXRlcmF0ZUF1dG9SZWZyZXNoID0gZnVuY3Rpb24gX2l0ZXJhdGVBdXRvUmVmcmVzaChmdW5jLCBldmVudHMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBfYXV0b1JlZnJlc2gubGVuZ3RoOyBpICs9IDMpIHtcbiAgICAoIWV2ZW50cyB8fCB+ZXZlbnRzLmluZGV4T2YoX2F1dG9SZWZyZXNoW2kgKyAxXSkpICYmIGZ1bmMoX2F1dG9SZWZyZXNoW2ldLCBfYXV0b1JlZnJlc2hbaSArIDFdLCBfYXV0b1JlZnJlc2hbaSArIDJdKTtcbiAgfVxufSxcbiAgICBfaXNTdHJpbmcgPSBmdW5jdGlvbiBfaXNTdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIjtcbn0sXG4gICAgX2lzRnVuY3Rpb24gPSBmdW5jdGlvbiBfaXNGdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCI7XG59LFxuICAgIF9pc051bWJlciA9IGZ1bmN0aW9uIF9pc051bWJlcih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiO1xufSxcbiAgICBfaXNPYmplY3QgPSBmdW5jdGlvbiBfaXNPYmplY3QodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIjtcbn0sXG4gICAgX2VuZEFuaW1hdGlvbiA9IGZ1bmN0aW9uIF9lbmRBbmltYXRpb24oYW5pbWF0aW9uLCByZXZlcnNlZCwgcGF1c2UpIHtcbiAgcmV0dXJuIGFuaW1hdGlvbiAmJiBhbmltYXRpb24ucHJvZ3Jlc3MocmV2ZXJzZWQgPyAwIDogMSkgJiYgcGF1c2UgJiYgYW5pbWF0aW9uLnBhdXNlKCk7XG59LFxuICAgIF9jYWxsYmFjayA9IGZ1bmN0aW9uIF9jYWxsYmFjayhzZWxmLCBmdW5jKSB7XG4gIGlmIChzZWxmLmVuYWJsZWQpIHtcbiAgICB2YXIgcmVzdWx0ID0gc2VsZi5fY3R4ID8gc2VsZi5fY3R4LmFkZChmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZnVuYyhzZWxmKTtcbiAgICB9KSA6IGZ1bmMoc2VsZik7XG4gICAgcmVzdWx0ICYmIHJlc3VsdC50b3RhbFRpbWUgJiYgKHNlbGYuY2FsbGJhY2tBbmltYXRpb24gPSByZXN1bHQpO1xuICB9XG59LFxuICAgIF9hYnMgPSBNYXRoLmFicyxcbiAgICBfbGVmdCA9IFwibGVmdFwiLFxuICAgIF90b3AgPSBcInRvcFwiLFxuICAgIF9yaWdodCA9IFwicmlnaHRcIixcbiAgICBfYm90dG9tID0gXCJib3R0b21cIixcbiAgICBfd2lkdGggPSBcIndpZHRoXCIsXG4gICAgX2hlaWdodCA9IFwiaGVpZ2h0XCIsXG4gICAgX1JpZ2h0ID0gXCJSaWdodFwiLFxuICAgIF9MZWZ0ID0gXCJMZWZ0XCIsXG4gICAgX1RvcCA9IFwiVG9wXCIsXG4gICAgX0JvdHRvbSA9IFwiQm90dG9tXCIsXG4gICAgX3BhZGRpbmcgPSBcInBhZGRpbmdcIixcbiAgICBfbWFyZ2luID0gXCJtYXJnaW5cIixcbiAgICBfV2lkdGggPSBcIldpZHRoXCIsXG4gICAgX0hlaWdodCA9IFwiSGVpZ2h0XCIsXG4gICAgX3B4ID0gXCJweFwiLFxuICAgIF9nZXRDb21wdXRlZFN0eWxlID0gZnVuY3Rpb24gX2dldENvbXB1dGVkU3R5bGUoZWxlbWVudCkge1xuICByZXR1cm4gX3dpbi5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xufSxcbiAgICBfbWFrZVBvc2l0aW9uYWJsZSA9IGZ1bmN0aW9uIF9tYWtlUG9zaXRpb25hYmxlKGVsZW1lbnQpIHtcbiAgLy8gaWYgdGhlIGVsZW1lbnQgYWxyZWFkeSBoYXMgcG9zaXRpb246IGFic29sdXRlIG9yIGZpeGVkLCBsZWF2ZSB0aGF0LCBvdGhlcndpc2UgbWFrZSBpdCBwb3NpdGlvbjogcmVsYXRpdmVcbiAgdmFyIHBvc2l0aW9uID0gX2dldENvbXB1dGVkU3R5bGUoZWxlbWVudCkucG9zaXRpb247XG5cbiAgZWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9IHBvc2l0aW9uID09PSBcImFic29sdXRlXCIgfHwgcG9zaXRpb24gPT09IFwiZml4ZWRcIiA/IHBvc2l0aW9uIDogXCJyZWxhdGl2ZVwiO1xufSxcbiAgICBfc2V0RGVmYXVsdHMgPSBmdW5jdGlvbiBfc2V0RGVmYXVsdHMob2JqLCBkZWZhdWx0cykge1xuICBmb3IgKHZhciBwIGluIGRlZmF1bHRzKSB7XG4gICAgcCBpbiBvYmogfHwgKG9ialtwXSA9IGRlZmF1bHRzW3BdKTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59LFxuICAgIF9nZXRCb3VuZHMgPSBmdW5jdGlvbiBfZ2V0Qm91bmRzKGVsZW1lbnQsIHdpdGhvdXRUcmFuc2Zvcm1zKSB7XG4gIHZhciB0d2VlbiA9IHdpdGhvdXRUcmFuc2Zvcm1zICYmIF9nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpW190cmFuc2Zvcm1Qcm9wXSAhPT0gXCJtYXRyaXgoMSwgMCwgMCwgMSwgMCwgMClcIiAmJiBnc2FwLnRvKGVsZW1lbnQsIHtcbiAgICB4OiAwLFxuICAgIHk6IDAsXG4gICAgeFBlcmNlbnQ6IDAsXG4gICAgeVBlcmNlbnQ6IDAsXG4gICAgcm90YXRpb246IDAsXG4gICAgcm90YXRpb25YOiAwLFxuICAgIHJvdGF0aW9uWTogMCxcbiAgICBzY2FsZTogMSxcbiAgICBza2V3WDogMCxcbiAgICBza2V3WTogMFxuICB9KS5wcm9ncmVzcygxKSxcbiAgICAgIGJvdW5kcyA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIHR3ZWVuICYmIHR3ZWVuLnByb2dyZXNzKDApLmtpbGwoKTtcbiAgcmV0dXJuIGJvdW5kcztcbn0sXG4gICAgX2dldFNpemUgPSBmdW5jdGlvbiBfZ2V0U2l6ZShlbGVtZW50LCBfcmVmMykge1xuICB2YXIgZDIgPSBfcmVmMy5kMjtcbiAgcmV0dXJuIGVsZW1lbnRbXCJvZmZzZXRcIiArIGQyXSB8fCBlbGVtZW50W1wiY2xpZW50XCIgKyBkMl0gfHwgMDtcbn0sXG4gICAgX2dldExhYmVsUmF0aW9BcnJheSA9IGZ1bmN0aW9uIF9nZXRMYWJlbFJhdGlvQXJyYXkodGltZWxpbmUpIHtcbiAgdmFyIGEgPSBbXSxcbiAgICAgIGxhYmVscyA9IHRpbWVsaW5lLmxhYmVscyxcbiAgICAgIGR1cmF0aW9uID0gdGltZWxpbmUuZHVyYXRpb24oKSxcbiAgICAgIHA7XG5cbiAgZm9yIChwIGluIGxhYmVscykge1xuICAgIGEucHVzaChsYWJlbHNbcF0gLyBkdXJhdGlvbik7XG4gIH1cblxuICByZXR1cm4gYTtcbn0sXG4gICAgX2dldENsb3Nlc3RMYWJlbCA9IGZ1bmN0aW9uIF9nZXRDbG9zZXN0TGFiZWwoYW5pbWF0aW9uKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gZ3NhcC51dGlscy5zbmFwKF9nZXRMYWJlbFJhdGlvQXJyYXkoYW5pbWF0aW9uKSwgdmFsdWUpO1xuICB9O1xufSxcbiAgICBfc25hcERpcmVjdGlvbmFsID0gZnVuY3Rpb24gX3NuYXBEaXJlY3Rpb25hbChzbmFwSW5jcmVtZW50T3JBcnJheSkge1xuICB2YXIgc25hcCA9IGdzYXAudXRpbHMuc25hcChzbmFwSW5jcmVtZW50T3JBcnJheSksXG4gICAgICBhID0gQXJyYXkuaXNBcnJheShzbmFwSW5jcmVtZW50T3JBcnJheSkgJiYgc25hcEluY3JlbWVudE9yQXJyYXkuc2xpY2UoMCkuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBhIC0gYjtcbiAgfSk7XG4gIHJldHVybiBhID8gZnVuY3Rpb24gKHZhbHVlLCBkaXJlY3Rpb24sIHRocmVzaG9sZCkge1xuICAgIGlmICh0aHJlc2hvbGQgPT09IHZvaWQgMCkge1xuICAgICAgdGhyZXNob2xkID0gMWUtMztcbiAgICB9XG5cbiAgICB2YXIgaTtcblxuICAgIGlmICghZGlyZWN0aW9uKSB7XG4gICAgICByZXR1cm4gc25hcCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgaWYgKGRpcmVjdGlvbiA+IDApIHtcbiAgICAgIHZhbHVlIC09IHRocmVzaG9sZDsgLy8gdG8gYXZvaWQgcm91bmRpbmcgZXJyb3JzLiBJZiB3ZSdyZSB0b28gc3RyaWN0LCBpdCBtaWdodCBzbmFwIGZvcndhcmQsIHRoZW4gaW1tZWRpYXRlbHkgYWdhaW4sIGFuZCBhZ2Fpbi5cblxuICAgICAgZm9yIChpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGFbaV0gPj0gdmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gYVtpXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gYVtpIC0gMV07XG4gICAgfSBlbHNlIHtcbiAgICAgIGkgPSBhLmxlbmd0aDtcbiAgICAgIHZhbHVlICs9IHRocmVzaG9sZDtcblxuICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICBpZiAoYVtpXSA8PSB2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBhW2ldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGFbMF07XG4gIH0gOiBmdW5jdGlvbiAodmFsdWUsIGRpcmVjdGlvbiwgdGhyZXNob2xkKSB7XG4gICAgaWYgKHRocmVzaG9sZCA9PT0gdm9pZCAwKSB7XG4gICAgICB0aHJlc2hvbGQgPSAxZS0zO1xuICAgIH1cblxuICAgIHZhciBzbmFwcGVkID0gc25hcCh2YWx1ZSk7XG4gICAgcmV0dXJuICFkaXJlY3Rpb24gfHwgTWF0aC5hYnMoc25hcHBlZCAtIHZhbHVlKSA8IHRocmVzaG9sZCB8fCBzbmFwcGVkIC0gdmFsdWUgPCAwID09PSBkaXJlY3Rpb24gPCAwID8gc25hcHBlZCA6IHNuYXAoZGlyZWN0aW9uIDwgMCA/IHZhbHVlIC0gc25hcEluY3JlbWVudE9yQXJyYXkgOiB2YWx1ZSArIHNuYXBJbmNyZW1lbnRPckFycmF5KTtcbiAgfTtcbn0sXG4gICAgX2dldExhYmVsQXREaXJlY3Rpb24gPSBmdW5jdGlvbiBfZ2V0TGFiZWxBdERpcmVjdGlvbih0aW1lbGluZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlLCBzdCkge1xuICAgIHJldHVybiBfc25hcERpcmVjdGlvbmFsKF9nZXRMYWJlbFJhdGlvQXJyYXkodGltZWxpbmUpKSh2YWx1ZSwgc3QuZGlyZWN0aW9uKTtcbiAgfTtcbn0sXG4gICAgX211bHRpTGlzdGVuZXIgPSBmdW5jdGlvbiBfbXVsdGlMaXN0ZW5lcihmdW5jLCBlbGVtZW50LCB0eXBlcywgY2FsbGJhY2spIHtcbiAgcmV0dXJuIHR5cGVzLnNwbGl0KFwiLFwiKS5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgcmV0dXJuIGZ1bmMoZWxlbWVudCwgdHlwZSwgY2FsbGJhY2spO1xuICB9KTtcbn0sXG4gICAgX2FkZExpc3RlbmVyID0gZnVuY3Rpb24gX2FkZExpc3RlbmVyKGVsZW1lbnQsIHR5cGUsIGZ1bmMsIG5vblBhc3NpdmUsIGNhcHR1cmUpIHtcbiAgcmV0dXJuIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBmdW5jLCB7XG4gICAgcGFzc2l2ZTogIW5vblBhc3NpdmUsXG4gICAgY2FwdHVyZTogISFjYXB0dXJlXG4gIH0pO1xufSxcbiAgICBfcmVtb3ZlTGlzdGVuZXIgPSBmdW5jdGlvbiBfcmVtb3ZlTGlzdGVuZXIoZWxlbWVudCwgdHlwZSwgZnVuYywgY2FwdHVyZSkge1xuICByZXR1cm4gZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGZ1bmMsICEhY2FwdHVyZSk7XG59LFxuICAgIF93aGVlbExpc3RlbmVyID0gZnVuY3Rpb24gX3doZWVsTGlzdGVuZXIoZnVuYywgZWwsIHNjcm9sbEZ1bmMpIHtcbiAgc2Nyb2xsRnVuYyA9IHNjcm9sbEZ1bmMgJiYgc2Nyb2xsRnVuYy53aGVlbEhhbmRsZXI7XG5cbiAgaWYgKHNjcm9sbEZ1bmMpIHtcbiAgICBmdW5jKGVsLCBcIndoZWVsXCIsIHNjcm9sbEZ1bmMpO1xuICAgIGZ1bmMoZWwsIFwidG91Y2htb3ZlXCIsIHNjcm9sbEZ1bmMpO1xuICB9XG59LFxuICAgIF9tYXJrZXJEZWZhdWx0cyA9IHtcbiAgc3RhcnRDb2xvcjogXCJncmVlblwiLFxuICBlbmRDb2xvcjogXCJyZWRcIixcbiAgaW5kZW50OiAwLFxuICBmb250U2l6ZTogXCIxNnB4XCIsXG4gIGZvbnRXZWlnaHQ6IFwibm9ybWFsXCJcbn0sXG4gICAgX2RlZmF1bHRzID0ge1xuICB0b2dnbGVBY3Rpb25zOiBcInBsYXlcIixcbiAgYW50aWNpcGF0ZVBpbjogMFxufSxcbiAgICBfa2V5d29yZHMgPSB7XG4gIHRvcDogMCxcbiAgbGVmdDogMCxcbiAgY2VudGVyOiAwLjUsXG4gIGJvdHRvbTogMSxcbiAgcmlnaHQ6IDFcbn0sXG4gICAgX29mZnNldFRvUHggPSBmdW5jdGlvbiBfb2Zmc2V0VG9QeCh2YWx1ZSwgc2l6ZSkge1xuICBpZiAoX2lzU3RyaW5nKHZhbHVlKSkge1xuICAgIHZhciBlcUluZGV4ID0gdmFsdWUuaW5kZXhPZihcIj1cIiksXG4gICAgICAgIHJlbGF0aXZlID0gfmVxSW5kZXggPyArKHZhbHVlLmNoYXJBdChlcUluZGV4IC0gMSkgKyAxKSAqIHBhcnNlRmxvYXQodmFsdWUuc3Vic3RyKGVxSW5kZXggKyAxKSkgOiAwO1xuXG4gICAgaWYgKH5lcUluZGV4KSB7XG4gICAgICB2YWx1ZS5pbmRleE9mKFwiJVwiKSA+IGVxSW5kZXggJiYgKHJlbGF0aXZlICo9IHNpemUgLyAxMDApO1xuICAgICAgdmFsdWUgPSB2YWx1ZS5zdWJzdHIoMCwgZXFJbmRleCAtIDEpO1xuICAgIH1cblxuICAgIHZhbHVlID0gcmVsYXRpdmUgKyAodmFsdWUgaW4gX2tleXdvcmRzID8gX2tleXdvcmRzW3ZhbHVlXSAqIHNpemUgOiB+dmFsdWUuaW5kZXhPZihcIiVcIikgPyBwYXJzZUZsb2F0KHZhbHVlKSAqIHNpemUgLyAxMDAgOiBwYXJzZUZsb2F0KHZhbHVlKSB8fCAwKTtcbiAgfVxuXG4gIHJldHVybiB2YWx1ZTtcbn0sXG4gICAgX2NyZWF0ZU1hcmtlciA9IGZ1bmN0aW9uIF9jcmVhdGVNYXJrZXIodHlwZSwgbmFtZSwgY29udGFpbmVyLCBkaXJlY3Rpb24sIF9yZWY0LCBvZmZzZXQsIG1hdGNoV2lkdGhFbCwgY29udGFpbmVyQW5pbWF0aW9uKSB7XG4gIHZhciBzdGFydENvbG9yID0gX3JlZjQuc3RhcnRDb2xvcixcbiAgICAgIGVuZENvbG9yID0gX3JlZjQuZW5kQ29sb3IsXG4gICAgICBmb250U2l6ZSA9IF9yZWY0LmZvbnRTaXplLFxuICAgICAgaW5kZW50ID0gX3JlZjQuaW5kZW50LFxuICAgICAgZm9udFdlaWdodCA9IF9yZWY0LmZvbnRXZWlnaHQ7XG5cbiAgdmFyIGUgPSBfZG9jLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksXG4gICAgICB1c2VGaXhlZFBvc2l0aW9uID0gX2lzVmlld3BvcnQoY29udGFpbmVyKSB8fCBfZ2V0UHJveHlQcm9wKGNvbnRhaW5lciwgXCJwaW5UeXBlXCIpID09PSBcImZpeGVkXCIsXG4gICAgICBpc1Njcm9sbGVyID0gdHlwZS5pbmRleE9mKFwic2Nyb2xsZXJcIikgIT09IC0xLFxuICAgICAgcGFyZW50ID0gdXNlRml4ZWRQb3NpdGlvbiA/IF9ib2R5IDogY29udGFpbmVyLFxuICAgICAgaXNTdGFydCA9IHR5cGUuaW5kZXhPZihcInN0YXJ0XCIpICE9PSAtMSxcbiAgICAgIGNvbG9yID0gaXNTdGFydCA/IHN0YXJ0Q29sb3IgOiBlbmRDb2xvcixcbiAgICAgIGNzcyA9IFwiYm9yZGVyLWNvbG9yOlwiICsgY29sb3IgKyBcIjtmb250LXNpemU6XCIgKyBmb250U2l6ZSArIFwiO2NvbG9yOlwiICsgY29sb3IgKyBcIjtmb250LXdlaWdodDpcIiArIGZvbnRXZWlnaHQgKyBcIjtwb2ludGVyLWV2ZW50czpub25lO3doaXRlLXNwYWNlOm5vd3JhcDtmb250LWZhbWlseTpzYW5zLXNlcmlmLEFyaWFsO3otaW5kZXg6MTAwMDtwYWRkaW5nOjRweCA4cHg7Ym9yZGVyLXdpZHRoOjA7Ym9yZGVyLXN0eWxlOnNvbGlkO1wiO1xuXG4gIGNzcyArPSBcInBvc2l0aW9uOlwiICsgKChpc1Njcm9sbGVyIHx8IGNvbnRhaW5lckFuaW1hdGlvbikgJiYgdXNlRml4ZWRQb3NpdGlvbiA/IFwiZml4ZWQ7XCIgOiBcImFic29sdXRlO1wiKTtcbiAgKGlzU2Nyb2xsZXIgfHwgY29udGFpbmVyQW5pbWF0aW9uIHx8ICF1c2VGaXhlZFBvc2l0aW9uKSAmJiAoY3NzICs9IChkaXJlY3Rpb24gPT09IF92ZXJ0aWNhbCA/IF9yaWdodCA6IF9ib3R0b20pICsgXCI6XCIgKyAob2Zmc2V0ICsgcGFyc2VGbG9hdChpbmRlbnQpKSArIFwicHg7XCIpO1xuICBtYXRjaFdpZHRoRWwgJiYgKGNzcyArPSBcImJveC1zaXppbmc6Ym9yZGVyLWJveDt0ZXh0LWFsaWduOmxlZnQ7d2lkdGg6XCIgKyBtYXRjaFdpZHRoRWwub2Zmc2V0V2lkdGggKyBcInB4O1wiKTtcbiAgZS5faXNTdGFydCA9IGlzU3RhcnQ7XG4gIGUuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJnc2FwLW1hcmtlci1cIiArIHR5cGUgKyAobmFtZSA/IFwiIG1hcmtlci1cIiArIG5hbWUgOiBcIlwiKSk7XG4gIGUuc3R5bGUuY3NzVGV4dCA9IGNzcztcbiAgZS5pbm5lclRleHQgPSBuYW1lIHx8IG5hbWUgPT09IDAgPyB0eXBlICsgXCItXCIgKyBuYW1lIDogdHlwZTtcbiAgcGFyZW50LmNoaWxkcmVuWzBdID8gcGFyZW50Lmluc2VydEJlZm9yZShlLCBwYXJlbnQuY2hpbGRyZW5bMF0pIDogcGFyZW50LmFwcGVuZENoaWxkKGUpO1xuICBlLl9vZmZzZXQgPSBlW1wib2Zmc2V0XCIgKyBkaXJlY3Rpb24ub3AuZDJdO1xuXG4gIF9wb3NpdGlvbk1hcmtlcihlLCAwLCBkaXJlY3Rpb24sIGlzU3RhcnQpO1xuXG4gIHJldHVybiBlO1xufSxcbiAgICBfcG9zaXRpb25NYXJrZXIgPSBmdW5jdGlvbiBfcG9zaXRpb25NYXJrZXIobWFya2VyLCBzdGFydCwgZGlyZWN0aW9uLCBmbGlwcGVkKSB7XG4gIHZhciB2YXJzID0ge1xuICAgIGRpc3BsYXk6IFwiYmxvY2tcIlxuICB9LFxuICAgICAgc2lkZSA9IGRpcmVjdGlvbltmbGlwcGVkID8gXCJvczJcIiA6IFwicDJcIl0sXG4gICAgICBvcHBvc2l0ZVNpZGUgPSBkaXJlY3Rpb25bZmxpcHBlZCA/IFwicDJcIiA6IFwib3MyXCJdO1xuICBtYXJrZXIuX2lzRmxpcHBlZCA9IGZsaXBwZWQ7XG4gIHZhcnNbZGlyZWN0aW9uLmEgKyBcIlBlcmNlbnRcIl0gPSBmbGlwcGVkID8gLTEwMCA6IDA7XG4gIHZhcnNbZGlyZWN0aW9uLmFdID0gZmxpcHBlZCA/IFwiMXB4XCIgOiAwO1xuICB2YXJzW1wiYm9yZGVyXCIgKyBzaWRlICsgX1dpZHRoXSA9IDE7XG4gIHZhcnNbXCJib3JkZXJcIiArIG9wcG9zaXRlU2lkZSArIF9XaWR0aF0gPSAwO1xuICB2YXJzW2RpcmVjdGlvbi5wXSA9IHN0YXJ0ICsgXCJweFwiO1xuICBnc2FwLnNldChtYXJrZXIsIHZhcnMpO1xufSxcbiAgICBfdHJpZ2dlcnMgPSBbXSxcbiAgICBfaWRzID0ge30sXG4gICAgX3JhZklELFxuICAgIF9zeW5jID0gZnVuY3Rpb24gX3N5bmMoKSB7XG4gIHJldHVybiBfZ2V0VGltZSgpIC0gX2xhc3RTY3JvbGxUaW1lID4gMzQgJiYgKF9yYWZJRCB8fCAoX3JhZklEID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKF91cGRhdGVBbGwpKSk7XG59LFxuICAgIF9vblNjcm9sbCA9IGZ1bmN0aW9uIF9vblNjcm9sbCgpIHtcbiAgLy8gcHJldmlvdXNseSwgd2UgdHJpZWQgdG8gb3B0aW1pemUgcGVyZm9ybWFuY2UgYnkgYmF0Y2hpbmcvZGVmZXJyaW5nIHRvIHRoZSBuZXh0IHJlcXVlc3RBbmltYXRpb25GcmFtZSgpLCBidXQgZGlzY292ZXJlZCB0aGF0IFNhZmFyaSBoYXMgYSBmZXcgYnVncyB0aGF0IG1ha2UgdGhpcyB1bndvcmthYmxlIChlc3BlY2lhbGx5IG9uIGlPUykuIFNlZSBodHRwczovL2NvZGVwZW4uaW8vR3JlZW5Tb2NrL3Blbi8xNmM0MzViMTJlZjA5YzM4MTI1MjA0ODE4ZTdiNDVmYz9lZGl0b3JzPTAwMTAgYW5kIGh0dHBzOi8vY29kZXBlbi5pby9HcmVlblNvY2svcGVuL0pqT3hZcFEvM2RkNjVjY2VjNWE2MGYxZDg2MmMzNTVkODRkMTQ1NjI/ZWRpdG9ycz0wMDEwIGFuZCBodHRwczovL2NvZGVwZW4uaW8vR3JlZW5Tb2NrL3Blbi9FeGJyUE5hLzA4N2NlZjE5N2RjMzU0NDVhMDk1MWU4OTM1YzQxNTAzP2VkaXRvcnM9MDAxMFxuICBpZiAoIV9ub3JtYWxpemVyIHx8ICFfbm9ybWFsaXplci5pc1ByZXNzZWQgfHwgX25vcm1hbGl6ZXIuc3RhcnRYID4gX2JvZHkuY2xpZW50V2lkdGgpIHtcbiAgICAvLyBpZiB0aGUgdXNlciBpcyBkcmFnZ2luZyB0aGUgc2Nyb2xsYmFyLCBhbGxvdyBpdC5cbiAgICBfc2Nyb2xsZXJzLmNhY2hlKys7XG5cbiAgICBpZiAoX25vcm1hbGl6ZXIpIHtcbiAgICAgIF9yYWZJRCB8fCAoX3JhZklEID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKF91cGRhdGVBbGwpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgX3VwZGF0ZUFsbCgpOyAvLyBTYWZhcmkgaW4gcGFydGljdWxhciAob24gZGVza3RvcCkgTkVFRFMgdGhlIGltbWVkaWF0ZSB1cGRhdGUgcmF0aGVyIHRoYW4gd2FpdGluZyBmb3IgYSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKSB3aGVyZWFzIGlPUyBzZWVtcyB0byBiZW5lZml0IGZyb20gd2FpdGluZyBmb3IgdGhlIHJlcXVlc3RBbmltYXRpb25GcmFtZSgpIHRpY2ssIGF0IGxlYXN0IHdoZW4gbm9ybWFsaXppbmcuIFNlZSBodHRwczovL2NvZGVwZW4uaW8vR3JlZW5Tb2NrL3Blbi9xQllvenFPP2VkaXRvcnM9MDExMFxuXG4gICAgfVxuXG4gICAgX2xhc3RTY3JvbGxUaW1lIHx8IF9kaXNwYXRjaChcInNjcm9sbFN0YXJ0XCIpO1xuICAgIF9sYXN0U2Nyb2xsVGltZSA9IF9nZXRUaW1lKCk7XG4gIH1cbn0sXG4gICAgX3NldEJhc2VEaW1lbnNpb25zID0gZnVuY3Rpb24gX3NldEJhc2VEaW1lbnNpb25zKCkge1xuICBfYmFzZVNjcmVlbldpZHRoID0gX3dpbi5pbm5lcldpZHRoO1xuICBfYmFzZVNjcmVlbkhlaWdodCA9IF93aW4uaW5uZXJIZWlnaHQ7XG59LFxuICAgIF9vblJlc2l6ZSA9IGZ1bmN0aW9uIF9vblJlc2l6ZSgpIHtcbiAgX3Njcm9sbGVycy5jYWNoZSsrO1xuICAhX3JlZnJlc2hpbmcgJiYgIV9pZ25vcmVSZXNpemUgJiYgIV9kb2MuZnVsbHNjcmVlbkVsZW1lbnQgJiYgIV9kb2Mud2Via2l0RnVsbHNjcmVlbkVsZW1lbnQgJiYgKCFfaWdub3JlTW9iaWxlUmVzaXplIHx8IF9iYXNlU2NyZWVuV2lkdGggIT09IF93aW4uaW5uZXJXaWR0aCB8fCBNYXRoLmFicyhfd2luLmlubmVySGVpZ2h0IC0gX2Jhc2VTY3JlZW5IZWlnaHQpID4gX3dpbi5pbm5lckhlaWdodCAqIDAuMjUpICYmIF9yZXNpemVEZWxheS5yZXN0YXJ0KHRydWUpO1xufSxcbiAgICAvLyBpZ25vcmUgcmVzaXplcyB0cmlnZ2VyZWQgYnkgcmVmcmVzaCgpXG5fbGlzdGVuZXJzID0ge30sXG4gICAgX2VtcHR5QXJyYXkgPSBbXSxcbiAgICBfc29mdFJlZnJlc2ggPSBmdW5jdGlvbiBfc29mdFJlZnJlc2goKSB7XG4gIHJldHVybiBfcmVtb3ZlTGlzdGVuZXIoU2Nyb2xsVHJpZ2dlciwgXCJzY3JvbGxFbmRcIiwgX3NvZnRSZWZyZXNoKSB8fCBfcmVmcmVzaEFsbCh0cnVlKTtcbn0sXG4gICAgX2Rpc3BhdGNoID0gZnVuY3Rpb24gX2Rpc3BhdGNoKHR5cGUpIHtcbiAgcmV0dXJuIF9saXN0ZW5lcnNbdHlwZV0gJiYgX2xpc3RlbmVyc1t0eXBlXS5tYXAoZnVuY3Rpb24gKGYpIHtcbiAgICByZXR1cm4gZigpO1xuICB9KSB8fCBfZW1wdHlBcnJheTtcbn0sXG4gICAgX3NhdmVkU3R5bGVzID0gW10sXG4gICAgLy8gd2hlbiBTY3JvbGxUcmlnZ2VyLnNhdmVTdHlsZXMoKSBpcyBjYWxsZWQsIHRoZSBpbmxpbmUgc3R5bGVzIGFyZSByZWNvcmRlZCBpbiB0aGlzIEFycmF5IGluIGEgc2VxdWVudGlhbCBmb3JtYXQgbGlrZSBbZWxlbWVudCwgY3NzVGV4dCwgZ3NDYWNoZSwgbWVkaWFdLiBUaGlzIGtlZXBzIGl0IHZlcnkgbWVtb3J5LWVmZmljaWVudCBhbmQgZmFzdCB0byBpdGVyYXRlIHRocm91Z2guXG5fcmV2ZXJ0UmVjb3JkZWQgPSBmdW5jdGlvbiBfcmV2ZXJ0UmVjb3JkZWQobWVkaWEpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBfc2F2ZWRTdHlsZXMubGVuZ3RoOyBpICs9IDUpIHtcbiAgICBpZiAoIW1lZGlhIHx8IF9zYXZlZFN0eWxlc1tpICsgNF0gJiYgX3NhdmVkU3R5bGVzW2kgKyA0XS5xdWVyeSA9PT0gbWVkaWEpIHtcbiAgICAgIF9zYXZlZFN0eWxlc1tpXS5zdHlsZS5jc3NUZXh0ID0gX3NhdmVkU3R5bGVzW2kgKyAxXTtcbiAgICAgIF9zYXZlZFN0eWxlc1tpXS5nZXRCQm94ICYmIF9zYXZlZFN0eWxlc1tpXS5zZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIiwgX3NhdmVkU3R5bGVzW2kgKyAyXSB8fCBcIlwiKTtcbiAgICAgIF9zYXZlZFN0eWxlc1tpICsgM10udW5jYWNoZSA9IDE7XG4gICAgfVxuICB9XG59LFxuICAgIF9yZXZlcnRBbGwgPSBmdW5jdGlvbiBfcmV2ZXJ0QWxsKGtpbGwsIG1lZGlhKSB7XG4gIHZhciB0cmlnZ2VyO1xuXG4gIGZvciAoX2kgPSAwOyBfaSA8IF90cmlnZ2Vycy5sZW5ndGg7IF9pKyspIHtcbiAgICB0cmlnZ2VyID0gX3RyaWdnZXJzW19pXTtcblxuICAgIGlmICh0cmlnZ2VyICYmICghbWVkaWEgfHwgdHJpZ2dlci5fY3R4ID09PSBtZWRpYSkpIHtcbiAgICAgIGlmIChraWxsKSB7XG4gICAgICAgIHRyaWdnZXIua2lsbCgxKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRyaWdnZXIucmV2ZXJ0KHRydWUsIHRydWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIF9pc1JldmVydGVkID0gdHJ1ZTtcbiAgbWVkaWEgJiYgX3JldmVydFJlY29yZGVkKG1lZGlhKTtcbiAgbWVkaWEgfHwgX2Rpc3BhdGNoKFwicmV2ZXJ0XCIpO1xufSxcbiAgICBfY2xlYXJTY3JvbGxNZW1vcnkgPSBmdW5jdGlvbiBfY2xlYXJTY3JvbGxNZW1vcnkoc2Nyb2xsUmVzdG9yYXRpb24sIGZvcmNlKSB7XG4gIC8vIHplcm8tb3V0IGFsbCB0aGUgcmVjb3JkZWQgc2Nyb2xsIHBvc2l0aW9ucy4gRG9uJ3QgdXNlIF90cmlnZ2VycyBiZWNhdXNlIGlmLCBmb3IgZXhhbXBsZSwgLm1hdGNoTWVkaWEoKSBpcyB1c2VkIHRvIGNyZWF0ZSBzb21lIFNjcm9sbFRyaWdnZXJzIGFuZCB0aGVuIHRoZSB1c2VyIHJlc2l6ZXMgYW5kIGl0IHJlbW92ZXMgQUxMIFNjcm9sbFRyaWdnZXJzLCBhbmQgdGhlbiBnbyBiYWNrIHRvIGEgc2l6ZSB3aGVyZSB0aGVyZSBhcmUgU2Nyb2xsVHJpZ2dlcnMsIGl0IHdvdWxkIGhhdmUga2VwdCB0aGUgcG9zaXRpb24ocykgc2F2ZWQgZnJvbSB0aGUgaW5pdGlhbCBzdGF0ZS5cbiAgX3Njcm9sbGVycy5jYWNoZSsrO1xuICAoZm9yY2UgfHwgIV9yZWZyZXNoaW5nQWxsKSAmJiBfc2Nyb2xsZXJzLmZvckVhY2goZnVuY3Rpb24gKG9iaikge1xuICAgIHJldHVybiBfaXNGdW5jdGlvbihvYmopICYmIG9iai5jYWNoZUlEKysgJiYgKG9iai5yZWMgPSAwKTtcbiAgfSk7XG4gIF9pc1N0cmluZyhzY3JvbGxSZXN0b3JhdGlvbikgJiYgKF93aW4uaGlzdG9yeS5zY3JvbGxSZXN0b3JhdGlvbiA9IF9zY3JvbGxSZXN0b3JhdGlvbiA9IHNjcm9sbFJlc3RvcmF0aW9uKTtcbn0sXG4gICAgX3JlZnJlc2hpbmdBbGwsXG4gICAgX3JlZnJlc2hJRCA9IDAsXG4gICAgX3F1ZXVlUmVmcmVzaElELFxuICAgIF9xdWV1ZVJlZnJlc2hBbGwgPSBmdW5jdGlvbiBfcXVldWVSZWZyZXNoQWxsKCkge1xuICAvLyB3ZSBkb24ndCB3YW50IHRvIGNhbGwgX3JlZnJlc2hBbGwoKSBldmVyeSB0aW1lIHdlIGNyZWF0ZSBhIG5ldyBTY3JvbGxUcmlnZ2VyIChmb3IgcGVyZm9ybWFuY2UgcmVhc29ucykgLSBpdCdzIGJldHRlciB0byBiYXRjaCB0aGVtLiBTb21lIGZyYW1ld29ya3MgZHluYW1pY2FsbHkgbG9hZCBjb250ZW50IGFuZCB3ZSBjYW4ndCByZWx5IG9uIHRoZSB3aW5kb3cncyBcImxvYWRcIiBvciBcIkRPTUNvbnRlbnRMb2FkZWRcIiBldmVudHMgdG8gdHJpZ2dlciBpdC5cbiAgaWYgKF9xdWV1ZVJlZnJlc2hJRCAhPT0gX3JlZnJlc2hJRCkge1xuICAgIHZhciBpZCA9IF9xdWV1ZVJlZnJlc2hJRCA9IF9yZWZyZXNoSUQ7XG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBpZCA9PT0gX3JlZnJlc2hJRCAmJiBfcmVmcmVzaEFsbCh0cnVlKTtcbiAgICB9KTtcbiAgfVxufSxcbiAgICBfcmVmcmVzaDEwMHZoID0gZnVuY3Rpb24gX3JlZnJlc2gxMDB2aCgpIHtcbiAgX2JvZHkuYXBwZW5kQ2hpbGQoX2RpdjEwMHZoKTtcblxuICBfMTAwdmggPSAhX25vcm1hbGl6ZXIgJiYgX2RpdjEwMHZoLm9mZnNldEhlaWdodCB8fCBfd2luLmlubmVySGVpZ2h0O1xuXG4gIF9ib2R5LnJlbW92ZUNoaWxkKF9kaXYxMDB2aCk7XG59LFxuICAgIF9oaWRlQWxsTWFya2VycyA9IGZ1bmN0aW9uIF9oaWRlQWxsTWFya2VycyhoaWRlKSB7XG4gIHJldHVybiBfdG9BcnJheShcIi5nc2FwLW1hcmtlci1zdGFydCwgLmdzYXAtbWFya2VyLWVuZCwgLmdzYXAtbWFya2VyLXNjcm9sbGVyLXN0YXJ0LCAuZ3NhcC1tYXJrZXItc2Nyb2xsZXItZW5kXCIpLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgcmV0dXJuIGVsLnN0eWxlLmRpc3BsYXkgPSBoaWRlID8gXCJub25lXCIgOiBcImJsb2NrXCI7XG4gIH0pO1xufSxcbiAgICBfcmVmcmVzaEFsbCA9IGZ1bmN0aW9uIF9yZWZyZXNoQWxsKGZvcmNlLCBza2lwUmV2ZXJ0KSB7XG4gIGlmIChfbGFzdFNjcm9sbFRpbWUgJiYgIWZvcmNlICYmICFfaXNSZXZlcnRlZCkge1xuICAgIF9hZGRMaXN0ZW5lcihTY3JvbGxUcmlnZ2VyLCBcInNjcm9sbEVuZFwiLCBfc29mdFJlZnJlc2gpO1xuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgX3JlZnJlc2gxMDB2aCgpO1xuXG4gIF9yZWZyZXNoaW5nQWxsID0gU2Nyb2xsVHJpZ2dlci5pc1JlZnJlc2hpbmcgPSB0cnVlO1xuXG4gIF9zY3JvbGxlcnMuZm9yRWFjaChmdW5jdGlvbiAob2JqKSB7XG4gICAgcmV0dXJuIF9pc0Z1bmN0aW9uKG9iaikgJiYgKytvYmouY2FjaGVJRCAmJiAob2JqLnJlYyA9IG9iaigpKTtcbiAgfSk7IC8vIGZvcmNlIHRoZSBjbGVhcmluZyBvZiB0aGUgY2FjaGUgYmVjYXVzZSBzb21lIGJyb3dzZXJzIHRha2UgYSBsaXR0bGUgd2hpbGUgdG8gZGlzcGF0Y2ggdGhlIFwic2Nyb2xsXCIgZXZlbnQgYW5kIHRoZSB1c2VyIG1heSBoYXZlIGNoYW5nZWQgdGhlIHNjcm9sbCBwb3NpdGlvbiBhbmQgdGhlbiBjYWxsZWQgU2Nyb2xsVHJpZ2dlci5yZWZyZXNoKCkgcmlnaHQgYXdheVxuXG5cbiAgdmFyIHJlZnJlc2hJbml0cyA9IF9kaXNwYXRjaChcInJlZnJlc2hJbml0XCIpO1xuXG4gIF9zb3J0ICYmIFNjcm9sbFRyaWdnZXIuc29ydCgpO1xuICBza2lwUmV2ZXJ0IHx8IF9yZXZlcnRBbGwoKTtcblxuICBfc2Nyb2xsZXJzLmZvckVhY2goZnVuY3Rpb24gKG9iaikge1xuICAgIGlmIChfaXNGdW5jdGlvbihvYmopKSB7XG4gICAgICBvYmouc21vb3RoICYmIChvYmoudGFyZ2V0LnN0eWxlLnNjcm9sbEJlaGF2aW9yID0gXCJhdXRvXCIpOyAvLyBzbW9vdGggc2Nyb2xsaW5nIGludGVyZmVyZXNcblxuICAgICAgb2JqKDApO1xuICAgIH1cbiAgfSk7XG5cbiAgX3RyaWdnZXJzLnNsaWNlKDApLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcbiAgICByZXR1cm4gdC5yZWZyZXNoKCk7XG4gIH0pOyAvLyBkb24ndCBsb29wIHdpdGggX2kgYmVjYXVzZSBkdXJpbmcgYSByZWZyZXNoKCkgc29tZW9uZSBjb3VsZCBjYWxsIFNjcm9sbFRyaWdnZXIudXBkYXRlKCkgd2hpY2ggd291bGQgaXRlcmF0ZSB0aHJvdWdoIF9pIHJlc3VsdGluZyBpbiBhIHNraXAuXG5cblxuICBfaXNSZXZlcnRlZCA9IGZhbHNlO1xuXG4gIF90cmlnZ2Vycy5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XG4gICAgLy8gbmVzdGVkIHBpbnMgKHBpbm5lZENvbnRhaW5lcikgd2l0aCBwaW5TcGFjaW5nIG1heSBleHBhbmQgdGhlIGNvbnRhaW5lciwgc28gd2UgbXVzdCBhY2NvbW1vZGF0ZSB0aGF0IGhlcmUuXG4gICAgaWYgKHQuX3N1YlBpbk9mZnNldCAmJiB0LnBpbikge1xuICAgICAgdmFyIHByb3AgPSB0LnZhcnMuaG9yaXpvbnRhbCA/IFwib2Zmc2V0V2lkdGhcIiA6IFwib2Zmc2V0SGVpZ2h0XCIsXG4gICAgICAgICAgb3JpZ2luYWwgPSB0LnBpbltwcm9wXTtcbiAgICAgIHQucmV2ZXJ0KHRydWUsIDEpO1xuICAgICAgdC5hZGp1c3RQaW5TcGFjaW5nKHQucGluW3Byb3BdIC0gb3JpZ2luYWwpO1xuICAgICAgdC5yZWZyZXNoKCk7XG4gICAgfVxuICB9KTtcblxuICBfY2xhbXBpbmdNYXggPSAxOyAvLyBwaW5TcGFjaW5nIG1pZ2h0IGJlIHByb3BwaW5nIGEgcGFnZSBvcGVuLCB0aHVzIHdoZW4gd2UgLnNldFBvc2l0aW9ucygpIHRvIGNsYW1wIGEgU2Nyb2xsVHJpZ2dlcidzIGVuZCB3ZSBzaG91bGQgbGVhdmUgdGhlIHBpblNwYWNpbmcgYWxvbmUuIFRoYXQncyB3aGF0IHRoaXMgZmxhZyBpcyBmb3IuXG5cbiAgX2hpZGVBbGxNYXJrZXJzKHRydWUpO1xuXG4gIF90cmlnZ2Vycy5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XG4gICAgLy8gdGhlIHNjcm9sbGVyJ3MgbWF4IHNjcm9sbCBwb3NpdGlvbiBtYXkgY2hhbmdlIGFmdGVyIGFsbCB0aGUgU2Nyb2xsVHJpZ2dlcnMgcmVmcmVzaGVkIChsaWtlIHBpbm5pbmcgY291bGQgcHVzaCBpdCBkb3duKSwgc28gd2UgbmVlZCB0byBsb29wIGJhY2sgYW5kIGNvcnJlY3QgYW55IHdpdGggZW5kOiBcIm1heFwiLiBTYW1lIGZvciBhbnl0aGluZyB3aXRoIGEgY2xhbXBlZCBlbmRcbiAgICB2YXIgbWF4ID0gX21heFNjcm9sbCh0LnNjcm9sbGVyLCB0Ll9kaXIpLFxuICAgICAgICBlbmRDbGFtcCA9IHQudmFycy5lbmQgPT09IFwibWF4XCIgfHwgdC5fZW5kQ2xhbXAgJiYgdC5lbmQgPiBtYXgsXG4gICAgICAgIHN0YXJ0Q2xhbXAgPSB0Ll9zdGFydENsYW1wICYmIHQuc3RhcnQgPj0gbWF4O1xuXG4gICAgKGVuZENsYW1wIHx8IHN0YXJ0Q2xhbXApICYmIHQuc2V0UG9zaXRpb25zKHN0YXJ0Q2xhbXAgPyBtYXggLSAxIDogdC5zdGFydCwgZW5kQ2xhbXAgPyBNYXRoLm1heChzdGFydENsYW1wID8gbWF4IDogdC5zdGFydCArIDEsIG1heCkgOiB0LmVuZCwgdHJ1ZSk7XG4gIH0pO1xuXG4gIF9oaWRlQWxsTWFya2VycyhmYWxzZSk7XG5cbiAgX2NsYW1waW5nTWF4ID0gMDtcbiAgcmVmcmVzaEluaXRzLmZvckVhY2goZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgIHJldHVybiByZXN1bHQgJiYgcmVzdWx0LnJlbmRlciAmJiByZXN1bHQucmVuZGVyKC0xKTtcbiAgfSk7IC8vIGlmIHRoZSBvblJlZnJlc2hJbml0KCkgcmV0dXJucyBhbiBhbmltYXRpb24gKHR5cGljYWxseSBhIGdzYXAuc2V0KCkpLCByZXZlcnQgaXQuIFRoaXMgbWFrZXMgaXQgZWFzeSB0byBwdXQgdGhpbmdzIGluIGEgY2VydGFpbiBzcG90IGJlZm9yZSByZWZyZXNoaW5nIGZvciBtZWFzdXJlbWVudCBwdXJwb3NlcywgYW5kIHRoZW4gcHV0IHRoaW5ncyBiYWNrLlxuXG4gIF9zY3JvbGxlcnMuZm9yRWFjaChmdW5jdGlvbiAob2JqKSB7XG4gICAgaWYgKF9pc0Z1bmN0aW9uKG9iaikpIHtcbiAgICAgIG9iai5zbW9vdGggJiYgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG9iai50YXJnZXQuc3R5bGUuc2Nyb2xsQmVoYXZpb3IgPSBcInNtb290aFwiO1xuICAgICAgfSk7XG4gICAgICBvYmoucmVjICYmIG9iaihvYmoucmVjKTtcbiAgICB9XG4gIH0pO1xuXG4gIF9jbGVhclNjcm9sbE1lbW9yeShfc2Nyb2xsUmVzdG9yYXRpb24sIDEpO1xuXG4gIF9yZXNpemVEZWxheS5wYXVzZSgpO1xuXG4gIF9yZWZyZXNoSUQrKztcbiAgX3JlZnJlc2hpbmdBbGwgPSAyO1xuXG4gIF91cGRhdGVBbGwoMik7XG5cbiAgX3RyaWdnZXJzLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcbiAgICByZXR1cm4gX2lzRnVuY3Rpb24odC52YXJzLm9uUmVmcmVzaCkgJiYgdC52YXJzLm9uUmVmcmVzaCh0KTtcbiAgfSk7XG5cbiAgX3JlZnJlc2hpbmdBbGwgPSBTY3JvbGxUcmlnZ2VyLmlzUmVmcmVzaGluZyA9IGZhbHNlO1xuXG4gIF9kaXNwYXRjaChcInJlZnJlc2hcIik7XG59LFxuICAgIF9sYXN0U2Nyb2xsID0gMCxcbiAgICBfZGlyZWN0aW9uID0gMSxcbiAgICBfcHJpbWFyeSxcbiAgICBfdXBkYXRlQWxsID0gZnVuY3Rpb24gX3VwZGF0ZUFsbChmb3JjZSkge1xuICBpZiAoZm9yY2UgPT09IDIgfHwgIV9yZWZyZXNoaW5nQWxsICYmICFfaXNSZXZlcnRlZCkge1xuICAgIC8vIF9pc1JldmVydGVkIGNvdWxkIGJlIHRydWUgaWYsIGZvciBleGFtcGxlLCBhIG1hdGNoTWVkaWEoKSBpcyBpbiB0aGUgcHJvY2VzcyBvZiBleGVjdXRpbmcuIFdlIGRvbid0IHdhbnQgdG8gdXBkYXRlIGR1cmluZyB0aGUgdGltZSBldmVyeXRoaW5nIGlzIHJldmVydGVkLlxuICAgIFNjcm9sbFRyaWdnZXIuaXNVcGRhdGluZyA9IHRydWU7XG4gICAgX3ByaW1hcnkgJiYgX3ByaW1hcnkudXBkYXRlKDApOyAvLyBTY3JvbGxTbW9vdGhlciB1c2VzIHJlZnJlc2hQcmlvcml0eSAtOTk5OSB0byBiZWNvbWUgdGhlIHByaW1hcnkgdGhhdCBnZXRzIHVwZGF0ZWQgYmVmb3JlIGFsbCBvdGhlcnMgYmVjYXVzZSBpdCBhZmZlY3RzIHRoZSBzY3JvbGwgcG9zaXRpb24uXG5cbiAgICB2YXIgbCA9IF90cmlnZ2Vycy5sZW5ndGgsXG4gICAgICAgIHRpbWUgPSBfZ2V0VGltZSgpLFxuICAgICAgICByZWNvcmRWZWxvY2l0eSA9IHRpbWUgLSBfdGltZTEgPj0gNTAsXG4gICAgICAgIHNjcm9sbCA9IGwgJiYgX3RyaWdnZXJzWzBdLnNjcm9sbCgpO1xuXG4gICAgX2RpcmVjdGlvbiA9IF9sYXN0U2Nyb2xsID4gc2Nyb2xsID8gLTEgOiAxO1xuICAgIF9yZWZyZXNoaW5nQWxsIHx8IChfbGFzdFNjcm9sbCA9IHNjcm9sbCk7XG5cbiAgICBpZiAocmVjb3JkVmVsb2NpdHkpIHtcbiAgICAgIGlmIChfbGFzdFNjcm9sbFRpbWUgJiYgIV9wb2ludGVySXNEb3duICYmIHRpbWUgLSBfbGFzdFNjcm9sbFRpbWUgPiAyMDApIHtcbiAgICAgICAgX2xhc3RTY3JvbGxUaW1lID0gMDtcblxuICAgICAgICBfZGlzcGF0Y2goXCJzY3JvbGxFbmRcIik7XG4gICAgICB9XG5cbiAgICAgIF90aW1lMiA9IF90aW1lMTtcbiAgICAgIF90aW1lMSA9IHRpbWU7XG4gICAgfVxuXG4gICAgaWYgKF9kaXJlY3Rpb24gPCAwKSB7XG4gICAgICBfaSA9IGw7XG5cbiAgICAgIHdoaWxlIChfaS0tID4gMCkge1xuICAgICAgICBfdHJpZ2dlcnNbX2ldICYmIF90cmlnZ2Vyc1tfaV0udXBkYXRlKDAsIHJlY29yZFZlbG9jaXR5KTtcbiAgICAgIH1cblxuICAgICAgX2RpcmVjdGlvbiA9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoX2kgPSAwOyBfaSA8IGw7IF9pKyspIHtcbiAgICAgICAgX3RyaWdnZXJzW19pXSAmJiBfdHJpZ2dlcnNbX2ldLnVwZGF0ZSgwLCByZWNvcmRWZWxvY2l0eSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgU2Nyb2xsVHJpZ2dlci5pc1VwZGF0aW5nID0gZmFsc2U7XG4gIH1cblxuICBfcmFmSUQgPSAwO1xufSxcbiAgICBfcHJvcE5hbWVzVG9Db3B5ID0gW19sZWZ0LCBfdG9wLCBfYm90dG9tLCBfcmlnaHQsIF9tYXJnaW4gKyBfQm90dG9tLCBfbWFyZ2luICsgX1JpZ2h0LCBfbWFyZ2luICsgX1RvcCwgX21hcmdpbiArIF9MZWZ0LCBcImRpc3BsYXlcIiwgXCJmbGV4U2hyaW5rXCIsIFwiZmxvYXRcIiwgXCJ6SW5kZXhcIiwgXCJncmlkQ29sdW1uU3RhcnRcIiwgXCJncmlkQ29sdW1uRW5kXCIsIFwiZ3JpZFJvd1N0YXJ0XCIsIFwiZ3JpZFJvd0VuZFwiLCBcImdyaWRBcmVhXCIsIFwianVzdGlmeVNlbGZcIiwgXCJhbGlnblNlbGZcIiwgXCJwbGFjZVNlbGZcIiwgXCJvcmRlclwiXSxcbiAgICBfc3RhdGVQcm9wcyA9IF9wcm9wTmFtZXNUb0NvcHkuY29uY2F0KFtfd2lkdGgsIF9oZWlnaHQsIFwiYm94U2l6aW5nXCIsIFwibWF4XCIgKyBfV2lkdGgsIFwibWF4XCIgKyBfSGVpZ2h0LCBcInBvc2l0aW9uXCIsIF9tYXJnaW4sIF9wYWRkaW5nLCBfcGFkZGluZyArIF9Ub3AsIF9wYWRkaW5nICsgX1JpZ2h0LCBfcGFkZGluZyArIF9Cb3R0b20sIF9wYWRkaW5nICsgX0xlZnRdKSxcbiAgICBfc3dhcFBpbk91dCA9IGZ1bmN0aW9uIF9zd2FwUGluT3V0KHBpbiwgc3BhY2VyLCBzdGF0ZSkge1xuICBfc2V0U3RhdGUoc3RhdGUpO1xuXG4gIHZhciBjYWNoZSA9IHBpbi5fZ3NhcDtcblxuICBpZiAoY2FjaGUuc3BhY2VySXNOYXRpdmUpIHtcbiAgICBfc2V0U3RhdGUoY2FjaGUuc3BhY2VyU3RhdGUpO1xuICB9IGVsc2UgaWYgKHBpbi5fZ3NhcC5zd2FwcGVkSW4pIHtcbiAgICB2YXIgcGFyZW50ID0gc3BhY2VyLnBhcmVudE5vZGU7XG5cbiAgICBpZiAocGFyZW50KSB7XG4gICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKHBpbiwgc3BhY2VyKTtcbiAgICAgIHBhcmVudC5yZW1vdmVDaGlsZChzcGFjZXIpO1xuICAgIH1cbiAgfVxuXG4gIHBpbi5fZ3NhcC5zd2FwcGVkSW4gPSBmYWxzZTtcbn0sXG4gICAgX3N3YXBQaW5JbiA9IGZ1bmN0aW9uIF9zd2FwUGluSW4ocGluLCBzcGFjZXIsIGNzLCBzcGFjZXJTdGF0ZSkge1xuICBpZiAoIXBpbi5fZ3NhcC5zd2FwcGVkSW4pIHtcbiAgICB2YXIgaSA9IF9wcm9wTmFtZXNUb0NvcHkubGVuZ3RoLFxuICAgICAgICBzcGFjZXJTdHlsZSA9IHNwYWNlci5zdHlsZSxcbiAgICAgICAgcGluU3R5bGUgPSBwaW4uc3R5bGUsXG4gICAgICAgIHA7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBwID0gX3Byb3BOYW1lc1RvQ29weVtpXTtcbiAgICAgIHNwYWNlclN0eWxlW3BdID0gY3NbcF07XG4gICAgfVxuXG4gICAgc3BhY2VyU3R5bGUucG9zaXRpb24gPSBjcy5wb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiID8gXCJhYnNvbHV0ZVwiIDogXCJyZWxhdGl2ZVwiO1xuICAgIGNzLmRpc3BsYXkgPT09IFwiaW5saW5lXCIgJiYgKHNwYWNlclN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiKTtcbiAgICBwaW5TdHlsZVtfYm90dG9tXSA9IHBpblN0eWxlW19yaWdodF0gPSBcImF1dG9cIjtcbiAgICBzcGFjZXJTdHlsZS5mbGV4QmFzaXMgPSBjcy5mbGV4QmFzaXMgfHwgXCJhdXRvXCI7XG4gICAgc3BhY2VyU3R5bGUub3ZlcmZsb3cgPSBcInZpc2libGVcIjtcbiAgICBzcGFjZXJTdHlsZS5ib3hTaXppbmcgPSBcImJvcmRlci1ib3hcIjtcbiAgICBzcGFjZXJTdHlsZVtfd2lkdGhdID0gX2dldFNpemUocGluLCBfaG9yaXpvbnRhbCkgKyBfcHg7XG4gICAgc3BhY2VyU3R5bGVbX2hlaWdodF0gPSBfZ2V0U2l6ZShwaW4sIF92ZXJ0aWNhbCkgKyBfcHg7XG4gICAgc3BhY2VyU3R5bGVbX3BhZGRpbmddID0gcGluU3R5bGVbX21hcmdpbl0gPSBwaW5TdHlsZVtfdG9wXSA9IHBpblN0eWxlW19sZWZ0XSA9IFwiMFwiO1xuXG4gICAgX3NldFN0YXRlKHNwYWNlclN0YXRlKTtcblxuICAgIHBpblN0eWxlW193aWR0aF0gPSBwaW5TdHlsZVtcIm1heFwiICsgX1dpZHRoXSA9IGNzW193aWR0aF07XG4gICAgcGluU3R5bGVbX2hlaWdodF0gPSBwaW5TdHlsZVtcIm1heFwiICsgX0hlaWdodF0gPSBjc1tfaGVpZ2h0XTtcbiAgICBwaW5TdHlsZVtfcGFkZGluZ10gPSBjc1tfcGFkZGluZ107XG5cbiAgICBpZiAocGluLnBhcmVudE5vZGUgIT09IHNwYWNlcikge1xuICAgICAgcGluLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHNwYWNlciwgcGluKTtcbiAgICAgIHNwYWNlci5hcHBlbmRDaGlsZChwaW4pO1xuICAgIH1cblxuICAgIHBpbi5fZ3NhcC5zd2FwcGVkSW4gPSB0cnVlO1xuICB9XG59LFxuICAgIF9jYXBzRXhwID0gLyhbQS1aXSkvZyxcbiAgICBfc2V0U3RhdGUgPSBmdW5jdGlvbiBfc2V0U3RhdGUoc3RhdGUpIHtcbiAgaWYgKHN0YXRlKSB7XG4gICAgdmFyIHN0eWxlID0gc3RhdGUudC5zdHlsZSxcbiAgICAgICAgbCA9IHN0YXRlLmxlbmd0aCxcbiAgICAgICAgaSA9IDAsXG4gICAgICAgIHAsXG4gICAgICAgIHZhbHVlO1xuICAgIChzdGF0ZS50Ll9nc2FwIHx8IGdzYXAuY29yZS5nZXRDYWNoZShzdGF0ZS50KSkudW5jYWNoZSA9IDE7IC8vIG90aGVyd2lzZSB0cmFuc2Zvcm1zIG1heSBiZSBvZmZcblxuICAgIGZvciAoOyBpIDwgbDsgaSArPSAyKSB7XG4gICAgICB2YWx1ZSA9IHN0YXRlW2kgKyAxXTtcbiAgICAgIHAgPSBzdGF0ZVtpXTtcblxuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHN0eWxlW3BdID0gdmFsdWU7XG4gICAgICB9IGVsc2UgaWYgKHN0eWxlW3BdKSB7XG4gICAgICAgIHN0eWxlLnJlbW92ZVByb3BlcnR5KHAucmVwbGFjZShfY2Fwc0V4cCwgXCItJDFcIikudG9Mb3dlckNhc2UoKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59LFxuICAgIF9nZXRTdGF0ZSA9IGZ1bmN0aW9uIF9nZXRTdGF0ZShlbGVtZW50KSB7XG4gIC8vIHJldHVybnMgYW4gQXJyYXkgd2l0aCBhbHRlcm5hdGluZyB2YWx1ZXMgbGlrZSBbcHJvcGVydHksIHZhbHVlLCBwcm9wZXJ0eSwgdmFsdWVdIGFuZCBhIFwidFwiIHByb3BlcnR5IHBvaW50aW5nIHRvIHRoZSB0YXJnZXQgKGVsZW1lbnQpLiBNYWtlcyBpdCBmYXN0IGFuZCBjaGVhcC5cbiAgdmFyIGwgPSBfc3RhdGVQcm9wcy5sZW5ndGgsXG4gICAgICBzdHlsZSA9IGVsZW1lbnQuc3R5bGUsXG4gICAgICBzdGF0ZSA9IFtdLFxuICAgICAgaSA9IDA7XG5cbiAgZm9yICg7IGkgPCBsOyBpKyspIHtcbiAgICBzdGF0ZS5wdXNoKF9zdGF0ZVByb3BzW2ldLCBzdHlsZVtfc3RhdGVQcm9wc1tpXV0pO1xuICB9XG5cbiAgc3RhdGUudCA9IGVsZW1lbnQ7XG4gIHJldHVybiBzdGF0ZTtcbn0sXG4gICAgX2NvcHlTdGF0ZSA9IGZ1bmN0aW9uIF9jb3B5U3RhdGUoc3RhdGUsIG92ZXJyaWRlLCBvbWl0T2Zmc2V0cykge1xuICB2YXIgcmVzdWx0ID0gW10sXG4gICAgICBsID0gc3RhdGUubGVuZ3RoLFxuICAgICAgaSA9IG9taXRPZmZzZXRzID8gOCA6IDAsXG4gICAgICAvLyBza2lwIHRvcCwgbGVmdCwgcmlnaHQsIGJvdHRvbSBpZiBvbWl0T2Zmc2V0cyBpcyB0cnVlXG4gIHA7XG5cbiAgZm9yICg7IGkgPCBsOyBpICs9IDIpIHtcbiAgICBwID0gc3RhdGVbaV07XG4gICAgcmVzdWx0LnB1c2gocCwgcCBpbiBvdmVycmlkZSA/IG92ZXJyaWRlW3BdIDogc3RhdGVbaSArIDFdKTtcbiAgfVxuXG4gIHJlc3VsdC50ID0gc3RhdGUudDtcbiAgcmV0dXJuIHJlc3VsdDtcbn0sXG4gICAgX3dpbk9mZnNldHMgPSB7XG4gIGxlZnQ6IDAsXG4gIHRvcDogMFxufSxcbiAgICAvLyAvLyBwb3RlbnRpYWwgZnV0dXJlIGZlYXR1cmUgKD8pIEFsbG93IHVzZXJzIHRvIGNhbGN1bGF0ZSB3aGVyZSBhIHRyaWdnZXIgaGl0cyAoc2Nyb2xsIHBvc2l0aW9uKSBsaWtlIGdldFNjcm9sbFBvc2l0aW9uKFwiI2lkXCIsIFwidG9wIGJvdHRvbVwiKVxuLy8gX2dldFNjcm9sbFBvc2l0aW9uID0gKHRyaWdnZXIsIHBvc2l0aW9uLCB7c2Nyb2xsZXIsIGNvbnRhaW5lckFuaW1hdGlvbiwgaG9yaXpvbnRhbH0pID0+IHtcbi8vIFx0c2Nyb2xsZXIgPSBfZ2V0VGFyZ2V0KHNjcm9sbGVyIHx8IF93aW4pO1xuLy8gXHRsZXQgZGlyZWN0aW9uID0gaG9yaXpvbnRhbCA/IF9ob3Jpem9udGFsIDogX3ZlcnRpY2FsLFxuLy8gXHRcdGlzVmlld3BvcnQgPSBfaXNWaWV3cG9ydChzY3JvbGxlcik7XG4vLyBcdF9nZXRTaXplRnVuYyhzY3JvbGxlciwgaXNWaWV3cG9ydCwgZGlyZWN0aW9uKTtcbi8vIFx0cmV0dXJuIF9wYXJzZVBvc2l0aW9uKHBvc2l0aW9uLCBfZ2V0VGFyZ2V0KHRyaWdnZXIpLCBfZ2V0U2l6ZUZ1bmMoc2Nyb2xsZXIsIGlzVmlld3BvcnQsIGRpcmVjdGlvbikoKSwgZGlyZWN0aW9uLCBfZ2V0U2Nyb2xsRnVuYyhzY3JvbGxlciwgZGlyZWN0aW9uKSgpLCAwLCAwLCAwLCBfZ2V0T2Zmc2V0c0Z1bmMoc2Nyb2xsZXIsIGlzVmlld3BvcnQpKCksIGlzVmlld3BvcnQgPyAwIDogcGFyc2VGbG9hdChfZ2V0Q29tcHV0ZWRTdHlsZShzY3JvbGxlcilbXCJib3JkZXJcIiArIGRpcmVjdGlvbi5wMiArIF9XaWR0aF0pIHx8IDAsIDAsIGNvbnRhaW5lckFuaW1hdGlvbiA/IGNvbnRhaW5lckFuaW1hdGlvbi5kdXJhdGlvbigpIDogX21heFNjcm9sbChzY3JvbGxlciksIGNvbnRhaW5lckFuaW1hdGlvbik7XG4vLyB9LFxuX3BhcnNlUG9zaXRpb24gPSBmdW5jdGlvbiBfcGFyc2VQb3NpdGlvbih2YWx1ZSwgdHJpZ2dlciwgc2Nyb2xsZXJTaXplLCBkaXJlY3Rpb24sIHNjcm9sbCwgbWFya2VyLCBtYXJrZXJTY3JvbGxlciwgc2VsZiwgc2Nyb2xsZXJCb3VuZHMsIGJvcmRlcldpZHRoLCB1c2VGaXhlZFBvc2l0aW9uLCBzY3JvbGxlck1heCwgY29udGFpbmVyQW5pbWF0aW9uLCBjbGFtcFplcm9Qcm9wKSB7XG4gIF9pc0Z1bmN0aW9uKHZhbHVlKSAmJiAodmFsdWUgPSB2YWx1ZShzZWxmKSk7XG5cbiAgaWYgKF9pc1N0cmluZyh2YWx1ZSkgJiYgdmFsdWUuc3Vic3RyKDAsIDMpID09PSBcIm1heFwiKSB7XG4gICAgdmFsdWUgPSBzY3JvbGxlck1heCArICh2YWx1ZS5jaGFyQXQoNCkgPT09IFwiPVwiID8gX29mZnNldFRvUHgoXCIwXCIgKyB2YWx1ZS5zdWJzdHIoMyksIHNjcm9sbGVyU2l6ZSkgOiAwKTtcbiAgfVxuXG4gIHZhciB0aW1lID0gY29udGFpbmVyQW5pbWF0aW9uID8gY29udGFpbmVyQW5pbWF0aW9uLnRpbWUoKSA6IDAsXG4gICAgICBwMSxcbiAgICAgIHAyLFxuICAgICAgZWxlbWVudDtcbiAgY29udGFpbmVyQW5pbWF0aW9uICYmIGNvbnRhaW5lckFuaW1hdGlvbi5zZWVrKDApO1xuICBpc05hTih2YWx1ZSkgfHwgKHZhbHVlID0gK3ZhbHVlKTsgLy8gY29udmVydCBhIHN0cmluZyBudW1iZXIgbGlrZSBcIjQ1XCIgdG8gYW4gYWN0dWFsIG51bWJlclxuXG4gIGlmICghX2lzTnVtYmVyKHZhbHVlKSkge1xuICAgIF9pc0Z1bmN0aW9uKHRyaWdnZXIpICYmICh0cmlnZ2VyID0gdHJpZ2dlcihzZWxmKSk7XG4gICAgdmFyIG9mZnNldHMgPSAodmFsdWUgfHwgXCIwXCIpLnNwbGl0KFwiIFwiKSxcbiAgICAgICAgYm91bmRzLFxuICAgICAgICBsb2NhbE9mZnNldCxcbiAgICAgICAgZ2xvYmFsT2Zmc2V0LFxuICAgICAgICBkaXNwbGF5O1xuICAgIGVsZW1lbnQgPSBfZ2V0VGFyZ2V0KHRyaWdnZXIsIHNlbGYpIHx8IF9ib2R5O1xuICAgIGJvdW5kcyA9IF9nZXRCb3VuZHMoZWxlbWVudCkgfHwge307XG5cbiAgICBpZiAoKCFib3VuZHMgfHwgIWJvdW5kcy5sZWZ0ICYmICFib3VuZHMudG9wKSAmJiBfZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KS5kaXNwbGF5ID09PSBcIm5vbmVcIikge1xuICAgICAgLy8gaWYgZGlzcGxheSBpcyBcIm5vbmVcIiwgaXQgd29uJ3QgcmVwb3J0IGdldEJvdW5kaW5nQ2xpZW50UmVjdCgpIHByb3Blcmx5XG4gICAgICBkaXNwbGF5ID0gZWxlbWVudC5zdHlsZS5kaXNwbGF5O1xuICAgICAgZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgICAgYm91bmRzID0gX2dldEJvdW5kcyhlbGVtZW50KTtcbiAgICAgIGRpc3BsYXkgPyBlbGVtZW50LnN0eWxlLmRpc3BsYXkgPSBkaXNwbGF5IDogZWxlbWVudC5zdHlsZS5yZW1vdmVQcm9wZXJ0eShcImRpc3BsYXlcIik7XG4gICAgfVxuXG4gICAgbG9jYWxPZmZzZXQgPSBfb2Zmc2V0VG9QeChvZmZzZXRzWzBdLCBib3VuZHNbZGlyZWN0aW9uLmRdKTtcbiAgICBnbG9iYWxPZmZzZXQgPSBfb2Zmc2V0VG9QeChvZmZzZXRzWzFdIHx8IFwiMFwiLCBzY3JvbGxlclNpemUpO1xuICAgIHZhbHVlID0gYm91bmRzW2RpcmVjdGlvbi5wXSAtIHNjcm9sbGVyQm91bmRzW2RpcmVjdGlvbi5wXSAtIGJvcmRlcldpZHRoICsgbG9jYWxPZmZzZXQgKyBzY3JvbGwgLSBnbG9iYWxPZmZzZXQ7XG4gICAgbWFya2VyU2Nyb2xsZXIgJiYgX3Bvc2l0aW9uTWFya2VyKG1hcmtlclNjcm9sbGVyLCBnbG9iYWxPZmZzZXQsIGRpcmVjdGlvbiwgc2Nyb2xsZXJTaXplIC0gZ2xvYmFsT2Zmc2V0IDwgMjAgfHwgbWFya2VyU2Nyb2xsZXIuX2lzU3RhcnQgJiYgZ2xvYmFsT2Zmc2V0ID4gMjApO1xuICAgIHNjcm9sbGVyU2l6ZSAtPSBzY3JvbGxlclNpemUgLSBnbG9iYWxPZmZzZXQ7IC8vIGFkanVzdCBmb3IgdGhlIG1hcmtlclxuICB9IGVsc2Uge1xuICAgIGNvbnRhaW5lckFuaW1hdGlvbiAmJiAodmFsdWUgPSBnc2FwLnV0aWxzLm1hcFJhbmdlKGNvbnRhaW5lckFuaW1hdGlvbi5zY3JvbGxUcmlnZ2VyLnN0YXJ0LCBjb250YWluZXJBbmltYXRpb24uc2Nyb2xsVHJpZ2dlci5lbmQsIDAsIHNjcm9sbGVyTWF4LCB2YWx1ZSkpO1xuICAgIG1hcmtlclNjcm9sbGVyICYmIF9wb3NpdGlvbk1hcmtlcihtYXJrZXJTY3JvbGxlciwgc2Nyb2xsZXJTaXplLCBkaXJlY3Rpb24sIHRydWUpO1xuICB9XG5cbiAgaWYgKGNsYW1wWmVyb1Byb3ApIHtcbiAgICBzZWxmW2NsYW1wWmVyb1Byb3BdID0gdmFsdWUgfHwgLTAuMDAxO1xuICAgIHZhbHVlIDwgMCAmJiAodmFsdWUgPSAwKTtcbiAgfVxuXG4gIGlmIChtYXJrZXIpIHtcbiAgICB2YXIgcG9zaXRpb24gPSB2YWx1ZSArIHNjcm9sbGVyU2l6ZSxcbiAgICAgICAgaXNTdGFydCA9IG1hcmtlci5faXNTdGFydDtcbiAgICBwMSA9IFwic2Nyb2xsXCIgKyBkaXJlY3Rpb24uZDI7XG5cbiAgICBfcG9zaXRpb25NYXJrZXIobWFya2VyLCBwb3NpdGlvbiwgZGlyZWN0aW9uLCBpc1N0YXJ0ICYmIHBvc2l0aW9uID4gMjAgfHwgIWlzU3RhcnQgJiYgKHVzZUZpeGVkUG9zaXRpb24gPyBNYXRoLm1heChfYm9keVtwMV0sIF9kb2NFbFtwMV0pIDogbWFya2VyLnBhcmVudE5vZGVbcDFdKSA8PSBwb3NpdGlvbiArIDEpO1xuXG4gICAgaWYgKHVzZUZpeGVkUG9zaXRpb24pIHtcbiAgICAgIHNjcm9sbGVyQm91bmRzID0gX2dldEJvdW5kcyhtYXJrZXJTY3JvbGxlcik7XG4gICAgICB1c2VGaXhlZFBvc2l0aW9uICYmIChtYXJrZXIuc3R5bGVbZGlyZWN0aW9uLm9wLnBdID0gc2Nyb2xsZXJCb3VuZHNbZGlyZWN0aW9uLm9wLnBdIC0gZGlyZWN0aW9uLm9wLm0gLSBtYXJrZXIuX29mZnNldCArIF9weCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKGNvbnRhaW5lckFuaW1hdGlvbiAmJiBlbGVtZW50KSB7XG4gICAgcDEgPSBfZ2V0Qm91bmRzKGVsZW1lbnQpO1xuICAgIGNvbnRhaW5lckFuaW1hdGlvbi5zZWVrKHNjcm9sbGVyTWF4KTtcbiAgICBwMiA9IF9nZXRCb3VuZHMoZWxlbWVudCk7XG4gICAgY29udGFpbmVyQW5pbWF0aW9uLl9jYVNjcm9sbERpc3QgPSBwMVtkaXJlY3Rpb24ucF0gLSBwMltkaXJlY3Rpb24ucF07XG4gICAgdmFsdWUgPSB2YWx1ZSAvIGNvbnRhaW5lckFuaW1hdGlvbi5fY2FTY3JvbGxEaXN0ICogc2Nyb2xsZXJNYXg7XG4gIH1cblxuICBjb250YWluZXJBbmltYXRpb24gJiYgY29udGFpbmVyQW5pbWF0aW9uLnNlZWsodGltZSk7XG4gIHJldHVybiBjb250YWluZXJBbmltYXRpb24gPyB2YWx1ZSA6IE1hdGgucm91bmQodmFsdWUpO1xufSxcbiAgICBfcHJlZml4RXhwID0gLyh3ZWJraXR8bW96fGxlbmd0aHxjc3NUZXh0fGluc2V0KS9pLFxuICAgIF9yZXBhcmVudCA9IGZ1bmN0aW9uIF9yZXBhcmVudChlbGVtZW50LCBwYXJlbnQsIHRvcCwgbGVmdCkge1xuICBpZiAoZWxlbWVudC5wYXJlbnROb2RlICE9PSBwYXJlbnQpIHtcbiAgICB2YXIgc3R5bGUgPSBlbGVtZW50LnN0eWxlLFxuICAgICAgICBwLFxuICAgICAgICBjcztcblxuICAgIGlmIChwYXJlbnQgPT09IF9ib2R5KSB7XG4gICAgICBlbGVtZW50Ll9zdE9yaWcgPSBzdHlsZS5jc3NUZXh0OyAvLyByZWNvcmQgb3JpZ2luYWwgaW5saW5lIHN0eWxlcyBzbyB3ZSBjYW4gcmV2ZXJ0IHRoZW0gbGF0ZXJcblxuICAgICAgY3MgPSBfZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcblxuICAgICAgZm9yIChwIGluIGNzKSB7XG4gICAgICAgIC8vIG11c3QgY29weSBhbGwgcmVsZXZhbnQgc3R5bGVzIHRvIGVuc3VyZSB0aGF0IG5vdGhpbmcgY2hhbmdlcyB2aXN1YWxseSB3aGVuIHdlIHJlcGFyZW50IHRvIHRoZSA8Ym9keT4uIFNraXAgdGhlIHZlbmRvciBwcmVmaXhlZCBvbmVzLlxuICAgICAgICBpZiAoIStwICYmICFfcHJlZml4RXhwLnRlc3QocCkgJiYgY3NbcF0gJiYgdHlwZW9mIHN0eWxlW3BdID09PSBcInN0cmluZ1wiICYmIHAgIT09IFwiMFwiKSB7XG4gICAgICAgICAgc3R5bGVbcF0gPSBjc1twXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzdHlsZS50b3AgPSB0b3A7XG4gICAgICBzdHlsZS5sZWZ0ID0gbGVmdDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGUuY3NzVGV4dCA9IGVsZW1lbnQuX3N0T3JpZztcbiAgICB9XG5cbiAgICBnc2FwLmNvcmUuZ2V0Q2FjaGUoZWxlbWVudCkudW5jYWNoZSA9IDE7XG4gICAgcGFyZW50LmFwcGVuZENoaWxkKGVsZW1lbnQpO1xuICB9XG59LFxuICAgIF9pbnRlcnJ1cHRpb25UcmFja2VyID0gZnVuY3Rpb24gX2ludGVycnVwdGlvblRyYWNrZXIoZ2V0VmFsdWVGdW5jLCBpbml0aWFsVmFsdWUsIG9uSW50ZXJydXB0KSB7XG4gIHZhciBsYXN0MSA9IGluaXRpYWxWYWx1ZSxcbiAgICAgIGxhc3QyID0gbGFzdDE7XG4gIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICB2YXIgY3VycmVudCA9IE1hdGgucm91bmQoZ2V0VmFsdWVGdW5jKCkpOyAvLyByb3VuZCBiZWNhdXNlIGluIHNvbWUgW3ZlcnkgdW5jb21tb25dIFdpbmRvd3MgZW52aXJvbm1lbnRzLCBzY3JvbGwgY2FuIGdldCByZXBvcnRlZCB3aXRoIGRlY2ltYWxzIGV2ZW4gdGhvdWdoIGl0IHdhcyBzZXQgd2l0aG91dC5cblxuICAgIGlmIChjdXJyZW50ICE9PSBsYXN0MSAmJiBjdXJyZW50ICE9PSBsYXN0MiAmJiBNYXRoLmFicyhjdXJyZW50IC0gbGFzdDEpID4gMyAmJiBNYXRoLmFicyhjdXJyZW50IC0gbGFzdDIpID4gMykge1xuICAgICAgLy8gaWYgdGhlIHVzZXIgc2Nyb2xscywga2lsbCB0aGUgdHdlZW4uIGlPUyBTYWZhcmkgaW50ZXJtaXR0ZW50bHkgbWlzcmVwb3J0cyB0aGUgc2Nyb2xsIHBvc2l0aW9uLCBpdCBtYXkgYmUgdGhlIG1vc3QgcmVjZW50bHktc2V0IG9uZSBvciB0aGUgb25lIGJlZm9yZSB0aGF0ISBXaGVuIFNhZmFyaSBpcyB6b29tZWQgKENNRC0rKSwgaXQgb2Z0ZW4gbWlzcmVwb3J0cyBhcyAxIHBpeGVsIG9mZiB0b28hIFNvIGlmIHdlIHNldCB0aGUgc2Nyb2xsIHBvc2l0aW9uIHRvIDEyNSwgZm9yIGV4YW1wbGUsIGl0J2xsIGFjdHVhbGx5IHJlcG9ydCBpdCBhcyAxMjQuXG4gICAgICB2YWx1ZSA9IGN1cnJlbnQ7XG4gICAgICBvbkludGVycnVwdCAmJiBvbkludGVycnVwdCgpO1xuICAgIH1cblxuICAgIGxhc3QyID0gbGFzdDE7XG4gICAgbGFzdDEgPSB2YWx1ZTtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH07XG59LFxuICAgIF9zaGlmdE1hcmtlciA9IGZ1bmN0aW9uIF9zaGlmdE1hcmtlcihtYXJrZXIsIGRpcmVjdGlvbiwgdmFsdWUpIHtcbiAgdmFyIHZhcnMgPSB7fTtcbiAgdmFyc1tkaXJlY3Rpb24ucF0gPSBcIis9XCIgKyB2YWx1ZTtcbiAgZ3NhcC5zZXQobWFya2VyLCB2YXJzKTtcbn0sXG4gICAgLy8gX21lcmdlQW5pbWF0aW9ucyA9IGFuaW1hdGlvbnMgPT4ge1xuLy8gXHRsZXQgdGwgPSBnc2FwLnRpbWVsaW5lKHtzbW9vdGhDaGlsZFRpbWluZzogdHJ1ZX0pLnN0YXJ0VGltZShNYXRoLm1pbiguLi5hbmltYXRpb25zLm1hcChhID0+IGEuZ2xvYmFsVGltZSgwKSkpKTtcbi8vIFx0YW5pbWF0aW9ucy5mb3JFYWNoKGEgPT4ge2xldCB0aW1lID0gYS50b3RhbFRpbWUoKTsgdGwuYWRkKGEpOyBhLnRvdGFsVGltZSh0aW1lKTsgfSk7XG4vLyBcdHRsLnNtb290aENoaWxkVGltaW5nID0gZmFsc2U7XG4vLyBcdHJldHVybiB0bDtcbi8vIH0sXG4vLyByZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBjYW4gYmUgdXNlZCB0byB0d2VlbiB0aGUgc2Nyb2xsIHBvc2l0aW9uIGluIHRoZSBkaXJlY3Rpb24gcHJvdmlkZWQsIGFuZCB3aGVuIGRvaW5nIHNvIGl0J2xsIGFkZCBhIC50d2VlbiBwcm9wZXJ0eSB0byB0aGUgRlVOQ1RJT04gaXRzZWxmLCBhbmQgcmVtb3ZlIGl0IHdoZW4gdGhlIHR3ZWVuIGNvbXBsZXRlcyBvciBnZXRzIGtpbGxlZC4gVGhpcyBnaXZlcyB1cyBhIHdheSB0byBoYXZlIG11bHRpcGxlIFNjcm9sbFRyaWdnZXJzIHVzZSBhIGNlbnRyYWwgZnVuY3Rpb24gZm9yIGFueSBnaXZlbiBzY3JvbGxlciBhbmQgc2VlIGlmIHRoZXJlJ3MgYSBzY3JvbGwgdHdlZW4gcnVubmluZyAod2hpY2ggd291bGQgYWZmZWN0IGlmL2hvdyB0aGluZ3MgZ2V0IHVwZGF0ZWQpXG5fZ2V0VHdlZW5DcmVhdG9yID0gZnVuY3Rpb24gX2dldFR3ZWVuQ3JlYXRvcihzY3JvbGxlciwgZGlyZWN0aW9uKSB7XG4gIHZhciBnZXRTY3JvbGwgPSBfZ2V0U2Nyb2xsRnVuYyhzY3JvbGxlciwgZGlyZWN0aW9uKSxcbiAgICAgIHByb3AgPSBcIl9zY3JvbGxcIiArIGRpcmVjdGlvbi5wMixcbiAgICAgIC8vIGFkZCBhIHR3ZWVuYWJsZSBwcm9wZXJ0eSB0byB0aGUgc2Nyb2xsZXIgdGhhdCdzIGEgZ2V0dGVyL3NldHRlciBmdW5jdGlvbiwgbGlrZSBfc2Nyb2xsVG9wIG9yIF9zY3JvbGxMZWZ0LiBUaGlzIHdheSwgaWYgc29tZW9uZSBkb2VzIGdzYXAua2lsbFR3ZWVuc09mKHNjcm9sbGVyKSBpdCdsbCBraWxsIHRoZSBzY3JvbGwgdHdlZW4uXG4gIGdldFR3ZWVuID0gZnVuY3Rpb24gZ2V0VHdlZW4oc2Nyb2xsVG8sIHZhcnMsIGluaXRpYWxWYWx1ZSwgY2hhbmdlMSwgY2hhbmdlMikge1xuICAgIHZhciB0d2VlbiA9IGdldFR3ZWVuLnR3ZWVuLFxuICAgICAgICBvbkNvbXBsZXRlID0gdmFycy5vbkNvbXBsZXRlLFxuICAgICAgICBtb2RpZmllcnMgPSB7fTtcbiAgICBpbml0aWFsVmFsdWUgPSBpbml0aWFsVmFsdWUgfHwgZ2V0U2Nyb2xsKCk7XG5cbiAgICB2YXIgY2hlY2tGb3JJbnRlcnJ1cHRpb24gPSBfaW50ZXJydXB0aW9uVHJhY2tlcihnZXRTY3JvbGwsIGluaXRpYWxWYWx1ZSwgZnVuY3Rpb24gKCkge1xuICAgICAgdHdlZW4ua2lsbCgpO1xuICAgICAgZ2V0VHdlZW4udHdlZW4gPSAwO1xuICAgIH0pO1xuXG4gICAgY2hhbmdlMiA9IGNoYW5nZTEgJiYgY2hhbmdlMiB8fCAwOyAvLyBpZiBjaGFuZ2UxIGlzIDAsIHdlIHNldCB0aGF0IHRvIHRoZSBkaWZmZXJlbmNlIGFuZCBpZ25vcmUgY2hhbmdlMi4gT3RoZXJ3aXNlLCB0aGVyZSB3b3VsZCBiZSBhIGNvbXBvdW5kIGVmZmVjdC5cblxuICAgIGNoYW5nZTEgPSBjaGFuZ2UxIHx8IHNjcm9sbFRvIC0gaW5pdGlhbFZhbHVlO1xuICAgIHR3ZWVuICYmIHR3ZWVuLmtpbGwoKTtcbiAgICB2YXJzW3Byb3BdID0gc2Nyb2xsVG87XG4gICAgdmFycy5pbmhlcml0ID0gZmFsc2U7XG4gICAgdmFycy5tb2RpZmllcnMgPSBtb2RpZmllcnM7XG5cbiAgICBtb2RpZmllcnNbcHJvcF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gY2hlY2tGb3JJbnRlcnJ1cHRpb24oaW5pdGlhbFZhbHVlICsgY2hhbmdlMSAqIHR3ZWVuLnJhdGlvICsgY2hhbmdlMiAqIHR3ZWVuLnJhdGlvICogdHdlZW4ucmF0aW8pO1xuICAgIH07XG5cbiAgICB2YXJzLm9uVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3Njcm9sbGVycy5jYWNoZSsrO1xuICAgICAgZ2V0VHdlZW4udHdlZW4gJiYgX3VwZGF0ZUFsbCgpOyAvLyBpZiBpdCB3YXMgaW50ZXJydXB0ZWQva2lsbGVkLCBsaWtlIGluIGEgY29udGV4dC5yZXZlcnQoKSwgZG9uJ3QgZm9yY2UgYW4gdXBkYXRlQWxsKClcbiAgICB9O1xuXG4gICAgdmFycy5vbkNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgZ2V0VHdlZW4udHdlZW4gPSAwO1xuICAgICAgb25Db21wbGV0ZSAmJiBvbkNvbXBsZXRlLmNhbGwodHdlZW4pO1xuICAgIH07XG5cbiAgICB0d2VlbiA9IGdldFR3ZWVuLnR3ZWVuID0gZ3NhcC50byhzY3JvbGxlciwgdmFycyk7XG4gICAgcmV0dXJuIHR3ZWVuO1xuICB9O1xuXG4gIHNjcm9sbGVyW3Byb3BdID0gZ2V0U2Nyb2xsO1xuXG4gIGdldFNjcm9sbC53aGVlbEhhbmRsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGdldFR3ZWVuLnR3ZWVuICYmIGdldFR3ZWVuLnR3ZWVuLmtpbGwoKSAmJiAoZ2V0VHdlZW4udHdlZW4gPSAwKTtcbiAgfTtcblxuICBfYWRkTGlzdGVuZXIoc2Nyb2xsZXIsIFwid2hlZWxcIiwgZ2V0U2Nyb2xsLndoZWVsSGFuZGxlcik7IC8vIFdpbmRvd3MgbWFjaGluZXMgaGFuZGxlIG1vdXNld2hlZWwgc2Nyb2xsaW5nIGluIGNodW5rcyAobGlrZSBcIjMgbGluZXMgcGVyIHNjcm9sbFwiKSBtZWFuaW5nIHRoZSB0eXBpY2FsIHN0cmF0ZWd5IGZvciBjYW5jZWxsaW5nIHRoZSBzY3JvbGwgaXNuJ3QgYXMgc2Vuc2l0aXZlLiBJdCdzIG11Y2ggbW9yZSBsaWtlbHkgdG8gbWF0Y2ggb25lIG9mIHRoZSBwcmV2aW91cyAyIHNjcm9sbCBldmVudCBwb3NpdGlvbnMuIFNvIHdlIGtpbGwgYW55IHNuYXBwaW5nIGFzIHNvb24gYXMgdGhlcmUncyBhIHdoZWVsIGV2ZW50LlxuXG5cbiAgU2Nyb2xsVHJpZ2dlci5pc1RvdWNoICYmIF9hZGRMaXN0ZW5lcihzY3JvbGxlciwgXCJ0b3VjaG1vdmVcIiwgZ2V0U2Nyb2xsLndoZWVsSGFuZGxlcik7XG4gIHJldHVybiBnZXRUd2Vlbjtcbn07XG5cbmV4cG9ydCB2YXIgU2Nyb2xsVHJpZ2dlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFNjcm9sbFRyaWdnZXIodmFycywgYW5pbWF0aW9uKSB7XG4gICAgX2NvcmVJbml0dGVkIHx8IFNjcm9sbFRyaWdnZXIucmVnaXN0ZXIoZ3NhcCkgfHwgY29uc29sZS53YXJuKFwiUGxlYXNlIGdzYXAucmVnaXN0ZXJQbHVnaW4oU2Nyb2xsVHJpZ2dlcilcIik7XG5cbiAgICBfY29udGV4dCh0aGlzKTtcblxuICAgIHRoaXMuaW5pdCh2YXJzLCBhbmltYXRpb24pO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFNjcm9sbFRyaWdnZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5pbml0ID0gZnVuY3Rpb24gaW5pdCh2YXJzLCBhbmltYXRpb24pIHtcbiAgICB0aGlzLnByb2dyZXNzID0gdGhpcy5zdGFydCA9IDA7XG4gICAgdGhpcy52YXJzICYmIHRoaXMua2lsbCh0cnVlLCB0cnVlKTsgLy8gaW4gY2FzZSBpdCdzIGJlaW5nIGluaXR0ZWQgYWdhaW5cblxuICAgIGlmICghX2VuYWJsZWQpIHtcbiAgICAgIHRoaXMudXBkYXRlID0gdGhpcy5yZWZyZXNoID0gdGhpcy5raWxsID0gX3Bhc3NUaHJvdWdoO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhcnMgPSBfc2V0RGVmYXVsdHMoX2lzU3RyaW5nKHZhcnMpIHx8IF9pc051bWJlcih2YXJzKSB8fCB2YXJzLm5vZGVUeXBlID8ge1xuICAgICAgdHJpZ2dlcjogdmFyc1xuICAgIH0gOiB2YXJzLCBfZGVmYXVsdHMpO1xuXG4gICAgdmFyIF92YXJzID0gdmFycyxcbiAgICAgICAgb25VcGRhdGUgPSBfdmFycy5vblVwZGF0ZSxcbiAgICAgICAgdG9nZ2xlQ2xhc3MgPSBfdmFycy50b2dnbGVDbGFzcyxcbiAgICAgICAgaWQgPSBfdmFycy5pZCxcbiAgICAgICAgb25Ub2dnbGUgPSBfdmFycy5vblRvZ2dsZSxcbiAgICAgICAgb25SZWZyZXNoID0gX3ZhcnMub25SZWZyZXNoLFxuICAgICAgICBzY3J1YiA9IF92YXJzLnNjcnViLFxuICAgICAgICB0cmlnZ2VyID0gX3ZhcnMudHJpZ2dlcixcbiAgICAgICAgcGluID0gX3ZhcnMucGluLFxuICAgICAgICBwaW5TcGFjaW5nID0gX3ZhcnMucGluU3BhY2luZyxcbiAgICAgICAgaW52YWxpZGF0ZU9uUmVmcmVzaCA9IF92YXJzLmludmFsaWRhdGVPblJlZnJlc2gsXG4gICAgICAgIGFudGljaXBhdGVQaW4gPSBfdmFycy5hbnRpY2lwYXRlUGluLFxuICAgICAgICBvblNjcnViQ29tcGxldGUgPSBfdmFycy5vblNjcnViQ29tcGxldGUsXG4gICAgICAgIG9uU25hcENvbXBsZXRlID0gX3ZhcnMub25TbmFwQ29tcGxldGUsXG4gICAgICAgIG9uY2UgPSBfdmFycy5vbmNlLFxuICAgICAgICBzbmFwID0gX3ZhcnMuc25hcCxcbiAgICAgICAgcGluUmVwYXJlbnQgPSBfdmFycy5waW5SZXBhcmVudCxcbiAgICAgICAgcGluU3BhY2VyID0gX3ZhcnMucGluU3BhY2VyLFxuICAgICAgICBjb250YWluZXJBbmltYXRpb24gPSBfdmFycy5jb250YWluZXJBbmltYXRpb24sXG4gICAgICAgIGZhc3RTY3JvbGxFbmQgPSBfdmFycy5mYXN0U2Nyb2xsRW5kLFxuICAgICAgICBwcmV2ZW50T3ZlcmxhcHMgPSBfdmFycy5wcmV2ZW50T3ZlcmxhcHMsXG4gICAgICAgIGRpcmVjdGlvbiA9IHZhcnMuaG9yaXpvbnRhbCB8fCB2YXJzLmNvbnRhaW5lckFuaW1hdGlvbiAmJiB2YXJzLmhvcml6b250YWwgIT09IGZhbHNlID8gX2hvcml6b250YWwgOiBfdmVydGljYWwsXG4gICAgICAgIGlzVG9nZ2xlID0gIXNjcnViICYmIHNjcnViICE9PSAwLFxuICAgICAgICBzY3JvbGxlciA9IF9nZXRUYXJnZXQodmFycy5zY3JvbGxlciB8fCBfd2luKSxcbiAgICAgICAgc2Nyb2xsZXJDYWNoZSA9IGdzYXAuY29yZS5nZXRDYWNoZShzY3JvbGxlciksXG4gICAgICAgIGlzVmlld3BvcnQgPSBfaXNWaWV3cG9ydChzY3JvbGxlciksXG4gICAgICAgIHVzZUZpeGVkUG9zaXRpb24gPSAoXCJwaW5UeXBlXCIgaW4gdmFycyA/IHZhcnMucGluVHlwZSA6IF9nZXRQcm94eVByb3Aoc2Nyb2xsZXIsIFwicGluVHlwZVwiKSB8fCBpc1ZpZXdwb3J0ICYmIFwiZml4ZWRcIikgPT09IFwiZml4ZWRcIixcbiAgICAgICAgY2FsbGJhY2tzID0gW3ZhcnMub25FbnRlciwgdmFycy5vbkxlYXZlLCB2YXJzLm9uRW50ZXJCYWNrLCB2YXJzLm9uTGVhdmVCYWNrXSxcbiAgICAgICAgdG9nZ2xlQWN0aW9ucyA9IGlzVG9nZ2xlICYmIHZhcnMudG9nZ2xlQWN0aW9ucy5zcGxpdChcIiBcIiksXG4gICAgICAgIG1hcmtlcnMgPSBcIm1hcmtlcnNcIiBpbiB2YXJzID8gdmFycy5tYXJrZXJzIDogX2RlZmF1bHRzLm1hcmtlcnMsXG4gICAgICAgIGJvcmRlcldpZHRoID0gaXNWaWV3cG9ydCA/IDAgOiBwYXJzZUZsb2F0KF9nZXRDb21wdXRlZFN0eWxlKHNjcm9sbGVyKVtcImJvcmRlclwiICsgZGlyZWN0aW9uLnAyICsgX1dpZHRoXSkgfHwgMCxcbiAgICAgICAgc2VsZiA9IHRoaXMsXG4gICAgICAgIG9uUmVmcmVzaEluaXQgPSB2YXJzLm9uUmVmcmVzaEluaXQgJiYgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHZhcnMub25SZWZyZXNoSW5pdChzZWxmKTtcbiAgICB9LFxuICAgICAgICBnZXRTY3JvbGxlclNpemUgPSBfZ2V0U2l6ZUZ1bmMoc2Nyb2xsZXIsIGlzVmlld3BvcnQsIGRpcmVjdGlvbiksXG4gICAgICAgIGdldFNjcm9sbGVyT2Zmc2V0cyA9IF9nZXRPZmZzZXRzRnVuYyhzY3JvbGxlciwgaXNWaWV3cG9ydCksXG4gICAgICAgIGxhc3RTbmFwID0gMCxcbiAgICAgICAgbGFzdFJlZnJlc2ggPSAwLFxuICAgICAgICBwcmV2UHJvZ3Jlc3MgPSAwLFxuICAgICAgICBzY3JvbGxGdW5jID0gX2dldFNjcm9sbEZ1bmMoc2Nyb2xsZXIsIGRpcmVjdGlvbiksXG4gICAgICAgIHR3ZWVuVG8sXG4gICAgICAgIHBpbkNhY2hlLFxuICAgICAgICBzbmFwRnVuYyxcbiAgICAgICAgc2Nyb2xsMSxcbiAgICAgICAgc2Nyb2xsMixcbiAgICAgICAgc3RhcnQsXG4gICAgICAgIGVuZCxcbiAgICAgICAgbWFya2VyU3RhcnQsXG4gICAgICAgIG1hcmtlckVuZCxcbiAgICAgICAgbWFya2VyU3RhcnRUcmlnZ2VyLFxuICAgICAgICBtYXJrZXJFbmRUcmlnZ2VyLFxuICAgICAgICBtYXJrZXJWYXJzLFxuICAgICAgICBleGVjdXRpbmdPblJlZnJlc2gsXG4gICAgICAgIGNoYW5nZSxcbiAgICAgICAgcGluT3JpZ2luYWxTdGF0ZSxcbiAgICAgICAgcGluQWN0aXZlU3RhdGUsXG4gICAgICAgIHBpblN0YXRlLFxuICAgICAgICBzcGFjZXIsXG4gICAgICAgIG9mZnNldCxcbiAgICAgICAgcGluR2V0dGVyLFxuICAgICAgICBwaW5TZXR0ZXIsXG4gICAgICAgIHBpblN0YXJ0LFxuICAgICAgICBwaW5DaGFuZ2UsXG4gICAgICAgIHNwYWNpbmdTdGFydCxcbiAgICAgICAgc3BhY2VyU3RhdGUsXG4gICAgICAgIG1hcmtlclN0YXJ0U2V0dGVyLFxuICAgICAgICBwaW5Nb3ZlcyxcbiAgICAgICAgbWFya2VyRW5kU2V0dGVyLFxuICAgICAgICBjcyxcbiAgICAgICAgc25hcDEsXG4gICAgICAgIHNuYXAyLFxuICAgICAgICBzY3J1YlR3ZWVuLFxuICAgICAgICBzY3J1YlNtb290aCxcbiAgICAgICAgc25hcER1ckNsYW1wLFxuICAgICAgICBzbmFwRGVsYXllZENhbGwsXG4gICAgICAgIHByZXZTY3JvbGwsXG4gICAgICAgIHByZXZBbmltUHJvZ3Jlc3MsXG4gICAgICAgIGNhTWFya2VyU2V0dGVyLFxuICAgICAgICBjdXN0b21SZXZlcnRSZXR1cm47IC8vIGZvciB0aGUgc2FrZSBvZiBlZmZpY2llbmN5LCBfc3RhcnRDbGFtcC9fZW5kQ2xhbXAgc2VydmUgbGlrZSBhIHRydXRoeSB2YWx1ZSBpbmRpY2F0aW5nIHRoYXQgY2xhbXBpbmcgd2FzIGVuYWJsZWQgb24gdGhlIHN0YXJ0L2VuZCwgYW5kIEFMU08gc3RvcmUgdGhlIGFjdHVhbCBwcmUtY2xhbXBlZCBudW1lcmljIHZhbHVlLiBXZSB0YXAgaW50byB0aGF0IGluIFNjcm9sbFNtb290aGVyIGZvciBzcGVlZCBlZmZlY3RzLiBTbyBmb3IgZXhhbXBsZSwgaWYgc3RhcnQ9XCJjbGFtcCh0b3AgYm90dG9tKVwiIHJlc3VsdHMgaW4gYSBzdGFydCBvZiAtMTAwIG5hdHVyYWxseSwgaXQgd291bGQgZ2V0IGNsYW1wZWQgdG8gMCBidXQgLTEwMCB3b3VsZCBiZSBzdG9yZWQgaW4gX3N0YXJ0Q2xhbXAuXG5cblxuICAgIHNlbGYuX3N0YXJ0Q2xhbXAgPSBzZWxmLl9lbmRDbGFtcCA9IGZhbHNlO1xuICAgIHNlbGYuX2RpciA9IGRpcmVjdGlvbjtcbiAgICBhbnRpY2lwYXRlUGluICo9IDQ1O1xuICAgIHNlbGYuc2Nyb2xsZXIgPSBzY3JvbGxlcjtcbiAgICBzZWxmLnNjcm9sbCA9IGNvbnRhaW5lckFuaW1hdGlvbiA/IGNvbnRhaW5lckFuaW1hdGlvbi50aW1lLmJpbmQoY29udGFpbmVyQW5pbWF0aW9uKSA6IHNjcm9sbEZ1bmM7XG4gICAgc2Nyb2xsMSA9IHNjcm9sbEZ1bmMoKTtcbiAgICBzZWxmLnZhcnMgPSB2YXJzO1xuICAgIGFuaW1hdGlvbiA9IGFuaW1hdGlvbiB8fCB2YXJzLmFuaW1hdGlvbjtcblxuICAgIGlmIChcInJlZnJlc2hQcmlvcml0eVwiIGluIHZhcnMpIHtcbiAgICAgIF9zb3J0ID0gMTtcbiAgICAgIHZhcnMucmVmcmVzaFByaW9yaXR5ID09PSAtOTk5OSAmJiAoX3ByaW1hcnkgPSBzZWxmKTsgLy8gdXNlZCBieSBTY3JvbGxTbW9vdGhlclxuICAgIH1cblxuICAgIHNjcm9sbGVyQ2FjaGUudHdlZW5TY3JvbGwgPSBzY3JvbGxlckNhY2hlLnR3ZWVuU2Nyb2xsIHx8IHtcbiAgICAgIHRvcDogX2dldFR3ZWVuQ3JlYXRvcihzY3JvbGxlciwgX3ZlcnRpY2FsKSxcbiAgICAgIGxlZnQ6IF9nZXRUd2VlbkNyZWF0b3Ioc2Nyb2xsZXIsIF9ob3Jpem9udGFsKVxuICAgIH07XG4gICAgc2VsZi50d2VlblRvID0gdHdlZW5UbyA9IHNjcm9sbGVyQ2FjaGUudHdlZW5TY3JvbGxbZGlyZWN0aW9uLnBdO1xuXG4gICAgc2VsZi5zY3J1YkR1cmF0aW9uID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBzY3J1YlNtb290aCA9IF9pc051bWJlcih2YWx1ZSkgJiYgdmFsdWU7XG5cbiAgICAgIGlmICghc2NydWJTbW9vdGgpIHtcbiAgICAgICAgc2NydWJUd2VlbiAmJiBzY3J1YlR3ZWVuLnByb2dyZXNzKDEpLmtpbGwoKTtcbiAgICAgICAgc2NydWJUd2VlbiA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzY3J1YlR3ZWVuID8gc2NydWJUd2Vlbi5kdXJhdGlvbih2YWx1ZSkgOiBzY3J1YlR3ZWVuID0gZ3NhcC50byhhbmltYXRpb24sIHtcbiAgICAgICAgICBlYXNlOiBcImV4cG9cIixcbiAgICAgICAgICB0b3RhbFByb2dyZXNzOiBcIis9MFwiLFxuICAgICAgICAgIGluaGVyaXQ6IGZhbHNlLFxuICAgICAgICAgIGR1cmF0aW9uOiBzY3J1YlNtb290aCxcbiAgICAgICAgICBwYXVzZWQ6IHRydWUsXG4gICAgICAgICAgb25Db21wbGV0ZTogZnVuY3Rpb24gb25Db21wbGV0ZSgpIHtcbiAgICAgICAgICAgIHJldHVybiBvblNjcnViQ29tcGxldGUgJiYgb25TY3J1YkNvbXBsZXRlKHNlbGYpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGlmIChhbmltYXRpb24pIHtcbiAgICAgIGFuaW1hdGlvbi52YXJzLmxhenkgPSBmYWxzZTtcbiAgICAgIGFuaW1hdGlvbi5faW5pdHRlZCAmJiAhc2VsZi5pc1JldmVydGVkIHx8IGFuaW1hdGlvbi52YXJzLmltbWVkaWF0ZVJlbmRlciAhPT0gZmFsc2UgJiYgdmFycy5pbW1lZGlhdGVSZW5kZXIgIT09IGZhbHNlICYmIGFuaW1hdGlvbi5kdXJhdGlvbigpICYmIGFuaW1hdGlvbi5yZW5kZXIoMCwgdHJ1ZSwgdHJ1ZSk7IC8vIHNwZWNpYWwgY2FzZTogaWYgdGhpcyBTY3JvbGxUcmlnZ2VyIGdldHMgcmUtaW5pdHRlZCwgYSBmcm9tKCkgdHdlZW4gd2l0aCBhIHN0YWdnZXIgY291bGQgZ2V0IGluaXR0ZWQgaW5pdGlhbGx5IGFuZCB0aGVuIHJldmVydGVkIG9uIHRoZSByZS1pbml0IHdoaWNoIG1lYW5zIGl0J2xsIG5lZWQgdG8gZ2V0IHJlbmRlcmVkIGFnYWluIGhlcmUgdG8gcHJvcGVybHkgZGlzcGxheSB0aGluZ3MuIE90aGVyd2lzZSwgU2VlIGh0dHBzOi8vZ3NhcC5jb20vZm9ydW1zL3RvcGljLzM2Nzc3LXNjcm9sbHNtb290aGVyLXNwbGl0dGV4dC1uZXh0anMvIGFuZCBodHRwczovL2NvZGVwZW4uaW8vR3JlZW5Tb2NrL3Blbi9lWVB5UHBkP2VkaXRvcnM9MDAxMFxuXG4gICAgICBzZWxmLmFuaW1hdGlvbiA9IGFuaW1hdGlvbi5wYXVzZSgpO1xuICAgICAgYW5pbWF0aW9uLnNjcm9sbFRyaWdnZXIgPSBzZWxmO1xuICAgICAgc2VsZi5zY3J1YkR1cmF0aW9uKHNjcnViKTtcbiAgICAgIHNuYXAxID0gMDtcbiAgICAgIGlkIHx8IChpZCA9IGFuaW1hdGlvbi52YXJzLmlkKTtcbiAgICB9XG5cbiAgICBpZiAoc25hcCkge1xuICAgICAgLy8gVE9ETzogcG90ZW50aWFsIGlkZWE6IHVzZSBsZWdpdGltYXRlIENTUyBzY3JvbGwgc25hcHBpbmcgYnkgcHVzaGluZyBpbnZpc2libGUgZWxlbWVudHMgaW50byB0aGUgRE9NIHRoYXQgc2VydmUgYXMgc25hcCBwb3NpdGlvbnMsIGFuZCB0b2dnbGUgdGhlIGRvY3VtZW50LnNjcm9sbGluZ0VsZW1lbnQuc3R5bGUuc2Nyb2xsU25hcFR5cGUgb25Ub2dnbGUuIFNlZSBodHRwczovL2NvZGVwZW4uaW8vR3JlZW5Tb2NrL3Blbi9KakxyZ1dNIGZvciBhIHF1aWNrIHByb29mIG9mIGNvbmNlcHQuXG4gICAgICBpZiAoIV9pc09iamVjdChzbmFwKSB8fCBzbmFwLnB1c2gpIHtcbiAgICAgICAgc25hcCA9IHtcbiAgICAgICAgICBzbmFwVG86IHNuYXBcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgXCJzY3JvbGxCZWhhdmlvclwiIGluIF9ib2R5LnN0eWxlICYmIGdzYXAuc2V0KGlzVmlld3BvcnQgPyBbX2JvZHksIF9kb2NFbF0gOiBzY3JvbGxlciwge1xuICAgICAgICBzY3JvbGxCZWhhdmlvcjogXCJhdXRvXCJcbiAgICAgIH0pOyAvLyBzbW9vdGggc2Nyb2xsaW5nIGRvZXNuJ3Qgd29yayB3aXRoIHNuYXAuXG5cbiAgICAgIF9zY3JvbGxlcnMuZm9yRWFjaChmdW5jdGlvbiAobykge1xuICAgICAgICByZXR1cm4gX2lzRnVuY3Rpb24obykgJiYgby50YXJnZXQgPT09IChpc1ZpZXdwb3J0ID8gX2RvYy5zY3JvbGxpbmdFbGVtZW50IHx8IF9kb2NFbCA6IHNjcm9sbGVyKSAmJiAoby5zbW9vdGggPSBmYWxzZSk7XG4gICAgICB9KTsgLy8gbm90ZTogc2V0IHNtb290aCB0byBmYWxzZSBvbiBib3RoIHRoZSB2ZXJ0aWNhbCBhbmQgaG9yaXpvbnRhbCBzY3JvbGwgZ2V0dGVycy9zZXR0ZXJzXG5cblxuICAgICAgc25hcEZ1bmMgPSBfaXNGdW5jdGlvbihzbmFwLnNuYXBUbykgPyBzbmFwLnNuYXBUbyA6IHNuYXAuc25hcFRvID09PSBcImxhYmVsc1wiID8gX2dldENsb3Nlc3RMYWJlbChhbmltYXRpb24pIDogc25hcC5zbmFwVG8gPT09IFwibGFiZWxzRGlyZWN0aW9uYWxcIiA/IF9nZXRMYWJlbEF0RGlyZWN0aW9uKGFuaW1hdGlvbikgOiBzbmFwLmRpcmVjdGlvbmFsICE9PSBmYWxzZSA/IGZ1bmN0aW9uICh2YWx1ZSwgc3QpIHtcbiAgICAgICAgcmV0dXJuIF9zbmFwRGlyZWN0aW9uYWwoc25hcC5zbmFwVG8pKHZhbHVlLCBfZ2V0VGltZSgpIC0gbGFzdFJlZnJlc2ggPCA1MDAgPyAwIDogc3QuZGlyZWN0aW9uKTtcbiAgICAgIH0gOiBnc2FwLnV0aWxzLnNuYXAoc25hcC5zbmFwVG8pO1xuICAgICAgc25hcER1ckNsYW1wID0gc25hcC5kdXJhdGlvbiB8fCB7XG4gICAgICAgIG1pbjogMC4xLFxuICAgICAgICBtYXg6IDJcbiAgICAgIH07XG4gICAgICBzbmFwRHVyQ2xhbXAgPSBfaXNPYmplY3Qoc25hcER1ckNsYW1wKSA/IF9jbGFtcChzbmFwRHVyQ2xhbXAubWluLCBzbmFwRHVyQ2xhbXAubWF4KSA6IF9jbGFtcChzbmFwRHVyQ2xhbXAsIHNuYXBEdXJDbGFtcCk7XG4gICAgICBzbmFwRGVsYXllZENhbGwgPSBnc2FwLmRlbGF5ZWRDYWxsKHNuYXAuZGVsYXkgfHwgc2NydWJTbW9vdGggLyAyIHx8IDAuMSwgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc2Nyb2xsID0gc2Nyb2xsRnVuYygpLFxuICAgICAgICAgICAgcmVmcmVzaGVkUmVjZW50bHkgPSBfZ2V0VGltZSgpIC0gbGFzdFJlZnJlc2ggPCA1MDAsXG4gICAgICAgICAgICB0d2VlbiA9IHR3ZWVuVG8udHdlZW47XG5cbiAgICAgICAgaWYgKChyZWZyZXNoZWRSZWNlbnRseSB8fCBNYXRoLmFicyhzZWxmLmdldFZlbG9jaXR5KCkpIDwgMTApICYmICF0d2VlbiAmJiAhX3BvaW50ZXJJc0Rvd24gJiYgbGFzdFNuYXAgIT09IHNjcm9sbCkge1xuICAgICAgICAgIHZhciBwcm9ncmVzcyA9IChzY3JvbGwgLSBzdGFydCkgLyBjaGFuZ2UsXG4gICAgICAgICAgICAgIHRvdGFsUHJvZ3Jlc3MgPSBhbmltYXRpb24gJiYgIWlzVG9nZ2xlID8gYW5pbWF0aW9uLnRvdGFsUHJvZ3Jlc3MoKSA6IHByb2dyZXNzLFxuICAgICAgICAgICAgICB2ZWxvY2l0eSA9IHJlZnJlc2hlZFJlY2VudGx5ID8gMCA6ICh0b3RhbFByb2dyZXNzIC0gc25hcDIpIC8gKF9nZXRUaW1lKCkgLSBfdGltZTIpICogMTAwMCB8fCAwLFxuICAgICAgICAgICAgICBjaGFuZ2UxID0gZ3NhcC51dGlscy5jbGFtcCgtcHJvZ3Jlc3MsIDEgLSBwcm9ncmVzcywgX2Ficyh2ZWxvY2l0eSAvIDIpICogdmVsb2NpdHkgLyAwLjE4NSksXG4gICAgICAgICAgICAgIG5hdHVyYWxFbmQgPSBwcm9ncmVzcyArIChzbmFwLmluZXJ0aWEgPT09IGZhbHNlID8gMCA6IGNoYW5nZTEpLFxuICAgICAgICAgICAgICBlbmRWYWx1ZSxcbiAgICAgICAgICAgICAgZW5kU2Nyb2xsLFxuICAgICAgICAgICAgICBfc25hcCA9IHNuYXAsXG4gICAgICAgICAgICAgIG9uU3RhcnQgPSBfc25hcC5vblN0YXJ0LFxuICAgICAgICAgICAgICBfb25JbnRlcnJ1cHQgPSBfc25hcC5vbkludGVycnVwdCxcbiAgICAgICAgICAgICAgX29uQ29tcGxldGUgPSBfc25hcC5vbkNvbXBsZXRlO1xuICAgICAgICAgIGVuZFZhbHVlID0gc25hcEZ1bmMobmF0dXJhbEVuZCwgc2VsZik7XG4gICAgICAgICAgX2lzTnVtYmVyKGVuZFZhbHVlKSB8fCAoZW5kVmFsdWUgPSBuYXR1cmFsRW5kKTsgLy8gaW4gY2FzZSB0aGUgZnVuY3Rpb24gZGlkbid0IHJldHVybiBhIG51bWJlciwgZmFsbCBiYWNrIHRvIHVzaW5nIHRoZSBuYXR1cmFsRW5kXG5cbiAgICAgICAgICBlbmRTY3JvbGwgPSBNYXRoLnJvdW5kKHN0YXJ0ICsgZW5kVmFsdWUgKiBjaGFuZ2UpO1xuXG4gICAgICAgICAgaWYgKHNjcm9sbCA8PSBlbmQgJiYgc2Nyb2xsID49IHN0YXJ0ICYmIGVuZFNjcm9sbCAhPT0gc2Nyb2xsKSB7XG4gICAgICAgICAgICBpZiAodHdlZW4gJiYgIXR3ZWVuLl9pbml0dGVkICYmIHR3ZWVuLmRhdGEgPD0gX2FicyhlbmRTY3JvbGwgLSBzY3JvbGwpKSB7XG4gICAgICAgICAgICAgIC8vIHRoZXJlJ3MgYW4gb3ZlcmxhcHBpbmcgc25hcCEgU28gd2UgbXVzdCBmaWd1cmUgb3V0IHdoaWNoIG9uZSBpcyBjbG9zZXIgYW5kIGxldCB0aGF0IHR3ZWVuIGxpdmUuXG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHNuYXAuaW5lcnRpYSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgY2hhbmdlMSA9IGVuZFZhbHVlIC0gcHJvZ3Jlc3M7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHR3ZWVuVG8oZW5kU2Nyb2xsLCB7XG4gICAgICAgICAgICAgIGR1cmF0aW9uOiBzbmFwRHVyQ2xhbXAoX2FicyhNYXRoLm1heChfYWJzKG5hdHVyYWxFbmQgLSB0b3RhbFByb2dyZXNzKSwgX2FicyhlbmRWYWx1ZSAtIHRvdGFsUHJvZ3Jlc3MpKSAqIDAuMTg1IC8gdmVsb2NpdHkgLyAwLjA1IHx8IDApKSxcbiAgICAgICAgICAgICAgZWFzZTogc25hcC5lYXNlIHx8IFwicG93ZXIzXCIsXG4gICAgICAgICAgICAgIGRhdGE6IF9hYnMoZW5kU2Nyb2xsIC0gc2Nyb2xsKSxcbiAgICAgICAgICAgICAgLy8gcmVjb3JkIHRoZSBkaXN0YW5jZSBzbyB0aGF0IGlmIGFub3RoZXIgc25hcCB0d2VlbiBvY2N1cnMgKGNvbmZsaWN0KSB3ZSBjYW4gcHJpb3JpdGl6ZSB0aGUgY2xvc2VzdCBzbmFwLlxuICAgICAgICAgICAgICBvbkludGVycnVwdDogZnVuY3Rpb24gb25JbnRlcnJ1cHQoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNuYXBEZWxheWVkQ2FsbC5yZXN0YXJ0KHRydWUpICYmIF9vbkludGVycnVwdCAmJiBfb25JbnRlcnJ1cHQoc2VsZik7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIG9uQ29tcGxldGU6IGZ1bmN0aW9uIG9uQ29tcGxldGUoKSB7XG4gICAgICAgICAgICAgICAgc2VsZi51cGRhdGUoKTtcbiAgICAgICAgICAgICAgICBsYXN0U25hcCA9IHNjcm9sbEZ1bmMoKTtcblxuICAgICAgICAgICAgICAgIGlmIChhbmltYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgIC8vIHRoZSByZXNvbHV0aW9uIG9mIHRoZSBzY3JvbGxiYXIgaXMgbGltaXRlZCwgc28gd2Ugc2hvdWxkIGNvcnJlY3QgdGhlIHNjcnViYmVkIGFuaW1hdGlvbidzIHBsYXloZWFkIGF0IHRoZSBlbmQgdG8gbWF0Y2ggRVhBQ1RMWSB3aGVyZSBpdCB3YXMgc3VwcG9zZWQgdG8gc25hcFxuICAgICAgICAgICAgICAgICAgc2NydWJUd2VlbiA/IHNjcnViVHdlZW4ucmVzZXRUbyhcInRvdGFsUHJvZ3Jlc3NcIiwgZW5kVmFsdWUsIGFuaW1hdGlvbi5fdFRpbWUgLyBhbmltYXRpb24uX3REdXIpIDogYW5pbWF0aW9uLnByb2dyZXNzKGVuZFZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBzbmFwMSA9IHNuYXAyID0gYW5pbWF0aW9uICYmICFpc1RvZ2dsZSA/IGFuaW1hdGlvbi50b3RhbFByb2dyZXNzKCkgOiBzZWxmLnByb2dyZXNzO1xuICAgICAgICAgICAgICAgIG9uU25hcENvbXBsZXRlICYmIG9uU25hcENvbXBsZXRlKHNlbGYpO1xuICAgICAgICAgICAgICAgIF9vbkNvbXBsZXRlICYmIF9vbkNvbXBsZXRlKHNlbGYpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBzY3JvbGwsIGNoYW5nZTEgKiBjaGFuZ2UsIGVuZFNjcm9sbCAtIHNjcm9sbCAtIGNoYW5nZTEgKiBjaGFuZ2UpO1xuICAgICAgICAgICAgb25TdGFydCAmJiBvblN0YXJ0KHNlbGYsIHR3ZWVuVG8udHdlZW4pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChzZWxmLmlzQWN0aXZlICYmIGxhc3RTbmFwICE9PSBzY3JvbGwpIHtcbiAgICAgICAgICBzbmFwRGVsYXllZENhbGwucmVzdGFydCh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSkucGF1c2UoKTtcbiAgICB9XG5cbiAgICBpZCAmJiAoX2lkc1tpZF0gPSBzZWxmKTtcbiAgICB0cmlnZ2VyID0gc2VsZi50cmlnZ2VyID0gX2dldFRhcmdldCh0cmlnZ2VyIHx8IHBpbiAhPT0gdHJ1ZSAmJiBwaW4pOyAvLyBpZiBhIHRyaWdnZXIgaGFzIHNvbWUga2luZCBvZiBzY3JvbGwtcmVsYXRlZCBlZmZlY3QgYXBwbGllZCB0aGF0IGNvdWxkIGNvbnRhbWluYXRlIHRoZSBcInlcIiBvciBcInhcIiBwb3NpdGlvbiAobGlrZSBhIFNjcm9sbFNtb290aGVyIGVmZmVjdCksIHdlIG5lZWRlZCBhIHdheSB0byB0ZW1wb3JhcmlseSByZXZlcnQgaXQsIHNvIHdlIHVzZSB0aGUgc3RSZXZlcnQgcHJvcGVydHkgb2YgdGhlIGdzQ2FjaGUuIEl0IGNhbiByZXR1cm4gYW5vdGhlciBmdW5jdGlvbiB0aGF0IHdlJ2xsIGNhbGwgYXQgdGhlIGVuZCBzbyBpdCBjYW4gcmV0dXJuIHRvIGl0cyBub3JtYWwgc3RhdGUuXG5cbiAgICBjdXN0b21SZXZlcnRSZXR1cm4gPSB0cmlnZ2VyICYmIHRyaWdnZXIuX2dzYXAgJiYgdHJpZ2dlci5fZ3NhcC5zdFJldmVydDtcbiAgICBjdXN0b21SZXZlcnRSZXR1cm4gJiYgKGN1c3RvbVJldmVydFJldHVybiA9IGN1c3RvbVJldmVydFJldHVybihzZWxmKSk7XG4gICAgcGluID0gcGluID09PSB0cnVlID8gdHJpZ2dlciA6IF9nZXRUYXJnZXQocGluKTtcbiAgICBfaXNTdHJpbmcodG9nZ2xlQ2xhc3MpICYmICh0b2dnbGVDbGFzcyA9IHtcbiAgICAgIHRhcmdldHM6IHRyaWdnZXIsXG4gICAgICBjbGFzc05hbWU6IHRvZ2dsZUNsYXNzXG4gICAgfSk7XG5cbiAgICBpZiAocGluKSB7XG4gICAgICBwaW5TcGFjaW5nID09PSBmYWxzZSB8fCBwaW5TcGFjaW5nID09PSBfbWFyZ2luIHx8IChwaW5TcGFjaW5nID0gIXBpblNwYWNpbmcgJiYgcGluLnBhcmVudE5vZGUgJiYgcGluLnBhcmVudE5vZGUuc3R5bGUgJiYgX2dldENvbXB1dGVkU3R5bGUocGluLnBhcmVudE5vZGUpLmRpc3BsYXkgPT09IFwiZmxleFwiID8gZmFsc2UgOiBfcGFkZGluZyk7IC8vIGlmIHRoZSBwYXJlbnQgaXMgZGlzcGxheTogZmxleCwgZG9uJ3QgYXBwbHkgcGluU3BhY2luZyBieSBkZWZhdWx0LiBXZSBzaG91bGQgY2hlY2sgdGhhdCBwaW4ucGFyZW50Tm9kZSBpcyBhbiBlbGVtZW50IChub3Qgc2hhZG93IGRvbSB3aW5kb3cpXG5cbiAgICAgIHNlbGYucGluID0gcGluO1xuICAgICAgcGluQ2FjaGUgPSBnc2FwLmNvcmUuZ2V0Q2FjaGUocGluKTtcblxuICAgICAgaWYgKCFwaW5DYWNoZS5zcGFjZXIpIHtcbiAgICAgICAgLy8gcmVjb3JkIHRoZSBzcGFjZXIgYW5kIHBpbk9yaWdpbmFsU3RhdGUgb24gdGhlIGNhY2hlIGluIGNhc2Ugc29tZW9uZSB0cmllcyBwaW5uaW5nIHRoZSBzYW1lIGVsZW1lbnQgd2l0aCBNVUxUSVBMRSBTY3JvbGxUcmlnZ2VycyAtIHdlIGRvbid0IHdhbnQgdG8gaGF2ZSBtdWx0aXBsZSBzcGFjZXJzIG9yIHJlY29yZCB0aGUgXCJvcmlnaW5hbFwiIHBpbiBzdGF0ZSBhZnRlciBpdCBoYXMgYWxyZWFkeSBiZWVuIGFmZmVjdGVkIGJ5IGFub3RoZXIgU2Nyb2xsVHJpZ2dlci5cbiAgICAgICAgaWYgKHBpblNwYWNlcikge1xuICAgICAgICAgIHBpblNwYWNlciA9IF9nZXRUYXJnZXQocGluU3BhY2VyKTtcbiAgICAgICAgICBwaW5TcGFjZXIgJiYgIXBpblNwYWNlci5ub2RlVHlwZSAmJiAocGluU3BhY2VyID0gcGluU3BhY2VyLmN1cnJlbnQgfHwgcGluU3BhY2VyLm5hdGl2ZUVsZW1lbnQpOyAvLyBmb3IgUmVhY3QgJiBBbmd1bGFyXG5cbiAgICAgICAgICBwaW5DYWNoZS5zcGFjZXJJc05hdGl2ZSA9ICEhcGluU3BhY2VyO1xuICAgICAgICAgIHBpblNwYWNlciAmJiAocGluQ2FjaGUuc3BhY2VyU3RhdGUgPSBfZ2V0U3RhdGUocGluU3BhY2VyKSk7XG4gICAgICAgIH1cblxuICAgICAgICBwaW5DYWNoZS5zcGFjZXIgPSBzcGFjZXIgPSBwaW5TcGFjZXIgfHwgX2RvYy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBzcGFjZXIuY2xhc3NMaXN0LmFkZChcInBpbi1zcGFjZXJcIik7XG4gICAgICAgIGlkICYmIHNwYWNlci5jbGFzc0xpc3QuYWRkKFwicGluLXNwYWNlci1cIiArIGlkKTtcbiAgICAgICAgcGluQ2FjaGUucGluU3RhdGUgPSBwaW5PcmlnaW5hbFN0YXRlID0gX2dldFN0YXRlKHBpbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwaW5PcmlnaW5hbFN0YXRlID0gcGluQ2FjaGUucGluU3RhdGU7XG4gICAgICB9XG5cbiAgICAgIHZhcnMuZm9yY2UzRCAhPT0gZmFsc2UgJiYgZ3NhcC5zZXQocGluLCB7XG4gICAgICAgIGZvcmNlM0Q6IHRydWVcbiAgICAgIH0pO1xuICAgICAgc2VsZi5zcGFjZXIgPSBzcGFjZXIgPSBwaW5DYWNoZS5zcGFjZXI7XG4gICAgICBjcyA9IF9nZXRDb21wdXRlZFN0eWxlKHBpbik7XG4gICAgICBzcGFjaW5nU3RhcnQgPSBjc1twaW5TcGFjaW5nICsgZGlyZWN0aW9uLm9zMl07XG4gICAgICBwaW5HZXR0ZXIgPSBnc2FwLmdldFByb3BlcnR5KHBpbik7XG4gICAgICBwaW5TZXR0ZXIgPSBnc2FwLnF1aWNrU2V0dGVyKHBpbiwgZGlyZWN0aW9uLmEsIF9weCk7IC8vIHBpbi5maXJzdENoaWxkICYmICFfbWF4U2Nyb2xsKHBpbiwgZGlyZWN0aW9uKSAmJiAocGluLnN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIik7IC8vIHByb3RlY3RzIGZyb20gY29sbGFwc2luZyBtYXJnaW5zLCBidXQgY2FuIGhhdmUgdW5pbnRlbmRlZCBjb25zZXF1ZW5jZXMgYXMgZGVtb25zdHJhdGVkIGhlcmU6IGh0dHBzOi8vY29kZXBlbi5pby9HcmVlblNvY2svcGVuLzFlNDJjN2E3M2JmYTQwOWQyY2YxZTE4NGU3YTQyNDhkIHNvIGl0IHdhcyByZW1vdmVkIGluIGZhdm9yIG9mIGp1c3QgdGVsbGluZyBwZW9wbGUgdG8gc2V0IHVwIHRoZWlyIENTUyB0byBhdm9pZCB0aGUgY29sbGFwc2luZyBtYXJnaW5zIChvdmVyZmxvdzogaGlkZGVuIHwgYXV0byBpcyBqdXN0IG9uZSBvcHRpb24uIEFub3RoZXIgaXMgYm9yZGVyLXRvcDogMXB4IHNvbGlkIHRyYW5zcGFyZW50KS5cblxuICAgICAgX3N3YXBQaW5JbihwaW4sIHNwYWNlciwgY3MpO1xuXG4gICAgICBwaW5TdGF0ZSA9IF9nZXRTdGF0ZShwaW4pO1xuICAgIH1cblxuICAgIGlmIChtYXJrZXJzKSB7XG4gICAgICBtYXJrZXJWYXJzID0gX2lzT2JqZWN0KG1hcmtlcnMpID8gX3NldERlZmF1bHRzKG1hcmtlcnMsIF9tYXJrZXJEZWZhdWx0cykgOiBfbWFya2VyRGVmYXVsdHM7XG4gICAgICBtYXJrZXJTdGFydFRyaWdnZXIgPSBfY3JlYXRlTWFya2VyKFwic2Nyb2xsZXItc3RhcnRcIiwgaWQsIHNjcm9sbGVyLCBkaXJlY3Rpb24sIG1hcmtlclZhcnMsIDApO1xuICAgICAgbWFya2VyRW5kVHJpZ2dlciA9IF9jcmVhdGVNYXJrZXIoXCJzY3JvbGxlci1lbmRcIiwgaWQsIHNjcm9sbGVyLCBkaXJlY3Rpb24sIG1hcmtlclZhcnMsIDAsIG1hcmtlclN0YXJ0VHJpZ2dlcik7XG4gICAgICBvZmZzZXQgPSBtYXJrZXJTdGFydFRyaWdnZXJbXCJvZmZzZXRcIiArIGRpcmVjdGlvbi5vcC5kMl07XG5cbiAgICAgIHZhciBjb250ZW50ID0gX2dldFRhcmdldChfZ2V0UHJveHlQcm9wKHNjcm9sbGVyLCBcImNvbnRlbnRcIikgfHwgc2Nyb2xsZXIpO1xuXG4gICAgICBtYXJrZXJTdGFydCA9IHRoaXMubWFya2VyU3RhcnQgPSBfY3JlYXRlTWFya2VyKFwic3RhcnRcIiwgaWQsIGNvbnRlbnQsIGRpcmVjdGlvbiwgbWFya2VyVmFycywgb2Zmc2V0LCAwLCBjb250YWluZXJBbmltYXRpb24pO1xuICAgICAgbWFya2VyRW5kID0gdGhpcy5tYXJrZXJFbmQgPSBfY3JlYXRlTWFya2VyKFwiZW5kXCIsIGlkLCBjb250ZW50LCBkaXJlY3Rpb24sIG1hcmtlclZhcnMsIG9mZnNldCwgMCwgY29udGFpbmVyQW5pbWF0aW9uKTtcbiAgICAgIGNvbnRhaW5lckFuaW1hdGlvbiAmJiAoY2FNYXJrZXJTZXR0ZXIgPSBnc2FwLnF1aWNrU2V0dGVyKFttYXJrZXJTdGFydCwgbWFya2VyRW5kXSwgZGlyZWN0aW9uLmEsIF9weCkpO1xuXG4gICAgICBpZiAoIXVzZUZpeGVkUG9zaXRpb24gJiYgIShfcHJveGllcy5sZW5ndGggJiYgX2dldFByb3h5UHJvcChzY3JvbGxlciwgXCJmaXhlZE1hcmtlcnNcIikgPT09IHRydWUpKSB7XG4gICAgICAgIF9tYWtlUG9zaXRpb25hYmxlKGlzVmlld3BvcnQgPyBfYm9keSA6IHNjcm9sbGVyKTtcblxuICAgICAgICBnc2FwLnNldChbbWFya2VyU3RhcnRUcmlnZ2VyLCBtYXJrZXJFbmRUcmlnZ2VyXSwge1xuICAgICAgICAgIGZvcmNlM0Q6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIG1hcmtlclN0YXJ0U2V0dGVyID0gZ3NhcC5xdWlja1NldHRlcihtYXJrZXJTdGFydFRyaWdnZXIsIGRpcmVjdGlvbi5hLCBfcHgpO1xuICAgICAgICBtYXJrZXJFbmRTZXR0ZXIgPSBnc2FwLnF1aWNrU2V0dGVyKG1hcmtlckVuZFRyaWdnZXIsIGRpcmVjdGlvbi5hLCBfcHgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjb250YWluZXJBbmltYXRpb24pIHtcbiAgICAgIHZhciBvbGRPblVwZGF0ZSA9IGNvbnRhaW5lckFuaW1hdGlvbi52YXJzLm9uVXBkYXRlLFxuICAgICAgICAgIG9sZFBhcmFtcyA9IGNvbnRhaW5lckFuaW1hdGlvbi52YXJzLm9uVXBkYXRlUGFyYW1zO1xuICAgICAgY29udGFpbmVyQW5pbWF0aW9uLmV2ZW50Q2FsbGJhY2soXCJvblVwZGF0ZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNlbGYudXBkYXRlKDAsIDAsIDEpO1xuICAgICAgICBvbGRPblVwZGF0ZSAmJiBvbGRPblVwZGF0ZS5hcHBseShjb250YWluZXJBbmltYXRpb24sIG9sZFBhcmFtcyB8fCBbXSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBzZWxmLnByZXZpb3VzID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90cmlnZ2Vyc1tfdHJpZ2dlcnMuaW5kZXhPZihzZWxmKSAtIDFdO1xuICAgIH07XG5cbiAgICBzZWxmLm5leHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RyaWdnZXJzW190cmlnZ2Vycy5pbmRleE9mKHNlbGYpICsgMV07XG4gICAgfTtcblxuICAgIHNlbGYucmV2ZXJ0ID0gZnVuY3Rpb24gKHJldmVydCwgdGVtcCkge1xuICAgICAgaWYgKCF0ZW1wKSB7XG4gICAgICAgIHJldHVybiBzZWxmLmtpbGwodHJ1ZSk7XG4gICAgICB9IC8vIGZvciBjb21wYXRpYmlsaXR5IHdpdGggZ3NhcC5jb250ZXh0KCkgYW5kIGdzYXAubWF0Y2hNZWRpYSgpIHdoaWNoIGNhbGwgcmV2ZXJ0KClcblxuXG4gICAgICB2YXIgciA9IHJldmVydCAhPT0gZmFsc2UgfHwgIXNlbGYuZW5hYmxlZCxcbiAgICAgICAgICBwcmV2UmVmcmVzaGluZyA9IF9yZWZyZXNoaW5nO1xuXG4gICAgICBpZiAociAhPT0gc2VsZi5pc1JldmVydGVkKSB7XG4gICAgICAgIGlmIChyKSB7XG4gICAgICAgICAgcHJldlNjcm9sbCA9IE1hdGgubWF4KHNjcm9sbEZ1bmMoKSwgc2VsZi5zY3JvbGwucmVjIHx8IDApOyAvLyByZWNvcmQgdGhlIHNjcm9sbCBzbyB3ZSBjYW4gcmV2ZXJ0IGxhdGVyIChyZXBvc2l0aW9uaW5nL3Bpbm5pbmcgdGhpbmdzIGNhbiBhZmZlY3Qgc2Nyb2xsIHBvc2l0aW9uKS4gSW4gdGhlIHN0YXRpYyByZWZyZXNoKCkgbWV0aG9kLCB3ZSBmaXJzdCByZWNvcmQgYWxsIHRoZSBzY3JvbGwgcG9zaXRpb25zIGFzIGEgcmVmZXJlbmNlLlxuXG4gICAgICAgICAgcHJldlByb2dyZXNzID0gc2VsZi5wcm9ncmVzcztcbiAgICAgICAgICBwcmV2QW5pbVByb2dyZXNzID0gYW5pbWF0aW9uICYmIGFuaW1hdGlvbi5wcm9ncmVzcygpO1xuICAgICAgICB9XG5cbiAgICAgICAgbWFya2VyU3RhcnQgJiYgW21hcmtlclN0YXJ0LCBtYXJrZXJFbmQsIG1hcmtlclN0YXJ0VHJpZ2dlciwgbWFya2VyRW5kVHJpZ2dlcl0uZm9yRWFjaChmdW5jdGlvbiAobSkge1xuICAgICAgICAgIHJldHVybiBtLnN0eWxlLmRpc3BsYXkgPSByID8gXCJub25lXCIgOiBcImJsb2NrXCI7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChyKSB7XG4gICAgICAgICAgX3JlZnJlc2hpbmcgPSBzZWxmO1xuICAgICAgICAgIHNlbGYudXBkYXRlKHIpOyAvLyBtYWtlIHN1cmUgdGhlIHBpbiBpcyBiYWNrIGluIGl0cyBvcmlnaW5hbCBwb3NpdGlvbiBzbyB0aGF0IGFsbCB0aGUgbWVhc3VyZW1lbnRzIGFyZSBjb3JyZWN0LiBkbyB0aGlzIEJFRk9SRSBzd2FwcGluZyB0aGUgcGluIG91dFxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBpbiAmJiAoIXBpblJlcGFyZW50IHx8ICFzZWxmLmlzQWN0aXZlKSkge1xuICAgICAgICAgIGlmIChyKSB7XG4gICAgICAgICAgICBfc3dhcFBpbk91dChwaW4sIHNwYWNlciwgcGluT3JpZ2luYWxTdGF0ZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF9zd2FwUGluSW4ocGluLCBzcGFjZXIsIF9nZXRDb21wdXRlZFN0eWxlKHBpbiksIHNwYWNlclN0YXRlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByIHx8IHNlbGYudXBkYXRlKHIpOyAvLyB3aGVuIHdlJ3JlIHJlc3RvcmluZywgdGhlIHVwZGF0ZSBzaG91bGQgcnVuIEFGVEVSIHN3YXBwaW5nIHRoZSBwaW4gaW50byBpdHMgcGluLXNwYWNlci5cblxuICAgICAgICBfcmVmcmVzaGluZyA9IHByZXZSZWZyZXNoaW5nOyAvLyByZXN0b3JlLiBXZSBzZXQgaXQgdG8gdHJ1ZSBkdXJpbmcgdGhlIHVwZGF0ZSgpIHNvIHRoYXQgdGhpbmdzIGZpcmUgcHJvcGVybHkgaW4gdGhlcmUuXG5cbiAgICAgICAgc2VsZi5pc1JldmVydGVkID0gcjtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgc2VsZi5yZWZyZXNoID0gZnVuY3Rpb24gKHNvZnQsIGZvcmNlLCBwb3NpdGlvbiwgcGluT2Zmc2V0KSB7XG4gICAgICAvLyBwb3NpdGlvbiBpcyB0eXBpY2FsbHkgb25seSBkZWZpbmVkIGlmIGl0J3MgY29taW5nIGZyb20gc2V0UG9zaXRpb25zKCkgLSBpdCdzIGEgd2F5IHRvIHNraXAgdGhlIG5vcm1hbCBwYXJzaW5nLiBwaW5PZmZzZXQgaXMgYWxzbyBvbmx5IGZyb20gc2V0UG9zaXRpb25zKCkgYW5kIGlzIG1vc3RseSByZWxhdGVkIHRvIGZhbmN5IHN0dWZmIHdlIG5lZWQgdG8gZG8gaW4gU2Nyb2xsU21vb3RoZXIgd2l0aCBlZmZlY3RzXG4gICAgICBpZiAoKF9yZWZyZXNoaW5nIHx8ICFzZWxmLmVuYWJsZWQpICYmICFmb3JjZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChwaW4gJiYgc29mdCAmJiBfbGFzdFNjcm9sbFRpbWUpIHtcbiAgICAgICAgX2FkZExpc3RlbmVyKFNjcm9sbFRyaWdnZXIsIFwic2Nyb2xsRW5kXCIsIF9zb2Z0UmVmcmVzaCk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAhX3JlZnJlc2hpbmdBbGwgJiYgb25SZWZyZXNoSW5pdCAmJiBvblJlZnJlc2hJbml0KHNlbGYpO1xuICAgICAgX3JlZnJlc2hpbmcgPSBzZWxmO1xuXG4gICAgICBpZiAodHdlZW5Uby50d2VlbiAmJiAhcG9zaXRpb24pIHtcbiAgICAgICAgLy8gd2Ugc2tpcCB0aGlzIGlmIGEgcG9zaXRpb24gaXMgcGFzc2VkIGluIGJlY2F1c2UgdHlwaWNhbGx5IHRoYXQncyBmcm9tIC5zZXRQb3NpdGlvbnMoKSBhbmQgaXQncyBiZXN0IHRvIGFsbG93IGluLXByb2dyZXNzIHNuYXBwaW5nIHRvIGNvbnRpbnVlLlxuICAgICAgICB0d2VlblRvLnR3ZWVuLmtpbGwoKTtcbiAgICAgICAgdHdlZW5Uby50d2VlbiA9IDA7XG4gICAgICB9XG5cbiAgICAgIHNjcnViVHdlZW4gJiYgc2NydWJUd2Vlbi5wYXVzZSgpO1xuICAgICAgaW52YWxpZGF0ZU9uUmVmcmVzaCAmJiBhbmltYXRpb24gJiYgYW5pbWF0aW9uLnJldmVydCh7XG4gICAgICAgIGtpbGw6IGZhbHNlXG4gICAgICB9KS5pbnZhbGlkYXRlKCk7XG4gICAgICBzZWxmLmlzUmV2ZXJ0ZWQgfHwgc2VsZi5yZXZlcnQodHJ1ZSwgdHJ1ZSk7XG4gICAgICBzZWxmLl9zdWJQaW5PZmZzZXQgPSBmYWxzZTsgLy8gd2UnbGwgc2V0IHRoaXMgdG8gdHJ1ZSBpbiB0aGUgc3ViLXBpbnMgaWYgd2UgZmluZCBhbnlcblxuICAgICAgdmFyIHNpemUgPSBnZXRTY3JvbGxlclNpemUoKSxcbiAgICAgICAgICBzY3JvbGxlckJvdW5kcyA9IGdldFNjcm9sbGVyT2Zmc2V0cygpLFxuICAgICAgICAgIG1heCA9IGNvbnRhaW5lckFuaW1hdGlvbiA/IGNvbnRhaW5lckFuaW1hdGlvbi5kdXJhdGlvbigpIDogX21heFNjcm9sbChzY3JvbGxlciwgZGlyZWN0aW9uKSxcbiAgICAgICAgICBpc0ZpcnN0UmVmcmVzaCA9IGNoYW5nZSA8PSAwLjAxLFxuICAgICAgICAgIG9mZnNldCA9IDAsXG4gICAgICAgICAgb3RoZXJQaW5PZmZzZXQgPSBwaW5PZmZzZXQgfHwgMCxcbiAgICAgICAgICBwYXJzZWRFbmQgPSBfaXNPYmplY3QocG9zaXRpb24pID8gcG9zaXRpb24uZW5kIDogdmFycy5lbmQsXG4gICAgICAgICAgcGFyc2VkRW5kVHJpZ2dlciA9IHZhcnMuZW5kVHJpZ2dlciB8fCB0cmlnZ2VyLFxuICAgICAgICAgIHBhcnNlZFN0YXJ0ID0gX2lzT2JqZWN0KHBvc2l0aW9uKSA/IHBvc2l0aW9uLnN0YXJ0IDogdmFycy5zdGFydCB8fCAodmFycy5zdGFydCA9PT0gMCB8fCAhdHJpZ2dlciA/IDAgOiBwaW4gPyBcIjAgMFwiIDogXCIwIDEwMCVcIiksXG4gICAgICAgICAgcGlubmVkQ29udGFpbmVyID0gc2VsZi5waW5uZWRDb250YWluZXIgPSB2YXJzLnBpbm5lZENvbnRhaW5lciAmJiBfZ2V0VGFyZ2V0KHZhcnMucGlubmVkQ29udGFpbmVyLCBzZWxmKSxcbiAgICAgICAgICB0cmlnZ2VySW5kZXggPSB0cmlnZ2VyICYmIE1hdGgubWF4KDAsIF90cmlnZ2Vycy5pbmRleE9mKHNlbGYpKSB8fCAwLFxuICAgICAgICAgIGkgPSB0cmlnZ2VySW5kZXgsXG4gICAgICAgICAgY3MsXG4gICAgICAgICAgYm91bmRzLFxuICAgICAgICAgIHNjcm9sbCxcbiAgICAgICAgICBpc1ZlcnRpY2FsLFxuICAgICAgICAgIG92ZXJyaWRlLFxuICAgICAgICAgIGN1clRyaWdnZXIsXG4gICAgICAgICAgY3VyUGluLFxuICAgICAgICAgIG9wcG9zaXRlU2Nyb2xsLFxuICAgICAgICAgIGluaXR0ZWQsXG4gICAgICAgICAgcmV2ZXJ0ZWRQaW5zLFxuICAgICAgICAgIGZvcmNlZE92ZXJmbG93LFxuICAgICAgICAgIG1hcmtlclN0YXJ0T2Zmc2V0LFxuICAgICAgICAgIG1hcmtlckVuZE9mZnNldDtcblxuICAgICAgaWYgKG1hcmtlcnMgJiYgX2lzT2JqZWN0KHBvc2l0aW9uKSkge1xuICAgICAgICAvLyBpZiB3ZSBhbHRlciB0aGUgc3RhcnQvZW5kIHBvc2l0aW9ucyB3aXRoIC5zZXRQb3NpdGlvbnMoKSwgaXQgZ2VuZXJhbGx5IGZlZWRzIGluIGFic29sdXRlIE5VTUJFUlMgd2hpY2ggZG9uJ3QgY29udmV5IGluZm9ybWF0aW9uIGFib3V0IHdoZXJlIHRvIGxpbmUgdXAgdGhlIG1hcmtlcnMsIHNvIHRvIGtlZXAgaXQgaW50dWl0aXZlLCB3ZSByZWNvcmQgaG93IGZhciB0aGUgdHJpZ2dlciBwb3NpdGlvbnMgc2hpZnQgYWZ0ZXIgYXBwbHlpbmcgdGhlIG5ldyBudW1iZXJzIGFuZCB0aGVuIG9mZnNldCBieSB0aGF0IG11Y2ggaW4gdGhlIG9wcG9zaXRlIGRpcmVjdGlvbi4gV2UgZG8gdGhlIHNhbWUgdG8gdGhlIGFzc29jaWF0ZWQgdHJpZ2dlciBtYXJrZXJzIHRvbyBvZiBjb3Vyc2UuXG4gICAgICAgIG1hcmtlclN0YXJ0T2Zmc2V0ID0gZ3NhcC5nZXRQcm9wZXJ0eShtYXJrZXJTdGFydFRyaWdnZXIsIGRpcmVjdGlvbi5wKTtcbiAgICAgICAgbWFya2VyRW5kT2Zmc2V0ID0gZ3NhcC5nZXRQcm9wZXJ0eShtYXJrZXJFbmRUcmlnZ2VyLCBkaXJlY3Rpb24ucCk7XG4gICAgICB9XG5cbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgLy8gdXNlciBtaWdodCB0cnkgdG8gcGluIHRoZSBzYW1lIGVsZW1lbnQgbW9yZSB0aGFuIG9uY2UsIHNvIHdlIG11c3QgZmluZCBhbnkgcHJpb3IgdHJpZ2dlcnMgd2l0aCB0aGUgc2FtZSBwaW4sIHJldmVydCB0aGVtLCBhbmQgZGV0ZXJtaW5lIGhvdyBsb25nIHRoZXkncmUgcGlubmluZyBzbyB0aGF0IHdlIGNhbiBvZmZzZXQgdGhpbmdzIGFwcHJvcHJpYXRlbHkuIE1ha2Ugc3VyZSB3ZSByZXZlcnQgZnJvbSBsYXN0IHRvIGZpcnN0IHNvIHRoYXQgdGhpbmdzIFwicmV3aW5kXCIgcHJvcGVybHkuXG4gICAgICAgIGN1clRyaWdnZXIgPSBfdHJpZ2dlcnNbaV07XG4gICAgICAgIGN1clRyaWdnZXIuZW5kIHx8IGN1clRyaWdnZXIucmVmcmVzaCgwLCAxKSB8fCAoX3JlZnJlc2hpbmcgPSBzZWxmKTsgLy8gaWYgaXQncyBhIHRpbWVsaW5lLWJhc2VkIHRyaWdnZXIgdGhhdCBoYXNuJ3QgYmVlbiBmdWxseSBpbml0aWFsaXplZCB5ZXQgYmVjYXVzZSBpdCdzIHdhaXRpbmcgZm9yIDEgdGljaywganVzdCBmb3JjZSB0aGUgcmVmcmVzaCgpIGhlcmUsIG90aGVyd2lzZSBpZiBpdCBjb250YWlucyBhIHBpbiB0aGF0J3Mgc3VwcG9zZWQgdG8gYWZmZWN0IG90aGVyIFNjcm9sbFRyaWdnZXJzIGZ1cnRoZXIgZG93biB0aGUgcGFnZSwgdGhleSB3b24ndCBiZSBhZGp1c3RlZCBwcm9wZXJseS5cblxuICAgICAgICBjdXJQaW4gPSBjdXJUcmlnZ2VyLnBpbjtcblxuICAgICAgICBpZiAoY3VyUGluICYmIChjdXJQaW4gPT09IHRyaWdnZXIgfHwgY3VyUGluID09PSBwaW4gfHwgY3VyUGluID09PSBwaW5uZWRDb250YWluZXIpICYmICFjdXJUcmlnZ2VyLmlzUmV2ZXJ0ZWQpIHtcbiAgICAgICAgICByZXZlcnRlZFBpbnMgfHwgKHJldmVydGVkUGlucyA9IFtdKTtcbiAgICAgICAgICByZXZlcnRlZFBpbnMudW5zaGlmdChjdXJUcmlnZ2VyKTsgLy8gd2UnbGwgcmV2ZXJ0IGZyb20gZmlyc3QgdG8gbGFzdCB0byBtYWtlIHN1cmUgdGhpbmdzIHJlYWNoIHRoZWlyIGVuZCBzdGF0ZSBwcm9wZXJseVxuXG4gICAgICAgICAgY3VyVHJpZ2dlci5yZXZlcnQodHJ1ZSwgdHJ1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY3VyVHJpZ2dlciAhPT0gX3RyaWdnZXJzW2ldKSB7XG4gICAgICAgICAgLy8gaW4gY2FzZSBpdCBnb3QgcmVtb3ZlZC5cbiAgICAgICAgICB0cmlnZ2VySW5kZXgtLTtcbiAgICAgICAgICBpLS07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgX2lzRnVuY3Rpb24ocGFyc2VkU3RhcnQpICYmIChwYXJzZWRTdGFydCA9IHBhcnNlZFN0YXJ0KHNlbGYpKTtcbiAgICAgIHBhcnNlZFN0YXJ0ID0gX3BhcnNlQ2xhbXAocGFyc2VkU3RhcnQsIFwic3RhcnRcIiwgc2VsZik7XG4gICAgICBzdGFydCA9IF9wYXJzZVBvc2l0aW9uKHBhcnNlZFN0YXJ0LCB0cmlnZ2VyLCBzaXplLCBkaXJlY3Rpb24sIHNjcm9sbEZ1bmMoKSwgbWFya2VyU3RhcnQsIG1hcmtlclN0YXJ0VHJpZ2dlciwgc2VsZiwgc2Nyb2xsZXJCb3VuZHMsIGJvcmRlcldpZHRoLCB1c2VGaXhlZFBvc2l0aW9uLCBtYXgsIGNvbnRhaW5lckFuaW1hdGlvbiwgc2VsZi5fc3RhcnRDbGFtcCAmJiBcIl9zdGFydENsYW1wXCIpIHx8IChwaW4gPyAtMC4wMDEgOiAwKTtcbiAgICAgIF9pc0Z1bmN0aW9uKHBhcnNlZEVuZCkgJiYgKHBhcnNlZEVuZCA9IHBhcnNlZEVuZChzZWxmKSk7XG5cbiAgICAgIGlmIChfaXNTdHJpbmcocGFyc2VkRW5kKSAmJiAhcGFyc2VkRW5kLmluZGV4T2YoXCIrPVwiKSkge1xuICAgICAgICBpZiAofnBhcnNlZEVuZC5pbmRleE9mKFwiIFwiKSkge1xuICAgICAgICAgIHBhcnNlZEVuZCA9IChfaXNTdHJpbmcocGFyc2VkU3RhcnQpID8gcGFyc2VkU3RhcnQuc3BsaXQoXCIgXCIpWzBdIDogXCJcIikgKyBwYXJzZWRFbmQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb2Zmc2V0ID0gX29mZnNldFRvUHgocGFyc2VkRW5kLnN1YnN0cigyKSwgc2l6ZSk7XG4gICAgICAgICAgcGFyc2VkRW5kID0gX2lzU3RyaW5nKHBhcnNlZFN0YXJ0KSA/IHBhcnNlZFN0YXJ0IDogKGNvbnRhaW5lckFuaW1hdGlvbiA/IGdzYXAudXRpbHMubWFwUmFuZ2UoMCwgY29udGFpbmVyQW5pbWF0aW9uLmR1cmF0aW9uKCksIGNvbnRhaW5lckFuaW1hdGlvbi5zY3JvbGxUcmlnZ2VyLnN0YXJ0LCBjb250YWluZXJBbmltYXRpb24uc2Nyb2xsVHJpZ2dlci5lbmQsIHN0YXJ0KSA6IHN0YXJ0KSArIG9mZnNldDsgLy8gX3BhcnNlUG9zaXRpb24gd29uJ3QgZmFjdG9yIGluIHRoZSBvZmZzZXQgaWYgdGhlIHN0YXJ0IGlzIGEgbnVtYmVyLCBzbyBkbyBpdCBoZXJlLlxuXG4gICAgICAgICAgcGFyc2VkRW5kVHJpZ2dlciA9IHRyaWdnZXI7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcGFyc2VkRW5kID0gX3BhcnNlQ2xhbXAocGFyc2VkRW5kLCBcImVuZFwiLCBzZWxmKTtcbiAgICAgIGVuZCA9IE1hdGgubWF4KHN0YXJ0LCBfcGFyc2VQb3NpdGlvbihwYXJzZWRFbmQgfHwgKHBhcnNlZEVuZFRyaWdnZXIgPyBcIjEwMCUgMFwiIDogbWF4KSwgcGFyc2VkRW5kVHJpZ2dlciwgc2l6ZSwgZGlyZWN0aW9uLCBzY3JvbGxGdW5jKCkgKyBvZmZzZXQsIG1hcmtlckVuZCwgbWFya2VyRW5kVHJpZ2dlciwgc2VsZiwgc2Nyb2xsZXJCb3VuZHMsIGJvcmRlcldpZHRoLCB1c2VGaXhlZFBvc2l0aW9uLCBtYXgsIGNvbnRhaW5lckFuaW1hdGlvbiwgc2VsZi5fZW5kQ2xhbXAgJiYgXCJfZW5kQ2xhbXBcIikpIHx8IC0wLjAwMTtcbiAgICAgIG9mZnNldCA9IDA7XG4gICAgICBpID0gdHJpZ2dlckluZGV4O1xuXG4gICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIGN1clRyaWdnZXIgPSBfdHJpZ2dlcnNbaV07XG4gICAgICAgIGN1clBpbiA9IGN1clRyaWdnZXIucGluO1xuXG4gICAgICAgIGlmIChjdXJQaW4gJiYgY3VyVHJpZ2dlci5zdGFydCAtIGN1clRyaWdnZXIuX3BpblB1c2ggPD0gc3RhcnQgJiYgIWNvbnRhaW5lckFuaW1hdGlvbiAmJiBjdXJUcmlnZ2VyLmVuZCA+IDApIHtcbiAgICAgICAgICBjcyA9IGN1clRyaWdnZXIuZW5kIC0gKHNlbGYuX3N0YXJ0Q2xhbXAgPyBNYXRoLm1heCgwLCBjdXJUcmlnZ2VyLnN0YXJ0KSA6IGN1clRyaWdnZXIuc3RhcnQpO1xuXG4gICAgICAgICAgaWYgKChjdXJQaW4gPT09IHRyaWdnZXIgJiYgY3VyVHJpZ2dlci5zdGFydCAtIGN1clRyaWdnZXIuX3BpblB1c2ggPCBzdGFydCB8fCBjdXJQaW4gPT09IHBpbm5lZENvbnRhaW5lcikgJiYgaXNOYU4ocGFyc2VkU3RhcnQpKSB7XG4gICAgICAgICAgICAvLyBudW1lcmljIHN0YXJ0IHZhbHVlcyBzaG91bGRuJ3QgYmUgb2Zmc2V0IGF0IGFsbCAtIHRyZWF0IHRoZW0gYXMgYWJzb2x1dGVcbiAgICAgICAgICAgIG9mZnNldCArPSBjcyAqICgxIC0gY3VyVHJpZ2dlci5wcm9ncmVzcyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY3VyUGluID09PSBwaW4gJiYgKG90aGVyUGluT2Zmc2V0ICs9IGNzKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzdGFydCArPSBvZmZzZXQ7XG4gICAgICBlbmQgKz0gb2Zmc2V0O1xuICAgICAgc2VsZi5fc3RhcnRDbGFtcCAmJiAoc2VsZi5fc3RhcnRDbGFtcCArPSBvZmZzZXQpO1xuXG4gICAgICBpZiAoc2VsZi5fZW5kQ2xhbXAgJiYgIV9yZWZyZXNoaW5nQWxsKSB7XG4gICAgICAgIHNlbGYuX2VuZENsYW1wID0gZW5kIHx8IC0wLjAwMTtcbiAgICAgICAgZW5kID0gTWF0aC5taW4oZW5kLCBfbWF4U2Nyb2xsKHNjcm9sbGVyLCBkaXJlY3Rpb24pKTtcbiAgICAgIH1cblxuICAgICAgY2hhbmdlID0gZW5kIC0gc3RhcnQgfHwgKHN0YXJ0IC09IDAuMDEpICYmIDAuMDAxO1xuXG4gICAgICBpZiAoaXNGaXJzdFJlZnJlc2gpIHtcbiAgICAgICAgLy8gb24gdGhlIHZlcnkgZmlyc3QgcmVmcmVzaCgpLCB0aGUgcHJldlByb2dyZXNzIGNvdWxkbid0IGhhdmUgYmVlbiBhY2N1cmF0ZSB5ZXQgYmVjYXVzZSB0aGUgc3RhcnQvZW5kIHdlcmUgbmV2ZXIgY2FsY3VsYXRlZCwgc28gd2Ugc2V0IGl0IGhlcmUuIEJlZm9yZSAzLjExLjUsIGl0IGNvdWxkIGxlYWQgdG8gYW4gaW5hY2N1cmF0ZSBzY3JvbGwgcG9zaXRpb24gcmVzdG9yYXRpb24gd2l0aCBzbmFwcGluZy5cbiAgICAgICAgcHJldlByb2dyZXNzID0gZ3NhcC51dGlscy5jbGFtcCgwLCAxLCBnc2FwLnV0aWxzLm5vcm1hbGl6ZShzdGFydCwgZW5kLCBwcmV2U2Nyb2xsKSk7XG4gICAgICB9XG5cbiAgICAgIHNlbGYuX3BpblB1c2ggPSBvdGhlclBpbk9mZnNldDtcblxuICAgICAgaWYgKG1hcmtlclN0YXJ0ICYmIG9mZnNldCkge1xuICAgICAgICAvLyBvZmZzZXQgdGhlIG1hcmtlcnMgaWYgbmVjZXNzYXJ5XG4gICAgICAgIGNzID0ge307XG4gICAgICAgIGNzW2RpcmVjdGlvbi5hXSA9IFwiKz1cIiArIG9mZnNldDtcbiAgICAgICAgcGlubmVkQ29udGFpbmVyICYmIChjc1tkaXJlY3Rpb24ucF0gPSBcIi09XCIgKyBzY3JvbGxGdW5jKCkpO1xuICAgICAgICBnc2FwLnNldChbbWFya2VyU3RhcnQsIG1hcmtlckVuZF0sIGNzKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHBpbiAmJiAhKF9jbGFtcGluZ01heCAmJiBzZWxmLmVuZCA+PSBfbWF4U2Nyb2xsKHNjcm9sbGVyLCBkaXJlY3Rpb24pKSkge1xuICAgICAgICBjcyA9IF9nZXRDb21wdXRlZFN0eWxlKHBpbik7XG4gICAgICAgIGlzVmVydGljYWwgPSBkaXJlY3Rpb24gPT09IF92ZXJ0aWNhbDtcbiAgICAgICAgc2Nyb2xsID0gc2Nyb2xsRnVuYygpOyAvLyByZWNhbGN1bGF0ZSBiZWNhdXNlIHRoZSB0cmlnZ2VycyBjYW4gYWZmZWN0IHRoZSBzY3JvbGxcblxuICAgICAgICBwaW5TdGFydCA9IHBhcnNlRmxvYXQocGluR2V0dGVyKGRpcmVjdGlvbi5hKSkgKyBvdGhlclBpbk9mZnNldDtcblxuICAgICAgICBpZiAoIW1heCAmJiBlbmQgPiAxKSB7XG4gICAgICAgICAgLy8gbWFrZXMgc3VyZSB0aGUgc2Nyb2xsZXIgaGFzIGEgc2Nyb2xsYmFyLCBvdGhlcndpc2UgaWYgc29tZXRoaW5nIGhhcyB3aWR0aDogMTAwJSwgZm9yIGV4YW1wbGUsIGl0IHdvdWxkIGJlIHRvbyBiaWcgKGV4Y2x1ZGUgdGhlIHNjcm9sbGJhcikuIFNlZSBodHRwczovL2dzYXAuY29tL2ZvcnVtcy90b3BpYy8yNTE4Mi1zY3JvbGx0cmlnZ2VyLXdpZHRoLW9mLXBhZ2UtaW5jcmVhc2Utd2hlcmUtbWFya2Vycy1hcmUtc2V0LXRvLWZhbHNlL1xuICAgICAgICAgIGZvcmNlZE92ZXJmbG93ID0gKGlzVmlld3BvcnQgPyBfZG9jLnNjcm9sbGluZ0VsZW1lbnQgfHwgX2RvY0VsIDogc2Nyb2xsZXIpLnN0eWxlO1xuICAgICAgICAgIGZvcmNlZE92ZXJmbG93ID0ge1xuICAgICAgICAgICAgc3R5bGU6IGZvcmNlZE92ZXJmbG93LFxuICAgICAgICAgICAgdmFsdWU6IGZvcmNlZE92ZXJmbG93W1wib3ZlcmZsb3dcIiArIGRpcmVjdGlvbi5hLnRvVXBwZXJDYXNlKCldXG4gICAgICAgICAgfTtcblxuICAgICAgICAgIGlmIChpc1ZpZXdwb3J0ICYmIF9nZXRDb21wdXRlZFN0eWxlKF9ib2R5KVtcIm92ZXJmbG93XCIgKyBkaXJlY3Rpb24uYS50b1VwcGVyQ2FzZSgpXSAhPT0gXCJzY3JvbGxcIikge1xuICAgICAgICAgICAgLy8gYXZvaWQgYW4gZXh0cmEgc2Nyb2xsYmFyIGlmIEJPVEggPGh0bWw+IGFuZCA8Ym9keT4gaGF2ZSBvdmVyZmxvdyBzZXQgdG8gXCJzY3JvbGxcIlxuICAgICAgICAgICAgZm9yY2VkT3ZlcmZsb3cuc3R5bGVbXCJvdmVyZmxvd1wiICsgZGlyZWN0aW9uLmEudG9VcHBlckNhc2UoKV0gPSBcInNjcm9sbFwiO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIF9zd2FwUGluSW4ocGluLCBzcGFjZXIsIGNzKTtcblxuICAgICAgICBwaW5TdGF0ZSA9IF9nZXRTdGF0ZShwaW4pOyAvLyB0cmFuc2Zvcm1zIHdpbGwgaW50ZXJmZXJlIHdpdGggdGhlIHRvcC9sZWZ0L3JpZ2h0L2JvdHRvbSBwbGFjZW1lbnQsIHNvIHJlbW92ZSB0aGVtIHRlbXBvcmFyaWx5LiBnZXRCb3VuZGluZ0NsaWVudFJlY3QoKSBmYWN0b3JzIGluIHRyYW5zZm9ybXMuXG5cbiAgICAgICAgYm91bmRzID0gX2dldEJvdW5kcyhwaW4sIHRydWUpO1xuICAgICAgICBvcHBvc2l0ZVNjcm9sbCA9IHVzZUZpeGVkUG9zaXRpb24gJiYgX2dldFNjcm9sbEZ1bmMoc2Nyb2xsZXIsIGlzVmVydGljYWwgPyBfaG9yaXpvbnRhbCA6IF92ZXJ0aWNhbCkoKTtcblxuICAgICAgICBpZiAocGluU3BhY2luZykge1xuICAgICAgICAgIHNwYWNlclN0YXRlID0gW3BpblNwYWNpbmcgKyBkaXJlY3Rpb24ub3MyLCBjaGFuZ2UgKyBvdGhlclBpbk9mZnNldCArIF9weF07XG4gICAgICAgICAgc3BhY2VyU3RhdGUudCA9IHNwYWNlcjtcbiAgICAgICAgICBpID0gcGluU3BhY2luZyA9PT0gX3BhZGRpbmcgPyBfZ2V0U2l6ZShwaW4sIGRpcmVjdGlvbikgKyBjaGFuZ2UgKyBvdGhlclBpbk9mZnNldCA6IDA7XG5cbiAgICAgICAgICBpZiAoaSkge1xuICAgICAgICAgICAgc3BhY2VyU3RhdGUucHVzaChkaXJlY3Rpb24uZCwgaSArIF9weCk7IC8vIGZvciBib3gtc2l6aW5nOiBib3JkZXItYm94IChtdXN0IGluY2x1ZGUgcGFkZGluZykuXG5cbiAgICAgICAgICAgIHNwYWNlci5zdHlsZS5mbGV4QmFzaXMgIT09IFwiYXV0b1wiICYmIChzcGFjZXIuc3R5bGUuZmxleEJhc2lzID0gaSArIF9weCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgX3NldFN0YXRlKHNwYWNlclN0YXRlKTtcblxuICAgICAgICAgIGlmIChwaW5uZWRDb250YWluZXIpIHtcbiAgICAgICAgICAgIC8vIGluIFNjcm9sbFRyaWdnZXIucmVmcmVzaCgpLCB3ZSBuZWVkIHRvIHJlLWV2YWx1YXRlIHRoZSBwaW5Db250YWluZXIncyBzaXplIGJlY2F1c2UgdGhpcyBwaW5TcGFjaW5nIG1heSBzdHJldGNoIGl0IG91dCwgYnV0IHdlIGNhbid0IGp1c3QgYWRkIHRoZSBleGFjdCBkaXN0YW5jZSBiZWNhdXNlIGRlcGVuZGluZyBvbiBsYXlvdXQsIGl0IG1heSBub3QgcHVzaCB0aGluZ3MgZG93biBvciBpdCBtYXkgb25seSBkbyBzbyBwYXJ0aWFsbHkuXG4gICAgICAgICAgICBfdHJpZ2dlcnMuZm9yRWFjaChmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICBpZiAodC5waW4gPT09IHBpbm5lZENvbnRhaW5lciAmJiB0LnZhcnMucGluU3BhY2luZyAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICB0Ll9zdWJQaW5PZmZzZXQgPSB0cnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB1c2VGaXhlZFBvc2l0aW9uICYmIHNjcm9sbEZ1bmMocHJldlNjcm9sbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaSA9IF9nZXRTaXplKHBpbiwgZGlyZWN0aW9uKTtcbiAgICAgICAgICBpICYmIHNwYWNlci5zdHlsZS5mbGV4QmFzaXMgIT09IFwiYXV0b1wiICYmIChzcGFjZXIuc3R5bGUuZmxleEJhc2lzID0gaSArIF9weCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXNlRml4ZWRQb3NpdGlvbikge1xuICAgICAgICAgIG92ZXJyaWRlID0ge1xuICAgICAgICAgICAgdG9wOiBib3VuZHMudG9wICsgKGlzVmVydGljYWwgPyBzY3JvbGwgLSBzdGFydCA6IG9wcG9zaXRlU2Nyb2xsKSArIF9weCxcbiAgICAgICAgICAgIGxlZnQ6IGJvdW5kcy5sZWZ0ICsgKGlzVmVydGljYWwgPyBvcHBvc2l0ZVNjcm9sbCA6IHNjcm9sbCAtIHN0YXJ0KSArIF9weCxcbiAgICAgICAgICAgIGJveFNpemluZzogXCJib3JkZXItYm94XCIsXG4gICAgICAgICAgICBwb3NpdGlvbjogXCJmaXhlZFwiXG4gICAgICAgICAgfTtcbiAgICAgICAgICBvdmVycmlkZVtfd2lkdGhdID0gb3ZlcnJpZGVbXCJtYXhcIiArIF9XaWR0aF0gPSBNYXRoLmNlaWwoYm91bmRzLndpZHRoKSArIF9weDtcbiAgICAgICAgICBvdmVycmlkZVtfaGVpZ2h0XSA9IG92ZXJyaWRlW1wibWF4XCIgKyBfSGVpZ2h0XSA9IE1hdGguY2VpbChib3VuZHMuaGVpZ2h0KSArIF9weDtcbiAgICAgICAgICBvdmVycmlkZVtfbWFyZ2luXSA9IG92ZXJyaWRlW19tYXJnaW4gKyBfVG9wXSA9IG92ZXJyaWRlW19tYXJnaW4gKyBfUmlnaHRdID0gb3ZlcnJpZGVbX21hcmdpbiArIF9Cb3R0b21dID0gb3ZlcnJpZGVbX21hcmdpbiArIF9MZWZ0XSA9IFwiMFwiO1xuICAgICAgICAgIG92ZXJyaWRlW19wYWRkaW5nXSA9IGNzW19wYWRkaW5nXTtcbiAgICAgICAgICBvdmVycmlkZVtfcGFkZGluZyArIF9Ub3BdID0gY3NbX3BhZGRpbmcgKyBfVG9wXTtcbiAgICAgICAgICBvdmVycmlkZVtfcGFkZGluZyArIF9SaWdodF0gPSBjc1tfcGFkZGluZyArIF9SaWdodF07XG4gICAgICAgICAgb3ZlcnJpZGVbX3BhZGRpbmcgKyBfQm90dG9tXSA9IGNzW19wYWRkaW5nICsgX0JvdHRvbV07XG4gICAgICAgICAgb3ZlcnJpZGVbX3BhZGRpbmcgKyBfTGVmdF0gPSBjc1tfcGFkZGluZyArIF9MZWZ0XTtcbiAgICAgICAgICBwaW5BY3RpdmVTdGF0ZSA9IF9jb3B5U3RhdGUocGluT3JpZ2luYWxTdGF0ZSwgb3ZlcnJpZGUsIHBpblJlcGFyZW50KTtcbiAgICAgICAgICBfcmVmcmVzaGluZ0FsbCAmJiBzY3JvbGxGdW5jKDApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGFuaW1hdGlvbikge1xuICAgICAgICAgIC8vIHRoZSBhbmltYXRpb24gbWlnaHQgYmUgYWZmZWN0aW5nIHRoZSB0cmFuc2Zvcm0sIHNvIHdlIG11c3QganVtcCB0byB0aGUgZW5kLCBjaGVjayB0aGUgdmFsdWUsIGFuZCBjb21wZW5zYXRlIGFjY29yZGluZ2x5LiBPdGhlcndpc2UsIHdoZW4gaXQgYmVjb21lcyB1bnBpbm5lZCwgdGhlIHBpblNldHRlcigpIHdpbGwgZ2V0IHNldCB0byBhIHZhbHVlIHRoYXQgZG9lc24ndCBpbmNsdWRlIHdoYXRldmVyIHRoZSBhbmltYXRpb24gZGlkLlxuICAgICAgICAgIGluaXR0ZWQgPSBhbmltYXRpb24uX2luaXR0ZWQ7IC8vIGlmIG5vdCwgd2UgbXVzdCBpbnZhbGlkYXRlKCkgYWZ0ZXIgdGhpcyBzdGVwLCBvdGhlcndpc2UgaXQgY291bGQgbG9jayBpbiBzdGFydGluZyB2YWx1ZXMgcHJlbWF0dXJlbHkuXG5cbiAgICAgICAgICBfc3VwcHJlc3NPdmVyd3JpdGVzKDEpO1xuXG4gICAgICAgICAgYW5pbWF0aW9uLnJlbmRlcihhbmltYXRpb24uZHVyYXRpb24oKSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgcGluQ2hhbmdlID0gcGluR2V0dGVyKGRpcmVjdGlvbi5hKSAtIHBpblN0YXJ0ICsgY2hhbmdlICsgb3RoZXJQaW5PZmZzZXQ7XG4gICAgICAgICAgcGluTW92ZXMgPSBNYXRoLmFicyhjaGFuZ2UgLSBwaW5DaGFuZ2UpID4gMTtcbiAgICAgICAgICB1c2VGaXhlZFBvc2l0aW9uICYmIHBpbk1vdmVzICYmIHBpbkFjdGl2ZVN0YXRlLnNwbGljZShwaW5BY3RpdmVTdGF0ZS5sZW5ndGggLSAyLCAyKTsgLy8gdHJhbnNmb3JtIGlzIHRoZSBsYXN0IHByb3BlcnR5L3ZhbHVlIHNldCBpbiB0aGUgc3RhdGUgQXJyYXkuIFNpbmNlIHRoZSBhbmltYXRpb24gaXMgY29udHJvbGxpbmcgdGhhdCwgd2Ugc2hvdWxkIG9taXQgaXQuXG5cbiAgICAgICAgICBhbmltYXRpb24ucmVuZGVyKDAsIHRydWUsIHRydWUpO1xuICAgICAgICAgIGluaXR0ZWQgfHwgYW5pbWF0aW9uLmludmFsaWRhdGUodHJ1ZSk7XG4gICAgICAgICAgYW5pbWF0aW9uLnBhcmVudCB8fCBhbmltYXRpb24udG90YWxUaW1lKGFuaW1hdGlvbi50b3RhbFRpbWUoKSk7IC8vIGlmLCBmb3IgZXhhbXBsZSwgYSB0b2dnbGVBY3Rpb24gY2FsbGVkIHBsYXkoKSBhbmQgdGhlbiByZWZyZXNoKCkgaGFwcGVucyBhbmQgd2hlbiB3ZSByZW5kZXIoMSkgYWJvdmUsIGl0IHdvdWxkIGNhdXNlIHRoZSBhbmltYXRpb24gdG8gY29tcGxldGUgYW5kIGdldCByZW1vdmVkIGZyb20gaXRzIHBhcmVudCwgc28gdGhpcyBtYWtlcyBzdXJlIGl0IGdldHMgcHV0IGJhY2sgaW4uXG5cbiAgICAgICAgICBfc3VwcHJlc3NPdmVyd3JpdGVzKDApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBpbkNoYW5nZSA9IGNoYW5nZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvcmNlZE92ZXJmbG93ICYmIChmb3JjZWRPdmVyZmxvdy52YWx1ZSA/IGZvcmNlZE92ZXJmbG93LnN0eWxlW1wib3ZlcmZsb3dcIiArIGRpcmVjdGlvbi5hLnRvVXBwZXJDYXNlKCldID0gZm9yY2VkT3ZlcmZsb3cudmFsdWUgOiBmb3JjZWRPdmVyZmxvdy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShcIm92ZXJmbG93LVwiICsgZGlyZWN0aW9uLmEpKTtcbiAgICAgIH0gZWxzZSBpZiAodHJpZ2dlciAmJiBzY3JvbGxGdW5jKCkgJiYgIWNvbnRhaW5lckFuaW1hdGlvbikge1xuICAgICAgICAvLyBpdCBtYXkgYmUgSU5TSURFIGEgcGlubmVkIGVsZW1lbnQsIHNvIHdhbGsgdXAgdGhlIHRyZWUgYW5kIGxvb2sgZm9yIGFueSBlbGVtZW50cyB3aXRoIF9waW5PZmZzZXQgdG8gY29tcGVuc2F0ZSBiZWNhdXNlIGFueXRoaW5nIHdpdGggcGluU3BhY2luZyB0aGF0J3MgYWxyZWFkeSBzY3JvbGxlZCB3b3VsZCB0aHJvdyBvZmYgdGhlIG1lYXN1cmVtZW50cyBpbiBnZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICAgICAgICBib3VuZHMgPSB0cmlnZ2VyLnBhcmVudE5vZGU7XG5cbiAgICAgICAgd2hpbGUgKGJvdW5kcyAmJiBib3VuZHMgIT09IF9ib2R5KSB7XG4gICAgICAgICAgaWYgKGJvdW5kcy5fcGluT2Zmc2V0KSB7XG4gICAgICAgICAgICBzdGFydCAtPSBib3VuZHMuX3Bpbk9mZnNldDtcbiAgICAgICAgICAgIGVuZCAtPSBib3VuZHMuX3Bpbk9mZnNldDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBib3VuZHMgPSBib3VuZHMucGFyZW50Tm9kZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXZlcnRlZFBpbnMgJiYgcmV2ZXJ0ZWRQaW5zLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgcmV0dXJuIHQucmV2ZXJ0KGZhbHNlLCB0cnVlKTtcbiAgICAgIH0pO1xuICAgICAgc2VsZi5zdGFydCA9IHN0YXJ0O1xuICAgICAgc2VsZi5lbmQgPSBlbmQ7XG4gICAgICBzY3JvbGwxID0gc2Nyb2xsMiA9IF9yZWZyZXNoaW5nQWxsID8gcHJldlNjcm9sbCA6IHNjcm9sbEZ1bmMoKTsgLy8gcmVzZXQgdmVsb2NpdHlcblxuICAgICAgaWYgKCFjb250YWluZXJBbmltYXRpb24gJiYgIV9yZWZyZXNoaW5nQWxsKSB7XG4gICAgICAgIHNjcm9sbDEgPCBwcmV2U2Nyb2xsICYmIHNjcm9sbEZ1bmMocHJldlNjcm9sbCk7XG4gICAgICAgIHNlbGYuc2Nyb2xsLnJlYyA9IDA7XG4gICAgICB9XG5cbiAgICAgIHNlbGYucmV2ZXJ0KGZhbHNlLCB0cnVlKTtcbiAgICAgIGxhc3RSZWZyZXNoID0gX2dldFRpbWUoKTtcblxuICAgICAgaWYgKHNuYXBEZWxheWVkQ2FsbCkge1xuICAgICAgICBsYXN0U25hcCA9IC0xOyAvLyBqdXN0IHNvIHNuYXBwaW5nIGdldHMgcmUtZW5hYmxlZCwgY2xlYXIgb3V0IGFueSByZWNvcmRlZCBsYXN0IHZhbHVlXG4gICAgICAgIC8vIHNlbGYuaXNBY3RpdmUgJiYgc2Nyb2xsRnVuYyhzdGFydCArIGNoYW5nZSAqIHByZXZQcm9ncmVzcyk7IC8vIHByZXZpb3VzbHkgdGhpcyBsaW5lIHdhcyBoZXJlIHRvIGVuc3VyZSB0aGF0IHdoZW4gc25hcHBpbmcga2lja3MgaW4sIGl0J3MgZnJvbSB0aGUgcHJldmlvdXMgcHJvZ3Jlc3MgYnV0IGluIHNvbWUgY2FzZXMgdGhhdCdzIG5vdCBkZXNpcmFibGUsIGxpa2UgYW4gYWxsLXBhZ2UgU2Nyb2xsVHJpZ2dlciB3aGVuIG5ldyBjb250ZW50IGdldHMgYWRkZWQgdG8gdGhlIHBhZ2UsIHRoYXQnZCB0b3RhbGx5IGNoYW5nZSB0aGUgcHJvZ3Jlc3MuXG5cbiAgICAgICAgc25hcERlbGF5ZWRDYWxsLnJlc3RhcnQodHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIF9yZWZyZXNoaW5nID0gMDtcbiAgICAgIGFuaW1hdGlvbiAmJiBpc1RvZ2dsZSAmJiAoYW5pbWF0aW9uLl9pbml0dGVkIHx8IHByZXZBbmltUHJvZ3Jlc3MpICYmIGFuaW1hdGlvbi5wcm9ncmVzcygpICE9PSBwcmV2QW5pbVByb2dyZXNzICYmIGFuaW1hdGlvbi5wcm9ncmVzcyhwcmV2QW5pbVByb2dyZXNzIHx8IDAsIHRydWUpLnJlbmRlcihhbmltYXRpb24udGltZSgpLCB0cnVlLCB0cnVlKTsgLy8gbXVzdCBmb3JjZSBhIHJlLXJlbmRlciBiZWNhdXNlIGlmIHNhdmVTdHlsZXMoKSB3YXMgdXNlZCBvbiB0aGUgdGFyZ2V0KHMpLCB0aGUgc3R5bGVzIGNvdWxkIGhhdmUgYmVlbiB3aXBlZCBvdXQgZHVyaW5nIHRoZSByZWZyZXNoKCkuXG5cbiAgICAgIGlmIChpc0ZpcnN0UmVmcmVzaCB8fCBwcmV2UHJvZ3Jlc3MgIT09IHNlbGYucHJvZ3Jlc3MgfHwgY29udGFpbmVyQW5pbWF0aW9uIHx8IGludmFsaWRhdGVPblJlZnJlc2gpIHtcbiAgICAgICAgLy8gZW5zdXJlcyB0aGF0IHRoZSBkaXJlY3Rpb24gaXMgc2V0IHByb3Blcmx5ICh3aGVuIHJlZnJlc2hpbmcsIHByb2dyZXNzIGlzIHNldCBiYWNrIHRvIDAgaW5pdGlhbGx5LCB0aGVuIGJhY2sgYWdhaW4gdG8gd2hlcmV2ZXIgaXQgbmVlZHMgdG8gYmUpIGFuZCB0aGF0IGNhbGxiYWNrcyBhcmUgdHJpZ2dlcmVkLlxuICAgICAgICBhbmltYXRpb24gJiYgIWlzVG9nZ2xlICYmIGFuaW1hdGlvbi50b3RhbFByb2dyZXNzKGNvbnRhaW5lckFuaW1hdGlvbiAmJiBzdGFydCA8IC0wLjAwMSAmJiAhcHJldlByb2dyZXNzID8gZ3NhcC51dGlscy5ub3JtYWxpemUoc3RhcnQsIGVuZCwgMCkgOiBwcmV2UHJvZ3Jlc3MsIHRydWUpOyAvLyB0byBhdm9pZCBpc3N1ZXMgd2hlcmUgYW5pbWF0aW9uIGNhbGxiYWNrcyBsaWtlIG9uU3RhcnQgYXJlbid0IHRyaWdnZXJlZC5cblxuICAgICAgICBzZWxmLnByb2dyZXNzID0gaXNGaXJzdFJlZnJlc2ggfHwgKHNjcm9sbDEgLSBzdGFydCkgLyBjaGFuZ2UgPT09IHByZXZQcm9ncmVzcyA/IDAgOiBwcmV2UHJvZ3Jlc3M7XG4gICAgICB9XG5cbiAgICAgIHBpbiAmJiBwaW5TcGFjaW5nICYmIChzcGFjZXIuX3Bpbk9mZnNldCA9IE1hdGgucm91bmQoc2VsZi5wcm9ncmVzcyAqIHBpbkNoYW5nZSkpO1xuICAgICAgc2NydWJUd2VlbiAmJiBzY3J1YlR3ZWVuLmludmFsaWRhdGUoKTtcblxuICAgICAgaWYgKCFpc05hTihtYXJrZXJTdGFydE9mZnNldCkpIHtcbiAgICAgICAgLy8gbnVtYmVycyB3ZXJlIHBhc3NlZCBpbiBmb3IgdGhlIHBvc2l0aW9uIHdoaWNoIGFyZSBhYnNvbHV0ZSwgc28gaW5zdGVhZCBvZiBqdXN0IHB1dHRpbmcgdGhlIG1hcmtlcnMgYXQgdGhlIHZlcnkgYm90dG9tIG9mIHRoZSB2aWV3cG9ydCwgd2UgZmlndXJlIG91dCBob3cgZmFyIHRoZXkgc2hpZnRlZCBkb3duIChpdCdzIHNhZmUgdG8gYXNzdW1lIHRoZXkgd2VyZSBvcmlnaW5hbGx5IHBvc2l0aW9uZWQgaW4gY2xvc2VyIHJlbGF0aW9uIHRvIHRoZSB0cmlnZ2VyIGVsZW1lbnQgd2l0aCB2YWx1ZXMgbGlrZSBcInRvcFwiLCBcImNlbnRlclwiLCBhIHBlcmNlbnRhZ2Ugb3Igd2hhdGV2ZXIsIHNvIHdlIG9mZnNldCB0aGF0IG11Y2ggaW4gdGhlIG9wcG9zaXRlIGRpcmVjdGlvbiB0byBiYXNpY2FsbHkgcmV2ZXJ0IHRoZW0gdG8gdGhlIHJlbGF0aXZlIHBvc2l0aW9uIHRoeSB3ZXJlIGF0IHByZXZpb3VzbHkuXG4gICAgICAgIG1hcmtlclN0YXJ0T2Zmc2V0IC09IGdzYXAuZ2V0UHJvcGVydHkobWFya2VyU3RhcnRUcmlnZ2VyLCBkaXJlY3Rpb24ucCk7XG4gICAgICAgIG1hcmtlckVuZE9mZnNldCAtPSBnc2FwLmdldFByb3BlcnR5KG1hcmtlckVuZFRyaWdnZXIsIGRpcmVjdGlvbi5wKTtcblxuICAgICAgICBfc2hpZnRNYXJrZXIobWFya2VyU3RhcnRUcmlnZ2VyLCBkaXJlY3Rpb24sIG1hcmtlclN0YXJ0T2Zmc2V0KTtcblxuICAgICAgICBfc2hpZnRNYXJrZXIobWFya2VyU3RhcnQsIGRpcmVjdGlvbiwgbWFya2VyU3RhcnRPZmZzZXQgLSAocGluT2Zmc2V0IHx8IDApKTtcblxuICAgICAgICBfc2hpZnRNYXJrZXIobWFya2VyRW5kVHJpZ2dlciwgZGlyZWN0aW9uLCBtYXJrZXJFbmRPZmZzZXQpO1xuXG4gICAgICAgIF9zaGlmdE1hcmtlcihtYXJrZXJFbmQsIGRpcmVjdGlvbiwgbWFya2VyRW5kT2Zmc2V0IC0gKHBpbk9mZnNldCB8fCAwKSk7XG4gICAgICB9XG5cbiAgICAgIGlzRmlyc3RSZWZyZXNoICYmICFfcmVmcmVzaGluZ0FsbCAmJiBzZWxmLnVwZGF0ZSgpOyAvLyBlZGdlIGNhc2UgLSB3aGVuIHlvdSByZWxvYWQgYSBwYWdlIHdoZW4gaXQncyBhbHJlYWR5IHNjcm9sbGVkIGRvd24sIHNvbWUgYnJvd3NlcnMgZmlyZSBhIFwic2Nyb2xsXCIgZXZlbnQgYmVmb3JlIERPTUNvbnRlbnRMb2FkZWQsIHRyaWdnZXJpbmcgYW4gdXBkYXRlQWxsKCkuIElmIHdlIGRvbid0IHVwZGF0ZSB0aGUgc2VsZi5wcm9ncmVzcyBhcyBwYXJ0IG9mIHJlZnJlc2goKSwgdGhlbiB3aGVuIGl0IGhhcHBlbnMgbmV4dCwgaXQgbWF5IHJlY29yZCBwcmV2UHJvZ3Jlc3MgYXMgMCB3aGVuIGl0IHJlYWxseSBzaG91bGRuJ3QsIHBvdGVudGlhbGx5IGNhdXNpbmcgYSBjYWxsYmFjayBpbiBhbiBhbmltYXRpb24gdG8gZmlyZSBhZ2Fpbi5cblxuICAgICAgaWYgKG9uUmVmcmVzaCAmJiAhX3JlZnJlc2hpbmdBbGwgJiYgIWV4ZWN1dGluZ09uUmVmcmVzaCkge1xuICAgICAgICAvLyB3aGVuIHJlZnJlc2hpbmcgYWxsLCB3ZSBkbyBleHRyYSB3b3JrIHRvIGNvcnJlY3QgcGlubmVkQ29udGFpbmVyIHNpemVzIGFuZCBlbnN1cmUgdGhpbmdzIGRvbid0IGV4Y2VlZCB0aGUgbWF4U2Nyb2xsLCBzbyB3ZSBzaG91bGQgZG8gYWxsIHRoZSByZWZyZXNoZXMgYXQgdGhlIGVuZCBhZnRlciBhbGwgdGhhdCB3b3JrIHNvIHRoYXQgdGhlIHN0YXJ0L2VuZCB2YWx1ZXMgYXJlIGNvcnJlY3RlZC5cbiAgICAgICAgZXhlY3V0aW5nT25SZWZyZXNoID0gdHJ1ZTtcbiAgICAgICAgb25SZWZyZXNoKHNlbGYpO1xuICAgICAgICBleGVjdXRpbmdPblJlZnJlc2ggPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgc2VsZi5nZXRWZWxvY2l0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiAoc2Nyb2xsRnVuYygpIC0gc2Nyb2xsMikgLyAoX2dldFRpbWUoKSAtIF90aW1lMikgKiAxMDAwIHx8IDA7XG4gICAgfTtcblxuICAgIHNlbGYuZW5kQW5pbWF0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgX2VuZEFuaW1hdGlvbihzZWxmLmNhbGxiYWNrQW5pbWF0aW9uKTtcblxuICAgICAgaWYgKGFuaW1hdGlvbikge1xuICAgICAgICBzY3J1YlR3ZWVuID8gc2NydWJUd2Vlbi5wcm9ncmVzcygxKSA6ICFhbmltYXRpb24ucGF1c2VkKCkgPyBfZW5kQW5pbWF0aW9uKGFuaW1hdGlvbiwgYW5pbWF0aW9uLnJldmVyc2VkKCkpIDogaXNUb2dnbGUgfHwgX2VuZEFuaW1hdGlvbihhbmltYXRpb24sIHNlbGYuZGlyZWN0aW9uIDwgMCwgMSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHNlbGYubGFiZWxUb1Njcm9sbCA9IGZ1bmN0aW9uIChsYWJlbCkge1xuICAgICAgcmV0dXJuIGFuaW1hdGlvbiAmJiBhbmltYXRpb24ubGFiZWxzICYmIChzdGFydCB8fCBzZWxmLnJlZnJlc2goKSB8fCBzdGFydCkgKyBhbmltYXRpb24ubGFiZWxzW2xhYmVsXSAvIGFuaW1hdGlvbi5kdXJhdGlvbigpICogY2hhbmdlIHx8IDA7XG4gICAgfTtcblxuICAgIHNlbGYuZ2V0VHJhaWxpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgdmFyIGkgPSBfdHJpZ2dlcnMuaW5kZXhPZihzZWxmKSxcbiAgICAgICAgICBhID0gc2VsZi5kaXJlY3Rpb24gPiAwID8gX3RyaWdnZXJzLnNsaWNlKDAsIGkpLnJldmVyc2UoKSA6IF90cmlnZ2Vycy5zbGljZShpICsgMSk7XG5cbiAgICAgIHJldHVybiAoX2lzU3RyaW5nKG5hbWUpID8gYS5maWx0ZXIoZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgcmV0dXJuIHQudmFycy5wcmV2ZW50T3ZlcmxhcHMgPT09IG5hbWU7XG4gICAgICB9KSA6IGEpLmZpbHRlcihmdW5jdGlvbiAodCkge1xuICAgICAgICByZXR1cm4gc2VsZi5kaXJlY3Rpb24gPiAwID8gdC5lbmQgPD0gc3RhcnQgOiB0LnN0YXJ0ID49IGVuZDtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBzZWxmLnVwZGF0ZSA9IGZ1bmN0aW9uIChyZXNldCwgcmVjb3JkVmVsb2NpdHksIGZvcmNlRmFrZSkge1xuICAgICAgaWYgKGNvbnRhaW5lckFuaW1hdGlvbiAmJiAhZm9yY2VGYWtlICYmICFyZXNldCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBzY3JvbGwgPSBfcmVmcmVzaGluZ0FsbCA9PT0gdHJ1ZSA/IHByZXZTY3JvbGwgOiBzZWxmLnNjcm9sbCgpLFxuICAgICAgICAgIHAgPSByZXNldCA/IDAgOiAoc2Nyb2xsIC0gc3RhcnQpIC8gY2hhbmdlLFxuICAgICAgICAgIGNsaXBwZWQgPSBwIDwgMCA/IDAgOiBwID4gMSA/IDEgOiBwIHx8IDAsXG4gICAgICAgICAgcHJldlByb2dyZXNzID0gc2VsZi5wcm9ncmVzcyxcbiAgICAgICAgICBpc0FjdGl2ZSxcbiAgICAgICAgICB3YXNBY3RpdmUsXG4gICAgICAgICAgdG9nZ2xlU3RhdGUsXG4gICAgICAgICAgYWN0aW9uLFxuICAgICAgICAgIHN0YXRlQ2hhbmdlZCxcbiAgICAgICAgICB0b2dnbGVkLFxuICAgICAgICAgIGlzQXRNYXgsXG4gICAgICAgICAgaXNUYWtpbmdBY3Rpb247XG5cbiAgICAgIGlmIChyZWNvcmRWZWxvY2l0eSkge1xuICAgICAgICBzY3JvbGwyID0gc2Nyb2xsMTtcbiAgICAgICAgc2Nyb2xsMSA9IGNvbnRhaW5lckFuaW1hdGlvbiA/IHNjcm9sbEZ1bmMoKSA6IHNjcm9sbDtcblxuICAgICAgICBpZiAoc25hcCkge1xuICAgICAgICAgIHNuYXAyID0gc25hcDE7XG4gICAgICAgICAgc25hcDEgPSBhbmltYXRpb24gJiYgIWlzVG9nZ2xlID8gYW5pbWF0aW9uLnRvdGFsUHJvZ3Jlc3MoKSA6IGNsaXBwZWQ7XG4gICAgICAgIH1cbiAgICAgIH0gLy8gYW50aWNpcGF0ZSB0aGUgcGlubmluZyBhIGZldyB0aWNrcyBhaGVhZCBvZiB0aW1lIGJhc2VkIG9uIHZlbG9jaXR5IHRvIGF2b2lkIGEgdmlzdWFsIGdsaXRjaCBkdWUgdG8gdGhlIGZhY3QgdGhhdCBtb3N0IGJyb3dzZXJzIGRvIHNjcm9sbGluZyBvbiBhIHNlcGFyYXRlIHRocmVhZCAobm90IHN5bmNlZCB3aXRoIHJlcXVlc3RBbmltYXRpb25GcmFtZSkuXG5cblxuICAgICAgaWYgKGFudGljaXBhdGVQaW4gJiYgcGluICYmICFfcmVmcmVzaGluZyAmJiAhX3N0YXJ0dXAgJiYgX2xhc3RTY3JvbGxUaW1lKSB7XG4gICAgICAgIGlmICghY2xpcHBlZCAmJiBzdGFydCA8IHNjcm9sbCArIChzY3JvbGwgLSBzY3JvbGwyKSAvIChfZ2V0VGltZSgpIC0gX3RpbWUyKSAqIGFudGljaXBhdGVQaW4pIHtcbiAgICAgICAgICBjbGlwcGVkID0gMC4wMDAxO1xuICAgICAgICB9IGVsc2UgaWYgKGNsaXBwZWQgPT09IDEgJiYgZW5kID4gc2Nyb2xsICsgKHNjcm9sbCAtIHNjcm9sbDIpIC8gKF9nZXRUaW1lKCkgLSBfdGltZTIpICogYW50aWNpcGF0ZVBpbikge1xuICAgICAgICAgIGNsaXBwZWQgPSAwLjk5OTk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGNsaXBwZWQgIT09IHByZXZQcm9ncmVzcyAmJiBzZWxmLmVuYWJsZWQpIHtcbiAgICAgICAgaXNBY3RpdmUgPSBzZWxmLmlzQWN0aXZlID0gISFjbGlwcGVkICYmIGNsaXBwZWQgPCAxO1xuICAgICAgICB3YXNBY3RpdmUgPSAhIXByZXZQcm9ncmVzcyAmJiBwcmV2UHJvZ3Jlc3MgPCAxO1xuICAgICAgICB0b2dnbGVkID0gaXNBY3RpdmUgIT09IHdhc0FjdGl2ZTtcbiAgICAgICAgc3RhdGVDaGFuZ2VkID0gdG9nZ2xlZCB8fCAhIWNsaXBwZWQgIT09ICEhcHJldlByb2dyZXNzOyAvLyBjb3VsZCBnbyBmcm9tIHN0YXJ0IGFsbCB0aGUgd2F5IHRvIGVuZCwgdGh1cyBpdCBkaWRuJ3QgdG9nZ2xlIGJ1dCBpdCBkaWQgY2hhbmdlIHN0YXRlIGluIGEgc2Vuc2UgKG1heSBuZWVkIHRvIGZpcmUgYSBjYWxsYmFjaylcblxuICAgICAgICBzZWxmLmRpcmVjdGlvbiA9IGNsaXBwZWQgPiBwcmV2UHJvZ3Jlc3MgPyAxIDogLTE7XG4gICAgICAgIHNlbGYucHJvZ3Jlc3MgPSBjbGlwcGVkO1xuXG4gICAgICAgIGlmIChzdGF0ZUNoYW5nZWQgJiYgIV9yZWZyZXNoaW5nKSB7XG4gICAgICAgICAgdG9nZ2xlU3RhdGUgPSBjbGlwcGVkICYmICFwcmV2UHJvZ3Jlc3MgPyAwIDogY2xpcHBlZCA9PT0gMSA/IDEgOiBwcmV2UHJvZ3Jlc3MgPT09IDEgPyAyIDogMzsgLy8gMCA9IGVudGVyLCAxID0gbGVhdmUsIDIgPSBlbnRlckJhY2ssIDMgPSBsZWF2ZUJhY2sgKHdlIHByaW9yaXRpemUgdGhlIEZJUlNUIGVuY291bnRlciwgdGh1cyBpZiB5b3Ugc2Nyb2xsIHJlYWxseSBmYXN0IHBhc3QgdGhlIG9uRW50ZXIgYW5kIG9uTGVhdmUgaW4gb25lIHRpY2ssIGl0J2QgcHJpb3JpdGl6ZSBvbkVudGVyLlxuXG4gICAgICAgICAgaWYgKGlzVG9nZ2xlKSB7XG4gICAgICAgICAgICBhY3Rpb24gPSAhdG9nZ2xlZCAmJiB0b2dnbGVBY3Rpb25zW3RvZ2dsZVN0YXRlICsgMV0gIT09IFwibm9uZVwiICYmIHRvZ2dsZUFjdGlvbnNbdG9nZ2xlU3RhdGUgKyAxXSB8fCB0b2dnbGVBY3Rpb25zW3RvZ2dsZVN0YXRlXTsgLy8gaWYgaXQgZGlkbid0IHRvZ2dsZSwgdGhhdCBtZWFucyBpdCBzaG90IHJpZ2h0IHBhc3QgYW5kIHNpbmNlIHdlIHByaW9yaXRpemUgdGhlIFwiZW50ZXJcIiBhY3Rpb24sIHdlIHNob3VsZCBzd2l0Y2ggdG8gdGhlIFwibGVhdmVcIiBpbiB0aGlzIGNhc2UgKGJ1dCBvbmx5IGlmIG9uZSBpcyBkZWZpbmVkKVxuXG4gICAgICAgICAgICBpc1Rha2luZ0FjdGlvbiA9IGFuaW1hdGlvbiAmJiAoYWN0aW9uID09PSBcImNvbXBsZXRlXCIgfHwgYWN0aW9uID09PSBcInJlc2V0XCIgfHwgYWN0aW9uIGluIGFuaW1hdGlvbik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHJldmVudE92ZXJsYXBzICYmICh0b2dnbGVkIHx8IGlzVGFraW5nQWN0aW9uKSAmJiAoaXNUYWtpbmdBY3Rpb24gfHwgc2NydWIgfHwgIWFuaW1hdGlvbikgJiYgKF9pc0Z1bmN0aW9uKHByZXZlbnRPdmVybGFwcykgPyBwcmV2ZW50T3ZlcmxhcHMoc2VsZikgOiBzZWxmLmdldFRyYWlsaW5nKHByZXZlbnRPdmVybGFwcykuZm9yRWFjaChmdW5jdGlvbiAodCkge1xuICAgICAgICAgIHJldHVybiB0LmVuZEFuaW1hdGlvbigpO1xuICAgICAgICB9KSk7XG5cbiAgICAgICAgaWYgKCFpc1RvZ2dsZSkge1xuICAgICAgICAgIGlmIChzY3J1YlR3ZWVuICYmICFfcmVmcmVzaGluZyAmJiAhX3N0YXJ0dXApIHtcbiAgICAgICAgICAgIHNjcnViVHdlZW4uX2RwLl90aW1lIC0gc2NydWJUd2Vlbi5fc3RhcnQgIT09IHNjcnViVHdlZW4uX3RpbWUgJiYgc2NydWJUd2Vlbi5yZW5kZXIoc2NydWJUd2Vlbi5fZHAuX3RpbWUgLSBzY3J1YlR3ZWVuLl9zdGFydCk7IC8vIGlmIHRoZXJlJ3MgYSBzY3J1YiBvbiBib3RoIHRoZSBjb250YWluZXIgYW5pbWF0aW9uIGFuZCB0aGlzIG9uZSAob3IgYSBTY3JvbGxTbW9vdGhlciksIHRoZSB1cGRhdGUgb3JkZXIgd291bGQgY2F1c2UgdGhpcyBvbmUgbm90IHRvIGhhdmUgcmVuZGVyZWQgeWV0LCBzbyBpdCB3b3VsZG4ndCBtYWtlIGFueSBwcm9ncmVzcyBiZWZvcmUgd2UgLnJlc3RhcnQoKSBpdCBoZWFkaW5nIHRvd2FyZCB0aGUgbmV3IHByb2dyZXNzIHNvIGl0J2QgYXBwZWFyIHN0dWNrIHRodXMgd2UgZm9yY2UgYSByZW5kZXIgaGVyZS5cblxuICAgICAgICAgICAgaWYgKHNjcnViVHdlZW4ucmVzZXRUbykge1xuICAgICAgICAgICAgICBzY3J1YlR3ZWVuLnJlc2V0VG8oXCJ0b3RhbFByb2dyZXNzXCIsIGNsaXBwZWQsIGFuaW1hdGlvbi5fdFRpbWUgLyBhbmltYXRpb24uX3REdXIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gbGVnYWN5IHN1cHBvcnQgKGNvdXJ0ZXN5KSwgYmVmb3JlIDMuMTAuMFxuICAgICAgICAgICAgICBzY3J1YlR3ZWVuLnZhcnMudG90YWxQcm9ncmVzcyA9IGNsaXBwZWQ7XG4gICAgICAgICAgICAgIHNjcnViVHdlZW4uaW52YWxpZGF0ZSgpLnJlc3RhcnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKGFuaW1hdGlvbikge1xuICAgICAgICAgICAgYW5pbWF0aW9uLnRvdGFsUHJvZ3Jlc3MoY2xpcHBlZCwgISEoX3JlZnJlc2hpbmcgJiYgKGxhc3RSZWZyZXNoIHx8IHJlc2V0KSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwaW4pIHtcbiAgICAgICAgICByZXNldCAmJiBwaW5TcGFjaW5nICYmIChzcGFjZXIuc3R5bGVbcGluU3BhY2luZyArIGRpcmVjdGlvbi5vczJdID0gc3BhY2luZ1N0YXJ0KTtcblxuICAgICAgICAgIGlmICghdXNlRml4ZWRQb3NpdGlvbikge1xuICAgICAgICAgICAgcGluU2V0dGVyKF9yb3VuZChwaW5TdGFydCArIHBpbkNoYW5nZSAqIGNsaXBwZWQpKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHN0YXRlQ2hhbmdlZCkge1xuICAgICAgICAgICAgaXNBdE1heCA9ICFyZXNldCAmJiBjbGlwcGVkID4gcHJldlByb2dyZXNzICYmIGVuZCArIDEgPiBzY3JvbGwgJiYgc2Nyb2xsICsgMSA+PSBfbWF4U2Nyb2xsKHNjcm9sbGVyLCBkaXJlY3Rpb24pOyAvLyBpZiBpdCdzIGF0IHRoZSBWRVJZIGVuZCBvZiB0aGUgcGFnZSwgZG9uJ3Qgc3dpdGNoIGF3YXkgZnJvbSBwb3NpdGlvbjogZml4ZWQgYmVjYXVzZSBpdCdzIHBvaW50bGVzcyBhbmQgaXQgY291bGQgY2F1c2UgYSBicmllZiBmbGFzaCB3aGVuIHRoZSB1c2VyIHNjcm9sbHMgYmFjayB1cCAod2hlbiBpdCBnZXRzIHBpbm5lZCBhZ2FpbilcblxuICAgICAgICAgICAgaWYgKHBpblJlcGFyZW50KSB7XG4gICAgICAgICAgICAgIGlmICghcmVzZXQgJiYgKGlzQWN0aXZlIHx8IGlzQXRNYXgpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGJvdW5kcyA9IF9nZXRCb3VuZHMocGluLCB0cnVlKSxcbiAgICAgICAgICAgICAgICAgICAgX29mZnNldCA9IHNjcm9sbCAtIHN0YXJ0O1xuXG4gICAgICAgICAgICAgICAgX3JlcGFyZW50KHBpbiwgX2JvZHksIGJvdW5kcy50b3AgKyAoZGlyZWN0aW9uID09PSBfdmVydGljYWwgPyBfb2Zmc2V0IDogMCkgKyBfcHgsIGJvdW5kcy5sZWZ0ICsgKGRpcmVjdGlvbiA9PT0gX3ZlcnRpY2FsID8gMCA6IF9vZmZzZXQpICsgX3B4KTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBfcmVwYXJlbnQocGluLCBzcGFjZXIpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF9zZXRTdGF0ZShpc0FjdGl2ZSB8fCBpc0F0TWF4ID8gcGluQWN0aXZlU3RhdGUgOiBwaW5TdGF0ZSk7XG5cbiAgICAgICAgICAgIHBpbk1vdmVzICYmIGNsaXBwZWQgPCAxICYmIGlzQWN0aXZlIHx8IHBpblNldHRlcihwaW5TdGFydCArIChjbGlwcGVkID09PSAxICYmICFpc0F0TWF4ID8gcGluQ2hhbmdlIDogMCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHNuYXAgJiYgIXR3ZWVuVG8udHdlZW4gJiYgIV9yZWZyZXNoaW5nICYmICFfc3RhcnR1cCAmJiBzbmFwRGVsYXllZENhbGwucmVzdGFydCh0cnVlKTtcbiAgICAgICAgdG9nZ2xlQ2xhc3MgJiYgKHRvZ2dsZWQgfHwgb25jZSAmJiBjbGlwcGVkICYmIChjbGlwcGVkIDwgMSB8fCAhX2xpbWl0Q2FsbGJhY2tzKSkgJiYgX3RvQXJyYXkodG9nZ2xlQ2xhc3MudGFyZ2V0cykuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgICByZXR1cm4gZWwuY2xhc3NMaXN0W2lzQWN0aXZlIHx8IG9uY2UgPyBcImFkZFwiIDogXCJyZW1vdmVcIl0odG9nZ2xlQ2xhc3MuY2xhc3NOYW1lKTtcbiAgICAgICAgfSk7IC8vIGNsYXNzZXMgY291bGQgYWZmZWN0IHBvc2l0aW9uaW5nLCBzbyBkbyBpdCBldmVuIGlmIHJlc2V0IG9yIHJlZnJlc2hpbmcgaXMgdHJ1ZS5cblxuICAgICAgICBvblVwZGF0ZSAmJiAhaXNUb2dnbGUgJiYgIXJlc2V0ICYmIG9uVXBkYXRlKHNlbGYpO1xuXG4gICAgICAgIGlmIChzdGF0ZUNoYW5nZWQgJiYgIV9yZWZyZXNoaW5nKSB7XG4gICAgICAgICAgaWYgKGlzVG9nZ2xlKSB7XG4gICAgICAgICAgICBpZiAoaXNUYWtpbmdBY3Rpb24pIHtcbiAgICAgICAgICAgICAgaWYgKGFjdGlvbiA9PT0gXCJjb21wbGV0ZVwiKSB7XG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uLnBhdXNlKCkudG90YWxQcm9ncmVzcygxKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChhY3Rpb24gPT09IFwicmVzZXRcIikge1xuICAgICAgICAgICAgICAgIGFuaW1hdGlvbi5yZXN0YXJ0KHRydWUpLnBhdXNlKCk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoYWN0aW9uID09PSBcInJlc3RhcnRcIikge1xuICAgICAgICAgICAgICAgIGFuaW1hdGlvbi5yZXN0YXJ0KHRydWUpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFuaW1hdGlvblthY3Rpb25dKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgb25VcGRhdGUgJiYgb25VcGRhdGUoc2VsZik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHRvZ2dsZWQgfHwgIV9saW1pdENhbGxiYWNrcykge1xuICAgICAgICAgICAgLy8gb24gc3RhcnR1cCwgdGhlIHBhZ2UgY291bGQgYmUgc2Nyb2xsZWQgYW5kIHdlIGRvbid0IHdhbnQgdG8gZmlyZSBjYWxsYmFja3MgdGhhdCBkaWRuJ3QgdG9nZ2xlLiBGb3IgZXhhbXBsZSBvbkVudGVyIHNob3VsZG4ndCBmaXJlIGlmIHRoZSBTY3JvbGxUcmlnZ2VyIGlzbid0IGFjdHVhbGx5IGVudGVyZWQuXG4gICAgICAgICAgICBvblRvZ2dsZSAmJiB0b2dnbGVkICYmIF9jYWxsYmFjayhzZWxmLCBvblRvZ2dsZSk7XG4gICAgICAgICAgICBjYWxsYmFja3NbdG9nZ2xlU3RhdGVdICYmIF9jYWxsYmFjayhzZWxmLCBjYWxsYmFja3NbdG9nZ2xlU3RhdGVdKTtcbiAgICAgICAgICAgIG9uY2UgJiYgKGNsaXBwZWQgPT09IDEgPyBzZWxmLmtpbGwoZmFsc2UsIDEpIDogY2FsbGJhY2tzW3RvZ2dsZVN0YXRlXSA9IDApOyAvLyBhIGNhbGxiYWNrIHNob3VsZG4ndCBiZSBjYWxsZWQgYWdhaW4gaWYgb25jZSBpcyB0cnVlLlxuXG4gICAgICAgICAgICBpZiAoIXRvZ2dsZWQpIHtcbiAgICAgICAgICAgICAgLy8gaXQncyBwb3NzaWJsZSB0byBnbyBjb21wbGV0ZWx5IHBhc3QsIGxpa2UgZnJvbSBiZWZvcmUgdGhlIHN0YXJ0IHRvIGFmdGVyIHRoZSBlbmQgKG9yIHZpY2UtdmVyc2EpIGluIHdoaWNoIGNhc2UgQk9USCBjYWxsYmFja3Mgc2hvdWxkIGJlIGZpcmVkIGluIHRoYXQgb3JkZXJcbiAgICAgICAgICAgICAgdG9nZ2xlU3RhdGUgPSBjbGlwcGVkID09PSAxID8gMSA6IDM7XG4gICAgICAgICAgICAgIGNhbGxiYWNrc1t0b2dnbGVTdGF0ZV0gJiYgX2NhbGxiYWNrKHNlbGYsIGNhbGxiYWNrc1t0b2dnbGVTdGF0ZV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChmYXN0U2Nyb2xsRW5kICYmICFpc0FjdGl2ZSAmJiBNYXRoLmFicyhzZWxmLmdldFZlbG9jaXR5KCkpID4gKF9pc051bWJlcihmYXN0U2Nyb2xsRW5kKSA/IGZhc3RTY3JvbGxFbmQgOiAyNTAwKSkge1xuICAgICAgICAgICAgX2VuZEFuaW1hdGlvbihzZWxmLmNhbGxiYWNrQW5pbWF0aW9uKTtcblxuICAgICAgICAgICAgc2NydWJUd2VlbiA/IHNjcnViVHdlZW4ucHJvZ3Jlc3MoMSkgOiBfZW5kQW5pbWF0aW9uKGFuaW1hdGlvbiwgYWN0aW9uID09PSBcInJldmVyc2VcIiA/IDEgOiAhY2xpcHBlZCwgMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGlzVG9nZ2xlICYmIG9uVXBkYXRlICYmICFfcmVmcmVzaGluZykge1xuICAgICAgICAgIG9uVXBkYXRlKHNlbGYpO1xuICAgICAgICB9XG4gICAgICB9IC8vIHVwZGF0ZSBhYnNvbHV0ZWx5LXBvc2l0aW9uZWQgbWFya2VycyAob25seSBpZiB0aGUgc2Nyb2xsZXIgaXNuJ3QgdGhlIHZpZXdwb3J0KVxuXG5cbiAgICAgIGlmIChtYXJrZXJFbmRTZXR0ZXIpIHtcbiAgICAgICAgdmFyIG4gPSBjb250YWluZXJBbmltYXRpb24gPyBzY3JvbGwgLyBjb250YWluZXJBbmltYXRpb24uZHVyYXRpb24oKSAqIChjb250YWluZXJBbmltYXRpb24uX2NhU2Nyb2xsRGlzdCB8fCAwKSA6IHNjcm9sbDtcbiAgICAgICAgbWFya2VyU3RhcnRTZXR0ZXIobiArIChtYXJrZXJTdGFydFRyaWdnZXIuX2lzRmxpcHBlZCA/IDEgOiAwKSk7XG4gICAgICAgIG1hcmtlckVuZFNldHRlcihuKTtcbiAgICAgIH1cblxuICAgICAgY2FNYXJrZXJTZXR0ZXIgJiYgY2FNYXJrZXJTZXR0ZXIoLXNjcm9sbCAvIGNvbnRhaW5lckFuaW1hdGlvbi5kdXJhdGlvbigpICogKGNvbnRhaW5lckFuaW1hdGlvbi5fY2FTY3JvbGxEaXN0IHx8IDApKTtcbiAgICB9O1xuXG4gICAgc2VsZi5lbmFibGUgPSBmdW5jdGlvbiAocmVzZXQsIHJlZnJlc2gpIHtcbiAgICAgIGlmICghc2VsZi5lbmFibGVkKSB7XG4gICAgICAgIHNlbGYuZW5hYmxlZCA9IHRydWU7XG5cbiAgICAgICAgX2FkZExpc3RlbmVyKHNjcm9sbGVyLCBcInJlc2l6ZVwiLCBfb25SZXNpemUpO1xuXG4gICAgICAgIGlzVmlld3BvcnQgfHwgX2FkZExpc3RlbmVyKHNjcm9sbGVyLCBcInNjcm9sbFwiLCBfb25TY3JvbGwpO1xuICAgICAgICBvblJlZnJlc2hJbml0ICYmIF9hZGRMaXN0ZW5lcihTY3JvbGxUcmlnZ2VyLCBcInJlZnJlc2hJbml0XCIsIG9uUmVmcmVzaEluaXQpO1xuXG4gICAgICAgIGlmIChyZXNldCAhPT0gZmFsc2UpIHtcbiAgICAgICAgICBzZWxmLnByb2dyZXNzID0gcHJldlByb2dyZXNzID0gMDtcbiAgICAgICAgICBzY3JvbGwxID0gc2Nyb2xsMiA9IGxhc3RTbmFwID0gc2Nyb2xsRnVuYygpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVmcmVzaCAhPT0gZmFsc2UgJiYgc2VsZi5yZWZyZXNoKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHNlbGYuZ2V0VHdlZW4gPSBmdW5jdGlvbiAoc25hcCkge1xuICAgICAgcmV0dXJuIHNuYXAgJiYgdHdlZW5UbyA/IHR3ZWVuVG8udHdlZW4gOiBzY3J1YlR3ZWVuO1xuICAgIH07XG5cbiAgICBzZWxmLnNldFBvc2l0aW9ucyA9IGZ1bmN0aW9uIChuZXdTdGFydCwgbmV3RW5kLCBrZWVwQ2xhbXAsIHBpbk9mZnNldCkge1xuICAgICAgLy8gZG9lc24ndCBwZXJzaXN0IGFmdGVyIHJlZnJlc2goKSEgSW50ZW5kZWQgdG8gYmUgYSB3YXkgdG8gb3ZlcnJpZGUgdmFsdWVzIHRoYXQgd2VyZSBzZXQgZHVyaW5nIHJlZnJlc2goKSwgbGlrZSB5b3UgY291bGQgc2V0IGl0IGluIG9uUmVmcmVzaCgpXG4gICAgICBpZiAoY29udGFpbmVyQW5pbWF0aW9uKSB7XG4gICAgICAgIC8vIGNvbnZlcnQgcmF0aW9zIGludG8gc2Nyb2xsIHBvc2l0aW9ucy4gUmVtZW1iZXIsIHN0YXJ0L2VuZCB2YWx1ZXMgb24gU2Nyb2xsVHJpZ2dlcnMgdGhhdCBoYXZlIGEgY29udGFpbmVyQW5pbWF0aW9uIHJlZmVyIHRvIHRoZSB0aW1lIChpbiBzZWNvbmRzKSwgTk9UIHNjcm9sbCBwb3NpdGlvbnMuXG4gICAgICAgIHZhciBzdCA9IGNvbnRhaW5lckFuaW1hdGlvbi5zY3JvbGxUcmlnZ2VyLFxuICAgICAgICAgICAgZHVyYXRpb24gPSBjb250YWluZXJBbmltYXRpb24uZHVyYXRpb24oKSxcbiAgICAgICAgICAgIF9jaGFuZ2UgPSBzdC5lbmQgLSBzdC5zdGFydDtcblxuICAgICAgICBuZXdTdGFydCA9IHN0LnN0YXJ0ICsgX2NoYW5nZSAqIG5ld1N0YXJ0IC8gZHVyYXRpb247XG4gICAgICAgIG5ld0VuZCA9IHN0LnN0YXJ0ICsgX2NoYW5nZSAqIG5ld0VuZCAvIGR1cmF0aW9uO1xuICAgICAgfVxuXG4gICAgICBzZWxmLnJlZnJlc2goZmFsc2UsIGZhbHNlLCB7XG4gICAgICAgIHN0YXJ0OiBfa2VlcENsYW1wKG5ld1N0YXJ0LCBrZWVwQ2xhbXAgJiYgISFzZWxmLl9zdGFydENsYW1wKSxcbiAgICAgICAgZW5kOiBfa2VlcENsYW1wKG5ld0VuZCwga2VlcENsYW1wICYmICEhc2VsZi5fZW5kQ2xhbXApXG4gICAgICB9LCBwaW5PZmZzZXQpO1xuICAgICAgc2VsZi51cGRhdGUoKTtcbiAgICB9O1xuXG4gICAgc2VsZi5hZGp1c3RQaW5TcGFjaW5nID0gZnVuY3Rpb24gKGFtb3VudCkge1xuICAgICAgaWYgKHNwYWNlclN0YXRlICYmIGFtb3VudCkge1xuICAgICAgICB2YXIgaSA9IHNwYWNlclN0YXRlLmluZGV4T2YoZGlyZWN0aW9uLmQpICsgMTtcbiAgICAgICAgc3BhY2VyU3RhdGVbaV0gPSBwYXJzZUZsb2F0KHNwYWNlclN0YXRlW2ldKSArIGFtb3VudCArIF9weDtcbiAgICAgICAgc3BhY2VyU3RhdGVbMV0gPSBwYXJzZUZsb2F0KHNwYWNlclN0YXRlWzFdKSArIGFtb3VudCArIF9weDtcblxuICAgICAgICBfc2V0U3RhdGUoc3BhY2VyU3RhdGUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBzZWxmLmRpc2FibGUgPSBmdW5jdGlvbiAocmVzZXQsIGFsbG93QW5pbWF0aW9uKSB7XG4gICAgICBpZiAoc2VsZi5lbmFibGVkKSB7XG4gICAgICAgIHJlc2V0ICE9PSBmYWxzZSAmJiBzZWxmLnJldmVydCh0cnVlLCB0cnVlKTtcbiAgICAgICAgc2VsZi5lbmFibGVkID0gc2VsZi5pc0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICBhbGxvd0FuaW1hdGlvbiB8fCBzY3J1YlR3ZWVuICYmIHNjcnViVHdlZW4ucGF1c2UoKTtcbiAgICAgICAgcHJldlNjcm9sbCA9IDA7XG4gICAgICAgIHBpbkNhY2hlICYmIChwaW5DYWNoZS51bmNhY2hlID0gMSk7XG4gICAgICAgIG9uUmVmcmVzaEluaXQgJiYgX3JlbW92ZUxpc3RlbmVyKFNjcm9sbFRyaWdnZXIsIFwicmVmcmVzaEluaXRcIiwgb25SZWZyZXNoSW5pdCk7XG5cbiAgICAgICAgaWYgKHNuYXBEZWxheWVkQ2FsbCkge1xuICAgICAgICAgIHNuYXBEZWxheWVkQ2FsbC5wYXVzZSgpO1xuICAgICAgICAgIHR3ZWVuVG8udHdlZW4gJiYgdHdlZW5Uby50d2Vlbi5raWxsKCkgJiYgKHR3ZWVuVG8udHdlZW4gPSAwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaXNWaWV3cG9ydCkge1xuICAgICAgICAgIHZhciBpID0gX3RyaWdnZXJzLmxlbmd0aDtcblxuICAgICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICAgIGlmIChfdHJpZ2dlcnNbaV0uc2Nyb2xsZXIgPT09IHNjcm9sbGVyICYmIF90cmlnZ2Vyc1tpXSAhPT0gc2VsZikge1xuICAgICAgICAgICAgICByZXR1cm47IC8vZG9uJ3QgcmVtb3ZlIHRoZSBsaXN0ZW5lcnMgaWYgdGhlcmUgYXJlIHN0aWxsIG90aGVyIHRyaWdnZXJzIHJlZmVyZW5jaW5nIGl0LlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIF9yZW1vdmVMaXN0ZW5lcihzY3JvbGxlciwgXCJyZXNpemVcIiwgX29uUmVzaXplKTtcblxuICAgICAgICAgIGlzVmlld3BvcnQgfHwgX3JlbW92ZUxpc3RlbmVyKHNjcm9sbGVyLCBcInNjcm9sbFwiLCBfb25TY3JvbGwpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIHNlbGYua2lsbCA9IGZ1bmN0aW9uIChyZXZlcnQsIGFsbG93QW5pbWF0aW9uKSB7XG4gICAgICBzZWxmLmRpc2FibGUocmV2ZXJ0LCBhbGxvd0FuaW1hdGlvbik7XG4gICAgICBzY3J1YlR3ZWVuICYmICFhbGxvd0FuaW1hdGlvbiAmJiBzY3J1YlR3ZWVuLmtpbGwoKTtcbiAgICAgIGlkICYmIGRlbGV0ZSBfaWRzW2lkXTtcblxuICAgICAgdmFyIGkgPSBfdHJpZ2dlcnMuaW5kZXhPZihzZWxmKTtcblxuICAgICAgaSA+PSAwICYmIF90cmlnZ2Vycy5zcGxpY2UoaSwgMSk7XG4gICAgICBpID09PSBfaSAmJiBfZGlyZWN0aW9uID4gMCAmJiBfaS0tOyAvLyBpZiB3ZSdyZSBpbiB0aGUgbWlkZGxlIG9mIGEgcmVmcmVzaCgpIG9yIHVwZGF0ZSgpLCBzcGxpY2luZyB3b3VsZCBjYXVzZSBza2lwcyBpbiB0aGUgaW5kZXgsIHNvIGFkanVzdC4uLlxuICAgICAgLy8gaWYgbm8gb3RoZXIgU2Nyb2xsVHJpZ2dlciBpbnN0YW5jZXMgb2YgdGhlIHNhbWUgc2Nyb2xsZXIgYXJlIGZvdW5kLCB3aXBlIG91dCBhbnkgcmVjb3JkZWQgc2Nyb2xsIHBvc2l0aW9uLiBPdGhlcndpc2UsIGluIGEgc2luZ2xlIHBhZ2UgYXBwbGljYXRpb24sIGZvciBleGFtcGxlLCBpdCBjb3VsZCBtYWludGFpbiBzY3JvbGwgcG9zaXRpb24gd2hlbiBpdCByZWFsbHkgc2hvdWxkbid0LlxuXG4gICAgICBpID0gMDtcblxuICAgICAgX3RyaWdnZXJzLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgcmV0dXJuIHQuc2Nyb2xsZXIgPT09IHNlbGYuc2Nyb2xsZXIgJiYgKGkgPSAxKTtcbiAgICAgIH0pO1xuXG4gICAgICBpIHx8IF9yZWZyZXNoaW5nQWxsIHx8IChzZWxmLnNjcm9sbC5yZWMgPSAwKTtcblxuICAgICAgaWYgKGFuaW1hdGlvbikge1xuICAgICAgICBhbmltYXRpb24uc2Nyb2xsVHJpZ2dlciA9IG51bGw7XG4gICAgICAgIHJldmVydCAmJiBhbmltYXRpb24ucmV2ZXJ0KHtcbiAgICAgICAgICBraWxsOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgICAgYWxsb3dBbmltYXRpb24gfHwgYW5pbWF0aW9uLmtpbGwoKTtcbiAgICAgIH1cblxuICAgICAgbWFya2VyU3RhcnQgJiYgW21hcmtlclN0YXJ0LCBtYXJrZXJFbmQsIG1hcmtlclN0YXJ0VHJpZ2dlciwgbWFya2VyRW5kVHJpZ2dlcl0uZm9yRWFjaChmdW5jdGlvbiAobSkge1xuICAgICAgICByZXR1cm4gbS5wYXJlbnROb2RlICYmIG0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChtKTtcbiAgICAgIH0pO1xuICAgICAgX3ByaW1hcnkgPT09IHNlbGYgJiYgKF9wcmltYXJ5ID0gMCk7XG5cbiAgICAgIGlmIChwaW4pIHtcbiAgICAgICAgcGluQ2FjaGUgJiYgKHBpbkNhY2hlLnVuY2FjaGUgPSAxKTtcbiAgICAgICAgaSA9IDA7XG5cbiAgICAgICAgX3RyaWdnZXJzLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICByZXR1cm4gdC5waW4gPT09IHBpbiAmJiBpKys7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGkgfHwgKHBpbkNhY2hlLnNwYWNlciA9IDApOyAvLyBpZiB0aGVyZSBhcmVuJ3QgYW55IG1vcmUgU2Nyb2xsVHJpZ2dlcnMgd2l0aCB0aGUgc2FtZSBwaW4sIHJlbW92ZSB0aGUgc3BhY2VyLCBvdGhlcndpc2UgaXQgY291bGQgYmUgY29udGFtaW5hdGVkIHdpdGggb2xkL3N0YWxlIHZhbHVlcyBpZiB0aGUgdXNlciByZS1jcmVhdGVzIGEgU2Nyb2xsVHJpZ2dlciBmb3IgdGhlIHNhbWUgZWxlbWVudC5cbiAgICAgIH1cblxuICAgICAgdmFycy5vbktpbGwgJiYgdmFycy5vbktpbGwoc2VsZik7XG4gICAgfTtcblxuICAgIF90cmlnZ2Vycy5wdXNoKHNlbGYpO1xuXG4gICAgc2VsZi5lbmFibGUoZmFsc2UsIGZhbHNlKTtcbiAgICBjdXN0b21SZXZlcnRSZXR1cm4gJiYgY3VzdG9tUmV2ZXJ0UmV0dXJuKHNlbGYpO1xuXG4gICAgaWYgKGFuaW1hdGlvbiAmJiBhbmltYXRpb24uYWRkICYmICFjaGFuZ2UpIHtcbiAgICAgIC8vIGlmIHRoZSBhbmltYXRpb24gaXMgYSB0aW1lbGluZSwgaXQgbWF5IG5vdCBoYXZlIGJlZW4gcG9wdWxhdGVkIHlldCwgc28gaXQgd291bGRuJ3QgcmVuZGVyIGF0IHRoZSBwcm9wZXIgcGxhY2Ugb24gdGhlIGZpcnN0IHJlZnJlc2goKSwgdGh1cyB3ZSBzaG91bGQgc2NoZWR1bGUgb25lIGZvciB0aGUgbmV4dCB0aWNrLiBJZiBcImNoYW5nZVwiIGlzIGRlZmluZWQsIHdlIGtub3cgaXQgbXVzdCBiZSByZS1lbmFibGluZywgdGh1cyB3ZSBjYW4gcmVmcmVzaCgpIHJpZ2h0IGF3YXkuXG4gICAgICB2YXIgdXBkYXRlRnVuYyA9IHNlbGYudXBkYXRlOyAvLyBzb21lIGJyb3dzZXJzIG1heSBmaXJlIGEgc2Nyb2xsIGV2ZW50IEJFRk9SRSBhIHRpY2sgZWxhcHNlcyBhbmQvb3IgdGhlIERPTUNvbnRlbnRMb2FkZWQgZmlyZXMuIFNvIHRoZXJlJ3MgYSBjaGFuY2UgdXBkYXRlKCkgd2lsbCBiZSBjYWxsZWQgQkVGT1JFIGEgcmVmcmVzaCgpIGhhcyBoYXBwZW5lZCBvbiBhIFRpbWVsaW5lLWF0dGFjaGVkIFNjcm9sbFRyaWdnZXIgd2hpY2ggbWVhbnMgdGhlIHN0YXJ0L2VuZCB3b24ndCBiZSBjYWxjdWxhdGVkIHlldC4gV2UgZG9uJ3Qgd2FudCB0byBhZGQgY29uZGl0aW9uYWwgbG9naWMgaW5zaWRlIHRoZSB1cGRhdGUoKSBtZXRob2QgKGxpa2UgY2hlY2sgdG8gc2VlIGlmIGVuZCBpcyBkZWZpbmVkIGFuZCBpZiBub3QsIGZvcmNlIGEgcmVmcmVzaCgpKSBiZWNhdXNlIHRoYXQncyBhIGZ1bmN0aW9uIHRoYXQgZ2V0cyBoaXQgYSBMT1QgKHBlcmZvcm1hbmNlKS4gU28gd2Ugc3dhcCBvdXQgdGhlIHJlYWwgdXBkYXRlKCkgbWV0aG9kIGZvciB0aGlzIG9uZSB0aGF0J2xsIHJlLWF0dGFjaCBpdCB0aGUgZmlyc3QgdGltZSBpdCBnZXRzIGNhbGxlZCBhbmQgb2YgY291cnNlIGZvcmNlcyBhIHJlZnJlc2goKS5cblxuICAgICAgc2VsZi51cGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNlbGYudXBkYXRlID0gdXBkYXRlRnVuYztcbiAgICAgICAgc3RhcnQgfHwgZW5kIHx8IHNlbGYucmVmcmVzaCgpO1xuICAgICAgfTtcblxuICAgICAgZ3NhcC5kZWxheWVkQ2FsbCgwLjAxLCBzZWxmLnVwZGF0ZSk7XG4gICAgICBjaGFuZ2UgPSAwLjAxO1xuICAgICAgc3RhcnQgPSBlbmQgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZWxmLnJlZnJlc2goKTtcbiAgICB9XG5cbiAgICBwaW4gJiYgX3F1ZXVlUmVmcmVzaEFsbCgpOyAvLyBwaW5uaW5nIGNvdWxkIGFmZmVjdCB0aGUgcG9zaXRpb25zIG9mIG90aGVyIHRoaW5ncywgc28gbWFrZSBzdXJlIHdlIHF1ZXVlIGEgZnVsbCByZWZyZXNoKClcbiAgfTtcblxuICBTY3JvbGxUcmlnZ2VyLnJlZ2lzdGVyID0gZnVuY3Rpb24gcmVnaXN0ZXIoY29yZSkge1xuICAgIGlmICghX2NvcmVJbml0dGVkKSB7XG4gICAgICBnc2FwID0gY29yZSB8fCBfZ2V0R1NBUCgpO1xuICAgICAgX3dpbmRvd0V4aXN0cygpICYmIHdpbmRvdy5kb2N1bWVudCAmJiBTY3JvbGxUcmlnZ2VyLmVuYWJsZSgpO1xuICAgICAgX2NvcmVJbml0dGVkID0gX2VuYWJsZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9jb3JlSW5pdHRlZDtcbiAgfTtcblxuICBTY3JvbGxUcmlnZ2VyLmRlZmF1bHRzID0gZnVuY3Rpb24gZGVmYXVsdHMoY29uZmlnKSB7XG4gICAgaWYgKGNvbmZpZykge1xuICAgICAgZm9yICh2YXIgcCBpbiBjb25maWcpIHtcbiAgICAgICAgX2RlZmF1bHRzW3BdID0gY29uZmlnW3BdO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBfZGVmYXVsdHM7XG4gIH07XG5cbiAgU2Nyb2xsVHJpZ2dlci5kaXNhYmxlID0gZnVuY3Rpb24gZGlzYWJsZShyZXNldCwga2lsbCkge1xuICAgIF9lbmFibGVkID0gMDtcblxuICAgIF90cmlnZ2Vycy5mb3JFYWNoKGZ1bmN0aW9uICh0cmlnZ2VyKSB7XG4gICAgICByZXR1cm4gdHJpZ2dlcltraWxsID8gXCJraWxsXCIgOiBcImRpc2FibGVcIl0ocmVzZXQpO1xuICAgIH0pO1xuXG4gICAgX3JlbW92ZUxpc3RlbmVyKF93aW4sIFwid2hlZWxcIiwgX29uU2Nyb2xsKTtcblxuICAgIF9yZW1vdmVMaXN0ZW5lcihfZG9jLCBcInNjcm9sbFwiLCBfb25TY3JvbGwpO1xuXG4gICAgY2xlYXJJbnRlcnZhbChfc3luY0ludGVydmFsKTtcblxuICAgIF9yZW1vdmVMaXN0ZW5lcihfZG9jLCBcInRvdWNoY2FuY2VsXCIsIF9wYXNzVGhyb3VnaCk7XG5cbiAgICBfcmVtb3ZlTGlzdGVuZXIoX2JvZHksIFwidG91Y2hzdGFydFwiLCBfcGFzc1Rocm91Z2gpO1xuXG4gICAgX211bHRpTGlzdGVuZXIoX3JlbW92ZUxpc3RlbmVyLCBfZG9jLCBcInBvaW50ZXJkb3duLHRvdWNoc3RhcnQsbW91c2Vkb3duXCIsIF9wb2ludGVyRG93bkhhbmRsZXIpO1xuXG4gICAgX211bHRpTGlzdGVuZXIoX3JlbW92ZUxpc3RlbmVyLCBfZG9jLCBcInBvaW50ZXJ1cCx0b3VjaGVuZCxtb3VzZXVwXCIsIF9wb2ludGVyVXBIYW5kbGVyKTtcblxuICAgIF9yZXNpemVEZWxheS5raWxsKCk7XG5cbiAgICBfaXRlcmF0ZUF1dG9SZWZyZXNoKF9yZW1vdmVMaXN0ZW5lcik7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IF9zY3JvbGxlcnMubGVuZ3RoOyBpICs9IDMpIHtcbiAgICAgIF93aGVlbExpc3RlbmVyKF9yZW1vdmVMaXN0ZW5lciwgX3Njcm9sbGVyc1tpXSwgX3Njcm9sbGVyc1tpICsgMV0pO1xuXG4gICAgICBfd2hlZWxMaXN0ZW5lcihfcmVtb3ZlTGlzdGVuZXIsIF9zY3JvbGxlcnNbaV0sIF9zY3JvbGxlcnNbaSArIDJdKTtcbiAgICB9XG4gIH07XG5cbiAgU2Nyb2xsVHJpZ2dlci5lbmFibGUgPSBmdW5jdGlvbiBlbmFibGUoKSB7XG4gICAgX3dpbiA9IHdpbmRvdztcbiAgICBfZG9jID0gZG9jdW1lbnQ7XG4gICAgX2RvY0VsID0gX2RvYy5kb2N1bWVudEVsZW1lbnQ7XG4gICAgX2JvZHkgPSBfZG9jLmJvZHk7XG5cbiAgICBpZiAoZ3NhcCkge1xuICAgICAgX3RvQXJyYXkgPSBnc2FwLnV0aWxzLnRvQXJyYXk7XG4gICAgICBfY2xhbXAgPSBnc2FwLnV0aWxzLmNsYW1wO1xuICAgICAgX2NvbnRleHQgPSBnc2FwLmNvcmUuY29udGV4dCB8fCBfcGFzc1Rocm91Z2g7XG4gICAgICBfc3VwcHJlc3NPdmVyd3JpdGVzID0gZ3NhcC5jb3JlLnN1cHByZXNzT3ZlcndyaXRlcyB8fCBfcGFzc1Rocm91Z2g7XG4gICAgICBfc2Nyb2xsUmVzdG9yYXRpb24gPSBfd2luLmhpc3Rvcnkuc2Nyb2xsUmVzdG9yYXRpb24gfHwgXCJhdXRvXCI7XG4gICAgICBfbGFzdFNjcm9sbCA9IF93aW4ucGFnZVlPZmZzZXQ7XG4gICAgICBnc2FwLmNvcmUuZ2xvYmFscyhcIlNjcm9sbFRyaWdnZXJcIiwgU2Nyb2xsVHJpZ2dlcik7IC8vIG11c3QgcmVnaXN0ZXIgdGhlIGdsb2JhbCBtYW51YWxseSBiZWNhdXNlIGluIEludGVybmV0IEV4cGxvcmVyLCBmdW5jdGlvbnMgKGNsYXNzZXMpIGRvbid0IGhhdmUgYSBcIm5hbWVcIiBwcm9wZXJ0eS5cblxuICAgICAgaWYgKF9ib2R5KSB7XG4gICAgICAgIF9lbmFibGVkID0gMTtcbiAgICAgICAgX2RpdjEwMHZoID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTsgLy8gdG8gc29sdmUgbW9iaWxlIGJyb3dzZXIgYWRkcmVzcyBiYXIgc2hvdy9oaWRlIHJlc2l6aW5nLCB3ZSBzaG91bGRuJ3QgcmVseSBvbiB3aW5kb3cuaW5uZXJIZWlnaHQuIEluc3RlYWQsIHVzZSBhIDxkaXY+IHdpdGggaXRzIGhlaWdodCBzZXQgdG8gMTAwdmggYW5kIG1lYXN1cmUgdGhhdCBzaW5jZSB0aGF0J3Mgd2hhdCB0aGUgc2Nyb2xsaW5nIGlzIGJhc2VkIG9uIGFueXdheSBhbmQgaXQncyBub3QgYWZmZWN0ZWQgYnkgYWRkcmVzcyBiYXIgc2hvd2luZy9oaWRpbmcuXG5cbiAgICAgICAgX2RpdjEwMHZoLnN0eWxlLmhlaWdodCA9IFwiMTAwdmhcIjtcbiAgICAgICAgX2RpdjEwMHZoLnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuXG4gICAgICAgIF9yZWZyZXNoMTAwdmgoKTtcblxuICAgICAgICBfcmFmQnVnRml4KCk7XG5cbiAgICAgICAgT2JzZXJ2ZXIucmVnaXN0ZXIoZ3NhcCk7IC8vIGlzVG91Y2ggaXMgMCBpZiBubyB0b3VjaCwgMSBpZiBPTkxZIHRvdWNoLCBhbmQgMiBpZiBpdCBjYW4gYWNjb21tb2RhdGUgdG91Y2ggYnV0IGFsc28gb3RoZXIgdHlwZXMgbGlrZSBtb3VzZS9wb2ludGVyLlxuXG4gICAgICAgIFNjcm9sbFRyaWdnZXIuaXNUb3VjaCA9IE9ic2VydmVyLmlzVG91Y2g7XG4gICAgICAgIF9maXhJT1NCdWcgPSBPYnNlcnZlci5pc1RvdWNoICYmIC8oaVBhZHxpUGhvbmV8aVBvZHxNYWMpL2cudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTsgLy8gc2luY2UgMjAxNywgaU9TIGhhcyBoYWQgYSBidWcgdGhhdCBjYXVzZXMgZXZlbnQuY2xpZW50WC9ZIHRvIGJlIGluYWNjdXJhdGUgd2hlbiBhIHNjcm9sbCBvY2N1cnMsIHRodXMgd2UgbXVzdCBhbHRlcm5hdGUgaWdub3JpbmcgZXZlcnkgb3RoZXIgdG91Y2htb3ZlIGV2ZW50IHRvIHdvcmsgYXJvdW5kIGl0LiBTZWUgaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTE4MTk1NCBhbmQgaHR0cHM6Ly9jb2RlcGVuLmlvL0dyZWVuU29jay9wZW4vRXhiclBOYS8wODdjZWYxOTdkYzM1NDQ1YTA5NTFlODkzNWM0MTUwM1xuXG4gICAgICAgIF9pZ25vcmVNb2JpbGVSZXNpemUgPSBPYnNlcnZlci5pc1RvdWNoID09PSAxO1xuXG4gICAgICAgIF9hZGRMaXN0ZW5lcihfd2luLCBcIndoZWVsXCIsIF9vblNjcm9sbCk7IC8vIG1vc3RseSBmb3IgM3JkIHBhcnR5IHNtb290aCBzY3JvbGxpbmcgbGlicmFyaWVzLlxuXG5cbiAgICAgICAgX3Jvb3QgPSBbX3dpbiwgX2RvYywgX2RvY0VsLCBfYm9keV07XG5cbiAgICAgICAgaWYgKGdzYXAubWF0Y2hNZWRpYSkge1xuICAgICAgICAgIFNjcm9sbFRyaWdnZXIubWF0Y2hNZWRpYSA9IGZ1bmN0aW9uICh2YXJzKSB7XG4gICAgICAgICAgICB2YXIgbW0gPSBnc2FwLm1hdGNoTWVkaWEoKSxcbiAgICAgICAgICAgICAgICBwO1xuXG4gICAgICAgICAgICBmb3IgKHAgaW4gdmFycykge1xuICAgICAgICAgICAgICBtbS5hZGQocCwgdmFyc1twXSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBtbTtcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgZ3NhcC5hZGRFdmVudExpc3RlbmVyKFwibWF0Y2hNZWRpYUluaXRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9yZXZlcnRBbGwoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBnc2FwLmFkZEV2ZW50TGlzdGVuZXIoXCJtYXRjaE1lZGlhUmV2ZXJ0XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBfcmV2ZXJ0UmVjb3JkZWQoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBnc2FwLmFkZEV2ZW50TGlzdGVuZXIoXCJtYXRjaE1lZGlhXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF9yZWZyZXNoQWxsKDAsIDEpO1xuXG4gICAgICAgICAgICBfZGlzcGF0Y2goXCJtYXRjaE1lZGlhXCIpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGdzYXAubWF0Y2hNZWRpYShcIihvcmllbnRhdGlvbjogcG9ydHJhaXQpXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIHdoZW4gb3JpZW50YXRpb24gY2hhbmdlcywgd2Ugc2hvdWxkIHRha2UgbmV3IGJhc2UgbWVhc3VyZW1lbnRzIGZvciB0aGUgaWdub3JlTW9iaWxlUmVzaXplIGZlYXR1cmUuXG4gICAgICAgICAgICBfc2V0QmFzZURpbWVuc2lvbnMoKTtcblxuICAgICAgICAgICAgcmV0dXJuIF9zZXRCYXNlRGltZW5zaW9ucztcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oXCJSZXF1aXJlcyBHU0FQIDMuMTEuMCBvciBsYXRlclwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF9zZXRCYXNlRGltZW5zaW9ucygpO1xuXG4gICAgICAgIF9hZGRMaXN0ZW5lcihfZG9jLCBcInNjcm9sbFwiLCBfb25TY3JvbGwpOyAvLyBzb21lIGJyb3dzZXJzIChsaWtlIENocm9tZSksIHRoZSB3aW5kb3cgc3RvcHMgZGlzcGF0Y2hpbmcgc2Nyb2xsIGV2ZW50cyBvbiB0aGUgd2luZG93IGlmIHlvdSBzY3JvbGwgcmVhbGx5IGZhc3QsIGJ1dCBpdCdzIGNvbnNpc3RlbnQgb24gdGhlIGRvY3VtZW50IVxuXG5cbiAgICAgICAgdmFyIGJvZHlTdHlsZSA9IF9ib2R5LnN0eWxlLFxuICAgICAgICAgICAgYm9yZGVyID0gYm9keVN0eWxlLmJvcmRlclRvcFN0eWxlLFxuICAgICAgICAgICAgQW5pbWF0aW9uUHJvdG8gPSBnc2FwLmNvcmUuQW5pbWF0aW9uLnByb3RvdHlwZSxcbiAgICAgICAgICAgIGJvdW5kcyxcbiAgICAgICAgICAgIGk7XG4gICAgICAgIEFuaW1hdGlvblByb3RvLnJldmVydCB8fCBPYmplY3QuZGVmaW5lUHJvcGVydHkoQW5pbWF0aW9uUHJvdG8sIFwicmV2ZXJ0XCIsIHtcbiAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdmFsdWUoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy50aW1lKC0wLjAxLCB0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pOyAvLyBvbmx5IGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSAoQW5pbWF0aW9uLnJldmVydCgpIHdhcyBhZGRlZCBhZnRlciAzLjEwLjQpXG5cbiAgICAgICAgYm9keVN0eWxlLmJvcmRlclRvcFN0eWxlID0gXCJzb2xpZFwiOyAvLyB3b3JrcyBhcm91bmQgYW4gaXNzdWUgd2hlcmUgYSBtYXJnaW4gb2YgYSBjaGlsZCBlbGVtZW50IGNvdWxkIHRocm93IG9mZiB0aGUgYm91bmRzIG9mIHRoZSBfYm9keSwgbWFraW5nIGl0IHNlZW0gbGlrZSB0aGVyZSdzIGEgbWFyZ2luIHdoZW4gdGhlcmUgYWN0dWFsbHkgaXNuJ3QuIFRoZSBib3JkZXIgZW5zdXJlcyB0aGF0IHRoZSBib3VuZHMgYXJlIGFjY3VyYXRlLlxuXG4gICAgICAgIGJvdW5kcyA9IF9nZXRCb3VuZHMoX2JvZHkpO1xuICAgICAgICBfdmVydGljYWwubSA9IE1hdGgucm91bmQoYm91bmRzLnRvcCArIF92ZXJ0aWNhbC5zYygpKSB8fCAwOyAvLyBhY2NvbW1vZGF0ZSB0aGUgb2Zmc2V0IG9mIHRoZSA8Ym9keT4gY2F1c2VkIGJ5IG1hcmdpbnMgYW5kL29yIHBhZGRpbmdcblxuICAgICAgICBfaG9yaXpvbnRhbC5tID0gTWF0aC5yb3VuZChib3VuZHMubGVmdCArIF9ob3Jpem9udGFsLnNjKCkpIHx8IDA7XG4gICAgICAgIGJvcmRlciA/IGJvZHlTdHlsZS5ib3JkZXJUb3BTdHlsZSA9IGJvcmRlciA6IGJvZHlTdHlsZS5yZW1vdmVQcm9wZXJ0eShcImJvcmRlci10b3Atc3R5bGVcIik7IC8vIFRPRE86ICg/KSBtYXliZSBtb3ZlIHRvIGxldmVyYWdpbmcgdGhlIHZlbG9jaXR5IG1lY2hhbmlzbSBpbiBPYnNlcnZlciBhbmQgc2tpcCBpbnRlcnZhbHMuXG5cbiAgICAgICAgX3N5bmNJbnRlcnZhbCA9IHNldEludGVydmFsKF9zeW5jLCAyNTApO1xuICAgICAgICBnc2FwLmRlbGF5ZWRDYWxsKDAuNSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBfc3RhcnR1cCA9IDA7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIF9hZGRMaXN0ZW5lcihfZG9jLCBcInRvdWNoY2FuY2VsXCIsIF9wYXNzVGhyb3VnaCk7IC8vIHNvbWUgb2xkZXIgQW5kcm9pZCBkZXZpY2VzIGludGVybWl0dGVudGx5IHN0b3AgZGlzcGF0Y2hpbmcgXCJ0b3VjaG1vdmVcIiBldmVudHMgaWYgd2UgZG9uJ3QgbGlzdGVuIGZvciBcInRvdWNoY2FuY2VsXCIgb24gdGhlIGRvY3VtZW50LlxuXG5cbiAgICAgICAgX2FkZExpc3RlbmVyKF9ib2R5LCBcInRvdWNoc3RhcnRcIiwgX3Bhc3NUaHJvdWdoKTsgLy93b3JrcyBhcm91bmQgU2FmYXJpIGJ1ZzogaHR0cHM6Ly9nc2FwLmNvbS9mb3J1bXMvdG9waWMvMjE0NTAtZHJhZ2dhYmxlLWluLWlmcmFtZS1vbi1tb2JpbGUtaXMtYnVnZ3kvXG5cblxuICAgICAgICBfbXVsdGlMaXN0ZW5lcihfYWRkTGlzdGVuZXIsIF9kb2MsIFwicG9pbnRlcmRvd24sdG91Y2hzdGFydCxtb3VzZWRvd25cIiwgX3BvaW50ZXJEb3duSGFuZGxlcik7XG5cbiAgICAgICAgX211bHRpTGlzdGVuZXIoX2FkZExpc3RlbmVyLCBfZG9jLCBcInBvaW50ZXJ1cCx0b3VjaGVuZCxtb3VzZXVwXCIsIF9wb2ludGVyVXBIYW5kbGVyKTtcblxuICAgICAgICBfdHJhbnNmb3JtUHJvcCA9IGdzYXAudXRpbHMuY2hlY2tQcmVmaXgoXCJ0cmFuc2Zvcm1cIik7XG5cbiAgICAgICAgX3N0YXRlUHJvcHMucHVzaChfdHJhbnNmb3JtUHJvcCk7XG5cbiAgICAgICAgX2NvcmVJbml0dGVkID0gX2dldFRpbWUoKTtcbiAgICAgICAgX3Jlc2l6ZURlbGF5ID0gZ3NhcC5kZWxheWVkQ2FsbCgwLjIsIF9yZWZyZXNoQWxsKS5wYXVzZSgpO1xuICAgICAgICBfYXV0b1JlZnJlc2ggPSBbX2RvYywgXCJ2aXNpYmlsaXR5Y2hhbmdlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgdyA9IF93aW4uaW5uZXJXaWR0aCxcbiAgICAgICAgICAgICAgaCA9IF93aW4uaW5uZXJIZWlnaHQ7XG5cbiAgICAgICAgICBpZiAoX2RvYy5oaWRkZW4pIHtcbiAgICAgICAgICAgIF9wcmV2V2lkdGggPSB3O1xuICAgICAgICAgICAgX3ByZXZIZWlnaHQgPSBoO1xuICAgICAgICAgIH0gZWxzZSBpZiAoX3ByZXZXaWR0aCAhPT0gdyB8fCBfcHJldkhlaWdodCAhPT0gaCkge1xuICAgICAgICAgICAgX29uUmVzaXplKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCBfZG9jLCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgX3JlZnJlc2hBbGwsIF93aW4sIFwibG9hZFwiLCBfcmVmcmVzaEFsbCwgX3dpbiwgXCJyZXNpemVcIiwgX29uUmVzaXplXTtcblxuICAgICAgICBfaXRlcmF0ZUF1dG9SZWZyZXNoKF9hZGRMaXN0ZW5lcik7XG5cbiAgICAgICAgX3RyaWdnZXJzLmZvckVhY2goZnVuY3Rpb24gKHRyaWdnZXIpIHtcbiAgICAgICAgICByZXR1cm4gdHJpZ2dlci5lbmFibGUoMCwgMSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBfc2Nyb2xsZXJzLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgICAgICAgX3doZWVsTGlzdGVuZXIoX3JlbW92ZUxpc3RlbmVyLCBfc2Nyb2xsZXJzW2ldLCBfc2Nyb2xsZXJzW2kgKyAxXSk7XG5cbiAgICAgICAgICBfd2hlZWxMaXN0ZW5lcihfcmVtb3ZlTGlzdGVuZXIsIF9zY3JvbGxlcnNbaV0sIF9zY3JvbGxlcnNbaSArIDJdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBTY3JvbGxUcmlnZ2VyLmNvbmZpZyA9IGZ1bmN0aW9uIGNvbmZpZyh2YXJzKSB7XG4gICAgXCJsaW1pdENhbGxiYWNrc1wiIGluIHZhcnMgJiYgKF9saW1pdENhbGxiYWNrcyA9ICEhdmFycy5saW1pdENhbGxiYWNrcyk7XG4gICAgdmFyIG1zID0gdmFycy5zeW5jSW50ZXJ2YWw7XG4gICAgbXMgJiYgY2xlYXJJbnRlcnZhbChfc3luY0ludGVydmFsKSB8fCAoX3N5bmNJbnRlcnZhbCA9IG1zKSAmJiBzZXRJbnRlcnZhbChfc3luYywgbXMpO1xuICAgIFwiaWdub3JlTW9iaWxlUmVzaXplXCIgaW4gdmFycyAmJiAoX2lnbm9yZU1vYmlsZVJlc2l6ZSA9IFNjcm9sbFRyaWdnZXIuaXNUb3VjaCA9PT0gMSAmJiB2YXJzLmlnbm9yZU1vYmlsZVJlc2l6ZSk7XG5cbiAgICBpZiAoXCJhdXRvUmVmcmVzaEV2ZW50c1wiIGluIHZhcnMpIHtcbiAgICAgIF9pdGVyYXRlQXV0b1JlZnJlc2goX3JlbW92ZUxpc3RlbmVyKSB8fCBfaXRlcmF0ZUF1dG9SZWZyZXNoKF9hZGRMaXN0ZW5lciwgdmFycy5hdXRvUmVmcmVzaEV2ZW50cyB8fCBcIm5vbmVcIik7XG4gICAgICBfaWdub3JlUmVzaXplID0gKHZhcnMuYXV0b1JlZnJlc2hFdmVudHMgKyBcIlwiKS5pbmRleE9mKFwicmVzaXplXCIpID09PSAtMTtcbiAgICB9XG4gIH07XG5cbiAgU2Nyb2xsVHJpZ2dlci5zY3JvbGxlclByb3h5ID0gZnVuY3Rpb24gc2Nyb2xsZXJQcm94eSh0YXJnZXQsIHZhcnMpIHtcbiAgICB2YXIgdCA9IF9nZXRUYXJnZXQodGFyZ2V0KSxcbiAgICAgICAgaSA9IF9zY3JvbGxlcnMuaW5kZXhPZih0KSxcbiAgICAgICAgaXNWaWV3cG9ydCA9IF9pc1ZpZXdwb3J0KHQpO1xuXG4gICAgaWYgKH5pKSB7XG4gICAgICBfc2Nyb2xsZXJzLnNwbGljZShpLCBpc1ZpZXdwb3J0ID8gNiA6IDIpO1xuICAgIH1cblxuICAgIGlmICh2YXJzKSB7XG4gICAgICBpc1ZpZXdwb3J0ID8gX3Byb3hpZXMudW5zaGlmdChfd2luLCB2YXJzLCBfYm9keSwgdmFycywgX2RvY0VsLCB2YXJzKSA6IF9wcm94aWVzLnVuc2hpZnQodCwgdmFycyk7XG4gICAgfVxuICB9O1xuXG4gIFNjcm9sbFRyaWdnZXIuY2xlYXJNYXRjaE1lZGlhID0gZnVuY3Rpb24gY2xlYXJNYXRjaE1lZGlhKHF1ZXJ5KSB7XG4gICAgX3RyaWdnZXJzLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcbiAgICAgIHJldHVybiB0Ll9jdHggJiYgdC5fY3R4LnF1ZXJ5ID09PSBxdWVyeSAmJiB0Ll9jdHgua2lsbCh0cnVlLCB0cnVlKTtcbiAgICB9KTtcbiAgfTtcblxuICBTY3JvbGxUcmlnZ2VyLmlzSW5WaWV3cG9ydCA9IGZ1bmN0aW9uIGlzSW5WaWV3cG9ydChlbGVtZW50LCByYXRpbywgaG9yaXpvbnRhbCkge1xuICAgIHZhciBib3VuZHMgPSAoX2lzU3RyaW5nKGVsZW1lbnQpID8gX2dldFRhcmdldChlbGVtZW50KSA6IGVsZW1lbnQpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxuICAgICAgICBvZmZzZXQgPSBib3VuZHNbaG9yaXpvbnRhbCA/IF93aWR0aCA6IF9oZWlnaHRdICogcmF0aW8gfHwgMDtcbiAgICByZXR1cm4gaG9yaXpvbnRhbCA/IGJvdW5kcy5yaWdodCAtIG9mZnNldCA+IDAgJiYgYm91bmRzLmxlZnQgKyBvZmZzZXQgPCBfd2luLmlubmVyV2lkdGggOiBib3VuZHMuYm90dG9tIC0gb2Zmc2V0ID4gMCAmJiBib3VuZHMudG9wICsgb2Zmc2V0IDwgX3dpbi5pbm5lckhlaWdodDtcbiAgfTtcblxuICBTY3JvbGxUcmlnZ2VyLnBvc2l0aW9uSW5WaWV3cG9ydCA9IGZ1bmN0aW9uIHBvc2l0aW9uSW5WaWV3cG9ydChlbGVtZW50LCByZWZlcmVuY2VQb2ludCwgaG9yaXpvbnRhbCkge1xuICAgIF9pc1N0cmluZyhlbGVtZW50KSAmJiAoZWxlbWVudCA9IF9nZXRUYXJnZXQoZWxlbWVudCkpO1xuICAgIHZhciBib3VuZHMgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxuICAgICAgICBzaXplID0gYm91bmRzW2hvcml6b250YWwgPyBfd2lkdGggOiBfaGVpZ2h0XSxcbiAgICAgICAgb2Zmc2V0ID0gcmVmZXJlbmNlUG9pbnQgPT0gbnVsbCA/IHNpemUgLyAyIDogcmVmZXJlbmNlUG9pbnQgaW4gX2tleXdvcmRzID8gX2tleXdvcmRzW3JlZmVyZW5jZVBvaW50XSAqIHNpemUgOiB+cmVmZXJlbmNlUG9pbnQuaW5kZXhPZihcIiVcIikgPyBwYXJzZUZsb2F0KHJlZmVyZW5jZVBvaW50KSAqIHNpemUgLyAxMDAgOiBwYXJzZUZsb2F0KHJlZmVyZW5jZVBvaW50KSB8fCAwO1xuICAgIHJldHVybiBob3Jpem9udGFsID8gKGJvdW5kcy5sZWZ0ICsgb2Zmc2V0KSAvIF93aW4uaW5uZXJXaWR0aCA6IChib3VuZHMudG9wICsgb2Zmc2V0KSAvIF93aW4uaW5uZXJIZWlnaHQ7XG4gIH07XG5cbiAgU2Nyb2xsVHJpZ2dlci5raWxsQWxsID0gZnVuY3Rpb24ga2lsbEFsbChhbGxvd0xpc3RlbmVycykge1xuICAgIF90cmlnZ2Vycy5zbGljZSgwKS5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XG4gICAgICByZXR1cm4gdC52YXJzLmlkICE9PSBcIlNjcm9sbFNtb290aGVyXCIgJiYgdC5raWxsKCk7XG4gICAgfSk7XG5cbiAgICBpZiAoYWxsb3dMaXN0ZW5lcnMgIT09IHRydWUpIHtcbiAgICAgIHZhciBsaXN0ZW5lcnMgPSBfbGlzdGVuZXJzLmtpbGxBbGwgfHwgW107XG4gICAgICBfbGlzdGVuZXJzID0ge307XG4gICAgICBsaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAoZikge1xuICAgICAgICByZXR1cm4gZigpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBTY3JvbGxUcmlnZ2VyO1xufSgpO1xuU2Nyb2xsVHJpZ2dlci52ZXJzaW9uID0gXCIzLjEyLjVcIjtcblxuU2Nyb2xsVHJpZ2dlci5zYXZlU3R5bGVzID0gZnVuY3Rpb24gKHRhcmdldHMpIHtcbiAgcmV0dXJuIHRhcmdldHMgPyBfdG9BcnJheSh0YXJnZXRzKS5mb3JFYWNoKGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAvLyBzYXZlZCBzdHlsZXMgYXJlIHJlY29yZGVkIGluIGEgY29uc2VjdXRpdmUgYWx0ZXJuYXRpbmcgQXJyYXksIGxpa2UgW2VsZW1lbnQsIGNzc1RleHQsIHRyYW5zZm9ybSBhdHRyaWJ1dGUsIGNhY2hlLCBtYXRjaE1lZGlhLCAuLi5dXG4gICAgaWYgKHRhcmdldCAmJiB0YXJnZXQuc3R5bGUpIHtcbiAgICAgIHZhciBpID0gX3NhdmVkU3R5bGVzLmluZGV4T2YodGFyZ2V0KTtcblxuICAgICAgaSA+PSAwICYmIF9zYXZlZFN0eWxlcy5zcGxpY2UoaSwgNSk7XG5cbiAgICAgIF9zYXZlZFN0eWxlcy5wdXNoKHRhcmdldCwgdGFyZ2V0LnN0eWxlLmNzc1RleHQsIHRhcmdldC5nZXRCQm94ICYmIHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIiksIGdzYXAuY29yZS5nZXRDYWNoZSh0YXJnZXQpLCBfY29udGV4dCgpKTtcbiAgICB9XG4gIH0pIDogX3NhdmVkU3R5bGVzO1xufTtcblxuU2Nyb2xsVHJpZ2dlci5yZXZlcnQgPSBmdW5jdGlvbiAoc29mdCwgbWVkaWEpIHtcbiAgcmV0dXJuIF9yZXZlcnRBbGwoIXNvZnQsIG1lZGlhKTtcbn07XG5cblNjcm9sbFRyaWdnZXIuY3JlYXRlID0gZnVuY3Rpb24gKHZhcnMsIGFuaW1hdGlvbikge1xuICByZXR1cm4gbmV3IFNjcm9sbFRyaWdnZXIodmFycywgYW5pbWF0aW9uKTtcbn07XG5cblNjcm9sbFRyaWdnZXIucmVmcmVzaCA9IGZ1bmN0aW9uIChzYWZlKSB7XG4gIHJldHVybiBzYWZlID8gX29uUmVzaXplKCkgOiAoX2NvcmVJbml0dGVkIHx8IFNjcm9sbFRyaWdnZXIucmVnaXN0ZXIoKSkgJiYgX3JlZnJlc2hBbGwodHJ1ZSk7XG59O1xuXG5TY3JvbGxUcmlnZ2VyLnVwZGF0ZSA9IGZ1bmN0aW9uIChmb3JjZSkge1xuICByZXR1cm4gKytfc2Nyb2xsZXJzLmNhY2hlICYmIF91cGRhdGVBbGwoZm9yY2UgPT09IHRydWUgPyAyIDogMCk7XG59O1xuXG5TY3JvbGxUcmlnZ2VyLmNsZWFyU2Nyb2xsTWVtb3J5ID0gX2NsZWFyU2Nyb2xsTWVtb3J5O1xuXG5TY3JvbGxUcmlnZ2VyLm1heFNjcm9sbCA9IGZ1bmN0aW9uIChlbGVtZW50LCBob3Jpem9udGFsKSB7XG4gIHJldHVybiBfbWF4U2Nyb2xsKGVsZW1lbnQsIGhvcml6b250YWwgPyBfaG9yaXpvbnRhbCA6IF92ZXJ0aWNhbCk7XG59O1xuXG5TY3JvbGxUcmlnZ2VyLmdldFNjcm9sbEZ1bmMgPSBmdW5jdGlvbiAoZWxlbWVudCwgaG9yaXpvbnRhbCkge1xuICByZXR1cm4gX2dldFNjcm9sbEZ1bmMoX2dldFRhcmdldChlbGVtZW50KSwgaG9yaXpvbnRhbCA/IF9ob3Jpem9udGFsIDogX3ZlcnRpY2FsKTtcbn07XG5cblNjcm9sbFRyaWdnZXIuZ2V0QnlJZCA9IGZ1bmN0aW9uIChpZCkge1xuICByZXR1cm4gX2lkc1tpZF07XG59O1xuXG5TY3JvbGxUcmlnZ2VyLmdldEFsbCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIF90cmlnZ2Vycy5maWx0ZXIoZnVuY3Rpb24gKHQpIHtcbiAgICByZXR1cm4gdC52YXJzLmlkICE9PSBcIlNjcm9sbFNtb290aGVyXCI7XG4gIH0pO1xufTsgLy8gaXQncyBjb21tb24gZm9yIHBlb3BsZSB0byBTY3JvbGxUcmlnZ2VyLmdldEFsbCh0ID0+IHQua2lsbCgpKSBvbiBwYWdlIHJvdXRlcywgZm9yIGV4YW1wbGUsIGFuZCB3ZSBkb24ndCB3YW50IGl0IHRvIHJ1aW4gc21vb3RoIHNjcm9sbGluZyBieSBraWxsaW5nIHRoZSBtYWluIFNjcm9sbFNtb290aGVyIG9uZS5cblxuXG5TY3JvbGxUcmlnZ2VyLmlzU2Nyb2xsaW5nID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gISFfbGFzdFNjcm9sbFRpbWU7XG59O1xuXG5TY3JvbGxUcmlnZ2VyLnNuYXBEaXJlY3Rpb25hbCA9IF9zbmFwRGlyZWN0aW9uYWw7XG5cblNjcm9sbFRyaWdnZXIuYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uICh0eXBlLCBjYWxsYmFjaykge1xuICB2YXIgYSA9IF9saXN0ZW5lcnNbdHlwZV0gfHwgKF9saXN0ZW5lcnNbdHlwZV0gPSBbXSk7XG4gIH5hLmluZGV4T2YoY2FsbGJhY2spIHx8IGEucHVzaChjYWxsYmFjayk7XG59O1xuXG5TY3JvbGxUcmlnZ2VyLnJlbW92ZUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiAodHlwZSwgY2FsbGJhY2spIHtcbiAgdmFyIGEgPSBfbGlzdGVuZXJzW3R5cGVdLFxuICAgICAgaSA9IGEgJiYgYS5pbmRleE9mKGNhbGxiYWNrKTtcbiAgaSA+PSAwICYmIGEuc3BsaWNlKGksIDEpO1xufTtcblxuU2Nyb2xsVHJpZ2dlci5iYXRjaCA9IGZ1bmN0aW9uICh0YXJnZXRzLCB2YXJzKSB7XG4gIHZhciByZXN1bHQgPSBbXSxcbiAgICAgIHZhcnNDb3B5ID0ge30sXG4gICAgICBpbnRlcnZhbCA9IHZhcnMuaW50ZXJ2YWwgfHwgMC4wMTYsXG4gICAgICBiYXRjaE1heCA9IHZhcnMuYmF0Y2hNYXggfHwgMWU5LFxuICAgICAgcHJveHlDYWxsYmFjayA9IGZ1bmN0aW9uIHByb3h5Q2FsbGJhY2sodHlwZSwgY2FsbGJhY2spIHtcbiAgICB2YXIgZWxlbWVudHMgPSBbXSxcbiAgICAgICAgdHJpZ2dlcnMgPSBbXSxcbiAgICAgICAgZGVsYXkgPSBnc2FwLmRlbGF5ZWRDYWxsKGludGVydmFsLCBmdW5jdGlvbiAoKSB7XG4gICAgICBjYWxsYmFjayhlbGVtZW50cywgdHJpZ2dlcnMpO1xuICAgICAgZWxlbWVudHMgPSBbXTtcbiAgICAgIHRyaWdnZXJzID0gW107XG4gICAgfSkucGF1c2UoKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNlbGYpIHtcbiAgICAgIGVsZW1lbnRzLmxlbmd0aCB8fCBkZWxheS5yZXN0YXJ0KHRydWUpO1xuICAgICAgZWxlbWVudHMucHVzaChzZWxmLnRyaWdnZXIpO1xuICAgICAgdHJpZ2dlcnMucHVzaChzZWxmKTtcbiAgICAgIGJhdGNoTWF4IDw9IGVsZW1lbnRzLmxlbmd0aCAmJiBkZWxheS5wcm9ncmVzcygxKTtcbiAgICB9O1xuICB9LFxuICAgICAgcDtcblxuICBmb3IgKHAgaW4gdmFycykge1xuICAgIHZhcnNDb3B5W3BdID0gcC5zdWJzdHIoMCwgMikgPT09IFwib25cIiAmJiBfaXNGdW5jdGlvbih2YXJzW3BdKSAmJiBwICE9PSBcIm9uUmVmcmVzaEluaXRcIiA/IHByb3h5Q2FsbGJhY2socCwgdmFyc1twXSkgOiB2YXJzW3BdO1xuICB9XG5cbiAgaWYgKF9pc0Z1bmN0aW9uKGJhdGNoTWF4KSkge1xuICAgIGJhdGNoTWF4ID0gYmF0Y2hNYXgoKTtcblxuICAgIF9hZGRMaXN0ZW5lcihTY3JvbGxUcmlnZ2VyLCBcInJlZnJlc2hcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGJhdGNoTWF4ID0gdmFycy5iYXRjaE1heCgpO1xuICAgIH0pO1xuICB9XG5cbiAgX3RvQXJyYXkodGFyZ2V0cykuZm9yRWFjaChmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgdmFyIGNvbmZpZyA9IHt9O1xuXG4gICAgZm9yIChwIGluIHZhcnNDb3B5KSB7XG4gICAgICBjb25maWdbcF0gPSB2YXJzQ29weVtwXTtcbiAgICB9XG5cbiAgICBjb25maWcudHJpZ2dlciA9IHRhcmdldDtcbiAgICByZXN1bHQucHVzaChTY3JvbGxUcmlnZ2VyLmNyZWF0ZShjb25maWcpKTtcbiAgfSk7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07IC8vIHRvIHJlZHVjZSBmaWxlIHNpemUuIGNsYW1wcyB0aGUgc2Nyb2xsIGFuZCBhbHNvIHJldHVybnMgYSBkdXJhdGlvbiBtdWx0aXBsaWVyIHNvIHRoYXQgaWYgdGhlIHNjcm9sbCBnZXRzIGNob3BwZWQgc2hvcnRlciwgdGhlIGR1cmF0aW9uIGdldHMgY3VydGFpbGVkIGFzIHdlbGwgKG90aGVyd2lzZSBpZiB5b3UncmUgdmVyeSBjbG9zZSB0byB0aGUgdG9wIG9mIHRoZSBwYWdlLCBmb3IgZXhhbXBsZSwgYW5kIHN3aXBlIHVwIHJlYWxseSBmYXN0LCBpdCdsbCBzdWRkZW5seSBzbG93IGRvd24gYW5kIHRha2UgYSBsb25nIHRpbWUgdG8gcmVhY2ggdGhlIHRvcCkuXG5cblxudmFyIF9jbGFtcFNjcm9sbEFuZEdldER1cmF0aW9uTXVsdGlwbGllciA9IGZ1bmN0aW9uIF9jbGFtcFNjcm9sbEFuZEdldER1cmF0aW9uTXVsdGlwbGllcihzY3JvbGxGdW5jLCBjdXJyZW50LCBlbmQsIG1heCkge1xuICBjdXJyZW50ID4gbWF4ID8gc2Nyb2xsRnVuYyhtYXgpIDogY3VycmVudCA8IDAgJiYgc2Nyb2xsRnVuYygwKTtcbiAgcmV0dXJuIGVuZCA+IG1heCA/IChtYXggLSBjdXJyZW50KSAvIChlbmQgLSBjdXJyZW50KSA6IGVuZCA8IDAgPyBjdXJyZW50IC8gKGN1cnJlbnQgLSBlbmQpIDogMTtcbn0sXG4gICAgX2FsbG93TmF0aXZlUGFubmluZyA9IGZ1bmN0aW9uIF9hbGxvd05hdGl2ZVBhbm5pbmcodGFyZ2V0LCBkaXJlY3Rpb24pIHtcbiAgaWYgKGRpcmVjdGlvbiA9PT0gdHJ1ZSkge1xuICAgIHRhcmdldC5zdHlsZS5yZW1vdmVQcm9wZXJ0eShcInRvdWNoLWFjdGlvblwiKTtcbiAgfSBlbHNlIHtcbiAgICB0YXJnZXQuc3R5bGUudG91Y2hBY3Rpb24gPSBkaXJlY3Rpb24gPT09IHRydWUgPyBcImF1dG9cIiA6IGRpcmVjdGlvbiA/IFwicGFuLVwiICsgZGlyZWN0aW9uICsgKE9ic2VydmVyLmlzVG91Y2ggPyBcIiBwaW5jaC16b29tXCIgOiBcIlwiKSA6IFwibm9uZVwiOyAvLyBub3RlOiBGaXJlZm94IGRvZXNuJ3Qgc3VwcG9ydCBpdCBwaW5jaC16b29tIHByb3Blcmx5LCBhdCBsZWFzdCBpbiBhZGRpdGlvbiB0byBhIHBhbi14IG9yIHBhbi15LlxuICB9XG5cbiAgdGFyZ2V0ID09PSBfZG9jRWwgJiYgX2FsbG93TmF0aXZlUGFubmluZyhfYm9keSwgZGlyZWN0aW9uKTtcbn0sXG4gICAgX292ZXJmbG93ID0ge1xuICBhdXRvOiAxLFxuICBzY3JvbGw6IDFcbn0sXG4gICAgX25lc3RlZFNjcm9sbCA9IGZ1bmN0aW9uIF9uZXN0ZWRTY3JvbGwoX3JlZjUpIHtcbiAgdmFyIGV2ZW50ID0gX3JlZjUuZXZlbnQsXG4gICAgICB0YXJnZXQgPSBfcmVmNS50YXJnZXQsXG4gICAgICBheGlzID0gX3JlZjUuYXhpcztcblxuICB2YXIgbm9kZSA9IChldmVudC5jaGFuZ2VkVG91Y2hlcyA/IGV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdIDogZXZlbnQpLnRhcmdldCxcbiAgICAgIGNhY2hlID0gbm9kZS5fZ3NhcCB8fCBnc2FwLmNvcmUuZ2V0Q2FjaGUobm9kZSksXG4gICAgICB0aW1lID0gX2dldFRpbWUoKSxcbiAgICAgIGNzO1xuXG4gIGlmICghY2FjaGUuX2lzU2Nyb2xsVCB8fCB0aW1lIC0gY2FjaGUuX2lzU2Nyb2xsVCA+IDIwMDApIHtcbiAgICAvLyBjYWNoZSBmb3IgMiBzZWNvbmRzIHRvIGltcHJvdmUgcGVyZm9ybWFuY2UuXG4gICAgd2hpbGUgKG5vZGUgJiYgbm9kZSAhPT0gX2JvZHkgJiYgKG5vZGUuc2Nyb2xsSGVpZ2h0IDw9IG5vZGUuY2xpZW50SGVpZ2h0ICYmIG5vZGUuc2Nyb2xsV2lkdGggPD0gbm9kZS5jbGllbnRXaWR0aCB8fCAhKF9vdmVyZmxvd1soY3MgPSBfZ2V0Q29tcHV0ZWRTdHlsZShub2RlKSkub3ZlcmZsb3dZXSB8fCBfb3ZlcmZsb3dbY3Mub3ZlcmZsb3dYXSkpKSB7XG4gICAgICBub2RlID0gbm9kZS5wYXJlbnROb2RlO1xuICAgIH1cblxuICAgIGNhY2hlLl9pc1Njcm9sbCA9IG5vZGUgJiYgbm9kZSAhPT0gdGFyZ2V0ICYmICFfaXNWaWV3cG9ydChub2RlKSAmJiAoX292ZXJmbG93WyhjcyA9IF9nZXRDb21wdXRlZFN0eWxlKG5vZGUpKS5vdmVyZmxvd1ldIHx8IF9vdmVyZmxvd1tjcy5vdmVyZmxvd1hdKTtcbiAgICBjYWNoZS5faXNTY3JvbGxUID0gdGltZTtcbiAgfVxuXG4gIGlmIChjYWNoZS5faXNTY3JvbGwgfHwgYXhpcyA9PT0gXCJ4XCIpIHtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBldmVudC5fZ3NhcEFsbG93ID0gdHJ1ZTtcbiAgfVxufSxcbiAgICAvLyBjYXB0dXJlIGV2ZW50cyBvbiBzY3JvbGxhYmxlIGVsZW1lbnRzIElOU0lERSB0aGUgPGJvZHk+IGFuZCBhbGxvdyB0aG9zZSBieSBjYWxsaW5nIHN0b3BQcm9wYWdhdGlvbigpIHdoZW4gd2UgZmluZCBhIHNjcm9sbGFibGUgYW5jZXN0b3Jcbl9pbnB1dE9ic2VydmVyID0gZnVuY3Rpb24gX2lucHV0T2JzZXJ2ZXIodGFyZ2V0LCB0eXBlLCBpbnB1dHMsIG5lc3RlZCkge1xuICByZXR1cm4gT2JzZXJ2ZXIuY3JlYXRlKHtcbiAgICB0YXJnZXQ6IHRhcmdldCxcbiAgICBjYXB0dXJlOiB0cnVlLFxuICAgIGRlYm91bmNlOiBmYWxzZSxcbiAgICBsb2NrQXhpczogdHJ1ZSxcbiAgICB0eXBlOiB0eXBlLFxuICAgIG9uV2hlZWw6IG5lc3RlZCA9IG5lc3RlZCAmJiBfbmVzdGVkU2Nyb2xsLFxuICAgIG9uUHJlc3M6IG5lc3RlZCxcbiAgICBvbkRyYWc6IG5lc3RlZCxcbiAgICBvblNjcm9sbDogbmVzdGVkLFxuICAgIG9uRW5hYmxlOiBmdW5jdGlvbiBvbkVuYWJsZSgpIHtcbiAgICAgIHJldHVybiBpbnB1dHMgJiYgX2FkZExpc3RlbmVyKF9kb2MsIE9ic2VydmVyLmV2ZW50VHlwZXNbMF0sIF9jYXB0dXJlSW5wdXRzLCBmYWxzZSwgdHJ1ZSk7XG4gICAgfSxcbiAgICBvbkRpc2FibGU6IGZ1bmN0aW9uIG9uRGlzYWJsZSgpIHtcbiAgICAgIHJldHVybiBfcmVtb3ZlTGlzdGVuZXIoX2RvYywgT2JzZXJ2ZXIuZXZlbnRUeXBlc1swXSwgX2NhcHR1cmVJbnB1dHMsIHRydWUpO1xuICAgIH1cbiAgfSk7XG59LFxuICAgIF9pbnB1dEV4cCA9IC8oaW5wdXR8bGFiZWx8c2VsZWN0fHRleHRhcmVhKS9pLFxuICAgIF9pbnB1dElzRm9jdXNlZCxcbiAgICBfY2FwdHVyZUlucHV0cyA9IGZ1bmN0aW9uIF9jYXB0dXJlSW5wdXRzKGUpIHtcbiAgdmFyIGlzSW5wdXQgPSBfaW5wdXRFeHAudGVzdChlLnRhcmdldC50YWdOYW1lKTtcblxuICBpZiAoaXNJbnB1dCB8fCBfaW5wdXRJc0ZvY3VzZWQpIHtcbiAgICBlLl9nc2FwQWxsb3cgPSB0cnVlO1xuICAgIF9pbnB1dElzRm9jdXNlZCA9IGlzSW5wdXQ7XG4gIH1cbn0sXG4gICAgX2dldFNjcm9sbE5vcm1hbGl6ZXIgPSBmdW5jdGlvbiBfZ2V0U2Nyb2xsTm9ybWFsaXplcih2YXJzKSB7XG4gIF9pc09iamVjdCh2YXJzKSB8fCAodmFycyA9IHt9KTtcbiAgdmFycy5wcmV2ZW50RGVmYXVsdCA9IHZhcnMuaXNOb3JtYWxpemVyID0gdmFycy5hbGxvd0NsaWNrcyA9IHRydWU7XG4gIHZhcnMudHlwZSB8fCAodmFycy50eXBlID0gXCJ3aGVlbCx0b3VjaFwiKTtcbiAgdmFycy5kZWJvdW5jZSA9ICEhdmFycy5kZWJvdW5jZTtcbiAgdmFycy5pZCA9IHZhcnMuaWQgfHwgXCJub3JtYWxpemVyXCI7XG5cbiAgdmFyIF92YXJzMiA9IHZhcnMsXG4gICAgICBub3JtYWxpemVTY3JvbGxYID0gX3ZhcnMyLm5vcm1hbGl6ZVNjcm9sbFgsXG4gICAgICBtb21lbnR1bSA9IF92YXJzMi5tb21lbnR1bSxcbiAgICAgIGFsbG93TmVzdGVkU2Nyb2xsID0gX3ZhcnMyLmFsbG93TmVzdGVkU2Nyb2xsLFxuICAgICAgb25SZWxlYXNlID0gX3ZhcnMyLm9uUmVsZWFzZSxcbiAgICAgIHNlbGYsXG4gICAgICBtYXhZLFxuICAgICAgdGFyZ2V0ID0gX2dldFRhcmdldCh2YXJzLnRhcmdldCkgfHwgX2RvY0VsLFxuICAgICAgc21vb3RoZXIgPSBnc2FwLmNvcmUuZ2xvYmFscygpLlNjcm9sbFNtb290aGVyLFxuICAgICAgc21vb3RoZXJJbnN0YW5jZSA9IHNtb290aGVyICYmIHNtb290aGVyLmdldCgpLFxuICAgICAgY29udGVudCA9IF9maXhJT1NCdWcgJiYgKHZhcnMuY29udGVudCAmJiBfZ2V0VGFyZ2V0KHZhcnMuY29udGVudCkgfHwgc21vb3RoZXJJbnN0YW5jZSAmJiB2YXJzLmNvbnRlbnQgIT09IGZhbHNlICYmICFzbW9vdGhlckluc3RhbmNlLnNtb290aCgpICYmIHNtb290aGVySW5zdGFuY2UuY29udGVudCgpKSxcbiAgICAgIHNjcm9sbEZ1bmNZID0gX2dldFNjcm9sbEZ1bmModGFyZ2V0LCBfdmVydGljYWwpLFxuICAgICAgc2Nyb2xsRnVuY1ggPSBfZ2V0U2Nyb2xsRnVuYyh0YXJnZXQsIF9ob3Jpem9udGFsKSxcbiAgICAgIHNjYWxlID0gMSxcbiAgICAgIGluaXRpYWxTY2FsZSA9IChPYnNlcnZlci5pc1RvdWNoICYmIF93aW4udmlzdWFsVmlld3BvcnQgPyBfd2luLnZpc3VhbFZpZXdwb3J0LnNjYWxlICogX3dpbi52aXN1YWxWaWV3cG9ydC53aWR0aCA6IF93aW4ub3V0ZXJXaWR0aCkgLyBfd2luLmlubmVyV2lkdGgsXG4gICAgICB3aGVlbFJlZnJlc2ggPSAwLFxuICAgICAgcmVzb2x2ZU1vbWVudHVtRHVyYXRpb24gPSBfaXNGdW5jdGlvbihtb21lbnR1bSkgPyBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG1vbWVudHVtKHNlbGYpO1xuICB9IDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBtb21lbnR1bSB8fCAyLjg7XG4gIH0sXG4gICAgICBsYXN0UmVmcmVzaElELFxuICAgICAgc2tpcFRvdWNoTW92ZSxcbiAgICAgIGlucHV0T2JzZXJ2ZXIgPSBfaW5wdXRPYnNlcnZlcih0YXJnZXQsIHZhcnMudHlwZSwgdHJ1ZSwgYWxsb3dOZXN0ZWRTY3JvbGwpLFxuICAgICAgcmVzdW1lVG91Y2hNb3ZlID0gZnVuY3Rpb24gcmVzdW1lVG91Y2hNb3ZlKCkge1xuICAgIHJldHVybiBza2lwVG91Y2hNb3ZlID0gZmFsc2U7XG4gIH0sXG4gICAgICBzY3JvbGxDbGFtcFggPSBfcGFzc1Rocm91Z2gsXG4gICAgICBzY3JvbGxDbGFtcFkgPSBfcGFzc1Rocm91Z2gsXG4gICAgICB1cGRhdGVDbGFtcHMgPSBmdW5jdGlvbiB1cGRhdGVDbGFtcHMoKSB7XG4gICAgbWF4WSA9IF9tYXhTY3JvbGwodGFyZ2V0LCBfdmVydGljYWwpO1xuICAgIHNjcm9sbENsYW1wWSA9IF9jbGFtcChfZml4SU9TQnVnID8gMSA6IDAsIG1heFkpO1xuICAgIG5vcm1hbGl6ZVNjcm9sbFggJiYgKHNjcm9sbENsYW1wWCA9IF9jbGFtcCgwLCBfbWF4U2Nyb2xsKHRhcmdldCwgX2hvcml6b250YWwpKSk7XG4gICAgbGFzdFJlZnJlc2hJRCA9IF9yZWZyZXNoSUQ7XG4gIH0sXG4gICAgICByZW1vdmVDb250ZW50T2Zmc2V0ID0gZnVuY3Rpb24gcmVtb3ZlQ29udGVudE9mZnNldCgpIHtcbiAgICBjb250ZW50Ll9nc2FwLnkgPSBfcm91bmQocGFyc2VGbG9hdChjb250ZW50Ll9nc2FwLnkpICsgc2Nyb2xsRnVuY1kub2Zmc2V0KSArIFwicHhcIjtcbiAgICBjb250ZW50LnN0eWxlLnRyYW5zZm9ybSA9IFwibWF0cml4M2QoMSwgMCwgMCwgMCwgMCwgMSwgMCwgMCwgMCwgMCwgMSwgMCwgMCwgXCIgKyBwYXJzZUZsb2F0KGNvbnRlbnQuX2dzYXAueSkgKyBcIiwgMCwgMSlcIjtcbiAgICBzY3JvbGxGdW5jWS5vZmZzZXQgPSBzY3JvbGxGdW5jWS5jYWNoZUlEID0gMDtcbiAgfSxcbiAgICAgIGlnbm9yZURyYWcgPSBmdW5jdGlvbiBpZ25vcmVEcmFnKCkge1xuICAgIGlmIChza2lwVG91Y2hNb3ZlKSB7XG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmVzdW1lVG91Y2hNb3ZlKTtcblxuICAgICAgdmFyIG9mZnNldCA9IF9yb3VuZChzZWxmLmRlbHRhWSAvIDIpLFxuICAgICAgICAgIHNjcm9sbCA9IHNjcm9sbENsYW1wWShzY3JvbGxGdW5jWS52IC0gb2Zmc2V0KTtcblxuICAgICAgaWYgKGNvbnRlbnQgJiYgc2Nyb2xsICE9PSBzY3JvbGxGdW5jWS52ICsgc2Nyb2xsRnVuY1kub2Zmc2V0KSB7XG4gICAgICAgIHNjcm9sbEZ1bmNZLm9mZnNldCA9IHNjcm9sbCAtIHNjcm9sbEZ1bmNZLnY7XG5cbiAgICAgICAgdmFyIHkgPSBfcm91bmQoKHBhcnNlRmxvYXQoY29udGVudCAmJiBjb250ZW50Ll9nc2FwLnkpIHx8IDApIC0gc2Nyb2xsRnVuY1kub2Zmc2V0KTtcblxuICAgICAgICBjb250ZW50LnN0eWxlLnRyYW5zZm9ybSA9IFwibWF0cml4M2QoMSwgMCwgMCwgMCwgMCwgMSwgMCwgMCwgMCwgMCwgMSwgMCwgMCwgXCIgKyB5ICsgXCIsIDAsIDEpXCI7XG4gICAgICAgIGNvbnRlbnQuX2dzYXAueSA9IHkgKyBcInB4XCI7XG4gICAgICAgIHNjcm9sbEZ1bmNZLmNhY2hlSUQgPSBfc2Nyb2xsZXJzLmNhY2hlO1xuXG4gICAgICAgIF91cGRhdGVBbGwoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgc2Nyb2xsRnVuY1kub2Zmc2V0ICYmIHJlbW92ZUNvbnRlbnRPZmZzZXQoKTtcbiAgICBza2lwVG91Y2hNb3ZlID0gdHJ1ZTtcbiAgfSxcbiAgICAgIHR3ZWVuLFxuICAgICAgc3RhcnRTY3JvbGxYLFxuICAgICAgc3RhcnRTY3JvbGxZLFxuICAgICAgb25TdG9wRGVsYXllZENhbGwsXG4gICAgICBvblJlc2l6ZSA9IGZ1bmN0aW9uIG9uUmVzaXplKCkge1xuICAgIC8vIGlmIHRoZSB3aW5kb3cgcmVzaXplcywgbGlrZSBvbiBhbiBpUGhvbmUgd2hpY2ggQXBwbGUgRk9SQ0VTIHRoZSBhZGRyZXNzIGJhciB0byBzaG93L2hpZGUgZXZlbiBpZiB3ZSBldmVudC5wcmV2ZW50RGVmYXVsdCgpLCBpdCBtYXkgYmUgc2Nyb2xsaW5nIHRvbyBmYXIgbm93IHRoYXQgdGhlIGFkZHJlc3MgYmFyIGlzIHNob3dpbmcsIHNvIHdlIG11c3QgZHluYW1pY2FsbHkgYWRqdXN0IHRoZSBtb21lbnR1bSB0d2Vlbi5cbiAgICB1cGRhdGVDbGFtcHMoKTtcblxuICAgIGlmICh0d2Vlbi5pc0FjdGl2ZSgpICYmIHR3ZWVuLnZhcnMuc2Nyb2xsWSA+IG1heFkpIHtcbiAgICAgIHNjcm9sbEZ1bmNZKCkgPiBtYXhZID8gdHdlZW4ucHJvZ3Jlc3MoMSkgJiYgc2Nyb2xsRnVuY1kobWF4WSkgOiB0d2Vlbi5yZXNldFRvKFwic2Nyb2xsWVwiLCBtYXhZKTtcbiAgICB9XG4gIH07XG5cbiAgY29udGVudCAmJiBnc2FwLnNldChjb250ZW50LCB7XG4gICAgeTogXCIrPTBcIlxuICB9KTsgLy8gdG8gZW5zdXJlIHRoZXJlJ3MgYSBjYWNoZSAoZWxlbWVudC5fZ3NhcClcblxuICB2YXJzLmlnbm9yZUNoZWNrID0gZnVuY3Rpb24gKGUpIHtcbiAgICByZXR1cm4gX2ZpeElPU0J1ZyAmJiBlLnR5cGUgPT09IFwidG91Y2htb3ZlXCIgJiYgaWdub3JlRHJhZyhlKSB8fCBzY2FsZSA+IDEuMDUgJiYgZS50eXBlICE9PSBcInRvdWNoc3RhcnRcIiB8fCBzZWxmLmlzR2VzdHVyaW5nIHx8IGUudG91Y2hlcyAmJiBlLnRvdWNoZXMubGVuZ3RoID4gMTtcbiAgfTtcblxuICB2YXJzLm9uUHJlc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgc2tpcFRvdWNoTW92ZSA9IGZhbHNlO1xuICAgIHZhciBwcmV2U2NhbGUgPSBzY2FsZTtcbiAgICBzY2FsZSA9IF9yb3VuZCgoX3dpbi52aXN1YWxWaWV3cG9ydCAmJiBfd2luLnZpc3VhbFZpZXdwb3J0LnNjYWxlIHx8IDEpIC8gaW5pdGlhbFNjYWxlKTtcbiAgICB0d2Vlbi5wYXVzZSgpO1xuICAgIHByZXZTY2FsZSAhPT0gc2NhbGUgJiYgX2FsbG93TmF0aXZlUGFubmluZyh0YXJnZXQsIHNjYWxlID4gMS4wMSA/IHRydWUgOiBub3JtYWxpemVTY3JvbGxYID8gZmFsc2UgOiBcInhcIik7XG4gICAgc3RhcnRTY3JvbGxYID0gc2Nyb2xsRnVuY1goKTtcbiAgICBzdGFydFNjcm9sbFkgPSBzY3JvbGxGdW5jWSgpO1xuICAgIHVwZGF0ZUNsYW1wcygpO1xuICAgIGxhc3RSZWZyZXNoSUQgPSBfcmVmcmVzaElEO1xuICB9O1xuXG4gIHZhcnMub25SZWxlYXNlID0gdmFycy5vbkdlc3R1cmVTdGFydCA9IGZ1bmN0aW9uIChzZWxmLCB3YXNEcmFnZ2luZykge1xuICAgIHNjcm9sbEZ1bmNZLm9mZnNldCAmJiByZW1vdmVDb250ZW50T2Zmc2V0KCk7XG5cbiAgICBpZiAoIXdhc0RyYWdnaW5nKSB7XG4gICAgICBvblN0b3BEZWxheWVkQ2FsbC5yZXN0YXJ0KHRydWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBfc2Nyb2xsZXJzLmNhY2hlKys7IC8vIG1ha2Ugc3VyZSB3ZSdyZSBwdWxsaW5nIHRoZSBub24tY2FjaGVkIHZhbHVlXG4gICAgICAvLyBhbHRlcm5hdGUgYWxnb3JpdGhtOiBkdXJYID0gTWF0aC5taW4oNiwgTWF0aC5hYnMoc2VsZi52ZWxvY2l0eVggLyA4MDApKSxcdGR1ciA9IE1hdGgubWF4KGR1clgsIE1hdGgubWluKDYsIE1hdGguYWJzKHNlbGYudmVsb2NpdHlZIC8gODAwKSkpOyBkdXIgPSBkdXIgKiAoMC40ICsgKDEgLSBfcG93ZXI0SW4oZHVyIC8gNikpICogMC42KSkgKiAobW9tZW50dW1TcGVlZCB8fCAxKVxuXG4gICAgICB2YXIgZHVyID0gcmVzb2x2ZU1vbWVudHVtRHVyYXRpb24oKSxcbiAgICAgICAgICBjdXJyZW50U2Nyb2xsLFxuICAgICAgICAgIGVuZFNjcm9sbDtcblxuICAgICAgaWYgKG5vcm1hbGl6ZVNjcm9sbFgpIHtcbiAgICAgICAgY3VycmVudFNjcm9sbCA9IHNjcm9sbEZ1bmNYKCk7XG4gICAgICAgIGVuZFNjcm9sbCA9IGN1cnJlbnRTY3JvbGwgKyBkdXIgKiAwLjA1ICogLXNlbGYudmVsb2NpdHlYIC8gMC4yMjc7IC8vIHRoZSBjb25zdGFudCAuMjI3IGlzIGZyb20gcG93ZXI0KDAuMDUpLiB2ZWxvY2l0eSBpcyBpbnZlcnRlZCBiZWNhdXNlIHNjcm9sbGluZyBnb2VzIGluIHRoZSBvcHBvc2l0ZSBkaXJlY3Rpb24uXG5cbiAgICAgICAgZHVyICo9IF9jbGFtcFNjcm9sbEFuZEdldER1cmF0aW9uTXVsdGlwbGllcihzY3JvbGxGdW5jWCwgY3VycmVudFNjcm9sbCwgZW5kU2Nyb2xsLCBfbWF4U2Nyb2xsKHRhcmdldCwgX2hvcml6b250YWwpKTtcbiAgICAgICAgdHdlZW4udmFycy5zY3JvbGxYID0gc2Nyb2xsQ2xhbXBYKGVuZFNjcm9sbCk7XG4gICAgICB9XG5cbiAgICAgIGN1cnJlbnRTY3JvbGwgPSBzY3JvbGxGdW5jWSgpO1xuICAgICAgZW5kU2Nyb2xsID0gY3VycmVudFNjcm9sbCArIGR1ciAqIDAuMDUgKiAtc2VsZi52ZWxvY2l0eVkgLyAwLjIyNzsgLy8gdGhlIGNvbnN0YW50IC4yMjcgaXMgZnJvbSBwb3dlcjQoMC4wNSlcblxuICAgICAgZHVyICo9IF9jbGFtcFNjcm9sbEFuZEdldER1cmF0aW9uTXVsdGlwbGllcihzY3JvbGxGdW5jWSwgY3VycmVudFNjcm9sbCwgZW5kU2Nyb2xsLCBfbWF4U2Nyb2xsKHRhcmdldCwgX3ZlcnRpY2FsKSk7XG4gICAgICB0d2Vlbi52YXJzLnNjcm9sbFkgPSBzY3JvbGxDbGFtcFkoZW5kU2Nyb2xsKTtcbiAgICAgIHR3ZWVuLmludmFsaWRhdGUoKS5kdXJhdGlvbihkdXIpLnBsYXkoMC4wMSk7XG5cbiAgICAgIGlmIChfZml4SU9TQnVnICYmIHR3ZWVuLnZhcnMuc2Nyb2xsWSA+PSBtYXhZIHx8IGN1cnJlbnRTY3JvbGwgPj0gbWF4WSAtIDEpIHtcbiAgICAgICAgLy8gaU9TIGJ1ZzogaXQnbGwgc2hvdyB0aGUgYWRkcmVzcyBiYXIgYnV0IE5PVCBmaXJlIHRoZSB3aW5kb3cgXCJyZXNpemVcIiBldmVudCB1bnRpbCB0aGUgYW5pbWF0aW9uIGlzIGRvbmUgYnV0IHdlIG11c3QgcHJvdGVjdCBhZ2FpbnN0IG92ZXJzaG9vdCBzbyB3ZSBsZXZlcmFnZSBhbiBvblVwZGF0ZSB0byBkbyBzby5cbiAgICAgICAgZ3NhcC50byh7fSwge1xuICAgICAgICAgIG9uVXBkYXRlOiBvblJlc2l6ZSxcbiAgICAgICAgICBkdXJhdGlvbjogZHVyXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIG9uUmVsZWFzZSAmJiBvblJlbGVhc2Uoc2VsZik7XG4gIH07XG5cbiAgdmFycy5vbldoZWVsID0gZnVuY3Rpb24gKCkge1xuICAgIHR3ZWVuLl90cyAmJiB0d2Vlbi5wYXVzZSgpO1xuXG4gICAgaWYgKF9nZXRUaW1lKCkgLSB3aGVlbFJlZnJlc2ggPiAxMDAwKSB7XG4gICAgICAvLyBhZnRlciAxIHNlY29uZCwgcmVmcmVzaCB0aGUgY2xhbXBzIG90aGVyd2lzZSB0aGF0J2xsIG9ubHkgaGFwcGVuIHdoZW4gU2Nyb2xsVHJpZ2dlci5yZWZyZXNoKCkgaXMgY2FsbGVkIG9yIGZvciB0b3VjaC1zY3JvbGxpbmcuXG4gICAgICBsYXN0UmVmcmVzaElEID0gMDtcbiAgICAgIHdoZWVsUmVmcmVzaCA9IF9nZXRUaW1lKCk7XG4gICAgfVxuICB9O1xuXG4gIHZhcnMub25DaGFuZ2UgPSBmdW5jdGlvbiAoc2VsZiwgZHgsIGR5LCB4QXJyYXksIHlBcnJheSkge1xuICAgIF9yZWZyZXNoSUQgIT09IGxhc3RSZWZyZXNoSUQgJiYgdXBkYXRlQ2xhbXBzKCk7XG4gICAgZHggJiYgbm9ybWFsaXplU2Nyb2xsWCAmJiBzY3JvbGxGdW5jWChzY3JvbGxDbGFtcFgoeEFycmF5WzJdID09PSBkeCA/IHN0YXJ0U2Nyb2xsWCArIChzZWxmLnN0YXJ0WCAtIHNlbGYueCkgOiBzY3JvbGxGdW5jWCgpICsgZHggLSB4QXJyYXlbMV0pKTsgLy8gZm9yIG1vcmUgcHJlY2lzaW9uLCB3ZSB0cmFjayBwb2ludGVyL3RvdWNoIG1vdmVtZW50IGZyb20gdGhlIHN0YXJ0LCBvdGhlcndpc2UgaXQnbGwgZHJpZnQuXG5cbiAgICBpZiAoZHkpIHtcbiAgICAgIHNjcm9sbEZ1bmNZLm9mZnNldCAmJiByZW1vdmVDb250ZW50T2Zmc2V0KCk7XG4gICAgICB2YXIgaXNUb3VjaCA9IHlBcnJheVsyXSA9PT0gZHksXG4gICAgICAgICAgeSA9IGlzVG91Y2ggPyBzdGFydFNjcm9sbFkgKyBzZWxmLnN0YXJ0WSAtIHNlbGYueSA6IHNjcm9sbEZ1bmNZKCkgKyBkeSAtIHlBcnJheVsxXSxcbiAgICAgICAgICB5Q2xhbXBlZCA9IHNjcm9sbENsYW1wWSh5KTtcbiAgICAgIGlzVG91Y2ggJiYgeSAhPT0geUNsYW1wZWQgJiYgKHN0YXJ0U2Nyb2xsWSArPSB5Q2xhbXBlZCAtIHkpO1xuICAgICAgc2Nyb2xsRnVuY1koeUNsYW1wZWQpO1xuICAgIH1cblxuICAgIChkeSB8fCBkeCkgJiYgX3VwZGF0ZUFsbCgpO1xuICB9O1xuXG4gIHZhcnMub25FbmFibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgX2FsbG93TmF0aXZlUGFubmluZyh0YXJnZXQsIG5vcm1hbGl6ZVNjcm9sbFggPyBmYWxzZSA6IFwieFwiKTtcblxuICAgIFNjcm9sbFRyaWdnZXIuYWRkRXZlbnRMaXN0ZW5lcihcInJlZnJlc2hcIiwgb25SZXNpemUpO1xuXG4gICAgX2FkZExpc3RlbmVyKF93aW4sIFwicmVzaXplXCIsIG9uUmVzaXplKTtcblxuICAgIGlmIChzY3JvbGxGdW5jWS5zbW9vdGgpIHtcbiAgICAgIHNjcm9sbEZ1bmNZLnRhcmdldC5zdHlsZS5zY3JvbGxCZWhhdmlvciA9IFwiYXV0b1wiO1xuICAgICAgc2Nyb2xsRnVuY1kuc21vb3RoID0gc2Nyb2xsRnVuY1guc21vb3RoID0gZmFsc2U7XG4gICAgfVxuXG4gICAgaW5wdXRPYnNlcnZlci5lbmFibGUoKTtcbiAgfTtcblxuICB2YXJzLm9uRGlzYWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBfYWxsb3dOYXRpdmVQYW5uaW5nKHRhcmdldCwgdHJ1ZSk7XG5cbiAgICBfcmVtb3ZlTGlzdGVuZXIoX3dpbiwgXCJyZXNpemVcIiwgb25SZXNpemUpO1xuXG4gICAgU2Nyb2xsVHJpZ2dlci5yZW1vdmVFdmVudExpc3RlbmVyKFwicmVmcmVzaFwiLCBvblJlc2l6ZSk7XG4gICAgaW5wdXRPYnNlcnZlci5raWxsKCk7XG4gIH07XG5cbiAgdmFycy5sb2NrQXhpcyA9IHZhcnMubG9ja0F4aXMgIT09IGZhbHNlO1xuICBzZWxmID0gbmV3IE9ic2VydmVyKHZhcnMpO1xuICBzZWxmLmlPUyA9IF9maXhJT1NCdWc7IC8vIHVzZWQgaW4gdGhlIE9ic2VydmVyIGdldENhY2hlZFNjcm9sbCgpIGZ1bmN0aW9uIHRvIHdvcmsgYXJvdW5kIGFuIGlPUyBidWcgdGhhdCB3cmVha3MgaGF2b2Mgd2l0aCBUb3VjaEV2ZW50LmNsaWVudFkgaWYgd2UgYWxsb3cgc2Nyb2xsIHRvIGdvIGFsbCB0aGUgd2F5IGJhY2sgdG8gMC5cblxuICBfZml4SU9TQnVnICYmICFzY3JvbGxGdW5jWSgpICYmIHNjcm9sbEZ1bmNZKDEpOyAvLyBpT1MgYnVnIGNhdXNlcyBldmVudC5jbGllbnRZIHZhbHVlcyB0byBmcmVhayBvdXQgKHdpbGRseSBpbmFjY3VyYXRlKSBpZiB0aGUgc2Nyb2xsIHBvc2l0aW9uIGlzIGV4YWN0bHkgMC5cblxuICBfZml4SU9TQnVnICYmIGdzYXAudGlja2VyLmFkZChfcGFzc1Rocm91Z2gpOyAvLyBwcmV2ZW50IHRoZSB0aWNrZXIgZnJvbSBzbGVlcGluZ1xuXG4gIG9uU3RvcERlbGF5ZWRDYWxsID0gc2VsZi5fZGM7XG4gIHR3ZWVuID0gZ3NhcC50byhzZWxmLCB7XG4gICAgZWFzZTogXCJwb3dlcjRcIixcbiAgICBwYXVzZWQ6IHRydWUsXG4gICAgaW5oZXJpdDogZmFsc2UsXG4gICAgc2Nyb2xsWDogbm9ybWFsaXplU2Nyb2xsWCA/IFwiKz0wLjFcIiA6IFwiKz0wXCIsXG4gICAgc2Nyb2xsWTogXCIrPTAuMVwiLFxuICAgIG1vZGlmaWVyczoge1xuICAgICAgc2Nyb2xsWTogX2ludGVycnVwdGlvblRyYWNrZXIoc2Nyb2xsRnVuY1ksIHNjcm9sbEZ1bmNZKCksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHR3ZWVuLnBhdXNlKCk7XG4gICAgICB9KVxuICAgIH0sXG4gICAgb25VcGRhdGU6IF91cGRhdGVBbGwsXG4gICAgb25Db21wbGV0ZTogb25TdG9wRGVsYXllZENhbGwudmFycy5vbkNvbXBsZXRlXG4gIH0pOyAvLyB3ZSBuZWVkIHRoZSBtb2RpZmllciB0byBzZW5zZSBpZiB0aGUgc2Nyb2xsIHBvc2l0aW9uIGlzIGFsdGVyZWQgb3V0c2lkZSBvZiB0aGUgbW9tZW50dW0gdHdlZW4gKGxpa2Ugd2l0aCBhIHNjcm9sbFRvIHR3ZWVuKSBzbyB3ZSBjYW4gcGF1c2UoKSBpdCB0byBwcmV2ZW50IGNvbmZsaWN0cy5cblxuICByZXR1cm4gc2VsZjtcbn07XG5cblNjcm9sbFRyaWdnZXIuc29ydCA9IGZ1bmN0aW9uIChmdW5jKSB7XG4gIHJldHVybiBfdHJpZ2dlcnMuc29ydChmdW5jIHx8IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIChhLnZhcnMucmVmcmVzaFByaW9yaXR5IHx8IDApICogLTFlNiArIGEuc3RhcnQgLSAoYi5zdGFydCArIChiLnZhcnMucmVmcmVzaFByaW9yaXR5IHx8IDApICogLTFlNik7XG4gIH0pO1xufTtcblxuU2Nyb2xsVHJpZ2dlci5vYnNlcnZlID0gZnVuY3Rpb24gKHZhcnMpIHtcbiAgcmV0dXJuIG5ldyBPYnNlcnZlcih2YXJzKTtcbn07XG5cblNjcm9sbFRyaWdnZXIubm9ybWFsaXplU2Nyb2xsID0gZnVuY3Rpb24gKHZhcnMpIHtcbiAgaWYgKHR5cGVvZiB2YXJzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuIF9ub3JtYWxpemVyO1xuICB9XG5cbiAgaWYgKHZhcnMgPT09IHRydWUgJiYgX25vcm1hbGl6ZXIpIHtcbiAgICByZXR1cm4gX25vcm1hbGl6ZXIuZW5hYmxlKCk7XG4gIH1cblxuICBpZiAodmFycyA9PT0gZmFsc2UpIHtcbiAgICBfbm9ybWFsaXplciAmJiBfbm9ybWFsaXplci5raWxsKCk7XG4gICAgX25vcm1hbGl6ZXIgPSB2YXJzO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBub3JtYWxpemVyID0gdmFycyBpbnN0YW5jZW9mIE9ic2VydmVyID8gdmFycyA6IF9nZXRTY3JvbGxOb3JtYWxpemVyKHZhcnMpO1xuICBfbm9ybWFsaXplciAmJiBfbm9ybWFsaXplci50YXJnZXQgPT09IG5vcm1hbGl6ZXIudGFyZ2V0ICYmIF9ub3JtYWxpemVyLmtpbGwoKTtcbiAgX2lzVmlld3BvcnQobm9ybWFsaXplci50YXJnZXQpICYmIChfbm9ybWFsaXplciA9IG5vcm1hbGl6ZXIpO1xuICByZXR1cm4gbm9ybWFsaXplcjtcbn07XG5cblNjcm9sbFRyaWdnZXIuY29yZSA9IHtcbiAgLy8gc21hbGxlciBmaWxlIHNpemUgd2F5IHRvIGxldmVyYWdlIGluIFNjcm9sbFNtb290aGVyIGFuZCBPYnNlcnZlclxuICBfZ2V0VmVsb2NpdHlQcm9wOiBfZ2V0VmVsb2NpdHlQcm9wLFxuICBfaW5wdXRPYnNlcnZlcjogX2lucHV0T2JzZXJ2ZXIsXG4gIF9zY3JvbGxlcnM6IF9zY3JvbGxlcnMsXG4gIF9wcm94aWVzOiBfcHJveGllcyxcbiAgYnJpZGdlOiB7XG4gICAgLy8gd2hlbiBub3JtYWxpemVTY3JvbGwgc2V0cyB0aGUgc2Nyb2xsIHBvc2l0aW9uIChzcyA9IHNldFNjcm9sbClcbiAgICBzczogZnVuY3Rpb24gc3MoKSB7XG4gICAgICBfbGFzdFNjcm9sbFRpbWUgfHwgX2Rpc3BhdGNoKFwic2Nyb2xsU3RhcnRcIik7XG4gICAgICBfbGFzdFNjcm9sbFRpbWUgPSBfZ2V0VGltZSgpO1xuICAgIH0sXG4gICAgLy8gYSB3YXkgdG8gZ2V0IHRoZSBfcmVmcmVzaGluZyB2YWx1ZSBpbiBPYnNlcnZlclxuICAgIHJlZjogZnVuY3Rpb24gcmVmKCkge1xuICAgICAgcmV0dXJuIF9yZWZyZXNoaW5nO1xuICAgIH1cbiAgfVxufTtcbl9nZXRHU0FQKCkgJiYgZ3NhcC5yZWdpc3RlclBsdWdpbihTY3JvbGxUcmlnZ2VyKTtcbmV4cG9ydCB7IFNjcm9sbFRyaWdnZXIgYXMgZGVmYXVsdCB9OyIsIi8qIGxvY29tb3RpdmUtc2Nyb2xsIHY0LjEuMyB8IE1JVCBMaWNlbnNlIHwgaHR0cHM6Ly9naXRodWIuY29tL2xvY29tb3RpdmVtdGwvbG9jb21vdGl2ZS1zY3JvbGwgKi9cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTtcbiAgICBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTtcbiAgICB9KTtcbiAgICBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7XG4gIH1cblxuICByZXR1cm4ga2V5cztcbn1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZDIodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307XG5cbiAgICBpZiAoaSAlIDIpIHtcbiAgICAgIG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO1xuICB9XG5cbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgY29uc3RydWN0b3I6IHtcbiAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfVxuICB9KTtcbiAgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7XG59XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gIF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gICAgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTtcbiAgfTtcbiAgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTtcbn1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgby5fX3Byb3RvX18gPSBwO1xuICAgIHJldHVybiBvO1xuICB9O1xuXG4gIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7XG59XG5cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7XG4gIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTtcbiAgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTtcbiAgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTtcblxuICB0cnkge1xuICAgIERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uICgpIHt9KSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7XG4gIGlmIChzZWxmID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cblxuICByZXR1cm4gc2VsZjtcbn1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICBpZiAoY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHtcbiAgICByZXR1cm4gY2FsbDtcbiAgfVxuXG4gIHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpO1xufVxuXG5mdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkge1xuICB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTtcblxuICByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7XG4gICAgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLFxuICAgICAgICByZXN1bHQ7XG5cbiAgICBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkge1xuICAgICAgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjtcblxuICAgICAgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gX3N1cGVyUHJvcEJhc2Uob2JqZWN0LCBwcm9wZXJ0eSkge1xuICB3aGlsZSAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KSkge1xuICAgIG9iamVjdCA9IF9nZXRQcm90b3R5cGVPZihvYmplY3QpO1xuICAgIGlmIChvYmplY3QgPT09IG51bGwpIGJyZWFrO1xuICB9XG5cbiAgcmV0dXJuIG9iamVjdDtcbn1cblxuZnVuY3Rpb24gX2dldCh0YXJnZXQsIHByb3BlcnR5LCByZWNlaXZlcikge1xuICBpZiAodHlwZW9mIFJlZmxlY3QgIT09IFwidW5kZWZpbmVkXCIgJiYgUmVmbGVjdC5nZXQpIHtcbiAgICBfZ2V0ID0gUmVmbGVjdC5nZXQ7XG4gIH0gZWxzZSB7XG4gICAgX2dldCA9IGZ1bmN0aW9uIF9nZXQodGFyZ2V0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHtcbiAgICAgIHZhciBiYXNlID0gX3N1cGVyUHJvcEJhc2UodGFyZ2V0LCBwcm9wZXJ0eSk7XG5cbiAgICAgIGlmICghYmFzZSkgcmV0dXJuO1xuICAgICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGJhc2UsIHByb3BlcnR5KTtcblxuICAgICAgaWYgKGRlc2MuZ2V0KSB7XG4gICAgICAgIHJldHVybiBkZXNjLmdldC5jYWxsKHJlY2VpdmVyKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGRlc2MudmFsdWU7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBfZ2V0KHRhcmdldCwgcHJvcGVydHksIHJlY2VpdmVyIHx8IHRhcmdldCk7XG59XG5cbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkge1xuICByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpO1xufVxuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7XG4gIHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7XG59XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KGFycik7XG59XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjtcbn1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7XG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoaXRlcikpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpO1xufVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7XG4gIGlmICh0eXBlb2YgU3ltYm9sID09PSBcInVuZGVmaW5lZFwiIHx8ICEoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSkgcmV0dXJuO1xuICB2YXIgX2FyciA9IFtdO1xuICB2YXIgX24gPSB0cnVlO1xuICB2YXIgX2QgPSBmYWxzZTtcbiAgdmFyIF9lID0gdW5kZWZpbmVkO1xuXG4gIHRyeSB7XG4gICAgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkge1xuICAgICAgX2Fyci5wdXNoKF9zLnZhbHVlKTtcblxuICAgICAgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX2QgPSB0cnVlO1xuICAgIF9lID0gZXJyO1xuICB9IGZpbmFsbHkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChfZCkgdGhyb3cgX2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIF9hcnI7XG59XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHtcbiAgaWYgKCFvKSByZXR1cm47XG4gIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG4gIHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTtcbiAgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTtcbiAgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7XG4gIGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbn1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHtcbiAgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSBhcnIyW2ldID0gYXJyW2ldO1xuXG4gIHJldHVybiBhcnIyO1xufVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpO1xufVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpO1xufVxuXG52YXIgZGVmYXVsdHMgPSB7XG4gIGVsOiBkb2N1bWVudCxcbiAgbmFtZTogJ3Njcm9sbCcsXG4gIG9mZnNldDogWzAsIDBdLFxuICByZXBlYXQ6IGZhbHNlLFxuICBzbW9vdGg6IGZhbHNlLFxuICBpbml0UG9zaXRpb246IHtcbiAgICB4OiAwLFxuICAgIHk6IDBcbiAgfSxcbiAgZGlyZWN0aW9uOiAndmVydGljYWwnLFxuICBnZXN0dXJlRGlyZWN0aW9uOiAndmVydGljYWwnLFxuICByZWxvYWRPbkNvbnRleHRDaGFuZ2U6IGZhbHNlLFxuICBsZXJwOiAwLjEsXG4gIFwiY2xhc3NcIjogJ2lzLWludmlldycsXG4gIHNjcm9sbGJhckNvbnRhaW5lcjogZmFsc2UsXG4gIHNjcm9sbGJhckNsYXNzOiAnYy1zY3JvbGxiYXInLFxuICBzY3JvbGxpbmdDbGFzczogJ2hhcy1zY3JvbGwtc2Nyb2xsaW5nJyxcbiAgZHJhZ2dpbmdDbGFzczogJ2hhcy1zY3JvbGwtZHJhZ2dpbmcnLFxuICBzbW9vdGhDbGFzczogJ2hhcy1zY3JvbGwtc21vb3RoJyxcbiAgaW5pdENsYXNzOiAnaGFzLXNjcm9sbC1pbml0JyxcbiAgZ2V0U3BlZWQ6IGZhbHNlLFxuICBnZXREaXJlY3Rpb246IGZhbHNlLFxuICBzY3JvbGxGcm9tQW55d2hlcmU6IGZhbHNlLFxuICBtdWx0aXBsaWVyOiAxLFxuICBmaXJlZm94TXVsdGlwbGllcjogNTAsXG4gIHRvdWNoTXVsdGlwbGllcjogMixcbiAgcmVzZXROYXRpdmVTY3JvbGw6IHRydWUsXG4gIHRhYmxldDoge1xuICAgIHNtb290aDogZmFsc2UsXG4gICAgZGlyZWN0aW9uOiAndmVydGljYWwnLFxuICAgIGdlc3R1cmVEaXJlY3Rpb246ICd2ZXJ0aWNhbCcsXG4gICAgYnJlYWtwb2ludDogMTAyNFxuICB9LFxuICBzbWFydHBob25lOiB7XG4gICAgc21vb3RoOiBmYWxzZSxcbiAgICBkaXJlY3Rpb246ICd2ZXJ0aWNhbCcsXG4gICAgZ2VzdHVyZURpcmVjdGlvbjogJ3ZlcnRpY2FsJ1xuICB9XG59O1xuXG52YXIgX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBfZGVmYXVsdCgpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgX2RlZmF1bHQpO1xuXG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCBkZWZhdWx0cywgb3B0aW9ucyk7XG4gICAgdGhpcy5zbWFydHBob25lID0gZGVmYXVsdHMuc21hcnRwaG9uZTtcbiAgICBpZiAob3B0aW9ucy5zbWFydHBob25lKSBPYmplY3QuYXNzaWduKHRoaXMuc21hcnRwaG9uZSwgb3B0aW9ucy5zbWFydHBob25lKTtcbiAgICB0aGlzLnRhYmxldCA9IGRlZmF1bHRzLnRhYmxldDtcbiAgICBpZiAob3B0aW9ucy50YWJsZXQpIE9iamVjdC5hc3NpZ24odGhpcy50YWJsZXQsIG9wdGlvbnMudGFibGV0KTtcbiAgICB0aGlzLm5hbWVzcGFjZSA9ICdsb2NvbW90aXZlJztcbiAgICB0aGlzLmh0bWwgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgdGhpcy53aW5kb3dIZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgdGhpcy53aW5kb3dXaWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuICAgIHRoaXMud2luZG93TWlkZGxlID0ge1xuICAgICAgeDogdGhpcy53aW5kb3dXaWR0aCAvIDIsXG4gICAgICB5OiB0aGlzLndpbmRvd0hlaWdodCAvIDJcbiAgICB9O1xuICAgIHRoaXMuZWxzID0ge307XG4gICAgdGhpcy5jdXJyZW50RWxlbWVudHMgPSB7fTtcbiAgICB0aGlzLmxpc3RlbmVycyA9IHt9O1xuICAgIHRoaXMuaGFzU2Nyb2xsVGlja2luZyA9IGZhbHNlO1xuICAgIHRoaXMuaGFzQ2FsbEV2ZW50U2V0ID0gZmFsc2U7XG4gICAgdGhpcy5jaGVja1Njcm9sbCA9IHRoaXMuY2hlY2tTY3JvbGwuYmluZCh0aGlzKTtcbiAgICB0aGlzLmNoZWNrUmVzaXplID0gdGhpcy5jaGVja1Jlc2l6ZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuY2hlY2tFdmVudCA9IHRoaXMuY2hlY2tFdmVudC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuaW5zdGFuY2UgPSB7XG4gICAgICBzY3JvbGw6IHtcbiAgICAgICAgeDogMCxcbiAgICAgICAgeTogMFxuICAgICAgfSxcbiAgICAgIGxpbWl0OiB7XG4gICAgICAgIHg6IHRoaXMuaHRtbC5vZmZzZXRXaWR0aCxcbiAgICAgICAgeTogdGhpcy5odG1sLm9mZnNldEhlaWdodFxuICAgICAgfSxcbiAgICAgIGN1cnJlbnRFbGVtZW50czogdGhpcy5jdXJyZW50RWxlbWVudHNcbiAgICB9O1xuXG4gICAgaWYgKHRoaXMuaXNNb2JpbGUpIHtcbiAgICAgIGlmICh0aGlzLmlzVGFibGV0KSB7XG4gICAgICAgIHRoaXMuY29udGV4dCA9ICd0YWJsZXQnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gJ3NtYXJ0cGhvbmUnO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNvbnRleHQgPSAnZGVza3RvcCc7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaXNNb2JpbGUpIHRoaXMuZGlyZWN0aW9uID0gdGhpc1t0aGlzLmNvbnRleHRdLmRpcmVjdGlvbjtcblxuICAgIGlmICh0aGlzLmRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnKSB7XG4gICAgICB0aGlzLmRpcmVjdGlvbkF4aXMgPSAneCc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZGlyZWN0aW9uQXhpcyA9ICd5JztcbiAgICB9XG5cbiAgICBpZiAodGhpcy5nZXREaXJlY3Rpb24pIHtcbiAgICAgIHRoaXMuaW5zdGFuY2UuZGlyZWN0aW9uID0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5nZXREaXJlY3Rpb24pIHtcbiAgICAgIHRoaXMuaW5zdGFuY2Uuc3BlZWQgPSAwO1xuICAgIH1cblxuICAgIHRoaXMuaHRtbC5jbGFzc0xpc3QuYWRkKHRoaXMuaW5pdENsYXNzKTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5jaGVja1Jlc2l6ZSwgZmFsc2UpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKF9kZWZhdWx0LCBbe1xuICAgIGtleTogXCJpbml0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICB0aGlzLmluaXRFdmVudHMoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY2hlY2tTY3JvbGxcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2hlY2tTY3JvbGwoKSB7XG4gICAgICB0aGlzLmRpc3BhdGNoU2Nyb2xsKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNoZWNrUmVzaXplXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNoZWNrUmVzaXplKCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgaWYgKCF0aGlzLnJlc2l6ZVRpY2spIHtcbiAgICAgICAgdGhpcy5yZXNpemVUaWNrID0gdHJ1ZTtcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpcy5yZXNpemUoKTtcblxuICAgICAgICAgIF90aGlzLnJlc2l6ZVRpY2sgPSBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlc2l6ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXNpemUoKSB7fVxuICB9LCB7XG4gICAga2V5OiBcImNoZWNrQ29udGV4dFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjaGVja0NvbnRleHQoKSB7XG4gICAgICBpZiAoIXRoaXMucmVsb2FkT25Db250ZXh0Q2hhbmdlKSByZXR1cm47XG4gICAgICB0aGlzLmlzTW9iaWxlID0gL0FuZHJvaWR8aVBob25lfGlQYWR8aVBvZHxCbGFja0JlcnJ5fElFTW9iaWxlfE9wZXJhIE1pbmkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpIHx8IG5hdmlnYXRvci5wbGF0Zm9ybSA9PT0gJ01hY0ludGVsJyAmJiBuYXZpZ2F0b3IubWF4VG91Y2hQb2ludHMgPiAxIHx8IHRoaXMud2luZG93V2lkdGggPCB0aGlzLnRhYmxldC5icmVha3BvaW50O1xuICAgICAgdGhpcy5pc1RhYmxldCA9IHRoaXMuaXNNb2JpbGUgJiYgdGhpcy53aW5kb3dXaWR0aCA+PSB0aGlzLnRhYmxldC5icmVha3BvaW50O1xuICAgICAgdmFyIG9sZENvbnRleHQgPSB0aGlzLmNvbnRleHQ7XG5cbiAgICAgIGlmICh0aGlzLmlzTW9iaWxlKSB7XG4gICAgICAgIGlmICh0aGlzLmlzVGFibGV0KSB7XG4gICAgICAgICAgdGhpcy5jb250ZXh0ID0gJ3RhYmxldCc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5jb250ZXh0ID0gJ3NtYXJ0cGhvbmUnO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNvbnRleHQgPSAnZGVza3RvcCc7XG4gICAgICB9XG5cbiAgICAgIGlmIChvbGRDb250ZXh0ICE9IHRoaXMuY29udGV4dCkge1xuICAgICAgICB2YXIgb2xkU21vb3RoID0gb2xkQ29udGV4dCA9PSAnZGVza3RvcCcgPyB0aGlzLnNtb290aCA6IHRoaXNbb2xkQ29udGV4dF0uc21vb3RoO1xuICAgICAgICB2YXIgbmV3U21vb3RoID0gdGhpcy5jb250ZXh0ID09ICdkZXNrdG9wJyA/IHRoaXMuc21vb3RoIDogdGhpc1t0aGlzLmNvbnRleHRdLnNtb290aDtcbiAgICAgICAgaWYgKG9sZFNtb290aCAhPSBuZXdTbW9vdGgpIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiaW5pdEV2ZW50c1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0RXZlbnRzKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHRoaXMuc2Nyb2xsVG9FbHMgPSB0aGlzLmVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbZGF0YS1cIi5jb25jYXQodGhpcy5uYW1lLCBcIi10b11cIikpO1xuICAgICAgdGhpcy5zZXRTY3JvbGxUbyA9IHRoaXMuc2V0U2Nyb2xsVG8uYmluZCh0aGlzKTtcbiAgICAgIHRoaXMuc2Nyb2xsVG9FbHMuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBfdGhpczIuc2V0U2Nyb2xsVG8sIGZhbHNlKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZXRTY3JvbGxUb1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRTY3JvbGxUbyhldmVudCkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRoaXMuc2Nyb2xsVG8oZXZlbnQuY3VycmVudFRhcmdldC5nZXRBdHRyaWJ1dGUoXCJkYXRhLVwiLmNvbmNhdCh0aGlzLm5hbWUsIFwiLWhyZWZcIikpIHx8IGV2ZW50LmN1cnJlbnRUYXJnZXQuZ2V0QXR0cmlidXRlKCdocmVmJyksIHtcbiAgICAgICAgb2Zmc2V0OiBldmVudC5jdXJyZW50VGFyZ2V0LmdldEF0dHJpYnV0ZShcImRhdGEtXCIuY29uY2F0KHRoaXMubmFtZSwgXCItb2Zmc2V0XCIpKVxuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImFkZEVsZW1lbnRzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZEVsZW1lbnRzKCkge31cbiAgfSwge1xuICAgIGtleTogXCJkZXRlY3RFbGVtZW50c1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZXRlY3RFbGVtZW50cyhoYXNDYWxsRXZlbnRTZXQpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICB2YXIgc2Nyb2xsVG9wID0gdGhpcy5pbnN0YW5jZS5zY3JvbGwueTtcbiAgICAgIHZhciBzY3JvbGxCb3R0b20gPSBzY3JvbGxUb3AgKyB0aGlzLndpbmRvd0hlaWdodDtcbiAgICAgIHZhciBzY3JvbGxMZWZ0ID0gdGhpcy5pbnN0YW5jZS5zY3JvbGwueDtcbiAgICAgIHZhciBzY3JvbGxSaWdodCA9IHNjcm9sbExlZnQgKyB0aGlzLndpbmRvd1dpZHRoO1xuICAgICAgT2JqZWN0LmVudHJpZXModGhpcy5lbHMpLmZvckVhY2goZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgICAgdmFyIF9yZWYyID0gX3NsaWNlZFRvQXJyYXkoX3JlZiwgMiksXG4gICAgICAgICAgICBpID0gX3JlZjJbMF0sXG4gICAgICAgICAgICBlbCA9IF9yZWYyWzFdO1xuXG4gICAgICAgIGlmIChlbCAmJiAoIWVsLmluVmlldyB8fCBoYXNDYWxsRXZlbnRTZXQpKSB7XG4gICAgICAgICAgaWYgKF90aGlzMy5kaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJykge1xuICAgICAgICAgICAgaWYgKHNjcm9sbFJpZ2h0ID49IGVsLmxlZnQgJiYgc2Nyb2xsTGVmdCA8IGVsLnJpZ2h0KSB7XG4gICAgICAgICAgICAgIF90aGlzMy5zZXRJblZpZXcoZWwsIGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoc2Nyb2xsQm90dG9tID49IGVsLnRvcCAmJiBzY3JvbGxUb3AgPCBlbC5ib3R0b20pIHtcbiAgICAgICAgICAgICAgX3RoaXMzLnNldEluVmlldyhlbCwgaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVsICYmIGVsLmluVmlldykge1xuICAgICAgICAgIGlmIChfdGhpczMuZGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgICAgICAgIHZhciB3aWR0aCA9IGVsLnJpZ2h0IC0gZWwubGVmdDtcbiAgICAgICAgICAgIGVsLnByb2dyZXNzID0gKF90aGlzMy5pbnN0YW5jZS5zY3JvbGwueCAtIChlbC5sZWZ0IC0gX3RoaXMzLndpbmRvd1dpZHRoKSkgLyAod2lkdGggKyBfdGhpczMud2luZG93V2lkdGgpO1xuXG4gICAgICAgICAgICBpZiAoc2Nyb2xsUmlnaHQgPCBlbC5sZWZ0IHx8IHNjcm9sbExlZnQgPiBlbC5yaWdodCkge1xuICAgICAgICAgICAgICBfdGhpczMuc2V0T3V0T2ZWaWV3KGVsLCBpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGhlaWdodCA9IGVsLmJvdHRvbSAtIGVsLnRvcDtcbiAgICAgICAgICAgIGVsLnByb2dyZXNzID0gKF90aGlzMy5pbnN0YW5jZS5zY3JvbGwueSAtIChlbC50b3AgLSBfdGhpczMud2luZG93SGVpZ2h0KSkgLyAoaGVpZ2h0ICsgX3RoaXMzLndpbmRvd0hlaWdodCk7XG5cbiAgICAgICAgICAgIGlmIChzY3JvbGxCb3R0b20gPCBlbC50b3AgfHwgc2Nyb2xsVG9wID4gZWwuYm90dG9tKSB7XG4gICAgICAgICAgICAgIF90aGlzMy5zZXRPdXRPZlZpZXcoZWwsIGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7IC8vIHRoaXMuZWxzID0gdGhpcy5lbHMuZmlsdGVyKChjdXJyZW50LCBpKSA9PiB7XG4gICAgICAvLyAgICAgcmV0dXJuIGN1cnJlbnQgIT09IG51bGw7XG4gICAgICAvLyB9KTtcblxuICAgICAgdGhpcy5oYXNTY3JvbGxUaWNraW5nID0gZmFsc2U7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNldEluVmlld1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRJblZpZXcoY3VycmVudCwgaSkge1xuICAgICAgdGhpcy5lbHNbaV0uaW5WaWV3ID0gdHJ1ZTtcbiAgICAgIGN1cnJlbnQuZWwuY2xhc3NMaXN0LmFkZChjdXJyZW50W1wiY2xhc3NcIl0pO1xuICAgICAgdGhpcy5jdXJyZW50RWxlbWVudHNbaV0gPSBjdXJyZW50O1xuXG4gICAgICBpZiAoY3VycmVudC5jYWxsICYmIHRoaXMuaGFzQ2FsbEV2ZW50U2V0KSB7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hDYWxsKGN1cnJlbnQsICdlbnRlcicpO1xuXG4gICAgICAgIGlmICghY3VycmVudC5yZXBlYXQpIHtcbiAgICAgICAgICB0aGlzLmVsc1tpXS5jYWxsID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH0gLy8gaWYgKCFjdXJyZW50LnJlcGVhdCAmJiAhY3VycmVudC5zcGVlZCAmJiAhY3VycmVudC5zdGlja3kpIHtcbiAgICAgIC8vICAgICBpZiAoIWN1cnJlbnQuY2FsbCB8fCBjdXJyZW50LmNhbGwgJiYgdGhpcy5oYXNDYWxsRXZlbnRTZXQpIHtcbiAgICAgIC8vICAgICAgICB0aGlzLmVsc1tpXSA9IG51bGxcbiAgICAgIC8vICAgICB9XG4gICAgICAvLyB9XG5cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2V0T3V0T2ZWaWV3XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldE91dE9mVmlldyhjdXJyZW50LCBpKSB7XG4gICAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgICAgLy8gaWYgKGN1cnJlbnQucmVwZWF0IHx8IGN1cnJlbnQuc3BlZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5lbHNbaV0uaW5WaWV3ID0gZmFsc2U7IC8vIH1cblxuICAgICAgT2JqZWN0LmtleXModGhpcy5jdXJyZW50RWxlbWVudHMpLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgIGVsID09PSBpICYmIGRlbGV0ZSBfdGhpczQuY3VycmVudEVsZW1lbnRzW2VsXTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoY3VycmVudC5jYWxsICYmIHRoaXMuaGFzQ2FsbEV2ZW50U2V0KSB7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hDYWxsKGN1cnJlbnQsICdleGl0Jyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjdXJyZW50LnJlcGVhdCkge1xuICAgICAgICBjdXJyZW50LmVsLmNsYXNzTGlzdC5yZW1vdmUoY3VycmVudFtcImNsYXNzXCJdKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZGlzcGF0Y2hDYWxsXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRpc3BhdGNoQ2FsbChjdXJyZW50LCB3YXkpIHtcbiAgICAgIHRoaXMuY2FsbFdheSA9IHdheTtcbiAgICAgIHRoaXMuY2FsbFZhbHVlID0gY3VycmVudC5jYWxsLnNwbGl0KCcsJykubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJldHVybiBpdGVtLnRyaW0oKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5jYWxsT2JqID0gY3VycmVudDtcbiAgICAgIGlmICh0aGlzLmNhbGxWYWx1ZS5sZW5ndGggPT0gMSkgdGhpcy5jYWxsVmFsdWUgPSB0aGlzLmNhbGxWYWx1ZVswXTtcbiAgICAgIHZhciBjYWxsRXZlbnQgPSBuZXcgRXZlbnQodGhpcy5uYW1lc3BhY2UgKyAnY2FsbCcpO1xuICAgICAgdGhpcy5lbC5kaXNwYXRjaEV2ZW50KGNhbGxFdmVudCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImRpc3BhdGNoU2Nyb2xsXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRpc3BhdGNoU2Nyb2xsKCkge1xuICAgICAgdmFyIHNjcm9sbEV2ZW50ID0gbmV3IEV2ZW50KHRoaXMubmFtZXNwYWNlICsgJ3Njcm9sbCcpO1xuICAgICAgdGhpcy5lbC5kaXNwYXRjaEV2ZW50KHNjcm9sbEV2ZW50KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2V0RXZlbnRzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldEV2ZW50cyhldmVudCwgZnVuYykge1xuICAgICAgaWYgKCF0aGlzLmxpc3RlbmVyc1tldmVudF0pIHtcbiAgICAgICAgdGhpcy5saXN0ZW5lcnNbZXZlbnRdID0gW107XG4gICAgICB9XG5cbiAgICAgIHZhciBsaXN0ID0gdGhpcy5saXN0ZW5lcnNbZXZlbnRdO1xuICAgICAgbGlzdC5wdXNoKGZ1bmMpO1xuXG4gICAgICBpZiAobGlzdC5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgdGhpcy5lbC5hZGRFdmVudExpc3RlbmVyKHRoaXMubmFtZXNwYWNlICsgZXZlbnQsIHRoaXMuY2hlY2tFdmVudCwgZmFsc2UpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZXZlbnQgPT09ICdjYWxsJykge1xuICAgICAgICB0aGlzLmhhc0NhbGxFdmVudFNldCA9IHRydWU7XG4gICAgICAgIHRoaXMuZGV0ZWN0RWxlbWVudHModHJ1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInVuc2V0RXZlbnRzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVuc2V0RXZlbnRzKGV2ZW50LCBmdW5jKSB7XG4gICAgICBpZiAoIXRoaXMubGlzdGVuZXJzW2V2ZW50XSkgcmV0dXJuO1xuICAgICAgdmFyIGxpc3QgPSB0aGlzLmxpc3RlbmVyc1tldmVudF07XG4gICAgICB2YXIgaW5kZXggPSBsaXN0LmluZGV4T2YoZnVuYyk7XG4gICAgICBpZiAoaW5kZXggPCAwKSByZXR1cm47XG4gICAgICBsaXN0LnNwbGljZShpbmRleCwgMSk7XG5cbiAgICAgIGlmIChsaXN0LmluZGV4ID09PSAwKSB7XG4gICAgICAgIHRoaXMuZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcih0aGlzLm5hbWVzcGFjZSArIGV2ZW50LCB0aGlzLmNoZWNrRXZlbnQsIGZhbHNlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY2hlY2tFdmVudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjaGVja0V2ZW50KGV2ZW50KSB7XG4gICAgICB2YXIgX3RoaXM1ID0gdGhpcztcblxuICAgICAgdmFyIG5hbWUgPSBldmVudC50eXBlLnJlcGxhY2UodGhpcy5uYW1lc3BhY2UsICcnKTtcbiAgICAgIHZhciBsaXN0ID0gdGhpcy5saXN0ZW5lcnNbbmFtZV07XG4gICAgICBpZiAoIWxpc3QgfHwgbGlzdC5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICAgIGxpc3QuZm9yRWFjaChmdW5jdGlvbiAoZnVuYykge1xuICAgICAgICBzd2l0Y2ggKG5hbWUpIHtcbiAgICAgICAgICBjYXNlICdzY3JvbGwnOlxuICAgICAgICAgICAgcmV0dXJuIGZ1bmMoX3RoaXM1Lmluc3RhbmNlKTtcblxuICAgICAgICAgIGNhc2UgJ2NhbGwnOlxuICAgICAgICAgICAgcmV0dXJuIGZ1bmMoX3RoaXM1LmNhbGxWYWx1ZSwgX3RoaXM1LmNhbGxXYXksIF90aGlzNS5jYWxsT2JqKTtcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gZnVuYygpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic3RhcnRTY3JvbGxcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3RhcnRTY3JvbGwoKSB7fVxuICB9LCB7XG4gICAga2V5OiBcInN0b3BTY3JvbGxcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3RvcFNjcm9sbCgpIHt9XG4gIH0sIHtcbiAgICBrZXk6IFwic2V0U2Nyb2xsXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFNjcm9sbCh4LCB5KSB7XG4gICAgICB0aGlzLmluc3RhbmNlLnNjcm9sbCA9IHtcbiAgICAgICAgeDogMCxcbiAgICAgICAgeTogMFxuICAgICAgfTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZGVzdHJveVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgdmFyIF90aGlzNiA9IHRoaXM7XG5cbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLmNoZWNrUmVzaXplLCBmYWxzZSk7XG4gICAgICBPYmplY3Qua2V5cyh0aGlzLmxpc3RlbmVycykuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgX3RoaXM2LmVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoX3RoaXM2Lm5hbWVzcGFjZSArIGV2ZW50LCBfdGhpczYuY2hlY2tFdmVudCwgZmFsc2UpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLmxpc3RlbmVycyA9IHt9O1xuICAgICAgdGhpcy5zY3JvbGxUb0Vscy5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIF90aGlzNi5zZXRTY3JvbGxUbywgZmFsc2UpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLmh0bWwuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLmluaXRDbGFzcyk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIF9kZWZhdWx0O1xufSgpO1xuXG52YXIgY29tbW9uanNHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWxUaGlzIDogdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB7fTtcblxuZnVuY3Rpb24gY3JlYXRlQ29tbW9uanNNb2R1bGUoZm4sIG1vZHVsZSkge1xuXHRyZXR1cm4gbW9kdWxlID0geyBleHBvcnRzOiB7fSB9LCBmbihtb2R1bGUsIG1vZHVsZS5leHBvcnRzKSwgbW9kdWxlLmV4cG9ydHM7XG59XG5cbnZhciBzbW9vdGhzY3JvbGwgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7XG4vKiBzbW9vdGhzY3JvbGwgdjAuNC40IC0gMjAxOSAtIER1c3RhbiBLYXN0ZW4sIEplcmVtaWFzIE1lbmljaGVsbGkgLSBNSVQgTGljZW5zZSAqL1xuKGZ1bmN0aW9uICgpIHtcblxuICAvLyBwb2x5ZmlsbFxuICBmdW5jdGlvbiBwb2x5ZmlsbCgpIHtcbiAgICAvLyBhbGlhc2VzXG4gICAgdmFyIHcgPSB3aW5kb3c7XG4gICAgdmFyIGQgPSBkb2N1bWVudDtcblxuICAgIC8vIHJldHVybiBpZiBzY3JvbGwgYmVoYXZpb3IgaXMgc3VwcG9ydGVkIGFuZCBwb2x5ZmlsbCBpcyBub3QgZm9yY2VkXG4gICAgaWYgKFxuICAgICAgJ3Njcm9sbEJlaGF2aW9yJyBpbiBkLmRvY3VtZW50RWxlbWVudC5zdHlsZSAmJlxuICAgICAgdy5fX2ZvcmNlU21vb3RoU2Nyb2xsUG9seWZpbGxfXyAhPT0gdHJ1ZVxuICAgICkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGdsb2JhbHNcbiAgICB2YXIgRWxlbWVudCA9IHcuSFRNTEVsZW1lbnQgfHwgdy5FbGVtZW50O1xuICAgIHZhciBTQ1JPTExfVElNRSA9IDQ2ODtcblxuICAgIC8vIG9iamVjdCBnYXRoZXJpbmcgb3JpZ2luYWwgc2Nyb2xsIG1ldGhvZHNcbiAgICB2YXIgb3JpZ2luYWwgPSB7XG4gICAgICBzY3JvbGw6IHcuc2Nyb2xsIHx8IHcuc2Nyb2xsVG8sXG4gICAgICBzY3JvbGxCeTogdy5zY3JvbGxCeSxcbiAgICAgIGVsZW1lbnRTY3JvbGw6IEVsZW1lbnQucHJvdG90eXBlLnNjcm9sbCB8fCBzY3JvbGxFbGVtZW50LFxuICAgICAgc2Nyb2xsSW50b1ZpZXc6IEVsZW1lbnQucHJvdG90eXBlLnNjcm9sbEludG9WaWV3XG4gICAgfTtcblxuICAgIC8vIGRlZmluZSB0aW1pbmcgbWV0aG9kXG4gICAgdmFyIG5vdyA9XG4gICAgICB3LnBlcmZvcm1hbmNlICYmIHcucGVyZm9ybWFuY2Uubm93XG4gICAgICAgID8gdy5wZXJmb3JtYW5jZS5ub3cuYmluZCh3LnBlcmZvcm1hbmNlKVxuICAgICAgICA6IERhdGUubm93O1xuXG4gICAgLyoqXG4gICAgICogaW5kaWNhdGVzIGlmIGEgdGhlIGN1cnJlbnQgYnJvd3NlciBpcyBtYWRlIGJ5IE1pY3Jvc29mdFxuICAgICAqIEBtZXRob2QgaXNNaWNyb3NvZnRCcm93c2VyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHVzZXJBZ2VudFxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTWljcm9zb2Z0QnJvd3Nlcih1c2VyQWdlbnQpIHtcbiAgICAgIHZhciB1c2VyQWdlbnRQYXR0ZXJucyA9IFsnTVNJRSAnLCAnVHJpZGVudC8nLCAnRWRnZS8nXTtcblxuICAgICAgcmV0dXJuIG5ldyBSZWdFeHAodXNlckFnZW50UGF0dGVybnMuam9pbignfCcpKS50ZXN0KHVzZXJBZ2VudCk7XG4gICAgfVxuXG4gICAgLypcbiAgICAgKiBJRSBoYXMgcm91bmRpbmcgYnVnIHJvdW5kaW5nIGRvd24gY2xpZW50SGVpZ2h0IGFuZCBjbGllbnRXaWR0aCBhbmRcbiAgICAgKiByb3VuZGluZyB1cCBzY3JvbGxIZWlnaHQgYW5kIHNjcm9sbFdpZHRoIGNhdXNpbmcgZmFsc2UgcG9zaXRpdmVzXG4gICAgICogb24gaGFzU2Nyb2xsYWJsZVNwYWNlXG4gICAgICovXG4gICAgdmFyIFJPVU5ESU5HX1RPTEVSQU5DRSA9IGlzTWljcm9zb2Z0QnJvd3Nlcih3Lm5hdmlnYXRvci51c2VyQWdlbnQpID8gMSA6IDA7XG5cbiAgICAvKipcbiAgICAgKiBjaGFuZ2VzIHNjcm9sbCBwb3NpdGlvbiBpbnNpZGUgYW4gZWxlbWVudFxuICAgICAqIEBtZXRob2Qgc2Nyb2xsRWxlbWVudFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB4XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHlcbiAgICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNjcm9sbEVsZW1lbnQoeCwgeSkge1xuICAgICAgdGhpcy5zY3JvbGxMZWZ0ID0geDtcbiAgICAgIHRoaXMuc2Nyb2xsVG9wID0geTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiByZXR1cm5zIHJlc3VsdCBvZiBhcHBseWluZyBlYXNlIG1hdGggZnVuY3Rpb24gdG8gYSBudW1iZXJcbiAgICAgKiBAbWV0aG9kIGVhc2VcbiAgICAgKiBAcGFyYW0ge051bWJlcn0ga1xuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgICovXG4gICAgZnVuY3Rpb24gZWFzZShrKSB7XG4gICAgICByZXR1cm4gMC41ICogKDEgLSBNYXRoLmNvcyhNYXRoLlBJICogaykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGluZGljYXRlcyBpZiBhIHNtb290aCBiZWhhdmlvciBzaG91bGQgYmUgYXBwbGllZFxuICAgICAqIEBtZXRob2Qgc2hvdWxkQmFpbE91dFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfE9iamVjdH0gZmlyc3RBcmdcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzaG91bGRCYWlsT3V0KGZpcnN0QXJnKSB7XG4gICAgICBpZiAoXG4gICAgICAgIGZpcnN0QXJnID09PSBudWxsIHx8XG4gICAgICAgIHR5cGVvZiBmaXJzdEFyZyAhPT0gJ29iamVjdCcgfHxcbiAgICAgICAgZmlyc3RBcmcuYmVoYXZpb3IgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICBmaXJzdEFyZy5iZWhhdmlvciA9PT0gJ2F1dG8nIHx8XG4gICAgICAgIGZpcnN0QXJnLmJlaGF2aW9yID09PSAnaW5zdGFudCdcbiAgICAgICkge1xuICAgICAgICAvLyBmaXJzdCBhcmd1bWVudCBpcyBub3QgYW4gb2JqZWN0L251bGxcbiAgICAgICAgLy8gb3IgYmVoYXZpb3IgaXMgYXV0bywgaW5zdGFudCBvciB1bmRlZmluZWRcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgZmlyc3RBcmcgPT09ICdvYmplY3QnICYmIGZpcnN0QXJnLmJlaGF2aW9yID09PSAnc21vb3RoJykge1xuICAgICAgICAvLyBmaXJzdCBhcmd1bWVudCBpcyBhbiBvYmplY3QgYW5kIGJlaGF2aW9yIGlzIHNtb290aFxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIC8vIHRocm93IGVycm9yIHdoZW4gYmVoYXZpb3IgaXMgbm90IHN1cHBvcnRlZFxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgJ2JlaGF2aW9yIG1lbWJlciBvZiBTY3JvbGxPcHRpb25zICcgK1xuICAgICAgICAgIGZpcnN0QXJnLmJlaGF2aW9yICtcbiAgICAgICAgICAnIGlzIG5vdCBhIHZhbGlkIHZhbHVlIGZvciBlbnVtZXJhdGlvbiBTY3JvbGxCZWhhdmlvci4nXG4gICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGluZGljYXRlcyBpZiBhbiBlbGVtZW50IGhhcyBzY3JvbGxhYmxlIHNwYWNlIGluIHRoZSBwcm92aWRlZCBheGlzXG4gICAgICogQG1ldGhvZCBoYXNTY3JvbGxhYmxlU3BhY2VcbiAgICAgKiBAcGFyYW0ge05vZGV9IGVsXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGF4aXNcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNTY3JvbGxhYmxlU3BhY2UoZWwsIGF4aXMpIHtcbiAgICAgIGlmIChheGlzID09PSAnWScpIHtcbiAgICAgICAgcmV0dXJuIGVsLmNsaWVudEhlaWdodCArIFJPVU5ESU5HX1RPTEVSQU5DRSA8IGVsLnNjcm9sbEhlaWdodDtcbiAgICAgIH1cblxuICAgICAgaWYgKGF4aXMgPT09ICdYJykge1xuICAgICAgICByZXR1cm4gZWwuY2xpZW50V2lkdGggKyBST1VORElOR19UT0xFUkFOQ0UgPCBlbC5zY3JvbGxXaWR0aDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBpbmRpY2F0ZXMgaWYgYW4gZWxlbWVudCBoYXMgYSBzY3JvbGxhYmxlIG92ZXJmbG93IHByb3BlcnR5IGluIHRoZSBheGlzXG4gICAgICogQG1ldGhvZCBjYW5PdmVyZmxvd1xuICAgICAqIEBwYXJhbSB7Tm9kZX0gZWxcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gYXhpc1xuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhbk92ZXJmbG93KGVsLCBheGlzKSB7XG4gICAgICB2YXIgb3ZlcmZsb3dWYWx1ZSA9IHcuZ2V0Q29tcHV0ZWRTdHlsZShlbCwgbnVsbClbJ292ZXJmbG93JyArIGF4aXNdO1xuXG4gICAgICByZXR1cm4gb3ZlcmZsb3dWYWx1ZSA9PT0gJ2F1dG8nIHx8IG92ZXJmbG93VmFsdWUgPT09ICdzY3JvbGwnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGluZGljYXRlcyBpZiBhbiBlbGVtZW50IGNhbiBiZSBzY3JvbGxlZCBpbiBlaXRoZXIgYXhpc1xuICAgICAqIEBtZXRob2QgaXNTY3JvbGxhYmxlXG4gICAgICogQHBhcmFtIHtOb2RlfSBlbFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBheGlzXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59XG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNTY3JvbGxhYmxlKGVsKSB7XG4gICAgICB2YXIgaXNTY3JvbGxhYmxlWSA9IGhhc1Njcm9sbGFibGVTcGFjZShlbCwgJ1knKSAmJiBjYW5PdmVyZmxvdyhlbCwgJ1knKTtcbiAgICAgIHZhciBpc1Njcm9sbGFibGVYID0gaGFzU2Nyb2xsYWJsZVNwYWNlKGVsLCAnWCcpICYmIGNhbk92ZXJmbG93KGVsLCAnWCcpO1xuXG4gICAgICByZXR1cm4gaXNTY3JvbGxhYmxlWSB8fCBpc1Njcm9sbGFibGVYO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGZpbmRzIHNjcm9sbGFibGUgcGFyZW50IG9mIGFuIGVsZW1lbnRcbiAgICAgKiBAbWV0aG9kIGZpbmRTY3JvbGxhYmxlUGFyZW50XG4gICAgICogQHBhcmFtIHtOb2RlfSBlbFxuICAgICAqIEByZXR1cm5zIHtOb2RlfSBlbFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbmRTY3JvbGxhYmxlUGFyZW50KGVsKSB7XG4gICAgICB3aGlsZSAoZWwgIT09IGQuYm9keSAmJiBpc1Njcm9sbGFibGUoZWwpID09PSBmYWxzZSkge1xuICAgICAgICBlbCA9IGVsLnBhcmVudE5vZGUgfHwgZWwuaG9zdDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGVsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHNlbGYgaW52b2tlZCBmdW5jdGlvbiB0aGF0LCBnaXZlbiBhIGNvbnRleHQsIHN0ZXBzIHRocm91Z2ggc2Nyb2xsaW5nXG4gICAgICogQG1ldGhvZCBzdGVwXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGNvbnRleHRcbiAgICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0ZXAoY29udGV4dCkge1xuICAgICAgdmFyIHRpbWUgPSBub3coKTtcbiAgICAgIHZhciB2YWx1ZTtcbiAgICAgIHZhciBjdXJyZW50WDtcbiAgICAgIHZhciBjdXJyZW50WTtcbiAgICAgIHZhciBlbGFwc2VkID0gKHRpbWUgLSBjb250ZXh0LnN0YXJ0VGltZSkgLyBTQ1JPTExfVElNRTtcblxuICAgICAgLy8gYXZvaWQgZWxhcHNlZCB0aW1lcyBoaWdoZXIgdGhhbiBvbmVcbiAgICAgIGVsYXBzZWQgPSBlbGFwc2VkID4gMSA/IDEgOiBlbGFwc2VkO1xuXG4gICAgICAvLyBhcHBseSBlYXNpbmcgdG8gZWxhcHNlZCB0aW1lXG4gICAgICB2YWx1ZSA9IGVhc2UoZWxhcHNlZCk7XG5cbiAgICAgIGN1cnJlbnRYID0gY29udGV4dC5zdGFydFggKyAoY29udGV4dC54IC0gY29udGV4dC5zdGFydFgpICogdmFsdWU7XG4gICAgICBjdXJyZW50WSA9IGNvbnRleHQuc3RhcnRZICsgKGNvbnRleHQueSAtIGNvbnRleHQuc3RhcnRZKSAqIHZhbHVlO1xuXG4gICAgICBjb250ZXh0Lm1ldGhvZC5jYWxsKGNvbnRleHQuc2Nyb2xsYWJsZSwgY3VycmVudFgsIGN1cnJlbnRZKTtcblxuICAgICAgLy8gc2Nyb2xsIG1vcmUgaWYgd2UgaGF2ZSBub3QgcmVhY2hlZCBvdXIgZGVzdGluYXRpb25cbiAgICAgIGlmIChjdXJyZW50WCAhPT0gY29udGV4dC54IHx8IGN1cnJlbnRZICE9PSBjb250ZXh0LnkpIHtcbiAgICAgICAgdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoc3RlcC5iaW5kKHcsIGNvbnRleHQpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBzY3JvbGxzIHdpbmRvdyBvciBlbGVtZW50IHdpdGggYSBzbW9vdGggYmVoYXZpb3JcbiAgICAgKiBAbWV0aG9kIHNtb290aFNjcm9sbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fE5vZGV9IGVsXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHhcbiAgICAgKiBAcGFyYW0ge051bWJlcn0geVxuICAgICAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gICAgICovXG4gICAgZnVuY3Rpb24gc21vb3RoU2Nyb2xsKGVsLCB4LCB5KSB7XG4gICAgICB2YXIgc2Nyb2xsYWJsZTtcbiAgICAgIHZhciBzdGFydFg7XG4gICAgICB2YXIgc3RhcnRZO1xuICAgICAgdmFyIG1ldGhvZDtcbiAgICAgIHZhciBzdGFydFRpbWUgPSBub3coKTtcblxuICAgICAgLy8gZGVmaW5lIHNjcm9sbCBjb250ZXh0XG4gICAgICBpZiAoZWwgPT09IGQuYm9keSkge1xuICAgICAgICBzY3JvbGxhYmxlID0gdztcbiAgICAgICAgc3RhcnRYID0gdy5zY3JvbGxYIHx8IHcucGFnZVhPZmZzZXQ7XG4gICAgICAgIHN0YXJ0WSA9IHcuc2Nyb2xsWSB8fCB3LnBhZ2VZT2Zmc2V0O1xuICAgICAgICBtZXRob2QgPSBvcmlnaW5hbC5zY3JvbGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzY3JvbGxhYmxlID0gZWw7XG4gICAgICAgIHN0YXJ0WCA9IGVsLnNjcm9sbExlZnQ7XG4gICAgICAgIHN0YXJ0WSA9IGVsLnNjcm9sbFRvcDtcbiAgICAgICAgbWV0aG9kID0gc2Nyb2xsRWxlbWVudDtcbiAgICAgIH1cblxuICAgICAgLy8gc2Nyb2xsIGxvb3Bpbmcgb3ZlciBhIGZyYW1lXG4gICAgICBzdGVwKHtcbiAgICAgICAgc2Nyb2xsYWJsZTogc2Nyb2xsYWJsZSxcbiAgICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICAgIHN0YXJ0VGltZTogc3RhcnRUaW1lLFxuICAgICAgICBzdGFydFg6IHN0YXJ0WCxcbiAgICAgICAgc3RhcnRZOiBzdGFydFksXG4gICAgICAgIHg6IHgsXG4gICAgICAgIHk6IHlcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIE9SSUdJTkFMIE1FVEhPRFMgT1ZFUlJJREVTXG4gICAgLy8gdy5zY3JvbGwgYW5kIHcuc2Nyb2xsVG9cbiAgICB3LnNjcm9sbCA9IHcuc2Nyb2xsVG8gPSBmdW5jdGlvbigpIHtcbiAgICAgIC8vIGF2b2lkIGFjdGlvbiB3aGVuIG5vIGFyZ3VtZW50cyBhcmUgcGFzc2VkXG4gICAgICBpZiAoYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBhdm9pZCBzbW9vdGggYmVoYXZpb3IgaWYgbm90IHJlcXVpcmVkXG4gICAgICBpZiAoc2hvdWxkQmFpbE91dChhcmd1bWVudHNbMF0pID09PSB0cnVlKSB7XG4gICAgICAgIG9yaWdpbmFsLnNjcm9sbC5jYWxsKFxuICAgICAgICAgIHcsXG4gICAgICAgICAgYXJndW1lbnRzWzBdLmxlZnQgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBhcmd1bWVudHNbMF0ubGVmdFxuICAgICAgICAgICAgOiB0eXBlb2YgYXJndW1lbnRzWzBdICE9PSAnb2JqZWN0J1xuICAgICAgICAgICAgICA/IGFyZ3VtZW50c1swXVxuICAgICAgICAgICAgICA6IHcuc2Nyb2xsWCB8fCB3LnBhZ2VYT2Zmc2V0LFxuICAgICAgICAgIC8vIHVzZSB0b3AgcHJvcCwgc2Vjb25kIGFyZ3VtZW50IGlmIHByZXNlbnQgb3IgZmFsbGJhY2sgdG8gc2Nyb2xsWVxuICAgICAgICAgIGFyZ3VtZW50c1swXS50b3AgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBhcmd1bWVudHNbMF0udG9wXG4gICAgICAgICAgICA6IGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgID8gYXJndW1lbnRzWzFdXG4gICAgICAgICAgICAgIDogdy5zY3JvbGxZIHx8IHcucGFnZVlPZmZzZXRcbiAgICAgICAgKTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIExFVCBUSEUgU01PT1RITkVTUyBCRUdJTiFcbiAgICAgIHNtb290aFNjcm9sbC5jYWxsKFxuICAgICAgICB3LFxuICAgICAgICBkLmJvZHksXG4gICAgICAgIGFyZ3VtZW50c1swXS5sZWZ0ICE9PSB1bmRlZmluZWRcbiAgICAgICAgICA/IH5+YXJndW1lbnRzWzBdLmxlZnRcbiAgICAgICAgICA6IHcuc2Nyb2xsWCB8fCB3LnBhZ2VYT2Zmc2V0LFxuICAgICAgICBhcmd1bWVudHNbMF0udG9wICE9PSB1bmRlZmluZWRcbiAgICAgICAgICA/IH5+YXJndW1lbnRzWzBdLnRvcFxuICAgICAgICAgIDogdy5zY3JvbGxZIHx8IHcucGFnZVlPZmZzZXRcbiAgICAgICk7XG4gICAgfTtcblxuICAgIC8vIHcuc2Nyb2xsQnlcbiAgICB3LnNjcm9sbEJ5ID0gZnVuY3Rpb24oKSB7XG4gICAgICAvLyBhdm9pZCBhY3Rpb24gd2hlbiBubyBhcmd1bWVudHMgYXJlIHBhc3NlZFxuICAgICAgaWYgKGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gYXZvaWQgc21vb3RoIGJlaGF2aW9yIGlmIG5vdCByZXF1aXJlZFxuICAgICAgaWYgKHNob3VsZEJhaWxPdXQoYXJndW1lbnRzWzBdKSkge1xuICAgICAgICBvcmlnaW5hbC5zY3JvbGxCeS5jYWxsKFxuICAgICAgICAgIHcsXG4gICAgICAgICAgYXJndW1lbnRzWzBdLmxlZnQgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBhcmd1bWVudHNbMF0ubGVmdFxuICAgICAgICAgICAgOiB0eXBlb2YgYXJndW1lbnRzWzBdICE9PSAnb2JqZWN0JyA/IGFyZ3VtZW50c1swXSA6IDAsXG4gICAgICAgICAgYXJndW1lbnRzWzBdLnRvcCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IGFyZ3VtZW50c1swXS50b3BcbiAgICAgICAgICAgIDogYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwXG4gICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBMRVQgVEhFIFNNT09USE5FU1MgQkVHSU4hXG4gICAgICBzbW9vdGhTY3JvbGwuY2FsbChcbiAgICAgICAgdyxcbiAgICAgICAgZC5ib2R5LFxuICAgICAgICB+fmFyZ3VtZW50c1swXS5sZWZ0ICsgKHcuc2Nyb2xsWCB8fCB3LnBhZ2VYT2Zmc2V0KSxcbiAgICAgICAgfn5hcmd1bWVudHNbMF0udG9wICsgKHcuc2Nyb2xsWSB8fCB3LnBhZ2VZT2Zmc2V0KVxuICAgICAgKTtcbiAgICB9O1xuXG4gICAgLy8gRWxlbWVudC5wcm90b3R5cGUuc2Nyb2xsIGFuZCBFbGVtZW50LnByb3RvdHlwZS5zY3JvbGxUb1xuICAgIEVsZW1lbnQucHJvdG90eXBlLnNjcm9sbCA9IEVsZW1lbnQucHJvdG90eXBlLnNjcm9sbFRvID0gZnVuY3Rpb24oKSB7XG4gICAgICAvLyBhdm9pZCBhY3Rpb24gd2hlbiBubyBhcmd1bWVudHMgYXJlIHBhc3NlZFxuICAgICAgaWYgKGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gYXZvaWQgc21vb3RoIGJlaGF2aW9yIGlmIG5vdCByZXF1aXJlZFxuICAgICAgaWYgKHNob3VsZEJhaWxPdXQoYXJndW1lbnRzWzBdKSA9PT0gdHJ1ZSkge1xuICAgICAgICAvLyBpZiBvbmUgbnVtYmVyIGlzIHBhc3NlZCwgdGhyb3cgZXJyb3IgdG8gbWF0Y2ggRmlyZWZveCBpbXBsZW1lbnRhdGlvblxuICAgICAgICBpZiAodHlwZW9mIGFyZ3VtZW50c1swXSA9PT0gJ251bWJlcicgJiYgYXJndW1lbnRzWzFdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoJ1ZhbHVlIGNvdWxkIG5vdCBiZSBjb252ZXJ0ZWQnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG9yaWdpbmFsLmVsZW1lbnRTY3JvbGwuY2FsbChcbiAgICAgICAgICB0aGlzLFxuICAgICAgICAgIC8vIHVzZSBsZWZ0IHByb3AsIGZpcnN0IG51bWJlciBhcmd1bWVudCBvciBmYWxsYmFjayB0byBzY3JvbGxMZWZ0XG4gICAgICAgICAgYXJndW1lbnRzWzBdLmxlZnQgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyB+fmFyZ3VtZW50c1swXS5sZWZ0XG4gICAgICAgICAgICA6IHR5cGVvZiBhcmd1bWVudHNbMF0gIT09ICdvYmplY3QnID8gfn5hcmd1bWVudHNbMF0gOiB0aGlzLnNjcm9sbExlZnQsXG4gICAgICAgICAgLy8gdXNlIHRvcCBwcm9wLCBzZWNvbmQgYXJndW1lbnQgb3IgZmFsbGJhY2sgdG8gc2Nyb2xsVG9wXG4gICAgICAgICAgYXJndW1lbnRzWzBdLnRvcCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IH5+YXJndW1lbnRzWzBdLnRvcFxuICAgICAgICAgICAgOiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IH5+YXJndW1lbnRzWzFdIDogdGhpcy5zY3JvbGxUb3BcbiAgICAgICAgKTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBsZWZ0ID0gYXJndW1lbnRzWzBdLmxlZnQ7XG4gICAgICB2YXIgdG9wID0gYXJndW1lbnRzWzBdLnRvcDtcblxuICAgICAgLy8gTEVUIFRIRSBTTU9PVEhORVNTIEJFR0lOIVxuICAgICAgc21vb3RoU2Nyb2xsLmNhbGwoXG4gICAgICAgIHRoaXMsXG4gICAgICAgIHRoaXMsXG4gICAgICAgIHR5cGVvZiBsZWZ0ID09PSAndW5kZWZpbmVkJyA/IHRoaXMuc2Nyb2xsTGVmdCA6IH5+bGVmdCxcbiAgICAgICAgdHlwZW9mIHRvcCA9PT0gJ3VuZGVmaW5lZCcgPyB0aGlzLnNjcm9sbFRvcCA6IH5+dG9wXG4gICAgICApO1xuICAgIH07XG5cbiAgICAvLyBFbGVtZW50LnByb3RvdHlwZS5zY3JvbGxCeVxuICAgIEVsZW1lbnQucHJvdG90eXBlLnNjcm9sbEJ5ID0gZnVuY3Rpb24oKSB7XG4gICAgICAvLyBhdm9pZCBhY3Rpb24gd2hlbiBubyBhcmd1bWVudHMgYXJlIHBhc3NlZFxuICAgICAgaWYgKGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gYXZvaWQgc21vb3RoIGJlaGF2aW9yIGlmIG5vdCByZXF1aXJlZFxuICAgICAgaWYgKHNob3VsZEJhaWxPdXQoYXJndW1lbnRzWzBdKSA9PT0gdHJ1ZSkge1xuICAgICAgICBvcmlnaW5hbC5lbGVtZW50U2Nyb2xsLmNhbGwoXG4gICAgICAgICAgdGhpcyxcbiAgICAgICAgICBhcmd1bWVudHNbMF0ubGVmdCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IH5+YXJndW1lbnRzWzBdLmxlZnQgKyB0aGlzLnNjcm9sbExlZnRcbiAgICAgICAgICAgIDogfn5hcmd1bWVudHNbMF0gKyB0aGlzLnNjcm9sbExlZnQsXG4gICAgICAgICAgYXJndW1lbnRzWzBdLnRvcCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IH5+YXJndW1lbnRzWzBdLnRvcCArIHRoaXMuc2Nyb2xsVG9wXG4gICAgICAgICAgICA6IH5+YXJndW1lbnRzWzFdICsgdGhpcy5zY3JvbGxUb3BcbiAgICAgICAgKTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2Nyb2xsKHtcbiAgICAgICAgbGVmdDogfn5hcmd1bWVudHNbMF0ubGVmdCArIHRoaXMuc2Nyb2xsTGVmdCxcbiAgICAgICAgdG9wOiB+fmFyZ3VtZW50c1swXS50b3AgKyB0aGlzLnNjcm9sbFRvcCxcbiAgICAgICAgYmVoYXZpb3I6IGFyZ3VtZW50c1swXS5iZWhhdmlvclxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8vIEVsZW1lbnQucHJvdG90eXBlLnNjcm9sbEludG9WaWV3XG4gICAgRWxlbWVudC5wcm90b3R5cGUuc2Nyb2xsSW50b1ZpZXcgPSBmdW5jdGlvbigpIHtcbiAgICAgIC8vIGF2b2lkIHNtb290aCBiZWhhdmlvciBpZiBub3QgcmVxdWlyZWRcbiAgICAgIGlmIChzaG91bGRCYWlsT3V0KGFyZ3VtZW50c1swXSkgPT09IHRydWUpIHtcbiAgICAgICAgb3JpZ2luYWwuc2Nyb2xsSW50b1ZpZXcuY2FsbChcbiAgICAgICAgICB0aGlzLFxuICAgICAgICAgIGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IGFyZ3VtZW50c1swXVxuICAgICAgICApO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gTEVUIFRIRSBTTU9PVEhORVNTIEJFR0lOIVxuICAgICAgdmFyIHNjcm9sbGFibGVQYXJlbnQgPSBmaW5kU2Nyb2xsYWJsZVBhcmVudCh0aGlzKTtcbiAgICAgIHZhciBwYXJlbnRSZWN0cyA9IHNjcm9sbGFibGVQYXJlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICB2YXIgY2xpZW50UmVjdHMgPSB0aGlzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgICBpZiAoc2Nyb2xsYWJsZVBhcmVudCAhPT0gZC5ib2R5KSB7XG4gICAgICAgIC8vIHJldmVhbCBlbGVtZW50IGluc2lkZSBwYXJlbnRcbiAgICAgICAgc21vb3RoU2Nyb2xsLmNhbGwoXG4gICAgICAgICAgdGhpcyxcbiAgICAgICAgICBzY3JvbGxhYmxlUGFyZW50LFxuICAgICAgICAgIHNjcm9sbGFibGVQYXJlbnQuc2Nyb2xsTGVmdCArIGNsaWVudFJlY3RzLmxlZnQgLSBwYXJlbnRSZWN0cy5sZWZ0LFxuICAgICAgICAgIHNjcm9sbGFibGVQYXJlbnQuc2Nyb2xsVG9wICsgY2xpZW50UmVjdHMudG9wIC0gcGFyZW50UmVjdHMudG9wXG4gICAgICAgICk7XG5cbiAgICAgICAgLy8gcmV2ZWFsIHBhcmVudCBpbiB2aWV3cG9ydCB1bmxlc3MgaXMgZml4ZWRcbiAgICAgICAgaWYgKHcuZ2V0Q29tcHV0ZWRTdHlsZShzY3JvbGxhYmxlUGFyZW50KS5wb3NpdGlvbiAhPT0gJ2ZpeGVkJykge1xuICAgICAgICAgIHcuc2Nyb2xsQnkoe1xuICAgICAgICAgICAgbGVmdDogcGFyZW50UmVjdHMubGVmdCxcbiAgICAgICAgICAgIHRvcDogcGFyZW50UmVjdHMudG9wLFxuICAgICAgICAgICAgYmVoYXZpb3I6ICdzbW9vdGgnXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHJldmVhbCBlbGVtZW50IGluIHZpZXdwb3J0XG4gICAgICAgIHcuc2Nyb2xsQnkoe1xuICAgICAgICAgIGxlZnQ6IGNsaWVudFJlY3RzLmxlZnQsXG4gICAgICAgICAgdG9wOiBjbGllbnRSZWN0cy50b3AsXG4gICAgICAgICAgYmVoYXZpb3I6ICdzbW9vdGgnXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICB7XG4gICAgLy8gY29tbW9uanNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IHsgcG9seWZpbGw6IHBvbHlmaWxsIH07XG4gIH1cblxufSgpKTtcbn0pO1xudmFyIHNtb290aHNjcm9sbF8xID0gc21vb3Roc2Nyb2xsLnBvbHlmaWxsO1xuXG52YXIgX2RlZmF1bHQkMSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0NvcmUpIHtcbiAgX2luaGVyaXRzKF9kZWZhdWx0LCBfQ29yZSk7XG5cbiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihfZGVmYXVsdCk7XG5cbiAgZnVuY3Rpb24gX2RlZmF1bHQoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIF9kZWZhdWx0KTtcblxuICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgb3B0aW9ucyk7XG5cbiAgICBpZiAoX3RoaXMucmVzZXROYXRpdmVTY3JvbGwpIHtcbiAgICAgIGlmIChoaXN0b3J5LnNjcm9sbFJlc3RvcmF0aW9uKSB7XG4gICAgICAgIGhpc3Rvcnkuc2Nyb2xsUmVzdG9yYXRpb24gPSAnbWFudWFsJztcbiAgICAgIH1cblxuICAgICAgd2luZG93LnNjcm9sbFRvKDAsIDApO1xuICAgIH1cblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBfdGhpcy5jaGVja1Njcm9sbCwgZmFsc2UpO1xuXG4gICAgaWYgKHdpbmRvdy5zbW9vdGhzY3JvbGxQb2x5ZmlsbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB3aW5kb3cuc21vb3Roc2Nyb2xsUG9seWZpbGwgPSBzbW9vdGhzY3JvbGw7XG4gICAgICB3aW5kb3cuc21vb3Roc2Nyb2xsUG9seWZpbGwucG9seWZpbGwoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoX2RlZmF1bHQsIFt7XG4gICAga2V5OiBcImluaXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgIHRoaXMuaW5zdGFuY2Uuc2Nyb2xsLnkgPSB3aW5kb3cucGFnZVlPZmZzZXQ7XG4gICAgICB0aGlzLmFkZEVsZW1lbnRzKCk7XG4gICAgICB0aGlzLmRldGVjdEVsZW1lbnRzKCk7XG5cbiAgICAgIF9nZXQoX2dldFByb3RvdHlwZU9mKF9kZWZhdWx0LnByb3RvdHlwZSksIFwiaW5pdFwiLCB0aGlzKS5jYWxsKHRoaXMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjaGVja1Njcm9sbFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjaGVja1Njcm9sbCgpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICBfZ2V0KF9nZXRQcm90b3R5cGVPZihfZGVmYXVsdC5wcm90b3R5cGUpLCBcImNoZWNrU2Nyb2xsXCIsIHRoaXMpLmNhbGwodGhpcyk7XG5cbiAgICAgIGlmICh0aGlzLmdldERpcmVjdGlvbikge1xuICAgICAgICB0aGlzLmFkZERpcmVjdGlvbigpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5nZXRTcGVlZCkge1xuICAgICAgICB0aGlzLmFkZFNwZWVkKCk7XG4gICAgICAgIHRoaXMuc3BlZWRUcyA9IERhdGUubm93KCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuaW5zdGFuY2Uuc2Nyb2xsLnkgPSB3aW5kb3cucGFnZVlPZmZzZXQ7XG5cbiAgICAgIGlmIChPYmplY3QuZW50cmllcyh0aGlzLmVscykubGVuZ3RoKSB7XG4gICAgICAgIGlmICghdGhpcy5oYXNTY3JvbGxUaWNraW5nKSB7XG4gICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzMi5kZXRlY3RFbGVtZW50cygpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHRoaXMuaGFzU2Nyb2xsVGlja2luZyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiYWRkRGlyZWN0aW9uXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZERpcmVjdGlvbigpIHtcbiAgICAgIGlmICh3aW5kb3cucGFnZVlPZmZzZXQgPiB0aGlzLmluc3RhbmNlLnNjcm9sbC55KSB7XG4gICAgICAgIGlmICh0aGlzLmluc3RhbmNlLmRpcmVjdGlvbiAhPT0gJ2Rvd24nKSB7XG4gICAgICAgICAgdGhpcy5pbnN0YW5jZS5kaXJlY3Rpb24gPSAnZG93bic7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAod2luZG93LnBhZ2VZT2Zmc2V0IDwgdGhpcy5pbnN0YW5jZS5zY3JvbGwueSkge1xuICAgICAgICBpZiAodGhpcy5pbnN0YW5jZS5kaXJlY3Rpb24gIT09ICd1cCcpIHtcbiAgICAgICAgICB0aGlzLmluc3RhbmNlLmRpcmVjdGlvbiA9ICd1cCc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiYWRkU3BlZWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkU3BlZWQoKSB7XG4gICAgICBpZiAod2luZG93LnBhZ2VZT2Zmc2V0ICE9IHRoaXMuaW5zdGFuY2Uuc2Nyb2xsLnkpIHtcbiAgICAgICAgdGhpcy5pbnN0YW5jZS5zcGVlZCA9ICh3aW5kb3cucGFnZVlPZmZzZXQgLSB0aGlzLmluc3RhbmNlLnNjcm9sbC55KSAvIE1hdGgubWF4KDEsIERhdGUubm93KCkgLSB0aGlzLnNwZWVkVHMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5pbnN0YW5jZS5zcGVlZCA9IDA7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlc2l6ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXNpemUoKSB7XG4gICAgICBpZiAoT2JqZWN0LmVudHJpZXModGhpcy5lbHMpLmxlbmd0aCkge1xuICAgICAgICB0aGlzLndpbmRvd0hlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICAgICAgdGhpcy51cGRhdGVFbGVtZW50cygpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJhZGRFbGVtZW50c1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRFbGVtZW50cygpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICB0aGlzLmVscyA9IHt9O1xuICAgICAgdmFyIGVscyA9IHRoaXMuZWwucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtJyArIHRoaXMubmFtZSArICddJyk7XG4gICAgICBlbHMuZm9yRWFjaChmdW5jdGlvbiAoZWwsIGluZGV4KSB7XG4gICAgICAgIHZhciBCQ1IgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgdmFyIGNsID0gZWwuZGF0YXNldFtfdGhpczMubmFtZSArICdDbGFzcyddIHx8IF90aGlzM1tcImNsYXNzXCJdO1xuICAgICAgICB2YXIgaWQgPSB0eXBlb2YgZWwuZGF0YXNldFtfdGhpczMubmFtZSArICdJZCddID09PSAnc3RyaW5nJyA/IGVsLmRhdGFzZXRbX3RoaXMzLm5hbWUgKyAnSWQnXSA6IGluZGV4O1xuICAgICAgICB2YXIgdG9wO1xuICAgICAgICB2YXIgbGVmdDtcbiAgICAgICAgdmFyIG9mZnNldCA9IHR5cGVvZiBlbC5kYXRhc2V0W190aGlzMy5uYW1lICsgJ09mZnNldCddID09PSAnc3RyaW5nJyA/IGVsLmRhdGFzZXRbX3RoaXMzLm5hbWUgKyAnT2Zmc2V0J10uc3BsaXQoJywnKSA6IF90aGlzMy5vZmZzZXQ7XG4gICAgICAgIHZhciByZXBlYXQgPSBlbC5kYXRhc2V0W190aGlzMy5uYW1lICsgJ1JlcGVhdCddO1xuICAgICAgICB2YXIgY2FsbCA9IGVsLmRhdGFzZXRbX3RoaXMzLm5hbWUgKyAnQ2FsbCddO1xuICAgICAgICB2YXIgdGFyZ2V0ID0gZWwuZGF0YXNldFtfdGhpczMubmFtZSArICdUYXJnZXQnXTtcbiAgICAgICAgdmFyIHRhcmdldEVsO1xuXG4gICAgICAgIGlmICh0YXJnZXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRhcmdldEVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIlwiLmNvbmNhdCh0YXJnZXQpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0YXJnZXRFbCA9IGVsO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRhcmdldEVsQkNSID0gdGFyZ2V0RWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIHRvcCA9IHRhcmdldEVsQkNSLnRvcCArIF90aGlzMy5pbnN0YW5jZS5zY3JvbGwueTtcbiAgICAgICAgbGVmdCA9IHRhcmdldEVsQkNSLmxlZnQgKyBfdGhpczMuaW5zdGFuY2Uuc2Nyb2xsLng7XG4gICAgICAgIHZhciBib3R0b20gPSB0b3AgKyB0YXJnZXRFbC5vZmZzZXRIZWlnaHQ7XG4gICAgICAgIHZhciByaWdodCA9IGxlZnQgKyB0YXJnZXRFbC5vZmZzZXRXaWR0aDtcblxuICAgICAgICBpZiAocmVwZWF0ID09ICdmYWxzZScpIHtcbiAgICAgICAgICByZXBlYXQgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIGlmIChyZXBlYXQgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmVwZWF0ID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXBlYXQgPSBfdGhpczMucmVwZWF0O1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHJlbGF0aXZlT2Zmc2V0ID0gX3RoaXMzLmdldFJlbGF0aXZlT2Zmc2V0KG9mZnNldCk7XG5cbiAgICAgICAgdG9wID0gdG9wICsgcmVsYXRpdmVPZmZzZXRbMF07XG4gICAgICAgIGJvdHRvbSA9IGJvdHRvbSAtIHJlbGF0aXZlT2Zmc2V0WzFdO1xuICAgICAgICB2YXIgbWFwcGVkRWwgPSB7XG4gICAgICAgICAgZWw6IGVsLFxuICAgICAgICAgIHRhcmdldEVsOiB0YXJnZXRFbCxcbiAgICAgICAgICBpZDogaWQsXG4gICAgICAgICAgXCJjbGFzc1wiOiBjbCxcbiAgICAgICAgICB0b3A6IHRvcCxcbiAgICAgICAgICBib3R0b206IGJvdHRvbSxcbiAgICAgICAgICBsZWZ0OiBsZWZ0LFxuICAgICAgICAgIHJpZ2h0OiByaWdodCxcbiAgICAgICAgICBvZmZzZXQ6IG9mZnNldCxcbiAgICAgICAgICBwcm9ncmVzczogMCxcbiAgICAgICAgICByZXBlYXQ6IHJlcGVhdCxcbiAgICAgICAgICBpblZpZXc6IGZhbHNlLFxuICAgICAgICAgIGNhbGw6IGNhbGxcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMzLmVsc1tpZF0gPSBtYXBwZWRFbDtcblxuICAgICAgICBpZiAoZWwuY2xhc3NMaXN0LmNvbnRhaW5zKGNsKSkge1xuICAgICAgICAgIF90aGlzMy5zZXRJblZpZXcoX3RoaXMzLmVsc1tpZF0sIGlkKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInVwZGF0ZUVsZW1lbnRzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZUVsZW1lbnRzKCkge1xuICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgIE9iamVjdC5lbnRyaWVzKHRoaXMuZWxzKS5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICAgIHZhciBfcmVmMiA9IF9zbGljZWRUb0FycmF5KF9yZWYsIDIpLFxuICAgICAgICAgICAgaSA9IF9yZWYyWzBdLFxuICAgICAgICAgICAgZWwgPSBfcmVmMlsxXTtcblxuICAgICAgICB2YXIgdG9wID0gZWwudGFyZ2V0RWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wICsgX3RoaXM0Lmluc3RhbmNlLnNjcm9sbC55O1xuXG4gICAgICAgIHZhciBib3R0b20gPSB0b3AgKyBlbC50YXJnZXRFbC5vZmZzZXRIZWlnaHQ7XG5cbiAgICAgICAgdmFyIHJlbGF0aXZlT2Zmc2V0ID0gX3RoaXM0LmdldFJlbGF0aXZlT2Zmc2V0KGVsLm9mZnNldCk7XG5cbiAgICAgICAgX3RoaXM0LmVsc1tpXS50b3AgPSB0b3AgKyByZWxhdGl2ZU9mZnNldFswXTtcbiAgICAgICAgX3RoaXM0LmVsc1tpXS5ib3R0b20gPSBib3R0b20gLSByZWxhdGl2ZU9mZnNldFsxXTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5oYXNTY3JvbGxUaWNraW5nID0gZmFsc2U7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldFJlbGF0aXZlT2Zmc2V0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFJlbGF0aXZlT2Zmc2V0KG9mZnNldCkge1xuICAgICAgdmFyIHJlbGF0aXZlT2Zmc2V0ID0gWzAsIDBdO1xuXG4gICAgICBpZiAob2Zmc2V0KSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2Zmc2V0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBvZmZzZXRbaV0gPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGlmIChvZmZzZXRbaV0uaW5jbHVkZXMoJyUnKSkge1xuICAgICAgICAgICAgICByZWxhdGl2ZU9mZnNldFtpXSA9IHBhcnNlSW50KG9mZnNldFtpXS5yZXBsYWNlKCclJywgJycpICogdGhpcy53aW5kb3dIZWlnaHQgLyAxMDApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmVsYXRpdmVPZmZzZXRbaV0gPSBwYXJzZUludChvZmZzZXRbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZWxhdGl2ZU9mZnNldFtpXSA9IG9mZnNldFtpXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlbGF0aXZlT2Zmc2V0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTY3JvbGwgdG8gYSBkZXNpcmVkIHRhcmdldC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAgQXZhaWxhYmxlIG9wdGlvbnMgOlxuICAgICAqICAgICAgICAgIHRhcmdldCB7bm9kZSwgc3RyaW5nLCBcInRvcFwiLCBcImJvdHRvbVwiLCBpbnR9IC0gVGhlIERPTSBlbGVtZW50IHdlIHdhbnQgdG8gc2Nyb2xsIHRvXG4gICAgICogICAgICAgICAgb3B0aW9ucyB7b2JqZWN0fSAtIE9wdGlvbnMgb2JqZWN0IGZvciBhZGRpdGlvbm5hbCBzZXR0aW5ncy5cbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwic2Nyb2xsVG9cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2Nyb2xsVG8odGFyZ2V0KSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgICAvLyBQYXJzZSBvcHRpb25zXG4gICAgICB2YXIgb2Zmc2V0ID0gcGFyc2VJbnQob3B0aW9ucy5vZmZzZXQpIHx8IDA7IC8vIEFuIG9mZnNldCB0byBhcHBseSBvbiB0b3Agb2YgZ2l2ZW4gYHRhcmdldGAgb3IgYHNvdXJjZUVsZW1gJ3MgdGFyZ2V0XG5cbiAgICAgIHZhciBjYWxsYmFjayA9IG9wdGlvbnMuY2FsbGJhY2sgPyBvcHRpb25zLmNhbGxiYWNrIDogZmFsc2U7IC8vIGZ1bmN0aW9uIGNhbGxlZCB3aGVuIHNjcm9sbFRvIGNvbXBsZXRlcyAobm90ZSB0aGF0IGl0IHdvbid0IHdhaXQgZm9yIGxlcnAgdG8gc3RhYmlsaXplKVxuXG4gICAgICBpZiAodHlwZW9mIHRhcmdldCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgLy8gU2VsZWN0b3Igb3IgYm91bmRhcmllc1xuICAgICAgICBpZiAodGFyZ2V0ID09PSAndG9wJykge1xuICAgICAgICAgIHRhcmdldCA9IHRoaXMuaHRtbDtcbiAgICAgICAgfSBlbHNlIGlmICh0YXJnZXQgPT09ICdib3R0b20nKSB7XG4gICAgICAgICAgdGFyZ2V0ID0gdGhpcy5odG1sLm9mZnNldEhlaWdodCAtIHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0YXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7IC8vIElmIHRoZSBxdWVyeSBmYWlscywgYWJvcnRcblxuICAgICAgICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0YXJnZXQgPT09ICdudW1iZXInKSB7XG4gICAgICAgIC8vIEFic29sdXRlIGNvb3JkaW5hdGVcbiAgICAgICAgdGFyZ2V0ID0gcGFyc2VJbnQodGFyZ2V0KTtcbiAgICAgIH0gZWxzZSBpZiAodGFyZ2V0ICYmIHRhcmdldC50YWdOYW1lKSA7IGVsc2Uge1xuICAgICAgICBjb25zb2xlLndhcm4oJ2B0YXJnZXRgIHBhcmFtZXRlciBpcyBub3QgdmFsaWQnKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBXZSBoYXZlIGEgdGFyZ2V0IHRoYXQgaXMgbm90IGEgY29vcmRpbmF0ZSB5ZXQsIGdldCBpdFxuXG5cbiAgICAgIGlmICh0eXBlb2YgdGFyZ2V0ICE9PSAnbnVtYmVyJykge1xuICAgICAgICBvZmZzZXQgPSB0YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wICsgb2Zmc2V0ICsgdGhpcy5pbnN0YW5jZS5zY3JvbGwueTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9mZnNldCA9IHRhcmdldCArIG9mZnNldDtcbiAgICAgIH1cblxuICAgICAgdmFyIGlzVGFyZ2V0UmVhY2hlZCA9IGZ1bmN0aW9uIGlzVGFyZ2V0UmVhY2hlZCgpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlSW50KHdpbmRvdy5wYWdlWU9mZnNldCkgPT09IHBhcnNlSW50KG9mZnNldCk7XG4gICAgICB9O1xuXG4gICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKGlzVGFyZ2V0UmVhY2hlZCgpKSB7XG4gICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIG9uU2Nyb2xsID0gZnVuY3Rpb24gb25TY3JvbGwoKSB7XG4gICAgICAgICAgICBpZiAoaXNUYXJnZXRSZWFjaGVkKCkpIHtcbiAgICAgICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIG9uU2Nyb2xsKTtcbiAgICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIG9uU2Nyb2xsKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB3aW5kb3cuc2Nyb2xsVG8oe1xuICAgICAgICB0b3A6IG9mZnNldCxcbiAgICAgICAgYmVoYXZpb3I6IG9wdGlvbnMuZHVyYXRpb24gPT09IDAgPyAnYXV0bycgOiAnc21vb3RoJ1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInVwZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgICB0aGlzLmFkZEVsZW1lbnRzKCk7XG4gICAgICB0aGlzLmRldGVjdEVsZW1lbnRzKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImRlc3Ryb3lcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgIF9nZXQoX2dldFByb3RvdHlwZU9mKF9kZWZhdWx0LnByb3RvdHlwZSksIFwiZGVzdHJveVwiLCB0aGlzKS5jYWxsKHRoaXMpO1xuXG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdGhpcy5jaGVja1Njcm9sbCwgZmFsc2UpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBfZGVmYXVsdDtcbn0oX2RlZmF1bHQpO1xuXG4vKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbnZhciBvYmplY3RBc3NpZ24gPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdFx0XHRzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHtcblx0XHRcdFx0XHR0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuXG5mdW5jdGlvbiBFICgpIHtcbiAgLy8gS2VlcCB0aGlzIGVtcHR5IHNvIGl0J3MgZWFzaWVyIHRvIGluaGVyaXQgZnJvbVxuICAvLyAodmlhIGh0dHBzOi8vZ2l0aHViLmNvbS9saXBzbWFjayBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9zY290dGNvcmdhbi90aW55LWVtaXR0ZXIvaXNzdWVzLzMpXG59XG5cbkUucHJvdG90eXBlID0ge1xuICBvbjogZnVuY3Rpb24gKG5hbWUsIGNhbGxiYWNrLCBjdHgpIHtcbiAgICB2YXIgZSA9IHRoaXMuZSB8fCAodGhpcy5lID0ge30pO1xuXG4gICAgKGVbbmFtZV0gfHwgKGVbbmFtZV0gPSBbXSkpLnB1c2goe1xuICAgICAgZm46IGNhbGxiYWNrLFxuICAgICAgY3R4OiBjdHhcbiAgICB9KTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIG9uY2U6IGZ1bmN0aW9uIChuYW1lLCBjYWxsYmFjaywgY3R4KSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIGZ1bmN0aW9uIGxpc3RlbmVyICgpIHtcbiAgICAgIHNlbGYub2ZmKG5hbWUsIGxpc3RlbmVyKTtcbiAgICAgIGNhbGxiYWNrLmFwcGx5KGN0eCwgYXJndW1lbnRzKTtcbiAgICB9XG4gICAgbGlzdGVuZXIuXyA9IGNhbGxiYWNrO1xuICAgIHJldHVybiB0aGlzLm9uKG5hbWUsIGxpc3RlbmVyLCBjdHgpO1xuICB9LFxuXG4gIGVtaXQ6IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdmFyIGRhdGEgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgdmFyIGV2dEFyciA9ICgodGhpcy5lIHx8ICh0aGlzLmUgPSB7fSkpW25hbWVdIHx8IFtdKS5zbGljZSgpO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgbGVuID0gZXZ0QXJyLmxlbmd0aDtcblxuICAgIGZvciAoaTsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBldnRBcnJbaV0uZm4uYXBwbHkoZXZ0QXJyW2ldLmN0eCwgZGF0YSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgb2ZmOiBmdW5jdGlvbiAobmFtZSwgY2FsbGJhY2spIHtcbiAgICB2YXIgZSA9IHRoaXMuZSB8fCAodGhpcy5lID0ge30pO1xuICAgIHZhciBldnRzID0gZVtuYW1lXTtcbiAgICB2YXIgbGl2ZUV2ZW50cyA9IFtdO1xuXG4gICAgaWYgKGV2dHMgJiYgY2FsbGJhY2spIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBldnRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGlmIChldnRzW2ldLmZuICE9PSBjYWxsYmFjayAmJiBldnRzW2ldLmZuLl8gIT09IGNhbGxiYWNrKVxuICAgICAgICAgIGxpdmVFdmVudHMucHVzaChldnRzW2ldKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZW1vdmUgZXZlbnQgZnJvbSBxdWV1ZSB0byBwcmV2ZW50IG1lbW9yeSBsZWFrXG4gICAgLy8gU3VnZ2VzdGVkIGJ5IGh0dHBzOi8vZ2l0aHViLmNvbS9sYXpkXG4gICAgLy8gUmVmOiBodHRwczovL2dpdGh1Yi5jb20vc2NvdHRjb3JnYW4vdGlueS1lbWl0dGVyL2NvbW1pdC9jNmViZmFhOWJjOTczYjMzZDExMGE4NGEzMDc3NDJiN2NmOTRjOTUzI2NvbW1pdGNvbW1lbnQtNTAyNDkxMFxuXG4gICAgKGxpdmVFdmVudHMubGVuZ3RoKVxuICAgICAgPyBlW25hbWVdID0gbGl2ZUV2ZW50c1xuICAgICAgOiBkZWxldGUgZVtuYW1lXTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG59O1xuXG52YXIgdGlueUVtaXR0ZXIgPSBFO1xuXG52YXIgbGV0aGFyZ3kgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7XG4vLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuOS4yXG4oZnVuY3Rpb24oKSB7XG4gIHZhciByb290O1xuXG4gIHJvb3QgPSAgZXhwb3J0cyAhPT0gbnVsbCA/IGV4cG9ydHMgOiB0aGlzO1xuXG4gIHJvb3QuTGV0aGFyZ3kgPSAoZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gTGV0aGFyZ3koc3RhYmlsaXR5LCBzZW5zaXRpdml0eSwgdG9sZXJhbmNlLCBkZWxheSkge1xuICAgICAgdGhpcy5zdGFiaWxpdHkgPSBzdGFiaWxpdHkgIT0gbnVsbCA/IE1hdGguYWJzKHN0YWJpbGl0eSkgOiA4O1xuICAgICAgdGhpcy5zZW5zaXRpdml0eSA9IHNlbnNpdGl2aXR5ICE9IG51bGwgPyAxICsgTWF0aC5hYnMoc2Vuc2l0aXZpdHkpIDogMTAwO1xuICAgICAgdGhpcy50b2xlcmFuY2UgPSB0b2xlcmFuY2UgIT0gbnVsbCA/IDEgKyBNYXRoLmFicyh0b2xlcmFuY2UpIDogMS4xO1xuICAgICAgdGhpcy5kZWxheSA9IGRlbGF5ICE9IG51bGwgPyBkZWxheSA6IDE1MDtcbiAgICAgIHRoaXMubGFzdFVwRGVsdGFzID0gKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgaSwgcmVmLCByZXN1bHRzO1xuICAgICAgICByZXN1bHRzID0gW107XG4gICAgICAgIGZvciAoaSA9IDEsIHJlZiA9IHRoaXMuc3RhYmlsaXR5ICogMjsgMSA8PSByZWYgPyBpIDw9IHJlZiA6IGkgPj0gcmVmOyAxIDw9IHJlZiA/IGkrKyA6IGktLSkge1xuICAgICAgICAgIHJlc3VsdHMucHVzaChudWxsKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICAgIH0pLmNhbGwodGhpcyk7XG4gICAgICB0aGlzLmxhc3REb3duRGVsdGFzID0gKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgaSwgcmVmLCByZXN1bHRzO1xuICAgICAgICByZXN1bHRzID0gW107XG4gICAgICAgIGZvciAoaSA9IDEsIHJlZiA9IHRoaXMuc3RhYmlsaXR5ICogMjsgMSA8PSByZWYgPyBpIDw9IHJlZiA6IGkgPj0gcmVmOyAxIDw9IHJlZiA/IGkrKyA6IGktLSkge1xuICAgICAgICAgIHJlc3VsdHMucHVzaChudWxsKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICAgIH0pLmNhbGwodGhpcyk7XG4gICAgICB0aGlzLmRlbHRhc1RpbWVzdGFtcCA9IChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGksIHJlZiwgcmVzdWx0cztcbiAgICAgICAgcmVzdWx0cyA9IFtdO1xuICAgICAgICBmb3IgKGkgPSAxLCByZWYgPSB0aGlzLnN0YWJpbGl0eSAqIDI7IDEgPD0gcmVmID8gaSA8PSByZWYgOiBpID49IHJlZjsgMSA8PSByZWYgPyBpKysgOiBpLS0pIHtcbiAgICAgICAgICByZXN1bHRzLnB1c2gobnVsbCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgICB9KS5jYWxsKHRoaXMpO1xuICAgIH1cblxuICAgIExldGhhcmd5LnByb3RvdHlwZS5jaGVjayA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgIHZhciBsYXN0RGVsdGE7XG4gICAgICBlID0gZS5vcmlnaW5hbEV2ZW50IHx8IGU7XG4gICAgICBpZiAoZS53aGVlbERlbHRhICE9IG51bGwpIHtcbiAgICAgICAgbGFzdERlbHRhID0gZS53aGVlbERlbHRhO1xuICAgICAgfSBlbHNlIGlmIChlLmRlbHRhWSAhPSBudWxsKSB7XG4gICAgICAgIGxhc3REZWx0YSA9IGUuZGVsdGFZICogLTQwO1xuICAgICAgfSBlbHNlIGlmICgoZS5kZXRhaWwgIT0gbnVsbCkgfHwgZS5kZXRhaWwgPT09IDApIHtcbiAgICAgICAgbGFzdERlbHRhID0gZS5kZXRhaWwgKiAtNDA7XG4gICAgICB9XG4gICAgICB0aGlzLmRlbHRhc1RpbWVzdGFtcC5wdXNoKERhdGUubm93KCkpO1xuICAgICAgdGhpcy5kZWx0YXNUaW1lc3RhbXAuc2hpZnQoKTtcbiAgICAgIGlmIChsYXN0RGVsdGEgPiAwKSB7XG4gICAgICAgIHRoaXMubGFzdFVwRGVsdGFzLnB1c2gobGFzdERlbHRhKTtcbiAgICAgICAgdGhpcy5sYXN0VXBEZWx0YXMuc2hpZnQoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNJbmVydGlhKDEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5sYXN0RG93bkRlbHRhcy5wdXNoKGxhc3REZWx0YSk7XG4gICAgICAgIHRoaXMubGFzdERvd25EZWx0YXMuc2hpZnQoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNJbmVydGlhKC0xKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgTGV0aGFyZ3kucHJvdG90eXBlLmlzSW5lcnRpYSA9IGZ1bmN0aW9uKGRpcmVjdGlvbikge1xuICAgICAgdmFyIGxhc3REZWx0YXMsIGxhc3REZWx0YXNOZXcsIGxhc3REZWx0YXNPbGQsIG5ld0F2ZXJhZ2UsIG5ld1N1bSwgb2xkQXZlcmFnZSwgb2xkU3VtO1xuICAgICAgbGFzdERlbHRhcyA9IGRpcmVjdGlvbiA9PT0gLTEgPyB0aGlzLmxhc3REb3duRGVsdGFzIDogdGhpcy5sYXN0VXBEZWx0YXM7XG4gICAgICBpZiAobGFzdERlbHRhc1swXSA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZGlyZWN0aW9uO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuZGVsdGFzVGltZXN0YW1wWyh0aGlzLnN0YWJpbGl0eSAqIDIpIC0gMl0gKyB0aGlzLmRlbGF5ID4gRGF0ZS5ub3coKSAmJiBsYXN0RGVsdGFzWzBdID09PSBsYXN0RGVsdGFzWyh0aGlzLnN0YWJpbGl0eSAqIDIpIC0gMV0pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgbGFzdERlbHRhc09sZCA9IGxhc3REZWx0YXMuc2xpY2UoMCwgdGhpcy5zdGFiaWxpdHkpO1xuICAgICAgbGFzdERlbHRhc05ldyA9IGxhc3REZWx0YXMuc2xpY2UodGhpcy5zdGFiaWxpdHksIHRoaXMuc3RhYmlsaXR5ICogMik7XG4gICAgICBvbGRTdW0gPSBsYXN0RGVsdGFzT2xkLnJlZHVjZShmdW5jdGlvbih0LCBzKSB7XG4gICAgICAgIHJldHVybiB0ICsgcztcbiAgICAgIH0pO1xuICAgICAgbmV3U3VtID0gbGFzdERlbHRhc05ldy5yZWR1Y2UoZnVuY3Rpb24odCwgcykge1xuICAgICAgICByZXR1cm4gdCArIHM7XG4gICAgICB9KTtcbiAgICAgIG9sZEF2ZXJhZ2UgPSBvbGRTdW0gLyBsYXN0RGVsdGFzT2xkLmxlbmd0aDtcbiAgICAgIG5ld0F2ZXJhZ2UgPSBuZXdTdW0gLyBsYXN0RGVsdGFzTmV3Lmxlbmd0aDtcbiAgICAgIGlmIChNYXRoLmFicyhvbGRBdmVyYWdlKSA8IE1hdGguYWJzKG5ld0F2ZXJhZ2UgKiB0aGlzLnRvbGVyYW5jZSkgJiYgKHRoaXMuc2Vuc2l0aXZpdHkgPCBNYXRoLmFicyhuZXdBdmVyYWdlKSkpIHtcbiAgICAgICAgcmV0dXJuIGRpcmVjdGlvbjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgTGV0aGFyZ3kucHJvdG90eXBlLnNob3dMYXN0VXBEZWx0YXMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmxhc3RVcERlbHRhcztcbiAgICB9O1xuXG4gICAgTGV0aGFyZ3kucHJvdG90eXBlLnNob3dMYXN0RG93bkRlbHRhcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMubGFzdERvd25EZWx0YXM7XG4gICAgfTtcblxuICAgIHJldHVybiBMZXRoYXJneTtcblxuICB9KSgpO1xuXG59KS5jYWxsKGNvbW1vbmpzR2xvYmFsKTtcbn0pO1xuXG52YXIgc3VwcG9ydCA9IChmdW5jdGlvbiBnZXRTdXBwb3J0KCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGhhc1doZWVsRXZlbnQ6ICdvbndoZWVsJyBpbiBkb2N1bWVudCxcbiAgICAgICAgaGFzTW91c2VXaGVlbEV2ZW50OiAnb25tb3VzZXdoZWVsJyBpbiBkb2N1bWVudCxcbiAgICAgICAgaGFzVG91Y2g6ICgnb250b3VjaHN0YXJ0JyBpbiB3aW5kb3cpIHx8IHdpbmRvdy5Ub3VjaEV2ZW50IHx8IHdpbmRvdy5Eb2N1bWVudFRvdWNoICYmIGRvY3VtZW50IGluc3RhbmNlb2YgRG9jdW1lbnRUb3VjaCxcbiAgICAgICAgaGFzVG91Y2hXaW46IG5hdmlnYXRvci5tc01heFRvdWNoUG9pbnRzICYmIG5hdmlnYXRvci5tc01heFRvdWNoUG9pbnRzID4gMSxcbiAgICAgICAgaGFzUG9pbnRlcjogISF3aW5kb3cubmF2aWdhdG9yLm1zUG9pbnRlckVuYWJsZWQsXG4gICAgICAgIGhhc0tleURvd246ICdvbmtleWRvd24nIGluIGRvY3VtZW50LFxuICAgICAgICBpc0ZpcmVmb3g6IG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignRmlyZWZveCcpID4gLTFcbiAgICB9O1xufSkoKTtcblxudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZyxcbiAgICBoYXNPd25Qcm9wZXJ0eSQxID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIGJpbmRhbGxTdGFuZGFsb25lID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgaWYoIW9iamVjdCkgcmV0dXJuIGNvbnNvbGUud2FybignYmluZEFsbCByZXF1aXJlcyBhdCBsZWFzdCBvbmUgYXJndW1lbnQuJyk7XG5cbiAgICB2YXIgZnVuY3Rpb25zID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcblxuICAgIGlmIChmdW5jdGlvbnMubGVuZ3RoID09PSAwKSB7XG5cbiAgICAgICAgZm9yICh2YXIgbWV0aG9kIGluIG9iamVjdCkge1xuICAgICAgICAgICAgaWYoaGFzT3duUHJvcGVydHkkMS5jYWxsKG9iamVjdCwgbWV0aG9kKSkge1xuICAgICAgICAgICAgICAgIGlmKHR5cGVvZiBvYmplY3RbbWV0aG9kXSA9PSAnZnVuY3Rpb24nICYmIHRvU3RyaW5nLmNhbGwob2JqZWN0W21ldGhvZF0pID09IFwiW29iamVjdCBGdW5jdGlvbl1cIikge1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbnMucHVzaChtZXRob2QpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZvcih2YXIgaSA9IDA7IGkgPCBmdW5jdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGYgPSBmdW5jdGlvbnNbaV07XG4gICAgICAgIG9iamVjdFtmXSA9IGJpbmQob2JqZWN0W2ZdLCBvYmplY3QpO1xuICAgIH1cbn07XG5cbi8qXG4gICAgRmFzdGVyIGJpbmQgd2l0aG91dCBzcGVjaWZpYy1jYXNlIGNoZWNraW5nLiAoc2VlIGh0dHBzOi8vY29kZXJ3YWxsLmNvbS9wL29pM2ozdykuXG4gICAgYmluZEFsbCBpcyBvbmx5IG5lZWRlZCBmb3IgZXZlbnRzIGJpbmRpbmcgc28gbm8gbmVlZCB0byBtYWtlIHNsb3cgZml4ZXMgZm9yIGNvbnN0cnVjdG9yXG4gICAgb3IgcGFydGlhbCBhcHBsaWNhdGlvbi5cbiovXG5mdW5jdGlvbiBiaW5kKGZ1bmMsIGNvbnRleHQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3VtZW50cyk7XG4gIH07XG59XG5cbnZhciBMZXRoYXJneSA9IGxldGhhcmd5LkxldGhhcmd5O1xuXG5cblxudmFyIEVWVF9JRCA9ICd2aXJ0dWFsc2Nyb2xsJztcblxudmFyIHNyYyA9IFZpcnR1YWxTY3JvbGw7XG5cbnZhciBrZXlDb2RlcyA9IHtcbiAgICBMRUZUOiAzNyxcbiAgICBVUDogMzgsXG4gICAgUklHSFQ6IDM5LFxuICAgIERPV046IDQwLFxuICAgIFNQQUNFOiAzMlxufTtcblxuZnVuY3Rpb24gVmlydHVhbFNjcm9sbChvcHRpb25zKSB7XG4gICAgYmluZGFsbFN0YW5kYWxvbmUodGhpcywgJ19vbldoZWVsJywgJ19vbk1vdXNlV2hlZWwnLCAnX29uVG91Y2hTdGFydCcsICdfb25Ub3VjaE1vdmUnLCAnX29uS2V5RG93bicpO1xuXG4gICAgdGhpcy5lbCA9IHdpbmRvdztcbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmVsKSB7XG4gICAgICAgIHRoaXMuZWwgPSBvcHRpb25zLmVsO1xuICAgICAgICBkZWxldGUgb3B0aW9ucy5lbDtcbiAgICB9XG4gICAgdGhpcy5vcHRpb25zID0gb2JqZWN0QXNzaWduKHtcbiAgICAgICAgbW91c2VNdWx0aXBsaWVyOiAxLFxuICAgICAgICB0b3VjaE11bHRpcGxpZXI6IDIsXG4gICAgICAgIGZpcmVmb3hNdWx0aXBsaWVyOiAxNSxcbiAgICAgICAga2V5U3RlcDogMTIwLFxuICAgICAgICBwcmV2ZW50VG91Y2g6IGZhbHNlLFxuICAgICAgICB1bnByZXZlbnRUb3VjaENsYXNzOiAndnMtdG91Y2htb3ZlLWFsbG93ZWQnLFxuICAgICAgICBsaW1pdEluZXJ0aWE6IGZhbHNlLFxuICAgICAgICB1c2VLZXlib2FyZDogdHJ1ZSxcbiAgICAgICAgdXNlVG91Y2g6IHRydWVcbiAgICB9LCBvcHRpb25zKTtcblxuICAgIGlmICh0aGlzLm9wdGlvbnMubGltaXRJbmVydGlhKSB0aGlzLl9sZXRoYXJneSA9IG5ldyBMZXRoYXJneSgpO1xuXG4gICAgdGhpcy5fZW1pdHRlciA9IG5ldyB0aW55RW1pdHRlcigpO1xuICAgIHRoaXMuX2V2ZW50ID0ge1xuICAgICAgICB5OiAwLFxuICAgICAgICB4OiAwLFxuICAgICAgICBkZWx0YVg6IDAsXG4gICAgICAgIGRlbHRhWTogMFxuICAgIH07XG4gICAgdGhpcy50b3VjaFN0YXJ0WCA9IG51bGw7XG4gICAgdGhpcy50b3VjaFN0YXJ0WSA9IG51bGw7XG4gICAgdGhpcy5ib2R5VG91Y2hBY3Rpb24gPSBudWxsO1xuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5wYXNzaXZlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5saXN0ZW5lck9wdGlvbnMgPSB7cGFzc2l2ZTogdGhpcy5vcHRpb25zLnBhc3NpdmV9O1xuICAgIH1cbn1cblxuVmlydHVhbFNjcm9sbC5wcm90b3R5cGUuX25vdGlmeSA9IGZ1bmN0aW9uKGUpIHtcbiAgICB2YXIgZXZ0ID0gdGhpcy5fZXZlbnQ7XG4gICAgZXZ0LnggKz0gZXZ0LmRlbHRhWDtcbiAgICBldnQueSArPSBldnQuZGVsdGFZO1xuXG4gICB0aGlzLl9lbWl0dGVyLmVtaXQoRVZUX0lELCB7XG4gICAgICAgIHg6IGV2dC54LFxuICAgICAgICB5OiBldnQueSxcbiAgICAgICAgZGVsdGFYOiBldnQuZGVsdGFYLFxuICAgICAgICBkZWx0YVk6IGV2dC5kZWx0YVksXG4gICAgICAgIG9yaWdpbmFsRXZlbnQ6IGVcbiAgIH0pO1xufTtcblxuVmlydHVhbFNjcm9sbC5wcm90b3R5cGUuX29uV2hlZWwgPSBmdW5jdGlvbihlKSB7XG4gICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgaWYgKHRoaXMuX2xldGhhcmd5ICYmIHRoaXMuX2xldGhhcmd5LmNoZWNrKGUpID09PSBmYWxzZSkgcmV0dXJuO1xuICAgIHZhciBldnQgPSB0aGlzLl9ldmVudDtcblxuICAgIC8vIEluIENocm9tZSBhbmQgaW4gRmlyZWZveCAoYXQgbGVhc3QgdGhlIG5ldyBvbmUpXG4gICAgZXZ0LmRlbHRhWCA9IGUud2hlZWxEZWx0YVggfHwgZS5kZWx0YVggKiAtMTtcbiAgICBldnQuZGVsdGFZID0gZS53aGVlbERlbHRhWSB8fCBlLmRlbHRhWSAqIC0xO1xuXG4gICAgLy8gZm9yIG91ciBwdXJwb3NlIGRlbHRhbW9kZSA9IDEgbWVhbnMgdXNlciBpcyBvbiBhIHdoZWVsIG1vdXNlLCBub3QgdG91Y2ggcGFkXG4gICAgLy8gcmVhbCBtZWFuaW5nOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvV2hlZWxFdmVudCNEZWx0YV9tb2Rlc1xuICAgIGlmKHN1cHBvcnQuaXNGaXJlZm94ICYmIGUuZGVsdGFNb2RlID09IDEpIHtcbiAgICAgICAgZXZ0LmRlbHRhWCAqPSBvcHRpb25zLmZpcmVmb3hNdWx0aXBsaWVyO1xuICAgICAgICBldnQuZGVsdGFZICo9IG9wdGlvbnMuZmlyZWZveE11bHRpcGxpZXI7XG4gICAgfVxuXG4gICAgZXZ0LmRlbHRhWCAqPSBvcHRpb25zLm1vdXNlTXVsdGlwbGllcjtcbiAgICBldnQuZGVsdGFZICo9IG9wdGlvbnMubW91c2VNdWx0aXBsaWVyO1xuXG4gICAgdGhpcy5fbm90aWZ5KGUpO1xufTtcblxuVmlydHVhbFNjcm9sbC5wcm90b3R5cGUuX29uTW91c2VXaGVlbCA9IGZ1bmN0aW9uKGUpIHtcbiAgICBpZiAodGhpcy5vcHRpb25zLmxpbWl0SW5lcnRpYSAmJiB0aGlzLl9sZXRoYXJneS5jaGVjayhlKSA9PT0gZmFsc2UpIHJldHVybjtcblxuICAgIHZhciBldnQgPSB0aGlzLl9ldmVudDtcblxuICAgIC8vIEluIFNhZmFyaSwgSUUgYW5kIGluIENocm9tZSBpZiAnd2hlZWwnIGlzbid0IGRlZmluZWRcbiAgICBldnQuZGVsdGFYID0gKGUud2hlZWxEZWx0YVgpID8gZS53aGVlbERlbHRhWCA6IDA7XG4gICAgZXZ0LmRlbHRhWSA9IChlLndoZWVsRGVsdGFZKSA/IGUud2hlZWxEZWx0YVkgOiBlLndoZWVsRGVsdGE7XG5cbiAgICB0aGlzLl9ub3RpZnkoZSk7XG59O1xuXG5WaXJ0dWFsU2Nyb2xsLnByb3RvdHlwZS5fb25Ub3VjaFN0YXJ0ID0gZnVuY3Rpb24oZSkge1xuICAgIHZhciB0ID0gKGUudGFyZ2V0VG91Y2hlcykgPyBlLnRhcmdldFRvdWNoZXNbMF0gOiBlO1xuICAgIHRoaXMudG91Y2hTdGFydFggPSB0LnBhZ2VYO1xuICAgIHRoaXMudG91Y2hTdGFydFkgPSB0LnBhZ2VZO1xufTtcblxuVmlydHVhbFNjcm9sbC5wcm90b3R5cGUuX29uVG91Y2hNb3ZlID0gZnVuY3Rpb24oZSkge1xuICAgIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgIGlmKG9wdGlvbnMucHJldmVudFRvdWNoXG4gICAgICAgICYmICFlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMob3B0aW9ucy51bnByZXZlbnRUb3VjaENsYXNzKSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgdmFyIGV2dCA9IHRoaXMuX2V2ZW50O1xuXG4gICAgdmFyIHQgPSAoZS50YXJnZXRUb3VjaGVzKSA/IGUudGFyZ2V0VG91Y2hlc1swXSA6IGU7XG5cbiAgICBldnQuZGVsdGFYID0gKHQucGFnZVggLSB0aGlzLnRvdWNoU3RhcnRYKSAqIG9wdGlvbnMudG91Y2hNdWx0aXBsaWVyO1xuICAgIGV2dC5kZWx0YVkgPSAodC5wYWdlWSAtIHRoaXMudG91Y2hTdGFydFkpICogb3B0aW9ucy50b3VjaE11bHRpcGxpZXI7XG5cbiAgICB0aGlzLnRvdWNoU3RhcnRYID0gdC5wYWdlWDtcbiAgICB0aGlzLnRvdWNoU3RhcnRZID0gdC5wYWdlWTtcblxuICAgIHRoaXMuX25vdGlmeShlKTtcbn07XG5cblZpcnR1YWxTY3JvbGwucHJvdG90eXBlLl9vbktleURvd24gPSBmdW5jdGlvbihlKSB7XG4gICAgdmFyIGV2dCA9IHRoaXMuX2V2ZW50O1xuICAgIGV2dC5kZWx0YVggPSBldnQuZGVsdGFZID0gMDtcbiAgICB2YXIgd2luZG93SGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0IC0gNDA7XG5cbiAgICBzd2l0Y2goZS5rZXlDb2RlKSB7XG4gICAgICAgIGNhc2Uga2V5Q29kZXMuTEVGVDpcbiAgICAgICAgY2FzZSBrZXlDb2Rlcy5VUDpcbiAgICAgICAgICAgIGV2dC5kZWx0YVkgPSB0aGlzLm9wdGlvbnMua2V5U3RlcDtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2Uga2V5Q29kZXMuUklHSFQ6XG4gICAgICAgIGNhc2Uga2V5Q29kZXMuRE9XTjpcbiAgICAgICAgICAgIGV2dC5kZWx0YVkgPSAtIHRoaXMub3B0aW9ucy5rZXlTdGVwO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgIGUuc2hpZnRLZXk6XG4gICAgICAgICAgICBldnQuZGVsdGFZID0gd2luZG93SGVpZ2h0O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2Uga2V5Q29kZXMuU1BBQ0U6XG4gICAgICAgICAgICBldnQuZGVsdGFZID0gLSB3aW5kb3dIZWlnaHQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9ub3RpZnkoZSk7XG59O1xuXG5WaXJ0dWFsU2Nyb2xsLnByb3RvdHlwZS5fYmluZCA9IGZ1bmN0aW9uKCkge1xuICAgIGlmKHN1cHBvcnQuaGFzV2hlZWxFdmVudCkgdGhpcy5lbC5hZGRFdmVudExpc3RlbmVyKCd3aGVlbCcsIHRoaXMuX29uV2hlZWwsIHRoaXMubGlzdGVuZXJPcHRpb25zKTtcbiAgICBpZihzdXBwb3J0Lmhhc01vdXNlV2hlZWxFdmVudCkgdGhpcy5lbC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXdoZWVsJywgdGhpcy5fb25Nb3VzZVdoZWVsLCB0aGlzLmxpc3RlbmVyT3B0aW9ucyk7XG5cbiAgICBpZihzdXBwb3J0Lmhhc1RvdWNoICYmIHRoaXMub3B0aW9ucy51c2VUb3VjaCkge1xuICAgICAgICB0aGlzLmVsLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLl9vblRvdWNoU3RhcnQsIHRoaXMubGlzdGVuZXJPcHRpb25zKTtcbiAgICAgICAgdGhpcy5lbC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCB0aGlzLl9vblRvdWNoTW92ZSwgdGhpcy5saXN0ZW5lck9wdGlvbnMpO1xuICAgIH1cblxuICAgIGlmKHN1cHBvcnQuaGFzUG9pbnRlciAmJiBzdXBwb3J0Lmhhc1RvdWNoV2luKSB7XG4gICAgICAgIHRoaXMuYm9keVRvdWNoQWN0aW9uID0gZG9jdW1lbnQuYm9keS5zdHlsZS5tc1RvdWNoQWN0aW9uO1xuICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLm1zVG91Y2hBY3Rpb24gPSAnbm9uZSc7XG4gICAgICAgIHRoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcignTVNQb2ludGVyRG93bicsIHRoaXMuX29uVG91Y2hTdGFydCwgdHJ1ZSk7XG4gICAgICAgIHRoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcignTVNQb2ludGVyTW92ZScsIHRoaXMuX29uVG91Y2hNb3ZlLCB0cnVlKTtcbiAgICB9XG5cbiAgICBpZihzdXBwb3J0Lmhhc0tleURvd24gJiYgdGhpcy5vcHRpb25zLnVzZUtleWJvYXJkKSBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5fb25LZXlEb3duKTtcbn07XG5cblZpcnR1YWxTY3JvbGwucHJvdG90eXBlLl91bmJpbmQgPSBmdW5jdGlvbigpIHtcbiAgICBpZihzdXBwb3J0Lmhhc1doZWVsRXZlbnQpIHRoaXMuZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignd2hlZWwnLCB0aGlzLl9vbldoZWVsKTtcbiAgICBpZihzdXBwb3J0Lmhhc01vdXNlV2hlZWxFdmVudCkgdGhpcy5lbC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXdoZWVsJywgdGhpcy5fb25Nb3VzZVdoZWVsKTtcblxuICAgIGlmKHN1cHBvcnQuaGFzVG91Y2gpIHtcbiAgICAgICAgdGhpcy5lbC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5fb25Ub3VjaFN0YXJ0KTtcbiAgICAgICAgdGhpcy5lbC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCB0aGlzLl9vblRvdWNoTW92ZSk7XG4gICAgfVxuXG4gICAgaWYoc3VwcG9ydC5oYXNQb2ludGVyICYmIHN1cHBvcnQuaGFzVG91Y2hXaW4pIHtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5tc1RvdWNoQWN0aW9uID0gdGhpcy5ib2R5VG91Y2hBY3Rpb247XG4gICAgICAgIHRoaXMuZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignTVNQb2ludGVyRG93bicsIHRoaXMuX29uVG91Y2hTdGFydCwgdHJ1ZSk7XG4gICAgICAgIHRoaXMuZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignTVNQb2ludGVyTW92ZScsIHRoaXMuX29uVG91Y2hNb3ZlLCB0cnVlKTtcbiAgICB9XG5cbiAgICBpZihzdXBwb3J0Lmhhc0tleURvd24gJiYgdGhpcy5vcHRpb25zLnVzZUtleWJvYXJkKSBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5fb25LZXlEb3duKTtcbn07XG5cblZpcnR1YWxTY3JvbGwucHJvdG90eXBlLm9uID0gZnVuY3Rpb24oY2IsIGN0eCkge1xuICB0aGlzLl9lbWl0dGVyLm9uKEVWVF9JRCwgY2IsIGN0eCk7XG5cbiAgdmFyIGV2ZW50cyA9IHRoaXMuX2VtaXR0ZXIuZTtcbiAgaWYgKGV2ZW50cyAmJiBldmVudHNbRVZUX0lEXSAmJiBldmVudHNbRVZUX0lEXS5sZW5ndGggPT09IDEpIHRoaXMuX2JpbmQoKTtcbn07XG5cblZpcnR1YWxTY3JvbGwucHJvdG90eXBlLm9mZiA9IGZ1bmN0aW9uKGNiLCBjdHgpIHtcbiAgdGhpcy5fZW1pdHRlci5vZmYoRVZUX0lELCBjYiwgY3R4KTtcblxuICB2YXIgZXZlbnRzID0gdGhpcy5fZW1pdHRlci5lO1xuICBpZiAoIWV2ZW50c1tFVlRfSURdIHx8IGV2ZW50c1tFVlRfSURdLmxlbmd0aCA8PSAwKSB0aGlzLl91bmJpbmQoKTtcbn07XG5cblZpcnR1YWxTY3JvbGwucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGV2dCA9IHRoaXMuX2V2ZW50O1xuICAgIGV2dC54ID0gMDtcbiAgICBldnQueSA9IDA7XG59O1xuXG5WaXJ0dWFsU2Nyb2xsLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fZW1pdHRlci5vZmYoKTtcbiAgICB0aGlzLl91bmJpbmQoKTtcbn07XG5cbmZ1bmN0aW9uIGxlcnAoc3RhcnQsIGVuZCwgYW10KSB7XG4gIHJldHVybiAoMSAtIGFtdCkgKiBzdGFydCArIGFtdCAqIGVuZDtcbn1cblxuZnVuY3Rpb24gZ2V0VHJhbnNsYXRlKGVsKSB7XG4gIHZhciB0cmFuc2xhdGUgPSB7fTtcbiAgaWYgKCF3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSkgcmV0dXJuO1xuICB2YXIgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGVsKTtcbiAgdmFyIHRyYW5zZm9ybSA9IHN0eWxlLnRyYW5zZm9ybSB8fCBzdHlsZS53ZWJraXRUcmFuc2Zvcm0gfHwgc3R5bGUubW96VHJhbnNmb3JtO1xuICB2YXIgbWF0ID0gdHJhbnNmb3JtLm1hdGNoKC9ebWF0cml4M2RcXCgoLispXFwpJC8pO1xuXG4gIGlmIChtYXQpIHtcbiAgICB0cmFuc2xhdGUueCA9IG1hdCA/IHBhcnNlRmxvYXQobWF0WzFdLnNwbGl0KCcsICcpWzEyXSkgOiAwO1xuICAgIHRyYW5zbGF0ZS55ID0gbWF0ID8gcGFyc2VGbG9hdChtYXRbMV0uc3BsaXQoJywgJylbMTNdKSA6IDA7XG4gIH0gZWxzZSB7XG4gICAgbWF0ID0gdHJhbnNmb3JtLm1hdGNoKC9ebWF0cml4XFwoKC4rKVxcKSQvKTtcbiAgICB0cmFuc2xhdGUueCA9IG1hdCA/IHBhcnNlRmxvYXQobWF0WzFdLnNwbGl0KCcsICcpWzRdKSA6IDA7XG4gICAgdHJhbnNsYXRlLnkgPSBtYXQgPyBwYXJzZUZsb2F0KG1hdFsxXS5zcGxpdCgnLCAnKVs1XSkgOiAwO1xuICB9XG5cbiAgcmV0dXJuIHRyYW5zbGF0ZTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGFuIGFycmF5IGNvbnRhaW5pbmcgYWxsIHRoZSBwYXJlbnQgbm9kZXMgb2YgdGhlIGdpdmVuIG5vZGVcbiAqIEBwYXJhbSAge29iamVjdH0gbm9kZVxuICogQHJldHVybiB7YXJyYXl9IHBhcmVudCBub2Rlc1xuICovXG5mdW5jdGlvbiBnZXRQYXJlbnRzKGVsZW0pIHtcbiAgLy8gU2V0IHVwIGEgcGFyZW50IGFycmF5XG4gIHZhciBwYXJlbnRzID0gW107IC8vIFB1c2ggZWFjaCBwYXJlbnQgZWxlbWVudCB0byB0aGUgYXJyYXlcblxuICBmb3IgKDsgZWxlbSAmJiBlbGVtICE9PSBkb2N1bWVudDsgZWxlbSA9IGVsZW0ucGFyZW50Tm9kZSkge1xuICAgIHBhcmVudHMucHVzaChlbGVtKTtcbiAgfSAvLyBSZXR1cm4gb3VyIHBhcmVudCBhcnJheVxuXG5cbiAgcmV0dXJuIHBhcmVudHM7XG59IC8vIGh0dHBzOi8vZ29tYWtldGhpbmdzLmNvbS9ob3ctdG8tZ2V0LXRoZS1jbG9zZXN0LXBhcmVudC1lbGVtZW50LXdpdGgtYS1tYXRjaGluZy1zZWxlY3Rvci11c2luZy12YW5pbGxhLWphdmFzY3JpcHQvXG5cbi8qKlxuICogaHR0cHM6Ly9naXRodWIuY29tL2dyZS9iZXppZXItZWFzaW5nXG4gKiBCZXppZXJFYXNpbmcgLSB1c2UgYmV6aWVyIGN1cnZlIGZvciB0cmFuc2l0aW9uIGVhc2luZyBmdW5jdGlvblxuICogYnkgR2HDq3RhbiBSZW5hdWRlYXUgMjAxNCAtIDIwMTUg4oCTIE1JVCBMaWNlbnNlXG4gKi9cblxuLy8gVGhlc2UgdmFsdWVzIGFyZSBlc3RhYmxpc2hlZCBieSBlbXBpcmljaXNtIHdpdGggdGVzdHMgKHRyYWRlb2ZmOiBwZXJmb3JtYW5jZSBWUyBwcmVjaXNpb24pXG52YXIgTkVXVE9OX0lURVJBVElPTlMgPSA0O1xudmFyIE5FV1RPTl9NSU5fU0xPUEUgPSAwLjAwMTtcbnZhciBTVUJESVZJU0lPTl9QUkVDSVNJT04gPSAwLjAwMDAwMDE7XG52YXIgU1VCRElWSVNJT05fTUFYX0lURVJBVElPTlMgPSAxMDtcblxudmFyIGtTcGxpbmVUYWJsZVNpemUgPSAxMTtcbnZhciBrU2FtcGxlU3RlcFNpemUgPSAxLjAgLyAoa1NwbGluZVRhYmxlU2l6ZSAtIDEuMCk7XG5cbnZhciBmbG9hdDMyQXJyYXlTdXBwb3J0ZWQgPSB0eXBlb2YgRmxvYXQzMkFycmF5ID09PSAnZnVuY3Rpb24nO1xuXG5mdW5jdGlvbiBBIChhQTEsIGFBMikgeyByZXR1cm4gMS4wIC0gMy4wICogYUEyICsgMy4wICogYUExOyB9XG5mdW5jdGlvbiBCIChhQTEsIGFBMikgeyByZXR1cm4gMy4wICogYUEyIC0gNi4wICogYUExOyB9XG5mdW5jdGlvbiBDIChhQTEpICAgICAgeyByZXR1cm4gMy4wICogYUExOyB9XG5cbi8vIFJldHVybnMgeCh0KSBnaXZlbiB0LCB4MSwgYW5kIHgyLCBvciB5KHQpIGdpdmVuIHQsIHkxLCBhbmQgeTIuXG5mdW5jdGlvbiBjYWxjQmV6aWVyIChhVCwgYUExLCBhQTIpIHsgcmV0dXJuICgoQShhQTEsIGFBMikgKiBhVCArIEIoYUExLCBhQTIpKSAqIGFUICsgQyhhQTEpKSAqIGFUOyB9XG5cbi8vIFJldHVybnMgZHgvZHQgZ2l2ZW4gdCwgeDEsIGFuZCB4Miwgb3IgZHkvZHQgZ2l2ZW4gdCwgeTEsIGFuZCB5Mi5cbmZ1bmN0aW9uIGdldFNsb3BlIChhVCwgYUExLCBhQTIpIHsgcmV0dXJuIDMuMCAqIEEoYUExLCBhQTIpICogYVQgKiBhVCArIDIuMCAqIEIoYUExLCBhQTIpICogYVQgKyBDKGFBMSk7IH1cblxuZnVuY3Rpb24gYmluYXJ5U3ViZGl2aWRlIChhWCwgYUEsIGFCLCBtWDEsIG1YMikge1xuICB2YXIgY3VycmVudFgsIGN1cnJlbnRULCBpID0gMDtcbiAgZG8ge1xuICAgIGN1cnJlbnRUID0gYUEgKyAoYUIgLSBhQSkgLyAyLjA7XG4gICAgY3VycmVudFggPSBjYWxjQmV6aWVyKGN1cnJlbnRULCBtWDEsIG1YMikgLSBhWDtcbiAgICBpZiAoY3VycmVudFggPiAwLjApIHtcbiAgICAgIGFCID0gY3VycmVudFQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFBID0gY3VycmVudFQ7XG4gICAgfVxuICB9IHdoaWxlIChNYXRoLmFicyhjdXJyZW50WCkgPiBTVUJESVZJU0lPTl9QUkVDSVNJT04gJiYgKytpIDwgU1VCRElWSVNJT05fTUFYX0lURVJBVElPTlMpO1xuICByZXR1cm4gY3VycmVudFQ7XG59XG5cbmZ1bmN0aW9uIG5ld3RvblJhcGhzb25JdGVyYXRlIChhWCwgYUd1ZXNzVCwgbVgxLCBtWDIpIHtcbiBmb3IgKHZhciBpID0gMDsgaSA8IE5FV1RPTl9JVEVSQVRJT05TOyArK2kpIHtcbiAgIHZhciBjdXJyZW50U2xvcGUgPSBnZXRTbG9wZShhR3Vlc3NULCBtWDEsIG1YMik7XG4gICBpZiAoY3VycmVudFNsb3BlID09PSAwLjApIHtcbiAgICAgcmV0dXJuIGFHdWVzc1Q7XG4gICB9XG4gICB2YXIgY3VycmVudFggPSBjYWxjQmV6aWVyKGFHdWVzc1QsIG1YMSwgbVgyKSAtIGFYO1xuICAgYUd1ZXNzVCAtPSBjdXJyZW50WCAvIGN1cnJlbnRTbG9wZTtcbiB9XG4gcmV0dXJuIGFHdWVzc1Q7XG59XG5cbmZ1bmN0aW9uIExpbmVhckVhc2luZyAoeCkge1xuICByZXR1cm4geDtcbn1cblxudmFyIHNyYyQxID0gZnVuY3Rpb24gYmV6aWVyIChtWDEsIG1ZMSwgbVgyLCBtWTIpIHtcbiAgaWYgKCEoMCA8PSBtWDEgJiYgbVgxIDw9IDEgJiYgMCA8PSBtWDIgJiYgbVgyIDw9IDEpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdiZXppZXIgeCB2YWx1ZXMgbXVzdCBiZSBpbiBbMCwgMV0gcmFuZ2UnKTtcbiAgfVxuXG4gIGlmIChtWDEgPT09IG1ZMSAmJiBtWDIgPT09IG1ZMikge1xuICAgIHJldHVybiBMaW5lYXJFYXNpbmc7XG4gIH1cblxuICAvLyBQcmVjb21wdXRlIHNhbXBsZXMgdGFibGVcbiAgdmFyIHNhbXBsZVZhbHVlcyA9IGZsb2F0MzJBcnJheVN1cHBvcnRlZCA/IG5ldyBGbG9hdDMyQXJyYXkoa1NwbGluZVRhYmxlU2l6ZSkgOiBuZXcgQXJyYXkoa1NwbGluZVRhYmxlU2l6ZSk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwga1NwbGluZVRhYmxlU2l6ZTsgKytpKSB7XG4gICAgc2FtcGxlVmFsdWVzW2ldID0gY2FsY0JlemllcihpICoga1NhbXBsZVN0ZXBTaXplLCBtWDEsIG1YMik7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRURm9yWCAoYVgpIHtcbiAgICB2YXIgaW50ZXJ2YWxTdGFydCA9IDAuMDtcbiAgICB2YXIgY3VycmVudFNhbXBsZSA9IDE7XG4gICAgdmFyIGxhc3RTYW1wbGUgPSBrU3BsaW5lVGFibGVTaXplIC0gMTtcblxuICAgIGZvciAoOyBjdXJyZW50U2FtcGxlICE9PSBsYXN0U2FtcGxlICYmIHNhbXBsZVZhbHVlc1tjdXJyZW50U2FtcGxlXSA8PSBhWDsgKytjdXJyZW50U2FtcGxlKSB7XG4gICAgICBpbnRlcnZhbFN0YXJ0ICs9IGtTYW1wbGVTdGVwU2l6ZTtcbiAgICB9XG4gICAgLS1jdXJyZW50U2FtcGxlO1xuXG4gICAgLy8gSW50ZXJwb2xhdGUgdG8gcHJvdmlkZSBhbiBpbml0aWFsIGd1ZXNzIGZvciB0XG4gICAgdmFyIGRpc3QgPSAoYVggLSBzYW1wbGVWYWx1ZXNbY3VycmVudFNhbXBsZV0pIC8gKHNhbXBsZVZhbHVlc1tjdXJyZW50U2FtcGxlICsgMV0gLSBzYW1wbGVWYWx1ZXNbY3VycmVudFNhbXBsZV0pO1xuICAgIHZhciBndWVzc0ZvclQgPSBpbnRlcnZhbFN0YXJ0ICsgZGlzdCAqIGtTYW1wbGVTdGVwU2l6ZTtcblxuICAgIHZhciBpbml0aWFsU2xvcGUgPSBnZXRTbG9wZShndWVzc0ZvclQsIG1YMSwgbVgyKTtcbiAgICBpZiAoaW5pdGlhbFNsb3BlID49IE5FV1RPTl9NSU5fU0xPUEUpIHtcbiAgICAgIHJldHVybiBuZXd0b25SYXBoc29uSXRlcmF0ZShhWCwgZ3Vlc3NGb3JULCBtWDEsIG1YMik7XG4gICAgfSBlbHNlIGlmIChpbml0aWFsU2xvcGUgPT09IDAuMCkge1xuICAgICAgcmV0dXJuIGd1ZXNzRm9yVDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGJpbmFyeVN1YmRpdmlkZShhWCwgaW50ZXJ2YWxTdGFydCwgaW50ZXJ2YWxTdGFydCArIGtTYW1wbGVTdGVwU2l6ZSwgbVgxLCBtWDIpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBCZXppZXJFYXNpbmcgKHgpIHtcbiAgICAvLyBCZWNhdXNlIEphdmFTY3JpcHQgbnVtYmVyIGFyZSBpbXByZWNpc2UsIHdlIHNob3VsZCBndWFyYW50ZWUgdGhlIGV4dHJlbWVzIGFyZSByaWdodC5cbiAgICBpZiAoeCA9PT0gMCkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGlmICh4ID09PSAxKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gICAgcmV0dXJuIGNhbGNCZXppZXIoZ2V0VEZvclgoeCksIG1ZMSwgbVkyKTtcbiAgfTtcbn07XG5cbnZhciBrZXlDb2RlcyQxID0ge1xuICBMRUZUOiAzNyxcbiAgVVA6IDM4LFxuICBSSUdIVDogMzksXG4gIERPV046IDQwLFxuICBTUEFDRTogMzIsXG4gIFRBQjogOSxcbiAgUEFHRVVQOiAzMyxcbiAgUEFHRURPV046IDM0LFxuICBIT01FOiAzNixcbiAgRU5EOiAzNVxufTtcblxudmFyIF9kZWZhdWx0JDIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Db3JlKSB7XG4gIF9pbmhlcml0cyhfZGVmYXVsdCwgX0NvcmUpO1xuXG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoX2RlZmF1bHQpO1xuXG4gIGZ1bmN0aW9uIF9kZWZhdWx0KCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBfZGVmYXVsdCk7XG5cbiAgICBpZiAoaGlzdG9yeS5zY3JvbGxSZXN0b3JhdGlvbikge1xuICAgICAgaGlzdG9yeS5zY3JvbGxSZXN0b3JhdGlvbiA9ICdtYW51YWwnO1xuICAgIH1cblxuICAgIHdpbmRvdy5zY3JvbGxUbygwLCAwKTtcbiAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuICAgIGlmIChfdGhpcy5pbmVydGlhKSBfdGhpcy5sZXJwID0gX3RoaXMuaW5lcnRpYSAqIDAuMTtcbiAgICBfdGhpcy5pc1Njcm9sbGluZyA9IGZhbHNlO1xuICAgIF90aGlzLmlzRHJhZ2dpbmdTY3JvbGxiYXIgPSBmYWxzZTtcbiAgICBfdGhpcy5pc1RpY2tpbmcgPSBmYWxzZTtcbiAgICBfdGhpcy5oYXNTY3JvbGxUaWNraW5nID0gZmFsc2U7XG4gICAgX3RoaXMucGFyYWxsYXhFbGVtZW50cyA9IHt9O1xuICAgIF90aGlzLnN0b3AgPSBmYWxzZTtcbiAgICBfdGhpcy5zY3JvbGxiYXJDb250YWluZXIgPSBvcHRpb25zLnNjcm9sbGJhckNvbnRhaW5lcjtcbiAgICBfdGhpcy5jaGVja0tleSA9IF90aGlzLmNoZWNrS2V5LmJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgX3RoaXMuY2hlY2tLZXksIGZhbHNlKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoX2RlZmF1bHQsIFt7XG4gICAga2V5OiBcImluaXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB0aGlzLmh0bWwuY2xhc3NMaXN0LmFkZCh0aGlzLnNtb290aENsYXNzKTtcbiAgICAgIHRoaXMuaHRtbC5zZXRBdHRyaWJ1dGUoXCJkYXRhLVwiLmNvbmNhdCh0aGlzLm5hbWUsIFwiLWRpcmVjdGlvblwiKSwgdGhpcy5kaXJlY3Rpb24pO1xuICAgICAgdGhpcy5pbnN0YW5jZSA9IF9vYmplY3RTcHJlYWQyKHtcbiAgICAgICAgZGVsdGE6IHtcbiAgICAgICAgICB4OiB0aGlzLmluaXRQb3NpdGlvbi54LFxuICAgICAgICAgIHk6IHRoaXMuaW5pdFBvc2l0aW9uLnlcbiAgICAgICAgfSxcbiAgICAgICAgc2Nyb2xsOiB7XG4gICAgICAgICAgeDogdGhpcy5pbml0UG9zaXRpb24ueCxcbiAgICAgICAgICB5OiB0aGlzLmluaXRQb3NpdGlvbi55XG4gICAgICAgIH1cbiAgICAgIH0sIHRoaXMuaW5zdGFuY2UpO1xuICAgICAgdGhpcy52cyA9IG5ldyBzcmMoe1xuICAgICAgICBlbDogdGhpcy5zY3JvbGxGcm9tQW55d2hlcmUgPyBkb2N1bWVudCA6IHRoaXMuZWwsXG4gICAgICAgIG1vdXNlTXVsdGlwbGllcjogbmF2aWdhdG9yLnBsYXRmb3JtLmluZGV4T2YoJ1dpbicpID4gLTEgPyAxIDogMC40LFxuICAgICAgICBmaXJlZm94TXVsdGlwbGllcjogdGhpcy5maXJlZm94TXVsdGlwbGllcixcbiAgICAgICAgdG91Y2hNdWx0aXBsaWVyOiB0aGlzLnRvdWNoTXVsdGlwbGllcixcbiAgICAgICAgdXNlS2V5Ym9hcmQ6IGZhbHNlLFxuICAgICAgICBwYXNzaXZlOiB0cnVlXG4gICAgICB9KTtcbiAgICAgIHRoaXMudnMub24oZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgaWYgKF90aGlzMi5zdG9wKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFfdGhpczIuaXNEcmFnZ2luZ1Njcm9sbGJhcikge1xuICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpczIudXBkYXRlRGVsdGEoZSk7XG5cbiAgICAgICAgICAgIGlmICghX3RoaXMyLmlzU2Nyb2xsaW5nKSBfdGhpczIuc3RhcnRTY3JvbGxpbmcoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICB0aGlzLnNldFNjcm9sbExpbWl0KCk7XG4gICAgICB0aGlzLmluaXRTY3JvbGxCYXIoKTtcbiAgICAgIHRoaXMuYWRkU2VjdGlvbnMoKTtcbiAgICAgIHRoaXMuYWRkRWxlbWVudHMoKTtcbiAgICAgIHRoaXMuY2hlY2tTY3JvbGwodHJ1ZSk7XG4gICAgICB0aGlzLnRyYW5zZm9ybUVsZW1lbnRzKHRydWUsIHRydWUpO1xuXG4gICAgICBfZ2V0KF9nZXRQcm90b3R5cGVPZihfZGVmYXVsdC5wcm90b3R5cGUpLCBcImluaXRcIiwgdGhpcykuY2FsbCh0aGlzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2V0U2Nyb2xsTGltaXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0U2Nyb2xsTGltaXQoKSB7XG4gICAgICB0aGlzLmluc3RhbmNlLmxpbWl0LnkgPSB0aGlzLmVsLm9mZnNldEhlaWdodCAtIHRoaXMud2luZG93SGVpZ2h0O1xuXG4gICAgICBpZiAodGhpcy5kaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJykge1xuICAgICAgICB2YXIgdG90YWxXaWR0aCA9IDA7XG4gICAgICAgIHZhciBub2RlcyA9IHRoaXMuZWwuY2hpbGRyZW47XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHRvdGFsV2lkdGggKz0gbm9kZXNbaV0ub2Zmc2V0V2lkdGg7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmluc3RhbmNlLmxpbWl0LnggPSB0b3RhbFdpZHRoIC0gdGhpcy53aW5kb3dXaWR0aDtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic3RhcnRTY3JvbGxpbmdcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3RhcnRTY3JvbGxpbmcoKSB7XG4gICAgICB0aGlzLnN0YXJ0U2Nyb2xsVHMgPSBEYXRlLm5vdygpOyAvLyBSZWNvcmQgdGltZXN0YW1wXG5cbiAgICAgIHRoaXMuaXNTY3JvbGxpbmcgPSB0cnVlO1xuICAgICAgdGhpcy5jaGVja1Njcm9sbCgpO1xuICAgICAgdGhpcy5odG1sLmNsYXNzTGlzdC5hZGQodGhpcy5zY3JvbGxpbmdDbGFzcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInN0b3BTY3JvbGxpbmdcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3RvcFNjcm9sbGluZygpIHtcbiAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuY2hlY2tTY3JvbGxSYWYpOyAvLyBQcmV2ZW50IGNoZWNrU2Nyb2xsIHRvIGNvbnRpbnVlIGxvb3BpbmdcbiAgICAgIC8vUGV2ZW50IHNjcm9sbGJhciBnbGl0Y2gvbG9ja2luZ1xuXG4gICAgICB0aGlzLnN0YXJ0U2Nyb2xsVHMgPSB1bmRlZmluZWQ7XG5cbiAgICAgIGlmICh0aGlzLnNjcm9sbFRvUmFmKSB7XG4gICAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuc2Nyb2xsVG9SYWYpO1xuICAgICAgICB0aGlzLnNjcm9sbFRvUmFmID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5pc1Njcm9sbGluZyA9IGZhbHNlO1xuICAgICAgdGhpcy5pbnN0YW5jZS5zY3JvbGwueSA9IE1hdGgucm91bmQodGhpcy5pbnN0YW5jZS5zY3JvbGwueSk7XG4gICAgICB0aGlzLmh0bWwuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLnNjcm9sbGluZ0NsYXNzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY2hlY2tLZXlcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2hlY2tLZXkoZSkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIGlmICh0aGlzLnN0b3ApIHtcbiAgICAgICAgLy8gSWYgd2UgYXJlIHN0b3BwZWQsIHdlIGRvbid0IHdhbnQgYW55IHNjcm9sbCB0byBvY2N1ciBiZWNhdXNlIG9mIGEga2V5cHJlc3NcbiAgICAgICAgLy8gUHJldmVudCB0YWIgdG8gc2Nyb2xsIHRvIGFjdGl2ZUVsZW1lbnRcbiAgICAgICAgaWYgKGUua2V5Q29kZSA9PSBrZXlDb2RlcyQxLlRBQikge1xuICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvLyBNYWtlIHN1cmUgbmF0aXZlIHNjcm9sbCBpcyBhbHdheXMgYXQgdG9wIG9mIHBhZ2VcbiAgICAgICAgICAgIF90aGlzMy5odG1sLnNjcm9sbFRvcCA9IDA7XG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCA9IDA7XG4gICAgICAgICAgICBfdGhpczMuaHRtbC5zY3JvbGxMZWZ0ID0gMDtcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc2Nyb2xsTGVmdCA9IDA7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHN3aXRjaCAoZS5rZXlDb2RlKSB7XG4gICAgICAgIGNhc2Uga2V5Q29kZXMkMS5UQUI6XG4gICAgICAgICAgLy8gRG8gbm90IHJlbW92ZSB0aGUgUkFGXG4gICAgICAgICAgLy8gSXQgYWxsb3dzIHRvIG92ZXJyaWRlIHRoZSBicm93c2VyJ3MgbmF0aXZlIHNjcm9sbFRvLCB3aGljaCBpcyBlc3NlbnRpYWxcbiAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gTWFrZSBzdXJlIG5hdGl2ZSBzY3JvbGwgaXMgYWx3YXlzIGF0IHRvcCBvZiBwYWdlXG4gICAgICAgICAgICBfdGhpczMuaHRtbC5zY3JvbGxUb3AgPSAwO1xuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5zY3JvbGxUb3AgPSAwO1xuICAgICAgICAgICAgX3RoaXMzLmh0bWwuc2Nyb2xsTGVmdCA9IDA7XG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LnNjcm9sbExlZnQgPSAwOyAvLyBSZXF1ZXN0IHNjcm9sbFRvIG9uIHRoZSBmb2N1c2VkRWxlbWVudCwgcHV0dGluZyBpdCBhdCB0aGUgY2VudGVyIG9mIHRoZSBzY3JlZW5cblxuICAgICAgICAgICAgX3RoaXMzLnNjcm9sbFRvKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQsIHtcbiAgICAgICAgICAgICAgb2Zmc2V0OiAtd2luZG93LmlubmVySGVpZ2h0IC8gMlxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBrZXlDb2RlcyQxLlVQOlxuICAgICAgICAgIGlmICh0aGlzLmlzQWN0aXZlRWxlbWVudFNjcm9sbFNlbnNpdGl2ZSgpKSB7XG4gICAgICAgICAgICB0aGlzLmluc3RhbmNlLmRlbHRhW3RoaXMuZGlyZWN0aW9uQXhpc10gLT0gMjQwO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2Uga2V5Q29kZXMkMS5ET1dOOlxuICAgICAgICAgIGlmICh0aGlzLmlzQWN0aXZlRWxlbWVudFNjcm9sbFNlbnNpdGl2ZSgpKSB7XG4gICAgICAgICAgICB0aGlzLmluc3RhbmNlLmRlbHRhW3RoaXMuZGlyZWN0aW9uQXhpc10gKz0gMjQwO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2Uga2V5Q29kZXMkMS5QQUdFVVA6XG4gICAgICAgICAgdGhpcy5pbnN0YW5jZS5kZWx0YVt0aGlzLmRpcmVjdGlvbkF4aXNdIC09IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIGtleUNvZGVzJDEuUEFHRURPV046XG4gICAgICAgICAgdGhpcy5pbnN0YW5jZS5kZWx0YVt0aGlzLmRpcmVjdGlvbkF4aXNdICs9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIGtleUNvZGVzJDEuSE9NRTpcbiAgICAgICAgICB0aGlzLmluc3RhbmNlLmRlbHRhW3RoaXMuZGlyZWN0aW9uQXhpc10gLT0gdGhpcy5pbnN0YW5jZS5saW1pdFt0aGlzLmRpcmVjdGlvbkF4aXNdO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2Uga2V5Q29kZXMkMS5FTkQ6XG4gICAgICAgICAgdGhpcy5pbnN0YW5jZS5kZWx0YVt0aGlzLmRpcmVjdGlvbkF4aXNdICs9IHRoaXMuaW5zdGFuY2UubGltaXRbdGhpcy5kaXJlY3Rpb25BeGlzXTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIGtleUNvZGVzJDEuU1BBQ0U6XG4gICAgICAgICAgaWYgKHRoaXMuaXNBY3RpdmVFbGVtZW50U2Nyb2xsU2Vuc2l0aXZlKCkpIHtcbiAgICAgICAgICAgIGlmIChlLnNoaWZ0S2V5KSB7XG4gICAgICAgICAgICAgIHRoaXMuaW5zdGFuY2UuZGVsdGFbdGhpcy5kaXJlY3Rpb25BeGlzXSAtPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLmluc3RhbmNlLmRlbHRhW3RoaXMuZGlyZWN0aW9uQXhpc10gKz0gd2luZG93LmlubmVySGVpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5pbnN0YW5jZS5kZWx0YVt0aGlzLmRpcmVjdGlvbkF4aXNdIDwgMCkgdGhpcy5pbnN0YW5jZS5kZWx0YVt0aGlzLmRpcmVjdGlvbkF4aXNdID0gMDtcbiAgICAgIGlmICh0aGlzLmluc3RhbmNlLmRlbHRhW3RoaXMuZGlyZWN0aW9uQXhpc10gPiB0aGlzLmluc3RhbmNlLmxpbWl0W3RoaXMuZGlyZWN0aW9uQXhpc10pIHRoaXMuaW5zdGFuY2UuZGVsdGFbdGhpcy5kaXJlY3Rpb25BeGlzXSA9IHRoaXMuaW5zdGFuY2UubGltaXRbdGhpcy5kaXJlY3Rpb25BeGlzXTtcbiAgICAgIHRoaXMuc3RvcFNjcm9sbGluZygpOyAvLyBTdG9wIGFueSBtb3ZlbWVudCwgYWxsb3dzIHRvIGtpbGwgYW55IG90aGVyIGBzY3JvbGxUb2Agc3RpbGwgaGFwcGVuaW5nXG5cbiAgICAgIHRoaXMuaXNTY3JvbGxpbmcgPSB0cnVlO1xuICAgICAgdGhpcy5jaGVja1Njcm9sbCgpO1xuICAgICAgdGhpcy5odG1sLmNsYXNzTGlzdC5hZGQodGhpcy5zY3JvbGxpbmdDbGFzcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImlzQWN0aXZlRWxlbWVudFNjcm9sbFNlbnNpdGl2ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpc0FjdGl2ZUVsZW1lbnRTY3JvbGxTZW5zaXRpdmUoKSB7XG4gICAgICByZXR1cm4gIShkb2N1bWVudC5hY3RpdmVFbGVtZW50IGluc3RhbmNlb2YgSFRNTElucHV0RWxlbWVudCkgJiYgIShkb2N1bWVudC5hY3RpdmVFbGVtZW50IGluc3RhbmNlb2YgSFRNTFRleHRBcmVhRWxlbWVudCkgJiYgIShkb2N1bWVudC5hY3RpdmVFbGVtZW50IGluc3RhbmNlb2YgSFRNTEJ1dHRvbkVsZW1lbnQpICYmICEoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBpbnN0YW5jZW9mIEhUTUxTZWxlY3RFbGVtZW50KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY2hlY2tTY3JvbGxcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2hlY2tTY3JvbGwoKSB7XG4gICAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgICAgdmFyIGZvcmNlZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZmFsc2U7XG5cbiAgICAgIGlmIChmb3JjZWQgfHwgdGhpcy5pc1Njcm9sbGluZyB8fCB0aGlzLmlzRHJhZ2dpbmdTY3JvbGxiYXIpIHtcbiAgICAgICAgaWYgKCF0aGlzLmhhc1Njcm9sbFRpY2tpbmcpIHtcbiAgICAgICAgICB0aGlzLmNoZWNrU2Nyb2xsUmFmID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpczQuY2hlY2tTY3JvbGwoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB0aGlzLmhhc1Njcm9sbFRpY2tpbmcgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy51cGRhdGVTY3JvbGwoKTtcbiAgICAgICAgdmFyIGRpc3RhbmNlID0gTWF0aC5hYnModGhpcy5pbnN0YW5jZS5kZWx0YVt0aGlzLmRpcmVjdGlvbkF4aXNdIC0gdGhpcy5pbnN0YW5jZS5zY3JvbGxbdGhpcy5kaXJlY3Rpb25BeGlzXSk7XG4gICAgICAgIHZhciB0aW1lU2luY2VTdGFydCA9IERhdGUubm93KCkgLSB0aGlzLnN0YXJ0U2Nyb2xsVHM7IC8vIEdldCB0aGUgdGltZSBzaW5jZSB0aGUgc2Nyb2xsIHdhcyBzdGFydGVkOiB0aGUgc2Nyb2xsIGNhbiBiZSBzdG9wcGVkIGFnYWluIG9ubHkgcGFzdCAxMDBtc1xuXG4gICAgICAgIGlmICghdGhpcy5hbmltYXRpbmdTY3JvbGwgJiYgdGltZVNpbmNlU3RhcnQgPiAxMDAgJiYgKGRpc3RhbmNlIDwgMC41ICYmIHRoaXMuaW5zdGFuY2UuZGVsdGFbdGhpcy5kaXJlY3Rpb25BeGlzXSAhPSAwIHx8IGRpc3RhbmNlIDwgMC41ICYmIHRoaXMuaW5zdGFuY2UuZGVsdGFbdGhpcy5kaXJlY3Rpb25BeGlzXSA9PSAwKSkge1xuICAgICAgICAgIHRoaXMuc3RvcFNjcm9sbGluZygpO1xuICAgICAgICB9XG5cbiAgICAgICAgT2JqZWN0LmVudHJpZXModGhpcy5zZWN0aW9ucykuZm9yRWFjaChmdW5jdGlvbiAoX3JlZikge1xuICAgICAgICAgIHZhciBfcmVmMiA9IF9zbGljZWRUb0FycmF5KF9yZWYsIDIpLFxuICAgICAgICAgICAgICBpID0gX3JlZjJbMF0sXG4gICAgICAgICAgICAgIHNlY3Rpb24gPSBfcmVmMlsxXTtcblxuICAgICAgICAgIGlmIChzZWN0aW9uLnBlcnNpc3RlbnQgfHwgX3RoaXM0Lmluc3RhbmNlLnNjcm9sbFtfdGhpczQuZGlyZWN0aW9uQXhpc10gPiBzZWN0aW9uLm9mZnNldFtfdGhpczQuZGlyZWN0aW9uQXhpc10gJiYgX3RoaXM0Lmluc3RhbmNlLnNjcm9sbFtfdGhpczQuZGlyZWN0aW9uQXhpc10gPCBzZWN0aW9uLmxpbWl0W190aGlzNC5kaXJlY3Rpb25BeGlzXSkge1xuICAgICAgICAgICAgaWYgKF90aGlzNC5kaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJykge1xuICAgICAgICAgICAgICBfdGhpczQudHJhbnNmb3JtKHNlY3Rpb24uZWwsIC1fdGhpczQuaW5zdGFuY2Uuc2Nyb2xsW190aGlzNC5kaXJlY3Rpb25BeGlzXSwgMCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBfdGhpczQudHJhbnNmb3JtKHNlY3Rpb24uZWwsIDAsIC1fdGhpczQuaW5zdGFuY2Uuc2Nyb2xsW190aGlzNC5kaXJlY3Rpb25BeGlzXSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghc2VjdGlvbi5pblZpZXcpIHtcbiAgICAgICAgICAgICAgc2VjdGlvbi5pblZpZXcgPSB0cnVlO1xuICAgICAgICAgICAgICBzZWN0aW9uLmVsLnN0eWxlLm9wYWNpdHkgPSAxO1xuICAgICAgICAgICAgICBzZWN0aW9uLmVsLnN0eWxlLnBvaW50ZXJFdmVudHMgPSAnYWxsJztcbiAgICAgICAgICAgICAgc2VjdGlvbi5lbC5zZXRBdHRyaWJ1dGUoXCJkYXRhLVwiLmNvbmNhdChfdGhpczQubmFtZSwgXCItc2VjdGlvbi1pbnZpZXdcIiksICcnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHNlY3Rpb24uaW5WaWV3IHx8IGZvcmNlZCkge1xuICAgICAgICAgICAgICBzZWN0aW9uLmluVmlldyA9IGZhbHNlO1xuICAgICAgICAgICAgICBzZWN0aW9uLmVsLnN0eWxlLm9wYWNpdHkgPSAwO1xuICAgICAgICAgICAgICBzZWN0aW9uLmVsLnN0eWxlLnBvaW50ZXJFdmVudHMgPSAnbm9uZSc7XG4gICAgICAgICAgICAgIHNlY3Rpb24uZWwucmVtb3ZlQXR0cmlidXRlKFwiZGF0YS1cIi5jb25jYXQoX3RoaXM0Lm5hbWUsIFwiLXNlY3Rpb24taW52aWV3XCIpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgX3RoaXM0LnRyYW5zZm9ybShzZWN0aW9uLmVsLCAwLCAwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICh0aGlzLmdldERpcmVjdGlvbikge1xuICAgICAgICAgIHRoaXMuYWRkRGlyZWN0aW9uKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5nZXRTcGVlZCkge1xuICAgICAgICAgIHRoaXMuYWRkU3BlZWQoKTtcbiAgICAgICAgICB0aGlzLnNwZWVkVHMgPSBEYXRlLm5vdygpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5kZXRlY3RFbGVtZW50cygpO1xuICAgICAgICB0aGlzLnRyYW5zZm9ybUVsZW1lbnRzKCk7XG5cbiAgICAgICAgaWYgKHRoaXMuaGFzU2Nyb2xsYmFyKSB7XG4gICAgICAgICAgdmFyIHNjcm9sbEJhclRyYW5zbGF0aW9uID0gdGhpcy5pbnN0YW5jZS5zY3JvbGxbdGhpcy5kaXJlY3Rpb25BeGlzXSAvIHRoaXMuaW5zdGFuY2UubGltaXRbdGhpcy5kaXJlY3Rpb25BeGlzXSAqIHRoaXMuc2Nyb2xsQmFyTGltaXRbdGhpcy5kaXJlY3Rpb25BeGlzXTtcblxuICAgICAgICAgIGlmICh0aGlzLmRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnKSB7XG4gICAgICAgICAgICB0aGlzLnRyYW5zZm9ybSh0aGlzLnNjcm9sbGJhclRodW1iLCBzY3JvbGxCYXJUcmFuc2xhdGlvbiwgMCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudHJhbnNmb3JtKHRoaXMuc2Nyb2xsYmFyVGh1bWIsIDAsIHNjcm9sbEJhclRyYW5zbGF0aW9uKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBfZ2V0KF9nZXRQcm90b3R5cGVPZihfZGVmYXVsdC5wcm90b3R5cGUpLCBcImNoZWNrU2Nyb2xsXCIsIHRoaXMpLmNhbGwodGhpcyk7XG5cbiAgICAgICAgdGhpcy5oYXNTY3JvbGxUaWNraW5nID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlc2l6ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXNpemUoKSB7XG4gICAgICB0aGlzLndpbmRvd0hlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICAgIHRoaXMud2luZG93V2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICAgIHRoaXMuY2hlY2tDb250ZXh0KCk7XG4gICAgICB0aGlzLndpbmRvd01pZGRsZSA9IHtcbiAgICAgICAgeDogdGhpcy53aW5kb3dXaWR0aCAvIDIsXG4gICAgICAgIHk6IHRoaXMud2luZG93SGVpZ2h0IC8gMlxuICAgICAgfTtcbiAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInVwZGF0ZURlbHRhXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZURlbHRhKGUpIHtcbiAgICAgIHZhciBkZWx0YTtcbiAgICAgIHZhciBnZXN0dXJlRGlyZWN0aW9uID0gdGhpc1t0aGlzLmNvbnRleHRdICYmIHRoaXNbdGhpcy5jb250ZXh0XS5nZXN0dXJlRGlyZWN0aW9uID8gdGhpc1t0aGlzLmNvbnRleHRdLmdlc3R1cmVEaXJlY3Rpb24gOiB0aGlzLmdlc3R1cmVEaXJlY3Rpb247XG5cbiAgICAgIGlmIChnZXN0dXJlRGlyZWN0aW9uID09PSAnYm90aCcpIHtcbiAgICAgICAgZGVsdGEgPSBlLmRlbHRhWCArIGUuZGVsdGFZO1xuICAgICAgfSBlbHNlIGlmIChnZXN0dXJlRGlyZWN0aW9uID09PSAndmVydGljYWwnKSB7XG4gICAgICAgIGRlbHRhID0gZS5kZWx0YVk7XG4gICAgICB9IGVsc2UgaWYgKGdlc3R1cmVEaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJykge1xuICAgICAgICBkZWx0YSA9IGUuZGVsdGFYO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVsdGEgPSBlLmRlbHRhWTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5pbnN0YW5jZS5kZWx0YVt0aGlzLmRpcmVjdGlvbkF4aXNdIC09IGRlbHRhICogdGhpcy5tdWx0aXBsaWVyO1xuICAgICAgaWYgKHRoaXMuaW5zdGFuY2UuZGVsdGFbdGhpcy5kaXJlY3Rpb25BeGlzXSA8IDApIHRoaXMuaW5zdGFuY2UuZGVsdGFbdGhpcy5kaXJlY3Rpb25BeGlzXSA9IDA7XG4gICAgICBpZiAodGhpcy5pbnN0YW5jZS5kZWx0YVt0aGlzLmRpcmVjdGlvbkF4aXNdID4gdGhpcy5pbnN0YW5jZS5saW1pdFt0aGlzLmRpcmVjdGlvbkF4aXNdKSB0aGlzLmluc3RhbmNlLmRlbHRhW3RoaXMuZGlyZWN0aW9uQXhpc10gPSB0aGlzLmluc3RhbmNlLmxpbWl0W3RoaXMuZGlyZWN0aW9uQXhpc107XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInVwZGF0ZVNjcm9sbFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVTY3JvbGwoZSkge1xuICAgICAgaWYgKHRoaXMuaXNTY3JvbGxpbmcgfHwgdGhpcy5pc0RyYWdnaW5nU2Nyb2xsYmFyKSB7XG4gICAgICAgIHRoaXMuaW5zdGFuY2Uuc2Nyb2xsW3RoaXMuZGlyZWN0aW9uQXhpc10gPSBsZXJwKHRoaXMuaW5zdGFuY2Uuc2Nyb2xsW3RoaXMuZGlyZWN0aW9uQXhpc10sIHRoaXMuaW5zdGFuY2UuZGVsdGFbdGhpcy5kaXJlY3Rpb25BeGlzXSwgdGhpcy5sZXJwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0aGlzLmluc3RhbmNlLnNjcm9sbFt0aGlzLmRpcmVjdGlvbkF4aXNdID4gdGhpcy5pbnN0YW5jZS5saW1pdFt0aGlzLmRpcmVjdGlvbkF4aXNdKSB7XG4gICAgICAgICAgdGhpcy5zZXRTY3JvbGwodGhpcy5pbnN0YW5jZS5zY3JvbGxbdGhpcy5kaXJlY3Rpb25BeGlzXSwgdGhpcy5pbnN0YW5jZS5saW1pdFt0aGlzLmRpcmVjdGlvbkF4aXNdKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmluc3RhbmNlLnNjcm9sbC55IDwgMCkge1xuICAgICAgICAgIHRoaXMuc2V0U2Nyb2xsKHRoaXMuaW5zdGFuY2Uuc2Nyb2xsW3RoaXMuZGlyZWN0aW9uQXhpc10sIDApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuc2V0U2Nyb2xsKHRoaXMuaW5zdGFuY2Uuc2Nyb2xsW3RoaXMuZGlyZWN0aW9uQXhpc10sIHRoaXMuaW5zdGFuY2UuZGVsdGFbdGhpcy5kaXJlY3Rpb25BeGlzXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiYWRkRGlyZWN0aW9uXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZERpcmVjdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLmluc3RhbmNlLmRlbHRhLnkgPiB0aGlzLmluc3RhbmNlLnNjcm9sbC55KSB7XG4gICAgICAgIGlmICh0aGlzLmluc3RhbmNlLmRpcmVjdGlvbiAhPT0gJ2Rvd24nKSB7XG4gICAgICAgICAgdGhpcy5pbnN0YW5jZS5kaXJlY3Rpb24gPSAnZG93bic7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodGhpcy5pbnN0YW5jZS5kZWx0YS55IDwgdGhpcy5pbnN0YW5jZS5zY3JvbGwueSkge1xuICAgICAgICBpZiAodGhpcy5pbnN0YW5jZS5kaXJlY3Rpb24gIT09ICd1cCcpIHtcbiAgICAgICAgICB0aGlzLmluc3RhbmNlLmRpcmVjdGlvbiA9ICd1cCc7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuaW5zdGFuY2UuZGVsdGEueCA+IHRoaXMuaW5zdGFuY2Uuc2Nyb2xsLngpIHtcbiAgICAgICAgaWYgKHRoaXMuaW5zdGFuY2UuZGlyZWN0aW9uICE9PSAncmlnaHQnKSB7XG4gICAgICAgICAgdGhpcy5pbnN0YW5jZS5kaXJlY3Rpb24gPSAncmlnaHQnO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuaW5zdGFuY2UuZGVsdGEueCA8IHRoaXMuaW5zdGFuY2Uuc2Nyb2xsLngpIHtcbiAgICAgICAgaWYgKHRoaXMuaW5zdGFuY2UuZGlyZWN0aW9uICE9PSAnbGVmdCcpIHtcbiAgICAgICAgICB0aGlzLmluc3RhbmNlLmRpcmVjdGlvbiA9ICdsZWZ0JztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJhZGRTcGVlZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRTcGVlZCgpIHtcbiAgICAgIGlmICh0aGlzLmluc3RhbmNlLmRlbHRhW3RoaXMuZGlyZWN0aW9uQXhpc10gIT0gdGhpcy5pbnN0YW5jZS5zY3JvbGxbdGhpcy5kaXJlY3Rpb25BeGlzXSkge1xuICAgICAgICB0aGlzLmluc3RhbmNlLnNwZWVkID0gKHRoaXMuaW5zdGFuY2UuZGVsdGFbdGhpcy5kaXJlY3Rpb25BeGlzXSAtIHRoaXMuaW5zdGFuY2Uuc2Nyb2xsW3RoaXMuZGlyZWN0aW9uQXhpc10pIC8gTWF0aC5tYXgoMSwgRGF0ZS5ub3coKSAtIHRoaXMuc3BlZWRUcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmluc3RhbmNlLnNwZWVkID0gMDtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiaW5pdFNjcm9sbEJhclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0U2Nyb2xsQmFyKCkge1xuICAgICAgdGhpcy5zY3JvbGxiYXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICB0aGlzLnNjcm9sbGJhclRodW1iID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgdGhpcy5zY3JvbGxiYXIuY2xhc3NMaXN0LmFkZChcIlwiLmNvbmNhdCh0aGlzLnNjcm9sbGJhckNsYXNzKSk7XG4gICAgICB0aGlzLnNjcm9sbGJhclRodW1iLmNsYXNzTGlzdC5hZGQoXCJcIi5jb25jYXQodGhpcy5zY3JvbGxiYXJDbGFzcywgXCJfdGh1bWJcIikpO1xuICAgICAgdGhpcy5zY3JvbGxiYXIuYXBwZW5kKHRoaXMuc2Nyb2xsYmFyVGh1bWIpO1xuXG4gICAgICBpZiAodGhpcy5zY3JvbGxiYXJDb250YWluZXIpIHtcbiAgICAgICAgdGhpcy5zY3JvbGxiYXJDb250YWluZXIuYXBwZW5kKHRoaXMuc2Nyb2xsYmFyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kKHRoaXMuc2Nyb2xsYmFyKTtcbiAgICAgIH0gLy8gU2Nyb2xsYmFyIEV2ZW50c1xuXG5cbiAgICAgIHRoaXMuZ2V0U2Nyb2xsQmFyID0gdGhpcy5nZXRTY3JvbGxCYXIuYmluZCh0aGlzKTtcbiAgICAgIHRoaXMucmVsZWFzZVNjcm9sbEJhciA9IHRoaXMucmVsZWFzZVNjcm9sbEJhci5iaW5kKHRoaXMpO1xuICAgICAgdGhpcy5tb3ZlU2Nyb2xsQmFyID0gdGhpcy5tb3ZlU2Nyb2xsQmFyLmJpbmQodGhpcyk7XG4gICAgICB0aGlzLnNjcm9sbGJhclRodW1iLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHRoaXMuZ2V0U2Nyb2xsQmFyKTtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5yZWxlYXNlU2Nyb2xsQmFyKTtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLm1vdmVTY3JvbGxCYXIpOyAvLyBTZXQgc2Nyb2xsYmFyIHZhbHVlc1xuXG4gICAgICB0aGlzLmhhc1Njcm9sbGJhciA9IGZhbHNlO1xuXG4gICAgICBpZiAodGhpcy5kaXJlY3Rpb24gPT0gJ2hvcml6b250YWwnKSB7XG4gICAgICAgIGlmICh0aGlzLmluc3RhbmNlLmxpbWl0LnggKyB0aGlzLndpbmRvd1dpZHRoIDw9IHRoaXMud2luZG93V2lkdGgpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0aGlzLmluc3RhbmNlLmxpbWl0LnkgKyB0aGlzLndpbmRvd0hlaWdodCA8PSB0aGlzLndpbmRvd0hlaWdodCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLmhhc1Njcm9sbGJhciA9IHRydWU7XG4gICAgICB0aGlzLnNjcm9sbGJhckJDUiA9IHRoaXMuc2Nyb2xsYmFyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgdGhpcy5zY3JvbGxiYXJIZWlnaHQgPSB0aGlzLnNjcm9sbGJhckJDUi5oZWlnaHQ7XG4gICAgICB0aGlzLnNjcm9sbGJhcldpZHRoID0gdGhpcy5zY3JvbGxiYXJCQ1Iud2lkdGg7XG5cbiAgICAgIGlmICh0aGlzLmRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnKSB7XG4gICAgICAgIHRoaXMuc2Nyb2xsYmFyVGh1bWIuc3R5bGUud2lkdGggPSBcIlwiLmNvbmNhdCh0aGlzLnNjcm9sbGJhcldpZHRoICogdGhpcy5zY3JvbGxiYXJXaWR0aCAvICh0aGlzLmluc3RhbmNlLmxpbWl0LnggKyB0aGlzLnNjcm9sbGJhcldpZHRoKSwgXCJweFwiKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc2Nyb2xsYmFyVGh1bWIuc3R5bGUuaGVpZ2h0ID0gXCJcIi5jb25jYXQodGhpcy5zY3JvbGxiYXJIZWlnaHQgKiB0aGlzLnNjcm9sbGJhckhlaWdodCAvICh0aGlzLmluc3RhbmNlLmxpbWl0LnkgKyB0aGlzLnNjcm9sbGJhckhlaWdodCksIFwicHhcIik7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2Nyb2xsYmFyVGh1bWJCQ1IgPSB0aGlzLnNjcm9sbGJhclRodW1iLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgdGhpcy5zY3JvbGxCYXJMaW1pdCA9IHtcbiAgICAgICAgeDogdGhpcy5zY3JvbGxiYXJXaWR0aCAtIHRoaXMuc2Nyb2xsYmFyVGh1bWJCQ1Iud2lkdGgsXG4gICAgICAgIHk6IHRoaXMuc2Nyb2xsYmFySGVpZ2h0IC0gdGhpcy5zY3JvbGxiYXJUaHVtYkJDUi5oZWlnaHRcbiAgICAgIH07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlaW5pdFNjcm9sbEJhclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZWluaXRTY3JvbGxCYXIoKSB7XG4gICAgICB0aGlzLmhhc1Njcm9sbGJhciA9IGZhbHNlO1xuXG4gICAgICBpZiAodGhpcy5kaXJlY3Rpb24gPT0gJ2hvcml6b250YWwnKSB7XG4gICAgICAgIGlmICh0aGlzLmluc3RhbmNlLmxpbWl0LnggKyB0aGlzLndpbmRvd1dpZHRoIDw9IHRoaXMud2luZG93V2lkdGgpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0aGlzLmluc3RhbmNlLmxpbWl0LnkgKyB0aGlzLndpbmRvd0hlaWdodCA8PSB0aGlzLndpbmRvd0hlaWdodCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLmhhc1Njcm9sbGJhciA9IHRydWU7XG4gICAgICB0aGlzLnNjcm9sbGJhckJDUiA9IHRoaXMuc2Nyb2xsYmFyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgdGhpcy5zY3JvbGxiYXJIZWlnaHQgPSB0aGlzLnNjcm9sbGJhckJDUi5oZWlnaHQ7XG4gICAgICB0aGlzLnNjcm9sbGJhcldpZHRoID0gdGhpcy5zY3JvbGxiYXJCQ1Iud2lkdGg7XG5cbiAgICAgIGlmICh0aGlzLmRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnKSB7XG4gICAgICAgIHRoaXMuc2Nyb2xsYmFyVGh1bWIuc3R5bGUud2lkdGggPSBcIlwiLmNvbmNhdCh0aGlzLnNjcm9sbGJhcldpZHRoICogdGhpcy5zY3JvbGxiYXJXaWR0aCAvICh0aGlzLmluc3RhbmNlLmxpbWl0LnggKyB0aGlzLnNjcm9sbGJhcldpZHRoKSwgXCJweFwiKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc2Nyb2xsYmFyVGh1bWIuc3R5bGUuaGVpZ2h0ID0gXCJcIi5jb25jYXQodGhpcy5zY3JvbGxiYXJIZWlnaHQgKiB0aGlzLnNjcm9sbGJhckhlaWdodCAvICh0aGlzLmluc3RhbmNlLmxpbWl0LnkgKyB0aGlzLnNjcm9sbGJhckhlaWdodCksIFwicHhcIik7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2Nyb2xsYmFyVGh1bWJCQ1IgPSB0aGlzLnNjcm9sbGJhclRodW1iLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgdGhpcy5zY3JvbGxCYXJMaW1pdCA9IHtcbiAgICAgICAgeDogdGhpcy5zY3JvbGxiYXJXaWR0aCAtIHRoaXMuc2Nyb2xsYmFyVGh1bWJCQ1Iud2lkdGgsXG4gICAgICAgIHk6IHRoaXMuc2Nyb2xsYmFySGVpZ2h0IC0gdGhpcy5zY3JvbGxiYXJUaHVtYkJDUi5oZWlnaHRcbiAgICAgIH07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImRlc3Ryb3lTY3JvbGxCYXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveVNjcm9sbEJhcigpIHtcbiAgICAgIHRoaXMuc2Nyb2xsYmFyVGh1bWIucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5nZXRTY3JvbGxCYXIpO1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCB0aGlzLnJlbGVhc2VTY3JvbGxCYXIpO1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMubW92ZVNjcm9sbEJhcik7XG4gICAgICB0aGlzLnNjcm9sbGJhci5yZW1vdmUoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0U2Nyb2xsQmFyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFNjcm9sbEJhcihlKSB7XG4gICAgICB0aGlzLmlzRHJhZ2dpbmdTY3JvbGxiYXIgPSB0cnVlO1xuICAgICAgdGhpcy5jaGVja1Njcm9sbCgpO1xuICAgICAgdGhpcy5odG1sLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5zY3JvbGxpbmdDbGFzcyk7XG4gICAgICB0aGlzLmh0bWwuY2xhc3NMaXN0LmFkZCh0aGlzLmRyYWdnaW5nQ2xhc3MpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZWxlYXNlU2Nyb2xsQmFyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbGVhc2VTY3JvbGxCYXIoZSkge1xuICAgICAgdGhpcy5pc0RyYWdnaW5nU2Nyb2xsYmFyID0gZmFsc2U7XG5cbiAgICAgIGlmICh0aGlzLmlzU2Nyb2xsaW5nKSB7XG4gICAgICAgIHRoaXMuaHRtbC5jbGFzc0xpc3QuYWRkKHRoaXMuc2Nyb2xsaW5nQ2xhc3MpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmh0bWwuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLmRyYWdnaW5nQ2xhc3MpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJtb3ZlU2Nyb2xsQmFyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG1vdmVTY3JvbGxCYXIoZSkge1xuICAgICAgdmFyIF90aGlzNSA9IHRoaXM7XG5cbiAgICAgIGlmICh0aGlzLmlzRHJhZ2dpbmdTY3JvbGxiYXIpIHtcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgeCA9IChlLmNsaWVudFggLSBfdGhpczUuc2Nyb2xsYmFyQkNSLmxlZnQpICogMTAwIC8gX3RoaXM1LnNjcm9sbGJhcldpZHRoICogX3RoaXM1Lmluc3RhbmNlLmxpbWl0LnggLyAxMDA7XG4gICAgICAgICAgdmFyIHkgPSAoZS5jbGllbnRZIC0gX3RoaXM1LnNjcm9sbGJhckJDUi50b3ApICogMTAwIC8gX3RoaXM1LnNjcm9sbGJhckhlaWdodCAqIF90aGlzNS5pbnN0YW5jZS5saW1pdC55IC8gMTAwO1xuXG4gICAgICAgICAgaWYgKHkgPiAwICYmIHkgPCBfdGhpczUuaW5zdGFuY2UubGltaXQueSkge1xuICAgICAgICAgICAgX3RoaXM1Lmluc3RhbmNlLmRlbHRhLnkgPSB5O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh4ID4gMCAmJiB4IDwgX3RoaXM1Lmluc3RhbmNlLmxpbWl0LngpIHtcbiAgICAgICAgICAgIF90aGlzNS5pbnN0YW5jZS5kZWx0YS54ID0geDtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJhZGRFbGVtZW50c1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRFbGVtZW50cygpIHtcbiAgICAgIHZhciBfdGhpczYgPSB0aGlzO1xuXG4gICAgICB0aGlzLmVscyA9IHt9O1xuICAgICAgdGhpcy5wYXJhbGxheEVsZW1lbnRzID0ge307IC8vIHRoaXMuc2VjdGlvbnMuZm9yRWFjaCgoc2VjdGlvbiwgeSkgPT4ge1xuXG4gICAgICB2YXIgZWxzID0gdGhpcy5lbC5xdWVyeVNlbGVjdG9yQWxsKFwiW2RhdGEtXCIuY29uY2F0KHRoaXMubmFtZSwgXCJdXCIpKTtcbiAgICAgIGVscy5mb3JFYWNoKGZ1bmN0aW9uIChlbCwgaW5kZXgpIHtcbiAgICAgICAgLy8gVHJ5IGFuZCBmaW5kIHRoZSB0YXJnZXQncyBwYXJlbnQgc2VjdGlvblxuICAgICAgICB2YXIgdGFyZ2V0UGFyZW50cyA9IGdldFBhcmVudHMoZWwpO1xuICAgICAgICB2YXIgc2VjdGlvbiA9IE9iamVjdC5lbnRyaWVzKF90aGlzNi5zZWN0aW9ucykubWFwKGZ1bmN0aW9uIChfcmVmMykge1xuICAgICAgICAgIHZhciBfcmVmNCA9IF9zbGljZWRUb0FycmF5KF9yZWYzLCAyKSxcbiAgICAgICAgICAgICAga2V5ID0gX3JlZjRbMF0sXG4gICAgICAgICAgICAgIHNlY3Rpb24gPSBfcmVmNFsxXTtcblxuICAgICAgICAgIHJldHVybiBzZWN0aW9uO1xuICAgICAgICB9KS5maW5kKGZ1bmN0aW9uIChzZWN0aW9uKSB7XG4gICAgICAgICAgcmV0dXJuIHRhcmdldFBhcmVudHMuaW5jbHVkZXMoc2VjdGlvbi5lbCk7XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgY2wgPSBlbC5kYXRhc2V0W190aGlzNi5uYW1lICsgJ0NsYXNzJ10gfHwgX3RoaXM2W1wiY2xhc3NcIl07XG4gICAgICAgIHZhciBpZCA9IHR5cGVvZiBlbC5kYXRhc2V0W190aGlzNi5uYW1lICsgJ0lkJ10gPT09ICdzdHJpbmcnID8gZWwuZGF0YXNldFtfdGhpczYubmFtZSArICdJZCddIDogJ2VsJyArIGluZGV4O1xuICAgICAgICB2YXIgdG9wO1xuICAgICAgICB2YXIgbGVmdDtcbiAgICAgICAgdmFyIHJlcGVhdCA9IGVsLmRhdGFzZXRbX3RoaXM2Lm5hbWUgKyAnUmVwZWF0J107XG4gICAgICAgIHZhciBjYWxsID0gZWwuZGF0YXNldFtfdGhpczYubmFtZSArICdDYWxsJ107XG4gICAgICAgIHZhciBwb3NpdGlvbiA9IGVsLmRhdGFzZXRbX3RoaXM2Lm5hbWUgKyAnUG9zaXRpb24nXTtcbiAgICAgICAgdmFyIGRlbGF5ID0gZWwuZGF0YXNldFtfdGhpczYubmFtZSArICdEZWxheSddO1xuICAgICAgICB2YXIgZGlyZWN0aW9uID0gZWwuZGF0YXNldFtfdGhpczYubmFtZSArICdEaXJlY3Rpb24nXTtcbiAgICAgICAgdmFyIHN0aWNreSA9IHR5cGVvZiBlbC5kYXRhc2V0W190aGlzNi5uYW1lICsgJ1N0aWNreSddID09PSAnc3RyaW5nJztcbiAgICAgICAgdmFyIHNwZWVkID0gZWwuZGF0YXNldFtfdGhpczYubmFtZSArICdTcGVlZCddID8gcGFyc2VGbG9hdChlbC5kYXRhc2V0W190aGlzNi5uYW1lICsgJ1NwZWVkJ10pIC8gMTAgOiBmYWxzZTtcbiAgICAgICAgdmFyIG9mZnNldCA9IHR5cGVvZiBlbC5kYXRhc2V0W190aGlzNi5uYW1lICsgJ09mZnNldCddID09PSAnc3RyaW5nJyA/IGVsLmRhdGFzZXRbX3RoaXM2Lm5hbWUgKyAnT2Zmc2V0J10uc3BsaXQoJywnKSA6IF90aGlzNi5vZmZzZXQ7XG4gICAgICAgIHZhciB0YXJnZXQgPSBlbC5kYXRhc2V0W190aGlzNi5uYW1lICsgJ1RhcmdldCddO1xuICAgICAgICB2YXIgdGFyZ2V0RWw7XG5cbiAgICAgICAgaWYgKHRhcmdldCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdGFyZ2V0RWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiXCIuY29uY2F0KHRhcmdldCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRhcmdldEVsID0gZWw7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdGFyZ2V0RWxCQ1IgPSB0YXJnZXRFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgICAgICBpZiAoc2VjdGlvbiA9PT0gbnVsbCkge1xuICAgICAgICAgIHRvcCA9IHRhcmdldEVsQkNSLnRvcCArIF90aGlzNi5pbnN0YW5jZS5zY3JvbGwueSAtIGdldFRyYW5zbGF0ZSh0YXJnZXRFbCkueTtcbiAgICAgICAgICBsZWZ0ID0gdGFyZ2V0RWxCQ1IubGVmdCArIF90aGlzNi5pbnN0YW5jZS5zY3JvbGwueCAtIGdldFRyYW5zbGF0ZSh0YXJnZXRFbCkueDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoIXNlY3Rpb24uaW5WaWV3KSB7XG4gICAgICAgICAgICB0b3AgPSB0YXJnZXRFbEJDUi50b3AgLSBnZXRUcmFuc2xhdGUoc2VjdGlvbi5lbCkueSAtIGdldFRyYW5zbGF0ZSh0YXJnZXRFbCkueTtcbiAgICAgICAgICAgIGxlZnQgPSB0YXJnZXRFbEJDUi5sZWZ0IC0gZ2V0VHJhbnNsYXRlKHNlY3Rpb24uZWwpLnggLSBnZXRUcmFuc2xhdGUodGFyZ2V0RWwpLng7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRvcCA9IHRhcmdldEVsQkNSLnRvcCArIF90aGlzNi5pbnN0YW5jZS5zY3JvbGwueSAtIGdldFRyYW5zbGF0ZSh0YXJnZXRFbCkueTtcbiAgICAgICAgICAgIGxlZnQgPSB0YXJnZXRFbEJDUi5sZWZ0ICsgX3RoaXM2Lmluc3RhbmNlLnNjcm9sbC54IC0gZ2V0VHJhbnNsYXRlKHRhcmdldEVsKS54O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBib3R0b20gPSB0b3AgKyB0YXJnZXRFbC5vZmZzZXRIZWlnaHQ7XG4gICAgICAgIHZhciByaWdodCA9IGxlZnQgKyB0YXJnZXRFbC5vZmZzZXRXaWR0aDtcbiAgICAgICAgdmFyIG1pZGRsZSA9IHtcbiAgICAgICAgICB4OiAocmlnaHQgLSBsZWZ0KSAvIDIgKyBsZWZ0LFxuICAgICAgICAgIHk6IChib3R0b20gLSB0b3ApIC8gMiArIHRvcFxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChzdGlja3kpIHtcbiAgICAgICAgICB2YXIgZWxCQ1IgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICB2YXIgZWxUb3AgPSBlbEJDUi50b3A7XG4gICAgICAgICAgdmFyIGVsTGVmdCA9IGVsQkNSLmxlZnQ7XG4gICAgICAgICAgdmFyIGVsRGlzdGFuY2UgPSB7XG4gICAgICAgICAgICB4OiBlbExlZnQgLSBsZWZ0LFxuICAgICAgICAgICAgeTogZWxUb3AgLSB0b3BcbiAgICAgICAgICB9O1xuICAgICAgICAgIHRvcCArPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgICAgICAgbGVmdCArPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICAgICAgICBib3R0b20gPSBlbFRvcCArIHRhcmdldEVsLm9mZnNldEhlaWdodCAtIGVsLm9mZnNldEhlaWdodCAtIGVsRGlzdGFuY2VbX3RoaXM2LmRpcmVjdGlvbkF4aXNdO1xuICAgICAgICAgIHJpZ2h0ID0gZWxMZWZ0ICsgdGFyZ2V0RWwub2Zmc2V0V2lkdGggLSBlbC5vZmZzZXRXaWR0aCAtIGVsRGlzdGFuY2VbX3RoaXM2LmRpcmVjdGlvbkF4aXNdO1xuICAgICAgICAgIG1pZGRsZSA9IHtcbiAgICAgICAgICAgIHg6IChyaWdodCAtIGxlZnQpIC8gMiArIGxlZnQsXG4gICAgICAgICAgICB5OiAoYm90dG9tIC0gdG9wKSAvIDIgKyB0b3BcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJlcGVhdCA9PSAnZmFsc2UnKSB7XG4gICAgICAgICAgcmVwZWF0ID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSBpZiAocmVwZWF0ICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJlcGVhdCA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVwZWF0ID0gX3RoaXM2LnJlcGVhdDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciByZWxhdGl2ZU9mZnNldCA9IFswLCAwXTtcblxuICAgICAgICBpZiAob2Zmc2V0KSB7XG4gICAgICAgICAgaWYgKF90aGlzNi5kaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJykge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvZmZzZXQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvZmZzZXRbaV0gPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBpZiAob2Zmc2V0W2ldLmluY2x1ZGVzKCclJykpIHtcbiAgICAgICAgICAgICAgICAgIHJlbGF0aXZlT2Zmc2V0W2ldID0gcGFyc2VJbnQob2Zmc2V0W2ldLnJlcGxhY2UoJyUnLCAnJykgKiBfdGhpczYud2luZG93V2lkdGggLyAxMDApO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICByZWxhdGl2ZU9mZnNldFtpXSA9IHBhcnNlSW50KG9mZnNldFtpXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlbGF0aXZlT2Zmc2V0W2ldID0gb2Zmc2V0W2ldO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxlZnQgPSBsZWZ0ICsgcmVsYXRpdmVPZmZzZXRbMF07XG4gICAgICAgICAgICByaWdodCA9IHJpZ2h0IC0gcmVsYXRpdmVPZmZzZXRbMV07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2Zmc2V0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0W2ldID09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9mZnNldFtpXS5pbmNsdWRlcygnJScpKSB7XG4gICAgICAgICAgICAgICAgICByZWxhdGl2ZU9mZnNldFtpXSA9IHBhcnNlSW50KG9mZnNldFtpXS5yZXBsYWNlKCclJywgJycpICogX3RoaXM2LndpbmRvd0hlaWdodCAvIDEwMCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHJlbGF0aXZlT2Zmc2V0W2ldID0gcGFyc2VJbnQob2Zmc2V0W2ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVsYXRpdmVPZmZzZXRbaV0gPSBvZmZzZXRbaV07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdG9wID0gdG9wICsgcmVsYXRpdmVPZmZzZXRbMF07XG4gICAgICAgICAgICBib3R0b20gPSBib3R0b20gLSByZWxhdGl2ZU9mZnNldFsxXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbWFwcGVkRWwgPSB7XG4gICAgICAgICAgZWw6IGVsLFxuICAgICAgICAgIGlkOiBpZCxcbiAgICAgICAgICBcImNsYXNzXCI6IGNsLFxuICAgICAgICAgIHNlY3Rpb246IHNlY3Rpb24sXG4gICAgICAgICAgdG9wOiB0b3AsXG4gICAgICAgICAgbWlkZGxlOiBtaWRkbGUsXG4gICAgICAgICAgYm90dG9tOiBib3R0b20sXG4gICAgICAgICAgbGVmdDogbGVmdCxcbiAgICAgICAgICByaWdodDogcmlnaHQsXG4gICAgICAgICAgb2Zmc2V0OiBvZmZzZXQsXG4gICAgICAgICAgcHJvZ3Jlc3M6IDAsXG4gICAgICAgICAgcmVwZWF0OiByZXBlYXQsXG4gICAgICAgICAgaW5WaWV3OiBmYWxzZSxcbiAgICAgICAgICBjYWxsOiBjYWxsLFxuICAgICAgICAgIHNwZWVkOiBzcGVlZCxcbiAgICAgICAgICBkZWxheTogZGVsYXksXG4gICAgICAgICAgcG9zaXRpb246IHBvc2l0aW9uLFxuICAgICAgICAgIHRhcmdldDogdGFyZ2V0RWwsXG4gICAgICAgICAgZGlyZWN0aW9uOiBkaXJlY3Rpb24sXG4gICAgICAgICAgc3RpY2t5OiBzdGlja3lcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXM2LmVsc1tpZF0gPSBtYXBwZWRFbDtcblxuICAgICAgICBpZiAoZWwuY2xhc3NMaXN0LmNvbnRhaW5zKGNsKSkge1xuICAgICAgICAgIF90aGlzNi5zZXRJblZpZXcoX3RoaXM2LmVsc1tpZF0sIGlkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzcGVlZCAhPT0gZmFsc2UgfHwgc3RpY2t5KSB7XG4gICAgICAgICAgX3RoaXM2LnBhcmFsbGF4RWxlbWVudHNbaWRdID0gbWFwcGVkRWw7XG4gICAgICAgIH1cbiAgICAgIH0pOyAvLyB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiYWRkU2VjdGlvbnNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkU2VjdGlvbnMoKSB7XG4gICAgICB2YXIgX3RoaXM3ID0gdGhpcztcblxuICAgICAgdGhpcy5zZWN0aW9ucyA9IHt9O1xuICAgICAgdmFyIHNlY3Rpb25zID0gdGhpcy5lbC5xdWVyeVNlbGVjdG9yQWxsKFwiW2RhdGEtXCIuY29uY2F0KHRoaXMubmFtZSwgXCItc2VjdGlvbl1cIikpO1xuXG4gICAgICBpZiAoc2VjdGlvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHNlY3Rpb25zID0gW3RoaXMuZWxdO1xuICAgICAgfVxuXG4gICAgICBzZWN0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChzZWN0aW9uLCBpbmRleCkge1xuICAgICAgICB2YXIgaWQgPSB0eXBlb2Ygc2VjdGlvbi5kYXRhc2V0W190aGlzNy5uYW1lICsgJ0lkJ10gPT09ICdzdHJpbmcnID8gc2VjdGlvbi5kYXRhc2V0W190aGlzNy5uYW1lICsgJ0lkJ10gOiAnc2VjdGlvbicgKyBpbmRleDtcbiAgICAgICAgdmFyIHNlY3Rpb25CQ1IgPSBzZWN0aW9uLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICB2YXIgb2Zmc2V0ID0ge1xuICAgICAgICAgIHg6IHNlY3Rpb25CQ1IubGVmdCAtIHdpbmRvdy5pbm5lcldpZHRoICogMS41IC0gZ2V0VHJhbnNsYXRlKHNlY3Rpb24pLngsXG4gICAgICAgICAgeTogc2VjdGlvbkJDUi50b3AgLSB3aW5kb3cuaW5uZXJIZWlnaHQgKiAxLjUgLSBnZXRUcmFuc2xhdGUoc2VjdGlvbikueVxuICAgICAgICB9O1xuICAgICAgICB2YXIgbGltaXQgPSB7XG4gICAgICAgICAgeDogb2Zmc2V0LnggKyBzZWN0aW9uQkNSLndpZHRoICsgd2luZG93LmlubmVyV2lkdGggKiAyLFxuICAgICAgICAgIHk6IG9mZnNldC55ICsgc2VjdGlvbkJDUi5oZWlnaHQgKyB3aW5kb3cuaW5uZXJIZWlnaHQgKiAyXG4gICAgICAgIH07XG4gICAgICAgIHZhciBwZXJzaXN0ZW50ID0gdHlwZW9mIHNlY3Rpb24uZGF0YXNldFtfdGhpczcubmFtZSArICdQZXJzaXN0ZW50J10gPT09ICdzdHJpbmcnO1xuICAgICAgICBzZWN0aW9uLnNldEF0dHJpYnV0ZSgnZGF0YS1zY3JvbGwtc2VjdGlvbi1pZCcsIGlkKTtcbiAgICAgICAgdmFyIG1hcHBlZFNlY3Rpb24gPSB7XG4gICAgICAgICAgZWw6IHNlY3Rpb24sXG4gICAgICAgICAgb2Zmc2V0OiBvZmZzZXQsXG4gICAgICAgICAgbGltaXQ6IGxpbWl0LFxuICAgICAgICAgIGluVmlldzogZmFsc2UsXG4gICAgICAgICAgcGVyc2lzdGVudDogcGVyc2lzdGVudCxcbiAgICAgICAgICBpZDogaWRcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXM3LnNlY3Rpb25zW2lkXSA9IG1hcHBlZFNlY3Rpb247XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidHJhbnNmb3JtXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRyYW5zZm9ybShlbGVtZW50LCB4LCB5LCBkZWxheSkge1xuICAgICAgdmFyIHRyYW5zZm9ybTtcblxuICAgICAgaWYgKCFkZWxheSkge1xuICAgICAgICB0cmFuc2Zvcm0gPSBcIm1hdHJpeDNkKDEsMCwwLjAwLDAsMC4wMCwxLDAuMDAsMCwwLDAsMSwwLFwiLmNvbmNhdCh4LCBcIixcIikuY29uY2F0KHksIFwiLDAsMSlcIik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgc3RhcnQgPSBnZXRUcmFuc2xhdGUoZWxlbWVudCk7XG4gICAgICAgIHZhciBsZXJwWCA9IGxlcnAoc3RhcnQueCwgeCwgZGVsYXkpO1xuICAgICAgICB2YXIgbGVycFkgPSBsZXJwKHN0YXJ0LnksIHksIGRlbGF5KTtcbiAgICAgICAgdHJhbnNmb3JtID0gXCJtYXRyaXgzZCgxLDAsMC4wMCwwLDAuMDAsMSwwLjAwLDAsMCwwLDEsMCxcIi5jb25jYXQobGVycFgsIFwiLFwiKS5jb25jYXQobGVycFksIFwiLDAsMSlcIik7XG4gICAgICB9XG5cbiAgICAgIGVsZW1lbnQuc3R5bGUud2Via2l0VHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICAgICAgZWxlbWVudC5zdHlsZS5tc1RyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgICAgIGVsZW1lbnQuc3R5bGUudHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ0cmFuc2Zvcm1FbGVtZW50c1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0cmFuc2Zvcm1FbGVtZW50cyhpc0ZvcmNlZCkge1xuICAgICAgdmFyIF90aGlzOCA9IHRoaXM7XG5cbiAgICAgIHZhciBzZXRBbGxFbGVtZW50cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7XG4gICAgICB2YXIgc2Nyb2xsUmlnaHQgPSB0aGlzLmluc3RhbmNlLnNjcm9sbC54ICsgdGhpcy53aW5kb3dXaWR0aDtcbiAgICAgIHZhciBzY3JvbGxCb3R0b20gPSB0aGlzLmluc3RhbmNlLnNjcm9sbC55ICsgdGhpcy53aW5kb3dIZWlnaHQ7XG4gICAgICB2YXIgc2Nyb2xsTWlkZGxlID0ge1xuICAgICAgICB4OiB0aGlzLmluc3RhbmNlLnNjcm9sbC54ICsgdGhpcy53aW5kb3dNaWRkbGUueCxcbiAgICAgICAgeTogdGhpcy5pbnN0YW5jZS5zY3JvbGwueSArIHRoaXMud2luZG93TWlkZGxlLnlcbiAgICAgIH07XG4gICAgICBPYmplY3QuZW50cmllcyh0aGlzLnBhcmFsbGF4RWxlbWVudHMpLmZvckVhY2goZnVuY3Rpb24gKF9yZWY1KSB7XG4gICAgICAgIHZhciBfcmVmNiA9IF9zbGljZWRUb0FycmF5KF9yZWY1LCAyKSxcbiAgICAgICAgICAgIGkgPSBfcmVmNlswXSxcbiAgICAgICAgICAgIGN1cnJlbnQgPSBfcmVmNlsxXTtcblxuICAgICAgICB2YXIgdHJhbnNmb3JtRGlzdGFuY2UgPSBmYWxzZTtcblxuICAgICAgICBpZiAoaXNGb3JjZWQpIHtcbiAgICAgICAgICB0cmFuc2Zvcm1EaXN0YW5jZSA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY3VycmVudC5pblZpZXcgfHwgc2V0QWxsRWxlbWVudHMpIHtcbiAgICAgICAgICBzd2l0Y2ggKGN1cnJlbnQucG9zaXRpb24pIHtcbiAgICAgICAgICAgIGNhc2UgJ3RvcCc6XG4gICAgICAgICAgICAgIHRyYW5zZm9ybURpc3RhbmNlID0gX3RoaXM4Lmluc3RhbmNlLnNjcm9sbFtfdGhpczguZGlyZWN0aW9uQXhpc10gKiAtY3VycmVudC5zcGVlZDtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ2VsZW1lbnRUb3AnOlxuICAgICAgICAgICAgICB0cmFuc2Zvcm1EaXN0YW5jZSA9IChzY3JvbGxCb3R0b20gLSBjdXJyZW50LnRvcCkgKiAtY3VycmVudC5zcGVlZDtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ2JvdHRvbSc6XG4gICAgICAgICAgICAgIHRyYW5zZm9ybURpc3RhbmNlID0gKF90aGlzOC5pbnN0YW5jZS5saW1pdFtfdGhpczguZGlyZWN0aW9uQXhpc10gLSBzY3JvbGxCb3R0b20gKyBfdGhpczgud2luZG93SGVpZ2h0KSAqIGN1cnJlbnQuc3BlZWQ7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICdsZWZ0JzpcbiAgICAgICAgICAgICAgdHJhbnNmb3JtRGlzdGFuY2UgPSBfdGhpczguaW5zdGFuY2Uuc2Nyb2xsW190aGlzOC5kaXJlY3Rpb25BeGlzXSAqIC1jdXJyZW50LnNwZWVkO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAnZWxlbWVudExlZnQnOlxuICAgICAgICAgICAgICB0cmFuc2Zvcm1EaXN0YW5jZSA9IChzY3JvbGxSaWdodCAtIGN1cnJlbnQubGVmdCkgKiAtY3VycmVudC5zcGVlZDtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ3JpZ2h0JzpcbiAgICAgICAgICAgICAgdHJhbnNmb3JtRGlzdGFuY2UgPSAoX3RoaXM4Lmluc3RhbmNlLmxpbWl0W190aGlzOC5kaXJlY3Rpb25BeGlzXSAtIHNjcm9sbFJpZ2h0ICsgX3RoaXM4LndpbmRvd0hlaWdodCkgKiBjdXJyZW50LnNwZWVkO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgdHJhbnNmb3JtRGlzdGFuY2UgPSAoc2Nyb2xsTWlkZGxlW190aGlzOC5kaXJlY3Rpb25BeGlzXSAtIGN1cnJlbnQubWlkZGxlW190aGlzOC5kaXJlY3Rpb25BeGlzXSkgKiAtY3VycmVudC5zcGVlZDtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGN1cnJlbnQuc3RpY2t5KSB7XG4gICAgICAgICAgaWYgKGN1cnJlbnQuaW5WaWV3KSB7XG4gICAgICAgICAgICBpZiAoX3RoaXM4LmRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnKSB7XG4gICAgICAgICAgICAgIHRyYW5zZm9ybURpc3RhbmNlID0gX3RoaXM4Lmluc3RhbmNlLnNjcm9sbC54IC0gY3VycmVudC5sZWZ0ICsgd2luZG93LmlubmVyV2lkdGg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0cmFuc2Zvcm1EaXN0YW5jZSA9IF90aGlzOC5pbnN0YW5jZS5zY3JvbGwueSAtIGN1cnJlbnQudG9wICsgd2luZG93LmlubmVySGVpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoX3RoaXM4LmRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnKSB7XG4gICAgICAgICAgICAgIGlmIChfdGhpczguaW5zdGFuY2Uuc2Nyb2xsLnggPCBjdXJyZW50LmxlZnQgLSB3aW5kb3cuaW5uZXJXaWR0aCAmJiBfdGhpczguaW5zdGFuY2Uuc2Nyb2xsLnggPCBjdXJyZW50LmxlZnQgLSB3aW5kb3cuaW5uZXJXaWR0aCAvIDIpIHtcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm1EaXN0YW5jZSA9IDA7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoX3RoaXM4Lmluc3RhbmNlLnNjcm9sbC54ID4gY3VycmVudC5yaWdodCAmJiBfdGhpczguaW5zdGFuY2Uuc2Nyb2xsLnggPiBjdXJyZW50LnJpZ2h0ICsgMTAwKSB7XG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtRGlzdGFuY2UgPSBjdXJyZW50LnJpZ2h0IC0gY3VycmVudC5sZWZ0ICsgd2luZG93LmlubmVyV2lkdGg7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtRGlzdGFuY2UgPSBmYWxzZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKF90aGlzOC5pbnN0YW5jZS5zY3JvbGwueSA8IGN1cnJlbnQudG9wIC0gd2luZG93LmlubmVySGVpZ2h0ICYmIF90aGlzOC5pbnN0YW5jZS5zY3JvbGwueSA8IGN1cnJlbnQudG9wIC0gd2luZG93LmlubmVySGVpZ2h0IC8gMikge1xuICAgICAgICAgICAgICAgIHRyYW5zZm9ybURpc3RhbmNlID0gMDtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChfdGhpczguaW5zdGFuY2Uuc2Nyb2xsLnkgPiBjdXJyZW50LmJvdHRvbSAmJiBfdGhpczguaW5zdGFuY2Uuc2Nyb2xsLnkgPiBjdXJyZW50LmJvdHRvbSArIDEwMCkge1xuICAgICAgICAgICAgICAgIHRyYW5zZm9ybURpc3RhbmNlID0gY3VycmVudC5ib3R0b20gLSBjdXJyZW50LnRvcCArIHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm1EaXN0YW5jZSA9IGZhbHNlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRyYW5zZm9ybURpc3RhbmNlICE9PSBmYWxzZSkge1xuICAgICAgICAgIGlmIChjdXJyZW50LmRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnIHx8IF90aGlzOC5kaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJyAmJiBjdXJyZW50LmRpcmVjdGlvbiAhPT0gJ3ZlcnRpY2FsJykge1xuICAgICAgICAgICAgX3RoaXM4LnRyYW5zZm9ybShjdXJyZW50LmVsLCB0cmFuc2Zvcm1EaXN0YW5jZSwgMCwgaXNGb3JjZWQgPyBmYWxzZSA6IGN1cnJlbnQuZGVsYXkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfdGhpczgudHJhbnNmb3JtKGN1cnJlbnQuZWwsIDAsIHRyYW5zZm9ybURpc3RhbmNlLCBpc0ZvcmNlZCA/IGZhbHNlIDogY3VycmVudC5kZWxheSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2Nyb2xsIHRvIGEgZGVzaXJlZCB0YXJnZXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gIEF2YWlsYWJsZSBvcHRpb25zIDpcbiAgICAgKiAgICAgICAgICB0YXJnZXQge25vZGUsIHN0cmluZywgXCJ0b3BcIiwgXCJib3R0b21cIiwgaW50fSAtIFRoZSBET00gZWxlbWVudCB3ZSB3YW50IHRvIHNjcm9sbCB0b1xuICAgICAqICAgICAgICAgIG9wdGlvbnMge29iamVjdH0gLSBPcHRpb25zIG9iamVjdCBmb3IgYWRkaXRpb25uYWwgc2V0dGluZ3MuXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInNjcm9sbFRvXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNjcm9sbFRvKHRhcmdldCkge1xuICAgICAgdmFyIF90aGlzOSA9IHRoaXM7XG5cbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICAgIC8vIFBhcnNlIG9wdGlvbnNcbiAgICAgIHZhciBvZmZzZXQgPSBwYXJzZUludChvcHRpb25zLm9mZnNldCkgfHwgMDsgLy8gQW4gb2Zmc2V0IHRvIGFwcGx5IG9uIHRvcCBvZiBnaXZlbiBgdGFyZ2V0YCBvciBgc291cmNlRWxlbWAncyB0YXJnZXRcblxuICAgICAgdmFyIGR1cmF0aW9uID0gIWlzTmFOKHBhcnNlSW50KG9wdGlvbnMuZHVyYXRpb24pKSA/IHBhcnNlSW50KG9wdGlvbnMuZHVyYXRpb24pIDogMTAwMDsgLy8gRHVyYXRpb24gb2YgdGhlIHNjcm9sbCBhbmltYXRpb24gaW4gbWlsbGlzZWNvbmRzXG5cbiAgICAgIHZhciBlYXNpbmcgPSBvcHRpb25zLmVhc2luZyB8fCBbMC4yNSwgMC4wLCAwLjM1LCAxLjBdOyAvLyBBbiBhcnJheSBvZiA0IGZsb2F0cyBiZXR3ZWVuIDAgYW5kIDEgZGVmaW5pbmcgdGhlIGJlemllciBjdXJ2ZSBmb3IgdGhlIGFuaW1hdGlvbidzIGVhc2luZy4gU2VlIGh0dHA6Ly9ncmV3ZWIubWUvYmV6aWVyLWVhc2luZy1lZGl0b3IvZXhhbXBsZS9cblxuICAgICAgdmFyIGRpc2FibGVMZXJwID0gb3B0aW9ucy5kaXNhYmxlTGVycCA/IHRydWUgOiBmYWxzZTsgLy8gTGVycCBlZmZlY3Qgd29uJ3QgYmUgYXBwbGllZCBpZiBzZXQgdG8gdHJ1ZVxuXG4gICAgICB2YXIgY2FsbGJhY2sgPSBvcHRpb25zLmNhbGxiYWNrID8gb3B0aW9ucy5jYWxsYmFjayA6IGZhbHNlOyAvLyBmdW5jdGlvbiBjYWxsZWQgd2hlbiBzY3JvbGxUbyBjb21wbGV0ZXMgKG5vdGUgdGhhdCBpdCB3b24ndCB3YWl0IGZvciBsZXJwIHRvIHN0YWJpbGl6ZSlcblxuICAgICAgZWFzaW5nID0gc3JjJDEuYXBwbHkodm9pZCAwLCBfdG9Db25zdW1hYmxlQXJyYXkoZWFzaW5nKSk7XG5cbiAgICAgIGlmICh0eXBlb2YgdGFyZ2V0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAvLyBTZWxlY3RvciBvciBib3VuZGFyaWVzXG4gICAgICAgIGlmICh0YXJnZXQgPT09ICd0b3AnKSB7XG4gICAgICAgICAgdGFyZ2V0ID0gMDtcbiAgICAgICAgfSBlbHNlIGlmICh0YXJnZXQgPT09ICdib3R0b20nKSB7XG4gICAgICAgICAgdGFyZ2V0ID0gdGhpcy5pbnN0YW5jZS5saW1pdC55O1xuICAgICAgICB9IGVsc2UgaWYgKHRhcmdldCA9PT0gJ2xlZnQnKSB7XG4gICAgICAgICAgdGFyZ2V0ID0gMDtcbiAgICAgICAgfSBlbHNlIGlmICh0YXJnZXQgPT09ICdyaWdodCcpIHtcbiAgICAgICAgICB0YXJnZXQgPSB0aGlzLmluc3RhbmNlLmxpbWl0Lng7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBJZiB0aGUgcXVlcnkgZmFpbHMsIGFib3J0XG5cbiAgICAgICAgICBpZiAoIXRhcmdldCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdGFyZ2V0ID09PSAnbnVtYmVyJykge1xuICAgICAgICAvLyBBYnNvbHV0ZSBjb29yZGluYXRlXG4gICAgICAgIHRhcmdldCA9IHBhcnNlSW50KHRhcmdldCk7XG4gICAgICB9IGVsc2UgaWYgKHRhcmdldCAmJiB0YXJnZXQudGFnTmFtZSkgOyBlbHNlIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdgdGFyZ2V0YCBwYXJhbWV0ZXIgaXMgbm90IHZhbGlkJyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gV2UgaGF2ZSBhIHRhcmdldCB0aGF0IGlzIG5vdCBhIGNvb3JkaW5hdGUgeWV0LCBnZXQgaXRcblxuXG4gICAgICBpZiAodHlwZW9mIHRhcmdldCAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgLy8gVmVyaWZ5IHRoZSBnaXZlbiB0YXJnZXQgYmVsb25ncyB0byB0aGlzIHNjcm9sbCBzY29wZVxuICAgICAgICB2YXIgdGFyZ2V0SW5TY29wZSA9IGdldFBhcmVudHModGFyZ2V0KS5pbmNsdWRlcyh0aGlzLmVsKTtcblxuICAgICAgICBpZiAoIXRhcmdldEluU2NvcGUpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgdGFyZ2V0IGlzbid0IGluc2lkZSBvdXIgbWFpbiBlbGVtZW50LCBhYm9ydCBhbnkgYWN0aW9uXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IC8vIEdldCB0YXJnZXQgb2Zmc2V0IGZyb20gdG9wXG5cblxuICAgICAgICB2YXIgdGFyZ2V0QkNSID0gdGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICB2YXIgb2Zmc2V0VG9wID0gdGFyZ2V0QkNSLnRvcDtcbiAgICAgICAgdmFyIG9mZnNldExlZnQgPSB0YXJnZXRCQ1IubGVmdDsgLy8gVHJ5IGFuZCBmaW5kIHRoZSB0YXJnZXQncyBwYXJlbnQgc2VjdGlvblxuXG4gICAgICAgIHZhciB0YXJnZXRQYXJlbnRzID0gZ2V0UGFyZW50cyh0YXJnZXQpO1xuICAgICAgICB2YXIgcGFyZW50U2VjdGlvbiA9IHRhcmdldFBhcmVudHMuZmluZChmdW5jdGlvbiAoY2FuZGlkYXRlKSB7XG4gICAgICAgICAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKF90aGlzOS5zZWN0aW9ucykgLy8gR2V0IHNlY3Rpb25zIGFzc29jaWF0aXZlIGFycmF5IGFzIGEgcmVndWxhciBhcnJheVxuICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKF9yZWY3KSB7XG4gICAgICAgICAgICB2YXIgX3JlZjggPSBfc2xpY2VkVG9BcnJheShfcmVmNywgMiksXG4gICAgICAgICAgICAgICAga2V5ID0gX3JlZjhbMF0sXG4gICAgICAgICAgICAgICAgc2VjdGlvbiA9IF9yZWY4WzFdO1xuXG4gICAgICAgICAgICByZXR1cm4gc2VjdGlvbjtcbiAgICAgICAgICB9KSAvLyBtYXAgdG8gc2VjdGlvbiBvbmx5ICh3ZSBkb250IG5lZWQgdGhlIGtleSBoZXJlKVxuICAgICAgICAgIC5maW5kKGZ1bmN0aW9uIChzZWN0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gc2VjdGlvbi5lbCA9PSBjYW5kaWRhdGU7XG4gICAgICAgICAgfSk7IC8vIGZpbmFsbHkgZmluZCB0aGUgc2VjdGlvbiB0aGF0IG1hdGNoZXMgdGhlIGNhbmRpZGF0ZVxuICAgICAgICB9KTtcbiAgICAgICAgdmFyIHBhcmVudFNlY3Rpb25PZmZzZXQgPSAwO1xuXG4gICAgICAgIGlmIChwYXJlbnRTZWN0aW9uKSB7XG4gICAgICAgICAgcGFyZW50U2VjdGlvbk9mZnNldCA9IGdldFRyYW5zbGF0ZShwYXJlbnRTZWN0aW9uKVt0aGlzLmRpcmVjdGlvbkF4aXNdOyAvLyBXZSBnb3QgYSBwYXJlbnQgc2VjdGlvbiwgc3RvcmUgaXQncyBjdXJyZW50IG9mZnNldCB0byByZW1vdmUgaXQgbGF0ZXJcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBpZiBubyBwYXJlbnQgc2VjdGlvbiBpcyBmb3VuZCB3ZSBuZWVkIHRvIHVzZSBpbnN0YW5jZSBzY3JvbGwgZGlyZWN0bHlcbiAgICAgICAgICBwYXJlbnRTZWN0aW9uT2Zmc2V0ID0gLXRoaXMuaW5zdGFuY2Uuc2Nyb2xsW3RoaXMuZGlyZWN0aW9uQXhpc107XG4gICAgICAgIH0gLy8gRmluYWwgdmFsdWUgb2Ygc2Nyb2xsIGRlc3RpbmF0aW9uIDogb2Zmc2V0VG9wICsgKG9wdGlvbmFsIG9mZnNldCBnaXZlbiBpbiBvcHRpb25zKSAtIChwYXJlbnQncyBzZWN0aW9uIHRyYW5zbGF0ZSlcblxuXG4gICAgICAgIGlmICh0aGlzLmRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnKSB7XG4gICAgICAgICAgb2Zmc2V0ID0gb2Zmc2V0TGVmdCArIG9mZnNldCAtIHBhcmVudFNlY3Rpb25PZmZzZXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb2Zmc2V0ID0gb2Zmc2V0VG9wICsgb2Zmc2V0IC0gcGFyZW50U2VjdGlvbk9mZnNldDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb2Zmc2V0ID0gdGFyZ2V0ICsgb2Zmc2V0O1xuICAgICAgfSAvLyBBY3R1YWwgc2Nyb2xsdG9cbiAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgICAvLyBTZXR1cFxuXG5cbiAgICAgIHZhciBzY3JvbGxTdGFydCA9IHBhcnNlRmxvYXQodGhpcy5pbnN0YW5jZS5kZWx0YVt0aGlzLmRpcmVjdGlvbkF4aXNdKTtcbiAgICAgIHZhciBzY3JvbGxUYXJnZXQgPSBNYXRoLm1heCgwLCBNYXRoLm1pbihvZmZzZXQsIHRoaXMuaW5zdGFuY2UubGltaXRbdGhpcy5kaXJlY3Rpb25BeGlzXSkpOyAvLyBNYWtlIHN1cmUgb3VyIHRhcmdldCBpcyBpbiB0aGUgc2Nyb2xsIGJvdW5kYXJpZXNcblxuICAgICAgdmFyIHNjcm9sbERpZmYgPSBzY3JvbGxUYXJnZXQgLSBzY3JvbGxTdGFydDtcblxuICAgICAgdmFyIHJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcihwKSB7XG4gICAgICAgIGlmIChkaXNhYmxlTGVycCkge1xuICAgICAgICAgIGlmIChfdGhpczkuZGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgICAgICAgIF90aGlzOS5zZXRTY3JvbGwoc2Nyb2xsU3RhcnQgKyBzY3JvbGxEaWZmICogcCwgX3RoaXM5Lmluc3RhbmNlLmRlbHRhLnkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfdGhpczkuc2V0U2Nyb2xsKF90aGlzOS5pbnN0YW5jZS5kZWx0YS54LCBzY3JvbGxTdGFydCArIHNjcm9sbERpZmYgKiBwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3RoaXM5Lmluc3RhbmNlLmRlbHRhW190aGlzOS5kaXJlY3Rpb25BeGlzXSA9IHNjcm9sbFN0YXJ0ICsgc2Nyb2xsRGlmZiAqIHA7XG4gICAgICAgIH1cbiAgICAgIH07IC8vIFByZXBhcmUgdGhlIHNjcm9sbFxuXG5cbiAgICAgIHRoaXMuYW5pbWF0aW5nU2Nyb2xsID0gdHJ1ZTsgLy8gVGhpcyBib29sZWFuIGFsbG93cyB0byBwcmV2ZW50IGBjaGVja1Njcm9sbCgpYCBmcm9tIGNhbGxpbmcgYHN0b3BTY3JvbGxpbmdgIHdoZW4gdGhlIGFuaW1hdGlvbiBpcyBzbG93IChpLmUuIGF0IHRoZSBiZWdpbm5pbmcgb2YgYW4gRWFzZUluKVxuXG4gICAgICB0aGlzLnN0b3BTY3JvbGxpbmcoKTsgLy8gU3RvcCBhbnkgbW92ZW1lbnQsIGFsbG93cyB0byBraWxsIGFueSBvdGhlciBgc2Nyb2xsVG9gIHN0aWxsIGhhcHBlbmluZ1xuXG4gICAgICB0aGlzLnN0YXJ0U2Nyb2xsaW5nKCk7IC8vIFJlc3RhcnQgdGhlIHNjcm9sbFxuICAgICAgLy8gU3RhcnQgdGhlIGFuaW1hdGlvbiBsb29wXG5cbiAgICAgIHZhciBzdGFydCA9IERhdGUubm93KCk7XG5cbiAgICAgIHZhciBsb29wID0gZnVuY3Rpb24gbG9vcCgpIHtcbiAgICAgICAgdmFyIHAgPSAoRGF0ZS5ub3coKSAtIHN0YXJ0KSAvIGR1cmF0aW9uOyAvLyBBbmltYXRpb24gcHJvZ3Jlc3NcblxuICAgICAgICBpZiAocCA+IDEpIHtcbiAgICAgICAgICAvLyBBbmltYXRpb24gZW5kc1xuICAgICAgICAgIHJlbmRlcigxKTtcbiAgICAgICAgICBfdGhpczkuYW5pbWF0aW5nU2Nyb2xsID0gZmFsc2U7XG4gICAgICAgICAgaWYgKGR1cmF0aW9uID09IDApIF90aGlzOS51cGRhdGUoKTtcbiAgICAgICAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3RoaXM5LnNjcm9sbFRvUmFmID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGxvb3ApO1xuICAgICAgICAgIHJlbmRlcihlYXNpbmcocCkpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBsb29wKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInVwZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgICB0aGlzLnNldFNjcm9sbExpbWl0KCk7XG4gICAgICB0aGlzLmFkZFNlY3Rpb25zKCk7XG4gICAgICB0aGlzLmFkZEVsZW1lbnRzKCk7XG4gICAgICB0aGlzLmRldGVjdEVsZW1lbnRzKCk7XG4gICAgICB0aGlzLnVwZGF0ZVNjcm9sbCgpO1xuICAgICAgdGhpcy50cmFuc2Zvcm1FbGVtZW50cyh0cnVlKTtcbiAgICAgIHRoaXMucmVpbml0U2Nyb2xsQmFyKCk7XG4gICAgICB0aGlzLmNoZWNrU2Nyb2xsKHRydWUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzdGFydFNjcm9sbFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdGFydFNjcm9sbCgpIHtcbiAgICAgIHRoaXMuc3RvcCA9IGZhbHNlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzdG9wU2Nyb2xsXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN0b3BTY3JvbGwoKSB7XG4gICAgICB0aGlzLnN0b3AgPSB0cnVlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZXRTY3JvbGxcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0U2Nyb2xsKHgsIHkpIHtcbiAgICAgIHRoaXMuaW5zdGFuY2UgPSBfb2JqZWN0U3ByZWFkMihfb2JqZWN0U3ByZWFkMih7fSwgdGhpcy5pbnN0YW5jZSksIHt9LCB7XG4gICAgICAgIHNjcm9sbDoge1xuICAgICAgICAgIHg6IHgsXG4gICAgICAgICAgeTogeVxuICAgICAgICB9LFxuICAgICAgICBkZWx0YToge1xuICAgICAgICAgIHg6IHgsXG4gICAgICAgICAgeTogeVxuICAgICAgICB9LFxuICAgICAgICBzcGVlZDogMFxuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImRlc3Ryb3lcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgIF9nZXQoX2dldFByb3RvdHlwZU9mKF9kZWZhdWx0LnByb3RvdHlwZSksIFwiZGVzdHJveVwiLCB0aGlzKS5jYWxsKHRoaXMpO1xuXG4gICAgICB0aGlzLnN0b3BTY3JvbGxpbmcoKTtcbiAgICAgIHRoaXMuaHRtbC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuc21vb3RoQ2xhc3MpO1xuICAgICAgdGhpcy52cy5kZXN0cm95KCk7XG4gICAgICB0aGlzLmRlc3Ryb3lTY3JvbGxCYXIoKTtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5jaGVja0tleSwgZmFsc2UpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBfZGVmYXVsdDtcbn0oX2RlZmF1bHQpO1xuXG52YXIgU21vb3RoID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU21vb3RoKCkge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTbW9vdGgpO1xuXG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9uczsgLy8gT3ZlcnJpZGUgZGVmYXVsdCBvcHRpb25zIHdpdGggZ2l2ZW4gb25lc1xuXG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCBkZWZhdWx0cywgb3B0aW9ucyk7XG4gICAgdGhpcy5zbWFydHBob25lID0gZGVmYXVsdHMuc21hcnRwaG9uZTtcbiAgICBpZiAob3B0aW9ucy5zbWFydHBob25lKSBPYmplY3QuYXNzaWduKHRoaXMuc21hcnRwaG9uZSwgb3B0aW9ucy5zbWFydHBob25lKTtcbiAgICB0aGlzLnRhYmxldCA9IGRlZmF1bHRzLnRhYmxldDtcbiAgICBpZiAob3B0aW9ucy50YWJsZXQpIE9iamVjdC5hc3NpZ24odGhpcy50YWJsZXQsIG9wdGlvbnMudGFibGV0KTtcbiAgICBpZiAoIXRoaXMuc21vb3RoICYmIHRoaXMuZGlyZWN0aW9uID09ICdob3Jpem9udGFsJykgY29uc29sZS53YXJuKCfwn5qoIGBzbW9vdGg6ZmFsc2VgICYgYGhvcml6b250YWxgIGRpcmVjdGlvbiBhcmUgbm90IHlldCBjb21wYXRpYmxlJyk7XG4gICAgaWYgKCF0aGlzLnRhYmxldC5zbW9vdGggJiYgdGhpcy50YWJsZXQuZGlyZWN0aW9uID09ICdob3Jpem9udGFsJykgY29uc29sZS53YXJuKCfwn5qoIGBzbW9vdGg6ZmFsc2VgICYgYGhvcml6b250YWxgIGRpcmVjdGlvbiBhcmUgbm90IHlldCBjb21wYXRpYmxlICh0YWJsZXQpJyk7XG4gICAgaWYgKCF0aGlzLnNtYXJ0cGhvbmUuc21vb3RoICYmIHRoaXMuc21hcnRwaG9uZS5kaXJlY3Rpb24gPT0gJ2hvcml6b250YWwnKSBjb25zb2xlLndhcm4oJ/CfmqggYHNtb290aDpmYWxzZWAgJiBgaG9yaXpvbnRhbGAgZGlyZWN0aW9uIGFyZSBub3QgeWV0IGNvbXBhdGlibGUgKHNtYXJ0cGhvbmUpJyk7XG4gICAgdGhpcy5pbml0KCk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoU21vb3RoLCBbe1xuICAgIGtleTogXCJpbml0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICB0aGlzLm9wdGlvbnMuaXNNb2JpbGUgPSAvQW5kcm9pZHxpUGhvbmV8aVBhZHxpUG9kfEJsYWNrQmVycnl8SUVNb2JpbGV8T3BlcmEgTWluaS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkgfHwgbmF2aWdhdG9yLnBsYXRmb3JtID09PSAnTWFjSW50ZWwnICYmIG5hdmlnYXRvci5tYXhUb3VjaFBvaW50cyA+IDEgfHwgd2luZG93LmlubmVyV2lkdGggPCB0aGlzLnRhYmxldC5icmVha3BvaW50O1xuICAgICAgdGhpcy5vcHRpb25zLmlzVGFibGV0ID0gdGhpcy5vcHRpb25zLmlzTW9iaWxlICYmIHdpbmRvdy5pbm5lcldpZHRoID49IHRoaXMudGFibGV0LmJyZWFrcG9pbnQ7XG5cbiAgICAgIGlmICh0aGlzLnNtb290aCAmJiAhdGhpcy5vcHRpb25zLmlzTW9iaWxlIHx8IHRoaXMudGFibGV0LnNtb290aCAmJiB0aGlzLm9wdGlvbnMuaXNUYWJsZXQgfHwgdGhpcy5zbWFydHBob25lLnNtb290aCAmJiB0aGlzLm9wdGlvbnMuaXNNb2JpbGUgJiYgIXRoaXMub3B0aW9ucy5pc1RhYmxldCkge1xuICAgICAgICB0aGlzLnNjcm9sbCA9IG5ldyBfZGVmYXVsdCQyKHRoaXMub3B0aW9ucyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNjcm9sbCA9IG5ldyBfZGVmYXVsdCQxKHRoaXMub3B0aW9ucyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2Nyb2xsLmluaXQoKTtcblxuICAgICAgaWYgKHdpbmRvdy5sb2NhdGlvbi5oYXNoKSB7XG4gICAgICAgIC8vIEdldCB0aGUgaGFzaCB3aXRob3V0IHRoZSAnIycgYW5kIGZpbmQgdGhlIG1hdGNoaW5nIGVsZW1lbnRcbiAgICAgICAgdmFyIGlkID0gd2luZG93LmxvY2F0aW9uLmhhc2guc2xpY2UoMSwgd2luZG93LmxvY2F0aW9uLmhhc2gubGVuZ3RoKTtcbiAgICAgICAgdmFyIHRhcmdldCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKTsgLy8gSWYgZm91bmQsIHNjcm9sbCB0byB0aGUgZWxlbWVudFxuXG4gICAgICAgIGlmICh0YXJnZXQpIHRoaXMuc2Nyb2xsLnNjcm9sbFRvKHRhcmdldCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInVwZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgICB0aGlzLnNjcm9sbC51cGRhdGUoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic3RhcnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3RhcnQoKSB7XG4gICAgICB0aGlzLnNjcm9sbC5zdGFydFNjcm9sbCgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzdG9wXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgICB0aGlzLnNjcm9sbC5zdG9wU2Nyb2xsKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNjcm9sbFRvXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNjcm9sbFRvKHRhcmdldCwgb3B0aW9ucykge1xuICAgICAgdGhpcy5zY3JvbGwuc2Nyb2xsVG8odGFyZ2V0LCBvcHRpb25zKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2V0U2Nyb2xsXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFNjcm9sbCh4LCB5KSB7XG4gICAgICB0aGlzLnNjcm9sbC5zZXRTY3JvbGwoeCwgeSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIm9uXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uKGV2ZW50LCBmdW5jKSB7XG4gICAgICB0aGlzLnNjcm9sbC5zZXRFdmVudHMoZXZlbnQsIGZ1bmMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJvZmZcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gb2ZmKGV2ZW50LCBmdW5jKSB7XG4gICAgICB0aGlzLnNjcm9sbC51bnNldEV2ZW50cyhldmVudCwgZnVuYyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImRlc3Ryb3lcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgIHRoaXMuc2Nyb2xsLmRlc3Ryb3koKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU21vb3RoO1xufSgpO1xuXG52YXIgTmF0aXZlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gTmF0aXZlKCkge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBOYXRpdmUpO1xuXG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9uczsgLy8gT3ZlcnJpZGUgZGVmYXVsdCBvcHRpb25zIHdpdGggZ2l2ZW4gb25lc1xuXG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCBkZWZhdWx0cywgb3B0aW9ucyk7XG4gICAgdGhpcy5zbWFydHBob25lID0gZGVmYXVsdHMuc21hcnRwaG9uZTtcbiAgICBpZiAob3B0aW9ucy5zbWFydHBob25lKSBPYmplY3QuYXNzaWduKHRoaXMuc21hcnRwaG9uZSwgb3B0aW9ucy5zbWFydHBob25lKTtcbiAgICB0aGlzLnRhYmxldCA9IGRlZmF1bHRzLnRhYmxldDtcbiAgICBpZiAob3B0aW9ucy50YWJsZXQpIE9iamVjdC5hc3NpZ24odGhpcy50YWJsZXQsIG9wdGlvbnMudGFibGV0KTtcbiAgICB0aGlzLmluaXQoKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhOYXRpdmUsIFt7XG4gICAga2V5OiBcImluaXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgIHRoaXMuc2Nyb2xsID0gbmV3IF9kZWZhdWx0JDEodGhpcy5vcHRpb25zKTtcbiAgICAgIHRoaXMuc2Nyb2xsLmluaXQoKTtcblxuICAgICAgaWYgKHdpbmRvdy5sb2NhdGlvbi5oYXNoKSB7XG4gICAgICAgIC8vIEdldCB0aGUgaGFzaCB3aXRob3V0IHRoZSAnIycgYW5kIGZpbmQgdGhlIG1hdGNoaW5nIGVsZW1lbnRcbiAgICAgICAgdmFyIGlkID0gd2luZG93LmxvY2F0aW9uLmhhc2guc2xpY2UoMSwgd2luZG93LmxvY2F0aW9uLmhhc2gubGVuZ3RoKTtcbiAgICAgICAgdmFyIHRhcmdldCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKTsgLy8gSWYgZm91bmQsIHNjcm9sbCB0byB0aGUgZWxlbWVudFxuXG4gICAgICAgIGlmICh0YXJnZXQpIHRoaXMuc2Nyb2xsLnNjcm9sbFRvKHRhcmdldCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInVwZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgICB0aGlzLnNjcm9sbC51cGRhdGUoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic3RhcnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3RhcnQoKSB7XG4gICAgICB0aGlzLnNjcm9sbC5zdGFydFNjcm9sbCgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzdG9wXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgICB0aGlzLnNjcm9sbC5zdG9wU2Nyb2xsKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNjcm9sbFRvXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNjcm9sbFRvKHRhcmdldCwgb3B0aW9ucykge1xuICAgICAgdGhpcy5zY3JvbGwuc2Nyb2xsVG8odGFyZ2V0LCBvcHRpb25zKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2V0U2Nyb2xsXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFNjcm9sbCh4LCB5KSB7XG4gICAgICB0aGlzLnNjcm9sbC5zZXRTY3JvbGwoeCwgeSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIm9uXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uKGV2ZW50LCBmdW5jKSB7XG4gICAgICB0aGlzLnNjcm9sbC5zZXRFdmVudHMoZXZlbnQsIGZ1bmMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJvZmZcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gb2ZmKGV2ZW50LCBmdW5jKSB7XG4gICAgICB0aGlzLnNjcm9sbC51bnNldEV2ZW50cyhldmVudCwgZnVuYyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImRlc3Ryb3lcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgIHRoaXMuc2Nyb2xsLmRlc3Ryb3koKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gTmF0aXZlO1xufSgpO1xuXG5leHBvcnQgZGVmYXVsdCBTbW9vdGg7XG5leHBvcnQgeyBOYXRpdmUsIFNtb290aCB9O1xuIl0sIm5hbWVzIjpbIl9kZWZpbmVQcm9wZXJ0aWVzIiwidGFyZ2V0IiwicHJvcHMiLCJpIiwibGVuZ3RoIiwiZGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5Iiwia2V5IiwiZ3NhcCIsIl9jb3JlSW5pdHRlZCIsIl93aW4iLCJfZG9jIiwiX2RvY0VsIiwiX2JvZHkiLCJfaXNUb3VjaCIsIl9wb2ludGVyVHlwZSIsIlNjcm9sbFRyaWdnZXIiLCJfcm9vdCIsIl9ub3JtYWxpemVyIiwiX2V2ZW50VHlwZXMiLCJfY29udGV4dCIsIl9nZXRHU0FQIiwid2luZG93IiwicmVnaXN0ZXJQbHVnaW4iLCJfc3RhcnR1cCIsIl9vYnNlcnZlcnMiLCJfc2Nyb2xsZXJzIiwiX3Byb3hpZXMiLCJfZ2V0VGltZSIsIkRhdGUiLCJub3ciLCJfYnJpZGdlIiwibmFtZSIsInZhbHVlIiwiX2dldFByb3h5UHJvcCIsImVsZW1lbnQiLCJwcm9wZXJ0eSIsImluZGV4T2YiLCJfaXNWaWV3cG9ydCIsImVsIiwiX2FkZExpc3RlbmVyIiwidHlwZSIsImZ1bmMiLCJwYXNzaXZlIiwiY2FwdHVyZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJfcmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiX3Njcm9sbExlZnQiLCJfc2Nyb2xsVG9wIiwiX29uU2Nyb2xsIiwiaXNQcmVzc2VkIiwiY2FjaGUiLCJfc2Nyb2xsQ2FjaGVGdW5jIiwiZiIsImRvTm90Q2FjaGUiLCJjYWNoaW5nRnVuYyIsImhpc3RvcnkiLCJzY3JvbGxSZXN0b3JhdGlvbiIsImlzTm9ybWFsaXppbmciLCJ2IiwiTWF0aCIsInJvdW5kIiwiaU9TIiwiY2FjaGVJRCIsIm9mZnNldCIsIl9ob3Jpem9udGFsIiwicyIsInAiLCJwMiIsIm9zIiwib3MyIiwiZCIsImQyIiwiYSIsInNjIiwiYXJndW1lbnRzIiwic2Nyb2xsVG8iLCJfdmVydGljYWwiLCJwYWdlWE9mZnNldCIsIm9wIiwicGFnZVlPZmZzZXQiLCJfZ2V0VGFyZ2V0IiwidCIsInNlbGYiLCJfY3R4Iiwic2VsZWN0b3IiLCJ1dGlscyIsInRvQXJyYXkiLCJjb25maWciLCJudWxsVGFyZ2V0V2FybiIsImNvbnNvbGUiLCJ3YXJuIiwiX2dldFNjcm9sbEZ1bmMiLCJfcmVmIiwic2Nyb2xsaW5nRWxlbWVudCIsInB1c2giLCJwcmV2Iiwic21vb3RoIiwiZ2V0UHJvcGVydHkiLCJfZ2V0VmVsb2NpdHlQcm9wIiwibWluVGltZVJlZnJlc2giLCJ1c2VEZWx0YSIsInYxIiwidjIiLCJ0MSIsInQyIiwibWluIiwiZHJvcFRvWmVyb1RpbWUiLCJtYXgiLCJ1cGRhdGUiLCJmb3JjZSIsInJlc2V0IiwiZ2V0VmVsb2NpdHkiLCJsYXRlc3RWYWx1ZSIsInRPbGQiLCJ2T2xkIiwiX2dldEV2ZW50IiwiZSIsInByZXZlbnREZWZhdWx0IiwiX2dzYXBBbGxvdyIsImNoYW5nZWRUb3VjaGVzIiwiX2dldEFic29sdXRlTWF4IiwiYXBwbHkiLCJhYnMiLCJfc2V0U2Nyb2xsVHJpZ2dlciIsImNvcmUiLCJkYXRhIiwic2Nyb2xsZXJzIiwicHJveGllcyIsImdsb2JhbHMiLCJicmlkZ2UiLCJfaW5pdENvcmUiLCJkb2N1bWVudCIsImJvZHkiLCJkb2N1bWVudEVsZW1lbnQiLCJjbGFtcCIsImNvbnRleHQiLCJPYnNlcnZlciIsImlzVG91Y2giLCJtYXRjaE1lZGlhIiwibWF0Y2hlcyIsIm5hdmlnYXRvciIsIm1heFRvdWNoUG9pbnRzIiwibXNNYXhUb3VjaFBvaW50cyIsImV2ZW50VHlwZXMiLCJzcGxpdCIsInNldFRpbWVvdXQiLCJ2YXJzIiwidGhpcyIsImluaXQiLCJDb25zdHJ1Y3RvciIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsInByb3RvdHlwZSIsInRvbGVyYW5jZSIsImRyYWdNaW5pbXVtIiwibGluZUhlaWdodCIsImRlYm91bmNlIiwib25TdG9wIiwib25TdG9wRGVsYXkiLCJpZ25vcmUiLCJ3aGVlbFNwZWVkIiwiZXZlbnQiLCJvbkRyYWdTdGFydCIsIm9uRHJhZ0VuZCIsIm9uRHJhZyIsIm9uUHJlc3MiLCJvblJlbGVhc2UiLCJvblJpZ2h0Iiwib25MZWZ0Iiwib25VcCIsIm9uRG93biIsIm9uQ2hhbmdlWCIsIm9uQ2hhbmdlWSIsIm9uQ2hhbmdlIiwib25Ub2dnbGVYIiwib25Ub2dnbGVZIiwib25Ib3ZlciIsIm9uSG92ZXJFbmQiLCJvbk1vdmUiLCJpZ25vcmVDaGVjayIsImlzTm9ybWFsaXplciIsIm9uR2VzdHVyZVN0YXJ0Iiwib25HZXN0dXJlRW5kIiwib25XaGVlbCIsIm9uRW5hYmxlIiwib25EaXNhYmxlIiwib25DbGljayIsInNjcm9sbFNwZWVkIiwiYWxsb3dDbGlja3MiLCJsb2NrQXhpcyIsIm9uTG9ja0F4aXMiLCJwYXJzZUZsb2F0IiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImlkIiwib25TdG9wRGVsYXllZENhbGwiLCJkcmFnZ2VkIiwibW92ZWQiLCJ3aGVlbGVkIiwibG9ja2VkIiwiYXhpcyIsInByZXZEZWx0YVgiLCJwcmV2RGVsdGFZIiwic2Nyb2xsRnVuY1giLCJzY3JvbGxGdW5jWSIsInNjcm9sbFgiLCJzY3JvbGxZIiwibGltaXRUb1RvdWNoIiwiaXNWaWV3cG9ydCIsIm93bmVyRG9jIiwib3duZXJEb2N1bWVudCIsImRlbHRhWCIsImRlbHRhWSIsIm9uQ2xpY2tUaW1lIiwiY2xpY2tDYXB0dXJlIiwiX2lnbm9yZUNoZWNrIiwiaXNQb2ludGVyT3JUb3VjaCIsInBvaW50ZXJUeXBlIiwiZHgiLCJkeSIsImNoYW5nZWRYIiwiY2hhbmdlZFkiLCJvbkRlbHRhIiwieCIsInkiLCJpbmRleCIsIl92eCIsIl92eSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIm9uVG91Y2hPclBvaW50ZXJEZWx0YSIsIl9vbkRyYWciLCJjbGllbnRYIiwiY2xpZW50WSIsImlzRHJhZ2dpbmciLCJzdGFydFgiLCJzdGFydFkiLCJfb25QcmVzcyIsImJ1dHRvbiIsInBhdXNlIiwiX29uUmVsZWFzZSIsImlzVHJhY2tpbmdEcmFnIiwiaXNOYU4iLCJ3YXNEcmFnZ2luZyIsImlzRHJhZ05vdENsaWNrIiwiZXZlbnREYXRhIiwiZGVsYXllZENhbGwiLCJkZWZhdWx0UHJldmVudGVkIiwiY2xpY2siLCJjcmVhdGVFdmVudCIsInN5bnRoZXRpY0V2ZW50IiwiaW5pdE1vdXNlRXZlbnQiLCJzY3JlZW5YIiwic2NyZWVuWSIsImRpc3BhdGNoRXZlbnQiLCJpc0dlc3R1cmluZyIsInJlc3RhcnQiLCJfb25HZXN0dXJlU3RhcnQiLCJ0b3VjaGVzIiwiX29uR2VzdHVyZUVuZCIsIm9uU2Nyb2xsIiwiX29uV2hlZWwiLCJtdWx0aXBsaWVyIiwiZGVsdGFNb2RlIiwiaW5uZXJIZWlnaHQiLCJfb25Nb3ZlIiwiX29uSG92ZXIiLCJfb25Ib3ZlckVuZCIsIl9vbkNsaWNrIiwiX2RjIiwiZW5hYmxlIiwiaXNFbmFibGVkIiwiZGlzYWJsZSIsImZpbHRlciIsIm8iLCJraWxsIiwicmV2ZXJ0Iiwic3BsaWNlIiwiZ2V0IiwidmVyc2lvbiIsImNyZWF0ZSIsInJlZ2lzdGVyIiwiZ2V0QWxsIiwic2xpY2UiLCJnZXRCeUlkIiwiX3Jlc2l6ZURlbGF5IiwiX3RvQXJyYXkiLCJfY2xhbXAiLCJfdGltZTIiLCJfc3luY0ludGVydmFsIiwiX3JlZnJlc2hpbmciLCJfcG9pbnRlcklzRG93biIsIl90cmFuc2Zvcm1Qcm9wIiwiX2kiLCJfcHJldldpZHRoIiwiX3ByZXZIZWlnaHQiLCJfYXV0b1JlZnJlc2giLCJfc29ydCIsIl9zdXBwcmVzc092ZXJ3cml0ZXMiLCJfaWdub3JlUmVzaXplIiwiX2lnbm9yZU1vYmlsZVJlc2l6ZSIsIl9iYXNlU2NyZWVuSGVpZ2h0IiwiX2Jhc2VTY3JlZW5XaWR0aCIsIl9maXhJT1NCdWciLCJfc2Nyb2xsUmVzdG9yYXRpb24iLCJfZGl2MTAwdmgiLCJfMTAwdmgiLCJfaXNSZXZlcnRlZCIsIl9jbGFtcGluZ01heCIsIl9saW1pdENhbGxiYWNrcyIsIl9yYWZJRCIsIl9yZWZyZXNoaW5nQWxsIiwiX3F1ZXVlUmVmcmVzaElEIiwiX3ByaW1hcnkiLCJfdGltZTEiLCJfbGFzdFNjcm9sbFRpbWUiLCJfZW5hYmxlZCIsIl9wYXJzZUNsYW1wIiwiX2lzU3RyaW5nIiwic3Vic3RyIiwiX2tlZXBDbGFtcCIsIl9yYWZCdWdGaXgiLCJfcG9pbnRlckRvd25IYW5kbGVyIiwiX3BvaW50ZXJVcEhhbmRsZXIiLCJfcGFzc1Rocm91Z2giLCJfcm91bmQiLCJfd2luZG93RXhpc3RzIiwiX2dldFZpZXdwb3J0RGltZW5zaW9uIiwiZGltZW5zaW9uUHJvcGVydHkiLCJfZ2V0Qm91bmRzRnVuYyIsIl93aW5PZmZzZXRzIiwid2lkdGgiLCJpbm5lcldpZHRoIiwiaGVpZ2h0IiwiX2dldEJvdW5kcyIsIl9tYXhTY3JvbGwiLCJfcmVmMiIsIl9pdGVyYXRlQXV0b1JlZnJlc2giLCJldmVudHMiLCJfaXNGdW5jdGlvbiIsIl9pc051bWJlciIsIl9pc09iamVjdCIsIl9lbmRBbmltYXRpb24iLCJhbmltYXRpb24iLCJyZXZlcnNlZCIsInByb2dyZXNzIiwiX2NhbGxiYWNrIiwiZW5hYmxlZCIsInJlc3VsdCIsImFkZCIsInRvdGFsVGltZSIsImNhbGxiYWNrQW5pbWF0aW9uIiwiX2FicyIsIl9sZWZ0IiwiX3JpZ2h0IiwiX2JvdHRvbSIsIl93aWR0aCIsIl9oZWlnaHQiLCJfUmlnaHQiLCJfTGVmdCIsIl9Ub3AiLCJfQm90dG9tIiwiX3BhZGRpbmciLCJfbWFyZ2luIiwiX1dpZHRoIiwiX0hlaWdodCIsIl9weCIsIl9nZXRDb21wdXRlZFN0eWxlIiwiX3NldERlZmF1bHRzIiwib2JqIiwiZGVmYXVsdHMiLCJ3aXRob3V0VHJhbnNmb3JtcyIsInR3ZWVuIiwidG8iLCJ4UGVyY2VudCIsInlQZXJjZW50Iiwicm90YXRpb24iLCJyb3RhdGlvblgiLCJyb3RhdGlvblkiLCJzY2FsZSIsInNrZXdYIiwic2tld1kiLCJib3VuZHMiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJfZ2V0U2l6ZSIsIl9yZWYzIiwiX2dldExhYmVsUmF0aW9BcnJheSIsInRpbWVsaW5lIiwibGFiZWxzIiwiZHVyYXRpb24iLCJfc25hcERpcmVjdGlvbmFsIiwic25hcEluY3JlbWVudE9yQXJyYXkiLCJzbmFwIiwiQXJyYXkiLCJpc0FycmF5Iiwic29ydCIsImIiLCJkaXJlY3Rpb24iLCJ0aHJlc2hvbGQiLCJzbmFwcGVkIiwiX211bHRpTGlzdGVuZXIiLCJ0eXBlcyIsImNhbGxiYWNrIiwiZm9yRWFjaCIsIm5vblBhc3NpdmUiLCJfd2hlZWxMaXN0ZW5lciIsInNjcm9sbEZ1bmMiLCJ3aGVlbEhhbmRsZXIiLCJfbWFya2VyRGVmYXVsdHMiLCJzdGFydENvbG9yIiwiZW5kQ29sb3IiLCJpbmRlbnQiLCJmb250U2l6ZSIsImZvbnRXZWlnaHQiLCJfZGVmYXVsdHMiLCJ0b2dnbGVBY3Rpb25zIiwiYW50aWNpcGF0ZVBpbiIsIl9rZXl3b3JkcyIsInRvcCIsImxlZnQiLCJjZW50ZXIiLCJib3R0b20iLCJyaWdodCIsIl9vZmZzZXRUb1B4Iiwic2l6ZSIsImVxSW5kZXgiLCJyZWxhdGl2ZSIsImNoYXJBdCIsIl9jcmVhdGVNYXJrZXIiLCJjb250YWluZXIiLCJfcmVmNCIsIm1hdGNoV2lkdGhFbCIsImNvbnRhaW5lckFuaW1hdGlvbiIsImNyZWF0ZUVsZW1lbnQiLCJ1c2VGaXhlZFBvc2l0aW9uIiwiaXNTY3JvbGxlciIsInBhcmVudCIsImlzU3RhcnQiLCJjb2xvciIsImNzcyIsIm9mZnNldFdpZHRoIiwiX2lzU3RhcnQiLCJzZXRBdHRyaWJ1dGUiLCJzdHlsZSIsImNzc1RleHQiLCJpbm5lclRleHQiLCJjaGlsZHJlbiIsImluc2VydEJlZm9yZSIsImFwcGVuZENoaWxkIiwiX29mZnNldCIsIl9wb3NpdGlvbk1hcmtlciIsIm1hcmtlciIsInN0YXJ0IiwiZmxpcHBlZCIsImRpc3BsYXkiLCJzaWRlIiwib3Bwb3NpdGVTaWRlIiwiX2lzRmxpcHBlZCIsInNldCIsIl90cmlnZ2VycyIsIl9pZHMiLCJfc3luYyIsIl91cGRhdGVBbGwiLCJjbGllbnRXaWR0aCIsIl9kaXNwYXRjaCIsIl9zZXRCYXNlRGltZW5zaW9ucyIsIl9vblJlc2l6ZSIsImZ1bGxzY3JlZW5FbGVtZW50Iiwid2Via2l0RnVsbHNjcmVlbkVsZW1lbnQiLCJfbGlzdGVuZXJzIiwiX2VtcHR5QXJyYXkiLCJfc29mdFJlZnJlc2giLCJfcmVmcmVzaEFsbCIsIm1hcCIsIl9zYXZlZFN0eWxlcyIsIl9yZXZlcnRSZWNvcmRlZCIsIm1lZGlhIiwicXVlcnkiLCJnZXRCQm94IiwidW5jYWNoZSIsIl9yZXZlcnRBbGwiLCJ0cmlnZ2VyIiwiX2NsZWFyU2Nyb2xsTWVtb3J5IiwicmVjIiwiX3JlZnJlc2hJRCIsIl9yZWZyZXNoMTAwdmgiLCJvZmZzZXRIZWlnaHQiLCJyZW1vdmVDaGlsZCIsIl9oaWRlQWxsTWFya2VycyIsImhpZGUiLCJza2lwUmV2ZXJ0IiwiaXNSZWZyZXNoaW5nIiwicmVmcmVzaEluaXRzIiwic2Nyb2xsQmVoYXZpb3IiLCJyZWZyZXNoIiwiX3N1YlBpbk9mZnNldCIsInBpbiIsInByb3AiLCJob3Jpem9udGFsIiwib3JpZ2luYWwiLCJhZGp1c3RQaW5TcGFjaW5nIiwic2Nyb2xsZXIiLCJfZGlyIiwiZW5kQ2xhbXAiLCJlbmQiLCJfZW5kQ2xhbXAiLCJzdGFydENsYW1wIiwiX3N0YXJ0Q2xhbXAiLCJzZXRQb3NpdGlvbnMiLCJyZW5kZXIiLCJvblJlZnJlc2giLCJfbGFzdFNjcm9sbCIsIl9kaXJlY3Rpb24iLCJpc1VwZGF0aW5nIiwibCIsInRpbWUiLCJyZWNvcmRWZWxvY2l0eSIsInNjcm9sbCIsIl9wcm9wTmFtZXNUb0NvcHkiLCJfc3RhdGVQcm9wcyIsImNvbmNhdCIsIl9zd2FwUGluSW4iLCJzcGFjZXIiLCJjcyIsInNwYWNlclN0YXRlIiwiX2dzYXAiLCJzd2FwcGVkSW4iLCJzcGFjZXJTdHlsZSIsInBpblN0eWxlIiwicG9zaXRpb24iLCJmbGV4QmFzaXMiLCJvdmVyZmxvdyIsImJveFNpemluZyIsIl9zZXRTdGF0ZSIsInBhcmVudE5vZGUiLCJfY2Fwc0V4cCIsInN0YXRlIiwiZ2V0Q2FjaGUiLCJyZW1vdmVQcm9wZXJ0eSIsInJlcGxhY2UiLCJ0b0xvd2VyQ2FzZSIsIl9nZXRTdGF0ZSIsIl9wYXJzZVBvc2l0aW9uIiwic2Nyb2xsZXJTaXplIiwibWFya2VyU2Nyb2xsZXIiLCJzY3JvbGxlckJvdW5kcyIsImJvcmRlcldpZHRoIiwic2Nyb2xsZXJNYXgiLCJjbGFtcFplcm9Qcm9wIiwicDEiLCJzZWVrIiwibWFwUmFuZ2UiLCJzY3JvbGxUcmlnZ2VyIiwibG9jYWxPZmZzZXQiLCJnbG9iYWxPZmZzZXQiLCJvZmZzZXRzIiwibSIsIl9jYVNjcm9sbERpc3QiLCJfcHJlZml4RXhwIiwiX3JlcGFyZW50IiwiX3N0T3JpZyIsInRlc3QiLCJfaW50ZXJydXB0aW9uVHJhY2tlciIsImdldFZhbHVlRnVuYyIsImluaXRpYWxWYWx1ZSIsIm9uSW50ZXJydXB0IiwibGFzdDEiLCJsYXN0MiIsImN1cnJlbnQiLCJfc2hpZnRNYXJrZXIiLCJfZ2V0VHdlZW5DcmVhdG9yIiwiZ2V0U2Nyb2xsIiwiZ2V0VHdlZW4iLCJjaGFuZ2UxIiwiY2hhbmdlMiIsIm9uQ29tcGxldGUiLCJtb2RpZmllcnMiLCJjaGVja0ZvckludGVycnVwdGlvbiIsImluaGVyaXQiLCJyYXRpbyIsIm9uVXBkYXRlIiwiY2FsbCIsInR3ZWVuVG8iLCJwaW5DYWNoZSIsInNuYXBGdW5jIiwic2Nyb2xsMSIsInNjcm9sbDIiLCJtYXJrZXJTdGFydCIsIm1hcmtlckVuZCIsIm1hcmtlclN0YXJ0VHJpZ2dlciIsIm1hcmtlckVuZFRyaWdnZXIiLCJtYXJrZXJWYXJzIiwiZXhlY3V0aW5nT25SZWZyZXNoIiwiY2hhbmdlIiwicGluT3JpZ2luYWxTdGF0ZSIsInBpbkFjdGl2ZVN0YXRlIiwicGluU3RhdGUiLCJwaW5HZXR0ZXIiLCJwaW5TZXR0ZXIiLCJwaW5TdGFydCIsInBpbkNoYW5nZSIsInNwYWNpbmdTdGFydCIsIm1hcmtlclN0YXJ0U2V0dGVyIiwicGluTW92ZXMiLCJtYXJrZXJFbmRTZXR0ZXIiLCJzbmFwMSIsInNuYXAyIiwic2NydWJUd2VlbiIsInNjcnViU21vb3RoIiwic25hcER1ckNsYW1wIiwic25hcERlbGF5ZWRDYWxsIiwicHJldlNjcm9sbCIsInByZXZBbmltUHJvZ3Jlc3MiLCJjYU1hcmtlclNldHRlciIsImN1c3RvbVJldmVydFJldHVybiIsIl92YXJzIiwibm9kZVR5cGUiLCJ0b2dnbGVDbGFzcyIsIm9uVG9nZ2xlIiwic2NydWIiLCJwaW5TcGFjaW5nIiwiaW52YWxpZGF0ZU9uUmVmcmVzaCIsIm9uU2NydWJDb21wbGV0ZSIsIm9uU25hcENvbXBsZXRlIiwib25jZSIsInBpblJlcGFyZW50IiwicGluU3BhY2VyIiwiZmFzdFNjcm9sbEVuZCIsInByZXZlbnRPdmVybGFwcyIsImlzVG9nZ2xlIiwic2Nyb2xsZXJDYWNoZSIsInBpblR5cGUiLCJjYWxsYmFja3MiLCJvbkVudGVyIiwib25MZWF2ZSIsIm9uRW50ZXJCYWNrIiwib25MZWF2ZUJhY2siLCJtYXJrZXJzIiwib25SZWZyZXNoSW5pdCIsImdldFNjcm9sbGVyU2l6ZSIsIl9nZXRTaXplRnVuYyIsImdldFNjcm9sbGVyT2Zmc2V0cyIsIl9nZXRPZmZzZXRzRnVuYyIsImxhc3RTbmFwIiwibGFzdFJlZnJlc2giLCJwcmV2UHJvZ3Jlc3MiLCJiaW5kIiwicmVmcmVzaFByaW9yaXR5IiwidHdlZW5TY3JvbGwiLCJzY3J1YkR1cmF0aW9uIiwiZWFzZSIsInRvdGFsUHJvZ3Jlc3MiLCJwYXVzZWQiLCJsYXp5IiwiX2luaXR0ZWQiLCJpc1JldmVydGVkIiwiaW1tZWRpYXRlUmVuZGVyIiwic25hcFRvIiwiX2dldENsb3Nlc3RMYWJlbCIsInN0IiwiZGlyZWN0aW9uYWwiLCJkZWxheSIsInJlZnJlc2hlZFJlY2VudGx5IiwiaXNBY3RpdmUiLCJlbmRWYWx1ZSIsImVuZFNjcm9sbCIsInZlbG9jaXR5IiwibmF0dXJhbEVuZCIsImluZXJ0aWEiLCJfc25hcCIsIm9uU3RhcnQiLCJfb25JbnRlcnJ1cHQiLCJfb25Db21wbGV0ZSIsInJlc2V0VG8iLCJfdFRpbWUiLCJfdER1ciIsInN0UmV2ZXJ0IiwidGFyZ2V0cyIsImNsYXNzTmFtZSIsIm5hdGl2ZUVsZW1lbnQiLCJzcGFjZXJJc05hdGl2ZSIsImNsYXNzTGlzdCIsImZvcmNlM0QiLCJxdWlja1NldHRlciIsImNvbnRlbnQiLCJvbGRPblVwZGF0ZSIsIm9sZFBhcmFtcyIsIm9uVXBkYXRlUGFyYW1zIiwiZXZlbnRDYWxsYmFjayIsInByZXZpb3VzIiwibmV4dCIsInRlbXAiLCJyIiwicHJldlJlZnJlc2hpbmciLCJfc3dhcFBpbk91dCIsInNvZnQiLCJwaW5PZmZzZXQiLCJpbnZhbGlkYXRlIiwiaXNWZXJ0aWNhbCIsIm92ZXJyaWRlIiwiY3VyVHJpZ2dlciIsImN1clBpbiIsIm9wcG9zaXRlU2Nyb2xsIiwiaW5pdHRlZCIsInJldmVydGVkUGlucyIsImZvcmNlZE92ZXJmbG93IiwibWFya2VyU3RhcnRPZmZzZXQiLCJtYXJrZXJFbmRPZmZzZXQiLCJpc0ZpcnN0UmVmcmVzaCIsIm90aGVyUGluT2Zmc2V0IiwicGFyc2VkRW5kIiwicGFyc2VkRW5kVHJpZ2dlciIsImVuZFRyaWdnZXIiLCJwYXJzZWRTdGFydCIsInBpbm5lZENvbnRhaW5lciIsInRyaWdnZXJJbmRleCIsInVuc2hpZnQiLCJfcGluUHVzaCIsIm5vcm1hbGl6ZSIsIl9waW5PZmZzZXQiLCJ0b1VwcGVyQ2FzZSIsImNlaWwiLCJvbWl0T2Zmc2V0cyIsIl9jb3B5U3RhdGUiLCJlbmRBbmltYXRpb24iLCJsYWJlbFRvU2Nyb2xsIiwibGFiZWwiLCJnZXRUcmFpbGluZyIsInJldmVyc2UiLCJmb3JjZUZha2UiLCJ0b2dnbGVTdGF0ZSIsImFjdGlvbiIsInN0YXRlQ2hhbmdlZCIsInRvZ2dsZWQiLCJpc0F0TWF4IiwiaXNUYWtpbmdBY3Rpb24iLCJjbGlwcGVkIiwiX2RwIiwiX3RpbWUiLCJfc3RhcnQiLCJuIiwibmV3U3RhcnQiLCJuZXdFbmQiLCJrZWVwQ2xhbXAiLCJfY2hhbmdlIiwiYW1vdW50IiwiYWxsb3dBbmltYXRpb24iLCJvbktpbGwiLCJ1cGRhdGVGdW5jIiwiX3F1ZXVlUmVmcmVzaEFsbCIsImNsZWFySW50ZXJ2YWwiLCJzdXBwcmVzc092ZXJ3cml0ZXMiLCJ1c2VyQWdlbnQiLCJtbSIsImJvZHlTdHlsZSIsImJvcmRlciIsImJvcmRlclRvcFN0eWxlIiwiQW5pbWF0aW9uUHJvdG8iLCJBbmltYXRpb24iLCJzZXRJbnRlcnZhbCIsImNoZWNrUHJlZml4IiwidyIsImgiLCJoaWRkZW4iLCJsaW1pdENhbGxiYWNrcyIsIm1zIiwic3luY0ludGVydmFsIiwiaWdub3JlTW9iaWxlUmVzaXplIiwiYXV0b1JlZnJlc2hFdmVudHMiLCJzY3JvbGxlclByb3h5IiwiY2xlYXJNYXRjaE1lZGlhIiwiaXNJblZpZXdwb3J0IiwicG9zaXRpb25JblZpZXdwb3J0IiwicmVmZXJlbmNlUG9pbnQiLCJraWxsQWxsIiwiYWxsb3dMaXN0ZW5lcnMiLCJsaXN0ZW5lcnMiLCJzYXZlU3R5bGVzIiwiZ2V0QXR0cmlidXRlIiwic2FmZSIsImNsZWFyU2Nyb2xsTWVtb3J5IiwibWF4U2Nyb2xsIiwiZ2V0U2Nyb2xsRnVuYyIsImlzU2Nyb2xsaW5nIiwic25hcERpcmVjdGlvbmFsIiwiYmF0Y2giLCJ2YXJzQ29weSIsImludGVydmFsIiwiYmF0Y2hNYXgiLCJwcm94eUNhbGxiYWNrIiwiZWxlbWVudHMiLCJ0cmlnZ2VycyIsIl9pbnB1dElzRm9jdXNlZCIsIl9jbGFtcFNjcm9sbEFuZEdldER1cmF0aW9uTXVsdGlwbGllciIsIl9hbGxvd05hdGl2ZVBhbm5pbmciLCJ0b3VjaEFjdGlvbiIsIl9vdmVyZmxvdyIsImF1dG8iLCJfbmVzdGVkU2Nyb2xsIiwiX3JlZjUiLCJub2RlIiwiX2lzU2Nyb2xsVCIsInNjcm9sbEhlaWdodCIsImNsaWVudEhlaWdodCIsInNjcm9sbFdpZHRoIiwib3ZlcmZsb3dZIiwib3ZlcmZsb3dYIiwiX2lzU2Nyb2xsIiwic3RvcFByb3BhZ2F0aW9uIiwiX2lucHV0T2JzZXJ2ZXIiLCJpbnB1dHMiLCJuZXN0ZWQiLCJfY2FwdHVyZUlucHV0cyIsIl9pbnB1dEV4cCIsImlzSW5wdXQiLCJ0YWdOYW1lIiwiX2dldFNjcm9sbE5vcm1hbGl6ZXIiLCJtYXhZIiwibGFzdFJlZnJlc2hJRCIsInNraXBUb3VjaE1vdmUiLCJzdGFydFNjcm9sbFgiLCJzdGFydFNjcm9sbFkiLCJfdmFyczIiLCJub3JtYWxpemVTY3JvbGxYIiwibW9tZW50dW0iLCJhbGxvd05lc3RlZFNjcm9sbCIsInNtb290aGVyIiwiU2Nyb2xsU21vb3RoZXIiLCJzbW9vdGhlckluc3RhbmNlIiwiaW5pdGlhbFNjYWxlIiwidmlzdWFsVmlld3BvcnQiLCJvdXRlcldpZHRoIiwid2hlZWxSZWZyZXNoIiwicmVzb2x2ZU1vbWVudHVtRHVyYXRpb24iLCJpbnB1dE9ic2VydmVyIiwicmVzdW1lVG91Y2hNb3ZlIiwic2Nyb2xsQ2xhbXBYIiwic2Nyb2xsQ2xhbXBZIiwidXBkYXRlQ2xhbXBzIiwicmVtb3ZlQ29udGVudE9mZnNldCIsInRyYW5zZm9ybSIsIm9uUmVzaXplIiwiaWdub3JlRHJhZyIsInByZXZTY2FsZSIsImN1cnJlbnRTY3JvbGwiLCJkdXIiLCJ2ZWxvY2l0eVgiLCJ2ZWxvY2l0eVkiLCJwbGF5IiwiX3RzIiwieEFycmF5IiwieUFycmF5IiwieUNsYW1wZWQiLCJ0aWNrZXIiLCJvYnNlcnZlIiwibm9ybWFsaXplU2Nyb2xsIiwibm9ybWFsaXplciIsInNzIiwicmVmIiwiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJUeXBlRXJyb3IiLCJfY3JlYXRlQ2xhc3MiLCJfZGVmaW5lUHJvcGVydHkiLCJvd25LZXlzIiwib2JqZWN0IiwiZW51bWVyYWJsZU9ubHkiLCJrZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwic3ltYm9scyIsInN5bSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9vYmplY3RTcHJlYWQyIiwic291cmNlIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJfaW5oZXJpdHMiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjb25zdHJ1Y3RvciIsIl9zZXRQcm90b3R5cGVPZiIsIl9nZXRQcm90b3R5cGVPZiIsInNldFByb3RvdHlwZU9mIiwiZ2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwiUmVmZXJlbmNlRXJyb3IiLCJfY3JlYXRlU3VwZXIiLCJEZXJpdmVkIiwiaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJzaGFtIiwiUHJveHkiLCJ0b1N0cmluZyIsIl9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJTdXBlciIsIk5ld1RhcmdldCIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiX2dldCIsInJlY2VpdmVyIiwiYmFzZSIsImhhc093blByb3BlcnR5IiwiX3N1cGVyUHJvcEJhc2UiLCJkZXNjIiwiX3NsaWNlZFRvQXJyYXkiLCJhcnIiLCJfYXJyYXlXaXRoSG9sZXMiLCJTeW1ib2wiLCJpdGVyYXRvciIsIl9hcnIiLCJfbiIsIl9kIiwiX2UiLCJ1bmRlZmluZWQiLCJfcyIsImRvbmUiLCJlcnIiLCJfaXRlcmFibGVUb0FycmF5TGltaXQiLCJfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCJfbm9uSXRlcmFibGVSZXN0IiwiX3RvQ29uc3VtYWJsZUFycmF5IiwiX2FycmF5TGlrZVRvQXJyYXkiLCJfYXJyYXlXaXRob3V0SG9sZXMiLCJpdGVyIiwiZnJvbSIsIl9pdGVyYWJsZVRvQXJyYXkiLCJfbm9uSXRlcmFibGVTcHJlYWQiLCJtaW5MZW4iLCJsZW4iLCJhcnIyIiwicmVwZWF0IiwiaW5pdFBvc2l0aW9uIiwiZ2VzdHVyZURpcmVjdGlvbiIsInJlbG9hZE9uQ29udGV4dENoYW5nZSIsImxlcnAiLCJzY3JvbGxiYXJDb250YWluZXIiLCJzY3JvbGxiYXJDbGFzcyIsInNjcm9sbGluZ0NsYXNzIiwiZHJhZ2dpbmdDbGFzcyIsInNtb290aENsYXNzIiwiaW5pdENsYXNzIiwiZ2V0U3BlZWQiLCJnZXREaXJlY3Rpb24iLCJzY3JvbGxGcm9tQW55d2hlcmUiLCJmaXJlZm94TXVsdGlwbGllciIsInRvdWNoTXVsdGlwbGllciIsInJlc2V0TmF0aXZlU2Nyb2xsIiwidGFibGV0IiwiYnJlYWtwb2ludCIsInNtYXJ0cGhvbmUiLCJfZGVmYXVsdCIsIm9wdGlvbnMiLCJhc3NpZ24iLCJuYW1lc3BhY2UiLCJodG1sIiwid2luZG93SGVpZ2h0Iiwid2luZG93V2lkdGgiLCJ3aW5kb3dNaWRkbGUiLCJlbHMiLCJjdXJyZW50RWxlbWVudHMiLCJoYXNTY3JvbGxUaWNraW5nIiwiaGFzQ2FsbEV2ZW50U2V0IiwiY2hlY2tTY3JvbGwiLCJjaGVja1Jlc2l6ZSIsImNoZWNrRXZlbnQiLCJsaW1pdCIsImlzTW9iaWxlIiwiaXNUYWJsZXQiLCJkaXJlY3Rpb25BeGlzIiwic3BlZWQiLCJpbml0RXZlbnRzIiwiZGlzcGF0Y2hTY3JvbGwiLCJfdGhpcyIsInJlc2l6ZVRpY2siLCJyZXNpemUiLCJwbGF0Zm9ybSIsIm9sZENvbnRleHQiLCJsb2NhdGlvbiIsInJlbG9hZCIsIl90aGlzMiIsInNjcm9sbFRvRWxzIiwicXVlcnlTZWxlY3RvckFsbCIsInNldFNjcm9sbFRvIiwiY3VycmVudFRhcmdldCIsIl90aGlzMyIsInNjcm9sbFRvcCIsInNjcm9sbEJvdHRvbSIsInNjcm9sbExlZnQiLCJzY3JvbGxSaWdodCIsImVudHJpZXMiLCJpblZpZXciLCJzZXRJblZpZXciLCJzZXRPdXRPZlZpZXciLCJkaXNwYXRjaENhbGwiLCJfdGhpczQiLCJyZW1vdmUiLCJ3YXkiLCJjYWxsV2F5IiwiY2FsbFZhbHVlIiwiaXRlbSIsInRyaW0iLCJjYWxsT2JqIiwiY2FsbEV2ZW50IiwiRXZlbnQiLCJzY3JvbGxFdmVudCIsImxpc3QiLCJkZXRlY3RFbGVtZW50cyIsIl90aGlzNSIsIl90aGlzNiIsImNvbW1vbmpzR2xvYmFsIiwiZ2xvYmFsVGhpcyIsImciLCJjcmVhdGVDb21tb25qc01vZHVsZSIsImZuIiwibW9kdWxlIiwiZXhwb3J0cyIsInNtb290aHNjcm9sbCIsInBvbHlmaWxsIiwiX19mb3JjZVNtb290aFNjcm9sbFBvbHlmaWxsX18iLCJFbGVtZW50IiwiSFRNTEVsZW1lbnQiLCJTQ1JPTExfVElNRSIsInNjcm9sbEJ5IiwiZWxlbWVudFNjcm9sbCIsInNjcm9sbEVsZW1lbnQiLCJzY3JvbGxJbnRvVmlldyIsInBlcmZvcm1hbmNlIiwiUk9VTkRJTkdfVE9MRVJBTkNFIiwiUmVnRXhwIiwiam9pbiIsInNob3VsZEJhaWxPdXQiLCJzbW9vdGhTY3JvbGwiLCJTeW50YXhFcnJvciIsImJlaGF2aW9yIiwic2Nyb2xsYWJsZVBhcmVudCIsImlzU2Nyb2xsYWJsZSIsImhvc3QiLCJmaW5kU2Nyb2xsYWJsZVBhcmVudCIsInBhcmVudFJlY3RzIiwiY2xpZW50UmVjdHMiLCJmaXJzdEFyZyIsImhhc1Njcm9sbGFibGVTcGFjZSIsImNhbk92ZXJmbG93Iiwib3ZlcmZsb3dWYWx1ZSIsImlzU2Nyb2xsYWJsZVkiLCJpc1Njcm9sbGFibGVYIiwic3RlcCIsImN1cnJlbnRYIiwiY3VycmVudFkiLCJrIiwiZWxhcHNlZCIsInN0YXJ0VGltZSIsImNvcyIsIlBJIiwibWV0aG9kIiwic2Nyb2xsYWJsZSIsIl9kZWZhdWx0JDEiLCJfQ29yZSIsIl9zdXBlciIsInNtb290aHNjcm9sbFBvbHlmaWxsIiwiYWRkRWxlbWVudHMiLCJhZGREaXJlY3Rpb24iLCJhZGRTcGVlZCIsInNwZWVkVHMiLCJ1cGRhdGVFbGVtZW50cyIsInRhcmdldEVsIiwiY2wiLCJkYXRhc2V0IiwidGFyZ2V0RWxCQ1IiLCJxdWVyeVNlbGVjdG9yIiwicmVsYXRpdmVPZmZzZXQiLCJnZXRSZWxhdGl2ZU9mZnNldCIsIm1hcHBlZEVsIiwiY29udGFpbnMiLCJpbmNsdWRlcyIsInBhcnNlSW50IiwiaXNUYXJnZXRSZWFjaGVkIiwicHJvcElzRW51bWVyYWJsZSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwib2JqZWN0QXNzaWduIiwidGVzdDEiLCJTdHJpbmciLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwidGVzdDIiLCJmcm9tQ2hhckNvZGUiLCJ0ZXN0MyIsImxldHRlciIsInNob3VsZFVzZU5hdGl2ZSIsInZhbCIsInRvT2JqZWN0IiwiRSIsIm9uIiwiY3R4IiwibGlzdGVuZXIiLCJvZmYiLCJfIiwiZW1pdCIsImV2dEFyciIsImV2dHMiLCJsaXZlRXZlbnRzIiwidGlueUVtaXR0ZXIiLCJsZXRoYXJneSIsIkxldGhhcmd5Iiwic3RhYmlsaXR5Iiwic2Vuc2l0aXZpdHkiLCJsYXN0VXBEZWx0YXMiLCJyZXN1bHRzIiwibGFzdERvd25EZWx0YXMiLCJkZWx0YXNUaW1lc3RhbXAiLCJjaGVjayIsImxhc3REZWx0YSIsIm9yaWdpbmFsRXZlbnQiLCJ3aGVlbERlbHRhIiwiZGV0YWlsIiwic2hpZnQiLCJpc0luZXJ0aWEiLCJsYXN0RGVsdGFzIiwibGFzdERlbHRhc05ldyIsImxhc3REZWx0YXNPbGQiLCJuZXdBdmVyYWdlIiwibmV3U3VtIiwib2xkQXZlcmFnZSIsIm9sZFN1bSIsInJlZHVjZSIsInNob3dMYXN0VXBEZWx0YXMiLCJzaG93TGFzdERvd25EZWx0YXMiLCJzdXBwb3J0IiwiaGFzV2hlZWxFdmVudCIsImhhc01vdXNlV2hlZWxFdmVudCIsImhhc1RvdWNoIiwiVG91Y2hFdmVudCIsIkRvY3VtZW50VG91Y2giLCJoYXNUb3VjaFdpbiIsImhhc1BvaW50ZXIiLCJtc1BvaW50ZXJFbmFibGVkIiwiaGFzS2V5RG93biIsImlzRmlyZWZveCIsImhhc093blByb3BlcnR5JDEiLCJFVlRfSUQiLCJzcmMiLCJWaXJ0dWFsU2Nyb2xsIiwia2V5Q29kZXMiLCJmdW5jdGlvbnMiLCJiaW5kYWxsU3RhbmRhbG9uZSIsIm1vdXNlTXVsdGlwbGllciIsImtleVN0ZXAiLCJwcmV2ZW50VG91Y2giLCJ1bnByZXZlbnRUb3VjaENsYXNzIiwibGltaXRJbmVydGlhIiwidXNlS2V5Ym9hcmQiLCJ1c2VUb3VjaCIsIl9sZXRoYXJneSIsIl9lbWl0dGVyIiwiX2V2ZW50IiwidG91Y2hTdGFydFgiLCJ0b3VjaFN0YXJ0WSIsImJvZHlUb3VjaEFjdGlvbiIsImxpc3RlbmVyT3B0aW9ucyIsImFtdCIsImdldFRyYW5zbGF0ZSIsInRyYW5zbGF0ZSIsIndlYmtpdFRyYW5zZm9ybSIsIm1velRyYW5zZm9ybSIsIm1hdCIsIm1hdGNoIiwiZ2V0UGFyZW50cyIsImVsZW0iLCJwYXJlbnRzIiwiX25vdGlmeSIsImV2dCIsIndoZWVsRGVsdGFYIiwid2hlZWxEZWx0YVkiLCJfb25Nb3VzZVdoZWVsIiwiX29uVG91Y2hTdGFydCIsInRhcmdldFRvdWNoZXMiLCJwYWdlWCIsInBhZ2VZIiwiX29uVG91Y2hNb3ZlIiwiX29uS2V5RG93biIsImtleUNvZGUiLCJzaGlmdEtleSIsIl9iaW5kIiwibXNUb3VjaEFjdGlvbiIsIl91bmJpbmQiLCJjYiIsImRlc3Ryb3kiLCJrU2FtcGxlU3RlcFNpemUiLCJmbG9hdDMyQXJyYXlTdXBwb3J0ZWQiLCJGbG9hdDMyQXJyYXkiLCJBIiwiYUExIiwiYUEyIiwiQiIsIkMiLCJjYWxjQmV6aWVyIiwiYVQiLCJnZXRTbG9wZSIsIkxpbmVhckVhc2luZyIsInNyYyQxIiwibVgxIiwibVkxIiwibVgyIiwibVkyIiwiRXJyb3IiLCJzYW1wbGVWYWx1ZXMiLCJnZXRURm9yWCIsImFYIiwiaW50ZXJ2YWxTdGFydCIsImN1cnJlbnRTYW1wbGUiLCJrU3BsaW5lVGFibGVTaXplIiwiZ3Vlc3NGb3JUIiwiaW5pdGlhbFNsb3BlIiwiYUd1ZXNzVCIsImN1cnJlbnRTbG9wZSIsIm5ld3RvblJhcGhzb25JdGVyYXRlIiwiYUEiLCJhQiIsImN1cnJlbnRUIiwiYmluYXJ5U3ViZGl2aWRlIiwia2V5Q29kZXMkMSIsIl9kZWZhdWx0JDIiLCJpc0RyYWdnaW5nU2Nyb2xsYmFyIiwiaXNUaWNraW5nIiwicGFyYWxsYXhFbGVtZW50cyIsInN0b3AiLCJjaGVja0tleSIsImRlbHRhIiwidnMiLCJ1cGRhdGVEZWx0YSIsInN0YXJ0U2Nyb2xsaW5nIiwic2V0U2Nyb2xsTGltaXQiLCJpbml0U2Nyb2xsQmFyIiwiYWRkU2VjdGlvbnMiLCJ0cmFuc2Zvcm1FbGVtZW50cyIsInRvdGFsV2lkdGgiLCJub2RlcyIsInN0YXJ0U2Nyb2xsVHMiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsImNoZWNrU2Nyb2xsUmFmIiwic2Nyb2xsVG9SYWYiLCJhY3RpdmVFbGVtZW50IiwiaXNBY3RpdmVFbGVtZW50U2Nyb2xsU2Vuc2l0aXZlIiwic3RvcFNjcm9sbGluZyIsIkhUTUxJbnB1dEVsZW1lbnQiLCJIVE1MVGV4dEFyZWFFbGVtZW50IiwiSFRNTEJ1dHRvbkVsZW1lbnQiLCJIVE1MU2VsZWN0RWxlbWVudCIsImZvcmNlZCIsInVwZGF0ZVNjcm9sbCIsImRpc3RhbmNlIiwidGltZVNpbmNlU3RhcnQiLCJhbmltYXRpbmdTY3JvbGwiLCJzZWN0aW9ucyIsInNlY3Rpb24iLCJwZXJzaXN0ZW50Iiwib3BhY2l0eSIsInBvaW50ZXJFdmVudHMiLCJyZW1vdmVBdHRyaWJ1dGUiLCJoYXNTY3JvbGxiYXIiLCJzY3JvbGxCYXJUcmFuc2xhdGlvbiIsInNjcm9sbEJhckxpbWl0Iiwic2Nyb2xsYmFyVGh1bWIiLCJjaGVja0NvbnRleHQiLCJzZXRTY3JvbGwiLCJzY3JvbGxiYXIiLCJhcHBlbmQiLCJnZXRTY3JvbGxCYXIiLCJyZWxlYXNlU2Nyb2xsQmFyIiwibW92ZVNjcm9sbEJhciIsInNjcm9sbGJhckJDUiIsInNjcm9sbGJhckhlaWdodCIsInNjcm9sbGJhcldpZHRoIiwic2Nyb2xsYmFyVGh1bWJCQ1IiLCJ0YXJnZXRQYXJlbnRzIiwiZmluZCIsInN0aWNreSIsIm1pZGRsZSIsImVsQkNSIiwiZWxUb3AiLCJlbExlZnQiLCJlbERpc3RhbmNlIiwiX3RoaXM3Iiwic2VjdGlvbkJDUiIsIm1hcHBlZFNlY3Rpb24iLCJsZXJwWCIsImxlcnBZIiwibXNUcmFuc2Zvcm0iLCJpc0ZvcmNlZCIsIl90aGlzOCIsInNldEFsbEVsZW1lbnRzIiwic2Nyb2xsTWlkZGxlIiwiX3JlZjYiLCJ0cmFuc2Zvcm1EaXN0YW5jZSIsIl90aGlzOSIsImVhc2luZyIsImRpc2FibGVMZXJwIiwidGFyZ2V0QkNSIiwib2Zmc2V0VG9wIiwib2Zmc2V0TGVmdCIsInBhcmVudFNlY3Rpb24iLCJjYW5kaWRhdGUiLCJfcmVmNyIsIl9yZWY4IiwicGFyZW50U2VjdGlvbk9mZnNldCIsInNjcm9sbFN0YXJ0Iiwic2Nyb2xsRGlmZiIsImxvb3AiLCJyZWluaXRTY3JvbGxCYXIiLCJkZXN0cm95U2Nyb2xsQmFyIiwiU21vb3RoIiwiaGFzaCIsImdldEVsZW1lbnRCeUlkIiwic3RhcnRTY3JvbGwiLCJzdG9wU2Nyb2xsIiwic2V0RXZlbnRzIiwidW5zZXRFdmVudHMiXSwic291cmNlUm9vdCI6IiJ9